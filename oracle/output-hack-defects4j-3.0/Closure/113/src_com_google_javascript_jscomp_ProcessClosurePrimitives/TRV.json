{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "static final DiagnosticType NULL_ARGUMENT_ERROR = DiagnosticType.error(\n      \"JSC_NULL_ARGUMENT_ERROR\",\n      \"method \\\"{0}\\\" called without an argument\");",
      "right" : "static final DiagnosticType NULL_ARGUMENT_ERROR = DiagnosticType.error(\n      \"JSC_NULL_ARGUMENT_ERROR\",\n      \"method \\\"{0}\\\" called without an argument\");",
      "info" : "FieldDeclaration[1503-1659]:FieldDeclaration[1503-1659]"
    }, {
      "left" : "static final DiagnosticType EXPECTED_OBJECTLIT_ERROR = DiagnosticType.error(\n      \"JSC_EXPECTED_OBJECTLIT_ERROR\",\n      \"method \\\"{0}\\\" expected an object literal argument\");",
      "right" : "static final DiagnosticType EXPECTED_OBJECTLIT_ERROR = DiagnosticType.error(\n      \"JSC_EXPECTED_OBJECTLIT_ERROR\",\n      \"method \\\"{0}\\\" expected an object literal argument\");",
      "info" : "FieldDeclaration[1663-1838]:FieldDeclaration[1663-1838]"
    }, {
      "left" : "static final DiagnosticType EXPECTED_STRING_ERROR = DiagnosticType.error(\n      \"JSC_EXPECTED_STRING_ERROR\",\n      \"method \\\"{0}\\\" expected an object string argument\");",
      "right" : "static final DiagnosticType EXPECTED_STRING_ERROR = DiagnosticType.error(\n      \"JSC_EXPECTED_STRING_ERROR\",\n      \"method \\\"{0}\\\" expected an object string argument\");",
      "info" : "FieldDeclaration[1842-2010]:FieldDeclaration[1842-2010]"
    }, {
      "left" : "static final DiagnosticType INVALID_ARGUMENT_ERROR = DiagnosticType.error(\n      \"JSC_INVALID_ARGUMENT_ERROR\",\n      \"method \\\"{0}\\\" called with invalid argument\");",
      "right" : "static final DiagnosticType INVALID_ARGUMENT_ERROR = DiagnosticType.error(\n      \"JSC_INVALID_ARGUMENT_ERROR\",\n      \"method \\\"{0}\\\" called with invalid argument\");",
      "info" : "FieldDeclaration[2014-2178]:FieldDeclaration[2014-2178]"
    }, {
      "left" : "static final DiagnosticType INVALID_STYLE_ERROR = DiagnosticType.error(\n      \"JSC_INVALID_CSS_NAME_MAP_STYLE_ERROR\",\n      \"Invalid CSS name map style {0}\");",
      "right" : "static final DiagnosticType INVALID_STYLE_ERROR = DiagnosticType.error(\n      \"JSC_INVALID_CSS_NAME_MAP_STYLE_ERROR\",\n      \"Invalid CSS name map style {0}\");",
      "info" : "FieldDeclaration[2182-2340]:FieldDeclaration[2182-2340]"
    }, {
      "left" : "static final DiagnosticType TOO_MANY_ARGUMENTS_ERROR = DiagnosticType.error(\n      \"JSC_TOO_MANY_ARGUMENTS_ERROR\",\n      \"method \\\"{0}\\\" called with more than one argument\");",
      "right" : "static final DiagnosticType TOO_MANY_ARGUMENTS_ERROR = DiagnosticType.error(\n      \"JSC_TOO_MANY_ARGUMENTS_ERROR\",\n      \"method \\\"{0}\\\" called with more than one argument\");",
      "info" : "FieldDeclaration[2344-2518]:FieldDeclaration[2344-2518]"
    }, {
      "left" : "static final DiagnosticType DUPLICATE_NAMESPACE_ERROR = DiagnosticType.error(\n      \"JSC_DUPLICATE_NAMESPACE_ERROR\",\n      \"namespace \\\"{0}\\\" cannot be provided twice\");",
      "right" : "static final DiagnosticType DUPLICATE_NAMESPACE_ERROR = DiagnosticType.error(\n      \"JSC_DUPLICATE_NAMESPACE_ERROR\",\n      \"namespace \\\"{0}\\\" cannot be provided twice\");",
      "info" : "FieldDeclaration[2522-2691]:FieldDeclaration[2522-2691]"
    }, {
      "left" : "static final DiagnosticType FUNCTION_NAMESPACE_ERROR = DiagnosticType.error(\n      \"JSC_FUNCTION_NAMESPACE_ERROR\",\n      \"\\\"{0}\\\" cannot be both provided and declared as a function\");",
      "right" : "static final DiagnosticType FUNCTION_NAMESPACE_ERROR = DiagnosticType.error(\n      \"JSC_FUNCTION_NAMESPACE_ERROR\",\n      \"\\\"{0}\\\" cannot be both provided and declared as a function\");",
      "info" : "FieldDeclaration[2695-2878]:FieldDeclaration[2695-2878]"
    }, {
      "left" : "static final DiagnosticType MISSING_PROVIDE_ERROR = DiagnosticType.error(\n      \"JSC_MISSING_PROVIDE_ERROR\",\n      \"required \\\"{0}\\\" namespace never provided\");",
      "right" : "static final DiagnosticType MISSING_PROVIDE_ERROR = DiagnosticType.error(\n      \"JSC_MISSING_PROVIDE_ERROR\",\n      \"required \\\"{0}\\\" namespace never provided\");",
      "info" : "FieldDeclaration[2882-3042]:FieldDeclaration[2882-3042]"
    }, {
      "left" : "static final DiagnosticType LATE_PROVIDE_ERROR = DiagnosticType.error(\n      \"JSC_LATE_PROVIDE_ERROR\",\n      \"required \\\"{0}\\\" namespace not provided yet\");",
      "right" : "static final DiagnosticType LATE_PROVIDE_ERROR = DiagnosticType.error(\n      \"JSC_LATE_PROVIDE_ERROR\",\n      \"required \\\"{0}\\\" namespace not provided yet\");",
      "info" : "FieldDeclaration[3046-3202]:FieldDeclaration[3046-3202]"
    }, {
      "left" : "static final DiagnosticType INVALID_PROVIDE_ERROR = DiagnosticType.error(\n      \"JSC_INVALID_PROVIDE_ERROR\",\n      \"\\\"{0}\\\" is not a valid JS identifier name\");",
      "right" : "static final DiagnosticType INVALID_PROVIDE_ERROR = DiagnosticType.error(\n      \"JSC_INVALID_PROVIDE_ERROR\",\n      \"\\\"{0}\\\" is not a valid JS identifier name\");",
      "info" : "FieldDeclaration[3206-3366]:FieldDeclaration[3206-3366]"
    }, {
      "left" : "static final DiagnosticType INVALID_DEFINE_NAME_ERROR = DiagnosticType.error(\n      \"JSC_INVALID_DEFINE_NAME_ERROR\",\n      \"\\\"{0}\\\" is not a valid JS identifier name\");",
      "right" : "static final DiagnosticType INVALID_DEFINE_NAME_ERROR = DiagnosticType.error(\n      \"JSC_INVALID_DEFINE_NAME_ERROR\",\n      \"\\\"{0}\\\" is not a valid JS identifier name\");",
      "info" : "FieldDeclaration[3370-3538]:FieldDeclaration[3370-3538]"
    }, {
      "left" : "static final DiagnosticType MISSING_DEFINE_ANNOTATION = DiagnosticType.error(\n      \"JSC_INVALID_MISSING_DEFINE_ANNOTATION\",\n      \"Missing @define annotation\");",
      "right" : "static final DiagnosticType MISSING_DEFINE_ANNOTATION = DiagnosticType.error(\n      \"JSC_INVALID_MISSING_DEFINE_ANNOTATION\",\n      \"Missing @define annotation\");",
      "info" : "FieldDeclaration[3542-3703]:FieldDeclaration[3542-3703]"
    }, {
      "left" : "static final DiagnosticType XMODULE_REQUIRE_ERROR = DiagnosticType.warning(\n      \"JSC_XMODULE_REQUIRE_ERROR\",\n      \"namespace \\\"{0}\\\" provided in module {1} \" +\n      \"but required in module {2}\");",
      "right" : "static final DiagnosticType XMODULE_REQUIRE_ERROR = DiagnosticType.warning(\n      \"JSC_XMODULE_REQUIRE_ERROR\",\n      \"namespace \\\"{0}\\\" provided in module {1} \" +\n      \"but required in module {2}\");",
      "info" : "FieldDeclaration[3707-3906]:FieldDeclaration[3707-3906]"
    }, {
      "left" : "static final DiagnosticType NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR =\n      DiagnosticType.error(\n          \"JSC_NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR\",\n      \"goog.setCssNameMapping only takes an object literal with string values\");",
      "right" : "static final DiagnosticType NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR =\n      DiagnosticType.error(\n          \"JSC_NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR\",\n      \"goog.setCssNameMapping only takes an object literal with string values\");",
      "info" : "FieldDeclaration[3910-4161]:FieldDeclaration[3910-4161]"
    }, {
      "left" : "static final DiagnosticType INVALID_CSS_RENAMING_MAP = DiagnosticType.warning(\n      \"INVALID_CSS_RENAMING_MAP\",\n      \"Invalid entries in css renaming map: {0}\");",
      "right" : "static final DiagnosticType INVALID_CSS_RENAMING_MAP = DiagnosticType.warning(\n      \"INVALID_CSS_RENAMING_MAP\",\n      \"Invalid entries in css renaming map: {0}\");",
      "info" : "FieldDeclaration[4165-4328]:FieldDeclaration[4165-4328]"
    }, {
      "left" : "static final DiagnosticType BASE_CLASS_ERROR = DiagnosticType.error(\n      \"JSC_BASE_CLASS_ERROR\",\n      \"incorrect use of goog.base: {0}\");",
      "right" : "static final DiagnosticType BASE_CLASS_ERROR = DiagnosticType.error(\n      \"JSC_BASE_CLASS_ERROR\",\n      \"incorrect use of goog.base: {0}\");",
      "info" : "FieldDeclaration[4332-4472]:FieldDeclaration[4332-4472]"
    }, {
      "left" : "static final String GOOG = \"goog\";",
      "right" : "static final String GOOG = \"goog\";",
      "info" : "FieldDeclaration[4476-4546]:FieldDeclaration[4476-4546]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[4550-4590]:FieldDeclaration[4550-4590]"
    }, {
      "left" : "private final JSModuleGraph moduleGraph;",
      "right" : "private final JSModuleGraph moduleGraph;",
      "info" : "FieldDeclaration[4593-4633]:FieldDeclaration[4593-4633]"
    }, {
      "left" : "private final Map<String, ProvidedName> providedNames =\n      Maps.newLinkedHashMap();",
      "right" : "private final Map<String, ProvidedName> providedNames =\n      Maps.newLinkedHashMap();",
      "info" : "FieldDeclaration[4704-4790]:FieldDeclaration[4704-4790]"
    }, {
      "left" : "private final List<UnrecognizedRequire> unrecognizedRequires =\n      Lists.newArrayList();",
      "right" : "private final List<UnrecognizedRequire> unrecognizedRequires =\n      Lists.newArrayList();",
      "info" : "FieldDeclaration[4794-4884]:FieldDeclaration[4794-4884]"
    }, {
      "left" : "private final Set<String> exportedVariables = Sets.newHashSet();",
      "right" : "private final Set<String> exportedVariables = Sets.newHashSet();",
      "info" : "FieldDeclaration[4887-4951]:FieldDeclaration[4887-4951]"
    }, {
      "left" : "private final CheckLevel requiresLevel;",
      "right" : "private final CheckLevel requiresLevel;",
      "info" : "FieldDeclaration[4954-4993]:FieldDeclaration[4954-4993]"
    }, {
      "left" : "private final PreprocessorSymbolTable preprocessorSymbolTable;",
      "right" : "private final PreprocessorSymbolTable preprocessorSymbolTable;",
      "info" : "FieldDeclaration[4996-5058]:FieldDeclaration[4996-5058]"
    }, {
      "left" : "private final List<Node> defineCalls = Lists.newArrayList();",
      "right" : "private final List<Node> defineCalls = Lists.newArrayList();",
      "info" : "FieldDeclaration[5061-5121]:FieldDeclaration[5061-5121]"
    }, {
      "left" : "ProcessClosurePrimitives(AbstractCompiler compiler,\n      @Nullable PreprocessorSymbolTable preprocessorSymbolTable,\n      CheckLevel requiresLevel)",
      "right" : "ProcessClosurePrimitives(AbstractCompiler compiler,\n      @Nullable PreprocessorSymbolTable preprocessorSymbolTable,\n      CheckLevel requiresLevel)",
      "info" : "MethodDeclaration[5125-5634]:MethodDeclaration[5125-5634]"
    }, {
      "left" : "Set<String> getExportedVariableNames()",
      "right" : "Set<String> getExportedVariableNames()",
      "info" : "MethodDeclaration[5638-5712]:MethodDeclaration[5638-5712]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[5716-6553]:MethodDeclaration[5716-6553]"
    }, {
      "left" : "private void replaceGoogDefines(Node n)",
      "right" : "private void replaceGoogDefines(Node n)",
      "info" : "MethodDeclaration[6557-7107]:MethodDeclaration[6557-7107]"
    }, {
      "left" : "public void hotSwapScript(Node scriptRoot, Node originalRoot)",
      "right" : "public void hotSwapScript(Node scriptRoot, Node originalRoot)",
      "info" : "MethodDeclaration[7111-7345]:MethodDeclaration[7111-7345]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[7349-10823]:MethodDeclaration[7349-10823]"
    }, {
      "left" : "private void processProvideCall(NodeTraversal t, Node n, Node parent)",
      "right" : "private void processProvideCall(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[12399-13281]:MethodDeclaration[12423-13305]"
    }, {
      "left" : "private void processDefineCall(NodeTraversal t, Node n, Node parent)",
      "right" : "private void processDefineCall(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[13287-13744]:MethodDeclaration[13311-13768]"
    }, {
      "left" : "private void handleTypedefDefinition(\n      NodeTraversal t, Node n)",
      "right" : "private void handleTypedefDefinition(\n      NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[13748-14282]:MethodDeclaration[13772-14306]"
    }, {
      "left" : "private void handleCandidateProvideDefinition(\n      NodeTraversal t, Node n, Node parent)",
      "right" : "private void handleCandidateProvideDefinition(\n      NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[14286-15041]:MethodDeclaration[14310-15065]"
    }, {
      "left" : "private void processBaseClassCall(NodeTraversal t, Node n)",
      "right" : "private void processBaseClassCall(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[15045-18704]:MethodDeclaration[15069-18728]"
    }, {
      "left" : "private Node getEnclosingDeclNameNode(NodeTraversal t)",
      "right" : "private Node getEnclosingDeclNameNode(NodeTraversal t)",
      "info" : "MethodDeclaration[18708-19498]:MethodDeclaration[18732-19522]"
    }, {
      "left" : "private void reportBadBaseClassUse(\n      NodeTraversal t, Node n, String extraMessage)",
      "right" : "private void reportBadBaseClassUse(\n      NodeTraversal t, Node n, String extraMessage)",
      "info" : "MethodDeclaration[19502-19723]:MethodDeclaration[19526-19747]"
    }, {
      "left" : "private void processProvideFromPreviousPass(\n      NodeTraversal t, String name, Node parent)",
      "right" : "private void processProvideFromPreviousPass(\n      NodeTraversal t, String name, Node parent)",
      "info" : "MethodDeclaration[19727-20919]:MethodDeclaration[19751-20943]"
    }, {
      "left" : "private void processSetCssNameMapping(NodeTraversal t, Node n, Node parent)",
      "right" : "private void processSetCssNameMapping(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[20923-24525]:MethodDeclaration[20947-24549]"
    }, {
      "left" : "public String get(String value)",
      "right" : "public String get(String value)",
      "info" : "MethodDeclaration[24070-24273]:MethodDeclaration[24094-24297]"
    }, {
      "left" : "public CssRenamingMap.Style getStyle()",
      "right" : "public CssRenamingMap.Style getStyle()",
      "info" : "MethodDeclaration[24283-24375]:MethodDeclaration[24307-24399]"
    }, {
      "left" : "private boolean verifyProvide(NodeTraversal t, Node methodName, Node arg)",
      "right" : "private boolean verifyProvide(NodeTraversal t, Node methodName, Node arg)",
      "info" : "MethodDeclaration[24529-25195]:MethodDeclaration[24553-25219]"
    }, {
      "left" : "private boolean verifyDefine(NodeTraversal t,\n      Node expr,\n      Node methodName, Node args)",
      "right" : "private boolean verifyDefine(NodeTraversal t,\n      Node expr,\n      Node methodName, Node args)",
      "info" : "MethodDeclaration[25199-26377]:MethodDeclaration[25223-26401]"
    }, {
      "left" : "private boolean verifyLastArgumentIsString(\n      NodeTraversal t, Node methodName, Node arg)",
      "right" : "private boolean verifyLastArgumentIsString(\n      NodeTraversal t, Node methodName, Node arg)",
      "info" : "MethodDeclaration[26381-26831]:MethodDeclaration[26405-26855]"
    }, {
      "left" : "private boolean verifyNotNull(NodeTraversal t, Node methodName, Node arg)",
      "right" : "private boolean verifyNotNull(NodeTraversal t, Node methodName, Node arg)",
      "info" : "MethodDeclaration[26835-27168]:MethodDeclaration[26859-27192]"
    }, {
      "left" : "private boolean verifyOfType(NodeTraversal t, Node methodName,\n      Node arg, int desiredType)",
      "right" : "private boolean verifyOfType(NodeTraversal t, Node methodName,\n      Node arg, int desiredType)",
      "info" : "MethodDeclaration[27172-27547]:MethodDeclaration[27196-27571]"
    }, {
      "left" : "private boolean verifyIsLast(NodeTraversal t, Node methodName, Node arg)",
      "right" : "private boolean verifyIsLast(NodeTraversal t, Node methodName, Node arg)",
      "info" : "MethodDeclaration[27551-27898]:MethodDeclaration[27575-27922]"
    }, {
      "left" : "private boolean verifySetCssNameMapping(NodeTraversal t, Node methodName,\n      Node firstArg)",
      "right" : "private boolean verifySetCssNameMapping(NodeTraversal t, Node methodName,\n      Node firstArg)",
      "info" : "MethodDeclaration[27902-28802]:MethodDeclaration[27926-28826]"
    }, {
      "left" : "private void registerAnyProvidedPrefixes(\n      String ns, Node node, JSModule module)",
      "right" : "private void registerAnyProvidedPrefixes(\n      String ns, Node node, JSModule module)",
      "info" : "MethodDeclaration[28806-29685]:MethodDeclaration[28830-29709]"
    }, {
      "left" : "ProvidedName",
      "right" : "ProvidedName",
      "info" : "TypeDeclaration[29769-39166]:TypeDeclaration[29793-39190]"
    }, {
      "left" : "private final String namespace;",
      "right" : "private final String namespace;",
      "info" : "FieldDeclaration[29895-29926]:FieldDeclaration[29919-29950]"
    }, {
      "left" : "private final Node firstNode;",
      "right" : "private final Node firstNode;",
      "info" : "FieldDeclaration[30025-30054]:FieldDeclaration[30049-30078]"
    }, {
      "left" : "private final JSModule firstModule;",
      "right" : "private final JSModule firstModule;",
      "info" : "FieldDeclaration[30059-30094]:FieldDeclaration[30083-30118]"
    }, {
      "left" : "private Node explicitNode = null;",
      "right" : "private Node explicitNode = null;",
      "info" : "FieldDeclaration[30228-30261]:FieldDeclaration[30252-30285]"
    }, {
      "left" : "private JSModule explicitModule = null;",
      "right" : "private JSModule explicitModule = null;",
      "info" : "FieldDeclaration[30266-30305]:FieldDeclaration[30290-30329]"
    }, {
      "left" : "private Node candidateDefinition = null;",
      "right" : "private Node candidateDefinition = null;",
      "info" : "FieldDeclaration[30344-30384]:FieldDeclaration[30368-30408]"
    }, {
      "left" : "private JSModule minimumModule = null;",
      "right" : "private JSModule minimumModule = null;",
      "info" : "FieldDeclaration[30447-30485]:FieldDeclaration[30471-30509]"
    }, {
      "left" : "private Node replacementNode = null;",
      "right" : "private Node replacementNode = null;",
      "info" : "FieldDeclaration[30527-30563]:FieldDeclaration[30551-30587]"
    }, {
      "left" : "ProvidedName(String namespace, Node node, JSModule module,\n        boolean explicit)",
      "right" : "ProvidedName(String namespace, Node node, JSModule module,\n        boolean explicit)",
      "info" : "MethodDeclaration[30569-30913]:MethodDeclaration[30593-30937]"
    }, {
      "left" : "void addProvide(Node node, JSModule module, boolean explicit)",
      "right" : "void addProvide(Node node, JSModule module, boolean explicit)",
      "info" : "MethodDeclaration[30919-31289]:MethodDeclaration[30943-31313]"
    }, {
      "left" : "boolean isExplicitlyProvided()",
      "right" : "boolean isExplicitlyProvided()",
      "info" : "MethodDeclaration[31295-31368]:MethodDeclaration[31319-31392]"
    }, {
      "left" : "void addDefinition(Node node, JSModule module)",
      "right" : "void addDefinition(Node node, JSModule module)",
      "info" : "MethodDeclaration[31374-32087]:MethodDeclaration[31398-32111]"
    }, {
      "left" : "private void updateMinimumModule(JSModule newModule)",
      "right" : "private void updateMinimumModule(JSModule newModule)",
      "info" : "MethodDeclaration[32093-32622]:MethodDeclaration[32117-32646]"
    }, {
      "left" : "void replace()",
      "right" : "void replace()",
      "info" : "MethodDeclaration[32628-35611]:MethodDeclaration[32652-35635]"
    }, {
      "left" : "private Node createDeclarationNode()",
      "right" : "private Node createDeclarationNode()",
      "info" : "MethodDeclaration[35617-35909]:MethodDeclaration[35641-35933]"
    }, {
      "left" : "private Node makeVarDeclNode()",
      "right" : "private Node makeVarDeclNode()",
      "info" : "MethodDeclaration[35915-36647]:MethodDeclaration[35939-36671]"
    }, {
      "left" : "private Node createNamespaceLiteral()",
      "right" : "private Node createNamespaceLiteral()",
      "info" : "MethodDeclaration[36653-37045]:MethodDeclaration[36677-37069]"
    }, {
      "left" : "private Node makeAssignmentExprNode()",
      "right" : "private Node makeAssignmentExprNode()",
      "info" : "MethodDeclaration[37051-37793]:MethodDeclaration[37075-37817]"
    }, {
      "left" : "private JSDocInfo createConstantJsDoc()",
      "right" : "private JSDocInfo createConstantJsDoc()",
      "info" : "MethodDeclaration[37799-37975]:MethodDeclaration[37823-37999]"
    }, {
      "left" : "private void setSourceInfo(Node newNode)",
      "right" : "private void setSourceInfo(Node newNode)",
      "info" : "MethodDeclaration[37981-38495]:MethodDeclaration[38005-38519]"
    }, {
      "left" : "private int getSourceInfoOffset(Node provideStringNode)",
      "right" : "private int getSourceInfoOffset(Node provideStringNode)",
      "info" : "MethodDeclaration[38501-38945]:MethodDeclaration[38525-38969]"
    }, {
      "left" : "private Node getProvideStringNode()",
      "right" : "private Node getProvideStringNode()",
      "info" : "MethodDeclaration[38951-39162]:MethodDeclaration[38975-39186]"
    }, {
      "left" : "private static boolean isNamespacePlaceholder(Node n)",
      "right" : "private static boolean isNamespacePlaceholder(Node n)",
      "info" : "MethodDeclaration[39170-39692]:MethodDeclaration[39194-39716]"
    }, {
      "left" : "private void maybeAddStringNodeToSymbolTable(Node n)",
      "right" : "private void maybeAddStringNodeToSymbolTable(Node n)",
      "info" : "MethodDeclaration[39696-41092]:MethodDeclaration[39720-41116]"
    }, {
      "left" : "private void maybeAddToSymbolTable(Node n)",
      "right" : "private void maybeAddToSymbolTable(Node n)",
      "info" : "MethodDeclaration[41096-41312]:MethodDeclaration[41120-41336]"
    }, {
      "left" : "UnrecognizedRequire",
      "right" : "UnrecognizedRequire",
      "info" : "TypeDeclaration[41396-41801]:TypeDeclaration[41420-41825]"
    }, {
      "left" : "final Node requireNode;",
      "right" : "final Node requireNode;",
      "info" : "FieldDeclaration[41525-41548]:FieldDeclaration[41549-41572]"
    }, {
      "left" : "final String namespace;",
      "right" : "final String namespace;",
      "info" : "FieldDeclaration[41553-41576]:FieldDeclaration[41577-41600]"
    }, {
      "left" : "final String inputName;",
      "right" : "final String inputName;",
      "info" : "FieldDeclaration[41581-41604]:FieldDeclaration[41605-41628]"
    }, {
      "left" : "UnrecognizedRequire(Node requireNode, String namespace, String inputName)",
      "right" : "UnrecognizedRequire(Node requireNode, String namespace, String inputName)",
      "info" : "MethodDeclaration[41610-41797]:MethodDeclaration[41634-41821]"
    } ],
    "mappings" : [
 {
      "left" : "ProcessClosurePrimitives",
      "right" : "ProcessClosurePrimitives",
      "info" : "SimpleName[5125-5149]:SimpleName[5125-5149]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[5150-5175]:SingleVariableDeclaration[5150-5175]"
    }, {
      "left" : "@Nullable PreprocessorSymbolTable preprocessorSymbolTable",
      "right" : "@Nullable PreprocessorSymbolTable preprocessorSymbolTable",
      "info" : "SingleVariableDeclaration[5183-5240]:SingleVariableDeclaration[5183-5240]"
    }, {
      "left" : "CheckLevel requiresLevel",
      "right" : "CheckLevel requiresLevel",
      "info" : "SingleVariableDeclaration[5248-5272]:SingleVariableDeclaration[5248-5272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5274-5634]:Block[5274-5634]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[5280-5305]:ExpressionStatement[5280-5305]"
    }, {
      "left" : "this.preprocessorSymbolTable = preprocessorSymbolTable;",
      "right" : "this.preprocessorSymbolTable = preprocessorSymbolTable;",
      "info" : "ExpressionStatement[5310-5365]:ExpressionStatement[5310-5365]"
    }, {
      "left" : "this.moduleGraph = compiler.getModuleGraph();",
      "right" : "this.moduleGraph = compiler.getModuleGraph();",
      "info" : "ExpressionStatement[5370-5415]:ExpressionStatement[5370-5415]"
    }, {
      "left" : "this.requiresLevel = requiresLevel;",
      "right" : "this.requiresLevel = requiresLevel;",
      "info" : "ExpressionStatement[5420-5455]:ExpressionStatement[5420-5455]"
    }, {
      "left" : "providedNames.put(GOOG,\n        new ProvidedName(GOOG, null, null, false /* implicit */));",
      "right" : "providedNames.put(GOOG,\n        new ProvidedName(GOOG, null, null, false /* implicit */));",
      "info" : "ExpressionStatement[5540-5630]:ExpressionStatement[5540-5630]"
    }, {
      "left" : "Set<String>",
      "right" : "Set<String>",
      "info" : "ParameterizedType[5638-5649]:ParameterizedType[5638-5649]"
    }, {
      "left" : "getExportedVariableNames",
      "right" : "getExportedVariableNames",
      "info" : "SimpleName[5650-5674]:SimpleName[5650-5674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5677-5712]:Block[5677-5712]"
    }, {
      "left" : "return exportedVariables;",
      "right" : "return exportedVariables;",
      "info" : "ReturnStatement[5683-5708]:ReturnStatement[5683-5708]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5716-5725]:MarkerAnnotation[5716-5725]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5728-5734]:Modifier[5728-5734]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5735-5739]:PrimitiveType[5735-5739]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[5740-5747]:SimpleName[5740-5747]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[5748-5760]:SingleVariableDeclaration[5748-5760]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[5762-5771]:SingleVariableDeclaration[5762-5771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5773-6553]:Block[5773-6553]"
    }, {
      "left" : "new NodeTraversal(compiler, this).traverse(root);",
      "right" : "new NodeTraversal(compiler, this).traverse(root);",
      "info" : "ExpressionStatement[5779-5828]:ExpressionStatement[5779-5828]"
    }, {
      "left" : "for (Node n : defineCalls)",
      "right" : "for (Node n : defineCalls)",
      "info" : "EnhancedForStatement[5834-5897]:EnhancedForStatement[5834-5897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5861-5897]:Block[5861-5897]"
    }, {
      "left" : "replaceGoogDefines(n);",
      "right" : "replaceGoogDefines(n);",
      "info" : "ExpressionStatement[5869-5891]:ExpressionStatement[5869-5891]"
    }, {
      "left" : "for (ProvidedName pn : providedNames.values())",
      "right" : "for (ProvidedName pn : providedNames.values())",
      "info" : "EnhancedForStatement[5903-5977]:EnhancedForStatement[5903-5977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5950-5977]:Block[5950-5977]"
    }, {
      "left" : "pn.replace();",
      "right" : "pn.replace();",
      "info" : "ExpressionStatement[5958-5971]:ExpressionStatement[5958-5971]"
    }, {
      "left" : "if (requiresLevel.isOn())",
      "right" : "if (requiresLevel.isOn())",
      "info" : "IfStatement[5983-6549]:IfStatement[5983-6549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6009-6549]:Block[6009-6549]"
    }, {
      "left" : "for (UnrecognizedRequire r : unrecognizedRequires)",
      "right" : "for (UnrecognizedRequire r : unrecognizedRequires)",
      "info" : "EnhancedForStatement[6017-6543]:EnhancedForStatement[6017-6543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6068-6543]:Block[6068-6543]"
    }, {
      "left" : "DiagnosticType error;",
      "right" : "DiagnosticType error;",
      "info" : "VariableDeclarationStatement[6078-6099]:VariableDeclarationStatement[6078-6099]"
    }, {
      "left" : "ProvidedName expectedName = providedNames.get(r.namespace);",
      "right" : "ProvidedName expectedName = providedNames.get(r.namespace);",
      "info" : "VariableDeclarationStatement[6108-6167]:VariableDeclarationStatement[6108-6167]"
    }, {
      "left" : "if (expectedName != null && expectedName.firstNode != null)",
      "right" : "if (expectedName != null && expectedName.firstNode != null)",
      "info" : "IfStatement[6176-6419]:IfStatement[6176-6419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6236-6361]:Block[6236-6361]"
    }, {
      "left" : "error = LATE_PROVIDE_ERROR;",
      "right" : "error = LATE_PROVIDE_ERROR;",
      "info" : "ExpressionStatement[6324-6351]:ExpressionStatement[6324-6351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6367-6419]:Block[6367-6419]"
    }, {
      "left" : "error = MISSING_PROVIDE_ERROR;",
      "right" : "error = MISSING_PROVIDE_ERROR;",
      "info" : "ExpressionStatement[6379-6409]:ExpressionStatement[6379-6409]"
    }, {
      "left" : "compiler.report(JSError.make(\n            r.inputName, r.requireNode, requiresLevel, error, r.namespace));",
      "right" : "compiler.report(JSError.make(\n            r.inputName, r.requireNode, requiresLevel, error, r.namespace));",
      "info" : "ExpressionStatement[6429-6535]:ExpressionStatement[6429-6535]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6583-6590]:Modifier[6583-6590]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6591-6595]:PrimitiveType[6591-6595]"
    }, {
      "left" : "replaceGoogDefines",
      "right" : "replaceGoogDefines",
      "info" : "SimpleName[6596-6614]:SimpleName[6596-6614]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[6615-6621]:SingleVariableDeclaration[6615-6621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6623-7107]:Block[6623-7107]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[6629-6657]:VariableDeclarationStatement[6629-6657]"
    }, {
      "left" : "Preconditions.checkState(parent.isExprResult());",
      "right" : "Preconditions.checkState(parent.isExprResult());",
      "info" : "ExpressionStatement[6662-6710]:ExpressionStatement[6662-6710]"
    }, {
      "left" : "String name = n.getChildAtIndex(1).getString();",
      "right" : "String name = n.getChildAtIndex(1).getString();",
      "info" : "VariableDeclarationStatement[6715-6762]:VariableDeclarationStatement[6715-6762]"
    }, {
      "left" : "Node value = n.getChildAtIndex(2).detachFromParent();",
      "right" : "Node value = n.getChildAtIndex(2).detachFromParent();",
      "info" : "VariableDeclarationStatement[6767-6820]:VariableDeclarationStatement[6767-6820]"
    }, {
      "left" : "Node replacement = NodeUtil.newQualifiedNameNodeDeclaration(\n        compiler.getCodingConvention(), name, value, n.getJSDocInfo());",
      "right" : "Node replacement = NodeUtil.newQualifiedNameNodeDeclaration(\n        compiler.getCodingConvention(), name, value, n.getJSDocInfo());",
      "info" : "VariableDeclarationStatement[6826-6958]:VariableDeclarationStatement[6826-6958]"
    }, {
      "left" : "replacement.useSourceInfoIfMissingFromForTree(n);",
      "right" : "replacement.useSourceInfoIfMissingFromForTree(n);",
      "info" : "ExpressionStatement[6963-7012]:ExpressionStatement[6963-7012]"
    }, {
      "left" : "parent.getParent().replaceChild(parent, replacement);",
      "right" : "parent.getParent().replaceChild(parent, replacement);",
      "info" : "ExpressionStatement[7017-7070]:ExpressionStatement[7017-7070]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[7075-7103]:ExpressionStatement[7075-7103]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7111-7120]:MarkerAnnotation[7111-7120]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7123-7129]:Modifier[7123-7129]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7130-7134]:PrimitiveType[7130-7134]"
    }, {
      "left" : "hotSwapScript",
      "right" : "hotSwapScript",
      "info" : "SimpleName[7135-7148]:SimpleName[7135-7148]"
    }, {
      "left" : "Node scriptRoot",
      "right" : "Node scriptRoot",
      "info" : "SingleVariableDeclaration[7149-7164]:SingleVariableDeclaration[7149-7164]"
    }, {
      "left" : "Node originalRoot",
      "right" : "Node originalRoot",
      "info" : "SingleVariableDeclaration[7166-7183]:SingleVariableDeclaration[7166-7183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7185-7345]:Block[7185-7345]"
    }, {
      "left" : "this.compiler.process(this);",
      "right" : "this.compiler.process(this);",
      "info" : "ExpressionStatement[7313-7341]:ExpressionStatement[7313-7341]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7349-7358]:MarkerAnnotation[7349-7358]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7361-7367]:Modifier[7361-7367]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7368-7372]:PrimitiveType[7368-7372]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[7373-7378]:SimpleName[7373-7378]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[7379-7394]:SingleVariableDeclaration[7379-7394]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[7396-7402]:SingleVariableDeclaration[7396-7402]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[7404-7415]:SingleVariableDeclaration[7404-7415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7417-10823]:Block[7417-10823]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.CALL:\n        boolean isExpr = parent.isExprResult();\n        Node left = n.getFirstChild();\n        if (left.isGetProp()) {\n          Node name = left.getFirstChild();\n          if (name.isName() &&\n              GOOG.equals(name.getString())) {\n            // For the sake of simplicity, we report code changes\n            // when we see a provides/requires, and don't worry about\n            // reporting the change when we actually do the replacement.\n            String methodName = name.getNext().getString();\n            if (\"base\".equals(methodName)) {\n              processBaseClassCall(t, n);\n            } else if (!isExpr) {\n              // All other methods must be called in an EXPR.\n              break;\n            } else if (\"define\".equals(methodName)) {\n              processDefineCall(t, n, parent);\n            } else if (\"require\".equals(methodName)) {\n              processRequireCall(t, n, parent);\n            } else if (\"provide\".equals(methodName)) {\n              processProvideCall(t, n, parent);\n            } else if (\"exportSymbol\".equals(methodName)) {\n              Node arg = left.getNext();\n              if (arg.isString()) {\n                int dot = arg.getString().indexOf('.');\n                if (dot == -1) {\n                  exportedVariables.add(arg.getString());\n                } else {\n                  exportedVariables.add(arg.getString().substring(0, dot));\n                }\n              }\n            } else if (\"addDependency\".equals(methodName)) {\n              CodingConvention convention = compiler.getCodingConvention();\n              List<String> typeDecls =\n                  convention.identifyTypeDeclarationCall(n);\n              if (typeDecls != null) {\n                for (String typeDecl : typeDecls) {\n                  compiler.getTypeRegistry().forwardDeclareType(typeDecl);\n                }\n              }\n\n              // We can't modify parent, so just create a node that will\n              // get compiled out.\n              parent.replaceChild(n, IR.number(0));\n              compiler.reportCodeChange();\n            } else if (\"setCssNameMapping\".equals(methodName)) {\n              processSetCssNameMapping(t, n, parent);\n            }\n          }\n        }\n        break;\n\n      case Token.ASSIGN:\n      case Token.NAME:\n        // If this is an assignment to a provided name, remove the provided\n        // object.\n        handleCandidateProvideDefinition(t, n, parent);\n        break;\n\n      case Token.EXPR_RESULT:\n        handleTypedefDefinition(t, n);\n        break;\n\n      case Token.FUNCTION:\n        // If this is a declaration of a provided named function, this is an\n        // error. Hoisted functions will explode if they're provided.\n        if (t.inGlobalScope() &&\n            !NodeUtil.isFunctionExpression(n)) {\n          String name = n.getFirstChild().getString();\n          ProvidedName pn = providedNames.get(name);\n          if (pn != null) {\n            compiler.report(t.makeError(n, FUNCTION_NAMESPACE_ERROR, name));\n          }\n        }\n        break;\n\n      case Token.GETPROP:\n        if (n.getFirstChild().isName() &&\n            !parent.isCall() &&\n            !parent.isAssign() &&\n            \"goog.base\".equals(n.getQualifiedName())) {\n          reportBadBaseClassUse(t, n, \"May only be called directly.\");\n        }\n        break;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.CALL:\n        boolean isExpr = parent.isExprResult();\n        Node left = n.getFirstChild();\n        if (left.isGetProp()) {\n          Node name = left.getFirstChild();\n          if (name.isName() &&\n              GOOG.equals(name.getString())) {\n            // For the sake of simplicity, we report code changes\n            // when we see a provides/requires, and don't worry about\n            // reporting the change when we actually do the replacement.\n            String methodName = name.getNext().getString();\n            if (\"base\".equals(methodName)) {\n              processBaseClassCall(t, n);\n            } else if (!isExpr) {\n              // All other methods must be called in an EXPR.\n              break;\n            } else if (\"define\".equals(methodName)) {\n              processDefineCall(t, n, parent);\n            } else if (\"require\".equals(methodName)) {\n              processRequireCall(t, n, parent);\n            } else if (\"provide\".equals(methodName)) {\n              processProvideCall(t, n, parent);\n            } else if (\"exportSymbol\".equals(methodName)) {\n              Node arg = left.getNext();\n              if (arg.isString()) {\n                int dot = arg.getString().indexOf('.');\n                if (dot == -1) {\n                  exportedVariables.add(arg.getString());\n                } else {\n                  exportedVariables.add(arg.getString().substring(0, dot));\n                }\n              }\n            } else if (\"addDependency\".equals(methodName)) {\n              CodingConvention convention = compiler.getCodingConvention();\n              List<String> typeDecls =\n                  convention.identifyTypeDeclarationCall(n);\n              if (typeDecls != null) {\n                for (String typeDecl : typeDecls) {\n                  compiler.getTypeRegistry().forwardDeclareType(typeDecl);\n                }\n              }\n\n              // We can't modify parent, so just create a node that will\n              // get compiled out.\n              parent.replaceChild(n, IR.number(0));\n              compiler.reportCodeChange();\n            } else if (\"setCssNameMapping\".equals(methodName)) {\n              processSetCssNameMapping(t, n, parent);\n            }\n          }\n        }\n        break;\n\n      case Token.ASSIGN:\n      case Token.NAME:\n        // If this is an assignment to a provided name, remove the provided\n        // object.\n        handleCandidateProvideDefinition(t, n, parent);\n        break;\n\n      case Token.EXPR_RESULT:\n        handleTypedefDefinition(t, n);\n        break;\n\n      case Token.FUNCTION:\n        // If this is a declaration of a provided named function, this is an\n        // error. Hoisted functions will explode if they're provided.\n        if (t.inGlobalScope() &&\n            !NodeUtil.isFunctionExpression(n)) {\n          String name = n.getFirstChild().getString();\n          ProvidedName pn = providedNames.get(name);\n          if (pn != null) {\n            compiler.report(t.makeError(n, FUNCTION_NAMESPACE_ERROR, name));\n          }\n        }\n        break;\n\n      case Token.GETPROP:\n        if (n.getFirstChild().isName() &&\n            !parent.isCall() &&\n            !parent.isAssign() &&\n            \"goog.base\".equals(n.getQualifiedName())) {\n          reportBadBaseClassUse(t, n, \"May only be called directly.\");\n        }\n        break;\n    }",
      "info" : "SwitchStatement[7423-10819]:SwitchStatement[7423-10819]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[7452-7468]:SwitchCase[7452-7468]"
    }, {
      "left" : "boolean isExpr = parent.isExprResult();",
      "right" : "boolean isExpr = parent.isExprResult();",
      "info" : "VariableDeclarationStatement[7477-7516]:VariableDeclarationStatement[7477-7516]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[7525-7555]:VariableDeclarationStatement[7525-7555]"
    }, {
      "left" : "if (left.isGetProp())",
      "right" : "if (left.isGetProp())",
      "info" : "IfStatement[7564-9704]:IfStatement[7564-9704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7586-9704]:Block[7586-9704]"
    }, {
      "left" : "Node name = left.getFirstChild();",
      "right" : "Node name = left.getFirstChild();",
      "info" : "VariableDeclarationStatement[7598-7631]:VariableDeclarationStatement[7598-7631]"
    }, {
      "left" : "if (name.isName() &&\n              GOOG.equals(name.getString()))",
      "right" : "if (name.isName() &&\n              GOOG.equals(name.getString()))",
      "info" : "IfStatement[7642-9694]:IfStatement[7642-9694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7708-9694]:Block[7708-9694]"
    }, {
      "left" : "String methodName = name.getNext().getString();",
      "right" : "String methodName = name.getNext().getString();",
      "info" : "VariableDeclarationStatement[7931-7978]:VariableDeclarationStatement[7931-7978]"
    }, {
      "left" : "if (\"base\".equals(methodName))",
      "right" : "if (\"base\".equals(methodName))",
      "info" : "IfStatement[7991-9682]:IfStatement[7991-9682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8022-8079]:Block[8022-8079]"
    }, {
      "left" : "processBaseClassCall(t, n);",
      "right" : "processBaseClassCall(t, n);",
      "info" : "ExpressionStatement[8038-8065]:ExpressionStatement[8038-8065]"
    }, {
      "left" : "if (!isExpr)",
      "right" : "if (!isExpr)",
      "info" : "IfStatement[8085-9682]:IfStatement[8085-9682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8098-8196]:Block[8098-8196]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8176-8182]:BreakStatement[8176-8182]"
    }, {
      "left" : "if (\"define\".equals(methodName))",
      "right" : "if (\"define\".equals(methodName))",
      "info" : "IfStatement[8202-9682]:IfStatement[8202-9682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8235-8297]:Block[8235-8297]"
    }, {
      "left" : "processDefineCall(t, n, parent);",
      "right" : "processDefineCall(t, n, parent);",
      "info" : "ExpressionStatement[8251-8283]:ExpressionStatement[8251-8283]"
    }, {
      "left" : "if (\"require\".equals(methodName))",
      "right" : "if (\"require\".equals(methodName))",
      "info" : "IfStatement[8303-9682]:IfStatement[8303-9682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8337-8400]:Block[8337-8400]"
    }, {
      "left" : "processRequireCall(t, n, parent);",
      "right" : "processRequireCall(t, n, parent);",
      "info" : "ExpressionStatement[8353-8386]:ExpressionStatement[8353-8386]"
    }, {
      "left" : "if (\"provide\".equals(methodName))",
      "right" : "if (\"provide\".equals(methodName))",
      "info" : "IfStatement[8406-9682]:IfStatement[8406-9682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8440-8503]:Block[8440-8503]"
    }, {
      "left" : "processProvideCall(t, n, parent);",
      "right" : "processProvideCall(t, n, parent);",
      "info" : "ExpressionStatement[8456-8489]:ExpressionStatement[8456-8489]"
    }, {
      "left" : "if (\"exportSymbol\".equals(methodName))",
      "right" : "if (\"exportSymbol\".equals(methodName))",
      "info" : "IfStatement[8509-9682]:IfStatement[8509-9682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8548-8922]:Block[8548-8922]"
    }, {
      "left" : "Node arg = left.getNext();",
      "right" : "Node arg = left.getNext();",
      "info" : "VariableDeclarationStatement[8564-8590]:VariableDeclarationStatement[8564-8590]"
    }, {
      "left" : "if (arg.isString())",
      "right" : "if (arg.isString())",
      "info" : "IfStatement[8605-8908]:IfStatement[8605-8908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8625-8908]:Block[8625-8908]"
    }, {
      "left" : "int dot = arg.getString().indexOf('.');",
      "right" : "int dot = arg.getString().indexOf('.');",
      "info" : "VariableDeclarationStatement[8643-8682]:VariableDeclarationStatement[8643-8682]"
    }, {
      "left" : "if (dot == -1)",
      "right" : "if (dot == -1)",
      "info" : "IfStatement[8699-8892]:IfStatement[8699-8892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8714-8791]:Block[8714-8791]"
    }, {
      "left" : "exportedVariables.add(arg.getString());",
      "right" : "exportedVariables.add(arg.getString());",
      "info" : "ExpressionStatement[8734-8773]:ExpressionStatement[8734-8773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8797-8892]:Block[8797-8892]"
    }, {
      "left" : "exportedVariables.add(arg.getString().substring(0, dot));",
      "right" : "exportedVariables.add(arg.getString().substring(0, dot));",
      "info" : "ExpressionStatement[8817-8874]:ExpressionStatement[8817-8874]"
    }, {
      "left" : "if (\"addDependency\".equals(methodName))",
      "right" : "if (\"addDependency\".equals(methodName))",
      "info" : "IfStatement[8928-9682]:IfStatement[8928-9682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8968-9563]:Block[8968-9563]"
    }, {
      "left" : "CodingConvention convention = compiler.getCodingConvention();",
      "right" : "CodingConvention convention = compiler.getCodingConvention();",
      "info" : "VariableDeclarationStatement[8984-9045]:VariableDeclarationStatement[8984-9045]"
    }, {
      "left" : "List<String> typeDecls =\n                  convention.identifyTypeDeclarationCall(n);",
      "right" : "List<String> typeDecls =\n                  convention.identifyTypeDeclarationCall(n);",
      "info" : "VariableDeclarationStatement[9060-9145]:VariableDeclarationStatement[9060-9145]"
    }, {
      "left" : "if (typeDecls != null)",
      "right" : "if (typeDecls != null)",
      "info" : "IfStatement[9160-9345]:IfStatement[9160-9345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9183-9345]:Block[9183-9345]"
    }, {
      "left" : "for (String typeDecl : typeDecls)",
      "right" : "for (String typeDecl : typeDecls)",
      "info" : "EnhancedForStatement[9201-9329]:EnhancedForStatement[9201-9329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9235-9329]:Block[9235-9329]"
    }, {
      "left" : "compiler.getTypeRegistry().forwardDeclareType(typeDecl);",
      "right" : "compiler.getTypeRegistry().forwardDeclareType(typeDecl);",
      "info" : "ExpressionStatement[9255-9311]:ExpressionStatement[9255-9311]"
    }, {
      "left" : "parent.replaceChild(n, IR.number(0));",
      "right" : "parent.replaceChild(n, IR.number(0));",
      "info" : "ExpressionStatement[9469-9506]:ExpressionStatement[9469-9506]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[9521-9549]:ExpressionStatement[9521-9549]"
    }, {
      "left" : "if (\"setCssNameMapping\".equals(methodName))",
      "right" : "if (\"setCssNameMapping\".equals(methodName))",
      "info" : "IfStatement[9569-9682]:IfStatement[9569-9682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9613-9682]:Block[9613-9682]"
    }, {
      "left" : "processSetCssNameMapping(t, n, parent);",
      "right" : "processSetCssNameMapping(t, n, parent);",
      "info" : "ExpressionStatement[9629-9668]:ExpressionStatement[9629-9668]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9713-9719]:BreakStatement[9713-9719]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[9727-9745]:SwitchCase[9727-9745]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[9752-9768]:SwitchCase[9752-9768]"
    }, {
      "left" : "handleCandidateProvideDefinition(t, n, parent);",
      "right" : "handleCandidateProvideDefinition(t, n, parent);",
      "info" : "ExpressionStatement[9872-9919]:ExpressionStatement[9872-9919]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9928-9934]:BreakStatement[9928-9934]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[9942-9965]:SwitchCase[9942-9965]"
    }, {
      "left" : "handleTypedefDefinition(t, n);",
      "right" : "handleTypedefDefinition(t, n);",
      "info" : "ExpressionStatement[9974-10004]:ExpressionStatement[9974-10004]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10013-10019]:BreakStatement[10013-10019]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[10027-10047]:SwitchCase[10027-10047]"
    }, {
      "left" : "if (t.inGlobalScope() &&\n            !NodeUtil.isFunctionExpression(n))",
      "right" : "if (t.inGlobalScope() &&\n            !NodeUtil.isFunctionExpression(n))",
      "info" : "IfStatement[10203-10511]:IfStatement[10203-10511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10275-10511]:Block[10275-10511]"
    }, {
      "left" : "String name = n.getFirstChild().getString();",
      "right" : "String name = n.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[10287-10331]:VariableDeclarationStatement[10287-10331]"
    }, {
      "left" : "ProvidedName pn = providedNames.get(name);",
      "right" : "ProvidedName pn = providedNames.get(name);",
      "info" : "VariableDeclarationStatement[10342-10384]:VariableDeclarationStatement[10342-10384]"
    }, {
      "left" : "if (pn != null)",
      "right" : "if (pn != null)",
      "info" : "IfStatement[10395-10501]:IfStatement[10395-10501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10411-10501]:Block[10411-10501]"
    }, {
      "left" : "compiler.report(t.makeError(n, FUNCTION_NAMESPACE_ERROR, name));",
      "right" : "compiler.report(t.makeError(n, FUNCTION_NAMESPACE_ERROR, name));",
      "info" : "ExpressionStatement[10425-10489]:ExpressionStatement[10425-10489]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10520-10526]:BreakStatement[10520-10526]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[10534-10553]:SwitchCase[10534-10553]"
    }, {
      "left" : "if (n.getFirstChild().isName() &&\n            !parent.isCall() &&\n            !parent.isAssign() &&\n            \"goog.base\".equals(n.getQualifiedName()))",
      "right" : "if (n.getFirstChild().isName() &&\n            !parent.isCall() &&\n            !parent.isAssign() &&\n            \"goog.base\".equals(n.getQualifiedName()))",
      "info" : "IfStatement[10562-10798]:IfStatement[10562-10798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10716-10798]:Block[10716-10798]"
    }, {
      "left" : "reportBadBaseClassUse(t, n, \"May only be called directly.\");",
      "right" : "reportBadBaseClassUse(t, n, \"May only be called directly.\");",
      "info" : "ExpressionStatement[10728-10788]:ExpressionStatement[10728-10788]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10807-10813]:BreakStatement[10807-10813]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12445-12452]:Modifier[12469-12476]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12453-12457]:PrimitiveType[12477-12481]"
    }, {
      "left" : "processProvideCall",
      "right" : "processProvideCall",
      "info" : "SimpleName[12458-12476]:SimpleName[12482-12500]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[12477-12492]:SingleVariableDeclaration[12501-12516]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[12494-12500]:SingleVariableDeclaration[12518-12524]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[12502-12513]:SingleVariableDeclaration[12526-12537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12515-13281]:Block[12539-13305]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[12521-12551]:VariableDeclarationStatement[12545-12575]"
    }, {
      "left" : "Node arg = left.getNext();",
      "right" : "Node arg = left.getNext();",
      "info" : "VariableDeclarationStatement[12556-12582]:VariableDeclarationStatement[12580-12606]"
    }, {
      "left" : "if (verifyProvide(t, left, arg))",
      "right" : "if (verifyProvide(t, left, arg))",
      "info" : "IfStatement[12587-13277]:IfStatement[12611-13301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12620-13277]:Block[12644-13301]"
    }, {
      "left" : "String ns = arg.getString();",
      "right" : "String ns = arg.getString();",
      "info" : "VariableDeclarationStatement[12628-12656]:VariableDeclarationStatement[12652-12680]"
    }, {
      "left" : "maybeAddToSymbolTable(left);",
      "right" : "maybeAddToSymbolTable(left);",
      "info" : "ExpressionStatement[12664-12692]:ExpressionStatement[12688-12716]"
    }, {
      "left" : "maybeAddStringNodeToSymbolTable(arg);",
      "right" : "maybeAddStringNodeToSymbolTable(arg);",
      "info" : "ExpressionStatement[12699-12736]:ExpressionStatement[12723-12760]"
    }, {
      "left" : "if (providedNames.containsKey(ns))",
      "right" : "if (providedNames.containsKey(ns))",
      "info" : "IfStatement[12744-13271]:IfStatement[12768-13295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12779-13097]:Block[12803-13121]"
    }, {
      "left" : "ProvidedName previouslyProvided = providedNames.get(ns);",
      "right" : "ProvidedName previouslyProvided = providedNames.get(ns);",
      "info" : "VariableDeclarationStatement[12789-12845]:VariableDeclarationStatement[12813-12869]"
    }, {
      "left" : "if (!previouslyProvided.isExplicitlyProvided())",
      "right" : "if (!previouslyProvided.isExplicitlyProvided())",
      "info" : "IfStatement[12854-13089]:IfStatement[12878-13113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12902-12983]:Block[12926-13007]"
    }, {
      "left" : "previouslyProvided.addProvide(parent, t.getModule(), true);",
      "right" : "previouslyProvided.addProvide(parent, t.getModule(), true);",
      "info" : "ExpressionStatement[12914-12973]:ExpressionStatement[12938-12997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12989-13089]:Block[13013-13113]"
    }, {
      "left" : "compiler.report(\n              t.makeError(n, DUPLICATE_NAMESPACE_ERROR, ns));",
      "right" : "compiler.report(\n              t.makeError(n, DUPLICATE_NAMESPACE_ERROR, ns));",
      "info" : "ExpressionStatement[13001-13079]:ExpressionStatement[13025-13103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13103-13271]:Block[13127-13295]"
    }, {
      "left" : "registerAnyProvidedPrefixes(ns, parent, t.getModule());",
      "right" : "registerAnyProvidedPrefixes(ns, parent, t.getModule());",
      "info" : "ExpressionStatement[13113-13168]:ExpressionStatement[13137-13192]"
    }, {
      "left" : "providedNames.put(\n            ns, new ProvidedName(ns, parent, t.getModule(), true));",
      "right" : "providedNames.put(\n            ns, new ProvidedName(ns, parent, t.getModule(), true));",
      "info" : "ExpressionStatement[13177-13263]:ExpressionStatement[13201-13287]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13332-13339]:Modifier[13356-13363]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13340-13344]:PrimitiveType[13364-13368]"
    }, {
      "left" : "processDefineCall",
      "right" : "processDefineCall",
      "info" : "SimpleName[13345-13362]:SimpleName[13369-13386]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[13363-13378]:SingleVariableDeclaration[13387-13402]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[13380-13386]:SingleVariableDeclaration[13404-13410]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[13388-13399]:SingleVariableDeclaration[13412-13423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13401-13744]:Block[13425-13768]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[13407-13437]:VariableDeclarationStatement[13431-13461]"
    }, {
      "left" : "Node args = left.getNext();",
      "right" : "Node args = left.getNext();",
      "info" : "VariableDeclarationStatement[13442-13469]:VariableDeclarationStatement[13466-13493]"
    }, {
      "left" : "if (verifyDefine(t, parent, left, args))",
      "right" : "if (verifyDefine(t, parent, left, args))",
      "info" : "IfStatement[13474-13740]:IfStatement[13498-13764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13515-13740]:Block[13539-13764]"
    }, {
      "left" : "Node nameNode = args;",
      "right" : "Node nameNode = args;",
      "info" : "VariableDeclarationStatement[13523-13544]:VariableDeclarationStatement[13547-13568]"
    }, {
      "left" : "String name = args.getString();",
      "right" : "String name = args.getString();",
      "info" : "VariableDeclarationStatement[13551-13582]:VariableDeclarationStatement[13575-13606]"
    }, {
      "left" : "Node value = args.getNext();",
      "right" : "Node value = args.getNext();",
      "info" : "VariableDeclarationStatement[13589-13617]:VariableDeclarationStatement[13613-13641]"
    }, {
      "left" : "maybeAddToSymbolTable(left);",
      "right" : "maybeAddToSymbolTable(left);",
      "info" : "ExpressionStatement[13625-13653]:ExpressionStatement[13649-13677]"
    }, {
      "left" : "maybeAddStringNodeToSymbolTable(nameNode);",
      "right" : "maybeAddStringNodeToSymbolTable(nameNode);",
      "info" : "ExpressionStatement[13660-13702]:ExpressionStatement[13684-13726]"
    }, {
      "left" : "this.defineCalls.add(n);",
      "right" : "this.defineCalls.add(n);",
      "info" : "ExpressionStatement[13710-13734]:ExpressionStatement[13734-13758]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13852-13859]:Modifier[13876-13883]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13860-13864]:PrimitiveType[13884-13888]"
    }, {
      "left" : "handleTypedefDefinition",
      "right" : "handleTypedefDefinition",
      "info" : "SimpleName[13865-13888]:SimpleName[13889-13912]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[13896-13911]:SingleVariableDeclaration[13920-13935]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[13913-13919]:SingleVariableDeclaration[13937-13943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13921-14282]:Block[13945-14306]"
    }, {
      "left" : "JSDocInfo info = n.getFirstChild().getJSDocInfo();",
      "right" : "JSDocInfo info = n.getFirstChild().getJSDocInfo();",
      "info" : "VariableDeclarationStatement[13927-13977]:VariableDeclarationStatement[13951-14001]"
    }, {
      "left" : "if (t.inGlobalScope() && info != null && info.hasTypedefType())",
      "right" : "if (t.inGlobalScope() && info != null && info.hasTypedefType())",
      "info" : "IfStatement[13982-14278]:IfStatement[14006-14302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14046-14278]:Block[14070-14302]"
    }, {
      "left" : "String name = n.getFirstChild().getQualifiedName();",
      "right" : "String name = n.getFirstChild().getQualifiedName();",
      "info" : "VariableDeclarationStatement[14054-14105]:VariableDeclarationStatement[14078-14129]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[14112-14272]:IfStatement[14136-14296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14130-14272]:Block[14154-14296]"
    }, {
      "left" : "ProvidedName pn = providedNames.get(name);",
      "right" : "ProvidedName pn = providedNames.get(name);",
      "info" : "VariableDeclarationStatement[14140-14182]:VariableDeclarationStatement[14164-14206]"
    }, {
      "left" : "if (pn != null)",
      "right" : "if (pn != null)",
      "info" : "IfStatement[14191-14264]:IfStatement[14215-14288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14207-14264]:Block[14231-14288]"
    }, {
      "left" : "pn.addDefinition(n, t.getModule());",
      "right" : "pn.addDefinition(n, t.getModule());",
      "info" : "ExpressionStatement[14219-14254]:ExpressionStatement[14243-14278]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14360-14367]:Modifier[14384-14391]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14368-14372]:PrimitiveType[14392-14396]"
    }, {
      "left" : "handleCandidateProvideDefinition",
      "right" : "handleCandidateProvideDefinition",
      "info" : "SimpleName[14373-14405]:SimpleName[14397-14429]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[14413-14428]:SingleVariableDeclaration[14437-14452]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[14430-14436]:SingleVariableDeclaration[14454-14460]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[14438-14449]:SingleVariableDeclaration[14462-14473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14451-15041]:Block[14475-15065]"
    }, {
      "left" : "if (t.inGlobalScope())",
      "right" : "if (t.inGlobalScope())",
      "info" : "IfStatement[14457-15037]:IfStatement[14481-15061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14480-15037]:Block[14504-15061]"
    }, {
      "left" : "String name = null;",
      "right" : "String name = null;",
      "info" : "VariableDeclarationStatement[14488-14507]:VariableDeclarationStatement[14512-14531]"
    }, {
      "left" : "if (n.isName() && parent.isVar())",
      "right" : "if (n.isName() && parent.isVar())",
      "info" : "IfStatement[14514-14708]:IfStatement[14538-14732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14548-14587]:Block[14572-14611]"
    }, {
      "left" : "name = n.getString();",
      "right" : "name = n.getString();",
      "info" : "ExpressionStatement[14558-14579]:ExpressionStatement[14582-14603]"
    }, {
      "left" : "if (n.isAssign() &&\n          parent.isExprResult())",
      "right" : "if (n.isAssign() &&\n          parent.isExprResult())",
      "info" : "IfStatement[14593-14708]:IfStatement[14617-14732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14646-14708]:Block[14670-14732]"
    }, {
      "left" : "name = n.getFirstChild().getQualifiedName();",
      "right" : "name = n.getFirstChild().getQualifiedName();",
      "info" : "ExpressionStatement[14656-14700]:ExpressionStatement[14680-14724]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[14716-15031]:IfStatement[14740-15055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14734-15031]:Block[14758-15055]"
    }, {
      "left" : "if (parent.getBooleanProp(Node.IS_NAMESPACE))",
      "right" : "if (parent.getBooleanProp(Node.IS_NAMESPACE))",
      "info" : "IfStatement[14744-15023]:IfStatement[14768-15047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14790-14860]:Block[14814-14884]"
    }, {
      "left" : "processProvideFromPreviousPass(t, name, parent);",
      "right" : "processProvideFromPreviousPass(t, name, parent);",
      "info" : "ExpressionStatement[14802-14850]:ExpressionStatement[14826-14874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14866-15023]:Block[14890-15047]"
    }, {
      "left" : "ProvidedName pn = providedNames.get(name);",
      "right" : "ProvidedName pn = providedNames.get(name);",
      "info" : "VariableDeclarationStatement[14878-14920]:VariableDeclarationStatement[14902-14944]"
    }, {
      "left" : "if (pn != null)",
      "right" : "if (pn != null)",
      "info" : "IfStatement[14931-15013]:IfStatement[14955-15037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14947-15013]:Block[14971-15037]"
    }, {
      "left" : "pn.addDefinition(parent, t.getModule());",
      "right" : "pn.addDefinition(parent, t.getModule());",
      "info" : "ExpressionStatement[14961-15001]:ExpressionStatement[14985-15025]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15093-15100]:Modifier[15117-15124]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15101-15105]:PrimitiveType[15125-15129]"
    }, {
      "left" : "processBaseClassCall",
      "right" : "processBaseClassCall",
      "info" : "SimpleName[15106-15126]:SimpleName[15130-15150]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[15127-15142]:SingleVariableDeclaration[15151-15166]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[15144-15150]:SingleVariableDeclaration[15168-15174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15152-18704]:Block[15176-18728]"
    }, {
      "left" : "Node callee = n.getFirstChild();",
      "right" : "Node callee = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[16023-16055]:VariableDeclarationStatement[16047-16079]"
    }, {
      "left" : "Node thisArg = callee.getNext();",
      "right" : "Node thisArg = callee.getNext();",
      "info" : "VariableDeclarationStatement[16060-16092]:VariableDeclarationStatement[16084-16116]"
    }, {
      "left" : "if (thisArg == null || !thisArg.isThis())",
      "right" : "if (thisArg == null || !thisArg.isThis())",
      "info" : "IfStatement[16097-16229]:IfStatement[16121-16253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16139-16229]:Block[16163-16253]"
    }, {
      "left" : "reportBadBaseClassUse(t, n, \"First argument must be 'this'.\");",
      "right" : "reportBadBaseClassUse(t, n, \"First argument must be 'this'.\");",
      "info" : "ExpressionStatement[16147-16209]:ExpressionStatement[16171-16233]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[16216-16223]:ReturnStatement[16240-16247]"
    }, {
      "left" : "Node enclosingFnNameNode = getEnclosingDeclNameNode(t);",
      "right" : "Node enclosingFnNameNode = getEnclosingDeclNameNode(t);",
      "info" : "VariableDeclarationStatement[16235-16290]:VariableDeclarationStatement[16259-16314]"
    }, {
      "left" : "if (enclosingFnNameNode == null)",
      "right" : "if (enclosingFnNameNode == null)",
      "info" : "IfStatement[16295-16420]:IfStatement[16319-16444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16328-16420]:Block[16352-16444]"
    }, {
      "left" : "reportBadBaseClassUse(t, n, \"Could not find enclosing method.\");",
      "right" : "reportBadBaseClassUse(t, n, \"Could not find enclosing method.\");",
      "info" : "ExpressionStatement[16336-16400]:ExpressionStatement[16360-16424]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[16407-16414]:ReturnStatement[16431-16438]"
    }, {
      "left" : "String enclosingQname = enclosingFnNameNode.getQualifiedName();",
      "right" : "String enclosingQname = enclosingFnNameNode.getQualifiedName();",
      "info" : "VariableDeclarationStatement[16426-16489]:VariableDeclarationStatement[16450-16513]"
    }, {
      "left" : "if (enclosingQname.indexOf(\".prototype.\") == -1)",
      "right" : "if (enclosingQname.indexOf(\".prototype.\") == -1)",
      "info" : "IfStatement[16494-18700]:IfStatement[16518-18724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16543-17682]:Block[16567-17706]"
    }, {
      "left" : "Node enclosingParent = enclosingFnNameNode.getParent();",
      "right" : "Node enclosingParent = enclosingFnNameNode.getParent();",
      "info" : "VariableDeclarationStatement[16581-16636]:VariableDeclarationStatement[16605-16660]"
    }, {
      "left" : "Node maybeInheritsExpr = (enclosingParent.isAssign() ?\n          enclosingParent.getParent() : enclosingParent).getNext();",
      "right" : "Node maybeInheritsExpr = (enclosingParent.isAssign() ?\n          enclosingParent.getParent() : enclosingParent).getNext();",
      "info" : "VariableDeclarationStatement[16643-16765]:VariableDeclarationStatement[16667-16789]"
    }, {
      "left" : "Node baseClassNode = null;",
      "right" : "Node baseClassNode = null;",
      "info" : "VariableDeclarationStatement[16772-16798]:VariableDeclarationStatement[16796-16822]"
    }, {
      "left" : "if (maybeInheritsExpr != null &&\n          maybeInheritsExpr.isExprResult() &&\n          maybeInheritsExpr.getFirstChild().isCall())",
      "right" : "if (maybeInheritsExpr != null &&\n          maybeInheritsExpr.isExprResult() &&\n          maybeInheritsExpr.getFirstChild().isCall())",
      "info" : "IfStatement[16805-17224]:IfStatement[16829-17248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16938-17224]:Block[16962-17248]"
    }, {
      "left" : "Node callNode = maybeInheritsExpr.getFirstChild();",
      "right" : "Node callNode = maybeInheritsExpr.getFirstChild();",
      "info" : "VariableDeclarationStatement[16948-16998]:VariableDeclarationStatement[16972-17022]"
    }, {
      "left" : "if (\"goog.inherits\".equals(\n                callNode.getFirstChild().getQualifiedName()) &&\n            callNode.getLastChild().isQualifiedName())",
      "right" : "if (\"goog.inherits\".equals(\n                callNode.getFirstChild().getQualifiedName()) &&\n            callNode.getLastChild().isQualifiedName())",
      "info" : "IfStatement[17007-17216]:IfStatement[17031-17240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17154-17216]:Block[17178-17240]"
    }, {
      "left" : "baseClassNode = callNode.getLastChild();",
      "right" : "baseClassNode = callNode.getLastChild();",
      "info" : "ExpressionStatement[17166-17206]:ExpressionStatement[17190-17230]"
    }, {
      "left" : "if (baseClassNode == null)",
      "right" : "if (baseClassNode == null)",
      "info" : "IfStatement[17232-17381]:IfStatement[17256-17405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17259-17381]:Block[17283-17405]"
    }, {
      "left" : "reportBadBaseClassUse(\n            t, n, \"Could not find goog.inherits for base class\");",
      "right" : "reportBadBaseClassUse(\n            t, n, \"Could not find goog.inherits for base class\");",
      "info" : "ExpressionStatement[17269-17357]:ExpressionStatement[17293-17381]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[17366-17373]:ReturnStatement[17390-17397]"
    }, {
      "left" : "n.replaceChild(\n          callee,\n          NodeUtil.newQualifiedNameNode(\n            compiler.getCodingConvention(),\n            String.format(\"%s.call\", baseClassNode.getQualifiedName()),\n            callee, \"goog.base\"));",
      "right" : "n.replaceChild(\n          callee,\n          NodeUtil.newQualifiedNameNode(\n            compiler.getCodingConvention(),\n            String.format(\"%s.call\", baseClassNode.getQualifiedName()),\n            callee, \"goog.base\"));",
      "info" : "ExpressionStatement[17416-17641]:ExpressionStatement[17440-17665]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[17648-17676]:ExpressionStatement[17672-17700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17688-18700]:Block[17712-18724]"
    }, {
      "left" : "Node methodNameNode = thisArg.getNext();",
      "right" : "Node methodNameNode = thisArg.getNext();",
      "info" : "VariableDeclarationStatement[17721-17761]:VariableDeclarationStatement[17745-17785]"
    }, {
      "left" : "if (methodNameNode == null || !methodNameNode.isString())",
      "right" : "if (methodNameNode == null || !methodNameNode.isString())",
      "info" : "IfStatement[17768-17927]:IfStatement[17792-17951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17826-17927]:Block[17850-17951]"
    }, {
      "left" : "reportBadBaseClassUse(t, n, \"Second argument must name a method.\");",
      "right" : "reportBadBaseClassUse(t, n, \"Second argument must name a method.\");",
      "info" : "ExpressionStatement[17836-17903]:ExpressionStatement[17860-17927]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[17912-17919]:ReturnStatement[17936-17943]"
    }, {
      "left" : "String methodName = methodNameNode.getString();",
      "right" : "String methodName = methodNameNode.getString();",
      "info" : "VariableDeclarationStatement[17935-17982]:VariableDeclarationStatement[17959-18006]"
    }, {
      "left" : "String ending = \".prototype.\" + methodName;",
      "right" : "String ending = \".prototype.\" + methodName;",
      "info" : "VariableDeclarationStatement[17989-18032]:VariableDeclarationStatement[18013-18056]"
    }, {
      "left" : "if (enclosingQname == null ||\n          !enclosingQname.endsWith(ending))",
      "right" : "if (enclosingQname == null ||\n          !enclosingQname.endsWith(ending))",
      "info" : "IfStatement[18039-18237]:IfStatement[18063-18261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18113-18237]:Block[18137-18261]"
    }, {
      "left" : "reportBadBaseClassUse(\n            t, n, \"Enclosing method does not match \" + methodName);",
      "right" : "reportBadBaseClassUse(\n            t, n, \"Enclosing method does not match \" + methodName);",
      "info" : "ExpressionStatement[18123-18213]:ExpressionStatement[18147-18237]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[18222-18229]:ReturnStatement[18246-18253]"
    }, {
      "left" : "Node className =\n          enclosingFnNameNode.getFirstChild().getFirstChild();",
      "right" : "Node className =\n          enclosingFnNameNode.getFirstChild().getFirstChild();",
      "info" : "VariableDeclarationStatement[18272-18351]:VariableDeclarationStatement[18296-18375]"
    }, {
      "left" : "n.replaceChild(\n          callee,\n          NodeUtil.newQualifiedNameNode(\n            compiler.getCodingConvention(),\n            String.format(\"%s.superClass_.%s.call\",\n                className.getQualifiedName(), methodName),\n            callee, \"goog.base\"));",
      "right" : "n.replaceChild(\n          callee,\n          NodeUtil.newQualifiedNameNode(\n            compiler.getCodingConvention(),\n            String.format(\"%s.superClass_.%s.call\",\n                className.getQualifiedName(), methodName),\n            callee, \"goog.base\"));",
      "info" : "ExpressionStatement[18358-18622]:ExpressionStatement[18382-18646]"
    }, {
      "left" : "n.removeChild(methodNameNode);",
      "right" : "n.removeChild(methodNameNode);",
      "info" : "ExpressionStatement[18629-18659]:ExpressionStatement[18653-18683]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[18666-18694]:ExpressionStatement[18690-18718]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18831-18838]:Modifier[18855-18862]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[18839-18843]:SimpleType[18863-18867]"
    }, {
      "left" : "getEnclosingDeclNameNode",
      "right" : "getEnclosingDeclNameNode",
      "info" : "SimpleName[18844-18868]:SimpleName[18868-18892]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[18869-18884]:SingleVariableDeclaration[18893-18908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18886-19498]:Block[18910-19522]"
    }, {
      "left" : "Node scopeRoot = t.getScopeRoot();",
      "right" : "Node scopeRoot = t.getScopeRoot();",
      "info" : "VariableDeclarationStatement[18892-18926]:VariableDeclarationStatement[18916-18950]"
    }, {
      "left" : "if (NodeUtil.isFunctionDeclaration(scopeRoot))",
      "right" : "if (NodeUtil.isFunctionDeclaration(scopeRoot))",
      "info" : "IfStatement[18931-19476]:IfStatement[18955-19500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18978-19053]:Block[19002-19077]"
    }, {
      "left" : "return scopeRoot.getFirstChild();",
      "right" : "return scopeRoot.getFirstChild();",
      "info" : "ReturnStatement[19014-19047]:ReturnStatement[19038-19071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19059-19476]:Block[19083-19500]"
    }, {
      "left" : "Node parent = scopeRoot.getParent();",
      "right" : "Node parent = scopeRoot.getParent();",
      "info" : "VariableDeclarationStatement[19067-19103]:VariableDeclarationStatement[19091-19127]"
    }, {
      "left" : "if (parent != null)",
      "right" : "if (parent != null)",
      "info" : "IfStatement[19110-19470]:IfStatement[19134-19494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19130-19470]:Block[19154-19494]"
    }, {
      "left" : "if (parent.isAssign() ||\n            parent.getLastChild() == scopeRoot &&\n            parent.getFirstChild().isQualifiedName())",
      "right" : "if (parent.isAssign() ||\n            parent.getLastChild() == scopeRoot &&\n            parent.getFirstChild().isQualifiedName())",
      "info" : "IfStatement[19140-19462]:IfStatement[19164-19486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19269-19360]:Block[19293-19384]"
    }, {
      "left" : "return parent.getFirstChild();",
      "right" : "return parent.getFirstChild();",
      "info" : "ReturnStatement[19320-19350]:ReturnStatement[19344-19374]"
    }, {
      "left" : "if (parent.isName())",
      "right" : "if (parent.isName())",
      "info" : "IfStatement[19366-19462]:IfStatement[19390-19486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19387-19462]:Block[19411-19486]"
    }, {
      "left" : "return parent;",
      "right" : "return parent;",
      "info" : "ReturnStatement[19438-19452]:ReturnStatement[19462-19476]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[19482-19494]:ReturnStatement[19506-19518]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19561-19568]:Modifier[19585-19592]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19569-19573]:PrimitiveType[19593-19597]"
    }, {
      "left" : "reportBadBaseClassUse",
      "right" : "reportBadBaseClassUse",
      "info" : "SimpleName[19574-19595]:SimpleName[19598-19619]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[19603-19618]:SingleVariableDeclaration[19627-19642]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[19620-19626]:SingleVariableDeclaration[19644-19650]"
    }, {
      "left" : "String extraMessage",
      "right" : "String extraMessage",
      "info" : "SingleVariableDeclaration[19628-19647]:SingleVariableDeclaration[19652-19671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19649-19723]:Block[19673-19747]"
    }, {
      "left" : "compiler.report(t.makeError(n, BASE_CLASS_ERROR, extraMessage));",
      "right" : "compiler.report(t.makeError(n, BASE_CLASS_ERROR, extraMessage));",
      "info" : "ExpressionStatement[19655-19719]:ExpressionStatement[19679-19743]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19926-19933]:Modifier[19950-19957]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19934-19938]:PrimitiveType[19958-19962]"
    }, {
      "left" : "processProvideFromPreviousPass",
      "right" : "processProvideFromPreviousPass",
      "info" : "SimpleName[19939-19969]:SimpleName[19963-19993]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[19977-19992]:SingleVariableDeclaration[20001-20016]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[19994-20005]:SingleVariableDeclaration[20018-20029]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[20007-20018]:SingleVariableDeclaration[20031-20042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20020-20919]:Block[20044-20943]"
    }, {
      "left" : "if (!providedNames.containsKey(name))",
      "right" : "if (!providedNames.containsKey(name))",
      "info" : "IfStatement[20026-20915]:IfStatement[20050-20939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20064-20657]:Block[20088-20681]"
    }, {
      "left" : "Node expr = new Node(Token.EXPR_RESULT);",
      "right" : "Node expr = new Node(Token.EXPR_RESULT);",
      "info" : "VariableDeclarationStatement[20217-20257]:VariableDeclarationStatement[20241-20281]"
    }, {
      "left" : "expr.copyInformationFromForTree(parent);",
      "right" : "expr.copyInformationFromForTree(parent);",
      "info" : "ExpressionStatement[20264-20304]:ExpressionStatement[20288-20328]"
    }, {
      "left" : "parent.getParent().addChildBefore(expr, parent);",
      "right" : "parent.getParent().addChildBefore(expr, parent);",
      "info" : "ExpressionStatement[20311-20359]:ExpressionStatement[20335-20383]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[20366-20394]:ExpressionStatement[20390-20418]"
    }, {
      "left" : "JSModule module = t.getModule();",
      "right" : "JSModule module = t.getModule();",
      "info" : "VariableDeclarationStatement[20402-20434]:VariableDeclarationStatement[20426-20458]"
    }, {
      "left" : "registerAnyProvidedPrefixes(name, expr, module);",
      "right" : "registerAnyProvidedPrefixes(name, expr, module);",
      "info" : "ExpressionStatement[20441-20489]:ExpressionStatement[20465-20513]"
    }, {
      "left" : "ProvidedName provided = new ProvidedName(name, expr, module, true);",
      "right" : "ProvidedName provided = new ProvidedName(name, expr, module, true);",
      "info" : "VariableDeclarationStatement[20497-20564]:VariableDeclarationStatement[20521-20588]"
    }, {
      "left" : "providedNames.put(name, provided);",
      "right" : "providedNames.put(name, provided);",
      "info" : "ExpressionStatement[20571-20605]:ExpressionStatement[20595-20629]"
    }, {
      "left" : "provided.addDefinition(parent, module);",
      "right" : "provided.addDefinition(parent, module);",
      "info" : "ExpressionStatement[20612-20651]:ExpressionStatement[20636-20675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20663-20915]:Block[20687-20939]"
    }, {
      "left" : "if (isNamespacePlaceholder(parent))",
      "right" : "if (isNamespacePlaceholder(parent))",
      "info" : "IfStatement[20779-20909]:IfStatement[20803-20933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20815-20909]:Block[20839-20933]"
    }, {
      "left" : "parent.getParent().removeChild(parent);",
      "right" : "parent.getParent().removeChild(parent);",
      "info" : "ExpressionStatement[20825-20864]:ExpressionStatement[20849-20888]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[20873-20901]:ExpressionStatement[20897-20925]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21257-21264]:Modifier[21281-21288]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21265-21269]:PrimitiveType[21289-21293]"
    }, {
      "left" : "processSetCssNameMapping",
      "right" : "processSetCssNameMapping",
      "info" : "SimpleName[21270-21294]:SimpleName[21294-21318]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[21295-21310]:SingleVariableDeclaration[21319-21334]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[21312-21318]:SingleVariableDeclaration[21336-21342]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[21320-21331]:SingleVariableDeclaration[21344-21355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21333-24525]:Block[21357-24549]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[21339-21369]:VariableDeclarationStatement[21363-21393]"
    }, {
      "left" : "Node arg = left.getNext();",
      "right" : "Node arg = left.getNext();",
      "info" : "VariableDeclarationStatement[21374-21400]:VariableDeclarationStatement[21398-21424]"
    }, {
      "left" : "if (verifySetCssNameMapping(t, left, arg))",
      "right" : "if (verifySetCssNameMapping(t, left, arg))",
      "info" : "IfStatement[21405-24521]:IfStatement[21429-24545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21448-24521]:Block[21472-24545]"
    }, {
      "left" : "final Map<String, String> cssNames = Maps.newHashMap();",
      "right" : "final Map<String, String> cssNames = Maps.newHashMap();",
      "info" : "VariableDeclarationStatement[21581-21636]:VariableDeclarationStatement[21605-21660]"
    }, {
      "left" : "for (Node key = arg.getFirstChild(); key != null;\n          key = key.getNext())",
      "right" : "for (Node key = arg.getFirstChild(); key != null;\n          key = key.getNext())",
      "info" : "ForStatement[21644-22083]:ForStatement[21668-22107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21725-22083]:Block[21749-22107]"
    }, {
      "left" : "Node value = key.getFirstChild();",
      "right" : "Node value = key.getFirstChild();",
      "info" : "VariableDeclarationStatement[21735-21768]:VariableDeclarationStatement[21759-21792]"
    }, {
      "left" : "if (!key.isStringKey()\n            || value == null\n            || !value.isString())",
      "right" : "if (!key.isStringKey()\n            || value == null\n            || !value.isString())",
      "info" : "IfStatement[21777-22017]:IfStatement[21801-22041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21863-22017]:Block[21887-22041]"
    }, {
      "left" : "compiler.report(\n              t.makeError(n,\n                  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR));",
      "right" : "compiler.report(\n              t.makeError(n,\n                  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR));",
      "info" : "ExpressionStatement[21875-21989]:ExpressionStatement[21899-22013]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[22000-22007]:ReturnStatement[22024-22031]"
    }, {
      "left" : "cssNames.put(key.getString(), value.getString());",
      "right" : "cssNames.put(key.getString(), value.getString());",
      "info" : "ExpressionStatement[22026-22075]:ExpressionStatement[22050-22099]"
    }, {
      "left" : "String styleStr = \"BY_PART\";",
      "right" : "String styleStr = \"BY_PART\";",
      "info" : "VariableDeclarationStatement[22091-22119]:VariableDeclarationStatement[22115-22143]"
    }, {
      "left" : "if (arg.getNext() != null)",
      "right" : "if (arg.getNext() != null)",
      "info" : "IfStatement[22126-22208]:IfStatement[22150-22232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22153-22208]:Block[22177-22232]"
    }, {
      "left" : "styleStr = arg.getNext().getString();",
      "right" : "styleStr = arg.getNext().getString();",
      "info" : "ExpressionStatement[22163-22200]:ExpressionStatement[22187-22224]"
    }, {
      "left" : "final CssRenamingMap.Style style;",
      "right" : "final CssRenamingMap.Style style;",
      "info" : "VariableDeclarationStatement[22216-22249]:VariableDeclarationStatement[22240-22273]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[22256-22471]:TryStatement[22280-22495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22260-22325]:Block[22284-22349]"
    }, {
      "left" : "style = CssRenamingMap.Style.valueOf(styleStr);",
      "right" : "style = CssRenamingMap.Style.valueOf(styleStr);",
      "info" : "ExpressionStatement[22270-22317]:ExpressionStatement[22294-22341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22361-22471]:Block[22385-22495]"
    }, {
      "left" : "compiler.report(\n            t.makeError(n, INVALID_STYLE_ERROR, styleStr));",
      "right" : "compiler.report(\n            t.makeError(n, INVALID_STYLE_ERROR, styleStr));",
      "info" : "ExpressionStatement[22371-22447]:ExpressionStatement[22395-22471]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[22456-22463]:ReturnStatement[22480-22487]"
    }, {
      "left" : "if (style == CssRenamingMap.Style.BY_PART)",
      "right" : "if (style == CssRenamingMap.Style.BY_PART)",
      "info" : "IfStatement[22479-23999]:IfStatement[22503-24023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22522-22907]:Block[22546-22931]"
    }, {
      "left" : "List<String> errors = Lists.newArrayList();",
      "right" : "List<String> errors = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[22578-22621]:VariableDeclarationStatement[22602-22645]"
    }, {
      "left" : "for (String key : cssNames.keySet())",
      "right" : "for (String key : cssNames.keySet())",
      "info" : "EnhancedForStatement[22630-22754]:EnhancedForStatement[22654-22778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22667-22754]:Block[22691-22778]"
    }, {
      "left" : "if (key.contains(\"-\"))",
      "right" : "if (key.contains(\"-\"))",
      "info" : "IfStatement[22679-22744]:IfStatement[22703-22768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22702-22744]:Block[22726-22768]"
    }, {
      "left" : "errors.add(key);",
      "right" : "errors.add(key);",
      "info" : "ExpressionStatement[22716-22732]:ExpressionStatement[22740-22756]"
    }, {
      "left" : "if (errors.size() != 0)",
      "right" : "if (errors.size() != 0)",
      "info" : "IfStatement[22763-22899]:IfStatement[22787-22923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22787-22899]:Block[22811-22923]"
    }, {
      "left" : "compiler.report(\n            t.makeError(n, INVALID_CSS_RENAMING_MAP, errors.toString()));",
      "right" : "compiler.report(\n            t.makeError(n, INVALID_CSS_RENAMING_MAP, errors.toString()));",
      "info" : "ExpressionStatement[22799-22889]:ExpressionStatement[22823-22913]"
    }, {
      "left" : "if (style == CssRenamingMap.Style.BY_WHOLE)",
      "right" : "if (style == CssRenamingMap.Style.BY_WHOLE)",
      "info" : "IfStatement[22913-23999]:IfStatement[22937-24023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22957-23999]:Block[22981-24023]"
    }, {
      "left" : "List<String> errors = Lists.newArrayList();",
      "right" : "List<String> errors = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[23227-23270]:VariableDeclarationStatement[23251-23294]"
    }, {
      "left" : "for (Map.Entry<String, String> b : cssNames.entrySet())",
      "right" : "for (Map.Entry<String, String> b : cssNames.entrySet())",
      "info" : "EnhancedForStatement[23279-23846]:EnhancedForStatement[23303-23870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23335-23846]:Block[23359-23870]"
    }, {
      "left" : "if (b.getKey().length() > 10)",
      "right" : "if (b.getKey().length() > 10)",
      "info" : "IfStatement[23347-23412]:IfStatement[23371-23436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23377-23412]:Block[23401-23436]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[23391-23400]:ContinueStatement[23415-23424]"
    }, {
      "left" : "for (Map.Entry<String, String> a : cssNames.entrySet())",
      "right" : "for (Map.Entry<String, String> a : cssNames.entrySet())",
      "info" : "EnhancedForStatement[23423-23836]:EnhancedForStatement[23447-23860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23479-23836]:Block[23503-23860]"
    }, {
      "left" : "String combined = cssNames.get(a.getKey() + \"-\" + b.getKey());",
      "right" : "String combined = cssNames.get(a.getKey() + \"-\" + b.getKey());",
      "info" : "VariableDeclarationStatement[23493-23555]:VariableDeclarationStatement[23517-23579]"
    }, {
      "left" : "if (combined != null &&\n                !combined.equals(a.getValue() + \"-\" + b.getValue()))",
      "right" : "if (combined != null &&\n                !combined.equals(a.getValue() + \"-\" + b.getValue()))",
      "info" : "IfStatement[23568-23824]:IfStatement[23592-23848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23661-23824]:Block[23685-23848]"
    }, {
      "left" : "errors.add(\"map(\" + a.getKey() + \"-\" + b.getKey() + \") != map(\" +\n                         a.getKey() + \")-map(\" + b.getKey() + \")\");",
      "right" : "errors.add(\"map(\" + a.getKey() + \"-\" + b.getKey() + \") != map(\" +\n                         a.getKey() + \")-map(\" + b.getKey() + \")\");",
      "info" : "ExpressionStatement[23677-23810]:ExpressionStatement[23701-23834]"
    }, {
      "left" : "if (errors.size() != 0)",
      "right" : "if (errors.size() != 0)",
      "info" : "IfStatement[23855-23991]:IfStatement[23879-24015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23879-23991]:Block[23903-24015]"
    }, {
      "left" : "compiler.report(\n            t.makeError(n, INVALID_CSS_RENAMING_MAP, errors.toString()));",
      "right" : "compiler.report(\n            t.makeError(n, INVALID_CSS_RENAMING_MAP, errors.toString()));",
      "info" : "ExpressionStatement[23891-23981]:ExpressionStatement[23915-24005]"
    }, {
      "left" : "CssRenamingMap cssRenamingMap = new CssRenamingMap() {\n        @Override\n        public String get(String value) {\n          if (cssNames.containsKey(value)) {\n            return cssNames.get(value);\n          } else {\n            return value;\n          }\n        }\n\n        @Override\n        public CssRenamingMap.Style getStyle() {\n          return style;\n        }\n      };",
      "right" : "CssRenamingMap cssRenamingMap = new CssRenamingMap() {\n        @Override\n        public String get(String value) {\n          if (cssNames.containsKey(value)) {\n            return cssNames.get(value);\n          } else {\n            return value;\n          }\n        }\n\n        @Override\n        public CssRenamingMap.Style getStyle() {\n          return style;\n        }\n      };",
      "info" : "VariableDeclarationStatement[24007-24384]:VariableDeclarationStatement[24031-24408]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24070-24079]:MarkerAnnotation[24094-24103]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24088-24094]:Modifier[24112-24118]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[24095-24101]:SimpleType[24119-24125]"
    }, {
      "left" : "get",
      "right" : "get",
      "info" : "SimpleName[24102-24105]:SimpleName[24126-24129]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[24106-24118]:SingleVariableDeclaration[24130-24142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24120-24273]:Block[24144-24297]"
    }, {
      "left" : "if (cssNames.containsKey(value))",
      "right" : "if (cssNames.containsKey(value))",
      "info" : "IfStatement[24132-24263]:IfStatement[24156-24287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24165-24218]:Block[24189-24242]"
    }, {
      "left" : "return cssNames.get(value);",
      "right" : "return cssNames.get(value);",
      "info" : "ReturnStatement[24179-24206]:ReturnStatement[24203-24230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24224-24263]:Block[24248-24287]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[24238-24251]:ReturnStatement[24262-24275]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24283-24292]:MarkerAnnotation[24307-24316]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24301-24307]:Modifier[24325-24331]"
    }, {
      "left" : "CssRenamingMap.Style",
      "right" : "CssRenamingMap.Style",
      "info" : "SimpleType[24308-24328]:SimpleType[24332-24352]"
    }, {
      "left" : "getStyle",
      "right" : "getStyle",
      "info" : "SimpleName[24329-24337]:SimpleName[24353-24361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24340-24375]:Block[24364-24399]"
    }, {
      "left" : "return style;",
      "right" : "return style;",
      "info" : "ReturnStatement[24352-24365]:ReturnStatement[24376-24389]"
    }, {
      "left" : "compiler.setCssRenamingMap(cssRenamingMap);",
      "right" : "compiler.setCssRenamingMap(cssRenamingMap);",
      "info" : "ExpressionStatement[24391-24434]:ExpressionStatement[24415-24458]"
    }, {
      "left" : "parent.getParent().removeChild(parent);",
      "right" : "parent.getParent().removeChild(parent);",
      "info" : "ExpressionStatement[24441-24480]:ExpressionStatement[24465-24504]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[24487-24515]:ExpressionStatement[24511-24539]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24801-24808]:Modifier[24825-24832]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24809-24816]:PrimitiveType[24833-24840]"
    }, {
      "left" : "verifyProvide",
      "right" : "verifyProvide",
      "info" : "SimpleName[24817-24830]:SimpleName[24841-24854]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[24831-24846]:SingleVariableDeclaration[24855-24870]"
    }, {
      "left" : "Node methodName",
      "right" : "Node methodName",
      "info" : "SingleVariableDeclaration[24848-24863]:SingleVariableDeclaration[24872-24887]"
    }, {
      "left" : "Node arg",
      "right" : "Node arg",
      "info" : "SingleVariableDeclaration[24865-24873]:SingleVariableDeclaration[24889-24897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24875-25195]:Block[24899-25219]"
    }, {
      "left" : "if (!verifyLastArgumentIsString(t, methodName, arg))",
      "right" : "if (!verifyLastArgumentIsString(t, methodName, arg))",
      "info" : "IfStatement[24881-24961]:IfStatement[24905-24985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24934-24961]:Block[24958-24985]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24942-24955]:ReturnStatement[24966-24979]"
    }, {
      "left" : "for (String part : arg.getString().split(\"\\\\.\"))",
      "right" : "for (String part : arg.getString().split(\"\\\\.\"))",
      "info" : "EnhancedForStatement[24967-25174]:EnhancedForStatement[24991-25198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25016-25174]:Block[25040-25198]"
    }, {
      "left" : "if (!NodeUtil.isValidPropertyName(part))",
      "right" : "if (!NodeUtil.isValidPropertyName(part))",
      "info" : "IfStatement[25024-25168]:IfStatement[25048-25192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25065-25168]:Block[25089-25192]"
    }, {
      "left" : "compiler.report(t.makeError(arg, INVALID_PROVIDE_ERROR, part));",
      "right" : "compiler.report(t.makeError(arg, INVALID_PROVIDE_ERROR, part));",
      "info" : "ExpressionStatement[25075-25138]:ExpressionStatement[25099-25162]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25147-25160]:ReturnStatement[25171-25184]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[25179-25191]:ReturnStatement[25203-25215]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25471-25478]:Modifier[25495-25502]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[25479-25486]:PrimitiveType[25503-25510]"
    }, {
      "left" : "verifyDefine",
      "right" : "verifyDefine",
      "info" : "SimpleName[25487-25499]:SimpleName[25511-25523]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[25500-25515]:SingleVariableDeclaration[25524-25539]"
    }, {
      "left" : "Node expr",
      "right" : "Node expr",
      "info" : "SingleVariableDeclaration[25523-25532]:SingleVariableDeclaration[25547-25556]"
    }, {
      "left" : "Node methodName",
      "right" : "Node methodName",
      "info" : "SingleVariableDeclaration[25540-25555]:SingleVariableDeclaration[25564-25579]"
    }, {
      "left" : "Node args",
      "right" : "Node args",
      "info" : "SingleVariableDeclaration[25557-25566]:SingleVariableDeclaration[25581-25590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25568-26377]:Block[25592-26401]"
    }, {
      "left" : "Node arg = args;",
      "right" : "Node arg = args;",
      "info" : "VariableDeclarationStatement[25599-25615]:VariableDeclarationStatement[25623-25639]"
    }, {
      "left" : "if (!verifyNotNull(t, methodName, arg) ||\n        !verifyOfType(t, methodName, arg, Token.STRING))",
      "right" : "if (!verifyNotNull(t, methodName, arg) ||\n        !verifyOfType(t, methodName, arg, Token.STRING))",
      "info" : "IfStatement[25620-25746]:IfStatement[25644-25770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25719-25746]:Block[25743-25770]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25727-25740]:ReturnStatement[25751-25764]"
    }, {
      "left" : "arg = arg.getNext();",
      "right" : "arg = arg.getNext();",
      "info" : "ExpressionStatement[25777-25797]:ExpressionStatement[25801-25821]"
    }, {
      "left" : "if (!verifyNotNull(t, methodName, arg) ||\n        !verifyIsLast(t, methodName, arg))",
      "right" : "if (!verifyNotNull(t, methodName, arg) ||\n        !verifyIsLast(t, methodName, arg))",
      "info" : "IfStatement[25802-25914]:IfStatement[25826-25938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25887-25914]:Block[25911-25938]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25895-25908]:ReturnStatement[25919-25932]"
    }, {
      "left" : "String name = args.getString();",
      "right" : "String name = args.getString();",
      "info" : "VariableDeclarationStatement[25920-25951]:VariableDeclarationStatement[25944-25975]"
    }, {
      "left" : "for (String part : name.split(\"\\\\.\"))",
      "right" : "for (String part : name.split(\"\\\\.\"))",
      "info" : "EnhancedForStatement[25956-26158]:EnhancedForStatement[25980-26182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25994-26158]:Block[26018-26182]"
    }, {
      "left" : "if (!NodeUtil.isValidQualifiedName(part))",
      "right" : "if (!NodeUtil.isValidQualifiedName(part))",
      "info" : "IfStatement[26002-26152]:IfStatement[26026-26176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26044-26152]:Block[26068-26176]"
    }, {
      "left" : "compiler.report(t.makeError(args, INVALID_DEFINE_NAME_ERROR, name));",
      "right" : "compiler.report(t.makeError(args, INVALID_DEFINE_NAME_ERROR, name));",
      "info" : "ExpressionStatement[26054-26122]:ExpressionStatement[26078-26146]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26131-26144]:ReturnStatement[26155-26168]"
    }, {
      "left" : "JSDocInfo info = expr.getFirstChild().getJSDocInfo();",
      "right" : "JSDocInfo info = expr.getFirstChild().getJSDocInfo();",
      "info" : "VariableDeclarationStatement[26164-26217]:VariableDeclarationStatement[26188-26241]"
    }, {
      "left" : "if (info == null || !info.isDefine())",
      "right" : "if (info == null || !info.isDefine())",
      "info" : "IfStatement[26222-26356]:IfStatement[26246-26380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26260-26356]:Block[26284-26380]"
    }, {
      "left" : "compiler.report(t.makeError(expr, MISSING_DEFINE_ANNOTATION));",
      "right" : "compiler.report(t.makeError(expr, MISSING_DEFINE_ANNOTATION));",
      "info" : "ExpressionStatement[26268-26330]:ExpressionStatement[26292-26354]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26337-26350]:ReturnStatement[26361-26374]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[26361-26373]:ReturnStatement[26385-26397]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26584-26591]:Modifier[26608-26615]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[26592-26599]:PrimitiveType[26616-26623]"
    }, {
      "left" : "verifyLastArgumentIsString",
      "right" : "verifyLastArgumentIsString",
      "info" : "SimpleName[26600-26626]:SimpleName[26624-26650]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[26634-26649]:SingleVariableDeclaration[26658-26673]"
    }, {
      "left" : "Node methodName",
      "right" : "Node methodName",
      "info" : "SingleVariableDeclaration[26651-26666]:SingleVariableDeclaration[26675-26690]"
    }, {
      "left" : "Node arg",
      "right" : "Node arg",
      "info" : "SingleVariableDeclaration[26668-26676]:SingleVariableDeclaration[26692-26700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26678-26831]:Block[26702-26855]"
    }, {
      "left" : "return verifyNotNull(t, methodName, arg) &&\n        verifyOfType(t, methodName, arg, Token.STRING) &&\n        verifyIsLast(t, methodName, arg);",
      "right" : "return verifyNotNull(t, methodName, arg) &&\n        verifyOfType(t, methodName, arg, Token.STRING) &&\n        verifyIsLast(t, methodName, arg);",
      "info" : "ReturnStatement[26684-26827]:ReturnStatement[26708-26851]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26898-26905]:Modifier[26922-26929]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[26906-26913]:PrimitiveType[26930-26937]"
    }, {
      "left" : "verifyNotNull",
      "right" : "verifyNotNull",
      "info" : "SimpleName[26914-26927]:SimpleName[26938-26951]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[26928-26943]:SingleVariableDeclaration[26952-26967]"
    }, {
      "left" : "Node methodName",
      "right" : "Node methodName",
      "info" : "SingleVariableDeclaration[26945-26960]:SingleVariableDeclaration[26969-26984]"
    }, {
      "left" : "Node arg",
      "right" : "Node arg",
      "info" : "SingleVariableDeclaration[26962-26970]:SingleVariableDeclaration[26986-26994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26972-27168]:Block[26996-27192]"
    }, {
      "left" : "if (arg == null)",
      "right" : "if (arg == null)",
      "info" : "IfStatement[26978-27147]:IfStatement[27002-27171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26995-27147]:Block[27019-27171]"
    }, {
      "left" : "compiler.report(\n          t.makeError(methodName,\n              NULL_ARGUMENT_ERROR, methodName.getQualifiedName()));",
      "right" : "compiler.report(\n          t.makeError(methodName,\n              NULL_ARGUMENT_ERROR, methodName.getQualifiedName()));",
      "info" : "ExpressionStatement[27003-27121]:ExpressionStatement[27027-27145]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27128-27141]:ReturnStatement[27152-27165]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[27152-27164]:ReturnStatement[27176-27188]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[27235-27242]:Modifier[27259-27266]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[27243-27250]:PrimitiveType[27267-27274]"
    }, {
      "left" : "verifyOfType",
      "right" : "verifyOfType",
      "info" : "SimpleName[27251-27263]:SimpleName[27275-27287]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[27264-27279]:SingleVariableDeclaration[27288-27303]"
    }, {
      "left" : "Node methodName",
      "right" : "Node methodName",
      "info" : "SingleVariableDeclaration[27281-27296]:SingleVariableDeclaration[27305-27320]"
    }, {
      "left" : "Node arg",
      "right" : "Node arg",
      "info" : "SingleVariableDeclaration[27304-27312]:SingleVariableDeclaration[27328-27336]"
    }, {
      "left" : "int desiredType",
      "right" : "int desiredType",
      "info" : "SingleVariableDeclaration[27314-27329]:SingleVariableDeclaration[27338-27353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27331-27547]:Block[27355-27571]"
    }, {
      "left" : "if (arg.getType() != desiredType)",
      "right" : "if (arg.getType() != desiredType)",
      "info" : "IfStatement[27337-27526]:IfStatement[27361-27550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27371-27526]:Block[27395-27550]"
    }, {
      "left" : "compiler.report(\n          t.makeError(methodName,\n              INVALID_ARGUMENT_ERROR, methodName.getQualifiedName()));",
      "right" : "compiler.report(\n          t.makeError(methodName,\n              INVALID_ARGUMENT_ERROR, methodName.getQualifiedName()));",
      "info" : "ExpressionStatement[27379-27500]:ExpressionStatement[27403-27524]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27507-27520]:ReturnStatement[27531-27544]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[27531-27543]:ReturnStatement[27555-27567]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[27614-27621]:Modifier[27638-27645]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[27622-27629]:PrimitiveType[27646-27653]"
    }, {
      "left" : "verifyIsLast",
      "right" : "verifyIsLast",
      "info" : "SimpleName[27630-27642]:SimpleName[27654-27666]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[27643-27658]:SingleVariableDeclaration[27667-27682]"
    }, {
      "left" : "Node methodName",
      "right" : "Node methodName",
      "info" : "SingleVariableDeclaration[27660-27675]:SingleVariableDeclaration[27684-27699]"
    }, {
      "left" : "Node arg",
      "right" : "Node arg",
      "info" : "SingleVariableDeclaration[27677-27685]:SingleVariableDeclaration[27701-27709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27687-27898]:Block[27711-27922]"
    }, {
      "left" : "if (arg.getNext() != null)",
      "right" : "if (arg.getNext() != null)",
      "info" : "IfStatement[27693-27877]:IfStatement[27717-27901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27720-27877]:Block[27744-27901]"
    }, {
      "left" : "compiler.report(\n          t.makeError(methodName,\n              TOO_MANY_ARGUMENTS_ERROR, methodName.getQualifiedName()));",
      "right" : "compiler.report(\n          t.makeError(methodName,\n              TOO_MANY_ARGUMENTS_ERROR, methodName.getQualifiedName()));",
      "info" : "ExpressionStatement[27728-27851]:ExpressionStatement[27752-27875]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27858-27871]:ReturnStatement[27882-27895]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[27882-27894]:ReturnStatement[27906-27918]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28044-28051]:Modifier[28068-28075]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[28052-28059]:PrimitiveType[28076-28083]"
    }, {
      "left" : "verifySetCssNameMapping",
      "right" : "verifySetCssNameMapping",
      "info" : "SimpleName[28060-28083]:SimpleName[28084-28107]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[28084-28099]:SingleVariableDeclaration[28108-28123]"
    }, {
      "left" : "Node methodName",
      "right" : "Node methodName",
      "info" : "SingleVariableDeclaration[28101-28116]:SingleVariableDeclaration[28125-28140]"
    }, {
      "left" : "Node firstArg",
      "right" : "Node firstArg",
      "info" : "SingleVariableDeclaration[28124-28137]:SingleVariableDeclaration[28148-28161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28139-28802]:Block[28163-28826]"
    }, {
      "left" : "DiagnosticType diagnostic = null;",
      "right" : "DiagnosticType diagnostic = null;",
      "info" : "VariableDeclarationStatement[28145-28178]:VariableDeclarationStatement[28169-28202]"
    }, {
      "left" : "if (firstArg == null)",
      "right" : "if (firstArg == null)",
      "info" : "IfStatement[28183-28609]:IfStatement[28207-28633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28205-28252]:Block[28229-28276]"
    }, {
      "left" : "diagnostic = NULL_ARGUMENT_ERROR;",
      "right" : "diagnostic = NULL_ARGUMENT_ERROR;",
      "info" : "ExpressionStatement[28213-28246]:ExpressionStatement[28237-28270]"
    }, {
      "left" : "if (!firstArg.isObjectLit())",
      "right" : "if (!firstArg.isObjectLit())",
      "info" : "IfStatement[28258-28609]:IfStatement[28282-28633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28287-28339]:Block[28311-28363]"
    }, {
      "left" : "diagnostic = EXPECTED_OBJECTLIT_ERROR;",
      "right" : "diagnostic = EXPECTED_OBJECTLIT_ERROR;",
      "info" : "ExpressionStatement[28295-28333]:ExpressionStatement[28319-28357]"
    }, {
      "left" : "if (firstArg.getNext() != null)",
      "right" : "if (firstArg.getNext() != null)",
      "info" : "IfStatement[28345-28609]:IfStatement[28369-28633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28377-28609]:Block[28401-28633]"
    }, {
      "left" : "Node secondArg = firstArg.getNext();",
      "right" : "Node secondArg = firstArg.getNext();",
      "info" : "VariableDeclarationStatement[28385-28421]:VariableDeclarationStatement[28409-28445]"
    }, {
      "left" : "if (!secondArg.isString())",
      "right" : "if (!secondArg.isString())",
      "info" : "IfStatement[28428-28603]:IfStatement[28452-28627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28455-28508]:Block[28479-28532]"
    }, {
      "left" : "diagnostic = EXPECTED_STRING_ERROR;",
      "right" : "diagnostic = EXPECTED_STRING_ERROR;",
      "info" : "ExpressionStatement[28465-28500]:ExpressionStatement[28489-28524]"
    }, {
      "left" : "if (secondArg.getNext() != null)",
      "right" : "if (secondArg.getNext() != null)",
      "info" : "IfStatement[28514-28603]:IfStatement[28538-28627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28547-28603]:Block[28571-28627]"
    }, {
      "left" : "diagnostic = TOO_MANY_ARGUMENTS_ERROR;",
      "right" : "diagnostic = TOO_MANY_ARGUMENTS_ERROR;",
      "info" : "ExpressionStatement[28557-28595]:ExpressionStatement[28581-28619]"
    }, {
      "left" : "if (diagnostic != null)",
      "right" : "if (diagnostic != null)",
      "info" : "IfStatement[28614-28781]:IfStatement[28638-28805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28638-28781]:Block[28662-28805]"
    }, {
      "left" : "compiler.report(\n          t.makeError(methodName,\n              diagnostic, methodName.getQualifiedName()));",
      "right" : "compiler.report(\n          t.makeError(methodName,\n              diagnostic, methodName.getQualifiedName()));",
      "info" : "ExpressionStatement[28646-28755]:ExpressionStatement[28670-28779]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28762-28775]:ReturnStatement[28786-28799]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[28786-28798]:ReturnStatement[28810-28822]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29153-29160]:Modifier[29177-29184]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29161-29165]:PrimitiveType[29185-29189]"
    }, {
      "left" : "registerAnyProvidedPrefixes",
      "right" : "registerAnyProvidedPrefixes",
      "info" : "SimpleName[29166-29193]:SimpleName[29190-29217]"
    }, {
      "left" : "String ns",
      "right" : "String ns",
      "info" : "SingleVariableDeclaration[29201-29210]:SingleVariableDeclaration[29225-29234]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[29212-29221]:SingleVariableDeclaration[29236-29245]"
    }, {
      "left" : "JSModule module",
      "right" : "JSModule module",
      "info" : "SingleVariableDeclaration[29223-29238]:SingleVariableDeclaration[29247-29262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29240-29685]:Block[29264-29709]"
    }, {
      "left" : "int pos = ns.indexOf('.');",
      "right" : "int pos = ns.indexOf('.');",
      "info" : "VariableDeclarationStatement[29246-29272]:VariableDeclarationStatement[29270-29296]"
    }, {
      "left" : "while (pos != -1)",
      "right" : "while (pos != -1)",
      "info" : "WhileStatement[29277-29681]:WhileStatement[29301-29705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29295-29681]:Block[29319-29705]"
    }, {
      "left" : "String prefixNs = ns.substring(0, pos);",
      "right" : "String prefixNs = ns.substring(0, pos);",
      "info" : "VariableDeclarationStatement[29303-29342]:VariableDeclarationStatement[29327-29366]"
    }, {
      "left" : "pos = ns.indexOf('.', pos + 1);",
      "right" : "pos = ns.indexOf('.', pos + 1);",
      "info" : "ExpressionStatement[29349-29380]:ExpressionStatement[29373-29404]"
    }, {
      "left" : "if (providedNames.containsKey(prefixNs))",
      "right" : "if (providedNames.containsKey(prefixNs))",
      "info" : "IfStatement[29387-29675]:IfStatement[29411-29699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29428-29534]:Block[29452-29558]"
    }, {
      "left" : "providedNames.get(prefixNs).addProvide(\n            node, module, false /* implicit */);",
      "right" : "providedNames.get(prefixNs).addProvide(\n            node, module, false /* implicit */);",
      "info" : "ExpressionStatement[29438-29526]:ExpressionStatement[29462-29550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29540-29675]:Block[29564-29699]"
    }, {
      "left" : "providedNames.put(\n            prefixNs,\n            new ProvidedName(prefixNs, node, module, false /* implicit */));",
      "right" : "providedNames.put(\n            prefixNs,\n            new ProvidedName(prefixNs, node, module, false /* implicit */));",
      "info" : "ExpressionStatement[29550-29667]:ExpressionStatement[29574-29691]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29862-29869]:Modifier[29886-29893]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[29870-29875]:TYPE_DECLARATION_KIND[29894-29899]"
    }, {
      "left" : "ProvidedName",
      "right" : "ProvidedName",
      "info" : "SimpleName[29876-29888]:SimpleName[29900-29912]"
    }, {
      "left" : "ProvidedName",
      "right" : "ProvidedName",
      "info" : "SimpleName[30569-30581]:SimpleName[30593-30605]"
    }, {
      "left" : "String namespace",
      "right" : "String namespace",
      "info" : "SingleVariableDeclaration[30582-30598]:SingleVariableDeclaration[30606-30622]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[30600-30609]:SingleVariableDeclaration[30624-30633]"
    }, {
      "left" : "JSModule module",
      "right" : "JSModule module",
      "info" : "SingleVariableDeclaration[30611-30626]:SingleVariableDeclaration[30635-30650]"
    }, {
      "left" : "boolean explicit",
      "right" : "boolean explicit",
      "info" : "SingleVariableDeclaration[30636-30652]:SingleVariableDeclaration[30660-30676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30654-30913]:Block[30678-30937]"
    }, {
      "left" : "Preconditions.checkArgument(\n          node == null /* The base case */ ||\n          node.isExprResult());",
      "right" : "Preconditions.checkArgument(\n          node == null /* The base case */ ||\n          node.isExprResult());",
      "info" : "ExpressionStatement[30662-30768]:ExpressionStatement[30686-30792]"
    }, {
      "left" : "this.namespace = namespace;",
      "right" : "this.namespace = namespace;",
      "info" : "ExpressionStatement[30775-30802]:ExpressionStatement[30799-30826]"
    }, {
      "left" : "this.firstNode = node;",
      "right" : "this.firstNode = node;",
      "info" : "ExpressionStatement[30809-30831]:ExpressionStatement[30833-30855]"
    }, {
      "left" : "this.firstModule = module;",
      "right" : "this.firstModule = module;",
      "info" : "ExpressionStatement[30838-30864]:ExpressionStatement[30862-30888]"
    }, {
      "left" : "addProvide(node, module, explicit);",
      "right" : "addProvide(node, module, explicit);",
      "info" : "ExpressionStatement[30872-30907]:ExpressionStatement[30896-30931]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[30979-30983]:PrimitiveType[31003-31007]"
    }, {
      "left" : "addProvide",
      "right" : "addProvide",
      "info" : "SimpleName[30984-30994]:SimpleName[31008-31018]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[30995-31004]:SingleVariableDeclaration[31019-31028]"
    }, {
      "left" : "JSModule module",
      "right" : "JSModule module",
      "info" : "SingleVariableDeclaration[31006-31021]:SingleVariableDeclaration[31030-31045]"
    }, {
      "left" : "boolean explicit",
      "right" : "boolean explicit",
      "info" : "SingleVariableDeclaration[31023-31039]:SingleVariableDeclaration[31047-31063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31041-31289]:Block[31065-31313]"
    }, {
      "left" : "if (explicit)",
      "right" : "if (explicit)",
      "info" : "IfStatement[31049-31248]:IfStatement[31073-31272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31063-31248]:Block[31087-31272]"
    }, {
      "left" : "Preconditions.checkState(explicitNode == null);",
      "right" : "Preconditions.checkState(explicitNode == null);",
      "info" : "ExpressionStatement[31073-31120]:ExpressionStatement[31097-31144]"
    }, {
      "left" : "Preconditions.checkArgument(node.isExprResult());",
      "right" : "Preconditions.checkArgument(node.isExprResult());",
      "info" : "ExpressionStatement[31129-31178]:ExpressionStatement[31153-31202]"
    }, {
      "left" : "explicitNode = node;",
      "right" : "explicitNode = node;",
      "info" : "ExpressionStatement[31187-31207]:ExpressionStatement[31211-31231]"
    }, {
      "left" : "explicitModule = module;",
      "right" : "explicitModule = module;",
      "info" : "ExpressionStatement[31216-31240]:ExpressionStatement[31240-31264]"
    }, {
      "left" : "updateMinimumModule(module);",
      "right" : "updateMinimumModule(module);",
      "info" : "ExpressionStatement[31255-31283]:ExpressionStatement[31279-31307]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[31295-31302]:PrimitiveType[31319-31326]"
    }, {
      "left" : "isExplicitlyProvided",
      "right" : "isExplicitlyProvided",
      "info" : "SimpleName[31303-31323]:SimpleName[31327-31347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31326-31368]:Block[31350-31392]"
    }, {
      "left" : "return explicitNode != null;",
      "right" : "return explicitNode != null;",
      "info" : "ReturnStatement[31334-31362]:ReturnStatement[31358-31386]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[31657-31661]:PrimitiveType[31681-31685]"
    }, {
      "left" : "addDefinition",
      "right" : "addDefinition",
      "info" : "SimpleName[31662-31675]:SimpleName[31686-31699]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[31676-31685]:SingleVariableDeclaration[31700-31709]"
    }, {
      "left" : "JSModule module",
      "right" : "JSModule module",
      "info" : "SingleVariableDeclaration[31687-31702]:SingleVariableDeclaration[31711-31726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31704-32087]:Block[31728-32111]"
    }, {
      "left" : "Preconditions.checkArgument(node.isExprResult() || // assign\n                                  node.isFunction() ||\n                                  node.isVar());",
      "right" : "Preconditions.checkArgument(node.isExprResult() || // assign\n                                  node.isFunction() ||\n                                  node.isVar());",
      "info" : "ExpressionStatement[31712-31876]:ExpressionStatement[31736-31900]"
    }, {
      "left" : "Preconditions.checkArgument(explicitNode != node);",
      "right" : "Preconditions.checkArgument(explicitNode != node);",
      "info" : "ExpressionStatement[31883-31933]:ExpressionStatement[31907-31957]"
    }, {
      "left" : "if ((candidateDefinition == null) || !node.isExprResult())",
      "right" : "if ((candidateDefinition == null) || !node.isExprResult())",
      "info" : "IfStatement[31940-32081]:IfStatement[31964-32105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31999-32081]:Block[32023-32105]"
    }, {
      "left" : "candidateDefinition = node;",
      "right" : "candidateDefinition = node;",
      "info" : "ExpressionStatement[32009-32036]:ExpressionStatement[32033-32060]"
    }, {
      "left" : "updateMinimumModule(module);",
      "right" : "updateMinimumModule(module);",
      "info" : "ExpressionStatement[32045-32073]:ExpressionStatement[32069-32097]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32093-32100]:Modifier[32117-32124]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[32101-32105]:PrimitiveType[32125-32129]"
    }, {
      "left" : "updateMinimumModule",
      "right" : "updateMinimumModule",
      "info" : "SimpleName[32106-32125]:SimpleName[32130-32149]"
    }, {
      "left" : "JSModule newModule",
      "right" : "JSModule newModule",
      "info" : "SingleVariableDeclaration[32126-32144]:SingleVariableDeclaration[32150-32168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32146-32622]:Block[32170-32646]"
    }, {
      "left" : "if (minimumModule == null)",
      "right" : "if (minimumModule == null)",
      "info" : "IfStatement[32154-32616]:IfStatement[32178-32640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32181-32225]:Block[32205-32249]"
    }, {
      "left" : "minimumModule = newModule;",
      "right" : "minimumModule = newModule;",
      "info" : "ExpressionStatement[32191-32217]:ExpressionStatement[32215-32241]"
    }, {
      "left" : "if (moduleGraph != null)",
      "right" : "if (moduleGraph != null)",
      "info" : "IfStatement[32231-32616]:IfStatement[32255-32640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32256-32377]:Block[32280-32401]"
    }, {
      "left" : "minimumModule = moduleGraph.getDeepestCommonDependencyInclusive(\n            minimumModule, newModule);",
      "right" : "minimumModule = moduleGraph.getDeepestCommonDependencyInclusive(\n            minimumModule, newModule);",
      "info" : "ExpressionStatement[32266-32369]:ExpressionStatement[32290-32393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32383-32616]:Block[32407-32640]"
    }, {
      "left" : "Preconditions.checkState(newModule == minimumModule,\n                                 \"Missing module graph\");",
      "right" : "Preconditions.checkState(newModule == minimumModule,\n                                 \"Missing module graph\");",
      "info" : "ExpressionStatement[32498-32608]:ExpressionStatement[32522-32632]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[32882-32886]:PrimitiveType[32906-32910]"
    }, {
      "left" : "replace",
      "right" : "replace",
      "info" : "SimpleName[32887-32894]:SimpleName[32911-32918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32897-35611]:Block[32921-35635]"
    }, {
      "left" : "if (firstNode == null)",
      "right" : "if (firstNode == null)",
      "info" : "IfStatement[32905-33047]:IfStatement[32929-33071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32928-33047]:Block[32952-33071]"
    }, {
      "left" : "replacementNode = candidateDefinition;",
      "right" : "replacementNode = candidateDefinition;",
      "info" : "ExpressionStatement[32985-33023]:ExpressionStatement[33009-33047]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[33032-33039]:ReturnStatement[33056-33063]"
    }, {
      "left" : "if (candidateDefinition != null && explicitNode != null)",
      "right" : "if (candidateDefinition != null && explicitNode != null)",
      "info" : "IfStatement[33162-35605]:IfStatement[33186-35629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33219-34372]:Block[33243-34396]"
    }, {
      "left" : "explicitNode.detachFromParent();",
      "right" : "explicitNode.detachFromParent();",
      "info" : "ExpressionStatement[33229-33261]:ExpressionStatement[33253-33285]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[33270-33298]:ExpressionStatement[33294-33322]"
    }, {
      "left" : "replacementNode = candidateDefinition;",
      "right" : "replacementNode = candidateDefinition;",
      "info" : "ExpressionStatement[33349-33387]:ExpressionStatement[33373-33411]"
    }, {
      "left" : "if (candidateDefinition.isExprResult() &&\n            !candidateDefinition.getFirstChild().isQualifiedName())",
      "right" : "if (candidateDefinition.isExprResult() &&\n            !candidateDefinition.getFirstChild().isQualifiedName())",
      "info" : "IfStatement[33396-34364]:IfStatement[33420-34388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33506-34364]:Block[33530-34388]"
    }, {
      "left" : "candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);",
      "right" : "candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);",
      "info" : "ExpressionStatement[33518-33578]:ExpressionStatement[33542-33602]"
    }, {
      "left" : "Node assignNode = candidateDefinition.getFirstChild();",
      "right" : "Node assignNode = candidateDefinition.getFirstChild();",
      "info" : "VariableDeclarationStatement[33589-33643]:VariableDeclarationStatement[33613-33667]"
    }, {
      "left" : "Node nameNode = assignNode.getFirstChild();",
      "right" : "Node nameNode = assignNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[33654-33697]:VariableDeclarationStatement[33678-33721]"
    }, {
      "left" : "if (nameNode.isName())",
      "right" : "if (nameNode.isName())",
      "info" : "IfStatement[33708-34354]:IfStatement[33732-34378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33731-34354]:Block[33755-34378]"
    }, {
      "left" : "Node valueNode = nameNode.getNext();",
      "right" : "Node valueNode = nameNode.getNext();",
      "info" : "VariableDeclarationStatement[33810-33846]:VariableDeclarationStatement[33834-33870]"
    }, {
      "left" : "assignNode.removeChild(nameNode);",
      "right" : "assignNode.removeChild(nameNode);",
      "info" : "ExpressionStatement[33859-33892]:ExpressionStatement[33883-33916]"
    }, {
      "left" : "assignNode.removeChild(valueNode);",
      "right" : "assignNode.removeChild(valueNode);",
      "info" : "ExpressionStatement[33905-33939]:ExpressionStatement[33929-33963]"
    }, {
      "left" : "nameNode.addChildToFront(valueNode);",
      "right" : "nameNode.addChildToFront(valueNode);",
      "info" : "ExpressionStatement[33952-33988]:ExpressionStatement[33976-34012]"
    }, {
      "left" : "Node varNode = IR.var(nameNode);",
      "right" : "Node varNode = IR.var(nameNode);",
      "info" : "VariableDeclarationStatement[34001-34033]:VariableDeclarationStatement[34025-34057]"
    }, {
      "left" : "varNode.copyInformationFrom(candidateDefinition);",
      "right" : "varNode.copyInformationFrom(candidateDefinition);",
      "info" : "ExpressionStatement[34046-34095]:ExpressionStatement[34070-34119]"
    }, {
      "left" : "candidateDefinition.getParent().replaceChild(\n                candidateDefinition, varNode);",
      "right" : "candidateDefinition.getParent().replaceChild(\n                candidateDefinition, varNode);",
      "info" : "ExpressionStatement[34108-34200]:ExpressionStatement[34132-34224]"
    }, {
      "left" : "nameNode.setJSDocInfo(assignNode.getJSDocInfo());",
      "right" : "nameNode.setJSDocInfo(assignNode.getJSDocInfo());",
      "info" : "ExpressionStatement[34213-34262]:ExpressionStatement[34237-34286]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[34275-34303]:ExpressionStatement[34299-34327]"
    }, {
      "left" : "replacementNode = varNode;",
      "right" : "replacementNode = varNode;",
      "info" : "ExpressionStatement[34316-34342]:ExpressionStatement[34340-34366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34378-35605]:Block[34402-35629]"
    }, {
      "left" : "replacementNode = createDeclarationNode();",
      "right" : "replacementNode = createDeclarationNode();",
      "info" : "ExpressionStatement[34457-34499]:ExpressionStatement[34481-34523]"
    }, {
      "left" : "if (firstModule == minimumModule)",
      "right" : "if (firstModule == minimumModule)",
      "info" : "IfStatement[34508-35471]:IfStatement[34532-35495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34542-34629]:Block[34566-34653]"
    }, {
      "left" : "firstNode.getParent().addChildBefore(replacementNode, firstNode);",
      "right" : "firstNode.getParent().addChildBefore(replacementNode, firstNode);",
      "info" : "ExpressionStatement[34554-34619]:ExpressionStatement[34578-34643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34635-35471]:Block[34659-35495]"
    }, {
      "left" : "int indexOfDot = namespace.lastIndexOf('.');",
      "right" : "int indexOfDot = namespace.lastIndexOf('.');",
      "info" : "VariableDeclarationStatement[34797-34841]:VariableDeclarationStatement[34821-34865]"
    }, {
      "left" : "if (indexOfDot == -1)",
      "right" : "if (indexOfDot == -1)",
      "info" : "IfStatement[34852-35461]:IfStatement[34876-35485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34874-35035]:Block[34898-35059]"
    }, {
      "left" : "compiler.getNodeForCodeInsertion(minimumModule)\n                .addChildToBack(replacementNode);",
      "right" : "compiler.getNodeForCodeInsertion(minimumModule)\n                .addChildToBack(replacementNode);",
      "info" : "ExpressionStatement[34926-35023]:ExpressionStatement[34950-35047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35041-35461]:Block[35065-35485]"
    }, {
      "left" : "ProvidedName parentName =\n                providedNames.get(namespace.substring(0, indexOfDot));",
      "right" : "ProvidedName parentName =\n                providedNames.get(namespace.substring(0, indexOfDot));",
      "info" : "VariableDeclarationStatement[35105-35201]:VariableDeclarationStatement[35129-35225]"
    }, {
      "left" : "Preconditions.checkNotNull(parentName);",
      "right" : "Preconditions.checkNotNull(parentName);",
      "info" : "ExpressionStatement[35214-35253]:ExpressionStatement[35238-35277]"
    }, {
      "left" : "Preconditions.checkNotNull(parentName.replacementNode);",
      "right" : "Preconditions.checkNotNull(parentName.replacementNode);",
      "info" : "ExpressionStatement[35266-35321]:ExpressionStatement[35290-35345]"
    }, {
      "left" : "parentName.replacementNode.getParent().addChildAfter(\n                replacementNode, parentName.replacementNode);",
      "right" : "parentName.replacementNode.getParent().addChildAfter(\n                replacementNode, parentName.replacementNode);",
      "info" : "ExpressionStatement[35334-35449]:ExpressionStatement[35358-35473]"
    }, {
      "left" : "if (explicitNode != null)",
      "right" : "if (explicitNode != null)",
      "info" : "IfStatement[35480-35560]:IfStatement[35504-35584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35506-35560]:Block[35530-35584]"
    }, {
      "left" : "explicitNode.detachFromParent();",
      "right" : "explicitNode.detachFromParent();",
      "info" : "ExpressionStatement[35518-35550]:ExpressionStatement[35542-35574]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[35569-35597]:ExpressionStatement[35593-35621]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35725-35732]:Modifier[35749-35756]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[35733-35737]:SimpleType[35757-35761]"
    }, {
      "left" : "createDeclarationNode",
      "right" : "createDeclarationNode",
      "info" : "SimpleName[35738-35759]:SimpleName[35762-35783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35762-35909]:Block[35786-35933]"
    }, {
      "left" : "if (namespace.indexOf('.') == -1)",
      "right" : "if (namespace.indexOf('.') == -1)",
      "info" : "IfStatement[35770-35903]:IfStatement[35794-35927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35804-35847]:Block[35828-35871]"
    }, {
      "left" : "return makeVarDeclNode();",
      "right" : "return makeVarDeclNode();",
      "info" : "ReturnStatement[35814-35839]:ReturnStatement[35838-35863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35853-35903]:Block[35877-35927]"
    }, {
      "left" : "return makeAssignmentExprNode();",
      "right" : "return makeAssignmentExprNode();",
      "info" : "ReturnStatement[35863-35895]:ReturnStatement[35887-35919]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36028-36035]:Modifier[36052-36059]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[36036-36040]:SimpleType[36060-36064]"
    }, {
      "left" : "makeVarDeclNode",
      "right" : "makeVarDeclNode",
      "info" : "SimpleName[36041-36056]:SimpleName[36065-36080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36059-36647]:Block[36083-36671]"
    }, {
      "left" : "Node name = IR.name(namespace);",
      "right" : "Node name = IR.name(namespace);",
      "info" : "VariableDeclarationStatement[36067-36098]:VariableDeclarationStatement[36091-36122]"
    }, {
      "left" : "name.addChildToFront(createNamespaceLiteral());",
      "right" : "name.addChildToFront(createNamespaceLiteral());",
      "info" : "ExpressionStatement[36105-36152]:ExpressionStatement[36129-36176]"
    }, {
      "left" : "Node decl = IR.var(name);",
      "right" : "Node decl = IR.var(name);",
      "info" : "VariableDeclarationStatement[36160-36185]:VariableDeclarationStatement[36184-36209]"
    }, {
      "left" : "decl.putBooleanProp(Node.IS_NAMESPACE, true);",
      "right" : "decl.putBooleanProp(Node.IS_NAMESPACE, true);",
      "info" : "ExpressionStatement[36192-36237]:ExpressionStatement[36216-36261]"
    }, {
      "left" : "if (compiler.getCodingConvention().isConstant(namespace))",
      "right" : "if (compiler.getCodingConvention().isConstant(namespace))",
      "info" : "IfStatement[36308-36433]:IfStatement[36332-36457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36366-36433]:Block[36390-36457]"
    }, {
      "left" : "name.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "name.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[36376-36425]:ExpressionStatement[36400-36449]"
    }, {
      "left" : "if (candidateDefinition == null)",
      "right" : "if (candidateDefinition == null)",
      "info" : "IfStatement[36440-36532]:IfStatement[36464-36556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36473-36532]:Block[36497-36556]"
    }, {
      "left" : "name.setJSDocInfo(createConstantJsDoc());",
      "right" : "name.setJSDocInfo(createConstantJsDoc());",
      "info" : "ExpressionStatement[36483-36524]:ExpressionStatement[36507-36548]"
    }, {
      "left" : "Preconditions.checkState(isNamespacePlaceholder(decl));",
      "right" : "Preconditions.checkState(isNamespacePlaceholder(decl));",
      "info" : "ExpressionStatement[36540-36595]:ExpressionStatement[36564-36619]"
    }, {
      "left" : "setSourceInfo(decl);",
      "right" : "setSourceInfo(decl);",
      "info" : "ExpressionStatement[36602-36622]:ExpressionStatement[36626-36646]"
    }, {
      "left" : "return decl;",
      "right" : "return decl;",
      "info" : "ReturnStatement[36629-36641]:ReturnStatement[36653-36665]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36848-36855]:Modifier[36872-36879]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[36856-36860]:SimpleType[36880-36884]"
    }, {
      "left" : "createNamespaceLiteral",
      "right" : "createNamespaceLiteral",
      "info" : "SimpleName[36861-36883]:SimpleName[36885-36907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36886-37045]:Block[36910-37069]"
    }, {
      "left" : "Node objlit = IR.objectlit();",
      "right" : "Node objlit = IR.objectlit();",
      "info" : "VariableDeclarationStatement[36894-36923]:VariableDeclarationStatement[36918-36947]"
    }, {
      "left" : "objlit.setJSType(\n          compiler.getTypeRegistry().createAnonymousObjectType(null));",
      "right" : "objlit.setJSType(\n          compiler.getTypeRegistry().createAnonymousObjectType(null));",
      "info" : "ExpressionStatement[36930-37018]:ExpressionStatement[36954-37042]"
    }, {
      "left" : "return objlit;",
      "right" : "return objlit;",
      "info" : "ReturnStatement[37025-37039]:ReturnStatement[37049-37063]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37165-37172]:Modifier[37189-37196]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[37173-37177]:SimpleType[37197-37201]"
    }, {
      "left" : "makeAssignmentExprNode",
      "right" : "makeAssignmentExprNode",
      "info" : "SimpleName[37178-37200]:SimpleName[37202-37224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37203-37793]:Block[37227-37817]"
    }, {
      "left" : "Node decl = IR.exprResult(\n          IR.assign(\n              NodeUtil.newQualifiedNameNode(\n                  compiler.getCodingConvention(), namespace,\n                  firstNode /* real source info will be filled in below */,\n                  namespace),\n              createNamespaceLiteral()));",
      "right" : "Node decl = IR.exprResult(\n          IR.assign(\n              NodeUtil.newQualifiedNameNode(\n                  compiler.getCodingConvention(), namespace,\n                  firstNode /* real source info will be filled in below */,\n                  namespace),\n              createNamespaceLiteral()));",
      "info" : "VariableDeclarationStatement[37211-37512]:VariableDeclarationStatement[37235-37536]"
    }, {
      "left" : "decl.putBooleanProp(Node.IS_NAMESPACE, true);",
      "right" : "decl.putBooleanProp(Node.IS_NAMESPACE, true);",
      "info" : "ExpressionStatement[37519-37564]:ExpressionStatement[37543-37588]"
    }, {
      "left" : "if (candidateDefinition == null)",
      "right" : "if (candidateDefinition == null)",
      "info" : "IfStatement[37571-37679]:IfStatement[37595-37703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37604-37679]:Block[37628-37703]"
    }, {
      "left" : "decl.getFirstChild().setJSDocInfo(createConstantJsDoc());",
      "right" : "decl.getFirstChild().setJSDocInfo(createConstantJsDoc());",
      "info" : "ExpressionStatement[37614-37671]:ExpressionStatement[37638-37695]"
    }, {
      "left" : "Preconditions.checkState(isNamespacePlaceholder(decl));",
      "right" : "Preconditions.checkState(isNamespacePlaceholder(decl));",
      "info" : "ExpressionStatement[37686-37741]:ExpressionStatement[37710-37765]"
    }, {
      "left" : "setSourceInfo(decl);",
      "right" : "setSourceInfo(decl);",
      "info" : "ExpressionStatement[37748-37768]:ExpressionStatement[37772-37792]"
    }, {
      "left" : "return decl;",
      "right" : "return decl;",
      "info" : "ReturnStatement[37775-37787]:ReturnStatement[37799-37811]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37799-37806]:Modifier[37823-37830]"
    }, {
      "left" : "JSDocInfo",
      "right" : "JSDocInfo",
      "info" : "SimpleType[37807-37816]:SimpleType[37831-37840]"
    }, {
      "left" : "createConstantJsDoc",
      "right" : "createConstantJsDoc",
      "info" : "SimpleName[37817-37836]:SimpleName[37841-37860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37839-37975]:Block[37863-37999]"
    }, {
      "left" : "JSDocInfoBuilder builder = new JSDocInfoBuilder(false);",
      "right" : "JSDocInfoBuilder builder = new JSDocInfoBuilder(false);",
      "info" : "VariableDeclarationStatement[37847-37902]:VariableDeclarationStatement[37871-37926]"
    }, {
      "left" : "builder.recordConstancy();",
      "right" : "builder.recordConstancy();",
      "info" : "ExpressionStatement[37909-37935]:ExpressionStatement[37933-37959]"
    }, {
      "left" : "return builder.build(null);",
      "right" : "return builder.build(null);",
      "info" : "ReturnStatement[37942-37969]:ReturnStatement[37966-37993]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[38038-38045]:Modifier[38062-38069]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[38046-38050]:PrimitiveType[38070-38074]"
    }, {
      "left" : "setSourceInfo",
      "right" : "setSourceInfo",
      "info" : "SimpleName[38051-38064]:SimpleName[38075-38088]"
    }, {
      "left" : "Node newNode",
      "right" : "Node newNode",
      "info" : "SingleVariableDeclaration[38065-38077]:SingleVariableDeclaration[38089-38101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38079-38495]:Block[38103-38519]"
    }, {
      "left" : "Node provideStringNode = getProvideStringNode();",
      "right" : "Node provideStringNode = getProvideStringNode();",
      "info" : "VariableDeclarationStatement[38087-38135]:VariableDeclarationStatement[38111-38159]"
    }, {
      "left" : "int offset = getSourceInfoOffset(provideStringNode);",
      "right" : "int offset = getSourceInfoOffset(provideStringNode);",
      "info" : "VariableDeclarationStatement[38142-38194]:VariableDeclarationStatement[38166-38218]"
    }, {
      "left" : "Node sourceInfoNode = provideStringNode == null\n          ? firstNode : provideStringNode;",
      "right" : "Node sourceInfoNode = provideStringNode == null\n          ? firstNode : provideStringNode;",
      "info" : "VariableDeclarationStatement[38201-38291]:VariableDeclarationStatement[38225-38315]"
    }, {
      "left" : "newNode.copyInformationFromForTree(sourceInfoNode);",
      "right" : "newNode.copyInformationFromForTree(sourceInfoNode);",
      "info" : "ExpressionStatement[38298-38349]:ExpressionStatement[38322-38373]"
    }, {
      "left" : "if (offset != 0)",
      "right" : "if (offset != 0)",
      "info" : "IfStatement[38356-38489]:IfStatement[38380-38513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38373-38489]:Block[38397-38513]"
    }, {
      "left" : "newNode.setSourceEncodedPositionForTree(\n            sourceInfoNode.getSourcePosition() + offset);",
      "right" : "newNode.setSourceEncodedPositionForTree(\n            sourceInfoNode.getSourcePosition() + offset);",
      "info" : "ExpressionStatement[38383-38481]:ExpressionStatement[38407-38505]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[38587-38594]:Modifier[38611-38618]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[38595-38598]:PrimitiveType[38619-38622]"
    }, {
      "left" : "getSourceInfoOffset",
      "right" : "getSourceInfoOffset",
      "info" : "SimpleName[38599-38618]:SimpleName[38623-38642]"
    }, {
      "left" : "Node provideStringNode",
      "right" : "Node provideStringNode",
      "info" : "SingleVariableDeclaration[38619-38641]:SingleVariableDeclaration[38643-38665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38643-38945]:Block[38667-38969]"
    }, {
      "left" : "if (provideStringNode == null)",
      "right" : "if (provideStringNode == null)",
      "info" : "IfStatement[38651-38709]:IfStatement[38675-38733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38682-38709]:Block[38706-38733]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[38692-38701]:ReturnStatement[38716-38725]"
    }, {
      "left" : "int indexOfLastDot = namespace.lastIndexOf('.');",
      "right" : "int indexOfLastDot = namespace.lastIndexOf('.');",
      "info" : "VariableDeclarationStatement[38717-38765]:VariableDeclarationStatement[38741-38789]"
    }, {
      "left" : "return 2 + indexOfLastDot;",
      "right" : "return 2 + indexOfLastDot;",
      "info" : "ReturnStatement[38913-38939]:ReturnStatement[38937-38963]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[38951-38958]:Modifier[38975-38982]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[38959-38963]:SimpleType[38983-38987]"
    }, {
      "left" : "getProvideStringNode",
      "right" : "getProvideStringNode",
      "info" : "SimpleName[38964-38984]:SimpleName[38988-39008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38987-39162]:Block[39011-39186]"
    }, {
      "left" : "return (firstNode.getFirstChild() != null &&\n              NodeUtil.isExprCall(firstNode)) ?\n          firstNode.getFirstChild().getLastChild() :\n          null;",
      "right" : "return (firstNode.getFirstChild() != null &&\n              NodeUtil.isExprCall(firstNode)) ?\n          firstNode.getFirstChild().getLastChild() :\n          null;",
      "info" : "ReturnStatement[38995-39156]:ReturnStatement[39019-39180]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[39238-39245]:Modifier[39262-39269]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39246-39252]:Modifier[39270-39276]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[39253-39260]:PrimitiveType[39277-39284]"
    }, {
      "left" : "isNamespacePlaceholder",
      "right" : "isNamespacePlaceholder",
      "info" : "SimpleName[39261-39283]:SimpleName[39285-39307]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[39284-39290]:SingleVariableDeclaration[39308-39314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39292-39692]:Block[39316-39716]"
    }, {
      "left" : "if (!n.getBooleanProp(Node.IS_NAMESPACE))",
      "right" : "if (!n.getBooleanProp(Node.IS_NAMESPACE))",
      "info" : "IfStatement[39298-39367]:IfStatement[39322-39391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39340-39367]:Block[39364-39391]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[39348-39361]:ReturnStatement[39372-39385]"
    }, {
      "left" : "Node value = null;",
      "right" : "Node value = null;",
      "info" : "VariableDeclarationStatement[39373-39391]:VariableDeclarationStatement[39397-39415]"
    }, {
      "left" : "if (n.isExprResult())",
      "right" : "if (n.isExprResult())",
      "info" : "IfStatement[39396-39602]:IfStatement[39420-39626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39418-39501]:Block[39442-39525]"
    }, {
      "left" : "Node assign = n.getFirstChild();",
      "right" : "Node assign = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[39426-39458]:VariableDeclarationStatement[39450-39482]"
    }, {
      "left" : "value = assign.getLastChild();",
      "right" : "value = assign.getLastChild();",
      "info" : "ExpressionStatement[39465-39495]:ExpressionStatement[39489-39519]"
    }, {
      "left" : "if (n.isVar())",
      "right" : "if (n.isVar())",
      "info" : "IfStatement[39507-39602]:IfStatement[39531-39626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39522-39602]:Block[39546-39626]"
    }, {
      "left" : "Node name = n.getFirstChild();",
      "right" : "Node name = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[39530-39560]:VariableDeclarationStatement[39554-39584]"
    }, {
      "left" : "value = name.getFirstChild();",
      "right" : "value = name.getFirstChild();",
      "info" : "ExpressionStatement[39567-39596]:ExpressionStatement[39591-39620]"
    }, {
      "left" : "return value != null\n      && value.isObjectLit()\n      && !value.hasChildren();",
      "right" : "return value != null\n      && value.isObjectLit()\n      && !value.hasChildren();",
      "info" : "ReturnStatement[39608-39688]:ReturnStatement[39632-39712]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[39864-39871]:Modifier[39888-39895]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[39872-39876]:PrimitiveType[39896-39900]"
    }, {
      "left" : "maybeAddStringNodeToSymbolTable",
      "right" : "maybeAddStringNodeToSymbolTable",
      "info" : "SimpleName[39877-39908]:SimpleName[39901-39932]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[39909-39915]:SingleVariableDeclaration[39933-39939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39917-41092]:Block[39941-41116]"
    }, {
      "left" : "if (preprocessorSymbolTable == null)",
      "right" : "if (preprocessorSymbolTable == null)",
      "info" : "IfStatement[39923-39981]:IfStatement[39947-40005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39960-39981]:Block[39984-40005]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[39968-39975]:ReturnStatement[39992-39999]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[39987-40015]:VariableDeclarationStatement[40011-40039]"
    }, {
      "left" : "Node syntheticRef = NodeUtil.newQualifiedNameNode(\n        compiler.getCodingConvention(), name,\n        n /* real source offsets will be filled in below */,\n        name);",
      "right" : "Node syntheticRef = NodeUtil.newQualifiedNameNode(\n        compiler.getCodingConvention(), name,\n        n /* real source offsets will be filled in below */,\n        name);",
      "info" : "VariableDeclarationStatement[40020-40192]:VariableDeclarationStatement[40044-40216]"
    }, {
      "left" : "final int forQuote = 1;",
      "right" : "final int forQuote = 1;",
      "info" : "VariableDeclarationStatement[40265-40288]:VariableDeclarationStatement[40289-40312]"
    }, {
      "left" : "final int forDot = 1;",
      "right" : "final int forDot = 1;",
      "info" : "VariableDeclarationStatement[40293-40314]:VariableDeclarationStatement[40317-40338]"
    }, {
      "left" : "Node current = null;",
      "right" : "Node current = null;",
      "info" : "VariableDeclarationStatement[40320-40340]:VariableDeclarationStatement[40344-40364]"
    }, {
      "left" : "for (current = syntheticRef;\n         current.isGetProp();\n         current = current.getFirstChild())",
      "right" : "for (current = syntheticRef;\n         current.isGetProp();\n         current = current.getFirstChild())",
      "info" : "ForStatement[40345-40920]:ForStatement[40369-40944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40448-40920]:Block[40472-40944]"
    }, {
      "left" : "int fullLen = current.getQualifiedName().length();",
      "right" : "int fullLen = current.getQualifiedName().length();",
      "info" : "VariableDeclarationStatement[40456-40506]:VariableDeclarationStatement[40480-40530]"
    }, {
      "left" : "int namespaceLen = current.getFirstChild().getQualifiedName().length();",
      "right" : "int namespaceLen = current.getFirstChild().getQualifiedName().length();",
      "info" : "VariableDeclarationStatement[40513-40584]:VariableDeclarationStatement[40537-40608]"
    }, {
      "left" : "current.setSourceEncodedPosition(n.getSourcePosition() + forQuote);",
      "right" : "current.setSourceEncodedPosition(n.getSourcePosition() + forQuote);",
      "info" : "ExpressionStatement[40592-40659]:ExpressionStatement[40616-40683]"
    }, {
      "left" : "current.setLength(fullLen);",
      "right" : "current.setLength(fullLen);",
      "info" : "ExpressionStatement[40666-40693]:ExpressionStatement[40690-40717]"
    }, {
      "left" : "current.getLastChild().setSourceEncodedPosition(\n          n.getSourcePosition() + namespaceLen + forQuote + forDot);",
      "right" : "current.getLastChild().setSourceEncodedPosition(\n          n.getSourcePosition() + namespaceLen + forQuote + forDot);",
      "info" : "ExpressionStatement[40701-40818]:ExpressionStatement[40725-40842]"
    }, {
      "left" : "current.getLastChild().setLength(\n          current.getLastChild().getString().length());",
      "right" : "current.getLastChild().setLength(\n          current.getLastChild().getString().length());",
      "info" : "ExpressionStatement[40825-40914]:ExpressionStatement[40849-40938]"
    }, {
      "left" : "current.setSourceEncodedPosition(n.getSourcePosition() + forQuote);",
      "right" : "current.setSourceEncodedPosition(n.getSourcePosition() + forQuote);",
      "info" : "ExpressionStatement[40926-40993]:ExpressionStatement[40950-41017]"
    }, {
      "left" : "current.setLength(current.getString().length());",
      "right" : "current.setLength(current.getString().length());",
      "info" : "ExpressionStatement[40998-41046]:ExpressionStatement[41022-41070]"
    }, {
      "left" : "maybeAddToSymbolTable(syntheticRef);",
      "right" : "maybeAddToSymbolTable(syntheticRef);",
      "info" : "ExpressionStatement[41052-41088]:ExpressionStatement[41076-41112]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[41168-41175]:Modifier[41192-41199]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[41176-41180]:PrimitiveType[41200-41204]"
    }, {
      "left" : "maybeAddToSymbolTable",
      "right" : "maybeAddToSymbolTable",
      "info" : "SimpleName[41181-41202]:SimpleName[41205-41226]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[41203-41209]:SingleVariableDeclaration[41227-41233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41211-41312]:Block[41235-41336]"
    }, {
      "left" : "if (preprocessorSymbolTable != null)",
      "right" : "if (preprocessorSymbolTable != null)",
      "info" : "IfStatement[41217-41308]:IfStatement[41241-41332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41254-41308]:Block[41278-41332]"
    }, {
      "left" : "preprocessorSymbolTable.addReference(n);",
      "right" : "preprocessorSymbolTable.addReference(n);",
      "info" : "ExpressionStatement[41262-41302]:ExpressionStatement[41286-41326]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[41485-41492]:Modifier[41509-41516]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[41493-41498]:TYPE_DECLARATION_KIND[41517-41522]"
    }, {
      "left" : "UnrecognizedRequire",
      "right" : "UnrecognizedRequire",
      "info" : "SimpleName[41499-41518]:SimpleName[41523-41542]"
    }, {
      "left" : "UnrecognizedRequire",
      "right" : "UnrecognizedRequire",
      "info" : "SimpleName[41610-41629]:SimpleName[41634-41653]"
    }, {
      "left" : "Node requireNode",
      "right" : "Node requireNode",
      "info" : "SingleVariableDeclaration[41630-41646]:SingleVariableDeclaration[41654-41670]"
    }, {
      "left" : "String namespace",
      "right" : "String namespace",
      "info" : "SingleVariableDeclaration[41648-41664]:SingleVariableDeclaration[41672-41688]"
    }, {
      "left" : "String inputName",
      "right" : "String inputName",
      "info" : "SingleVariableDeclaration[41666-41682]:SingleVariableDeclaration[41690-41706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41684-41797]:Block[41708-41821]"
    }, {
      "left" : "this.requireNode = requireNode;",
      "right" : "this.requireNode = requireNode;",
      "info" : "ExpressionStatement[41692-41723]:ExpressionStatement[41716-41747]"
    }, {
      "left" : "this.namespace = namespace;",
      "right" : "this.namespace = namespace;",
      "info" : "ExpressionStatement[41730-41757]:ExpressionStatement[41754-41781]"
    }, {
      "left" : "this.inputName = inputName;",
      "right" : "this.inputName = inputName;",
      "info" : "ExpressionStatement[41764-41791]:ExpressionStatement[41788-41815]"
    } ]
  },
  "interFileMappings" : { }
}