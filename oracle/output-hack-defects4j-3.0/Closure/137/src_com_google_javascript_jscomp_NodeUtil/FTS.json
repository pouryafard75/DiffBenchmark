{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "NodeUtil",
      "right" : "NodeUtil",
      "info" : "TypeDeclaration[1207-57579]:TypeDeclaration[1207-57695]"
    }, {
      "left" : "private static final Set<String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS =\n      new HashSet<String>(Arrays.asList(\n        \"Array\",\n        \"Date\",\n        \"Error\",\n        \"Object\",\n        \"RegExp\",\n        \"XMLHttpRequest\"));",
      "right" : "private static final Set<String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS =\n      new HashSet<String>(Arrays.asList(\n        \"Array\",\n        \"Date\",\n        \"Error\",\n        \"Object\",\n        \"RegExp\",\n        \"XMLHttpRequest\"));",
      "info" : "FieldDeclaration[1461-1755]:FieldDeclaration[1461-1755]"
    }, {
      "left" : "public static final String CONSTANT_MARKER = \"$$constant\";",
      "right" : "public static final String CONSTANT_MARKER = \"$$constant\";",
      "info" : "FieldDeclaration[1759-1817]:FieldDeclaration[1759-1817]"
    }, {
      "left" : "private NodeUtil()",
      "right" : "private NodeUtil()",
      "info" : "MethodDeclaration[1861-1882]:MethodDeclaration[1861-1882]"
    }, {
      "left" : "static boolean getBooleanValue(Node n)",
      "right" : "static boolean getBooleanValue(Node n)",
      "info" : "MethodDeclaration[1886-3025]:MethodDeclaration[1886-3025]"
    }, {
      "left" : "static String getStringValue(Node n)",
      "right" : "static String getStringValue(Node n)",
      "info" : "MethodDeclaration[3030-3964]:MethodDeclaration[3030-3964]"
    }, {
      "left" : "static String getFunctionName(Node n, Node parent)",
      "right" : "static String getFunctionName(Node n, Node parent)",
      "info" : "MethodDeclaration[3968-5210]:MethodDeclaration[3968-5210]"
    }, {
      "left" : "static boolean isImmutableValue(Node n)",
      "right" : "static boolean isImmutableValue(Node n)",
      "info" : "MethodDeclaration[5214-5928]:MethodDeclaration[5214-5928]"
    }, {
      "left" : "static boolean isLiteralValue(Node n)",
      "right" : "static boolean isLiteralValue(Node n)",
      "info" : "MethodDeclaration[5932-6734]:MethodDeclaration[5932-6734]"
    }, {
      "left" : "static boolean isValidDefineValue(Node val, Set<String> defines)",
      "right" : "static boolean isValidDefineValue(Node val, Set<String> defines)",
      "info" : "MethodDeclaration[6738-7659]:MethodDeclaration[6738-7659]"
    }, {
      "left" : "static boolean isEmptyBlock(Node block)",
      "right" : "static boolean isEmptyBlock(Node block)",
      "info" : "MethodDeclaration[7663-8043]:MethodDeclaration[7663-8043]"
    }, {
      "left" : "static boolean isSimpleOperatorType(int type)",
      "right" : "static boolean isSimpleOperatorType(int type)",
      "info" : "MethodDeclaration[8047-9024]:MethodDeclaration[8047-9024]"
    }, {
      "left" : "public static Node newExpr(Node child)",
      "right" : "public static Node newExpr(Node child)",
      "info" : "MethodDeclaration[9028-9276]:MethodDeclaration[9028-9276]"
    }, {
      "left" : "static boolean mayEffectMutableState(Node n)",
      "right" : "static boolean mayEffectMutableState(Node n)",
      "info" : "MethodDeclaration[9280-9547]:MethodDeclaration[9280-9547]"
    }, {
      "left" : "static boolean mayHaveSideEffects(Node n)",
      "right" : "static boolean mayHaveSideEffects(Node n)",
      "info" : "MethodDeclaration[9551-9731]:MethodDeclaration[9551-9731]"
    }, {
      "left" : "private static boolean checkForStateChangeHelper(\n      Node n, boolean checkForNewObjects)",
      "right" : "private static boolean checkForStateChangeHelper(\n      Node n, boolean checkForNewObjects)",
      "info" : "MethodDeclaration[9735-13820]:MethodDeclaration[9735-13820]"
    }, {
      "left" : "static boolean constructorCallHasSideEffects(Node callNode)",
      "right" : "static boolean constructorCallHasSideEffects(Node callNode)",
      "info" : "MethodDeclaration[13824-14426]:MethodDeclaration[13824-14426]"
    }, {
      "left" : "static boolean functionCallHasSideEffects(Node callNode)",
      "right" : "static boolean functionCallHasSideEffects(Node callNode)",
      "info" : "MethodDeclaration[14430-15415]:MethodDeclaration[14430-15415]"
    }, {
      "left" : "static boolean nodeTypeMayHaveSideEffects(Node n)",
      "right" : "static boolean nodeTypeMayHaveSideEffects(Node n)",
      "info" : "MethodDeclaration[15419-16125]:MethodDeclaration[15419-16125]"
    }, {
      "left" : "static boolean canBeSideEffected(Node n)",
      "right" : "static boolean canBeSideEffected(Node n)",
      "info" : "MethodDeclaration[16129-16369]:MethodDeclaration[16129-16369]"
    }, {
      "left" : "static boolean canBeSideEffected(Node n, Set<String> knownConstants)",
      "right" : "static boolean canBeSideEffected(Node n, Set<String> knownConstants)",
      "info" : "MethodDeclaration[16373-17478]:MethodDeclaration[16373-17478]"
    }, {
      "left" : "static int precedence(int type)",
      "right" : "static int precedence(int type)",
      "info" : "MethodDeclaration[17915-19970]:MethodDeclaration[17915-19970]"
    }, {
      "left" : "static boolean isAssociative(int type)",
      "right" : "static boolean isAssociative(int type)",
      "info" : "MethodDeclaration[19974-20442]:MethodDeclaration[19974-20442]"
    }, {
      "left" : "static boolean isAssignmentOp(Node n)",
      "right" : "static boolean isAssignmentOp(Node n)",
      "info" : "MethodDeclaration[20446-20913]:MethodDeclaration[20446-20913]"
    }, {
      "left" : "static int getOpFromAssignmentOp(Node n)",
      "right" : "static int getOpFromAssignmentOp(Node n)",
      "info" : "MethodDeclaration[20917-21680]:MethodDeclaration[20917-21680]"
    }, {
      "left" : "static boolean isExpressionNode(Node n)",
      "right" : "static boolean isExpressionNode(Node n)",
      "info" : "MethodDeclaration[21684-21774]:MethodDeclaration[21684-21774]"
    }, {
      "left" : "static boolean containsFunctionDeclaration(Node n)",
      "right" : "static boolean containsFunctionDeclaration(Node n)",
      "info" : "MethodDeclaration[21778-21957]:MethodDeclaration[21778-21957]"
    }, {
      "left" : "static boolean referencesThis(Node n)",
      "right" : "static boolean referencesThis(Node n)",
      "info" : "MethodDeclaration[21961-22127]:MethodDeclaration[21961-22127]"
    }, {
      "left" : "static boolean isGet(Node n)",
      "right" : "static boolean isGet(Node n)",
      "info" : "MethodDeclaration[22131-22298]:MethodDeclaration[22131-22298]"
    }, {
      "left" : "static boolean isGetProp(Node n)",
      "right" : "static boolean isGetProp(Node n)",
      "info" : "MethodDeclaration[22302-22422]:MethodDeclaration[22302-22422]"
    }, {
      "left" : "static boolean isName(Node n)",
      "right" : "static boolean isName(Node n)",
      "info" : "MethodDeclaration[22426-22537]:MethodDeclaration[22426-22537]"
    }, {
      "left" : "static boolean isNew(Node n)",
      "right" : "static boolean isNew(Node n)",
      "info" : "MethodDeclaration[22541-22649]:MethodDeclaration[22541-22649]"
    }, {
      "left" : "static boolean isVar(Node n)",
      "right" : "static boolean isVar(Node n)",
      "info" : "MethodDeclaration[22653-22761]:MethodDeclaration[22653-22761]"
    }, {
      "left" : "static boolean isVarDeclaration(Node n)",
      "right" : "static boolean isVarDeclaration(Node n)",
      "info" : "MethodDeclaration[22765-23174]:MethodDeclaration[22765-23174]"
    }, {
      "left" : "static Node getAssignedValue(Node n)",
      "right" : "static Node getAssignedValue(Node n)",
      "info" : "MethodDeclaration[23178-23620]:MethodDeclaration[23178-23620]"
    }, {
      "left" : "static boolean isString(Node n)",
      "right" : "static boolean isString(Node n)",
      "info" : "MethodDeclaration[23624-23741]:MethodDeclaration[23624-23741]"
    }, {
      "left" : "static boolean isExprAssign(Node n)",
      "right" : "static boolean isExprAssign(Node n)",
      "info" : "MethodDeclaration[23745-24073]:MethodDeclaration[23745-24073]"
    }, {
      "left" : "static boolean isAssign(Node n)",
      "right" : "static boolean isAssign(Node n)",
      "info" : "MethodDeclaration[24077-24195]:MethodDeclaration[24077-24195]"
    }, {
      "left" : "static boolean isExprCall(Node n)",
      "right" : "static boolean isExprCall(Node n)",
      "info" : "MethodDeclaration[24199-24514]:MethodDeclaration[24199-24514]"
    }, {
      "left" : "static boolean isForIn(Node n)",
      "right" : "static boolean isForIn(Node n)",
      "info" : "MethodDeclaration[24518-24693]:MethodDeclaration[24518-24693]"
    }, {
      "left" : "static boolean isLoopStructure(Node n)",
      "right" : "static boolean isLoopStructure(Node n)",
      "info" : "MethodDeclaration[24697-24979]:MethodDeclaration[24697-24979]"
    }, {
      "left" : "static Node getLoopCodeBlock(Node n)",
      "right" : "static Node getLoopCodeBlock(Node n)",
      "info" : "MethodDeclaration[24983-25386]:MethodDeclaration[24983-25386]"
    }, {
      "left" : "static boolean isControlStructure(Node n)",
      "right" : "static boolean isControlStructure(Node n)",
      "info" : "MethodDeclaration[25390-25873]:MethodDeclaration[25390-25873]"
    }, {
      "left" : "static boolean isControlStructureCodeBlock(Node parent, Node n)",
      "right" : "static boolean isControlStructureCodeBlock(Node parent, Node n)",
      "info" : "MethodDeclaration[25877-26758]:MethodDeclaration[25877-26758]"
    }, {
      "left" : "static Node getConditionExpression(Node n)",
      "right" : "static Node getConditionExpression(Node n)",
      "info" : "MethodDeclaration[26762-27562]:MethodDeclaration[26762-27562]"
    }, {
      "left" : "static boolean isStatementBlock(Node n)",
      "right" : "static boolean isStatementBlock(Node n)",
      "info" : "MethodDeclaration[27566-27767]:MethodDeclaration[27566-27767]"
    }, {
      "left" : "static boolean isStatement(Node n)",
      "right" : "static boolean isStatement(Node n)",
      "info" : "MethodDeclaration[27771-28367]:MethodDeclaration[27771-28367]"
    }, {
      "left" : "static boolean isSwitchCase(Node n)",
      "right" : "static boolean isSwitchCase(Node n)",
      "info" : "MethodDeclaration[28371-28539]:MethodDeclaration[28371-28539]"
    }, {
      "left" : "static boolean isLabelName(Node n)",
      "right" : "static boolean isLabelName(Node n)",
      "info" : "MethodDeclaration[28708-29113]:MethodDeclaration[28824-29229]"
    }, {
      "left" : "static boolean isTryFinallyNode(Node parent, Node child)",
      "right" : "static boolean isTryFinallyNode(Node parent, Node child)",
      "info" : "MethodDeclaration[29117-29357]:MethodDeclaration[29233-29473]"
    }, {
      "left" : "static void removeChild(Node parent, Node node)",
      "right" : "static void removeChild(Node parent, Node node)",
      "info" : "MethodDeclaration[29361-31027]:MethodDeclaration[29477-31143]"
    }, {
      "left" : "static boolean tryMergeBlock(Node block)",
      "right" : "static boolean tryMergeBlock(Node block)",
      "info" : "MethodDeclaration[31031-31881]:MethodDeclaration[31147-31997]"
    }, {
      "left" : "static boolean isCall(Node n)",
      "right" : "static boolean isCall(Node n)",
      "info" : "MethodDeclaration[31885-31996]:MethodDeclaration[32001-32112]"
    }, {
      "left" : "static boolean isFunction(Node n)",
      "right" : "static boolean isFunction(Node n)",
      "info" : "MethodDeclaration[32000-32123]:MethodDeclaration[32116-32239]"
    }, {
      "left" : "static Node getFunctionBody(Node fn)",
      "right" : "static Node getFunctionBody(Node fn)",
      "info" : "MethodDeclaration[32127-32314]:MethodDeclaration[32243-32430]"
    }, {
      "left" : "static boolean isThis(Node node)",
      "right" : "static boolean isThis(Node node)",
      "info" : "MethodDeclaration[32318-32435]:MethodDeclaration[32434-32551]"
    }, {
      "left" : "static boolean containsCall(Node n)",
      "right" : "static boolean containsCall(Node n)",
      "info" : "MethodDeclaration[32439-32581]:MethodDeclaration[32555-32697]"
    }, {
      "left" : "static boolean isFunctionDeclaration(Node n)",
      "right" : "static boolean isFunctionDeclaration(Node n)",
      "info" : "MethodDeclaration[32585-32931]:MethodDeclaration[32701-33047]"
    }, {
      "left" : "static boolean isHoistedFunctionDeclaration(Node n)",
      "right" : "static boolean isHoistedFunctionDeclaration(Node n)",
      "info" : "MethodDeclaration[32935-33346]:MethodDeclaration[33051-33462]"
    }, {
      "left" : "static boolean isAnonymousFunction(Node n)",
      "right" : "static boolean isAnonymousFunction(Node n)",
      "info" : "MethodDeclaration[33351-33668]:MethodDeclaration[33467-33784]"
    }, {
      "left" : "static boolean isFunctionAnonymous(Node n)",
      "right" : "static boolean isFunctionAnonymous(Node n)",
      "info" : "MethodDeclaration[33672-34389]:MethodDeclaration[33788-34505]"
    }, {
      "left" : "static boolean isVarArgsFunction(Node function)",
      "right" : "static boolean isVarArgsFunction(Node function)",
      "info" : "MethodDeclaration[34393-34814]:MethodDeclaration[34509-34930]"
    }, {
      "left" : "static boolean isObjectCallMethod(Node callNode, String methodName)",
      "right" : "static boolean isObjectCallMethod(Node callNode, String methodName)",
      "info" : "MethodDeclaration[34818-35430]:MethodDeclaration[34934-35546]"
    }, {
      "left" : "static boolean isFunctionObjectCall(Node callNode)",
      "right" : "static boolean isFunctionObjectCall(Node callNode)",
      "info" : "MethodDeclaration[35435-35670]:MethodDeclaration[35551-35786]"
    }, {
      "left" : "static boolean isFunctionObjectApply(Node callNode)",
      "right" : "static boolean isFunctionObjectApply(Node callNode)",
      "info" : "MethodDeclaration[35674-35913]:MethodDeclaration[35790-36029]"
    }, {
      "left" : "static boolean isSimpleFunctionObjectCall(Node callNode)",
      "right" : "static boolean isSimpleFunctionObjectCall(Node callNode)",
      "info" : "MethodDeclaration[35917-36312]:MethodDeclaration[36033-36428]"
    }, {
      "left" : "static boolean isLhs(Node n, Node parent)",
      "right" : "static boolean isLhs(Node n, Node parent)",
      "info" : "MethodDeclaration[36316-36834]:MethodDeclaration[36432-36950]"
    }, {
      "left" : "static boolean isObjectLitKey(Node node, Node parent)",
      "right" : "static boolean isObjectLitKey(Node node, Node parent)",
      "info" : "MethodDeclaration[36838-37434]:MethodDeclaration[36954-37550]"
    }, {
      "left" : "static String opToStr(int operator)",
      "right" : "static String opToStr(int operator)",
      "info" : "MethodDeclaration[37438-39351]:MethodDeclaration[37554-39467]"
    }, {
      "left" : "static String opToStrNoFail(int operator)",
      "right" : "static String opToStrNoFail(int operator)",
      "info" : "MethodDeclaration[39355-39858]:MethodDeclaration[39471-39974]"
    }, {
      "left" : "static boolean containsTypeInOuterScope(Node node, int type)",
      "right" : "static boolean containsTypeInOuterScope(Node node, int type)",
      "info" : "MethodDeclaration[39862-40167]:MethodDeclaration[39978-40283]"
    }, {
      "left" : "static boolean containsType(Node node,\n                              int type,\n                              Predicate<Node> traverseChildrenPred)",
      "right" : "static boolean containsType(Node node,\n                              int type,\n                              Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[40171-40476]:MethodDeclaration[40287-40592]"
    }, {
      "left" : "static boolean containsType(Node node, int type)",
      "right" : "static boolean containsType(Node node, int type)",
      "info" : "MethodDeclaration[40480-40686]:MethodDeclaration[40596-40802]"
    }, {
      "left" : "static void redeclareVarsInsideBranch(Node branch)",
      "right" : "static void redeclareVarsInsideBranch(Node branch)",
      "info" : "MethodDeclaration[40691-41342]:MethodDeclaration[40807-41458]"
    }, {
      "left" : "static void copyNameAnnotations(Node source, Node destination)",
      "right" : "static void copyNameAnnotations(Node source, Node destination)",
      "info" : "MethodDeclaration[41346-41647]:MethodDeclaration[41462-41763]"
    }, {
      "left" : "private static Node getAddingRoot(Node n)",
      "right" : "private static Node getAddingRoot(Node n)",
      "info" : "MethodDeclaration[41651-42473]:MethodDeclaration[41767-42589]"
    }, {
      "left" : "public static FunctionNode newFunctionNode(String name, List<Node> params,\n      Node body, int lineno, int charno)",
      "right" : "public static FunctionNode newFunctionNode(String name, List<Node> params,\n      Node body, int lineno, int charno)",
      "info" : "MethodDeclaration[42477-43068]:MethodDeclaration[42593-43184]"
    }, {
      "left" : "public static Node newQualifiedNameNode(String name, int lineno, int charno)",
      "right" : "public static Node newQualifiedNameNode(String name, int lineno, int charno)",
      "info" : "MethodDeclaration[43072-44125]:MethodDeclaration[43188-44241]"
    }, {
      "left" : "static Node newQualifiedNameNode(String name, Node basisNode,\n      String originalName)",
      "right" : "static Node newQualifiedNameNode(String name, Node basisNode,\n      String originalName)",
      "info" : "MethodDeclaration[44129-44875]:MethodDeclaration[44245-44991]"
    }, {
      "left" : "static void setDebugInformation(Node node, Node basisNode,\n                                  String originalName)",
      "right" : "static void setDebugInformation(Node node, Node basisNode,\n                                  String originalName)",
      "info" : "MethodDeclaration[44879-45410]:MethodDeclaration[44995-45526]"
    }, {
      "left" : "static Node newName(String name, Node basisNode)",
      "right" : "static Node newName(String name, Node basisNode)",
      "info" : "MethodDeclaration[45414-45914]:MethodDeclaration[45530-46030]"
    }, {
      "left" : "static Node newName(String name, Node basisNode, String originalName)",
      "right" : "static Node newName(String name, Node basisNode, String originalName)",
      "info" : "MethodDeclaration[45918-46633]:MethodDeclaration[46034-46749]"
    }, {
      "left" : "static boolean isLatin(String s)",
      "right" : "static boolean isLatin(String s)",
      "info" : "MethodDeclaration[46637-47504]:MethodDeclaration[46753-47620]"
    }, {
      "left" : "static boolean isValidPropertyName(String name)",
      "right" : "static boolean isValidPropertyName(String name)",
      "info" : "MethodDeclaration[47508-48178]:MethodDeclaration[47624-48294]"
    }, {
      "left" : "VarCollector",
      "right" : "VarCollector",
      "info" : "TypeDeclaration[48182-48619]:TypeDeclaration[48298-48735]"
    }, {
      "left" : "final Map<String, Node> vars = Maps.newLinkedHashMap();",
      "right" : "final Map<String, Node> vars = Maps.newLinkedHashMap();",
      "info" : "FieldDeclaration[48241-48296]:FieldDeclaration[48357-48412]"
    }, {
      "left" : "public void visit(Node n)",
      "right" : "public void visit(Node n)",
      "info" : "MethodDeclaration[48302-48615]:MethodDeclaration[48418-48731]"
    }, {
      "left" : "public static Collection<Node> getVarsDeclaredInBranch(Node root)",
      "right" : "public static Collection<Node> getVarsDeclaredInBranch(Node root)",
      "info" : "MethodDeclaration[48623-48999]:MethodDeclaration[48739-49115]"
    }, {
      "left" : "static boolean isPrototypePropertyDeclaration(Node n)",
      "right" : "static boolean isPrototypePropertyDeclaration(Node n)",
      "info" : "MethodDeclaration[49003-49310]:MethodDeclaration[49119-49426]"
    }, {
      "left" : "static boolean isPrototypeProperty(Node n)",
      "right" : "static boolean isPrototypeProperty(Node n)",
      "info" : "MethodDeclaration[49314-49550]:MethodDeclaration[49430-49666]"
    }, {
      "left" : "static Node getPrototypeClassName(Node qName)",
      "right" : "static Node getPrototypeClassName(Node qName)",
      "info" : "MethodDeclaration[49554-49913]:MethodDeclaration[49670-50029]"
    }, {
      "left" : "static String getPrototypePropertyName(Node qName)",
      "right" : "static String getPrototypePropertyName(Node qName)",
      "info" : "MethodDeclaration[49917-50275]:MethodDeclaration[50033-50391]"
    }, {
      "left" : "static Node newUndefinedNode()",
      "right" : "static Node newUndefinedNode()",
      "info" : "MethodDeclaration[50279-50518]:MethodDeclaration[50395-50634]"
    }, {
      "left" : "static Node newVarNode(String name, Node value)",
      "right" : "static Node newVarNode(String name, Node value)",
      "info" : "MethodDeclaration[50522-50855]:MethodDeclaration[50638-50971]"
    }, {
      "left" : "MatchNameNode",
      "right" : "MatchNameNode",
      "info" : "TypeDeclaration[50859-51211]:TypeDeclaration[50975-51327]"
    }, {
      "left" : "final String name;",
      "right" : "final String name;",
      "info" : "FieldDeclaration[51004-51022]:FieldDeclaration[51120-51138]"
    }, {
      "left" : "MatchNameNode(String name",
      "right" : "MatchNameNode(String name",
      "info" : "MethodDeclaration[51028-51085]:MethodDeclaration[51144-51201]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[51091-51207]:MethodDeclaration[51207-51323]"
    }, {
      "left" : "MatchNodeType",
      "right" : "MatchNodeType",
      "info" : "TypeDeclaration[51215-51502]:TypeDeclaration[51331-51618]"
    }, {
      "left" : "final int type;",
      "right" : "final int type;",
      "info" : "FieldDeclaration[51347-51362]:FieldDeclaration[51463-51478]"
    }, {
      "left" : "MatchNodeType(int type",
      "right" : "MatchNodeType(int type",
      "info" : "MethodDeclaration[51368-51422]:MethodDeclaration[51484-51538]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[51428-51498]:MethodDeclaration[51544-51614]"
    }, {
      "left" : "static boolean isNodeTypeReferenced(Node node, int type)",
      "right" : "static boolean isNodeTypeReferenced(Node node, int type)",
      "info" : "MethodDeclaration[51506-51706]:MethodDeclaration[51622-51822]"
    }, {
      "left" : "static boolean isNodeTypeReferenced(\n      Node node, int type, Predicate<Node> traverseChildrenPred)",
      "right" : "static boolean isNodeTypeReferenced(\n      Node node, int type, Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[51710-51948]:MethodDeclaration[51826-52064]"
    }, {
      "left" : "static int getNodeTypeReferenceCount(Node node, int type)",
      "right" : "static int getNodeTypeReferenceCount(Node node, int type)",
      "info" : "MethodDeclaration[51952-52153]:MethodDeclaration[52068-52269]"
    }, {
      "left" : "static boolean isNameReferenced(Node node,\n                                  String name,\n                                  Predicate<Node> traverseChildrenPred)",
      "right" : "static boolean isNameReferenced(Node node,\n                                  String name,\n                                  Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[52157-52468]:MethodDeclaration[52273-52584]"
    }, {
      "left" : "static boolean isNameReferenced(Node node, String name)",
      "right" : "static boolean isNameReferenced(Node node, String name)",
      "info" : "MethodDeclaration[52472-52680]:MethodDeclaration[52588-52796]"
    }, {
      "left" : "static int getNameReferenceCount(Node node, String name)",
      "right" : "static int getNameReferenceCount(Node node, String name)",
      "info" : "MethodDeclaration[52684-52892]:MethodDeclaration[52800-53008]"
    }, {
      "left" : "static boolean has(Node node,\n                     Predicate<Node> pred,\n                     Predicate<Node> traverseChildrenPred)",
      "right" : "static boolean has(Node node,\n                     Predicate<Node> pred,\n                     Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[52896-53423]:MethodDeclaration[53012-53539]"
    }, {
      "left" : "static int getCount(Node n, Predicate<Node> pred)",
      "right" : "static int getCount(Node n, Predicate<Node> pred)",
      "info" : "MethodDeclaration[53427-53788]:MethodDeclaration[53543-53904]"
    }, {
      "left" : "Visitor",
      "right" : "Visitor",
      "info" : "TypeDeclaration[53792-53924]:TypeDeclaration[53908-54040]"
    }, {
      "left" : "void visit(Node node);",
      "right" : "void visit(Node node);",
      "info" : "MethodDeclaration[53898-53920]:MethodDeclaration[54014-54036]"
    }, {
      "left" : "static void visitPreOrder(Node node,\n                     Visitor vistor,\n                     Predicate<Node> traverseChildrenPred)",
      "right" : "static void visitPreOrder(Node node,\n                     Visitor vistor,\n                     Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[53928-54382]:MethodDeclaration[54044-54498]"
    }, {
      "left" : "static void visitPostOrder(Node node,\n                     Visitor vistor,\n                     Predicate<Node> traverseChildrenPred)",
      "right" : "static void visitPostOrder(Node node,\n                     Visitor vistor,\n                     Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[54386-54843]:MethodDeclaration[54502-54959]"
    }, {
      "left" : "static boolean hasFinally(Node n)",
      "right" : "static boolean hasFinally(Node n)",
      "info" : "MethodDeclaration[54847-55045]:MethodDeclaration[54963-55161]"
    }, {
      "left" : "static Node getCatchBlock(Node n)",
      "right" : "static Node getCatchBlock(Node n)",
      "info" : "MethodDeclaration[55049-55277]:MethodDeclaration[55165-55393]"
    }, {
      "left" : "static boolean hasCatchHandler(Node n)",
      "right" : "static boolean hasCatchHandler(Node n)",
      "info" : "MethodDeclaration[55281-55568]:MethodDeclaration[55397-55684]"
    }, {
      "left" : "static Node getFnParameters(Node fnNode)",
      "right" : "static Node getFnParameters(Node fnNode)",
      "info" : "MethodDeclaration[55572-55901]:MethodDeclaration[55688-56017]"
    }, {
      "left" : "static boolean isConstantName(Node node)",
      "right" : "static boolean isConstantName(Node node)",
      "info" : "MethodDeclaration[55905-56708]:MethodDeclaration[56021-56824]"
    }, {
      "left" : "static JSDocInfo getInfoForNameNode(Node nameNode)",
      "right" : "static JSDocInfo getInfoForNameNode(Node nameNode)",
      "info" : "MethodDeclaration[56712-57237]:MethodDeclaration[56828-57353]"
    }, {
      "left" : "static String getSourceName(Node n)",
      "right" : "static String getSourceName(Node n)",
      "info" : "MethodDeclaration[57241-57577]:MethodDeclaration[57357-57693]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1295-1301]:Modifier[1295-1301]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[1302-1307]:Modifier[1302-1307]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1308-1313]:TYPE_DECLARATION_KIND[1308-1313]"
    }, {
      "left" : "NodeUtil",
      "right" : "NodeUtil",
      "info" : "SimpleName[1314-1322]:SimpleName[1314-1322]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[1861-1868]:Modifier[1861-1868]"
    }, {
      "left" : "NodeUtil",
      "right" : "NodeUtil",
      "info" : "SimpleName[1869-1877]:SimpleName[1869-1877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1880-1882]:Block[1880-1882]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2133-2139]:Modifier[2133-2139]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[2140-2147]:PrimitiveType[2140-2147]"
    }, {
      "left" : "getBooleanValue",
      "right" : "getBooleanValue",
      "info" : "SimpleName[2148-2163]:SimpleName[2148-2163]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[2164-2170]:SingleVariableDeclaration[2164-2170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2172-3025]:Block[2172-3025]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.STRING:\n        return n.getString().length() > 0;\n\n      case Token.NUMBER:\n        return n.getDouble() != 0;\n\n      case Token.NULL:\n      case Token.FALSE:\n      case Token.VOID:\n        return false;\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"NaN\".equals(name)) {\n          // We assume here that programs don't change the value of the keyword\n          // undefined to something other than the value undefined.\n          return false;\n        } else if (\"Infinity\".equals(name)) {\n          return true;\n        }\n        break;\n\n      case Token.TRUE:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n        return true;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.STRING:\n        return n.getString().length() > 0;\n\n      case Token.NUMBER:\n        return n.getDouble() != 0;\n\n      case Token.NULL:\n      case Token.FALSE:\n      case Token.VOID:\n        return false;\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"NaN\".equals(name)) {\n          // We assume here that programs don't change the value of the keyword\n          // undefined to something other than the value undefined.\n          return false;\n        } else if (\"Infinity\".equals(name)) {\n          return true;\n        }\n        break;\n\n      case Token.TRUE:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n        return true;\n    }",
      "info" : "SwitchStatement[2178-2954]:SwitchStatement[2178-2954]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[2207-2225]:SwitchCase[2207-2225]"
    }, {
      "left" : "return n.getString().length() > 0;",
      "right" : "return n.getString().length() > 0;",
      "info" : "ReturnStatement[2234-2268]:ReturnStatement[2234-2268]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[2276-2294]:SwitchCase[2276-2294]"
    }, {
      "left" : "return n.getDouble() != 0;",
      "right" : "return n.getDouble() != 0;",
      "info" : "ReturnStatement[2303-2329]:ReturnStatement[2303-2329]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[2337-2353]:SwitchCase[2337-2353]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[2360-2377]:SwitchCase[2360-2377]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[2384-2400]:SwitchCase[2384-2400]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2409-2422]:ReturnStatement[2409-2422]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[2430-2446]:SwitchCase[2430-2446]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[2455-2483]:VariableDeclarationStatement[2455-2483]"
    }, {
      "left" : "if (\"undefined\".equals(name)\n            || \"NaN\".equals(name))",
      "right" : "if (\"undefined\".equals(name)\n            || \"NaN\".equals(name))",
      "info" : "IfStatement[2492-2808]:IfStatement[2492-2808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2556-2739]:Block[2556-2739]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2716-2729]:ReturnStatement[2716-2729]"
    }, {
      "left" : "if (\"Infinity\".equals(name))",
      "right" : "if (\"Infinity\".equals(name))",
      "info" : "IfStatement[2745-2808]:IfStatement[2745-2808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2774-2808]:Block[2774-2808]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[2786-2798]:ReturnStatement[2786-2798]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2817-2823]:BreakStatement[2817-2823]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[2831-2847]:SwitchCase[2831-2847]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[2854-2874]:SwitchCase[2854-2874]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[2881-2902]:SwitchCase[2881-2902]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[2909-2927]:SwitchCase[2909-2927]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[2936-2948]:ReturnStatement[2936-2948]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Non-literal value: \" + n);",
      "right" : "throw new IllegalArgumentException(\"Non-literal value: \" + n);",
      "info" : "ThrowStatement[2959-3021]:ThrowStatement[2959-3021]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3250-3256]:Modifier[3250-3256]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[3257-3263]:SimpleType[3257-3263]"
    }, {
      "left" : "getStringValue",
      "right" : "getStringValue",
      "info" : "SimpleName[3264-3278]:SimpleName[3264-3278]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[3279-3285]:SingleVariableDeclaration[3279-3285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3287-3964]:Block[3287-3964]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.NAME:\n      case Token.STRING:\n        return n.getString();\n\n      case Token.NUMBER:\n        double value = n.getDouble();\n        long longValue = (long) value;\n\n        // Return \"1\" instead of \"1.0\"\n        if (longValue == value) {\n          return Long.toString(longValue);\n        } else {\n          return Double.toString(n.getDouble());\n        }\n\n      case Token.FALSE:\n      case Token.TRUE:\n      case Token.NULL:\n        return Node.tokenToName(n.getType());\n\n      case Token.VOID:\n        return \"undefined\";\n    }",
      "right" : "switch (n.getType()) {\n      case Token.NAME:\n      case Token.STRING:\n        return n.getString();\n\n      case Token.NUMBER:\n        double value = n.getDouble();\n        long longValue = (long) value;\n\n        // Return \"1\" instead of \"1.0\"\n        if (longValue == value) {\n          return Long.toString(longValue);\n        } else {\n          return Double.toString(n.getDouble());\n        }\n\n      case Token.FALSE:\n      case Token.TRUE:\n      case Token.NULL:\n        return Node.tokenToName(n.getType());\n\n      case Token.VOID:\n        return \"undefined\";\n    }",
      "info" : "SwitchStatement[3372-3943]:SwitchStatement[3372-3943]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[3401-3417]:SwitchCase[3401-3417]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[3424-3442]:SwitchCase[3424-3442]"
    }, {
      "left" : "return n.getString();",
      "right" : "return n.getString();",
      "info" : "ReturnStatement[3451-3472]:ReturnStatement[3451-3472]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[3480-3498]:SwitchCase[3480-3498]"
    }, {
      "left" : "double value = n.getDouble();",
      "right" : "double value = n.getDouble();",
      "info" : "VariableDeclarationStatement[3507-3536]:VariableDeclarationStatement[3507-3536]"
    }, {
      "left" : "long longValue = (long) value;",
      "right" : "long longValue = (long) value;",
      "info" : "VariableDeclarationStatement[3545-3575]:VariableDeclarationStatement[3545-3575]"
    }, {
      "left" : "if (longValue == value)",
      "right" : "if (longValue == value)",
      "info" : "IfStatement[3624-3768]:IfStatement[3624-3768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3648-3702]:Block[3648-3702]"
    }, {
      "left" : "return Long.toString(longValue);",
      "right" : "return Long.toString(longValue);",
      "info" : "ReturnStatement[3660-3692]:ReturnStatement[3660-3692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3708-3768]:Block[3708-3768]"
    }, {
      "left" : "return Double.toString(n.getDouble());",
      "right" : "return Double.toString(n.getDouble());",
      "info" : "ReturnStatement[3720-3758]:ReturnStatement[3720-3758]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[3776-3793]:SwitchCase[3776-3793]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[3800-3816]:SwitchCase[3800-3816]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[3823-3839]:SwitchCase[3823-3839]"
    }, {
      "left" : "return Node.tokenToName(n.getType());",
      "right" : "return Node.tokenToName(n.getType());",
      "info" : "ReturnStatement[3848-3885]:ReturnStatement[3848-3885]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[3893-3909]:SwitchCase[3893-3909]"
    }, {
      "left" : "return \"undefined\";",
      "right" : "return \"undefined\";",
      "info" : "ReturnStatement[3918-3937]:ReturnStatement[3918-3937]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3948-3960]:ReturnStatement[3948-3960]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4639-4645]:Modifier[4639-4645]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[4646-4652]:SimpleType[4646-4652]"
    }, {
      "left" : "getFunctionName",
      "right" : "getFunctionName",
      "info" : "SimpleName[4653-4668]:SimpleName[4653-4668]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[4669-4675]:SingleVariableDeclaration[4669-4675]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[4677-4688]:SingleVariableDeclaration[4677-4688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4690-5210]:Block[4690-5210]"
    }, {
      "left" : "String name = n.getFirstChild().getString();",
      "right" : "String name = n.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[4696-4740]:VariableDeclarationStatement[4696-4740]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.NAME:\n        // var name = function() ...\n        // var name2 = function name1() ...\n        return parent.getString();\n\n      case Token.ASSIGN:\n        // qualified.name = function() ...\n        // qualified.name2 = function name1() ...\n        return parent.getFirstChild().getQualifiedName();\n\n      default:\n        // function name() ...\n        return name != null && name.length() != 0 ? name : null;\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.NAME:\n        // var name = function() ...\n        // var name2 = function name1() ...\n        return parent.getString();\n\n      case Token.ASSIGN:\n        // qualified.name = function() ...\n        // qualified.name2 = function name1() ...\n        return parent.getFirstChild().getQualifiedName();\n\n      default:\n        // function name() ...\n        return name != null && name.length() != 0 ? name : null;\n    }",
      "info" : "SwitchStatement[4745-5206]:SwitchStatement[4745-5206]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[4779-4795]:SwitchCase[4779-4795]"
    }, {
      "left" : "return parent.getString();",
      "right" : "return parent.getString();",
      "info" : "ReturnStatement[4885-4911]:ReturnStatement[4885-4911]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[4919-4937]:SwitchCase[4919-4937]"
    }, {
      "left" : "return parent.getFirstChild().getQualifiedName();",
      "right" : "return parent.getFirstChild().getQualifiedName();",
      "info" : "ReturnStatement[5039-5088]:ReturnStatement[5039-5088]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[5096-5104]:SwitchCase[5096-5104]"
    }, {
      "left" : "return name != null && name.length() != 0 ? name : null;",
      "right" : "return name != null && name.length() != 0 ? name : null;",
      "info" : "ReturnStatement[5144-5200]:ReturnStatement[5144-5200]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5275-5281]:Modifier[5275-5281]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5282-5289]:PrimitiveType[5282-5289]"
    }, {
      "left" : "isImmutableValue",
      "right" : "isImmutableValue",
      "info" : "SimpleName[5290-5306]:SimpleName[5290-5306]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[5307-5313]:SingleVariableDeclaration[5307-5313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5315-5928]:Block[5315-5928]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.VOID:\n        return true;\n      case Token.NEG:\n        return isImmutableValue(n.getFirstChild());\n      case Token.NAME:\n        String name = n.getString();\n        // We assume here that programs don't change the value of the keyword\n        // undefined to something other than the value undefined.\n        return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);\n    }",
      "right" : "switch (n.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.VOID:\n        return true;\n      case Token.NEG:\n        return isImmutableValue(n.getFirstChild());\n      case Token.NAME:\n        String name = n.getString();\n        // We assume here that programs don't change the value of the keyword\n        // undefined to something other than the value undefined.\n        return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);\n    }",
      "info" : "SwitchStatement[5321-5905]:SwitchStatement[5321-5905]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[5350-5368]:SwitchCase[5350-5368]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[5375-5393]:SwitchCase[5375-5393]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[5400-5416]:SwitchCase[5400-5416]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[5423-5439]:SwitchCase[5423-5439]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[5446-5463]:SwitchCase[5446-5463]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[5470-5486]:SwitchCase[5470-5486]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[5495-5507]:ReturnStatement[5495-5507]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[5514-5529]:SwitchCase[5514-5529]"
    }, {
      "left" : "return isImmutableValue(n.getFirstChild());",
      "right" : "return isImmutableValue(n.getFirstChild());",
      "info" : "ReturnStatement[5538-5581]:ReturnStatement[5538-5581]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[5588-5604]:SwitchCase[5588-5604]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[5613-5641]:VariableDeclarationStatement[5613-5641]"
    }, {
      "left" : "return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);",
      "right" : "return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);",
      "info" : "ReturnStatement[5794-5899]:ReturnStatement[5794-5899]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5911-5924]:ReturnStatement[5911-5924]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6192-6198]:Modifier[6192-6198]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6199-6206]:PrimitiveType[6199-6206]"
    }, {
      "left" : "isLiteralValue",
      "right" : "isLiteralValue",
      "info" : "SimpleName[6207-6221]:SimpleName[6207-6221]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[6222-6228]:SingleVariableDeclaration[6222-6228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6230-6734]:Block[6230-6734]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n        // Return true only if all children are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child)) {\n            return false;\n          }\n        }\n        return true;\n\n      default:\n        return isImmutableValue(n);\n    }",
      "right" : "switch (n.getType()) {\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n        // Return true only if all children are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child)) {\n            return false;\n          }\n        }\n        return true;\n\n      default:\n        return isImmutableValue(n);\n    }",
      "info" : "SwitchStatement[6306-6730]:SwitchStatement[6306-6730]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[6335-6355]:SwitchCase[6335-6355]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[6362-6383]:SwitchCase[6362-6383]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[6390-6408]:SwitchCase[6390-6408]"
    }, {
      "left" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
      "right" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
      "info" : "ForStatement[6472-6651]:ForStatement[6472-6651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6562-6651]:Block[6562-6651]"
    }, {
      "left" : "if (!isLiteralValue(child))",
      "right" : "if (!isLiteralValue(child))",
      "info" : "IfStatement[6574-6641]:IfStatement[6574-6641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6602-6641]:Block[6602-6641]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6616-6629]:ReturnStatement[6616-6629]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6660-6672]:ReturnStatement[6660-6672]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[6680-6688]:SwitchCase[6680-6688]"
    }, {
      "left" : "return isImmutableValue(n);",
      "right" : "return isImmutableValue(n);",
      "info" : "ReturnStatement[6697-6724]:ReturnStatement[6697-6724]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6925-6931]:Modifier[6925-6931]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6932-6939]:PrimitiveType[6932-6939]"
    }, {
      "left" : "isValidDefineValue",
      "right" : "isValidDefineValue",
      "info" : "SimpleName[6940-6958]:SimpleName[6940-6958]"
    }, {
      "left" : "Node val",
      "right" : "Node val",
      "info" : "SingleVariableDeclaration[6959-6967]:SingleVariableDeclaration[6959-6967]"
    }, {
      "left" : "Set<String> defines",
      "right" : "Set<String> defines",
      "info" : "SingleVariableDeclaration[6969-6988]:SingleVariableDeclaration[6969-6988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6990-7659]:Block[6990-7659]"
    }, {
      "left" : "switch (val.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      // Single operators are valid if the child is valid.\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.NOT:\n      case Token.NEG:\n        return isValidDefineValue(val.getFirstChild(), defines);\n\n      // Names are valid if and only if they are defines themselves.\n      case Token.NAME:\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getQualifiedName());\n        }\n    }",
      "right" : "switch (val.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      // Single operators are valid if the child is valid.\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.NOT:\n      case Token.NEG:\n        return isValidDefineValue(val.getFirstChild(), defines);\n\n      // Names are valid if and only if they are defines themselves.\n      case Token.NAME:\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getQualifiedName());\n        }\n    }",
      "info" : "SwitchStatement[6996-7637]:SwitchStatement[6996-7637]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[7027-7045]:SwitchCase[7027-7045]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[7052-7070]:SwitchCase[7052-7070]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[7077-7093]:SwitchCase[7077-7093]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[7100-7117]:SwitchCase[7100-7117]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7126-7138]:ReturnStatement[7126-7138]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[7205-7223]:SwitchCase[7205-7223]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[7230-7248]:SwitchCase[7230-7248]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[7255-7272]:SwitchCase[7255-7272]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[7279-7297]:SwitchCase[7279-7297]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[7304-7319]:SwitchCase[7304-7319]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[7326-7341]:SwitchCase[7326-7341]"
    }, {
      "left" : "return isValidDefineValue(val.getFirstChild(), defines);",
      "right" : "return isValidDefineValue(val.getFirstChild(), defines);",
      "info" : "ReturnStatement[7350-7406]:ReturnStatement[7350-7406]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[7483-7499]:SwitchCase[7483-7499]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[7506-7525]:SwitchCase[7506-7525]"
    }, {
      "left" : "if (val.isQualifiedName())",
      "right" : "if (val.isQualifiedName())",
      "info" : "IfStatement[7534-7631]:IfStatement[7534-7631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7561-7631]:Block[7561-7631]"
    }, {
      "left" : "return defines.contains(val.getQualifiedName());",
      "right" : "return defines.contains(val.getQualifiedName());",
      "info" : "ReturnStatement[7573-7621]:ReturnStatement[7573-7621]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7642-7655]:ReturnStatement[7642-7655]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7765-7771]:Modifier[7765-7771]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7772-7779]:PrimitiveType[7772-7779]"
    }, {
      "left" : "isEmptyBlock",
      "right" : "isEmptyBlock",
      "info" : "SimpleName[7780-7792]:SimpleName[7780-7792]"
    }, {
      "left" : "Node block",
      "right" : "Node block",
      "info" : "SingleVariableDeclaration[7793-7803]:SingleVariableDeclaration[7793-7803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7805-8043]:Block[7805-8043]"
    }, {
      "left" : "if (block.getType() != Token.BLOCK)",
      "right" : "if (block.getType() != Token.BLOCK)",
      "info" : "IfStatement[7811-7874]:IfStatement[7811-7874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7847-7874]:Block[7847-7874]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7855-7868]:ReturnStatement[7855-7868]"
    }, {
      "left" : "for (Node n = block.getFirstChild(); n != null; n = n.getNext())",
      "right" : "for (Node n = block.getFirstChild(); n != null; n = n.getNext())",
      "info" : "ForStatement[7880-8022]:ForStatement[7880-8022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7945-8022]:Block[7945-8022]"
    }, {
      "left" : "if (n.getType() != Token.EMPTY)",
      "right" : "if (n.getType() != Token.EMPTY)",
      "info" : "IfStatement[7953-8016]:IfStatement[7953-8016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7985-8016]:Block[7985-8016]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7995-8008]:ReturnStatement[7995-8008]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8027-8039]:ReturnStatement[8027-8039]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8221-8227]:Modifier[8221-8227]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8228-8235]:PrimitiveType[8228-8235]"
    }, {
      "left" : "isSimpleOperatorType",
      "right" : "isSimpleOperatorType",
      "info" : "SimpleName[8236-8256]:SimpleName[8236-8256]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[8257-8265]:SingleVariableDeclaration[8257-8265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8267-9024]:Block[8267-9024]"
    }, {
      "left" : "switch (type) {\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GT:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.NOT:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.POS:\n      case Token.NEG:\n      case Token.URSH:\n        return true;\n\n      default:\n        return false;\n    }",
      "right" : "switch (type) {\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GT:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.NOT:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.POS:\n      case Token.NEG:\n      case Token.URSH:\n        return true;\n\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[8273-9020]:SwitchStatement[8273-9020]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[8295-8310]:SwitchCase[8295-8310]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[8317-8335]:SwitchCase[8317-8335]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[8342-8360]:SwitchCase[8342-8360]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[8367-8384]:SwitchCase[8367-8384]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[8391-8409]:SwitchCase[8391-8409]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[8416-8433]:SwitchCase[8416-8433]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[8440-8455]:SwitchCase[8440-8455]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[8462-8476]:SwitchCase[8462-8476]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[8483-8497]:SwitchCase[8483-8497]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[8504-8523]:SwitchCase[8504-8523]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[8530-8549]:SwitchCase[8530-8549]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[8556-8570]:SwitchCase[8556-8570]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[8577-8599]:SwitchCase[8577-8599]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[8606-8620]:SwitchCase[8606-8620]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[8627-8642]:SwitchCase[8627-8642]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[8649-8663]:SwitchCase[8649-8663]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[8670-8685]:SwitchCase[8670-8685]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[8692-8707]:SwitchCase[8692-8707]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[8714-8728]:SwitchCase[8714-8728]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[8735-8750]:SwitchCase[8735-8750]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[8757-8772]:SwitchCase[8757-8772]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[8779-8795]:SwitchCase[8779-8795]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[8802-8818]:SwitchCase[8802-8818]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[8825-8840]:SwitchCase[8825-8840]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[8847-8865]:SwitchCase[8847-8865]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[8872-8888]:SwitchCase[8872-8888]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[8895-8910]:SwitchCase[8895-8910]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[8917-8932]:SwitchCase[8917-8932]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[8939-8955]:SwitchCase[8939-8955]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8964-8976]:ReturnStatement[8964-8976]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[8984-8992]:SwitchCase[8984-8992]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9001-9014]:ReturnStatement[9001-9014]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9185-9191]:Modifier[9185-9191]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9192-9198]:Modifier[9192-9198]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[9199-9203]:SimpleType[9199-9203]"
    }, {
      "left" : "newExpr",
      "right" : "newExpr",
      "info" : "SimpleName[9204-9211]:SimpleName[9204-9211]"
    }, {
      "left" : "Node child",
      "right" : "Node child",
      "info" : "SingleVariableDeclaration[9212-9222]:SingleVariableDeclaration[9212-9222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9224-9276]:Block[9224-9276]"
    }, {
      "left" : "return new Node(Token.EXPR_RESULT, child);",
      "right" : "return new Node(Token.EXPR_RESULT, child);",
      "info" : "ReturnStatement[9230-9272]:ReturnStatement[9230-9272]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9450-9456]:Modifier[9450-9456]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9457-9464]:PrimitiveType[9457-9464]"
    }, {
      "left" : "mayEffectMutableState",
      "right" : "mayEffectMutableState",
      "info" : "SimpleName[9465-9486]:SimpleName[9465-9486]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[9487-9493]:SingleVariableDeclaration[9487-9493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9495-9547]:Block[9495-9547]"
    }, {
      "left" : "return checkForStateChangeHelper(n, true);",
      "right" : "return checkForStateChangeHelper(n, true);",
      "info" : "ReturnStatement[9501-9543]:ReturnStatement[9501-9543]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9636-9642]:Modifier[9636-9642]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9643-9650]:PrimitiveType[9643-9650]"
    }, {
      "left" : "mayHaveSideEffects",
      "right" : "mayHaveSideEffects",
      "info" : "SimpleName[9651-9669]:SimpleName[9651-9669]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[9670-9676]:SingleVariableDeclaration[9670-9676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9678-9731]:Block[9678-9731]"
    }, {
      "left" : "return checkForStateChangeHelper(n, false);",
      "right" : "return checkForStateChangeHelper(n, false);",
      "info" : "ReturnStatement[9684-9727]:ReturnStatement[9684-9727]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10009-10016]:Modifier[10009-10016]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10017-10023]:Modifier[10017-10023]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10024-10031]:PrimitiveType[10024-10031]"
    }, {
      "left" : "checkForStateChangeHelper",
      "right" : "checkForStateChangeHelper",
      "info" : "SimpleName[10032-10057]:SimpleName[10032-10057]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[10065-10071]:SingleVariableDeclaration[10065-10071]"
    }, {
      "left" : "boolean checkForNewObjects",
      "right" : "boolean checkForNewObjects",
      "info" : "SingleVariableDeclaration[10073-10099]:SingleVariableDeclaration[10073-10099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10101-13820]:Block[10101-13820]"
    }, {
      "left" : "switch (n.getType()) {\n      // other side-effect free statements and expressions\n      case Token.AND:\n      case Token.BLOCK:\n      case Token.EXPR_RESULT:\n      case Token.HOOK:\n      case Token.IF:\n      case Token.IN:\n      case Token.LP:\n      case Token.NUMBER:\n      case Token.OR:\n      case Token.THIS:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.STRING:\n      case Token.SWITCH:\n      case Token.TRY:\n      case Token.EMPTY:\n        break;\n\n      // Throws are by definition side effects\n      case Token.THROW:\n        return true;\n\n      case Token.OBJECTLIT:\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n        if (checkForNewObjects) {\n          return true;\n        }\n        break;\n\n      case Token.VAR:    // empty var statement (no declaration)\n      case Token.NAME:   // variable by itself\n        if (n.getFirstChild() != null)\n          return true;\n\n        break;\n\n      case Token.FUNCTION:\n        // Anonymous functions don't have side-effects, but named ones\n        // change the namespace. Therefore, we check if the function has\n        // a name. Either way, we don't need to check the children, since\n        // they aren't executed at declaration time.\n        //\n        return !isFunctionAnonymous(n);\n\n      case Token.NEW:\n        {\n          if (checkForNewObjects) {\n            return true;\n          }\n\n          // calls to constructors that have no side effects have the\n          // no side effect property set.\n          if (n.isNoSideEffectsCall()) {\n            break;\n          }\n\n          // certain constructors are certified side effect free\n          Node constructor = n.getFirstChild();\n          if (Token.NAME == constructor.getType()) {\n            String className = constructor.getString();\n            if (CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(className)) {\n              // loop below will see if the constructor parameters have\n              // side-effects\n              break;\n            }\n          } else {\n            // the constructor could also be an expression like\n            // new (useArray ? Object : Array)();\n          }\n        }\n        return true;\n\n      case Token.CALL:\n        // calls to functions that have no side effects have the no\n        // side effect property set.\n        if (n.isNoSideEffectsCall()) {\n          // loop below will see if the function parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      default:\n        if (isSimpleOperatorType(n.getType()))\n          break;\n\n        if (isAssignmentOp(n)) {\n          // Assignments will have side effects if\n          // a) The RHS has side effects, or\n          // b) The LHS has side effects, or\n          // c) A name on the LHS will exist beyond the life of this statement.\n          if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects)) {\n            return true;\n          }\n\n          Node current = n.getFirstChild();\n          for (;\n               current.getType() == Token.GETPROP ||\n               current.getType() == Token.GETELEM;\n               current = current.getFirstChild()) { }\n\n          return !(isLiteralValue(current) ||\n              current.getType() == Token.FUNCTION);\n        }\n\n        return true;\n    }",
      "right" : "switch (n.getType()) {\n      // other side-effect free statements and expressions\n      case Token.AND:\n      case Token.BLOCK:\n      case Token.EXPR_RESULT:\n      case Token.HOOK:\n      case Token.IF:\n      case Token.IN:\n      case Token.LP:\n      case Token.NUMBER:\n      case Token.OR:\n      case Token.THIS:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.STRING:\n      case Token.SWITCH:\n      case Token.TRY:\n      case Token.EMPTY:\n        break;\n\n      // Throws are by definition side effects\n      case Token.THROW:\n        return true;\n\n      case Token.OBJECTLIT:\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n        if (checkForNewObjects) {\n          return true;\n        }\n        break;\n\n      case Token.VAR:    // empty var statement (no declaration)\n      case Token.NAME:   // variable by itself\n        if (n.getFirstChild() != null)\n          return true;\n\n        break;\n\n      case Token.FUNCTION:\n        // Anonymous functions don't have side-effects, but named ones\n        // change the namespace. Therefore, we check if the function has\n        // a name. Either way, we don't need to check the children, since\n        // they aren't executed at declaration time.\n        //\n        return !isFunctionAnonymous(n);\n\n      case Token.NEW:\n        {\n          if (checkForNewObjects) {\n            return true;\n          }\n\n          // calls to constructors that have no side effects have the\n          // no side effect property set.\n          if (n.isNoSideEffectsCall()) {\n            break;\n          }\n\n          // certain constructors are certified side effect free\n          Node constructor = n.getFirstChild();\n          if (Token.NAME == constructor.getType()) {\n            String className = constructor.getString();\n            if (CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(className)) {\n              // loop below will see if the constructor parameters have\n              // side-effects\n              break;\n            }\n          } else {\n            // the constructor could also be an expression like\n            // new (useArray ? Object : Array)();\n          }\n        }\n        return true;\n\n      case Token.CALL:\n        // calls to functions that have no side effects have the no\n        // side effect property set.\n        if (n.isNoSideEffectsCall()) {\n          // loop below will see if the function parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      default:\n        if (isSimpleOperatorType(n.getType()))\n          break;\n\n        if (isAssignmentOp(n)) {\n          // Assignments will have side effects if\n          // a) The RHS has side effects, or\n          // b) The LHS has side effects, or\n          // c) A name on the LHS will exist beyond the life of this statement.\n          if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects)) {\n            return true;\n          }\n\n          Node current = n.getFirstChild();\n          for (;\n               current.getType() == Token.GETPROP ||\n               current.getType() == Token.GETELEM;\n               current = current.getFirstChild()) { }\n\n          return !(isLiteralValue(current) ||\n              current.getType() == Token.FUNCTION);\n        }\n\n        return true;\n    }",
      "info" : "SwitchStatement[10205-13632]:SwitchStatement[10205-13632]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[10293-10308]:SwitchCase[10293-10308]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[10315-10332]:SwitchCase[10315-10332]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[10339-10362]:SwitchCase[10339-10362]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[10369-10385]:SwitchCase[10369-10385]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[10392-10406]:SwitchCase[10392-10406]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[10413-10427]:SwitchCase[10413-10427]"
    }, {
      "left" : "case Token.LP:",
      "right" : "case Token.LP:",
      "info" : "SwitchCase[10434-10448]:SwitchCase[10434-10448]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[10455-10473]:SwitchCase[10455-10473]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[10480-10494]:SwitchCase[10480-10494]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[10501-10517]:SwitchCase[10501-10517]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[10524-10540]:SwitchCase[10524-10540]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[10547-10564]:SwitchCase[10547-10564]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[10571-10587]:SwitchCase[10571-10587]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[10594-10612]:SwitchCase[10594-10612]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[10619-10637]:SwitchCase[10619-10637]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[10644-10659]:SwitchCase[10644-10659]"
    }, {
      "left" : "case Token.EMPTY:",
      "right" : "case Token.EMPTY:",
      "info" : "SwitchCase[10666-10683]:SwitchCase[10666-10683]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10692-10698]:BreakStatement[10692-10698]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[10753-10770]:SwitchCase[10753-10770]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[10779-10791]:ReturnStatement[10779-10791]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[10799-10820]:SwitchCase[10799-10820]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[10827-10847]:SwitchCase[10827-10847]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[10854-10872]:SwitchCase[10854-10872]"
    }, {
      "left" : "if (checkForNewObjects)",
      "right" : "if (checkForNewObjects)",
      "info" : "IfStatement[10881-10939]:IfStatement[10881-10939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10905-10939]:Block[10905-10939]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[10917-10929]:ReturnStatement[10917-10929]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10948-10954]:BreakStatement[10948-10954]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[10962-10977]:SwitchCase[10962-10977]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[11027-11043]:SwitchCase[11027-11043]"
    }, {
      "left" : "if (n.getFirstChild() != null)",
      "right" : "if (n.getFirstChild() != null)",
      "info" : "IfStatement[11076-11129]:IfStatement[11076-11129]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11117-11129]:ReturnStatement[11117-11129]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11139-11145]:BreakStatement[11139-11145]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[11153-11173]:SwitchCase[11153-11173]"
    }, {
      "left" : "return !isFunctionAnonymous(n);",
      "right" : "return !isFunctionAnonymous(n);",
      "info" : "ReturnStatement[11464-11495]:ReturnStatement[11464-11495]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[11503-11518]:SwitchCase[11503-11518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11527-12374]:Block[11527-12374]"
    }, {
      "left" : "if (checkForNewObjects)",
      "right" : "if (checkForNewObjects)",
      "info" : "IfStatement[11539-11601]:IfStatement[11539-11601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11563-11601]:Block[11563-11601]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11577-11589]:ReturnStatement[11577-11589]"
    }, {
      "left" : "if (n.isNoSideEffectsCall())",
      "right" : "if (n.isNoSideEffectsCall())",
      "info" : "IfStatement[11725-11786]:IfStatement[11725-11786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11754-11786]:Block[11754-11786]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11768-11774]:BreakStatement[11768-11774]"
    }, {
      "left" : "Node constructor = n.getFirstChild();",
      "right" : "Node constructor = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[11863-11900]:VariableDeclarationStatement[11863-11900]"
    }, {
      "left" : "if (Token.NAME == constructor.getType())",
      "right" : "if (Token.NAME == constructor.getType())",
      "info" : "IfStatement[11911-12364]:IfStatement[11911-12364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11952-12231]:Block[11952-12231]"
    }, {
      "left" : "String className = constructor.getString();",
      "right" : "String className = constructor.getString();",
      "info" : "VariableDeclarationStatement[11966-12009]:VariableDeclarationStatement[11966-12009]"
    }, {
      "left" : "if (CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(className))",
      "right" : "if (CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(className))",
      "info" : "IfStatement[12022-12219]:IfStatement[12022-12219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12081-12219]:Block[12081-12219]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12199-12205]:BreakStatement[12199-12205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12237-12364]:Block[12237-12364]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[12383-12395]:ReturnStatement[12383-12395]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[12403-12419]:SwitchCase[12403-12419]"
    }, {
      "left" : "if (n.isNoSideEffectsCall())",
      "right" : "if (n.isNoSideEffectsCall())",
      "info" : "IfStatement[12533-12681]:IfStatement[12533-12681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12562-12681]:Block[12562-12681]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12665-12671]:BreakStatement[12665-12671]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[12690-12702]:ReturnStatement[12690-12702]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[12710-12718]:SwitchCase[12710-12718]"
    }, {
      "left" : "if (isSimpleOperatorType(n.getType()))",
      "right" : "if (isSimpleOperatorType(n.getType()))",
      "info" : "IfStatement[12727-12782]:IfStatement[12727-12782]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12776-12782]:BreakStatement[12776-12782]"
    }, {
      "left" : "if (isAssignmentOp(n))",
      "right" : "if (isAssignmentOp(n))",
      "info" : "IfStatement[12792-13604]:IfStatement[12792-13604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12815-13604]:Block[12815-13604]"
    }, {
      "left" : "if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects))",
      "right" : "if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects))",
      "info" : "IfStatement[13048-13275]:IfStatement[13048-13275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13237-13275]:Block[13237-13275]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[13251-13263]:ReturnStatement[13251-13263]"
    }, {
      "left" : "Node current = n.getFirstChild();",
      "right" : "Node current = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[13287-13320]:VariableDeclarationStatement[13287-13320]"
    }, {
      "left" : "for (;\n               current.getType() == Token.GETPROP ||\n               current.getType() == Token.GETELEM;\n               current = current.getFirstChild())",
      "right" : "for (;\n               current.getType() == Token.GETPROP ||\n               current.getType() == Token.GETELEM;\n               current = current.getFirstChild())",
      "info" : "ForStatement[13331-13495]:ForStatement[13331-13495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13492-13495]:Block[13492-13495]"
    }, {
      "left" : "return !(isLiteralValue(current) ||\n              current.getType() == Token.FUNCTION);",
      "right" : "return !(isLiteralValue(current) ||\n              current.getType() == Token.FUNCTION);",
      "info" : "ReturnStatement[13507-13594]:ReturnStatement[13507-13594]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[13614-13626]:ReturnStatement[13614-13626]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[13638-13797]:ForStatement[13638-13797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13699-13797]:Block[13699-13797]"
    }, {
      "left" : "if (checkForStateChangeHelper(c, checkForNewObjects))",
      "right" : "if (checkForStateChangeHelper(c, checkForNewObjects))",
      "info" : "IfStatement[13707-13791]:IfStatement[13707-13791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13761-13791]:Block[13761-13791]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[13771-13783]:ReturnStatement[13771-13783]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13803-13816]:ReturnStatement[13803-13816]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[13938-13944]:Modifier[13938-13944]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[13945-13952]:PrimitiveType[13945-13952]"
    }, {
      "left" : "constructorCallHasSideEffects",
      "right" : "constructorCallHasSideEffects",
      "info" : "SimpleName[13953-13982]:SimpleName[13953-13982]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[13983-13996]:SingleVariableDeclaration[13983-13996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13998-14426]:Block[13998-14426]"
    }, {
      "left" : "Preconditions.checkArgument(\n        callNode.getType() == Token.NEW,\n        \"Expected NEW node, got \" + Token.name(callNode.getType()));",
      "right" : "Preconditions.checkArgument(\n        callNode.getType() == Token.NEW,\n        \"Expected NEW node, got \" + Token.name(callNode.getType()));",
      "info" : "ExpressionStatement[14004-14142]:ExpressionStatement[14004-14142]"
    }, {
      "left" : "if (callNode.isNoSideEffectsCall())",
      "right" : "if (callNode.isNoSideEffectsCall())",
      "info" : "IfStatement[14148-14211]:IfStatement[14148-14211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14184-14211]:Block[14184-14211]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14192-14205]:ReturnStatement[14192-14205]"
    }, {
      "left" : "Node nameNode = callNode.getFirstChild();",
      "right" : "Node nameNode = callNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[14217-14258]:VariableDeclarationStatement[14217-14258]"
    }, {
      "left" : "if (nameNode.getType() == Token.NAME &&\n        CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))",
      "right" : "if (nameNode.getType() == Token.NAME &&\n        CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))",
      "info" : "IfStatement[14263-14404]:IfStatement[14263-14404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14377-14404]:Block[14377-14404]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14385-14398]:ReturnStatement[14385-14398]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[14410-14422]:ReturnStatement[14410-14422]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14552-14558]:Modifier[14552-14558]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[14559-14566]:PrimitiveType[14559-14566]"
    }, {
      "left" : "functionCallHasSideEffects",
      "right" : "functionCallHasSideEffects",
      "info" : "SimpleName[14567-14593]:SimpleName[14567-14593]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[14594-14607]:SingleVariableDeclaration[14594-14607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14609-15415]:Block[14609-15415]"
    }, {
      "left" : "Preconditions.checkArgument(\n        callNode.getType() == Token.CALL,\n        \"Expected CALL node, got \" + Token.name(callNode.getType()));",
      "right" : "Preconditions.checkArgument(\n        callNode.getType() == Token.CALL,\n        \"Expected CALL node, got \" + Token.name(callNode.getType()));",
      "info" : "ExpressionStatement[14615-14755]:ExpressionStatement[14615-14755]"
    }, {
      "left" : "if (callNode.isNoSideEffectsCall())",
      "right" : "if (callNode.isNoSideEffectsCall())",
      "info" : "IfStatement[14761-14824]:IfStatement[14761-14824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14797-14824]:Block[14797-14824]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14805-14818]:ReturnStatement[14805-14818]"
    }, {
      "left" : "Node nameNode = callNode.getFirstChild();",
      "right" : "Node nameNode = callNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[14830-14871]:VariableDeclarationStatement[14830-14871]"
    }, {
      "left" : "if (nameNode.getType() == Token.NAME)",
      "right" : "if (nameNode.getType() == Token.NAME)",
      "info" : "IfStatement[14925-15077]:IfStatement[14925-15077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14963-15077]:Block[14963-15077]"
    }, {
      "left" : "String name = nameNode.getString();",
      "right" : "String name = nameNode.getString();",
      "info" : "VariableDeclarationStatement[14971-15006]:VariableDeclarationStatement[14971-15006]"
    }, {
      "left" : "if (name.equals(\"String\"))",
      "right" : "if (name.equals(\"String\"))",
      "info" : "IfStatement[15013-15071]:IfStatement[15013-15071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15040-15071]:Block[15040-15071]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15050-15063]:ReturnStatement[15050-15063]"
    }, {
      "left" : "if (nameNode.getType() == Token.GETPROP &&\n        nameNode.getFirstChild().getType() == Token.NAME)",
      "right" : "if (nameNode.getType() == Token.GETPROP &&\n        nameNode.getFirstChild().getType() == Token.NAME)",
      "info" : "IfStatement[15146-15393]:IfStatement[15146-15393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15247-15393]:Block[15247-15393]"
    }, {
      "left" : "String namespaceName = nameNode.getFirstChild().getString();",
      "right" : "String namespaceName = nameNode.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[15255-15315]:VariableDeclarationStatement[15255-15315]"
    }, {
      "left" : "if (namespaceName.equals(\"Math\"))",
      "right" : "if (namespaceName.equals(\"Math\"))",
      "info" : "IfStatement[15322-15387]:IfStatement[15322-15387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15356-15387]:Block[15356-15387]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15366-15379]:ReturnStatement[15366-15379]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15399-15411]:ReturnStatement[15399-15411]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15688-15694]:Modifier[15688-15694]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[15695-15702]:PrimitiveType[15695-15702]"
    }, {
      "left" : "nodeTypeMayHaveSideEffects",
      "right" : "nodeTypeMayHaveSideEffects",
      "info" : "SimpleName[15703-15729]:SimpleName[15703-15729]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[15730-15736]:SingleVariableDeclaration[15730-15736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15738-16125]:Block[15738-16125]"
    }, {
      "left" : "if (NodeUtil.isAssignmentOp(n))",
      "right" : "if (NodeUtil.isAssignmentOp(n))",
      "info" : "IfStatement[15744-15802]:IfStatement[15744-15802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15776-15802]:Block[15776-15802]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15784-15796]:ReturnStatement[15784-15796]"
    }, {
      "left" : "switch(n.getType()) {\n      case Token.CALL:\n      case Token.DELPROP:\n      case Token.NEW:\n      case Token.DEC:\n      case Token.INC:\n      case Token.THROW:\n        return true;\n      case Token.NAME:\n        // A variable definition.\n        return n.hasChildren();\n      default:\n        return false;\n    }",
      "right" : "switch(n.getType()) {\n      case Token.CALL:\n      case Token.DELPROP:\n      case Token.NEW:\n      case Token.DEC:\n      case Token.INC:\n      case Token.THROW:\n        return true;\n      case Token.NAME:\n        // A variable definition.\n        return n.hasChildren();\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[15808-16121]:SwitchStatement[15808-16121]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[15836-15852]:SwitchCase[15836-15852]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[15859-15878]:SwitchCase[15859-15878]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[15885-15900]:SwitchCase[15885-15900]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[15907-15922]:SwitchCase[15907-15922]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[15929-15944]:SwitchCase[15929-15944]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[15951-15968]:SwitchCase[15951-15968]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15977-15989]:ReturnStatement[15977-15989]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[15996-16012]:SwitchCase[15996-16012]"
    }, {
      "left" : "return n.hasChildren();",
      "right" : "return n.hasChildren();",
      "info" : "ReturnStatement[16055-16078]:ReturnStatement[16055-16078]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[16085-16093]:SwitchCase[16085-16093]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16102-16115]:ReturnStatement[16102-16115]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[16229-16235]:Modifier[16229-16235]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[16236-16243]:PrimitiveType[16236-16243]"
    }, {
      "left" : "canBeSideEffected",
      "right" : "canBeSideEffected",
      "info" : "SimpleName[16244-16261]:SimpleName[16244-16261]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[16262-16268]:SingleVariableDeclaration[16262-16268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16270-16369]:Block[16270-16369]"
    }, {
      "left" : "Set<String> emptySet = Collections.emptySet();",
      "right" : "Set<String> emptySet = Collections.emptySet();",
      "info" : "VariableDeclarationStatement[16276-16322]:VariableDeclarationStatement[16276-16322]"
    }, {
      "left" : "return canBeSideEffected(n, emptySet);",
      "right" : "return canBeSideEffected(n, emptySet);",
      "info" : "ReturnStatement[16327-16365]:ReturnStatement[16327-16365]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[16620-16626]:Modifier[16620-16626]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[16627-16634]:PrimitiveType[16627-16634]"
    }, {
      "left" : "canBeSideEffected",
      "right" : "canBeSideEffected",
      "info" : "SimpleName[16635-16652]:SimpleName[16635-16652]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[16653-16659]:SingleVariableDeclaration[16653-16659]"
    }, {
      "left" : "Set<String> knownConstants",
      "right" : "Set<String> knownConstants",
      "info" : "SingleVariableDeclaration[16661-16687]:SingleVariableDeclaration[16661-16687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16689-17478]:Block[16689-17478]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.CALL:\n      case Token.NEW:\n        // Function calls or constructor can reference changed values.\n        // TODO(johnlenz): Add some mechanism for determining that functions\n        // are unaffected by side effects.\n        return true;\n      case Token.NAME:\n        // Non-constant names values may have been changed.\n        return !NodeUtil.isConstantName(n)\n            && !knownConstants.contains(n.getString());\n\n      // Properties on constant NAMEs can still be side-effected.\n      case Token.GETPROP:\n      case Token.GETELEM:\n        return true;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.CALL:\n      case Token.NEW:\n        // Function calls or constructor can reference changed values.\n        // TODO(johnlenz): Add some mechanism for determining that functions\n        // are unaffected by side effects.\n        return true;\n      case Token.NAME:\n        // Non-constant names values may have been changed.\n        return !NodeUtil.isConstantName(n)\n            && !knownConstants.contains(n.getString());\n\n      // Properties on constant NAMEs can still be side-effected.\n      case Token.GETPROP:\n      case Token.GETELEM:\n        return true;\n    }",
      "info" : "SwitchStatement[16695-17302]:SwitchStatement[16695-17302]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[16724-16740]:SwitchCase[16724-16740]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[16747-16762]:SwitchCase[16747-16762]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[16962-16974]:ReturnStatement[16962-16974]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[16981-16997]:SwitchCase[16981-16997]"
    }, {
      "left" : "return !NodeUtil.isConstantName(n)\n            && !knownConstants.contains(n.getString());",
      "right" : "return !NodeUtil.isConstantName(n)\n            && !knownConstants.contains(n.getString());",
      "info" : "ReturnStatement[17066-17156]:ReturnStatement[17066-17156]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[17230-17249]:SwitchCase[17230-17249]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[17256-17275]:SwitchCase[17256-17275]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[17284-17296]:ReturnStatement[17284-17296]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[17308-17455]:ForStatement[17308-17455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17369-17455]:Block[17369-17455]"
    }, {
      "left" : "if (canBeSideEffected(c, knownConstants))",
      "right" : "if (canBeSideEffected(c, knownConstants))",
      "info" : "IfStatement[17377-17449]:IfStatement[17377-17449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17419-17449]:Block[17419-17449]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[17429-17441]:ReturnStatement[17429-17441]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17461-17474]:ReturnStatement[17461-17474]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[17915-17921]:Modifier[17915-17921]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[17922-17925]:PrimitiveType[17922-17925]"
    }, {
      "left" : "precedence",
      "right" : "precedence",
      "info" : "SimpleName[17926-17936]:SimpleName[17926-17936]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[17937-17945]:SingleVariableDeclaration[17937-17945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17947-19970]:Block[17947-19970]"
    }, {
      "left" : "switch (type) {\n      case Token.COMMA:  return 0;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN: return 1;\n      case Token.HOOK:   return 2;  // ?: operator\n      case Token.OR:     return 3;\n      case Token.AND:    return 4;\n      case Token.BITOR:  return 5;\n      case Token.BITXOR: return 6;\n      case Token.BITAND: return 7;\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:   return 8;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:     return 9;\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:   return 10;\n      case Token.SUB:\n      case Token.ADD:    return 11;\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:    return 12;\n      case Token.INC:\n      case Token.DEC:\n      case Token.NEW:\n      case Token.DELPROP:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG:    return 13;\n\n      case Token.ARRAYLIT:\n      case Token.CALL:\n      case Token.EMPTY:\n      case Token.FALSE:\n      case Token.FUNCTION:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GET_REF:\n      case Token.IF:\n      case Token.LP:\n      case Token.NAME:\n      case Token.NULL:\n      case Token.NUMBER:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n      case Token.RETURN:\n      case Token.STRING:\n      case Token.THIS:\n      case Token.TRUE:\n        return 15;\n\n      default: throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");\n    }",
      "right" : "switch (type) {\n      case Token.COMMA:  return 0;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN: return 1;\n      case Token.HOOK:   return 2;  // ?: operator\n      case Token.OR:     return 3;\n      case Token.AND:    return 4;\n      case Token.BITOR:  return 5;\n      case Token.BITXOR: return 6;\n      case Token.BITAND: return 7;\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:   return 8;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:     return 9;\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:   return 10;\n      case Token.SUB:\n      case Token.ADD:    return 11;\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:    return 12;\n      case Token.INC:\n      case Token.DEC:\n      case Token.NEW:\n      case Token.DELPROP:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG:    return 13;\n\n      case Token.ARRAYLIT:\n      case Token.CALL:\n      case Token.EMPTY:\n      case Token.FALSE:\n      case Token.FUNCTION:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GET_REF:\n      case Token.IF:\n      case Token.LP:\n      case Token.NAME:\n      case Token.NULL:\n      case Token.NUMBER:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n      case Token.RETURN:\n      case Token.STRING:\n      case Token.THIS:\n      case Token.TRUE:\n        return 15;\n\n      default: throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");\n    }",
      "info" : "SwitchStatement[17953-19966]:SwitchStatement[17953-19966]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[17975-17992]:SwitchCase[17975-17992]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[17994-18003]:ReturnStatement[17994-18003]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[18010-18034]:SwitchCase[18010-18034]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[18041-18066]:SwitchCase[18041-18066]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[18073-18098]:SwitchCase[18073-18098]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[18105-18127]:SwitchCase[18105-18127]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[18134-18156]:SwitchCase[18134-18156]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[18163-18186]:SwitchCase[18163-18186]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[18193-18215]:SwitchCase[18193-18215]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[18222-18244]:SwitchCase[18222-18244]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[18251-18273]:SwitchCase[18251-18273]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[18280-18302]:SwitchCase[18280-18302]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[18309-18331]:SwitchCase[18309-18331]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[18338-18356]:SwitchCase[18338-18356]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[18357-18366]:ReturnStatement[18357-18366]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[18373-18389]:SwitchCase[18373-18389]"
    }, {
      "left" : "return 2;",
      "right" : "return 2;",
      "info" : "ReturnStatement[18392-18401]:ReturnStatement[18392-18401]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[18424-18438]:SwitchCase[18424-18438]"
    }, {
      "left" : "return 3;",
      "right" : "return 3;",
      "info" : "ReturnStatement[18443-18452]:ReturnStatement[18443-18452]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[18459-18474]:SwitchCase[18459-18474]"
    }, {
      "left" : "return 4;",
      "right" : "return 4;",
      "info" : "ReturnStatement[18478-18487]:ReturnStatement[18478-18487]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[18494-18511]:SwitchCase[18494-18511]"
    }, {
      "left" : "return 5;",
      "right" : "return 5;",
      "info" : "ReturnStatement[18513-18522]:ReturnStatement[18513-18522]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[18529-18547]:SwitchCase[18529-18547]"
    }, {
      "left" : "return 6;",
      "right" : "return 6;",
      "info" : "ReturnStatement[18548-18557]:ReturnStatement[18548-18557]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[18564-18582]:SwitchCase[18564-18582]"
    }, {
      "left" : "return 7;",
      "right" : "return 7;",
      "info" : "ReturnStatement[18583-18592]:ReturnStatement[18583-18592]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[18599-18613]:SwitchCase[18599-18613]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[18620-18634]:SwitchCase[18620-18634]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[18641-18657]:SwitchCase[18641-18657]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[18664-18680]:SwitchCase[18664-18680]"
    }, {
      "left" : "return 8;",
      "right" : "return 8;",
      "info" : "ReturnStatement[18683-18692]:ReturnStatement[18683-18692]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[18699-18713]:SwitchCase[18699-18713]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[18720-18734]:SwitchCase[18720-18734]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[18741-18755]:SwitchCase[18741-18755]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[18762-18776]:SwitchCase[18762-18776]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[18783-18805]:SwitchCase[18783-18805]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[18812-18826]:SwitchCase[18812-18826]"
    }, {
      "left" : "return 9;",
      "right" : "return 9;",
      "info" : "ReturnStatement[18831-18840]:ReturnStatement[18831-18840]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[18847-18862]:SwitchCase[18847-18862]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[18869-18884]:SwitchCase[18869-18884]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[18891-18907]:SwitchCase[18891-18907]"
    }, {
      "left" : "return 10;",
      "right" : "return 10;",
      "info" : "ReturnStatement[18910-18920]:ReturnStatement[18910-18920]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[18927-18942]:SwitchCase[18927-18942]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[18949-18964]:SwitchCase[18949-18964]"
    }, {
      "left" : "return 11;",
      "right" : "return 11;",
      "info" : "ReturnStatement[18968-18978]:ReturnStatement[18968-18978]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[18985-19000]:SwitchCase[18985-19000]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[19007-19022]:SwitchCase[19007-19022]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[19029-19044]:SwitchCase[19029-19044]"
    }, {
      "left" : "return 12;",
      "right" : "return 12;",
      "info" : "ReturnStatement[19048-19058]:ReturnStatement[19048-19058]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[19065-19080]:SwitchCase[19065-19080]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[19087-19102]:SwitchCase[19087-19102]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[19109-19124]:SwitchCase[19109-19124]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[19131-19150]:SwitchCase[19131-19150]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[19157-19175]:SwitchCase[19157-19175]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[19182-19198]:SwitchCase[19182-19198]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[19205-19220]:SwitchCase[19205-19220]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[19227-19245]:SwitchCase[19227-19245]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[19252-19267]:SwitchCase[19252-19267]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[19274-19289]:SwitchCase[19274-19289]"
    }, {
      "left" : "return 13;",
      "right" : "return 13;",
      "info" : "ReturnStatement[19293-19303]:ReturnStatement[19293-19303]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[19311-19331]:SwitchCase[19311-19331]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[19338-19354]:SwitchCase[19338-19354]"
    }, {
      "left" : "case Token.EMPTY:",
      "right" : "case Token.EMPTY:",
      "info" : "SwitchCase[19361-19378]:SwitchCase[19361-19378]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[19385-19402]:SwitchCase[19385-19402]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[19409-19429]:SwitchCase[19409-19429]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[19436-19455]:SwitchCase[19436-19455]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[19462-19481]:SwitchCase[19462-19481]"
    }, {
      "left" : "case Token.GET_REF:",
      "right" : "case Token.GET_REF:",
      "info" : "SwitchCase[19488-19507]:SwitchCase[19488-19507]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[19514-19528]:SwitchCase[19514-19528]"
    }, {
      "left" : "case Token.LP:",
      "right" : "case Token.LP:",
      "info" : "SwitchCase[19535-19549]:SwitchCase[19535-19549]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[19556-19572]:SwitchCase[19556-19572]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[19579-19595]:SwitchCase[19579-19595]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[19602-19620]:SwitchCase[19602-19620]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[19627-19648]:SwitchCase[19627-19648]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[19655-19673]:SwitchCase[19655-19673]"
    }, {
      "left" : "case Token.RETURN:",
      "right" : "case Token.RETURN:",
      "info" : "SwitchCase[19680-19698]:SwitchCase[19680-19698]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[19705-19723]:SwitchCase[19705-19723]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[19730-19746]:SwitchCase[19730-19746]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[19753-19769]:SwitchCase[19753-19769]"
    }, {
      "left" : "return 15;",
      "right" : "return 15;",
      "info" : "ReturnStatement[19778-19788]:ReturnStatement[19778-19788]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[19796-19804]:SwitchCase[19796-19804]"
    }, {
      "left" : "throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");",
      "right" : "throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");",
      "info" : "ThrowStatement[19805-19960]:ThrowStatement[19805-19960]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20200-20206]:Modifier[20200-20206]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20207-20214]:PrimitiveType[20207-20214]"
    }, {
      "left" : "isAssociative",
      "right" : "isAssociative",
      "info" : "SimpleName[20215-20228]:SimpleName[20215-20228]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[20229-20237]:SingleVariableDeclaration[20229-20237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20239-20442]:Block[20239-20442]"
    }, {
      "left" : "switch (type) {\n      case Token.MUL:\n      case Token.AND:\n      case Token.OR:\n      case Token.BITOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (type) {\n      case Token.MUL:\n      case Token.AND:\n      case Token.OR:\n      case Token.BITOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[20245-20438]:SwitchStatement[20245-20438]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[20267-20282]:SwitchCase[20267-20282]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[20289-20304]:SwitchCase[20289-20304]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[20311-20325]:SwitchCase[20311-20325]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[20332-20349]:SwitchCase[20332-20349]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[20356-20374]:SwitchCase[20356-20374]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[20383-20395]:ReturnStatement[20383-20395]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[20402-20410]:SwitchCase[20402-20410]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20419-20432]:ReturnStatement[20419-20432]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20446-20452]:Modifier[20446-20452]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20453-20460]:PrimitiveType[20453-20460]"
    }, {
      "left" : "isAssignmentOp",
      "right" : "isAssignmentOp",
      "info" : "SimpleName[20461-20475]:SimpleName[20461-20475]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[20476-20482]:SingleVariableDeclaration[20476-20482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20484-20913]:Block[20484-20913]"
    }, {
      "left" : "switch (n.getType()){\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        return true;\n    }",
      "right" : "switch (n.getType()){\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        return true;\n    }",
      "info" : "SwitchStatement[20490-20891]:SwitchStatement[20490-20891]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[20518-20536]:SwitchCase[20518-20536]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[20543-20567]:SwitchCase[20543-20567]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[20574-20599]:SwitchCase[20574-20599]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[20606-20631]:SwitchCase[20606-20631]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[20638-20660]:SwitchCase[20638-20660]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[20667-20689]:SwitchCase[20667-20689]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[20696-20719]:SwitchCase[20696-20719]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[20726-20748]:SwitchCase[20726-20748]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[20755-20777]:SwitchCase[20755-20777]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[20784-20806]:SwitchCase[20784-20806]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[20813-20835]:SwitchCase[20813-20835]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[20842-20864]:SwitchCase[20842-20864]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[20873-20885]:ReturnStatement[20873-20885]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20896-20909]:ReturnStatement[20896-20909]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20917-20923]:Modifier[20917-20923]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[20924-20927]:PrimitiveType[20924-20927]"
    }, {
      "left" : "getOpFromAssignmentOp",
      "right" : "getOpFromAssignmentOp",
      "info" : "SimpleName[20928-20949]:SimpleName[20928-20949]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[20950-20956]:SingleVariableDeclaration[20950-20956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20958-21680]:Block[20958-21680]"
    }, {
      "left" : "switch (n.getType()){\n      case Token.ASSIGN_BITOR:\n        return Token.BITOR;\n      case Token.ASSIGN_BITXOR:\n        return Token.BITXOR;\n      case Token.ASSIGN_BITAND:\n        return Token.BITAND;\n      case Token.ASSIGN_LSH:\n        return Token.LSH;\n      case Token.ASSIGN_RSH:\n        return Token.RSH;\n      case Token.ASSIGN_URSH:\n        return Token.URSH;\n      case Token.ASSIGN_ADD:\n        return Token.ADD;\n      case Token.ASSIGN_SUB:\n        return Token.SUB;\n      case Token.ASSIGN_MUL:\n        return Token.MUL;\n      case Token.ASSIGN_DIV:\n        return Token.DIV;\n      case Token.ASSIGN_MOD:\n        return Token.MOD;\n    }",
      "right" : "switch (n.getType()){\n      case Token.ASSIGN_BITOR:\n        return Token.BITOR;\n      case Token.ASSIGN_BITXOR:\n        return Token.BITXOR;\n      case Token.ASSIGN_BITAND:\n        return Token.BITAND;\n      case Token.ASSIGN_LSH:\n        return Token.LSH;\n      case Token.ASSIGN_RSH:\n        return Token.RSH;\n      case Token.ASSIGN_URSH:\n        return Token.URSH;\n      case Token.ASSIGN_ADD:\n        return Token.ADD;\n      case Token.ASSIGN_SUB:\n        return Token.SUB;\n      case Token.ASSIGN_MUL:\n        return Token.MUL;\n      case Token.ASSIGN_DIV:\n        return Token.DIV;\n      case Token.ASSIGN_MOD:\n        return Token.MOD;\n    }",
      "info" : "SwitchStatement[20964-21614]:SwitchStatement[20964-21614]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[20992-21016]:SwitchCase[20992-21016]"
    }, {
      "left" : "return Token.BITOR;",
      "right" : "return Token.BITOR;",
      "info" : "ReturnStatement[21025-21044]:ReturnStatement[21025-21044]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[21051-21076]:SwitchCase[21051-21076]"
    }, {
      "left" : "return Token.BITXOR;",
      "right" : "return Token.BITXOR;",
      "info" : "ReturnStatement[21085-21105]:ReturnStatement[21085-21105]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[21112-21137]:SwitchCase[21112-21137]"
    }, {
      "left" : "return Token.BITAND;",
      "right" : "return Token.BITAND;",
      "info" : "ReturnStatement[21146-21166]:ReturnStatement[21146-21166]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[21173-21195]:SwitchCase[21173-21195]"
    }, {
      "left" : "return Token.LSH;",
      "right" : "return Token.LSH;",
      "info" : "ReturnStatement[21204-21221]:ReturnStatement[21204-21221]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[21228-21250]:SwitchCase[21228-21250]"
    }, {
      "left" : "return Token.RSH;",
      "right" : "return Token.RSH;",
      "info" : "ReturnStatement[21259-21276]:ReturnStatement[21259-21276]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[21283-21306]:SwitchCase[21283-21306]"
    }, {
      "left" : "return Token.URSH;",
      "right" : "return Token.URSH;",
      "info" : "ReturnStatement[21315-21333]:ReturnStatement[21315-21333]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[21340-21362]:SwitchCase[21340-21362]"
    }, {
      "left" : "return Token.ADD;",
      "right" : "return Token.ADD;",
      "info" : "ReturnStatement[21371-21388]:ReturnStatement[21371-21388]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[21395-21417]:SwitchCase[21395-21417]"
    }, {
      "left" : "return Token.SUB;",
      "right" : "return Token.SUB;",
      "info" : "ReturnStatement[21426-21443]:ReturnStatement[21426-21443]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[21450-21472]:SwitchCase[21450-21472]"
    }, {
      "left" : "return Token.MUL;",
      "right" : "return Token.MUL;",
      "info" : "ReturnStatement[21481-21498]:ReturnStatement[21481-21498]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[21505-21527]:SwitchCase[21505-21527]"
    }, {
      "left" : "return Token.DIV;",
      "right" : "return Token.DIV;",
      "info" : "ReturnStatement[21536-21553]:ReturnStatement[21536-21553]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[21560-21582]:SwitchCase[21560-21582]"
    }, {
      "left" : "return Token.MOD;",
      "right" : "return Token.MOD;",
      "info" : "ReturnStatement[21591-21608]:ReturnStatement[21591-21608]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Not an assiment op\");",
      "right" : "throw new IllegalArgumentException(\"Not an assiment op\");",
      "info" : "ThrowStatement[21619-21676]:ThrowStatement[21619-21676]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[21684-21690]:Modifier[21684-21690]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21691-21698]:PrimitiveType[21691-21698]"
    }, {
      "left" : "isExpressionNode",
      "right" : "isExpressionNode",
      "info" : "SimpleName[21699-21715]:SimpleName[21699-21715]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[21716-21722]:SingleVariableDeclaration[21716-21722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21724-21774]:Block[21724-21774]"
    }, {
      "left" : "return n.getType() == Token.EXPR_RESULT;",
      "right" : "return n.getType() == Token.EXPR_RESULT;",
      "info" : "ReturnStatement[21730-21770]:ReturnStatement[21730-21770]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[21857-21863]:Modifier[21857-21863]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21864-21871]:PrimitiveType[21864-21871]"
    }, {
      "left" : "containsFunctionDeclaration",
      "right" : "containsFunctionDeclaration",
      "info" : "SimpleName[21872-21899]:SimpleName[21872-21899]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[21900-21906]:SingleVariableDeclaration[21900-21906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21908-21957]:Block[21908-21957]"
    }, {
      "left" : "return containsType(n, Token.FUNCTION);",
      "right" : "return containsType(n, Token.FUNCTION);",
      "info" : "ReturnStatement[21914-21953]:ReturnStatement[21914-21953]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22044-22050]:Modifier[22044-22050]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22051-22058]:PrimitiveType[22051-22058]"
    }, {
      "left" : "referencesThis",
      "right" : "referencesThis",
      "info" : "SimpleName[22059-22073]:SimpleName[22059-22073]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[22074-22080]:SingleVariableDeclaration[22074-22080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22082-22127]:Block[22082-22127]"
    }, {
      "left" : "return containsType(n, Token.THIS);",
      "right" : "return containsType(n, Token.THIS);",
      "info" : "ReturnStatement[22088-22123]:ReturnStatement[22088-22123]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22183-22189]:Modifier[22183-22189]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22190-22197]:PrimitiveType[22190-22197]"
    }, {
      "left" : "isGet",
      "right" : "isGet",
      "info" : "SimpleName[22198-22203]:SimpleName[22198-22203]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[22204-22210]:SingleVariableDeclaration[22204-22210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22212-22298]:Block[22212-22298]"
    }, {
      "left" : "return n.getType() == Token.GETPROP\n        || n.getType() == Token.GETELEM;",
      "right" : "return n.getType() == Token.GETPROP\n        || n.getType() == Token.GETELEM;",
      "info" : "ReturnStatement[22218-22294]:ReturnStatement[22218-22294]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22343-22349]:Modifier[22343-22349]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22350-22357]:PrimitiveType[22350-22357]"
    }, {
      "left" : "isGetProp",
      "right" : "isGetProp",
      "info" : "SimpleName[22358-22367]:SimpleName[22358-22367]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[22368-22374]:SingleVariableDeclaration[22368-22374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22376-22422]:Block[22376-22422]"
    }, {
      "left" : "return n.getType() == Token.GETPROP;",
      "right" : "return n.getType() == Token.GETPROP;",
      "info" : "ReturnStatement[22382-22418]:ReturnStatement[22382-22418]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22464-22470]:Modifier[22464-22470]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22471-22478]:PrimitiveType[22471-22478]"
    }, {
      "left" : "isName",
      "right" : "isName",
      "info" : "SimpleName[22479-22485]:SimpleName[22479-22485]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[22486-22492]:SingleVariableDeclaration[22486-22492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22494-22537]:Block[22494-22537]"
    }, {
      "left" : "return n.getType() == Token.NAME;",
      "right" : "return n.getType() == Token.NAME;",
      "info" : "ReturnStatement[22500-22533]:ReturnStatement[22500-22533]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22578-22584]:Modifier[22578-22584]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22585-22592]:PrimitiveType[22585-22592]"
    }, {
      "left" : "isNew",
      "right" : "isNew",
      "info" : "SimpleName[22593-22598]:SimpleName[22593-22598]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[22599-22605]:SingleVariableDeclaration[22599-22605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22607-22649]:Block[22607-22649]"
    }, {
      "left" : "return n.getType() == Token.NEW;",
      "right" : "return n.getType() == Token.NEW;",
      "info" : "ReturnStatement[22613-22645]:ReturnStatement[22613-22645]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22690-22696]:Modifier[22690-22696]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22697-22704]:PrimitiveType[22697-22704]"
    }, {
      "left" : "isVar",
      "right" : "isVar",
      "info" : "SimpleName[22705-22710]:SimpleName[22705-22710]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[22711-22717]:SingleVariableDeclaration[22711-22717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22719-22761]:Block[22719-22761]"
    }, {
      "left" : "return n.getType() == Token.VAR;",
      "right" : "return n.getType() == Token.VAR;",
      "info" : "ReturnStatement[22725-22757]:ReturnStatement[22725-22757]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22927-22933]:Modifier[22927-22933]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22934-22941]:PrimitiveType[22934-22941]"
    }, {
      "left" : "isVarDeclaration",
      "right" : "isVarDeclaration",
      "info" : "SimpleName[22942-22958]:SimpleName[22942-22958]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[22959-22965]:SingleVariableDeclaration[22959-22965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22967-23174]:Block[22967-23174]"
    }, {
      "left" : "return n.getType() == Token.NAME && n.getParent().getType() == Token.VAR;",
      "right" : "return n.getType() == Token.NAME && n.getParent().getType() == Token.VAR;",
      "info" : "ReturnStatement[23097-23170]:ReturnStatement[23097-23170]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23317-23323]:Modifier[23317-23323]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[23324-23328]:SimpleType[23324-23328]"
    }, {
      "left" : "getAssignedValue",
      "right" : "getAssignedValue",
      "info" : "SimpleName[23329-23345]:SimpleName[23329-23345]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[23346-23352]:SingleVariableDeclaration[23346-23352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23354-23620]:Block[23354-23620]"
    }, {
      "left" : "Preconditions.checkState(isName(n));",
      "right" : "Preconditions.checkState(isName(n));",
      "info" : "ExpressionStatement[23360-23396]:ExpressionStatement[23360-23396]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[23401-23429]:VariableDeclarationStatement[23401-23429]"
    }, {
      "left" : "if (isVar(parent))",
      "right" : "if (isVar(parent))",
      "info" : "IfStatement[23434-23616]:IfStatement[23434-23616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23453-23492]:Block[23453-23492]"
    }, {
      "left" : "return n.getFirstChild();",
      "right" : "return n.getFirstChild();",
      "info" : "ReturnStatement[23461-23486]:ReturnStatement[23461-23486]"
    }, {
      "left" : "if (isAssign(parent) && parent.getFirstChild() == n)",
      "right" : "if (isAssign(parent) && parent.getFirstChild() == n)",
      "info" : "IfStatement[23498-23616]:IfStatement[23498-23616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23551-23584]:Block[23551-23584]"
    }, {
      "left" : "return n.getNext();",
      "right" : "return n.getNext();",
      "info" : "ReturnStatement[23559-23578]:ReturnStatement[23559-23578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23590-23616]:Block[23590-23616]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[23598-23610]:ReturnStatement[23598-23610]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23664-23670]:Modifier[23664-23670]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23671-23678]:PrimitiveType[23671-23678]"
    }, {
      "left" : "isString",
      "right" : "isString",
      "info" : "SimpleName[23679-23687]:SimpleName[23679-23687]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[23688-23694]:SingleVariableDeclaration[23688-23694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23696-23741]:Block[23696-23741]"
    }, {
      "left" : "return n.getType() == Token.STRING;",
      "right" : "return n.getType() == Token.STRING;",
      "info" : "ReturnStatement[23702-23737]:ReturnStatement[23702-23737]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23932-23938]:Modifier[23932-23938]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23939-23946]:PrimitiveType[23939-23946]"
    }, {
      "left" : "isExprAssign",
      "right" : "isExprAssign",
      "info" : "SimpleName[23947-23959]:SimpleName[23947-23959]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[23960-23966]:SingleVariableDeclaration[23960-23966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23968-24073]:Block[23968-24073]"
    }, {
      "left" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.ASSIGN;",
      "right" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.ASSIGN;",
      "info" : "ReturnStatement[23974-24069]:ReturnStatement[23974-24069]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24118-24124]:Modifier[24118-24124]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24125-24132]:PrimitiveType[24125-24132]"
    }, {
      "left" : "isAssign",
      "right" : "isAssign",
      "info" : "SimpleName[24133-24141]:SimpleName[24133-24141]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[24142-24148]:SingleVariableDeclaration[24142-24148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24150-24195]:Block[24150-24195]"
    }, {
      "left" : "return n.getType() == Token.ASSIGN;",
      "right" : "return n.getType() == Token.ASSIGN;",
      "info" : "ReturnStatement[24156-24191]:ReturnStatement[24156-24191]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24377-24383]:Modifier[24377-24383]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24384-24391]:PrimitiveType[24384-24391]"
    }, {
      "left" : "isExprCall",
      "right" : "isExprCall",
      "info" : "SimpleName[24392-24402]:SimpleName[24392-24402]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[24403-24409]:SingleVariableDeclaration[24403-24409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24411-24514]:Block[24411-24514]"
    }, {
      "left" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.CALL;",
      "right" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.CALL;",
      "info" : "ReturnStatement[24417-24510]:ReturnStatement[24417-24510]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24586-24592]:Modifier[24586-24592]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24593-24600]:PrimitiveType[24593-24600]"
    }, {
      "left" : "isForIn",
      "right" : "isForIn",
      "info" : "SimpleName[24601-24608]:SimpleName[24601-24608]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[24609-24615]:SingleVariableDeclaration[24609-24615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24617-24693]:Block[24617-24693]"
    }, {
      "left" : "return n.getType() == Token.FOR\n        && n.getChildCount() == 3;",
      "right" : "return n.getType() == Token.FOR\n        && n.getChildCount() == 3;",
      "info" : "ReturnStatement[24623-24689]:ReturnStatement[24623-24689]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24777-24783]:Modifier[24777-24783]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24784-24791]:PrimitiveType[24784-24791]"
    }, {
      "left" : "isLoopStructure",
      "right" : "isLoopStructure",
      "info" : "SimpleName[24792-24807]:SimpleName[24792-24807]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[24808-24814]:SingleVariableDeclaration[24808-24814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24816-24979]:Block[24816-24979]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[24822-24975]:SwitchStatement[24822-24975]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[24851-24866]:SwitchCase[24851-24866]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[24873-24887]:SwitchCase[24873-24887]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[24894-24911]:SwitchCase[24894-24911]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24920-24932]:ReturnStatement[24920-24932]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[24939-24947]:SwitchCase[24939-24947]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24956-24969]:ReturnStatement[24956-24969]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25141-25147]:Modifier[25141-25147]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[25148-25152]:SimpleType[25148-25152]"
    }, {
      "left" : "getLoopCodeBlock",
      "right" : "getLoopCodeBlock",
      "info" : "SimpleName[25153-25169]:SimpleName[25153-25169]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[25170-25176]:SingleVariableDeclaration[25170-25176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25178-25386]:Block[25178-25386]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n        return n.getLastChild();\n      case Token.DO:\n        return n.getFirstChild();\n      default:\n        return null;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n        return n.getLastChild();\n      case Token.DO:\n        return n.getFirstChild();\n      default:\n        return null;\n    }",
      "info" : "SwitchStatement[25184-25382]:SwitchStatement[25184-25382]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[25213-25228]:SwitchCase[25213-25228]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[25235-25252]:SwitchCase[25235-25252]"
    }, {
      "left" : "return n.getLastChild();",
      "right" : "return n.getLastChild();",
      "info" : "ReturnStatement[25261-25285]:ReturnStatement[25261-25285]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[25292-25306]:SwitchCase[25292-25306]"
    }, {
      "left" : "return n.getFirstChild();",
      "right" : "return n.getFirstChild();",
      "info" : "ReturnStatement[25315-25340]:ReturnStatement[25315-25340]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[25347-25355]:SwitchCase[25347-25355]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[25364-25376]:ReturnStatement[25364-25376]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25480-25486]:Modifier[25480-25486]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[25487-25494]:PrimitiveType[25487-25494]"
    }, {
      "left" : "isControlStructure",
      "right" : "isControlStructure",
      "info" : "SimpleName[25495-25513]:SimpleName[25495-25513]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[25514-25520]:SingleVariableDeclaration[25514-25520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25522-25873]:Block[25522-25873]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n      case Token.WITH:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.TRY:\n      case Token.CATCH:\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.DEFAULT:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n      case Token.WITH:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.TRY:\n      case Token.CATCH:\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.DEFAULT:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[25528-25869]:SwitchStatement[25528-25869]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[25557-25572]:SwitchCase[25557-25572]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[25579-25593]:SwitchCase[25579-25593]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[25600-25617]:SwitchCase[25600-25617]"
    }, {
      "left" : "case Token.WITH:",
      "right" : "case Token.WITH:",
      "info" : "SwitchCase[25624-25640]:SwitchCase[25624-25640]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[25647-25661]:SwitchCase[25647-25661]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[25668-25685]:SwitchCase[25668-25685]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[25692-25707]:SwitchCase[25692-25707]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[25714-25731]:SwitchCase[25714-25731]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[25738-25756]:SwitchCase[25738-25756]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[25763-25779]:SwitchCase[25763-25779]"
    }, {
      "left" : "case Token.DEFAULT:",
      "right" : "case Token.DEFAULT:",
      "info" : "SwitchCase[25786-25805]:SwitchCase[25786-25805]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[25814-25826]:ReturnStatement[25814-25826]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[25833-25841]:SwitchCase[25833-25841]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25850-25863]:ReturnStatement[25850-25863]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25984-25990]:Modifier[25984-25990]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[25991-25998]:PrimitiveType[25991-25998]"
    }, {
      "left" : "isControlStructureCodeBlock",
      "right" : "isControlStructureCodeBlock",
      "info" : "SimpleName[25999-26026]:SimpleName[25999-26026]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[26027-26038]:SingleVariableDeclaration[26027-26038]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[26040-26046]:SingleVariableDeclaration[26040-26046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26048-26758]:Block[26048-26758]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n      case Token.LABEL:\n      case Token.WITH:\n        return parent.getLastChild() == n;\n      case Token.DO:\n        return parent.getFirstChild() == n;\n      case Token.IF:\n        return parent.getFirstChild() != n;\n      case Token.TRY:\n        return parent.getFirstChild() == n || parent.getLastChild() == n;\n      case Token.CATCH:\n        return parent.getLastChild() == n;\n      case Token.SWITCH:\n      case Token.CASE:\n        return parent.getFirstChild() != n;\n      case Token.DEFAULT:\n        return true;\n      default:\n        Preconditions.checkState(isControlStructure(parent));\n        return false;\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n      case Token.LABEL:\n      case Token.WITH:\n        return parent.getLastChild() == n;\n      case Token.DO:\n        return parent.getFirstChild() == n;\n      case Token.IF:\n        return parent.getFirstChild() != n;\n      case Token.TRY:\n        return parent.getFirstChild() == n || parent.getLastChild() == n;\n      case Token.CATCH:\n        return parent.getLastChild() == n;\n      case Token.SWITCH:\n      case Token.CASE:\n        return parent.getFirstChild() != n;\n      case Token.DEFAULT:\n        return true;\n      default:\n        Preconditions.checkState(isControlStructure(parent));\n        return false;\n    }",
      "info" : "SwitchStatement[26054-26754]:SwitchStatement[26054-26754]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[26088-26103]:SwitchCase[26088-26103]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[26110-26127]:SwitchCase[26110-26127]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[26134-26151]:SwitchCase[26134-26151]"
    }, {
      "left" : "case Token.WITH:",
      "right" : "case Token.WITH:",
      "info" : "SwitchCase[26158-26174]:SwitchCase[26158-26174]"
    }, {
      "left" : "return parent.getLastChild() == n;",
      "right" : "return parent.getLastChild() == n;",
      "info" : "ReturnStatement[26183-26217]:ReturnStatement[26183-26217]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[26224-26238]:SwitchCase[26224-26238]"
    }, {
      "left" : "return parent.getFirstChild() == n;",
      "right" : "return parent.getFirstChild() == n;",
      "info" : "ReturnStatement[26247-26282]:ReturnStatement[26247-26282]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[26289-26303]:SwitchCase[26289-26303]"
    }, {
      "left" : "return parent.getFirstChild() != n;",
      "right" : "return parent.getFirstChild() != n;",
      "info" : "ReturnStatement[26312-26347]:ReturnStatement[26312-26347]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[26354-26369]:SwitchCase[26354-26369]"
    }, {
      "left" : "return parent.getFirstChild() == n || parent.getLastChild() == n;",
      "right" : "return parent.getFirstChild() == n || parent.getLastChild() == n;",
      "info" : "ReturnStatement[26378-26443]:ReturnStatement[26378-26443]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[26450-26467]:SwitchCase[26450-26467]"
    }, {
      "left" : "return parent.getLastChild() == n;",
      "right" : "return parent.getLastChild() == n;",
      "info" : "ReturnStatement[26476-26510]:ReturnStatement[26476-26510]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[26517-26535]:SwitchCase[26517-26535]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[26542-26558]:SwitchCase[26542-26558]"
    }, {
      "left" : "return parent.getFirstChild() != n;",
      "right" : "return parent.getFirstChild() != n;",
      "info" : "ReturnStatement[26567-26602]:ReturnStatement[26567-26602]"
    }, {
      "left" : "case Token.DEFAULT:",
      "right" : "case Token.DEFAULT:",
      "info" : "SwitchCase[26609-26628]:SwitchCase[26609-26628]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[26637-26649]:ReturnStatement[26637-26649]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[26656-26664]:SwitchCase[26656-26664]"
    }, {
      "left" : "Preconditions.checkState(isControlStructure(parent));",
      "right" : "Preconditions.checkState(isControlStructure(parent));",
      "info" : "ExpressionStatement[26673-26726]:ExpressionStatement[26673-26726]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26735-26748]:ReturnStatement[26735-26748]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[26973-26979]:Modifier[26973-26979]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[26980-26984]:SimpleType[26980-26984]"
    }, {
      "left" : "getConditionExpression",
      "right" : "getConditionExpression",
      "info" : "SimpleName[26985-27007]:SimpleName[26985-27007]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[27008-27014]:SingleVariableDeclaration[27008-27014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27016-27562]:Block[27016-27562]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.IF:\n      case Token.WHILE:\n        return n.getFirstChild();\n      case Token.DO:\n        return n.getLastChild();\n      case Token.FOR:\n        switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }\n        throw new IllegalArgumentException(\"malformed 'for' statement \" + n);\n      case Token.CASE:\n        return null;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.IF:\n      case Token.WHILE:\n        return n.getFirstChild();\n      case Token.DO:\n        return n.getLastChild();\n      case Token.FOR:\n        switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }\n        throw new IllegalArgumentException(\"malformed 'for' statement \" + n);\n      case Token.CASE:\n        return null;\n    }",
      "info" : "SwitchStatement[27022-27483]:SwitchStatement[27022-27483]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[27051-27065]:SwitchCase[27051-27065]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[27072-27089]:SwitchCase[27072-27089]"
    }, {
      "left" : "return n.getFirstChild();",
      "right" : "return n.getFirstChild();",
      "info" : "ReturnStatement[27098-27123]:ReturnStatement[27098-27123]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[27130-27144]:SwitchCase[27130-27144]"
    }, {
      "left" : "return n.getLastChild();",
      "right" : "return n.getLastChild();",
      "info" : "ReturnStatement[27153-27177]:ReturnStatement[27153-27177]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[27184-27199]:SwitchCase[27184-27199]"
    }, {
      "left" : "switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }",
      "right" : "switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }",
      "info" : "SwitchStatement[27208-27355]:SwitchStatement[27208-27355]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[27247-27254]:SwitchCase[27247-27254]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[27267-27279]:ReturnStatement[27267-27279]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[27290-27297]:SwitchCase[27290-27297]"
    }, {
      "left" : "return n.getFirstChild().getNext();",
      "right" : "return n.getFirstChild().getNext();",
      "info" : "ReturnStatement[27310-27345]:ReturnStatement[27310-27345]"
    }, {
      "left" : "throw new IllegalArgumentException(\"malformed 'for' statement \" + n);",
      "right" : "throw new IllegalArgumentException(\"malformed 'for' statement \" + n);",
      "info" : "ThrowStatement[27364-27433]:ThrowStatement[27364-27433]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[27440-27456]:SwitchCase[27440-27456]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[27465-27477]:ReturnStatement[27465-27477]"
    }, {
      "left" : "throw new IllegalArgumentException(n + \" does not have a condition.\");",
      "right" : "throw new IllegalArgumentException(n + \" does not have a condition.\");",
      "info" : "ThrowStatement[27488-27558]:ThrowStatement[27488-27558]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[27652-27658]:Modifier[27652-27658]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[27659-27666]:PrimitiveType[27659-27666]"
    }, {
      "left" : "isStatementBlock",
      "right" : "isStatementBlock",
      "info" : "SimpleName[27667-27683]:SimpleName[27667-27683]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[27684-27690]:SingleVariableDeclaration[27684-27690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27692-27767]:Block[27692-27767]"
    }, {
      "left" : "return n.getType() == Token.SCRIPT || n.getType() == Token.BLOCK;",
      "right" : "return n.getType() == Token.SCRIPT || n.getType() == Token.BLOCK;",
      "info" : "ReturnStatement[27698-27763]:ReturnStatement[27698-27763]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[27837-27843]:Modifier[27837-27843]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[27844-27851]:PrimitiveType[27844-27851]"
    }, {
      "left" : "isStatement",
      "right" : "isStatement",
      "info" : "SimpleName[27852-27863]:SimpleName[27852-27863]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[27864-27870]:SingleVariableDeclaration[27864-27870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27872-28367]:Block[27872-28367]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[27878-27906]:VariableDeclarationStatement[27878-27906]"
    }, {
      "left" : "Preconditions.checkState(parent != null);",
      "right" : "Preconditions.checkState(parent != null);",
      "info" : "ExpressionStatement[28153-28194]:ExpressionStatement[28153-28194]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.LABEL:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.LABEL:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[28199-28363]:SwitchStatement[28199-28363]"
    }, {
      "left" : "case Token.SCRIPT:",
      "right" : "case Token.SCRIPT:",
      "info" : "SwitchCase[28233-28251]:SwitchCase[28233-28251]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[28258-28275]:SwitchCase[28258-28275]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[28282-28299]:SwitchCase[28282-28299]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[28308-28320]:ReturnStatement[28308-28320]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[28327-28335]:SwitchCase[28327-28335]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28344-28357]:ReturnStatement[28344-28357]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[28428-28434]:Modifier[28428-28434]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[28435-28442]:PrimitiveType[28435-28442]"
    }, {
      "left" : "isSwitchCase",
      "right" : "isSwitchCase",
      "info" : "SimpleName[28443-28455]:SimpleName[28443-28455]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[28456-28462]:SingleVariableDeclaration[28456-28462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28464-28539]:Block[28464-28539]"
    }, {
      "left" : "return n.getType() == Token.CASE || n.getType() == Token.DEFAULT;",
      "right" : "return n.getType() == Token.CASE || n.getType() == Token.DEFAULT;",
      "info" : "ReturnStatement[28470-28535]:ReturnStatement[28470-28535]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[28759-28765]:Modifier[28875-28881]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[28766-28773]:PrimitiveType[28882-28889]"
    }, {
      "left" : "isLabelName",
      "right" : "isLabelName",
      "info" : "SimpleName[28774-28785]:SimpleName[28890-28901]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[28786-28792]:SingleVariableDeclaration[28902-28908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28794-29113]:Block[28910-29229]"
    }, {
      "left" : "if (n != null && n.getType() == Token.NAME)",
      "right" : "if (n != null && n.getType() == Token.NAME)",
      "info" : "IfStatement[28800-29091]:IfStatement[28916-29207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28844-29091]:Block[28960-29207]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[28852-28880]:VariableDeclarationStatement[28968-28996]"
    }, {
      "left" : "switch (parent.getType()) {\n        case Token.LABEL:\n        case Token.BREAK:\n        case Token.CONTINUE:\n          if (n == parent.getFirstChild()) {\n            return true;\n          }\n      }",
      "right" : "switch (parent.getType()) {\n        case Token.LABEL:\n        case Token.BREAK:\n        case Token.CONTINUE:\n          if (n == parent.getFirstChild()) {\n            return true;\n          }\n      }",
      "info" : "SwitchStatement[28887-29085]:SwitchStatement[29003-29201]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[28923-28940]:SwitchCase[29039-29056]"
    }, {
      "left" : "case Token.BREAK:",
      "right" : "case Token.BREAK:",
      "info" : "SwitchCase[28949-28966]:SwitchCase[29065-29082]"
    }, {
      "left" : "case Token.CONTINUE:",
      "right" : "case Token.CONTINUE:",
      "info" : "SwitchCase[28975-28995]:SwitchCase[29091-29111]"
    }, {
      "left" : "if (n == parent.getFirstChild())",
      "right" : "if (n == parent.getFirstChild())",
      "info" : "IfStatement[29006-29077]:IfStatement[29122-29193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29039-29077]:Block[29155-29193]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29053-29065]:ReturnStatement[29169-29181]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29096-29109]:ReturnStatement[29212-29225]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29180-29186]:Modifier[29296-29302]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29187-29194]:PrimitiveType[29303-29310]"
    }, {
      "left" : "isTryFinallyNode",
      "right" : "isTryFinallyNode",
      "info" : "SimpleName[29195-29211]:SimpleName[29311-29327]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[29212-29223]:SingleVariableDeclaration[29328-29339]"
    }, {
      "left" : "Node child",
      "right" : "Node child",
      "info" : "SingleVariableDeclaration[29225-29235]:SingleVariableDeclaration[29341-29351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29237-29357]:Block[29353-29473]"
    }, {
      "left" : "return parent.getType() == Token.TRY && parent.getChildCount() == 3\n        && child == parent.getLastChild();",
      "right" : "return parent.getType() == Token.TRY && parent.getChildCount() == 3\n        && child == parent.getLastChild();",
      "info" : "ReturnStatement[29243-29353]:ReturnStatement[29359-29469]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29435-29441]:Modifier[29551-29557]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29442-29446]:PrimitiveType[29558-29562]"
    }, {
      "left" : "removeChild",
      "right" : "removeChild",
      "info" : "SimpleName[29447-29458]:SimpleName[29563-29574]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[29459-29470]:SingleVariableDeclaration[29575-29586]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[29472-29481]:SingleVariableDeclaration[29588-29597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29483-31027]:Block[29599-31143]"
    }, {
      "left" : "if (isStatementBlock(parent)\n        || isSwitchCase(node)\n        || isTryFinallyNode(parent, node))",
      "right" : "if (isStatementBlock(parent)\n        || isSwitchCase(node)\n        || isTryFinallyNode(parent, node))",
      "info" : "IfStatement[29528-31023]:IfStatement[29644-31139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29630-29724]:Block[29746-29840]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[29693-29718]:ExpressionStatement[29809-29834]"
    }, {
      "left" : "if (parent.getType() == Token.VAR)",
      "right" : "if (parent.getType() == Token.VAR)",
      "info" : "IfStatement[29730-31023]:IfStatement[29846-31139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29765-30084]:Block[29881-30200]"
    }, {
      "left" : "if (parent.hasMoreThanOneChild())",
      "right" : "if (parent.hasMoreThanOneChild())",
      "info" : "IfStatement[29773-30078]:IfStatement[29889-30194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29807-29850]:Block[29923-29966]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[29817-29842]:ExpressionStatement[29933-29958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29856-30078]:Block[29972-30194]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[29931-29956]:ExpressionStatement[30047-30072]"
    }, {
      "left" : "removeChild(parent.getParent(), parent);",
      "right" : "removeChild(parent.getParent(), parent);",
      "info" : "ExpressionStatement[30030-30070]:ExpressionStatement[30146-30186]"
    }, {
      "left" : "if (node.getType() == Token.BLOCK)",
      "right" : "if (node.getType() == Token.BLOCK)",
      "info" : "IfStatement[30090-31023]:IfStatement[30206-31139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30125-30257]:Block[30241-30373]"
    }, {
      "left" : "node.detachChildren();",
      "right" : "node.detachChildren();",
      "info" : "ExpressionStatement[30229-30251]:ExpressionStatement[30345-30367]"
    }, {
      "left" : "if (parent.getType() == Token.LABEL\n        && node == parent.getLastChild())",
      "right" : "if (parent.getType() == Token.LABEL\n        && node == parent.getLastChild())",
      "info" : "IfStatement[30263-31023]:IfStatement[30379-31139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30341-30559]:Block[30457-30675]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[30412-30437]:ExpressionStatement[30528-30553]"
    }, {
      "left" : "removeChild(parent.getParent(), parent);",
      "right" : "removeChild(parent.getParent(), parent);",
      "info" : "ExpressionStatement[30513-30553]:ExpressionStatement[30629-30669]"
    }, {
      "left" : "if (parent.getType() == Token.FOR\n        && parent.getChildCount() == 4)",
      "right" : "if (parent.getType() == Token.FOR\n        && parent.getChildCount() == 4)",
      "info" : "IfStatement[30565-31023]:IfStatement[30681-31139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30639-30879]:Block[30755-30995]"
    }, {
      "left" : "parent.replaceChild(node, new Node(Token.EMPTY));",
      "right" : "parent.replaceChild(node, new Node(Token.EMPTY));",
      "info" : "ExpressionStatement[30824-30873]:ExpressionStatement[30940-30989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30885-31023]:Block[31001-31139]"
    }, {
      "left" : "throw new IllegalStateException(\"Invalid attempt to remove node: \" +\n          node.toString() + \" of \"+ parent.toString());",
      "right" : "throw new IllegalStateException(\"Invalid attempt to remove node: \" +\n          node.toString() + \" of \"+ parent.toString());",
      "info" : "ThrowStatement[30893-31017]:ThrowStatement[31009-31133]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[31129-31135]:Modifier[31245-31251]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[31136-31143]:PrimitiveType[31252-31259]"
    }, {
      "left" : "tryMergeBlock",
      "right" : "tryMergeBlock",
      "info" : "SimpleName[31144-31157]:SimpleName[31260-31273]"
    }, {
      "left" : "Node block",
      "right" : "Node block",
      "info" : "SingleVariableDeclaration[31158-31168]:SingleVariableDeclaration[31274-31284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31170-31881]:Block[31286-31997]"
    }, {
      "left" : "Preconditions.checkState(block.getType() == Token.BLOCK);",
      "right" : "Preconditions.checkState(block.getType() == Token.BLOCK);",
      "info" : "ExpressionStatement[31176-31233]:ExpressionStatement[31292-31349]"
    }, {
      "left" : "Node parent = block.getParent();",
      "right" : "Node parent = block.getParent();",
      "info" : "VariableDeclarationStatement[31238-31270]:VariableDeclarationStatement[31354-31386]"
    }, {
      "left" : "if (NodeUtil.isStatementBlock(parent))",
      "right" : "if (NodeUtil.isStatementBlock(parent))",
      "info" : "IfStatement[31401-31877]:IfStatement[31517-31993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31440-31692]:Block[31556-31808]"
    }, {
      "left" : "Node previous = block;",
      "right" : "Node previous = block;",
      "info" : "VariableDeclarationStatement[31448-31470]:VariableDeclarationStatement[31564-31586]"
    }, {
      "left" : "while (block.hasChildren())",
      "right" : "while (block.hasChildren())",
      "info" : "WhileStatement[31477-31634]:WhileStatement[31593-31750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31505-31634]:Block[31621-31750]"
    }, {
      "left" : "Node child = block.removeFirstChild();",
      "right" : "Node child = block.removeFirstChild();",
      "info" : "VariableDeclarationStatement[31515-31553]:VariableDeclarationStatement[31631-31669]"
    }, {
      "left" : "parent.addChildAfter(child, previous);",
      "right" : "parent.addChildAfter(child, previous);",
      "info" : "ExpressionStatement[31562-31600]:ExpressionStatement[31678-31716]"
    }, {
      "left" : "previous = child;",
      "right" : "previous = child;",
      "info" : "ExpressionStatement[31609-31626]:ExpressionStatement[31725-31742]"
    }, {
      "left" : "parent.removeChild(block);",
      "right" : "parent.removeChild(block);",
      "info" : "ExpressionStatement[31641-31667]:ExpressionStatement[31757-31783]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[31674-31686]:ReturnStatement[31790-31802]"
    }, {
      "left" : "if (parent.getType() == Token.LABEL && block.hasOneChild())",
      "right" : "if (parent.getType() == Token.LABEL && block.hasOneChild())",
      "info" : "IfStatement[31698-31877]:IfStatement[31814-31993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31758-31844]:Block[31874-31960]"
    }, {
      "left" : "parent.replaceChild(block, block.removeFirstChild());",
      "right" : "parent.replaceChild(block, block.removeFirstChild());",
      "info" : "ExpressionStatement[31766-31819]:ExpressionStatement[31882-31935]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[31826-31838]:ReturnStatement[31942-31954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31850-31877]:Block[31966-31993]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[31858-31871]:ReturnStatement[31974-31987]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[31923-31929]:Modifier[32039-32045]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[31930-31937]:PrimitiveType[32046-32053]"
    }, {
      "left" : "isCall",
      "right" : "isCall",
      "info" : "SimpleName[31938-31944]:SimpleName[32054-32060]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[31945-31951]:SingleVariableDeclaration[32061-32067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31953-31996]:Block[32069-32112]"
    }, {
      "left" : "return n.getType() == Token.CALL;",
      "right" : "return n.getType() == Token.CALL;",
      "info" : "ReturnStatement[31959-31992]:ReturnStatement[32075-32108]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32042-32048]:Modifier[32158-32164]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[32049-32056]:PrimitiveType[32165-32172]"
    }, {
      "left" : "isFunction",
      "right" : "isFunction",
      "info" : "SimpleName[32057-32067]:SimpleName[32173-32183]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[32068-32074]:SingleVariableDeclaration[32184-32190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32076-32123]:Block[32192-32239]"
    }, {
      "left" : "return n.getType() == Token.FUNCTION;",
      "right" : "return n.getType() == Token.FUNCTION;",
      "info" : "ReturnStatement[32082-32119]:ReturnStatement[32198-32235]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32193-32199]:Modifier[32309-32315]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[32200-32204]:SimpleType[32316-32320]"
    }, {
      "left" : "getFunctionBody",
      "right" : "getFunctionBody",
      "info" : "SimpleName[32205-32220]:SimpleName[32321-32336]"
    }, {
      "left" : "Node fn",
      "right" : "Node fn",
      "info" : "SingleVariableDeclaration[32221-32228]:SingleVariableDeclaration[32337-32344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32230-32314]:Block[32346-32430]"
    }, {
      "left" : "Preconditions.checkArgument(isFunction(fn));",
      "right" : "Preconditions.checkArgument(isFunction(fn));",
      "info" : "ExpressionStatement[32236-32280]:ExpressionStatement[32352-32396]"
    }, {
      "left" : "return fn.getLastChild();",
      "right" : "return fn.getLastChild();",
      "info" : "ReturnStatement[32285-32310]:ReturnStatement[32401-32426]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32356-32362]:Modifier[32472-32478]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[32363-32370]:PrimitiveType[32479-32486]"
    }, {
      "left" : "isThis",
      "right" : "isThis",
      "info" : "SimpleName[32371-32377]:SimpleName[32487-32493]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[32378-32387]:SingleVariableDeclaration[32494-32503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32389-32435]:Block[32505-32551]"
    }, {
      "left" : "return node.getType() == Token.THIS;",
      "right" : "return node.getType() == Token.THIS;",
      "info" : "ReturnStatement[32395-32431]:ReturnStatement[32511-32547]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32500-32506]:Modifier[32616-32622]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[32507-32514]:PrimitiveType[32623-32630]"
    }, {
      "left" : "containsCall",
      "right" : "containsCall",
      "info" : "SimpleName[32515-32527]:SimpleName[32631-32643]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[32528-32534]:SingleVariableDeclaration[32644-32650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32536-32581]:Block[32652-32697]"
    }, {
      "left" : "return containsType(n, Token.CALL);",
      "right" : "return containsType(n, Token.CALL);",
      "info" : "ReturnStatement[32542-32577]:ReturnStatement[32658-32693]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32812-32818]:Modifier[32928-32934]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[32819-32826]:PrimitiveType[32935-32942]"
    }, {
      "left" : "isFunctionDeclaration",
      "right" : "isFunctionDeclaration",
      "info" : "SimpleName[32827-32848]:SimpleName[32943-32964]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[32849-32855]:SingleVariableDeclaration[32965-32971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32857-32931]:Block[32973-33047]"
    }, {
      "left" : "return n.getType() == Token.FUNCTION && !isFunctionAnonymous(n);",
      "right" : "return n.getType() == Token.FUNCTION && !isFunctionAnonymous(n);",
      "info" : "ReturnStatement[32863-32927]:ReturnStatement[32979-33043]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[33121-33127]:Modifier[33237-33243]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[33128-33135]:PrimitiveType[33244-33251]"
    }, {
      "left" : "isHoistedFunctionDeclaration",
      "right" : "isHoistedFunctionDeclaration",
      "info" : "SimpleName[33136-33164]:SimpleName[33252-33280]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[33165-33171]:SingleVariableDeclaration[33281-33287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33173-33346]:Block[33289-33462]"
    }, {
      "left" : "return NodeUtil.isFunctionDeclaration(n)\n        && (n.getParent().getType() == Token.SCRIPT\n            || n.getParent().getParent().getType() == Token.FUNCTION);",
      "right" : "return NodeUtil.isFunctionDeclaration(n)\n        && (n.getParent().getType() == Token.SCRIPT\n            || n.getParent().getParent().getType() == Token.FUNCTION);",
      "info" : "ReturnStatement[33179-33342]:ReturnStatement[33295-33458]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[33552-33558]:Modifier[33668-33674]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[33559-33566]:PrimitiveType[33675-33682]"
    }, {
      "left" : "isAnonymousFunction",
      "right" : "isAnonymousFunction",
      "info" : "SimpleName[33567-33586]:SimpleName[33683-33702]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[33587-33593]:SingleVariableDeclaration[33703-33709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33595-33668]:Block[33711-33784]"
    }, {
      "left" : "return n.getType() == Token.FUNCTION && isFunctionAnonymous(n);",
      "right" : "return n.getType() == Token.FUNCTION && isFunctionAnonymous(n);",
      "info" : "ReturnStatement[33601-33664]:ReturnStatement[33717-33780]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[34313-34319]:Modifier[34429-34435]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[34320-34327]:PrimitiveType[34436-34443]"
    }, {
      "left" : "isFunctionAnonymous",
      "right" : "isFunctionAnonymous",
      "info" : "SimpleName[34328-34347]:SimpleName[34444-34463]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[34348-34354]:SingleVariableDeclaration[34464-34470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34356-34389]:Block[34472-34505]"
    }, {
      "left" : "return !isStatement(n);",
      "right" : "return !isStatement(n);",
      "info" : "ReturnStatement[34362-34385]:ReturnStatement[34478-34501]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[34539-34545]:Modifier[34655-34661]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[34546-34553]:PrimitiveType[34662-34669]"
    }, {
      "left" : "isVarArgsFunction",
      "right" : "isVarArgsFunction",
      "info" : "SimpleName[34554-34571]:SimpleName[34670-34687]"
    }, {
      "left" : "Node function",
      "right" : "Node function",
      "info" : "SingleVariableDeclaration[34572-34585]:SingleVariableDeclaration[34688-34701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34587-34814]:Block[34703-34930]"
    }, {
      "left" : "Preconditions.checkArgument(isFunction(function));",
      "right" : "Preconditions.checkArgument(isFunction(function));",
      "info" : "ExpressionStatement[34593-34643]:ExpressionStatement[34709-34759]"
    }, {
      "left" : "return NodeUtil.isNameReferenced(\n        function.getLastChild(),\n        \"arguments\",\n        Predicates.<Node>not(new NodeUtil.MatchNodeType(Token.FUNCTION)));",
      "right" : "return NodeUtil.isNameReferenced(\n        function.getLastChild(),\n        \"arguments\",\n        Predicates.<Node>not(new NodeUtil.MatchNodeType(Token.FUNCTION)));",
      "info" : "ReturnStatement[34648-34810]:ReturnStatement[34764-34926]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[34918-34924]:Modifier[35034-35040]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[34925-34932]:PrimitiveType[35041-35048]"
    }, {
      "left" : "isObjectCallMethod",
      "right" : "isObjectCallMethod",
      "info" : "SimpleName[34933-34951]:SimpleName[35049-35067]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[34952-34965]:SingleVariableDeclaration[35068-35081]"
    }, {
      "left" : "String methodName",
      "right" : "String methodName",
      "info" : "SingleVariableDeclaration[34967-34984]:SingleVariableDeclaration[35083-35100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34986-35430]:Block[35102-35546]"
    }, {
      "left" : "if (callNode.getType() == Token.CALL)",
      "right" : "if (callNode.getType() == Token.CALL)",
      "info" : "IfStatement[34992-35408]:IfStatement[35108-35524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35030-35408]:Block[35146-35524]"
    }, {
      "left" : "Node functionIndentifyingExpression = callNode.getFirstChild();",
      "right" : "Node functionIndentifyingExpression = callNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[35038-35101]:VariableDeclarationStatement[35154-35217]"
    }, {
      "left" : "if (NodeUtil.isGet(functionIndentifyingExpression))",
      "right" : "if (NodeUtil.isGet(functionIndentifyingExpression))",
      "info" : "IfStatement[35108-35402]:IfStatement[35224-35518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35160-35402]:Block[35276-35518]"
    }, {
      "left" : "Node last = functionIndentifyingExpression.getLastChild();",
      "right" : "Node last = functionIndentifyingExpression.getLastChild();",
      "info" : "VariableDeclarationStatement[35170-35228]:VariableDeclarationStatement[35286-35344]"
    }, {
      "left" : "if (last != null && last.getType() == Token.STRING)",
      "right" : "if (last != null && last.getType() == Token.STRING)",
      "info" : "IfStatement[35237-35394]:IfStatement[35353-35510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35289-35394]:Block[35405-35510]"
    }, {
      "left" : "String propName = last.getString();",
      "right" : "String propName = last.getString();",
      "info" : "VariableDeclarationStatement[35301-35336]:VariableDeclarationStatement[35417-35452]"
    }, {
      "left" : "return (propName.equals(methodName));",
      "right" : "return (propName.equals(methodName));",
      "info" : "ReturnStatement[35347-35384]:ReturnStatement[35463-35500]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[35413-35426]:ReturnStatement[35529-35542]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[35565-35571]:Modifier[35681-35687]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[35572-35579]:PrimitiveType[35688-35695]"
    }, {
      "left" : "isFunctionObjectCall",
      "right" : "isFunctionObjectCall",
      "info" : "SimpleName[35580-35600]:SimpleName[35696-35716]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[35601-35614]:SingleVariableDeclaration[35717-35730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35616-35670]:Block[35732-35786]"
    }, {
      "left" : "return isObjectCallMethod(callNode, \"call\");",
      "right" : "return isObjectCallMethod(callNode, \"call\");",
      "info" : "ReturnStatement[35622-35666]:ReturnStatement[35738-35782]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[35806-35812]:Modifier[35922-35928]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[35813-35820]:PrimitiveType[35929-35936]"
    }, {
      "left" : "isFunctionObjectApply",
      "right" : "isFunctionObjectApply",
      "info" : "SimpleName[35821-35842]:SimpleName[35937-35958]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[35843-35856]:SingleVariableDeclaration[35959-35972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35858-35913]:Block[35974-36029]"
    }, {
      "left" : "return isObjectCallMethod(callNode, \"apply\");",
      "right" : "return isObjectCallMethod(callNode, \"apply\");",
      "info" : "ReturnStatement[35864-35909]:ReturnStatement[35980-36025]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36076-36082]:Modifier[36192-36198]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[36083-36090]:PrimitiveType[36199-36206]"
    }, {
      "left" : "isSimpleFunctionObjectCall",
      "right" : "isSimpleFunctionObjectCall",
      "info" : "SimpleName[36091-36117]:SimpleName[36207-36233]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[36118-36131]:SingleVariableDeclaration[36234-36247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36133-36312]:Block[36249-36428]"
    }, {
      "left" : "if (isFunctionObjectCall(callNode))",
      "right" : "if (isFunctionObjectCall(callNode))",
      "info" : "IfStatement[36139-36289]:IfStatement[36255-36405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36175-36289]:Block[36291-36405]"
    }, {
      "left" : "if (callNode.getFirstChild().getFirstChild().getType() == Token.NAME)",
      "right" : "if (callNode.getFirstChild().getFirstChild().getType() == Token.NAME)",
      "info" : "IfStatement[36183-36283]:IfStatement[36299-36399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36253-36283]:Block[36369-36399]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[36263-36275]:ReturnStatement[36379-36391]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[36295-36308]:ReturnStatement[36411-36424]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36665-36671]:Modifier[36781-36787]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[36672-36679]:PrimitiveType[36788-36795]"
    }, {
      "left" : "isLhs",
      "right" : "isLhs",
      "info" : "SimpleName[36680-36685]:SimpleName[36796-36801]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[36686-36692]:SingleVariableDeclaration[36802-36808]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[36694-36705]:SingleVariableDeclaration[36810-36821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36707-36834]:Block[36823-36950]"
    }, {
      "left" : "return (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) ||\n           parent.getType() == Token.VAR;",
      "right" : "return (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) ||\n           parent.getType() == Token.VAR;",
      "info" : "ReturnStatement[36713-36830]:ReturnStatement[36829-36946]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[37030-37036]:Modifier[37146-37152]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[37037-37044]:PrimitiveType[37153-37160]"
    }, {
      "left" : "isObjectLitKey",
      "right" : "isObjectLitKey",
      "info" : "SimpleName[37045-37059]:SimpleName[37161-37175]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[37060-37069]:SingleVariableDeclaration[37176-37185]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[37071-37082]:SingleVariableDeclaration[37187-37198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37084-37434]:Block[37200-37550]"
    }, {
      "left" : "if (node.getType() == Token.STRING && parent.getType() == Token.OBJECTLIT)",
      "right" : "if (node.getType() == Token.STRING && parent.getType() == Token.OBJECTLIT)",
      "info" : "IfStatement[37090-37412]:IfStatement[37206-37528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37165-37412]:Block[37281-37528]"
    }, {
      "left" : "int index = 0;",
      "right" : "int index = 0;",
      "info" : "VariableDeclarationStatement[37173-37187]:VariableDeclarationStatement[37289-37303]"
    }, {
      "left" : "for (Node current = parent.getFirstChild();\n           current != null;\n           current = current.getNext())",
      "right" : "for (Node current = parent.getFirstChild();\n           current != null;\n           current = current.getNext())",
      "info" : "ForStatement[37194-37406]:ForStatement[37310-37522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37306-37406]:Block[37422-37522]"
    }, {
      "left" : "if (current == node)",
      "right" : "if (current == node)",
      "info" : "IfStatement[37316-37381]:IfStatement[37432-37497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37337-37381]:Block[37453-37497]"
    }, {
      "left" : "return index % 2 == 0;",
      "right" : "return index % 2 == 0;",
      "info" : "ReturnStatement[37349-37371]:ReturnStatement[37465-37487]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[37390-37398]:ExpressionStatement[37506-37514]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[37417-37430]:ReturnStatement[37533-37546]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[37705-37711]:Modifier[37821-37827]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[37712-37718]:SimpleType[37828-37834]"
    }, {
      "left" : "opToStr",
      "right" : "opToStr",
      "info" : "SimpleName[37719-37726]:SimpleName[37835-37842]"
    }, {
      "left" : "int operator",
      "right" : "int operator",
      "info" : "SingleVariableDeclaration[37727-37739]:SingleVariableDeclaration[37843-37855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37741-39351]:Block[37857-39467]"
    }, {
      "left" : "switch (operator) {\n      case Token.BITOR: return \"|\";\n      case Token.OR: return \"||\";\n      case Token.BITXOR: return \"^\";\n      case Token.AND: return \"&&\";\n      case Token.BITAND: return \"&\";\n      case Token.SHEQ: return \"===\";\n      case Token.EQ: return \"==\";\n      case Token.NOT: return \"!\";\n      case Token.NE: return \"!=\";\n      case Token.SHNE: return \"!==\";\n      case Token.LSH: return \"<<\";\n      case Token.IN: return \"in\";\n      case Token.LE: return \"<=\";\n      case Token.LT: return \"<\";\n      case Token.URSH: return \">>>\";\n      case Token.RSH: return \">>\";\n      case Token.GE: return \">=\";\n      case Token.GT: return \">\";\n      case Token.MUL: return \"*\";\n      case Token.DIV: return \"/\";\n      case Token.MOD: return \"%\";\n      case Token.BITNOT: return \"~\";\n      case Token.ADD: return \"+\";\n      case Token.SUB: return \"-\";\n      case Token.POS: return \"+\";\n      case Token.NEG: return \"-\";\n      case Token.ASSIGN: return \"=\";\n      case Token.ASSIGN_BITOR: return \"|=\";\n      case Token.ASSIGN_BITXOR: return \"^=\";\n      case Token.ASSIGN_BITAND: return \"&=\";\n      case Token.ASSIGN_LSH: return \"<<=\";\n      case Token.ASSIGN_RSH: return \">>=\";\n      case Token.ASSIGN_URSH: return \">>>=\";\n      case Token.ASSIGN_ADD: return \"+=\";\n      case Token.ASSIGN_SUB: return \"-=\";\n      case Token.ASSIGN_MUL: return \"*=\";\n      case Token.ASSIGN_DIV: return \"/=\";\n      case Token.ASSIGN_MOD: return \"%=\";\n      case Token.VOID: return \"void\";\n      case Token.TYPEOF: return \"typeof\";\n      case Token.INSTANCEOF: return \"instanceof\";\n      default: return null;\n    }",
      "right" : "switch (operator) {\n      case Token.BITOR: return \"|\";\n      case Token.OR: return \"||\";\n      case Token.BITXOR: return \"^\";\n      case Token.AND: return \"&&\";\n      case Token.BITAND: return \"&\";\n      case Token.SHEQ: return \"===\";\n      case Token.EQ: return \"==\";\n      case Token.NOT: return \"!\";\n      case Token.NE: return \"!=\";\n      case Token.SHNE: return \"!==\";\n      case Token.LSH: return \"<<\";\n      case Token.IN: return \"in\";\n      case Token.LE: return \"<=\";\n      case Token.LT: return \"<\";\n      case Token.URSH: return \">>>\";\n      case Token.RSH: return \">>\";\n      case Token.GE: return \">=\";\n      case Token.GT: return \">\";\n      case Token.MUL: return \"*\";\n      case Token.DIV: return \"/\";\n      case Token.MOD: return \"%\";\n      case Token.BITNOT: return \"~\";\n      case Token.ADD: return \"+\";\n      case Token.SUB: return \"-\";\n      case Token.POS: return \"+\";\n      case Token.NEG: return \"-\";\n      case Token.ASSIGN: return \"=\";\n      case Token.ASSIGN_BITOR: return \"|=\";\n      case Token.ASSIGN_BITXOR: return \"^=\";\n      case Token.ASSIGN_BITAND: return \"&=\";\n      case Token.ASSIGN_LSH: return \"<<=\";\n      case Token.ASSIGN_RSH: return \">>=\";\n      case Token.ASSIGN_URSH: return \">>>=\";\n      case Token.ASSIGN_ADD: return \"+=\";\n      case Token.ASSIGN_SUB: return \"-=\";\n      case Token.ASSIGN_MUL: return \"*=\";\n      case Token.ASSIGN_DIV: return \"/=\";\n      case Token.ASSIGN_MOD: return \"%=\";\n      case Token.VOID: return \"void\";\n      case Token.TYPEOF: return \"typeof\";\n      case Token.INSTANCEOF: return \"instanceof\";\n      default: return null;\n    }",
      "info" : "SwitchStatement[37747-39347]:SwitchStatement[37863-39463]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[37773-37790]:SwitchCase[37889-37906]"
    }, {
      "left" : "return \"|\";",
      "right" : "return \"|\";",
      "info" : "ReturnStatement[37791-37802]:ReturnStatement[37907-37918]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[37809-37823]:SwitchCase[37925-37939]"
    }, {
      "left" : "return \"||\";",
      "right" : "return \"||\";",
      "info" : "ReturnStatement[37824-37836]:ReturnStatement[37940-37952]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[37843-37861]:SwitchCase[37959-37977]"
    }, {
      "left" : "return \"^\";",
      "right" : "return \"^\";",
      "info" : "ReturnStatement[37862-37873]:ReturnStatement[37978-37989]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[37880-37895]:SwitchCase[37996-38011]"
    }, {
      "left" : "return \"&&\";",
      "right" : "return \"&&\";",
      "info" : "ReturnStatement[37896-37908]:ReturnStatement[38012-38024]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[37915-37933]:SwitchCase[38031-38049]"
    }, {
      "left" : "return \"&\";",
      "right" : "return \"&\";",
      "info" : "ReturnStatement[37934-37945]:ReturnStatement[38050-38061]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[37952-37968]:SwitchCase[38068-38084]"
    }, {
      "left" : "return \"===\";",
      "right" : "return \"===\";",
      "info" : "ReturnStatement[37969-37982]:ReturnStatement[38085-38098]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[37989-38003]:SwitchCase[38105-38119]"
    }, {
      "left" : "return \"==\";",
      "right" : "return \"==\";",
      "info" : "ReturnStatement[38004-38016]:ReturnStatement[38120-38132]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[38023-38038]:SwitchCase[38139-38154]"
    }, {
      "left" : "return \"!\";",
      "right" : "return \"!\";",
      "info" : "ReturnStatement[38039-38050]:ReturnStatement[38155-38166]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[38057-38071]:SwitchCase[38173-38187]"
    }, {
      "left" : "return \"!=\";",
      "right" : "return \"!=\";",
      "info" : "ReturnStatement[38072-38084]:ReturnStatement[38188-38200]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[38091-38107]:SwitchCase[38207-38223]"
    }, {
      "left" : "return \"!==\";",
      "right" : "return \"!==\";",
      "info" : "ReturnStatement[38108-38121]:ReturnStatement[38224-38237]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[38128-38143]:SwitchCase[38244-38259]"
    }, {
      "left" : "return \"<<\";",
      "right" : "return \"<<\";",
      "info" : "ReturnStatement[38144-38156]:ReturnStatement[38260-38272]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[38163-38177]:SwitchCase[38279-38293]"
    }, {
      "left" : "return \"in\";",
      "right" : "return \"in\";",
      "info" : "ReturnStatement[38178-38190]:ReturnStatement[38294-38306]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[38197-38211]:SwitchCase[38313-38327]"
    }, {
      "left" : "return \"<=\";",
      "right" : "return \"<=\";",
      "info" : "ReturnStatement[38212-38224]:ReturnStatement[38328-38340]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[38231-38245]:SwitchCase[38347-38361]"
    }, {
      "left" : "return \"<\";",
      "right" : "return \"<\";",
      "info" : "ReturnStatement[38246-38257]:ReturnStatement[38362-38373]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[38264-38280]:SwitchCase[38380-38396]"
    }, {
      "left" : "return \">>>\";",
      "right" : "return \">>>\";",
      "info" : "ReturnStatement[38281-38294]:ReturnStatement[38397-38410]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[38301-38316]:SwitchCase[38417-38432]"
    }, {
      "left" : "return \">>\";",
      "right" : "return \">>\";",
      "info" : "ReturnStatement[38317-38329]:ReturnStatement[38433-38445]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[38336-38350]:SwitchCase[38452-38466]"
    }, {
      "left" : "return \">=\";",
      "right" : "return \">=\";",
      "info" : "ReturnStatement[38351-38363]:ReturnStatement[38467-38479]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[38370-38384]:SwitchCase[38486-38500]"
    }, {
      "left" : "return \">\";",
      "right" : "return \">\";",
      "info" : "ReturnStatement[38385-38396]:ReturnStatement[38501-38512]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[38403-38418]:SwitchCase[38519-38534]"
    }, {
      "left" : "return \"*\";",
      "right" : "return \"*\";",
      "info" : "ReturnStatement[38419-38430]:ReturnStatement[38535-38546]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[38437-38452]:SwitchCase[38553-38568]"
    }, {
      "left" : "return \"/\";",
      "right" : "return \"/\";",
      "info" : "ReturnStatement[38453-38464]:ReturnStatement[38569-38580]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[38471-38486]:SwitchCase[38587-38602]"
    }, {
      "left" : "return \"%\";",
      "right" : "return \"%\";",
      "info" : "ReturnStatement[38487-38498]:ReturnStatement[38603-38614]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[38505-38523]:SwitchCase[38621-38639]"
    }, {
      "left" : "return \"~\";",
      "right" : "return \"~\";",
      "info" : "ReturnStatement[38524-38535]:ReturnStatement[38640-38651]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[38542-38557]:SwitchCase[38658-38673]"
    }, {
      "left" : "return \"+\";",
      "right" : "return \"+\";",
      "info" : "ReturnStatement[38558-38569]:ReturnStatement[38674-38685]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[38576-38591]:SwitchCase[38692-38707]"
    }, {
      "left" : "return \"-\";",
      "right" : "return \"-\";",
      "info" : "ReturnStatement[38592-38603]:ReturnStatement[38708-38719]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[38610-38625]:SwitchCase[38726-38741]"
    }, {
      "left" : "return \"+\";",
      "right" : "return \"+\";",
      "info" : "ReturnStatement[38626-38637]:ReturnStatement[38742-38753]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[38644-38659]:SwitchCase[38760-38775]"
    }, {
      "left" : "return \"-\";",
      "right" : "return \"-\";",
      "info" : "ReturnStatement[38660-38671]:ReturnStatement[38776-38787]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[38678-38696]:SwitchCase[38794-38812]"
    }, {
      "left" : "return \"=\";",
      "right" : "return \"=\";",
      "info" : "ReturnStatement[38697-38708]:ReturnStatement[38813-38824]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[38715-38739]:SwitchCase[38831-38855]"
    }, {
      "left" : "return \"|=\";",
      "right" : "return \"|=\";",
      "info" : "ReturnStatement[38740-38752]:ReturnStatement[38856-38868]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[38759-38784]:SwitchCase[38875-38900]"
    }, {
      "left" : "return \"^=\";",
      "right" : "return \"^=\";",
      "info" : "ReturnStatement[38785-38797]:ReturnStatement[38901-38913]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[38804-38829]:SwitchCase[38920-38945]"
    }, {
      "left" : "return \"&=\";",
      "right" : "return \"&=\";",
      "info" : "ReturnStatement[38830-38842]:ReturnStatement[38946-38958]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[38849-38871]:SwitchCase[38965-38987]"
    }, {
      "left" : "return \"<<=\";",
      "right" : "return \"<<=\";",
      "info" : "ReturnStatement[38872-38885]:ReturnStatement[38988-39001]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[38892-38914]:SwitchCase[39008-39030]"
    }, {
      "left" : "return \">>=\";",
      "right" : "return \">>=\";",
      "info" : "ReturnStatement[38915-38928]:ReturnStatement[39031-39044]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[38935-38958]:SwitchCase[39051-39074]"
    }, {
      "left" : "return \">>>=\";",
      "right" : "return \">>>=\";",
      "info" : "ReturnStatement[38959-38973]:ReturnStatement[39075-39089]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[38980-39002]:SwitchCase[39096-39118]"
    }, {
      "left" : "return \"+=\";",
      "right" : "return \"+=\";",
      "info" : "ReturnStatement[39003-39015]:ReturnStatement[39119-39131]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[39022-39044]:SwitchCase[39138-39160]"
    }, {
      "left" : "return \"-=\";",
      "right" : "return \"-=\";",
      "info" : "ReturnStatement[39045-39057]:ReturnStatement[39161-39173]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[39064-39086]:SwitchCase[39180-39202]"
    }, {
      "left" : "return \"*=\";",
      "right" : "return \"*=\";",
      "info" : "ReturnStatement[39087-39099]:ReturnStatement[39203-39215]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[39106-39128]:SwitchCase[39222-39244]"
    }, {
      "left" : "return \"/=\";",
      "right" : "return \"/=\";",
      "info" : "ReturnStatement[39129-39141]:ReturnStatement[39245-39257]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[39148-39170]:SwitchCase[39264-39286]"
    }, {
      "left" : "return \"%=\";",
      "right" : "return \"%=\";",
      "info" : "ReturnStatement[39171-39183]:ReturnStatement[39287-39299]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[39190-39206]:SwitchCase[39306-39322]"
    }, {
      "left" : "return \"void\";",
      "right" : "return \"void\";",
      "info" : "ReturnStatement[39207-39221]:ReturnStatement[39323-39337]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[39228-39246]:SwitchCase[39344-39362]"
    }, {
      "left" : "return \"typeof\";",
      "right" : "return \"typeof\";",
      "info" : "ReturnStatement[39247-39263]:ReturnStatement[39363-39379]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[39270-39292]:SwitchCase[39386-39408]"
    }, {
      "left" : "return \"instanceof\";",
      "right" : "return \"instanceof\";",
      "info" : "ReturnStatement[39293-39313]:ReturnStatement[39409-39429]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[39320-39328]:SwitchCase[39436-39444]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[39329-39341]:ReturnStatement[39445-39457]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39629-39635]:Modifier[39745-39751]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[39636-39642]:SimpleType[39752-39758]"
    }, {
      "left" : "opToStrNoFail",
      "right" : "opToStrNoFail",
      "info" : "SimpleName[39643-39656]:SimpleName[39759-39772]"
    }, {
      "left" : "int operator",
      "right" : "int operator",
      "info" : "SingleVariableDeclaration[39657-39669]:SingleVariableDeclaration[39773-39785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39671-39858]:Block[39787-39974]"
    }, {
      "left" : "String res = opToStr(operator);",
      "right" : "String res = opToStr(operator);",
      "info" : "VariableDeclarationStatement[39677-39708]:VariableDeclarationStatement[39793-39824]"
    }, {
      "left" : "if (res == null)",
      "right" : "if (res == null)",
      "info" : "IfStatement[39713-39838]:IfStatement[39829-39954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39730-39838]:Block[39846-39954]"
    }, {
      "left" : "throw new Error(\"Unknown op \" + operator + \": \" +\n                      Token.name(operator));",
      "right" : "throw new Error(\"Unknown op \" + operator + \": \" +\n                      Token.name(operator));",
      "info" : "ThrowStatement[39738-39832]:ThrowStatement[39854-39948]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[39843-39854]:ReturnStatement[39959-39970]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39990-39996]:Modifier[40106-40112]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[39997-40004]:PrimitiveType[40113-40120]"
    }, {
      "left" : "containsTypeInOuterScope",
      "right" : "containsTypeInOuterScope",
      "info" : "SimpleName[40005-40029]:SimpleName[40121-40145]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[40030-40039]:SingleVariableDeclaration[40146-40155]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[40041-40049]:SingleVariableDeclaration[40157-40165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40051-40167]:Block[40167-40283]"
    }, {
      "left" : "return containsType(node, type,\n        Predicates.<Node>not(new NodeUtil.MatchNodeType(Token.FUNCTION)));",
      "right" : "return containsType(node, type,\n        Predicates.<Node>not(new NodeUtil.MatchNodeType(Token.FUNCTION)));",
      "info" : "ReturnStatement[40057-40163]:ReturnStatement[40173-40279]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[40255-40261]:Modifier[40371-40377]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[40262-40269]:PrimitiveType[40378-40385]"
    }, {
      "left" : "containsType",
      "right" : "containsType",
      "info" : "SimpleName[40270-40282]:SimpleName[40386-40398]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[40283-40292]:SingleVariableDeclaration[40399-40408]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[40324-40332]:SingleVariableDeclaration[40440-40448]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[40364-40400]:SingleVariableDeclaration[40480-40516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40402-40476]:Block[40518-40592]"
    }, {
      "left" : "return has(node, new MatchNodeType(type), traverseChildrenPred);",
      "right" : "return has(node, new MatchNodeType(type), traverseChildrenPred);",
      "info" : "ReturnStatement[40408-40472]:ReturnStatement[40524-40588]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[40564-40570]:Modifier[40680-40686]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[40571-40578]:PrimitiveType[40687-40694]"
    }, {
      "left" : "containsType",
      "right" : "containsType",
      "info" : "SimpleName[40579-40591]:SimpleName[40695-40707]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[40592-40601]:SingleVariableDeclaration[40708-40717]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[40603-40611]:SingleVariableDeclaration[40719-40727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40613-40686]:Block[40729-40802]"
    }, {
      "left" : "return containsType(node, type, Predicates.<Node>alwaysTrue());",
      "right" : "return containsType(node, type, Predicates.<Node>alwaysTrue());",
      "info" : "ReturnStatement[40619-40682]:ReturnStatement[40735-40798]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[40906-40912]:Modifier[41022-41028]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[40913-40917]:PrimitiveType[41029-41033]"
    }, {
      "left" : "redeclareVarsInsideBranch",
      "right" : "redeclareVarsInsideBranch",
      "info" : "SimpleName[40918-40943]:SimpleName[41034-41059]"
    }, {
      "left" : "Node branch",
      "right" : "Node branch",
      "info" : "SingleVariableDeclaration[40944-40955]:SingleVariableDeclaration[41060-41071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40957-41342]:Block[41073-41458]"
    }, {
      "left" : "Collection<Node> vars = getVarsDeclaredInBranch(branch);",
      "right" : "Collection<Node> vars = getVarsDeclaredInBranch(branch);",
      "info" : "VariableDeclarationStatement[40963-41019]:VariableDeclarationStatement[41079-41135]"
    }, {
      "left" : "if (vars.isEmpty())",
      "right" : "if (vars.isEmpty())",
      "info" : "IfStatement[41024-41065]:IfStatement[41140-41181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41044-41065]:Block[41160-41181]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[41052-41059]:ReturnStatement[41168-41175]"
    }, {
      "left" : "Node parent = getAddingRoot(branch);",
      "right" : "Node parent = getAddingRoot(branch);",
      "info" : "VariableDeclarationStatement[41071-41107]:VariableDeclarationStatement[41187-41223]"
    }, {
      "left" : "for (Node nameNode : vars)",
      "right" : "for (Node nameNode : vars)",
      "info" : "EnhancedForStatement[41112-41338]:EnhancedForStatement[41228-41454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41139-41338]:Block[41255-41454]"
    }, {
      "left" : "Node var = new Node(\n          Token.VAR, Node.newString(Token.NAME, nameNode.getString()));",
      "right" : "Node var = new Node(\n          Token.VAR, Node.newString(Token.NAME, nameNode.getString()));",
      "info" : "VariableDeclarationStatement[41147-41239]:VariableDeclarationStatement[41263-41355]"
    }, {
      "left" : "copyNameAnnotations(nameNode, var.getFirstChild());",
      "right" : "copyNameAnnotations(nameNode, var.getFirstChild());",
      "info" : "ExpressionStatement[41246-41297]:ExpressionStatement[41362-41413]"
    }, {
      "left" : "parent.addChildToFront(var);",
      "right" : "parent.addChildToFront(var);",
      "info" : "ExpressionStatement[41304-41332]:ExpressionStatement[41420-41448]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[41454-41460]:Modifier[41570-41576]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[41461-41465]:PrimitiveType[41577-41581]"
    }, {
      "left" : "copyNameAnnotations",
      "right" : "copyNameAnnotations",
      "info" : "SimpleName[41466-41485]:SimpleName[41582-41601]"
    }, {
      "left" : "Node source",
      "right" : "Node source",
      "info" : "SingleVariableDeclaration[41486-41497]:SingleVariableDeclaration[41602-41613]"
    }, {
      "left" : "Node destination",
      "right" : "Node destination",
      "info" : "SingleVariableDeclaration[41499-41515]:SingleVariableDeclaration[41615-41631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41517-41647]:Block[41633-41763]"
    }, {
      "left" : "if (source.getBooleanProp(Node.IS_CONSTANT_NAME))",
      "right" : "if (source.getBooleanProp(Node.IS_CONSTANT_NAME))",
      "info" : "IfStatement[41523-41643]:IfStatement[41639-41759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41573-41643]:Block[41689-41759]"
    }, {
      "left" : "destination.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "destination.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[41581-41637]:ExpressionStatement[41697-41753]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[41768-41775]:Modifier[41884-41891]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[41776-41782]:Modifier[41892-41898]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[41783-41787]:SimpleType[41899-41903]"
    }, {
      "left" : "getAddingRoot",
      "right" : "getAddingRoot",
      "info" : "SimpleName[41788-41801]:SimpleName[41904-41917]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[41802-41808]:SingleVariableDeclaration[41918-41924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41810-42473]:Block[41926-42589]"
    }, {
      "left" : "Node addingRoot = null;",
      "right" : "Node addingRoot = null;",
      "info" : "VariableDeclarationStatement[41816-41839]:VariableDeclarationStatement[41932-41955]"
    }, {
      "left" : "Node ancestor = n;",
      "right" : "Node ancestor = n;",
      "info" : "VariableDeclarationStatement[41844-41862]:VariableDeclarationStatement[41960-41978]"
    }, {
      "left" : "while (null != (ancestor = ancestor.getParent()))",
      "right" : "while (null != (ancestor = ancestor.getParent()))",
      "info" : "WhileStatement[41867-42153]:WhileStatement[41983-42269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41917-42153]:Block[42033-42269]"
    }, {
      "left" : "int type = ancestor.getType();",
      "right" : "int type = ancestor.getType();",
      "info" : "VariableDeclarationStatement[41925-41955]:VariableDeclarationStatement[42041-42071]"
    }, {
      "left" : "if (type == Token.SCRIPT)",
      "right" : "if (type == Token.SCRIPT)",
      "info" : "IfStatement[41962-42147]:IfStatement[42078-42263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41988-42043]:Block[42104-42159]"
    }, {
      "left" : "addingRoot = ancestor;",
      "right" : "addingRoot = ancestor;",
      "info" : "ExpressionStatement[41998-42020]:ExpressionStatement[42114-42136]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[42029-42035]:BreakStatement[42145-42151]"
    }, {
      "left" : "if (type == Token.FUNCTION)",
      "right" : "if (type == Token.FUNCTION)",
      "info" : "IfStatement[42049-42147]:IfStatement[42165-42263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42077-42147]:Block[42193-42263]"
    }, {
      "left" : "addingRoot = ancestor.getLastChild();",
      "right" : "addingRoot = ancestor.getLastChild();",
      "info" : "ExpressionStatement[42087-42124]:ExpressionStatement[42203-42240]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[42133-42139]:BreakStatement[42249-42255]"
    }, {
      "left" : "Preconditions.checkState(addingRoot.getType() == Token.BLOCK ||\n        addingRoot.getType() == Token.SCRIPT);",
      "right" : "Preconditions.checkState(addingRoot.getType() == Token.BLOCK ||\n        addingRoot.getType() == Token.SCRIPT);",
      "info" : "ExpressionStatement[42206-42316]:ExpressionStatement[42322-42432]"
    }, {
      "left" : "Preconditions.checkState(addingRoot.getFirstChild() == null ||\n        addingRoot.getFirstChild().getType() != Token.SCRIPT);",
      "right" : "Preconditions.checkState(addingRoot.getFirstChild() == null ||\n        addingRoot.getFirstChild().getType() != Token.SCRIPT);",
      "info" : "ExpressionStatement[42321-42446]:ExpressionStatement[42437-42562]"
    }, {
      "left" : "return addingRoot;",
      "right" : "return addingRoot;",
      "info" : "ReturnStatement[42451-42469]:ReturnStatement[42567-42585]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42543-42549]:Modifier[42659-42665]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[42550-42556]:Modifier[42666-42672]"
    }, {
      "left" : "FunctionNode",
      "right" : "FunctionNode",
      "info" : "SimpleType[42557-42569]:SimpleType[42673-42685]"
    }, {
      "left" : "newFunctionNode",
      "right" : "newFunctionNode",
      "info" : "SimpleName[42570-42585]:SimpleName[42686-42701]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[42586-42597]:SingleVariableDeclaration[42702-42713]"
    }, {
      "left" : "List<Node> params",
      "right" : "List<Node> params",
      "info" : "SingleVariableDeclaration[42599-42616]:SingleVariableDeclaration[42715-42732]"
    }, {
      "left" : "Node body",
      "right" : "Node body",
      "info" : "SingleVariableDeclaration[42624-42633]:SingleVariableDeclaration[42740-42749]"
    }, {
      "left" : "int lineno",
      "right" : "int lineno",
      "info" : "SingleVariableDeclaration[42635-42645]:SingleVariableDeclaration[42751-42761]"
    }, {
      "left" : "int charno",
      "right" : "int charno",
      "info" : "SingleVariableDeclaration[42647-42657]:SingleVariableDeclaration[42763-42773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42659-43068]:Block[42775-43184]"
    }, {
      "left" : "Node parameterParen = new Node(Token.LP, lineno, charno);",
      "right" : "Node parameterParen = new Node(Token.LP, lineno, charno);",
      "info" : "VariableDeclarationStatement[42665-42722]:VariableDeclarationStatement[42781-42838]"
    }, {
      "left" : "for (Node param : params)",
      "right" : "for (Node param : params)",
      "info" : "EnhancedForStatement[42727-42804]:EnhancedForStatement[42843-42920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42753-42804]:Block[42869-42920]"
    }, {
      "left" : "parameterParen.addChildToBack(param);",
      "right" : "parameterParen.addChildToBack(param);",
      "info" : "ExpressionStatement[42761-42798]:ExpressionStatement[42877-42914]"
    }, {
      "left" : "FunctionNode function = new FunctionNode(name, lineno, charno);",
      "right" : "FunctionNode function = new FunctionNode(name, lineno, charno);",
      "info" : "VariableDeclarationStatement[42809-42872]:VariableDeclarationStatement[42925-42988]"
    }, {
      "left" : "function.addChildrenToBack(\n        Node.newString(Token.NAME, name, lineno, charno));",
      "right" : "function.addChildrenToBack(\n        Node.newString(Token.NAME, name, lineno, charno));",
      "info" : "ExpressionStatement[42877-42963]:ExpressionStatement[42993-43079]"
    }, {
      "left" : "function.addChildToBack(parameterParen);",
      "right" : "function.addChildToBack(parameterParen);",
      "info" : "ExpressionStatement[42968-43008]:ExpressionStatement[43084-43124]"
    }, {
      "left" : "function.addChildToBack(body);",
      "right" : "function.addChildToBack(body);",
      "info" : "ExpressionStatement[43013-43043]:ExpressionStatement[43129-43159]"
    }, {
      "left" : "return function;",
      "right" : "return function;",
      "info" : "ReturnStatement[43048-43064]:ReturnStatement[43164-43180]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43354-43360]:Modifier[43470-43476]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[43361-43367]:Modifier[43477-43483]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[43368-43372]:SimpleType[43484-43488]"
    }, {
      "left" : "newQualifiedNameNode",
      "right" : "newQualifiedNameNode",
      "info" : "SimpleName[43373-43393]:SimpleName[43489-43509]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[43394-43405]:SingleVariableDeclaration[43510-43521]"
    }, {
      "left" : "int lineno",
      "right" : "int lineno",
      "info" : "SingleVariableDeclaration[43407-43417]:SingleVariableDeclaration[43523-43533]"
    }, {
      "left" : "int charno",
      "right" : "int charno",
      "info" : "SingleVariableDeclaration[43419-43429]:SingleVariableDeclaration[43535-43545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43431-44125]:Block[43547-44241]"
    }, {
      "left" : "int endPos = name.indexOf('.');",
      "right" : "int endPos = name.indexOf('.');",
      "info" : "VariableDeclarationStatement[43437-43468]:VariableDeclarationStatement[43553-43584]"
    }, {
      "left" : "if (endPos == -1)",
      "right" : "if (endPos == -1)",
      "info" : "IfStatement[43473-43561]:IfStatement[43589-43677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43491-43561]:Block[43607-43677]"
    }, {
      "left" : "return Node.newString(Token.NAME, name, lineno, charno);",
      "right" : "return Node.newString(Token.NAME, name, lineno, charno);",
      "info" : "ReturnStatement[43499-43555]:ReturnStatement[43615-43671]"
    }, {
      "left" : "Node node = Node.newString(Token.NAME, name.substring(0, endPos),\n                               lineno, charno);",
      "right" : "Node node = Node.newString(Token.NAME, name.substring(0, endPos),\n                               lineno, charno);",
      "info" : "VariableDeclarationStatement[43566-43679]:VariableDeclarationStatement[43682-43795]"
    }, {
      "left" : "int startPos;",
      "right" : "int startPos;",
      "info" : "VariableDeclarationStatement[43684-43697]:VariableDeclarationStatement[43800-43813]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[43702-44103]:DoStatement[43818-44219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43705-44081]:Block[43821-44197]"
    }, {
      "left" : "startPos = endPos + 1;",
      "right" : "startPos = endPos + 1;",
      "info" : "ExpressionStatement[43713-43735]:ExpressionStatement[43829-43851]"
    }, {
      "left" : "endPos = name.indexOf('.', startPos);",
      "right" : "endPos = name.indexOf('.', startPos);",
      "info" : "ExpressionStatement[43742-43779]:ExpressionStatement[43858-43895]"
    }, {
      "left" : "String part = (endPos == -1\n                     ? name.substring(startPos)\n                     : name.substring(startPos, endPos));",
      "right" : "String part = (endPos == -1\n                     ? name.substring(startPos)\n                     : name.substring(startPos, endPos));",
      "info" : "VariableDeclarationStatement[43786-43919]:VariableDeclarationStatement[43902-44035]"
    }, {
      "left" : "node = new Node(Token.GETPROP, node,\n                      Node.newString(Token.STRING, part, lineno, charno),\n                      lineno, charno);",
      "right" : "node = new Node(Token.GETPROP, node,\n                      Node.newString(Token.STRING, part, lineno, charno),\n                      lineno, charno);",
      "info" : "ExpressionStatement[43926-44075]:ExpressionStatement[44042-44191]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[44109-44121]:ReturnStatement[44225-44237]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[44656-44662]:Modifier[44772-44778]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[44663-44667]:SimpleType[44779-44783]"
    }, {
      "left" : "newQualifiedNameNode",
      "right" : "newQualifiedNameNode",
      "info" : "SimpleName[44668-44688]:SimpleName[44784-44804]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[44689-44700]:SingleVariableDeclaration[44805-44816]"
    }, {
      "left" : "Node basisNode",
      "right" : "Node basisNode",
      "info" : "SingleVariableDeclaration[44702-44716]:SingleVariableDeclaration[44818-44832]"
    }, {
      "left" : "String originalName",
      "right" : "String originalName",
      "info" : "SingleVariableDeclaration[44724-44743]:SingleVariableDeclaration[44840-44859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44745-44875]:Block[44861-44991]"
    }, {
      "left" : "Node node = newQualifiedNameNode(name, -1, -1);",
      "right" : "Node node = newQualifiedNameNode(name, -1, -1);",
      "info" : "VariableDeclarationStatement[44751-44798]:VariableDeclarationStatement[44867-44914]"
    }, {
      "left" : "setDebugInformation(node, basisNode, originalName);",
      "right" : "setDebugInformation(node, basisNode, originalName);",
      "info" : "ExpressionStatement[44803-44854]:ExpressionStatement[44919-44970]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[44859-44871]:ReturnStatement[44975-44987]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[45187-45193]:Modifier[45303-45309]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[45194-45198]:PrimitiveType[45310-45314]"
    }, {
      "left" : "setDebugInformation",
      "right" : "setDebugInformation",
      "info" : "SimpleName[45199-45218]:SimpleName[45315-45334]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[45219-45228]:SingleVariableDeclaration[45335-45344]"
    }, {
      "left" : "Node basisNode",
      "right" : "Node basisNode",
      "info" : "SingleVariableDeclaration[45230-45244]:SingleVariableDeclaration[45346-45360]"
    }, {
      "left" : "String originalName",
      "right" : "String originalName",
      "info" : "SingleVariableDeclaration[45280-45299]:SingleVariableDeclaration[45396-45415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45301-45410]:Block[45417-45526]"
    }, {
      "left" : "node.copyInformationFromForTree(basisNode);",
      "right" : "node.copyInformationFromForTree(basisNode);",
      "info" : "ExpressionStatement[45307-45350]:ExpressionStatement[45423-45466]"
    }, {
      "left" : "node.putProp(Node.ORIGINALNAME_PROP, originalName);",
      "right" : "node.putProp(Node.ORIGINALNAME_PROP, originalName);",
      "info" : "ExpressionStatement[45355-45406]:ExpressionStatement[45471-45522]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[45740-45746]:Modifier[45856-45862]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[45747-45751]:SimpleType[45863-45867]"
    }, {
      "left" : "newName",
      "right" : "newName",
      "info" : "SimpleName[45752-45759]:SimpleName[45868-45875]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[45760-45771]:SingleVariableDeclaration[45876-45887]"
    }, {
      "left" : "Node basisNode",
      "right" : "Node basisNode",
      "info" : "SingleVariableDeclaration[45773-45787]:SingleVariableDeclaration[45889-45903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45789-45914]:Block[45905-46030]"
    }, {
      "left" : "Node nameNode = Node.newString(Token.NAME, name);",
      "right" : "Node nameNode = Node.newString(Token.NAME, name);",
      "info" : "VariableDeclarationStatement[45795-45844]:VariableDeclarationStatement[45911-45960]"
    }, {
      "left" : "nameNode.copyInformationFrom(basisNode);",
      "right" : "nameNode.copyInformationFrom(basisNode);",
      "info" : "ExpressionStatement[45849-45889]:ExpressionStatement[45965-46005]"
    }, {
      "left" : "return nameNode;",
      "right" : "return nameNode;",
      "info" : "ReturnStatement[45894-45910]:ReturnStatement[46010-46026]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[46431-46437]:Modifier[46547-46553]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[46438-46442]:SimpleType[46554-46558]"
    }, {
      "left" : "newName",
      "right" : "newName",
      "info" : "SimpleName[46443-46450]:SimpleName[46559-46566]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[46451-46462]:SingleVariableDeclaration[46567-46578]"
    }, {
      "left" : "Node basisNode",
      "right" : "Node basisNode",
      "info" : "SingleVariableDeclaration[46464-46478]:SingleVariableDeclaration[46580-46594]"
    }, {
      "left" : "String originalName",
      "right" : "String originalName",
      "info" : "SingleVariableDeclaration[46480-46499]:SingleVariableDeclaration[46596-46615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46501-46633]:Block[46617-46749]"
    }, {
      "left" : "Node nameNode = newName(name, basisNode);",
      "right" : "Node nameNode = newName(name, basisNode);",
      "info" : "VariableDeclarationStatement[46507-46548]:VariableDeclarationStatement[46623-46664]"
    }, {
      "left" : "nameNode.putProp(Node.ORIGINALNAME_PROP, originalName);",
      "right" : "nameNode.putProp(Node.ORIGINALNAME_PROP, originalName);",
      "info" : "ExpressionStatement[46553-46608]:ExpressionStatement[46669-46724]"
    }, {
      "left" : "return nameNode;",
      "right" : "return nameNode;",
      "info" : "ReturnStatement[46613-46629]:ReturnStatement[46729-46745]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[47233-47239]:Modifier[47349-47355]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[47240-47247]:PrimitiveType[47356-47363]"
    }, {
      "left" : "isLatin",
      "right" : "isLatin",
      "info" : "SimpleName[47248-47255]:SimpleName[47364-47371]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[47256-47264]:SingleVariableDeclaration[47372-47380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47266-47504]:Block[47382-47620]"
    }, {
      "left" : "char LARGEST_BASIC_LATIN = 0x7f;",
      "right" : "char LARGEST_BASIC_LATIN = 0x7f;",
      "info" : "VariableDeclarationStatement[47272-47304]:VariableDeclarationStatement[47388-47420]"
    }, {
      "left" : "int len = s.length();",
      "right" : "int len = s.length();",
      "info" : "VariableDeclarationStatement[47309-47330]:VariableDeclarationStatement[47425-47446]"
    }, {
      "left" : "for (int index = 0; index < len; index++)",
      "right" : "for (int index = 0; index < len; index++)",
      "info" : "ForStatement[47335-47483]:ForStatement[47451-47599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47377-47483]:Block[47493-47599]"
    }, {
      "left" : "char c = s.charAt(index);",
      "right" : "char c = s.charAt(index);",
      "info" : "VariableDeclarationStatement[47385-47410]:VariableDeclarationStatement[47501-47526]"
    }, {
      "left" : "if (c > LARGEST_BASIC_LATIN)",
      "right" : "if (c > LARGEST_BASIC_LATIN)",
      "info" : "IfStatement[47417-47477]:IfStatement[47533-47593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47446-47477]:Block[47562-47593]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47456-47469]:ReturnStatement[47572-47585]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[47488-47500]:ReturnStatement[47604-47616]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[47660-47666]:Modifier[47776-47782]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[47667-47674]:PrimitiveType[47783-47790]"
    }, {
      "left" : "isValidPropertyName",
      "right" : "isValidPropertyName",
      "info" : "SimpleName[47675-47694]:SimpleName[47791-47810]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[47695-47706]:SingleVariableDeclaration[47811-47822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47708-48178]:Block[47824-48294]"
    }, {
      "left" : "return TokenStream.isJSIdentifier(name) &&\n        !TokenStream.isKeyword(name) &&\n        // no Unicode escaped characters - some browsers are less tolerant\n        // of Unicode characters that might be valid according to the\n        // language spec.\n        // Note that by this point, unicode escapes have been converted\n        // to UTF-16 characters, so we're only searching for character\n        // values, not escapes.\n        NodeUtil.isLatin(name);",
      "right" : "return TokenStream.isJSIdentifier(name) &&\n        !TokenStream.isKeyword(name) &&\n        // no Unicode escaped characters - some browsers are less tolerant\n        // of Unicode characters that might be valid according to the\n        // language spec.\n        // Note that by this point, unicode escapes have been converted\n        // to UTF-16 characters, so we're only searching for character\n        // values, not escapes.\n        NodeUtil.isLatin(name);",
      "info" : "ReturnStatement[47714-48174]:ReturnStatement[47830-48290]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48182-48189]:Modifier[48298-48305]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[48190-48196]:Modifier[48306-48312]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[48197-48202]:TYPE_DECLARATION_KIND[48313-48318]"
    }, {
      "left" : "VarCollector",
      "right" : "VarCollector",
      "info" : "SimpleName[48203-48215]:SimpleName[48319-48331]"
    }, {
      "left" : "Visitor",
      "right" : "Visitor",
      "info" : "SimpleType[48227-48234]:SimpleType[48343-48350]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[48302-48308]:Modifier[48418-48424]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[48309-48313]:PrimitiveType[48425-48429]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[48314-48319]:SimpleName[48430-48435]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[48320-48326]:SingleVariableDeclaration[48436-48442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48328-48615]:Block[48444-48731]"
    }, {
      "left" : "if (n.getType() == Token.NAME)",
      "right" : "if (n.getType() == Token.NAME)",
      "info" : "IfStatement[48336-48609]:IfStatement[48452-48725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48367-48609]:Block[48483-48725]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[48377-48405]:VariableDeclarationStatement[48493-48521]"
    }, {
      "left" : "if (parent != null && parent.getType() == Token.VAR)",
      "right" : "if (parent != null && parent.getType() == Token.VAR)",
      "info" : "IfStatement[48414-48601]:IfStatement[48530-48717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48467-48601]:Block[48583-48717]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[48479-48507]:VariableDeclarationStatement[48595-48623]"
    }, {
      "left" : "if (!vars.containsKey(name))",
      "right" : "if (!vars.containsKey(name))",
      "info" : "IfStatement[48518-48591]:IfStatement[48634-48707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48547-48591]:Block[48663-48707]"
    }, {
      "left" : "vars.put(name, n);",
      "right" : "vars.put(name, n);",
      "info" : "ExpressionStatement[48561-48579]:ExpressionStatement[48677-48695]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[48716-48722]:Modifier[48832-48838]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[48723-48729]:Modifier[48839-48845]"
    }, {
      "left" : "Collection<Node>",
      "right" : "Collection<Node>",
      "info" : "ParameterizedType[48730-48746]:ParameterizedType[48846-48862]"
    }, {
      "left" : "getVarsDeclaredInBranch",
      "right" : "getVarsDeclaredInBranch",
      "info" : "SimpleName[48747-48770]:SimpleName[48863-48886]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[48771-48780]:SingleVariableDeclaration[48887-48896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48782-48999]:Block[48898-49115]"
    }, {
      "left" : "VarCollector collector = new VarCollector();",
      "right" : "VarCollector collector = new VarCollector();",
      "info" : "VariableDeclarationStatement[48788-48832]:VariableDeclarationStatement[48904-48948]"
    }, {
      "left" : "visitPreOrder(\n        root,\n        collector,\n        Predicates.<Node>not(new NodeUtil.MatchNodeType(Token.FUNCTION)));",
      "right" : "visitPreOrder(\n        root,\n        collector,\n        Predicates.<Node>not(new NodeUtil.MatchNodeType(Token.FUNCTION)));",
      "info" : "ExpressionStatement[48837-48959]:ExpressionStatement[48953-49075]"
    }, {
      "left" : "return collector.vars.values();",
      "right" : "return collector.vars.values();",
      "info" : "ReturnStatement[48964-48995]:ReturnStatement[49080-49111]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[49121-49127]:Modifier[49237-49243]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[49128-49135]:PrimitiveType[49244-49251]"
    }, {
      "left" : "isPrototypePropertyDeclaration",
      "right" : "isPrototypePropertyDeclaration",
      "info" : "SimpleName[49136-49166]:SimpleName[49252-49282]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[49167-49173]:SingleVariableDeclaration[49283-49289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49175-49310]:Block[49291-49426]"
    }, {
      "left" : "if (!NodeUtil.isExprAssign(n))",
      "right" : "if (!NodeUtil.isExprAssign(n))",
      "info" : "IfStatement[49181-49239]:IfStatement[49297-49355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49212-49239]:Block[49328-49355]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[49220-49233]:ReturnStatement[49336-49349]"
    }, {
      "left" : "return isPrototypeProperty(n.getFirstChild().getFirstChild());",
      "right" : "return isPrototypeProperty(n.getFirstChild().getFirstChild());",
      "info" : "ReturnStatement[49244-49306]:ReturnStatement[49360-49422]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[49314-49320]:Modifier[49430-49436]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[49321-49328]:PrimitiveType[49437-49444]"
    }, {
      "left" : "isPrototypeProperty",
      "right" : "isPrototypeProperty",
      "info" : "SimpleName[49329-49348]:SimpleName[49445-49464]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[49349-49355]:SingleVariableDeclaration[49465-49471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49357-49550]:Block[49473-49666]"
    }, {
      "left" : "String lhsString = n.getQualifiedName();",
      "right" : "String lhsString = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[49363-49403]:VariableDeclarationStatement[49479-49519]"
    }, {
      "left" : "if (lhsString == null)",
      "right" : "if (lhsString == null)",
      "info" : "IfStatement[49408-49458]:IfStatement[49524-49574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49431-49458]:Block[49547-49574]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[49439-49452]:ReturnStatement[49555-49568]"
    }, {
      "left" : "int prototypeIdx = lhsString.indexOf(\".prototype.\");",
      "right" : "int prototypeIdx = lhsString.indexOf(\".prototype.\");",
      "info" : "VariableDeclarationStatement[49463-49515]:VariableDeclarationStatement[49579-49631]"
    }, {
      "left" : "return prototypeIdx != -1;",
      "right" : "return prototypeIdx != -1;",
      "info" : "ReturnStatement[49520-49546]:ReturnStatement[49636-49662]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[49630-49636]:Modifier[49746-49752]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[49637-49641]:SimpleType[49753-49757]"
    }, {
      "left" : "getPrototypeClassName",
      "right" : "getPrototypeClassName",
      "info" : "SimpleName[49642-49663]:SimpleName[49758-49779]"
    }, {
      "left" : "Node qName",
      "right" : "Node qName",
      "info" : "SingleVariableDeclaration[49664-49674]:SingleVariableDeclaration[49780-49790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49676-49913]:Block[49792-50029]"
    }, {
      "left" : "Node cur = qName;",
      "right" : "Node cur = qName;",
      "info" : "VariableDeclarationStatement[49682-49699]:VariableDeclarationStatement[49798-49815]"
    }, {
      "left" : "while (isGetProp(cur))",
      "right" : "while (isGetProp(cur))",
      "info" : "WhileStatement[49704-49892]:WhileStatement[49820-50008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49727-49892]:Block[49843-50008]"
    }, {
      "left" : "if (cur.getLastChild().getString().equals(\"prototype\"))",
      "right" : "if (cur.getLastChild().getString().equals(\"prototype\"))",
      "info" : "IfStatement[49735-49886]:IfStatement[49851-50002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49791-49836]:Block[49907-49952]"
    }, {
      "left" : "return cur.getFirstChild();",
      "right" : "return cur.getFirstChild();",
      "info" : "ReturnStatement[49801-49828]:ReturnStatement[49917-49944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49842-49886]:Block[49958-50002]"
    }, {
      "left" : "cur = cur.getFirstChild();",
      "right" : "cur = cur.getFirstChild();",
      "info" : "ExpressionStatement[49852-49878]:ExpressionStatement[49968-49994]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[49897-49909]:ReturnStatement[50013-50025]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[50003-50009]:Modifier[50119-50125]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[50010-50016]:SimpleType[50126-50132]"
    }, {
      "left" : "getPrototypePropertyName",
      "right" : "getPrototypePropertyName",
      "info" : "SimpleName[50017-50041]:SimpleName[50133-50157]"
    }, {
      "left" : "Node qName",
      "right" : "Node qName",
      "info" : "SingleVariableDeclaration[50042-50052]:SingleVariableDeclaration[50158-50168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50054-50275]:Block[50170-50391]"
    }, {
      "left" : "String qNameStr = qName.getQualifiedName();",
      "right" : "String qNameStr = qName.getQualifiedName();",
      "info" : "VariableDeclarationStatement[50060-50103]:VariableDeclarationStatement[50176-50219]"
    }, {
      "left" : "int prototypeIdx = qNameStr.lastIndexOf(\".prototype.\");",
      "right" : "int prototypeIdx = qNameStr.lastIndexOf(\".prototype.\");",
      "info" : "VariableDeclarationStatement[50108-50163]:VariableDeclarationStatement[50224-50279]"
    }, {
      "left" : "int memberIndex = prototypeIdx + \".prototype\".length() + 1;",
      "right" : "int memberIndex = prototypeIdx + \".prototype\".length() + 1;",
      "info" : "VariableDeclarationStatement[50168-50227]:VariableDeclarationStatement[50284-50343]"
    }, {
      "left" : "return qNameStr.substring(memberIndex);",
      "right" : "return qNameStr.substring(memberIndex);",
      "info" : "ReturnStatement[50232-50271]:ReturnStatement[50348-50387]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[50358-50364]:Modifier[50474-50480]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[50365-50369]:SimpleType[50481-50485]"
    }, {
      "left" : "newUndefinedNode",
      "right" : "newUndefinedNode",
      "info" : "SimpleName[50370-50386]:SimpleName[50486-50502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50389-50518]:Block[50505-50634]"
    }, {
      "left" : "return new Node(Token.VOID, Node.newNumber(0));",
      "right" : "return new Node(Token.VOID, Node.newNumber(0));",
      "info" : "ReturnStatement[50467-50514]:ReturnStatement[50583-50630]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[50613-50619]:Modifier[50729-50735]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[50620-50624]:SimpleType[50736-50740]"
    }, {
      "left" : "newVarNode",
      "right" : "newVarNode",
      "info" : "SimpleName[50625-50635]:SimpleName[50741-50751]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[50636-50647]:SingleVariableDeclaration[50752-50763]"
    }, {
      "left" : "Node value",
      "right" : "Node value",
      "info" : "SingleVariableDeclaration[50649-50659]:SingleVariableDeclaration[50765-50775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50661-50855]:Block[50777-50971]"
    }, {
      "left" : "Node nodeName = Node.newString(Token.NAME, name);",
      "right" : "Node nodeName = Node.newString(Token.NAME, name);",
      "info" : "VariableDeclarationStatement[50667-50716]:VariableDeclarationStatement[50783-50832]"
    }, {
      "left" : "if (value != null)",
      "right" : "if (value != null)",
      "info" : "IfStatement[50721-50788]:IfStatement[50837-50904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50740-50788]:Block[50856-50904]"
    }, {
      "left" : "nodeName.addChildrenToBack(value);",
      "right" : "nodeName.addChildrenToBack(value);",
      "info" : "ExpressionStatement[50748-50782]:ExpressionStatement[50864-50898]"
    }, {
      "left" : "Node var = new Node(Token.VAR, nodeName);",
      "right" : "Node var = new Node(Token.VAR, nodeName);",
      "info" : "VariableDeclarationStatement[50793-50834]:VariableDeclarationStatement[50909-50950]"
    }, {
      "left" : "return var;",
      "right" : "return var;",
      "info" : "ReturnStatement[50840-50851]:ReturnStatement[50956-50967]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[50937-50944]:Modifier[51053-51060]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[50945-50951]:Modifier[51061-51067]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[50952-50957]:TYPE_DECLARATION_KIND[51068-51073]"
    }, {
      "left" : "MatchNameNode",
      "right" : "MatchNameNode",
      "info" : "SimpleName[50958-50971]:SimpleName[51074-51087]"
    }, {
      "left" : "MatchNameNode",
      "right" : "MatchNameNode",
      "info" : "SimpleName[51028-51041]:SimpleName[51144-51157]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[51042-51053]:SingleVariableDeclaration[51158-51169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51054-51085]:Block[51170-51201]"
    }, {
      "left" : "this.name = name;",
      "right" : "this.name = name;",
      "info" : "ExpressionStatement[51062-51079]:ExpressionStatement[51178-51195]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[51091-51097]:Modifier[51207-51213]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[51098-51105]:PrimitiveType[51214-51221]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[51106-51111]:SimpleName[51222-51227]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[51112-51118]:SingleVariableDeclaration[51228-51234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51120-51207]:Block[51236-51323]"
    }, {
      "left" : "return n.getType() == Token.NAME\n          && n.getString().equals(name);",
      "right" : "return n.getType() == Token.NAME\n          && n.getString().equals(name);",
      "info" : "ReturnStatement[51128-51201]:ReturnStatement[51244-51317]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[51288-51294]:Modifier[51404-51410]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[51295-51300]:TYPE_DECLARATION_KIND[51411-51416]"
    }, {
      "left" : "MatchNodeType",
      "right" : "MatchNodeType",
      "info" : "SimpleName[51301-51314]:SimpleName[51417-51430]"
    }, {
      "left" : "MatchNodeType",
      "right" : "MatchNodeType",
      "info" : "SimpleName[51368-51381]:SimpleName[51484-51497]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[51382-51390]:SingleVariableDeclaration[51498-51506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51391-51422]:Block[51507-51538]"
    }, {
      "left" : "this.type = type;",
      "right" : "this.type = type;",
      "info" : "ExpressionStatement[51399-51416]:ExpressionStatement[51515-51532]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[51428-51434]:Modifier[51544-51550]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[51435-51442]:PrimitiveType[51551-51558]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[51443-51448]:SimpleName[51559-51564]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[51449-51455]:SingleVariableDeclaration[51565-51571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51457-51498]:Block[51573-51614]"
    }, {
      "left" : "return n.getType() == type;",
      "right" : "return n.getType() == type;",
      "info" : "ReturnStatement[51465-51492]:ReturnStatement[51581-51608]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[51568-51574]:Modifier[51684-51690]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[51575-51582]:PrimitiveType[51691-51698]"
    }, {
      "left" : "isNodeTypeReferenced",
      "right" : "isNodeTypeReferenced",
      "info" : "SimpleName[51583-51603]:SimpleName[51699-51719]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[51604-51613]:SingleVariableDeclaration[51720-51729]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[51615-51623]:SingleVariableDeclaration[51731-51739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51625-51706]:Block[51741-51822]"
    }, {
      "left" : "return isNodeTypeReferenced(node, type, Predicates.<Node>alwaysTrue());",
      "right" : "return isNodeTypeReferenced(node, type, Predicates.<Node>alwaysTrue());",
      "info" : "ReturnStatement[51631-51702]:ReturnStatement[51747-51818]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[51772-51778]:Modifier[51888-51894]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[51779-51786]:PrimitiveType[51895-51902]"
    }, {
      "left" : "isNodeTypeReferenced",
      "right" : "isNodeTypeReferenced",
      "info" : "SimpleName[51787-51807]:SimpleName[51903-51923]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[51815-51824]:SingleVariableDeclaration[51931-51940]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[51826-51834]:SingleVariableDeclaration[51942-51950]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[51836-51872]:SingleVariableDeclaration[51952-51988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51874-51948]:Block[51990-52064]"
    }, {
      "left" : "return has(node, new MatchNodeType(type), traverseChildrenPred);",
      "right" : "return has(node, new MatchNodeType(type), traverseChildrenPred);",
      "info" : "ReturnStatement[51880-51944]:ReturnStatement[51996-52060]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[52038-52044]:Modifier[52154-52160]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[52045-52048]:PrimitiveType[52161-52164]"
    }, {
      "left" : "getNodeTypeReferenceCount",
      "right" : "getNodeTypeReferenceCount",
      "info" : "SimpleName[52049-52074]:SimpleName[52165-52190]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[52075-52084]:SingleVariableDeclaration[52191-52200]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[52086-52094]:SingleVariableDeclaration[52202-52210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52096-52153]:Block[52212-52269]"
    }, {
      "left" : "return getCount(node, new MatchNodeType(type));",
      "right" : "return getCount(node, new MatchNodeType(type));",
      "info" : "ReturnStatement[52102-52149]:ReturnStatement[52218-52265]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[52232-52238]:Modifier[52348-52354]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[52239-52246]:PrimitiveType[52355-52362]"
    }, {
      "left" : "isNameReferenced",
      "right" : "isNameReferenced",
      "info" : "SimpleName[52247-52263]:SimpleName[52363-52379]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[52264-52273]:SingleVariableDeclaration[52380-52389]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[52309-52320]:SingleVariableDeclaration[52425-52436]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[52356-52392]:SingleVariableDeclaration[52472-52508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52394-52468]:Block[52510-52584]"
    }, {
      "left" : "return has(node, new MatchNameNode(name), traverseChildrenPred);",
      "right" : "return has(node, new MatchNameNode(name), traverseChildrenPred);",
      "info" : "ReturnStatement[52400-52464]:ReturnStatement[52516-52580]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[52547-52553]:Modifier[52663-52669]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[52554-52561]:PrimitiveType[52670-52677]"
    }, {
      "left" : "isNameReferenced",
      "right" : "isNameReferenced",
      "info" : "SimpleName[52562-52578]:SimpleName[52678-52694]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[52579-52588]:SingleVariableDeclaration[52695-52704]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[52590-52601]:SingleVariableDeclaration[52706-52717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52603-52680]:Block[52719-52796]"
    }, {
      "left" : "return isNameReferenced(node, name, Predicates.<Node>alwaysTrue());",
      "right" : "return isNameReferenced(node, name, Predicates.<Node>alwaysTrue());",
      "info" : "ReturnStatement[52609-52676]:ReturnStatement[52725-52792]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[52777-52783]:Modifier[52893-52899]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[52784-52787]:PrimitiveType[52900-52903]"
    }, {
      "left" : "getNameReferenceCount",
      "right" : "getNameReferenceCount",
      "info" : "SimpleName[52788-52809]:SimpleName[52904-52925]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[52810-52819]:SingleVariableDeclaration[52926-52935]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[52821-52832]:SingleVariableDeclaration[52937-52948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52834-52892]:Block[52950-53008]"
    }, {
      "left" : "return getCount(node, new MatchNameNode(name) );",
      "right" : "return getCount(node, new MatchNameNode(name) );",
      "info" : "ReturnStatement[52840-52888]:ReturnStatement[52956-53004]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[52988-52994]:Modifier[53104-53110]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[52995-53002]:PrimitiveType[53111-53118]"
    }, {
      "left" : "has",
      "right" : "has",
      "info" : "SimpleName[53003-53006]:SimpleName[53119-53122]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[53007-53016]:SingleVariableDeclaration[53123-53132]"
    }, {
      "left" : "Predicate<Node> pred",
      "right" : "Predicate<Node> pred",
      "info" : "SingleVariableDeclaration[53039-53059]:SingleVariableDeclaration[53155-53175]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[53082-53118]:SingleVariableDeclaration[53198-53234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53120-53423]:Block[53236-53539]"
    }, {
      "left" : "if (pred.apply(node))",
      "right" : "if (pred.apply(node))",
      "info" : "IfStatement[53126-53174]:IfStatement[53242-53290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53148-53174]:Block[53264-53290]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[53156-53168]:ReturnStatement[53272-53284]"
    }, {
      "left" : "if (!traverseChildrenPred.apply(node))",
      "right" : "if (!traverseChildrenPred.apply(node))",
      "info" : "IfStatement[53180-53246]:IfStatement[53296-53362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53219-53246]:Block[53335-53362]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[53227-53240]:ReturnStatement[53343-53356]"
    }, {
      "left" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[53252-53400]:ForStatement[53368-53516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53316-53400]:Block[53432-53516]"
    }, {
      "left" : "if (has(c, pred, traverseChildrenPred))",
      "right" : "if (has(c, pred, traverseChildrenPred))",
      "info" : "IfStatement[53324-53394]:IfStatement[53440-53510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53364-53394]:Block[53480-53510]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[53374-53386]:ReturnStatement[53490-53502]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[53406-53419]:ReturnStatement[53522-53535]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[53540-53546]:Modifier[53656-53662]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[53547-53550]:PrimitiveType[53663-53666]"
    }, {
      "left" : "getCount",
      "right" : "getCount",
      "info" : "SimpleName[53551-53559]:SimpleName[53667-53675]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[53560-53566]:SingleVariableDeclaration[53676-53682]"
    }, {
      "left" : "Predicate<Node> pred",
      "right" : "Predicate<Node> pred",
      "info" : "SingleVariableDeclaration[53568-53588]:SingleVariableDeclaration[53684-53704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53590-53788]:Block[53706-53904]"
    }, {
      "left" : "int total = 0;",
      "right" : "int total = 0;",
      "info" : "VariableDeclarationStatement[53596-53610]:VariableDeclarationStatement[53712-53726]"
    }, {
      "left" : "if (pred.apply(n))",
      "right" : "if (pred.apply(n))",
      "info" : "IfStatement[53616-53657]:IfStatement[53732-53773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53635-53657]:Block[53751-53773]"
    }, {
      "left" : "total++;",
      "right" : "total++;",
      "info" : "ExpressionStatement[53643-53651]:ExpressionStatement[53759-53767]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[53663-53765]:ForStatement[53779-53881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53724-53765]:Block[53840-53881]"
    }, {
      "left" : "total += getCount(c, pred);",
      "right" : "total += getCount(c, pred);",
      "info" : "ExpressionStatement[53732-53759]:ExpressionStatement[53848-53875]"
    }, {
      "left" : "return total;",
      "right" : "return total;",
      "info" : "ReturnStatement[53771-53784]:ReturnStatement[53887-53900]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[53867-53873]:Modifier[53983-53989]"
    }, {
      "left" : "interface",
      "right" : "interface",
      "info" : "TYPE_DECLARATION_KIND[53874-53883]:TYPE_DECLARATION_KIND[53990-53999]"
    }, {
      "left" : "Visitor",
      "right" : "Visitor",
      "info" : "SimpleName[53884-53891]:SimpleName[54000-54007]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[53898-53902]:PrimitiveType[54014-54018]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[53903-53908]:SimpleName[54019-54024]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[53909-53918]:SingleVariableDeclaration[54025-54034]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[54033-54039]:Modifier[54149-54155]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[54040-54044]:PrimitiveType[54156-54160]"
    }, {
      "left" : "visitPreOrder",
      "right" : "visitPreOrder",
      "info" : "SimpleName[54045-54058]:SimpleName[54161-54174]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[54059-54068]:SingleVariableDeclaration[54175-54184]"
    }, {
      "left" : "Visitor vistor",
      "right" : "Visitor vistor",
      "info" : "SingleVariableDeclaration[54091-54105]:SingleVariableDeclaration[54207-54221]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[54128-54164]:SingleVariableDeclaration[54244-54280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54166-54382]:Block[54282-54498]"
    }, {
      "left" : "vistor.visit(node);",
      "right" : "vistor.visit(node);",
      "info" : "ExpressionStatement[54172-54191]:ExpressionStatement[54288-54307]"
    }, {
      "left" : "if (traverseChildrenPred.apply(node))",
      "right" : "if (traverseChildrenPred.apply(node))",
      "info" : "IfStatement[54197-54378]:IfStatement[54313-54494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54235-54378]:Block[54351-54494]"
    }, {
      "left" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[54243-54372]:ForStatement[54359-54488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54307-54372]:Block[54423-54488]"
    }, {
      "left" : "visitPreOrder(c, vistor, traverseChildrenPred);",
      "right" : "visitPreOrder(c, vistor, traverseChildrenPred);",
      "info" : "ExpressionStatement[54317-54364]:ExpressionStatement[54433-54480]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[54492-54498]:Modifier[54608-54614]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[54499-54503]:PrimitiveType[54615-54619]"
    }, {
      "left" : "visitPostOrder",
      "right" : "visitPostOrder",
      "info" : "SimpleName[54504-54518]:SimpleName[54620-54634]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[54519-54528]:SingleVariableDeclaration[54635-54644]"
    }, {
      "left" : "Visitor vistor",
      "right" : "Visitor vistor",
      "info" : "SingleVariableDeclaration[54551-54565]:SingleVariableDeclaration[54667-54681]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[54588-54624]:SingleVariableDeclaration[54704-54740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54626-54843]:Block[54742-54959]"
    }, {
      "left" : "if (traverseChildrenPred.apply(node))",
      "right" : "if (traverseChildrenPred.apply(node))",
      "info" : "IfStatement[54632-54814]:IfStatement[54748-54930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54670-54814]:Block[54786-54930]"
    }, {
      "left" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[54678-54808]:ForStatement[54794-54924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54742-54808]:Block[54858-54924]"
    }, {
      "left" : "visitPostOrder(c, vistor, traverseChildrenPred);",
      "right" : "visitPostOrder(c, vistor, traverseChildrenPred);",
      "info" : "ExpressionStatement[54752-54800]:ExpressionStatement[54868-54916]"
    }, {
      "left" : "vistor.visit(node);",
      "right" : "vistor.visit(node);",
      "info" : "ExpressionStatement[54820-54839]:ExpressionStatement[54936-54955]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[54912-54918]:Modifier[55028-55034]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[54919-54926]:PrimitiveType[55035-55042]"
    }, {
      "left" : "hasFinally",
      "right" : "hasFinally",
      "info" : "SimpleName[54927-54937]:SimpleName[55043-55053]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[54938-54944]:SingleVariableDeclaration[55054-55060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54946-55045]:Block[55062-55161]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
      "info" : "ExpressionStatement[54952-55006]:ExpressionStatement[55068-55122]"
    }, {
      "left" : "return n.getChildCount() == 3;",
      "right" : "return n.getChildCount() == 3;",
      "info" : "ReturnStatement[55011-55041]:ReturnStatement[55127-55157]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[55139-55145]:Modifier[55255-55261]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[55146-55150]:SimpleType[55262-55266]"
    }, {
      "left" : "getCatchBlock",
      "right" : "getCatchBlock",
      "info" : "SimpleName[55151-55164]:SimpleName[55267-55280]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[55165-55171]:SingleVariableDeclaration[55281-55287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55173-55277]:Block[55289-55393]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
      "info" : "ExpressionStatement[55179-55233]:ExpressionStatement[55295-55349]"
    }, {
      "left" : "return n.getFirstChild().getNext();",
      "right" : "return n.getFirstChild().getNext();",
      "info" : "ReturnStatement[55238-55273]:ReturnStatement[55354-55389]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[55389-55395]:Modifier[55505-55511]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[55396-55403]:PrimitiveType[55512-55519]"
    }, {
      "left" : "hasCatchHandler",
      "right" : "hasCatchHandler",
      "info" : "SimpleName[55404-55419]:SimpleName[55520-55535]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[55420-55426]:SingleVariableDeclaration[55536-55542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55428-55568]:Block[55544-55684]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.BLOCK);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.BLOCK);",
      "info" : "ExpressionStatement[55434-55490]:ExpressionStatement[55550-55606]"
    }, {
      "left" : "return n.hasChildren() && n.getFirstChild().getType() == Token.CATCH;",
      "right" : "return n.hasChildren() && n.getFirstChild().getType() == Token.CATCH;",
      "info" : "ReturnStatement[55495-55564]:ReturnStatement[55611-55680]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[55678-55684]:Modifier[55794-55800]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[55685-55689]:SimpleType[55801-55805]"
    }, {
      "left" : "getFnParameters",
      "right" : "getFnParameters",
      "info" : "SimpleName[55690-55705]:SimpleName[55806-55821]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[55706-55717]:SingleVariableDeclaration[55822-55833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55719-55901]:Block[55835-56017]"
    }, {
      "left" : "Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);",
      "right" : "Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);",
      "info" : "ExpressionStatement[55789-55853]:ExpressionStatement[55905-55969]"
    }, {
      "left" : "return fnNode.getFirstChild().getNext();",
      "right" : "return fnNode.getFirstChild().getNext();",
      "info" : "ReturnStatement[55857-55897]:ReturnStatement[55973-56013]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[56607-56613]:Modifier[56723-56729]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[56614-56621]:PrimitiveType[56730-56737]"
    }, {
      "left" : "isConstantName",
      "right" : "isConstantName",
      "info" : "SimpleName[56622-56636]:SimpleName[56738-56752]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[56637-56646]:SingleVariableDeclaration[56753-56762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56648-56708]:Block[56764-56824]"
    }, {
      "left" : "return node.getBooleanProp(Node.IS_CONSTANT_NAME);",
      "right" : "return node.getBooleanProp(Node.IS_CONSTANT_NAME);",
      "info" : "ReturnStatement[56654-56704]:ReturnStatement[56770-56820]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[56802-56808]:Modifier[56918-56924]"
    }, {
      "left" : "JSDocInfo",
      "right" : "JSDocInfo",
      "info" : "SimpleType[56809-56818]:SimpleType[56925-56934]"
    }, {
      "left" : "getInfoForNameNode",
      "right" : "getInfoForNameNode",
      "info" : "SimpleName[56819-56837]:SimpleName[56935-56953]"
    }, {
      "left" : "Node nameNode",
      "right" : "Node nameNode",
      "info" : "SingleVariableDeclaration[56838-56851]:SingleVariableDeclaration[56954-56967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56853-57237]:Block[56969-57353]"
    }, {
      "left" : "JSDocInfo info = null;",
      "right" : "JSDocInfo info = null;",
      "info" : "VariableDeclarationStatement[56859-56881]:VariableDeclarationStatement[56975-56997]"
    }, {
      "left" : "Node parent = null;",
      "right" : "Node parent = null;",
      "info" : "VariableDeclarationStatement[56886-56905]:VariableDeclarationStatement[57002-57021]"
    }, {
      "left" : "if (nameNode != null)",
      "right" : "if (nameNode != null)",
      "info" : "IfStatement[56910-57014]:IfStatement[57026-57130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56932-57014]:Block[57048-57130]"
    }, {
      "left" : "info = nameNode.getJSDocInfo();",
      "right" : "info = nameNode.getJSDocInfo();",
      "info" : "ExpressionStatement[56940-56971]:ExpressionStatement[57056-57087]"
    }, {
      "left" : "parent = nameNode.getParent();",
      "right" : "parent = nameNode.getParent();",
      "info" : "ExpressionStatement[56978-57008]:ExpressionStatement[57094-57124]"
    }, {
      "left" : "if (info == null && parent != null &&\n        ((parent.getType() == Token.VAR && parent.hasOneChild()) ||\n          parent.getType() == Token.FUNCTION))",
      "right" : "if (info == null && parent != null &&\n        ((parent.getType() == Token.VAR && parent.hasOneChild()) ||\n          parent.getType() == Token.FUNCTION))",
      "info" : "IfStatement[57020-57216]:IfStatement[57136-57332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57173-57216]:Block[57289-57332]"
    }, {
      "left" : "info = parent.getJSDocInfo();",
      "right" : "info = parent.getJSDocInfo();",
      "info" : "ExpressionStatement[57181-57210]:ExpressionStatement[57297-57326]"
    }, {
      "left" : "return info;",
      "right" : "return info;",
      "info" : "ReturnStatement[57221-57233]:ReturnStatement[57337-57349]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[57345-57351]:Modifier[57461-57467]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[57352-57358]:SimpleType[57468-57474]"
    }, {
      "left" : "getSourceName",
      "right" : "getSourceName",
      "info" : "SimpleName[57359-57372]:SimpleName[57475-57488]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[57373-57379]:SingleVariableDeclaration[57489-57495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57381-57577]:Block[57497-57693]"
    }, {
      "left" : "String sourceName = null;",
      "right" : "String sourceName = null;",
      "info" : "VariableDeclarationStatement[57387-57412]:VariableDeclarationStatement[57503-57528]"
    }, {
      "left" : "while (sourceName == null && n != null)",
      "right" : "while (sourceName == null && n != null)",
      "info" : "WhileStatement[57417-57550]:WhileStatement[57533-57666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57457-57550]:Block[57573-57666]"
    }, {
      "left" : "sourceName = (String) n.getProp(Node.SOURCENAME_PROP);",
      "right" : "sourceName = (String) n.getProp(Node.SOURCENAME_PROP);",
      "info" : "ExpressionStatement[57465-57519]:ExpressionStatement[57581-57635]"
    }, {
      "left" : "n = n.getParent();",
      "right" : "n = n.getParent();",
      "info" : "ExpressionStatement[57526-57544]:ExpressionStatement[57642-57660]"
    }, {
      "left" : "return sourceName;",
      "right" : "return sourceName;",
      "info" : "ReturnStatement[57555-57573]:ReturnStatement[57671-57689]"
    } ]
  },
  "interFileMappings" : { }
}