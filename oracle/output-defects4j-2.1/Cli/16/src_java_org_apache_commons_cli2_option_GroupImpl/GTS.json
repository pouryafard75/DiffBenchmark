{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "GroupImpl",
      "right" : "GroupImpl",
      "info" : "TypeDeclaration[1532-15711]:TypeDeclaration[1532-15747]"
    }, {
      "left" : "private final String name;",
      "right" : "private final String name;",
      "info" : "FieldDeclaration[1639-1665]:FieldDeclaration[1639-1665]"
    }, {
      "left" : "private final String description;",
      "right" : "private final String description;",
      "info" : "FieldDeclaration[1670-1703]:FieldDeclaration[1670-1703]"
    }, {
      "left" : "private final List options;",
      "right" : "private final List options;",
      "info" : "FieldDeclaration[1708-1735]:FieldDeclaration[1708-1735]"
    }, {
      "left" : "private final int minimum;",
      "right" : "private final int minimum;",
      "info" : "FieldDeclaration[1740-1766]:FieldDeclaration[1740-1766]"
    }, {
      "left" : "private final int maximum;",
      "right" : "private final int maximum;",
      "info" : "FieldDeclaration[1771-1797]:FieldDeclaration[1771-1797]"
    }, {
      "left" : "private final List anonymous;",
      "right" : "private final List anonymous;",
      "info" : "FieldDeclaration[1802-1831]:FieldDeclaration[1802-1831]"
    }, {
      "left" : "private final SortedMap optionMap;",
      "right" : "private final SortedMap optionMap;",
      "info" : "FieldDeclaration[1836-1870]:FieldDeclaration[1836-1870]"
    }, {
      "left" : "private final Set prefixes;",
      "right" : "private final Set prefixes;",
      "info" : "FieldDeclaration[1875-1902]:FieldDeclaration[1875-1902]"
    }, {
      "left" : "public GroupImpl(final List options,\n                     final String name,\n                     final String description,\n                     final int minimum,\n                     final int maximum)",
      "right" : "public GroupImpl(final List options,\n                     final String name,\n                     final String description,\n                     final int minimum,\n                     final int maximum)",
      "info" : "MethodDeclaration[1908-4000]:MethodDeclaration[1908-4036]"
    }, {
      "left" : "public boolean canProcess(final WriteableCommandLine commandLine,\n                              final String arg)",
      "right" : "public boolean canProcess(final WriteableCommandLine commandLine,\n                              final String arg)",
      "info" : "MethodDeclaration[4006-4910]:MethodDeclaration[4042-4946]"
    }, {
      "left" : "public Set getPrefixes()",
      "right" : "public Set getPrefixes()",
      "info" : "MethodDeclaration[4916-4973]:MethodDeclaration[4952-5009]"
    }, {
      "left" : "public Set getTriggers()",
      "right" : "public Set getTriggers()",
      "info" : "MethodDeclaration[4979-5046]:MethodDeclaration[5015-5082]"
    }, {
      "left" : "public void process(final WriteableCommandLine commandLine,\n                        final ListIterator arguments)\n        throws OptionException",
      "right" : "public void process(final WriteableCommandLine commandLine,\n                        final ListIterator arguments)\n        throws OptionException",
      "info" : "MethodDeclaration[5052-8099]:MethodDeclaration[5088-8135]"
    }, {
      "left" : "public void validate(final WriteableCommandLine commandLine)\n        throws OptionException",
      "right" : "public void validate(final WriteableCommandLine commandLine)\n        throws OptionException",
      "info" : "MethodDeclaration[8105-9563]:MethodDeclaration[8141-9599]"
    }, {
      "left" : "public String getPreferredName()",
      "right" : "public String getPreferredName()",
      "info" : "MethodDeclaration[9569-9630]:MethodDeclaration[9605-9666]"
    }, {
      "left" : "public String getDescription()",
      "right" : "public String getDescription()",
      "info" : "MethodDeclaration[9636-9702]:MethodDeclaration[9672-9738]"
    }, {
      "left" : "public void appendUsage(final StringBuffer buffer,\n                            final Set helpSettings,\n                            final Comparator comp)",
      "right" : "public void appendUsage(final StringBuffer buffer,\n                            final Set helpSettings,\n                            final Comparator comp)",
      "info" : "MethodDeclaration[9708-9923]:MethodDeclaration[9744-9959]"
    }, {
      "left" : "public void appendUsage(final StringBuffer buffer,\n                            final Set helpSettings,\n                            final Comparator comp,\n                            final String separator)",
      "right" : "public void appendUsage(final StringBuffer buffer,\n                            final Set helpSettings,\n                            final Comparator comp,\n                            final String separator)",
      "info" : "MethodDeclaration[9929-12815]:MethodDeclaration[9965-12851]"
    }, {
      "left" : "public List helpLines(final int depth,\n                          final Set helpSettings,\n                          final Comparator comp)",
      "right" : "public List helpLines(final int depth,\n                          final Set helpSettings,\n                          final Comparator comp)",
      "info" : "MethodDeclaration[12821-14272]:MethodDeclaration[12857-14308]"
    }, {
      "left" : "public List getOptions()",
      "right" : "public List getOptions()",
      "info" : "MethodDeclaration[14278-14502]:MethodDeclaration[14314-14538]"
    }, {
      "left" : "public List getAnonymous()",
      "right" : "public List getAnonymous()",
      "info" : "MethodDeclaration[14508-14685]:MethodDeclaration[14544-14721]"
    }, {
      "left" : "public Option findOption(final String trigger)",
      "right" : "public Option findOption(final String trigger)",
      "info" : "MethodDeclaration[14691-15052]:MethodDeclaration[14727-15088]"
    }, {
      "left" : "public int getMinimum()",
      "right" : "public int getMinimum()",
      "info" : "MethodDeclaration[15058-15113]:MethodDeclaration[15094-15149]"
    }, {
      "left" : "public int getMaximum()",
      "right" : "public int getMaximum()",
      "info" : "MethodDeclaration[15119-15174]:MethodDeclaration[15155-15210]"
    }, {
      "left" : "public boolean isRequired()",
      "right" : "public boolean isRequired()",
      "info" : "MethodDeclaration[15180-15248]:MethodDeclaration[15216-15284]"
    }, {
      "left" : "public void defaults(final WriteableCommandLine commandLine)",
      "right" : "public void defaults(final WriteableCommandLine commandLine)",
      "info" : "MethodDeclaration[15254-15709]:MethodDeclaration[15290-15745]"
    }, {
      "left" : "ReverseStringComparator",
      "right" : "ReverseStringComparator",
      "info" : "TypeDeclaration[15714-16347]:TypeDeclaration[15750-16383]"
    }, {
      "left" : "private static final Comparator instance = new ReverseStringComparator();",
      "right" : "private static final Comparator instance = new ReverseStringComparator();",
      "info" : "FieldDeclaration[15772-15845]:FieldDeclaration[15808-15881]"
    }, {
      "left" : "private ReverseStringComparator()",
      "right" : "private ReverseStringComparator()",
      "info" : "MethodDeclaration[15851-15944]:MethodDeclaration[15887-15980]"
    }, {
      "left" : "public static final Comparator getInstance()",
      "right" : "public static final Comparator getInstance()",
      "info" : "MethodDeclaration[15950-16143]:MethodDeclaration[15986-16179]"
    }, {
      "left" : "public int compare(final Object o1,\n                       final Object o2)",
      "right" : "public int compare(final Object o1,\n                       final Object o2)",
      "info" : "MethodDeclaration[16149-16345]:MethodDeclaration[16185-16381]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2526-4000]:Block[2526-4036]"
    }, {
      "left" : "super(0, false);",
      "right" : "super(0, false);",
      "info" : "SuperConstructorInvocation[2536-2552]:SuperConstructorInvocation[2536-2552]"
    }, {
      "left" : "this.name = name;",
      "right" : "this.name = name;",
      "info" : "ExpressionStatement[2562-2579]:ExpressionStatement[2562-2579]"
    }, {
      "left" : "this.description = description;",
      "right" : "this.description = description;",
      "info" : "ExpressionStatement[2588-2619]:ExpressionStatement[2588-2619]"
    }, {
      "left" : "this.minimum = minimum;",
      "right" : "this.minimum = minimum;",
      "info" : "ExpressionStatement[2628-2651]:ExpressionStatement[2628-2651]"
    }, {
      "left" : "this.maximum = maximum;",
      "right" : "this.maximum = maximum;",
      "info" : "ExpressionStatement[2660-2683]:ExpressionStatement[2660-2683]"
    }, {
      "left" : "this.options = Collections.unmodifiableList(options);",
      "right" : "this.options = Collections.unmodifiableList(options);",
      "info" : "ExpressionStatement[2774-2827]:ExpressionStatement[2774-2827]"
    }, {
      "left" : "final List newAnonymous = new ArrayList();",
      "right" : "final List newAnonymous = new ArrayList();",
      "info" : "VariableDeclarationStatement[2885-2927]:VariableDeclarationStatement[2885-2927]"
    }, {
      "left" : "final SortedMap newOptionMap = new TreeMap(ReverseStringComparator.getInstance());",
      "right" : "final SortedMap newOptionMap = new TreeMap(ReverseStringComparator.getInstance());",
      "info" : "VariableDeclarationStatement[2999-3081]:VariableDeclarationStatement[2999-3081]"
    }, {
      "left" : "final Set newPrefixes = new HashSet();",
      "right" : "final Set newPrefixes = new HashSet();",
      "info" : "VariableDeclarationStatement[3129-3167]:VariableDeclarationStatement[3129-3167]"
    }, {
      "left" : "for (final Iterator i = options.iterator(); i.hasNext())",
      "right" : "for (final Iterator i = options.iterator(); i.hasNext())",
      "info" : "ForStatement[3208-3784]:ForStatement[3208-3820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3266-3784]:Block[3266-3820]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[3280-3320]:VariableDeclarationStatement[3280-3320]"
    }, {
      "left" : "if (option instanceof Argument)",
      "right" : "if (option instanceof Argument)",
      "info" : "IfStatement[3334-3774]:IfStatement[3370-3810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3366-3451]:Block[3402-3487]"
    }, {
      "left" : "i.remove();",
      "right" : "i.remove();",
      "info" : "ExpressionStatement[3384-3395]:ExpressionStatement[3420-3431]"
    }, {
      "left" : "newAnonymous.add(option);",
      "right" : "newAnonymous.add(option);",
      "info" : "ExpressionStatement[3412-3437]:ExpressionStatement[3448-3473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3457-3774]:Block[3493-3810]"
    }, {
      "left" : "final Set triggers = option.getTriggers();",
      "right" : "final Set triggers = option.getTriggers();",
      "info" : "VariableDeclarationStatement[3475-3517]:VariableDeclarationStatement[3511-3553]"
    }, {
      "left" : "for (Iterator j = triggers.iterator(); j.hasNext())",
      "right" : "for (Iterator j = triggers.iterator(); j.hasNext())",
      "info" : "ForStatement[3535-3663]:ForStatement[3571-3699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3588-3663]:Block[3624-3699]"
    }, {
      "left" : "newOptionMap.put(j.next(), option);",
      "right" : "newOptionMap.put(j.next(), option);",
      "info" : "ExpressionStatement[3610-3645]:ExpressionStatement[3646-3681]"
    }, {
      "left" : "newPrefixes.addAll(option.getPrefixes());",
      "right" : "newPrefixes.addAll(option.getPrefixes());",
      "info" : "ExpressionStatement[3719-3760]:ExpressionStatement[3755-3796]"
    }, {
      "left" : "this.anonymous = Collections.unmodifiableList(newAnonymous);",
      "right" : "this.anonymous = Collections.unmodifiableList(newAnonymous);",
      "info" : "ExpressionStatement[3794-3854]:ExpressionStatement[3830-3890]"
    }, {
      "left" : "this.optionMap = Collections.unmodifiableSortedMap(newOptionMap);",
      "right" : "this.optionMap = Collections.unmodifiableSortedMap(newOptionMap);",
      "info" : "ExpressionStatement[3863-3928]:ExpressionStatement[3899-3964]"
    }, {
      "left" : "this.prefixes = Collections.unmodifiableSet(newPrefixes);",
      "right" : "this.prefixes = Collections.unmodifiableSet(newPrefixes);",
      "info" : "ExpressionStatement[3937-3994]:ExpressionStatement[3973-4030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4120-4910]:Block[4156-4946]"
    }, {
      "left" : "if (arg == null)",
      "right" : "if (arg == null)",
      "info" : "IfStatement[4130-4184]:IfStatement[4166-4220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4147-4184]:Block[4183-4220]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4161-4174]:ReturnStatement[4197-4210]"
    }, {
      "left" : "if (optionMap.containsKey(arg))",
      "right" : "if (optionMap.containsKey(arg))",
      "info" : "IfStatement[4238-4306]:IfStatement[4274-4342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4270-4306]:Block[4306-4342]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4284-4296]:ReturnStatement[4320-4332]"
    }, {
      "left" : "final Map tailMap = optionMap.tailMap(arg);",
      "right" : "final Map tailMap = optionMap.tailMap(arg);",
      "info" : "VariableDeclarationStatement[4334-4377]:VariableDeclarationStatement[4370-4413]"
    }, {
      "left" : "for (final Iterator iter = tailMap.values().iterator(); iter.hasNext())",
      "right" : "for (final Iterator iter = tailMap.values().iterator(); iter.hasNext())",
      "info" : "ForStatement[4428-4667]:ForStatement[4464-4703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4501-4667]:Block[4537-4703]"
    }, {
      "left" : "final Option option = (Option) iter.next();",
      "right" : "final Option option = (Option) iter.next();",
      "info" : "VariableDeclarationStatement[4515-4558]:VariableDeclarationStatement[4551-4594]"
    }, {
      "left" : "if (option.canProcess(commandLine, arg))",
      "right" : "if (option.canProcess(commandLine, arg))",
      "info" : "IfStatement[4572-4657]:IfStatement[4608-4693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4613-4657]:Block[4649-4693]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4631-4643]:ReturnStatement[4667-4679]"
    }, {
      "left" : "if (commandLine.looksLikeOption(arg))",
      "right" : "if (commandLine.looksLikeOption(arg))",
      "info" : "IfStatement[4677-4752]:IfStatement[4713-4788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4715-4752]:Block[4751-4788]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4729-4742]:ReturnStatement[4765-4778]"
    }, {
      "left" : "if (anonymous.size() > 0)",
      "right" : "if (anonymous.size() > 0)",
      "info" : "IfStatement[4819-4881]:IfStatement[4855-4917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4845-4881]:Block[4881-4917]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4859-4871]:ReturnStatement[4895-4907]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4891-4904]:ReturnStatement[4927-4940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4941-4973]:Block[4977-5009]"
    }, {
      "left" : "return prefixes;",
      "right" : "return prefixes;",
      "info" : "ReturnStatement[4951-4967]:ReturnStatement[4987-5003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5004-5046]:Block[5040-5082]"
    }, {
      "left" : "return optionMap.keySet();",
      "right" : "return optionMap.keySet();",
      "info" : "ReturnStatement[5014-5040]:ReturnStatement[5050-5076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5197-8099]:Block[5233-8135]"
    }, {
      "left" : "String previous = null;",
      "right" : "String previous = null;",
      "info" : "VariableDeclarationStatement[5207-5230]:VariableDeclarationStatement[5243-5266]"
    }, {
      "left" : "while (arguments.hasNext())",
      "right" : "while (arguments.hasNext())",
      "info" : "WhileStatement[5290-8053]:WhileStatement[5326-8089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5318-8053]:Block[5354-8089]"
    }, {
      "left" : "final String arg = (String) arguments.next();",
      "right" : "final String arg = (String) arguments.next();",
      "info" : "VariableDeclarationStatement[5370-5415]:VariableDeclarationStatement[5406-5451]"
    }, {
      "left" : "if (arg == previous)",
      "right" : "if (arg == previous)",
      "info" : "IfStatement[5491-5627]:IfStatement[5527-5663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5512-5627]:Block[5548-5663]"
    }, {
      "left" : "arguments.previous();",
      "right" : "arguments.previous();",
      "info" : "ExpressionStatement[5568-5589]:ExpressionStatement[5604-5625]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5607-5613]:BreakStatement[5643-5649]"
    }, {
      "left" : "previous = arg;",
      "right" : "previous = arg;",
      "info" : "ExpressionStatement[5689-5704]:ExpressionStatement[5725-5740]"
    }, {
      "left" : "final Option opt = (Option) optionMap.get(arg);",
      "right" : "final Option opt = (Option) optionMap.get(arg);",
      "info" : "VariableDeclarationStatement[5718-5765]:VariableDeclarationStatement[5754-5801]"
    }, {
      "left" : "if (opt != null)",
      "right" : "if (opt != null)",
      "info" : "IfStatement[5807-8018]:IfStatement[5843-8054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5824-5930]:Block[5860-5966]"
    }, {
      "left" : "arguments.previous();",
      "right" : "arguments.previous();",
      "info" : "ExpressionStatement[5842-5863]:ExpressionStatement[5878-5899]"
    }, {
      "left" : "opt.process(commandLine, arguments);",
      "right" : "opt.process(commandLine, arguments);",
      "info" : "ExpressionStatement[5880-5916]:ExpressionStatement[5916-5952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5987-8018]:Block[6023-8054]"
    }, {
      "left" : "if (commandLine.looksLikeOption(arg))",
      "right" : "if (commandLine.looksLikeOption(arg))",
      "info" : "IfStatement[6126-7970]:IfStatement[6162-8006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6164-7024]:Block[6200-7060]"
    }, {
      "left" : "final Collection values = optionMap.tailMap(arg).values();",
      "right" : "final Collection values = optionMap.tailMap(arg).values();",
      "info" : "VariableDeclarationStatement[6227-6285]:VariableDeclarationStatement[6263-6321]"
    }, {
      "left" : "boolean foundMemberOption = false;",
      "right" : "boolean foundMemberOption = false;",
      "info" : "VariableDeclarationStatement[6307-6341]:VariableDeclarationStatement[6343-6377]"
    }, {
      "left" : "for (Iterator i = values.iterator(); i.hasNext() && !foundMemberOption)",
      "right" : "for (Iterator i = values.iterator(); i.hasNext() && !foundMemberOption)",
      "info" : "ForStatement[6363-6790]:ForStatement[6399-6826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6436-6790]:Block[6472-6826]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[6462-6502]:VariableDeclarationStatement[6498-6538]"
    }, {
      "left" : "if (option.canProcess(commandLine, arg))",
      "right" : "if (option.canProcess(commandLine, arg))",
      "info" : "IfStatement[6528-6768]:IfStatement[6564-6804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6569-6768]:Block[6605-6804]"
    }, {
      "left" : "foundMemberOption = true;",
      "right" : "foundMemberOption = true;",
      "info" : "ExpressionStatement[6599-6624]:ExpressionStatement[6635-6660]"
    }, {
      "left" : "arguments.previous();",
      "right" : "arguments.previous();",
      "info" : "ExpressionStatement[6653-6674]:ExpressionStatement[6689-6710]"
    }, {
      "left" : "option.process(commandLine, arguments);",
      "right" : "option.process(commandLine, arguments);",
      "info" : "ExpressionStatement[6703-6742]:ExpressionStatement[6739-6778]"
    }, {
      "left" : "if (!foundMemberOption)",
      "right" : "if (!foundMemberOption)",
      "info" : "IfStatement[6880-7006]:IfStatement[6916-7042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6904-7006]:Block[6940-7042]"
    }, {
      "left" : "arguments.previous();",
      "right" : "arguments.previous();",
      "info" : "ExpressionStatement[6930-6951]:ExpressionStatement[6966-6987]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6977-6984]:ReturnStatement[7013-7020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7133-7970]:Block[7169-8006]"
    }, {
      "left" : "arguments.previous();",
      "right" : "arguments.previous();",
      "info" : "ExpressionStatement[7221-7242]:ExpressionStatement[7257-7278]"
    }, {
      "left" : "if (anonymous.isEmpty())",
      "right" : "if (anonymous.isEmpty())",
      "info" : "IfStatement[7389-7468]:IfStatement[7425-7504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7414-7468]:Block[7450-7504]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7440-7446]:BreakStatement[7476-7482]"
    }, {
      "left" : "for (final Iterator i = anonymous.iterator(); i.hasNext())",
      "right" : "for (final Iterator i = anonymous.iterator(); i.hasNext())",
      "info" : "ForStatement[7626-7952]:ForStatement[7662-7988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7686-7952]:Block[7722-7988]"
    }, {
      "left" : "final Argument argument = (Argument) i.next();",
      "right" : "final Argument argument = (Argument) i.next();",
      "info" : "VariableDeclarationStatement[7712-7758]:VariableDeclarationStatement[7748-7794]"
    }, {
      "left" : "if (argument.canProcess(commandLine, arguments))",
      "right" : "if (argument.canProcess(commandLine, arguments))",
      "info" : "IfStatement[7784-7930]:IfStatement[7820-7966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7833-7930]:Block[7869-7966]"
    }, {
      "left" : "argument.process(commandLine, arguments);",
      "right" : "argument.process(commandLine, arguments);",
      "info" : "ExpressionStatement[7863-7904]:ExpressionStatement[7899-7940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8197-9563]:Block[8233-9599]"
    }, {
      "left" : "int present = 0;",
      "right" : "int present = 0;",
      "info" : "VariableDeclarationStatement[8242-8258]:VariableDeclarationStatement[8278-8294]"
    }, {
      "left" : "Option unexpected = null;",
      "right" : "Option unexpected = null;",
      "info" : "VariableDeclarationStatement[8316-8341]:VariableDeclarationStatement[8352-8377]"
    }, {
      "left" : "for (final Iterator i = options.iterator(); i.hasNext())",
      "right" : "for (final Iterator i = options.iterator(); i.hasNext())",
      "info" : "ForStatement[8351-8965]:ForStatement[8387-9001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8409-8965]:Block[8445-9001]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[8423-8463]:VariableDeclarationStatement[8459-8499]"
    }, {
      "left" : "boolean validate = option.isRequired() || option instanceof Group;",
      "right" : "boolean validate = option.isRequired() || option instanceof Group;",
      "info" : "VariableDeclarationStatement[8510-8576]:VariableDeclarationStatement[8546-8612]"
    }, {
      "left" : "if (commandLine.hasOption(option))",
      "right" : "if (commandLine.hasOption(option))",
      "info" : "IfStatement[8653-8866]:IfStatement[8689-8902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8688-8866]:Block[8724-8902]"
    }, {
      "left" : "if (++present > maximum)",
      "right" : "if (++present > maximum)",
      "info" : "IfStatement[8706-8819]:IfStatement[8742-8855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8731-8819]:Block[8767-8855]"
    }, {
      "left" : "unexpected = option;",
      "right" : "unexpected = option;",
      "info" : "ExpressionStatement[8753-8773]:ExpressionStatement[8789-8809]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8795-8801]:BreakStatement[8831-8837]"
    }, {
      "left" : "validate = true;",
      "right" : "validate = true;",
      "info" : "ExpressionStatement[8836-8852]:ExpressionStatement[8872-8888]"
    }, {
      "left" : "if (validate)",
      "right" : "if (validate)",
      "info" : "IfStatement[8880-8955]:IfStatement[8916-8991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8894-8955]:Block[8930-8991]"
    }, {
      "left" : "option.validate(commandLine);",
      "right" : "option.validate(commandLine);",
      "info" : "ExpressionStatement[8912-8941]:ExpressionStatement[8948-8977]"
    }, {
      "left" : "if (unexpected != null)",
      "right" : "if (unexpected != null)",
      "info" : "IfStatement[9003-9188]:IfStatement[9039-9224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9027-9188]:Block[9063-9224]"
    }, {
      "left" : "throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,\n                                      unexpected.getPreferredName());",
      "right" : "throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,\n                                      unexpected.getPreferredName());",
      "info" : "ThrowStatement[9041-9178]:ThrowStatement[9077-9214]"
    }, {
      "left" : "if (present < minimum)",
      "right" : "if (present < minimum)",
      "info" : "IfStatement[9224-9337]:IfStatement[9260-9373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9247-9337]:Block[9283-9373]"
    }, {
      "left" : "throw new OptionException(this, ResourceConstants.MISSING_OPTION);",
      "right" : "throw new OptionException(this, ResourceConstants.MISSING_OPTION);",
      "info" : "ThrowStatement[9261-9327]:ThrowStatement[9297-9363]"
    }, {
      "left" : "for (final Iterator i = anonymous.iterator(); i.hasNext())",
      "right" : "for (final Iterator i = anonymous.iterator(); i.hasNext())",
      "info" : "ForStatement[9391-9557]:ForStatement[9427-9593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9451-9557]:Block[9487-9593]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[9465-9505]:VariableDeclarationStatement[9501-9541]"
    }, {
      "left" : "option.validate(commandLine);",
      "right" : "option.validate(commandLine);",
      "info" : "ExpressionStatement[9518-9547]:ExpressionStatement[9554-9583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9602-9630]:Block[9638-9666]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[9612-9624]:ReturnStatement[9648-9660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9667-9702]:Block[9703-9738]"
    }, {
      "left" : "return description;",
      "right" : "return description;",
      "info" : "ReturnStatement[9677-9696]:ReturnStatement[9713-9732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9862-9923]:Block[9898-9959]"
    }, {
      "left" : "appendUsage(buffer, helpSettings, comp, \"|\");",
      "right" : "appendUsage(buffer, helpSettings, comp, \"|\");",
      "info" : "ExpressionStatement[9872-9917]:ExpressionStatement[9908-9953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10135-12815]:Block[10171-12851]"
    }, {
      "left" : "final Set helpSettingsCopy = new HashSet(helpSettings);",
      "right" : "final Set helpSettingsCopy = new HashSet(helpSettings);",
      "info" : "VariableDeclarationStatement[10145-10200]:VariableDeclarationStatement[10181-10236]"
    }, {
      "left" : "final boolean optional =\n            (minimum == 0) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_OPTIONAL);",
      "right" : "final boolean optional =\n            (minimum == 0) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_OPTIONAL);",
      "info" : "VariableDeclarationStatement[10210-10324]:VariableDeclarationStatement[10246-10360]"
    }, {
      "left" : "final boolean expanded =\n            (name == null) || helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED);",
      "right" : "final boolean expanded =\n            (name == null) || helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED);",
      "info" : "VariableDeclarationStatement[10334-10454]:VariableDeclarationStatement[10370-10490]"
    }, {
      "left" : "final boolean named =\n            !expanded ||\n            ((name != null) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_NAME));",
      "right" : "final boolean named =\n            !expanded ||\n            ((name != null) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_NAME));",
      "info" : "VariableDeclarationStatement[10464-10604]:VariableDeclarationStatement[10500-10640]"
    }, {
      "left" : "final boolean arguments = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT);",
      "right" : "final boolean arguments = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT);",
      "info" : "VariableDeclarationStatement[10614-10705]:VariableDeclarationStatement[10650-10741]"
    }, {
      "left" : "final boolean outer = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_OUTER);",
      "right" : "final boolean outer = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_OUTER);",
      "info" : "VariableDeclarationStatement[10715-10799]:VariableDeclarationStatement[10751-10835]"
    }, {
      "left" : "helpSettingsCopy.remove(DisplaySetting.DISPLAY_GROUP_OUTER);",
      "right" : "helpSettingsCopy.remove(DisplaySetting.DISPLAY_GROUP_OUTER);",
      "info" : "ExpressionStatement[10809-10869]:ExpressionStatement[10845-10905]"
    }, {
      "left" : "final boolean both = named && expanded;",
      "right" : "final boolean both = named && expanded;",
      "info" : "VariableDeclarationStatement[10879-10918]:VariableDeclarationStatement[10915-10954]"
    }, {
      "left" : "if (optional)",
      "right" : "if (optional)",
      "info" : "IfStatement[10928-10985]:IfStatement[10964-11021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10942-10985]:Block[10978-11021]"
    }, {
      "left" : "buffer.append('[');",
      "right" : "buffer.append('[');",
      "info" : "ExpressionStatement[10956-10975]:ExpressionStatement[10992-11011]"
    }, {
      "left" : "if (named)",
      "right" : "if (named)",
      "info" : "IfStatement[10995-11050]:IfStatement[11031-11086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11006-11050]:Block[11042-11086]"
    }, {
      "left" : "buffer.append(name);",
      "right" : "buffer.append(name);",
      "info" : "ExpressionStatement[11020-11040]:ExpressionStatement[11056-11076]"
    }, {
      "left" : "if (both)",
      "right" : "if (both)",
      "info" : "IfStatement[11060-11114]:IfStatement[11096-11150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11070-11114]:Block[11106-11150]"
    }, {
      "left" : "buffer.append(\" (\");",
      "right" : "buffer.append(\" (\");",
      "info" : "ExpressionStatement[11084-11104]:ExpressionStatement[11120-11140]"
    }, {
      "left" : "if (expanded)",
      "right" : "if (expanded)",
      "info" : "IfStatement[11124-12307]:IfStatement[11160-12343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11138-12307]:Block[11174-12343]"
    }, {
      "left" : "final Set childSettings;",
      "right" : "final Set childSettings;",
      "info" : "VariableDeclarationStatement[11152-11176]:VariableDeclarationStatement[11188-11212]"
    }, {
      "left" : "if (!helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED))",
      "right" : "if (!helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED))",
      "info" : "IfStatement[11190-11484]:IfStatement[11226-11520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11261-11329]:Block[11297-11365]"
    }, {
      "left" : "childSettings = DisplaySetting.NONE;",
      "right" : "childSettings = DisplaySetting.NONE;",
      "info" : "ExpressionStatement[11279-11315]:ExpressionStatement[11315-11351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11335-11484]:Block[11371-11520]"
    }, {
      "left" : "childSettings = new HashSet(helpSettingsCopy);",
      "right" : "childSettings = new HashSet(helpSettingsCopy);",
      "info" : "ExpressionStatement[11353-11399]:ExpressionStatement[11389-11435]"
    }, {
      "left" : "childSettings.remove(DisplaySetting.DISPLAY_OPTIONAL);",
      "right" : "childSettings.remove(DisplaySetting.DISPLAY_OPTIONAL);",
      "info" : "ExpressionStatement[11416-11470]:ExpressionStatement[11452-11506]"
    }, {
      "left" : "final List list;",
      "right" : "final List list;",
      "info" : "VariableDeclarationStatement[11549-11565]:VariableDeclarationStatement[11585-11601]"
    }, {
      "left" : "if (comp == null)",
      "right" : "if (comp == null)",
      "info" : "IfStatement[11579-11870]:IfStatement[11615-11906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11597-11698]:Block[11633-11734]"
    }, {
      "left" : "list = options;",
      "right" : "list = options;",
      "info" : "ExpressionStatement[11669-11684]:ExpressionStatement[11705-11720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11704-11870]:Block[11740-11906]"
    }, {
      "left" : "list = new ArrayList(options);",
      "right" : "list = new ArrayList(options);",
      "info" : "ExpressionStatement[11780-11810]:ExpressionStatement[11816-11846]"
    }, {
      "left" : "Collections.sort(list, comp);",
      "right" : "Collections.sort(list, comp);",
      "info" : "ExpressionStatement[11827-11856]:ExpressionStatement[11863-11892]"
    }, {
      "left" : "for (final Iterator i = list.iterator(); i.hasNext())",
      "right" : "for (final Iterator i = list.iterator(); i.hasNext())",
      "info" : "ForStatement[11916-12297]:ForStatement[11952-12333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11971-12297]:Block[12007-12333]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[11989-12029]:VariableDeclarationStatement[12025-12065]"
    }, {
      "left" : "option.appendUsage(buffer, childSettings, comp);",
      "right" : "option.appendUsage(buffer, childSettings, comp);",
      "info" : "ExpressionStatement[12091-12139]:ExpressionStatement[12127-12175]"
    }, {
      "left" : "if (i.hasNext())",
      "right" : "if (i.hasNext())",
      "info" : "IfStatement[12201-12283]:IfStatement[12237-12319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12218-12283]:Block[12254-12319]"
    }, {
      "left" : "buffer.append(separator);",
      "right" : "buffer.append(separator);",
      "info" : "ExpressionStatement[12240-12265]:ExpressionStatement[12276-12301]"
    }, {
      "left" : "if (both)",
      "right" : "if (both)",
      "info" : "IfStatement[12317-12370]:IfStatement[12353-12406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12327-12370]:Block[12363-12406]"
    }, {
      "left" : "buffer.append(')');",
      "right" : "buffer.append(')');",
      "info" : "ExpressionStatement[12341-12360]:ExpressionStatement[12377-12396]"
    }, {
      "left" : "if (optional && outer)",
      "right" : "if (optional && outer)",
      "info" : "IfStatement[12380-12446]:IfStatement[12416-12482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12403-12446]:Block[12439-12482]"
    }, {
      "left" : "buffer.append(']');",
      "right" : "buffer.append(']');",
      "info" : "ExpressionStatement[12417-12436]:ExpressionStatement[12453-12472]"
    }, {
      "left" : "if (arguments)",
      "right" : "if (arguments)",
      "info" : "IfStatement[12456-12732]:IfStatement[12492-12768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12471-12732]:Block[12507-12768]"
    }, {
      "left" : "for (final Iterator i = anonymous.iterator(); i.hasNext())",
      "right" : "for (final Iterator i = anonymous.iterator(); i.hasNext())",
      "info" : "ForStatement[12485-12722]:ForStatement[12521-12758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12545-12722]:Block[12581-12758]"
    }, {
      "left" : "buffer.append(' ');",
      "right" : "buffer.append(' ');",
      "info" : "ExpressionStatement[12563-12582]:ExpressionStatement[12599-12618]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[12600-12640]:VariableDeclarationStatement[12636-12676]"
    }, {
      "left" : "option.appendUsage(buffer, helpSettingsCopy, comp);",
      "right" : "option.appendUsage(buffer, helpSettingsCopy, comp);",
      "info" : "ExpressionStatement[12657-12708]:ExpressionStatement[12693-12744]"
    }, {
      "left" : "if (optional && !outer)",
      "right" : "if (optional && !outer)",
      "info" : "IfStatement[12742-12809]:IfStatement[12778-12845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12766-12809]:Block[12802-12845]"
    }, {
      "left" : "buffer.append(']');",
      "right" : "buffer.append(']');",
      "info" : "ExpressionStatement[12780-12799]:ExpressionStatement[12816-12835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12959-14272]:Block[12995-14308]"
    }, {
      "left" : "final List helpLines = new ArrayList();",
      "right" : "final List helpLines = new ArrayList();",
      "info" : "VariableDeclarationStatement[12969-13008]:VariableDeclarationStatement[13005-13044]"
    }, {
      "left" : "if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_NAME))",
      "right" : "if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_NAME))",
      "info" : "IfStatement[13018-13197]:IfStatement[13054-13233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13080-13197]:Block[13116-13233]"
    }, {
      "left" : "final HelpLine helpLine = new HelpLineImpl(this, depth);",
      "right" : "final HelpLine helpLine = new HelpLineImpl(this, depth);",
      "info" : "VariableDeclarationStatement[13094-13150]:VariableDeclarationStatement[13130-13186]"
    }, {
      "left" : "helpLines.add(helpLine);",
      "right" : "helpLines.add(helpLine);",
      "info" : "ExpressionStatement[13163-13187]:ExpressionStatement[13199-13223]"
    }, {
      "left" : "if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED))",
      "right" : "if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED))",
      "info" : "IfStatement[13207-13924]:IfStatement[13243-13960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13273-13924]:Block[13309-13960]"
    }, {
      "left" : "final List list;",
      "right" : "final List list;",
      "info" : "VariableDeclarationStatement[13338-13354]:VariableDeclarationStatement[13374-13390]"
    }, {
      "left" : "if (comp == null)",
      "right" : "if (comp == null)",
      "info" : "IfStatement[13368-13659]:IfStatement[13404-13695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13386-13487]:Block[13422-13523]"
    }, {
      "left" : "list = options;",
      "right" : "list = options;",
      "info" : "ExpressionStatement[13458-13473]:ExpressionStatement[13494-13509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13493-13659]:Block[13529-13695]"
    }, {
      "left" : "list = new ArrayList(options);",
      "right" : "list = new ArrayList(options);",
      "info" : "ExpressionStatement[13569-13599]:ExpressionStatement[13605-13635]"
    }, {
      "left" : "Collections.sort(list, comp);",
      "right" : "Collections.sort(list, comp);",
      "info" : "ExpressionStatement[13616-13645]:ExpressionStatement[13652-13681]"
    }, {
      "left" : "for (final Iterator i = list.iterator(); i.hasNext())",
      "right" : "for (final Iterator i = list.iterator(); i.hasNext())",
      "info" : "ForStatement[13704-13914]:ForStatement[13740-13950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13759-13914]:Block[13795-13950]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[13777-13817]:VariableDeclarationStatement[13813-13853]"
    }, {
      "left" : "helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp));",
      "right" : "helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp));",
      "info" : "ExpressionStatement[13834-13900]:ExpressionStatement[13870-13936]"
    }, {
      "left" : "if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT))",
      "right" : "if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT))",
      "info" : "IfStatement[13934-14239]:IfStatement[13970-14275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14000-14239]:Block[14036-14275]"
    }, {
      "left" : "for (final Iterator i = anonymous.iterator(); i.hasNext())",
      "right" : "for (final Iterator i = anonymous.iterator(); i.hasNext())",
      "info" : "ForStatement[14014-14229]:ForStatement[14050-14265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14074-14229]:Block[14110-14265]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[14092-14132]:VariableDeclarationStatement[14128-14168]"
    }, {
      "left" : "helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp));",
      "right" : "helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp));",
      "info" : "ExpressionStatement[14149-14215]:ExpressionStatement[14185-14251]"
    }, {
      "left" : "return helpLines;",
      "right" : "return helpLines;",
      "info" : "ReturnStatement[14249-14266]:ReturnStatement[14285-14302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14471-14502]:Block[14507-14538]"
    }, {
      "left" : "return options;",
      "right" : "return options;",
      "info" : "ReturnStatement[14481-14496]:ReturnStatement[14517-14532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14652-14685]:Block[14688-14721]"
    }, {
      "left" : "return anonymous;",
      "right" : "return anonymous;",
      "info" : "ReturnStatement[14662-14679]:ReturnStatement[14698-14715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14738-15052]:Block[14774-15088]"
    }, {
      "left" : "final Iterator i = getOptions().iterator();",
      "right" : "final Iterator i = getOptions().iterator();",
      "info" : "VariableDeclarationStatement[14748-14791]:VariableDeclarationStatement[14784-14827]"
    }, {
      "left" : "while (i.hasNext())",
      "right" : "while (i.hasNext())",
      "info" : "WhileStatement[14801-15024]:WhileStatement[14837-15060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14821-15024]:Block[14857-15060]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[14835-14875]:VariableDeclarationStatement[14871-14911]"
    }, {
      "left" : "final Option found = option.findOption(trigger);",
      "right" : "final Option found = option.findOption(trigger);",
      "info" : "VariableDeclarationStatement[14888-14936]:VariableDeclarationStatement[14924-14972]"
    }, {
      "left" : "if (found != null)",
      "right" : "if (found != null)",
      "info" : "IfStatement[14950-15014]:IfStatement[14986-15050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14969-15014]:Block[15005-15050]"
    }, {
      "left" : "return found;",
      "right" : "return found;",
      "info" : "ReturnStatement[14987-15000]:ReturnStatement[15023-15036]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[15034-15046]:ReturnStatement[15070-15082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15082-15113]:Block[15118-15149]"
    }, {
      "left" : "return minimum;",
      "right" : "return minimum;",
      "info" : "ReturnStatement[15092-15107]:ReturnStatement[15128-15143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15143-15174]:Block[15179-15210]"
    }, {
      "left" : "return maximum;",
      "right" : "return maximum;",
      "info" : "ReturnStatement[15153-15168]:ReturnStatement[15189-15204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15208-15248]:Block[15244-15284]"
    }, {
      "left" : "return getMinimum() > 0;",
      "right" : "return getMinimum() > 0;",
      "info" : "ReturnStatement[15218-15242]:ReturnStatement[15254-15278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15315-15709]:Block[15351-15745]"
    }, {
      "left" : "super.defaults(commandLine);",
      "right" : "super.defaults(commandLine);",
      "info" : "ExpressionStatement[15325-15353]:ExpressionStatement[15361-15389]"
    }, {
      "left" : "for (final Iterator i = options.iterator(); i.hasNext())",
      "right" : "for (final Iterator i = options.iterator(); i.hasNext())",
      "info" : "ForStatement[15363-15527]:ForStatement[15399-15563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15421-15527]:Block[15457-15563]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[15435-15475]:VariableDeclarationStatement[15471-15511]"
    }, {
      "left" : "option.defaults(commandLine);",
      "right" : "option.defaults(commandLine);",
      "info" : "ExpressionStatement[15488-15517]:ExpressionStatement[15524-15553]"
    }, {
      "left" : "for (final Iterator i = anonymous.iterator(); i.hasNext())",
      "right" : "for (final Iterator i = anonymous.iterator(); i.hasNext())",
      "info" : "ForStatement[15537-15703]:ForStatement[15573-15739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15597-15703]:Block[15633-15739]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[15611-15651]:VariableDeclarationStatement[15647-15687]"
    }, {
      "left" : "option.defaults(commandLine);",
      "right" : "option.defaults(commandLine);",
      "info" : "ExpressionStatement[15664-15693]:ExpressionStatement[15700-15729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15885-15944]:Block[15921-15980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16111-16143]:Block[16147-16179]"
    }, {
      "left" : "return instance;",
      "right" : "return instance;",
      "info" : "ReturnStatement[16121-16137]:ReturnStatement[16157-16173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16225-16345]:Block[16261-16381]"
    }, {
      "left" : "final String s1 = (String) o1;",
      "right" : "final String s1 = (String) o1;",
      "info" : "VariableDeclarationStatement[16235-16265]:VariableDeclarationStatement[16271-16301]"
    }, {
      "left" : "final String s2 = (String) o2;",
      "right" : "final String s2 = (String) o2;",
      "info" : "VariableDeclarationStatement[16274-16304]:VariableDeclarationStatement[16310-16340]"
    }, {
      "left" : "return -s1.compareTo(s2);",
      "right" : "return -s1.compareTo(s2);",
      "info" : "ReturnStatement[16314-16339]:ReturnStatement[16350-16375]"
    } ]
  },
  "interFileMappings" : { }
}