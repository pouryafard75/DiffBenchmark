{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "@NonNls public static final String BORDER_LINE = \"<hr size=1 noshade>\";",
      "right" : "@NonNls public static final String BORDER_LINE = \"<hr size=1 noshade>\";",
      "info" : "FieldDeclaration[3198-3269]:FieldDeclaration[3198-3269]"
    }, {
      "left" : "private static final StyleSheet DEFAULT_HTML_KIT_CSS;",
      "right" : "private static final StyleSheet DEFAULT_HTML_KIT_CSS;",
      "info" : "FieldDeclaration[3272-3325]:FieldDeclaration[3272-3325]"
    }, {
      "left" : "public static int getMultiClickInterval()",
      "right" : "public static int getMultiClickInterval()",
      "info" : "MethodDeclaration[3568-3804]:MethodDeclaration[3568-3804]"
    }, {
      "left" : "private static final AtomicNotNullLazyValue<Boolean> X_RENDER_ACTIVE = new AtomicNotNullLazyValue<Boolean>() {\n    @NotNull\n    @Override\n    protected Boolean compute() {\n      if (!SystemInfo.isXWindow) {\n        return false;\n      }\n      try {\n        final Class<?> clazz = ClassLoader.getSystemClassLoader().loadClass(\"sun.awt.X11GraphicsEnvironment\");\n        final Method method = clazz.getMethod(\"isXRenderAvailable\");\n        return (Boolean)method.invoke(null);\n      }\n      catch (Throwable e) {\n        return false;\n      }\n    }\n  };",
      "right" : "private static final AtomicNotNullLazyValue<Boolean> X_RENDER_ACTIVE = new AtomicNotNullLazyValue<Boolean>() {\n    @NotNull\n    @Override\n    protected Boolean compute() {\n      if (!SystemInfo.isXWindow) {\n        return false;\n      }\n      try {\n        final Class<?> clazz = ClassLoader.getSystemClassLoader().loadClass(\"sun.awt.X11GraphicsEnvironment\");\n        final Method method = clazz.getMethod(\"isXRenderAvailable\");\n        return (Boolean)method.invoke(null);\n      }\n      catch (Throwable e) {\n        return false;\n      }\n    }\n  };",
      "info" : "FieldDeclaration[3808-4358]:FieldDeclaration[3808-4358]"
    }, {
      "left" : "protected Boolean compute()",
      "right" : "protected Boolean compute()",
      "info" : "MethodDeclaration[3923-4353]:MethodDeclaration[3923-4353]"
    }, {
      "left" : "private static final String[] STANDARD_FONT_SIZES =\n    {\"8\", \"9\", \"10\", \"11\", \"12\", \"14\", \"16\", \"18\", \"20\", \"22\", \"24\", \"26\", \"28\", \"36\", \"48\", \"72\"};",
      "right" : "private static final String[] STANDARD_FONT_SIZES =\n    {\"8\", \"9\", \"10\", \"11\", \"12\", \"14\", \"16\", \"18\", \"20\", \"22\", \"24\", \"26\", \"28\", \"36\", \"48\", \"72\"};",
      "info" : "FieldDeclaration[4362-4513]:FieldDeclaration[4362-4513]"
    }, {
      "left" : "public static void applyStyle(@NotNull ComponentStyle componentStyle, @NotNull Component comp)",
      "right" : "public static void applyStyle(@NotNull ComponentStyle componentStyle, @NotNull Component comp)",
      "info" : "MethodDeclaration[4517-5265]:MethodDeclaration[4517-5265]"
    }, {
      "left" : "public static Cursor getTextCursor(final Color backgroundColor)",
      "right" : "public static Cursor getTextCursor(final Color backgroundColor)",
      "info" : "MethodDeclaration[5269-5500]:MethodDeclaration[5269-5500]"
    }, {
      "left" : "public static void drawFramingLines(@NotNull Graphics2D g, int startX, int endX, int topY, int bottomY, @NotNull Color color)",
      "right" : "public static void drawFramingLines(@NotNull Graphics2D g, int startX, int endX, int topY, int bottomY, @NotNull Color color)",
      "info" : "MethodDeclaration[5504-6246]:MethodDeclaration[5504-6246]"
    }, {
      "left" : "private static final GrayFilter DEFAULT_GRAY_FILTER = new GrayFilter(true, 50);",
      "right" : "private static final GrayFilter DEFAULT_GRAY_FILTER = new GrayFilter(true, 50);",
      "info" : "FieldDeclaration[6250-6329]:FieldDeclaration[6250-6329]"
    }, {
      "left" : "private static final GrayFilter DARCULA_GRAY_FILTER = new GrayFilter(true, 30);",
      "right" : "private static final GrayFilter DARCULA_GRAY_FILTER = new GrayFilter(true, 30);",
      "info" : "FieldDeclaration[6332-6411]:FieldDeclaration[6332-6411]"
    }, {
      "left" : "public static GrayFilter getGrayFilter()",
      "right" : "public static GrayFilter getGrayFilter()",
      "info" : "MethodDeclaration[6415-6534]:MethodDeclaration[6415-6534]"
    }, {
      "left" : "public static boolean isAppleRetina()",
      "right" : "public static boolean isAppleRetina()",
      "info" : "MethodDeclaration[6538-6629]:MethodDeclaration[6538-6629]"
    }, {
      "left" : "enum : FontSize",
      "right" : "enum : FontSize",
      "info" : "EnumDeclaration[6633-6675]:EnumDeclaration[6633-6675]"
    }, {
      "left" : "enum : ComponentStyle",
      "right" : "enum : ComponentStyle",
      "info" : "EnumDeclaration[6679-6728]:EnumDeclaration[6679-6728]"
    }, {
      "left" : "enum : FontColor",
      "right" : "enum : FontColor",
      "info" : "EnumDeclaration[6732-6772]:EnumDeclaration[6732-6772]"
    }, {
      "left" : "public static final char MNEMONIC = BundleBase.MNEMONIC;",
      "right" : "public static final char MNEMONIC = BundleBase.MNEMONIC;",
      "info" : "FieldDeclaration[6776-6832]:FieldDeclaration[6776-6832]"
    }, {
      "left" : "@NonNls public static final String HTML_MIME = \"text/html\";",
      "right" : "@NonNls public static final String HTML_MIME = \"text/html\";",
      "info" : "FieldDeclaration[6835-6894]:FieldDeclaration[6835-6894]"
    }, {
      "left" : "@NonNls public static final String JSLIDER_ISFILLED = \"JSlider.isFilled\";",
      "right" : "@NonNls public static final String JSLIDER_ISFILLED = \"JSlider.isFilled\";",
      "info" : "FieldDeclaration[6897-6970]:FieldDeclaration[6897-6970]"
    }, {
      "left" : "@NonNls public static final String ARIAL_FONT_NAME = \"Arial\";",
      "right" : "@NonNls public static final String ARIAL_FONT_NAME = \"Arial\";",
      "info" : "FieldDeclaration[6973-7034]:FieldDeclaration[6973-7034]"
    }, {
      "left" : "@NonNls public static final String TABLE_FOCUS_CELL_BACKGROUND_PROPERTY = \"Table.focusCellBackground\";",
      "right" : "@NonNls public static final String TABLE_FOCUS_CELL_BACKGROUND_PROPERTY = \"Table.focusCellBackground\";",
      "info" : "FieldDeclaration[7037-7139]:FieldDeclaration[7037-7139]"
    }, {
      "left" : "@NonNls public static final String CENTER_TOOLTIP_DEFAULT = \"ToCenterTooltip\";",
      "right" : "@NonNls public static final String CENTER_TOOLTIP_DEFAULT = \"ToCenterTooltip\";",
      "info" : "FieldDeclaration[7142-7220]:FieldDeclaration[7142-7220]"
    }, {
      "left" : "@NonNls public static final String CENTER_TOOLTIP_STRICT = \"ToCenterTooltip.default\";",
      "right" : "@NonNls public static final String CENTER_TOOLTIP_STRICT = \"ToCenterTooltip.default\";",
      "info" : "FieldDeclaration[7223-7308]:FieldDeclaration[7223-7308]"
    }, {
      "left" : "public static final Pattern CLOSE_TAG_PATTERN = Pattern.compile(\"<\\\\s*([^<>/ ]+)([^<>]*)/\\\\s*>\", Pattern.CASE_INSENSITIVE);",
      "right" : "public static final Pattern CLOSE_TAG_PATTERN = Pattern.compile(\"<\\\\s*([^<>/ ]+)([^<>]*)/\\\\s*>\", Pattern.CASE_INSENSITIVE);",
      "info" : "FieldDeclaration[7312-7435]:FieldDeclaration[7312-7435]"
    }, {
      "left" : "@NonNls public static final String FOCUS_PROXY_KEY = \"isFocusProxy\";",
      "right" : "@NonNls public static final String FOCUS_PROXY_KEY = \"isFocusProxy\";",
      "info" : "FieldDeclaration[7439-7507]:FieldDeclaration[7439-7507]"
    }, {
      "left" : "public static Key<Integer> KEEP_BORDER_SIDES = Key.create(\"keepBorderSides\");",
      "right" : "public static Key<Integer> KEEP_BORDER_SIDES = Key.create(\"keepBorderSides\");",
      "info" : "FieldDeclaration[7511-7588]:FieldDeclaration[7511-7588]"
    }, {
      "left" : "private static Key<UndoManager> UNDO_MANAGER = Key.create(\"undoManager\");",
      "right" : "private static Key<UndoManager> UNDO_MANAGER = Key.create(\"undoManager\");",
      "info" : "FieldDeclaration[7591-7664]:FieldDeclaration[7591-7664]"
    }, {
      "left" : "private static final AbstractAction REDO_ACTION = new AbstractAction() {\n    @Override\n    public void actionPerformed(ActionEvent e) {\n      Object source = e.getSource();\n      UndoManager manager = source instanceof JComponent ? getClientProperty((JComponent)source, UNDO_MANAGER) : null;\n      if (manager != null && manager.canRedo()) {\n        manager.redo();\n      }\n    }\n  };",
      "right" : "private static final AbstractAction REDO_ACTION = new AbstractAction() {\n    @Override\n    public void actionPerformed(ActionEvent e) {\n      Object source = e.getSource();\n      UndoManager manager = source instanceof JComponent ? getClientProperty((JComponent)source, UNDO_MANAGER) : null;\n      if (manager != null && manager.canRedo()) {\n        manager.redo();\n      }\n    }\n  };",
      "info" : "FieldDeclaration[7667-8051]:FieldDeclaration[7667-8051]"
    }, {
      "left" : "public void actionPerformed(ActionEvent e)",
      "right" : "public void actionPerformed(ActionEvent e)",
      "info" : "MethodDeclaration[7744-8046]:MethodDeclaration[7744-8046]"
    }, {
      "left" : "private static final AbstractAction UNDO_ACTION = new AbstractAction() {\n    @Override\n    public void actionPerformed(ActionEvent e) {\n      Object source = e.getSource();\n      UndoManager manager = source instanceof JComponent ? getClientProperty((JComponent)source, UNDO_MANAGER) : null;\n      if (manager != null && manager.canUndo()) {\n        manager.undo();\n      }\n    }\n  };",
      "right" : "private static final AbstractAction UNDO_ACTION = new AbstractAction() {\n    @Override\n    public void actionPerformed(ActionEvent e) {\n      Object source = e.getSource();\n      UndoManager manager = source instanceof JComponent ? getClientProperty((JComponent)source, UNDO_MANAGER) : null;\n      if (manager != null && manager.canUndo()) {\n        manager.undo();\n      }\n    }\n  };",
      "info" : "FieldDeclaration[8054-8438]:FieldDeclaration[8054-8438]"
    }, {
      "left" : "public void actionPerformed(ActionEvent e)",
      "right" : "public void actionPerformed(ActionEvent e)",
      "info" : "MethodDeclaration[8131-8433]:MethodDeclaration[8131-8433]"
    }, {
      "left" : "private static final Logger LOG = Logger.getInstance(\"#com.intellij.util.ui.UIUtil\");",
      "right" : "private static final Logger LOG = Logger.getInstance(\"#com.intellij.util.ui.UIUtil\");",
      "info" : "FieldDeclaration[8442-8527]:FieldDeclaration[8442-8527]"
    }, {
      "left" : "private static final Color UNFOCUSED_SELECTION_COLOR = Gray._212;",
      "right" : "private static final Color UNFOCUSED_SELECTION_COLOR = Gray._212;",
      "info" : "FieldDeclaration[8531-8596]:FieldDeclaration[8531-8596]"
    }, {
      "left" : "private static final Color ACTIVE_HEADER_COLOR = new Color(160, 186, 213);",
      "right" : "private static final Color ACTIVE_HEADER_COLOR = new Color(160, 186, 213);",
      "info" : "FieldDeclaration[8599-8673]:FieldDeclaration[8599-8673]"
    }, {
      "left" : "private static final Color INACTIVE_HEADER_COLOR = Gray._128;",
      "right" : "private static final Color INACTIVE_HEADER_COLOR = Gray._128;",
      "info" : "FieldDeclaration[8676-8737]:FieldDeclaration[8676-8737]"
    }, {
      "left" : "private static final Color BORDER_COLOR = Color.LIGHT_GRAY;",
      "right" : "private static final Color BORDER_COLOR = Color.LIGHT_GRAY;",
      "info" : "FieldDeclaration[8740-8799]:FieldDeclaration[8740-8799]"
    }, {
      "left" : "public static final Color CONTRAST_BORDER_COLOR = new JBColor(0x9b9b9b, 0x282828);",
      "right" : "public static final Color CONTRAST_BORDER_COLOR = new JBColor(0x9b9b9b, 0x282828);",
      "info" : "FieldDeclaration[8803-8885]:FieldDeclaration[8803-8885]"
    }, {
      "left" : "public static final Color SIDE_PANEL_BACKGROUND = new JBColor(new Color(0xE6EBF0), new Color(0x3E434C));",
      "right" : "public static final Color SIDE_PANEL_BACKGROUND = new JBColor(new Color(0xE6EBF0), new Color(0x3E434C));",
      "info" : "FieldDeclaration[8888-8992]:FieldDeclaration[8888-8992]"
    }, {
      "left" : "public static final Color AQUA_SEPARATOR_FOREGROUND_COLOR = new JBColor(Gray._190, Gray.x51);",
      "right" : "public static final Color AQUA_SEPARATOR_FOREGROUND_COLOR = new JBColor(Gray._190, Gray.x51);",
      "info" : "FieldDeclaration[8996-9089]:FieldDeclaration[8996-9089]"
    }, {
      "left" : "public static final Color AQUA_SEPARATOR_BACKGROUND_COLOR = new JBColor(Gray._240, Gray.x51);",
      "right" : "public static final Color AQUA_SEPARATOR_BACKGROUND_COLOR = new JBColor(Gray._240, Gray.x51);",
      "info" : "FieldDeclaration[9092-9185]:FieldDeclaration[9092-9185]"
    }, {
      "left" : "public static final Color TRANSPARENT_COLOR = new Color(0, 0, 0, 0);",
      "right" : "public static final Color TRANSPARENT_COLOR = new Color(0, 0, 0, 0);",
      "info" : "FieldDeclaration[9188-9256]:FieldDeclaration[9188-9256]"
    }, {
      "left" : "public static final int DEFAULT_HGAP = 10;",
      "right" : "public static final int DEFAULT_HGAP = 10;",
      "info" : "FieldDeclaration[9260-9302]:FieldDeclaration[9260-9302]"
    }, {
      "left" : "public static final int DEFAULT_VGAP = 4;",
      "right" : "public static final int DEFAULT_VGAP = 4;",
      "info" : "FieldDeclaration[9305-9346]:FieldDeclaration[9305-9346]"
    }, {
      "left" : "public static final int LARGE_VGAP = 12;",
      "right" : "public static final int LARGE_VGAP = 12;",
      "info" : "FieldDeclaration[9349-9389]:FieldDeclaration[9349-9389]"
    }, {
      "left" : "public static final Insets PANEL_REGULAR_INSETS = new Insets(8, 12, 8, 12);",
      "right" : "public static final Insets PANEL_REGULAR_INSETS = new Insets(8, 12, 8, 12);",
      "info" : "FieldDeclaration[9393-9468]:FieldDeclaration[9393-9468]"
    }, {
      "left" : "public static final Insets PANEL_SMALL_INSETS = new Insets(5, 8, 5, 8);",
      "right" : "public static final Insets PANEL_SMALL_INSETS = new Insets(5, 8, 5, 8);",
      "info" : "FieldDeclaration[9471-9542]:FieldDeclaration[9471-9542]"
    }, {
      "left" : "public static final Border DEBUG_MARKER_BORDER = new Border() {\n    @Override\n    public Insets getBorderInsets(Component c) {\n      return new Insets(0, 0, 0, 0);\n    }\n\n    @Override\n    public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {\n      Graphics g2 = g.create();\n      try {\n        g2.setColor(JBColor.RED);\n        drawDottedRectangle(g2, x, y, x + width - 1, y + height - 1);\n      }\n      finally {\n        g2.dispose();\n      }\n    }\n\n    @Override\n    public boolean isBorderOpaque() {\n      return true;\n    }\n  };",
      "right" : "public static final Border DEBUG_MARKER_BORDER = new Border() {\n    @Override\n    public Insets getBorderInsets(Component c) {\n      return new Insets(0, 0, 0, 0);\n    }\n\n    @Override\n    public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {\n      Graphics g2 = g.create();\n      try {\n        g2.setColor(JBColor.RED);\n        drawDottedRectangle(g2, x, y, x + width - 1, y + height - 1);\n      }\n      finally {\n        g2.dispose();\n      }\n    }\n\n    @Override\n    public boolean isBorderOpaque() {\n      return true;\n    }\n  };",
      "info" : "FieldDeclaration[9547-10114]:FieldDeclaration[9547-10114]"
    }, {
      "left" : "public Insets getBorderInsets(Component c)",
      "right" : "public Insets getBorderInsets(Component c)",
      "info" : "MethodDeclaration[9615-9716]:MethodDeclaration[9615-9716]"
    }, {
      "left" : "public void paintBorder(Component c, Graphics g, int x, int y, int width, int height)",
      "right" : "public void paintBorder(Component c, Graphics g, int x, int y, int width, int height)",
      "info" : "MethodDeclaration[9722-10031]:MethodDeclaration[9722-10031]"
    }, {
      "left" : "public boolean isBorderOpaque()",
      "right" : "public boolean isBorderOpaque()",
      "info" : "MethodDeclaration[10037-10109]:MethodDeclaration[10037-10109]"
    }, {
      "left" : "private static final HashMap<Color, BufferedImage> ourAppleDotSamples = new HashMap<Color, BufferedImage>();",
      "right" : "private static final HashMap<Color, BufferedImage> ourAppleDotSamples = new HashMap<Color, BufferedImage>();",
      "info" : "FieldDeclaration[10146-10254]:FieldDeclaration[10146-10254]"
    }, {
      "left" : "private static volatile Pair<String, Integer> ourSystemFontData = null;",
      "right" : "private static volatile Pair<String, Integer> ourSystemFontData = null;",
      "info" : "FieldDeclaration[10258-10329]:FieldDeclaration[10258-10329]"
    }, {
      "left" : "@NonNls private static final String ROOT_PANE = \"JRootPane.future\";",
      "right" : "@NonNls private static final String ROOT_PANE = \"JRootPane.future\";",
      "info" : "FieldDeclaration[10333-10400]:FieldDeclaration[10333-10400]"
    }, {
      "left" : "private static final Ref<Boolean> ourRetina = Ref.create(SystemInfo.isMac ? null : false);",
      "right" : "private static final Ref<Boolean> ourRetina = Ref.create(SystemInfo.isMac ? null : false);",
      "info" : "FieldDeclaration[10404-10494]:FieldDeclaration[10404-10494]"
    }, {
      "left" : "private UIUtil()",
      "right" : "private UIUtil()",
      "info" : "MethodDeclaration[10498-10520]:MethodDeclaration[10498-10520]"
    }, {
      "left" : "DetectRetinaKit",
      "right" : "DetectRetinaKit",
      "info" : "TypeDeclaration[10524-14498]:TypeDeclaration[10524-14498]"
    }, {
      "left" : "private final static WeakHashMap<GraphicsDevice, Boolean> devicesToRetinaSupportCacheMap = new WeakHashMap<GraphicsDevice, Boolean>();",
      "right" : "private final static WeakHashMap<GraphicsDevice, Boolean> devicesToRetinaSupportCacheMap = new WeakHashMap<GraphicsDevice, Boolean>();",
      "info" : "FieldDeclaration[10624-10758]:FieldDeclaration[10624-10758]"
    }, {
      "left" : "private static boolean isOracleMacRetinaDevice (GraphicsDevice device)",
      "right" : "private static boolean isOracleMacRetinaDevice (GraphicsDevice device)",
      "info" : "MethodDeclaration[10764-12558]:MethodDeclaration[10764-12558]"
    }, {
      "left" : "private static boolean hasAppleRetinaDevice()",
      "right" : "private static boolean hasAppleRetinaDevice()",
      "info" : "MethodDeclaration[12764-13182]:MethodDeclaration[12764-13182]"
    }, {
      "left" : "private static boolean isMacRetina(Graphics2D g)",
      "right" : "private static boolean isMacRetina(Graphics2D g)",
      "info" : "MethodDeclaration[13188-13655]:MethodDeclaration[13188-13655]"
    }, {
      "left" : "private static boolean isRetina()",
      "right" : "private static boolean isRetina()",
      "info" : "MethodDeclaration[13661-14494]:MethodDeclaration[13661-14494]"
    }, {
      "left" : "public static boolean isRetina (Graphics2D graphics)",
      "right" : "public static boolean isRetina (Graphics2D graphics)",
      "info" : "MethodDeclaration[14502-14726]:MethodDeclaration[14502-14726]"
    }, {
      "left" : "public static boolean isRetina()",
      "right" : "public static boolean isRetina()",
      "info" : "MethodDeclaration[14836-16363]:MethodDeclaration[14836-16363]"
    }, {
      "left" : "public static boolean hasLeakingAppleListeners()",
      "right" : "public static boolean hasLeakingAppleListeners()",
      "info" : "MethodDeclaration[16367-17126]:MethodDeclaration[16367-17126]"
    }, {
      "left" : "public static void removeLeakingAppleListeners()",
      "right" : "public static void removeLeakingAppleListeners()",
      "info" : "MethodDeclaration[17130-17476]:MethodDeclaration[17130-17476]"
    }, {
      "left" : "public static <T> T getClientProperty(@NotNull JComponent component, @NotNull Key<T> key)",
      "right" : "public static <T> T getClientProperty(@NotNull JComponent component, @NotNull Key<T> key)",
      "info" : "MethodDeclaration[17480-17623]:MethodDeclaration[17480-17623]"
    }, {
      "left" : "public static <T> void putClientProperty(@NotNull JComponent component, @NotNull Key<T> key, T value)",
      "right" : "public static <T> void putClientProperty(@NotNull JComponent component, @NotNull Key<T> key, T value)",
      "info" : "MethodDeclaration[17627-17779]:MethodDeclaration[17627-17779]"
    }, {
      "left" : "public static String getHtmlBody(@NotNull String text)",
      "right" : "public static String getHtmlBody(@NotNull String text)",
      "info" : "MethodDeclaration[17783-18462]:MethodDeclaration[17783-18462]"
    }, {
      "left" : "public static String getHtmlBody(Html html)",
      "right" : "public static String getHtmlBody(Html html)",
      "info" : "MethodDeclaration[18466-18668]:MethodDeclaration[18466-18668]"
    }, {
      "left" : "public static void drawLinePickedOut(Graphics graphics, int x, int y, int x1, int y1)",
      "right" : "public static void drawLinePickedOut(Graphics graphics, int x, int y, int x1, int y1)",
      "info" : "MethodDeclaration[18672-19115]:MethodDeclaration[18672-19115]"
    }, {
      "left" : "public static boolean isReallyTypedEvent(KeyEvent e)",
      "right" : "public static boolean isReallyTypedEvent(KeyEvent e)",
      "info" : "MethodDeclaration[19119-19388]:MethodDeclaration[19119-19388]"
    }, {
      "left" : "public static int getStringY(@NotNull final String string, @NotNull final Rectangle bounds, @NotNull final Graphics2D g)",
      "right" : "public static int getStringY(@NotNull final String string, @NotNull final Rectangle bounds, @NotNull final Graphics2D g)",
      "info" : "MethodDeclaration[19392-19811]:MethodDeclaration[19392-19811]"
    }, {
      "left" : "public static void setEnabled(Component component, boolean enabled, boolean recursively)",
      "right" : "public static void setEnabled(Component component, boolean enabled, boolean recursively)",
      "info" : "MethodDeclaration[19815-19965]:MethodDeclaration[19815-19965]"
    }, {
      "left" : "public static void setEnabled(Component component, boolean enabled, boolean recursively, boolean visibleOnly)",
      "right" : "public static void setEnabled(Component component, boolean enabled, boolean recursively, boolean visibleOnly)",
      "info" : "MethodDeclaration[19969-21080]:MethodDeclaration[19969-21080]"
    }, {
      "left" : "public static void drawLine(Graphics g, int x1, int y1, int x2, int y2)",
      "right" : "public static void drawLine(Graphics g, int x1, int y1, int x2, int y2)",
      "info" : "MethodDeclaration[21084-21193]:MethodDeclaration[21084-21193]"
    }, {
      "left" : "public static void drawLine(Graphics2D g, int x1, int y1, int x2, int y2, @Nullable Color bgColor, @Nullable Color fgColor)",
      "right" : "public static void drawLine(Graphics2D g, int x1, int y1, int x2, int y2, @Nullable Color bgColor, @Nullable Color fgColor)",
      "info" : "MethodDeclaration[21197-21674]:MethodDeclaration[21197-21674]"
    }, {
      "left" : "public static void drawWave(Graphics2D g, Rectangle rectangle)",
      "right" : "public static void drawWave(Graphics2D g, Rectangle rectangle)",
      "info" : "MethodDeclaration[21678-22403]:MethodDeclaration[21678-22403]"
    }, {
      "left" : "public static String[] splitText(String text, FontMetrics fontMetrics, int widthLimit, char separator)",
      "right" : "public static String[] splitText(String text, FontMetrics fontMetrics, int widthLimit, char separator)",
      "info" : "MethodDeclaration[22407-23434]:MethodDeclaration[22407-23434]"
    }, {
      "left" : "public static void setActionNameAndMnemonic(@NotNull String text, @NotNull Action action)",
      "right" : "public static void setActionNameAndMnemonic(@NotNull String text, @NotNull Action action)",
      "info" : "MethodDeclaration[23438-23645]:MethodDeclaration[23438-23645]"
    }, {
      "left" : "public static void assignMnemonic(@NotNull String text, @NotNull Action action)",
      "right" : "public static void assignMnemonic(@NotNull String text, @NotNull Action action)",
      "info" : "MethodDeclaration[23648-24039]:MethodDeclaration[23648-24039]"
    }, {
      "left" : "public static Font getLabelFont(@NotNull FontSize size)",
      "right" : "public static Font getLabelFont(@NotNull FontSize size)",
      "info" : "MethodDeclaration[24044-24137]:MethodDeclaration[24044-24137]"
    }, {
      "left" : "public static Font getFont(@NotNull FontSize size, @Nullable Font base)",
      "right" : "public static Font getFont(@NotNull FontSize size, @Nullable Font base)",
      "info" : "MethodDeclaration[24141-24322]:MethodDeclaration[24141-24322]"
    }, {
      "left" : "public static float getFontSize(FontSize size)",
      "right" : "public static float getFontSize(FontSize size)",
      "info" : "MethodDeclaration[24326-24657]:MethodDeclaration[24326-24657]"
    }, {
      "left" : "public static Color getLabelFontColor(FontColor fontColor)",
      "right" : "public static Color getLabelFontColor(FontColor fontColor)",
      "info" : "MethodDeclaration[24661-25023]:MethodDeclaration[24661-25023]"
    }, {
      "left" : "private static final Map<Class, Ref<Method>> ourDefaultIconMethodsCache = new ConcurrentHashMap<Class, Ref<Method>>();",
      "right" : "private static final Map<Class, Ref<Method>> ourDefaultIconMethodsCache = new ConcurrentHashMap<Class, Ref<Method>>();",
      "info" : "FieldDeclaration[25027-25145]:FieldDeclaration[25027-25145]"
    }, {
      "left" : "public static int getCheckBoxTextHorizontalOffset(@NotNull JCheckBox cb)",
      "right" : "public static int getCheckBoxTextHorizontalOffset(@NotNull JCheckBox cb)",
      "info" : "MethodDeclaration[25148-27175]:MethodDeclaration[25148-27175]"
    }, {
      "left" : "public static int getScrollBarWidth()",
      "right" : "public static int getScrollBarWidth()",
      "info" : "MethodDeclaration[27179-27270]:MethodDeclaration[27179-27270]"
    }, {
      "left" : "public static Font getLabelFont()",
      "right" : "public static Font getLabelFont()",
      "info" : "MethodDeclaration[27274-27357]:MethodDeclaration[27274-27357]"
    }, {
      "left" : "public static Color getLabelBackground()",
      "right" : "public static Color getLabelBackground()",
      "info" : "MethodDeclaration[27361-27458]:MethodDeclaration[27361-27458]"
    }, {
      "left" : "public static Color getLabelForeground()",
      "right" : "public static Color getLabelForeground()",
      "info" : "MethodDeclaration[27462-27559]:MethodDeclaration[27462-27559]"
    }, {
      "left" : "public static Color getLabelDisabledForeground()",
      "right" : "public static Color getLabelDisabledForeground()",
      "info" : "MethodDeclaration[27563-27779]:MethodDeclaration[27563-27779]"
    }, {
      "left" : "public static String removeMnemonic(@NotNull String s)",
      "right" : "public static String removeMnemonic(@NotNull String s)",
      "info" : "MethodDeclaration[27783-28134]:MethodDeclaration[27783-28134]"
    }, {
      "left" : "public static int getDisplayMnemonicIndex(@NotNull String s)",
      "right" : "public static int getDisplayMnemonicIndex(@NotNull String s)",
      "info" : "MethodDeclaration[28138-28455]:MethodDeclaration[28138-28455]"
    }, {
      "left" : "public static String replaceMnemonicAmpersand(final String value)",
      "right" : "public static String replaceMnemonicAmpersand(final String value)",
      "info" : "MethodDeclaration[28459-28585]:MethodDeclaration[28459-28585]"
    }, {
      "left" : "public static Color getTableHeaderBackground()",
      "right" : "public static Color getTableHeaderBackground()",
      "info" : "MethodDeclaration[28589-28698]:MethodDeclaration[28589-28698]"
    }, {
      "left" : "public static Color getTreeTextForeground()",
      "right" : "public static Color getTreeTextForeground()",
      "info" : "MethodDeclaration[28702-28805]:MethodDeclaration[28702-28805]"
    }, {
      "left" : "public static Color getTreeSelectionBackground()",
      "right" : "public static Color getTreeSelectionBackground()",
      "info" : "MethodDeclaration[28809-29175]:MethodDeclaration[28809-29175]"
    }, {
      "left" : "public static Color getTreeTextBackground()",
      "right" : "public static Color getTreeTextBackground()",
      "info" : "MethodDeclaration[29179-29282]:MethodDeclaration[29179-29282]"
    }, {
      "left" : "public static Color getListSelectionForeground()",
      "right" : "public static Color getListSelectionForeground()",
      "info" : "MethodDeclaration[29286-29538]:MethodDeclaration[29286-29538]"
    }, {
      "left" : "public static Color getFieldForegroundColor()",
      "right" : "public static Color getFieldForegroundColor()",
      "info" : "MethodDeclaration[29542-29644]:MethodDeclaration[29542-29644]"
    }, {
      "left" : "public static Color getTableSelectionBackground()",
      "right" : "public static Color getTableSelectionBackground()",
      "info" : "MethodDeclaration[29648-30030]:MethodDeclaration[29648-30030]"
    }, {
      "left" : "public static Color getActiveTextColor()",
      "right" : "public static Color getActiveTextColor()",
      "info" : "MethodDeclaration[30034-30129]:MethodDeclaration[30034-30129]"
    }, {
      "left" : "public static Color getInactiveTextColor()",
      "right" : "public static Color getInactiveTextColor()",
      "info" : "MethodDeclaration[30133-30232]:MethodDeclaration[30133-30232]"
    }, {
      "left" : "public static Color getSlightlyDarkerColor(Color c)",
      "right" : "public static Color getSlightlyDarkerColor(Color c)",
      "info" : "MethodDeclaration[30236-30478]:MethodDeclaration[30236-30478]"
    }, {
      "left" : "public static Color getActiveTextFieldBackgroundColor()",
      "right" : "public static Color getActiveTextFieldBackgroundColor()",
      "info" : "MethodDeclaration[30482-30666]:MethodDeclaration[30482-30666]"
    }, {
      "left" : "public static Color getInactiveTextFieldBackgroundColor()",
      "right" : "public static Color getInactiveTextFieldBackgroundColor()",
      "info" : "MethodDeclaration[30670-30796]:MethodDeclaration[30670-30796]"
    }, {
      "left" : "public static Font getTreeFont()",
      "right" : "public static Font getTreeFont()",
      "info" : "MethodDeclaration[30800-30881]:MethodDeclaration[30800-30881]"
    }, {
      "left" : "public static Font getListFont()",
      "right" : "public static Font getListFont()",
      "info" : "MethodDeclaration[30885-30966]:MethodDeclaration[30885-30966]"
    }, {
      "left" : "public static Color getTreeSelectionForeground()",
      "right" : "public static Color getTreeSelectionForeground()",
      "info" : "MethodDeclaration[30970-31083]:MethodDeclaration[30970-31083]"
    }, {
      "left" : "public static Color getTextInactiveTextColor()",
      "right" : "public static Color getTextInactiveTextColor()",
      "info" : "MethodDeclaration[31087-31258]:MethodDeclaration[31087-31258]"
    }, {
      "left" : "public static void installPopupMenuColorAndFonts(final JComponent contentPane)",
      "right" : "public static void installPopupMenuColorAndFonts(final JComponent contentPane)",
      "info" : "MethodDeclaration[31262-31463]:MethodDeclaration[31262-31463]"
    }, {
      "left" : "public static void installPopupMenuBorder(final JComponent contentPane)",
      "right" : "public static void installPopupMenuBorder(final JComponent contentPane)",
      "info" : "MethodDeclaration[31467-31608]:MethodDeclaration[31467-31608]"
    }, {
      "left" : "public static Color getTreeSelectionBorderColor()",
      "right" : "public static Color getTreeSelectionBorderColor()",
      "info" : "MethodDeclaration[31612-31727]:MethodDeclaration[31612-31727]"
    }, {
      "left" : "public static int getTreeRightChildIndent()",
      "right" : "public static int getTreeRightChildIndent()",
      "info" : "MethodDeclaration[31731-31834]:MethodDeclaration[31731-31834]"
    }, {
      "left" : "public static int getTreeLeftChildIndent()",
      "right" : "public static int getTreeLeftChildIndent()",
      "info" : "MethodDeclaration[31838-31939]:MethodDeclaration[31838-31939]"
    }, {
      "left" : "public static Color getToolTipBackground()",
      "right" : "public static Color getToolTipBackground()",
      "info" : "MethodDeclaration[31943-32044]:MethodDeclaration[31943-32044]"
    }, {
      "left" : "public static Color getToolTipForeground()",
      "right" : "public static Color getToolTipForeground()",
      "info" : "MethodDeclaration[32048-32149]:MethodDeclaration[32048-32149]"
    }, {
      "left" : "public static Color getComboBoxDisabledForeground()",
      "right" : "public static Color getComboBoxDisabledForeground()",
      "info" : "MethodDeclaration[32153-32272]:MethodDeclaration[32153-32272]"
    }, {
      "left" : "public static Color getComboBoxDisabledBackground()",
      "right" : "public static Color getComboBoxDisabledBackground()",
      "info" : "MethodDeclaration[32276-32395]:MethodDeclaration[32276-32395]"
    }, {
      "left" : "public static Color getButtonSelectColor()",
      "right" : "public static Color getButtonSelectColor()",
      "info" : "MethodDeclaration[32399-32495]:MethodDeclaration[32399-32495]"
    }, {
      "left" : "public static Integer getPropertyMaxGutterIconWidth(final String propertyPrefix)",
      "right" : "public static Integer getPropertyMaxGutterIconWidth(final String propertyPrefix)",
      "info" : "MethodDeclaration[32499-32660]:MethodDeclaration[32499-32660]"
    }, {
      "left" : "public static Color getMenuItemDisabledForeground()",
      "right" : "public static Color getMenuItemDisabledForeground()",
      "info" : "MethodDeclaration[32664-32783]:MethodDeclaration[32664-32783]"
    }, {
      "left" : "public static Object getMenuItemDisabledForegroundObject()",
      "right" : "public static Object getMenuItemDisabledForegroundObject()",
      "info" : "MethodDeclaration[32787-32908]:MethodDeclaration[32787-32908]"
    }, {
      "left" : "public static Object getTabbedPanePaintContentBorder(final JComponent c)",
      "right" : "public static Object getTabbedPanePaintContentBorder(final JComponent c)",
      "info" : "MethodDeclaration[32912-33055]:MethodDeclaration[32912-33055]"
    }, {
      "left" : "public static boolean isMenuCrossMenuMnemonics()",
      "right" : "public static boolean isMenuCrossMenuMnemonics()",
      "info" : "MethodDeclaration[33059-33172]:MethodDeclaration[33059-33172]"
    }, {
      "left" : "public static Color getTableBackground()",
      "right" : "public static Color getTableBackground()",
      "info" : "MethodDeclaration[33176-33411]:MethodDeclaration[33176-33411]"
    }, {
      "left" : "public static Color getTableBackground(final boolean isSelected)",
      "right" : "public static Color getTableBackground(final boolean isSelected)",
      "info" : "MethodDeclaration[33415-33563]:MethodDeclaration[33415-33563]"
    }, {
      "left" : "public static Color getTableSelectionForeground()",
      "right" : "public static Color getTableSelectionForeground()",
      "info" : "MethodDeclaration[33567-33801]:MethodDeclaration[33567-33801]"
    }, {
      "left" : "public static Color getTableForeground()",
      "right" : "public static Color getTableForeground()",
      "info" : "MethodDeclaration[33805-33902]:MethodDeclaration[33805-33902]"
    }, {
      "left" : "public static Color getTableForeground(final boolean isSelected)",
      "right" : "public static Color getTableForeground(final boolean isSelected)",
      "info" : "MethodDeclaration[33906-34054]:MethodDeclaration[33906-34054]"
    }, {
      "left" : "public static Color getTableGridColor()",
      "right" : "public static Color getTableGridColor()",
      "info" : "MethodDeclaration[34058-34153]:MethodDeclaration[34058-34153]"
    }, {
      "left" : "public static Color getListBackground()",
      "right" : "public static Color getListBackground()",
      "info" : "MethodDeclaration[34157-34624]:MethodDeclaration[34157-34624]"
    }, {
      "left" : "public static Color getListBackground(boolean isSelected)",
      "right" : "public static Color getListBackground(boolean isSelected)",
      "info" : "MethodDeclaration[34628-34767]:MethodDeclaration[34628-34767]"
    }, {
      "left" : "public static Color getListForeground()",
      "right" : "public static Color getListForeground()",
      "info" : "MethodDeclaration[34771-34866]:MethodDeclaration[34771-34866]"
    }, {
      "left" : "public static Color getListForeground(boolean isSelected)",
      "right" : "public static Color getListForeground(boolean isSelected)",
      "info" : "MethodDeclaration[34870-35009]:MethodDeclaration[34870-35009]"
    }, {
      "left" : "public static Color getPanelBackground()",
      "right" : "public static Color getPanelBackground()",
      "info" : "MethodDeclaration[35013-35110]:MethodDeclaration[35013-35110]"
    }, {
      "left" : "public static Color getTreeBackground()",
      "right" : "public static Color getTreeBackground()",
      "info" : "MethodDeclaration[35114-35209]:MethodDeclaration[35114-35209]"
    }, {
      "left" : "public static Color getTreeForeground()",
      "right" : "public static Color getTreeForeground()",
      "info" : "MethodDeclaration[35213-35308]:MethodDeclaration[35213-35308]"
    }, {
      "left" : "public static Color getTableFocusCellBackground()",
      "right" : "public static Color getTableFocusCellBackground()",
      "info" : "MethodDeclaration[35312-35436]:MethodDeclaration[35312-35436]"
    }, {
      "left" : "public static Color getListSelectionBackground()",
      "right" : "public static Color getListSelectionBackground()",
      "info" : "MethodDeclaration[35440-35674]:MethodDeclaration[35440-35674]"
    }, {
      "left" : "public static Color getListUnfocusedSelectionBackground()",
      "right" : "public static Color getListUnfocusedSelectionBackground()",
      "info" : "MethodDeclaration[35678-35815]:MethodDeclaration[35678-35815]"
    }, {
      "left" : "public static Color getTreeSelectionBackground(boolean focused)",
      "right" : "public static Color getTreeSelectionBackground(boolean focused)",
      "info" : "MethodDeclaration[35819-35979]:MethodDeclaration[35819-35979]"
    }, {
      "left" : "public static Color getTreeUnfocusedSelectionBackground()",
      "right" : "public static Color getTreeUnfocusedSelectionBackground()",
      "info" : "MethodDeclaration[35983-36210]:MethodDeclaration[35983-36210]"
    }, {
      "left" : "public static Color getTextFieldForeground()",
      "right" : "public static Color getTextFieldForeground()",
      "info" : "MethodDeclaration[36214-36319]:MethodDeclaration[36214-36319]"
    }, {
      "left" : "public static Color getTextFieldBackground()",
      "right" : "public static Color getTextFieldBackground()",
      "info" : "MethodDeclaration[36323-36500]:MethodDeclaration[36323-36500]"
    }, {
      "left" : "public static Font getButtonFont()",
      "right" : "public static Font getButtonFont()",
      "info" : "MethodDeclaration[36504-36589]:MethodDeclaration[36504-36589]"
    }, {
      "left" : "public static Font getToolTipFont()",
      "right" : "public static Font getToolTipFont()",
      "info" : "MethodDeclaration[36593-36680]:MethodDeclaration[36593-36680]"
    }, {
      "left" : "public static Color getTabbedPaneBackground()",
      "right" : "public static Color getTabbedPaneBackground()",
      "info" : "MethodDeclaration[36684-36791]:MethodDeclaration[36684-36791]"
    }, {
      "left" : "public static void setSliderIsFilled(final JSlider slider, final boolean value)",
      "right" : "public static void setSliderIsFilled(final JSlider slider, final boolean value)",
      "info" : "MethodDeclaration[36795-36954]:MethodDeclaration[36795-36954]"
    }, {
      "left" : "public static Color getLabelTextForeground()",
      "right" : "public static Color getLabelTextForeground()",
      "info" : "MethodDeclaration[36958-37063]:MethodDeclaration[36958-37063]"
    }, {
      "left" : "public static Color getControlColor()",
      "right" : "public static Color getControlColor()",
      "info" : "MethodDeclaration[37067-37152]:MethodDeclaration[37067-37152]"
    }, {
      "left" : "public static Font getOptionPaneMessageFont()",
      "right" : "public static Font getOptionPaneMessageFont()",
      "info" : "MethodDeclaration[37156-37263]:MethodDeclaration[37156-37263]"
    }, {
      "left" : "public static Font getMenuFont()",
      "right" : "public static Font getMenuFont()",
      "info" : "MethodDeclaration[37267-37348]:MethodDeclaration[37267-37348]"
    }, {
      "left" : "public static Color getSeparatorForeground()",
      "right" : "public static Color getSeparatorForeground()",
      "info" : "MethodDeclaration[37352-37457]:MethodDeclaration[37352-37457]"
    }, {
      "left" : "public static Color getSeparatorBackground()",
      "right" : "public static Color getSeparatorBackground()",
      "info" : "MethodDeclaration[37461-37566]:MethodDeclaration[37461-37566]"
    }, {
      "left" : "public static Color getSeparatorShadow()",
      "right" : "public static Color getSeparatorShadow()",
      "info" : "MethodDeclaration[37570-37667]:MethodDeclaration[37570-37667]"
    }, {
      "left" : "public static Color getSeparatorHighlight()",
      "right" : "public static Color getSeparatorHighlight()",
      "info" : "MethodDeclaration[37671-37774]:MethodDeclaration[37671-37774]"
    }, {
      "left" : "public static Color getSeparatorColorUnderNimbus()",
      "right" : "public static Color getSeparatorColorUnderNimbus()",
      "info" : "MethodDeclaration[37778-37883]:MethodDeclaration[37778-37883]"
    }, {
      "left" : "public static Color getSeparatorColor()",
      "right" : "public static Color getSeparatorColor()",
      "info" : "MethodDeclaration[37887-38311]:MethodDeclaration[37887-38311]"
    }, {
      "left" : "public static Border getTableFocusCellHighlightBorder()",
      "right" : "public static Border getTableFocusCellHighlightBorder()",
      "info" : "MethodDeclaration[38315-38442]:MethodDeclaration[38315-38442]"
    }, {
      "left" : "public static void setLineStyleAngled(final ClientPropertyHolder component)",
      "right" : "public static void setLineStyleAngled(final ClientPropertyHolder component)",
      "info" : "MethodDeclaration[38446-38589]:MethodDeclaration[38446-38589]"
    }, {
      "left" : "public static void setLineStyleAngled(final JTree component)",
      "right" : "public static void setLineStyleAngled(final JTree component)",
      "info" : "MethodDeclaration[38593-38721]:MethodDeclaration[38593-38721]"
    }, {
      "left" : "public static Color getTableFocusCellForeground()",
      "right" : "public static Color getTableFocusCellForeground()",
      "info" : "MethodDeclaration[38725-38840]:MethodDeclaration[38725-38840]"
    }, {
      "left" : "public static Color getPanelBackgound()",
      "right" : "public static Color getPanelBackgound()",
      "info" : "MethodDeclaration[38844-39012]:MethodDeclaration[38844-39012]"
    }, {
      "left" : "public static Border getTextFieldBorder()",
      "right" : "public static Border getTextFieldBorder()",
      "info" : "MethodDeclaration[39016-39115]:MethodDeclaration[39016-39115]"
    }, {
      "left" : "public static Border getButtonBorder()",
      "right" : "public static Border getButtonBorder()",
      "info" : "MethodDeclaration[39119-39212]:MethodDeclaration[39119-39212]"
    }, {
      "left" : "public static Icon getErrorIcon()",
      "right" : "public static Icon getErrorIcon()",
      "info" : "MethodDeclaration[39216-39371]:MethodDeclaration[39216-39371]"
    }, {
      "left" : "public static Icon getInformationIcon()",
      "right" : "public static Icon getInformationIcon()",
      "info" : "MethodDeclaration[39375-39548]:MethodDeclaration[39375-39548]"
    }, {
      "left" : "public static Icon getQuestionIcon()",
      "right" : "public static Icon getQuestionIcon()",
      "info" : "MethodDeclaration[39552-39716]:MethodDeclaration[39552-39716]"
    }, {
      "left" : "public static Icon getWarningIcon()",
      "right" : "public static Icon getWarningIcon()",
      "info" : "MethodDeclaration[39720-39881]:MethodDeclaration[39720-39881]"
    }, {
      "left" : "public static Icon getBalloonInformationIcon()",
      "right" : "public static Icon getBalloonInformationIcon()",
      "info" : "MethodDeclaration[39885-39985]:MethodDeclaration[39885-39985]"
    }, {
      "left" : "public static Icon getBalloonWarningIcon()",
      "right" : "public static Icon getBalloonWarningIcon()",
      "info" : "MethodDeclaration[39989-40081]:MethodDeclaration[39989-40081]"
    }, {
      "left" : "public static Icon getBalloonErrorIcon()",
      "right" : "public static Icon getBalloonErrorIcon()",
      "info" : "MethodDeclaration[40085-40173]:MethodDeclaration[40085-40173]"
    }, {
      "left" : "public static Icon getRadioButtonIcon()",
      "right" : "public static Icon getRadioButtonIcon()",
      "info" : "MethodDeclaration[40177-40272]:MethodDeclaration[40177-40272]"
    }, {
      "left" : "public static Icon getTreeNodeIcon(boolean expanded, boolean selected, boolean focused)",
      "right" : "public static Icon getTreeNodeIcon(boolean expanded, boolean selected, boolean focused)",
      "info" : "MethodDeclaration[40276-40975]:MethodDeclaration[40276-40975]"
    }, {
      "left" : "public static Icon getTreeCollapsedIcon()",
      "right" : "public static Icon getTreeCollapsedIcon()",
      "info" : "MethodDeclaration[40979-41078]:MethodDeclaration[40979-41078]"
    }, {
      "left" : "public static Icon getTreeExpandedIcon()",
      "right" : "public static Icon getTreeExpandedIcon()",
      "info" : "MethodDeclaration[41082-41179]:MethodDeclaration[41082-41179]"
    }, {
      "left" : "public static Icon getTreeIcon(boolean expanded)",
      "right" : "public static Icon getTreeIcon(boolean expanded)",
      "info" : "MethodDeclaration[41183-41307]:MethodDeclaration[41183-41307]"
    }, {
      "left" : "public static Icon getTreeSelectedCollapsedIcon()",
      "right" : "public static Icon getTreeSelectedCollapsedIcon()",
      "info" : "MethodDeclaration[41311-41583]:MethodDeclaration[41311-41583]"
    }, {
      "left" : "public static Icon getTreeSelectedExpandedIcon()",
      "right" : "public static Icon getTreeSelectedExpandedIcon()",
      "info" : "MethodDeclaration[41587-41856]:MethodDeclaration[41587-41856]"
    }, {
      "left" : "public static Border getTableHeaderCellBorder()",
      "right" : "public static Border getTableHeaderCellBorder()",
      "info" : "MethodDeclaration[41860-41971]:MethodDeclaration[41860-41971]"
    }, {
      "left" : "public static Color getWindowColor()",
      "right" : "public static Color getWindowColor()",
      "info" : "MethodDeclaration[41975-42058]:MethodDeclaration[41975-42058]"
    }, {
      "left" : "public static Color getTextAreaForeground()",
      "right" : "public static Color getTextAreaForeground()",
      "info" : "MethodDeclaration[42062-42165]:MethodDeclaration[42062-42165]"
    }, {
      "left" : "public static Color getOptionPaneBackground()",
      "right" : "public static Color getOptionPaneBackground()",
      "info" : "MethodDeclaration[42169-42276]:MethodDeclaration[42169-42276]"
    }, {
      "left" : "public static boolean isUnderAlloyLookAndFeel()",
      "right" : "public static boolean isUnderAlloyLookAndFeel()",
      "info" : "MethodDeclaration[42280-42448]:MethodDeclaration[42280-42448]"
    }, {
      "left" : "public static boolean isUnderAlloyIDEALookAndFeel()",
      "right" : "public static boolean isUnderAlloyIDEALookAndFeel()",
      "info" : "MethodDeclaration[42452-42652]:MethodDeclaration[42452-42652]"
    }, {
      "left" : "public static boolean isUnderWindowsLookAndFeel()",
      "right" : "public static boolean isUnderWindowsLookAndFeel()",
      "info" : "MethodDeclaration[42656-42850]:MethodDeclaration[42656-42850]"
    }, {
      "left" : "public static boolean isUnderWindowsClassicLookAndFeel()",
      "right" : "public static boolean isUnderWindowsClassicLookAndFeel()",
      "info" : "MethodDeclaration[42854-43039]:MethodDeclaration[42854-43039]"
    }, {
      "left" : "public static boolean isUnderNimbusLookAndFeel()",
      "right" : "public static boolean isUnderNimbusLookAndFeel()",
      "info" : "MethodDeclaration[43043-43213]:MethodDeclaration[43043-43213]"
    }, {
      "left" : "public static boolean isUnderAquaLookAndFeel()",
      "right" : "public static boolean isUnderAquaLookAndFeel()",
      "info" : "MethodDeclaration[43217-43407]:MethodDeclaration[43217-43407]"
    }, {
      "left" : "public static boolean isUnderJGoodiesLookAndFeel()",
      "right" : "public static boolean isUnderJGoodiesLookAndFeel()",
      "info" : "MethodDeclaration[43411-43585]:MethodDeclaration[43411-43585]"
    }, {
      "left" : "public static boolean isUnderAquaBasedLookAndFeel()",
      "right" : "public static boolean isUnderAquaBasedLookAndFeel()",
      "info" : "MethodDeclaration[43589-43773]:MethodDeclaration[43589-43773]"
    }, {
      "left" : "public static boolean isUnderDarcula()",
      "right" : "public static boolean isUnderDarcula()",
      "info" : "MethodDeclaration[43777-43938]:MethodDeclaration[43777-43938]"
    }, {
      "left" : "public static boolean isUnderIntelliJLaF()",
      "right" : "public static boolean isUnderIntelliJLaF()",
      "info" : "MethodDeclaration[43942-44108]:MethodDeclaration[43942-44108]"
    }, {
      "left" : "public static boolean isUnderGTKLookAndFeel()",
      "right" : "public static boolean isUnderGTKLookAndFeel()",
      "info" : "MethodDeclaration[44112-44300]:MethodDeclaration[44112-44300]"
    }, {
      "left" : "public static final Color GTK_AMBIANCE_TEXT_COLOR = new Color(223, 219, 210);",
      "right" : "public static final Color GTK_AMBIANCE_TEXT_COLOR = new Color(223, 219, 210);",
      "info" : "FieldDeclaration[44304-44381]:FieldDeclaration[44304-44381]"
    }, {
      "left" : "public static final Color GTK_AMBIANCE_BACKGROUND_COLOR = new Color(67, 66, 63);",
      "right" : "public static final Color GTK_AMBIANCE_BACKGROUND_COLOR = new Color(67, 66, 63);",
      "info" : "FieldDeclaration[44384-44464]:FieldDeclaration[44384-44464]"
    }, {
      "left" : "public static String getGtkThemeName()",
      "right" : "public static String getGtkThemeName()",
      "info" : "MethodDeclaration[44468-45037]:MethodDeclaration[44468-45037]"
    }, {
      "left" : "public static boolean isMurrineBasedTheme()",
      "right" : "public static boolean isMurrineBasedTheme()",
      "info" : "MethodDeclaration[45041-45388]:MethodDeclaration[45041-45388]"
    }, {
      "left" : "public static Color shade(final Color c, final double factor, final double alphaFactor)",
      "right" : "public static Color shade(final Color c, final double factor, final double alphaFactor)",
      "info" : "MethodDeclaration[45392-45822]:MethodDeclaration[45392-45822]"
    }, {
      "left" : "public static Color mix(final Color c1, final Color c2, final double factor)",
      "right" : "public static Color mix(final Color c1, final Color c2, final double factor)",
      "info" : "MethodDeclaration[45826-46327]:MethodDeclaration[45826-46327]"
    }, {
      "left" : "public static boolean isFullRowSelectionLAF()",
      "right" : "public static boolean isFullRowSelectionLAF()",
      "info" : "MethodDeclaration[46331-46418]:MethodDeclaration[46331-46418]"
    }, {
      "left" : "public static boolean isUnderNativeMacLookAndFeel()",
      "right" : "public static boolean isUnderNativeMacLookAndFeel()",
      "info" : "MethodDeclaration[46422-46536]:MethodDeclaration[46422-46536]"
    }, {
      "left" : "public static int getListCellHPadding()",
      "right" : "public static int getListCellHPadding()",
      "info" : "MethodDeclaration[46540-46635]:MethodDeclaration[46540-46635]"
    }, {
      "left" : "public static int getListCellVPadding()",
      "right" : "public static int getListCellVPadding()",
      "info" : "MethodDeclaration[46639-46698]:MethodDeclaration[46639-46698]"
    }, {
      "left" : "public static Insets getListCellPadding()",
      "right" : "public static Insets getListCellPadding()",
      "info" : "MethodDeclaration[46702-46864]:MethodDeclaration[46702-46864]"
    }, {
      "left" : "public static Insets getListViewportPadding()",
      "right" : "public static Insets getListViewportPadding()",
      "info" : "MethodDeclaration[46868-47011]:MethodDeclaration[46868-47011]"
    }, {
      "left" : "public static boolean isToUseDottedCellBorder()",
      "right" : "public static boolean isToUseDottedCellBorder()",
      "info" : "MethodDeclaration[47015-47111]:MethodDeclaration[47015-47111]"
    }, {
      "left" : "public static boolean isControlKeyDown(MouseEvent mouseEvent)",
      "right" : "public static boolean isControlKeyDown(MouseEvent mouseEvent)",
      "info" : "MethodDeclaration[47115-47266]:MethodDeclaration[47115-47266]"
    }, {
      "left" : "public static String[] getValidFontNames(final boolean familyName)",
      "right" : "public static String[] getValidFontNames(final boolean familyName)",
      "info" : "MethodDeclaration[47270-48064]:MethodDeclaration[47270-48064]"
    }, {
      "left" : "public static String[] getStandardFontSizes()",
      "right" : "public static String[] getStandardFontSizes()",
      "info" : "MethodDeclaration[48068-48151]:MethodDeclaration[48068-48151]"
    }, {
      "left" : "public static boolean isValidFont(@NotNull Font font)",
      "right" : "public static boolean isValidFont(@NotNull Font font)",
      "info" : "MethodDeclaration[48155-48562]:MethodDeclaration[48155-48562]"
    }, {
      "left" : "public static void setupEnclosingDialogBounds(final JComponent component)",
      "right" : "public static void setupEnclosingDialogBounds(final JComponent component)",
      "info" : "MethodDeclaration[48566-48951]:MethodDeclaration[48566-48951]"
    }, {
      "left" : "public static String displayPropertiesToCSS(Font font, Color fg)",
      "right" : "public static String displayPropertiesToCSS(Font font, Color fg)",
      "info" : "MethodDeclaration[48955-49644]:MethodDeclaration[48955-49644]"
    }, {
      "left" : "public static void appendColor(final Color color, final StringBuilder sb)",
      "right" : "public static void appendColor(final Color color, final StringBuilder sb)",
      "info" : "MethodDeclaration[49648-50024]:MethodDeclaration[49648-50024]"
    }, {
      "left" : "public static void drawDottedRectangle(Graphics g, int x, int y, int x1, int y1)",
      "right" : "public static void drawDottedRectangle(Graphics g, int x, int y, int x1, int y1)",
      "info" : "MethodDeclaration[50028-50720]:MethodDeclaration[50028-50720]"
    }, {
      "left" : "public static void drawBoldDottedLine(final Graphics2D g,\n                                        final int startX,\n                                        final int endX,\n                                        final int lineY,\n                                        final Color bgColor,\n                                        final Color fgColor,\n                                        final boolean opaque)",
      "right" : "public static void drawBoldDottedLine(final Graphics2D g,\n                                        final int startX,\n                                        final int endX,\n                                        final int lineY,\n                                        final Color bgColor,\n                                        final Color fgColor,\n                                        final boolean opaque)",
      "info" : "MethodDeclaration[50724-51748]:MethodDeclaration[50724-51748]"
    }, {
      "left" : "public static void drawSearchMatch(final Graphics2D g,\n                                     final int startX,\n                                     final int endX,\n                                     final int height)",
      "right" : "public static void drawSearchMatch(final Graphics2D g,\n                                     final int startX,\n                                     final int endX,\n                                     final int height)",
      "info" : "MethodDeclaration[51752-52110]:MethodDeclaration[51752-52110]"
    }, {
      "left" : "public static void drawSearchMatch(Graphics2D g, int startX, int endX, int height, Color c1, Color c2)",
      "right" : "public static void drawSearchMatch(Graphics2D g, int startX, int endX, int height, Color c1, Color c2)",
      "info" : "MethodDeclaration[52114-53105]:MethodDeclaration[52114-53105]"
    }, {
      "left" : "public static void drawRectPickedOut(Graphics2D g, int x, int y, int w, int h)",
      "right" : "public static void drawRectPickedOut(Graphics2D g, int x, int y, int w, int h)",
      "info" : "MethodDeclaration[53109-53369]:MethodDeclaration[53109-53369]"
    }, {
      "left" : "private static void drawBoringDottedLine(final Graphics2D g,\n                                           final int startX,\n                                           final int endX,\n                                           final int lineY,\n                                           final Color bgColor,\n                                           final Color fgColor,\n                                           final boolean opaque)",
      "right" : "private static void drawBoringDottedLine(final Graphics2D g,\n                                           final int startX,\n                                           final int endX,\n                                           final int lineY,\n                                           final Color bgColor,\n                                           final Color fgColor,\n                                           final boolean opaque)",
      "info" : "MethodDeclaration[53373-54645]:MethodDeclaration[53373-54645]"
    }, {
      "left" : "public static void drawGradientHToolbarBackground(final Graphics g, final int width, final int height)",
      "right" : "public static void drawGradientHToolbarBackground(final Graphics g, final int width, final int height)",
      "info" : "MethodDeclaration[54649-54913]:MethodDeclaration[54649-54913]"
    }, {
      "left" : "public static void drawHeader(Graphics g, int x, int width, int height, boolean active, boolean drawTopLine)",
      "right" : "public static void drawHeader(Graphics g, int x, int width, int height, boolean active, boolean drawTopLine)",
      "info" : "MethodDeclaration[54917-55102]:MethodDeclaration[54917-55102]"
    }, {
      "left" : "public static void drawHeader(Graphics g,\n                                int x,\n                                int width,\n                                int height,\n                                boolean active,\n                                boolean toolWindow,\n                                boolean drawTopLine,\n                                boolean drawBottomLine)",
      "right" : "public static void drawHeader(Graphics g,\n                                int x,\n                                int width,\n                                int height,\n                                boolean active,\n                                boolean toolWindow,\n                                boolean drawTopLine,\n                                boolean drawBottomLine)",
      "info" : "MethodDeclaration[55106-56379]:MethodDeclaration[55106-56379]"
    }, {
      "left" : "public static void drawDoubleSpaceDottedLine(final Graphics2D g,\n                                               final int start,\n                                               final int end,\n                                               final int xOrY,\n                                               final Color fgColor,\n                                               boolean horizontal)",
      "right" : "public static void drawDoubleSpaceDottedLine(final Graphics2D g,\n                                               final int start,\n                                               final int end,\n                                               final int xOrY,\n                                               final Color fgColor,\n                                               boolean horizontal)",
      "info" : "MethodDeclaration[56383-56995]:MethodDeclaration[56383-56995]"
    }, {
      "left" : "private static void drawAppleDottedLine(final Graphics2D g,\n                                          final int startX,\n                                          final int endX,\n                                          final int lineY,\n                                          final Color bgColor,\n                                          final Color fgColor,\n                                          final boolean opaque)",
      "right" : "private static void drawAppleDottedLine(final Graphics2D g,\n                                          final int startX,\n                                          final int endX,\n                                          final int lineY,\n                                          final Color bgColor,\n                                          final Color fgColor,\n                                          final boolean opaque)",
      "info" : "MethodDeclaration[56999-58670]:MethodDeclaration[56999-58670]"
    }, {
      "left" : "private static BufferedImage getAppleDotStamp(final Color fgColor,\n                                                final Color oldColor)",
      "right" : "private static BufferedImage getAppleDotStamp(final Color fgColor,\n                                                final Color oldColor)",
      "info" : "MethodDeclaration[58674-59159]:MethodDeclaration[58674-59159]"
    }, {
      "left" : "private static BufferedImage createAppleDotStamp(final Color color)",
      "right" : "private static BufferedImage createAppleDotStamp(final Color color)",
      "info" : "MethodDeclaration[59163-60049]:MethodDeclaration[59163-60049]"
    }, {
      "left" : "public static void applyRenderingHints(final Graphics g)",
      "right" : "public static void applyRenderingHints(final Graphics g)",
      "info" : "MethodDeclaration[60053-60517]:MethodDeclaration[60053-60517]"
    }, {
      "left" : "public static BufferedImage createImage(int width, int height, int type)",
      "right" : "public static BufferedImage createImage(int width, int height, int type)",
      "info" : "MethodDeclaration[60521-60773]:MethodDeclaration[60521-60773]"
    }, {
      "left" : "public static BufferedImage createImageForGraphics(Graphics2D g, int width, int height, int type)",
      "right" : "public static BufferedImage createImageForGraphics(Graphics2D g, int width, int height, int type)",
      "info" : "MethodDeclaration[60777-61055]:MethodDeclaration[60777-61055]"
    }, {
      "left" : "public static void drawImage(Graphics g, Image image, int x, int y, ImageObserver observer)",
      "right" : "public static void drawImage(Graphics g, Image image, int x, int y, ImageObserver observer)",
      "info" : "MethodDeclaration[61059-61607]:MethodDeclaration[61059-61607]"
    }, {
      "left" : "public static void drawImage(Graphics g, BufferedImage image, BufferedImageOp op, int x, int y)",
      "right" : "public static void drawImage(Graphics g, BufferedImage image, BufferedImageOp op, int x, int y)",
      "info" : "MethodDeclaration[61611-62172]:MethodDeclaration[61611-62172]"
    }, {
      "left" : "public static void paintWithXorOnRetina(@NotNull Dimension size, @NotNull Graphics g, Consumer<Graphics2D> paintRoutine)",
      "right" : "public static void paintWithXorOnRetina(@NotNull Dimension size, @NotNull Graphics g, Consumer<Graphics2D> paintRoutine)",
      "info" : "MethodDeclaration[62177-62358]:MethodDeclaration[62177-62358]"
    }, {
      "left" : "public static void paintWithXorOnRetina(@NotNull Dimension size,\n                                          @NotNull Graphics g,\n                                          boolean useRetinaCondition,\n                                          Consumer<Graphics2D> paintRoutine)",
      "right" : "public static void paintWithXorOnRetina(@NotNull Dimension size,\n                                          @NotNull Graphics g,\n                                          boolean useRetinaCondition,\n                                          Consumer<Graphics2D> paintRoutine)",
      "info" : "MethodDeclaration[62362-63606]:MethodDeclaration[62362-63606]"
    }, {
      "left" : "public static void setupComposite(@NotNull Graphics2D g)",
      "right" : "public static void setupComposite(@NotNull Graphics2D g)",
      "info" : "MethodDeclaration[63610-64141]:MethodDeclaration[63610-64141]"
    }, {
      "left" : "public static void dispatchAllInvocationEvents()",
      "right" : "public static void dispatchAllInvocationEvents()",
      "info" : "MethodDeclaration[64145-64794]:MethodDeclaration[64145-64794]"
    }, {
      "left" : "private static Thread getEventQueueThread()",
      "right" : "private static Thread getEventQueueThread()",
      "info" : "MethodDeclaration[64797-65153]:MethodDeclaration[64797-65153]"
    }, {
      "left" : "public static void pump()",
      "right" : "public static void pump()",
      "info" : "MethodDeclaration[65157-65605]:MethodDeclaration[65157-65605]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[65423-65494]:MethodDeclaration[65423-65494]"
    }, {
      "left" : "public static void addAwtListener(final AWTEventListener listener, long mask, Disposable parent)",
      "right" : "public static void addAwtListener(final AWTEventListener listener, long mask, Disposable parent)",
      "info" : "MethodDeclaration[65609-65961]:MethodDeclaration[65609-65961]"
    }, {
      "left" : "public void dispose()",
      "right" : "public void dispose()",
      "info" : "MethodDeclaration[65832-65949]:MethodDeclaration[65832-65949]"
    }, {
      "left" : "public static void drawVDottedLine(Graphics2D g, int lineX, int startY, int endY, @Nullable final Color bgColor, final Color fgColor)",
      "right" : "public static void drawVDottedLine(Graphics2D g, int lineX, int startY, int endY, @Nullable final Color bgColor, final Color fgColor)",
      "info" : "MethodDeclaration[65965-66332]:MethodDeclaration[65965-66332]"
    }, {
      "left" : "public static void drawHDottedLine(Graphics2D g, int startX, int endX, int lineY, @Nullable final Color bgColor, final Color fgColor)",
      "right" : "public static void drawHDottedLine(Graphics2D g, int startX, int endX, int lineY, @Nullable final Color bgColor, final Color fgColor)",
      "info" : "MethodDeclaration[66336-66704]:MethodDeclaration[66336-66704]"
    }, {
      "left" : "public static void drawDottedLine(Graphics2D g, int x1, int y1, int x2, int y2, @Nullable final Color bgColor, final Color fgColor)",
      "right" : "public static void drawDottedLine(Graphics2D g, int x1, int y1, int x2, int y2, @Nullable final Color bgColor, final Color fgColor)",
      "info" : "MethodDeclaration[66708-67124]:MethodDeclaration[66708-67124]"
    }, {
      "left" : "public static void drawStringWithHighlighting(Graphics g, String s, int x, int y, Color foreground, Color highlighting)",
      "right" : "public static void drawStringWithHighlighting(Graphics g, String s, int x, int y, Color foreground, Color highlighting)",
      "info" : "MethodDeclaration[67128-67471]:MethodDeclaration[67128-67471]"
    }, {
      "left" : "public static boolean isFocusAncestor(@NotNull final JComponent component)",
      "right" : "public static boolean isFocusAncestor(@NotNull final JComponent component)",
      "info" : "MethodDeclaration[67475-67794]:MethodDeclaration[67475-67794]"
    }, {
      "left" : "public static boolean isCloseClick(MouseEvent e)",
      "right" : "public static boolean isCloseClick(MouseEvent e)",
      "info" : "MethodDeclaration[67799-67907]:MethodDeclaration[67799-67907]"
    }, {
      "left" : "public static boolean isCloseClick(MouseEvent e, int effectiveType)",
      "right" : "public static boolean isCloseClick(MouseEvent e, int effectiveType)",
      "info" : "MethodDeclaration[67911-68162]:MethodDeclaration[67911-68162]"
    }, {
      "left" : "public static boolean isActionClick(MouseEvent e)",
      "right" : "public static boolean isActionClick(MouseEvent e)",
      "info" : "MethodDeclaration[68166-68276]:MethodDeclaration[68166-68276]"
    }, {
      "left" : "public static boolean isActionClick(MouseEvent e, int effectiveType)",
      "right" : "public static boolean isActionClick(MouseEvent e, int effectiveType)",
      "info" : "MethodDeclaration[68280-68405]:MethodDeclaration[68280-68405]"
    }, {
      "left" : "public static boolean isActionClick(MouseEvent e, int effectiveType, boolean allowShift)",
      "right" : "public static boolean isActionClick(MouseEvent e, int effectiveType, boolean allowShift)",
      "info" : "MethodDeclaration[68409-68657]:MethodDeclaration[68409-68657]"
    }, {
      "left" : "public static Color getBgFillColor(@NotNull Component c)",
      "right" : "public static Color getBgFillColor(@NotNull Component c)",
      "info" : "MethodDeclaration[68661-68857]:MethodDeclaration[68661-68857]"
    }, {
      "left" : "public static Component findNearestOpaque(Component c)",
      "right" : "public static Component findNearestOpaque(Component c)",
      "info" : "MethodDeclaration[68861-69117]:MethodDeclaration[68861-69117]"
    }, {
      "left" : "public boolean value(Component component)",
      "right" : "public boolean value(Component component)",
      "info" : "MethodDeclaration[69001-69105]:MethodDeclaration[69001-69105]"
    }, {
      "left" : "public static Component findParentByCondition(@NotNull Component c, Condition<Component> condition)",
      "right" : "public static Component findParentByCondition(@NotNull Component c, Condition<Component> condition)",
      "info" : "MethodDeclaration[69121-69425]:MethodDeclaration[69121-69425]"
    }, {
      "left" : "public static String getCssFontDeclaration(final Font font)",
      "right" : "public static String getCssFontDeclaration(final Font font)",
      "info" : "MethodDeclaration[69429-69562]:MethodDeclaration[69429-69562]"
    }, {
      "left" : "public static String getCssFontDeclaration(final Font font, @Nullable Color fgColor, @Nullable Color linkColor, @Nullable String liImg)",
      "right" : "public static String getCssFontDeclaration(final Font font, @Nullable Color fgColor, @Nullable Color linkColor, @Nullable String liImg)",
      "info" : "MethodDeclaration[69566-70435]:MethodDeclaration[69566-70435]"
    }, {
      "left" : "public static boolean isWinLafOnVista()",
      "right" : "public static boolean isWinLafOnVista()",
      "info" : "MethodDeclaration[70439-70583]:MethodDeclaration[70439-70583]"
    }, {
      "left" : "public static boolean isStandardMenuLAF()",
      "right" : "public static boolean isStandardMenuLAF()",
      "info" : "MethodDeclaration[70587-70743]:MethodDeclaration[70587-70743]"
    }, {
      "left" : "public static Color getFocusedFillColor()",
      "right" : "public static Color getFocusedFillColor()",
      "info" : "MethodDeclaration[70747-70849]:MethodDeclaration[70747-70849]"
    }, {
      "left" : "public static Color getFocusedBoundsColor()",
      "right" : "public static Color getFocusedBoundsColor()",
      "info" : "MethodDeclaration[70853-70931]:MethodDeclaration[70853-70931]"
    }, {
      "left" : "public static Color getBoundsColor()",
      "right" : "public static Color getBoundsColor()",
      "info" : "MethodDeclaration[70935-71006]:MethodDeclaration[70935-71006]"
    }, {
      "left" : "public static Color getBoundsColor(boolean focused)",
      "right" : "public static Color getBoundsColor(boolean focused)",
      "info" : "MethodDeclaration[71010-71132]:MethodDeclaration[71010-71132]"
    }, {
      "left" : "public static Color toAlpha(final Color color, final int alpha)",
      "right" : "public static Color toAlpha(final Color color, final int alpha)",
      "info" : "MethodDeclaration[71136-71344]:MethodDeclaration[71136-71344]"
    }, {
      "left" : "public static boolean isFocusable(JComponent component)",
      "right" : "public static boolean isFocusable(JComponent component)",
      "info" : "MethodDeclaration[71348-71763]:MethodDeclaration[71348-71763]"
    }, {
      "left" : "public static void requestFocus(@NotNull final JComponent c)",
      "right" : "public static void requestFocus(@NotNull final JComponent c)",
      "info" : "MethodDeclaration[71767-72049]:MethodDeclaration[71767-72049]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[71954-72029]:MethodDeclaration[71954-72029]"
    }, {
      "left" : "public static void dispose(final Component c)",
      "right" : "public static void dispose(final Component c)",
      "info" : "MethodDeclaration[72139-72741]:MethodDeclaration[72139-72741]"
    }, {
      "left" : "public static void disposeProgress(final JProgressBar progress)",
      "right" : "public static void disposeProgress(final JProgressBar progress)",
      "info" : "MethodDeclaration[72745-73132]:MethodDeclaration[72745-73132]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[72914-73120]:MethodDeclaration[72914-73120]"
    }, {
      "left" : "private static boolean isToDispose(final JProgressBar progress)",
      "right" : "private static boolean isToDispose(final JProgressBar progress)",
      "info" : "MethodDeclaration[73136-73719]:MethodDeclaration[73136-73719]"
    }, {
      "left" : "public static Component findUltimateParent(Component c)",
      "right" : "public static Component findUltimateParent(Component c)",
      "info" : "MethodDeclaration[73723-73988]:MethodDeclaration[73723-73988]"
    }, {
      "left" : "public static Color getHeaderActiveColor()",
      "right" : "public static Color getHeaderActiveColor()",
      "info" : "MethodDeclaration[73992-74072]:MethodDeclaration[73992-74072]"
    }, {
      "left" : "public static Color getHeaderInactiveColor()",
      "right" : "public static Color getHeaderInactiveColor()",
      "info" : "MethodDeclaration[74076-74160]:MethodDeclaration[74076-74160]"
    }, {
      "left" : "public static Color getBorderColor()",
      "right" : "public static Color getBorderColor()",
      "info" : "MethodDeclaration[74164-74317]:MethodDeclaration[74164-74317]"
    }, {
      "left" : "public static Font getTitledBorderFont()",
      "right" : "public static Font getTitledBorderFont()",
      "info" : "MethodDeclaration[74321-74457]:MethodDeclaration[74321-74457]"
    }, {
      "left" : "public static Color getBorderInactiveColor()",
      "right" : "public static Color getBorderInactiveColor()",
      "info" : "MethodDeclaration[74461-74596]:MethodDeclaration[74461-74596]"
    }, {
      "left" : "public static Color getBorderActiveColor()",
      "right" : "public static Color getBorderActiveColor()",
      "info" : "MethodDeclaration[74600-74733]:MethodDeclaration[74600-74733]"
    }, {
      "left" : "public static Color getBorderSeparatorColor()",
      "right" : "public static Color getBorderSeparatorColor()",
      "info" : "MethodDeclaration[74737-74873]:MethodDeclaration[74737-74873]"
    }, {
      "left" : "public static StyleSheet loadStyleSheet(@Nullable URL url)",
      "right" : "public static StyleSheet loadStyleSheet(@Nullable URL url)",
      "info" : "MethodDeclaration[74877-75268]:MethodDeclaration[74877-75268]"
    }, {
      "left" : "public static void removeScrollBorder(final Component c)",
      "right" : "public static void removeScrollBorder(final Component c)",
      "info" : "MethodDeclaration[75989-77032]:MethodDeclaration[76171-77214]"
    }, {
      "left" : "public boolean visit(final Component component)",
      "right" : "public boolean visit(final Component component)",
      "info" : "MethodDeclaration[76078-77021]:MethodDeclaration[76260-77203]"
    }, {
      "left" : "public static boolean hasNonPrimitiveParents(Component stopParent, Component c)",
      "right" : "public static boolean hasNonPrimitiveParents(Component stopParent, Component c)",
      "info" : "MethodDeclaration[77036-77352]:MethodDeclaration[77218-77534]"
    }, {
      "left" : "public static boolean isPrimitive(Component c)",
      "right" : "public static boolean isPrimitive(Component c)",
      "info" : "MethodDeclaration[77356-77469]:MethodDeclaration[77538-77651]"
    }, {
      "left" : "public static Point getCenterPoint(Dimension container, Dimension child)",
      "right" : "public static Point getCenterPoint(Dimension container, Dimension child)",
      "info" : "MethodDeclaration[77473-77611]:MethodDeclaration[77655-77793]"
    }, {
      "left" : "public static Point getCenterPoint(Rectangle container, Dimension child)",
      "right" : "public static Point getCenterPoint(Rectangle container, Dimension child)",
      "info" : "MethodDeclaration[77615-77837]:MethodDeclaration[77797-78019]"
    }, {
      "left" : "public static String toHtml(String html)",
      "right" : "public static String toHtml(String html)",
      "info" : "MethodDeclaration[77841-77915]:MethodDeclaration[78023-78097]"
    }, {
      "left" : "public static String toHtml(String html, final int hPadding)",
      "right" : "public static String toHtml(String html, final int hPadding)",
      "info" : "MethodDeclaration[77919-78423]:MethodDeclaration[78101-78605]"
    }, {
      "left" : "public static String addPadding(final String html, int hPadding)",
      "right" : "public static String addPadding(final String html, int hPadding)",
      "info" : "MethodDeclaration[78427-78595]:MethodDeclaration[78609-78777]"
    }, {
      "left" : "public static String convertSpace2Nbsp(String html)",
      "right" : "public static String convertSpace2Nbsp(String html)",
      "info" : "MethodDeclaration[78599-79172]:MethodDeclaration[78781-79354]"
    }, {
      "left" : "public static void invokeLaterIfNeeded(@NotNull Runnable runnable)",
      "right" : "public static void invokeLaterIfNeeded(@NotNull Runnable runnable)",
      "info" : "MethodDeclaration[79176-79427]:MethodDeclaration[79358-79609]"
    }, {
      "left" : "public static void invokeAndWaitIfNeeded(@NotNull Runnable runnable)",
      "right" : "public static void invokeAndWaitIfNeeded(@NotNull Runnable runnable)",
      "info" : "MethodDeclaration[79431-80062]:MethodDeclaration[79613-80244]"
    }, {
      "left" : "public static <T> T invokeAndWaitIfNeeded(@NotNull final Computable<T> computable)",
      "right" : "public static <T> T invokeAndWaitIfNeeded(@NotNull final Computable<T> computable)",
      "info" : "MethodDeclaration[80066-80660]:MethodDeclaration[80248-80842]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[80538-80623]:MethodDeclaration[80720-80805]"
    }, {
      "left" : "public static void invokeAndWaitIfNeeded(@NotNull final ThrowableRunnable runnable) throws Throwable",
      "right" : "public static void invokeAndWaitIfNeeded(@NotNull final ThrowableRunnable runnable) throws Throwable",
      "info" : "MethodDeclaration[80664-81548]:MethodDeclaration[80846-81730]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[81299-81486]:MethodDeclaration[81481-81668]"
    }, {
      "left" : "public static boolean isFocusProxy(@Nullable Component c)",
      "right" : "public static boolean isFocusProxy(@Nullable Component c)",
      "info" : "MethodDeclaration[81552-81726]:MethodDeclaration[81734-81908]"
    }, {
      "left" : "public static void setFocusProxy(JComponent c, boolean isProxy)",
      "right" : "public static void setFocusProxy(JComponent c, boolean isProxy)",
      "info" : "MethodDeclaration[81730-81872]:MethodDeclaration[81912-82054]"
    }, {
      "left" : "public static void maybeInstall(InputMap map, String action, KeyStroke stroke)",
      "right" : "public static void maybeInstall(InputMap map, String action, KeyStroke stroke)",
      "info" : "MethodDeclaration[81876-82032]:MethodDeclaration[82058-82214]"
    }, {
      "left" : "public static void changeBackGround(final Component component, final Color background)",
      "right" : "public static void changeBackGround(final Component component, final Color background)",
      "info" : "MethodDeclaration[82036-82440]:MethodDeclaration[82218-82622]"
    }, {
      "left" : "public static void initDefaultLAF()",
      "right" : "public static void initDefaultLAF()",
      "info" : "MethodDeclaration[82444-83010]:MethodDeclaration[82626-83192]"
    }, {
      "left" : "public static Pair<String, Integer> getSystemFontData()",
      "right" : "public static Pair<String, Integer> getSystemFontData()",
      "info" : "MethodDeclaration[83014-83117]:MethodDeclaration[83196-83299]"
    }, {
      "left" : "public static void addKeyboardShortcut(final JComponent target, final AbstractButton button, final KeyStroke keyStroke)",
      "right" : "public static void addKeyboardShortcut(final JComponent target, final AbstractButton button, final KeyStroke keyStroke)",
      "info" : "MethodDeclaration[83121-83532]:MethodDeclaration[83303-83714]"
    }, {
      "left" : "public void actionPerformed(ActionEvent e)",
      "right" : "public void actionPerformed(ActionEvent e)",
      "info" : "MethodDeclaration[83315-83465]:MethodDeclaration[83497-83647]"
    }, {
      "left" : "public static void installComboBoxCopyAction(JComboBox comboBox)",
      "right" : "public static void installComboBoxCopyAction(JComboBox comboBox)",
      "info" : "MethodDeclaration[83536-85308]:MethodDeclaration[83718-85490]"
    }, {
      "left" : "public void actionPerformed(final ActionEvent e)",
      "right" : "public void actionPerformed(final ActionEvent e)",
      "info" : "MethodDeclaration[84131-85296]:MethodDeclaration[84313-85478]"
    }, {
      "left" : "public static ComboPopup getComboBoxPopup(@NotNull JComboBox comboBox)",
      "right" : "public static ComboPopup getComboBoxPopup(@NotNull JComboBox comboBox)",
      "info" : "MethodDeclaration[85312-85601]:MethodDeclaration[85494-85783]"
    }, {
      "left" : "public static void fixFormattedField(JFormattedTextField field)",
      "right" : "public static void fixFormattedField(JFormattedTextField field)",
      "info" : "MethodDeclaration[85605-86384]:MethodDeclaration[85787-86566]"
    }, {
      "left" : "public static boolean isPrinting(Graphics g)",
      "right" : "public static boolean isPrinting(Graphics g)",
      "info" : "MethodDeclaration[86388-86477]:MethodDeclaration[86570-86659]"
    }, {
      "left" : "public static int getSelectedButton(ButtonGroup group)",
      "right" : "public static int getSelectedButton(ButtonGroup group)",
      "info" : "MethodDeclaration[86481-86831]:MethodDeclaration[86663-87013]"
    }, {
      "left" : "public static void setSelectedButton(ButtonGroup group, int index)",
      "right" : "public static void setSelectedButton(ButtonGroup group, int index)",
      "info" : "MethodDeclaration[86835-87163]:MethodDeclaration[87017-87345]"
    }, {
      "left" : "public static boolean isSelectionButtonDown(MouseEvent e)",
      "right" : "public static boolean isSelectionButtonDown(MouseEvent e)",
      "info" : "MethodDeclaration[87167-87297]:MethodDeclaration[87349-87479]"
    }, {
      "left" : "public static void setComboBoxEditorBounds(int x, int y, int width, int height, JComponent editor)",
      "right" : "public static void setComboBoxEditorBounds(int x, int y, int width, int height, JComponent editor)",
      "info" : "MethodDeclaration[87301-87742]:MethodDeclaration[87483-87924]"
    }, {
      "left" : "public static int fixComboBoxHeight(final int height)",
      "right" : "public static int fixComboBoxHeight(final int height)",
      "info" : "MethodDeclaration[87746-87876]:MethodDeclaration[87928-88058]"
    }, {
      "left" : "public static final int LIST_FIXED_CELL_HEIGHT = 20;",
      "right" : "public static final int LIST_FIXED_CELL_HEIGHT = 20;",
      "info" : "FieldDeclaration[87880-87932]:FieldDeclaration[88062-88114]"
    }, {
      "left" : "public static boolean isDescendingFrom(@Nullable Component child, @NotNull Component parent)",
      "right" : "public static boolean isDescendingFrom(@Nullable Component child, @NotNull Component parent)",
      "info" : "MethodDeclaration[87936-88697]:MethodDeclaration[88118-88879]"
    }, {
      "left" : "public static <T> T getParentOfType(Class<? extends T> cls, Component c)",
      "right" : "public static <T> T getParentOfType(Class<? extends T> cls, Component c)",
      "info" : "MethodDeclaration[88701-89073]:MethodDeclaration[88883-89255]"
    }, {
      "left" : "public static void scrollListToVisibleIfNeeded(@NotNull final JList list)",
      "right" : "public static void scrollListToVisibleIfNeeded(@NotNull final JList list)",
      "info" : "MethodDeclaration[89077-89630]:MethodDeclaration[89259-89812]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[89207-89618]:MethodDeclaration[89389-89800]"
    }, {
      "left" : "public static <T extends JComponent> T findComponentOfType(JComponent parent, Class<T> cls)",
      "right" : "public static <T extends JComponent> T findComponentOfType(JComponent parent, Class<T> cls)",
      "info" : "MethodDeclaration[89634-90134]:MethodDeclaration[89816-90316]"
    }, {
      "left" : "public static <T extends JComponent> List<T> findComponentsOfType(JComponent parent, Class<T> cls)",
      "right" : "public static <T extends JComponent> List<T> findComponentsOfType(JComponent parent, Class<T> cls)",
      "info" : "MethodDeclaration[90138-90360]:MethodDeclaration[90320-90542]"
    }, {
      "left" : "private static <T extends JComponent> void findComponentsOfType(JComponent parent, Class<T> cls, ArrayList<T> result)",
      "right" : "private static <T extends JComponent> void findComponentsOfType(JComponent parent, Class<T> cls, ArrayList<T> result)",
      "info" : "MethodDeclaration[90364-90817]:MethodDeclaration[90546-90999]"
    }, {
      "left" : "TextPainter",
      "right" : "TextPainter",
      "info" : "TypeDeclaration[90821-97472]:TypeDeclaration[91003-97654]"
    }, {
      "left" : "private final List<Pair<String, LineInfo>> myLines = new ArrayList<Pair<String, LineInfo>>();",
      "right" : "private final List<Pair<String, LineInfo>> myLines = new ArrayList<Pair<String, LineInfo>>();",
      "info" : "FieldDeclaration[90859-90952]:FieldDeclaration[91041-91134]"
    }, {
      "left" : "private boolean myDrawShadow;",
      "right" : "private boolean myDrawShadow;",
      "info" : "FieldDeclaration[90957-90986]:FieldDeclaration[91139-91168]"
    }, {
      "left" : "private Color myShadowColor;",
      "right" : "private Color myShadowColor;",
      "info" : "FieldDeclaration[90991-91019]:FieldDeclaration[91173-91201]"
    }, {
      "left" : "private float myLineSpacing;",
      "right" : "private float myLineSpacing;",
      "info" : "FieldDeclaration[91024-91052]:FieldDeclaration[91206-91234]"
    }, {
      "left" : "public TextPainter()",
      "right" : "public TextPainter()",
      "info" : "MethodDeclaration[91058-91262]:MethodDeclaration[91240-91444]"
    }, {
      "left" : "public TextPainter withShadow(final boolean drawShadow)",
      "right" : "public TextPainter withShadow(final boolean drawShadow)",
      "info" : "MethodDeclaration[91268-91383]:MethodDeclaration[91450-91565]"
    }, {
      "left" : "public TextPainter withShadow(final boolean drawShadow, final Color shadowColor)",
      "right" : "public TextPainter withShadow(final boolean drawShadow, final Color shadowColor)",
      "info" : "MethodDeclaration[91389-91564]:MethodDeclaration[91571-91746]"
    }, {
      "left" : "public TextPainter withLineSpacing(final float lineSpacing)",
      "right" : "public TextPainter withLineSpacing(final float lineSpacing)",
      "info" : "MethodDeclaration[91570-91691]:MethodDeclaration[91752-91873]"
    }, {
      "left" : "public TextPainter appendLine(final String text)",
      "right" : "public TextPainter appendLine(final String text)",
      "info" : "MethodDeclaration[91697-91881]:MethodDeclaration[91879-92063]"
    }, {
      "left" : "public TextPainter underlined(@Nullable final Color color)",
      "right" : "public TextPainter underlined(@Nullable final Color color)",
      "info" : "MethodDeclaration[91887-92157]:MethodDeclaration[92069-92339]"
    }, {
      "left" : "public TextPainter withBullet(final char c)",
      "right" : "public TextPainter withBullet(final char c)",
      "info" : "MethodDeclaration[92163-92410]:MethodDeclaration[92345-92592]"
    }, {
      "left" : "public TextPainter withBullet()",
      "right" : "public TextPainter withBullet()",
      "info" : "MethodDeclaration[92416-92490]:MethodDeclaration[92598-92672]"
    }, {
      "left" : "public TextPainter underlined()",
      "right" : "public TextPainter underlined()",
      "info" : "MethodDeclaration[92496-92566]:MethodDeclaration[92678-92748]"
    }, {
      "left" : "public TextPainter smaller()",
      "right" : "public TextPainter smaller()",
      "info" : "MethodDeclaration[92572-92736]:MethodDeclaration[92754-92918]"
    }, {
      "left" : "public TextPainter center()",
      "right" : "public TextPainter center()",
      "info" : "MethodDeclaration[92742-92904]:MethodDeclaration[92924-93086]"
    }, {
      "left" : "public void draw(@NotNull final Graphics g, final PairFunction<Integer, Integer, Couple<Integer>> _position)",
      "right" : "public void draw(@NotNull final Graphics g, final PairFunction<Integer, Integer, Couple<Integer>> _position)",
      "info" : "MethodDeclaration[92910-97229]:MethodDeclaration[93092-97411]"
    }, {
      "left" : "public boolean process(final Pair<String, LineInfo> pair)",
      "right" : "public boolean process(final Pair<String, LineInfo> pair)",
      "info" : "MethodDeclaration[93297-94135]:MethodDeclaration[93479-94317]"
    }, {
      "left" : "public boolean process(final Pair<String, LineInfo> pair)",
      "right" : "public boolean process(final Pair<String, LineInfo> pair)",
      "info" : "MethodDeclaration[94401-97213]:MethodDeclaration[94583-97395]"
    }, {
      "left" : "LineInfo",
      "right" : "LineInfo",
      "info" : "TypeDeclaration[97235-97468]:TypeDeclaration[97417-97650]"
    }, {
      "left" : "private boolean underlined;",
      "right" : "private boolean underlined;",
      "info" : "FieldDeclaration[97273-97300]:FieldDeclaration[97455-97482]"
    }, {
      "left" : "private boolean withBullet;",
      "right" : "private boolean withBullet;",
      "info" : "FieldDeclaration[97307-97334]:FieldDeclaration[97489-97516]"
    }, {
      "left" : "private char bulletChar;",
      "right" : "private char bulletChar;",
      "info" : "FieldDeclaration[97341-97365]:FieldDeclaration[97523-97547]"
    }, {
      "left" : "private Color underlineColor;",
      "right" : "private Color underlineColor;",
      "info" : "FieldDeclaration[97372-97401]:FieldDeclaration[97554-97583]"
    }, {
      "left" : "private boolean smaller;",
      "right" : "private boolean smaller;",
      "info" : "FieldDeclaration[97408-97432]:FieldDeclaration[97590-97614]"
    }, {
      "left" : "private boolean center;",
      "right" : "private boolean center;",
      "info" : "FieldDeclaration[97439-97462]:FieldDeclaration[97621-97644]"
    }, {
      "left" : "public static JRootPane getRootPane(Component c)",
      "right" : "public static JRootPane getRootPane(Component c)",
      "info" : "MethodDeclaration[97476-98028]:MethodDeclaration[97658-98210]"
    }, {
      "left" : "public static void setFutureRootPane(JComponent c, JRootPane pane)",
      "right" : "public static void setFutureRootPane(JComponent c, JRootPane pane)",
      "info" : "MethodDeclaration[98032-98176]:MethodDeclaration[98214-98358]"
    }, {
      "left" : "public static boolean isMeaninglessFocusOwner(@Nullable Component c)",
      "right" : "public static boolean isMeaninglessFocusOwner(@Nullable Component c)",
      "info" : "MethodDeclaration[98180-98430]:MethodDeclaration[98362-98612]"
    }, {
      "left" : "public static Timer createNamedTimer(@NonNls @NotNull final String name, int delay, @NotNull ActionListener listener)",
      "right" : "public static Timer createNamedTimer(@NonNls @NotNull final String name, int delay, @NotNull ActionListener listener)",
      "info" : "MethodDeclaration[98434-98682]:MethodDeclaration[98616-98864]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[98600-98671]:MethodDeclaration[98782-98853]"
    }, {
      "left" : "public static boolean isDialogRootPane(JRootPane rootPane)",
      "right" : "public static boolean isDialogRootPane(JRootPane rootPane)",
      "info" : "MethodDeclaration[98686-98960]:MethodDeclaration[98868-99142]"
    }, {
      "left" : "public static JComponent mergeComponentsWithAnchor(PanelWithAnchor... panels)",
      "right" : "public static JComponent mergeComponentsWithAnchor(PanelWithAnchor... panels)",
      "info" : "MethodDeclaration[98964-99120]:MethodDeclaration[99146-99302]"
    }, {
      "left" : "public static JComponent mergeComponentsWithAnchor(Collection<? extends PanelWithAnchor> panels)",
      "right" : "public static JComponent mergeComponentsWithAnchor(Collection<? extends PanelWithAnchor> panels)",
      "info" : "MethodDeclaration[99124-99779]:MethodDeclaration[99306-99961]"
    }, {
      "left" : "public static void setNotOpaqueRecursively(@NotNull Component component)",
      "right" : "public static void setNotOpaqueRecursively(@NotNull Component component)",
      "info" : "MethodDeclaration[99783-100383]:MethodDeclaration[99965-100565]"
    }, {
      "left" : "public static void setBackgroundRecursively(@NotNull Component component, @NotNull Color bg)",
      "right" : "public static void setBackgroundRecursively(@NotNull Component component, @NotNull Color bg)",
      "info" : "MethodDeclaration[100387-100682]:MethodDeclaration[100569-100864]"
    }, {
      "left" : "public static void addInsets(@NotNull JComponent component, int top, int left, int bottom, int right)",
      "right" : "public static void addInsets(@NotNull JComponent component, int top, int left, int bottom, int right)",
      "info" : "MethodDeclaration[100686-101284]:MethodDeclaration[100868-101466]"
    }, {
      "left" : "public static void addInsets(@NotNull JComponent component, @NotNull Insets insets)",
      "right" : "public static void addInsets(@NotNull JComponent component, @NotNull Insets insets)",
      "info" : "MethodDeclaration[101288-101739]:MethodDeclaration[101470-101921]"
    }, {
      "left" : "public static void adjustWindowToMinimumSize(final Window window)",
      "right" : "public static void adjustWindowToMinimumSize(final Window window)",
      "info" : "MethodDeclaration[101743-102347]:MethodDeclaration[101925-102529]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[102195-102327]:MethodDeclaration[102377-102509]"
    }, {
      "left" : "public static Color getColorAt(final Icon icon, final int x, final int y)",
      "right" : "public static Color getColorAt(final Icon icon, final int x, final int y)",
      "info" : "MethodDeclaration[102351-102998]:MethodDeclaration[102533-103180]"
    }, {
      "left" : "public static void addBorder(JComponent component, Border border)",
      "right" : "public static void addBorder(JComponent component, Border border)",
      "info" : "MethodDeclaration[103002-103620]:MethodDeclaration[103184-103802]"
    }, {
      "left" : "private static final Color DECORATED_ROW_BG_COLOR = new JBColor(new Color(242, 245, 249), new Color(65, 69, 71));",
      "right" : "private static final Color DECORATED_ROW_BG_COLOR = new JBColor(new Color(242, 245, 249), new Color(65, 69, 71));",
      "info" : "FieldDeclaration[103624-103737]:FieldDeclaration[103806-103919]"
    }, {
      "left" : "public static Color getDecoratedRowColor()",
      "right" : "public static Color getDecoratedRowColor()",
      "info" : "MethodDeclaration[103741-103824]:MethodDeclaration[103923-104006]"
    }, {
      "left" : "public static Paint getGradientPaint(float x1, float y1, @NotNull Color c1, float x2, float y2, @NotNull Color c2)",
      "right" : "public static Paint getGradientPaint(float x1, float y1, @NotNull Color c1, float x2, float y2, @NotNull Color c2)",
      "info" : "MethodDeclaration[103828-104085]:MethodDeclaration[104010-104267]"
    }, {
      "left" : "public static Point getLocationOnScreen(@NotNull JComponent component)",
      "right" : "public static Point getLocationOnScreen(@NotNull JComponent component)",
      "info" : "MethodDeclaration[104089-104583]:MethodDeclaration[104271-104765]"
    }, {
      "left" : "public static Window getActiveWindow()",
      "right" : "public static Window getActiveWindow()",
      "info" : "MethodDeclaration[104587-104825]:MethodDeclaration[104769-105007]"
    }, {
      "left" : "public static void suppressFocusStealing (Window window)",
      "right" : "public static void suppressFocusStealing (Window window)",
      "info" : "MethodDeclaration[104829-105069]:MethodDeclaration[105011-105251]"
    }, {
      "left" : "public static void setAutoRequestFocus (final Window onWindow, final boolean set",
      "right" : "public static void setAutoRequestFocus (final Window onWindow, final boolean set",
      "info" : "MethodDeclaration[105073-105612]:MethodDeclaration[105255-105794]"
    }, {
      "left" : "public static String getDebugText(Component c)",
      "right" : "public static String getDebugText(Component c)",
      "info" : "MethodDeclaration[105706-105883]:MethodDeclaration[105888-106065]"
    }, {
      "left" : "private static void getAllTextsRecursivelyImpl(Component component, StringBuilder builder)",
      "right" : "private static void getAllTextsRecursivelyImpl(Component component, StringBuilder builder)",
      "info" : "MethodDeclaration[105887-106723]:MethodDeclaration[106069-106905]"
    }, {
      "left" : "public static boolean isAncestor(@NotNull Component ancestor, @Nullable Component descendant)",
      "right" : "public static boolean isAncestor(@NotNull Component ancestor, @Nullable Component descendant)",
      "info" : "MethodDeclaration[106727-106991]:MethodDeclaration[106909-107173]"
    }, {
      "left" : "public static void resetUndoRedoActions(@NotNull JTextComponent textComponent)",
      "right" : "public static void resetUndoRedoActions(@NotNull JTextComponent textComponent)",
      "info" : "MethodDeclaration[106995-107231]:MethodDeclaration[107177-107413]"
    }, {
      "left" : "public static void addUndoRedoActions(@NotNull final JTextComponent textComponent)",
      "right" : "public static void addUndoRedoActions(@NotNull final JTextComponent textComponent)",
      "info" : "MethodDeclaration[107235-107980]:MethodDeclaration[107417-108162]"
    }, {
      "left" : "public static void playSoundFromResource(final String resourceName)",
      "right" : "public static void playSoundFromResource(final String resourceName)",
      "info" : "MethodDeclaration[107984-108345]:MethodDeclaration[108166-108527]"
    }, {
      "left" : "public InputStream create()",
      "right" : "public InputStream create()",
      "info" : "MethodDeclaration[108218-108333]:MethodDeclaration[108400-108515]"
    }, {
      "left" : "public static void playSoundFromStream(final Factory<InputStream> streamProducer)",
      "right" : "public static void playSoundFromStream(final Factory<InputStream> streamProducer)",
      "info" : "MethodDeclaration[108349-109066]:MethodDeclaration[108531-109248]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[108578-109033]:MethodDeclaration[108760-109215]"
    }, {
      "left" : "public static String getCurrentKeyboardLayout()",
      "right" : "public static String getCurrentKeyboardLayout()",
      "info" : "MethodDeclaration[109127-109832]:MethodDeclaration[109309-110014]"
    }, {
      "left" : "private static Map<String, String> ourRealFontFamilies = null;",
      "right" : "private static Map<String, String> ourRealFontFamilies = null;",
      "info" : "FieldDeclaration[109836-109898]:FieldDeclaration[110018-110080]"
    }, {
      "left" : "public static String getRealFontFamily(String genericFontFamily)",
      "right" : "public static String getRealFontFamily(String genericFontFamily)",
      "info" : "MethodDeclaration[109961-111217]:MethodDeclaration[110143-111399]"
    }, {
      "left" : "public static String rightArrow()",
      "right" : "public static String rightArrow()",
      "info" : "MethodDeclaration[111221-111319]:MethodDeclaration[111403-111501]"
    }, {
      "left" : "public static String upArrow(@NotNull String defaultValue)",
      "right" : "public static String upArrow(@NotNull String defaultValue)",
      "info" : "MethodDeclaration[111323-111457]:MethodDeclaration[111505-111639]"
    }, {
      "left" : "public static EmptyBorder getTextAlignBorder(@NotNull JToggleButton alignSource)",
      "right" : "public static EmptyBorder getTextAlignBorder(@NotNull JToggleButton alignSource)",
      "info" : "MethodDeclaration[111461-112454]:MethodDeclaration[111643-112636]"
    }, {
      "left" : "public static void configureNumericFormattedTextField(@NotNull JFormattedTextField textField)",
      "right" : "public static void configureNumericFormattedTextField(@NotNull JFormattedTextField textField)",
      "info" : "MethodDeclaration[112458-113072]:MethodDeclaration[112640-113254]"
    }, {
      "left" : "public static Window getWindow(Component component)",
      "right" : "public static Window getWindow(Component component)",
      "info" : "MethodDeclaration[113076-113614]:MethodDeclaration[113258-113796]"
    }, {
      "left" : "public static Image getDebugImage(Component component)",
      "right" : "public static Image getDebugImage(Component component)",
      "info" : "MethodDeclaration[113618-114006]:MethodDeclaration[113800-114188]"
    }, {
      "left" : "public static boolean hasScrollPane(@NotNull Component component)",
      "right" : "public static boolean hasScrollPane(@NotNull Component component)",
      "info" : "MethodDeclaration[114010-114252]:MethodDeclaration[114192-114434]"
    }, {
      "left" : "public static boolean hasComponentOfType(Component component, Class<?>... types)",
      "right" : "public static boolean hasComponentOfType(Component component, Class<?>... types)",
      "info" : "MethodDeclaration[114256-114921]:MethodDeclaration[114438-115103]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3610-3804]:Block[3610-3804]"
    }, {
      "left" : "Object property = Toolkit.getDefaultToolkit().getDesktopProperty(\"awt.multiClickInterval\");",
      "right" : "Object property = Toolkit.getDefaultToolkit().getDesktopProperty(\"awt.multiClickInterval\");",
      "info" : "VariableDeclarationStatement[3616-3707]:VariableDeclarationStatement[3616-3707]"
    }, {
      "left" : "if (property instanceof Integer)",
      "right" : "if (property instanceof Integer)",
      "info" : "IfStatement[3712-3784]:IfStatement[3712-3784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3745-3784]:Block[3745-3784]"
    }, {
      "left" : "return (Integer)property;",
      "right" : "return (Integer)property;",
      "info" : "ReturnStatement[3753-3778]:ReturnStatement[3753-3778]"
    }, {
      "left" : "return 500;",
      "right" : "return 500;",
      "info" : "ReturnStatement[3789-3800]:ReturnStatement[3789-3800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3978-4353]:Block[3978-4353]"
    }, {
      "left" : "if (!SystemInfo.isXWindow)",
      "right" : "if (!SystemInfo.isXWindow)",
      "info" : "IfStatement[3986-4044]:IfStatement[3986-4044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4013-4044]:Block[4013-4044]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4023-4036]:ReturnStatement[4023-4036]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[4051-4347]:TryStatement[4051-4347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4055-4289]:Block[4055-4289]"
    }, {
      "left" : "final Class<?> clazz = ClassLoader.getSystemClassLoader().loadClass(\"sun.awt.X11GraphicsEnvironment\");",
      "right" : "final Class<?> clazz = ClassLoader.getSystemClassLoader().loadClass(\"sun.awt.X11GraphicsEnvironment\");",
      "info" : "VariableDeclarationStatement[4065-4167]:VariableDeclarationStatement[4065-4167]"
    }, {
      "left" : "final Method method = clazz.getMethod(\"isXRenderAvailable\");",
      "right" : "final Method method = clazz.getMethod(\"isXRenderAvailable\");",
      "info" : "VariableDeclarationStatement[4176-4236]:VariableDeclarationStatement[4176-4236]"
    }, {
      "left" : "return (Boolean)method.invoke(null);",
      "right" : "return (Boolean)method.invoke(null);",
      "info" : "ReturnStatement[4245-4281]:ReturnStatement[4245-4281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4316-4347]:Block[4316-4347]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4326-4339]:ReturnStatement[4326-4339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4612-5265]:Block[4612-5265]"
    }, {
      "left" : "if (!(comp instanceof JComponent))",
      "right" : "if (!(comp instanceof JComponent))",
      "info" : "IfStatement[4618-4660]:IfStatement[4618-4660]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4653-4660]:ReturnStatement[4653-4660]"
    }, {
      "left" : "JComponent c = (JComponent)comp;",
      "right" : "JComponent c = (JComponent)comp;",
      "info" : "VariableDeclarationStatement[4666-4698]:VariableDeclarationStatement[4666-4698]"
    }, {
      "left" : "if (isUnderAquaBasedLookAndFeel())",
      "right" : "if (isUnderAquaBasedLookAndFeel())",
      "info" : "IfStatement[4704-5154]:IfStatement[4704-5154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4739-4939]:Block[4739-4939]"
    }, {
      "left" : "c.putClientProperty(\"JComponent.sizeVariant\",\n                          componentStyle == ComponentStyle.REGULAR ? \"regular\" : componentStyle == ComponentStyle.SMALL ? \"small\" : \"mini\");",
      "right" : "c.putClientProperty(\"JComponent.sizeVariant\",\n                          componentStyle == ComponentStyle.REGULAR ? \"regular\" : componentStyle == ComponentStyle.SMALL ? \"small\" : \"mini\");",
      "info" : "ExpressionStatement[4747-4933]:ExpressionStatement[4747-4933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4949-5154]:Block[4949-5154]"
    }, {
      "left" : "c.setFont(getFont(\n        componentStyle == ComponentStyle.REGULAR\n        ? FontSize.NORMAL\n        : componentStyle == ComponentStyle.SMALL ? FontSize.SMALL : FontSize.MINI, c.getFont()));",
      "right" : "c.setFont(getFont(\n        componentStyle == ComponentStyle.REGULAR\n        ? FontSize.NORMAL\n        : componentStyle == ComponentStyle.SMALL ? FontSize.SMALL : FontSize.MINI, c.getFont()));",
      "info" : "ExpressionStatement[4957-5148]:ExpressionStatement[4957-5148]"
    }, {
      "left" : "Container p = c.getParent();",
      "right" : "Container p = c.getParent();",
      "info" : "VariableDeclarationStatement[5159-5187]:VariableDeclarationStatement[5159-5187]"
    }, {
      "left" : "if (p != null)",
      "right" : "if (p != null)",
      "info" : "IfStatement[5192-5261]:IfStatement[5192-5261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5207-5261]:Block[5207-5261]"
    }, {
      "left" : "SwingUtilities.updateComponentTreeUI(p);",
      "right" : "SwingUtilities.updateComponentTreeUI(p);",
      "info" : "ExpressionStatement[5215-5255]:ExpressionStatement[5215-5255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5333-5500]:Block[5333-5500]"
    }, {
      "left" : "return SystemInfo.isMac && ColorUtil.isDark(backgroundColor) ?\n           MacUIUtil.getInvertedTextCursor() : Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR);",
      "right" : "return SystemInfo.isMac && ColorUtil.isDark(backgroundColor) ?\n           MacUIUtil.getInvertedTextCursor() : Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR);",
      "info" : "ReturnStatement[5339-5496]:ReturnStatement[5339-5496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6123-6246]:Block[6123-6246]"
    }, {
      "left" : "drawLine(g, startX, topY, endX, topY, null, color);",
      "right" : "drawLine(g, startX, topY, endX, topY, null, color);",
      "info" : "ExpressionStatement[6129-6180]:ExpressionStatement[6129-6180]"
    }, {
      "left" : "drawLine(g, startX, bottomY, endX, bottomY, null, color);",
      "right" : "drawLine(g, startX, bottomY, endX, bottomY, null, color);",
      "info" : "ExpressionStatement[6185-6242]:ExpressionStatement[6185-6242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6456-6534]:Block[6456-6534]"
    }, {
      "left" : "return isUnderDarcula() ? DARCULA_GRAY_FILTER : DEFAULT_GRAY_FILTER;",
      "right" : "return isUnderDarcula() ? DARCULA_GRAY_FILTER : DEFAULT_GRAY_FILTER;",
      "info" : "ReturnStatement[6462-6530]:ReturnStatement[6462-6530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6576-6629]:Block[6576-6629]"
    }, {
      "left" : "return isRetina() && SystemInfo.isAppleJvm;",
      "right" : "return isRetina() && SystemInfo.isAppleJvm;",
      "info" : "ReturnStatement[6582-6625]:ReturnStatement[6582-6625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7801-8046]:Block[7801-8046]"
    }, {
      "left" : "Object source = e.getSource();",
      "right" : "Object source = e.getSource();",
      "info" : "VariableDeclarationStatement[7809-7839]:VariableDeclarationStatement[7809-7839]"
    }, {
      "left" : "UndoManager manager = source instanceof JComponent ? getClientProperty((JComponent)source, UNDO_MANAGER) : null;",
      "right" : "UndoManager manager = source instanceof JComponent ? getClientProperty((JComponent)source, UNDO_MANAGER) : null;",
      "info" : "VariableDeclarationStatement[7846-7958]:VariableDeclarationStatement[7846-7958]"
    }, {
      "left" : "if (manager != null && manager.canRedo())",
      "right" : "if (manager != null && manager.canRedo())",
      "info" : "IfStatement[7965-8040]:IfStatement[7965-8040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8007-8040]:Block[8007-8040]"
    }, {
      "left" : "manager.redo();",
      "right" : "manager.redo();",
      "info" : "ExpressionStatement[8017-8032]:ExpressionStatement[8017-8032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8188-8433]:Block[8188-8433]"
    }, {
      "left" : "Object source = e.getSource();",
      "right" : "Object source = e.getSource();",
      "info" : "VariableDeclarationStatement[8196-8226]:VariableDeclarationStatement[8196-8226]"
    }, {
      "left" : "UndoManager manager = source instanceof JComponent ? getClientProperty((JComponent)source, UNDO_MANAGER) : null;",
      "right" : "UndoManager manager = source instanceof JComponent ? getClientProperty((JComponent)source, UNDO_MANAGER) : null;",
      "info" : "VariableDeclarationStatement[8233-8345]:VariableDeclarationStatement[8233-8345]"
    }, {
      "left" : "if (manager != null && manager.canUndo())",
      "right" : "if (manager != null && manager.canUndo())",
      "info" : "IfStatement[8352-8427]:IfStatement[8352-8427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8394-8427]:Block[8394-8427]"
    }, {
      "left" : "manager.undo();",
      "right" : "manager.undo();",
      "info" : "ExpressionStatement[8404-8419]:ExpressionStatement[8404-8419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9672-9716]:Block[9672-9716]"
    }, {
      "left" : "return new Insets(0, 0, 0, 0);",
      "right" : "return new Insets(0, 0, 0, 0);",
      "info" : "ReturnStatement[9680-9710]:ReturnStatement[9680-9710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9822-10031]:Block[9822-10031]"
    }, {
      "left" : "Graphics g2 = g.create();",
      "right" : "Graphics g2 = g.create();",
      "info" : "VariableDeclarationStatement[9830-9855]:VariableDeclarationStatement[9830-9855]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9862-10025]:TryStatement[9862-10025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9866-9979]:Block[9866-9979]"
    }, {
      "left" : "g2.setColor(JBColor.RED);",
      "right" : "g2.setColor(JBColor.RED);",
      "info" : "ExpressionStatement[9876-9901]:ExpressionStatement[9876-9901]"
    }, {
      "left" : "drawDottedRectangle(g2, x, y, x + width - 1, y + height - 1);",
      "right" : "drawDottedRectangle(g2, x, y, x + width - 1, y + height - 1);",
      "info" : "ExpressionStatement[9910-9971]:ExpressionStatement[9910-9971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9994-10025]:Block[9994-10025]"
    }, {
      "left" : "g2.dispose();",
      "right" : "g2.dispose();",
      "info" : "ExpressionStatement[10004-10017]:ExpressionStatement[10004-10017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10083-10109]:Block[10083-10109]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[10091-10103]:ReturnStatement[10091-10103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10515-10520]:Block[10515-10520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11197-12558]:Block[11197-12558]"
    }, {
      "left" : "if (SystemInfo.isAppleJvm)",
      "right" : "if (SystemInfo.isAppleJvm)",
      "info" : "IfStatement[11206-11246]:IfStatement[11206-11246]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11233-11246]:ReturnStatement[11233-11246]"
    }, {
      "left" : "Boolean isRetina  = devicesToRetinaSupportCacheMap.get(device);",
      "right" : "Boolean isRetina  = devicesToRetinaSupportCacheMap.get(device);",
      "info" : "VariableDeclarationStatement[11254-11317]:VariableDeclarationStatement[11254-11317]"
    }, {
      "left" : "if (isRetina != null)",
      "right" : "if (isRetina != null)",
      "info" : "IfStatement[11325-11380]:IfStatement[11325-11380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11346-11380]:Block[11346-11380]"
    }, {
      "left" : "return isRetina;",
      "right" : "return isRetina;",
      "info" : "ReturnStatement[11356-11372]:ReturnStatement[11356-11372]"
    }, {
      "left" : "Method getScaleFactorMethod = null;",
      "right" : "Method getScaleFactorMethod = null;",
      "info" : "VariableDeclarationStatement[11388-11423]:VariableDeclarationStatement[11388-11423]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11430-11890]:TryStatement[11430-11890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11434-11544]:Block[11434-11544]"
    }, {
      "left" : "getScaleFactorMethod = Class.forName(\"sun.awt.CGraphicsDevice\").getMethod(\"getScaleFactor\");",
      "right" : "getScaleFactorMethod = Class.forName(\"sun.awt.CGraphicsDevice\").getMethod(\"getScaleFactor\");",
      "info" : "ExpressionStatement[11444-11536]:ExpressionStatement[11444-11536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11578-11746]:Block[11578-11746]"
    }, {
      "left" : "LOG.debug(\"CGraphicsDevice.getScaleFactor(): not an Oracle Mac JDK or API has been changed\");",
      "right" : "LOG.debug(\"CGraphicsDevice.getScaleFactor(): not an Oracle Mac JDK or API has been changed\");",
      "info" : "ExpressionStatement[11645-11738]:ExpressionStatement[11645-11738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11779-11890]:Block[11779-11890]"
    }, {
      "left" : "LOG.debug(\"CGraphicsDevice.getScaleFactor(): not an Oracle Mac JDK or API has been changed\");",
      "right" : "LOG.debug(\"CGraphicsDevice.getScaleFactor(): not an Oracle Mac JDK or API has been changed\");",
      "info" : "ExpressionStatement[11789-11882]:ExpressionStatement[11789-11882]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11898-12467]:TryStatement[11898-12467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11902-12014]:Block[11902-12014]"
    }, {
      "left" : "isRetina =  getScaleFactorMethod == null || (Integer)getScaleFactorMethod.invoke(device) != 1;",
      "right" : "isRetina =  getScaleFactorMethod == null || (Integer)getScaleFactorMethod.invoke(device) != 1;",
      "info" : "ExpressionStatement[11912-12006]:ExpressionStatement[11912-12006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12048-12152]:Block[12048-12152]"
    }, {
      "left" : "LOG.debug(\"CGraphicsDevice.getScaleFactor(): Access issue\");",
      "right" : "LOG.debug(\"CGraphicsDevice.getScaleFactor(): Access issue\");",
      "info" : "ExpressionStatement[12058-12118]:ExpressionStatement[12058-12118]"
    }, {
      "left" : "isRetina = false;",
      "right" : "isRetina = false;",
      "info" : "ExpressionStatement[12127-12144]:ExpressionStatement[12127-12144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12189-12297]:Block[12189-12297]"
    }, {
      "left" : "LOG.debug(\"CGraphicsDevice.getScaleFactor(): Invocation issue\");",
      "right" : "LOG.debug(\"CGraphicsDevice.getScaleFactor(): Invocation issue\");",
      "info" : "ExpressionStatement[12199-12263]:ExpressionStatement[12199-12263]"
    }, {
      "left" : "isRetina = false;",
      "right" : "isRetina = false;",
      "info" : "ExpressionStatement[12272-12289]:ExpressionStatement[12272-12289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12333-12467]:Block[12333-12467]"
    }, {
      "left" : "LOG.debug(\"object is not an instance of declaring class: \" + device.getClass().getName());",
      "right" : "LOG.debug(\"object is not an instance of declaring class: \" + device.getClass().getName());",
      "info" : "ExpressionStatement[12343-12433]:ExpressionStatement[12343-12433]"
    }, {
      "left" : "isRetina = false;",
      "right" : "isRetina = false;",
      "info" : "ExpressionStatement[12442-12459]:ExpressionStatement[12442-12459]"
    }, {
      "left" : "devicesToRetinaSupportCacheMap.put(device, isRetina);",
      "right" : "devicesToRetinaSupportCacheMap.put(device, isRetina);",
      "info" : "ExpressionStatement[12475-12528]:ExpressionStatement[12475-12528]"
    }, {
      "left" : "return isRetina;",
      "right" : "return isRetina;",
      "info" : "ReturnStatement[12536-12552]:ReturnStatement[12536-12552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13047-13182]:Block[13047-13182]"
    }, {
      "left" : "return (Float)Toolkit.getDefaultToolkit()\n        .getDesktopProperty(\n          \"apple.awt.contentScaleFactor\") != 1.0f;",
      "right" : "return (Float)Toolkit.getDefaultToolkit()\n        .getDesktopProperty(\n          \"apple.awt.contentScaleFactor\") != 1.0f;",
      "info" : "ReturnStatement[13055-13176]:ReturnStatement[13055-13176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13532-13655]:Block[13532-13655]"
    }, {
      "left" : "GraphicsDevice device = g.getDeviceConfiguration().getDevice();",
      "right" : "GraphicsDevice device = g.getDeviceConfiguration().getDevice();",
      "info" : "VariableDeclarationStatement[13540-13603]:VariableDeclarationStatement[13540-13603]"
    }, {
      "left" : "return isOracleMacRetinaDevice(device);",
      "right" : "return isOracleMacRetinaDevice(device);",
      "info" : "ReturnStatement[13610-13649]:ReturnStatement[13610-13649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13975-14494]:Block[13975-14494]"
    }, {
      "left" : "if (SystemInfo.isAppleJvm)",
      "right" : "if (SystemInfo.isAppleJvm)",
      "info" : "IfStatement[13983-14058]:IfStatement[13983-14058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14010-14058]:Block[14010-14058]"
    }, {
      "left" : "return hasAppleRetinaDevice();",
      "right" : "return hasAppleRetinaDevice();",
      "info" : "ReturnStatement[14020-14050]:ReturnStatement[14020-14050]"
    }, {
      "left" : "if (SystemInfo.isMac)",
      "right" : "if (SystemInfo.isMac)",
      "info" : "IfStatement[14087-14467]:IfStatement[14087-14467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14109-14467]:Block[14109-14467]"
    }, {
      "left" : "GraphicsEnvironment e\n          = GraphicsEnvironment.getLocalGraphicsEnvironment();",
      "right" : "GraphicsEnvironment e\n          = GraphicsEnvironment.getLocalGraphicsEnvironment();",
      "info" : "VariableDeclarationStatement[14119-14203]:VariableDeclarationStatement[14119-14203]"
    }, {
      "left" : "GraphicsDevice[] devices = e.getScreenDevices();",
      "right" : "GraphicsDevice[] devices = e.getScreenDevices();",
      "info" : "VariableDeclarationStatement[14213-14261]:VariableDeclarationStatement[14213-14261]"
    }, {
      "left" : "for (GraphicsDevice device : devices)",
      "right" : "for (GraphicsDevice device : devices)",
      "info" : "EnhancedForStatement[14324-14459]:EnhancedForStatement[14324-14459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14362-14459]:Block[14362-14459]"
    }, {
      "left" : "if (isOracleMacRetinaDevice(device))",
      "right" : "if (isOracleMacRetinaDevice(device))",
      "info" : "IfStatement[14374-14449]:IfStatement[14374-14449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14411-14449]:Block[14411-14449]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[14425-14437]:ReturnStatement[14425-14437]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14475-14488]:ReturnStatement[14475-14488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14555-14726]:Block[14555-14726]"
    }, {
      "left" : "if (SystemInfo.isMac && SystemInfo.isJavaVersionAtLeast(\"1.7\"))",
      "right" : "if (SystemInfo.isMac && SystemInfo.isJavaVersionAtLeast(\"1.7\"))",
      "info" : "IfStatement[14561-14722]:IfStatement[14561-14722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14625-14684]:Block[14625-14684]"
    }, {
      "left" : "return DetectRetinaKit.isMacRetina(graphics);",
      "right" : "return DetectRetinaKit.isMacRetina(graphics);",
      "info" : "ReturnStatement[14633-14678]:ReturnStatement[14633-14678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14690-14722]:Block[14690-14722]"
    }, {
      "left" : "return isRetina();",
      "right" : "return isRetina();",
      "info" : "ReturnStatement[14698-14716]:ReturnStatement[14698-14716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14869-16363]:Block[14869-16363]"
    }, {
      "left" : "if (GraphicsEnvironment.isHeadless())",
      "right" : "if (GraphicsEnvironment.isHeadless())",
      "info" : "IfStatement[14875-14926]:IfStatement[14875-14926]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14913-14926]:ReturnStatement[14913-14926]"
    }, {
      "left" : "if (\"true\".equalsIgnoreCase(System.getProperty(\"is.hidpi\")))",
      "right" : "if (\"true\".equalsIgnoreCase(System.getProperty(\"is.hidpi\")))",
      "info" : "IfStatement[14986-15073]:IfStatement[14986-15073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15047-15073]:Block[15047-15073]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15055-15067]:ReturnStatement[15055-15067]"
    }, {
      "left" : "if (Registry.is(\"new.retina.detection\"))",
      "right" : "if (Registry.is(\"new.retina.detection\"))",
      "info" : "IfStatement[15079-16359]:IfStatement[15079-16359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15120-15168]:Block[15120-15168]"
    }, {
      "left" : "return DetectRetinaKit.isRetina();",
      "right" : "return DetectRetinaKit.isRetina();",
      "info" : "ReturnStatement[15128-15162]:ReturnStatement[15128-15162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15174-16359]:Block[15174-16359]"
    }, {
      "left" : "synchronized (ourRetina) {\n        if (ourRetina.isNull()) {\n          ourRetina.set(false); // in case HiDPIScaledImage.drawIntoImage is not called for some reason\n\n          if (SystemInfo.isJavaVersionAtLeast(\"1.6.0_33\") && SystemInfo.isAppleJvm) {\n            if (!\"false\".equals(System.getProperty(\"ide.mac.retina\"))) {\n              ourRetina.set(IsRetina.isRetina());\n              return ourRetina.get();\n            }\n          }\n          else if (SystemInfo.isJavaVersionAtLeast(\"1.7.0_40\") && SystemInfo.isOracleJvm) {\n            try {\n              GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();\n              final GraphicsDevice device = env.getDefaultScreenDevice();\n              Integer scale = ReflectionUtil.getField(device.getClass(), device, int.class, \"scale\");\n              if (scale != null && scale.intValue() == 2) {\n                ourRetina.set(true);\n                return true;\n              }\n            }\n            catch (AWTError ignore) {\n            }\n            catch (Exception ignore) {\n            }\n          }\n          ourRetina.set(false);\n        }\n\n        return ourRetina.get();\n      }",
      "right" : "synchronized (ourRetina) {\n        if (ourRetina.isNull()) {\n          ourRetina.set(false); // in case HiDPIScaledImage.drawIntoImage is not called for some reason\n\n          if (SystemInfo.isJavaVersionAtLeast(\"1.6.0_33\") && SystemInfo.isAppleJvm) {\n            if (!\"false\".equals(System.getProperty(\"ide.mac.retina\"))) {\n              ourRetina.set(IsRetina.isRetina());\n              return ourRetina.get();\n            }\n          }\n          else if (SystemInfo.isJavaVersionAtLeast(\"1.7.0_40\") && SystemInfo.isOracleJvm) {\n            try {\n              GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();\n              final GraphicsDevice device = env.getDefaultScreenDevice();\n              Integer scale = ReflectionUtil.getField(device.getClass(), device, int.class, \"scale\");\n              if (scale != null && scale.intValue() == 2) {\n                ourRetina.set(true);\n                return true;\n              }\n            }\n            catch (AWTError ignore) {\n            }\n            catch (Exception ignore) {\n            }\n          }\n          ourRetina.set(false);\n        }\n\n        return ourRetina.get();\n      }",
      "info" : "SynchronizedStatement[15182-16353]:SynchronizedStatement[15182-16353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15207-16353]:Block[15207-16353]"
    }, {
      "left" : "if (ourRetina.isNull())",
      "right" : "if (ourRetina.isNull())",
      "info" : "IfStatement[15217-16312]:IfStatement[15217-16312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15241-16312]:Block[15241-16312]"
    }, {
      "left" : "ourRetina.set(false);",
      "right" : "ourRetina.set(false);",
      "info" : "ExpressionStatement[15253-15274]:ExpressionStatement[15253-15274]"
    }, {
      "left" : "if (SystemInfo.isJavaVersionAtLeast(\"1.6.0_33\") && SystemInfo.isAppleJvm)",
      "right" : "if (SystemInfo.isJavaVersionAtLeast(\"1.6.0_33\") && SystemInfo.isAppleJvm)",
      "info" : "IfStatement[15358-16270]:IfStatement[15358-16270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15432-15620]:Block[15432-15620]"
    }, {
      "left" : "if (!\"false\".equals(System.getProperty(\"ide.mac.retina\")))",
      "right" : "if (!\"false\".equals(System.getProperty(\"ide.mac.retina\")))",
      "info" : "IfStatement[15446-15608]:IfStatement[15446-15608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15505-15608]:Block[15505-15608]"
    }, {
      "left" : "ourRetina.set(IsRetina.isRetina());",
      "right" : "ourRetina.set(IsRetina.isRetina());",
      "info" : "ExpressionStatement[15521-15556]:ExpressionStatement[15521-15556]"
    }, {
      "left" : "return ourRetina.get();",
      "right" : "return ourRetina.get();",
      "info" : "ReturnStatement[15571-15594]:ReturnStatement[15571-15594]"
    }, {
      "left" : "if (SystemInfo.isJavaVersionAtLeast(\"1.7.0_40\") && SystemInfo.isOracleJvm)",
      "right" : "if (SystemInfo.isJavaVersionAtLeast(\"1.7.0_40\") && SystemInfo.isOracleJvm)",
      "info" : "IfStatement[15636-16270]:IfStatement[15636-16270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15711-16270]:Block[15711-16270]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[15725-16258]:TryStatement[15725-16258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15729-16153]:Block[15729-16153]"
    }, {
      "left" : "GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();",
      "right" : "GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();",
      "info" : "VariableDeclarationStatement[15745-15821]:VariableDeclarationStatement[15745-15821]"
    }, {
      "left" : "final GraphicsDevice device = env.getDefaultScreenDevice();",
      "right" : "final GraphicsDevice device = env.getDefaultScreenDevice();",
      "info" : "VariableDeclarationStatement[15836-15895]:VariableDeclarationStatement[15836-15895]"
    }, {
      "left" : "Integer scale = ReflectionUtil.getField(device.getClass(), device, int.class, \"scale\");",
      "right" : "Integer scale = ReflectionUtil.getField(device.getClass(), device, int.class, \"scale\");",
      "info" : "VariableDeclarationStatement[15910-15997]:VariableDeclarationStatement[15910-15997]"
    }, {
      "left" : "if (scale != null && scale.intValue() == 2)",
      "right" : "if (scale != null && scale.intValue() == 2)",
      "info" : "IfStatement[16012-16139]:IfStatement[16012-16139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16056-16139]:Block[16056-16139]"
    }, {
      "left" : "ourRetina.set(true);",
      "right" : "ourRetina.set(true);",
      "info" : "ExpressionStatement[16074-16094]:ExpressionStatement[16074-16094]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[16111-16123]:ReturnStatement[16111-16123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16190-16205]:Block[16190-16205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16243-16258]:Block[16243-16258]"
    }, {
      "left" : "ourRetina.set(false);",
      "right" : "ourRetina.set(false);",
      "info" : "ExpressionStatement[16281-16302]:ExpressionStatement[16281-16302]"
    }, {
      "left" : "return ourRetina.get();",
      "right" : "return ourRetina.get();",
      "info" : "ReturnStatement[16322-16345]:ReturnStatement[16322-16345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16416-17126]:Block[16416-17126]"
    }, {
      "left" : "return SystemInfo.isMac && System.getProperty(\"java.runtime.version\").startsWith(\"1.6.0_29\");",
      "right" : "return SystemInfo.isMac && System.getProperty(\"java.runtime.version\").startsWith(\"1.6.0_29\");",
      "info" : "ReturnStatement[17029-17122]:ReturnStatement[17029-17122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17179-17476]:Block[17179-17476]"
    }, {
      "left" : "if (!hasLeakingAppleListeners())",
      "right" : "if (!hasLeakingAppleListeners())",
      "info" : "IfStatement[17185-17225]:IfStatement[17185-17225]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[17218-17225]:ReturnStatement[17218-17225]"
    }, {
      "left" : "Toolkit toolkit = Toolkit.getDefaultToolkit();",
      "right" : "Toolkit toolkit = Toolkit.getDefaultToolkit();",
      "info" : "VariableDeclarationStatement[17231-17277]:VariableDeclarationStatement[17231-17277]"
    }, {
      "left" : "String name = \"apple.awt.contentScaleFactor\";",
      "right" : "String name = \"apple.awt.contentScaleFactor\";",
      "info" : "VariableDeclarationStatement[17282-17327]:VariableDeclarationStatement[17282-17327]"
    }, {
      "left" : "for (PropertyChangeListener each : toolkit.getPropertyChangeListeners(name))",
      "right" : "for (PropertyChangeListener each : toolkit.getPropertyChangeListeners(name))",
      "info" : "EnhancedForStatement[17332-17472]:EnhancedForStatement[17332-17472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17409-17472]:Block[17409-17472]"
    }, {
      "left" : "toolkit.removePropertyChangeListener(name, each);",
      "right" : "toolkit.removePropertyChangeListener(name, each);",
      "info" : "ExpressionStatement[17417-17466]:ExpressionStatement[17417-17466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17570-17623]:Block[17570-17623]"
    }, {
      "left" : "return (T)component.getClientProperty(key);",
      "right" : "return (T)component.getClientProperty(key);",
      "info" : "ReturnStatement[17576-17619]:ReturnStatement[17576-17619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17729-17779]:Block[17729-17779]"
    }, {
      "left" : "component.putClientProperty(key, value);",
      "right" : "component.putClientProperty(key, value);",
      "info" : "ExpressionStatement[17735-17775]:ExpressionStatement[17735-17775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17838-18462]:Block[17838-18462]"
    }, {
      "left" : "int htmlIndex = 6 + text.indexOf(\"<html>\");",
      "right" : "int htmlIndex = 6 + text.indexOf(\"<html>\");",
      "info" : "VariableDeclarationStatement[17844-17887]:VariableDeclarationStatement[17844-17887]"
    }, {
      "left" : "if (htmlIndex < 6)",
      "right" : "if (htmlIndex < 6)",
      "info" : "IfStatement[17892-17962]:IfStatement[17892-17962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17911-17962]:Block[17911-17962]"
    }, {
      "left" : "return text.replaceAll(\"\\n\", \"<br>\");",
      "right" : "return text.replaceAll(\"\\n\", \"<br>\");",
      "info" : "ReturnStatement[17919-17956]:ReturnStatement[17919-17956]"
    }, {
      "left" : "int htmlCloseIndex = text.indexOf(\"</html>\", htmlIndex);",
      "right" : "int htmlCloseIndex = text.indexOf(\"</html>\", htmlIndex);",
      "info" : "VariableDeclarationStatement[17967-18023]:VariableDeclarationStatement[17967-18023]"
    }, {
      "left" : "if (htmlCloseIndex < 0)",
      "right" : "if (htmlCloseIndex < 0)",
      "info" : "IfStatement[18028-18097]:IfStatement[18028-18097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18052-18097]:Block[18052-18097]"
    }, {
      "left" : "htmlCloseIndex = text.length();",
      "right" : "htmlCloseIndex = text.length();",
      "info" : "ExpressionStatement[18060-18091]:ExpressionStatement[18060-18091]"
    }, {
      "left" : "int bodyIndex = 6 + text.indexOf(\"<body>\", htmlIndex);",
      "right" : "int bodyIndex = 6 + text.indexOf(\"<body>\", htmlIndex);",
      "info" : "VariableDeclarationStatement[18102-18156]:VariableDeclarationStatement[18102-18156]"
    }, {
      "left" : "if (bodyIndex < 6)",
      "right" : "if (bodyIndex < 6)",
      "info" : "IfStatement[18161-18243]:IfStatement[18161-18243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18180-18243]:Block[18180-18243]"
    }, {
      "left" : "return text.substring(htmlIndex, htmlCloseIndex);",
      "right" : "return text.substring(htmlIndex, htmlCloseIndex);",
      "info" : "ReturnStatement[18188-18237]:ReturnStatement[18188-18237]"
    }, {
      "left" : "int bodyCloseIndex = text.indexOf(\"</body>\", bodyIndex);",
      "right" : "int bodyCloseIndex = text.indexOf(\"</body>\", bodyIndex);",
      "info" : "VariableDeclarationStatement[18248-18304]:VariableDeclarationStatement[18248-18304]"
    }, {
      "left" : "if (bodyCloseIndex < 0)",
      "right" : "if (bodyCloseIndex < 0)",
      "info" : "IfStatement[18309-18378]:IfStatement[18309-18378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18333-18378]:Block[18333-18378]"
    }, {
      "left" : "bodyCloseIndex = text.length();",
      "right" : "bodyCloseIndex = text.length();",
      "info" : "ExpressionStatement[18341-18372]:ExpressionStatement[18341-18372]"
    }, {
      "left" : "return text.substring(bodyIndex, Math.min(bodyCloseIndex, htmlCloseIndex));",
      "right" : "return text.substring(bodyIndex, Math.min(bodyCloseIndex, htmlCloseIndex));",
      "info" : "ReturnStatement[18383-18458]:ReturnStatement[18383-18458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18510-18668]:Block[18510-18668]"
    }, {
      "left" : "String result = getHtmlBody(html.getText());",
      "right" : "String result = getHtmlBody(html.getText());",
      "info" : "VariableDeclarationStatement[18516-18560]:VariableDeclarationStatement[18516-18560]"
    }, {
      "left" : "return html.isKeepFont() ? result : result.replaceAll(\"<font(.*?)>\", \"\").replaceAll(\"</font>\", \"\");",
      "right" : "return html.isKeepFont() ? result : result.replaceAll(\"<font(.*?)>\", \"\").replaceAll(\"</font>\", \"\");",
      "info" : "ReturnStatement[18565-18664]:ReturnStatement[18565-18664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18758-19115]:Block[18758-19115]"
    }, {
      "left" : "if (x == x1)",
      "right" : "if (x == x1)",
      "info" : "IfStatement[18764-19111]:IfStatement[18764-19111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18777-18904]:Block[18777-18904]"
    }, {
      "left" : "int minY = Math.min(y, y1);",
      "right" : "int minY = Math.min(y, y1);",
      "info" : "VariableDeclarationStatement[18785-18812]:VariableDeclarationStatement[18785-18812]"
    }, {
      "left" : "int maxY = Math.max(y, y1);",
      "right" : "int maxY = Math.max(y, y1);",
      "info" : "VariableDeclarationStatement[18819-18846]:VariableDeclarationStatement[18819-18846]"
    }, {
      "left" : "graphics.drawLine(x, minY + 1, x1, maxY - 1);",
      "right" : "graphics.drawLine(x, minY + 1, x1, maxY - 1);",
      "info" : "ExpressionStatement[18853-18898]:ExpressionStatement[18853-18898]"
    }, {
      "left" : "if (y == y1)",
      "right" : "if (y == y1)",
      "info" : "IfStatement[18914-19111]:IfStatement[18914-19111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18927-19054]:Block[18927-19054]"
    }, {
      "left" : "int minX = Math.min(x, x1);",
      "right" : "int minX = Math.min(x, x1);",
      "info" : "VariableDeclarationStatement[18935-18962]:VariableDeclarationStatement[18935-18962]"
    }, {
      "left" : "int maxX = Math.max(x, x1);",
      "right" : "int maxX = Math.max(x, x1);",
      "info" : "VariableDeclarationStatement[18969-18996]:VariableDeclarationStatement[18969-18996]"
    }, {
      "left" : "graphics.drawLine(minX + 1, y, maxX - 1, y1);",
      "right" : "graphics.drawLine(minX + 1, y, maxX - 1, y1);",
      "info" : "ExpressionStatement[19003-19048]:ExpressionStatement[19003-19048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19064-19111]:Block[19064-19111]"
    }, {
      "left" : "drawLine(graphics, x, y, x1, y1);",
      "right" : "drawLine(graphics, x, y, x1, y1);",
      "info" : "ExpressionStatement[19072-19105]:ExpressionStatement[19072-19105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19172-19388]:Block[19172-19388]"
    }, {
      "left" : "char c = e.getKeyChar();",
      "right" : "char c = e.getKeyChar();",
      "info" : "VariableDeclarationStatement[19178-19202]:VariableDeclarationStatement[19178-19202]"
    }, {
      "left" : "if (c < 0x20 || c == 0x7F)",
      "right" : "if (c < 0x20 || c == 0x7F)",
      "info" : "IfStatement[19207-19247]:IfStatement[19207-19247]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19234-19247]:ReturnStatement[19234-19247]"
    }, {
      "left" : "if (SystemInfo.isMac)",
      "right" : "if (SystemInfo.isMac)",
      "info" : "IfStatement[19253-19334]:IfStatement[19253-19334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19275-19334]:Block[19275-19334]"
    }, {
      "left" : "return !e.isMetaDown() && !e.isControlDown();",
      "right" : "return !e.isMetaDown() && !e.isControlDown();",
      "info" : "ReturnStatement[19283-19328]:ReturnStatement[19283-19328]"
    }, {
      "left" : "return !e.isAltDown() && !e.isControlDown();",
      "right" : "return !e.isAltDown() && !e.isControlDown();",
      "info" : "ReturnStatement[19340-19384]:ReturnStatement[19340-19384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19513-19811]:Block[19513-19811]"
    }, {
      "left" : "final int centerY = bounds.height / 2;",
      "right" : "final int centerY = bounds.height / 2;",
      "info" : "VariableDeclarationStatement[19519-19557]:VariableDeclarationStatement[19519-19557]"
    }, {
      "left" : "final Font font = g.getFont();",
      "right" : "final Font font = g.getFont();",
      "info" : "VariableDeclarationStatement[19562-19592]:VariableDeclarationStatement[19562-19592]"
    }, {
      "left" : "final FontRenderContext frc = g.getFontRenderContext();",
      "right" : "final FontRenderContext frc = g.getFontRenderContext();",
      "info" : "VariableDeclarationStatement[19597-19652]:VariableDeclarationStatement[19597-19652]"
    }, {
      "left" : "final Rectangle stringBounds = font.getStringBounds(string, frc).getBounds();",
      "right" : "final Rectangle stringBounds = font.getStringBounds(string, frc).getBounds();",
      "info" : "VariableDeclarationStatement[19657-19734]:VariableDeclarationStatement[19657-19734]"
    }, {
      "left" : "return (int)(centerY - stringBounds.height / 2.0 - stringBounds.y);",
      "right" : "return (int)(centerY - stringBounds.height / 2.0 - stringBounds.y);",
      "info" : "ReturnStatement[19740-19807]:ReturnStatement[19740-19807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19904-19965]:Block[19904-19965]"
    }, {
      "left" : "setEnabled(component, enabled, recursively, false);",
      "right" : "setEnabled(component, enabled, recursively, false);",
      "info" : "ExpressionStatement[19910-19961]:ExpressionStatement[19910-19961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20079-21080]:Block[20079-21080]"
    }, {
      "left" : "component.setEnabled(enabled);",
      "right" : "component.setEnabled(enabled);",
      "info" : "ExpressionStatement[20085-20115]:ExpressionStatement[20085-20115]"
    }, {
      "left" : "if (component instanceof JComboBox && isUnderAquaLookAndFeel())",
      "right" : "if (component instanceof JComboBox && isUnderAquaLookAndFeel())",
      "info" : "IfStatement[20120-20387]:IfStatement[20120-20387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20184-20387]:Block[20184-20387]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[20374-20381]:ReturnStatement[20374-20381]"
    }, {
      "left" : "if (component instanceof JLabel)",
      "right" : "if (component instanceof JLabel)",
      "info" : "IfStatement[20392-20590]:IfStatement[20392-20590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20425-20590]:Block[20425-20590]"
    }, {
      "left" : "Color color = enabled ? getLabelForeground() : getLabelDisabledForeground();",
      "right" : "Color color = enabled ? getLabelForeground() : getLabelDisabledForeground();",
      "info" : "VariableDeclarationStatement[20433-20509]:VariableDeclarationStatement[20433-20509]"
    }, {
      "left" : "if (color != null)",
      "right" : "if (color != null)",
      "info" : "IfStatement[20516-20584]:IfStatement[20516-20584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20535-20584]:Block[20535-20584]"
    }, {
      "left" : "component.setForeground(color);",
      "right" : "component.setForeground(color);",
      "info" : "ExpressionStatement[20545-20576]:ExpressionStatement[20545-20576]"
    }, {
      "left" : "if (recursively && enabled == component.isEnabled())",
      "right" : "if (recursively && enabled == component.isEnabled())",
      "info" : "IfStatement[20595-21076]:IfStatement[20595-21076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20648-21076]:Block[20648-21076]"
    }, {
      "left" : "if (component instanceof Container)",
      "right" : "if (component instanceof Container)",
      "info" : "IfStatement[20656-21070]:IfStatement[20656-21070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20692-21070]:Block[20692-21070]"
    }, {
      "left" : "final Container container = (Container)component;",
      "right" : "final Container container = (Container)component;",
      "info" : "VariableDeclarationStatement[20702-20751]:VariableDeclarationStatement[20702-20751]"
    }, {
      "left" : "final int subComponentCount = container.getComponentCount();",
      "right" : "final int subComponentCount = container.getComponentCount();",
      "info" : "VariableDeclarationStatement[20760-20820]:VariableDeclarationStatement[20760-20820]"
    }, {
      "left" : "for (int i = 0; i < subComponentCount; i++)",
      "right" : "for (int i = 0; i < subComponentCount; i++)",
      "info" : "ForStatement[20829-21062]:ForStatement[20829-21062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20873-21062]:Block[20873-21062]"
    }, {
      "left" : "Component child = container.getComponent(i);",
      "right" : "Component child = container.getComponent(i);",
      "info" : "VariableDeclarationStatement[20885-20929]:VariableDeclarationStatement[20885-20929]"
    }, {
      "left" : "if (visibleOnly && !child.isVisible())",
      "right" : "if (visibleOnly && !child.isVisible())",
      "info" : "IfStatement[20940-20988]:IfStatement[20940-20988]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[20979-20988]:ContinueStatement[20979-20988]"
    }, {
      "left" : "setEnabled(child, enabled, recursively, visibleOnly);",
      "right" : "setEnabled(child, enabled, recursively, visibleOnly);",
      "info" : "ExpressionStatement[20999-21052]:ExpressionStatement[20999-21052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21156-21193]:Block[21156-21193]"
    }, {
      "left" : "g.drawLine(x1, y1, x2, y2);",
      "right" : "g.drawLine(x1, y1, x2, y2);",
      "info" : "ExpressionStatement[21162-21189]:ExpressionStatement[21162-21189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21321-21674]:Block[21321-21674]"
    }, {
      "left" : "Color oldFg = g.getColor();",
      "right" : "Color oldFg = g.getColor();",
      "info" : "VariableDeclarationStatement[21327-21354]:VariableDeclarationStatement[21327-21354]"
    }, {
      "left" : "Color oldBg = g.getBackground();",
      "right" : "Color oldBg = g.getBackground();",
      "info" : "VariableDeclarationStatement[21359-21391]:VariableDeclarationStatement[21359-21391]"
    }, {
      "left" : "if (fgColor != null)",
      "right" : "if (fgColor != null)",
      "info" : "IfStatement[21396-21451]:IfStatement[21396-21451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21417-21451]:Block[21417-21451]"
    }, {
      "left" : "g.setColor(fgColor);",
      "right" : "g.setColor(fgColor);",
      "info" : "ExpressionStatement[21425-21445]:ExpressionStatement[21425-21445]"
    }, {
      "left" : "if (bgColor != null)",
      "right" : "if (bgColor != null)",
      "info" : "IfStatement[21456-21516]:IfStatement[21456-21516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21477-21516]:Block[21477-21516]"
    }, {
      "left" : "g.setBackground(bgColor);",
      "right" : "g.setBackground(bgColor);",
      "info" : "ExpressionStatement[21485-21510]:ExpressionStatement[21485-21510]"
    }, {
      "left" : "drawLine(g, x1, y1, x2, y2);",
      "right" : "drawLine(g, x1, y1, x2, y2);",
      "info" : "ExpressionStatement[21521-21549]:ExpressionStatement[21521-21549]"
    }, {
      "left" : "if (fgColor != null)",
      "right" : "if (fgColor != null)",
      "info" : "IfStatement[21554-21607]:IfStatement[21554-21607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21575-21607]:Block[21575-21607]"
    }, {
      "left" : "g.setColor(oldFg);",
      "right" : "g.setColor(oldFg);",
      "info" : "ExpressionStatement[21583-21601]:ExpressionStatement[21583-21601]"
    }, {
      "left" : "if (bgColor != null)",
      "right" : "if (bgColor != null)",
      "info" : "IfStatement[21612-21670]:IfStatement[21612-21670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21633-21670]:Block[21633-21670]"
    }, {
      "left" : "g.setBackground(oldBg);",
      "right" : "g.setBackground(oldBg);",
      "info" : "ExpressionStatement[21641-21664]:ExpressionStatement[21641-21664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21741-22403]:Block[21741-22403]"
    }, {
      "left" : "GraphicsConfig config = GraphicsUtil.setupAAPainting(g);",
      "right" : "GraphicsConfig config = GraphicsUtil.setupAAPainting(g);",
      "info" : "VariableDeclarationStatement[21747-21803]:VariableDeclarationStatement[21747-21803]"
    }, {
      "left" : "Stroke oldStroke = g.getStroke();",
      "right" : "Stroke oldStroke = g.getStroke();",
      "info" : "VariableDeclarationStatement[21808-21841]:VariableDeclarationStatement[21808-21841]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[21846-22399]:TryStatement[21846-22399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21850-22325]:Block[21850-22325]"
    }, {
      "left" : "g.setStroke(new BasicStroke(0.7F));",
      "right" : "g.setStroke(new BasicStroke(0.7F));",
      "info" : "ExpressionStatement[21858-21893]:ExpressionStatement[21858-21893]"
    }, {
      "left" : "double cycle = 4;",
      "right" : "double cycle = 4;",
      "info" : "VariableDeclarationStatement[21900-21917]:VariableDeclarationStatement[21900-21917]"
    }, {
      "left" : "final double wavedAt = rectangle.y + (double)rectangle.height /2 - .5;",
      "right" : "final double wavedAt = rectangle.y + (double)rectangle.height /2 - .5;",
      "info" : "VariableDeclarationStatement[21924-21994]:VariableDeclarationStatement[21924-21994]"
    }, {
      "left" : "GeneralPath wavePath = new GeneralPath();",
      "right" : "GeneralPath wavePath = new GeneralPath();",
      "info" : "VariableDeclarationStatement[22001-22042]:VariableDeclarationStatement[22001-22042]"
    }, {
      "left" : "wavePath.moveTo(rectangle.x, wavedAt -  Math.cos(rectangle.x * 2 * Math.PI / cycle));",
      "right" : "wavePath.moveTo(rectangle.x, wavedAt -  Math.cos(rectangle.x * 2 * Math.PI / cycle));",
      "info" : "ExpressionStatement[22049-22134]:ExpressionStatement[22049-22134]"
    }, {
      "left" : "for (int x = rectangle.x + 1; x <= rectangle.x + rectangle.width; x++)",
      "right" : "for (int x = rectangle.x + 1; x <= rectangle.x + rectangle.width; x++)",
      "info" : "ForStatement[22141-22295]:ForStatement[22141-22295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22212-22295]:Block[22212-22295]"
    }, {
      "left" : "wavePath.lineTo(x, wavedAt - Math.cos(x * 2 * Math.PI / cycle) );",
      "right" : "wavePath.lineTo(x, wavedAt - Math.cos(x * 2 * Math.PI / cycle) );",
      "info" : "ExpressionStatement[22222-22287]:ExpressionStatement[22222-22287]"
    }, {
      "left" : "g.draw(wavePath);",
      "right" : "g.draw(wavePath);",
      "info" : "ExpressionStatement[22302-22319]:ExpressionStatement[22302-22319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22338-22399]:Block[22338-22399]"
    }, {
      "left" : "config.restore();",
      "right" : "config.restore();",
      "info" : "ExpressionStatement[22346-22363]:ExpressionStatement[22346-22363]"
    }, {
      "left" : "g.setStroke(oldStroke);",
      "right" : "g.setStroke(oldStroke);",
      "info" : "ExpressionStatement[22370-22393]:ExpressionStatement[22370-22393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22521-23434]:Block[22521-23434]"
    }, {
      "left" : "ArrayList<String> lines = new ArrayList<String>();",
      "right" : "ArrayList<String> lines = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[22527-22577]:VariableDeclarationStatement[22527-22577]"
    }, {
      "left" : "String currentLine = \"\";",
      "right" : "String currentLine = \"\";",
      "info" : "VariableDeclarationStatement[22582-22606]:VariableDeclarationStatement[22582-22606]"
    }, {
      "left" : "StringBuilder currentAtom = new StringBuilder();",
      "right" : "StringBuilder currentAtom = new StringBuilder();",
      "info" : "VariableDeclarationStatement[22611-22659]:VariableDeclarationStatement[22611-22659]"
    }, {
      "left" : "for (int i = 0; i < text.length(); i++)",
      "right" : "for (int i = 0; i < text.length(); i++)",
      "info" : "ForStatement[22665-23282]:ForStatement[22665-23282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22705-23282]:Block[22705-23282]"
    }, {
      "left" : "char ch = text.charAt(i);",
      "right" : "char ch = text.charAt(i);",
      "info" : "VariableDeclarationStatement[22713-22738]:VariableDeclarationStatement[22713-22738]"
    }, {
      "left" : "currentAtom.append(ch);",
      "right" : "currentAtom.append(ch);",
      "info" : "ExpressionStatement[22745-22768]:ExpressionStatement[22745-22768]"
    }, {
      "left" : "if (ch == separator)",
      "right" : "if (ch == separator)",
      "info" : "IfStatement[22776-22887]:IfStatement[22776-22887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22797-22887]:Block[22797-22887]"
    }, {
      "left" : "currentLine += currentAtom.toString();",
      "right" : "currentLine += currentAtom.toString();",
      "info" : "ExpressionStatement[22807-22845]:ExpressionStatement[22807-22845]"
    }, {
      "left" : "currentAtom.setLength(0);",
      "right" : "currentAtom.setLength(0);",
      "info" : "ExpressionStatement[22854-22879]:ExpressionStatement[22854-22879]"
    }, {
      "left" : "String s = currentLine + currentAtom.toString();",
      "right" : "String s = currentLine + currentAtom.toString();",
      "info" : "VariableDeclarationStatement[22895-22943]:VariableDeclarationStatement[22895-22943]"
    }, {
      "left" : "int width = fontMetrics.stringWidth(s);",
      "right" : "int width = fontMetrics.stringWidth(s);",
      "info" : "VariableDeclarationStatement[22950-22989]:VariableDeclarationStatement[22950-22989]"
    }, {
      "left" : "if (width >= widthLimit - fontMetrics.charWidth('w'))",
      "right" : "if (width >= widthLimit - fontMetrics.charWidth('w'))",
      "info" : "IfStatement[22997-23276]:IfStatement[22997-23276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23051-23276]:Block[23051-23276]"
    }, {
      "left" : "if (!currentLine.isEmpty())",
      "right" : "if (!currentLine.isEmpty())",
      "info" : "IfStatement[23061-23268]:IfStatement[23061-23268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23089-23162]:Block[23089-23162]"
    }, {
      "left" : "lines.add(currentLine);",
      "right" : "lines.add(currentLine);",
      "info" : "ExpressionStatement[23101-23124]:ExpressionStatement[23101-23124]"
    }, {
      "left" : "currentLine = \"\";",
      "right" : "currentLine = \"\";",
      "info" : "ExpressionStatement[23135-23152]:ExpressionStatement[23135-23152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23176-23268]:Block[23176-23268]"
    }, {
      "left" : "lines.add(currentAtom.toString());",
      "right" : "lines.add(currentAtom.toString());",
      "info" : "ExpressionStatement[23188-23222]:ExpressionStatement[23188-23222]"
    }, {
      "left" : "currentAtom.setLength(0);",
      "right" : "currentAtom.setLength(0);",
      "info" : "ExpressionStatement[23233-23258]:ExpressionStatement[23233-23258]"
    }, {
      "left" : "String s = currentLine + currentAtom.toString();",
      "right" : "String s = currentLine + currentAtom.toString();",
      "info" : "VariableDeclarationStatement[23288-23336]:VariableDeclarationStatement[23288-23336]"
    }, {
      "left" : "if (!s.isEmpty())",
      "right" : "if (!s.isEmpty())",
      "info" : "IfStatement[23341-23386]:IfStatement[23341-23386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23359-23386]:Block[23359-23386]"
    }, {
      "left" : "lines.add(s);",
      "right" : "lines.add(s);",
      "info" : "ExpressionStatement[23367-23380]:ExpressionStatement[23367-23380]"
    }, {
      "left" : "return ArrayUtil.toStringArray(lines);",
      "right" : "return ArrayUtil.toStringArray(lines);",
      "info" : "ReturnStatement[23392-23430]:ReturnStatement[23392-23430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23528-23645]:Block[23528-23645]"
    }, {
      "left" : "assignMnemonic(text, action);",
      "right" : "assignMnemonic(text, action);",
      "info" : "ExpressionStatement[23534-23563]:ExpressionStatement[23534-23563]"
    }, {
      "left" : "text = text.replaceAll(\"&\", \"\");",
      "right" : "text = text.replaceAll(\"&\", \"\");",
      "info" : "ExpressionStatement[23569-23601]:ExpressionStatement[23569-23601]"
    }, {
      "left" : "action.putValue(Action.NAME, text);",
      "right" : "action.putValue(Action.NAME, text);",
      "info" : "ExpressionStatement[23606-23641]:ExpressionStatement[23606-23641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23728-24039]:Block[23728-24039]"
    }, {
      "left" : "int mnemoPos = text.indexOf('&');",
      "right" : "int mnemoPos = text.indexOf('&');",
      "info" : "VariableDeclarationStatement[23734-23767]:VariableDeclarationStatement[23734-23767]"
    }, {
      "left" : "if (mnemoPos >= 0 && mnemoPos < text.length() - 2)",
      "right" : "if (mnemoPos >= 0 && mnemoPos < text.length() - 2)",
      "info" : "IfStatement[23772-24035]:IfStatement[23772-24035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23823-24035]:Block[23823-24035]"
    }, {
      "left" : "String mnemoChar = text.substring(mnemoPos + 1, mnemoPos + 2).trim();",
      "right" : "String mnemoChar = text.substring(mnemoPos + 1, mnemoPos + 2).trim();",
      "info" : "VariableDeclarationStatement[23831-23900]:VariableDeclarationStatement[23831-23900]"
    }, {
      "left" : "if (mnemoChar.length() == 1)",
      "right" : "if (mnemoChar.length() == 1)",
      "info" : "IfStatement[23907-24029]:IfStatement[23907-24029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23936-24029]:Block[23936-24029]"
    }, {
      "left" : "action.putValue(Action.MNEMONIC_KEY, Integer.valueOf(mnemoChar.charAt(0)));",
      "right" : "action.putValue(Action.MNEMONIC_KEY, Integer.valueOf(mnemoChar.charAt(0)));",
      "info" : "ExpressionStatement[23946-24021]:ExpressionStatement[23946-24021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24100-24137]:Block[24100-24137]"
    }, {
      "left" : "return getFont(size, null);",
      "right" : "return getFont(size, null);",
      "info" : "ReturnStatement[24106-24133]:ReturnStatement[24106-24133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24224-24322]:Block[24224-24322]"
    }, {
      "left" : "if (base == null)",
      "right" : "if (base == null)",
      "info" : "IfStatement[24230-24270]:IfStatement[24230-24270]"
    }, {
      "left" : "base = getLabelFont();",
      "right" : "base = getLabelFont();",
      "info" : "ExpressionStatement[24248-24270]:ExpressionStatement[24248-24270]"
    }, {
      "left" : "return base.deriveFont(getFontSize(size));",
      "right" : "return base.deriveFont(getFontSize(size));",
      "info" : "ReturnStatement[24276-24318]:ReturnStatement[24276-24318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24373-24657]:Block[24373-24657]"
    }, {
      "left" : "int defSize = getLabelFont().getSize();",
      "right" : "int defSize = getLabelFont().getSize();",
      "info" : "VariableDeclarationStatement[24379-24418]:VariableDeclarationStatement[24379-24418]"
    }, {
      "left" : "switch (size) {\n      case SMALL:\n        return Math.max(defSize - JBUI.scale(2f), JBUI.scale(11f));\n      case MINI:\n        return Math.max(defSize - JBUI.scale(4f), JBUI.scale(9f));\n      default:\n        return defSize;\n    }",
      "right" : "switch (size) {\n      case SMALL:\n        return Math.max(defSize - JBUI.scale(2f), JBUI.scale(11f));\n      case MINI:\n        return Math.max(defSize - JBUI.scale(4f), JBUI.scale(9f));\n      default:\n        return defSize;\n    }",
      "info" : "SwitchStatement[24423-24653]:SwitchStatement[24423-24653]"
    }, {
      "left" : "case SMALL:",
      "right" : "case SMALL:",
      "info" : "SwitchCase[24445-24456]:SwitchCase[24445-24456]"
    }, {
      "left" : "return Math.max(defSize - JBUI.scale(2f), JBUI.scale(11f));",
      "right" : "return Math.max(defSize - JBUI.scale(2f), JBUI.scale(11f));",
      "info" : "ReturnStatement[24465-24524]:ReturnStatement[24465-24524]"
    }, {
      "left" : "case MINI:",
      "right" : "case MINI:",
      "info" : "SwitchCase[24531-24541]:SwitchCase[24531-24541]"
    }, {
      "left" : "return Math.max(defSize - JBUI.scale(4f), JBUI.scale(9f));",
      "right" : "return Math.max(defSize - JBUI.scale(4f), JBUI.scale(9f));",
      "info" : "ReturnStatement[24550-24608]:ReturnStatement[24550-24608]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[24615-24623]:SwitchCase[24615-24623]"
    }, {
      "left" : "return defSize;",
      "right" : "return defSize;",
      "info" : "ReturnStatement[24632-24647]:ReturnStatement[24632-24647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24720-25023]:Block[24720-25023]"
    }, {
      "left" : "Color defColor = getLabelForeground();",
      "right" : "Color defColor = getLabelForeground();",
      "info" : "VariableDeclarationStatement[24726-24764]:VariableDeclarationStatement[24726-24764]"
    }, {
      "left" : "if (fontColor == FontColor.BRIGHTER)",
      "right" : "if (fontColor == FontColor.BRIGHTER)",
      "info" : "IfStatement[24769-24998]:IfStatement[24769-24998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24806-24998]:Block[24806-24998]"
    }, {
      "left" : "return new JBColor(new Color(Math.min(defColor.getRed() + 50, 255), Math.min(defColor.getGreen() + 50, 255), Math.min(\n        defColor.getBlue() + 50, 255)), defColor.darker());",
      "right" : "return new JBColor(new Color(Math.min(defColor.getRed() + 50, 255), Math.min(defColor.getGreen() + 50, 255), Math.min(\n        defColor.getBlue() + 50, 255)), defColor.darker());",
      "info" : "ReturnStatement[24814-24992]:ReturnStatement[24814-24992]"
    }, {
      "left" : "return defColor;",
      "right" : "return defColor;",
      "info" : "ReturnStatement[25003-25019]:ReturnStatement[25003-25019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25221-27175]:Block[25221-27175]"
    }, {
      "left" : "ButtonUI ui = cb.getUI();",
      "right" : "ButtonUI ui = cb.getUI();",
      "info" : "VariableDeclarationStatement[25300-25325]:VariableDeclarationStatement[25300-25325]"
    }, {
      "left" : "String text = cb.getText();",
      "right" : "String text = cb.getText();",
      "info" : "VariableDeclarationStatement[25330-25357]:VariableDeclarationStatement[25330-25357]"
    }, {
      "left" : "Icon buttonIcon = cb.getIcon();",
      "right" : "Icon buttonIcon = cb.getIcon();",
      "info" : "VariableDeclarationStatement[25363-25394]:VariableDeclarationStatement[25363-25394]"
    }, {
      "left" : "if (buttonIcon == null && ui != null)",
      "right" : "if (buttonIcon == null && ui != null)",
      "info" : "IfStatement[25399-26301]:IfStatement[25399-26301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25437-26301]:Block[25437-26301]"
    }, {
      "left" : "if (ui instanceof BasicRadioButtonUI)",
      "right" : "if (ui instanceof BasicRadioButtonUI)",
      "info" : "IfStatement[25445-26295]:IfStatement[25445-26295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25483-25556]:Block[25483-25556]"
    }, {
      "left" : "buttonIcon = ((BasicRadioButtonUI)ui).getDefaultIcon();",
      "right" : "buttonIcon = ((BasicRadioButtonUI)ui).getDefaultIcon();",
      "info" : "ExpressionStatement[25493-25548]:ExpressionStatement[25493-25548]"
    }, {
      "left" : "if (isUnderAquaLookAndFeel())",
      "right" : "if (isUnderAquaLookAndFeel())",
      "info" : "IfStatement[25568-26295]:IfStatement[25568-26295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25598-26295]:Block[25598-26295]"
    }, {
      "left" : "Ref<Method> cached = ourDefaultIconMethodsCache.get(ui.getClass());",
      "right" : "Ref<Method> cached = ourDefaultIconMethodsCache.get(ui.getClass());",
      "info" : "VariableDeclarationStatement[25652-25719]:VariableDeclarationStatement[25652-25719]"
    }, {
      "left" : "if (cached == null)",
      "right" : "if (cached == null)",
      "info" : "IfStatement[25728-26053]:IfStatement[25728-26053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25748-26053]:Block[25748-26053]"
    }, {
      "left" : "cached = Ref.create(ReflectionUtil.findMethod(Arrays.asList(ui.getClass().getMethods()), \"getDefaultIcon\", JComponent.class));",
      "right" : "cached = Ref.create(ReflectionUtil.findMethod(Arrays.asList(ui.getClass().getMethods()), \"getDefaultIcon\", JComponent.class));",
      "info" : "ExpressionStatement[25760-25886]:ExpressionStatement[25760-25886]"
    }, {
      "left" : "ourDefaultIconMethodsCache.put(ui.getClass(), cached);",
      "right" : "ourDefaultIconMethodsCache.put(ui.getClass(), cached);",
      "info" : "ExpressionStatement[25897-25951]:ExpressionStatement[25897-25951]"
    }, {
      "left" : "if (!cached.isNull())",
      "right" : "if (!cached.isNull())",
      "info" : "IfStatement[25962-26043]:IfStatement[25962-26043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25984-26043]:Block[25984-26043]"
    }, {
      "left" : "cached.get().setAccessible(true);",
      "right" : "cached.get().setAccessible(true);",
      "info" : "ExpressionStatement[25998-26031]:ExpressionStatement[25998-26031]"
    }, {
      "left" : "Method method = cached.get();",
      "right" : "Method method = cached.get();",
      "info" : "VariableDeclarationStatement[26062-26091]:VariableDeclarationStatement[26062-26091]"
    }, {
      "left" : "if (method != null)",
      "right" : "if (method != null)",
      "info" : "IfStatement[26100-26287]:IfStatement[26100-26287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26120-26287]:Block[26120-26287]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[26132-26277]:TryStatement[26132-26277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26136-26203]:Block[26136-26203]"
    }, {
      "left" : "buttonIcon = (Icon)method.invoke(ui, cb);",
      "right" : "buttonIcon = (Icon)method.invoke(ui, cb);",
      "info" : "ExpressionStatement[26150-26191]:ExpressionStatement[26150-26191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26234-26277]:Block[26234-26277]"
    }, {
      "left" : "cached.set(null);",
      "right" : "cached.set(null);",
      "info" : "ExpressionStatement[26248-26265]:ExpressionStatement[26248-26265]"
    }, {
      "left" : "Dimension size = new Dimension();",
      "right" : "Dimension size = new Dimension();",
      "info" : "VariableDeclarationStatement[26307-26340]:VariableDeclarationStatement[26307-26340]"
    }, {
      "left" : "Rectangle viewRect = new Rectangle();",
      "right" : "Rectangle viewRect = new Rectangle();",
      "info" : "VariableDeclarationStatement[26345-26382]:VariableDeclarationStatement[26345-26382]"
    }, {
      "left" : "Rectangle iconRect = new Rectangle();",
      "right" : "Rectangle iconRect = new Rectangle();",
      "info" : "VariableDeclarationStatement[26387-26424]:VariableDeclarationStatement[26387-26424]"
    }, {
      "left" : "Rectangle textRect = new Rectangle();",
      "right" : "Rectangle textRect = new Rectangle();",
      "info" : "VariableDeclarationStatement[26429-26466]:VariableDeclarationStatement[26429-26466]"
    }, {
      "left" : "Insets i = cb.getInsets();",
      "right" : "Insets i = cb.getInsets();",
      "info" : "VariableDeclarationStatement[26472-26498]:VariableDeclarationStatement[26472-26498]"
    }, {
      "left" : "size = cb.getSize(size);",
      "right" : "size = cb.getSize(size);",
      "info" : "ExpressionStatement[26504-26528]:ExpressionStatement[26504-26528]"
    }, {
      "left" : "viewRect.x = i.left;",
      "right" : "viewRect.x = i.left;",
      "info" : "ExpressionStatement[26533-26553]:ExpressionStatement[26533-26553]"
    }, {
      "left" : "viewRect.y = i.top;",
      "right" : "viewRect.y = i.top;",
      "info" : "ExpressionStatement[26558-26577]:ExpressionStatement[26558-26577]"
    }, {
      "left" : "viewRect.width = size.width - (i.right + viewRect.x);",
      "right" : "viewRect.width = size.width - (i.right + viewRect.x);",
      "info" : "ExpressionStatement[26582-26635]:ExpressionStatement[26582-26635]"
    }, {
      "left" : "viewRect.height = size.height - (i.bottom + viewRect.y);",
      "right" : "viewRect.height = size.height - (i.bottom + viewRect.y);",
      "info" : "ExpressionStatement[26640-26696]:ExpressionStatement[26640-26696]"
    }, {
      "left" : "iconRect.x = iconRect.y = iconRect.width = iconRect.height = 0;",
      "right" : "iconRect.x = iconRect.y = iconRect.width = iconRect.height = 0;",
      "info" : "ExpressionStatement[26701-26764]:ExpressionStatement[26701-26764]"
    }, {
      "left" : "textRect.x = textRect.y = textRect.width = textRect.height = 0;",
      "right" : "textRect.x = textRect.y = textRect.width = textRect.height = 0;",
      "info" : "ExpressionStatement[26769-26832]:ExpressionStatement[26769-26832]"
    }, {
      "left" : "SwingUtilities.layoutCompoundLabel(\n      cb, cb.getFontMetrics(cb.getFont()), text, buttonIcon,\n      cb.getVerticalAlignment(), cb.getHorizontalAlignment(),\n      cb.getVerticalTextPosition(), cb.getHorizontalTextPosition(),\n      viewRect, iconRect, textRect,\n      text == null ? 0 : cb.getIconTextGap());",
      "right" : "SwingUtilities.layoutCompoundLabel(\n      cb, cb.getFontMetrics(cb.getFont()), text, buttonIcon,\n      cb.getVerticalAlignment(), cb.getHorizontalAlignment(),\n      cb.getVerticalTextPosition(), cb.getHorizontalTextPosition(),\n      viewRect, iconRect, textRect,\n      text == null ? 0 : cb.getIconTextGap());",
      "info" : "ExpressionStatement[26838-27147]:ExpressionStatement[26838-27147]"
    }, {
      "left" : "return textRect.x;",
      "right" : "return textRect.x;",
      "info" : "ReturnStatement[27153-27171]:ReturnStatement[27153-27171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27217-27270]:Block[27217-27270]"
    }, {
      "left" : "return UIManager.getInt(\"ScrollBar.width\");",
      "right" : "return UIManager.getInt(\"ScrollBar.width\");",
      "info" : "ReturnStatement[27223-27266]:ReturnStatement[27223-27266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27308-27357]:Block[27308-27357]"
    }, {
      "left" : "return UIManager.getFont(\"Label.font\");",
      "right" : "return UIManager.getFont(\"Label.font\");",
      "info" : "ReturnStatement[27314-27353]:ReturnStatement[27314-27353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27402-27458]:Block[27402-27458]"
    }, {
      "left" : "return UIManager.getColor(\"Label.background\");",
      "right" : "return UIManager.getColor(\"Label.background\");",
      "info" : "ReturnStatement[27408-27454]:ReturnStatement[27408-27454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27503-27559]:Block[27503-27559]"
    }, {
      "left" : "return UIManager.getColor(\"Label.foreground\");",
      "right" : "return UIManager.getColor(\"Label.foreground\");",
      "info" : "ReturnStatement[27509-27555]:ReturnStatement[27509-27555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27612-27779]:Block[27612-27779]"
    }, {
      "left" : "final Color color = UIManager.getColor(\"Label.disabledForeground\");",
      "right" : "final Color color = UIManager.getColor(\"Label.disabledForeground\");",
      "info" : "VariableDeclarationStatement[27618-27685]:VariableDeclarationStatement[27618-27685]"
    }, {
      "left" : "if (color != null)",
      "right" : "if (color != null)",
      "info" : "IfStatement[27690-27722]:IfStatement[27690-27722]"
    }, {
      "left" : "return color;",
      "right" : "return color;",
      "info" : "ReturnStatement[27709-27722]:ReturnStatement[27709-27722]"
    }, {
      "left" : "return UIManager.getColor(\"Label.disabledText\");",
      "right" : "return UIManager.getColor(\"Label.disabledText\");",
      "info" : "ReturnStatement[27727-27775]:ReturnStatement[27727-27775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27849-28134]:Block[27849-28134]"
    }, {
      "left" : "if (s.indexOf('&') != -1)",
      "right" : "if (s.indexOf('&') != -1)",
      "info" : "IfStatement[27855-27930]:IfStatement[27855-27930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27881-27930]:Block[27881-27930]"
    }, {
      "left" : "s = StringUtil.replace(s, \"&\", \"\");",
      "right" : "s = StringUtil.replace(s, \"&\", \"\");",
      "info" : "ExpressionStatement[27889-27924]:ExpressionStatement[27889-27924]"
    }, {
      "left" : "if (s.indexOf('_') != -1)",
      "right" : "if (s.indexOf('_') != -1)",
      "info" : "IfStatement[27935-28010]:IfStatement[27935-28010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27961-28010]:Block[27961-28010]"
    }, {
      "left" : "s = StringUtil.replace(s, \"_\", \"\");",
      "right" : "s = StringUtil.replace(s, \"_\", \"\");",
      "info" : "ExpressionStatement[27969-28004]:ExpressionStatement[27969-28004]"
    }, {
      "left" : "if (s.indexOf(MNEMONIC) != -1)",
      "right" : "if (s.indexOf(MNEMONIC) != -1)",
      "info" : "IfStatement[28015-28116]:IfStatement[28015-28116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28046-28116]:Block[28046-28116]"
    }, {
      "left" : "s = StringUtil.replace(s, String.valueOf(MNEMONIC), \"\");",
      "right" : "s = StringUtil.replace(s, String.valueOf(MNEMONIC), \"\");",
      "info" : "ExpressionStatement[28054-28110]:ExpressionStatement[28054-28110]"
    }, {
      "left" : "return s;",
      "right" : "return s;",
      "info" : "ReturnStatement[28121-28130]:ReturnStatement[28121-28130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28199-28455]:Block[28199-28455]"
    }, {
      "left" : "int idx = s.indexOf('&');",
      "right" : "int idx = s.indexOf('&');",
      "info" : "VariableDeclarationStatement[28205-28230]:VariableDeclarationStatement[28205-28230]"
    }, {
      "left" : "if (idx >= 0 && idx != s.length() - 1 && idx == s.lastIndexOf('&'))",
      "right" : "if (idx >= 0 && idx != s.length() - 1 && idx == s.lastIndexOf('&'))",
      "info" : "IfStatement[28235-28314]:IfStatement[28235-28314]"
    }, {
      "left" : "return idx;",
      "right" : "return idx;",
      "info" : "ReturnStatement[28303-28314]:ReturnStatement[28303-28314]"
    }, {
      "left" : "idx = s.indexOf(MNEMONIC);",
      "right" : "idx = s.indexOf(MNEMONIC);",
      "info" : "ExpressionStatement[28320-28346]:ExpressionStatement[28320-28346]"
    }, {
      "left" : "if (idx >= 0 && idx != s.length() - 1 && idx == s.lastIndexOf(MNEMONIC))",
      "right" : "if (idx >= 0 && idx != s.length() - 1 && idx == s.lastIndexOf(MNEMONIC))",
      "info" : "IfStatement[28351-28435]:IfStatement[28351-28435]"
    }, {
      "left" : "return idx;",
      "right" : "return idx;",
      "info" : "ReturnStatement[28424-28435]:ReturnStatement[28424-28435]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[28441-28451]:ReturnStatement[28441-28451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28525-28585]:Block[28525-28585]"
    }, {
      "left" : "return BundleBase.replaceMnemonicAmpersand(value);",
      "right" : "return BundleBase.replaceMnemonicAmpersand(value);",
      "info" : "ReturnStatement[28531-28581]:ReturnStatement[28531-28581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28636-28698]:Block[28636-28698]"
    }, {
      "left" : "return UIManager.getColor(\"TableHeader.background\");",
      "right" : "return UIManager.getColor(\"TableHeader.background\");",
      "info" : "ReturnStatement[28642-28694]:ReturnStatement[28642-28694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28746-28805]:Block[28746-28805]"
    }, {
      "left" : "return UIManager.getColor(\"Tree.textForeground\");",
      "right" : "return UIManager.getColor(\"Tree.textForeground\");",
      "info" : "ReturnStatement[28752-28801]:ReturnStatement[28752-28801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28858-29175]:Block[28858-29175]"
    }, {
      "left" : "if (isUnderNimbusLookAndFeel())",
      "right" : "if (isUnderNimbusLookAndFeel())",
      "info" : "IfStatement[28864-29112]:IfStatement[28864-29112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28896-29112]:Block[28896-29112]"
    }, {
      "left" : "Color color = UIManager.getColor(\"Tree.selectionBackground\");",
      "right" : "Color color = UIManager.getColor(\"Tree.selectionBackground\");",
      "info" : "VariableDeclarationStatement[28904-28965]:VariableDeclarationStatement[28904-28965]"
    }, {
      "left" : "if (color != null)",
      "right" : "if (color != null)",
      "info" : "IfStatement[28972-29004]:IfStatement[28972-29004]"
    }, {
      "left" : "return color;",
      "right" : "return color;",
      "info" : "ReturnStatement[28991-29004]:ReturnStatement[28991-29004]"
    }, {
      "left" : "color = UIManager.getColor(\"nimbusSelectionBackground\");",
      "right" : "color = UIManager.getColor(\"nimbusSelectionBackground\");",
      "info" : "ExpressionStatement[29011-29067]:ExpressionStatement[29011-29067]"
    }, {
      "left" : "if (color != null)",
      "right" : "if (color != null)",
      "info" : "IfStatement[29074-29106]:IfStatement[29074-29106]"
    }, {
      "left" : "return color;",
      "right" : "return color;",
      "info" : "ReturnStatement[29093-29106]:ReturnStatement[29093-29106]"
    }, {
      "left" : "return UIManager.getColor(\"Tree.selectionBackground\");",
      "right" : "return UIManager.getColor(\"Tree.selectionBackground\");",
      "info" : "ReturnStatement[29117-29171]:ReturnStatement[29117-29171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29223-29282]:Block[29223-29282]"
    }, {
      "left" : "return UIManager.getColor(\"Tree.textBackground\");",
      "right" : "return UIManager.getColor(\"Tree.textBackground\");",
      "info" : "ReturnStatement[29229-29278]:ReturnStatement[29229-29278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29335-29538]:Block[29335-29538]"
    }, {
      "left" : "final Color color = UIManager.getColor(\"List.selectionForeground\");",
      "right" : "final Color color = UIManager.getColor(\"List.selectionForeground\");",
      "info" : "VariableDeclarationStatement[29341-29408]:VariableDeclarationStatement[29341-29408]"
    }, {
      "left" : "if (color == null)",
      "right" : "if (color == null)",
      "info" : "IfStatement[29413-29516]:IfStatement[29413-29516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29432-29516]:Block[29432-29516]"
    }, {
      "left" : "return UIManager.getColor(\"List[Selected].textForeground\");",
      "right" : "return UIManager.getColor(\"List[Selected].textForeground\");",
      "info" : "ReturnStatement[29440-29499]:ReturnStatement[29440-29499]"
    }, {
      "left" : "return color;",
      "right" : "return color;",
      "info" : "ReturnStatement[29521-29534]:ReturnStatement[29521-29534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29588-29644]:Block[29588-29644]"
    }, {
      "left" : "return UIManager.getColor(\"field.foreground\");",
      "right" : "return UIManager.getColor(\"field.foreground\");",
      "info" : "ReturnStatement[29594-29640]:ReturnStatement[29594-29640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29698-30030]:Block[29698-30030]"
    }, {
      "left" : "if (isUnderNimbusLookAndFeel())",
      "right" : "if (isUnderNimbusLookAndFeel())",
      "info" : "IfStatement[29704-29966]:IfStatement[29704-29966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29736-29966]:Block[29736-29966]"
    }, {
      "left" : "Color color = UIManager.getColor(\"Table[Enabled+Selected].textBackground\");",
      "right" : "Color color = UIManager.getColor(\"Table[Enabled+Selected].textBackground\");",
      "info" : "VariableDeclarationStatement[29744-29819]:VariableDeclarationStatement[29744-29819]"
    }, {
      "left" : "if (color != null)",
      "right" : "if (color != null)",
      "info" : "IfStatement[29826-29858]:IfStatement[29826-29858]"
    }, {
      "left" : "return color;",
      "right" : "return color;",
      "info" : "ReturnStatement[29845-29858]:ReturnStatement[29845-29858]"
    }, {
      "left" : "color = UIManager.getColor(\"nimbusSelectionBackground\");",
      "right" : "color = UIManager.getColor(\"nimbusSelectionBackground\");",
      "info" : "ExpressionStatement[29865-29921]:ExpressionStatement[29865-29921]"
    }, {
      "left" : "if (color != null)",
      "right" : "if (color != null)",
      "info" : "IfStatement[29928-29960]:IfStatement[29928-29960]"
    }, {
      "left" : "return color;",
      "right" : "return color;",
      "info" : "ReturnStatement[29947-29960]:ReturnStatement[29947-29960]"
    }, {
      "left" : "return UIManager.getColor(\"Table.selectionBackground\");",
      "right" : "return UIManager.getColor(\"Table.selectionBackground\");",
      "info" : "ReturnStatement[29971-30026]:ReturnStatement[29971-30026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30075-30129]:Block[30075-30129]"
    }, {
      "left" : "return UIManager.getColor(\"textActiveText\");",
      "right" : "return UIManager.getColor(\"textActiveText\");",
      "info" : "ReturnStatement[30081-30125]:ReturnStatement[30081-30125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30176-30232]:Block[30176-30232]"
    }, {
      "left" : "return UIManager.getColor(\"textInactiveText\");",
      "right" : "return UIManager.getColor(\"textInactiveText\");",
      "info" : "ReturnStatement[30182-30228]:ReturnStatement[30182-30228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30288-30478]:Block[30288-30478]"
    }, {
      "left" : "float[] hsl = Color.RGBtoHSB(c.getRed(), c.getGreen(), c.getBlue(), new float[3]);",
      "right" : "float[] hsl = Color.RGBtoHSB(c.getRed(), c.getGreen(), c.getBlue(), new float[3]);",
      "info" : "VariableDeclarationStatement[30294-30376]:VariableDeclarationStatement[30294-30376]"
    }, {
      "left" : "return new Color(Color.HSBtoRGB(hsl[0], hsl[1], hsl[2] - .08f > 0 ? hsl[2] - .08f : hsl[2]));",
      "right" : "return new Color(Color.HSBtoRGB(hsl[0], hsl[1], hsl[2] - .08f > 0 ? hsl[2] - .08f : hsl[2]));",
      "info" : "ReturnStatement[30381-30474]:ReturnStatement[30381-30474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30624-30666]:Block[30624-30666]"
    }, {
      "left" : "return getTextFieldBackground();",
      "right" : "return getTextFieldBackground();",
      "info" : "ReturnStatement[30630-30662]:ReturnStatement[30630-30662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30728-30796]:Block[30728-30796]"
    }, {
      "left" : "return UIManager.getColor(\"TextField.inactiveBackground\");",
      "right" : "return UIManager.getColor(\"TextField.inactiveBackground\");",
      "info" : "ReturnStatement[30734-30792]:ReturnStatement[30734-30792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30833-30881]:Block[30833-30881]"
    }, {
      "left" : "return UIManager.getFont(\"Tree.font\");",
      "right" : "return UIManager.getFont(\"Tree.font\");",
      "info" : "ReturnStatement[30839-30877]:ReturnStatement[30839-30877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30918-30966]:Block[30918-30966]"
    }, {
      "left" : "return UIManager.getFont(\"List.font\");",
      "right" : "return UIManager.getFont(\"List.font\");",
      "info" : "ReturnStatement[30924-30962]:ReturnStatement[30924-30962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31019-31083]:Block[31019-31083]"
    }, {
      "left" : "return UIManager.getColor(\"Tree.selectionForeground\");",
      "right" : "return UIManager.getColor(\"Tree.selectionForeground\");",
      "info" : "ReturnStatement[31025-31079]:ReturnStatement[31025-31079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31218-31258]:Block[31218-31258]"
    }, {
      "left" : "return getInactiveTextColor();",
      "right" : "return getInactiveTextColor();",
      "info" : "ReturnStatement[31224-31254]:ReturnStatement[31224-31254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31341-31463]:Block[31341-31463]"
    }, {
      "left" : "LookAndFeel.installColorsAndFont(contentPane, \"PopupMenu.background\", \"PopupMenu.foreground\", \"PopupMenu.font\");",
      "right" : "LookAndFeel.installColorsAndFont(contentPane, \"PopupMenu.background\", \"PopupMenu.foreground\", \"PopupMenu.font\");",
      "info" : "ExpressionStatement[31347-31459]:ExpressionStatement[31347-31459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31539-31608]:Block[31539-31608]"
    }, {
      "left" : "LookAndFeel.installBorder(contentPane, \"PopupMenu.border\");",
      "right" : "LookAndFeel.installBorder(contentPane, \"PopupMenu.border\");",
      "info" : "ExpressionStatement[31545-31604]:ExpressionStatement[31545-31604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31662-31727]:Block[31662-31727]"
    }, {
      "left" : "return UIManager.getColor(\"Tree.selectionBorderColor\");",
      "right" : "return UIManager.getColor(\"Tree.selectionBorderColor\");",
      "info" : "ReturnStatement[31668-31723]:ReturnStatement[31668-31723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31775-31834]:Block[31775-31834]"
    }, {
      "left" : "return UIManager.getInt(\"Tree.rightChildIndent\");",
      "right" : "return UIManager.getInt(\"Tree.rightChildIndent\");",
      "info" : "ReturnStatement[31781-31830]:ReturnStatement[31781-31830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31881-31939]:Block[31881-31939]"
    }, {
      "left" : "return UIManager.getInt(\"Tree.leftChildIndent\");",
      "right" : "return UIManager.getInt(\"Tree.leftChildIndent\");",
      "info" : "ReturnStatement[31887-31935]:ReturnStatement[31887-31935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31986-32044]:Block[31986-32044]"
    }, {
      "left" : "return UIManager.getColor(\"ToolTip.background\");",
      "right" : "return UIManager.getColor(\"ToolTip.background\");",
      "info" : "ReturnStatement[31992-32040]:ReturnStatement[31992-32040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32091-32149]:Block[32091-32149]"
    }, {
      "left" : "return UIManager.getColor(\"ToolTip.foreground\");",
      "right" : "return UIManager.getColor(\"ToolTip.foreground\");",
      "info" : "ReturnStatement[32097-32145]:ReturnStatement[32097-32145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32205-32272]:Block[32205-32272]"
    }, {
      "left" : "return UIManager.getColor(\"ComboBox.disabledForeground\");",
      "right" : "return UIManager.getColor(\"ComboBox.disabledForeground\");",
      "info" : "ReturnStatement[32211-32268]:ReturnStatement[32211-32268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32328-32395]:Block[32328-32395]"
    }, {
      "left" : "return UIManager.getColor(\"ComboBox.disabledBackground\");",
      "right" : "return UIManager.getColor(\"ComboBox.disabledBackground\");",
      "info" : "ReturnStatement[32334-32391]:ReturnStatement[32334-32391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32442-32495]:Block[32442-32495]"
    }, {
      "left" : "return UIManager.getColor(\"Button.select\");",
      "right" : "return UIManager.getColor(\"Button.select\");",
      "info" : "ReturnStatement[32448-32491]:ReturnStatement[32448-32491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32580-32660]:Block[32580-32660]"
    }, {
      "left" : "return (Integer)UIManager.get(propertyPrefix + \".maxGutterIconWidth\");",
      "right" : "return (Integer)UIManager.get(propertyPrefix + \".maxGutterIconWidth\");",
      "info" : "ReturnStatement[32586-32656]:ReturnStatement[32586-32656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32716-32783]:Block[32716-32783]"
    }, {
      "left" : "return UIManager.getColor(\"MenuItem.disabledForeground\");",
      "right" : "return UIManager.getColor(\"MenuItem.disabledForeground\");",
      "info" : "ReturnStatement[32722-32779]:ReturnStatement[32722-32779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32846-32908]:Block[32846-32908]"
    }, {
      "left" : "return UIManager.get(\"MenuItem.disabledForeground\");",
      "right" : "return UIManager.get(\"MenuItem.disabledForeground\");",
      "info" : "ReturnStatement[32852-32904]:ReturnStatement[32852-32904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32985-33055]:Block[32985-33055]"
    }, {
      "left" : "return c.getClientProperty(\"TabbedPane.paintContentBorder\");",
      "right" : "return c.getClientProperty(\"TabbedPane.paintContentBorder\");",
      "info" : "ReturnStatement[32991-33051]:ReturnStatement[32991-33051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33108-33172]:Block[33108-33172]"
    }, {
      "left" : "return UIManager.getBoolean(\"Menu.crossMenuMnemonic\");",
      "right" : "return UIManager.getBoolean(\"Menu.crossMenuMnemonic\");",
      "info" : "ReturnStatement[33114-33168]:ReturnStatement[33114-33168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33217-33411]:Block[33217-33411]"
    }, {
      "left" : "return isUnderGTKLookAndFeel() ? getTreeTextBackground() : UIManager.getColor(\"Table.background\");",
      "right" : "return isUnderGTKLookAndFeel() ? getTreeTextBackground() : UIManager.getColor(\"Table.background\");",
      "info" : "ReturnStatement[33309-33407]:ReturnStatement[33309-33407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33480-33563]:Block[33480-33563]"
    }, {
      "left" : "return isSelected ? getTableSelectionBackground() : getTableBackground();",
      "right" : "return isSelected ? getTableSelectionBackground() : getTableBackground();",
      "info" : "ReturnStatement[33486-33559]:ReturnStatement[33486-33559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33617-33801]:Block[33617-33801]"
    }, {
      "left" : "if (isUnderNimbusLookAndFeel())",
      "right" : "if (isUnderNimbusLookAndFeel())",
      "info" : "IfStatement[33623-33737]:IfStatement[33623-33737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33655-33737]:Block[33655-33737]"
    }, {
      "left" : "return UIManager.getColor(\"Table[Enabled+Selected].textForeground\");",
      "right" : "return UIManager.getColor(\"Table[Enabled+Selected].textForeground\");",
      "info" : "ReturnStatement[33663-33731]:ReturnStatement[33663-33731]"
    }, {
      "left" : "return UIManager.getColor(\"Table.selectionForeground\");",
      "right" : "return UIManager.getColor(\"Table.selectionForeground\");",
      "info" : "ReturnStatement[33742-33797]:ReturnStatement[33742-33797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33846-33902]:Block[33846-33902]"
    }, {
      "left" : "return UIManager.getColor(\"Table.foreground\");",
      "right" : "return UIManager.getColor(\"Table.foreground\");",
      "info" : "ReturnStatement[33852-33898]:ReturnStatement[33852-33898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33971-34054]:Block[33971-34054]"
    }, {
      "left" : "return isSelected ? getTableSelectionForeground() : getTableForeground();",
      "right" : "return isSelected ? getTableSelectionForeground() : getTableForeground();",
      "info" : "ReturnStatement[33977-34050]:ReturnStatement[33977-34050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34098-34153]:Block[34098-34153]"
    }, {
      "left" : "return UIManager.getColor(\"Table.gridColor\");",
      "right" : "return UIManager.getColor(\"Table.gridColor\");",
      "info" : "ReturnStatement[34104-34149]:ReturnStatement[34104-34149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34197-34624]:Block[34197-34624]"
    }, {
      "left" : "if (isUnderNimbusLookAndFeel())",
      "right" : "if (isUnderNimbusLookAndFeel())",
      "info" : "IfStatement[34203-34432]:IfStatement[34203-34432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34235-34432]:Block[34235-34432]"
    }, {
      "left" : "final Color color = UIManager.getColor(\"List.background\");",
      "right" : "final Color color = UIManager.getColor(\"List.background\");",
      "info" : "VariableDeclarationStatement[34243-34301]:VariableDeclarationStatement[34243-34301]"
    }, {
      "left" : "return new Color(color.getRed(), color.getGreen(), color.getBlue(), color.getAlpha());",
      "right" : "return new Color(color.getRed(), color.getGreen(), color.getBlue(), color.getAlpha());",
      "info" : "ReturnStatement[34340-34426]:ReturnStatement[34340-34426]"
    }, {
      "left" : "return isUnderGTKLookAndFeel() ? getTreeTextBackground() : UIManager.getColor(\"List.background\");",
      "right" : "return isUnderGTKLookAndFeel() ? getTreeTextBackground() : UIManager.getColor(\"List.background\");",
      "info" : "ReturnStatement[34523-34620]:ReturnStatement[34523-34620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34686-34767]:Block[34686-34767]"
    }, {
      "left" : "return isSelected ? getListSelectionBackground() : getListBackground();",
      "right" : "return isSelected ? getListSelectionBackground() : getListBackground();",
      "info" : "ReturnStatement[34692-34763]:ReturnStatement[34692-34763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34811-34866]:Block[34811-34866]"
    }, {
      "left" : "return UIManager.getColor(\"List.foreground\");",
      "right" : "return UIManager.getColor(\"List.foreground\");",
      "info" : "ReturnStatement[34817-34862]:ReturnStatement[34817-34862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34928-35009]:Block[34928-35009]"
    }, {
      "left" : "return isSelected ? getListSelectionForeground() : getListForeground();",
      "right" : "return isSelected ? getListSelectionForeground() : getListForeground();",
      "info" : "ReturnStatement[34934-35005]:ReturnStatement[34934-35005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35054-35110]:Block[35054-35110]"
    }, {
      "left" : "return UIManager.getColor(\"Panel.background\");",
      "right" : "return UIManager.getColor(\"Panel.background\");",
      "info" : "ReturnStatement[35060-35106]:ReturnStatement[35060-35106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35154-35209]:Block[35154-35209]"
    }, {
      "left" : "return UIManager.getColor(\"Tree.background\");",
      "right" : "return UIManager.getColor(\"Tree.background\");",
      "info" : "ReturnStatement[35160-35205]:ReturnStatement[35160-35205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35253-35308]:Block[35253-35308]"
    }, {
      "left" : "return UIManager.getColor(\"Tree.foreground\");",
      "right" : "return UIManager.getColor(\"Tree.foreground\");",
      "info" : "ReturnStatement[35259-35304]:ReturnStatement[35259-35304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35362-35436]:Block[35362-35436]"
    }, {
      "left" : "return UIManager.getColor(TABLE_FOCUS_CELL_BACKGROUND_PROPERTY);",
      "right" : "return UIManager.getColor(TABLE_FOCUS_CELL_BACKGROUND_PROPERTY);",
      "info" : "ReturnStatement[35368-35432]:ReturnStatement[35368-35432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35489-35674]:Block[35489-35674]"
    }, {
      "left" : "if (isUnderNimbusLookAndFeel())",
      "right" : "if (isUnderNimbusLookAndFeel())",
      "info" : "IfStatement[35495-35611]:IfStatement[35495-35611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35527-35611]:Block[35527-35611]"
    }, {
      "left" : "return UIManager.getColor(\"List[Selected].textBackground\");",
      "right" : "return UIManager.getColor(\"List[Selected].textBackground\");",
      "info" : "ReturnStatement[35535-35594]:ReturnStatement[35535-35594]"
    }, {
      "left" : "return UIManager.getColor(\"List.selectionBackground\");",
      "right" : "return UIManager.getColor(\"List.selectionBackground\");",
      "info" : "ReturnStatement[35616-35670]:ReturnStatement[35616-35670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35736-35815]:Block[35736-35815]"
    }, {
      "left" : "return new JBColor(UNFOCUSED_SELECTION_COLOR, new Color(13, 41, 62));",
      "right" : "return new JBColor(UNFOCUSED_SELECTION_COLOR, new Color(13, 41, 62));",
      "info" : "ReturnStatement[35742-35811]:ReturnStatement[35742-35811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35883-35979]:Block[35883-35979]"
    }, {
      "left" : "return focused ? getTreeSelectionBackground() : getTreeUnfocusedSelectionBackground();",
      "right" : "return focused ? getTreeSelectionBackground() : getTreeUnfocusedSelectionBackground();",
      "info" : "ReturnStatement[35889-35975]:ReturnStatement[35889-35975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36041-36210]:Block[36041-36210]"
    }, {
      "left" : "Color background = getTreeTextBackground();",
      "right" : "Color background = getTreeTextBackground();",
      "info" : "VariableDeclarationStatement[36047-36090]:VariableDeclarationStatement[36047-36090]"
    }, {
      "left" : "return ColorUtil.isDark(background) ? new JBColor(Gray._30, new Color(13, 41, 62)) : UNFOCUSED_SELECTION_COLOR;",
      "right" : "return ColorUtil.isDark(background) ? new JBColor(Gray._30, new Color(13, 41, 62)) : UNFOCUSED_SELECTION_COLOR;",
      "info" : "ReturnStatement[36095-36206]:ReturnStatement[36095-36206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36259-36319]:Block[36259-36319]"
    }, {
      "left" : "return UIManager.getColor(\"TextField.foreground\");",
      "right" : "return UIManager.getColor(\"TextField.foreground\");",
      "info" : "ReturnStatement[36265-36315]:ReturnStatement[36265-36315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36368-36500]:Block[36368-36500]"
    }, {
      "left" : "return isUnderGTKLookAndFeel() ? UIManager.getColor(\"EditorPane.background\") : UIManager.getColor(\"TextField.background\");",
      "right" : "return isUnderGTKLookAndFeel() ? UIManager.getColor(\"EditorPane.background\") : UIManager.getColor(\"TextField.background\");",
      "info" : "ReturnStatement[36374-36496]:ReturnStatement[36374-36496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36539-36589]:Block[36539-36589]"
    }, {
      "left" : "return UIManager.getFont(\"Button.font\");",
      "right" : "return UIManager.getFont(\"Button.font\");",
      "info" : "ReturnStatement[36545-36585]:ReturnStatement[36545-36585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36629-36680]:Block[36629-36680]"
    }, {
      "left" : "return UIManager.getFont(\"ToolTip.font\");",
      "right" : "return UIManager.getFont(\"ToolTip.font\");",
      "info" : "ReturnStatement[36635-36676]:ReturnStatement[36635-36676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36730-36791]:Block[36730-36791]"
    }, {
      "left" : "return UIManager.getColor(\"TabbedPane.background\");",
      "right" : "return UIManager.getColor(\"TabbedPane.background\");",
      "info" : "ReturnStatement[36736-36787]:ReturnStatement[36736-36787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36875-36954]:Block[36875-36954]"
    }, {
      "left" : "slider.putClientProperty(\"JSlider.isFilled\", Boolean.valueOf(value));",
      "right" : "slider.putClientProperty(\"JSlider.isFilled\", Boolean.valueOf(value));",
      "info" : "ExpressionStatement[36881-36950]:ExpressionStatement[36881-36950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37003-37063]:Block[37003-37063]"
    }, {
      "left" : "return UIManager.getColor(\"Label.textForeground\");",
      "right" : "return UIManager.getColor(\"Label.textForeground\");",
      "info" : "ReturnStatement[37009-37059]:ReturnStatement[37009-37059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37105-37152]:Block[37105-37152]"
    }, {
      "left" : "return UIManager.getColor(\"control\");",
      "right" : "return UIManager.getColor(\"control\");",
      "info" : "ReturnStatement[37111-37148]:ReturnStatement[37111-37148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37202-37263]:Block[37202-37263]"
    }, {
      "left" : "return UIManager.getFont(\"OptionPane.messageFont\");",
      "right" : "return UIManager.getFont(\"OptionPane.messageFont\");",
      "info" : "ReturnStatement[37208-37259]:ReturnStatement[37208-37259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37300-37348]:Block[37300-37348]"
    }, {
      "left" : "return UIManager.getFont(\"Menu.font\");",
      "right" : "return UIManager.getFont(\"Menu.font\");",
      "info" : "ReturnStatement[37306-37344]:ReturnStatement[37306-37344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37397-37457]:Block[37397-37457]"
    }, {
      "left" : "return UIManager.getColor(\"Separator.foreground\");",
      "right" : "return UIManager.getColor(\"Separator.foreground\");",
      "info" : "ReturnStatement[37403-37453]:ReturnStatement[37403-37453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37506-37566]:Block[37506-37566]"
    }, {
      "left" : "return UIManager.getColor(\"Separator.background\");",
      "right" : "return UIManager.getColor(\"Separator.background\");",
      "info" : "ReturnStatement[37512-37562]:ReturnStatement[37512-37562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37611-37667]:Block[37611-37667]"
    }, {
      "left" : "return UIManager.getColor(\"Separator.shadow\");",
      "right" : "return UIManager.getColor(\"Separator.shadow\");",
      "info" : "ReturnStatement[37617-37663]:ReturnStatement[37617-37663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37715-37774]:Block[37715-37774]"
    }, {
      "left" : "return UIManager.getColor(\"Separator.highlight\");",
      "right" : "return UIManager.getColor(\"Separator.highlight\");",
      "info" : "ReturnStatement[37721-37770]:ReturnStatement[37721-37770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37829-37883]:Block[37829-37883]"
    }, {
      "left" : "return UIManager.getColor(\"nimbusBlueGrey\");",
      "right" : "return UIManager.getColor(\"nimbusBlueGrey\");",
      "info" : "ReturnStatement[37835-37879]:ReturnStatement[37835-37879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37927-38311]:Block[37927-38311]"
    }, {
      "left" : "Color separatorColor = getSeparatorForeground();",
      "right" : "Color separatorColor = getSeparatorForeground();",
      "info" : "VariableDeclarationStatement[37933-37981]:VariableDeclarationStatement[37933-37981]"
    }, {
      "left" : "if (isUnderAlloyLookAndFeel())",
      "right" : "if (isUnderAlloyLookAndFeel())",
      "info" : "IfStatement[37986-38069]:IfStatement[37986-38069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38017-38069]:Block[38017-38069]"
    }, {
      "left" : "separatorColor = getSeparatorShadow();",
      "right" : "separatorColor = getSeparatorShadow();",
      "info" : "ExpressionStatement[38025-38063]:ExpressionStatement[38025-38063]"
    }, {
      "left" : "if (isUnderNimbusLookAndFeel())",
      "right" : "if (isUnderNimbusLookAndFeel())",
      "info" : "IfStatement[38074-38168]:IfStatement[38074-38168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38106-38168]:Block[38106-38168]"
    }, {
      "left" : "separatorColor = getSeparatorColorUnderNimbus();",
      "right" : "separatorColor = getSeparatorColorUnderNimbus();",
      "info" : "ExpressionStatement[38114-38162]:ExpressionStatement[38114-38162]"
    }, {
      "left" : "if (isUnderGTKLookAndFeel())",
      "right" : "if (isUnderGTKLookAndFeel())",
      "info" : "IfStatement[38210-38280]:IfStatement[38210-38280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38239-38280]:Block[38239-38280]"
    }, {
      "left" : "separatorColor = Gray._215;",
      "right" : "separatorColor = Gray._215;",
      "info" : "ExpressionStatement[38247-38274]:ExpressionStatement[38247-38274]"
    }, {
      "left" : "return separatorColor;",
      "right" : "return separatorColor;",
      "info" : "ReturnStatement[38285-38307]:ReturnStatement[38285-38307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38371-38442]:Block[38371-38442]"
    }, {
      "left" : "return UIManager.getBorder(\"Table.focusCellHighlightBorder\");",
      "right" : "return UIManager.getBorder(\"Table.focusCellHighlightBorder\");",
      "info" : "ReturnStatement[38377-38438]:ReturnStatement[38377-38438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38522-38589]:Block[38522-38589]"
    }, {
      "left" : "component.putClientProperty(\"JTree.lineStyle\", \"Angled\");",
      "right" : "component.putClientProperty(\"JTree.lineStyle\", \"Angled\");",
      "info" : "ExpressionStatement[38528-38585]:ExpressionStatement[38528-38585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38654-38721]:Block[38654-38721]"
    }, {
      "left" : "component.putClientProperty(\"JTree.lineStyle\", \"Angled\");",
      "right" : "component.putClientProperty(\"JTree.lineStyle\", \"Angled\");",
      "info" : "ExpressionStatement[38660-38717]:ExpressionStatement[38660-38717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38775-38840]:Block[38775-38840]"
    }, {
      "left" : "return UIManager.getColor(\"Table.focusCellForeground\");",
      "right" : "return UIManager.getColor(\"Table.focusCellForeground\");",
      "info" : "ReturnStatement[38781-38836]:ReturnStatement[38781-38836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38974-39012]:Block[38974-39012]"
    }, {
      "left" : "return getPanelBackground();",
      "right" : "return getPanelBackground();",
      "info" : "ReturnStatement[38980-39008]:ReturnStatement[38980-39008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39058-39115]:Block[39058-39115]"
    }, {
      "left" : "return UIManager.getBorder(\"TextField.border\");",
      "right" : "return UIManager.getBorder(\"TextField.border\");",
      "info" : "ReturnStatement[39064-39111]:ReturnStatement[39064-39111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39158-39212]:Block[39158-39212]"
    }, {
      "left" : "return UIManager.getBorder(\"Button.border\");",
      "right" : "return UIManager.getBorder(\"Button.border\");",
      "info" : "ReturnStatement[39164-39208]:ReturnStatement[39164-39208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39261-39371]:Block[39261-39371]"
    }, {
      "left" : "return ObjectUtils.notNull(UIManager.getIcon(\"OptionPane.errorIcon\"), AllIcons.General.ErrorDialog);",
      "right" : "return ObjectUtils.notNull(UIManager.getIcon(\"OptionPane.errorIcon\"), AllIcons.General.ErrorDialog);",
      "info" : "ReturnStatement[39267-39367]:ReturnStatement[39267-39367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39426-39548]:Block[39426-39548]"
    }, {
      "left" : "return ObjectUtils.notNull(UIManager.getIcon(\"OptionPane.informationIcon\"), AllIcons.General.InformationDialog);",
      "right" : "return ObjectUtils.notNull(UIManager.getIcon(\"OptionPane.informationIcon\"), AllIcons.General.InformationDialog);",
      "info" : "ReturnStatement[39432-39544]:ReturnStatement[39432-39544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39600-39716]:Block[39600-39716]"
    }, {
      "left" : "return ObjectUtils.notNull(UIManager.getIcon(\"OptionPane.questionIcon\"), AllIcons.General.QuestionDialog);",
      "right" : "return ObjectUtils.notNull(UIManager.getIcon(\"OptionPane.questionIcon\"), AllIcons.General.QuestionDialog);",
      "info" : "ReturnStatement[39606-39712]:ReturnStatement[39606-39712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39767-39881]:Block[39767-39881]"
    }, {
      "left" : "return ObjectUtils.notNull(UIManager.getIcon(\"OptionPane.warningIcon\"), AllIcons.General.WarningDialog);",
      "right" : "return ObjectUtils.notNull(UIManager.getIcon(\"OptionPane.warningIcon\"), AllIcons.General.WarningDialog);",
      "info" : "ReturnStatement[39773-39877]:ReturnStatement[39773-39877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39932-39985]:Block[39932-39985]"
    }, {
      "left" : "return AllIcons.General.BalloonInformation;",
      "right" : "return AllIcons.General.BalloonInformation;",
      "info" : "ReturnStatement[39938-39981]:ReturnStatement[39938-39981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40032-40081]:Block[40032-40081]"
    }, {
      "left" : "return AllIcons.General.BalloonWarning;",
      "right" : "return AllIcons.General.BalloonWarning;",
      "info" : "ReturnStatement[40038-40077]:ReturnStatement[40038-40077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40126-40173]:Block[40126-40173]"
    }, {
      "left" : "return AllIcons.General.BalloonError;",
      "right" : "return AllIcons.General.BalloonError;",
      "info" : "ReturnStatement[40132-40169]:ReturnStatement[40132-40169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40217-40272]:Block[40217-40272]"
    }, {
      "left" : "return UIManager.getIcon(\"RadioButton.icon\");",
      "right" : "return UIManager.getIcon(\"RadioButton.icon\");",
      "info" : "ReturnStatement[40223-40268]:ReturnStatement[40223-40268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40364-40975]:Block[40364-40975]"
    }, {
      "left" : "boolean white = (selected && focused) || isUnderDarcula();",
      "right" : "boolean white = (selected && focused) || isUnderDarcula();",
      "info" : "VariableDeclarationStatement[40370-40428]:VariableDeclarationStatement[40370-40428]"
    }, {
      "left" : "Icon selectedIcon = getTreeSelectedExpandedIcon();",
      "right" : "Icon selectedIcon = getTreeSelectedExpandedIcon();",
      "info" : "VariableDeclarationStatement[40434-40484]:VariableDeclarationStatement[40434-40484]"
    }, {
      "left" : "Icon notSelectedIcon = getTreeExpandedIcon();",
      "right" : "Icon notSelectedIcon = getTreeExpandedIcon();",
      "info" : "VariableDeclarationStatement[40489-40534]:VariableDeclarationStatement[40489-40534]"
    }, {
      "left" : "int width = Math.max(selectedIcon.getIconWidth(), notSelectedIcon.getIconWidth());",
      "right" : "int width = Math.max(selectedIcon.getIconWidth(), notSelectedIcon.getIconWidth());",
      "info" : "VariableDeclarationStatement[40540-40622]:VariableDeclarationStatement[40540-40622]"
    }, {
      "left" : "int height = Math.max(selectedIcon.getIconWidth(), notSelectedIcon.getIconWidth());",
      "right" : "int height = Math.max(selectedIcon.getIconWidth(), notSelectedIcon.getIconWidth());",
      "info" : "VariableDeclarationStatement[40627-40710]:VariableDeclarationStatement[40627-40710]"
    }, {
      "left" : "return new CenteredIcon(expanded ? (white ? getTreeSelectedExpandedIcon() : getTreeExpandedIcon())\n                                     : (white ? getTreeSelectedCollapsedIcon() : getTreeCollapsedIcon()),\n                            width, height, false);",
      "right" : "return new CenteredIcon(expanded ? (white ? getTreeSelectedExpandedIcon() : getTreeExpandedIcon())\n                                     : (white ? getTreeSelectedCollapsedIcon() : getTreeCollapsedIcon()),\n                            width, height, false);",
      "info" : "ReturnStatement[40716-40971]:ReturnStatement[40716-40971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41021-41078]:Block[41021-41078]"
    }, {
      "left" : "return UIManager.getIcon(\"Tree.collapsedIcon\");",
      "right" : "return UIManager.getIcon(\"Tree.collapsedIcon\");",
      "info" : "ReturnStatement[41027-41074]:ReturnStatement[41027-41074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41123-41179]:Block[41123-41179]"
    }, {
      "left" : "return UIManager.getIcon(\"Tree.expandedIcon\");",
      "right" : "return UIManager.getIcon(\"Tree.expandedIcon\");",
      "info" : "ReturnStatement[41129-41175]:ReturnStatement[41129-41175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41232-41307]:Block[41232-41307]"
    }, {
      "left" : "return expanded ? getTreeExpandedIcon() : getTreeCollapsedIcon();",
      "right" : "return expanded ? getTreeExpandedIcon() : getTreeCollapsedIcon();",
      "info" : "ReturnStatement[41238-41303]:ReturnStatement[41238-41303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41361-41583]:Block[41361-41583]"
    }, {
      "left" : "return isUnderAquaBasedLookAndFeel() || isUnderNimbusLookAndFeel() || isUnderGTKLookAndFeel() || isUnderDarcula() || isUnderIntelliJLaF()\n           ? AllIcons.Mac.Tree_white_right_arrow : getTreeCollapsedIcon();",
      "right" : "return isUnderAquaBasedLookAndFeel() || isUnderNimbusLookAndFeel() || isUnderGTKLookAndFeel() || isUnderDarcula() || isUnderIntelliJLaF()\n           ? AllIcons.Mac.Tree_white_right_arrow : getTreeCollapsedIcon();",
      "info" : "ReturnStatement[41367-41579]:ReturnStatement[41367-41579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41636-41856]:Block[41636-41856]"
    }, {
      "left" : "return isUnderAquaBasedLookAndFeel() || isUnderNimbusLookAndFeel() || isUnderGTKLookAndFeel() || isUnderDarcula() || isUnderIntelliJLaF()\n           ? AllIcons.Mac.Tree_white_down_arrow : getTreeExpandedIcon();",
      "right" : "return isUnderAquaBasedLookAndFeel() || isUnderNimbusLookAndFeel() || isUnderGTKLookAndFeel() || isUnderDarcula() || isUnderIntelliJLaF()\n           ? AllIcons.Mac.Tree_white_down_arrow : getTreeExpandedIcon();",
      "info" : "ReturnStatement[41642-41852]:ReturnStatement[41642-41852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41908-41971]:Block[41908-41971]"
    }, {
      "left" : "return UIManager.getBorder(\"TableHeader.cellBorder\");",
      "right" : "return UIManager.getBorder(\"TableHeader.cellBorder\");",
      "info" : "ReturnStatement[41914-41967]:ReturnStatement[41914-41967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42012-42058]:Block[42012-42058]"
    }, {
      "left" : "return UIManager.getColor(\"window\");",
      "right" : "return UIManager.getColor(\"window\");",
      "info" : "ReturnStatement[42018-42054]:ReturnStatement[42018-42054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42106-42165]:Block[42106-42165]"
    }, {
      "left" : "return UIManager.getColor(\"TextArea.foreground\");",
      "right" : "return UIManager.getColor(\"TextArea.foreground\");",
      "info" : "ReturnStatement[42112-42161]:ReturnStatement[42112-42161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42215-42276]:Block[42215-42276]"
    }, {
      "left" : "return UIManager.getColor(\"OptionPane.background\");",
      "right" : "return UIManager.getColor(\"OptionPane.background\");",
      "info" : "ReturnStatement[42221-42272]:ReturnStatement[42221-42272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42376-42448]:Block[42376-42448]"
    }, {
      "left" : "return UIManager.getLookAndFeel().getName().contains(\"Alloy\");",
      "right" : "return UIManager.getLookAndFeel().getName().contains(\"Alloy\");",
      "info" : "ReturnStatement[42382-42444]:ReturnStatement[42382-42444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42552-42652]:Block[42552-42652]"
    }, {
      "left" : "return isUnderAlloyLookAndFeel() && UIManager.getLookAndFeel().getName().contains(\"IDEA\");",
      "right" : "return isUnderAlloyLookAndFeel() && UIManager.getLookAndFeel().getName().contains(\"IDEA\");",
      "info" : "ReturnStatement[42558-42648]:ReturnStatement[42558-42648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42754-42850]:Block[42754-42850]"
    }, {
      "left" : "return SystemInfo.isWindows && UIManager.getLookAndFeel().getName().equals(\"Windows\");",
      "right" : "return SystemInfo.isWindows && UIManager.getLookAndFeel().getName().equals(\"Windows\");",
      "info" : "ReturnStatement[42760-42846]:ReturnStatement[42760-42846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42959-43039]:Block[42959-43039]"
    }, {
      "left" : "return UIManager.getLookAndFeel().getName().equals(\"Windows Classic\");",
      "right" : "return UIManager.getLookAndFeel().getName().equals(\"Windows Classic\");",
      "info" : "ReturnStatement[42965-43035]:ReturnStatement[42965-43035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43140-43213]:Block[43140-43213]"
    }, {
      "left" : "return UIManager.getLookAndFeel().getName().contains(\"Nimbus\");",
      "right" : "return UIManager.getLookAndFeel().getName().contains(\"Nimbus\");",
      "info" : "ReturnStatement[43146-43209]:ReturnStatement[43146-43209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43312-43407]:Block[43312-43407]"
    }, {
      "left" : "return SystemInfo.isMac && UIManager.getLookAndFeel().getName().contains(\"Mac OS X\");",
      "right" : "return SystemInfo.isMac && UIManager.getLookAndFeel().getName().contains(\"Mac OS X\");",
      "info" : "ReturnStatement[43318-43403]:ReturnStatement[43318-43403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43510-43585]:Block[43510-43585]"
    }, {
      "left" : "return UIManager.getLookAndFeel().getName().contains(\"JGoodies\");",
      "right" : "return UIManager.getLookAndFeel().getName().contains(\"JGoodies\");",
      "info" : "ReturnStatement[43516-43581]:ReturnStatement[43516-43581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43689-43773]:Block[43689-43773]"
    }, {
      "left" : "return SystemInfo.isMac && (isUnderAquaLookAndFeel() || isUnderDarcula());",
      "right" : "return SystemInfo.isMac && (isUnderAquaLookAndFeel() || isUnderDarcula());",
      "info" : "ReturnStatement[43695-43769]:ReturnStatement[43695-43769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43864-43938]:Block[43864-43938]"
    }, {
      "left" : "return UIManager.getLookAndFeel().getName().contains(\"Darcula\");",
      "right" : "return UIManager.getLookAndFeel().getName().contains(\"Darcula\");",
      "info" : "ReturnStatement[43870-43934]:ReturnStatement[43870-43934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44033-44108]:Block[44033-44108]"
    }, {
      "left" : "return UIManager.getLookAndFeel().getName().contains(\"IntelliJ\");",
      "right" : "return UIManager.getLookAndFeel().getName().contains(\"IntelliJ\");",
      "info" : "ReturnStatement[44039-44104]:ReturnStatement[44039-44104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44206-44300]:Block[44206-44300]"
    }, {
      "left" : "return SystemInfo.isXWindow && UIManager.getLookAndFeel().getName().contains(\"GTK\");",
      "right" : "return SystemInfo.isXWindow && UIManager.getLookAndFeel().getName().contains(\"GTK\");",
      "info" : "ReturnStatement[44212-44296]:ReturnStatement[44212-44296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44567-45037]:Block[44567-45037]"
    }, {
      "left" : "final LookAndFeel laf = UIManager.getLookAndFeel();",
      "right" : "final LookAndFeel laf = UIManager.getLookAndFeel();",
      "info" : "VariableDeclarationStatement[44573-44624]:VariableDeclarationStatement[44573-44624]"
    }, {
      "left" : "if (laf != null && \"GTKLookAndFeel\".equals(laf.getClass().getSimpleName()))",
      "right" : "if (laf != null && \"GTKLookAndFeel\".equals(laf.getClass().getSimpleName()))",
      "info" : "IfStatement[44629-45016]:IfStatement[44629-45016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44705-45016]:Block[44705-45016]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[44713-45010]:TryStatement[44713-45010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44717-44968]:Block[44717-44968]"
    }, {
      "left" : "final Method method = laf.getClass().getDeclaredMethod(\"getGtkThemeName\");",
      "right" : "final Method method = laf.getClass().getDeclaredMethod(\"getGtkThemeName\");",
      "info" : "VariableDeclarationStatement[44727-44801]:VariableDeclarationStatement[44727-44801]"
    }, {
      "left" : "method.setAccessible(true);",
      "right" : "method.setAccessible(true);",
      "info" : "ExpressionStatement[44810-44837]:ExpressionStatement[44810-44837]"
    }, {
      "left" : "final Object theme = method.invoke(laf);",
      "right" : "final Object theme = method.invoke(laf);",
      "info" : "VariableDeclarationStatement[44846-44886]:VariableDeclarationStatement[44846-44886]"
    }, {
      "left" : "if (theme != null)",
      "right" : "if (theme != null)",
      "info" : "IfStatement[44895-44960]:IfStatement[44895-44960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44914-44960]:Block[44914-44960]"
    }, {
      "left" : "return theme.toString();",
      "right" : "return theme.toString();",
      "info" : "ReturnStatement[44926-44950]:ReturnStatement[44926-44950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45001-45010]:Block[45001-45010]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[45021-45033]:ReturnStatement[45021-45033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45133-45388]:Block[45133-45388]"
    }, {
      "left" : "final String gtkTheme = getGtkThemeName();",
      "right" : "final String gtkTheme = getGtkThemeName();",
      "info" : "VariableDeclarationStatement[45139-45181]:VariableDeclarationStatement[45139-45181]"
    }, {
      "left" : "return \"Ambiance\".equalsIgnoreCase(gtkTheme) ||\n           \"Radiance\".equalsIgnoreCase(gtkTheme) ||\n           \"Dust\".equalsIgnoreCase(gtkTheme) ||\n           \"Dust Sand\".equalsIgnoreCase(gtkTheme);",
      "right" : "return \"Ambiance\".equalsIgnoreCase(gtkTheme) ||\n           \"Radiance\".equalsIgnoreCase(gtkTheme) ||\n           \"Dust\".equalsIgnoreCase(gtkTheme) ||\n           \"Dust Sand\".equalsIgnoreCase(gtkTheme);",
      "info" : "ReturnStatement[45186-45384]:ReturnStatement[45186-45384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45480-45822]:Block[45480-45822]"
    }, {
      "left" : "assert factor >= 0 : factor;",
      "right" : "assert factor >= 0 : factor;",
      "info" : "AssertStatement[45486-45514]:AssertStatement[45486-45514]"
    }, {
      "left" : "return new Color(\n      Math.min((int)Math.round(c.getRed() * factor), 255),\n      Math.min((int)Math.round(c.getGreen() * factor), 255),\n      Math.min((int)Math.round(c.getBlue() * factor), 255),\n      Math.min((int)Math.round(c.getAlpha() * alphaFactor), 255)\n    );",
      "right" : "return new Color(\n      Math.min((int)Math.round(c.getRed() * factor), 255),\n      Math.min((int)Math.round(c.getGreen() * factor), 255),\n      Math.min((int)Math.round(c.getBlue() * factor), 255),\n      Math.min((int)Math.round(c.getAlpha() * alphaFactor), 255)\n    );",
      "info" : "ReturnStatement[45549-45818]:ReturnStatement[45549-45818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45903-46327]:Block[45903-46327]"
    }, {
      "left" : "assert 0 <= factor && factor <= 1.0 : factor;",
      "right" : "assert 0 <= factor && factor <= 1.0 : factor;",
      "info" : "AssertStatement[45909-45954]:AssertStatement[45909-45954]"
    }, {
      "left" : "final double backFactor = 1.0 - factor;",
      "right" : "final double backFactor = 1.0 - factor;",
      "info" : "VariableDeclarationStatement[45959-45998]:VariableDeclarationStatement[45959-45998]"
    }, {
      "left" : "return new Color(\n      Math.min((int)Math.round(c1.getRed() * backFactor + c2.getRed() * factor), 255),\n      Math.min((int)Math.round(c1.getGreen() * backFactor + c2.getGreen() * factor), 255),\n      Math.min((int)Math.round(c1.getBlue() * backFactor + c2.getBlue() * factor), 255)\n    );",
      "right" : "return new Color(\n      Math.min((int)Math.round(c1.getRed() * backFactor + c2.getRed() * factor), 255),\n      Math.min((int)Math.round(c1.getGreen() * backFactor + c2.getGreen() * factor), 255),\n      Math.min((int)Math.round(c1.getBlue() * backFactor + c2.getBlue() * factor), 255)\n    );",
      "info" : "ReturnStatement[46033-46323]:ReturnStatement[46033-46323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46377-46418]:Block[46377-46418]"
    }, {
      "left" : "return isUnderGTKLookAndFeel();",
      "right" : "return isUnderGTKLookAndFeel();",
      "info" : "ReturnStatement[46383-46414]:ReturnStatement[46383-46414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46474-46536]:Block[46474-46536]"
    }, {
      "left" : "return isUnderAquaLookAndFeel() || isUnderDarcula();",
      "right" : "return isUnderAquaLookAndFeel() || isUnderDarcula();",
      "info" : "ReturnStatement[46480-46532]:ReturnStatement[46480-46532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46580-46635]:Block[46580-46635]"
    }, {
      "left" : "return isUnderNativeMacLookAndFeel() ? 7 : 2;",
      "right" : "return isUnderNativeMacLookAndFeel() ? 7 : 2;",
      "info" : "ReturnStatement[46586-46631]:ReturnStatement[46586-46631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46679-46698]:Block[46679-46698]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[46685-46694]:ReturnStatement[46685-46694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46744-46864]:Block[46744-46864]"
    }, {
      "left" : "return new Insets(getListCellVPadding(), getListCellHPadding(), getListCellVPadding(), getListCellHPadding());",
      "right" : "return new Insets(getListCellVPadding(), getListCellHPadding(), getListCellVPadding(), getListCellHPadding());",
      "info" : "ReturnStatement[46750-46860]:ReturnStatement[46750-46860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46914-47011]:Block[46914-47011]"
    }, {
      "left" : "return isUnderNativeMacLookAndFeel() ? new Insets(1, 0, 1, 0) : new Insets(5, 5, 5, 5);",
      "right" : "return isUnderNativeMacLookAndFeel() ? new Insets(1, 0, 1, 0) : new Insets(5, 5, 5, 5);",
      "info" : "ReturnStatement[46920-47007]:ReturnStatement[46920-47007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47063-47111]:Block[47063-47111]"
    }, {
      "left" : "return !isUnderNativeMacLookAndFeel();",
      "right" : "return !isUnderNativeMacLookAndFeel();",
      "info" : "ReturnStatement[47069-47107]:ReturnStatement[47069-47107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47177-47266]:Block[47177-47266]"
    }, {
      "left" : "return SystemInfo.isMac ? mouseEvent.isMetaDown() : mouseEvent.isControlDown();",
      "right" : "return SystemInfo.isMac ? mouseEvent.isMetaDown() : mouseEvent.isControlDown();",
      "info" : "ReturnStatement[47183-47262]:ReturnStatement[47183-47262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47337-48064]:Block[47337-48064]"
    }, {
      "left" : "Set<String> result = new TreeSet<String>();",
      "right" : "Set<String> result = new TreeSet<String>();",
      "info" : "VariableDeclarationStatement[47343-47386]:VariableDeclarationStatement[47343-47386]"
    }, {
      "left" : "for (Font font : GraphicsEnvironment.getLocalGraphicsEnvironment().getAllFonts())",
      "right" : "for (Font font : GraphicsEnvironment.getLocalGraphicsEnvironment().getAllFonts())",
      "info" : "EnhancedForStatement[47463-47788]:EnhancedForStatement[47463-47788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47545-47788]:Block[47545-47788]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[47553-47782]:TryStatement[47553-47782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47557-47679]:Block[47557-47679]"
    }, {
      "left" : "if (isValidFont(font))",
      "right" : "if (isValidFont(font))",
      "info" : "IfStatement[47567-47671]:IfStatement[47567-47671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47590-47671]:Block[47590-47671]"
    }, {
      "left" : "result.add(familyName ? font.getFamily() : font.getName());",
      "right" : "result.add(familyName ? font.getFamily() : font.getName());",
      "info" : "ExpressionStatement[47602-47661]:ExpressionStatement[47602-47661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47711-47782]:Block[47711-47782]"
    }, {
      "left" : "Font labelFont = getLabelFont();",
      "right" : "Font labelFont = getLabelFont();",
      "info" : "VariableDeclarationStatement[47846-47878]:VariableDeclarationStatement[47846-47878]"
    }, {
      "left" : "if (labelFont != null && isValidFont(labelFont))",
      "right" : "if (labelFont != null && isValidFont(labelFont))",
      "info" : "IfStatement[47883-48015]:IfStatement[47883-48015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47932-48015]:Block[47932-48015]"
    }, {
      "left" : "result.add(familyName ? labelFont.getFamily() : labelFont.getName());",
      "right" : "result.add(familyName ? labelFont.getFamily() : labelFont.getName());",
      "info" : "ExpressionStatement[47940-48009]:ExpressionStatement[47940-48009]"
    }, {
      "left" : "return ArrayUtil.toStringArray(result);",
      "right" : "return ArrayUtil.toStringArray(result);",
      "info" : "ReturnStatement[48021-48060]:ReturnStatement[48021-48060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48114-48151]:Block[48114-48151]"
    }, {
      "left" : "return STANDARD_FONT_SIZES;",
      "right" : "return STANDARD_FONT_SIZES;",
      "info" : "ReturnStatement[48120-48147]:ReturnStatement[48120-48147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48209-48562]:Block[48209-48562]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[48215-48558]:TryStatement[48215-48558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48219-48446]:Block[48219-48446]"
    }, {
      "left" : "return font.canDisplay('a') &&\n             font.canDisplay('z') &&\n             font.canDisplay('A') &&\n             font.canDisplay('Z') &&\n             font.canDisplay('0') &&\n             font.canDisplay('1');",
      "right" : "return font.canDisplay('a') &&\n             font.canDisplay('z') &&\n             font.canDisplay('A') &&\n             font.canDisplay('Z') &&\n             font.canDisplay('0') &&\n             font.canDisplay('1');",
      "info" : "ReturnStatement[48227-48440]:ReturnStatement[48227-48440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48471-48558]:Block[48471-48558]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[48539-48552]:ReturnStatement[48539-48552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48640-48951]:Block[48640-48951]"
    }, {
      "left" : "component.revalidate();",
      "right" : "component.revalidate();",
      "info" : "ExpressionStatement[48646-48669]:ExpressionStatement[48646-48669]"
    }, {
      "left" : "component.repaint();",
      "right" : "component.repaint();",
      "info" : "ExpressionStatement[48674-48694]:ExpressionStatement[48674-48694]"
    }, {
      "left" : "final Window window = SwingUtilities.windowForComponent(component);",
      "right" : "final Window window = SwingUtilities.windowForComponent(component);",
      "info" : "VariableDeclarationStatement[48699-48766]:VariableDeclarationStatement[48699-48766]"
    }, {
      "left" : "if (window != null &&\n        (window.getSize().height < window.getMinimumSize().height || window.getSize().width < window.getMinimumSize().width))",
      "right" : "if (window != null &&\n        (window.getSize().height < window.getMinimumSize().height || window.getSize().width < window.getMinimumSize().width))",
      "info" : "IfStatement[48771-48947]:IfStatement[48771-48947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48919-48947]:Block[48919-48947]"
    }, {
      "left" : "window.pack();",
      "right" : "window.pack();",
      "info" : "ExpressionStatement[48927-48941]:ExpressionStatement[48927-48941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49020-49644]:Block[49020-49644]"
    }, {
      "left" : "@NonNls StringBuilder rule = new StringBuilder(\"body {\");",
      "right" : "@NonNls StringBuilder rule = new StringBuilder(\"body {\");",
      "info" : "VariableDeclarationStatement[49026-49083]:VariableDeclarationStatement[49026-49083]"
    }, {
      "left" : "if (font != null)",
      "right" : "if (font != null)",
      "info" : "IfStatement[49088-49474]:IfStatement[49088-49474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49106-49474]:Block[49106-49474]"
    }, {
      "left" : "rule.append(\" font-family: \");",
      "right" : "rule.append(\" font-family: \");",
      "info" : "ExpressionStatement[49114-49144]:ExpressionStatement[49114-49144]"
    }, {
      "left" : "rule.append(font.getFamily());",
      "right" : "rule.append(font.getFamily());",
      "info" : "ExpressionStatement[49151-49181]:ExpressionStatement[49151-49181]"
    }, {
      "left" : "rule.append(\" ; \");",
      "right" : "rule.append(\" ; \");",
      "info" : "ExpressionStatement[49188-49207]:ExpressionStatement[49188-49207]"
    }, {
      "left" : "rule.append(\" font-size: \");",
      "right" : "rule.append(\" font-size: \");",
      "info" : "ExpressionStatement[49214-49242]:ExpressionStatement[49214-49242]"
    }, {
      "left" : "rule.append(font.getSize());",
      "right" : "rule.append(font.getSize());",
      "info" : "ExpressionStatement[49249-49277]:ExpressionStatement[49249-49277]"
    }, {
      "left" : "rule.append(\"pt ;\");",
      "right" : "rule.append(\"pt ;\");",
      "info" : "ExpressionStatement[49284-49304]:ExpressionStatement[49284-49304]"
    }, {
      "left" : "if (font.isBold())",
      "right" : "if (font.isBold())",
      "info" : "IfStatement[49311-49384]:IfStatement[49311-49384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49330-49384]:Block[49330-49384]"
    }, {
      "left" : "rule.append(\" font-weight: 700 ; \");",
      "right" : "rule.append(\" font-weight: 700 ; \");",
      "info" : "ExpressionStatement[49340-49376]:ExpressionStatement[49340-49376]"
    }, {
      "left" : "if (font.isItalic())",
      "right" : "if (font.isItalic())",
      "info" : "IfStatement[49391-49468]:IfStatement[49391-49468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49412-49468]:Block[49412-49468]"
    }, {
      "left" : "rule.append(\" font-style: italic ; \");",
      "right" : "rule.append(\" font-style: italic ; \");",
      "info" : "ExpressionStatement[49422-49460]:ExpressionStatement[49422-49460]"
    }, {
      "left" : "if (fg != null)",
      "right" : "if (fg != null)",
      "info" : "IfStatement[49479-49589]:IfStatement[49479-49589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49495-49589]:Block[49495-49589]"
    }, {
      "left" : "rule.append(\" color: #\");",
      "right" : "rule.append(\" color: #\");",
      "info" : "ExpressionStatement[49503-49528]:ExpressionStatement[49503-49528]"
    }, {
      "left" : "appendColor(fg, rule);",
      "right" : "appendColor(fg, rule);",
      "info" : "ExpressionStatement[49535-49557]:ExpressionStatement[49535-49557]"
    }, {
      "left" : "rule.append(\" ; \");",
      "right" : "rule.append(\" ; \");",
      "info" : "ExpressionStatement[49564-49583]:ExpressionStatement[49564-49583]"
    }, {
      "left" : "rule.append(\" }\");",
      "right" : "rule.append(\" }\");",
      "info" : "ExpressionStatement[49594-49612]:ExpressionStatement[49594-49612]"
    }, {
      "left" : "return rule.toString();",
      "right" : "return rule.toString();",
      "info" : "ReturnStatement[49617-49640]:ReturnStatement[49617-49640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49722-50024]:Block[49722-50024]"
    }, {
      "left" : "if (color.getRed() < 16)",
      "right" : "if (color.getRed() < 16)",
      "info" : "IfStatement[49728-49768]:IfStatement[49728-49768]"
    }, {
      "left" : "sb.append('0');",
      "right" : "sb.append('0');",
      "info" : "ExpressionStatement[49753-49768]:ExpressionStatement[49753-49768]"
    }, {
      "left" : "sb.append(Integer.toHexString(color.getRed()));",
      "right" : "sb.append(Integer.toHexString(color.getRed()));",
      "info" : "ExpressionStatement[49773-49820]:ExpressionStatement[49773-49820]"
    }, {
      "left" : "if (color.getGreen() < 16)",
      "right" : "if (color.getGreen() < 16)",
      "info" : "IfStatement[49825-49867]:IfStatement[49825-49867]"
    }, {
      "left" : "sb.append('0');",
      "right" : "sb.append('0');",
      "info" : "ExpressionStatement[49852-49867]:ExpressionStatement[49852-49867]"
    }, {
      "left" : "sb.append(Integer.toHexString(color.getGreen()));",
      "right" : "sb.append(Integer.toHexString(color.getGreen()));",
      "info" : "ExpressionStatement[49872-49921]:ExpressionStatement[49872-49921]"
    }, {
      "left" : "if (color.getBlue() < 16)",
      "right" : "if (color.getBlue() < 16)",
      "info" : "IfStatement[49926-49967]:IfStatement[49926-49967]"
    }, {
      "left" : "sb.append('0');",
      "right" : "sb.append('0');",
      "info" : "ExpressionStatement[49952-49967]:ExpressionStatement[49952-49967]"
    }, {
      "left" : "sb.append(Integer.toHexString(color.getBlue()));",
      "right" : "sb.append(Integer.toHexString(color.getBlue()));",
      "info" : "ExpressionStatement[49972-50020]:ExpressionStatement[49972-50020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50306-50720]:Block[50306-50720]"
    }, {
      "left" : "int i1;",
      "right" : "int i1;",
      "info" : "VariableDeclarationStatement[50312-50319]:VariableDeclarationStatement[50312-50319]"
    }, {
      "left" : "for (i1 = x; i1 <= x1; i1 += 2)",
      "right" : "for (i1 = x; i1 <= x1; i1 += 2)",
      "info" : "ForStatement[50324-50396]:ForStatement[50324-50396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50356-50396]:Block[50356-50396]"
    }, {
      "left" : "drawLine(g, i1, y, i1, y);",
      "right" : "drawLine(g, i1, y, i1, y);",
      "info" : "ExpressionStatement[50364-50390]:ExpressionStatement[50364-50390]"
    }, {
      "left" : "for (i1 = i1 != x1 + 1 ? y + 2 : y + 1; i1 <= y1; i1 += 2)",
      "right" : "for (i1 = i1 != x1 + 1 ? y + 2 : y + 1; i1 <= y1; i1 += 2)",
      "info" : "ForStatement[50402-50503]:ForStatement[50402-50503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50461-50503]:Block[50461-50503]"
    }, {
      "left" : "drawLine(g, x1, i1, x1, i1);",
      "right" : "drawLine(g, x1, i1, x1, i1);",
      "info" : "ExpressionStatement[50469-50497]:ExpressionStatement[50469-50497]"
    }, {
      "left" : "for (i1 = i1 != y1 + 1 ? x1 - 2 : x1 - 1; i1 >= x; i1 -= 2)",
      "right" : "for (i1 = i1 != y1 + 1 ? x1 - 2 : x1 - 1; i1 >= x; i1 -= 2)",
      "info" : "ForStatement[50509-50611]:ForStatement[50509-50611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50569-50611]:Block[50569-50611]"
    }, {
      "left" : "drawLine(g, i1, y1, i1, y1);",
      "right" : "drawLine(g, i1, y1, i1, y1);",
      "info" : "ExpressionStatement[50577-50605]:ExpressionStatement[50577-50605]"
    }, {
      "left" : "for (i1 = i1 != x - 1 ? y1 - 2 : y1 - 1; i1 >= y; i1 -= 2)",
      "right" : "for (i1 = i1 != x - 1 ? y1 - 2 : y1 - 1; i1 >= y; i1 -= 2)",
      "info" : "ForStatement[50617-50716]:ForStatement[50617-50716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50676-50716]:Block[50676-50716]"
    }, {
      "left" : "drawLine(g, x, i1, x, i1);",
      "right" : "drawLine(g, x, i1, x, i1);",
      "info" : "ExpressionStatement[50684-50710]:ExpressionStatement[50684-50710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51498-51748]:Block[51498-51748]"
    }, {
      "left" : "if ((SystemInfo.isMac && !isRetina()) || SystemInfo.isLinux)",
      "right" : "if ((SystemInfo.isMac && !isRetina()) || SystemInfo.isLinux)",
      "info" : "IfStatement[51504-51744]:IfStatement[51504-51744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51565-51649]:Block[51565-51649]"
    }, {
      "left" : "drawAppleDottedLine(g, startX, endX, lineY, bgColor, fgColor, opaque);",
      "right" : "drawAppleDottedLine(g, startX, endX, lineY, bgColor, fgColor, opaque);",
      "info" : "ExpressionStatement[51573-51643]:ExpressionStatement[51573-51643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51659-51744]:Block[51659-51744]"
    }, {
      "left" : "drawBoringDottedLine(g, startX, endX, lineY, bgColor, fgColor, opaque);",
      "right" : "drawBoringDottedLine(g, startX, endX, lineY, bgColor, fgColor, opaque);",
      "info" : "ExpressionStatement[51667-51738]:ExpressionStatement[51667-51738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51970-52110]:Block[51970-52110]"
    }, {
      "left" : "Color c1 = new Color(255, 234, 162);",
      "right" : "Color c1 = new Color(255, 234, 162);",
      "info" : "VariableDeclarationStatement[51976-52012]:VariableDeclarationStatement[51976-52012]"
    }, {
      "left" : "Color c2 = new Color(255, 208, 66);",
      "right" : "Color c2 = new Color(255, 208, 66);",
      "info" : "VariableDeclarationStatement[52017-52052]:VariableDeclarationStatement[52017-52052]"
    }, {
      "left" : "drawSearchMatch(g, startX, endX, height, c1, c2);",
      "right" : "drawSearchMatch(g, startX, endX, height, c1, c2);",
      "info" : "ExpressionStatement[52057-52106]:ExpressionStatement[52057-52106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52217-53105]:Block[52217-53105]"
    }, {
      "left" : "final boolean drawRound = endX - startX > 4;",
      "right" : "final boolean drawRound = endX - startX > 4;",
      "info" : "VariableDeclarationStatement[52223-52267]:VariableDeclarationStatement[52223-52267]"
    }, {
      "left" : "final Composite oldComposite = g.getComposite();",
      "right" : "final Composite oldComposite = g.getComposite();",
      "info" : "VariableDeclarationStatement[52273-52321]:VariableDeclarationStatement[52273-52321]"
    }, {
      "left" : "g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.7f));",
      "right" : "g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.7f));",
      "info" : "ExpressionStatement[52326-52400]:ExpressionStatement[52326-52400]"
    }, {
      "left" : "g.setPaint(getGradientPaint(startX, 2, c1, startX, height - 5, c2));",
      "right" : "g.setPaint(getGradientPaint(startX, 2, c1, startX, height - 5, c2));",
      "info" : "ExpressionStatement[52405-52473]:ExpressionStatement[52405-52473]"
    }, {
      "left" : "if (isRetina())",
      "right" : "if (isRetina())",
      "info" : "IfStatement[52479-52627]:IfStatement[52479-52627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52495-52627]:Block[52495-52627]"
    }, {
      "left" : "g.fillRoundRect(startX - 1, 2, endX - startX + 1, height - 4, 5, 5);",
      "right" : "g.fillRoundRect(startX - 1, 2, endX - startX + 1, height - 4, 5, 5);",
      "info" : "ExpressionStatement[52503-52571]:ExpressionStatement[52503-52571]"
    }, {
      "left" : "g.setComposite(oldComposite);",
      "right" : "g.setComposite(oldComposite);",
      "info" : "ExpressionStatement[52578-52607]:ExpressionStatement[52578-52607]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[52614-52621]:ReturnStatement[52614-52621]"
    }, {
      "left" : "g.fillRect(startX, 3, endX - startX, height - 5);",
      "right" : "g.fillRect(startX, 3, endX - startX, height - 5);",
      "info" : "ExpressionStatement[52633-52682]:ExpressionStatement[52633-52682]"
    }, {
      "left" : "if (drawRound)",
      "right" : "if (drawRound)",
      "info" : "IfStatement[52688-53066]:IfStatement[52688-53066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52703-53066]:Block[52703-53066]"
    }, {
      "left" : "g.drawLine(startX - 1, 4, startX - 1, height - 4);",
      "right" : "g.drawLine(startX - 1, 4, startX - 1, height - 4);",
      "info" : "ExpressionStatement[52711-52761]:ExpressionStatement[52711-52761]"
    }, {
      "left" : "g.drawLine(endX, 4, endX, height - 4);",
      "right" : "g.drawLine(endX, 4, endX, height - 4);",
      "info" : "ExpressionStatement[52768-52806]:ExpressionStatement[52768-52806]"
    }, {
      "left" : "g.setColor(new Color(100, 100, 100, 50));",
      "right" : "g.setColor(new Color(100, 100, 100, 50));",
      "info" : "ExpressionStatement[52814-52855]:ExpressionStatement[52814-52855]"
    }, {
      "left" : "g.drawLine(startX - 1, 4, startX - 1, height - 4);",
      "right" : "g.drawLine(startX - 1, 4, startX - 1, height - 4);",
      "info" : "ExpressionStatement[52862-52912]:ExpressionStatement[52862-52912]"
    }, {
      "left" : "g.drawLine(endX, 4, endX, height - 4);",
      "right" : "g.drawLine(endX, 4, endX, height - 4);",
      "info" : "ExpressionStatement[52919-52957]:ExpressionStatement[52919-52957]"
    }, {
      "left" : "g.drawLine(startX, 3, endX - 1, 3);",
      "right" : "g.drawLine(startX, 3, endX - 1, 3);",
      "info" : "ExpressionStatement[52965-53000]:ExpressionStatement[52965-53000]"
    }, {
      "left" : "g.drawLine(startX, height - 3, endX - 1, height - 3);",
      "right" : "g.drawLine(startX, height - 3, endX - 1, height - 3);",
      "info" : "ExpressionStatement[53007-53060]:ExpressionStatement[53007-53060]"
    }, {
      "left" : "g.setComposite(oldComposite);",
      "right" : "g.setComposite(oldComposite);",
      "info" : "ExpressionStatement[53072-53101]:ExpressionStatement[53072-53101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53188-53369]:Block[53188-53369]"
    }, {
      "left" : "g.drawLine(x + 1, y, x + w - 1, y);",
      "right" : "g.drawLine(x + 1, y, x + w - 1, y);",
      "info" : "ExpressionStatement[53194-53229]:ExpressionStatement[53194-53229]"
    }, {
      "left" : "g.drawLine(x + w, y + 1, x + w, y + h - 1);",
      "right" : "g.drawLine(x + w, y + 1, x + w, y + h - 1);",
      "info" : "ExpressionStatement[53234-53277]:ExpressionStatement[53234-53277]"
    }, {
      "left" : "g.drawLine(x + w - 1, y + h, x + 1, y + h);",
      "right" : "g.drawLine(x + w - 1, y + h, x + 1, y + h);",
      "info" : "ExpressionStatement[53282-53325]:ExpressionStatement[53282-53325]"
    }, {
      "left" : "g.drawLine(x, y + 1, x, y + h - 1);",
      "right" : "g.drawLine(x, y + 1, x, y + h - 1);",
      "info" : "ExpressionStatement[53330-53365]:ExpressionStatement[53330-53365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53807-54645]:Block[53807-54645]"
    }, {
      "left" : "final Color oldColor = g.getColor();",
      "right" : "final Color oldColor = g.getColor();",
      "info" : "VariableDeclarationStatement[53813-53849]:VariableDeclarationStatement[53813-53849]"
    }, {
      "left" : "if (opaque && bgColor != null)",
      "right" : "if (opaque && bgColor != null)",
      "info" : "IfStatement[53897-54065]:IfStatement[53897-54065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53928-54065]:Block[53928-54065]"
    }, {
      "left" : "g.setColor(bgColor);",
      "right" : "g.setColor(bgColor);",
      "info" : "ExpressionStatement[53936-53956]:ExpressionStatement[53936-53956]"
    }, {
      "left" : "drawLine(g, startX, lineY, endX, lineY);",
      "right" : "drawLine(g, startX, lineY, endX, lineY);",
      "info" : "ExpressionStatement[53964-54004]:ExpressionStatement[53964-54004]"
    }, {
      "left" : "drawLine(g, startX, lineY + 1, endX, lineY + 1);",
      "right" : "drawLine(g, startX, lineY + 1, endX, lineY + 1);",
      "info" : "ExpressionStatement[54011-54059]:ExpressionStatement[54011-54059]"
    }, {
      "left" : "final int step = 4;",
      "right" : "final int step = 4;",
      "info" : "VariableDeclarationStatement[54211-54230]:VariableDeclarationStatement[54211-54230]"
    }, {
      "left" : "final int startPosCorrection = startX % step < 3 ? 0 : 1;",
      "right" : "final int startPosCorrection = startX % step < 3 ? 0 : 1;",
      "info" : "VariableDeclarationStatement[54235-54292]:VariableDeclarationStatement[54235-54292]"
    }, {
      "left" : "g.setColor(fgColor != null ? fgColor : oldColor);",
      "right" : "g.setColor(fgColor != null ? fgColor : oldColor);",
      "info" : "ExpressionStatement[54298-54347]:ExpressionStatement[54298-54347]"
    }, {
      "left" : "for (int dotXi = (startX / step + startPosCorrection) * step; dotXi < endX; dotXi += step)",
      "right" : "for (int dotXi = (startX / step + startPosCorrection) * step; dotXi < endX; dotXi += step)",
      "info" : "ForStatement[54387-54593]:ForStatement[54387-54593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54478-54593]:Block[54478-54593]"
    }, {
      "left" : "g.drawLine(dotXi, lineY, dotXi + 1, lineY);",
      "right" : "g.drawLine(dotXi, lineY, dotXi + 1, lineY);",
      "info" : "ExpressionStatement[54486-54529]:ExpressionStatement[54486-54529]"
    }, {
      "left" : "g.drawLine(dotXi, lineY + 1, dotXi + 1, lineY + 1);",
      "right" : "g.drawLine(dotXi, lineY + 1, dotXi + 1, lineY + 1);",
      "info" : "ExpressionStatement[54536-54587]:ExpressionStatement[54536-54587]"
    }, {
      "left" : "g.setColor(oldColor);",
      "right" : "g.setColor(oldColor);",
      "info" : "ExpressionStatement[54620-54641]:ExpressionStatement[54620-54641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54752-54913]:Block[54752-54913]"
    }, {
      "left" : "final Graphics2D g2d = (Graphics2D)g;",
      "right" : "final Graphics2D g2d = (Graphics2D)g;",
      "info" : "VariableDeclarationStatement[54758-54795]:VariableDeclarationStatement[54758-54795]"
    }, {
      "left" : "g2d.setPaint(getGradientPaint(0, 0, Gray._215, 0, height, Gray._200));",
      "right" : "g2d.setPaint(getGradientPaint(0, 0, Gray._215, 0, height, Gray._200));",
      "info" : "ExpressionStatement[54800-54870]:ExpressionStatement[54800-54870]"
    }, {
      "left" : "g2d.fillRect(0, 0, width, height);",
      "right" : "g2d.fillRect(0, 0, width, height);",
      "info" : "ExpressionStatement[54875-54909]:ExpressionStatement[54875-54909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55026-55102]:Block[55026-55102]"
    }, {
      "left" : "drawHeader(g, x, width, height, active, false, drawTopLine, true);",
      "right" : "drawHeader(g, x, width, height, active, false, drawTopLine, true);",
      "info" : "ExpressionStatement[55032-55098]:ExpressionStatement[55032-55098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55483-56379]:Block[55483-56379]"
    }, {
      "left" : "height++;",
      "right" : "height++;",
      "info" : "ExpressionStatement[55489-55498]:ExpressionStatement[55489-55498]"
    }, {
      "left" : "GraphicsConfig config = GraphicsUtil.disableAAPainting(g);",
      "right" : "GraphicsConfig config = GraphicsUtil.disableAAPainting(g);",
      "info" : "VariableDeclarationStatement[55503-55561]:VariableDeclarationStatement[55503-55561]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[55566-56375]:TryStatement[55566-56375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55570-56335]:Block[55570-56335]"
    }, {
      "left" : "g.setColor(getPanelBackground());",
      "right" : "g.setColor(getPanelBackground());",
      "info" : "ExpressionStatement[55578-55611]:ExpressionStatement[55578-55611]"
    }, {
      "left" : "g.fillRect(x, 0, width, height);",
      "right" : "g.fillRect(x, 0, width, height);",
      "info" : "ExpressionStatement[55618-55650]:ExpressionStatement[55618-55650]"
    }, {
      "left" : "((Graphics2D)g).setPaint(getGradientPaint(0, 0, new Color(0, 0, 0, 5), 0, height, new Color(0, 0, 0, 20)));",
      "right" : "((Graphics2D)g).setPaint(getGradientPaint(0, 0, new Color(0, 0, 0, 5), 0, height, new Color(0, 0, 0, 20)));",
      "info" : "ExpressionStatement[55658-55765]:ExpressionStatement[55658-55765]"
    }, {
      "left" : "g.fillRect(x, 0, width, height);",
      "right" : "g.fillRect(x, 0, width, height);",
      "info" : "ExpressionStatement[55772-55804]:ExpressionStatement[55772-55804]"
    }, {
      "left" : "if (active)",
      "right" : "if (active)",
      "info" : "IfStatement[55812-55942]:IfStatement[55812-55942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55824-55942]:Block[55824-55942]"
    }, {
      "left" : "g.setColor(new Color(100, 150, 230, toolWindow ? 50 : 30));",
      "right" : "g.setColor(new Color(100, 150, 230, toolWindow ? 50 : 30));",
      "info" : "ExpressionStatement[55834-55893]:ExpressionStatement[55834-55893]"
    }, {
      "left" : "g.fillRect(x, 0, width, height);",
      "right" : "g.fillRect(x, 0, width, height);",
      "info" : "ExpressionStatement[55902-55934]:ExpressionStatement[55902-55934]"
    }, {
      "left" : "g.setColor(new Color(0, 0, 0, toolWindow ? 90 : 50));",
      "right" : "g.setColor(new Color(0, 0, 0, toolWindow ? 90 : 50));",
      "info" : "ExpressionStatement[55949-56002]:ExpressionStatement[55949-56002]"
    }, {
      "left" : "if (drawTopLine)",
      "right" : "if (drawTopLine)",
      "info" : "IfStatement[56009-56053]:IfStatement[56009-56053]"
    }, {
      "left" : "g.drawLine(x, 0, width, 0);",
      "right" : "g.drawLine(x, 0, width, 0);",
      "info" : "ExpressionStatement[56026-56053]:ExpressionStatement[56026-56053]"
    }, {
      "left" : "if (drawBottomLine)",
      "right" : "if (drawBottomLine)",
      "info" : "IfStatement[56060-56163]:IfStatement[56060-56163]"
    }, {
      "left" : "g.drawLine(x, height - (isRetina() ? 1 : 2), width, height - (isRetina() ? 1 : 2));",
      "right" : "g.drawLine(x, height - (isRetina() ? 1 : 2), width, height - (isRetina() ? 1 : 2));",
      "info" : "ExpressionStatement[56080-56163]:ExpressionStatement[56080-56163]"
    }, {
      "left" : "g.setColor(isUnderDarcula() ? Gray._255.withAlpha(30) : new Color(255, 255, 255, 100));",
      "right" : "g.setColor(isUnderDarcula() ? Gray._255.withAlpha(30) : new Color(255, 255, 255, 100));",
      "info" : "ExpressionStatement[56171-56258]:ExpressionStatement[56171-56258]"
    }, {
      "left" : "g.drawLine(x, drawTopLine ? 1 : 0, width, drawTopLine ? 1 : 0);",
      "right" : "g.drawLine(x, drawTopLine ? 1 : 0, width, drawTopLine ? 1 : 0);",
      "info" : "ExpressionStatement[56265-56328]:ExpressionStatement[56265-56328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56344-56375]:Block[56344-56375]"
    }, {
      "left" : "config.restore();",
      "right" : "config.restore();",
      "info" : "ExpressionStatement[56352-56369]:ExpressionStatement[56352-56369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56772-56995]:Block[56772-56995]"
    }, {
      "left" : "g.setColor(fgColor);",
      "right" : "g.setColor(fgColor);",
      "info" : "ExpressionStatement[56779-56799]:ExpressionStatement[56779-56799]"
    }, {
      "left" : "for (int dot = start; dot < end; dot += 3)",
      "right" : "for (int dot = start; dot < end; dot += 3)",
      "info" : "ForStatement[56804-56991]:ForStatement[56804-56991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56847-56991]:Block[56847-56991]"
    }, {
      "left" : "if (horizontal)",
      "right" : "if (horizontal)",
      "info" : "IfStatement[56855-56985]:IfStatement[56855-56985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56871-56922]:Block[56871-56922]"
    }, {
      "left" : "g.drawLine(dot, xOrY, dot, xOrY);",
      "right" : "g.drawLine(dot, xOrY, dot, xOrY);",
      "info" : "ExpressionStatement[56881-56914]:ExpressionStatement[56881-56914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56934-56985]:Block[56934-56985]"
    }, {
      "left" : "g.drawLine(xOrY, dot, xOrY, dot);",
      "right" : "g.drawLine(xOrY, dot, xOrY, dot);",
      "info" : "ExpressionStatement[56944-56977]:ExpressionStatement[56944-56977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57426-58670]:Block[57426-58670]"
    }, {
      "left" : "final Color oldColor = g.getColor();",
      "right" : "final Color oldColor = g.getColor();",
      "info" : "VariableDeclarationStatement[57432-57468]:VariableDeclarationStatement[57432-57468]"
    }, {
      "left" : "if (opaque && bgColor != null)",
      "right" : "if (opaque && bgColor != null)",
      "info" : "IfStatement[57516-57739]:IfStatement[57516-57739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57547-57739]:Block[57547-57739]"
    }, {
      "left" : "g.setColor(bgColor);",
      "right" : "g.setColor(bgColor);",
      "info" : "ExpressionStatement[57555-57575]:ExpressionStatement[57555-57575]"
    }, {
      "left" : "drawLine(g, startX, lineY, endX, lineY);",
      "right" : "drawLine(g, startX, lineY, endX, lineY);",
      "info" : "ExpressionStatement[57583-57623]:ExpressionStatement[57583-57623]"
    }, {
      "left" : "drawLine(g, startX, lineY + 1, endX, lineY + 1);",
      "right" : "drawLine(g, startX, lineY + 1, endX, lineY + 1);",
      "info" : "ExpressionStatement[57630-57678]:ExpressionStatement[57630-57678]"
    }, {
      "left" : "drawLine(g, startX, lineY + 2, endX, lineY + 2);",
      "right" : "drawLine(g, startX, lineY + 2, endX, lineY + 2);",
      "info" : "ExpressionStatement[57685-57733]:ExpressionStatement[57685-57733]"
    }, {
      "left" : "final int step = 4;",
      "right" : "final int step = 4;",
      "info" : "VariableDeclarationStatement[57919-57938]:VariableDeclarationStatement[57919-57938]"
    }, {
      "left" : "final int startPosCorrection = startX % step < 3 ? 0 : 1;",
      "right" : "final int startPosCorrection = startX % step < 3 ? 0 : 1;",
      "info" : "VariableDeclarationStatement[57943-58000]:VariableDeclarationStatement[57943-58000]"
    }, {
      "left" : "final Composite oldComposite = g.getComposite();",
      "right" : "final Composite oldComposite = g.getComposite();",
      "info" : "VariableDeclarationStatement[58131-58179]:VariableDeclarationStatement[58131-58179]"
    }, {
      "left" : "g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER));",
      "right" : "g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER));",
      "info" : "ExpressionStatement[58230-58298]:ExpressionStatement[58230-58298]"
    }, {
      "left" : "final BufferedImage image = getAppleDotStamp(fgColor, oldColor);",
      "right" : "final BufferedImage image = getAppleDotStamp(fgColor, oldColor);",
      "info" : "VariableDeclarationStatement[58318-58382]:VariableDeclarationStatement[58318-58382]"
    }, {
      "left" : "final int dotX0 = (startX / step + startPosCorrection) * step;",
      "right" : "final int dotX0 = (startX / step + startPosCorrection) * step;",
      "info" : "VariableDeclarationStatement[58426-58488]:VariableDeclarationStatement[58426-58488]"
    }, {
      "left" : "for (int dotXi = dotX0; dotXi < endX; dotXi += step)",
      "right" : "for (int dotXi = dotX0; dotXi < endX; dotXi += step)",
      "info" : "ForStatement[58493-58599]:ForStatement[58493-58599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58546-58599]:Block[58546-58599]"
    }, {
      "left" : "g.drawImage(image, dotXi, lineY, null);",
      "right" : "g.drawImage(image, dotXi, lineY, null);",
      "info" : "ExpressionStatement[58554-58593]:ExpressionStatement[58554-58593]"
    }, {
      "left" : "g.setComposite(oldComposite);",
      "right" : "g.setComposite(oldComposite);",
      "info" : "ExpressionStatement[58637-58666]:ExpressionStatement[58637-58666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58811-59159]:Block[58811-59159]"
    }, {
      "left" : "final Color color = fgColor != null ? fgColor : oldColor;",
      "right" : "final Color color = fgColor != null ? fgColor : oldColor;",
      "info" : "VariableDeclarationStatement[58817-58874]:VariableDeclarationStatement[58817-58874]"
    }, {
      "left" : "BufferedImage sample = ourAppleDotSamples.get(color);",
      "right" : "BufferedImage sample = ourAppleDotSamples.get(color);",
      "info" : "VariableDeclarationStatement[58963-59016]:VariableDeclarationStatement[58963-59016]"
    }, {
      "left" : "if (sample == null)",
      "right" : "if (sample == null)",
      "info" : "IfStatement[59021-59136]:IfStatement[59021-59136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59041-59136]:Block[59041-59136]"
    }, {
      "left" : "sample = createAppleDotStamp(color);",
      "right" : "sample = createAppleDotStamp(color);",
      "info" : "ExpressionStatement[59049-59085]:ExpressionStatement[59049-59085]"
    }, {
      "left" : "ourAppleDotSamples.put(color, sample);",
      "right" : "ourAppleDotSamples.put(color, sample);",
      "info" : "ExpressionStatement[59092-59130]:ExpressionStatement[59092-59130]"
    }, {
      "left" : "return sample;",
      "right" : "return sample;",
      "info" : "ReturnStatement[59141-59155]:ReturnStatement[59141-59155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59231-60049]:Block[59231-60049]"
    }, {
      "left" : "final BufferedImage image = createImage(3, 3, BufferedImage.TYPE_INT_ARGB);",
      "right" : "final BufferedImage image = createImage(3, 3, BufferedImage.TYPE_INT_ARGB);",
      "info" : "VariableDeclarationStatement[59237-59312]:VariableDeclarationStatement[59237-59312]"
    }, {
      "left" : "final Graphics2D g = image.createGraphics();",
      "right" : "final Graphics2D g = image.createGraphics();",
      "info" : "VariableDeclarationStatement[59317-59361]:VariableDeclarationStatement[59317-59361]"
    }, {
      "left" : "g.setColor(color);",
      "right" : "g.setColor(color);",
      "info" : "ExpressionStatement[59367-59385]:ExpressionStatement[59367-59385]"
    }, {
      "left" : "g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC, .2f));",
      "right" : "g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC, .2f));",
      "info" : "ExpressionStatement[59496-59564]:ExpressionStatement[59496-59564]"
    }, {
      "left" : "g.drawLine(0, 0, 0, 0);",
      "right" : "g.drawLine(0, 0, 0, 0);",
      "info" : "ExpressionStatement[59569-59592]:ExpressionStatement[59569-59592]"
    }, {
      "left" : "g.drawLine(2, 0, 2, 0);",
      "right" : "g.drawLine(2, 0, 2, 0);",
      "info" : "ExpressionStatement[59597-59620]:ExpressionStatement[59597-59620]"
    }, {
      "left" : "g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC, 0.7f));",
      "right" : "g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC, 0.7f));",
      "info" : "ExpressionStatement[59626-59695]:ExpressionStatement[59626-59695]"
    }, {
      "left" : "g.drawLine(0, 1, 2, 1);",
      "right" : "g.drawLine(0, 1, 2, 1);",
      "info" : "ExpressionStatement[59700-59723]:ExpressionStatement[59700-59723]"
    }, {
      "left" : "g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC, 1.0f));",
      "right" : "g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC, 1.0f));",
      "info" : "ExpressionStatement[59729-59798]:ExpressionStatement[59729-59798]"
    }, {
      "left" : "g.drawLine(1, 2, 1, 2);",
      "right" : "g.drawLine(1, 2, 1, 2);",
      "info" : "ExpressionStatement[59803-59826]:ExpressionStatement[59803-59826]"
    }, {
      "left" : "g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC, .5f));",
      "right" : "g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC, .5f));",
      "info" : "ExpressionStatement[59832-59900]:ExpressionStatement[59832-59900]"
    }, {
      "left" : "g.drawLine(1, 0, 1, 0);",
      "right" : "g.drawLine(1, 0, 1, 0);",
      "info" : "ExpressionStatement[59905-59928]:ExpressionStatement[59905-59928]"
    }, {
      "left" : "g.drawLine(0, 2, 0, 2);",
      "right" : "g.drawLine(0, 2, 0, 2);",
      "info" : "ExpressionStatement[59933-59956]:ExpressionStatement[59933-59956]"
    }, {
      "left" : "g.drawLine(2, 2, 2, 2);",
      "right" : "g.drawLine(2, 2, 2, 2);",
      "info" : "ExpressionStatement[59961-59984]:ExpressionStatement[59961-59984]"
    }, {
      "left" : "g.dispose();",
      "right" : "g.dispose();",
      "info" : "ExpressionStatement[60014-60026]:ExpressionStatement[60014-60026]"
    }, {
      "left" : "return image;",
      "right" : "return image;",
      "info" : "ReturnStatement[60032-60045]:ReturnStatement[60032-60045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60258-60517]:Block[60258-60517]"
    }, {
      "left" : "Graphics2D g2d = (Graphics2D)g;",
      "right" : "Graphics2D g2d = (Graphics2D)g;",
      "info" : "VariableDeclarationStatement[60264-60295]:VariableDeclarationStatement[60264-60295]"
    }, {
      "left" : "Toolkit tk = Toolkit.getDefaultToolkit();",
      "right" : "Toolkit tk = Toolkit.getDefaultToolkit();",
      "info" : "VariableDeclarationStatement[60300-60341]:VariableDeclarationStatement[60300-60341]"
    }, {
      "left" : "Map map = (Map)tk.getDesktopProperty(\"awt.font.desktophints\");",
      "right" : "Map map = (Map)tk.getDesktopProperty(\"awt.font.desktophints\");",
      "info" : "VariableDeclarationStatement[60388-60450]:VariableDeclarationStatement[60388-60450]"
    }, {
      "left" : "if (map != null)",
      "right" : "if (map != null)",
      "info" : "IfStatement[60455-60513]:IfStatement[60455-60513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60472-60513]:Block[60472-60513]"
    }, {
      "left" : "g2d.addRenderingHints(map);",
      "right" : "g2d.addRenderingHints(map);",
      "info" : "ExpressionStatement[60480-60507]:ExpressionStatement[60480-60507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60594-60773]:Block[60594-60773]"
    }, {
      "left" : "if (isRetina())",
      "right" : "if (isRetina())",
      "info" : "IfStatement[60600-60677]:IfStatement[60600-60677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60616-60677]:Block[60616-60677]"
    }, {
      "left" : "return RetinaImage.create(width, height, type);",
      "right" : "return RetinaImage.create(width, height, type);",
      "info" : "ReturnStatement[60624-60671]:ReturnStatement[60624-60671]"
    }, {
      "left" : "return new BufferedImage(width, height, type);",
      "right" : "return new BufferedImage(width, height, type);",
      "info" : "ReturnStatement[60723-60769]:ReturnStatement[60723-60769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60875-61055]:Block[60875-61055]"
    }, {
      "left" : "if (isRetina(g))",
      "right" : "if (isRetina(g))",
      "info" : "IfStatement[60881-60959]:IfStatement[60881-60959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60898-60959]:Block[60898-60959]"
    }, {
      "left" : "return RetinaImage.create(width, height, type);",
      "right" : "return RetinaImage.create(width, height, type);",
      "info" : "ReturnStatement[60906-60953]:ReturnStatement[60906-60953]"
    }, {
      "left" : "return new BufferedImage(width, height, type);",
      "right" : "return new BufferedImage(width, height, type);",
      "info" : "ReturnStatement[61005-61051]:ReturnStatement[61005-61051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61151-61607]:Block[61151-61607]"
    }, {
      "left" : "if (image instanceof JBHiDPIScaledImage)",
      "right" : "if (image instanceof JBHiDPIScaledImage)",
      "info" : "IfStatement[61157-61603]:IfStatement[61157-61603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61198-61548]:Block[61198-61548]"
    }, {
      "left" : "final Graphics2D newG = (Graphics2D)g.create(x, y, image.getWidth(observer), image.getHeight(observer));",
      "right" : "final Graphics2D newG = (Graphics2D)g.create(x, y, image.getWidth(observer), image.getHeight(observer));",
      "info" : "VariableDeclarationStatement[61206-61310]:VariableDeclarationStatement[61206-61310]"
    }, {
      "left" : "newG.scale(0.5, 0.5);",
      "right" : "newG.scale(0.5, 0.5);",
      "info" : "ExpressionStatement[61317-61338]:ExpressionStatement[61317-61338]"
    }, {
      "left" : "Image img = ((JBHiDPIScaledImage)image).getDelegate();",
      "right" : "Image img = ((JBHiDPIScaledImage)image).getDelegate();",
      "info" : "VariableDeclarationStatement[61345-61399]:VariableDeclarationStatement[61345-61399]"
    }, {
      "left" : "if (img == null)",
      "right" : "if (img == null)",
      "info" : "IfStatement[61406-61453]:IfStatement[61406-61453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61423-61453]:Block[61423-61453]"
    }, {
      "left" : "img = image;",
      "right" : "img = image;",
      "info" : "ExpressionStatement[61433-61445]:ExpressionStatement[61433-61445]"
    }, {
      "left" : "newG.drawImage(img, 0, 0, observer);",
      "right" : "newG.drawImage(img, 0, 0, observer);",
      "info" : "ExpressionStatement[61460-61496]:ExpressionStatement[61460-61496]"
    }, {
      "left" : "newG.scale(1, 1);",
      "right" : "newG.scale(1, 1);",
      "info" : "ExpressionStatement[61503-61520]:ExpressionStatement[61503-61520]"
    }, {
      "left" : "newG.dispose();",
      "right" : "newG.dispose();",
      "info" : "ExpressionStatement[61527-61542]:ExpressionStatement[61527-61542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61554-61603]:Block[61554-61603]"
    }, {
      "left" : "g.drawImage(image, x, y, observer);",
      "right" : "g.drawImage(image, x, y, observer);",
      "info" : "ExpressionStatement[61562-61597]:ExpressionStatement[61562-61597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61707-62172]:Block[61707-62172]"
    }, {
      "left" : "if (image instanceof JBHiDPIScaledImage)",
      "right" : "if (image instanceof JBHiDPIScaledImage)",
      "info" : "IfStatement[61713-62168]:IfStatement[61713-62168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61754-62105]:Block[61754-62105]"
    }, {
      "left" : "final Graphics2D newG = (Graphics2D)g.create(x, y, image.getWidth(null), image.getHeight(null));",
      "right" : "final Graphics2D newG = (Graphics2D)g.create(x, y, image.getWidth(null), image.getHeight(null));",
      "info" : "VariableDeclarationStatement[61762-61858]:VariableDeclarationStatement[61762-61858]"
    }, {
      "left" : "newG.scale(0.5, 0.5);",
      "right" : "newG.scale(0.5, 0.5);",
      "info" : "ExpressionStatement[61865-61886]:ExpressionStatement[61865-61886]"
    }, {
      "left" : "Image img = ((JBHiDPIScaledImage)image).getDelegate();",
      "right" : "Image img = ((JBHiDPIScaledImage)image).getDelegate();",
      "info" : "VariableDeclarationStatement[61893-61947]:VariableDeclarationStatement[61893-61947]"
    }, {
      "left" : "if (img == null)",
      "right" : "if (img == null)",
      "info" : "IfStatement[61954-62001]:IfStatement[61954-62001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61971-62001]:Block[61971-62001]"
    }, {
      "left" : "img = image;",
      "right" : "img = image;",
      "info" : "ExpressionStatement[61981-61993]:ExpressionStatement[61981-61993]"
    }, {
      "left" : "newG.drawImage((BufferedImage)img, op, 0, 0);",
      "right" : "newG.drawImage((BufferedImage)img, op, 0, 0);",
      "info" : "ExpressionStatement[62008-62053]:ExpressionStatement[62008-62053]"
    }, {
      "left" : "newG.scale(1, 1);",
      "right" : "newG.scale(1, 1);",
      "info" : "ExpressionStatement[62060-62077]:ExpressionStatement[62060-62077]"
    }, {
      "left" : "newG.dispose();",
      "right" : "newG.dispose();",
      "info" : "ExpressionStatement[62084-62099]:ExpressionStatement[62084-62099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62111-62168]:Block[62111-62168]"
    }, {
      "left" : "((Graphics2D)g).drawImage(image, op, x, y);",
      "right" : "((Graphics2D)g).drawImage(image, op, x, y);",
      "info" : "ExpressionStatement[62119-62162]:ExpressionStatement[62119-62162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62298-62358]:Block[62298-62358]"
    }, {
      "left" : "paintWithXorOnRetina(size, g, true, paintRoutine);",
      "right" : "paintWithXorOnRetina(size, g, true, paintRoutine);",
      "info" : "ExpressionStatement[62304-62354]:ExpressionStatement[62304-62354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62789-63606]:Block[62789-63606]"
    }, {
      "left" : "if (!useRetinaCondition || !isRetina() || Registry.is(\"ide.mac.retina.disableDrawingFix\"))",
      "right" : "if (!useRetinaCondition || !isRetina() || Registry.is(\"ide.mac.retina.disableDrawingFix\"))",
      "info" : "IfStatement[62795-63602]:IfStatement[62795-63602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62886-62936]:Block[62886-62936]"
    }, {
      "left" : "paintRoutine.consume((Graphics2D)g);",
      "right" : "paintRoutine.consume((Graphics2D)g);",
      "info" : "ExpressionStatement[62894-62930]:ExpressionStatement[62894-62930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62946-63602]:Block[62946-63602]"
    }, {
      "left" : "Rectangle rect = g.getClipBounds();",
      "right" : "Rectangle rect = g.getClipBounds();",
      "info" : "VariableDeclarationStatement[62954-62989]:VariableDeclarationStatement[62954-62989]"
    }, {
      "left" : "if (rect == null)",
      "right" : "if (rect == null)",
      "info" : "IfStatement[62996-63041]:IfStatement[62996-63041]"
    }, {
      "left" : "rect = new Rectangle(size);",
      "right" : "rect = new Rectangle(size);",
      "info" : "ExpressionStatement[63014-63041]:ExpressionStatement[63014-63041]"
    }, {
      "left" : "Image image = new BufferedImage(rect.width * 2, rect.height * 2, BufferedImage.TYPE_INT_RGB);",
      "right" : "Image image = new BufferedImage(rect.width * 2, rect.height * 2, BufferedImage.TYPE_INT_RGB);",
      "info" : "VariableDeclarationStatement[63092-63185]:VariableDeclarationStatement[63092-63185]"
    }, {
      "left" : "Graphics2D imageGraphics = (Graphics2D)image.getGraphics();",
      "right" : "Graphics2D imageGraphics = (Graphics2D)image.getGraphics();",
      "info" : "VariableDeclarationStatement[63192-63251]:VariableDeclarationStatement[63192-63251]"
    }, {
      "left" : "imageGraphics.scale(2, 2);",
      "right" : "imageGraphics.scale(2, 2);",
      "info" : "ExpressionStatement[63259-63285]:ExpressionStatement[63259-63285]"
    }, {
      "left" : "imageGraphics.translate(-rect.x, -rect.y);",
      "right" : "imageGraphics.translate(-rect.x, -rect.y);",
      "info" : "ExpressionStatement[63292-63334]:ExpressionStatement[63292-63334]"
    }, {
      "left" : "imageGraphics.setClip(rect.x, rect.y, rect.width, rect.height);",
      "right" : "imageGraphics.setClip(rect.x, rect.y, rect.width, rect.height);",
      "info" : "ExpressionStatement[63341-63404]:ExpressionStatement[63341-63404]"
    }, {
      "left" : "paintRoutine.consume(imageGraphics);",
      "right" : "paintRoutine.consume(imageGraphics);",
      "info" : "ExpressionStatement[63412-63448]:ExpressionStatement[63412-63448]"
    }, {
      "left" : "image.flush();",
      "right" : "image.flush();",
      "info" : "ExpressionStatement[63455-63469]:ExpressionStatement[63455-63469]"
    }, {
      "left" : "imageGraphics.dispose();",
      "right" : "imageGraphics.dispose();",
      "info" : "ExpressionStatement[63476-63500]:ExpressionStatement[63476-63500]"
    }, {
      "left" : "((Graphics2D)g).scale(0.5, 0.5);",
      "right" : "((Graphics2D)g).scale(0.5, 0.5);",
      "info" : "ExpressionStatement[63508-63540]:ExpressionStatement[63508-63540]"
    }, {
      "left" : "g.drawImage(image, rect.x * 2, rect.y * 2, null);",
      "right" : "g.drawImage(image, rect.x * 2, rect.y * 2, null);",
      "info" : "ExpressionStatement[63547-63596]:ExpressionStatement[63547-63596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64042-64141]:Block[64042-64141]"
    }, {
      "left" : "g.setComposite(X_RENDER_ACTIVE.getValue() ? AlphaComposite.SrcOver : AlphaComposite.Src);",
      "right" : "g.setComposite(X_RENDER_ACTIVE.getValue() ? AlphaComposite.SrcOver : AlphaComposite.Src);",
      "info" : "ExpressionStatement[64048-64137]:ExpressionStatement[64048-64137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64228-64794]:Block[64228-64794]"
    }, {
      "left" : "assert EdtInvocationManager.getInstance().isEventDispatchThread() : Thread.currentThread() + \"; EDT: \"+getEventQueueThread();",
      "right" : "assert EdtInvocationManager.getInstance().isEventDispatchThread() : Thread.currentThread() + \"; EDT: \"+getEventQueueThread();",
      "info" : "AssertStatement[64234-64359]:AssertStatement[64234-64359]"
    }, {
      "left" : "final EventQueue eventQueue = Toolkit.getDefaultToolkit().getSystemEventQueue();",
      "right" : "final EventQueue eventQueue = Toolkit.getDefaultToolkit().getSystemEventQueue();",
      "info" : "VariableDeclarationStatement[64364-64444]:VariableDeclarationStatement[64364-64444]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[64449-64790]:WhileStatement[64449-64790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64462-64790]:Block[64462-64790]"
    }, {
      "left" : "AWTEvent event = eventQueue.peekEvent();",
      "right" : "AWTEvent event = eventQueue.peekEvent();",
      "info" : "VariableDeclarationStatement[64470-64510]:VariableDeclarationStatement[64470-64510]"
    }, {
      "left" : "if (event == null)",
      "right" : "if (event == null)",
      "info" : "IfStatement[64517-64542]:IfStatement[64517-64542]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[64536-64542]:BreakStatement[64536-64542]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[64549-64784]:TryStatement[64549-64784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64553-64722]:Block[64553-64722]"
    }, {
      "left" : "AWTEvent event1 = eventQueue.getNextEvent();",
      "right" : "AWTEvent event1 = eventQueue.getNextEvent();",
      "info" : "VariableDeclarationStatement[64563-64607]:VariableDeclarationStatement[64563-64607]"
    }, {
      "left" : "if (event1 instanceof InvocationEvent)",
      "right" : "if (event1 instanceof InvocationEvent)",
      "info" : "IfStatement[64616-64714]:IfStatement[64616-64714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64655-64714]:Block[64655-64714]"
    }, {
      "left" : "((InvocationEvent)event1).dispatch();",
      "right" : "((InvocationEvent)event1).dispatch();",
      "info" : "ExpressionStatement[64667-64704]:ExpressionStatement[64667-64704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64749-64784]:Block[64749-64784]"
    }, {
      "left" : "LOG.error(e);",
      "right" : "LOG.error(e);",
      "info" : "ExpressionStatement[64759-64772]:ExpressionStatement[64759-64772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64841-65153]:Block[64841-65153]"
    }, {
      "left" : "EventQueue eventQueue = Toolkit.getDefaultToolkit().getSystemEventQueue();",
      "right" : "EventQueue eventQueue = Toolkit.getDefaultToolkit().getSystemEventQueue();",
      "info" : "VariableDeclarationStatement[64847-64921]:VariableDeclarationStatement[64847-64921]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[64926-65149]:TryStatement[64926-65149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64930-65080]:Block[64930-65080]"
    }, {
      "left" : "Method method = ReflectionUtil.getDeclaredMethod(EventQueue.class, \"getDispatchThread\");",
      "right" : "Method method = ReflectionUtil.getDeclaredMethod(EventQueue.class, \"getDispatchThread\");",
      "info" : "VariableDeclarationStatement[64938-65026]:VariableDeclarationStatement[64938-65026]"
    }, {
      "left" : "return (Thread)method.invoke(eventQueue);",
      "right" : "return (Thread)method.invoke(eventQueue);",
      "info" : "ReturnStatement[65033-65074]:ReturnStatement[65033-65074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65105-65149]:Block[65105-65149]"
    }, {
      "left" : "throw new RuntimeException(e);",
      "right" : "throw new RuntimeException(e);",
      "info" : "ThrowStatement[65113-65143]:ThrowStatement[65113-65143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65240-65605]:Block[65240-65605]"
    }, {
      "left" : "assert !SwingUtilities.isEventDispatchThread();",
      "right" : "assert !SwingUtilities.isEventDispatchThread();",
      "info" : "AssertStatement[65246-65293]:AssertStatement[65246-65293]"
    }, {
      "left" : "final BlockingQueue<Object> queue = new LinkedBlockingQueue<Object>();",
      "right" : "final BlockingQueue<Object> queue = new LinkedBlockingQueue<Object>();",
      "info" : "VariableDeclarationStatement[65298-65368]:VariableDeclarationStatement[65298-65368]"
    }, {
      "left" : "SwingUtilities.invokeLater(new Runnable() {\n      @Override\n      public void run() {\n        queue.offer(queue);\n      }\n    });",
      "right" : "SwingUtilities.invokeLater(new Runnable() {\n      @Override\n      public void run() {\n        queue.offer(queue);\n      }\n    });",
      "info" : "ExpressionStatement[65373-65502]:ExpressionStatement[65373-65502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65457-65494]:Block[65457-65494]"
    }, {
      "left" : "queue.offer(queue);",
      "right" : "queue.offer(queue);",
      "info" : "ExpressionStatement[65467-65486]:ExpressionStatement[65467-65486]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[65507-65601]:TryStatement[65507-65601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65511-65538]:Block[65511-65538]"
    }, {
      "left" : "queue.take();",
      "right" : "queue.take();",
      "info" : "ExpressionStatement[65519-65532]:ExpressionStatement[65519-65532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65574-65601]:Block[65574-65601]"
    }, {
      "left" : "LOG.error(e);",
      "right" : "LOG.error(e);",
      "info" : "ExpressionStatement[65582-65595]:ExpressionStatement[65582-65595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65706-65961]:Block[65706-65961]"
    }, {
      "left" : "Toolkit.getDefaultToolkit().addAWTEventListener(listener, mask);",
      "right" : "Toolkit.getDefaultToolkit().addAWTEventListener(listener, mask);",
      "info" : "ExpressionStatement[65712-65776]:ExpressionStatement[65712-65776]"
    }, {
      "left" : "Disposer.register(parent, new Disposable() {\n      @Override\n      public void dispose() {\n        Toolkit.getDefaultToolkit().removeAWTEventListener(listener);\n      }\n    });",
      "right" : "Disposer.register(parent, new Disposable() {\n      @Override\n      public void dispose() {\n        Toolkit.getDefaultToolkit().removeAWTEventListener(listener);\n      }\n    });",
      "info" : "ExpressionStatement[65781-65957]:ExpressionStatement[65781-65957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65870-65949]:Block[65870-65949]"
    }, {
      "left" : "Toolkit.getDefaultToolkit().removeAWTEventListener(listener);",
      "right" : "Toolkit.getDefaultToolkit().removeAWTEventListener(listener);",
      "info" : "ExpressionStatement[65880-65941]:ExpressionStatement[65880-65941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66099-66332]:Block[66099-66332]"
    }, {
      "left" : "if (bgColor != null)",
      "right" : "if (bgColor != null)",
      "info" : "IfStatement[66105-66207]:IfStatement[66105-66207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66126-66207]:Block[66126-66207]"
    }, {
      "left" : "g.setColor(bgColor);",
      "right" : "g.setColor(bgColor);",
      "info" : "ExpressionStatement[66134-66154]:ExpressionStatement[66134-66154]"
    }, {
      "left" : "drawLine(g, lineX, startY, lineX, endY);",
      "right" : "drawLine(g, lineX, startY, lineX, endY);",
      "info" : "ExpressionStatement[66161-66201]:ExpressionStatement[66161-66201]"
    }, {
      "left" : "g.setColor(fgColor);",
      "right" : "g.setColor(fgColor);",
      "info" : "ExpressionStatement[66213-66233]:ExpressionStatement[66213-66233]"
    }, {
      "left" : "for (int i = (startY / 2) * 2; i < endY; i += 2)",
      "right" : "for (int i = (startY / 2) * 2; i < endY; i += 2)",
      "info" : "ForStatement[66238-66328]:ForStatement[66238-66328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66287-66328]:Block[66287-66328]"
    }, {
      "left" : "g.drawRect(lineX, i, 0, 0);",
      "right" : "g.drawRect(lineX, i, 0, 0);",
      "info" : "ExpressionStatement[66295-66322]:ExpressionStatement[66295-66322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66470-66704]:Block[66470-66704]"
    }, {
      "left" : "if (bgColor != null)",
      "right" : "if (bgColor != null)",
      "info" : "IfStatement[66476-66578]:IfStatement[66476-66578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66497-66578]:Block[66497-66578]"
    }, {
      "left" : "g.setColor(bgColor);",
      "right" : "g.setColor(bgColor);",
      "info" : "ExpressionStatement[66505-66525]:ExpressionStatement[66505-66525]"
    }, {
      "left" : "drawLine(g, startX, lineY, endX, lineY);",
      "right" : "drawLine(g, startX, lineY, endX, lineY);",
      "info" : "ExpressionStatement[66532-66572]:ExpressionStatement[66532-66572]"
    }, {
      "left" : "g.setColor(fgColor);",
      "right" : "g.setColor(fgColor);",
      "info" : "ExpressionStatement[66584-66604]:ExpressionStatement[66584-66604]"
    }, {
      "left" : "for (int i = (startX / 2) * 2; i < endX; i += 2)",
      "right" : "for (int i = (startX / 2) * 2; i < endX; i += 2)",
      "info" : "ForStatement[66610-66700]:ForStatement[66610-66700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66659-66700]:Block[66659-66700]"
    }, {
      "left" : "g.drawRect(i, lineY, 0, 0);",
      "right" : "g.drawRect(i, lineY, 0, 0);",
      "info" : "ExpressionStatement[66667-66694]:ExpressionStatement[66667-66694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66840-67124]:Block[66840-67124]"
    }, {
      "left" : "if (x1 == x2)",
      "right" : "if (x1 == x2)",
      "info" : "IfStatement[66846-67120]:IfStatement[66846-67120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66860-66923]:Block[66860-66923]"
    }, {
      "left" : "drawVDottedLine(g, x1, y1, y2, bgColor, fgColor);",
      "right" : "drawVDottedLine(g, x1, y1, y2, bgColor, fgColor);",
      "info" : "ExpressionStatement[66868-66917]:ExpressionStatement[66868-66917]"
    }, {
      "left" : "if (y1 == y2)",
      "right" : "if (y1 == y2)",
      "info" : "IfStatement[66933-67120]:IfStatement[66933-67120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66947-67010]:Block[66947-67010]"
    }, {
      "left" : "drawHDottedLine(g, x1, x2, y1, bgColor, fgColor);",
      "right" : "drawHDottedLine(g, x1, x2, y1, bgColor, fgColor);",
      "info" : "ExpressionStatement[66955-67004]:ExpressionStatement[66955-67004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67020-67120]:Block[67020-67120]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Only vertical or horizontal lines are supported\");",
      "right" : "throw new IllegalArgumentException(\"Only vertical or horizontal lines are supported\");",
      "info" : "ThrowStatement[67028-67114]:ThrowStatement[67028-67114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67248-67471]:Block[67248-67471]"
    }, {
      "left" : "g.setColor(highlighting);",
      "right" : "g.setColor(highlighting);",
      "info" : "ExpressionStatement[67254-67279]:ExpressionStatement[67254-67279]"
    }, {
      "left" : "for (int i = x - 1; i <= x + 1; i++)",
      "right" : "for (int i = x - 1; i <= x + 1; i++)",
      "info" : "ForStatement[67284-67412]:ForStatement[67284-67412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67321-67412]:Block[67321-67412]"
    }, {
      "left" : "for (int j = y - 1; j <= y + 1; j++)",
      "right" : "for (int j = y - 1; j <= y + 1; j++)",
      "info" : "ForStatement[67329-67406]:ForStatement[67329-67406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67366-67406]:Block[67366-67406]"
    }, {
      "left" : "g.drawString(s, i, j);",
      "right" : "g.drawString(s, i, j);",
      "info" : "ExpressionStatement[67376-67398]:ExpressionStatement[67376-67398]"
    }, {
      "left" : "g.setColor(foreground);",
      "right" : "g.setColor(foreground);",
      "info" : "ExpressionStatement[67417-67440]:ExpressionStatement[67417-67440]"
    }, {
      "left" : "g.drawString(s, x, y);",
      "right" : "g.drawString(s, x, y);",
      "info" : "ExpressionStatement[67445-67467]:ExpressionStatement[67445-67467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67550-67794]:Block[67550-67794]"
    }, {
      "left" : "final Component owner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();",
      "right" : "final Component owner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();",
      "info" : "VariableDeclarationStatement[67556-67650]:VariableDeclarationStatement[67556-67650]"
    }, {
      "left" : "if (owner == null)",
      "right" : "if (owner == null)",
      "info" : "IfStatement[67655-67687]:IfStatement[67655-67687]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[67674-67687]:ReturnStatement[67674-67687]"
    }, {
      "left" : "if (owner == component)",
      "right" : "if (owner == component)",
      "info" : "IfStatement[67692-67728]:IfStatement[67692-67728]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[67716-67728]:ReturnStatement[67716-67728]"
    }, {
      "left" : "return SwingUtilities.isDescendingFrom(owner, component);",
      "right" : "return SwingUtilities.isDescendingFrom(owner, component);",
      "info" : "ReturnStatement[67733-67790]:ReturnStatement[67733-67790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67848-67907]:Block[67848-67907]"
    }, {
      "left" : "return isCloseClick(e, MouseEvent.MOUSE_PRESSED);",
      "right" : "return isCloseClick(e, MouseEvent.MOUSE_PRESSED);",
      "info" : "ReturnStatement[67854-67903]:ReturnStatement[67854-67903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67979-68162]:Block[67979-68162]"
    }, {
      "left" : "if (e.isPopupTrigger() || e.getID() != effectiveType)",
      "right" : "if (e.isPopupTrigger() || e.getID() != effectiveType)",
      "info" : "IfStatement[67985-68052]:IfStatement[67985-68052]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[68039-68052]:ReturnStatement[68039-68052]"
    }, {
      "left" : "return e.getButton() == MouseEvent.BUTTON2 || e.getButton() == MouseEvent.BUTTON1 && e.isShiftDown();",
      "right" : "return e.getButton() == MouseEvent.BUTTON2 || e.getButton() == MouseEvent.BUTTON1 && e.isShiftDown();",
      "info" : "ReturnStatement[68057-68158]:ReturnStatement[68057-68158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68216-68276]:Block[68216-68276]"
    }, {
      "left" : "return isActionClick(e, MouseEvent.MOUSE_PRESSED);",
      "right" : "return isActionClick(e, MouseEvent.MOUSE_PRESSED);",
      "info" : "ReturnStatement[68222-68272]:ReturnStatement[68222-68272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68349-68405]:Block[68349-68405]"
    }, {
      "left" : "return isActionClick(e, effectiveType, false);",
      "right" : "return isActionClick(e, effectiveType, false);",
      "info" : "ReturnStatement[68355-68401]:ReturnStatement[68355-68401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68498-68657]:Block[68498-68657]"
    }, {
      "left" : "if (!allowShift && isCloseClick(e) || e.isPopupTrigger() || e.getID() != effectiveType)",
      "right" : "if (!allowShift && isCloseClick(e) || e.isPopupTrigger() || e.getID() != effectiveType)",
      "info" : "IfStatement[68504-68605]:IfStatement[68504-68605]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[68592-68605]:ReturnStatement[68592-68605]"
    }, {
      "left" : "return e.getButton() == MouseEvent.BUTTON1;",
      "right" : "return e.getButton() == MouseEvent.BUTTON1;",
      "info" : "ReturnStatement[68610-68653]:ReturnStatement[68610-68653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68729-68857]:Block[68729-68857]"
    }, {
      "left" : "final Component parent = findNearestOpaque(c);",
      "right" : "final Component parent = findNearestOpaque(c);",
      "info" : "VariableDeclarationStatement[68735-68781]:VariableDeclarationStatement[68735-68781]"
    }, {
      "left" : "return parent == null ? c.getBackground() : parent.getBackground();",
      "right" : "return parent == null ? c.getBackground() : parent.getBackground();",
      "info" : "ReturnStatement[68786-68853]:ReturnStatement[68786-68853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68928-69117]:Block[68928-69117]"
    }, {
      "left" : "return findParentByCondition(c, new Condition<Component>() {\n      @Override\n      public boolean value(Component component) {\n        return component.isOpaque();\n      }\n    });",
      "right" : "return findParentByCondition(c, new Condition<Component>() {\n      @Override\n      public boolean value(Component component) {\n        return component.isOpaque();\n      }\n    });",
      "info" : "ReturnStatement[68934-69113]:ReturnStatement[68934-69113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69059-69105]:Block[69059-69105]"
    }, {
      "left" : "return component.isOpaque();",
      "right" : "return component.isOpaque();",
      "info" : "ReturnStatement[69069-69097]:ReturnStatement[69069-69097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69233-69425]:Block[69233-69425]"
    }, {
      "left" : "Component eachParent = c;",
      "right" : "Component eachParent = c;",
      "info" : "VariableDeclarationStatement[69239-69264]:VariableDeclarationStatement[69239-69264]"
    }, {
      "left" : "while (eachParent != null)",
      "right" : "while (eachParent != null)",
      "info" : "WhileStatement[69269-69404]:WhileStatement[69269-69404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69296-69404]:Block[69296-69404]"
    }, {
      "left" : "if (condition.value(eachParent))",
      "right" : "if (condition.value(eachParent))",
      "info" : "IfStatement[69304-69355]:IfStatement[69304-69355]"
    }, {
      "left" : "return eachParent;",
      "right" : "return eachParent;",
      "info" : "ReturnStatement[69337-69355]:ReturnStatement[69337-69355]"
    }, {
      "left" : "eachParent = eachParent.getParent();",
      "right" : "eachParent = eachParent.getParent();",
      "info" : "ExpressionStatement[69362-69398]:ExpressionStatement[69362-69398]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[69409-69421]:ReturnStatement[69409-69421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69499-69562]:Block[69499-69562]"
    }, {
      "left" : "return getCssFontDeclaration(font, null, null, null);",
      "right" : "return getCssFontDeclaration(font, null, null, null);",
      "info" : "ReturnStatement[69505-69558]:ReturnStatement[69505-69558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69732-70435]:Block[69732-70435]"
    }, {
      "left" : "URL resource = liImg != null ? SystemInfo.class.getResource(liImg) : null;",
      "right" : "URL resource = liImg != null ? SystemInfo.class.getResource(liImg) : null;",
      "info" : "VariableDeclarationStatement[69738-69812]:VariableDeclarationStatement[69738-69812]"
    }, {
      "left" : "@NonNls String fontFamilyAndSize = \"font-family:'\" + font.getFamily() + \"'; font-size:\" + font.getSize() + \"pt;\";",
      "right" : "@NonNls String fontFamilyAndSize = \"font-family:'\" + font.getFamily() + \"'; font-size:\" + font.getSize() + \"pt;\";",
      "info" : "VariableDeclarationStatement[69818-69931]:VariableDeclarationStatement[69818-69931]"
    }, {
      "left" : "@NonNls @Language(\"HTML\")\n    String body = \"body, div, td, p {\" + fontFamilyAndSize + \" \" + (fgColor != null ? \"color:#\" + ColorUtil.toHex(fgColor)+\";\" : \"\") + \"}\\n\";",
      "right" : "@NonNls @Language(\"HTML\")\n    String body = \"body, div, td, p {\" + fontFamilyAndSize + \" \" + (fgColor != null ? \"color:#\" + ColorUtil.toHex(fgColor)+\";\" : \"\") + \"}\\n\";",
      "info" : "VariableDeclarationStatement[69936-70103]:VariableDeclarationStatement[69936-70103]"
    }, {
      "left" : "if (resource != null)",
      "right" : "if (resource != null)",
      "info" : "IfStatement[70108-70253]:IfStatement[70108-70253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70130-70253]:Block[70130-70253]"
    }, {
      "left" : "body += \"ul {list-style-image:url('\" + StringUtil.escapeCharCharacters(resource.toExternalForm()) + \"');}\\n\";",
      "right" : "body += \"ul {list-style-image:url('\" + StringUtil.escapeCharCharacters(resource.toExternalForm()) + \"');}\\n\";",
      "info" : "ExpressionStatement[70138-70247]:ExpressionStatement[70138-70247]"
    }, {
      "left" : "@NonNls String link = linkColor != null ? \"a {\" + fontFamilyAndSize + \" color:#\"+ColorUtil.toHex(linkColor) + \";}\\n\" : \"\";",
      "right" : "@NonNls String link = linkColor != null ? \"a {\" + fontFamilyAndSize + \" color:#\"+ColorUtil.toHex(linkColor) + \";}\\n\" : \"\";",
      "info" : "VariableDeclarationStatement[70258-70380]:VariableDeclarationStatement[70258-70380]"
    }, {
      "left" : "return \"<style>\\n\" + body + link + \"</style>\";",
      "right" : "return \"<style>\\n\" + body + link + \"</style>\";",
      "info" : "ReturnStatement[70385-70431]:ReturnStatement[70385-70431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70479-70583]:Block[70479-70583]"
    }, {
      "left" : "return SystemInfo.isWinVistaOrNewer && \"Windows\".equals(UIManager.getLookAndFeel().getName());",
      "right" : "return SystemInfo.isWinVistaOrNewer && \"Windows\".equals(UIManager.getLookAndFeel().getName());",
      "info" : "ReturnStatement[70485-70579]:ReturnStatement[70485-70579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70629-70743]:Block[70629-70743]"
    }, {
      "left" : "return isWinLafOnVista() ||\n           isUnderNimbusLookAndFeel() ||\n           isUnderGTKLookAndFeel();",
      "right" : "return isWinLafOnVista() ||\n           isUnderNimbusLookAndFeel() ||\n           isUnderGTKLookAndFeel();",
      "info" : "ReturnStatement[70635-70739]:ReturnStatement[70635-70739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70789-70849]:Block[70789-70849]"
    }, {
      "left" : "return toAlpha(getListSelectionBackground(), 100);",
      "right" : "return toAlpha(getListSelectionBackground(), 100);",
      "info" : "ReturnStatement[70795-70845]:ReturnStatement[70795-70845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70897-70931]:Block[70897-70931]"
    }, {
      "left" : "return getBoundsColor();",
      "right" : "return getBoundsColor();",
      "info" : "ReturnStatement[70903-70927]:ReturnStatement[70903-70927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70972-71006]:Block[70972-71006]"
    }, {
      "left" : "return getBorderColor();",
      "right" : "return getBorderColor();",
      "info" : "ReturnStatement[70978-71002]:ReturnStatement[70978-71002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71062-71132]:Block[71062-71132]"
    }, {
      "left" : "return focused ? getFocusedBoundsColor() : getBoundsColor();",
      "right" : "return focused ? getFocusedBoundsColor() : getBoundsColor();",
      "info" : "ReturnStatement[71068-71128]:ReturnStatement[71068-71128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71200-71344]:Block[71200-71344]"
    }, {
      "left" : "Color actual = color != null ? color : Color.black;",
      "right" : "Color actual = color != null ? color : Color.black;",
      "info" : "VariableDeclarationStatement[71206-71257]:VariableDeclarationStatement[71206-71257]"
    }, {
      "left" : "return new Color(actual.getRed(), actual.getGreen(), actual.getBlue(), alpha);",
      "right" : "return new Color(actual.getRed(), actual.getGreen(), actual.getBlue(), alpha);",
      "info" : "ReturnStatement[71262-71340]:ReturnStatement[71262-71340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71651-71763]:Block[71651-71763]"
    }, {
      "left" : "return component != null && component.isFocusable() && component.isEnabled() && component.isShowing();",
      "right" : "return component != null && component.isFocusable() && component.isEnabled() && component.isShowing();",
      "info" : "ReturnStatement[71657-71759]:ReturnStatement[71657-71759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71828-72049]:Block[71828-72049]"
    }, {
      "left" : "if (c.isShowing())",
      "right" : "if (c.isShowing())",
      "info" : "IfStatement[71834-72045]:IfStatement[71834-72045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71853-71884]:Block[71853-71884]"
    }, {
      "left" : "c.requestFocus();",
      "right" : "c.requestFocus();",
      "info" : "ExpressionStatement[71861-71878]:ExpressionStatement[71861-71878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71894-72045]:Block[71894-72045]"
    }, {
      "left" : "SwingUtilities.invokeLater(new Runnable() {\n        @Override\n        public void run() {\n          c.requestFocus();\n        }\n      });",
      "right" : "SwingUtilities.invokeLater(new Runnable() {\n        @Override\n        public void run() {\n          c.requestFocus();\n        }\n      });",
      "info" : "ExpressionStatement[71902-72039]:ExpressionStatement[71902-72039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71990-72029]:Block[71990-72029]"
    }, {
      "left" : "c.requestFocus();",
      "right" : "c.requestFocus();",
      "info" : "ExpressionStatement[72002-72019]:ExpressionStatement[72002-72019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72185-72741]:Block[72185-72741]"
    }, {
      "left" : "if (c == null)",
      "right" : "if (c == null)",
      "info" : "IfStatement[72191-72213]:IfStatement[72191-72213]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[72206-72213]:ReturnStatement[72206-72213]"
    }, {
      "left" : "final MouseListener[] mouseListeners = c.getMouseListeners();",
      "right" : "final MouseListener[] mouseListeners = c.getMouseListeners();",
      "info" : "VariableDeclarationStatement[72219-72280]:VariableDeclarationStatement[72219-72280]"
    }, {
      "left" : "for (MouseListener each : mouseListeners)",
      "right" : "for (MouseListener each : mouseListeners)",
      "info" : "EnhancedForStatement[72285-72369]:EnhancedForStatement[72285-72369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72327-72369]:Block[72327-72369]"
    }, {
      "left" : "c.removeMouseListener(each);",
      "right" : "c.removeMouseListener(each);",
      "info" : "ExpressionStatement[72335-72363]:ExpressionStatement[72335-72363]"
    }, {
      "left" : "final MouseMotionListener[] motionListeners = c.getMouseMotionListeners();",
      "right" : "final MouseMotionListener[] motionListeners = c.getMouseMotionListeners();",
      "info" : "VariableDeclarationStatement[72375-72449]:VariableDeclarationStatement[72375-72449]"
    }, {
      "left" : "for (MouseMotionListener each : motionListeners)",
      "right" : "for (MouseMotionListener each : motionListeners)",
      "info" : "EnhancedForStatement[72454-72551]:EnhancedForStatement[72454-72551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72503-72551]:Block[72503-72551]"
    }, {
      "left" : "c.removeMouseMotionListener(each);",
      "right" : "c.removeMouseMotionListener(each);",
      "info" : "ExpressionStatement[72511-72545]:ExpressionStatement[72511-72545]"
    }, {
      "left" : "final MouseWheelListener[] mouseWheelListeners = c.getMouseWheelListeners();",
      "right" : "final MouseWheelListener[] mouseWheelListeners = c.getMouseWheelListeners();",
      "info" : "VariableDeclarationStatement[72557-72633]:VariableDeclarationStatement[72557-72633]"
    }, {
      "left" : "for (MouseWheelListener each : mouseWheelListeners)",
      "right" : "for (MouseWheelListener each : mouseWheelListeners)",
      "info" : "EnhancedForStatement[72638-72737]:EnhancedForStatement[72638-72737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72690-72737]:Block[72690-72737]"
    }, {
      "left" : "c.removeMouseWheelListener(each);",
      "right" : "c.removeMouseWheelListener(each);",
      "info" : "ExpressionStatement[72698-72731]:ExpressionStatement[72698-72731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72809-73132]:Block[72809-73132]"
    }, {
      "left" : "if (!isUnderNativeMacLookAndFeel())",
      "right" : "if (!isUnderNativeMacLookAndFeel())",
      "info" : "IfStatement[72815-72858]:IfStatement[72815-72858]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[72851-72858]:ReturnStatement[72851-72858]"
    }, {
      "left" : "SwingUtilities.invokeLater(new Runnable() {\n      @Override\n      public void run() {\n        if (isToDispose(progress)) {\n          progress.getUI().uninstallUI(progress);\n          progress.putClientProperty(\"isDisposed\", Boolean.TRUE);\n        }\n      }\n    });",
      "right" : "SwingUtilities.invokeLater(new Runnable() {\n      @Override\n      public void run() {\n        if (isToDispose(progress)) {\n          progress.getUI().uninstallUI(progress);\n          progress.putClientProperty(\"isDisposed\", Boolean.TRUE);\n        }\n      }\n    });",
      "info" : "ExpressionStatement[72864-73128]:ExpressionStatement[72864-73128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72948-73120]:Block[72948-73120]"
    }, {
      "left" : "if (isToDispose(progress))",
      "right" : "if (isToDispose(progress))",
      "info" : "IfStatement[72958-73112]:IfStatement[72958-73112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72985-73112]:Block[72985-73112]"
    }, {
      "left" : "progress.getUI().uninstallUI(progress);",
      "right" : "progress.getUI().uninstallUI(progress);",
      "info" : "ExpressionStatement[72997-73036]:ExpressionStatement[72997-73036]"
    }, {
      "left" : "progress.putClientProperty(\"isDisposed\", Boolean.TRUE);",
      "right" : "progress.putClientProperty(\"isDisposed\", Boolean.TRUE);",
      "info" : "ExpressionStatement[73047-73102]:ExpressionStatement[73047-73102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73200-73719]:Block[73200-73719]"
    }, {
      "left" : "final ProgressBarUI ui = progress.getUI();",
      "right" : "final ProgressBarUI ui = progress.getUI();",
      "info" : "VariableDeclarationStatement[73206-73248]:VariableDeclarationStatement[73206-73248]"
    }, {
      "left" : "if (ui == null)",
      "right" : "if (ui == null)",
      "info" : "IfStatement[73254-73283]:IfStatement[73254-73283]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[73270-73283]:ReturnStatement[73270-73283]"
    }, {
      "left" : "if (Boolean.TYPE.equals(progress.getClientProperty(\"isDisposed\")))",
      "right" : "if (Boolean.TYPE.equals(progress.getClientProperty(\"isDisposed\")))",
      "info" : "IfStatement[73288-73368]:IfStatement[73288-73368]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[73355-73368]:ReturnStatement[73355-73368]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[73374-73715]:TryStatement[73374-73715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73378-73589]:Block[73378-73589]"
    }, {
      "left" : "final Field progressBarField = ReflectionUtil.findField(ui.getClass(), JProgressBar.class, \"progressBar\");",
      "right" : "final Field progressBarField = ReflectionUtil.findField(ui.getClass(), JProgressBar.class, \"progressBar\");",
      "info" : "VariableDeclarationStatement[73386-73492]:VariableDeclarationStatement[73386-73492]"
    }, {
      "left" : "progressBarField.setAccessible(true);",
      "right" : "progressBarField.setAccessible(true);",
      "info" : "ExpressionStatement[73499-73536]:ExpressionStatement[73499-73536]"
    }, {
      "left" : "return progressBarField.get(ui) != null;",
      "right" : "return progressBarField.get(ui) != null;",
      "info" : "ReturnStatement[73543-73583]:ReturnStatement[73543-73583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73625-73651]:Block[73625-73651]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[73633-73645]:ReturnStatement[73633-73645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73689-73715]:Block[73689-73715]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[73697-73709]:ReturnStatement[73697-73709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73791-73988]:Block[73791-73988]"
    }, {
      "left" : "if (c == null)",
      "right" : "if (c == null)",
      "info" : "IfStatement[73797-73824]:IfStatement[73797-73824]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[73812-73824]:ReturnStatement[73812-73824]"
    }, {
      "left" : "Component eachParent = c;",
      "right" : "Component eachParent = c;",
      "info" : "VariableDeclarationStatement[73830-73855]:VariableDeclarationStatement[73830-73855]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[73860-73984]:WhileStatement[73860-73984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73873-73984]:Block[73873-73984]"
    }, {
      "left" : "if (eachParent.getParent() == null)",
      "right" : "if (eachParent.getParent() == null)",
      "info" : "IfStatement[73881-73935]:IfStatement[73881-73935]"
    }, {
      "left" : "return eachParent;",
      "right" : "return eachParent;",
      "info" : "ReturnStatement[73917-73935]:ReturnStatement[73917-73935]"
    }, {
      "left" : "eachParent = eachParent.getParent();",
      "right" : "eachParent = eachParent.getParent();",
      "info" : "ExpressionStatement[73942-73978]:ExpressionStatement[73942-73978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74035-74072]:Block[74035-74072]"
    }, {
      "left" : "return ACTIVE_HEADER_COLOR;",
      "right" : "return ACTIVE_HEADER_COLOR;",
      "info" : "ReturnStatement[74041-74068]:ReturnStatement[74041-74068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74121-74160]:Block[74121-74160]"
    }, {
      "left" : "return INACTIVE_HEADER_COLOR;",
      "right" : "return INACTIVE_HEADER_COLOR;",
      "info" : "ReturnStatement[74127-74156]:ReturnStatement[74127-74156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74257-74317]:Block[74257-74317]"
    }, {
      "left" : "return isUnderDarcula() ? Gray._50 : BORDER_COLOR;",
      "right" : "return isUnderDarcula() ? Gray._50 : BORDER_COLOR;",
      "info" : "ReturnStatement[74263-74313]:ReturnStatement[74263-74313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74362-74457]:Block[74362-74457]"
    }, {
      "left" : "Font defFont = getLabelFont();",
      "right" : "Font defFont = getLabelFont();",
      "info" : "VariableDeclarationStatement[74368-74398]:VariableDeclarationStatement[74368-74398]"
    }, {
      "left" : "return defFont.deriveFont(defFont.getSize() - 1f);",
      "right" : "return defFont.deriveFont(defFont.getSize() - 1f);",
      "info" : "ReturnStatement[74403-74453]:ReturnStatement[74403-74453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74562-74596]:Block[74562-74596]"
    }, {
      "left" : "return getBorderColor();",
      "right" : "return getBorderColor();",
      "info" : "ReturnStatement[74568-74592]:ReturnStatement[74568-74592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74699-74733]:Block[74699-74733]"
    }, {
      "left" : "return getBorderColor();",
      "right" : "return getBorderColor();",
      "info" : "ReturnStatement[74705-74729]:ReturnStatement[74705-74729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74839-74873]:Block[74839-74873]"
    }, {
      "left" : "return getBorderColor();",
      "right" : "return getBorderColor();",
      "info" : "ReturnStatement[74845-74869]:ReturnStatement[74845-74869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74948-75268]:Block[74948-75268]"
    }, {
      "left" : "if (url == null)",
      "right" : "if (url == null)",
      "info" : "IfStatement[74954-74983]:IfStatement[74954-74983]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[74971-74983]:ReturnStatement[74971-74983]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[74988-75264]:TryStatement[74988-75264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74992-75167]:Block[74992-75167]"
    }, {
      "left" : "StyleSheet styleSheet = new StyleSheet();",
      "right" : "StyleSheet styleSheet = new StyleSheet();",
      "info" : "VariableDeclarationStatement[75000-75041]:VariableDeclarationStatement[75000-75041]"
    }, {
      "left" : "styleSheet.loadRules(new InputStreamReader(url.openStream(), CharsetToolkit.UTF8), url);",
      "right" : "styleSheet.loadRules(new InputStreamReader(url.openStream(), CharsetToolkit.UTF8), url);",
      "info" : "ExpressionStatement[75048-75136]:ExpressionStatement[75048-75136]"
    }, {
      "left" : "return styleSheet;",
      "right" : "return styleSheet;",
      "info" : "ReturnStatement[75143-75161]:ReturnStatement[75143-75161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75194-75264]:Block[75194-75264]"
    }, {
      "left" : "LOG.warn(url + \" loading failed\", e);",
      "right" : "LOG.warn(url + \" loading failed\", e);",
      "info" : "ExpressionStatement[75202-75239]:ExpressionStatement[75202-75239]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[75246-75258]:ReturnStatement[75246-75258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76046-77032]:Block[76228-77214]"
    }, {
      "left" : "new AwtVisitor(c) {\n      @Override\n      public boolean visit(final Component component) {\n        if (component instanceof JScrollPane) {\n          if (!hasNonPrimitiveParents(c, component)) {\n            final JScrollPane scrollPane = (JScrollPane)component;\n            Integer keepBorderSides = getClientProperty(scrollPane, KEEP_BORDER_SIDES);\n            if (keepBorderSides != null) {\n              if (scrollPane.getBorder() instanceof LineBorder) {\n                Color color = ((LineBorder)scrollPane.getBorder()).getLineColor();\n                scrollPane.setBorder(new SideBorder(color, keepBorderSides.intValue()));\n              }\n              else {\n                scrollPane.setBorder(new SideBorder(getBoundsColor(), keepBorderSides.intValue()));\n              }\n            }\n            else {\n              scrollPane.setBorder(new SideBorder(getBoundsColor(), SideBorder.NONE));\n            }\n          }\n        }\n        return false;\n      }\n    };",
      "right" : "new AwtVisitor(c) {\n      @Override\n      public boolean visit(final Component component) {\n        if (component instanceof JScrollPane) {\n          if (!hasNonPrimitiveParents(c, component)) {\n            final JScrollPane scrollPane = (JScrollPane)component;\n            Integer keepBorderSides = getClientProperty(scrollPane, KEEP_BORDER_SIDES);\n            if (keepBorderSides != null) {\n              if (scrollPane.getBorder() instanceof LineBorder) {\n                Color color = ((LineBorder)scrollPane.getBorder()).getLineColor();\n                scrollPane.setBorder(new SideBorder(color, keepBorderSides.intValue()));\n              }\n              else {\n                scrollPane.setBorder(new SideBorder(getBoundsColor(), keepBorderSides.intValue()));\n              }\n            }\n            else {\n              scrollPane.setBorder(new SideBorder(getBoundsColor(), SideBorder.NONE));\n            }\n          }\n        }\n        return false;\n      }\n    };",
      "info" : "ExpressionStatement[76052-77028]:ExpressionStatement[76234-77210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76142-77021]:Block[76324-77203]"
    }, {
      "left" : "if (component instanceof JScrollPane)",
      "right" : "if (component instanceof JScrollPane)",
      "info" : "IfStatement[76152-76991]:IfStatement[76334-77173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76190-76991]:Block[76372-77173]"
    }, {
      "left" : "if (!hasNonPrimitiveParents(c, component))",
      "right" : "if (!hasNonPrimitiveParents(c, component))",
      "info" : "IfStatement[76202-76981]:IfStatement[76384-77163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76245-76981]:Block[76427-77163]"
    }, {
      "left" : "final JScrollPane scrollPane = (JScrollPane)component;",
      "right" : "final JScrollPane scrollPane = (JScrollPane)component;",
      "info" : "VariableDeclarationStatement[76259-76313]:VariableDeclarationStatement[76441-76495]"
    }, {
      "left" : "Integer keepBorderSides = getClientProperty(scrollPane, KEEP_BORDER_SIDES);",
      "right" : "Integer keepBorderSides = getClientProperty(scrollPane, KEEP_BORDER_SIDES);",
      "info" : "VariableDeclarationStatement[76326-76401]:VariableDeclarationStatement[76508-76583]"
    }, {
      "left" : "if (keepBorderSides != null)",
      "right" : "if (keepBorderSides != null)",
      "info" : "IfStatement[76414-76969]:IfStatement[76596-77151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76443-76849]:Block[76625-77031]"
    }, {
      "left" : "if (scrollPane.getBorder() instanceof LineBorder)",
      "right" : "if (scrollPane.getBorder() instanceof LineBorder)",
      "info" : "IfStatement[76459-76835]:IfStatement[76641-77017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76509-76698]:Block[76691-76880]"
    }, {
      "left" : "Color color = ((LineBorder)scrollPane.getBorder()).getLineColor();",
      "right" : "Color color = ((LineBorder)scrollPane.getBorder()).getLineColor();",
      "info" : "VariableDeclarationStatement[76527-76593]:VariableDeclarationStatement[76709-76775]"
    }, {
      "left" : "scrollPane.setBorder(new SideBorder(color, keepBorderSides.intValue()));",
      "right" : "scrollPane.setBorder(new SideBorder(color, keepBorderSides.intValue()));",
      "info" : "ExpressionStatement[76610-76682]:ExpressionStatement[76792-76864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76718-76835]:Block[76900-77017]"
    }, {
      "left" : "scrollPane.setBorder(new SideBorder(getBoundsColor(), keepBorderSides.intValue()));",
      "right" : "scrollPane.setBorder(new SideBorder(getBoundsColor(), keepBorderSides.intValue()));",
      "info" : "ExpressionStatement[76736-76819]:ExpressionStatement[76918-77001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76867-76969]:Block[77049-77151]"
    }, {
      "left" : "scrollPane.setBorder(new SideBorder(getBoundsColor(), SideBorder.NONE));",
      "right" : "scrollPane.setBorder(new SideBorder(getBoundsColor(), SideBorder.NONE));",
      "info" : "ExpressionStatement[76883-76955]:ExpressionStatement[77065-77137]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[77000-77013]:ReturnStatement[77182-77195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77116-77352]:Block[77298-77534]"
    }, {
      "left" : "Component eachParent = c.getParent();",
      "right" : "Component eachParent = c.getParent();",
      "info" : "VariableDeclarationStatement[77122-77159]:VariableDeclarationStatement[77304-77341]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[77164-77348]:WhileStatement[77346-77530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77177-77348]:Block[77359-77530]"
    }, {
      "left" : "if (eachParent == null || eachParent == stopParent)",
      "right" : "if (eachParent == null || eachParent == stopParent)",
      "info" : "IfStatement[77185-77250]:IfStatement[77367-77432]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[77237-77250]:ReturnStatement[77419-77432]"
    }, {
      "left" : "if (!isPrimitive(eachParent))",
      "right" : "if (!isPrimitive(eachParent))",
      "info" : "IfStatement[77257-77299]:IfStatement[77439-77481]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[77287-77299]:ReturnStatement[77469-77481]"
    }, {
      "left" : "eachParent = eachParent.getParent();",
      "right" : "eachParent = eachParent.getParent();",
      "info" : "ExpressionStatement[77306-77342]:ExpressionStatement[77488-77524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77403-77469]:Block[77585-77651]"
    }, {
      "left" : "return c instanceof JPanel || c instanceof JLayeredPane;",
      "right" : "return c instanceof JPanel || c instanceof JLayeredPane;",
      "info" : "ReturnStatement[77409-77465]:ReturnStatement[77591-77647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77546-77611]:Block[77728-77793]"
    }, {
      "left" : "return getCenterPoint(new Rectangle(container), child);",
      "right" : "return getCenterPoint(new Rectangle(container), child);",
      "info" : "ReturnStatement[77552-77607]:ReturnStatement[77734-77789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77688-77837]:Block[77870-78019]"
    }, {
      "left" : "return new Point(\n      container.x + (container.width - child.width) / 2,\n      container.y + (container.height - child.height) / 2\n    );",
      "right" : "return new Point(\n      container.x + (container.width - child.width) / 2,\n      container.y + (container.height - child.height) / 2\n    );",
      "info" : "ReturnStatement[77694-77833]:ReturnStatement[77876-78015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77882-77915]:Block[78064-78097]"
    }, {
      "left" : "return toHtml(html, 0);",
      "right" : "return toHtml(html, 0);",
      "info" : "ReturnStatement[77888-77911]:ReturnStatement[78070-78093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77990-78423]:Block[78172-78605]"
    }, {
      "left" : "html = CLOSE_TAG_PATTERN.matcher(html).replaceAll(\"<$1$2></$1>\");",
      "right" : "html = CLOSE_TAG_PATTERN.matcher(html).replaceAll(\"<$1$2></$1>\");",
      "info" : "ExpressionStatement[77996-78061]:ExpressionStatement[78178-78243]"
    }, {
      "left" : "Font font = getLabelFont();",
      "right" : "Font font = getLabelFont();",
      "info" : "VariableDeclarationStatement[78066-78093]:VariableDeclarationStatement[78248-78275]"
    }, {
      "left" : "@NonNls String family = font != null ? font.getFamily() : \"Tahoma\";",
      "right" : "@NonNls String family = font != null ? font.getFamily() : \"Tahoma\";",
      "info" : "VariableDeclarationStatement[78098-78165]:VariableDeclarationStatement[78280-78347]"
    }, {
      "left" : "int size = font != null ? font.getSize() : 11;",
      "right" : "int size = font != null ? font.getSize() : 11;",
      "info" : "VariableDeclarationStatement[78170-78216]:VariableDeclarationStatement[78352-78398]"
    }, {
      "left" : "return \"<html><style>body { font-family: \"\n           + family + \"; font-size: \"\n           + size + \";} ul li {list-style-type:circle;}</style>\"\n           + addPadding(html, hPadding) + \"</html>\";",
      "right" : "return \"<html><style>body { font-family: \"\n           + family + \"; font-size: \"\n           + size + \";} ul li {list-style-type:circle;}</style>\"\n           + addPadding(html, hPadding) + \"</html>\";",
      "info" : "ReturnStatement[78221-78419]:ReturnStatement[78403-78601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78492-78595]:Block[78674-78777]"
    }, {
      "left" : "return String.format(\"<p style=\\\"margin: 0 %dpx 0 %dpx;\\\">%s</p>\", hPadding, hPadding, html);",
      "right" : "return String.format(\"<p style=\\\"margin: 0 %dpx 0 %dpx;\\\">%s</p>\", hPadding, hPadding, html);",
      "info" : "ReturnStatement[78498-78591]:ReturnStatement[78680-78773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78651-79172]:Block[78833-79354]"
    }, {
      "left" : "@NonNls StringBuilder result = new StringBuilder();",
      "right" : "@NonNls StringBuilder result = new StringBuilder();",
      "info" : "VariableDeclarationStatement[78657-78708]:VariableDeclarationStatement[78839-78890]"
    }, {
      "left" : "int currentPos = 0;",
      "right" : "int currentPos = 0;",
      "info" : "VariableDeclarationStatement[78713-78732]:VariableDeclarationStatement[78895-78914]"
    }, {
      "left" : "int braces = 0;",
      "right" : "int braces = 0;",
      "info" : "VariableDeclarationStatement[78737-78752]:VariableDeclarationStatement[78919-78934]"
    }, {
      "left" : "while (currentPos < html.length())",
      "right" : "while (currentPos < html.length())",
      "info" : "WhileStatement[78757-79137]:WhileStatement[78939-79319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78792-79137]:Block[78974-79319]"
    }, {
      "left" : "String each = html.substring(currentPos, currentPos + 1);",
      "right" : "String each = html.substring(currentPos, currentPos + 1);",
      "info" : "VariableDeclarationStatement[78800-78857]:VariableDeclarationStatement[78982-79039]"
    }, {
      "left" : "if (\"<\".equals(each))",
      "right" : "if (\"<\".equals(each))",
      "info" : "IfStatement[78864-78974]:IfStatement[79046-79156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78886-78913]:Block[79068-79095]"
    }, {
      "left" : "braces++;",
      "right" : "braces++;",
      "info" : "ExpressionStatement[78896-78905]:ExpressionStatement[79078-79087]"
    }, {
      "left" : "if (\">\".equals(each))",
      "right" : "if (\">\".equals(each))",
      "info" : "IfStatement[78925-78974]:IfStatement[79107-79156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78947-78974]:Block[79129-79156]"
    }, {
      "left" : "braces--;",
      "right" : "braces--;",
      "info" : "ExpressionStatement[78957-78966]:ExpressionStatement[79139-79148]"
    }, {
      "left" : "if (\" \".equals(each) && braces == 0)",
      "right" : "if (\" \".equals(each) && braces == 0)",
      "info" : "IfStatement[78982-79111]:IfStatement[79164-79293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79019-79061]:Block[79201-79243]"
    }, {
      "left" : "result.append(\"&nbsp;\");",
      "right" : "result.append(\"&nbsp;\");",
      "info" : "ExpressionStatement[79029-79053]:ExpressionStatement[79211-79235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79073-79111]:Block[79255-79293]"
    }, {
      "left" : "result.append(each);",
      "right" : "result.append(each);",
      "info" : "ExpressionStatement[79083-79103]:ExpressionStatement[79265-79285]"
    }, {
      "left" : "currentPos++;",
      "right" : "currentPos++;",
      "info" : "ExpressionStatement[79118-79131]:ExpressionStatement[79300-79313]"
    }, {
      "left" : "return result.toString();",
      "right" : "return result.toString();",
      "info" : "ReturnStatement[79143-79168]:ReturnStatement[79325-79350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79243-79427]:Block[79425-79609]"
    }, {
      "left" : "if (EdtInvocationManager.getInstance().isEventDispatchThread())",
      "right" : "if (EdtInvocationManager.getInstance().isEventDispatchThread())",
      "info" : "IfStatement[79249-79423]:IfStatement[79431-79605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79313-79342]:Block[79495-79524]"
    }, {
      "left" : "runnable.run();",
      "right" : "runnable.run();",
      "info" : "ExpressionStatement[79321-79336]:ExpressionStatement[79503-79518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79352-79423]:Block[79534-79605]"
    }, {
      "left" : "EdtInvocationManager.getInstance().invokeLater(runnable);",
      "right" : "EdtInvocationManager.getInstance().invokeLater(runnable);",
      "info" : "ExpressionStatement[79360-79417]:ExpressionStatement[79542-79599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79796-80062]:Block[79978-80244]"
    }, {
      "left" : "if (EdtInvocationManager.getInstance().isEventDispatchThread())",
      "right" : "if (EdtInvocationManager.getInstance().isEventDispatchThread())",
      "info" : "IfStatement[79802-80058]:IfStatement[79984-80240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79866-79895]:Block[80048-80077]"
    }, {
      "left" : "runnable.run();",
      "right" : "runnable.run();",
      "info" : "ExpressionStatement[79874-79889]:ExpressionStatement[80056-80071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79905-80058]:Block[80087-80240]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[79913-80052]:TryStatement[80095-80234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79917-79994]:Block[80099-80176]"
    }, {
      "left" : "EdtInvocationManager.getInstance().invokeAndWait(runnable);",
      "right" : "EdtInvocationManager.getInstance().invokeAndWait(runnable);",
      "info" : "ExpressionStatement[79927-79986]:ExpressionStatement[80109-80168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80021-80052]:Block[80203-80234]"
    }, {
      "left" : "LOG.error(e);",
      "right" : "LOG.error(e);",
      "info" : "ExpressionStatement[80031-80044]:ExpressionStatement[80213-80226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80447-80660]:Block[80629-80842]"
    }, {
      "left" : "final Ref<T> result = Ref.create();",
      "right" : "final Ref<T> result = Ref.create();",
      "info" : "VariableDeclarationStatement[80453-80488]:VariableDeclarationStatement[80635-80670]"
    }, {
      "left" : "invokeAndWaitIfNeeded(new Runnable() {\n      @Override\n      public void run() {\n        result.set(computable.compute());\n      }\n    });",
      "right" : "invokeAndWaitIfNeeded(new Runnable() {\n      @Override\n      public void run() {\n        result.set(computable.compute());\n      }\n    });",
      "info" : "ExpressionStatement[80493-80631]:ExpressionStatement[80675-80813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80572-80623]:Block[80754-80805]"
    }, {
      "left" : "result.set(computable.compute());",
      "right" : "result.set(computable.compute());",
      "info" : "ExpressionStatement[80582-80615]:ExpressionStatement[80764-80797]"
    }, {
      "left" : "return result.get();",
      "right" : "return result.get();",
      "info" : "ReturnStatement[80636-80656]:ReturnStatement[80818-80838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81061-81548]:Block[81243-81730]"
    }, {
      "left" : "if (EdtInvocationManager.getInstance().isEventDispatchThread())",
      "right" : "if (EdtInvocationManager.getInstance().isEventDispatchThread())",
      "info" : "IfStatement[81067-81544]:IfStatement[81249-81726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81131-81160]:Block[81313-81342]"
    }, {
      "left" : "runnable.run();",
      "right" : "runnable.run();",
      "info" : "ExpressionStatement[81139-81154]:ExpressionStatement[81321-81336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81170-81544]:Block[81352-81726]"
    }, {
      "left" : "final Ref<Throwable> ref = Ref.create();",
      "right" : "final Ref<Throwable> ref = Ref.create();",
      "info" : "VariableDeclarationStatement[81178-81218]:VariableDeclarationStatement[81360-81400]"
    }, {
      "left" : "EdtInvocationManager.getInstance().invokeAndWait(new Runnable() {\n        @Override\n        public void run() {\n          try {\n            runnable.run();\n          }\n          catch (Throwable throwable) {\n            ref.set(throwable);\n          }\n        }\n      });",
      "right" : "EdtInvocationManager.getInstance().invokeAndWait(new Runnable() {\n        @Override\n        public void run() {\n          try {\n            runnable.run();\n          }\n          catch (Throwable throwable) {\n            ref.set(throwable);\n          }\n        }\n      });",
      "info" : "ExpressionStatement[81225-81496]:ExpressionStatement[81407-81678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81335-81486]:Block[81517-81668]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[81347-81476]:TryStatement[81529-81658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81351-81392]:Block[81533-81574]"
    }, {
      "left" : "runnable.run();",
      "right" : "runnable.run();",
      "info" : "ExpressionStatement[81365-81380]:ExpressionStatement[81547-81562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81431-81476]:Block[81613-81658]"
    }, {
      "left" : "ref.set(throwable);",
      "right" : "ref.set(throwable);",
      "info" : "ExpressionStatement[81445-81464]:ExpressionStatement[81627-81646]"
    }, {
      "left" : "if (!ref.isNull())",
      "right" : "if (!ref.isNull())",
      "info" : "IfStatement[81503-81538]:IfStatement[81685-81720]"
    }, {
      "left" : "throw ref.get();",
      "right" : "throw ref.get();",
      "info" : "ThrowStatement[81522-81538]:ThrowStatement[81704-81720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81610-81726]:Block[81792-81908]"
    }, {
      "left" : "return c instanceof JComponent && Boolean.TRUE.equals(((JComponent)c).getClientProperty(FOCUS_PROXY_KEY));",
      "right" : "return c instanceof JComponent && Boolean.TRUE.equals(((JComponent)c).getClientProperty(FOCUS_PROXY_KEY));",
      "info" : "ReturnStatement[81616-81722]:ReturnStatement[81798-81904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81794-81872]:Block[81976-82054]"
    }, {
      "left" : "c.putClientProperty(FOCUS_PROXY_KEY, isProxy ? Boolean.TRUE : null);",
      "right" : "c.putClientProperty(FOCUS_PROXY_KEY, isProxy ? Boolean.TRUE : null);",
      "info" : "ExpressionStatement[81800-81868]:ExpressionStatement[81982-82050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81955-82032]:Block[82137-82214]"
    }, {
      "left" : "if (map.get(stroke) == null)",
      "right" : "if (map.get(stroke) == null)",
      "info" : "IfStatement[81961-82028]:IfStatement[82143-82210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81990-82028]:Block[82172-82210]"
    }, {
      "left" : "map.put(stroke, action);",
      "right" : "map.put(stroke, action);",
      "info" : "ExpressionStatement[81998-82022]:ExpressionStatement[82180-82204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82260-82440]:Block[82442-82622]"
    }, {
      "left" : "final Color oldBackGround = component.getBackground();",
      "right" : "final Color oldBackGround = component.getBackground();",
      "info" : "VariableDeclarationStatement[82266-82320]:VariableDeclarationStatement[82448-82502]"
    }, {
      "left" : "if (background == null || !background.equals(oldBackGround))",
      "right" : "if (background == null || !background.equals(oldBackGround))",
      "info" : "IfStatement[82325-82436]:IfStatement[82507-82618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82386-82436]:Block[82568-82618]"
    }, {
      "left" : "component.setBackground(background);",
      "right" : "component.setBackground(background);",
      "info" : "ExpressionStatement[82394-82430]:ExpressionStatement[82576-82612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82480-83010]:Block[82662-83192]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[82486-83006]:TryStatement[82668-83188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82490-82972]:Block[82672-83154]"
    }, {
      "left" : "UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());",
      "right" : "UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());",
      "info" : "ExpressionStatement[82498-82566]:ExpressionStatement[82680-82748]"
    }, {
      "left" : "if (ourSystemFontData == null)",
      "right" : "if (ourSystemFontData == null)",
      "info" : "IfStatement[82574-82966]:IfStatement[82756-83148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82605-82966]:Block[82787-83148]"
    }, {
      "left" : "Font font = getLabelFont();",
      "right" : "Font font = getLabelFont();",
      "info" : "VariableDeclarationStatement[82615-82642]:VariableDeclarationStatement[82797-82824]"
    }, {
      "left" : "if (SystemInfo.isWindows)",
      "right" : "if (SystemInfo.isWindows)",
      "info" : "IfStatement[82651-82885]:IfStatement[82833-83067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82677-82885]:Block[82859-83067]"
    }, {
      "left" : "Font winFont = (Font)Toolkit.getDefaultToolkit().getDesktopProperty(\"win.messagebox.font\");",
      "right" : "Font winFont = (Font)Toolkit.getDefaultToolkit().getDesktopProperty(\"win.messagebox.font\");",
      "info" : "VariableDeclarationStatement[82737-82828]:VariableDeclarationStatement[82919-83010]"
    }, {
      "left" : "if (winFont != null)",
      "right" : "if (winFont != null)",
      "info" : "IfStatement[82839-82875]:IfStatement[83021-83057]"
    }, {
      "left" : "font = winFont;",
      "right" : "font = winFont;",
      "info" : "ExpressionStatement[82860-82875]:ExpressionStatement[83042-83057]"
    }, {
      "left" : "ourSystemFontData = Pair.create(font.getName(), font.getSize());",
      "right" : "ourSystemFontData = Pair.create(font.getName(), font.getSize());",
      "info" : "ExpressionStatement[82894-82958]:ExpressionStatement[83076-83140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83003-83006]:Block[83185-83188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83082-83117]:Block[83264-83299]"
    }, {
      "left" : "return ourSystemFontData;",
      "right" : "return ourSystemFontData;",
      "info" : "ReturnStatement[83088-83113]:ReturnStatement[83270-83295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83241-83532]:Block[83423-83714]"
    }, {
      "left" : "target.registerKeyboardAction(\n      new ActionListener() {\n        @Override\n        public void actionPerformed(ActionEvent e) {\n          if (button.isEnabled()) {\n            button.doClick();\n          }\n        }\n      },\n      keyStroke,\n      JComponent.WHEN_FOCUSED\n    );",
      "right" : "target.registerKeyboardAction(\n      new ActionListener() {\n        @Override\n        public void actionPerformed(ActionEvent e) {\n          if (button.isEnabled()) {\n            button.doClick();\n          }\n        }\n      },\n      keyStroke,\n      JComponent.WHEN_FOCUSED\n    );",
      "info" : "ExpressionStatement[83247-83528]:ExpressionStatement[83429-83710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83376-83465]:Block[83558-83647]"
    }, {
      "left" : "if (button.isEnabled())",
      "right" : "if (button.isEnabled())",
      "info" : "IfStatement[83388-83455]:IfStatement[83570-83637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83412-83455]:Block[83594-83637]"
    }, {
      "left" : "button.doClick();",
      "right" : "button.doClick();",
      "info" : "ExpressionStatement[83426-83443]:ExpressionStatement[83608-83625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83601-85308]:Block[83783-85490]"
    }, {
      "left" : "final Component editorComponent = comboBox.getEditor().getEditorComponent();",
      "right" : "final Component editorComponent = comboBox.getEditor().getEditorComponent();",
      "info" : "VariableDeclarationStatement[83607-83683]:VariableDeclarationStatement[83789-83865]"
    }, {
      "left" : "if (!(editorComponent instanceof JTextComponent))",
      "right" : "if (!(editorComponent instanceof JTextComponent))",
      "info" : "IfStatement[83688-83745]:IfStatement[83870-83927]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[83738-83745]:ReturnStatement[83920-83927]"
    }, {
      "left" : "final InputMap inputMap = ((JTextComponent)editorComponent).getInputMap();",
      "right" : "final InputMap inputMap = ((JTextComponent)editorComponent).getInputMap();",
      "info" : "VariableDeclarationStatement[83750-83824]:VariableDeclarationStatement[83932-84006]"
    }, {
      "left" : "for (KeyStroke keyStroke : inputMap.allKeys())",
      "right" : "for (KeyStroke keyStroke : inputMap.allKeys())",
      "info" : "EnhancedForStatement[83829-84040]:EnhancedForStatement[84011-84222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83876-84040]:Block[84058-84222]"
    }, {
      "left" : "if (DefaultEditorKit.copyAction.equals(inputMap.get(keyStroke)))",
      "right" : "if (DefaultEditorKit.copyAction.equals(inputMap.get(keyStroke)))",
      "info" : "IfStatement[83884-84034]:IfStatement[84066-84216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83949-84034]:Block[84131-84216]"
    }, {
      "left" : "comboBox.getInputMap().put(keyStroke, DefaultEditorKit.copyAction);",
      "right" : "comboBox.getInputMap().put(keyStroke, DefaultEditorKit.copyAction);",
      "info" : "ExpressionStatement[83959-84026]:ExpressionStatement[84141-84208]"
    }, {
      "left" : "comboBox.getActionMap().put(DefaultEditorKit.copyAction, new AbstractAction() {\n      @Override\n      public void actionPerformed(final ActionEvent e) {\n        if (!(e.getSource() instanceof JComboBox)) return;\n        final JComboBox comboBox = (JComboBox)e.getSource();\n        final String text;\n        final Object selectedItem = comboBox.getSelectedItem();\n        if (selectedItem instanceof String) {\n          text = (String)selectedItem;\n        }\n        else {\n          final Component component =\n            comboBox.getRenderer().getListCellRendererComponent(new JList(), selectedItem, 0, false, false);\n          if (component instanceof JLabel) {\n            text = ((JLabel)component).getText();\n          }\n          else if (component != null) {\n            final String str = component.toString();\n            // skip default Component.toString and handle SimpleColoredComponent case\n            text = str == null || str.startsWith(component.getClass().getName() + \"[\") ? null : str;\n          }\n          else {\n            text = null;\n          }\n        }\n        if (text != null) {\n          final JTextField textField = new JTextField(text);\n          textField.selectAll();\n          textField.copy();\n        }\n      }\n    });",
      "right" : "comboBox.getActionMap().put(DefaultEditorKit.copyAction, new AbstractAction() {\n      @Override\n      public void actionPerformed(final ActionEvent e) {\n        if (!(e.getSource() instanceof JComboBox)) return;\n        final JComboBox comboBox = (JComboBox)e.getSource();\n        final String text;\n        final Object selectedItem = comboBox.getSelectedItem();\n        if (selectedItem instanceof String) {\n          text = (String)selectedItem;\n        }\n        else {\n          final Component component =\n            comboBox.getRenderer().getListCellRendererComponent(new JList(), selectedItem, 0, false, false);\n          if (component instanceof JLabel) {\n            text = ((JLabel)component).getText();\n          }\n          else if (component != null) {\n            final String str = component.toString();\n            // skip default Component.toString and handle SimpleColoredComponent case\n            text = str == null || str.startsWith(component.getClass().getName() + \"[\") ? null : str;\n          }\n          else {\n            text = null;\n          }\n        }\n        if (text != null) {\n          final JTextField textField = new JTextField(text);\n          textField.selectAll();\n          textField.copy();\n        }\n      }\n    });",
      "info" : "ExpressionStatement[84045-85304]:ExpressionStatement[84227-85486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84196-85296]:Block[84378-85478]"
    }, {
      "left" : "if (!(e.getSource() instanceof JComboBox))",
      "right" : "if (!(e.getSource() instanceof JComboBox))",
      "info" : "IfStatement[84206-84256]:IfStatement[84388-84438]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[84249-84256]:ReturnStatement[84431-84438]"
    }, {
      "left" : "final JComboBox comboBox = (JComboBox)e.getSource();",
      "right" : "final JComboBox comboBox = (JComboBox)e.getSource();",
      "info" : "VariableDeclarationStatement[84265-84317]:VariableDeclarationStatement[84447-84499]"
    }, {
      "left" : "final String text;",
      "right" : "final String text;",
      "info" : "VariableDeclarationStatement[84326-84344]:VariableDeclarationStatement[84508-84526]"
    }, {
      "left" : "final Object selectedItem = comboBox.getSelectedItem();",
      "right" : "final Object selectedItem = comboBox.getSelectedItem();",
      "info" : "VariableDeclarationStatement[84353-84408]:VariableDeclarationStatement[84535-84590]"
    }, {
      "left" : "if (selectedItem instanceof String)",
      "right" : "if (selectedItem instanceof String)",
      "info" : "IfStatement[84417-85128]:IfStatement[84599-85310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84453-84503]:Block[84635-84685]"
    }, {
      "left" : "text = (String)selectedItem;",
      "right" : "text = (String)selectedItem;",
      "info" : "ExpressionStatement[84465-84493]:ExpressionStatement[84647-84675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84517-85128]:Block[84699-85310]"
    }, {
      "left" : "final Component component =\n            comboBox.getRenderer().getListCellRendererComponent(new JList(), selectedItem, 0, false, false);",
      "right" : "final Component component =\n            comboBox.getRenderer().getListCellRendererComponent(new JList(), selectedItem, 0, false, false);",
      "info" : "VariableDeclarationStatement[84529-84665]:VariableDeclarationStatement[84711-84847]"
    }, {
      "left" : "if (component instanceof JLabel)",
      "right" : "if (component instanceof JLabel)",
      "info" : "IfStatement[84676-85118]:IfStatement[84858-85300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84709-84772]:Block[84891-84954]"
    }, {
      "left" : "text = ((JLabel)component).getText();",
      "right" : "text = ((JLabel)component).getText();",
      "info" : "ExpressionStatement[84723-84760]:ExpressionStatement[84905-84942]"
    }, {
      "left" : "if (component != null)",
      "right" : "if (component != null)",
      "info" : "IfStatement[84788-85118]:IfStatement[84970-85300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84811-85064]:Block[84993-85246]"
    }, {
      "left" : "final String str = component.toString();",
      "right" : "final String str = component.toString();",
      "info" : "VariableDeclarationStatement[84825-84865]:VariableDeclarationStatement[85007-85047]"
    }, {
      "left" : "text = str == null || str.startsWith(component.getClass().getName() + \"[\") ? null : str;",
      "right" : "text = str == null || str.startsWith(component.getClass().getName() + \"[\") ? null : str;",
      "info" : "ExpressionStatement[84964-85052]:ExpressionStatement[85146-85234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85080-85118]:Block[85262-85300]"
    }, {
      "left" : "text = null;",
      "right" : "text = null;",
      "info" : "ExpressionStatement[85094-85106]:ExpressionStatement[85276-85288]"
    }, {
      "left" : "if (text != null)",
      "right" : "if (text != null)",
      "info" : "IfStatement[85137-85288]:IfStatement[85319-85470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85155-85288]:Block[85337-85470]"
    }, {
      "left" : "final JTextField textField = new JTextField(text);",
      "right" : "final JTextField textField = new JTextField(text);",
      "info" : "VariableDeclarationStatement[85167-85217]:VariableDeclarationStatement[85349-85399]"
    }, {
      "left" : "textField.selectAll();",
      "right" : "textField.selectAll();",
      "info" : "ExpressionStatement[85228-85250]:ExpressionStatement[85410-85432]"
    }, {
      "left" : "textField.copy();",
      "right" : "textField.copy();",
      "info" : "ExpressionStatement[85261-85278]:ExpressionStatement[85443-85460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85395-85601]:Block[85577-85783]"
    }, {
      "left" : "final ComboBoxUI ui = comboBox.getUI();",
      "right" : "final ComboBoxUI ui = comboBox.getUI();",
      "info" : "VariableDeclarationStatement[85401-85440]:VariableDeclarationStatement[85583-85622]"
    }, {
      "left" : "if (ui instanceof BasicComboBoxUI)",
      "right" : "if (ui instanceof BasicComboBoxUI)",
      "info" : "IfStatement[85445-85579]:IfStatement[85627-85761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85480-85579]:Block[85662-85761]"
    }, {
      "left" : "return ReflectionUtil.getField(BasicComboBoxUI.class, ui, ComboPopup.class, \"popup\");",
      "right" : "return ReflectionUtil.getField(BasicComboBoxUI.class, ui, ComboPopup.class, \"popup\");",
      "info" : "ReturnStatement[85488-85573]:ReturnStatement[85670-85755]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[85585-85597]:ReturnStatement[85767-85779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85717-86384]:Block[85899-86566]"
    }, {
      "left" : "if (SystemInfo.isMac)",
      "right" : "if (SystemInfo.isMac)",
      "info" : "IfStatement[85723-86380]:IfStatement[85905-86562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85745-86380]:Block[85927-86562]"
    }, {
      "left" : "final Toolkit toolkit = Toolkit.getDefaultToolkit();",
      "right" : "final Toolkit toolkit = Toolkit.getDefaultToolkit();",
      "info" : "VariableDeclarationStatement[85753-85805]:VariableDeclarationStatement[85935-85987]"
    }, {
      "left" : "final int commandKeyMask = toolkit.getMenuShortcutKeyMask();",
      "right" : "final int commandKeyMask = toolkit.getMenuShortcutKeyMask();",
      "info" : "VariableDeclarationStatement[85812-85872]:VariableDeclarationStatement[85994-86054]"
    }, {
      "left" : "final InputMap inputMap = field.getInputMap();",
      "right" : "final InputMap inputMap = field.getInputMap();",
      "info" : "VariableDeclarationStatement[85879-85925]:VariableDeclarationStatement[86061-86107]"
    }, {
      "left" : "final KeyStroke copyKeyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_C, commandKeyMask);",
      "right" : "final KeyStroke copyKeyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_C, commandKeyMask);",
      "info" : "VariableDeclarationStatement[85932-86018]:VariableDeclarationStatement[86114-86200]"
    }, {
      "left" : "inputMap.put(copyKeyStroke, \"copy-to-clipboard\");",
      "right" : "inputMap.put(copyKeyStroke, \"copy-to-clipboard\");",
      "info" : "ExpressionStatement[86025-86074]:ExpressionStatement[86207-86256]"
    }, {
      "left" : "final KeyStroke pasteKeyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_V, commandKeyMask);",
      "right" : "final KeyStroke pasteKeyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_V, commandKeyMask);",
      "info" : "VariableDeclarationStatement[86081-86168]:VariableDeclarationStatement[86263-86350]"
    }, {
      "left" : "inputMap.put(pasteKeyStroke, \"paste-from-clipboard\");",
      "right" : "inputMap.put(pasteKeyStroke, \"paste-from-clipboard\");",
      "info" : "ExpressionStatement[86175-86228]:ExpressionStatement[86357-86410]"
    }, {
      "left" : "final KeyStroke cutKeyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_X, commandKeyMask);",
      "right" : "final KeyStroke cutKeyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_X, commandKeyMask);",
      "info" : "VariableDeclarationStatement[86235-86320]:VariableDeclarationStatement[86417-86502]"
    }, {
      "left" : "inputMap.put(cutKeyStroke, \"cut-to-clipboard\");",
      "right" : "inputMap.put(cutKeyStroke, \"cut-to-clipboard\");",
      "info" : "ExpressionStatement[86327-86374]:ExpressionStatement[86509-86556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86433-86477]:Block[86615-86659]"
    }, {
      "left" : "return g instanceof PrintGraphics;",
      "right" : "return g instanceof PrintGraphics;",
      "info" : "ReturnStatement[86439-86473]:ReturnStatement[86621-86655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86536-86831]:Block[86718-87013]"
    }, {
      "left" : "Enumeration<AbstractButton> enumeration = group.getElements();",
      "right" : "Enumeration<AbstractButton> enumeration = group.getElements();",
      "info" : "VariableDeclarationStatement[86542-86604]:VariableDeclarationStatement[86724-86786]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[86609-86619]:VariableDeclarationStatement[86791-86801]"
    }, {
      "left" : "while (enumeration.hasMoreElements())",
      "right" : "while (enumeration.hasMoreElements())",
      "info" : "WhileStatement[86624-86812]:WhileStatement[86806-86994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86662-86812]:Block[86844-86994]"
    }, {
      "left" : "AbstractButton button = enumeration.nextElement();",
      "right" : "AbstractButton button = enumeration.nextElement();",
      "info" : "VariableDeclarationStatement[86670-86720]:VariableDeclarationStatement[86852-86902]"
    }, {
      "left" : "if (group.isSelected(button.getModel()))",
      "right" : "if (group.isSelected(button.getModel()))",
      "info" : "IfStatement[86727-86795]:IfStatement[86909-86977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86768-86795]:Block[86950-86977]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[86778-86787]:ReturnStatement[86960-86969]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[86802-86806]:ExpressionStatement[86984-86988]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[86817-86827]:ReturnStatement[86999-87009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86902-87163]:Block[87084-87345]"
    }, {
      "left" : "Enumeration<AbstractButton> enumeration = group.getElements();",
      "right" : "Enumeration<AbstractButton> enumeration = group.getElements();",
      "info" : "VariableDeclarationStatement[86908-86970]:VariableDeclarationStatement[87090-87152]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[86975-86985]:VariableDeclarationStatement[87157-87167]"
    }, {
      "left" : "while (enumeration.hasMoreElements())",
      "right" : "while (enumeration.hasMoreElements())",
      "info" : "WhileStatement[86990-87159]:WhileStatement[87172-87341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87028-87159]:Block[87210-87341]"
    }, {
      "left" : "AbstractButton button = enumeration.nextElement();",
      "right" : "AbstractButton button = enumeration.nextElement();",
      "info" : "VariableDeclarationStatement[87036-87086]:VariableDeclarationStatement[87218-87268]"
    }, {
      "left" : "group.setSelected(button.getModel(), index == i);",
      "right" : "group.setSelected(button.getModel(), index == i);",
      "info" : "ExpressionStatement[87093-87142]:ExpressionStatement[87275-87324]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[87149-87153]:ExpressionStatement[87331-87335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87225-87297]:Block[87407-87479]"
    }, {
      "left" : "return e.isShiftDown() || e.isControlDown() || e.isMetaDown();",
      "right" : "return e.isShiftDown() || e.isControlDown() || e.isMetaDown();",
      "info" : "ReturnStatement[87231-87293]:ReturnStatement[87413-87475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87435-87742]:Block[87617-87924]"
    }, {
      "left" : "if (SystemInfo.isMac && isUnderAquaLookAndFeel())",
      "right" : "if (SystemInfo.isMac && isUnderAquaLookAndFeel())",
      "info" : "IfStatement[87441-87738]:IfStatement[87623-87920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87491-87678]:Block[87673-87860]"
    }, {
      "left" : "editor.reshape(x, y, width - 4, height - 1);",
      "right" : "editor.reshape(x, y, width - 4, height - 1);",
      "info" : "ExpressionStatement[87628-87672]:ExpressionStatement[87810-87854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87688-87738]:Block[87870-87920]"
    }, {
      "left" : "editor.reshape(x, y, width, height);",
      "right" : "editor.reshape(x, y, width, height);",
      "info" : "ExpressionStatement[87696-87732]:ExpressionStatement[87878-87914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87800-87876]:Block[87982-88058]"
    }, {
      "left" : "return SystemInfo.isMac && isUnderAquaLookAndFeel() ? 28 : height;",
      "right" : "return SystemInfo.isMac && isUnderAquaLookAndFeel() ? 28 : height;",
      "info" : "ReturnStatement[87806-87872]:ReturnStatement[87988-88054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88467-88697]:Block[88649-88879]"
    }, {
      "left" : "while (child != null && child != parent)",
      "right" : "while (child != null && child != parent)",
      "info" : "WhileStatement[88473-88665]:WhileStatement[88655-88847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88514-88665]:Block[88696-88847]"
    }, {
      "left" : "child =  child instanceof JPopupMenu  ? ((JPopupMenu)child).getInvoker()\n                                            : child.getParent();",
      "right" : "child =  child instanceof JPopupMenu  ? ((JPopupMenu)child).getInvoker()\n                                            : child.getParent();",
      "info" : "ExpressionStatement[88522-88659]:ExpressionStatement[88704-88841]"
    }, {
      "left" : "return child == parent;",
      "right" : "return child == parent;",
      "info" : "ReturnStatement[88670-88693]:ReturnStatement[88852-88875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88786-89073]:Block[88968-89255]"
    }, {
      "left" : "Component eachParent = c;",
      "right" : "Component eachParent = c;",
      "info" : "VariableDeclarationStatement[88792-88817]:VariableDeclarationStatement[88974-88999]"
    }, {
      "left" : "while (eachParent != null)",
      "right" : "while (eachParent != null)",
      "info" : "WhileStatement[88822-89051]:WhileStatement[89004-89233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88849-89051]:Block[89031-89233]"
    }, {
      "left" : "if (cls.isAssignableFrom(eachParent.getClass()))",
      "right" : "if (cls.isAssignableFrom(eachParent.getClass()))",
      "info" : "IfStatement[88857-89001]:IfStatement[89039-89183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88906-89001]:Block[89088-89183]"
    }, {
      "left" : "@SuppressWarnings({\"unchecked\"}) final T t = (T)eachParent;",
      "right" : "@SuppressWarnings({\"unchecked\"}) final T t = (T)eachParent;",
      "info" : "VariableDeclarationStatement[88916-88975]:VariableDeclarationStatement[89098-89157]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[88984-88993]:ReturnStatement[89166-89175]"
    }, {
      "left" : "eachParent = eachParent.getParent();",
      "right" : "eachParent = eachParent.getParent();",
      "info" : "ExpressionStatement[89009-89045]:ExpressionStatement[89191-89227]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[89057-89069]:ReturnStatement[89239-89251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89151-89630]:Block[89333-89812]"
    }, {
      "left" : "SwingUtilities.invokeLater(new Runnable() {\n      @Override\n      public void run() {\n        final int selectedIndex = list.getSelectedIndex();\n        if (selectedIndex >= 0) {\n          final Rectangle visibleRect = list.getVisibleRect();\n          final Rectangle cellBounds = list.getCellBounds(selectedIndex, selectedIndex);\n          if (!visibleRect.contains(cellBounds)) {\n            list.scrollRectToVisible(cellBounds);\n          }\n        }\n      }\n    });",
      "right" : "SwingUtilities.invokeLater(new Runnable() {\n      @Override\n      public void run() {\n        final int selectedIndex = list.getSelectedIndex();\n        if (selectedIndex >= 0) {\n          final Rectangle visibleRect = list.getVisibleRect();\n          final Rectangle cellBounds = list.getCellBounds(selectedIndex, selectedIndex);\n          if (!visibleRect.contains(cellBounds)) {\n            list.scrollRectToVisible(cellBounds);\n          }\n        }\n      }\n    });",
      "info" : "ExpressionStatement[89157-89626]:ExpressionStatement[89339-89808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89241-89618]:Block[89423-89800]"
    }, {
      "left" : "final int selectedIndex = list.getSelectedIndex();",
      "right" : "final int selectedIndex = list.getSelectedIndex();",
      "info" : "VariableDeclarationStatement[89251-89301]:VariableDeclarationStatement[89433-89483]"
    }, {
      "left" : "if (selectedIndex >= 0)",
      "right" : "if (selectedIndex >= 0)",
      "info" : "IfStatement[89310-89610]:IfStatement[89492-89792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89334-89610]:Block[89516-89792]"
    }, {
      "left" : "final Rectangle visibleRect = list.getVisibleRect();",
      "right" : "final Rectangle visibleRect = list.getVisibleRect();",
      "info" : "VariableDeclarationStatement[89346-89398]:VariableDeclarationStatement[89528-89580]"
    }, {
      "left" : "final Rectangle cellBounds = list.getCellBounds(selectedIndex, selectedIndex);",
      "right" : "final Rectangle cellBounds = list.getCellBounds(selectedIndex, selectedIndex);",
      "info" : "VariableDeclarationStatement[89409-89487]:VariableDeclarationStatement[89591-89669]"
    }, {
      "left" : "if (!visibleRect.contains(cellBounds))",
      "right" : "if (!visibleRect.contains(cellBounds))",
      "info" : "IfStatement[89498-89600]:IfStatement[89680-89782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89537-89600]:Block[89719-89782]"
    }, {
      "left" : "list.scrollRectToVisible(cellBounds);",
      "right" : "list.scrollRectToVisible(cellBounds);",
      "info" : "ExpressionStatement[89551-89588]:ExpressionStatement[89733-89770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89738-90134]:Block[89920-90316]"
    }, {
      "left" : "if (parent == null || cls.isAssignableFrom(parent.getClass()))",
      "right" : "if (parent == null || cls.isAssignableFrom(parent.getClass()))",
      "info" : "IfStatement[89744-89892]:IfStatement[89926-90074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89807-89892]:Block[89989-90074]"
    }, {
      "left" : "@SuppressWarnings({\"unchecked\"}) final T t = (T)parent;",
      "right" : "@SuppressWarnings({\"unchecked\"}) final T t = (T)parent;",
      "info" : "VariableDeclarationStatement[89815-89870]:VariableDeclarationStatement[89997-90052]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[89877-89886]:ReturnStatement[90059-90068]"
    }, {
      "left" : "for (Component component : parent.getComponents())",
      "right" : "for (Component component : parent.getComponents())",
      "info" : "EnhancedForStatement[89897-90113]:EnhancedForStatement[90079-90295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89948-90113]:Block[90130-90295]"
    }, {
      "left" : "if (component instanceof JComponent)",
      "right" : "if (component instanceof JComponent)",
      "info" : "IfStatement[89956-90107]:IfStatement[90138-90289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89993-90107]:Block[90175-90289]"
    }, {
      "left" : "T comp = findComponentOfType((JComponent)component, cls);",
      "right" : "T comp = findComponentOfType((JComponent)component, cls);",
      "info" : "VariableDeclarationStatement[90003-90060]:VariableDeclarationStatement[90185-90242]"
    }, {
      "left" : "if (comp != null)",
      "right" : "if (comp != null)",
      "info" : "IfStatement[90069-90099]:IfStatement[90251-90281]"
    }, {
      "left" : "return comp;",
      "right" : "return comp;",
      "info" : "ReturnStatement[90087-90099]:ReturnStatement[90269-90281]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[90118-90130]:ReturnStatement[90300-90312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90237-90360]:Block[90419-90542]"
    }, {
      "left" : "final ArrayList<T> result = new ArrayList<T>();",
      "right" : "final ArrayList<T> result = new ArrayList<T>();",
      "info" : "VariableDeclarationStatement[90243-90290]:VariableDeclarationStatement[90425-90472]"
    }, {
      "left" : "findComponentsOfType(parent, cls, result);",
      "right" : "findComponentsOfType(parent, cls, result);",
      "info" : "ExpressionStatement[90295-90337]:ExpressionStatement[90477-90519]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[90342-90356]:ReturnStatement[90524-90538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90482-90817]:Block[90664-90999]"
    }, {
      "left" : "if (parent == null)",
      "right" : "if (parent == null)",
      "info" : "IfStatement[90488-90515]:IfStatement[90670-90697]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[90508-90515]:ReturnStatement[90690-90697]"
    }, {
      "left" : "if (cls.isAssignableFrom(parent.getClass()))",
      "right" : "if (cls.isAssignableFrom(parent.getClass()))",
      "info" : "IfStatement[90520-90655]:IfStatement[90702-90837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90565-90655]:Block[90747-90837]"
    }, {
      "left" : "@SuppressWarnings({\"unchecked\"}) final T t = (T)parent;",
      "right" : "@SuppressWarnings({\"unchecked\"}) final T t = (T)parent;",
      "info" : "VariableDeclarationStatement[90573-90628]:VariableDeclarationStatement[90755-90810]"
    }, {
      "left" : "result.add(t);",
      "right" : "result.add(t);",
      "info" : "ExpressionStatement[90635-90649]:ExpressionStatement[90817-90831]"
    }, {
      "left" : "for (Component c : parent.getComponents())",
      "right" : "for (Component c : parent.getComponents())",
      "info" : "EnhancedForStatement[90660-90813]:EnhancedForStatement[90842-90995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90703-90813]:Block[90885-90995]"
    }, {
      "left" : "if (c instanceof JComponent)",
      "right" : "if (c instanceof JComponent)",
      "info" : "IfStatement[90711-90807]:IfStatement[90893-90989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90740-90807]:Block[90922-90989]"
    }, {
      "left" : "findComponentsOfType((JComponent)c, cls, result);",
      "right" : "findComponentsOfType((JComponent)c, cls, result);",
      "info" : "ExpressionStatement[90750-90799]:ExpressionStatement[90932-90981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91079-91262]:Block[91261-91444]"
    }, {
      "left" : "myDrawShadow = /*isUnderAquaLookAndFeel() ||*/ isUnderDarcula();",
      "right" : "myDrawShadow = /*isUnderAquaLookAndFeel() ||*/ isUnderDarcula();",
      "info" : "ExpressionStatement[91087-91151]:ExpressionStatement[91269-91333]"
    }, {
      "left" : "myShadowColor = isUnderDarcula() ? Gray._0.withAlpha(100) : Gray._220;",
      "right" : "myShadowColor = isUnderDarcula() ? Gray._0.withAlpha(100) : Gray._220;",
      "info" : "ExpressionStatement[91158-91228]:ExpressionStatement[91340-91410]"
    }, {
      "left" : "myLineSpacing = 1.0f;",
      "right" : "myLineSpacing = 1.0f;",
      "info" : "ExpressionStatement[91235-91256]:ExpressionStatement[91417-91438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91324-91383]:Block[91506-91565]"
    }, {
      "left" : "myDrawShadow = drawShadow;",
      "right" : "myDrawShadow = drawShadow;",
      "info" : "ExpressionStatement[91332-91358]:ExpressionStatement[91514-91540]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[91365-91377]:ReturnStatement[91547-91559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91470-91564]:Block[91652-91746]"
    }, {
      "left" : "myDrawShadow = drawShadow;",
      "right" : "myDrawShadow = drawShadow;",
      "info" : "ExpressionStatement[91478-91504]:ExpressionStatement[91660-91686]"
    }, {
      "left" : "myShadowColor = shadowColor;",
      "right" : "myShadowColor = shadowColor;",
      "info" : "ExpressionStatement[91511-91539]:ExpressionStatement[91693-91721]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[91546-91558]:ReturnStatement[91728-91740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91630-91691]:Block[91812-91873]"
    }, {
      "left" : "myLineSpacing = lineSpacing;",
      "right" : "myLineSpacing = lineSpacing;",
      "info" : "ExpressionStatement[91638-91666]:ExpressionStatement[91820-91848]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[91673-91685]:ReturnStatement[91855-91867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91746-91881]:Block[91928-92063]"
    }, {
      "left" : "if (text == null || text.isEmpty())",
      "right" : "if (text == null || text.isEmpty())",
      "info" : "IfStatement[91754-91802]:IfStatement[91936-91984]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[91790-91802]:ReturnStatement[91972-91984]"
    }, {
      "left" : "myLines.add(Pair.create(text, new LineInfo()));",
      "right" : "myLines.add(Pair.create(text, new LineInfo()));",
      "info" : "ExpressionStatement[91809-91856]:ExpressionStatement[91991-92038]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[91863-91875]:ReturnStatement[92045-92057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91946-92157]:Block[92128-92339]"
    }, {
      "left" : "if (!myLines.isEmpty())",
      "right" : "if (!myLines.isEmpty())",
      "info" : "IfStatement[91954-92131]:IfStatement[92136-92313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91978-92131]:Block[92160-92313]"
    }, {
      "left" : "final LineInfo info = myLines.get(myLines.size() - 1).getSecond();",
      "right" : "final LineInfo info = myLines.get(myLines.size() - 1).getSecond();",
      "info" : "VariableDeclarationStatement[91988-92054]:VariableDeclarationStatement[92170-92236]"
    }, {
      "left" : "info.underlined = true;",
      "right" : "info.underlined = true;",
      "info" : "ExpressionStatement[92063-92086]:ExpressionStatement[92245-92268]"
    }, {
      "left" : "info.underlineColor = color;",
      "right" : "info.underlineColor = color;",
      "info" : "ExpressionStatement[92095-92123]:ExpressionStatement[92277-92305]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[92139-92151]:ReturnStatement[92321-92333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92207-92410]:Block[92389-92592]"
    }, {
      "left" : "if (!myLines.isEmpty())",
      "right" : "if (!myLines.isEmpty())",
      "info" : "IfStatement[92215-92384]:IfStatement[92397-92566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92239-92384]:Block[92421-92566]"
    }, {
      "left" : "final LineInfo info = myLines.get(myLines.size() - 1).getSecond();",
      "right" : "final LineInfo info = myLines.get(myLines.size() - 1).getSecond();",
      "info" : "VariableDeclarationStatement[92249-92315]:VariableDeclarationStatement[92431-92497]"
    }, {
      "left" : "info.withBullet = true;",
      "right" : "info.withBullet = true;",
      "info" : "ExpressionStatement[92324-92347]:ExpressionStatement[92506-92529]"
    }, {
      "left" : "info.bulletChar = c;",
      "right" : "info.bulletChar = c;",
      "info" : "ExpressionStatement[92356-92376]:ExpressionStatement[92538-92558]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[92392-92404]:ReturnStatement[92574-92586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92448-92490]:Block[92630-92672]"
    }, {
      "left" : "return withBullet('\\u2022');",
      "right" : "return withBullet('\\u2022');",
      "info" : "ReturnStatement[92456-92484]:ReturnStatement[92638-92666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92528-92566]:Block[92710-92748]"
    }, {
      "left" : "return underlined(null);",
      "right" : "return underlined(null);",
      "info" : "ReturnStatement[92536-92560]:ReturnStatement[92718-92742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92601-92736]:Block[92783-92918]"
    }, {
      "left" : "if (!myLines.isEmpty())",
      "right" : "if (!myLines.isEmpty())",
      "info" : "IfStatement[92609-92710]:IfStatement[92791-92892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92633-92710]:Block[92815-92892]"
    }, {
      "left" : "myLines.get(myLines.size() - 1).getSecond().smaller = true;",
      "right" : "myLines.get(myLines.size() - 1).getSecond().smaller = true;",
      "info" : "ExpressionStatement[92643-92702]:ExpressionStatement[92825-92884]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[92718-92730]:ReturnStatement[92900-92912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92770-92904]:Block[92952-93086]"
    }, {
      "left" : "if (!myLines.isEmpty())",
      "right" : "if (!myLines.isEmpty())",
      "info" : "IfStatement[92778-92878]:IfStatement[92960-93060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92802-92878]:Block[92984-93060]"
    }, {
      "left" : "myLines.get(myLines.size() - 1).getSecond().center = true;",
      "right" : "myLines.get(myLines.size() - 1).getSecond().center = true;",
      "info" : "ExpressionStatement[92812-92870]:ExpressionStatement[92994-93052]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[92886-92898]:ReturnStatement[93068-93080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93102-97229]:Block[93284-97411]"
    }, {
      "left" : "final int[] maxWidth = {0};",
      "right" : "final int[] maxWidth = {0};",
      "info" : "VariableDeclarationStatement[93110-93137]:VariableDeclarationStatement[93292-93319]"
    }, {
      "left" : "final int[] height = {0};",
      "right" : "final int[] height = {0};",
      "info" : "VariableDeclarationStatement[93144-93169]:VariableDeclarationStatement[93326-93351]"
    }, {
      "left" : "final int[] maxBulletWidth = {0};",
      "right" : "final int[] maxBulletWidth = {0};",
      "info" : "VariableDeclarationStatement[93176-93209]:VariableDeclarationStatement[93358-93391]"
    }, {
      "left" : "ContainerUtil.process(myLines, new Processor<Pair<String, LineInfo>>() {\n        @Override\n        public boolean process(final Pair<String, LineInfo> pair) {\n          final LineInfo info = pair.getSecond();\n          Font old = null;\n          if (info.smaller) {\n            old = g.getFont();\n            g.setFont(old.deriveFont(old.getSize() * 0.70f));\n          }\n\n          final FontMetrics fm = g.getFontMetrics();\n\n          final int bulletWidth = info.withBullet ? fm.stringWidth(\" \" + info.bulletChar) : 0;\n          maxBulletWidth[0] = Math.max(maxBulletWidth[0], bulletWidth);\n\n          maxWidth[0] = Math.max(fm.stringWidth(pair.getFirst().replace(\"<shortcut>\", \"\").replace(\"</shortcut>\", \"\") + bulletWidth), maxWidth[0]);\n          height[0] += (fm.getHeight() + fm.getLeading()) * myLineSpacing;\n\n          if (old != null) {\n            g.setFont(old);\n          }\n\n          return true;\n        }\n      });",
      "right" : "ContainerUtil.process(myLines, new Processor<Pair<String, LineInfo>>() {\n        @Override\n        public boolean process(final Pair<String, LineInfo> pair) {\n          final LineInfo info = pair.getSecond();\n          Font old = null;\n          if (info.smaller) {\n            old = g.getFont();\n            g.setFont(old.deriveFont(old.getSize() * 0.70f));\n          }\n\n          final FontMetrics fm = g.getFontMetrics();\n\n          final int bulletWidth = info.withBullet ? fm.stringWidth(\" \" + info.bulletChar) : 0;\n          maxBulletWidth[0] = Math.max(maxBulletWidth[0], bulletWidth);\n\n          maxWidth[0] = Math.max(fm.stringWidth(pair.getFirst().replace(\"<shortcut>\", \"\").replace(\"</shortcut>\", \"\") + bulletWidth), maxWidth[0]);\n          height[0] += (fm.getHeight() + fm.getLeading()) * myLineSpacing;\n\n          if (old != null) {\n            g.setFont(old);\n          }\n\n          return true;\n        }\n      });",
      "info" : "ExpressionStatement[93216-94145]:ExpressionStatement[93398-94327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93373-94135]:Block[93555-94317]"
    }, {
      "left" : "final LineInfo info = pair.getSecond();",
      "right" : "final LineInfo info = pair.getSecond();",
      "info" : "VariableDeclarationStatement[93385-93424]:VariableDeclarationStatement[93567-93606]"
    }, {
      "left" : "Font old = null;",
      "right" : "Font old = null;",
      "info" : "VariableDeclarationStatement[93435-93451]:VariableDeclarationStatement[93617-93633]"
    }, {
      "left" : "if (info.smaller)",
      "right" : "if (info.smaller)",
      "info" : "IfStatement[93462-93586]:IfStatement[93644-93768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93480-93586]:Block[93662-93768]"
    }, {
      "left" : "old = g.getFont();",
      "right" : "old = g.getFont();",
      "info" : "ExpressionStatement[93494-93512]:ExpressionStatement[93676-93694]"
    }, {
      "left" : "g.setFont(old.deriveFont(old.getSize() * 0.70f));",
      "right" : "g.setFont(old.deriveFont(old.getSize() * 0.70f));",
      "info" : "ExpressionStatement[93525-93574]:ExpressionStatement[93707-93756]"
    }, {
      "left" : "final FontMetrics fm = g.getFontMetrics();",
      "right" : "final FontMetrics fm = g.getFontMetrics();",
      "info" : "VariableDeclarationStatement[93598-93640]:VariableDeclarationStatement[93780-93822]"
    }, {
      "left" : "final int bulletWidth = info.withBullet ? fm.stringWidth(\" \" + info.bulletChar) : 0;",
      "right" : "final int bulletWidth = info.withBullet ? fm.stringWidth(\" \" + info.bulletChar) : 0;",
      "info" : "VariableDeclarationStatement[93652-93736]:VariableDeclarationStatement[93834-93918]"
    }, {
      "left" : "maxBulletWidth[0] = Math.max(maxBulletWidth[0], bulletWidth);",
      "right" : "maxBulletWidth[0] = Math.max(maxBulletWidth[0], bulletWidth);",
      "info" : "ExpressionStatement[93747-93808]:ExpressionStatement[93929-93990]"
    }, {
      "left" : "maxWidth[0] = Math.max(fm.stringWidth(pair.getFirst().replace(\"<shortcut>\", \"\").replace(\"</shortcut>\", \"\") + bulletWidth), maxWidth[0]);",
      "right" : "maxWidth[0] = Math.max(fm.stringWidth(pair.getFirst().replace(\"<shortcut>\", \"\").replace(\"</shortcut>\", \"\") + bulletWidth), maxWidth[0]);",
      "info" : "ExpressionStatement[93820-93956]:ExpressionStatement[94002-94138]"
    }, {
      "left" : "height[0] += (fm.getHeight() + fm.getLeading()) * myLineSpacing;",
      "right" : "height[0] += (fm.getHeight() + fm.getLeading()) * myLineSpacing;",
      "info" : "ExpressionStatement[93967-94031]:ExpressionStatement[94149-94213]"
    }, {
      "left" : "if (old != null)",
      "right" : "if (old != null)",
      "info" : "IfStatement[94043-94101]:IfStatement[94225-94283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94060-94101]:Block[94242-94283]"
    }, {
      "left" : "g.setFont(old);",
      "right" : "g.setFont(old);",
      "info" : "ExpressionStatement[94074-94089]:ExpressionStatement[94256-94271]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[94113-94125]:ReturnStatement[94295-94307]"
    }, {
      "left" : "final Couple<Integer> position = _position.fun(maxWidth[0] + 20, height[0]);",
      "right" : "final Couple<Integer> position = _position.fun(maxWidth[0] + 20, height[0]);",
      "info" : "VariableDeclarationStatement[94153-94229]:VariableDeclarationStatement[94335-94411]"
    }, {
      "left" : "assert position != null;",
      "right" : "assert position != null;",
      "info" : "AssertStatement[94236-94260]:AssertStatement[94418-94442]"
    }, {
      "left" : "final int[] yOffset = {position.getSecond()};",
      "right" : "final int[] yOffset = {position.getSecond()};",
      "info" : "VariableDeclarationStatement[94268-94313]:VariableDeclarationStatement[94450-94495]"
    }, {
      "left" : "ContainerUtil.process(myLines, new Processor<Pair<String, LineInfo>>() {\n        @Override\n        public boolean process(final Pair<String, LineInfo> pair) {\n          final LineInfo info = pair.getSecond();\n          String text = pair.first;\n          String shortcut = \"\";\n          if (pair.first.contains(\"<shortcut>\")) {\n            shortcut = text.substring(text.indexOf(\"<shortcut>\") + \"<shortcut>\".length(), text.indexOf(\"</shortcut>\"));\n            text = text.substring(0, text.indexOf(\"<shortcut>\"));\n          }\n\n          Font old = null;\n          if (info.smaller) {\n            old = g.getFont();\n            g.setFont(old.deriveFont(old.getSize() * 0.70f));\n          }\n\n          final int x = position.getFirst() + maxBulletWidth[0] + 10;\n\n          final FontMetrics fm = g.getFontMetrics();\n          int xOffset = x;\n          if (info.center) {\n            xOffset = x + (maxWidth[0] - fm.stringWidth(text)) / 2;\n          }\n\n          if (myDrawShadow) {\n            int xOff = isUnderDarcula() ? 1 : 0;\n            int yOff = 1;\n            Color oldColor = g.getColor();\n            g.setColor(myShadowColor);\n\n            if (info.withBullet) {\n              g.drawString(info.bulletChar + \" \", x - fm.stringWidth(\" \" + info.bulletChar) + xOff, yOffset[0] + yOff);\n            }\n\n            g.drawString(text, xOffset + xOff, yOffset[0] + yOff);\n            g.setColor(oldColor);\n          }\n\n          if (info.withBullet) {\n            g.drawString(info.bulletChar + \" \", x - fm.stringWidth(\" \" + info.bulletChar), yOffset[0]);\n          }\n\n          g.drawString(text, xOffset, yOffset[0]);\n          if (!StringUtil.isEmpty(shortcut)) {\n            Color oldColor = g.getColor();\n            if (isUnderDarcula()) {\n              g.setColor(new Color(60, 118, 249));\n            }\n            g.drawString(shortcut, xOffset + fm.stringWidth(text + (isUnderDarcula() ? \" \" : \"\")), yOffset[0]);\n            g.setColor(oldColor);\n          }\n\n          if (info.underlined) {\n            Color c = null;\n            if (info.underlineColor != null) {\n              c = g.getColor();\n              g.setColor(info.underlineColor);\n            }\n\n            g.drawLine(x - maxBulletWidth[0] - 10, yOffset[0] + fm.getDescent(), x + maxWidth[0] + 10, yOffset[0] + fm.getDescent());\n            if (c != null) {\n              g.setColor(c);\n\n            }\n\n            if (myDrawShadow) {\n              c = g.getColor();\n              g.setColor(myShadowColor);\n              g.drawLine(x - maxBulletWidth[0] - 10, yOffset[0] + fm.getDescent() + 1, x + maxWidth[0] + 10,\n                         yOffset[0] + fm.getDescent() + 1);\n              g.setColor(c);\n            }\n          }\n\n          yOffset[0] += (fm.getHeight() + fm.getLeading()) * myLineSpacing;\n\n          if (old != null) {\n            g.setFont(old);\n          }\n\n          return true;\n        }\n      });",
      "right" : "ContainerUtil.process(myLines, new Processor<Pair<String, LineInfo>>() {\n        @Override\n        public boolean process(final Pair<String, LineInfo> pair) {\n          final LineInfo info = pair.getSecond();\n          String text = pair.first;\n          String shortcut = \"\";\n          if (pair.first.contains(\"<shortcut>\")) {\n            shortcut = text.substring(text.indexOf(\"<shortcut>\") + \"<shortcut>\".length(), text.indexOf(\"</shortcut>\"));\n            text = text.substring(0, text.indexOf(\"<shortcut>\"));\n          }\n\n          Font old = null;\n          if (info.smaller) {\n            old = g.getFont();\n            g.setFont(old.deriveFont(old.getSize() * 0.70f));\n          }\n\n          final int x = position.getFirst() + maxBulletWidth[0] + 10;\n\n          final FontMetrics fm = g.getFontMetrics();\n          int xOffset = x;\n          if (info.center) {\n            xOffset = x + (maxWidth[0] - fm.stringWidth(text)) / 2;\n          }\n\n          if (myDrawShadow) {\n            int xOff = isUnderDarcula() ? 1 : 0;\n            int yOff = 1;\n            Color oldColor = g.getColor();\n            g.setColor(myShadowColor);\n\n            if (info.withBullet) {\n              g.drawString(info.bulletChar + \" \", x - fm.stringWidth(\" \" + info.bulletChar) + xOff, yOffset[0] + yOff);\n            }\n\n            g.drawString(text, xOffset + xOff, yOffset[0] + yOff);\n            g.setColor(oldColor);\n          }\n\n          if (info.withBullet) {\n            g.drawString(info.bulletChar + \" \", x - fm.stringWidth(\" \" + info.bulletChar), yOffset[0]);\n          }\n\n          g.drawString(text, xOffset, yOffset[0]);\n          if (!StringUtil.isEmpty(shortcut)) {\n            Color oldColor = g.getColor();\n            if (isUnderDarcula()) {\n              g.setColor(new Color(60, 118, 249));\n            }\n            g.drawString(shortcut, xOffset + fm.stringWidth(text + (isUnderDarcula() ? \" \" : \"\")), yOffset[0]);\n            g.setColor(oldColor);\n          }\n\n          if (info.underlined) {\n            Color c = null;\n            if (info.underlineColor != null) {\n              c = g.getColor();\n              g.setColor(info.underlineColor);\n            }\n\n            g.drawLine(x - maxBulletWidth[0] - 10, yOffset[0] + fm.getDescent(), x + maxWidth[0] + 10, yOffset[0] + fm.getDescent());\n            if (c != null) {\n              g.setColor(c);\n\n            }\n\n            if (myDrawShadow) {\n              c = g.getColor();\n              g.setColor(myShadowColor);\n              g.drawLine(x - maxBulletWidth[0] - 10, yOffset[0] + fm.getDescent() + 1, x + maxWidth[0] + 10,\n                         yOffset[0] + fm.getDescent() + 1);\n              g.setColor(c);\n            }\n          }\n\n          yOffset[0] += (fm.getHeight() + fm.getLeading()) * myLineSpacing;\n\n          if (old != null) {\n            g.setFont(old);\n          }\n\n          return true;\n        }\n      });",
      "info" : "ExpressionStatement[94320-97223]:ExpressionStatement[94502-97405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94477-97213]:Block[94659-97395]"
    }, {
      "left" : "final LineInfo info = pair.getSecond();",
      "right" : "final LineInfo info = pair.getSecond();",
      "info" : "VariableDeclarationStatement[94489-94528]:VariableDeclarationStatement[94671-94710]"
    }, {
      "left" : "String text = pair.first;",
      "right" : "String text = pair.first;",
      "info" : "VariableDeclarationStatement[94539-94564]:VariableDeclarationStatement[94721-94746]"
    }, {
      "left" : "String shortcut = \"\";",
      "right" : "String shortcut = \"\";",
      "info" : "VariableDeclarationStatement[94575-94596]:VariableDeclarationStatement[94757-94778]"
    }, {
      "left" : "if (pair.first.contains(\"<shortcut>\"))",
      "right" : "if (pair.first.contains(\"<shortcut>\"))",
      "info" : "IfStatement[94607-94845]:IfStatement[94789-95027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94646-94845]:Block[94828-95027]"
    }, {
      "left" : "shortcut = text.substring(text.indexOf(\"<shortcut>\") + \"<shortcut>\".length(), text.indexOf(\"</shortcut>\"));",
      "right" : "shortcut = text.substring(text.indexOf(\"<shortcut>\") + \"<shortcut>\".length(), text.indexOf(\"</shortcut>\"));",
      "info" : "ExpressionStatement[94660-94767]:ExpressionStatement[94842-94949]"
    }, {
      "left" : "text = text.substring(0, text.indexOf(\"<shortcut>\"));",
      "right" : "text = text.substring(0, text.indexOf(\"<shortcut>\"));",
      "info" : "ExpressionStatement[94780-94833]:ExpressionStatement[94962-95015]"
    }, {
      "left" : "Font old = null;",
      "right" : "Font old = null;",
      "info" : "VariableDeclarationStatement[94857-94873]:VariableDeclarationStatement[95039-95055]"
    }, {
      "left" : "if (info.smaller)",
      "right" : "if (info.smaller)",
      "info" : "IfStatement[94884-95008]:IfStatement[95066-95190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94902-95008]:Block[95084-95190]"
    }, {
      "left" : "old = g.getFont();",
      "right" : "old = g.getFont();",
      "info" : "ExpressionStatement[94916-94934]:ExpressionStatement[95098-95116]"
    }, {
      "left" : "g.setFont(old.deriveFont(old.getSize() * 0.70f));",
      "right" : "g.setFont(old.deriveFont(old.getSize() * 0.70f));",
      "info" : "ExpressionStatement[94947-94996]:ExpressionStatement[95129-95178]"
    }, {
      "left" : "final int x = position.getFirst() + maxBulletWidth[0] + 10;",
      "right" : "final int x = position.getFirst() + maxBulletWidth[0] + 10;",
      "info" : "VariableDeclarationStatement[95020-95079]:VariableDeclarationStatement[95202-95261]"
    }, {
      "left" : "final FontMetrics fm = g.getFontMetrics();",
      "right" : "final FontMetrics fm = g.getFontMetrics();",
      "info" : "VariableDeclarationStatement[95091-95133]:VariableDeclarationStatement[95273-95315]"
    }, {
      "left" : "int xOffset = x;",
      "right" : "int xOffset = x;",
      "info" : "VariableDeclarationStatement[95144-95160]:VariableDeclarationStatement[95326-95342]"
    }, {
      "left" : "if (info.center)",
      "right" : "if (info.center)",
      "info" : "IfStatement[95171-95269]:IfStatement[95353-95451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95188-95269]:Block[95370-95451]"
    }, {
      "left" : "xOffset = x + (maxWidth[0] - fm.stringWidth(text)) / 2;",
      "right" : "xOffset = x + (maxWidth[0] - fm.stringWidth(text)) / 2;",
      "info" : "ExpressionStatement[95202-95257]:ExpressionStatement[95384-95439]"
    }, {
      "left" : "if (myDrawShadow)",
      "right" : "if (myDrawShadow)",
      "info" : "IfStatement[95281-95741]:IfStatement[95463-95923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95299-95741]:Block[95481-95923]"
    }, {
      "left" : "int xOff = isUnderDarcula() ? 1 : 0;",
      "right" : "int xOff = isUnderDarcula() ? 1 : 0;",
      "info" : "VariableDeclarationStatement[95313-95349]:VariableDeclarationStatement[95495-95531]"
    }, {
      "left" : "int yOff = 1;",
      "right" : "int yOff = 1;",
      "info" : "VariableDeclarationStatement[95362-95375]:VariableDeclarationStatement[95544-95557]"
    }, {
      "left" : "Color oldColor = g.getColor();",
      "right" : "Color oldColor = g.getColor();",
      "info" : "VariableDeclarationStatement[95388-95418]:VariableDeclarationStatement[95570-95600]"
    }, {
      "left" : "g.setColor(myShadowColor);",
      "right" : "g.setColor(myShadowColor);",
      "info" : "ExpressionStatement[95431-95457]:ExpressionStatement[95613-95639]"
    }, {
      "left" : "if (info.withBullet)",
      "right" : "if (info.withBullet)",
      "info" : "IfStatement[95471-95627]:IfStatement[95653-95809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95492-95627]:Block[95674-95809]"
    }, {
      "left" : "g.drawString(info.bulletChar + \" \", x - fm.stringWidth(\" \" + info.bulletChar) + xOff, yOffset[0] + yOff);",
      "right" : "g.drawString(info.bulletChar + \" \", x - fm.stringWidth(\" \" + info.bulletChar) + xOff, yOffset[0] + yOff);",
      "info" : "ExpressionStatement[95508-95613]:ExpressionStatement[95690-95795]"
    }, {
      "left" : "g.drawString(text, xOffset + xOff, yOffset[0] + yOff);",
      "right" : "g.drawString(text, xOffset + xOff, yOffset[0] + yOff);",
      "info" : "ExpressionStatement[95641-95695]:ExpressionStatement[95823-95877]"
    }, {
      "left" : "g.setColor(oldColor);",
      "right" : "g.setColor(oldColor);",
      "info" : "ExpressionStatement[95708-95729]:ExpressionStatement[95890-95911]"
    }, {
      "left" : "if (info.withBullet)",
      "right" : "if (info.withBullet)",
      "info" : "IfStatement[95753-95891]:IfStatement[95935-96073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95774-95891]:Block[95956-96073]"
    }, {
      "left" : "g.drawString(info.bulletChar + \" \", x - fm.stringWidth(\" \" + info.bulletChar), yOffset[0]);",
      "right" : "g.drawString(info.bulletChar + \" \", x - fm.stringWidth(\" \" + info.bulletChar), yOffset[0]);",
      "info" : "ExpressionStatement[95788-95879]:ExpressionStatement[95970-96061]"
    }, {
      "left" : "g.drawString(text, xOffset, yOffset[0]);",
      "right" : "g.drawString(text, xOffset, yOffset[0]);",
      "info" : "ExpressionStatement[95903-95943]:ExpressionStatement[96085-96125]"
    }, {
      "left" : "if (!StringUtil.isEmpty(shortcut))",
      "right" : "if (!StringUtil.isEmpty(shortcut))",
      "info" : "IfStatement[95954-96292]:IfStatement[96136-96474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95989-96292]:Block[96171-96474]"
    }, {
      "left" : "Color oldColor = g.getColor();",
      "right" : "Color oldColor = g.getColor();",
      "info" : "VariableDeclarationStatement[96003-96033]:VariableDeclarationStatement[96185-96215]"
    }, {
      "left" : "if (isUnderDarcula())",
      "right" : "if (isUnderDarcula())",
      "info" : "IfStatement[96046-96134]:IfStatement[96228-96316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96068-96134]:Block[96250-96316]"
    }, {
      "left" : "g.setColor(new Color(60, 118, 249));",
      "right" : "g.setColor(new Color(60, 118, 249));",
      "info" : "ExpressionStatement[96084-96120]:ExpressionStatement[96266-96302]"
    }, {
      "left" : "g.drawString(shortcut, xOffset + fm.stringWidth(text + (isUnderDarcula() ? \" \" : \"\")), yOffset[0]);",
      "right" : "g.drawString(shortcut, xOffset + fm.stringWidth(text + (isUnderDarcula() ? \" \" : \"\")), yOffset[0]);",
      "info" : "ExpressionStatement[96147-96246]:ExpressionStatement[96329-96428]"
    }, {
      "left" : "g.setColor(oldColor);",
      "right" : "g.setColor(oldColor);",
      "info" : "ExpressionStatement[96259-96280]:ExpressionStatement[96441-96462]"
    }, {
      "left" : "if (info.underlined)",
      "right" : "if (info.underlined)",
      "info" : "IfStatement[96304-97032]:IfStatement[96486-97214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96325-97032]:Block[96507-97214]"
    }, {
      "left" : "Color c = null;",
      "right" : "Color c = null;",
      "info" : "VariableDeclarationStatement[96339-96354]:VariableDeclarationStatement[96521-96536]"
    }, {
      "left" : "if (info.underlineColor != null)",
      "right" : "if (info.underlineColor != null)",
      "info" : "IfStatement[96367-96494]:IfStatement[96549-96676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96400-96494]:Block[96582-96676]"
    }, {
      "left" : "c = g.getColor();",
      "right" : "c = g.getColor();",
      "info" : "ExpressionStatement[96416-96433]:ExpressionStatement[96598-96615]"
    }, {
      "left" : "g.setColor(info.underlineColor);",
      "right" : "g.setColor(info.underlineColor);",
      "info" : "ExpressionStatement[96448-96480]:ExpressionStatement[96630-96662]"
    }, {
      "left" : "g.drawLine(x - maxBulletWidth[0] - 10, yOffset[0] + fm.getDescent(), x + maxWidth[0] + 10, yOffset[0] + fm.getDescent());",
      "right" : "g.drawLine(x - maxBulletWidth[0] - 10, yOffset[0] + fm.getDescent(), x + maxWidth[0] + 10, yOffset[0] + fm.getDescent());",
      "info" : "ExpressionStatement[96508-96629]:ExpressionStatement[96690-96811]"
    }, {
      "left" : "if (c != null)",
      "right" : "if (c != null)",
      "info" : "IfStatement[96642-96702]:IfStatement[96824-96884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96657-96702]:Block[96839-96884]"
    }, {
      "left" : "g.setColor(c);",
      "right" : "g.setColor(c);",
      "info" : "ExpressionStatement[96673-96687]:ExpressionStatement[96855-96869]"
    }, {
      "left" : "if (myDrawShadow)",
      "right" : "if (myDrawShadow)",
      "info" : "IfStatement[96716-97020]:IfStatement[96898-97202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96734-97020]:Block[96916-97202]"
    }, {
      "left" : "c = g.getColor();",
      "right" : "c = g.getColor();",
      "info" : "ExpressionStatement[96750-96767]:ExpressionStatement[96932-96949]"
    }, {
      "left" : "g.setColor(myShadowColor);",
      "right" : "g.setColor(myShadowColor);",
      "info" : "ExpressionStatement[96782-96808]:ExpressionStatement[96964-96990]"
    }, {
      "left" : "g.drawLine(x - maxBulletWidth[0] - 10, yOffset[0] + fm.getDescent() + 1, x + maxWidth[0] + 10,\n                         yOffset[0] + fm.getDescent() + 1);",
      "right" : "g.drawLine(x - maxBulletWidth[0] - 10, yOffset[0] + fm.getDescent() + 1, x + maxWidth[0] + 10,\n                         yOffset[0] + fm.getDescent() + 1);",
      "info" : "ExpressionStatement[96823-96977]:ExpressionStatement[97005-97159]"
    }, {
      "left" : "g.setColor(c);",
      "right" : "g.setColor(c);",
      "info" : "ExpressionStatement[96992-97006]:ExpressionStatement[97174-97188]"
    }, {
      "left" : "yOffset[0] += (fm.getHeight() + fm.getLeading()) * myLineSpacing;",
      "right" : "yOffset[0] += (fm.getHeight() + fm.getLeading()) * myLineSpacing;",
      "info" : "ExpressionStatement[97044-97109]:ExpressionStatement[97226-97291]"
    }, {
      "left" : "if (old != null)",
      "right" : "if (old != null)",
      "info" : "IfStatement[97121-97179]:IfStatement[97303-97361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97138-97179]:Block[97320-97361]"
    }, {
      "left" : "g.setFont(old);",
      "right" : "g.setFont(old);",
      "info" : "ExpressionStatement[97152-97167]:ExpressionStatement[97334-97349]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[97191-97203]:ReturnStatement[97373-97385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97537-98028]:Block[97719-98210]"
    }, {
      "left" : "JRootPane root = getParentOfType(JRootPane.class, c);",
      "right" : "JRootPane root = getParentOfType(JRootPane.class, c);",
      "info" : "VariableDeclarationStatement[97543-97596]:VariableDeclarationStatement[97725-97778]"
    }, {
      "left" : "if (root != null)",
      "right" : "if (root != null)",
      "info" : "IfStatement[97601-97631]:IfStatement[97783-97813]"
    }, {
      "left" : "return root;",
      "right" : "return root;",
      "info" : "ReturnStatement[97619-97631]:ReturnStatement[97801-97813]"
    }, {
      "left" : "Component eachParent = c;",
      "right" : "Component eachParent = c;",
      "info" : "VariableDeclarationStatement[97636-97661]:VariableDeclarationStatement[97818-97843]"
    }, {
      "left" : "while (eachParent != null)",
      "right" : "while (eachParent != null)",
      "info" : "WhileStatement[97666-98006]:WhileStatement[97848-98188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97693-98006]:Block[97875-98188]"
    }, {
      "left" : "if (eachParent instanceof JComponent)",
      "right" : "if (eachParent instanceof JComponent)",
      "info" : "IfStatement[97701-97957]:IfStatement[97883-98139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97739-97957]:Block[97921-98139]"
    }, {
      "left" : "@SuppressWarnings({\"unchecked\"}) WeakReference<JRootPane> pane =\n          (WeakReference<JRootPane>)((JComponent)eachParent).getClientProperty(ROOT_PANE);",
      "right" : "@SuppressWarnings({\"unchecked\"}) WeakReference<JRootPane> pane =\n          (WeakReference<JRootPane>)((JComponent)eachParent).getClientProperty(ROOT_PANE);",
      "info" : "VariableDeclarationStatement[97749-97904]:VariableDeclarationStatement[97931-98086]"
    }, {
      "left" : "if (pane != null)",
      "right" : "if (pane != null)",
      "info" : "IfStatement[97913-97949]:IfStatement[98095-98131]"
    }, {
      "left" : "return pane.get();",
      "right" : "return pane.get();",
      "info" : "ReturnStatement[97931-97949]:ReturnStatement[98113-98131]"
    }, {
      "left" : "eachParent = eachParent.getParent();",
      "right" : "eachParent = eachParent.getParent();",
      "info" : "ExpressionStatement[97964-98000]:ExpressionStatement[98146-98182]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[98012-98024]:ReturnStatement[98194-98206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98099-98176]:Block[98281-98358]"
    }, {
      "left" : "c.putClientProperty(ROOT_PANE, new WeakReference<JRootPane>(pane));",
      "right" : "c.putClientProperty(ROOT_PANE, new WeakReference<JRootPane>(pane));",
      "info" : "ExpressionStatement[98105-98172]:ExpressionStatement[98287-98354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98249-98430]:Block[98431-98612]"
    }, {
      "left" : "if (c == null || !c.isShowing())",
      "right" : "if (c == null || !c.isShowing())",
      "info" : "IfStatement[98255-98300]:IfStatement[98437-98482]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[98288-98300]:ReturnStatement[98470-98482]"
    }, {
      "left" : "return c instanceof JFrame || c instanceof JDialog || c instanceof JWindow || c instanceof JRootPane || isFocusProxy(c);",
      "right" : "return c instanceof JFrame || c instanceof JDialog || c instanceof JWindow || c instanceof JRootPane || isFocusProxy(c);",
      "info" : "ReturnStatement[98306-98426]:ReturnStatement[98488-98608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98552-98682]:Block[98734-98864]"
    }, {
      "left" : "return new Timer(delay, listener) {\n      @Override\n      public String toString() {\n        return name;\n      }\n    };",
      "right" : "return new Timer(delay, listener) {\n      @Override\n      public String toString() {\n        return name;\n      }\n    };",
      "info" : "ReturnStatement[98558-98678]:ReturnStatement[98740-98860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98641-98671]:Block[98823-98853]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[98651-98663]:ReturnStatement[98833-98845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98745-98960]:Block[98927-99142]"
    }, {
      "left" : "if (rootPane != null)",
      "right" : "if (rootPane != null)",
      "info" : "IfStatement[98751-98938]:IfStatement[98933-99120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98773-98938]:Block[98955-99120]"
    }, {
      "left" : "final Object isDialog = rootPane.getClientProperty(\"DIALOG_ROOT_PANE\");",
      "right" : "final Object isDialog = rootPane.getClientProperty(\"DIALOG_ROOT_PANE\");",
      "info" : "VariableDeclarationStatement[98781-98852]:VariableDeclarationStatement[98963-99034]"
    }, {
      "left" : "return isDialog instanceof Boolean && ((Boolean)isDialog).booleanValue();",
      "right" : "return isDialog instanceof Boolean && ((Boolean)isDialog).booleanValue();",
      "info" : "ReturnStatement[98859-98932]:ReturnStatement[99041-99114]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[98943-98956]:ReturnStatement[99125-99138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99054-99120]:Block[99236-99302]"
    }, {
      "left" : "return mergeComponentsWithAnchor(Arrays.asList(panels));",
      "right" : "return mergeComponentsWithAnchor(Arrays.asList(panels));",
      "info" : "ReturnStatement[99060-99116]:ReturnStatement[99242-99298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99233-99779]:Block[99415-99961]"
    }, {
      "left" : "JComponent maxWidthAnchor = null;",
      "right" : "JComponent maxWidthAnchor = null;",
      "info" : "VariableDeclarationStatement[99239-99272]:VariableDeclarationStatement[99421-99454]"
    }, {
      "left" : "int maxWidth = 0;",
      "right" : "int maxWidth = 0;",
      "info" : "VariableDeclarationStatement[99277-99294]:VariableDeclarationStatement[99459-99476]"
    }, {
      "left" : "for (PanelWithAnchor panel : panels)",
      "right" : "for (PanelWithAnchor panel : panels)",
      "info" : "EnhancedForStatement[99299-99623]:EnhancedForStatement[99481-99805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99336-99623]:Block[99518-99805]"
    }, {
      "left" : "JComponent anchor = panel != null ? panel.getAnchor() : null;",
      "right" : "JComponent anchor = panel != null ? panel.getAnchor() : null;",
      "info" : "VariableDeclarationStatement[99344-99405]:VariableDeclarationStatement[99526-99587]"
    }, {
      "left" : "if (anchor != null)",
      "right" : "if (anchor != null)",
      "info" : "IfStatement[99412-99617]:IfStatement[99594-99799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99432-99617]:Block[99614-99799]"
    }, {
      "left" : "int anchorWidth = anchor.getPreferredSize().width;",
      "right" : "int anchorWidth = anchor.getPreferredSize().width;",
      "info" : "VariableDeclarationStatement[99442-99492]:VariableDeclarationStatement[99624-99674]"
    }, {
      "left" : "if (maxWidth < anchorWidth)",
      "right" : "if (maxWidth < anchorWidth)",
      "info" : "IfStatement[99501-99609]:IfStatement[99683-99791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99529-99609]:Block[99711-99791]"
    }, {
      "left" : "maxWidth = anchorWidth;",
      "right" : "maxWidth = anchorWidth;",
      "info" : "ExpressionStatement[99541-99564]:ExpressionStatement[99723-99746]"
    }, {
      "left" : "maxWidthAnchor = anchor;",
      "right" : "maxWidthAnchor = anchor;",
      "info" : "ExpressionStatement[99575-99599]:ExpressionStatement[99757-99781]"
    }, {
      "left" : "for (PanelWithAnchor panel : panels)",
      "right" : "for (PanelWithAnchor panel : panels)",
      "info" : "EnhancedForStatement[99628-99748]:EnhancedForStatement[99810-99930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99665-99748]:Block[99847-99930]"
    }, {
      "left" : "if (panel != null)",
      "right" : "if (panel != null)",
      "info" : "IfStatement[99673-99742]:IfStatement[99855-99924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99692-99742]:Block[99874-99924]"
    }, {
      "left" : "panel.setAnchor(maxWidthAnchor);",
      "right" : "panel.setAnchor(maxWidthAnchor);",
      "info" : "ExpressionStatement[99702-99734]:ExpressionStatement[99884-99916]"
    }, {
      "left" : "return maxWidthAnchor;",
      "right" : "return maxWidthAnchor;",
      "info" : "ReturnStatement[99753-99775]:ReturnStatement[99935-99957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99856-100383]:Block[100038-100565]"
    }, {
      "left" : "if (!isUnderAquaLookAndFeel())",
      "right" : "if (!isUnderAquaLookAndFeel())",
      "info" : "IfStatement[99862-99900]:IfStatement[100044-100082]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[99893-99900]:ReturnStatement[100075-100082]"
    }, {
      "left" : "if (component.getBackground().equals(getPanelBackground()) \n        || component instanceof JScrollPane \n        || component instanceof JViewport \n        || component instanceof JLayeredPane)",
      "right" : "if (component.getBackground().equals(getPanelBackground()) \n        || component instanceof JScrollPane \n        || component instanceof JViewport \n        || component instanceof JLayeredPane)",
      "info" : "IfStatement[99906-100379]:IfStatement[100088-100561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100100-100379]:Block[100282-100561]"
    }, {
      "left" : "if (component instanceof JComponent)",
      "right" : "if (component instanceof JComponent)",
      "info" : "IfStatement[100108-100204]:IfStatement[100290-100386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100145-100204]:Block[100327-100386]"
    }, {
      "left" : "((JComponent)component).setOpaque(false);",
      "right" : "((JComponent)component).setOpaque(false);",
      "info" : "ExpressionStatement[100155-100196]:ExpressionStatement[100337-100378]"
    }, {
      "left" : "if (component instanceof Container)",
      "right" : "if (component instanceof Container)",
      "info" : "IfStatement[100211-100373]:IfStatement[100393-100555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100247-100373]:Block[100429-100555]"
    }, {
      "left" : "for (Component c : ((Container)component).getComponents())",
      "right" : "for (Component c : ((Container)component).getComponents())",
      "info" : "EnhancedForStatement[100257-100365]:EnhancedForStatement[100439-100547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100316-100365]:Block[100498-100547]"
    }, {
      "left" : "setNotOpaqueRecursively(c);",
      "right" : "setNotOpaqueRecursively(c);",
      "info" : "ExpressionStatement[100328-100355]:ExpressionStatement[100510-100537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100480-100682]:Block[100662-100864]"
    }, {
      "left" : "component.setBackground(bg);",
      "right" : "component.setBackground(bg);",
      "info" : "ExpressionStatement[100486-100514]:ExpressionStatement[100668-100696]"
    }, {
      "left" : "if (component instanceof Container)",
      "right" : "if (component instanceof Container)",
      "info" : "IfStatement[100519-100678]:IfStatement[100701-100860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100555-100678]:Block[100737-100860]"
    }, {
      "left" : "for (Component c : ((Container)component).getComponents())",
      "right" : "for (Component c : ((Container)component).getComponents())",
      "info" : "EnhancedForStatement[100563-100672]:EnhancedForStatement[100745-100854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100622-100672]:Block[100804-100854]"
    }, {
      "left" : "setBackgroundRecursively(c, bg);",
      "right" : "setBackgroundRecursively(c, bg);",
      "info" : "ExpressionStatement[100632-100664]:ExpressionStatement[100814-100846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101194-101284]:Block[101376-101466]"
    }, {
      "left" : "addBorder(component, BorderFactory.createEmptyBorder(top, left, bottom, right));",
      "right" : "addBorder(component, BorderFactory.createEmptyBorder(top, left, bottom, right));",
      "info" : "ExpressionStatement[101200-101280]:ExpressionStatement[101382-101462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101654-101739]:Block[101836-101921]"
    }, {
      "left" : "addInsets(component, insets.top, insets.left, insets.bottom, insets.right);",
      "right" : "addInsets(component, insets.top, insets.left, insets.bottom, insets.right);",
      "info" : "ExpressionStatement[101660-101735]:ExpressionStatement[101842-101917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101809-102347]:Block[101991-102529]"
    }, {
      "left" : "if (window == null)",
      "right" : "if (window == null)",
      "info" : "IfStatement[101815-101842]:IfStatement[101997-102024]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[101835-101842]:ReturnStatement[102017-102024]"
    }, {
      "left" : "final Dimension minSize = window.getMinimumSize();",
      "right" : "final Dimension minSize = window.getMinimumSize();",
      "info" : "VariableDeclarationStatement[101847-101897]:VariableDeclarationStatement[102029-102079]"
    }, {
      "left" : "final Dimension size = window.getSize();",
      "right" : "final Dimension size = window.getSize();",
      "info" : "VariableDeclarationStatement[101902-101942]:VariableDeclarationStatement[102084-102124]"
    }, {
      "left" : "final Dimension newSize = new Dimension(Math.max(size.width, minSize.width), Math.max(size.height, minSize.height));",
      "right" : "final Dimension newSize = new Dimension(Math.max(size.width, minSize.width), Math.max(size.height, minSize.height));",
      "info" : "VariableDeclarationStatement[101947-102063]:VariableDeclarationStatement[102129-102245]"
    }, {
      "left" : "if (!newSize.equals(size))",
      "right" : "if (!newSize.equals(size))",
      "info" : "IfStatement[102069-102343]:IfStatement[102251-102525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102096-102343]:Block[102278-102525]"
    }, {
      "left" : "SwingUtilities.invokeLater(new Runnable() {\n        @Override\n        public void run() {\n          if (window.isShowing()) {\n            window.setSize(newSize);\n          }\n        }\n      });",
      "right" : "SwingUtilities.invokeLater(new Runnable() {\n        @Override\n        public void run() {\n          if (window.isShowing()) {\n            window.setSize(newSize);\n          }\n        }\n      });",
      "info" : "ExpressionStatement[102143-102337]:ExpressionStatement[102325-102519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102231-102327]:Block[102413-102509]"
    }, {
      "left" : "if (window.isShowing())",
      "right" : "if (window.isShowing())",
      "info" : "IfStatement[102243-102317]:IfStatement[102425-102499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102267-102317]:Block[102449-102499]"
    }, {
      "left" : "window.setSize(newSize);",
      "right" : "window.setSize(newSize);",
      "info" : "ExpressionStatement[102281-102305]:ExpressionStatement[102463-102487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102437-102998]:Block[102619-103180]"
    }, {
      "left" : "if (0 <= x && x < icon.getIconWidth() && 0 <= y && y < icon.getIconHeight())",
      "right" : "if (0 <= x && x < icon.getIconWidth() && 0 <= y && y < icon.getIconHeight())",
      "info" : "IfStatement[102443-102976]:IfStatement[102625-103158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102520-102976]:Block[102702-103158]"
    }, {
      "left" : "final BufferedImage image = createImage(icon.getIconWidth(), icon.getIconHeight(), BufferedImage.TYPE_INT_RGB);",
      "right" : "final BufferedImage image = createImage(icon.getIconWidth(), icon.getIconHeight(), BufferedImage.TYPE_INT_RGB);",
      "info" : "VariableDeclarationStatement[102528-102639]:VariableDeclarationStatement[102710-102821]"
    }, {
      "left" : "icon.paintIcon(null, image.getGraphics(), 0, 0);",
      "right" : "icon.paintIcon(null, image.getGraphics(), 0, 0);",
      "info" : "ExpressionStatement[102646-102694]:ExpressionStatement[102828-102876]"
    }, {
      "left" : "final int[] pixels = new int[1];",
      "right" : "final int[] pixels = new int[1];",
      "info" : "VariableDeclarationStatement[102702-102734]:VariableDeclarationStatement[102884-102916]"
    }, {
      "left" : "final PixelGrabber pixelGrabber = new PixelGrabber(image, x, y, 1, 1, pixels, 0, 1);",
      "right" : "final PixelGrabber pixelGrabber = new PixelGrabber(image, x, y, 1, 1, pixels, 0, 1);",
      "info" : "VariableDeclarationStatement[102741-102825]:VariableDeclarationStatement[102923-103007]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[102832-102970]:TryStatement[103014-103152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102836-102917]:Block[103018-103099]"
    }, {
      "left" : "pixelGrabber.grabPixels();",
      "right" : "pixelGrabber.grabPixels();",
      "info" : "ExpressionStatement[102846-102872]:ExpressionStatement[103028-103054]"
    }, {
      "left" : "return new Color(pixels[0]);",
      "right" : "return new Color(pixels[0]);",
      "info" : "ReturnStatement[102881-102909]:ReturnStatement[103063-103091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102961-102970]:Block[103143-103152]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[102982-102994]:ReturnStatement[103164-103176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103386-103620]:Block[103568-103802]"
    }, {
      "left" : "if (component != null && border != null)",
      "right" : "if (component != null && border != null)",
      "info" : "IfStatement[103392-103616]:IfStatement[103574-103798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103433-103616]:Block[103615-103798]"
    }, {
      "left" : "Border old = component.getBorder();",
      "right" : "Border old = component.getBorder();",
      "info" : "VariableDeclarationStatement[103441-103476]:VariableDeclarationStatement[103623-103658]"
    }, {
      "left" : "if (old != null)",
      "right" : "if (old != null)",
      "info" : "IfStatement[103483-103575]:IfStatement[103665-103757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103500-103575]:Block[103682-103757]"
    }, {
      "left" : "border = BorderFactory.createCompoundBorder(border, old);",
      "right" : "border = BorderFactory.createCompoundBorder(border, old);",
      "info" : "ExpressionStatement[103510-103567]:ExpressionStatement[103692-103749]"
    }, {
      "left" : "component.setBorder(border);",
      "right" : "component.setBorder(border);",
      "info" : "ExpressionStatement[103582-103610]:ExpressionStatement[103764-103792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103784-103824]:Block[103966-104006]"
    }, {
      "left" : "return DECORATED_ROW_BG_COLOR;",
      "right" : "return DECORATED_ROW_BG_COLOR;",
      "info" : "ReturnStatement[103790-103820]:ReturnStatement[103972-104002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103954-104085]:Block[104136-104267]"
    }, {
      "left" : "return (Registry.is(\"ui.no.bangs.and.whistles\")) ? ColorUtil.mix(c1, c2, .5) : new GradientPaint(x1, y1, c1, x2, y2, c2);",
      "right" : "return (Registry.is(\"ui.no.bangs.and.whistles\")) ? ColorUtil.mix(c1, c2, .5) : new GradientPaint(x1, y1, c1, x2, y2, c2);",
      "info" : "ReturnStatement[103960-104081]:ReturnStatement[104142-104263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104172-104583]:Block[104354-104765]"
    }, {
      "left" : "int dx = 0;",
      "right" : "int dx = 0;",
      "info" : "VariableDeclarationStatement[104178-104189]:VariableDeclarationStatement[104360-104371]"
    }, {
      "left" : "int dy = 0;",
      "right" : "int dy = 0;",
      "info" : "VariableDeclarationStatement[104194-104205]:VariableDeclarationStatement[104376-104387]"
    }, {
      "left" : "for (Container c = component; c != null; c = c.getParent())",
      "right" : "for (Container c = component; c != null; c = c.getParent())",
      "info" : "ForStatement[104210-104562]:ForStatement[104392-104744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104270-104562]:Block[104452-104744]"
    }, {
      "left" : "if (c.isShowing())",
      "right" : "if (c.isShowing())",
      "info" : "IfStatement[104278-104556]:IfStatement[104460-104738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104297-104441]:Block[104479-104623]"
    }, {
      "left" : "Point locationOnScreen = c.getLocationOnScreen();",
      "right" : "Point locationOnScreen = c.getLocationOnScreen();",
      "info" : "VariableDeclarationStatement[104307-104356]:VariableDeclarationStatement[104489-104538]"
    }, {
      "left" : "locationOnScreen.translate(dx, dy);",
      "right" : "locationOnScreen.translate(dx, dy);",
      "info" : "ExpressionStatement[104365-104400]:ExpressionStatement[104547-104582]"
    }, {
      "left" : "return locationOnScreen;",
      "right" : "return locationOnScreen;",
      "info" : "ReturnStatement[104409-104433]:ReturnStatement[104591-104615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104453-104556]:Block[104635-104738]"
    }, {
      "left" : "Point location = c.getLocation();",
      "right" : "Point location = c.getLocation();",
      "info" : "VariableDeclarationStatement[104463-104496]:VariableDeclarationStatement[104645-104678]"
    }, {
      "left" : "dx += location.x;",
      "right" : "dx += location.x;",
      "info" : "ExpressionStatement[104505-104522]:ExpressionStatement[104687-104704]"
    }, {
      "left" : "dy += location.y;",
      "right" : "dy += location.y;",
      "info" : "ExpressionStatement[104531-104548]:ExpressionStatement[104713-104730]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[104567-104579]:ReturnStatement[104749-104761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104637-104825]:Block[104819-105007]"
    }, {
      "left" : "Window[] windows = Window.getWindows();",
      "right" : "Window[] windows = Window.getWindows();",
      "info" : "VariableDeclarationStatement[104643-104682]:VariableDeclarationStatement[104825-104864]"
    }, {
      "left" : "for (Window each : windows)",
      "right" : "for (Window each : windows)",
      "info" : "EnhancedForStatement[104687-104782]:EnhancedForStatement[104869-104964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104715-104782]:Block[104897-104964]"
    }, {
      "left" : "if (each.isVisible() && each.isActive())",
      "right" : "if (each.isVisible() && each.isActive())",
      "info" : "IfStatement[104723-104776]:IfStatement[104905-104958]"
    }, {
      "left" : "return each;",
      "right" : "return each;",
      "info" : "ReturnStatement[104764-104776]:ReturnStatement[104946-104958]"
    }, {
      "left" : "return JOptionPane.getRootFrame();",
      "right" : "return JOptionPane.getRootFrame();",
      "info" : "ReturnStatement[104787-104821]:ReturnStatement[104969-105003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104886-105069]:Block[105068-105251]"
    }, {
      "left" : "if (SystemInfo.isMac)",
      "right" : "if (SystemInfo.isMac)",
      "info" : "IfStatement[104938-104967]:IfStatement[105120-105149]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[104960-104967]:ReturnStatement[105142-105149]"
    }, {
      "left" : "if (Registry.is(\"suppress.focus.stealing\"))",
      "right" : "if (Registry.is(\"suppress.focus.stealing\"))",
      "info" : "IfStatement[104972-105065]:IfStatement[105154-105247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105016-105065]:Block[105198-105247]"
    }, {
      "left" : "setAutoRequestFocus(window, false);",
      "right" : "setAutoRequestFocus(window, false);",
      "info" : "ExpressionStatement[105024-105059]:ExpressionStatement[105206-105241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105154-105612]:Block[105336-105794]"
    }, {
      "left" : "if (SystemInfo.isMac)",
      "right" : "if (SystemInfo.isMac)",
      "info" : "IfStatement[105160-105189]:IfStatement[105342-105371]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[105182-105189]:ReturnStatement[105364-105371]"
    }, {
      "left" : "if (SystemInfo.isJavaVersionAtLeast(\"1.7\"))",
      "right" : "if (SystemInfo.isJavaVersionAtLeast(\"1.7\"))",
      "info" : "IfStatement[105194-105608]:IfStatement[105376-105790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105238-105608]:Block[105420-105790]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[105246-105602]:TryStatement[105428-105784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105250-105429]:Block[105432-105611]"
    }, {
      "left" : "Method setAutoRequestFocusMethod  = onWindow.getClass().getMethod(\"setAutoRequestFocus\", boolean.class);",
      "right" : "Method setAutoRequestFocusMethod  = onWindow.getClass().getMethod(\"setAutoRequestFocus\", boolean.class);",
      "info" : "VariableDeclarationStatement[105260-105364]:VariableDeclarationStatement[105442-105546]"
    }, {
      "left" : "setAutoRequestFocusMethod.invoke(onWindow, set);",
      "right" : "setAutoRequestFocusMethod.invoke(onWindow, set);",
      "info" : "ExpressionStatement[105373-105421]:ExpressionStatement[105555-105603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105468-105485]:Block[105650-105667]"
    }, {
      "left" : "LOG.debug(e);",
      "right" : "LOG.debug(e);",
      "info" : "ExpressionStatement[105470-105483]:ExpressionStatement[105652-105665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105528-105545]:Block[105710-105727]"
    }, {
      "left" : "LOG.debug(e);",
      "right" : "LOG.debug(e);",
      "info" : "ExpressionStatement[105530-105543]:ExpressionStatement[105712-105725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105585-105602]:Block[105767-105784]"
    }, {
      "left" : "LOG.debug(e);",
      "right" : "LOG.debug(e);",
      "info" : "ExpressionStatement[105587-105600]:ExpressionStatement[105769-105782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105753-105883]:Block[105935-106065]"
    }, {
      "left" : "StringBuilder builder  = new StringBuilder();",
      "right" : "StringBuilder builder  = new StringBuilder();",
      "info" : "VariableDeclarationStatement[105759-105804]:VariableDeclarationStatement[105941-105986]"
    }, {
      "left" : "getAllTextsRecursivelyImpl(c, builder);",
      "right" : "getAllTextsRecursivelyImpl(c, builder);",
      "info" : "ExpressionStatement[105809-105848]:ExpressionStatement[105991-106030]"
    }, {
      "left" : "return builder.toString();",
      "right" : "return builder.toString();",
      "info" : "ReturnStatement[105853-105879]:ReturnStatement[106035-106061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105978-106723]:Block[106160-106905]"
    }, {
      "left" : "String candidate = \"\";",
      "right" : "String candidate = \"\";",
      "info" : "VariableDeclarationStatement[105984-106006]:VariableDeclarationStatement[106166-106188]"
    }, {
      "left" : "int limit = builder.length() > 60 ? 20 : 40;",
      "right" : "int limit = builder.length() > 60 ? 20 : 40;",
      "info" : "VariableDeclarationStatement[106011-106055]:VariableDeclarationStatement[106193-106237]"
    }, {
      "left" : "if (component instanceof JLabel)",
      "right" : "if (component instanceof JLabel)",
      "info" : "IfStatement[106060-106135]:IfStatement[106242-106317]"
    }, {
      "left" : "candidate = ((JLabel)component).getText();",
      "right" : "candidate = ((JLabel)component).getText();",
      "info" : "ExpressionStatement[106093-106135]:ExpressionStatement[106275-106317]"
    }, {
      "left" : "if (component instanceof JTextComponent)",
      "right" : "if (component instanceof JTextComponent)",
      "info" : "IfStatement[106140-106231]:IfStatement[106322-106413]"
    }, {
      "left" : "candidate = ((JTextComponent)component).getText();",
      "right" : "candidate = ((JTextComponent)component).getText();",
      "info" : "ExpressionStatement[106181-106231]:ExpressionStatement[106363-106413]"
    }, {
      "left" : "if (component instanceof AbstractButton)",
      "right" : "if (component instanceof AbstractButton)",
      "info" : "IfStatement[106236-106327]:IfStatement[106418-106509]"
    }, {
      "left" : "candidate = ((AbstractButton)component).getText();",
      "right" : "candidate = ((AbstractButton)component).getText();",
      "info" : "ExpressionStatement[106277-106327]:ExpressionStatement[106459-106509]"
    }, {
      "left" : "if (StringUtil.isNotEmpty(candidate))",
      "right" : "if (StringUtil.isNotEmpty(candidate))",
      "info" : "IfStatement[106332-106497]:IfStatement[106514-106679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106370-106497]:Block[106552-106679]"
    }, {
      "left" : "builder.append(candidate.length() > limit ? (candidate.substring(0, limit - 3) + \"...\") : candidate).append('|');",
      "right" : "builder.append(candidate.length() > limit ? (candidate.substring(0, limit - 3) + \"...\") : candidate).append('|');",
      "info" : "ExpressionStatement[106378-106491]:ExpressionStatement[106560-106673]"
    }, {
      "left" : "if (component instanceof Container)",
      "right" : "if (component instanceof Container)",
      "info" : "IfStatement[106502-106719]:IfStatement[106684-106901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106538-106719]:Block[106720-106901]"
    }, {
      "left" : "Component[] components = ((Container)component).getComponents();",
      "right" : "Component[] components = ((Container)component).getComponents();",
      "info" : "VariableDeclarationStatement[106546-106610]:VariableDeclarationStatement[106728-106792]"
    }, {
      "left" : "for (Component child : components)",
      "right" : "for (Component child : components)",
      "info" : "EnhancedForStatement[106617-106713]:EnhancedForStatement[106799-106895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106652-106713]:Block[106834-106895]"
    }, {
      "left" : "getAllTextsRecursivelyImpl(child, builder);",
      "right" : "getAllTextsRecursivelyImpl(child, builder);",
      "info" : "ExpressionStatement[106662-106705]:ExpressionStatement[106844-106887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106821-106991]:Block[107003-107173]"
    }, {
      "left" : "while (descendant != null)",
      "right" : "while (descendant != null)",
      "info" : "WhileStatement[106827-106969]:WhileStatement[107009-107151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106854-106969]:Block[107036-107151]"
    }, {
      "left" : "if (descendant == ancestor)",
      "right" : "if (descendant == ancestor)",
      "info" : "IfStatement[106862-106920]:IfStatement[107044-107102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106890-106920]:Block[107072-107102]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[106900-106912]:ReturnStatement[107082-107094]"
    }, {
      "left" : "descendant = descendant.getParent();",
      "right" : "descendant = descendant.getParent();",
      "info" : "ExpressionStatement[106927-106963]:ExpressionStatement[107109-107145]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[106974-106987]:ReturnStatement[107156-107169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107074-107231]:Block[107256-107413]"
    }, {
      "left" : "UndoManager undoManager = getClientProperty(textComponent, UNDO_MANAGER);",
      "right" : "UndoManager undoManager = getClientProperty(textComponent, UNDO_MANAGER);",
      "info" : "VariableDeclarationStatement[107080-107153]:VariableDeclarationStatement[107262-107335]"
    }, {
      "left" : "if (undoManager != null)",
      "right" : "if (undoManager != null)",
      "info" : "IfStatement[107158-107227]:IfStatement[107340-107409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107183-107227]:Block[107365-107409]"
    }, {
      "left" : "undoManager.discardAllEdits();",
      "right" : "undoManager.discardAllEdits();",
      "info" : "ExpressionStatement[107191-107221]:ExpressionStatement[107373-107403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107318-107980]:Block[107500-108162]"
    }, {
      "left" : "UndoManager undoManager = new UndoManager();",
      "right" : "UndoManager undoManager = new UndoManager();",
      "info" : "VariableDeclarationStatement[107324-107368]:VariableDeclarationStatement[107506-107550]"
    }, {
      "left" : "textComponent.putClientProperty(UNDO_MANAGER, undoManager);",
      "right" : "textComponent.putClientProperty(UNDO_MANAGER, undoManager);",
      "info" : "ExpressionStatement[107373-107432]:ExpressionStatement[107555-107614]"
    }, {
      "left" : "textComponent.getDocument().addUndoableEditListener(undoManager);",
      "right" : "textComponent.getDocument().addUndoableEditListener(undoManager);",
      "info" : "ExpressionStatement[107437-107502]:ExpressionStatement[107619-107684]"
    }, {
      "left" : "textComponent.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_Z, SystemInfo.isMac? InputEvent.META_MASK : InputEvent.CTRL_MASK), \"undoKeystroke\");",
      "right" : "textComponent.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_Z, SystemInfo.isMac? InputEvent.META_MASK : InputEvent.CTRL_MASK), \"undoKeystroke\");",
      "info" : "ExpressionStatement[107507-107658]:ExpressionStatement[107689-107840]"
    }, {
      "left" : "textComponent.getActionMap().put(\"undoKeystroke\", UNDO_ACTION);",
      "right" : "textComponent.getActionMap().put(\"undoKeystroke\", UNDO_ACTION);",
      "info" : "ExpressionStatement[107663-107726]:ExpressionStatement[107845-107908]"
    }, {
      "left" : "textComponent.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_Z, (SystemInfo.isMac? InputEvent.META_MASK : InputEvent.CTRL_MASK) | InputEvent.SHIFT_MASK), \"redoKeystroke\");",
      "right" : "textComponent.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_Z, (SystemInfo.isMac? InputEvent.META_MASK : InputEvent.CTRL_MASK) | InputEvent.SHIFT_MASK), \"redoKeystroke\");",
      "info" : "ExpressionStatement[107731-107908]:ExpressionStatement[107913-108090]"
    }, {
      "left" : "textComponent.getActionMap().put(\"redoKeystroke\", REDO_ACTION);",
      "right" : "textComponent.getActionMap().put(\"redoKeystroke\", REDO_ACTION);",
      "info" : "ExpressionStatement[107913-107976]:ExpressionStatement[108095-108158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108052-108345]:Block[108234-108527]"
    }, {
      "left" : "final Class callerClass = ReflectionUtil.getGrandCallerClass();",
      "right" : "final Class callerClass = ReflectionUtil.getGrandCallerClass();",
      "info" : "VariableDeclarationStatement[108058-108121]:VariableDeclarationStatement[108240-108303]"
    }, {
      "left" : "if (callerClass == null)",
      "right" : "if (callerClass == null)",
      "info" : "IfStatement[108126-108158]:IfStatement[108308-108340]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[108151-108158]:ReturnStatement[108333-108340]"
    }, {
      "left" : "playSoundFromStream(new Factory<InputStream>() {\n      @Override\n      public InputStream create() {\n        return callerClass.getResourceAsStream(resourceName);\n      }\n    });",
      "right" : "playSoundFromStream(new Factory<InputStream>() {\n      @Override\n      public InputStream create() {\n        return callerClass.getResourceAsStream(resourceName);\n      }\n    });",
      "info" : "ExpressionStatement[108163-108341]:ExpressionStatement[108345-108523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108262-108333]:Block[108444-108515]"
    }, {
      "left" : "return callerClass.getResourceAsStream(resourceName);",
      "right" : "return callerClass.getResourceAsStream(resourceName);",
      "info" : "ReturnStatement[108272-108325]:ReturnStatement[108454-108507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108431-109066]:Block[108613-109248]"
    }, {
      "left" : "new Thread(new Runnable() {\n      // The wrapper thread is unnecessary, unless it blocks on the\n      // Clip finishing; see comments.\n      @Override\n      public void run() {\n        try {\n          Clip clip = AudioSystem.getClip();\n          InputStream stream = streamProducer.create();\n          if (!stream.markSupported()) stream = new BufferedInputStream(stream);\n          AudioInputStream inputStream = AudioSystem.getAudioInputStream(stream);\n          clip.open(inputStream);\n\n          clip.start();\n        } catch (Exception ignore) {\n          LOG.info(ignore);\n        }\n      }\n    },\"play sound\").start();",
      "right" : "new Thread(new Runnable() {\n      // The wrapper thread is unnecessary, unless it blocks on the\n      // Clip finishing; see comments.\n      @Override\n      public void run() {\n        try {\n          Clip clip = AudioSystem.getClip();\n          InputStream stream = streamProducer.create();\n          if (!stream.markSupported()) stream = new BufferedInputStream(stream);\n          AudioInputStream inputStream = AudioSystem.getAudioInputStream(stream);\n          clip.open(inputStream);\n\n          clip.start();\n        } catch (Exception ignore) {\n          LOG.info(ignore);\n        }\n      }\n    },\"play sound\").start();",
      "info" : "ExpressionStatement[108437-109062]:ExpressionStatement[108619-109244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108612-109033]:Block[108794-109215]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[108622-109025]:TryStatement[108804-109207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108626-108960]:Block[108808-109142]"
    }, {
      "left" : "Clip clip = AudioSystem.getClip();",
      "right" : "Clip clip = AudioSystem.getClip();",
      "info" : "VariableDeclarationStatement[108638-108672]:VariableDeclarationStatement[108820-108854]"
    }, {
      "left" : "InputStream stream = streamProducer.create();",
      "right" : "InputStream stream = streamProducer.create();",
      "info" : "VariableDeclarationStatement[108683-108728]:VariableDeclarationStatement[108865-108910]"
    }, {
      "left" : "if (!stream.markSupported())",
      "right" : "if (!stream.markSupported())",
      "info" : "IfStatement[108739-108809]:IfStatement[108921-108991]"
    }, {
      "left" : "stream = new BufferedInputStream(stream);",
      "right" : "stream = new BufferedInputStream(stream);",
      "info" : "ExpressionStatement[108768-108809]:ExpressionStatement[108950-108991]"
    }, {
      "left" : "AudioInputStream inputStream = AudioSystem.getAudioInputStream(stream);",
      "right" : "AudioInputStream inputStream = AudioSystem.getAudioInputStream(stream);",
      "info" : "VariableDeclarationStatement[108820-108891]:VariableDeclarationStatement[109002-109073]"
    }, {
      "left" : "clip.open(inputStream);",
      "right" : "clip.open(inputStream);",
      "info" : "ExpressionStatement[108902-108925]:ExpressionStatement[109084-109107]"
    }, {
      "left" : "clip.start();",
      "right" : "clip.start();",
      "info" : "ExpressionStatement[108937-108950]:ExpressionStatement[109119-109132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108986-109025]:Block[109168-109207]"
    }, {
      "left" : "LOG.info(ignore);",
      "right" : "LOG.info(ignore);",
      "info" : "ExpressionStatement[108998-109015]:ExpressionStatement[109180-109197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109187-109832]:Block[109369-110014]"
    }, {
      "left" : "InputContext instance = InputContext.getInstance();",
      "right" : "InputContext instance = InputContext.getInstance();",
      "info" : "VariableDeclarationStatement[109193-109244]:VariableDeclarationStatement[109375-109426]"
    }, {
      "left" : "Class<? extends InputContext> instanceClass = instance.getClass();",
      "right" : "Class<? extends InputContext> instanceClass = instance.getClass();",
      "info" : "VariableDeclarationStatement[109249-109315]:VariableDeclarationStatement[109431-109497]"
    }, {
      "left" : "Class<?> superclass = instanceClass.getSuperclass();",
      "right" : "Class<?> superclass = instanceClass.getSuperclass();",
      "info" : "VariableDeclarationStatement[109320-109372]:VariableDeclarationStatement[109502-109554]"
    }, {
      "left" : "if (superclass.getName().equals(\"sun.awt.im.InputContext\"))",
      "right" : "if (superclass.getName().equals(\"sun.awt.im.InputContext\"))",
      "info" : "IfStatement[109377-109811]:IfStatement[109559-109993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109437-109811]:Block[109619-109993]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[109445-109805]:TryStatement[109627-109987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109449-109763]:Block[109631-109945]"
    }, {
      "left" : "Object inputMethodLocator = ReflectionUtil.getField(superclass, instance, null, \"inputMethodLocator\");",
      "right" : "Object inputMethodLocator = ReflectionUtil.getField(superclass, instance, null, \"inputMethodLocator\");",
      "info" : "VariableDeclarationStatement[109459-109561]:VariableDeclarationStatement[109641-109743]"
    }, {
      "left" : "Locale locale = ReflectionUtil.getField(inputMethodLocator.getClass(), inputMethodLocator, Locale.class, \"locale\");",
      "right" : "Locale locale = ReflectionUtil.getField(inputMethodLocator.getClass(), inputMethodLocator, Locale.class, \"locale\");",
      "info" : "VariableDeclarationStatement[109570-109685]:VariableDeclarationStatement[109752-109867]"
    }, {
      "left" : "return locale.getLanguage().toUpperCase(Locale.getDefault());",
      "right" : "return locale.getLanguage().toUpperCase(Locale.getDefault());",
      "info" : "ReturnStatement[109694-109755]:ReturnStatement[109876-109937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109796-109805]:Block[109978-109987]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[109816-109828]:ReturnStatement[109998-110010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110026-111217]:Block[110208-111399]"
    }, {
      "left" : "if (ourRealFontFamilies != null && ourRealFontFamilies.get(genericFontFamily) != null)",
      "right" : "if (ourRealFontFamilies != null && ourRealFontFamilies.get(genericFontFamily) != null)",
      "info" : "IfStatement[110032-110183]:IfStatement[110214-110365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110119-110183]:Block[110301-110365]"
    }, {
      "left" : "return ourRealFontFamilies.get(genericFontFamily);",
      "right" : "return ourRealFontFamilies.get(genericFontFamily);",
      "info" : "ReturnStatement[110127-110177]:ReturnStatement[110309-110359]"
    }, {
      "left" : "String pattern = \"Real Font Family\";",
      "right" : "String pattern = \"Real Font Family\";",
      "info" : "VariableDeclarationStatement[110188-110224]:VariableDeclarationStatement[110370-110406]"
    }, {
      "left" : "List<String> GENERIC = Arrays.asList(Font.DIALOG, Font.DIALOG_INPUT, Font.MONOSPACED, Font.SANS_SERIF, Font.SERIF);",
      "right" : "List<String> GENERIC = Arrays.asList(Font.DIALOG, Font.DIALOG_INPUT, Font.MONOSPACED, Font.SANS_SERIF, Font.SERIF);",
      "info" : "VariableDeclarationStatement[110229-110344]:VariableDeclarationStatement[110411-110526]"
    }, {
      "left" : "int patternSize = 50;",
      "right" : "int patternSize = 50;",
      "info" : "VariableDeclarationStatement[110349-110370]:VariableDeclarationStatement[110531-110552]"
    }, {
      "left" : "BufferedImage image = createImage(1, 1, BufferedImage.TYPE_INT_ARGB);",
      "right" : "BufferedImage image = createImage(1, 1, BufferedImage.TYPE_INT_ARGB);",
      "info" : "VariableDeclarationStatement[110375-110444]:VariableDeclarationStatement[110557-110626]"
    }, {
      "left" : "Graphics graphics = image.getGraphics();",
      "right" : "Graphics graphics = image.getGraphics();",
      "info" : "VariableDeclarationStatement[110449-110489]:VariableDeclarationStatement[110631-110671]"
    }, {
      "left" : "graphics.setFont(new Font(genericFontFamily, Font.PLAIN, patternSize));",
      "right" : "graphics.setFont(new Font(genericFontFamily, Font.PLAIN, patternSize));",
      "info" : "ExpressionStatement[110494-110565]:ExpressionStatement[110676-110747]"
    }, {
      "left" : "Object patternBounds = graphics.getFontMetrics().getStringBounds(pattern, graphics);",
      "right" : "Object patternBounds = graphics.getFontMetrics().getStringBounds(pattern, graphics);",
      "info" : "VariableDeclarationStatement[110570-110654]:VariableDeclarationStatement[110752-110836]"
    }, {
      "left" : "for (String family: GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames())",
      "right" : "for (String family: GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames())",
      "info" : "EnhancedForStatement[110659-111183]:EnhancedForStatement[110841-111365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110760-111183]:Block[110942-111365]"
    }, {
      "left" : "if (GENERIC.contains(family))",
      "right" : "if (GENERIC.contains(family))",
      "info" : "IfStatement[110768-110807]:IfStatement[110950-110989]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[110798-110807]:ContinueStatement[110980-110989]"
    }, {
      "left" : "graphics.setFont(new Font(family, Font.PLAIN, patternSize));",
      "right" : "graphics.setFont(new Font(family, Font.PLAIN, patternSize));",
      "info" : "ExpressionStatement[110814-110874]:ExpressionStatement[110996-111056]"
    }, {
      "left" : "if (graphics.getFontMetrics().getStringBounds(pattern, graphics).equals(patternBounds))",
      "right" : "if (graphics.getFontMetrics().getStringBounds(pattern, graphics).equals(patternBounds))",
      "info" : "IfStatement[110881-111177]:IfStatement[111063-111359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110969-111177]:Block[111151-111359]"
    }, {
      "left" : "if (ourRealFontFamilies == null)",
      "right" : "if (ourRealFontFamilies == null)",
      "info" : "IfStatement[110979-111086]:IfStatement[111161-111268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111012-111086]:Block[111194-111268]"
    }, {
      "left" : "ourRealFontFamilies = new HashMap<String, String>();",
      "right" : "ourRealFontFamilies = new HashMap<String, String>();",
      "info" : "ExpressionStatement[111024-111076]:ExpressionStatement[111206-111258]"
    }, {
      "left" : "ourRealFontFamilies.put(genericFontFamily, family);",
      "right" : "ourRealFontFamilies.put(genericFontFamily, family);",
      "info" : "ExpressionStatement[111095-111146]:ExpressionStatement[111277-111328]"
    }, {
      "left" : "return family;",
      "right" : "return family;",
      "info" : "ReturnStatement[111155-111169]:ReturnStatement[111337-111351]"
    }, {
      "left" : "return genericFontFamily;",
      "right" : "return genericFontFamily;",
      "info" : "ReturnStatement[111188-111213]:ReturnStatement[111370-111395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111266-111319]:Block[111448-111501]"
    }, {
      "left" : "return FontUtil.rightArrow(getLabelFont());",
      "right" : "return FontUtil.rightArrow(getLabelFont());",
      "info" : "ReturnStatement[111272-111315]:ReturnStatement[111454-111497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111393-111457]:Block[111575-111639]"
    }, {
      "left" : "return FontUtil.upArrow(getLabelFont(), defaultValue);",
      "right" : "return FontUtil.upArrow(getLabelFont(), defaultValue);",
      "info" : "ReturnStatement[111399-111453]:ReturnStatement[111581-111635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111542-112454]:Block[111724-112636]"
    }, {
      "left" : "ButtonUI ui = alignSource.getUI();",
      "right" : "ButtonUI ui = alignSource.getUI();",
      "info" : "VariableDeclarationStatement[111548-111582]:VariableDeclarationStatement[111730-111764]"
    }, {
      "left" : "int leftGap = alignSource.getIconTextGap();",
      "right" : "int leftGap = alignSource.getIconTextGap();",
      "info" : "VariableDeclarationStatement[111587-111630]:VariableDeclarationStatement[111769-111812]"
    }, {
      "left" : "Border border = alignSource.getBorder();",
      "right" : "Border border = alignSource.getBorder();",
      "info" : "VariableDeclarationStatement[111635-111675]:VariableDeclarationStatement[111817-111857]"
    }, {
      "left" : "if (border != null)",
      "right" : "if (border != null)",
      "info" : "IfStatement[111680-111766]:IfStatement[111862-111948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111700-111766]:Block[111882-111948]"
    }, {
      "left" : "leftGap += border.getBorderInsets(alignSource).left;",
      "right" : "leftGap += border.getBorderInsets(alignSource).left;",
      "info" : "ExpressionStatement[111708-111760]:ExpressionStatement[111890-111942]"
    }, {
      "left" : "if (ui instanceof BasicRadioButtonUI)",
      "right" : "if (ui instanceof BasicRadioButtonUI)",
      "info" : "IfStatement[111771-112404]:IfStatement[111953-112586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111809-111908]:Block[111991-112090]"
    }, {
      "left" : "leftGap += ((BasicRadioButtonUI)alignSource.getUI()).getDefaultIcon().getIconWidth();",
      "right" : "leftGap += ((BasicRadioButtonUI)alignSource.getUI()).getDefaultIcon().getIconWidth();",
      "info" : "ExpressionStatement[111817-111902]:ExpressionStatement[111999-112084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111918-112404]:Block[112100-112586]"
    }, {
      "left" : "Method method = ReflectionUtil.getMethod(ui.getClass(), \"getDefaultIcon\", JComponent.class);",
      "right" : "Method method = ReflectionUtil.getMethod(ui.getClass(), \"getDefaultIcon\", JComponent.class);",
      "info" : "VariableDeclarationStatement[111926-112018]:VariableDeclarationStatement[112108-112200]"
    }, {
      "left" : "if (method != null)",
      "right" : "if (method != null)",
      "info" : "IfStatement[112025-112398]:IfStatement[112207-112580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112045-112398]:Block[112227-112580]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[112055-112390]:TryStatement[112237-112572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112059-112219]:Block[112241-112401]"
    }, {
      "left" : "Object o = method.invoke(ui, alignSource);",
      "right" : "Object o = method.invoke(ui, alignSource);",
      "info" : "VariableDeclarationStatement[112071-112113]:VariableDeclarationStatement[112253-112295]"
    }, {
      "left" : "if (o instanceof Icon)",
      "right" : "if (o instanceof Icon)",
      "info" : "IfStatement[112124-112209]:IfStatement[112306-112391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112147-112209]:Block[112329-112391]"
    }, {
      "left" : "leftGap += ((Icon)o).getIconWidth();",
      "right" : "leftGap += ((Icon)o).getIconWidth();",
      "info" : "ExpressionStatement[112161-112197]:ExpressionStatement[112343-112379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112261-112303]:Block[112443-112485]"
    }, {
      "left" : "e.printStackTrace();",
      "right" : "e.printStackTrace();",
      "info" : "ExpressionStatement[112273-112293]:ExpressionStatement[112455-112475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112348-112390]:Block[112530-112572]"
    }, {
      "left" : "e.printStackTrace();",
      "right" : "e.printStackTrace();",
      "info" : "ExpressionStatement[112360-112380]:ExpressionStatement[112542-112562]"
    }, {
      "left" : "return new EmptyBorder(0, leftGap, 0, 0);",
      "right" : "return new EmptyBorder(0, leftGap, 0, 0);",
      "info" : "ReturnStatement[112409-112450]:ReturnStatement[112591-112632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112657-113072]:Block[112839-113254]"
    }, {
      "left" : "NumberFormat format = NumberFormat.getIntegerInstance();",
      "right" : "NumberFormat format = NumberFormat.getIntegerInstance();",
      "info" : "VariableDeclarationStatement[112663-112719]:VariableDeclarationStatement[112845-112901]"
    }, {
      "left" : "format.setParseIntegerOnly(true);",
      "right" : "format.setParseIntegerOnly(true);",
      "info" : "ExpressionStatement[112724-112757]:ExpressionStatement[112906-112939]"
    }, {
      "left" : "format.setGroupingUsed(false);",
      "right" : "format.setGroupingUsed(false);",
      "info" : "ExpressionStatement[112762-112792]:ExpressionStatement[112944-112974]"
    }, {
      "left" : "NumberFormatter numberFormatter = new NumberFormatter(format);",
      "right" : "NumberFormatter numberFormatter = new NumberFormatter(format);",
      "info" : "VariableDeclarationStatement[112797-112859]:VariableDeclarationStatement[112979-113041]"
    }, {
      "left" : "numberFormatter.setMinimum(0);",
      "right" : "numberFormatter.setMinimum(0);",
      "info" : "ExpressionStatement[112864-112894]:ExpressionStatement[113046-113076]"
    }, {
      "left" : "textField.setFormatterFactory(new DefaultFormatterFactory(numberFormatter));",
      "right" : "textField.setFormatterFactory(new DefaultFormatterFactory(numberFormatter));",
      "info" : "ExpressionStatement[112899-112975]:ExpressionStatement[113081-113157]"
    }, {
      "left" : "textField.setHorizontalAlignment(SwingConstants.TRAILING);",
      "right" : "textField.setHorizontalAlignment(SwingConstants.TRAILING);",
      "info" : "ExpressionStatement[112980-113038]:ExpressionStatement[113162-113220]"
    }, {
      "left" : "textField.setColumns(4);",
      "right" : "textField.setColumns(4);",
      "info" : "ExpressionStatement[113044-113068]:ExpressionStatement[113226-113250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[113503-113614]:Block[113685-113796]"
    }, {
      "left" : "return component instanceof Window ? (Window)component : SwingUtilities.getWindowAncestor(component);",
      "right" : "return component instanceof Window ? (Window)component : SwingUtilities.getWindowAncestor(component);",
      "info" : "ReturnStatement[113509-113610]:ReturnStatement[113691-113792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[113673-114006]:Block[113855-114188]"
    }, {
      "left" : "BufferedImage image = createImage(component.getWidth(), component.getHeight(), BufferedImage.TYPE_INT_ARGB);",
      "right" : "BufferedImage image = createImage(component.getWidth(), component.getHeight(), BufferedImage.TYPE_INT_ARGB);",
      "info" : "VariableDeclarationStatement[113679-113787]:VariableDeclarationStatement[113861-113969]"
    }, {
      "left" : "Graphics2D graphics = image.createGraphics();",
      "right" : "Graphics2D graphics = image.createGraphics();",
      "info" : "VariableDeclarationStatement[113792-113837]:VariableDeclarationStatement[113974-114019]"
    }, {
      "left" : "graphics.setColor(Color.RED);",
      "right" : "graphics.setColor(Color.RED);",
      "info" : "ExpressionStatement[113842-113871]:ExpressionStatement[114024-114053]"
    }, {
      "left" : "graphics.fillRect(0, 0, component.getWidth() + 1, component.getHeight() + 1);",
      "right" : "graphics.fillRect(0, 0, component.getWidth() + 1, component.getHeight() + 1);",
      "info" : "ExpressionStatement[113876-113953]:ExpressionStatement[114058-114135]"
    }, {
      "left" : "component.paint(graphics);",
      "right" : "component.paint(graphics);",
      "info" : "ExpressionStatement[113958-113984]:ExpressionStatement[114140-114166]"
    }, {
      "left" : "return image;",
      "right" : "return image;",
      "info" : "ReturnStatement[113989-114002]:ReturnStatement[114171-114184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114186-114252]:Block[114368-114434]"
    }, {
      "left" : "return hasComponentOfType(component, JScrollPane.class);",
      "right" : "return hasComponentOfType(component, JScrollPane.class);",
      "info" : "ReturnStatement[114192-114248]:ReturnStatement[114374-114430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114501-114921]:Block[114683-115103]"
    }, {
      "left" : "for (Class<?> type : types)",
      "right" : "for (Class<?> type : types)",
      "info" : "EnhancedForStatement[114507-114628]:EnhancedForStatement[114689-114810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114535-114628]:Block[114717-114810]"
    }, {
      "left" : "if (type.isAssignableFrom(component.getClass()))",
      "right" : "if (type.isAssignableFrom(component.getClass()))",
      "info" : "IfStatement[114543-114622]:IfStatement[114725-114804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114592-114622]:Block[114774-114804]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[114602-114614]:ReturnStatement[114784-114796]"
    }, {
      "left" : "if (component instanceof Container)",
      "right" : "if (component instanceof Container)",
      "info" : "IfStatement[114633-114899]:IfStatement[114815-115081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114669-114899]:Block[114851-115081]"
    }, {
      "left" : "Container container = (Container)component;",
      "right" : "Container container = (Container)component;",
      "info" : "VariableDeclarationStatement[114677-114720]:VariableDeclarationStatement[114859-114902]"
    }, {
      "left" : "for (int i = 0; i < container.getComponentCount(); i++)",
      "right" : "for (int i = 0; i < container.getComponentCount(); i++)",
      "info" : "ForStatement[114727-114893]:ForStatement[114909-115075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114783-114893]:Block[114965-115075]"
    }, {
      "left" : "if (hasComponentOfType(container.getComponent(i), types))",
      "right" : "if (hasComponentOfType(container.getComponent(i), types))",
      "info" : "IfStatement[114793-114885]:IfStatement[114975-115067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114851-114885]:Block[115033-115067]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[114863-114875]:ReturnStatement[115045-115057]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[114904-114917]:ReturnStatement[115086-115099]"
    } ]
  },
  "interFileMappings" : { }
}