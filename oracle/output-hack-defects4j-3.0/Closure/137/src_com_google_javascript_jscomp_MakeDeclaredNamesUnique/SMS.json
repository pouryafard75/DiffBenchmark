{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "MakeDeclaredNamesUnique",
      "right" : "MakeDeclaredNamesUnique",
      "info" : "TypeDeclaration[1378-15116]:TypeDeclaration[1367-15714]"
    }, {
      "left" : "private Deque<Renamer> nameStack = new ArrayDeque<Renamer>();",
      "right" : "private Deque<Renamer> nameStack = new ArrayDeque<Renamer>();",
      "info" : "FieldDeclaration[1699-1760]:FieldDeclaration[1742-1803]"
    }, {
      "left" : "private final Renamer rootRenamer;",
      "right" : "private final Renamer rootRenamer;",
      "info" : "FieldDeclaration[1763-1797]:FieldDeclaration[1806-1840]"
    }, {
      "left" : "MakeDeclaredNamesUnique()",
      "right" : "MakeDeclaredNamesUnique()",
      "info" : "MethodDeclaration[1801-1880]:MethodDeclaration[1844-1923]"
    }, {
      "left" : "MakeDeclaredNamesUnique(Renamer renamer)",
      "right" : "MakeDeclaredNamesUnique(Renamer renamer)",
      "info" : "MethodDeclaration[1884-1962]:MethodDeclaration[1927-2005]"
    }, {
      "left" : "static CompilerPass getContextualRenameInverter(AbstractCompiler compiler)",
      "right" : "static CompilerPass getContextualRenameInverter(AbstractCompiler compiler)",
      "info" : "MethodDeclaration[1966-2097]:MethodDeclaration[2009-2140]"
    }, {
      "left" : "public void enterScope(NodeTraversal t)",
      "right" : "public void enterScope(NodeTraversal t)",
      "info" : "MethodDeclaration[2101-3267]:MethodDeclaration[2144-3310]"
    }, {
      "left" : "public void exitScope(NodeTraversal t)",
      "right" : "public void exitScope(NodeTraversal t)",
      "info" : "MethodDeclaration[3271-3386]:MethodDeclaration[3314-3429]"
    }, {
      "left" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "right" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[3390-4360]:MethodDeclaration[3433-4403]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[4364-5164]:MethodDeclaration[4407-5207]"
    }, {
      "left" : "private String getReplacementName(String oldName)",
      "right" : "private String getReplacementName(String oldName)",
      "info" : "MethodDeclaration[5168-5508]:MethodDeclaration[5211-5551]"
    }, {
      "left" : "private void findDeclaredNames(Node n, Node parent, Renamer renamer)",
      "right" : "private void findDeclaredNames(Node n, Node parent, Renamer renamer)",
      "info" : "MethodDeclaration[5512-6337]:MethodDeclaration[5555-6380]"
    }, {
      "left" : "Renamer",
      "right" : "Renamer",
      "info" : "TypeDeclaration[6341-6958]:TypeDeclaration[6384-7001]"
    }, {
      "left" : "void addDeclaredName(String name);",
      "right" : "void addDeclaredName(String name);",
      "info" : "MethodDeclaration[6425-6547]:MethodDeclaration[6468-6590]"
    }, {
      "left" : "String getReplacementName(String oldName);",
      "right" : "String getReplacementName(String oldName);",
      "info" : "MethodDeclaration[6553-6707]:MethodDeclaration[6596-6750]"
    }, {
      "left" : "boolean stripConstIfReplaced();",
      "right" : "boolean stripConstIfReplaced();",
      "info" : "MethodDeclaration[6713-6830]:MethodDeclaration[6756-6873]"
    }, {
      "left" : "Renamer forChildScope();",
      "right" : "Renamer forChildScope();",
      "info" : "MethodDeclaration[6836-6954]:MethodDeclaration[6879-6997]"
    }, {
      "left" : "ContextualRenameInverter",
      "right" : "ContextualRenameInverter",
      "info" : "TypeDeclaration[6962-10868]:TypeDeclaration[7005-11356]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[7159-7199]:FieldDeclaration[7184-7224]"
    }, {
      "left" : "private Map<Var, String> nameMap = Maps.newHashMap();",
      "right" : "private Map<String, List<Node>> nameMap = Maps.newHashMap();",
      "info" : "FieldDeclaration[7370-7423]:FieldDeclaration[7535-7595]"
    }, {
      "left" : "private ContextualRenameInverter(AbstractCompiler compiler)",
      "right" : "private ContextualRenameInverter(AbstractCompiler compiler)",
      "info" : "MethodDeclaration[7429-7528]:MethodDeclaration[7601-7700]"
    }, {
      "left" : "public void process(Node externs, Node js)",
      "right" : "public void process(Node externs, Node js)",
      "info" : "MethodDeclaration[7534-7634]:MethodDeclaration[7706-7806]"
    }, {
      "left" : "public static String getOrginalName(String name)",
      "right" : "public static String getOrginalName(String name)",
      "info" : "MethodDeclaration[7640-7800]:MethodDeclaration[7812-7972]"
    }, {
      "left" : "private static int indexOfSeparator(String name)",
      "right" : "private static int indexOfSeparator(String name)",
      "info" : "MethodDeclaration[7806-7932]:MethodDeclaration[7978-8104]"
    }, {
      "left" : "private boolean containsSeparator(String name)",
      "right" : "private boolean containsSeparator(String name)",
      "info" : "MethodDeclaration[7938-8064]:MethodDeclaration[8110-8236]"
    }, {
      "left" : "private static String getNameSuffix(String name, int index)",
      "right" : "public void addDeclaredName(String name)",
      "info" : "MethodDeclaration[8190-8435]:MethodDeclaration[14603-14828]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node node, Node parent)",
      "right" : "void handleScopeVar(Var v)",
      "info" : "MethodDeclaration[8441-10863]:MethodDeclaration[9319-10457]"
    }, {
      "left" : "ContextualRenamer",
      "right" : "ContextualRenamer",
      "info" : "TypeDeclaration[10872-13129]:TypeDeclaration[11360-13670]"
    }, {
      "left" : "private final Multiset<String> nameUsage;",
      "right" : "private final Multiset<String> nameUsage;",
      "info" : "FieldDeclaration[11342-11383]:FieldDeclaration[11830-11871]"
    }, {
      "left" : "private final Map<String, String> declarations = Maps.newHashMap();",
      "right" : "private final Map<String, String> declarations = Maps.newHashMap();",
      "info" : "FieldDeclaration[11388-11455]:FieldDeclaration[11876-11943]"
    }, {
      "left" : "private final boolean global;",
      "right" : "private final boolean global;",
      "info" : "FieldDeclaration[11460-11489]:FieldDeclaration[11948-11977]"
    }, {
      "left" : "final static String UNIQUE_ID_SEPARATOR = \"$$\";",
      "right" : "final static String UNIQUE_ID_SEPARATOR = \"$$\";",
      "info" : "FieldDeclaration[11495-11542]:FieldDeclaration[11983-12030]"
    }, {
      "left" : "ContextualRenamer()",
      "right" : "ContextualRenamer()",
      "info" : "MethodDeclaration[11548-11642]:MethodDeclaration[12036-12130]"
    }, {
      "left" : "private ContextualRenamer(Multiset<String> nameUsage)",
      "right" : "private ContextualRenamer(Multiset<String> nameUsage)",
      "info" : "MethodDeclaration[11648-11823]:MethodDeclaration[12136-12311]"
    }, {
      "left" : "public Renamer forChildScope()",
      "right" : "public Renamer forChildScope()",
      "info" : "MethodDeclaration[11829-11978]:MethodDeclaration[12317-12466]"
    }, {
      "left" : "public void addDeclaredName(String name)",
      "right" : "public void addDeclaredName(String name)",
      "info" : "MethodDeclaration[11984-12547]:MethodDeclaration[12472-13088]"
    }, {
      "left" : "public String getReplacementName(String oldName)",
      "right" : "public String getReplacementName(String oldName)",
      "info" : "MethodDeclaration[12553-12663]:MethodDeclaration[13094-13204]"
    }, {
      "left" : "private String getUniqueName(String name, int id)",
      "right" : "private String getUniqueName(String name, int id)",
      "info" : "MethodDeclaration[12669-12857]:MethodDeclaration[13210-13398]"
    }, {
      "left" : "private void reserveName(String name)",
      "right" : "private void reserveName(String name)",
      "info" : "MethodDeclaration[12863-12946]:MethodDeclaration[13404-13487]"
    }, {
      "left" : "private int incrementNameCount(String name)",
      "right" : "private int incrementNameCount(String name)",
      "info" : "MethodDeclaration[12952-13040]:MethodDeclaration[13493-13581]"
    }, {
      "left" : "public boolean stripConstIfReplaced()",
      "right" : "public boolean stripConstIfReplaced()",
      "info" : "MethodDeclaration[13046-13125]:MethodDeclaration[13587-13666]"
    }, {
      "left" : "InlineRenamer",
      "right" : "InlineRenamer",
      "info" : "TypeDeclaration[13134-15113]:TypeDeclaration[13675-15711]"
    }, {
      "left" : "private final Map<String, String> declarations = Maps.newHashMap();",
      "right" : "private final Map<String, String> declarations = Maps.newHashMap();",
      "info" : "FieldDeclaration[13427-13494]:FieldDeclaration[13968-14035]"
    }, {
      "left" : "private final Supplier<String> uniqueIdSupplier;",
      "right" : "private final Supplier<String> uniqueIdSupplier;",
      "info" : "FieldDeclaration[13499-13547]:FieldDeclaration[14040-14088]"
    }, {
      "left" : "private final String idPrefix;",
      "right" : "private final String idPrefix;",
      "info" : "FieldDeclaration[13552-13582]:FieldDeclaration[14093-14123]"
    }, {
      "left" : "private final boolean removeConstness;",
      "right" : "private final boolean removeConstness;",
      "info" : "FieldDeclaration[13587-13625]:FieldDeclaration[14128-14166]"
    }, {
      "left" : "InlineRenamer(\n        Supplier<String> uniqueIdSupplier,\n        String idPrefix,\n        boolean removeConstness)",
      "right" : "InlineRenamer(\n        Supplier<String> uniqueIdSupplier,\n        String idPrefix,\n        boolean removeConstness)",
      "info" : "MethodDeclaration[13631-14056]:MethodDeclaration[14172-14597]"
    }, {
      "left" : "private String getUniqueName(String name)",
      "right" : "private String getUniqueName(String name)",
      "info" : "MethodDeclaration[14236-14763]:MethodDeclaration[14834-15361]"
    }, {
      "left" : "public String getReplacementName(String oldName)",
      "right" : "public String getReplacementName(String oldName)",
      "info" : "MethodDeclaration[14769-14879]:MethodDeclaration[15367-15477]"
    }, {
      "left" : "public Renamer forChildScope()",
      "right" : "public Renamer forChildScope()",
      "info" : "MethodDeclaration[14885-15014]:MethodDeclaration[15483-15612]"
    }, {
      "left" : "public boolean stripConstIfReplaced()",
      "right" : "public boolean stripConstIfReplaced()",
      "info" : "MethodDeclaration[15020-15109]:MethodDeclaration[15618-15707]"
    } ],
    "mappings" : [
 {
      "left" : "com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback",
      "right" : "com.google.javascript.jscomp.NodeTraversal.ScopedCallback",
      "info" : "QualifiedName[981-1049]:QualifiedName[981-1038]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1620-1625]:TYPE_DECLARATION_KIND[1609-1614]"
    }, {
      "left" : "MakeDeclaredNamesUnique",
      "right" : "MakeDeclaredNamesUnique",
      "info" : "SimpleName[1626-1649]:SimpleName[1615-1638]"
    }, {
      "left" : "NodeTraversal.ScopedCallback",
      "right" : "NodeTraversal.ScopedCallback",
      "info" : "SimpleType[1665-1693]:SimpleType[1654-1682]"
    }, {
      "left" : "MakeDeclaredNamesUnique",
      "right" : "MakeDeclaredNamesUnique",
      "info" : "SimpleName[1801-1824]:SimpleName[1844-1867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1827-1880]:Block[1870-1923]"
    }, {
      "left" : "this.rootRenamer = new ContextualRenamer();",
      "right" : "this.rootRenamer = new ContextualRenamer();",
      "info" : "ExpressionStatement[1833-1876]:ExpressionStatement[1876-1919]"
    }, {
      "left" : "MakeDeclaredNamesUnique",
      "right" : "MakeDeclaredNamesUnique",
      "info" : "SimpleName[1884-1907]:SimpleName[1927-1950]"
    }, {
      "left" : "Renamer renamer",
      "right" : "Renamer renamer",
      "info" : "SingleVariableDeclaration[1908-1923]:SingleVariableDeclaration[1951-1966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1925-1962]:Block[1968-2005]"
    }, {
      "left" : "this.rootRenamer = renamer;",
      "right" : "this.rootRenamer = renamer;",
      "info" : "ExpressionStatement[1931-1958]:ExpressionStatement[1974-2001]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1966-1972]:Modifier[2009-2015]"
    }, {
      "left" : "CompilerPass",
      "right" : "CompilerPass",
      "info" : "SimpleType[1973-1985]:SimpleType[2016-2028]"
    }, {
      "left" : "getContextualRenameInverter",
      "right" : "getContextualRenameInverter",
      "info" : "SimpleName[1986-2013]:SimpleName[2029-2056]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[2014-2039]:SingleVariableDeclaration[2057-2082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2041-2097]:Block[2084-2140]"
    }, {
      "left" : "return new ContextualRenameInverter(compiler);",
      "right" : "return new ContextualRenameInverter(compiler);",
      "info" : "ReturnStatement[2047-2093]:ReturnStatement[2090-2136]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2101-2110]:MarkerAnnotation[2144-2153]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2113-2119]:Modifier[2156-2162]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2120-2124]:PrimitiveType[2163-2167]"
    }, {
      "left" : "enterScope",
      "right" : "enterScope",
      "info" : "SimpleName[2125-2135]:SimpleName[2168-2178]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[2136-2151]:SingleVariableDeclaration[2179-2194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2153-3267]:Block[2196-3310]"
    }, {
      "left" : "Node declarationRoot = t.getScopeRoot();",
      "right" : "Node declarationRoot = t.getScopeRoot();",
      "info" : "VariableDeclarationStatement[2159-2199]:VariableDeclarationStatement[2202-2242]"
    }, {
      "left" : "Renamer renamer;",
      "right" : "Renamer renamer;",
      "info" : "VariableDeclarationStatement[2204-2220]:VariableDeclarationStatement[2247-2263]"
    }, {
      "left" : "if (nameStack.isEmpty())",
      "right" : "if (nameStack.isEmpty())",
      "info" : "IfStatement[2225-2647]:IfStatement[2268-2690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2250-2584]:Block[2293-2627]"
    }, {
      "left" : "Preconditions.checkState(\n          declarationRoot.getType() != Token.FUNCTION ||\n          !(rootRenamer instanceof ContextualRenamer));",
      "right" : "Preconditions.checkState(\n          declarationRoot.getType() != Token.FUNCTION ||\n          !(rootRenamer instanceof ContextualRenamer));",
      "info" : "ExpressionStatement[2360-2498]:ExpressionStatement[2403-2541]"
    }, {
      "left" : "Preconditions.checkState(t.inGlobalScope());",
      "right" : "Preconditions.checkState(t.inGlobalScope());",
      "info" : "ExpressionStatement[2505-2549]:ExpressionStatement[2548-2592]"
    }, {
      "left" : "renamer = rootRenamer;",
      "right" : "renamer = rootRenamer;",
      "info" : "ExpressionStatement[2556-2578]:ExpressionStatement[2599-2621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2590-2647]:Block[2633-2690]"
    }, {
      "left" : "renamer = nameStack.peek().forChildScope();",
      "right" : "renamer = nameStack.peek().forChildScope();",
      "info" : "ExpressionStatement[2598-2641]:ExpressionStatement[2641-2684]"
    }, {
      "left" : "if (declarationRoot.getType() == Token.FUNCTION)",
      "right" : "if (declarationRoot.getType() == Token.FUNCTION)",
      "info" : "IfStatement[2653-3234]:IfStatement[2696-3277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2702-3128]:Block[2745-3171]"
    }, {
      "left" : "Node fnParams = declarationRoot.getFirstChild().getNext();",
      "right" : "Node fnParams = declarationRoot.getFirstChild().getNext();",
      "info" : "VariableDeclarationStatement[2747-2805]:VariableDeclarationStatement[2790-2848]"
    }, {
      "left" : "for (Node c = fnParams.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = fnParams.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[2812-2965]:ForStatement[2855-3008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2880-2965]:Block[2923-3008]"
    }, {
      "left" : "String name = c.getString();",
      "right" : "String name = c.getString();",
      "info" : "VariableDeclarationStatement[2890-2918]:VariableDeclarationStatement[2933-2961]"
    }, {
      "left" : "renamer.addDeclaredName(name);",
      "right" : "renamer.addDeclaredName(name);",
      "info" : "ExpressionStatement[2927-2957]:ExpressionStatement[2970-3000]"
    }, {
      "left" : "Node functionBody = declarationRoot.getLastChild();",
      "right" : "Node functionBody = declarationRoot.getLastChild();",
      "info" : "VariableDeclarationStatement[3017-3068]:VariableDeclarationStatement[3060-3111]"
    }, {
      "left" : "findDeclaredNames(functionBody, null, renamer);",
      "right" : "findDeclaredNames(functionBody, null, renamer);",
      "info" : "ExpressionStatement[3075-3122]:ExpressionStatement[3118-3165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3134-3234]:Block[3177-3277]"
    }, {
      "left" : "findDeclaredNames(declarationRoot, null, renamer);",
      "right" : "findDeclaredNames(declarationRoot, null, renamer);",
      "info" : "ExpressionStatement[3178-3228]:ExpressionStatement[3221-3271]"
    }, {
      "left" : "nameStack.push(renamer);",
      "right" : "nameStack.push(renamer);",
      "info" : "ExpressionStatement[3239-3263]:ExpressionStatement[3282-3306]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3271-3280]:MarkerAnnotation[3314-3323]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3283-3289]:Modifier[3326-3332]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3290-3294]:PrimitiveType[3333-3337]"
    }, {
      "left" : "exitScope",
      "right" : "exitScope",
      "info" : "SimpleName[3295-3304]:SimpleName[3338-3347]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[3305-3320]:SingleVariableDeclaration[3348-3363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3322-3386]:Block[3365-3429]"
    }, {
      "left" : "if (!t.inGlobalScope())",
      "right" : "if (!t.inGlobalScope())",
      "info" : "IfStatement[3328-3382]:IfStatement[3371-3425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3352-3382]:Block[3395-3425]"
    }, {
      "left" : "nameStack.pop();",
      "right" : "nameStack.pop();",
      "info" : "ExpressionStatement[3360-3376]:ExpressionStatement[3403-3419]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3390-3399]:MarkerAnnotation[3433-3442]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3402-3408]:Modifier[3445-3451]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3409-3416]:PrimitiveType[3452-3459]"
    }, {
      "left" : "shouldTraverse",
      "right" : "shouldTraverse",
      "info" : "SimpleName[3417-3431]:SimpleName[3460-3474]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[3432-3447]:SingleVariableDeclaration[3475-3490]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[3449-3455]:SingleVariableDeclaration[3492-3498]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[3457-3468]:SingleVariableDeclaration[3500-3511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3470-4360]:Block[3513-4403]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.FUNCTION:\n        {\n          // Add recursive function name, if needed.\n          // NOTE: \"enterScope\" is called after we need to pick up this name.\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          // If needed, add the function recursive name.\n          String name = n.getFirstChild().getString();\n          if (name != null && !name.isEmpty() && parent != null\n              && !NodeUtil.isFunctionDeclaration(n)) {\n            renamer.addDeclaredName(name);\n          }\n\n          nameStack.push(renamer);\n        }\n        break;\n\n      case Token.CATCH:\n        {\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          String name = n.getFirstChild().getString();\n          renamer.addDeclaredName(name);\n\n          nameStack.push(renamer);\n        }\n        break;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.FUNCTION:\n        {\n          // Add recursive function name, if needed.\n          // NOTE: \"enterScope\" is called after we need to pick up this name.\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          // If needed, add the function recursive name.\n          String name = n.getFirstChild().getString();\n          if (name != null && !name.isEmpty() && parent != null\n              && !NodeUtil.isFunctionDeclaration(n)) {\n            renamer.addDeclaredName(name);\n          }\n\n          nameStack.push(renamer);\n        }\n        break;\n\n      case Token.CATCH:\n        {\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          String name = n.getFirstChild().getString();\n          renamer.addDeclaredName(name);\n\n          nameStack.push(renamer);\n        }\n        break;\n    }",
      "info" : "SwitchStatement[3477-4338]:SwitchStatement[3520-4381]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[3506-3526]:SwitchCase[3549-3569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3535-4062]:Block[3578-4105]"
    }, {
      "left" : "Renamer renamer = nameStack.peek().forChildScope();",
      "right" : "Renamer renamer = nameStack.peek().forChildScope();",
      "info" : "VariableDeclarationStatement[3678-3729]:VariableDeclarationStatement[3721-3772]"
    }, {
      "left" : "String name = n.getFirstChild().getString();",
      "right" : "String name = n.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[3798-3842]:VariableDeclarationStatement[3841-3885]"
    }, {
      "left" : "if (name != null && !name.isEmpty() && parent != null\n              && !NodeUtil.isFunctionDeclaration(n))",
      "right" : "if (name != null && !name.isEmpty() && parent != null\n              && !NodeUtil.isFunctionDeclaration(n))",
      "info" : "IfStatement[3853-4016]:IfStatement[3896-4059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3960-4016]:Block[4003-4059]"
    }, {
      "left" : "renamer.addDeclaredName(name);",
      "right" : "renamer.addDeclaredName(name);",
      "info" : "ExpressionStatement[3974-4004]:ExpressionStatement[4017-4047]"
    }, {
      "left" : "nameStack.push(renamer);",
      "right" : "nameStack.push(renamer);",
      "info" : "ExpressionStatement[4028-4052]:ExpressionStatement[4071-4095]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4071-4077]:BreakStatement[4114-4120]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[4085-4102]:SwitchCase[4128-4145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4111-4317]:Block[4154-4360]"
    }, {
      "left" : "Renamer renamer = nameStack.peek().forChildScope();",
      "right" : "Renamer renamer = nameStack.peek().forChildScope();",
      "info" : "VariableDeclarationStatement[4123-4174]:VariableDeclarationStatement[4166-4217]"
    }, {
      "left" : "String name = n.getFirstChild().getString();",
      "right" : "String name = n.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[4186-4230]:VariableDeclarationStatement[4229-4273]"
    }, {
      "left" : "renamer.addDeclaredName(name);",
      "right" : "renamer.addDeclaredName(name);",
      "info" : "ExpressionStatement[4241-4271]:ExpressionStatement[4284-4314]"
    }, {
      "left" : "nameStack.push(renamer);",
      "right" : "nameStack.push(renamer);",
      "info" : "ExpressionStatement[4283-4307]:ExpressionStatement[4326-4350]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4326-4332]:BreakStatement[4369-4375]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4344-4356]:ReturnStatement[4387-4399]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4364-4373]:MarkerAnnotation[4407-4416]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4376-4382]:Modifier[4419-4425]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4383-4387]:PrimitiveType[4426-4430]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[4388-4393]:SimpleName[4431-4436]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[4394-4409]:SingleVariableDeclaration[4437-4452]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[4411-4417]:SingleVariableDeclaration[4454-4460]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[4419-4430]:SingleVariableDeclaration[4462-4473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4432-5164]:Block[4475-5207]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.NAME:\n        String newName = getReplacementName(n.getString());\n        if (newName != null) {\n          Renamer renamer = nameStack.peek();\n          if (renamer.stripConstIfReplaced()) {\n            // TODO(johnlenz): Do we need to do anything about the javadoc?\n            n.removeProp(Node.IS_CONSTANT_NAME);\n          }\n          n.setString(newName);\n          t.getCompiler().reportCodeChange();\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Remove function recursive name (if any).\n        nameStack.pop();\n        break;\n\n      case Token.CATCH:\n        // Remove catch except name from the stack of names.\n        nameStack.pop();\n        break;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.NAME:\n        String newName = getReplacementName(n.getString());\n        if (newName != null) {\n          Renamer renamer = nameStack.peek();\n          if (renamer.stripConstIfReplaced()) {\n            // TODO(johnlenz): Do we need to do anything about the javadoc?\n            n.removeProp(Node.IS_CONSTANT_NAME);\n          }\n          n.setString(newName);\n          t.getCompiler().reportCodeChange();\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Remove function recursive name (if any).\n        nameStack.pop();\n        break;\n\n      case Token.CATCH:\n        // Remove catch except name from the stack of names.\n        nameStack.pop();\n        break;\n    }",
      "info" : "SwitchStatement[4438-5160]:SwitchStatement[4481-5203]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[4467-4483]:SwitchCase[4510-4526]"
    }, {
      "left" : "String newName = getReplacementName(n.getString());",
      "right" : "String newName = getReplacementName(n.getString());",
      "info" : "VariableDeclarationStatement[4492-4543]:VariableDeclarationStatement[4535-4586]"
    }, {
      "left" : "if (newName != null)",
      "right" : "if (newName != null)",
      "info" : "IfStatement[4552-4893]:IfStatement[4595-4936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4573-4893]:Block[4616-4936]"
    }, {
      "left" : "Renamer renamer = nameStack.peek();",
      "right" : "Renamer renamer = nameStack.peek();",
      "info" : "VariableDeclarationStatement[4585-4620]:VariableDeclarationStatement[4628-4663]"
    }, {
      "left" : "if (renamer.stripConstIfReplaced())",
      "right" : "if (renamer.stripConstIfReplaced())",
      "info" : "IfStatement[4631-4805]:IfStatement[4674-4848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4667-4805]:Block[4710-4848]"
    }, {
      "left" : "n.removeProp(Node.IS_CONSTANT_NAME);",
      "right" : "n.removeProp(Node.IS_CONSTANT_NAME);",
      "info" : "ExpressionStatement[4757-4793]:ExpressionStatement[4800-4836]"
    }, {
      "left" : "n.setString(newName);",
      "right" : "n.setString(newName);",
      "info" : "ExpressionStatement[4816-4837]:ExpressionStatement[4859-4880]"
    }, {
      "left" : "t.getCompiler().reportCodeChange();",
      "right" : "t.getCompiler().reportCodeChange();",
      "info" : "ExpressionStatement[4848-4883]:ExpressionStatement[4891-4926]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4902-4908]:BreakStatement[4945-4951]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[4916-4936]:SwitchCase[4959-4979]"
    }, {
      "left" : "nameStack.pop();",
      "right" : "nameStack.pop();",
      "info" : "ExpressionStatement[4997-5013]:ExpressionStatement[5040-5056]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5022-5028]:BreakStatement[5065-5071]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[5036-5053]:SwitchCase[5079-5096]"
    }, {
      "left" : "nameStack.pop();",
      "right" : "nameStack.pop();",
      "info" : "ExpressionStatement[5123-5139]:ExpressionStatement[5166-5182]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5148-5154]:BreakStatement[5191-5197]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5273-5280]:Modifier[5316-5323]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[5281-5287]:SimpleType[5324-5330]"
    }, {
      "left" : "getReplacementName",
      "right" : "getReplacementName",
      "info" : "SimpleName[5288-5306]:SimpleName[5331-5349]"
    }, {
      "left" : "String oldName",
      "right" : "String oldName",
      "info" : "SingleVariableDeclaration[5307-5321]:SingleVariableDeclaration[5350-5364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5323-5508]:Block[5366-5551]"
    }, {
      "left" : "for (Renamer names : nameStack)",
      "right" : "for (Renamer names : nameStack)",
      "info" : "EnhancedForStatement[5329-5487]:EnhancedForStatement[5372-5530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5361-5487]:Block[5404-5530]"
    }, {
      "left" : "String newName = names.getReplacementName(oldName);",
      "right" : "String newName = names.getReplacementName(oldName);",
      "info" : "VariableDeclarationStatement[5369-5420]:VariableDeclarationStatement[5412-5463]"
    }, {
      "left" : "if (newName != null)",
      "right" : "if (newName != null)",
      "info" : "IfStatement[5427-5481]:IfStatement[5470-5524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5448-5481]:Block[5491-5524]"
    }, {
      "left" : "return newName;",
      "right" : "return newName;",
      "info" : "ReturnStatement[5458-5473]:ReturnStatement[5501-5516]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[5492-5504]:ReturnStatement[5535-5547]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5648-5655]:Modifier[5691-5698]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5656-5660]:PrimitiveType[5699-5703]"
    }, {
      "left" : "findDeclaredNames",
      "right" : "findDeclaredNames",
      "info" : "SimpleName[5661-5678]:SimpleName[5704-5721]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[5679-5685]:SingleVariableDeclaration[5722-5728]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[5687-5698]:SingleVariableDeclaration[5730-5741]"
    }, {
      "left" : "Renamer renamer",
      "right" : "Renamer renamer",
      "info" : "SingleVariableDeclaration[5700-5715]:SingleVariableDeclaration[5743-5758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5717-6337]:Block[5760-6380]"
    }, {
      "left" : "if (parent == null\n        || parent.getType() != Token.FUNCTION\n        || n == parent.getFirstChild())",
      "right" : "if (parent == null\n        || parent.getType() != Token.FUNCTION\n        || n == parent.getFirstChild())",
      "info" : "IfStatement[5851-6333]:IfStatement[5894-6376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5956-6333]:Block[5999-6376]"
    }, {
      "left" : "if (NodeUtil.isVarDeclaration(n))",
      "right" : "if (NodeUtil.isVarDeclaration(n))",
      "info" : "IfStatement[5964-6207]:IfStatement[6007-6250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5998-6055]:Block[6041-6098]"
    }, {
      "left" : "renamer.addDeclaredName(n.getString());",
      "right" : "renamer.addDeclaredName(n.getString());",
      "info" : "ExpressionStatement[6008-6047]:ExpressionStatement[6051-6090]"
    }, {
      "left" : "if (NodeUtil.isFunctionDeclaration(n))",
      "right" : "if (NodeUtil.isFunctionDeclaration(n))",
      "info" : "IfStatement[6061-6207]:IfStatement[6104-6250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6100-6207]:Block[6143-6250]"
    }, {
      "left" : "Node nameNode = n.getFirstChild();",
      "right" : "Node nameNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[6110-6144]:VariableDeclarationStatement[6153-6187]"
    }, {
      "left" : "renamer.addDeclaredName(nameNode.getString());",
      "right" : "renamer.addDeclaredName(nameNode.getString());",
      "info" : "ExpressionStatement[6153-6199]:ExpressionStatement[6196-6242]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[6215-6327]:ForStatement[6258-6370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6276-6327]:Block[6319-6370]"
    }, {
      "left" : "findDeclaredNames(c, n, renamer);",
      "right" : "findDeclaredNames(c, n, renamer);",
      "info" : "ExpressionStatement[6286-6319]:ExpressionStatement[6329-6362]"
    }, {
      "left" : "interface",
      "right" : "interface",
      "info" : "TYPE_DECLARATION_KIND[6400-6409]:TYPE_DECLARATION_KIND[6443-6452]"
    }, {
      "left" : "Renamer",
      "right" : "Renamer",
      "info" : "SimpleName[6410-6417]:SimpleName[6453-6460]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6513-6517]:PrimitiveType[6556-6560]"
    }, {
      "left" : "addDeclaredName",
      "right" : "addDeclaredName",
      "info" : "SimpleName[6518-6533]:SimpleName[6561-6576]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[6534-6545]:SingleVariableDeclaration[6577-6588]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[6665-6671]:SimpleType[6708-6714]"
    }, {
      "left" : "getReplacementName",
      "right" : "getReplacementName",
      "info" : "SimpleName[6672-6690]:SimpleName[6715-6733]"
    }, {
      "left" : "String oldName",
      "right" : "String oldName",
      "info" : "SingleVariableDeclaration[6691-6705]:SingleVariableDeclaration[6734-6748]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6799-6806]:PrimitiveType[6842-6849]"
    }, {
      "left" : "stripConstIfReplaced",
      "right" : "stripConstIfReplaced",
      "info" : "SimpleName[6807-6827]:SimpleName[6850-6870]"
    }, {
      "left" : "Renamer",
      "right" : "Renamer",
      "info" : "SimpleType[6930-6937]:SimpleType[6973-6980]"
    }, {
      "left" : "forChildScope",
      "right" : "forChildScope",
      "info" : "SimpleName[6938-6951]:SimpleName[6981-6994]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7051-7057]:Modifier[7094-7100]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[7058-7063]:TYPE_DECLARATION_KIND[7101-7106]"
    }, {
      "left" : "ContextualRenameInverter",
      "right" : "ContextualRenameInverter",
      "info" : "SimpleName[7064-7088]:SimpleName[7107-7131]"
    }, {
      "left" : "AbstractPostOrderCallback",
      "right" : "ScopedCallback",
      "info" : "SimpleType[7097-7122]:SimpleType[7149-7163]"
    }, {
      "left" : "CompilerPass",
      "right" : "CompilerPass",
      "info" : "SimpleType[7140-7152]:SimpleType[7165-7177]"
    }, {
      "left" : "Var",
      "right" : "Var",
      "info" : "SimpleType[7382-7385]:SimpleType[8745-8748]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7429-7436]:Modifier[7601-7608]"
    }, {
      "left" : "ContextualRenameInverter",
      "right" : "ContextualRenameInverter",
      "info" : "SimpleName[7437-7461]:SimpleName[7609-7633]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[7462-7487]:SingleVariableDeclaration[7634-7659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7489-7528]:Block[7661-7700]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[7497-7522]:ExpressionStatement[7669-7694]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7534-7540]:Modifier[7706-7712]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7541-7545]:PrimitiveType[7713-7717]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[7546-7553]:SimpleName[7718-7725]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[7554-7566]:SingleVariableDeclaration[7726-7738]"
    }, {
      "left" : "Node js",
      "right" : "Node js",
      "info" : "SingleVariableDeclaration[7568-7575]:SingleVariableDeclaration[7740-7747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7577-7634]:Block[7749-7806]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, js, this);",
      "right" : "NodeTraversal.traverse(compiler, js, this);",
      "info" : "ExpressionStatement[7585-7628]:ExpressionStatement[7757-7800]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7640-7646]:Modifier[7812-7818]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7647-7653]:Modifier[7819-7825]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[7654-7660]:SimpleType[7826-7832]"
    }, {
      "left" : "getOrginalName",
      "right" : "getOrginalName",
      "info" : "SimpleName[7661-7675]:SimpleName[7833-7847]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[7676-7687]:SingleVariableDeclaration[7848-7859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7689-7800]:Block[7861-7972]"
    }, {
      "left" : "int index = indexOfSeparator(name);",
      "right" : "int index = indexOfSeparator(name);",
      "info" : "VariableDeclarationStatement[7697-7732]:VariableDeclarationStatement[7869-7904]"
    }, {
      "left" : "return (index == -1) ? name : name.substring(0, index);",
      "right" : "return (index == -1) ? name : name.substring(0, index);",
      "info" : "ReturnStatement[7739-7794]:ReturnStatement[7911-7966]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7806-7813]:Modifier[7978-7985]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7814-7820]:Modifier[7986-7992]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[7821-7824]:PrimitiveType[7993-7996]"
    }, {
      "left" : "indexOfSeparator",
      "right" : "indexOfSeparator",
      "info" : "SimpleName[7825-7841]:SimpleName[7997-8013]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[7842-7853]:SingleVariableDeclaration[8014-8025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7855-7932]:Block[8027-8104]"
    }, {
      "left" : "return name.lastIndexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR);",
      "right" : "return name.lastIndexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR);",
      "info" : "ReturnStatement[7863-7926]:ReturnStatement[8035-8098]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7938-7945]:Modifier[8110-8117]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7946-7953]:PrimitiveType[8118-8125]"
    }, {
      "left" : "containsSeparator",
      "right" : "containsSeparator",
      "info" : "SimpleName[7954-7971]:SimpleName[8126-8143]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[7972-7983]:SingleVariableDeclaration[8144-8155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7985-8064]:Block[8157-8236]"
    }, {
      "left" : "return name.indexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR) != -1;",
      "right" : "return name.indexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR) != -1;",
      "info" : "ReturnStatement[7993-8058]:ReturnStatement[8165-8230]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[8084-8090]:SimpleType[9539-9545]"
    }, {
      "left" : "name.substring(0, index)",
      "right" : "name.equals(ARGUMENTS)",
      "info" : "MethodInvocation[8153-8177]:MethodInvocation[12619-12641]"
    }, {
      "left" : "substring",
      "right" : "equals",
      "info" : "SimpleName[8158-8167]:SimpleName[12624-12630]"
    }, {
      "left" : "private",
      "right" : "public",
      "info" : "Modifier[8247-8254]:Modifier[14617-14623]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[8262-8268]:SimpleType[8963-8969]"
    }, {
      "left" : "getNameSuffix",
      "right" : "addDeclaredName",
      "info" : "SimpleName[8269-8282]:SimpleName[14629-14644]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[8283-8294]:SingleVariableDeclaration[11152-11163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8307-8435]:Block[14658-14828]"
    }, {
      "left" : "name",
      "right" : "Preconditions",
      "info" : "SimpleName[8322-8326]:SimpleName[14666-14679]"
    }, {
      "left" : "name.substring(\n          index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),\n          name.length())",
      "right" : "Preconditions.checkState(!name.equals(ARGUMENTS))",
      "info" : "MethodInvocation[8322-8428]:MethodInvocation[14666-14715]"
    }, {
      "left" : "substring",
      "right" : "checkState",
      "info" : "SimpleName[8327-8336]:SimpleName[14680-14690]"
    }, {
      "left" : "name.length()",
      "right" : "name.equals(ARGUMENTS)",
      "info" : "MethodInvocation[8414-8427]:MethodInvocation[14692-14714]"
    }, {
      "left" : "length",
      "right" : "equals",
      "info" : "SimpleName[8419-8425]:SimpleName[14697-14703]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8575-8584]:MarkerAnnotation[10577-10586]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8596-8600]:PrimitiveType[9504-9508]"
    }, {
      "left" : "visit",
      "right" : "handleScopeVar",
      "info" : "SimpleName[8601-8606]:SimpleName[9509-9523]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[8607-8622]:SingleVariableDeclaration[10609-10624]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[8624-8633]:SingleVariableDeclaration[10626-10635]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[8635-8646]:SingleVariableDeclaration[10637-10648]"
    }, {
      "left" : "String oldName = node.getString();",
      "right" : "String name = node.getString();",
      "info" : "VariableDeclarationStatement[8700-8734]:VariableDeclarationStatement[10760-10791]"
    }, {
      "left" : "oldName",
      "right" : "name",
      "info" : "SimpleName[8707-8714]:SimpleName[10767-10771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8775-10849]:Block[9531-10457]"
    }, {
      "left" : "t.getScope()",
      "right" : "t.inGlobalScope()",
      "info" : "MethodInvocation[8801-8813]:MethodInvocation[8350-8367]"
    }, {
      "left" : "getScope",
      "right" : "inGlobalScope",
      "info" : "SimpleName[8803-8811]:SimpleName[8352-8365]"
    }, {
      "left" : "Var",
      "right" : "Var",
      "info" : "SimpleType[8825-8828]:SimpleType[8804-8807]"
    }, {
      "left" : "var",
      "right" : "it",
      "info" : "SimpleName[8829-8832]:SimpleName[8750-8752]"
    }, {
      "left" : "var = t.getScope().getVar(oldName)",
      "right" : "it = t.getScope().getVars()",
      "info" : "VariableDeclarationFragment[8829-8863]:VariableDeclarationFragment[8750-8777]"
    }, {
      "left" : "getVar",
      "right" : "getVars",
      "info" : "SimpleName[8848-8854]:SimpleName[8768-8775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8910-8935]:Block[8369-8394]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[8920-8927]:ReturnStatement[8379-8386]"
    }, {
      "left" : "if (nameMap.containsKey(var))",
      "right" : "if (containsSeparator(name))",
      "info" : "IfStatement[8947-10669]:IfStatement[9573-10451]"
    }, {
      "left" : "nameMap.containsKey(var)",
      "right" : "nameMap.get(name)",
      "info" : "MethodInvocation[8951-8975]:MethodInvocation[10141-10158]"
    }, {
      "left" : "containsKey",
      "right" : "get",
      "info" : "SimpleName[8959-8970]:SimpleName[10149-10152]"
    }, {
      "left" : "var",
      "right" : "name",
      "info" : "SimpleName[8971-8974]:SimpleName[10153-10157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8977-9036]:Block[11244-11326]"
    }, {
      "left" : "node.setString(nameMap.get(var));",
      "right" : "nameMap.put(name, nodes);",
      "info" : "ExpressionStatement[8991-9024]:ExpressionStatement[11293-11318]"
    }, {
      "left" : "nameMap.get(var)",
      "right" : "nameMap.put(name, nodes)",
      "info" : "MethodInvocation[9006-9022]:MethodInvocation[11293-11317]"
    }, {
      "left" : "get",
      "right" : "put",
      "info" : "SimpleName[9014-9017]:SimpleName[11301-11304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9042-10669]:Block[9602-10451]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[9107-9113]:SimpleType[9612-9618]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[9176-9182]:SimpleType[7299-7305]"
    }, {
      "left" : "if (var.scope.isDeclared(newName, recurseScopes) ||\n                !TokenStream.isJSIdentifier(newName))",
      "right" : "if (TokenStream.isJSIdentifier(newName) &&\n            !referencedNames.contains(newName) && \n            !newName.equals(ARGUMENTS))",
      "info" : "IfStatement[9903-10620]:IfStatement[9734-10413]"
    }, {
      "left" : "||",
      "right" : "&&",
      "info" : "INFIX_EXPRESSION_OPERATOR[9952-9954]:INFIX_EXPRESSION_OPERATOR[9774-9776]"
    }, {
      "left" : "TokenStream.isJSIdentifier(newName)",
      "right" : "TokenStream.isJSIdentifier(newName)",
      "info" : "MethodInvocation[9972-10007]:MethodInvocation[9738-9773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10063-10620]:Block[9868-10413]"
    }, {
      "left" : "Node parentNode = var.getParentNode();",
      "right" : "List<Node> references = nameMap.get(name);",
      "info" : "VariableDeclarationStatement[10304-10342]:VariableDeclarationStatement[10117-10159]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[10304-10308]:SimpleType[10122-10126]"
    }, {
      "left" : "parentNode",
      "right" : "references",
      "info" : "SimpleName[10309-10319]:SimpleName[10128-10138]"
    }, {
      "left" : "newName",
      "right" : "newName",
      "info" : "METHOD_INVOCATION_ARGUMENTS[10506-10513]:METHOD_INVOCATION_ARGUMENTS[10097-10104]"
    }, {
      "left" : "node",
      "right" : "n",
      "info" : "SimpleName[10547-10551]:SimpleName[10331-10332]"
    }, {
      "left" : "node.setString(newName);",
      "right" : "n.setString(newName);",
      "info" : "ExpressionStatement[10547-10571]:ExpressionStatement[10331-10352]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[10582-10610]:ExpressionStatement[10375-10403]"
    }, {
      "left" : "nameMap.put(var, newName);",
      "right" : "nameMap.remove(name);",
      "info" : "ExpressionStatement[10634-10660]:ExpressionStatement[10422-10443]"
    }, {
      "left" : "put",
      "right" : "remove",
      "info" : "SimpleName[10642-10645]:SimpleName[10430-10436]"
    }, {
      "left" : "var",
      "right" : "name",
      "info" : "SimpleName[10646-10649]:SimpleName[10437-10441]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11286-11292]:Modifier[11774-11780]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[11293-11298]:TYPE_DECLARATION_KIND[11781-11786]"
    }, {
      "left" : "ContextualRenamer",
      "right" : "ContextualRenamer",
      "info" : "SimpleName[11299-11316]:SimpleName[11787-11804]"
    }, {
      "left" : "Renamer",
      "right" : "Renamer",
      "info" : "SimpleType[11328-11335]:SimpleType[11816-11823]"
    }, {
      "left" : "ContextualRenamer",
      "right" : "ContextualRenamer",
      "info" : "SimpleName[11548-11565]:SimpleName[12036-12053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11568-11642]:Block[12056-12130]"
    }, {
      "left" : "this.global = true;",
      "right" : "this.global = true;",
      "info" : "ExpressionStatement[11576-11595]:ExpressionStatement[12064-12083]"
    }, {
      "left" : "nameUsage = HashMultiset.create();",
      "right" : "nameUsage = HashMultiset.create();",
      "info" : "ExpressionStatement[11602-11636]:ExpressionStatement[12090-12124]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11701-11708]:Modifier[12189-12196]"
    }, {
      "left" : "ContextualRenamer",
      "right" : "ContextualRenamer",
      "info" : "SimpleName[11709-11726]:SimpleName[12197-12214]"
    }, {
      "left" : "Multiset<String> nameUsage",
      "right" : "Multiset<String> nameUsage",
      "info" : "SingleVariableDeclaration[11727-11753]:SingleVariableDeclaration[12215-12241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11755-11823]:Block[12243-12311]"
    }, {
      "left" : "this.global = false;",
      "right" : "this.global = false;",
      "info" : "ExpressionStatement[11763-11783]:ExpressionStatement[12251-12271]"
    }, {
      "left" : "this.nameUsage = nameUsage;",
      "right" : "this.nameUsage = nameUsage;",
      "info" : "ExpressionStatement[11790-11817]:ExpressionStatement[12278-12305]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11879-11888]:MarkerAnnotation[12367-12376]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11893-11899]:Modifier[12381-12387]"
    }, {
      "left" : "Renamer",
      "right" : "Renamer",
      "info" : "SimpleType[11900-11907]:SimpleType[12388-12395]"
    }, {
      "left" : "forChildScope",
      "right" : "forChildScope",
      "info" : "SimpleName[11908-11921]:SimpleName[12396-12409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11924-11978]:Block[12412-12466]"
    }, {
      "left" : "return new ContextualRenamer(nameUsage);",
      "right" : "return new ContextualRenamer(nameUsage);",
      "info" : "ReturnStatement[11932-11972]:ReturnStatement[12420-12460]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12063-12072]:MarkerAnnotation[12551-12560]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12077-12083]:Modifier[12565-12571]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12084-12088]:PrimitiveType[12572-12576]"
    }, {
      "left" : "addDeclaredName",
      "right" : "addDeclaredName",
      "info" : "SimpleName[12089-12104]:SimpleName[12577-12592]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[12105-12116]:SingleVariableDeclaration[12593-12604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12118-12547]:Block[12643-13082]"
    }, {
      "left" : "if (global)",
      "right" : "if (global)",
      "info" : "IfStatement[12128-12541]:IfStatement[12653-13074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12140-12180]:Block[12665-12705]"
    }, {
      "left" : "reserveName(name);",
      "right" : "reserveName(name);",
      "info" : "ExpressionStatement[12152-12170]:ExpressionStatement[12677-12695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12186-12541]:Block[12711-13074]"
    }, {
      "left" : "if (!declarations.containsKey(name))",
      "right" : "if (!declarations.containsKey(name))",
      "info" : "IfStatement[12272-12533]:IfStatement[12797-13064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12309-12533]:Block[12834-13064]"
    }, {
      "left" : "int id = incrementNameCount(name);",
      "right" : "int id = incrementNameCount(name);",
      "info" : "VariableDeclarationStatement[12323-12357]:VariableDeclarationStatement[12848-12882]"
    }, {
      "left" : "String newName = null;",
      "right" : "String newName = null;",
      "info" : "VariableDeclarationStatement[12370-12392]:VariableDeclarationStatement[12895-12917]"
    }, {
      "left" : "if (id != 0)",
      "right" : "if (id != 0)",
      "info" : "IfStatement[12405-12480]:IfStatement[12930-13007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12418-12480]:Block[12943-13007]"
    }, {
      "left" : "newName = getUniqueName(name, id);",
      "right" : "newName = getUniqueName(name, id);",
      "info" : "ExpressionStatement[12434-12468]:ExpressionStatement[12959-12993]"
    }, {
      "left" : "declarations.put(name, newName);",
      "right" : "declarations.put(name, newName);",
      "info" : "ExpressionStatement[12491-12523]:ExpressionStatement[13020-13052]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12553-12562]:MarkerAnnotation[13094-13103]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12567-12573]:Modifier[13108-13114]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[12574-12580]:SimpleType[13115-13121]"
    }, {
      "left" : "getReplacementName",
      "right" : "getReplacementName",
      "info" : "SimpleName[12581-12599]:SimpleName[13122-13140]"
    }, {
      "left" : "String oldName",
      "right" : "String oldName",
      "info" : "SingleVariableDeclaration[12600-12614]:SingleVariableDeclaration[13141-13155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12616-12663]:Block[13157-13204]"
    }, {
      "left" : "return declarations.get(oldName);",
      "right" : "return declarations.get(oldName);",
      "info" : "ReturnStatement[12624-12657]:ReturnStatement[13165-13198]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12754-12761]:Modifier[13295-13302]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[12762-12768]:SimpleType[13303-13309]"
    }, {
      "left" : "getUniqueName",
      "right" : "getUniqueName",
      "info" : "SimpleName[12769-12782]:SimpleName[13310-13323]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[12783-12794]:SingleVariableDeclaration[13324-13335]"
    }, {
      "left" : "int id",
      "right" : "int id",
      "info" : "SingleVariableDeclaration[12796-12802]:SingleVariableDeclaration[13337-13343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12804-12857]:Block[13345-13398]"
    }, {
      "left" : "return name + UNIQUE_ID_SEPARATOR + id;",
      "right" : "return name + UNIQUE_ID_SEPARATOR + id;",
      "info" : "ReturnStatement[12812-12851]:ReturnStatement[13353-13392]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12863-12870]:Modifier[13404-13411]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12871-12875]:PrimitiveType[13412-13416]"
    }, {
      "left" : "reserveName",
      "right" : "reserveName",
      "info" : "SimpleName[12876-12887]:SimpleName[13417-13428]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[12888-12899]:SingleVariableDeclaration[13429-13440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12901-12946]:Block[13442-13487]"
    }, {
      "left" : "nameUsage.setCount(name, 0, 1);",
      "right" : "nameUsage.setCount(name, 0, 1);",
      "info" : "ExpressionStatement[12909-12940]:ExpressionStatement[13450-13481]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12952-12959]:Modifier[13493-13500]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[12960-12963]:PrimitiveType[13501-13504]"
    }, {
      "left" : "incrementNameCount",
      "right" : "incrementNameCount",
      "info" : "SimpleName[12964-12982]:SimpleName[13505-13523]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[12983-12994]:SingleVariableDeclaration[13524-13535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12996-13040]:Block[13537-13581]"
    }, {
      "left" : "return nameUsage.add(name, 1);",
      "right" : "return nameUsage.add(name, 1);",
      "info" : "ReturnStatement[13004-13034]:ReturnStatement[13545-13575]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13046-13055]:MarkerAnnotation[13587-13596]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13060-13066]:Modifier[13601-13607]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[13067-13074]:PrimitiveType[13608-13615]"
    }, {
      "left" : "stripConstIfReplaced",
      "right" : "stripConstIfReplaced",
      "info" : "SimpleName[13075-13095]:SimpleName[13616-13636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13098-13125]:Block[13639-13666]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13106-13119]:ReturnStatement[13647-13660]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[13375-13381]:Modifier[13916-13922]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[13382-13387]:TYPE_DECLARATION_KIND[13923-13928]"
    }, {
      "left" : "InlineRenamer",
      "right" : "InlineRenamer",
      "info" : "SimpleName[13388-13401]:SimpleName[13929-13942]"
    }, {
      "left" : "Renamer",
      "right" : "Renamer",
      "info" : "SimpleType[13413-13420]:SimpleType[13954-13961]"
    }, {
      "left" : "InlineRenamer",
      "right" : "InlineRenamer",
      "info" : "SimpleName[13631-13644]:SimpleName[14172-14185]"
    }, {
      "left" : "Supplier<String> uniqueIdSupplier",
      "right" : "Supplier<String> uniqueIdSupplier",
      "info" : "SingleVariableDeclaration[13654-13687]:SingleVariableDeclaration[14195-14228]"
    }, {
      "left" : "String idPrefix",
      "right" : "String idPrefix",
      "info" : "SingleVariableDeclaration[13697-13712]:SingleVariableDeclaration[14238-14253]"
    }, {
      "left" : "boolean removeConstness",
      "right" : "boolean removeConstness",
      "info" : "SingleVariableDeclaration[13722-13745]:SingleVariableDeclaration[14263-14286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13747-14056]:Block[14288-14597]"
    }, {
      "left" : "this.uniqueIdSupplier = uniqueIdSupplier;",
      "right" : "this.uniqueIdSupplier = uniqueIdSupplier;",
      "info" : "ExpressionStatement[13755-13796]:ExpressionStatement[14296-14337]"
    }, {
      "left" : "Preconditions.checkArgument(!idPrefix.isEmpty());",
      "right" : "Preconditions.checkArgument(!idPrefix.isEmpty());",
      "info" : "ExpressionStatement[13923-13972]:ExpressionStatement[14464-14513]"
    }, {
      "left" : "this.idPrefix = idPrefix;",
      "right" : "this.idPrefix = idPrefix;",
      "info" : "ExpressionStatement[13979-14004]:ExpressionStatement[14520-14545]"
    }, {
      "left" : "this.removeConstness = removeConstness;",
      "right" : "this.removeConstness = removeConstness;",
      "info" : "ExpressionStatement[14011-14050]:ExpressionStatement[14552-14591]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14062-14071]:MarkerAnnotation[14603-14612]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[14104-14115]:SingleVariableDeclaration[14645-14656]"
    }, {
      "left" : "if (!declarations.containsKey(name))",
      "right" : "if (!declarations.containsKey(name))",
      "info" : "IfStatement[14125-14224]:IfStatement[14723-14822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14162-14224]:Block[14760-14822]"
    }, {
      "left" : "declarations.put(name, getUniqueName(name));",
      "right" : "declarations.put(name, getUniqueName(name));",
      "info" : "ExpressionStatement[14172-14216]:ExpressionStatement[14770-14814]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14236-14243]:Modifier[14834-14841]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[14244-14250]:SimpleType[14842-14848]"
    }, {
      "left" : "getUniqueName",
      "right" : "getUniqueName",
      "info" : "SimpleName[14251-14264]:SimpleName[14849-14862]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[14265-14276]:SingleVariableDeclaration[14863-14874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14278-14763]:Block[14876-15361]"
    }, {
      "left" : "if (name.isEmpty())",
      "right" : "if (name.isEmpty())",
      "info" : "IfStatement[14286-14336]:IfStatement[14884-14934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14306-14336]:Block[14904-14934]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[14316-14328]:ReturnStatement[14914-14926]"
    }, {
      "left" : "if (name.indexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR) != -1)",
      "right" : "if (name.indexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR) != -1)",
      "info" : "IfStatement[14344-14524]:IfStatement[14942-15122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14407-14524]:Block[15005-15122]"
    }, {
      "left" : "name = name.substring(\n              0, name.lastIndexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR));",
      "right" : "name = name.substring(\n              0, name.lastIndexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR));",
      "info" : "ExpressionStatement[14419-14516]:ExpressionStatement[15017-15114]"
    }, {
      "left" : "return name + ContextualRenamer.UNIQUE_ID_SEPARATOR\n          + idPrefix + uniqueIdSupplier.get();",
      "right" : "return name + ContextualRenamer.UNIQUE_ID_SEPARATOR\n          + idPrefix + uniqueIdSupplier.get();",
      "info" : "ReturnStatement[14659-14757]:ReturnStatement[15257-15355]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14769-14778]:MarkerAnnotation[15367-15376]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14783-14789]:Modifier[15381-15387]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[14790-14796]:SimpleType[15388-15394]"
    }, {
      "left" : "getReplacementName",
      "right" : "getReplacementName",
      "info" : "SimpleName[14797-14815]:SimpleName[15395-15413]"
    }, {
      "left" : "String oldName",
      "right" : "String oldName",
      "info" : "SingleVariableDeclaration[14816-14830]:SingleVariableDeclaration[15414-15428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14832-14879]:Block[15430-15477]"
    }, {
      "left" : "return declarations.get(oldName);",
      "right" : "return declarations.get(oldName);",
      "info" : "ReturnStatement[14840-14873]:ReturnStatement[15438-15471]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14885-14894]:MarkerAnnotation[15483-15492]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14899-14905]:Modifier[15497-15503]"
    }, {
      "left" : "Renamer",
      "right" : "Renamer",
      "info" : "SimpleType[14906-14913]:SimpleType[15504-15511]"
    }, {
      "left" : "forChildScope",
      "right" : "forChildScope",
      "info" : "SimpleName[14914-14927]:SimpleName[15512-15525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14930-15014]:Block[15528-15612]"
    }, {
      "left" : "return new InlineRenamer(uniqueIdSupplier, idPrefix, removeConstness);",
      "right" : "return new InlineRenamer(uniqueIdSupplier, idPrefix, removeConstness);",
      "info" : "ReturnStatement[14938-15008]:ReturnStatement[15536-15606]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15020-15029]:MarkerAnnotation[15618-15627]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15034-15040]:Modifier[15632-15638]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[15041-15048]:PrimitiveType[15639-15646]"
    }, {
      "left" : "stripConstIfReplaced",
      "right" : "stripConstIfReplaced",
      "info" : "SimpleName[15049-15069]:SimpleName[15647-15667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15072-15109]:Block[15670-15707]"
    }, {
      "left" : "return removeConstness;",
      "right" : "return removeConstness;",
      "info" : "ReturnStatement[15080-15103]:ReturnStatement[15678-15701]"
    } ]
  },
  "interFileMappings" : { }
}