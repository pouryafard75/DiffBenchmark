{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private final Formula updateFormula;",
      "right" : "private final Formula updateFormula;",
      "info" : "FieldDeclaration[2324-2410]:FieldDeclaration[2324-2410]"
    }, {
      "left" : "private final Preconditioner preconditioner;",
      "right" : "private final Preconditioner preconditioner;",
      "info" : "FieldDeclaration[2415-2500]:FieldDeclaration[2415-2500]"
    }, {
      "left" : "private final UnivariateSolver solver;",
      "right" : "private final UnivariateSolver solver;",
      "info" : "FieldDeclaration[2505-2602]:FieldDeclaration[2505-2602]"
    }, {
      "left" : "private double initialStep = 1;",
      "right" : "private double initialStep = 1;",
      "info" : "FieldDeclaration[2607-2706]:FieldDeclaration[2607-2706]"
    }, {
      "left" : "public NonLinearConjugateGradientOptimizer(final Formula updateFormula,\n                                               ConvergenceChecker<PointValuePair> checker)",
      "right" : "public NonLinearConjugateGradientOptimizer(final Formula updateFormula,\n                                               ConvergenceChecker<PointValuePair> checker)",
      "info" : "MethodDeclaration[2712-3376]:MethodDeclaration[2712-3376]"
    }, {
      "left" : "enum : Formula",
      "right" : "enum : Formula",
      "info" : "EnumDeclaration[3382-4255]:EnumDeclaration[3382-4255]"
    }, {
      "left" : "BracketingStep",
      "right" : "BracketingStep",
      "info" : "TypeDeclaration[4261-5055]:TypeDeclaration[4261-5055]"
    }, {
      "left" : "private final double initialStep;",
      "right" : "private final double initialStep;",
      "info" : "FieldDeclaration[4622-4684]:FieldDeclaration[4622-4684]"
    }, {
      "left" : "public BracketingStep(double step)",
      "right" : "public BracketingStep(double step)",
      "info" : "MethodDeclaration[4694-4856]:MethodDeclaration[4694-4856]"
    }, {
      "left" : "public double getBracketingStep()",
      "right" : "public double getBracketingStep()",
      "info" : "MethodDeclaration[4866-5049]:MethodDeclaration[4866-5049]"
    }, {
      "left" : "public NonLinearConjugateGradientOptimizer(final Formula updateFormula,\n                                               ConvergenceChecker<PointValuePair> checker,\n                                               final UnivariateSolver lineSearchSolver)",
      "right" : "public NonLinearConjugateGradientOptimizer(final Formula updateFormula,\n                                               ConvergenceChecker<PointValuePair> checker,\n                                               final UnivariateSolver lineSearchSolver)",
      "info" : "MethodDeclaration[5061-5827]:MethodDeclaration[5061-5827]"
    }, {
      "left" : "public NonLinearConjugateGradientOptimizer(final Formula updateFormula,\n                                               ConvergenceChecker<PointValuePair> checker,\n                                               final UnivariateSolver lineSearchSolver,\n                                               final Preconditioner preconditioner)",
      "right" : "public NonLinearConjugateGradientOptimizer(final Formula updateFormula,\n                                               ConvergenceChecker<PointValuePair> checker,\n                                               final UnivariateSolver lineSearchSolver,\n                                               final Preconditioner preconditioner)",
      "info" : "MethodDeclaration[5833-6692]:MethodDeclaration[5833-6692]"
    }, {
      "left" : "public PointValuePair optimize(OptimizationData... optData)\n        throws TooManyEvaluationsException",
      "right" : "public PointValuePair optimize(OptimizationData... optData)\n        throws TooManyEvaluationsException",
      "info" : "MethodDeclaration[6698-7429]:MethodDeclaration[6698-7429]"
    }, {
      "left" : "protected void parseOptimizationData(OptimizationData... optData)",
      "right" : "protected void parseOptimizationData(OptimizationData... optData)",
      "info" : "MethodDeclaration[11104-12057]:MethodDeclaration[11123-12076]"
    }, {
      "left" : "private double findUpperBound(final UnivariateFunction f,\n                                  final double a, final double h)",
      "right" : "private double findUpperBound(final UnivariateFunction f,\n                                  final double a, final double h)",
      "info" : "MethodDeclaration[12063-12970]:MethodDeclaration[12082-12989]"
    }, {
      "left" : "IdentityPreconditioner",
      "right" : "IdentityPreconditioner",
      "info" : "TypeDeclaration[12976-13236]:TypeDeclaration[12995-13255]"
    }, {
      "left" : "public double[] precondition(double[] variables, double[] r)",
      "right" : "public double[] precondition(double[] variables, double[] r)",
      "info" : "MethodDeclaration[13099-13230]:MethodDeclaration[13118-13249]"
    }, {
      "left" : "LineSearchFunction",
      "right" : "LineSearchFunction",
      "info" : "TypeDeclaration[13242-14893]:TypeDeclaration[13261-14912]"
    }, {
      "left" : "private final double[] currentPoint;",
      "right" : "private final double[] currentPoint;",
      "info" : "FieldDeclaration[13709-13775]:FieldDeclaration[13728-13794]"
    }, {
      "left" : "private final double[] searchDirection;",
      "right" : "private final double[] searchDirection;",
      "info" : "FieldDeclaration[13784-13856]:FieldDeclaration[13803-13875]"
    }, {
      "left" : "public LineSearchFunction(double[] point,\n                                  double[] direction)",
      "right" : "public LineSearchFunction(double[] point,\n                                  double[] direction)",
      "info" : "MethodDeclaration[13866-14173]:MethodDeclaration[13885-14192]"
    }, {
      "left" : "public double value(double x)",
      "right" : "public double value(double x)",
      "info" : "MethodDeclaration[14183-14887]:MethodDeclaration[14202-14906]"
    }, {
      "left" : "private void checkParameters()",
      "right" : "private void checkParameters()",
      "info" : "MethodDeclaration[14899-15267]:MethodDeclaration[14918-15286]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3243-3376]:Block[3243-3376]"
    }, {
      "left" : "this(updateFormula,\n             checker,\n             new BrentSolver(),\n             new IdentityPreconditioner());",
      "right" : "this(updateFormula,\n             checker,\n             new BrentSolver(),\n             new IdentityPreconditioner());",
      "info" : "ConstructorInvocation[3253-3370]:ConstructorInvocation[3253-3370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4813-4856]:Block[4813-4856]"
    }, {
      "left" : "initialStep = step;",
      "right" : "initialStep = step;",
      "info" : "ExpressionStatement[4827-4846]:ExpressionStatement[4827-4846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5006-5049]:Block[5006-5049]"
    }, {
      "left" : "return initialStep;",
      "right" : "return initialStep;",
      "info" : "ReturnStatement[5020-5039]:ReturnStatement[5020-5039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5695-5827]:Block[5695-5827]"
    }, {
      "left" : "this(updateFormula,\n             checker,\n             lineSearchSolver,\n             new IdentityPreconditioner());",
      "right" : "this(updateFormula,\n             checker,\n             lineSearchSolver,\n             new IdentityPreconditioner());",
      "info" : "ConstructorInvocation[5705-5821]:ConstructorInvocation[5705-5821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6510-6692]:Block[6510-6692]"
    }, {
      "left" : "super(checker);",
      "right" : "super(checker);",
      "info" : "SuperConstructorInvocation[6520-6535]:SuperConstructorInvocation[6520-6535]"
    }, {
      "left" : "this.updateFormula = updateFormula;",
      "right" : "this.updateFormula = updateFormula;",
      "info" : "ExpressionStatement[6545-6580]:ExpressionStatement[6545-6580]"
    }, {
      "left" : "solver = lineSearchSolver;",
      "right" : "solver = lineSearchSolver;",
      "info" : "ExpressionStatement[6589-6615]:ExpressionStatement[6589-6615]"
    }, {
      "left" : "this.preconditioner = preconditioner;",
      "right" : "this.preconditioner = preconditioner;",
      "info" : "ExpressionStatement[6624-6661]:ExpressionStatement[6624-6661]"
    }, {
      "left" : "initialStep = 1;",
      "right" : "initialStep = 1;",
      "info" : "ExpressionStatement[6670-6686]:ExpressionStatement[6670-6686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7328-7429]:Block[7328-7429]"
    }, {
      "left" : "return super.optimize(optData);",
      "right" : "return super.optimize(optData);",
      "info" : "ReturnStatement[7392-7423]:ReturnStatement[7392-7423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11464-12057]:Block[11483-12076]"
    }, {
      "left" : "super.parseOptimizationData(optData);",
      "right" : "super.parseOptimizationData(optData);",
      "info" : "ExpressionStatement[11528-11565]:ExpressionStatement[11547-11584]"
    }, {
      "left" : "for (OptimizationData data : optData)",
      "right" : "for (OptimizationData data : optData)",
      "info" : "EnhancedForStatement[11696-12023]:EnhancedForStatement[11715-12042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11734-12023]:Block[11753-12042]"
    }, {
      "left" : "if  (data instanceof BracketingStep)",
      "right" : "if  (data instanceof BracketingStep)",
      "info" : "IfStatement[11748-12013]:IfStatement[11767-12032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11785-12013]:Block[11804-12032]"
    }, {
      "left" : "initialStep = ((BracketingStep) data).getBracketingStep();",
      "right" : "initialStep = ((BracketingStep) data).getBracketingStep();",
      "info" : "ExpressionStatement[11803-11861]:ExpressionStatement[11822-11880]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11993-11999]:BreakStatement[12012-12018]"
    }, {
      "left" : "checkParameters();",
      "right" : "checkParameters();",
      "info" : "ExpressionStatement[12033-12051]:ExpressionStatement[12052-12070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12556-12970]:Block[12575-12989]"
    }, {
      "left" : "final double yA = f.value(a);",
      "right" : "final double yA = f.value(a);",
      "info" : "VariableDeclarationStatement[12566-12595]:VariableDeclarationStatement[12585-12614]"
    }, {
      "left" : "double yB = yA;",
      "right" : "double yB = yA;",
      "info" : "VariableDeclarationStatement[12604-12619]:VariableDeclarationStatement[12623-12638]"
    }, {
      "left" : "for (double step = h; step < Double.MAX_VALUE; step *= FastMath.max(2, yA / yB))",
      "right" : "for (double step = h; step < Double.MAX_VALUE; step *= FastMath.max(2, yA / yB))",
      "info" : "ForStatement[12628-12860]:ForStatement[12647-12879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12709-12860]:Block[12728-12879]"
    }, {
      "left" : "final double b = a + step;",
      "right" : "final double b = a + step;",
      "info" : "VariableDeclarationStatement[12723-12749]:VariableDeclarationStatement[12742-12768]"
    }, {
      "left" : "yB = f.value(b);",
      "right" : "yB = f.value(b);",
      "info" : "ExpressionStatement[12762-12778]:ExpressionStatement[12781-12797]"
    }, {
      "left" : "if (yA * yB <= 0)",
      "right" : "if (yA * yB <= 0)",
      "info" : "IfStatement[12791-12850]:IfStatement[12810-12869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12809-12850]:Block[12828-12869]"
    }, {
      "left" : "return b;",
      "right" : "return b;",
      "info" : "ReturnStatement[12827-12836]:ReturnStatement[12846-12855]"
    }, {
      "left" : "throw new MathIllegalStateException(LocalizedFormats.UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH);",
      "right" : "throw new MathIllegalStateException(LocalizedFormats.UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH);",
      "info" : "ThrowStatement[12869-12964]:ThrowStatement[12888-12983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13189-13230]:Block[13208-13249]"
    }, {
      "left" : "return r.clone();",
      "right" : "return r.clone();",
      "info" : "ReturnStatement[13203-13220]:ReturnStatement[13222-13239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14071-14173]:Block[14090-14192]"
    }, {
      "left" : "currentPoint = point.clone();",
      "right" : "currentPoint = point.clone();",
      "info" : "ExpressionStatement[14085-14114]:ExpressionStatement[14104-14133]"
    }, {
      "left" : "searchDirection = direction.clone();",
      "right" : "searchDirection = direction.clone();",
      "info" : "ExpressionStatement[14127-14163]:ExpressionStatement[14146-14182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14242-14887]:Block[14261-14906]"
    }, {
      "left" : "final double[] shiftedPoint = currentPoint.clone();",
      "right" : "final double[] shiftedPoint = currentPoint.clone();",
      "info" : "VariableDeclarationStatement[14309-14360]:VariableDeclarationStatement[14328-14379]"
    }, {
      "left" : "for (int i = 0; i < shiftedPoint.length; ++i)",
      "right" : "for (int i = 0; i < shiftedPoint.length; ++i)",
      "info" : "ForStatement[14373-14493]:ForStatement[14392-14512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14419-14493]:Block[14438-14512]"
    }, {
      "left" : "shiftedPoint[i] += x * searchDirection[i];",
      "right" : "shiftedPoint[i] += x * searchDirection[i];",
      "info" : "ExpressionStatement[14437-14479]:ExpressionStatement[14456-14498]"
    }, {
      "left" : "final double[] gradient = computeObjectiveGradient(shiftedPoint);",
      "right" : "final double[] gradient = computeObjectiveGradient(shiftedPoint);",
      "info" : "VariableDeclarationStatement[14557-14622]:VariableDeclarationStatement[14576-14641]"
    }, {
      "left" : "double dotProduct = 0;",
      "right" : "double dotProduct = 0;",
      "info" : "VariableDeclarationStatement[14689-14711]:VariableDeclarationStatement[14708-14730]"
    }, {
      "left" : "for (int i = 0; i < gradient.length; ++i)",
      "right" : "for (int i = 0; i < gradient.length; ++i)",
      "info" : "ForStatement[14724-14845]:ForStatement[14743-14864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14766-14845]:Block[14785-14864]"
    }, {
      "left" : "dotProduct += gradient[i] * searchDirection[i];",
      "right" : "dotProduct += gradient[i] * searchDirection[i];",
      "info" : "ExpressionStatement[14784-14831]:ExpressionStatement[14803-14850]"
    }, {
      "left" : "return dotProduct;",
      "right" : "return dotProduct;",
      "info" : "ReturnStatement[14859-14877]:ReturnStatement[14878-14896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15086-15267]:Block[15105-15286]"
    }, {
      "left" : "if (getLowerBound() != null ||\n            getUpperBound() != null)",
      "right" : "if (getLowerBound() != null ||\n            getUpperBound() != null)",
      "info" : "IfStatement[15096-15261]:IfStatement[15115-15280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15164-15261]:Block[15183-15280]"
    }, {
      "left" : "throw new MathUnsupportedOperationException(LocalizedFormats.CONSTRAINT);",
      "right" : "throw new MathUnsupportedOperationException(LocalizedFormats.CONSTRAINT);",
      "info" : "ThrowStatement[15178-15251]:ThrowStatement[15197-15270]"
    } ]
  },
  "interFileMappings" : { }
}