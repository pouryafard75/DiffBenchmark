{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "WriterBasedJsonGenerator",
      "right" : "WriterBasedJsonGenerator",
      "info" : "TypeDeclaration[197-64379]:TypeDeclaration[197-64166]"
    }, {
      "left" : "final protected static int SHORT_WRITE = 32;",
      "right" : "final protected static int SHORT_WRITE = 32;",
      "info" : "FieldDeclaration[404-448]:FieldDeclaration[404-448]"
    }, {
      "left" : "final protected static char[] HEX_CHARS = CharTypes.copyHexChars();",
      "right" : "final protected static char[] HEX_CHARS = CharTypes.copyHexChars();",
      "info" : "FieldDeclaration[454-521]:FieldDeclaration[454-521]"
    }, {
      "left" : "final protected Writer _writer;",
      "right" : "final protected Writer _writer;",
      "info" : "FieldDeclaration[695-726]:FieldDeclaration[695-726]"
    }, {
      "left" : "protected char[] _outputBuffer;",
      "right" : "protected char[] _outputBuffer;",
      "info" : "FieldDeclaration[732-889]:FieldDeclaration[732-889]"
    }, {
      "left" : "protected int _outputHead;",
      "right" : "protected int _outputHead;",
      "info" : "FieldDeclaration[895-994]:FieldDeclaration[895-994]"
    }, {
      "left" : "protected int _outputTail;",
      "right" : "protected int _outputTail;",
      "info" : "FieldDeclaration[1000-1193]:FieldDeclaration[1000-1193]"
    }, {
      "left" : "protected int _outputEnd;",
      "right" : "protected int _outputEnd;",
      "info" : "FieldDeclaration[1199-1339]:FieldDeclaration[1199-1339]"
    }, {
      "left" : "protected char[] _entityBuffer;",
      "right" : "protected char[] _entityBuffer;",
      "info" : "FieldDeclaration[1345-1494]:FieldDeclaration[1345-1494]"
    }, {
      "left" : "protected SerializableString _currentEscape;",
      "right" : "protected SerializableString _currentEscape;",
      "info" : "FieldDeclaration[1500-1689]:FieldDeclaration[1500-1689]"
    }, {
      "left" : "public WriterBasedJsonGenerator(IOContext ctxt, int features,\n            ObjectCodec codec, Writer w)",
      "right" : "public WriterBasedJsonGenerator(IOContext ctxt, int features,\n            ObjectCodec codec, Writer w)",
      "info" : "MethodDeclaration[1866-2132]:MethodDeclaration[1866-2132]"
    }, {
      "left" : "public Object getOutputTarget()",
      "right" : "public Object getOutputTarget()",
      "info" : "MethodDeclaration[2330-2407]:MethodDeclaration[2330-2407]"
    }, {
      "left" : "public int getOutputBuffered()",
      "right" : "public int getOutputBuffered()",
      "info" : "MethodDeclaration[2413-2611]:MethodDeclaration[2413-2611]"
    }, {
      "left" : "public void writeFieldName(String name)  throws IOException",
      "right" : "public void writeFieldName(String name)  throws IOException",
      "info" : "MethodDeclaration[2787-3159]:MethodDeclaration[2787-3159]"
    }, {
      "left" : "public void writeFieldName(SerializableString name) throws IOException",
      "right" : "public void writeFieldName(SerializableString name) throws IOException",
      "info" : "MethodDeclaration[3165-3617]:MethodDeclaration[3165-3617]"
    }, {
      "left" : "protected void _writeFieldName(String name, boolean commaBefore) throws IOException",
      "right" : "protected void _writeFieldName(String name, boolean commaBefore) throws IOException",
      "info" : "MethodDeclaration[3623-4577]:MethodDeclaration[3623-4577]"
    }, {
      "left" : "protected void _writeFieldName(SerializableString name, boolean commaBefore) throws IOException",
      "right" : "protected void _writeFieldName(SerializableString name, boolean commaBefore) throws IOException",
      "info" : "MethodDeclaration[4587-5929]:MethodDeclaration[4587-5929]"
    }, {
      "left" : "public void writeStartArray() throws IOException, JsonGenerationException",
      "right" : "public void writeStartArray() throws IOException, JsonGenerationException",
      "info" : "MethodDeclaration[6132-6601]:MethodDeclaration[6132-6601]"
    }, {
      "left" : "public void writeEndArray() throws IOException, JsonGenerationException",
      "right" : "public void writeEndArray() throws IOException, JsonGenerationException",
      "info" : "MethodDeclaration[6607-7193]:MethodDeclaration[6607-7193]"
    }, {
      "left" : "public void writeStartObject() throws IOException, JsonGenerationException",
      "right" : "public void writeStartObject() throws IOException, JsonGenerationException",
      "info" : "MethodDeclaration[7199-7672]:MethodDeclaration[7199-7672]"
    }, {
      "left" : "public void writeEndObject() throws IOException, JsonGenerationException",
      "right" : "public void writeEndObject() throws IOException, JsonGenerationException",
      "info" : "MethodDeclaration[7678-8268]:MethodDeclaration[7678-8268]"
    }, {
      "left" : "protected void _writePPFieldName(String name, boolean commaBefore) throws IOException",
      "right" : "protected void _writePPFieldName(String name, boolean commaBefore) throws IOException",
      "info" : "MethodDeclaration[8274-9133]:MethodDeclaration[8274-9133]"
    }, {
      "left" : "protected void _writePPFieldName(SerializableString name, boolean commaBefore) throws IOException",
      "right" : "protected void _writePPFieldName(SerializableString name, boolean commaBefore) throws IOException",
      "info" : "MethodDeclaration[9139-9936]:MethodDeclaration[9139-9936]"
    }, {
      "left" : "public void writeString(String text) throws IOException",
      "right" : "public void writeString(String text) throws IOException",
      "info" : "MethodDeclaration[10132-10651]:MethodDeclaration[10132-10651]"
    }, {
      "left" : "public void writeString(char[] text, int offset, int len) throws IOException",
      "right" : "public void writeString(char[] text, int offset, int len) throws IOException",
      "info" : "MethodDeclaration[10657-11126]:MethodDeclaration[10657-11126]"
    }, {
      "left" : "public void writeString(SerializableString sstr) throws IOException",
      "right" : "public void writeString(SerializableString sstr) throws IOException",
      "info" : "MethodDeclaration[11132-12097]:MethodDeclaration[11132-12097]"
    }, {
      "left" : "public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException",
      "right" : "public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException",
      "info" : "MethodDeclaration[12103-12317]:MethodDeclaration[12103-12317]"
    }, {
      "left" : "public void writeUTF8String(byte[] text, int offset, int length) throws IOException",
      "right" : "public void writeUTF8String(byte[] text, int offset, int length) throws IOException",
      "info" : "MethodDeclaration[12323-12534]:MethodDeclaration[12323-12534]"
    }, {
      "left" : "public void writeRaw(String text) throws IOException",
      "right" : "public void writeRaw(String text) throws IOException",
      "info" : "MethodDeclaration[12746-13300]:MethodDeclaration[12746-13300]"
    }, {
      "left" : "public void writeRaw(String text, int start, int len) throws IOException",
      "right" : "public void writeRaw(String text, int start, int len) throws IOException",
      "info" : "MethodDeclaration[13306-13899]:MethodDeclaration[13306-13899]"
    }, {
      "left" : "public void writeRaw(SerializableString text) throws IOException",
      "right" : "public void writeRaw(SerializableString text) throws IOException",
      "info" : "MethodDeclaration[13923-14044]:MethodDeclaration[13923-14044]"
    }, {
      "left" : "public void writeRaw(char[] text, int offset, int len) throws IOException",
      "right" : "public void writeRaw(char[] text, int offset, int len) throws IOException",
      "info" : "MethodDeclaration[14050-14615]:MethodDeclaration[14050-14615]"
    }, {
      "left" : "public void writeRaw(char c) throws IOException",
      "right" : "public void writeRaw(char c) throws IOException",
      "info" : "MethodDeclaration[14621-14815]:MethodDeclaration[14621-14815]"
    }, {
      "left" : "private void writeRawLong(String text) throws IOException",
      "right" : "private void writeRawLong(String text) throws IOException",
      "info" : "MethodDeclaration[14821-15624]:MethodDeclaration[14821-15624]"
    }, {
      "left" : "public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len)\n        throws IOException, JsonGenerationException",
      "right" : "public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len)\n        throws IOException, JsonGenerationException",
      "info" : "MethodDeclaration[15834-16399]:MethodDeclaration[15834-16399]"
    }, {
      "left" : "public int writeBinary(Base64Variant b64variant,\n            InputStream data, int dataLength)\n        throws IOException, JsonGenerationException",
      "right" : "public int writeBinary(Base64Variant b64variant,\n            InputStream data, int dataLength)\n        throws IOException, JsonGenerationException",
      "info" : "MethodDeclaration[16405-17580]:MethodDeclaration[16405-17580]"
    }, {
      "left" : "public void writeNumber(short s) throws IOException",
      "right" : "public void writeNumber(short s) throws IOException",
      "info" : "MethodDeclaration[17782-18212]:MethodDeclaration[17782-18212]"
    }, {
      "left" : "private void _writeQuotedShort(short s) throws IOException",
      "right" : "private void _writeQuotedShort(short s) throws IOException",
      "info" : "MethodDeclaration[18218-18534]:MethodDeclaration[18218-18534]"
    }, {
      "left" : "public void writeNumber(int i) throws IOException",
      "right" : "public void writeNumber(int i) throws IOException",
      "info" : "MethodDeclaration[18544-18972]:MethodDeclaration[18544-18972]"
    }, {
      "left" : "private void _writeQuotedInt(int i) throws IOException",
      "right" : "private void _writeQuotedInt(int i) throws IOException",
      "info" : "MethodDeclaration[18978-19291]:MethodDeclaration[18978-19291]"
    }, {
      "left" : "public void writeNumber(long l) throws IOException",
      "right" : "public void writeNumber(long l) throws IOException",
      "info" : "MethodDeclaration[19301-19724]:MethodDeclaration[19301-19724]"
    }, {
      "left" : "private void _writeQuotedLong(long l) throws IOException",
      "right" : "private void _writeQuotedLong(long l) throws IOException",
      "info" : "MethodDeclaration[19730-20046]:MethodDeclaration[19730-20046]"
    }, {
      "left" : "public void writeNumber(BigInteger value) throws IOException",
      "right" : "public void writeNumber(BigInteger value) throws IOException",
      "info" : "MethodDeclaration[20112-20451]:MethodDeclaration[20112-20451]"
    }, {
      "left" : "public void writeNumber(double d) throws IOException",
      "right" : "public void writeNumber(double d) throws IOException",
      "info" : "MethodDeclaration[20462-20927]:MethodDeclaration[20462-20927]"
    }, {
      "left" : "public void writeNumber(float f) throws IOException",
      "right" : "public void writeNumber(float f) throws IOException",
      "info" : "MethodDeclaration[20933-21384]:MethodDeclaration[20933-21384]"
    }, {
      "left" : "public void writeNumber(String encodedValue) throws IOException",
      "right" : "public void writeNumber(String encodedValue) throws IOException",
      "info" : "MethodDeclaration[22024-22296]:MethodDeclaration[21811-22083]"
    }, {
      "left" : "private void _writeQuotedRaw(String value) throws IOException",
      "right" : "private void _writeQuotedRaw(String value) throws IOException",
      "info" : "MethodDeclaration[22302-22646]:MethodDeclaration[22089-22433]"
    }, {
      "left" : "public void writeBoolean(boolean state) throws IOException",
      "right" : "public void writeBoolean(boolean state) throws IOException",
      "info" : "MethodDeclaration[22656-23277]:MethodDeclaration[22443-23064]"
    }, {
      "left" : "public void writeNull() throws IOException",
      "right" : "public void writeNull() throws IOException",
      "info" : "MethodDeclaration[23283-23408]:MethodDeclaration[23070-23195]"
    }, {
      "left" : "protected void _verifyValueWrite(String typeMsg) throws IOException",
      "right" : "protected void _verifyValueWrite(String typeMsg) throws IOException",
      "info" : "MethodDeclaration[23599-24747]:MethodDeclaration[23386-24534]"
    }, {
      "left" : "protected void _verifyPrettyValueWrite(String typeMsg) throws IOException",
      "right" : "protected void _verifyPrettyValueWrite(String typeMsg) throws IOException",
      "info" : "MethodDeclaration[24753-25959]:MethodDeclaration[24540-25746]"
    }, {
      "left" : "public void flush() throws IOException",
      "right" : "public void flush() throws IOException",
      "info" : "MethodDeclaration[26142-26379]:MethodDeclaration[25929-26166]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[26385-27931]:MethodDeclaration[26172-27718]"
    }, {
      "left" : "protected void _releaseBuffers()",
      "right" : "protected void _releaseBuffers()",
      "info" : "MethodDeclaration[27937-28151]:MethodDeclaration[27724-27938]"
    }, {
      "left" : "private void _writeString(String text) throws IOException",
      "right" : "private void _writeString(String text) throws IOException",
      "info" : "MethodDeclaration[28359-29352]:MethodDeclaration[28146-29139]"
    }, {
      "left" : "private void _writeString2(final int len) throws IOException",
      "right" : "private void _writeString2(final int len) throws IOException",
      "info" : "MethodDeclaration[29358-30685]:MethodDeclaration[29145-30472]"
    }, {
      "left" : "private void _writeLongString(String text) throws IOException",
      "right" : "private void _writeLongString(String text) throws IOException",
      "info" : "MethodDeclaration[30691-31669]:MethodDeclaration[30478-31456]"
    }, {
      "left" : "private void _writeSegment(int end) throws IOException",
      "right" : "private void _writeSegment(int end) throws IOException",
      "info" : "MethodDeclaration[31675-33332]:MethodDeclaration[31462-33119]"
    }, {
      "left" : "private void _writeString(char[] text, int offset, int len) throws IOException",
      "right" : "private void _writeString(char[] text, int offset, int len) throws IOException",
      "info" : "MethodDeclaration[33342-35453]:MethodDeclaration[33129-35240]"
    }, {
      "left" : "private void _writeStringASCII(final int len, final int maxNonEscaped)\n        throws IOException, JsonGenerationException",
      "right" : "private void _writeStringASCII(final int len, final int maxNonEscaped)\n        throws IOException, JsonGenerationException",
      "info" : "MethodDeclaration[35815-37169]:MethodDeclaration[35602-36956]"
    }, {
      "left" : "private void _writeSegmentASCII(int end, final int maxNonEscaped)\n        throws IOException, JsonGenerationException",
      "right" : "private void _writeSegmentASCII(int end, final int maxNonEscaped)\n        throws IOException, JsonGenerationException",
      "info" : "MethodDeclaration[37175-38481]:MethodDeclaration[36962-38268]"
    }, {
      "left" : "private void _writeStringASCII(char[] text, int offset, int len,\n            final int maxNonEscaped)\n        throws IOException, JsonGenerationException",
      "right" : "private void _writeStringASCII(char[] text, int offset, int len,\n            final int maxNonEscaped)\n        throws IOException, JsonGenerationException",
      "info" : "MethodDeclaration[38487-40379]:MethodDeclaration[38274-40166]"
    }, {
      "left" : "private void _writeStringCustom(final int len)\n        throws IOException, JsonGenerationException",
      "right" : "private void _writeStringCustom(final int len)\n        throws IOException, JsonGenerationException",
      "info" : "MethodDeclaration[40759-42490]:MethodDeclaration[40546-42277]"
    }, {
      "left" : "private void _writeSegmentCustom(int end)\n        throws IOException, JsonGenerationException",
      "right" : "private void _writeSegmentCustom(int end)\n        throws IOException, JsonGenerationException",
      "info" : "MethodDeclaration[42496-44175]:MethodDeclaration[42283-43962]"
    }, {
      "left" : "private void _writeStringCustom(char[] text, int offset, int len)\n        throws IOException, JsonGenerationException",
      "right" : "private void _writeStringCustom(char[] text, int offset, int len)\n        throws IOException, JsonGenerationException",
      "info" : "MethodDeclaration[44181-46438]:MethodDeclaration[43968-46225]"
    }, {
      "left" : "protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException",
      "right" : "protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException",
      "info" : "MethodDeclaration[46647-48535]:MethodDeclaration[46434-48322]"
    }, {
      "left" : "protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException",
      "right" : "protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException",
      "info" : "MethodDeclaration[48600-51070]:MethodDeclaration[48387-50857]"
    }, {
      "left" : "protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer)\n        throws IOException, JsonGenerationException",
      "right" : "protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer)\n        throws IOException, JsonGenerationException",
      "info" : "MethodDeclaration[51123-53455]:MethodDeclaration[50910-53242]"
    }, {
      "left" : "private int _readMore(InputStream in,\n            byte[] readBuffer, int inputPtr, int inputEnd,\n            int maxRead) throws IOException",
      "right" : "private int _readMore(InputStream in,\n            byte[] readBuffer, int inputPtr, int inputEnd,\n            int maxRead) throws IOException",
      "info" : "MethodDeclaration[53465-54252]:MethodDeclaration[53252-54039]"
    }, {
      "left" : "private final void _writeNull() throws IOException",
      "right" : "private final void _writeNull() throws IOException",
      "info" : "MethodDeclaration[54460-54805]:MethodDeclaration[54247-54592]"
    }, {
      "left" : "private void _prependOrWriteCharacterEscape(char ch, int escCode)\n        throws IOException, JsonGenerationException",
      "right" : "private void _prependOrWriteCharacterEscape(char ch, int escCode)\n        throws IOException, JsonGenerationException",
      "info" : "MethodDeclaration[55015-58319]:MethodDeclaration[54802-58106]"
    }, {
      "left" : "private int _prependOrWriteCharacterEscape(char[] buffer, int ptr, int end,\n            char ch, int escCode)\n        throws IOException, JsonGenerationException",
      "right" : "private int _prependOrWriteCharacterEscape(char[] buffer, int ptr, int end,\n            char ch, int escCode)\n        throws IOException, JsonGenerationException",
      "info" : "MethodDeclaration[58325-61587]:MethodDeclaration[58112-61374]"
    }, {
      "left" : "private void _appendCharacterEscape(char ch, int escCode)\n        throws IOException, JsonGenerationException",
      "right" : "private void _appendCharacterEscape(char ch, int escCode)\n        throws IOException, JsonGenerationException",
      "info" : "MethodDeclaration[61593-63647]:MethodDeclaration[61380-63434]"
    }, {
      "left" : "private char[] _allocateEntityBuffer()",
      "right" : "private char[] _allocateEntityBuffer()",
      "info" : "MethodDeclaration[63657-64093]:MethodDeclaration[63444-63880]"
    }, {
      "left" : "protected void _flushBuffer() throws IOException",
      "right" : "protected void _flushBuffer() throws IOException",
      "info" : "MethodDeclaration[64103-64377]:MethodDeclaration[63890-64164]"
    } ],
    "mappings" : [
 {
      "left" : "JsonGeneratorImpl",
      "right" : "JsonGeneratorImpl",
      "info" : "SimpleType[380-397]:SimpleType[380-397]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1866-1872]:Modifier[1866-1872]"
    }, {
      "left" : "WriterBasedJsonGenerator",
      "right" : "WriterBasedJsonGenerator",
      "info" : "SimpleName[1873-1897]:SimpleName[1873-1897]"
    }, {
      "left" : "IOContext ctxt",
      "right" : "IOContext ctxt",
      "info" : "SingleVariableDeclaration[1898-1912]:SingleVariableDeclaration[1898-1912]"
    }, {
      "left" : "int features",
      "right" : "int features",
      "info" : "SingleVariableDeclaration[1914-1926]:SingleVariableDeclaration[1914-1926]"
    }, {
      "left" : "ObjectCodec codec",
      "right" : "ObjectCodec codec",
      "info" : "SingleVariableDeclaration[1940-1957]:SingleVariableDeclaration[1940-1957]"
    }, {
      "left" : "Writer w",
      "right" : "Writer w",
      "info" : "SingleVariableDeclaration[1959-1967]:SingleVariableDeclaration[1959-1967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1973-2132]:Block[1973-2132]"
    }, {
      "left" : "super(ctxt, features, codec);",
      "right" : "super(ctxt, features, codec);",
      "info" : "SuperConstructorInvocation[1983-2012]:SuperConstructorInvocation[1983-2012]"
    }, {
      "left" : "_writer = w;",
      "right" : "_writer = w;",
      "info" : "ExpressionStatement[2021-2033]:ExpressionStatement[2021-2033]"
    }, {
      "left" : "_outputBuffer = ctxt.allocConcatBuffer();",
      "right" : "_outputBuffer = ctxt.allocConcatBuffer();",
      "info" : "ExpressionStatement[2042-2083]:ExpressionStatement[2042-2083]"
    }, {
      "left" : "_outputEnd = _outputBuffer.length;",
      "right" : "_outputEnd = _outputBuffer.length;",
      "info" : "ExpressionStatement[2092-2126]:ExpressionStatement[2092-2126]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2330-2339]:MarkerAnnotation[2330-2339]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2344-2350]:Modifier[2344-2350]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[2351-2357]:SimpleType[2351-2357]"
    }, {
      "left" : "getOutputTarget",
      "right" : "getOutputTarget",
      "info" : "SimpleName[2358-2373]:SimpleName[2358-2373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2376-2407]:Block[2376-2407]"
    }, {
      "left" : "return _writer;",
      "right" : "return _writer;",
      "info" : "ReturnStatement[2386-2401]:ReturnStatement[2386-2401]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2413-2422]:MarkerAnnotation[2413-2422]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2427-2433]:Modifier[2427-2433]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[2434-2437]:PrimitiveType[2434-2437]"
    }, {
      "left" : "getOutputBuffered",
      "right" : "getOutputBuffered",
      "info" : "SimpleName[2438-2455]:SimpleName[2438-2455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2458-2611]:Block[2458-2611]"
    }, {
      "left" : "int len = _outputTail - _outputHead;",
      "right" : "int len = _outputTail - _outputHead;",
      "info" : "VariableDeclarationStatement[2536-2572]:VariableDeclarationStatement[2536-2572]"
    }, {
      "left" : "return Math.max(0, len);",
      "right" : "return Math.max(0, len);",
      "info" : "ReturnStatement[2581-2605]:ReturnStatement[2581-2605]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2787-2796]:MarkerAnnotation[2787-2796]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2801-2807]:Modifier[2801-2807]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2808-2812]:PrimitiveType[2808-2812]"
    }, {
      "left" : "writeFieldName",
      "right" : "writeFieldName",
      "info" : "SimpleName[2813-2827]:SimpleName[2813-2827]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[2828-2839]:SingleVariableDeclaration[2828-2839]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[2849-2860]:SimpleType[2849-2860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2865-3159]:Block[2865-3159]"
    }, {
      "left" : "int status = _writeContext.writeFieldName(name);",
      "right" : "int status = _writeContext.writeFieldName(name);",
      "info" : "VariableDeclarationStatement[2875-2923]:VariableDeclarationStatement[2875-2923]"
    }, {
      "left" : "if (status == JsonWriteContext.STATUS_EXPECT_VALUE)",
      "right" : "if (status == JsonWriteContext.STATUS_EXPECT_VALUE)",
      "info" : "IfStatement[2932-3070]:IfStatement[2932-3070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2984-3070]:Block[2984-3070]"
    }, {
      "left" : "_reportError(\"Can not write a field name, expecting a value\");",
      "right" : "_reportError(\"Can not write a field name, expecting a value\");",
      "info" : "ExpressionStatement[2998-3060]:ExpressionStatement[2998-3060]"
    }, {
      "left" : "_writeFieldName(name, (status == JsonWriteContext.STATUS_OK_AFTER_COMMA));",
      "right" : "_writeFieldName(name, (status == JsonWriteContext.STATUS_OK_AFTER_COMMA));",
      "info" : "ExpressionStatement[3079-3153]:ExpressionStatement[3079-3153]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3165-3174]:MarkerAnnotation[3165-3174]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3179-3185]:Modifier[3179-3185]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3186-3190]:PrimitiveType[3186-3190]"
    }, {
      "left" : "writeFieldName",
      "right" : "writeFieldName",
      "info" : "SimpleName[3191-3205]:SimpleName[3191-3205]"
    }, {
      "left" : "SerializableString name",
      "right" : "SerializableString name",
      "info" : "SingleVariableDeclaration[3206-3229]:SingleVariableDeclaration[3206-3229]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[3238-3249]:SimpleType[3238-3249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3254-3617]:Block[3254-3617]"
    }, {
      "left" : "int status = _writeContext.writeFieldName(name.getValue());",
      "right" : "int status = _writeContext.writeFieldName(name.getValue());",
      "info" : "VariableDeclarationStatement[3322-3381]:VariableDeclarationStatement[3322-3381]"
    }, {
      "left" : "if (status == JsonWriteContext.STATUS_EXPECT_VALUE)",
      "right" : "if (status == JsonWriteContext.STATUS_EXPECT_VALUE)",
      "info" : "IfStatement[3390-3528]:IfStatement[3390-3528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3442-3528]:Block[3442-3528]"
    }, {
      "left" : "_reportError(\"Can not write a field name, expecting a value\");",
      "right" : "_reportError(\"Can not write a field name, expecting a value\");",
      "info" : "ExpressionStatement[3456-3518]:ExpressionStatement[3456-3518]"
    }, {
      "left" : "_writeFieldName(name, (status == JsonWriteContext.STATUS_OK_AFTER_COMMA));",
      "right" : "_writeFieldName(name, (status == JsonWriteContext.STATUS_OK_AFTER_COMMA));",
      "info" : "ExpressionStatement[3537-3611]:ExpressionStatement[3537-3611]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[3623-3632]:Modifier[3623-3632]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3633-3637]:PrimitiveType[3633-3637]"
    }, {
      "left" : "_writeFieldName",
      "right" : "_writeFieldName",
      "info" : "SimpleName[3638-3653]:SimpleName[3638-3653]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[3654-3665]:SingleVariableDeclaration[3654-3665]"
    }, {
      "left" : "boolean commaBefore",
      "right" : "boolean commaBefore",
      "info" : "SingleVariableDeclaration[3667-3686]:SingleVariableDeclaration[3667-3686]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[3695-3706]:SimpleType[3695-3706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3711-4577]:Block[3711-4577]"
    }, {
      "left" : "if (_cfgPrettyPrinter != null)",
      "right" : "if (_cfgPrettyPrinter != null)",
      "info" : "IfStatement[3721-3833]:IfStatement[3721-3833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3752-3833]:Block[3752-3833]"
    }, {
      "left" : "_writePPFieldName(name, commaBefore);",
      "right" : "_writePPFieldName(name, commaBefore);",
      "info" : "ExpressionStatement[3766-3803]:ExpressionStatement[3766-3803]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[3816-3823]:ReturnStatement[3816-3823]"
    }, {
      "left" : "if ((_outputTail + 1) >= _outputEnd)",
      "right" : "if ((_outputTail + 1) >= _outputEnd)",
      "info" : "IfStatement[3916-3992]:IfStatement[3916-3992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3953-3992]:Block[3953-3992]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[3967-3982]:ExpressionStatement[3967-3982]"
    }, {
      "left" : "if (commaBefore)",
      "right" : "if (commaBefore)",
      "info" : "IfStatement[4001-4077]:IfStatement[4001-4077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4018-4077]:Block[4018-4077]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = ',';",
      "right" : "_outputBuffer[_outputTail++] = ',';",
      "info" : "ExpressionStatement[4032-4067]:ExpressionStatement[4032-4067]"
    }, {
      "left" : "if (_cfgUnqNames)",
      "right" : "if (_cfgUnqNames)",
      "info" : "IfStatement[4155-4236]:IfStatement[4155-4236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4173-4236]:Block[4173-4236]"
    }, {
      "left" : "_writeString(name);",
      "right" : "_writeString(name);",
      "info" : "ExpressionStatement[4187-4206]:ExpressionStatement[4187-4206]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4219-4226]:ReturnStatement[4219-4226]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '\"';",
      "right" : "_outputBuffer[_outputTail++] = '\"';",
      "info" : "ExpressionStatement[4304-4339]:ExpressionStatement[4304-4339]"
    }, {
      "left" : "_writeString(name);",
      "right" : "_writeString(name);",
      "info" : "ExpressionStatement[4369-4388]:ExpressionStatement[4369-4388]"
    }, {
      "left" : "if (_outputTail >= _outputEnd)",
      "right" : "if (_outputTail >= _outputEnd)",
      "info" : "IfStatement[4457-4527]:IfStatement[4457-4527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4488-4527]:Block[4488-4527]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[4502-4517]:ExpressionStatement[4502-4517]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '\"';",
      "right" : "_outputBuffer[_outputTail++] = '\"';",
      "info" : "ExpressionStatement[4536-4571]:ExpressionStatement[4536-4571]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[4587-4596]:Modifier[4587-4596]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4597-4601]:PrimitiveType[4597-4601]"
    }, {
      "left" : "_writeFieldName",
      "right" : "_writeFieldName",
      "info" : "SimpleName[4602-4617]:SimpleName[4602-4617]"
    }, {
      "left" : "SerializableString name",
      "right" : "SerializableString name",
      "info" : "SingleVariableDeclaration[4618-4641]:SingleVariableDeclaration[4618-4641]"
    }, {
      "left" : "boolean commaBefore",
      "right" : "boolean commaBefore",
      "info" : "SingleVariableDeclaration[4643-4662]:SingleVariableDeclaration[4643-4662]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4671-4682]:SimpleType[4671-4682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4687-5929]:Block[4687-5929]"
    }, {
      "left" : "if (_cfgPrettyPrinter != null)",
      "right" : "if (_cfgPrettyPrinter != null)",
      "info" : "IfStatement[4697-4809]:IfStatement[4697-4809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4728-4809]:Block[4728-4809]"
    }, {
      "left" : "_writePPFieldName(name, commaBefore);",
      "right" : "_writePPFieldName(name, commaBefore);",
      "info" : "ExpressionStatement[4742-4779]:ExpressionStatement[4742-4779]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4792-4799]:ReturnStatement[4792-4799]"
    }, {
      "left" : "if ((_outputTail + 1) >= _outputEnd)",
      "right" : "if ((_outputTail + 1) >= _outputEnd)",
      "info" : "IfStatement[4892-4968]:IfStatement[4892-4968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4929-4968]:Block[4929-4968]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[4943-4958]:ExpressionStatement[4943-4958]"
    }, {
      "left" : "if (commaBefore)",
      "right" : "if (commaBefore)",
      "info" : "IfStatement[4977-5053]:IfStatement[4977-5053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4994-5053]:Block[4994-5053]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = ',';",
      "right" : "_outputBuffer[_outputTail++] = ',';",
      "info" : "ExpressionStatement[5008-5043]:ExpressionStatement[5008-5043]"
    }, {
      "left" : "final char[] quoted = name.asQuotedChars();",
      "right" : "final char[] quoted = name.asQuotedChars();",
      "info" : "VariableDeclarationStatement[5131-5174]:VariableDeclarationStatement[5131-5174]"
    }, {
      "left" : "if (_cfgUnqNames)",
      "right" : "if (_cfgUnqNames)",
      "info" : "IfStatement[5183-5280]:IfStatement[5183-5280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5201-5280]:Block[5201-5280]"
    }, {
      "left" : "writeRaw(quoted, 0, quoted.length);",
      "right" : "writeRaw(quoted, 0, quoted.length);",
      "info" : "ExpressionStatement[5215-5250]:ExpressionStatement[5215-5250]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[5263-5270]:ReturnStatement[5263-5270]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '\"';",
      "right" : "_outputBuffer[_outputTail++] = '\"';",
      "info" : "ExpressionStatement[5348-5383]:ExpressionStatement[5348-5383]"
    }, {
      "left" : "final int qlen = quoted.length;",
      "right" : "final int qlen = quoted.length;",
      "info" : "VariableDeclarationStatement[5413-5444]:VariableDeclarationStatement[5413-5444]"
    }, {
      "left" : "if ((_outputTail + qlen + 1) >= _outputEnd)",
      "right" : "if ((_outputTail + qlen + 1) >= _outputEnd)",
      "info" : "IfStatement[5453-5923]:IfStatement[5453-5923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5497-5750]:Block[5497-5750]"
    }, {
      "left" : "writeRaw(quoted, 0, qlen);",
      "right" : "writeRaw(quoted, 0, qlen);",
      "info" : "ExpressionStatement[5511-5537]:ExpressionStatement[5511-5537]"
    }, {
      "left" : "if (_outputTail >= _outputEnd)",
      "right" : "if (_outputTail >= _outputEnd)",
      "info" : "IfStatement[5614-5692]:IfStatement[5614-5692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5645-5692]:Block[5645-5692]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[5663-5678]:ExpressionStatement[5663-5678]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '\"';",
      "right" : "_outputBuffer[_outputTail++] = '\"';",
      "info" : "ExpressionStatement[5705-5740]:ExpressionStatement[5705-5740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5756-5923]:Block[5756-5923]"
    }, {
      "left" : "System.arraycopy(quoted, 0, _outputBuffer, _outputTail, qlen);",
      "right" : "System.arraycopy(quoted, 0, _outputBuffer, _outputTail, qlen);",
      "info" : "ExpressionStatement[5770-5832]:ExpressionStatement[5770-5832]"
    }, {
      "left" : "_outputTail += qlen;",
      "right" : "_outputTail += qlen;",
      "info" : "ExpressionStatement[5845-5865]:ExpressionStatement[5845-5865]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '\"';",
      "right" : "_outputBuffer[_outputTail++] = '\"';",
      "info" : "ExpressionStatement[5878-5913]:ExpressionStatement[5878-5913]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6132-6141]:MarkerAnnotation[6132-6141]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6146-6152]:Modifier[6146-6152]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6153-6157]:PrimitiveType[6153-6157]"
    }, {
      "left" : "writeStartArray",
      "right" : "writeStartArray",
      "info" : "SimpleName[6158-6173]:SimpleName[6158-6173]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6183-6194]:SimpleType[6183-6194]"
    }, {
      "left" : "JsonGenerationException",
      "right" : "JsonGenerationException",
      "info" : "SimpleType[6196-6219]:SimpleType[6196-6219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6224-6601]:Block[6224-6601]"
    }, {
      "left" : "_verifyValueWrite(\"start an array\");",
      "right" : "_verifyValueWrite(\"start an array\");",
      "info" : "ExpressionStatement[6234-6270]:ExpressionStatement[6234-6270]"
    }, {
      "left" : "_writeContext = _writeContext.createChildArrayContext();",
      "right" : "_writeContext = _writeContext.createChildArrayContext();",
      "info" : "ExpressionStatement[6279-6335]:ExpressionStatement[6279-6335]"
    }, {
      "left" : "if (_cfgPrettyPrinter != null)",
      "right" : "if (_cfgPrettyPrinter != null)",
      "info" : "IfStatement[6344-6595]:IfStatement[6344-6595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6375-6439]:Block[6375-6439]"
    }, {
      "left" : "_cfgPrettyPrinter.writeStartArray(this);",
      "right" : "_cfgPrettyPrinter.writeStartArray(this);",
      "info" : "ExpressionStatement[6389-6429]:ExpressionStatement[6389-6429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6445-6595]:Block[6445-6595]"
    }, {
      "left" : "if (_outputTail >= _outputEnd)",
      "right" : "if (_outputTail >= _outputEnd)",
      "info" : "IfStatement[6459-6537]:IfStatement[6459-6537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6490-6537]:Block[6490-6537]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[6508-6523]:ExpressionStatement[6508-6523]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '[';",
      "right" : "_outputBuffer[_outputTail++] = '[';",
      "info" : "ExpressionStatement[6550-6585]:ExpressionStatement[6550-6585]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6607-6616]:MarkerAnnotation[6607-6616]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6621-6627]:Modifier[6621-6627]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6628-6632]:PrimitiveType[6628-6632]"
    }, {
      "left" : "writeEndArray",
      "right" : "writeEndArray",
      "info" : "SimpleName[6633-6646]:SimpleName[6633-6646]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6656-6667]:SimpleType[6656-6667]"
    }, {
      "left" : "JsonGenerationException",
      "right" : "JsonGenerationException",
      "info" : "SimpleType[6669-6692]:SimpleType[6669-6692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6697-7193]:Block[6697-7193]"
    }, {
      "left" : "if (!_writeContext.inArray())",
      "right" : "if (!_writeContext.inArray())",
      "info" : "IfStatement[6707-6839]:IfStatement[6707-6839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6737-6839]:Block[6737-6839]"
    }, {
      "left" : "_reportError(\"Current context not an ARRAY but \"+_writeContext.getTypeDesc());",
      "right" : "_reportError(\"Current context not an ARRAY but \"+_writeContext.getTypeDesc());",
      "info" : "ExpressionStatement[6751-6829]:ExpressionStatement[6751-6829]"
    }, {
      "left" : "if (_cfgPrettyPrinter != null)",
      "right" : "if (_cfgPrettyPrinter != null)",
      "info" : "IfStatement[6848-7128]:IfStatement[6848-7128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6879-6972]:Block[6879-6972]"
    }, {
      "left" : "_cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount());",
      "right" : "_cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount());",
      "info" : "ExpressionStatement[6893-6962]:ExpressionStatement[6893-6962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6978-7128]:Block[6978-7128]"
    }, {
      "left" : "if (_outputTail >= _outputEnd)",
      "right" : "if (_outputTail >= _outputEnd)",
      "info" : "IfStatement[6992-7070]:IfStatement[6992-7070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7023-7070]:Block[7023-7070]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[7041-7056]:ExpressionStatement[7041-7056]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = ']';",
      "right" : "_outputBuffer[_outputTail++] = ']';",
      "info" : "ExpressionStatement[7083-7118]:ExpressionStatement[7083-7118]"
    }, {
      "left" : "_writeContext = _writeContext.clearAndGetParent();",
      "right" : "_writeContext = _writeContext.clearAndGetParent();",
      "info" : "ExpressionStatement[7137-7187]:ExpressionStatement[7137-7187]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7199-7208]:MarkerAnnotation[7199-7208]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7213-7219]:Modifier[7213-7219]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7220-7224]:PrimitiveType[7220-7224]"
    }, {
      "left" : "writeStartObject",
      "right" : "writeStartObject",
      "info" : "SimpleName[7225-7241]:SimpleName[7225-7241]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7251-7262]:SimpleType[7251-7262]"
    }, {
      "left" : "JsonGenerationException",
      "right" : "JsonGenerationException",
      "info" : "SimpleType[7264-7287]:SimpleType[7264-7287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7292-7672]:Block[7292-7672]"
    }, {
      "left" : "_verifyValueWrite(\"start an object\");",
      "right" : "_verifyValueWrite(\"start an object\");",
      "info" : "ExpressionStatement[7302-7339]:ExpressionStatement[7302-7339]"
    }, {
      "left" : "_writeContext = _writeContext.createChildObjectContext();",
      "right" : "_writeContext = _writeContext.createChildObjectContext();",
      "info" : "ExpressionStatement[7348-7405]:ExpressionStatement[7348-7405]"
    }, {
      "left" : "if (_cfgPrettyPrinter != null)",
      "right" : "if (_cfgPrettyPrinter != null)",
      "info" : "IfStatement[7414-7666]:IfStatement[7414-7666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7445-7510]:Block[7445-7510]"
    }, {
      "left" : "_cfgPrettyPrinter.writeStartObject(this);",
      "right" : "_cfgPrettyPrinter.writeStartObject(this);",
      "info" : "ExpressionStatement[7459-7500]:ExpressionStatement[7459-7500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7516-7666]:Block[7516-7666]"
    }, {
      "left" : "if (_outputTail >= _outputEnd)",
      "right" : "if (_outputTail >= _outputEnd)",
      "info" : "IfStatement[7530-7608]:IfStatement[7530-7608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7561-7608]:Block[7561-7608]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[7579-7594]:ExpressionStatement[7579-7594]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '{';",
      "right" : "_outputBuffer[_outputTail++] = '{';",
      "info" : "ExpressionStatement[7621-7656]:ExpressionStatement[7621-7656]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7678-7687]:MarkerAnnotation[7678-7687]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7692-7698]:Modifier[7692-7698]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7699-7703]:PrimitiveType[7699-7703]"
    }, {
      "left" : "writeEndObject",
      "right" : "writeEndObject",
      "info" : "SimpleName[7704-7718]:SimpleName[7704-7718]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7728-7739]:SimpleType[7728-7739]"
    }, {
      "left" : "JsonGenerationException",
      "right" : "JsonGenerationException",
      "info" : "SimpleType[7741-7764]:SimpleType[7741-7764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7769-8268]:Block[7769-8268]"
    }, {
      "left" : "if (!_writeContext.inObject())",
      "right" : "if (!_writeContext.inObject())",
      "info" : "IfStatement[7779-7913]:IfStatement[7779-7913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7810-7913]:Block[7810-7913]"
    }, {
      "left" : "_reportError(\"Current context not an object but \"+_writeContext.getTypeDesc());",
      "right" : "_reportError(\"Current context not an object but \"+_writeContext.getTypeDesc());",
      "info" : "ExpressionStatement[7824-7903]:ExpressionStatement[7824-7903]"
    }, {
      "left" : "if (_cfgPrettyPrinter != null)",
      "right" : "if (_cfgPrettyPrinter != null)",
      "info" : "IfStatement[7922-8203]:IfStatement[7922-8203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7953-8047]:Block[7953-8047]"
    }, {
      "left" : "_cfgPrettyPrinter.writeEndObject(this, _writeContext.getEntryCount());",
      "right" : "_cfgPrettyPrinter.writeEndObject(this, _writeContext.getEntryCount());",
      "info" : "ExpressionStatement[7967-8037]:ExpressionStatement[7967-8037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8053-8203]:Block[8053-8203]"
    }, {
      "left" : "if (_outputTail >= _outputEnd)",
      "right" : "if (_outputTail >= _outputEnd)",
      "info" : "IfStatement[8067-8145]:IfStatement[8067-8145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8098-8145]:Block[8098-8145]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[8116-8131]:ExpressionStatement[8116-8131]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '}';",
      "right" : "_outputBuffer[_outputTail++] = '}';",
      "info" : "ExpressionStatement[8158-8193]:ExpressionStatement[8158-8193]"
    }, {
      "left" : "_writeContext = _writeContext.clearAndGetParent();",
      "right" : "_writeContext = _writeContext.clearAndGetParent();",
      "info" : "ExpressionStatement[8212-8262]:ExpressionStatement[8212-8262]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[8435-8444]:Modifier[8435-8444]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8445-8449]:PrimitiveType[8445-8449]"
    }, {
      "left" : "_writePPFieldName",
      "right" : "_writePPFieldName",
      "info" : "SimpleName[8450-8467]:SimpleName[8450-8467]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[8468-8479]:SingleVariableDeclaration[8468-8479]"
    }, {
      "left" : "boolean commaBefore",
      "right" : "boolean commaBefore",
      "info" : "SingleVariableDeclaration[8481-8500]:SingleVariableDeclaration[8481-8500]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8509-8520]:SimpleType[8509-8520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8525-9133]:Block[8525-9133]"
    }, {
      "left" : "if (commaBefore)",
      "right" : "if (commaBefore)",
      "info" : "IfStatement[8535-8700]:IfStatement[8535-8700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8552-8626]:Block[8552-8626]"
    }, {
      "left" : "_cfgPrettyPrinter.writeObjectEntrySeparator(this);",
      "right" : "_cfgPrettyPrinter.writeObjectEntrySeparator(this);",
      "info" : "ExpressionStatement[8566-8616]:ExpressionStatement[8566-8616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8632-8700]:Block[8632-8700]"
    }, {
      "left" : "_cfgPrettyPrinter.beforeObjectEntries(this);",
      "right" : "_cfgPrettyPrinter.beforeObjectEntries(this);",
      "info" : "ExpressionStatement[8646-8690]:ExpressionStatement[8646-8690]"
    }, {
      "left" : "if (_cfgUnqNames)",
      "right" : "if (_cfgUnqNames)",
      "info" : "IfStatement[8710-9127]:IfStatement[8710-9127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8728-8799]:Block[8728-8799]"
    }, {
      "left" : "_writeString(name);",
      "right" : "_writeString(name);",
      "info" : "ExpressionStatement[8770-8789]:ExpressionStatement[8770-8789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8805-9127]:Block[8805-9127]"
    }, {
      "left" : "if (_outputTail >= _outputEnd)",
      "right" : "if (_outputTail >= _outputEnd)",
      "info" : "IfStatement[8820-8898]:IfStatement[8820-8898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8851-8898]:Block[8851-8898]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[8869-8884]:ExpressionStatement[8869-8884]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '\"';",
      "right" : "_outputBuffer[_outputTail++] = '\"';",
      "info" : "ExpressionStatement[8911-8946]:ExpressionStatement[8911-8946]"
    }, {
      "left" : "_writeString(name);",
      "right" : "_writeString(name);",
      "info" : "ExpressionStatement[8959-8978]:ExpressionStatement[8959-8978]"
    }, {
      "left" : "if (_outputTail >= _outputEnd)",
      "right" : "if (_outputTail >= _outputEnd)",
      "info" : "IfStatement[8991-9069]:IfStatement[8991-9069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9022-9069]:Block[9022-9069]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[9040-9055]:ExpressionStatement[9040-9055]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '\"';",
      "right" : "_outputBuffer[_outputTail++] = '\"';",
      "info" : "ExpressionStatement[9082-9117]:ExpressionStatement[9082-9117]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[9139-9148]:Modifier[9139-9148]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9149-9153]:PrimitiveType[9149-9153]"
    }, {
      "left" : "_writePPFieldName",
      "right" : "_writePPFieldName",
      "info" : "SimpleName[9154-9171]:SimpleName[9154-9171]"
    }, {
      "left" : "SerializableString name",
      "right" : "SerializableString name",
      "info" : "SingleVariableDeclaration[9172-9195]:SingleVariableDeclaration[9172-9195]"
    }, {
      "left" : "boolean commaBefore",
      "right" : "boolean commaBefore",
      "info" : "SingleVariableDeclaration[9197-9216]:SingleVariableDeclaration[9197-9216]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[9225-9236]:SimpleType[9225-9236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9241-9936]:Block[9241-9936]"
    }, {
      "left" : "if (commaBefore)",
      "right" : "if (commaBefore)",
      "info" : "IfStatement[9251-9416]:IfStatement[9251-9416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9268-9342]:Block[9268-9342]"
    }, {
      "left" : "_cfgPrettyPrinter.writeObjectEntrySeparator(this);",
      "right" : "_cfgPrettyPrinter.writeObjectEntrySeparator(this);",
      "info" : "ExpressionStatement[9282-9332]:ExpressionStatement[9282-9332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9348-9416]:Block[9348-9416]"
    }, {
      "left" : "_cfgPrettyPrinter.beforeObjectEntries(this);",
      "right" : "_cfgPrettyPrinter.beforeObjectEntries(this);",
      "info" : "ExpressionStatement[9362-9406]:ExpressionStatement[9362-9406]"
    }, {
      "left" : "final char[] quoted = name.asQuotedChars();",
      "right" : "final char[] quoted = name.asQuotedChars();",
      "info" : "VariableDeclarationStatement[9430-9473]:VariableDeclarationStatement[9430-9473]"
    }, {
      "left" : "if (_cfgUnqNames)",
      "right" : "if (_cfgUnqNames)",
      "info" : "IfStatement[9482-9930]:IfStatement[9482-9930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9500-9587]:Block[9500-9587]"
    }, {
      "left" : "writeRaw(quoted, 0, quoted.length);",
      "right" : "writeRaw(quoted, 0, quoted.length);",
      "info" : "ExpressionStatement[9542-9577]:ExpressionStatement[9542-9577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9593-9930]:Block[9593-9930]"
    }, {
      "left" : "if (_outputTail >= _outputEnd)",
      "right" : "if (_outputTail >= _outputEnd)",
      "info" : "IfStatement[9607-9685]:IfStatement[9607-9685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9638-9685]:Block[9638-9685]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[9656-9671]:ExpressionStatement[9656-9671]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '\"';",
      "right" : "_outputBuffer[_outputTail++] = '\"';",
      "info" : "ExpressionStatement[9698-9733]:ExpressionStatement[9698-9733]"
    }, {
      "left" : "writeRaw(quoted, 0, quoted.length);",
      "right" : "writeRaw(quoted, 0, quoted.length);",
      "info" : "ExpressionStatement[9746-9781]:ExpressionStatement[9746-9781]"
    }, {
      "left" : "if (_outputTail >= _outputEnd)",
      "right" : "if (_outputTail >= _outputEnd)",
      "info" : "IfStatement[9794-9872]:IfStatement[9794-9872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9825-9872]:Block[9825-9872]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[9843-9858]:ExpressionStatement[9843-9858]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '\"';",
      "right" : "_outputBuffer[_outputTail++] = '\"';",
      "info" : "ExpressionStatement[9885-9920]:ExpressionStatement[9885-9920]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10132-10141]:MarkerAnnotation[10132-10141]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10146-10152]:Modifier[10146-10152]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10153-10157]:PrimitiveType[10153-10157]"
    }, {
      "left" : "writeString",
      "right" : "writeString",
      "info" : "SimpleName[10158-10169]:SimpleName[10158-10169]"
    }, {
      "left" : "String text",
      "right" : "String text",
      "info" : "SingleVariableDeclaration[10170-10181]:SingleVariableDeclaration[10170-10181]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[10190-10201]:SimpleType[10190-10201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10206-10651]:Block[10206-10651]"
    }, {
      "left" : "_verifyValueWrite(WRITE_STRING);",
      "right" : "_verifyValueWrite(WRITE_STRING);",
      "info" : "ExpressionStatement[10216-10248]:ExpressionStatement[10216-10248]"
    }, {
      "left" : "if (text == null)",
      "right" : "if (text == null)",
      "info" : "IfStatement[10257-10332]:IfStatement[10257-10332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10275-10332]:Block[10275-10332]"
    }, {
      "left" : "_writeNull();",
      "right" : "_writeNull();",
      "info" : "ExpressionStatement[10289-10302]:ExpressionStatement[10289-10302]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10315-10322]:ReturnStatement[10315-10322]"
    }, {
      "left" : "if (_outputTail >= _outputEnd)",
      "right" : "if (_outputTail >= _outputEnd)",
      "info" : "IfStatement[10341-10411]:IfStatement[10341-10411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10372-10411]:Block[10372-10411]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[10386-10401]:ExpressionStatement[10386-10401]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '\"';",
      "right" : "_outputBuffer[_outputTail++] = '\"';",
      "info" : "ExpressionStatement[10420-10455]:ExpressionStatement[10420-10455]"
    }, {
      "left" : "_writeString(text);",
      "right" : "_writeString(text);",
      "info" : "ExpressionStatement[10464-10483]:ExpressionStatement[10464-10483]"
    }, {
      "left" : "if (_outputTail >= _outputEnd)",
      "right" : "if (_outputTail >= _outputEnd)",
      "info" : "IfStatement[10531-10601]:IfStatement[10531-10601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10562-10601]:Block[10562-10601]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[10576-10591]:ExpressionStatement[10576-10591]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '\"';",
      "right" : "_outputBuffer[_outputTail++] = '\"';",
      "info" : "ExpressionStatement[10610-10645]:ExpressionStatement[10610-10645]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10657-10666]:MarkerAnnotation[10657-10666]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10671-10677]:Modifier[10671-10677]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10678-10682]:PrimitiveType[10678-10682]"
    }, {
      "left" : "writeString",
      "right" : "writeString",
      "info" : "SimpleName[10683-10694]:SimpleName[10683-10694]"
    }, {
      "left" : "char[] text",
      "right" : "char[] text",
      "info" : "SingleVariableDeclaration[10695-10706]:SingleVariableDeclaration[10695-10706]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[10708-10718]:SingleVariableDeclaration[10708-10718]"
    }, {
      "left" : "int len",
      "right" : "int len",
      "info" : "SingleVariableDeclaration[10720-10727]:SingleVariableDeclaration[10720-10727]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[10736-10747]:SimpleType[10736-10747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10752-11126]:Block[10752-11126]"
    }, {
      "left" : "_verifyValueWrite(WRITE_STRING);",
      "right" : "_verifyValueWrite(WRITE_STRING);",
      "info" : "ExpressionStatement[10762-10794]:ExpressionStatement[10762-10794]"
    }, {
      "left" : "if (_outputTail >= _outputEnd)",
      "right" : "if (_outputTail >= _outputEnd)",
      "info" : "IfStatement[10803-10873]:IfStatement[10803-10873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10834-10873]:Block[10834-10873]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[10848-10863]:ExpressionStatement[10848-10863]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '\"';",
      "right" : "_outputBuffer[_outputTail++] = '\"';",
      "info" : "ExpressionStatement[10882-10917]:ExpressionStatement[10882-10917]"
    }, {
      "left" : "_writeString(text, offset, len);",
      "right" : "_writeString(text, offset, len);",
      "info" : "ExpressionStatement[10926-10958]:ExpressionStatement[10926-10958]"
    }, {
      "left" : "if (_outputTail >= _outputEnd)",
      "right" : "if (_outputTail >= _outputEnd)",
      "info" : "IfStatement[11006-11076]:IfStatement[11006-11076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11037-11076]:Block[11037-11076]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[11051-11066]:ExpressionStatement[11051-11066]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '\"';",
      "right" : "_outputBuffer[_outputTail++] = '\"';",
      "info" : "ExpressionStatement[11085-11120]:ExpressionStatement[11085-11120]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11132-11141]:MarkerAnnotation[11132-11141]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11146-11152]:Modifier[11146-11152]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11153-11157]:PrimitiveType[11153-11157]"
    }, {
      "left" : "writeString",
      "right" : "writeString",
      "info" : "SimpleName[11158-11169]:SimpleName[11158-11169]"
    }, {
      "left" : "SerializableString sstr",
      "right" : "SerializableString sstr",
      "info" : "SingleVariableDeclaration[11170-11193]:SingleVariableDeclaration[11170-11193]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11202-11213]:SimpleType[11202-11213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11218-12097]:Block[11218-12097]"
    }, {
      "left" : "_verifyValueWrite(WRITE_STRING);",
      "right" : "_verifyValueWrite(WRITE_STRING);",
      "info" : "ExpressionStatement[11228-11260]:ExpressionStatement[11228-11260]"
    }, {
      "left" : "if (_outputTail >= _outputEnd)",
      "right" : "if (_outputTail >= _outputEnd)",
      "info" : "IfStatement[11269-11339]:IfStatement[11269-11339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11300-11339]:Block[11300-11339]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[11314-11329]:ExpressionStatement[11314-11329]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '\"';",
      "right" : "_outputBuffer[_outputTail++] = '\"';",
      "info" : "ExpressionStatement[11348-11383]:ExpressionStatement[11348-11383]"
    }, {
      "left" : "char[] text = sstr.asQuotedChars();",
      "right" : "char[] text = sstr.asQuotedChars();",
      "info" : "VariableDeclarationStatement[11431-11466]:VariableDeclarationStatement[11431-11466]"
    }, {
      "left" : "final int len = text.length;",
      "right" : "final int len = text.length;",
      "info" : "VariableDeclarationStatement[11475-11503]:VariableDeclarationStatement[11475-11503]"
    }, {
      "left" : "if (len < SHORT_WRITE)",
      "right" : "if (len < SHORT_WRITE)",
      "info" : "IfStatement[11567-11968]:IfStatement[11567-11968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11590-11830]:Block[11590-11830]"
    }, {
      "left" : "int room = _outputEnd - _outputTail;",
      "right" : "int room = _outputEnd - _outputTail;",
      "info" : "VariableDeclarationStatement[11604-11640]:VariableDeclarationStatement[11604-11640]"
    }, {
      "left" : "if (len > room)",
      "right" : "if (len > room)",
      "info" : "IfStatement[11653-11716]:IfStatement[11653-11716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11669-11716]:Block[11669-11716]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[11687-11702]:ExpressionStatement[11687-11702]"
    }, {
      "left" : "System.arraycopy(text, 0, _outputBuffer, _outputTail, len);",
      "right" : "System.arraycopy(text, 0, _outputBuffer, _outputTail, len);",
      "info" : "ExpressionStatement[11729-11788]:ExpressionStatement[11729-11788]"
    }, {
      "left" : "_outputTail += len;",
      "right" : "_outputTail += len;",
      "info" : "ExpressionStatement[11801-11820]:ExpressionStatement[11801-11820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11836-11968]:Block[11836-11968]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[11902-11917]:ExpressionStatement[11902-11917]"
    }, {
      "left" : "_writer.write(text, 0, len);",
      "right" : "_writer.write(text, 0, len);",
      "info" : "ExpressionStatement[11930-11958]:ExpressionStatement[11930-11958]"
    }, {
      "left" : "if (_outputTail >= _outputEnd)",
      "right" : "if (_outputTail >= _outputEnd)",
      "info" : "IfStatement[11977-12047]:IfStatement[11977-12047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12008-12047]:Block[12008-12047]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[12022-12037]:ExpressionStatement[12022-12037]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '\"';",
      "right" : "_outputBuffer[_outputTail++] = '\"';",
      "info" : "ExpressionStatement[12056-12091]:ExpressionStatement[12056-12091]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12103-12112]:MarkerAnnotation[12103-12112]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12117-12123]:Modifier[12117-12123]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12124-12128]:PrimitiveType[12124-12128]"
    }, {
      "left" : "writeRawUTF8String",
      "right" : "writeRawUTF8String",
      "info" : "SimpleName[12129-12147]:SimpleName[12129-12147]"
    }, {
      "left" : "byte[] text",
      "right" : "byte[] text",
      "info" : "SingleVariableDeclaration[12148-12159]:SingleVariableDeclaration[12148-12159]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[12161-12171]:SingleVariableDeclaration[12161-12171]"
    }, {
      "left" : "int length",
      "right" : "int length",
      "info" : "SingleVariableDeclaration[12173-12183]:SingleVariableDeclaration[12173-12183]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12192-12203]:SimpleType[12192-12203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12204-12317]:Block[12204-12317]"
    }, {
      "left" : "_reportUnsupportedOperation();",
      "right" : "_reportUnsupportedOperation();",
      "info" : "ExpressionStatement[12281-12311]:ExpressionStatement[12281-12311]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12323-12332]:MarkerAnnotation[12323-12332]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12337-12343]:Modifier[12337-12343]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12344-12348]:PrimitiveType[12344-12348]"
    }, {
      "left" : "writeUTF8String",
      "right" : "writeUTF8String",
      "info" : "SimpleName[12349-12364]:SimpleName[12349-12364]"
    }, {
      "left" : "byte[] text",
      "right" : "byte[] text",
      "info" : "SingleVariableDeclaration[12365-12376]:SingleVariableDeclaration[12365-12376]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[12378-12388]:SingleVariableDeclaration[12378-12388]"
    }, {
      "left" : "int length",
      "right" : "int length",
      "info" : "SingleVariableDeclaration[12390-12400]:SingleVariableDeclaration[12390-12400]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12409-12420]:SimpleType[12409-12420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12421-12534]:Block[12421-12534]"
    }, {
      "left" : "_reportUnsupportedOperation();",
      "right" : "_reportUnsupportedOperation();",
      "info" : "ExpressionStatement[12498-12528]:ExpressionStatement[12498-12528]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12746-12755]:MarkerAnnotation[12746-12755]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12760-12766]:Modifier[12760-12766]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12767-12771]:PrimitiveType[12767-12771]"
    }, {
      "left" : "writeRaw",
      "right" : "writeRaw",
      "info" : "SimpleName[12772-12780]:SimpleName[12772-12780]"
    }, {
      "left" : "String text",
      "right" : "String text",
      "info" : "SingleVariableDeclaration[12781-12792]:SingleVariableDeclaration[12781-12792]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12801-12812]:SimpleType[12801-12812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12817-13300]:Block[12817-13300]"
    }, {
      "left" : "int len = text.length();",
      "right" : "int len = text.length();",
      "info" : "VariableDeclarationStatement[12878-12902]:VariableDeclarationStatement[12878-12902]"
    }, {
      "left" : "int room = _outputEnd - _outputTail;",
      "right" : "int room = _outputEnd - _outputTail;",
      "info" : "VariableDeclarationStatement[12911-12947]:VariableDeclarationStatement[12911-12947]"
    }, {
      "left" : "if (room == 0)",
      "right" : "if (room == 0)",
      "info" : "IfStatement[12957-13056]:IfStatement[12957-13056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12972-13056]:Block[12972-13056]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[12986-13001]:ExpressionStatement[12986-13001]"
    }, {
      "left" : "room = _outputEnd - _outputTail;",
      "right" : "room = _outputEnd - _outputTail;",
      "info" : "ExpressionStatement[13014-13046]:ExpressionStatement[13014-13046]"
    }, {
      "left" : "if (room >= len)",
      "right" : "if (room >= len)",
      "info" : "IfStatement[13122-13294]:IfStatement[13122-13294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13139-13245]:Block[13139-13245]"
    }, {
      "left" : "text.getChars(0, len, _outputBuffer, _outputTail);",
      "right" : "text.getChars(0, len, _outputBuffer, _outputTail);",
      "info" : "ExpressionStatement[13153-13203]:ExpressionStatement[13153-13203]"
    }, {
      "left" : "_outputTail += len;",
      "right" : "_outputTail += len;",
      "info" : "ExpressionStatement[13216-13235]:ExpressionStatement[13216-13235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13251-13294]:Block[13251-13294]"
    }, {
      "left" : "writeRawLong(text);",
      "right" : "writeRawLong(text);",
      "info" : "ExpressionStatement[13265-13284]:ExpressionStatement[13265-13284]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13306-13315]:MarkerAnnotation[13306-13315]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13320-13326]:Modifier[13320-13326]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13327-13331]:PrimitiveType[13327-13331]"
    }, {
      "left" : "writeRaw",
      "right" : "writeRaw",
      "info" : "SimpleName[13332-13340]:SimpleName[13332-13340]"
    }, {
      "left" : "String text",
      "right" : "String text",
      "info" : "SingleVariableDeclaration[13341-13352]:SingleVariableDeclaration[13341-13352]"
    }, {
      "left" : "int start",
      "right" : "int start",
      "info" : "SingleVariableDeclaration[13354-13363]:SingleVariableDeclaration[13354-13363]"
    }, {
      "left" : "int len",
      "right" : "int len",
      "info" : "SingleVariableDeclaration[13365-13372]:SingleVariableDeclaration[13365-13372]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13381-13392]:SimpleType[13381-13392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13397-13899]:Block[13397-13899]"
    }, {
      "left" : "int room = _outputEnd - _outputTail;",
      "right" : "int room = _outputEnd - _outputTail;",
      "info" : "VariableDeclarationStatement[13458-13494]:VariableDeclarationStatement[13458-13494]"
    }, {
      "left" : "if (room < len)",
      "right" : "if (room < len)",
      "info" : "IfStatement[13504-13604]:IfStatement[13504-13604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13520-13604]:Block[13520-13604]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[13534-13549]:ExpressionStatement[13534-13549]"
    }, {
      "left" : "room = _outputEnd - _outputTail;",
      "right" : "room = _outputEnd - _outputTail;",
      "info" : "ExpressionStatement[13562-13594]:ExpressionStatement[13562-13594]"
    }, {
      "left" : "if (room >= len)",
      "right" : "if (room >= len)",
      "info" : "IfStatement[13670-13893]:IfStatement[13670-13893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13687-13803]:Block[13687-13803]"
    }, {
      "left" : "text.getChars(start, start+len, _outputBuffer, _outputTail);",
      "right" : "text.getChars(start, start+len, _outputBuffer, _outputTail);",
      "info" : "ExpressionStatement[13701-13761]:ExpressionStatement[13701-13761]"
    }, {
      "left" : "_outputTail += len;",
      "right" : "_outputTail += len;",
      "info" : "ExpressionStatement[13774-13793]:ExpressionStatement[13774-13793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13809-13893]:Block[13809-13893]"
    }, {
      "left" : "writeRawLong(text.substring(start, start+len));",
      "right" : "writeRawLong(text.substring(start, start+len));",
      "info" : "ExpressionStatement[13836-13883]:ExpressionStatement[13836-13883]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13923-13932]:MarkerAnnotation[13923-13932]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13937-13943]:Modifier[13937-13943]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13944-13948]:PrimitiveType[13944-13948]"
    }, {
      "left" : "writeRaw",
      "right" : "writeRaw",
      "info" : "SimpleName[13949-13957]:SimpleName[13949-13957]"
    }, {
      "left" : "SerializableString text",
      "right" : "SerializableString text",
      "info" : "SingleVariableDeclaration[13958-13981]:SingleVariableDeclaration[13958-13981]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13990-14001]:SimpleType[13990-14001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14002-14044]:Block[14002-14044]"
    }, {
      "left" : "writeRaw(text.getValue());",
      "right" : "writeRaw(text.getValue());",
      "info" : "ExpressionStatement[14012-14038]:ExpressionStatement[14012-14038]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14050-14059]:MarkerAnnotation[14050-14059]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14064-14070]:Modifier[14064-14070]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14071-14075]:PrimitiveType[14071-14075]"
    }, {
      "left" : "writeRaw",
      "right" : "writeRaw",
      "info" : "SimpleName[14076-14084]:SimpleName[14076-14084]"
    }, {
      "left" : "char[] text",
      "right" : "char[] text",
      "info" : "SingleVariableDeclaration[14085-14096]:SingleVariableDeclaration[14085-14096]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[14098-14108]:SingleVariableDeclaration[14098-14108]"
    }, {
      "left" : "int len",
      "right" : "int len",
      "info" : "SingleVariableDeclaration[14110-14117]:SingleVariableDeclaration[14110-14117]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14126-14137]:SimpleType[14126-14137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14142-14615]:Block[14142-14615]"
    }, {
      "left" : "if (len < SHORT_WRITE)",
      "right" : "if (len < SHORT_WRITE)",
      "info" : "IfStatement[14207-14495]:IfStatement[14207-14495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14230-14495]:Block[14230-14495]"
    }, {
      "left" : "int room = _outputEnd - _outputTail;",
      "right" : "int room = _outputEnd - _outputTail;",
      "info" : "VariableDeclarationStatement[14244-14280]:VariableDeclarationStatement[14244-14280]"
    }, {
      "left" : "if (len > room)",
      "right" : "if (len > room)",
      "info" : "IfStatement[14293-14356]:IfStatement[14293-14356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14309-14356]:Block[14309-14356]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[14327-14342]:ExpressionStatement[14327-14342]"
    }, {
      "left" : "System.arraycopy(text, offset, _outputBuffer, _outputTail, len);",
      "right" : "System.arraycopy(text, offset, _outputBuffer, _outputTail, len);",
      "info" : "ExpressionStatement[14369-14433]:ExpressionStatement[14369-14433]"
    }, {
      "left" : "_outputTail += len;",
      "right" : "_outputTail += len;",
      "info" : "ExpressionStatement[14446-14465]:ExpressionStatement[14446-14465]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[14478-14485]:ReturnStatement[14478-14485]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[14552-14567]:ExpressionStatement[14552-14567]"
    }, {
      "left" : "_writer.write(text, offset, len);",
      "right" : "_writer.write(text, offset, len);",
      "info" : "ExpressionStatement[14576-14609]:ExpressionStatement[14576-14609]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14621-14630]:MarkerAnnotation[14621-14630]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14635-14641]:Modifier[14635-14641]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14642-14646]:PrimitiveType[14642-14646]"
    }, {
      "left" : "writeRaw",
      "right" : "writeRaw",
      "info" : "SimpleName[14647-14655]:SimpleName[14647-14655]"
    }, {
      "left" : "char c",
      "right" : "char c",
      "info" : "SingleVariableDeclaration[14656-14662]:SingleVariableDeclaration[14656-14662]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14671-14682]:SimpleType[14671-14682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14687-14815]:Block[14687-14815]"
    }, {
      "left" : "if (_outputTail >= _outputEnd)",
      "right" : "if (_outputTail >= _outputEnd)",
      "info" : "IfStatement[14697-14767]:IfStatement[14697-14767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14728-14767]:Block[14728-14767]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[14742-14757]:ExpressionStatement[14742-14757]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = c;",
      "right" : "_outputBuffer[_outputTail++] = c;",
      "info" : "ExpressionStatement[14776-14809]:ExpressionStatement[14776-14809]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14821-14828]:Modifier[14821-14828]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14829-14833]:PrimitiveType[14829-14833]"
    }, {
      "left" : "writeRawLong",
      "right" : "writeRawLong",
      "info" : "SimpleName[14834-14846]:SimpleName[14834-14846]"
    }, {
      "left" : "String text",
      "right" : "String text",
      "info" : "SingleVariableDeclaration[14847-14858]:SingleVariableDeclaration[14847-14858]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14867-14878]:SimpleType[14867-14878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14883-15624]:Block[14883-15624]"
    }, {
      "left" : "int room = _outputEnd - _outputTail;",
      "right" : "int room = _outputEnd - _outputTail;",
      "info" : "VariableDeclarationStatement[14893-14929]:VariableDeclarationStatement[14893-14929]"
    }, {
      "left" : "text.getChars(0, room, _outputBuffer, _outputTail);",
      "right" : "text.getChars(0, room, _outputBuffer, _outputTail);",
      "info" : "ExpressionStatement[14982-15033]:ExpressionStatement[14982-15033]"
    }, {
      "left" : "_outputTail += room;",
      "right" : "_outputTail += room;",
      "info" : "ExpressionStatement[15042-15062]:ExpressionStatement[15042-15062]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[15071-15086]:ExpressionStatement[15071-15086]"
    }, {
      "left" : "int offset = room;",
      "right" : "int offset = room;",
      "info" : "VariableDeclarationStatement[15095-15113]:VariableDeclarationStatement[15095-15113]"
    }, {
      "left" : "int len = text.length() - room;",
      "right" : "int len = text.length() - room;",
      "info" : "VariableDeclarationStatement[15122-15153]:VariableDeclarationStatement[15122-15153]"
    }, {
      "left" : "while (len > _outputEnd)",
      "right" : "while (len > _outputEnd)",
      "info" : "WhileStatement[15163-15452]:WhileStatement[15163-15452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15188-15452]:Block[15188-15452]"
    }, {
      "left" : "int amount = _outputEnd;",
      "right" : "int amount = _outputEnd;",
      "info" : "VariableDeclarationStatement[15202-15226]:VariableDeclarationStatement[15202-15226]"
    }, {
      "left" : "text.getChars(offset, offset+amount, _outputBuffer, 0);",
      "right" : "text.getChars(offset, offset+amount, _outputBuffer, 0);",
      "info" : "ExpressionStatement[15239-15294]:ExpressionStatement[15239-15294]"
    }, {
      "left" : "_outputHead = 0;",
      "right" : "_outputHead = 0;",
      "info" : "ExpressionStatement[15307-15323]:ExpressionStatement[15307-15323]"
    }, {
      "left" : "_outputTail = amount;",
      "right" : "_outputTail = amount;",
      "info" : "ExpressionStatement[15336-15357]:ExpressionStatement[15336-15357]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[15370-15385]:ExpressionStatement[15370-15385]"
    }, {
      "left" : "offset += amount;",
      "right" : "offset += amount;",
      "info" : "ExpressionStatement[15398-15415]:ExpressionStatement[15398-15415]"
    }, {
      "left" : "len -= amount;",
      "right" : "len -= amount;",
      "info" : "ExpressionStatement[15428-15442]:ExpressionStatement[15428-15442]"
    }, {
      "left" : "text.getChars(offset, offset+len, _outputBuffer, 0);",
      "right" : "text.getChars(offset, offset+len, _outputBuffer, 0);",
      "info" : "ExpressionStatement[15514-15566]:ExpressionStatement[15514-15566]"
    }, {
      "left" : "_outputHead = 0;",
      "right" : "_outputHead = 0;",
      "info" : "ExpressionStatement[15575-15591]:ExpressionStatement[15575-15591]"
    }, {
      "left" : "_outputTail = len;",
      "right" : "_outputTail = len;",
      "info" : "ExpressionStatement[15600-15618]:ExpressionStatement[15600-15618]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15834-15843]:MarkerAnnotation[15834-15843]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15848-15854]:Modifier[15848-15854]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15855-15859]:PrimitiveType[15855-15859]"
    }, {
      "left" : "writeBinary",
      "right" : "writeBinary",
      "info" : "SimpleName[15860-15871]:SimpleName[15860-15871]"
    }, {
      "left" : "Base64Variant b64variant",
      "right" : "Base64Variant b64variant",
      "info" : "SingleVariableDeclaration[15872-15896]:SingleVariableDeclaration[15872-15896]"
    }, {
      "left" : "byte[] data",
      "right" : "byte[] data",
      "info" : "SingleVariableDeclaration[15898-15909]:SingleVariableDeclaration[15898-15909]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[15911-15921]:SingleVariableDeclaration[15911-15921]"
    }, {
      "left" : "int len",
      "right" : "int len",
      "info" : "SingleVariableDeclaration[15923-15930]:SingleVariableDeclaration[15923-15930]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[15947-15958]:SimpleType[15947-15958]"
    }, {
      "left" : "JsonGenerationException",
      "right" : "JsonGenerationException",
      "info" : "SimpleType[15960-15983]:SimpleType[15960-15983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15988-16399]:Block[15988-16399]"
    }, {
      "left" : "_verifyValueWrite(WRITE_BINARY);",
      "right" : "_verifyValueWrite(WRITE_BINARY);",
      "info" : "ExpressionStatement[15998-16030]:ExpressionStatement[15998-16030]"
    }, {
      "left" : "if (_outputTail >= _outputEnd)",
      "right" : "if (_outputTail >= _outputEnd)",
      "info" : "IfStatement[16066-16136]:IfStatement[16066-16136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16097-16136]:Block[16097-16136]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[16111-16126]:ExpressionStatement[16111-16126]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '\"';",
      "right" : "_outputBuffer[_outputTail++] = '\"';",
      "info" : "ExpressionStatement[16145-16180]:ExpressionStatement[16145-16180]"
    }, {
      "left" : "_writeBinary(b64variant, data, offset, offset+len);",
      "right" : "_writeBinary(b64variant, data, offset, offset+len);",
      "info" : "ExpressionStatement[16189-16240]:ExpressionStatement[16189-16240]"
    }, {
      "left" : "if (_outputTail >= _outputEnd)",
      "right" : "if (_outputTail >= _outputEnd)",
      "info" : "IfStatement[16279-16349]:IfStatement[16279-16349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16310-16349]:Block[16310-16349]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[16324-16339]:ExpressionStatement[16324-16339]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '\"';",
      "right" : "_outputBuffer[_outputTail++] = '\"';",
      "info" : "ExpressionStatement[16358-16393]:ExpressionStatement[16358-16393]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[16405-16414]:MarkerAnnotation[16405-16414]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16419-16425]:Modifier[16419-16425]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[16426-16429]:PrimitiveType[16426-16429]"
    }, {
      "left" : "writeBinary",
      "right" : "writeBinary",
      "info" : "SimpleName[16430-16441]:SimpleName[16430-16441]"
    }, {
      "left" : "Base64Variant b64variant",
      "right" : "Base64Variant b64variant",
      "info" : "SingleVariableDeclaration[16442-16466]:SingleVariableDeclaration[16442-16466]"
    }, {
      "left" : "InputStream data",
      "right" : "InputStream data",
      "info" : "SingleVariableDeclaration[16480-16496]:SingleVariableDeclaration[16480-16496]"
    }, {
      "left" : "int dataLength",
      "right" : "int dataLength",
      "info" : "SingleVariableDeclaration[16498-16512]:SingleVariableDeclaration[16498-16512]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[16529-16540]:SimpleType[16529-16540]"
    }, {
      "left" : "JsonGenerationException",
      "right" : "JsonGenerationException",
      "info" : "SimpleType[16542-16565]:SimpleType[16542-16565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16570-17580]:Block[16570-17580]"
    }, {
      "left" : "_verifyValueWrite(WRITE_BINARY);",
      "right" : "_verifyValueWrite(WRITE_BINARY);",
      "info" : "ExpressionStatement[16580-16612]:ExpressionStatement[16580-16612]"
    }, {
      "left" : "if (_outputTail >= _outputEnd)",
      "right" : "if (_outputTail >= _outputEnd)",
      "info" : "IfStatement[16648-16718]:IfStatement[16648-16718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16679-16718]:Block[16679-16718]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[16693-16708]:ExpressionStatement[16693-16708]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '\"';",
      "right" : "_outputBuffer[_outputTail++] = '\"';",
      "info" : "ExpressionStatement[16727-16762]:ExpressionStatement[16727-16762]"
    }, {
      "left" : "byte[] encodingBuffer = _ioContext.allocBase64Buffer();",
      "right" : "byte[] encodingBuffer = _ioContext.allocBase64Buffer();",
      "info" : "VariableDeclarationStatement[16771-16826]:VariableDeclarationStatement[16771-16826]"
    }, {
      "left" : "int bytes;",
      "right" : "int bytes;",
      "info" : "VariableDeclarationStatement[16835-16845]:VariableDeclarationStatement[16835-16845]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16854-17399]:TryStatement[16854-17399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16858-17319]:Block[16858-17319]"
    }, {
      "left" : "if (dataLength < 0)",
      "right" : "if (dataLength < 0)",
      "info" : "IfStatement[16872-17309]:IfStatement[16872-17309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16892-16997]:Block[16892-16997]"
    }, {
      "left" : "bytes = _writeBinary(b64variant, data, encodingBuffer);",
      "right" : "bytes = _writeBinary(b64variant, data, encodingBuffer);",
      "info" : "ExpressionStatement[16928-16983]:ExpressionStatement[16928-16983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17003-17309]:Block[17003-17309]"
    }, {
      "left" : "int missing = _writeBinary(b64variant, data, encodingBuffer, dataLength);",
      "right" : "int missing = _writeBinary(b64variant, data, encodingBuffer, dataLength);",
      "info" : "VariableDeclarationStatement[17021-17094]:VariableDeclarationStatement[17021-17094]"
    }, {
      "left" : "if (missing > 0)",
      "right" : "if (missing > 0)",
      "info" : "IfStatement[17111-17259]:IfStatement[17111-17259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17128-17259]:Block[17128-17259]"
    }, {
      "left" : "_reportError(\"Too few bytes available: missing \"+missing+\" bytes (out of \"+dataLength+\")\");",
      "right" : "_reportError(\"Too few bytes available: missing \"+missing+\" bytes (out of \"+dataLength+\")\");",
      "info" : "ExpressionStatement[17150-17241]:ExpressionStatement[17150-17241]"
    }, {
      "left" : "bytes = dataLength;",
      "right" : "bytes = dataLength;",
      "info" : "ExpressionStatement[17276-17295]:ExpressionStatement[17276-17295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17328-17399]:Block[17328-17399]"
    }, {
      "left" : "_ioContext.releaseBase64Buffer(encodingBuffer);",
      "right" : "_ioContext.releaseBase64Buffer(encodingBuffer);",
      "info" : "ExpressionStatement[17342-17389]:ExpressionStatement[17342-17389]"
    }, {
      "left" : "if (_outputTail >= _outputEnd)",
      "right" : "if (_outputTail >= _outputEnd)",
      "info" : "IfStatement[17438-17508]:IfStatement[17438-17508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17469-17508]:Block[17469-17508]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[17483-17498]:ExpressionStatement[17483-17498]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '\"';",
      "right" : "_outputBuffer[_outputTail++] = '\"';",
      "info" : "ExpressionStatement[17517-17552]:ExpressionStatement[17517-17552]"
    }, {
      "left" : "return bytes;",
      "right" : "return bytes;",
      "info" : "ReturnStatement[17561-17574]:ReturnStatement[17561-17574]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17782-17791]:MarkerAnnotation[17782-17791]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17796-17802]:Modifier[17796-17802]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17803-17807]:PrimitiveType[17803-17807]"
    }, {
      "left" : "writeNumber",
      "right" : "writeNumber",
      "info" : "SimpleName[17808-17819]:SimpleName[17808-17819]"
    }, {
      "left" : "short s",
      "right" : "short s",
      "info" : "SingleVariableDeclaration[17820-17827]:SingleVariableDeclaration[17820-17827]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[17836-17847]:SimpleType[17836-17847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17852-18212]:Block[17852-18212]"
    }, {
      "left" : "_verifyValueWrite(WRITE_NUMBER);",
      "right" : "_verifyValueWrite(WRITE_NUMBER);",
      "info" : "ExpressionStatement[17862-17894]:ExpressionStatement[17862-17894]"
    }, {
      "left" : "if (_cfgNumbersAsStrings)",
      "right" : "if (_cfgNumbersAsStrings)",
      "info" : "IfStatement[17903-17994]:IfStatement[17903-17994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17929-17994]:Block[17929-17994]"
    }, {
      "left" : "_writeQuotedShort(s);",
      "right" : "_writeQuotedShort(s);",
      "info" : "ExpressionStatement[17943-17964]:ExpressionStatement[17943-17964]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[17977-17984]:ReturnStatement[17977-17984]"
    }, {
      "left" : "if ((_outputTail + 6) >= _outputEnd)",
      "right" : "if ((_outputTail + 6) >= _outputEnd)",
      "info" : "IfStatement[18053-18129]:IfStatement[18053-18129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18090-18129]:Block[18090-18129]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[18104-18119]:ExpressionStatement[18104-18119]"
    }, {
      "left" : "_outputTail = NumberOutput.outputInt(s, _outputBuffer, _outputTail);",
      "right" : "_outputTail = NumberOutput.outputInt(s, _outputBuffer, _outputTail);",
      "info" : "ExpressionStatement[18138-18206]:ExpressionStatement[18138-18206]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18218-18225]:Modifier[18218-18225]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18226-18230]:PrimitiveType[18226-18230]"
    }, {
      "left" : "_writeQuotedShort",
      "right" : "_writeQuotedShort",
      "info" : "SimpleName[18231-18248]:SimpleName[18231-18248]"
    }, {
      "left" : "short s",
      "right" : "short s",
      "info" : "SingleVariableDeclaration[18249-18256]:SingleVariableDeclaration[18249-18256]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[18265-18276]:SimpleType[18265-18276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18277-18534]:Block[18277-18534]"
    }, {
      "left" : "if ((_outputTail + 8) >= _outputEnd)",
      "right" : "if ((_outputTail + 8) >= _outputEnd)",
      "info" : "IfStatement[18287-18363]:IfStatement[18287-18363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18324-18363]:Block[18324-18363]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[18338-18353]:ExpressionStatement[18338-18353]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '\"';",
      "right" : "_outputBuffer[_outputTail++] = '\"';",
      "info" : "ExpressionStatement[18372-18407]:ExpressionStatement[18372-18407]"
    }, {
      "left" : "_outputTail = NumberOutput.outputInt(s, _outputBuffer, _outputTail);",
      "right" : "_outputTail = NumberOutput.outputInt(s, _outputBuffer, _outputTail);",
      "info" : "ExpressionStatement[18416-18484]:ExpressionStatement[18416-18484]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '\"';",
      "right" : "_outputBuffer[_outputTail++] = '\"';",
      "info" : "ExpressionStatement[18493-18528]:ExpressionStatement[18493-18528]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18544-18553]:MarkerAnnotation[18544-18553]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18558-18564]:Modifier[18558-18564]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18565-18569]:PrimitiveType[18565-18569]"
    }, {
      "left" : "writeNumber",
      "right" : "writeNumber",
      "info" : "SimpleName[18570-18581]:SimpleName[18570-18581]"
    }, {
      "left" : "int i",
      "right" : "int i",
      "info" : "SingleVariableDeclaration[18582-18587]:SingleVariableDeclaration[18582-18587]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[18596-18607]:SimpleType[18596-18607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18612-18972]:Block[18612-18972]"
    }, {
      "left" : "_verifyValueWrite(WRITE_NUMBER);",
      "right" : "_verifyValueWrite(WRITE_NUMBER);",
      "info" : "ExpressionStatement[18622-18654]:ExpressionStatement[18622-18654]"
    }, {
      "left" : "if (_cfgNumbersAsStrings)",
      "right" : "if (_cfgNumbersAsStrings)",
      "info" : "IfStatement[18663-18752]:IfStatement[18663-18752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18689-18752]:Block[18689-18752]"
    }, {
      "left" : "_writeQuotedInt(i);",
      "right" : "_writeQuotedInt(i);",
      "info" : "ExpressionStatement[18703-18722]:ExpressionStatement[18703-18722]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[18735-18742]:ReturnStatement[18735-18742]"
    }, {
      "left" : "if ((_outputTail + 11) >= _outputEnd)",
      "right" : "if ((_outputTail + 11) >= _outputEnd)",
      "info" : "IfStatement[18812-18889]:IfStatement[18812-18889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18850-18889]:Block[18850-18889]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[18864-18879]:ExpressionStatement[18864-18879]"
    }, {
      "left" : "_outputTail = NumberOutput.outputInt(i, _outputBuffer, _outputTail);",
      "right" : "_outputTail = NumberOutput.outputInt(i, _outputBuffer, _outputTail);",
      "info" : "ExpressionStatement[18898-18966]:ExpressionStatement[18898-18966]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18978-18985]:Modifier[18978-18985]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18986-18990]:PrimitiveType[18986-18990]"
    }, {
      "left" : "_writeQuotedInt",
      "right" : "_writeQuotedInt",
      "info" : "SimpleName[18991-19006]:SimpleName[18991-19006]"
    }, {
      "left" : "int i",
      "right" : "int i",
      "info" : "SingleVariableDeclaration[19007-19012]:SingleVariableDeclaration[19007-19012]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[19021-19032]:SimpleType[19021-19032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19033-19291]:Block[19033-19291]"
    }, {
      "left" : "if ((_outputTail + 13) >= _outputEnd)",
      "right" : "if ((_outputTail + 13) >= _outputEnd)",
      "info" : "IfStatement[19043-19120]:IfStatement[19043-19120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19081-19120]:Block[19081-19120]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[19095-19110]:ExpressionStatement[19095-19110]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '\"';",
      "right" : "_outputBuffer[_outputTail++] = '\"';",
      "info" : "ExpressionStatement[19129-19164]:ExpressionStatement[19129-19164]"
    }, {
      "left" : "_outputTail = NumberOutput.outputInt(i, _outputBuffer, _outputTail);",
      "right" : "_outputTail = NumberOutput.outputInt(i, _outputBuffer, _outputTail);",
      "info" : "ExpressionStatement[19173-19241]:ExpressionStatement[19173-19241]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '\"';",
      "right" : "_outputBuffer[_outputTail++] = '\"';",
      "info" : "ExpressionStatement[19250-19285]:ExpressionStatement[19250-19285]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19301-19310]:MarkerAnnotation[19301-19310]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19315-19321]:Modifier[19315-19321]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19322-19326]:PrimitiveType[19322-19326]"
    }, {
      "left" : "writeNumber",
      "right" : "writeNumber",
      "info" : "SimpleName[19327-19338]:SimpleName[19327-19338]"
    }, {
      "left" : "long l",
      "right" : "long l",
      "info" : "SingleVariableDeclaration[19339-19345]:SingleVariableDeclaration[19339-19345]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[19354-19365]:SimpleType[19354-19365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19370-19724]:Block[19370-19724]"
    }, {
      "left" : "_verifyValueWrite(WRITE_NUMBER);",
      "right" : "_verifyValueWrite(WRITE_NUMBER);",
      "info" : "ExpressionStatement[19380-19412]:ExpressionStatement[19380-19412]"
    }, {
      "left" : "if (_cfgNumbersAsStrings)",
      "right" : "if (_cfgNumbersAsStrings)",
      "info" : "IfStatement[19421-19511]:IfStatement[19421-19511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19447-19511]:Block[19447-19511]"
    }, {
      "left" : "_writeQuotedLong(l);",
      "right" : "_writeQuotedLong(l);",
      "info" : "ExpressionStatement[19461-19481]:ExpressionStatement[19461-19481]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[19494-19501]:ReturnStatement[19494-19501]"
    }, {
      "left" : "if ((_outputTail + 21) >= _outputEnd)",
      "right" : "if ((_outputTail + 21) >= _outputEnd)",
      "info" : "IfStatement[19520-19640]:IfStatement[19520-19640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19558-19640]:Block[19558-19640]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[19615-19630]:ExpressionStatement[19615-19630]"
    }, {
      "left" : "_outputTail = NumberOutput.outputLong(l, _outputBuffer, _outputTail);",
      "right" : "_outputTail = NumberOutput.outputLong(l, _outputBuffer, _outputTail);",
      "info" : "ExpressionStatement[19649-19718]:ExpressionStatement[19649-19718]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19730-19737]:Modifier[19730-19737]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19738-19742]:PrimitiveType[19738-19742]"
    }, {
      "left" : "_writeQuotedLong",
      "right" : "_writeQuotedLong",
      "info" : "SimpleName[19743-19759]:SimpleName[19743-19759]"
    }, {
      "left" : "long l",
      "right" : "long l",
      "info" : "SingleVariableDeclaration[19760-19766]:SingleVariableDeclaration[19760-19766]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[19775-19786]:SimpleType[19775-19786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19787-20046]:Block[19787-20046]"
    }, {
      "left" : "if ((_outputTail + 23) >= _outputEnd)",
      "right" : "if ((_outputTail + 23) >= _outputEnd)",
      "info" : "IfStatement[19797-19874]:IfStatement[19797-19874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19835-19874]:Block[19835-19874]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[19849-19864]:ExpressionStatement[19849-19864]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '\"';",
      "right" : "_outputBuffer[_outputTail++] = '\"';",
      "info" : "ExpressionStatement[19883-19918]:ExpressionStatement[19883-19918]"
    }, {
      "left" : "_outputTail = NumberOutput.outputLong(l, _outputBuffer, _outputTail);",
      "right" : "_outputTail = NumberOutput.outputLong(l, _outputBuffer, _outputTail);",
      "info" : "ExpressionStatement[19927-19996]:ExpressionStatement[19927-19996]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '\"';",
      "right" : "_outputBuffer[_outputTail++] = '\"';",
      "info" : "ExpressionStatement[20005-20040]:ExpressionStatement[20005-20040]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20112-20121]:MarkerAnnotation[20112-20121]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20126-20132]:Modifier[20126-20132]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20133-20137]:PrimitiveType[20133-20137]"
    }, {
      "left" : "writeNumber",
      "right" : "writeNumber",
      "info" : "SimpleName[20138-20149]:SimpleName[20138-20149]"
    }, {
      "left" : "BigInteger value",
      "right" : "BigInteger value",
      "info" : "SingleVariableDeclaration[20150-20166]:SingleVariableDeclaration[20150-20166]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[20175-20186]:SimpleType[20175-20186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20191-20451]:Block[20191-20451]"
    }, {
      "left" : "_verifyValueWrite(WRITE_NUMBER);",
      "right" : "_verifyValueWrite(WRITE_NUMBER);",
      "info" : "ExpressionStatement[20201-20233]:ExpressionStatement[20201-20233]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[20242-20445]:IfStatement[20242-20445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20261-20298]:Block[20261-20298]"
    }, {
      "left" : "_writeNull();",
      "right" : "_writeNull();",
      "info" : "ExpressionStatement[20275-20288]:ExpressionStatement[20275-20288]"
    }, {
      "left" : "if (_cfgNumbersAsStrings)",
      "right" : "if (_cfgNumbersAsStrings)",
      "info" : "IfStatement[20304-20445]:IfStatement[20304-20445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20330-20388]:Block[20330-20388]"
    }, {
      "left" : "_writeQuotedRaw(value.toString());",
      "right" : "_writeQuotedRaw(value.toString());",
      "info" : "ExpressionStatement[20344-20378]:ExpressionStatement[20344-20378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20394-20445]:Block[20394-20445]"
    }, {
      "left" : "writeRaw(value.toString());",
      "right" : "writeRaw(value.toString());",
      "info" : "ExpressionStatement[20408-20435]:ExpressionStatement[20408-20435]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20462-20471]:MarkerAnnotation[20462-20471]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20476-20482]:Modifier[20476-20482]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20483-20487]:PrimitiveType[20483-20487]"
    }, {
      "left" : "writeNumber",
      "right" : "writeNumber",
      "info" : "SimpleName[20488-20499]:SimpleName[20488-20499]"
    }, {
      "left" : "double d",
      "right" : "double d",
      "info" : "SingleVariableDeclaration[20500-20508]:SingleVariableDeclaration[20500-20508]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[20517-20528]:SimpleType[20517-20528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20533-20927]:Block[20533-20927]"
    }, {
      "left" : "if (_cfgNumbersAsStrings ||\n            // [JACKSON-139]\n                (isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS) && ((Double.isNaN(d) || Double.isInfinite(d)))))",
      "right" : "if (_cfgNumbersAsStrings ||\n            // [JACKSON-139]\n                (isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS) && ((Double.isNaN(d) || Double.isInfinite(d)))))",
      "info" : "IfStatement[20543-20786]:IfStatement[20543-20786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20711-20786]:Block[20711-20786]"
    }, {
      "left" : "writeString(String.valueOf(d));",
      "right" : "writeString(String.valueOf(d));",
      "info" : "ExpressionStatement[20725-20756]:ExpressionStatement[20725-20756]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[20769-20776]:ReturnStatement[20769-20776]"
    }, {
      "left" : "_verifyValueWrite(WRITE_NUMBER);",
      "right" : "_verifyValueWrite(WRITE_NUMBER);",
      "info" : "ExpressionStatement[20852-20884]:ExpressionStatement[20852-20884]"
    }, {
      "left" : "writeRaw(String.valueOf(d));",
      "right" : "writeRaw(String.valueOf(d));",
      "info" : "ExpressionStatement[20893-20921]:ExpressionStatement[20893-20921]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20933-20942]:MarkerAnnotation[20933-20942]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20947-20953]:Modifier[20947-20953]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20954-20958]:PrimitiveType[20954-20958]"
    }, {
      "left" : "writeNumber",
      "right" : "writeNumber",
      "info" : "SimpleName[20959-20970]:SimpleName[20959-20970]"
    }, {
      "left" : "float f",
      "right" : "float f",
      "info" : "SingleVariableDeclaration[20971-20978]:SingleVariableDeclaration[20971-20978]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[20987-20998]:SimpleType[20987-20998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21003-21384]:Block[21003-21384]"
    }, {
      "left" : "if (_cfgNumbersAsStrings ||\n            // [JACKSON-139]\n                (isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS) && ((Float.isNaN(f) || Float.isInfinite(f)))))",
      "right" : "if (_cfgNumbersAsStrings ||\n            // [JACKSON-139]\n                (isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS) && ((Float.isNaN(f) || Float.isInfinite(f)))))",
      "info" : "IfStatement[21013-21254]:IfStatement[21013-21254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21179-21254]:Block[21179-21254]"
    }, {
      "left" : "writeString(String.valueOf(f));",
      "right" : "writeString(String.valueOf(f));",
      "info" : "ExpressionStatement[21193-21224]:ExpressionStatement[21193-21224]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[21237-21244]:ReturnStatement[21237-21244]"
    }, {
      "left" : "_verifyValueWrite(WRITE_NUMBER);",
      "right" : "_verifyValueWrite(WRITE_NUMBER);",
      "info" : "ExpressionStatement[21309-21341]:ExpressionStatement[21309-21341]"
    }, {
      "left" : "writeRaw(String.valueOf(f));",
      "right" : "writeRaw(String.valueOf(f));",
      "info" : "ExpressionStatement[21350-21378]:ExpressionStatement[21350-21378]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21390-21399]:MarkerAnnotation[21390-21399]"
    }, {
      "left" : "BigDecimal value",
      "right" : "BigDecimal value",
      "info" : "SingleVariableDeclaration[21428-21444]:SingleVariableDeclaration[21428-21444]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[21453-21464]:SimpleType[21453-21464]"
    }, {
      "left" : "_verifyValueWrite(WRITE_NUMBER);",
      "right" : "_verifyValueWrite(WRITE_NUMBER);",
      "info" : "ExpressionStatement[21554-21586]:ExpressionStatement[21554-21586]"
    }, {
      "left" : "value == null",
      "right" : "value == null",
      "info" : "InfixExpression[21599-21612]:InfixExpression[21599-21612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21614-21651]:Block[21614-21651]"
    }, {
      "left" : "_writeNull();",
      "right" : "_writeNull();",
      "info" : "ExpressionStatement[21628-21641]:ExpressionStatement[21628-21641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21961-22012]:Block[21748-21799]"
    }, {
      "left" : "writeRaw(_asString(value));",
      "right" : "writeRaw(_asString(value));",
      "info" : "ExpressionStatement[21975-22002]:ExpressionStatement[21762-21789]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22024-22033]:MarkerAnnotation[21811-21820]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22038-22044]:Modifier[21825-21831]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22045-22049]:PrimitiveType[21832-21836]"
    }, {
      "left" : "writeNumber",
      "right" : "writeNumber",
      "info" : "SimpleName[22050-22061]:SimpleName[21837-21848]"
    }, {
      "left" : "String encodedValue",
      "right" : "String encodedValue",
      "info" : "SingleVariableDeclaration[22062-22081]:SingleVariableDeclaration[21849-21868]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[22090-22101]:SimpleType[21877-21888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22106-22296]:Block[21893-22083]"
    }, {
      "left" : "_verifyValueWrite(WRITE_NUMBER);",
      "right" : "_verifyValueWrite(WRITE_NUMBER);",
      "info" : "ExpressionStatement[22116-22148]:ExpressionStatement[21903-21935]"
    }, {
      "left" : "if (_cfgNumbersAsStrings)",
      "right" : "if (_cfgNumbersAsStrings)",
      "info" : "IfStatement[22157-22290]:IfStatement[21944-22077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22183-22237]:Block[21970-22024]"
    }, {
      "left" : "_writeQuotedRaw(encodedValue);",
      "right" : "_writeQuotedRaw(encodedValue);",
      "info" : "ExpressionStatement[22197-22227]:ExpressionStatement[21984-22014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22243-22290]:Block[22030-22077]"
    }, {
      "left" : "writeRaw(encodedValue);",
      "right" : "writeRaw(encodedValue);",
      "info" : "ExpressionStatement[22257-22280]:ExpressionStatement[22044-22067]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22302-22309]:Modifier[22089-22096]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22310-22314]:PrimitiveType[22097-22101]"
    }, {
      "left" : "_writeQuotedRaw",
      "right" : "_writeQuotedRaw",
      "info" : "SimpleName[22315-22330]:SimpleName[22102-22117]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[22331-22343]:SingleVariableDeclaration[22118-22130]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[22352-22363]:SimpleType[22139-22150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22368-22646]:Block[22155-22433]"
    }, {
      "left" : "if (_outputTail >= _outputEnd)",
      "right" : "if (_outputTail >= _outputEnd)",
      "info" : "IfStatement[22378-22448]:IfStatement[22165-22235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22409-22448]:Block[22196-22235]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[22423-22438]:ExpressionStatement[22210-22225]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '\"';",
      "right" : "_outputBuffer[_outputTail++] = '\"';",
      "info" : "ExpressionStatement[22457-22492]:ExpressionStatement[22244-22279]"
    }, {
      "left" : "writeRaw(value);",
      "right" : "writeRaw(value);",
      "info" : "ExpressionStatement[22501-22517]:ExpressionStatement[22288-22304]"
    }, {
      "left" : "if (_outputTail >= _outputEnd)",
      "right" : "if (_outputTail >= _outputEnd)",
      "info" : "IfStatement[22526-22596]:IfStatement[22313-22383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22557-22596]:Block[22344-22383]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[22571-22586]:ExpressionStatement[22358-22373]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '\"';",
      "right" : "_outputBuffer[_outputTail++] = '\"';",
      "info" : "ExpressionStatement[22605-22640]:ExpressionStatement[22392-22427]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22656-22665]:MarkerAnnotation[22443-22452]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22670-22676]:Modifier[22457-22463]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22677-22681]:PrimitiveType[22464-22468]"
    }, {
      "left" : "writeBoolean",
      "right" : "writeBoolean",
      "info" : "SimpleName[22682-22694]:SimpleName[22469-22481]"
    }, {
      "left" : "boolean state",
      "right" : "boolean state",
      "info" : "SingleVariableDeclaration[22695-22708]:SingleVariableDeclaration[22482-22495]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[22717-22728]:SimpleType[22504-22515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22733-23277]:Block[22520-23064]"
    }, {
      "left" : "_verifyValueWrite(WRITE_BOOLEAN);",
      "right" : "_verifyValueWrite(WRITE_BOOLEAN);",
      "info" : "ExpressionStatement[22743-22776]:ExpressionStatement[22530-22563]"
    }, {
      "left" : "if ((_outputTail + 5) >= _outputEnd)",
      "right" : "if ((_outputTail + 5) >= _outputEnd)",
      "info" : "IfStatement[22785-22861]:IfStatement[22572-22648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22822-22861]:Block[22609-22648]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[22836-22851]:ExpressionStatement[22623-22638]"
    }, {
      "left" : "int ptr = _outputTail;",
      "right" : "int ptr = _outputTail;",
      "info" : "VariableDeclarationStatement[22870-22892]:VariableDeclarationStatement[22657-22679]"
    }, {
      "left" : "char[] buf = _outputBuffer;",
      "right" : "char[] buf = _outputBuffer;",
      "info" : "VariableDeclarationStatement[22901-22928]:VariableDeclarationStatement[22688-22715]"
    }, {
      "left" : "if (state)",
      "right" : "if (state)",
      "info" : "IfStatement[22937-23242]:IfStatement[22724-23029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22948-23077]:Block[22735-22864]"
    }, {
      "left" : "buf[ptr] = 't';",
      "right" : "buf[ptr] = 't';",
      "info" : "ExpressionStatement[22962-22977]:ExpressionStatement[22749-22764]"
    }, {
      "left" : "buf[++ptr] = 'r';",
      "right" : "buf[++ptr] = 'r';",
      "info" : "ExpressionStatement[22990-23007]:ExpressionStatement[22777-22794]"
    }, {
      "left" : "buf[++ptr] = 'u';",
      "right" : "buf[++ptr] = 'u';",
      "info" : "ExpressionStatement[23020-23037]:ExpressionStatement[22807-22824]"
    }, {
      "left" : "buf[++ptr] = 'e';",
      "right" : "buf[++ptr] = 'e';",
      "info" : "ExpressionStatement[23050-23067]:ExpressionStatement[22837-22854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23083-23242]:Block[22870-23029]"
    }, {
      "left" : "buf[ptr] = 'f';",
      "right" : "buf[ptr] = 'f';",
      "info" : "ExpressionStatement[23097-23112]:ExpressionStatement[22884-22899]"
    }, {
      "left" : "buf[++ptr] = 'a';",
      "right" : "buf[++ptr] = 'a';",
      "info" : "ExpressionStatement[23125-23142]:ExpressionStatement[22912-22929]"
    }, {
      "left" : "buf[++ptr] = 'l';",
      "right" : "buf[++ptr] = 'l';",
      "info" : "ExpressionStatement[23155-23172]:ExpressionStatement[22942-22959]"
    }, {
      "left" : "buf[++ptr] = 's';",
      "right" : "buf[++ptr] = 's';",
      "info" : "ExpressionStatement[23185-23202]:ExpressionStatement[22972-22989]"
    }, {
      "left" : "buf[++ptr] = 'e';",
      "right" : "buf[++ptr] = 'e';",
      "info" : "ExpressionStatement[23215-23232]:ExpressionStatement[23002-23019]"
    }, {
      "left" : "_outputTail = ptr+1;",
      "right" : "_outputTail = ptr+1;",
      "info" : "ExpressionStatement[23251-23271]:ExpressionStatement[23038-23058]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[23283-23292]:MarkerAnnotation[23070-23079]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23297-23303]:Modifier[23084-23090]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23304-23308]:PrimitiveType[23091-23095]"
    }, {
      "left" : "writeNull",
      "right" : "writeNull",
      "info" : "SimpleName[23309-23318]:SimpleName[23096-23105]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[23328-23339]:SimpleType[23115-23126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23340-23408]:Block[23127-23195]"
    }, {
      "left" : "_verifyValueWrite(WRITE_NULL);",
      "right" : "_verifyValueWrite(WRITE_NULL);",
      "info" : "ExpressionStatement[23350-23380]:ExpressionStatement[23137-23167]"
    }, {
      "left" : "_writeNull();",
      "right" : "_writeNull();",
      "info" : "ExpressionStatement[23389-23402]:ExpressionStatement[23176-23189]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[23599-23608]:MarkerAnnotation[23386-23395]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[23613-23622]:Modifier[23400-23409]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23623-23627]:PrimitiveType[23410-23414]"
    }, {
      "left" : "_verifyValueWrite",
      "right" : "_verifyValueWrite",
      "info" : "SimpleName[23628-23645]:SimpleName[23415-23432]"
    }, {
      "left" : "String typeMsg",
      "right" : "String typeMsg",
      "info" : "SingleVariableDeclaration[23646-23660]:SingleVariableDeclaration[23433-23447]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[23669-23680]:SimpleType[23456-23467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23685-24747]:Block[23472-24534]"
    }, {
      "left" : "if (_cfgPrettyPrinter != null)",
      "right" : "if (_cfgPrettyPrinter != null)",
      "info" : "IfStatement[23695-23864]:IfStatement[23482-23651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23726-23864]:Block[23513-23651]"
    }, {
      "left" : "_verifyPrettyValueWrite(typeMsg);",
      "right" : "_verifyPrettyValueWrite(typeMsg);",
      "info" : "ExpressionStatement[23801-23834]:ExpressionStatement[23588-23621]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[23847-23854]:ReturnStatement[23634-23641]"
    }, {
      "left" : "char c;",
      "right" : "char c;",
      "info" : "VariableDeclarationStatement[23873-23880]:VariableDeclarationStatement[23660-23667]"
    }, {
      "left" : "final int status = _writeContext.writeValue();",
      "right" : "final int status = _writeContext.writeValue();",
      "info" : "VariableDeclarationStatement[23889-23935]:VariableDeclarationStatement[23676-23722]"
    }, {
      "left" : "if (status == JsonWriteContext.STATUS_EXPECT_NAME)",
      "right" : "if (status == JsonWriteContext.STATUS_EXPECT_NAME)",
      "info" : "IfStatement[23944-24077]:IfStatement[23731-23864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23995-24077]:Block[23782-23864]"
    }, {
      "left" : "_reportError(\"Can not \"+typeMsg+\", expecting field name\");",
      "right" : "_reportError(\"Can not \"+typeMsg+\", expecting field name\");",
      "info" : "ExpressionStatement[24009-24067]:ExpressionStatement[23796-23854]"
    }, {
      "left" : "switch (status) {\n        case JsonWriteContext.STATUS_OK_AFTER_COMMA:\n            c = ',';\n            break;\n        case JsonWriteContext.STATUS_OK_AFTER_COLON:\n            c = ':';\n            break;\n        case JsonWriteContext.STATUS_OK_AFTER_SPACE: // root-value separator\n            if (_rootValueSeparator != null) {\n                writeRaw(_rootValueSeparator.getValue());\n            }\n            return;\n        case JsonWriteContext.STATUS_OK_AS_IS:\n        default:\n            return;\n        }",
      "right" : "switch (status) {\n        case JsonWriteContext.STATUS_OK_AFTER_COMMA:\n            c = ',';\n            break;\n        case JsonWriteContext.STATUS_OK_AFTER_COLON:\n            c = ':';\n            break;\n        case JsonWriteContext.STATUS_OK_AFTER_SPACE: // root-value separator\n            if (_rootValueSeparator != null) {\n                writeRaw(_rootValueSeparator.getValue());\n            }\n            return;\n        case JsonWriteContext.STATUS_OK_AS_IS:\n        default:\n            return;\n        }",
      "info" : "SwitchStatement[24086-24599]:SwitchStatement[23873-24386]"
    }, {
      "left" : "case JsonWriteContext.STATUS_OK_AFTER_COMMA:",
      "right" : "case JsonWriteContext.STATUS_OK_AFTER_COMMA:",
      "info" : "SwitchCase[24112-24156]:SwitchCase[23899-23943]"
    }, {
      "left" : "c = ',';",
      "right" : "c = ',';",
      "info" : "ExpressionStatement[24169-24177]:ExpressionStatement[23956-23964]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24190-24196]:BreakStatement[23977-23983]"
    }, {
      "left" : "case JsonWriteContext.STATUS_OK_AFTER_COLON:",
      "right" : "case JsonWriteContext.STATUS_OK_AFTER_COLON:",
      "info" : "SwitchCase[24205-24249]:SwitchCase[23992-24036]"
    }, {
      "left" : "c = ':';",
      "right" : "c = ':';",
      "info" : "ExpressionStatement[24262-24270]:ExpressionStatement[24049-24057]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24283-24289]:BreakStatement[24070-24076]"
    }, {
      "left" : "case JsonWriteContext.STATUS_OK_AFTER_SPACE:",
      "right" : "case JsonWriteContext.STATUS_OK_AFTER_SPACE:",
      "info" : "SwitchCase[24298-24342]:SwitchCase[24085-24129]"
    }, {
      "left" : "if (_rootValueSeparator != null)",
      "right" : "if (_rootValueSeparator != null)",
      "info" : "IfStatement[24379-24485]:IfStatement[24166-24272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24412-24485]:Block[24199-24272]"
    }, {
      "left" : "writeRaw(_rootValueSeparator.getValue());",
      "right" : "writeRaw(_rootValueSeparator.getValue());",
      "info" : "ExpressionStatement[24430-24471]:ExpressionStatement[24217-24258]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[24498-24505]:ReturnStatement[24285-24292]"
    }, {
      "left" : "case JsonWriteContext.STATUS_OK_AS_IS:",
      "right" : "case JsonWriteContext.STATUS_OK_AS_IS:",
      "info" : "SwitchCase[24514-24552]:SwitchCase[24301-24339]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[24561-24569]:SwitchCase[24348-24356]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[24582-24589]:ReturnStatement[24369-24376]"
    }, {
      "left" : "if (_outputTail >= _outputEnd)",
      "right" : "if (_outputTail >= _outputEnd)",
      "info" : "IfStatement[24608-24678]:IfStatement[24395-24465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24639-24678]:Block[24426-24465]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[24653-24668]:ExpressionStatement[24440-24455]"
    }, {
      "left" : "_outputBuffer[_outputTail] = c;",
      "right" : "_outputBuffer[_outputTail] = c;",
      "info" : "ExpressionStatement[24687-24718]:ExpressionStatement[24474-24505]"
    }, {
      "left" : "++_outputTail;",
      "right" : "++_outputTail;",
      "info" : "ExpressionStatement[24727-24741]:ExpressionStatement[24514-24528]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[24753-24762]:Modifier[24540-24549]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24763-24767]:PrimitiveType[24550-24554]"
    }, {
      "left" : "_verifyPrettyValueWrite",
      "right" : "_verifyPrettyValueWrite",
      "info" : "SimpleName[24768-24791]:SimpleName[24555-24578]"
    }, {
      "left" : "String typeMsg",
      "right" : "String typeMsg",
      "info" : "SingleVariableDeclaration[24792-24806]:SingleVariableDeclaration[24579-24593]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[24815-24826]:SimpleType[24602-24613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24831-25959]:Block[24618-25746]"
    }, {
      "left" : "final int status = _writeContext.writeValue();",
      "right" : "final int status = _writeContext.writeValue();",
      "info" : "VariableDeclarationStatement[24841-24887]:VariableDeclarationStatement[24628-24674]"
    }, {
      "left" : "if (status == JsonWriteContext.STATUS_EXPECT_NAME)",
      "right" : "if (status == JsonWriteContext.STATUS_EXPECT_NAME)",
      "info" : "IfStatement[24896-25029]:IfStatement[24683-24816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24947-25029]:Block[24734-24816]"
    }, {
      "left" : "_reportError(\"Can not \"+typeMsg+\", expecting field name\");",
      "right" : "_reportError(\"Can not \"+typeMsg+\", expecting field name\");",
      "info" : "ExpressionStatement[24961-25019]:ExpressionStatement[24748-24806]"
    }, {
      "left" : "switch (status) {\n        case JsonWriteContext.STATUS_OK_AFTER_COMMA: // array\n            _cfgPrettyPrinter.writeArrayValueSeparator(this);\n            break;\n        case JsonWriteContext.STATUS_OK_AFTER_COLON:\n            _cfgPrettyPrinter.writeObjectFieldValueSeparator(this);\n            break;\n        case JsonWriteContext.STATUS_OK_AFTER_SPACE:\n            _cfgPrettyPrinter.writeRootValueSeparator(this);\n            break;\n        case JsonWriteContext.STATUS_OK_AS_IS:\n            // First entry, but of which context?\n            if (_writeContext.inArray()) {\n                _cfgPrettyPrinter.beforeArrayValues(this);\n            } else if (_writeContext.inObject()) {\n                _cfgPrettyPrinter.beforeObjectEntries(this);\n            }\n            break;\n        default:\n            _throwInternal();\n            break;\n        }",
      "right" : "switch (status) {\n        case JsonWriteContext.STATUS_OK_AFTER_COMMA: // array\n            _cfgPrettyPrinter.writeArrayValueSeparator(this);\n            break;\n        case JsonWriteContext.STATUS_OK_AFTER_COLON:\n            _cfgPrettyPrinter.writeObjectFieldValueSeparator(this);\n            break;\n        case JsonWriteContext.STATUS_OK_AFTER_SPACE:\n            _cfgPrettyPrinter.writeRootValueSeparator(this);\n            break;\n        case JsonWriteContext.STATUS_OK_AS_IS:\n            // First entry, but of which context?\n            if (_writeContext.inArray()) {\n                _cfgPrettyPrinter.beforeArrayValues(this);\n            } else if (_writeContext.inObject()) {\n                _cfgPrettyPrinter.beforeObjectEntries(this);\n            }\n            break;\n        default:\n            _throwInternal();\n            break;\n        }",
      "info" : "SwitchStatement[25100-25953]:SwitchStatement[24887-25740]"
    }, {
      "left" : "case JsonWriteContext.STATUS_OK_AFTER_COMMA:",
      "right" : "case JsonWriteContext.STATUS_OK_AFTER_COMMA:",
      "info" : "SwitchCase[25126-25170]:SwitchCase[24913-24957]"
    }, {
      "left" : "_cfgPrettyPrinter.writeArrayValueSeparator(this);",
      "right" : "_cfgPrettyPrinter.writeArrayValueSeparator(this);",
      "info" : "ExpressionStatement[25192-25241]:ExpressionStatement[24979-25028]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25254-25260]:BreakStatement[25041-25047]"
    }, {
      "left" : "case JsonWriteContext.STATUS_OK_AFTER_COLON:",
      "right" : "case JsonWriteContext.STATUS_OK_AFTER_COLON:",
      "info" : "SwitchCase[25269-25313]:SwitchCase[25056-25100]"
    }, {
      "left" : "_cfgPrettyPrinter.writeObjectFieldValueSeparator(this);",
      "right" : "_cfgPrettyPrinter.writeObjectFieldValueSeparator(this);",
      "info" : "ExpressionStatement[25326-25381]:ExpressionStatement[25113-25168]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25394-25400]:BreakStatement[25181-25187]"
    }, {
      "left" : "case JsonWriteContext.STATUS_OK_AFTER_SPACE:",
      "right" : "case JsonWriteContext.STATUS_OK_AFTER_SPACE:",
      "info" : "SwitchCase[25409-25453]:SwitchCase[25196-25240]"
    }, {
      "left" : "_cfgPrettyPrinter.writeRootValueSeparator(this);",
      "right" : "_cfgPrettyPrinter.writeRootValueSeparator(this);",
      "info" : "ExpressionStatement[25466-25514]:ExpressionStatement[25253-25301]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25527-25533]:BreakStatement[25314-25320]"
    }, {
      "left" : "case JsonWriteContext.STATUS_OK_AS_IS:",
      "right" : "case JsonWriteContext.STATUS_OK_AS_IS:",
      "info" : "SwitchCase[25542-25580]:SwitchCase[25329-25367]"
    }, {
      "left" : "if (_writeContext.inArray())",
      "right" : "if (_writeContext.inArray())",
      "info" : "IfStatement[25643-25858]:IfStatement[25430-25645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25672-25746]:Block[25459-25533]"
    }, {
      "left" : "_cfgPrettyPrinter.beforeArrayValues(this);",
      "right" : "_cfgPrettyPrinter.beforeArrayValues(this);",
      "info" : "ExpressionStatement[25690-25732]:ExpressionStatement[25477-25519]"
    }, {
      "left" : "if (_writeContext.inObject())",
      "right" : "if (_writeContext.inObject())",
      "info" : "IfStatement[25752-25858]:IfStatement[25539-25645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25782-25858]:Block[25569-25645]"
    }, {
      "left" : "_cfgPrettyPrinter.beforeObjectEntries(this);",
      "right" : "_cfgPrettyPrinter.beforeObjectEntries(this);",
      "info" : "ExpressionStatement[25800-25844]:ExpressionStatement[25587-25631]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25871-25877]:BreakStatement[25658-25664]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[25886-25894]:SwitchCase[25673-25681]"
    }, {
      "left" : "_throwInternal();",
      "right" : "_throwInternal();",
      "info" : "ExpressionStatement[25907-25924]:ExpressionStatement[25694-25711]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25937-25943]:BreakStatement[25724-25730]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26142-26151]:MarkerAnnotation[25929-25938]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26156-26162]:Modifier[25943-25949]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26163-26167]:PrimitiveType[25950-25954]"
    }, {
      "left" : "flush",
      "right" : "flush",
      "info" : "SimpleName[26168-26173]:SimpleName[25955-25960]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[26183-26194]:SimpleType[25970-25981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26199-26379]:Block[25986-26166]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[26209-26224]:ExpressionStatement[25996-26011]"
    }, {
      "left" : "if (_writer != null)",
      "right" : "if (_writer != null)",
      "info" : "IfStatement[26233-26373]:IfStatement[26020-26160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26254-26373]:Block[26041-26160]"
    }, {
      "left" : "if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM))",
      "right" : "if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM))",
      "info" : "IfStatement[26268-26363]:IfStatement[26055-26150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26315-26363]:Block[26102-26150]"
    }, {
      "left" : "_writer.flush();",
      "right" : "_writer.flush();",
      "info" : "ExpressionStatement[26333-26349]:ExpressionStatement[26120-26136]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26385-26394]:MarkerAnnotation[26172-26181]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26399-26405]:Modifier[26186-26192]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26406-26410]:PrimitiveType[26193-26197]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[26411-26416]:SimpleName[26198-26203]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[26426-26437]:SimpleType[26213-26224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26442-27931]:Block[26229-27718]"
    }, {
      "left" : "super.close();",
      "right" : "super.close();",
      "info" : "ExpressionStatement[26452-26466]:ExpressionStatement[26239-26253]"
    }, {
      "left" : "if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT))",
      "right" : "if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT))",
      "info" : "IfStatement[26637-27064]:IfStatement[26424-26851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26722-27064]:Block[26509-26851]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[26736-27054]:WhileStatement[26523-26841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26749-27054]:Block[26536-26841]"
    }, {
      "left" : "JsonStreamContext ctxt = getOutputContext();",
      "right" : "JsonStreamContext ctxt = getOutputContext();",
      "info" : "VariableDeclarationStatement[26767-26811]:VariableDeclarationStatement[26554-26598]"
    }, {
      "left" : "if (ctxt.inArray())",
      "right" : "if (ctxt.inArray())",
      "info" : "IfStatement[26828-27040]:IfStatement[26615-26827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26848-26904]:Block[26635-26691]"
    }, {
      "left" : "writeEndArray();",
      "right" : "writeEndArray();",
      "info" : "ExpressionStatement[26870-26886]:ExpressionStatement[26657-26673]"
    }, {
      "left" : "if (ctxt.inObject())",
      "right" : "if (ctxt.inObject())",
      "info" : "IfStatement[26910-27040]:IfStatement[26697-26827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26931-26988]:Block[26718-26775]"
    }, {
      "left" : "writeEndObject();",
      "right" : "writeEndObject();",
      "info" : "ExpressionStatement[26953-26970]:ExpressionStatement[26740-26757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26994-27040]:Block[26781-26827]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27016-27022]:BreakStatement[26803-26809]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[27073-27088]:ExpressionStatement[26860-26875]"
    }, {
      "left" : "_outputHead = 0;",
      "right" : "_outputHead = 0;",
      "info" : "ExpressionStatement[27097-27113]:ExpressionStatement[26884-26900]"
    }, {
      "left" : "_outputTail = 0;",
      "right" : "_outputTail = 0;",
      "info" : "ExpressionStatement[27122-27138]:ExpressionStatement[26909-26925]"
    }, {
      "left" : "if (_writer != null)",
      "right" : "if (_writer != null)",
      "info" : "IfStatement[27489-27826]:IfStatement[27276-27613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27510-27826]:Block[27297-27613]"
    }, {
      "left" : "if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET))",
      "right" : "if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET))",
      "info" : "IfStatement[27524-27816]:IfStatement[27311-27603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27600-27648]:Block[27387-27435]"
    }, {
      "left" : "_writer.close();",
      "right" : "_writer.close();",
      "info" : "ExpressionStatement[27618-27634]:ExpressionStatement[27405-27421]"
    }, {
      "left" : "if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM))",
      "right" : "if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM))",
      "info" : "IfStatement[27655-27816]:IfStatement[27442-27603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27702-27816]:Block[27489-27603]"
    }, {
      "left" : "_writer.flush();",
      "right" : "_writer.flush();",
      "info" : "ExpressionStatement[27786-27802]:ExpressionStatement[27573-27589]"
    }, {
      "left" : "_releaseBuffers();",
      "right" : "_releaseBuffers();",
      "info" : "ExpressionStatement[27907-27925]:ExpressionStatement[27694-27712]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27937-27946]:MarkerAnnotation[27724-27733]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[27951-27960]:Modifier[27738-27747]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27961-27965]:PrimitiveType[27748-27752]"
    }, {
      "left" : "_releaseBuffers",
      "right" : "_releaseBuffers",
      "info" : "SimpleName[27966-27981]:SimpleName[27753-27768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27988-28151]:Block[27775-27938]"
    }, {
      "left" : "char[] buf = _outputBuffer;",
      "right" : "char[] buf = _outputBuffer;",
      "info" : "VariableDeclarationStatement[27998-28025]:VariableDeclarationStatement[27785-27812]"
    }, {
      "left" : "if (buf != null)",
      "right" : "if (buf != null)",
      "info" : "IfStatement[28034-28145]:IfStatement[27821-27932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28051-28145]:Block[27838-27932]"
    }, {
      "left" : "_outputBuffer = null;",
      "right" : "_outputBuffer = null;",
      "info" : "ExpressionStatement[28065-28086]:ExpressionStatement[27852-27873]"
    }, {
      "left" : "_ioContext.releaseConcatBuffer(buf);",
      "right" : "_ioContext.releaseConcatBuffer(buf);",
      "info" : "ExpressionStatement[28099-28135]:ExpressionStatement[27886-27922]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28359-28366]:Modifier[28146-28153]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28367-28371]:PrimitiveType[28154-28158]"
    }, {
      "left" : "_writeString",
      "right" : "_writeString",
      "info" : "SimpleName[28372-28384]:SimpleName[28159-28171]"
    }, {
      "left" : "String text",
      "right" : "String text",
      "info" : "SingleVariableDeclaration[28385-28396]:SingleVariableDeclaration[28172-28183]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[28405-28416]:SimpleType[28192-28203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28421-29352]:Block[28208-29139]"
    }, {
      "left" : "final int len = text.length();",
      "right" : "final int len = text.length();",
      "info" : "VariableDeclarationStatement[28683-28713]:VariableDeclarationStatement[28470-28500]"
    }, {
      "left" : "if (len > _outputEnd)",
      "right" : "if (len > _outputEnd)",
      "info" : "IfStatement[28722-28858]:IfStatement[28509-28645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28744-28858]:Block[28531-28645]"
    }, {
      "left" : "_writeLongString(text);",
      "right" : "_writeLongString(text);",
      "info" : "ExpressionStatement[28805-28828]:ExpressionStatement[28592-28615]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[28841-28848]:ReturnStatement[28628-28635]"
    }, {
      "left" : "if ((_outputTail + len) > _outputEnd)",
      "right" : "if ((_outputTail + len) > _outputEnd)",
      "info" : "IfStatement[28962-29039]:IfStatement[28749-28826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29000-29039]:Block[28787-28826]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[29014-29029]:ExpressionStatement[28801-28816]"
    }, {
      "left" : "text.getChars(0, len, _outputBuffer, _outputTail);",
      "right" : "text.getChars(0, len, _outputBuffer, _outputTail);",
      "info" : "ExpressionStatement[29048-29098]:ExpressionStatement[28835-28885]"
    }, {
      "left" : "if (_characterEscapes != null)",
      "right" : "if (_characterEscapes != null)",
      "info" : "IfStatement[29108-29346]:IfStatement[28895-29133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29139-29187]:Block[28926-28974]"
    }, {
      "left" : "_writeStringCustom(len);",
      "right" : "_writeStringCustom(len);",
      "info" : "ExpressionStatement[29153-29177]:ExpressionStatement[28940-28964]"
    }, {
      "left" : "if (_maximumNonEscapedChar != 0)",
      "right" : "if (_maximumNonEscapedChar != 0)",
      "info" : "IfStatement[29193-29346]:IfStatement[28980-29133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29226-29297]:Block[29013-29084]"
    }, {
      "left" : "_writeStringASCII(len, _maximumNonEscapedChar);",
      "right" : "_writeStringASCII(len, _maximumNonEscapedChar);",
      "info" : "ExpressionStatement[29240-29287]:ExpressionStatement[29027-29074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29303-29346]:Block[29090-29133]"
    }, {
      "left" : "_writeString2(len);",
      "right" : "_writeString2(len);",
      "info" : "ExpressionStatement[29317-29336]:ExpressionStatement[29104-29123]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29358-29365]:Modifier[29145-29152]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29366-29370]:PrimitiveType[29153-29157]"
    }, {
      "left" : "_writeString2",
      "right" : "_writeString2",
      "info" : "SimpleName[29371-29384]:SimpleName[29158-29171]"
    }, {
      "left" : "final int len",
      "right" : "final int len",
      "info" : "SingleVariableDeclaration[29385-29398]:SingleVariableDeclaration[29172-29185]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[29407-29418]:SimpleType[29194-29205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29423-30685]:Block[29210-30472]"
    }, {
      "left" : "final int end = _outputTail + len;",
      "right" : "final int end = _outputTail + len;",
      "info" : "VariableDeclarationStatement[29497-29531]:VariableDeclarationStatement[29284-29318]"
    }, {
      "left" : "final int[] escCodes = _outputEscapes;",
      "right" : "final int[] escCodes = _outputEscapes;",
      "info" : "VariableDeclarationStatement[29540-29578]:VariableDeclarationStatement[29327-29365]"
    }, {
      "left" : "final int escLen = escCodes.length;",
      "right" : "final int escLen = escCodes.length;",
      "info" : "VariableDeclarationStatement[29587-29622]:VariableDeclarationStatement[29374-29409]"
    }, {
      "left" : "output_loop:\n        while (_outputTail < end) {\n            // Fast loop for chars not needing escaping\n            escape_loop:\n            while (true) {\n                char c = _outputBuffer[_outputTail];\n                if (c < escLen && escCodes[c] != 0) {\n                    break escape_loop;\n                }\n                if (++_outputTail >= end) {\n                    break output_loop;\n                }\n            }\n\n            // Ok, bumped into something that needs escaping.\n            /* First things first: need to flush the buffer.\n             * Inlined, as we don't want to lose tail pointer\n             */\n            int flushLen = (_outputTail - _outputHead);\n            if (flushLen > 0) {\n                _writer.write(_outputBuffer, _outputHead, flushLen);\n            }\n            /* In any case, tail will be the new start, so hopefully\n             * we have room now.\n             */\n            char c = _outputBuffer[_outputTail++];\n            _prependOrWriteCharacterEscape(c, escCodes[c]);\n        }",
      "right" : "output_loop:\n        while (_outputTail < end) {\n            // Fast loop for chars not needing escaping\n            escape_loop:\n            while (true) {\n                char c = _outputBuffer[_outputTail];\n                if (c < escLen && escCodes[c] != 0) {\n                    break escape_loop;\n                }\n                if (++_outputTail >= end) {\n                    break output_loop;\n                }\n            }\n\n            // Ok, bumped into something that needs escaping.\n            /* First things first: need to flush the buffer.\n             * Inlined, as we don't want to lose tail pointer\n             */\n            int flushLen = (_outputTail - _outputHead);\n            if (flushLen > 0) {\n                _writer.write(_outputBuffer, _outputHead, flushLen);\n            }\n            /* In any case, tail will be the new start, so hopefully\n             * we have room now.\n             */\n            char c = _outputBuffer[_outputTail++];\n            _prependOrWriteCharacterEscape(c, escCodes[c]);\n        }",
      "info" : "LabeledStatement[29632-30679]:LabeledStatement[29419-30466]"
    }, {
      "left" : "while (_outputTail < end)",
      "right" : "while (_outputTail < end)",
      "info" : "WhileStatement[29653-30679]:WhileStatement[29440-30466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29679-30679]:Block[29466-30466]"
    }, {
      "left" : "escape_loop:\n            while (true) {\n                char c = _outputBuffer[_outputTail];\n                if (c < escLen && escCodes[c] != 0) {\n                    break escape_loop;\n                }\n                if (++_outputTail >= end) {\n                    break output_loop;\n                }\n            }",
      "right" : "escape_loop:\n            while (true) {\n                char c = _outputBuffer[_outputTail];\n                if (c < escLen && escCodes[c] != 0) {\n                    break escape_loop;\n                }\n                if (++_outputTail >= end) {\n                    break output_loop;\n                }\n            }",
      "info" : "LabeledStatement[29749-30067]:LabeledStatement[29536-29854]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[29774-30067]:WhileStatement[29561-29854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29787-30067]:Block[29574-29854]"
    }, {
      "left" : "char c = _outputBuffer[_outputTail];",
      "right" : "char c = _outputBuffer[_outputTail];",
      "info" : "VariableDeclarationStatement[29805-29841]:VariableDeclarationStatement[29592-29628]"
    }, {
      "left" : "if (c < escLen && escCodes[c] != 0)",
      "right" : "if (c < escLen && escCodes[c] != 0)",
      "info" : "IfStatement[29858-29952]:IfStatement[29645-29739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29894-29952]:Block[29681-29739]"
    }, {
      "left" : "break escape_loop;",
      "right" : "break escape_loop;",
      "info" : "BreakStatement[29916-29934]:BreakStatement[29703-29721]"
    }, {
      "left" : "if (++_outputTail >= end)",
      "right" : "if (++_outputTail >= end)",
      "info" : "IfStatement[29969-30053]:IfStatement[29756-29840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29995-30053]:Block[29782-29840]"
    }, {
      "left" : "break output_loop;",
      "right" : "break output_loop;",
      "info" : "BreakStatement[30017-30035]:BreakStatement[29804-29822]"
    }, {
      "left" : "int flushLen = (_outputTail - _outputHead);",
      "right" : "int flushLen = (_outputTail - _outputHead);",
      "info" : "VariableDeclarationStatement[30282-30325]:VariableDeclarationStatement[30069-30112]"
    }, {
      "left" : "if (flushLen > 0)",
      "right" : "if (flushLen > 0)",
      "info" : "IfStatement[30338-30440]:IfStatement[30125-30227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30356-30440]:Block[30143-30227]"
    }, {
      "left" : "_writer.write(_outputBuffer, _outputHead, flushLen);",
      "right" : "_writer.write(_outputBuffer, _outputHead, flushLen);",
      "info" : "ExpressionStatement[30374-30426]:ExpressionStatement[30161-30213]"
    }, {
      "left" : "char c = _outputBuffer[_outputTail++];",
      "right" : "char c = _outputBuffer[_outputTail++];",
      "info" : "VariableDeclarationStatement[30571-30609]:VariableDeclarationStatement[30358-30396]"
    }, {
      "left" : "_prependOrWriteCharacterEscape(c, escCodes[c]);",
      "right" : "_prependOrWriteCharacterEscape(c, escCodes[c]);",
      "info" : "ExpressionStatement[30622-30669]:ExpressionStatement[30409-30456]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30811-30818]:Modifier[30598-30605]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[30819-30823]:PrimitiveType[30606-30610]"
    }, {
      "left" : "_writeLongString",
      "right" : "_writeLongString",
      "info" : "SimpleName[30824-30840]:SimpleName[30611-30627]"
    }, {
      "left" : "String text",
      "right" : "String text",
      "info" : "SingleVariableDeclaration[30841-30852]:SingleVariableDeclaration[30628-30639]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[30861-30872]:SimpleType[30648-30659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30877-31669]:Block[30664-31456]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[30963-30978]:ExpressionStatement[30750-30765]"
    }, {
      "left" : "final int textLen = text.length();",
      "right" : "final int textLen = text.length();",
      "info" : "VariableDeclarationStatement[31018-31052]:VariableDeclarationStatement[30805-30839]"
    }, {
      "left" : "int offset = 0;",
      "right" : "int offset = 0;",
      "info" : "VariableDeclarationStatement[31061-31076]:VariableDeclarationStatement[30848-30863]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[31085-31663]:DoStatement[30872-31450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31088-31637]:Block[30875-31424]"
    }, {
      "left" : "int max = _outputEnd;",
      "right" : "int max = _outputEnd;",
      "info" : "VariableDeclarationStatement[31102-31123]:VariableDeclarationStatement[30889-30910]"
    }, {
      "left" : "int segmentLen = ((offset + max) > textLen)\n                ? (textLen - offset) : max;",
      "right" : "int segmentLen = ((offset + max) > textLen)\n                ? (textLen - offset) : max;",
      "info" : "VariableDeclarationStatement[31136-31223]:VariableDeclarationStatement[30923-31010]"
    }, {
      "left" : "text.getChars(offset, offset+segmentLen, _outputBuffer, 0);",
      "right" : "text.getChars(offset, offset+segmentLen, _outputBuffer, 0);",
      "info" : "ExpressionStatement[31236-31295]:ExpressionStatement[31023-31082]"
    }, {
      "left" : "if (_characterEscapes != null)",
      "right" : "if (_characterEscapes != null)",
      "info" : "IfStatement[31308-31593]:IfStatement[31095-31380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31339-31403]:Block[31126-31190]"
    }, {
      "left" : "_writeSegmentCustom(segmentLen);",
      "right" : "_writeSegmentCustom(segmentLen);",
      "info" : "ExpressionStatement[31357-31389]:ExpressionStatement[31144-31176]"
    }, {
      "left" : "if (_maximumNonEscapedChar != 0)",
      "right" : "if (_maximumNonEscapedChar != 0)",
      "info" : "IfStatement[31409-31593]:IfStatement[31196-31380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31442-31529]:Block[31229-31316]"
    }, {
      "left" : "_writeSegmentASCII(segmentLen, _maximumNonEscapedChar);",
      "right" : "_writeSegmentASCII(segmentLen, _maximumNonEscapedChar);",
      "info" : "ExpressionStatement[31460-31515]:ExpressionStatement[31247-31302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31535-31593]:Block[31322-31380]"
    }, {
      "left" : "_writeSegment(segmentLen);",
      "right" : "_writeSegment(segmentLen);",
      "info" : "ExpressionStatement[31553-31579]:ExpressionStatement[31340-31366]"
    }, {
      "left" : "offset += segmentLen;",
      "right" : "offset += segmentLen;",
      "info" : "ExpressionStatement[31606-31627]:ExpressionStatement[31393-31414]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32096-32103]:Modifier[31883-31890]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[32104-32108]:PrimitiveType[31891-31895]"
    }, {
      "left" : "_writeSegment",
      "right" : "_writeSegment",
      "info" : "SimpleName[32109-32122]:SimpleName[31896-31909]"
    }, {
      "left" : "int end",
      "right" : "int end",
      "info" : "SingleVariableDeclaration[32123-32130]:SingleVariableDeclaration[31910-31917]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[32139-32150]:SimpleType[31926-31937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32155-33332]:Block[31942-33119]"
    }, {
      "left" : "final int[] escCodes = _outputEscapes;",
      "right" : "final int[] escCodes = _outputEscapes;",
      "info" : "VariableDeclarationStatement[32165-32203]:VariableDeclarationStatement[31952-31990]"
    }, {
      "left" : "final int escLen = escCodes.length;",
      "right" : "final int escLen = escCodes.length;",
      "info" : "VariableDeclarationStatement[32212-32247]:VariableDeclarationStatement[31999-32034]"
    }, {
      "left" : "int ptr = 0;",
      "right" : "int ptr = 0;",
      "info" : "VariableDeclarationStatement[32261-32273]:VariableDeclarationStatement[32048-32060]"
    }, {
      "left" : "int start = ptr;",
      "right" : "int start = ptr;",
      "info" : "VariableDeclarationStatement[32282-32298]:VariableDeclarationStatement[32069-32085]"
    }, {
      "left" : "output_loop:\n        while (ptr < end) {\n            // Fast loop for chars not needing escaping\n            char c;\n            while (true) {\n                c = _outputBuffer[ptr];\n                if (c < escLen && escCodes[c] != 0) {\n                    break;\n                }\n                if (++ptr >= end) {\n                    break;\n                }\n            }\n\n            // Ok, bumped into something that needs escaping.\n            /* First things first: need to flush the buffer.\n             * Inlined, as we don't want to lose tail pointer\n             */\n            int flushLen = (ptr - start);\n            if (flushLen > 0) {\n                _writer.write(_outputBuffer, start, flushLen);\n                if (ptr >= end) {\n                    break output_loop;\n                }\n            }\n            ++ptr;\n            // So; either try to prepend (most likely), or write directly:\n            start = _prependOrWriteCharacterEscape(_outputBuffer, ptr, end, c, escCodes[c]);\n        }",
      "right" : "output_loop:\n        while (ptr < end) {\n            // Fast loop for chars not needing escaping\n            char c;\n            while (true) {\n                c = _outputBuffer[ptr];\n                if (c < escLen && escCodes[c] != 0) {\n                    break;\n                }\n                if (++ptr >= end) {\n                    break;\n                }\n            }\n\n            // Ok, bumped into something that needs escaping.\n            /* First things first: need to flush the buffer.\n             * Inlined, as we don't want to lose tail pointer\n             */\n            int flushLen = (ptr - start);\n            if (flushLen > 0) {\n                _writer.write(_outputBuffer, start, flushLen);\n                if (ptr >= end) {\n                    break output_loop;\n                }\n            }\n            ++ptr;\n            // So; either try to prepend (most likely), or write directly:\n            start = _prependOrWriteCharacterEscape(_outputBuffer, ptr, end, c, escCodes[c]);\n        }",
      "info" : "LabeledStatement[32308-33326]:LabeledStatement[32095-33113]"
    }, {
      "left" : "while (ptr < end)",
      "right" : "while (ptr < end)",
      "info" : "WhileStatement[32329-33326]:WhileStatement[32116-33113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32347-33326]:Block[32134-33113]"
    }, {
      "left" : "char c;",
      "right" : "char c;",
      "info" : "VariableDeclarationStatement[32417-32424]:VariableDeclarationStatement[32204-32211]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[32437-32685]:WhileStatement[32224-32472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32450-32685]:Block[32237-32472]"
    }, {
      "left" : "c = _outputBuffer[ptr];",
      "right" : "c = _outputBuffer[ptr];",
      "info" : "ExpressionStatement[32468-32491]:ExpressionStatement[32255-32278]"
    }, {
      "left" : "if (c < escLen && escCodes[c] != 0)",
      "right" : "if (c < escLen && escCodes[c] != 0)",
      "info" : "IfStatement[32508-32590]:IfStatement[32295-32377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32544-32590]:Block[32331-32377]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32566-32572]:BreakStatement[32353-32359]"
    }, {
      "left" : "if (++ptr >= end)",
      "right" : "if (++ptr >= end)",
      "info" : "IfStatement[32607-32671]:IfStatement[32394-32458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32625-32671]:Block[32412-32458]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32647-32653]:BreakStatement[32434-32440]"
    }, {
      "left" : "int flushLen = (ptr - start);",
      "right" : "int flushLen = (ptr - start);",
      "info" : "VariableDeclarationStatement[32900-32929]:VariableDeclarationStatement[32687-32716]"
    }, {
      "left" : "if (flushLen > 0)",
      "right" : "if (flushLen > 0)",
      "info" : "IfStatement[32942-33129]:IfStatement[32729-32916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32960-33129]:Block[32747-32916]"
    }, {
      "left" : "_writer.write(_outputBuffer, start, flushLen);",
      "right" : "_writer.write(_outputBuffer, start, flushLen);",
      "info" : "ExpressionStatement[32978-33024]:ExpressionStatement[32765-32811]"
    }, {
      "left" : "if (ptr >= end)",
      "right" : "if (ptr >= end)",
      "info" : "IfStatement[33041-33115]:IfStatement[32828-32902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33057-33115]:Block[32844-32902]"
    }, {
      "left" : "break output_loop;",
      "right" : "break output_loop;",
      "info" : "BreakStatement[33079-33097]:BreakStatement[32866-32884]"
    }, {
      "left" : "++ptr;",
      "right" : "++ptr;",
      "info" : "ExpressionStatement[33142-33148]:ExpressionStatement[32929-32935]"
    }, {
      "left" : "start = _prependOrWriteCharacterEscape(_outputBuffer, ptr, end, c, escCodes[c]);",
      "right" : "start = _prependOrWriteCharacterEscape(_outputBuffer, ptr, end, c, escCodes[c]);",
      "info" : "ExpressionStatement[33236-33316]:ExpressionStatement[33023-33103]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[33483-33490]:Modifier[33270-33277]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[33491-33495]:PrimitiveType[33278-33282]"
    }, {
      "left" : "_writeString",
      "right" : "_writeString",
      "info" : "SimpleName[33496-33508]:SimpleName[33283-33295]"
    }, {
      "left" : "char[] text",
      "right" : "char[] text",
      "info" : "SingleVariableDeclaration[33509-33520]:SingleVariableDeclaration[33296-33307]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[33522-33532]:SingleVariableDeclaration[33309-33319]"
    }, {
      "left" : "int len",
      "right" : "int len",
      "info" : "SingleVariableDeclaration[33534-33541]:SingleVariableDeclaration[33321-33328]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[33550-33561]:SimpleType[33337-33348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33566-35453]:Block[33353-35240]"
    }, {
      "left" : "if (_characterEscapes != null)",
      "right" : "if (_characterEscapes != null)",
      "info" : "IfStatement[33576-33689]:IfStatement[33363-33476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33607-33689]:Block[33394-33476]"
    }, {
      "left" : "_writeStringCustom(text, offset, len);",
      "right" : "_writeStringCustom(text, offset, len);",
      "info" : "ExpressionStatement[33621-33659]:ExpressionStatement[33408-33446]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[33672-33679]:ReturnStatement[33459-33466]"
    }, {
      "left" : "if (_maximumNonEscapedChar != 0)",
      "right" : "if (_maximumNonEscapedChar != 0)",
      "info" : "IfStatement[33698-33836]:IfStatement[33485-33623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33731-33836]:Block[33518-33623]"
    }, {
      "left" : "_writeStringASCII(text, offset, len, _maximumNonEscapedChar);",
      "right" : "_writeStringASCII(text, offset, len, _maximumNonEscapedChar);",
      "info" : "ExpressionStatement[33745-33806]:ExpressionStatement[33532-33593]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[33819-33826]:ReturnStatement[33606-33613]"
    }, {
      "left" : "len += offset;",
      "right" : "len += offset;",
      "info" : "ExpressionStatement[34021-34035]:ExpressionStatement[33808-33822]"
    }, {
      "left" : "final int[] escCodes = _outputEscapes;",
      "right" : "final int[] escCodes = _outputEscapes;",
      "info" : "VariableDeclarationStatement[34080-34118]:VariableDeclarationStatement[33867-33905]"
    }, {
      "left" : "final int escLen = escCodes.length;",
      "right" : "final int escLen = escCodes.length;",
      "info" : "VariableDeclarationStatement[34127-34162]:VariableDeclarationStatement[33914-33949]"
    }, {
      "left" : "while (offset < len)",
      "right" : "while (offset < len)",
      "info" : "WhileStatement[34171-35447]:WhileStatement[33958-35234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34192-35447]:Block[33979-35234]"
    }, {
      "left" : "int start = offset;",
      "right" : "int start = offset;",
      "info" : "VariableDeclarationStatement[34206-34225]:VariableDeclarationStatement[33993-34012]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[34239-34489]:WhileStatement[34026-34276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34252-34489]:Block[34039-34276]"
    }, {
      "left" : "char c = text[offset];",
      "right" : "char c = text[offset];",
      "info" : "VariableDeclarationStatement[34270-34292]:VariableDeclarationStatement[34057-34079]"
    }, {
      "left" : "if (c < escLen && escCodes[c] != 0)",
      "right" : "if (c < escLen && escCodes[c] != 0)",
      "info" : "IfStatement[34309-34391]:IfStatement[34096-34178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34345-34391]:Block[34132-34178]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34367-34373]:BreakStatement[34154-34160]"
    }, {
      "left" : "if (++offset >= len)",
      "right" : "if (++offset >= len)",
      "info" : "IfStatement[34408-34475]:IfStatement[34195-34262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34429-34475]:Block[34216-34262]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34451-34457]:BreakStatement[34238-34244]"
    }, {
      "left" : "int newAmount = offset - start;",
      "right" : "int newAmount = offset - start;",
      "info" : "VariableDeclarationStatement[34567-34598]:VariableDeclarationStatement[34354-34385]"
    }, {
      "left" : "if (newAmount < SHORT_WRITE)",
      "right" : "if (newAmount < SHORT_WRITE)",
      "info" : "IfStatement[34611-35182]:IfStatement[34398-34969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34640-35039]:Block[34427-34826]"
    }, {
      "left" : "if ((_outputTail + newAmount) > _outputEnd)",
      "right" : "if ((_outputTail + newAmount) > _outputEnd)",
      "info" : "IfStatement[34735-34834]:IfStatement[34522-34621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34779-34834]:Block[34566-34621]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[34801-34816]:ExpressionStatement[34588-34603]"
    }, {
      "left" : "if (newAmount > 0)",
      "right" : "if (newAmount > 0)",
      "info" : "IfStatement[34851-35025]:IfStatement[34638-34812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34870-35025]:Block[34657-34812]"
    }, {
      "left" : "System.arraycopy(text, start, _outputBuffer, _outputTail, newAmount);",
      "right" : "System.arraycopy(text, start, _outputBuffer, _outputTail, newAmount);",
      "info" : "ExpressionStatement[34892-34961]:ExpressionStatement[34679-34748]"
    }, {
      "left" : "_outputTail += newAmount;",
      "right" : "_outputTail += newAmount;",
      "info" : "ExpressionStatement[34982-35007]:ExpressionStatement[34769-34794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35045-35182]:Block[34832-34969]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[35098-35113]:ExpressionStatement[34885-34900]"
    }, {
      "left" : "_writer.write(text, start, newAmount);",
      "right" : "_writer.write(text, start, newAmount);",
      "info" : "ExpressionStatement[35130-35168]:ExpressionStatement[34917-34955]"
    }, {
      "left" : "if (offset >= len)",
      "right" : "if (offset >= len)",
      "info" : "IfStatement[35228-35292]:IfStatement[35015-35079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35247-35292]:Block[35034-35079]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35272-35278]:BreakStatement[35059-35065]"
    }, {
      "left" : "char c = text[offset++];",
      "right" : "char c = text[offset++];",
      "info" : "VariableDeclarationStatement[35351-35375]:VariableDeclarationStatement[35138-35162]"
    }, {
      "left" : "_appendCharacterEscape(c, escCodes[c]);",
      "right" : "_appendCharacterEscape(c, escCodes[c]);",
      "info" : "ExpressionStatement[35388-35427]:ExpressionStatement[35175-35214]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35815-35822]:Modifier[35602-35609]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[35823-35827]:PrimitiveType[35610-35614]"
    }, {
      "left" : "_writeStringASCII",
      "right" : "_writeStringASCII",
      "info" : "SimpleName[35828-35845]:SimpleName[35615-35632]"
    }, {
      "left" : "final int len",
      "right" : "final int len",
      "info" : "SingleVariableDeclaration[35846-35859]:SingleVariableDeclaration[35633-35646]"
    }, {
      "left" : "final int maxNonEscaped",
      "right" : "final int maxNonEscaped",
      "info" : "SingleVariableDeclaration[35861-35884]:SingleVariableDeclaration[35648-35671]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[35901-35912]:SimpleType[35688-35699]"
    }, {
      "left" : "JsonGenerationException",
      "right" : "JsonGenerationException",
      "info" : "SimpleType[35914-35937]:SimpleType[35701-35724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35942-37169]:Block[35729-36956]"
    }, {
      "left" : "int end = _outputTail + len;",
      "right" : "int end = _outputTail + len;",
      "info" : "VariableDeclarationStatement[36016-36044]:VariableDeclarationStatement[35803-35831]"
    }, {
      "left" : "final int[] escCodes = _outputEscapes;",
      "right" : "final int[] escCodes = _outputEscapes;",
      "info" : "VariableDeclarationStatement[36053-36091]:VariableDeclarationStatement[35840-35878]"
    }, {
      "left" : "final int escLimit = Math.min(escCodes.length, maxNonEscaped+1);",
      "right" : "final int escLimit = Math.min(escCodes.length, maxNonEscaped+1);",
      "info" : "VariableDeclarationStatement[36100-36164]:VariableDeclarationStatement[35887-35951]"
    }, {
      "left" : "int escCode = 0;",
      "right" : "int escCode = 0;",
      "info" : "VariableDeclarationStatement[36173-36189]:VariableDeclarationStatement[35960-35976]"
    }, {
      "left" : "output_loop:\n        while (_outputTail < end) {\n            char c;\n            // Fast loop for chars not needing escaping\n            escape_loop:\n            while (true) {\n                c = _outputBuffer[_outputTail];\n                if (c < escLimit) {\n                    escCode = escCodes[c];\n                    if (escCode != 0) {\n                        break escape_loop;\n                    }\n                } else if (c > maxNonEscaped) {\n                    escCode = CharacterEscapes.ESCAPE_STANDARD;\n                    break escape_loop;\n                }\n                if (++_outputTail >= end) {\n                    break output_loop;\n                }\n            }\n            int flushLen = (_outputTail - _outputHead);\n            if (flushLen > 0) {\n                _writer.write(_outputBuffer, _outputHead, flushLen);\n            }\n            ++_outputTail;\n            _prependOrWriteCharacterEscape(c, escCode);\n        }",
      "right" : "output_loop:\n        while (_outputTail < end) {\n            char c;\n            // Fast loop for chars not needing escaping\n            escape_loop:\n            while (true) {\n                c = _outputBuffer[_outputTail];\n                if (c < escLimit) {\n                    escCode = escCodes[c];\n                    if (escCode != 0) {\n                        break escape_loop;\n                    }\n                } else if (c > maxNonEscaped) {\n                    escCode = CharacterEscapes.ESCAPE_STANDARD;\n                    break escape_loop;\n                }\n                if (++_outputTail >= end) {\n                    break output_loop;\n                }\n            }\n            int flushLen = (_outputTail - _outputHead);\n            if (flushLen > 0) {\n                _writer.write(_outputBuffer, _outputHead, flushLen);\n            }\n            ++_outputTail;\n            _prependOrWriteCharacterEscape(c, escCode);\n        }",
      "info" : "LabeledStatement[36207-37163]:LabeledStatement[35994-36950]"
    }, {
      "left" : "while (_outputTail < end)",
      "right" : "while (_outputTail < end)",
      "info" : "WhileStatement[36228-37163]:WhileStatement[36015-36950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36254-37163]:Block[36041-36950]"
    }, {
      "left" : "char c;",
      "right" : "char c;",
      "info" : "VariableDeclarationStatement[36268-36275]:VariableDeclarationStatement[36055-36062]"
    }, {
      "left" : "escape_loop:\n            while (true) {\n                c = _outputBuffer[_outputTail];\n                if (c < escLimit) {\n                    escCode = escCodes[c];\n                    if (escCode != 0) {\n                        break escape_loop;\n                    }\n                } else if (c > maxNonEscaped) {\n                    escCode = CharacterEscapes.ESCAPE_STANDARD;\n                    break escape_loop;\n                }\n                if (++_outputTail >= end) {\n                    break output_loop;\n                }\n            }",
      "right" : "escape_loop:\n            while (true) {\n                c = _outputBuffer[_outputTail];\n                if (c < escLimit) {\n                    escCode = escCodes[c];\n                    if (escCode != 0) {\n                        break escape_loop;\n                    }\n                } else if (c > maxNonEscaped) {\n                    escCode = CharacterEscapes.ESCAPE_STANDARD;\n                    break escape_loop;\n                }\n                if (++_outputTail >= end) {\n                    break output_loop;\n                }\n            }",
      "info" : "LabeledStatement[36344-36899]:LabeledStatement[36131-36686]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[36369-36899]:WhileStatement[36156-36686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36382-36899]:Block[36169-36686]"
    }, {
      "left" : "c = _outputBuffer[_outputTail];",
      "right" : "c = _outputBuffer[_outputTail];",
      "info" : "ExpressionStatement[36400-36431]:ExpressionStatement[36187-36218]"
    }, {
      "left" : "if (c < escLimit)",
      "right" : "if (c < escLimit)",
      "info" : "IfStatement[36448-36784]:IfStatement[36235-36571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36466-36633]:Block[36253-36420]"
    }, {
      "left" : "escCode = escCodes[c];",
      "right" : "escCode = escCodes[c];",
      "info" : "ExpressionStatement[36488-36510]:ExpressionStatement[36275-36297]"
    }, {
      "left" : "if (escCode != 0)",
      "right" : "if (escCode != 0)",
      "info" : "IfStatement[36531-36615]:IfStatement[36318-36402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36549-36615]:Block[36336-36402]"
    }, {
      "left" : "break escape_loop;",
      "right" : "break escape_loop;",
      "info" : "BreakStatement[36575-36593]:BreakStatement[36362-36380]"
    }, {
      "left" : "if (c > maxNonEscaped)",
      "right" : "if (c > maxNonEscaped)",
      "info" : "IfStatement[36639-36784]:IfStatement[36426-36571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36662-36784]:Block[36449-36571]"
    }, {
      "left" : "escCode = CharacterEscapes.ESCAPE_STANDARD;",
      "right" : "escCode = CharacterEscapes.ESCAPE_STANDARD;",
      "info" : "ExpressionStatement[36684-36727]:ExpressionStatement[36471-36514]"
    }, {
      "left" : "break escape_loop;",
      "right" : "break escape_loop;",
      "info" : "BreakStatement[36748-36766]:BreakStatement[36535-36553]"
    }, {
      "left" : "if (++_outputTail >= end)",
      "right" : "if (++_outputTail >= end)",
      "info" : "IfStatement[36801-36885]:IfStatement[36588-36672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36827-36885]:Block[36614-36672]"
    }, {
      "left" : "break output_loop;",
      "right" : "break output_loop;",
      "info" : "BreakStatement[36849-36867]:BreakStatement[36636-36654]"
    }, {
      "left" : "int flushLen = (_outputTail - _outputHead);",
      "right" : "int flushLen = (_outputTail - _outputHead);",
      "info" : "VariableDeclarationStatement[36912-36955]:VariableDeclarationStatement[36699-36742]"
    }, {
      "left" : "if (flushLen > 0)",
      "right" : "if (flushLen > 0)",
      "info" : "IfStatement[36968-37070]:IfStatement[36755-36857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36986-37070]:Block[36773-36857]"
    }, {
      "left" : "_writer.write(_outputBuffer, _outputHead, flushLen);",
      "right" : "_writer.write(_outputBuffer, _outputHead, flushLen);",
      "info" : "ExpressionStatement[37004-37056]:ExpressionStatement[36791-36843]"
    }, {
      "left" : "++_outputTail;",
      "right" : "++_outputTail;",
      "info" : "ExpressionStatement[37083-37097]:ExpressionStatement[36870-36884]"
    }, {
      "left" : "_prependOrWriteCharacterEscape(c, escCode);",
      "right" : "_prependOrWriteCharacterEscape(c, escCode);",
      "info" : "ExpressionStatement[37110-37153]:ExpressionStatement[36897-36940]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37175-37182]:Modifier[36962-36969]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[37183-37187]:PrimitiveType[36970-36974]"
    }, {
      "left" : "_writeSegmentASCII",
      "right" : "_writeSegmentASCII",
      "info" : "SimpleName[37188-37206]:SimpleName[36975-36993]"
    }, {
      "left" : "int end",
      "right" : "int end",
      "info" : "SingleVariableDeclaration[37207-37214]:SingleVariableDeclaration[36994-37001]"
    }, {
      "left" : "final int maxNonEscaped",
      "right" : "final int maxNonEscaped",
      "info" : "SingleVariableDeclaration[37216-37239]:SingleVariableDeclaration[37003-37026]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[37256-37267]:SimpleType[37043-37054]"
    }, {
      "left" : "JsonGenerationException",
      "right" : "JsonGenerationException",
      "info" : "SimpleType[37269-37292]:SimpleType[37056-37079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37297-38481]:Block[37084-38268]"
    }, {
      "left" : "final int[] escCodes = _outputEscapes;",
      "right" : "final int[] escCodes = _outputEscapes;",
      "info" : "VariableDeclarationStatement[37307-37345]:VariableDeclarationStatement[37094-37132]"
    }, {
      "left" : "final int escLimit = Math.min(escCodes.length, maxNonEscaped+1);",
      "right" : "final int escLimit = Math.min(escCodes.length, maxNonEscaped+1);",
      "info" : "VariableDeclarationStatement[37354-37418]:VariableDeclarationStatement[37141-37205]"
    }, {
      "left" : "int ptr = 0;",
      "right" : "int ptr = 0;",
      "info" : "VariableDeclarationStatement[37432-37444]:VariableDeclarationStatement[37219-37231]"
    }, {
      "left" : "int escCode = 0;",
      "right" : "int escCode = 0;",
      "info" : "VariableDeclarationStatement[37453-37469]:VariableDeclarationStatement[37240-37256]"
    }, {
      "left" : "int start = ptr;",
      "right" : "int start = ptr;",
      "info" : "VariableDeclarationStatement[37478-37494]:VariableDeclarationStatement[37265-37281]"
    }, {
      "left" : "output_loop:\n        while (ptr < end) {\n            // Fast loop for chars not needing escaping\n            char c;\n            while (true) {\n                c = _outputBuffer[ptr];\n                if (c < escLimit) {\n                    escCode = escCodes[c];\n                    if (escCode != 0) {\n                        break;\n                    }\n                } else if (c > maxNonEscaped) {\n                    escCode = CharacterEscapes.ESCAPE_STANDARD;\n                    break;\n                }\n                if (++ptr >= end) {\n                    break;\n                }\n            }\n            int flushLen = (ptr - start);\n            if (flushLen > 0) {\n                _writer.write(_outputBuffer, start, flushLen);\n                if (ptr >= end) {\n                    break output_loop;\n                }\n            }\n            ++ptr;\n            start = _prependOrWriteCharacterEscape(_outputBuffer, ptr, end, c, escCode);\n        }",
      "right" : "output_loop:\n        while (ptr < end) {\n            // Fast loop for chars not needing escaping\n            char c;\n            while (true) {\n                c = _outputBuffer[ptr];\n                if (c < escLimit) {\n                    escCode = escCodes[c];\n                    if (escCode != 0) {\n                        break;\n                    }\n                } else if (c > maxNonEscaped) {\n                    escCode = CharacterEscapes.ESCAPE_STANDARD;\n                    break;\n                }\n                if (++ptr >= end) {\n                    break;\n                }\n            }\n            int flushLen = (ptr - start);\n            if (flushLen > 0) {\n                _writer.write(_outputBuffer, start, flushLen);\n                if (ptr >= end) {\n                    break output_loop;\n                }\n            }\n            ++ptr;\n            start = _prependOrWriteCharacterEscape(_outputBuffer, ptr, end, c, escCode);\n        }",
      "info" : "LabeledStatement[37508-38475]:LabeledStatement[37295-38262]"
    }, {
      "left" : "while (ptr < end)",
      "right" : "while (ptr < end)",
      "info" : "WhileStatement[37529-38475]:WhileStatement[37316-38262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37547-38475]:Block[37334-38262]"
    }, {
      "left" : "char c;",
      "right" : "char c;",
      "info" : "VariableDeclarationStatement[37617-37624]:VariableDeclarationStatement[37404-37411]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[37637-38115]:WhileStatement[37424-37902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37650-38115]:Block[37437-37902]"
    }, {
      "left" : "c = _outputBuffer[ptr];",
      "right" : "c = _outputBuffer[ptr];",
      "info" : "ExpressionStatement[37668-37691]:ExpressionStatement[37455-37478]"
    }, {
      "left" : "if (c < escLimit)",
      "right" : "if (c < escLimit)",
      "info" : "IfStatement[37708-38020]:IfStatement[37495-37807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37726-37881]:Block[37513-37668]"
    }, {
      "left" : "escCode = escCodes[c];",
      "right" : "escCode = escCodes[c];",
      "info" : "ExpressionStatement[37748-37770]:ExpressionStatement[37535-37557]"
    }, {
      "left" : "if (escCode != 0)",
      "right" : "if (escCode != 0)",
      "info" : "IfStatement[37791-37863]:IfStatement[37578-37650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37809-37863]:Block[37596-37650]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[37835-37841]:BreakStatement[37622-37628]"
    }, {
      "left" : "if (c > maxNonEscaped)",
      "right" : "if (c > maxNonEscaped)",
      "info" : "IfStatement[37887-38020]:IfStatement[37674-37807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37910-38020]:Block[37697-37807]"
    }, {
      "left" : "escCode = CharacterEscapes.ESCAPE_STANDARD;",
      "right" : "escCode = CharacterEscapes.ESCAPE_STANDARD;",
      "info" : "ExpressionStatement[37932-37975]:ExpressionStatement[37719-37762]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[37996-38002]:BreakStatement[37783-37789]"
    }, {
      "left" : "if (++ptr >= end)",
      "right" : "if (++ptr >= end)",
      "info" : "IfStatement[38037-38101]:IfStatement[37824-37888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38055-38101]:Block[37842-37888]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38077-38083]:BreakStatement[37864-37870]"
    }, {
      "left" : "int flushLen = (ptr - start);",
      "right" : "int flushLen = (ptr - start);",
      "info" : "VariableDeclarationStatement[38128-38157]:VariableDeclarationStatement[37915-37944]"
    }, {
      "left" : "if (flushLen > 0)",
      "right" : "if (flushLen > 0)",
      "info" : "IfStatement[38170-38357]:IfStatement[37957-38144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38188-38357]:Block[37975-38144]"
    }, {
      "left" : "_writer.write(_outputBuffer, start, flushLen);",
      "right" : "_writer.write(_outputBuffer, start, flushLen);",
      "info" : "ExpressionStatement[38206-38252]:ExpressionStatement[37993-38039]"
    }, {
      "left" : "if (ptr >= end)",
      "right" : "if (ptr >= end)",
      "info" : "IfStatement[38269-38343]:IfStatement[38056-38130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38285-38343]:Block[38072-38130]"
    }, {
      "left" : "break output_loop;",
      "right" : "break output_loop;",
      "info" : "BreakStatement[38307-38325]:BreakStatement[38094-38112]"
    }, {
      "left" : "++ptr;",
      "right" : "++ptr;",
      "info" : "ExpressionStatement[38370-38376]:ExpressionStatement[38157-38163]"
    }, {
      "left" : "start = _prependOrWriteCharacterEscape(_outputBuffer, ptr, end, c, escCode);",
      "right" : "start = _prependOrWriteCharacterEscape(_outputBuffer, ptr, end, c, escCode);",
      "info" : "ExpressionStatement[38389-38465]:ExpressionStatement[38176-38252]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[38487-38494]:Modifier[38274-38281]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[38495-38499]:PrimitiveType[38282-38286]"
    }, {
      "left" : "_writeStringASCII",
      "right" : "_writeStringASCII",
      "info" : "SimpleName[38500-38517]:SimpleName[38287-38304]"
    }, {
      "left" : "char[] text",
      "right" : "char[] text",
      "info" : "SingleVariableDeclaration[38518-38529]:SingleVariableDeclaration[38305-38316]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[38531-38541]:SingleVariableDeclaration[38318-38328]"
    }, {
      "left" : "int len",
      "right" : "int len",
      "info" : "SingleVariableDeclaration[38543-38550]:SingleVariableDeclaration[38330-38337]"
    }, {
      "left" : "final int maxNonEscaped",
      "right" : "final int maxNonEscaped",
      "info" : "SingleVariableDeclaration[38564-38587]:SingleVariableDeclaration[38351-38374]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[38604-38615]:SimpleType[38391-38402]"
    }, {
      "left" : "JsonGenerationException",
      "right" : "JsonGenerationException",
      "info" : "SimpleType[38617-38640]:SimpleType[38404-38427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38645-40379]:Block[38432-40166]"
    }, {
      "left" : "len += offset;",
      "right" : "len += offset;",
      "info" : "ExpressionStatement[38655-38669]:ExpressionStatement[38442-38456]"
    }, {
      "left" : "final int[] escCodes = _outputEscapes;",
      "right" : "final int[] escCodes = _outputEscapes;",
      "info" : "VariableDeclarationStatement[38714-38752]:VariableDeclarationStatement[38501-38539]"
    }, {
      "left" : "final int escLimit = Math.min(escCodes.length, maxNonEscaped+1);",
      "right" : "final int escLimit = Math.min(escCodes.length, maxNonEscaped+1);",
      "info" : "VariableDeclarationStatement[38761-38825]:VariableDeclarationStatement[38548-38612]"
    }, {
      "left" : "int escCode = 0;",
      "right" : "int escCode = 0;",
      "info" : "VariableDeclarationStatement[38835-38851]:VariableDeclarationStatement[38622-38638]"
    }, {
      "left" : "while (offset < len)",
      "right" : "while (offset < len)",
      "info" : "WhileStatement[38869-40373]:WhileStatement[38656-40160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38890-40373]:Block[38677-40160]"
    }, {
      "left" : "int start = offset;",
      "right" : "int start = offset;",
      "info" : "VariableDeclarationStatement[38904-38923]:VariableDeclarationStatement[38691-38710]"
    }, {
      "left" : "char c;",
      "right" : "char c;",
      "info" : "VariableDeclarationStatement[38936-38943]:VariableDeclarationStatement[38723-38730]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[38969-39444]:WhileStatement[38756-39231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38982-39444]:Block[38769-39231]"
    }, {
      "left" : "c = text[offset];",
      "right" : "c = text[offset];",
      "info" : "ExpressionStatement[39000-39017]:ExpressionStatement[38787-38804]"
    }, {
      "left" : "if (c < escLimit)",
      "right" : "if (c < escLimit)",
      "info" : "IfStatement[39034-39346]:IfStatement[38821-39133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39052-39207]:Block[38839-38994]"
    }, {
      "left" : "escCode = escCodes[c];",
      "right" : "escCode = escCodes[c];",
      "info" : "ExpressionStatement[39074-39096]:ExpressionStatement[38861-38883]"
    }, {
      "left" : "if (escCode != 0)",
      "right" : "if (escCode != 0)",
      "info" : "IfStatement[39117-39189]:IfStatement[38904-38976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39135-39189]:Block[38922-38976]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39161-39167]:BreakStatement[38948-38954]"
    }, {
      "left" : "if (c > maxNonEscaped)",
      "right" : "if (c > maxNonEscaped)",
      "info" : "IfStatement[39213-39346]:IfStatement[39000-39133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39236-39346]:Block[39023-39133]"
    }, {
      "left" : "escCode = CharacterEscapes.ESCAPE_STANDARD;",
      "right" : "escCode = CharacterEscapes.ESCAPE_STANDARD;",
      "info" : "ExpressionStatement[39258-39301]:ExpressionStatement[39045-39088]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39322-39328]:BreakStatement[39109-39115]"
    }, {
      "left" : "if (++offset >= len)",
      "right" : "if (++offset >= len)",
      "info" : "IfStatement[39363-39430]:IfStatement[39150-39217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39384-39430]:Block[39171-39217]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39406-39412]:BreakStatement[39193-39199]"
    }, {
      "left" : "int newAmount = offset - start;",
      "right" : "int newAmount = offset - start;",
      "info" : "VariableDeclarationStatement[39522-39553]:VariableDeclarationStatement[39309-39340]"
    }, {
      "left" : "if (newAmount < SHORT_WRITE)",
      "right" : "if (newAmount < SHORT_WRITE)",
      "info" : "IfStatement[39566-40137]:IfStatement[39353-39924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39595-39994]:Block[39382-39781]"
    }, {
      "left" : "if ((_outputTail + newAmount) > _outputEnd)",
      "right" : "if ((_outputTail + newAmount) > _outputEnd)",
      "info" : "IfStatement[39690-39789]:IfStatement[39477-39576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39734-39789]:Block[39521-39576]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[39756-39771]:ExpressionStatement[39543-39558]"
    }, {
      "left" : "if (newAmount > 0)",
      "right" : "if (newAmount > 0)",
      "info" : "IfStatement[39806-39980]:IfStatement[39593-39767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39825-39980]:Block[39612-39767]"
    }, {
      "left" : "System.arraycopy(text, start, _outputBuffer, _outputTail, newAmount);",
      "right" : "System.arraycopy(text, start, _outputBuffer, _outputTail, newAmount);",
      "info" : "ExpressionStatement[39847-39916]:ExpressionStatement[39634-39703]"
    }, {
      "left" : "_outputTail += newAmount;",
      "right" : "_outputTail += newAmount;",
      "info" : "ExpressionStatement[39937-39962]:ExpressionStatement[39724-39749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40000-40137]:Block[39787-39924]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[40053-40068]:ExpressionStatement[39840-39855]"
    }, {
      "left" : "_writer.write(text, start, newAmount);",
      "right" : "_writer.write(text, start, newAmount);",
      "info" : "ExpressionStatement[40085-40123]:ExpressionStatement[39872-39910]"
    }, {
      "left" : "if (offset >= len)",
      "right" : "if (offset >= len)",
      "info" : "IfStatement[40183-40247]:IfStatement[39970-40034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40202-40247]:Block[39989-40034]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[40227-40233]:BreakStatement[40014-40020]"
    }, {
      "left" : "++offset;",
      "right" : "++offset;",
      "info" : "ExpressionStatement[40306-40315]:ExpressionStatement[40093-40102]"
    }, {
      "left" : "_appendCharacterEscape(c, escCode);",
      "right" : "_appendCharacterEscape(c, escCode);",
      "info" : "ExpressionStatement[40328-40363]:ExpressionStatement[40115-40150]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[40759-40766]:Modifier[40546-40553]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[40767-40771]:PrimitiveType[40554-40558]"
    }, {
      "left" : "_writeStringCustom",
      "right" : "_writeStringCustom",
      "info" : "SimpleName[40772-40790]:SimpleName[40559-40577]"
    }, {
      "left" : "final int len",
      "right" : "final int len",
      "info" : "SingleVariableDeclaration[40791-40804]:SingleVariableDeclaration[40578-40591]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[40821-40832]:SimpleType[40608-40619]"
    }, {
      "left" : "JsonGenerationException",
      "right" : "JsonGenerationException",
      "info" : "SimpleType[40834-40857]:SimpleType[40621-40644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40862-42490]:Block[40649-42277]"
    }, {
      "left" : "int end = _outputTail + len;",
      "right" : "int end = _outputTail + len;",
      "info" : "VariableDeclarationStatement[40936-40964]:VariableDeclarationStatement[40723-40751]"
    }, {
      "left" : "final int[] escCodes = _outputEscapes;",
      "right" : "final int[] escCodes = _outputEscapes;",
      "info" : "VariableDeclarationStatement[40973-41011]:VariableDeclarationStatement[40760-40798]"
    }, {
      "left" : "final int maxNonEscaped = (_maximumNonEscapedChar < 1) ? 0xFFFF : _maximumNonEscapedChar;",
      "right" : "final int maxNonEscaped = (_maximumNonEscapedChar < 1) ? 0xFFFF : _maximumNonEscapedChar;",
      "info" : "VariableDeclarationStatement[41020-41109]:VariableDeclarationStatement[40807-40896]"
    }, {
      "left" : "final int escLimit = Math.min(escCodes.length, maxNonEscaped+1);",
      "right" : "final int escLimit = Math.min(escCodes.length, maxNonEscaped+1);",
      "info" : "VariableDeclarationStatement[41118-41182]:VariableDeclarationStatement[40905-40969]"
    }, {
      "left" : "int escCode = 0;",
      "right" : "int escCode = 0;",
      "info" : "VariableDeclarationStatement[41191-41207]:VariableDeclarationStatement[40978-40994]"
    }, {
      "left" : "final CharacterEscapes customEscapes = _characterEscapes;",
      "right" : "final CharacterEscapes customEscapes = _characterEscapes;",
      "info" : "VariableDeclarationStatement[41216-41273]:VariableDeclarationStatement[41003-41060]"
    }, {
      "left" : "output_loop:\n        while (_outputTail < end) {\n            char c;\n            // Fast loop for chars not needing escaping\n            escape_loop:\n            while (true) {\n                c = _outputBuffer[_outputTail];\n                if (c < escLimit) {\n                    escCode = escCodes[c];\n                    if (escCode != 0) {\n                        break escape_loop;\n                    }\n                } else if (c > maxNonEscaped) {\n                    escCode = CharacterEscapes.ESCAPE_STANDARD;\n                    break escape_loop;\n                } else {\n                    if ((_currentEscape = customEscapes.getEscapeSequence(c)) != null) {\n                        escCode = CharacterEscapes.ESCAPE_CUSTOM;\n                        break escape_loop;\n                    }\n                }\n                if (++_outputTail >= end) {\n                    break output_loop;\n                }\n            }\n            int flushLen = (_outputTail - _outputHead);\n            if (flushLen > 0) {\n                _writer.write(_outputBuffer, _outputHead, flushLen);\n            }\n            ++_outputTail;\n            _prependOrWriteCharacterEscape(c, escCode);\n        }",
      "right" : "output_loop:\n        while (_outputTail < end) {\n            char c;\n            // Fast loop for chars not needing escaping\n            escape_loop:\n            while (true) {\n                c = _outputBuffer[_outputTail];\n                if (c < escLimit) {\n                    escCode = escCodes[c];\n                    if (escCode != 0) {\n                        break escape_loop;\n                    }\n                } else if (c > maxNonEscaped) {\n                    escCode = CharacterEscapes.ESCAPE_STANDARD;\n                    break escape_loop;\n                } else {\n                    if ((_currentEscape = customEscapes.getEscapeSequence(c)) != null) {\n                        escCode = CharacterEscapes.ESCAPE_CUSTOM;\n                        break escape_loop;\n                    }\n                }\n                if (++_outputTail >= end) {\n                    break output_loop;\n                }\n            }\n            int flushLen = (_outputTail - _outputHead);\n            if (flushLen > 0) {\n                _writer.write(_outputBuffer, _outputHead, flushLen);\n            }\n            ++_outputTail;\n            _prependOrWriteCharacterEscape(c, escCode);\n        }",
      "info" : "LabeledStatement[41283-42484]:LabeledStatement[41070-42271]"
    }, {
      "left" : "while (_outputTail < end)",
      "right" : "while (_outputTail < end)",
      "info" : "WhileStatement[41304-42484]:WhileStatement[41091-42271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41330-42484]:Block[41117-42271]"
    }, {
      "left" : "char c;",
      "right" : "char c;",
      "info" : "VariableDeclarationStatement[41344-41351]:VariableDeclarationStatement[41131-41138]"
    }, {
      "left" : "escape_loop:\n            while (true) {\n                c = _outputBuffer[_outputTail];\n                if (c < escLimit) {\n                    escCode = escCodes[c];\n                    if (escCode != 0) {\n                        break escape_loop;\n                    }\n                } else if (c > maxNonEscaped) {\n                    escCode = CharacterEscapes.ESCAPE_STANDARD;\n                    break escape_loop;\n                } else {\n                    if ((_currentEscape = customEscapes.getEscapeSequence(c)) != null) {\n                        escCode = CharacterEscapes.ESCAPE_CUSTOM;\n                        break escape_loop;\n                    }\n                }\n                if (++_outputTail >= end) {\n                    break output_loop;\n                }\n            }",
      "right" : "escape_loop:\n            while (true) {\n                c = _outputBuffer[_outputTail];\n                if (c < escLimit) {\n                    escCode = escCodes[c];\n                    if (escCode != 0) {\n                        break escape_loop;\n                    }\n                } else if (c > maxNonEscaped) {\n                    escCode = CharacterEscapes.ESCAPE_STANDARD;\n                    break escape_loop;\n                } else {\n                    if ((_currentEscape = customEscapes.getEscapeSequence(c)) != null) {\n                        escCode = CharacterEscapes.ESCAPE_CUSTOM;\n                        break escape_loop;\n                    }\n                }\n                if (++_outputTail >= end) {\n                    break output_loop;\n                }\n            }",
      "info" : "LabeledStatement[41420-42220]:LabeledStatement[41207-42007]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[41445-42220]:WhileStatement[41232-42007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41458-42220]:Block[41245-42007]"
    }, {
      "left" : "c = _outputBuffer[_outputTail];",
      "right" : "c = _outputBuffer[_outputTail];",
      "info" : "ExpressionStatement[41476-41507]:ExpressionStatement[41263-41294]"
    }, {
      "left" : "if (c < escLimit)",
      "right" : "if (c < escLimit)",
      "info" : "IfStatement[41524-42105]:IfStatement[41311-41892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41542-41709]:Block[41329-41496]"
    }, {
      "left" : "escCode = escCodes[c];",
      "right" : "escCode = escCodes[c];",
      "info" : "ExpressionStatement[41564-41586]:ExpressionStatement[41351-41373]"
    }, {
      "left" : "if (escCode != 0)",
      "right" : "if (escCode != 0)",
      "info" : "IfStatement[41607-41691]:IfStatement[41394-41478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41625-41691]:Block[41412-41478]"
    }, {
      "left" : "break escape_loop;",
      "right" : "break escape_loop;",
      "info" : "BreakStatement[41651-41669]:BreakStatement[41438-41456]"
    }, {
      "left" : "if (c > maxNonEscaped)",
      "right" : "if (c > maxNonEscaped)",
      "info" : "IfStatement[41715-42105]:IfStatement[41502-41892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41738-41860]:Block[41525-41647]"
    }, {
      "left" : "escCode = CharacterEscapes.ESCAPE_STANDARD;",
      "right" : "escCode = CharacterEscapes.ESCAPE_STANDARD;",
      "info" : "ExpressionStatement[41760-41803]:ExpressionStatement[41547-41590]"
    }, {
      "left" : "break escape_loop;",
      "right" : "break escape_loop;",
      "info" : "BreakStatement[41824-41842]:BreakStatement[41611-41629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41866-42105]:Block[41653-41892]"
    }, {
      "left" : "if ((_currentEscape = customEscapes.getEscapeSequence(c)) != null)",
      "right" : "if ((_currentEscape = customEscapes.getEscapeSequence(c)) != null)",
      "info" : "IfStatement[41888-42087]:IfStatement[41675-41874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41955-42087]:Block[41742-41874]"
    }, {
      "left" : "escCode = CharacterEscapes.ESCAPE_CUSTOM;",
      "right" : "escCode = CharacterEscapes.ESCAPE_CUSTOM;",
      "info" : "ExpressionStatement[41981-42022]:ExpressionStatement[41768-41809]"
    }, {
      "left" : "break escape_loop;",
      "right" : "break escape_loop;",
      "info" : "BreakStatement[42047-42065]:BreakStatement[41834-41852]"
    }, {
      "left" : "if (++_outputTail >= end)",
      "right" : "if (++_outputTail >= end)",
      "info" : "IfStatement[42122-42206]:IfStatement[41909-41993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42148-42206]:Block[41935-41993]"
    }, {
      "left" : "break output_loop;",
      "right" : "break output_loop;",
      "info" : "BreakStatement[42170-42188]:BreakStatement[41957-41975]"
    }, {
      "left" : "int flushLen = (_outputTail - _outputHead);",
      "right" : "int flushLen = (_outputTail - _outputHead);",
      "info" : "VariableDeclarationStatement[42233-42276]:VariableDeclarationStatement[42020-42063]"
    }, {
      "left" : "if (flushLen > 0)",
      "right" : "if (flushLen > 0)",
      "info" : "IfStatement[42289-42391]:IfStatement[42076-42178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42307-42391]:Block[42094-42178]"
    }, {
      "left" : "_writer.write(_outputBuffer, _outputHead, flushLen);",
      "right" : "_writer.write(_outputBuffer, _outputHead, flushLen);",
      "info" : "ExpressionStatement[42325-42377]:ExpressionStatement[42112-42164]"
    }, {
      "left" : "++_outputTail;",
      "right" : "++_outputTail;",
      "info" : "ExpressionStatement[42404-42418]:ExpressionStatement[42191-42205]"
    }, {
      "left" : "_prependOrWriteCharacterEscape(c, escCode);",
      "right" : "_prependOrWriteCharacterEscape(c, escCode);",
      "info" : "ExpressionStatement[42431-42474]:ExpressionStatement[42218-42261]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[42496-42503]:Modifier[42283-42290]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[42504-42508]:PrimitiveType[42291-42295]"
    }, {
      "left" : "_writeSegmentCustom",
      "right" : "_writeSegmentCustom",
      "info" : "SimpleName[42509-42528]:SimpleName[42296-42315]"
    }, {
      "left" : "int end",
      "right" : "int end",
      "info" : "SingleVariableDeclaration[42529-42536]:SingleVariableDeclaration[42316-42323]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[42553-42564]:SimpleType[42340-42351]"
    }, {
      "left" : "JsonGenerationException",
      "right" : "JsonGenerationException",
      "info" : "SimpleType[42566-42589]:SimpleType[42353-42376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42594-44175]:Block[42381-43962]"
    }, {
      "left" : "final int[] escCodes = _outputEscapes;",
      "right" : "final int[] escCodes = _outputEscapes;",
      "info" : "VariableDeclarationStatement[42604-42642]:VariableDeclarationStatement[42391-42429]"
    }, {
      "left" : "final int maxNonEscaped = (_maximumNonEscapedChar < 1) ? 0xFFFF : _maximumNonEscapedChar;",
      "right" : "final int maxNonEscaped = (_maximumNonEscapedChar < 1) ? 0xFFFF : _maximumNonEscapedChar;",
      "info" : "VariableDeclarationStatement[42651-42740]:VariableDeclarationStatement[42438-42527]"
    }, {
      "left" : "final int escLimit = Math.min(escCodes.length, maxNonEscaped+1);",
      "right" : "final int escLimit = Math.min(escCodes.length, maxNonEscaped+1);",
      "info" : "VariableDeclarationStatement[42749-42813]:VariableDeclarationStatement[42536-42600]"
    }, {
      "left" : "final CharacterEscapes customEscapes = _characterEscapes;",
      "right" : "final CharacterEscapes customEscapes = _characterEscapes;",
      "info" : "VariableDeclarationStatement[42822-42879]:VariableDeclarationStatement[42609-42666]"
    }, {
      "left" : "int ptr = 0;",
      "right" : "int ptr = 0;",
      "info" : "VariableDeclarationStatement[42893-42905]:VariableDeclarationStatement[42680-42692]"
    }, {
      "left" : "int escCode = 0;",
      "right" : "int escCode = 0;",
      "info" : "VariableDeclarationStatement[42914-42930]:VariableDeclarationStatement[42701-42717]"
    }, {
      "left" : "int start = ptr;",
      "right" : "int start = ptr;",
      "info" : "VariableDeclarationStatement[42939-42955]:VariableDeclarationStatement[42726-42742]"
    }, {
      "left" : "output_loop:\n        while (ptr < end) {\n            // Fast loop for chars not needing escaping\n            char c;\n            while (true) {\n                c = _outputBuffer[ptr];\n                if (c < escLimit) {\n                    escCode = escCodes[c];\n                    if (escCode != 0) {\n                        break;\n                    }\n                } else if (c > maxNonEscaped) {\n                    escCode = CharacterEscapes.ESCAPE_STANDARD;\n                    break;\n                } else {\n                    if ((_currentEscape = customEscapes.getEscapeSequence(c)) != null) {\n                        escCode = CharacterEscapes.ESCAPE_CUSTOM;\n                        break;\n                    }\n                }\n                if (++ptr >= end) {\n                    break;\n                }\n            }\n            int flushLen = (ptr - start);\n            if (flushLen > 0) {\n                _writer.write(_outputBuffer, start, flushLen);\n                if (ptr >= end) {\n                    break output_loop;\n                }\n            }\n            ++ptr;\n            start = _prependOrWriteCharacterEscape(_outputBuffer, ptr, end, c, escCode);\n        }",
      "right" : "output_loop:\n        while (ptr < end) {\n            // Fast loop for chars not needing escaping\n            char c;\n            while (true) {\n                c = _outputBuffer[ptr];\n                if (c < escLimit) {\n                    escCode = escCodes[c];\n                    if (escCode != 0) {\n                        break;\n                    }\n                } else if (c > maxNonEscaped) {\n                    escCode = CharacterEscapes.ESCAPE_STANDARD;\n                    break;\n                } else {\n                    if ((_currentEscape = customEscapes.getEscapeSequence(c)) != null) {\n                        escCode = CharacterEscapes.ESCAPE_CUSTOM;\n                        break;\n                    }\n                }\n                if (++ptr >= end) {\n                    break;\n                }\n            }\n            int flushLen = (ptr - start);\n            if (flushLen > 0) {\n                _writer.write(_outputBuffer, start, flushLen);\n                if (ptr >= end) {\n                    break output_loop;\n                }\n            }\n            ++ptr;\n            start = _prependOrWriteCharacterEscape(_outputBuffer, ptr, end, c, escCode);\n        }",
      "info" : "LabeledStatement[42969-44169]:LabeledStatement[42756-43956]"
    }, {
      "left" : "while (ptr < end)",
      "right" : "while (ptr < end)",
      "info" : "WhileStatement[42990-44169]:WhileStatement[42777-43956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43008-44169]:Block[42795-43956]"
    }, {
      "left" : "char c;",
      "right" : "char c;",
      "info" : "VariableDeclarationStatement[43078-43085]:VariableDeclarationStatement[42865-42872]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[43098-43809]:WhileStatement[42885-43596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43111-43809]:Block[42898-43596]"
    }, {
      "left" : "c = _outputBuffer[ptr];",
      "right" : "c = _outputBuffer[ptr];",
      "info" : "ExpressionStatement[43129-43152]:ExpressionStatement[42916-42939]"
    }, {
      "left" : "if (c < escLimit)",
      "right" : "if (c < escLimit)",
      "info" : "IfStatement[43169-43714]:IfStatement[42956-43501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43187-43342]:Block[42974-43129]"
    }, {
      "left" : "escCode = escCodes[c];",
      "right" : "escCode = escCodes[c];",
      "info" : "ExpressionStatement[43209-43231]:ExpressionStatement[42996-43018]"
    }, {
      "left" : "if (escCode != 0)",
      "right" : "if (escCode != 0)",
      "info" : "IfStatement[43252-43324]:IfStatement[43039-43111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43270-43324]:Block[43057-43111]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[43296-43302]:BreakStatement[43083-43089]"
    }, {
      "left" : "if (c > maxNonEscaped)",
      "right" : "if (c > maxNonEscaped)",
      "info" : "IfStatement[43348-43714]:IfStatement[43135-43501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43371-43481]:Block[43158-43268]"
    }, {
      "left" : "escCode = CharacterEscapes.ESCAPE_STANDARD;",
      "right" : "escCode = CharacterEscapes.ESCAPE_STANDARD;",
      "info" : "ExpressionStatement[43393-43436]:ExpressionStatement[43180-43223]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[43457-43463]:BreakStatement[43244-43250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43487-43714]:Block[43274-43501]"
    }, {
      "left" : "if ((_currentEscape = customEscapes.getEscapeSequence(c)) != null)",
      "right" : "if ((_currentEscape = customEscapes.getEscapeSequence(c)) != null)",
      "info" : "IfStatement[43509-43696]:IfStatement[43296-43483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43576-43696]:Block[43363-43483]"
    }, {
      "left" : "escCode = CharacterEscapes.ESCAPE_CUSTOM;",
      "right" : "escCode = CharacterEscapes.ESCAPE_CUSTOM;",
      "info" : "ExpressionStatement[43602-43643]:ExpressionStatement[43389-43430]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[43668-43674]:BreakStatement[43455-43461]"
    }, {
      "left" : "if (++ptr >= end)",
      "right" : "if (++ptr >= end)",
      "info" : "IfStatement[43731-43795]:IfStatement[43518-43582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43749-43795]:Block[43536-43582]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[43771-43777]:BreakStatement[43558-43564]"
    }, {
      "left" : "int flushLen = (ptr - start);",
      "right" : "int flushLen = (ptr - start);",
      "info" : "VariableDeclarationStatement[43822-43851]:VariableDeclarationStatement[43609-43638]"
    }, {
      "left" : "if (flushLen > 0)",
      "right" : "if (flushLen > 0)",
      "info" : "IfStatement[43864-44051]:IfStatement[43651-43838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43882-44051]:Block[43669-43838]"
    }, {
      "left" : "_writer.write(_outputBuffer, start, flushLen);",
      "right" : "_writer.write(_outputBuffer, start, flushLen);",
      "info" : "ExpressionStatement[43900-43946]:ExpressionStatement[43687-43733]"
    }, {
      "left" : "if (ptr >= end)",
      "right" : "if (ptr >= end)",
      "info" : "IfStatement[43963-44037]:IfStatement[43750-43824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43979-44037]:Block[43766-43824]"
    }, {
      "left" : "break output_loop;",
      "right" : "break output_loop;",
      "info" : "BreakStatement[44001-44019]:BreakStatement[43788-43806]"
    }, {
      "left" : "++ptr;",
      "right" : "++ptr;",
      "info" : "ExpressionStatement[44064-44070]:ExpressionStatement[43851-43857]"
    }, {
      "left" : "start = _prependOrWriteCharacterEscape(_outputBuffer, ptr, end, c, escCode);",
      "right" : "start = _prependOrWriteCharacterEscape(_outputBuffer, ptr, end, c, escCode);",
      "info" : "ExpressionStatement[44083-44159]:ExpressionStatement[43870-43946]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[44181-44188]:Modifier[43968-43975]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[44189-44193]:PrimitiveType[43976-43980]"
    }, {
      "left" : "_writeStringCustom",
      "right" : "_writeStringCustom",
      "info" : "SimpleName[44194-44212]:SimpleName[43981-43999]"
    }, {
      "left" : "char[] text",
      "right" : "char[] text",
      "info" : "SingleVariableDeclaration[44213-44224]:SingleVariableDeclaration[44000-44011]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[44226-44236]:SingleVariableDeclaration[44013-44023]"
    }, {
      "left" : "int len",
      "right" : "int len",
      "info" : "SingleVariableDeclaration[44238-44245]:SingleVariableDeclaration[44025-44032]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[44262-44273]:SimpleType[44049-44060]"
    }, {
      "left" : "JsonGenerationException",
      "right" : "JsonGenerationException",
      "info" : "SimpleType[44275-44298]:SimpleType[44062-44085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44303-46438]:Block[44090-46225]"
    }, {
      "left" : "len += offset;",
      "right" : "len += offset;",
      "info" : "ExpressionStatement[44313-44327]:ExpressionStatement[44100-44114]"
    }, {
      "left" : "final int[] escCodes = _outputEscapes;",
      "right" : "final int[] escCodes = _outputEscapes;",
      "info" : "VariableDeclarationStatement[44372-44410]:VariableDeclarationStatement[44159-44197]"
    }, {
      "left" : "final int maxNonEscaped = (_maximumNonEscapedChar < 1) ? 0xFFFF : _maximumNonEscapedChar;",
      "right" : "final int maxNonEscaped = (_maximumNonEscapedChar < 1) ? 0xFFFF : _maximumNonEscapedChar;",
      "info" : "VariableDeclarationStatement[44419-44508]:VariableDeclarationStatement[44206-44295]"
    }, {
      "left" : "final int escLimit = Math.min(escCodes.length, maxNonEscaped+1);",
      "right" : "final int escLimit = Math.min(escCodes.length, maxNonEscaped+1);",
      "info" : "VariableDeclarationStatement[44517-44581]:VariableDeclarationStatement[44304-44368]"
    }, {
      "left" : "final CharacterEscapes customEscapes = _characterEscapes;",
      "right" : "final CharacterEscapes customEscapes = _characterEscapes;",
      "info" : "VariableDeclarationStatement[44590-44647]:VariableDeclarationStatement[44377-44434]"
    }, {
      "left" : "int escCode = 0;",
      "right" : "int escCode = 0;",
      "info" : "VariableDeclarationStatement[44657-44673]:VariableDeclarationStatement[44444-44460]"
    }, {
      "left" : "while (offset < len)",
      "right" : "while (offset < len)",
      "info" : "WhileStatement[44691-46432]:WhileStatement[44478-46219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44712-46432]:Block[44499-46219]"
    }, {
      "left" : "int start = offset;",
      "right" : "int start = offset;",
      "info" : "VariableDeclarationStatement[44726-44745]:VariableDeclarationStatement[44513-44532]"
    }, {
      "left" : "char c;",
      "right" : "char c;",
      "info" : "VariableDeclarationStatement[44758-44765]:VariableDeclarationStatement[44545-44552]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[44791-45499]:WhileStatement[44578-45286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44804-45499]:Block[44591-45286]"
    }, {
      "left" : "c = text[offset];",
      "right" : "c = text[offset];",
      "info" : "ExpressionStatement[44822-44839]:ExpressionStatement[44609-44626]"
    }, {
      "left" : "if (c < escLimit)",
      "right" : "if (c < escLimit)",
      "info" : "IfStatement[44856-45401]:IfStatement[44643-45188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44874-45029]:Block[44661-44816]"
    }, {
      "left" : "escCode = escCodes[c];",
      "right" : "escCode = escCodes[c];",
      "info" : "ExpressionStatement[44896-44918]:ExpressionStatement[44683-44705]"
    }, {
      "left" : "if (escCode != 0)",
      "right" : "if (escCode != 0)",
      "info" : "IfStatement[44939-45011]:IfStatement[44726-44798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44957-45011]:Block[44744-44798]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44983-44989]:BreakStatement[44770-44776]"
    }, {
      "left" : "if (c > maxNonEscaped)",
      "right" : "if (c > maxNonEscaped)",
      "info" : "IfStatement[45035-45401]:IfStatement[44822-45188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45058-45168]:Block[44845-44955]"
    }, {
      "left" : "escCode = CharacterEscapes.ESCAPE_STANDARD;",
      "right" : "escCode = CharacterEscapes.ESCAPE_STANDARD;",
      "info" : "ExpressionStatement[45080-45123]:ExpressionStatement[44867-44910]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[45144-45150]:BreakStatement[44931-44937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45174-45401]:Block[44961-45188]"
    }, {
      "left" : "if ((_currentEscape = customEscapes.getEscapeSequence(c)) != null)",
      "right" : "if ((_currentEscape = customEscapes.getEscapeSequence(c)) != null)",
      "info" : "IfStatement[45196-45383]:IfStatement[44983-45170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45263-45383]:Block[45050-45170]"
    }, {
      "left" : "escCode = CharacterEscapes.ESCAPE_CUSTOM;",
      "right" : "escCode = CharacterEscapes.ESCAPE_CUSTOM;",
      "info" : "ExpressionStatement[45289-45330]:ExpressionStatement[45076-45117]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[45355-45361]:BreakStatement[45142-45148]"
    }, {
      "left" : "if (++offset >= len)",
      "right" : "if (++offset >= len)",
      "info" : "IfStatement[45418-45485]:IfStatement[45205-45272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45439-45485]:Block[45226-45272]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[45461-45467]:BreakStatement[45248-45254]"
    }, {
      "left" : "int newAmount = offset - start;",
      "right" : "int newAmount = offset - start;",
      "info" : "VariableDeclarationStatement[45581-45612]:VariableDeclarationStatement[45368-45399]"
    }, {
      "left" : "if (newAmount < SHORT_WRITE)",
      "right" : "if (newAmount < SHORT_WRITE)",
      "info" : "IfStatement[45625-46196]:IfStatement[45412-45983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45654-46053]:Block[45441-45840]"
    }, {
      "left" : "if ((_outputTail + newAmount) > _outputEnd)",
      "right" : "if ((_outputTail + newAmount) > _outputEnd)",
      "info" : "IfStatement[45749-45848]:IfStatement[45536-45635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45793-45848]:Block[45580-45635]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[45815-45830]:ExpressionStatement[45602-45617]"
    }, {
      "left" : "if (newAmount > 0)",
      "right" : "if (newAmount > 0)",
      "info" : "IfStatement[45865-46039]:IfStatement[45652-45826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45884-46039]:Block[45671-45826]"
    }, {
      "left" : "System.arraycopy(text, start, _outputBuffer, _outputTail, newAmount);",
      "right" : "System.arraycopy(text, start, _outputBuffer, _outputTail, newAmount);",
      "info" : "ExpressionStatement[45906-45975]:ExpressionStatement[45693-45762]"
    }, {
      "left" : "_outputTail += newAmount;",
      "right" : "_outputTail += newAmount;",
      "info" : "ExpressionStatement[45996-46021]:ExpressionStatement[45783-45808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46059-46196]:Block[45846-45983]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[46112-46127]:ExpressionStatement[45899-45914]"
    }, {
      "left" : "_writer.write(text, start, newAmount);",
      "right" : "_writer.write(text, start, newAmount);",
      "info" : "ExpressionStatement[46144-46182]:ExpressionStatement[45931-45969]"
    }, {
      "left" : "if (offset >= len)",
      "right" : "if (offset >= len)",
      "info" : "IfStatement[46242-46306]:IfStatement[46029-46093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46261-46306]:Block[46048-46093]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[46286-46292]:BreakStatement[46073-46079]"
    }, {
      "left" : "++offset;",
      "right" : "++offset;",
      "info" : "ExpressionStatement[46365-46374]:ExpressionStatement[46152-46161]"
    }, {
      "left" : "_appendCharacterEscape(c, escCode);",
      "right" : "_appendCharacterEscape(c, escCode);",
      "info" : "ExpressionStatement[46387-46422]:ExpressionStatement[46174-46209]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[46647-46656]:Modifier[46434-46443]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[46657-46661]:PrimitiveType[46444-46448]"
    }, {
      "left" : "_writeBinary",
      "right" : "_writeBinary",
      "info" : "SimpleName[46662-46674]:SimpleName[46449-46461]"
    }, {
      "left" : "Base64Variant b64variant",
      "right" : "Base64Variant b64variant",
      "info" : "SingleVariableDeclaration[46675-46699]:SingleVariableDeclaration[46462-46486]"
    }, {
      "left" : "byte[] input",
      "right" : "byte[] input",
      "info" : "SingleVariableDeclaration[46701-46713]:SingleVariableDeclaration[46488-46500]"
    }, {
      "left" : "int inputPtr",
      "right" : "int inputPtr",
      "info" : "SingleVariableDeclaration[46715-46727]:SingleVariableDeclaration[46502-46514]"
    }, {
      "left" : "final int inputEnd",
      "right" : "final int inputEnd",
      "info" : "SingleVariableDeclaration[46729-46747]:SingleVariableDeclaration[46516-46534]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[46764-46775]:SimpleType[46551-46562]"
    }, {
      "left" : "JsonGenerationException",
      "right" : "JsonGenerationException",
      "info" : "SimpleType[46777-46800]:SimpleType[46564-46587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46805-48535]:Block[46592-48322]"
    }, {
      "left" : "int safeInputEnd = inputEnd - 3;",
      "right" : "int safeInputEnd = inputEnd - 3;",
      "info" : "VariableDeclarationStatement[46880-46912]:VariableDeclarationStatement[46667-46699]"
    }, {
      "left" : "int safeOutputEnd = _outputEnd - 6;",
      "right" : "int safeOutputEnd = _outputEnd - 6;",
      "info" : "VariableDeclarationStatement[47001-47036]:VariableDeclarationStatement[46788-46823]"
    }, {
      "left" : "int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;",
      "right" : "int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;",
      "info" : "VariableDeclarationStatement[47045-47101]:VariableDeclarationStatement[46832-46888]"
    }, {
      "left" : "while (inputPtr <= safeInputEnd)",
      "right" : "while (inputPtr <= safeInputEnd)",
      "info" : "WhileStatement[47175-47929]:WhileStatement[46962-47716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47208-47929]:Block[46995-47716]"
    }, {
      "left" : "if (_outputTail > safeOutputEnd)",
      "right" : "if (_outputTail > safeOutputEnd)",
      "info" : "IfStatement[47222-47319]:IfStatement[47009-47106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47255-47319]:Block[47042-47106]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[47290-47305]:ExpressionStatement[47077-47092]"
    }, {
      "left" : "int b24 = ((int) input[inputPtr++]) << 8;",
      "right" : "int b24 = ((int) input[inputPtr++]) << 8;",
      "info" : "VariableDeclarationStatement[47390-47431]:VariableDeclarationStatement[47177-47218]"
    }, {
      "left" : "b24 |= ((int) input[inputPtr++]) & 0xFF;",
      "right" : "b24 |= ((int) input[inputPtr++]) & 0xFF;",
      "info" : "ExpressionStatement[47444-47484]:ExpressionStatement[47231-47271]"
    }, {
      "left" : "b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);",
      "right" : "b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);",
      "info" : "ExpressionStatement[47497-47551]:ExpressionStatement[47284-47338]"
    }, {
      "left" : "_outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);",
      "right" : "_outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);",
      "info" : "ExpressionStatement[47564-47640]:ExpressionStatement[47351-47427]"
    }, {
      "left" : "if (--chunksBeforeLF <= 0)",
      "right" : "if (--chunksBeforeLF <= 0)",
      "info" : "IfStatement[47653-47919]:IfStatement[47440-47706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47680-47919]:Block[47467-47706]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '\\\\';",
      "right" : "_outputBuffer[_outputTail++] = '\\\\';",
      "info" : "ExpressionStatement[47748-47784]:ExpressionStatement[47535-47571]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = 'n';",
      "right" : "_outputBuffer[_outputTail++] = 'n';",
      "info" : "ExpressionStatement[47801-47836]:ExpressionStatement[47588-47623]"
    }, {
      "left" : "chunksBeforeLF = b64variant.getMaxLineLength() >> 2;",
      "right" : "chunksBeforeLF = b64variant.getMaxLineLength() >> 2;",
      "info" : "ExpressionStatement[47853-47905]:ExpressionStatement[47640-47692]"
    }, {
      "left" : "int inputLeft = inputEnd - inputPtr;",
      "right" : "int inputLeft = inputEnd - inputPtr;",
      "info" : "VariableDeclarationStatement[48003-48039]:VariableDeclarationStatement[47790-47826]"
    }, {
      "left" : "if (inputLeft > 0)",
      "right" : "if (inputLeft > 0)",
      "info" : "IfStatement[48061-48529]:IfStatement[47848-48316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48080-48529]:Block[47867-48316]"
    }, {
      "left" : "if (_outputTail > safeOutputEnd)",
      "right" : "if (_outputTail > safeOutputEnd)",
      "info" : "IfStatement[48134-48250]:IfStatement[47921-48037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48167-48250]:Block[47954-48037]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[48221-48236]:ExpressionStatement[48008-48023]"
    }, {
      "left" : "int b24 = ((int) input[inputPtr++]) << 16;",
      "right" : "int b24 = ((int) input[inputPtr++]) << 16;",
      "info" : "VariableDeclarationStatement[48263-48305]:VariableDeclarationStatement[48050-48092]"
    }, {
      "left" : "if (inputLeft == 2)",
      "right" : "if (inputLeft == 2)",
      "info" : "IfStatement[48318-48417]:IfStatement[48105-48204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48338-48417]:Block[48125-48204]"
    }, {
      "left" : "b24 |= (((int) input[inputPtr++]) & 0xFF) << 8;",
      "right" : "b24 |= (((int) input[inputPtr++]) & 0xFF) << 8;",
      "info" : "ExpressionStatement[48356-48403]:ExpressionStatement[48143-48190]"
    }, {
      "left" : "_outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);",
      "right" : "_outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);",
      "info" : "ExpressionStatement[48430-48519]:ExpressionStatement[48217-48306]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[48600-48609]:Modifier[48387-48396]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[48610-48613]:PrimitiveType[48397-48400]"
    }, {
      "left" : "_writeBinary",
      "right" : "_writeBinary",
      "info" : "SimpleName[48614-48626]:SimpleName[48401-48413]"
    }, {
      "left" : "Base64Variant b64variant",
      "right" : "Base64Variant b64variant",
      "info" : "SingleVariableDeclaration[48627-48651]:SingleVariableDeclaration[48414-48438]"
    }, {
      "left" : "InputStream data",
      "right" : "InputStream data",
      "info" : "SingleVariableDeclaration[48665-48681]:SingleVariableDeclaration[48452-48468]"
    }, {
      "left" : "byte[] readBuffer",
      "right" : "byte[] readBuffer",
      "info" : "SingleVariableDeclaration[48683-48700]:SingleVariableDeclaration[48470-48487]"
    }, {
      "left" : "int bytesLeft",
      "right" : "int bytesLeft",
      "info" : "SingleVariableDeclaration[48702-48715]:SingleVariableDeclaration[48489-48502]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[48732-48743]:SimpleType[48519-48530]"
    }, {
      "left" : "JsonGenerationException",
      "right" : "JsonGenerationException",
      "info" : "SimpleType[48745-48768]:SimpleType[48532-48555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48773-51070]:Block[48560-50857]"
    }, {
      "left" : "int inputPtr = 0;",
      "right" : "int inputPtr = 0;",
      "info" : "VariableDeclarationStatement[48783-48800]:VariableDeclarationStatement[48570-48587]"
    }, {
      "left" : "int inputEnd = 0;",
      "right" : "int inputEnd = 0;",
      "info" : "VariableDeclarationStatement[48809-48826]:VariableDeclarationStatement[48596-48613]"
    }, {
      "left" : "int lastFullOffset = -3;",
      "right" : "int lastFullOffset = -3;",
      "info" : "VariableDeclarationStatement[48835-48859]:VariableDeclarationStatement[48622-48646]"
    }, {
      "left" : "int safeOutputEnd = _outputEnd - 6;",
      "right" : "int safeOutputEnd = _outputEnd - 6;",
      "info" : "VariableDeclarationStatement[48964-48999]:VariableDeclarationStatement[48751-48786]"
    }, {
      "left" : "int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;",
      "right" : "int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;",
      "info" : "VariableDeclarationStatement[49008-49064]:VariableDeclarationStatement[48795-48851]"
    }, {
      "left" : "while (bytesLeft > 2)",
      "right" : "while (bytesLeft > 2)",
      "info" : "WhileStatement[49074-50137]:WhileStatement[48861-49924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49096-50137]:Block[48883-49924]"
    }, {
      "left" : "if (inputPtr > lastFullOffset)",
      "right" : "if (inputPtr > lastFullOffset)",
      "info" : "IfStatement[49141-49482]:IfStatement[48928-49269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49172-49482]:Block[48959-49269]"
    }, {
      "left" : "inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);",
      "right" : "inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);",
      "info" : "ExpressionStatement[49190-49260]:ExpressionStatement[48977-49047]"
    }, {
      "left" : "inputPtr = 0;",
      "right" : "inputPtr = 0;",
      "info" : "ExpressionStatement[49277-49290]:ExpressionStatement[49064-49077]"
    }, {
      "left" : "if (inputEnd < 3)",
      "right" : "if (inputEnd < 3)",
      "info" : "IfStatement[49307-49423]:IfStatement[49094-49210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49325-49423]:Block[49112-49210]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49399-49405]:BreakStatement[49186-49192]"
    }, {
      "left" : "lastFullOffset = inputEnd-3;",
      "right" : "lastFullOffset = inputEnd-3;",
      "info" : "ExpressionStatement[49440-49468]:ExpressionStatement[49227-49255]"
    }, {
      "left" : "if (_outputTail > safeOutputEnd)",
      "right" : "if (_outputTail > safeOutputEnd)",
      "info" : "IfStatement[49495-49592]:IfStatement[49282-49379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49528-49592]:Block[49315-49379]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[49563-49578]:ExpressionStatement[49350-49365]"
    }, {
      "left" : "int b24 = ((int) readBuffer[inputPtr++]) << 8;",
      "right" : "int b24 = ((int) readBuffer[inputPtr++]) << 8;",
      "info" : "VariableDeclarationStatement[49605-49651]:VariableDeclarationStatement[49392-49438]"
    }, {
      "left" : "b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;",
      "right" : "b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;",
      "info" : "ExpressionStatement[49664-49709]:ExpressionStatement[49451-49496]"
    }, {
      "left" : "b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);",
      "right" : "b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);",
      "info" : "ExpressionStatement[49722-49781]:ExpressionStatement[49509-49568]"
    }, {
      "left" : "bytesLeft -= 3;",
      "right" : "bytesLeft -= 3;",
      "info" : "ExpressionStatement[49794-49809]:ExpressionStatement[49581-49596]"
    }, {
      "left" : "_outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);",
      "right" : "_outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);",
      "info" : "ExpressionStatement[49822-49898]:ExpressionStatement[49609-49685]"
    }, {
      "left" : "if (--chunksBeforeLF <= 0)",
      "right" : "if (--chunksBeforeLF <= 0)",
      "info" : "IfStatement[49911-50127]:IfStatement[49698-49914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49938-50127]:Block[49725-49914]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '\\\\';",
      "right" : "_outputBuffer[_outputTail++] = '\\\\';",
      "info" : "ExpressionStatement[49956-49992]:ExpressionStatement[49743-49779]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = 'n';",
      "right" : "_outputBuffer[_outputTail++] = 'n';",
      "info" : "ExpressionStatement[50009-50044]:ExpressionStatement[49796-49831]"
    }, {
      "left" : "chunksBeforeLF = b64variant.getMaxLineLength() >> 2;",
      "right" : "chunksBeforeLF = b64variant.getMaxLineLength() >> 2;",
      "info" : "ExpressionStatement[50061-50113]:ExpressionStatement[49848-49900]"
    }, {
      "left" : "if (bytesLeft > 0)",
      "right" : "if (bytesLeft > 0)",
      "info" : "IfStatement[50219-51038]:IfStatement[50006-50825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50238-51038]:Block[50025-50825]"
    }, {
      "left" : "inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);",
      "right" : "inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);",
      "info" : "ExpressionStatement[50252-50322]:ExpressionStatement[50039-50109]"
    }, {
      "left" : "inputPtr = 0;",
      "right" : "inputPtr = 0;",
      "info" : "ExpressionStatement[50335-50348]:ExpressionStatement[50122-50135]"
    }, {
      "left" : "if (inputEnd > 0)",
      "right" : "if (inputEnd > 0)",
      "info" : "IfStatement[50361-51028]:IfStatement[50148-50815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50379-51028]:Block[50166-50815]"
    }, {
      "left" : "if (_outputTail > safeOutputEnd)",
      "right" : "if (_outputTail > safeOutputEnd)",
      "info" : "IfStatement[50437-50561]:IfStatement[50224-50348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50470-50561]:Block[50257-50348]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[50528-50543]:ExpressionStatement[50315-50330]"
    }, {
      "left" : "int b24 = ((int) readBuffer[inputPtr++]) << 16;",
      "right" : "int b24 = ((int) readBuffer[inputPtr++]) << 16;",
      "info" : "VariableDeclarationStatement[50578-50625]:VariableDeclarationStatement[50365-50412]"
    }, {
      "left" : "int amount;",
      "right" : "int amount;",
      "info" : "VariableDeclarationStatement[50642-50653]:VariableDeclarationStatement[50429-50440]"
    }, {
      "left" : "if (inputPtr < inputEnd)",
      "right" : "if (inputPtr < inputEnd)",
      "info" : "IfStatement[50670-50874]:IfStatement[50457-50661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50695-50817]:Block[50482-50604]"
    }, {
      "left" : "b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;",
      "right" : "b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;",
      "info" : "ExpressionStatement[50717-50767]:ExpressionStatement[50504-50554]"
    }, {
      "left" : "amount = 2;",
      "right" : "amount = 2;",
      "info" : "ExpressionStatement[50788-50799]:ExpressionStatement[50575-50586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50823-50874]:Block[50610-50661]"
    }, {
      "left" : "amount = 1;",
      "right" : "amount = 1;",
      "info" : "ExpressionStatement[50845-50856]:ExpressionStatement[50632-50643]"
    }, {
      "left" : "_outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);",
      "right" : "_outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);",
      "info" : "ExpressionStatement[50891-50977]:ExpressionStatement[50678-50764]"
    }, {
      "left" : "bytesLeft -= amount;",
      "right" : "bytesLeft -= amount;",
      "info" : "ExpressionStatement[50994-51014]:ExpressionStatement[50781-50801]"
    }, {
      "left" : "return bytesLeft;",
      "right" : "return bytesLeft;",
      "info" : "ReturnStatement[51047-51064]:ReturnStatement[50834-50851]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[51123-51132]:Modifier[50910-50919]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[51133-51136]:PrimitiveType[50920-50923]"
    }, {
      "left" : "_writeBinary",
      "right" : "_writeBinary",
      "info" : "SimpleName[51137-51149]:SimpleName[50924-50936]"
    }, {
      "left" : "Base64Variant b64variant",
      "right" : "Base64Variant b64variant",
      "info" : "SingleVariableDeclaration[51150-51174]:SingleVariableDeclaration[50937-50961]"
    }, {
      "left" : "InputStream data",
      "right" : "InputStream data",
      "info" : "SingleVariableDeclaration[51188-51204]:SingleVariableDeclaration[50975-50991]"
    }, {
      "left" : "byte[] readBuffer",
      "right" : "byte[] readBuffer",
      "info" : "SingleVariableDeclaration[51206-51223]:SingleVariableDeclaration[50993-51010]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[51240-51251]:SimpleType[51027-51038]"
    }, {
      "left" : "JsonGenerationException",
      "right" : "JsonGenerationException",
      "info" : "SimpleType[51253-51276]:SimpleType[51040-51063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51281-53455]:Block[51068-53242]"
    }, {
      "left" : "int inputPtr = 0;",
      "right" : "int inputPtr = 0;",
      "info" : "VariableDeclarationStatement[51291-51308]:VariableDeclarationStatement[51078-51095]"
    }, {
      "left" : "int inputEnd = 0;",
      "right" : "int inputEnd = 0;",
      "info" : "VariableDeclarationStatement[51317-51334]:VariableDeclarationStatement[51104-51121]"
    }, {
      "left" : "int lastFullOffset = -3;",
      "right" : "int lastFullOffset = -3;",
      "info" : "VariableDeclarationStatement[51343-51367]:VariableDeclarationStatement[51130-51154]"
    }, {
      "left" : "int bytesDone = 0;",
      "right" : "int bytesDone = 0;",
      "info" : "VariableDeclarationStatement[51376-51394]:VariableDeclarationStatement[51163-51181]"
    }, {
      "left" : "int safeOutputEnd = _outputEnd - 6;",
      "right" : "int safeOutputEnd = _outputEnd - 6;",
      "info" : "VariableDeclarationStatement[51492-51527]:VariableDeclarationStatement[51279-51314]"
    }, {
      "left" : "int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;",
      "right" : "int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;",
      "info" : "VariableDeclarationStatement[51536-51592]:VariableDeclarationStatement[51323-51379]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[51666-52776]:WhileStatement[51453-52563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51679-52776]:Block[51466-52563]"
    }, {
      "left" : "if (inputPtr > lastFullOffset)",
      "right" : "if (inputPtr > lastFullOffset)",
      "info" : "IfStatement[51693-52063]:IfStatement[51480-51850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51724-52063]:Block[51511-51850]"
    }, {
      "left" : "inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, readBuffer.length);",
      "right" : "inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, readBuffer.length);",
      "info" : "ExpressionStatement[51763-51841]:ExpressionStatement[51550-51628]"
    }, {
      "left" : "inputPtr = 0;",
      "right" : "inputPtr = 0;",
      "info" : "ExpressionStatement[51858-51871]:ExpressionStatement[51645-51658]"
    }, {
      "left" : "if (inputEnd < 3)",
      "right" : "if (inputEnd < 3)",
      "info" : "IfStatement[51888-52004]:IfStatement[51675-51791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51906-52004]:Block[51693-51791]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51980-51986]:BreakStatement[51767-51773]"
    }, {
      "left" : "lastFullOffset = inputEnd-3;",
      "right" : "lastFullOffset = inputEnd-3;",
      "info" : "ExpressionStatement[52021-52049]:ExpressionStatement[51808-51836]"
    }, {
      "left" : "if (_outputTail > safeOutputEnd)",
      "right" : "if (_outputTail > safeOutputEnd)",
      "info" : "IfStatement[52076-52173]:IfStatement[51863-51960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52109-52173]:Block[51896-51960]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[52144-52159]:ExpressionStatement[51931-51946]"
    }, {
      "left" : "int b24 = ((int) readBuffer[inputPtr++]) << 8;",
      "right" : "int b24 = ((int) readBuffer[inputPtr++]) << 8;",
      "info" : "VariableDeclarationStatement[52244-52290]:VariableDeclarationStatement[52031-52077]"
    }, {
      "left" : "b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;",
      "right" : "b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;",
      "info" : "ExpressionStatement[52303-52348]:ExpressionStatement[52090-52135]"
    }, {
      "left" : "b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);",
      "right" : "b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);",
      "info" : "ExpressionStatement[52361-52420]:ExpressionStatement[52148-52207]"
    }, {
      "left" : "bytesDone += 3;",
      "right" : "bytesDone += 3;",
      "info" : "ExpressionStatement[52433-52448]:ExpressionStatement[52220-52235]"
    }, {
      "left" : "_outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);",
      "right" : "_outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);",
      "info" : "ExpressionStatement[52461-52537]:ExpressionStatement[52248-52324]"
    }, {
      "left" : "if (--chunksBeforeLF <= 0)",
      "right" : "if (--chunksBeforeLF <= 0)",
      "info" : "IfStatement[52550-52766]:IfStatement[52337-52553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52577-52766]:Block[52364-52553]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '\\\\';",
      "right" : "_outputBuffer[_outputTail++] = '\\\\';",
      "info" : "ExpressionStatement[52595-52631]:ExpressionStatement[52382-52418]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = 'n';",
      "right" : "_outputBuffer[_outputTail++] = 'n';",
      "info" : "ExpressionStatement[52648-52683]:ExpressionStatement[52435-52470]"
    }, {
      "left" : "chunksBeforeLF = b64variant.getMaxLineLength() >> 2;",
      "right" : "chunksBeforeLF = b64variant.getMaxLineLength() >> 2;",
      "info" : "ExpressionStatement[52700-52752]:ExpressionStatement[52487-52539]"
    }, {
      "left" : "if (inputPtr < inputEnd)",
      "right" : "if (inputPtr < inputEnd)",
      "info" : "IfStatement[52850-53423]:IfStatement[52637-53210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52875-53423]:Block[52662-53210]"
    }, {
      "left" : "if (_outputTail > safeOutputEnd)",
      "right" : "if (_outputTail > safeOutputEnd)",
      "info" : "IfStatement[52929-53045]:IfStatement[52716-52832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52962-53045]:Block[52749-52832]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[53016-53031]:ExpressionStatement[52803-52818]"
    }, {
      "left" : "int b24 = ((int) readBuffer[inputPtr++]) << 16;",
      "right" : "int b24 = ((int) readBuffer[inputPtr++]) << 16;",
      "info" : "VariableDeclarationStatement[53058-53105]:VariableDeclarationStatement[52845-52892]"
    }, {
      "left" : "int amount = 1;",
      "right" : "int amount = 1;",
      "info" : "VariableDeclarationStatement[53118-53133]:VariableDeclarationStatement[52905-52920]"
    }, {
      "left" : "if (inputPtr < inputEnd)",
      "right" : "if (inputPtr < inputEnd)",
      "info" : "IfStatement[53146-53281]:IfStatement[52933-53068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53171-53281]:Block[52958-53068]"
    }, {
      "left" : "b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;",
      "right" : "b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;",
      "info" : "ExpressionStatement[53189-53239]:ExpressionStatement[52976-53026]"
    }, {
      "left" : "amount = 2;",
      "right" : "amount = 2;",
      "info" : "ExpressionStatement[53256-53267]:ExpressionStatement[53043-53054]"
    }, {
      "left" : "bytesDone += amount;",
      "right" : "bytesDone += amount;",
      "info" : "ExpressionStatement[53294-53314]:ExpressionStatement[53081-53101]"
    }, {
      "left" : "_outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);",
      "right" : "_outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);",
      "info" : "ExpressionStatement[53327-53413]:ExpressionStatement[53114-53200]"
    }, {
      "left" : "return bytesDone;",
      "right" : "return bytesDone;",
      "info" : "ReturnStatement[53432-53449]:ReturnStatement[53219-53236]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[53465-53472]:Modifier[53252-53259]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[53473-53476]:PrimitiveType[53260-53263]"
    }, {
      "left" : "_readMore",
      "right" : "_readMore",
      "info" : "SimpleName[53477-53486]:SimpleName[53264-53273]"
    }, {
      "left" : "InputStream in",
      "right" : "InputStream in",
      "info" : "SingleVariableDeclaration[53487-53501]:SingleVariableDeclaration[53274-53288]"
    }, {
      "left" : "byte[] readBuffer",
      "right" : "byte[] readBuffer",
      "info" : "SingleVariableDeclaration[53515-53532]:SingleVariableDeclaration[53302-53319]"
    }, {
      "left" : "int inputPtr",
      "right" : "int inputPtr",
      "info" : "SingleVariableDeclaration[53534-53546]:SingleVariableDeclaration[53321-53333]"
    }, {
      "left" : "int inputEnd",
      "right" : "int inputEnd",
      "info" : "SingleVariableDeclaration[53548-53560]:SingleVariableDeclaration[53335-53347]"
    }, {
      "left" : "int maxRead",
      "right" : "int maxRead",
      "info" : "SingleVariableDeclaration[53574-53585]:SingleVariableDeclaration[53361-53372]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[53594-53605]:SimpleType[53381-53392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53610-54252]:Block[53397-54039]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[53659-53669]:VariableDeclarationStatement[53446-53456]"
    }, {
      "left" : "while (inputPtr < inputEnd)",
      "right" : "while (inputPtr < inputEnd)",
      "info" : "WhileStatement[53678-53772]:WhileStatement[53465-53559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53706-53772]:Block[53493-53559]"
    }, {
      "left" : "readBuffer[i++]  = readBuffer[inputPtr++];",
      "right" : "readBuffer[i++]  = readBuffer[inputPtr++];",
      "info" : "ExpressionStatement[53720-53762]:ExpressionStatement[53507-53549]"
    }, {
      "left" : "inputPtr = 0;",
      "right" : "inputPtr = 0;",
      "info" : "ExpressionStatement[53781-53794]:ExpressionStatement[53568-53581]"
    }, {
      "left" : "inputEnd = i;",
      "right" : "inputEnd = i;",
      "info" : "ExpressionStatement[53803-53816]:ExpressionStatement[53590-53603]"
    }, {
      "left" : "maxRead = Math.min(maxRead, readBuffer.length);",
      "right" : "maxRead = Math.min(maxRead, readBuffer.length);",
      "info" : "ExpressionStatement[53825-53872]:ExpressionStatement[53612-53659]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[53890-54221]:DoStatement[53677-54008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53893-54199]:Block[53680-53986]"
    }, {
      "left" : "int length = maxRead - inputEnd;",
      "right" : "int length = maxRead - inputEnd;",
      "info" : "VariableDeclarationStatement[53907-53939]:VariableDeclarationStatement[53694-53726]"
    }, {
      "left" : "if (length == 0)",
      "right" : "if (length == 0)",
      "info" : "IfStatement[53952-54007]:IfStatement[53739-53794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53969-54007]:Block[53756-53794]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[53987-53993]:BreakStatement[53774-53780]"
    }, {
      "left" : "int count = in.read(readBuffer, inputEnd, length);",
      "right" : "int count = in.read(readBuffer, inputEnd, length);",
      "info" : "VariableDeclarationStatement[54020-54070]:VariableDeclarationStatement[53807-53857]"
    }, {
      "left" : "if (count < 0)",
      "right" : "if (count < 0)",
      "info" : "IfStatement[54095-54158]:IfStatement[53882-53945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54110-54158]:Block[53897-53945]"
    }, {
      "left" : "return inputEnd;",
      "right" : "return inputEnd;",
      "info" : "ReturnStatement[54128-54144]:ReturnStatement[53915-53931]"
    }, {
      "left" : "inputEnd += count;",
      "right" : "inputEnd += count;",
      "info" : "ExpressionStatement[54171-54189]:ExpressionStatement[53958-53976]"
    }, {
      "left" : "return inputEnd;",
      "right" : "return inputEnd;",
      "info" : "ReturnStatement[54230-54246]:ReturnStatement[54017-54033]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[54460-54467]:Modifier[54247-54254]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[54468-54473]:Modifier[54255-54260]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[54474-54478]:PrimitiveType[54261-54265]"
    }, {
      "left" : "_writeNull",
      "right" : "_writeNull",
      "info" : "SimpleName[54479-54489]:SimpleName[54266-54276]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[54499-54510]:SimpleType[54286-54297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54515-54805]:Block[54302-54592]"
    }, {
      "left" : "if ((_outputTail + 4) >= _outputEnd)",
      "right" : "if ((_outputTail + 4) >= _outputEnd)",
      "info" : "IfStatement[54525-54601]:IfStatement[54312-54388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54562-54601]:Block[54349-54388]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[54576-54591]:ExpressionStatement[54363-54378]"
    }, {
      "left" : "int ptr = _outputTail;",
      "right" : "int ptr = _outputTail;",
      "info" : "VariableDeclarationStatement[54610-54632]:VariableDeclarationStatement[54397-54419]"
    }, {
      "left" : "char[] buf = _outputBuffer;",
      "right" : "char[] buf = _outputBuffer;",
      "info" : "VariableDeclarationStatement[54641-54668]:VariableDeclarationStatement[54428-54455]"
    }, {
      "left" : "buf[ptr] = 'n';",
      "right" : "buf[ptr] = 'n';",
      "info" : "ExpressionStatement[54677-54692]:ExpressionStatement[54464-54479]"
    }, {
      "left" : "buf[++ptr] = 'u';",
      "right" : "buf[++ptr] = 'u';",
      "info" : "ExpressionStatement[54701-54718]:ExpressionStatement[54488-54505]"
    }, {
      "left" : "buf[++ptr] = 'l';",
      "right" : "buf[++ptr] = 'l';",
      "info" : "ExpressionStatement[54727-54744]:ExpressionStatement[54514-54531]"
    }, {
      "left" : "buf[++ptr] = 'l';",
      "right" : "buf[++ptr] = 'l';",
      "info" : "ExpressionStatement[54753-54770]:ExpressionStatement[54540-54557]"
    }, {
      "left" : "_outputTail = ptr+1;",
      "right" : "_outputTail = ptr+1;",
      "info" : "ExpressionStatement[54779-54799]:ExpressionStatement[54566-54586]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[55235-55242]:Modifier[55022-55029]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[55243-55247]:PrimitiveType[55030-55034]"
    }, {
      "left" : "_prependOrWriteCharacterEscape",
      "right" : "_prependOrWriteCharacterEscape",
      "info" : "SimpleName[55248-55278]:SimpleName[55035-55065]"
    }, {
      "left" : "char ch",
      "right" : "char ch",
      "info" : "SingleVariableDeclaration[55279-55286]:SingleVariableDeclaration[55066-55073]"
    }, {
      "left" : "int escCode",
      "right" : "int escCode",
      "info" : "SingleVariableDeclaration[55288-55299]:SingleVariableDeclaration[55075-55086]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[55316-55327]:SimpleType[55103-55114]"
    }, {
      "left" : "JsonGenerationException",
      "right" : "JsonGenerationException",
      "info" : "SimpleType[55329-55352]:SimpleType[55116-55139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55357-58319]:Block[55144-58106]"
    }, {
      "left" : "if (escCode >= 0)",
      "right" : "if (escCode >= 0)",
      "info" : "IfStatement[55367-55982]:IfStatement[55154-55769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55385-55982]:Block[55172-55769]"
    }, {
      "left" : "if (_outputTail >= 2)",
      "right" : "if (_outputTail >= 2)",
      "info" : "IfStatement[55415-55674]:IfStatement[55202-55461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55437-55674]:Block[55224-55461]"
    }, {
      "left" : "int ptr = _outputTail - 2;",
      "right" : "int ptr = _outputTail - 2;",
      "info" : "VariableDeclarationStatement[55477-55503]:VariableDeclarationStatement[55264-55290]"
    }, {
      "left" : "_outputHead = ptr;",
      "right" : "_outputHead = ptr;",
      "info" : "ExpressionStatement[55520-55538]:ExpressionStatement[55307-55325]"
    }, {
      "left" : "_outputBuffer[ptr++] = '\\\\';",
      "right" : "_outputBuffer[ptr++] = '\\\\';",
      "info" : "ExpressionStatement[55555-55583]:ExpressionStatement[55342-55370]"
    }, {
      "left" : "_outputBuffer[ptr] = (char) escCode;",
      "right" : "_outputBuffer[ptr] = (char) escCode;",
      "info" : "ExpressionStatement[55600-55636]:ExpressionStatement[55387-55423]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[55653-55660]:ReturnStatement[55440-55447]"
    }, {
      "left" : "char[] buf = _entityBuffer;",
      "right" : "char[] buf = _entityBuffer;",
      "info" : "VariableDeclarationStatement[55719-55746]:VariableDeclarationStatement[55506-55533]"
    }, {
      "left" : "if (buf == null)",
      "right" : "if (buf == null)",
      "info" : "IfStatement[55759-55838]:IfStatement[55546-55625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55776-55838]:Block[55563-55625]"
    }, {
      "left" : "buf = _allocateEntityBuffer();",
      "right" : "buf = _allocateEntityBuffer();",
      "info" : "ExpressionStatement[55794-55824]:ExpressionStatement[55581-55611]"
    }, {
      "left" : "_outputHead = _outputTail;",
      "right" : "_outputHead = _outputTail;",
      "info" : "ExpressionStatement[55851-55877]:ExpressionStatement[55638-55664]"
    }, {
      "left" : "buf[1] = (char) escCode;",
      "right" : "buf[1] = (char) escCode;",
      "info" : "ExpressionStatement[55890-55914]:ExpressionStatement[55677-55701]"
    }, {
      "left" : "_writer.write(buf, 0, 2);",
      "right" : "_writer.write(buf, 0, 2);",
      "info" : "ExpressionStatement[55927-55952]:ExpressionStatement[55714-55739]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[55965-55972]:ReturnStatement[55752-55759]"
    }, {
      "left" : "if (escCode != CharacterEscapes.ESCAPE_CUSTOM)",
      "right" : "if (escCode != CharacterEscapes.ESCAPE_CUSTOM)",
      "info" : "IfStatement[55991-57715]:IfStatement[55778-57502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56038-57715]:Block[55825-57502]"
    }, {
      "left" : "if (_outputTail >= 6)",
      "right" : "if (_outputTail >= 6)",
      "info" : "IfStatement[56068-56883]:IfStatement[55855-56670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56090-56883]:Block[55877-56670]"
    }, {
      "left" : "char[] buf = _outputBuffer;",
      "right" : "char[] buf = _outputBuffer;",
      "info" : "VariableDeclarationStatement[56135-56162]:VariableDeclarationStatement[55922-55949]"
    }, {
      "left" : "int ptr = _outputTail - 6;",
      "right" : "int ptr = _outputTail - 6;",
      "info" : "VariableDeclarationStatement[56179-56205]:VariableDeclarationStatement[55966-55992]"
    }, {
      "left" : "_outputHead = ptr;",
      "right" : "_outputHead = ptr;",
      "info" : "ExpressionStatement[56222-56240]:ExpressionStatement[56009-56027]"
    }, {
      "left" : "buf[ptr] = '\\\\';",
      "right" : "buf[ptr] = '\\\\';",
      "info" : "ExpressionStatement[56257-56273]:ExpressionStatement[56044-56060]"
    }, {
      "left" : "buf[++ptr] = 'u';",
      "right" : "buf[++ptr] = 'u';",
      "info" : "ExpressionStatement[56290-56307]:ExpressionStatement[56077-56094]"
    }, {
      "left" : "if (ch > 0xFF)",
      "right" : "if (ch > 0xFF)",
      "info" : "IfStatement[56407-56746]:IfStatement[56194-56533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56422-56645]:Block[56209-56432]"
    }, {
      "left" : "int hi = (ch >> 8) & 0xFF;",
      "right" : "int hi = (ch >> 8) & 0xFF;",
      "info" : "VariableDeclarationStatement[56462-56488]:VariableDeclarationStatement[56249-56275]"
    }, {
      "left" : "buf[++ptr] = HEX_CHARS[hi >> 4];",
      "right" : "buf[++ptr] = HEX_CHARS[hi >> 4];",
      "info" : "ExpressionStatement[56509-56541]:ExpressionStatement[56296-56328]"
    }, {
      "left" : "buf[++ptr] = HEX_CHARS[hi & 0xF];",
      "right" : "buf[++ptr] = HEX_CHARS[hi & 0xF];",
      "info" : "ExpressionStatement[56562-56595]:ExpressionStatement[56349-56382]"
    }, {
      "left" : "ch &= 0xFF;",
      "right" : "ch &= 0xFF;",
      "info" : "ExpressionStatement[56616-56627]:ExpressionStatement[56403-56414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56651-56746]:Block[56438-56533]"
    }, {
      "left" : "buf[++ptr] = '0';",
      "right" : "buf[++ptr] = '0';",
      "info" : "ExpressionStatement[56673-56690]:ExpressionStatement[56460-56477]"
    }, {
      "left" : "buf[++ptr] = '0';",
      "right" : "buf[++ptr] = '0';",
      "info" : "ExpressionStatement[56711-56728]:ExpressionStatement[56498-56515]"
    }, {
      "left" : "buf[++ptr] = HEX_CHARS[ch >> 4];",
      "right" : "buf[++ptr] = HEX_CHARS[ch >> 4];",
      "info" : "ExpressionStatement[56763-56795]:ExpressionStatement[56550-56582]"
    }, {
      "left" : "buf[++ptr] = HEX_CHARS[ch & 0xF];",
      "right" : "buf[++ptr] = HEX_CHARS[ch & 0xF];",
      "info" : "ExpressionStatement[56812-56845]:ExpressionStatement[56599-56632]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[56862-56869]:ReturnStatement[56649-56656]"
    }, {
      "left" : "char[] buf = _entityBuffer;",
      "right" : "char[] buf = _entityBuffer;",
      "info" : "VariableDeclarationStatement[56938-56965]:VariableDeclarationStatement[56725-56752]"
    }, {
      "left" : "if (buf == null)",
      "right" : "if (buf == null)",
      "info" : "IfStatement[56978-57057]:IfStatement[56765-56844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56995-57057]:Block[56782-56844]"
    }, {
      "left" : "buf = _allocateEntityBuffer();",
      "right" : "buf = _allocateEntityBuffer();",
      "info" : "ExpressionStatement[57013-57043]:ExpressionStatement[56800-56830]"
    }, {
      "left" : "_outputHead = _outputTail;",
      "right" : "_outputHead = _outputTail;",
      "info" : "ExpressionStatement[57070-57096]:ExpressionStatement[56857-56883]"
    }, {
      "left" : "if (ch > 0xFF)",
      "right" : "if (ch > 0xFF)",
      "info" : "IfStatement[57109-57685]:IfStatement[56896-57472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57124-57464]:Block[56911-57251]"
    }, {
      "left" : "int hi = (ch >> 8) & 0xFF;",
      "right" : "int hi = (ch >> 8) & 0xFF;",
      "info" : "VariableDeclarationStatement[57160-57186]:VariableDeclarationStatement[56947-56973]"
    }, {
      "left" : "int lo = ch & 0xFF;",
      "right" : "int lo = ch & 0xFF;",
      "info" : "VariableDeclarationStatement[57203-57222]:VariableDeclarationStatement[56990-57009]"
    }, {
      "left" : "buf[10] = HEX_CHARS[hi >> 4];",
      "right" : "buf[10] = HEX_CHARS[hi >> 4];",
      "info" : "ExpressionStatement[57239-57268]:ExpressionStatement[57026-57055]"
    }, {
      "left" : "buf[11] = HEX_CHARS[hi & 0xF];",
      "right" : "buf[11] = HEX_CHARS[hi & 0xF];",
      "info" : "ExpressionStatement[57285-57315]:ExpressionStatement[57072-57102]"
    }, {
      "left" : "buf[12] = HEX_CHARS[lo >> 4];",
      "right" : "buf[12] = HEX_CHARS[lo >> 4];",
      "info" : "ExpressionStatement[57332-57361]:ExpressionStatement[57119-57148]"
    }, {
      "left" : "buf[13] = HEX_CHARS[lo & 0xF];",
      "right" : "buf[13] = HEX_CHARS[lo & 0xF];",
      "info" : "ExpressionStatement[57378-57408]:ExpressionStatement[57165-57195]"
    }, {
      "left" : "_writer.write(buf, 8, 6);",
      "right" : "_writer.write(buf, 8, 6);",
      "info" : "ExpressionStatement[57425-57450]:ExpressionStatement[57212-57237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57470-57685]:Block[57257-57472]"
    }, {
      "left" : "buf[6] = HEX_CHARS[ch >> 4];",
      "right" : "buf[6] = HEX_CHARS[ch >> 4];",
      "info" : "ExpressionStatement[57555-57583]:ExpressionStatement[57342-57370]"
    }, {
      "left" : "buf[7] = HEX_CHARS[ch & 0xF];",
      "right" : "buf[7] = HEX_CHARS[ch & 0xF];",
      "info" : "ExpressionStatement[57600-57629]:ExpressionStatement[57387-57416]"
    }, {
      "left" : "_writer.write(buf, 2, 6);",
      "right" : "_writer.write(buf, 2, 6);",
      "info" : "ExpressionStatement[57646-57671]:ExpressionStatement[57433-57458]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[57698-57705]:ReturnStatement[57485-57492]"
    }, {
      "left" : "String escape;",
      "right" : "String escape;",
      "info" : "VariableDeclarationStatement[57724-57738]:VariableDeclarationStatement[57511-57525]"
    }, {
      "left" : "if (_currentEscape == null)",
      "right" : "if (_currentEscape == null)",
      "info" : "IfStatement[57748-57960]:IfStatement[57535-57747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57776-57860]:Block[57563-57647]"
    }, {
      "left" : "escape = _characterEscapes.getEscapeSequence(ch).getValue();",
      "right" : "escape = _characterEscapes.getEscapeSequence(ch).getValue();",
      "info" : "ExpressionStatement[57790-57850]:ExpressionStatement[57577-57637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57866-57960]:Block[57653-57747]"
    }, {
      "left" : "escape = _currentEscape.getValue();",
      "right" : "escape = _currentEscape.getValue();",
      "info" : "ExpressionStatement[57880-57915]:ExpressionStatement[57667-57702]"
    }, {
      "left" : "_currentEscape = null;",
      "right" : "_currentEscape = null;",
      "info" : "ExpressionStatement[57928-57950]:ExpressionStatement[57715-57737]"
    }, {
      "left" : "int len = escape.length();",
      "right" : "int len = escape.length();",
      "info" : "VariableDeclarationStatement[57969-57995]:VariableDeclarationStatement[57756-57782]"
    }, {
      "left" : "if (_outputTail >= len)",
      "right" : "if (_outputTail >= len)",
      "info" : "IfStatement[58004-58208]:IfStatement[57791-57995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58028-58208]:Block[57815-57995]"
    }, {
      "left" : "int ptr = _outputTail - len;",
      "right" : "int ptr = _outputTail - len;",
      "info" : "VariableDeclarationStatement[58062-58090]:VariableDeclarationStatement[57849-57877]"
    }, {
      "left" : "_outputHead = ptr;",
      "right" : "_outputHead = ptr;",
      "info" : "ExpressionStatement[58103-58121]:ExpressionStatement[57890-57908]"
    }, {
      "left" : "escape.getChars(0, len, _outputBuffer, ptr);",
      "right" : "escape.getChars(0, len, _outputBuffer, ptr);",
      "info" : "ExpressionStatement[58134-58178]:ExpressionStatement[57921-57965]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[58191-58198]:ReturnStatement[57978-57985]"
    }, {
      "left" : "_outputHead = _outputTail;",
      "right" : "_outputHead = _outputTail;",
      "info" : "ExpressionStatement[58256-58282]:ExpressionStatement[58043-58069]"
    }, {
      "left" : "_writer.write(escape);",
      "right" : "_writer.write(escape);",
      "info" : "ExpressionStatement[58291-58313]:ExpressionStatement[58078-58100]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[58585-58592]:Modifier[58372-58379]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[58593-58596]:PrimitiveType[58380-58383]"
    }, {
      "left" : "_prependOrWriteCharacterEscape",
      "right" : "_prependOrWriteCharacterEscape",
      "info" : "SimpleName[58597-58627]:SimpleName[58384-58414]"
    }, {
      "left" : "char[] buffer",
      "right" : "char[] buffer",
      "info" : "SingleVariableDeclaration[58628-58641]:SingleVariableDeclaration[58415-58428]"
    }, {
      "left" : "int ptr",
      "right" : "int ptr",
      "info" : "SingleVariableDeclaration[58643-58650]:SingleVariableDeclaration[58430-58437]"
    }, {
      "left" : "int end",
      "right" : "int end",
      "info" : "SingleVariableDeclaration[58652-58659]:SingleVariableDeclaration[58439-58446]"
    }, {
      "left" : "char ch",
      "right" : "char ch",
      "info" : "SingleVariableDeclaration[58673-58680]:SingleVariableDeclaration[58460-58467]"
    }, {
      "left" : "int escCode",
      "right" : "int escCode",
      "info" : "SingleVariableDeclaration[58682-58693]:SingleVariableDeclaration[58469-58480]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[58710-58721]:SimpleType[58497-58508]"
    }, {
      "left" : "JsonGenerationException",
      "right" : "JsonGenerationException",
      "info" : "SimpleType[58723-58746]:SimpleType[58510-58533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58751-61587]:Block[58538-61374]"
    }, {
      "left" : "if (escCode >= 0)",
      "right" : "if (escCode >= 0)",
      "info" : "IfStatement[58761-59288]:IfStatement[58548-59075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58779-59288]:Block[58566-59075]"
    }, {
      "left" : "if (ptr > 1 && ptr < end)",
      "right" : "if (ptr > 1 && ptr < end)",
      "info" : "IfStatement[58809-59254]:IfStatement[58596-59041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58835-58982]:Block[58622-58769]"
    }, {
      "left" : "ptr -= 2;",
      "right" : "ptr -= 2;",
      "info" : "ExpressionStatement[58875-58884]:ExpressionStatement[58662-58671]"
    }, {
      "left" : "buffer[ptr] = '\\\\';",
      "right" : "buffer[ptr] = '\\\\';",
      "info" : "ExpressionStatement[58901-58920]:ExpressionStatement[58688-58707]"
    }, {
      "left" : "buffer[ptr+1] = (char) escCode;",
      "right" : "buffer[ptr+1] = (char) escCode;",
      "info" : "ExpressionStatement[58937-58968]:ExpressionStatement[58724-58755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58988-59254]:Block[58775-59041]"
    }, {
      "left" : "char[] ent = _entityBuffer;",
      "right" : "char[] ent = _entityBuffer;",
      "info" : "VariableDeclarationStatement[59026-59053]:VariableDeclarationStatement[58813-58840]"
    }, {
      "left" : "if (ent == null)",
      "right" : "if (ent == null)",
      "info" : "IfStatement[59070-59157]:IfStatement[58857-58944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59087-59157]:Block[58874-58944]"
    }, {
      "left" : "ent = _allocateEntityBuffer();",
      "right" : "ent = _allocateEntityBuffer();",
      "info" : "ExpressionStatement[59109-59139]:ExpressionStatement[58896-58926]"
    }, {
      "left" : "ent[1] = (char) escCode;",
      "right" : "ent[1] = (char) escCode;",
      "info" : "ExpressionStatement[59174-59198]:ExpressionStatement[58961-58985]"
    }, {
      "left" : "_writer.write(ent, 0, 2);",
      "right" : "_writer.write(ent, 0, 2);",
      "info" : "ExpressionStatement[59215-59240]:ExpressionStatement[59002-59027]"
    }, {
      "left" : "return ptr;",
      "right" : "return ptr;",
      "info" : "ReturnStatement[59267-59278]:ReturnStatement[59054-59065]"
    }, {
      "left" : "if (escCode != CharacterEscapes.ESCAPE_CUSTOM)",
      "right" : "if (escCode != CharacterEscapes.ESCAPE_CUSTOM)",
      "info" : "IfStatement[59297-61056]:IfStatement[59084-60843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59344-61056]:Block[59131-60843]"
    }, {
      "left" : "if (ptr > 5 && ptr < end)",
      "right" : "if (ptr > 5 && ptr < end)",
      "info" : "IfStatement[59374-61022]:IfStatement[59161-60809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59400-60123]:Block[59187-59910]"
    }, {
      "left" : "ptr -= 6;",
      "right" : "ptr -= 6;",
      "info" : "ExpressionStatement[59445-59454]:ExpressionStatement[59232-59241]"
    }, {
      "left" : "buffer[ptr++] = '\\\\';",
      "right" : "buffer[ptr++] = '\\\\';",
      "info" : "ExpressionStatement[59471-59492]:ExpressionStatement[59258-59279]"
    }, {
      "left" : "buffer[ptr++] = 'u';",
      "right" : "buffer[ptr++] = 'u';",
      "info" : "ExpressionStatement[59509-59529]:ExpressionStatement[59296-59316]"
    }, {
      "left" : "if (ch > 0xFF)",
      "right" : "if (ch > 0xFF)",
      "info" : "IfStatement[59629-59980]:IfStatement[59416-59767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59644-59873]:Block[59431-59660]"
    }, {
      "left" : "int hi = (ch >> 8) & 0xFF;",
      "right" : "int hi = (ch >> 8) & 0xFF;",
      "info" : "VariableDeclarationStatement[59684-59710]:VariableDeclarationStatement[59471-59497]"
    }, {
      "left" : "buffer[ptr++] = HEX_CHARS[hi >> 4];",
      "right" : "buffer[ptr++] = HEX_CHARS[hi >> 4];",
      "info" : "ExpressionStatement[59731-59766]:ExpressionStatement[59518-59553]"
    }, {
      "left" : "buffer[ptr++] = HEX_CHARS[hi & 0xF];",
      "right" : "buffer[ptr++] = HEX_CHARS[hi & 0xF];",
      "info" : "ExpressionStatement[59787-59823]:ExpressionStatement[59574-59610]"
    }, {
      "left" : "ch &= 0xFF;",
      "right" : "ch &= 0xFF;",
      "info" : "ExpressionStatement[59844-59855]:ExpressionStatement[59631-59642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59879-59980]:Block[59666-59767]"
    }, {
      "left" : "buffer[ptr++] = '0';",
      "right" : "buffer[ptr++] = '0';",
      "info" : "ExpressionStatement[59901-59921]:ExpressionStatement[59688-59708]"
    }, {
      "left" : "buffer[ptr++] = '0';",
      "right" : "buffer[ptr++] = '0';",
      "info" : "ExpressionStatement[59942-59962]:ExpressionStatement[59729-59749]"
    }, {
      "left" : "buffer[ptr++] = HEX_CHARS[ch >> 4];",
      "right" : "buffer[ptr++] = HEX_CHARS[ch >> 4];",
      "info" : "ExpressionStatement[59997-60032]:ExpressionStatement[59784-59819]"
    }, {
      "left" : "buffer[ptr] = HEX_CHARS[ch & 0xF];",
      "right" : "buffer[ptr] = HEX_CHARS[ch & 0xF];",
      "info" : "ExpressionStatement[60049-60083]:ExpressionStatement[59836-59870]"
    }, {
      "left" : "ptr -= 5;",
      "right" : "ptr -= 5;",
      "info" : "ExpressionStatement[60100-60109]:ExpressionStatement[59887-59896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60129-61022]:Block[59916-60809]"
    }, {
      "left" : "char[] ent = _entityBuffer;",
      "right" : "char[] ent = _entityBuffer;",
      "info" : "VariableDeclarationStatement[60193-60220]:VariableDeclarationStatement[59980-60007]"
    }, {
      "left" : "if (ent == null)",
      "right" : "if (ent == null)",
      "info" : "IfStatement[60237-60324]:IfStatement[60024-60111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60254-60324]:Block[60041-60111]"
    }, {
      "left" : "ent = _allocateEntityBuffer();",
      "right" : "ent = _allocateEntityBuffer();",
      "info" : "ExpressionStatement[60276-60306]:ExpressionStatement[60063-60093]"
    }, {
      "left" : "_outputHead = _outputTail;",
      "right" : "_outputHead = _outputTail;",
      "info" : "ExpressionStatement[60341-60367]:ExpressionStatement[60128-60154]"
    }, {
      "left" : "if (ch > 0xFF)",
      "right" : "if (ch > 0xFF)",
      "info" : "IfStatement[60384-61008]:IfStatement[60171-60795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60399-60771]:Block[60186-60558]"
    }, {
      "left" : "int hi = (ch >> 8) & 0xFF;",
      "right" : "int hi = (ch >> 8) & 0xFF;",
      "info" : "VariableDeclarationStatement[60439-60465]:VariableDeclarationStatement[60226-60252]"
    }, {
      "left" : "int lo = ch & 0xFF;",
      "right" : "int lo = ch & 0xFF;",
      "info" : "VariableDeclarationStatement[60486-60505]:VariableDeclarationStatement[60273-60292]"
    }, {
      "left" : "ent[10] = HEX_CHARS[hi >> 4];",
      "right" : "ent[10] = HEX_CHARS[hi >> 4];",
      "info" : "ExpressionStatement[60526-60555]:ExpressionStatement[60313-60342]"
    }, {
      "left" : "ent[11] = HEX_CHARS[hi & 0xF];",
      "right" : "ent[11] = HEX_CHARS[hi & 0xF];",
      "info" : "ExpressionStatement[60576-60606]:ExpressionStatement[60363-60393]"
    }, {
      "left" : "ent[12] = HEX_CHARS[lo >> 4];",
      "right" : "ent[12] = HEX_CHARS[lo >> 4];",
      "info" : "ExpressionStatement[60627-60656]:ExpressionStatement[60414-60443]"
    }, {
      "left" : "ent[13] = HEX_CHARS[lo & 0xF];",
      "right" : "ent[13] = HEX_CHARS[lo & 0xF];",
      "info" : "ExpressionStatement[60677-60707]:ExpressionStatement[60464-60494]"
    }, {
      "left" : "_writer.write(ent, 8, 6);",
      "right" : "_writer.write(ent, 8, 6);",
      "info" : "ExpressionStatement[60728-60753]:ExpressionStatement[60515-60540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60777-61008]:Block[60564-60795]"
    }, {
      "left" : "ent[6] = HEX_CHARS[ch >> 4];",
      "right" : "ent[6] = HEX_CHARS[ch >> 4];",
      "info" : "ExpressionStatement[60866-60894]:ExpressionStatement[60653-60681]"
    }, {
      "left" : "ent[7] = HEX_CHARS[ch & 0xF];",
      "right" : "ent[7] = HEX_CHARS[ch & 0xF];",
      "info" : "ExpressionStatement[60915-60944]:ExpressionStatement[60702-60731]"
    }, {
      "left" : "_writer.write(ent, 2, 6);",
      "right" : "_writer.write(ent, 2, 6);",
      "info" : "ExpressionStatement[60965-60990]:ExpressionStatement[60752-60777]"
    }, {
      "left" : "return ptr;",
      "right" : "return ptr;",
      "info" : "ReturnStatement[61035-61046]:ReturnStatement[60822-60833]"
    }, {
      "left" : "String escape;",
      "right" : "String escape;",
      "info" : "VariableDeclarationStatement[61065-61079]:VariableDeclarationStatement[60852-60866]"
    }, {
      "left" : "if (_currentEscape == null)",
      "right" : "if (_currentEscape == null)",
      "info" : "IfStatement[61088-61300]:IfStatement[60875-61087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61116-61200]:Block[60903-60987]"
    }, {
      "left" : "escape = _characterEscapes.getEscapeSequence(ch).getValue();",
      "right" : "escape = _characterEscapes.getEscapeSequence(ch).getValue();",
      "info" : "ExpressionStatement[61130-61190]:ExpressionStatement[60917-60977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61206-61300]:Block[60993-61087]"
    }, {
      "left" : "escape = _currentEscape.getValue();",
      "right" : "escape = _currentEscape.getValue();",
      "info" : "ExpressionStatement[61220-61255]:ExpressionStatement[61007-61042]"
    }, {
      "left" : "_currentEscape = null;",
      "right" : "_currentEscape = null;",
      "info" : "ExpressionStatement[61268-61290]:ExpressionStatement[61055-61077]"
    }, {
      "left" : "int len = escape.length();",
      "right" : "int len = escape.length();",
      "info" : "VariableDeclarationStatement[61309-61335]:VariableDeclarationStatement[61096-61122]"
    }, {
      "left" : "if (ptr >= len && ptr < end)",
      "right" : "if (ptr >= len && ptr < end)",
      "info" : "IfStatement[61344-61561]:IfStatement[61131-61348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61373-61478]:Block[61160-61265]"
    }, {
      "left" : "ptr -= len;",
      "right" : "ptr -= len;",
      "info" : "ExpressionStatement[61407-61418]:ExpressionStatement[61194-61205]"
    }, {
      "left" : "escape.getChars(0, len, buffer, ptr);",
      "right" : "escape.getChars(0, len, buffer, ptr);",
      "info" : "ExpressionStatement[61431-61468]:ExpressionStatement[61218-61255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61484-61561]:Block[61271-61348]"
    }, {
      "left" : "_writer.write(escape);",
      "right" : "_writer.write(escape);",
      "info" : "ExpressionStatement[61529-61551]:ExpressionStatement[61316-61338]"
    }, {
      "left" : "return ptr;",
      "right" : "return ptr;",
      "info" : "ReturnStatement[61570-61581]:ReturnStatement[61357-61368]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[61762-61769]:Modifier[61549-61556]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[61770-61774]:PrimitiveType[61557-61561]"
    }, {
      "left" : "_appendCharacterEscape",
      "right" : "_appendCharacterEscape",
      "info" : "SimpleName[61775-61797]:SimpleName[61562-61584]"
    }, {
      "left" : "char ch",
      "right" : "char ch",
      "info" : "SingleVariableDeclaration[61798-61805]:SingleVariableDeclaration[61585-61592]"
    }, {
      "left" : "int escCode",
      "right" : "int escCode",
      "info" : "SingleVariableDeclaration[61807-61818]:SingleVariableDeclaration[61594-61605]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[61835-61846]:SimpleType[61622-61633]"
    }, {
      "left" : "JsonGenerationException",
      "right" : "JsonGenerationException",
      "info" : "SimpleType[61848-61871]:SimpleType[61635-61658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61876-63647]:Block[61663-63434]"
    }, {
      "left" : "if (escCode >= 0)",
      "right" : "if (escCode >= 0)",
      "info" : "IfStatement[61886-62155]:IfStatement[61673-61942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61904-62155]:Block[61691-61942]"
    }, {
      "left" : "if ((_outputTail + 2) > _outputEnd)",
      "right" : "if ((_outputTail + 2) > _outputEnd)",
      "info" : "IfStatement[61934-62017]:IfStatement[61721-61804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61970-62017]:Block[61757-61804]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[61988-62003]:ExpressionStatement[61775-61790]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = '\\\\';",
      "right" : "_outputBuffer[_outputTail++] = '\\\\';",
      "info" : "ExpressionStatement[62030-62066]:ExpressionStatement[61817-61853]"
    }, {
      "left" : "_outputBuffer[_outputTail++] = (char) escCode;",
      "right" : "_outputBuffer[_outputTail++] = (char) escCode;",
      "info" : "ExpressionStatement[62079-62125]:ExpressionStatement[61866-61912]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[62138-62145]:ReturnStatement[61925-61932]"
    }, {
      "left" : "if (escCode != CharacterEscapes.ESCAPE_CUSTOM)",
      "right" : "if (escCode != CharacterEscapes.ESCAPE_CUSTOM)",
      "info" : "IfStatement[62164-63012]:IfStatement[61951-62799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62211-63012]:Block[61998-62799]"
    }, {
      "left" : "if ((_outputTail + 5) >= _outputEnd)",
      "right" : "if ((_outputTail + 5) >= _outputEnd)",
      "info" : "IfStatement[62241-62325]:IfStatement[62028-62112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62278-62325]:Block[62065-62112]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[62296-62311]:ExpressionStatement[62083-62098]"
    }, {
      "left" : "int ptr = _outputTail;",
      "right" : "int ptr = _outputTail;",
      "info" : "VariableDeclarationStatement[62338-62360]:VariableDeclarationStatement[62125-62147]"
    }, {
      "left" : "char[] buf = _outputBuffer;",
      "right" : "char[] buf = _outputBuffer;",
      "info" : "VariableDeclarationStatement[62373-62400]:VariableDeclarationStatement[62160-62187]"
    }, {
      "left" : "buf[ptr++] = '\\\\';",
      "right" : "buf[ptr++] = '\\\\';",
      "info" : "ExpressionStatement[62413-62431]:ExpressionStatement[62200-62218]"
    }, {
      "left" : "buf[ptr++] = 'u';",
      "right" : "buf[ptr++] = 'u';",
      "info" : "ExpressionStatement[62444-62461]:ExpressionStatement[62231-62248]"
    }, {
      "left" : "if (ch > 0xFF)",
      "right" : "if (ch > 0xFF)",
      "info" : "IfStatement[62553-62860]:IfStatement[62340-62647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62568-62771]:Block[62355-62558]"
    }, {
      "left" : "int hi = (ch >> 8) & 0xFF;",
      "right" : "int hi = (ch >> 8) & 0xFF;",
      "info" : "VariableDeclarationStatement[62604-62630]:VariableDeclarationStatement[62391-62417]"
    }, {
      "left" : "buf[ptr++] = HEX_CHARS[hi >> 4];",
      "right" : "buf[ptr++] = HEX_CHARS[hi >> 4];",
      "info" : "ExpressionStatement[62647-62679]:ExpressionStatement[62434-62466]"
    }, {
      "left" : "buf[ptr++] = HEX_CHARS[hi & 0xF];",
      "right" : "buf[ptr++] = HEX_CHARS[hi & 0xF];",
      "info" : "ExpressionStatement[62696-62729]:ExpressionStatement[62483-62516]"
    }, {
      "left" : "ch &= 0xFF;",
      "right" : "ch &= 0xFF;",
      "info" : "ExpressionStatement[62746-62757]:ExpressionStatement[62533-62544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62777-62860]:Block[62564-62647]"
    }, {
      "left" : "buf[ptr++] = '0';",
      "right" : "buf[ptr++] = '0';",
      "info" : "ExpressionStatement[62795-62812]:ExpressionStatement[62582-62599]"
    }, {
      "left" : "buf[ptr++] = '0';",
      "right" : "buf[ptr++] = '0';",
      "info" : "ExpressionStatement[62829-62846]:ExpressionStatement[62616-62633]"
    }, {
      "left" : "buf[ptr++] = HEX_CHARS[ch >> 4];",
      "right" : "buf[ptr++] = HEX_CHARS[ch >> 4];",
      "info" : "ExpressionStatement[62873-62905]:ExpressionStatement[62660-62692]"
    }, {
      "left" : "buf[ptr++] = HEX_CHARS[ch & 0xF];",
      "right" : "buf[ptr++] = HEX_CHARS[ch & 0xF];",
      "info" : "ExpressionStatement[62918-62951]:ExpressionStatement[62705-62738]"
    }, {
      "left" : "_outputTail = ptr;",
      "right" : "_outputTail = ptr;",
      "info" : "ExpressionStatement[62964-62982]:ExpressionStatement[62751-62769]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[62995-63002]:ReturnStatement[62782-62789]"
    }, {
      "left" : "String escape;",
      "right" : "String escape;",
      "info" : "VariableDeclarationStatement[63021-63035]:VariableDeclarationStatement[62808-62822]"
    }, {
      "left" : "if (_currentEscape == null)",
      "right" : "if (_currentEscape == null)",
      "info" : "IfStatement[63044-63256]:IfStatement[62831-63043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63072-63156]:Block[62859-62943]"
    }, {
      "left" : "escape = _characterEscapes.getEscapeSequence(ch).getValue();",
      "right" : "escape = _characterEscapes.getEscapeSequence(ch).getValue();",
      "info" : "ExpressionStatement[63086-63146]:ExpressionStatement[62873-62933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63162-63256]:Block[62949-63043]"
    }, {
      "left" : "escape = _currentEscape.getValue();",
      "right" : "escape = _currentEscape.getValue();",
      "info" : "ExpressionStatement[63176-63211]:ExpressionStatement[62963-62998]"
    }, {
      "left" : "_currentEscape = null;",
      "right" : "_currentEscape = null;",
      "info" : "ExpressionStatement[63224-63246]:ExpressionStatement[63011-63033]"
    }, {
      "left" : "int len = escape.length();",
      "right" : "int len = escape.length();",
      "info" : "VariableDeclarationStatement[63265-63291]:VariableDeclarationStatement[63052-63078]"
    }, {
      "left" : "if ((_outputTail + len) > _outputEnd)",
      "right" : "if ((_outputTail + len) > _outputEnd)",
      "info" : "IfStatement[63300-63552]:IfStatement[63087-63339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63338-63552]:Block[63125-63339]"
    }, {
      "left" : "_flushBuffer();",
      "right" : "_flushBuffer();",
      "info" : "ExpressionStatement[63352-63367]:ExpressionStatement[63139-63154]"
    }, {
      "left" : "if (len > _outputEnd)",
      "right" : "if (len > _outputEnd)",
      "info" : "IfStatement[63380-63542]:IfStatement[63167-63329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63402-63542]:Block[63189-63329]"
    }, {
      "left" : "_writer.write(escape);",
      "right" : "_writer.write(escape);",
      "info" : "ExpressionStatement[63482-63504]:ExpressionStatement[63269-63291]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[63521-63528]:ReturnStatement[63308-63315]"
    }, {
      "left" : "escape.getChars(0, len, _outputBuffer, _outputTail);",
      "right" : "escape.getChars(0, len, _outputBuffer, _outputTail);",
      "info" : "ExpressionStatement[63561-63613]:ExpressionStatement[63348-63400]"
    }, {
      "left" : "_outputTail += len;",
      "right" : "_outputTail += len;",
      "info" : "ExpressionStatement[63622-63641]:ExpressionStatement[63409-63428]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[63657-63664]:Modifier[63444-63451]"
    }, {
      "left" : "char[]",
      "right" : "char[]",
      "info" : "ArrayType[63665-63671]:ArrayType[63452-63458]"
    }, {
      "left" : "_allocateEntityBuffer",
      "right" : "_allocateEntityBuffer",
      "info" : "SimpleName[63672-63693]:SimpleName[63459-63480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63700-64093]:Block[63487-63880]"
    }, {
      "left" : "char[] buf = new char[14];",
      "right" : "char[] buf = new char[14];",
      "info" : "VariableDeclarationStatement[63710-63736]:VariableDeclarationStatement[63497-63523]"
    }, {
      "left" : "buf[0] = '\\\\';",
      "right" : "buf[0] = '\\\\';",
      "info" : "ExpressionStatement[63801-63815]:ExpressionStatement[63588-63602]"
    }, {
      "left" : "buf[2] = '\\\\';",
      "right" : "buf[2] = '\\\\';",
      "info" : "ExpressionStatement[63880-63894]:ExpressionStatement[63667-63681]"
    }, {
      "left" : "buf[3] = 'u';",
      "right" : "buf[3] = 'u';",
      "info" : "ExpressionStatement[63903-63916]:ExpressionStatement[63690-63703]"
    }, {
      "left" : "buf[4] = '0';",
      "right" : "buf[4] = '0';",
      "info" : "ExpressionStatement[63925-63938]:ExpressionStatement[63712-63725]"
    }, {
      "left" : "buf[5] = '0';",
      "right" : "buf[5] = '0';",
      "info" : "ExpressionStatement[63947-63960]:ExpressionStatement[63734-63747]"
    }, {
      "left" : "buf[8] = '\\\\';",
      "right" : "buf[8] = '\\\\';",
      "info" : "ExpressionStatement[64002-64016]:ExpressionStatement[63789-63803]"
    }, {
      "left" : "buf[9] = 'u';",
      "right" : "buf[9] = 'u';",
      "info" : "ExpressionStatement[64025-64038]:ExpressionStatement[63812-63825]"
    }, {
      "left" : "_entityBuffer = buf;",
      "right" : "_entityBuffer = buf;",
      "info" : "ExpressionStatement[64047-64067]:ExpressionStatement[63834-63854]"
    }, {
      "left" : "return buf;",
      "right" : "return buf;",
      "info" : "ReturnStatement[64076-64087]:ReturnStatement[63863-63874]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[64103-64112]:Modifier[63890-63899]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[64113-64117]:PrimitiveType[63900-63904]"
    }, {
      "left" : "_flushBuffer",
      "right" : "_flushBuffer",
      "info" : "SimpleName[64118-64130]:SimpleName[63905-63917]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[64140-64151]:SimpleType[63927-63938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64156-64377]:Block[63943-64164]"
    }, {
      "left" : "int len = _outputTail - _outputHead;",
      "right" : "int len = _outputTail - _outputHead;",
      "info" : "VariableDeclarationStatement[64166-64202]:VariableDeclarationStatement[63953-63989]"
    }, {
      "left" : "if (len > 0)",
      "right" : "if (len > 0)",
      "info" : "IfStatement[64211-64371]:IfStatement[63998-64158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64224-64371]:Block[64011-64158]"
    }, {
      "left" : "int offset = _outputHead;",
      "right" : "int offset = _outputHead;",
      "info" : "VariableDeclarationStatement[64238-64263]:VariableDeclarationStatement[64025-64050]"
    }, {
      "left" : "_outputTail = _outputHead = 0;",
      "right" : "_outputTail = _outputHead = 0;",
      "info" : "ExpressionStatement[64276-64306]:ExpressionStatement[64063-64093]"
    }, {
      "left" : "_writer.write(_outputBuffer, offset, len);",
      "right" : "_writer.write(_outputBuffer, offset, len);",
      "info" : "ExpressionStatement[64319-64361]:ExpressionStatement[64106-64148]"
    } ]
  },
  "interFileMappings" : { }
}