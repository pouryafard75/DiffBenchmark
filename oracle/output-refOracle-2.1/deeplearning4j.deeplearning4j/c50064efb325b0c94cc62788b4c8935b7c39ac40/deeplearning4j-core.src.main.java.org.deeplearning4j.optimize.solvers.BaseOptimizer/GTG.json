{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "BaseOptimizer",
      "right" : "BaseOptimizer",
      "info" : "TypeDeclaration[1725-8808]:TypeDeclaration[1725-8811]"
    }, {
      "left" : "protected NeuralNetConfiguration conf;",
      "right" : "protected NeuralNetConfiguration conf;",
      "info" : "FieldDeclaration[1844-1882]:FieldDeclaration[1844-1882]"
    }, {
      "left" : "protected int iteration = 0;",
      "right" : "protected int iteration = 0;",
      "info" : "FieldDeclaration[1887-1915]:FieldDeclaration[1887-1915]"
    }, {
      "left" : "protected static final Logger log = LoggerFactory.getLogger(BaseOptimizer.class);",
      "right" : "protected static final Logger log = LoggerFactory.getLogger(BaseOptimizer.class);",
      "info" : "FieldDeclaration[1920-2001]:FieldDeclaration[1920-2001]"
    }, {
      "left" : "protected StepFunction stepFunction;",
      "right" : "protected StepFunction stepFunction;",
      "info" : "FieldDeclaration[2006-2042]:FieldDeclaration[2006-2042]"
    }, {
      "left" : "protected Collection<IterationListener> iterationListeners = new ArrayList<>();",
      "right" : "protected Collection<IterationListener> iterationListeners = new ArrayList<>();",
      "info" : "FieldDeclaration[2047-2126]:FieldDeclaration[2047-2126]"
    }, {
      "left" : "protected Collection<TerminationCondition> terminationConditions = new ArrayList<>();",
      "right" : "protected Collection<TerminationCondition> terminationConditions = new ArrayList<>();",
      "info" : "FieldDeclaration[2131-2216]:FieldDeclaration[2131-2216]"
    }, {
      "left" : "protected Model model;",
      "right" : "protected Model model;",
      "info" : "FieldDeclaration[2221-2243]:FieldDeclaration[2221-2243]"
    }, {
      "left" : "protected BackTrackLineSearch lineMaximizer;",
      "right" : "protected BackTrackLineSearch lineMaximizer;",
      "info" : "FieldDeclaration[2248-2292]:FieldDeclaration[2248-2292]"
    }, {
      "left" : "protected Updater updater;",
      "right" : "protected Updater updater;",
      "info" : "FieldDeclaration[2297-2323]:FieldDeclaration[2297-2323]"
    }, {
      "left" : "protected double step;",
      "right" : "protected double step;",
      "info" : "FieldDeclaration[2328-2350]:FieldDeclaration[2328-2350]"
    }, {
      "left" : "private int batchSize = 10;",
      "right" : "private int batchSize = 10;",
      "info" : "FieldDeclaration[2355-2382]:FieldDeclaration[2355-2382]"
    }, {
      "left" : "protected double score,oldScore;",
      "right" : "protected double score,oldScore;",
      "info" : "FieldDeclaration[2387-2419]:FieldDeclaration[2387-2419]"
    }, {
      "left" : "protected double stepMax = Double.MAX_VALUE;",
      "right" : "protected double stepMax = Double.MAX_VALUE;",
      "info" : "FieldDeclaration[2424-2468]:FieldDeclaration[2424-2468]"
    }, {
      "left" : "public final static String GRADIENT_KEY = \"g\";",
      "right" : "public final static String GRADIENT_KEY = \"g\";",
      "info" : "FieldDeclaration[2473-2519]:FieldDeclaration[2473-2519]"
    }, {
      "left" : "public final static String SCORE_KEY = \"score\";",
      "right" : "public final static String SCORE_KEY = \"score\";",
      "info" : "FieldDeclaration[2524-2571]:FieldDeclaration[2524-2571]"
    }, {
      "left" : "public final static String PARAMS_KEY = \"params\";",
      "right" : "public final static String PARAMS_KEY = \"params\";",
      "info" : "FieldDeclaration[2576-2625]:FieldDeclaration[2576-2625]"
    }, {
      "left" : "public final static String SEARCH_DIR = \"searchDirection\";",
      "right" : "public final static String SEARCH_DIR = \"searchDirection\";",
      "info" : "FieldDeclaration[2630-2688]:FieldDeclaration[2630-2688]"
    }, {
      "left" : "protected Map<String,Object> searchState = new ConcurrentHashMap<>();",
      "right" : "protected Map<String,Object> searchState = new ConcurrentHashMap<>();",
      "info" : "FieldDeclaration[2693-2762]:FieldDeclaration[2693-2762]"
    }, {
      "left" : "public BaseOptimizer(NeuralNetConfiguration conf,StepFunction stepFunction,Collection<IterationListener> iterationListeners,Model model)",
      "right" : "public BaseOptimizer(NeuralNetConfiguration conf,StepFunction stepFunction,Collection<IterationListener> iterationListeners,Model model)",
      "info" : "MethodDeclaration[2768-3149]:MethodDeclaration[2768-3149]"
    }, {
      "left" : "public BaseOptimizer(NeuralNetConfiguration conf,StepFunction stepFunction,Collection<IterationListener> iterationListeners,Collection<TerminationCondition> terminationConditions,Model model)",
      "right" : "public BaseOptimizer(NeuralNetConfiguration conf,StepFunction stepFunction,Collection<IterationListener> iterationListeners,Collection<TerminationCondition> terminationConditions,Model model)",
      "info" : "MethodDeclaration[3156-3982]:MethodDeclaration[3156-3982]"
    }, {
      "left" : "public double score()",
      "right" : "public double score()",
      "info" : "MethodDeclaration[3989-4088]:MethodDeclaration[3989-4088]"
    }, {
      "left" : "public Pair<Gradient,Double> gradientAndScore()",
      "right" : "public Pair<Gradient,Double> gradientAndScore()",
      "info" : "MethodDeclaration[4095-4542]:MethodDeclaration[4095-4542]"
    }, {
      "left" : "public  boolean optimize()",
      "right" : "public  boolean optimize()",
      "info" : "MethodDeclaration[4549-7363]:MethodDeclaration[4549-7366]"
    }, {
      "left" : "protected  void postFirstStep(INDArray gradient)",
      "right" : "protected  void postFirstStep(INDArray gradient)",
      "info" : "MethodDeclaration[7369-7441]:MethodDeclaration[7372-7444]"
    }, {
      "left" : "public int batchSize()",
      "right" : "public int batchSize()",
      "info" : "MethodDeclaration[7447-7517]:MethodDeclaration[7450-7520]"
    }, {
      "left" : "public void setBatchSize(int batchSize)",
      "right" : "public void setBatchSize(int batchSize)",
      "info" : "MethodDeclaration[7523-7620]:MethodDeclaration[7526-7623]"
    }, {
      "left" : "public  void preProcessLine(INDArray line)",
      "right" : "public  void preProcessLine(INDArray line)",
      "info" : "MethodDeclaration[7627-7817]:MethodDeclaration[7630-7820]"
    }, {
      "left" : "public  void postStep()",
      "right" : "public  void postStep()",
      "info" : "MethodDeclaration[7822-7969]:MethodDeclaration[7825-7972]"
    }, {
      "left" : "public void updateGradientAccordingToParams(INDArray gradient, Model model, int batchSize, String paramType, int iteration)",
      "right" : "public void updateGradientAccordingToParams(INDArray gradient, Model model, int batchSize, String paramType, int iteration)",
      "info" : "MethodDeclaration[7976-8383]:MethodDeclaration[7979-8386]"
    }, {
      "left" : "public  void setupSearchState(Pair<Gradient, Double> pair)",
      "right" : "public  void setupSearchState(Pair<Gradient, Double> pair)",
      "info" : "MethodDeclaration[8389-8802]:MethodDeclaration[8392-8805]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3027-3149]:Block[3027-3149]"
    }, {
      "left" : "this(conf,stepFunction,iterationListeners, Arrays.asList(new ZeroDirection(),new EpsTermination()),model);",
      "right" : "this(conf,stepFunction,iterationListeners, Arrays.asList(new ZeroDirection(),new EpsTermination()),model);",
      "info" : "ConstructorInvocation[3037-3143]:ConstructorInvocation[3037-3143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3506-3982]:Block[3506-3982]"
    }, {
      "left" : "this.conf = conf;",
      "right" : "this.conf = conf;",
      "info" : "ExpressionStatement[3516-3533]:ExpressionStatement[3516-3533]"
    }, {
      "left" : "this.stepFunction = stepFunction;",
      "right" : "this.stepFunction = stepFunction;",
      "info" : "ExpressionStatement[3542-3575]:ExpressionStatement[3542-3575]"
    }, {
      "left" : "this.iterationListeners = iterationListeners != null ? iterationListeners : new ArrayList<IterationListener>();",
      "right" : "this.iterationListeners = iterationListeners != null ? iterationListeners : new ArrayList<IterationListener>();",
      "info" : "ExpressionStatement[3584-3695]:ExpressionStatement[3584-3695]"
    }, {
      "left" : "this.terminationConditions = terminationConditions;",
      "right" : "this.terminationConditions = terminationConditions;",
      "info" : "ExpressionStatement[3704-3755]:ExpressionStatement[3704-3755]"
    }, {
      "left" : "this.model = model;",
      "right" : "this.model = model;",
      "info" : "ExpressionStatement[3764-3783]:ExpressionStatement[3764-3783]"
    }, {
      "left" : "lineMaximizer = new BackTrackLineSearch(model,stepFunction,this);",
      "right" : "lineMaximizer = new BackTrackLineSearch(model,stepFunction,this);",
      "info" : "ExpressionStatement[3792-3857]:ExpressionStatement[3792-3857]"
    }, {
      "left" : "lineMaximizer.setStepMax(stepMax);",
      "right" : "lineMaximizer.setStepMax(stepMax);",
      "info" : "ExpressionStatement[3866-3900]:ExpressionStatement[3866-3900]"
    }, {
      "left" : "lineMaximizer.setMaxIterations(conf.getNumLineSearchIterations());",
      "right" : "lineMaximizer.setMaxIterations(conf.getNumLineSearchIterations());",
      "info" : "ExpressionStatement[3909-3975]:ExpressionStatement[3909-3975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4025-4088]:Block[4025-4088]"
    }, {
      "left" : "model.setScore();",
      "right" : "model.setScore();",
      "info" : "ExpressionStatement[4035-4052]:ExpressionStatement[4035-4052]"
    }, {
      "left" : "return model.score();",
      "right" : "return model.score();",
      "info" : "ReturnStatement[4061-4082]:ReturnStatement[4061-4082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4157-4542]:Block[4157-4542]"
    }, {
      "left" : "model.setScore();",
      "right" : "model.setScore();",
      "info" : "ExpressionStatement[4167-4184]:ExpressionStatement[4167-4184]"
    }, {
      "left" : "Pair<Gradient,Double> pair = model.gradientAndScore();",
      "right" : "Pair<Gradient,Double> pair = model.gradientAndScore();",
      "info" : "VariableDeclarationStatement[4193-4247]:VariableDeclarationStatement[4193-4247]"
    }, {
      "left" : "for(String paramType : pair.getFirst().gradientForVariable().keySet())",
      "right" : "for(String paramType : pair.getFirst().gradientForVariable().keySet())",
      "info" : "EnhancedForStatement[4256-4515]:EnhancedForStatement[4256-4515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4327-4515]:Block[4327-4515]"
    }, {
      "left" : "INDArray gradient = pair.getFirst().getGradientFor(paramType);",
      "right" : "INDArray gradient = pair.getFirst().getGradientFor(paramType);",
      "info" : "VariableDeclarationStatement[4341-4403]:VariableDeclarationStatement[4341-4403]"
    }, {
      "left" : "updateGradientAccordingToParams(gradient, model, model.batchSize(), paramType,iteration);",
      "right" : "updateGradientAccordingToParams(gradient, model, model.batchSize(), paramType,iteration);",
      "info" : "ExpressionStatement[4416-4505]:ExpressionStatement[4416-4505]"
    }, {
      "left" : "return pair;",
      "right" : "return pair;",
      "info" : "ReturnStatement[4524-4536]:ReturnStatement[4524-4536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4696-7363]:Block[4696-7366]"
    }, {
      "left" : "model.validateInput();",
      "right" : "model.validateInput();",
      "info" : "ExpressionStatement[4751-4773]:ExpressionStatement[4751-4773]"
    }, {
      "left" : "Pair<Gradient,Double> pair = gradientAndScore();",
      "right" : "Pair<Gradient,Double> pair = gradientAndScore();",
      "info" : "VariableDeclarationStatement[4782-4830]:VariableDeclarationStatement[4782-4830]"
    }, {
      "left" : "score = model.score();",
      "right" : "score = pair.getSecond();",
      "info" : "ExpressionStatement[4839-4861]:ExpressionStatement[4839-4864]"
    }, {
      "left" : "setupSearchState(pair);",
      "right" : "setupSearchState(pair);",
      "info" : "ExpressionStatement[4870-4893]:ExpressionStatement[4873-4896]"
    }, {
      "left" : "INDArray gradient = (INDArray) searchState.get(GRADIENT_KEY);",
      "right" : "INDArray gradient = (INDArray) searchState.get(GRADIENT_KEY);",
      "info" : "VariableDeclarationStatement[4902-4963]:VariableDeclarationStatement[4905-4966]"
    }, {
      "left" : "INDArray searchDirection, parameters;",
      "right" : "INDArray searchDirection, parameters;",
      "info" : "VariableDeclarationStatement[4972-5009]:VariableDeclarationStatement[4975-5012]"
    }, {
      "left" : "preProcessLine(gradient);",
      "right" : "preProcessLine(gradient);",
      "info" : "ExpressionStatement[5559-5584]:ExpressionStatement[5562-5587]"
    }, {
      "left" : "for(int i = 0; i < conf.getNumIterations(); i++)",
      "right" : "for(int i = 0; i < conf.getNumIterations(); i++)",
      "info" : "ForStatement[5594-7335]:ForStatement[5597-7338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5643-7335]:Block[5646-7338]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[5688-6144]:TryStatement[5691-6147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5692-6005]:Block[5695-6008]"
    }, {
      "left" : "gradient = (INDArray) searchState.get(GRADIENT_KEY);",
      "right" : "gradient = (INDArray) searchState.get(GRADIENT_KEY);",
      "info" : "ExpressionStatement[5710-5762]:ExpressionStatement[5713-5765]"
    }, {
      "left" : "searchDirection = (INDArray) searchState.get(SEARCH_DIR);",
      "right" : "searchDirection = (INDArray) searchState.get(SEARCH_DIR);",
      "info" : "ExpressionStatement[5779-5836]:ExpressionStatement[5782-5839]"
    }, {
      "left" : "parameters = (INDArray) searchState.get(PARAMS_KEY);",
      "right" : "parameters = (INDArray) searchState.get(PARAMS_KEY);",
      "info" : "ExpressionStatement[5853-5905]:ExpressionStatement[5856-5908]"
    }, {
      "left" : "step = lineMaximizer.optimize(parameters, gradient, searchDirection);",
      "right" : "step = lineMaximizer.optimize(parameters, gradient, searchDirection);",
      "info" : "ExpressionStatement[5922-5991]:ExpressionStatement[5925-5994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6037-6144]:Block[6040-6147]"
    }, {
      "left" : "log.warn(\"Invalid step...continuing another iteration: {}\",e.getMessage());",
      "right" : "log.warn(\"Invalid step...continuing another iteration: {}\",e.getMessage());",
      "info" : "ExpressionStatement[6055-6130]:ExpressionStatement[6058-6133]"
    }, {
      "left" : "oldScore = score;",
      "right" : "oldScore = score;",
      "info" : "ExpressionStatement[6233-6250]:ExpressionStatement[6236-6253]"
    }, {
      "left" : "pair = gradientAndScore();",
      "right" : "pair = gradientAndScore();",
      "info" : "ExpressionStatement[6263-6289]:ExpressionStatement[6266-6292]"
    }, {
      "left" : "setupSearchState(pair);",
      "right" : "setupSearchState(pair);",
      "info" : "ExpressionStatement[6302-6325]:ExpressionStatement[6305-6328]"
    }, {
      "left" : "score = pair.getSecond();",
      "right" : "score = pair.getSecond();",
      "info" : "ExpressionStatement[6338-6363]:ExpressionStatement[6341-6366]"
    }, {
      "left" : "for(IterationListener listener : iterationListeners)\n                listener.iterationDone(model,i);",
      "right" : "for(IterationListener listener : iterationListeners)\n                listener.iterationDone(model,i);",
      "info" : "EnhancedForStatement[6422-6523]:EnhancedForStatement[6425-6526]"
    }, {
      "left" : "listener.iterationDone(model,i);",
      "right" : "listener.iterationDone(model,i);",
      "info" : "ExpressionStatement[6491-6523]:ExpressionStatement[6494-6526]"
    }, {
      "left" : "for(TerminationCondition condition : terminationConditions)",
      "right" : "for(TerminationCondition condition : terminationConditions)",
      "info" : "EnhancedForStatement[6619-6943]:EnhancedForStatement[6622-6946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6678-6943]:Block[6681-6946]"
    }, {
      "left" : "if(condition.terminate(score,oldScore,new Object[]{gradient}))",
      "right" : "if(condition.terminate(score,oldScore,new Object[]{gradient}))",
      "info" : "IfStatement[6696-6929]:IfStatement[6699-6932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6758-6929]:Block[6761-6932]"
    }, {
      "left" : "log.debug(\"Hit termination condition: score={}, oldScore={}, condition={}\",score,oldScore,condition);",
      "right" : "log.debug(\"Hit termination condition: score={}, oldScore={}, condition={}\",score,oldScore,condition);",
      "info" : "ExpressionStatement[6777-6878]:ExpressionStatement[6780-6881]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6899-6911]:ReturnStatement[6902-6914]"
    }, {
      "left" : "postStep();",
      "right" : "postStep();",
      "info" : "ExpressionStatement[7016-7027]:ExpressionStatement[7019-7030]"
    }, {
      "left" : "this.iteration++;",
      "right" : "this.iteration++;",
      "info" : "ExpressionStatement[7040-7057]:ExpressionStatement[7043-7060]"
    }, {
      "left" : "for(TerminationCondition condition : terminationConditions)\n                if(condition.terminate(score,oldScore,new Object[]{gradient}))\n                    return true;",
      "right" : "for(TerminationCondition condition : terminationConditions)\n                if(condition.terminate(score,oldScore,new Object[]{gradient}))\n                    return true;",
      "info" : "EnhancedForStatement[7152-7323]:EnhancedForStatement[7155-7326]"
    }, {
      "left" : "if(condition.terminate(score,oldScore,new Object[]{gradient}))",
      "right" : "if(condition.terminate(score,oldScore,new Object[]{gradient}))",
      "info" : "IfStatement[7228-7323]:IfStatement[7231-7326]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7311-7323]:ReturnStatement[7314-7326]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7345-7357]:ReturnStatement[7348-7360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7418-7441]:Block[7421-7444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7484-7517]:Block[7487-7520]"
    }, {
      "left" : "return batchSize;",
      "right" : "return batchSize;",
      "info" : "ReturnStatement[7494-7511]:ReturnStatement[7497-7514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7577-7620]:Block[7580-7623]"
    }, {
      "left" : "this.batchSize = batchSize;",
      "right" : "this.batchSize = batchSize;",
      "info" : "ExpressionStatement[7587-7614]:ExpressionStatement[7590-7617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7794-7817]:Block[7797-7820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7946-7969]:Block[7949-7972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8114-8383]:Block[8117-8386]"
    }, {
      "left" : "if(updater == null)",
      "right" : "if(updater == null)",
      "info" : "IfStatement[8124-8206]:IfStatement[8127-8209]"
    }, {
      "left" : "updater = UpdaterCreator.getUpdater(model.conf());",
      "right" : "updater = UpdaterCreator.getUpdater(model.conf());",
      "info" : "ExpressionStatement[8156-8206]:ExpressionStatement[8159-8209]"
    }, {
      "left" : "Layer layer = (Layer) model;",
      "right" : "Layer layer = (Layer) model;",
      "info" : "VariableDeclarationStatement[8215-8243]:VariableDeclarationStatement[8218-8246]"
    }, {
      "left" : "Gradient g = new DefaultGradient();",
      "right" : "Gradient g = new DefaultGradient();",
      "info" : "VariableDeclarationStatement[8252-8287]:VariableDeclarationStatement[8255-8290]"
    }, {
      "left" : "g.setGradientFor(paramType,gradient);",
      "right" : "g.setGradientFor(paramType,gradient);",
      "info" : "ExpressionStatement[8296-8333]:ExpressionStatement[8299-8336]"
    }, {
      "left" : "updater.update(layer,g,iteration);",
      "right" : "updater.update(layer,g,iteration);",
      "info" : "ExpressionStatement[8342-8376]:ExpressionStatement[8345-8379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8535-8802]:Block[8538-8805]"
    }, {
      "left" : "INDArray gradient = pair.getFirst().gradient(conf.variables());",
      "right" : "INDArray gradient = pair.getFirst().gradient(conf.variables());",
      "info" : "VariableDeclarationStatement[8545-8608]:VariableDeclarationStatement[8548-8611]"
    }, {
      "left" : "INDArray params = model.params();",
      "right" : "INDArray params = model.params();",
      "info" : "VariableDeclarationStatement[8617-8650]:VariableDeclarationStatement[8620-8653]"
    }, {
      "left" : "searchState.put(GRADIENT_KEY,gradient);",
      "right" : "searchState.put(GRADIENT_KEY,gradient);",
      "info" : "ExpressionStatement[8659-8698]:ExpressionStatement[8662-8701]"
    }, {
      "left" : "searchState.put(SCORE_KEY,pair.getSecond());",
      "right" : "searchState.put(SCORE_KEY,pair.getSecond());",
      "info" : "ExpressionStatement[8707-8751]:ExpressionStatement[8710-8754]"
    }, {
      "left" : "searchState.put(PARAMS_KEY,params);",
      "right" : "searchState.put(PARAMS_KEY,params);",
      "info" : "ExpressionStatement[8760-8795]:ExpressionStatement[8763-8798]"
    } ]
  },
  "interFileMappings" : { }
}