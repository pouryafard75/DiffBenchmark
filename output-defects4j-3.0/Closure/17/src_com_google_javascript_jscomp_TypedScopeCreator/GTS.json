{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "TypeDeclaration[4535-75268]:TypeDeclaration[4535-75492]"
    }, {
      "left" : "static final String DELEGATE_PROXY_SUFFIX =\n      ObjectType.createDelegateSuffix(\"Proxy\");",
      "right" : "static final String DELEGATE_PROXY_SUFFIX =\n      ObjectType.createDelegateSuffix(\"Proxy\");",
      "info" : "FieldDeclaration[5090-5264]:FieldDeclaration[5090-5264]"
    }, {
      "left" : "static final DiagnosticType MALFORMED_TYPEDEF =\n      DiagnosticType.warning(\n          \"JSC_MALFORMED_TYPEDEF\",\n          \"Typedef for {0} does not have any type information\");",
      "right" : "static final DiagnosticType MALFORMED_TYPEDEF =\n      DiagnosticType.warning(\n          \"JSC_MALFORMED_TYPEDEF\",\n          \"Typedef for {0} does not have any type information\");",
      "info" : "FieldDeclaration[5268-5445]:FieldDeclaration[5268-5445]"
    }, {
      "left" : "static final DiagnosticType ENUM_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_ENUM_INITIALIZER_NOT_ENUM\",\n          \"enum initializer must be an object literal or an enum\");",
      "right" : "static final DiagnosticType ENUM_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_ENUM_INITIALIZER_NOT_ENUM\",\n          \"enum initializer must be an object literal or an enum\");",
      "info" : "FieldDeclaration[5449-5636]:FieldDeclaration[5449-5636]"
    }, {
      "left" : "static final DiagnosticType CTOR_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_CTOR_INITIALIZER_NOT_CTOR\",\n          \"Constructor {0} must be initialized at declaration\");",
      "right" : "static final DiagnosticType CTOR_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_CTOR_INITIALIZER_NOT_CTOR\",\n          \"Constructor {0} must be initialized at declaration\");",
      "info" : "FieldDeclaration[5640-5824]:FieldDeclaration[5640-5824]"
    }, {
      "left" : "static final DiagnosticType IFACE_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_IFACE_INITIALIZER_NOT_IFACE\",\n          \"Interface {0} must be initialized at declaration\");",
      "right" : "static final DiagnosticType IFACE_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_IFACE_INITIALIZER_NOT_IFACE\",\n          \"Interface {0} must be initialized at declaration\");",
      "info" : "FieldDeclaration[5828-6013]:FieldDeclaration[5828-6013]"
    }, {
      "left" : "static final DiagnosticType CONSTRUCTOR_EXPECTED =\n      DiagnosticType.warning(\n          \"JSC_REFLECT_CONSTRUCTOR_EXPECTED\",\n          \"Constructor expected as first argument\");",
      "right" : "static final DiagnosticType CONSTRUCTOR_EXPECTED =\n      DiagnosticType.warning(\n          \"JSC_REFLECT_CONSTRUCTOR_EXPECTED\",\n          \"Constructor expected as first argument\");",
      "info" : "FieldDeclaration[6017-6196]:FieldDeclaration[6017-6196]"
    }, {
      "left" : "static final DiagnosticType UNKNOWN_LENDS =\n      DiagnosticType.warning(\n          \"JSC_UNKNOWN_LENDS\",\n          \"Variable {0} not declared before @lends annotation.\");",
      "right" : "static final DiagnosticType UNKNOWN_LENDS =\n      DiagnosticType.warning(\n          \"JSC_UNKNOWN_LENDS\",\n          \"Variable {0} not declared before @lends annotation.\");",
      "info" : "FieldDeclaration[6200-6370]:FieldDeclaration[6200-6370]"
    }, {
      "left" : "static final DiagnosticType LENDS_ON_NON_OBJECT =\n      DiagnosticType.warning(\n          \"JSC_LENDS_ON_NON_OBJECT\",\n          \"May only lend properties to object types. {0} has type {1}.\");",
      "right" : "static final DiagnosticType LENDS_ON_NON_OBJECT =\n      DiagnosticType.warning(\n          \"JSC_LENDS_ON_NON_OBJECT\",\n          \"May only lend properties to object types. {0} has type {1}.\");",
      "info" : "FieldDeclaration[6374-6564]:FieldDeclaration[6374-6564]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[6568-6608]:FieldDeclaration[6568-6608]"
    }, {
      "left" : "private final ErrorReporter typeParsingErrorReporter;",
      "right" : "private final ErrorReporter typeParsingErrorReporter;",
      "info" : "FieldDeclaration[6611-6664]:FieldDeclaration[6611-6664]"
    }, {
      "left" : "private final TypeValidator validator;",
      "right" : "private final TypeValidator validator;",
      "info" : "FieldDeclaration[6667-6705]:FieldDeclaration[6667-6705]"
    }, {
      "left" : "private final CodingConvention codingConvention;",
      "right" : "private final CodingConvention codingConvention;",
      "info" : "FieldDeclaration[6708-6756]:FieldDeclaration[6708-6756]"
    }, {
      "left" : "private final JSTypeRegistry typeRegistry;",
      "right" : "private final JSTypeRegistry typeRegistry;",
      "info" : "FieldDeclaration[6759-6801]:FieldDeclaration[6759-6801]"
    }, {
      "left" : "private final List<ObjectType> delegateProxyPrototypes = Lists.newArrayList();",
      "right" : "private final List<ObjectType> delegateProxyPrototypes = Lists.newArrayList();",
      "info" : "FieldDeclaration[6804-6882]:FieldDeclaration[6804-6882]"
    }, {
      "left" : "private final Map<String, String> delegateCallingConventions =\n      Maps.newHashMap();",
      "right" : "private final Map<String, String> delegateCallingConventions =\n      Maps.newHashMap();",
      "info" : "FieldDeclaration[6885-6972]:FieldDeclaration[6885-6972]"
    }, {
      "left" : "private final Map<Node, AstFunctionContents> functionAnalysisResults =\n      Maps.newHashMap();",
      "right" : "private final Map<Node, AstFunctionContents> functionAnalysisResults =\n      Maps.newHashMap();",
      "info" : "FieldDeclaration[7025-7120]:FieldDeclaration[7025-7120]"
    }, {
      "left" : "DeferredSetType",
      "right" : "DeferredSetType",
      "info" : "TypeDeclaration[7124-7797]:TypeDeclaration[7124-7797]"
    }, {
      "left" : "final Node node;",
      "right" : "final Node node;",
      "info" : "FieldDeclaration[7303-7319]:FieldDeclaration[7303-7319]"
    }, {
      "left" : "final JSType type;",
      "right" : "final JSType type;",
      "info" : "FieldDeclaration[7324-7342]:FieldDeclaration[7324-7342]"
    }, {
      "left" : "DeferredSetType(Node node, JSType type)",
      "right" : "DeferredSetType(Node node, JSType type)",
      "info" : "MethodDeclaration[7348-7685]:MethodDeclaration[7348-7685]"
    }, {
      "left" : "void resolve(Scope scope)",
      "right" : "void resolve(Scope scope)",
      "info" : "MethodDeclaration[7691-7793]:MethodDeclaration[7691-7793]"
    }, {
      "left" : "TypedScopeCreator(AbstractCompiler compiler)",
      "right" : "TypedScopeCreator(AbstractCompiler compiler)",
      "info" : "MethodDeclaration[7801-7903]:MethodDeclaration[7801-7903]"
    }, {
      "left" : "TypedScopeCreator(AbstractCompiler compiler,\n      CodingConvention codingConvention)",
      "right" : "TypedScopeCreator(AbstractCompiler compiler,\n      CodingConvention codingConvention)",
      "info" : "MethodDeclaration[7907-8245]:MethodDeclaration[7907-8245]"
    }, {
      "left" : "public Scope createScope(Node root, Scope parent)",
      "right" : "public Scope createScope(Node root, Scope parent)",
      "info" : "MethodDeclaration[8249-10357]:MethodDeclaration[8249-10357]"
    }, {
      "left" : "void patchGlobalScope(Scope globalScope, Node scriptRoot)",
      "right" : "void patchGlobalScope(Scope globalScope, Node scriptRoot)",
      "info" : "MethodDeclaration[10361-12314]:MethodDeclaration[10361-12314]"
    }, {
      "left" : "Scope createInitialScope(Node root)",
      "right" : "Scope createInitialScope(Node root)",
      "info" : "MethodDeclaration[12318-13846]:MethodDeclaration[12318-13846]"
    }, {
      "left" : "private void declareNativeFunctionType(Scope scope, JSTypeNative tId)",
      "right" : "private void declareNativeFunctionType(Scope scope, JSTypeNative tId)",
      "info" : "MethodDeclaration[13850-14154]:MethodDeclaration[13850-14154]"
    }, {
      "left" : "private void declareNativeValueType(Scope scope, String name,\n      JSTypeNative tId)",
      "right" : "private void declareNativeValueType(Scope scope, String name,\n      JSTypeNative tId)",
      "info" : "MethodDeclaration[14158-14318]:MethodDeclaration[14158-14318]"
    }, {
      "left" : "private void declareNativeType(Scope scope, String name, JSType t)",
      "right" : "private void declareNativeType(Scope scope, String name, JSType t)",
      "info" : "MethodDeclaration[14322-14441]:MethodDeclaration[14322-14441]"
    }, {
      "left" : "DiscoverEnumsAndTypedefs",
      "right" : "DiscoverEnumsAndTypedefs",
      "info" : "TypeDeclaration[14445-15966]:TypeDeclaration[14445-15966]"
    }, {
      "left" : "private final JSTypeRegistry registry;",
      "right" : "private final JSTypeRegistry registry;",
      "info" : "FieldDeclaration[14544-14582]:FieldDeclaration[14544-14582]"
    }, {
      "left" : "DiscoverEnumsAndTypedefs(JSTypeRegistry registry)",
      "right" : "DiscoverEnumsAndTypedefs(JSTypeRegistry registry)",
      "info" : "MethodDeclaration[14588-14677]:MethodDeclaration[14588-14677]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node node, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node node, Node parent)",
      "info" : "MethodDeclaration[14683-15524]:MethodDeclaration[14683-15524]"
    }, {
      "left" : "private void identifyNameNode(\n        Node nameNode, Node valueNode, JSDocInfo info)",
      "right" : "private void identifyNameNode(\n        Node nameNode, Node valueNode, JSDocInfo info)",
      "info" : "MethodDeclaration[15530-15962]:MethodDeclaration[15530-15962]"
    }, {
      "left" : "private JSType getNativeType(JSTypeNative nativeType)",
      "right" : "private JSType getNativeType(JSTypeNative nativeType)",
      "info" : "MethodDeclaration[15970-16080]:MethodDeclaration[15970-16080]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "TypeDeclaration[16084-66619]:TypeDeclaration[16084-66843]"
    }, {
      "left" : "final Scope scope;",
      "right" : "final Scope scope;",
      "info" : "FieldDeclaration[16175-16247]:FieldDeclaration[16175-16247]"
    }, {
      "left" : "private final List<DeferredSetType> deferredSetTypes =\n        Lists.newArrayList();",
      "right" : "private final List<DeferredSetType> deferredSetTypes =\n        Lists.newArrayList();",
      "info" : "FieldDeclaration[16253-16337]:FieldDeclaration[16253-16337]"
    }, {
      "left" : "private final List<Node> nonExternFunctions = Lists.newArrayList();",
      "right" : "private final List<Node> nonExternFunctions = Lists.newArrayList();",
      "info" : "FieldDeclaration[16343-16497]:FieldDeclaration[16343-16497]"
    }, {
      "left" : "private List<Node> lentObjectLiterals = null;",
      "right" : "private List<Node> lentObjectLiterals = null;",
      "info" : "FieldDeclaration[16503-16959]:FieldDeclaration[16503-16959]"
    }, {
      "left" : "private final List<StubDeclaration> stubDeclarations =\n        Lists.newArrayList();",
      "right" : "private final List<StubDeclaration> stubDeclarations =\n        Lists.newArrayList();",
      "info" : "FieldDeclaration[16965-17219]:FieldDeclaration[16965-17219]"
    }, {
      "left" : "private String sourceName = null;",
      "right" : "private String sourceName = null;",
      "info" : "FieldDeclaration[17225-17320]:FieldDeclaration[17225-17320]"
    }, {
      "left" : "private InputId inputId;",
      "right" : "private InputId inputId;",
      "info" : "FieldDeclaration[17326-17406]:FieldDeclaration[17326-17406]"
    }, {
      "left" : "private AbstractScopeBuilder(Scope scope)",
      "right" : "private AbstractScopeBuilder(Scope scope)",
      "info" : "MethodDeclaration[17412-17487]:MethodDeclaration[17412-17487]"
    }, {
      "left" : "void setDeferredType(Node node, JSType type)",
      "right" : "void setDeferredType(Node node, JSType type)",
      "info" : "MethodDeclaration[17493-17606]:MethodDeclaration[17493-17606]"
    }, {
      "left" : "void resolveTypes()",
      "right" : "void resolveTypes()",
      "info" : "MethodDeclaration[17612-18112]:MethodDeclaration[17612-18112]"
    }, {
      "left" : "public final boolean shouldTraverse(NodeTraversal t, Node n,\n        Node parent)",
      "right" : "public final boolean shouldTraverse(NodeTraversal t, Node n,\n        Node parent)",
      "info" : "MethodDeclaration[18118-19161]:MethodDeclaration[18118-19161]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[19167-20932]:MethodDeclaration[19167-20932]"
    }, {
      "left" : "private void attachLiteralTypes(NodeTraversal t, Node n)",
      "right" : "private void attachLiteralTypes(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[20938-22143]:MethodDeclaration[20938-22143]"
    }, {
      "left" : "private void defineObjectLiteral(Node objectLit)",
      "right" : "private void defineObjectLiteral(Node objectLit)",
      "info" : "MethodDeclaration[22149-23823]:MethodDeclaration[22149-23823]"
    }, {
      "left" : "void processObjectLitProperties(\n        Node objLit, ObjectType objLitType,\n        boolean declareOnOwner)",
      "right" : "void processObjectLitProperties(\n        Node objLit, ObjectType objLitType,\n        boolean declareOnOwner)",
      "info" : "MethodDeclaration[23829-25597]:MethodDeclaration[23829-25597]"
    }, {
      "left" : "private JSType getDeclaredTypeInAnnotation(String sourceName,\n        Node node, JSDocInfo info)",
      "right" : "private JSType getDeclaredTypeInAnnotation(String sourceName,\n        Node node, JSDocInfo info)",
      "info" : "MethodDeclaration[25603-26507]:MethodDeclaration[25603-26507]"
    }, {
      "left" : "void assertDefinitionNode(Node n, int type)",
      "right" : "void assertDefinitionNode(Node n, int type)",
      "info" : "MethodDeclaration[26513-26813]:MethodDeclaration[26513-26813]"
    }, {
      "left" : "void defineCatch(Node n, Node parent)",
      "right" : "void defineCatch(Node n, Node parent)",
      "info" : "MethodDeclaration[26819-27038]:MethodDeclaration[26819-27038]"
    }, {
      "left" : "void defineVar(Node n, Node parent)",
      "right" : "void defineVar(Node n, Node parent)",
      "info" : "MethodDeclaration[27044-27670]:MethodDeclaration[27044-27670]"
    }, {
      "left" : "void defineFunctionLiteral(Node n, Node parent)",
      "right" : "void defineFunctionLiteral(Node n, Node parent)",
      "info" : "MethodDeclaration[27676-28577]:MethodDeclaration[27676-28577]"
    }, {
      "left" : "private void defineName(Node name, Node var, Node parent, JSDocInfo info)",
      "right" : "private void defineName(Node name, Node var, Node parent, JSDocInfo info)",
      "info" : "MethodDeclaration[28583-29387]:MethodDeclaration[28583-29387]"
    }, {
      "left" : "private boolean shouldUseFunctionLiteralType(\n        FunctionType type, JSDocInfo info, Node lValue)",
      "right" : "private boolean shouldUseFunctionLiteralType(\n        FunctionType type, JSDocInfo info, Node lValue)",
      "info" : "MethodDeclaration[29393-30067]:MethodDeclaration[29393-30067]"
    }, {
      "left" : "private FunctionType createFunctionTypeFromNodes(\n        @Nullable Node rValue,\n        @Nullable String name,\n        @Nullable JSDocInfo info,\n        @Nullable Node lvalueNode)",
      "right" : "private FunctionType createFunctionTypeFromNodes(\n        @Nullable Node rValue,\n        @Nullable String name,\n        @Nullable JSDocInfo info,\n        @Nullable Node lvalueNode)",
      "info" : "MethodDeclaration[30073-35290]:MethodDeclaration[30073-35290]"
    }, {
      "left" : "private FunctionType findOverriddenFunction(\n        ObjectType ownerType, String propName)",
      "right" : "private FunctionType findOverriddenFunction(\n        ObjectType ownerType, String propName)",
      "info" : "MethodDeclaration[35296-36163]:MethodDeclaration[35296-36163]"
    }, {
      "left" : "private EnumType createEnumTypeFromNodes(Node rValue, String name,\n        JSDocInfo info, Node lValueNode)",
      "right" : "private EnumType createEnumTypeFromNodes(Node rValue, String name,\n        JSDocInfo info, Node lValueNode)",
      "info" : "MethodDeclaration[36169-38489]:MethodDeclaration[36169-38489]"
    }, {
      "left" : "private void defineSlot(Node name, Node parent, JSType type)",
      "right" : "private void defineSlot(Node name, Node parent, JSType type)",
      "info" : "MethodDeclaration[38495-39019]:MethodDeclaration[38495-39019]"
    }, {
      "left" : "void defineSlot(Node n, Node parent, JSType type, boolean inferred)",
      "right" : "void defineSlot(Node n, Node parent, JSType type, boolean inferred)",
      "info" : "MethodDeclaration[39025-40203]:MethodDeclaration[39025-40203]"
    }, {
      "left" : "void defineSlot(Node n, Node parent, String variableName,\n        JSType type, boolean inferred)",
      "right" : "void defineSlot(Node n, Node parent, String variableName,\n        JSType type, boolean inferred)",
      "info" : "MethodDeclaration[40210-46440]:MethodDeclaration[40210-46440]"
    }, {
      "left" : "private boolean isQnameRootedInGlobalScope(Node n)",
      "right" : "private boolean isQnameRootedInGlobalScope(Node n)",
      "info" : "MethodDeclaration[46446-46686]:MethodDeclaration[46446-46686]"
    }, {
      "left" : "private Scope getQnameRootScope(Node n)",
      "right" : "private Scope getQnameRootScope(Node n)",
      "info" : "MethodDeclaration[46692-47039]:MethodDeclaration[46692-47039]"
    }, {
      "left" : "private JSType getDeclaredType(String sourceName, JSDocInfo info,\n        Node lValue, @Nullable Node rValue)",
      "right" : "private JSType getDeclaredType(String sourceName, JSDocInfo info,\n        Node lValue, @Nullable Node rValue)",
      "info" : "MethodDeclaration[47045-49712]:MethodDeclaration[47045-49936]"
    }, {
      "left" : "private FunctionType getFunctionType(@Nullable Var v)",
      "right" : "private FunctionType getFunctionType(@Nullable Var v)",
      "info" : "MethodDeclaration[49718-49929]:MethodDeclaration[49942-50153]"
    }, {
      "left" : "private void checkForCallingConventionDefiningCalls(\n        Node n, Map<String, String> delegateCallingConventions)",
      "right" : "private void checkForCallingConventionDefiningCalls(\n        Node n, Map<String, String> delegateCallingConventions)",
      "info" : "MethodDeclaration[49935-50250]:MethodDeclaration[50159-50474]"
    }, {
      "left" : "private void checkForClassDefiningCalls(\n        NodeTraversal t, Node n, Node parent)",
      "right" : "private void checkForClassDefiningCalls(\n        NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[50256-53381]:MethodDeclaration[50480-53605]"
    }, {
      "left" : "private void applyDelegateRelationship(\n        DelegateRelationship delegateRelationship)",
      "right" : "private void applyDelegateRelationship(\n        DelegateRelationship delegateRelationship)",
      "info" : "MethodDeclaration[53387-55298]:MethodDeclaration[53611-55522]"
    }, {
      "left" : "void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "right" : "void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "info" : "MethodDeclaration[55304-60406]:MethodDeclaration[55528-60630]"
    }, {
      "left" : "private boolean isQualifiedNameInferred(\n        String qName, Node n, JSDocInfo info,\n        Node rhsValue, JSType valueType)",
      "right" : "private boolean isQualifiedNameInferred(\n        String qName, Node n, JSDocInfo info,\n        Node rhsValue, JSType valueType)",
      "info" : "MethodDeclaration[60412-62962]:MethodDeclaration[60636-63186]"
    }, {
      "left" : "private ObjectType getObjectSlot(String slotName)",
      "right" : "private ObjectType getObjectSlot(String slotName)",
      "info" : "MethodDeclaration[62968-63516]:MethodDeclaration[63192-63740]"
    }, {
      "left" : "void resolveStubDeclarations()",
      "right" : "void resolveStubDeclarations()",
      "info" : "MethodDeclaration[63522-64835]:MethodDeclaration[63746-65059]"
    }, {
      "left" : "CollectProperties",
      "right" : "CollectProperties",
      "info" : "TypeDeclaration[64841-66590]:TypeDeclaration[65065-66814]"
    }, {
      "left" : "private final ObjectType thisType;",
      "right" : "private final ObjectType thisType;",
      "info" : "FieldDeclaration[65062-65096]:FieldDeclaration[65286-65320]"
    }, {
      "left" : "CollectProperties(ObjectType thisType)",
      "right" : "CollectProperties(ObjectType thisType)",
      "info" : "MethodDeclaration[65104-65186]:MethodDeclaration[65328-65410]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[65194-65677]:MethodDeclaration[65418-65901]"
    }, {
      "left" : "private void maybeCollectMember(NodeTraversal t,\n          Node member, Node nodeWithJsDocInfo, @Nullable Node value)",
      "right" : "private void maybeCollectMember(NodeTraversal t,\n          Node member, Node nodeWithJsDocInfo, @Nullable Node value)",
      "info" : "MethodDeclaration[65685-66584]:MethodDeclaration[65909-66808]"
    }, {
      "left" : "StubDeclaration",
      "right" : "StubDeclaration",
      "info" : "TypeDeclaration[66623-67012]:TypeDeclaration[66847-67236]"
    }, {
      "left" : "private final Node node;",
      "right" : "private final Node node;",
      "info" : "FieldDeclaration[66738-66762]:FieldDeclaration[66962-66986]"
    }, {
      "left" : "private final boolean isExtern;",
      "right" : "private final boolean isExtern;",
      "info" : "FieldDeclaration[66767-66798]:FieldDeclaration[66991-67022]"
    }, {
      "left" : "private final String ownerName;",
      "right" : "private final String ownerName;",
      "info" : "FieldDeclaration[66803-66834]:FieldDeclaration[67027-67058]"
    }, {
      "left" : "private StubDeclaration(Node node, boolean isExtern, String ownerName)",
      "right" : "private StubDeclaration(Node node, boolean isExtern, String ownerName)",
      "info" : "MethodDeclaration[66840-67008]:MethodDeclaration[67064-67232]"
    }, {
      "left" : "GlobalScopeBuilder",
      "right" : "GlobalScopeBuilder",
      "info" : "TypeDeclaration[67016-69228]:TypeDeclaration[67240-69452]"
    }, {
      "left" : "private GlobalScopeBuilder(Scope scope)",
      "right" : "private GlobalScopeBuilder(Scope scope)",
      "info" : "MethodDeclaration[67202-67269]:MethodDeclaration[67426-67493]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[67275-67849]:MethodDeclaration[67499-68073]"
    }, {
      "left" : "void maybeDeclareQualifiedName(\n        NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "right" : "void maybeDeclareQualifiedName(\n        NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "info" : "MethodDeclaration[67855-68097]:MethodDeclaration[68079-68321]"
    }, {
      "left" : "private void checkForTypedef(\n        NodeTraversal t, Node candidate, JSDocInfo info)",
      "right" : "private void checkForTypedef(\n        NodeTraversal t, Node candidate, JSDocInfo info)",
      "info" : "MethodDeclaration[68103-69224]:MethodDeclaration[68327-69448]"
    }, {
      "left" : "LocalScopeBuilder",
      "right" : "LocalScopeBuilder",
      "info" : "TypeDeclaration[69258-72430]:TypeDeclaration[69482-72654]"
    }, {
      "left" : "private LocalScopeBuilder(Scope scope)",
      "right" : "private LocalScopeBuilder(Scope scope)",
      "info" : "MethodDeclaration[69433-69566]:MethodDeclaration[69657-69790]"
    }, {
      "left" : "void build()",
      "right" : "void build()",
      "info" : "MethodDeclaration[69572-70055]:MethodDeclaration[69796-70279]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[70061-70595]:MethodDeclaration[70285-70819]"
    }, {
      "left" : "private void handleFunctionInputs(Node fnNode)",
      "right" : "private void handleFunctionInputs(Node fnNode)",
      "info" : "MethodDeclaration[70601-71466]:MethodDeclaration[70825-71690]"
    }, {
      "left" : "private void declareArguments(Node functionNode)",
      "right" : "private void declareArguments(Node functionNode)",
      "info" : "MethodDeclaration[71472-72402]:MethodDeclaration[71696-72626]"
    }, {
      "left" : "FirstOrderFunctionAnalyzer",
      "right" : "FirstOrderFunctionAnalyzer",
      "info" : "TypeDeclaration[72459-74975]:TypeDeclaration[72683-75199]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[72727-72767]:FieldDeclaration[72951-72991]"
    }, {
      "left" : "private final Map<Node, AstFunctionContents> data;",
      "right" : "private final Map<Node, AstFunctionContents> data;",
      "info" : "FieldDeclaration[72772-72822]:FieldDeclaration[72996-73046]"
    }, {
      "left" : "FirstOrderFunctionAnalyzer(\n        AbstractCompiler compiler, Map<Node, AstFunctionContents> outParam)",
      "right" : "FirstOrderFunctionAnalyzer(\n        AbstractCompiler compiler, Map<Node, AstFunctionContents> outParam)",
      "info" : "MethodDeclaration[72828-72999]:MethodDeclaration[73052-73223]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[73005-73272]:MethodDeclaration[73229-73496]"
    }, {
      "left" : "public void enterScope(NodeTraversal t)",
      "right" : "public void enterScope(NodeTraversal t)",
      "info" : "MethodDeclaration[73278-73459]:MethodDeclaration[73502-73683]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[73465-74971]:MethodDeclaration[73689-75195]"
    }, {
      "left" : "private AstFunctionContents getFunctionAnalysisResults(@Nullable Node n)",
      "right" : "private AstFunctionContents getFunctionAnalysisResults(@Nullable Node n)",
      "info" : "MethodDeclaration[74979-75266]:MethodDeclaration[75203-75490]"
    } ],
    "mappings" : [
 {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[5032-5037]:Modifier[5032-5037]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[5038-5043]:TYPE_DECLARATION_KIND[5038-5043]"
    }, {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "SimpleName[5044-5061]:SimpleName[5044-5061]"
    }, {
      "left" : "ScopeCreator",
      "right" : "ScopeCreator",
      "info" : "SimpleType[5073-5085]:SimpleType[5073-5085]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7267-7274]:Modifier[7267-7274]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[7275-7280]:TYPE_DECLARATION_KIND[7275-7280]"
    }, {
      "left" : "DeferredSetType",
      "right" : "DeferredSetType",
      "info" : "SimpleName[7281-7296]:SimpleName[7281-7296]"
    }, {
      "left" : "DeferredSetType",
      "right" : "DeferredSetType",
      "info" : "SimpleName[7348-7363]:SimpleName[7348-7363]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[7364-7373]:SingleVariableDeclaration[7364-7373]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[7375-7386]:SingleVariableDeclaration[7375-7386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7388-7685]:Block[7388-7685]"
    }, {
      "left" : "Preconditions.checkNotNull(node);",
      "right" : "Preconditions.checkNotNull(node);",
      "info" : "ExpressionStatement[7396-7429]:ExpressionStatement[7396-7429]"
    }, {
      "left" : "Preconditions.checkNotNull(type);",
      "right" : "Preconditions.checkNotNull(type);",
      "info" : "ExpressionStatement[7436-7469]:ExpressionStatement[7436-7469]"
    }, {
      "left" : "this.node = node;",
      "right" : "this.node = node;",
      "info" : "ExpressionStatement[7476-7493]:ExpressionStatement[7476-7493]"
    }, {
      "left" : "this.type = type;",
      "right" : "this.type = type;",
      "info" : "ExpressionStatement[7500-7517]:ExpressionStatement[7500-7517]"
    }, {
      "left" : "node.setJSType(type);",
      "right" : "node.setJSType(type);",
      "info" : "ExpressionStatement[7658-7679]:ExpressionStatement[7658-7679]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7691-7695]:PrimitiveType[7691-7695]"
    }, {
      "left" : "resolve",
      "right" : "resolve",
      "info" : "SimpleName[7696-7703]:SimpleName[7696-7703]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[7704-7715]:SingleVariableDeclaration[7704-7715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7717-7793]:Block[7717-7793]"
    }, {
      "left" : "node.setJSType(type.resolve(typeParsingErrorReporter, scope));",
      "right" : "node.setJSType(type.resolve(typeParsingErrorReporter, scope));",
      "info" : "ExpressionStatement[7725-7787]:ExpressionStatement[7725-7787]"
    }, {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "SimpleName[7801-7818]:SimpleName[7801-7818]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[7819-7844]:SingleVariableDeclaration[7819-7844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7846-7903]:Block[7846-7903]"
    }, {
      "left" : "this(compiler, compiler.getCodingConvention());",
      "right" : "this(compiler, compiler.getCodingConvention());",
      "info" : "ConstructorInvocation[7852-7899]:ConstructorInvocation[7852-7899]"
    }, {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "SimpleName[7907-7924]:SimpleName[7907-7924]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[7925-7950]:SingleVariableDeclaration[7925-7950]"
    }, {
      "left" : "CodingConvention codingConvention",
      "right" : "CodingConvention codingConvention",
      "info" : "SingleVariableDeclaration[7958-7991]:SingleVariableDeclaration[7958-7991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7993-8245]:Block[7993-8245]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[7999-8024]:ExpressionStatement[7999-8024]"
    }, {
      "left" : "this.validator = compiler.getTypeValidator();",
      "right" : "this.validator = compiler.getTypeValidator();",
      "info" : "ExpressionStatement[8029-8074]:ExpressionStatement[8029-8074]"
    }, {
      "left" : "this.codingConvention = codingConvention;",
      "right" : "this.codingConvention = codingConvention;",
      "info" : "ExpressionStatement[8079-8120]:ExpressionStatement[8079-8120]"
    }, {
      "left" : "this.typeRegistry = compiler.getTypeRegistry();",
      "right" : "this.typeRegistry = compiler.getTypeRegistry();",
      "info" : "ExpressionStatement[8125-8172]:ExpressionStatement[8125-8172]"
    }, {
      "left" : "this.typeParsingErrorReporter = typeRegistry.getErrorReporter();",
      "right" : "this.typeParsingErrorReporter = typeRegistry.getErrorReporter();",
      "info" : "ExpressionStatement[8177-8241]:ExpressionStatement[8177-8241]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8386-8395]:MarkerAnnotation[8386-8395]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8398-8404]:Modifier[8398-8404]"
    }, {
      "left" : "Scope",
      "right" : "Scope",
      "info" : "SimpleType[8405-8410]:SimpleType[8405-8410]"
    }, {
      "left" : "createScope",
      "right" : "createScope",
      "info" : "SimpleName[8411-8422]:SimpleName[8411-8422]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[8423-8432]:SingleVariableDeclaration[8423-8432]"
    }, {
      "left" : "Scope parent",
      "right" : "Scope parent",
      "info" : "SingleVariableDeclaration[8434-8446]:SingleVariableDeclaration[8434-8446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8448-10357]:Block[8448-10357]"
    }, {
      "left" : "Scope newScope = null;",
      "right" : "Scope newScope = null;",
      "info" : "VariableDeclarationStatement[8643-8665]:VariableDeclarationStatement[8643-8665]"
    }, {
      "left" : "AbstractScopeBuilder scopeBuilder = null;",
      "right" : "AbstractScopeBuilder scopeBuilder = null;",
      "info" : "VariableDeclarationStatement[8670-8711]:VariableDeclarationStatement[8670-8711]"
    }, {
      "left" : "if (parent == null)",
      "right" : "if (parent == null)",
      "info" : "IfStatement[8716-9420]:IfStatement[8716-9420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8736-9215]:Block[8736-9215]"
    }, {
      "left" : "(new FirstOrderFunctionAnalyzer(compiler, functionAnalysisResults))\n          .process(root.getFirstChild(), root.getLastChild());",
      "right" : "(new FirstOrderFunctionAnalyzer(compiler, functionAnalysisResults))\n          .process(root.getFirstChild(), root.getLastChild());",
      "info" : "ExpressionStatement[8802-8932]:ExpressionStatement[8802-8932]"
    }, {
      "left" : "newScope = createInitialScope(root);",
      "right" : "newScope = createInitialScope(root);",
      "info" : "ExpressionStatement[8991-9027]:ExpressionStatement[8991-9027]"
    }, {
      "left" : "GlobalScopeBuilder globalScopeBuilder = new GlobalScopeBuilder(newScope);",
      "right" : "GlobalScopeBuilder globalScopeBuilder = new GlobalScopeBuilder(newScope);",
      "info" : "VariableDeclarationStatement[9035-9108]:VariableDeclarationStatement[9035-9108]"
    }, {
      "left" : "scopeBuilder = globalScopeBuilder;",
      "right" : "scopeBuilder = globalScopeBuilder;",
      "info" : "ExpressionStatement[9115-9149]:ExpressionStatement[9115-9149]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, scopeBuilder);",
      "right" : "NodeTraversal.traverse(compiler, root, scopeBuilder);",
      "info" : "ExpressionStatement[9156-9209]:ExpressionStatement[9156-9209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9221-9420]:Block[9221-9420]"
    }, {
      "left" : "newScope = new Scope(parent, root);",
      "right" : "newScope = new Scope(parent, root);",
      "info" : "ExpressionStatement[9229-9264]:ExpressionStatement[9229-9264]"
    }, {
      "left" : "LocalScopeBuilder localScopeBuilder = new LocalScopeBuilder(newScope);",
      "right" : "LocalScopeBuilder localScopeBuilder = new LocalScopeBuilder(newScope);",
      "info" : "VariableDeclarationStatement[9271-9341]:VariableDeclarationStatement[9271-9341]"
    }, {
      "left" : "scopeBuilder = localScopeBuilder;",
      "right" : "scopeBuilder = localScopeBuilder;",
      "info" : "ExpressionStatement[9348-9381]:ExpressionStatement[9348-9381]"
    }, {
      "left" : "localScopeBuilder.build();",
      "right" : "localScopeBuilder.build();",
      "info" : "ExpressionStatement[9388-9414]:ExpressionStatement[9388-9414]"
    }, {
      "left" : "scopeBuilder.resolveStubDeclarations();",
      "right" : "scopeBuilder.resolveStubDeclarations();",
      "info" : "ExpressionStatement[9426-9465]:ExpressionStatement[9426-9465]"
    }, {
      "left" : "scopeBuilder.resolveTypes();",
      "right" : "scopeBuilder.resolveTypes();",
      "info" : "ExpressionStatement[9470-9498]:ExpressionStatement[9470-9498]"
    }, {
      "left" : "for (Node functionNode : scopeBuilder.nonExternFunctions)",
      "right" : "for (Node functionNode : scopeBuilder.nonExternFunctions)",
      "info" : "EnhancedForStatement[9666-10138]:EnhancedForStatement[9666-10138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9724-10138]:Block[9724-10138]"
    }, {
      "left" : "JSType type = functionNode.getJSType();",
      "right" : "JSType type = functionNode.getJSType();",
      "info" : "VariableDeclarationStatement[9732-9771]:VariableDeclarationStatement[9732-9771]"
    }, {
      "left" : "if (type != null && type.isFunctionType())",
      "right" : "if (type != null && type.isFunctionType())",
      "info" : "IfStatement[9778-10132]:IfStatement[9778-10132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9821-10132]:Block[9821-10132]"
    }, {
      "left" : "FunctionType fnType = type.toMaybeFunctionType();",
      "right" : "FunctionType fnType = type.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[9831-9880]:VariableDeclarationStatement[9831-9880]"
    }, {
      "left" : "ObjectType fnThisType = fnType.getTypeOfThis();",
      "right" : "ObjectType fnThisType = fnType.getTypeOfThis();",
      "info" : "VariableDeclarationStatement[9889-9936]:VariableDeclarationStatement[9889-9936]"
    }, {
      "left" : "if (!fnThisType.isUnknownType())",
      "right" : "if (!fnThisType.isUnknownType())",
      "info" : "IfStatement[9945-10124]:IfStatement[9945-10124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9978-10124]:Block[9978-10124]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, functionNode.getLastChild(),\n              scopeBuilder.new CollectProperties(fnThisType));",
      "right" : "NodeTraversal.traverse(compiler, functionNode.getLastChild(),\n              scopeBuilder.new CollectProperties(fnThisType));",
      "info" : "ExpressionStatement[9990-10114]:ExpressionStatement[9990-10114]"
    }, {
      "left" : "if (parent == null)",
      "right" : "if (parent == null)",
      "info" : "IfStatement[10144-10332]:IfStatement[10144-10332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10164-10332]:Block[10164-10332]"
    }, {
      "left" : "codingConvention.defineDelegateProxyPrototypeProperties(\n          typeRegistry, newScope, delegateProxyPrototypes,\n          delegateCallingConventions);",
      "right" : "codingConvention.defineDelegateProxyPrototypeProperties(\n          typeRegistry, newScope, delegateProxyPrototypes,\n          delegateCallingConventions);",
      "info" : "ExpressionStatement[10172-10326]:ExpressionStatement[10172-10326]"
    }, {
      "left" : "return newScope;",
      "right" : "return newScope;",
      "info" : "ReturnStatement[10337-10353]:ReturnStatement[10337-10353]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10646-10650]:PrimitiveType[10646-10650]"
    }, {
      "left" : "patchGlobalScope",
      "right" : "patchGlobalScope",
      "info" : "SimpleName[10651-10667]:SimpleName[10651-10667]"
    }, {
      "left" : "Scope globalScope",
      "right" : "Scope globalScope",
      "info" : "SingleVariableDeclaration[10668-10685]:SingleVariableDeclaration[10668-10685]"
    }, {
      "left" : "Node scriptRoot",
      "right" : "Node scriptRoot",
      "info" : "SingleVariableDeclaration[10687-10702]:SingleVariableDeclaration[10687-10702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10704-12314]:Block[10704-12314]"
    }, {
      "left" : "Preconditions.checkState(scriptRoot.isScript());",
      "right" : "Preconditions.checkState(scriptRoot.isScript());",
      "info" : "ExpressionStatement[10859-10907]:ExpressionStatement[10859-10907]"
    }, {
      "left" : "Preconditions.checkNotNull(globalScope);",
      "right" : "Preconditions.checkNotNull(globalScope);",
      "info" : "ExpressionStatement[10912-10952]:ExpressionStatement[10912-10952]"
    }, {
      "left" : "Preconditions.checkState(globalScope.isGlobal());",
      "right" : "Preconditions.checkState(globalScope.isGlobal());",
      "info" : "ExpressionStatement[10957-11006]:ExpressionStatement[10957-11006]"
    }, {
      "left" : "String scriptName = NodeUtil.getSourceName(scriptRoot);",
      "right" : "String scriptName = NodeUtil.getSourceName(scriptRoot);",
      "info" : "VariableDeclarationStatement[11012-11067]:VariableDeclarationStatement[11012-11067]"
    }, {
      "left" : "Preconditions.checkNotNull(scriptName);",
      "right" : "Preconditions.checkNotNull(scriptName);",
      "info" : "ExpressionStatement[11072-11111]:ExpressionStatement[11072-11111]"
    }, {
      "left" : "for (Node node : ImmutableList.copyOf(functionAnalysisResults.keySet()))",
      "right" : "for (Node node : ImmutableList.copyOf(functionAnalysisResults.keySet()))",
      "info" : "EnhancedForStatement[11116-11311]:EnhancedForStatement[11116-11311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11189-11311]:Block[11189-11311]"
    }, {
      "left" : "if (scriptName.equals(NodeUtil.getSourceName(node)))",
      "right" : "if (scriptName.equals(NodeUtil.getSourceName(node)))",
      "info" : "IfStatement[11197-11305]:IfStatement[11197-11305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11250-11305]:Block[11250-11305]"
    }, {
      "left" : "functionAnalysisResults.remove(node);",
      "right" : "functionAnalysisResults.remove(node);",
      "info" : "ExpressionStatement[11260-11297]:ExpressionStatement[11260-11297]"
    }, {
      "left" : "(new FirstOrderFunctionAnalyzer(\n        compiler, functionAnalysisResults)).process(null, scriptRoot);",
      "right" : "(new FirstOrderFunctionAnalyzer(\n        compiler, functionAnalysisResults)).process(null, scriptRoot);",
      "info" : "ExpressionStatement[11317-11420]:ExpressionStatement[11317-11420]"
    }, {
      "left" : "Iterator<Var> varIter = globalScope.getVars();",
      "right" : "Iterator<Var> varIter = globalScope.getVars();",
      "info" : "VariableDeclarationStatement[11723-11769]:VariableDeclarationStatement[11723-11769]"
    }, {
      "left" : "List<Var> varsToRemove = Lists.newArrayList();",
      "right" : "List<Var> varsToRemove = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[11774-11820]:VariableDeclarationStatement[11774-11820]"
    }, {
      "left" : "while (varIter.hasNext())",
      "right" : "while (varIter.hasNext())",
      "info" : "WhileStatement[11825-11989]:WhileStatement[11825-11989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11851-11989]:Block[11851-11989]"
    }, {
      "left" : "Var oldVar = varIter.next();",
      "right" : "Var oldVar = varIter.next();",
      "info" : "VariableDeclarationStatement[11859-11887]:VariableDeclarationStatement[11859-11887]"
    }, {
      "left" : "if (scriptName.equals(oldVar.getInputName()))",
      "right" : "if (scriptName.equals(oldVar.getInputName()))",
      "info" : "IfStatement[11894-11983]:IfStatement[11894-11983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11940-11983]:Block[11940-11983]"
    }, {
      "left" : "varsToRemove.add(oldVar);",
      "right" : "varsToRemove.add(oldVar);",
      "info" : "ExpressionStatement[11950-11975]:ExpressionStatement[11950-11975]"
    }, {
      "left" : "for (Var var : varsToRemove)",
      "right" : "for (Var var : varsToRemove)",
      "info" : "EnhancedForStatement[11994-12129]:EnhancedForStatement[11994-12129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12023-12129]:Block[12023-12129]"
    }, {
      "left" : "globalScope.undeclare(var);",
      "right" : "globalScope.undeclare(var);",
      "info" : "ExpressionStatement[12031-12058]:ExpressionStatement[12031-12058]"
    }, {
      "left" : "globalScope.getTypeOfThis().removeProperty(var.getName());",
      "right" : "globalScope.getTypeOfThis().removeProperty(var.getName());",
      "info" : "ExpressionStatement[12065-12123]:ExpressionStatement[12065-12123]"
    }, {
      "left" : "GlobalScopeBuilder scopeBuilder = new GlobalScopeBuilder(globalScope);",
      "right" : "GlobalScopeBuilder scopeBuilder = new GlobalScopeBuilder(globalScope);",
      "info" : "VariableDeclarationStatement[12176-12246]:VariableDeclarationStatement[12176-12246]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, scriptRoot, scopeBuilder);",
      "right" : "NodeTraversal.traverse(compiler, scriptRoot, scopeBuilder);",
      "info" : "ExpressionStatement[12251-12310]:ExpressionStatement[12251-12310]"
    }, {
      "left" : "@VisibleForTesting",
      "right" : "@VisibleForTesting",
      "info" : "MarkerAnnotation[12446-12464]:MarkerAnnotation[12446-12464]"
    }, {
      "left" : "Scope",
      "right" : "Scope",
      "info" : "SimpleType[12467-12472]:SimpleType[12467-12472]"
    }, {
      "left" : "createInitialScope",
      "right" : "createInitialScope",
      "info" : "SimpleName[12473-12491]:SimpleName[12473-12491]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[12492-12501]:SingleVariableDeclaration[12492-12501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12503-13846]:Block[12503-13846]"
    }, {
      "left" : "NodeTraversal.traverse(\n        compiler, root, new DiscoverEnumsAndTypedefs(typeRegistry));",
      "right" : "NodeTraversal.traverse(\n        compiler, root, new DiscoverEnumsAndTypedefs(typeRegistry));",
      "info" : "ExpressionStatement[12510-12602]:ExpressionStatement[12510-12602]"
    }, {
      "left" : "Scope s = new Scope(root, compiler);",
      "right" : "Scope s = new Scope(root, compiler);",
      "info" : "VariableDeclarationStatement[12608-12644]:VariableDeclarationStatement[12608-12644]"
    }, {
      "left" : "declareNativeFunctionType(s, ARRAY_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, ARRAY_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[12649-12699]:ExpressionStatement[12649-12699]"
    }, {
      "left" : "declareNativeFunctionType(s, BOOLEAN_OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, BOOLEAN_OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[12704-12763]:ExpressionStatement[12704-12763]"
    }, {
      "left" : "declareNativeFunctionType(s, DATE_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, DATE_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[12768-12817]:ExpressionStatement[12768-12817]"
    }, {
      "left" : "declareNativeFunctionType(s, ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[12822-12872]:ExpressionStatement[12822-12872]"
    }, {
      "left" : "declareNativeFunctionType(s, EVAL_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, EVAL_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[12877-12932]:ExpressionStatement[12877-12932]"
    }, {
      "left" : "declareNativeFunctionType(s, FUNCTION_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, FUNCTION_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[12937-12990]:ExpressionStatement[12937-12990]"
    }, {
      "left" : "declareNativeFunctionType(s, NUMBER_OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, NUMBER_OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[12995-13053]:ExpressionStatement[12995-13053]"
    }, {
      "left" : "declareNativeFunctionType(s, OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13058-13109]:ExpressionStatement[13058-13109]"
    }, {
      "left" : "declareNativeFunctionType(s, RANGE_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, RANGE_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13114-13170]:ExpressionStatement[13114-13170]"
    }, {
      "left" : "declareNativeFunctionType(s, REFERENCE_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, REFERENCE_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13175-13235]:ExpressionStatement[13175-13235]"
    }, {
      "left" : "declareNativeFunctionType(s, REGEXP_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, REGEXP_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13240-13291]:ExpressionStatement[13240-13291]"
    }, {
      "left" : "declareNativeFunctionType(s, STRING_OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, STRING_OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13296-13354]:ExpressionStatement[13296-13354]"
    }, {
      "left" : "declareNativeFunctionType(s, SYNTAX_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, SYNTAX_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13359-13416]:ExpressionStatement[13359-13416]"
    }, {
      "left" : "declareNativeFunctionType(s, TYPE_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, TYPE_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13421-13476]:ExpressionStatement[13421-13476]"
    }, {
      "left" : "declareNativeFunctionType(s, URI_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, URI_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13481-13535]:ExpressionStatement[13481-13535]"
    }, {
      "left" : "declareNativeValueType(s, \"undefined\", VOID_TYPE);",
      "right" : "declareNativeValueType(s, \"undefined\", VOID_TYPE);",
      "info" : "ExpressionStatement[13540-13590]:ExpressionStatement[13540-13590]"
    }, {
      "left" : "declareNativeValueType(s, \"ActiveXObject\", NO_OBJECT_TYPE);",
      "right" : "declareNativeValueType(s, \"ActiveXObject\", NO_OBJECT_TYPE);",
      "info" : "ExpressionStatement[13768-13827]:ExpressionStatement[13768-13827]"
    }, {
      "left" : "return s;",
      "right" : "return s;",
      "info" : "ReturnStatement[13833-13842]:ReturnStatement[13833-13842]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13850-13857]:Modifier[13850-13857]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13858-13862]:PrimitiveType[13858-13862]"
    }, {
      "left" : "declareNativeFunctionType",
      "right" : "declareNativeFunctionType",
      "info" : "SimpleName[13863-13888]:SimpleName[13863-13888]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[13889-13900]:SingleVariableDeclaration[13889-13900]"
    }, {
      "left" : "JSTypeNative tId",
      "right" : "JSTypeNative tId",
      "info" : "SingleVariableDeclaration[13902-13918]:SingleVariableDeclaration[13902-13918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13920-14154]:Block[13920-14154]"
    }, {
      "left" : "FunctionType t = typeRegistry.getNativeFunctionType(tId);",
      "right" : "FunctionType t = typeRegistry.getNativeFunctionType(tId);",
      "info" : "VariableDeclarationStatement[13926-13983]:VariableDeclarationStatement[13926-13983]"
    }, {
      "left" : "declareNativeType(scope, t.getInstanceType().getReferenceName(), t);",
      "right" : "declareNativeType(scope, t.getInstanceType().getReferenceName(), t);",
      "info" : "ExpressionStatement[13988-14056]:ExpressionStatement[13988-14056]"
    }, {
      "left" : "declareNativeType(\n        scope, t.getPrototype().getReferenceName(), t.getPrototype());",
      "right" : "declareNativeType(\n        scope, t.getPrototype().getReferenceName(), t.getPrototype());",
      "info" : "ExpressionStatement[14061-14150]:ExpressionStatement[14061-14150]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14158-14165]:Modifier[14158-14165]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14166-14170]:PrimitiveType[14166-14170]"
    }, {
      "left" : "declareNativeValueType",
      "right" : "declareNativeValueType",
      "info" : "SimpleName[14171-14193]:SimpleName[14171-14193]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[14194-14205]:SingleVariableDeclaration[14194-14205]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[14207-14218]:SingleVariableDeclaration[14207-14218]"
    }, {
      "left" : "JSTypeNative tId",
      "right" : "JSTypeNative tId",
      "info" : "SingleVariableDeclaration[14226-14242]:SingleVariableDeclaration[14226-14242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14244-14318]:Block[14244-14318]"
    }, {
      "left" : "declareNativeType(scope, name, typeRegistry.getNativeType(tId));",
      "right" : "declareNativeType(scope, name, typeRegistry.getNativeType(tId));",
      "info" : "ExpressionStatement[14250-14314]:ExpressionStatement[14250-14314]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14322-14329]:Modifier[14322-14329]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14330-14334]:PrimitiveType[14330-14334]"
    }, {
      "left" : "declareNativeType",
      "right" : "declareNativeType",
      "info" : "SimpleName[14335-14352]:SimpleName[14335-14352]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[14353-14364]:SingleVariableDeclaration[14353-14364]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[14366-14377]:SingleVariableDeclaration[14366-14377]"
    }, {
      "left" : "JSType t",
      "right" : "JSType t",
      "info" : "SingleVariableDeclaration[14379-14387]:SingleVariableDeclaration[14379-14387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14389-14441]:Block[14389-14441]"
    }, {
      "left" : "scope.declare(name, null, t, null, false);",
      "right" : "scope.declare(name, null, t, null, false);",
      "info" : "ExpressionStatement[14395-14437]:ExpressionStatement[14395-14437]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14445-14452]:Modifier[14445-14452]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14453-14459]:Modifier[14453-14459]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[14460-14465]:TYPE_DECLARATION_KIND[14460-14465]"
    }, {
      "left" : "DiscoverEnumsAndTypedefs",
      "right" : "DiscoverEnumsAndTypedefs",
      "info" : "SimpleName[14466-14490]:SimpleName[14466-14490]"
    }, {
      "left" : "AbstractShallowStatementCallback",
      "right" : "AbstractShallowStatementCallback",
      "info" : "SimpleType[14505-14537]:SimpleType[14505-14537]"
    }, {
      "left" : "DiscoverEnumsAndTypedefs",
      "right" : "DiscoverEnumsAndTypedefs",
      "info" : "SimpleName[14588-14612]:SimpleName[14588-14612]"
    }, {
      "left" : "JSTypeRegistry registry",
      "right" : "JSTypeRegistry registry",
      "info" : "SingleVariableDeclaration[14613-14636]:SingleVariableDeclaration[14613-14636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14638-14677]:Block[14638-14677]"
    }, {
      "left" : "this.registry = registry;",
      "right" : "this.registry = registry;",
      "info" : "ExpressionStatement[14646-14671]:ExpressionStatement[14646-14671]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14683-14692]:MarkerAnnotation[14683-14692]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14697-14703]:Modifier[14697-14703]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14704-14708]:PrimitiveType[14704-14708]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[14709-14714]:SimpleName[14709-14714]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[14715-14730]:SingleVariableDeclaration[14715-14730]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[14732-14741]:SingleVariableDeclaration[14732-14741]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[14743-14754]:SingleVariableDeclaration[14743-14754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14756-15524]:Block[14756-15524]"
    }, {
      "left" : "Node nameNode = null;",
      "right" : "Node nameNode = null;",
      "info" : "VariableDeclarationStatement[14764-14785]:VariableDeclarationStatement[14764-14785]"
    }, {
      "left" : "switch (node.getType()) {\n        case Token.VAR:\n          for (Node child = node.getFirstChild();\n               child != null; child = child.getNext()) {\n            identifyNameNode(\n                child, child.getFirstChild(),\n                NodeUtil.getBestJSDocInfo(child));\n          }\n          break;\n        case Token.EXPR_RESULT:\n          Node firstChild = node.getFirstChild();\n          if (firstChild.isAssign()) {\n            identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getLastChild(),\n                firstChild.getJSDocInfo());\n          } else {\n            identifyNameNode(\n                firstChild, null, firstChild.getJSDocInfo());\n          }\n          break;\n      }",
      "right" : "switch (node.getType()) {\n        case Token.VAR:\n          for (Node child = node.getFirstChild();\n               child != null; child = child.getNext()) {\n            identifyNameNode(\n                child, child.getFirstChild(),\n                NodeUtil.getBestJSDocInfo(child));\n          }\n          break;\n        case Token.EXPR_RESULT:\n          Node firstChild = node.getFirstChild();\n          if (firstChild.isAssign()) {\n            identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getLastChild(),\n                firstChild.getJSDocInfo());\n          } else {\n            identifyNameNode(\n                firstChild, null, firstChild.getJSDocInfo());\n          }\n          break;\n      }",
      "info" : "SwitchStatement[14792-15518]:SwitchStatement[14792-15518]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[14826-14841]:SwitchCase[14826-14841]"
    }, {
      "left" : "for (Node child = node.getFirstChild();\n               child != null; child = child.getNext())",
      "right" : "for (Node child = node.getFirstChild();\n               child != null; child = child.getNext())",
      "info" : "ForStatement[14852-15087]:ForStatement[14852-15087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14947-15087]:Block[14947-15087]"
    }, {
      "left" : "identifyNameNode(\n                child, child.getFirstChild(),\n                NodeUtil.getBestJSDocInfo(child));",
      "right" : "identifyNameNode(\n                child, child.getFirstChild(),\n                NodeUtil.getBestJSDocInfo(child));",
      "info" : "ExpressionStatement[14961-15075]:ExpressionStatement[14961-15075]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15098-15104]:BreakStatement[15098-15104]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[15113-15136]:SwitchCase[15113-15136]"
    }, {
      "left" : "Node firstChild = node.getFirstChild();",
      "right" : "Node firstChild = node.getFirstChild();",
      "info" : "VariableDeclarationStatement[15147-15186]:VariableDeclarationStatement[15147-15186]"
    }, {
      "left" : "if (firstChild.isAssign())",
      "right" : "if (firstChild.isAssign())",
      "info" : "IfStatement[15197-15493]:IfStatement[15197-15493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15224-15382]:Block[15224-15382]"
    }, {
      "left" : "identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getLastChild(),\n                firstChild.getJSDocInfo());",
      "right" : "identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getLastChild(),\n                firstChild.getJSDocInfo());",
      "info" : "ExpressionStatement[15238-15370]:ExpressionStatement[15238-15370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15388-15493]:Block[15388-15493]"
    }, {
      "left" : "identifyNameNode(\n                firstChild, null, firstChild.getJSDocInfo());",
      "right" : "identifyNameNode(\n                firstChild, null, firstChild.getJSDocInfo());",
      "info" : "ExpressionStatement[15402-15481]:ExpressionStatement[15402-15481]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15504-15510]:BreakStatement[15504-15510]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15530-15537]:Modifier[15530-15537]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15538-15542]:PrimitiveType[15538-15542]"
    }, {
      "left" : "identifyNameNode",
      "right" : "identifyNameNode",
      "info" : "SimpleName[15543-15559]:SimpleName[15543-15559]"
    }, {
      "left" : "Node nameNode",
      "right" : "Node nameNode",
      "info" : "SingleVariableDeclaration[15569-15582]:SingleVariableDeclaration[15569-15582]"
    }, {
      "left" : "Node valueNode",
      "right" : "Node valueNode",
      "info" : "SingleVariableDeclaration[15584-15598]:SingleVariableDeclaration[15584-15598]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[15600-15614]:SingleVariableDeclaration[15600-15614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15616-15962]:Block[15616-15962]"
    }, {
      "left" : "if (nameNode.isQualifiedName())",
      "right" : "if (nameNode.isQualifiedName())",
      "info" : "IfStatement[15624-15956]:IfStatement[15624-15956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15656-15956]:Block[15656-15956]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[15666-15948]:IfStatement[15666-15948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15684-15948]:Block[15684-15948]"
    }, {
      "left" : "if (info.hasEnumParameterType())",
      "right" : "if (info.hasEnumParameterType())",
      "info" : "IfStatement[15696-15938]:IfStatement[15696-15938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15729-15817]:Block[15729-15817]"
    }, {
      "left" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
      "right" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
      "info" : "ExpressionStatement[15743-15805]:ExpressionStatement[15743-15805]"
    }, {
      "left" : "if (info.hasTypedefType())",
      "right" : "if (info.hasTypedefType())",
      "info" : "IfStatement[15823-15938]:IfStatement[15823-15938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15850-15938]:Block[15850-15938]"
    }, {
      "left" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
      "right" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
      "info" : "ExpressionStatement[15864-15926]:ExpressionStatement[15864-15926]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15970-15977]:Modifier[15970-15977]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[15978-15984]:SimpleType[15978-15984]"
    }, {
      "left" : "getNativeType",
      "right" : "getNativeType",
      "info" : "SimpleName[15985-15998]:SimpleName[15985-15998]"
    }, {
      "left" : "JSTypeNative nativeType",
      "right" : "JSTypeNative nativeType",
      "info" : "SingleVariableDeclaration[15999-16022]:SingleVariableDeclaration[15999-16022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16024-16080]:Block[16024-16080]"
    }, {
      "left" : "return typeRegistry.getNativeType(nativeType);",
      "right" : "return typeRegistry.getNativeType(nativeType);",
      "info" : "ReturnStatement[16030-16076]:ReturnStatement[16030-16076]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16084-16091]:Modifier[16084-16091]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[16092-16100]:Modifier[16092-16100]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[16101-16106]:TYPE_DECLARATION_KIND[16101-16106]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleName[16107-16127]:SimpleName[16107-16127]"
    }, {
      "left" : "NodeTraversal.Callback",
      "right" : "NodeTraversal.Callback",
      "info" : "SimpleType[16145-16167]:SimpleType[16145-16167]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17412-17419]:Modifier[17412-17419]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleName[17420-17440]:SimpleName[17420-17440]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[17441-17452]:SingleVariableDeclaration[17441-17452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17454-17487]:Block[17454-17487]"
    }, {
      "left" : "this.scope = scope;",
      "right" : "this.scope = scope;",
      "info" : "ExpressionStatement[17462-17481]:ExpressionStatement[17462-17481]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17493-17497]:PrimitiveType[17493-17497]"
    }, {
      "left" : "setDeferredType",
      "right" : "setDeferredType",
      "info" : "SimpleName[17498-17513]:SimpleName[17498-17513]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[17514-17523]:SingleVariableDeclaration[17514-17523]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[17525-17536]:SingleVariableDeclaration[17525-17536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17538-17606]:Block[17538-17606]"
    }, {
      "left" : "deferredSetTypes.add(new DeferredSetType(node, type));",
      "right" : "deferredSetTypes.add(new DeferredSetType(node, type));",
      "info" : "ExpressionStatement[17546-17600]:ExpressionStatement[17546-17600]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17612-17616]:PrimitiveType[17612-17616]"
    }, {
      "left" : "resolveTypes",
      "right" : "resolveTypes",
      "info" : "SimpleName[17617-17629]:SimpleName[17617-17629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17632-18112]:Block[17632-18112]"
    }, {
      "left" : "for (DeferredSetType deferred : deferredSetTypes)",
      "right" : "for (DeferredSetType deferred : deferredSetTypes)",
      "info" : "EnhancedForStatement[17689-17781]:EnhancedForStatement[17689-17781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17739-17781]:Block[17739-17781]"
    }, {
      "left" : "deferred.resolve(scope);",
      "right" : "deferred.resolve(scope);",
      "info" : "ExpressionStatement[17749-17773]:ExpressionStatement[17749-17773]"
    }, {
      "left" : "Iterator<Var> vars = scope.getVars();",
      "right" : "Iterator<Var> vars = scope.getVars();",
      "info" : "VariableDeclarationStatement[17844-17881]:VariableDeclarationStatement[17844-17881]"
    }, {
      "left" : "while (vars.hasNext())",
      "right" : "while (vars.hasNext())",
      "info" : "WhileStatement[17888-17979]:WhileStatement[17888-17979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17911-17979]:Block[17911-17979]"
    }, {
      "left" : "vars.next().resolveType(typeParsingErrorReporter);",
      "right" : "vars.next().resolveType(typeParsingErrorReporter);",
      "info" : "ExpressionStatement[17921-17971]:ExpressionStatement[17921-17971]"
    }, {
      "left" : "typeRegistry.resolveTypesInScope(scope);",
      "right" : "typeRegistry.resolveTypesInScope(scope);",
      "info" : "ExpressionStatement[18066-18106]:ExpressionStatement[18066-18106]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18118-18127]:MarkerAnnotation[18118-18127]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18132-18138]:Modifier[18132-18138]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[18139-18144]:Modifier[18139-18144]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18145-18152]:PrimitiveType[18145-18152]"
    }, {
      "left" : "shouldTraverse",
      "right" : "shouldTraverse",
      "info" : "SimpleName[18153-18167]:SimpleName[18153-18167]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[18168-18183]:SingleVariableDeclaration[18168-18183]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[18185-18191]:SingleVariableDeclaration[18185-18191]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[18201-18212]:SingleVariableDeclaration[18201-18212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18214-19161]:Block[18214-19161]"
    }, {
      "left" : "inputId = t.getInputId();",
      "right" : "inputId = t.getInputId();",
      "info" : "ExpressionStatement[18222-18247]:ExpressionStatement[18222-18247]"
    }, {
      "left" : "if (n.isFunction() ||\n          n.isScript())",
      "right" : "if (n.isFunction() ||\n          n.isScript())",
      "info" : "IfStatement[18254-18402]:IfStatement[18254-18402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18300-18402]:Block[18300-18402]"
    }, {
      "left" : "Preconditions.checkNotNull(inputId);",
      "right" : "Preconditions.checkNotNull(inputId);",
      "info" : "ExpressionStatement[18310-18346]:ExpressionStatement[18310-18346]"
    }, {
      "left" : "sourceName = NodeUtil.getSourceName(n);",
      "right" : "sourceName = NodeUtil.getSourceName(n);",
      "info" : "ExpressionStatement[18355-18394]:ExpressionStatement[18355-18394]"
    }, {
      "left" : "boolean descend = parent == null || !parent.isFunction() ||\n          n == parent.getFirstChild() || parent == scope.getRootNode();",
      "right" : "boolean descend = parent == null || !parent.isFunction() ||\n          n == parent.getFirstChild() || parent == scope.getRootNode();",
      "info" : "VariableDeclarationStatement[18534-18665]:VariableDeclarationStatement[18534-18665]"
    }, {
      "left" : "if (descend)",
      "right" : "if (descend)",
      "info" : "IfStatement[18673-19132]:IfStatement[18673-19132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18686-19132]:Block[18686-19132]"
    }, {
      "left" : "if (NodeUtil.isStatementParent(n))",
      "right" : "if (NodeUtil.isStatementParent(n))",
      "info" : "IfStatement[18822-19124]:IfStatement[18822-19124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18857-19124]:Block[18857-19124]"
    }, {
      "left" : "for (Node child = n.getFirstChild();\n               child != null;\n               child = child.getNext())",
      "right" : "for (Node child = n.getFirstChild();\n               child != null;\n               child = child.getNext())",
      "info" : "ForStatement[18869-19114]:ForStatement[18869-19114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18976-19114]:Block[18976-19114]"
    }, {
      "left" : "if (NodeUtil.isHoistedFunctionDeclaration(child))",
      "right" : "if (NodeUtil.isHoistedFunctionDeclaration(child))",
      "info" : "IfStatement[18990-19102]:IfStatement[18990-19102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19040-19102]:Block[19040-19102]"
    }, {
      "left" : "defineFunctionLiteral(child, n);",
      "right" : "defineFunctionLiteral(child, n);",
      "info" : "ExpressionStatement[19056-19088]:ExpressionStatement[19056-19088]"
    }, {
      "left" : "return descend;",
      "right" : "return descend;",
      "info" : "ReturnStatement[19140-19155]:ReturnStatement[19140-19155]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19167-19176]:MarkerAnnotation[19167-19176]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19181-19187]:Modifier[19181-19187]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19188-19192]:PrimitiveType[19188-19192]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[19193-19198]:SimpleName[19193-19198]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[19199-19214]:SingleVariableDeclaration[19199-19214]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[19216-19222]:SingleVariableDeclaration[19216-19222]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[19224-19235]:SingleVariableDeclaration[19224-19235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19237-20932]:Block[19237-20932]"
    }, {
      "left" : "inputId = t.getInputId();",
      "right" : "inputId = t.getInputId();",
      "info" : "ExpressionStatement[19245-19270]:ExpressionStatement[19245-19270]"
    }, {
      "left" : "attachLiteralTypes(t, n);",
      "right" : "attachLiteralTypes(t, n);",
      "info" : "ExpressionStatement[19277-19302]:ExpressionStatement[19277-19302]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.CALL:\n          checkForClassDefiningCalls(t, n, parent);\n          checkForCallingConventionDefiningCalls(n, delegateCallingConventions);\n          break;\n\n        case Token.FUNCTION:\n          if (t.getInput() == null || !t.getInput().isExtern()) {\n            nonExternFunctions.add(n);\n          }\n\n          // Hoisted functions are handled during pre-traversal.\n          if (!NodeUtil.isHoistedFunctionDeclaration(n)) {\n            defineFunctionLiteral(n, parent);\n          }\n          break;\n\n        case Token.ASSIGN:\n          // Handle initialization of properties.\n          Node firstChild = n.getFirstChild();\n          if (firstChild.isGetProp() &&\n              firstChild.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());\n          }\n          break;\n\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n\n        case Token.GETPROP:\n          // Handle stubbed properties.\n          if (parent.isExprResult() &&\n              n.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n          }\n          break;\n      }",
      "right" : "switch (n.getType()) {\n        case Token.CALL:\n          checkForClassDefiningCalls(t, n, parent);\n          checkForCallingConventionDefiningCalls(n, delegateCallingConventions);\n          break;\n\n        case Token.FUNCTION:\n          if (t.getInput() == null || !t.getInput().isExtern()) {\n            nonExternFunctions.add(n);\n          }\n\n          // Hoisted functions are handled during pre-traversal.\n          if (!NodeUtil.isHoistedFunctionDeclaration(n)) {\n            defineFunctionLiteral(n, parent);\n          }\n          break;\n\n        case Token.ASSIGN:\n          // Handle initialization of properties.\n          Node firstChild = n.getFirstChild();\n          if (firstChild.isGetProp() &&\n              firstChild.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());\n          }\n          break;\n\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n\n        case Token.GETPROP:\n          // Handle stubbed properties.\n          if (parent.isExprResult() &&\n              n.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n          }\n          break;\n      }",
      "info" : "SwitchStatement[19310-20618]:SwitchStatement[19310-20618]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[19341-19357]:SwitchCase[19341-19357]"
    }, {
      "left" : "checkForClassDefiningCalls(t, n, parent);",
      "right" : "checkForClassDefiningCalls(t, n, parent);",
      "info" : "ExpressionStatement[19368-19409]:ExpressionStatement[19368-19409]"
    }, {
      "left" : "checkForCallingConventionDefiningCalls(n, delegateCallingConventions);",
      "right" : "checkForCallingConventionDefiningCalls(n, delegateCallingConventions);",
      "info" : "ExpressionStatement[19420-19490]:ExpressionStatement[19420-19490]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19501-19507]:BreakStatement[19501-19507]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[19517-19537]:SwitchCase[19517-19537]"
    }, {
      "left" : "if (t.getInput() == null || !t.getInput().isExtern())",
      "right" : "if (t.getInput() == null || !t.getInput().isExtern())",
      "info" : "IfStatement[19548-19654]:IfStatement[19548-19654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19602-19654]:Block[19602-19654]"
    }, {
      "left" : "nonExternFunctions.add(n);",
      "right" : "nonExternFunctions.add(n);",
      "info" : "ExpressionStatement[19616-19642]:ExpressionStatement[19616-19642]"
    }, {
      "left" : "if (!NodeUtil.isHoistedFunctionDeclaration(n))",
      "right" : "if (!NodeUtil.isHoistedFunctionDeclaration(n))",
      "info" : "IfStatement[19731-19837]:IfStatement[19731-19837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19778-19837]:Block[19778-19837]"
    }, {
      "left" : "defineFunctionLiteral(n, parent);",
      "right" : "defineFunctionLiteral(n, parent);",
      "info" : "ExpressionStatement[19792-19825]:ExpressionStatement[19792-19825]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19848-19854]:BreakStatement[19848-19854]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[19864-19882]:SwitchCase[19864-19882]"
    }, {
      "left" : "Node firstChild = n.getFirstChild();",
      "right" : "Node firstChild = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[19943-19979]:VariableDeclarationStatement[19943-19979]"
    }, {
      "left" : "if (firstChild.isGetProp() &&\n              firstChild.isQualifiedName())",
      "right" : "if (firstChild.isGetProp() &&\n              firstChild.isQualifiedName())",
      "info" : "IfStatement[19990-20190]:IfStatement[19990-20190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20064-20190]:Block[20064-20190]"
    }, {
      "left" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());",
      "right" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());",
      "info" : "ExpressionStatement[20078-20178]:ExpressionStatement[20078-20178]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20201-20207]:BreakStatement[20201-20207]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[20217-20234]:SwitchCase[20217-20234]"
    }, {
      "left" : "defineCatch(n, parent);",
      "right" : "defineCatch(n, parent);",
      "info" : "ExpressionStatement[20245-20268]:ExpressionStatement[20245-20268]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20279-20285]:BreakStatement[20279-20285]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[20295-20310]:SwitchCase[20295-20310]"
    }, {
      "left" : "defineVar(n, parent);",
      "right" : "defineVar(n, parent);",
      "info" : "ExpressionStatement[20321-20342]:ExpressionStatement[20321-20342]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20353-20359]:BreakStatement[20353-20359]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[20369-20388]:SwitchCase[20369-20388]"
    }, {
      "left" : "if (parent.isExprResult() &&\n              n.isQualifiedName())",
      "right" : "if (parent.isExprResult() &&\n              n.isQualifiedName())",
      "info" : "IfStatement[20439-20593]:IfStatement[20439-20593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20503-20593]:Block[20503-20593]"
    }, {
      "left" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);",
      "right" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);",
      "info" : "ExpressionStatement[20517-20581]:ExpressionStatement[20517-20581]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20604-20610]:BreakStatement[20604-20610]"
    }, {
      "left" : "if (n.getParent() != null && NodeUtil.isStatement(n) &&\n          lentObjectLiterals != null)",
      "right" : "if (n.getParent() != null && NodeUtil.isStatement(n) &&\n          lentObjectLiterals != null)",
      "info" : "IfStatement[20689-20926]:IfStatement[20689-20926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20783-20926]:Block[20783-20926]"
    }, {
      "left" : "for (Node objLit : lentObjectLiterals)",
      "right" : "for (Node objLit : lentObjectLiterals)",
      "info" : "EnhancedForStatement[20793-20882]:EnhancedForStatement[20793-20882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20832-20882]:Block[20832-20882]"
    }, {
      "left" : "defineObjectLiteral(objLit);",
      "right" : "defineObjectLiteral(objLit);",
      "info" : "ExpressionStatement[20844-20872]:ExpressionStatement[20844-20872]"
    }, {
      "left" : "lentObjectLiterals.clear();",
      "right" : "lentObjectLiterals.clear();",
      "info" : "ExpressionStatement[20891-20918]:ExpressionStatement[20891-20918]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20938-20945]:Modifier[20938-20945]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20946-20950]:PrimitiveType[20946-20950]"
    }, {
      "left" : "attachLiteralTypes",
      "right" : "attachLiteralTypes",
      "info" : "SimpleName[20951-20969]:SimpleName[20951-20969]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[20970-20985]:SingleVariableDeclaration[20970-20985]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[20987-20993]:SingleVariableDeclaration[20987-20993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20995-22143]:Block[20995-22143]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.NULL:\n          n.setJSType(getNativeType(NULL_TYPE));\n          break;\n\n        case Token.VOID:\n          n.setJSType(getNativeType(VOID_TYPE));\n          break;\n\n        case Token.STRING:\n          n.setJSType(getNativeType(STRING_TYPE));\n          break;\n\n        case Token.NUMBER:\n          n.setJSType(getNativeType(NUMBER_TYPE));\n          break;\n\n        case Token.TRUE:\n        case Token.FALSE:\n          n.setJSType(getNativeType(BOOLEAN_TYPE));\n          break;\n\n        case Token.REGEXP:\n          n.setJSType(getNativeType(REGEXP_TYPE));\n          break;\n\n        case Token.OBJECTLIT:\n          JSDocInfo info = n.getJSDocInfo();\n          if (info != null &&\n              info.getLendsName() != null) {\n            if (lentObjectLiterals == null) {\n              lentObjectLiterals = Lists.newArrayList();\n            }\n            lentObjectLiterals.add(n);\n          } else {\n            defineObjectLiteral(n);\n          }\n          break;\n\n          // NOTE(nicksantos): If we ever support Array tuples,\n          // we will need to put ARRAYLIT here as well.\n      }",
      "right" : "switch (n.getType()) {\n        case Token.NULL:\n          n.setJSType(getNativeType(NULL_TYPE));\n          break;\n\n        case Token.VOID:\n          n.setJSType(getNativeType(VOID_TYPE));\n          break;\n\n        case Token.STRING:\n          n.setJSType(getNativeType(STRING_TYPE));\n          break;\n\n        case Token.NUMBER:\n          n.setJSType(getNativeType(NUMBER_TYPE));\n          break;\n\n        case Token.TRUE:\n        case Token.FALSE:\n          n.setJSType(getNativeType(BOOLEAN_TYPE));\n          break;\n\n        case Token.REGEXP:\n          n.setJSType(getNativeType(REGEXP_TYPE));\n          break;\n\n        case Token.OBJECTLIT:\n          JSDocInfo info = n.getJSDocInfo();\n          if (info != null &&\n              info.getLendsName() != null) {\n            if (lentObjectLiterals == null) {\n              lentObjectLiterals = Lists.newArrayList();\n            }\n            lentObjectLiterals.add(n);\n          } else {\n            defineObjectLiteral(n);\n          }\n          break;\n\n          // NOTE(nicksantos): If we ever support Array tuples,\n          // we will need to put ARRAYLIT here as well.\n      }",
      "info" : "SwitchStatement[21003-22137]:SwitchStatement[21003-22137]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[21034-21050]:SwitchCase[21034-21050]"
    }, {
      "left" : "n.setJSType(getNativeType(NULL_TYPE));",
      "right" : "n.setJSType(getNativeType(NULL_TYPE));",
      "info" : "ExpressionStatement[21061-21099]:ExpressionStatement[21061-21099]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21110-21116]:BreakStatement[21110-21116]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[21126-21142]:SwitchCase[21126-21142]"
    }, {
      "left" : "n.setJSType(getNativeType(VOID_TYPE));",
      "right" : "n.setJSType(getNativeType(VOID_TYPE));",
      "info" : "ExpressionStatement[21153-21191]:ExpressionStatement[21153-21191]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21202-21208]:BreakStatement[21202-21208]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[21218-21236]:SwitchCase[21218-21236]"
    }, {
      "left" : "n.setJSType(getNativeType(STRING_TYPE));",
      "right" : "n.setJSType(getNativeType(STRING_TYPE));",
      "info" : "ExpressionStatement[21247-21287]:ExpressionStatement[21247-21287]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21298-21304]:BreakStatement[21298-21304]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[21314-21332]:SwitchCase[21314-21332]"
    }, {
      "left" : "n.setJSType(getNativeType(NUMBER_TYPE));",
      "right" : "n.setJSType(getNativeType(NUMBER_TYPE));",
      "info" : "ExpressionStatement[21343-21383]:ExpressionStatement[21343-21383]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21394-21400]:BreakStatement[21394-21400]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[21410-21426]:SwitchCase[21410-21426]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[21435-21452]:SwitchCase[21435-21452]"
    }, {
      "left" : "n.setJSType(getNativeType(BOOLEAN_TYPE));",
      "right" : "n.setJSType(getNativeType(BOOLEAN_TYPE));",
      "info" : "ExpressionStatement[21463-21504]:ExpressionStatement[21463-21504]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21515-21521]:BreakStatement[21515-21521]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[21531-21549]:SwitchCase[21531-21549]"
    }, {
      "left" : "n.setJSType(getNativeType(REGEXP_TYPE));",
      "right" : "n.setJSType(getNativeType(REGEXP_TYPE));",
      "info" : "ExpressionStatement[21560-21600]:ExpressionStatement[21560-21600]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21611-21617]:BreakStatement[21611-21617]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[21627-21648]:SwitchCase[21627-21648]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[21659-21693]:VariableDeclarationStatement[21659-21693]"
    }, {
      "left" : "if (info != null &&\n              info.getLendsName() != null)",
      "right" : "if (info != null &&\n              info.getLendsName() != null)",
      "info" : "IfStatement[21704-21991]:IfStatement[21704-21991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21767-21936]:Block[21767-21936]"
    }, {
      "left" : "if (lentObjectLiterals == null)",
      "right" : "if (lentObjectLiterals == null)",
      "info" : "IfStatement[21781-21885]:IfStatement[21781-21885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21813-21885]:Block[21813-21885]"
    }, {
      "left" : "lentObjectLiterals = Lists.newArrayList();",
      "right" : "lentObjectLiterals = Lists.newArrayList();",
      "info" : "ExpressionStatement[21829-21871]:ExpressionStatement[21829-21871]"
    }, {
      "left" : "lentObjectLiterals.add(n);",
      "right" : "lentObjectLiterals.add(n);",
      "info" : "ExpressionStatement[21898-21924]:ExpressionStatement[21898-21924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21942-21991]:Block[21942-21991]"
    }, {
      "left" : "defineObjectLiteral(n);",
      "right" : "defineObjectLiteral(n);",
      "info" : "ExpressionStatement[21956-21979]:ExpressionStatement[21956-21979]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22002-22008]:BreakStatement[22002-22008]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22149-22156]:Modifier[22149-22156]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22157-22161]:PrimitiveType[22157-22161]"
    }, {
      "left" : "defineObjectLiteral",
      "right" : "defineObjectLiteral",
      "info" : "SimpleName[22162-22181]:SimpleName[22162-22181]"
    }, {
      "left" : "Node objectLit",
      "right" : "Node objectLit",
      "info" : "SingleVariableDeclaration[22182-22196]:SingleVariableDeclaration[22182-22196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22198-23823]:Block[22198-23823]"
    }, {
      "left" : "JSType type = null;",
      "right" : "JSType type = null;",
      "info" : "VariableDeclarationStatement[22245-22264]:VariableDeclarationStatement[22245-22264]"
    }, {
      "left" : "JSDocInfo info = objectLit.getJSDocInfo();",
      "right" : "JSDocInfo info = objectLit.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[22271-22313]:VariableDeclarationStatement[22271-22313]"
    }, {
      "left" : "if (info != null &&\n          info.getLendsName() != null)",
      "right" : "if (info != null &&\n          info.getLendsName() != null)",
      "info" : "IfStatement[22320-23109]:IfStatement[22320-23109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22379-23109]:Block[22379-23109]"
    }, {
      "left" : "String lendsName = info.getLendsName();",
      "right" : "String lendsName = info.getLendsName();",
      "info" : "VariableDeclarationStatement[22389-22428]:VariableDeclarationStatement[22389-22428]"
    }, {
      "left" : "Var lendsVar = scope.getVar(lendsName);",
      "right" : "Var lendsVar = scope.getVar(lendsName);",
      "info" : "VariableDeclarationStatement[22437-22476]:VariableDeclarationStatement[22437-22476]"
    }, {
      "left" : "if (lendsVar == null)",
      "right" : "if (lendsVar == null)",
      "info" : "IfStatement[22485-23101]:IfStatement[22485-23101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22507-22623]:Block[22507-22623]"
    }, {
      "left" : "compiler.report(\n              JSError.make(sourceName, objectLit, UNKNOWN_LENDS, lendsName));",
      "right" : "compiler.report(\n              JSError.make(sourceName, objectLit, UNKNOWN_LENDS, lendsName));",
      "info" : "ExpressionStatement[22519-22613]:ExpressionStatement[22519-22613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22629-23101]:Block[22629-23101]"
    }, {
      "left" : "type = lendsVar.getType();",
      "right" : "type = lendsVar.getType();",
      "info" : "ExpressionStatement[22641-22667]:ExpressionStatement[22641-22667]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[22678-22770]:IfStatement[22678-22770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22696-22770]:Block[22696-22770]"
    }, {
      "left" : "type = typeRegistry.getNativeType(UNKNOWN_TYPE);",
      "right" : "type = typeRegistry.getNativeType(UNKNOWN_TYPE);",
      "info" : "ExpressionStatement[22710-22758]:ExpressionStatement[22710-22758]"
    }, {
      "left" : "if (!type.isSubtype(typeRegistry.getNativeType(OBJECT_TYPE)))",
      "right" : "if (!type.isSubtype(typeRegistry.getNativeType(OBJECT_TYPE)))",
      "info" : "IfStatement[22781-23091]:IfStatement[22781-23091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22843-23033]:Block[22843-23033]"
    }, {
      "left" : "compiler.report(\n                JSError.make(sourceName, objectLit, LENDS_ON_NON_OBJECT,\n                    lendsName, type.toString()));",
      "right" : "compiler.report(\n                JSError.make(sourceName, objectLit, LENDS_ON_NON_OBJECT,\n                    lendsName, type.toString()));",
      "info" : "ExpressionStatement[22857-22996]:ExpressionStatement[22857-22996]"
    }, {
      "left" : "type = null;",
      "right" : "type = null;",
      "info" : "ExpressionStatement[23009-23021]:ExpressionStatement[23009-23021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23039-23091]:Block[23039-23091]"
    }, {
      "left" : "objectLit.setJSType(type);",
      "right" : "objectLit.setJSType(type);",
      "info" : "ExpressionStatement[23053-23079]:ExpressionStatement[23053-23079]"
    }, {
      "left" : "info = NodeUtil.getBestJSDocInfo(objectLit);",
      "right" : "info = NodeUtil.getBestJSDocInfo(objectLit);",
      "info" : "ExpressionStatement[23117-23161]:ExpressionStatement[23117-23161]"
    }, {
      "left" : "Node lValue = NodeUtil.getBestLValue(objectLit);",
      "right" : "Node lValue = NodeUtil.getBestLValue(objectLit);",
      "info" : "VariableDeclarationStatement[23168-23216]:VariableDeclarationStatement[23168-23216]"
    }, {
      "left" : "String lValueName = NodeUtil.getBestLValueName(lValue);",
      "right" : "String lValueName = NodeUtil.getBestLValueName(lValue);",
      "info" : "VariableDeclarationStatement[23223-23278]:VariableDeclarationStatement[23223-23278]"
    }, {
      "left" : "boolean createdEnumType = false;",
      "right" : "boolean createdEnumType = false;",
      "info" : "VariableDeclarationStatement[23285-23317]:VariableDeclarationStatement[23285-23317]"
    }, {
      "left" : "if (info != null && info.hasEnumParameterType())",
      "right" : "if (info != null && info.hasEnumParameterType())",
      "info" : "IfStatement[23324-23491]:IfStatement[23324-23491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23373-23491]:Block[23373-23491]"
    }, {
      "left" : "type = createEnumTypeFromNodes(objectLit, lValueName, info, lValue);",
      "right" : "type = createEnumTypeFromNodes(objectLit, lValueName, info, lValue);",
      "info" : "ExpressionStatement[23383-23451]:ExpressionStatement[23383-23451]"
    }, {
      "left" : "createdEnumType = true;",
      "right" : "createdEnumType = true;",
      "info" : "ExpressionStatement[23460-23483]:ExpressionStatement[23460-23483]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[23499-23583]:IfStatement[23499-23583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23517-23583]:Block[23517-23583]"
    }, {
      "left" : "type = typeRegistry.createAnonymousObjectType();",
      "right" : "type = typeRegistry.createAnonymousObjectType();",
      "info" : "ExpressionStatement[23527-23575]:ExpressionStatement[23527-23575]"
    }, {
      "left" : "setDeferredType(objectLit, type);",
      "right" : "setDeferredType(objectLit, type);",
      "info" : "ExpressionStatement[23591-23624]:ExpressionStatement[23591-23624]"
    }, {
      "left" : "processObjectLitProperties(\n          objectLit, ObjectType.cast(objectLit.getJSType()), !createdEnumType);",
      "right" : "processObjectLitProperties(\n          objectLit, ObjectType.cast(objectLit.getJSType()), !createdEnumType);",
      "info" : "ExpressionStatement[23710-23817]:ExpressionStatement[23710-23817]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24215-24219]:PrimitiveType[24215-24219]"
    }, {
      "left" : "processObjectLitProperties",
      "right" : "processObjectLitProperties",
      "info" : "SimpleName[24220-24246]:SimpleName[24220-24246]"
    }, {
      "left" : "Node objLit",
      "right" : "Node objLit",
      "info" : "SingleVariableDeclaration[24256-24267]:SingleVariableDeclaration[24256-24267]"
    }, {
      "left" : "ObjectType objLitType",
      "right" : "ObjectType objLitType",
      "info" : "SingleVariableDeclaration[24269-24290]:SingleVariableDeclaration[24269-24290]"
    }, {
      "left" : "boolean declareOnOwner",
      "right" : "boolean declareOnOwner",
      "info" : "SingleVariableDeclaration[24300-24322]:SingleVariableDeclaration[24300-24322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24324-25597]:Block[24324-25597]"
    }, {
      "left" : "for (Node keyNode = objLit.getFirstChild(); keyNode != null;\n           keyNode = keyNode.getNext())",
      "right" : "for (Node keyNode = objLit.getFirstChild(); keyNode != null;\n           keyNode = keyNode.getNext())",
      "info" : "ForStatement[24332-25591]:ForStatement[24332-25591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24433-25591]:Block[24433-25591]"
    }, {
      "left" : "Node value = keyNode.getFirstChild();",
      "right" : "Node value = keyNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[24443-24480]:VariableDeclarationStatement[24443-24480]"
    }, {
      "left" : "String memberName = NodeUtil.getObjectLitKeyName(keyNode);",
      "right" : "String memberName = NodeUtil.getObjectLitKeyName(keyNode);",
      "info" : "VariableDeclarationStatement[24489-24547]:VariableDeclarationStatement[24489-24547]"
    }, {
      "left" : "JSDocInfo info = keyNode.getJSDocInfo();",
      "right" : "JSDocInfo info = keyNode.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[24556-24596]:VariableDeclarationStatement[24556-24596]"
    }, {
      "left" : "JSType valueType =\n            getDeclaredType(keyNode.getSourceFileName(), info, keyNode, value);",
      "right" : "JSType valueType =\n            getDeclaredType(keyNode.getSourceFileName(), info, keyNode, value);",
      "info" : "VariableDeclarationStatement[24605-24703]:VariableDeclarationStatement[24605-24703]"
    }, {
      "left" : "JSType keyType =  objLitType.isEnumType() ?\n            objLitType.toMaybeEnumType().getElementsType() :\n            NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);",
      "right" : "JSType keyType =  objLitType.isEnumType() ?\n            objLitType.toMaybeEnumType().getElementsType() :\n            NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);",
      "info" : "VariableDeclarationStatement[24712-24891]:VariableDeclarationStatement[24712-24891]"
    }, {
      "left" : "String qualifiedName = NodeUtil.getBestLValueName(keyNode);",
      "right" : "String qualifiedName = NodeUtil.getBestLValueName(keyNode);",
      "info" : "VariableDeclarationStatement[25006-25065]:VariableDeclarationStatement[25006-25065]"
    }, {
      "left" : "if (qualifiedName != null)",
      "right" : "if (qualifiedName != null)",
      "info" : "IfStatement[25074-25314]:IfStatement[25074-25314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25101-25231]:Block[25101-25231]"
    }, {
      "left" : "boolean inferred = keyType == null;",
      "right" : "boolean inferred = keyType == null;",
      "info" : "VariableDeclarationStatement[25113-25148]:VariableDeclarationStatement[25113-25148]"
    }, {
      "left" : "defineSlot(keyNode, objLit, qualifiedName, keyType, inferred);",
      "right" : "defineSlot(keyNode, objLit, qualifiedName, keyType, inferred);",
      "info" : "ExpressionStatement[25159-25221]:ExpressionStatement[25159-25221]"
    }, {
      "left" : "if (keyType != null)",
      "right" : "if (keyType != null)",
      "info" : "IfStatement[25237-25314]:IfStatement[25237-25314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25258-25314]:Block[25258-25314]"
    }, {
      "left" : "setDeferredType(keyNode, keyType);",
      "right" : "setDeferredType(keyNode, keyType);",
      "info" : "ExpressionStatement[25270-25304]:ExpressionStatement[25270-25304]"
    }, {
      "left" : "if (keyType != null && objLitType != null && declareOnOwner)",
      "right" : "if (keyType != null && objLitType != null && declareOnOwner)",
      "info" : "IfStatement[25324-25583]:IfStatement[25324-25583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25385-25583]:Block[25385-25583]"
    }, {
      "left" : "boolean isExtern = keyNode.isFromExterns();",
      "right" : "boolean isExtern = keyNode.isFromExterns();",
      "info" : "VariableDeclarationStatement[25455-25498]:VariableDeclarationStatement[25455-25498]"
    }, {
      "left" : "objLitType.defineDeclaredProperty(memberName, keyType, keyNode);",
      "right" : "objLitType.defineDeclaredProperty(memberName, keyType, keyNode);",
      "info" : "ExpressionStatement[25509-25573]:ExpressionStatement[25509-25573]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25833-25840]:Modifier[25833-25840]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[25841-25847]:SimpleType[25841-25847]"
    }, {
      "left" : "getDeclaredTypeInAnnotation",
      "right" : "getDeclaredTypeInAnnotation",
      "info" : "SimpleName[25848-25875]:SimpleName[25848-25875]"
    }, {
      "left" : "String sourceName",
      "right" : "String sourceName",
      "info" : "SingleVariableDeclaration[25876-25893]:SingleVariableDeclaration[25876-25893]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[25903-25912]:SingleVariableDeclaration[25903-25912]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[25914-25928]:SingleVariableDeclaration[25914-25928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25930-26507]:Block[25930-26507]"
    }, {
      "left" : "JSType jsType = null;",
      "right" : "JSType jsType = null;",
      "info" : "VariableDeclarationStatement[25938-25959]:VariableDeclarationStatement[25938-25959]"
    }, {
      "left" : "Node objNode =\n          node.isGetProp() ? node.getFirstChild() :\n          NodeUtil.isObjectLitKey(node, node.getParent()) ? node.getParent() :\n          null;",
      "right" : "Node objNode =\n          node.isGetProp() ? node.getFirstChild() :\n          NodeUtil.isObjectLitKey(node, node.getParent()) ? node.getParent() :\n          null;",
      "info" : "VariableDeclarationStatement[25966-26127]:VariableDeclarationStatement[25966-26127]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[26134-26480]:IfStatement[26134-26480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26152-26480]:Block[26152-26480]"
    }, {
      "left" : "if (info.hasType())",
      "right" : "if (info.hasType())",
      "info" : "IfStatement[26162-26472]:IfStatement[26162-26472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26182-26258]:Block[26182-26258]"
    }, {
      "left" : "jsType = info.getType().evaluate(scope, typeRegistry);",
      "right" : "jsType = info.getType().evaluate(scope, typeRegistry);",
      "info" : "ExpressionStatement[26194-26248]:ExpressionStatement[26194-26248]"
    }, {
      "left" : "if (FunctionTypeBuilder.isFunctionTypeDeclaration(info))",
      "right" : "if (FunctionTypeBuilder.isFunctionTypeDeclaration(info))",
      "info" : "IfStatement[26264-26472]:IfStatement[26264-26472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26321-26472]:Block[26321-26472]"
    }, {
      "left" : "String fnName = node.getQualifiedName();",
      "right" : "String fnName = node.getQualifiedName();",
      "info" : "VariableDeclarationStatement[26333-26373]:VariableDeclarationStatement[26333-26373]"
    }, {
      "left" : "jsType = createFunctionTypeFromNodes(\n              null, fnName, info, node);",
      "right" : "jsType = createFunctionTypeFromNodes(\n              null, fnName, info, node);",
      "info" : "ExpressionStatement[26384-26462]:ExpressionStatement[26384-26462]"
    }, {
      "left" : "return jsType;",
      "right" : "return jsType;",
      "info" : "ReturnStatement[26487-26501]:ReturnStatement[26487-26501]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26657-26661]:PrimitiveType[26657-26661]"
    }, {
      "left" : "assertDefinitionNode",
      "right" : "assertDefinitionNode",
      "info" : "SimpleName[26662-26682]:SimpleName[26662-26682]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[26683-26689]:SingleVariableDeclaration[26683-26689]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[26691-26699]:SingleVariableDeclaration[26691-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26701-26813]:Block[26701-26813]"
    }, {
      "left" : "Preconditions.checkState(sourceName != null);",
      "right" : "Preconditions.checkState(sourceName != null);",
      "info" : "ExpressionStatement[26709-26754]:ExpressionStatement[26709-26754]"
    }, {
      "left" : "Preconditions.checkState(n.getType() == type);",
      "right" : "Preconditions.checkState(n.getType() == type);",
      "info" : "ExpressionStatement[26761-26807]:ExpressionStatement[26761-26807]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26869-26873]:PrimitiveType[26869-26873]"
    }, {
      "left" : "defineCatch",
      "right" : "defineCatch",
      "info" : "SimpleName[26874-26885]:SimpleName[26874-26885]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[26886-26892]:SingleVariableDeclaration[26886-26892]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[26894-26905]:SingleVariableDeclaration[26894-26905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26907-27038]:Block[26907-27038]"
    }, {
      "left" : "assertDefinitionNode(n, Token.CATCH);",
      "right" : "assertDefinitionNode(n, Token.CATCH);",
      "info" : "ExpressionStatement[26915-26952]:ExpressionStatement[26915-26952]"
    }, {
      "left" : "Node catchName = n.getFirstChild();",
      "right" : "Node catchName = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[26959-26994]:VariableDeclarationStatement[26959-26994]"
    }, {
      "left" : "defineSlot(catchName, n, null);",
      "right" : "defineSlot(catchName, n, null);",
      "info" : "ExpressionStatement[27001-27032]:ExpressionStatement[27001-27032]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27097-27101]:PrimitiveType[27097-27101]"
    }, {
      "left" : "defineVar",
      "right" : "defineVar",
      "info" : "SimpleName[27102-27111]:SimpleName[27102-27111]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[27112-27118]:SingleVariableDeclaration[27112-27118]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[27120-27131]:SingleVariableDeclaration[27120-27131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27133-27670]:Block[27133-27670]"
    }, {
      "left" : "assertDefinitionNode(n, Token.VAR);",
      "right" : "assertDefinitionNode(n, Token.VAR);",
      "info" : "ExpressionStatement[27141-27176]:ExpressionStatement[27141-27176]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[27183-27217]:VariableDeclarationStatement[27183-27217]"
    }, {
      "left" : "if (n.hasMoreThanOneChild())",
      "right" : "if (n.hasMoreThanOneChild())",
      "info" : "IfStatement[27224-27664]:IfStatement[27224-27664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27253-27516]:Block[27253-27516]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[27263-27397]:IfStatement[27263-27397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27281-27397]:Block[27281-27397]"
    }, {
      "left" : "compiler.report(JSError.make(sourceName, n, MULTIPLE_VAR_DEF));",
      "right" : "compiler.report(JSError.make(sourceName, n, MULTIPLE_VAR_DEF));",
      "info" : "ExpressionStatement[27324-27387]:ExpressionStatement[27324-27387]"
    }, {
      "left" : "for (Node name : n.children())",
      "right" : "for (Node name : n.children())",
      "info" : "EnhancedForStatement[27406-27508]:EnhancedForStatement[27406-27508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27437-27508]:Block[27437-27508]"
    }, {
      "left" : "defineName(name, n, parent, name.getJSDocInfo());",
      "right" : "defineName(name, n, parent, name.getJSDocInfo());",
      "info" : "ExpressionStatement[27449-27498]:ExpressionStatement[27449-27498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27522-27664]:Block[27522-27664]"
    }, {
      "left" : "Node name = n.getFirstChild();",
      "right" : "Node name = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[27532-27562]:VariableDeclarationStatement[27532-27562]"
    }, {
      "left" : "defineName(name, n, parent,\n            (info != null) ? info : name.getJSDocInfo());",
      "right" : "defineName(name, n, parent,\n            (info != null) ? info : name.getJSDocInfo());",
      "info" : "ExpressionStatement[27571-27656]:ExpressionStatement[27571-27656]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27727-27731]:PrimitiveType[27727-27731]"
    }, {
      "left" : "defineFunctionLiteral",
      "right" : "defineFunctionLiteral",
      "info" : "SimpleName[27732-27753]:SimpleName[27732-27753]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[27754-27760]:SingleVariableDeclaration[27754-27760]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[27762-27773]:SingleVariableDeclaration[27762-27773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27775-28577]:Block[27775-28577]"
    }, {
      "left" : "assertDefinitionNode(n, Token.FUNCTION);",
      "right" : "assertDefinitionNode(n, Token.FUNCTION);",
      "info" : "ExpressionStatement[27783-27823]:ExpressionStatement[27783-27823]"
    }, {
      "left" : "Node lValue = NodeUtil.getBestLValue(n);",
      "right" : "Node lValue = NodeUtil.getBestLValue(n);",
      "info" : "VariableDeclarationStatement[27938-27978]:VariableDeclarationStatement[27938-27978]"
    }, {
      "left" : "JSDocInfo info = NodeUtil.getBestJSDocInfo(n);",
      "right" : "JSDocInfo info = NodeUtil.getBestJSDocInfo(n);",
      "info" : "VariableDeclarationStatement[27985-28031]:VariableDeclarationStatement[27985-28031]"
    }, {
      "left" : "String functionName = NodeUtil.getBestLValueName(lValue);",
      "right" : "String functionName = NodeUtil.getBestLValueName(lValue);",
      "info" : "VariableDeclarationStatement[28038-28095]:VariableDeclarationStatement[28038-28095]"
    }, {
      "left" : "FunctionType functionType =\n          createFunctionTypeFromNodes(n, functionName, info, lValue);",
      "right" : "FunctionType functionType =\n          createFunctionTypeFromNodes(n, functionName, info, lValue);",
      "info" : "VariableDeclarationStatement[28102-28199]:VariableDeclarationStatement[28102-28199]"
    }, {
      "left" : "setDeferredType(n, functionType);",
      "right" : "setDeferredType(n, functionType);",
      "info" : "ExpressionStatement[28265-28298]:ExpressionStatement[28265-28298]"
    }, {
      "left" : "if (NodeUtil.isFunctionDeclaration(n))",
      "right" : "if (NodeUtil.isFunctionDeclaration(n))",
      "info" : "IfStatement[28467-28571]:IfStatement[28467-28571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28506-28571]:Block[28506-28571]"
    }, {
      "left" : "defineSlot(n.getFirstChild(), n, functionType);",
      "right" : "defineSlot(n.getFirstChild(), n, functionType);",
      "info" : "ExpressionStatement[28516-28563]:ExpressionStatement[28516-28563]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28967-28974]:Modifier[28967-28974]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28975-28979]:PrimitiveType[28975-28979]"
    }, {
      "left" : "defineName",
      "right" : "defineName",
      "info" : "SimpleName[28980-28990]:SimpleName[28980-28990]"
    }, {
      "left" : "Node name",
      "right" : "Node name",
      "info" : "SingleVariableDeclaration[28991-29000]:SingleVariableDeclaration[28991-29000]"
    }, {
      "left" : "Node var",
      "right" : "Node var",
      "info" : "SingleVariableDeclaration[29002-29010]:SingleVariableDeclaration[29002-29010]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[29012-29023]:SingleVariableDeclaration[29012-29023]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[29025-29039]:SingleVariableDeclaration[29025-29039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29041-29387]:Block[29041-29387]"
    }, {
      "left" : "Node value = name.getFirstChild();",
      "right" : "Node value = name.getFirstChild();",
      "info" : "VariableDeclarationStatement[29049-29083]:VariableDeclarationStatement[29049-29083]"
    }, {
      "left" : "JSType type = getDeclaredType(sourceName, info, name, value);",
      "right" : "JSType type = getDeclaredType(sourceName, info, name, value);",
      "info" : "VariableDeclarationStatement[29116-29177]:VariableDeclarationStatement[29116-29177]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[29184-29346]:IfStatement[29184-29346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29202-29346]:Block[29202-29346]"
    }, {
      "left" : "type = name.isFromExterns() ?\n            getNativeType(UNKNOWN_TYPE) : null;",
      "right" : "type = name.isFromExterns() ?\n            getNativeType(UNKNOWN_TYPE) : null;",
      "info" : "ExpressionStatement[29261-29338]:ExpressionStatement[29261-29338]"
    }, {
      "left" : "defineSlot(name, var, type);",
      "right" : "defineSlot(name, var, type);",
      "info" : "ExpressionStatement[29353-29381]:ExpressionStatement[29353-29381]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29717-29724]:Modifier[29717-29724]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29725-29732]:PrimitiveType[29725-29732]"
    }, {
      "left" : "shouldUseFunctionLiteralType",
      "right" : "shouldUseFunctionLiteralType",
      "info" : "SimpleName[29733-29761]:SimpleName[29733-29761]"
    }, {
      "left" : "FunctionType type",
      "right" : "FunctionType type",
      "info" : "SingleVariableDeclaration[29771-29788]:SingleVariableDeclaration[29771-29788]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[29790-29804]:SingleVariableDeclaration[29790-29804]"
    }, {
      "left" : "Node lValue",
      "right" : "Node lValue",
      "info" : "SingleVariableDeclaration[29806-29817]:SingleVariableDeclaration[29806-29817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29819-30067]:Block[29819-30067]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[29827-29875]:IfStatement[29827-29875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29845-29875]:Block[29845-29875]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29855-29867]:ReturnStatement[29855-29867]"
    }, {
      "left" : "if (lValue != null &&\n          NodeUtil.isObjectLitKey(lValue, lValue.getParent()))",
      "right" : "if (lValue != null &&\n          NodeUtil.isObjectLitKey(lValue, lValue.getParent()))",
      "info" : "IfStatement[29882-29998]:IfStatement[29882-29998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29967-29998]:Block[29967-29998]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29977-29990]:ReturnStatement[29977-29990]"
    }, {
      "left" : "return scope.isGlobal() || !type.isReturnTypeInferred();",
      "right" : "return scope.isGlobal() || !type.isReturnTypeInferred();",
      "info" : "ReturnStatement[30005-30061]:ReturnStatement[30005-30061]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31094-31101]:Modifier[31094-31101]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[31102-31114]:SimpleType[31102-31114]"
    }, {
      "left" : "createFunctionTypeFromNodes",
      "right" : "createFunctionTypeFromNodes",
      "info" : "SimpleName[31115-31142]:SimpleName[31115-31142]"
    }, {
      "left" : "@Nullable Node rValue",
      "right" : "@Nullable Node rValue",
      "info" : "SingleVariableDeclaration[31152-31173]:SingleVariableDeclaration[31152-31173]"
    }, {
      "left" : "@Nullable String name",
      "right" : "@Nullable String name",
      "info" : "SingleVariableDeclaration[31183-31204]:SingleVariableDeclaration[31183-31204]"
    }, {
      "left" : "@Nullable JSDocInfo info",
      "right" : "@Nullable JSDocInfo info",
      "info" : "SingleVariableDeclaration[31214-31238]:SingleVariableDeclaration[31214-31238]"
    }, {
      "left" : "@Nullable Node lvalueNode",
      "right" : "@Nullable Node lvalueNode",
      "info" : "SingleVariableDeclaration[31248-31273]:SingleVariableDeclaration[31248-31273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31275-35290]:Block[31275-35290]"
    }, {
      "left" : "FunctionType functionType = null;",
      "right" : "FunctionType functionType = null;",
      "info" : "VariableDeclarationStatement[31284-31317]:VariableDeclarationStatement[31284-31317]"
    }, {
      "left" : "if (rValue != null && rValue.isQualifiedName() && scope.isGlobal())",
      "right" : "if (rValue != null && rValue.isQualifiedName() && scope.isGlobal())",
      "info" : "IfStatement[31399-32042]:IfStatement[31399-32042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31467-32042]:Block[31467-32042]"
    }, {
      "left" : "Var var = scope.getVar(rValue.getQualifiedName());",
      "right" : "Var var = scope.getVar(rValue.getQualifiedName());",
      "info" : "VariableDeclarationStatement[31477-31527]:VariableDeclarationStatement[31477-31527]"
    }, {
      "left" : "if (var != null && var.getType() != null &&\n            var.getType().isFunctionType())",
      "right" : "if (var != null && var.getType() != null &&\n            var.getType().isFunctionType())",
      "info" : "IfStatement[31536-32034]:IfStatement[31536-32034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31624-32034]:Block[31624-32034]"
    }, {
      "left" : "FunctionType aliasedType  = var.getType().toMaybeFunctionType();",
      "right" : "FunctionType aliasedType  = var.getType().toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[31636-31700]:VariableDeclarationStatement[31636-31700]"
    }, {
      "left" : "if ((aliasedType.isConstructor() || aliasedType.isInterface()) &&\n              !aliasedType.isNativeObjectType())",
      "right" : "if ((aliasedType.isConstructor() || aliasedType.isInterface()) &&\n              !aliasedType.isNativeObjectType())",
      "info" : "IfStatement[31711-32024]:IfStatement[31711-32024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31826-32024]:Block[31826-32024]"
    }, {
      "left" : "functionType = aliasedType;",
      "right" : "functionType = aliasedType;",
      "info" : "ExpressionStatement[31840-31867]:ExpressionStatement[31840-31867]"
    }, {
      "left" : "if (name != null && scope.isGlobal())",
      "right" : "if (name != null && scope.isGlobal())",
      "info" : "IfStatement[31881-32012]:IfStatement[31881-32012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31919-32012]:Block[31919-32012]"
    }, {
      "left" : "typeRegistry.declareType(name, functionType.getInstanceType());",
      "right" : "typeRegistry.declareType(name, functionType.getInstanceType());",
      "info" : "ExpressionStatement[31935-31998]:ExpressionStatement[31935-31998]"
    }, {
      "left" : "if (functionType == null)",
      "right" : "if (functionType == null)",
      "info" : "IfStatement[32050-35238]:IfStatement[32050-35238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32076-35238]:Block[32076-35238]"
    }, {
      "left" : "Node errorRoot = rValue == null ? lvalueNode : rValue;",
      "right" : "Node errorRoot = rValue == null ? lvalueNode : rValue;",
      "info" : "VariableDeclarationStatement[32086-32140]:VariableDeclarationStatement[32086-32140]"
    }, {
      "left" : "boolean isFnLiteral =\n            rValue != null && rValue.isFunction();",
      "right" : "boolean isFnLiteral =\n            rValue != null && rValue.isFunction();",
      "info" : "VariableDeclarationStatement[32149-32221]:VariableDeclarationStatement[32149-32221]"
    }, {
      "left" : "Node fnRoot = isFnLiteral ? rValue : null;",
      "right" : "Node fnRoot = isFnLiteral ? rValue : null;",
      "info" : "VariableDeclarationStatement[32230-32272]:VariableDeclarationStatement[32230-32272]"
    }, {
      "left" : "Node parametersNode = isFnLiteral ?\n            rValue.getFirstChild().getNext() : null;",
      "right" : "Node parametersNode = isFnLiteral ?\n            rValue.getFirstChild().getNext() : null;",
      "info" : "VariableDeclarationStatement[32281-32369]:VariableDeclarationStatement[32281-32369]"
    }, {
      "left" : "Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;",
      "right" : "Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;",
      "info" : "VariableDeclarationStatement[32378-32439]:VariableDeclarationStatement[32378-32439]"
    }, {
      "left" : "if (info != null && info.hasType())",
      "right" : "if (info != null && info.hasType())",
      "info" : "IfStatement[32449-32846]:IfStatement[32449-32846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32485-32846]:Block[32485-32846]"
    }, {
      "left" : "JSType type = info.getType().evaluate(scope, typeRegistry);",
      "right" : "JSType type = info.getType().evaluate(scope, typeRegistry);",
      "info" : "VariableDeclarationStatement[32497-32556]:VariableDeclarationStatement[32497-32556]"
    }, {
      "left" : "type = type.restrictByNotNullOrUndefined();",
      "right" : "type = type.restrictByNotNullOrUndefined();",
      "info" : "ExpressionStatement[32642-32685]:ExpressionStatement[32642-32685]"
    }, {
      "left" : "if (type.isFunctionType())",
      "right" : "if (type.isFunctionType())",
      "info" : "IfStatement[32696-32836]:IfStatement[32696-32836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32723-32836]:Block[32723-32836]"
    }, {
      "left" : "functionType = type.toMaybeFunctionType();",
      "right" : "functionType = type.toMaybeFunctionType();",
      "info" : "ExpressionStatement[32737-32779]:ExpressionStatement[32737-32779]"
    }, {
      "left" : "functionType.setJSDocInfo(info);",
      "right" : "functionType.setJSDocInfo(info);",
      "info" : "ExpressionStatement[32792-32824]:ExpressionStatement[32792-32824]"
    }, {
      "left" : "if (functionType == null)",
      "right" : "if (functionType == null)",
      "info" : "IfStatement[32856-35230]:IfStatement[32856-35230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32882-35230]:Block[32882-35230]"
    }, {
      "left" : "Node ownerNode = NodeUtil.getBestLValueOwner(lvalueNode);",
      "right" : "Node ownerNode = NodeUtil.getBestLValueOwner(lvalueNode);",
      "info" : "VariableDeclarationStatement[32949-33006]:VariableDeclarationStatement[32949-33006]"
    }, {
      "left" : "String ownerName = NodeUtil.getBestLValueName(ownerNode);",
      "right" : "String ownerName = NodeUtil.getBestLValueName(ownerNode);",
      "info" : "VariableDeclarationStatement[33017-33074]:VariableDeclarationStatement[33017-33074]"
    }, {
      "left" : "Var ownerVar = null;",
      "right" : "Var ownerVar = null;",
      "info" : "VariableDeclarationStatement[33085-33105]:VariableDeclarationStatement[33085-33105]"
    }, {
      "left" : "String propName = null;",
      "right" : "String propName = null;",
      "info" : "VariableDeclarationStatement[33116-33139]:VariableDeclarationStatement[33116-33139]"
    }, {
      "left" : "ObjectType ownerType = null;",
      "right" : "ObjectType ownerType = null;",
      "info" : "VariableDeclarationStatement[33150-33178]:VariableDeclarationStatement[33150-33178]"
    }, {
      "left" : "if (ownerName != null)",
      "right" : "if (ownerName != null)",
      "info" : "IfStatement[33189-33497]:IfStatement[33189-33497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33212-33497]:Block[33212-33497]"
    }, {
      "left" : "ownerVar = scope.getVar(ownerName);",
      "right" : "ownerVar = scope.getVar(ownerName);",
      "info" : "ExpressionStatement[33226-33261]:ExpressionStatement[33226-33261]"
    }, {
      "left" : "if (ownerVar != null)",
      "right" : "if (ownerVar != null)",
      "info" : "IfStatement[33274-33374]:IfStatement[33274-33374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33296-33374]:Block[33296-33374]"
    }, {
      "left" : "ownerType = ObjectType.cast(ownerVar.getType());",
      "right" : "ownerType = ObjectType.cast(ownerVar.getType());",
      "info" : "ExpressionStatement[33312-33360]:ExpressionStatement[33312-33360]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[33387-33485]:IfStatement[33387-33485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33405-33485]:Block[33405-33485]"
    }, {
      "left" : "propName = name.substring(ownerName.length() + 1);",
      "right" : "propName = name.substring(ownerName.length() + 1);",
      "info" : "ExpressionStatement[33421-33471]:ExpressionStatement[33421-33471]"
    }, {
      "left" : "FunctionType overriddenPropType = null;",
      "right" : "FunctionType overriddenPropType = null;",
      "info" : "VariableDeclarationStatement[33509-33548]:VariableDeclarationStatement[33509-33548]"
    }, {
      "left" : "if (ownerType != null && propName != null)",
      "right" : "if (ownerType != null && propName != null)",
      "info" : "IfStatement[33559-33709]:IfStatement[33559-33709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33602-33709]:Block[33602-33709]"
    }, {
      "left" : "overriddenPropType =\n                findOverriddenFunction(ownerType, propName);",
      "right" : "overriddenPropType =\n                findOverriddenFunction(ownerType, propName);",
      "info" : "ExpressionStatement[33616-33697]:ExpressionStatement[33616-33697]"
    }, {
      "left" : "FunctionTypeBuilder builder =\n              new FunctionTypeBuilder(name, compiler, errorRoot, sourceName,\n                  scope)\n              .setContents(getFunctionAnalysisResults(fnRoot))\n              .inferFromOverriddenFunction(overriddenPropType, parametersNode)\n              .inferTemplateTypeName(info)\n              .inferReturnType(info)\n              .inferInheritance(info);",
      "right" : "FunctionTypeBuilder builder =\n              new FunctionTypeBuilder(name, compiler, errorRoot, sourceName,\n                  scope)\n              .setContents(getFunctionAnalysisResults(fnRoot))\n              .inferFromOverriddenFunction(overriddenPropType, parametersNode)\n              .inferTemplateTypeName(info)\n              .inferReturnType(info)\n              .inferInheritance(info);",
      "info" : "VariableDeclarationStatement[33721-34113]:VariableDeclarationStatement[33721-34113]"
    }, {
      "left" : "boolean searchedForThisType = false;",
      "right" : "boolean searchedForThisType = false;",
      "info" : "VariableDeclarationStatement[34163-34199]:VariableDeclarationStatement[34163-34199]"
    }, {
      "left" : "if (ownerType != null && ownerType.isFunctionPrototypeType())",
      "right" : "if (ownerType != null && ownerType.isFunctionPrototypeType())",
      "info" : "IfStatement[34210-35002]:IfStatement[34210-35002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34272-34431]:Block[34272-34431]"
    }, {
      "left" : "builder.inferThisType(\n                info, ownerType.getOwnerFunction().getInstanceType());",
      "right" : "builder.inferThisType(\n                info, ownerType.getOwnerFunction().getInstanceType());",
      "info" : "ExpressionStatement[34286-34379]:ExpressionStatement[34286-34379]"
    }, {
      "left" : "searchedForThisType = true;",
      "right" : "searchedForThisType = true;",
      "info" : "ExpressionStatement[34392-34419]:ExpressionStatement[34392-34419]"
    }, {
      "left" : "if (ownerNode != null && ownerNode.isThis())",
      "right" : "if (ownerNode != null && ownerNode.isThis())",
      "info" : "IfStatement[34437-35002]:IfStatement[34437-35002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34482-35002]:Block[34482-35002]"
    }, {
      "left" : "JSType injectedThisType = ownerNode.getJSType();",
      "right" : "JSType injectedThisType = ownerNode.getJSType();",
      "info" : "VariableDeclarationStatement[34743-34791]:VariableDeclarationStatement[34743-34791]"
    }, {
      "left" : "builder.inferThisType(\n                info,\n                injectedThisType == null ?\n                scope.getTypeOfThis() : injectedThisType);",
      "right" : "builder.inferThisType(\n                info,\n                injectedThisType == null ?\n                scope.getTypeOfThis() : injectedThisType);",
      "info" : "ExpressionStatement[34804-34950]:ExpressionStatement[34804-34950]"
    }, {
      "left" : "searchedForThisType = true;",
      "right" : "searchedForThisType = true;",
      "info" : "ExpressionStatement[34963-34990]:ExpressionStatement[34963-34990]"
    }, {
      "left" : "if (!searchedForThisType)",
      "right" : "if (!searchedForThisType)",
      "info" : "IfStatement[35014-35094]:IfStatement[35014-35094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35040-35094]:Block[35040-35094]"
    }, {
      "left" : "builder.inferThisType(info);",
      "right" : "builder.inferThisType(info);",
      "info" : "ExpressionStatement[35054-35082]:ExpressionStatement[35054-35082]"
    }, {
      "left" : "functionType = builder\n              .inferParameterTypes(parametersNode, info)\n              .buildAndRegister();",
      "right" : "functionType = builder\n              .inferParameterTypes(parametersNode, info)\n              .buildAndRegister();",
      "info" : "ExpressionStatement[35106-35220]:ExpressionStatement[35106-35220]"
    }, {
      "left" : "return functionType;",
      "right" : "return functionType;",
      "info" : "ReturnStatement[35264-35284]:ReturnStatement[35264-35284]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35383-35390]:Modifier[35383-35390]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[35391-35403]:SimpleType[35391-35403]"
    }, {
      "left" : "findOverriddenFunction",
      "right" : "findOverriddenFunction",
      "info" : "SimpleName[35404-35426]:SimpleName[35404-35426]"
    }, {
      "left" : "ObjectType ownerType",
      "right" : "ObjectType ownerType",
      "info" : "SingleVariableDeclaration[35436-35456]:SingleVariableDeclaration[35436-35456]"
    }, {
      "left" : "String propName",
      "right" : "String propName",
      "info" : "SingleVariableDeclaration[35458-35473]:SingleVariableDeclaration[35458-35473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35475-36163]:Block[35475-36163]"
    }, {
      "left" : "JSType propType = ownerType.getPropertyType(propName);",
      "right" : "JSType propType = ownerType.getPropertyType(propName);",
      "info" : "VariableDeclarationStatement[35569-35623]:VariableDeclarationStatement[35569-35623]"
    }, {
      "left" : "if (propType != null && propType.isFunctionType())",
      "right" : "if (propType != null && propType.isFunctionType())",
      "info" : "IfStatement[35630-36137]:IfStatement[35630-36137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35681-35737]:Block[35681-35737]"
    }, {
      "left" : "return propType.toMaybeFunctionType();",
      "right" : "return propType.toMaybeFunctionType();",
      "info" : "ReturnStatement[35691-35729]:ReturnStatement[35691-35729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35743-36137]:Block[35743-36137]"
    }, {
      "left" : "for (ObjectType iface :\n                 ownerType.getCtorImplementedInterfaces())",
      "right" : "for (ObjectType iface :\n                 ownerType.getCtorImplementedInterfaces())",
      "info" : "EnhancedForStatement[35855-36129]:EnhancedForStatement[35855-36129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35938-36129]:Block[35938-36129]"
    }, {
      "left" : "propType = iface.getPropertyType(propName);",
      "right" : "propType = iface.getPropertyType(propName);",
      "info" : "ExpressionStatement[35950-35993]:ExpressionStatement[35950-35993]"
    }, {
      "left" : "if (propType != null && propType.isFunctionType())",
      "right" : "if (propType != null && propType.isFunctionType())",
      "info" : "IfStatement[36004-36119]:IfStatement[36004-36119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36055-36119]:Block[36055-36119]"
    }, {
      "left" : "return propType.toMaybeFunctionType();",
      "right" : "return propType.toMaybeFunctionType();",
      "info" : "ReturnStatement[36069-36107]:ReturnStatement[36069-36107]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[36145-36157]:ReturnStatement[36145-36157]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36853-36860]:Modifier[36853-36860]"
    }, {
      "left" : "EnumType",
      "right" : "EnumType",
      "info" : "SimpleType[36861-36869]:SimpleType[36861-36869]"
    }, {
      "left" : "createEnumTypeFromNodes",
      "right" : "createEnumTypeFromNodes",
      "info" : "SimpleName[36870-36893]:SimpleName[36870-36893]"
    }, {
      "left" : "Node rValue",
      "right" : "Node rValue",
      "info" : "SingleVariableDeclaration[36894-36905]:SingleVariableDeclaration[36894-36905]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[36907-36918]:SingleVariableDeclaration[36907-36918]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[36928-36942]:SingleVariableDeclaration[36928-36942]"
    }, {
      "left" : "Node lValueNode",
      "right" : "Node lValueNode",
      "info" : "SingleVariableDeclaration[36944-36959]:SingleVariableDeclaration[36944-36959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36961-38489]:Block[36961-38489]"
    }, {
      "left" : "Preconditions.checkNotNull(info);",
      "right" : "Preconditions.checkNotNull(info);",
      "info" : "ExpressionStatement[36969-37002]:ExpressionStatement[36969-37002]"
    }, {
      "left" : "Preconditions.checkState(info.hasEnumParameterType());",
      "right" : "Preconditions.checkState(info.hasEnumParameterType());",
      "info" : "ExpressionStatement[37009-37063]:ExpressionStatement[37009-37063]"
    }, {
      "left" : "EnumType enumType = null;",
      "right" : "EnumType enumType = null;",
      "info" : "VariableDeclarationStatement[37071-37096]:VariableDeclarationStatement[37071-37096]"
    }, {
      "left" : "if (rValue != null && rValue.isQualifiedName())",
      "right" : "if (rValue != null && rValue.isQualifiedName())",
      "info" : "IfStatement[37103-37375]:IfStatement[37103-37375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37151-37375]:Block[37151-37375]"
    }, {
      "left" : "Var var = scope.getVar(rValue.getQualifiedName());",
      "right" : "Var var = scope.getVar(rValue.getQualifiedName());",
      "info" : "VariableDeclarationStatement[37196-37246]:VariableDeclarationStatement[37196-37246]"
    }, {
      "left" : "if (var != null && var.getType() instanceof EnumType)",
      "right" : "if (var != null && var.getType() instanceof EnumType)",
      "info" : "IfStatement[37255-37367]:IfStatement[37255-37367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37309-37367]:Block[37309-37367]"
    }, {
      "left" : "enumType = (EnumType) var.getType();",
      "right" : "enumType = (EnumType) var.getType();",
      "info" : "ExpressionStatement[37321-37357]:ExpressionStatement[37321-37357]"
    }, {
      "left" : "if (enumType == null)",
      "right" : "if (enumType == null)",
      "info" : "IfStatement[37383-38336]:IfStatement[37383-38336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37405-38336]:Block[37405-38336]"
    }, {
      "left" : "JSType elementsType =\n            info.getEnumParameterType().evaluate(scope, typeRegistry);",
      "right" : "JSType elementsType =\n            info.getEnumParameterType().evaluate(scope, typeRegistry);",
      "info" : "VariableDeclarationStatement[37415-37507]:VariableDeclarationStatement[37415-37507]"
    }, {
      "left" : "enumType = typeRegistry.createEnumType(name, rValue, elementsType);",
      "right" : "enumType = typeRegistry.createEnumType(name, rValue, elementsType);",
      "info" : "ExpressionStatement[37516-37583]:ExpressionStatement[37516-37583]"
    }, {
      "left" : "if (rValue != null && rValue.isObjectLit())",
      "right" : "if (rValue != null && rValue.isObjectLit())",
      "info" : "IfStatement[37593-38328]:IfStatement[37593-38328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37637-38328]:Block[37637-38328]"
    }, {
      "left" : "Node key = rValue.getFirstChild();",
      "right" : "Node key = rValue.getFirstChild();",
      "info" : "VariableDeclarationStatement[37684-37718]:VariableDeclarationStatement[37684-37718]"
    }, {
      "left" : "while (key != null)",
      "right" : "while (key != null)",
      "info" : "WhileStatement[37729-38318]:WhileStatement[37729-38318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37749-38318]:Block[37749-38318]"
    }, {
      "left" : "String keyName = NodeUtil.getStringValue(key);",
      "right" : "String keyName = NodeUtil.getStringValue(key);",
      "info" : "VariableDeclarationStatement[37763-37809]:VariableDeclarationStatement[37763-37809]"
    }, {
      "left" : "if (keyName == null)",
      "right" : "if (keyName == null)",
      "info" : "IfStatement[37822-38273]:IfStatement[37822-38273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37843-38023]:Block[37843-38023]"
    }, {
      "left" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
      "right" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
      "info" : "ExpressionStatement[37915-38009]:ExpressionStatement[37915-38009]"
    }, {
      "left" : "if (!codingConvention.isValidEnumKey(keyName))",
      "right" : "if (!codingConvention.isValidEnumKey(keyName))",
      "info" : "IfStatement[38029-38273]:IfStatement[38029-38273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38076-38200]:Block[38076-38200]"
    }, {
      "left" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
      "right" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
      "info" : "ExpressionStatement[38092-38186]:ExpressionStatement[38092-38186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38206-38273]:Block[38206-38273]"
    }, {
      "left" : "enumType.defineElement(keyName, key);",
      "right" : "enumType.defineElement(keyName, key);",
      "info" : "ExpressionStatement[38222-38259]:ExpressionStatement[38222-38259]"
    }, {
      "left" : "key = key.getNext();",
      "right" : "key = key.getNext();",
      "info" : "ExpressionStatement[38286-38306]:ExpressionStatement[38286-38306]"
    }, {
      "left" : "if (name != null && scope.isGlobal())",
      "right" : "if (name != null && scope.isGlobal())",
      "info" : "IfStatement[38344-38459]:IfStatement[38344-38459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38382-38459]:Block[38382-38459]"
    }, {
      "left" : "typeRegistry.declareType(name, enumType.getElementsType());",
      "right" : "typeRegistry.declareType(name, enumType.getElementsType());",
      "info" : "ExpressionStatement[38392-38451]:ExpressionStatement[38392-38451]"
    }, {
      "left" : "return enumType;",
      "right" : "return enumType;",
      "info" : "ReturnStatement[38467-38483]:ReturnStatement[38467-38483]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[38899-38906]:Modifier[38899-38906]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[38907-38911]:PrimitiveType[38907-38911]"
    }, {
      "left" : "defineSlot",
      "right" : "defineSlot",
      "info" : "SimpleName[38912-38922]:SimpleName[38912-38922]"
    }, {
      "left" : "Node name",
      "right" : "Node name",
      "info" : "SingleVariableDeclaration[38923-38932]:SingleVariableDeclaration[38923-38932]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[38934-38945]:SingleVariableDeclaration[38934-38945]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[38947-38958]:SingleVariableDeclaration[38947-38958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38960-39019]:Block[38960-39019]"
    }, {
      "left" : "defineSlot(name, parent, type, type == null);",
      "right" : "defineSlot(name, parent, type, type == null);",
      "info" : "ExpressionStatement[38968-39013]:ExpressionStatement[38968-39013]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[39508-39512]:PrimitiveType[39508-39512]"
    }, {
      "left" : "defineSlot",
      "right" : "defineSlot",
      "info" : "SimpleName[39513-39523]:SimpleName[39513-39523]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[39524-39530]:SingleVariableDeclaration[39524-39530]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[39532-39543]:SingleVariableDeclaration[39532-39543]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[39545-39556]:SingleVariableDeclaration[39545-39556]"
    }, {
      "left" : "boolean inferred",
      "right" : "boolean inferred",
      "info" : "SingleVariableDeclaration[39558-39574]:SingleVariableDeclaration[39558-39574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39576-40203]:Block[39576-40203]"
    }, {
      "left" : "Preconditions.checkArgument(inferred || type != null);",
      "right" : "Preconditions.checkArgument(inferred || type != null);",
      "info" : "ExpressionStatement[39584-39638]:ExpressionStatement[39584-39638]"
    }, {
      "left" : "if (n.isName())",
      "right" : "if (n.isName())",
      "info" : "IfStatement[39783-40130]:IfStatement[39783-40130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39799-39977]:Block[39799-39977]"
    }, {
      "left" : "Preconditions.checkArgument(\n            parent.isFunction() ||\n            parent.isVar() ||\n            parent.isParamList() ||\n            parent.isCatch());",
      "right" : "Preconditions.checkArgument(\n            parent.isFunction() ||\n            parent.isVar() ||\n            parent.isParamList() ||\n            parent.isCatch());",
      "info" : "ExpressionStatement[39809-39969]:ExpressionStatement[39809-39969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39983-40130]:Block[39983-40130]"
    }, {
      "left" : "Preconditions.checkArgument(\n            n.isGetProp() &&\n            (parent.isAssign() ||\n             parent.isExprResult()));",
      "right" : "Preconditions.checkArgument(\n            n.isGetProp() &&\n            (parent.isAssign() ||\n             parent.isExprResult()));",
      "info" : "ExpressionStatement[39993-40122]:ExpressionStatement[39993-40122]"
    }, {
      "left" : "defineSlot(n, parent, n.getQualifiedName(), type, inferred);",
      "right" : "defineSlot(n, parent, n.getQualifiedName(), type, inferred);",
      "info" : "ExpressionStatement[40137-40197]:ExpressionStatement[40137-40197]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[40639-40643]:PrimitiveType[40639-40643]"
    }, {
      "left" : "defineSlot",
      "right" : "defineSlot",
      "info" : "SimpleName[40644-40654]:SimpleName[40644-40654]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[40655-40661]:SingleVariableDeclaration[40655-40661]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[40663-40674]:SingleVariableDeclaration[40663-40674]"
    }, {
      "left" : "String variableName",
      "right" : "String variableName",
      "info" : "SingleVariableDeclaration[40676-40695]:SingleVariableDeclaration[40676-40695]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[40705-40716]:SingleVariableDeclaration[40705-40716]"
    }, {
      "left" : "boolean inferred",
      "right" : "boolean inferred",
      "info" : "SingleVariableDeclaration[40718-40734]:SingleVariableDeclaration[40718-40734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40736-46440]:Block[40736-46440]"
    }, {
      "left" : "Preconditions.checkArgument(!variableName.isEmpty());",
      "right" : "Preconditions.checkArgument(!variableName.isEmpty());",
      "info" : "ExpressionStatement[40744-40797]:ExpressionStatement[40744-40797]"
    }, {
      "left" : "boolean isGlobalVar = n.isName() && scope.isGlobal();",
      "right" : "boolean isGlobalVar = n.isName() && scope.isGlobal();",
      "info" : "VariableDeclarationStatement[40805-40858]:VariableDeclarationStatement[40805-40858]"
    }, {
      "left" : "boolean shouldDeclareOnGlobalThis =\n          isGlobalVar &&\n          (parent.isVar() ||\n           parent.isFunction());",
      "right" : "boolean shouldDeclareOnGlobalThis =\n          isGlobalVar &&\n          (parent.isVar() ||\n           parent.isFunction());",
      "info" : "VariableDeclarationStatement[40865-40987]:VariableDeclarationStatement[40865-40987]"
    }, {
      "left" : "Scope scopeToDeclareIn = scope;",
      "right" : "Scope scopeToDeclareIn = scope;",
      "info" : "VariableDeclarationStatement[41195-41226]:VariableDeclarationStatement[41195-41226]"
    }, {
      "left" : "if (n.isGetProp() && !scope.isGlobal() &&\n          isQnameRootedInGlobalScope(n))",
      "right" : "if (n.isGetProp() && !scope.isGlobal() &&\n          isQnameRootedInGlobalScope(n))",
      "info" : "IfStatement[41233-41614]:IfStatement[41233-41614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41316-41614]:Block[41316-41614]"
    }, {
      "left" : "Scope globalScope = scope.getGlobalScope();",
      "right" : "Scope globalScope = scope.getGlobalScope();",
      "info" : "VariableDeclarationStatement[41326-41369]:VariableDeclarationStatement[41326-41369]"
    }, {
      "left" : "if (!globalScope.isDeclared(variableName, false))",
      "right" : "if (!globalScope.isDeclared(variableName, false))",
      "info" : "IfStatement[41492-41606]:IfStatement[41492-41606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41542-41606]:Block[41542-41606]"
    }, {
      "left" : "scopeToDeclareIn = scope.getGlobalScope();",
      "right" : "scopeToDeclareIn = scope.getGlobalScope();",
      "info" : "ExpressionStatement[41554-41596]:ExpressionStatement[41554-41596]"
    }, {
      "left" : "boolean isExtern = n.isFromExterns();",
      "right" : "boolean isExtern = n.isFromExterns();",
      "info" : "VariableDeclarationStatement[41739-41776]:VariableDeclarationStatement[41739-41776]"
    }, {
      "left" : "Var newVar = null;",
      "right" : "Var newVar = null;",
      "info" : "VariableDeclarationStatement[41783-41801]:VariableDeclarationStatement[41783-41801]"
    }, {
      "left" : "CompilerInput input = compiler.getInput(inputId);",
      "right" : "CompilerInput input = compiler.getInput(inputId);",
      "info" : "VariableDeclarationStatement[41845-41894]:VariableDeclarationStatement[41845-41894]"
    }, {
      "left" : "if (scopeToDeclareIn.isDeclared(variableName, false))",
      "right" : "if (scopeToDeclareIn.isDeclared(variableName, false))",
      "info" : "IfStatement[41901-42704]:IfStatement[41901-42704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41955-42148]:Block[41955-42148]"
    }, {
      "left" : "Var oldVar = scopeToDeclareIn.getVar(variableName);",
      "right" : "Var oldVar = scopeToDeclareIn.getVar(variableName);",
      "info" : "VariableDeclarationStatement[41965-42016]:VariableDeclarationStatement[41965-42016]"
    }, {
      "left" : "newVar = validator.expectUndeclaredVariable(\n            sourceName, input, n, parent, oldVar, variableName, type);",
      "right" : "newVar = validator.expectUndeclaredVariable(\n            sourceName, input, n, parent, oldVar, variableName, type);",
      "info" : "ExpressionStatement[42025-42140]:ExpressionStatement[42025-42140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42154-42704]:Block[42154-42704]"
    }, {
      "left" : "if (!inferred)",
      "right" : "if (!inferred)",
      "info" : "IfStatement[42164-42226]:IfStatement[42164-42226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42179-42226]:Block[42179-42226]"
    }, {
      "left" : "setDeferredType(n, type);",
      "right" : "setDeferredType(n, type);",
      "info" : "ExpressionStatement[42191-42216]:ExpressionStatement[42191-42216]"
    }, {
      "left" : "newVar =\n          scopeToDeclareIn.declare(variableName, n, type, input, inferred);",
      "right" : "newVar =\n          scopeToDeclareIn.declare(variableName, n, type, input, inferred);",
      "info" : "ExpressionStatement[42236-42320]:ExpressionStatement[42236-42320]"
    }, {
      "left" : "if (type instanceof EnumType)",
      "right" : "if (type instanceof EnumType)",
      "info" : "IfStatement[42330-42696]:IfStatement[42330-42696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42360-42696]:Block[42360-42696]"
    }, {
      "left" : "Node initialValue = newVar.getInitialValue();",
      "right" : "Node initialValue = newVar.getInitialValue();",
      "info" : "VariableDeclarationStatement[42372-42417]:VariableDeclarationStatement[42372-42417]"
    }, {
      "left" : "boolean isValidValue = initialValue != null &&\n              (initialValue.isObjectLit() ||\n               initialValue.isQualifiedName());",
      "right" : "boolean isValidValue = initialValue != null &&\n              (initialValue.isObjectLit() ||\n               initialValue.isQualifiedName());",
      "info" : "VariableDeclarationStatement[42428-42567]:VariableDeclarationStatement[42428-42567]"
    }, {
      "left" : "if (!isValidValue)",
      "right" : "if (!isValidValue)",
      "info" : "IfStatement[42578-42686]:IfStatement[42578-42686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42597-42686]:Block[42597-42686]"
    }, {
      "left" : "compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));",
      "right" : "compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));",
      "info" : "ExpressionStatement[42611-42674]:ExpressionStatement[42611-42674]"
    }, {
      "left" : "FunctionType fnType = JSType.toMaybeFunctionType(type);",
      "right" : "FunctionType fnType = JSType.toMaybeFunctionType(type);",
      "info" : "VariableDeclarationStatement[42789-42844]:VariableDeclarationStatement[42789-42844]"
    }, {
      "left" : "if (fnType != null &&\n          // We don't want to look at empty function types.\n          !type.isEmptyType())",
      "right" : "if (fnType != null &&\n          // We don't want to look at empty function types.\n          !type.isEmptyType())",
      "info" : "IfStatement[42851-45497]:IfStatement[42851-45497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42964-45497]:Block[42964-45497]"
    }, {
      "left" : "if ((fnType.isConstructor() || fnType.isInterface()) &&\n            !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE)))",
      "right" : "if ((fnType.isConstructor() || fnType.isInterface()) &&\n            !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE)))",
      "info" : "IfStatement[42974-45489]:IfStatement[42974-45489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43095-45489]:Block[43095-45489]"
    }, {
      "left" : "FunctionType superClassCtor = fnType.getSuperClassConstructor();",
      "right" : "FunctionType superClassCtor = fnType.getSuperClassConstructor();",
      "info" : "VariableDeclarationStatement[43162-43226]:VariableDeclarationStatement[43162-43226]"
    }, {
      "left" : "ObjectType.Property prototypeSlot = fnType.getSlot(\"prototype\");",
      "right" : "ObjectType.Property prototypeSlot = fnType.getSlot(\"prototype\");",
      "info" : "VariableDeclarationStatement[43237-43301]:VariableDeclarationStatement[43237-43301]"
    }, {
      "left" : "prototypeSlot.setNode(n);",
      "right" : "prototypeSlot.setNode(n);",
      "info" : "ExpressionStatement[43762-43787]:ExpressionStatement[43762-43787]"
    }, {
      "left" : "String prototypeName = variableName + \".prototype\";",
      "right" : "String prototypeName = variableName + \".prototype\";",
      "info" : "VariableDeclarationStatement[43799-43850]:VariableDeclarationStatement[43799-43850]"
    }, {
      "left" : "Var prototypeVar = scopeToDeclareIn.getVar(prototypeName);",
      "right" : "Var prototypeVar = scopeToDeclareIn.getVar(prototypeName);",
      "info" : "VariableDeclarationStatement[44082-44140]:VariableDeclarationStatement[44082-44140]"
    }, {
      "left" : "if (prototypeVar != null && prototypeVar.scope == scopeToDeclareIn)",
      "right" : "if (prototypeVar != null && prototypeVar.scope == scopeToDeclareIn)",
      "info" : "IfStatement[44151-44286]:IfStatement[44151-44286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44219-44286]:Block[44219-44286]"
    }, {
      "left" : "scopeToDeclareIn.undeclare(prototypeVar);",
      "right" : "scopeToDeclareIn.undeclare(prototypeVar);",
      "info" : "ExpressionStatement[44233-44274]:ExpressionStatement[44233-44274]"
    }, {
      "left" : "scopeToDeclareIn.declare(prototypeName,\n              n, prototypeSlot.getType(), input,\n              /* declared iff there's an explicit supertype */\n              superClassCtor == null ||\n              superClassCtor.getInstanceType().equals(\n                  getNativeType(OBJECT_TYPE)));",
      "right" : "scopeToDeclareIn.declare(prototypeName,\n              n, prototypeSlot.getType(), input,\n              /* declared iff there's an explicit supertype */\n              superClassCtor == null ||\n              superClassCtor.getInstanceType().equals(\n                  getNativeType(OBJECT_TYPE)));",
      "info" : "ExpressionStatement[44298-44592]:ExpressionStatement[44298-44592]"
    }, {
      "left" : "if (newVar.getInitialValue() == null &&\n              !isExtern &&\n              // We want to make sure that when we declare a new instance\n              // type (with @constructor) that there's actually a ctor for it.\n              // This doesn't apply to structural constructors\n              // (like function(new:Array). Checking the constructed\n              // type against the variable name is a sufficient check for\n              // this.\n              variableName.equals(\n                  fnType.getInstanceType().getReferenceName()))",
      "right" : "if (newVar.getInitialValue() == null &&\n              !isExtern &&\n              // We want to make sure that when we declare a new instance\n              // type (with @constructor) that there's actually a ctor for it.\n              // This doesn't apply to structural constructors\n              // (like function(new:Array). Checking the constructed\n              // type against the variable name is a sufficient check for\n              // this.\n              variableName.equals(\n                  fnType.getInstanceType().getReferenceName()))",
      "info" : "IfStatement[44706-45479]:IfStatement[44706-45479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45254-45479]:Block[45254-45479]"
    }, {
      "left" : "compiler.report(\n                JSError.make(sourceName, n,\n                    fnType.isConstructor() ?\n                    CTOR_INITIALIZER : IFACE_INITIALIZER,\n                    variableName));",
      "right" : "compiler.report(\n                JSError.make(sourceName, n,\n                    fnType.isConstructor() ?\n                    CTOR_INITIALIZER : IFACE_INITIALIZER,\n                    variableName));",
      "info" : "ExpressionStatement[45268-45467]:ExpressionStatement[45268-45467]"
    }, {
      "left" : "if (shouldDeclareOnGlobalThis)",
      "right" : "if (shouldDeclareOnGlobalThis)",
      "info" : "IfStatement[45505-45932]:IfStatement[45505-45932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45536-45932]:Block[45536-45932]"
    }, {
      "left" : "ObjectType globalThis =\n            typeRegistry.getNativeObjectType(GLOBAL_THIS);",
      "right" : "ObjectType globalThis =\n            typeRegistry.getNativeObjectType(GLOBAL_THIS);",
      "info" : "VariableDeclarationStatement[45546-45628]:VariableDeclarationStatement[45546-45628]"
    }, {
      "left" : "if (inferred)",
      "right" : "if (inferred)",
      "info" : "IfStatement[45637-45924]:IfStatement[45637-45924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45651-45839]:Block[45651-45839]"
    }, {
      "left" : "globalThis.defineInferredProperty(variableName,\n              type == null ?\n              getNativeType(JSTypeNative.NO_TYPE) :\n              type,\n              n);",
      "right" : "globalThis.defineInferredProperty(variableName,\n              type == null ?\n              getNativeType(JSTypeNative.NO_TYPE) :\n              type,\n              n);",
      "info" : "ExpressionStatement[45663-45829]:ExpressionStatement[45663-45829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45845-45924]:Block[45845-45924]"
    }, {
      "left" : "globalThis.defineDeclaredProperty(variableName, type, n);",
      "right" : "globalThis.defineDeclaredProperty(variableName, type, n);",
      "info" : "ExpressionStatement[45857-45914]:ExpressionStatement[45857-45914]"
    }, {
      "left" : "if (isGlobalVar && \"Window\".equals(variableName)\n          && type != null\n          && type.isFunctionType()\n          && type.isConstructor())",
      "right" : "if (isGlobalVar && \"Window\".equals(variableName)\n          && type != null\n          && type.isFunctionType()\n          && type.isConstructor())",
      "info" : "IfStatement[45940-46434]:IfStatement[45940-46434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46085-46434]:Block[46085-46434]"
    }, {
      "left" : "FunctionType globalThisCtor =\n            typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();",
      "right" : "FunctionType globalThisCtor =\n            typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();",
      "info" : "VariableDeclarationStatement[46095-46200]:VariableDeclarationStatement[46095-46200]"
    }, {
      "left" : "globalThisCtor.getInstanceType().clearCachedValues();",
      "right" : "globalThisCtor.getInstanceType().clearCachedValues();",
      "info" : "ExpressionStatement[46209-46262]:ExpressionStatement[46209-46262]"
    }, {
      "left" : "globalThisCtor.getPrototype().clearCachedValues();",
      "right" : "globalThisCtor.getPrototype().clearCachedValues();",
      "info" : "ExpressionStatement[46271-46321]:ExpressionStatement[46271-46321]"
    }, {
      "left" : "globalThisCtor\n            .setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());",
      "right" : "globalThisCtor\n            .setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());",
      "info" : "ExpressionStatement[46330-46426]:ExpressionStatement[46330-46426]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[46538-46545]:Modifier[46538-46545]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[46546-46553]:PrimitiveType[46546-46553]"
    }, {
      "left" : "isQnameRootedInGlobalScope",
      "right" : "isQnameRootedInGlobalScope",
      "info" : "SimpleName[46554-46580]:SimpleName[46554-46580]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[46581-46587]:SingleVariableDeclaration[46581-46587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46589-46686]:Block[46589-46686]"
    }, {
      "left" : "Scope scope = getQnameRootScope(n);",
      "right" : "Scope scope = getQnameRootScope(n);",
      "info" : "VariableDeclarationStatement[46597-46632]:VariableDeclarationStatement[46597-46632]"
    }, {
      "left" : "return scope != null && scope.isGlobal();",
      "right" : "return scope != null && scope.isGlobal();",
      "info" : "ReturnStatement[46639-46680]:ReturnStatement[46639-46680]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[46764-46771]:Modifier[46764-46771]"
    }, {
      "left" : "Scope",
      "right" : "Scope",
      "info" : "SimpleType[46772-46777]:SimpleType[46772-46777]"
    }, {
      "left" : "getQnameRootScope",
      "right" : "getQnameRootScope",
      "info" : "SimpleName[46778-46795]:SimpleName[46778-46795]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[46796-46802]:SingleVariableDeclaration[46796-46802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46804-47039]:Block[46804-47039]"
    }, {
      "left" : "Node root = NodeUtil.getRootOfQualifiedName(n);",
      "right" : "Node root = NodeUtil.getRootOfQualifiedName(n);",
      "info" : "VariableDeclarationStatement[46812-46859]:VariableDeclarationStatement[46812-46859]"
    }, {
      "left" : "if (root.isName())",
      "right" : "if (root.isName())",
      "info" : "IfStatement[46866-47014]:IfStatement[46866-47014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46885-47014]:Block[46885-47014]"
    }, {
      "left" : "Var var = scope.getVar(root.getString());",
      "right" : "Var var = scope.getVar(root.getString());",
      "info" : "VariableDeclarationStatement[46895-46936]:VariableDeclarationStatement[46895-46936]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[46945-47006]:IfStatement[46945-47006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46962-47006]:Block[46962-47006]"
    }, {
      "left" : "return var.getScope();",
      "right" : "return var.getScope();",
      "info" : "ReturnStatement[46974-46996]:ReturnStatement[46974-46996]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[47021-47033]:ReturnStatement[47021-47033]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[47394-47401]:Modifier[47394-47401]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[47402-47408]:SimpleType[47402-47408]"
    }, {
      "left" : "getDeclaredType",
      "right" : "getDeclaredType",
      "info" : "SimpleName[47409-47424]:SimpleName[47409-47424]"
    }, {
      "left" : "String sourceName",
      "right" : "String sourceName",
      "info" : "SingleVariableDeclaration[47425-47442]:SingleVariableDeclaration[47425-47442]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[47444-47458]:SingleVariableDeclaration[47444-47458]"
    }, {
      "left" : "Node lValue",
      "right" : "Node lValue",
      "info" : "SingleVariableDeclaration[47468-47479]:SingleVariableDeclaration[47468-47479]"
    }, {
      "left" : "@Nullable Node rValue",
      "right" : "@Nullable Node rValue",
      "info" : "SingleVariableDeclaration[47481-47502]:SingleVariableDeclaration[47481-47502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47504-49712]:Block[47504-49936]"
    }, {
      "left" : "if (info != null && info.hasType())",
      "right" : "if (info != null && info.hasType())",
      "info" : "IfStatement[47512-49637]:IfStatement[47512-49861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47548-47627]:Block[47548-47627]"
    }, {
      "left" : "return getDeclaredTypeInAnnotation(sourceName, lValue, info);",
      "right" : "return getDeclaredTypeInAnnotation(sourceName, lValue, info);",
      "info" : "ReturnStatement[47558-47619]:ReturnStatement[47558-47619]"
    }, {
      "left" : "if (rValue != null && rValue.isFunction() &&\n          shouldUseFunctionLiteralType(\n              JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue))",
      "right" : "if (rValue != null && rValue.isFunction() &&\n          shouldUseFunctionLiteralType(\n              JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue))",
      "info" : "IfStatement[47633-49637]:IfStatement[47633-49861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47795-47839]:Block[47795-47839]"
    }, {
      "left" : "return rValue.getJSType();",
      "right" : "return rValue.getJSType();",
      "info" : "ReturnStatement[47805-47831]:ReturnStatement[47805-47831]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[47845-49637]:IfStatement[47845-49861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47863-49637]:Block[47863-49861]"
    }, {
      "left" : "if (info.hasEnumParameterType())",
      "right" : "if (info.hasEnumParameterType())",
      "info" : "IfStatement[47873-49629]:IfStatement[47873-49853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47906-48153]:Block[47906-48153]"
    }, {
      "left" : "if (rValue != null && rValue.isObjectLit())",
      "right" : "if (rValue != null && rValue.isObjectLit())",
      "info" : "IfStatement[47918-48143]:IfStatement[47918-48143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47962-48014]:Block[47962-48014]"
    }, {
      "left" : "return rValue.getJSType();",
      "right" : "return rValue.getJSType();",
      "info" : "ReturnStatement[47976-48002]:ReturnStatement[47976-48002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48020-48143]:Block[48020-48143]"
    }, {
      "left" : "return createEnumTypeFromNodes(\n                rValue, lValue.getQualifiedName(), info, lValue);",
      "right" : "return createEnumTypeFromNodes(\n                rValue, lValue.getQualifiedName(), info, lValue);",
      "info" : "ReturnStatement[48034-48131]:ReturnStatement[48034-48131]"
    }, {
      "left" : "if (info.isConstructor() || info.isInterface())",
      "right" : "if (info.isConstructor() || info.isInterface())",
      "info" : "IfStatement[48159-49629]:IfStatement[48159-49853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48207-48328]:Block[48207-48328]"
    }, {
      "left" : "return createFunctionTypeFromNodes(\n              rValue, lValue.getQualifiedName(), info, lValue);",
      "right" : "return createFunctionTypeFromNodes(\n              rValue, lValue.getQualifiedName(), info, lValue);",
      "info" : "ReturnStatement[48219-48318]:ReturnStatement[48219-48318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48334-49629]:Block[48334-49853]"
    }, {
      "left" : "if (info.isConstant())",
      "right" : "if (info.isConstant())",
      "info" : "IfStatement[48414-49619]:IfStatement[48414-49843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48437-49619]:Block[48437-49843]"
    }, {
      "left" : "JSType knownType = null;",
      "right" : "JSType knownType = null;",
      "info" : "VariableDeclarationStatement[48451-48475]:VariableDeclarationStatement[48451-48475]"
    }, {
      "left" : "if (rValue != null)",
      "right" : "if (rValueInfo != null && rValueInfo.hasType())",
      "info" : "IfStatement[48488-49607]:IfStatement[48584-49817]"
    }, {
      "left" : "rValue != null",
      "right" : "rValue != null",
      "info" : "InfixExpression[48492-48506]:InfixExpression[48492-48506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48508-49607]:Block[48508-49831]"
    }, {
      "left" : "if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType())",
      "right" : "if (rValue.getJSType() != null\n                  && !rValue.getJSType().isUnknownType())",
      "info" : "IfStatement[48524-49593]:IfStatement[48810-49817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48595-48863]:Block[48899-49087]"
    }, {
      "left" : "return rValue.getJSType();",
      "right" : "return rValue.getJSType();",
      "info" : "ReturnStatement[48821-48847]:ReturnStatement[49045-49071]"
    }, {
      "left" : "if (rValue.isOr())",
      "right" : "if (rValue.isOr())",
      "info" : "IfStatement[48869-49593]:IfStatement[49093-49817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48888-49593]:Block[49112-49817]"
    }, {
      "left" : "Node firstClause = rValue.getFirstChild();",
      "right" : "Node firstClause = rValue.getFirstChild();",
      "info" : "VariableDeclarationStatement[49100-49142]:VariableDeclarationStatement[49324-49366]"
    }, {
      "left" : "Node secondClause = firstClause.getNext();",
      "right" : "Node secondClause = firstClause.getNext();",
      "info" : "VariableDeclarationStatement[49159-49201]:VariableDeclarationStatement[49383-49425]"
    }, {
      "left" : "boolean namesMatch = firstClause.isName()\n                    && lValue.isName()\n                    && firstClause.getString().equals(lValue.getString());",
      "right" : "boolean namesMatch = firstClause.isName()\n                    && lValue.isName()\n                    && firstClause.getString().equals(lValue.getString());",
      "info" : "VariableDeclarationStatement[49218-49373]:VariableDeclarationStatement[49442-49597]"
    }, {
      "left" : "if (namesMatch && secondClause.getJSType() != null\n                    && !secondClause.getJSType().isUnknownType())",
      "right" : "if (namesMatch && secondClause.getJSType() != null\n                    && !secondClause.getJSType().isUnknownType())",
      "info" : "IfStatement[49390-49577]:IfStatement[49614-49801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49507-49577]:Block[49731-49801]"
    }, {
      "left" : "return secondClause.getJSType();",
      "right" : "return secondClause.getJSType();",
      "info" : "ReturnStatement[49527-49559]:ReturnStatement[49751-49783]"
    }, {
      "left" : "return getDeclaredTypeInAnnotation(sourceName, lValue, info);",
      "right" : "return getDeclaredTypeInAnnotation(sourceName, lValue, info);",
      "info" : "ReturnStatement[49645-49706]:ReturnStatement[49869-49930]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49718-49725]:Modifier[49942-49949]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[49726-49738]:SimpleType[49950-49962]"
    }, {
      "left" : "getFunctionType",
      "right" : "getFunctionType",
      "info" : "SimpleName[49739-49754]:SimpleName[49963-49978]"
    }, {
      "left" : "@Nullable Var v",
      "right" : "@Nullable Var v",
      "info" : "SingleVariableDeclaration[49755-49770]:SingleVariableDeclaration[49979-49994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49772-49929]:Block[49996-50153]"
    }, {
      "left" : "JSType t = v == null ? null : v.getType();",
      "right" : "JSType t = v == null ? null : v.getType();",
      "info" : "VariableDeclarationStatement[49780-49822]:VariableDeclarationStatement[50004-50046]"
    }, {
      "left" : "ObjectType o = t == null ? null : t.dereference();",
      "right" : "ObjectType o = t == null ? null : t.dereference();",
      "info" : "VariableDeclarationStatement[49829-49879]:VariableDeclarationStatement[50053-50103]"
    }, {
      "left" : "return JSType.toMaybeFunctionType(o);",
      "right" : "return JSType.toMaybeFunctionType(o);",
      "info" : "ReturnStatement[49886-49923]:ReturnStatement[50110-50147]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[50022-50029]:Modifier[50246-50253]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[50030-50034]:PrimitiveType[50254-50258]"
    }, {
      "left" : "checkForCallingConventionDefiningCalls",
      "right" : "checkForCallingConventionDefiningCalls",
      "info" : "SimpleName[50035-50073]:SimpleName[50259-50297]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[50083-50089]:SingleVariableDeclaration[50307-50313]"
    }, {
      "left" : "Map<String, String> delegateCallingConventions",
      "right" : "Map<String, String> delegateCallingConventions",
      "info" : "SingleVariableDeclaration[50091-50137]:SingleVariableDeclaration[50315-50361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50139-50250]:Block[50363-50474]"
    }, {
      "left" : "codingConvention.checkForCallingConventionDefiningCalls(n,\n          delegateCallingConventions);",
      "right" : "codingConvention.checkForCallingConventionDefiningCalls(n,\n          delegateCallingConventions);",
      "info" : "ExpressionStatement[50147-50244]:ExpressionStatement[50371-50468]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[50453-50460]:Modifier[50677-50684]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[50461-50465]:PrimitiveType[50685-50689]"
    }, {
      "left" : "checkForClassDefiningCalls",
      "right" : "checkForClassDefiningCalls",
      "info" : "SimpleName[50466-50492]:SimpleName[50690-50716]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[50502-50517]:SingleVariableDeclaration[50726-50741]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[50519-50525]:SingleVariableDeclaration[50743-50749]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[50527-50538]:SingleVariableDeclaration[50751-50762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50540-53381]:Block[50764-53605]"
    }, {
      "left" : "SubclassRelationship relationship =\n          codingConvention.getClassesDefinedByCall(n);",
      "right" : "SubclassRelationship relationship =\n          codingConvention.getClassesDefinedByCall(n);",
      "info" : "VariableDeclarationStatement[50548-50638]:VariableDeclarationStatement[50772-50862]"
    }, {
      "left" : "if (relationship != null)",
      "right" : "if (relationship != null)",
      "info" : "IfStatement[50645-51814]:IfStatement[50869-52038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50671-51814]:Block[50895-52038]"
    }, {
      "left" : "FunctionType superCtor = getFunctionType(\n            scope.getVar(relationship.superclassName));",
      "right" : "FunctionType superCtor = getFunctionType(\n            scope.getVar(relationship.superclassName));",
      "info" : "VariableDeclarationStatement[50681-50778]:VariableDeclarationStatement[50905-51002]"
    }, {
      "left" : "FunctionType subCtor = getFunctionType(\n            scope.getVar(relationship.subclassName));",
      "right" : "FunctionType subCtor = getFunctionType(\n            scope.getVar(relationship.subclassName));",
      "info" : "VariableDeclarationStatement[50787-50880]:VariableDeclarationStatement[51011-51104]"
    }, {
      "left" : "if (superCtor != null && superCtor.isConstructor() &&\n            subCtor != null && subCtor.isConstructor())",
      "right" : "if (superCtor != null && superCtor.isConstructor() &&\n            subCtor != null && subCtor.isConstructor())",
      "info" : "IfStatement[50889-51806]:IfStatement[51113-52030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50999-51806]:Block[51223-52030]"
    }, {
      "left" : "ObjectType superClass = superCtor.getInstanceType();",
      "right" : "ObjectType superClass = superCtor.getInstanceType();",
      "info" : "VariableDeclarationStatement[51011-51063]:VariableDeclarationStatement[51235-51287]"
    }, {
      "left" : "ObjectType subClass = subCtor.getInstanceType();",
      "right" : "ObjectType subClass = subCtor.getInstanceType();",
      "info" : "VariableDeclarationStatement[51074-51122]:VariableDeclarationStatement[51298-51346]"
    }, {
      "left" : "superCtor = superClass.getConstructor();",
      "right" : "superCtor = superClass.getConstructor();",
      "info" : "ExpressionStatement[51320-51360]:ExpressionStatement[51544-51584]"
    }, {
      "left" : "subCtor = subClass.getConstructor();",
      "right" : "subCtor = subClass.getConstructor();",
      "info" : "ExpressionStatement[51371-51407]:ExpressionStatement[51595-51631]"
    }, {
      "left" : "if (relationship.type == SubclassType.INHERITS &&\n              !superClass.isEmptyType() && !subClass.isEmptyType())",
      "right" : "if (relationship.type == SubclassType.INHERITS &&\n              !superClass.isEmptyType() && !subClass.isEmptyType())",
      "info" : "IfStatement[51419-51617]:IfStatement[51643-51841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51537-51617]:Block[51761-51841]"
    }, {
      "left" : "validator.expectSuperType(t, n, superClass, subClass);",
      "right" : "validator.expectSuperType(t, n, superClass, subClass);",
      "info" : "ExpressionStatement[51551-51605]:ExpressionStatement[51775-51829]"
    }, {
      "left" : "if (superCtor != null && subCtor != null)",
      "right" : "if (superCtor != null && subCtor != null)",
      "info" : "IfStatement[51629-51796]:IfStatement[51853-52020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51671-51796]:Block[51895-52020]"
    }, {
      "left" : "codingConvention.applySubclassRelationship(\n                superCtor, subCtor, relationship.type);",
      "right" : "codingConvention.applySubclassRelationship(\n                superCtor, subCtor, relationship.type);",
      "info" : "ExpressionStatement[51685-51784]:ExpressionStatement[51909-52008]"
    }, {
      "left" : "String singletonGetterClassName =\n          codingConvention.getSingletonGetterClassName(n);",
      "right" : "String singletonGetterClassName =\n          codingConvention.getSingletonGetterClassName(n);",
      "info" : "VariableDeclarationStatement[51822-51914]:VariableDeclarationStatement[52046-52138]"
    }, {
      "left" : "if (singletonGetterClassName != null)",
      "right" : "if (singletonGetterClassName != null)",
      "info" : "IfStatement[51921-52444]:IfStatement[52145-52668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51959-52444]:Block[52183-52668]"
    }, {
      "left" : "ObjectType objectType = ObjectType.cast(\n            typeRegistry.getType(singletonGetterClassName));",
      "right" : "ObjectType objectType = ObjectType.cast(\n            typeRegistry.getType(singletonGetterClassName));",
      "info" : "VariableDeclarationStatement[51969-52070]:VariableDeclarationStatement[52193-52294]"
    }, {
      "left" : "if (objectType != null)",
      "right" : "if (objectType != null)",
      "info" : "IfStatement[52079-52436]:IfStatement[52303-52660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52103-52436]:Block[52327-52660]"
    }, {
      "left" : "FunctionType functionType = objectType.getConstructor();",
      "right" : "FunctionType functionType = objectType.getConstructor();",
      "info" : "VariableDeclarationStatement[52115-52171]:VariableDeclarationStatement[52339-52395]"
    }, {
      "left" : "if (functionType != null)",
      "right" : "if (functionType != null)",
      "info" : "IfStatement[52183-52426]:IfStatement[52407-52650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52209-52426]:Block[52433-52650]"
    }, {
      "left" : "FunctionType getterType =\n                typeRegistry.createFunctionType(objectType);",
      "right" : "FunctionType getterType =\n                typeRegistry.createFunctionType(objectType);",
      "info" : "VariableDeclarationStatement[52223-52309]:VariableDeclarationStatement[52447-52533]"
    }, {
      "left" : "codingConvention.applySingletonGetter(functionType, getterType,\n                objectType);",
      "right" : "codingConvention.applySingletonGetter(functionType, getterType,\n                objectType);",
      "info" : "ExpressionStatement[52322-52414]:ExpressionStatement[52546-52638]"
    }, {
      "left" : "DelegateRelationship delegateRelationship =\n          codingConvention.getDelegateRelationship(n);",
      "right" : "DelegateRelationship delegateRelationship =\n          codingConvention.getDelegateRelationship(n);",
      "info" : "VariableDeclarationStatement[52452-52550]:VariableDeclarationStatement[52676-52774]"
    }, {
      "left" : "if (delegateRelationship != null)",
      "right" : "if (delegateRelationship != null)",
      "info" : "IfStatement[52557-52657]:IfStatement[52781-52881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52591-52657]:Block[52815-52881]"
    }, {
      "left" : "applyDelegateRelationship(delegateRelationship);",
      "right" : "applyDelegateRelationship(delegateRelationship);",
      "info" : "ExpressionStatement[52601-52649]:ExpressionStatement[52825-52873]"
    }, {
      "left" : "ObjectLiteralCast objectLiteralCast =\n          codingConvention.getObjectLiteralCast(n);",
      "right" : "ObjectLiteralCast objectLiteralCast =\n          codingConvention.getObjectLiteralCast(n);",
      "info" : "VariableDeclarationStatement[52665-52754]:VariableDeclarationStatement[52889-52978]"
    }, {
      "left" : "if (objectLiteralCast != null)",
      "right" : "if (objectLiteralCast != null)",
      "info" : "IfStatement[52761-53375]:IfStatement[52985-53599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52792-53375]:Block[53016-53599]"
    }, {
      "left" : "if (objectLiteralCast.diagnosticType == null)",
      "right" : "if (objectLiteralCast.diagnosticType == null)",
      "info" : "IfStatement[52802-53367]:IfStatement[53026-53591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52848-53235]:Block[53072-53459]"
    }, {
      "left" : "ObjectType type = ObjectType.cast(\n              typeRegistry.getType(objectLiteralCast.typeName));",
      "right" : "ObjectType type = ObjectType.cast(\n              typeRegistry.getType(objectLiteralCast.typeName));",
      "info" : "VariableDeclarationStatement[52860-52959]:VariableDeclarationStatement[53084-53183]"
    }, {
      "left" : "if (type != null && type.getConstructor() != null)",
      "right" : "if (type != null && type.getConstructor() != null)",
      "info" : "IfStatement[52970-53225]:IfStatement[53194-53449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53021-53099]:Block[53245-53323]"
    }, {
      "left" : "setDeferredType(objectLiteralCast.objectNode, type);",
      "right" : "setDeferredType(objectLiteralCast.objectNode, type);",
      "info" : "ExpressionStatement[53035-53087]:ExpressionStatement[53259-53311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53105-53225]:Block[53329-53449]"
    }, {
      "left" : "compiler.report(JSError.make(t.getSourceName(), n,\n                    CONSTRUCTOR_EXPECTED));",
      "right" : "compiler.report(JSError.make(t.getSourceName(), n,\n                    CONSTRUCTOR_EXPECTED));",
      "info" : "ExpressionStatement[53119-53213]:ExpressionStatement[53343-53437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53241-53367]:Block[53465-53591]"
    }, {
      "left" : "compiler.report(JSError.make(t.getSourceName(), n,\n                  objectLiteralCast.diagnosticType));",
      "right" : "compiler.report(JSError.make(t.getSourceName(), n,\n                  objectLiteralCast.diagnosticType));",
      "info" : "ExpressionStatement[53253-53357]:ExpressionStatement[53477-53581]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[53465-53472]:Modifier[53689-53696]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[53473-53477]:PrimitiveType[53697-53701]"
    }, {
      "left" : "applyDelegateRelationship",
      "right" : "applyDelegateRelationship",
      "info" : "SimpleName[53478-53503]:SimpleName[53702-53727]"
    }, {
      "left" : "DelegateRelationship delegateRelationship",
      "right" : "DelegateRelationship delegateRelationship",
      "info" : "SingleVariableDeclaration[53513-53554]:SingleVariableDeclaration[53737-53778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53556-55298]:Block[53780-55522]"
    }, {
      "left" : "ObjectType delegatorObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegator));",
      "right" : "ObjectType delegatorObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegator));",
      "info" : "VariableDeclarationStatement[53564-53674]:VariableDeclarationStatement[53788-53898]"
    }, {
      "left" : "ObjectType delegateBaseObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegateBase));",
      "right" : "ObjectType delegateBaseObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegateBase));",
      "info" : "VariableDeclarationStatement[53681-53797]:VariableDeclarationStatement[53905-54021]"
    }, {
      "left" : "ObjectType delegateSuperObject = ObjectType.cast(\n          typeRegistry.getType(codingConvention.getDelegateSuperclassName()));",
      "right" : "ObjectType delegateSuperObject = ObjectType.cast(\n          typeRegistry.getType(codingConvention.getDelegateSuperclassName()));",
      "info" : "VariableDeclarationStatement[53804-53932]:VariableDeclarationStatement[54028-54156]"
    }, {
      "left" : "if (delegatorObject != null &&\n          delegateBaseObject != null &&\n          delegateSuperObject != null)",
      "right" : "if (delegatorObject != null &&\n          delegateBaseObject != null &&\n          delegateSuperObject != null)",
      "info" : "IfStatement[53939-55292]:IfStatement[54163-55516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54049-55292]:Block[54273-55516]"
    }, {
      "left" : "FunctionType delegatorCtor = delegatorObject.getConstructor();",
      "right" : "FunctionType delegatorCtor = delegatorObject.getConstructor();",
      "info" : "VariableDeclarationStatement[54059-54121]:VariableDeclarationStatement[54283-54345]"
    }, {
      "left" : "FunctionType delegateBaseCtor = delegateBaseObject.getConstructor();",
      "right" : "FunctionType delegateBaseCtor = delegateBaseObject.getConstructor();",
      "info" : "VariableDeclarationStatement[54130-54198]:VariableDeclarationStatement[54354-54422]"
    }, {
      "left" : "FunctionType delegateSuperCtor = delegateSuperObject.getConstructor();",
      "right" : "FunctionType delegateSuperCtor = delegateSuperObject.getConstructor();",
      "info" : "VariableDeclarationStatement[54207-54277]:VariableDeclarationStatement[54431-54501]"
    }, {
      "left" : "if (delegatorCtor != null && delegateBaseCtor != null &&\n            delegateSuperCtor != null)",
      "right" : "if (delegatorCtor != null && delegateBaseCtor != null &&\n            delegateSuperCtor != null)",
      "info" : "IfStatement[54287-55284]:IfStatement[54511-55508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54383-55284]:Block[54607-55508]"
    }, {
      "left" : "FunctionParamBuilder functionParamBuilder =\n              new FunctionParamBuilder(typeRegistry);",
      "right" : "FunctionParamBuilder functionParamBuilder =\n              new FunctionParamBuilder(typeRegistry);",
      "info" : "VariableDeclarationStatement[54395-54492]:VariableDeclarationStatement[54619-54716]"
    }, {
      "left" : "functionParamBuilder.addRequiredParams(\n              getNativeType(U2U_CONSTRUCTOR_TYPE));",
      "right" : "functionParamBuilder.addRequiredParams(\n              getNativeType(U2U_CONSTRUCTOR_TYPE));",
      "info" : "ExpressionStatement[54503-54594]:ExpressionStatement[54727-54818]"
    }, {
      "left" : "FunctionType findDelegate = typeRegistry.createFunctionType(\n              typeRegistry.createDefaultObjectUnion(delegateBaseObject),\n              functionParamBuilder.build());",
      "right" : "FunctionType findDelegate = typeRegistry.createFunctionType(\n              typeRegistry.createDefaultObjectUnion(delegateBaseObject),\n              functionParamBuilder.build());",
      "info" : "VariableDeclarationStatement[54605-54783]:VariableDeclarationStatement[54829-55007]"
    }, {
      "left" : "FunctionType delegateProxy = typeRegistry.createConstructorType(\n              delegateBaseObject.getReferenceName() + DELEGATE_PROXY_SUFFIX,\n              null, null, null);",
      "right" : "FunctionType delegateProxy = typeRegistry.createConstructorType(\n              delegateBaseObject.getReferenceName() + DELEGATE_PROXY_SUFFIX,\n              null, null, null);",
      "info" : "VariableDeclarationStatement[54795-54969]:VariableDeclarationStatement[55019-55193]"
    }, {
      "left" : "delegateProxy.setPrototypeBasedOn(delegateBaseObject);",
      "right" : "delegateProxy.setPrototypeBasedOn(delegateBaseObject);",
      "info" : "ExpressionStatement[54980-55034]:ExpressionStatement[55204-55258]"
    }, {
      "left" : "codingConvention.applyDelegateRelationship(\n              delegateSuperObject, delegateBaseObject, delegatorObject,\n              delegateProxy, findDelegate);",
      "right" : "codingConvention.applyDelegateRelationship(\n              delegateSuperObject, delegateBaseObject, delegatorObject,\n              delegateProxy, findDelegate);",
      "info" : "ExpressionStatement[55046-55205]:ExpressionStatement[55270-55429]"
    }, {
      "left" : "delegateProxyPrototypes.add(delegateProxy.getPrototype());",
      "right" : "delegateProxyPrototypes.add(delegateProxy.getPrototype());",
      "info" : "ExpressionStatement[55216-55274]:ExpressionStatement[55440-55498]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[55727-55731]:PrimitiveType[55951-55955]"
    }, {
      "left" : "maybeDeclareQualifiedName",
      "right" : "maybeDeclareQualifiedName",
      "info" : "SimpleName[55732-55757]:SimpleName[55956-55981]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[55758-55773]:SingleVariableDeclaration[55982-55997]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[55775-55789]:SingleVariableDeclaration[55999-56013]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[55799-55805]:SingleVariableDeclaration[56023-56029]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[55807-55818]:SingleVariableDeclaration[56031-56042]"
    }, {
      "left" : "Node rhsValue",
      "right" : "Node rhsValue",
      "info" : "SingleVariableDeclaration[55820-55833]:SingleVariableDeclaration[56044-56057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55835-60406]:Block[56059-60630]"
    }, {
      "left" : "Node ownerNode = n.getFirstChild();",
      "right" : "Node ownerNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[55843-55878]:VariableDeclarationStatement[56067-56102]"
    }, {
      "left" : "String ownerName = ownerNode.getQualifiedName();",
      "right" : "String ownerName = ownerNode.getQualifiedName();",
      "info" : "VariableDeclarationStatement[55885-55933]:VariableDeclarationStatement[56109-56157]"
    }, {
      "left" : "String qName = n.getQualifiedName();",
      "right" : "String qName = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[55940-55976]:VariableDeclarationStatement[56164-56200]"
    }, {
      "left" : "String propName = n.getLastChild().getString();",
      "right" : "String propName = n.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[55983-56030]:VariableDeclarationStatement[56207-56254]"
    }, {
      "left" : "Preconditions.checkArgument(qName != null && ownerName != null);",
      "right" : "Preconditions.checkArgument(qName != null && ownerName != null);",
      "info" : "ExpressionStatement[56037-56101]:ExpressionStatement[56261-56325]"
    }, {
      "left" : "JSType valueType = getDeclaredType(t.getSourceName(), info, n, rhsValue);",
      "right" : "JSType valueType = getDeclaredType(t.getSourceName(), info, n, rhsValue);",
      "info" : "VariableDeclarationStatement[56758-56831]:VariableDeclarationStatement[56982-57055]"
    }, {
      "left" : "if (valueType == null && rhsValue != null)",
      "right" : "if (valueType == null && rhsValue != null)",
      "info" : "IfStatement[56838-56967]:IfStatement[57062-57191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56881-56967]:Block[57105-57191]"
    }, {
      "left" : "valueType = rhsValue.getJSType();",
      "right" : "valueType = rhsValue.getJSType();",
      "info" : "ExpressionStatement[56926-56959]:ExpressionStatement[57150-57183]"
    }, {
      "left" : "if (\"prototype\".equals(propName))",
      "right" : "if (\"prototype\".equals(propName))",
      "info" : "IfStatement[57210-58465]:IfStatement[57434-58689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57244-58465]:Block[57468-58689]"
    }, {
      "left" : "Var qVar = scope.getVar(qName);",
      "right" : "Var qVar = scope.getVar(qName);",
      "info" : "VariableDeclarationStatement[57254-57285]:VariableDeclarationStatement[57478-57509]"
    }, {
      "left" : "if (qVar != null)",
      "right" : "if (qVar != null)",
      "info" : "IfStatement[57294-58457]:IfStatement[57518-58681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57312-58457]:Block[57536-58681]"
    }, {
      "left" : "ObjectType qVarType = ObjectType.cast(qVar.getType());",
      "right" : "ObjectType qVarType = ObjectType.cast(qVar.getType());",
      "info" : "VariableDeclarationStatement[57641-57695]:VariableDeclarationStatement[57865-57919]"
    }, {
      "left" : "if (qVarType != null &&\n              rhsValue != null &&\n              rhsValue.isObjectLit())",
      "right" : "if (qVarType != null &&\n              rhsValue != null &&\n              rhsValue.isObjectLit())",
      "info" : "IfStatement[57706-58358]:IfStatement[57930-58582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57802-57936]:Block[58026-58160]"
    }, {
      "left" : "typeRegistry.resetImplicitPrototype(\n                rhsValue.getJSType(), qVarType.getImplicitPrototype());",
      "right" : "typeRegistry.resetImplicitPrototype(\n                rhsValue.getJSType(), qVarType.getImplicitPrototype());",
      "info" : "ExpressionStatement[57816-57924]:ExpressionStatement[58040-58148]"
    }, {
      "left" : "if (!qVar.isTypeInferred())",
      "right" : "if (!qVar.isTypeInferred())",
      "info" : "IfStatement[57942-58358]:IfStatement[58166-58582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57970-58358]:Block[58194-58582]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[58339-58346]:ReturnStatement[58563-58570]"
    }, {
      "left" : "if (qVar.getScope() == scope)",
      "right" : "if (qVar.getScope() == scope)",
      "info" : "IfStatement[58369-58447]:IfStatement[58593-58671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58399-58447]:Block[58623-58671]"
    }, {
      "left" : "scope.undeclare(qVar);",
      "right" : "scope.undeclare(qVar);",
      "info" : "ExpressionStatement[58413-58435]:ExpressionStatement[58637-58659]"
    }, {
      "left" : "if (valueType == null)",
      "right" : "if (valueType == null)",
      "info" : "IfStatement[58473-58728]:IfStatement[58697-58952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58496-58728]:Block[58720-58952]"
    }, {
      "left" : "if (parent.isExprResult())",
      "right" : "if (parent.isExprResult())",
      "info" : "IfStatement[58506-58703]:IfStatement[58730-58927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58533-58703]:Block[58757-58927]"
    }, {
      "left" : "stubDeclarations.add(new StubDeclaration(\n              n,\n              t.getInput() != null && t.getInput().isExtern(),\n              ownerName));",
      "right" : "stubDeclarations.add(new StubDeclaration(\n              n,\n              t.getInput() != null && t.getInput().isExtern(),\n              ownerName));",
      "info" : "ExpressionStatement[58545-58693]:ExpressionStatement[58769-58917]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[58713-58720]:ReturnStatement[58937-58944]"
    }, {
      "left" : "boolean inferred = isQualifiedNameInferred(\n          qName, n, info, rhsValue, valueType);",
      "right" : "boolean inferred = isQualifiedNameInferred(\n          qName, n, info, rhsValue, valueType);",
      "info" : "VariableDeclarationStatement[58736-58827]:VariableDeclarationStatement[58960-59051]"
    }, {
      "left" : "if (!inferred)",
      "right" : "if (!inferred)",
      "info" : "IfStatement[58834-60400]:IfStatement[59058-60624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58849-59705]:Block[59073-59929]"
    }, {
      "left" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "right" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "info" : "VariableDeclarationStatement[58859-58907]:VariableDeclarationStatement[59083-59131]"
    }, {
      "left" : "if (ownerType != null)",
      "right" : "if (ownerType != null)",
      "info" : "IfStatement[58916-59512]:IfStatement[59140-59736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58939-59512]:Block[59163-59736]"
    }, {
      "left" : "boolean isExtern = t.getInput() != null && t.getInput().isExtern();",
      "right" : "boolean isExtern = t.getInput() != null && t.getInput().isExtern();",
      "info" : "VariableDeclarationStatement[59052-59119]:VariableDeclarationStatement[59276-59343]"
    }, {
      "left" : "if ((!ownerType.hasOwnProperty(propName) ||\n               ownerType.isPropertyTypeInferred(propName)) &&\n              ((isExtern && !ownerType.isNativeObjectType()) ||\n               !ownerType.isInstanceType()))",
      "right" : "if ((!ownerType.hasOwnProperty(propName) ||\n               ownerType.isPropertyTypeInferred(propName)) &&\n              ((isExtern && !ownerType.isNativeObjectType()) ||\n               !ownerType.isInstanceType()))",
      "info" : "IfStatement[59130-59502]:IfStatement[59354-59726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59345-59502]:Block[59569-59726]"
    }, {
      "left" : "ownerType.defineDeclaredProperty(propName, valueType, n);",
      "right" : "ownerType.defineDeclaredProperty(propName, valueType, n);",
      "info" : "ExpressionStatement[59433-59490]:ExpressionStatement[59657-59714]"
    }, {
      "left" : "defineSlot(n, parent, valueType, inferred);",
      "right" : "defineSlot(n, parent, valueType, inferred);",
      "info" : "ExpressionStatement[59654-59697]:ExpressionStatement[59878-59921]"
    }, {
      "left" : "if (rhsValue != null && rhsValue.isTrue())",
      "right" : "if (rhsValue != null && rhsValue.isTrue())",
      "info" : "IfStatement[59711-60400]:IfStatement[59935-60624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59754-60400]:Block[59978-60624]"
    }, {
      "left" : "FunctionType ownerType =\n            JSType.toMaybeFunctionType(getObjectSlot(ownerName));",
      "right" : "FunctionType ownerType =\n            JSType.toMaybeFunctionType(getObjectSlot(ownerName));",
      "info" : "VariableDeclarationStatement[59830-59920]:VariableDeclarationStatement[60054-60144]"
    }, {
      "left" : "if (ownerType != null)",
      "right" : "if (ownerType != null)",
      "info" : "IfStatement[59929-60392]:IfStatement[60153-60616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59952-60392]:Block[60176-60616]"
    }, {
      "left" : "JSType ownerTypeOfThis = ownerType.getTypeOfThis();",
      "right" : "JSType ownerTypeOfThis = ownerType.getTypeOfThis();",
      "info" : "VariableDeclarationStatement[59964-60015]:VariableDeclarationStatement[60188-60239]"
    }, {
      "left" : "String delegateName = codingConvention.getDelegateSuperclassName();",
      "right" : "String delegateName = codingConvention.getDelegateSuperclassName();",
      "info" : "VariableDeclarationStatement[60026-60093]:VariableDeclarationStatement[60250-60317]"
    }, {
      "left" : "JSType delegateType = delegateName == null ?\n              null : typeRegistry.getType(delegateName);",
      "right" : "JSType delegateType = delegateName == null ?\n              null : typeRegistry.getType(delegateName);",
      "info" : "VariableDeclarationStatement[60104-60205]:VariableDeclarationStatement[60328-60429]"
    }, {
      "left" : "if (delegateType != null &&\n              ownerTypeOfThis.isSubtype(delegateType))",
      "right" : "if (delegateType != null &&\n              ownerTypeOfThis.isSubtype(delegateType))",
      "info" : "IfStatement[60216-60382]:IfStatement[60440-60606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60299-60382]:Block[60523-60606]"
    }, {
      "left" : "defineSlot(n, parent, getNativeType(BOOLEAN_TYPE), true);",
      "right" : "defineSlot(n, parent, getNativeType(BOOLEAN_TYPE), true);",
      "info" : "ExpressionStatement[60313-60370]:ExpressionStatement[60537-60594]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[61439-61446]:Modifier[61663-61670]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[61447-61454]:PrimitiveType[61671-61678]"
    }, {
      "left" : "isQualifiedNameInferred",
      "right" : "isQualifiedNameInferred",
      "info" : "SimpleName[61455-61478]:SimpleName[61679-61702]"
    }, {
      "left" : "String qName",
      "right" : "String qName",
      "info" : "SingleVariableDeclaration[61488-61500]:SingleVariableDeclaration[61712-61724]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[61502-61508]:SingleVariableDeclaration[61726-61732]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[61510-61524]:SingleVariableDeclaration[61734-61748]"
    }, {
      "left" : "Node rhsValue",
      "right" : "Node rhsValue",
      "info" : "SingleVariableDeclaration[61534-61547]:SingleVariableDeclaration[61758-61771]"
    }, {
      "left" : "JSType valueType",
      "right" : "JSType valueType",
      "info" : "SingleVariableDeclaration[61549-61565]:SingleVariableDeclaration[61773-61789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61567-62962]:Block[61791-63186]"
    }, {
      "left" : "if (valueType == null)",
      "right" : "if (valueType == null)",
      "info" : "IfStatement[61575-61628]:IfStatement[61799-61852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61598-61628]:Block[61822-61852]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[61608-61620]:ReturnStatement[61832-61844]"
    }, {
      "left" : "boolean inferred = true;",
      "right" : "boolean inferred = true;",
      "info" : "VariableDeclarationStatement[61636-61660]:VariableDeclarationStatement[61860-61884]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[61667-61944]:IfStatement[61891-62168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61685-61944]:Block[61909-62168]"
    }, {
      "left" : "inferred = !(info.hasType()\n            || info.hasEnumParameterType()\n            || (info.isConstant() && valueType != null\n                && !valueType.isUnknownType())\n            || FunctionTypeBuilder.isFunctionTypeDeclaration(info));",
      "right" : "inferred = !(info.hasType()\n            || info.hasEnumParameterType()\n            || (info.isConstant() && valueType != null\n                && !valueType.isUnknownType())\n            || FunctionTypeBuilder.isFunctionTypeDeclaration(info));",
      "info" : "ExpressionStatement[61695-61936]:ExpressionStatement[61919-62160]"
    }, {
      "left" : "if (inferred && rhsValue != null && rhsValue.isFunction())",
      "right" : "if (inferred && rhsValue != null && rhsValue.isFunction())",
      "info" : "IfStatement[61952-62933]:IfStatement[62176-63157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62011-62933]:Block[62235-63157]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[62021-62925]:IfStatement[62245-63149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62039-62074]:Block[62263-62298]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[62051-62064]:ReturnStatement[62275-62288]"
    }, {
      "left" : "if (!scope.isDeclared(qName, false) &&\n            n.isUnscopedQualifiedName())",
      "right" : "if (!scope.isDeclared(qName, false) &&\n            n.isUnscopedQualifiedName())",
      "info" : "IfStatement[62080-62925]:IfStatement[62304-63149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62160-62925]:Block[62384-63149]"
    }, {
      "left" : "for (Node current = n.getParent();\n               !(current.isScript() || current.isFunction());\n               current = current.getParent())",
      "right" : "for (Node current = n.getParent();\n               !(current.isScript() || current.isFunction());\n               current = current.getParent())",
      "info" : "ForStatement[62295-62548]:ForStatement[62519-62772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62438-62548]:Block[62662-62772]"
    }, {
      "left" : "if (NodeUtil.isControlStructure(current))",
      "right" : "if (NodeUtil.isControlStructure(current))",
      "info" : "IfStatement[62452-62536]:IfStatement[62676-62760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62494-62536]:Block[62718-62760]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[62510-62522]:ReturnStatement[62734-62746]"
    }, {
      "left" : "AstFunctionContents contents =\n              getFunctionAnalysisResults(scope.getRootNode());",
      "right" : "AstFunctionContents contents =\n              getFunctionAnalysisResults(scope.getRootNode());",
      "info" : "VariableDeclarationStatement[62680-62773]:VariableDeclarationStatement[62904-62997]"
    }, {
      "left" : "if (contents == null ||\n              !contents.getEscapedQualifiedNames().contains(qName))",
      "right" : "if (contents == null ||\n              !contents.getEscapedQualifiedNames().contains(qName))",
      "info" : "IfStatement[62784-62915]:IfStatement[63008-63139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62876-62915]:Block[63100-63139]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[62890-62903]:ReturnStatement[63114-63127]"
    }, {
      "left" : "return inferred;",
      "right" : "return inferred;",
      "info" : "ReturnStatement[62940-62956]:ReturnStatement[63164-63180]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[63188-63195]:Modifier[63412-63419]"
    }, {
      "left" : "ObjectType",
      "right" : "ObjectType",
      "info" : "SimpleType[63196-63206]:SimpleType[63420-63430]"
    }, {
      "left" : "getObjectSlot",
      "right" : "getObjectSlot",
      "info" : "SimpleName[63207-63220]:SimpleName[63431-63444]"
    }, {
      "left" : "String slotName",
      "right" : "String slotName",
      "info" : "SingleVariableDeclaration[63221-63236]:SingleVariableDeclaration[63445-63460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63238-63516]:Block[63462-63740]"
    }, {
      "left" : "Var ownerVar = scope.getVar(slotName);",
      "right" : "Var ownerVar = scope.getVar(slotName);",
      "info" : "VariableDeclarationStatement[63246-63284]:VariableDeclarationStatement[63470-63508]"
    }, {
      "left" : "if (ownerVar != null)",
      "right" : "if (ownerVar != null)",
      "info" : "IfStatement[63291-63491]:IfStatement[63515-63715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63313-63491]:Block[63537-63715]"
    }, {
      "left" : "JSType ownerVarType = ownerVar.getType();",
      "right" : "JSType ownerVarType = ownerVar.getType();",
      "info" : "VariableDeclarationStatement[63323-63364]:VariableDeclarationStatement[63547-63588]"
    }, {
      "left" : "return ObjectType.cast(ownerVarType == null ?\n            null : ownerVarType.restrictByNotNullOrUndefined());",
      "right" : "return ObjectType.cast(ownerVarType == null ?\n            null : ownerVarType.restrictByNotNullOrUndefined());",
      "info" : "ReturnStatement[63373-63483]:ReturnStatement[63597-63707]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[63498-63510]:ReturnStatement[63722-63734]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[63653-63657]:PrimitiveType[63877-63881]"
    }, {
      "left" : "resolveStubDeclarations",
      "right" : "resolveStubDeclarations",
      "info" : "SimpleName[63658-63681]:SimpleName[63882-63905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63684-64835]:Block[63908-65059]"
    }, {
      "left" : "for (StubDeclaration stub : stubDeclarations)",
      "right" : "for (StubDeclaration stub : stubDeclarations)",
      "info" : "EnhancedForStatement[63692-64829]:EnhancedForStatement[63916-65053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63738-64829]:Block[63962-65053]"
    }, {
      "left" : "Node n = stub.node;",
      "right" : "Node n = stub.node;",
      "info" : "VariableDeclarationStatement[63748-63767]:VariableDeclarationStatement[63972-63991]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[63776-63804]:VariableDeclarationStatement[64000-64028]"
    }, {
      "left" : "String qName = n.getQualifiedName();",
      "right" : "String qName = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[63813-63849]:VariableDeclarationStatement[64037-64073]"
    }, {
      "left" : "String propName = n.getLastChild().getString();",
      "right" : "String propName = n.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[63858-63905]:VariableDeclarationStatement[64082-64129]"
    }, {
      "left" : "String ownerName = stub.ownerName;",
      "right" : "String ownerName = stub.ownerName;",
      "info" : "VariableDeclarationStatement[63914-63948]:VariableDeclarationStatement[64138-64172]"
    }, {
      "left" : "boolean isExtern = stub.isExtern;",
      "right" : "boolean isExtern = stub.isExtern;",
      "info" : "VariableDeclarationStatement[63957-63990]:VariableDeclarationStatement[64181-64214]"
    }, {
      "left" : "if (scope.isDeclared(qName, false))",
      "right" : "if (scope.isDeclared(qName, false))",
      "info" : "IfStatement[64000-64067]:IfStatement[64224-64291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64036-64067]:Block[64260-64291]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[64048-64057]:ContinueStatement[64272-64281]"
    }, {
      "left" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "right" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "info" : "VariableDeclarationStatement[64184-64232]:VariableDeclarationStatement[64408-64456]"
    }, {
      "left" : "ObjectType unknownType = typeRegistry.getNativeObjectType(UNKNOWN_TYPE);",
      "right" : "ObjectType unknownType = typeRegistry.getNativeObjectType(UNKNOWN_TYPE);",
      "info" : "VariableDeclarationStatement[64241-64313]:VariableDeclarationStatement[64465-64537]"
    }, {
      "left" : "defineSlot(n, parent, unknownType, true);",
      "right" : "defineSlot(n, parent, unknownType, true);",
      "info" : "ExpressionStatement[64322-64363]:ExpressionStatement[64546-64587]"
    }, {
      "left" : "if (ownerType != null &&\n            (isExtern || ownerType.isFunctionPrototypeType()))",
      "right" : "if (ownerType != null &&\n            (isExtern || ownerType.isFunctionPrototypeType()))",
      "info" : "IfStatement[64373-64821]:IfStatement[64597-65045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64461-64687]:Block[64685-64911]"
    }, {
      "left" : "ownerType.defineInferredProperty(\n              propName, unknownType, n);",
      "right" : "ownerType.defineInferredProperty(\n              propName, unknownType, n);",
      "info" : "ExpressionStatement[64603-64677]:ExpressionStatement[64827-64901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64693-64821]:Block[64917-65045]"
    }, {
      "left" : "typeRegistry.registerPropertyOnType(\n              propName, ownerType == null ? unknownType : ownerType);",
      "right" : "typeRegistry.registerPropertyOnType(\n              propName, ownerType == null ? unknownType : ownerType);",
      "info" : "ExpressionStatement[64705-64811]:ExpressionStatement[64929-65035]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[64967-64974]:Modifier[65191-65198]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[64975-64980]:Modifier[65199-65204]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[64981-64986]:TYPE_DECLARATION_KIND[65205-65210]"
    }, {
      "left" : "CollectProperties",
      "right" : "CollectProperties",
      "info" : "SimpleName[64987-65004]:SimpleName[65211-65228]"
    }, {
      "left" : "AbstractShallowStatementCallback",
      "right" : "AbstractShallowStatementCallback",
      "info" : "SimpleType[65021-65053]:SimpleType[65245-65277]"
    }, {
      "left" : "CollectProperties",
      "right" : "CollectProperties",
      "info" : "SimpleName[65104-65121]:SimpleName[65328-65345]"
    }, {
      "left" : "ObjectType thisType",
      "right" : "ObjectType thisType",
      "info" : "SingleVariableDeclaration[65122-65141]:SingleVariableDeclaration[65346-65365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65143-65186]:Block[65367-65410]"
    }, {
      "left" : "this.thisType = thisType;",
      "right" : "this.thisType = thisType;",
      "info" : "ExpressionStatement[65153-65178]:ExpressionStatement[65377-65402]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[65194-65203]:MarkerAnnotation[65418-65427]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[65210-65216]:Modifier[65434-65440]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[65217-65221]:PrimitiveType[65441-65445]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[65222-65227]:SimpleName[65446-65451]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[65228-65243]:SingleVariableDeclaration[65452-65467]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[65245-65251]:SingleVariableDeclaration[65469-65475]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[65253-65264]:SingleVariableDeclaration[65477-65488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65266-65677]:Block[65490-65901]"
    }, {
      "left" : "if (n.isExprResult())",
      "right" : "if (n.isExprResult())",
      "info" : "IfStatement[65276-65669]:IfStatement[65500-65893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65298-65669]:Block[65522-65893]"
    }, {
      "left" : "Node child = n.getFirstChild();",
      "right" : "Node child = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[65310-65341]:VariableDeclarationStatement[65534-65565]"
    }, {
      "left" : "switch (child.getType()) {\n            case Token.ASSIGN:\n              maybeCollectMember(t, child.getFirstChild(), child,\n                  child.getLastChild());\n              break;\n            case Token.GETPROP:\n              maybeCollectMember(t, child, child, null);\n              break;\n          }",
      "right" : "switch (child.getType()) {\n            case Token.ASSIGN:\n              maybeCollectMember(t, child.getFirstChild(), child,\n                  child.getLastChild());\n              break;\n            case Token.GETPROP:\n              maybeCollectMember(t, child, child, null);\n              break;\n          }",
      "info" : "SwitchStatement[65352-65659]:SwitchStatement[65576-65883]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[65391-65409]:SwitchCase[65615-65633]"
    }, {
      "left" : "maybeCollectMember(t, child.getFirstChild(), child,\n                  child.getLastChild());",
      "right" : "maybeCollectMember(t, child.getFirstChild(), child,\n                  child.getLastChild());",
      "info" : "ExpressionStatement[65424-65516]:ExpressionStatement[65648-65740]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[65531-65537]:BreakStatement[65755-65761]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[65550-65569]:SwitchCase[65774-65793]"
    }, {
      "left" : "maybeCollectMember(t, child, child, null);",
      "right" : "maybeCollectMember(t, child, child, null);",
      "info" : "ExpressionStatement[65584-65626]:ExpressionStatement[65808-65850]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[65641-65647]:BreakStatement[65865-65871]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[65685-65692]:Modifier[65909-65916]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[65693-65697]:PrimitiveType[65917-65921]"
    }, {
      "left" : "maybeCollectMember",
      "right" : "maybeCollectMember",
      "info" : "SimpleName[65698-65716]:SimpleName[65922-65940]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[65717-65732]:SingleVariableDeclaration[65941-65956]"
    }, {
      "left" : "Node member",
      "right" : "Node member",
      "info" : "SingleVariableDeclaration[65744-65755]:SingleVariableDeclaration[65968-65979]"
    }, {
      "left" : "Node nodeWithJsDocInfo",
      "right" : "Node nodeWithJsDocInfo",
      "info" : "SingleVariableDeclaration[65757-65779]:SingleVariableDeclaration[65981-66003]"
    }, {
      "left" : "@Nullable Node value",
      "right" : "@Nullable Node value",
      "info" : "SingleVariableDeclaration[65781-65801]:SingleVariableDeclaration[66005-66025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65803-66584]:Block[66027-66808]"
    }, {
      "left" : "JSDocInfo info = nodeWithJsDocInfo.getJSDocInfo();",
      "right" : "JSDocInfo info = nodeWithJsDocInfo.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[65813-65863]:VariableDeclarationStatement[66037-66087]"
    }, {
      "left" : "if (info == null ||\n            !member.isGetProp() ||\n            !member.getFirstChild().isThis())",
      "right" : "if (info == null ||\n            !member.isGetProp() ||\n            !member.getFirstChild().isThis())",
      "info" : "IfStatement[66059-66189]:IfStatement[66283-66413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66160-66189]:Block[66384-66413]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[66172-66179]:ReturnStatement[66396-66403]"
    }, {
      "left" : "member.getFirstChild().setJSType(thisType);",
      "right" : "member.getFirstChild().setJSType(thisType);",
      "info" : "ExpressionStatement[66199-66242]:ExpressionStatement[66423-66466]"
    }, {
      "left" : "JSType jsType = getDeclaredType(t.getSourceName(), info, member, value);",
      "right" : "JSType jsType = getDeclaredType(t.getSourceName(), info, member, value);",
      "info" : "VariableDeclarationStatement[66251-66323]:VariableDeclarationStatement[66475-66547]"
    }, {
      "left" : "Node name = member.getLastChild();",
      "right" : "Node name = member.getLastChild();",
      "info" : "VariableDeclarationStatement[66332-66366]:VariableDeclarationStatement[66556-66590]"
    }, {
      "left" : "if (jsType != null &&\n            (name.isName() || name.isString()))",
      "right" : "if (jsType != null &&\n            (name.isName() || name.isString()))",
      "info" : "IfStatement[66375-66576]:IfStatement[66599-66800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66445-66576]:Block[66669-66800]"
    }, {
      "left" : "thisType.defineDeclaredProperty(\n              name.getString(),\n              jsType,\n              member);",
      "right" : "thisType.defineDeclaredProperty(\n              name.getString(),\n              jsType,\n              member);",
      "info" : "ExpressionStatement[66457-66566]:ExpressionStatement[66681-66790]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[66689-66696]:Modifier[66913-66920]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[66697-66703]:Modifier[66921-66927]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[66704-66709]:Modifier[66928-66933]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[66710-66715]:TYPE_DECLARATION_KIND[66934-66939]"
    }, {
      "left" : "StubDeclaration",
      "right" : "StubDeclaration",
      "info" : "SimpleName[66716-66731]:SimpleName[66940-66955]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[66840-66847]:Modifier[67064-67071]"
    }, {
      "left" : "StubDeclaration",
      "right" : "StubDeclaration",
      "info" : "SimpleName[66848-66863]:SimpleName[67072-67087]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[66864-66873]:SingleVariableDeclaration[67088-67097]"
    }, {
      "left" : "boolean isExtern",
      "right" : "boolean isExtern",
      "info" : "SingleVariableDeclaration[66875-66891]:SingleVariableDeclaration[67099-67115]"
    }, {
      "left" : "String ownerName",
      "right" : "String ownerName",
      "info" : "SingleVariableDeclaration[66893-66909]:SingleVariableDeclaration[67117-67133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66911-67008]:Block[67135-67232]"
    }, {
      "left" : "this.node = node;",
      "right" : "this.node = node;",
      "info" : "ExpressionStatement[66919-66936]:ExpressionStatement[67143-67160]"
    }, {
      "left" : "this.isExtern = isExtern;",
      "right" : "this.isExtern = isExtern;",
      "info" : "ExpressionStatement[66943-66968]:ExpressionStatement[67167-67192]"
    }, {
      "left" : "this.ownerName = ownerName;",
      "right" : "this.ownerName = ownerName;",
      "info" : "ExpressionStatement[66975-67002]:ExpressionStatement[67199-67226]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[67127-67134]:Modifier[67351-67358]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[67135-67140]:Modifier[67359-67364]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[67141-67146]:TYPE_DECLARATION_KIND[67365-67370]"
    }, {
      "left" : "GlobalScopeBuilder",
      "right" : "GlobalScopeBuilder",
      "info" : "SimpleName[67147-67165]:SimpleName[67371-67389]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleType[67174-67194]:SimpleType[67398-67418]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[67202-67209]:Modifier[67426-67433]"
    }, {
      "left" : "GlobalScopeBuilder",
      "right" : "GlobalScopeBuilder",
      "info" : "SimpleName[67210-67228]:SimpleName[67434-67452]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[67229-67240]:SingleVariableDeclaration[67453-67464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67242-67269]:Block[67466-67493]"
    }, {
      "left" : "super(scope);",
      "right" : "super(scope);",
      "info" : "SuperConstructorInvocation[67250-67263]:SuperConstructorInvocation[67474-67487]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[67519-67528]:MarkerAnnotation[67743-67752]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[67529-67535]:Modifier[67753-67759]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[67536-67540]:PrimitiveType[67760-67764]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[67541-67546]:SimpleName[67765-67770]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[67547-67562]:SingleVariableDeclaration[67771-67786]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[67564-67570]:SingleVariableDeclaration[67788-67794]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[67572-67583]:SingleVariableDeclaration[67796-67807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67585-67849]:Block[67809-68073]"
    }, {
      "left" : "super.visit(t, n, parent);",
      "right" : "super.visit(t, n, parent);",
      "info" : "ExpressionStatement[67593-67619]:ExpressionStatement[67817-67843]"
    }, {
      "left" : "switch (n.getType()) {\n\n        case Token.VAR:\n          // Handle typedefs.\n          if (n.hasOneChild()) {\n            checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());\n          }\n          break;\n      }",
      "right" : "switch (n.getType()) {\n\n        case Token.VAR:\n          // Handle typedefs.\n          if (n.hasOneChild()) {\n            checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());\n          }\n          break;\n      }",
      "info" : "SwitchStatement[67627-67843]:SwitchStatement[67851-68067]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[67659-67674]:SwitchCase[67883-67898]"
    }, {
      "left" : "if (n.hasOneChild())",
      "right" : "if (n.hasOneChild())",
      "info" : "IfStatement[67715-67818]:IfStatement[67939-68042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67736-67818]:Block[67960-68042]"
    }, {
      "left" : "checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());",
      "right" : "checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());",
      "info" : "ExpressionStatement[67750-67806]:ExpressionStatement[67974-68030]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[67829-67835]:BreakStatement[68053-68059]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[67855-67864]:MarkerAnnotation[68079-68088]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[67869-67873]:PrimitiveType[68093-68097]"
    }, {
      "left" : "maybeDeclareQualifiedName",
      "right" : "maybeDeclareQualifiedName",
      "info" : "SimpleName[67874-67899]:SimpleName[68098-68123]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[67909-67924]:SingleVariableDeclaration[68133-68148]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[67926-67940]:SingleVariableDeclaration[68150-68164]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[67950-67956]:SingleVariableDeclaration[68174-68180]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[67958-67969]:SingleVariableDeclaration[68182-68193]"
    }, {
      "left" : "Node rhsValue",
      "right" : "Node rhsValue",
      "info" : "SingleVariableDeclaration[67971-67984]:SingleVariableDeclaration[68195-68208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67986-68097]:Block[68210-68321]"
    }, {
      "left" : "checkForTypedef(t, n, info);",
      "right" : "checkForTypedef(t, n, info);",
      "info" : "ExpressionStatement[67994-68022]:ExpressionStatement[68218-68246]"
    }, {
      "left" : "super.maybeDeclareQualifiedName(t, info, n, parent, rhsValue);",
      "right" : "super.maybeDeclareQualifiedName(t, info, n, parent, rhsValue);",
      "info" : "ExpressionStatement[68029-68091]:ExpressionStatement[68253-68315]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[68264-68271]:Modifier[68488-68495]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[68272-68276]:PrimitiveType[68496-68500]"
    }, {
      "left" : "checkForTypedef",
      "right" : "checkForTypedef",
      "info" : "SimpleName[68277-68292]:SimpleName[68501-68516]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[68302-68317]:SingleVariableDeclaration[68526-68541]"
    }, {
      "left" : "Node candidate",
      "right" : "Node candidate",
      "info" : "SingleVariableDeclaration[68319-68333]:SingleVariableDeclaration[68543-68557]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[68335-68349]:SingleVariableDeclaration[68559-68573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68351-69224]:Block[68575-69448]"
    }, {
      "left" : "if (info == null || !info.hasTypedefType())",
      "right" : "if (info == null || !info.hasTypedefType())",
      "info" : "IfStatement[68359-68428]:IfStatement[68583-68652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68403-68428]:Block[68627-68652]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[68413-68420]:ReturnStatement[68637-68644]"
    }, {
      "left" : "String typedef = candidate.getQualifiedName();",
      "right" : "String typedef = candidate.getQualifiedName();",
      "info" : "VariableDeclarationStatement[68436-68482]:VariableDeclarationStatement[68660-68706]"
    }, {
      "left" : "if (typedef == null)",
      "right" : "if (typedef == null)",
      "info" : "IfStatement[68489-68535]:IfStatement[68713-68759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68510-68535]:Block[68734-68759]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[68520-68527]:ReturnStatement[68744-68751]"
    }, {
      "left" : "typeRegistry.declareType(typedef, getNativeType(UNKNOWN_TYPE));",
      "right" : "typeRegistry.declareType(typedef, getNativeType(UNKNOWN_TYPE));",
      "info" : "ExpressionStatement[68710-68773]:ExpressionStatement[68934-68997]"
    }, {
      "left" : "JSType realType = info.getTypedefType().evaluate(scope, typeRegistry);",
      "right" : "JSType realType = info.getTypedefType().evaluate(scope, typeRegistry);",
      "info" : "VariableDeclarationStatement[68781-68851]:VariableDeclarationStatement[69005-69075]"
    }, {
      "left" : "if (realType == null)",
      "right" : "if (realType == null)",
      "info" : "IfStatement[68858-69016]:IfStatement[69082-69240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68880-69016]:Block[69104-69240]"
    }, {
      "left" : "compiler.report(\n            JSError.make(\n                t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
      "right" : "compiler.report(\n            JSError.make(\n                t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
      "info" : "ExpressionStatement[68890-69008]:ExpressionStatement[69114-69232]"
    }, {
      "left" : "typeRegistry.overwriteDeclaredType(typedef, realType);",
      "right" : "typeRegistry.overwriteDeclaredType(typedef, realType);",
      "info" : "ExpressionStatement[69024-69078]:ExpressionStatement[69248-69302]"
    }, {
      "left" : "if (candidate.isGetProp())",
      "right" : "if (candidate.isGetProp())",
      "info" : "IfStatement[69085-69218]:IfStatement[69309-69442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69112-69218]:Block[69336-69442]"
    }, {
      "left" : "defineSlot(candidate, candidate.getParent(),\n            getNativeType(NO_TYPE), false);",
      "right" : "defineSlot(candidate, candidate.getParent(),\n            getNativeType(NO_TYPE), false);",
      "info" : "ExpressionStatement[69122-69210]:ExpressionStatement[69346-69434]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[69360-69367]:Modifier[69584-69591]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[69368-69373]:Modifier[69592-69597]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[69374-69379]:TYPE_DECLARATION_KIND[69598-69603]"
    }, {
      "left" : "LocalScopeBuilder",
      "right" : "LocalScopeBuilder",
      "info" : "SimpleName[69380-69397]:SimpleName[69604-69621]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleType[69406-69426]:SimpleType[69630-69650]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[69500-69507]:Modifier[69724-69731]"
    }, {
      "left" : "LocalScopeBuilder",
      "right" : "LocalScopeBuilder",
      "info" : "SimpleName[69508-69525]:SimpleName[69732-69749]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[69526-69537]:SingleVariableDeclaration[69750-69761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69539-69566]:Block[69763-69790]"
    }, {
      "left" : "super(scope);",
      "right" : "super(scope);",
      "info" : "SuperConstructorInvocation[69547-69560]:SuperConstructorInvocation[69771-69784]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[69633-69637]:PrimitiveType[69857-69861]"
    }, {
      "left" : "build",
      "right" : "build",
      "info" : "SimpleName[69638-69643]:SimpleName[69862-69867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69646-70055]:Block[69870-70279]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, scope.getRootNode(), this);",
      "right" : "NodeTraversal.traverse(compiler, scope.getRootNode(), this);",
      "info" : "ExpressionStatement[69654-69714]:ExpressionStatement[69878-69938]"
    }, {
      "left" : "AstFunctionContents contents =\n          getFunctionAnalysisResults(scope.getRootNode());",
      "right" : "AstFunctionContents contents =\n          getFunctionAnalysisResults(scope.getRootNode());",
      "info" : "VariableDeclarationStatement[69722-69811]:VariableDeclarationStatement[69946-70035]"
    }, {
      "left" : "if (contents != null)",
      "right" : "if (contents != null)",
      "info" : "IfStatement[69818-70049]:IfStatement[70042-70273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69840-70049]:Block[70064-70273]"
    }, {
      "left" : "for (String varName : contents.getEscapedVarNames())",
      "right" : "for (String varName : contents.getEscapedVarNames())",
      "info" : "EnhancedForStatement[69850-70041]:EnhancedForStatement[70074-70265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69903-70041]:Block[70127-70265]"
    }, {
      "left" : "Var v = scope.getVar(varName);",
      "right" : "Var v = scope.getVar(varName);",
      "info" : "VariableDeclarationStatement[69915-69945]:VariableDeclarationStatement[70139-70169]"
    }, {
      "left" : "Preconditions.checkState(v.getScope() == scope);",
      "right" : "Preconditions.checkState(v.getScope() == scope);",
      "info" : "ExpressionStatement[69956-70004]:ExpressionStatement[70180-70228]"
    }, {
      "left" : "v.markEscaped();",
      "right" : "v.markEscaped();",
      "info" : "ExpressionStatement[70015-70031]:ExpressionStatement[70239-70255]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[70319-70328]:MarkerAnnotation[70543-70552]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[70329-70335]:Modifier[70553-70559]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[70336-70340]:PrimitiveType[70560-70564]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[70341-70346]:SimpleName[70565-70570]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[70347-70362]:SingleVariableDeclaration[70571-70586]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[70364-70370]:SingleVariableDeclaration[70588-70594]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[70372-70383]:SingleVariableDeclaration[70596-70607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70385-70595]:Block[70609-70819]"
    }, {
      "left" : "if (n == scope.getRootNode())",
      "right" : "if (n == scope.getRootNode())",
      "info" : "IfStatement[70393-70430]:IfStatement[70617-70654]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[70423-70430]:ReturnStatement[70647-70654]"
    }, {
      "left" : "if (n.isParamList() && parent == scope.getRootNode())",
      "right" : "if (n.isParamList() && parent == scope.getRootNode())",
      "info" : "IfStatement[70438-70555]:IfStatement[70662-70779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70492-70555]:Block[70716-70779]"
    }, {
      "left" : "handleFunctionInputs(parent);",
      "right" : "handleFunctionInputs(parent);",
      "info" : "ExpressionStatement[70502-70531]:ExpressionStatement[70726-70755]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[70540-70547]:ReturnStatement[70764-70771]"
    }, {
      "left" : "super.visit(t, n, parent);",
      "right" : "super.visit(t, n, parent);",
      "info" : "ExpressionStatement[70563-70589]:ExpressionStatement[70787-70813]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[70663-70670]:Modifier[70887-70894]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[70671-70675]:PrimitiveType[70895-70899]"
    }, {
      "left" : "handleFunctionInputs",
      "right" : "handleFunctionInputs",
      "info" : "SimpleName[70676-70696]:SimpleName[70900-70920]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[70697-70708]:SingleVariableDeclaration[70921-70932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70710-71466]:Block[70934-71690]"
    }, {
      "left" : "Node fnNameNode = fnNode.getFirstChild();",
      "right" : "Node fnNameNode = fnNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[70754-70795]:VariableDeclarationStatement[70978-71019]"
    }, {
      "left" : "String fnName = fnNameNode.getString();",
      "right" : "String fnName = fnNameNode.getString();",
      "info" : "VariableDeclarationStatement[70802-70841]:VariableDeclarationStatement[71026-71065]"
    }, {
      "left" : "if (!fnName.isEmpty())",
      "right" : "if (!fnName.isEmpty())",
      "info" : "IfStatement[70848-71427]:IfStatement[71072-71651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70871-71427]:Block[71095-71651]"
    }, {
      "left" : "Scope.Var fnVar = scope.getVar(fnName);",
      "right" : "Scope.Var fnVar = scope.getVar(fnName);",
      "info" : "VariableDeclarationStatement[70881-70920]:VariableDeclarationStatement[71105-71144]"
    }, {
      "left" : "if (fnVar == null ||\n            // Make sure we're not touching a native function. Native\n            // functions aren't bleeding, but may not have a declaration\n            // node.\n            (fnVar.getNameNode() != null &&\n                // Make sure that the function is actually bleeding by checking\n                // if has already been declared.\n                fnVar.getInitialValue() != fnNode))",
      "right" : "if (fnVar == null ||\n            // Make sure we're not touching a native function. Native\n            // functions aren't bleeding, but may not have a declaration\n            // node.\n            (fnVar.getNameNode() != null &&\n                // Make sure that the function is actually bleeding by checking\n                // if has already been declared.\n                fnVar.getInitialValue() != fnNode))",
      "info" : "IfStatement[70929-71419]:IfStatement[71153-71643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71339-71419]:Block[71563-71643]"
    }, {
      "left" : "defineSlot(fnNameNode, fnNode, fnNode.getJSType(), false);",
      "right" : "defineSlot(fnNameNode, fnNode, fnNode.getJSType(), false);",
      "info" : "ExpressionStatement[71351-71409]:ExpressionStatement[71575-71633]"
    }, {
      "left" : "declareArguments(fnNode);",
      "right" : "declareArguments(fnNode);",
      "info" : "ExpressionStatement[71435-71460]:ExpressionStatement[71659-71684]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[71535-71542]:Modifier[71759-71766]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[71543-71547]:PrimitiveType[71767-71771]"
    }, {
      "left" : "declareArguments",
      "right" : "declareArguments",
      "info" : "SimpleName[71548-71564]:SimpleName[71772-71788]"
    }, {
      "left" : "Node functionNode",
      "right" : "Node functionNode",
      "info" : "SingleVariableDeclaration[71565-71582]:SingleVariableDeclaration[71789-71806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71584-72402]:Block[71808-72626]"
    }, {
      "left" : "Node astParameters = functionNode.getFirstChild().getNext();",
      "right" : "Node astParameters = functionNode.getFirstChild().getNext();",
      "info" : "VariableDeclarationStatement[71592-71652]:VariableDeclarationStatement[71816-71876]"
    }, {
      "left" : "Node body = astParameters.getNext();",
      "right" : "Node body = astParameters.getNext();",
      "info" : "VariableDeclarationStatement[71659-71695]:VariableDeclarationStatement[71883-71919]"
    }, {
      "left" : "FunctionType functionType =\n          JSType.toMaybeFunctionType(functionNode.getJSType());",
      "right" : "FunctionType functionType =\n          JSType.toMaybeFunctionType(functionNode.getJSType());",
      "info" : "VariableDeclarationStatement[71702-71793]:VariableDeclarationStatement[71926-72017]"
    }, {
      "left" : "if (functionType != null)",
      "right" : "if (functionType != null)",
      "info" : "IfStatement[71800-72396]:IfStatement[72024-72620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71826-72396]:Block[72050-72620]"
    }, {
      "left" : "Node jsDocParameters = functionType.getParametersNode();",
      "right" : "Node jsDocParameters = functionType.getParametersNode();",
      "info" : "VariableDeclarationStatement[71836-71892]:VariableDeclarationStatement[72060-72116]"
    }, {
      "left" : "if (jsDocParameters != null)",
      "right" : "if (jsDocParameters != null)",
      "info" : "IfStatement[71901-72388]:IfStatement[72125-72612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71930-72388]:Block[72154-72612]"
    }, {
      "left" : "Node jsDocParameter = jsDocParameters.getFirstChild();",
      "right" : "Node jsDocParameter = jsDocParameters.getFirstChild();",
      "info" : "VariableDeclarationStatement[71942-71996]:VariableDeclarationStatement[72166-72220]"
    }, {
      "left" : "for (Node astParameter : astParameters.children())",
      "right" : "for (Node astParameter : astParameters.children())",
      "info" : "EnhancedForStatement[72007-72378]:EnhancedForStatement[72231-72602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72058-72378]:Block[72282-72602]"
    }, {
      "left" : "if (jsDocParameter != null)",
      "right" : "if (jsDocParameter != null)",
      "info" : "IfStatement[72072-72366]:IfStatement[72296-72590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72100-72279]:Block[72324-72503]"
    }, {
      "left" : "defineSlot(astParameter, functionNode,\n                  jsDocParameter.getJSType(), false);",
      "right" : "defineSlot(astParameter, functionNode,\n                  jsDocParameter.getJSType(), false);",
      "info" : "ExpressionStatement[72116-72208]:ExpressionStatement[72340-72432]"
    }, {
      "left" : "jsDocParameter = jsDocParameter.getNext();",
      "right" : "jsDocParameter = jsDocParameter.getNext();",
      "info" : "ExpressionStatement[72223-72265]:ExpressionStatement[72447-72489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72285-72366]:Block[72509-72590]"
    }, {
      "left" : "defineSlot(astParameter, functionNode, null, true);",
      "right" : "defineSlot(astParameter, functionNode, null, true);",
      "info" : "ExpressionStatement[72301-72352]:ExpressionStatement[72525-72576]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[72612-72619]:Modifier[72836-72843]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[72620-72626]:Modifier[72844-72850]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[72627-72632]:TYPE_DECLARATION_KIND[72851-72856]"
    }, {
      "left" : "FirstOrderFunctionAnalyzer",
      "right" : "FirstOrderFunctionAnalyzer",
      "info" : "SimpleName[72633-72659]:SimpleName[72857-72883]"
    }, {
      "left" : "AbstractScopedCallback",
      "right" : "AbstractScopedCallback",
      "info" : "SimpleType[72674-72696]:SimpleType[72898-72920]"
    }, {
      "left" : "CompilerPass",
      "right" : "CompilerPass",
      "info" : "SimpleType[72708-72720]:SimpleType[72932-72944]"
    }, {
      "left" : "FirstOrderFunctionAnalyzer",
      "right" : "FirstOrderFunctionAnalyzer",
      "info" : "SimpleName[72828-72854]:SimpleName[73052-73078]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[72864-72889]:SingleVariableDeclaration[73088-73113]"
    }, {
      "left" : "Map<Node, AstFunctionContents> outParam",
      "right" : "Map<Node, AstFunctionContents> outParam",
      "info" : "SingleVariableDeclaration[72891-72930]:SingleVariableDeclaration[73115-73154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72932-72999]:Block[73156-73223]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[72940-72965]:ExpressionStatement[73164-73189]"
    }, {
      "left" : "this.data = outParam;",
      "right" : "this.data = outParam;",
      "info" : "ExpressionStatement[72972-72993]:ExpressionStatement[73196-73217]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[73005-73014]:MarkerAnnotation[73229-73238]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[73015-73021]:Modifier[73239-73245]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[73022-73026]:PrimitiveType[73246-73250]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[73027-73034]:SimpleName[73251-73258]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[73035-73047]:SingleVariableDeclaration[73259-73271]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[73049-73058]:SingleVariableDeclaration[73273-73282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73060-73272]:Block[73284-73496]"
    }, {
      "left" : "if (externs == null)",
      "right" : "if (externs == null)",
      "info" : "IfStatement[73068-73266]:IfStatement[73292-73490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73089-73152]:Block[73313-73376]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, this);",
      "right" : "NodeTraversal.traverse(compiler, root, this);",
      "info" : "ExpressionStatement[73099-73144]:ExpressionStatement[73323-73368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73158-73266]:Block[73382-73490]"
    }, {
      "left" : "NodeTraversal.traverseRoots(\n            compiler, ImmutableList.of(externs, root), this);",
      "right" : "NodeTraversal.traverseRoots(\n            compiler, ImmutableList.of(externs, root), this);",
      "info" : "ExpressionStatement[73168-73258]:ExpressionStatement[73392-73482]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[73278-73287]:MarkerAnnotation[73502-73511]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[73288-73294]:Modifier[73512-73518]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[73295-73299]:PrimitiveType[73519-73523]"
    }, {
      "left" : "enterScope",
      "right" : "enterScope",
      "info" : "SimpleName[73300-73310]:SimpleName[73524-73534]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[73311-73326]:SingleVariableDeclaration[73535-73550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73328-73459]:Block[73552-73683]"
    }, {
      "left" : "if (!t.inGlobalScope())",
      "right" : "if (!t.inGlobalScope())",
      "info" : "IfStatement[73336-73453]:IfStatement[73560-73677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73360-73453]:Block[73584-73677]"
    }, {
      "left" : "Node n = t.getScopeRoot();",
      "right" : "Node n = t.getScopeRoot();",
      "info" : "VariableDeclarationStatement[73370-73396]:VariableDeclarationStatement[73594-73620]"
    }, {
      "left" : "data.put(n, new AstFunctionContents(n));",
      "right" : "data.put(n, new AstFunctionContents(n));",
      "info" : "ExpressionStatement[73405-73445]:ExpressionStatement[73629-73669]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[73465-73474]:MarkerAnnotation[73689-73698]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[73475-73481]:Modifier[73699-73705]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[73482-73486]:PrimitiveType[73706-73710]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[73487-73492]:SimpleName[73711-73716]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[73493-73508]:SingleVariableDeclaration[73717-73732]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[73510-73516]:SingleVariableDeclaration[73734-73740]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[73518-73529]:SingleVariableDeclaration[73742-73753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73531-74971]:Block[73755-75195]"
    }, {
      "left" : "if (t.inGlobalScope())",
      "right" : "if (t.inGlobalScope())",
      "info" : "IfStatement[73539-73587]:IfStatement[73763-73811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73562-73587]:Block[73786-73811]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[73572-73579]:ReturnStatement[73796-73803]"
    }, {
      "left" : "if (n.isReturn() && n.getFirstChild() != null)",
      "right" : "if (n.isReturn() && n.getFirstChild() != null)",
      "info" : "IfStatement[73595-73710]:IfStatement[73819-73934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73642-73710]:Block[73866-73934]"
    }, {
      "left" : "data.get(t.getScopeRoot()).recordNonEmptyReturn();",
      "right" : "data.get(t.getScopeRoot()).recordNonEmptyReturn();",
      "info" : "ExpressionStatement[73652-73702]:ExpressionStatement[73876-73926]"
    }, {
      "left" : "if (t.getScopeDepth() <= 2)",
      "right" : "if (t.getScopeDepth() <= 2)",
      "info" : "IfStatement[73718-74055]:IfStatement[73942-74279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73746-74055]:Block[73970-74279]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[74040-74047]:ReturnStatement[74264-74271]"
    }, {
      "left" : "if (n.isName() && NodeUtil.isLValue(n))",
      "right" : "if (n.isName() && NodeUtil.isLValue(n))",
      "info" : "IfStatement[74063-74965]:IfStatement[74287-75189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74103-74453]:Block[74327-74677]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[74113-74141]:VariableDeclarationStatement[74337-74365]"
    }, {
      "left" : "Scope scope = t.getScope();",
      "right" : "Scope scope = t.getScope();",
      "info" : "VariableDeclarationStatement[74150-74177]:VariableDeclarationStatement[74374-74401]"
    }, {
      "left" : "Var var = scope.getVar(name);",
      "right" : "Var var = scope.getVar(name);",
      "info" : "VariableDeclarationStatement[74186-74215]:VariableDeclarationStatement[74410-74439]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[74224-74445]:IfStatement[74448-74669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74241-74445]:Block[74465-74669]"
    }, {
      "left" : "Scope ownerScope = var.getScope();",
      "right" : "Scope ownerScope = var.getScope();",
      "info" : "VariableDeclarationStatement[74253-74287]:VariableDeclarationStatement[74477-74511]"
    }, {
      "left" : "if (scope != ownerScope && ownerScope.isLocal())",
      "right" : "if (scope != ownerScope && ownerScope.isLocal())",
      "info" : "IfStatement[74298-74435]:IfStatement[74522-74659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74347-74435]:Block[74571-74659]"
    }, {
      "left" : "data.get(ownerScope.getRootNode()).recordEscapedVarName(name);",
      "right" : "data.get(ownerScope.getRootNode()).recordEscapedVarName(name);",
      "info" : "ExpressionStatement[74361-74423]:ExpressionStatement[74585-74647]"
    }, {
      "left" : "if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n          NodeUtil.isLValue(n))",
      "right" : "if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n          NodeUtil.isLValue(n))",
      "info" : "IfStatement[74459-74965]:IfStatement[74683-75189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74543-74965]:Block[74767-75189]"
    }, {
      "left" : "String name = NodeUtil.getRootOfQualifiedName(n).getString();",
      "right" : "String name = NodeUtil.getRootOfQualifiedName(n).getString();",
      "info" : "VariableDeclarationStatement[74553-74614]:VariableDeclarationStatement[74777-74838]"
    }, {
      "left" : "Scope scope = t.getScope();",
      "right" : "Scope scope = t.getScope();",
      "info" : "VariableDeclarationStatement[74623-74650]:VariableDeclarationStatement[74847-74874]"
    }, {
      "left" : "Var var = scope.getVar(name);",
      "right" : "Var var = scope.getVar(name);",
      "info" : "VariableDeclarationStatement[74659-74688]:VariableDeclarationStatement[74883-74912]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[74697-74957]:IfStatement[74921-75181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74714-74957]:Block[74938-75181]"
    }, {
      "left" : "Scope ownerScope = var.getScope();",
      "right" : "Scope ownerScope = var.getScope();",
      "info" : "VariableDeclarationStatement[74726-74760]:VariableDeclarationStatement[74950-74984]"
    }, {
      "left" : "if (scope != ownerScope && ownerScope.isLocal())",
      "right" : "if (scope != ownerScope && ownerScope.isLocal())",
      "info" : "IfStatement[74771-74947]:IfStatement[74995-75171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74820-74947]:Block[75044-75171]"
    }, {
      "left" : "data.get(ownerScope.getRootNode())\n                .recordEscapedQualifiedName(n.getQualifiedName());",
      "right" : "data.get(ownerScope.getRootNode())\n                .recordEscapedQualifiedName(n.getQualifiedName());",
      "info" : "ExpressionStatement[74834-74935]:ExpressionStatement[75058-75159]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[74979-74986]:Modifier[75203-75210]"
    }, {
      "left" : "AstFunctionContents",
      "right" : "AstFunctionContents",
      "info" : "SimpleType[74987-75006]:SimpleType[75211-75230]"
    }, {
      "left" : "getFunctionAnalysisResults",
      "right" : "getFunctionAnalysisResults",
      "info" : "SimpleName[75007-75033]:SimpleName[75231-75257]"
    }, {
      "left" : "@Nullable Node n",
      "right" : "@Nullable Node n",
      "info" : "SingleVariableDeclaration[75034-75050]:SingleVariableDeclaration[75258-75274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75052-75266]:Block[75276-75490]"
    }, {
      "left" : "if (n == null)",
      "right" : "if (n == null)",
      "info" : "IfStatement[75058-75099]:IfStatement[75282-75323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75073-75099]:Block[75297-75323]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[75081-75093]:ReturnStatement[75305-75317]"
    }, {
      "left" : "return functionAnalysisResults.get(n);",
      "right" : "return functionAnalysisResults.get(n);",
      "info" : "ReturnStatement[75224-75262]:ReturnStatement[75448-75486]"
    } ]
  },
  "interFileMappings" : { }
}