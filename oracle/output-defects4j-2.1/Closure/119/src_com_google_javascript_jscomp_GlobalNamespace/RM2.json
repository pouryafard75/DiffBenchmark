{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "GlobalNamespace",
      "right" : "GlobalNamespace",
      "info" : "TypeDeclaration[1761-41584]:TypeDeclaration[1761-41616]"
    }, {
      "left" : "private AbstractCompiler compiler;",
      "right" : "private AbstractCompiler compiler;",
      "info" : "FieldDeclaration[2052-2086]:FieldDeclaration[2052-2086]"
    }, {
      "left" : "private final Node root;",
      "right" : "private final Node root;",
      "info" : "FieldDeclaration[2089-2113]:FieldDeclaration[2089-2113]"
    }, {
      "left" : "private final Node externsRoot;",
      "right" : "private final Node externsRoot;",
      "info" : "FieldDeclaration[2116-2147]:FieldDeclaration[2116-2147]"
    }, {
      "left" : "private boolean inExterns;",
      "right" : "private boolean inExterns;",
      "info" : "FieldDeclaration[2150-2176]:FieldDeclaration[2150-2176]"
    }, {
      "left" : "private Scope externsScope;",
      "right" : "private Scope externsScope;",
      "info" : "FieldDeclaration[2179-2206]:FieldDeclaration[2179-2206]"
    }, {
      "left" : "private boolean generated = false;",
      "right" : "private boolean generated = false;",
      "info" : "FieldDeclaration[2209-2243]:FieldDeclaration[2209-2243]"
    }, {
      "left" : "private int currentPreOrderIndex = 0;",
      "right" : "private int currentPreOrderIndex = 0;",
      "info" : "FieldDeclaration[2247-2452]:FieldDeclaration[2247-2452]"
    }, {
      "left" : "private List<Name> globalNames = new ArrayList<Name>();",
      "right" : "private List<Name> globalNames = new ArrayList<Name>();",
      "info" : "FieldDeclaration[2456-2542]:FieldDeclaration[2456-2542]"
    }, {
      "left" : "private Map<String, Name> nameMap = new HashMap<String, Name>();",
      "right" : "private Map<String, Name> nameMap = new HashMap<String, Name>();",
      "info" : "FieldDeclaration[2546-2683]:FieldDeclaration[2546-2683]"
    }, {
      "left" : "GlobalNamespace(AbstractCompiler compiler, Node root)",
      "right" : "GlobalNamespace(AbstractCompiler compiler, Node root)",
      "info" : "MethodDeclaration[2687-3018]:MethodDeclaration[2687-3018]"
    }, {
      "left" : "GlobalNamespace(AbstractCompiler compiler, Node externsRoot, Node root)",
      "right" : "GlobalNamespace(AbstractCompiler compiler, Node externsRoot, Node root)",
      "info" : "MethodDeclaration[3022-3767]:MethodDeclaration[3022-3767]"
    }, {
      "left" : "boolean hasExternsRoot()",
      "right" : "boolean hasExternsRoot()",
      "info" : "MethodDeclaration[3771-3833]:MethodDeclaration[3771-3833]"
    }, {
      "left" : "public Node getRootNode()",
      "right" : "public Node getRootNode()",
      "info" : "MethodDeclaration[3837-3909]:MethodDeclaration[3837-3909]"
    }, {
      "left" : "public StaticScope<JSType> getParentScope()",
      "right" : "public StaticScope<JSType> getParentScope()",
      "info" : "MethodDeclaration[3913-3991]:MethodDeclaration[3913-3991]"
    }, {
      "left" : "public Name getSlot(String name)",
      "right" : "public Name getSlot(String name)",
      "info" : "MethodDeclaration[3995-4074]:MethodDeclaration[3995-4074]"
    }, {
      "left" : "public Name getOwnSlot(String name)",
      "right" : "public Name getOwnSlot(String name)",
      "info" : "MethodDeclaration[4078-4184]:MethodDeclaration[4078-4184]"
    }, {
      "left" : "public JSType getTypeOfThis()",
      "right" : "public JSType getTypeOfThis()",
      "info" : "MethodDeclaration[4188-4307]:MethodDeclaration[4188-4307]"
    }, {
      "left" : "public Iterable<Ref> getReferences(Name slot)",
      "right" : "public Iterable<Ref> getReferences(Name slot)",
      "info" : "MethodDeclaration[4311-4454]:MethodDeclaration[4311-4454]"
    }, {
      "left" : "public StaticScope<JSType> getScope(Name slot)",
      "right" : "public StaticScope<JSType> getScope(Name slot)",
      "info" : "MethodDeclaration[4458-4539]:MethodDeclaration[4458-4539]"
    }, {
      "left" : "public Iterable<Name> getAllSymbols()",
      "right" : "public Iterable<Name> getAllSymbols()",
      "info" : "MethodDeclaration[4543-4693]:MethodDeclaration[4543-4693]"
    }, {
      "left" : "private void ensureGenerated()",
      "right" : "private void ensureGenerated()",
      "info" : "MethodDeclaration[4697-4778]:MethodDeclaration[4697-4778]"
    }, {
      "left" : "List<Name> getNameForest()",
      "right" : "List<Name> getNameForest()",
      "info" : "MethodDeclaration[4782-4984]:MethodDeclaration[4782-4984]"
    }, {
      "left" : "Map<String, Name> getNameIndex()",
      "right" : "Map<String, Name> getNameIndex()",
      "info" : "MethodDeclaration[4988-5189]:MethodDeclaration[4988-5189]"
    }, {
      "left" : "AstChange",
      "right" : "AstChange",
      "info" : "TypeDeclaration[5193-5571]:TypeDeclaration[5193-5571]"
    }, {
      "left" : "final JSModule module;",
      "right" : "final JSModule module;",
      "info" : "FieldDeclaration[5359-5381]:FieldDeclaration[5359-5381]"
    }, {
      "left" : "final Scope scope;",
      "right" : "final Scope scope;",
      "info" : "FieldDeclaration[5386-5404]:FieldDeclaration[5386-5404]"
    }, {
      "left" : "final Node node;",
      "right" : "final Node node;",
      "info" : "FieldDeclaration[5409-5425]:FieldDeclaration[5409-5425]"
    }, {
      "left" : "AstChange(JSModule module, Scope scope, Node node)",
      "right" : "AstChange(JSModule module, Scope scope, Node node)",
      "info" : "MethodDeclaration[5431-5567]:MethodDeclaration[5431-5567]"
    }, {
      "left" : "void scanNewNodes(List<AstChange> newNodes)",
      "right" : "void scanNewNodes(List<AstChange> newNodes)",
      "info" : "MethodDeclaration[5575-6093]:MethodDeclaration[5575-6093]"
    }, {
      "left" : "private void scanFromNode(\n    BuildGlobalNamespace builder, JSModule module, Scope scope, Node n)",
      "right" : "private void scanFromNode(\n    BuildGlobalNamespace builder, JSModule module, Scope scope, Node n)",
      "info" : "MethodDeclaration[6097-6386]:MethodDeclaration[6097-6386]"
    }, {
      "left" : "private void process()",
      "right" : "private void process()",
      "info" : "MethodDeclaration[6390-6724]:MethodDeclaration[6390-6724]"
    }, {
      "left" : "private boolean isGlobalNameReference(String name, Scope s)",
      "right" : "private boolean isGlobalNameReference(String name, Scope s)",
      "info" : "MethodDeclaration[6728-7191]:MethodDeclaration[6728-7191]"
    }, {
      "left" : "private String getTopVarName(String name)",
      "right" : "private String getTopVarName(String name)",
      "info" : "MethodDeclaration[7195-7566]:MethodDeclaration[7195-7566]"
    }, {
      "left" : "private boolean isGlobalVarReference(String name, Scope s)",
      "right" : "private boolean isGlobalVarReference(String name, Scope s)",
      "info" : "MethodDeclaration[7570-8091]:MethodDeclaration[7570-8091]"
    }, {
      "left" : "private boolean isGlobalScope(Scope s)",
      "right" : "private boolean isGlobalScope(Scope s)",
      "info" : "MethodDeclaration[8095-8310]:MethodDeclaration[8095-8310]"
    }, {
      "left" : "BuildGlobalNamespace",
      "right" : "BuildGlobalNamespace",
      "info" : "TypeDeclaration[8394-28395]:TypeDeclaration[8394-28427]"
    }, {
      "left" : "BuildGlobalNamespace()",
      "right" : "BuildGlobalNamespace()",
      "info" : "MethodDeclaration[8559-8589]:MethodDeclaration[8559-8589]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[8595-8667]:MethodDeclaration[8595-8667]"
    }, {
      "left" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "right" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[8673-9122]:MethodDeclaration[8673-9122]"
    }, {
      "left" : "public void collect(JSModule module, Scope scope, Node n)",
      "right" : "public void collect(JSModule module, Scope scope, Node n)",
      "info" : "MethodDeclaration[9128-13028]:MethodDeclaration[9128-13060]"
    }, {
      "left" : "String getNameForObjLitKey(Node n)",
      "right" : "String getNameForObjLitKey(Node n)",
      "info" : "MethodDeclaration[13034-15199]:MethodDeclaration[13066-15231]"
    }, {
      "left" : "Name.Type getValueType(Node n)",
      "right" : "Name.Type getValueType(Node n)",
      "info" : "MethodDeclaration[15205-16428]:MethodDeclaration[15237-16460]"
    }, {
      "left" : "void handleSetFromGlobal(JSModule module, Scope scope,\n        Node n, Node parent, String name,\n        boolean isPropAssign, Name.Type type)",
      "right" : "void handleSetFromGlobal(JSModule module, Scope scope,\n        Node n, Node parent, String name,\n        boolean isPropAssign, Name.Type type)",
      "info" : "MethodDeclaration[16434-17924]:MethodDeclaration[16466-17956]"
    }, {
      "left" : "private boolean isTypeDeclaration(Node n, Node parent)",
      "right" : "private boolean isTypeDeclaration(Node n, Node parent)",
      "info" : "MethodDeclaration[17930-18894]:MethodDeclaration[17962-18926]"
    }, {
      "left" : "void handleSetFromLocal(JSModule module, Scope scope, Node n, Node parent,\n                            String name)",
      "right" : "void handleSetFromLocal(JSModule module, Scope scope, Node n, Node parent,\n                            String name)",
      "info" : "MethodDeclaration[18900-19970]:MethodDeclaration[18932-20002]"
    }, {
      "left" : "void handleGet(JSModule module, Scope scope,\n        Node n, Node parent, String name)",
      "right" : "void handleGet(JSModule module, Scope scope,\n        Node n, Node parent, String name)",
      "info" : "MethodDeclaration[19976-22459]:MethodDeclaration[20008-22491]"
    }, {
      "left" : "private boolean isClassDefiningCall(Node callNode)",
      "right" : "private boolean isClassDefiningCall(Node callNode)",
      "info" : "MethodDeclaration[22465-22666]:MethodDeclaration[22497-22698]"
    }, {
      "left" : "Ref.Type determineGetTypeForHookOrBooleanExpr(\n        JSModule module, Scope scope, Node parent, String name)",
      "right" : "Ref.Type determineGetTypeForHookOrBooleanExpr(\n        JSModule module, Scope scope, Node parent, String name)",
      "info" : "MethodDeclaration[22672-24699]:MethodDeclaration[22704-24731]"
    }, {
      "left" : "void handleGet(JSModule module, Scope scope, Node n, Node parent,\n        String name, Ref.Type type)",
      "right" : "void handleGet(JSModule module, Scope scope, Node n, Node parent,\n        String name, Ref.Type type)",
      "info" : "MethodDeclaration[24705-25422]:MethodDeclaration[24737-25454]"
    }, {
      "left" : "boolean maybeHandlePrototypePrefix(JSModule module, Scope scope,\n        Node n, Node parent, String name)",
      "right" : "boolean maybeHandlePrototypePrefix(JSModule module, Scope scope,\n        Node n, Node parent, String name)",
      "info" : "MethodDeclaration[25428-27161]:MethodDeclaration[25460-27193]"
    }, {
      "left" : "boolean isNestedAssign(Node parent)",
      "right" : "boolean isNestedAssign(Node parent)",
      "info" : "MethodDeclaration[27167-27580]:MethodDeclaration[27199-27612]"
    }, {
      "left" : "Name getOrCreateName(String name)",
      "right" : "Name getOrCreateName(String name)",
      "info" : "MethodDeclaration[27586-28391]:MethodDeclaration[27618-28423]"
    }, {
      "left" : "Name",
      "right" : "Name",
      "info" : "TypeDeclaration[28479-36425]:TypeDeclaration[28511-36457]"
    }, {
      "left" : "enum : Type",
      "right" : "enum : Type",
      "info" : "EnumDeclaration[28790-28875]:EnumDeclaration[28822-28907]"
    }, {
      "left" : "private final String baseName;",
      "right" : "private final String baseName;",
      "info" : "FieldDeclaration[28881-28911]:FieldDeclaration[28913-28943]"
    }, {
      "left" : "final Name parent;",
      "right" : "final Name parent;",
      "info" : "FieldDeclaration[28916-28934]:FieldDeclaration[28948-28966]"
    }, {
      "left" : "List<Name> props;",
      "right" : "List<Name> props;",
      "info" : "FieldDeclaration[28939-28956]:FieldDeclaration[28971-28988]"
    }, {
      "left" : "private Ref declaration;",
      "right" : "private Ref declaration;",
      "info" : "FieldDeclaration[28962-29036]:FieldDeclaration[28994-29068]"
    }, {
      "left" : "private List<Ref> refs;",
      "right" : "private List<Ref> refs;",
      "info" : "FieldDeclaration[29042-29141]:FieldDeclaration[29074-29173]"
    }, {
      "left" : "Type type;",
      "right" : "Type type;",
      "info" : "FieldDeclaration[29147-29157]:FieldDeclaration[29179-29189]"
    }, {
      "left" : "private boolean declaredType = false;",
      "right" : "private boolean declaredType = false;",
      "info" : "FieldDeclaration[29162-29199]:FieldDeclaration[29194-29231]"
    }, {
      "left" : "private boolean hasDeclaredTypeDescendant = false;",
      "right" : "private boolean hasDeclaredTypeDescendant = false;",
      "info" : "FieldDeclaration[29204-29254]:FieldDeclaration[29236-29286]"
    }, {
      "left" : "int globalSets = 0;",
      "right" : "int globalSets = 0;",
      "info" : "FieldDeclaration[29259-29278]:FieldDeclaration[29291-29310]"
    }, {
      "left" : "int localSets = 0;",
      "right" : "int localSets = 0;",
      "info" : "FieldDeclaration[29283-29301]:FieldDeclaration[29315-29333]"
    }, {
      "left" : "int aliasingGets = 0;",
      "right" : "int aliasingGets = 0;",
      "info" : "FieldDeclaration[29306-29327]:FieldDeclaration[29338-29359]"
    }, {
      "left" : "int totalGets = 0;",
      "right" : "int totalGets = 0;",
      "info" : "FieldDeclaration[29332-29350]:FieldDeclaration[29364-29382]"
    }, {
      "left" : "int callGets = 0;",
      "right" : "int callGets = 0;",
      "info" : "FieldDeclaration[29355-29372]:FieldDeclaration[29387-29404]"
    }, {
      "left" : "int deleteProps = 0;",
      "right" : "int deleteProps = 0;",
      "info" : "FieldDeclaration[29377-29397]:FieldDeclaration[29409-29429]"
    }, {
      "left" : "final boolean inExterns;",
      "right" : "final boolean inExterns;",
      "info" : "FieldDeclaration[29402-29426]:FieldDeclaration[29434-29458]"
    }, {
      "left" : "JSDocInfo docInfo = null;",
      "right" : "JSDocInfo docInfo = null;",
      "info" : "FieldDeclaration[29432-29457]:FieldDeclaration[29464-29489]"
    }, {
      "left" : "Name(String name, Name parent, boolean inExterns)",
      "right" : "Name(String name, Name parent, boolean inExterns)",
      "info" : "MethodDeclaration[29463-29640]:MethodDeclaration[29495-29672]"
    }, {
      "left" : "Name addProperty(String name, boolean inExterns)",
      "right" : "Name addProperty(String name, boolean inExterns)",
      "info" : "MethodDeclaration[29646-29869]:MethodDeclaration[29678-29901]"
    }, {
      "left" : "String getBaseName()",
      "right" : "String getBaseName()",
      "info" : "MethodDeclaration[29875-29926]:MethodDeclaration[29907-29958]"
    }, {
      "left" : "public String getName()",
      "right" : "public String getName()",
      "info" : "MethodDeclaration[29932-30005]:MethodDeclaration[29964-30037]"
    }, {
      "left" : "String getFullName()",
      "right" : "String getFullName()",
      "info" : "MethodDeclaration[30011-30119]:MethodDeclaration[30043-30151]"
    }, {
      "left" : "public Ref getDeclaration()",
      "right" : "public Ref getDeclaration()",
      "info" : "MethodDeclaration[30125-30200]:MethodDeclaration[30157-30232]"
    }, {
      "left" : "public boolean isTypeInferred()",
      "right" : "public boolean isTypeInferred()",
      "info" : "MethodDeclaration[30206-30279]:MethodDeclaration[30238-30311]"
    }, {
      "left" : "public JSType getType()",
      "right" : "public JSType getType()",
      "info" : "MethodDeclaration[30285-30349]:MethodDeclaration[30317-30381]"
    }, {
      "left" : "void addRef(Ref ref)",
      "right" : "void addRef(Ref ref)",
      "info" : "MethodDeclaration[30355-31118]:MethodDeclaration[30387-31150]"
    }, {
      "left" : "void removeRef(Ref ref)",
      "right" : "void removeRef(Ref ref)",
      "info" : "MethodDeclaration[31124-32159]:MethodDeclaration[31156-32191]"
    }, {
      "left" : "List<Ref> getRefs()",
      "right" : "List<Ref> getRefs()",
      "info" : "MethodDeclaration[32165-32252]:MethodDeclaration[32197-32284]"
    }, {
      "left" : "void addRefInternal(Ref ref)",
      "right" : "void addRefInternal(Ref ref)",
      "info" : "MethodDeclaration[32258-32386]:MethodDeclaration[32290-32418]"
    }, {
      "left" : "boolean canEliminate()",
      "right" : "boolean canEliminate()",
      "info" : "MethodDeclaration[32392-32686]:MethodDeclaration[32424-32718]"
    }, {
      "left" : "boolean isSimpleStubDeclaration()",
      "right" : "boolean isSimpleStubDeclaration()",
      "info" : "MethodDeclaration[32692-32955]:MethodDeclaration[32724-32987]"
    }, {
      "left" : "boolean canCollapse()",
      "right" : "boolean canCollapse()",
      "info" : "MethodDeclaration[32961-33212]:MethodDeclaration[32993-33244]"
    }, {
      "left" : "boolean isGetOrSetDefinition()",
      "right" : "boolean isGetOrSetDefinition()",
      "info" : "MethodDeclaration[33218-33317]:MethodDeclaration[33250-33349]"
    }, {
      "left" : "boolean canCollapseUnannotatedChildNames()",
      "right" : "boolean canCollapseUnannotatedChildNames()",
      "info" : "MethodDeclaration[33323-34344]:MethodDeclaration[33355-34376]"
    }, {
      "left" : "boolean shouldKeepKeys()",
      "right" : "boolean shouldKeepKeys()",
      "info" : "MethodDeclaration[34350-34513]:MethodDeclaration[34382-34545]"
    }, {
      "left" : "boolean needsToBeStubbed()",
      "right" : "boolean needsToBeStubbed()",
      "info" : "MethodDeclaration[34519-34600]:MethodDeclaration[34551-34632]"
    }, {
      "left" : "void setDeclaredType()",
      "right" : "void setDeclaredType()",
      "info" : "MethodDeclaration[34606-34816]:MethodDeclaration[34638-34848]"
    }, {
      "left" : "boolean isDeclaredType()",
      "right" : "boolean isDeclaredType()",
      "info" : "MethodDeclaration[34822-34881]:MethodDeclaration[34854-34913]"
    }, {
      "left" : "boolean isNamespace()",
      "right" : "boolean isNamespace()",
      "info" : "MethodDeclaration[34887-35346]:MethodDeclaration[34919-35378]"
    }, {
      "left" : "boolean isSimpleName()",
      "right" : "boolean isSimpleName()",
      "info" : "MethodDeclaration[35352-35516]:MethodDeclaration[35384-35548]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[35522-35778]:MethodDeclaration[35554-35810]"
    }, {
      "left" : "public JSDocInfo getJSDocInfo()",
      "right" : "public JSDocInfo getJSDocInfo()",
      "info" : "MethodDeclaration[35784-35859]:MethodDeclaration[35816-35891]"
    }, {
      "left" : "private static JSDocInfo getDocInfoForDeclaration(Ref ref)",
      "right" : "private static JSDocInfo getDocInfoForDeclaration(Ref ref)",
      "info" : "MethodDeclaration[35865-36421]:MethodDeclaration[35897-36453]"
    }, {
      "left" : "Ref",
      "right" : "Ref",
      "info" : "TypeDeclaration[36509-39725]:TypeDeclaration[36541-39757]"
    }, {
      "left" : "enum : Type",
      "right" : "enum : Type",
      "info" : "EnumDeclaration[36843-37228]:EnumDeclaration[36875-37260]"
    }, {
      "left" : "Node node;",
      "right" : "Node node;",
      "info" : "FieldDeclaration[37234-37244]:FieldDeclaration[37266-37276]"
    }, {
      "left" : "final JSModule module;",
      "right" : "final JSModule module;",
      "info" : "FieldDeclaration[37249-37271]:FieldDeclaration[37281-37303]"
    }, {
      "left" : "final StaticSourceFile source;",
      "right" : "final StaticSourceFile source;",
      "info" : "FieldDeclaration[37276-37306]:FieldDeclaration[37308-37338]"
    }, {
      "left" : "final Name name;",
      "right" : "final Name name;",
      "info" : "FieldDeclaration[37311-37327]:FieldDeclaration[37343-37359]"
    }, {
      "left" : "final Type type;",
      "right" : "final Type type;",
      "info" : "FieldDeclaration[37332-37348]:FieldDeclaration[37364-37380]"
    }, {
      "left" : "final Scope scope;",
      "right" : "final Scope scope;",
      "info" : "FieldDeclaration[37353-37371]:FieldDeclaration[37385-37403]"
    }, {
      "left" : "final int preOrderIndex;",
      "right" : "final int preOrderIndex;",
      "info" : "FieldDeclaration[37376-37400]:FieldDeclaration[37408-37432]"
    }, {
      "left" : "private Ref twin = null;",
      "right" : "private Ref twin = null;",
      "info" : "FieldDeclaration[37406-37684]:FieldDeclaration[37438-37716]"
    }, {
      "left" : "Ref(JSModule module, Scope scope, Node node, Name name, Type type, int index)",
      "right" : "Ref(JSModule module, Scope scope, Node node, Name name, Type type, int index)",
      "info" : "MethodDeclaration[37690-38047]:MethodDeclaration[37722-38079]"
    }, {
      "left" : "private Ref(Ref original, Type type, int index)",
      "right" : "private Ref(Ref original, Type type, int index)",
      "info" : "MethodDeclaration[38053-38341]:MethodDeclaration[38085-38373]"
    }, {
      "left" : "private Ref(Type type, int index)",
      "right" : "private Ref(Type type, int index)",
      "info" : "MethodDeclaration[38347-38547]:MethodDeclaration[38379-38579]"
    }, {
      "left" : "public Node getNode()",
      "right" : "public Node getNode()",
      "info" : "MethodDeclaration[38553-38615]:MethodDeclaration[38585-38647]"
    }, {
      "left" : "public StaticSourceFile getSourceFile()",
      "right" : "public StaticSourceFile getSourceFile()",
      "info" : "MethodDeclaration[38621-38703]:MethodDeclaration[38653-38735]"
    }, {
      "left" : "public StaticSlot<JSType> getSymbol()",
      "right" : "public StaticSlot<JSType> getSymbol()",
      "info" : "MethodDeclaration[38709-38787]:MethodDeclaration[38741-38819]"
    }, {
      "left" : "JSModule getModule()",
      "right" : "JSModule getModule()",
      "info" : "MethodDeclaration[38793-38842]:MethodDeclaration[38825-38874]"
    }, {
      "left" : "String getSourceName()",
      "right" : "String getSourceName()",
      "info" : "MethodDeclaration[38848-38931]:MethodDeclaration[38880-38963]"
    }, {
      "left" : "Ref getTwin()",
      "right" : "Ref getTwin()",
      "info" : "MethodDeclaration[38937-38977]:MethodDeclaration[38969-39009]"
    }, {
      "left" : "boolean isSet()",
      "right" : "boolean isSet()",
      "info" : "MethodDeclaration[38983-39080]:MethodDeclaration[39015-39112]"
    }, {
      "left" : "static void markTwins(Ref a, Ref b)",
      "right" : "static void markTwins(Ref a, Ref b)",
      "info" : "MethodDeclaration[39086-39430]:MethodDeclaration[39118-39462]"
    }, {
      "left" : "Ref cloneAndReclassify(Type type)",
      "right" : "Ref cloneAndReclassify(Type type)",
      "info" : "MethodDeclaration[39436-39634]:MethodDeclaration[39468-39666]"
    }, {
      "left" : "static Ref createRefForTesting(Type type)",
      "right" : "static Ref createRefForTesting(Type type)",
      "info" : "MethodDeclaration[39640-39721]:MethodDeclaration[39672-39753]"
    }, {
      "left" : "Tracker",
      "right" : "Tracker",
      "info" : "TypeDeclaration[39730-41582]:TypeDeclaration[39762-41614]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[40062-40102]:FieldDeclaration[40094-40134]"
    }, {
      "left" : "private final PrintStream stream;",
      "right" : "private final PrintStream stream;",
      "info" : "FieldDeclaration[40107-40140]:FieldDeclaration[40139-40172]"
    }, {
      "left" : "private final Predicate<String> isInterestingSymbol;",
      "right" : "private final Predicate<String> isInterestingSymbol;",
      "info" : "FieldDeclaration[40145-40197]:FieldDeclaration[40177-40229]"
    }, {
      "left" : "private Set<String> previousSymbolsInTree = ImmutableSet.of();",
      "right" : "private Set<String> previousSymbolsInTree = ImmutableSet.of();",
      "info" : "FieldDeclaration[40203-40265]:FieldDeclaration[40235-40297]"
    }, {
      "left" : "Tracker(AbstractCompiler compiler, PrintStream stream,\n        Predicate<String> isInterestingSymbol)",
      "right" : "Tracker(AbstractCompiler compiler, PrintStream stream,\n        Predicate<String> isInterestingSymbol)",
      "info" : "MethodDeclaration[40271-40659]:MethodDeclaration[40303-40691]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[40665-41578]:MethodDeclaration[40697-41610]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2981-3018]:Block[2981-3018]"
    }, {
      "left" : "this(compiler, null, root);",
      "right" : "this(compiler, null, root);",
      "info" : "ConstructorInvocation[2987-3014]:ConstructorInvocation[2987-3014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3674-3767]:Block[3674-3767]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[3680-3705]:ExpressionStatement[3680-3705]"
    }, {
      "left" : "this.externsRoot = externsRoot;",
      "right" : "this.externsRoot = externsRoot;",
      "info" : "ExpressionStatement[3710-3741]:ExpressionStatement[3710-3741]"
    }, {
      "left" : "this.root = root;",
      "right" : "this.root = root;",
      "info" : "ExpressionStatement[3746-3763]:ExpressionStatement[3746-3763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3796-3833]:Block[3796-3833]"
    }, {
      "left" : "return externsRoot != null;",
      "right" : "return externsRoot != null;",
      "info" : "ReturnStatement[3802-3829]:ReturnStatement[3802-3829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3875-3909]:Block[3875-3909]"
    }, {
      "left" : "return root.getParent();",
      "right" : "return root.getParent();",
      "info" : "ReturnStatement[3881-3905]:ReturnStatement[3881-3905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3969-3991]:Block[3969-3991]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3975-3987]:ReturnStatement[3975-3987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4040-4074]:Block[4040-4074]"
    }, {
      "left" : "return getOwnSlot(name);",
      "right" : "return getOwnSlot(name);",
      "info" : "ReturnStatement[4046-4070]:ReturnStatement[4046-4070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4126-4184]:Block[4126-4184]"
    }, {
      "left" : "ensureGenerated();",
      "right" : "ensureGenerated();",
      "info" : "ExpressionStatement[4132-4150]:ExpressionStatement[4132-4150]"
    }, {
      "left" : "return nameMap.get(name);",
      "right" : "return nameMap.get(name);",
      "info" : "ReturnStatement[4155-4180]:ReturnStatement[4155-4180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4230-4307]:Block[4230-4307]"
    }, {
      "left" : "return compiler.getTypeRegistry().getNativeObjectType(GLOBAL_THIS);",
      "right" : "return compiler.getTypeRegistry().getNativeObjectType(GLOBAL_THIS);",
      "info" : "ReturnStatement[4236-4303]:ReturnStatement[4236-4303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4369-4454]:Block[4369-4454]"
    }, {
      "left" : "ensureGenerated();",
      "right" : "ensureGenerated();",
      "info" : "ExpressionStatement[4375-4393]:ExpressionStatement[4375-4393]"
    }, {
      "left" : "return Collections.unmodifiableList(slot.getRefs());",
      "right" : "return Collections.unmodifiableList(slot.getRefs());",
      "info" : "ReturnStatement[4398-4450]:ReturnStatement[4398-4450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4517-4539]:Block[4517-4539]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[4523-4535]:ReturnStatement[4523-4535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4593-4693]:Block[4593-4693]"
    }, {
      "left" : "ensureGenerated();",
      "right" : "ensureGenerated();",
      "info" : "ExpressionStatement[4599-4617]:ExpressionStatement[4599-4617]"
    }, {
      "left" : "return Collections.unmodifiableCollection(getNameIndex().values());",
      "right" : "return Collections.unmodifiableCollection(getNameIndex().values());",
      "info" : "ReturnStatement[4622-4689]:ReturnStatement[4622-4689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4728-4778]:Block[4728-4778]"
    }, {
      "left" : "if (!generated)",
      "right" : "if (!generated)",
      "info" : "IfStatement[4734-4774]:IfStatement[4734-4774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4750-4774]:Block[4750-4774]"
    }, {
      "left" : "process();",
      "right" : "process();",
      "info" : "ExpressionStatement[4758-4768]:ExpressionStatement[4758-4768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4932-4984]:Block[4932-4984]"
    }, {
      "left" : "ensureGenerated();",
      "right" : "ensureGenerated();",
      "info" : "ExpressionStatement[4938-4956]:ExpressionStatement[4938-4956]"
    }, {
      "left" : "return globalNames;",
      "right" : "return globalNames;",
      "info" : "ReturnStatement[4961-4980]:ReturnStatement[4961-4980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5141-5189]:Block[5141-5189]"
    }, {
      "left" : "ensureGenerated();",
      "right" : "ensureGenerated();",
      "info" : "ExpressionStatement[5147-5165]:ExpressionStatement[5147-5165]"
    }, {
      "left" : "return nameMap;",
      "right" : "return nameMap;",
      "info" : "ReturnStatement[5170-5185]:ReturnStatement[5170-5185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5482-5567]:Block[5482-5567]"
    }, {
      "left" : "this.module = module;",
      "right" : "this.module = module;",
      "info" : "ExpressionStatement[5490-5511]:ExpressionStatement[5490-5511]"
    }, {
      "left" : "this.scope = scope;",
      "right" : "this.scope = scope;",
      "info" : "ExpressionStatement[5518-5537]:ExpressionStatement[5518-5537]"
    }, {
      "left" : "this.node = node;",
      "right" : "this.node = node;",
      "info" : "ExpressionStatement[5544-5561]:ExpressionStatement[5544-5561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5808-6093]:Block[5808-6093]"
    }, {
      "left" : "BuildGlobalNamespace builder = new BuildGlobalNamespace();",
      "right" : "BuildGlobalNamespace builder = new BuildGlobalNamespace();",
      "info" : "VariableDeclarationStatement[5814-5872]:VariableDeclarationStatement[5814-5872]"
    }, {
      "left" : "for (AstChange info : newNodes)",
      "right" : "for (AstChange info : newNodes)",
      "info" : "EnhancedForStatement[5878-6089]:EnhancedForStatement[5878-6089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5910-6089]:Block[5910-6089]"
    }, {
      "left" : "if (!info.node.isQualifiedName() && !NodeUtil.isObjectLitKey(info.node))",
      "right" : "if (!info.node.isQualifiedName() && !NodeUtil.isObjectLitKey(info.node))",
      "info" : "IfStatement[5918-6018]:IfStatement[5918-6018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5991-6018]:Block[5991-6018]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[6001-6010]:ContinueStatement[6001-6010]"
    }, {
      "left" : "scanFromNode(builder, info.module, info.scope, info.node);",
      "right" : "scanFromNode(builder, info.module, info.scope, info.node);",
      "info" : "ExpressionStatement[6025-6083]:ExpressionStatement[6025-6083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6196-6386]:Block[6196-6386]"
    }, {
      "left" : "if (n.isName() || n.isGetProp())",
      "right" : "if (n.isName() || n.isGetProp())",
      "info" : "IfStatement[6244-6343]:IfStatement[6244-6343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6277-6343]:Block[6277-6343]"
    }, {
      "left" : "scanFromNode(builder, module, scope, n.getParent());",
      "right" : "scanFromNode(builder, module, scope, n.getParent());",
      "info" : "ExpressionStatement[6285-6337]:ExpressionStatement[6285-6337]"
    }, {
      "left" : "builder.collect(module, scope, n);",
      "right" : "builder.collect(module, scope, n);",
      "info" : "ExpressionStatement[6348-6382]:ExpressionStatement[6348-6382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6459-6724]:Block[6459-6724]"
    }, {
      "left" : "if (externsRoot != null)",
      "right" : "if (externsRoot != null)",
      "info" : "IfStatement[6465-6602]:IfStatement[6465-6602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6490-6602]:Block[6490-6602]"
    }, {
      "left" : "inExterns = true;",
      "right" : "inExterns = true;",
      "info" : "ExpressionStatement[6498-6515]:ExpressionStatement[6498-6515]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, externsRoot, new BuildGlobalNamespace());",
      "right" : "NodeTraversal.traverse(compiler, externsRoot, new BuildGlobalNamespace());",
      "info" : "ExpressionStatement[6522-6596]:ExpressionStatement[6522-6596]"
    }, {
      "left" : "inExterns = false;",
      "right" : "inExterns = false;",
      "info" : "ExpressionStatement[6607-6625]:ExpressionStatement[6607-6625]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, new BuildGlobalNamespace());",
      "right" : "NodeTraversal.traverse(compiler, root, new BuildGlobalNamespace());",
      "info" : "ExpressionStatement[6631-6698]:ExpressionStatement[6631-6698]"
    }, {
      "left" : "generated = true;",
      "right" : "generated = true;",
      "info" : "ExpressionStatement[6703-6720]:ExpressionStatement[6703-6720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7093-7191]:Block[7093-7191]"
    }, {
      "left" : "String topVarName = getTopVarName(name);",
      "right" : "String topVarName = getTopVarName(name);",
      "info" : "VariableDeclarationStatement[7099-7139]:VariableDeclarationStatement[7099-7139]"
    }, {
      "left" : "return isGlobalVarReference(topVarName, s);",
      "right" : "return isGlobalVarReference(topVarName, s);",
      "info" : "ReturnStatement[7144-7187]:ReturnStatement[7144-7187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7444-7566]:Block[7444-7566]"
    }, {
      "left" : "int firstDotIndex = name.indexOf('.');",
      "right" : "int firstDotIndex = name.indexOf('.');",
      "info" : "VariableDeclarationStatement[7450-7488]:VariableDeclarationStatement[7450-7488]"
    }, {
      "left" : "return firstDotIndex == -1 ? name : name.substring(0, firstDotIndex);",
      "right" : "return firstDotIndex == -1 ? name : name.substring(0, firstDotIndex);",
      "info" : "ReturnStatement[7493-7562]:ReturnStatement[7493-7562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7926-8091]:Block[7926-8091]"
    }, {
      "left" : "Scope.Var v = s.getVar(name);",
      "right" : "Scope.Var v = s.getVar(name);",
      "info" : "VariableDeclarationStatement[7932-7961]:VariableDeclarationStatement[7932-7961]"
    }, {
      "left" : "if (v == null && externsScope != null)",
      "right" : "if (v == null && externsScope != null)",
      "info" : "IfStatement[7966-8049]:IfStatement[7966-8049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8005-8049]:Block[8005-8049]"
    }, {
      "left" : "v = externsScope.getVar(name);",
      "right" : "v = externsScope.getVar(name);",
      "info" : "ExpressionStatement[8013-8043]:ExpressionStatement[8013-8043]"
    }, {
      "left" : "return v != null && !v.isLocal();",
      "right" : "return v != null && !v.isLocal();",
      "info" : "ReturnStatement[8054-8087]:ReturnStatement[8054-8087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8271-8310]:Block[8271-8310]"
    }, {
      "left" : "return s.getParent() == null;",
      "right" : "return s.getParent() == null;",
      "info" : "ReturnStatement[8277-8306]:ReturnStatement[8277-8306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8582-8589]:Block[8582-8589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8665-8667]:Block[8665-8667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8803-9122]:Block[8803-9122]"
    }, {
      "left" : "if (externsRoot != null && n == externsRoot)",
      "right" : "if (externsRoot != null && n == externsRoot)",
      "info" : "IfStatement[8957-9048]:IfStatement[8957-9048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9002-9048]:Block[9002-9048]"
    }, {
      "left" : "externsScope = t.getScope();",
      "right" : "externsScope = t.getScope();",
      "info" : "ExpressionStatement[9012-9040]:ExpressionStatement[9012-9040]"
    }, {
      "left" : "collect(t.getModule(), t.getScope(), n);",
      "right" : "collect(t.getModule(), t.getScope(), n);",
      "info" : "ExpressionStatement[9056-9096]:ExpressionStatement[9056-9096]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9104-9116]:ReturnStatement[9104-9116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9186-13028]:Block[9186-13060]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[9194-9222]:VariableDeclarationStatement[9194-9222]"
    }, {
      "left" : "String name;",
      "right" : "String name;",
      "info" : "VariableDeclarationStatement[9230-9242]:VariableDeclarationStatement[9230-9242]"
    }, {
      "left" : "boolean isSet = false;",
      "right" : "boolean isSet = false;",
      "info" : "VariableDeclarationStatement[9249-9271]:VariableDeclarationStatement[9249-9271]"
    }, {
      "left" : "Name.Type type = Name.Type.OTHER;",
      "right" : "Name.Type type = Name.Type.OTHER;",
      "info" : "VariableDeclarationStatement[9278-9311]:VariableDeclarationStatement[9278-9311]"
    }, {
      "left" : "boolean isPropAssign = false;",
      "right" : "boolean isPropAssign = false;",
      "info" : "VariableDeclarationStatement[9318-9347]:VariableDeclarationStatement[9318-9347]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.GETTER_DEF:\n        case Token.SETTER_DEF:\n        case Token.STRING_KEY:\n          // This may be a key in an object literal declaration.\n          name = null;\n          if (parent != null && parent.isObjectLit()) {\n            name = getNameForObjLitKey(n);\n          }\n          if (name == null) {\n            return;\n          }\n          isSet = true;\n          switch (n.getType()) {\n            case Token.STRING_KEY:\n              type = getValueType(n.getFirstChild());\n              break;\n            case Token.GETTER_DEF:\n              type = Name.Type.GET;\n              break;\n            case Token.SETTER_DEF:\n              type = Name.Type.SET;\n              break;\n            default:\n              throw new IllegalStateException(\"unexpected:\" + n);\n          }\n          break;\n        case Token.NAME:\n          // This may be a variable get or set.\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.VAR:\n                isSet = true;\n                Node rvalue = n.getFirstChild();\n                type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n                break;\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                }\n                break;\n              case Token.GETPROP:\n                return;\n              case Token.FUNCTION:\n                Node gramps = parent.getParent();\n                if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n                  return;\n                }\n                isSet = true;\n                type = Name.Type.FUNCTION;\n                break;\n              case Token.INC:\n              case Token.DEC:\n                isSet = true;\n                type = Name.Type.OTHER;\n                break;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                }\n            }\n          }\n          name = n.getString();\n          break;\n        case Token.GETPROP:\n          // This may be a namespaced name get or set.\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                  isPropAssign = true;\n                }\n                break;\n              case Token.INC:\n              case Token.DEC:\n                isSet = true;\n                type = Name.Type.OTHER;\n                break;\n              case Token.GETPROP:\n                return;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                }\n            }\n          }\n          name = n.getQualifiedName();\n          if (name == null) {\n            return;\n          }\n          break;\n        default:\n          return;\n      }",
      "right" : "switch (n.getType()) {\n        case Token.GETTER_DEF:\n        case Token.SETTER_DEF:\n        case Token.STRING_KEY:\n          // This may be a key in an object literal declaration.\n          name = null;\n          if (parent != null && parent.isObjectLit()) {\n            name = getNameForObjLitKey(n);\n          }\n          if (name == null) {\n            return;\n          }\n          isSet = true;\n          switch (n.getType()) {\n            case Token.STRING_KEY:\n              type = getValueType(n.getFirstChild());\n              break;\n            case Token.GETTER_DEF:\n              type = Name.Type.GET;\n              break;\n            case Token.SETTER_DEF:\n              type = Name.Type.SET;\n              break;\n            default:\n              throw new IllegalStateException(\"unexpected:\" + n);\n          }\n          break;\n        case Token.NAME:\n          // This may be a variable get or set.\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.VAR:\n                isSet = true;\n                Node rvalue = n.getFirstChild();\n                type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n                break;\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                }\n                break;\n              case Token.GETPROP:\n                return;\n              case Token.FUNCTION:\n                Node gramps = parent.getParent();\n                if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n                  return;\n                }\n                isSet = true;\n                type = Name.Type.FUNCTION;\n                break;\n              case Token.CATCH:\n              case Token.INC:\n              case Token.DEC:\n                isSet = true;\n                type = Name.Type.OTHER;\n                break;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                }\n            }\n          }\n          name = n.getString();\n          break;\n        case Token.GETPROP:\n          // This may be a namespaced name get or set.\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                  isPropAssign = true;\n                }\n                break;\n              case Token.INC:\n              case Token.DEC:\n                isSet = true;\n                type = Name.Type.OTHER;\n                break;\n              case Token.GETPROP:\n                return;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                }\n            }\n          }\n          name = n.getQualifiedName();\n          if (name == null) {\n            return;\n          }\n          break;\n        default:\n          return;\n      }",
      "info" : "SwitchStatement[9355-12597]:SwitchStatement[9355-12629]"
    }, {
      "left" : "case Token.GETTER_DEF:",
      "right" : "case Token.GETTER_DEF:",
      "info" : "SwitchCase[9386-9408]:SwitchCase[9386-9408]"
    }, {
      "left" : "case Token.SETTER_DEF:",
      "right" : "case Token.SETTER_DEF:",
      "info" : "SwitchCase[9417-9439]:SwitchCase[9417-9439]"
    }, {
      "left" : "case Token.STRING_KEY:",
      "right" : "case Token.STRING_KEY:",
      "info" : "SwitchCase[9448-9470]:SwitchCase[9448-9470]"
    }, {
      "left" : "name = null;",
      "right" : "name = null;",
      "info" : "ExpressionStatement[9546-9558]:ExpressionStatement[9546-9558]"
    }, {
      "left" : "if (parent != null && parent.isObjectLit())",
      "right" : "if (parent != null && parent.isObjectLit())",
      "info" : "IfStatement[9569-9669]:IfStatement[9569-9669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9613-9669]:Block[9613-9669]"
    }, {
      "left" : "name = getNameForObjLitKey(n);",
      "right" : "name = getNameForObjLitKey(n);",
      "info" : "ExpressionStatement[9627-9657]:ExpressionStatement[9627-9657]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[9680-9731]:IfStatement[9680-9731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9698-9731]:Block[9698-9731]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9712-9719]:ReturnStatement[9712-9719]"
    }, {
      "left" : "isSet = true;",
      "right" : "isSet = true;",
      "info" : "ExpressionStatement[9742-9755]:ExpressionStatement[9742-9755]"
    }, {
      "left" : "switch (n.getType()) {\n            case Token.STRING_KEY:\n              type = getValueType(n.getFirstChild());\n              break;\n            case Token.GETTER_DEF:\n              type = Name.Type.GET;\n              break;\n            case Token.SETTER_DEF:\n              type = Name.Type.SET;\n              break;\n            default:\n              throw new IllegalStateException(\"unexpected:\" + n);\n          }",
      "right" : "switch (n.getType()) {\n            case Token.STRING_KEY:\n              type = getValueType(n.getFirstChild());\n              break;\n            case Token.GETTER_DEF:\n              type = Name.Type.GET;\n              break;\n            case Token.SETTER_DEF:\n              type = Name.Type.SET;\n              break;\n            default:\n              throw new IllegalStateException(\"unexpected:\" + n);\n          }",
      "info" : "SwitchStatement[9766-10181]:SwitchStatement[9766-10181]"
    }, {
      "left" : "case Token.STRING_KEY:",
      "right" : "case Token.STRING_KEY:",
      "info" : "SwitchCase[9801-9823]:SwitchCase[9801-9823]"
    }, {
      "left" : "type = getValueType(n.getFirstChild());",
      "right" : "type = getValueType(n.getFirstChild());",
      "info" : "ExpressionStatement[9838-9877]:ExpressionStatement[9838-9877]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9892-9898]:BreakStatement[9892-9898]"
    }, {
      "left" : "case Token.GETTER_DEF:",
      "right" : "case Token.GETTER_DEF:",
      "info" : "SwitchCase[9911-9933]:SwitchCase[9911-9933]"
    }, {
      "left" : "type = Name.Type.GET;",
      "right" : "type = Name.Type.GET;",
      "info" : "ExpressionStatement[9948-9969]:ExpressionStatement[9948-9969]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9984-9990]:BreakStatement[9984-9990]"
    }, {
      "left" : "case Token.SETTER_DEF:",
      "right" : "case Token.SETTER_DEF:",
      "info" : "SwitchCase[10003-10025]:SwitchCase[10003-10025]"
    }, {
      "left" : "type = Name.Type.SET;",
      "right" : "type = Name.Type.SET;",
      "info" : "ExpressionStatement[10040-10061]:ExpressionStatement[10040-10061]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10076-10082]:BreakStatement[10076-10082]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[10095-10103]:SwitchCase[10095-10103]"
    }, {
      "left" : "throw new IllegalStateException(\"unexpected:\" + n);",
      "right" : "throw new IllegalStateException(\"unexpected:\" + n);",
      "info" : "ThrowStatement[10118-10169]:ThrowStatement[10118-10169]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10192-10198]:BreakStatement[10192-10198]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[10207-10223]:SwitchCase[10207-10223]"
    }, {
      "left" : "if (parent != null)",
      "right" : "if (parent != null)",
      "info" : "IfStatement[10282-11526]:IfStatement[11701-12468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10302-11526]:Block[11721-12468]"
    }, {
      "left" : "switch (parent.getType()) {\n              case Token.VAR:\n                isSet = true;\n                Node rvalue = n.getFirstChild();\n                type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n                break;\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                }\n                break;\n              case Token.GETPROP:\n                return;\n              case Token.FUNCTION:\n                Node gramps = parent.getParent();\n                if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n                  return;\n                }\n                isSet = true;\n                type = Name.Type.FUNCTION;\n                break;\n              case Token.INC:\n              case Token.DEC:\n                isSet = true;\n                type = Name.Type.OTHER;\n                break;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                }\n            }",
      "right" : "switch (parent.getType()) {\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                  isPropAssign = true;\n                }\n                break;\n              case Token.INC:\n              case Token.DEC:\n                isSet = true;\n                type = Name.Type.OTHER;\n                break;\n              case Token.GETPROP:\n                return;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                }\n            }",
      "info" : "SwitchStatement[10316-11514]:SwitchStatement[11735-12456]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[10358-10373]:SwitchCase[10358-10373]"
    }, {
      "left" : "isSet = true;",
      "right" : "isSet = true;",
      "info" : "ExpressionStatement[10390-10403]:ExpressionStatement[10390-10403]"
    }, {
      "left" : "Node rvalue = n.getFirstChild();",
      "right" : "Node rvalue = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[10420-10452]:VariableDeclarationStatement[10420-10452]"
    }, {
      "left" : "type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);",
      "right" : "type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);",
      "info" : "ExpressionStatement[10469-10532]:ExpressionStatement[10469-10532]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10549-10555]:BreakStatement[10549-10555]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[10570-10588]:SwitchCase[10570-10588]"
    }, {
      "left" : "if (parent.getFirstChild() == n)",
      "right" : "if (parent.getFirstChild() == n)",
      "info" : "IfStatement[10605-10741]:IfStatement[10605-10741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10638-10741]:Block[10638-10741]"
    }, {
      "left" : "isSet = true;",
      "right" : "isSet = true;",
      "info" : "ExpressionStatement[10658-10671]:ExpressionStatement[10658-10671]"
    }, {
      "left" : "type = getValueType(n.getNext());",
      "right" : "type = getValueType(n.getNext());",
      "info" : "ExpressionStatement[10690-10723]:ExpressionStatement[10690-10723]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10758-10764]:BreakStatement[10758-10764]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[10779-10798]:SwitchCase[10779-10798]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10815-10822]:ReturnStatement[10815-10822]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[10837-10857]:SwitchCase[10837-10857]"
    }, {
      "left" : "Node gramps = parent.getParent();",
      "right" : "Node gramps = parent.getParent();",
      "info" : "VariableDeclarationStatement[10874-10907]:VariableDeclarationStatement[10874-10907]"
    }, {
      "left" : "if (gramps == null || NodeUtil.isFunctionExpression(parent))",
      "right" : "if (gramps == null || NodeUtil.isFunctionExpression(parent))",
      "info" : "IfStatement[10924-11030]:IfStatement[10924-11030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10985-11030]:Block[10985-11030]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11005-11012]:ReturnStatement[11005-11012]"
    }, {
      "left" : "isSet = true;",
      "right" : "isSet = true;",
      "info" : "ExpressionStatement[11047-11060]:ExpressionStatement[11047-11060]"
    }, {
      "left" : "type = Name.Type.FUNCTION;",
      "right" : "type = Name.Type.FUNCTION;",
      "info" : "ExpressionStatement[11077-11103]:ExpressionStatement[11077-11103]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11120-11126]:BreakStatement[11120-11126]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[11141-11156]:SwitchCase[11173-11188]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[11171-11186]:SwitchCase[11203-11218]"
    }, {
      "left" : "isSet = true;",
      "right" : "isSet = true;",
      "info" : "ExpressionStatement[11203-11216]:ExpressionStatement[11235-11248]"
    }, {
      "left" : "type = Name.Type.OTHER;",
      "right" : "type = Name.Type.OTHER;",
      "info" : "ExpressionStatement[11233-11256]:ExpressionStatement[11265-11288]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11273-11279]:BreakStatement[11305-11311]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11294-11302]:SwitchCase[11326-11334]"
    }, {
      "left" : "if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n)",
      "right" : "if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n)",
      "info" : "IfStatement[11319-11500]:IfStatement[11351-11532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11407-11500]:Block[11439-11532]"
    }, {
      "left" : "isSet = true;",
      "right" : "isSet = true;",
      "info" : "ExpressionStatement[11427-11440]:ExpressionStatement[11459-11472]"
    }, {
      "left" : "type = Name.Type.OTHER;",
      "right" : "type = Name.Type.OTHER;",
      "info" : "ExpressionStatement[11459-11482]:ExpressionStatement[11491-11514]"
    }, {
      "left" : "name = n.getString();",
      "right" : "name = n.getString();",
      "info" : "ExpressionStatement[11537-11558]:ExpressionStatement[11569-11590]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11569-11575]:BreakStatement[11601-11607]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[11584-11603]:SwitchCase[11616-11635]"
    }, {
      "left" : "if (parent != null)",
      "right" : "if (parent != null)",
      "info" : "IfStatement[11669-12436]:IfStatement[10282-11558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11689-12436]:Block[10302-11558]"
    }, {
      "left" : "switch (parent.getType()) {\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                  isPropAssign = true;\n                }\n                break;\n              case Token.INC:\n              case Token.DEC:\n                isSet = true;\n                type = Name.Type.OTHER;\n                break;\n              case Token.GETPROP:\n                return;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                }\n            }",
      "right" : "switch (parent.getType()) {\n              case Token.VAR:\n                isSet = true;\n                Node rvalue = n.getFirstChild();\n                type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n                break;\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                }\n                break;\n              case Token.GETPROP:\n                return;\n              case Token.FUNCTION:\n                Node gramps = parent.getParent();\n                if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n                  return;\n                }\n                isSet = true;\n                type = Name.Type.FUNCTION;\n                break;\n              case Token.CATCH:\n              case Token.INC:\n              case Token.DEC:\n                isSet = true;\n                type = Name.Type.OTHER;\n                break;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                }\n            }",
      "info" : "SwitchStatement[11703-12424]:SwitchStatement[10316-11546]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[11745-11763]:SwitchCase[11777-11795]"
    }, {
      "left" : "if (parent.getFirstChild() == n)",
      "right" : "if (parent.getFirstChild() == n)",
      "info" : "IfStatement[11780-11955]:IfStatement[11812-11987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11813-11955]:Block[11845-11987]"
    }, {
      "left" : "isSet = true;",
      "right" : "isSet = true;",
      "info" : "ExpressionStatement[11833-11846]:ExpressionStatement[11865-11878]"
    }, {
      "left" : "type = getValueType(n.getNext());",
      "right" : "type = getValueType(n.getNext());",
      "info" : "ExpressionStatement[11865-11898]:ExpressionStatement[11897-11930]"
    }, {
      "left" : "isPropAssign = true;",
      "right" : "isPropAssign = true;",
      "info" : "ExpressionStatement[11917-11937]:ExpressionStatement[11949-11969]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11972-11978]:BreakStatement[12004-12010]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[11993-12008]:SwitchCase[12025-12040]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[12023-12038]:SwitchCase[12055-12070]"
    }, {
      "left" : "isSet = true;",
      "right" : "isSet = true;",
      "info" : "ExpressionStatement[12055-12068]:ExpressionStatement[12087-12100]"
    }, {
      "left" : "type = Name.Type.OTHER;",
      "right" : "type = Name.Type.OTHER;",
      "info" : "ExpressionStatement[12085-12108]:ExpressionStatement[12117-12140]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12125-12131]:BreakStatement[12157-12163]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[12146-12165]:SwitchCase[12178-12197]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[12182-12189]:ReturnStatement[12214-12221]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[12204-12212]:SwitchCase[12236-12244]"
    }, {
      "left" : "if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n)",
      "right" : "if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n)",
      "info" : "IfStatement[12229-12410]:IfStatement[12261-12442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12317-12410]:Block[12349-12442]"
    }, {
      "left" : "isSet = true;",
      "right" : "isSet = true;",
      "info" : "ExpressionStatement[12337-12350]:ExpressionStatement[12369-12382]"
    }, {
      "left" : "type = Name.Type.OTHER;",
      "right" : "type = Name.Type.OTHER;",
      "info" : "ExpressionStatement[12369-12392]:ExpressionStatement[12401-12424]"
    }, {
      "left" : "name = n.getQualifiedName();",
      "right" : "name = n.getQualifiedName();",
      "info" : "ExpressionStatement[12447-12475]:ExpressionStatement[12479-12507]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[12486-12537]:IfStatement[12518-12569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12504-12537]:Block[12536-12569]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[12518-12525]:ReturnStatement[12550-12557]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12548-12554]:BreakStatement[12580-12586]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[12563-12571]:SwitchCase[12595-12603]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[12582-12589]:ReturnStatement[12614-12621]"
    }, {
      "left" : "if (!isGlobalNameReference(name, scope))",
      "right" : "if (!isGlobalNameReference(name, scope))",
      "info" : "IfStatement[12654-12720]:IfStatement[12686-12752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12695-12720]:Block[12727-12752]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[12705-12712]:ReturnStatement[12737-12744]"
    }, {
      "left" : "if (isSet)",
      "right" : "if (isSet)",
      "info" : "IfStatement[12728-13022]:IfStatement[12760-13054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12739-12956]:Block[12771-12988]"
    }, {
      "left" : "if (isGlobalScope(scope))",
      "right" : "if (isGlobalScope(scope))",
      "info" : "IfStatement[12749-12948]:IfStatement[12781-12980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12775-12869]:Block[12807-12901]"
    }, {
      "left" : "handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);",
      "right" : "handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);",
      "info" : "ExpressionStatement[12787-12859]:ExpressionStatement[12819-12891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12875-12948]:Block[12907-12980]"
    }, {
      "left" : "handleSetFromLocal(module, scope, n, parent, name);",
      "right" : "handleSetFromLocal(module, scope, n, parent, name);",
      "info" : "ExpressionStatement[12887-12938]:ExpressionStatement[12919-12970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12962-13022]:Block[12994-13054]"
    }, {
      "left" : "handleGet(module, scope, n, parent, name);",
      "right" : "handleGet(module, scope, n, parent, name);",
      "info" : "ExpressionStatement[12972-13014]:ExpressionStatement[13004-13046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13793-15199]:Block[13825-15231]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[13801-13829]:VariableDeclarationStatement[13833-13861]"
    }, {
      "left" : "Preconditions.checkState(parent.isObjectLit());",
      "right" : "Preconditions.checkState(parent.isObjectLit());",
      "info" : "ExpressionStatement[13836-13883]:ExpressionStatement[13868-13915]"
    }, {
      "left" : "Node gramps = parent.getParent();",
      "right" : "Node gramps = parent.getParent();",
      "info" : "VariableDeclarationStatement[13891-13924]:VariableDeclarationStatement[13923-13956]"
    }, {
      "left" : "if (gramps == null)",
      "right" : "if (gramps == null)",
      "info" : "IfStatement[13931-13981]:IfStatement[13963-14013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13951-13981]:Block[13983-14013]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[13961-13973]:ReturnStatement[13993-14005]"
    }, {
      "left" : "Node greatGramps = gramps.getParent();",
      "right" : "Node greatGramps = gramps.getParent();",
      "info" : "VariableDeclarationStatement[13989-14027]:VariableDeclarationStatement[14021-14059]"
    }, {
      "left" : "String name;",
      "right" : "String name;",
      "info" : "VariableDeclarationStatement[14034-14046]:VariableDeclarationStatement[14066-14078]"
    }, {
      "left" : "switch (gramps.getType()) {\n        case Token.NAME:\n          // VAR\n          //   NAME (gramps)\n          //     OBJLIT (parent)\n          //       STRING (n)\n          if (greatGramps == null || !greatGramps.isVar()) {\n            return null;\n          }\n          name = gramps.getString();\n          break;\n        case Token.ASSIGN:\n          // ASSIGN (gramps)\n          //   NAME|GETPROP\n          //   OBJLIT (parent)\n          //     STRING (n)\n          Node lvalue = gramps.getFirstChild();\n          name = lvalue.getQualifiedName();\n          break;\n        case Token.STRING_KEY:\n          // OBJLIT\n          //   STRING (gramps)\n          //     OBJLIT (parent)\n          //       STRING (n)\n          if (greatGramps != null &&\n              greatGramps.isObjectLit()) {\n            name = getNameForObjLitKey(gramps);\n          } else {\n            return null;\n          }\n          break;\n        default:\n          return null;\n      }",
      "right" : "switch (gramps.getType()) {\n        case Token.NAME:\n          // VAR\n          //   NAME (gramps)\n          //     OBJLIT (parent)\n          //       STRING (n)\n          if (greatGramps == null || !greatGramps.isVar()) {\n            return null;\n          }\n          name = gramps.getString();\n          break;\n        case Token.ASSIGN:\n          // ASSIGN (gramps)\n          //   NAME|GETPROP\n          //   OBJLIT (parent)\n          //     STRING (n)\n          Node lvalue = gramps.getFirstChild();\n          name = lvalue.getQualifiedName();\n          break;\n        case Token.STRING_KEY:\n          // OBJLIT\n          //   STRING (gramps)\n          //     OBJLIT (parent)\n          //       STRING (n)\n          if (greatGramps != null &&\n              greatGramps.isObjectLit()) {\n            name = getNameForObjLitKey(gramps);\n          } else {\n            return null;\n          }\n          break;\n        default:\n          return null;\n      }",
      "info" : "SwitchStatement[14053-15012]:SwitchStatement[14085-15044]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[14089-14105]:SwitchCase[14121-14137]"
    }, {
      "left" : "if (greatGramps == null || !greatGramps.isVar())",
      "right" : "if (greatGramps == null || !greatGramps.isVar())",
      "info" : "IfStatement[14225-14312]:IfStatement[14257-14344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14274-14312]:Block[14306-14344]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[14288-14300]:ReturnStatement[14320-14332]"
    }, {
      "left" : "name = gramps.getString();",
      "right" : "name = gramps.getString();",
      "info" : "ExpressionStatement[14323-14349]:ExpressionStatement[14355-14381]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14360-14366]:BreakStatement[14392-14398]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[14375-14393]:SwitchCase[14407-14425]"
    }, {
      "left" : "Node lvalue = gramps.getFirstChild();",
      "right" : "Node lvalue = gramps.getFirstChild();",
      "info" : "VariableDeclarationStatement[14520-14557]:VariableDeclarationStatement[14552-14589]"
    }, {
      "left" : "name = lvalue.getQualifiedName();",
      "right" : "name = lvalue.getQualifiedName();",
      "info" : "ExpressionStatement[14568-14601]:ExpressionStatement[14600-14633]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14612-14618]:BreakStatement[14644-14650]"
    }, {
      "left" : "case Token.STRING_KEY:",
      "right" : "case Token.STRING_KEY:",
      "info" : "SwitchCase[14627-14649]:SwitchCase[14659-14681]"
    }, {
      "left" : "if (greatGramps != null &&\n              greatGramps.isObjectLit())",
      "right" : "if (greatGramps != null &&\n              greatGramps.isObjectLit())",
      "info" : "IfStatement[14774-14947]:IfStatement[14806-14979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14842-14903]:Block[14874-14935]"
    }, {
      "left" : "name = getNameForObjLitKey(gramps);",
      "right" : "name = getNameForObjLitKey(gramps);",
      "info" : "ExpressionStatement[14856-14891]:ExpressionStatement[14888-14923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14909-14947]:Block[14941-14979]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[14923-14935]:ReturnStatement[14955-14967]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14958-14964]:BreakStatement[14990-14996]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[14973-14981]:SwitchCase[15005-15013]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[14992-15004]:ReturnStatement[15024-15036]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[15019-15174]:IfStatement[15051-15206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15037-15174]:Block[15069-15206]"
    }, {
      "left" : "String key = n.getString();",
      "right" : "String key = n.getString();",
      "info" : "VariableDeclarationStatement[15047-15074]:VariableDeclarationStatement[15079-15106]"
    }, {
      "left" : "if (TokenStream.isJSIdentifier(key))",
      "right" : "if (TokenStream.isJSIdentifier(key))",
      "info" : "IfStatement[15083-15166]:IfStatement[15115-15198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15120-15166]:Block[15152-15198]"
    }, {
      "left" : "return name + '.' + key;",
      "right" : "return name + '.' + key;",
      "info" : "ReturnStatement[15132-15156]:ReturnStatement[15164-15188]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[15181-15193]:ReturnStatement[15213-15225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15427-16428]:Block[15459-16460]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.OBJECTLIT:\n          return Name.Type.OBJECTLIT;\n        case Token.FUNCTION:\n          return Name.Type.FUNCTION;\n        case Token.OR:\n          // Recurse on the second value. If the first value were an object\n          // literal or function, then the OR would be meaningless and the\n          // second value would be dead code. Assume that if the second value\n          // is an object literal or function, then the first value will also\n          // evaluate to one when it doesn't evaluate to false.\n          return getValueType(n.getLastChild());\n        case Token.HOOK:\n          // The same line of reasoning used for the OR case applies here.\n          Node second = n.getFirstChild().getNext();\n          Name.Type t = getValueType(second);\n          if (t != Name.Type.OTHER) {\n            return t;\n          }\n          Node third = second.getNext();\n          return getValueType(third);\n      }",
      "right" : "switch (n.getType()) {\n        case Token.OBJECTLIT:\n          return Name.Type.OBJECTLIT;\n        case Token.FUNCTION:\n          return Name.Type.FUNCTION;\n        case Token.OR:\n          // Recurse on the second value. If the first value were an object\n          // literal or function, then the OR would be meaningless and the\n          // second value would be dead code. Assume that if the second value\n          // is an object literal or function, then the first value will also\n          // evaluate to one when it doesn't evaluate to false.\n          return getValueType(n.getLastChild());\n        case Token.HOOK:\n          // The same line of reasoning used for the OR case applies here.\n          Node second = n.getFirstChild().getNext();\n          Name.Type t = getValueType(second);\n          if (t != Name.Type.OTHER) {\n            return t;\n          }\n          Node third = second.getNext();\n          return getValueType(third);\n      }",
      "info" : "SwitchStatement[15435-16392]:SwitchStatement[15467-16424]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[15466-15487]:SwitchCase[15498-15519]"
    }, {
      "left" : "return Name.Type.OBJECTLIT;",
      "right" : "return Name.Type.OBJECTLIT;",
      "info" : "ReturnStatement[15498-15525]:ReturnStatement[15530-15557]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[15534-15554]:SwitchCase[15566-15586]"
    }, {
      "left" : "return Name.Type.FUNCTION;",
      "right" : "return Name.Type.FUNCTION;",
      "info" : "ReturnStatement[15565-15591]:ReturnStatement[15597-15623]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[15600-15614]:SwitchCase[15632-15646]"
    }, {
      "left" : "return getValueType(n.getLastChild());",
      "right" : "return getValueType(n.getLastChild());",
      "info" : "ReturnStatement[15996-16034]:ReturnStatement[16028-16066]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[16043-16059]:SwitchCase[16075-16091]"
    }, {
      "left" : "Node second = n.getFirstChild().getNext();",
      "right" : "Node second = n.getFirstChild().getNext();",
      "info" : "VariableDeclarationStatement[16145-16187]:VariableDeclarationStatement[16177-16219]"
    }, {
      "left" : "Name.Type t = getValueType(second);",
      "right" : "Name.Type t = getValueType(second);",
      "info" : "VariableDeclarationStatement[16198-16233]:VariableDeclarationStatement[16230-16265]"
    }, {
      "left" : "if (t != Name.Type.OTHER)",
      "right" : "if (t != Name.Type.OTHER)",
      "info" : "IfStatement[16244-16305]:IfStatement[16276-16337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16270-16305]:Block[16302-16337]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[16284-16293]:ReturnStatement[16316-16325]"
    }, {
      "left" : "Node third = second.getNext();",
      "right" : "Node third = second.getNext();",
      "info" : "VariableDeclarationStatement[16316-16346]:VariableDeclarationStatement[16348-16378]"
    }, {
      "left" : "return getValueType(third);",
      "right" : "return getValueType(third);",
      "info" : "ReturnStatement[16357-16384]:ReturnStatement[16389-16416]"
    }, {
      "left" : "return Name.Type.OTHER;",
      "right" : "return Name.Type.OTHER;",
      "info" : "ReturnStatement[16399-16422]:ReturnStatement[16431-16454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17153-17924]:Block[17185-17956]"
    }, {
      "left" : "if (maybeHandlePrototypePrefix(module, scope, n, parent, name))",
      "right" : "if (maybeHandlePrototypePrefix(module, scope, n, parent, name))",
      "info" : "IfStatement[17161-17250]:IfStatement[17193-17282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17225-17250]:Block[17257-17282]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[17235-17242]:ReturnStatement[17267-17274]"
    }, {
      "left" : "Name nameObj = getOrCreateName(name);",
      "right" : "Name nameObj = getOrCreateName(name);",
      "info" : "VariableDeclarationStatement[17258-17295]:VariableDeclarationStatement[17290-17327]"
    }, {
      "left" : "nameObj.type = type;",
      "right" : "nameObj.type = type;",
      "info" : "ExpressionStatement[17302-17322]:ExpressionStatement[17334-17354]"
    }, {
      "left" : "Ref set = new Ref(module, scope, n, nameObj, Ref.Type.SET_FROM_GLOBAL,\n          currentPreOrderIndex++);",
      "right" : "Ref set = new Ref(module, scope, n, nameObj, Ref.Type.SET_FROM_GLOBAL,\n          currentPreOrderIndex++);",
      "info" : "VariableDeclarationStatement[17330-17435]:VariableDeclarationStatement[17362-17467]"
    }, {
      "left" : "nameObj.addRef(set);",
      "right" : "nameObj.addRef(set);",
      "info" : "ExpressionStatement[17442-17462]:ExpressionStatement[17474-17494]"
    }, {
      "left" : "if (isNestedAssign(parent))",
      "right" : "if (isNestedAssign(parent))",
      "info" : "IfStatement[17470-17918]:IfStatement[17502-17950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17498-17756]:Block[17530-17788]"
    }, {
      "left" : "Ref get = new Ref(module, scope, n, nameObj, Ref.Type.ALIASING_GET,\n            currentPreOrderIndex++);",
      "right" : "Ref get = new Ref(module, scope, n, nameObj, Ref.Type.ALIASING_GET,\n            currentPreOrderIndex++);",
      "info" : "VariableDeclarationStatement[17582-17686]:VariableDeclarationStatement[17614-17718]"
    }, {
      "left" : "nameObj.addRef(get);",
      "right" : "nameObj.addRef(get);",
      "info" : "ExpressionStatement[17695-17715]:ExpressionStatement[17727-17747]"
    }, {
      "left" : "Ref.markTwins(set, get);",
      "right" : "Ref.markTwins(set, get);",
      "info" : "ExpressionStatement[17724-17748]:ExpressionStatement[17756-17780]"
    }, {
      "left" : "if (isTypeDeclaration(n, parent))",
      "right" : "if (isTypeDeclaration(n, parent))",
      "info" : "IfStatement[17762-17918]:IfStatement[17794-17950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17796-17918]:Block[17828-17950]"
    }, {
      "left" : "nameObj.setDeclaredType();",
      "right" : "nameObj.setDeclaredType();",
      "info" : "ExpressionStatement[17884-17910]:ExpressionStatement[17916-17942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18472-18894]:Block[18504-18926]"
    }, {
      "left" : "Node valueNode = NodeUtil.getRValueOfLValue(n);",
      "right" : "Node valueNode = NodeUtil.getRValueOfLValue(n);",
      "info" : "VariableDeclarationStatement[18480-18527]:VariableDeclarationStatement[18512-18559]"
    }, {
      "left" : "JSDocInfo info = NodeUtil.getBestJSDocInfo(n);",
      "right" : "JSDocInfo info = NodeUtil.getBestJSDocInfo(n);",
      "info" : "VariableDeclarationStatement[18534-18580]:VariableDeclarationStatement[18566-18612]"
    }, {
      "left" : "return info != null && valueNode != null &&\n             (info.isConstructor() && valueNode.isFunction() ||\n              info.isInterface() && valueNode.isFunction() ||\n              info.hasEnumParameterType() && valueNode.isObjectLit());",
      "right" : "return info != null && valueNode != null &&\n             (info.isConstructor() && valueNode.isFunction() ||\n              info.isInterface() && valueNode.isFunction() ||\n              info.hasEnumParameterType() && valueNode.isObjectLit());",
      "info" : "ReturnStatement[18648-18888]:ReturnStatement[18680-18920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19390-19970]:Block[19422-20002]"
    }, {
      "left" : "if (maybeHandlePrototypePrefix(module, scope, n, parent, name))",
      "right" : "if (maybeHandlePrototypePrefix(module, scope, n, parent, name))",
      "info" : "IfStatement[19398-19487]:IfStatement[19430-19519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19462-19487]:Block[19494-19519]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[19472-19479]:ReturnStatement[19504-19511]"
    }, {
      "left" : "Name nameObj = getOrCreateName(name);",
      "right" : "Name nameObj = getOrCreateName(name);",
      "info" : "VariableDeclarationStatement[19495-19532]:VariableDeclarationStatement[19527-19564]"
    }, {
      "left" : "Ref set = new Ref(module, scope, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);",
      "right" : "Ref set = new Ref(module, scope, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);",
      "info" : "VariableDeclarationStatement[19539-19643]:VariableDeclarationStatement[19571-19675]"
    }, {
      "left" : "nameObj.addRef(set);",
      "right" : "nameObj.addRef(set);",
      "info" : "ExpressionStatement[19650-19670]:ExpressionStatement[19682-19702]"
    }, {
      "left" : "if (isNestedAssign(parent))",
      "right" : "if (isNestedAssign(parent))",
      "info" : "IfStatement[19678-19964]:IfStatement[19710-19996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19706-19964]:Block[19738-19996]"
    }, {
      "left" : "Ref get = new Ref(module, scope, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);",
      "right" : "Ref get = new Ref(module, scope, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);",
      "info" : "VariableDeclarationStatement[19790-19894]:VariableDeclarationStatement[19822-19926]"
    }, {
      "left" : "nameObj.addRef(get);",
      "right" : "nameObj.addRef(get);",
      "info" : "ExpressionStatement[19903-19923]:ExpressionStatement[19935-19955]"
    }, {
      "left" : "Ref.markTwins(set, get);",
      "right" : "Ref.markTwins(set, get);",
      "info" : "ExpressionStatement[19932-19956]:ExpressionStatement[19964-19988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20413-22459]:Block[20445-22491]"
    }, {
      "left" : "if (maybeHandlePrototypePrefix(module, scope, n, parent, name))",
      "right" : "if (maybeHandlePrototypePrefix(module, scope, n, parent, name))",
      "info" : "IfStatement[20421-20510]:IfStatement[20453-20542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20485-20510]:Block[20517-20542]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[20495-20502]:ReturnStatement[20527-20534]"
    }, {
      "left" : "Ref.Type type = Ref.Type.DIRECT_GET;",
      "right" : "Ref.Type type = Ref.Type.DIRECT_GET;",
      "info" : "VariableDeclarationStatement[20518-20554]:VariableDeclarationStatement[20550-20586]"
    }, {
      "left" : "if (parent != null)",
      "right" : "if (parent != null)",
      "info" : "IfStatement[20561-22397]:IfStatement[20593-22429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20581-22397]:Block[20613-22429]"
    }, {
      "left" : "switch (parent.getType()) {\n          case Token.IF:\n          case Token.INSTANCEOF:\n          case Token.TYPEOF:\n          case Token.VOID:\n          case Token.NOT:\n          case Token.BITNOT:\n          case Token.POS:\n          case Token.NEG:\n            break;\n          case Token.CALL:\n            if (n == parent.getFirstChild()) {\n              // It is a call target\n              type = Ref.Type.CALL_GET;\n            } else if (isClassDefiningCall(parent)) {\n              type = Ref.Type.DIRECT_GET;\n            } else {\n              type = Ref.Type.ALIASING_GET;\n            }\n            break;\n          case Token.NEW:\n            type = n == parent.getFirstChild()\n                   ? Ref.Type.DIRECT_GET\n                   : Ref.Type.ALIASING_GET;\n            break;\n          case Token.OR:\n          case Token.AND:\n            // This node is x or y in (x||y) or (x&&y). We only know that an\n            // alias is not getting created for this name if the result is used\n            // in a boolean context or assigned to the same name\n            // (e.g. var a = a || {}).\n            type = determineGetTypeForHookOrBooleanExpr(module, scope, parent, name);\n            break;\n          case Token.HOOK:\n            if (n != parent.getFirstChild()) {\n              // This node is y or z in (x?y:z). We only know that an alias is\n              // not getting created for this name if the result is assigned to\n              // the same name (e.g. var a = a ? a : {}).\n              type = determineGetTypeForHookOrBooleanExpr(module, scope, parent, name);\n            }\n            break;\n          case Token.DELPROP:\n            type = Ref.Type.DELETE_PROP;\n            break;\n          default:\n            type = Ref.Type.ALIASING_GET;\n            break;\n        }",
      "right" : "switch (parent.getType()) {\n          case Token.IF:\n          case Token.INSTANCEOF:\n          case Token.TYPEOF:\n          case Token.VOID:\n          case Token.NOT:\n          case Token.BITNOT:\n          case Token.POS:\n          case Token.NEG:\n            break;\n          case Token.CALL:\n            if (n == parent.getFirstChild()) {\n              // It is a call target\n              type = Ref.Type.CALL_GET;\n            } else if (isClassDefiningCall(parent)) {\n              type = Ref.Type.DIRECT_GET;\n            } else {\n              type = Ref.Type.ALIASING_GET;\n            }\n            break;\n          case Token.NEW:\n            type = n == parent.getFirstChild()\n                   ? Ref.Type.DIRECT_GET\n                   : Ref.Type.ALIASING_GET;\n            break;\n          case Token.OR:\n          case Token.AND:\n            // This node is x or y in (x||y) or (x&&y). We only know that an\n            // alias is not getting created for this name if the result is used\n            // in a boolean context or assigned to the same name\n            // (e.g. var a = a || {}).\n            type = determineGetTypeForHookOrBooleanExpr(module, scope, parent, name);\n            break;\n          case Token.HOOK:\n            if (n != parent.getFirstChild()) {\n              // This node is y or z in (x?y:z). We only know that an alias is\n              // not getting created for this name if the result is assigned to\n              // the same name (e.g. var a = a ? a : {}).\n              type = determineGetTypeForHookOrBooleanExpr(module, scope, parent, name);\n            }\n            break;\n          case Token.DELPROP:\n            type = Ref.Type.DELETE_PROP;\n            break;\n          default:\n            type = Ref.Type.ALIASING_GET;\n            break;\n        }",
      "info" : "SwitchStatement[20591-22389]:SwitchStatement[20623-22421]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[20629-20643]:SwitchCase[20661-20675]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[20654-20676]:SwitchCase[20686-20708]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[20687-20705]:SwitchCase[20719-20737]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[20716-20732]:SwitchCase[20748-20764]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[20743-20758]:SwitchCase[20775-20790]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[20769-20787]:SwitchCase[20801-20819]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[20798-20813]:SwitchCase[20830-20845]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[20824-20839]:SwitchCase[20856-20871]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20852-20858]:BreakStatement[20884-20890]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[20869-20885]:SwitchCase[20901-20917]"
    }, {
      "left" : "if (n == parent.getFirstChild())",
      "right" : "if (n == parent.getFirstChild())",
      "info" : "IfStatement[20898-21184]:IfStatement[20930-21216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20931-21023]:Block[20963-21055]"
    }, {
      "left" : "type = Ref.Type.CALL_GET;",
      "right" : "type = Ref.Type.CALL_GET;",
      "info" : "ExpressionStatement[20984-21009]:ExpressionStatement[21016-21041]"
    }, {
      "left" : "if (isClassDefiningCall(parent))",
      "right" : "if (isClassDefiningCall(parent))",
      "info" : "IfStatement[21029-21184]:IfStatement[21061-21216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21062-21119]:Block[21094-21151]"
    }, {
      "left" : "type = Ref.Type.DIRECT_GET;",
      "right" : "type = Ref.Type.DIRECT_GET;",
      "info" : "ExpressionStatement[21078-21105]:ExpressionStatement[21110-21137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21125-21184]:Block[21157-21216]"
    }, {
      "left" : "type = Ref.Type.ALIASING_GET;",
      "right" : "type = Ref.Type.ALIASING_GET;",
      "info" : "ExpressionStatement[21141-21170]:ExpressionStatement[21173-21202]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21197-21203]:BreakStatement[21229-21235]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[21214-21229]:SwitchCase[21246-21261]"
    }, {
      "left" : "type = n == parent.getFirstChild()\n                   ? Ref.Type.DIRECT_GET\n                   : Ref.Type.ALIASING_GET;",
      "right" : "type = n == parent.getFirstChild()\n                   ? Ref.Type.DIRECT_GET\n                   : Ref.Type.ALIASING_GET;",
      "info" : "ExpressionStatement[21242-21361]:ExpressionStatement[21274-21393]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21374-21380]:BreakStatement[21406-21412]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[21391-21405]:SwitchCase[21423-21437]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[21416-21431]:SwitchCase[21448-21463]"
    }, {
      "left" : "type = determineGetTypeForHookOrBooleanExpr(module, scope, parent, name);",
      "right" : "type = determineGetTypeForHookOrBooleanExpr(module, scope, parent, name);",
      "info" : "ExpressionStatement[21705-21778]:ExpressionStatement[21737-21810]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21791-21797]:BreakStatement[21823-21829]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[21808-21824]:SwitchCase[21840-21856]"
    }, {
      "left" : "if (n != parent.getFirstChild())",
      "right" : "if (n != parent.getFirstChild())",
      "info" : "IfStatement[21837-22190]:IfStatement[21869-22222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21870-22190]:Block[21902-22222]"
    }, {
      "left" : "type = determineGetTypeForHookOrBooleanExpr(module, scope, parent, name);",
      "right" : "type = determineGetTypeForHookOrBooleanExpr(module, scope, parent, name);",
      "info" : "ExpressionStatement[22103-22176]:ExpressionStatement[22135-22208]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22203-22209]:BreakStatement[22235-22241]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[22220-22239]:SwitchCase[22252-22271]"
    }, {
      "left" : "type = Ref.Type.DELETE_PROP;",
      "right" : "type = Ref.Type.DELETE_PROP;",
      "info" : "ExpressionStatement[22252-22280]:ExpressionStatement[22284-22312]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22293-22299]:BreakStatement[22325-22331]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[22310-22318]:SwitchCase[22342-22350]"
    }, {
      "left" : "type = Ref.Type.ALIASING_GET;",
      "right" : "type = Ref.Type.ALIASING_GET;",
      "info" : "ExpressionStatement[22331-22360]:ExpressionStatement[22363-22392]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22373-22379]:BreakStatement[22405-22411]"
    }, {
      "left" : "handleGet(module, scope, n, parent, name, type);",
      "right" : "handleGet(module, scope, n, parent, name, type);",
      "info" : "ExpressionStatement[22405-22453]:ExpressionStatement[22437-22485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22516-22666]:Block[22548-22698]"
    }, {
      "left" : "SubclassRelationship classes =\n          compiler.getCodingConvention().getClassesDefinedByCall(callNode);",
      "right" : "SubclassRelationship classes =\n          compiler.getCodingConvention().getClassesDefinedByCall(callNode);",
      "info" : "VariableDeclarationStatement[22524-22630]:VariableDeclarationStatement[22556-22662]"
    }, {
      "left" : "return classes != null;",
      "right" : "return classes != null;",
      "info" : "ReturnStatement[22637-22660]:ReturnStatement[22669-22692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23408-24699]:Block[23440-24731]"
    }, {
      "left" : "Node prev = parent;",
      "right" : "Node prev = parent;",
      "info" : "VariableDeclarationStatement[23416-23435]:VariableDeclarationStatement[23448-23467]"
    }, {
      "left" : "for (Node anc : parent.getAncestors())",
      "right" : "for (Node anc : parent.getAncestors())",
      "info" : "EnhancedForStatement[23442-24657]:EnhancedForStatement[23474-24689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23481-24657]:Block[23513-24689]"
    }, {
      "left" : "switch (anc.getType()) {\n          case Token.INSTANCEOF:\n          case Token.EXPR_RESULT:\n          case Token.VAR:\n          case Token.IF:\n          case Token.WHILE:\n          case Token.FOR:\n          case Token.TYPEOF:\n          case Token.VOID:\n          case Token.NOT:\n          case Token.BITNOT:\n          case Token.POS:\n          case Token.NEG:\n            return Ref.Type.DIRECT_GET;\n          case Token.HOOK:\n            if (anc.getFirstChild() == prev) {\n              return Ref.Type.DIRECT_GET;\n            }\n            break;\n          case Token.ASSIGN:\n            if (!name.equals(anc.getFirstChild().getQualifiedName())) {\n              return Ref.Type.ALIASING_GET;\n            }\n            break;\n          case Token.NAME:  // a variable declaration\n            if (!name.equals(anc.getString())) {\n              return Ref.Type.ALIASING_GET;\n            }\n            break;\n          case Token.CALL:\n            if (anc.getFirstChild() != prev) {\n              return Ref.Type.ALIASING_GET;\n            }\n            break;\n          case Token.DELPROP:\n            return Ref.Type.DELETE_PROP;\n        }",
      "right" : "switch (anc.getType()) {\n          case Token.INSTANCEOF:\n          case Token.EXPR_RESULT:\n          case Token.VAR:\n          case Token.IF:\n          case Token.WHILE:\n          case Token.FOR:\n          case Token.TYPEOF:\n          case Token.VOID:\n          case Token.NOT:\n          case Token.BITNOT:\n          case Token.POS:\n          case Token.NEG:\n            return Ref.Type.DIRECT_GET;\n          case Token.HOOK:\n            if (anc.getFirstChild() == prev) {\n              return Ref.Type.DIRECT_GET;\n            }\n            break;\n          case Token.ASSIGN:\n            if (!name.equals(anc.getFirstChild().getQualifiedName())) {\n              return Ref.Type.ALIASING_GET;\n            }\n            break;\n          case Token.NAME:  // a variable declaration\n            if (!name.equals(anc.getString())) {\n              return Ref.Type.ALIASING_GET;\n            }\n            break;\n          case Token.CALL:\n            if (anc.getFirstChild() != prev) {\n              return Ref.Type.ALIASING_GET;\n            }\n            break;\n          case Token.DELPROP:\n            return Ref.Type.DELETE_PROP;\n        }",
      "info" : "SwitchStatement[23491-24629]:SwitchStatement[23523-24661]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[23526-23548]:SwitchCase[23558-23580]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[23559-23582]:SwitchCase[23591-23614]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[23593-23608]:SwitchCase[23625-23640]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[23619-23633]:SwitchCase[23651-23665]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[23644-23661]:SwitchCase[23676-23693]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[23672-23687]:SwitchCase[23704-23719]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[23698-23716]:SwitchCase[23730-23748]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[23727-23743]:SwitchCase[23759-23775]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[23754-23769]:SwitchCase[23786-23801]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[23780-23798]:SwitchCase[23812-23830]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[23809-23824]:SwitchCase[23841-23856]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[23835-23850]:SwitchCase[23867-23882]"
    }, {
      "left" : "return Ref.Type.DIRECT_GET;",
      "right" : "return Ref.Type.DIRECT_GET;",
      "info" : "ReturnStatement[23863-23890]:ReturnStatement[23895-23922]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[23901-23917]:SwitchCase[23933-23949]"
    }, {
      "left" : "if (anc.getFirstChild() == prev)",
      "right" : "if (anc.getFirstChild() == prev)",
      "info" : "IfStatement[23930-24020]:IfStatement[23962-24052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23963-24020]:Block[23995-24052]"
    }, {
      "left" : "return Ref.Type.DIRECT_GET;",
      "right" : "return Ref.Type.DIRECT_GET;",
      "info" : "ReturnStatement[23979-24006]:ReturnStatement[24011-24038]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24033-24039]:BreakStatement[24065-24071]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[24050-24068]:SwitchCase[24082-24100]"
    }, {
      "left" : "if (!name.equals(anc.getFirstChild().getQualifiedName()))",
      "right" : "if (!name.equals(anc.getFirstChild().getQualifiedName()))",
      "info" : "IfStatement[24081-24198]:IfStatement[24113-24230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24139-24198]:Block[24171-24230]"
    }, {
      "left" : "return Ref.Type.ALIASING_GET;",
      "right" : "return Ref.Type.ALIASING_GET;",
      "info" : "ReturnStatement[24155-24184]:ReturnStatement[24187-24216]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24211-24217]:BreakStatement[24243-24249]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[24228-24244]:SwitchCase[24260-24276]"
    }, {
      "left" : "if (!name.equals(anc.getString()))",
      "right" : "if (!name.equals(anc.getString()))",
      "info" : "IfStatement[24284-24378]:IfStatement[24316-24410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24319-24378]:Block[24351-24410]"
    }, {
      "left" : "return Ref.Type.ALIASING_GET;",
      "right" : "return Ref.Type.ALIASING_GET;",
      "info" : "ReturnStatement[24335-24364]:ReturnStatement[24367-24396]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24391-24397]:BreakStatement[24423-24429]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[24408-24424]:SwitchCase[24440-24456]"
    }, {
      "left" : "if (anc.getFirstChild() != prev)",
      "right" : "if (anc.getFirstChild() != prev)",
      "info" : "IfStatement[24437-24529]:IfStatement[24469-24561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24470-24529]:Block[24502-24561]"
    }, {
      "left" : "return Ref.Type.ALIASING_GET;",
      "right" : "return Ref.Type.ALIASING_GET;",
      "info" : "ReturnStatement[24486-24515]:ReturnStatement[24518-24547]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24542-24548]:BreakStatement[24574-24580]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[24559-24578]:SwitchCase[24591-24610]"
    }, {
      "left" : "return Ref.Type.DELETE_PROP;",
      "right" : "return Ref.Type.DELETE_PROP;",
      "info" : "ReturnStatement[24591-24619]:ReturnStatement[24623-24651]"
    }, {
      "left" : "prev = anc;",
      "right" : "prev = anc;",
      "info" : "ExpressionStatement[24638-24649]:ExpressionStatement[24670-24681]"
    }, {
      "left" : "return Ref.Type.ALIASING_GET;",
      "right" : "return Ref.Type.ALIASING_GET;",
      "info" : "ReturnStatement[24664-24693]:ReturnStatement[24696-24725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25195-25422]:Block[25227-25454]"
    }, {
      "left" : "Name nameObj = getOrCreateName(name);",
      "right" : "Name nameObj = getOrCreateName(name);",
      "info" : "VariableDeclarationStatement[25203-25240]:VariableDeclarationStatement[25235-25272]"
    }, {
      "left" : "nameObj.addRef(\n          new Ref(module, scope, n, nameObj, type, currentPreOrderIndex++));",
      "right" : "nameObj.addRef(\n          new Ref(module, scope, n, nameObj, type, currentPreOrderIndex++));",
      "info" : "ExpressionStatement[25324-25416]:ExpressionStatement[25356-25448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26055-27161]:Block[26087-27193]"
    }, {
      "left" : "int numLevelsToRemove;",
      "right" : "int numLevelsToRemove;",
      "info" : "VariableDeclarationStatement[26241-26263]:VariableDeclarationStatement[26273-26295]"
    }, {
      "left" : "String prefix;",
      "right" : "String prefix;",
      "info" : "VariableDeclarationStatement[26270-26284]:VariableDeclarationStatement[26302-26316]"
    }, {
      "left" : "if (name.endsWith(\".prototype\"))",
      "right" : "if (name.endsWith(\".prototype\"))",
      "info" : "IfStatement[26291-26752]:IfStatement[26323-26784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26324-26420]:Block[26356-26452]"
    }, {
      "left" : "numLevelsToRemove = 1;",
      "right" : "numLevelsToRemove = 1;",
      "info" : "ExpressionStatement[26334-26356]:ExpressionStatement[26366-26388]"
    }, {
      "left" : "prefix = name.substring(0, name.length() - 10);",
      "right" : "prefix = name.substring(0, name.length() - 10);",
      "info" : "ExpressionStatement[26365-26412]:ExpressionStatement[26397-26444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26426-26752]:Block[26458-26784]"
    }, {
      "left" : "int i = name.indexOf(\".prototype.\");",
      "right" : "int i = name.indexOf(\".prototype.\");",
      "info" : "VariableDeclarationStatement[26436-26472]:VariableDeclarationStatement[26468-26504]"
    }, {
      "left" : "if (i == -1)",
      "right" : "if (i == -1)",
      "info" : "IfStatement[26481-26529]:IfStatement[26513-26561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26494-26529]:Block[26526-26561]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26506-26519]:ReturnStatement[26538-26551]"
    }, {
      "left" : "prefix = name.substring(0, i);",
      "right" : "prefix = name.substring(0, i);",
      "info" : "ExpressionStatement[26538-26568]:ExpressionStatement[26570-26600]"
    }, {
      "left" : "numLevelsToRemove = 2;",
      "right" : "numLevelsToRemove = 2;",
      "info" : "ExpressionStatement[26577-26599]:ExpressionStatement[26609-26631]"
    }, {
      "left" : "i = name.indexOf('.', i + 11);",
      "right" : "i = name.indexOf('.', i + 11);",
      "info" : "ExpressionStatement[26608-26638]:ExpressionStatement[26640-26670]"
    }, {
      "left" : "while (i >= 0)",
      "right" : "while (i >= 0)",
      "info" : "WhileStatement[26647-26744]:WhileStatement[26679-26776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26662-26744]:Block[26694-26776]"
    }, {
      "left" : "numLevelsToRemove++;",
      "right" : "numLevelsToRemove++;",
      "info" : "ExpressionStatement[26674-26694]:ExpressionStatement[26706-26726]"
    }, {
      "left" : "i = name.indexOf('.', i + 1);",
      "right" : "i = name.indexOf('.', i + 1);",
      "info" : "ExpressionStatement[26705-26734]:ExpressionStatement[26737-26766]"
    }, {
      "left" : "if (parent != null && NodeUtil.isObjectLitKey(n))",
      "right" : "if (parent != null && NodeUtil.isObjectLitKey(n))",
      "info" : "IfStatement[26760-26948]:IfStatement[26792-26980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26810-26948]:Block[26842-26980]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[26928-26940]:ReturnStatement[26960-26972]"
    }, {
      "left" : "for (int i = 0; i < numLevelsToRemove; i++)",
      "right" : "for (int i = 0; i < numLevelsToRemove; i++)",
      "info" : "ForStatement[26956-27060]:ForStatement[26988-27092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27000-27060]:Block[27032-27092]"
    }, {
      "left" : "parent = n;",
      "right" : "parent = n;",
      "info" : "ExpressionStatement[27010-27021]:ExpressionStatement[27042-27053]"
    }, {
      "left" : "n = n.getFirstChild();",
      "right" : "n = n.getFirstChild();",
      "info" : "ExpressionStatement[27030-27052]:ExpressionStatement[27062-27084]"
    }, {
      "left" : "handleGet(module, scope, n, parent, prefix, Ref.Type.PROTOTYPE_GET);",
      "right" : "handleGet(module, scope, n, parent, prefix, Ref.Type.PROTOTYPE_GET);",
      "info" : "ExpressionStatement[27068-27136]:ExpressionStatement[27100-27168]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[27143-27155]:ReturnStatement[27175-27187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27490-27580]:Block[27522-27612]"
    }, {
      "left" : "return parent.isAssign() &&\n             !parent.getParent().isExprResult();",
      "right" : "return parent.isAssign() &&\n             !parent.getParent().isExprResult();",
      "info" : "ReturnStatement[27498-27574]:ReturnStatement[27530-27606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27914-28391]:Block[27946-28423]"
    }, {
      "left" : "Name node = nameMap.get(name);",
      "right" : "Name node = nameMap.get(name);",
      "info" : "VariableDeclarationStatement[27922-27952]:VariableDeclarationStatement[27954-27984]"
    }, {
      "left" : "if (node == null)",
      "right" : "if (node == null)",
      "info" : "IfStatement[27959-28366]:IfStatement[27991-28398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27977-28366]:Block[28009-28398]"
    }, {
      "left" : "int i = name.lastIndexOf('.');",
      "right" : "int i = name.lastIndexOf('.');",
      "info" : "VariableDeclarationStatement[27987-28017]:VariableDeclarationStatement[28019-28049]"
    }, {
      "left" : "if (i >= 0)",
      "right" : "if (i >= 0)",
      "info" : "IfStatement[28026-28325]:IfStatement[28058-28357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28038-28225]:Block[28070-28257]"
    }, {
      "left" : "String parentName = name.substring(0, i);",
      "right" : "String parentName = name.substring(0, i);",
      "info" : "VariableDeclarationStatement[28050-28091]:VariableDeclarationStatement[28082-28123]"
    }, {
      "left" : "Name parent = getOrCreateName(parentName);",
      "right" : "Name parent = getOrCreateName(parentName);",
      "info" : "VariableDeclarationStatement[28102-28144]:VariableDeclarationStatement[28134-28176]"
    }, {
      "left" : "node = parent.addProperty(name.substring(i + 1), inExterns);",
      "right" : "node = parent.addProperty(name.substring(i + 1), inExterns);",
      "info" : "ExpressionStatement[28155-28215]:ExpressionStatement[28187-28247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28231-28325]:Block[28263-28357]"
    }, {
      "left" : "node = new Name(name, null, inExterns);",
      "right" : "node = new Name(name, null, inExterns);",
      "info" : "ExpressionStatement[28243-28282]:ExpressionStatement[28275-28314]"
    }, {
      "left" : "globalNames.add(node);",
      "right" : "globalNames.add(node);",
      "info" : "ExpressionStatement[28293-28315]:ExpressionStatement[28325-28347]"
    }, {
      "left" : "nameMap.put(name, node);",
      "right" : "nameMap.put(name, node);",
      "info" : "ExpressionStatement[28334-28358]:ExpressionStatement[28366-28390]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[28373-28385]:ReturnStatement[28405-28417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29513-29640]:Block[29545-29672]"
    }, {
      "left" : "this.baseName = name;",
      "right" : "this.baseName = name;",
      "info" : "ExpressionStatement[29521-29542]:ExpressionStatement[29553-29574]"
    }, {
      "left" : "this.parent = parent;",
      "right" : "this.parent = parent;",
      "info" : "ExpressionStatement[29549-29570]:ExpressionStatement[29581-29602]"
    }, {
      "left" : "this.type = Type.OTHER;",
      "right" : "this.type = Type.OTHER;",
      "info" : "ExpressionStatement[29577-29600]:ExpressionStatement[29609-29632]"
    }, {
      "left" : "this.inExterns = inExterns;",
      "right" : "this.inExterns = inExterns;",
      "info" : "ExpressionStatement[29607-29634]:ExpressionStatement[29639-29666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29695-29869]:Block[29727-29901]"
    }, {
      "left" : "if (props == null)",
      "right" : "if (props == null)",
      "info" : "IfStatement[29703-29770]:IfStatement[29735-29802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29722-29770]:Block[29754-29802]"
    }, {
      "left" : "props = new ArrayList<Name>();",
      "right" : "props = new ArrayList<Name>();",
      "info" : "ExpressionStatement[29732-29762]:ExpressionStatement[29764-29794]"
    }, {
      "left" : "Name node = new Name(name, this, inExterns);",
      "right" : "Name node = new Name(name, this, inExterns);",
      "info" : "VariableDeclarationStatement[29777-29821]:VariableDeclarationStatement[29809-29853]"
    }, {
      "left" : "props.add(node);",
      "right" : "props.add(node);",
      "info" : "ExpressionStatement[29828-29844]:ExpressionStatement[29860-29876]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[29851-29863]:ReturnStatement[29883-29895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29896-29926]:Block[29928-29958]"
    }, {
      "left" : "return baseName;",
      "right" : "return baseName;",
      "info" : "ReturnStatement[29904-29920]:ReturnStatement[29936-29952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29970-30005]:Block[30002-30037]"
    }, {
      "left" : "return getFullName();",
      "right" : "return getFullName();",
      "info" : "ReturnStatement[29978-29999]:ReturnStatement[30010-30031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30032-30119]:Block[30064-30151]"
    }, {
      "left" : "return parent == null ? baseName : parent.getFullName() + '.' + baseName;",
      "right" : "return parent == null ? baseName : parent.getFullName() + '.' + baseName;",
      "info" : "ReturnStatement[30040-30113]:ReturnStatement[30072-30145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30167-30200]:Block[30199-30232]"
    }, {
      "left" : "return declaration;",
      "right" : "return declaration;",
      "info" : "ReturnStatement[30175-30194]:ReturnStatement[30207-30226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30252-30279]:Block[30284-30311]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30260-30273]:ReturnStatement[30292-30305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30323-30349]:Block[30355-30381]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[30331-30343]:ReturnStatement[30363-30375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30376-31118]:Block[30408-31150]"
    }, {
      "left" : "addRefInternal(ref);",
      "right" : "addRefInternal(ref);",
      "info" : "ExpressionStatement[30384-30404]:ExpressionStatement[30416-30436]"
    }, {
      "left" : "switch (ref.type) {\n        case SET_FROM_GLOBAL:\n          if (declaration == null) {\n            declaration = ref;\n            docInfo = getDocInfoForDeclaration(ref);\n          }\n          globalSets++;\n          break;\n        case SET_FROM_LOCAL:\n          localSets++;\n          break;\n        case PROTOTYPE_GET:\n        case DIRECT_GET:\n          totalGets++;\n          break;\n        case ALIASING_GET:\n          aliasingGets++;\n          totalGets++;\n          break;\n        case CALL_GET:\n          callGets++;\n          totalGets++;\n          break;\n        case DELETE_PROP:\n          deleteProps++;\n          break;\n        default:\n          throw new IllegalStateException();\n      }",
      "right" : "switch (ref.type) {\n        case SET_FROM_GLOBAL:\n          if (declaration == null) {\n            declaration = ref;\n            docInfo = getDocInfoForDeclaration(ref);\n          }\n          globalSets++;\n          break;\n        case SET_FROM_LOCAL:\n          localSets++;\n          break;\n        case PROTOTYPE_GET:\n        case DIRECT_GET:\n          totalGets++;\n          break;\n        case ALIASING_GET:\n          aliasingGets++;\n          totalGets++;\n          break;\n        case CALL_GET:\n          callGets++;\n          totalGets++;\n          break;\n        case DELETE_PROP:\n          deleteProps++;\n          break;\n        default:\n          throw new IllegalStateException();\n      }",
      "info" : "SwitchStatement[30411-31112]:SwitchStatement[30443-31144]"
    }, {
      "left" : "case SET_FROM_GLOBAL:",
      "right" : "case SET_FROM_GLOBAL:",
      "info" : "SwitchCase[30439-30460]:SwitchCase[30471-30492]"
    }, {
      "left" : "if (declaration == null)",
      "right" : "if (declaration == null)",
      "info" : "IfStatement[30471-30593]:IfStatement[30503-30625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30496-30593]:Block[30528-30625]"
    }, {
      "left" : "declaration = ref;",
      "right" : "declaration = ref;",
      "info" : "ExpressionStatement[30510-30528]:ExpressionStatement[30542-30560]"
    }, {
      "left" : "docInfo = getDocInfoForDeclaration(ref);",
      "right" : "docInfo = getDocInfoForDeclaration(ref);",
      "info" : "ExpressionStatement[30541-30581]:ExpressionStatement[30573-30613]"
    }, {
      "left" : "globalSets++;",
      "right" : "globalSets++;",
      "info" : "ExpressionStatement[30604-30617]:ExpressionStatement[30636-30649]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30628-30634]:BreakStatement[30660-30666]"
    }, {
      "left" : "case SET_FROM_LOCAL:",
      "right" : "case SET_FROM_LOCAL:",
      "info" : "SwitchCase[30643-30663]:SwitchCase[30675-30695]"
    }, {
      "left" : "localSets++;",
      "right" : "localSets++;",
      "info" : "ExpressionStatement[30674-30686]:ExpressionStatement[30706-30718]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30697-30703]:BreakStatement[30729-30735]"
    }, {
      "left" : "case PROTOTYPE_GET:",
      "right" : "case PROTOTYPE_GET:",
      "info" : "SwitchCase[30712-30731]:SwitchCase[30744-30763]"
    }, {
      "left" : "case DIRECT_GET:",
      "right" : "case DIRECT_GET:",
      "info" : "SwitchCase[30740-30756]:SwitchCase[30772-30788]"
    }, {
      "left" : "totalGets++;",
      "right" : "totalGets++;",
      "info" : "ExpressionStatement[30767-30779]:ExpressionStatement[30799-30811]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30790-30796]:BreakStatement[30822-30828]"
    }, {
      "left" : "case ALIASING_GET:",
      "right" : "case ALIASING_GET:",
      "info" : "SwitchCase[30805-30823]:SwitchCase[30837-30855]"
    }, {
      "left" : "aliasingGets++;",
      "right" : "aliasingGets++;",
      "info" : "ExpressionStatement[30834-30849]:ExpressionStatement[30866-30881]"
    }, {
      "left" : "totalGets++;",
      "right" : "totalGets++;",
      "info" : "ExpressionStatement[30860-30872]:ExpressionStatement[30892-30904]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30883-30889]:BreakStatement[30915-30921]"
    }, {
      "left" : "case CALL_GET:",
      "right" : "case CALL_GET:",
      "info" : "SwitchCase[30898-30912]:SwitchCase[30930-30944]"
    }, {
      "left" : "callGets++;",
      "right" : "callGets++;",
      "info" : "ExpressionStatement[30923-30934]:ExpressionStatement[30955-30966]"
    }, {
      "left" : "totalGets++;",
      "right" : "totalGets++;",
      "info" : "ExpressionStatement[30945-30957]:ExpressionStatement[30977-30989]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30968-30974]:BreakStatement[31000-31006]"
    }, {
      "left" : "case DELETE_PROP:",
      "right" : "case DELETE_PROP:",
      "info" : "SwitchCase[30983-31000]:SwitchCase[31015-31032]"
    }, {
      "left" : "deleteProps++;",
      "right" : "deleteProps++;",
      "info" : "ExpressionStatement[31011-31025]:ExpressionStatement[31043-31057]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31036-31042]:BreakStatement[31068-31074]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[31051-31059]:SwitchCase[31083-31091]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[31070-31104]:ThrowStatement[31102-31136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31148-32159]:Block[31180-32191]"
    }, {
      "left" : "if (refs != null && refs.remove(ref))",
      "right" : "if (refs != null && refs.remove(ref))",
      "info" : "IfStatement[31156-32153]:IfStatement[31188-32185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31194-32153]:Block[31226-32185]"
    }, {
      "left" : "if (ref == declaration)",
      "right" : "if (ref == declaration)",
      "info" : "IfStatement[31204-31519]:IfStatement[31236-31551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31228-31519]:Block[31260-31551]"
    }, {
      "left" : "declaration = null;",
      "right" : "declaration = null;",
      "info" : "ExpressionStatement[31240-31259]:ExpressionStatement[31272-31291]"
    }, {
      "left" : "if (refs != null)",
      "right" : "if (refs != null)",
      "info" : "IfStatement[31270-31509]:IfStatement[31302-31541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31288-31509]:Block[31320-31541]"
    }, {
      "left" : "for (Ref maybeNewDecl : refs)",
      "right" : "for (Ref maybeNewDecl : refs)",
      "info" : "EnhancedForStatement[31302-31497]:EnhancedForStatement[31334-31529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31332-31497]:Block[31364-31529]"
    }, {
      "left" : "if (maybeNewDecl.type == Ref.Type.SET_FROM_GLOBAL)",
      "right" : "if (maybeNewDecl.type == Ref.Type.SET_FROM_GLOBAL)",
      "info" : "IfStatement[31348-31483]:IfStatement[31380-31515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31399-31483]:Block[31431-31515]"
    }, {
      "left" : "declaration = maybeNewDecl;",
      "right" : "declaration = maybeNewDecl;",
      "info" : "ExpressionStatement[31417-31444]:ExpressionStatement[31449-31476]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31461-31467]:BreakStatement[31493-31499]"
    }, {
      "left" : "switch (ref.type) {\n          case SET_FROM_GLOBAL:\n            globalSets--;\n            break;\n          case SET_FROM_LOCAL:\n            localSets--;\n            break;\n          case PROTOTYPE_GET:\n          case DIRECT_GET:\n            totalGets--;\n            break;\n          case ALIASING_GET:\n            aliasingGets--;\n            totalGets--;\n            break;\n          case CALL_GET:\n            callGets--;\n            totalGets--;\n            break;\n          case DELETE_PROP:\n            deleteProps--;\n            break;\n          default:\n            throw new IllegalStateException();\n        }",
      "right" : "switch (ref.type) {\n          case SET_FROM_GLOBAL:\n            globalSets--;\n            break;\n          case SET_FROM_LOCAL:\n            localSets--;\n            break;\n          case PROTOTYPE_GET:\n          case DIRECT_GET:\n            totalGets--;\n            break;\n          case ALIASING_GET:\n            aliasingGets--;\n            totalGets--;\n            break;\n          case CALL_GET:\n            callGets--;\n            totalGets--;\n            break;\n          case DELETE_PROP:\n            deleteProps--;\n            break;\n          default:\n            throw new IllegalStateException();\n        }",
      "info" : "SwitchStatement[31529-32145]:SwitchStatement[31561-32177]"
    }, {
      "left" : "case SET_FROM_GLOBAL:",
      "right" : "case SET_FROM_GLOBAL:",
      "info" : "SwitchCase[31559-31580]:SwitchCase[31591-31612]"
    }, {
      "left" : "globalSets--;",
      "right" : "globalSets--;",
      "info" : "ExpressionStatement[31593-31606]:ExpressionStatement[31625-31638]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31619-31625]:BreakStatement[31651-31657]"
    }, {
      "left" : "case SET_FROM_LOCAL:",
      "right" : "case SET_FROM_LOCAL:",
      "info" : "SwitchCase[31636-31656]:SwitchCase[31668-31688]"
    }, {
      "left" : "localSets--;",
      "right" : "localSets--;",
      "info" : "ExpressionStatement[31669-31681]:ExpressionStatement[31701-31713]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31694-31700]:BreakStatement[31726-31732]"
    }, {
      "left" : "case PROTOTYPE_GET:",
      "right" : "case PROTOTYPE_GET:",
      "info" : "SwitchCase[31711-31730]:SwitchCase[31743-31762]"
    }, {
      "left" : "case DIRECT_GET:",
      "right" : "case DIRECT_GET:",
      "info" : "SwitchCase[31741-31757]:SwitchCase[31773-31789]"
    }, {
      "left" : "totalGets--;",
      "right" : "totalGets--;",
      "info" : "ExpressionStatement[31770-31782]:ExpressionStatement[31802-31814]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31795-31801]:BreakStatement[31827-31833]"
    }, {
      "left" : "case ALIASING_GET:",
      "right" : "case ALIASING_GET:",
      "info" : "SwitchCase[31812-31830]:SwitchCase[31844-31862]"
    }, {
      "left" : "aliasingGets--;",
      "right" : "aliasingGets--;",
      "info" : "ExpressionStatement[31843-31858]:ExpressionStatement[31875-31890]"
    }, {
      "left" : "totalGets--;",
      "right" : "totalGets--;",
      "info" : "ExpressionStatement[31871-31883]:ExpressionStatement[31903-31915]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31896-31902]:BreakStatement[31928-31934]"
    }, {
      "left" : "case CALL_GET:",
      "right" : "case CALL_GET:",
      "info" : "SwitchCase[31913-31927]:SwitchCase[31945-31959]"
    }, {
      "left" : "callGets--;",
      "right" : "callGets--;",
      "info" : "ExpressionStatement[31940-31951]:ExpressionStatement[31972-31983]"
    }, {
      "left" : "totalGets--;",
      "right" : "totalGets--;",
      "info" : "ExpressionStatement[31964-31976]:ExpressionStatement[31996-32008]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31989-31995]:BreakStatement[32021-32027]"
    }, {
      "left" : "case DELETE_PROP:",
      "right" : "case DELETE_PROP:",
      "info" : "SwitchCase[32006-32023]:SwitchCase[32038-32055]"
    }, {
      "left" : "deleteProps--;",
      "right" : "deleteProps--;",
      "info" : "ExpressionStatement[32036-32050]:ExpressionStatement[32068-32082]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32063-32069]:BreakStatement[32095-32101]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[32080-32088]:SwitchCase[32112-32120]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[32101-32135]:ThrowStatement[32133-32167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32185-32252]:Block[32217-32284]"
    }, {
      "left" : "return refs == null ? ImmutableList.<Ref>of() : refs;",
      "right" : "return refs == null ? ImmutableList.<Ref>of() : refs;",
      "info" : "ReturnStatement[32193-32246]:ReturnStatement[32225-32278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32287-32386]:Block[32319-32418]"
    }, {
      "left" : "if (refs == null)",
      "right" : "if (refs == null)",
      "info" : "IfStatement[32295-32359]:IfStatement[32327-32391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32313-32359]:Block[32345-32391]"
    }, {
      "left" : "refs = Lists.newArrayList();",
      "right" : "refs = Lists.newArrayList();",
      "info" : "ExpressionStatement[32323-32351]:ExpressionStatement[32355-32383]"
    }, {
      "left" : "refs.add(ref);",
      "right" : "refs.add(ref);",
      "info" : "ExpressionStatement[32366-32380]:ExpressionStatement[32398-32412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32415-32686]:Block[32447-32718]"
    }, {
      "left" : "if (!canCollapseUnannotatedChildNames() || totalGets > 0)",
      "right" : "if (!canCollapseUnannotatedChildNames() || totalGets > 0)",
      "info" : "IfStatement[32423-32512]:IfStatement[32455-32544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32481-32512]:Block[32513-32544]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32491-32504]:ReturnStatement[32523-32536]"
    }, {
      "left" : "if (props != null)",
      "right" : "if (props != null)",
      "info" : "IfStatement[32520-32661]:IfStatement[32552-32693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32539-32661]:Block[32571-32693]"
    }, {
      "left" : "for (Name n : props)",
      "right" : "for (Name n : props)",
      "info" : "EnhancedForStatement[32549-32653]:EnhancedForStatement[32581-32685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32570-32653]:Block[32602-32685]"
    }, {
      "left" : "if (!n.canCollapse())",
      "right" : "if (!n.canCollapse())",
      "info" : "IfStatement[32582-32643]:IfStatement[32614-32675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32604-32643]:Block[32636-32675]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32618-32631]:ReturnStatement[32650-32663]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[32668-32680]:ReturnStatement[32700-32712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32726-32955]:Block[32758-32987]"
    }, {
      "left" : "if (getRefs().size() == 1)",
      "right" : "if (getRefs().size() == 1)",
      "info" : "IfStatement[32734-32929]:IfStatement[32766-32961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32761-32929]:Block[32793-32961]"
    }, {
      "left" : "Ref ref = refs.get(0);",
      "right" : "Ref ref = refs.get(0);",
      "info" : "VariableDeclarationStatement[32771-32793]:VariableDeclarationStatement[32803-32825]"
    }, {
      "left" : "if (ref.node.getParent() != null &&\n            ref.node.getParent().isExprResult())",
      "right" : "if (ref.node.getParent() != null &&\n            ref.node.getParent().isExprResult())",
      "info" : "IfStatement[32802-32921]:IfStatement[32834-32953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32887-32921]:Block[32919-32953]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[32899-32911]:ReturnStatement[32931-32943]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32936-32949]:ReturnStatement[32968-32981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32983-33212]:Block[33015-33244]"
    }, {
      "left" : "return !inExterns && !isGetOrSetDefinition() && (declaredType ||\n          (parent == null || parent.canCollapseUnannotatedChildNames()) &&\n          (globalSets > 0 || localSets > 0) &&\n          deleteProps == 0);",
      "right" : "return !inExterns && !isGetOrSetDefinition() && (declaredType ||\n          (parent == null || parent.canCollapseUnannotatedChildNames()) &&\n          (globalSets > 0 || localSets > 0) &&\n          deleteProps == 0);",
      "info" : "ReturnStatement[32991-33206]:ReturnStatement[33023-33238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33249-33317]:Block[33281-33349]"
    }, {
      "left" : "return this.type == Type.GET || this.type == Type.SET;",
      "right" : "return this.type == Type.GET || this.type == Type.SET;",
      "info" : "ReturnStatement[33257-33311]:ReturnStatement[33289-33343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33366-34344]:Block[33398-34376]"
    }, {
      "left" : "if (type == Type.OTHER || isGetOrSetDefinition()\n          || globalSets != 1 || localSets != 0 || deleteProps != 0)",
      "right" : "if (type == Type.OTHER || isGetOrSetDefinition()\n          || globalSets != 1 || localSets != 0 || deleteProps != 0)",
      "info" : "IfStatement[33374-33522]:IfStatement[33406-33554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33491-33522]:Block[33523-33554]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33501-33514]:ReturnStatement[33533-33546]"
    }, {
      "left" : "Preconditions.checkNotNull(declaration);",
      "right" : "Preconditions.checkNotNull(declaration);",
      "info" : "ExpressionStatement[33725-33765]:ExpressionStatement[33757-33797]"
    }, {
      "left" : "if (declaration.getTwin() != null)",
      "right" : "if (declaration.getTwin() != null)",
      "info" : "IfStatement[33772-33838]:IfStatement[33804-33870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33807-33838]:Block[33839-33870]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33817-33830]:ReturnStatement[33849-33862]"
    }, {
      "left" : "if (declaredType)",
      "right" : "if (declaredType)",
      "info" : "IfStatement[33846-33894]:IfStatement[33878-33926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33864-33894]:Block[33896-33926]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[33874-33886]:ReturnStatement[33906-33918]"
    }, {
      "left" : "if (parent != null && parent.shouldKeepKeys())",
      "right" : "if (parent != null && parent.shouldKeepKeys())",
      "info" : "IfStatement[34046-34124]:IfStatement[34078-34156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34093-34124]:Block[34125-34156]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[34103-34116]:ReturnStatement[34135-34148]"
    }, {
      "left" : "if (aliasingGets > 0)",
      "right" : "if (aliasingGets > 0)",
      "info" : "IfStatement[34208-34261]:IfStatement[34240-34293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34230-34261]:Block[34262-34293]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[34240-34253]:ReturnStatement[34272-34285]"
    }, {
      "left" : "return (parent == null || parent.canCollapseUnannotatedChildNames());",
      "right" : "return (parent == null || parent.canCollapseUnannotatedChildNames());",
      "info" : "ReturnStatement[34269-34338]:ReturnStatement[34301-34370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34449-34513]:Block[34481-34545]"
    }, {
      "left" : "return type == Type.OBJECTLIT && aliasingGets > 0;",
      "right" : "return type == Type.OBJECTLIT && aliasingGets > 0;",
      "info" : "ReturnStatement[34457-34507]:ReturnStatement[34489-34539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34546-34600]:Block[34578-34632]"
    }, {
      "left" : "return globalSets == 0 && localSets > 0;",
      "right" : "return globalSets == 0 && localSets > 0;",
      "info" : "ReturnStatement[34554-34594]:ReturnStatement[34586-34626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34629-34816]:Block[34661-34848]"
    }, {
      "left" : "declaredType = true;",
      "right" : "declaredType = true;",
      "info" : "ExpressionStatement[34637-34657]:ExpressionStatement[34669-34689]"
    }, {
      "left" : "for (Name ancestor = parent; ancestor != null;\n           ancestor = ancestor.parent)",
      "right" : "for (Name ancestor = parent; ancestor != null;\n           ancestor = ancestor.parent)",
      "info" : "ForStatement[34664-34810]:ForStatement[34696-34842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34750-34810]:Block[34782-34842]"
    }, {
      "left" : "ancestor.hasDeclaredTypeDescendant = true;",
      "right" : "ancestor.hasDeclaredTypeDescendant = true;",
      "info" : "ExpressionStatement[34760-34802]:ExpressionStatement[34792-34834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34847-34881]:Block[34879-34913]"
    }, {
      "left" : "return declaredType;",
      "right" : "return declaredType;",
      "info" : "ReturnStatement[34855-34875]:ReturnStatement[34887-34907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35273-35346]:Block[35305-35378]"
    }, {
      "left" : "return hasDeclaredTypeDescendant && type == Type.OBJECTLIT;",
      "right" : "return hasDeclaredTypeDescendant && type == Type.OBJECTLIT;",
      "info" : "ReturnStatement[35281-35340]:ReturnStatement[35313-35372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35480-35516]:Block[35512-35548]"
    }, {
      "left" : "return parent == null;",
      "right" : "return parent == null;",
      "info" : "ReturnStatement[35488-35510]:ReturnStatement[35520-35542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35557-35778]:Block[35589-35810]"
    }, {
      "left" : "return getFullName() + \" (\" + type + \"): globalSets=\" + globalSets +\n          \", localSets=\" + localSets + \", totalGets=\" + totalGets +\n          \", aliasingGets=\" + aliasingGets + \", callGets=\" + callGets;",
      "right" : "return getFullName() + \" (\" + type + \"): globalSets=\" + globalSets +\n          \", localSets=\" + localSets + \", totalGets=\" + totalGets +\n          \", aliasingGets=\" + aliasingGets + \", callGets=\" + callGets;",
      "info" : "ReturnStatement[35565-35772]:ReturnStatement[35597-35804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35830-35859]:Block[35862-35891]"
    }, {
      "left" : "return docInfo;",
      "right" : "return docInfo;",
      "info" : "ReturnStatement[35838-35853]:ReturnStatement[35870-35885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36002-36421]:Block[36034-36453]"
    }, {
      "left" : "if (ref.node != null)",
      "right" : "if (ref.node != null)",
      "info" : "IfStatement[36010-36395]:IfStatement[36042-36427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36032-36395]:Block[36064-36427]"
    }, {
      "left" : "Node refParent = ref.node.getParent();",
      "right" : "Node refParent = ref.node.getParent();",
      "info" : "VariableDeclarationStatement[36042-36080]:VariableDeclarationStatement[36074-36112]"
    }, {
      "left" : "switch (refParent.getType()) {\n          case Token.FUNCTION:\n          case Token.ASSIGN:\n            return refParent.getJSDocInfo();\n          case Token.VAR:\n            return ref.node == refParent.getFirstChild() ?\n                refParent.getJSDocInfo() : ref.node.getJSDocInfo();\n        }",
      "right" : "switch (refParent.getType()) {\n          case Token.FUNCTION:\n          case Token.ASSIGN:\n            return refParent.getJSDocInfo();\n          case Token.VAR:\n            return ref.node == refParent.getFirstChild() ?\n                refParent.getJSDocInfo() : ref.node.getJSDocInfo();\n        }",
      "info" : "SwitchStatement[36089-36387]:SwitchStatement[36121-36419]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[36130-36150]:SwitchCase[36162-36182]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[36161-36179]:SwitchCase[36193-36211]"
    }, {
      "left" : "return refParent.getJSDocInfo();",
      "right" : "return refParent.getJSDocInfo();",
      "info" : "ReturnStatement[36192-36224]:ReturnStatement[36224-36256]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[36235-36250]:SwitchCase[36267-36282]"
    }, {
      "left" : "return ref.node == refParent.getFirstChild() ?\n                refParent.getJSDocInfo() : ref.node.getJSDocInfo();",
      "right" : "return ref.node == refParent.getFirstChild() ?\n                refParent.getJSDocInfo() : ref.node.getJSDocInfo();",
      "info" : "ReturnStatement[36263-36377]:ReturnStatement[36295-36409]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[36403-36415]:ReturnStatement[36435-36447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37832-38047]:Block[37864-38079]"
    }, {
      "left" : "this.node = node;",
      "right" : "this.node = node;",
      "info" : "ExpressionStatement[37840-37857]:ExpressionStatement[37872-37889]"
    }, {
      "left" : "this.name = name;",
      "right" : "this.name = name;",
      "info" : "ExpressionStatement[37864-37881]:ExpressionStatement[37896-37913]"
    }, {
      "left" : "this.module = module;",
      "right" : "this.module = module;",
      "info" : "ExpressionStatement[37888-37909]:ExpressionStatement[37920-37941]"
    }, {
      "left" : "this.source = node.getStaticSourceFile();",
      "right" : "this.source = node.getStaticSourceFile();",
      "info" : "ExpressionStatement[37916-37957]:ExpressionStatement[37948-37989]"
    }, {
      "left" : "this.type = type;",
      "right" : "this.type = type;",
      "info" : "ExpressionStatement[37964-37981]:ExpressionStatement[37996-38013]"
    }, {
      "left" : "this.scope = scope;",
      "right" : "this.scope = scope;",
      "info" : "ExpressionStatement[37988-38007]:ExpressionStatement[38020-38039]"
    }, {
      "left" : "this.preOrderIndex = index;",
      "right" : "this.preOrderIndex = index;",
      "info" : "ExpressionStatement[38014-38041]:ExpressionStatement[38046-38073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38101-38341]:Block[38133-38373]"
    }, {
      "left" : "this.node = original.node;",
      "right" : "this.node = original.node;",
      "info" : "ExpressionStatement[38109-38135]:ExpressionStatement[38141-38167]"
    }, {
      "left" : "this.name = original.name;",
      "right" : "this.name = original.name;",
      "info" : "ExpressionStatement[38142-38168]:ExpressionStatement[38174-38200]"
    }, {
      "left" : "this.module = original.module;",
      "right" : "this.module = original.module;",
      "info" : "ExpressionStatement[38175-38205]:ExpressionStatement[38207-38237]"
    }, {
      "left" : "this.source = original.source;",
      "right" : "this.source = original.source;",
      "info" : "ExpressionStatement[38212-38242]:ExpressionStatement[38244-38274]"
    }, {
      "left" : "this.type = type;",
      "right" : "this.type = type;",
      "info" : "ExpressionStatement[38249-38266]:ExpressionStatement[38281-38298]"
    }, {
      "left" : "this.scope = original.scope;",
      "right" : "this.scope = original.scope;",
      "info" : "ExpressionStatement[38273-38301]:ExpressionStatement[38305-38333]"
    }, {
      "left" : "this.preOrderIndex = index;",
      "right" : "this.preOrderIndex = index;",
      "info" : "ExpressionStatement[38308-38335]:ExpressionStatement[38340-38367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38381-38547]:Block[38413-38579]"
    }, {
      "left" : "this.type = type;",
      "right" : "this.type = type;",
      "info" : "ExpressionStatement[38389-38406]:ExpressionStatement[38421-38438]"
    }, {
      "left" : "this.module = null;",
      "right" : "this.module = null;",
      "info" : "ExpressionStatement[38413-38432]:ExpressionStatement[38445-38464]"
    }, {
      "left" : "this.source = null;",
      "right" : "this.source = null;",
      "info" : "ExpressionStatement[38439-38458]:ExpressionStatement[38471-38490]"
    }, {
      "left" : "this.scope = null;",
      "right" : "this.scope = null;",
      "info" : "ExpressionStatement[38465-38483]:ExpressionStatement[38497-38515]"
    }, {
      "left" : "this.name = null;",
      "right" : "this.name = null;",
      "info" : "ExpressionStatement[38490-38507]:ExpressionStatement[38522-38539]"
    }, {
      "left" : "this.preOrderIndex = index;",
      "right" : "this.preOrderIndex = index;",
      "info" : "ExpressionStatement[38514-38541]:ExpressionStatement[38546-38573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38589-38615]:Block[38621-38647]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[38597-38609]:ReturnStatement[38629-38641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38675-38703]:Block[38707-38735]"
    }, {
      "left" : "return source;",
      "right" : "return source;",
      "info" : "ReturnStatement[38683-38697]:ReturnStatement[38715-38729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38761-38787]:Block[38793-38819]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[38769-38781]:ReturnStatement[38801-38813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38814-38842]:Block[38846-38874]"
    }, {
      "left" : "return module;",
      "right" : "return module;",
      "info" : "ReturnStatement[38822-38836]:ReturnStatement[38854-38868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38871-38931]:Block[38903-38963]"
    }, {
      "left" : "return source == null ? \"\" : source.getName();",
      "right" : "return source == null ? \"\" : source.getName();",
      "info" : "ReturnStatement[38879-38925]:ReturnStatement[38911-38957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38951-38977]:Block[38983-39009]"
    }, {
      "left" : "return twin;",
      "right" : "return twin;",
      "info" : "ReturnStatement[38959-38971]:ReturnStatement[38991-39003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38999-39080]:Block[39031-39112]"
    }, {
      "left" : "return type == Type.SET_FROM_GLOBAL || type == Type.SET_FROM_LOCAL;",
      "right" : "return type == Type.SET_FROM_GLOBAL || type == Type.SET_FROM_LOCAL;",
      "info" : "ReturnStatement[39007-39074]:ReturnStatement[39039-39106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39122-39430]:Block[39154-39462]"
    }, {
      "left" : "Preconditions.checkArgument(\n          (a.type == Type.ALIASING_GET || b.type == Type.ALIASING_GET) &&\n          (a.type == Type.SET_FROM_GLOBAL || a.type == Type.SET_FROM_LOCAL ||\n           b.type == Type.SET_FROM_GLOBAL || b.type == Type.SET_FROM_LOCAL));",
      "right" : "Preconditions.checkArgument(\n          (a.type == Type.ALIASING_GET || b.type == Type.ALIASING_GET) &&\n          (a.type == Type.SET_FROM_GLOBAL || a.type == Type.SET_FROM_LOCAL ||\n           b.type == Type.SET_FROM_GLOBAL || b.type == Type.SET_FROM_LOCAL));",
      "info" : "ExpressionStatement[39130-39388]:ExpressionStatement[39162-39420]"
    }, {
      "left" : "a.twin = b;",
      "right" : "a.twin = b;",
      "info" : "ExpressionStatement[39395-39406]:ExpressionStatement[39427-39438]"
    }, {
      "left" : "b.twin = a;",
      "right" : "b.twin = a;",
      "info" : "ExpressionStatement[39413-39424]:ExpressionStatement[39445-39456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39573-39634]:Block[39605-39666]"
    }, {
      "left" : "return new Ref(this, type, this.preOrderIndex);",
      "right" : "return new Ref(this, type, this.preOrderIndex);",
      "info" : "ReturnStatement[39581-39628]:ReturnStatement[39613-39660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39682-39721]:Block[39714-39753]"
    }, {
      "left" : "return new Ref(type, -1);",
      "right" : "return new Ref(type, -1);",
      "info" : "ReturnStatement[39690-39715]:ReturnStatement[39722-39747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40538-40659]:Block[40570-40691]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[40546-40571]:ExpressionStatement[40578-40603]"
    }, {
      "left" : "this.stream = stream;",
      "right" : "this.stream = stream;",
      "info" : "ExpressionStatement[40578-40599]:ExpressionStatement[40610-40631]"
    }, {
      "left" : "this.isInterestingSymbol = isInterestingSymbol;",
      "right" : "this.isInterestingSymbol = isInterestingSymbol;",
      "info" : "ExpressionStatement[40606-40653]:ExpressionStatement[40638-40685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40720-41578]:Block[40752-41610]"
    }, {
      "left" : "GlobalNamespace namespace = new GlobalNamespace(compiler, externs, root);",
      "right" : "GlobalNamespace namespace = new GlobalNamespace(compiler, externs, root);",
      "info" : "VariableDeclarationStatement[40728-40801]:VariableDeclarationStatement[40760-40833]"
    }, {
      "left" : "Set<String> currentSymbols = Sets.newTreeSet();",
      "right" : "Set<String> currentSymbols = Sets.newTreeSet();",
      "info" : "VariableDeclarationStatement[40809-40856]:VariableDeclarationStatement[40841-40888]"
    }, {
      "left" : "for (String name : namespace.getNameIndex().keySet())",
      "right" : "for (String name : namespace.getNameIndex().keySet())",
      "info" : "EnhancedForStatement[40863-41019]:EnhancedForStatement[40895-41051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40917-41019]:Block[40949-41051]"
    }, {
      "left" : "if (isInterestingSymbol.apply(name))",
      "right" : "if (isInterestingSymbol.apply(name))",
      "info" : "IfStatement[40927-41011]:IfStatement[40959-41043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40964-41011]:Block[40996-41043]"
    }, {
      "left" : "currentSymbols.add(name);",
      "right" : "currentSymbols.add(name);",
      "info" : "ExpressionStatement[40976-41001]:ExpressionStatement[41008-41033]"
    }, {
      "left" : "String passName = compiler.getLastPassName();",
      "right" : "String passName = compiler.getLastPassName();",
      "info" : "VariableDeclarationStatement[41027-41072]:VariableDeclarationStatement[41059-41104]"
    }, {
      "left" : "if (passName == null)",
      "right" : "if (passName == null)",
      "info" : "IfStatement[41079-41147]:IfStatement[41111-41179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41101-41147]:Block[41133-41179]"
    }, {
      "left" : "passName = \"[Unknown pass]\";",
      "right" : "passName = \"[Unknown pass]\";",
      "info" : "ExpressionStatement[41111-41139]:ExpressionStatement[41143-41171]"
    }, {
      "left" : "for (String sym : currentSymbols)",
      "right" : "for (String sym : currentSymbols)",
      "info" : "EnhancedForStatement[41155-41335]:EnhancedForStatement[41187-41367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41189-41335]:Block[41221-41367]"
    }, {
      "left" : "if (!previousSymbolsInTree.contains(sym))",
      "right" : "if (!previousSymbolsInTree.contains(sym))",
      "info" : "IfStatement[41199-41327]:IfStatement[41231-41359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41241-41327]:Block[41273-41359]"
    }, {
      "left" : "stream.println(String.format(\"%s: Added by %s\", sym, passName));",
      "right" : "stream.println(String.format(\"%s: Added by %s\", sym, passName));",
      "info" : "ExpressionStatement[41253-41317]:ExpressionStatement[41285-41349]"
    }, {
      "left" : "for (String sym : previousSymbolsInTree)",
      "right" : "for (String sym : previousSymbolsInTree)",
      "info" : "EnhancedForStatement[41343-41525]:EnhancedForStatement[41375-41557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41384-41525]:Block[41416-41557]"
    }, {
      "left" : "if (!currentSymbols.contains(sym))",
      "right" : "if (!currentSymbols.contains(sym))",
      "info" : "IfStatement[41394-41517]:IfStatement[41426-41549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41429-41517]:Block[41461-41549]"
    }, {
      "left" : "stream.println(String.format(\"%s: Removed by %s\", sym, passName));",
      "right" : "stream.println(String.format(\"%s: Removed by %s\", sym, passName));",
      "info" : "ExpressionStatement[41441-41507]:ExpressionStatement[41473-41539]"
    }, {
      "left" : "previousSymbolsInTree = currentSymbols;",
      "right" : "previousSymbolsInTree = currentSymbols;",
      "info" : "ExpressionStatement[41533-41572]:ExpressionStatement[41565-41604]"
    } ]
  },
  "interFileMappings" : { }
}