{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[1455-1495]:FieldDeclaration[1455-1495]"
    }, {
      "left" : "private static final int SAVINGS_THRESHOLD = 16;",
      "right" : "private static final int SAVINGS_THRESHOLD = 16;",
      "info" : "FieldDeclaration[1598-1646]:FieldDeclaration[1598-1646]"
    }, {
      "left" : "FunctionRewriter(AbstractCompiler compiler)",
      "right" : "FunctionRewriter(AbstractCompiler compiler)",
      "info" : "MethodDeclaration[1650-1729]:MethodDeclaration[1650-1729]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[1733-3458]:MethodDeclaration[1733-3458]"
    }, {
      "left" : "public Node parseHelperCode(Reducer reducer)",
      "right" : "public Node parseHelperCode(Reducer reducer)",
      "info" : "MethodDeclaration[3462-3818]:MethodDeclaration[3462-3818]"
    }, {
      "left" : "Reduction",
      "right" : "Reduction",
      "info" : "TypeDeclaration[3938-4697]:TypeDeclaration[3988-4747]"
    }, {
      "left" : "private final Node parent;",
      "right" : "private final Node parent;",
      "info" : "FieldDeclaration[4026-4052]:FieldDeclaration[4076-4102]"
    }, {
      "left" : "private final Node oldChild;",
      "right" : "private final Node oldChild;",
      "info" : "FieldDeclaration[4057-4085]:FieldDeclaration[4107-4135]"
    }, {
      "left" : "private final Node newChild;",
      "right" : "private final Node newChild;",
      "info" : "FieldDeclaration[4090-4118]:FieldDeclaration[4140-4168]"
    }, {
      "left" : "Reduction(Node parent, Node oldChild, Node newChild)",
      "right" : "Reduction(Node parent, Node oldChild, Node newChild)",
      "info" : "MethodDeclaration[4124-4276]:MethodDeclaration[4174-4326]"
    }, {
      "left" : "void apply()",
      "right" : "void apply()",
      "info" : "MethodDeclaration[4282-4474]:MethodDeclaration[4332-4524]"
    }, {
      "left" : "int estimateSavings()",
      "right" : "int estimateSavings()",
      "info" : "MethodDeclaration[4480-4693]:MethodDeclaration[4530-4743]"
    }, {
      "left" : "ReductionGatherer",
      "right" : "ReductionGatherer",
      "info" : "TypeDeclaration[4701-5941]:TypeDeclaration[4751-5991]"
    }, {
      "left" : "private final List<Reducer> reducers;",
      "right" : "private final List<Reducer> reducers;",
      "info" : "FieldDeclaration[4932-4969]:FieldDeclaration[4982-5019]"
    }, {
      "left" : "private final Multimap<Reducer, Reduction> reductions;",
      "right" : "private final Multimap<Reducer, Reduction> reductions;",
      "info" : "FieldDeclaration[4974-5028]:FieldDeclaration[5024-5078]"
    }, {
      "left" : "ReductionGatherer(List<Reducer> reducers,\n                      Multimap<Reducer, Reduction> reductions)",
      "right" : "ReductionGatherer(List<Reducer> reducers,\n                      Multimap<Reducer, Reduction> reductions)",
      "info" : "MethodDeclaration[5034-5406]:MethodDeclaration[5084-5456]"
    }, {
      "left" : "public boolean shouldTraverse(NodeTraversal raversal,\n                                  Node node,\n                                  Node parent)",
      "right" : "public boolean shouldTraverse(NodeTraversal raversal,\n                                  Node node,\n                                  Node parent)",
      "info" : "MethodDeclaration[5412-5842]:MethodDeclaration[5462-5892]"
    }, {
      "left" : "public void visit(NodeTraversal traversal, Node node, Node parent)",
      "right" : "public void visit(NodeTraversal traversal, Node node, Node parent)",
      "info" : "MethodDeclaration[5849-5937]:MethodDeclaration[5899-5987]"
    }, {
      "left" : "Reducer",
      "right" : "Reducer",
      "info" : "TypeDeclaration[5945-7110]:TypeDeclaration[5995-7160]"
    }, {
      "left" : "abstract String getHelperSource();",
      "right" : "abstract String getHelperSource();",
      "info" : "MethodDeclaration[6064-6182]:MethodDeclaration[6114-6232]"
    }, {
      "left" : "abstract Node reduce(Node node);",
      "right" : "abstract Node reduce(Node node);",
      "info" : "MethodDeclaration[6188-6359]:MethodDeclaration[6238-6409]"
    }, {
      "left" : "protected final Node buildCallNode(String methodName, Node argumentNode,\n                                       int lineno, int charno)",
      "right" : "protected final Node buildCallNode(String methodName, Node argumentNode,\n                                       int lineno, int charno)",
      "info" : "MethodDeclaration[6365-7106]:MethodDeclaration[6415-7156]"
    }, {
      "left" : "EmptyFunctionReducer",
      "right" : "EmptyFunctionReducer",
      "info" : "TypeDeclaration[7114-7993]:TypeDeclaration[7164-8043]"
    }, {
      "left" : "static final String FACTORY_METHOD_NAME = \"JSCompiler_emptyFn\";",
      "right" : "static final String FACTORY_METHOD_NAME = \"JSCompiler_emptyFn\";",
      "info" : "FieldDeclaration[7421-7484]:FieldDeclaration[7471-7534]"
    }, {
      "left" : "static final String HELPER_SOURCE =\n        \"function \" + FACTORY_METHOD_NAME + \"() {\" +\n        \"  return function() {}\" +\n        \"}\";",
      "right" : "static final String HELPER_SOURCE =\n        \"function \" + FACTORY_METHOD_NAME + \"() {\" +\n        \"  return function() {}\" +\n        \"}\";",
      "info" : "FieldDeclaration[7489-7625]:FieldDeclaration[7539-7675]"
    }, {
      "left" : "public String getHelperSource()",
      "right" : "public String getHelperSource()",
      "info" : "MethodDeclaration[7631-7712]:MethodDeclaration[7681-7762]"
    }, {
      "left" : "public Node reduce(Node node)",
      "right" : "public Node reduce(Node node)",
      "info" : "MethodDeclaration[7718-7989]:MethodDeclaration[7768-8039]"
    }, {
      "left" : "SingleReturnStatementReducer",
      "right" : "SingleReturnStatementReducer",
      "info" : "TypeDeclaration[7997-8665]:TypeDeclaration[8047-8715]"
    }, {
      "left" : "protected final Node maybeGetSingleReturnRValue(Node functionNode)",
      "right" : "protected final Node maybeGetSingleReturnRValue(Node functionNode)",
      "info" : "MethodDeclaration[8178-8661]:MethodDeclaration[8228-8711]"
    }, {
      "left" : "IdentityReducer",
      "right" : "IdentityReducer",
      "info" : "TypeDeclaration[8669-10359]:TypeDeclaration[8719-10409]"
    }, {
      "left" : "static final String FACTORY_METHOD_NAME = \"JSCompiler_identityFn\";",
      "right" : "static final String FACTORY_METHOD_NAME = \"JSCompiler_identityFn\";",
      "info" : "FieldDeclaration[8973-9039]:FieldDeclaration[9023-9089]"
    }, {
      "left" : "static final String HELPER_SOURCE =\n        \"function \" + FACTORY_METHOD_NAME + \"() {\" +\n        \"  return function(\" + FACTORY_METHOD_NAME + \"_value) {\" +\n             \"return \" + FACTORY_METHOD_NAME + \"_value}\" +\n        \"}\";",
      "right" : "static final String HELPER_SOURCE =\n        \"function \" + FACTORY_METHOD_NAME + \"() {\" +\n        \"  return function(\" + FACTORY_METHOD_NAME + \"_value) {\" +\n             \"return \" + FACTORY_METHOD_NAME + \"_value}\" +\n        \"}\";",
      "info" : "FieldDeclaration[9044-9271]:FieldDeclaration[9094-9321]"
    }, {
      "left" : "public String getHelperSource()",
      "right" : "public String getHelperSource()",
      "info" : "MethodDeclaration[9277-9358]:MethodDeclaration[9327-9408]"
    }, {
      "left" : "public Node reduce(Node node)",
      "right" : "public Node reduce(Node node)",
      "info" : "MethodDeclaration[9364-9700]:MethodDeclaration[9414-9750]"
    }, {
      "left" : "private boolean isIdentityFunction(Node functionNode)",
      "right" : "private boolean isIdentityFunction(Node functionNode)",
      "info" : "MethodDeclaration[9706-10355]:MethodDeclaration[9756-10405]"
    }, {
      "left" : "ReturnConstantReducer",
      "right" : "ReturnConstantReducer",
      "info" : "TypeDeclaration[10363-11950]:TypeDeclaration[10413-12000]"
    }, {
      "left" : "static final String FACTORY_METHOD_NAME = \"JSCompiler_returnArg\";",
      "right" : "static final String FACTORY_METHOD_NAME = \"JSCompiler_returnArg\";",
      "info" : "FieldDeclaration[10713-10778]:FieldDeclaration[10763-10828]"
    }, {
      "left" : "static final String HELPER_SOURCE =\n        \"function \" + FACTORY_METHOD_NAME +\n        \"(\" + FACTORY_METHOD_NAME + \"_value) {\" +\n        \"  return function() {return \" + FACTORY_METHOD_NAME + \"_value}\" +\n        \"}\";",
      "right" : "static final String HELPER_SOURCE =\n        \"function \" + FACTORY_METHOD_NAME +\n        \"(\" + FACTORY_METHOD_NAME + \"_value) {\" +\n        \"  return function() {return \" + FACTORY_METHOD_NAME + \"_value}\" +\n        \"}\";",
      "info" : "FieldDeclaration[10783-11000]:FieldDeclaration[10833-11050]"
    }, {
      "left" : "public String getHelperSource()",
      "right" : "public String getHelperSource()",
      "info" : "MethodDeclaration[11006-11087]:MethodDeclaration[11056-11137]"
    }, {
      "left" : "public Node reduce(Node node)",
      "right" : "public Node reduce(Node node)",
      "info" : "MethodDeclaration[11093-11470]:MethodDeclaration[11143-11520]"
    }, {
      "left" : "private Node getValueNode(Node functionNode)",
      "right" : "private Node getValueNode(Node functionNode)",
      "info" : "MethodDeclaration[11476-11946]:MethodDeclaration[11526-11996]"
    }, {
      "left" : "GetterReducer",
      "right" : "GetterReducer",
      "info" : "TypeDeclaration[11954-13754]:TypeDeclaration[12004-13804]"
    }, {
      "left" : "static final String FACTORY_METHOD_NAME = \"JSCompiler_get\";",
      "right" : "static final String FACTORY_METHOD_NAME = \"JSCompiler_get\";",
      "info" : "FieldDeclaration[12264-12323]:FieldDeclaration[12314-12373]"
    }, {
      "left" : "static final String HELPER_SOURCE =\n        \"function \" + FACTORY_METHOD_NAME + \"(\" +\n        FACTORY_METHOD_NAME + \"_name) {\" +\n        \"  return function() {return this[\" + FACTORY_METHOD_NAME + \"_name]}\" +\n        \"}\";",
      "right" : "static final String HELPER_SOURCE =\n        \"function \" + FACTORY_METHOD_NAME + \"(\" +\n        FACTORY_METHOD_NAME + \"_name) {\" +\n        \"  return function() {return this[\" + FACTORY_METHOD_NAME + \"_name]}\" +\n        \"}\";",
      "info" : "FieldDeclaration[12328-12549]:FieldDeclaration[12378-12599]"
    }, {
      "left" : "public String getHelperSource()",
      "right" : "public String getHelperSource()",
      "info" : "MethodDeclaration[12555-12636]:MethodDeclaration[12605-12686]"
    }, {
      "left" : "public Node reduce(Node node)",
      "right" : "public Node reduce(Node node)",
      "info" : "MethodDeclaration[12642-13199]:MethodDeclaration[12692-13249]"
    }, {
      "left" : "private Node getGetPropertyName(Node functionNode)",
      "right" : "private Node getGetPropertyName(Node functionNode)",
      "info" : "MethodDeclaration[13205-13750]:MethodDeclaration[13255-13800]"
    }, {
      "left" : "SetterReducer",
      "right" : "SetterReducer",
      "info" : "TypeDeclaration[13758-16222]:TypeDeclaration[13808-16272]"
    }, {
      "left" : "static final String FACTORY_METHOD_NAME = \"JSCompiler_set\";",
      "right" : "static final String FACTORY_METHOD_NAME = \"JSCompiler_set\";",
      "info" : "FieldDeclaration[14056-14115]:FieldDeclaration[14106-14165]"
    }, {
      "left" : "static final String HELPER_SOURCE =\n        \"function \" + FACTORY_METHOD_NAME + \"(\" +\n        FACTORY_METHOD_NAME + \"_name) {\" +\n        \"  return function(\" + FACTORY_METHOD_NAME + \"_value) {\" +\n        \"this[\" + FACTORY_METHOD_NAME + \"_name] = \" +\n        FACTORY_METHOD_NAME + \"_value}\" +\n        \"}\";",
      "right" : "static final String HELPER_SOURCE =\n        \"function \" + FACTORY_METHOD_NAME + \"(\" +\n        FACTORY_METHOD_NAME + \"_name) {\" +\n        \"  return function(\" + FACTORY_METHOD_NAME + \"_value) {\" +\n        \"this[\" + FACTORY_METHOD_NAME + \"_name] = \" +\n        FACTORY_METHOD_NAME + \"_value}\" +\n        \"}\";",
      "info" : "FieldDeclaration[14120-14424]:FieldDeclaration[14170-14474]"
    }, {
      "left" : "public String getHelperSource()",
      "right" : "public String getHelperSource()",
      "info" : "MethodDeclaration[14430-14511]:MethodDeclaration[14480-14561]"
    }, {
      "left" : "public Node reduce(Node node)",
      "right" : "public Node reduce(Node node)",
      "info" : "MethodDeclaration[14517-15074]:MethodDeclaration[14567-15124]"
    }, {
      "left" : "private Node getSetPropertyName(Node functionNode)",
      "right" : "private Node getSetPropertyName(Node functionNode)",
      "info" : "MethodDeclaration[15080-16218]:MethodDeclaration[15130-16268]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1694-1729]:Block[1694-1729]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[1700-1725]:ExpressionStatement[1700-1725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1790-3458]:Block[1790-3458]"
    }, {
      "left" : "List<Reducer> reducers = ImmutableList.of(new ReturnConstantReducer(),\n                                              new GetterReducer(),\n                                              new SetterReducer(),\n                                              new EmptyFunctionReducer(),\n                                              new IdentityReducer());",
      "right" : "List<Reducer> reducers = ImmutableList.of(new ReturnConstantReducer(),\n                                              new GetterReducer(),\n                                              new SetterReducer(),\n                                              new EmptyFunctionReducer(),\n                                              new IdentityReducer());",
      "info" : "VariableDeclarationStatement[1796-2144]:VariableDeclarationStatement[1796-2144]"
    }, {
      "left" : "Multimap<Reducer, Reduction> reductionMap = HashMultimap.create();",
      "right" : "Multimap<Reducer, Reduction> reductionMap = HashMultimap.create();",
      "info" : "VariableDeclarationStatement[2150-2216]:VariableDeclarationStatement[2150-2216]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root,\n                           new ReductionGatherer(reducers, reductionMap));",
      "right" : "NodeTraversal.traverse(compiler, root,\n                           new ReductionGatherer(reducers, reductionMap));",
      "info" : "ExpressionStatement[2336-2449]:ExpressionStatement[2336-2449]"
    }, {
      "left" : "for (Reducer reducer : reducers)",
      "right" : "for (Reducer reducer : reducers)",
      "info" : "EnhancedForStatement[2515-3454]:EnhancedForStatement[2515-3454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2548-3454]:Block[2548-3454]"
    }, {
      "left" : "Collection<Reduction> reductions = reductionMap.get(reducer);",
      "right" : "Collection<Reduction> reductions = reductionMap.get(reducer);",
      "info" : "VariableDeclarationStatement[2556-2617]:VariableDeclarationStatement[2556-2617]"
    }, {
      "left" : "if (reductions.isEmpty())",
      "right" : "if (reductions.isEmpty())",
      "info" : "IfStatement[2624-2677]:IfStatement[2624-2677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2650-2677]:Block[2650-2677]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[2660-2669]:ContinueStatement[2660-2669]"
    }, {
      "left" : "Node helperCode = parseHelperCode(reducer);",
      "right" : "Node helperCode = parseHelperCode(reducer);",
      "info" : "VariableDeclarationStatement[2685-2728]:VariableDeclarationStatement[2685-2728]"
    }, {
      "left" : "if (helperCode == null)",
      "right" : "if (helperCode == null)",
      "info" : "IfStatement[2735-2786]:IfStatement[2735-2786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2759-2786]:Block[2759-2786]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[2769-2778]:ContinueStatement[2769-2778]"
    }, {
      "left" : "int helperCodeCost = InlineCostEstimator.getCost(helperCode);",
      "right" : "int helperCodeCost = InlineCostEstimator.getCost(helperCode);",
      "info" : "VariableDeclarationStatement[2794-2855]:VariableDeclarationStatement[2794-2855]"
    }, {
      "left" : "int savings = 0;",
      "right" : "int savings = 0;",
      "info" : "VariableDeclarationStatement[2889-2905]:VariableDeclarationStatement[2889-2905]"
    }, {
      "left" : "for (Reduction reduction : reductions)",
      "right" : "for (Reduction reduction : reductions)",
      "info" : "EnhancedForStatement[2912-3008]:EnhancedForStatement[2912-3008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2951-3008]:Block[2951-3008]"
    }, {
      "left" : "savings += reduction.estimateSavings();",
      "right" : "savings += reduction.estimateSavings();",
      "info" : "ExpressionStatement[2961-3000]:ExpressionStatement[2961-3000]"
    }, {
      "left" : "if (savings > (helperCodeCost + SAVINGS_THRESHOLD))",
      "right" : "if (savings > (helperCodeCost + SAVINGS_THRESHOLD))",
      "info" : "IfStatement[3144-3448]:IfStatement[3144-3448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3196-3448]:Block[3196-3448]"
    }, {
      "left" : "for (Reduction reduction : reductions)",
      "right" : "for (Reduction reduction : reductions)",
      "info" : "EnhancedForStatement[3206-3285]:EnhancedForStatement[3206-3285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3245-3285]:Block[3245-3285]"
    }, {
      "left" : "reduction.apply();",
      "right" : "reduction.apply();",
      "info" : "ExpressionStatement[3257-3275]:ExpressionStatement[3257-3275]"
    }, {
      "left" : "Node addingRoot = compiler.getNodeForCodeInsertion(null);",
      "right" : "Node addingRoot = compiler.getNodeForCodeInsertion(null);",
      "info" : "VariableDeclarationStatement[3295-3352]:VariableDeclarationStatement[3295-3352]"
    }, {
      "left" : "addingRoot.addChildrenToFront(helperCode);",
      "right" : "addingRoot.addChildrenToFront(helperCode);",
      "info" : "ExpressionStatement[3361-3403]:ExpressionStatement[3361-3403]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[3412-3440]:ExpressionStatement[3412-3440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3629-3818]:Block[3629-3818]"
    }, {
      "left" : "Node root = compiler.parseSyntheticCode(\n        reducer.getClass().toString() + \":helper\", reducer.getHelperSource());",
      "right" : "Node root = compiler.parseSyntheticCode(\n        reducer.getClass().toString() + \":helper\", reducer.getHelperSource());",
      "info" : "VariableDeclarationStatement[3635-3754]:VariableDeclarationStatement[3635-3754]"
    }, {
      "left" : "return (root != null) ? root.removeFirstChild() : null;",
      "right" : "return (root != null) ? root.removeFirstChild() : null;",
      "info" : "ReturnStatement[3759-3814]:ReturnStatement[3759-3814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4177-4276]:Block[4227-4326]"
    }, {
      "left" : "this.parent = parent;",
      "right" : "this.parent = parent;",
      "info" : "ExpressionStatement[4185-4206]:ExpressionStatement[4235-4256]"
    }, {
      "left" : "this.oldChild = oldChild;",
      "right" : "this.oldChild = oldChild;",
      "info" : "ExpressionStatement[4213-4238]:ExpressionStatement[4263-4288]"
    }, {
      "left" : "this.newChild = newChild;",
      "right" : "this.newChild = newChild;",
      "info" : "ExpressionStatement[4245-4270]:ExpressionStatement[4295-4320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4385-4474]:Block[4435-4524]"
    }, {
      "left" : "parent.replaceChild(oldChild, newChild);",
      "right" : "parent.replaceChild(oldChild, newChild);",
      "info" : "ExpressionStatement[4393-4433]:ExpressionStatement[4443-4483]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[4440-4468]:ExpressionStatement[4490-4518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4584-4693]:Block[4634-4743]"
    }, {
      "left" : "return InlineCostEstimator.getCost(oldChild) -\n          InlineCostEstimator.getCost(newChild);",
      "right" : "return InlineCostEstimator.getCost(oldChild) -\n          InlineCostEstimator.getCost(newChild);",
      "info" : "ReturnStatement[4592-4687]:ReturnStatement[4642-4737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5331-5406]:Block[5381-5456]"
    }, {
      "left" : "this.reducers = reducers;",
      "right" : "this.reducers = reducers;",
      "info" : "ExpressionStatement[5339-5364]:ExpressionStatement[5389-5414]"
    }, {
      "left" : "this.reductions = reductions;",
      "right" : "this.reductions = reductions;",
      "info" : "ExpressionStatement[5371-5400]:ExpressionStatement[5421-5450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5572-5842]:Block[5622-5892]"
    }, {
      "left" : "for (Reducer reducer : reducers)",
      "right" : "for (Reducer reducer : reducers)",
      "info" : "EnhancedForStatement[5580-5817]:EnhancedForStatement[5630-5867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5613-5817]:Block[5663-5867]"
    }, {
      "left" : "Node replacement = reducer.reduce(node);",
      "right" : "Node replacement = reducer.reduce(node);",
      "info" : "VariableDeclarationStatement[5623-5663]:VariableDeclarationStatement[5673-5713]"
    }, {
      "left" : "if (replacement != node)",
      "right" : "if (replacement != node)",
      "info" : "IfStatement[5672-5809]:IfStatement[5722-5859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5697-5809]:Block[5747-5859]"
    }, {
      "left" : "reductions.put(reducer, new Reduction(parent, node, replacement));",
      "right" : "reductions.put(reducer, new Reduction(parent, node, replacement));",
      "info" : "ExpressionStatement[5709-5775]:ExpressionStatement[5759-5825]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5786-5799]:ReturnStatement[5836-5849]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[5824-5836]:ReturnStatement[5874-5886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5930-5937]:Block[5980-5987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6811-7106]:Block[6861-7156]"
    }, {
      "left" : "Node call = new Node(Token.CALL, lineno, charno);",
      "right" : "Node call = new Node(Token.CALL, lineno, charno);",
      "info" : "VariableDeclarationStatement[6819-6868]:VariableDeclarationStatement[6869-6918]"
    }, {
      "left" : "call.putBooleanProp(Node.FREE_CALL, true);",
      "right" : "call.putBooleanProp(Node.FREE_CALL, true);",
      "info" : "ExpressionStatement[6875-6917]:ExpressionStatement[6925-6967]"
    }, {
      "left" : "call.addChildToBack(Node.newString(Token.NAME, methodName));",
      "right" : "call.addChildToBack(Node.newString(Token.NAME, methodName));",
      "info" : "ExpressionStatement[6924-6984]:ExpressionStatement[6974-7034]"
    }, {
      "left" : "if (argumentNode != null)",
      "right" : "if (argumentNode != null)",
      "info" : "IfStatement[6991-7081]:IfStatement[7041-7131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7017-7081]:Block[7067-7131]"
    }, {
      "left" : "call.addChildToBack(argumentNode.cloneTree());",
      "right" : "call.addChildToBack(argumentNode.cloneTree());",
      "info" : "ExpressionStatement[7027-7073]:ExpressionStatement[7077-7123]"
    }, {
      "left" : "return call;",
      "right" : "return call;",
      "info" : "ReturnStatement[7088-7100]:ReturnStatement[7138-7150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7677-7712]:Block[7727-7762]"
    }, {
      "left" : "return HELPER_SOURCE;",
      "right" : "return HELPER_SOURCE;",
      "info" : "ReturnStatement[7685-7706]:ReturnStatement[7735-7756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7762-7989]:Block[7812-8039]"
    }, {
      "left" : "if (NodeUtil.isEmptyFunctionExpression(node))",
      "right" : "if (NodeUtil.isEmptyFunctionExpression(node))",
      "info" : "IfStatement[7770-7983]:IfStatement[7820-8033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7816-7947]:Block[7866-7997]"
    }, {
      "left" : "return buildCallNode(FACTORY_METHOD_NAME, null,\n                             node.getLineno(), node.getCharno());",
      "right" : "return buildCallNode(FACTORY_METHOD_NAME, null,\n                             node.getLineno(), node.getCharno());",
      "info" : "ReturnStatement[7826-7939]:ReturnStatement[7876-7989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7953-7983]:Block[8003-8033]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[7963-7975]:ReturnStatement[8013-8025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8381-8661]:Block[8431-8711]"
    }, {
      "left" : "Node body = functionNode.getLastChild();",
      "right" : "Node body = functionNode.getLastChild();",
      "info" : "VariableDeclarationStatement[8389-8429]:VariableDeclarationStatement[8439-8479]"
    }, {
      "left" : "if (!body.hasOneChild())",
      "right" : "if (!body.hasOneChild())",
      "info" : "IfStatement[8436-8491]:IfStatement[8486-8541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8461-8491]:Block[8511-8541]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8471-8483]:ReturnStatement[8521-8533]"
    }, {
      "left" : "Node statement = body.getFirstChild();",
      "right" : "Node statement = body.getFirstChild();",
      "info" : "VariableDeclarationStatement[8499-8537]:VariableDeclarationStatement[8549-8587]"
    }, {
      "left" : "if (statement.getType() == Token.RETURN)",
      "right" : "if (statement.getType() == Token.RETURN)",
      "info" : "IfStatement[8544-8636]:IfStatement[8594-8686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8585-8636]:Block[8635-8686]"
    }, {
      "left" : "return statement.getFirstChild();",
      "right" : "return statement.getFirstChild();",
      "info" : "ReturnStatement[8595-8628]:ReturnStatement[8645-8678]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8643-8655]:ReturnStatement[8693-8705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9323-9358]:Block[9373-9408]"
    }, {
      "left" : "return HELPER_SOURCE;",
      "right" : "return HELPER_SOURCE;",
      "info" : "ReturnStatement[9331-9352]:ReturnStatement[9381-9402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9408-9700]:Block[9458-9750]"
    }, {
      "left" : "if (!isReduceableFunctionExpression(node))",
      "right" : "if (!isReduceableFunctionExpression(node))",
      "info" : "IfStatement[9416-9489]:IfStatement[9466-9539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9459-9489]:Block[9509-9539]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[9469-9481]:ReturnStatement[9519-9531]"
    }, {
      "left" : "if (isIdentityFunction(node))",
      "right" : "if (isIdentityFunction(node))",
      "info" : "IfStatement[9497-9694]:IfStatement[9547-9744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9527-9658]:Block[9577-9708]"
    }, {
      "left" : "return buildCallNode(FACTORY_METHOD_NAME, null,\n                             node.getLineno(), node.getCharno());",
      "right" : "return buildCallNode(FACTORY_METHOD_NAME, null,\n                             node.getLineno(), node.getCharno());",
      "info" : "ReturnStatement[9537-9650]:ReturnStatement[9587-9700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9664-9694]:Block[9714-9744]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[9674-9686]:ReturnStatement[9724-9736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9943-10355]:Block[9993-10405]"
    }, {
      "left" : "Node argList = functionNode.getFirstChild().getNext();",
      "right" : "Node argList = functionNode.getFirstChild().getNext();",
      "info" : "VariableDeclarationStatement[9951-10005]:VariableDeclarationStatement[10001-10055]"
    }, {
      "left" : "Node paramNode = argList.getFirstChild();",
      "right" : "Node paramNode = argList.getFirstChild();",
      "info" : "VariableDeclarationStatement[10012-10053]:VariableDeclarationStatement[10062-10103]"
    }, {
      "left" : "if (paramNode == null)",
      "right" : "if (paramNode == null)",
      "info" : "IfStatement[10060-10114]:IfStatement[10110-10164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10083-10114]:Block[10133-10164]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10093-10106]:ReturnStatement[10143-10156]"
    }, {
      "left" : "Node value = maybeGetSingleReturnRValue(functionNode);",
      "right" : "Node value = maybeGetSingleReturnRValue(functionNode);",
      "info" : "VariableDeclarationStatement[10122-10176]:VariableDeclarationStatement[10172-10226]"
    }, {
      "left" : "if (value != null &&\n          NodeUtil.isName(value) &&\n          value.getString().equals(paramNode.getString()))",
      "right" : "if (value != null &&\n          NodeUtil.isName(value) &&\n          value.getString().equals(paramNode.getString()))",
      "info" : "IfStatement[10183-10329]:IfStatement[10233-10379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10299-10329]:Block[10349-10379]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[10309-10321]:ReturnStatement[10359-10371]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10336-10349]:ReturnStatement[10386-10399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11052-11087]:Block[11102-11137]"
    }, {
      "left" : "return HELPER_SOURCE;",
      "right" : "return HELPER_SOURCE;",
      "info" : "ReturnStatement[11060-11081]:ReturnStatement[11110-11131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11137-11470]:Block[11187-11520]"
    }, {
      "left" : "if (!isReduceableFunctionExpression(node))",
      "right" : "if (!isReduceableFunctionExpression(node))",
      "info" : "IfStatement[11145-11218]:IfStatement[11195-11268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11188-11218]:Block[11238-11268]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[11198-11210]:ReturnStatement[11248-11260]"
    }, {
      "left" : "Node valueNode = getValueNode(node);",
      "right" : "Node valueNode = getValueNode(node);",
      "info" : "VariableDeclarationStatement[11226-11262]:VariableDeclarationStatement[11276-11312]"
    }, {
      "left" : "if (valueNode != null)",
      "right" : "if (valueNode != null)",
      "info" : "IfStatement[11269-11464]:IfStatement[11319-11514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11292-11428]:Block[11342-11478]"
    }, {
      "left" : "return buildCallNode(FACTORY_METHOD_NAME, valueNode,\n                             node.getLineno(), node.getCharno());",
      "right" : "return buildCallNode(FACTORY_METHOD_NAME, valueNode,\n                             node.getLineno(), node.getCharno());",
      "info" : "ReturnStatement[11302-11420]:ReturnStatement[11352-11470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11434-11464]:Block[11484-11514]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[11444-11456]:ReturnStatement[11494-11506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11756-11946]:Block[11806-11996]"
    }, {
      "left" : "Node value = maybeGetSingleReturnRValue(functionNode);",
      "right" : "Node value = maybeGetSingleReturnRValue(functionNode);",
      "info" : "VariableDeclarationStatement[11764-11818]:VariableDeclarationStatement[11814-11868]"
    }, {
      "left" : "if (value != null &&\n          NodeUtil.isImmutableValue(value))",
      "right" : "if (value != null &&\n          NodeUtil.isImmutableValue(value))",
      "info" : "IfStatement[11825-11921]:IfStatement[11875-11971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11890-11921]:Block[11940-11971]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[11900-11913]:ReturnStatement[11950-11963]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11928-11940]:ReturnStatement[11978-11990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12601-12636]:Block[12651-12686]"
    }, {
      "left" : "return HELPER_SOURCE;",
      "right" : "return HELPER_SOURCE;",
      "info" : "ReturnStatement[12609-12630]:ReturnStatement[12659-12680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12686-13199]:Block[12736-13249]"
    }, {
      "left" : "if (!isReduceableFunctionExpression(node))",
      "right" : "if (!isReduceableFunctionExpression(node))",
      "info" : "IfStatement[12694-12767]:IfStatement[12744-12817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12737-12767]:Block[12787-12817]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[12747-12759]:ReturnStatement[12797-12809]"
    }, {
      "left" : "Node propName = getGetPropertyName(node);",
      "right" : "Node propName = getGetPropertyName(node);",
      "info" : "VariableDeclarationStatement[12775-12816]:VariableDeclarationStatement[12825-12866]"
    }, {
      "left" : "if (propName != null)",
      "right" : "if (propName != null)",
      "info" : "IfStatement[12823-13193]:IfStatement[12873-13243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12845-13157]:Block[12895-13207]"
    }, {
      "left" : "if (propName.getType() != Token.STRING)",
      "right" : "if (propName.getType() != Token.STRING)",
      "info" : "IfStatement[12855-13022]:IfStatement[12905-13072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12895-13022]:Block[12945-13072]"
    }, {
      "left" : "throw new IllegalStateException(\n              \"Expected STRING, got \" + Token.name(propName.getType()));",
      "right" : "throw new IllegalStateException(\n              \"Expected STRING, got \" + Token.name(propName.getType()));",
      "info" : "ThrowStatement[12907-13012]:ThrowStatement[12957-13062]"
    }, {
      "left" : "return buildCallNode(FACTORY_METHOD_NAME, propName,\n                             node.getLineno(), node.getCharno());",
      "right" : "return buildCallNode(FACTORY_METHOD_NAME, propName,\n                             node.getLineno(), node.getCharno());",
      "info" : "ReturnStatement[13032-13149]:ReturnStatement[13082-13199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13163-13193]:Block[13213-13243]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[13173-13185]:ReturnStatement[13223-13235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13500-13750]:Block[13550-13800]"
    }, {
      "left" : "Node value = maybeGetSingleReturnRValue(functionNode);",
      "right" : "Node value = maybeGetSingleReturnRValue(functionNode);",
      "info" : "VariableDeclarationStatement[13508-13562]:VariableDeclarationStatement[13558-13612]"
    }, {
      "left" : "if (value != null &&\n          NodeUtil.isGetProp(value) &&\n          NodeUtil.isThis(value.getFirstChild()))",
      "right" : "if (value != null &&\n          NodeUtil.isGetProp(value) &&\n          NodeUtil.isThis(value.getFirstChild()))",
      "info" : "IfStatement[13569-13725]:IfStatement[13619-13775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13679-13725]:Block[13729-13775]"
    }, {
      "left" : "return value.getLastChild();",
      "right" : "return value.getLastChild();",
      "info" : "ReturnStatement[13689-13717]:ReturnStatement[13739-13767]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[13732-13744]:ReturnStatement[13782-13794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14476-14511]:Block[14526-14561]"
    }, {
      "left" : "return HELPER_SOURCE;",
      "right" : "return HELPER_SOURCE;",
      "info" : "ReturnStatement[14484-14505]:ReturnStatement[14534-14555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14561-15074]:Block[14611-15124]"
    }, {
      "left" : "if (!isReduceableFunctionExpression(node))",
      "right" : "if (!isReduceableFunctionExpression(node))",
      "info" : "IfStatement[14569-14642]:IfStatement[14619-14692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14612-14642]:Block[14662-14692]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[14622-14634]:ReturnStatement[14672-14684]"
    }, {
      "left" : "Node propName = getSetPropertyName(node);",
      "right" : "Node propName = getSetPropertyName(node);",
      "info" : "VariableDeclarationStatement[14650-14691]:VariableDeclarationStatement[14700-14741]"
    }, {
      "left" : "if (propName != null)",
      "right" : "if (propName != null)",
      "info" : "IfStatement[14698-15068]:IfStatement[14748-15118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14720-15032]:Block[14770-15082]"
    }, {
      "left" : "if (propName.getType() != Token.STRING)",
      "right" : "if (propName.getType() != Token.STRING)",
      "info" : "IfStatement[14730-14897]:IfStatement[14780-14947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14770-14897]:Block[14820-14947]"
    }, {
      "left" : "throw new IllegalStateException(\n              \"Expected STRING, got \" + Token.name(propName.getType()));",
      "right" : "throw new IllegalStateException(\n              \"Expected STRING, got \" + Token.name(propName.getType()));",
      "info" : "ThrowStatement[14782-14887]:ThrowStatement[14832-14937]"
    }, {
      "left" : "return buildCallNode(FACTORY_METHOD_NAME, propName,\n                             node.getLineno(), node.getCharno());",
      "right" : "return buildCallNode(FACTORY_METHOD_NAME, propName,\n                             node.getLineno(), node.getCharno());",
      "info" : "ReturnStatement[14907-15024]:ReturnStatement[14957-15074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15038-15068]:Block[15088-15118]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[15048-15060]:ReturnStatement[15098-15110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15387-16218]:Block[15437-16268]"
    }, {
      "left" : "Node body = functionNode.getLastChild();",
      "right" : "Node body = functionNode.getLastChild();",
      "info" : "VariableDeclarationStatement[15395-15435]:VariableDeclarationStatement[15445-15485]"
    }, {
      "left" : "if (!body.hasOneChild())",
      "right" : "if (!body.hasOneChild())",
      "info" : "IfStatement[15442-15497]:IfStatement[15492-15547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15467-15497]:Block[15517-15547]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[15477-15489]:ReturnStatement[15527-15539]"
    }, {
      "left" : "Node argList = functionNode.getFirstChild().getNext();",
      "right" : "Node argList = functionNode.getFirstChild().getNext();",
      "info" : "VariableDeclarationStatement[15505-15559]:VariableDeclarationStatement[15555-15609]"
    }, {
      "left" : "Node paramNode = argList.getFirstChild();",
      "right" : "Node paramNode = argList.getFirstChild();",
      "info" : "VariableDeclarationStatement[15566-15607]:VariableDeclarationStatement[15616-15657]"
    }, {
      "left" : "if (paramNode == null)",
      "right" : "if (paramNode == null)",
      "info" : "IfStatement[15614-15667]:IfStatement[15664-15717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15637-15667]:Block[15687-15717]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[15647-15659]:ReturnStatement[15697-15709]"
    }, {
      "left" : "Node statement = body.getFirstChild();",
      "right" : "Node statement = body.getFirstChild();",
      "info" : "VariableDeclarationStatement[15675-15713]:VariableDeclarationStatement[15725-15763]"
    }, {
      "left" : "if (!NodeUtil.isExprAssign(statement))",
      "right" : "if (!NodeUtil.isExprAssign(statement))",
      "info" : "IfStatement[15720-15789]:IfStatement[15770-15839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15759-15789]:Block[15809-15839]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[15769-15781]:ReturnStatement[15819-15831]"
    }, {
      "left" : "Node assign = statement.getFirstChild();",
      "right" : "Node assign = statement.getFirstChild();",
      "info" : "VariableDeclarationStatement[15797-15837]:VariableDeclarationStatement[15847-15887]"
    }, {
      "left" : "Node lhs = assign.getFirstChild();",
      "right" : "Node lhs = assign.getFirstChild();",
      "info" : "VariableDeclarationStatement[15844-15878]:VariableDeclarationStatement[15894-15928]"
    }, {
      "left" : "if (NodeUtil.isGetProp(lhs) && NodeUtil.isThis(lhs.getFirstChild()))",
      "right" : "if (NodeUtil.isGetProp(lhs) && NodeUtil.isThis(lhs.getFirstChild()))",
      "info" : "IfStatement[15885-16193]:IfStatement[15935-16243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15954-16193]:Block[16004-16243]"
    }, {
      "left" : "Node rhs = assign.getLastChild();",
      "right" : "Node rhs = assign.getLastChild();",
      "info" : "VariableDeclarationStatement[15964-15997]:VariableDeclarationStatement[16014-16047]"
    }, {
      "left" : "if (NodeUtil.isName(rhs) &&\n            rhs.getString().equals(paramNode.getString()))",
      "right" : "if (NodeUtil.isName(rhs) &&\n            rhs.getString().equals(paramNode.getString()))",
      "info" : "IfStatement[16006-16185]:IfStatement[16056-16235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16093-16185]:Block[16143-16235]"
    }, {
      "left" : "Node propertyName = lhs.getLastChild();",
      "right" : "Node propertyName = lhs.getLastChild();",
      "info" : "VariableDeclarationStatement[16105-16144]:VariableDeclarationStatement[16155-16194]"
    }, {
      "left" : "return propertyName;",
      "right" : "return propertyName;",
      "info" : "ReturnStatement[16155-16175]:ReturnStatement[16205-16225]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[16200-16212]:ReturnStatement[16250-16262]"
    } ]
  },
  "interFileMappings" : { }
}