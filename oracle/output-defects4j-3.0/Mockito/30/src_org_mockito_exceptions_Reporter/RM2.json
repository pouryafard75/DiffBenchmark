{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Reporter",
      "right" : "Reporter",
      "info" : "TypeDeclaration[1709-24599]:TypeDeclaration[1709-24632]"
    }, {
      "left" : "public void checkedExceptionInvalid(Throwable t)",
      "right" : "public void checkedExceptionInvalid(Throwable t)",
      "info" : "MethodDeclaration[2177-2391]:MethodDeclaration[2177-2391]"
    }, {
      "left" : "public void cannotStubWithNullThrowable()",
      "right" : "public void cannotStubWithNullThrowable()",
      "info" : "MethodDeclaration[2397-2559]:MethodDeclaration[2397-2559]"
    }, {
      "left" : "public void unfinishedStubbing(Location location)",
      "right" : "public void unfinishedStubbing(Location location)",
      "info" : "MethodDeclaration[2565-3255]:MethodDeclaration[2565-3255]"
    }, {
      "left" : "public void missingMethodInvocation()",
      "right" : "public void missingMethodInvocation()",
      "info" : "MethodDeclaration[3261-3888]:MethodDeclaration[3261-3888]"
    }, {
      "left" : "public void unfinishedVerificationException(Location location)",
      "right" : "public void unfinishedVerificationException(Location location)",
      "info" : "MethodDeclaration[3894-4531]:MethodDeclaration[3894-4531]"
    }, {
      "left" : "public void notAMockPassedToVerify(Class type)",
      "right" : "public void notAMockPassedToVerify(Class type)",
      "info" : "MethodDeclaration[4537-5054]:MethodDeclaration[4537-5054]"
    }, {
      "left" : "public void nullPassedToVerify()",
      "right" : "public void nullPassedToVerify()",
      "info" : "MethodDeclaration[5060-5545]:MethodDeclaration[5060-5545]"
    }, {
      "left" : "public void notAMockPassedToWhenMethod()",
      "right" : "public void notAMockPassedToWhenMethod()",
      "info" : "MethodDeclaration[5551-5840]:MethodDeclaration[5551-5840]"
    }, {
      "left" : "public void nullPassedToWhenMethod()",
      "right" : "public void nullPassedToWhenMethod()",
      "info" : "MethodDeclaration[5846-6210]:MethodDeclaration[5846-6210]"
    }, {
      "left" : "public void mocksHaveToBePassedToVerifyNoMoreInteractions()",
      "right" : "public void mocksHaveToBePassedToVerifyNoMoreInteractions()",
      "info" : "MethodDeclaration[6216-6583]:MethodDeclaration[6216-6583]"
    }, {
      "left" : "public void notAMockPassedToVerifyNoMoreInteractions()",
      "right" : "public void notAMockPassedToVerifyNoMoreInteractions()",
      "info" : "MethodDeclaration[6589-6927]:MethodDeclaration[6589-6927]"
    }, {
      "left" : "public void nullPassedToVerifyNoMoreInteractions()",
      "right" : "public void nullPassedToVerifyNoMoreInteractions()",
      "info" : "MethodDeclaration[6933-7286]:MethodDeclaration[6933-7286]"
    }, {
      "left" : "public void notAMockPassedWhenCreatingInOrder()",
      "right" : "public void notAMockPassedWhenCreatingInOrder()",
      "info" : "MethodDeclaration[7292-7627]:MethodDeclaration[7292-7627]"
    }, {
      "left" : "public void nullPassedWhenCreatingInOrder()",
      "right" : "public void nullPassedWhenCreatingInOrder()",
      "info" : "MethodDeclaration[7633-7967]:MethodDeclaration[7633-7967]"
    }, {
      "left" : "public void mocksHaveToBePassedWhenCreatingInOrder()",
      "right" : "public void mocksHaveToBePassedWhenCreatingInOrder()",
      "info" : "MethodDeclaration[7973-8307]:MethodDeclaration[7973-8307]"
    }, {
      "left" : "public void inOrderRequiresFamiliarMock()",
      "right" : "public void inOrderRequiresFamiliarMock()",
      "info" : "MethodDeclaration[8313-8668]:MethodDeclaration[8313-8668]"
    }, {
      "left" : "public void invalidUseOfMatchers(int expectedMatchersCount, int recordedMatchersCount)",
      "right" : "public void invalidUseOfMatchers(int expectedMatchersCount, int recordedMatchersCount)",
      "info" : "MethodDeclaration[8674-9488]:MethodDeclaration[8674-9488]"
    }, {
      "left" : "public void argumentsAreDifferent(String wanted, String actual, Location actualLocation)",
      "right" : "public void argumentsAreDifferent(String wanted, String actual, Location actualLocation)",
      "info" : "MethodDeclaration[9494-10079]:MethodDeclaration[9494-10079]"
    }, {
      "left" : "public void wantedButNotInvoked(PrintableInvocation wanted)",
      "right" : "public void wantedButNotInvoked(PrintableInvocation wanted)",
      "info" : "MethodDeclaration[10085-10233]:MethodDeclaration[10085-10233]"
    }, {
      "left" : "public void wantedButNotInvoked(PrintableInvocation wanted, List<? extends PrintableInvocation> invocations)",
      "right" : "public void wantedButNotInvoked(PrintableInvocation wanted, List<? extends PrintableInvocation> invocations)",
      "info" : "MethodDeclaration[10239-10977]:MethodDeclaration[10239-10977]"
    }, {
      "left" : "private String createWantedButNotInvokedMessage(PrintableInvocation wanted)",
      "right" : "private String createWantedButNotInvokedMessage(PrintableInvocation wanted)",
      "info" : "MethodDeclaration[10983-11227]:MethodDeclaration[10983-11227]"
    }, {
      "left" : "public void wantedButNotInvokedInOrder(PrintableInvocation wanted, PrintableInvocation previous)",
      "right" : "public void wantedButNotInvokedInOrder(PrintableInvocation wanted, PrintableInvocation previous)",
      "info" : "MethodDeclaration[11233-11751]:MethodDeclaration[11233-11751]"
    }, {
      "left" : "public void tooManyActualInvocations(int wantedCount, int actualCount, PrintableInvocation wanted, Location firstUndesired)",
      "right" : "public void tooManyActualInvocations(int wantedCount, int actualCount, PrintableInvocation wanted, Location firstUndesired)",
      "info" : "MethodDeclaration[11757-12049]:MethodDeclaration[11757-12049]"
    }, {
      "left" : "private String createTooManyInvocationsMessage(int wantedCount, int actualCount, PrintableInvocation wanted,\n            Location firstUndesired)",
      "right" : "private String createTooManyInvocationsMessage(int wantedCount, int actualCount, PrintableInvocation wanted,\n            Location firstUndesired)",
      "info" : "MethodDeclaration[12055-12508]:MethodDeclaration[12055-12508]"
    }, {
      "left" : "public void neverWantedButInvoked(PrintableInvocation wanted, Location firstUndesired)",
      "right" : "public void neverWantedButInvoked(PrintableInvocation wanted, Location firstUndesired)",
      "info" : "MethodDeclaration[12514-12859]:MethodDeclaration[12514-12859]"
    }, {
      "left" : "public void tooManyActualInvocationsInOrder(int wantedCount, int actualCount, PrintableInvocation wanted, Location firstUndesired)",
      "right" : "public void tooManyActualInvocationsInOrder(int wantedCount, int actualCount, PrintableInvocation wanted, Location firstUndesired)",
      "info" : "MethodDeclaration[12865-13241]:MethodDeclaration[12865-13241]"
    }, {
      "left" : "private String createTooLittleInvocationsMessage(Discrepancy discrepancy, PrintableInvocation wanted,\n            Location lastActualInvocation)",
      "right" : "private String createTooLittleInvocationsMessage(Discrepancy discrepancy, PrintableInvocation wanted,\n            Location lastActualInvocation)",
      "info" : "MethodDeclaration[13247-13841]:MethodDeclaration[13247-13841]"
    }, {
      "left" : "public void tooLittleActualInvocations(Discrepancy discrepancy, PrintableInvocation wanted, Location lastActualLocation)",
      "right" : "public void tooLittleActualInvocations(Discrepancy discrepancy, PrintableInvocation wanted, Location lastActualLocation)",
      "info" : "MethodDeclaration[13847-14132]:MethodDeclaration[13847-14132]"
    }, {
      "left" : "public void tooLittleActualInvocationsInOrder(Discrepancy discrepancy, PrintableInvocation wanted, Location lastActualLocation)",
      "right" : "public void tooLittleActualInvocationsInOrder(Discrepancy discrepancy, PrintableInvocation wanted, Location lastActualLocation)",
      "info" : "MethodDeclaration[14138-14505]:MethodDeclaration[14138-14505]"
    }, {
      "left" : "public void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwareInvocation> invocations)",
      "right" : "public void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwareInvocation> invocations)",
      "info" : "MethodDeclaration[14511-15022]:MethodDeclaration[14511-15022]"
    }, {
      "left" : "public void noMoreInteractionsWantedInOrder(Invocation undesired)",
      "right" : "public void noMoreInteractionsWantedInOrder(Invocation undesired)",
      "info" : "MethodDeclaration[15028-15359]:MethodDeclaration[15028-15359]"
    }, {
      "left" : "public void cannotMockFinalClass(Class<?> clazz)",
      "right" : "public void cannotMockFinalClass(Class<?> clazz)",
      "info" : "MethodDeclaration[15365-15699]:MethodDeclaration[15365-15699]"
    }, {
      "left" : "public void cannotStubVoidMethodWithAReturnValue(String methodName)",
      "right" : "public void cannotStubVoidMethodWithAReturnValue(String methodName)",
      "info" : "MethodDeclaration[15705-16325]:MethodDeclaration[15705-16325]"
    }, {
      "left" : "public void onlyVoidMethodsCanBeSetToDoNothing()",
      "right" : "public void onlyVoidMethodsCanBeSetToDoNothing()",
      "info" : "MethodDeclaration[16331-16841]:MethodDeclaration[16331-16841]"
    }, {
      "left" : "public void wrongTypeOfReturnValue(String expectedType, String actualType, String methodName)",
      "right" : "public void wrongTypeOfReturnValue(String expectedType, String actualType, String methodName)",
      "info" : "MethodDeclaration[16847-17373]:MethodDeclaration[16847-17373]"
    }, {
      "left" : "public void wantedAtMostX(int maxNumberOfInvocations, int foundSize)",
      "right" : "public void wantedAtMostX(int maxNumberOfInvocations, int foundSize)",
      "info" : "MethodDeclaration[17379-17583]:MethodDeclaration[17379-17583]"
    }, {
      "left" : "public void misplacedArgumentMatcher(Location location)",
      "right" : "public void misplacedArgumentMatcher(Location location)",
      "info" : "MethodDeclaration[17589-18477]:MethodDeclaration[17589-18477]"
    }, {
      "left" : "public void smartNullPointerException(Location location)",
      "right" : "public void smartNullPointerException(Object obj, Location location)",
      "info" : "MethodDeclaration[18483-18819]:MethodDeclaration[18483-18852]"
    }, {
      "left" : "public void noArgumentValueWasCaptured()",
      "right" : "public void noArgumentValueWasCaptured()",
      "info" : "MethodDeclaration[18825-19589]:MethodDeclaration[18858-19622]"
    }, {
      "left" : "public void extraInterfacesDoesNotAcceptNullParameters()",
      "right" : "public void extraInterfacesDoesNotAcceptNullParameters()",
      "info" : "MethodDeclaration[19595-19789]:MethodDeclaration[19628-19822]"
    }, {
      "left" : "public void extraInterfacesAcceptsOnlyInterfaces(Class<?> wrongType)",
      "right" : "public void extraInterfacesAcceptsOnlyInterfaces(Class<?> wrongType)",
      "info" : "MethodDeclaration[19795-20092]:MethodDeclaration[19828-20125]"
    }, {
      "left" : "public void extraInterfacesCannotContainMockedType(Class<?> wrongType)",
      "right" : "public void extraInterfacesCannotContainMockedType(Class<?> wrongType)",
      "info" : "MethodDeclaration[20098-20473]:MethodDeclaration[20131-20506]"
    }, {
      "left" : "public void extraInterfacesRequiresAtLeastOneInterface()",
      "right" : "public void extraInterfacesRequiresAtLeastOneInterface()",
      "info" : "MethodDeclaration[20479-20665]:MethodDeclaration[20512-20698]"
    }, {
      "left" : "public void mockedTypeIsInconsistentWithSpiedInstanceType(Class<?> mockedType, Object spiedInstance)",
      "right" : "public void mockedTypeIsInconsistentWithSpiedInstanceType(Class<?> mockedType, Object spiedInstance)",
      "info" : "MethodDeclaration[20671-21347]:MethodDeclaration[20704-21380]"
    }, {
      "left" : "public void cannotCallRealMethodOnInterface()",
      "right" : "public void cannotCallRealMethodOnInterface()",
      "info" : "MethodDeclaration[21353-21771]:MethodDeclaration[21386-21804]"
    }, {
      "left" : "public void cannotVerifyToString()",
      "right" : "public void cannotVerifyToString()",
      "info" : "MethodDeclaration[21777-22451]:MethodDeclaration[21810-22484]"
    }, {
      "left" : "public void moreThanOneAnnotationNotAllowed(String fieldName)",
      "right" : "public void moreThanOneAnnotationNotAllowed(String fieldName)",
      "info" : "MethodDeclaration[22457-22820]:MethodDeclaration[22490-22853]"
    }, {
      "left" : "public void unsupportedCombinationOfAnnotations(String undesiredAnnotationOne, String undesiredAnnotationTwo)",
      "right" : "public void unsupportedCombinationOfAnnotations(String undesiredAnnotationOne, String undesiredAnnotationTwo)",
      "info" : "MethodDeclaration[22826-23135]:MethodDeclaration[22859-23168]"
    }, {
      "left" : "public void cannotInitializeForSpyAnnotation(String fieldName, Exception details)",
      "right" : "public void cannotInitializeForSpyAnnotation(String fieldName, Exception details)",
      "info" : "MethodDeclaration[23141-23801]:MethodDeclaration[23174-23834]"
    }, {
      "left" : "public void cannotInitializeForInjectMocksAnnotation(String fieldName, Exception details)",
      "right" : "public void cannotInitializeForInjectMocksAnnotation(String fieldName, Exception details)",
      "info" : "MethodDeclaration[23807-24597]:MethodDeclaration[23840-24630]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2148-2154]:Modifier[2148-2154]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2155-2160]:TYPE_DECLARATION_KIND[2155-2160]"
    }, {
      "left" : "Reporter",
      "right" : "Reporter",
      "info" : "SimpleName[2161-2169]:SimpleName[2161-2169]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2177-2183]:Modifier[2177-2183]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2184-2188]:PrimitiveType[2184-2188]"
    }, {
      "left" : "checkedExceptionInvalid",
      "right" : "checkedExceptionInvalid",
      "info" : "SimpleName[2189-2212]:SimpleName[2189-2212]"
    }, {
      "left" : "Throwable t",
      "right" : "Throwable t",
      "info" : "SingleVariableDeclaration[2213-2224]:SingleVariableDeclaration[2213-2224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2226-2391]:Block[2226-2391]"
    }, {
      "left" : "throw new MockitoException(join(\n                \"Checked exception is invalid for this method!\",\n                \"Invalid: \" + t\n                ));",
      "right" : "throw new MockitoException(join(\n                \"Checked exception is invalid for this method!\",\n                \"Invalid: \" + t\n                ));",
      "info" : "ThrowStatement[2236-2385]:ThrowStatement[2236-2385]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2397-2403]:Modifier[2397-2403]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2404-2408]:PrimitiveType[2404-2408]"
    }, {
      "left" : "cannotStubWithNullThrowable",
      "right" : "cannotStubWithNullThrowable",
      "info" : "SimpleName[2409-2436]:SimpleName[2409-2436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2439-2559]:Block[2439-2559]"
    }, {
      "left" : "throw new MockitoException(join(\n                \"Cannot stub with null throwable!\"\n                ));",
      "right" : "throw new MockitoException(join(\n                \"Cannot stub with null throwable!\"\n                ));",
      "info" : "ThrowStatement[2449-2552]:ThrowStatement[2449-2552]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2565-2571]:Modifier[2565-2571]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2572-2576]:PrimitiveType[2572-2576]"
    }, {
      "left" : "unfinishedStubbing",
      "right" : "unfinishedStubbing",
      "info" : "SimpleName[2577-2595]:SimpleName[2577-2595]"
    }, {
      "left" : "Location location",
      "right" : "Location location",
      "info" : "SingleVariableDeclaration[2596-2613]:SingleVariableDeclaration[2596-2613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2615-3255]:Block[2615-3255]"
    }, {
      "left" : "throw new UnfinishedStubbingException(join(\n                \"Unfinished stubbing detected here:\",\n                location,\n                \"\",\n                \"E.g. thenReturn() may be missing.\",\n                \"Examples of correct stubbing:\",\n                \"    when(mock.isOk()).thenReturn(true);\",\n                \"    when(mock.isOk()).thenThrow(exception);\",\n                \"    doThrow(exception).when(mock).someVoidMethod();\",\n                \"Hints:\",\n                \" 1. missing thenReturn()\",\n                \" 2. you are trying to stub a final method, you naughty developer!\",\n                \"\"\n        ));",
      "right" : "throw new UnfinishedStubbingException(join(\n                \"Unfinished stubbing detected here:\",\n                location,\n                \"\",\n                \"E.g. thenReturn() may be missing.\",\n                \"Examples of correct stubbing:\",\n                \"    when(mock.isOk()).thenReturn(true);\",\n                \"    when(mock.isOk()).thenThrow(exception);\",\n                \"    doThrow(exception).when(mock).someVoidMethod();\",\n                \"Hints:\",\n                \" 1. missing thenReturn()\",\n                \" 2. you are trying to stub a final method, you naughty developer!\",\n                \"\"\n        ));",
      "info" : "ThrowStatement[2625-3249]:ThrowStatement[2625-3249]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3261-3267]:Modifier[3261-3267]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3268-3272]:PrimitiveType[3268-3272]"
    }, {
      "left" : "missingMethodInvocation",
      "right" : "missingMethodInvocation",
      "info" : "SimpleName[3273-3296]:SimpleName[3273-3296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3299-3888]:Block[3299-3888]"
    }, {
      "left" : "throw new MissingMethodInvocationException(join(\n                \"when() requires an argument which has to be 'a method call on a mock'.\",\n                \"For example:\",\n                \"    when(mock.getArticles()).thenReturn(articles);\",\n                \"\",\n                \"Also, this error might show up because:\",\n                \"1. you stub either of: final/private/equals()/hashCode() methods.\",\n                \"   Those methods *cannot* be stubbed/verified.\",\n                \"2. inside when() you don't call method on mock but on some other object.\"\n        ));",
      "right" : "throw new MissingMethodInvocationException(join(\n                \"when() requires an argument which has to be 'a method call on a mock'.\",\n                \"For example:\",\n                \"    when(mock.getArticles()).thenReturn(articles);\",\n                \"\",\n                \"Also, this error might show up because:\",\n                \"1. you stub either of: final/private/equals()/hashCode() methods.\",\n                \"   Those methods *cannot* be stubbed/verified.\",\n                \"2. inside when() you don't call method on mock but on some other object.\"\n        ));",
      "info" : "ThrowStatement[3309-3882]:ThrowStatement[3309-3882]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3894-3900]:Modifier[3894-3900]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3901-3905]:PrimitiveType[3901-3905]"
    }, {
      "left" : "unfinishedVerificationException",
      "right" : "unfinishedVerificationException",
      "info" : "SimpleName[3906-3937]:SimpleName[3906-3937]"
    }, {
      "left" : "Location location",
      "right" : "Location location",
      "info" : "SingleVariableDeclaration[3938-3955]:SingleVariableDeclaration[3938-3955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3957-4531]:Block[3957-4531]"
    }, {
      "left" : "UnfinishedVerificationException exception = new UnfinishedVerificationException(join(\n                \"Missing method call for verify(mock) here:\",\n                location,\n                \"\",\n                \"Example of correct verification:\",\n                \"    verify(mock).doSomething()\",\n                \"\",\n                \"Also, this error might show up because you verify either of: final/private/equals()/hashCode() methods.\",\n                \"Those methods *cannot* be stubbed/verified.\",\n                \"\"\n        ));",
      "right" : "UnfinishedVerificationException exception = new UnfinishedVerificationException(join(\n                \"Missing method call for verify(mock) here:\",\n                location,\n                \"\",\n                \"Example of correct verification:\",\n                \"    verify(mock).doSomething()\",\n                \"\",\n                \"Also, this error might show up because you verify either of: final/private/equals()/hashCode() methods.\",\n                \"Those methods *cannot* be stubbed/verified.\",\n                \"\"\n        ));",
      "info" : "VariableDeclarationStatement[3967-4499]:VariableDeclarationStatement[3967-4499]"
    }, {
      "left" : "throw exception;",
      "right" : "throw exception;",
      "info" : "ThrowStatement[4509-4525]:ThrowStatement[4509-4525]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4537-4543]:Modifier[4537-4543]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4544-4548]:PrimitiveType[4544-4548]"
    }, {
      "left" : "notAMockPassedToVerify",
      "right" : "notAMockPassedToVerify",
      "info" : "SimpleName[4549-4571]:SimpleName[4549-4571]"
    }, {
      "left" : "Class type",
      "right" : "Class type",
      "info" : "SingleVariableDeclaration[4572-4582]:SingleVariableDeclaration[4572-4582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4584-5054]:Block[4584-5054]"
    }, {
      "left" : "throw new NotAMockException(join(\n                \"Argument passed to verify() is of type \" + type.getSimpleName() + \" and is not a mock!\",\n                \"Make sure you place the parenthesis correctly!\",\n                \"See the examples of correct verifications:\",\n                \"    verify(mock).someMethod();\",\n                \"    verify(mock, times(10)).someMethod();\",\n                \"    verify(mock, atLeastOnce()).someMethod();\"\n        ));",
      "right" : "throw new NotAMockException(join(\n                \"Argument passed to verify() is of type \" + type.getSimpleName() + \" and is not a mock!\",\n                \"Make sure you place the parenthesis correctly!\",\n                \"See the examples of correct verifications:\",\n                \"    verify(mock).someMethod();\",\n                \"    verify(mock, times(10)).someMethod();\",\n                \"    verify(mock, atLeastOnce()).someMethod();\"\n        ));",
      "info" : "ThrowStatement[4594-5048]:ThrowStatement[4594-5048]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5060-5066]:Modifier[5060-5066]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5067-5071]:PrimitiveType[5067-5071]"
    }, {
      "left" : "nullPassedToVerify",
      "right" : "nullPassedToVerify",
      "info" : "SimpleName[5072-5090]:SimpleName[5072-5090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5093-5545]:Block[5093-5545]"
    }, {
      "left" : "throw new NullInsteadOfMockException(join(\n                \"Argument passed to verify() should be a mock but is null!\",\n                \"Examples of correct verifications:\",\n                \"    verify(mock).someMethod();\",\n                \"    verify(mock, times(10)).someMethod();\",\n                \"    verify(mock, atLeastOnce()).someMethod();\",\n                \"Also, if you use @Mock annotation don't miss initMocks()\"\n        ));",
      "right" : "throw new NullInsteadOfMockException(join(\n                \"Argument passed to verify() should be a mock but is null!\",\n                \"Examples of correct verifications:\",\n                \"    verify(mock).someMethod();\",\n                \"    verify(mock, times(10)).someMethod();\",\n                \"    verify(mock, atLeastOnce()).someMethod();\",\n                \"Also, if you use @Mock annotation don't miss initMocks()\"\n        ));",
      "info" : "ThrowStatement[5103-5539]:ThrowStatement[5103-5539]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5551-5557]:Modifier[5551-5557]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5558-5562]:PrimitiveType[5558-5562]"
    }, {
      "left" : "notAMockPassedToWhenMethod",
      "right" : "notAMockPassedToWhenMethod",
      "info" : "SimpleName[5563-5589]:SimpleName[5563-5589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5592-5840]:Block[5592-5840]"
    }, {
      "left" : "throw new NotAMockException(join(\n                \"Argument passed to when() is not a mock!\",\n                \"Example of correct stubbing:\",\n                \"    doThrow(new RuntimeException()).when(mock).someMethod();\"\n        ));",
      "right" : "throw new NotAMockException(join(\n                \"Argument passed to when() is not a mock!\",\n                \"Example of correct stubbing:\",\n                \"    doThrow(new RuntimeException()).when(mock).someMethod();\"\n        ));",
      "info" : "ThrowStatement[5602-5834]:ThrowStatement[5602-5834]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5846-5852]:Modifier[5846-5852]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5853-5857]:PrimitiveType[5853-5857]"
    }, {
      "left" : "nullPassedToWhenMethod",
      "right" : "nullPassedToWhenMethod",
      "info" : "SimpleName[5858-5880]:SimpleName[5858-5880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5883-6210]:Block[5883-6210]"
    }, {
      "left" : "throw new NullInsteadOfMockException(join(\n                \"Argument passed to when() is null!\",\n                \"Example of correct stubbing:\",\n                \"    doThrow(new RuntimeException()).when(mock).someMethod();\",\n                \"Also, if you use @Mock annotation don't miss initMocks()\"\n        ));",
      "right" : "throw new NullInsteadOfMockException(join(\n                \"Argument passed to when() is null!\",\n                \"Example of correct stubbing:\",\n                \"    doThrow(new RuntimeException()).when(mock).someMethod();\",\n                \"Also, if you use @Mock annotation don't miss initMocks()\"\n        ));",
      "info" : "ThrowStatement[5893-6204]:ThrowStatement[5893-6204]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6216-6222]:Modifier[6216-6222]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6223-6227]:PrimitiveType[6223-6227]"
    }, {
      "left" : "mocksHaveToBePassedToVerifyNoMoreInteractions",
      "right" : "mocksHaveToBePassedToVerifyNoMoreInteractions",
      "info" : "SimpleName[6228-6273]:SimpleName[6228-6273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6276-6583]:Block[6276-6583]"
    }, {
      "left" : "throw new MockitoException(join(\n                \"Method requires argument(s)!\",\n                \"Pass mocks that should be verified, e.g:\",\n                \"    verifyNoMoreInteractions(mockOne, mockTwo);\",\n                \"    verifyZeroInteractions(mockOne, mockTwo);\"\n                ));",
      "right" : "throw new MockitoException(join(\n                \"Method requires argument(s)!\",\n                \"Pass mocks that should be verified, e.g:\",\n                \"    verifyNoMoreInteractions(mockOne, mockTwo);\",\n                \"    verifyZeroInteractions(mockOne, mockTwo);\"\n                ));",
      "info" : "ThrowStatement[6286-6577]:ThrowStatement[6286-6577]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6589-6595]:Modifier[6589-6595]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6596-6600]:PrimitiveType[6596-6600]"
    }, {
      "left" : "notAMockPassedToVerifyNoMoreInteractions",
      "right" : "notAMockPassedToVerifyNoMoreInteractions",
      "info" : "SimpleName[6601-6641]:SimpleName[6601-6641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6644-6927]:Block[6644-6927]"
    }, {
      "left" : "throw new NotAMockException(join(\n            \"Argument(s) passed is not a mock!\",\n            \"Examples of correct verifications:\",\n            \"    verifyNoMoreInteractions(mockOne, mockTwo);\",\n            \"    verifyZeroInteractions(mockOne, mockTwo);\"\n        ));",
      "right" : "throw new NotAMockException(join(\n            \"Argument(s) passed is not a mock!\",\n            \"Examples of correct verifications:\",\n            \"    verifyNoMoreInteractions(mockOne, mockTwo);\",\n            \"    verifyZeroInteractions(mockOne, mockTwo);\"\n        ));",
      "info" : "ThrowStatement[6654-6921]:ThrowStatement[6654-6921]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6933-6939]:Modifier[6933-6939]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6940-6944]:PrimitiveType[6940-6944]"
    }, {
      "left" : "nullPassedToVerifyNoMoreInteractions",
      "right" : "nullPassedToVerifyNoMoreInteractions",
      "info" : "SimpleName[6945-6981]:SimpleName[6945-6981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6984-7286]:Block[6984-7286]"
    }, {
      "left" : "throw new NullInsteadOfMockException(join(\n                \"Argument(s) passed is null!\",\n                \"Examples of correct verifications:\",\n                \"    verifyNoMoreInteractions(mockOne, mockTwo);\",\n                \"    verifyZeroInteractions(mockOne, mockTwo);\"\n        ));",
      "right" : "throw new NullInsteadOfMockException(join(\n                \"Argument(s) passed is null!\",\n                \"Examples of correct verifications:\",\n                \"    verifyNoMoreInteractions(mockOne, mockTwo);\",\n                \"    verifyZeroInteractions(mockOne, mockTwo);\"\n        ));",
      "info" : "ThrowStatement[6994-7280]:ThrowStatement[6994-7280]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7292-7298]:Modifier[7292-7298]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7299-7303]:PrimitiveType[7299-7303]"
    }, {
      "left" : "notAMockPassedWhenCreatingInOrder",
      "right" : "notAMockPassedWhenCreatingInOrder",
      "info" : "SimpleName[7304-7337]:SimpleName[7304-7337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7340-7627]:Block[7340-7627]"
    }, {
      "left" : "throw new NotAMockException(join(\n                \"Argument(s) passed is not a mock!\",\n                \"Pass mocks that require verification in order.\",\n                \"For example:\",\n                \"    InOrder inOrder = inOrder(mockOne, mockTwo);\"\n                ));",
      "right" : "throw new NotAMockException(join(\n                \"Argument(s) passed is not a mock!\",\n                \"Pass mocks that require verification in order.\",\n                \"For example:\",\n                \"    InOrder inOrder = inOrder(mockOne, mockTwo);\"\n                ));",
      "info" : "ThrowStatement[7350-7621]:ThrowStatement[7350-7621]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7633-7639]:Modifier[7633-7639]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7640-7644]:PrimitiveType[7640-7644]"
    }, {
      "left" : "nullPassedWhenCreatingInOrder",
      "right" : "nullPassedWhenCreatingInOrder",
      "info" : "SimpleName[7645-7674]:SimpleName[7645-7674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7677-7967]:Block[7677-7967]"
    }, {
      "left" : "throw new NullInsteadOfMockException(join(\n                \"Argument(s) passed is null!\",\n                \"Pass mocks that require verification in order.\",\n                \"For example:\",\n                \"    InOrder inOrder = inOrder(mockOne, mockTwo);\"\n                ));",
      "right" : "throw new NullInsteadOfMockException(join(\n                \"Argument(s) passed is null!\",\n                \"Pass mocks that require verification in order.\",\n                \"For example:\",\n                \"    InOrder inOrder = inOrder(mockOne, mockTwo);\"\n                ));",
      "info" : "ThrowStatement[7687-7961]:ThrowStatement[7687-7961]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7973-7979]:Modifier[7973-7979]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7980-7984]:PrimitiveType[7980-7984]"
    }, {
      "left" : "mocksHaveToBePassedWhenCreatingInOrder",
      "right" : "mocksHaveToBePassedWhenCreatingInOrder",
      "info" : "SimpleName[7985-8023]:SimpleName[7985-8023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8026-8307]:Block[8026-8307]"
    }, {
      "left" : "throw new MockitoException(join(\n                \"Method requires argument(s)!\",\n                \"Pass mocks that require verification in order.\",\n                \"For example:\",\n                \"    InOrder inOrder = inOrder(mockOne, mockTwo);\"\n                ));",
      "right" : "throw new MockitoException(join(\n                \"Method requires argument(s)!\",\n                \"Pass mocks that require verification in order.\",\n                \"For example:\",\n                \"    InOrder inOrder = inOrder(mockOne, mockTwo);\"\n                ));",
      "info" : "ThrowStatement[8036-8301]:ThrowStatement[8036-8301]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8313-8319]:Modifier[8313-8319]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8320-8324]:PrimitiveType[8320-8324]"
    }, {
      "left" : "inOrderRequiresFamiliarMock",
      "right" : "inOrderRequiresFamiliarMock",
      "info" : "SimpleName[8325-8352]:SimpleName[8325-8352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8355-8668]:Block[8355-8668]"
    }, {
      "left" : "throw new MockitoException(join(\n                \"InOrder can only verify mocks that were passed in during creation of InOrder.\",\n                \"For example:\",\n                \"    InOrder inOrder = inOrder(mockOne);\",\n                \"    inOrder.verify(mockOne).doStuff();\"\n                ));",
      "right" : "throw new MockitoException(join(\n                \"InOrder can only verify mocks that were passed in during creation of InOrder.\",\n                \"For example:\",\n                \"    InOrder inOrder = inOrder(mockOne);\",\n                \"    inOrder.verify(mockOne).doStuff();\"\n                ));",
      "info" : "ThrowStatement[8365-8662]:ThrowStatement[8365-8662]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8674-8680]:Modifier[8674-8680]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8681-8685]:PrimitiveType[8681-8685]"
    }, {
      "left" : "invalidUseOfMatchers",
      "right" : "invalidUseOfMatchers",
      "info" : "SimpleName[8686-8706]:SimpleName[8686-8706]"
    }, {
      "left" : "int expectedMatchersCount",
      "right" : "int expectedMatchersCount",
      "info" : "SingleVariableDeclaration[8707-8732]:SingleVariableDeclaration[8707-8732]"
    }, {
      "left" : "int recordedMatchersCount",
      "right" : "int recordedMatchersCount",
      "info" : "SingleVariableDeclaration[8734-8759]:SingleVariableDeclaration[8734-8759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8761-9488]:Block[8761-9488]"
    }, {
      "left" : "throw new InvalidUseOfMatchersException(join(\n                \"Invalid use of argument matchers!\",\n                expectedMatchersCount + \" matchers expected, \" + recordedMatchersCount + \" recorded.\",\n                \"This exception may occur if matchers are combined with raw values:\",\n                \"    //incorrect:\",\n                \"    someMethod(anyObject(), \\\"raw String\\\");\",\n                \"When using matchers, all arguments have to be provided by matchers.\",\n                \"For example:\",\n                \"    //correct:\",\n                \"    someMethod(anyObject(), eq(\\\"String by matcher\\\"));\",\n                \"\",\n                \"For more info see javadoc for Matchers class.\"\n        ));",
      "right" : "throw new InvalidUseOfMatchersException(join(\n                \"Invalid use of argument matchers!\",\n                expectedMatchersCount + \" matchers expected, \" + recordedMatchersCount + \" recorded.\",\n                \"This exception may occur if matchers are combined with raw values:\",\n                \"    //incorrect:\",\n                \"    someMethod(anyObject(), \\\"raw String\\\");\",\n                \"When using matchers, all arguments have to be provided by matchers.\",\n                \"For example:\",\n                \"    //correct:\",\n                \"    someMethod(anyObject(), eq(\\\"String by matcher\\\"));\",\n                \"\",\n                \"For more info see javadoc for Matchers class.\"\n        ));",
      "info" : "ThrowStatement[8771-9482]:ThrowStatement[8771-9482]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9494-9500]:Modifier[9494-9500]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9501-9505]:PrimitiveType[9501-9505]"
    }, {
      "left" : "argumentsAreDifferent",
      "right" : "argumentsAreDifferent",
      "info" : "SimpleName[9506-9527]:SimpleName[9506-9527]"
    }, {
      "left" : "String wanted",
      "right" : "String wanted",
      "info" : "SingleVariableDeclaration[9528-9541]:SingleVariableDeclaration[9528-9541]"
    }, {
      "left" : "String actual",
      "right" : "String actual",
      "info" : "SingleVariableDeclaration[9543-9556]:SingleVariableDeclaration[9543-9556]"
    }, {
      "left" : "Location actualLocation",
      "right" : "Location actualLocation",
      "info" : "SingleVariableDeclaration[9558-9581]:SingleVariableDeclaration[9558-9581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9583-10079]:Block[9583-10079]"
    }, {
      "left" : "String message = join(\"Argument(s) are different! Wanted:\",\n                wanted,\n                new Location(),\n                \"Actual invocation has different arguments:\",\n                actual,\n                actualLocation,\n                \"\"\n                );",
      "right" : "String message = join(\"Argument(s) are different! Wanted:\",\n                wanted,\n                new Location(),\n                \"Actual invocation has different arguments:\",\n                actual,\n                actualLocation,\n                \"\"\n                );",
      "info" : "VariableDeclarationStatement[9593-9864]:VariableDeclarationStatement[9593-9864]"
    }, {
      "left" : "if (JUnitTool.hasJUnit())",
      "right" : "if (JUnitTool.hasJUnit())",
      "info" : "IfStatement[9874-10073]:IfStatement[9874-10073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9900-10002]:Block[9900-10002]"
    }, {
      "left" : "throw JUnitTool.createArgumentsAreDifferentException(message, wanted, actual);",
      "right" : "throw JUnitTool.createArgumentsAreDifferentException(message, wanted, actual);",
      "info" : "ThrowStatement[9914-9992]:ThrowStatement[9914-9992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10008-10073]:Block[10008-10073]"
    }, {
      "left" : "throw new ArgumentsAreDifferent(message);",
      "right" : "throw new ArgumentsAreDifferent(message);",
      "info" : "ThrowStatement[10022-10063]:ThrowStatement[10022-10063]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10085-10091]:Modifier[10085-10091]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10092-10096]:PrimitiveType[10092-10096]"
    }, {
      "left" : "wantedButNotInvoked",
      "right" : "wantedButNotInvoked",
      "info" : "SimpleName[10097-10116]:SimpleName[10097-10116]"
    }, {
      "left" : "PrintableInvocation wanted",
      "right" : "PrintableInvocation wanted",
      "info" : "SingleVariableDeclaration[10117-10143]:SingleVariableDeclaration[10117-10143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10145-10233]:Block[10145-10233]"
    }, {
      "left" : "throw new WantedButNotInvoked(createWantedButNotInvokedMessage(wanted));",
      "right" : "throw new WantedButNotInvoked(createWantedButNotInvokedMessage(wanted));",
      "info" : "ThrowStatement[10155-10227]:ThrowStatement[10155-10227]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10239-10245]:Modifier[10239-10245]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10246-10250]:PrimitiveType[10246-10250]"
    }, {
      "left" : "wantedButNotInvoked",
      "right" : "wantedButNotInvoked",
      "info" : "SimpleName[10251-10270]:SimpleName[10251-10270]"
    }, {
      "left" : "PrintableInvocation wanted",
      "right" : "PrintableInvocation wanted",
      "info" : "SingleVariableDeclaration[10271-10297]:SingleVariableDeclaration[10271-10297]"
    }, {
      "left" : "List<? extends PrintableInvocation> invocations",
      "right" : "List<? extends PrintableInvocation> invocations",
      "info" : "SingleVariableDeclaration[10299-10346]:SingleVariableDeclaration[10299-10346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10348-10977]:Block[10348-10977]"
    }, {
      "left" : "String allInvocations;",
      "right" : "String allInvocations;",
      "info" : "VariableDeclarationStatement[10358-10380]:VariableDeclarationStatement[10358-10380]"
    }, {
      "left" : "if (invocations.isEmpty())",
      "right" : "if (invocations.isEmpty())",
      "info" : "IfStatement[10389-10838]:IfStatement[10389-10838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10416-10516]:Block[10416-10516]"
    }, {
      "left" : "allInvocations = \"Actually, there were zero interactions with this mock.\\n\";",
      "right" : "allInvocations = \"Actually, there were zero interactions with this mock.\\n\";",
      "info" : "ExpressionStatement[10430-10506]:ExpressionStatement[10430-10506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10522-10838]:Block[10522-10838]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder(\"\\nHowever, there were other interactions with this mock:\\n\");",
      "right" : "StringBuilder sb = new StringBuilder(\"\\nHowever, there were other interactions with this mock:\\n\");",
      "info" : "VariableDeclarationStatement[10536-10635]:VariableDeclarationStatement[10536-10635]"
    }, {
      "left" : "for (PrintableInvocation i : invocations)",
      "right" : "for (PrintableInvocation i : invocations)",
      "info" : "EnhancedForStatement[10648-10784]:EnhancedForStatement[10648-10784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10690-10784]:Block[10690-10784]"
    }, {
      "left" : "sb.append(i.getLocation());",
      "right" : "sb.append(i.getLocation());",
      "info" : "ExpressionStatement[10709-10736]:ExpressionStatement[10709-10736]"
    }, {
      "left" : "sb.append(\"\\n\");",
      "right" : "sb.append(\"\\n\");",
      "info" : "ExpressionStatement[10754-10770]:ExpressionStatement[10754-10770]"
    }, {
      "left" : "allInvocations = sb.toString();",
      "right" : "allInvocations = sb.toString();",
      "info" : "ExpressionStatement[10797-10828]:ExpressionStatement[10797-10828]"
    }, {
      "left" : "String message = createWantedButNotInvokedMessage(wanted);",
      "right" : "String message = createWantedButNotInvokedMessage(wanted);",
      "info" : "VariableDeclarationStatement[10848-10906]:VariableDeclarationStatement[10848-10906]"
    }, {
      "left" : "throw new WantedButNotInvoked(message + allInvocations);",
      "right" : "throw new WantedButNotInvoked(message + allInvocations);",
      "info" : "ThrowStatement[10915-10971]:ThrowStatement[10915-10971]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10983-10990]:Modifier[10983-10990]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[10991-10997]:SimpleType[10991-10997]"
    }, {
      "left" : "createWantedButNotInvokedMessage",
      "right" : "createWantedButNotInvokedMessage",
      "info" : "SimpleName[10998-11030]:SimpleName[10998-11030]"
    }, {
      "left" : "PrintableInvocation wanted",
      "right" : "PrintableInvocation wanted",
      "info" : "SingleVariableDeclaration[11031-11057]:SingleVariableDeclaration[11031-11057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11059-11227]:Block[11059-11227]"
    }, {
      "left" : "return join(\n                \"Wanted but not invoked:\",\n                wanted.toString(),\n                new Location(),\n                \"\"\n        );",
      "right" : "return join(\n                \"Wanted but not invoked:\",\n                wanted.toString(),\n                new Location(),\n                \"\"\n        );",
      "info" : "ReturnStatement[11069-11221]:ReturnStatement[11069-11221]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11233-11239]:Modifier[11233-11239]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11240-11244]:PrimitiveType[11240-11244]"
    }, {
      "left" : "wantedButNotInvokedInOrder",
      "right" : "wantedButNotInvokedInOrder",
      "info" : "SimpleName[11245-11271]:SimpleName[11245-11271]"
    }, {
      "left" : "PrintableInvocation wanted",
      "right" : "PrintableInvocation wanted",
      "info" : "SingleVariableDeclaration[11272-11298]:SingleVariableDeclaration[11272-11298]"
    }, {
      "left" : "PrintableInvocation previous",
      "right" : "PrintableInvocation previous",
      "info" : "SingleVariableDeclaration[11300-11328]:SingleVariableDeclaration[11300-11328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11330-11751]:Block[11330-11751]"
    }, {
      "left" : "throw new VerificationInOrderFailure(join(\n                    \"Verification in order failure\",\n                    \"Wanted but not invoked:\",\n                    wanted.toString(),\n                    new Location(),\n                    \"Wanted anywhere AFTER following interaction:\",\n                    previous.toString(),\n                    previous.getLocation(),\n                    \"\"\n        ));",
      "right" : "throw new VerificationInOrderFailure(join(\n                    \"Verification in order failure\",\n                    \"Wanted but not invoked:\",\n                    wanted.toString(),\n                    new Location(),\n                    \"Wanted anywhere AFTER following interaction:\",\n                    previous.toString(),\n                    previous.getLocation(),\n                    \"\"\n        ));",
      "info" : "ThrowStatement[11340-11745]:ThrowStatement[11340-11745]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11757-11763]:Modifier[11757-11763]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11764-11768]:PrimitiveType[11764-11768]"
    }, {
      "left" : "tooManyActualInvocations",
      "right" : "tooManyActualInvocations",
      "info" : "SimpleName[11769-11793]:SimpleName[11769-11793]"
    }, {
      "left" : "int wantedCount",
      "right" : "int wantedCount",
      "info" : "SingleVariableDeclaration[11794-11809]:SingleVariableDeclaration[11794-11809]"
    }, {
      "left" : "int actualCount",
      "right" : "int actualCount",
      "info" : "SingleVariableDeclaration[11811-11826]:SingleVariableDeclaration[11811-11826]"
    }, {
      "left" : "PrintableInvocation wanted",
      "right" : "PrintableInvocation wanted",
      "info" : "SingleVariableDeclaration[11828-11854]:SingleVariableDeclaration[11828-11854]"
    }, {
      "left" : "Location firstUndesired",
      "right" : "Location firstUndesired",
      "info" : "SingleVariableDeclaration[11856-11879]:SingleVariableDeclaration[11856-11879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11881-12049]:Block[11881-12049]"
    }, {
      "left" : "String message = createTooManyInvocationsMessage(wantedCount, actualCount, wanted, firstUndesired);",
      "right" : "String message = createTooManyInvocationsMessage(wantedCount, actualCount, wanted, firstUndesired);",
      "info" : "VariableDeclarationStatement[11891-11990]:VariableDeclarationStatement[11891-11990]"
    }, {
      "left" : "throw new TooManyActualInvocations(message);",
      "right" : "throw new TooManyActualInvocations(message);",
      "info" : "ThrowStatement[11999-12043]:ThrowStatement[11999-12043]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12055-12062]:Modifier[12055-12062]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[12063-12069]:SimpleType[12063-12069]"
    }, {
      "left" : "createTooManyInvocationsMessage",
      "right" : "createTooManyInvocationsMessage",
      "info" : "SimpleName[12070-12101]:SimpleName[12070-12101]"
    }, {
      "left" : "int wantedCount",
      "right" : "int wantedCount",
      "info" : "SingleVariableDeclaration[12102-12117]:SingleVariableDeclaration[12102-12117]"
    }, {
      "left" : "int actualCount",
      "right" : "int actualCount",
      "info" : "SingleVariableDeclaration[12119-12134]:SingleVariableDeclaration[12119-12134]"
    }, {
      "left" : "PrintableInvocation wanted",
      "right" : "PrintableInvocation wanted",
      "info" : "SingleVariableDeclaration[12136-12162]:SingleVariableDeclaration[12136-12162]"
    }, {
      "left" : "Location firstUndesired",
      "right" : "Location firstUndesired",
      "info" : "SingleVariableDeclaration[12176-12199]:SingleVariableDeclaration[12176-12199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12201-12508]:Block[12201-12508]"
    }, {
      "left" : "return join(\n                wanted.toString(),\n                \"Wanted \" + Pluralizer.pluralize(wantedCount) + \":\",\n                new Location(),\n                \"But was \" + pluralize(actualCount) + \". Undesired invocation:\",\n                firstUndesired,\n                \"\"\n        );",
      "right" : "return join(\n                wanted.toString(),\n                \"Wanted \" + Pluralizer.pluralize(wantedCount) + \":\",\n                new Location(),\n                \"But was \" + pluralize(actualCount) + \". Undesired invocation:\",\n                firstUndesired,\n                \"\"\n        );",
      "info" : "ReturnStatement[12211-12502]:ReturnStatement[12211-12502]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12514-12520]:Modifier[12514-12520]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12521-12525]:PrimitiveType[12521-12525]"
    }, {
      "left" : "neverWantedButInvoked",
      "right" : "neverWantedButInvoked",
      "info" : "SimpleName[12526-12547]:SimpleName[12526-12547]"
    }, {
      "left" : "PrintableInvocation wanted",
      "right" : "PrintableInvocation wanted",
      "info" : "SingleVariableDeclaration[12548-12574]:SingleVariableDeclaration[12548-12574]"
    }, {
      "left" : "Location firstUndesired",
      "right" : "Location firstUndesired",
      "info" : "SingleVariableDeclaration[12576-12599]:SingleVariableDeclaration[12576-12599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12601-12859]:Block[12601-12859]"
    }, {
      "left" : "throw new NeverWantedButInvoked(join(\n                wanted.toString(),\n                \"Never wanted here:\",\n                new Location(),\n                \"But invoked here:\",\n                firstUndesired,\n                \"\"\n        ));",
      "right" : "throw new NeverWantedButInvoked(join(\n                wanted.toString(),\n                \"Never wanted here:\",\n                new Location(),\n                \"But invoked here:\",\n                firstUndesired,\n                \"\"\n        ));",
      "info" : "ThrowStatement[12611-12853]:ThrowStatement[12611-12853]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12865-12871]:Modifier[12865-12871]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12872-12876]:PrimitiveType[12872-12876]"
    }, {
      "left" : "tooManyActualInvocationsInOrder",
      "right" : "tooManyActualInvocationsInOrder",
      "info" : "SimpleName[12877-12908]:SimpleName[12877-12908]"
    }, {
      "left" : "int wantedCount",
      "right" : "int wantedCount",
      "info" : "SingleVariableDeclaration[12909-12924]:SingleVariableDeclaration[12909-12924]"
    }, {
      "left" : "int actualCount",
      "right" : "int actualCount",
      "info" : "SingleVariableDeclaration[12926-12941]:SingleVariableDeclaration[12926-12941]"
    }, {
      "left" : "PrintableInvocation wanted",
      "right" : "PrintableInvocation wanted",
      "info" : "SingleVariableDeclaration[12943-12969]:SingleVariableDeclaration[12943-12969]"
    }, {
      "left" : "Location firstUndesired",
      "right" : "Location firstUndesired",
      "info" : "SingleVariableDeclaration[12971-12994]:SingleVariableDeclaration[12971-12994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12996-13241]:Block[12996-13241]"
    }, {
      "left" : "String message = createTooManyInvocationsMessage(wantedCount, actualCount, wanted, firstUndesired);",
      "right" : "String message = createTooManyInvocationsMessage(wantedCount, actualCount, wanted, firstUndesired);",
      "info" : "VariableDeclarationStatement[13006-13105]:VariableDeclarationStatement[13006-13105]"
    }, {
      "left" : "throw new VerificationInOrderFailure(join(\n                \"Verification in order failure:\" + message\n                ));",
      "right" : "throw new VerificationInOrderFailure(join(\n                \"Verification in order failure:\" + message\n                ));",
      "info" : "ThrowStatement[13114-13235]:ThrowStatement[13114-13235]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13247-13254]:Modifier[13247-13254]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[13255-13261]:SimpleType[13255-13261]"
    }, {
      "left" : "createTooLittleInvocationsMessage",
      "right" : "createTooLittleInvocationsMessage",
      "info" : "SimpleName[13262-13295]:SimpleName[13262-13295]"
    }, {
      "left" : "Discrepancy discrepancy",
      "right" : "Discrepancy discrepancy",
      "info" : "SingleVariableDeclaration[13296-13319]:SingleVariableDeclaration[13296-13319]"
    }, {
      "left" : "PrintableInvocation wanted",
      "right" : "PrintableInvocation wanted",
      "info" : "SingleVariableDeclaration[13321-13347]:SingleVariableDeclaration[13321-13347]"
    }, {
      "left" : "Location lastActualInvocation",
      "right" : "Location lastActualInvocation",
      "info" : "SingleVariableDeclaration[13361-13390]:SingleVariableDeclaration[13361-13390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13392-13841]:Block[13392-13841]"
    }, {
      "left" : "String ending =\n            (lastActualInvocation != null)? lastActualInvocation + \"\\n\" : \"\\n\";",
      "right" : "String ending =\n            (lastActualInvocation != null)? lastActualInvocation + \"\\n\" : \"\\n\";",
      "info" : "VariableDeclarationStatement[13402-13497]:VariableDeclarationStatement[13402-13497]"
    }, {
      "left" : "String message = join(\n                    wanted.toString(),\n                    \"Wanted \" + discrepancy.getPluralizedWantedCount() + \":\",\n                    new Location(),\n                    \"But was \" + discrepancy.getPluralizedActualCount() + \":\",\n                    ending\n            );",
      "right" : "String message = join(\n                    wanted.toString(),\n                    \"Wanted \" + discrepancy.getPluralizedWantedCount() + \":\",\n                    new Location(),\n                    \"But was \" + discrepancy.getPluralizedActualCount() + \":\",\n                    ending\n            );",
      "info" : "VariableDeclarationStatement[13511-13807]:VariableDeclarationStatement[13511-13807]"
    }, {
      "left" : "return message;",
      "right" : "return message;",
      "info" : "ReturnStatement[13820-13835]:ReturnStatement[13820-13835]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13847-13853]:Modifier[13847-13853]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13854-13858]:PrimitiveType[13854-13858]"
    }, {
      "left" : "tooLittleActualInvocations",
      "right" : "tooLittleActualInvocations",
      "info" : "SimpleName[13859-13885]:SimpleName[13859-13885]"
    }, {
      "left" : "Discrepancy discrepancy",
      "right" : "Discrepancy discrepancy",
      "info" : "SingleVariableDeclaration[13886-13909]:SingleVariableDeclaration[13886-13909]"
    }, {
      "left" : "PrintableInvocation wanted",
      "right" : "PrintableInvocation wanted",
      "info" : "SingleVariableDeclaration[13911-13937]:SingleVariableDeclaration[13911-13937]"
    }, {
      "left" : "Location lastActualLocation",
      "right" : "Location lastActualLocation",
      "info" : "SingleVariableDeclaration[13939-13966]:SingleVariableDeclaration[13939-13966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13968-14132]:Block[13968-14132]"
    }, {
      "left" : "String message = createTooLittleInvocationsMessage(discrepancy, wanted, lastActualLocation);",
      "right" : "String message = createTooLittleInvocationsMessage(discrepancy, wanted, lastActualLocation);",
      "info" : "VariableDeclarationStatement[13978-14070]:VariableDeclarationStatement[13978-14070]"
    }, {
      "left" : "throw new TooLittleActualInvocations(message);",
      "right" : "throw new TooLittleActualInvocations(message);",
      "info" : "ThrowStatement[14080-14126]:ThrowStatement[14080-14126]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14138-14144]:Modifier[14138-14144]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14145-14149]:PrimitiveType[14145-14149]"
    }, {
      "left" : "tooLittleActualInvocationsInOrder",
      "right" : "tooLittleActualInvocationsInOrder",
      "info" : "SimpleName[14150-14183]:SimpleName[14150-14183]"
    }, {
      "left" : "Discrepancy discrepancy",
      "right" : "Discrepancy discrepancy",
      "info" : "SingleVariableDeclaration[14184-14207]:SingleVariableDeclaration[14184-14207]"
    }, {
      "left" : "PrintableInvocation wanted",
      "right" : "PrintableInvocation wanted",
      "info" : "SingleVariableDeclaration[14209-14235]:SingleVariableDeclaration[14209-14235]"
    }, {
      "left" : "Location lastActualLocation",
      "right" : "Location lastActualLocation",
      "info" : "SingleVariableDeclaration[14237-14264]:SingleVariableDeclaration[14237-14264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14266-14505]:Block[14266-14505]"
    }, {
      "left" : "String message = createTooLittleInvocationsMessage(discrepancy, wanted, lastActualLocation);",
      "right" : "String message = createTooLittleInvocationsMessage(discrepancy, wanted, lastActualLocation);",
      "info" : "VariableDeclarationStatement[14276-14368]:VariableDeclarationStatement[14276-14368]"
    }, {
      "left" : "throw new VerificationInOrderFailure(join(\n                \"Verification in order failure:\" + message\n                ));",
      "right" : "throw new VerificationInOrderFailure(join(\n                \"Verification in order failure:\" + message\n                ));",
      "info" : "ThrowStatement[14378-14499]:ThrowStatement[14378-14499]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14511-14517]:Modifier[14511-14517]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14518-14522]:PrimitiveType[14518-14522]"
    }, {
      "left" : "noMoreInteractionsWanted",
      "right" : "noMoreInteractionsWanted",
      "info" : "SimpleName[14523-14547]:SimpleName[14523-14547]"
    }, {
      "left" : "Invocation undesired",
      "right" : "Invocation undesired",
      "info" : "SingleVariableDeclaration[14548-14568]:SingleVariableDeclaration[14548-14568]"
    }, {
      "left" : "List<VerificationAwareInvocation> invocations",
      "right" : "List<VerificationAwareInvocation> invocations",
      "info" : "SingleVariableDeclaration[14570-14615]:SingleVariableDeclaration[14570-14615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14617-15022]:Block[14617-15022]"
    }, {
      "left" : "ScenarioPrinter scenarioPrinter = new ScenarioPrinter();",
      "right" : "ScenarioPrinter scenarioPrinter = new ScenarioPrinter();",
      "info" : "VariableDeclarationStatement[14627-14683]:VariableDeclarationStatement[14627-14683]"
    }, {
      "left" : "String scenario = scenarioPrinter.print(invocations);",
      "right" : "String scenario = scenarioPrinter.print(invocations);",
      "info" : "VariableDeclarationStatement[14692-14745]:VariableDeclarationStatement[14692-14745]"
    }, {
      "left" : "throw new NoInteractionsWanted(join(\n                \"No interactions wanted here:\",\n                new Location(),\n                \"But found this interaction:\",\n                undesired.getLocation(),\n                scenario,\n                \"\"\n        ));",
      "right" : "throw new NoInteractionsWanted(join(\n                \"No interactions wanted here:\",\n                new Location(),\n                \"But found this interaction:\",\n                undesired.getLocation(),\n                scenario,\n                \"\"\n        ));",
      "info" : "ThrowStatement[14755-15016]:ThrowStatement[14755-15016]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15028-15034]:Modifier[15028-15034]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15035-15039]:PrimitiveType[15035-15039]"
    }, {
      "left" : "noMoreInteractionsWantedInOrder",
      "right" : "noMoreInteractionsWantedInOrder",
      "info" : "SimpleName[15040-15071]:SimpleName[15040-15071]"
    }, {
      "left" : "Invocation undesired",
      "right" : "Invocation undesired",
      "info" : "SingleVariableDeclaration[15072-15092]:SingleVariableDeclaration[15072-15092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15094-15359]:Block[15094-15359]"
    }, {
      "left" : "throw new VerificationInOrderFailure(join(\n                \"No interactions wanted here:\",\n                new Location(),\n                \"But found this interaction:\",\n                undesired.getLocation(),\n                \"\"\n                ));",
      "right" : "throw new VerificationInOrderFailure(join(\n                \"No interactions wanted here:\",\n                new Location(),\n                \"But found this interaction:\",\n                undesired.getLocation(),\n                \"\"\n                ));",
      "info" : "ThrowStatement[15104-15353]:ThrowStatement[15104-15353]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15365-15371]:Modifier[15365-15371]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15372-15376]:PrimitiveType[15372-15376]"
    }, {
      "left" : "cannotMockFinalClass",
      "right" : "cannotMockFinalClass",
      "info" : "SimpleName[15377-15397]:SimpleName[15377-15397]"
    }, {
      "left" : "Class<?> clazz",
      "right" : "Class<?> clazz",
      "info" : "SingleVariableDeclaration[15398-15412]:SingleVariableDeclaration[15398-15412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15414-15699]:Block[15414-15699]"
    }, {
      "left" : "throw new MockitoException(join(\n                \"Cannot mock/spy \" + clazz.toString(),\n                \"Mockito cannot mock/spy following:\",\n                \"  - final classes\",\n                \"  - anonymous classes\",\n                \"  - primitive types\"\n        ));",
      "right" : "throw new MockitoException(join(\n                \"Cannot mock/spy \" + clazz.toString(),\n                \"Mockito cannot mock/spy following:\",\n                \"  - final classes\",\n                \"  - anonymous classes\",\n                \"  - primitive types\"\n        ));",
      "info" : "ThrowStatement[15424-15693]:ThrowStatement[15424-15693]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15705-15711]:Modifier[15705-15711]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15712-15716]:PrimitiveType[15712-15716]"
    }, {
      "left" : "cannotStubVoidMethodWithAReturnValue",
      "right" : "cannotStubVoidMethodWithAReturnValue",
      "info" : "SimpleName[15717-15753]:SimpleName[15717-15753]"
    }, {
      "left" : "String methodName",
      "right" : "String methodName",
      "info" : "SingleVariableDeclaration[15754-15771]:SingleVariableDeclaration[15754-15771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15773-16325]:Block[15773-16325]"
    }, {
      "left" : "throw new MockitoException(join(\n                \"'\" + methodName + \"' is a *void method* and it *cannot* be stubbed with a *return value*!\",\n                \"Voids are usually stubbed with Throwables:\",\n                \"    doThrow(exception).when(mock).someVoidMethod();\",\n                \"If the method you are trying to stub is *overloaded* then make sure you are calling the right overloaded version.\",\n                \"This exception might also occur when somewhere in your test you are stubbing *final methods*.\"\n             ));",
      "right" : "throw new MockitoException(join(\n                \"'\" + methodName + \"' is a *void method* and it *cannot* be stubbed with a *return value*!\",\n                \"Voids are usually stubbed with Throwables:\",\n                \"    doThrow(exception).when(mock).someVoidMethod();\",\n                \"If the method you are trying to stub is *overloaded* then make sure you are calling the right overloaded version.\",\n                \"This exception might also occur when somewhere in your test you are stubbing *final methods*.\"\n             ));",
      "info" : "ThrowStatement[15783-16319]:ThrowStatement[15783-16319]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16331-16337]:Modifier[16331-16337]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16338-16342]:PrimitiveType[16338-16342]"
    }, {
      "left" : "onlyVoidMethodsCanBeSetToDoNothing",
      "right" : "onlyVoidMethodsCanBeSetToDoNothing",
      "info" : "SimpleName[16343-16377]:SimpleName[16343-16377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16380-16841]:Block[16380-16841]"
    }, {
      "left" : "throw new MockitoException(join(\n                \"Only void methods can doNothing()!\",\n                \"Example of correct use of doNothing():\",\n                \"    doNothing().\",\n                \"    doThrow(new RuntimeException())\",\n                \"    .when(mock).someVoidMethod();\",\n                \"Above means:\",\n                \"someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called\"\n             ));",
      "right" : "throw new MockitoException(join(\n                \"Only void methods can doNothing()!\",\n                \"Example of correct use of doNothing():\",\n                \"    doNothing().\",\n                \"    doThrow(new RuntimeException())\",\n                \"    .when(mock).someVoidMethod();\",\n                \"Above means:\",\n                \"someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called\"\n             ));",
      "info" : "ThrowStatement[16390-16835]:ThrowStatement[16390-16835]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16847-16853]:Modifier[16847-16853]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16854-16858]:PrimitiveType[16854-16858]"
    }, {
      "left" : "wrongTypeOfReturnValue",
      "right" : "wrongTypeOfReturnValue",
      "info" : "SimpleName[16859-16881]:SimpleName[16859-16881]"
    }, {
      "left" : "String expectedType",
      "right" : "String expectedType",
      "info" : "SingleVariableDeclaration[16882-16901]:SingleVariableDeclaration[16882-16901]"
    }, {
      "left" : "String actualType",
      "right" : "String actualType",
      "info" : "SingleVariableDeclaration[16903-16920]:SingleVariableDeclaration[16903-16920]"
    }, {
      "left" : "String methodName",
      "right" : "String methodName",
      "info" : "SingleVariableDeclaration[16922-16939]:SingleVariableDeclaration[16922-16939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16941-17373]:Block[16941-17373]"
    }, {
      "left" : "throw new WrongTypeOfReturnValue(join(\n                actualType + \" cannot be returned by \" + methodName + \"()\",\n                methodName + \"() should return \" + expectedType,\n                \"***\",\n                \"This exception *might* occur in wrongly written multi-threaded tests.\",\n                \"Please refer to Mockito FAQ on limitations of concurrency testing.\",\n                \"\"\n                ));",
      "right" : "throw new WrongTypeOfReturnValue(join(\n                actualType + \" cannot be returned by \" + methodName + \"()\",\n                methodName + \"() should return \" + expectedType,\n                \"***\",\n                \"This exception *might* occur in wrongly written multi-threaded tests.\",\n                \"Please refer to Mockito FAQ on limitations of concurrency testing.\",\n                \"\"\n                ));",
      "info" : "ThrowStatement[16951-17367]:ThrowStatement[16951-17367]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17379-17385]:Modifier[17379-17385]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17386-17390]:PrimitiveType[17386-17390]"
    }, {
      "left" : "wantedAtMostX",
      "right" : "wantedAtMostX",
      "info" : "SimpleName[17391-17404]:SimpleName[17391-17404]"
    }, {
      "left" : "int maxNumberOfInvocations",
      "right" : "int maxNumberOfInvocations",
      "info" : "SingleVariableDeclaration[17405-17431]:SingleVariableDeclaration[17405-17431]"
    }, {
      "left" : "int foundSize",
      "right" : "int foundSize",
      "info" : "SingleVariableDeclaration[17433-17446]:SingleVariableDeclaration[17433-17446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17448-17583]:Block[17448-17583]"
    }, {
      "left" : "throw new MockitoAssertionError(join(\"Wanted at most \" + pluralize(maxNumberOfInvocations) + \" but was \" + foundSize));",
      "right" : "throw new MockitoAssertionError(join(\"Wanted at most \" + pluralize(maxNumberOfInvocations) + \" but was \" + foundSize));",
      "info" : "ThrowStatement[17458-17577]:ThrowStatement[17458-17577]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17589-17595]:Modifier[17589-17595]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17596-17600]:PrimitiveType[17596-17600]"
    }, {
      "left" : "misplacedArgumentMatcher",
      "right" : "misplacedArgumentMatcher",
      "info" : "SimpleName[17601-17625]:SimpleName[17601-17625]"
    }, {
      "left" : "Location location",
      "right" : "Location location",
      "info" : "SingleVariableDeclaration[17626-17643]:SingleVariableDeclaration[17626-17643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17645-18477]:Block[17645-18477]"
    }, {
      "left" : "throw new InvalidUseOfMatchersException(join(\n                \"Misplaced argument matcher detected here:\",\n                location,\n                \"\",\n                \"You cannot use argument matchers outside of verification or stubbing.\",\n                \"Examples of correct usage of argument matchers:\",\n                \"    when(mock.get(anyInt())).thenReturn(null);\",\n                \"    doThrow(new RuntimeException()).when(mock).someVoidMethod(anyObject());\",\n                \"    verify(mock).someMethod(contains(\\\"foo\\\"))\",\n                \"\",\n                \"Also, this error might show up because you use argument matchers with methods that cannot be mocked.\",\n                \"Following methods *cannot* be stubbed/verified: final/private/equals()/hashCode().\",\n                \"\"\n                ));",
      "right" : "throw new InvalidUseOfMatchersException(join(\n                \"Misplaced argument matcher detected here:\",\n                location,\n                \"\",\n                \"You cannot use argument matchers outside of verification or stubbing.\",\n                \"Examples of correct usage of argument matchers:\",\n                \"    when(mock.get(anyInt())).thenReturn(null);\",\n                \"    doThrow(new RuntimeException()).when(mock).someVoidMethod(anyObject());\",\n                \"    verify(mock).someMethod(contains(\\\"foo\\\"))\",\n                \"\",\n                \"Also, this error might show up because you use argument matchers with methods that cannot be mocked.\",\n                \"Following methods *cannot* be stubbed/verified: final/private/equals()/hashCode().\",\n                \"\"\n                ));",
      "info" : "ThrowStatement[17655-18471]:ThrowStatement[17655-18471]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18483-18489]:Modifier[18483-18489]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18490-18494]:PrimitiveType[18490-18494]"
    }, {
      "left" : "smartNullPointerException",
      "right" : "smartNullPointerException",
      "info" : "SimpleName[18495-18520]:SimpleName[18495-18520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18540-18819]:Block[18552-18852]"
    }, {
      "left" : "throw new SmartNullPointerException(join(\n                \"You have a NullPointerException here:\",\n                new Location(),\n                \"Because this method was *not* stubbed correctly:\",\n                location,\n                \"\"\n                ));",
      "right" : "throw new SmartNullPointerException(join(\n                \"You have a NullPointerException here:\",\n                new Location(),\n                obj,\n                \"Because this method was *not* stubbed correctly:\",\n                location,\n                \"\"\n                ));",
      "info" : "ThrowStatement[18550-18813]:ThrowStatement[18562-18846]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18825-18831]:Modifier[18858-18864]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18832-18836]:PrimitiveType[18865-18869]"
    }, {
      "left" : "noArgumentValueWasCaptured",
      "right" : "noArgumentValueWasCaptured",
      "info" : "SimpleName[18837-18863]:SimpleName[18870-18896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18866-19589]:Block[18899-19622]"
    }, {
      "left" : "throw new MockitoException(join(\n                \"No argument value was captured!\",\n                \"You might have forgotten to use argument.capture() in verify()...\",\n                \"...or you used capture() in stubbing but stubbed method was not called.\",\n                \"Be aware that it is recommended to use capture() only with verify()\",\n                \"\",\n                \"Examples of correct argument capturing:\",\n                \"    ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);\",\n                \"    verify(mock).doSomething(argument.capture());\",\n                \"    assertEquals(\\\"John\\\", argument.getValue().getName());\",\n                \"\"\n                ));",
      "right" : "throw new MockitoException(join(\n                \"No argument value was captured!\",\n                \"You might have forgotten to use argument.capture() in verify()...\",\n                \"...or you used capture() in stubbing but stubbed method was not called.\",\n                \"Be aware that it is recommended to use capture() only with verify()\",\n                \"\",\n                \"Examples of correct argument capturing:\",\n                \"    ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);\",\n                \"    verify(mock).doSomething(argument.capture());\",\n                \"    assertEquals(\\\"John\\\", argument.getValue().getName());\",\n                \"\"\n                ));",
      "info" : "ThrowStatement[18876-19583]:ThrowStatement[18909-19616]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19595-19601]:Modifier[19628-19634]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19602-19606]:PrimitiveType[19635-19639]"
    }, {
      "left" : "extraInterfacesDoesNotAcceptNullParameters",
      "right" : "extraInterfacesDoesNotAcceptNullParameters",
      "info" : "SimpleName[19607-19649]:SimpleName[19640-19682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19652-19789]:Block[19685-19822]"
    }, {
      "left" : "throw new MockitoException(join(\n                \"extraInterfaces() does not accept null parameters.\"\n                ));",
      "right" : "throw new MockitoException(join(\n                \"extraInterfaces() does not accept null parameters.\"\n                ));",
      "info" : "ThrowStatement[19662-19783]:ThrowStatement[19695-19816]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19795-19801]:Modifier[19828-19834]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19802-19806]:PrimitiveType[19835-19839]"
    }, {
      "left" : "extraInterfacesAcceptsOnlyInterfaces",
      "right" : "extraInterfacesAcceptsOnlyInterfaces",
      "info" : "SimpleName[19807-19843]:SimpleName[19840-19876]"
    }, {
      "left" : "Class<?> wrongType",
      "right" : "Class<?> wrongType",
      "info" : "SingleVariableDeclaration[19844-19862]:SingleVariableDeclaration[19877-19895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19864-20092]:Block[19897-20125]"
    }, {
      "left" : "throw new MockitoException(join(\n                \"extraInterfaces() accepts only interfaces.\",\n                \"You passed following type: \" + wrongType.getSimpleName() + \" which is not an interface.\"\n        ));",
      "right" : "throw new MockitoException(join(\n                \"extraInterfaces() accepts only interfaces.\",\n                \"You passed following type: \" + wrongType.getSimpleName() + \" which is not an interface.\"\n        ));",
      "info" : "ThrowStatement[19874-20086]:ThrowStatement[19907-20119]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20098-20104]:Modifier[20131-20137]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20105-20109]:PrimitiveType[20138-20142]"
    }, {
      "left" : "extraInterfacesCannotContainMockedType",
      "right" : "extraInterfacesCannotContainMockedType",
      "info" : "SimpleName[20110-20148]:SimpleName[20143-20181]"
    }, {
      "left" : "Class<?> wrongType",
      "right" : "Class<?> wrongType",
      "info" : "SingleVariableDeclaration[20149-20167]:SingleVariableDeclaration[20182-20200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20169-20473]:Block[20202-20506]"
    }, {
      "left" : "throw new MockitoException(join(\n                \"extraInterfaces() does not accept the same type as the mocked type.\",\n                \"You mocked following type: \" + wrongType.getSimpleName(),\n                \"and you passed the same very interface to the extraInterfaces()\"\n        ));",
      "right" : "throw new MockitoException(join(\n                \"extraInterfaces() does not accept the same type as the mocked type.\",\n                \"You mocked following type: \" + wrongType.getSimpleName(),\n                \"and you passed the same very interface to the extraInterfaces()\"\n        ));",
      "info" : "ThrowStatement[20179-20467]:ThrowStatement[20212-20500]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20479-20485]:Modifier[20512-20518]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20486-20490]:PrimitiveType[20519-20523]"
    }, {
      "left" : "extraInterfacesRequiresAtLeastOneInterface",
      "right" : "extraInterfacesRequiresAtLeastOneInterface",
      "info" : "SimpleName[20491-20533]:SimpleName[20524-20566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20536-20665]:Block[20569-20698]"
    }, {
      "left" : "throw new MockitoException(join(\n                \"extraInterfaces() requires at least one interface.\"\n        ));",
      "right" : "throw new MockitoException(join(\n                \"extraInterfaces() requires at least one interface.\"\n        ));",
      "info" : "ThrowStatement[20546-20659]:ThrowStatement[20579-20692]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20671-20677]:Modifier[20704-20710]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20678-20682]:PrimitiveType[20711-20715]"
    }, {
      "left" : "mockedTypeIsInconsistentWithSpiedInstanceType",
      "right" : "mockedTypeIsInconsistentWithSpiedInstanceType",
      "info" : "SimpleName[20683-20728]:SimpleName[20716-20761]"
    }, {
      "left" : "Class<?> mockedType",
      "right" : "Class<?> mockedType",
      "info" : "SingleVariableDeclaration[20729-20748]:SingleVariableDeclaration[20762-20781]"
    }, {
      "left" : "Object spiedInstance",
      "right" : "Object spiedInstance",
      "info" : "SingleVariableDeclaration[20750-20770]:SingleVariableDeclaration[20783-20803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20772-21347]:Block[20805-21380]"
    }, {
      "left" : "throw new MockitoException(join(\n                \"Mocked type must be the same as the type of your spied instance.\",\n                \"Mocked type must be: \" + spiedInstance.getClass().getSimpleName() + \", but is: \" + mockedType.getSimpleName(),\n                \"  //correct spying:\",\n                \"  spy = mock( ->ArrayList.class<- , withSettings().spiedInstance( ->new ArrayList()<- );\",\n                \"  //incorrect - types don't match:\",\n                \"  spy = mock( ->List.class<- , withSettings().spiedInstance( ->new ArrayList()<- );\"\n        ));",
      "right" : "throw new MockitoException(join(\n                \"Mocked type must be the same as the type of your spied instance.\",\n                \"Mocked type must be: \" + spiedInstance.getClass().getSimpleName() + \", but is: \" + mockedType.getSimpleName(),\n                \"  //correct spying:\",\n                \"  spy = mock( ->ArrayList.class<- , withSettings().spiedInstance( ->new ArrayList()<- );\",\n                \"  //incorrect - types don't match:\",\n                \"  spy = mock( ->List.class<- , withSettings().spiedInstance( ->new ArrayList()<- );\"\n        ));",
      "info" : "ThrowStatement[20782-21341]:ThrowStatement[20815-21374]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21353-21359]:Modifier[21386-21392]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21360-21364]:PrimitiveType[21393-21397]"
    }, {
      "left" : "cannotCallRealMethodOnInterface",
      "right" : "cannotCallRealMethodOnInterface",
      "info" : "SimpleName[21365-21396]:SimpleName[21398-21429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21399-21771]:Block[21432-21804]"
    }, {
      "left" : "throw new MockitoException(join(\n                \"Cannot call real method on java interface. Interface does not have any implementation!\",\n                \"Calling real methods is only possible when mocking concrete classes.\",\n                \"  //correct example:\",\n                \"  when(mockOfConcreteClass.doStuff()).thenCallRealMethod();\"\n        ));",
      "right" : "throw new MockitoException(join(\n                \"Cannot call real method on java interface. Interface does not have any implementation!\",\n                \"Calling real methods is only possible when mocking concrete classes.\",\n                \"  //correct example:\",\n                \"  when(mockOfConcreteClass.doStuff()).thenCallRealMethod();\"\n        ));",
      "info" : "ThrowStatement[21409-21765]:ThrowStatement[21442-21798]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21777-21783]:Modifier[21810-21816]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21784-21788]:PrimitiveType[21817-21821]"
    }, {
      "left" : "cannotVerifyToString",
      "right" : "cannotVerifyToString",
      "info" : "SimpleName[21789-21809]:SimpleName[21822-21842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21812-22451]:Block[21845-22484]"
    }, {
      "left" : "throw new MockitoException(join(\n                \"Mockito cannot verify toString()\",\n                \"toString() is too often used behind of scenes  (i.e. during String concatenation, in IDE debugging views). \" +\n                        \"Verifying it may give inconsistent or hard to understand results. \" +\n                        \"Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)\",\n                \"However, it is possible to stub toString(). Stubbing toString() smells a bit funny but there are rare, legitimate use cases.\"\n        ));",
      "right" : "throw new MockitoException(join(\n                \"Mockito cannot verify toString()\",\n                \"toString() is too often used behind of scenes  (i.e. during String concatenation, in IDE debugging views). \" +\n                        \"Verifying it may give inconsistent or hard to understand results. \" +\n                        \"Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)\",\n                \"However, it is possible to stub toString(). Stubbing toString() smells a bit funny but there are rare, legitimate use cases.\"\n        ));",
      "info" : "ThrowStatement[21822-22445]:ThrowStatement[21855-22478]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22457-22463]:Modifier[22490-22496]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22464-22468]:PrimitiveType[22497-22501]"
    }, {
      "left" : "moreThanOneAnnotationNotAllowed",
      "right" : "moreThanOneAnnotationNotAllowed",
      "info" : "SimpleName[22469-22500]:SimpleName[22502-22533]"
    }, {
      "left" : "String fieldName",
      "right" : "String fieldName",
      "info" : "SingleVariableDeclaration[22501-22517]:SingleVariableDeclaration[22534-22550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22519-22820]:Block[22552-22853]"
    }, {
      "left" : "throw new MockitoException(\"You cannot have more than one Mockito annotation on a field!\\n\" +\n                \"The field '\" + fieldName + \"' has multiple Mockito annotations.\\n\" +\n                \"For info how to use annotations see examples in javadoc for MockitoAnnotations class.\");",
      "right" : "throw new MockitoException(\"You cannot have more than one Mockito annotation on a field!\\n\" +\n                \"The field '\" + fieldName + \"' has multiple Mockito annotations.\\n\" +\n                \"For info how to use annotations see examples in javadoc for MockitoAnnotations class.\");",
      "info" : "ThrowStatement[22529-22814]:ThrowStatement[22562-22847]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22826-22832]:Modifier[22859-22865]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22833-22837]:PrimitiveType[22866-22870]"
    }, {
      "left" : "unsupportedCombinationOfAnnotations",
      "right" : "unsupportedCombinationOfAnnotations",
      "info" : "SimpleName[22838-22873]:SimpleName[22871-22906]"
    }, {
      "left" : "String undesiredAnnotationOne",
      "right" : "String undesiredAnnotationOne",
      "info" : "SingleVariableDeclaration[22874-22903]:SingleVariableDeclaration[22907-22936]"
    }, {
      "left" : "String undesiredAnnotationTwo",
      "right" : "String undesiredAnnotationTwo",
      "info" : "SingleVariableDeclaration[22905-22934]:SingleVariableDeclaration[22938-22967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22936-23135]:Block[22969-23168]"
    }, {
      "left" : "throw new MockitoException(\"This combination of annotations is not permitted on a single field:\\n\" +\n                \"@\" + undesiredAnnotationOne + \" and @\" + undesiredAnnotationTwo);",
      "right" : "throw new MockitoException(\"This combination of annotations is not permitted on a single field:\\n\" +\n                \"@\" + undesiredAnnotationOne + \" and @\" + undesiredAnnotationTwo);",
      "info" : "ThrowStatement[22946-23129]:ThrowStatement[22979-23162]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23141-23147]:Modifier[23174-23180]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23148-23152]:PrimitiveType[23181-23185]"
    }, {
      "left" : "cannotInitializeForSpyAnnotation",
      "right" : "cannotInitializeForSpyAnnotation",
      "info" : "SimpleName[23153-23185]:SimpleName[23186-23218]"
    }, {
      "left" : "String fieldName",
      "right" : "String fieldName",
      "info" : "SingleVariableDeclaration[23186-23202]:SingleVariableDeclaration[23219-23235]"
    }, {
      "left" : "Exception details",
      "right" : "Exception details",
      "info" : "SingleVariableDeclaration[23204-23221]:SingleVariableDeclaration[23237-23254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23223-23801]:Block[23256-23834]"
    }, {
      "left" : "throw new MockitoException(join(\"Cannot instianate a @Spy for '\" + fieldName + \"' field.\",\n            \"You haven't provided the instance for spying at field declaration so I tried to construct the instance.\",\n            \"However, I failed because: \" + details.getMessage(),\n            \"Examples of correct usage of @Spy:\",\n            \"   @Spy List mock = new LinkedList();\",\n            \"   @Spy Foo foo; //only if Foo has parameterless constructor\",\n            \"   //also, don't forget about MockitoAnnotations.initMocks();\",\n                \"\"), details);",
      "right" : "throw new MockitoException(join(\"Cannot instianate a @Spy for '\" + fieldName + \"' field.\",\n            \"You haven't provided the instance for spying at field declaration so I tried to construct the instance.\",\n            \"However, I failed because: \" + details.getMessage(),\n            \"Examples of correct usage of @Spy:\",\n            \"   @Spy List mock = new LinkedList();\",\n            \"   @Spy Foo foo; //only if Foo has parameterless constructor\",\n            \"   //also, don't forget about MockitoAnnotations.initMocks();\",\n                \"\"), details);",
      "info" : "ThrowStatement[23233-23795]:ThrowStatement[23266-23828]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23807-23813]:Modifier[23840-23846]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23814-23818]:PrimitiveType[23847-23851]"
    }, {
      "left" : "cannotInitializeForInjectMocksAnnotation",
      "right" : "cannotInitializeForInjectMocksAnnotation",
      "info" : "SimpleName[23819-23859]:SimpleName[23852-23892]"
    }, {
      "left" : "String fieldName",
      "right" : "String fieldName",
      "info" : "SingleVariableDeclaration[23860-23876]:SingleVariableDeclaration[23893-23909]"
    }, {
      "left" : "Exception details",
      "right" : "Exception details",
      "info" : "SingleVariableDeclaration[23878-23895]:SingleVariableDeclaration[23911-23928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23897-24597]:Block[23930-24630]"
    }, {
      "left" : "throw new MockitoException(join(\"Cannot instianate @InjectMocks field named '\" + fieldName + \"'.\",\n            \"You haven't provided the instance for spying at field declaration so I tried to construct the instance.\",\n            \"However, I failed because: \" + details.getMessage(),\n            \"Examples of correct usage of @InjectMocks:\",\n            \"   @InjectMocks Service service = new Service();\",\n            \"   @InjectMocks Service service; //only if Service has parameterless constructor\",\n            \"   //also, don't forget about MockitoAnnotations.initMocks();\",\n            \"   //and... don't forget about some @Mocks for injection :)\",\n                \"\"), details);",
      "right" : "throw new MockitoException(join(\"Cannot instianate @InjectMocks field named '\" + fieldName + \"'.\",\n            \"You haven't provided the instance for spying at field declaration so I tried to construct the instance.\",\n            \"However, I failed because: \" + details.getMessage(),\n            \"Examples of correct usage of @InjectMocks:\",\n            \"   @InjectMocks Service service = new Service();\",\n            \"   @InjectMocks Service service; //only if Service has parameterless constructor\",\n            \"   //also, don't forget about MockitoAnnotations.initMocks();\",\n            \"   //and... don't forget about some @Mocks for injection :)\",\n                \"\"), details);",
      "info" : "ThrowStatement[23907-24591]:ThrowStatement[23940-24624]"
    } ]
  },
  "interFileMappings" : { }
}