{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private final PartitionUpdate update;",
      "right" : "private final PartitionUpdate update;",
      "info" : "FieldDeclaration[1682-1719]:FieldDeclaration[1682-1719]"
    }, {
      "left" : "private final long timestamp;",
      "right" : "private final long timestamp;",
      "info" : "FieldDeclaration[1725-1754]:FieldDeclaration[1725-1754]"
    }, {
      "left" : "private final int ttl;",
      "right" : "private final int ttl;",
      "info" : "FieldDeclaration[1759-1781]:FieldDeclaration[1759-1781]"
    }, {
      "left" : "private final int localDeletionTime;",
      "right" : "private final int localDeletionTime;",
      "info" : "FieldDeclaration[1786-1822]:FieldDeclaration[1786-1822]"
    }, {
      "left" : "private final DeletionTime deletionTime;",
      "right" : "private final DeletionTime deletionTime;",
      "info" : "FieldDeclaration[1828-1868]:FieldDeclaration[1828-1868]"
    }, {
      "left" : "private final Mutation mutation;",
      "right" : "private final Mutation mutation;",
      "info" : "FieldDeclaration[1874-1906]:FieldDeclaration[1874-1906]"
    }, {
      "left" : "private Row.Builder regularBuilder;",
      "right" : "private Row.Builder regularBuilder;",
      "info" : "FieldDeclaration[1912-1947]:FieldDeclaration[1912-1947]"
    }, {
      "left" : "private Row.Builder staticBuilder;",
      "right" : "private Row.Builder staticBuilder;",
      "info" : "FieldDeclaration[1952-1986]:FieldDeclaration[1952-1986]"
    }, {
      "left" : "private boolean useRowMarker = true;",
      "right" : "private boolean useRowMarker = true;",
      "info" : "FieldDeclaration[1992-2028]:FieldDeclaration[1992-2028]"
    }, {
      "left" : "private RowUpdateBuilder(PartitionUpdate update, long timestamp, int ttl, int localDeletionTime, Mutation mutation)",
      "right" : "private RowUpdateBuilder(PartitionUpdate update, long timestamp, int ttl, int localDeletionTime, Mutation mutation)",
      "info" : "MethodDeclaration[2034-2708]:MethodDeclaration[2034-2708]"
    }, {
      "left" : "private RowUpdateBuilder(PartitionUpdate update, long timestamp, int ttl, Mutation mutation)",
      "right" : "private RowUpdateBuilder(PartitionUpdate update, long timestamp, int ttl, Mutation mutation)",
      "info" : "MethodDeclaration[2714-2894]:MethodDeclaration[2714-2894]"
    }, {
      "left" : "private void startRow(Clustering clustering)",
      "right" : "private void startRow(Clustering clustering)",
      "info" : "MethodDeclaration[2900-3570]:MethodDeclaration[2900-3570]"
    }, {
      "left" : "private Row.Builder builder()",
      "right" : "private Row.Builder builder()",
      "info" : "MethodDeclaration[3576-4078]:MethodDeclaration[3576-4078]"
    }, {
      "left" : "private Row.Builder staticBuilder()",
      "right" : "private Row.Builder staticBuilder()",
      "info" : "MethodDeclaration[4084-4524]:MethodDeclaration[4084-4524]"
    }, {
      "left" : "private Row.Builder builder(ColumnDefinition c)",
      "right" : "private Row.Builder builder(ColumnDefinition c)",
      "info" : "MethodDeclaration[4530-4648]:MethodDeclaration[4530-4648]"
    }, {
      "left" : "public RowUpdateBuilder(CFMetaData metadata, long timestamp, Object partitionKey)",
      "right" : "public RowUpdateBuilder(CFMetaData metadata, long timestamp, Object partitionKey)",
      "info" : "MethodDeclaration[4654-4824]:MethodDeclaration[4654-4824]"
    }, {
      "left" : "public RowUpdateBuilder(CFMetaData metadata, int localDeletionTime, long timestamp, Object partitionKey)",
      "right" : "public RowUpdateBuilder(CFMetaData metadata, int localDeletionTime, long timestamp, Object partitionKey)",
      "info" : "MethodDeclaration[4830-5047]:MethodDeclaration[4830-5047]"
    }, {
      "left" : "public RowUpdateBuilder(CFMetaData metadata, long timestamp, int ttl, Object partitionKey)",
      "right" : "public RowUpdateBuilder(CFMetaData metadata, long timestamp, int ttl, Object partitionKey)",
      "info" : "MethodDeclaration[5053-5237]:MethodDeclaration[5053-5237]"
    }, {
      "left" : "public RowUpdateBuilder(CFMetaData metadata, int localDeletionTime, long timestamp, int ttl, Object partitionKey)",
      "right" : "public RowUpdateBuilder(CFMetaData metadata, int localDeletionTime, long timestamp, int ttl, Object partitionKey)",
      "info" : "MethodDeclaration[5243-5519]:MethodDeclaration[5243-5519]"
    }, {
      "left" : "public RowUpdateBuilder(CFMetaData metadata, long timestamp, Mutation mutation)",
      "right" : "public RowUpdateBuilder(CFMetaData metadata, long timestamp, Mutation mutation)",
      "info" : "MethodDeclaration[5525-5682]:MethodDeclaration[5525-5682]"
    }, {
      "left" : "public RowUpdateBuilder(CFMetaData metadata, long timestamp, int ttl, Mutation mutation)",
      "right" : "public RowUpdateBuilder(CFMetaData metadata, long timestamp, int ttl, Mutation mutation)",
      "info" : "MethodDeclaration[5688-5858]:MethodDeclaration[5688-5858]"
    }, {
      "left" : "public RowUpdateBuilder(PartitionUpdate update, long timestamp, int ttl)",
      "right" : "public RowUpdateBuilder(PartitionUpdate update, long timestamp, int ttl)",
      "info" : "MethodDeclaration[5864-5992]:MethodDeclaration[5864-5992]"
    }, {
      "left" : "public RowUpdateBuilder noRowMarker()",
      "right" : "public RowUpdateBuilder noRowMarker()",
      "info" : "MethodDeclaration[6066-6171]:MethodDeclaration[6066-6171]"
    }, {
      "left" : "public RowUpdateBuilder clustering(Object... clusteringValues)",
      "right" : "public RowUpdateBuilder clustering(Object... clusteringValues)",
      "info" : "MethodDeclaration[6177-6610]:MethodDeclaration[6177-6610]"
    }, {
      "left" : "public Mutation build()",
      "right" : "public Mutation build()",
      "info" : "MethodDeclaration[6616-6833]:MethodDeclaration[6616-6833]"
    }, {
      "left" : "public PartitionUpdate buildUpdate()",
      "right" : "public PartitionUpdate buildUpdate()",
      "info" : "MethodDeclaration[6839-6927]:MethodDeclaration[6839-6927]"
    }, {
      "left" : "private static DecoratedKey makeKey(CFMetaData metadata, Object... partitionKey)",
      "right" : "private static DecoratedKey makeKey(CFMetaData metadata, Object... partitionKey)",
      "info" : "MethodDeclaration[8596-9013]:MethodDeclaration[8910-9327]"
    }, {
      "left" : "private static PartitionUpdate getOrAdd(CFMetaData metadata, Mutation mutation)",
      "right" : "private static PartitionUpdate getOrAdd(CFMetaData metadata, Mutation mutation)",
      "info" : "MethodDeclaration[9019-9357]:MethodDeclaration[9333-9671]"
    }, {
      "left" : "public RowUpdateBuilder resetCollection(String columnName)",
      "right" : "public RowUpdateBuilder resetCollection(String columnName)",
      "info" : "MethodDeclaration[9363-9909]:MethodDeclaration[9677-10223]"
    }, {
      "left" : "public RowUpdateBuilder addRangeTombstone(RangeTombstone rt)",
      "right" : "public RowUpdateBuilder addRangeTombstone(RangeTombstone rt)",
      "info" : "MethodDeclaration[9915-10032]:MethodDeclaration[10229-10346]"
    }, {
      "left" : "public RowUpdateBuilder addRangeTombstone(Slice slice)",
      "right" : "public RowUpdateBuilder addRangeTombstone(Slice slice)",
      "info" : "MethodDeclaration[10038-10179]:MethodDeclaration[10352-10493]"
    }, {
      "left" : "public RowUpdateBuilder addRangeTombstone(Object start, Object end)",
      "right" : "public RowUpdateBuilder addRangeTombstone(Object start, Object end)",
      "info" : "MethodDeclaration[10185-10436]:MethodDeclaration[10499-10750]"
    }, {
      "left" : "public RowUpdateBuilder add(String columnName, Object value)",
      "right" : "public RowUpdateBuilder add(String columnName, Object value)",
      "info" : "MethodDeclaration[10442-10663]:MethodDeclaration[10756-10977]"
    }, {
      "left" : "private Cell makeCell(ColumnDefinition c, ByteBuffer value, CellPath path)",
      "right" : "private Cell makeCell(ColumnDefinition c, ByteBuffer value, CellPath path)",
      "info" : "MethodDeclaration[10669-11035]:MethodDeclaration[10983-11349]"
    }, {
      "left" : "public RowUpdateBuilder add(ColumnDefinition columnDefinition, Object value)",
      "right" : "public RowUpdateBuilder add(ColumnDefinition columnDefinition, Object value)",
      "info" : "MethodDeclaration[11041-11474]:MethodDeclaration[11355-11788]"
    }, {
      "left" : "public RowUpdateBuilder delete(String columnName)",
      "right" : "public RowUpdateBuilder delete(String columnName)",
      "info" : "MethodDeclaration[11480-11686]:MethodDeclaration[11794-12000]"
    }, {
      "left" : "public RowUpdateBuilder delete(ColumnDefinition columnDefinition)",
      "right" : "public RowUpdateBuilder delete(ColumnDefinition columnDefinition)",
      "info" : "MethodDeclaration[11692-11813]:MethodDeclaration[12006-12127]"
    }, {
      "left" : "private static ByteBuffer bb(Object value, AbstractType<?> type)",
      "right" : "private static ByteBuffer bb(Object value, AbstractType<?> type)",
      "info" : "MethodDeclaration[11819-12380]:MethodDeclaration[12133-12694]"
    }, {
      "left" : "public RowUpdateBuilder map(String columnName, Map<?, ?> map)",
      "right" : "public RowUpdateBuilder map(String columnName, Map<?, ?> map)",
      "info" : "MethodDeclaration[12386-12641]:MethodDeclaration[12700-12955]"
    }, {
      "left" : "public RowUpdateBuilder set(String columnName, Set<?> set)",
      "right" : "public RowUpdateBuilder set(String columnName, Set<?> set)",
      "info" : "MethodDeclaration[12647-12856]:MethodDeclaration[12961-13170]"
    }, {
      "left" : "public RowUpdateBuilder addMapEntry(String columnName, Object key, Object value)",
      "right" : "public RowUpdateBuilder addMapEntry(String columnName, Object key, Object value)",
      "info" : "MethodDeclaration[12862-13431]:MethodDeclaration[13176-13745]"
    }, {
      "left" : "public RowUpdateBuilder addListEntry(String columnName, Object value)",
      "right" : "public RowUpdateBuilder addListEntry(String columnName, Object value)",
      "info" : "MethodDeclaration[13437-13974]:MethodDeclaration[13751-14288]"
    }, {
      "left" : "public RowUpdateBuilder addSetEntry(String columnName, Object value)",
      "right" : "public RowUpdateBuilder addSetEntry(String columnName, Object value)",
      "info" : "MethodDeclaration[13980-14502]:MethodDeclaration[14294-14816]"
    }, {
      "left" : "private ColumnDefinition getDefinition(String name)",
      "right" : "private ColumnDefinition getDefinition(String name)",
      "info" : "MethodDeclaration[14508-14659]:MethodDeclaration[14822-14973]"
    }, {
      "left" : "public UnfilteredRowIterator unfilteredIterator()",
      "right" : "public UnfilteredRowIterator unfilteredIterator()",
      "info" : "MethodDeclaration[14665-14770]:MethodDeclaration[14979-15084]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2154-2708]:Block[2154-2708]"
    }, {
      "left" : "this.update = update;",
      "right" : "this.update = update;",
      "info" : "ExpressionStatement[2164-2185]:ExpressionStatement[2164-2185]"
    }, {
      "left" : "this.timestamp = timestamp;",
      "right" : "this.timestamp = timestamp;",
      "info" : "ExpressionStatement[2195-2222]:ExpressionStatement[2195-2222]"
    }, {
      "left" : "this.ttl = ttl;",
      "right" : "this.ttl = ttl;",
      "info" : "ExpressionStatement[2231-2246]:ExpressionStatement[2231-2246]"
    }, {
      "left" : "this.localDeletionTime = localDeletionTime;",
      "right" : "this.localDeletionTime = localDeletionTime;",
      "info" : "ExpressionStatement[2255-2298]:ExpressionStatement[2255-2298]"
    }, {
      "left" : "this.deletionTime = new DeletionTime(timestamp, localDeletionTime);",
      "right" : "this.deletionTime = new DeletionTime(timestamp, localDeletionTime);",
      "info" : "ExpressionStatement[2307-2374]:ExpressionStatement[2307-2374]"
    }, {
      "left" : "this.mutation = mutation == null ? new Mutation(update.metadata().ksName, update.partitionKey()).add(update) : mutation;",
      "right" : "this.mutation = mutation == null ? new Mutation(update.metadata().ksName, update.partitionKey()).add(update) : mutation;",
      "info" : "ExpressionStatement[2582-2702]:ExpressionStatement[2582-2702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2811-2894]:Block[2811-2894]"
    }, {
      "left" : "this(update, timestamp, ttl, FBUtilities.nowInSeconds(), mutation);",
      "right" : "this(update, timestamp, ttl, FBUtilities.nowInSeconds(), mutation);",
      "info" : "ConstructorInvocation[2821-2888]:ConstructorInvocation[2821-2888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2949-3570]:Block[2949-3570]"
    }, {
      "left" : "assert staticBuilder == null : \"Cannot update both static and non-static columns with the same RowUpdateBuilder object\";",
      "right" : "assert staticBuilder == null : \"Cannot update both static and non-static columns with the same RowUpdateBuilder object\";",
      "info" : "AssertStatement[2959-3079]:AssertStatement[2959-3079]"
    }, {
      "left" : "assert regularBuilder == null : \"Cannot add the clustering twice to the same row\";",
      "right" : "assert regularBuilder == null : \"Cannot add the clustering twice to the same row\";",
      "info" : "AssertStatement[3088-3170]:AssertStatement[3088-3170]"
    }, {
      "left" : "regularBuilder = ArrayBackedRow.unsortedBuilder(update.columns().regulars, FBUtilities.nowInSeconds());",
      "right" : "regularBuilder = ArrayBackedRow.unsortedBuilder(update.columns().regulars, FBUtilities.nowInSeconds());",
      "info" : "ExpressionStatement[3180-3283]:ExpressionStatement[3180-3283]"
    }, {
      "left" : "regularBuilder.newRow(clustering);",
      "right" : "regularBuilder.newRow(clustering);",
      "info" : "ExpressionStatement[3292-3326]:ExpressionStatement[3292-3326]"
    }, {
      "left" : "if (update.metadata().isCQLTable() && useRowMarker)",
      "right" : "if (update.metadata().isCQLTable() && useRowMarker)",
      "info" : "IfStatement[3384-3564]:IfStatement[3384-3564]"
    }, {
      "left" : "regularBuilder.addPrimaryKeyLivenessInfo(LivenessInfo.create(update.metadata(), timestamp, ttl, localDeletionTime));",
      "right" : "regularBuilder.addPrimaryKeyLivenessInfo(LivenessInfo.create(update.metadata(), timestamp, ttl, localDeletionTime));",
      "info" : "ExpressionStatement[3448-3564]:ExpressionStatement[3448-3564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3610-4078]:Block[3610-4078]"
    }, {
      "left" : "assert staticBuilder == null : \"Cannot update both static and non-static columns with the same RowUpdateBuilder object\";",
      "right" : "assert staticBuilder == null : \"Cannot update both static and non-static columns with the same RowUpdateBuilder object\";",
      "info" : "AssertStatement[3620-3740]:AssertStatement[3620-3740]"
    }, {
      "left" : "if (regularBuilder == null)",
      "right" : "if (regularBuilder == null)",
      "info" : "IfStatement[3749-4041]:IfStatement[3749-4041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3785-4041]:Block[3785-4041]"
    }, {
      "left" : "assert update.metadata().comparator.size() == 0 : \"Missing call to clustering()\";",
      "right" : "assert update.metadata().comparator.size() == 0 : \"Missing call to clustering()\";",
      "info" : "AssertStatement[3910-3991]:AssertStatement[3910-3991]"
    }, {
      "left" : "startRow(Clustering.EMPTY);",
      "right" : "startRow(Clustering.EMPTY);",
      "info" : "ExpressionStatement[4004-4031]:ExpressionStatement[4004-4031]"
    }, {
      "left" : "return regularBuilder;",
      "right" : "return regularBuilder;",
      "info" : "ReturnStatement[4050-4072]:ReturnStatement[4050-4072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4124-4524]:Block[4124-4524]"
    }, {
      "left" : "assert regularBuilder == null : \"Cannot update both static and non-static columns with the same RowUpdateBuilder object\";",
      "right" : "assert regularBuilder == null : \"Cannot update both static and non-static columns with the same RowUpdateBuilder object\";",
      "info" : "AssertStatement[4134-4255]:AssertStatement[4134-4255]"
    }, {
      "left" : "if (staticBuilder == null)",
      "right" : "if (staticBuilder == null)",
      "info" : "IfStatement[4264-4488]:IfStatement[4264-4488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4299-4488]:Block[4299-4488]"
    }, {
      "left" : "staticBuilder = ArrayBackedRow.unsortedBuilder(update.columns().statics, FBUtilities.nowInSeconds());",
      "right" : "staticBuilder = ArrayBackedRow.unsortedBuilder(update.columns().statics, FBUtilities.nowInSeconds());",
      "info" : "ExpressionStatement[4313-4414]:ExpressionStatement[4313-4414]"
    }, {
      "left" : "staticBuilder.newRow(Clustering.STATIC_CLUSTERING);",
      "right" : "staticBuilder.newRow(Clustering.STATIC_CLUSTERING);",
      "info" : "ExpressionStatement[4427-4478]:ExpressionStatement[4427-4478]"
    }, {
      "left" : "return staticBuilder;",
      "right" : "return staticBuilder;",
      "info" : "ReturnStatement[4497-4518]:ReturnStatement[4497-4518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4582-4648]:Block[4582-4648]"
    }, {
      "left" : "return c.isStatic() ? staticBuilder() : builder();",
      "right" : "return c.isStatic() ? staticBuilder() : builder();",
      "info" : "ReturnStatement[4592-4642]:ReturnStatement[4592-4642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4740-4824]:Block[4740-4824]"
    }, {
      "left" : "this(metadata, FBUtilities.nowInSeconds(), timestamp, partitionKey);",
      "right" : "this(metadata, FBUtilities.nowInSeconds(), timestamp, partitionKey);",
      "info" : "ConstructorInvocation[4750-4818]:ConstructorInvocation[4750-4818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4939-5047]:Block[4939-5047]"
    }, {
      "left" : "this(metadata, localDeletionTime, timestamp, metadata.getDefaultTimeToLive(), partitionKey);",
      "right" : "this(metadata, localDeletionTime, timestamp, metadata.getDefaultTimeToLive(), partitionKey);",
      "info" : "ConstructorInvocation[4949-5041]:ConstructorInvocation[4949-5041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5148-5237]:Block[5148-5237]"
    }, {
      "left" : "this(metadata, FBUtilities.nowInSeconds(), timestamp, ttl, partitionKey);",
      "right" : "this(metadata, FBUtilities.nowInSeconds(), timestamp, ttl, partitionKey);",
      "info" : "ConstructorInvocation[5158-5231]:ConstructorInvocation[5158-5231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5361-5519]:Block[5361-5519]"
    }, {
      "left" : "this(new PartitionUpdate(metadata, makeKey(metadata, partitionKey), metadata.partitionColumns(), 1), timestamp, ttl, localDeletionTime, null);",
      "right" : "this(new PartitionUpdate(metadata, makeKey(metadata, partitionKey), metadata.partitionColumns(), 1), timestamp, ttl, localDeletionTime, null);",
      "info" : "ConstructorInvocation[5371-5513]:ConstructorInvocation[5371-5513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5609-5682]:Block[5609-5682]"
    }, {
      "left" : "this(metadata, timestamp, LivenessInfo.NO_TTL, mutation);",
      "right" : "this(metadata, timestamp, LivenessInfo.NO_TTL, mutation);",
      "info" : "ConstructorInvocation[5619-5676]:ConstructorInvocation[5619-5676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5781-5858]:Block[5781-5858]"
    }, {
      "left" : "this(getOrAdd(metadata, mutation), timestamp, ttl, mutation);",
      "right" : "this(getOrAdd(metadata, mutation), timestamp, ttl, mutation);",
      "info" : "ConstructorInvocation[5791-5852]:ConstructorInvocation[5791-5852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5941-5992]:Block[5941-5992]"
    }, {
      "left" : "this(update, timestamp, ttl, null);",
      "right" : "this(update, timestamp, ttl, null);",
      "info" : "ConstructorInvocation[5951-5986]:ConstructorInvocation[5951-5986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6108-6171]:Block[6108-6171]"
    }, {
      "left" : "this.useRowMarker = false;",
      "right" : "this.useRowMarker = false;",
      "info" : "ExpressionStatement[6118-6144]:ExpressionStatement[6118-6144]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[6153-6165]:ReturnStatement[6153-6165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6244-6610]:Block[6244-6610]"
    }, {
      "left" : "assert clusteringValues.length == update.metadata().comparator.size()\n             : \"Invalid clustering values length. Expected: \" + update.metadata().comparator.size() + \" got: \" + clusteringValues.length;",
      "right" : "assert clusteringValues.length == update.metadata().comparator.size()\n             : \"Invalid clustering values length. Expected: \" + update.metadata().comparator.size() + \" got: \" + clusteringValues.length;",
      "info" : "AssertStatement[6254-6461]:AssertStatement[6254-6461]"
    }, {
      "left" : "startRow(clusteringValues.length == 0 ? Clustering.EMPTY : update.metadata().comparator.make(clusteringValues));",
      "right" : "startRow(clusteringValues.length == 0 ? Clustering.EMPTY : update.metadata().comparator.make(clusteringValues));",
      "info" : "ExpressionStatement[6471-6583]:ExpressionStatement[6471-6583]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[6592-6604]:ReturnStatement[6592-6604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6644-6833]:Block[6644-6833]"
    }, {
      "left" : "Row.Builder builder = regularBuilder == null ? staticBuilder : regularBuilder;",
      "right" : "Row.Builder builder = regularBuilder == null ? staticBuilder : regularBuilder;",
      "info" : "VariableDeclarationStatement[6654-6732]:VariableDeclarationStatement[6654-6732]"
    }, {
      "left" : "if (builder != null)",
      "right" : "if (builder != null)",
      "info" : "IfStatement[6741-6802]:IfStatement[6741-6802]"
    }, {
      "left" : "update.add(builder.build());",
      "right" : "update.add(builder.build());",
      "info" : "ExpressionStatement[6774-6802]:ExpressionStatement[6774-6802]"
    }, {
      "left" : "return mutation;",
      "right" : "return mutation;",
      "info" : "ReturnStatement[6811-6827]:ReturnStatement[6811-6827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6880-6927]:Block[6880-6927]"
    }, {
      "left" : "build();",
      "right" : "build();",
      "info" : "ExpressionStatement[6890-6898]:ExpressionStatement[6890-6898]"
    }, {
      "left" : "return update;",
      "right" : "return update;",
      "info" : "ReturnStatement[6907-6921]:ReturnStatement[6907-6921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8681-9013]:Block[8995-9327]"
    }, {
      "left" : "if (partitionKey.length == 1 && partitionKey[0] instanceof DecoratedKey)",
      "right" : "if (partitionKey.length == 1 && partitionKey[0] instanceof DecoratedKey)",
      "info" : "IfStatement[8691-8813]:IfStatement[9005-9127]"
    }, {
      "left" : "return (DecoratedKey)partitionKey[0];",
      "right" : "return (DecoratedKey)partitionKey[0];",
      "info" : "ReturnStatement[8776-8813]:ReturnStatement[9090-9127]"
    }, {
      "left" : "ByteBuffer key = CFMetaData.serializePartitionKey(metadata.getKeyValidatorAsClusteringComparator().make(partitionKey));",
      "right" : "ByteBuffer key = CFMetaData.serializePartitionKey(metadata.getKeyValidatorAsClusteringComparator().make(partitionKey));",
      "info" : "VariableDeclarationStatement[8823-8942]:VariableDeclarationStatement[9137-9256]"
    }, {
      "left" : "return StorageService.getPartitioner().decorateKey(key);",
      "right" : "return StorageService.getPartitioner().decorateKey(key);",
      "info" : "ReturnStatement[8951-9007]:ReturnStatement[9265-9321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9103-9357]:Block[9417-9671]"
    }, {
      "left" : "PartitionUpdate upd = mutation.get(metadata);",
      "right" : "PartitionUpdate upd = mutation.get(metadata);",
      "info" : "VariableDeclarationStatement[9113-9158]:VariableDeclarationStatement[9427-9472]"
    }, {
      "left" : "if (upd == null)",
      "right" : "if (upd == null)",
      "info" : "IfStatement[9167-9331]:IfStatement[9481-9645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9192-9331]:Block[9506-9645]"
    }, {
      "left" : "upd = new PartitionUpdate(metadata, mutation.key(), metadata.partitionColumns(), 1);",
      "right" : "upd = new PartitionUpdate(metadata, mutation.key(), metadata.partitionColumns(), 1);",
      "info" : "ExpressionStatement[9206-9290]:ExpressionStatement[9520-9604]"
    }, {
      "left" : "mutation.add(upd);",
      "right" : "mutation.add(upd);",
      "info" : "ExpressionStatement[9303-9321]:ExpressionStatement[9617-9635]"
    }, {
      "left" : "return upd;",
      "right" : "return upd;",
      "info" : "ReturnStatement[9340-9351]:ReturnStatement[9654-9665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9426-9909]:Block[9740-10223]"
    }, {
      "left" : "ColumnDefinition c = getDefinition(columnName);",
      "right" : "ColumnDefinition c = getDefinition(columnName);",
      "info" : "VariableDeclarationStatement[9436-9483]:VariableDeclarationStatement[9750-9797]"
    }, {
      "left" : "assert c != null : \"Cannot find column \" + columnName;",
      "right" : "assert c != null : \"Cannot find column \" + columnName;",
      "info" : "AssertStatement[9492-9546]:AssertStatement[9806-9860]"
    }, {
      "left" : "assert c.isStatic() || update.metadata().comparator.size() == 0 || regularBuilder != null : \"Cannot set non static column \" + c + \" since no clustering has been provided\";",
      "right" : "assert c.isStatic() || update.metadata().comparator.size() == 0 || regularBuilder != null : \"Cannot set non static column \" + c + \" since no clustering has been provided\";",
      "info" : "AssertStatement[9555-9726]:AssertStatement[9869-10040]"
    }, {
      "left" : "assert c.type.isCollection() && c.type.isMultiCell();",
      "right" : "assert c.type.isCollection() && c.type.isMultiCell();",
      "info" : "AssertStatement[9735-9788]:AssertStatement[10049-10102]"
    }, {
      "left" : "builder(c).addComplexDeletion(c, new DeletionTime(timestamp - 1, localDeletionTime));",
      "right" : "builder(c).addComplexDeletion(c, new DeletionTime(timestamp - 1, localDeletionTime));",
      "info" : "ExpressionStatement[9797-9882]:ExpressionStatement[10111-10196]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[9891-9903]:ReturnStatement[10205-10217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9980-10032]:Block[10294-10346]"
    }, {
      "left" : "update.add(rt);",
      "right" : "update.add(rt);",
      "info" : "ExpressionStatement[9990-10005]:ExpressionStatement[10304-10319]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[10014-10026]:ReturnStatement[10328-10340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10097-10179]:Block[10411-10493]"
    }, {
      "left" : "return addRangeTombstone(new RangeTombstone(slice, deletionTime));",
      "right" : "return addRangeTombstone(new RangeTombstone(slice, deletionTime));",
      "info" : "ReturnStatement[10107-10173]:ReturnStatement[10421-10487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10257-10436]:Block[10571-10750]"
    }, {
      "left" : "ClusteringComparator cmp = update.metadata().comparator;",
      "right" : "ClusteringComparator cmp = update.metadata().comparator;",
      "info" : "VariableDeclarationStatement[10267-10323]:VariableDeclarationStatement[10581-10637]"
    }, {
      "left" : "Slice slice = Slice.make(cmp.make(start), cmp.make(end));",
      "right" : "Slice slice = Slice.make(cmp.make(start), cmp.make(end));",
      "info" : "VariableDeclarationStatement[10332-10389]:VariableDeclarationStatement[10646-10703]"
    }, {
      "left" : "return addRangeTombstone(slice);",
      "right" : "return addRangeTombstone(slice);",
      "info" : "ReturnStatement[10398-10430]:ReturnStatement[10712-10744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10507-10663]:Block[10821-10977]"
    }, {
      "left" : "ColumnDefinition c = getDefinition(columnName);",
      "right" : "ColumnDefinition c = getDefinition(columnName);",
      "info" : "VariableDeclarationStatement[10517-10564]:VariableDeclarationStatement[10831-10878]"
    }, {
      "left" : "assert c != null : \"Cannot find column \" + columnName;",
      "right" : "assert c != null : \"Cannot find column \" + columnName;",
      "info" : "AssertStatement[10573-10627]:AssertStatement[10887-10941]"
    }, {
      "left" : "return add(c, value);",
      "right" : "return add(c, value);",
      "info" : "ReturnStatement[10636-10657]:ReturnStatement[10950-10971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10748-11035]:Block[11062-11349]"
    }, {
      "left" : "return value == null\n             ? BufferCell.tombstone(c, timestamp, localDeletionTime)\n             : (ttl == LivenessInfo.NO_TTL ? BufferCell.live(update.metadata(), c, timestamp, value, path) : BufferCell.expiring(c, timestamp, ttl, localDeletionTime, value, path));",
      "right" : "return value == null\n             ? BufferCell.tombstone(c, timestamp, localDeletionTime)\n             : (ttl == LivenessInfo.NO_TTL ? BufferCell.live(update.metadata(), c, timestamp, value, path) : BufferCell.expiring(c, timestamp, ttl, localDeletionTime, value, path));",
      "info" : "ReturnStatement[10758-11029]:ReturnStatement[11072-11343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11122-11474]:Block[11436-11788]"
    }, {
      "left" : "assert columnDefinition.isStatic() || update.metadata().comparator.size() == 0 || regularBuilder != null : \"Cannot set non static column \" + columnDefinition + \" since no clustering hasn't been provided\";",
      "right" : "assert columnDefinition.isStatic() || update.metadata().comparator.size() == 0 || regularBuilder != null : \"Cannot set non static column \" + columnDefinition + \" since no clustering hasn't been provided\";",
      "info" : "AssertStatement[11132-11336]:AssertStatement[11446-11650]"
    }, {
      "left" : "builder(columnDefinition).addCell(makeCell(columnDefinition, bb(value, columnDefinition.type), null));",
      "right" : "builder(columnDefinition).addCell(makeCell(columnDefinition, bb(value, columnDefinition.type), null));",
      "info" : "ExpressionStatement[11345-11447]:ExpressionStatement[11659-11761]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[11456-11468]:ReturnStatement[11770-11782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11534-11686]:Block[11848-12000]"
    }, {
      "left" : "ColumnDefinition c = getDefinition(columnName);",
      "right" : "ColumnDefinition c = getDefinition(columnName);",
      "info" : "VariableDeclarationStatement[11544-11591]:VariableDeclarationStatement[11858-11905]"
    }, {
      "left" : "assert c != null : \"Cannot find column \" + columnName;",
      "right" : "assert c != null : \"Cannot find column \" + columnName;",
      "info" : "AssertStatement[11600-11654]:AssertStatement[11914-11968]"
    }, {
      "left" : "return delete(c);",
      "right" : "return delete(c);",
      "info" : "ReturnStatement[11663-11680]:ReturnStatement[11977-11994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11762-11813]:Block[12076-12127]"
    }, {
      "left" : "return add(columnDefinition, null);",
      "right" : "return add(columnDefinition, null);",
      "info" : "ReturnStatement[11772-11807]:ReturnStatement[12086-12121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11888-12380]:Block[12202-12694]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[11898-11941]:IfStatement[12212-12255]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11929-11941]:ReturnStatement[12243-12255]"
    }, {
      "left" : "if (value instanceof ByteBuffer)",
      "right" : "if (value instanceof ByteBuffer)",
      "info" : "IfStatement[11951-12021]:IfStatement[12265-12335]"
    }, {
      "left" : "return (ByteBuffer)value;",
      "right" : "return (ByteBuffer)value;",
      "info" : "ReturnStatement[11996-12021]:ReturnStatement[12310-12335]"
    }, {
      "left" : "if (type.isCounter())",
      "right" : "if (type.isCounter())",
      "info" : "IfStatement[12031-12320]:IfStatement[12345-12634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12061-12320]:Block[12375-12634]"
    }, {
      "left" : "assert value instanceof Long : \"Attempted to adjust Counter cell with non-long value.\";",
      "right" : "assert value instanceof Long : \"Attempted to adjust Counter cell with non-long value.\";",
      "info" : "AssertStatement[12124-12211]:AssertStatement[12438-12525]"
    }, {
      "left" : "return CounterContext.instance().createGlobal(CounterId.getLocalId(), 1, (Long)value);",
      "right" : "return CounterContext.instance().createGlobal(CounterId.getLocalId(), 1, (Long)value);",
      "info" : "ReturnStatement[12224-12310]:ReturnStatement[12538-12624]"
    }, {
      "left" : "return ((AbstractType)type).decompose(value);",
      "right" : "return ((AbstractType)type).decompose(value);",
      "info" : "ReturnStatement[12329-12374]:ReturnStatement[12643-12688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12452-12641]:Block[12766-12955]"
    }, {
      "left" : "resetCollection(columnName);",
      "right" : "resetCollection(columnName);",
      "info" : "ExpressionStatement[12462-12490]:ExpressionStatement[12776-12804]"
    }, {
      "left" : "for (Map.Entry<?, ?> entry : map.entrySet())\n            addMapEntry(columnName, entry.getKey(), entry.getValue());",
      "right" : "for (Map.Entry<?, ?> entry : map.entrySet())\n            addMapEntry(columnName, entry.getKey(), entry.getValue());",
      "info" : "EnhancedForStatement[12499-12614]:EnhancedForStatement[12813-12928]"
    }, {
      "left" : "addMapEntry(columnName, entry.getKey(), entry.getValue());",
      "right" : "addMapEntry(columnName, entry.getKey(), entry.getValue());",
      "info" : "ExpressionStatement[12556-12614]:ExpressionStatement[12870-12928]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[12623-12635]:ReturnStatement[12937-12949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12710-12856]:Block[13024-13170]"
    }, {
      "left" : "resetCollection(columnName);",
      "right" : "resetCollection(columnName);",
      "info" : "ExpressionStatement[12720-12748]:ExpressionStatement[13034-13062]"
    }, {
      "left" : "for (Object element : set)\n            addSetEntry(columnName, element);",
      "right" : "for (Object element : set)\n            addSetEntry(columnName, element);",
      "info" : "EnhancedForStatement[12757-12829]:EnhancedForStatement[13071-13143]"
    }, {
      "left" : "addSetEntry(columnName, element);",
      "right" : "addSetEntry(columnName, element);",
      "info" : "ExpressionStatement[12796-12829]:ExpressionStatement[13110-13143]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[12838-12850]:ReturnStatement[13152-13164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12947-13431]:Block[13261-13745]"
    }, {
      "left" : "ColumnDefinition c = getDefinition(columnName);",
      "right" : "ColumnDefinition c = getDefinition(columnName);",
      "info" : "VariableDeclarationStatement[12957-13004]:VariableDeclarationStatement[13271-13318]"
    }, {
      "left" : "assert c.isStatic() || update.metadata().comparator.size() == 0 || regularBuilder != null : \"Cannot set non static column \" + c + \" since no clustering has been provided\";",
      "right" : "assert c.isStatic() || update.metadata().comparator.size() == 0 || regularBuilder != null : \"Cannot set non static column \" + c + \" since no clustering has been provided\";",
      "info" : "AssertStatement[13013-13184]:AssertStatement[13327-13498]"
    }, {
      "left" : "assert c.type instanceof MapType && c.type.isMultiCell();",
      "right" : "assert c.type instanceof MapType && c.type.isMultiCell();",
      "info" : "AssertStatement[13193-13250]:AssertStatement[13507-13564]"
    }, {
      "left" : "MapType mt = (MapType)c.type;",
      "right" : "MapType mt = (MapType)c.type;",
      "info" : "VariableDeclarationStatement[13259-13288]:VariableDeclarationStatement[13573-13602]"
    }, {
      "left" : "builder(c).addCell(makeCell(c, bb(value, mt.getValuesType()), CellPath.create(bb(key, mt.getKeysType()))));",
      "right" : "builder(c).addCell(makeCell(c, bb(value, mt.getValuesType()), CellPath.create(bb(key, mt.getKeysType()))));",
      "info" : "ExpressionStatement[13297-13404]:ExpressionStatement[13611-13718]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[13413-13425]:ReturnStatement[13727-13739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13511-13974]:Block[13825-14288]"
    }, {
      "left" : "ColumnDefinition c = getDefinition(columnName);",
      "right" : "ColumnDefinition c = getDefinition(columnName);",
      "info" : "VariableDeclarationStatement[13521-13568]:VariableDeclarationStatement[13835-13882]"
    }, {
      "left" : "assert c.isStatic() || regularBuilder != null : \"Cannot set non static column \" + c + \" since no clustering has been provided\";",
      "right" : "assert c.isStatic() || regularBuilder != null : \"Cannot set non static column \" + c + \" since no clustering has been provided\";",
      "info" : "AssertStatement[13577-13704]:AssertStatement[13891-14018]"
    }, {
      "left" : "assert c.type instanceof ListType && c.type.isMultiCell();",
      "right" : "assert c.type instanceof ListType && c.type.isMultiCell();",
      "info" : "AssertStatement[13713-13771]:AssertStatement[14027-14085]"
    }, {
      "left" : "ListType lt = (ListType)c.type;",
      "right" : "ListType lt = (ListType)c.type;",
      "info" : "VariableDeclarationStatement[13780-13811]:VariableDeclarationStatement[14094-14125]"
    }, {
      "left" : "builder(c).addCell(makeCell(c, bb(value, lt.getElementsType()), CellPath.create(ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes()))));",
      "right" : "builder(c).addCell(makeCell(c, bb(value, lt.getElementsType()), CellPath.create(ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes()))));",
      "info" : "ExpressionStatement[13820-13947]:ExpressionStatement[14134-14261]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[13956-13968]:ReturnStatement[14270-14282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14053-14502]:Block[14367-14816]"
    }, {
      "left" : "ColumnDefinition c = getDefinition(columnName);",
      "right" : "ColumnDefinition c = getDefinition(columnName);",
      "info" : "VariableDeclarationStatement[14063-14110]:VariableDeclarationStatement[14377-14424]"
    }, {
      "left" : "assert c.isStatic() || regularBuilder != null : \"Cannot set non static column \" + c + \" since no clustering has been provided\";",
      "right" : "assert c.isStatic() || regularBuilder != null : \"Cannot set non static column \" + c + \" since no clustering has been provided\";",
      "info" : "AssertStatement[14119-14246]:AssertStatement[14433-14560]"
    }, {
      "left" : "assert c.type instanceof SetType && c.type.isMultiCell();",
      "right" : "assert c.type instanceof SetType && c.type.isMultiCell();",
      "info" : "AssertStatement[14255-14312]:AssertStatement[14569-14626]"
    }, {
      "left" : "SetType st = (SetType)c.type;",
      "right" : "SetType st = (SetType)c.type;",
      "info" : "VariableDeclarationStatement[14321-14350]:VariableDeclarationStatement[14635-14664]"
    }, {
      "left" : "builder(c).addCell(makeCell(c, ByteBufferUtil.EMPTY_BYTE_BUFFER, CellPath.create(bb(value, st.getElementsType()))));",
      "right" : "builder(c).addCell(makeCell(c, ByteBufferUtil.EMPTY_BYTE_BUFFER, CellPath.create(bb(value, st.getElementsType()))));",
      "info" : "ExpressionStatement[14359-14475]:ExpressionStatement[14673-14789]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[14484-14496]:ReturnStatement[14798-14810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14564-14659]:Block[14878-14973]"
    }, {
      "left" : "return update.metadata().getColumnDefinition(new ColumnIdentifier(name, true));",
      "right" : "return update.metadata().getColumnDefinition(new ColumnIdentifier(name, true));",
      "info" : "ReturnStatement[14574-14653]:ReturnStatement[14888-14967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14719-14770]:Block[15033-15084]"
    }, {
      "left" : "return update.unfilteredIterator();",
      "right" : "return update.unfilteredIterator();",
      "info" : "ReturnStatement[14729-14764]:ReturnStatement[15043-15078]"
    } ]
  },
  "interFileMappings" : { }
}