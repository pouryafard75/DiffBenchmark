{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CalcitePlanner",
      "right" : "CalcitePlanner",
      "info" : "TypeDeclaration[10454-132841]:TypeDeclaration[10454-132281]"
    }, {
      "left" : "private final AtomicInteger noColsMissingStats = new AtomicInteger(0);",
      "right" : "private final AtomicInteger noColsMissingStats = new AtomicInteger(0);",
      "info" : "FieldDeclaration[10512-10582]:FieldDeclaration[10512-10582]"
    }, {
      "left" : "private List<FieldSchema> topLevelFieldSchema;",
      "right" : "private List<FieldSchema> topLevelFieldSchema;",
      "info" : "FieldDeclaration[10585-10631]:FieldDeclaration[10585-10631]"
    }, {
      "left" : "private SemanticException semanticException;",
      "right" : "private SemanticException semanticException;",
      "info" : "FieldDeclaration[10634-10678]:FieldDeclaration[10634-10678]"
    }, {
      "left" : "private boolean           runCBO             = true;",
      "right" : "private boolean           runCBO             = true;",
      "info" : "FieldDeclaration[10681-10733]:FieldDeclaration[10681-10733]"
    }, {
      "left" : "public CalcitePlanner(HiveConf conf) throws SemanticException",
      "right" : "public CalcitePlanner(HiveConf conf) throws SemanticException",
      "info" : "MethodDeclaration[10737-10923]:MethodDeclaration[10737-10923]"
    }, {
      "left" : "public void analyzeInternal(ASTNode ast) throws SemanticException",
      "right" : "public void analyzeInternal(ASTNode ast) throws SemanticException",
      "info" : "MethodDeclaration[10927-11192]:MethodDeclaration[10927-11192]"
    }, {
      "left" : "Operator genOPTree(ASTNode ast, PlannerContext plannerCtx) throws SemanticException",
      "right" : "Operator genOPTree(ASTNode ast, PlannerContext plannerCtx) throws SemanticException",
      "info" : "MethodDeclaration[11196-16094]:MethodDeclaration[11196-16094]"
    }, {
      "left" : "boolean canCBOHandleAst(ASTNode ast, QB qb, PreCboCtx cboCtx)",
      "right" : "boolean canCBOHandleAst(ASTNode ast, QB qb, PreCboCtx cboCtx)",
      "info" : "MethodDeclaration[16098-18162]:MethodDeclaration[16098-18162]"
    }, {
      "left" : "static String canHandleQbForCbo(QueryProperties queryProperties, HiveConf conf,\n      boolean topLevelQB, boolean verbose, QB qb)",
      "right" : "static String canHandleQbForCbo(QueryProperties queryProperties, HiveConf conf,\n      boolean topLevelQB, boolean verbose, QB qb)",
      "info" : "MethodDeclaration[18166-20454]:MethodDeclaration[18166-20454]"
    }, {
      "left" : "boolean continueJoinMerge()",
      "right" : "boolean continueJoinMerge()",
      "info" : "MethodDeclaration[20458-20523]:MethodDeclaration[20458-20523]"
    }, {
      "left" : "String fixCtasColumnName(String colName)",
      "right" : "String fixCtasColumnName(String colName)",
      "info" : "MethodDeclaration[20527-20957]:MethodDeclaration[20527-20957]"
    }, {
      "left" : "PreCboCtx",
      "right" : "PreCboCtx",
      "info" : "TypeDeclaration[20961-21919]:TypeDeclaration[20961-21919]"
    }, {
      "left" : "enum : Type",
      "right" : "enum : Type",
      "info" : "EnumDeclaration[21165-21219]:EnumDeclaration[21165-21219]"
    }, {
      "left" : "private ASTNode nodeOfInterest;",
      "right" : "private ASTNode nodeOfInterest;",
      "info" : "FieldDeclaration[21225-21256]:FieldDeclaration[21225-21256]"
    }, {
      "left" : "private Type    type = Type.NONE;",
      "right" : "private Type    type = Type.NONE;",
      "info" : "FieldDeclaration[21261-21294]:FieldDeclaration[21261-21294]"
    }, {
      "left" : "private void set(Type type, ASTNode ast)",
      "right" : "private void set(Type type, ASTNode ast)",
      "info" : "MethodDeclaration[21300-21656]:MethodDeclaration[21300-21656]"
    }, {
      "left" : "void setCTASToken(ASTNode child)",
      "right" : "void setCTASToken(ASTNode child)",
      "info" : "MethodDeclaration[21662-21755]:MethodDeclaration[21662-21755]"
    }, {
      "left" : "void setInsertToken(ASTNode ast, boolean isTmpFileDest)",
      "right" : "void setInsertToken(ASTNode ast, boolean isTmpFileDest)",
      "info" : "MethodDeclaration[21761-21915]:MethodDeclaration[21761-21915]"
    }, {
      "left" : "ASTNode fixUpCtasAndInsertAfterCbo(ASTNode originalAst, ASTNode newAst, PreCboCtx cboCtx)\n      throws SemanticException",
      "right" : "ASTNode fixUpCtasAndInsertAfterCbo(ASTNode originalAst, ASTNode newAst, PreCboCtx cboCtx)\n      throws SemanticException",
      "info" : "MethodDeclaration[21923-23018]:MethodDeclaration[21923-23018]"
    }, {
      "left" : "ASTNode reAnalyzeCtasAfterCbo(ASTNode newAst) throws SemanticException",
      "right" : "ASTNode reAnalyzeCtasAfterCbo(ASTNode newAst) throws SemanticException",
      "info" : "MethodDeclaration[23022-23512]:MethodDeclaration[23022-23512]"
    }, {
      "left" : "ASTSearcher",
      "right" : "ASTSearcher",
      "info" : "TypeDeclaration[23516-24836]:TypeDeclaration[23516-24836]"
    }, {
      "left" : "private final LinkedList<ASTNode> searchQueue = new LinkedList<ASTNode>();",
      "right" : "private final LinkedList<ASTNode> searchQueue = new LinkedList<ASTNode>();",
      "info" : "FieldDeclaration[24030-24104]:FieldDeclaration[24030-24104]"
    }, {
      "left" : "public ASTNode simpleBreadthFirstSearch(ASTNode ast, int... tokens)",
      "right" : "public ASTNode simpleBreadthFirstSearch(ASTNode ast, int... tokens)",
      "info" : "MethodDeclaration[24110-24832]:MethodDeclaration[24110-24832]"
    }, {
      "left" : "private static void replaceASTChild(ASTNode child, ASTNode newChild)",
      "right" : "private static void replaceASTChild(ASTNode child, ASTNode newChild)",
      "info" : "MethodDeclaration[24840-25080]:MethodDeclaration[24840-25080]"
    }, {
      "left" : "ASTNode getOptimizedAST() throws SemanticException",
      "right" : "ASTNode getOptimizedAST() throws SemanticException",
      "info" : "MethodDeclaration[25084-25936]:MethodDeclaration[25084-25936]"
    }, {
      "left" : "Operator getOptimizedHiveOPDag() throws SemanticException",
      "right" : "Operator getOptimizedHiveOPDag() throws SemanticException",
      "info" : "MethodDeclaration[25940-27339]:MethodDeclaration[25940-27339]"
    }, {
      "left" : "private RelNode introduceProjectIfNeeded(RelNode optimizedOptiqPlan)\n      throws CalciteSemanticException",
      "right" : "private RelNode introduceProjectIfNeeded(RelNode optimizedOptiqPlan)\n      throws CalciteSemanticException",
      "info" : "MethodDeclaration[27343-28041]:MethodDeclaration[27343-28041]"
    }, {
      "left" : "private void rethrowCalciteException(Exception e) throws SemanticException",
      "right" : "private void rethrowCalciteException(Exception e) throws SemanticException",
      "info" : "MethodDeclaration[28045-29324]:MethodDeclaration[28045-29324]"
    }, {
      "left" : "ExceptionHelper",
      "right" : "ExceptionHelper",
      "info" : "TypeDeclaration[29328-30512]:TypeDeclaration[29328-30512]"
    }, {
      "left" : "private static final Field CAUSE_FIELD = getField(Throwable.class, \"cause\"),\n        TARGET_FIELD = getField(InvocationTargetException.class, \"target\"),\n        MESSAGE_FIELD = getField(Throwable.class, \"detailMessage\");",
      "right" : "private static final Field CAUSE_FIELD = getField(Throwable.class, \"cause\"),\n        TARGET_FIELD = getField(InvocationTargetException.class, \"target\"),\n        MESSAGE_FIELD = getField(Throwable.class, \"detailMessage\");",
      "info" : "FieldDeclaration[29371-29591]:FieldDeclaration[29371-29591]"
    }, {
      "left" : "private static Field getField(Class<?> clazz, String name)",
      "right" : "private static Field getField(Class<?> clazz, String name)",
      "info" : "MethodDeclaration[29597-29831]:MethodDeclaration[29597-29831]"
    }, {
      "left" : "public static boolean resetCause(Throwable target, Throwable newCause)",
      "right" : "public static boolean resetCause(Throwable target, Throwable newCause)",
      "info" : "MethodDeclaration[29837-30508]:MethodDeclaration[29837-30508]"
    }, {
      "left" : "private boolean isUselessCause(Throwable t)",
      "right" : "private boolean isUselessCause(Throwable t)",
      "info" : "MethodDeclaration[30516-30702]:MethodDeclaration[30516-30702]"
    }, {
      "left" : "private RowResolver genRowResolver(Operator op, QB qb)",
      "right" : "private RowResolver genRowResolver(Operator op, QB qb)",
      "info" : "MethodDeclaration[30706-31319]:MethodDeclaration[30706-31319]"
    }, {
      "left" : "CalcitePlannerAction",
      "right" : "CalcitePlannerAction",
      "info" : "TypeDeclaration[31323-132838]:TypeDeclaration[31323-132278]"
    }, {
      "left" : "private RelOptCluster                                 cluster;",
      "right" : "private RelOptCluster                                 cluster;",
      "info" : "FieldDeclaration[31489-31551]:FieldDeclaration[31489-31551]"
    }, {
      "left" : "private RelOptSchema                                  relOptSchema;",
      "right" : "private RelOptSchema                                  relOptSchema;",
      "info" : "FieldDeclaration[31556-31623]:FieldDeclaration[31556-31623]"
    }, {
      "left" : "private final Map<String, PrunedPartitionList>              partitionCache;",
      "right" : "private final Map<String, PrunedPartitionList>              partitionCache;",
      "info" : "FieldDeclaration[31628-31703]:FieldDeclaration[31628-31703]"
    }, {
      "left" : "LinkedHashMap<RelNode, RowResolver>                   relToHiveRR                   = new LinkedHashMap<RelNode, RowResolver>();",
      "right" : "LinkedHashMap<RelNode, RowResolver>                   relToHiveRR                   = new LinkedHashMap<RelNode, RowResolver>();",
      "info" : "FieldDeclaration[31808-31936]:FieldDeclaration[31808-31936]"
    }, {
      "left" : "LinkedHashMap<RelNode, ImmutableMap<String, Integer>> relToHiveColNameCalcitePosMap = new LinkedHashMap<RelNode, ImmutableMap<String, Integer>>();",
      "right" : "LinkedHashMap<RelNode, ImmutableMap<String, Integer>> relToHiveColNameCalcitePosMap = new LinkedHashMap<RelNode, ImmutableMap<String, Integer>>();",
      "info" : "FieldDeclaration[31941-32087]:FieldDeclaration[31941-32087]"
    }, {
      "left" : "CalcitePlannerAction(Map<String, PrunedPartitionList> partitionCache)",
      "right" : "CalcitePlannerAction(Map<String, PrunedPartitionList> partitionCache)",
      "info" : "MethodDeclaration[32093-32214]:MethodDeclaration[32093-32214]"
    }, {
      "left" : "public RelNode apply(RelOptCluster cluster, RelOptSchema relOptSchema, SchemaPlus rootSchema)",
      "right" : "public RelNode apply(RelOptCluster cluster, RelOptSchema relOptSchema, SchemaPlus rootSchema)",
      "info" : "MethodDeclaration[32220-39530]:MethodDeclaration[32220-38483]"
    }, {
      "left" : "private RelNode applyPreJoinOrderingTransforms(RelNode basePlan, RelMetadataProvider mdProvider)",
      "right" : "private RelNode applyPreJoinOrderingTransforms(RelNode basePlan, RelMetadataProvider mdProvider)",
      "info" : "MethodDeclaration[39536-42839]:MethodDeclaration[38489-41792]"
    }, {
      "left" : "private RelNode hepPlan(RelNode basePlan, boolean followPlanChanges,\n        RelMetadataProvider mdProvider, RelOptRule... rules)",
      "right" : "private RelNode hepPlan(RelNode basePlan, boolean followPlanChanges, RelMetadataProvider mdProvider,\n            HepMatchOrder order, RelOptRule... rules)",
      "info" : "MethodDeclaration[42845-44394]:MethodDeclaration[42257-43834]"
    }, {
      "left" : "private RelNode genUnionLogicalPlan(String unionalias, String leftalias, RelNode leftRel,\n        String rightalias, RelNode rightRel) throws SemanticException",
      "right" : "private RelNode genUnionLogicalPlan(String unionalias, String leftalias, RelNode leftRel,\n        String rightalias, RelNode rightRel) throws SemanticException",
      "info" : "MethodDeclaration[44400-49486]:MethodDeclaration[43840-48926]"
    }, {
      "left" : "private RelNode genJoinRelNode(RelNode leftRel, RelNode rightRel, JoinType hiveJoinType,\n        ASTNode joinCond) throws SemanticException",
      "right" : "private RelNode genJoinRelNode(RelNode leftRel, RelNode rightRel, JoinType hiveJoinType,\n        ASTNode joinCond) throws SemanticException",
      "info" : "MethodDeclaration[49492-53607]:MethodDeclaration[48932-53047]"
    }, {
      "left" : "private RelNode genJoinLogicalPlan(ASTNode joinParseTree, Map<String, RelNode> aliasToRel)\n        throws SemanticException",
      "right" : "private RelNode genJoinLogicalPlan(ASTNode joinParseTree, Map<String, RelNode> aliasToRel)\n        throws SemanticException",
      "info" : "MethodDeclaration[53613-57628]:MethodDeclaration[53053-57068]"
    }, {
      "left" : "private RelNode genTableLogicalPlan(String tableAlias, QB qb) throws SemanticException",
      "right" : "private RelNode genTableLogicalPlan(String tableAlias, QB qb) throws SemanticException",
      "info" : "MethodDeclaration[57634-62375]:MethodDeclaration[57074-61815]"
    }, {
      "left" : "private RelNode genFilterRelNode(ASTNode filterExpr, RelNode srcRel) throws SemanticException",
      "right" : "private RelNode genFilterRelNode(ASTNode filterExpr, RelNode srcRel) throws SemanticException",
      "info" : "MethodDeclaration[62381-64037]:MethodDeclaration[61821-63477]"
    }, {
      "left" : "private RelNode genFilterRelNode(QB qb, ASTNode searchCond, RelNode srcRel,\n        Map<String, RelNode> aliasToRel, boolean forHavingClause) throws SemanticException",
      "right" : "private RelNode genFilterRelNode(QB qb, ASTNode searchCond, RelNode srcRel,\n        Map<String, RelNode> aliasToRel, boolean forHavingClause) throws SemanticException",
      "info" : "MethodDeclaration[64043-70431]:MethodDeclaration[63483-69871]"
    }, {
      "left" : "private RelNode projectLeftOuterSide(RelNode srcRel, int numColumns) throws SemanticException",
      "right" : "private RelNode projectLeftOuterSide(RelNode srcRel, int numColumns) throws SemanticException",
      "info" : "MethodDeclaration[70437-71383]:MethodDeclaration[69877-70823]"
    }, {
      "left" : "private RelNode genFilterLogicalPlan(QB qb, RelNode srcRel, Map<String, RelNode> aliasToRel,\n        boolean forHavingClause) throws SemanticException",
      "right" : "private RelNode genFilterLogicalPlan(QB qb, RelNode srcRel, Map<String, RelNode> aliasToRel,\n        boolean forHavingClause) throws SemanticException",
      "info" : "MethodDeclaration[71389-71915]:MethodDeclaration[70829-71355]"
    }, {
      "left" : "AggInfo",
      "right" : "AggInfo",
      "info" : "TypeDeclaration[71921-72487]:TypeDeclaration[71361-71927]"
    }, {
      "left" : "private final List<ExprNodeDesc> m_aggParams;",
      "right" : "private final List<ExprNodeDesc> m_aggParams;",
      "info" : "FieldDeclaration[72022-72067]:FieldDeclaration[71462-71507]"
    }, {
      "left" : "private final TypeInfo           m_returnType;",
      "right" : "private final TypeInfo           m_returnType;",
      "info" : "FieldDeclaration[72074-72120]:FieldDeclaration[71514-71560]"
    }, {
      "left" : "private final String             m_udfName;",
      "right" : "private final String             m_udfName;",
      "info" : "FieldDeclaration[72127-72170]:FieldDeclaration[71567-71610]"
    }, {
      "left" : "private final boolean            m_distinct;",
      "right" : "private final boolean            m_distinct;",
      "info" : "FieldDeclaration[72177-72221]:FieldDeclaration[71617-71661]"
    }, {
      "left" : "private AggInfo(List<ExprNodeDesc> aggParams, TypeInfo returnType, String udfName,\n          boolean isDistinct)",
      "right" : "private AggInfo(List<ExprNodeDesc> aggParams, TypeInfo returnType, String udfName,\n          boolean isDistinct)",
      "info" : "MethodDeclaration[72229-72481]:MethodDeclaration[71669-71921]"
    }, {
      "left" : "private AggregateCall convertGBAgg(AggInfo agg, RelNode input, List<RexNode> gbChildProjLst,\n        RexNodeConverter converter, HashMap<String, Integer> rexNodeToPosMap,\n        Integer childProjLstIndx) throws SemanticException",
      "right" : "private AggregateCall convertGBAgg(AggInfo agg, RelNode input, List<RexNode> gbChildProjLst,\n        RexNodeConverter converter, HashMap<String, Integer> rexNodeToPosMap,\n        Integer childProjLstIndx) throws SemanticException",
      "info" : "MethodDeclaration[72493-74201]:MethodDeclaration[71933-73641]"
    }, {
      "left" : "private RelNode genGBRelNode(List<ExprNodeDesc> gbExprs, List<AggInfo> aggInfoLst,\n        List<Integer> groupSets, RelNode srcRel) throws SemanticException",
      "right" : "private RelNode genGBRelNode(List<ExprNodeDesc> gbExprs, List<AggInfo> aggInfoLst,\n        List<Integer> groupSets, RelNode srcRel) throws SemanticException",
      "info" : "MethodDeclaration[74207-77222]:MethodDeclaration[73647-76662]"
    }, {
      "left" : "private ImmutableBitSet convert(int value)",
      "right" : "private ImmutableBitSet convert(int value)",
      "info" : "MethodDeclaration[77228-77537]:MethodDeclaration[76668-76977]"
    }, {
      "left" : "private void addAlternateGByKeyMappings(ASTNode gByExpr, ColumnInfo colInfo,\n        RowResolver gByInputRR, RowResolver gByRR)",
      "right" : "private void addAlternateGByKeyMappings(ASTNode gByExpr, ColumnInfo colInfo,\n        RowResolver gByInputRR, RowResolver gByRR)",
      "info" : "MethodDeclaration[77543-78955]:MethodDeclaration[76983-78395]"
    }, {
      "left" : "private void addToGBExpr(RowResolver groupByOutputRowResolver,\n        RowResolver groupByInputRowResolver, ASTNode grpbyExpr, ExprNodeDesc grpbyExprNDesc,\n        List<ExprNodeDesc> gbExprNDescLst, List<String> outputColumnNames)",
      "right" : "private void addToGBExpr(RowResolver groupByOutputRowResolver,\n        RowResolver groupByInputRowResolver, ASTNode grpbyExpr, ExprNodeDesc grpbyExprNDesc,\n        List<ExprNodeDesc> gbExprNDescLst, List<String> outputColumnNames)",
      "info" : "MethodDeclaration[78961-79745]:MethodDeclaration[78401-79185]"
    }, {
      "left" : "private AggInfo getHiveAggInfo(ASTNode aggAst, int aggFnLstArgIndx, RowResolver inputRR)\n        throws SemanticException",
      "right" : "private AggInfo getHiveAggInfo(ASTNode aggAst, int aggFnLstArgIndx, RowResolver inputRR)\n        throws SemanticException",
      "info" : "MethodDeclaration[79751-83342]:MethodDeclaration[79191-82782]"
    }, {
      "left" : "private RelNode genGBLogicalPlan(QB qb, RelNode srcRel) throws SemanticException",
      "right" : "private RelNode genGBLogicalPlan(QB qb, RelNode srcRel) throws SemanticException",
      "info" : "MethodDeclaration[83348-91986]:MethodDeclaration[82788-91426]"
    }, {
      "left" : "private Pair<RelNode, RelNode> genOBLogicalPlan(QB qb, RelNode srcRel, boolean outermostOB)\n        throws SemanticException",
      "right" : "private Pair<RelNode, RelNode> genOBLogicalPlan(QB qb, RelNode srcRel, boolean outermostOB)\n        throws SemanticException",
      "info" : "MethodDeclaration[91992-99001]:MethodDeclaration[91432-98441]"
    }, {
      "left" : "public RexNode apply(RelDataTypeField input)",
      "right" : "public RexNode apply(RelDataTypeField input)",
      "info" : "MethodDeclaration[96052-96219]:MethodDeclaration[95492-95659]"
    }, {
      "left" : "private RelNode genLimitLogicalPlan(QB qb, RelNode srcRel) throws SemanticException",
      "right" : "private RelNode genLimitLogicalPlan(QB qb, RelNode srcRel) throws SemanticException",
      "info" : "MethodDeclaration[99007-100224]:MethodDeclaration[98447-99664]"
    }, {
      "left" : "private List<RexNode> getPartitionKeys(PartitionSpec ps, RexNodeConverter converter,\n        RowResolver inputRR) throws SemanticException",
      "right" : "private List<RexNode> getPartitionKeys(PartitionSpec ps, RexNodeConverter converter,\n        RowResolver inputRR) throws SemanticException",
      "info" : "MethodDeclaration[100230-100845]:MethodDeclaration[99670-100285]"
    }, {
      "left" : "private List<RexFieldCollation> getOrderKeys(OrderSpec os, RexNodeConverter converter,\n        RowResolver inputRR) throws SemanticException",
      "right" : "private List<RexFieldCollation> getOrderKeys(OrderSpec os, RexNodeConverter converter,\n        RowResolver inputRR) throws SemanticException",
      "info" : "MethodDeclaration[100851-101739]:MethodDeclaration[100291-101179]"
    }, {
      "left" : "private RexWindowBound getBound(BoundarySpec bs, RexNodeConverter converter)",
      "right" : "private RexWindowBound getBound(BoundarySpec bs, RexNodeConverter converter)",
      "info" : "MethodDeclaration[101745-103342]:MethodDeclaration[101185-102782]"
    }, {
      "left" : "private int getWindowSpecIndx(ASTNode wndAST)",
      "right" : "private int getWindowSpecIndx(ASTNode wndAST)",
      "info" : "MethodDeclaration[103348-103572]:MethodDeclaration[102788-103012]"
    }, {
      "left" : "private Pair<RexNode, TypeInfo> genWindowingProj(QB qb, WindowExpressionSpec wExpSpec,\n        RelNode srcRel) throws SemanticException",
      "right" : "private Pair<RexNode, TypeInfo> genWindowingProj(QB qb, WindowExpressionSpec wExpSpec,\n        RelNode srcRel) throws SemanticException",
      "info" : "MethodDeclaration[103578-106744]:MethodDeclaration[103018-106184]"
    }, {
      "left" : "private RelNode genSelectForWindowing(QB qb, RelNode srcRel, HashSet<ColumnInfo> newColumns)\n        throws SemanticException",
      "right" : "private RelNode genSelectForWindowing(QB qb, RelNode srcRel, HashSet<ColumnInfo> newColumns)\n        throws SemanticException",
      "info" : "MethodDeclaration[106750-108673]:MethodDeclaration[106190-108113]"
    }, {
      "left" : "private RelNode genSelectRelNode(List<RexNode> calciteColLst, RowResolver out_rwsch,\n            RelNode srcRel) throws CalciteSemanticException",
      "right" : "private RelNode genSelectRelNode(List<RexNode> calciteColLst, RowResolver out_rwsch,\n            RelNode srcRel) throws CalciteSemanticException",
      "info" : "MethodDeclaration[108679-108902]:MethodDeclaration[108119-108342]"
    }, {
      "left" : "private RelNode genSelectRelNode(List<RexNode> calciteColLst, RowResolver out_rwsch,\n        RelNode srcRel, List<WindowExpressionSpec> windowExpressions) throws CalciteSemanticException",
      "right" : "private RelNode genSelectRelNode(List<RexNode> calciteColLst, RowResolver out_rwsch,\n        RelNode srcRel, List<WindowExpressionSpec> windowExpressions) throws CalciteSemanticException",
      "info" : "MethodDeclaration[108908-111415]:MethodDeclaration[108348-110855]"
    }, {
      "left" : "private RelNode genSelectLogicalPlan(QB qb, RelNode srcRel, RelNode starSrcRel)\n        throws SemanticException",
      "right" : "private RelNode genSelectLogicalPlan(QB qb, RelNode srcRel, RelNode starSrcRel)\n        throws SemanticException",
      "info" : "MethodDeclaration[111421-120345]:MethodDeclaration[110861-119785]"
    }, {
      "left" : "private RelNode genLogicalPlan(QBExpr qbexpr) throws SemanticException",
      "right" : "private RelNode genLogicalPlan(QBExpr qbexpr) throws SemanticException",
      "info" : "MethodDeclaration[120351-120917]:MethodDeclaration[119791-120357]"
    }, {
      "left" : "private RelNode genLogicalPlan(QB qb, boolean outerMostQB) throws SemanticException",
      "right" : "private RelNode genLogicalPlan(QB qb, boolean outerMostQB) throws SemanticException",
      "info" : "MethodDeclaration[120923-127482]:MethodDeclaration[120363-126922]"
    }, {
      "left" : "public RexNode apply(RelDataTypeField input)",
      "right" : "public RexNode apply(RelDataTypeField input)",
      "info" : "MethodDeclaration[125831-125980]:MethodDeclaration[125271-125420]"
    }, {
      "left" : "private RelNode genGBHavingLogicalPlan(QB qb, RelNode srcRel, Map<String, RelNode> aliasToRel)\n        throws SemanticException",
      "right" : "private RelNode genGBHavingLogicalPlan(QB qb, RelNode srcRel, Map<String, RelNode> aliasToRel)\n        throws SemanticException",
      "info" : "MethodDeclaration[127488-128335]:MethodDeclaration[126928-127775]"
    }, {
      "left" : "private void validateNoHavingReferenceToAlias(QB qb, ASTNode havingExpr)\n        throws CalciteSemanticException",
      "right" : "private void validateNoHavingReferenceToAlias(QB qb, ASTNode havingExpr)\n        throws CalciteSemanticException",
      "info" : "MethodDeclaration[128617-130763]:MethodDeclaration[128057-130203]"
    }, {
      "left" : "public Object pre(Object t)",
      "right" : "public Object pre(Object t)",
      "info" : "MethodDeclaration[129533-129991]:MethodDeclaration[128973-129431]"
    }, {
      "left" : "public Object post(Object t)",
      "right" : "public Object post(Object t)",
      "info" : "MethodDeclaration[130003-130087]:MethodDeclaration[129443-129527]"
    }, {
      "left" : "private ImmutableMap<String, Integer> buildHiveToCalciteColumnMap(RowResolver rr, RelNode rNode)",
      "right" : "private ImmutableMap<String, Integer> buildHiveToCalciteColumnMap(RowResolver rr, RelNode rNode)",
      "info" : "MethodDeclaration[130769-131136]:MethodDeclaration[130209-130576]"
    }, {
      "left" : "private ImmutableMap<String, Integer> buildHiveColNameToInputPosMap(\n        List<ExprNodeDesc> col_list, RowResolver inputRR)",
      "right" : "private ImmutableMap<String, Integer> buildHiveColNameToInputPosMap(\n        List<ExprNodeDesc> col_list, RowResolver inputRR)",
      "info" : "MethodDeclaration[131142-132041]:MethodDeclaration[130582-131481]"
    }, {
      "left" : "private QBParseInfo getQBParseInfo(QB qb) throws CalciteSemanticException",
      "right" : "private QBParseInfo getQBParseInfo(QB qb) throws CalciteSemanticException",
      "info" : "MethodDeclaration[132047-132486]:MethodDeclaration[131487-131926]"
    }, {
      "left" : "private List<String> getTabAliases(RowResolver inputRR)",
      "right" : "private List<String> getTabAliases(RowResolver inputRR)",
      "info" : "MethodDeclaration[132492-132834]:MethodDeclaration[131932-132274]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10799-10923]:Block[10799-10923]"
    }, {
      "left" : "super(conf);",
      "right" : "super(conf);",
      "info" : "SuperConstructorInvocation[10805-10817]:SuperConstructorInvocation[10805-10817]"
    }, {
      "left" : "if (!HiveConf.getBoolVar(conf, HiveConf.ConfVars.HIVE_CBO_ENABLED))",
      "right" : "if (!HiveConf.getBoolVar(conf, HiveConf.ConfVars.HIVE_CBO_ENABLED))",
      "info" : "IfStatement[10822-10919]:IfStatement[10822-10919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10890-10919]:Block[10890-10919]"
    }, {
      "left" : "runCBO = false;",
      "right" : "runCBO = false;",
      "info" : "ExpressionStatement[10898-10913]:ExpressionStatement[10898-10913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11032-11192]:Block[11032-11192]"
    }, {
      "left" : "if (runCBO)",
      "right" : "if (runCBO)",
      "info" : "IfStatement[11038-11188]:IfStatement[11038-11188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11050-11141]:Block[11050-11141]"
    }, {
      "left" : "PreCboCtx cboCtx = new PreCboCtx();",
      "right" : "PreCboCtx cboCtx = new PreCboCtx();",
      "info" : "VariableDeclarationStatement[11058-11093]:VariableDeclarationStatement[11058-11093]"
    }, {
      "left" : "super.analyzeInternal(ast, cboCtx);",
      "right" : "super.analyzeInternal(ast, cboCtx);",
      "info" : "ExpressionStatement[11100-11135]:ExpressionStatement[11100-11135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11147-11188]:Block[11147-11188]"
    }, {
      "left" : "super.analyzeInternal(ast);",
      "right" : "super.analyzeInternal(ast);",
      "info" : "ExpressionStatement[11155-11182]:ExpressionStatement[11155-11182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11324-16094]:Block[11324-16094]"
    }, {
      "left" : "Operator sinkOp = null;",
      "right" : "Operator sinkOp = null;",
      "info" : "VariableDeclarationStatement[11330-11353]:VariableDeclarationStatement[11330-11353]"
    }, {
      "left" : "boolean skipCalcitePlan = false;",
      "right" : "boolean skipCalcitePlan = false;",
      "info" : "VariableDeclarationStatement[11358-11390]:VariableDeclarationStatement[11358-11390]"
    }, {
      "left" : "if (!runCBO)",
      "right" : "if (!runCBO)",
      "info" : "IfStatement[11396-15987]:IfStatement[11396-15987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11409-11446]:Block[11409-11446]"
    }, {
      "left" : "skipCalcitePlan = true;",
      "right" : "skipCalcitePlan = true;",
      "info" : "ExpressionStatement[11417-11440]:ExpressionStatement[11417-11440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11452-15987]:Block[11452-15987]"
    }, {
      "left" : "PreCboCtx cboCtx = (PreCboCtx) plannerCtx;",
      "right" : "PreCboCtx cboCtx = (PreCboCtx) plannerCtx;",
      "info" : "VariableDeclarationStatement[11460-11502]:VariableDeclarationStatement[11460-11502]"
    }, {
      "left" : "ASTNode queryForCbo = ast;",
      "right" : "ASTNode queryForCbo = ast;",
      "info" : "VariableDeclarationStatement[11898-11924]:VariableDeclarationStatement[11898-11924]"
    }, {
      "left" : "if (cboCtx.type == PreCboCtx.Type.CTAS)",
      "right" : "if (cboCtx.type == PreCboCtx.Type.CTAS)",
      "info" : "IfStatement[11931-12056]:IfStatement[11931-12056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11971-12056]:Block[11971-12056]"
    }, {
      "left" : "queryForCbo = cboCtx.nodeOfInterest;",
      "right" : "queryForCbo = cboCtx.nodeOfInterest;",
      "info" : "ExpressionStatement[11981-12017]:ExpressionStatement[11981-12017]"
    }, {
      "left" : "runCBO = canCBOHandleAst(queryForCbo, getQB(), cboCtx);",
      "right" : "runCBO = canCBOHandleAst(queryForCbo, getQB(), cboCtx);",
      "info" : "ExpressionStatement[12063-12118]:ExpressionStatement[12063-12118]"
    }, {
      "left" : "if (runCBO)",
      "right" : "if (runCBO)",
      "info" : "IfStatement[12126-15981]:IfStatement[12126-15981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12138-15875]:Block[12138-15875]"
    }, {
      "left" : "disableJoinMerge = true;",
      "right" : "disableJoinMerge = true;",
      "info" : "ExpressionStatement[12148-12172]:ExpressionStatement[12148-12172]"
    }, {
      "left" : "boolean reAnalyzeAST = false;",
      "right" : "boolean reAnalyzeAST = false;",
      "info" : "VariableDeclarationStatement[12181-12210]:VariableDeclarationStatement[12181-12210]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12220-15867]:TryStatement[12220-15867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12224-13886]:Block[12224-13886]"
    }, {
      "left" : "if (this.conf.getBoolVar(HiveConf.ConfVars.HIVE_CBO_RETPATH_HIVEOP))",
      "right" : "if (this.conf.getBoolVar(HiveConf.ConfVars.HIVE_CBO_RETPATH_HIVEOP))",
      "info" : "IfStatement[12236-13876]:IfStatement[12236-13876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12305-12531]:Block[12305-12531]"
    }, {
      "left" : "sinkOp = getOptimizedHiveOPDag();",
      "right" : "sinkOp = getOptimizedHiveOPDag();",
      "info" : "ExpressionStatement[12319-12352]:ExpressionStatement[12319-12352]"
    }, {
      "left" : "LOG.info(\"CBO Succeeded; optimized logical plan.\");",
      "right" : "LOG.info(\"CBO Succeeded; optimized logical plan.\");",
      "info" : "ExpressionStatement[12365-12416]:ExpressionStatement[12365-12416]"
    }, {
      "left" : "this.ctx.setCboInfo(\"Plan optimized by CBO.\");",
      "right" : "this.ctx.setCboInfo(\"Plan optimized by CBO.\");",
      "info" : "ExpressionStatement[12429-12475]:ExpressionStatement[12429-12475]"
    }, {
      "left" : "this.ctx.setCboSucceeded(true);",
      "right" : "this.ctx.setCboSucceeded(true);",
      "info" : "ExpressionStatement[12488-12519]:ExpressionStatement[12488-12519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12537-13876]:Block[12537-13876]"
    }, {
      "left" : "ASTNode newAST = getOptimizedAST();",
      "right" : "ASTNode newAST = getOptimizedAST();",
      "info" : "VariableDeclarationStatement[12587-12622]:VariableDeclarationStatement[12587-12622]"
    }, {
      "left" : "newAST = fixUpCtasAndInsertAfterCbo(ast, newAST, cboCtx);",
      "right" : "newAST = fixUpCtasAndInsertAfterCbo(ast, newAST, cboCtx);",
      "info" : "ExpressionStatement[12689-12746]:ExpressionStatement[12689-12746]"
    }, {
      "left" : "init(false);",
      "right" : "init(false);",
      "info" : "ExpressionStatement[12811-12823]:ExpressionStatement[12811-12823]"
    }, {
      "left" : "if (cboCtx.type == PreCboCtx.Type.CTAS)",
      "right" : "if (cboCtx.type == PreCboCtx.Type.CTAS)",
      "info" : "IfStatement[12836-13055]:IfStatement[12836-13055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12876-13055]:Block[12876-13055]"
    }, {
      "left" : "setAST(newAST);",
      "right" : "setAST(newAST);",
      "info" : "ExpressionStatement[12972-12987]:ExpressionStatement[12972-12987]"
    }, {
      "left" : "newAST = reAnalyzeCtasAfterCbo(newAST);",
      "right" : "newAST = reAnalyzeCtasAfterCbo(newAST);",
      "info" : "ExpressionStatement[13002-13041]:ExpressionStatement[13002-13041]"
    }, {
      "left" : "Phase1Ctx ctx_1 = initPhase1Ctx();",
      "right" : "Phase1Ctx ctx_1 = initPhase1Ctx();",
      "info" : "VariableDeclarationStatement[13068-13102]:VariableDeclarationStatement[13068-13102]"
    }, {
      "left" : "if (!doPhase1(newAST, getQB(), ctx_1, null))",
      "right" : "if (!doPhase1(newAST, getQB(), ctx_1, null))",
      "info" : "IfStatement[13115-13267]:IfStatement[13115-13267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13160-13267]:Block[13160-13267]"
    }, {
      "left" : "throw new RuntimeException(\"Couldn't do phase1 on CBO optimized query plan\");",
      "right" : "throw new RuntimeException(\"Couldn't do phase1 on CBO optimized query plan\");",
      "info" : "ThrowStatement[13176-13253]:ThrowStatement[13176-13253]"
    }, {
      "left" : "getMetaData(getQB());",
      "right" : "getMetaData(getQB());",
      "info" : "ExpressionStatement[13504-13525]:ExpressionStatement[13504-13525]"
    }, {
      "left" : "disableJoinMerge = false;",
      "right" : "disableJoinMerge = false;",
      "info" : "ExpressionStatement[13539-13564]:ExpressionStatement[13539-13564]"
    }, {
      "left" : "sinkOp = genPlan(getQB());",
      "right" : "sinkOp = genPlan(getQB());",
      "info" : "ExpressionStatement[13577-13603]:ExpressionStatement[13577-13603]"
    }, {
      "left" : "LOG.info(\"CBO Succeeded; optimized logical plan.\");",
      "right" : "LOG.info(\"CBO Succeeded; optimized logical plan.\");",
      "info" : "ExpressionStatement[13616-13667]:ExpressionStatement[13616-13667]"
    }, {
      "left" : "this.ctx.setCboInfo(\"Plan optimized by CBO.\");",
      "right" : "this.ctx.setCboInfo(\"Plan optimized by CBO.\");",
      "info" : "ExpressionStatement[13680-13726]:ExpressionStatement[13680-13726]"
    }, {
      "left" : "this.ctx.setCboSucceeded(true);",
      "right" : "this.ctx.setCboSucceeded(true);",
      "info" : "ExpressionStatement[13739-13770]:ExpressionStatement[13739-13770]"
    }, {
      "left" : "if (LOG.isDebugEnabled())",
      "right" : "if (LOG.isDebugEnabled())",
      "info" : "IfStatement[13783-13864]:IfStatement[13783-13864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13809-13864]:Block[13809-13864]"
    }, {
      "left" : "LOG.debug(newAST.dump());",
      "right" : "LOG.debug(newAST.dump());",
      "info" : "ExpressionStatement[13825-13850]:ExpressionStatement[13825-13850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13907-15441]:Block[13907-15441]"
    }, {
      "left" : "boolean isMissingStats = noColsMissingStats.get() > 0;",
      "right" : "boolean isMissingStats = noColsMissingStats.get() > 0;",
      "info" : "VariableDeclarationStatement[13919-13973]:VariableDeclarationStatement[13919-13973]"
    }, {
      "left" : "if (isMissingStats)",
      "right" : "if (isMissingStats)",
      "info" : "IfStatement[13984-15003]:IfStatement[13984-15003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14004-14259]:Block[14004-14259]"
    }, {
      "left" : "LOG.error(\"CBO failed due to missing column stats (see previous errors), skipping CBO\");",
      "right" : "LOG.error(\"CBO failed due to missing column stats (see previous errors), skipping CBO\");",
      "info" : "ExpressionStatement[14018-14106]:ExpressionStatement[14018-14106]"
    }, {
      "left" : "this.ctx\n                .setCboInfo(\"Plan not optimized by CBO due to missing statistics. Please check log for more details.\");",
      "right" : "this.ctx\n                .setCboInfo(\"Plan not optimized by CBO due to missing statistics. Please check log for more details.\");",
      "info" : "ExpressionStatement[14119-14247]:ExpressionStatement[14119-14247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14265-15003]:Block[14265-15003]"
    }, {
      "left" : "LOG.error(\"CBO failed, skipping CBO. \", e);",
      "right" : "LOG.error(\"CBO failed, skipping CBO. \", e);",
      "info" : "ExpressionStatement[14279-14322]:ExpressionStatement[14279-14322]"
    }, {
      "left" : "if (e instanceof CalciteSemanticException)",
      "right" : "if (e instanceof CalciteSemanticException)",
      "info" : "IfStatement[14335-14991]:IfStatement[14335-14991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14378-14905]:Block[14378-14905]"
    }, {
      "left" : "CalciteSemanticException calciteSemanticException = (CalciteSemanticException) e;",
      "right" : "CalciteSemanticException calciteSemanticException = (CalciteSemanticException) e;",
      "info" : "VariableDeclarationStatement[14394-14475]:VariableDeclarationStatement[14394-14475]"
    }, {
      "left" : "UnsupportedFeature unsupportedFeature = calciteSemanticException\n                  .getUnsupportedFeature();",
      "right" : "UnsupportedFeature unsupportedFeature = calciteSemanticException\n                  .getUnsupportedFeature();",
      "info" : "VariableDeclarationStatement[14490-14598]:VariableDeclarationStatement[14490-14598]"
    }, {
      "left" : "if (unsupportedFeature != null)",
      "right" : "if (unsupportedFeature != null)",
      "info" : "IfStatement[14613-14891]:IfStatement[14613-14891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14645-14801]:Block[14645-14801]"
    }, {
      "left" : "this.ctx.setCboInfo(\"Plan not optimized by CBO due to missing feature [\"\n                    + unsupportedFeature + \"].\");",
      "right" : "this.ctx.setCboInfo(\"Plan not optimized by CBO due to missing feature [\"\n                    + unsupportedFeature + \"].\");",
      "info" : "ExpressionStatement[14663-14785]:ExpressionStatement[14663-14785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14807-14891]:Block[14807-14891]"
    }, {
      "left" : "this.ctx.setCboInfo(\"Plan not optimized by CBO.\");",
      "right" : "this.ctx.setCboInfo(\"Plan not optimized by CBO.\");",
      "info" : "ExpressionStatement[14825-14875]:ExpressionStatement[14825-14875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14911-14991]:Block[14911-14991]"
    }, {
      "left" : "this.ctx.setCboInfo(\"Plan not optimized by CBO.\");",
      "right" : "this.ctx.setCboInfo(\"Plan not optimized by CBO.\");",
      "info" : "ExpressionStatement[14927-14977]:ExpressionStatement[14927-14977]"
    }, {
      "left" : "if (!conf.getBoolVar(ConfVars.HIVE_IN_TEST) || isMissingStats\n              || e instanceof CalciteSemanticException)",
      "right" : "if (!conf.getBoolVar(ConfVars.HIVE_IN_TEST) || isMissingStats\n              || e instanceof CalciteSemanticException)",
      "info" : "IfStatement[15014-15431]:IfStatement[15014-15431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15132-15178]:Block[15132-15178]"
    }, {
      "left" : "reAnalyzeAST = true;",
      "right" : "reAnalyzeAST = true;",
      "info" : "ExpressionStatement[15146-15166]:ExpressionStatement[15146-15166]"
    }, {
      "left" : "if (e instanceof SemanticException)",
      "right" : "if (e instanceof SemanticException)",
      "info" : "IfStatement[15184-15431]:IfStatement[15184-15431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15220-15274]:Block[15220-15274]"
    }, {
      "left" : "throw (SemanticException) e;",
      "right" : "throw (SemanticException) e;",
      "info" : "ThrowStatement[15234-15262]:ThrowStatement[15234-15262]"
    }, {
      "left" : "if (e instanceof RuntimeException)",
      "right" : "if (e instanceof RuntimeException)",
      "info" : "IfStatement[15280-15431]:IfStatement[15280-15431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15315-15368]:Block[15315-15368]"
    }, {
      "left" : "throw (RuntimeException) e;",
      "right" : "throw (RuntimeException) e;",
      "info" : "ThrowStatement[15329-15356]:ThrowStatement[15329-15356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15374-15431]:Block[15374-15431]"
    }, {
      "left" : "throw new SemanticException(e);",
      "right" : "throw new SemanticException(e);",
      "info" : "ThrowStatement[15388-15419]:ThrowStatement[15388-15419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15450-15867]:Block[15450-15867]"
    }, {
      "left" : "runCBO = false;",
      "right" : "runCBO = false;",
      "info" : "ExpressionStatement[15462-15477]:ExpressionStatement[15462-15477]"
    }, {
      "left" : "disableJoinMerge = false;",
      "right" : "disableJoinMerge = false;",
      "info" : "ExpressionStatement[15488-15513]:ExpressionStatement[15488-15513]"
    }, {
      "left" : "if (reAnalyzeAST)",
      "right" : "if (reAnalyzeAST)",
      "info" : "IfStatement[15524-15857]:IfStatement[15524-15857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15542-15857]:Block[15542-15857]"
    }, {
      "left" : "init(true);",
      "right" : "init(true);",
      "info" : "ExpressionStatement[15556-15567]:ExpressionStatement[15556-15567]"
    }, {
      "left" : "prunedPartitions.clear();",
      "right" : "prunedPartitions.clear();",
      "info" : "ExpressionStatement[15580-15605]:ExpressionStatement[15580-15605]"
    }, {
      "left" : "super.genResolvedParseTree(ast, new PlannerContext());",
      "right" : "super.genResolvedParseTree(ast, new PlannerContext());",
      "info" : "ExpressionStatement[15755-15809]:ExpressionStatement[15755-15809]"
    }, {
      "left" : "skipCalcitePlan = true;",
      "right" : "skipCalcitePlan = true;",
      "info" : "ExpressionStatement[15822-15845]:ExpressionStatement[15822-15845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15881-15981]:Block[15881-15981]"
    }, {
      "left" : "this.ctx.setCboInfo(\"Plan not optimized by CBO.\");",
      "right" : "this.ctx.setCboInfo(\"Plan not optimized by CBO.\");",
      "info" : "ExpressionStatement[15891-15941]:ExpressionStatement[15891-15941]"
    }, {
      "left" : "skipCalcitePlan = true;",
      "right" : "skipCalcitePlan = true;",
      "info" : "ExpressionStatement[15950-15973]:ExpressionStatement[15950-15973]"
    }, {
      "left" : "if (skipCalcitePlan)",
      "right" : "if (skipCalcitePlan)",
      "info" : "IfStatement[15993-16070]:IfStatement[15993-16070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16014-16070]:Block[16014-16070]"
    }, {
      "left" : "sinkOp = super.genOPTree(ast, plannerCtx);",
      "right" : "sinkOp = super.genOPTree(ast, plannerCtx);",
      "info" : "ExpressionStatement[16022-16064]:ExpressionStatement[16022-16064]"
    }, {
      "left" : "return sinkOp;",
      "right" : "return sinkOp;",
      "info" : "ReturnStatement[16076-16090]:ReturnStatement[16076-16090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16517-18162]:Block[16517-18162]"
    }, {
      "left" : "int root = ast.getToken().getType();",
      "right" : "int root = ast.getToken().getType();",
      "info" : "VariableDeclarationStatement[16523-16559]:VariableDeclarationStatement[16523-16559]"
    }, {
      "left" : "boolean needToLogMessage = STATIC_LOG.isInfoEnabled();",
      "right" : "boolean needToLogMessage = STATIC_LOG.isInfoEnabled();",
      "info" : "VariableDeclarationStatement[16564-16618]:VariableDeclarationStatement[16564-16618]"
    }, {
      "left" : "boolean isSupportedRoot = root == HiveParser.TOK_QUERY || root == HiveParser.TOK_EXPLAIN\n        || qb.isCTAS();",
      "right" : "boolean isSupportedRoot = root == HiveParser.TOK_QUERY || root == HiveParser.TOK_EXPLAIN\n        || qb.isCTAS();",
      "info" : "VariableDeclarationStatement[16623-16735]:VariableDeclarationStatement[16623-16735]"
    }, {
      "left" : "boolean isSupportedType = qb.getIsQuery() || qb.isCTAS()\n        || cboCtx.type == PreCboCtx.Type.INSERT;",
      "right" : "boolean isSupportedType = qb.getIsQuery() || qb.isCTAS()\n        || cboCtx.type == PreCboCtx.Type.INSERT;",
      "info" : "VariableDeclarationStatement[16740-16845]:VariableDeclarationStatement[16740-16845]"
    }, {
      "left" : "boolean noBadTokens = HiveCalciteUtil.validateASTForUnsupportedTokens(ast);",
      "right" : "boolean noBadTokens = HiveCalciteUtil.validateASTForUnsupportedTokens(ast);",
      "info" : "VariableDeclarationStatement[16850-16925]:VariableDeclarationStatement[16850-16925]"
    }, {
      "left" : "boolean result = isSupportedRoot && isSupportedType && getCreateViewDesc() == null\n        && noBadTokens;",
      "right" : "boolean result = isSupportedRoot && isSupportedType && getCreateViewDesc() == null\n        && noBadTokens;",
      "info" : "VariableDeclarationStatement[16930-17036]:VariableDeclarationStatement[16930-17036]"
    }, {
      "left" : "if (!result)",
      "right" : "if (!result)",
      "info" : "IfStatement[17042-17744]:IfStatement[17042-17744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17055-17744]:Block[17055-17744]"
    }, {
      "left" : "if (needToLogMessage)",
      "right" : "if (needToLogMessage)",
      "info" : "IfStatement[17063-17718]:IfStatement[17063-17718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17085-17718]:Block[17085-17718]"
    }, {
      "left" : "String msg = \"\";",
      "right" : "String msg = \"\";",
      "info" : "VariableDeclarationStatement[17095-17111]:VariableDeclarationStatement[17095-17111]"
    }, {
      "left" : "if (!isSupportedRoot)",
      "right" : "if (!isSupportedRoot)",
      "info" : "IfStatement[17120-17228]:IfStatement[17120-17228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17142-17228]:Block[17142-17228]"
    }, {
      "left" : "msg += \"doesn't have QUERY or EXPLAIN as root and not a CTAS; \";",
      "right" : "msg += \"doesn't have QUERY or EXPLAIN as root and not a CTAS; \";",
      "info" : "ExpressionStatement[17154-17218]:ExpressionStatement[17154-17218]"
    }, {
      "left" : "if (!isSupportedType)",
      "right" : "if (!isSupportedType)",
      "info" : "IfStatement[17237-17324]:IfStatement[17237-17324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17259-17324]:Block[17259-17324]"
    }, {
      "left" : "msg += \"is not a query, CTAS, or insert; \";",
      "right" : "msg += \"is not a query, CTAS, or insert; \";",
      "info" : "ExpressionStatement[17271-17314]:ExpressionStatement[17271-17314]"
    }, {
      "left" : "if (getCreateViewDesc() != null)",
      "right" : "if (getCreateViewDesc() != null)",
      "info" : "IfStatement[17333-17415]:IfStatement[17333-17415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17366-17415]:Block[17366-17415]"
    }, {
      "left" : "msg += \"has create view; \";",
      "right" : "msg += \"has create view; \";",
      "info" : "ExpressionStatement[17378-17405]:ExpressionStatement[17378-17405]"
    }, {
      "left" : "if (!noBadTokens)",
      "right" : "if (!noBadTokens)",
      "info" : "IfStatement[17424-17498]:IfStatement[17424-17498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17442-17498]:Block[17442-17498]"
    }, {
      "left" : "msg += \"has unsupported tokens; \";",
      "right" : "msg += \"has unsupported tokens; \";",
      "info" : "ExpressionStatement[17454-17488]:ExpressionStatement[17454-17488]"
    }, {
      "left" : "if (msg.isEmpty())",
      "right" : "if (msg.isEmpty())",
      "info" : "IfStatement[17508-17593]:IfStatement[17508-17593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17527-17593]:Block[17527-17593]"
    }, {
      "left" : "msg += \"has some unspecified limitations; \";",
      "right" : "msg += \"has some unspecified limitations; \";",
      "info" : "ExpressionStatement[17539-17583]:ExpressionStatement[17539-17583]"
    }, {
      "left" : "STATIC_LOG.info(\"Not invoking CBO because the statement \"\n            + msg.substring(0, msg.length() - 2));",
      "right" : "STATIC_LOG.info(\"Not invoking CBO because the statement \"\n            + msg.substring(0, msg.length() - 2));",
      "info" : "ExpressionStatement[17602-17710]:ExpressionStatement[17602-17710]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17725-17738]:ReturnStatement[17725-17738]"
    }, {
      "left" : "String msg = CalcitePlanner.canHandleQbForCbo(queryProperties, conf, true, needToLogMessage, qb);",
      "right" : "String msg = CalcitePlanner.canHandleQbForCbo(queryProperties, conf, true, needToLogMessage, qb);",
      "info" : "VariableDeclarationStatement[17848-17945]:VariableDeclarationStatement[17848-17945]"
    }, {
      "left" : "if (msg == null)",
      "right" : "if (msg == null)",
      "info" : "IfStatement[17950-17993]:IfStatement[17950-17993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17967-17993]:Block[17967-17993]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[17975-17987]:ReturnStatement[17975-17987]"
    }, {
      "left" : "if (needToLogMessage)",
      "right" : "if (needToLogMessage)",
      "info" : "IfStatement[17998-18140]:IfStatement[17998-18140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18020-18140]:Block[18020-18140]"
    }, {
      "left" : "STATIC_LOG.info(\"Not invoking CBO because the statement \"\n          + msg.substring(0, msg.length() - 2));",
      "right" : "STATIC_LOG.info(\"Not invoking CBO because the statement \"\n          + msg.substring(0, msg.length() - 2));",
      "info" : "ExpressionStatement[18028-18134]:ExpressionStatement[18028-18134]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18145-18158]:ReturnStatement[18145-18158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18894-20454]:Block[18894-20454]"
    }, {
      "left" : "boolean isInTest = conf.getBoolVar(ConfVars.HIVE_IN_TEST);",
      "right" : "boolean isInTest = conf.getBoolVar(ConfVars.HIVE_IN_TEST);",
      "info" : "VariableDeclarationStatement[18900-18958]:VariableDeclarationStatement[18900-18958]"
    }, {
      "left" : "boolean isStrictTest = isInTest\n        && !conf.getVar(ConfVars.HIVEMAPREDMODE).equalsIgnoreCase(\"nonstrict\");",
      "right" : "boolean isStrictTest = isInTest\n        && !conf.getVar(ConfVars.HIVEMAPREDMODE).equalsIgnoreCase(\"nonstrict\");",
      "info" : "VariableDeclarationStatement[18963-19074]:VariableDeclarationStatement[18963-19074]"
    }, {
      "left" : "boolean hasEnoughJoins = !topLevelQB || (queryProperties.getJoinCount() > 1) || isInTest || distinctExprsExists(qb);",
      "right" : "boolean hasEnoughJoins = !topLevelQB || (queryProperties.getJoinCount() > 1) || isInTest || distinctExprsExists(qb);",
      "info" : "VariableDeclarationStatement[19079-19195]:VariableDeclarationStatement[19079-19195]"
    }, {
      "left" : "if (!isStrictTest && hasEnoughJoins && !queryProperties.hasClusterBy()\n        && !queryProperties.hasDistributeBy() && !queryProperties.hasSortBy()\n        && !queryProperties.hasPTF() && !queryProperties.usesScript()\n        && !queryProperties.hasMultiDestQuery() && !queryProperties.hasLateralViews())",
      "right" : "if (!isStrictTest && hasEnoughJoins && !queryProperties.hasClusterBy()\n        && !queryProperties.hasDistributeBy() && !queryProperties.hasSortBy()\n        && !queryProperties.hasPTF() && !queryProperties.usesScript()\n        && !queryProperties.hasMultiDestQuery() && !queryProperties.hasLateralViews())",
      "info" : "IfStatement[19201-19557]:IfStatement[19201-19557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19507-19557]:Block[19507-19557]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[19539-19551]:ReturnStatement[19539-19551]"
    }, {
      "left" : "String msg = \"\";",
      "right" : "String msg = \"\";",
      "info" : "VariableDeclarationStatement[19610-19626]:VariableDeclarationStatement[19610-19626]"
    }, {
      "left" : "if (verbose)",
      "right" : "if (verbose)",
      "info" : "IfStatement[19631-20434]:IfStatement[19631-20434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19644-20434]:Block[19644-20434]"
    }, {
      "left" : "if (isStrictTest)",
      "right" : "if (isStrictTest)",
      "info" : "IfStatement[19652-19737]:IfStatement[19652-19737]"
    }, {
      "left" : "msg += \"is in test running in mode other than nonstrict; \";",
      "right" : "msg += \"is in test running in mode other than nonstrict; \";",
      "info" : "ExpressionStatement[19678-19737]:ExpressionStatement[19678-19737]"
    }, {
      "left" : "if (!hasEnoughJoins)",
      "right" : "if (!hasEnoughJoins)",
      "info" : "IfStatement[19744-19802]:IfStatement[19744-19802]"
    }, {
      "left" : "msg += \"has too few joins; \";",
      "right" : "msg += \"has too few joins; \";",
      "info" : "ExpressionStatement[19773-19802]:ExpressionStatement[19773-19802]"
    }, {
      "left" : "if (queryProperties.hasClusterBy())",
      "right" : "if (queryProperties.hasClusterBy())",
      "info" : "IfStatement[19809-19879]:IfStatement[19809-19879]"
    }, {
      "left" : "msg += \"has cluster by; \";",
      "right" : "msg += \"has cluster by; \";",
      "info" : "ExpressionStatement[19853-19879]:ExpressionStatement[19853-19879]"
    }, {
      "left" : "if (queryProperties.hasDistributeBy())",
      "right" : "if (queryProperties.hasDistributeBy())",
      "info" : "IfStatement[19886-19962]:IfStatement[19886-19962]"
    }, {
      "left" : "msg += \"has distribute by; \";",
      "right" : "msg += \"has distribute by; \";",
      "info" : "ExpressionStatement[19933-19962]:ExpressionStatement[19933-19962]"
    }, {
      "left" : "if (queryProperties.hasSortBy())",
      "right" : "if (queryProperties.hasSortBy())",
      "info" : "IfStatement[19969-20033]:IfStatement[19969-20033]"
    }, {
      "left" : "msg += \"has sort by; \";",
      "right" : "msg += \"has sort by; \";",
      "info" : "ExpressionStatement[20010-20033]:ExpressionStatement[20010-20033]"
    }, {
      "left" : "if (queryProperties.hasPTF())",
      "right" : "if (queryProperties.hasPTF())",
      "info" : "IfStatement[20040-20097]:IfStatement[20040-20097]"
    }, {
      "left" : "msg += \"has PTF; \";",
      "right" : "msg += \"has PTF; \";",
      "info" : "ExpressionStatement[20078-20097]:ExpressionStatement[20078-20097]"
    }, {
      "left" : "if (queryProperties.usesScript())",
      "right" : "if (queryProperties.usesScript())",
      "info" : "IfStatement[20104-20170]:IfStatement[20104-20170]"
    }, {
      "left" : "msg += \"uses scripts; \";",
      "right" : "msg += \"uses scripts; \";",
      "info" : "ExpressionStatement[20146-20170]:ExpressionStatement[20146-20170]"
    }, {
      "left" : "if (queryProperties.hasMultiDestQuery())",
      "right" : "if (queryProperties.hasMultiDestQuery())",
      "info" : "IfStatement[20177-20266]:IfStatement[20177-20266]"
    }, {
      "left" : "msg += \"is a multi-destination query; \";",
      "right" : "msg += \"is a multi-destination query; \";",
      "info" : "ExpressionStatement[20226-20266]:ExpressionStatement[20226-20266]"
    }, {
      "left" : "if (queryProperties.hasLateralViews())",
      "right" : "if (queryProperties.hasLateralViews())",
      "info" : "IfStatement[20273-20349]:IfStatement[20273-20349]"
    }, {
      "left" : "msg += \"has lateral views; \";",
      "right" : "msg += \"has lateral views; \";",
      "info" : "ExpressionStatement[20320-20349]:ExpressionStatement[20320-20349]"
    }, {
      "left" : "if (msg.isEmpty())",
      "right" : "if (msg.isEmpty())",
      "info" : "IfStatement[20357-20428]:IfStatement[20357-20428]"
    }, {
      "left" : "msg += \"has some unspecified limitations; \";",
      "right" : "msg += \"has some unspecified limitations; \";",
      "info" : "ExpressionStatement[20384-20428]:ExpressionStatement[20384-20428]"
    }, {
      "left" : "return msg;",
      "right" : "return msg;",
      "info" : "ReturnStatement[20439-20450]:ReturnStatement[20439-20450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20498-20523]:Block[20498-20523]"
    }, {
      "left" : "return !runCBO;",
      "right" : "return !runCBO;",
      "info" : "ReturnStatement[20504-20519]:ReturnStatement[20504-20519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20580-20957]:Block[20580-20957]"
    }, {
      "left" : "if (runCBO)",
      "right" : "if (runCBO)",
      "info" : "IfStatement[20586-20907]:IfStatement[20586-20907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20598-20907]:Block[20598-20907]"
    }, {
      "left" : "int lastDot = colName.lastIndexOf('.');",
      "right" : "int lastDot = colName.lastIndexOf('.');",
      "info" : "VariableDeclarationStatement[20606-20645]:VariableDeclarationStatement[20606-20645]"
    }, {
      "left" : "if (lastDot < 0)",
      "right" : "if (lastDot < 0)",
      "info" : "IfStatement[20652-20692]:IfStatement[20652-20692]"
    }, {
      "left" : "return colName;",
      "right" : "return colName;",
      "info" : "ReturnStatement[20677-20692]:ReturnStatement[20677-20692]"
    }, {
      "left" : "String nqColumnName = colName.substring(lastDot + 1);",
      "right" : "String nqColumnName = colName.substring(lastDot + 1);",
      "info" : "VariableDeclarationStatement[20731-20784]:VariableDeclarationStatement[20731-20784]"
    }, {
      "left" : "STATIC_LOG.debug(\"Replacing \" + colName + \" (produced by CBO) by \" + nqColumnName);",
      "right" : "STATIC_LOG.debug(\"Replacing \" + colName + \" (produced by CBO) by \" + nqColumnName);",
      "info" : "ExpressionStatement[20791-20874]:ExpressionStatement[20791-20874]"
    }, {
      "left" : "return nqColumnName;",
      "right" : "return nqColumnName;",
      "info" : "ReturnStatement[20881-20901]:ReturnStatement[20881-20901]"
    }, {
      "left" : "return super.fixCtasColumnName(colName);",
      "right" : "return super.fixCtasColumnName(colName);",
      "info" : "ReturnStatement[20913-20953]:ReturnStatement[20913-20953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21341-21656]:Block[21341-21656]"
    }, {
      "left" : "if (this.type != Type.NONE)",
      "right" : "if (this.type != Type.NONE)",
      "info" : "IfStatement[21349-21593]:IfStatement[21349-21593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21377-21593]:Block[21377-21593]"
    }, {
      "left" : "STATIC_LOG.warn(\"Setting \" + type + \" when already \" + this.type + \"; node \" + ast.dump()\n            + \" vs old node \" + nodeOfInterest.dump());",
      "right" : "STATIC_LOG.warn(\"Setting \" + type + \" when already \" + this.type + \"; node \" + ast.dump()\n            + \" vs old node \" + nodeOfInterest.dump());",
      "info" : "ExpressionStatement[21387-21532]:ExpressionStatement[21387-21532]"
    }, {
      "left" : "this.type = Type.UNEXPECTED;",
      "right" : "this.type = Type.UNEXPECTED;",
      "info" : "ExpressionStatement[21541-21569]:ExpressionStatement[21541-21569]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[21578-21585]:ReturnStatement[21578-21585]"
    }, {
      "left" : "this.type = type;",
      "right" : "this.type = type;",
      "info" : "ExpressionStatement[21600-21617]:ExpressionStatement[21600-21617]"
    }, {
      "left" : "this.nodeOfInterest = ast;",
      "right" : "this.nodeOfInterest = ast;",
      "info" : "ExpressionStatement[21624-21650]:ExpressionStatement[21624-21650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21709-21755]:Block[21709-21755]"
    }, {
      "left" : "set(PreCboCtx.Type.CTAS, child);",
      "right" : "set(PreCboCtx.Type.CTAS, child);",
      "info" : "ExpressionStatement[21717-21749]:ExpressionStatement[21717-21749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21831-21915]:Block[21831-21915]"
    }, {
      "left" : "if (!isTmpFileDest)",
      "right" : "if (!isTmpFileDest)",
      "info" : "IfStatement[21839-21909]:IfStatement[21839-21909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21859-21909]:Block[21859-21909]"
    }, {
      "left" : "set(PreCboCtx.Type.INSERT, ast);",
      "right" : "set(PreCboCtx.Type.INSERT, ast);",
      "info" : "ExpressionStatement[21869-21901]:ExpressionStatement[21869-21901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22044-23018]:Block[22044-23018]"
    }, {
      "left" : "switch (cboCtx.type) {\n\n    case NONE:\n      // nothing to do\n      return newAst;\n\n    case CTAS: {\n      // Patch the optimized query back into original CTAS AST, replacing the\n      // original query.\n      replaceASTChild(cboCtx.nodeOfInterest, newAst);\n      return originalAst;\n    }\n\n    case INSERT: {\n      // We need to patch the dest back to original into new query.\n      // This makes assumptions about the structure of the AST.\n      ASTNode newDest = new ASTSearcher().simpleBreadthFirstSearch(newAst, HiveParser.TOK_QUERY,\n          HiveParser.TOK_INSERT, HiveParser.TOK_DESTINATION);\n      if (newDest == null) {\n        LOG.error(\"Cannot find destination after CBO; new ast is \" + newAst.dump());\n        throw new SemanticException(\"Cannot find destination after CBO\");\n      }\n      replaceASTChild(newDest, cboCtx.nodeOfInterest);\n      return newAst;\n    }\n\n    default:\n      throw new AssertionError(\"Unexpected type \" + cboCtx.type);\n    }",
      "right" : "switch (cboCtx.type) {\n\n    case NONE:\n      // nothing to do\n      return newAst;\n\n    case CTAS: {\n      // Patch the optimized query back into original CTAS AST, replacing the\n      // original query.\n      replaceASTChild(cboCtx.nodeOfInterest, newAst);\n      return originalAst;\n    }\n\n    case INSERT: {\n      // We need to patch the dest back to original into new query.\n      // This makes assumptions about the structure of the AST.\n      ASTNode newDest = new ASTSearcher().simpleBreadthFirstSearch(newAst, HiveParser.TOK_QUERY,\n          HiveParser.TOK_INSERT, HiveParser.TOK_DESTINATION);\n      if (newDest == null) {\n        LOG.error(\"Cannot find destination after CBO; new ast is \" + newAst.dump());\n        throw new SemanticException(\"Cannot find destination after CBO\");\n      }\n      replaceASTChild(newDest, cboCtx.nodeOfInterest);\n      return newAst;\n    }\n\n    default:\n      throw new AssertionError(\"Unexpected type \" + cboCtx.type);\n    }",
      "info" : "SwitchStatement[22050-23014]:SwitchStatement[22050-23014]"
    }, {
      "left" : "case NONE:",
      "right" : "case NONE:",
      "info" : "SwitchCase[22078-22088]:SwitchCase[22078-22088]"
    }, {
      "left" : "return newAst;",
      "right" : "return newAst;",
      "info" : "ReturnStatement[22118-22132]:ReturnStatement[22118-22132]"
    }, {
      "left" : "case CTAS:",
      "right" : "case CTAS:",
      "info" : "SwitchCase[22138-22148]:SwitchCase[22138-22148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22149-22339]:Block[22149-22339]"
    }, {
      "left" : "replaceASTChild(cboCtx.nodeOfInterest, newAst);",
      "right" : "replaceASTChild(cboCtx.nodeOfInterest, newAst);",
      "info" : "ExpressionStatement[22260-22307]:ExpressionStatement[22260-22307]"
    }, {
      "left" : "return originalAst;",
      "right" : "return originalAst;",
      "info" : "ReturnStatement[22314-22333]:ReturnStatement[22314-22333]"
    }, {
      "left" : "case INSERT:",
      "right" : "case INSERT:",
      "info" : "SwitchCase[22345-22357]:SwitchCase[22345-22357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22358-22928]:Block[22358-22928]"
    }, {
      "left" : "ASTNode newDest = new ASTSearcher().simpleBreadthFirstSearch(newAst, HiveParser.TOK_QUERY,\n          HiveParser.TOK_INSERT, HiveParser.TOK_DESTINATION);",
      "right" : "ASTNode newDest = new ASTSearcher().simpleBreadthFirstSearch(newAst, HiveParser.TOK_QUERY,\n          HiveParser.TOK_INSERT, HiveParser.TOK_DESTINATION);",
      "info" : "VariableDeclarationStatement[22498-22650]:VariableDeclarationStatement[22498-22650]"
    }, {
      "left" : "if (newDest == null)",
      "right" : "if (newDest == null)",
      "info" : "IfStatement[22657-22846]:IfStatement[22657-22846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22678-22846]:Block[22678-22846]"
    }, {
      "left" : "LOG.error(\"Cannot find destination after CBO; new ast is \" + newAst.dump());",
      "right" : "LOG.error(\"Cannot find destination after CBO; new ast is \" + newAst.dump());",
      "info" : "ExpressionStatement[22688-22764]:ExpressionStatement[22688-22764]"
    }, {
      "left" : "throw new SemanticException(\"Cannot find destination after CBO\");",
      "right" : "throw new SemanticException(\"Cannot find destination after CBO\");",
      "info" : "ThrowStatement[22773-22838]:ThrowStatement[22773-22838]"
    }, {
      "left" : "replaceASTChild(newDest, cboCtx.nodeOfInterest);",
      "right" : "replaceASTChild(newDest, cboCtx.nodeOfInterest);",
      "info" : "ExpressionStatement[22853-22901]:ExpressionStatement[22853-22901]"
    }, {
      "left" : "return newAst;",
      "right" : "return newAst;",
      "info" : "ReturnStatement[22908-22922]:ReturnStatement[22908-22922]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[22934-22942]:SwitchCase[22934-22942]"
    }, {
      "left" : "throw new AssertionError(\"Unexpected type \" + cboCtx.type);",
      "right" : "throw new AssertionError(\"Unexpected type \" + cboCtx.type);",
      "info" : "ThrowStatement[22949-23008]:ThrowStatement[22949-23008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23093-23512]:Block[23093-23512]"
    }, {
      "left" : "newAst = analyzeCreateTable(newAst, getQB(), null);",
      "right" : "newAst = analyzeCreateTable(newAst, getQB(), null);",
      "info" : "ExpressionStatement[23192-23243]:ExpressionStatement[23192-23243]"
    }, {
      "left" : "if (newAst == null)",
      "right" : "if (newAst == null)",
      "info" : "IfStatement[23248-23489]:IfStatement[23248-23489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23268-23489]:Block[23268-23489]"
    }, {
      "left" : "LOG.error(\"analyzeCreateTable failed to initialize CTAS after CBO;\" + \" new ast is \"\n          + getAST().dump());",
      "right" : "LOG.error(\"analyzeCreateTable failed to initialize CTAS after CBO;\" + \" new ast is \"\n          + getAST().dump());",
      "info" : "ExpressionStatement[23276-23390]:ExpressionStatement[23276-23390]"
    }, {
      "left" : "throw new SemanticException(\"analyzeCreateTable failed to initialize CTAS after CBO\");",
      "right" : "throw new SemanticException(\"analyzeCreateTable failed to initialize CTAS after CBO\");",
      "info" : "ThrowStatement[23397-23483]:ThrowStatement[23397-23483]"
    }, {
      "left" : "return newAst;",
      "right" : "return newAst;",
      "info" : "ReturnStatement[23494-23508]:ReturnStatement[23494-23508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24178-24832]:Block[24178-24832]"
    }, {
      "left" : "searchQueue.clear();",
      "right" : "searchQueue.clear();",
      "info" : "ExpressionStatement[24186-24206]:ExpressionStatement[24186-24206]"
    }, {
      "left" : "searchQueue.add(ast);",
      "right" : "searchQueue.add(ast);",
      "info" : "ExpressionStatement[24213-24234]:ExpressionStatement[24213-24234]"
    }, {
      "left" : "for (int i = 0; i < tokens.length; ++i)",
      "right" : "for (int i = 0; i < tokens.length; ++i)",
      "info" : "ForStatement[24241-24807]:ForStatement[24241-24807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24281-24807]:Block[24281-24807]"
    }, {
      "left" : "boolean found = false;",
      "right" : "boolean found = false;",
      "info" : "VariableDeclarationStatement[24291-24313]:VariableDeclarationStatement[24291-24313]"
    }, {
      "left" : "int token = tokens[i];",
      "right" : "int token = tokens[i];",
      "info" : "VariableDeclarationStatement[24322-24344]:VariableDeclarationStatement[24322-24344]"
    }, {
      "left" : "while (!searchQueue.isEmpty() && !found)",
      "right" : "while (!searchQueue.isEmpty() && !found)",
      "info" : "WhileStatement[24353-24756]:WhileStatement[24353-24756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24394-24756]:Block[24394-24756]"
    }, {
      "left" : "ASTNode next = searchQueue.poll();",
      "right" : "ASTNode next = searchQueue.poll();",
      "info" : "VariableDeclarationStatement[24406-24440]:VariableDeclarationStatement[24406-24440]"
    }, {
      "left" : "found = next.getType() == token;",
      "right" : "found = next.getType() == token;",
      "info" : "ExpressionStatement[24451-24483]:ExpressionStatement[24451-24483]"
    }, {
      "left" : "if (found)",
      "right" : "if (found)",
      "info" : "IfStatement[24494-24618]:IfStatement[24494-24618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24505-24618]:Block[24505-24618]"
    }, {
      "left" : "if (i == tokens.length - 1)",
      "right" : "if (i == tokens.length - 1)",
      "info" : "IfStatement[24519-24573]:IfStatement[24519-24573]"
    }, {
      "left" : "return next;",
      "right" : "return next;",
      "info" : "ReturnStatement[24561-24573]:ReturnStatement[24561-24573]"
    }, {
      "left" : "searchQueue.clear();",
      "right" : "searchQueue.clear();",
      "info" : "ExpressionStatement[24586-24606]:ExpressionStatement[24586-24606]"
    }, {
      "left" : "for (int j = 0; j < next.getChildCount(); ++j)",
      "right" : "for (int j = 0; j < next.getChildCount(); ++j)",
      "info" : "ForStatement[24629-24746]:ForStatement[24629-24746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24676-24746]:Block[24676-24746]"
    }, {
      "left" : "searchQueue.add((ASTNode) next.getChild(j));",
      "right" : "searchQueue.add((ASTNode) next.getChild(j));",
      "info" : "ExpressionStatement[24690-24734]:ExpressionStatement[24690-24734]"
    }, {
      "left" : "if (!found)",
      "right" : "if (!found)",
      "info" : "IfStatement[24765-24799]:IfStatement[24765-24799]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24787-24799]:ReturnStatement[24787-24799]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24814-24826]:ReturnStatement[24814-24826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24909-25080]:Block[24909-25080]"
    }, {
      "left" : "ASTNode parent = (ASTNode) child.parent;",
      "right" : "ASTNode parent = (ASTNode) child.parent;",
      "info" : "VariableDeclarationStatement[24915-24955]:VariableDeclarationStatement[24915-24955]"
    }, {
      "left" : "int childIndex = child.childIndex;",
      "right" : "int childIndex = child.childIndex;",
      "info" : "VariableDeclarationStatement[24960-24994]:VariableDeclarationStatement[24960-24994]"
    }, {
      "left" : "parent.deleteChild(childIndex);",
      "right" : "parent.deleteChild(childIndex);",
      "info" : "ExpressionStatement[24999-25030]:ExpressionStatement[24999-25030]"
    }, {
      "left" : "parent.insertChild(childIndex, newChild);",
      "right" : "parent.insertChild(childIndex, newChild);",
      "info" : "ExpressionStatement[25035-25076]:ExpressionStatement[25035-25076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25311-25936]:Block[25311-25936]"
    }, {
      "left" : "ASTNode optiqOptimizedAST = null;",
      "right" : "ASTNode optiqOptimizedAST = null;",
      "info" : "VariableDeclarationStatement[25317-25350]:VariableDeclarationStatement[25317-25350]"
    }, {
      "left" : "RelNode optimizedOptiqPlan = null;",
      "right" : "RelNode optimizedOptiqPlan = null;",
      "info" : "VariableDeclarationStatement[25355-25389]:VariableDeclarationStatement[25355-25389]"
    }, {
      "left" : "CalcitePlannerAction calcitePlannerAction = new CalcitePlannerAction(prunedPartitions);",
      "right" : "CalcitePlannerAction calcitePlannerAction = new CalcitePlannerAction(prunedPartitions);",
      "info" : "VariableDeclarationStatement[25394-25481]:VariableDeclarationStatement[25394-25481]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[25487-25814]:TryStatement[25487-25814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25491-25658]:Block[25491-25658]"
    }, {
      "left" : "optimizedOptiqPlan = Frameworks.withPlanner(calcitePlannerAction, Frameworks\n          .newConfigBuilder().typeSystem(new HiveTypeSystemImpl()).build());",
      "right" : "optimizedOptiqPlan = Frameworks.withPlanner(calcitePlannerAction, Frameworks\n          .newConfigBuilder().typeSystem(new HiveTypeSystemImpl()).build());",
      "info" : "ExpressionStatement[25499-25652]:ExpressionStatement[25499-25652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25679-25814]:Block[25679-25814]"
    }, {
      "left" : "rethrowCalciteException(e);",
      "right" : "rethrowCalciteException(e);",
      "info" : "ExpressionStatement[25687-25714]:ExpressionStatement[25687-25714]"
    }, {
      "left" : "throw new AssertionError(\"rethrowCalciteException didn't throw for \" + e.getMessage());",
      "right" : "throw new AssertionError(\"rethrowCalciteException didn't throw for \" + e.getMessage());",
      "info" : "ThrowStatement[25721-25808]:ThrowStatement[25721-25808]"
    }, {
      "left" : "optiqOptimizedAST = ASTConverter.convert(optimizedOptiqPlan, topLevelFieldSchema);",
      "right" : "optiqOptimizedAST = ASTConverter.convert(optimizedOptiqPlan, topLevelFieldSchema);",
      "info" : "ExpressionStatement[25819-25901]:ExpressionStatement[25819-25901]"
    }, {
      "left" : "return optiqOptimizedAST;",
      "right" : "return optiqOptimizedAST;",
      "info" : "ReturnStatement[25907-25932]:ReturnStatement[25907-25932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26167-27339]:Block[26167-27339]"
    }, {
      "left" : "RelNode optimizedOptiqPlan = null;",
      "right" : "RelNode optimizedOptiqPlan = null;",
      "info" : "VariableDeclarationStatement[26173-26207]:VariableDeclarationStatement[26173-26207]"
    }, {
      "left" : "CalcitePlannerAction calcitePlannerAction = new CalcitePlannerAction(prunedPartitions);",
      "right" : "CalcitePlannerAction calcitePlannerAction = new CalcitePlannerAction(prunedPartitions);",
      "info" : "VariableDeclarationStatement[26212-26299]:VariableDeclarationStatement[26212-26299]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[26305-26632]:TryStatement[26305-26632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26309-26476]:Block[26309-26476]"
    }, {
      "left" : "optimizedOptiqPlan = Frameworks.withPlanner(calcitePlannerAction, Frameworks\n          .newConfigBuilder().typeSystem(new HiveTypeSystemImpl()).build());",
      "right" : "optimizedOptiqPlan = Frameworks.withPlanner(calcitePlannerAction, Frameworks\n          .newConfigBuilder().typeSystem(new HiveTypeSystemImpl()).build());",
      "info" : "ExpressionStatement[26317-26470]:ExpressionStatement[26317-26470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26497-26632]:Block[26497-26632]"
    }, {
      "left" : "rethrowCalciteException(e);",
      "right" : "rethrowCalciteException(e);",
      "info" : "ExpressionStatement[26505-26532]:ExpressionStatement[26505-26532]"
    }, {
      "left" : "throw new AssertionError(\"rethrowCalciteException didn't throw for \" + e.getMessage());",
      "right" : "throw new AssertionError(\"rethrowCalciteException didn't throw for \" + e.getMessage());",
      "info" : "ThrowStatement[26539-26626]:ThrowStatement[26539-26626]"
    }, {
      "left" : "RelNode modifiedOptimizedOptiqPlan = PlanModifierForReturnPath.convertOpTree(\n            introduceProjectIfNeeded(optimizedOptiqPlan), topLevelFieldSchema);",
      "right" : "RelNode modifiedOptimizedOptiqPlan = PlanModifierForReturnPath.convertOpTree(\n            introduceProjectIfNeeded(optimizedOptiqPlan), topLevelFieldSchema);",
      "info" : "VariableDeclarationStatement[26638-26795]:VariableDeclarationStatement[26638-26795]"
    }, {
      "left" : "LOG.debug(\"Translating the following plan:\\n\" + RelOptUtil.toString(modifiedOptimizedOptiqPlan));",
      "right" : "LOG.debug(\"Translating the following plan:\\n\" + RelOptUtil.toString(modifiedOptimizedOptiqPlan));",
      "info" : "ExpressionStatement[26801-26898]:ExpressionStatement[26801-26898]"
    }, {
      "left" : "Operator<?> hiveRoot = new HiveOpConverter(this, conf, unparseTranslator, topOps,\n        conf.getVar(HiveConf.ConfVars.HIVEMAPREDMODE).equalsIgnoreCase(\"strict\")).convert(modifiedOptimizedOptiqPlan);",
      "right" : "Operator<?> hiveRoot = new HiveOpConverter(this, conf, unparseTranslator, topOps,\n        conf.getVar(HiveConf.ConfVars.HIVEMAPREDMODE).equalsIgnoreCase(\"strict\")).convert(modifiedOptimizedOptiqPlan);",
      "info" : "VariableDeclarationStatement[26903-27103]:VariableDeclarationStatement[26903-27103]"
    }, {
      "left" : "RowResolver hiveRootRR = genRowResolver(hiveRoot, getQB());",
      "right" : "RowResolver hiveRootRR = genRowResolver(hiveRoot, getQB());",
      "info" : "VariableDeclarationStatement[27108-27167]:VariableDeclarationStatement[27108-27167]"
    }, {
      "left" : "opParseCtx.put(hiveRoot, new OpParseContext(hiveRootRR));",
      "right" : "opParseCtx.put(hiveRoot, new OpParseContext(hiveRootRR));",
      "info" : "ExpressionStatement[27172-27229]:ExpressionStatement[27172-27229]"
    }, {
      "left" : "return genFileSinkPlan(getQB().getParseInfo().getClauseNames().iterator().next(), getQB(), hiveRoot);",
      "right" : "return genFileSinkPlan(getQB().getParseInfo().getClauseNames().iterator().next(), getQB(), hiveRoot);",
      "info" : "ReturnStatement[27234-27335]:ReturnStatement[27234-27335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27450-28041]:Block[27450-28041]"
    }, {
      "left" : "RelNode parent = null;",
      "right" : "RelNode parent = null;",
      "info" : "VariableDeclarationStatement[27456-27478]:VariableDeclarationStatement[27456-27478]"
    }, {
      "left" : "RelNode input = optimizedOptiqPlan;",
      "right" : "RelNode input = optimizedOptiqPlan;",
      "info" : "VariableDeclarationStatement[27483-27518]:VariableDeclarationStatement[27483-27518]"
    }, {
      "left" : "RelNode newRoot = optimizedOptiqPlan;",
      "right" : "RelNode newRoot = optimizedOptiqPlan;",
      "info" : "VariableDeclarationStatement[27523-27560]:VariableDeclarationStatement[27523-27560]"
    }, {
      "left" : "while (!(input instanceof Project) && (input instanceof Sort))",
      "right" : "while (!(input instanceof Project) && (input instanceof Sort))",
      "info" : "WhileStatement[27566-27691]:WhileStatement[27566-27691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27629-27691]:Block[27629-27691]"
    }, {
      "left" : "parent = input;",
      "right" : "parent = input;",
      "info" : "ExpressionStatement[27637-27652]:ExpressionStatement[27637-27652]"
    }, {
      "left" : "input = input.getInput(0);",
      "right" : "input = input.getInput(0);",
      "info" : "ExpressionStatement[27659-27685]:ExpressionStatement[27659-27685]"
    }, {
      "left" : "if (!(input instanceof Project))",
      "right" : "if (!(input instanceof Project))",
      "info" : "IfStatement[27697-28016]:IfStatement[27697-28016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27730-28016]:Block[27730-28016]"
    }, {
      "left" : "HiveProject hpRel = HiveProject.create(input,\n          HiveCalciteUtil.getProjsFromBelowAsInputRef(input), input.getRowType().getFieldNames());",
      "right" : "HiveProject hpRel = HiveProject.create(input,\n          HiveCalciteUtil.getProjsFromBelowAsInputRef(input), input.getRowType().getFieldNames());",
      "info" : "VariableDeclarationStatement[27738-27882]:VariableDeclarationStatement[27738-27882]"
    }, {
      "left" : "if (input == optimizedOptiqPlan)",
      "right" : "if (input == optimizedOptiqPlan)",
      "info" : "IfStatement[27889-28010]:IfStatement[27889-28010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27922-27956]:Block[27922-27956]"
    }, {
      "left" : "newRoot = hpRel;",
      "right" : "newRoot = hpRel;",
      "info" : "ExpressionStatement[27932-27948]:ExpressionStatement[27932-27948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27962-28010]:Block[27962-28010]"
    }, {
      "left" : "parent.replaceInput(0, hpRel);",
      "right" : "parent.replaceInput(0, hpRel);",
      "info" : "ExpressionStatement[27972-28002]:ExpressionStatement[27972-28002]"
    }, {
      "left" : "return newRoot;",
      "right" : "return newRoot;",
      "info" : "ReturnStatement[28022-28037]:ReturnStatement[28022-28037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28268-29324]:Block[28268-29324]"
    }, {
      "left" : "Throwable first = (semanticException != null) ? semanticException : e, current = first, cause = current\n        .getCause();",
      "right" : "Throwable first = (semanticException != null) ? semanticException : e, current = first, cause = current\n        .getCause();",
      "info" : "VariableDeclarationStatement[28274-28398]:VariableDeclarationStatement[28274-28398]"
    }, {
      "left" : "while (cause != null)",
      "right" : "while (cause != null)",
      "info" : "WhileStatement[28403-29099]:WhileStatement[28403-29099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28425-29099]:Block[28425-29099]"
    }, {
      "left" : "Throwable causeOfCause = cause.getCause();",
      "right" : "Throwable causeOfCause = cause.getCause();",
      "info" : "VariableDeclarationStatement[28433-28475]:VariableDeclarationStatement[28433-28475]"
    }, {
      "left" : "if (current == first && causeOfCause == null && isUselessCause(first))",
      "right" : "if (current == first && causeOfCause == null && isUselessCause(first))",
      "info" : "IfStatement[28482-29036]:IfStatement[28482-29036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28553-28703]:Block[28553-28703]"
    }, {
      "left" : "first = cause;",
      "right" : "first = cause;",
      "info" : "ExpressionStatement[28666-28680]:ExpressionStatement[28666-28680]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28689-28695]:BreakStatement[28689-28695]"
    }, {
      "left" : "if (causeOfCause != null && isUselessCause(cause)\n          && ExceptionHelper.resetCause(current, causeOfCause))",
      "right" : "if (causeOfCause != null && isUselessCause(cause)\n          && ExceptionHelper.resetCause(current, causeOfCause))",
      "info" : "IfStatement[28709-29036]:IfStatement[28709-29036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28823-29036]:Block[28823-29036]"
    }, {
      "left" : "cause = causeOfCause;",
      "right" : "cause = causeOfCause;",
      "info" : "ExpressionStatement[28935-28956]:ExpressionStatement[28935-28956]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[28965-28974]:ContinueStatement[28965-28974]"
    }, {
      "left" : "current = cause;",
      "right" : "current = cause;",
      "info" : "ExpressionStatement[29043-29059]:ExpressionStatement[29043-29059]"
    }, {
      "left" : "cause = current.getCause();",
      "right" : "cause = current.getCause();",
      "info" : "ExpressionStatement[29066-29093]:ExpressionStatement[29066-29093]"
    }, {
      "left" : "if (first instanceof RuntimeException)",
      "right" : "if (first instanceof RuntimeException)",
      "info" : "IfStatement[29105-29281]:IfStatement[29105-29281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29144-29189]:Block[29144-29189]"
    }, {
      "left" : "throw (RuntimeException) first;",
      "right" : "throw (RuntimeException) first;",
      "info" : "ThrowStatement[29152-29183]:ThrowStatement[29152-29183]"
    }, {
      "left" : "if (first instanceof SemanticException)",
      "right" : "if (first instanceof SemanticException)",
      "info" : "IfStatement[29195-29281]:IfStatement[29195-29281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29235-29281]:Block[29235-29281]"
    }, {
      "left" : "throw (SemanticException) first;",
      "right" : "throw (SemanticException) first;",
      "info" : "ThrowStatement[29243-29275]:ThrowStatement[29243-29275]"
    }, {
      "left" : "throw new RuntimeException(first);",
      "right" : "throw new RuntimeException(first);",
      "info" : "ThrowStatement[29286-29320]:ThrowStatement[29286-29320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29656-29831]:Block[29656-29831]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[29664-29825]:TryStatement[29664-29825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29668-29774]:Block[29668-29774]"
    }, {
      "left" : "Field f = clazz.getDeclaredField(name);",
      "right" : "Field f = clazz.getDeclaredField(name);",
      "info" : "VariableDeclarationStatement[29678-29717]:VariableDeclarationStatement[29678-29717]"
    }, {
      "left" : "f.setAccessible(true);",
      "right" : "f.setAccessible(true);",
      "info" : "ExpressionStatement[29726-29748]:ExpressionStatement[29726-29748]"
    }, {
      "left" : "return f;",
      "right" : "return f;",
      "info" : "ReturnStatement[29757-29766]:ReturnStatement[29757-29766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29795-29825]:Block[29795-29825]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[29805-29817]:ReturnStatement[29805-29817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29908-30508]:Block[29908-30508]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[29916-30483]:TryStatement[29916-30483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29920-30430]:Block[29920-30430]"
    }, {
      "left" : "if (MESSAGE_FIELD == null)",
      "right" : "if (MESSAGE_FIELD == null)",
      "info" : "IfStatement[29930-29980]:IfStatement[29930-29980]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29967-29980]:ReturnStatement[29967-29980]"
    }, {
      "left" : "Field field = (target instanceof InvocationTargetException) ? TARGET_FIELD : CAUSE_FIELD;",
      "right" : "Field field = (target instanceof InvocationTargetException) ? TARGET_FIELD : CAUSE_FIELD;",
      "info" : "VariableDeclarationStatement[29989-30078]:VariableDeclarationStatement[29989-30078]"
    }, {
      "left" : "if (field == null)",
      "right" : "if (field == null)",
      "info" : "IfStatement[30087-30129]:IfStatement[30087-30129]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30116-30129]:ReturnStatement[30116-30129]"
    }, {
      "left" : "Throwable oldCause = target.getCause();",
      "right" : "Throwable oldCause = target.getCause();",
      "info" : "VariableDeclarationStatement[30139-30178]:VariableDeclarationStatement[30139-30178]"
    }, {
      "left" : "String oldMsg = target.getMessage();",
      "right" : "String oldMsg = target.getMessage();",
      "info" : "VariableDeclarationStatement[30187-30223]:VariableDeclarationStatement[30187-30223]"
    }, {
      "left" : "field.set(target, newCause);",
      "right" : "field.set(target, newCause);",
      "info" : "ExpressionStatement[30232-30260]:ExpressionStatement[30232-30260]"
    }, {
      "left" : "if (oldMsg != null && oldMsg.equals(oldCause.toString()))",
      "right" : "if (oldMsg != null && oldMsg.equals(oldCause.toString()))",
      "info" : "IfStatement[30269-30422]:IfStatement[30269-30422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30327-30422]:Block[30327-30422]"
    }, {
      "left" : "MESSAGE_FIELD.set(target, newCause == null ? null : newCause.toString());",
      "right" : "MESSAGE_FIELD.set(target, newCause == null ? null : newCause.toString());",
      "info" : "ExpressionStatement[30339-30412]:ExpressionStatement[30339-30412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30452-30483]:Block[30452-30483]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30462-30475]:ReturnStatement[30462-30475]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[30490-30502]:ReturnStatement[30490-30502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30560-30702]:Block[30560-30702]"
    }, {
      "left" : "return t instanceof RuntimeException || t instanceof InvocationTargetException\n        || t instanceof UndeclaredThrowableException;",
      "right" : "return t instanceof RuntimeException || t instanceof InvocationTargetException\n        || t instanceof UndeclaredThrowableException;",
      "info" : "ReturnStatement[30566-30698]:ReturnStatement[30566-30698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30761-31319]:Block[30761-31319]"
    }, {
      "left" : "RowResolver rr = new RowResolver();",
      "right" : "RowResolver rr = new RowResolver();",
      "info" : "VariableDeclarationStatement[30767-30802]:VariableDeclarationStatement[30767-30802]"
    }, {
      "left" : "String subqAlias = (qb.getAliases().size() == 1 && qb.getSubqAliases().size() == 1) ? qb\n        .getAliases().get(0) : null;",
      "right" : "String subqAlias = (qb.getAliases().size() == 1 && qb.getSubqAliases().size() == 1) ? qb\n        .getAliases().get(0) : null;",
      "info" : "VariableDeclarationStatement[30807-30932]:VariableDeclarationStatement[30807-30932]"
    }, {
      "left" : "for (ColumnInfo ci : op.getSchema().getSignature())",
      "right" : "for (ColumnInfo ci : op.getSchema().getSignature())",
      "info" : "EnhancedForStatement[30938-31299]:EnhancedForStatement[30938-31299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30990-31299]:Block[30990-31299]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[30998-31293]:TryStatement[30998-31293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31002-31216]:Block[31002-31216]"
    }, {
      "left" : "rr.putWithCheck((subqAlias != null) ? subqAlias : ci.getTabAlias(),\n            ci.getAlias() != null ? ci.getAlias() : ci.getInternalName(), ci.getInternalName(),\n            new ColumnInfo(ci));",
      "right" : "rr.putWithCheck((subqAlias != null) ? subqAlias : ci.getTabAlias(),\n            ci.getAlias() != null ? ci.getAlias() : ci.getInternalName(), ci.getInternalName(),\n            new ColumnInfo(ci));",
      "info" : "ExpressionStatement[31012-31208]:ExpressionStatement[31012-31208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31245-31293]:Block[31245-31293]"
    }, {
      "left" : "throw new RuntimeException(e);",
      "right" : "throw new RuntimeException(e);",
      "info" : "ThrowStatement[31255-31285]:ThrowStatement[31255-31285]"
    }, {
      "left" : "return rr;",
      "right" : "return rr;",
      "info" : "ReturnStatement[31305-31315]:ReturnStatement[31305-31315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32163-32214]:Block[32163-32214]"
    }, {
      "left" : "this.partitionCache = partitionCache;",
      "right" : "this.partitionCache = partitionCache;",
      "info" : "ExpressionStatement[32171-32208]:ExpressionStatement[32171-32208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32328-39530]:Block[32328-38483]"
    }, {
      "left" : "RelNode calciteGenPlan = null;",
      "right" : "RelNode calciteGenPlan = null;",
      "info" : "VariableDeclarationStatement[32336-32366]:VariableDeclarationStatement[32336-32366]"
    }, {
      "left" : "RelNode calcitePreCboPlan = null;",
      "right" : "RelNode calcitePreCboPlan = null;",
      "info" : "VariableDeclarationStatement[32373-32406]:VariableDeclarationStatement[32373-32406]"
    }, {
      "left" : "RelNode calciteOptimizedPlan = null;",
      "right" : "RelNode calciteOptimizedPlan = null;",
      "info" : "VariableDeclarationStatement[32413-32449]:VariableDeclarationStatement[32413-32449]"
    }, {
      "left" : "final Double maxSplitSize = (double) HiveConf.getLongVar(\n              conf, HiveConf.ConfVars.MAPREDMAXSPLITSIZE);",
      "right" : "final Double maxSplitSize = (double) HiveConf.getLongVar(\n              conf, HiveConf.ConfVars.MAPREDMAXSPLITSIZE);",
      "info" : "VariableDeclarationStatement[32547-32663]:VariableDeclarationStatement[32547-32663]"
    }, {
      "left" : "final Double maxMemory = (double) HiveConf.getLongVar(\n              conf, HiveConf.ConfVars.HIVECONVERTJOINNOCONDITIONALTASKTHRESHOLD);",
      "right" : "final Double maxMemory = (double) HiveConf.getLongVar(\n              conf, HiveConf.ConfVars.HIVECONVERTJOINNOCONDITIONALTASKTHRESHOLD);",
      "info" : "VariableDeclarationStatement[32670-32806]:VariableDeclarationStatement[32670-32806]"
    }, {
      "left" : "HiveAlgorithmsConf algorithmsConf = new HiveAlgorithmsConf(maxSplitSize, maxMemory);",
      "right" : "HiveAlgorithmsConf algorithmsConf = new HiveAlgorithmsConf(maxSplitSize, maxMemory);",
      "info" : "VariableDeclarationStatement[32813-32897]:VariableDeclarationStatement[32813-32897]"
    }, {
      "left" : "HiveConfigContext confContext = new HiveConfigContext(algorithmsConf);",
      "right" : "HiveConfigContext confContext = new HiveConfigContext(algorithmsConf);",
      "info" : "VariableDeclarationStatement[32904-32974]:VariableDeclarationStatement[32904-32974]"
    }, {
      "left" : "RelOptPlanner planner = HiveVolcanoPlanner.createPlanner(confContext);",
      "right" : "RelOptPlanner planner = HiveVolcanoPlanner.createPlanner(confContext);",
      "info" : "VariableDeclarationStatement[32981-33051]:VariableDeclarationStatement[32981-33051]"
    }, {
      "left" : "final RelOptQuery query = new RelOptQuery(planner);",
      "right" : "final RelOptQuery query = new RelOptQuery(planner);",
      "info" : "VariableDeclarationStatement[33058-33109]:VariableDeclarationStatement[33058-33109]"
    }, {
      "left" : "final RexBuilder rexBuilder = cluster.getRexBuilder();",
      "right" : "final RexBuilder rexBuilder = cluster.getRexBuilder();",
      "info" : "VariableDeclarationStatement[33116-33170]:VariableDeclarationStatement[33116-33170]"
    }, {
      "left" : "cluster = query.createCluster(rexBuilder.getTypeFactory(), rexBuilder);",
      "right" : "cluster = query.createCluster(rexBuilder.getTypeFactory(), rexBuilder);",
      "info" : "ExpressionStatement[33177-33248]:ExpressionStatement[33177-33248]"
    }, {
      "left" : "this.cluster = cluster;",
      "right" : "this.cluster = cluster;",
      "info" : "ExpressionStatement[33256-33279]:ExpressionStatement[33256-33279]"
    }, {
      "left" : "this.relOptSchema = relOptSchema;",
      "right" : "this.relOptSchema = relOptSchema;",
      "info" : "ExpressionStatement[33286-33319]:ExpressionStatement[33286-33319]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[33356-33758]:TryStatement[33356-33758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33360-33650]:Block[33360-33650]"
    }, {
      "left" : "calciteGenPlan = genLogicalPlan(getQB(), true);",
      "right" : "calciteGenPlan = genLogicalPlan(getQB(), true);",
      "info" : "ExpressionStatement[33370-33417]:ExpressionStatement[33370-33417]"
    }, {
      "left" : "topLevelFieldSchema = SemanticAnalyzer.convertRowSchemaToResultSetSchema(\n            relToHiveRR.get(calciteGenPlan),\n            HiveConf.getBoolVar(conf, HiveConf.ConfVars.HIVE_RESULTSET_USE_UNIQUE_COLUMN_NAMES));",
      "right" : "topLevelFieldSchema = SemanticAnalyzer.convertRowSchemaToResultSetSchema(\n            relToHiveRR.get(calciteGenPlan),\n            HiveConf.getBoolVar(conf, HiveConf.ConfVars.HIVE_RESULTSET_USE_UNIQUE_COLUMN_NAMES));",
      "info" : "ExpressionStatement[33426-33642]:ExpressionStatement[33426-33642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33679-33758]:Block[33679-33758]"
    }, {
      "left" : "semanticException = e;",
      "right" : "semanticException = e;",
      "info" : "ExpressionStatement[33689-33711]:ExpressionStatement[33689-33711]"
    }, {
      "left" : "throw new RuntimeException(e);",
      "right" : "throw new RuntimeException(e);",
      "info" : "ThrowStatement[33720-33750]:ThrowStatement[33720-33750]"
    }, {
      "left" : "HiveDefaultRelMetadataProvider mdProvider = new HiveDefaultRelMetadataProvider(conf);",
      "right" : "HiveDefaultRelMetadataProvider mdProvider = new HiveDefaultRelMetadataProvider(conf);",
      "info" : "VariableDeclarationStatement[33794-33879]:VariableDeclarationStatement[33794-33879]"
    }, {
      "left" : "calcitePreCboPlan = applyPreJoinOrderingTransforms(calciteGenPlan,\n              mdProvider.getMetadataProvider());",
      "right" : "calcitePreCboPlan = applyPreJoinOrderingTransforms(calciteGenPlan,\n              mdProvider.getMetadataProvider());",
      "info" : "ExpressionStatement[33934-34049]:ExpressionStatement[33934-34049]"
    }, {
      "left" : "List<RelMetadataProvider> list = Lists.newArrayList();",
      "right" : "List<RelMetadataProvider> list = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[34133-34187]:VariableDeclarationStatement[34133-34187]"
    }, {
      "left" : "list.add(mdProvider.getMetadataProvider());",
      "right" : "list.add(mdProvider.getMetadataProvider());",
      "info" : "ExpressionStatement[34194-34237]:ExpressionStatement[34194-34237]"
    }, {
      "left" : "RelTraitSet desiredTraits = cluster\n          .traitSetOf(HiveRelNode.CONVENTION, RelCollations.EMPTY);",
      "right" : "RelTraitSet desiredTraits = cluster\n          .traitSetOf(HiveRelNode.CONVENTION, RelCollations.EMPTY);",
      "info" : "VariableDeclarationStatement[34244-34347]:VariableDeclarationStatement[34244-34347]"
    }, {
      "left" : "HepProgram hepPgm = null;",
      "right" : "HepProgram hepPgm = null;",
      "info" : "VariableDeclarationStatement[34355-34380]:VariableDeclarationStatement[34355-34380]"
    }, {
      "left" : "HepProgramBuilder hepPgmBldr = new HepProgramBuilder().addMatchOrder(HepMatchOrder.BOTTOM_UP)\n          .addRuleInstance(new JoinToMultiJoinRule(HiveJoin.class));",
      "right" : "HepProgramBuilder hepPgmBldr = new HepProgramBuilder().addMatchOrder(HepMatchOrder.BOTTOM_UP)\n          .addRuleInstance(new JoinToMultiJoinRule(HiveJoin.class));",
      "info" : "VariableDeclarationStatement[34387-34549]:VariableDeclarationStatement[34387-34549]"
    }, {
      "left" : "hepPgmBldr.addRuleInstance(new LoptOptimizeJoinRule(HiveJoin.HIVE_JOIN_FACTORY,\n          HiveProject.DEFAULT_PROJECT_FACTORY, HiveFilter.DEFAULT_FILTER_FACTORY));",
      "right" : "hepPgmBldr.addRuleInstance(new LoptOptimizeJoinRule(HiveJoin.HIVE_JOIN_FACTORY,\n          HiveProject.DEFAULT_PROJECT_FACTORY, HiveFilter.DEFAULT_FILTER_FACTORY));",
      "info" : "ExpressionStatement[34556-34719]:ExpressionStatement[34556-34719]"
    }, {
      "left" : "hepPgmBldr.addRuleInstance(ReduceExpressionsRule.JOIN_INSTANCE);",
      "right" : "hepPgmBldr.addRuleInstance(ReduceExpressionsRule.JOIN_INSTANCE);",
      "info" : "ExpressionStatement[34727-34791]:ExpressionStatement[34727-34791]"
    }, {
      "left" : "hepPgmBldr.addRuleInstance(ReduceExpressionsRule.FILTER_INSTANCE);",
      "right" : "hepPgmBldr.addRuleInstance(ReduceExpressionsRule.FILTER_INSTANCE);",
      "info" : "ExpressionStatement[34798-34864]:ExpressionStatement[34798-34864]"
    }, {
      "left" : "hepPgmBldr.addRuleInstance(ReduceExpressionsRule.PROJECT_INSTANCE);",
      "right" : "hepPgmBldr.addRuleInstance(ReduceExpressionsRule.PROJECT_INSTANCE);",
      "info" : "ExpressionStatement[34871-34938]:ExpressionStatement[34871-34938]"
    }, {
      "left" : "hepPgmBldr.addRuleInstance(ProjectRemoveRule.INSTANCE);",
      "right" : "hepPgmBldr.addRuleInstance(ProjectRemoveRule.INSTANCE);",
      "info" : "ExpressionStatement[34945-35000]:ExpressionStatement[34945-35000]"
    }, {
      "left" : "hepPgmBldr.addRuleInstance(UnionMergeRule.INSTANCE);",
      "right" : "hepPgmBldr.addRuleInstance(UnionMergeRule.INSTANCE);",
      "info" : "ExpressionStatement[35007-35059]:ExpressionStatement[35007-35059]"
    }, {
      "left" : "hepPgmBldr.addRuleInstance(new ProjectMergeRule(false, HiveProject.DEFAULT_PROJECT_FACTORY));",
      "right" : "hepPgmBldr.addRuleInstance(new ProjectMergeRule(false, HiveProject.DEFAULT_PROJECT_FACTORY));",
      "info" : "ExpressionStatement[35066-35159]:ExpressionStatement[35066-35159]"
    }, {
      "left" : "hepPgm = hepPgmBldr.build();",
      "right" : "hepPgm = hepPgmBldr.build();",
      "info" : "ExpressionStatement[35167-35195]:ExpressionStatement[35167-35195]"
    }, {
      "left" : "HepPlanner hepPlanner = new HepPlanner(hepPgm);",
      "right" : "HepPlanner hepPlanner = new HepPlanner(hepPgm);",
      "info" : "VariableDeclarationStatement[35202-35249]:VariableDeclarationStatement[35202-35249]"
    }, {
      "left" : "hepPlanner.registerMetadataProviders(list);",
      "right" : "hepPlanner.registerMetadataProviders(list);",
      "info" : "ExpressionStatement[35257-35300]:ExpressionStatement[35257-35300]"
    }, {
      "left" : "RelMetadataProvider chainedProvider = ChainedRelMetadataProvider.of(list);",
      "right" : "RelMetadataProvider chainedProvider = ChainedRelMetadataProvider.of(list);",
      "info" : "VariableDeclarationStatement[35307-35381]:VariableDeclarationStatement[35307-35381]"
    }, {
      "left" : "cluster.setMetadataProvider(new CachingRelMetadataProvider(chainedProvider, hepPlanner));",
      "right" : "cluster.setMetadataProvider(new CachingRelMetadataProvider(chainedProvider, hepPlanner));",
      "info" : "ExpressionStatement[35388-35477]:ExpressionStatement[35388-35477]"
    }, {
      "left" : "RelNode rootRel = calcitePreCboPlan;",
      "right" : "RelNode rootRel = calcitePreCboPlan;",
      "info" : "VariableDeclarationStatement[35485-35521]:VariableDeclarationStatement[35485-35521]"
    }, {
      "left" : "hepPlanner.setRoot(rootRel);",
      "right" : "hepPlanner.setRoot(rootRel);",
      "info" : "ExpressionStatement[35528-35556]:ExpressionStatement[35528-35556]"
    }, {
      "left" : "if (!calcitePreCboPlan.getTraitSet().equals(desiredTraits))",
      "right" : "if (!calcitePreCboPlan.getTraitSet().equals(desiredTraits))",
      "info" : "IfStatement[35563-35709]:IfStatement[35563-35709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35623-35709]:Block[35623-35709]"
    }, {
      "left" : "rootRel = hepPlanner.changeTraits(calcitePreCboPlan, desiredTraits);",
      "right" : "rootRel = hepPlanner.changeTraits(calcitePreCboPlan, desiredTraits);",
      "info" : "ExpressionStatement[35633-35701]:ExpressionStatement[35633-35701]"
    }, {
      "left" : "hepPlanner.setRoot(rootRel);",
      "right" : "hepPlanner.setRoot(rootRel);",
      "info" : "ExpressionStatement[35716-35744]:ExpressionStatement[35716-35744]"
    }, {
      "left" : "calciteOptimizedPlan = hepPlanner.findBestExp();",
      "right" : "calciteOptimizedPlan = hepPlanner.findBestExp();",
      "info" : "ExpressionStatement[35752-35800]:ExpressionStatement[35752-35800]"
    }, {
      "left" : "hepPgmBldr = new HepProgramBuilder().addMatchOrder(HepMatchOrder.BOTTOM_UP);",
      "right" : "calciteOptimizedPlan = hepPlan(calciteOptimizedPlan, false, mdProvider.getMetadataProvider(),\n              HepMatchOrder.BOTTOM_UP, HiveJoinCommuteRule.INSTANCE);",
      "info" : "ExpressionStatement[35880-35956]:ExpressionStatement[35880-36043]"
    }, {
      "left" : "if (HiveConf.getBoolVar(conf, ConfVars.HIVE_CBO_RETPATH_HIVEOP))",
      "right" : "if (HiveConf.getBoolVar(conf, ConfVars.HIVE_CBO_RETPATH_HIVEOP))",
      "info" : "IfStatement[36967-39018]:IfStatement[36405-37971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37032-39018]:Block[36470-37971]"
    }, {
      "left" : "hepPgmBldr = hepPgmBldr.addRuleCollection(ImmutableList.of(\n                HiveJoinProjectTransposeRule.BOTH_PROJECT,\n                HiveJoinToMultiJoinRule.INSTANCE,\n                HiveProjectMergeRule.INSTANCE));",
      "right" : "calciteOptimizedPlan = hepPlan(calciteOptimizedPlan, true, mdProvider.getMetadataProvider(),\n                HepMatchOrder.BOTTOM_UP, HiveJoinProjectTransposeRule.BOTH_PROJECT,\n                HiveJoinToMultiJoinRule.INSTANCE, HiveProjectMergeRule.INSTANCE);",
      "info" : "ExpressionStatement[37263-37480]:ExpressionStatement[36546-36804]"
    }, {
      "left" : "HiveRelFieldTrimmer fieldTrimmer = new HiveRelFieldTrimmer(null, HiveProject.DEFAULT_PROJECT_FACTORY,\n            HiveFilter.DEFAULT_FILTER_FACTORY, HiveJoin.HIVE_JOIN_FACTORY,\n            HiveSemiJoin.HIVE_SEMIJOIN_FACTORY, HiveSort.HIVE_SORT_REL_FACTORY,\n            HiveAggregate.HIVE_AGGR_REL_FACTORY, HiveUnion.UNION_REL_FACTORY);",
      "right" : "HiveRelFieldTrimmer fieldTrimmer = new HiveRelFieldTrimmer(null, HiveProject.DEFAULT_PROJECT_FACTORY,\n            HiveFilter.DEFAULT_FILTER_FACTORY, HiveJoin.HIVE_JOIN_FACTORY,\n            HiveSemiJoin.HIVE_SEMIJOIN_FACTORY, HiveSort.HIVE_SORT_REL_FACTORY,\n            HiveAggregate.HIVE_AGGR_REL_FACTORY, HiveUnion.UNION_REL_FACTORY);",
      "info" : "VariableDeclarationStatement[37951-38286]:VariableDeclarationStatement[36961-37296]"
    }, {
      "left" : "calciteOptimizedPlan = fieldTrimmer.trim(calciteOptimizedPlan);",
      "right" : "calciteOptimizedPlan = fieldTrimmer.trim(calciteOptimizedPlan);",
      "info" : "ExpressionStatement[38295-38358]:ExpressionStatement[37305-37368]"
    }, {
      "left" : "if (LOG.isDebugEnabled() && !conf.getBoolVar(ConfVars.HIVE_IN_TEST))",
      "right" : "if (LOG.isDebugEnabled() && !conf.getBoolVar(ConfVars.HIVE_IN_TEST))",
      "info" : "IfStatement[39026-39488]:IfStatement[37979-38441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39095-39488]:Block[38048-38441]"
    }, {
      "left" : "LOG.debug(\"CBO Planning details:\\n\");",
      "right" : "LOG.debug(\"CBO Planning details:\\n\");",
      "info" : "ExpressionStatement[39105-39142]:ExpressionStatement[38058-38095]"
    }, {
      "left" : "LOG.debug(\"Original Plan:\\n\" + RelOptUtil.toString(calciteGenPlan));",
      "right" : "LOG.debug(\"Original Plan:\\n\" + RelOptUtil.toString(calciteGenPlan));",
      "info" : "ExpressionStatement[39151-39219]:ExpressionStatement[38104-38172]"
    }, {
      "left" : "LOG.debug(\"Plan After PPD, PartPruning, ColumnPruning:\\n\"\n            + RelOptUtil.toString(calcitePreCboPlan));",
      "right" : "LOG.debug(\"Plan After PPD, PartPruning, ColumnPruning:\\n\"\n            + RelOptUtil.toString(calcitePreCboPlan));",
      "info" : "ExpressionStatement[39228-39340]:ExpressionStatement[38181-38293]"
    }, {
      "left" : "LOG.debug(\"Plan After Join Reordering:\\n\"\n            + RelOptUtil.toString(calciteOptimizedPlan, SqlExplainLevel.ALL_ATTRIBUTES));",
      "right" : "LOG.debug(\"Plan After Join Reordering:\\n\"\n            + RelOptUtil.toString(calciteOptimizedPlan, SqlExplainLevel.ALL_ATTRIBUTES));",
      "info" : "ExpressionStatement[39349-39480]:ExpressionStatement[38302-38433]"
    }, {
      "left" : "return calciteOptimizedPlan;",
      "right" : "return calciteOptimizedPlan;",
      "info" : "ReturnStatement[39496-39524]:ReturnStatement[38449-38477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39839-42839]:Block[38792-41792]"
    }, {
      "left" : "if (conf.getVar(HiveConf.ConfVars.HIVE_EXECUTION_ENGINE).equals(\"tez\") &&\n          conf.getBoolVar(HiveConf.ConfVars.HIVEOPTIMIZEDISTINCTREWRITE))",
      "right" : "if (conf.getVar(HiveConf.ConfVars.HIVE_EXECUTION_ENGINE).equals(\"tez\") &&\n          conf.getBoolVar(HiveConf.ConfVars.HIVEOPTIMIZEDISTINCTREWRITE))",
      "info" : "IfStatement[40152-40648]:IfStatement[39105-39601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40300-40648]:Block[39253-39601]"
    }, {
      "left" : "basePlan = hepPlan(basePlan, true, mdProvider, HiveExpandDistinctAggregatesRule.INSTANCE);",
      "right" : "basePlan = hepPlan(basePlan, true, mdProvider, HiveExpandDistinctAggregatesRule.INSTANCE);",
      "info" : "ExpressionStatement[40550-40640]:ExpressionStatement[39503-39593]"
    }, {
      "left" : "basePlan = hepPlan(basePlan, true, mdProvider, SemiJoinJoinTransposeRule.INSTANCE,\n          SemiJoinFilterTransposeRule.INSTANCE, SemiJoinProjectTransposeRule.INSTANCE);",
      "right" : "basePlan = hepPlan(basePlan, true, mdProvider, SemiJoinJoinTransposeRule.INSTANCE,\n          SemiJoinFilterTransposeRule.INSTANCE, SemiJoinProjectTransposeRule.INSTANCE);",
      "info" : "ExpressionStatement[40689-40859]:ExpressionStatement[39642-39812]"
    }, {
      "left" : "if (conf.getBoolVar(HiveConf.ConfVars.HIVE_CBO_RETPATH_HIVEOP))",
      "right" : "if (conf.getBoolVar(HiveConf.ConfVars.HIVE_CBO_RETPATH_HIVEOP))",
      "info" : "IfStatement[40900-41062]:IfStatement[39853-40015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40964-41062]:Block[39917-40015]"
    }, {
      "left" : "basePlan = hepPlan(basePlan, true, mdProvider, HiveJoinAddNotNullRule.INSTANCE);",
      "right" : "basePlan = hepPlan(basePlan, true, mdProvider, HiveJoinAddNotNullRule.INSTANCE);",
      "info" : "ExpressionStatement[40974-41054]:ExpressionStatement[39927-40007]"
    }, {
      "left" : "basePlan = hepPlan(basePlan, true, mdProvider,\n          ReduceExpressionsRule.PROJECT_INSTANCE,\n          ReduceExpressionsRule.FILTER_INSTANCE,\n          ReduceExpressionsRule.JOIN_INSTANCE,\n          HivePreFilteringRule.INSTANCE,\n          new HiveFilterProjectTransposeRule(Filter.class, HiveFilter.DEFAULT_FILTER_FACTORY,\n                  HiveProject.class, HiveProject.DEFAULT_PROJECT_FACTORY),\n          new HiveFilterSetOpTransposeRule(HiveFilter.DEFAULT_FILTER_FACTORY),\n          HiveFilterJoinRule.JOIN,\n          HiveFilterJoinRule.FILTER_ON_JOIN,\n          new FilterAggregateTransposeRule(Filter.class,\n              HiveFilter.DEFAULT_FILTER_FACTORY, Aggregate.class));",
      "right" : "basePlan = hepPlan(basePlan, true, mdProvider,\n          ReduceExpressionsRule.PROJECT_INSTANCE,\n          ReduceExpressionsRule.FILTER_INSTANCE,\n          ReduceExpressionsRule.JOIN_INSTANCE,\n          HivePreFilteringRule.INSTANCE,\n          new HiveFilterProjectTransposeRule(Filter.class, HiveFilter.DEFAULT_FILTER_FACTORY,\n                  HiveProject.class, HiveProject.DEFAULT_PROJECT_FACTORY),\n          new HiveFilterSetOpTransposeRule(HiveFilter.DEFAULT_FILTER_FACTORY),\n          HiveFilterJoinRule.JOIN,\n          HiveFilterJoinRule.FILTER_ON_JOIN,\n          new FilterAggregateTransposeRule(Filter.class,\n              HiveFilter.DEFAULT_FILTER_FACTORY, Aggregate.class));",
      "info" : "ExpressionStatement[41138-41824]:ExpressionStatement[40091-40777]"
    }, {
      "left" : "basePlan = hepPlan(basePlan, false, mdProvider, new HiveJoinPushTransitivePredicatesRule(\n          Join.class, HiveFilter.DEFAULT_FILTER_FACTORY),\n          new HivePartitionPruneRule(conf));",
      "right" : "basePlan = hepPlan(basePlan, false, mdProvider, new HiveJoinPushTransitivePredicatesRule(\n          Join.class, HiveFilter.DEFAULT_FILTER_FACTORY),\n          new HivePartitionPruneRule(conf));",
      "info" : "ExpressionStatement[41885-42077]:ExpressionStatement[40838-41030]"
    }, {
      "left" : "HiveRelFieldTrimmer fieldTrimmer = new HiveRelFieldTrimmer(null, HiveProject.DEFAULT_PROJECT_FACTORY,\n          HiveFilter.DEFAULT_FILTER_FACTORY, HiveJoin.HIVE_JOIN_FACTORY,\n          HiveSemiJoin.HIVE_SEMIJOIN_FACTORY, HiveSort.HIVE_SORT_REL_FACTORY,\n          HiveAggregate.HIVE_AGGR_REL_FACTORY, HiveUnion.UNION_REL_FACTORY);",
      "right" : "HiveRelFieldTrimmer fieldTrimmer = new HiveRelFieldTrimmer(null, HiveProject.DEFAULT_PROJECT_FACTORY,\n          HiveFilter.DEFAULT_FILTER_FACTORY, HiveJoin.HIVE_JOIN_FACTORY,\n          HiveSemiJoin.HIVE_SEMIJOIN_FACTORY, HiveSort.HIVE_SORT_REL_FACTORY,\n          HiveAggregate.HIVE_AGGR_REL_FACTORY, HiveUnion.UNION_REL_FACTORY);",
      "info" : "VariableDeclarationStatement[42116-42445]:VariableDeclarationStatement[41069-41398]"
    }, {
      "left" : "basePlan = fieldTrimmer.trim(basePlan);",
      "right" : "basePlan = fieldTrimmer.trim(basePlan);",
      "info" : "ExpressionStatement[42452-42491]:ExpressionStatement[41405-41444]"
    }, {
      "left" : "basePlan = hepPlan(basePlan, true, mdProvider,\n          new FilterProjectTransposeRule(Filter.class, HiveFilter.DEFAULT_FILTER_FACTORY,\n              HiveProject.class, HiveProject.DEFAULT_PROJECT_FACTORY));",
      "right" : "basePlan = hepPlan(basePlan, true, mdProvider,\n          new FilterProjectTransposeRule(Filter.class, HiveFilter.DEFAULT_FILTER_FACTORY,\n              HiveProject.class, HiveProject.DEFAULT_PROJECT_FACTORY));",
      "info" : "ExpressionStatement[42601-42809]:ExpressionStatement[41554-41762]"
    }, {
      "left" : "return basePlan;",
      "right" : "return basePlan;",
      "info" : "ReturnStatement[42817-42833]:ReturnStatement[41770-41786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43183-44394]:Block[42640-43834]"
    }, {
      "left" : "RelNode optimizedRelNode = basePlan;",
      "right" : "RelNode optimizedRelNode = basePlan;",
      "info" : "VariableDeclarationStatement[43192-43228]:VariableDeclarationStatement[42649-42685]"
    }, {
      "left" : "HepProgramBuilder programBuilder = new HepProgramBuilder();",
      "right" : "HepProgramBuilder programBuilder = new HepProgramBuilder();",
      "info" : "VariableDeclarationStatement[43235-43294]:VariableDeclarationStatement[42692-42751]"
    }, {
      "left" : "if (followPlanChanges)",
      "right" : "if (followPlanChanges)",
      "info" : "IfStatement[43301-43625]:IfStatement[42758-43065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43324-43483]:Block[42781-42923]"
    }, {
      "left" : "programBuilder.addMatchOrder(HepMatchOrder.TOP_DOWN);",
      "right" : "programBuilder.addMatchOrder(order);",
      "info" : "ExpressionStatement[43334-43387]:ExpressionStatement[42791-42827]"
    }, {
      "left" : "programBuilder = programBuilder.addRuleCollection(ImmutableList.copyOf(rules));",
      "right" : "programBuilder = programBuilder.addRuleCollection(ImmutableList.copyOf(rules));",
      "info" : "ExpressionStatement[43396-43475]:ExpressionStatement[42836-42915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43489-43625]:Block[42929-43065]"
    }, {
      "left" : "for (RelOptRule r : rules)\n          programBuilder.addRuleInstance(r);",
      "right" : "for (RelOptRule r : rules)\n          programBuilder.addRuleInstance(r);",
      "info" : "EnhancedForStatement[43546-43617]:EnhancedForStatement[42986-43057]"
    }, {
      "left" : "programBuilder.addRuleInstance(r);",
      "right" : "programBuilder.addRuleInstance(r);",
      "info" : "ExpressionStatement[43583-43617]:ExpressionStatement[43023-43057]"
    }, {
      "left" : "HepPlanner planner = new HepPlanner(programBuilder.build());",
      "right" : "HepPlanner planner = new HepPlanner(programBuilder.build());",
      "info" : "VariableDeclarationStatement[43633-43693]:VariableDeclarationStatement[43073-43133]"
    }, {
      "left" : "List<RelMetadataProvider> list = Lists.newArrayList();",
      "right" : "List<RelMetadataProvider> list = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[43700-43754]:VariableDeclarationStatement[43140-43194]"
    }, {
      "left" : "list.add(mdProvider);",
      "right" : "list.add(mdProvider);",
      "info" : "ExpressionStatement[43761-43782]:ExpressionStatement[43201-43222]"
    }, {
      "left" : "planner.registerMetadataProviders(list);",
      "right" : "planner.registerMetadataProviders(list);",
      "info" : "ExpressionStatement[43789-43829]:ExpressionStatement[43229-43269]"
    }, {
      "left" : "RelMetadataProvider chainedProvider = ChainedRelMetadataProvider.of(list);",
      "right" : "RelMetadataProvider chainedProvider = ChainedRelMetadataProvider.of(list);",
      "info" : "VariableDeclarationStatement[43836-43910]:VariableDeclarationStatement[43276-43350]"
    }, {
      "left" : "basePlan.getCluster().setMetadataProvider(\n          new CachingRelMetadataProvider(chainedProvider, planner));",
      "right" : "basePlan.getCluster().setMetadataProvider(\n          new CachingRelMetadataProvider(chainedProvider, planner));",
      "info" : "ExpressionStatement[43917-44028]:ExpressionStatement[43357-43468]"
    }, {
      "left" : "final RexExecutorImpl executor =\n          new RexExecutorImpl(Schemas.createDataContext(null));",
      "right" : "final RexExecutorImpl executor =\n          new RexExecutorImpl(Schemas.createDataContext(null));",
      "info" : "VariableDeclarationStatement[44114-44210]:VariableDeclarationStatement[43554-43650]"
    }, {
      "left" : "basePlan.getCluster().getPlanner().setExecutor(executor);",
      "right" : "basePlan.getCluster().getPlanner().setExecutor(executor);",
      "info" : "ExpressionStatement[44217-44274]:ExpressionStatement[43657-43714]"
    }, {
      "left" : "planner.setRoot(basePlan);",
      "right" : "planner.setRoot(basePlan);",
      "info" : "ExpressionStatement[44282-44308]:ExpressionStatement[43722-43748]"
    }, {
      "left" : "optimizedRelNode = planner.findBestExp();",
      "right" : "optimizedRelNode = planner.findBestExp();",
      "info" : "ExpressionStatement[44315-44356]:ExpressionStatement[43755-43796]"
    }, {
      "left" : "return optimizedRelNode;",
      "right" : "return optimizedRelNode;",
      "info" : "ReturnStatement[44364-44388]:ReturnStatement[43804-43828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44589-49486]:Block[44029-48926]"
    }, {
      "left" : "HiveUnion unionRel = null;",
      "right" : "HiveUnion unionRel = null;",
      "info" : "VariableDeclarationStatement[44597-44623]:VariableDeclarationStatement[44037-44063]"
    }, {
      "left" : "RowResolver leftRR = this.relToHiveRR.get(leftRel);",
      "right" : "RowResolver leftRR = this.relToHiveRR.get(leftRel);",
      "info" : "VariableDeclarationStatement[44729-44780]:VariableDeclarationStatement[44169-44220]"
    }, {
      "left" : "RowResolver rightRR = this.relToHiveRR.get(rightRel);",
      "right" : "RowResolver rightRR = this.relToHiveRR.get(rightRel);",
      "info" : "VariableDeclarationStatement[44787-44840]:VariableDeclarationStatement[44227-44280]"
    }, {
      "left" : "HashMap<String, ColumnInfo> leftmap = leftRR.getFieldMap(leftalias);",
      "right" : "HashMap<String, ColumnInfo> leftmap = leftRR.getFieldMap(leftalias);",
      "info" : "VariableDeclarationStatement[44847-44915]:VariableDeclarationStatement[44287-44355]"
    }, {
      "left" : "HashMap<String, ColumnInfo> rightmap = rightRR.getFieldMap(rightalias);",
      "right" : "HashMap<String, ColumnInfo> rightmap = rightRR.getFieldMap(rightalias);",
      "info" : "VariableDeclarationStatement[44922-44993]:VariableDeclarationStatement[44362-44433]"
    }, {
      "left" : "if (leftmap.size() != rightmap.size())",
      "right" : "if (leftmap.size() != rightmap.size())",
      "info" : "IfStatement[45101-45233]:IfStatement[44541-44673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45140-45233]:Block[44580-44673]"
    }, {
      "left" : "throw new SemanticException(\"Schema of both sides of union should match.\");",
      "right" : "throw new SemanticException(\"Schema of both sides of union should match.\");",
      "info" : "ThrowStatement[45150-45225]:ThrowStatement[44590-44665]"
    }, {
      "left" : "ASTNode tabref = getQB().getAliases().isEmpty() ? null : getQB().getParseInfo()\n          .getSrcForAlias(getQB().getAliases().get(0));",
      "right" : "ASTNode tabref = getQB().getAliases().isEmpty() ? null : getQB().getParseInfo()\n          .getSrcForAlias(getQB().getAliases().get(0));",
      "info" : "VariableDeclarationStatement[45241-45376]:VariableDeclarationStatement[44681-44816]"
    }, {
      "left" : "RowResolver unionoutRR = new RowResolver();",
      "right" : "RowResolver unionoutRR = new RowResolver();",
      "info" : "VariableDeclarationStatement[45456-45499]:VariableDeclarationStatement[44896-44939]"
    }, {
      "left" : "Iterator<Map.Entry<String, ColumnInfo>> lIter = leftmap.entrySet().iterator();",
      "right" : "Iterator<Map.Entry<String, ColumnInfo>> lIter = leftmap.entrySet().iterator();",
      "info" : "VariableDeclarationStatement[45507-45585]:VariableDeclarationStatement[44947-45025]"
    }, {
      "left" : "Iterator<Map.Entry<String, ColumnInfo>> rIter = rightmap.entrySet().iterator();",
      "right" : "Iterator<Map.Entry<String, ColumnInfo>> rIter = rightmap.entrySet().iterator();",
      "info" : "VariableDeclarationStatement[45592-45671]:VariableDeclarationStatement[45032-45111]"
    }, {
      "left" : "while (lIter.hasNext())",
      "right" : "while (lIter.hasNext())",
      "info" : "WhileStatement[45678-46761]:WhileStatement[45118-46201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45702-46761]:Block[45142-46201]"
    }, {
      "left" : "Map.Entry<String, ColumnInfo> lEntry = lIter.next();",
      "right" : "Map.Entry<String, ColumnInfo> lEntry = lIter.next();",
      "info" : "VariableDeclarationStatement[45712-45764]:VariableDeclarationStatement[45152-45204]"
    }, {
      "left" : "Map.Entry<String, ColumnInfo> rEntry = rIter.next();",
      "right" : "Map.Entry<String, ColumnInfo> rEntry = rIter.next();",
      "info" : "VariableDeclarationStatement[45773-45825]:VariableDeclarationStatement[45213-45265]"
    }, {
      "left" : "ColumnInfo lInfo = lEntry.getValue();",
      "right" : "ColumnInfo lInfo = lEntry.getValue();",
      "info" : "VariableDeclarationStatement[45834-45871]:VariableDeclarationStatement[45274-45311]"
    }, {
      "left" : "ColumnInfo rInfo = rEntry.getValue();",
      "right" : "ColumnInfo rInfo = rEntry.getValue();",
      "info" : "VariableDeclarationStatement[45880-45917]:VariableDeclarationStatement[45320-45357]"
    }, {
      "left" : "String field = lEntry.getKey();",
      "right" : "String field = lEntry.getKey();",
      "info" : "VariableDeclarationStatement[45927-45958]:VariableDeclarationStatement[45367-45398]"
    }, {
      "left" : "TypeInfo commonTypeInfo = FunctionRegistry.getCommonClassForUnionAll(lInfo.getType(),\n            rInfo.getType());",
      "right" : "TypeInfo commonTypeInfo = FunctionRegistry.getCommonClassForUnionAll(lInfo.getType(),\n            rInfo.getType());",
      "info" : "VariableDeclarationStatement[46024-46139]:VariableDeclarationStatement[45464-45579]"
    }, {
      "left" : "if (commonTypeInfo == null)",
      "right" : "if (commonTypeInfo == null)",
      "info" : "IfStatement[46148-46519]:IfStatement[45588-45959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46176-46519]:Block[45616-45959]"
    }, {
      "left" : "throw new SemanticException(generateErrorMessage(tabref,\n              \"Schema of both sides of union should match: Column \" + field\n                  + \" is of type \" + lInfo.getType().getTypeName()\n                  + \" on first table and type \" + rInfo.getType().getTypeName()\n                  + \" on second table\"));",
      "right" : "throw new SemanticException(generateErrorMessage(tabref,\n              \"Schema of both sides of union should match: Column \" + field\n                  + \" is of type \" + lInfo.getType().getTypeName()\n                  + \" on first table and type \" + rInfo.getType().getTypeName()\n                  + \" on second table\"));",
      "info" : "ThrowStatement[46188-46509]:ThrowStatement[45628-45949]"
    }, {
      "left" : "ColumnInfo unionColInfo = new ColumnInfo(lInfo);",
      "right" : "ColumnInfo unionColInfo = new ColumnInfo(lInfo);",
      "info" : "VariableDeclarationStatement[46528-46576]:VariableDeclarationStatement[45968-46016]"
    }, {
      "left" : "unionColInfo.setType(FunctionRegistry.getCommonClassForUnionAll(lInfo.getType(),\n            rInfo.getType()));",
      "right" : "unionColInfo.setType(FunctionRegistry.getCommonClassForUnionAll(lInfo.getType(),\n            rInfo.getType()));",
      "info" : "ExpressionStatement[46585-46696]:ExpressionStatement[46025-46136]"
    }, {
      "left" : "unionoutRR.put(unionalias, field, unionColInfo);",
      "right" : "unionoutRR.put(unionalias, field, unionColInfo);",
      "info" : "ExpressionStatement[46705-46753]:ExpressionStatement[46145-46193]"
    }, {
      "left" : "boolean leftNeedsTypeCast = false;",
      "right" : "boolean leftNeedsTypeCast = false;",
      "info" : "VariableDeclarationStatement[46902-46936]:VariableDeclarationStatement[46342-46376]"
    }, {
      "left" : "boolean rightNeedsTypeCast = false;",
      "right" : "boolean rightNeedsTypeCast = false;",
      "info" : "VariableDeclarationStatement[46943-46978]:VariableDeclarationStatement[46383-46418]"
    }, {
      "left" : "List<RexNode> leftProjs = new ArrayList<RexNode>();",
      "right" : "List<RexNode> leftProjs = new ArrayList<RexNode>();",
      "info" : "VariableDeclarationStatement[46985-47036]:VariableDeclarationStatement[46425-46476]"
    }, {
      "left" : "List<RexNode> rightProjs = new ArrayList<RexNode>();",
      "right" : "List<RexNode> rightProjs = new ArrayList<RexNode>();",
      "info" : "VariableDeclarationStatement[47043-47095]:VariableDeclarationStatement[46483-46535]"
    }, {
      "left" : "List<RelDataTypeField> leftRowDT = leftRel.getRowType().getFieldList();",
      "right" : "List<RelDataTypeField> leftRowDT = leftRel.getRowType().getFieldList();",
      "info" : "VariableDeclarationStatement[47102-47173]:VariableDeclarationStatement[46542-46613]"
    }, {
      "left" : "List<RelDataTypeField> rightRowDT = rightRel.getRowType().getFieldList();",
      "right" : "List<RelDataTypeField> rightRowDT = rightRel.getRowType().getFieldList();",
      "info" : "VariableDeclarationStatement[47180-47253]:VariableDeclarationStatement[46620-46693]"
    }, {
      "left" : "RelDataType leftFieldDT;",
      "right" : "RelDataType leftFieldDT;",
      "info" : "VariableDeclarationStatement[47261-47285]:VariableDeclarationStatement[46701-46725]"
    }, {
      "left" : "RelDataType rightFieldDT;",
      "right" : "RelDataType rightFieldDT;",
      "info" : "VariableDeclarationStatement[47292-47317]:VariableDeclarationStatement[46732-46757]"
    }, {
      "left" : "RelDataType unionFieldDT;",
      "right" : "RelDataType unionFieldDT;",
      "info" : "VariableDeclarationStatement[47324-47349]:VariableDeclarationStatement[46764-46789]"
    }, {
      "left" : "for (int i = 0; i < leftRowDT.size(); i++)",
      "right" : "for (int i = 0; i < leftRowDT.size(); i++)",
      "info" : "ForStatement[47356-48524]:ForStatement[46796-47964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47399-48524]:Block[46839-47964]"
    }, {
      "left" : "leftFieldDT = leftRowDT.get(i).getType();",
      "right" : "leftFieldDT = leftRowDT.get(i).getType();",
      "info" : "ExpressionStatement[47409-47450]:ExpressionStatement[46849-46890]"
    }, {
      "left" : "rightFieldDT = rightRowDT.get(i).getType();",
      "right" : "rightFieldDT = rightRowDT.get(i).getType();",
      "info" : "ExpressionStatement[47459-47502]:ExpressionStatement[46899-46942]"
    }, {
      "left" : "if (!leftFieldDT.equals(rightFieldDT))",
      "right" : "if (!leftFieldDT.equals(rightFieldDT))",
      "info" : "IfStatement[47511-48516]:IfStatement[46951-47956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47550-48200]:Block[46990-47640]"
    }, {
      "left" : "unionFieldDT = TypeConverter.convert(unionoutRR.getColumnInfos().get(i).getType(),\n              cluster.getTypeFactory());",
      "right" : "unionFieldDT = TypeConverter.convert(unionoutRR.getColumnInfos().get(i).getType(),\n              cluster.getTypeFactory());",
      "info" : "ExpressionStatement[47562-47685]:ExpressionStatement[47002-47125]"
    }, {
      "left" : "if (!unionFieldDT.equals(leftFieldDT))",
      "right" : "if (!unionFieldDT.equals(leftFieldDT))",
      "info" : "IfStatement[47696-47786]:IfStatement[47136-47226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47735-47786]:Block[47175-47226]"
    }, {
      "left" : "leftNeedsTypeCast = true;",
      "right" : "leftNeedsTypeCast = true;",
      "info" : "ExpressionStatement[47749-47774]:ExpressionStatement[47189-47214]"
    }, {
      "left" : "leftProjs.add(cluster.getRexBuilder().ensureType(unionFieldDT,\n              cluster.getRexBuilder().makeInputRef(leftFieldDT, i), true));",
      "right" : "leftProjs.add(cluster.getRexBuilder().ensureType(unionFieldDT,\n              cluster.getRexBuilder().makeInputRef(leftFieldDT, i), true));",
      "info" : "ExpressionStatement[47797-47935]:ExpressionStatement[47237-47375]"
    }, {
      "left" : "if (!unionFieldDT.equals(rightFieldDT))",
      "right" : "if (!unionFieldDT.equals(rightFieldDT))",
      "info" : "IfStatement[47947-48039]:IfStatement[47387-47479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47987-48039]:Block[47427-47479]"
    }, {
      "left" : "rightNeedsTypeCast = true;",
      "right" : "rightNeedsTypeCast = true;",
      "info" : "ExpressionStatement[48001-48027]:ExpressionStatement[47441-47467]"
    }, {
      "left" : "rightProjs.add(cluster.getRexBuilder().ensureType(unionFieldDT,\n              cluster.getRexBuilder().makeInputRef(rightFieldDT, i), true));",
      "right" : "rightProjs.add(cluster.getRexBuilder().ensureType(unionFieldDT,\n              cluster.getRexBuilder().makeInputRef(rightFieldDT, i), true));",
      "info" : "ExpressionStatement[48050-48190]:ExpressionStatement[47490-47630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48206-48516]:Block[47646-47956]"
    }, {
      "left" : "leftProjs.add(cluster.getRexBuilder().ensureType(leftFieldDT,\n              cluster.getRexBuilder().makeInputRef(leftFieldDT, i), true));",
      "right" : "leftProjs.add(cluster.getRexBuilder().ensureType(leftFieldDT,\n              cluster.getRexBuilder().makeInputRef(leftFieldDT, i), true));",
      "info" : "ExpressionStatement[48218-48355]:ExpressionStatement[47658-47795]"
    }, {
      "left" : "rightProjs.add(cluster.getRexBuilder().ensureType(rightFieldDT,\n              cluster.getRexBuilder().makeInputRef(rightFieldDT, i), true));",
      "right" : "rightProjs.add(cluster.getRexBuilder().ensureType(rightFieldDT,\n              cluster.getRexBuilder().makeInputRef(rightFieldDT, i), true));",
      "info" : "ExpressionStatement[48366-48506]:ExpressionStatement[47806-47946]"
    }, {
      "left" : "RelNode unionLeftInput = leftRel;",
      "right" : "RelNode unionLeftInput = leftRel;",
      "info" : "VariableDeclarationStatement[48642-48675]:VariableDeclarationStatement[48082-48115]"
    }, {
      "left" : "RelNode unionRightInput = rightRel;",
      "right" : "RelNode unionRightInput = rightRel;",
      "info" : "VariableDeclarationStatement[48682-48717]:VariableDeclarationStatement[48122-48157]"
    }, {
      "left" : "if (leftNeedsTypeCast)",
      "right" : "if (leftNeedsTypeCast)",
      "info" : "IfStatement[48724-48872]:IfStatement[48164-48312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48747-48872]:Block[48187-48312]"
    }, {
      "left" : "unionLeftInput = HiveProject.create(leftRel, leftProjs, leftRel.getRowType()\n            .getFieldNames());",
      "right" : "unionLeftInput = HiveProject.create(leftRel, leftProjs, leftRel.getRowType()\n            .getFieldNames());",
      "info" : "ExpressionStatement[48757-48864]:ExpressionStatement[48197-48304]"
    }, {
      "left" : "if (rightNeedsTypeCast)",
      "right" : "if (rightNeedsTypeCast)",
      "info" : "IfStatement[48879-49032]:IfStatement[48319-48472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48903-49032]:Block[48343-48472]"
    }, {
      "left" : "unionRightInput = HiveProject.create(rightRel, rightProjs, rightRel.getRowType()\n            .getFieldNames());",
      "right" : "unionRightInput = HiveProject.create(rightRel, rightProjs, rightRel.getRowType()\n            .getFieldNames());",
      "info" : "ExpressionStatement[48913-49024]:ExpressionStatement[48353-48464]"
    }, {
      "left" : "Builder<RelNode> bldr = new ImmutableList.Builder<RelNode>();",
      "right" : "Builder<RelNode> bldr = new ImmutableList.Builder<RelNode>();",
      "info" : "VariableDeclarationStatement[49072-49133]:VariableDeclarationStatement[48512-48573]"
    }, {
      "left" : "bldr.add(unionLeftInput);",
      "right" : "bldr.add(unionLeftInput);",
      "info" : "ExpressionStatement[49140-49165]:ExpressionStatement[48580-48605]"
    }, {
      "left" : "bldr.add(unionRightInput);",
      "right" : "bldr.add(unionRightInput);",
      "info" : "ExpressionStatement[49172-49198]:ExpressionStatement[48612-48638]"
    }, {
      "left" : "unionRel = new HiveUnion(cluster, TraitsUtil.getDefaultTraitSet(cluster), bldr.build());",
      "right" : "unionRel = new HiveUnion(cluster, TraitsUtil.getDefaultTraitSet(cluster), bldr.build());",
      "info" : "ExpressionStatement[49205-49293]:ExpressionStatement[48645-48733]"
    }, {
      "left" : "relToHiveRR.put(unionRel, unionoutRR);",
      "right" : "relToHiveRR.put(unionRel, unionoutRR);",
      "info" : "ExpressionStatement[49301-49339]:ExpressionStatement[48741-48779]"
    }, {
      "left" : "relToHiveColNameCalcitePosMap.put(unionRel,\n          this.buildHiveToCalciteColumnMap(unionoutRR, unionRel));",
      "right" : "relToHiveColNameCalcitePosMap.put(unionRel,\n          this.buildHiveToCalciteColumnMap(unionoutRR, unionRel));",
      "info" : "ExpressionStatement[49346-49456]:ExpressionStatement[48786-48896]"
    }, {
      "left" : "return unionRel;",
      "right" : "return unionRel;",
      "info" : "ReturnStatement[49464-49480]:ReturnStatement[48904-48920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49632-53607]:Block[49072-53047]"
    }, {
      "left" : "RelNode joinRel = null;",
      "right" : "RelNode joinRel = null;",
      "info" : "VariableDeclarationStatement[49640-49663]:VariableDeclarationStatement[49080-49103]"
    }, {
      "left" : "RowResolver leftRR = this.relToHiveRR.get(leftRel);",
      "right" : "RowResolver leftRR = this.relToHiveRR.get(leftRel);",
      "info" : "VariableDeclarationStatement[49784-49835]:VariableDeclarationStatement[49224-49275]"
    }, {
      "left" : "RowResolver rightRR = this.relToHiveRR.get(rightRel);",
      "right" : "RowResolver rightRR = this.relToHiveRR.get(rightRel);",
      "info" : "VariableDeclarationStatement[49842-49895]:VariableDeclarationStatement[49282-49335]"
    }, {
      "left" : "RowResolver joinRR = null;",
      "right" : "RowResolver joinRR = null;",
      "info" : "VariableDeclarationStatement[49902-49928]:VariableDeclarationStatement[49342-49368]"
    }, {
      "left" : "if (hiveJoinType != JoinType.LEFTSEMI)",
      "right" : "if (hiveJoinType != JoinType.LEFTSEMI)",
      "info" : "IfStatement[49936-50245]:IfStatement[49376-49685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49975-50045]:Block[49415-49485]"
    }, {
      "left" : "joinRR = RowResolver.getCombinedRR(leftRR, rightRR);",
      "right" : "joinRR = RowResolver.getCombinedRR(leftRR, rightRR);",
      "info" : "ExpressionStatement[49985-50037]:ExpressionStatement[49425-49477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50051-50245]:Block[49491-49685]"
    }, {
      "left" : "joinRR = new RowResolver();",
      "right" : "joinRR = new RowResolver();",
      "info" : "ExpressionStatement[50061-50088]:ExpressionStatement[49501-49528]"
    }, {
      "left" : "if (!RowResolver.add(joinRR, leftRR))",
      "right" : "if (!RowResolver.add(joinRR, leftRR))",
      "info" : "IfStatement[50097-50237]:IfStatement[49537-49677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50135-50237]:Block[49575-49677]"
    }, {
      "left" : "LOG.warn(\"Duplicates detected when adding columns to RR: see previous message\");",
      "right" : "LOG.warn(\"Duplicates detected when adding columns to RR: see previous message\");",
      "info" : "ExpressionStatement[50147-50227]:ExpressionStatement[49587-49667]"
    }, {
      "left" : "RexNode calciteJoinCond = null;",
      "right" : "RexNode calciteJoinCond = null;",
      "info" : "VariableDeclarationStatement[50322-50353]:VariableDeclarationStatement[49762-49793]"
    }, {
      "left" : "if (joinCond != null)",
      "right" : "if (joinCond != null)",
      "info" : "IfStatement[50360-51194]:IfStatement[49800-50634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50382-51110]:Block[49822-50550]"
    }, {
      "left" : "JoinTypeCheckCtx jCtx = new JoinTypeCheckCtx(leftRR, rightRR, hiveJoinType);",
      "right" : "JoinTypeCheckCtx jCtx = new JoinTypeCheckCtx(leftRR, rightRR, hiveJoinType);",
      "info" : "VariableDeclarationStatement[50392-50468]:VariableDeclarationStatement[49832-49908]"
    }, {
      "left" : "Map<ASTNode, ExprNodeDesc> exprNodes = JoinCondTypeCheckProcFactory.genExprNode(joinCond,\n            jCtx);",
      "right" : "Map<ASTNode, ExprNodeDesc> exprNodes = JoinCondTypeCheckProcFactory.genExprNode(joinCond,\n            jCtx);",
      "info" : "VariableDeclarationStatement[50477-50585]:VariableDeclarationStatement[49917-50025]"
    }, {
      "left" : "if (jCtx.getError() != null)",
      "right" : "if (jCtx.getError() != null)",
      "info" : "IfStatement[50594-50755]:IfStatement[50034-50195]"
    }, {
      "left" : "throw new SemanticException(SemanticAnalyzer.generateErrorMessage(jCtx.getErrorSrcNode(),\n              jCtx.getError()));",
      "right" : "throw new SemanticException(SemanticAnalyzer.generateErrorMessage(jCtx.getErrorSrcNode(),\n              jCtx.getError()));",
      "info" : "ThrowStatement[50633-50755]:ThrowStatement[50073-50195]"
    }, {
      "left" : "ExprNodeDesc joinCondnExprNode = exprNodes.get(joinCond);",
      "right" : "ExprNodeDesc joinCondnExprNode = exprNodes.get(joinCond);",
      "info" : "VariableDeclarationStatement[50765-50822]:VariableDeclarationStatement[50205-50262]"
    }, {
      "left" : "List<RelNode> inputRels = new ArrayList<RelNode>();",
      "right" : "List<RelNode> inputRels = new ArrayList<RelNode>();",
      "info" : "VariableDeclarationStatement[50832-50883]:VariableDeclarationStatement[50272-50323]"
    }, {
      "left" : "inputRels.add(leftRel);",
      "right" : "inputRels.add(leftRel);",
      "info" : "ExpressionStatement[50892-50915]:ExpressionStatement[50332-50355]"
    }, {
      "left" : "inputRels.add(rightRel);",
      "right" : "inputRels.add(rightRel);",
      "info" : "ExpressionStatement[50924-50948]:ExpressionStatement[50364-50388]"
    }, {
      "left" : "calciteJoinCond = RexNodeConverter.convert(cluster, joinCondnExprNode, inputRels,\n            relToHiveRR, relToHiveColNameCalcitePosMap, false);",
      "right" : "calciteJoinCond = RexNodeConverter.convert(cluster, joinCondnExprNode, inputRels,\n            relToHiveRR, relToHiveColNameCalcitePosMap, false);",
      "info" : "ExpressionStatement[50957-51102]:ExpressionStatement[50397-50542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51116-51194]:Block[50556-50634]"
    }, {
      "left" : "calciteJoinCond = cluster.getRexBuilder().makeLiteral(true);",
      "right" : "calciteJoinCond = cluster.getRexBuilder().makeLiteral(true);",
      "info" : "ExpressionStatement[51126-51186]:ExpressionStatement[50566-50626]"
    }, {
      "left" : "boolean leftSemiJoin = false;",
      "right" : "boolean leftSemiJoin = false;",
      "info" : "VariableDeclarationStatement[51477-51506]:VariableDeclarationStatement[50917-50946]"
    }, {
      "left" : "JoinRelType calciteJoinType;",
      "right" : "JoinRelType calciteJoinType;",
      "info" : "VariableDeclarationStatement[51513-51541]:VariableDeclarationStatement[50953-50981]"
    }, {
      "left" : "switch (hiveJoinType) {\n      case LEFTOUTER:\n        calciteJoinType = JoinRelType.LEFT;\n        break;\n      case RIGHTOUTER:\n        calciteJoinType = JoinRelType.RIGHT;\n        break;\n      case FULLOUTER:\n        calciteJoinType = JoinRelType.FULL;\n        break;\n      case LEFTSEMI:\n        calciteJoinType = JoinRelType.INNER;\n        leftSemiJoin = true;\n        break;\n      case INNER:\n      default:\n        calciteJoinType = JoinRelType.INNER;\n        break;\n      }",
      "right" : "switch (hiveJoinType) {\n      case LEFTOUTER:\n        calciteJoinType = JoinRelType.LEFT;\n        break;\n      case RIGHTOUTER:\n        calciteJoinType = JoinRelType.RIGHT;\n        break;\n      case FULLOUTER:\n        calciteJoinType = JoinRelType.FULL;\n        break;\n      case LEFTSEMI:\n        calciteJoinType = JoinRelType.INNER;\n        leftSemiJoin = true;\n        break;\n      case INNER:\n      default:\n        calciteJoinType = JoinRelType.INNER;\n        break;\n      }",
      "info" : "SwitchStatement[51548-52027]:SwitchStatement[50988-51467]"
    }, {
      "left" : "case LEFTOUTER:",
      "right" : "case LEFTOUTER:",
      "info" : "SwitchCase[51578-51593]:SwitchCase[51018-51033]"
    }, {
      "left" : "calciteJoinType = JoinRelType.LEFT;",
      "right" : "calciteJoinType = JoinRelType.LEFT;",
      "info" : "ExpressionStatement[51602-51637]:ExpressionStatement[51042-51077]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51646-51652]:BreakStatement[51086-51092]"
    }, {
      "left" : "case RIGHTOUTER:",
      "right" : "case RIGHTOUTER:",
      "info" : "SwitchCase[51659-51675]:SwitchCase[51099-51115]"
    }, {
      "left" : "calciteJoinType = JoinRelType.RIGHT;",
      "right" : "calciteJoinType = JoinRelType.RIGHT;",
      "info" : "ExpressionStatement[51684-51720]:ExpressionStatement[51124-51160]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51729-51735]:BreakStatement[51169-51175]"
    }, {
      "left" : "case FULLOUTER:",
      "right" : "case FULLOUTER:",
      "info" : "SwitchCase[51742-51757]:SwitchCase[51182-51197]"
    }, {
      "left" : "calciteJoinType = JoinRelType.FULL;",
      "right" : "calciteJoinType = JoinRelType.FULL;",
      "info" : "ExpressionStatement[51766-51801]:ExpressionStatement[51206-51241]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51810-51816]:BreakStatement[51250-51256]"
    }, {
      "left" : "case LEFTSEMI:",
      "right" : "case LEFTSEMI:",
      "info" : "SwitchCase[51823-51837]:SwitchCase[51263-51277]"
    }, {
      "left" : "calciteJoinType = JoinRelType.INNER;",
      "right" : "calciteJoinType = JoinRelType.INNER;",
      "info" : "ExpressionStatement[51846-51882]:ExpressionStatement[51286-51322]"
    }, {
      "left" : "leftSemiJoin = true;",
      "right" : "leftSemiJoin = true;",
      "info" : "ExpressionStatement[51891-51911]:ExpressionStatement[51331-51351]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51920-51926]:BreakStatement[51360-51366]"
    }, {
      "left" : "case INNER:",
      "right" : "case INNER:",
      "info" : "SwitchCase[51933-51944]:SwitchCase[51373-51384]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[51951-51959]:SwitchCase[51391-51399]"
    }, {
      "left" : "calciteJoinType = JoinRelType.INNER;",
      "right" : "calciteJoinType = JoinRelType.INNER;",
      "info" : "ExpressionStatement[51968-52004]:ExpressionStatement[51408-51444]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52013-52019]:BreakStatement[51453-51459]"
    }, {
      "left" : "if (leftSemiJoin)",
      "right" : "if (leftSemiJoin)",
      "info" : "IfStatement[52035-53388]:IfStatement[51475-52828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52053-53249]:Block[51493-52689]"
    }, {
      "left" : "List<RelDataTypeField> sysFieldList = new ArrayList<RelDataTypeField>();",
      "right" : "List<RelDataTypeField> sysFieldList = new ArrayList<RelDataTypeField>();",
      "info" : "VariableDeclarationStatement[52063-52135]:VariableDeclarationStatement[51503-51575]"
    }, {
      "left" : "List<RexNode> leftJoinKeys = new ArrayList<RexNode>();",
      "right" : "List<RexNode> leftJoinKeys = new ArrayList<RexNode>();",
      "info" : "VariableDeclarationStatement[52144-52198]:VariableDeclarationStatement[51584-51638]"
    }, {
      "left" : "List<RexNode> rightJoinKeys = new ArrayList<RexNode>();",
      "right" : "List<RexNode> rightJoinKeys = new ArrayList<RexNode>();",
      "info" : "VariableDeclarationStatement[52207-52262]:VariableDeclarationStatement[51647-51702]"
    }, {
      "left" : "RexNode nonEquiConds = RelOptUtil.splitJoinCondition(sysFieldList, leftRel, rightRel,\n            calciteJoinCond, leftJoinKeys, rightJoinKeys, null, null);",
      "right" : "RexNode nonEquiConds = RelOptUtil.splitJoinCondition(sysFieldList, leftRel, rightRel,\n            calciteJoinCond, leftJoinKeys, rightJoinKeys, null, null);",
      "info" : "VariableDeclarationStatement[52272-52428]:VariableDeclarationStatement[51712-51868]"
    }, {
      "left" : "if (!nonEquiConds.isAlwaysTrue())",
      "right" : "if (!nonEquiConds.isAlwaysTrue())",
      "info" : "IfStatement[52438-52604]:IfStatement[51878-52044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52472-52604]:Block[51912-52044]"
    }, {
      "left" : "throw new SemanticException(\"Non equality condition not supported in Semi-Join\"\n              + nonEquiConds);",
      "right" : "throw new SemanticException(\"Non equality condition not supported in Semi-Join\"\n              + nonEquiConds);",
      "info" : "ThrowStatement[52484-52594]:ThrowStatement[51924-52034]"
    }, {
      "left" : "RelNode[] inputRels = new RelNode[] { leftRel, rightRel };",
      "right" : "RelNode[] inputRels = new RelNode[] { leftRel, rightRel };",
      "info" : "VariableDeclarationStatement[52614-52672]:VariableDeclarationStatement[52054-52112]"
    }, {
      "left" : "final List<Integer> leftKeys = new ArrayList<Integer>();",
      "right" : "final List<Integer> leftKeys = new ArrayList<Integer>();",
      "info" : "VariableDeclarationStatement[52681-52737]:VariableDeclarationStatement[52121-52177]"
    }, {
      "left" : "final List<Integer> rightKeys = new ArrayList<Integer>();",
      "right" : "final List<Integer> rightKeys = new ArrayList<Integer>();",
      "info" : "VariableDeclarationStatement[52746-52803]:VariableDeclarationStatement[52186-52243]"
    }, {
      "left" : "calciteJoinCond = HiveCalciteUtil.projectNonColumnEquiConditions(\n            HiveProject.DEFAULT_PROJECT_FACTORY, inputRels, leftJoinKeys, rightJoinKeys, 0,\n            leftKeys, rightKeys);",
      "right" : "calciteJoinCond = HiveCalciteUtil.projectNonColumnEquiConditions(\n            HiveProject.DEFAULT_PROJECT_FACTORY, inputRels, leftJoinKeys, rightJoinKeys, 0,\n            leftKeys, rightKeys);",
      "info" : "ExpressionStatement[52812-53003]:ExpressionStatement[52252-52443]"
    }, {
      "left" : "joinRel = HiveSemiJoin.getSemiJoin(cluster, cluster.traitSetOf(HiveRelNode.CONVENTION),\n            inputRels[0], inputRels[1], calciteJoinCond, ImmutableIntList.copyOf(leftKeys),\n            ImmutableIntList.copyOf(rightKeys));",
      "right" : "joinRel = HiveSemiJoin.getSemiJoin(cluster, cluster.traitSetOf(HiveRelNode.CONVENTION),\n            inputRels[0], inputRels[1], calciteJoinCond, ImmutableIntList.copyOf(leftKeys),\n            ImmutableIntList.copyOf(rightKeys));",
      "info" : "ExpressionStatement[53013-53241]:ExpressionStatement[52453-52681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53255-53388]:Block[52695-52828]"
    }, {
      "left" : "joinRel = HiveJoin.getJoin(cluster, leftRel, rightRel, calciteJoinCond, calciteJoinType,\n            leftSemiJoin);",
      "right" : "joinRel = HiveJoin.getJoin(cluster, leftRel, rightRel, calciteJoinCond, calciteJoinType,\n            leftSemiJoin);",
      "info" : "ExpressionStatement[53265-53380]:ExpressionStatement[52705-52820]"
    }, {
      "left" : "relToHiveColNameCalcitePosMap.put(joinRel, this.buildHiveToCalciteColumnMap(joinRR, joinRel));",
      "right" : "relToHiveColNameCalcitePosMap.put(joinRel, this.buildHiveToCalciteColumnMap(joinRR, joinRel));",
      "info" : "ExpressionStatement[53444-53538]:ExpressionStatement[52884-52978]"
    }, {
      "left" : "relToHiveRR.put(joinRel, joinRR);",
      "right" : "relToHiveRR.put(joinRel, joinRR);",
      "info" : "ExpressionStatement[53545-53578]:ExpressionStatement[52985-53018]"
    }, {
      "left" : "return joinRel;",
      "right" : "return joinRel;",
      "info" : "ReturnStatement[53586-53601]:ReturnStatement[53026-53041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54044-57628]:Block[53484-57068]"
    }, {
      "left" : "RelNode leftRel = null;",
      "right" : "RelNode leftRel = null;",
      "info" : "VariableDeclarationStatement[54052-54075]:VariableDeclarationStatement[53492-53515]"
    }, {
      "left" : "RelNode rightRel = null;",
      "right" : "RelNode rightRel = null;",
      "info" : "VariableDeclarationStatement[54082-54106]:VariableDeclarationStatement[53522-53546]"
    }, {
      "left" : "JoinType hiveJoinType = null;",
      "right" : "JoinType hiveJoinType = null;",
      "info" : "VariableDeclarationStatement[54113-54142]:VariableDeclarationStatement[53553-53582]"
    }, {
      "left" : "if (joinParseTree.getToken().getType() == HiveParser.TOK_UNIQUEJOIN)",
      "right" : "if (joinParseTree.getToken().getType() == HiveParser.TOK_UNIQUEJOIN)",
      "info" : "IfStatement[54150-54469]:IfStatement[53590-53909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54219-54469]:Block[53659-53909]"
    }, {
      "left" : "String msg = String.format(\"UNIQUE JOIN is currently not supported in CBO,\"\n            + \" turn off cbo to use UNIQUE JOIN.\");",
      "right" : "String msg = String.format(\"UNIQUE JOIN is currently not supported in CBO,\"\n            + \" turn off cbo to use UNIQUE JOIN.\");",
      "info" : "VariableDeclarationStatement[54229-54356]:VariableDeclarationStatement[53669-53796]"
    }, {
      "left" : "LOG.debug(msg);",
      "right" : "LOG.debug(msg);",
      "info" : "ExpressionStatement[54365-54380]:ExpressionStatement[53805-53820]"
    }, {
      "left" : "throw new CalciteSemanticException(msg, UnsupportedFeature.Unique_join);",
      "right" : "throw new CalciteSemanticException(msg, UnsupportedFeature.Unique_join);",
      "info" : "ThrowStatement[54389-54461]:ThrowStatement[53829-53901]"
    }, {
      "left" : "switch (joinParseTree.getToken().getType()) {\n      case HiveParser.TOK_LEFTOUTERJOIN:\n        hiveJoinType = JoinType.LEFTOUTER;\n        break;\n      case HiveParser.TOK_RIGHTOUTERJOIN:\n        hiveJoinType = JoinType.RIGHTOUTER;\n        break;\n      case HiveParser.TOK_FULLOUTERJOIN:\n        hiveJoinType = JoinType.FULLOUTER;\n        break;\n      case HiveParser.TOK_LEFTSEMIJOIN:\n        hiveJoinType = JoinType.LEFTSEMI;\n        break;\n      default:\n        hiveJoinType = JoinType.INNER;\n        break;\n      }",
      "right" : "switch (joinParseTree.getToken().getType()) {\n      case HiveParser.TOK_LEFTOUTERJOIN:\n        hiveJoinType = JoinType.LEFTOUTER;\n        break;\n      case HiveParser.TOK_RIGHTOUTERJOIN:\n        hiveJoinType = JoinType.RIGHTOUTER;\n        break;\n      case HiveParser.TOK_FULLOUTERJOIN:\n        hiveJoinType = JoinType.FULLOUTER;\n        break;\n      case HiveParser.TOK_LEFTSEMIJOIN:\n        hiveJoinType = JoinType.LEFTSEMI;\n        break;\n      default:\n        hiveJoinType = JoinType.INNER;\n        break;\n      }",
      "info" : "SwitchStatement[54562-55080]:SwitchStatement[54002-54520]"
    }, {
      "left" : "case HiveParser.TOK_LEFTOUTERJOIN:",
      "right" : "case HiveParser.TOK_LEFTOUTERJOIN:",
      "info" : "SwitchCase[54614-54648]:SwitchCase[54054-54088]"
    }, {
      "left" : "hiveJoinType = JoinType.LEFTOUTER;",
      "right" : "hiveJoinType = JoinType.LEFTOUTER;",
      "info" : "ExpressionStatement[54657-54691]:ExpressionStatement[54097-54131]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54700-54706]:BreakStatement[54140-54146]"
    }, {
      "left" : "case HiveParser.TOK_RIGHTOUTERJOIN:",
      "right" : "case HiveParser.TOK_RIGHTOUTERJOIN:",
      "info" : "SwitchCase[54713-54748]:SwitchCase[54153-54188]"
    }, {
      "left" : "hiveJoinType = JoinType.RIGHTOUTER;",
      "right" : "hiveJoinType = JoinType.RIGHTOUTER;",
      "info" : "ExpressionStatement[54757-54792]:ExpressionStatement[54197-54232]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54801-54807]:BreakStatement[54241-54247]"
    }, {
      "left" : "case HiveParser.TOK_FULLOUTERJOIN:",
      "right" : "case HiveParser.TOK_FULLOUTERJOIN:",
      "info" : "SwitchCase[54814-54848]:SwitchCase[54254-54288]"
    }, {
      "left" : "hiveJoinType = JoinType.FULLOUTER;",
      "right" : "hiveJoinType = JoinType.FULLOUTER;",
      "info" : "ExpressionStatement[54857-54891]:ExpressionStatement[54297-54331]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54900-54906]:BreakStatement[54340-54346]"
    }, {
      "left" : "case HiveParser.TOK_LEFTSEMIJOIN:",
      "right" : "case HiveParser.TOK_LEFTSEMIJOIN:",
      "info" : "SwitchCase[54913-54946]:SwitchCase[54353-54386]"
    }, {
      "left" : "hiveJoinType = JoinType.LEFTSEMI;",
      "right" : "hiveJoinType = JoinType.LEFTSEMI;",
      "info" : "ExpressionStatement[54955-54988]:ExpressionStatement[54395-54428]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54997-55003]:BreakStatement[54437-54443]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[55010-55018]:SwitchCase[54450-54458]"
    }, {
      "left" : "hiveJoinType = JoinType.INNER;",
      "right" : "hiveJoinType = JoinType.INNER;",
      "info" : "ExpressionStatement[55027-55057]:ExpressionStatement[54467-54497]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55066-55072]:BreakStatement[54506-54512]"
    }, {
      "left" : "ASTNode left = (ASTNode) joinParseTree.getChild(0);",
      "right" : "ASTNode left = (ASTNode) joinParseTree.getChild(0);",
      "info" : "VariableDeclarationStatement[55121-55172]:VariableDeclarationStatement[54561-54612]"
    }, {
      "left" : "if ((left.getToken().getType() == HiveParser.TOK_TABREF)\n          || (left.getToken().getType() == HiveParser.TOK_SUBQUERY)\n          || (left.getToken().getType() == HiveParser.TOK_PTBLFUNCTION))",
      "right" : "if ((left.getToken().getType() == HiveParser.TOK_TABREF)\n          || (left.getToken().getType() == HiveParser.TOK_SUBQUERY)\n          || (left.getToken().getType() == HiveParser.TOK_PTBLFUNCTION))",
      "info" : "IfStatement[55179-56303]:IfStatement[54619-55743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55377-56153]:Block[54817-55593]"
    }, {
      "left" : "String tableName = SemanticAnalyzer.getUnescapedUnqualifiedTableName(\n            (ASTNode) left.getChild(0)).toLowerCase();",
      "right" : "String tableName = SemanticAnalyzer.getUnescapedUnqualifiedTableName(\n            (ASTNode) left.getChild(0)).toLowerCase();",
      "info" : "VariableDeclarationStatement[55387-55511]:VariableDeclarationStatement[54827-54951]"
    }, {
      "left" : "String leftTableAlias = left.getChildCount() == 1 ? tableName : SemanticAnalyzer\n            .unescapeIdentifier(left.getChild(left.getChildCount() - 1).getText().toLowerCase());",
      "right" : "String leftTableAlias = left.getChildCount() == 1 ? tableName : SemanticAnalyzer\n            .unescapeIdentifier(left.getChild(left.getChildCount() - 1).getText().toLowerCase());",
      "info" : "VariableDeclarationStatement[55520-55698]:VariableDeclarationStatement[54960-55138]"
    }, {
      "left" : "leftTableAlias = (left.getToken().getType() == HiveParser.TOK_PTBLFUNCTION) ? SemanticAnalyzer\n            .unescapeIdentifier(left.getChild(1).getText().toLowerCase()) : leftTableAlias;",
      "right" : "leftTableAlias = (left.getToken().getType() == HiveParser.TOK_PTBLFUNCTION) ? SemanticAnalyzer\n            .unescapeIdentifier(left.getChild(1).getText().toLowerCase()) : leftTableAlias;",
      "info" : "ExpressionStatement[55909-56095]:ExpressionStatement[55349-55535]"
    }, {
      "left" : "leftRel = aliasToRel.get(leftTableAlias);",
      "right" : "leftRel = aliasToRel.get(leftTableAlias);",
      "info" : "ExpressionStatement[56104-56145]:ExpressionStatement[55544-55585]"
    }, {
      "left" : "if (SemanticAnalyzer.isJoinToken(left))",
      "right" : "if (SemanticAnalyzer.isJoinToken(left))",
      "info" : "IfStatement[56159-56303]:IfStatement[55599-55743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56199-56264]:Block[55639-55704]"
    }, {
      "left" : "leftRel = genJoinLogicalPlan(left, aliasToRel);",
      "right" : "leftRel = genJoinLogicalPlan(left, aliasToRel);",
      "info" : "ExpressionStatement[56209-56256]:ExpressionStatement[55649-55696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56270-56303]:Block[55710-55743]"
    }, {
      "left" : "assert (false);",
      "right" : "assert (false);",
      "info" : "AssertStatement[56280-56295]:AssertStatement[55720-55735]"
    }, {
      "left" : "ASTNode right = (ASTNode) joinParseTree.getChild(1);",
      "right" : "ASTNode right = (ASTNode) joinParseTree.getChild(1);",
      "info" : "VariableDeclarationStatement[56345-56397]:VariableDeclarationStatement[55785-55837]"
    }, {
      "left" : "if ((right.getToken().getType() == HiveParser.TOK_TABREF)\n          || (right.getToken().getType() == HiveParser.TOK_SUBQUERY)\n          || (right.getToken().getType() == HiveParser.TOK_PTBLFUNCTION))",
      "right" : "if ((right.getToken().getType() == HiveParser.TOK_TABREF)\n          || (right.getToken().getType() == HiveParser.TOK_SUBQUERY)\n          || (right.getToken().getType() == HiveParser.TOK_PTBLFUNCTION))",
      "info" : "IfStatement[56404-57431]:IfStatement[55844-56871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56605-57392]:Block[56045-56832]"
    }, {
      "left" : "String tableName = SemanticAnalyzer.getUnescapedUnqualifiedTableName(\n            (ASTNode) right.getChild(0)).toLowerCase();",
      "right" : "String tableName = SemanticAnalyzer.getUnescapedUnqualifiedTableName(\n            (ASTNode) right.getChild(0)).toLowerCase();",
      "info" : "VariableDeclarationStatement[56615-56740]:VariableDeclarationStatement[56055-56180]"
    }, {
      "left" : "String rightTableAlias = right.getChildCount() == 1 ? tableName : SemanticAnalyzer\n            .unescapeIdentifier(right.getChild(right.getChildCount() - 1).getText().toLowerCase());",
      "right" : "String rightTableAlias = right.getChildCount() == 1 ? tableName : SemanticAnalyzer\n            .unescapeIdentifier(right.getChild(right.getChildCount() - 1).getText().toLowerCase());",
      "info" : "VariableDeclarationStatement[56749-56931]:VariableDeclarationStatement[56189-56371]"
    }, {
      "left" : "rightTableAlias = (right.getToken().getType() == HiveParser.TOK_PTBLFUNCTION) ? SemanticAnalyzer\n            .unescapeIdentifier(right.getChild(1).getText().toLowerCase()) : rightTableAlias;",
      "right" : "rightTableAlias = (right.getToken().getType() == HiveParser.TOK_PTBLFUNCTION) ? SemanticAnalyzer\n            .unescapeIdentifier(right.getChild(1).getText().toLowerCase()) : rightTableAlias;",
      "info" : "ExpressionStatement[57142-57332]:ExpressionStatement[56582-56772]"
    }, {
      "left" : "rightRel = aliasToRel.get(rightTableAlias);",
      "right" : "rightRel = aliasToRel.get(rightTableAlias);",
      "info" : "ExpressionStatement[57341-57384]:ExpressionStatement[56781-56824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57398-57431]:Block[56838-56871]"
    }, {
      "left" : "assert (false);",
      "right" : "assert (false);",
      "info" : "AssertStatement[57408-57423]:AssertStatement[56848-56863]"
    }, {
      "left" : "ASTNode joinCond = (ASTNode) joinParseTree.getChild(2);",
      "right" : "ASTNode joinCond = (ASTNode) joinParseTree.getChild(2);",
      "info" : "VariableDeclarationStatement[57466-57521]:VariableDeclarationStatement[56906-56961]"
    }, {
      "left" : "return genJoinRelNode(leftRel, rightRel, hiveJoinType, joinCond);",
      "right" : "return genJoinRelNode(leftRel, rightRel, hiveJoinType, joinCond);",
      "info" : "ReturnStatement[57557-57622]:ReturnStatement[56997-57062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57721-62375]:Block[57161-61815]"
    }, {
      "left" : "RowResolver rr = new RowResolver();",
      "right" : "RowResolver rr = new RowResolver();",
      "info" : "VariableDeclarationStatement[57729-57764]:VariableDeclarationStatement[57169-57204]"
    }, {
      "left" : "HiveTableScan tableRel = null;",
      "right" : "HiveTableScan tableRel = null;",
      "info" : "VariableDeclarationStatement[57771-57801]:VariableDeclarationStatement[57211-57241]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[57809-62345]:TryStatement[57249-61785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57813-62160]:Block[57253-61600]"
    }, {
      "left" : "if (qb.getParseInfo().getTabSample(tableAlias) != null\n            || getNameToSplitSampleMap().containsKey(tableAlias))",
      "right" : "if (qb.getParseInfo().getTabSample(tableAlias) != null\n            || getNameToSplitSampleMap().containsKey(tableAlias))",
      "info" : "IfStatement[57899-58369]:IfStatement[57339-57809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58020-58369]:Block[57460-57809]"
    }, {
      "left" : "String msg = String.format(\"Table Sample specified for %s.\"\n              + \" Currently we don't support Table Sample clauses in CBO,\"\n              + \" turn off cbo for queries on tableSamples.\", tableAlias);",
      "right" : "String msg = String.format(\"Table Sample specified for %s.\"\n              + \" Currently we don't support Table Sample clauses in CBO,\"\n              + \" turn off cbo for queries on tableSamples.\", tableAlias);",
      "info" : "VariableDeclarationStatement[58032-58241]:VariableDeclarationStatement[57472-57681]"
    }, {
      "left" : "LOG.debug(msg);",
      "right" : "LOG.debug(msg);",
      "info" : "ExpressionStatement[58252-58267]:ExpressionStatement[57692-57707]"
    }, {
      "left" : "throw new CalciteSemanticException(msg, UnsupportedFeature.Table_sample_clauses);",
      "right" : "throw new CalciteSemanticException(msg, UnsupportedFeature.Table_sample_clauses);",
      "info" : "ThrowStatement[58278-58359]:ThrowStatement[57718-57799]"
    }, {
      "left" : "Table tabMetaData = qb.getMetaData().getSrcForAlias(tableAlias);",
      "right" : "Table tabMetaData = qb.getMetaData().getSrcForAlias(tableAlias);",
      "info" : "VariableDeclarationStatement[58412-58476]:VariableDeclarationStatement[57852-57916]"
    }, {
      "left" : "@SuppressWarnings(\"deprecation\")\n        StructObjectInspector rowObjectInspector = (StructObjectInspector) tabMetaData.getDeserializer()\n            .getObjectInspector();",
      "right" : "@SuppressWarnings(\"deprecation\")\n        StructObjectInspector rowObjectInspector = (StructObjectInspector) tabMetaData.getDeserializer()\n            .getObjectInspector();",
      "info" : "VariableDeclarationStatement[58717-58889]:VariableDeclarationStatement[58157-58329]"
    }, {
      "left" : "List<? extends StructField> fields = rowObjectInspector.getAllStructFieldRefs();",
      "right" : "List<? extends StructField> fields = rowObjectInspector.getAllStructFieldRefs();",
      "info" : "VariableDeclarationStatement[58898-58978]:VariableDeclarationStatement[58338-58418]"
    }, {
      "left" : "ColumnInfo colInfo;",
      "right" : "ColumnInfo colInfo;",
      "info" : "VariableDeclarationStatement[58987-59006]:VariableDeclarationStatement[58427-58446]"
    }, {
      "left" : "String colName;",
      "right" : "String colName;",
      "info" : "VariableDeclarationStatement[59015-59030]:VariableDeclarationStatement[58455-58470]"
    }, {
      "left" : "ArrayList<ColumnInfo> cInfoLst = new ArrayList<ColumnInfo>();",
      "right" : "ArrayList<ColumnInfo> cInfoLst = new ArrayList<ColumnInfo>();",
      "info" : "VariableDeclarationStatement[59039-59100]:VariableDeclarationStatement[58479-58540]"
    }, {
      "left" : "for (int i = 0; i < fields.size(); i++)",
      "right" : "for (int i = 0; i < fields.size(); i++)",
      "info" : "ForStatement[59109-59624]:ForStatement[58549-59064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59149-59624]:Block[58589-59064]"
    }, {
      "left" : "colName = fields.get(i).getFieldName();",
      "right" : "colName = fields.get(i).getFieldName();",
      "info" : "ExpressionStatement[59161-59200]:ExpressionStatement[58601-58640]"
    }, {
      "left" : "colInfo = new ColumnInfo(\n              fields.get(i).getFieldName(),\n              TypeInfoUtils.getTypeInfoFromObjectInspector(fields.get(i).getFieldObjectInspector()),\n              tableAlias, false);",
      "right" : "colInfo = new ColumnInfo(\n              fields.get(i).getFieldName(),\n              TypeInfoUtils.getTypeInfoFromObjectInspector(fields.get(i).getFieldObjectInspector()),\n              tableAlias, false);",
      "info" : "ExpressionStatement[59211-59415]:ExpressionStatement[58651-58855]"
    }, {
      "left" : "colInfo.setSkewedCol((SemanticAnalyzer.isSkewedCol(tableAlias, qb, colName)) ? true\n              : false);",
      "right" : "colInfo.setSkewedCol((SemanticAnalyzer.isSkewedCol(tableAlias, qb, colName)) ? true\n              : false);",
      "info" : "ExpressionStatement[59426-59533]:ExpressionStatement[58866-58973]"
    }, {
      "left" : "rr.put(tableAlias, colName, colInfo);",
      "right" : "rr.put(tableAlias, colName, colInfo);",
      "info" : "ExpressionStatement[59544-59581]:ExpressionStatement[58984-59021]"
    }, {
      "left" : "cInfoLst.add(colInfo);",
      "right" : "cInfoLst.add(colInfo);",
      "info" : "ExpressionStatement[59592-59614]:ExpressionStatement[59032-59054]"
    }, {
      "left" : "ArrayList<ColumnInfo> nonPartitionColumns = new ArrayList<ColumnInfo>(cInfoLst);",
      "right" : "ArrayList<ColumnInfo> nonPartitionColumns = new ArrayList<ColumnInfo>(cInfoLst);",
      "info" : "VariableDeclarationStatement[59659-59739]:VariableDeclarationStatement[59099-59179]"
    }, {
      "left" : "ArrayList<ColumnInfo> partitionColumns = new ArrayList<ColumnInfo>();",
      "right" : "ArrayList<ColumnInfo> partitionColumns = new ArrayList<ColumnInfo>();",
      "info" : "VariableDeclarationStatement[59748-59817]:VariableDeclarationStatement[59188-59257]"
    }, {
      "left" : "for (FieldSchema part_col : tabMetaData.getPartCols())",
      "right" : "for (FieldSchema part_col : tabMetaData.getPartCols())",
      "info" : "EnhancedForStatement[59893-60256]:EnhancedForStatement[59333-59696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59948-60256]:Block[59388-59696]"
    }, {
      "left" : "colName = part_col.getName();",
      "right" : "colName = part_col.getName();",
      "info" : "ExpressionStatement[59960-59989]:ExpressionStatement[59400-59429]"
    }, {
      "left" : "colInfo = new ColumnInfo(colName,\n              TypeInfoFactory.getPrimitiveTypeInfo(part_col.getType()), tableAlias, true);",
      "right" : "colInfo = new ColumnInfo(colName,\n              TypeInfoFactory.getPrimitiveTypeInfo(part_col.getType()), tableAlias, true);",
      "info" : "ExpressionStatement[60000-60124]:ExpressionStatement[59440-59564]"
    }, {
      "left" : "rr.put(tableAlias, colName, colInfo);",
      "right" : "rr.put(tableAlias, colName, colInfo);",
      "info" : "ExpressionStatement[60135-60172]:ExpressionStatement[59575-59612]"
    }, {
      "left" : "cInfoLst.add(colInfo);",
      "right" : "cInfoLst.add(colInfo);",
      "info" : "ExpressionStatement[60183-60205]:ExpressionStatement[59623-59645]"
    }, {
      "left" : "partitionColumns.add(colInfo);",
      "right" : "partitionColumns.add(colInfo);",
      "info" : "ExpressionStatement[60216-60246]:ExpressionStatement[59656-59686]"
    }, {
      "left" : "List<VirtualColumn> virtualCols = new ArrayList<VirtualColumn>();",
      "right" : "List<VirtualColumn> virtualCols = new ArrayList<VirtualColumn>();",
      "info" : "VariableDeclarationStatement[60330-60395]:VariableDeclarationStatement[59770-59835]"
    }, {
      "left" : "Iterator<VirtualColumn> vcs = VirtualColumn.getRegistry(conf).iterator();",
      "right" : "Iterator<VirtualColumn> vcs = VirtualColumn.getRegistry(conf).iterator();",
      "info" : "VariableDeclarationStatement[60404-60477]:VariableDeclarationStatement[59844-59917]"
    }, {
      "left" : "while (vcs.hasNext())",
      "right" : "while (vcs.hasNext())",
      "info" : "WhileStatement[60486-60795]:WhileStatement[59926-60235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60508-60795]:Block[59948-60235]"
    }, {
      "left" : "VirtualColumn vc = vcs.next();",
      "right" : "VirtualColumn vc = vcs.next();",
      "info" : "VariableDeclarationStatement[60520-60550]:VariableDeclarationStatement[59960-59990]"
    }, {
      "left" : "colInfo = new ColumnInfo(vc.getName(), vc.getTypeInfo(), tableAlias, true,\n              vc.getIsHidden());",
      "right" : "colInfo = new ColumnInfo(vc.getName(), vc.getTypeInfo(), tableAlias, true,\n              vc.getIsHidden());",
      "info" : "ExpressionStatement[60561-60668]:ExpressionStatement[60001-60108]"
    }, {
      "left" : "rr.put(tableAlias, vc.getName(), colInfo);",
      "right" : "rr.put(tableAlias, vc.getName(), colInfo);",
      "info" : "ExpressionStatement[60679-60721]:ExpressionStatement[60119-60161]"
    }, {
      "left" : "cInfoLst.add(colInfo);",
      "right" : "cInfoLst.add(colInfo);",
      "info" : "ExpressionStatement[60732-60754]:ExpressionStatement[60172-60194]"
    }, {
      "left" : "virtualCols.add(vc);",
      "right" : "virtualCols.add(vc);",
      "info" : "ExpressionStatement[60765-60785]:ExpressionStatement[60205-60225]"
    }, {
      "left" : "RelDataType rowType = TypeConverter.getType(cluster, rr, null);",
      "right" : "RelDataType rowType = TypeConverter.getType(cluster, rr, null);",
      "info" : "VariableDeclarationStatement[60859-60922]:VariableDeclarationStatement[60299-60362]"
    }, {
      "left" : "String fullyQualifiedTabName = tabMetaData.getDbName();",
      "right" : "String fullyQualifiedTabName = tabMetaData.getDbName();",
      "info" : "VariableDeclarationStatement[60972-61027]:VariableDeclarationStatement[60412-60467]"
    }, {
      "left" : "if (fullyQualifiedTabName != null && !fullyQualifiedTabName.isEmpty())",
      "right" : "if (fullyQualifiedTabName != null && !fullyQualifiedTabName.isEmpty())",
      "info" : "IfStatement[61036-61297]:IfStatement[60476-60737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61107-61210]:Block[60547-60650]"
    }, {
      "left" : "fullyQualifiedTabName = fullyQualifiedTabName + \".\" + tabMetaData.getTableName();",
      "right" : "fullyQualifiedTabName = fullyQualifiedTabName + \".\" + tabMetaData.getTableName();",
      "info" : "ExpressionStatement[61119-61200]:ExpressionStatement[60559-60640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61224-61297]:Block[60664-60737]"
    }, {
      "left" : "fullyQualifiedTabName = tabMetaData.getTableName();",
      "right" : "fullyQualifiedTabName = tabMetaData.getTableName();",
      "info" : "ExpressionStatement[61236-61287]:ExpressionStatement[60676-60727]"
    }, {
      "left" : "RelOptHiveTable optTable = new RelOptHiveTable(relOptSchema, fullyQualifiedTabName,\n            rowType, tabMetaData, nonPartitionColumns, partitionColumns, virtualCols, conf,\n            partitionCache, noColsMissingStats);",
      "right" : "RelOptHiveTable optTable = new RelOptHiveTable(relOptSchema, fullyQualifiedTabName,\n            rowType, tabMetaData, nonPartitionColumns, partitionColumns, virtualCols, conf,\n            partitionCache, noColsMissingStats);",
      "info" : "VariableDeclarationStatement[61306-61530]:VariableDeclarationStatement[60746-60970]"
    }, {
      "left" : "tableRel = new HiveTableScan(cluster, cluster.traitSetOf(HiveRelNode.CONVENTION), optTable,\n            null == tableAlias ? tabMetaData.getTableName() : tableAlias,\n            getAliasId(tableAlias, qb), HiveConf.getBoolVar(conf,\n                HiveConf.ConfVars.HIVE_CBO_RETPATH_HIVEOP));",
      "right" : "tableRel = new HiveTableScan(cluster, cluster.traitSetOf(HiveRelNode.CONVENTION), optTable,\n            null == tableAlias ? tabMetaData.getTableName() : tableAlias,\n            getAliasId(tableAlias, qb), HiveConf.getBoolVar(conf,\n                HiveConf.ConfVars.HIVE_CBO_RETPATH_HIVEOP));",
      "info" : "ExpressionStatement[61580-61872]:ExpressionStatement[61020-61312]"
    }, {
      "left" : "ImmutableMap<String, Integer> hiveToCalciteColMap = buildHiveToCalciteColumnMap(rr,\n            tableRel);",
      "right" : "ImmutableMap<String, Integer> hiveToCalciteColMap = buildHiveToCalciteColumnMap(rr,\n            tableRel);",
      "info" : "VariableDeclarationStatement[61933-62039]:VariableDeclarationStatement[61373-61479]"
    }, {
      "left" : "relToHiveRR.put(tableRel, rr);",
      "right" : "relToHiveRR.put(tableRel, rr);",
      "info" : "ExpressionStatement[62048-62078]:ExpressionStatement[61488-61518]"
    }, {
      "left" : "relToHiveColNameCalcitePosMap.put(tableRel, hiveToCalciteColMap);",
      "right" : "relToHiveColNameCalcitePosMap.put(tableRel, hiveToCalciteColMap);",
      "info" : "ExpressionStatement[62087-62152]:ExpressionStatement[61527-61592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62181-62345]:Block[61621-61785]"
    }, {
      "left" : "if (e instanceof SemanticException)",
      "right" : "if (e instanceof SemanticException)",
      "info" : "IfStatement[62191-62337]:IfStatement[61631-61777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62227-62277]:Block[61667-61717]"
    }, {
      "left" : "throw (SemanticException) e;",
      "right" : "throw (SemanticException) e;",
      "info" : "ThrowStatement[62239-62267]:ThrowStatement[61679-61707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62283-62337]:Block[61723-61777]"
    }, {
      "left" : "throw (new RuntimeException(e));",
      "right" : "throw (new RuntimeException(e));",
      "info" : "ThrowStatement[62295-62327]:ThrowStatement[61735-61767]"
    }, {
      "left" : "return tableRel;",
      "right" : "return tableRel;",
      "info" : "ReturnStatement[62353-62369]:ReturnStatement[61793-61809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62475-64037]:Block[61915-63477]"
    }, {
      "left" : "ExprNodeDesc filterCondn = genExprNodeDesc(filterExpr, relToHiveRR.get(srcRel));",
      "right" : "ExprNodeDesc filterCondn = genExprNodeDesc(filterExpr, relToHiveRR.get(srcRel));",
      "info" : "VariableDeclarationStatement[62483-62563]:VariableDeclarationStatement[61923-62003]"
    }, {
      "left" : "if (filterCondn instanceof ExprNodeConstantDesc\n          && !filterCondn.getTypeString().equals(serdeConstants.BOOLEAN_TYPE_NAME))",
      "right" : "if (filterCondn instanceof ExprNodeConstantDesc\n          && !filterCondn.getTypeString().equals(serdeConstants.BOOLEAN_TYPE_NAME))",
      "info" : "IfStatement[62570-63264]:IfStatement[62010-62704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62702-63264]:Block[62142-62704]"
    }, {
      "left" : "throw new CalciteSemanticException(\"Filter expression with non-boolean return type.\",\n            UnsupportedFeature.Filter_expression_with_non_boolean_return_type);",
      "right" : "throw new CalciteSemanticException(\"Filter expression with non-boolean return type.\",\n            UnsupportedFeature.Filter_expression_with_non_boolean_return_type);",
      "info" : "ThrowStatement[63091-63256]:ThrowStatement[62531-62696]"
    }, {
      "left" : "ImmutableMap<String, Integer> hiveColNameCalcitePosMap = this.relToHiveColNameCalcitePosMap\n          .get(srcRel);",
      "right" : "ImmutableMap<String, Integer> hiveColNameCalcitePosMap = this.relToHiveColNameCalcitePosMap\n          .get(srcRel);",
      "info" : "VariableDeclarationStatement[63271-63386]:VariableDeclarationStatement[62711-62826]"
    }, {
      "left" : "RexNode convertedFilterExpr = new RexNodeConverter(cluster, srcRel.getRowType(),\n          hiveColNameCalcitePosMap, 0, true).convert(filterCondn);",
      "right" : "RexNode convertedFilterExpr = new RexNodeConverter(cluster, srcRel.getRowType(),\n          hiveColNameCalcitePosMap, 0, true).convert(filterCondn);",
      "info" : "VariableDeclarationStatement[63393-63540]:VariableDeclarationStatement[62833-62980]"
    }, {
      "left" : "RexNode factoredFilterExpr = RexUtil\n          .pullFactors(cluster.getRexBuilder(), convertedFilterExpr);",
      "right" : "RexNode factoredFilterExpr = RexUtil\n          .pullFactors(cluster.getRexBuilder(), convertedFilterExpr);",
      "info" : "VariableDeclarationStatement[63547-63653]:VariableDeclarationStatement[62987-63093]"
    }, {
      "left" : "RelNode filterRel = new HiveFilter(cluster, cluster.traitSetOf(HiveRelNode.CONVENTION),\n          srcRel, factoredFilterExpr);",
      "right" : "RelNode filterRel = new HiveFilter(cluster, cluster.traitSetOf(HiveRelNode.CONVENTION),\n          srcRel, factoredFilterExpr);",
      "info" : "VariableDeclarationStatement[63660-63786]:VariableDeclarationStatement[63100-63226]"
    }, {
      "left" : "this.relToHiveColNameCalcitePosMap.put(filterRel, hiveColNameCalcitePosMap);",
      "right" : "this.relToHiveColNameCalcitePosMap.put(filterRel, hiveColNameCalcitePosMap);",
      "info" : "ExpressionStatement[63793-63869]:ExpressionStatement[63233-63309]"
    }, {
      "left" : "relToHiveRR.put(filterRel, relToHiveRR.get(srcRel));",
      "right" : "relToHiveRR.put(filterRel, relToHiveRR.get(srcRel));",
      "info" : "ExpressionStatement[63876-63928]:ExpressionStatement[63316-63368]"
    }, {
      "left" : "relToHiveColNameCalcitePosMap.put(filterRel, hiveColNameCalcitePosMap);",
      "right" : "relToHiveColNameCalcitePosMap.put(filterRel, hiveColNameCalcitePosMap);",
      "info" : "ExpressionStatement[63935-64006]:ExpressionStatement[63375-63446]"
    }, {
      "left" : "return filterRel;",
      "right" : "return filterRel;",
      "info" : "ReturnStatement[64014-64031]:ReturnStatement[63454-63471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64210-70431]:Block[63650-69871]"
    }, {
      "left" : "int numSrcColumns = srcRel.getRowType().getFieldCount();",
      "right" : "int numSrcColumns = srcRel.getRowType().getFieldCount();",
      "info" : "VariableDeclarationStatement[64843-64899]:VariableDeclarationStatement[64283-64339]"
    }, {
      "left" : "List<ASTNode> subQueriesInOriginalTree = SubQueryUtils.findSubQueries(searchCond);",
      "right" : "List<ASTNode> subQueriesInOriginalTree = SubQueryUtils.findSubQueries(searchCond);",
      "info" : "VariableDeclarationStatement[64906-64988]:VariableDeclarationStatement[64346-64428]"
    }, {
      "left" : "if (subQueriesInOriginalTree.size() > 0)",
      "right" : "if (subQueriesInOriginalTree.size() > 0)",
      "info" : "IfStatement[64995-70373]:IfStatement[64435-69813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65036-70373]:Block[64476-69813]"
    }, {
      "left" : "if (qb.getSubQueryPredicateDef() != null)",
      "right" : "if (qb.getSubQueryPredicateDef() != null)",
      "info" : "IfStatement[65138-65377]:IfStatement[64578-64817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65180-65377]:Block[64620-64817]"
    }, {
      "left" : "throw new SemanticException(ErrorMsg.UNSUPPORTED_SUBQUERY_EXPRESSION.getMsg(\n              subQueriesInOriginalTree.get(0), \"Nested SubQuery expressions are not supported.\"));",
      "right" : "throw new SemanticException(ErrorMsg.UNSUPPORTED_SUBQUERY_EXPRESSION.getMsg(\n              subQueriesInOriginalTree.get(0), \"Nested SubQuery expressions are not supported.\"));",
      "info" : "ThrowStatement[65192-65367]:ThrowStatement[64632-64807]"
    }, {
      "left" : "if (subQueriesInOriginalTree.size() > 1)",
      "right" : "if (subQueriesInOriginalTree.size() > 1)",
      "info" : "IfStatement[65487-65720]:IfStatement[64927-65160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65528-65720]:Block[64968-65160]"
    }, {
      "left" : "throw new SemanticException(ErrorMsg.UNSUPPORTED_SUBQUERY_EXPRESSION.getMsg(\n              subQueriesInOriginalTree.get(1), \"Only 1 SubQuery expression is supported.\"));",
      "right" : "throw new SemanticException(ErrorMsg.UNSUPPORTED_SUBQUERY_EXPRESSION.getMsg(\n              subQueriesInOriginalTree.get(1), \"Only 1 SubQuery expression is supported.\"));",
      "info" : "ThrowStatement[65541-65710]:ThrowStatement[64981-65150]"
    }, {
      "left" : "ASTNode clonedSearchCond = (ASTNode) SubQueryUtils.adaptor.dupTree(searchCond);",
      "right" : "ASTNode clonedSearchCond = (ASTNode) SubQueryUtils.adaptor.dupTree(searchCond);",
      "info" : "VariableDeclarationStatement[65819-65898]:VariableDeclarationStatement[65259-65338]"
    }, {
      "left" : "List<ASTNode> subQueries = SubQueryUtils.findSubQueries(clonedSearchCond);",
      "right" : "List<ASTNode> subQueries = SubQueryUtils.findSubQueries(clonedSearchCond);",
      "info" : "VariableDeclarationStatement[65907-65981]:VariableDeclarationStatement[65347-65421]"
    }, {
      "left" : "RowResolver inputRR = relToHiveRR.get(srcRel);",
      "right" : "RowResolver inputRR = relToHiveRR.get(srcRel);",
      "info" : "VariableDeclarationStatement[65991-66037]:VariableDeclarationStatement[65431-65477]"
    }, {
      "left" : "RowResolver outerQBRR = inputRR;",
      "right" : "RowResolver outerQBRR = inputRR;",
      "info" : "VariableDeclarationStatement[66046-66078]:VariableDeclarationStatement[65486-65518]"
    }, {
      "left" : "ImmutableMap<String, Integer> outerQBPosMap = relToHiveColNameCalcitePosMap.get(srcRel);",
      "right" : "ImmutableMap<String, Integer> outerQBPosMap = relToHiveColNameCalcitePosMap.get(srcRel);",
      "info" : "VariableDeclarationStatement[66087-66175]:VariableDeclarationStatement[65527-65615]"
    }, {
      "left" : "for (int i = 0; i < subQueries.size(); i++)",
      "right" : "for (int i = 0; i < subQueries.size(); i++)",
      "info" : "ForStatement[66185-70232]:ForStatement[65625-69672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66229-70232]:Block[65669-69672]"
    }, {
      "left" : "ASTNode subQueryAST = subQueries.get(i);",
      "right" : "ASTNode subQueryAST = subQueries.get(i);",
      "info" : "VariableDeclarationStatement[66241-66281]:VariableDeclarationStatement[65681-65721]"
    }, {
      "left" : "ASTNode originalSubQueryAST = subQueriesInOriginalTree.get(i);",
      "right" : "ASTNode originalSubQueryAST = subQueriesInOriginalTree.get(i);",
      "info" : "VariableDeclarationStatement[66292-66354]:VariableDeclarationStatement[65732-65794]"
    }, {
      "left" : "int sqIdx = qb.incrNumSubQueryPredicates();",
      "right" : "int sqIdx = qb.incrNumSubQueryPredicates();",
      "info" : "VariableDeclarationStatement[66366-66409]:VariableDeclarationStatement[65806-65849]"
    }, {
      "left" : "clonedSearchCond = SubQueryUtils.rewriteParentQueryWhere(clonedSearchCond, subQueryAST);",
      "right" : "clonedSearchCond = SubQueryUtils.rewriteParentQueryWhere(clonedSearchCond, subQueryAST);",
      "info" : "ExpressionStatement[66420-66508]:ExpressionStatement[65860-65948]"
    }, {
      "left" : "QBSubQuery subQuery = SubQueryUtils.buildSubQuery(qb.getId(), sqIdx, subQueryAST,\n              originalSubQueryAST, ctx);",
      "right" : "QBSubQuery subQuery = SubQueryUtils.buildSubQuery(qb.getId(), sqIdx, subQueryAST,\n              originalSubQueryAST, ctx);",
      "info" : "VariableDeclarationStatement[66520-66642]:VariableDeclarationStatement[65960-66082]"
    }, {
      "left" : "if (!forHavingClause)",
      "right" : "if (!forHavingClause)",
      "info" : "IfStatement[66654-66825]:IfStatement[66094-66265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66676-66747]:Block[66116-66187]"
    }, {
      "left" : "qb.setWhereClauseSubQueryPredicate(subQuery);",
      "right" : "qb.setWhereClauseSubQueryPredicate(subQuery);",
      "info" : "ExpressionStatement[66690-66735]:ExpressionStatement[66130-66175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66753-66825]:Block[66193-66265]"
    }, {
      "left" : "qb.setHavingClauseSubQueryPredicate(subQuery);",
      "right" : "qb.setHavingClauseSubQueryPredicate(subQuery);",
      "info" : "ExpressionStatement[66767-66813]:ExpressionStatement[66207-66253]"
    }, {
      "left" : "String havingInputAlias = null;",
      "right" : "String havingInputAlias = null;",
      "info" : "VariableDeclarationStatement[66836-66867]:VariableDeclarationStatement[66276-66307]"
    }, {
      "left" : "if (forHavingClause)",
      "right" : "if (forHavingClause)",
      "info" : "IfStatement[66879-67016]:IfStatement[66319-66456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66900-67016]:Block[66340-66456]"
    }, {
      "left" : "havingInputAlias = \"gby_sq\" + sqIdx;",
      "right" : "havingInputAlias = \"gby_sq\" + sqIdx;",
      "info" : "ExpressionStatement[66914-66950]:ExpressionStatement[66354-66390]"
    }, {
      "left" : "aliasToRel.put(havingInputAlias, srcRel);",
      "right" : "aliasToRel.put(havingInputAlias, srcRel);",
      "info" : "ExpressionStatement[66963-67004]:ExpressionStatement[66403-66444]"
    }, {
      "left" : "subQuery.validateAndRewriteAST(inputRR, forHavingClause, havingInputAlias,\n              aliasToRel.keySet());",
      "right" : "subQuery.validateAndRewriteAST(inputRR, forHavingClause, havingInputAlias,\n              aliasToRel.keySet());",
      "info" : "ExpressionStatement[67028-67138]:ExpressionStatement[66468-66578]"
    }, {
      "left" : "QB qbSQ = new QB(subQuery.getOuterQueryId(), subQuery.getAlias(), true);",
      "right" : "QB qbSQ = new QB(subQuery.getOuterQueryId(), subQuery.getAlias(), true);",
      "info" : "VariableDeclarationStatement[67150-67222]:VariableDeclarationStatement[66590-66662]"
    }, {
      "left" : "qbSQ.setSubQueryDef(subQuery.getSubQuery());",
      "right" : "qbSQ.setSubQueryDef(subQuery.getSubQuery());",
      "info" : "ExpressionStatement[67233-67277]:ExpressionStatement[66673-66717]"
    }, {
      "left" : "Phase1Ctx ctx_1 = initPhase1Ctx();",
      "right" : "Phase1Ctx ctx_1 = initPhase1Ctx();",
      "info" : "VariableDeclarationStatement[67288-67322]:VariableDeclarationStatement[66728-66762]"
    }, {
      "left" : "doPhase1(subQuery.getSubQueryAST(), qbSQ, ctx_1, null);",
      "right" : "doPhase1(subQuery.getSubQueryAST(), qbSQ, ctx_1, null);",
      "info" : "ExpressionStatement[67333-67388]:ExpressionStatement[66773-66828]"
    }, {
      "left" : "getMetaData(qbSQ);",
      "right" : "getMetaData(qbSQ);",
      "info" : "ExpressionStatement[67399-67417]:ExpressionStatement[66839-66857]"
    }, {
      "left" : "RelNode subQueryRelNode = genLogicalPlan(qbSQ, false);",
      "right" : "RelNode subQueryRelNode = genLogicalPlan(qbSQ, false);",
      "info" : "VariableDeclarationStatement[67428-67482]:VariableDeclarationStatement[66868-66922]"
    }, {
      "left" : "aliasToRel.put(subQuery.getAlias(), subQueryRelNode);",
      "right" : "aliasToRel.put(subQuery.getAlias(), subQueryRelNode);",
      "info" : "ExpressionStatement[67493-67546]:ExpressionStatement[66933-66986]"
    }, {
      "left" : "RowResolver sqRR = relToHiveRR.get(subQueryRelNode);",
      "right" : "RowResolver sqRR = relToHiveRR.get(subQueryRelNode);",
      "info" : "VariableDeclarationStatement[67557-67609]:VariableDeclarationStatement[66997-67049]"
    }, {
      "left" : "if (subQuery.getOperator().getType() != SubQueryType.EXISTS\n              && subQuery.getOperator().getType() != SubQueryType.NOT_EXISTS\n              && sqRR.getColumnInfos().size() - subQuery.getNumOfCorrelationExprsAddedToSQSelect() > 1)",
      "right" : "if (subQuery.getOperator().getType() != SubQueryType.EXISTS\n              && subQuery.getOperator().getType() != SubQueryType.NOT_EXISTS\n              && sqRR.getColumnInfos().size() - subQuery.getNumOfCorrelationExprsAddedToSQSelect() > 1)",
      "info" : "IfStatement[67778-68199]:IfStatement[67218-67639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68019-68199]:Block[67459-67639]"
    }, {
      "left" : "throw new SemanticException(ErrorMsg.INVALID_SUBQUERY_EXPRESSION.getMsg(subQueryAST,\n                \"SubQuery can contain only 1 item in Select List.\"));",
      "right" : "throw new SemanticException(ErrorMsg.INVALID_SUBQUERY_EXPRESSION.getMsg(subQueryAST,\n                \"SubQuery can contain only 1 item in Select List.\"));",
      "info" : "ThrowStatement[68033-68187]:ThrowStatement[67473-67627]"
    }, {
      "left" : "if (subQuery.getNotInCheck() != null)",
      "right" : "if (subQuery.getNotInCheck() != null)",
      "info" : "IfStatement[68428-69431]:IfStatement[67868-68871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68466-69431]:Block[67906-68871]"
    }, {
      "left" : "QBSubQuery.NotInCheck notInCheck = subQuery.getNotInCheck();",
      "right" : "QBSubQuery.NotInCheck notInCheck = subQuery.getNotInCheck();",
      "info" : "VariableDeclarationStatement[68480-68540]:VariableDeclarationStatement[67920-67980]"
    }, {
      "left" : "notInCheck.setSQRR(sqRR);",
      "right" : "notInCheck.setSQRR(sqRR);",
      "info" : "ExpressionStatement[68553-68578]:ExpressionStatement[67993-68018]"
    }, {
      "left" : "QB qbSQ_nic = new QB(subQuery.getOuterQueryId(), notInCheck.getAlias(), true);",
      "right" : "QB qbSQ_nic = new QB(subQuery.getOuterQueryId(), notInCheck.getAlias(), true);",
      "info" : "VariableDeclarationStatement[68591-68669]:VariableDeclarationStatement[68031-68109]"
    }, {
      "left" : "qbSQ_nic.setSubQueryDef(notInCheck.getSubQuery());",
      "right" : "qbSQ_nic.setSubQueryDef(notInCheck.getSubQuery());",
      "info" : "ExpressionStatement[68682-68732]:ExpressionStatement[68122-68172]"
    }, {
      "left" : "ctx_1 = initPhase1Ctx();",
      "right" : "ctx_1 = initPhase1Ctx();",
      "info" : "ExpressionStatement[68745-68769]:ExpressionStatement[68185-68209]"
    }, {
      "left" : "doPhase1(notInCheck.getSubQueryAST(), qbSQ_nic, ctx_1, null);",
      "right" : "doPhase1(notInCheck.getSubQueryAST(), qbSQ_nic, ctx_1, null);",
      "info" : "ExpressionStatement[68782-68843]:ExpressionStatement[68222-68283]"
    }, {
      "left" : "getMetaData(qbSQ_nic);",
      "right" : "getMetaData(qbSQ_nic);",
      "info" : "ExpressionStatement[68856-68878]:ExpressionStatement[68296-68318]"
    }, {
      "left" : "RelNode subQueryNICRelNode = genLogicalPlan(qbSQ_nic, false);",
      "right" : "RelNode subQueryNICRelNode = genLogicalPlan(qbSQ_nic, false);",
      "info" : "VariableDeclarationStatement[68891-68952]:VariableDeclarationStatement[68331-68392]"
    }, {
      "left" : "aliasToRel.put(notInCheck.getAlias(), subQueryNICRelNode);",
      "right" : "aliasToRel.put(notInCheck.getAlias(), subQueryNICRelNode);",
      "info" : "ExpressionStatement[68965-69023]:ExpressionStatement[68405-68463]"
    }, {
      "left" : "srcRel = genJoinRelNode(srcRel, subQueryNICRelNode,\n            // set explicitly to inner until we figure out SemiJoin use\n            // notInCheck.getJoinType(),\n                JoinType.INNER, notInCheck.getJoinConditionAST());",
      "right" : "srcRel = genJoinRelNode(srcRel, subQueryNICRelNode,\n            // set explicitly to inner until we figure out SemiJoin use\n            // notInCheck.getJoinType(),\n                JoinType.INNER, notInCheck.getJoinConditionAST());",
      "info" : "ExpressionStatement[69036-69267]:ExpressionStatement[68476-68707]"
    }, {
      "left" : "inputRR = relToHiveRR.get(srcRel);",
      "right" : "inputRR = relToHiveRR.get(srcRel);",
      "info" : "ExpressionStatement[69280-69314]:ExpressionStatement[68720-68754]"
    }, {
      "left" : "if (forHavingClause)",
      "right" : "if (forHavingClause)",
      "info" : "IfStatement[69327-69419]:IfStatement[68767-68859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69348-69419]:Block[68788-68859]"
    }, {
      "left" : "aliasToRel.put(havingInputAlias, srcRel);",
      "right" : "aliasToRel.put(havingInputAlias, srcRel);",
      "info" : "ExpressionStatement[69364-69405]:ExpressionStatement[68804-68845]"
    }, {
      "left" : "subQuery.buildJoinCondition(inputRR, sqRR, forHavingClause, havingInputAlias);",
      "right" : "subQuery.buildJoinCondition(inputRR, sqRR, forHavingClause, havingInputAlias);",
      "info" : "ExpressionStatement[69525-69603]:ExpressionStatement[68965-69043]"
    }, {
      "left" : "srcRel = genJoinRelNode(srcRel, subQueryRelNode, subQuery.getJoinType(),\n              subQuery.getJoinConditionAST());",
      "right" : "srcRel = genJoinRelNode(srcRel, subQueryRelNode, subQuery.getJoinType(),\n              subQuery.getJoinConditionAST());",
      "info" : "ExpressionStatement[69614-69733]:ExpressionStatement[69054-69173]"
    }, {
      "left" : "searchCond = subQuery.updateOuterQueryFilter(clonedSearchCond);",
      "right" : "searchCond = subQuery.updateOuterQueryFilter(clonedSearchCond);",
      "info" : "ExpressionStatement[69744-69807]:ExpressionStatement[69184-69247]"
    }, {
      "left" : "srcRel = genFilterRelNode(searchCond, srcRel);",
      "right" : "srcRel = genFilterRelNode(searchCond, srcRel);",
      "info" : "ExpressionStatement[69819-69865]:ExpressionStatement[69259-69305]"
    }, {
      "left" : "if (subQuery.getOperator().getType() != SubQueryType.NOT_EXISTS\n              || subQuery.getOperator().getType() != SubQueryType.NOT_IN)",
      "right" : "if (subQuery.getOperator().getType() != SubQueryType.NOT_EXISTS\n              || subQuery.getOperator().getType() != SubQueryType.NOT_IN)",
      "info" : "IfStatement[70005-70222]:IfStatement[69445-69662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70143-70222]:Block[69583-69662]"
    }, {
      "left" : "srcRel = projectLeftOuterSide(srcRel, numSrcColumns);",
      "right" : "srcRel = projectLeftOuterSide(srcRel, numSrcColumns);",
      "info" : "ExpressionStatement[70157-70210]:ExpressionStatement[69597-69650]"
    }, {
      "left" : "relToHiveRR.put(srcRel, outerQBRR);",
      "right" : "relToHiveRR.put(srcRel, outerQBRR);",
      "info" : "ExpressionStatement[70241-70276]:ExpressionStatement[69681-69716]"
    }, {
      "left" : "relToHiveColNameCalcitePosMap.put(srcRel, outerQBPosMap);",
      "right" : "relToHiveColNameCalcitePosMap.put(srcRel, outerQBPosMap);",
      "info" : "ExpressionStatement[70285-70342]:ExpressionStatement[69725-69782]"
    }, {
      "left" : "return srcRel;",
      "right" : "return srcRel;",
      "info" : "ReturnStatement[70351-70365]:ReturnStatement[69791-69805]"
    }, {
      "left" : "return genFilterRelNode(searchCond, srcRel);",
      "right" : "return genFilterRelNode(searchCond, srcRel);",
      "info" : "ReturnStatement[70381-70425]:ReturnStatement[69821-69865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70531-71383]:Block[69971-70823]"
    }, {
      "left" : "RowResolver iRR = relToHiveRR.get(srcRel);",
      "right" : "RowResolver iRR = relToHiveRR.get(srcRel);",
      "info" : "VariableDeclarationStatement[70539-70581]:VariableDeclarationStatement[69979-70021]"
    }, {
      "left" : "RowResolver oRR = new RowResolver();",
      "right" : "RowResolver oRR = new RowResolver();",
      "info" : "VariableDeclarationStatement[70588-70624]:VariableDeclarationStatement[70028-70064]"
    }, {
      "left" : "RowResolver.add(oRR, iRR, numColumns);",
      "right" : "RowResolver.add(oRR, iRR, numColumns);",
      "info" : "ExpressionStatement[70631-70669]:ExpressionStatement[70071-70109]"
    }, {
      "left" : "List<RexNode> calciteColLst = new ArrayList<RexNode>();",
      "right" : "List<RexNode> calciteColLst = new ArrayList<RexNode>();",
      "info" : "VariableDeclarationStatement[70677-70732]:VariableDeclarationStatement[70117-70172]"
    }, {
      "left" : "List<String> oFieldNames = new ArrayList<String>();",
      "right" : "List<String> oFieldNames = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[70739-70790]:VariableDeclarationStatement[70179-70230]"
    }, {
      "left" : "RelDataType iType = srcRel.getRowType();",
      "right" : "RelDataType iType = srcRel.getRowType();",
      "info" : "VariableDeclarationStatement[70797-70837]:VariableDeclarationStatement[70237-70277]"
    }, {
      "left" : "for (int i = 0; i < iType.getFieldCount(); i++)",
      "right" : "for (int i = 0; i < iType.getFieldCount(); i++)",
      "info" : "ForStatement[70845-71134]:ForStatement[70285-70574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70893-71134]:Block[70333-70574]"
    }, {
      "left" : "RelDataTypeField fType = iType.getFieldList().get(i);",
      "right" : "RelDataTypeField fType = iType.getFieldList().get(i);",
      "info" : "VariableDeclarationStatement[70903-70956]:VariableDeclarationStatement[70343-70396]"
    }, {
      "left" : "String fName = iType.getFieldNames().get(i);",
      "right" : "String fName = iType.getFieldNames().get(i);",
      "info" : "VariableDeclarationStatement[70965-71009]:VariableDeclarationStatement[70405-70449]"
    }, {
      "left" : "calciteColLst.add(cluster.getRexBuilder().makeInputRef(fType.getType(), i));",
      "right" : "calciteColLst.add(cluster.getRexBuilder().makeInputRef(fType.getType(), i));",
      "info" : "ExpressionStatement[71018-71094]:ExpressionStatement[70458-70534]"
    }, {
      "left" : "oFieldNames.add(fName);",
      "right" : "oFieldNames.add(fName);",
      "info" : "ExpressionStatement[71103-71126]:ExpressionStatement[70543-70566]"
    }, {
      "left" : "HiveRelNode selRel = HiveProject.create(srcRel, calciteColLst, oFieldNames);",
      "right" : "HiveRelNode selRel = HiveProject.create(srcRel, calciteColLst, oFieldNames);",
      "info" : "VariableDeclarationStatement[71142-71218]:VariableDeclarationStatement[70582-70658]"
    }, {
      "left" : "this.relToHiveColNameCalcitePosMap.put(selRel, buildHiveToCalciteColumnMap(oRR, selRel));",
      "right" : "this.relToHiveColNameCalcitePosMap.put(selRel, buildHiveToCalciteColumnMap(oRR, selRel));",
      "info" : "ExpressionStatement[71226-71315]:ExpressionStatement[70666-70755]"
    }, {
      "left" : "this.relToHiveRR.put(selRel, oRR);",
      "right" : "this.relToHiveRR.put(selRel, oRR);",
      "info" : "ExpressionStatement[71322-71356]:ExpressionStatement[70762-70796]"
    }, {
      "left" : "return selRel;",
      "right" : "return selRel;",
      "info" : "ReturnStatement[71363-71377]:ReturnStatement[70803-70817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71540-71915]:Block[70980-71355]"
    }, {
      "left" : "RelNode filterRel = null;",
      "right" : "RelNode filterRel = null;",
      "info" : "VariableDeclarationStatement[71548-71573]:VariableDeclarationStatement[70988-71013]"
    }, {
      "left" : "Iterator<ASTNode> whereClauseIterator = getQBParseInfo(qb).getDestToWhereExpr().values()\n          .iterator();",
      "right" : "Iterator<ASTNode> whereClauseIterator = getQBParseInfo(qb).getDestToWhereExpr().values()\n          .iterator();",
      "info" : "VariableDeclarationStatement[71581-71692]:VariableDeclarationStatement[71021-71132]"
    }, {
      "left" : "if (whereClauseIterator.hasNext())",
      "right" : "if (whereClauseIterator.hasNext())",
      "info" : "IfStatement[71699-71884]:IfStatement[71139-71324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71734-71884]:Block[71174-71324]"
    }, {
      "left" : "filterRel = genFilterRelNode(qb, (ASTNode) whereClauseIterator.next().getChild(0), srcRel,\n            aliasToRel, forHavingClause);",
      "right" : "filterRel = genFilterRelNode(qb, (ASTNode) whereClauseIterator.next().getChild(0), srcRel,\n            aliasToRel, forHavingClause);",
      "info" : "ExpressionStatement[71744-71876]:ExpressionStatement[71184-71316]"
    }, {
      "left" : "return filterRel;",
      "right" : "return filterRel;",
      "info" : "ReturnStatement[71892-71909]:ReturnStatement[71332-71349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72342-72481]:Block[71782-71921]"
    }, {
      "left" : "m_aggParams = aggParams;",
      "right" : "m_aggParams = aggParams;",
      "info" : "ExpressionStatement[72352-72376]:ExpressionStatement[71792-71816]"
    }, {
      "left" : "m_returnType = returnType;",
      "right" : "m_returnType = returnType;",
      "info" : "ExpressionStatement[72385-72411]:ExpressionStatement[71825-71851]"
    }, {
      "left" : "m_udfName = udfName;",
      "right" : "m_udfName = udfName;",
      "info" : "ExpressionStatement[72420-72440]:ExpressionStatement[71860-71880]"
    }, {
      "left" : "m_distinct = isDistinct;",
      "right" : "m_distinct = isDistinct;",
      "info" : "ExpressionStatement[72449-72473]:ExpressionStatement[71889-71913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72723-74201]:Block[72163-73641]"
    }, {
      "left" : "RelDataType aggFnRetType = TypeConverter.convert(agg.m_returnType,\n          this.cluster.getTypeFactory());",
      "right" : "RelDataType aggFnRetType = TypeConverter.convert(agg.m_returnType,\n          this.cluster.getTypeFactory());",
      "info" : "VariableDeclarationStatement[72775-72883]:VariableDeclarationStatement[72215-72323]"
    }, {
      "left" : "Integer inputIndx;",
      "right" : "Integer inputIndx;",
      "info" : "VariableDeclarationStatement[73063-73081]:VariableDeclarationStatement[72503-72521]"
    }, {
      "left" : "List<Integer> argList = new ArrayList<Integer>();",
      "right" : "List<Integer> argList = new ArrayList<Integer>();",
      "info" : "VariableDeclarationStatement[73088-73137]:VariableDeclarationStatement[72528-72577]"
    }, {
      "left" : "RexNode rexNd = null;",
      "right" : "RexNode rexNd = null;",
      "info" : "VariableDeclarationStatement[73144-73165]:VariableDeclarationStatement[72584-72605]"
    }, {
      "left" : "RelDataTypeFactory dtFactory = this.cluster.getTypeFactory();",
      "right" : "RelDataTypeFactory dtFactory = this.cluster.getTypeFactory();",
      "info" : "VariableDeclarationStatement[73172-73233]:VariableDeclarationStatement[72612-72673]"
    }, {
      "left" : "ImmutableList.Builder<RelDataType> aggArgRelDTBldr = new ImmutableList.Builder<RelDataType>();",
      "right" : "ImmutableList.Builder<RelDataType> aggArgRelDTBldr = new ImmutableList.Builder<RelDataType>();",
      "info" : "VariableDeclarationStatement[73240-73334]:VariableDeclarationStatement[72680-72774]"
    }, {
      "left" : "for (ExprNodeDesc expr : agg.m_aggParams)",
      "right" : "for (ExprNodeDesc expr : agg.m_aggParams)",
      "info" : "EnhancedForStatement[73341-73867]:EnhancedForStatement[72781-73307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73383-73867]:Block[72823-73307]"
    }, {
      "left" : "rexNd = converter.convert(expr);",
      "right" : "rexNd = converter.convert(expr);",
      "info" : "ExpressionStatement[73393-73425]:ExpressionStatement[72833-72865]"
    }, {
      "left" : "inputIndx = rexNodeToPosMap.get(rexNd.toString());",
      "right" : "inputIndx = rexNodeToPosMap.get(rexNd.toString());",
      "info" : "ExpressionStatement[73434-73484]:ExpressionStatement[72874-72924]"
    }, {
      "left" : "if (inputIndx == null)",
      "right" : "if (inputIndx == null)",
      "info" : "IfStatement[73493-73701]:IfStatement[72933-73141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73516-73701]:Block[72956-73141]"
    }, {
      "left" : "gbChildProjLst.add(rexNd);",
      "right" : "gbChildProjLst.add(rexNd);",
      "info" : "ExpressionStatement[73528-73554]:ExpressionStatement[72968-72994]"
    }, {
      "left" : "rexNodeToPosMap.put(rexNd.toString(), childProjLstIndx);",
      "right" : "rexNodeToPosMap.put(rexNd.toString(), childProjLstIndx);",
      "info" : "ExpressionStatement[73565-73621]:ExpressionStatement[73005-73061]"
    }, {
      "left" : "inputIndx = childProjLstIndx;",
      "right" : "inputIndx = childProjLstIndx;",
      "info" : "ExpressionStatement[73632-73661]:ExpressionStatement[73072-73101]"
    }, {
      "left" : "childProjLstIndx++;",
      "right" : "childProjLstIndx++;",
      "info" : "ExpressionStatement[73672-73691]:ExpressionStatement[73112-73131]"
    }, {
      "left" : "argList.add(inputIndx);",
      "right" : "argList.add(inputIndx);",
      "info" : "ExpressionStatement[73710-73733]:ExpressionStatement[73150-73173]"
    }, {
      "left" : "aggArgRelDTBldr.add(TypeConverter.convert(expr.getTypeInfo(), dtFactory));",
      "right" : "aggArgRelDTBldr.add(TypeConverter.convert(expr.getTypeInfo(), dtFactory));",
      "info" : "ExpressionStatement[73785-73859]:ExpressionStatement[73225-73299]"
    }, {
      "left" : "final SqlAggFunction aggregation = SqlFunctionConverter.getCalciteAggFn(agg.m_udfName,\n          aggArgRelDTBldr.build(), aggFnRetType);",
      "right" : "final SqlAggFunction aggregation = SqlFunctionConverter.getCalciteAggFn(agg.m_udfName,\n          aggArgRelDTBldr.build(), aggFnRetType);",
      "info" : "VariableDeclarationStatement[73968-74104]:VariableDeclarationStatement[73408-73544]"
    }, {
      "left" : "return new AggregateCall(aggregation, agg.m_distinct, argList, aggFnRetType, null);",
      "right" : "return new AggregateCall(aggregation, agg.m_distinct, argList, aggFnRetType, null);",
      "info" : "ReturnStatement[74112-74195]:ReturnStatement[73552-73635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74364-77222]:Block[73804-76662]"
    }, {
      "left" : "ImmutableMap<String, Integer> posMap = this.relToHiveColNameCalcitePosMap.get(srcRel);",
      "right" : "ImmutableMap<String, Integer> posMap = this.relToHiveColNameCalcitePosMap.get(srcRel);",
      "info" : "VariableDeclarationStatement[74372-74458]:VariableDeclarationStatement[73812-73898]"
    }, {
      "left" : "RexNodeConverter converter = new RexNodeConverter(this.cluster, srcRel.getRowType(), posMap,\n          0, false);",
      "right" : "RexNodeConverter converter = new RexNodeConverter(this.cluster, srcRel.getRowType(), posMap,\n          0, false);",
      "info" : "VariableDeclarationStatement[74465-74578]:VariableDeclarationStatement[73905-74018]"
    }, {
      "left" : "final boolean hasGroupSets = groupSets != null && !groupSets.isEmpty();",
      "right" : "final boolean hasGroupSets = groupSets != null && !groupSets.isEmpty();",
      "info" : "VariableDeclarationStatement[74586-74657]:VariableDeclarationStatement[74026-74097]"
    }, {
      "left" : "final List<RexNode> gbChildProjLst = Lists.newArrayList();",
      "right" : "final List<RexNode> gbChildProjLst = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[74664-74722]:VariableDeclarationStatement[74104-74162]"
    }, {
      "left" : "final HashMap<String, Integer> rexNodeToPosMap = new HashMap<String, Integer>();",
      "right" : "final HashMap<String, Integer> rexNodeToPosMap = new HashMap<String, Integer>();",
      "info" : "VariableDeclarationStatement[74729-74809]:VariableDeclarationStatement[74169-74249]"
    }, {
      "left" : "final List<Integer> groupSetPositions = Lists.newArrayList();",
      "right" : "final List<Integer> groupSetPositions = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[74816-74877]:VariableDeclarationStatement[74256-74317]"
    }, {
      "left" : "Integer gbIndx = 0;",
      "right" : "Integer gbIndx = 0;",
      "info" : "VariableDeclarationStatement[74884-74903]:VariableDeclarationStatement[74324-74343]"
    }, {
      "left" : "RexNode rnd;",
      "right" : "RexNode rnd;",
      "info" : "VariableDeclarationStatement[74910-74922]:VariableDeclarationStatement[74350-74362]"
    }, {
      "left" : "for (ExprNodeDesc key : gbExprs)",
      "right" : "for (ExprNodeDesc key : gbExprs)",
      "info" : "EnhancedForStatement[74929-75152]:EnhancedForStatement[74369-74592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74962-75152]:Block[74402-74592]"
    }, {
      "left" : "rnd = converter.convert(key);",
      "right" : "rnd = converter.convert(key);",
      "info" : "ExpressionStatement[74972-75001]:ExpressionStatement[74412-74441]"
    }, {
      "left" : "gbChildProjLst.add(rnd);",
      "right" : "gbChildProjLst.add(rnd);",
      "info" : "ExpressionStatement[75010-75034]:ExpressionStatement[74450-74474]"
    }, {
      "left" : "groupSetPositions.add(gbIndx);",
      "right" : "groupSetPositions.add(gbIndx);",
      "info" : "ExpressionStatement[75043-75073]:ExpressionStatement[74483-74513]"
    }, {
      "left" : "rexNodeToPosMap.put(rnd.toString(), gbIndx);",
      "right" : "rexNodeToPosMap.put(rnd.toString(), gbIndx);",
      "info" : "ExpressionStatement[75082-75126]:ExpressionStatement[74522-74566]"
    }, {
      "left" : "gbIndx++;",
      "right" : "gbIndx++;",
      "info" : "ExpressionStatement[75135-75144]:ExpressionStatement[74575-74584]"
    }, {
      "left" : "final ImmutableBitSet groupSet = ImmutableBitSet.of(groupSetPositions);",
      "right" : "final ImmutableBitSet groupSet = ImmutableBitSet.of(groupSetPositions);",
      "info" : "VariableDeclarationStatement[75159-75230]:VariableDeclarationStatement[74599-74670]"
    }, {
      "left" : "List<ImmutableBitSet> transformedGroupSets = null;",
      "right" : "List<ImmutableBitSet> transformedGroupSets = null;",
      "info" : "VariableDeclarationStatement[75338-75388]:VariableDeclarationStatement[74778-74828]"
    }, {
      "left" : "if(hasGroupSets)",
      "right" : "if(hasGroupSets)",
      "info" : "IfStatement[75395-75876]:IfStatement[74835-75316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75412-75876]:Block[74852-75316]"
    }, {
      "left" : "Set<ImmutableBitSet> setTransformedGroupSets =\n                new HashSet<ImmutableBitSet>(groupSets.size());",
      "right" : "Set<ImmutableBitSet> setTransformedGroupSets =\n                new HashSet<ImmutableBitSet>(groupSets.size());",
      "info" : "VariableDeclarationStatement[75422-75532]:VariableDeclarationStatement[74862-74972]"
    }, {
      "left" : "for(int val: groupSets)",
      "right" : "for(int val: groupSets)",
      "info" : "EnhancedForStatement[75541-75629]:EnhancedForStatement[74981-75069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75565-75629]:Block[75005-75069]"
    }, {
      "left" : "setTransformedGroupSets.add(convert(val));",
      "right" : "setTransformedGroupSets.add(convert(val));",
      "info" : "ExpressionStatement[75577-75619]:ExpressionStatement[75017-75059]"
    }, {
      "left" : "transformedGroupSets = new ArrayList<ImmutableBitSet>(setTransformedGroupSets);",
      "right" : "transformedGroupSets = new ArrayList<ImmutableBitSet>(setTransformedGroupSets);",
      "info" : "ExpressionStatement[75713-75792]:ExpressionStatement[75153-75232]"
    }, {
      "left" : "Collections.sort(transformedGroupSets, ImmutableBitSet.COMPARATOR);",
      "right" : "Collections.sort(transformedGroupSets, ImmutableBitSet.COMPARATOR);",
      "info" : "ExpressionStatement[75801-75868]:ExpressionStatement[75241-75308]"
    }, {
      "left" : "List<AggregateCall> aggregateCalls = Lists.newArrayList();",
      "right" : "List<AggregateCall> aggregateCalls = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[75884-75942]:VariableDeclarationStatement[75324-75382]"
    }, {
      "left" : "for (AggInfo agg : aggInfoLst)",
      "right" : "for (AggInfo agg : aggInfoLst)",
      "info" : "EnhancedForStatement[75949-76123]:EnhancedForStatement[75389-75563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75980-76123]:Block[75420-75563]"
    }, {
      "left" : "aggregateCalls.add(convertGBAgg(agg, srcRel, gbChildProjLst, converter, rexNodeToPosMap,\n            gbChildProjLst.size()));",
      "right" : "aggregateCalls.add(convertGBAgg(agg, srcRel, gbChildProjLst, converter, rexNodeToPosMap,\n            gbChildProjLst.size()));",
      "info" : "ExpressionStatement[75990-76115]:ExpressionStatement[75430-75555]"
    }, {
      "left" : "if (hasGroupSets)",
      "right" : "if (hasGroupSets)",
      "info" : "IfStatement[76130-76508]:IfStatement[75570-75948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76148-76508]:Block[75588-75948]"
    }, {
      "left" : "AggregateCall aggCall = new AggregateCall(HiveGroupingID.INSTANCE,\n                false, new ImmutableList.Builder<Integer>().build(),\n                this.cluster.getTypeFactory().createSqlType(SqlTypeName.INTEGER),\n                HiveGroupingID.INSTANCE.getName());",
      "right" : "AggregateCall aggCall = new AggregateCall(HiveGroupingID.INSTANCE,\n                false, new ImmutableList.Builder<Integer>().build(),\n                this.cluster.getTypeFactory().createSqlType(SqlTypeName.INTEGER),\n                HiveGroupingID.INSTANCE.getName());",
      "info" : "VariableDeclarationStatement[76194-76463]:VariableDeclarationStatement[75634-75903]"
    }, {
      "left" : "aggregateCalls.add(aggCall);",
      "right" : "aggregateCalls.add(aggCall);",
      "info" : "ExpressionStatement[76472-76500]:ExpressionStatement[75912-75940]"
    }, {
      "left" : "if (gbChildProjLst.isEmpty())",
      "right" : "if (gbChildProjLst.isEmpty())",
      "info" : "IfStatement[76516-76749]:IfStatement[75956-76189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76546-76749]:Block[75986-76189]"
    }, {
      "left" : "gbChildProjLst.add(this.cluster.getRexBuilder().makeInputRef(srcRel, 0));",
      "right" : "gbChildProjLst.add(this.cluster.getRexBuilder().makeInputRef(srcRel, 0));",
      "info" : "ExpressionStatement[76668-76741]:ExpressionStatement[76108-76181]"
    }, {
      "left" : "RelNode gbInputRel = HiveProject.create(srcRel, gbChildProjLst, null);",
      "right" : "RelNode gbInputRel = HiveProject.create(srcRel, gbChildProjLst, null);",
      "info" : "VariableDeclarationStatement[76756-76826]:VariableDeclarationStatement[76196-76266]"
    }, {
      "left" : "HiveRelNode aggregateRel = null;",
      "right" : "HiveRelNode aggregateRel = null;",
      "info" : "VariableDeclarationStatement[76834-76866]:VariableDeclarationStatement[76274-76306]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[76873-77188]:TryStatement[76313-76628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76877-77108]:Block[76317-76548]"
    }, {
      "left" : "aggregateRel = new HiveAggregate(cluster, cluster.traitSetOf(HiveRelNode.CONVENTION),\n            gbInputRel, (transformedGroupSets!=null ? true:false), groupSet,\n            transformedGroupSets, aggregateCalls);",
      "right" : "aggregateRel = new HiveAggregate(cluster, cluster.traitSetOf(HiveRelNode.CONVENTION),\n            gbInputRel, (transformedGroupSets!=null ? true:false), groupSet,\n            transformedGroupSets, aggregateCalls);",
      "info" : "ExpressionStatement[76887-77100]:ExpressionStatement[76327-76540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77139-77188]:Block[76579-76628]"
    }, {
      "left" : "throw new SemanticException(e);",
      "right" : "throw new SemanticException(e);",
      "info" : "ThrowStatement[77149-77180]:ThrowStatement[76589-76620]"
    }, {
      "left" : "return aggregateRel;",
      "right" : "return aggregateRel;",
      "info" : "ReturnStatement[77196-77216]:ReturnStatement[76636-76656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77271-77537]:Block[76711-76977]"
    }, {
      "left" : "BitSet bits = new BitSet();",
      "right" : "BitSet bits = new BitSet();",
      "info" : "VariableDeclarationStatement[77279-77306]:VariableDeclarationStatement[76719-76746]"
    }, {
      "left" : "int index = 0;",
      "right" : "int index = 0;",
      "info" : "VariableDeclarationStatement[77313-77327]:VariableDeclarationStatement[76753-76767]"
    }, {
      "left" : "while (value != 0L)",
      "right" : "while (value != 0L)",
      "info" : "WhileStatement[77334-77476]:WhileStatement[76774-76916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77354-77476]:Block[76794-76916]"
    }, {
      "left" : "if (value % 2 != 0)",
      "right" : "if (value % 2 != 0)",
      "info" : "IfStatement[77364-77422]:IfStatement[76804-76862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77384-77422]:Block[76824-76862]"
    }, {
      "left" : "bits.set(index);",
      "right" : "bits.set(index);",
      "info" : "ExpressionStatement[77396-77412]:ExpressionStatement[76836-76852]"
    }, {
      "left" : "++index;",
      "right" : "++index;",
      "info" : "ExpressionStatement[77431-77439]:ExpressionStatement[76871-76879]"
    }, {
      "left" : "value = value >>> 1;",
      "right" : "value = value >>> 1;",
      "info" : "ExpressionStatement[77448-77468]:ExpressionStatement[76888-76908]"
    }, {
      "left" : "return ImmutableBitSet.FROM_BIT_SET.apply(bits);",
      "right" : "return ImmutableBitSet.FROM_BIT_SET.apply(bits);",
      "info" : "ReturnStatement[77483-77531]:ReturnStatement[76923-76971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77671-78955]:Block[77111-78395]"
    }, {
      "left" : "if (gByExpr.getType() == HiveParser.DOT\n          && gByExpr.getChild(0).getType() == HiveParser.TOK_TABLE_OR_COL)",
      "right" : "if (gByExpr.getType() == HiveParser.DOT\n          && gByExpr.getChild(0).getType() == HiveParser.TOK_TABLE_OR_COL)",
      "info" : "IfStatement[77679-78949]:IfStatement[77119-78389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77794-78076]:Block[77234-77516]"
    }, {
      "left" : "String tab_alias = BaseSemanticAnalyzer.unescapeIdentifier(gByExpr.getChild(0).getChild(0)\n            .getText());",
      "right" : "String tab_alias = BaseSemanticAnalyzer.unescapeIdentifier(gByExpr.getChild(0).getChild(0)\n            .getText());",
      "info" : "VariableDeclarationStatement[77804-77919]:VariableDeclarationStatement[77244-77359]"
    }, {
      "left" : "String col_alias = BaseSemanticAnalyzer.unescapeIdentifier(gByExpr.getChild(1).getText());",
      "right" : "String col_alias = BaseSemanticAnalyzer.unescapeIdentifier(gByExpr.getChild(1).getText());",
      "info" : "VariableDeclarationStatement[77928-78018]:VariableDeclarationStatement[77368-77458]"
    }, {
      "left" : "gByRR.put(tab_alias, col_alias, colInfo);",
      "right" : "gByRR.put(tab_alias, col_alias, colInfo);",
      "info" : "ExpressionStatement[78027-78068]:ExpressionStatement[77467-77508]"
    }, {
      "left" : "if (gByExpr.getType() == HiveParser.TOK_TABLE_OR_COL)",
      "right" : "if (gByExpr.getType() == HiveParser.TOK_TABLE_OR_COL)",
      "info" : "IfStatement[78082-78949]:IfStatement[77522-78389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78136-78949]:Block[77576-78389]"
    }, {
      "left" : "String col_alias = BaseSemanticAnalyzer.unescapeIdentifier(gByExpr.getChild(0).getText());",
      "right" : "String col_alias = BaseSemanticAnalyzer.unescapeIdentifier(gByExpr.getChild(0).getText());",
      "info" : "VariableDeclarationStatement[78146-78236]:VariableDeclarationStatement[77586-77676]"
    }, {
      "left" : "String tab_alias = null;",
      "right" : "String tab_alias = null;",
      "info" : "VariableDeclarationStatement[78245-78269]:VariableDeclarationStatement[77685-77709]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[78693-78891]:TryStatement[78133-78331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78697-78850]:Block[78137-78290]"
    }, {
      "left" : "ColumnInfo pColInfo = gByInputRR.get(tab_alias, col_alias);",
      "right" : "ColumnInfo pColInfo = gByInputRR.get(tab_alias, col_alias);",
      "info" : "VariableDeclarationStatement[78709-78768]:VariableDeclarationStatement[78149-78208]"
    }, {
      "left" : "tab_alias = pColInfo == null ? null : pColInfo.getTabAlias();",
      "right" : "tab_alias = pColInfo == null ? null : pColInfo.getTabAlias();",
      "info" : "ExpressionStatement[78779-78840]:ExpressionStatement[78219-78280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78880-78891]:Block[78320-78331]"
    }, {
      "left" : "gByRR.put(tab_alias, col_alias, colInfo);",
      "right" : "gByRR.put(tab_alias, col_alias, colInfo);",
      "info" : "ExpressionStatement[78900-78941]:ExpressionStatement[78340-78381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79192-79745]:Block[78632-79185]"
    }, {
      "left" : "int i = gbExprNDescLst.size();",
      "right" : "int i = gbExprNDescLst.size();",
      "info" : "VariableDeclarationStatement[79288-79318]:VariableDeclarationStatement[78728-78758]"
    }, {
      "left" : "String field = SemanticAnalyzer.getColumnInternalName(i);",
      "right" : "String field = SemanticAnalyzer.getColumnInternalName(i);",
      "info" : "VariableDeclarationStatement[79325-79382]:VariableDeclarationStatement[78765-78822]"
    }, {
      "left" : "outputColumnNames.add(field);",
      "right" : "outputColumnNames.add(field);",
      "info" : "ExpressionStatement[79389-79418]:ExpressionStatement[78829-78858]"
    }, {
      "left" : "gbExprNDescLst.add(grpbyExprNDesc);",
      "right" : "gbExprNDescLst.add(grpbyExprNDesc);",
      "info" : "ExpressionStatement[79425-79460]:ExpressionStatement[78865-78900]"
    }, {
      "left" : "ColumnInfo oColInfo = new ColumnInfo(field, grpbyExprNDesc.getTypeInfo(), null, false);",
      "right" : "ColumnInfo oColInfo = new ColumnInfo(field, grpbyExprNDesc.getTypeInfo(), null, false);",
      "info" : "VariableDeclarationStatement[79468-79555]:VariableDeclarationStatement[78908-78995]"
    }, {
      "left" : "groupByOutputRowResolver.putExpression(grpbyExpr, oColInfo);",
      "right" : "groupByOutputRowResolver.putExpression(grpbyExpr, oColInfo);",
      "info" : "ExpressionStatement[79562-79622]:ExpressionStatement[79002-79062]"
    }, {
      "left" : "addAlternateGByKeyMappings(grpbyExpr, oColInfo, groupByInputRowResolver,\n          groupByOutputRowResolver);",
      "right" : "addAlternateGByKeyMappings(grpbyExpr, oColInfo, groupByInputRowResolver,\n          groupByOutputRowResolver);",
      "info" : "ExpressionStatement[79630-79739]:ExpressionStatement[79070-79179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79873-83342]:Block[79313-82782]"
    }, {
      "left" : "AggInfo aInfo = null;",
      "right" : "AggInfo aInfo = null;",
      "info" : "VariableDeclarationStatement[79881-79902]:VariableDeclarationStatement[79321-79342]"
    }, {
      "left" : "ArrayList<ExprNodeDesc> aggParameters = new ArrayList<ExprNodeDesc>();",
      "right" : "ArrayList<ExprNodeDesc> aggParameters = new ArrayList<ExprNodeDesc>();",
      "info" : "VariableDeclarationStatement[79957-80027]:VariableDeclarationStatement[79397-79467]"
    }, {
      "left" : "for (int i = 1; i <= aggFnLstArgIndx; i++)",
      "right" : "for (int i = 1; i <= aggFnLstArgIndx; i++)",
      "info" : "ForStatement[80034-80256]:ForStatement[79474-79696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80077-80256]:Block[79517-79696]"
    }, {
      "left" : "ASTNode paraExpr = (ASTNode) aggAst.getChild(i);",
      "right" : "ASTNode paraExpr = (ASTNode) aggAst.getChild(i);",
      "info" : "VariableDeclarationStatement[80087-80135]:VariableDeclarationStatement[79527-79575]"
    }, {
      "left" : "ExprNodeDesc paraExprNode = genExprNodeDesc(paraExpr, inputRR);",
      "right" : "ExprNodeDesc paraExprNode = genExprNodeDesc(paraExpr, inputRR);",
      "info" : "VariableDeclarationStatement[80144-80207]:VariableDeclarationStatement[79584-79647]"
    }, {
      "left" : "aggParameters.add(paraExprNode);",
      "right" : "aggParameters.add(paraExprNode);",
      "info" : "ExpressionStatement[80216-80248]:ExpressionStatement[79656-79688]"
    }, {
      "left" : "boolean isDistinct = aggAst.getType() == HiveParser.TOK_FUNCTIONDI;",
      "right" : "boolean isDistinct = aggAst.getType() == HiveParser.TOK_FUNCTIONDI;",
      "info" : "VariableDeclarationStatement[80298-80365]:VariableDeclarationStatement[79738-79805]"
    }, {
      "left" : "TypeInfo udafRetType = null;",
      "right" : "TypeInfo udafRetType = null;",
      "info" : "VariableDeclarationStatement[80408-80436]:VariableDeclarationStatement[79848-79876]"
    }, {
      "left" : "String aggName = SemanticAnalyzer.unescapeIdentifier(aggAst.getChild(0).getText());",
      "right" : "String aggName = SemanticAnalyzer.unescapeIdentifier(aggAst.getChild(0).getText());",
      "info" : "VariableDeclarationStatement[80474-80557]:VariableDeclarationStatement[79914-79997]"
    }, {
      "left" : "if (FunctionRegistry.isRankingFunction(aggName))",
      "right" : "if (FunctionRegistry.isRankingFunction(aggName))",
      "info" : "IfStatement[80616-83208]:IfStatement[80056-82648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80665-80850]:Block[80105-80290]"
    }, {
      "left" : "if (aggName.equalsIgnoreCase(\"percent_rank\"))",
      "right" : "if (aggName.equalsIgnoreCase(\"percent_rank\"))",
      "info" : "IfStatement[80675-80842]:IfStatement[80115-80282]"
    }, {
      "left" : "udafRetType = TypeInfoFactory.doubleTypeInfo;",
      "right" : "udafRetType = TypeInfoFactory.doubleTypeInfo;",
      "info" : "ExpressionStatement[80731-80776]:ExpressionStatement[80171-80216]"
    }, {
      "left" : "udafRetType = TypeInfoFactory.intTypeInfo;",
      "right" : "udafRetType = TypeInfoFactory.intTypeInfo;",
      "info" : "ExpressionStatement[80800-80842]:ExpressionStatement[80240-80282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80856-83208]:Block[80296-82648]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[80937-82741]:TryStatement[80377-82181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80941-82579]:Block[80381-82019]"
    }, {
      "left" : "boolean isAllColumns = aggAst.getType() == HiveParser.TOK_FUNCTIONSTAR;",
      "right" : "boolean isAllColumns = aggAst.getType() == HiveParser.TOK_FUNCTIONSTAR;",
      "info" : "VariableDeclarationStatement[80953-81024]:VariableDeclarationStatement[80393-80464]"
    }, {
      "left" : "Mode amode = SemanticAnalyzer.groupByDescModeToUDAFMode(GroupByDesc.Mode.COMPLETE,\n              isDistinct);",
      "right" : "Mode amode = SemanticAnalyzer.groupByDescModeToUDAFMode(GroupByDesc.Mode.COMPLETE,\n              isDistinct);",
      "info" : "VariableDeclarationStatement[81074-81183]:VariableDeclarationStatement[80514-80623]"
    }, {
      "left" : "GenericUDAFEvaluator genericUDAFEvaluator = null;",
      "right" : "GenericUDAFEvaluator genericUDAFEvaluator = null;",
      "info" : "VariableDeclarationStatement[81195-81244]:VariableDeclarationStatement[80635-80684]"
    }, {
      "left" : "if (aggName.toLowerCase().equals(FunctionRegistry.LEAD_FUNC_NAME)\n              || aggName.toLowerCase().equals(FunctionRegistry.LAG_FUNC_NAME))",
      "right" : "if (aggName.toLowerCase().equals(FunctionRegistry.LEAD_FUNC_NAME)\n              || aggName.toLowerCase().equals(FunctionRegistry.LAG_FUNC_NAME))",
      "info" : "IfStatement[81255-82569]:IfStatement[80695-82009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81400-81936]:Block[80840-81376]"
    }, {
      "left" : "ArrayList<ObjectInspector> originalParameterTypeInfos = SemanticAnalyzer\n                .getWritableObjectInspector(aggParameters);",
      "right" : "ArrayList<ObjectInspector> originalParameterTypeInfos = SemanticAnalyzer\n                .getWritableObjectInspector(aggParameters);",
      "info" : "VariableDeclarationStatement[81414-81546]:VariableDeclarationStatement[80854-80986]"
    }, {
      "left" : "genericUDAFEvaluator = FunctionRegistry.getGenericWindowingEvaluator(aggName,\n                originalParameterTypeInfos, isDistinct, isAllColumns);",
      "right" : "genericUDAFEvaluator = FunctionRegistry.getGenericWindowingEvaluator(aggName,\n                originalParameterTypeInfos, isDistinct, isAllColumns);",
      "info" : "ExpressionStatement[81559-81707]:ExpressionStatement[80999-81147]"
    }, {
      "left" : "GenericUDAFInfo udaf = SemanticAnalyzer.getGenericUDAFInfo(genericUDAFEvaluator, amode,\n                aggParameters);",
      "right" : "GenericUDAFInfo udaf = SemanticAnalyzer.getGenericUDAFInfo(genericUDAFEvaluator, amode,\n                aggParameters);",
      "info" : "VariableDeclarationStatement[81720-81839]:VariableDeclarationStatement[81160-81279]"
    }, {
      "left" : "udafRetType = ((ListTypeInfo) udaf.returnType).getListElementTypeInfo();",
      "right" : "udafRetType = ((ListTypeInfo) udaf.returnType).getListElementTypeInfo();",
      "info" : "ExpressionStatement[81852-81924]:ExpressionStatement[81292-81364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81942-82569]:Block[81382-82009]"
    }, {
      "left" : "genericUDAFEvaluator = SemanticAnalyzer.getGenericUDAFEvaluator(aggName, aggParameters,\n                aggAst, isDistinct, isAllColumns);",
      "right" : "genericUDAFEvaluator = SemanticAnalyzer.getGenericUDAFEvaluator(aggName, aggParameters,\n                aggAst, isDistinct, isAllColumns);",
      "info" : "ExpressionStatement[81956-82094]:ExpressionStatement[81396-81534]"
    }, {
      "left" : "assert (genericUDAFEvaluator != null);",
      "right" : "assert (genericUDAFEvaluator != null);",
      "info" : "AssertStatement[82107-82145]:AssertStatement[81547-81585]"
    }, {
      "left" : "GenericUDAFInfo udaf = SemanticAnalyzer.getGenericUDAFInfo(genericUDAFEvaluator, amode,\n                aggParameters);",
      "right" : "GenericUDAFInfo udaf = SemanticAnalyzer.getGenericUDAFInfo(genericUDAFEvaluator, amode,\n                aggParameters);",
      "info" : "VariableDeclarationStatement[82215-82334]:VariableDeclarationStatement[81655-81774]"
    }, {
      "left" : "if (FunctionRegistry.pivotResult(aggName))",
      "right" : "if (FunctionRegistry.pivotResult(aggName))",
      "info" : "IfStatement[82347-82557]:IfStatement[81787-81997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82390-82491]:Block[81830-81931]"
    }, {
      "left" : "udafRetType = ((ListTypeInfo)udaf.returnType).getListElementTypeInfo();",
      "right" : "udafRetType = ((ListTypeInfo)udaf.returnType).getListElementTypeInfo();",
      "info" : "ExpressionStatement[82406-82477]:ExpressionStatement[81846-81917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82497-82557]:Block[81937-81997]"
    }, {
      "left" : "udafRetType = udaf.returnType;",
      "right" : "udafRetType = udaf.returnType;",
      "info" : "ExpressionStatement[82513-82543]:ExpressionStatement[81953-81983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82600-82741]:Block[82040-82181]"
    }, {
      "left" : "LOG.debug(\"CBO: Couldn't Obtain UDAF evaluators for \" + aggName\n              + \", trying to translate to GenericUDF\");",
      "right" : "LOG.debug(\"CBO: Couldn't Obtain UDAF evaluators for \" + aggName\n              + \", trying to translate to GenericUDF\");",
      "info" : "ExpressionStatement[82612-82731]:ExpressionStatement[82052-82171]"
    }, {
      "left" : "if (udafRetType == null)",
      "right" : "if (udafRetType == null)",
      "info" : "IfStatement[82793-83200]:IfStatement[82233-82640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82818-83200]:Block[82258-82640]"
    }, {
      "left" : "TypeCheckCtx tcCtx = new TypeCheckCtx(inputRR);",
      "right" : "TypeCheckCtx tcCtx = new TypeCheckCtx(inputRR);",
      "info" : "VariableDeclarationStatement[82830-82877]:VariableDeclarationStatement[82270-82317]"
    }, {
      "left" : "tcCtx.setAllowStatefulFunctions(true);",
      "right" : "tcCtx.setAllowStatefulFunctions(true);",
      "info" : "ExpressionStatement[82967-83005]:ExpressionStatement[82407-82445]"
    }, {
      "left" : "tcCtx.setAllowDistinctFunctions(false);",
      "right" : "tcCtx.setAllowDistinctFunctions(false);",
      "info" : "ExpressionStatement[83016-83055]:ExpressionStatement[82456-82495]"
    }, {
      "left" : "ExprNodeDesc exp = genExprNodeDesc((ASTNode) aggAst.getChild(0), inputRR, tcCtx);",
      "right" : "ExprNodeDesc exp = genExprNodeDesc((ASTNode) aggAst.getChild(0), inputRR, tcCtx);",
      "info" : "VariableDeclarationStatement[83066-83147]:VariableDeclarationStatement[82506-82587]"
    }, {
      "left" : "udafRetType = exp.getTypeInfo();",
      "right" : "udafRetType = exp.getTypeInfo();",
      "info" : "ExpressionStatement[83158-83190]:ExpressionStatement[82598-82630]"
    }, {
      "left" : "aInfo = new AggInfo(aggParameters, udafRetType, aggName, isDistinct);",
      "right" : "aInfo = new AggInfo(aggParameters, udafRetType, aggName, isDistinct);",
      "info" : "ExpressionStatement[83246-83315]:ExpressionStatement[82686-82755]"
    }, {
      "left" : "return aInfo;",
      "right" : "return aInfo;",
      "info" : "ReturnStatement[83323-83336]:ReturnStatement[82763-82776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83598-91986]:Block[83038-91426]"
    }, {
      "left" : "RelNode gbRel = null;",
      "right" : "RelNode gbRel = null;",
      "info" : "VariableDeclarationStatement[83606-83627]:VariableDeclarationStatement[83046-83067]"
    }, {
      "left" : "QBParseInfo qbp = getQBParseInfo(qb);",
      "right" : "QBParseInfo qbp = getQBParseInfo(qb);",
      "info" : "VariableDeclarationStatement[83634-83671]:VariableDeclarationStatement[83074-83111]"
    }, {
      "left" : "String detsClauseName = qbp.getClauseNames().iterator().next();",
      "right" : "String detsClauseName = qbp.getClauseNames().iterator().next();",
      "info" : "VariableDeclarationStatement[83784-83847]:VariableDeclarationStatement[83224-83287]"
    }, {
      "left" : "ASTNode selExprList = qb.getParseInfo().getSelForClause(detsClauseName);",
      "right" : "ASTNode selExprList = qb.getParseInfo().getSelForClause(detsClauseName);",
      "info" : "VariableDeclarationStatement[84390-84462]:VariableDeclarationStatement[83830-83902]"
    }, {
      "left" : "if (selExprList.getToken().getType() == HiveParser.TOK_SELECTDI\n          && selExprList.getChildCount() == 1 && selExprList.getChild(0).getChildCount() == 1)",
      "right" : "if (selExprList.getToken().getType() == HiveParser.TOK_SELECTDI\n          && selExprList.getChildCount() == 1 && selExprList.getChild(0).getChildCount() == 1)",
      "info" : "IfStatement[84469-84992]:IfStatement[83909-84432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84628-84992]:Block[84068-84432]"
    }, {
      "left" : "ASTNode node = (ASTNode) selExprList.getChild(0).getChild(0);",
      "right" : "ASTNode node = (ASTNode) selExprList.getChild(0).getChild(0);",
      "info" : "VariableDeclarationStatement[84638-84699]:VariableDeclarationStatement[84078-84139]"
    }, {
      "left" : "if (node.getToken().getType() == HiveParser.TOK_ALLCOLREF)",
      "right" : "if (node.getToken().getType() == HiveParser.TOK_ALLCOLREF)",
      "info" : "IfStatement[84708-84984]:IfStatement[84148-84424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84767-84984]:Block[84207-84424]"
    }, {
      "left" : "srcRel = genSelectLogicalPlan(qb, srcRel, srcRel);",
      "right" : "srcRel = genSelectLogicalPlan(qb, srcRel, srcRel);",
      "info" : "ExpressionStatement[84779-84829]:ExpressionStatement[84219-84269]"
    }, {
      "left" : "RowResolver rr = this.relToHiveRR.get(srcRel);",
      "right" : "RowResolver rr = this.relToHiveRR.get(srcRel);",
      "info" : "VariableDeclarationStatement[84840-84886]:VariableDeclarationStatement[84280-84326]"
    }, {
      "left" : "qbp.setSelExprForClause(detsClauseName, SemanticAnalyzer.genSelectDIAST(rr));",
      "right" : "qbp.setSelExprForClause(detsClauseName, SemanticAnalyzer.genSelectDIAST(rr));",
      "info" : "ExpressionStatement[84897-84974]:ExpressionStatement[84337-84414]"
    }, {
      "left" : "List<ASTNode> grpByAstExprs = SemanticAnalyzer.getGroupByForClause(qbp, detsClauseName);",
      "right" : "List<ASTNode> grpByAstExprs = SemanticAnalyzer.getGroupByForClause(qbp, detsClauseName);",
      "info" : "VariableDeclarationStatement[85000-85088]:VariableDeclarationStatement[84440-84528]"
    }, {
      "left" : "HashMap<String, ASTNode> aggregationTrees = qbp.getAggregationExprsForClause(detsClauseName);",
      "right" : "HashMap<String, ASTNode> aggregationTrees = qbp.getAggregationExprsForClause(detsClauseName);",
      "info" : "VariableDeclarationStatement[85095-85188]:VariableDeclarationStatement[84535-84628]"
    }, {
      "left" : "boolean hasGrpByAstExprs = (grpByAstExprs != null && !grpByAstExprs.isEmpty()) ? true : false;",
      "right" : "boolean hasGrpByAstExprs = (grpByAstExprs != null && !grpByAstExprs.isEmpty()) ? true : false;",
      "info" : "VariableDeclarationStatement[85195-85289]:VariableDeclarationStatement[84635-84729]"
    }, {
      "left" : "boolean hasAggregationTrees = (aggregationTrees != null && !aggregationTrees.isEmpty()) ? true\n          : false;",
      "right" : "boolean hasAggregationTrees = (aggregationTrees != null && !aggregationTrees.isEmpty()) ? true\n          : false;",
      "info" : "VariableDeclarationStatement[85296-85409]:VariableDeclarationStatement[84736-84849]"
    }, {
      "left" : "final boolean cubeRollupGrpSetPresent = (!qbp.getDestRollups().isEmpty()\n          || !qbp.getDestGroupingSets().isEmpty() || !qbp.getDestCubes().isEmpty());",
      "right" : "final boolean cubeRollupGrpSetPresent = (!qbp.getDestRollups().isEmpty()\n          || !qbp.getDestGroupingSets().isEmpty() || !qbp.getDestCubes().isEmpty());",
      "info" : "VariableDeclarationStatement[85417-85574]:VariableDeclarationStatement[84857-85014]"
    }, {
      "left" : "if (conf.getBoolVar(HiveConf.ConfVars.HIVEGROUPBYSKEW)\n          && qbp.getDistinctFuncExprsForClause(detsClauseName).size() > 1)",
      "right" : "if (conf.getBoolVar(HiveConf.ConfVars.HIVEGROUPBYSKEW)\n          && qbp.getDistinctFuncExprsForClause(detsClauseName).size() > 1)",
      "info" : "IfStatement[85607-85833]:IfStatement[85047-85273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85737-85833]:Block[85177-85273]"
    }, {
      "left" : "throw new SemanticException(ErrorMsg.UNSUPPORTED_MULTIPLE_DISTINCTS.getMsg());",
      "right" : "throw new SemanticException(ErrorMsg.UNSUPPORTED_MULTIPLE_DISTINCTS.getMsg());",
      "info" : "ThrowStatement[85747-85825]:ThrowStatement[85187-85265]"
    }, {
      "left" : "if (cubeRollupGrpSetPresent)",
      "right" : "if (cubeRollupGrpSetPresent)",
      "info" : "IfStatement[85840-86768]:IfStatement[85280-86208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85869-86768]:Block[85309-86208]"
    }, {
      "left" : "if (!HiveConf.getBoolVar(conf, HiveConf.ConfVars.HIVEMAPSIDEAGGREGATE))",
      "right" : "if (!HiveConf.getBoolVar(conf, HiveConf.ConfVars.HIVEMAPSIDEAGGREGATE))",
      "info" : "IfStatement[85879-86054]:IfStatement[85319-85494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85951-86054]:Block[85391-85494]"
    }, {
      "left" : "throw new SemanticException(ErrorMsg.HIVE_GROUPING_SETS_AGGR_NOMAPAGGR.getMsg());",
      "right" : "throw new SemanticException(ErrorMsg.HIVE_GROUPING_SETS_AGGR_NOMAPAGGR.getMsg());",
      "info" : "ThrowStatement[85963-86044]:ThrowStatement[85403-85484]"
    }, {
      "left" : "if (conf.getBoolVar(HiveConf.ConfVars.HIVEGROUPBYSKEW))",
      "right" : "if (conf.getBoolVar(HiveConf.ConfVars.HIVEGROUPBYSKEW))",
      "info" : "IfStatement[86064-86760]:IfStatement[85504-86200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86120-86760]:Block[85560-86200]"
    }, {
      "left" : "checkExpressionsForGroupingSet(grpByAstExprs, qb.getParseInfo()\n              .getDistinctFuncExprsForClause(detsClauseName), aggregationTrees,\n              this.relToHiveRR.get(srcRel));",
      "right" : "checkExpressionsForGroupingSet(grpByAstExprs, qb.getParseInfo()\n              .getDistinctFuncExprsForClause(detsClauseName), aggregationTrees,\n              this.relToHiveRR.get(srcRel));",
      "info" : "ExpressionStatement[86132-86320]:ExpressionStatement[85572-85760]"
    }, {
      "left" : "if (qbp.getDestGroupingSets().size() > conf\n              .getIntVar(HiveConf.ConfVars.HIVE_NEW_JOB_GROUPING_SET_CARDINALITY))",
      "right" : "if (qbp.getDestGroupingSets().size() > conf\n              .getIntVar(HiveConf.ConfVars.HIVE_NEW_JOB_GROUPING_SET_CARDINALITY))",
      "info" : "IfStatement[86332-86750]:IfStatement[85772-86190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86459-86750]:Block[85899-86190]"
    }, {
      "left" : "String errorMsg = \"The number of rows per input row due to grouping sets is \"\n                + qbp.getDestGroupingSets().size();",
      "right" : "String errorMsg = \"The number of rows per input row due to grouping sets is \"\n                + qbp.getDestGroupingSets().size();",
      "info" : "VariableDeclarationStatement[86473-86602]:VariableDeclarationStatement[85913-86042]"
    }, {
      "left" : "throw new SemanticException(\n                ErrorMsg.HIVE_GROUPING_SETS_THRESHOLD_NOT_ALLOWED_WITH_SKEW.getMsg(errorMsg));",
      "right" : "throw new SemanticException(\n                ErrorMsg.HIVE_GROUPING_SETS_THRESHOLD_NOT_ALLOWED_WITH_SKEW.getMsg(errorMsg));",
      "info" : "ThrowStatement[86615-86738]:ThrowStatement[86055-86178]"
    }, {
      "left" : "if (hasGrpByAstExprs || hasAggregationTrees)",
      "right" : "if (hasGrpByAstExprs || hasAggregationTrees)",
      "info" : "IfStatement[86777-91959]:IfStatement[86217-91399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86822-91959]:Block[86262-91399]"
    }, {
      "left" : "ArrayList<ExprNodeDesc> gbExprNDescLst = new ArrayList<ExprNodeDesc>();",
      "right" : "ArrayList<ExprNodeDesc> gbExprNDescLst = new ArrayList<ExprNodeDesc>();",
      "info" : "VariableDeclarationStatement[86832-86903]:VariableDeclarationStatement[86272-86343]"
    }, {
      "left" : "ArrayList<String> outputColumnNames = new ArrayList<String>();",
      "right" : "ArrayList<String> outputColumnNames = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[86912-86974]:VariableDeclarationStatement[86352-86414]"
    }, {
      "left" : "RowResolver groupByInputRowResolver = this.relToHiveRR.get(srcRel);",
      "right" : "RowResolver groupByInputRowResolver = this.relToHiveRR.get(srcRel);",
      "info" : "VariableDeclarationStatement[87026-87093]:VariableDeclarationStatement[86466-86533]"
    }, {
      "left" : "RowResolver groupByOutputRowResolver = new RowResolver();",
      "right" : "RowResolver groupByOutputRowResolver = new RowResolver();",
      "info" : "VariableDeclarationStatement[87102-87159]:VariableDeclarationStatement[86542-86599]"
    }, {
      "left" : "groupByOutputRowResolver.setIsExprResolver(true);",
      "right" : "groupByOutputRowResolver.setIsExprResolver(true);",
      "info" : "ExpressionStatement[87168-87217]:ExpressionStatement[86608-86657]"
    }, {
      "left" : "if (hasGrpByAstExprs)",
      "right" : "if (hasGrpByAstExprs)",
      "info" : "IfStatement[87227-88027]:IfStatement[86667-87467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87249-88027]:Block[86689-87467]"
    }, {
      "left" : "for (int i = 0; i < grpByAstExprs.size(); ++i)",
      "right" : "for (int i = 0; i < grpByAstExprs.size(); ++i)",
      "info" : "ForStatement[87306-88017]:ForStatement[86746-87457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87353-88017]:Block[86793-87457]"
    }, {
      "left" : "ASTNode grpbyExpr = grpByAstExprs.get(i);",
      "right" : "ASTNode grpbyExpr = grpByAstExprs.get(i);",
      "info" : "VariableDeclarationStatement[87367-87408]:VariableDeclarationStatement[86807-86848]"
    }, {
      "left" : "Map<ASTNode, ExprNodeDesc> astToExprNDescMap = TypeCheckProcFactory.genExprNode(\n                grpbyExpr, new TypeCheckCtx(groupByInputRowResolver));",
      "right" : "Map<ASTNode, ExprNodeDesc> astToExprNDescMap = TypeCheckProcFactory.genExprNode(\n                grpbyExpr, new TypeCheckCtx(groupByInputRowResolver));",
      "info" : "VariableDeclarationStatement[87421-87572]:VariableDeclarationStatement[86861-87012]"
    }, {
      "left" : "ExprNodeDesc grpbyExprNDesc = astToExprNDescMap.get(grpbyExpr);",
      "right" : "ExprNodeDesc grpbyExprNDesc = astToExprNDescMap.get(grpbyExpr);",
      "info" : "VariableDeclarationStatement[87585-87648]:VariableDeclarationStatement[87025-87088]"
    }, {
      "left" : "if (grpbyExprNDesc == null)",
      "right" : "if (grpbyExprNDesc == null)",
      "info" : "IfStatement[87661-87850]:IfStatement[87101-87290]"
    }, {
      "left" : "throw new CalciteSemanticException(\"Invalid Column Reference: \" + grpbyExpr.dump(),\n                  UnsupportedFeature.Invalid_column_reference);",
      "right" : "throw new CalciteSemanticException(\"Invalid Column Reference: \" + grpbyExpr.dump(),\n                  UnsupportedFeature.Invalid_column_reference);",
      "info" : "ThrowStatement[87703-87850]:ThrowStatement[87143-87290]"
    }, {
      "left" : "addToGBExpr(groupByOutputRowResolver, groupByInputRowResolver, grpbyExpr,\n                grpbyExprNDesc, gbExprNDescLst, outputColumnNames);",
      "right" : "addToGBExpr(groupByOutputRowResolver, groupByInputRowResolver, grpbyExpr,\n                grpbyExprNDesc, gbExprNDescLst, outputColumnNames);",
      "info" : "ExpressionStatement[87864-88005]:ExpressionStatement[87304-87445]"
    }, {
      "left" : "int groupingColsSize = gbExprNDescLst.size();",
      "right" : "int groupingColsSize = gbExprNDescLst.size();",
      "info" : "VariableDeclarationStatement[88078-88123]:VariableDeclarationStatement[87518-87563]"
    }, {
      "left" : "List<Integer> groupingSets = null;",
      "right" : "List<Integer> groupingSets = null;",
      "info" : "VariableDeclarationStatement[88132-88166]:VariableDeclarationStatement[87572-87606]"
    }, {
      "left" : "if (cubeRollupGrpSetPresent)",
      "right" : "if (cubeRollupGrpSetPresent)",
      "info" : "IfStatement[88175-89168]:IfStatement[87615-88608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88204-89168]:Block[87644-88608]"
    }, {
      "left" : "if (qbp.getDestRollups().contains(detsClauseName))",
      "right" : "if (qbp.getDestRollups().contains(detsClauseName))",
      "info" : "IfStatement[88216-88651]:IfStatement[87656-88091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88267-88355]:Block[87707-87795]"
    }, {
      "left" : "groupingSets = getGroupingSetsForRollup(grpByAstExprs.size());",
      "right" : "groupingSets = getGroupingSetsForRollup(grpByAstExprs.size());",
      "info" : "ExpressionStatement[88281-88343]:ExpressionStatement[87721-87783]"
    }, {
      "left" : "if (qbp.getDestCubes().contains(detsClauseName))",
      "right" : "if (qbp.getDestCubes().contains(detsClauseName))",
      "info" : "IfStatement[88361-88651]:IfStatement[87801-88091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88410-88496]:Block[87850-87936]"
    }, {
      "left" : "groupingSets = getGroupingSetsForCube(grpByAstExprs.size());",
      "right" : "groupingSets = getGroupingSetsForCube(grpByAstExprs.size());",
      "info" : "ExpressionStatement[88424-88484]:ExpressionStatement[87864-87924]"
    }, {
      "left" : "if (qbp.getDestGroupingSets().contains(detsClauseName))",
      "right" : "if (qbp.getDestGroupingSets().contains(detsClauseName))",
      "info" : "IfStatement[88502-88651]:IfStatement[87942-88091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88558-88651]:Block[87998-88091]"
    }, {
      "left" : "groupingSets = getGroupingSets(grpByAstExprs, qbp, detsClauseName);",
      "right" : "groupingSets = getGroupingSets(grpByAstExprs, qbp, detsClauseName);",
      "info" : "ExpressionStatement[88572-88639]:ExpressionStatement[88012-88079]"
    }, {
      "left" : "final int limit = groupingColsSize * 2;",
      "right" : "final int limit = groupingColsSize * 2;",
      "info" : "VariableDeclarationStatement[88663-88702]:VariableDeclarationStatement[88103-88142]"
    }, {
      "left" : "while (groupingColsSize < limit)",
      "right" : "while (groupingColsSize < limit)",
      "info" : "WhileStatement[88713-89158]:WhileStatement[88153-88598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88746-89158]:Block[88186-88598]"
    }, {
      "left" : "String field = getColumnInternalName(groupingColsSize);",
      "right" : "String field = getColumnInternalName(groupingColsSize);",
      "info" : "VariableDeclarationStatement[88760-88815]:VariableDeclarationStatement[88200-88255]"
    }, {
      "left" : "outputColumnNames.add(field);",
      "right" : "outputColumnNames.add(field);",
      "info" : "ExpressionStatement[88828-88857]:ExpressionStatement[88268-88297]"
    }, {
      "left" : "groupByOutputRowResolver.put(null, field,\n                    new ColumnInfo(\n                            field,\n                            TypeInfoFactory.booleanTypeInfo,\n                            null,\n                            false));",
      "right" : "groupByOutputRowResolver.put(null, field,\n                    new ColumnInfo(\n                            field,\n                            TypeInfoFactory.booleanTypeInfo,\n                            null,\n                            false));",
      "info" : "ExpressionStatement[88870-89114]:ExpressionStatement[88310-88554]"
    }, {
      "left" : "groupingColsSize++;",
      "right" : "groupingColsSize++;",
      "info" : "ExpressionStatement[89127-89146]:ExpressionStatement[88567-88586]"
    }, {
      "left" : "ArrayList<AggInfo> aggregations = new ArrayList<AggInfo>();",
      "right" : "ArrayList<AggInfo> aggregations = new ArrayList<AggInfo>();",
      "info" : "VariableDeclarationStatement[89228-89287]:VariableDeclarationStatement[88668-88727]"
    }, {
      "left" : "if (hasAggregationTrees)",
      "right" : "if (hasAggregationTrees)",
      "info" : "IfStatement[89296-91086]:IfStatement[88736-90526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89321-91086]:Block[88761-90526]"
    }, {
      "left" : "assert (aggregationTrees != null);",
      "right" : "assert (aggregationTrees != null);",
      "info" : "AssertStatement[89333-89367]:AssertStatement[88773-88807]"
    }, {
      "left" : "for (ASTNode value : aggregationTrees.values())",
      "right" : "for (ASTNode value : aggregationTrees.values())",
      "info" : "EnhancedForStatement[89378-91076]:EnhancedForStatement[88818-90516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89426-91076]:Block[88866-90516]"
    }, {
      "left" : "String aggName = SemanticAnalyzer.unescapeIdentifier(value.getChild(0).getText());",
      "right" : "String aggName = SemanticAnalyzer.unescapeIdentifier(value.getChild(0).getText());",
      "info" : "VariableDeclarationStatement[89526-89608]:VariableDeclarationStatement[88966-89048]"
    }, {
      "left" : "boolean isDistinct = value.getType() == HiveParser.TOK_FUNCTIONDI;",
      "right" : "boolean isDistinct = value.getType() == HiveParser.TOK_FUNCTIONDI;",
      "info" : "VariableDeclarationStatement[89621-89687]:VariableDeclarationStatement[89061-89127]"
    }, {
      "left" : "boolean isAllColumns = value.getType() == HiveParser.TOK_FUNCTIONSTAR;",
      "right" : "boolean isAllColumns = value.getType() == HiveParser.TOK_FUNCTIONSTAR;",
      "info" : "VariableDeclarationStatement[89700-89770]:VariableDeclarationStatement[89140-89210]"
    }, {
      "left" : "ArrayList<ExprNodeDesc> aggParameters = new ArrayList<ExprNodeDesc>();",
      "right" : "ArrayList<ExprNodeDesc> aggParameters = new ArrayList<ExprNodeDesc>();",
      "info" : "VariableDeclarationStatement[89839-89909]:VariableDeclarationStatement[89279-89349]"
    }, {
      "left" : "for (int i = 1; i < value.getChildCount(); i++)",
      "right" : "for (int i = 1; i < value.getChildCount(); i++)",
      "info" : "ForStatement[89922-90188]:ForStatement[89362-89628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89970-90188]:Block[89410-89628]"
    }, {
      "left" : "ASTNode paraExpr = (ASTNode) value.getChild(i);",
      "right" : "ASTNode paraExpr = (ASTNode) value.getChild(i);",
      "info" : "VariableDeclarationStatement[89986-90033]:VariableDeclarationStatement[89426-89473]"
    }, {
      "left" : "ExprNodeDesc paraExprNode = genExprNodeDesc(paraExpr, groupByInputRowResolver);",
      "right" : "ExprNodeDesc paraExprNode = genExprNodeDesc(paraExpr, groupByInputRowResolver);",
      "info" : "VariableDeclarationStatement[90048-90127]:VariableDeclarationStatement[89488-89567]"
    }, {
      "left" : "aggParameters.add(paraExprNode);",
      "right" : "aggParameters.add(paraExprNode);",
      "info" : "ExpressionStatement[90142-90174]:ExpressionStatement[89582-89614]"
    }, {
      "left" : "Mode amode = SemanticAnalyzer.groupByDescModeToUDAFMode(GroupByDesc.Mode.COMPLETE,\n                isDistinct);",
      "right" : "Mode amode = SemanticAnalyzer.groupByDescModeToUDAFMode(GroupByDesc.Mode.COMPLETE,\n                isDistinct);",
      "info" : "VariableDeclarationStatement[90202-90313]:VariableDeclarationStatement[89642-89753]"
    }, {
      "left" : "GenericUDAFEvaluator genericUDAFEvaluator = SemanticAnalyzer.getGenericUDAFEvaluator(\n                aggName, aggParameters, value, isDistinct, isAllColumns);",
      "right" : "GenericUDAFEvaluator genericUDAFEvaluator = SemanticAnalyzer.getGenericUDAFEvaluator(\n                aggName, aggParameters, value, isDistinct, isAllColumns);",
      "info" : "VariableDeclarationStatement[90326-90485]:VariableDeclarationStatement[89766-89925]"
    }, {
      "left" : "assert (genericUDAFEvaluator != null);",
      "right" : "assert (genericUDAFEvaluator != null);",
      "info" : "AssertStatement[90498-90536]:AssertStatement[89938-89976]"
    }, {
      "left" : "GenericUDAFInfo udaf = SemanticAnalyzer.getGenericUDAFInfo(genericUDAFEvaluator, amode,\n                aggParameters);",
      "right" : "GenericUDAFInfo udaf = SemanticAnalyzer.getGenericUDAFInfo(genericUDAFEvaluator, amode,\n                aggParameters);",
      "info" : "VariableDeclarationStatement[90549-90668]:VariableDeclarationStatement[89989-90108]"
    }, {
      "left" : "AggInfo aInfo = new AggInfo(aggParameters, udaf.returnType, aggName, isDistinct);",
      "right" : "AggInfo aInfo = new AggInfo(aggParameters, udaf.returnType, aggName, isDistinct);",
      "info" : "VariableDeclarationStatement[90681-90762]:VariableDeclarationStatement[90121-90202]"
    }, {
      "left" : "aggregations.add(aInfo);",
      "right" : "aggregations.add(aInfo);",
      "info" : "ExpressionStatement[90775-90799]:ExpressionStatement[90215-90239]"
    }, {
      "left" : "String field = getColumnInternalName(groupingColsSize + aggregations.size() - 1);",
      "right" : "String field = getColumnInternalName(groupingColsSize + aggregations.size() - 1);",
      "info" : "VariableDeclarationStatement[90812-90893]:VariableDeclarationStatement[90252-90333]"
    }, {
      "left" : "outputColumnNames.add(field);",
      "right" : "outputColumnNames.add(field);",
      "info" : "ExpressionStatement[90906-90935]:ExpressionStatement[90346-90375]"
    }, {
      "left" : "groupByOutputRowResolver.putExpression(value, new ColumnInfo(field, aInfo.m_returnType,\n                \"\", false));",
      "right" : "groupByOutputRowResolver.putExpression(value, new ColumnInfo(field, aInfo.m_returnType,\n                \"\", false));",
      "info" : "ExpressionStatement[90948-91064]:ExpressionStatement[90388-90504]"
    }, {
      "left" : "if(groupingSets != null && !groupingSets.isEmpty())",
      "right" : "if(groupingSets != null && !groupingSets.isEmpty())",
      "info" : "IfStatement[91175-91635]:IfStatement[90615-91075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91227-91635]:Block[90667-91075]"
    }, {
      "left" : "String field = getColumnInternalName(groupingColsSize + aggregations.size());",
      "right" : "String field = getColumnInternalName(groupingColsSize + aggregations.size());",
      "info" : "VariableDeclarationStatement[91239-91316]:VariableDeclarationStatement[90679-90756]"
    }, {
      "left" : "outputColumnNames.add(field);",
      "right" : "outputColumnNames.add(field);",
      "info" : "ExpressionStatement[91327-91356]:ExpressionStatement[90767-90796]"
    }, {
      "left" : "groupByOutputRowResolver.put(null, VirtualColumn.GROUPINGID.getName(),\n                  new ColumnInfo(\n                          field,\n                          TypeInfoFactory.intTypeInfo,\n                          null,\n                          true));",
      "right" : "groupByOutputRowResolver.put(null, VirtualColumn.GROUPINGID.getName(),\n                  new ColumnInfo(\n                          field,\n                          TypeInfoFactory.intTypeInfo,\n                          null,\n                          true));",
      "info" : "ExpressionStatement[91367-91625]:ExpressionStatement[90807-91065]"
    }, {
      "left" : "gbRel = genGBRelNode(gbExprNDescLst, aggregations, groupingSets, srcRel);",
      "right" : "gbRel = genGBRelNode(gbExprNDescLst, aggregations, groupingSets, srcRel);",
      "info" : "ExpressionStatement[91691-91764]:ExpressionStatement[91131-91204]"
    }, {
      "left" : "relToHiveColNameCalcitePosMap.put(gbRel,\n            buildHiveToCalciteColumnMap(groupByOutputRowResolver, gbRel));",
      "right" : "relToHiveColNameCalcitePosMap.put(gbRel,\n            buildHiveToCalciteColumnMap(groupByOutputRowResolver, gbRel));",
      "info" : "ExpressionStatement[91773-91888]:ExpressionStatement[91213-91328]"
    }, {
      "left" : "this.relToHiveRR.put(gbRel, groupByOutputRowResolver);",
      "right" : "this.relToHiveRR.put(gbRel, groupByOutputRowResolver);",
      "info" : "ExpressionStatement[91897-91951]:ExpressionStatement[91337-91391]"
    }, {
      "left" : "return gbRel;",
      "right" : "return gbRel;",
      "info" : "ReturnStatement[91967-91980]:ReturnStatement[91407-91420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92566-99001]:Block[92006-98441]"
    }, {
      "left" : "RelNode sortRel = null;",
      "right" : "RelNode sortRel = null;",
      "info" : "VariableDeclarationStatement[92574-92597]:VariableDeclarationStatement[92014-92037]"
    }, {
      "left" : "RelNode originalOBChild = null;",
      "right" : "RelNode originalOBChild = null;",
      "info" : "VariableDeclarationStatement[92604-92635]:VariableDeclarationStatement[92044-92075]"
    }, {
      "left" : "QBParseInfo qbp = getQBParseInfo(qb);",
      "right" : "QBParseInfo qbp = getQBParseInfo(qb);",
      "info" : "VariableDeclarationStatement[92643-92680]:VariableDeclarationStatement[92083-92120]"
    }, {
      "left" : "String dest = qbp.getClauseNames().iterator().next();",
      "right" : "String dest = qbp.getClauseNames().iterator().next();",
      "info" : "VariableDeclarationStatement[92687-92740]:VariableDeclarationStatement[92127-92180]"
    }, {
      "left" : "ASTNode obAST = qbp.getOrderByForClause(dest);",
      "right" : "ASTNode obAST = qbp.getOrderByForClause(dest);",
      "info" : "VariableDeclarationStatement[92747-92793]:VariableDeclarationStatement[92187-92233]"
    }, {
      "left" : "if (obAST != null)",
      "right" : "if (obAST != null)",
      "info" : "IfStatement[92801-98925]:IfStatement[92241-98365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92820-98925]:Block[92260-98365]"
    }, {
      "left" : "Integer limit = qb.getParseInfo().getDestLimit(dest);",
      "right" : "Integer limit = qb.getParseInfo().getDestLimit(dest);",
      "info" : "VariableDeclarationStatement[92944-92997]:VariableDeclarationStatement[92384-92437]"
    }, {
      "left" : "if (conf.getVar(HiveConf.ConfVars.HIVEMAPREDMODE).equalsIgnoreCase(\"strict\")\n            && limit == null)",
      "right" : "if (conf.getVar(HiveConf.ConfVars.HIVEMAPREDMODE).equalsIgnoreCase(\"strict\")\n            && limit == null)",
      "info" : "IfStatement[93006-93264]:IfStatement[92446-92704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93113-93264]:Block[92553-92704]"
    }, {
      "left" : "throw new SemanticException(SemanticAnalyzer.generateErrorMessage(obAST,\n              ErrorMsg.NO_LIMIT_WITH_ORDERBY.getMsg()));",
      "right" : "throw new SemanticException(SemanticAnalyzer.generateErrorMessage(obAST,\n              ErrorMsg.NO_LIMIT_WITH_ORDERBY.getMsg()));",
      "info" : "ThrowStatement[93125-93254]:ThrowStatement[92565-92694]"
    }, {
      "left" : "final List<RexNode> newVCLst = new ArrayList<RexNode>();",
      "right" : "final List<RexNode> newVCLst = new ArrayList<RexNode>();",
      "info" : "VariableDeclarationStatement[93388-93444]:VariableDeclarationStatement[92828-92884]"
    }, {
      "left" : "final List<RelFieldCollation> fieldCollations = Lists.newArrayList();",
      "right" : "final List<RelFieldCollation> fieldCollations = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[93453-93522]:VariableDeclarationStatement[92893-92962]"
    }, {
      "left" : "int fieldIndex = 0;",
      "right" : "int fieldIndex = 0;",
      "info" : "VariableDeclarationStatement[93531-93550]:VariableDeclarationStatement[92971-92990]"
    }, {
      "left" : "List<Node> obASTExprLst = obAST.getChildren();",
      "right" : "List<Node> obASTExprLst = obAST.getChildren();",
      "info" : "VariableDeclarationStatement[93560-93606]:VariableDeclarationStatement[93000-93046]"
    }, {
      "left" : "ASTNode obASTExpr;",
      "right" : "ASTNode obASTExpr;",
      "info" : "VariableDeclarationStatement[93615-93633]:VariableDeclarationStatement[93055-93073]"
    }, {
      "left" : "List<Pair<ASTNode, TypeInfo>> vcASTTypePairs = new ArrayList<Pair<ASTNode, TypeInfo>>();",
      "right" : "List<Pair<ASTNode, TypeInfo>> vcASTTypePairs = new ArrayList<Pair<ASTNode, TypeInfo>>();",
      "info" : "VariableDeclarationStatement[93642-93730]:VariableDeclarationStatement[93082-93170]"
    }, {
      "left" : "RowResolver inputRR = relToHiveRR.get(srcRel);",
      "right" : "RowResolver inputRR = relToHiveRR.get(srcRel);",
      "info" : "VariableDeclarationStatement[93739-93785]:VariableDeclarationStatement[93179-93225]"
    }, {
      "left" : "RowResolver outputRR = new RowResolver();",
      "right" : "RowResolver outputRR = new RowResolver();",
      "info" : "VariableDeclarationStatement[93794-93835]:VariableDeclarationStatement[93234-93275]"
    }, {
      "left" : "RexNode rnd;",
      "right" : "RexNode rnd;",
      "info" : "VariableDeclarationStatement[93845-93857]:VariableDeclarationStatement[93285-93297]"
    }, {
      "left" : "RexNodeConverter converter = new RexNodeConverter(cluster, srcRel.getRowType(),\n            relToHiveColNameCalcitePosMap.get(srcRel), 0, false);",
      "right" : "RexNodeConverter converter = new RexNodeConverter(cluster, srcRel.getRowType(),\n            relToHiveColNameCalcitePosMap.get(srcRel), 0, false);",
      "info" : "VariableDeclarationStatement[93866-94011]:VariableDeclarationStatement[93306-93451]"
    }, {
      "left" : "int srcRelRecordSz = srcRel.getRowType().getFieldCount();",
      "right" : "int srcRelRecordSz = srcRel.getRowType().getFieldCount();",
      "info" : "VariableDeclarationStatement[94020-94077]:VariableDeclarationStatement[93460-93517]"
    }, {
      "left" : "for (int i = 0; i < obASTExprLst.size(); i++)",
      "right" : "for (int i = 0; i < obASTExprLst.size(); i++)",
      "info" : "ForStatement[94087-95691]:ForStatement[93527-95131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94133-95691]:Block[93573-95131]"
    }, {
      "left" : "obASTExpr = (ASTNode) obASTExprLst.get(i);",
      "right" : "obASTExpr = (ASTNode) obASTExprLst.get(i);",
      "info" : "ExpressionStatement[94191-94233]:ExpressionStatement[93631-93673]"
    }, {
      "left" : "Map<ASTNode, ExprNodeDesc> astToExprNDescMap = TypeCheckProcFactory.genExprNode(\n              obASTExpr, new TypeCheckCtx(inputRR));",
      "right" : "Map<ASTNode, ExprNodeDesc> astToExprNDescMap = TypeCheckProcFactory.genExprNode(\n              obASTExpr, new TypeCheckCtx(inputRR));",
      "info" : "VariableDeclarationStatement[94244-94377]:VariableDeclarationStatement[93684-93817]"
    }, {
      "left" : "ExprNodeDesc obExprNDesc = astToExprNDescMap.get(obASTExpr.getChild(0));",
      "right" : "ExprNodeDesc obExprNDesc = astToExprNDescMap.get(obASTExpr.getChild(0));",
      "info" : "VariableDeclarationStatement[94388-94460]:VariableDeclarationStatement[93828-93900]"
    }, {
      "left" : "if (obExprNDesc == null)",
      "right" : "if (obExprNDesc == null)",
      "info" : "IfStatement[94471-94592]:IfStatement[93911-94032]"
    }, {
      "left" : "throw new SemanticException(\"Invalid order by expression: \" + obASTExpr.toString());",
      "right" : "throw new SemanticException(\"Invalid order by expression: \" + obASTExpr.toString());",
      "info" : "ThrowStatement[94508-94592]:ThrowStatement[93948-94032]"
    }, {
      "left" : "rnd = converter.convert(obExprNDesc);",
      "right" : "rnd = converter.convert(obExprNDesc);",
      "info" : "ExpressionStatement[94649-94686]:ExpressionStatement[94089-94126]"
    }, {
      "left" : "if (rnd instanceof RexInputRef)",
      "right" : "if (rnd instanceof RexInputRef)",
      "info" : "IfStatement[94911-95259]:IfStatement[94351-94699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94943-95013]:Block[94383-94453]"
    }, {
      "left" : "fieldIndex = ((RexInputRef) rnd).getIndex();",
      "right" : "fieldIndex = ((RexInputRef) rnd).getIndex();",
      "info" : "ExpressionStatement[94957-95001]:ExpressionStatement[94397-94441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95019-95259]:Block[94459-94699]"
    }, {
      "left" : "fieldIndex = srcRelRecordSz + newVCLst.size();",
      "right" : "fieldIndex = srcRelRecordSz + newVCLst.size();",
      "info" : "ExpressionStatement[95033-95079]:ExpressionStatement[94473-94519]"
    }, {
      "left" : "newVCLst.add(rnd);",
      "right" : "newVCLst.add(rnd);",
      "info" : "ExpressionStatement[95092-95110]:ExpressionStatement[94532-94550]"
    }, {
      "left" : "vcASTTypePairs.add(new Pair<ASTNode, TypeInfo>((ASTNode) obASTExpr.getChild(0),\n                obExprNDesc.getTypeInfo()));",
      "right" : "vcASTTypePairs.add(new Pair<ASTNode, TypeInfo>((ASTNode) obASTExpr.getChild(0),\n                obExprNDesc.getTypeInfo()));",
      "info" : "ExpressionStatement[95123-95247]:ExpressionStatement[94563-94687]"
    }, {
      "left" : "org.apache.calcite.rel.RelFieldCollation.Direction order = RelFieldCollation.Direction.DESCENDING;",
      "right" : "org.apache.calcite.rel.RelFieldCollation.Direction order = RelFieldCollation.Direction.DESCENDING;",
      "info" : "VariableDeclarationStatement[95324-95422]:VariableDeclarationStatement[94764-94862]"
    }, {
      "left" : "if (obASTExpr.getType() == HiveParser.TOK_TABSORTCOLNAMEASC)",
      "right" : "if (obASTExpr.getType() == HiveParser.TOK_TABSORTCOLNAMEASC)",
      "info" : "IfStatement[95433-95566]:IfStatement[94873-95006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95494-95566]:Block[94934-95006]"
    }, {
      "left" : "order = RelFieldCollation.Direction.ASCENDING;",
      "right" : "order = RelFieldCollation.Direction.ASCENDING;",
      "info" : "ExpressionStatement[95508-95554]:ExpressionStatement[94948-94994]"
    }, {
      "left" : "fieldCollations.add(new RelFieldCollation(fieldIndex, order));",
      "right" : "fieldCollations.add(new RelFieldCollation(fieldIndex, order));",
      "info" : "ExpressionStatement[95619-95681]:ExpressionStatement[95059-95121]"
    }, {
      "left" : "RelNode obInputRel = srcRel;",
      "right" : "RelNode obInputRel = srcRel;",
      "info" : "VariableDeclarationStatement[95818-95846]:VariableDeclarationStatement[95258-95286]"
    }, {
      "left" : "if (!newVCLst.isEmpty())",
      "right" : "if (!newVCLst.isEmpty())",
      "info" : "IfStatement[95855-98002]:IfStatement[95295-97442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95880-97731]:Block[95320-97171]"
    }, {
      "left" : "List<RexNode> originalInputRefs = Lists.transform(srcRel.getRowType().getFieldList(),\n              new Function<RelDataTypeField, RexNode>() {\n                @Override\n                public RexNode apply(RelDataTypeField input) {\n                  return new RexInputRef(input.getIndex(), input.getType());\n                }\n              });",
      "right" : "List<RexNode> originalInputRefs = Lists.transform(srcRel.getRowType().getFieldList(),\n              new Function<RelDataTypeField, RexNode>() {\n                @Override\n                public RexNode apply(RelDataTypeField input) {\n                  return new RexInputRef(input.getIndex(), input.getType());\n                }\n              });",
      "info" : "VariableDeclarationStatement[95892-96237]:VariableDeclarationStatement[95332-95677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96123-96219]:Block[95563-95659]"
    }, {
      "left" : "return new RexInputRef(input.getIndex(), input.getType());",
      "right" : "return new RexInputRef(input.getIndex(), input.getType());",
      "info" : "ReturnStatement[96143-96201]:ReturnStatement[95583-95641]"
    }, {
      "left" : "RowResolver obSyntheticProjectRR = new RowResolver();",
      "right" : "RowResolver obSyntheticProjectRR = new RowResolver();",
      "info" : "VariableDeclarationStatement[96248-96301]:VariableDeclarationStatement[95688-95741]"
    }, {
      "left" : "if (!RowResolver.add(obSyntheticProjectRR, inputRR))",
      "right" : "if (!RowResolver.add(obSyntheticProjectRR, inputRR))",
      "info" : "IfStatement[96312-96567]:IfStatement[95752-96007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96365-96567]:Block[95805-96007]"
    }, {
      "left" : "throw new CalciteSemanticException(\n                \"Duplicates detected when adding columns to RR: see previous message\",\n                UnsupportedFeature.Duplicates_in_RR);",
      "right" : "throw new CalciteSemanticException(\n                \"Duplicates detected when adding columns to RR: see previous message\",\n                UnsupportedFeature.Duplicates_in_RR);",
      "info" : "ThrowStatement[96379-96555]:ThrowStatement[95819-95995]"
    }, {
      "left" : "int vcolPos = inputRR.getRowSchema().getSignature().size();",
      "right" : "int vcolPos = inputRR.getRowSchema().getSignature().size();",
      "info" : "VariableDeclarationStatement[96578-96637]:VariableDeclarationStatement[96018-96077]"
    }, {
      "left" : "for (Pair<ASTNode, TypeInfo> astTypePair : vcASTTypePairs)",
      "right" : "for (Pair<ASTNode, TypeInfo> astTypePair : vcASTTypePairs)",
      "info" : "EnhancedForStatement[96648-96948]:EnhancedForStatement[96088-96388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96707-96948]:Block[96147-96388]"
    }, {
      "left" : "obSyntheticProjectRR.putExpression(astTypePair.getKey(), new ColumnInfo(\n                SemanticAnalyzer.getColumnInternalName(vcolPos), astTypePair.getValue(), null,\n                false));",
      "right" : "obSyntheticProjectRR.putExpression(astTypePair.getKey(), new ColumnInfo(\n                SemanticAnalyzer.getColumnInternalName(vcolPos), astTypePair.getValue(), null,\n                false));",
      "info" : "ExpressionStatement[96721-96913]:ExpressionStatement[96161-96353]"
    }, {
      "left" : "vcolPos++;",
      "right" : "vcolPos++;",
      "info" : "ExpressionStatement[96926-96936]:ExpressionStatement[96366-96376]"
    }, {
      "left" : "obInputRel = genSelectRelNode(CompositeList.of(originalInputRefs, newVCLst),\n              obSyntheticProjectRR, srcRel);",
      "right" : "obInputRel = genSelectRelNode(CompositeList.of(originalInputRefs, newVCLst),\n              obSyntheticProjectRR, srcRel);",
      "info" : "ExpressionStatement[96959-97080]:ExpressionStatement[96399-96520]"
    }, {
      "left" : "if (outermostOB)",
      "right" : "if (outermostOB)",
      "info" : "IfStatement[97092-97721]:IfStatement[96532-97161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97109-97387]:Block[96549-96827]"
    }, {
      "left" : "if (!RowResolver.add(outputRR, inputRR))",
      "right" : "if (!RowResolver.add(outputRR, inputRR))",
      "info" : "IfStatement[97123-97374]:IfStatement[96563-96814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97164-97374]:Block[96604-96814]"
    }, {
      "left" : "throw new CalciteSemanticException(\n                  \"Duplicates detected when adding columns to RR: see previous message\",\n                  UnsupportedFeature.Duplicates_in_RR);",
      "right" : "throw new CalciteSemanticException(\n                  \"Duplicates detected when adding columns to RR: see previous message\",\n                  UnsupportedFeature.Duplicates_in_RR);",
      "info" : "ThrowStatement[97180-97360]:ThrowStatement[96620-96800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97393-97721]:Block[96833-97161]"
    }, {
      "left" : "if (!RowResolver.add(outputRR, obSyntheticProjectRR))",
      "right" : "if (!RowResolver.add(outputRR, obSyntheticProjectRR))",
      "info" : "IfStatement[97407-97671]:IfStatement[96847-97111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97461-97671]:Block[96901-97111]"
    }, {
      "left" : "throw new CalciteSemanticException(\n                  \"Duplicates detected when adding columns to RR: see previous message\",\n                  UnsupportedFeature.Duplicates_in_RR);",
      "right" : "throw new CalciteSemanticException(\n                  \"Duplicates detected when adding columns to RR: see previous message\",\n                  UnsupportedFeature.Duplicates_in_RR);",
      "info" : "ThrowStatement[97477-97657]:ThrowStatement[96917-97097]"
    }, {
      "left" : "originalOBChild = srcRel;",
      "right" : "originalOBChild = srcRel;",
      "info" : "ExpressionStatement[97684-97709]:ExpressionStatement[97124-97149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97737-98002]:Block[97177-97442]"
    }, {
      "left" : "if (!RowResolver.add(outputRR, inputRR))",
      "right" : "if (!RowResolver.add(outputRR, inputRR))",
      "info" : "IfStatement[97749-97992]:IfStatement[97189-97432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97790-97992]:Block[97230-97432]"
    }, {
      "left" : "throw new CalciteSemanticException(\n                \"Duplicates detected when adding columns to RR: see previous message\",\n                UnsupportedFeature.Duplicates_in_RR);",
      "right" : "throw new CalciteSemanticException(\n                \"Duplicates detected when adding columns to RR: see previous message\",\n                UnsupportedFeature.Duplicates_in_RR);",
      "info" : "ThrowStatement[97804-97980]:ThrowStatement[97244-97420]"
    }, {
      "left" : "RelTraitSet traitSet = cluster.traitSetOf(HiveRelNode.CONVENTION);",
      "right" : "RelTraitSet traitSet = cluster.traitSetOf(HiveRelNode.CONVENTION);",
      "info" : "VariableDeclarationStatement[98044-98110]:VariableDeclarationStatement[97484-97550]"
    }, {
      "left" : "RelCollation canonizedCollation = traitSet.canonize(RelCollationImpl.of(fieldCollations));",
      "right" : "RelCollation canonizedCollation = traitSet.canonize(RelCollationImpl.of(fieldCollations));",
      "info" : "VariableDeclarationStatement[98119-98209]:VariableDeclarationStatement[97559-97649]"
    }, {
      "left" : "sortRel = new HiveSort(cluster, traitSet, obInputRel, canonizedCollation, null, null);",
      "right" : "sortRel = new HiveSort(cluster, traitSet, obInputRel, canonizedCollation, null, null);",
      "info" : "ExpressionStatement[98218-98304]:ExpressionStatement[97658-97744]"
    }, {
      "left" : "ImmutableMap<String, Integer> hiveColNameCalcitePosMap = buildHiveToCalciteColumnMap(\n            outputRR, sortRel);",
      "right" : "ImmutableMap<String, Integer> hiveColNameCalcitePosMap = buildHiveToCalciteColumnMap(\n            outputRR, sortRel);",
      "info" : "VariableDeclarationStatement[98678-98795]:VariableDeclarationStatement[98118-98235]"
    }, {
      "left" : "relToHiveRR.put(sortRel, outputRR);",
      "right" : "relToHiveRR.put(sortRel, outputRR);",
      "info" : "ExpressionStatement[98804-98839]:ExpressionStatement[98244-98279]"
    }, {
      "left" : "relToHiveColNameCalcitePosMap.put(sortRel, hiveColNameCalcitePosMap);",
      "right" : "relToHiveColNameCalcitePosMap.put(sortRel, hiveColNameCalcitePosMap);",
      "info" : "ExpressionStatement[98848-98917]:ExpressionStatement[98288-98357]"
    }, {
      "left" : "return (new Pair<RelNode, RelNode>(sortRel, originalOBChild));",
      "right" : "return (new Pair<RelNode, RelNode>(sortRel, originalOBChild));",
      "info" : "ReturnStatement[98933-98995]:ReturnStatement[98373-98435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99091-100224]:Block[98531-99664]"
    }, {
      "left" : "HiveRelNode sortRel = null;",
      "right" : "HiveRelNode sortRel = null;",
      "info" : "VariableDeclarationStatement[99099-99126]:VariableDeclarationStatement[98539-98566]"
    }, {
      "left" : "QBParseInfo qbp = getQBParseInfo(qb);",
      "right" : "QBParseInfo qbp = getQBParseInfo(qb);",
      "info" : "VariableDeclarationStatement[99133-99170]:VariableDeclarationStatement[98573-98610]"
    }, {
      "left" : "Integer limit = qbp.getDestToLimit().get(qbp.getClauseNames().iterator().next());",
      "right" : "Integer limit = qbp.getDestToLimit().get(qbp.getClauseNames().iterator().next());",
      "info" : "VariableDeclarationStatement[99177-99258]:VariableDeclarationStatement[98617-98698]"
    }, {
      "left" : "if (limit != null)",
      "right" : "if (limit != null)",
      "info" : "IfStatement[99266-100195]:IfStatement[98706-99635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99285-100195]:Block[98725-99635]"
    }, {
      "left" : "RexNode fetch = cluster.getRexBuilder().makeExactLiteral(BigDecimal.valueOf(limit));",
      "right" : "RexNode fetch = cluster.getRexBuilder().makeExactLiteral(BigDecimal.valueOf(limit));",
      "info" : "VariableDeclarationStatement[99295-99379]:VariableDeclarationStatement[98735-98819]"
    }, {
      "left" : "RelTraitSet traitSet = cluster.traitSetOf(HiveRelNode.CONVENTION);",
      "right" : "RelTraitSet traitSet = cluster.traitSetOf(HiveRelNode.CONVENTION);",
      "info" : "VariableDeclarationStatement[99388-99454]:VariableDeclarationStatement[98828-98894]"
    }, {
      "left" : "RelCollation canonizedCollation = traitSet.canonize(RelCollations.EMPTY);",
      "right" : "RelCollation canonizedCollation = traitSet.canonize(RelCollations.EMPTY);",
      "info" : "VariableDeclarationStatement[99463-99536]:VariableDeclarationStatement[98903-98976]"
    }, {
      "left" : "sortRel = new HiveSort(cluster, traitSet, srcRel, canonizedCollation, null, fetch);",
      "right" : "sortRel = new HiveSort(cluster, traitSet, srcRel, canonizedCollation, null, fetch);",
      "info" : "ExpressionStatement[99545-99628]:ExpressionStatement[98985-99068]"
    }, {
      "left" : "RowResolver outputRR = new RowResolver();",
      "right" : "RowResolver outputRR = new RowResolver();",
      "info" : "VariableDeclarationStatement[99638-99679]:VariableDeclarationStatement[99078-99119]"
    }, {
      "left" : "if (!RowResolver.add(outputRR, relToHiveRR.get(srcRel)))",
      "right" : "if (!RowResolver.add(outputRR, relToHiveRR.get(srcRel)))",
      "info" : "IfStatement[99688-99939]:IfStatement[99128-99379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99745-99939]:Block[99185-99379]"
    }, {
      "left" : "throw new CalciteSemanticException(\n              \"Duplicates detected when adding columns to RR: see previous message\",\n              UnsupportedFeature.Duplicates_in_RR);",
      "right" : "throw new CalciteSemanticException(\n              \"Duplicates detected when adding columns to RR: see previous message\",\n              UnsupportedFeature.Duplicates_in_RR);",
      "info" : "ThrowStatement[99757-99929]:ThrowStatement[99197-99369]"
    }, {
      "left" : "ImmutableMap<String, Integer> hiveColNameCalcitePosMap = buildHiveToCalciteColumnMap(\n            outputRR, sortRel);",
      "right" : "ImmutableMap<String, Integer> hiveColNameCalcitePosMap = buildHiveToCalciteColumnMap(\n            outputRR, sortRel);",
      "info" : "VariableDeclarationStatement[99948-100065]:VariableDeclarationStatement[99388-99505]"
    }, {
      "left" : "relToHiveRR.put(sortRel, outputRR);",
      "right" : "relToHiveRR.put(sortRel, outputRR);",
      "info" : "ExpressionStatement[100074-100109]:ExpressionStatement[99514-99549]"
    }, {
      "left" : "relToHiveColNameCalcitePosMap.put(sortRel, hiveColNameCalcitePosMap);",
      "right" : "relToHiveColNameCalcitePosMap.put(sortRel, hiveColNameCalcitePosMap);",
      "info" : "ExpressionStatement[100118-100187]:ExpressionStatement[99558-99627]"
    }, {
      "left" : "return sortRel;",
      "right" : "return sortRel;",
      "info" : "ReturnStatement[100203-100218]:ReturnStatement[99643-99658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100369-100845]:Block[99809-100285]"
    }, {
      "left" : "List<RexNode> pKeys = new ArrayList<RexNode>();",
      "right" : "List<RexNode> pKeys = new ArrayList<RexNode>();",
      "info" : "VariableDeclarationStatement[100377-100424]:VariableDeclarationStatement[99817-99864]"
    }, {
      "left" : "if (ps != null)",
      "right" : "if (ps != null)",
      "info" : "IfStatement[100431-100818]:IfStatement[99871-100258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100447-100818]:Block[99887-100258]"
    }, {
      "left" : "List<PartitionExpression> pExprs = ps.getExpressions();",
      "right" : "List<PartitionExpression> pExprs = ps.getExpressions();",
      "info" : "VariableDeclarationStatement[100457-100512]:VariableDeclarationStatement[99897-99952]"
    }, {
      "left" : "for (PartitionExpression pExpr : pExprs)",
      "right" : "for (PartitionExpression pExpr : pExprs)",
      "info" : "EnhancedForStatement[100521-100810]:EnhancedForStatement[99961-100250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100562-100810]:Block[100002-100250]"
    }, {
      "left" : "TypeCheckCtx tcCtx = new TypeCheckCtx(inputRR);",
      "right" : "TypeCheckCtx tcCtx = new TypeCheckCtx(inputRR);",
      "info" : "VariableDeclarationStatement[100574-100621]:VariableDeclarationStatement[100014-100061]"
    }, {
      "left" : "tcCtx.setAllowStatefulFunctions(true);",
      "right" : "tcCtx.setAllowStatefulFunctions(true);",
      "info" : "ExpressionStatement[100632-100670]:ExpressionStatement[100072-100110]"
    }, {
      "left" : "ExprNodeDesc exp = genExprNodeDesc(pExpr.getExpression(), inputRR, tcCtx);",
      "right" : "ExprNodeDesc exp = genExprNodeDesc(pExpr.getExpression(), inputRR, tcCtx);",
      "info" : "VariableDeclarationStatement[100681-100755]:VariableDeclarationStatement[100121-100195]"
    }, {
      "left" : "pKeys.add(converter.convert(exp));",
      "right" : "pKeys.add(converter.convert(exp));",
      "info" : "ExpressionStatement[100766-100800]:ExpressionStatement[100206-100240]"
    }, {
      "left" : "return pKeys;",
      "right" : "return pKeys;",
      "info" : "ReturnStatement[100826-100839]:ReturnStatement[100266-100279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100992-101739]:Block[100432-101179]"
    }, {
      "left" : "List<RexFieldCollation> oKeys = new ArrayList<RexFieldCollation>();",
      "right" : "List<RexFieldCollation> oKeys = new ArrayList<RexFieldCollation>();",
      "info" : "VariableDeclarationStatement[101000-101067]:VariableDeclarationStatement[100440-100507]"
    }, {
      "left" : "if (os != null)",
      "right" : "if (os != null)",
      "info" : "IfStatement[101074-101712]:IfStatement[100514-101152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101090-101712]:Block[100530-101152]"
    }, {
      "left" : "List<OrderExpression> oExprs = os.getExpressions();",
      "right" : "List<OrderExpression> oExprs = os.getExpressions();",
      "info" : "VariableDeclarationStatement[101100-101151]:VariableDeclarationStatement[100540-100591]"
    }, {
      "left" : "for (OrderExpression oExpr : oExprs)",
      "right" : "for (OrderExpression oExpr : oExprs)",
      "info" : "EnhancedForStatement[101160-101704]:EnhancedForStatement[100600-101144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101197-101704]:Block[100637-101144]"
    }, {
      "left" : "TypeCheckCtx tcCtx = new TypeCheckCtx(inputRR);",
      "right" : "TypeCheckCtx tcCtx = new TypeCheckCtx(inputRR);",
      "info" : "VariableDeclarationStatement[101209-101256]:VariableDeclarationStatement[100649-100696]"
    }, {
      "left" : "tcCtx.setAllowStatefulFunctions(true);",
      "right" : "tcCtx.setAllowStatefulFunctions(true);",
      "info" : "ExpressionStatement[101267-101305]:ExpressionStatement[100707-100745]"
    }, {
      "left" : "ExprNodeDesc exp = genExprNodeDesc(oExpr.getExpression(), inputRR, tcCtx);",
      "right" : "ExprNodeDesc exp = genExprNodeDesc(oExpr.getExpression(), inputRR, tcCtx);",
      "info" : "VariableDeclarationStatement[101316-101390]:VariableDeclarationStatement[100756-100830]"
    }, {
      "left" : "RexNode ordExp = converter.convert(exp);",
      "right" : "RexNode ordExp = converter.convert(exp);",
      "info" : "VariableDeclarationStatement[101401-101441]:VariableDeclarationStatement[100841-100881]"
    }, {
      "left" : "Set<SqlKind> flags = new HashSet<SqlKind>();",
      "right" : "Set<SqlKind> flags = new HashSet<SqlKind>();",
      "info" : "VariableDeclarationStatement[101452-101496]:VariableDeclarationStatement[100892-100936]"
    }, {
      "left" : "if (oExpr.getOrder() == org.apache.hadoop.hive.ql.parse.PTFInvocationSpec.Order.DESC)",
      "right" : "if (oExpr.getOrder() == org.apache.hadoop.hive.ql.parse.PTFInvocationSpec.Order.DESC)",
      "info" : "IfStatement[101507-101635]:IfStatement[100947-101075]"
    }, {
      "left" : "flags.add(SqlKind.DESCENDING);",
      "right" : "flags.add(SqlKind.DESCENDING);",
      "info" : "ExpressionStatement[101605-101635]:ExpressionStatement[101045-101075]"
    }, {
      "left" : "oKeys.add(new RexFieldCollation(ordExp, flags));",
      "right" : "oKeys.add(new RexFieldCollation(ordExp, flags));",
      "info" : "ExpressionStatement[101646-101694]:ExpressionStatement[101086-101134]"
    }, {
      "left" : "return oKeys;",
      "right" : "return oKeys;",
      "info" : "ReturnStatement[101720-101733]:ReturnStatement[101160-101173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101822-103342]:Block[101262-102782]"
    }, {
      "left" : "RexWindowBound rwb = null;",
      "right" : "RexWindowBound rwb = null;",
      "info" : "VariableDeclarationStatement[101830-101856]:VariableDeclarationStatement[101270-101296]"
    }, {
      "left" : "if (bs != null)",
      "right" : "if (bs != null)",
      "info" : "IfStatement[101864-103317]:IfStatement[101304-102757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101880-103317]:Block[101320-102757]"
    }, {
      "left" : "SqlParserPos pos = new SqlParserPos(1, 1);",
      "right" : "SqlParserPos pos = new SqlParserPos(1, 1);",
      "info" : "VariableDeclarationStatement[101890-101932]:VariableDeclarationStatement[101330-101372]"
    }, {
      "left" : "SqlNode amt = bs.getAmt() == 0 ? null : SqlLiteral.createExactNumeric(\n            String.valueOf(bs.getAmt()), new SqlParserPos(2, 2));",
      "right" : "SqlNode amt = bs.getAmt() == 0 ? null : SqlLiteral.createExactNumeric(\n            String.valueOf(bs.getAmt()), new SqlParserPos(2, 2));",
      "info" : "VariableDeclarationStatement[101941-102077]:VariableDeclarationStatement[101381-101517]"
    }, {
      "left" : "RexNode amtLiteral = null;",
      "right" : "RexNode amtLiteral = null;",
      "info" : "VariableDeclarationStatement[102086-102112]:VariableDeclarationStatement[101526-101552]"
    }, {
      "left" : "SqlCall sc = null;",
      "right" : "SqlCall sc = null;",
      "info" : "VariableDeclarationStatement[102121-102139]:VariableDeclarationStatement[101561-101579]"
    }, {
      "left" : "if (amt != null)",
      "right" : "if (amt != null)",
      "info" : "IfStatement[102149-102332]:IfStatement[101589-101772]"
    }, {
      "left" : "amtLiteral = cluster.getRexBuilder().makeLiteral(new Integer(bs.getAmt()),\n              cluster.getTypeFactory().createSqlType(SqlTypeName.INTEGER), true);",
      "right" : "amtLiteral = cluster.getRexBuilder().makeLiteral(new Integer(bs.getAmt()),\n              cluster.getTypeFactory().createSqlType(SqlTypeName.INTEGER), true);",
      "info" : "ExpressionStatement[102176-102332]:ExpressionStatement[101616-101772]"
    }, {
      "left" : "switch (bs.getDirection()) {\n        case PRECEDING:\n          if (amt == null) {\n            rwb = RexWindowBound.create(SqlWindow.createUnboundedPreceding(pos), null);\n          } else {\n            sc = (SqlCall) SqlWindow.createPreceding(amt, pos);\n            rwb = RexWindowBound.create(sc,\n                cluster.getRexBuilder().makeCall(sc.getOperator(), amtLiteral));\n          }\n          break;\n\n        case CURRENT:\n          rwb = RexWindowBound.create(SqlWindow.createCurrentRow(new SqlParserPos(1, 1)), null);\n          break;\n\n        case FOLLOWING:\n          if (amt == null) {\n            rwb = RexWindowBound.create(SqlWindow.createUnboundedFollowing(new SqlParserPos(1, 1)),\n                null);\n          } else {\n            sc = (SqlCall) SqlWindow.createFollowing(amt, pos);\n            rwb = RexWindowBound.create(sc,\n                cluster.getRexBuilder().makeCall(sc.getOperator(), amtLiteral));\n          }\n          break;\n        }",
      "right" : "switch (bs.getDirection()) {\n        case PRECEDING:\n          if (amt == null) {\n            rwb = RexWindowBound.create(SqlWindow.createUnboundedPreceding(pos), null);\n          } else {\n            sc = (SqlCall) SqlWindow.createPreceding(amt, pos);\n            rwb = RexWindowBound.create(sc,\n                cluster.getRexBuilder().makeCall(sc.getOperator(), amtLiteral));\n          }\n          break;\n\n        case CURRENT:\n          rwb = RexWindowBound.create(SqlWindow.createCurrentRow(new SqlParserPos(1, 1)), null);\n          break;\n\n        case FOLLOWING:\n          if (amt == null) {\n            rwb = RexWindowBound.create(SqlWindow.createUnboundedFollowing(new SqlParserPos(1, 1)),\n                null);\n          } else {\n            sc = (SqlCall) SqlWindow.createFollowing(amt, pos);\n            rwb = RexWindowBound.create(sc,\n                cluster.getRexBuilder().makeCall(sc.getOperator(), amtLiteral));\n          }\n          break;\n        }",
      "info" : "SwitchStatement[102342-103309]:SwitchStatement[101782-102749]"
    }, {
      "left" : "case PRECEDING:",
      "right" : "case PRECEDING:",
      "info" : "SwitchCase[102379-102394]:SwitchCase[101819-101834]"
    }, {
      "left" : "if (amt == null)",
      "right" : "if (amt == null)",
      "info" : "IfStatement[102405-102731]:IfStatement[101845-102171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102422-102523]:Block[101862-101963]"
    }, {
      "left" : "rwb = RexWindowBound.create(SqlWindow.createUnboundedPreceding(pos), null);",
      "right" : "rwb = RexWindowBound.create(SqlWindow.createUnboundedPreceding(pos), null);",
      "info" : "ExpressionStatement[102436-102511]:ExpressionStatement[101876-101951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102529-102731]:Block[101969-102171]"
    }, {
      "left" : "sc = (SqlCall) SqlWindow.createPreceding(amt, pos);",
      "right" : "sc = (SqlCall) SqlWindow.createPreceding(amt, pos);",
      "info" : "ExpressionStatement[102543-102594]:ExpressionStatement[101983-102034]"
    }, {
      "left" : "rwb = RexWindowBound.create(sc,\n                cluster.getRexBuilder().makeCall(sc.getOperator(), amtLiteral));",
      "right" : "rwb = RexWindowBound.create(sc,\n                cluster.getRexBuilder().makeCall(sc.getOperator(), amtLiteral));",
      "info" : "ExpressionStatement[102607-102719]:ExpressionStatement[102047-102159]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[102742-102748]:BreakStatement[102182-102188]"
    }, {
      "left" : "case CURRENT:",
      "right" : "case CURRENT:",
      "info" : "SwitchCase[102758-102771]:SwitchCase[102198-102211]"
    }, {
      "left" : "rwb = RexWindowBound.create(SqlWindow.createCurrentRow(new SqlParserPos(1, 1)), null);",
      "right" : "rwb = RexWindowBound.create(SqlWindow.createCurrentRow(new SqlParserPos(1, 1)), null);",
      "info" : "ExpressionStatement[102782-102868]:ExpressionStatement[102222-102308]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[102879-102885]:BreakStatement[102319-102325]"
    }, {
      "left" : "case FOLLOWING:",
      "right" : "case FOLLOWING:",
      "info" : "SwitchCase[102895-102910]:SwitchCase[102335-102350]"
    }, {
      "left" : "if (amt == null)",
      "right" : "if (amt == null)",
      "info" : "IfStatement[102921-103282]:IfStatement[102361-102722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102938-103074]:Block[102378-102514]"
    }, {
      "left" : "rwb = RexWindowBound.create(SqlWindow.createUnboundedFollowing(new SqlParserPos(1, 1)),\n                null);",
      "right" : "rwb = RexWindowBound.create(SqlWindow.createUnboundedFollowing(new SqlParserPos(1, 1)),\n                null);",
      "info" : "ExpressionStatement[102952-103062]:ExpressionStatement[102392-102502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103080-103282]:Block[102520-102722]"
    }, {
      "left" : "sc = (SqlCall) SqlWindow.createFollowing(amt, pos);",
      "right" : "sc = (SqlCall) SqlWindow.createFollowing(amt, pos);",
      "info" : "ExpressionStatement[103094-103145]:ExpressionStatement[102534-102585]"
    }, {
      "left" : "rwb = RexWindowBound.create(sc,\n                cluster.getRexBuilder().makeCall(sc.getOperator(), amtLiteral));",
      "right" : "rwb = RexWindowBound.create(sc,\n                cluster.getRexBuilder().makeCall(sc.getOperator(), amtLiteral));",
      "info" : "ExpressionStatement[103158-103270]:ExpressionStatement[102598-102710]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[103293-103299]:BreakStatement[102733-102739]"
    }, {
      "left" : "return rwb;",
      "right" : "return rwb;",
      "info" : "ReturnStatement[103325-103336]:ReturnStatement[102765-102776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103394-103572]:Block[102834-103012]"
    }, {
      "left" : "int wi = wndAST.getChildCount() - 1;",
      "right" : "int wi = wndAST.getChildCount() - 1;",
      "info" : "VariableDeclarationStatement[103402-103438]:VariableDeclarationStatement[102842-102878]"
    }, {
      "left" : "if (wi <= 0 || (wndAST.getChild(wi).getType() != HiveParser.TOK_WINDOWSPEC))",
      "right" : "if (wi <= 0 || (wndAST.getChild(wi).getType() != HiveParser.TOK_WINDOWSPEC))",
      "info" : "IfStatement[103445-103548]:IfStatement[102885-102988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103522-103548]:Block[102962-102988]"
    }, {
      "left" : "wi = -1;",
      "right" : "wi = -1;",
      "info" : "ExpressionStatement[103532-103540]:ExpressionStatement[102972-102980]"
    }, {
      "left" : "return wi;",
      "right" : "return wi;",
      "info" : "ReturnStatement[103556-103566]:ReturnStatement[102996-103006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103714-106744]:Block[103154-106184]"
    }, {
      "left" : "RexNode w = null;",
      "right" : "RexNode w = null;",
      "info" : "VariableDeclarationStatement[103722-103739]:VariableDeclarationStatement[103162-103179]"
    }, {
      "left" : "TypeInfo wHiveRetType = null;",
      "right" : "TypeInfo wHiveRetType = null;",
      "info" : "VariableDeclarationStatement[103746-103775]:VariableDeclarationStatement[103186-103215]"
    }, {
      "left" : "if (wExpSpec instanceof WindowFunctionSpec)",
      "right" : "if (wExpSpec instanceof WindowFunctionSpec)",
      "info" : "IfStatement[103783-106678]:IfStatement[103223-106118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103827-106553]:Block[103267-105993]"
    }, {
      "left" : "WindowFunctionSpec wFnSpec = (WindowFunctionSpec) wExpSpec;",
      "right" : "WindowFunctionSpec wFnSpec = (WindowFunctionSpec) wExpSpec;",
      "info" : "VariableDeclarationStatement[103837-103896]:VariableDeclarationStatement[103277-103336]"
    }, {
      "left" : "ASTNode windowProjAst = wFnSpec.getExpression();",
      "right" : "ASTNode windowProjAst = wFnSpec.getExpression();",
      "info" : "VariableDeclarationStatement[103905-103953]:VariableDeclarationStatement[103345-103393]"
    }, {
      "left" : "int wndSpecASTIndx = getWindowSpecIndx(windowProjAst);",
      "right" : "int wndSpecASTIndx = getWindowSpecIndx(windowProjAst);",
      "info" : "VariableDeclarationStatement[104007-104061]:VariableDeclarationStatement[103447-103501]"
    }, {
      "left" : "AggInfo hiveAggInfo = getHiveAggInfo(windowProjAst, wndSpecASTIndx - 1,\n            this.relToHiveRR.get(srcRel));",
      "right" : "AggInfo hiveAggInfo = getHiveAggInfo(windowProjAst, wndSpecASTIndx - 1,\n            this.relToHiveRR.get(srcRel));",
      "info" : "VariableDeclarationStatement[104108-104222]:VariableDeclarationStatement[103548-103662]"
    }, {
      "left" : "wHiveRetType = hiveAggInfo.m_returnType;",
      "right" : "wHiveRetType = hiveAggInfo.m_returnType;",
      "info" : "ExpressionStatement[104281-104321]:ExpressionStatement[103721-103761]"
    }, {
      "left" : "RelDataType calciteAggFnRetType = TypeConverter.convert(hiveAggInfo.m_returnType,\n            this.cluster.getTypeFactory());",
      "right" : "RelDataType calciteAggFnRetType = TypeConverter.convert(hiveAggInfo.m_returnType,\n            this.cluster.getTypeFactory());",
      "info" : "VariableDeclarationStatement[104330-104455]:VariableDeclarationStatement[103770-103895]"
    }, {
      "left" : "ImmutableMap<String, Integer> posMap = this.relToHiveColNameCalcitePosMap.get(srcRel);",
      "right" : "ImmutableMap<String, Integer> posMap = this.relToHiveColNameCalcitePosMap.get(srcRel);",
      "info" : "VariableDeclarationStatement[104510-104596]:VariableDeclarationStatement[103950-104036]"
    }, {
      "left" : "RexNodeConverter converter = new RexNodeConverter(this.cluster, srcRel.getRowType(),\n            posMap, 0, false);",
      "right" : "RexNodeConverter converter = new RexNodeConverter(this.cluster, srcRel.getRowType(),\n            posMap, 0, false);",
      "info" : "VariableDeclarationStatement[104605-104720]:VariableDeclarationStatement[104045-104160]"
    }, {
      "left" : "Builder<RexNode> calciteAggFnArgsBldr = ImmutableList.<RexNode> builder();",
      "right" : "Builder<RexNode> calciteAggFnArgsBldr = ImmutableList.<RexNode> builder();",
      "info" : "VariableDeclarationStatement[104729-104803]:VariableDeclarationStatement[104169-104243]"
    }, {
      "left" : "Builder<RelDataType> calciteAggFnArgsTypeBldr = ImmutableList.<RelDataType> builder();",
      "right" : "Builder<RelDataType> calciteAggFnArgsTypeBldr = ImmutableList.<RelDataType> builder();",
      "info" : "VariableDeclarationStatement[104812-104898]:VariableDeclarationStatement[104252-104338]"
    }, {
      "left" : "for (int i = 0; i < hiveAggInfo.m_aggParams.size(); i++)",
      "right" : "for (int i = 0; i < hiveAggInfo.m_aggParams.size(); i++)",
      "info" : "ForStatement[104907-105217]:ForStatement[104347-104657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104964-105217]:Block[104404-104657]"
    }, {
      "left" : "calciteAggFnArgsBldr.add(converter.convert(hiveAggInfo.m_aggParams.get(i)));",
      "right" : "calciteAggFnArgsBldr.add(converter.convert(hiveAggInfo.m_aggParams.get(i)));",
      "info" : "ExpressionStatement[104976-105052]:ExpressionStatement[104416-104492]"
    }, {
      "left" : "calciteAggFnArgsTypeBldr.add(TypeConverter.convert(hiveAggInfo.m_aggParams.get(i)\n              .getTypeInfo(), this.cluster.getTypeFactory()));",
      "right" : "calciteAggFnArgsTypeBldr.add(TypeConverter.convert(hiveAggInfo.m_aggParams.get(i)\n              .getTypeInfo(), this.cluster.getTypeFactory()));",
      "info" : "ExpressionStatement[105063-105207]:ExpressionStatement[104503-104647]"
    }, {
      "left" : "ImmutableList<RexNode> calciteAggFnArgs = calciteAggFnArgsBldr.build();",
      "right" : "ImmutableList<RexNode> calciteAggFnArgs = calciteAggFnArgsBldr.build();",
      "info" : "VariableDeclarationStatement[105226-105297]:VariableDeclarationStatement[104666-104737]"
    }, {
      "left" : "ImmutableList<RelDataType> calciteAggFnArgsType = calciteAggFnArgsTypeBldr.build();",
      "right" : "ImmutableList<RelDataType> calciteAggFnArgsType = calciteAggFnArgsTypeBldr.build();",
      "info" : "VariableDeclarationStatement[105306-105389]:VariableDeclarationStatement[104746-104829]"
    }, {
      "left" : "final SqlAggFunction calciteAggFn = SqlFunctionConverter.getCalciteAggFn(\n            hiveAggInfo.m_udfName, calciteAggFnArgsType, calciteAggFnRetType);",
      "right" : "final SqlAggFunction calciteAggFn = SqlFunctionConverter.getCalciteAggFn(\n            hiveAggInfo.m_udfName, calciteAggFnArgsType, calciteAggFnRetType);",
      "info" : "VariableDeclarationStatement[105432-105584]:VariableDeclarationStatement[104872-105024]"
    }, {
      "left" : "RowResolver inputRR = relToHiveRR.get(srcRel);",
      "right" : "RowResolver inputRR = relToHiveRR.get(srcRel);",
      "info" : "VariableDeclarationStatement[105630-105676]:VariableDeclarationStatement[105070-105116]"
    }, {
      "left" : "WindowSpec wndSpec = ((WindowFunctionSpec) wExpSpec).getWindowSpec();",
      "right" : "WindowSpec wndSpec = ((WindowFunctionSpec) wExpSpec).getWindowSpec();",
      "info" : "VariableDeclarationStatement[105685-105754]:VariableDeclarationStatement[105125-105194]"
    }, {
      "left" : "List<RexNode> partitionKeys = getPartitionKeys(wndSpec.getPartition(), converter, inputRR);",
      "right" : "List<RexNode> partitionKeys = getPartitionKeys(wndSpec.getPartition(), converter, inputRR);",
      "info" : "VariableDeclarationStatement[105763-105854]:VariableDeclarationStatement[105203-105294]"
    }, {
      "left" : "List<RexFieldCollation> orderKeys = getOrderKeys(wndSpec.getOrder(), converter, inputRR);",
      "right" : "List<RexFieldCollation> orderKeys = getOrderKeys(wndSpec.getOrder(), converter, inputRR);",
      "info" : "VariableDeclarationStatement[105863-105952]:VariableDeclarationStatement[105303-105392]"
    }, {
      "left" : "RexWindowBound upperBound = getBound(wndSpec.getWindowFrame().start, converter);",
      "right" : "RexWindowBound upperBound = getBound(wndSpec.getWindowFrame().start, converter);",
      "info" : "VariableDeclarationStatement[105961-106041]:VariableDeclarationStatement[105401-105481]"
    }, {
      "left" : "RexWindowBound lowerBound = getBound(wndSpec.getWindowFrame().end, converter);",
      "right" : "RexWindowBound lowerBound = getBound(wndSpec.getWindowFrame().end, converter);",
      "info" : "VariableDeclarationStatement[106050-106128]:VariableDeclarationStatement[105490-105568]"
    }, {
      "left" : "boolean isRows = ((wndSpec.getWindowFrame().start instanceof RangeBoundarySpec) || (wndSpec.getWindowFrame().end instanceof RangeBoundarySpec)) ? true\n            : false;",
      "right" : "boolean isRows = ((wndSpec.getWindowFrame().start instanceof RangeBoundarySpec) || (wndSpec.getWindowFrame().end instanceof RangeBoundarySpec)) ? true\n            : false;",
      "info" : "VariableDeclarationStatement[106137-106308]:VariableDeclarationStatement[105577-105748]"
    }, {
      "left" : "w = cluster.getRexBuilder().makeOver(calciteAggFnRetType, calciteAggFn, calciteAggFnArgs,\n            partitionKeys, ImmutableList.<RexFieldCollation> copyOf(orderKeys), lowerBound,\n            upperBound, isRows, true, false);",
      "right" : "w = cluster.getRexBuilder().makeOver(calciteAggFnRetType, calciteAggFn, calciteAggFnArgs,\n            partitionKeys, ImmutableList.<RexFieldCollation> copyOf(orderKeys), lowerBound,\n            upperBound, isRows, true, false);",
      "info" : "ExpressionStatement[106318-106545]:ExpressionStatement[105758-105985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106559-106678]:Block[105999-106118]"
    }, {
      "left" : "throw new RuntimeException(\"Unsupported window Spec\");",
      "right" : "throw new RuntimeException(\"Unsupported window Spec\");",
      "info" : "ThrowStatement[106616-106670]:ThrowStatement[106056-106110]"
    }, {
      "left" : "return new Pair<RexNode, TypeInfo>(w, wHiveRetType);",
      "right" : "return new Pair<RexNode, TypeInfo>(w, wHiveRetType);",
      "info" : "ReturnStatement[106686-106738]:ReturnStatement[106126-106178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106876-108673]:Block[106316-108113]"
    }, {
      "left" : "getQBParseInfo(qb);",
      "right" : "getQBParseInfo(qb);",
      "info" : "ExpressionStatement[106884-106903]:ExpressionStatement[106324-106343]"
    }, {
      "left" : "WindowingSpec wSpec = (!qb.getAllWindowingSpecs().isEmpty()) ? qb.getAllWindowingSpecs()\n          .values().iterator().next() : null;",
      "right" : "WindowingSpec wSpec = (!qb.getAllWindowingSpecs().isEmpty()) ? qb.getAllWindowingSpecs()\n          .values().iterator().next() : null;",
      "info" : "VariableDeclarationStatement[106910-107044]:VariableDeclarationStatement[106350-106484]"
    }, {
      "left" : "if (wSpec == null)",
      "right" : "if (wSpec == null)",
      "info" : "IfStatement[107051-107090]:IfStatement[106491-106530]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[107078-107090]:ReturnStatement[106518-106530]"
    }, {
      "left" : "wSpec.validateAndMakeEffective();",
      "right" : "wSpec.validateAndMakeEffective();",
      "info" : "ExpressionStatement[107140-107173]:ExpressionStatement[106580-106613]"
    }, {
      "left" : "List<WindowExpressionSpec> windowExpressions = wSpec.getWindowExpressions();",
      "right" : "List<WindowExpressionSpec> windowExpressions = wSpec.getWindowExpressions();",
      "info" : "VariableDeclarationStatement[107180-107256]:VariableDeclarationStatement[106620-106696]"
    }, {
      "left" : "if (windowExpressions == null || windowExpressions.isEmpty())",
      "right" : "if (windowExpressions == null || windowExpressions.isEmpty())",
      "info" : "IfStatement[107263-107345]:IfStatement[106703-106785]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[107333-107345]:ReturnStatement[106773-106785]"
    }, {
      "left" : "RowResolver inputRR = this.relToHiveRR.get(srcRel);",
      "right" : "RowResolver inputRR = this.relToHiveRR.get(srcRel);",
      "info" : "VariableDeclarationStatement[107353-107404]:VariableDeclarationStatement[106793-106844]"
    }, {
      "left" : "List<RexNode> projsForWindowSelOp = new ArrayList<RexNode>(\n          HiveCalciteUtil.getProjsFromBelowAsInputRef(srcRel));",
      "right" : "List<RexNode> projsForWindowSelOp = new ArrayList<RexNode>(\n          HiveCalciteUtil.getProjsFromBelowAsInputRef(srcRel));",
      "info" : "VariableDeclarationStatement[107472-107595]:VariableDeclarationStatement[106912-107035]"
    }, {
      "left" : "RowResolver out_rwsch = new RowResolver();",
      "right" : "RowResolver out_rwsch = new RowResolver();",
      "info" : "VariableDeclarationStatement[107670-107712]:VariableDeclarationStatement[107110-107152]"
    }, {
      "left" : "if (!RowResolver.add(out_rwsch, inputRR))",
      "right" : "if (!RowResolver.add(out_rwsch, inputRR))",
      "info" : "IfStatement[107719-107859]:IfStatement[107159-107299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107761-107859]:Block[107201-107299]"
    }, {
      "left" : "LOG.warn(\"Duplicates detected when adding columns to RR: see previous message\");",
      "right" : "LOG.warn(\"Duplicates detected when adding columns to RR: see previous message\");",
      "info" : "ExpressionStatement[107771-107851]:ExpressionStatement[107211-107291]"
    }, {
      "left" : "for (WindowExpressionSpec wExprSpec : windowExpressions)",
      "right" : "for (WindowExpressionSpec wExprSpec : windowExpressions)",
      "info" : "EnhancedForStatement[107969-108576]:EnhancedForStatement[107409-108016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108026-108576]:Block[107466-108016]"
    }, {
      "left" : "if (out_rwsch.getExpression(wExprSpec.getExpression()) == null)",
      "right" : "if (out_rwsch.getExpression(wExprSpec.getExpression()) == null)",
      "info" : "IfStatement[108036-108568]:IfStatement[107476-108008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108100-108568]:Block[107540-108008]"
    }, {
      "left" : "Pair<RexNode, TypeInfo> wtp = genWindowingProj(qb, wExprSpec, srcRel);",
      "right" : "Pair<RexNode, TypeInfo> wtp = genWindowingProj(qb, wExprSpec, srcRel);",
      "info" : "VariableDeclarationStatement[108112-108182]:VariableDeclarationStatement[107552-107622]"
    }, {
      "left" : "projsForWindowSelOp.add(wtp.getKey());",
      "right" : "projsForWindowSelOp.add(wtp.getKey());",
      "info" : "ExpressionStatement[108193-108231]:ExpressionStatement[107633-107671]"
    }, {
      "left" : "ColumnInfo oColInfo = new ColumnInfo(\n              SemanticAnalyzer.getColumnInternalName(projsForWindowSelOp.size()), wtp.getValue(),\n              null, false);",
      "right" : "ColumnInfo oColInfo = new ColumnInfo(\n              SemanticAnalyzer.getColumnInternalName(projsForWindowSelOp.size()), wtp.getValue(),\n              null, false);",
      "info" : "VariableDeclarationStatement[108287-108450]:VariableDeclarationStatement[107727-107890]"
    }, {
      "left" : "out_rwsch.putExpression(wExprSpec.getExpression(), oColInfo);",
      "right" : "out_rwsch.putExpression(wExprSpec.getExpression(), oColInfo);",
      "info" : "ExpressionStatement[108461-108522]:ExpressionStatement[107901-107962]"
    }, {
      "left" : "newColumns.add(oColInfo);",
      "right" : "newColumns.add(oColInfo);",
      "info" : "ExpressionStatement[108533-108558]:ExpressionStatement[107973-107998]"
    }, {
      "left" : "return genSelectRelNode(projsForWindowSelOp, out_rwsch, srcRel, windowExpressions);",
      "right" : "return genSelectRelNode(projsForWindowSelOp, out_rwsch, srcRel, windowExpressions);",
      "info" : "ReturnStatement[108584-108667]:ReturnStatement[108024-108107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108824-108902]:Block[108264-108342]"
    }, {
      "left" : "return genSelectRelNode(calciteColLst, out_rwsch, srcRel, null);",
      "right" : "return genSelectRelNode(calciteColLst, out_rwsch, srcRel, null);",
      "info" : "ReturnStatement[108832-108896]:ReturnStatement[108272-108336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109095-111415]:Block[108535-110855]"
    }, {
      "left" : "Set<String> colNamesSet = new HashSet<String>();",
      "right" : "Set<String> colNamesSet = new HashSet<String>();",
      "info" : "VariableDeclarationStatement[109134-109182]:VariableDeclarationStatement[108574-108622]"
    }, {
      "left" : "List<ColumnInfo> cInfoLst = out_rwsch.getRowSchema().getSignature();",
      "right" : "List<ColumnInfo> cInfoLst = out_rwsch.getRowSchema().getSignature();",
      "info" : "VariableDeclarationStatement[109189-109257]:VariableDeclarationStatement[108629-108697]"
    }, {
      "left" : "ArrayList<String> columnNames = new ArrayList<String>();",
      "right" : "ArrayList<String> columnNames = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[109264-109320]:VariableDeclarationStatement[108704-108760]"
    }, {
      "left" : "Map<String,String> windowToAlias = null;",
      "right" : "Map<String,String> windowToAlias = null;",
      "info" : "VariableDeclarationStatement[109327-109367]:VariableDeclarationStatement[108767-108807]"
    }, {
      "left" : "if (windowExpressions != null)",
      "right" : "if (windowExpressions != null)",
      "info" : "IfStatement[109374-109635]:IfStatement[108814-109075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109406-109635]:Block[108846-109075]"
    }, {
      "left" : "windowToAlias = new HashMap<String,String>();",
      "right" : "windowToAlias = new HashMap<String,String>();",
      "info" : "ExpressionStatement[109416-109461]:ExpressionStatement[108856-108901]"
    }, {
      "left" : "for (WindowExpressionSpec wes : windowExpressions)",
      "right" : "for (WindowExpressionSpec wes : windowExpressions)",
      "info" : "EnhancedForStatement[109470-109627]:EnhancedForStatement[108910-109067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109521-109627]:Block[108961-109067]"
    }, {
      "left" : "windowToAlias.put(wes.getExpression().toStringTree().toLowerCase(), wes.getAlias());",
      "right" : "windowToAlias.put(wes.getExpression().toStringTree().toLowerCase(), wes.getAlias());",
      "info" : "ExpressionStatement[109533-109617]:ExpressionStatement[108973-109057]"
    }, {
      "left" : "String[] qualifiedColNames;",
      "right" : "String[] qualifiedColNames;",
      "info" : "VariableDeclarationStatement[109642-109669]:VariableDeclarationStatement[109082-109109]"
    }, {
      "left" : "String tmpColAlias;",
      "right" : "String tmpColAlias;",
      "info" : "VariableDeclarationStatement[109676-109695]:VariableDeclarationStatement[109116-109135]"
    }, {
      "left" : "for (int i = 0; i < calciteColLst.size(); i++)",
      "right" : "for (int i = 0; i < calciteColLst.size(); i++)",
      "info" : "ForStatement[109702-110982]:ForStatement[109142-110422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109749-110982]:Block[109189-110422]"
    }, {
      "left" : "ColumnInfo cInfo = cInfoLst.get(i);",
      "right" : "ColumnInfo cInfo = cInfoLst.get(i);",
      "info" : "VariableDeclarationStatement[109759-109794]:VariableDeclarationStatement[109199-109234]"
    }, {
      "left" : "qualifiedColNames = out_rwsch.reverseLookup(cInfo.getInternalName());",
      "right" : "qualifiedColNames = out_rwsch.reverseLookup(cInfo.getInternalName());",
      "info" : "ExpressionStatement[109803-109872]:ExpressionStatement[109243-109312]"
    }, {
      "left" : "tmpColAlias = qualifiedColNames[1];",
      "right" : "tmpColAlias = qualifiedColNames[1];",
      "info" : "ExpressionStatement[110065-110100]:ExpressionStatement[109505-109540]"
    }, {
      "left" : "if (tmpColAlias.contains(\".\") || tmpColAlias.contains(\":\"))",
      "right" : "if (tmpColAlias.contains(\".\") || tmpColAlias.contains(\":\"))",
      "info" : "IfStatement[110110-110230]:IfStatement[109550-109670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110170-110230]:Block[109610-109670]"
    }, {
      "left" : "tmpColAlias = cInfo.getInternalName();",
      "right" : "tmpColAlias = cInfo.getInternalName();",
      "info" : "ExpressionStatement[110182-110220]:ExpressionStatement[109622-109660]"
    }, {
      "left" : "if (tmpColAlias.startsWith(\"_c\"))",
      "right" : "if (tmpColAlias.startsWith(\"_c\"))",
      "info" : "IfStatement[110504-110736]:IfStatement[109944-110176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110538-110594]:Block[109978-110034]"
    }, {
      "left" : "tmpColAlias = \"_o_\" + tmpColAlias;",
      "right" : "tmpColAlias = \"_o_\" + tmpColAlias;",
      "info" : "ExpressionStatement[110550-110584]:ExpressionStatement[109990-110024]"
    }, {
      "left" : "if (windowToAlias != null && windowToAlias.containsKey(tmpColAlias))",
      "right" : "if (windowToAlias != null && windowToAlias.containsKey(tmpColAlias))",
      "info" : "IfStatement[110600-110736]:IfStatement[110040-110176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110669-110736]:Block[110109-110176]"
    }, {
      "left" : "tmpColAlias = windowToAlias.get(tmpColAlias);",
      "right" : "tmpColAlias = windowToAlias.get(tmpColAlias);",
      "info" : "ExpressionStatement[110681-110726]:ExpressionStatement[110121-110166]"
    }, {
      "left" : "int suffix = 1;",
      "right" : "int suffix = 1;",
      "info" : "VariableDeclarationStatement[110745-110760]:VariableDeclarationStatement[110185-110200]"
    }, {
      "left" : "while (colNamesSet.contains(tmpColAlias))",
      "right" : "while (colNamesSet.contains(tmpColAlias))",
      "info" : "WhileStatement[110769-110897]:WhileStatement[110209-110337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110811-110897]:Block[110251-110337]"
    }, {
      "left" : "tmpColAlias = qualifiedColNames[1] + suffix;",
      "right" : "tmpColAlias = qualifiedColNames[1] + suffix;",
      "info" : "ExpressionStatement[110823-110867]:ExpressionStatement[110263-110307]"
    }, {
      "left" : "suffix++;",
      "right" : "suffix++;",
      "info" : "ExpressionStatement[110878-110887]:ExpressionStatement[110318-110327]"
    }, {
      "left" : "colNamesSet.add(tmpColAlias);",
      "right" : "colNamesSet.add(tmpColAlias);",
      "info" : "ExpressionStatement[110907-110936]:ExpressionStatement[110347-110376]"
    }, {
      "left" : "columnNames.add(tmpColAlias);",
      "right" : "columnNames.add(tmpColAlias);",
      "info" : "ExpressionStatement[110945-110974]:ExpressionStatement[110385-110414]"
    }, {
      "left" : "HiveRelNode selRel = HiveProject.create(srcRel, calciteColLst, columnNames);",
      "right" : "HiveRelNode selRel = HiveProject.create(srcRel, calciteColLst, columnNames);",
      "info" : "VariableDeclarationStatement[111085-111161]:VariableDeclarationStatement[110525-110601]"
    }, {
      "left" : "this.relToHiveColNameCalcitePosMap\n          .put(selRel, buildHiveToCalciteColumnMap(out_rwsch, selRel));",
      "right" : "this.relToHiveColNameCalcitePosMap\n          .put(selRel, buildHiveToCalciteColumnMap(out_rwsch, selRel));",
      "info" : "ExpressionStatement[111234-111340]:ExpressionStatement[110674-110780]"
    }, {
      "left" : "this.relToHiveRR.put(selRel, out_rwsch);",
      "right" : "this.relToHiveRR.put(selRel, out_rwsch);",
      "info" : "ExpressionStatement[111347-111387]:ExpressionStatement[110787-110827]"
    }, {
      "left" : "return selRel;",
      "right" : "return selRel;",
      "info" : "ReturnStatement[111395-111409]:ReturnStatement[110835-110849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111694-120345]:Block[111134-119785]"
    }, {
      "left" : "HashSet<ColumnInfo> excludedColumns = new HashSet<ColumnInfo>();",
      "right" : "HashSet<ColumnInfo> excludedColumns = new HashSet<ColumnInfo>();",
      "info" : "VariableDeclarationStatement[111827-111891]:VariableDeclarationStatement[111267-111331]"
    }, {
      "left" : "RelNode selForWindow = genSelectForWindowing(qb, srcRel, excludedColumns);",
      "right" : "RelNode selForWindow = genSelectForWindowing(qb, srcRel, excludedColumns);",
      "info" : "VariableDeclarationStatement[111898-111972]:VariableDeclarationStatement[111338-111412]"
    }, {
      "left" : "srcRel = (selForWindow == null) ? srcRel : selForWindow;",
      "right" : "srcRel = (selForWindow == null) ? srcRel : selForWindow;",
      "info" : "ExpressionStatement[111979-112035]:ExpressionStatement[111419-111475]"
    }, {
      "left" : "ArrayList<ExprNodeDesc> col_list = new ArrayList<ExprNodeDesc>();",
      "right" : "ArrayList<ExprNodeDesc> col_list = new ArrayList<ExprNodeDesc>();",
      "info" : "VariableDeclarationStatement[112043-112108]:VariableDeclarationStatement[111483-111548]"
    }, {
      "left" : "QBParseInfo qbp = getQBParseInfo(qb);",
      "right" : "QBParseInfo qbp = getQBParseInfo(qb);",
      "info" : "VariableDeclarationStatement[112155-112192]:VariableDeclarationStatement[111595-111632]"
    }, {
      "left" : "String selClauseName = qbp.getClauseNames().iterator().next();",
      "right" : "String selClauseName = qbp.getClauseNames().iterator().next();",
      "info" : "VariableDeclarationStatement[112199-112261]:VariableDeclarationStatement[111639-111701]"
    }, {
      "left" : "ASTNode selExprList = qbp.getSelForClause(selClauseName);",
      "right" : "ASTNode selExprList = qbp.getSelForClause(selClauseName);",
      "info" : "VariableDeclarationStatement[112268-112325]:VariableDeclarationStatement[111708-111765]"
    }, {
      "left" : "RowResolver out_rwsch = new RowResolver();",
      "right" : "RowResolver out_rwsch = new RowResolver();",
      "info" : "VariableDeclarationStatement[112376-112418]:VariableDeclarationStatement[111816-111858]"
    }, {
      "left" : "Integer pos = Integer.valueOf(0);",
      "right" : "Integer pos = Integer.valueOf(0);",
      "info" : "VariableDeclarationStatement[112425-112458]:VariableDeclarationStatement[111865-111898]"
    }, {
      "left" : "RowResolver inputRR = this.relToHiveRR.get(srcRel), starRR = inputRR;",
      "right" : "RowResolver inputRR = this.relToHiveRR.get(srcRel), starRR = inputRR;",
      "info" : "VariableDeclarationStatement[112514-112583]:VariableDeclarationStatement[111954-112023]"
    }, {
      "left" : "if (starSrcRel != null)",
      "right" : "if (starSrcRel != null)",
      "info" : "IfStatement[112590-112674]:IfStatement[112030-112114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112614-112674]:Block[112054-112114]"
    }, {
      "left" : "starRR = this.relToHiveRR.get(starSrcRel);",
      "right" : "starRR = this.relToHiveRR.get(starSrcRel);",
      "info" : "ExpressionStatement[112624-112666]:ExpressionStatement[112064-112106]"
    }, {
      "left" : "boolean selectStar = false;",
      "right" : "boolean selectStar = false;",
      "info" : "VariableDeclarationStatement[112766-112793]:VariableDeclarationStatement[112206-112233]"
    }, {
      "left" : "int posn = 0;",
      "right" : "int posn = 0;",
      "info" : "VariableDeclarationStatement[112800-112813]:VariableDeclarationStatement[112240-112253]"
    }, {
      "left" : "boolean hintPresent = (selExprList.getChild(0).getType() == HiveParser.TOK_HINTLIST);",
      "right" : "boolean hintPresent = (selExprList.getChild(0).getType() == HiveParser.TOK_HINTLIST);",
      "info" : "VariableDeclarationStatement[112820-112905]:VariableDeclarationStatement[112260-112345]"
    }, {
      "left" : "if (hintPresent)",
      "right" : "if (hintPresent)",
      "info" : "IfStatement[112912-113365]:IfStatement[112352-112805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112929-113365]:Block[112369-112805]"
    }, {
      "left" : "String hint = ctx.getTokenRewriteStream().toString(\n            selExprList.getChild(0).getTokenStartIndex(),\n            selExprList.getChild(0).getTokenStopIndex());",
      "right" : "String hint = ctx.getTokenRewriteStream().toString(\n            selExprList.getChild(0).getTokenStartIndex(),\n            selExprList.getChild(0).getTokenStopIndex());",
      "info" : "VariableDeclarationStatement[112939-113106]:VariableDeclarationStatement[112379-112546]"
    }, {
      "left" : "String msg = String.format(\"Hint specified for %s.\"\n            + \" Currently we don't support hints in CBO, turn off cbo to use hints.\", hint);",
      "right" : "String msg = String.format(\"Hint specified for %s.\"\n            + \" Currently we don't support hints in CBO, turn off cbo to use hints.\", hint);",
      "info" : "VariableDeclarationStatement[113115-113259]:VariableDeclarationStatement[112555-112699]"
    }, {
      "left" : "LOG.debug(msg);",
      "right" : "LOG.debug(msg);",
      "info" : "ExpressionStatement[113268-113283]:ExpressionStatement[112708-112723]"
    }, {
      "left" : "throw new CalciteSemanticException(msg, UnsupportedFeature.Hint);",
      "right" : "throw new CalciteSemanticException(msg, UnsupportedFeature.Hint);",
      "info" : "ThrowStatement[113292-113357]:ThrowStatement[112732-112797]"
    }, {
      "left" : "boolean isInTransform = (selExprList.getChild(posn).getChild(0).getType() == HiveParser.TOK_TRANSFORM);",
      "right" : "boolean isInTransform = (selExprList.getChild(posn).getChild(0).getType() == HiveParser.TOK_TRANSFORM);",
      "info" : "VariableDeclarationStatement[113422-113525]:VariableDeclarationStatement[112862-112965]"
    }, {
      "left" : "if (isInTransform)",
      "right" : "if (isInTransform)",
      "info" : "IfStatement[113532-113809]:IfStatement[112972-113249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[113551-113809]:Block[112991-113249]"
    }, {
      "left" : "String msg = String.format(\"SELECT TRANSFORM is currently not supported in CBO,\"\n            + \" turn off cbo to use TRANSFORM.\");",
      "right" : "String msg = String.format(\"SELECT TRANSFORM is currently not supported in CBO,\"\n            + \" turn off cbo to use TRANSFORM.\");",
      "info" : "VariableDeclarationStatement[113561-113691]:VariableDeclarationStatement[113001-113131]"
    }, {
      "left" : "LOG.debug(msg);",
      "right" : "LOG.debug(msg);",
      "info" : "ExpressionStatement[113700-113715]:ExpressionStatement[113140-113155]"
    }, {
      "left" : "throw new CalciteSemanticException(msg, UnsupportedFeature.Select_transform);",
      "right" : "throw new CalciteSemanticException(msg, UnsupportedFeature.Select_transform);",
      "info" : "ThrowStatement[113724-113801]:ThrowStatement[113164-113241]"
    }, {
      "left" : "ASTNode expr = (ASTNode) selExprList.getChild(posn).getChild(0);",
      "right" : "ASTNode expr = (ASTNode) selExprList.getChild(posn).getChild(0);",
      "info" : "VariableDeclarationStatement[113861-113925]:VariableDeclarationStatement[113301-113365]"
    }, {
      "left" : "int exprType = expr.getType();",
      "right" : "int exprType = expr.getType();",
      "info" : "VariableDeclarationStatement[113932-113962]:VariableDeclarationStatement[113372-113402]"
    }, {
      "left" : "if (exprType == HiveParser.TOK_FUNCTION || exprType == HiveParser.TOK_FUNCTIONSTAR)",
      "right" : "if (exprType == HiveParser.TOK_FUNCTION || exprType == HiveParser.TOK_FUNCTIONSTAR)",
      "info" : "IfStatement[113969-114552]:IfStatement[113409-113992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114053-114552]:Block[113493-113992]"
    }, {
      "left" : "String funcName = TypeCheckProcFactory.DefaultExprProcessor.getFunctionText(expr, true);",
      "right" : "String funcName = TypeCheckProcFactory.DefaultExprProcessor.getFunctionText(expr, true);",
      "info" : "VariableDeclarationStatement[114063-114151]:VariableDeclarationStatement[113503-113591]"
    }, {
      "left" : "FunctionInfo fi = FunctionRegistry.getFunctionInfo(funcName);",
      "right" : "FunctionInfo fi = FunctionRegistry.getFunctionInfo(funcName);",
      "info" : "VariableDeclarationStatement[114160-114221]:VariableDeclarationStatement[113600-113661]"
    }, {
      "left" : "if (fi != null && fi.getGenericUDTF() != null)",
      "right" : "if (fi != null && fi.getGenericUDTF() != null)",
      "info" : "IfStatement[114230-114544]:IfStatement[113670-113984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114277-114544]:Block[113717-113984]"
    }, {
      "left" : "String msg = String.format(\"UDTF \" + funcName + \" is currently not supported in CBO,\"\n              + \" turn off cbo to use UDTF \" + funcName);",
      "right" : "String msg = String.format(\"UDTF \" + funcName + \" is currently not supported in CBO,\"\n              + \" turn off cbo to use UDTF \" + funcName);",
      "info" : "VariableDeclarationStatement[114289-114432]:VariableDeclarationStatement[113729-113872]"
    }, {
      "left" : "LOG.debug(msg);",
      "right" : "LOG.debug(msg);",
      "info" : "ExpressionStatement[114443-114458]:ExpressionStatement[113883-113898]"
    }, {
      "left" : "throw new CalciteSemanticException(msg, UnsupportedFeature.UDTF);",
      "right" : "throw new CalciteSemanticException(msg, UnsupportedFeature.UDTF);",
      "info" : "ThrowStatement[114469-114534]:ThrowStatement[113909-113974]"
    }, {
      "left" : "ASTNode exprList = selExprList;",
      "right" : "ASTNode exprList = selExprList;",
      "info" : "VariableDeclarationStatement[114615-114646]:VariableDeclarationStatement[114055-114086]"
    }, {
      "left" : "int startPosn = posn;",
      "right" : "int startPosn = posn;",
      "info" : "VariableDeclarationStatement[114653-114674]:VariableDeclarationStatement[114093-114114]"
    }, {
      "left" : "List<String> tabAliasesForAllProjs = getTabAliases(starRR);",
      "right" : "List<String> tabAliasesForAllProjs = getTabAliases(starRR);",
      "info" : "VariableDeclarationStatement[114681-114740]:VariableDeclarationStatement[114121-114180]"
    }, {
      "left" : "for (int i = startPosn; i < exprList.getChildCount(); ++i)",
      "right" : "for (int i = startPosn; i < exprList.getChildCount(); ++i)",
      "info" : "ForStatement[114747-119759]:ForStatement[114187-119199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114806-119759]:Block[114246-119199]"
    }, {
      "left" : "ASTNode child = (ASTNode) exprList.getChild(i);",
      "right" : "ASTNode child = (ASTNode) exprList.getChild(i);",
      "info" : "VariableDeclarationStatement[114869-114916]:VariableDeclarationStatement[114309-114356]"
    }, {
      "left" : "boolean hasAsClause = (!isInTransform) && (child.getChildCount() == 2);",
      "right" : "boolean hasAsClause = (!isInTransform) && (child.getChildCount() == 2);",
      "info" : "VariableDeclarationStatement[114925-114996]:VariableDeclarationStatement[114365-114436]"
    }, {
      "left" : "if (child.getChildCount() > 2)",
      "right" : "if (child.getChildCount() > 2)",
      "info" : "IfStatement[115214-115408]:IfStatement[114654-114848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[115245-115408]:Block[114685-114848]"
    }, {
      "left" : "throw new SemanticException(SemanticAnalyzer.generateErrorMessage(\n              (ASTNode) child.getChild(2), ErrorMsg.INVALID_AS.getMsg()));",
      "right" : "throw new SemanticException(SemanticAnalyzer.generateErrorMessage(\n              (ASTNode) child.getChild(2), ErrorMsg.INVALID_AS.getMsg()));",
      "info" : "ThrowStatement[115257-115398]:ThrowStatement[114697-114838]"
    }, {
      "left" : "String tabAlias;",
      "right" : "String tabAlias;",
      "info" : "VariableDeclarationStatement[115418-115434]:VariableDeclarationStatement[114858-114874]"
    }, {
      "left" : "String colAlias;",
      "right" : "String colAlias;",
      "info" : "VariableDeclarationStatement[115443-115459]:VariableDeclarationStatement[114883-114899]"
    }, {
      "left" : "expr = (ASTNode) child.getChild(0);",
      "right" : "expr = (ASTNode) child.getChild(0);",
      "info" : "ExpressionStatement[115507-115542]:ExpressionStatement[114947-114982]"
    }, {
      "left" : "String[] colRef = SemanticAnalyzer.getColAlias(child, getAutogenColAliasPrfxLbl(), inputRR,\n            autogenColAliasPrfxIncludeFuncName(), i);",
      "right" : "String[] colRef = SemanticAnalyzer.getColAlias(child, getAutogenColAliasPrfxLbl(), inputRR,\n            autogenColAliasPrfxIncludeFuncName(), i);",
      "info" : "VariableDeclarationStatement[115551-115696]:VariableDeclarationStatement[114991-115136]"
    }, {
      "left" : "tabAlias = colRef[0];",
      "right" : "tabAlias = colRef[0];",
      "info" : "ExpressionStatement[115705-115726]:ExpressionStatement[115145-115166]"
    }, {
      "left" : "colAlias = colRef[1];",
      "right" : "colAlias = colRef[1];",
      "info" : "ExpressionStatement[115735-115756]:ExpressionStatement[115175-115196]"
    }, {
      "left" : "if (expr.getType() == HiveParser.TOK_ALLCOLREF)",
      "right" : "if (expr.getType() == HiveParser.TOK_ALLCOLREF)",
      "info" : "IfStatement[115820-119751]:IfStatement[115260-119191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[115868-116183]:Block[115308-115623]"
    }, {
      "left" : "pos = genColListRegex(\".*\", expr.getChildCount() == 0 ? null : SemanticAnalyzer\n              .getUnescapedName((ASTNode) expr.getChild(0)).toLowerCase(), expr, col_list,\n              excludedColumns, inputRR, starRR, pos, out_rwsch, tabAliasesForAllProjs, true);",
      "right" : "pos = genColListRegex(\".*\", expr.getChildCount() == 0 ? null : SemanticAnalyzer\n              .getUnescapedName((ASTNode) expr.getChild(0)).toLowerCase(), expr, col_list,\n              excludedColumns, inputRR, starRR, pos, out_rwsch, tabAliasesForAllProjs, true);",
      "info" : "ExpressionStatement[115880-116144]:ExpressionStatement[115320-115584]"
    }, {
      "left" : "selectStar = true;",
      "right" : "selectStar = true;",
      "info" : "ExpressionStatement[116155-116173]:ExpressionStatement[115595-115613]"
    }, {
      "left" : "if (expr.getType() == HiveParser.TOK_TABLE_OR_COL\n            && !hasAsClause\n            && !inputRR.getIsExprResolver()\n            && SemanticAnalyzer.isRegex(\n                SemanticAnalyzer.unescapeIdentifier(expr.getChild(0).getText()), conf))",
      "right" : "if (expr.getType() == HiveParser.TOK_TABLE_OR_COL\n            && !hasAsClause\n            && !inputRR.getIsExprResolver()\n            && SemanticAnalyzer.isRegex(\n                SemanticAnalyzer.unescapeIdentifier(expr.getChild(0).getText()), conf))",
      "info" : "IfStatement[116189-119751]:IfStatement[115629-119191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116440-116852]:Block[115880-116292]"
    }, {
      "left" : "pos = genColListRegex(SemanticAnalyzer.unescapeIdentifier(expr.getChild(0).getText()),\n              null, expr, col_list, excludedColumns, inputRR, starRR, pos, out_rwsch,\n              tabAliasesForAllProjs, true);",
      "right" : "pos = genColListRegex(SemanticAnalyzer.unescapeIdentifier(expr.getChild(0).getText()),\n              null, expr, col_list, excludedColumns, inputRR, starRR, pos, out_rwsch,\n              tabAliasesForAllProjs, true);",
      "info" : "ExpressionStatement[116626-116842]:ExpressionStatement[116066-116282]"
    }, {
      "left" : "if (expr.getType() == HiveParser.DOT\n            && expr.getChild(0).getType() == HiveParser.TOK_TABLE_OR_COL\n            && inputRR.hasTableAlias(SemanticAnalyzer.unescapeIdentifier(expr.getChild(0)\n                .getChild(0).getText().toLowerCase()))\n            && !hasAsClause\n            && !inputRR.getIsExprResolver()\n            && SemanticAnalyzer.isRegex(\n                SemanticAnalyzer.unescapeIdentifier(expr.getChild(1).getText()), conf))",
      "right" : "if (expr.getType() == HiveParser.DOT\n            && expr.getChild(0).getType() == HiveParser.TOK_TABLE_OR_COL\n            && inputRR.hasTableAlias(SemanticAnalyzer.unescapeIdentifier(expr.getChild(0)\n                .getChild(0).getText().toLowerCase()))\n            && !hasAsClause\n            && !inputRR.getIsExprResolver()\n            && SemanticAnalyzer.isRegex(\n                SemanticAnalyzer.unescapeIdentifier(expr.getChild(1).getText()), conf))",
      "info" : "IfStatement[116858-119751]:IfStatement[116298-119191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[117314-117862]:Block[116754-117302]"
    }, {
      "left" : "pos = genColListRegex(\n              SemanticAnalyzer.unescapeIdentifier(expr.getChild(1).getText()),\n              SemanticAnalyzer.unescapeIdentifier(expr.getChild(0).getChild(0).getText()\n                  .toLowerCase()), expr, col_list, excludedColumns, inputRR, starRR, pos,\n              out_rwsch, tabAliasesForAllProjs, true);",
      "right" : "pos = genColListRegex(\n              SemanticAnalyzer.unescapeIdentifier(expr.getChild(1).getText()),\n              SemanticAnalyzer.unescapeIdentifier(expr.getChild(0).getChild(0).getText()\n                  .toLowerCase()), expr, col_list, excludedColumns, inputRR, starRR, pos,\n              out_rwsch, tabAliasesForAllProjs, true);",
      "info" : "ExpressionStatement[117517-117852]:ExpressionStatement[116957-117292]"
    }, {
      "left" : "if (expr.toStringTree().contains(\"TOK_FUNCTIONDI\")\n            && !(srcRel instanceof HiveAggregate))",
      "right" : "if (expr.toStringTree().contains(\"TOK_FUNCTIONDI\")\n            && !(srcRel instanceof HiveAggregate))",
      "info" : "IfStatement[117868-119751]:IfStatement[117308-119191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[117970-118207]:Block[117410-117647]"
    }, {
      "left" : "throw new CalciteSemanticException(\"Distinct without an aggreggation.\",\n              UnsupportedFeature.Distinct_without_an_aggreggation);",
      "right" : "throw new CalciteSemanticException(\"Distinct without an aggreggation.\",\n              UnsupportedFeature.Distinct_without_an_aggreggation);",
      "info" : "ThrowStatement[118058-118197]:ThrowStatement[117498-117637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[118213-119751]:Block[117653-119191]"
    }, {
      "left" : "TypeCheckCtx tcCtx = new TypeCheckCtx(inputRR);",
      "right" : "TypeCheckCtx tcCtx = new TypeCheckCtx(inputRR);",
      "info" : "VariableDeclarationStatement[118270-118317]:VariableDeclarationStatement[117710-117757]"
    }, {
      "left" : "tcCtx.setAllowStatefulFunctions(true);",
      "right" : "tcCtx.setAllowStatefulFunctions(true);",
      "info" : "ExpressionStatement[118407-118445]:ExpressionStatement[117847-117885]"
    }, {
      "left" : "ExprNodeDesc exp = genExprNodeDesc(expr, inputRR, tcCtx);",
      "right" : "ExprNodeDesc exp = genExprNodeDesc(expr, inputRR, tcCtx);",
      "info" : "VariableDeclarationStatement[118456-118513]:VariableDeclarationStatement[117896-117953]"
    }, {
      "left" : "String recommended = recommendName(exp, colAlias);",
      "right" : "String recommended = recommendName(exp, colAlias);",
      "info" : "VariableDeclarationStatement[118524-118574]:VariableDeclarationStatement[117964-118014]"
    }, {
      "left" : "if (recommended != null && out_rwsch.get(null, recommended) == null)",
      "right" : "if (recommended != null && out_rwsch.get(null, recommended) == null)",
      "info" : "IfStatement[118585-118703]:IfStatement[118025-118143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[118654-118703]:Block[118094-118143]"
    }, {
      "left" : "colAlias = recommended;",
      "right" : "colAlias = recommended;",
      "info" : "ExpressionStatement[118668-118691]:ExpressionStatement[118108-118131]"
    }, {
      "left" : "col_list.add(exp);",
      "right" : "col_list.add(exp);",
      "info" : "ExpressionStatement[118714-118732]:ExpressionStatement[118154-118172]"
    }, {
      "left" : "ColumnInfo colInfo = new ColumnInfo(SemanticAnalyzer.getColumnInternalName(pos),\n              exp.getWritableObjectInspector(), tabAlias, false);",
      "right" : "ColumnInfo colInfo = new ColumnInfo(SemanticAnalyzer.getColumnInternalName(pos),\n              exp.getWritableObjectInspector(), tabAlias, false);",
      "info" : "VariableDeclarationStatement[118744-118890]:VariableDeclarationStatement[118184-118330]"
    }, {
      "left" : "colInfo.setSkewedCol((exp instanceof ExprNodeColumnDesc) ? ((ExprNodeColumnDesc) exp)\n              .isSkewedCol() : false);",
      "right" : "colInfo.setSkewedCol((exp instanceof ExprNodeColumnDesc) ? ((ExprNodeColumnDesc) exp)\n              .isSkewedCol() : false);",
      "info" : "ExpressionStatement[118901-119025]:ExpressionStatement[118341-118465]"
    }, {
      "left" : "if (!out_rwsch.putWithCheck(tabAlias, colAlias, null, colInfo))",
      "right" : "if (!out_rwsch.putWithCheck(tabAlias, colAlias, null, colInfo))",
      "info" : "IfStatement[119036-119353]:IfStatement[118476-118793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[119100-119353]:Block[118540-118793]"
    }, {
      "left" : "throw new CalciteSemanticException(\"Cannot add column to RR: \" + tabAlias + \".\"\n                + colAlias + \" => \" + colInfo + \" due to duplication, see previous warnings\",\n                UnsupportedFeature.Duplicates_in_RR);",
      "right" : "throw new CalciteSemanticException(\"Cannot add column to RR: \" + tabAlias + \".\"\n                + colAlias + \" => \" + colInfo + \" due to duplication, see previous warnings\",\n                UnsupportedFeature.Duplicates_in_RR);",
      "info" : "ThrowStatement[119114-119341]:ThrowStatement[118554-118781]"
    }, {
      "left" : "if (exp instanceof ExprNodeColumnDesc)",
      "right" : "if (exp instanceof ExprNodeColumnDesc)",
      "info" : "IfStatement[119365-119687]:IfStatement[118805-119127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[119404-119687]:Block[118844-119127]"
    }, {
      "left" : "ExprNodeColumnDesc colExp = (ExprNodeColumnDesc) exp;",
      "right" : "ExprNodeColumnDesc colExp = (ExprNodeColumnDesc) exp;",
      "info" : "VariableDeclarationStatement[119418-119471]:VariableDeclarationStatement[118858-118911]"
    }, {
      "left" : "String[] altMapping = inputRR.getAlternateMappings(colExp.getColumn());",
      "right" : "String[] altMapping = inputRR.getAlternateMappings(colExp.getColumn());",
      "info" : "VariableDeclarationStatement[119484-119555]:VariableDeclarationStatement[118924-118995]"
    }, {
      "left" : "if (altMapping != null)",
      "right" : "if (altMapping != null)",
      "info" : "IfStatement[119568-119675]:IfStatement[119008-119115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[119592-119675]:Block[119032-119115]"
    }, {
      "left" : "out_rwsch.put(altMapping[0], altMapping[1], colInfo);",
      "right" : "out_rwsch.put(altMapping[0], altMapping[1], colInfo);",
      "info" : "ExpressionStatement[119608-119661]:ExpressionStatement[119048-119101]"
    }, {
      "left" : "pos = Integer.valueOf(pos.intValue() + 1);",
      "right" : "pos = Integer.valueOf(pos.intValue() + 1);",
      "info" : "ExpressionStatement[119699-119741]:ExpressionStatement[119139-119181]"
    }, {
      "left" : "selectStar = selectStar && exprList.getChildCount() == posn + 1;",
      "right" : "selectStar = selectStar && exprList.getChildCount() == posn + 1;",
      "info" : "ExpressionStatement[119766-119830]:ExpressionStatement[119206-119270]"
    }, {
      "left" : "List<RexNode> calciteColLst = new ArrayList<RexNode>();",
      "right" : "List<RexNode> calciteColLst = new ArrayList<RexNode>();",
      "info" : "VariableDeclarationStatement[119886-119941]:VariableDeclarationStatement[119326-119381]"
    }, {
      "left" : "RexNodeConverter rexNodeConv = new RexNodeConverter(cluster, srcRel.getRowType(),\n          buildHiveColNameToInputPosMap(col_list, inputRR), 0, false);",
      "right" : "RexNodeConverter rexNodeConv = new RexNodeConverter(cluster, srcRel.getRowType(),\n          buildHiveColNameToInputPosMap(col_list, inputRR), 0, false);",
      "info" : "VariableDeclarationStatement[119948-120100]:VariableDeclarationStatement[119388-119540]"
    }, {
      "left" : "for (ExprNodeDesc colExpr : col_list)",
      "right" : "for (ExprNodeDesc colExpr : col_list)",
      "info" : "EnhancedForStatement[120107-120211]:EnhancedForStatement[119547-119651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120145-120211]:Block[119585-119651]"
    }, {
      "left" : "calciteColLst.add(rexNodeConv.convert(colExpr));",
      "right" : "calciteColLst.add(rexNodeConv.convert(colExpr));",
      "info" : "ExpressionStatement[120155-120203]:ExpressionStatement[119595-119643]"
    }, {
      "left" : "RelNode selRel = genSelectRelNode(calciteColLst, out_rwsch, srcRel);",
      "right" : "RelNode selRel = genSelectRelNode(calciteColLst, out_rwsch, srcRel);",
      "info" : "VariableDeclarationStatement[120249-120317]:VariableDeclarationStatement[119689-119757]"
    }, {
      "left" : "return selRel;",
      "right" : "return selRel;",
      "info" : "ReturnStatement[120325-120339]:ReturnStatement[119765-119779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120422-120917]:Block[119862-120357]"
    }, {
      "left" : "if (qbexpr.getOpcode() == QBExpr.Opcode.NULLOP)",
      "right" : "if (qbexpr.getOpcode() == QBExpr.Opcode.NULLOP)",
      "info" : "IfStatement[120430-120541]:IfStatement[119870-119981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120478-120541]:Block[119918-119981]"
    }, {
      "left" : "return genLogicalPlan(qbexpr.getQB(), false);",
      "right" : "return genLogicalPlan(qbexpr.getQB(), false);",
      "info" : "ReturnStatement[120488-120533]:ReturnStatement[119928-119973]"
    }, {
      "left" : "if (qbexpr.getOpcode() == QBExpr.Opcode.UNION)",
      "right" : "if (qbexpr.getOpcode() == QBExpr.Opcode.UNION)",
      "info" : "IfStatement[120548-120892]:IfStatement[119988-120332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120595-120892]:Block[120035-120332]"
    }, {
      "left" : "RelNode qbexpr1Ops = genLogicalPlan(qbexpr.getQBExpr1());",
      "right" : "RelNode qbexpr1Ops = genLogicalPlan(qbexpr.getQBExpr1());",
      "info" : "VariableDeclarationStatement[120605-120662]:VariableDeclarationStatement[120045-120102]"
    }, {
      "left" : "RelNode qbexpr2Ops = genLogicalPlan(qbexpr.getQBExpr2());",
      "right" : "RelNode qbexpr2Ops = genLogicalPlan(qbexpr.getQBExpr2());",
      "info" : "VariableDeclarationStatement[120671-120728]:VariableDeclarationStatement[120111-120168]"
    }, {
      "left" : "return genUnionLogicalPlan(qbexpr.getAlias(), qbexpr.getQBExpr1().getAlias(), qbexpr1Ops,\n            qbexpr.getQBExpr2().getAlias(), qbexpr2Ops);",
      "right" : "return genUnionLogicalPlan(qbexpr.getAlias(), qbexpr.getQBExpr1().getAlias(), qbexpr1Ops,\n            qbexpr.getQBExpr2().getAlias(), qbexpr2Ops);",
      "info" : "ReturnStatement[120738-120884]:ReturnStatement[120178-120324]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[120899-120911]:ReturnStatement[120339-120351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121007-127482]:Block[120447-126922]"
    }, {
      "left" : "RelNode srcRel = null;",
      "right" : "RelNode srcRel = null;",
      "info" : "VariableDeclarationStatement[121015-121037]:VariableDeclarationStatement[120455-120477]"
    }, {
      "left" : "RelNode filterRel = null;",
      "right" : "RelNode filterRel = null;",
      "info" : "VariableDeclarationStatement[121044-121069]:VariableDeclarationStatement[120484-120509]"
    }, {
      "left" : "RelNode gbRel = null;",
      "right" : "RelNode gbRel = null;",
      "info" : "VariableDeclarationStatement[121076-121097]:VariableDeclarationStatement[120516-120537]"
    }, {
      "left" : "RelNode gbHavingRel = null;",
      "right" : "RelNode gbHavingRel = null;",
      "info" : "VariableDeclarationStatement[121104-121131]:VariableDeclarationStatement[120544-120571]"
    }, {
      "left" : "RelNode selectRel = null;",
      "right" : "RelNode selectRel = null;",
      "info" : "VariableDeclarationStatement[121138-121163]:VariableDeclarationStatement[120578-120603]"
    }, {
      "left" : "RelNode obRel = null;",
      "right" : "RelNode obRel = null;",
      "info" : "VariableDeclarationStatement[121170-121191]:VariableDeclarationStatement[120610-120631]"
    }, {
      "left" : "RelNode limitRel = null;",
      "right" : "RelNode limitRel = null;",
      "info" : "VariableDeclarationStatement[121198-121222]:VariableDeclarationStatement[120638-120662]"
    }, {
      "left" : "Map<String, RelNode> aliasToRel = new HashMap<String, RelNode>();",
      "right" : "Map<String, RelNode> aliasToRel = new HashMap<String, RelNode>();",
      "info" : "VariableDeclarationStatement[121306-121371]:VariableDeclarationStatement[120746-120811]"
    }, {
      "left" : "String reason = canHandleQbForCbo(queryProperties, conf, false, LOG.isDebugEnabled(), qb);",
      "right" : "String reason = canHandleQbForCbo(queryProperties, conf, false, LOG.isDebugEnabled(), qb);",
      "info" : "VariableDeclarationStatement[121497-121587]:VariableDeclarationStatement[120937-121027]"
    }, {
      "left" : "if (reason != null)",
      "right" : "if (reason != null)",
      "info" : "IfStatement[121594-121853]:IfStatement[121034-121293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121614-121853]:Block[121054-121293]"
    }, {
      "left" : "String msg = \"CBO can not handle Sub Query\";",
      "right" : "String msg = \"CBO can not handle Sub Query\";",
      "info" : "VariableDeclarationStatement[121624-121668]:VariableDeclarationStatement[121064-121108]"
    }, {
      "left" : "if (LOG.isDebugEnabled())",
      "right" : "if (LOG.isDebugEnabled())",
      "info" : "IfStatement[121677-121767]:IfStatement[121117-121207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121703-121767]:Block[121143-121207]"
    }, {
      "left" : "LOG.debug(msg + \" because it: \" + reason);",
      "right" : "LOG.debug(msg + \" because it: \" + reason);",
      "info" : "ExpressionStatement[121715-121757]:ExpressionStatement[121155-121197]"
    }, {
      "left" : "throw new CalciteSemanticException(msg, UnsupportedFeature.Subquery);",
      "right" : "throw new CalciteSemanticException(msg, UnsupportedFeature.Subquery);",
      "info" : "ThrowStatement[121776-121845]:ThrowStatement[121216-121285]"
    }, {
      "left" : "for (String subqAlias : qb.getSubqAliases())",
      "right" : "for (String subqAlias : qb.getSubqAliases())",
      "info" : "EnhancedForStatement[121992-122160]:EnhancedForStatement[121432-121600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[122037-122160]:Block[121477-121600]"
    }, {
      "left" : "QBExpr qbexpr = qb.getSubqForAlias(subqAlias);",
      "right" : "QBExpr qbexpr = qb.getSubqForAlias(subqAlias);",
      "info" : "VariableDeclarationStatement[122047-122093]:VariableDeclarationStatement[121487-121533]"
    }, {
      "left" : "aliasToRel.put(subqAlias, genLogicalPlan(qbexpr));",
      "right" : "aliasToRel.put(subqAlias, genLogicalPlan(qbexpr));",
      "info" : "ExpressionStatement[122102-122152]:ExpressionStatement[121542-121592]"
    }, {
      "left" : "for (String tableAlias : qb.getTabAliases())",
      "right" : "for (String tableAlias : qb.getTabAliases())",
      "info" : "EnhancedForStatement[122216-122368]:EnhancedForStatement[121656-121808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[122261-122368]:Block[121701-121808]"
    }, {
      "left" : "RelNode op = genTableLogicalPlan(tableAlias, qb);",
      "right" : "RelNode op = genTableLogicalPlan(tableAlias, qb);",
      "info" : "VariableDeclarationStatement[122271-122320]:VariableDeclarationStatement[121711-121760]"
    }, {
      "left" : "aliasToRel.put(tableAlias, op);",
      "right" : "aliasToRel.put(tableAlias, op);",
      "info" : "ExpressionStatement[122329-122360]:ExpressionStatement[121769-121800]"
    }, {
      "left" : "if (aliasToRel.isEmpty())",
      "right" : "if (aliasToRel.isEmpty())",
      "info" : "IfStatement[122376-123184]:IfStatement[121816-122624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[122402-123184]:Block[121842-122624]"
    }, {
      "left" : "throw new CalciteSemanticException(\"Unsupported\", UnsupportedFeature.Others);",
      "right" : "throw new CalciteSemanticException(\"Unsupported\", UnsupportedFeature.Others);",
      "info" : "ThrowStatement[123098-123175]:ThrowStatement[122538-122615]"
    }, {
      "left" : "if (qb.getParseInfo().getJoinExpr() != null)",
      "right" : "if (qb.getParseInfo().getJoinExpr() != null)",
      "info" : "IfStatement[123217-123498]:IfStatement[122657-122938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[123262-123353]:Block[122702-122793]"
    }, {
      "left" : "srcRel = genJoinLogicalPlan(qb.getParseInfo().getJoinExpr(), aliasToRel);",
      "right" : "srcRel = genJoinLogicalPlan(qb.getParseInfo().getJoinExpr(), aliasToRel);",
      "info" : "ExpressionStatement[123272-123345]:ExpressionStatement[122712-122785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[123359-123498]:Block[122799-122938]"
    }, {
      "left" : "srcRel = aliasToRel.values().iterator().next();",
      "right" : "srcRel = aliasToRel.values().iterator().next();",
      "info" : "ExpressionStatement[123443-123490]:ExpressionStatement[122883-122930]"
    }, {
      "left" : "filterRel = genFilterLogicalPlan(qb, srcRel, aliasToRel, false);",
      "right" : "filterRel = genFilterLogicalPlan(qb, srcRel, aliasToRel, false);",
      "info" : "ExpressionStatement[123545-123609]:ExpressionStatement[122985-123049]"
    }, {
      "left" : "srcRel = (filterRel == null) ? srcRel : filterRel;",
      "right" : "srcRel = (filterRel == null) ? srcRel : filterRel;",
      "info" : "ExpressionStatement[123616-123666]:ExpressionStatement[123056-123106]"
    }, {
      "left" : "RelNode starSrcRel = srcRel;",
      "right" : "RelNode starSrcRel = srcRel;",
      "info" : "VariableDeclarationStatement[123673-123701]:VariableDeclarationStatement[123113-123141]"
    }, {
      "left" : "gbRel = genGBLogicalPlan(qb, srcRel);",
      "right" : "gbRel = genGBLogicalPlan(qb, srcRel);",
      "info" : "ExpressionStatement[123745-123782]:ExpressionStatement[123185-123222]"
    }, {
      "left" : "srcRel = (gbRel == null) ? srcRel : gbRel;",
      "right" : "srcRel = (gbRel == null) ? srcRel : gbRel;",
      "info" : "ExpressionStatement[123789-123831]:ExpressionStatement[123229-123271]"
    }, {
      "left" : "gbHavingRel = genGBHavingLogicalPlan(qb, srcRel, aliasToRel);",
      "right" : "gbHavingRel = genGBHavingLogicalPlan(qb, srcRel, aliasToRel);",
      "info" : "ExpressionStatement[123882-123943]:ExpressionStatement[123322-123383]"
    }, {
      "left" : "srcRel = (gbHavingRel == null) ? srcRel : gbHavingRel;",
      "right" : "srcRel = (gbHavingRel == null) ? srcRel : gbHavingRel;",
      "info" : "ExpressionStatement[123950-124004]:ExpressionStatement[123390-123444]"
    }, {
      "left" : "selectRel = genSelectLogicalPlan(qb, srcRel, starSrcRel);",
      "right" : "selectRel = genSelectLogicalPlan(qb, srcRel, starSrcRel);",
      "info" : "ExpressionStatement[124052-124109]:ExpressionStatement[123492-123549]"
    }, {
      "left" : "srcRel = (selectRel == null) ? srcRel : selectRel;",
      "right" : "srcRel = (selectRel == null) ? srcRel : selectRel;",
      "info" : "ExpressionStatement[124116-124166]:ExpressionStatement[123556-123606]"
    }, {
      "left" : "Pair<RelNode, RelNode> obTopProjPair = genOBLogicalPlan(qb, srcRel, outerMostQB);",
      "right" : "Pair<RelNode, RelNode> obTopProjPair = genOBLogicalPlan(qb, srcRel, outerMostQB);",
      "info" : "VariableDeclarationStatement[124210-124291]:VariableDeclarationStatement[123650-123731]"
    }, {
      "left" : "obRel = obTopProjPair.getKey();",
      "right" : "obRel = obTopProjPair.getKey();",
      "info" : "ExpressionStatement[124298-124329]:ExpressionStatement[123738-123769]"
    }, {
      "left" : "RelNode topConstrainingProjArgsRel = obTopProjPair.getValue();",
      "right" : "RelNode topConstrainingProjArgsRel = obTopProjPair.getValue();",
      "info" : "VariableDeclarationStatement[124336-124398]:VariableDeclarationStatement[123776-123838]"
    }, {
      "left" : "srcRel = (obRel == null) ? srcRel : obRel;",
      "right" : "srcRel = (obRel == null) ? srcRel : obRel;",
      "info" : "ExpressionStatement[124405-124447]:ExpressionStatement[123845-123887]"
    }, {
      "left" : "limitRel = genLimitLogicalPlan(qb, srcRel);",
      "right" : "limitRel = genLimitLogicalPlan(qb, srcRel);",
      "info" : "ExpressionStatement[124494-124537]:ExpressionStatement[123934-123977]"
    }, {
      "left" : "srcRel = (limitRel == null) ? srcRel : limitRel;",
      "right" : "srcRel = (limitRel == null) ? srcRel : limitRel;",
      "info" : "ExpressionStatement[124544-124592]:ExpressionStatement[123984-124032]"
    }, {
      "left" : "if (topConstrainingProjArgsRel != null)",
      "right" : "if (topConstrainingProjArgsRel != null)",
      "info" : "IfStatement[125608-126366]:IfStatement[125048-125806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[125648-126366]:Block[125088-125806]"
    }, {
      "left" : "List<RexNode> originalInputRefs = Lists.transform(topConstrainingProjArgsRel.getRowType()\n            .getFieldList(), new Function<RelDataTypeField, RexNode>() {\n          @Override\n          public RexNode apply(RelDataTypeField input) {\n            return new RexInputRef(input.getIndex(), input.getType());\n          }\n        });",
      "right" : "List<RexNode> originalInputRefs = Lists.transform(topConstrainingProjArgsRel.getRowType()\n            .getFieldList(), new Function<RelDataTypeField, RexNode>() {\n          @Override\n          public RexNode apply(RelDataTypeField input) {\n            return new RexInputRef(input.getIndex(), input.getType());\n          }\n        });",
      "info" : "VariableDeclarationStatement[125658-125992]:VariableDeclarationStatement[125098-125432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[125896-125980]:Block[125336-125420]"
    }, {
      "left" : "return new RexInputRef(input.getIndex(), input.getType());",
      "right" : "return new RexInputRef(input.getIndex(), input.getType());",
      "info" : "ReturnStatement[125910-125968]:ReturnStatement[125350-125408]"
    }, {
      "left" : "RowResolver topConstrainingProjRR = new RowResolver();",
      "right" : "RowResolver topConstrainingProjRR = new RowResolver();",
      "info" : "VariableDeclarationStatement[126001-126055]:VariableDeclarationStatement[125441-125495]"
    }, {
      "left" : "if (!RowResolver.add(topConstrainingProjRR,\n            this.relToHiveRR.get(topConstrainingProjArgsRel)))",
      "right" : "if (!RowResolver.add(topConstrainingProjRR,\n            this.relToHiveRR.get(topConstrainingProjArgsRel)))",
      "info" : "IfStatement[126064-126273]:IfStatement[125504-125713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[126171-126273]:Block[125611-125713]"
    }, {
      "left" : "LOG.warn(\"Duplicates detected when adding columns to RR: see previous message\");",
      "right" : "LOG.warn(\"Duplicates detected when adding columns to RR: see previous message\");",
      "info" : "ExpressionStatement[126183-126263]:ExpressionStatement[125623-125703]"
    }, {
      "left" : "srcRel = genSelectRelNode(originalInputRefs, topConstrainingProjRR, srcRel);",
      "right" : "srcRel = genSelectRelNode(originalInputRefs, topConstrainingProjRR, srcRel);",
      "info" : "ExpressionStatement[126282-126358]:ExpressionStatement[125722-125798]"
    }, {
      "left" : "if (qb.getParseInfo().getAlias() != null)",
      "right" : "if (qb.getParseInfo().getAlias() != null)",
      "info" : "IfStatement[126508-127329]:IfStatement[125948-126769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[126550-127329]:Block[125990-126769]"
    }, {
      "left" : "RowResolver rr = this.relToHiveRR.get(srcRel);",
      "right" : "RowResolver rr = this.relToHiveRR.get(srcRel);",
      "info" : "VariableDeclarationStatement[126560-126606]:VariableDeclarationStatement[126000-126046]"
    }, {
      "left" : "RowResolver newRR = new RowResolver();",
      "right" : "RowResolver newRR = new RowResolver();",
      "info" : "VariableDeclarationStatement[126615-126653]:VariableDeclarationStatement[126055-126093]"
    }, {
      "left" : "String alias = qb.getParseInfo().getAlias();",
      "right" : "String alias = qb.getParseInfo().getAlias();",
      "info" : "VariableDeclarationStatement[126662-126706]:VariableDeclarationStatement[126102-126146]"
    }, {
      "left" : "for (ColumnInfo colInfo : rr.getColumnInfos())",
      "right" : "for (ColumnInfo colInfo : rr.getColumnInfos())",
      "info" : "EnhancedForStatement[126715-127186]:EnhancedForStatement[126155-126626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[126762-127186]:Block[126202-126626]"
    }, {
      "left" : "String name = colInfo.getInternalName();",
      "right" : "String name = colInfo.getInternalName();",
      "info" : "VariableDeclarationStatement[126774-126814]:VariableDeclarationStatement[126214-126254]"
    }, {
      "left" : "String[] tmp = rr.reverseLookup(name);",
      "right" : "String[] tmp = rr.reverseLookup(name);",
      "info" : "VariableDeclarationStatement[126825-126863]:VariableDeclarationStatement[126265-126303]"
    }, {
      "left" : "if (\"\".equals(tmp[0]) || tmp[1] == null)",
      "right" : "if (\"\".equals(tmp[0]) || tmp[1] == null)",
      "info" : "IfStatement[126874-127043]:IfStatement[126314-126483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[126915-127043]:Block[126355-126483]"
    }, {
      "left" : "tmp[1] = colInfo.getInternalName();",
      "right" : "tmp[1] = colInfo.getInternalName();",
      "info" : "ExpressionStatement[126996-127031]:ExpressionStatement[126436-126471]"
    }, {
      "left" : "ColumnInfo newCi = new ColumnInfo(colInfo);",
      "right" : "ColumnInfo newCi = new ColumnInfo(colInfo);",
      "info" : "VariableDeclarationStatement[127054-127097]:VariableDeclarationStatement[126494-126537]"
    }, {
      "left" : "newCi.setTabAlias(alias);",
      "right" : "newCi.setTabAlias(alias);",
      "info" : "ExpressionStatement[127108-127133]:ExpressionStatement[126548-126573]"
    }, {
      "left" : "newRR.put(alias, tmp[1], newCi);",
      "right" : "newRR.put(alias, tmp[1], newCi);",
      "info" : "ExpressionStatement[127144-127176]:ExpressionStatement[126584-126616]"
    }, {
      "left" : "relToHiveRR.put(srcRel, newRR);",
      "right" : "relToHiveRR.put(srcRel, newRR);",
      "info" : "ExpressionStatement[127195-127226]:ExpressionStatement[126635-126666]"
    }, {
      "left" : "relToHiveColNameCalcitePosMap.put(srcRel, buildHiveToCalciteColumnMap(newRR, srcRel));",
      "right" : "relToHiveColNameCalcitePosMap.put(srcRel, buildHiveToCalciteColumnMap(newRR, srcRel));",
      "info" : "ExpressionStatement[127235-127321]:ExpressionStatement[126675-126761]"
    }, {
      "left" : "if (LOG.isDebugEnabled())",
      "right" : "if (LOG.isDebugEnabled())",
      "info" : "IfStatement[127337-127437]:IfStatement[126777-126877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[127363-127437]:Block[126803-126877]"
    }, {
      "left" : "LOG.debug(\"Created Plan for Query Block \" + qb.getId());",
      "right" : "LOG.debug(\"Created Plan for Query Block \" + qb.getId());",
      "info" : "ExpressionStatement[127373-127429]:ExpressionStatement[126813-126869]"
    }, {
      "left" : "setQB(qb);",
      "right" : "setQB(qb);",
      "info" : "ExpressionStatement[127445-127455]:ExpressionStatement[126885-126895]"
    }, {
      "left" : "return srcRel;",
      "right" : "return srcRel;",
      "info" : "ReturnStatement[127462-127476]:ReturnStatement[126902-126916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[127616-128335]:Block[127056-127775]"
    }, {
      "left" : "RelNode gbFilter = null;",
      "right" : "RelNode gbFilter = null;",
      "info" : "VariableDeclarationStatement[127624-127648]:VariableDeclarationStatement[127064-127088]"
    }, {
      "left" : "QBParseInfo qbp = getQBParseInfo(qb);",
      "right" : "QBParseInfo qbp = getQBParseInfo(qb);",
      "info" : "VariableDeclarationStatement[127655-127692]:VariableDeclarationStatement[127095-127132]"
    }, {
      "left" : "ASTNode havingClause = qbp.getHavingForClause(qbp.getClauseNames().iterator().next());",
      "right" : "ASTNode havingClause = qbp.getHavingForClause(qbp.getClauseNames().iterator().next());",
      "info" : "VariableDeclarationStatement[127699-127785]:VariableDeclarationStatement[127139-127225]"
    }, {
      "left" : "if (havingClause != null)",
      "right" : "if (havingClause != null)",
      "info" : "IfStatement[127793-128305]:IfStatement[127233-127745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[127819-128305]:Block[127259-127745]"
    }, {
      "left" : "if (!(srcRel instanceof HiveAggregate))",
      "right" : "if (!(srcRel instanceof HiveAggregate))",
      "info" : "IfStatement[127829-128100]:IfStatement[127269-127540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[127869-128100]:Block[127309-127540]"
    }, {
      "left" : "throw new CalciteSemanticException(\"Having clause without any group-by.\",\n              UnsupportedFeature.Having_clause_without_any_groupby);",
      "right" : "throw new CalciteSemanticException(\"Having clause without any group-by.\",\n              UnsupportedFeature.Having_clause_without_any_groupby);",
      "info" : "ThrowStatement[127948-128090]:ThrowStatement[127388-127530]"
    }, {
      "left" : "validateNoHavingReferenceToAlias(qb, (ASTNode) havingClause.getChild(0));",
      "right" : "validateNoHavingReferenceToAlias(qb, (ASTNode) havingClause.getChild(0));",
      "info" : "ExpressionStatement[128109-128182]:ExpressionStatement[127549-127622]"
    }, {
      "left" : "gbFilter = genFilterRelNode(qb, (ASTNode) havingClause.getChild(0), srcRel, aliasToRel,\n            true);",
      "right" : "gbFilter = genFilterRelNode(qb, (ASTNode) havingClause.getChild(0), srcRel, aliasToRel,\n            true);",
      "info" : "ExpressionStatement[128191-128297]:ExpressionStatement[127631-127737]"
    }, {
      "left" : "return gbFilter;",
      "right" : "return gbFilter;",
      "info" : "ReturnStatement[128313-128329]:ReturnStatement[127753-127769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[128730-130763]:Block[128170-130203]"
    }, {
      "left" : "QBParseInfo qbPI = qb.getParseInfo();",
      "right" : "QBParseInfo qbPI = qb.getParseInfo();",
      "info" : "VariableDeclarationStatement[128739-128776]:VariableDeclarationStatement[128179-128216]"
    }, {
      "left" : "Map<ASTNode, String> exprToAlias = qbPI.getAllExprToColumnAlias();",
      "right" : "Map<ASTNode, String> exprToAlias = qbPI.getAllExprToColumnAlias();",
      "info" : "VariableDeclarationStatement[128783-128849]:VariableDeclarationStatement[128223-128289]"
    }, {
      "left" : "Set<String> aggExprs = qbPI.getDestToAggregationExprs().values().iterator().next().keySet();",
      "right" : "Set<String> aggExprs = qbPI.getDestToAggregationExprs().values().iterator().next().keySet();",
      "info" : "VariableDeclarationStatement[129026-129118]:VariableDeclarationStatement[128466-128558]"
    }, {
      "left" : "for (Map.Entry<ASTNode, String> selExpr : exprToAlias.entrySet())",
      "right" : "for (Map.Entry<ASTNode, String> selExpr : exprToAlias.entrySet())",
      "info" : "EnhancedForStatement[129126-130756]:EnhancedForStatement[128566-130196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[129192-130756]:Block[128632-130196]"
    }, {
      "left" : "ASTNode selAST = selExpr.getKey();",
      "right" : "ASTNode selAST = selExpr.getKey();",
      "info" : "VariableDeclarationStatement[129202-129236]:VariableDeclarationStatement[128642-128676]"
    }, {
      "left" : "if (!aggExprs.contains(selAST.toStringTree().toLowerCase()))",
      "right" : "if (!aggExprs.contains(selAST.toStringTree().toLowerCase()))",
      "info" : "IfStatement[129245-129337]:IfStatement[128685-128777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[129306-129337]:Block[128746-128777]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[129318-129327]:ContinueStatement[128758-128767]"
    }, {
      "left" : "final String aliasToCheck = selExpr.getValue();",
      "right" : "final String aliasToCheck = selExpr.getValue();",
      "info" : "VariableDeclarationStatement[129346-129393]:VariableDeclarationStatement[128786-128833]"
    }, {
      "left" : "final Set<Object> aliasReferences = new HashSet<Object>();",
      "right" : "final Set<Object> aliasReferences = new HashSet<Object>();",
      "info" : "VariableDeclarationStatement[129402-129460]:VariableDeclarationStatement[128842-128900]"
    }, {
      "left" : "TreeVisitorAction action = new TreeVisitorAction() {\n\n          @Override\n          public Object pre(Object t) {\n            if (ParseDriver.adaptor.getType(t) == HiveParser.TOK_TABLE_OR_COL) {\n              Object c = ParseDriver.adaptor.getChild(t, 0);\n              if (c != null && ParseDriver.adaptor.getType(c) == HiveParser.Identifier\n                  && ParseDriver.adaptor.getText(c).equals(aliasToCheck)) {\n                aliasReferences.add(t);\n              }\n            }\n            return t;\n          }\n\n          @Override\n          public Object post(Object t) {\n            return t;\n          }\n        };",
      "right" : "TreeVisitorAction action = new TreeVisitorAction() {\n\n          @Override\n          public Object pre(Object t) {\n            if (ParseDriver.adaptor.getType(t) == HiveParser.TOK_TABLE_OR_COL) {\n              Object c = ParseDriver.adaptor.getChild(t, 0);\n              if (c != null && ParseDriver.adaptor.getType(c) == HiveParser.Identifier\n                  && ParseDriver.adaptor.getText(c).equals(aliasToCheck)) {\n                aliasReferences.add(t);\n              }\n            }\n            return t;\n          }\n\n          @Override\n          public Object post(Object t) {\n            return t;\n          }\n        };",
      "info" : "VariableDeclarationStatement[129469-130098]:VariableDeclarationStatement[128909-129538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[129581-129991]:Block[129021-129431]"
    }, {
      "left" : "if (ParseDriver.adaptor.getType(t) == HiveParser.TOK_TABLE_OR_COL)",
      "right" : "if (ParseDriver.adaptor.getType(t) == HiveParser.TOK_TABLE_OR_COL)",
      "info" : "IfStatement[129595-129957]:IfStatement[129035-129397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[129662-129957]:Block[129102-129397]"
    }, {
      "left" : "Object c = ParseDriver.adaptor.getChild(t, 0);",
      "right" : "Object c = ParseDriver.adaptor.getChild(t, 0);",
      "info" : "VariableDeclarationStatement[129678-129724]:VariableDeclarationStatement[129118-129164]"
    }, {
      "left" : "if (c != null && ParseDriver.adaptor.getType(c) == HiveParser.Identifier\n                  && ParseDriver.adaptor.getText(c).equals(aliasToCheck))",
      "right" : "if (c != null && ParseDriver.adaptor.getType(c) == HiveParser.Identifier\n                  && ParseDriver.adaptor.getText(c).equals(aliasToCheck))",
      "info" : "IfStatement[129739-129943]:IfStatement[129179-129383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[129886-129943]:Block[129326-129383]"
    }, {
      "left" : "aliasReferences.add(t);",
      "right" : "aliasReferences.add(t);",
      "info" : "ExpressionStatement[129904-129927]:ExpressionStatement[129344-129367]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[129970-129979]:ReturnStatement[129410-129419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[130052-130087]:Block[129492-129527]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[130066-130075]:ReturnStatement[129506-129515]"
    }, {
      "left" : "new TreeVisitor(ParseDriver.adaptor).visit(havingExpr, action);",
      "right" : "new TreeVisitor(ParseDriver.adaptor).visit(havingExpr, action);",
      "info" : "ExpressionStatement[130107-130170]:ExpressionStatement[129547-129610]"
    }, {
      "left" : "if (aliasReferences.size() > 0)",
      "right" : "if (aliasReferences.size() > 0)",
      "info" : "IfStatement[130180-130748]:IfStatement[129620-130188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[130212-130748]:Block[129652-130188]"
    }, {
      "left" : "String havingClause = ctx.getTokenRewriteStream().toString(\n              havingExpr.getTokenStartIndex(), havingExpr.getTokenStopIndex());",
      "right" : "String havingClause = ctx.getTokenRewriteStream().toString(\n              havingExpr.getTokenStartIndex(), havingExpr.getTokenStopIndex());",
      "info" : "VariableDeclarationStatement[130224-130363]:VariableDeclarationStatement[129664-129803]"
    }, {
      "left" : "String msg = String.format(\"Encountered Select alias '%s' in having clause '%s'\"\n              + \" This non standard behavior is not supported with cbo on.\"\n              + \" Turn off cbo for these queries.\", aliasToCheck, havingClause);",
      "right" : "String msg = String.format(\"Encountered Select alias '%s' in having clause '%s'\"\n              + \" This non standard behavior is not supported with cbo on.\"\n              + \" Turn off cbo for these queries.\", aliasToCheck, havingClause);",
      "info" : "VariableDeclarationStatement[130374-130611]:VariableDeclarationStatement[129814-130051]"
    }, {
      "left" : "LOG.debug(msg);",
      "right" : "LOG.debug(msg);",
      "info" : "ExpressionStatement[130622-130637]:ExpressionStatement[130062-130077]"
    }, {
      "left" : "throw new CalciteSemanticException(msg, UnsupportedFeature.Select_alias_in_having_clause);",
      "right" : "throw new CalciteSemanticException(msg, UnsupportedFeature.Select_alias_in_having_clause);",
      "info" : "ThrowStatement[130648-130738]:ThrowStatement[130088-130178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[130866-131136]:Block[130306-130576]"
    }, {
      "left" : "ImmutableMap.Builder<String, Integer> b = new ImmutableMap.Builder<String, Integer>();",
      "right" : "ImmutableMap.Builder<String, Integer> b = new ImmutableMap.Builder<String, Integer>();",
      "info" : "VariableDeclarationStatement[130874-130960]:VariableDeclarationStatement[130314-130400]"
    }, {
      "left" : "for (ColumnInfo ci : rr.getRowSchema().getSignature())",
      "right" : "for (ColumnInfo ci : rr.getRowSchema().getSignature())",
      "info" : "EnhancedForStatement[130967-131106]:EnhancedForStatement[130407-130546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[131022-131106]:Block[130462-130546]"
    }, {
      "left" : "b.put(ci.getInternalName(), rr.getPosition(ci.getInternalName()));",
      "right" : "b.put(ci.getInternalName(), rr.getPosition(ci.getInternalName()));",
      "info" : "ExpressionStatement[131032-131098]:ExpressionStatement[130472-130538]"
    }, {
      "left" : "return b.build();",
      "right" : "return b.build();",
      "info" : "ReturnStatement[131113-131130]:ReturnStatement[130553-130570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[131269-132041]:Block[130709-131481]"
    }, {
      "left" : "Map<Integer, ExprNodeDesc> hashCodeTocolumnDescMap = new HashMap<Integer, ExprNodeDesc>();",
      "right" : "Map<Integer, ExprNodeDesc> hashCodeTocolumnDescMap = new HashMap<Integer, ExprNodeDesc>();",
      "info" : "VariableDeclarationStatement[131405-131495]:VariableDeclarationStatement[130845-130935]"
    }, {
      "left" : "ExprNodeDescUtils.getExprNodeColumnDesc(col_list, hashCodeTocolumnDescMap);",
      "right" : "ExprNodeDescUtils.getExprNodeColumnDesc(col_list, hashCodeTocolumnDescMap);",
      "info" : "ExpressionStatement[131502-131577]:ExpressionStatement[130942-131017]"
    }, {
      "left" : "ImmutableMap.Builder<String, Integer> hiveColNameToInputPosMapBuilder = new ImmutableMap.Builder<String, Integer>();",
      "right" : "ImmutableMap.Builder<String, Integer> hiveColNameToInputPosMapBuilder = new ImmutableMap.Builder<String, Integer>();",
      "info" : "VariableDeclarationStatement[131584-131700]:VariableDeclarationStatement[131024-131140]"
    }, {
      "left" : "String exprNodecolName;",
      "right" : "String exprNodecolName;",
      "info" : "VariableDeclarationStatement[131707-131730]:VariableDeclarationStatement[131147-131170]"
    }, {
      "left" : "for (ExprNodeDesc exprDesc : hashCodeTocolumnDescMap.values())",
      "right" : "for (ExprNodeDesc exprDesc : hashCodeTocolumnDescMap.values())",
      "info" : "EnhancedForStatement[131737-131980]:EnhancedForStatement[131177-131420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[131800-131980]:Block[131240-131420]"
    }, {
      "left" : "exprNodecolName = ((ExprNodeColumnDesc) exprDesc).getColumn();",
      "right" : "exprNodecolName = ((ExprNodeColumnDesc) exprDesc).getColumn();",
      "info" : "ExpressionStatement[131810-131872]:ExpressionStatement[131250-131312]"
    }, {
      "left" : "hiveColNameToInputPosMapBuilder.put(exprNodecolName, inputRR.getPosition(exprNodecolName));",
      "right" : "hiveColNameToInputPosMapBuilder.put(exprNodecolName, inputRR.getPosition(exprNodecolName));",
      "info" : "ExpressionStatement[131881-131972]:ExpressionStatement[131321-131412]"
    }, {
      "left" : "return hiveColNameToInputPosMapBuilder.build();",
      "right" : "return hiveColNameToInputPosMapBuilder.build();",
      "info" : "ReturnStatement[131988-132035]:ReturnStatement[131428-131475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[132121-132486]:Block[131561-131926]"
    }, {
      "left" : "QBParseInfo qbp = qb.getParseInfo();",
      "right" : "QBParseInfo qbp = qb.getParseInfo();",
      "info" : "VariableDeclarationStatement[132129-132165]:VariableDeclarationStatement[131569-131605]"
    }, {
      "left" : "if (qbp.getClauseNames().size() > 1)",
      "right" : "if (qbp.getClauseNames().size() > 1)",
      "info" : "IfStatement[132172-132462]:IfStatement[131612-131902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[132209-132462]:Block[131649-131902]"
    }, {
      "left" : "String msg = String.format(\"Multi Insert is currently not supported in CBO,\"\n            + \" turn off cbo to use Multi Insert.\");",
      "right" : "String msg = String.format(\"Multi Insert is currently not supported in CBO,\"\n            + \" turn off cbo to use Multi Insert.\");",
      "info" : "VariableDeclarationStatement[132219-132348]:VariableDeclarationStatement[131659-131788]"
    }, {
      "left" : "LOG.debug(msg);",
      "right" : "LOG.debug(msg);",
      "info" : "ExpressionStatement[132357-132372]:ExpressionStatement[131797-131812]"
    }, {
      "left" : "throw new CalciteSemanticException(msg, UnsupportedFeature.Multi_insert);",
      "right" : "throw new CalciteSemanticException(msg, UnsupportedFeature.Multi_insert);",
      "info" : "ThrowStatement[132381-132454]:ThrowStatement[131821-131894]"
    }, {
      "left" : "return qbp;",
      "right" : "return qbp;",
      "info" : "ReturnStatement[132469-132480]:ReturnStatement[131909-131920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[132548-132834]:Block[131988-132274]"
    }, {
      "left" : "List<String> tabAliases = new ArrayList<String>();",
      "right" : "List<String> tabAliases = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[132556-132606]:VariableDeclarationStatement[131996-132046]"
    }, {
      "left" : "for (ColumnInfo ci : inputRR.getColumnInfos())",
      "right" : "for (ColumnInfo ci : inputRR.getColumnInfos())",
      "info" : "EnhancedForStatement[132704-132802]:EnhancedForStatement[132144-132242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[132751-132802]:Block[132191-132242]"
    }, {
      "left" : "tabAliases.add(ci.getTabAlias());",
      "right" : "tabAliases.add(ci.getTabAlias());",
      "info" : "ExpressionStatement[132761-132794]:ExpressionStatement[132201-132234]"
    }, {
      "left" : "return tabAliases;",
      "right" : "return tabAliases;",
      "info" : "ReturnStatement[132810-132828]:ReturnStatement[132250-132268]"
    } ]
  },
  "interFileMappings" : { }
}