{
  "matchedElements" : [
 {
    "left" : "class : RecordType",
    "right" : "class : RecordType",
    "info" : "TypeDeclaration[1908-10589]:TypeDeclaration[1908-10427]"
  }, {
    "left" : "serialVersionUID",
    "right" : "serialVersionUID",
    "info" : "FieldDeclaration[2552-2600]:FieldDeclaration[2552-2600]"
  }, {
    "left" : "properties",
    "right" : "properties",
    "info" : "FieldDeclaration[2604-2675]:FieldDeclaration[2604-2675]"
  }, {
    "left" : "declared",
    "right" : "declared",
    "info" : "FieldDeclaration[2678-2709]:FieldDeclaration[2678-2709]"
  }, {
    "left" : "isFrozen",
    "right" : "isFrozen",
    "info" : "FieldDeclaration[2712-2745]:FieldDeclaration[2712-2745]"
  }, {
    "left" : "package RecordType(registry , properties ...)",
    "right" : "package RecordType(registry , properties ...)",
    "info" : "MethodDeclaration[2749-2868]:MethodDeclaration[2749-2868]"
  }, {
    "left" : "package RecordType(registry , properties , declared boolean)",
    "right" : "package RecordType(registry , properties , declared boolean)",
    "info" : "MethodDeclaration[2872-4155]:MethodDeclaration[2872-4155]"
  }, {
    "left" : "package isSynthetic() : boolean",
    "right" : "package isSynthetic() : boolean",
    "info" : "MethodDeclaration[4159-4271]:MethodDeclaration[4159-4271]"
  }, {
    "left" : "package checkRecordEquivalenceHelper(otherRecord , tolerateUnknowns boolean) : boolean",
    "right" : "package checkRecordEquivalenceHelper(otherRecord , eqMethod ) : boolean",
    "info" : "MethodDeclaration[4275-4750]:MethodDeclaration[4275-4744]"
  }, {
    "left" : "public getImplicitPrototype() : ",
    "right" : "public getImplicitPrototype() : ",
    "info" : "MethodDeclaration[4754-4879]:MethodDeclaration[4748-4873]"
  }, {
    "left" : "package defineProperty(propertyName , type , inferred boolean, propertyNode ) : boolean",
    "right" : "package defineProperty(propertyName , type , inferred boolean, propertyNode ) : boolean",
    "info" : "MethodDeclaration[4883-5202]:MethodDeclaration[4877-5196]"
  }, {
    "left" : "package getGreatestSubtypeHelper(that ) : ",
    "right" : "package getGreatestSubtypeHelper(that ) : ",
    "info" : "MethodDeclaration[5206-7764]:MethodDeclaration[5200-7676]"
  }, {
    "left" : "package toMaybeRecordType() : ",
    "right" : "package toMaybeRecordType() : ",
    "info" : "MethodDeclaration[7768-7833]:MethodDeclaration[7680-7745]"
  }, {
    "left" : "public isSubtype(that ) : boolean",
    "right" : "public isSubtype(that ) : boolean",
    "info" : "MethodDeclaration[7837-8449]:MethodDeclaration[7749-8361]"
  }, {
    "left" : "package isSubtype(typeA , typeB ) : boolean",
    "right" : "package isSubtype(typeA , typeB ) : boolean",
    "info" : "MethodDeclaration[8453-10195]:MethodDeclaration[8365-10033]"
  }, {
    "left" : "package resolveInternal(t , scope ) : ",
    "right" : "package resolveInternal(t , scope ) : ",
    "info" : "MethodDeclaration[10199-10587]:MethodDeclaration[10037-10425]"
  } ],
  "mappings" : [
 {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[2503-2508]:TYPE_DECLARATION_KIND[2503-2508]"
  }, {
    "left" : "RecordType",
    "right" : "RecordType",
    "info" : "SimpleName[2749-2759]:SimpleName[2749-2759]"
  }, {
    "left" : "JSTypeRegistry registry",
    "right" : "JSTypeRegistry registry",
    "info" : "SingleVariableDeclaration[2760-2783]:SingleVariableDeclaration[2760-2783]"
  }, {
    "left" : "Map<String, RecordProperty> properties",
    "right" : "Map<String, RecordProperty> properties",
    "info" : "SingleVariableDeclaration[2785-2823]:SingleVariableDeclaration[2785-2823]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2825-2868]:Block[2825-2868]"
  }, {
    "left" : "this(registry, properties, true);",
    "right" : "this(registry, properties, true);",
    "info" : "ConstructorInvocation[2831-2864]:ConstructorInvocation[2831-2864]"
  }, {
    "left" : "RecordType",
    "right" : "RecordType",
    "info" : "SimpleName[3406-3416]:SimpleName[3406-3416]"
  }, {
    "left" : "JSTypeRegistry registry",
    "right" : "JSTypeRegistry registry",
    "info" : "SingleVariableDeclaration[3417-3440]:SingleVariableDeclaration[3417-3440]"
  }, {
    "left" : "Map<String, RecordProperty> properties",
    "right" : "Map<String, RecordProperty> properties",
    "info" : "SingleVariableDeclaration[3442-3480]:SingleVariableDeclaration[3442-3480]"
  }, {
    "left" : "boolean declared",
    "right" : "boolean declared",
    "info" : "SingleVariableDeclaration[3488-3504]:SingleVariableDeclaration[3488-3504]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3506-4155]:Block[3506-4155]"
  }, {
    "left" : "super(registry, null, null);",
    "right" : "super(registry, null, null);",
    "info" : "SuperConstructorInvocation[3512-3540]:SuperConstructorInvocation[3512-3540]"
  }, {
    "left" : "setPrettyPrint(true);",
    "right" : "setPrettyPrint(true);",
    "info" : "ExpressionStatement[3545-3566]:ExpressionStatement[3545-3566]"
  }, {
    "left" : "this.declared = declared;",
    "right" : "this.declared = declared;",
    "info" : "ExpressionStatement[3571-3596]:ExpressionStatement[3571-3596]"
  }, {
    "left" : "for (String property : properties.keySet())",
    "right" : "for (String property : properties.keySet())",
    "info" : "EnhancedForStatement[3602-4098]:EnhancedForStatement[3602-4098]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3646-4098]:Block[3646-4098]"
  }, {
    "left" : "RecordProperty prop = properties.get(property);",
    "right" : "RecordProperty prop = properties.get(property);",
    "info" : "VariableDeclarationStatement[3654-3701]:VariableDeclarationStatement[3654-3701]"
  }, {
    "left" : "if (prop == null)",
    "right" : "if (prop == null)",
    "info" : "IfStatement[3708-3854]:IfStatement[3708-3854]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3726-3854]:Block[3726-3854]"
  }, {
    "left" : "throw new IllegalStateException(\n            \"RecordProperty associated with a property should not be null!\");",
    "right" : "throw new IllegalStateException(\n            \"RecordProperty associated with a property should not be null!\");",
    "info" : "ThrowStatement[3736-3846]:ThrowStatement[3736-3846]"
  }, {
    "left" : "if (declared)",
    "right" : "if (declared)",
    "info" : "IfStatement[3861-4092]:IfStatement[3861-4092]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3875-3979]:Block[3875-3979]"
  }, {
    "left" : "defineDeclaredProperty(\n            property, prop.getType(), prop.getPropertyNode());",
    "right" : "defineDeclaredProperty(\n            property, prop.getType(), prop.getPropertyNode());",
    "info" : "ExpressionStatement[3885-3971]:ExpressionStatement[3885-3971]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3985-4092]:Block[3985-4092]"
  }, {
    "left" : "defineSynthesizedProperty(\n            property, prop.getType(), prop.getPropertyNode());",
    "right" : "defineSynthesizedProperty(\n            property, prop.getType(), prop.getPropertyNode());",
    "info" : "ExpressionStatement[3995-4084]:ExpressionStatement[3995-4084]"
  }, {
    "left" : "isFrozen = true;",
    "right" : "isFrozen = true;",
    "info" : "ExpressionStatement[4135-4151]:ExpressionStatement[4135-4151]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[4222-4229]:PrimitiveType[4222-4229]"
  }, {
    "left" : "isSynthetic",
    "right" : "isSynthetic",
    "info" : "SimpleName[4230-4241]:SimpleName[4230-4241]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4244-4271]:Block[4244-4271]"
  }, {
    "left" : "return !declared;",
    "right" : "return !declared;",
    "info" : "ReturnStatement[4250-4267]:ReturnStatement[4250-4267]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[4275-4282]:PrimitiveType[4275-4282]"
  }, {
    "left" : "checkRecordEquivalenceHelper",
    "right" : "checkRecordEquivalenceHelper",
    "info" : "SimpleName[4283-4311]:SimpleName[4283-4311]"
  }, {
    "left" : "RecordType otherRecord",
    "right" : "RecordType otherRecord",
    "info" : "SingleVariableDeclaration[4319-4341]:SingleVariableDeclaration[4319-4341]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4369-4750]:Block[4371-4744]"
  }, {
    "left" : "Set<String> keySet = properties.keySet();",
    "right" : "Set<String> keySet = properties.keySet();",
    "info" : "VariableDeclarationStatement[4375-4416]:VariableDeclarationStatement[4377-4418]"
  }, {
    "left" : "Map<String, JSType> otherProps = otherRecord.properties;",
    "right" : "Map<String, JSType> otherProps = otherRecord.properties;",
    "info" : "VariableDeclarationStatement[4421-4477]:VariableDeclarationStatement[4423-4479]"
  }, {
    "left" : "if (!otherProps.keySet().equals(keySet))",
    "right" : "if (!otherProps.keySet().equals(keySet))",
    "info" : "IfStatement[4482-4550]:IfStatement[4484-4552]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4523-4550]:Block[4525-4552]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[4531-4544]:ReturnStatement[4533-4546]"
  }, {
    "left" : "for (String key : keySet)",
    "right" : "for (String key : keySet)",
    "info" : "EnhancedForStatement[4555-4729]:EnhancedForStatement[4557-4723]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4581-4729]:Block[4583-4723]"
  }, {
    "left" : "if (!otherProps.get(key).checkEquivalenceHelper(\n              properties.get(key), tolerateUnknowns))",
    "right" : "if (!otherProps.get(key).checkEquivalenceHelper(\n              properties.get(key), eqMethod))",
    "info" : "IfStatement[4589-4723]:IfStatement[4591-4717]"
  }, {
    "left" : "tolerateUnknowns",
    "right" : "eqMethod",
    "info" : "SimpleName[4673-4689]:SimpleName[4675-4683]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4692-4723]:Block[4686-4717]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[4702-4715]:ReturnStatement[4696-4709]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[4734-4746]:ReturnStatement[4728-4740]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4754-4763]:MarkerAnnotation[4748-4757]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4766-4772]:Modifier[4760-4766]"
  }, {
    "left" : "ObjectType",
    "right" : "ObjectType",
    "info" : "SimpleType[4773-4783]:SimpleType[4767-4777]"
  }, {
    "left" : "getImplicitPrototype",
    "right" : "getImplicitPrototype",
    "info" : "SimpleName[4784-4804]:SimpleName[4778-4798]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4807-4879]:Block[4801-4873]"
  }, {
    "left" : "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);",
    "right" : "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);",
    "info" : "ReturnStatement[4813-4875]:ReturnStatement[4807-4869]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4883-4892]:MarkerAnnotation[4877-4886]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[4895-4902]:PrimitiveType[4889-4896]"
  }, {
    "left" : "defineProperty",
    "right" : "defineProperty",
    "info" : "SimpleName[4903-4917]:SimpleName[4897-4911]"
  }, {
    "left" : "String propertyName",
    "right" : "String propertyName",
    "info" : "SingleVariableDeclaration[4918-4937]:SingleVariableDeclaration[4912-4931]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[4939-4950]:SingleVariableDeclaration[4933-4944]"
  }, {
    "left" : "boolean inferred",
    "right" : "boolean inferred",
    "info" : "SingleVariableDeclaration[4958-4974]:SingleVariableDeclaration[4952-4968]"
  }, {
    "left" : "Node propertyNode",
    "right" : "Node propertyNode",
    "info" : "SingleVariableDeclaration[4976-4993]:SingleVariableDeclaration[4970-4987]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4995-5202]:Block[4989-5196]"
  }, {
    "left" : "if (isFrozen)",
    "right" : "if (isFrozen)",
    "info" : "IfStatement[5001-5042]:IfStatement[4995-5036]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5015-5042]:Block[5009-5036]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[5023-5036]:ReturnStatement[5017-5030]"
  }, {
    "left" : "if (!inferred)",
    "right" : "if (!inferred)",
    "info" : "IfStatement[5048-5112]:IfStatement[5042-5106]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5063-5112]:Block[5057-5106]"
  }, {
    "left" : "properties.put(propertyName, type);",
    "right" : "properties.put(propertyName, type);",
    "info" : "ExpressionStatement[5071-5106]:ExpressionStatement[5065-5100]"
  }, {
    "left" : "return super.defineProperty(propertyName, type, inferred,\n        propertyNode);",
    "right" : "return super.defineProperty(propertyName, type, inferred,\n        propertyNode);",
    "info" : "ReturnStatement[5118-5198]:ReturnStatement[5112-5192]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[5206-5212]:SimpleType[5200-5206]"
  }, {
    "left" : "getGreatestSubtypeHelper",
    "right" : "getGreatestSubtypeHelper",
    "info" : "SimpleName[5213-5237]:SimpleName[5207-5231]"
  }, {
    "left" : "JSType that",
    "right" : "JSType that",
    "info" : "SingleVariableDeclaration[5238-5249]:SingleVariableDeclaration[5232-5243]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5251-7764]:Block[5245-7676]"
  }, {
    "left" : "if (that.isRecordType())",
    "right" : "if (that.isRecordType())",
    "info" : "IfStatement[5257-6303]:IfStatement[5251-6297]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5282-6303]:Block[5276-6297]"
  }, {
    "left" : "RecordType thatRecord = that.toMaybeRecordType();",
    "right" : "RecordType thatRecord = that.toMaybeRecordType();",
    "info" : "VariableDeclarationStatement[5290-5339]:VariableDeclarationStatement[5284-5333]"
  }, {
    "left" : "RecordTypeBuilder builder = new RecordTypeBuilder(registry);",
    "right" : "RecordTypeBuilder builder = new RecordTypeBuilder(registry);",
    "info" : "VariableDeclarationStatement[5346-5406]:VariableDeclarationStatement[5340-5400]"
  }, {
    "left" : "builder.setSynthesized(true);",
    "right" : "builder.setSynthesized(true);",
    "info" : "ExpressionStatement[5413-5442]:ExpressionStatement[5407-5436]"
  }, {
    "left" : "for (String property : properties.keySet())",
    "right" : "for (String property : properties.keySet())",
    "info" : "EnhancedForStatement[5620-6015]:EnhancedForStatement[5614-6009]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5664-6015]:Block[5658-6009]"
  }, {
    "left" : "if (thatRecord.hasProperty(property) &&\n            !thatRecord.getPropertyType(property).isInvariant(\n                getPropertyType(property)))",
    "right" : "if (thatRecord.hasProperty(property) &&\n            !thatRecord.getPropertyType(property).isInvariant(\n                getPropertyType(property)))",
    "info" : "IfStatement[5674-5901]:IfStatement[5668-5895]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5821-5901]:Block[5815-5895]"
  }, {
    "left" : "return registry.getNativeObjectType(JSTypeNative.NO_TYPE);",
    "right" : "return registry.getNativeObjectType(JSTypeNative.NO_TYPE);",
    "info" : "ReturnStatement[5833-5891]:ReturnStatement[5827-5885]"
  }, {
    "left" : "builder.addProperty(property, getPropertyType(property),\n            getPropertyNode(property));",
    "right" : "builder.addProperty(property, getPropertyType(property),\n            getPropertyNode(property));",
    "info" : "ExpressionStatement[5911-6007]:ExpressionStatement[5905-6001]"
  }, {
    "left" : "for (String property : thatRecord.properties.keySet())",
    "right" : "for (String property : thatRecord.properties.keySet())",
    "info" : "EnhancedForStatement[6023-6266]:EnhancedForStatement[6017-6260]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6078-6266]:Block[6072-6260]"
  }, {
    "left" : "if (!hasProperty(property))",
    "right" : "if (!hasProperty(property))",
    "info" : "IfStatement[6088-6258]:IfStatement[6082-6252]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6116-6258]:Block[6110-6252]"
  }, {
    "left" : "builder.addProperty(property, thatRecord.getPropertyType(property),\n              thatRecord.getPropertyNode(property));",
    "right" : "builder.addProperty(property, thatRecord.getPropertyType(property),\n              thatRecord.getPropertyNode(property));",
    "info" : "ExpressionStatement[6128-6248]:ExpressionStatement[6122-6242]"
  }, {
    "left" : "return builder.build();",
    "right" : "return builder.build();",
    "info" : "ReturnStatement[6274-6297]:ReturnStatement[6268-6291]"
  }, {
    "left" : "JSType greatestSubtype = registry.getNativeType(\n        JSTypeNative.NO_OBJECT_TYPE);",
    "right" : "JSType greatestSubtype = registry.getNativeType(\n        JSTypeNative.NO_OBJECT_TYPE);",
    "info" : "VariableDeclarationStatement[6309-6395]:VariableDeclarationStatement[6303-6389]"
  }, {
    "left" : "JSType thatRestrictedToObj =\n        registry.getNativeType(JSTypeNative.OBJECT_TYPE)\n        .getGreatestSubtype(that);",
    "right" : "JSType thatRestrictedToObj =\n        registry.getNativeType(JSTypeNative.OBJECT_TYPE)\n        .getGreatestSubtype(that);",
    "info" : "VariableDeclarationStatement[6400-6520]:VariableDeclarationStatement[6394-6514]"
  }, {
    "left" : "if (!thatRestrictedToObj.isEmptyType())",
    "right" : "if (!thatRestrictedToObj.isEmptyType())",
    "info" : "IfStatement[6525-7732]:IfStatement[6519-7644]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6565-7732]:Block[6559-7644]"
  }, {
    "left" : "for (Map.Entry<String, JSType> entry : properties.entrySet())",
    "right" : "for (Map.Entry<String, JSType> entry : properties.entrySet())",
    "info" : "EnhancedForStatement[6963-7726]:EnhancedForStatement[6957-7638]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7025-7726]:Block[7019-7638]"
  }, {
    "left" : "String propName = entry.getKey();",
    "right" : "String propName = entry.getKey();",
    "info" : "VariableDeclarationStatement[7035-7068]:VariableDeclarationStatement[7029-7062]"
  }, {
    "left" : "JSType propType = entry.getValue();",
    "right" : "JSType propType = entry.getValue();",
    "info" : "VariableDeclarationStatement[7077-7112]:VariableDeclarationStatement[7071-7106]"
  }, {
    "left" : "UnionTypeBuilder builder = new UnionTypeBuilder(registry);",
    "right" : "UnionTypeBuilder builder = new UnionTypeBuilder(registry);",
    "info" : "VariableDeclarationStatement[7121-7179]:VariableDeclarationStatement[7115-7173]"
  }, {
    "left" : "for (ObjectType alt :\n                 registry.getEachReferenceTypeWithProperty(propName))",
    "right" : "for (ObjectType alt :\n                 registry.getEachReferenceTypeWithProperty(propName))",
    "info" : "EnhancedForStatement[7188-7640]:EnhancedForStatement[7182-7552]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7280-7640]:Block[7274-7552]"
  }, {
    "left" : "JSType altPropType = alt.getPropertyType(propName);",
    "right" : "JSType altPropType = alt.getPropertyType(propName);",
    "info" : "VariableDeclarationStatement[7292-7343]:VariableDeclarationStatement[7286-7337]"
  }, {
    "left" : "if (altPropType != null && !alt.isEquivalentTo(this) &&\n              alt.isSubtype(that) &&\n              (propType.isUnknownType() || altPropType.isUnknownType() ||\n                  altPropType.isEquivalentTo(propType)))",
    "right" : "if (altPropType != null && !alt.isEquivalentTo(this) &&\n              alt.isSubtype(that) &&\n              propType.isInvariant(altPropType))",
    "info" : "IfStatement[7354-7630]:IfStatement[7348-7542]"
  }, {
    "left" : "propType.isUnknownType()",
    "right" : "propType.isInvariant(altPropType)",
    "info" : "MethodInvocation[7462-7486]:MethodInvocation[7455-7488]"
  }, {
    "left" : "isUnknownType",
    "right" : "isInvariant",
    "info" : "SimpleName[7471-7484]:SimpleName[7464-7475]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7578-7630]:Block[7490-7542]"
  }, {
    "left" : "builder.addAlternate(alt);",
    "right" : "builder.addAlternate(alt);",
    "info" : "ExpressionStatement[7592-7618]:ExpressionStatement[7504-7530]"
  }, {
    "left" : "greatestSubtype = greatestSubtype.getLeastSupertype(builder.build());",
    "right" : "greatestSubtype = greatestSubtype.getLeastSupertype(builder.build());",
    "info" : "ExpressionStatement[7649-7718]:ExpressionStatement[7561-7630]"
  }, {
    "left" : "return greatestSubtype;",
    "right" : "return greatestSubtype;",
    "info" : "ReturnStatement[7737-7760]:ReturnStatement[7649-7672]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[7768-7777]:MarkerAnnotation[7680-7689]"
  }, {
    "left" : "RecordType",
    "right" : "RecordType",
    "info" : "SimpleType[7780-7790]:SimpleType[7692-7702]"
  }, {
    "left" : "toMaybeRecordType",
    "right" : "toMaybeRecordType",
    "info" : "SimpleName[7791-7808]:SimpleName[7703-7720]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7811-7833]:Block[7723-7745]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[7817-7829]:ReturnStatement[7729-7741]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[7837-7846]:MarkerAnnotation[7749-7758]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7849-7855]:Modifier[7761-7767]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[7856-7863]:PrimitiveType[7768-7775]"
  }, {
    "left" : "isSubtype",
    "right" : "isSubtype",
    "info" : "SimpleName[7864-7873]:SimpleName[7776-7785]"
  }, {
    "left" : "JSType that",
    "right" : "JSType that",
    "info" : "SingleVariableDeclaration[7874-7885]:SingleVariableDeclaration[7786-7797]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7887-8449]:Block[7799-8361]"
  }, {
    "left" : "if (JSType.isSubtypeHelper(this, that))",
    "right" : "if (JSType.isSubtypeHelper(this, that))",
    "info" : "IfStatement[7893-7959]:IfStatement[7805-7871]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7933-7959]:Block[7845-7871]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[7941-7953]:ReturnStatement[7853-7865]"
  }, {
    "left" : "if (registry.getNativeObjectType(\n            JSTypeNative.OBJECT_TYPE).isSubtype(that))",
    "right" : "if (registry.getNativeObjectType(\n            JSTypeNative.OBJECT_TYPE).isSubtype(that))",
    "info" : "IfStatement[8033-8148]:IfStatement[7945-8060]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8122-8148]:Block[8034-8060]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[8130-8142]:ReturnStatement[8042-8054]"
  }, {
    "left" : "if (!that.isRecordType())",
    "right" : "if (!that.isRecordType())",
    "info" : "IfStatement[8326-8379]:IfStatement[8238-8291]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8352-8379]:Block[8264-8291]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[8360-8373]:ReturnStatement[8272-8285]"
  }, {
    "left" : "return RecordType.isSubtype(this, that.toMaybeRecordType());",
    "right" : "return RecordType.isSubtype(this, that.toMaybeRecordType());",
    "info" : "ReturnStatement[8385-8445]:ReturnStatement[8297-8357]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[8504-8510]:Modifier[8416-8422]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[8511-8518]:PrimitiveType[8423-8430]"
  }, {
    "left" : "isSubtype",
    "right" : "isSubtype",
    "info" : "SimpleName[8519-8528]:SimpleName[8431-8440]"
  }, {
    "left" : "ObjectType typeA",
    "right" : "ObjectType typeA",
    "info" : "SingleVariableDeclaration[8529-8545]:SingleVariableDeclaration[8441-8457]"
  }, {
    "left" : "RecordType typeB",
    "right" : "RecordType typeB",
    "info" : "SingleVariableDeclaration[8547-8563]:SingleVariableDeclaration[8459-8475]"
  }, {
    "left" : "for (String property : typeB.properties.keySet())",
    "right" : "for (String property : typeB.properties.keySet())",
    "info" : "EnhancedForStatement[9432-10173]:EnhancedForStatement[9344-10011]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9482-10173]:Block[8477-10033]"
  }, {
    "left" : "if (!typeA.hasProperty(property))",
    "right" : "if (!typeA.hasProperty(property))",
    "info" : "IfStatement[9490-9555]:IfStatement[9402-9467]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9524-9555]:Block[9436-9467]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[9534-9547]:ReturnStatement[9446-9459]"
  }, {
    "left" : "JSType propA = typeA.getPropertyType(property);",
    "right" : "JSType propA = typeA.getPropertyType(property);",
    "info" : "VariableDeclarationStatement[9563-9610]:VariableDeclarationStatement[9475-9522]"
  }, {
    "left" : "JSType propB = typeB.getPropertyType(property);",
    "right" : "JSType propB = typeB.getPropertyType(property);",
    "info" : "VariableDeclarationStatement[9617-9664]:VariableDeclarationStatement[9529-9576]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9725-10167]:Block[9394-10011]"
  }, {
    "left" : "if (typeA.isPropertyTypeDeclared(property))",
    "right" : "if (typeA.isPropertyTypeDeclared(property))",
    "info" : "IfStatement[9733-10159]:IfStatement[9583-10005]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9777-9964]:Block[9627-9814]"
  }, {
    "left" : "if (!propA.isInvariant(propB))",
    "right" : "if (!propA.isInvariant(propB))",
    "info" : "IfStatement[9890-9956]:IfStatement[9740-9806]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9921-9956]:Block[9771-9806]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[9933-9946]:ReturnStatement[9783-9796]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9970-10159]:Block[9820-10005]"
  }, {
    "left" : "if (!propA.isSubtype(propB))",
    "right" : "if (!propA.isSubtype(propB))",
    "info" : "IfStatement[10083-10149]:IfStatement[9933-9997]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10112-10149]:Block[9962-9997]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[10124-10137]:ReturnStatement[9974-9987]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[10179-10191]:ReturnStatement[10017-10029]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10199-10208]:MarkerAnnotation[10037-10046]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[10211-10217]:SimpleType[10049-10055]"
  }, {
    "left" : "resolveInternal",
    "right" : "resolveInternal",
    "info" : "SimpleName[10218-10233]:SimpleName[10056-10071]"
  }, {
    "left" : "ErrorReporter t",
    "right" : "ErrorReporter t",
    "info" : "SingleVariableDeclaration[10234-10249]:SingleVariableDeclaration[10072-10087]"
  }, {
    "left" : "StaticScope<JSType> scope",
    "right" : "StaticScope<JSType> scope",
    "info" : "SingleVariableDeclaration[10251-10276]:SingleVariableDeclaration[10089-10114]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10278-10587]:Block[10116-10425]"
  }, {
    "left" : "for (Map.Entry<String, JSType> entry : properties.entrySet())",
    "right" : "for (Map.Entry<String, JSType> entry : properties.entrySet())",
    "info" : "EnhancedForStatement[10284-10539]:EnhancedForStatement[10122-10377]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10346-10539]:Block[10184-10377]"
  }, {
    "left" : "JSType type = entry.getValue();",
    "right" : "JSType type = entry.getValue();",
    "info" : "VariableDeclarationStatement[10354-10385]:VariableDeclarationStatement[10192-10223]"
  }, {
    "left" : "JSType resolvedType = type.resolve(t, scope);",
    "right" : "JSType resolvedType = type.resolve(t, scope);",
    "info" : "VariableDeclarationStatement[10392-10437]:VariableDeclarationStatement[10230-10275]"
  }, {
    "left" : "if (type != resolvedType)",
    "right" : "if (type != resolvedType)",
    "info" : "IfStatement[10444-10533]:IfStatement[10282-10371]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10470-10533]:Block[10308-10371]"
  }, {
    "left" : "properties.put(entry.getKey(), resolvedType);",
    "right" : "properties.put(entry.getKey(), resolvedType);",
    "info" : "ExpressionStatement[10480-10525]:ExpressionStatement[10318-10363]"
  }, {
    "left" : "return super.resolveInternal(t, scope);",
    "right" : "return super.resolveInternal(t, scope);",
    "info" : "ReturnStatement[10544-10583]:ReturnStatement[10382-10421]"
  } ]
}