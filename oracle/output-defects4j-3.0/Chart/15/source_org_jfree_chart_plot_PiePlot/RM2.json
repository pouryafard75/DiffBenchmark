{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "PiePlot",
      "right" : "PiePlot",
      "info" : "TypeDeclaration[10757-110084]:TypeDeclaration[10757-110205]"
    }, {
      "left" : "private static final long serialVersionUID = -795612466005590431L;",
      "right" : "private static final long serialVersionUID = -795612466005590431L;",
      "info" : "FieldDeclaration[11410-11507]:FieldDeclaration[11410-11507]"
    }, {
      "left" : "public static final double DEFAULT_INTERIOR_GAP = 0.08;",
      "right" : "public static final double DEFAULT_INTERIOR_GAP = 0.08;",
      "info" : "FieldDeclaration[11519-11612]:FieldDeclaration[11519-11612]"
    }, {
      "left" : "public static final double MAX_INTERIOR_GAP = 0.40;",
      "right" : "public static final double MAX_INTERIOR_GAP = 0.40;",
      "info" : "FieldDeclaration[11620-11725]:FieldDeclaration[11620-11725]"
    }, {
      "left" : "public static final double DEFAULT_START_ANGLE = 90.0;",
      "right" : "public static final double DEFAULT_START_ANGLE = 90.0;",
      "info" : "FieldDeclaration[11733-11845]:FieldDeclaration[11733-11845]"
    }, {
      "left" : "public static final Font DEFAULT_LABEL_FONT = new Font(\"SansSerif\", \r\n            Font.PLAIN, 10);",
      "right" : "public static final Font DEFAULT_LABEL_FONT = new Font(\"SansSerif\", \r\n            Font.PLAIN, 10);",
      "info" : "FieldDeclaration[11853-11995]:FieldDeclaration[11853-11995]"
    }, {
      "left" : "public static final Paint DEFAULT_LABEL_PAINT = Color.black;",
      "right" : "public static final Paint DEFAULT_LABEL_PAINT = Color.black;",
      "info" : "FieldDeclaration[12003-12108]:FieldDeclaration[12003-12108]"
    }, {
      "left" : "public static final Paint DEFAULT_LABEL_BACKGROUND_PAINT = new Color(255, \r\n            255, 192);",
      "right" : "public static final Paint DEFAULT_LABEL_BACKGROUND_PAINT = new Color(255, \r\n            255, 192);",
      "info" : "FieldDeclaration[12120-12274]:FieldDeclaration[12120-12274]"
    }, {
      "left" : "public static final Paint DEFAULT_LABEL_OUTLINE_PAINT = Color.black;",
      "right" : "public static final Paint DEFAULT_LABEL_OUTLINE_PAINT = Color.black;",
      "info" : "FieldDeclaration[12282-12403]:FieldDeclaration[12282-12403]"
    }, {
      "left" : "public static final Stroke DEFAULT_LABEL_OUTLINE_STROKE = new BasicStroke(\r\n            0.5f);",
      "right" : "public static final Stroke DEFAULT_LABEL_OUTLINE_STROKE = new BasicStroke(\r\n            0.5f);",
      "info" : "FieldDeclaration[12415-12563]:FieldDeclaration[12415-12563]"
    }, {
      "left" : "public static final Paint DEFAULT_LABEL_SHADOW_PAINT = new Color(151, 151, \r\n            151, 128);",
      "right" : "public static final Paint DEFAULT_LABEL_SHADOW_PAINT = new Color(151, 151, \r\n            151, 128);",
      "info" : "FieldDeclaration[12575-12726]:FieldDeclaration[12575-12726]"
    }, {
      "left" : "public static final double DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW = 0.00001;",
      "right" : "public static final double DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW = 0.00001;",
      "info" : "FieldDeclaration[12738-12860]:FieldDeclaration[12738-12860]"
    }, {
      "left" : "private PieDataset dataset;",
      "right" : "private PieDataset dataset;",
      "info" : "FieldDeclaration[12868-12938]:FieldDeclaration[12868-12938]"
    }, {
      "left" : "private int pieIndex;",
      "right" : "private int pieIndex;",
      "info" : "FieldDeclaration[12946-13038]:FieldDeclaration[12946-13038]"
    }, {
      "left" : "private double interiorGap;",
      "right" : "private double interiorGap;",
      "info" : "FieldDeclaration[13046-13232]:FieldDeclaration[13046-13232]"
    }, {
      "left" : "private boolean circular;",
      "right" : "private boolean circular;",
      "info" : "FieldDeclaration[13240-13342]:FieldDeclaration[13240-13342]"
    }, {
      "left" : "private double startAngle;",
      "right" : "private double startAngle;",
      "info" : "FieldDeclaration[13350-13408]:FieldDeclaration[13350-13408]"
    }, {
      "left" : "private Rotation direction;",
      "right" : "private Rotation direction;",
      "info" : "FieldDeclaration[13416-13491]:FieldDeclaration[13416-13491]"
    }, {
      "left" : "private PaintMap sectionPaintMap;",
      "right" : "private PaintMap sectionPaintMap;",
      "info" : "FieldDeclaration[13499-13567]:FieldDeclaration[13499-13567]"
    }, {
      "left" : "private transient Paint baseSectionPaint;",
      "right" : "private transient Paint baseSectionPaint;",
      "info" : "FieldDeclaration[13575-13663]:FieldDeclaration[13575-13663]"
    }, {
      "left" : "private boolean sectionOutlinesVisible;",
      "right" : "private boolean sectionOutlinesVisible;",
      "info" : "FieldDeclaration[13671-13831]:FieldDeclaration[13671-13831]"
    }, {
      "left" : "private PaintMap sectionOutlinePaintMap;",
      "right" : "private PaintMap sectionOutlinePaintMap;",
      "info" : "FieldDeclaration[13839-13922]:FieldDeclaration[13839-13922]"
    }, {
      "left" : "private transient Paint baseSectionOutlinePaint;",
      "right" : "private transient Paint baseSectionOutlinePaint;",
      "info" : "FieldDeclaration[13930-14033]:FieldDeclaration[13930-14033]"
    }, {
      "left" : "private StrokeMap sectionOutlineStrokeMap;",
      "right" : "private StrokeMap sectionOutlineStrokeMap;",
      "info" : "FieldDeclaration[14041-14127]:FieldDeclaration[14041-14127]"
    }, {
      "left" : "private transient Stroke baseSectionOutlineStroke;",
      "right" : "private transient Stroke baseSectionOutlineStroke;",
      "info" : "FieldDeclaration[14135-14241]:FieldDeclaration[14135-14241]"
    }, {
      "left" : "private transient Paint shadowPaint = Color.gray;",
      "right" : "private transient Paint shadowPaint = Color.gray;",
      "info" : "FieldDeclaration[14249-14328]:FieldDeclaration[14249-14328]"
    }, {
      "left" : "private double shadowXOffset = 4.0f;",
      "right" : "private double shadowXOffset = 4.0f;",
      "info" : "FieldDeclaration[14336-14420]:FieldDeclaration[14336-14420]"
    }, {
      "left" : "private double shadowYOffset = 4.0f;",
      "right" : "private double shadowYOffset = 4.0f;",
      "info" : "FieldDeclaration[14432-14516]:FieldDeclaration[14432-14516]"
    }, {
      "left" : "private Map explodePercentages;",
      "right" : "private Map explodePercentages;",
      "info" : "FieldDeclaration[14528-14622]:FieldDeclaration[14528-14622]"
    }, {
      "left" : "private PieSectionLabelGenerator labelGenerator;",
      "right" : "private PieSectionLabelGenerator labelGenerator;",
      "info" : "FieldDeclaration[14634-14723]:FieldDeclaration[14634-14723]"
    }, {
      "left" : "private Font labelFont;",
      "right" : "private Font labelFont;",
      "info" : "FieldDeclaration[14731-14811]:FieldDeclaration[14731-14811]"
    }, {
      "left" : "private transient Paint labelPaint;",
      "right" : "private transient Paint labelPaint;",
      "info" : "FieldDeclaration[14819-14909]:FieldDeclaration[14819-14909]"
    }, {
      "left" : "private transient Paint labelBackgroundPaint;",
      "right" : "private transient Paint labelBackgroundPaint;",
      "info" : "FieldDeclaration[14921-15123]:FieldDeclaration[14921-15123]"
    }, {
      "left" : "private transient Paint labelOutlinePaint;",
      "right" : "private transient Paint labelOutlinePaint;",
      "info" : "FieldDeclaration[15131-15298]:FieldDeclaration[15131-15298]"
    }, {
      "left" : "private transient Stroke labelOutlineStroke;",
      "right" : "private transient Stroke labelOutlineStroke;",
      "info" : "FieldDeclaration[15310-15480]:FieldDeclaration[15310-15480]"
    }, {
      "left" : "private transient Paint labelShadowPaint;",
      "right" : "private transient Paint labelShadowPaint;",
      "info" : "FieldDeclaration[15492-15658]:FieldDeclaration[15492-15658]"
    }, {
      "left" : "private boolean simpleLabels = true;",
      "right" : "private boolean simpleLabels = true;",
      "info" : "FieldDeclaration[15670-15827]:FieldDeclaration[15670-15827]"
    }, {
      "left" : "private RectangleInsets labelPadding;",
      "right" : "private RectangleInsets labelPadding;",
      "info" : "FieldDeclaration[15839-16041]:FieldDeclaration[15839-16041]"
    }, {
      "left" : "private RectangleInsets simpleLabelOffset;",
      "right" : "private RectangleInsets simpleLabelOffset;",
      "info" : "FieldDeclaration[16053-16176]:FieldDeclaration[16053-16176]"
    }, {
      "left" : "private double maximumLabelWidth = 0.14;",
      "right" : "private double maximumLabelWidth = 0.14;",
      "info" : "FieldDeclaration[16188-16299]:FieldDeclaration[16188-16299]"
    }, {
      "left" : "private double labelGap = 0.025;",
      "right" : "private double labelGap = 0.025;",
      "info" : "FieldDeclaration[16311-16463]:FieldDeclaration[16311-16463]"
    }, {
      "left" : "private boolean labelLinksVisible;",
      "right" : "private boolean labelLinksVisible;",
      "info" : "FieldDeclaration[16471-16580]:FieldDeclaration[16471-16580]"
    }, {
      "left" : "private double labelLinkMargin = 0.025;",
      "right" : "private double labelLinkMargin = 0.025;",
      "info" : "FieldDeclaration[16592-16660]:FieldDeclaration[16592-16660]"
    }, {
      "left" : "private transient Paint labelLinkPaint = Color.black;",
      "right" : "private transient Paint labelLinkPaint = Color.black;",
      "info" : "FieldDeclaration[16672-16781]:FieldDeclaration[16672-16781]"
    }, {
      "left" : "private transient Stroke labelLinkStroke = new BasicStroke(0.5f);",
      "right" : "private transient Stroke labelLinkStroke = new BasicStroke(0.5f);",
      "info" : "FieldDeclaration[16793-16915]:FieldDeclaration[16793-16915]"
    }, {
      "left" : "private AbstractPieLabelDistributor labelDistributor;",
      "right" : "private AbstractPieLabelDistributor labelDistributor;",
      "info" : "FieldDeclaration[16927-17072]:FieldDeclaration[16927-17072]"
    }, {
      "left" : "private PieToolTipGenerator toolTipGenerator;",
      "right" : "private PieToolTipGenerator toolTipGenerator;",
      "info" : "FieldDeclaration[17084-17164]:FieldDeclaration[17084-17164]"
    }, {
      "left" : "private PieURLGenerator urlGenerator;",
      "right" : "private PieURLGenerator urlGenerator;",
      "info" : "FieldDeclaration[17172-17240]:FieldDeclaration[17172-17240]"
    }, {
      "left" : "private PieSectionLabelGenerator legendLabelGenerator;",
      "right" : "private PieSectionLabelGenerator legendLabelGenerator;",
      "info" : "FieldDeclaration[17252-17346]:FieldDeclaration[17252-17346]"
    }, {
      "left" : "private PieSectionLabelGenerator legendLabelToolTipGenerator;",
      "right" : "private PieSectionLabelGenerator legendLabelToolTipGenerator;",
      "info" : "FieldDeclaration[17358-17468]:FieldDeclaration[17358-17468]"
    }, {
      "left" : "private PieURLGenerator legendLabelURLGenerator;",
      "right" : "private PieURLGenerator legendLabelURLGenerator;",
      "info" : "FieldDeclaration[17480-17637]:FieldDeclaration[17480-17637]"
    }, {
      "left" : "private boolean ignoreNullValues;",
      "right" : "private boolean ignoreNullValues;",
      "info" : "FieldDeclaration[17649-17778]:FieldDeclaration[17649-17778]"
    }, {
      "left" : "private boolean ignoreZeroValues;",
      "right" : "private boolean ignoreZeroValues;",
      "info" : "FieldDeclaration[17790-17903]:FieldDeclaration[17790-17903]"
    }, {
      "left" : "private transient Shape legendItemShape;",
      "right" : "private transient Shape legendItemShape;",
      "info" : "FieldDeclaration[17911-17986]:FieldDeclaration[17911-17986]"
    }, {
      "left" : "private double minimumArcAngleToDraw;",
      "right" : "private double minimumArcAngleToDraw;",
      "info" : "FieldDeclaration[17998-18449]:FieldDeclaration[17998-18449]"
    }, {
      "left" : "protected static ResourceBundle localizationResources =\r\n            ResourceBundle.getBundle(\"org.jfree.chart.plot.LocalizationBundle\");",
      "right" : "protected static ResourceBundle localizationResources =\r\n            ResourceBundle.getBundle(\"org.jfree.chart.plot.LocalizationBundle\");",
      "info" : "FieldDeclaration[18457-18647]:FieldDeclaration[18457-18647]"
    }, {
      "left" : "static final boolean DEBUG_DRAW_INTERIOR = false;",
      "right" : "static final boolean DEBUG_DRAW_INTERIOR = false;",
      "info" : "FieldDeclaration[18655-18949]:FieldDeclaration[18655-18949]"
    }, {
      "left" : "static final boolean DEBUG_DRAW_LINK_AREA = false;",
      "right" : "static final boolean DEBUG_DRAW_LINK_AREA = false;",
      "info" : "FieldDeclaration[18961-19236]:FieldDeclaration[18961-19236]"
    }, {
      "left" : "static final boolean DEBUG_DRAW_PIE_AREA = false;",
      "right" : "static final boolean DEBUG_DRAW_PIE_AREA = false;",
      "info" : "FieldDeclaration[19248-19424]:FieldDeclaration[19248-19424]"
    }, {
      "left" : "public PiePlot()",
      "right" : "public PiePlot()",
      "info" : "MethodDeclaration[19436-19580]:MethodDeclaration[19436-19580]"
    }, {
      "left" : "public PiePlot(PieDataset dataset)",
      "right" : "public PiePlot(PieDataset dataset)",
      "info" : "MethodDeclaration[19588-21833]:MethodDeclaration[19588-21833]"
    }, {
      "left" : "public PieDataset getDataset()",
      "right" : "public PieDataset getDataset()",
      "info" : "MethodDeclaration[21841-22069]:MethodDeclaration[21841-22069]"
    }, {
      "left" : "public void setDataset(PieDataset dataset)",
      "right" : "public void setDataset(PieDataset dataset)",
      "info" : "MethodDeclaration[22077-22996]:MethodDeclaration[22077-22996]"
    }, {
      "left" : "public int getPieIndex()",
      "right" : "public int getPieIndex()",
      "info" : "MethodDeclaration[23008-23279]:MethodDeclaration[23008-23279]"
    }, {
      "left" : "public void setPieIndex(int index)",
      "right" : "public void setPieIndex(int index)",
      "info" : "MethodDeclaration[23291-23570]:MethodDeclaration[23291-23570]"
    }, {
      "left" : "public double getStartAngle()",
      "right" : "public double getStartAngle()",
      "info" : "MethodDeclaration[23582-23908]:MethodDeclaration[23582-23908]"
    }, {
      "left" : "public void setStartAngle(double angle)",
      "right" : "public void setStartAngle(double angle)",
      "info" : "MethodDeclaration[23916-24454]:MethodDeclaration[23916-24454]"
    }, {
      "left" : "public Rotation getDirection()",
      "right" : "public Rotation getDirection()",
      "info" : "MethodDeclaration[24462-24768]:MethodDeclaration[24462-24768]"
    }, {
      "left" : "public void setDirection(Rotation direction)",
      "right" : "public void setDirection(Rotation direction)",
      "info" : "MethodDeclaration[24776-25321]:MethodDeclaration[24776-25321]"
    }, {
      "left" : "public double getInteriorGap()",
      "right" : "public double getInteriorGap()",
      "info" : "MethodDeclaration[25329-25648]:MethodDeclaration[25329-25648]"
    }, {
      "left" : "public void setInteriorGap(double percent)",
      "right" : "public void setInteriorGap(double percent)",
      "info" : "MethodDeclaration[25656-26457]:MethodDeclaration[25656-26457]"
    }, {
      "left" : "public boolean isCircular()",
      "right" : "public boolean isCircular()",
      "info" : "MethodDeclaration[26465-26787]:MethodDeclaration[26465-26787]"
    }, {
      "left" : "public void setCircular(boolean flag)",
      "right" : "public void setCircular(boolean flag)",
      "info" : "MethodDeclaration[26795-27081]:MethodDeclaration[26795-27081]"
    }, {
      "left" : "public void setCircular(boolean circular, boolean notify)",
      "right" : "public void setCircular(boolean circular, boolean notify)",
      "info" : "MethodDeclaration[27089-27564]:MethodDeclaration[27089-27564]"
    }, {
      "left" : "public boolean getIgnoreNullValues()",
      "right" : "public boolean getIgnoreNullValues()",
      "info" : "MethodDeclaration[27572-27876]:MethodDeclaration[27572-27876]"
    }, {
      "left" : "public void setIgnoreNullValues(boolean flag)",
      "right" : "public void setIgnoreNullValues(boolean flag)",
      "info" : "MethodDeclaration[27888-28434]:MethodDeclaration[27888-28434]"
    }, {
      "left" : "public boolean getIgnoreZeroValues()",
      "right" : "public boolean getIgnoreZeroValues()",
      "info" : "MethodDeclaration[28446-28737]:MethodDeclaration[28446-28737]"
    }, {
      "left" : "public void setIgnoreZeroValues(boolean flag)",
      "right" : "public void setIgnoreZeroValues(boolean flag)",
      "info" : "MethodDeclaration[28749-29282]:MethodDeclaration[28749-29282]"
    }, {
      "left" : "protected Paint lookupSectionPaint(Comparable key)",
      "right" : "protected Paint lookupSectionPaint(Comparable key)",
      "info" : "MethodDeclaration[29377-29844]:MethodDeclaration[29377-29844]"
    }, {
      "left" : "protected Paint lookupSectionPaint(Comparable key, boolean autoPopulate)",
      "right" : "protected Paint lookupSectionPaint(Comparable key, boolean autoPopulate)",
      "info" : "MethodDeclaration[29856-31482]:MethodDeclaration[29856-31482]"
    }, {
      "left" : "protected Comparable getSectionKey(int section)",
      "right" : "protected Comparable getSectionKey(int section)",
      "info" : "MethodDeclaration[31494-32448]:MethodDeclaration[31494-32448]"
    }, {
      "left" : "public Paint getSectionPaint(Comparable key)",
      "right" : "public Paint getSectionPaint(Comparable key)",
      "info" : "MethodDeclaration[32460-33139]:MethodDeclaration[32460-33139]"
    }, {
      "left" : "public void setSectionPaint(Comparable key, Paint paint)",
      "right" : "public void setSectionPaint(Comparable key, Paint paint)",
      "info" : "MethodDeclaration[33151-33806]:MethodDeclaration[33151-33806]"
    }, {
      "left" : "public Paint getBaseSectionPaint()",
      "right" : "public Paint getBaseSectionPaint()",
      "info" : "MethodDeclaration[33818-34190]:MethodDeclaration[33818-34190]"
    }, {
      "left" : "public void setBaseSectionPaint(Paint paint)",
      "right" : "public void setBaseSectionPaint(Paint paint)",
      "info" : "MethodDeclaration[34202-34715]:MethodDeclaration[34202-34715]"
    }, {
      "left" : "public boolean getSectionOutlinesVisible()",
      "right" : "public boolean getSectionOutlinesVisible()",
      "info" : "MethodDeclaration[34810-35217]:MethodDeclaration[34810-35217]"
    }, {
      "left" : "public void setSectionOutlinesVisible(boolean visible)",
      "right" : "public void setSectionOutlinesVisible(boolean visible)",
      "info" : "MethodDeclaration[35229-35681]:MethodDeclaration[35229-35681]"
    }, {
      "left" : "protected Paint lookupSectionOutlinePaint(Comparable key)",
      "right" : "protected Paint lookupSectionOutlinePaint(Comparable key)",
      "info" : "MethodDeclaration[35689-36186]:MethodDeclaration[35689-36186]"
    }, {
      "left" : "protected Paint lookupSectionOutlinePaint(Comparable key, \r\n            boolean autoPopulate)",
      "right" : "protected Paint lookupSectionOutlinePaint(Comparable key, \r\n            boolean autoPopulate)",
      "info" : "MethodDeclaration[36198-37937]:MethodDeclaration[36198-37937]"
    }, {
      "left" : "public Paint getSectionOutlinePaint(Comparable key)",
      "right" : "public Paint getSectionOutlinePaint(Comparable key)",
      "info" : "MethodDeclaration[37945-38653]:MethodDeclaration[37945-38653]"
    }, {
      "left" : "public void setSectionOutlinePaint(Comparable key, Paint paint)",
      "right" : "public void setSectionOutlinePaint(Comparable key, Paint paint)",
      "info" : "MethodDeclaration[38665-39349]:MethodDeclaration[38665-39349]"
    }, {
      "left" : "public Paint getBaseSectionOutlinePaint()",
      "right" : "public Paint getBaseSectionOutlinePaint()",
      "info" : "MethodDeclaration[39361-39694]:MethodDeclaration[39361-39694]"
    }, {
      "left" : "public void setBaseSectionOutlinePaint(Paint paint)",
      "right" : "public void setBaseSectionOutlinePaint(Paint paint)",
      "info" : "MethodDeclaration[39706-40168]:MethodDeclaration[39706-40168]"
    }, {
      "left" : "protected Stroke lookupSectionOutlineStroke(Comparable key)",
      "right" : "protected Stroke lookupSectionOutlineStroke(Comparable key)",
      "info" : "MethodDeclaration[40263-40774]:MethodDeclaration[40263-40774]"
    }, {
      "left" : "protected Stroke lookupSectionOutlineStroke(Comparable key, \r\n            boolean autoPopulate)",
      "right" : "protected Stroke lookupSectionOutlineStroke(Comparable key, \r\n            boolean autoPopulate)",
      "info" : "MethodDeclaration[40786-42542]:MethodDeclaration[40786-42542]"
    }, {
      "left" : "public Stroke getSectionOutlineStroke(Comparable key)",
      "right" : "public Stroke getSectionOutlineStroke(Comparable key)",
      "info" : "MethodDeclaration[42554-43271]:MethodDeclaration[42554-43271]"
    }, {
      "left" : "public void setSectionOutlineStroke(Comparable key, Stroke stroke)",
      "right" : "public void setSectionOutlineStroke(Comparable key, Stroke stroke)",
      "info" : "MethodDeclaration[43283-43976]:MethodDeclaration[43283-43976]"
    }, {
      "left" : "public Stroke getBaseSectionOutlineStroke()",
      "right" : "public Stroke getBaseSectionOutlineStroke()",
      "info" : "MethodDeclaration[43988-44329]:MethodDeclaration[43988-44329]"
    }, {
      "left" : "public void setBaseSectionOutlineStroke(Stroke stroke)",
      "right" : "public void setBaseSectionOutlineStroke(Stroke stroke)",
      "info" : "MethodDeclaration[44341-44814]:MethodDeclaration[44341-44814]"
    }, {
      "left" : "public Paint getShadowPaint()",
      "right" : "public Paint getShadowPaint()",
      "info" : "MethodDeclaration[44822-45059]:MethodDeclaration[44822-45059]"
    }, {
      "left" : "public void setShadowPaint(Paint paint)",
      "right" : "public void setShadowPaint(Paint paint)",
      "info" : "MethodDeclaration[45071-45441]:MethodDeclaration[45071-45441]"
    }, {
      "left" : "public double getShadowXOffset()",
      "right" : "public double getShadowXOffset()",
      "info" : "MethodDeclaration[45453-45703]:MethodDeclaration[45453-45703]"
    }, {
      "left" : "public void setShadowXOffset(double offset)",
      "right" : "public void setShadowXOffset(double offset)",
      "info" : "MethodDeclaration[45715-46105]:MethodDeclaration[45715-46105]"
    }, {
      "left" : "public double getShadowYOffset()",
      "right" : "public double getShadowYOffset()",
      "info" : "MethodDeclaration[46117-46367]:MethodDeclaration[46117-46367]"
    }, {
      "left" : "public void setShadowYOffset(double offset)",
      "right" : "public void setShadowYOffset(double offset)",
      "info" : "MethodDeclaration[46379-46769]:MethodDeclaration[46379-46769]"
    }, {
      "left" : "public double getExplodePercent(Comparable key)",
      "right" : "public double getExplodePercent(Comparable key)",
      "info" : "MethodDeclaration[46781-47611]:MethodDeclaration[46781-47611]"
    }, {
      "left" : "public void setExplodePercent(Comparable key, double percent)",
      "right" : "public void setExplodePercent(Comparable key, double percent)",
      "info" : "MethodDeclaration[47623-48420]:MethodDeclaration[47623-48420]"
    }, {
      "left" : "public double getMaximumExplodePercent()",
      "right" : "public double getMaximumExplodePercent()",
      "info" : "MethodDeclaration[48432-49003]:MethodDeclaration[48432-49076]"
    }, {
      "left" : "public PieSectionLabelGenerator getLabelGenerator()",
      "right" : "public PieSectionLabelGenerator getLabelGenerator()",
      "info" : "MethodDeclaration[49015-49315]:MethodDeclaration[49088-49388]"
    }, {
      "left" : "public void setLabelGenerator(PieSectionLabelGenerator generator)",
      "right" : "public void setLabelGenerator(PieSectionLabelGenerator generator)",
      "info" : "MethodDeclaration[49327-49751]:MethodDeclaration[49400-49824]"
    }, {
      "left" : "public double getLabelGap()",
      "right" : "public double getLabelGap()",
      "info" : "MethodDeclaration[49763-50092]:MethodDeclaration[49836-50165]"
    }, {
      "left" : "public void setLabelGap(double gap)",
      "right" : "public void setLabelGap(double gap)",
      "info" : "MethodDeclaration[50104-50561]:MethodDeclaration[50177-50634]"
    }, {
      "left" : "public double getMaximumLabelWidth()",
      "right" : "public double getMaximumLabelWidth()",
      "info" : "MethodDeclaration[50573-50882]:MethodDeclaration[50646-50955]"
    }, {
      "left" : "public void setMaximumLabelWidth(double width)",
      "right" : "public void setMaximumLabelWidth(double width)",
      "info" : "MethodDeclaration[50894-51333]:MethodDeclaration[50967-51406]"
    }, {
      "left" : "public boolean getLabelLinksVisible()",
      "right" : "public boolean getLabelLinksVisible()",
      "info" : "MethodDeclaration[51345-51633]:MethodDeclaration[51418-51706]"
    }, {
      "left" : "public void setLabelLinksVisible(boolean visible)",
      "right" : "public void setLabelLinksVisible(boolean visible)",
      "info" : "MethodDeclaration[51645-52250]:MethodDeclaration[51718-52323]"
    }, {
      "left" : "public double getLabelLinkMargin()",
      "right" : "public double getLabelLinkMargin()",
      "info" : "MethodDeclaration[52262-52637]:MethodDeclaration[52335-52710]"
    }, {
      "left" : "public void setLabelLinkMargin(double margin)",
      "right" : "public void setLabelLinkMargin(double margin)",
      "info" : "MethodDeclaration[52649-53005]:MethodDeclaration[52722-53078]"
    }, {
      "left" : "public Paint getLabelLinkPaint()",
      "right" : "public Paint getLabelLinkPaint()",
      "info" : "MethodDeclaration[53017-53337]:MethodDeclaration[53090-53410]"
    }, {
      "left" : "public void setLabelLinkPaint(Paint paint)",
      "right" : "public void setLabelLinkPaint(Paint paint)",
      "info" : "MethodDeclaration[53349-53926]:MethodDeclaration[53422-53999]"
    }, {
      "left" : "public Stroke getLabelLinkStroke()",
      "right" : "public Stroke getLabelLinkStroke()",
      "info" : "MethodDeclaration[53938-54188]:MethodDeclaration[54011-54261]"
    }, {
      "left" : "public void setLabelLinkStroke(Stroke stroke)",
      "right" : "public void setLabelLinkStroke(Stroke stroke)",
      "info" : "MethodDeclaration[54200-54674]:MethodDeclaration[54273-54747]"
    }, {
      "left" : "public Font getLabelFont()",
      "right" : "public Font getLabelFont()",
      "info" : "MethodDeclaration[54686-54913]:MethodDeclaration[54759-54986]"
    }, {
      "left" : "public void setLabelFont(Font font)",
      "right" : "public void setLabelFont(Font font)",
      "info" : "MethodDeclaration[54921-55403]:MethodDeclaration[54994-55476]"
    }, {
      "left" : "public Paint getLabelPaint()",
      "right" : "public Paint getLabelPaint()",
      "info" : "MethodDeclaration[55411-55645]:MethodDeclaration[55484-55718]"
    }, {
      "left" : "public void setLabelPaint(Paint paint)",
      "right" : "public void setLabelPaint(Paint paint)",
      "info" : "MethodDeclaration[55653-56146]:MethodDeclaration[55726-56219]"
    }, {
      "left" : "public Paint getLabelBackgroundPaint()",
      "right" : "public Paint getLabelBackgroundPaint()",
      "info" : "MethodDeclaration[56154-56432]:MethodDeclaration[56227-56505]"
    }, {
      "left" : "public void setLabelBackgroundPaint(Paint paint)",
      "right" : "public void setLabelBackgroundPaint(Paint paint)",
      "info" : "MethodDeclaration[56440-56854]:MethodDeclaration[56513-56927]"
    }, {
      "left" : "public Paint getLabelOutlinePaint()",
      "right" : "public Paint getLabelOutlinePaint()",
      "info" : "MethodDeclaration[56862-57128]:MethodDeclaration[56935-57201]"
    }, {
      "left" : "public void setLabelOutlinePaint(Paint paint)",
      "right" : "public void setLabelOutlinePaint(Paint paint)",
      "info" : "MethodDeclaration[57136-57538]:MethodDeclaration[57209-57611]"
    }, {
      "left" : "public Stroke getLabelOutlineStroke()",
      "right" : "public Stroke getLabelOutlineStroke()",
      "info" : "MethodDeclaration[57546-57819]:MethodDeclaration[57619-57892]"
    }, {
      "left" : "public void setLabelOutlineStroke(Stroke stroke)",
      "right" : "public void setLabelOutlineStroke(Stroke stroke)",
      "info" : "MethodDeclaration[57827-58238]:MethodDeclaration[57900-58311]"
    }, {
      "left" : "public Paint getLabelShadowPaint()",
      "right" : "public Paint getLabelShadowPaint()",
      "info" : "MethodDeclaration[58246-58508]:MethodDeclaration[58319-58581]"
    }, {
      "left" : "public void setLabelShadowPaint(Paint paint)",
      "right" : "public void setLabelShadowPaint(Paint paint)",
      "info" : "MethodDeclaration[58516-58913]:MethodDeclaration[58589-58986]"
    }, {
      "left" : "public RectangleInsets getLabelPadding()",
      "right" : "public RectangleInsets getLabelPadding()",
      "info" : "MethodDeclaration[58925-59218]:MethodDeclaration[58998-59291]"
    }, {
      "left" : "public void setLabelPadding(RectangleInsets padding)",
      "right" : "public void setLabelPadding(RectangleInsets padding)",
      "info" : "MethodDeclaration[59230-59805]:MethodDeclaration[59303-59878]"
    }, {
      "left" : "public boolean getSimpleLabels()",
      "right" : "public boolean getSimpleLabels()",
      "info" : "MethodDeclaration[59813-60081]:MethodDeclaration[59886-60154]"
    }, {
      "left" : "public void setSimpleLabels(boolean simple)",
      "right" : "public void setSimpleLabels(boolean simple)",
      "info" : "MethodDeclaration[60093-60515]:MethodDeclaration[60166-60588]"
    }, {
      "left" : "public RectangleInsets getSimpleLabelOffset()",
      "right" : "public RectangleInsets getSimpleLabelOffset()",
      "info" : "MethodDeclaration[60527-60871]:MethodDeclaration[60600-60944]"
    }, {
      "left" : "public void setSimpleLabelOffset(RectangleInsets offset)",
      "right" : "public void setSimpleLabelOffset(RectangleInsets offset)",
      "info" : "MethodDeclaration[60883-61461]:MethodDeclaration[60956-61534]"
    }, {
      "left" : "public AbstractPieLabelDistributor getLabelDistributor()",
      "right" : "public AbstractPieLabelDistributor getLabelDistributor()",
      "info" : "MethodDeclaration[61473-61798]:MethodDeclaration[61546-61871]"
    }, {
      "left" : "public void setLabelDistributor(AbstractPieLabelDistributor distributor)",
      "right" : "public void setLabelDistributor(AbstractPieLabelDistributor distributor)",
      "info" : "MethodDeclaration[61810-62362]:MethodDeclaration[61883-62435]"
    }, {
      "left" : "public PieToolTipGenerator getToolTipGenerator()",
      "right" : "public PieToolTipGenerator getToolTipGenerator()",
      "info" : "MethodDeclaration[62374-62840]:MethodDeclaration[62447-62913]"
    }, {
      "left" : "public void setToolTipGenerator(PieToolTipGenerator generator)",
      "right" : "public void setToolTipGenerator(PieToolTipGenerator generator)",
      "info" : "MethodDeclaration[62848-63350]:MethodDeclaration[62921-63423]"
    }, {
      "left" : "public PieURLGenerator getURLGenerator()",
      "right" : "public PieURLGenerator getURLGenerator()",
      "info" : "MethodDeclaration[63358-63619]:MethodDeclaration[63431-63692]"
    }, {
      "left" : "public void setURLGenerator(PieURLGenerator generator)",
      "right" : "public void setURLGenerator(PieURLGenerator generator)",
      "info" : "MethodDeclaration[63627-64026]:MethodDeclaration[63700-64099]"
    }, {
      "left" : "public double getMinimumArcAngleToDraw()",
      "right" : "public double getMinimumArcAngleToDraw()",
      "info" : "MethodDeclaration[64034-64391]:MethodDeclaration[64107-64464]"
    }, {
      "left" : "public void setMinimumArcAngleToDraw(double angle)",
      "right" : "public void setMinimumArcAngleToDraw(double angle)",
      "info" : "MethodDeclaration[64399-65212]:MethodDeclaration[64472-65285]"
    }, {
      "left" : "public Shape getLegendItemShape()",
      "right" : "public Shape getLegendItemShape()",
      "info" : "MethodDeclaration[65224-65482]:MethodDeclaration[65297-65555]"
    }, {
      "left" : "public void setLegendItemShape(Shape shape)",
      "right" : "public void setLegendItemShape(Shape shape)",
      "info" : "MethodDeclaration[65490-66006]:MethodDeclaration[65563-66079]"
    }, {
      "left" : "public PieSectionLabelGenerator getLegendLabelGenerator()",
      "right" : "public PieSectionLabelGenerator getLegendLabelGenerator()",
      "info" : "MethodDeclaration[66018-66341]:MethodDeclaration[66091-66414]"
    }, {
      "left" : "public void setLegendLabelGenerator(PieSectionLabelGenerator generator)",
      "right" : "public void setLegendLabelGenerator(PieSectionLabelGenerator generator)",
      "info" : "MethodDeclaration[66353-66923]:MethodDeclaration[66426-66996]"
    }, {
      "left" : "public PieSectionLabelGenerator getLegendLabelToolTipGenerator()",
      "right" : "public PieSectionLabelGenerator getLegendLabelToolTipGenerator()",
      "info" : "MethodDeclaration[66935-67300]:MethodDeclaration[67008-67373]"
    }, {
      "left" : "public void setLegendLabelToolTipGenerator(\r\n            PieSectionLabelGenerator generator)",
      "right" : "public void setLegendLabelToolTipGenerator(\r\n            PieSectionLabelGenerator generator)",
      "info" : "MethodDeclaration[67312-67798]:MethodDeclaration[67385-67871]"
    }, {
      "left" : "public PieURLGenerator getLegendLabelURLGenerator()",
      "right" : "public PieURLGenerator getLegendLabelURLGenerator()",
      "info" : "MethodDeclaration[67810-68165]:MethodDeclaration[67883-68238]"
    }, {
      "left" : "public void setLegendLabelURLGenerator(PieURLGenerator generator)",
      "right" : "public void setLegendLabelURLGenerator(PieURLGenerator generator)",
      "info" : "MethodDeclaration[68177-68653]:MethodDeclaration[68250-68726]"
    }, {
      "left" : "public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea,\r\n            PiePlot plot, Integer index, PlotRenderingInfo info)",
      "right" : "public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea,\r\n            PiePlot plot, Integer index, PlotRenderingInfo info)",
      "info" : "MethodDeclaration[68665-69792]:MethodDeclaration[68738-69913]"
    }, {
      "left" : "public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,\r\n                     PlotState parentState, PlotRenderingInfo info)",
      "right" : "public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,\r\n                     PlotState parentState, PlotRenderingInfo info)",
      "info" : "MethodDeclaration[69804-71270]:MethodDeclaration[69925-71391]"
    }, {
      "left" : "protected void drawPie(Graphics2D g2, Rectangle2D plotArea, \r\n                           PlotRenderingInfo info)",
      "right" : "protected void drawPie(Graphics2D g2, Rectangle2D plotArea, \r\n                           PlotRenderingInfo info)",
      "info" : "MethodDeclaration[71278-76786]:MethodDeclaration[71399-76907]"
    }, {
      "left" : "protected void drawItem(Graphics2D g2, int section, Rectangle2D dataArea,\r\n                            PiePlotState state, int currentPass)",
      "right" : "protected void drawItem(Graphics2D g2, int section, Rectangle2D dataArea,\r\n                            PiePlotState state, int currentPass)",
      "info" : "MethodDeclaration[76798-80756]:MethodDeclaration[76919-80877]"
    }, {
      "left" : "protected void drawSimpleLabels(Graphics2D g2, List keys, \r\n            double totalValue, Rectangle2D plotArea, Rectangle2D pieArea, \r\n            PiePlotState state)",
      "right" : "protected void drawSimpleLabels(Graphics2D g2, List keys, \r\n            double totalValue, Rectangle2D plotArea, Rectangle2D pieArea, \r\n            PiePlotState state)",
      "info" : "MethodDeclaration[80768-84872]:MethodDeclaration[80889-84993]"
    }, {
      "left" : "protected void drawLabels(Graphics2D g2, List keys, double totalValue, \r\n                              Rectangle2D plotArea, Rectangle2D linkArea, \r\n                              PiePlotState state)",
      "right" : "protected void drawLabels(Graphics2D g2, List keys, double totalValue, \r\n                              Rectangle2D plotArea, Rectangle2D linkArea, \r\n                              PiePlotState state)",
      "info" : "MethodDeclaration[84880-87747]:MethodDeclaration[85001-87868]"
    }, {
      "left" : "protected void drawLeftLabels(KeyedValues leftKeys, Graphics2D g2, \r\n                                  Rectangle2D plotArea, Rectangle2D linkArea, \r\n                                  float maxLabelWidth, PiePlotState state)",
      "right" : "protected void drawLeftLabels(KeyedValues leftKeys, Graphics2D g2, \r\n                                  Rectangle2D plotArea, Rectangle2D linkArea, \r\n                                  float maxLabelWidth, PiePlotState state)",
      "info" : "MethodDeclaration[87755-90340]:MethodDeclaration[87876-90461]"
    }, {
      "left" : "protected void drawRightLabels(KeyedValues keys, Graphics2D g2, \r\n                                   Rectangle2D plotArea, Rectangle2D linkArea, \r\n                                   float maxLabelWidth, PiePlotState state)",
      "right" : "protected void drawRightLabels(KeyedValues keys, Graphics2D g2, \r\n                                   Rectangle2D plotArea, Rectangle2D linkArea, \r\n                                   float maxLabelWidth, PiePlotState state)",
      "info" : "MethodDeclaration[90352-92771]:MethodDeclaration[90473-92892]"
    }, {
      "left" : "public LegendItemCollection getLegendItems()",
      "right" : "public LegendItemCollection getLegendItems()",
      "info" : "MethodDeclaration[92783-95492]:MethodDeclaration[92904-95613]"
    }, {
      "left" : "public String getPlotType()",
      "right" : "public String getPlotType()",
      "info" : "MethodDeclaration[95500-95714]:MethodDeclaration[95621-95835]"
    }, {
      "left" : "protected Rectangle2D getArcBounds(Rectangle2D unexploded, \r\n                                       Rectangle2D exploded,\r\n                                       double angle, double extent, \r\n                                       double explodePercent)",
      "right" : "protected Rectangle2D getArcBounds(Rectangle2D unexploded, \r\n                                       Rectangle2D exploded,\r\n                                       double angle, double extent, \r\n                                       double explodePercent)",
      "info" : "MethodDeclaration[95722-97411]:MethodDeclaration[95843-97532]"
    }, {
      "left" : "protected void drawLeftLabel(Graphics2D g2, PiePlotState state, \r\n                                 PieLabelRecord record)",
      "right" : "protected void drawLeftLabel(Graphics2D g2, PiePlotState state, \r\n                                 PieLabelRecord record)",
      "info" : "MethodDeclaration[97423-99060]:MethodDeclaration[97544-99181]"
    }, {
      "left" : "protected void drawRightLabel(Graphics2D g2, PiePlotState state, \r\n                                  PieLabelRecord record)",
      "right" : "protected void drawRightLabel(Graphics2D g2, PiePlotState state, \r\n                                  PieLabelRecord record)",
      "info" : "MethodDeclaration[99068-100721]:MethodDeclaration[99189-100842]"
    }, {
      "left" : "public boolean equals(Object obj)",
      "right" : "public boolean equals(Object obj)",
      "info" : "MethodDeclaration[100729-106362]:MethodDeclaration[100850-106483]"
    }, {
      "left" : "public Object clone() throws CloneNotSupportedException",
      "right" : "public Object clone() throws CloneNotSupportedException",
      "info" : "MethodDeclaration[106370-107732]:MethodDeclaration[106491-107853]"
    }, {
      "left" : "private void writeObject(ObjectOutputStream stream) throws IOException",
      "right" : "private void writeObject(ObjectOutputStream stream) throws IOException",
      "info" : "MethodDeclaration[107740-108854]:MethodDeclaration[107861-108975]"
    }, {
      "left" : "private void readObject(ObjectInputStream stream) \r\n        throws IOException, ClassNotFoundException",
      "right" : "private void readObject(ObjectInputStream stream) \r\n        throws IOException, ClassNotFoundException",
      "info" : "MethodDeclaration[108862-110079]:MethodDeclaration[108983-110200]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11328-11334]:Modifier[11328-11334]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[11335-11340]:TYPE_DECLARATION_KIND[11335-11340]"
    }, {
      "left" : "PiePlot",
      "right" : "PiePlot",
      "info" : "SimpleName[11341-11348]:SimpleName[11341-11348]"
    }, {
      "left" : "Plot",
      "right" : "Plot",
      "info" : "SimpleType[11357-11361]:SimpleType[11357-11361]"
    }, {
      "left" : "Cloneable",
      "right" : "Cloneable",
      "info" : "SimpleType[11373-11382]:SimpleType[11373-11382]"
    }, {
      "left" : "Serializable",
      "right" : "Serializable",
      "info" : "SimpleType[11384-11396]:SimpleType[11384-11396]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19534-19540]:Modifier[19534-19540]"
    }, {
      "left" : "PiePlot",
      "right" : "PiePlot",
      "info" : "SimpleName[19541-19548]:SimpleName[19541-19548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19551-19580]:Block[19551-19580]"
    }, {
      "left" : "this(null);",
      "right" : "this(null);",
      "info" : "ConstructorInvocation[19562-19573]:ConstructorInvocation[19562-19573]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19758-19764]:Modifier[19758-19764]"
    }, {
      "left" : "PiePlot",
      "right" : "PiePlot",
      "info" : "SimpleName[19765-19772]:SimpleName[19765-19772]"
    }, {
      "left" : "PieDataset dataset",
      "right" : "PieDataset dataset",
      "info" : "SingleVariableDeclaration[19773-19791]:SingleVariableDeclaration[19773-19791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19793-21833]:Block[19793-21833]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[19804-19812]:SuperConstructorInvocation[19804-19812]"
    }, {
      "left" : "this.dataset = dataset;",
      "right" : "this.dataset = dataset;",
      "info" : "ExpressionStatement[19822-19845]:ExpressionStatement[19822-19845]"
    }, {
      "left" : "if (dataset != null)",
      "right" : "if (dataset != null)",
      "info" : "IfStatement[19855-19934]:IfStatement[19855-19934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19876-19934]:Block[19876-19934]"
    }, {
      "left" : "dataset.addChangeListener(this);",
      "right" : "dataset.addChangeListener(this);",
      "info" : "ExpressionStatement[19891-19923]:ExpressionStatement[19891-19923]"
    }, {
      "left" : "this.pieIndex = 0;",
      "right" : "this.pieIndex = 0;",
      "info" : "ExpressionStatement[19944-19962]:ExpressionStatement[19944-19962]"
    }, {
      "left" : "this.interiorGap = DEFAULT_INTERIOR_GAP;",
      "right" : "this.interiorGap = DEFAULT_INTERIOR_GAP;",
      "info" : "ExpressionStatement[19982-20022]:ExpressionStatement[19982-20022]"
    }, {
      "left" : "this.circular = true;",
      "right" : "this.circular = true;",
      "info" : "ExpressionStatement[20032-20053]:ExpressionStatement[20032-20053]"
    }, {
      "left" : "this.startAngle = DEFAULT_START_ANGLE;",
      "right" : "this.startAngle = DEFAULT_START_ANGLE;",
      "info" : "ExpressionStatement[20063-20101]:ExpressionStatement[20063-20101]"
    }, {
      "left" : "this.direction = Rotation.CLOCKWISE;",
      "right" : "this.direction = Rotation.CLOCKWISE;",
      "info" : "ExpressionStatement[20111-20147]:ExpressionStatement[20111-20147]"
    }, {
      "left" : "this.minimumArcAngleToDraw = DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW;",
      "right" : "this.minimumArcAngleToDraw = DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW;",
      "info" : "ExpressionStatement[20157-20220]:ExpressionStatement[20157-20220]"
    }, {
      "left" : "this.sectionPaintMap = new PaintMap();",
      "right" : "this.sectionPaintMap = new PaintMap();",
      "info" : "ExpressionStatement[20232-20270]:ExpressionStatement[20232-20270]"
    }, {
      "left" : "this.baseSectionPaint = Color.gray;",
      "right" : "this.baseSectionPaint = Color.gray;",
      "info" : "ExpressionStatement[20280-20315]:ExpressionStatement[20280-20315]"
    }, {
      "left" : "this.sectionOutlinesVisible = true;",
      "right" : "this.sectionOutlinesVisible = true;",
      "info" : "ExpressionStatement[20327-20362]:ExpressionStatement[20327-20362]"
    }, {
      "left" : "this.sectionOutlinePaintMap = new PaintMap();",
      "right" : "this.sectionOutlinePaintMap = new PaintMap();",
      "info" : "ExpressionStatement[20372-20417]:ExpressionStatement[20372-20417]"
    }, {
      "left" : "this.baseSectionOutlinePaint = DEFAULT_OUTLINE_PAINT;",
      "right" : "this.baseSectionOutlinePaint = DEFAULT_OUTLINE_PAINT;",
      "info" : "ExpressionStatement[20427-20480]:ExpressionStatement[20427-20480]"
    }, {
      "left" : "this.sectionOutlineStrokeMap = new StrokeMap();",
      "right" : "this.sectionOutlineStrokeMap = new StrokeMap();",
      "info" : "ExpressionStatement[20492-20539]:ExpressionStatement[20492-20539]"
    }, {
      "left" : "this.baseSectionOutlineStroke = DEFAULT_OUTLINE_STROKE;",
      "right" : "this.baseSectionOutlineStroke = DEFAULT_OUTLINE_STROKE;",
      "info" : "ExpressionStatement[20549-20604]:ExpressionStatement[20549-20604]"
    }, {
      "left" : "this.explodePercentages = new TreeMap();",
      "right" : "this.explodePercentages = new TreeMap();",
      "info" : "ExpressionStatement[20624-20664]:ExpressionStatement[20624-20664]"
    }, {
      "left" : "this.labelGenerator = new StandardPieSectionLabelGenerator();",
      "right" : "this.labelGenerator = new StandardPieSectionLabelGenerator();",
      "info" : "ExpressionStatement[20676-20737]:ExpressionStatement[20676-20737]"
    }, {
      "left" : "this.labelFont = DEFAULT_LABEL_FONT;",
      "right" : "this.labelFont = DEFAULT_LABEL_FONT;",
      "info" : "ExpressionStatement[20747-20783]:ExpressionStatement[20747-20783]"
    }, {
      "left" : "this.labelPaint = DEFAULT_LABEL_PAINT;",
      "right" : "this.labelPaint = DEFAULT_LABEL_PAINT;",
      "info" : "ExpressionStatement[20793-20831]:ExpressionStatement[20793-20831]"
    }, {
      "left" : "this.labelBackgroundPaint = DEFAULT_LABEL_BACKGROUND_PAINT;",
      "right" : "this.labelBackgroundPaint = DEFAULT_LABEL_BACKGROUND_PAINT;",
      "info" : "ExpressionStatement[20841-20900]:ExpressionStatement[20841-20900]"
    }, {
      "left" : "this.labelOutlinePaint = DEFAULT_LABEL_OUTLINE_PAINT;",
      "right" : "this.labelOutlinePaint = DEFAULT_LABEL_OUTLINE_PAINT;",
      "info" : "ExpressionStatement[20910-20963]:ExpressionStatement[20910-20963]"
    }, {
      "left" : "this.labelOutlineStroke = DEFAULT_LABEL_OUTLINE_STROKE;",
      "right" : "this.labelOutlineStroke = DEFAULT_LABEL_OUTLINE_STROKE;",
      "info" : "ExpressionStatement[20973-21028]:ExpressionStatement[20973-21028]"
    }, {
      "left" : "this.labelShadowPaint = DEFAULT_LABEL_SHADOW_PAINT;",
      "right" : "this.labelShadowPaint = DEFAULT_LABEL_SHADOW_PAINT;",
      "info" : "ExpressionStatement[21038-21089]:ExpressionStatement[21038-21089]"
    }, {
      "left" : "this.labelLinksVisible = true;",
      "right" : "this.labelLinksVisible = true;",
      "info" : "ExpressionStatement[21099-21129]:ExpressionStatement[21099-21129]"
    }, {
      "left" : "this.labelDistributor = new PieLabelDistributor(0);",
      "right" : "this.labelDistributor = new PieLabelDistributor(0);",
      "info" : "ExpressionStatement[21139-21190]:ExpressionStatement[21139-21190]"
    }, {
      "left" : "this.simpleLabels = false;",
      "right" : "this.simpleLabels = false;",
      "info" : "ExpressionStatement[21210-21236]:ExpressionStatement[21210-21236]"
    }, {
      "left" : "this.simpleLabelOffset = new RectangleInsets(UnitType.RELATIVE, 0.18, \r\n                0.18, 0.18, 0.18);",
      "right" : "this.simpleLabelOffset = new RectangleInsets(UnitType.RELATIVE, 0.18, \r\n                0.18, 0.18, 0.18);",
      "info" : "ExpressionStatement[21246-21352]:ExpressionStatement[21246-21352]"
    }, {
      "left" : "this.labelPadding = new RectangleInsets(2, 2, 2, 2);",
      "right" : "this.labelPadding = new RectangleInsets(2, 2, 2, 2);",
      "info" : "ExpressionStatement[21362-21414]:ExpressionStatement[21362-21414]"
    }, {
      "left" : "this.toolTipGenerator = null;",
      "right" : "this.toolTipGenerator = null;",
      "info" : "ExpressionStatement[21434-21463]:ExpressionStatement[21434-21463]"
    }, {
      "left" : "this.urlGenerator = null;",
      "right" : "this.urlGenerator = null;",
      "info" : "ExpressionStatement[21473-21498]:ExpressionStatement[21473-21498]"
    }, {
      "left" : "this.legendLabelGenerator = new StandardPieSectionLabelGenerator();",
      "right" : "this.legendLabelGenerator = new StandardPieSectionLabelGenerator();",
      "info" : "ExpressionStatement[21508-21575]:ExpressionStatement[21508-21575]"
    }, {
      "left" : "this.legendLabelToolTipGenerator = null;",
      "right" : "this.legendLabelToolTipGenerator = null;",
      "info" : "ExpressionStatement[21585-21625]:ExpressionStatement[21585-21625]"
    }, {
      "left" : "this.legendLabelURLGenerator = null;",
      "right" : "this.legendLabelURLGenerator = null;",
      "info" : "ExpressionStatement[21635-21671]:ExpressionStatement[21635-21671]"
    }, {
      "left" : "this.legendItemShape = Plot.DEFAULT_LEGEND_ITEM_CIRCLE;",
      "right" : "this.legendItemShape = Plot.DEFAULT_LEGEND_ITEM_CIRCLE;",
      "info" : "ExpressionStatement[21681-21736]:ExpressionStatement[21681-21736]"
    }, {
      "left" : "this.ignoreNullValues = false;",
      "right" : "this.ignoreNullValues = false;",
      "info" : "ExpressionStatement[21756-21786]:ExpressionStatement[21756-21786]"
    }, {
      "left" : "this.ignoreZeroValues = false;",
      "right" : "this.ignoreZeroValues = false;",
      "info" : "ExpressionStatement[21796-21826]:ExpressionStatement[21796-21826]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22000-22006]:Modifier[22000-22006]"
    }, {
      "left" : "PieDataset",
      "right" : "PieDataset",
      "info" : "SimpleType[22007-22017]:SimpleType[22007-22017]"
    }, {
      "left" : "getDataset",
      "right" : "getDataset",
      "info" : "SimpleName[22018-22028]:SimpleName[22018-22028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22031-22069]:Block[22031-22069]"
    }, {
      "left" : "return this.dataset;",
      "right" : "return this.dataset;",
      "info" : "ReturnStatement[22042-22062]:ReturnStatement[22042-22062]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22281-22287]:Modifier[22281-22287]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22288-22292]:PrimitiveType[22288-22292]"
    }, {
      "left" : "setDataset",
      "right" : "setDataset",
      "info" : "SimpleName[22293-22303]:SimpleName[22293-22303]"
    }, {
      "left" : "PieDataset dataset",
      "right" : "PieDataset dataset",
      "info" : "SingleVariableDeclaration[22304-22322]:SingleVariableDeclaration[22304-22322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22324-22996]:Block[22324-22996]"
    }, {
      "left" : "PieDataset existing = this.dataset;",
      "right" : "PieDataset existing = this.dataset;",
      "info" : "VariableDeclarationStatement[22446-22481]:VariableDeclarationStatement[22446-22481]"
    }, {
      "left" : "if (existing != null)",
      "right" : "if (existing != null)",
      "info" : "IfStatement[22491-22575]:IfStatement[22491-22575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22513-22575]:Block[22513-22575]"
    }, {
      "left" : "existing.removeChangeListener(this);",
      "right" : "existing.removeChangeListener(this);",
      "info" : "ExpressionStatement[22528-22564]:ExpressionStatement[22528-22564]"
    }, {
      "left" : "this.dataset = dataset;",
      "right" : "this.dataset = dataset;",
      "info" : "ExpressionStatement[22667-22690]:ExpressionStatement[22667-22690]"
    }, {
      "left" : "if (dataset != null)",
      "right" : "if (dataset != null)",
      "info" : "IfStatement[22700-22829]:IfStatement[22700-22829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22721-22829]:Block[22721-22829]"
    }, {
      "left" : "setDatasetGroup(dataset.getGroup());",
      "right" : "setDatasetGroup(dataset.getGroup());",
      "info" : "ExpressionStatement[22736-22772]:ExpressionStatement[22736-22772]"
    }, {
      "left" : "dataset.addChangeListener(this);",
      "right" : "dataset.addChangeListener(this);",
      "info" : "ExpressionStatement[22786-22818]:ExpressionStatement[22786-22818]"
    }, {
      "left" : "DatasetChangeEvent event = new DatasetChangeEvent(this, dataset);",
      "right" : "DatasetChangeEvent event = new DatasetChangeEvent(this, dataset);",
      "info" : "VariableDeclarationStatement[22892-22957]:VariableDeclarationStatement[22892-22957]"
    }, {
      "left" : "datasetChanged(event);",
      "right" : "datasetChanged(event);",
      "info" : "ExpressionStatement[22967-22989]:ExpressionStatement[22967-22989]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23215-23221]:Modifier[23215-23221]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[23222-23225]:PrimitiveType[23222-23225]"
    }, {
      "left" : "getPieIndex",
      "right" : "getPieIndex",
      "info" : "SimpleName[23226-23237]:SimpleName[23226-23237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23240-23279]:Block[23240-23279]"
    }, {
      "left" : "return this.pieIndex;",
      "right" : "return this.pieIndex;",
      "info" : "ReturnStatement[23251-23272]:ReturnStatement[23251-23272]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23495-23501]:Modifier[23495-23501]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23502-23506]:PrimitiveType[23502-23506]"
    }, {
      "left" : "setPieIndex",
      "right" : "setPieIndex",
      "info" : "SimpleName[23507-23518]:SimpleName[23507-23518]"
    }, {
      "left" : "int index",
      "right" : "int index",
      "info" : "SingleVariableDeclaration[23519-23528]:SingleVariableDeclaration[23519-23528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23530-23570]:Block[23530-23570]"
    }, {
      "left" : "this.pieIndex = index;",
      "right" : "this.pieIndex = index;",
      "info" : "ExpressionStatement[23541-23563]:ExpressionStatement[23541-23563]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23837-23843]:Modifier[23837-23843]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[23844-23850]:PrimitiveType[23844-23850]"
    }, {
      "left" : "getStartAngle",
      "right" : "getStartAngle",
      "info" : "SimpleName[23851-23864]:SimpleName[23851-23864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23867-23908]:Block[23867-23908]"
    }, {
      "left" : "return this.startAngle;",
      "right" : "return this.startAngle;",
      "info" : "ReturnStatement[23878-23901]:ReturnStatement[23878-23901]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24319-24325]:Modifier[24319-24325]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24326-24330]:PrimitiveType[24326-24330]"
    }, {
      "left" : "setStartAngle",
      "right" : "setStartAngle",
      "info" : "SimpleName[24331-24344]:SimpleName[24331-24344]"
    }, {
      "left" : "double angle",
      "right" : "double angle",
      "info" : "SingleVariableDeclaration[24345-24357]:SingleVariableDeclaration[24345-24357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24359-24454]:Block[24359-24454]"
    }, {
      "left" : "this.startAngle = angle;",
      "right" : "this.startAngle = angle;",
      "info" : "ExpressionStatement[24370-24394]:ExpressionStatement[24370-24394]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[24404-24447]:ExpressionStatement[24404-24447]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24697-24703]:Modifier[24697-24703]"
    }, {
      "left" : "Rotation",
      "right" : "Rotation",
      "info" : "SimpleType[24704-24712]:SimpleType[24704-24712]"
    }, {
      "left" : "getDirection",
      "right" : "getDirection",
      "info" : "SimpleName[24713-24725]:SimpleName[24713-24725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24728-24768]:Block[24728-24768]"
    }, {
      "left" : "return this.direction;",
      "right" : "return this.direction;",
      "info" : "ReturnStatement[24739-24761]:ReturnStatement[24739-24761]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25052-25058]:Modifier[25052-25058]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25059-25063]:PrimitiveType[25059-25063]"
    }, {
      "left" : "setDirection",
      "right" : "setDirection",
      "info" : "SimpleName[25064-25076]:SimpleName[25064-25076]"
    }, {
      "left" : "Rotation direction",
      "right" : "Rotation direction",
      "info" : "SingleVariableDeclaration[25077-25095]:SingleVariableDeclaration[25077-25095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25097-25321]:Block[25097-25321]"
    }, {
      "left" : "if (direction == null)",
      "right" : "if (direction == null)",
      "info" : "IfStatement[25108-25222]:IfStatement[25108-25222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25131-25222]:Block[25131-25222]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'direction' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'direction' argument.\");",
      "info" : "ThrowStatement[25146-25211]:ThrowStatement[25146-25211]"
    }, {
      "left" : "this.direction = direction;",
      "right" : "this.direction = direction;",
      "info" : "ExpressionStatement[25232-25259]:ExpressionStatement[25232-25259]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[25269-25312]:ExpressionStatement[25269-25312]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25575-25581]:Modifier[25575-25581]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[25582-25588]:PrimitiveType[25582-25588]"
    }, {
      "left" : "getInteriorGap",
      "right" : "getInteriorGap",
      "info" : "SimpleName[25589-25603]:SimpleName[25589-25603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25606-25648]:Block[25606-25648]"
    }, {
      "left" : "return this.interiorGap;",
      "right" : "return this.interiorGap;",
      "info" : "ReturnStatement[25617-25641]:ReturnStatement[25617-25641]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26056-26062]:Modifier[26056-26062]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26063-26067]:PrimitiveType[26063-26067]"
    }, {
      "left" : "setInteriorGap",
      "right" : "setInteriorGap",
      "info" : "SimpleName[26068-26082]:SimpleName[26068-26082]"
    }, {
      "left" : "double percent",
      "right" : "double percent",
      "info" : "SingleVariableDeclaration[26083-26097]:SingleVariableDeclaration[26083-26097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26099-26457]:Block[26099-26457]"
    }, {
      "left" : "if ((percent < 0.0) || (percent > MAX_INTERIOR_GAP))",
      "right" : "if ((percent < 0.0) || (percent > MAX_INTERIOR_GAP))",
      "info" : "IfStatement[26112-26293]:IfStatement[26112-26293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26165-26293]:Block[26165-26293]"
    }, {
      "left" : "throw new IllegalArgumentException(\r\n                \"Invalid 'percent' (\" + percent + \") argument.\");",
      "right" : "throw new IllegalArgumentException(\r\n                \"Invalid 'percent' (\" + percent + \") argument.\");",
      "info" : "ThrowStatement[26180-26282]:ThrowStatement[26180-26282]"
    }, {
      "left" : "if (this.interiorGap != percent)",
      "right" : "if (this.interiorGap != percent)",
      "info" : "IfStatement[26305-26448]:IfStatement[26305-26448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26338-26448]:Block[26338-26448]"
    }, {
      "left" : "this.interiorGap = percent;",
      "right" : "this.interiorGap = percent;",
      "info" : "ExpressionStatement[26353-26380]:ExpressionStatement[26353-26380]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[26394-26437]:ExpressionStatement[26394-26437]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26720-26726]:Modifier[26720-26726]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[26727-26734]:PrimitiveType[26727-26734]"
    }, {
      "left" : "isCircular",
      "right" : "isCircular",
      "info" : "SimpleName[26735-26745]:SimpleName[26735-26745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26748-26787]:Block[26748-26787]"
    }, {
      "left" : "return this.circular;",
      "right" : "return this.circular;",
      "info" : "ReturnStatement[26759-26780]:ReturnStatement[26759-26780]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27001-27007]:Modifier[27001-27007]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27008-27012]:PrimitiveType[27008-27012]"
    }, {
      "left" : "setCircular",
      "right" : "setCircular",
      "info" : "SimpleName[27013-27024]:SimpleName[27013-27024]"
    }, {
      "left" : "boolean flag",
      "right" : "boolean flag",
      "info" : "SingleVariableDeclaration[27025-27037]:SingleVariableDeclaration[27025-27037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27039-27081]:Block[27039-27081]"
    }, {
      "left" : "setCircular(flag, true);",
      "right" : "setCircular(flag, true);",
      "info" : "ExpressionStatement[27050-27074]:ExpressionStatement[27050-27074]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27369-27375]:Modifier[27369-27375]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27376-27380]:PrimitiveType[27376-27380]"
    }, {
      "left" : "setCircular",
      "right" : "setCircular",
      "info" : "SimpleName[27381-27392]:SimpleName[27381-27392]"
    }, {
      "left" : "boolean circular",
      "right" : "boolean circular",
      "info" : "SingleVariableDeclaration[27393-27409]:SingleVariableDeclaration[27393-27409]"
    }, {
      "left" : "boolean notify",
      "right" : "boolean notify",
      "info" : "SingleVariableDeclaration[27411-27425]:SingleVariableDeclaration[27411-27425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27427-27564]:Block[27427-27564]"
    }, {
      "left" : "this.circular = circular;",
      "right" : "this.circular = circular;",
      "info" : "ExpressionStatement[27438-27463]:ExpressionStatement[27438-27463]"
    }, {
      "left" : "if (notify)",
      "right" : "if (notify)",
      "info" : "IfStatement[27473-27557]:IfStatement[27473-27557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27485-27557]:Block[27485-27557]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[27500-27543]:ExpressionStatement[27500-27543]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27789-27795]:Modifier[27789-27795]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[27796-27803]:PrimitiveType[27796-27803]"
    }, {
      "left" : "getIgnoreNullValues",
      "right" : "getIgnoreNullValues",
      "info" : "SimpleName[27804-27823]:SimpleName[27804-27823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27826-27876]:Block[27826-27876]"
    }, {
      "left" : "return this.ignoreNullValues;",
      "right" : "return this.ignoreNullValues;",
      "info" : "ReturnStatement[27837-27866]:ReturnStatement[27837-27866]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28288-28294]:Modifier[28288-28294]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28295-28299]:PrimitiveType[28295-28299]"
    }, {
      "left" : "setIgnoreNullValues",
      "right" : "setIgnoreNullValues",
      "info" : "SimpleName[28300-28319]:SimpleName[28300-28319]"
    }, {
      "left" : "boolean flag",
      "right" : "boolean flag",
      "info" : "SingleVariableDeclaration[28320-28332]:SingleVariableDeclaration[28320-28332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28334-28434]:Block[28334-28434]"
    }, {
      "left" : "this.ignoreNullValues = flag;",
      "right" : "this.ignoreNullValues = flag;",
      "info" : "ExpressionStatement[28345-28374]:ExpressionStatement[28345-28374]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[28384-28427]:ExpressionStatement[28384-28427]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28650-28656]:Modifier[28650-28656]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[28657-28664]:PrimitiveType[28657-28664]"
    }, {
      "left" : "getIgnoreZeroValues",
      "right" : "getIgnoreZeroValues",
      "info" : "SimpleName[28665-28684]:SimpleName[28665-28684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28687-28737]:Block[28687-28737]"
    }, {
      "left" : "return this.ignoreZeroValues;",
      "right" : "return this.ignoreZeroValues;",
      "info" : "ReturnStatement[28698-28727]:ReturnStatement[28698-28727]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29136-29142]:Modifier[29136-29142]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29143-29147]:PrimitiveType[29143-29147]"
    }, {
      "left" : "setIgnoreZeroValues",
      "right" : "setIgnoreZeroValues",
      "info" : "SimpleName[29148-29167]:SimpleName[29148-29167]"
    }, {
      "left" : "boolean flag",
      "right" : "boolean flag",
      "info" : "SingleVariableDeclaration[29168-29180]:SingleVariableDeclaration[29168-29180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29182-29282]:Block[29182-29282]"
    }, {
      "left" : "this.ignoreZeroValues = flag;",
      "right" : "this.ignoreZeroValues = flag;",
      "info" : "ExpressionStatement[29193-29222]:ExpressionStatement[29193-29222]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[29232-29275]:ExpressionStatement[29232-29275]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[29729-29738]:Modifier[29729-29738]"
    }, {
      "left" : "Paint",
      "right" : "Paint",
      "info" : "SimpleType[29739-29744]:SimpleType[29739-29744]"
    }, {
      "left" : "lookupSectionPaint",
      "right" : "lookupSectionPaint",
      "info" : "SimpleName[29745-29763]:SimpleName[29745-29763]"
    }, {
      "left" : "Comparable key",
      "right" : "Comparable key",
      "info" : "SingleVariableDeclaration[29764-29778]:SingleVariableDeclaration[29764-29778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29780-29844]:Block[29780-29844]"
    }, {
      "left" : "return lookupSectionPaint(key, false);",
      "right" : "return lookupSectionPaint(key, false);",
      "info" : "ReturnStatement[29791-29829]:ReturnStatement[29791-29829]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[30701-30710]:Modifier[30701-30710]"
    }, {
      "left" : "Paint",
      "right" : "Paint",
      "info" : "SimpleType[30711-30716]:SimpleType[30711-30716]"
    }, {
      "left" : "lookupSectionPaint",
      "right" : "lookupSectionPaint",
      "info" : "SimpleName[30717-30735]:SimpleName[30717-30735]"
    }, {
      "left" : "Comparable key",
      "right" : "Comparable key",
      "info" : "SingleVariableDeclaration[30736-30750]:SingleVariableDeclaration[30736-30750]"
    }, {
      "left" : "boolean autoPopulate",
      "right" : "boolean autoPopulate",
      "info" : "SingleVariableDeclaration[30752-30772]:SingleVariableDeclaration[30752-30772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30774-31482]:Block[30774-31482]"
    }, {
      "left" : "Paint result = null;",
      "right" : "Paint result = null;",
      "info" : "VariableDeclarationStatement[30785-30805]:VariableDeclarationStatement[30785-30805]"
    }, {
      "left" : "result = this.sectionPaintMap.getPaint(key);",
      "right" : "result = this.sectionPaintMap.getPaint(key);",
      "info" : "ExpressionStatement[30878-30922]:ExpressionStatement[30878-30922]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[30932-30992]:IfStatement[30932-30992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30952-30992]:Block[30952-30992]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[30967-30981]:ReturnStatement[30967-30981]"
    }, {
      "left" : "if (autoPopulate)",
      "right" : "if (autoPopulate)",
      "info" : "IfStatement[31062-31451]:IfStatement[31062-31451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31080-31379]:Block[31080-31379]"
    }, {
      "left" : "DrawingSupplier ds = getDrawingSupplier();",
      "right" : "DrawingSupplier ds = getDrawingSupplier();",
      "info" : "VariableDeclarationStatement[31095-31137]:VariableDeclarationStatement[31095-31137]"
    }, {
      "left" : "if (ds != null)",
      "right" : "if (ds != null)",
      "info" : "IfStatement[31151-31368]:IfStatement[31151-31368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31167-31284]:Block[31167-31284]"
    }, {
      "left" : "result = ds.getNextPaint();",
      "right" : "result = ds.getNextPaint();",
      "info" : "ExpressionStatement[31186-31213]:ExpressionStatement[31186-31213]"
    }, {
      "left" : "this.sectionPaintMap.put(key, result);",
      "right" : "this.sectionPaintMap.put(key, result);",
      "info" : "ExpressionStatement[31231-31269]:ExpressionStatement[31231-31269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31303-31368]:Block[31303-31368]"
    }, {
      "left" : "result = this.baseSectionPaint;",
      "right" : "result = this.baseSectionPaint;",
      "info" : "ExpressionStatement[31322-31353]:ExpressionStatement[31322-31353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31394-31451]:Block[31394-31451]"
    }, {
      "left" : "result = this.baseSectionPaint;",
      "right" : "result = this.baseSectionPaint;",
      "info" : "ExpressionStatement[31409-31440]:ExpressionStatement[31409-31440]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[31461-31475]:ReturnStatement[31461-31475]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[32069-32078]:Modifier[32069-32078]"
    }, {
      "left" : "Comparable",
      "right" : "Comparable",
      "info" : "SimpleType[32079-32089]:SimpleType[32079-32089]"
    }, {
      "left" : "getSectionKey",
      "right" : "getSectionKey",
      "info" : "SimpleName[32090-32103]:SimpleName[32090-32103]"
    }, {
      "left" : "int section",
      "right" : "int section",
      "info" : "SingleVariableDeclaration[32104-32115]:SingleVariableDeclaration[32104-32115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32117-32448]:Block[32117-32448]"
    }, {
      "left" : "Comparable key = null;",
      "right" : "Comparable key = null;",
      "info" : "VariableDeclarationStatement[32128-32150]:VariableDeclarationStatement[32128-32150]"
    }, {
      "left" : "if (this.dataset != null)",
      "right" : "if (this.dataset != null)",
      "info" : "IfStatement[32160-32340]:IfStatement[32160-32340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32186-32340]:Block[32186-32340]"
    }, {
      "left" : "if (section >= 0 && section < this.dataset.getItemCount())",
      "right" : "if (section >= 0 && section < this.dataset.getItemCount())",
      "info" : "IfStatement[32201-32329]:IfStatement[32201-32329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32260-32329]:Block[32260-32329]"
    }, {
      "left" : "key = this.dataset.getKey(section);",
      "right" : "key = this.dataset.getKey(section);",
      "info" : "ExpressionStatement[32279-32314]:ExpressionStatement[32279-32314]"
    }, {
      "left" : "if (key == null)",
      "right" : "if (key == null)",
      "info" : "IfStatement[32350-32420]:IfStatement[32350-32420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32367-32420]:Block[32367-32420]"
    }, {
      "left" : "key = new Integer(section);",
      "right" : "key = new Integer(section);",
      "info" : "ExpressionStatement[32382-32409]:ExpressionStatement[32382-32409]"
    }, {
      "left" : "return key;",
      "right" : "return key;",
      "info" : "ReturnStatement[32430-32441]:ReturnStatement[32430-32441]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32989-32995]:Modifier[32989-32995]"
    }, {
      "left" : "Paint",
      "right" : "Paint",
      "info" : "SimpleType[32996-33001]:SimpleType[32996-33001]"
    }, {
      "left" : "getSectionPaint",
      "right" : "getSectionPaint",
      "info" : "SimpleName[33002-33017]:SimpleName[33002-33017]"
    }, {
      "left" : "Comparable key",
      "right" : "Comparable key",
      "info" : "SingleVariableDeclaration[33018-33032]:SingleVariableDeclaration[33018-33032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33034-33139]:Block[33034-33139]"
    }, {
      "left" : "return this.sectionPaintMap.getPaint(key);",
      "right" : "return this.sectionPaintMap.getPaint(key);",
      "info" : "ReturnStatement[33090-33132]:ReturnStatement[33090-33132]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33596-33602]:Modifier[33596-33602]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[33603-33607]:PrimitiveType[33603-33607]"
    }, {
      "left" : "setSectionPaint",
      "right" : "setSectionPaint",
      "info" : "SimpleName[33608-33623]:SimpleName[33608-33623]"
    }, {
      "left" : "Comparable key",
      "right" : "Comparable key",
      "info" : "SingleVariableDeclaration[33624-33638]:SingleVariableDeclaration[33624-33638]"
    }, {
      "left" : "Paint paint",
      "right" : "Paint paint",
      "info" : "SingleVariableDeclaration[33640-33651]:SingleVariableDeclaration[33640-33651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33653-33806]:Block[33653-33806]"
    }, {
      "left" : "this.sectionPaintMap.put(key, paint);",
      "right" : "this.sectionPaintMap.put(key, paint);",
      "info" : "ExpressionStatement[33709-33746]:ExpressionStatement[33709-33746]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[33756-33799]:ExpressionStatement[33756-33799]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34105-34111]:Modifier[34105-34111]"
    }, {
      "left" : "Paint",
      "right" : "Paint",
      "info" : "SimpleType[34112-34117]:SimpleType[34112-34117]"
    }, {
      "left" : "getBaseSectionPaint",
      "right" : "getBaseSectionPaint",
      "info" : "SimpleName[34118-34137]:SimpleName[34118-34137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34140-34190]:Block[34140-34190]"
    }, {
      "left" : "return this.baseSectionPaint;",
      "right" : "return this.baseSectionPaint;",
      "info" : "ReturnStatement[34151-34180]:ReturnStatement[34151-34180]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34450-34456]:Modifier[34450-34456]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34457-34461]:PrimitiveType[34457-34461]"
    }, {
      "left" : "setBaseSectionPaint",
      "right" : "setBaseSectionPaint",
      "info" : "SimpleName[34462-34481]:SimpleName[34462-34481]"
    }, {
      "left" : "Paint paint",
      "right" : "Paint paint",
      "info" : "SingleVariableDeclaration[34482-34493]:SingleVariableDeclaration[34482-34493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34495-34715]:Block[34495-34715]"
    }, {
      "left" : "if (paint == null)",
      "right" : "if (paint == null)",
      "info" : "IfStatement[34506-34615]:IfStatement[34506-34615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34525-34615]:Block[34525-34615]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'paint' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'paint' argument.\");",
      "info" : "ThrowStatement[34540-34601]:ThrowStatement[34540-34601]"
    }, {
      "left" : "this.baseSectionPaint = paint;",
      "right" : "this.baseSectionPaint = paint;",
      "info" : "ExpressionStatement[34625-34655]:ExpressionStatement[34625-34655]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[34665-34708]:ExpressionStatement[34665-34708]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35121-35127]:Modifier[35121-35127]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[35128-35135]:PrimitiveType[35128-35135]"
    }, {
      "left" : "getSectionOutlinesVisible",
      "right" : "getSectionOutlinesVisible",
      "info" : "SimpleName[35136-35161]:SimpleName[35136-35161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35164-35217]:Block[35164-35217]"
    }, {
      "left" : "return this.sectionOutlinesVisible;",
      "right" : "return this.sectionOutlinesVisible;",
      "info" : "ReturnStatement[35175-35210]:ReturnStatement[35175-35210]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35517-35523]:Modifier[35517-35523]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[35524-35528]:PrimitiveType[35524-35528]"
    }, {
      "left" : "setSectionOutlinesVisible",
      "right" : "setSectionOutlinesVisible",
      "info" : "SimpleName[35529-35554]:SimpleName[35529-35554]"
    }, {
      "left" : "boolean visible",
      "right" : "boolean visible",
      "info" : "SingleVariableDeclaration[35555-35570]:SingleVariableDeclaration[35555-35570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35572-35681]:Block[35572-35681]"
    }, {
      "left" : "this.sectionOutlinesVisible = visible;",
      "right" : "this.sectionOutlinesVisible = visible;",
      "info" : "ExpressionStatement[35583-35621]:ExpressionStatement[35583-35621]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[35631-35674]:ExpressionStatement[35631-35674]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[36057-36066]:Modifier[36057-36066]"
    }, {
      "left" : "Paint",
      "right" : "Paint",
      "info" : "SimpleType[36067-36072]:SimpleType[36067-36072]"
    }, {
      "left" : "lookupSectionOutlinePaint",
      "right" : "lookupSectionOutlinePaint",
      "info" : "SimpleName[36073-36098]:SimpleName[36073-36098]"
    }, {
      "left" : "Comparable key",
      "right" : "Comparable key",
      "info" : "SingleVariableDeclaration[36099-36113]:SingleVariableDeclaration[36099-36113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36115-36186]:Block[36115-36186]"
    }, {
      "left" : "return lookupSectionOutlinePaint(key, false);",
      "right" : "return lookupSectionOutlinePaint(key, false);",
      "info" : "ReturnStatement[36126-36171]:ReturnStatement[36126-36171]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[37090-37099]:Modifier[37090-37099]"
    }, {
      "left" : "Paint",
      "right" : "Paint",
      "info" : "SimpleType[37100-37105]:SimpleType[37100-37105]"
    }, {
      "left" : "lookupSectionOutlinePaint",
      "right" : "lookupSectionOutlinePaint",
      "info" : "SimpleName[37106-37131]:SimpleName[37106-37131]"
    }, {
      "left" : "Comparable key",
      "right" : "Comparable key",
      "info" : "SingleVariableDeclaration[37132-37146]:SingleVariableDeclaration[37132-37146]"
    }, {
      "left" : "boolean autoPopulate",
      "right" : "boolean autoPopulate",
      "info" : "SingleVariableDeclaration[37162-37182]:SingleVariableDeclaration[37162-37182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37184-37937]:Block[37184-37937]"
    }, {
      "left" : "Paint result = null;",
      "right" : "Paint result = null;",
      "info" : "VariableDeclarationStatement[37205-37225]:VariableDeclarationStatement[37205-37225]"
    }, {
      "left" : "result = this.sectionOutlinePaintMap.getPaint(key);",
      "right" : "result = this.sectionOutlinePaintMap.getPaint(key);",
      "info" : "ExpressionStatement[37298-37349]:ExpressionStatement[37298-37349]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[37359-37419]:IfStatement[37359-37419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37379-37419]:Block[37379-37419]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[37394-37408]:ReturnStatement[37394-37408]"
    }, {
      "left" : "if (autoPopulate)",
      "right" : "if (autoPopulate)",
      "info" : "IfStatement[37489-37906]:IfStatement[37489-37906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37507-37827]:Block[37507-37827]"
    }, {
      "left" : "DrawingSupplier ds = getDrawingSupplier();",
      "right" : "DrawingSupplier ds = getDrawingSupplier();",
      "info" : "VariableDeclarationStatement[37522-37564]:VariableDeclarationStatement[37522-37564]"
    }, {
      "left" : "if (ds != null)",
      "right" : "if (ds != null)",
      "info" : "IfStatement[37578-37816]:IfStatement[37578-37816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37594-37725]:Block[37594-37725]"
    }, {
      "left" : "result = ds.getNextOutlinePaint();",
      "right" : "result = ds.getNextOutlinePaint();",
      "info" : "ExpressionStatement[37613-37647]:ExpressionStatement[37613-37647]"
    }, {
      "left" : "this.sectionOutlinePaintMap.put(key, result);",
      "right" : "this.sectionOutlinePaintMap.put(key, result);",
      "info" : "ExpressionStatement[37665-37710]:ExpressionStatement[37665-37710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37744-37816]:Block[37744-37816]"
    }, {
      "left" : "result = this.baseSectionOutlinePaint;",
      "right" : "result = this.baseSectionOutlinePaint;",
      "info" : "ExpressionStatement[37763-37801]:ExpressionStatement[37763-37801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37842-37906]:Block[37842-37906]"
    }, {
      "left" : "result = this.baseSectionOutlinePaint;",
      "right" : "result = this.baseSectionOutlinePaint;",
      "info" : "ExpressionStatement[37857-37895]:ExpressionStatement[37857-37895]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[37916-37930]:ReturnStatement[37916-37930]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38489-38495]:Modifier[38489-38495]"
    }, {
      "left" : "Paint",
      "right" : "Paint",
      "info" : "SimpleType[38496-38501]:SimpleType[38496-38501]"
    }, {
      "left" : "getSectionOutlinePaint",
      "right" : "getSectionOutlinePaint",
      "info" : "SimpleName[38502-38524]:SimpleName[38502-38524]"
    }, {
      "left" : "Comparable key",
      "right" : "Comparable key",
      "info" : "SingleVariableDeclaration[38525-38539]:SingleVariableDeclaration[38525-38539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38541-38653]:Block[38541-38653]"
    }, {
      "left" : "return this.sectionOutlinePaintMap.getPaint(key);",
      "right" : "return this.sectionOutlinePaintMap.getPaint(key);",
      "info" : "ReturnStatement[38597-38646]:ReturnStatement[38597-38646]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39125-39131]:Modifier[39125-39131]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[39132-39136]:PrimitiveType[39132-39136]"
    }, {
      "left" : "setSectionOutlinePaint",
      "right" : "setSectionOutlinePaint",
      "info" : "SimpleName[39137-39159]:SimpleName[39137-39159]"
    }, {
      "left" : "Comparable key",
      "right" : "Comparable key",
      "info" : "SingleVariableDeclaration[39160-39174]:SingleVariableDeclaration[39160-39174]"
    }, {
      "left" : "Paint paint",
      "right" : "Paint paint",
      "info" : "SingleVariableDeclaration[39176-39187]:SingleVariableDeclaration[39176-39187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39189-39349]:Block[39189-39349]"
    }, {
      "left" : "this.sectionOutlinePaintMap.put(key, paint);",
      "right" : "this.sectionOutlinePaintMap.put(key, paint);",
      "info" : "ExpressionStatement[39245-39289]:ExpressionStatement[39245-39289]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[39299-39342]:ExpressionStatement[39299-39342]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39595-39601]:Modifier[39595-39601]"
    }, {
      "left" : "Paint",
      "right" : "Paint",
      "info" : "SimpleType[39602-39607]:SimpleType[39602-39607]"
    }, {
      "left" : "getBaseSectionOutlinePaint",
      "right" : "getBaseSectionOutlinePaint",
      "info" : "SimpleName[39608-39634]:SimpleName[39608-39634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39637-39694]:Block[39637-39694]"
    }, {
      "left" : "return this.baseSectionOutlinePaint;",
      "right" : "return this.baseSectionOutlinePaint;",
      "info" : "ReturnStatement[39648-39684]:ReturnStatement[39648-39684]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39889-39895]:Modifier[39889-39895]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[39896-39900]:PrimitiveType[39896-39900]"
    }, {
      "left" : "setBaseSectionOutlinePaint",
      "right" : "setBaseSectionOutlinePaint",
      "info" : "SimpleName[39901-39927]:SimpleName[39901-39927]"
    }, {
      "left" : "Paint paint",
      "right" : "Paint paint",
      "info" : "SingleVariableDeclaration[39928-39939]:SingleVariableDeclaration[39928-39939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39941-40168]:Block[39941-40168]"
    }, {
      "left" : "if (paint == null)",
      "right" : "if (paint == null)",
      "info" : "IfStatement[39952-40061]:IfStatement[39952-40061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39971-40061]:Block[39971-40061]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'paint' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'paint' argument.\");",
      "info" : "ThrowStatement[39986-40047]:ThrowStatement[39986-40047]"
    }, {
      "left" : "this.baseSectionOutlinePaint = paint;",
      "right" : "this.baseSectionOutlinePaint = paint;",
      "info" : "ExpressionStatement[40071-40108]:ExpressionStatement[40071-40108]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[40118-40161]:ExpressionStatement[40118-40161]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[40642-40651]:Modifier[40642-40651]"
    }, {
      "left" : "Stroke",
      "right" : "Stroke",
      "info" : "SimpleType[40652-40658]:SimpleType[40652-40658]"
    }, {
      "left" : "lookupSectionOutlineStroke",
      "right" : "lookupSectionOutlineStroke",
      "info" : "SimpleName[40659-40685]:SimpleName[40659-40685]"
    }, {
      "left" : "Comparable key",
      "right" : "Comparable key",
      "info" : "SingleVariableDeclaration[40686-40700]:SingleVariableDeclaration[40686-40700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40702-40774]:Block[40702-40774]"
    }, {
      "left" : "return lookupSectionOutlineStroke(key, false);",
      "right" : "return lookupSectionOutlineStroke(key, false);",
      "info" : "ReturnStatement[40713-40759]:ReturnStatement[40713-40759]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[41685-41694]:Modifier[41685-41694]"
    }, {
      "left" : "Stroke",
      "right" : "Stroke",
      "info" : "SimpleType[41695-41701]:SimpleType[41695-41701]"
    }, {
      "left" : "lookupSectionOutlineStroke",
      "right" : "lookupSectionOutlineStroke",
      "info" : "SimpleName[41702-41728]:SimpleName[41702-41728]"
    }, {
      "left" : "Comparable key",
      "right" : "Comparable key",
      "info" : "SingleVariableDeclaration[41729-41743]:SingleVariableDeclaration[41729-41743]"
    }, {
      "left" : "boolean autoPopulate",
      "right" : "boolean autoPopulate",
      "info" : "SingleVariableDeclaration[41759-41779]:SingleVariableDeclaration[41759-41779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41781-42542]:Block[41781-42542]"
    }, {
      "left" : "Stroke result = null;",
      "right" : "Stroke result = null;",
      "info" : "VariableDeclarationStatement[41802-41823]:VariableDeclarationStatement[41802-41823]"
    }, {
      "left" : "result = this.sectionOutlineStrokeMap.getStroke(key);",
      "right" : "result = this.sectionOutlineStrokeMap.getStroke(key);",
      "info" : "ExpressionStatement[41897-41950]:ExpressionStatement[41897-41950]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[41960-42020]:IfStatement[41960-42020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41980-42020]:Block[41980-42020]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[41995-42009]:ReturnStatement[41995-42009]"
    }, {
      "left" : "if (autoPopulate)",
      "right" : "if (autoPopulate)",
      "info" : "IfStatement[42090-42511]:IfStatement[42090-42511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42108-42431]:Block[42108-42431]"
    }, {
      "left" : "DrawingSupplier ds = getDrawingSupplier();",
      "right" : "DrawingSupplier ds = getDrawingSupplier();",
      "info" : "VariableDeclarationStatement[42123-42165]:VariableDeclarationStatement[42123-42165]"
    }, {
      "left" : "if (ds != null)",
      "right" : "if (ds != null)",
      "info" : "IfStatement[42179-42420]:IfStatement[42179-42420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42195-42328]:Block[42195-42328]"
    }, {
      "left" : "result = ds.getNextOutlineStroke();",
      "right" : "result = ds.getNextOutlineStroke();",
      "info" : "ExpressionStatement[42214-42249]:ExpressionStatement[42214-42249]"
    }, {
      "left" : "this.sectionOutlineStrokeMap.put(key, result);",
      "right" : "this.sectionOutlineStrokeMap.put(key, result);",
      "info" : "ExpressionStatement[42267-42313]:ExpressionStatement[42267-42313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42347-42420]:Block[42347-42420]"
    }, {
      "left" : "result = this.baseSectionOutlineStroke;",
      "right" : "result = this.baseSectionOutlineStroke;",
      "info" : "ExpressionStatement[42366-42405]:ExpressionStatement[42366-42405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42446-42511]:Block[42446-42511]"
    }, {
      "left" : "result = this.baseSectionOutlineStroke;",
      "right" : "result = this.baseSectionOutlineStroke;",
      "info" : "ExpressionStatement[42461-42500]:ExpressionStatement[42461-42500]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[42521-42535]:ReturnStatement[42521-42535]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43103-43109]:Modifier[43103-43109]"
    }, {
      "left" : "Stroke",
      "right" : "Stroke",
      "info" : "SimpleType[43110-43116]:SimpleType[43110-43116]"
    }, {
      "left" : "getSectionOutlineStroke",
      "right" : "getSectionOutlineStroke",
      "info" : "SimpleName[43117-43140]:SimpleName[43117-43140]"
    }, {
      "left" : "Comparable key",
      "right" : "Comparable key",
      "info" : "SingleVariableDeclaration[43141-43155]:SingleVariableDeclaration[43141-43155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43157-43271]:Block[43157-43271]"
    }, {
      "left" : "return this.sectionOutlineStrokeMap.getStroke(key);",
      "right" : "return this.sectionOutlineStrokeMap.getStroke(key);",
      "info" : "ReturnStatement[43213-43264]:ReturnStatement[43213-43264]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43747-43753]:Modifier[43747-43753]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[43754-43758]:PrimitiveType[43754-43758]"
    }, {
      "left" : "setSectionOutlineStroke",
      "right" : "setSectionOutlineStroke",
      "info" : "SimpleName[43759-43782]:SimpleName[43759-43782]"
    }, {
      "left" : "Comparable key",
      "right" : "Comparable key",
      "info" : "SingleVariableDeclaration[43783-43797]:SingleVariableDeclaration[43783-43797]"
    }, {
      "left" : "Stroke stroke",
      "right" : "Stroke stroke",
      "info" : "SingleVariableDeclaration[43799-43812]:SingleVariableDeclaration[43799-43812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43814-43976]:Block[43814-43976]"
    }, {
      "left" : "this.sectionOutlineStrokeMap.put(key, stroke);",
      "right" : "this.sectionOutlineStrokeMap.put(key, stroke);",
      "info" : "ExpressionStatement[43870-43916]:ExpressionStatement[43870-43916]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[43926-43969]:ExpressionStatement[43926-43969]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[44227-44233]:Modifier[44227-44233]"
    }, {
      "left" : "Stroke",
      "right" : "Stroke",
      "info" : "SimpleType[44234-44240]:SimpleType[44234-44240]"
    }, {
      "left" : "getBaseSectionOutlineStroke",
      "right" : "getBaseSectionOutlineStroke",
      "info" : "SimpleName[44241-44268]:SimpleName[44241-44268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44271-44329]:Block[44271-44329]"
    }, {
      "left" : "return this.baseSectionOutlineStroke;",
      "right" : "return this.baseSectionOutlineStroke;",
      "info" : "ReturnStatement[44282-44319]:ReturnStatement[44282-44319]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[44528-44534]:Modifier[44528-44534]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[44535-44539]:PrimitiveType[44535-44539]"
    }, {
      "left" : "setBaseSectionOutlineStroke",
      "right" : "setBaseSectionOutlineStroke",
      "info" : "SimpleName[44540-44567]:SimpleName[44540-44567]"
    }, {
      "left" : "Stroke stroke",
      "right" : "Stroke stroke",
      "info" : "SingleVariableDeclaration[44568-44581]:SingleVariableDeclaration[44568-44581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44583-44814]:Block[44583-44814]"
    }, {
      "left" : "if (stroke == null)",
      "right" : "if (stroke == null)",
      "info" : "IfStatement[44594-44705]:IfStatement[44594-44705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44614-44705]:Block[44614-44705]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'stroke' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'stroke' argument.\");",
      "info" : "ThrowStatement[44629-44691]:ThrowStatement[44629-44691]"
    }, {
      "left" : "this.baseSectionOutlineStroke = stroke;",
      "right" : "this.baseSectionOutlineStroke = stroke;",
      "info" : "ExpressionStatement[44715-44754]:ExpressionStatement[44715-44754]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[44764-44807]:ExpressionStatement[44764-44807]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[44984-44990]:Modifier[44984-44990]"
    }, {
      "left" : "Paint",
      "right" : "Paint",
      "info" : "SimpleType[44991-44996]:SimpleType[44991-44996]"
    }, {
      "left" : "getShadowPaint",
      "right" : "getShadowPaint",
      "info" : "SimpleName[44997-45011]:SimpleName[44997-45011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45014-45059]:Block[45014-45059]"
    }, {
      "left" : "return this.shadowPaint;",
      "right" : "return this.shadowPaint;",
      "info" : "ReturnStatement[45025-45049]:ReturnStatement[45025-45049]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45305-45311]:Modifier[45305-45311]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[45312-45316]:PrimitiveType[45312-45316]"
    }, {
      "left" : "setShadowPaint",
      "right" : "setShadowPaint",
      "info" : "SimpleName[45317-45331]:SimpleName[45317-45331]"
    }, {
      "left" : "Paint paint",
      "right" : "Paint paint",
      "info" : "SingleVariableDeclaration[45332-45343]:SingleVariableDeclaration[45332-45343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45345-45441]:Block[45345-45441]"
    }, {
      "left" : "this.shadowPaint = paint;",
      "right" : "this.shadowPaint = paint;",
      "info" : "ExpressionStatement[45356-45381]:ExpressionStatement[45356-45381]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[45391-45434]:ExpressionStatement[45391-45434]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45626-45632]:Modifier[45626-45632]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[45633-45639]:PrimitiveType[45633-45639]"
    }, {
      "left" : "getShadowXOffset",
      "right" : "getShadowXOffset",
      "info" : "SimpleName[45640-45656]:SimpleName[45640-45656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45659-45703]:Block[45659-45703]"
    }, {
      "left" : "return this.shadowXOffset;",
      "right" : "return this.shadowXOffset;",
      "info" : "ReturnStatement[45670-45696]:ReturnStatement[45670-45696]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45959-45965]:Modifier[45959-45965]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[45966-45970]:PrimitiveType[45966-45970]"
    }, {
      "left" : "setShadowXOffset",
      "right" : "setShadowXOffset",
      "info" : "SimpleName[45971-45987]:SimpleName[45971-45987]"
    }, {
      "left" : "double offset",
      "right" : "double offset",
      "info" : "SingleVariableDeclaration[45988-46001]:SingleVariableDeclaration[45988-46001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46003-46105]:Block[46003-46105]"
    }, {
      "left" : "this.shadowXOffset = offset;",
      "right" : "this.shadowXOffset = offset;",
      "info" : "ExpressionStatement[46014-46042]:ExpressionStatement[46014-46042]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[46055-46098]:ExpressionStatement[46055-46098]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[46290-46296]:Modifier[46290-46296]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[46297-46303]:PrimitiveType[46297-46303]"
    }, {
      "left" : "getShadowYOffset",
      "right" : "getShadowYOffset",
      "info" : "SimpleName[46304-46320]:SimpleName[46304-46320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46323-46367]:Block[46323-46367]"
    }, {
      "left" : "return this.shadowYOffset;",
      "right" : "return this.shadowYOffset;",
      "info" : "ReturnStatement[46334-46360]:ReturnStatement[46334-46360]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[46623-46629]:Modifier[46623-46629]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[46630-46634]:PrimitiveType[46630-46634]"
    }, {
      "left" : "setShadowYOffset",
      "right" : "setShadowYOffset",
      "info" : "SimpleName[46635-46651]:SimpleName[46635-46651]"
    }, {
      "left" : "double offset",
      "right" : "double offset",
      "info" : "SingleVariableDeclaration[46652-46665]:SingleVariableDeclaration[46652-46665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46667-46769]:Block[46667-46769]"
    }, {
      "left" : "this.shadowYOffset = offset;",
      "right" : "this.shadowYOffset = offset;",
      "info" : "ExpressionStatement[46678-46706]:ExpressionStatement[46678-46706]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[46719-46762]:ExpressionStatement[46719-46762]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[47269-47275]:Modifier[47269-47275]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[47276-47282]:PrimitiveType[47276-47282]"
    }, {
      "left" : "getExplodePercent",
      "right" : "getExplodePercent",
      "info" : "SimpleName[47283-47300]:SimpleName[47283-47300]"
    }, {
      "left" : "Comparable key",
      "right" : "Comparable key",
      "info" : "SingleVariableDeclaration[47301-47315]:SingleVariableDeclaration[47301-47315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47317-47611]:Block[47317-47611]"
    }, {
      "left" : "double result = 0.0;",
      "right" : "double result = 0.0;",
      "info" : "VariableDeclarationStatement[47328-47348]:VariableDeclarationStatement[47328-47348]"
    }, {
      "left" : "if (this.explodePercentages != null)",
      "right" : "if (this.explodePercentages != null)",
      "info" : "IfStatement[47358-47580]:IfStatement[47358-47580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47395-47580]:Block[47395-47580]"
    }, {
      "left" : "Number percent = (Number) this.explodePercentages.get(key);",
      "right" : "Number percent = (Number) this.explodePercentages.get(key);",
      "info" : "VariableDeclarationStatement[47410-47469]:VariableDeclarationStatement[47410-47469]"
    }, {
      "left" : "if (percent != null)",
      "right" : "if (percent != null)",
      "info" : "IfStatement[47483-47569]:IfStatement[47483-47569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47504-47569]:Block[47504-47569]"
    }, {
      "left" : "result = percent.doubleValue();",
      "right" : "result = percent.doubleValue();",
      "info" : "ExpressionStatement[47523-47554]:ExpressionStatement[47523-47554]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[47590-47604]:ReturnStatement[47590-47604]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[48007-48013]:Modifier[48007-48013]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[48014-48018]:PrimitiveType[48014-48018]"
    }, {
      "left" : "setExplodePercent",
      "right" : "setExplodePercent",
      "info" : "SimpleName[48019-48036]:SimpleName[48019-48036]"
    }, {
      "left" : "Comparable key",
      "right" : "Comparable key",
      "info" : "SingleVariableDeclaration[48037-48051]:SingleVariableDeclaration[48037-48051]"
    }, {
      "left" : "double percent",
      "right" : "double percent",
      "info" : "SingleVariableDeclaration[48053-48067]:SingleVariableDeclaration[48053-48067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48069-48420]:Block[48069-48420]"
    }, {
      "left" : "if (key == null)",
      "right" : "if (key == null)",
      "info" : "IfStatement[48080-48183]:IfStatement[48080-48183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48097-48183]:Block[48097-48183]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'key' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'key' argument.\");",
      "info" : "ThrowStatement[48113-48172]:ThrowStatement[48113-48172]"
    }, {
      "left" : "if (this.explodePercentages == null)",
      "right" : "if (this.explodePercentages == null)",
      "info" : "IfStatement[48193-48296]:IfStatement[48193-48296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48230-48296]:Block[48230-48296]"
    }, {
      "left" : "this.explodePercentages = new TreeMap();",
      "right" : "this.explodePercentages = new TreeMap();",
      "info" : "ExpressionStatement[48245-48285]:ExpressionStatement[48245-48285]"
    }, {
      "left" : "this.explodePercentages.put(key, new Double(percent));",
      "right" : "this.explodePercentages.put(key, new Double(percent));",
      "info" : "ExpressionStatement[48306-48360]:ExpressionStatement[48306-48360]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[48370-48413]:ExpressionStatement[48370-48413]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[48533-48539]:Modifier[48533-48539]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[48540-48546]:PrimitiveType[48540-48546]"
    }, {
      "left" : "getMaximumExplodePercent",
      "right" : "getMaximumExplodePercent",
      "info" : "SimpleName[48547-48571]:SimpleName[48547-48571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48574-49003]:Block[48574-49076]"
    }, {
      "left" : "double result = 0.0;",
      "right" : "double result = 0.0;",
      "info" : "VariableDeclarationStatement[48585-48605]:VariableDeclarationStatement[48658-48678]"
    }, {
      "left" : "Iterator iterator = this.dataset.getKeys().iterator();",
      "right" : "Iterator iterator = this.dataset.getKeys().iterator();",
      "info" : "VariableDeclarationStatement[48615-48669]:VariableDeclarationStatement[48688-48742]"
    }, {
      "left" : "while (iterator.hasNext())",
      "right" : "while (iterator.hasNext())",
      "info" : "WhileStatement[48679-48972]:WhileStatement[48752-49045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48706-48972]:Block[48779-49045]"
    }, {
      "left" : "Comparable key = (Comparable) iterator.next();",
      "right" : "Comparable key = (Comparable) iterator.next();",
      "info" : "VariableDeclarationStatement[48721-48767]:VariableDeclarationStatement[48794-48840]"
    }, {
      "left" : "Number explode = (Number) this.explodePercentages.get(key);",
      "right" : "Number explode = (Number) this.explodePercentages.get(key);",
      "info" : "VariableDeclarationStatement[48781-48840]:VariableDeclarationStatement[48854-48913]"
    }, {
      "left" : "if (explode != null)",
      "right" : "if (explode != null)",
      "info" : "IfStatement[48854-48961]:IfStatement[48927-49034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48875-48961]:Block[48948-49034]"
    }, {
      "left" : "result = Math.max(result, explode.doubleValue());",
      "right" : "result = Math.max(result, explode.doubleValue());",
      "info" : "ExpressionStatement[48894-48943]:ExpressionStatement[48967-49016]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[48982-48996]:ReturnStatement[49055-49069]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[49215-49221]:Modifier[49288-49294]"
    }, {
      "left" : "PieSectionLabelGenerator",
      "right" : "PieSectionLabelGenerator",
      "info" : "SimpleType[49222-49246]:SimpleType[49295-49319]"
    }, {
      "left" : "getLabelGenerator",
      "right" : "getLabelGenerator",
      "info" : "SimpleName[49247-49264]:SimpleName[49320-49337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49267-49315]:Block[49340-49388]"
    }, {
      "left" : "return this.labelGenerator;",
      "right" : "return this.labelGenerator;",
      "info" : "ReturnStatement[49278-49305]:ReturnStatement[49351-49378]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[49582-49588]:Modifier[49655-49661]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[49589-49593]:PrimitiveType[49662-49666]"
    }, {
      "left" : "setLabelGenerator",
      "right" : "setLabelGenerator",
      "info" : "SimpleName[49594-49611]:SimpleName[49667-49684]"
    }, {
      "left" : "PieSectionLabelGenerator generator",
      "right" : "PieSectionLabelGenerator generator",
      "info" : "SingleVariableDeclaration[49612-49646]:SingleVariableDeclaration[49685-49719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49648-49751]:Block[49721-49824]"
    }, {
      "left" : "this.labelGenerator = generator;",
      "right" : "this.labelGenerator = generator;",
      "info" : "ExpressionStatement[49659-49691]:ExpressionStatement[49732-49764]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[49701-49744]:ExpressionStatement[49774-49817]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[50022-50028]:Modifier[50095-50101]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[50029-50035]:PrimitiveType[50102-50108]"
    }, {
      "left" : "getLabelGap",
      "right" : "getLabelGap",
      "info" : "SimpleName[50036-50047]:SimpleName[50109-50120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50050-50092]:Block[50123-50165]"
    }, {
      "left" : "return this.labelGap;",
      "right" : "return this.labelGap;",
      "info" : "ReturnStatement[50061-50082]:ReturnStatement[50134-50155]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[50431-50437]:Modifier[50504-50510]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[50438-50442]:PrimitiveType[50511-50515]"
    }, {
      "left" : "setLabelGap",
      "right" : "setLabelGap",
      "info" : "SimpleName[50443-50454]:SimpleName[50516-50527]"
    }, {
      "left" : "double gap",
      "right" : "double gap",
      "info" : "SingleVariableDeclaration[50455-50465]:SingleVariableDeclaration[50528-50538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50467-50561]:Block[50540-50634]"
    }, {
      "left" : "this.labelGap = gap;",
      "right" : "this.labelGap = gap;",
      "info" : "ExpressionStatement[50478-50498]:ExpressionStatement[50551-50571]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[50511-50554]:ExpressionStatement[50584-50627]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[50794-50800]:Modifier[50867-50873]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[50801-50807]:PrimitiveType[50874-50880]"
    }, {
      "left" : "getMaximumLabelWidth",
      "right" : "getMaximumLabelWidth",
      "info" : "SimpleName[50808-50828]:SimpleName[50881-50901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50831-50882]:Block[50904-50955]"
    }, {
      "left" : "return this.maximumLabelWidth;",
      "right" : "return this.maximumLabelWidth;",
      "info" : "ReturnStatement[50842-50872]:ReturnStatement[50915-50945]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[51184-51190]:Modifier[51257-51263]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[51191-51195]:PrimitiveType[51264-51268]"
    }, {
      "left" : "setMaximumLabelWidth",
      "right" : "setMaximumLabelWidth",
      "info" : "SimpleName[51196-51216]:SimpleName[51269-51289]"
    }, {
      "left" : "double width",
      "right" : "double width",
      "info" : "SingleVariableDeclaration[51217-51229]:SingleVariableDeclaration[51290-51302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51231-51333]:Block[51304-51406]"
    }, {
      "left" : "this.maximumLabelWidth = width;",
      "right" : "this.maximumLabelWidth = width;",
      "info" : "ExpressionStatement[51242-51273]:ExpressionStatement[51315-51346]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[51283-51326]:ExpressionStatement[51356-51399]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[51547-51553]:Modifier[51620-51626]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[51554-51561]:PrimitiveType[51627-51634]"
    }, {
      "left" : "getLabelLinksVisible",
      "right" : "getLabelLinksVisible",
      "info" : "SimpleName[51562-51582]:SimpleName[51635-51655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51585-51633]:Block[51658-51706]"
    }, {
      "left" : "return this.labelLinksVisible;",
      "right" : "return this.labelLinksVisible;",
      "info" : "ReturnStatement[51596-51626]:ReturnStatement[51669-51699]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[52096-52102]:Modifier[52169-52175]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[52103-52107]:PrimitiveType[52176-52180]"
    }, {
      "left" : "setLabelLinksVisible",
      "right" : "setLabelLinksVisible",
      "info" : "SimpleName[52108-52128]:SimpleName[52181-52201]"
    }, {
      "left" : "boolean visible",
      "right" : "boolean visible",
      "info" : "SingleVariableDeclaration[52129-52144]:SingleVariableDeclaration[52202-52217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52146-52250]:Block[52219-52323]"
    }, {
      "left" : "this.labelLinksVisible = visible;",
      "right" : "this.labelLinksVisible = visible;",
      "info" : "ExpressionStatement[52157-52190]:ExpressionStatement[52230-52263]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[52200-52243]:ExpressionStatement[52273-52316]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[52553-52559]:Modifier[52626-52632]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[52560-52566]:PrimitiveType[52633-52639]"
    }, {
      "left" : "getLabelLinkMargin",
      "right" : "getLabelLinkMargin",
      "info" : "SimpleName[52567-52585]:SimpleName[52640-52658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52588-52637]:Block[52661-52710]"
    }, {
      "left" : "return this.labelLinkMargin;",
      "right" : "return this.labelLinkMargin;",
      "info" : "ReturnStatement[52599-52627]:ReturnStatement[52672-52700]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[52858-52864]:Modifier[52931-52937]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[52865-52869]:PrimitiveType[52938-52942]"
    }, {
      "left" : "setLabelLinkMargin",
      "right" : "setLabelLinkMargin",
      "info" : "SimpleName[52870-52888]:SimpleName[52943-52961]"
    }, {
      "left" : "double margin",
      "right" : "double margin",
      "info" : "SingleVariableDeclaration[52889-52902]:SingleVariableDeclaration[52962-52975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52904-53005]:Block[52977-53078]"
    }, {
      "left" : "this.labelLinkMargin = margin;",
      "right" : "this.labelLinkMargin = margin;",
      "info" : "ExpressionStatement[52915-52945]:ExpressionStatement[52988-53018]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[52955-52998]:ExpressionStatement[53028-53071]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[53256-53262]:Modifier[53329-53335]"
    }, {
      "left" : "Paint",
      "right" : "Paint",
      "info" : "SimpleType[53263-53268]:SimpleType[53336-53341]"
    }, {
      "left" : "getLabelLinkPaint",
      "right" : "getLabelLinkPaint",
      "info" : "SimpleName[53269-53286]:SimpleName[53342-53359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53289-53337]:Block[53362-53410]"
    }, {
      "left" : "return this.labelLinkPaint;",
      "right" : "return this.labelLinkPaint;",
      "info" : "ReturnStatement[53300-53327]:ReturnStatement[53373-53400]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[53668-53674]:Modifier[53741-53747]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[53675-53679]:PrimitiveType[53748-53752]"
    }, {
      "left" : "setLabelLinkPaint",
      "right" : "setLabelLinkPaint",
      "info" : "SimpleName[53680-53697]:SimpleName[53753-53770]"
    }, {
      "left" : "Paint paint",
      "right" : "Paint paint",
      "info" : "SingleVariableDeclaration[53698-53709]:SingleVariableDeclaration[53771-53782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53711-53926]:Block[53784-53999]"
    }, {
      "left" : "if (paint == null)",
      "right" : "if (paint == null)",
      "info" : "IfStatement[53722-53828]:IfStatement[53795-53901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53741-53828]:Block[53814-53901]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'paint' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'paint' argument.\");",
      "info" : "ThrowStatement[53756-53817]:ThrowStatement[53829-53890]"
    }, {
      "left" : "this.labelLinkPaint = paint;",
      "right" : "this.labelLinkPaint = paint;",
      "info" : "ExpressionStatement[53838-53866]:ExpressionStatement[53911-53939]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[53876-53919]:ExpressionStatement[53949-53992]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[54104-54110]:Modifier[54177-54183]"
    }, {
      "left" : "Stroke",
      "right" : "Stroke",
      "info" : "SimpleType[54111-54117]:SimpleType[54184-54190]"
    }, {
      "left" : "getLabelLinkStroke",
      "right" : "getLabelLinkStroke",
      "info" : "SimpleName[54118-54136]:SimpleName[54191-54209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54139-54188]:Block[54212-54261]"
    }, {
      "left" : "return this.labelLinkStroke;",
      "right" : "return this.labelLinkStroke;",
      "info" : "ReturnStatement[54150-54178]:ReturnStatement[54223-54251]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[54409-54415]:Modifier[54482-54488]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[54416-54420]:PrimitiveType[54489-54493]"
    }, {
      "left" : "setLabelLinkStroke",
      "right" : "setLabelLinkStroke",
      "info" : "SimpleName[54421-54439]:SimpleName[54494-54512]"
    }, {
      "left" : "Stroke stroke",
      "right" : "Stroke stroke",
      "info" : "SingleVariableDeclaration[54440-54453]:SingleVariableDeclaration[54513-54526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54455-54674]:Block[54528-54747]"
    }, {
      "left" : "if (stroke == null)",
      "right" : "if (stroke == null)",
      "info" : "IfStatement[54466-54574]:IfStatement[54539-54647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54486-54574]:Block[54559-54647]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'stroke' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'stroke' argument.\");",
      "info" : "ThrowStatement[54501-54563]:ThrowStatement[54574-54636]"
    }, {
      "left" : "this.labelLinkStroke = stroke;",
      "right" : "this.labelLinkStroke = stroke;",
      "info" : "ExpressionStatement[54584-54614]:ExpressionStatement[54657-54687]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[54624-54667]:ExpressionStatement[54697-54740]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[54846-54852]:Modifier[54919-54925]"
    }, {
      "left" : "Font",
      "right" : "Font",
      "info" : "SimpleType[54853-54857]:SimpleType[54926-54930]"
    }, {
      "left" : "getLabelFont",
      "right" : "getLabelFont",
      "info" : "SimpleName[54858-54870]:SimpleName[54931-54943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54873-54913]:Block[54946-54986]"
    }, {
      "left" : "return this.labelFont;",
      "right" : "return this.labelFont;",
      "info" : "ReturnStatement[54884-54906]:ReturnStatement[54957-54979]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[55160-55166]:Modifier[55233-55239]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[55167-55171]:PrimitiveType[55240-55244]"
    }, {
      "left" : "setLabelFont",
      "right" : "setLabelFont",
      "info" : "SimpleName[55172-55184]:SimpleName[55245-55257]"
    }, {
      "left" : "Font font",
      "right" : "Font font",
      "info" : "SingleVariableDeclaration[55185-55194]:SingleVariableDeclaration[55258-55267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55196-55403]:Block[55269-55476]"
    }, {
      "left" : "if (font == null)",
      "right" : "if (font == null)",
      "info" : "IfStatement[55207-55311]:IfStatement[55280-55384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55225-55311]:Block[55298-55384]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'font' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'font' argument.\");",
      "info" : "ThrowStatement[55240-55300]:ThrowStatement[55313-55373]"
    }, {
      "left" : "this.labelFont = font;",
      "right" : "this.labelFont = font;",
      "info" : "ExpressionStatement[55321-55343]:ExpressionStatement[55394-55416]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[55353-55396]:ExpressionStatement[55426-55469]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[55575-55581]:Modifier[55648-55654]"
    }, {
      "left" : "Paint",
      "right" : "Paint",
      "info" : "SimpleType[55582-55587]:SimpleType[55655-55660]"
    }, {
      "left" : "getLabelPaint",
      "right" : "getLabelPaint",
      "info" : "SimpleName[55588-55601]:SimpleName[55661-55674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55604-55645]:Block[55677-55718]"
    }, {
      "left" : "return this.labelPaint;",
      "right" : "return this.labelPaint;",
      "info" : "ReturnStatement[55615-55638]:ReturnStatement[55688-55711]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[55896-55902]:Modifier[55969-55975]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[55903-55907]:PrimitiveType[55976-55980]"
    }, {
      "left" : "setLabelPaint",
      "right" : "setLabelPaint",
      "info" : "SimpleName[55908-55921]:SimpleName[55981-55994]"
    }, {
      "left" : "Paint paint",
      "right" : "Paint paint",
      "info" : "SingleVariableDeclaration[55922-55933]:SingleVariableDeclaration[55995-56006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55935-56146]:Block[56008-56219]"
    }, {
      "left" : "if (paint == null)",
      "right" : "if (paint == null)",
      "info" : "IfStatement[55946-56052]:IfStatement[56019-56125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55965-56052]:Block[56038-56125]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'paint' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'paint' argument.\");",
      "info" : "ThrowStatement[55980-56041]:ThrowStatement[56053-56114]"
    }, {
      "left" : "this.labelPaint = paint;",
      "right" : "this.labelPaint = paint;",
      "info" : "ExpressionStatement[56062-56086]:ExpressionStatement[56135-56159]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[56096-56139]:ExpressionStatement[56169-56212]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[56342-56348]:Modifier[56415-56421]"
    }, {
      "left" : "Paint",
      "right" : "Paint",
      "info" : "SimpleType[56349-56354]:SimpleType[56422-56427]"
    }, {
      "left" : "getLabelBackgroundPaint",
      "right" : "getLabelBackgroundPaint",
      "info" : "SimpleName[56355-56378]:SimpleName[56428-56451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56381-56432]:Block[56454-56505]"
    }, {
      "left" : "return this.labelBackgroundPaint;",
      "right" : "return this.labelBackgroundPaint;",
      "info" : "ReturnStatement[56392-56425]:ReturnStatement[56465-56498]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[56700-56706]:Modifier[56773-56779]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[56707-56711]:PrimitiveType[56780-56784]"
    }, {
      "left" : "setLabelBackgroundPaint",
      "right" : "setLabelBackgroundPaint",
      "info" : "SimpleName[56712-56735]:SimpleName[56785-56808]"
    }, {
      "left" : "Paint paint",
      "right" : "Paint paint",
      "info" : "SingleVariableDeclaration[56736-56747]:SingleVariableDeclaration[56809-56820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56749-56854]:Block[56822-56927]"
    }, {
      "left" : "this.labelBackgroundPaint = paint;",
      "right" : "this.labelBackgroundPaint = paint;",
      "info" : "ExpressionStatement[56760-56794]:ExpressionStatement[56833-56867]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[56804-56847]:ExpressionStatement[56877-56920]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[57044-57050]:Modifier[57117-57123]"
    }, {
      "left" : "Paint",
      "right" : "Paint",
      "info" : "SimpleType[57051-57056]:SimpleType[57124-57129]"
    }, {
      "left" : "getLabelOutlinePaint",
      "right" : "getLabelOutlinePaint",
      "info" : "SimpleName[57057-57077]:SimpleName[57130-57150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57080-57128]:Block[57153-57201]"
    }, {
      "left" : "return this.labelOutlinePaint;",
      "right" : "return this.labelOutlinePaint;",
      "info" : "ReturnStatement[57091-57121]:ReturnStatement[57164-57194]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[57390-57396]:Modifier[57463-57469]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[57397-57401]:PrimitiveType[57470-57474]"
    }, {
      "left" : "setLabelOutlinePaint",
      "right" : "setLabelOutlinePaint",
      "info" : "SimpleName[57402-57422]:SimpleName[57475-57495]"
    }, {
      "left" : "Paint paint",
      "right" : "Paint paint",
      "info" : "SingleVariableDeclaration[57423-57434]:SingleVariableDeclaration[57496-57507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57436-57538]:Block[57509-57611]"
    }, {
      "left" : "this.labelOutlinePaint = paint;",
      "right" : "this.labelOutlinePaint = paint;",
      "info" : "ExpressionStatement[57447-57478]:ExpressionStatement[57520-57551]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[57488-57531]:ExpressionStatement[57561-57604]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[57732-57738]:Modifier[57805-57811]"
    }, {
      "left" : "Stroke",
      "right" : "Stroke",
      "info" : "SimpleType[57739-57745]:SimpleType[57812-57818]"
    }, {
      "left" : "getLabelOutlineStroke",
      "right" : "getLabelOutlineStroke",
      "info" : "SimpleName[57746-57767]:SimpleName[57819-57840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57770-57819]:Block[57843-57892]"
    }, {
      "left" : "return this.labelOutlineStroke;",
      "right" : "return this.labelOutlineStroke;",
      "info" : "ReturnStatement[57781-57812]:ReturnStatement[57854-57885]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[58085-58091]:Modifier[58158-58164]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[58092-58096]:PrimitiveType[58165-58169]"
    }, {
      "left" : "setLabelOutlineStroke",
      "right" : "setLabelOutlineStroke",
      "info" : "SimpleName[58097-58118]:SimpleName[58170-58191]"
    }, {
      "left" : "Stroke stroke",
      "right" : "Stroke stroke",
      "info" : "SingleVariableDeclaration[58119-58132]:SingleVariableDeclaration[58192-58205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58134-58238]:Block[58207-58311]"
    }, {
      "left" : "this.labelOutlineStroke = stroke;",
      "right" : "this.labelOutlineStroke = stroke;",
      "info" : "ExpressionStatement[58145-58178]:ExpressionStatement[58218-58251]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[58188-58231]:ExpressionStatement[58261-58304]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[58426-58432]:Modifier[58499-58505]"
    }, {
      "left" : "Paint",
      "right" : "Paint",
      "info" : "SimpleType[58433-58438]:SimpleType[58506-58511]"
    }, {
      "left" : "getLabelShadowPaint",
      "right" : "getLabelShadowPaint",
      "info" : "SimpleName[58439-58458]:SimpleName[58512-58531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58461-58508]:Block[58534-58581]"
    }, {
      "left" : "return this.labelShadowPaint;",
      "right" : "return this.labelShadowPaint;",
      "info" : "ReturnStatement[58472-58501]:ReturnStatement[58545-58574]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[58767-58773]:Modifier[58840-58846]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[58774-58778]:PrimitiveType[58847-58851]"
    }, {
      "left" : "setLabelShadowPaint",
      "right" : "setLabelShadowPaint",
      "info" : "SimpleName[58779-58798]:SimpleName[58852-58871]"
    }, {
      "left" : "Paint paint",
      "right" : "Paint paint",
      "info" : "SingleVariableDeclaration[58799-58810]:SingleVariableDeclaration[58872-58883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58812-58913]:Block[58885-58986]"
    }, {
      "left" : "this.labelShadowPaint = paint;",
      "right" : "this.labelShadowPaint = paint;",
      "info" : "ExpressionStatement[58823-58853]:ExpressionStatement[58896-58926]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[58863-58906]:ExpressionStatement[58936-58979]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[59134-59140]:Modifier[59207-59213]"
    }, {
      "left" : "RectangleInsets",
      "right" : "RectangleInsets",
      "info" : "SimpleType[59141-59156]:SimpleType[59214-59229]"
    }, {
      "left" : "getLabelPadding",
      "right" : "getLabelPadding",
      "info" : "SimpleName[59157-59172]:SimpleName[59230-59245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59175-59218]:Block[59248-59291]"
    }, {
      "left" : "return this.labelPadding;",
      "right" : "return this.labelPadding;",
      "info" : "ReturnStatement[59186-59211]:ReturnStatement[59259-59284]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[59533-59539]:Modifier[59606-59612]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[59540-59544]:PrimitiveType[59613-59617]"
    }, {
      "left" : "setLabelPadding",
      "right" : "setLabelPadding",
      "info" : "SimpleName[59545-59560]:SimpleName[59618-59633]"
    }, {
      "left" : "RectangleInsets padding",
      "right" : "RectangleInsets padding",
      "info" : "SingleVariableDeclaration[59561-59584]:SingleVariableDeclaration[59634-59657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59586-59805]:Block[59659-59878]"
    }, {
      "left" : "if (padding == null)",
      "right" : "if (padding == null)",
      "info" : "IfStatement[59597-59707]:IfStatement[59670-59780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59618-59707]:Block[59691-59780]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'padding' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'padding' argument.\");",
      "info" : "ThrowStatement[59633-59696]:ThrowStatement[59706-59769]"
    }, {
      "left" : "this.labelPadding = padding;",
      "right" : "this.labelPadding = padding;",
      "info" : "ExpressionStatement[59717-59745]:ExpressionStatement[59790-59818]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[59755-59798]:ExpressionStatement[59828-59871]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[60005-60011]:Modifier[60078-60084]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[60012-60019]:PrimitiveType[60085-60092]"
    }, {
      "left" : "getSimpleLabels",
      "right" : "getSimpleLabels",
      "info" : "SimpleName[60020-60035]:SimpleName[60093-60108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60038-60081]:Block[60111-60154]"
    }, {
      "left" : "return this.simpleLabels;",
      "right" : "return this.simpleLabels;",
      "info" : "ReturnStatement[60049-60074]:ReturnStatement[60122-60147]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[60373-60379]:Modifier[60446-60452]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[60380-60384]:PrimitiveType[60453-60457]"
    }, {
      "left" : "setSimpleLabels",
      "right" : "setSimpleLabels",
      "info" : "SimpleName[60385-60400]:SimpleName[60458-60473]"
    }, {
      "left" : "boolean simple",
      "right" : "boolean simple",
      "info" : "SingleVariableDeclaration[60401-60415]:SingleVariableDeclaration[60474-60488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60417-60515]:Block[60490-60588]"
    }, {
      "left" : "this.simpleLabels = simple;",
      "right" : "this.simpleLabels = simple;",
      "info" : "ExpressionStatement[60428-60455]:ExpressionStatement[60501-60528]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[60465-60508]:ExpressionStatement[60538-60581]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[60777-60783]:Modifier[60850-60856]"
    }, {
      "left" : "RectangleInsets",
      "right" : "RectangleInsets",
      "info" : "SimpleType[60784-60799]:SimpleType[60857-60872]"
    }, {
      "left" : "getSimpleLabelOffset",
      "right" : "getSimpleLabelOffset",
      "info" : "SimpleName[60800-60820]:SimpleName[60873-60893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60823-60871]:Block[60896-60944]"
    }, {
      "left" : "return this.simpleLabelOffset;",
      "right" : "return this.simpleLabelOffset;",
      "info" : "ReturnStatement[60834-60864]:ReturnStatement[60907-60937]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[61175-61181]:Modifier[61248-61254]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[61182-61186]:PrimitiveType[61255-61259]"
    }, {
      "left" : "setSimpleLabelOffset",
      "right" : "setSimpleLabelOffset",
      "info" : "SimpleName[61187-61207]:SimpleName[61260-61280]"
    }, {
      "left" : "RectangleInsets offset",
      "right" : "RectangleInsets offset",
      "info" : "SingleVariableDeclaration[61208-61230]:SingleVariableDeclaration[61281-61303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61232-61461]:Block[61305-61534]"
    }, {
      "left" : "if (offset == null)",
      "right" : "if (offset == null)",
      "info" : "IfStatement[61243-61351]:IfStatement[61316-61424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61263-61351]:Block[61336-61424]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'offset' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'offset' argument.\");",
      "info" : "ThrowStatement[61278-61340]:ThrowStatement[61351-61413]"
    }, {
      "left" : "this.simpleLabelOffset = offset;",
      "right" : "this.simpleLabelOffset = offset;",
      "info" : "ExpressionStatement[61361-61393]:ExpressionStatement[61434-61466]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[61403-61446]:ExpressionStatement[61476-61519]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[61694-61700]:Modifier[61767-61773]"
    }, {
      "left" : "AbstractPieLabelDistributor",
      "right" : "AbstractPieLabelDistributor",
      "info" : "SimpleType[61701-61728]:SimpleType[61774-61801]"
    }, {
      "left" : "getLabelDistributor",
      "right" : "getLabelDistributor",
      "info" : "SimpleName[61729-61748]:SimpleName[61802-61821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61751-61798]:Block[61824-61871]"
    }, {
      "left" : "return this.labelDistributor;",
      "right" : "return this.labelDistributor;",
      "info" : "ReturnStatement[61762-61791]:ReturnStatement[61835-61864]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[62054-62060]:Modifier[62127-62133]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[62061-62065]:PrimitiveType[62134-62138]"
    }, {
      "left" : "setLabelDistributor",
      "right" : "setLabelDistributor",
      "info" : "SimpleName[62066-62085]:SimpleName[62139-62158]"
    }, {
      "left" : "AbstractPieLabelDistributor distributor",
      "right" : "AbstractPieLabelDistributor distributor",
      "info" : "SingleVariableDeclaration[62086-62125]:SingleVariableDeclaration[62159-62198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62127-62362]:Block[62200-62435]"
    }, {
      "left" : "if (distributor == null)",
      "right" : "if (distributor == null)",
      "info" : "IfStatement[62138-62256]:IfStatement[62211-62329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62163-62256]:Block[62236-62329]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'distributor' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'distributor' argument.\");",
      "info" : "ThrowStatement[62178-62245]:ThrowStatement[62251-62318]"
    }, {
      "left" : "this.labelDistributor = distributor;",
      "right" : "this.labelDistributor = distributor;",
      "info" : "ExpressionStatement[62266-62302]:ExpressionStatement[62339-62375]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[62312-62355]:ExpressionStatement[62385-62428]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[62744-62750]:Modifier[62817-62823]"
    }, {
      "left" : "PieToolTipGenerator",
      "right" : "PieToolTipGenerator",
      "info" : "SimpleType[62751-62770]:SimpleType[62824-62843]"
    }, {
      "left" : "getToolTipGenerator",
      "right" : "getToolTipGenerator",
      "info" : "SimpleName[62771-62790]:SimpleName[62844-62863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62793-62840]:Block[62866-62913]"
    }, {
      "left" : "return this.toolTipGenerator;",
      "right" : "return this.toolTipGenerator;",
      "info" : "ReturnStatement[62804-62833]:ReturnStatement[62877-62906]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[63182-63188]:Modifier[63255-63261]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[63189-63193]:PrimitiveType[63262-63266]"
    }, {
      "left" : "setToolTipGenerator",
      "right" : "setToolTipGenerator",
      "info" : "SimpleName[63194-63213]:SimpleName[63267-63286]"
    }, {
      "left" : "PieToolTipGenerator generator",
      "right" : "PieToolTipGenerator generator",
      "info" : "SingleVariableDeclaration[63214-63243]:SingleVariableDeclaration[63287-63316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63245-63350]:Block[63318-63423]"
    }, {
      "left" : "this.toolTipGenerator = generator;",
      "right" : "this.toolTipGenerator = generator;",
      "info" : "ExpressionStatement[63256-63290]:ExpressionStatement[63329-63363]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[63300-63343]:ExpressionStatement[63373-63416]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[63535-63541]:Modifier[63608-63614]"
    }, {
      "left" : "PieURLGenerator",
      "right" : "PieURLGenerator",
      "info" : "SimpleType[63542-63557]:SimpleType[63615-63630]"
    }, {
      "left" : "getURLGenerator",
      "right" : "getURLGenerator",
      "info" : "SimpleName[63558-63573]:SimpleName[63631-63646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63576-63619]:Block[63649-63692]"
    }, {
      "left" : "return this.urlGenerator;",
      "right" : "return this.urlGenerator;",
      "info" : "ReturnStatement[63587-63612]:ReturnStatement[63660-63685]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[63870-63876]:Modifier[63943-63949]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[63877-63881]:PrimitiveType[63950-63954]"
    }, {
      "left" : "setURLGenerator",
      "right" : "setURLGenerator",
      "info" : "SimpleName[63882-63897]:SimpleName[63955-63970]"
    }, {
      "left" : "PieURLGenerator generator",
      "right" : "PieURLGenerator generator",
      "info" : "SingleVariableDeclaration[63898-63923]:SingleVariableDeclaration[63971-63996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63925-64026]:Block[63998-64099]"
    }, {
      "left" : "this.urlGenerator = generator;",
      "right" : "this.urlGenerator = generator;",
      "info" : "ExpressionStatement[63936-63966]:ExpressionStatement[64009-64039]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[63976-64019]:ExpressionStatement[64049-64092]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[64298-64304]:Modifier[64371-64377]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[64305-64311]:PrimitiveType[64378-64384]"
    }, {
      "left" : "getMinimumArcAngleToDraw",
      "right" : "getMinimumArcAngleToDraw",
      "info" : "SimpleName[64312-64336]:SimpleName[64385-64409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64339-64391]:Block[64412-64464]"
    }, {
      "left" : "return this.minimumArcAngleToDraw;",
      "right" : "return this.minimumArcAngleToDraw;",
      "info" : "ReturnStatement[64350-64384]:ReturnStatement[64423-64457]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[65108-65114]:Modifier[65181-65187]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[65115-65119]:PrimitiveType[65188-65192]"
    }, {
      "left" : "setMinimumArcAngleToDraw",
      "right" : "setMinimumArcAngleToDraw",
      "info" : "SimpleName[65120-65144]:SimpleName[65193-65217]"
    }, {
      "left" : "double angle",
      "right" : "double angle",
      "info" : "SingleVariableDeclaration[65145-65157]:SingleVariableDeclaration[65218-65230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65159-65212]:Block[65232-65285]"
    }, {
      "left" : "this.minimumArcAngleToDraw = angle;",
      "right" : "this.minimumArcAngleToDraw = angle;",
      "info" : "ExpressionStatement[65170-65205]:ExpressionStatement[65243-65278]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[65402-65408]:Modifier[65475-65481]"
    }, {
      "left" : "Shape",
      "right" : "Shape",
      "info" : "SimpleType[65409-65414]:SimpleType[65482-65487]"
    }, {
      "left" : "getLegendItemShape",
      "right" : "getLegendItemShape",
      "info" : "SimpleName[65415-65433]:SimpleName[65488-65506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65436-65482]:Block[65509-65555]"
    }, {
      "left" : "return this.legendItemShape;",
      "right" : "return this.legendItemShape;",
      "info" : "ReturnStatement[65447-65475]:ReturnStatement[65520-65548]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[65746-65752]:Modifier[65819-65825]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[65753-65757]:PrimitiveType[65826-65830]"
    }, {
      "left" : "setLegendItemShape",
      "right" : "setLegendItemShape",
      "info" : "SimpleName[65758-65776]:SimpleName[65831-65849]"
    }, {
      "left" : "Shape shape",
      "right" : "Shape shape",
      "info" : "SingleVariableDeclaration[65777-65788]:SingleVariableDeclaration[65850-65861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65790-66006]:Block[65863-66079]"
    }, {
      "left" : "if (shape == null)",
      "right" : "if (shape == null)",
      "info" : "IfStatement[65801-65907]:IfStatement[65874-65980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65820-65907]:Block[65893-65980]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'shape' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'shape' argument.\");",
      "info" : "ThrowStatement[65835-65896]:ThrowStatement[65908-65969]"
    }, {
      "left" : "this.legendItemShape = shape;",
      "right" : "this.legendItemShape = shape;",
      "info" : "ExpressionStatement[65917-65946]:ExpressionStatement[65990-66019]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[65956-65999]:ExpressionStatement[66029-66072]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[66232-66238]:Modifier[66305-66311]"
    }, {
      "left" : "PieSectionLabelGenerator",
      "right" : "PieSectionLabelGenerator",
      "info" : "SimpleType[66239-66263]:SimpleType[66312-66336]"
    }, {
      "left" : "getLegendLabelGenerator",
      "right" : "getLegendLabelGenerator",
      "info" : "SimpleName[66264-66287]:SimpleName[66337-66360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66290-66341]:Block[66363-66414]"
    }, {
      "left" : "return this.legendLabelGenerator;",
      "right" : "return this.legendLabelGenerator;",
      "info" : "ReturnStatement[66301-66334]:ReturnStatement[66374-66407]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[66618-66624]:Modifier[66691-66697]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[66625-66629]:PrimitiveType[66698-66702]"
    }, {
      "left" : "setLegendLabelGenerator",
      "right" : "setLegendLabelGenerator",
      "info" : "SimpleName[66630-66653]:SimpleName[66703-66726]"
    }, {
      "left" : "PieSectionLabelGenerator generator",
      "right" : "PieSectionLabelGenerator generator",
      "info" : "SingleVariableDeclaration[66654-66688]:SingleVariableDeclaration[66727-66761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66690-66923]:Block[66763-66996]"
    }, {
      "left" : "if (generator == null)",
      "right" : "if (generator == null)",
      "info" : "IfStatement[66701-66815]:IfStatement[66774-66888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66724-66815]:Block[66797-66888]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'generator' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'generator' argument.\");",
      "info" : "ThrowStatement[66739-66804]:ThrowStatement[66812-66877]"
    }, {
      "left" : "this.legendLabelGenerator = generator;",
      "right" : "this.legendLabelGenerator = generator;",
      "info" : "ExpressionStatement[66825-66863]:ExpressionStatement[66898-66936]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[66873-66916]:ExpressionStatement[66946-66989]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[67177-67183]:Modifier[67250-67256]"
    }, {
      "left" : "PieSectionLabelGenerator",
      "right" : "PieSectionLabelGenerator",
      "info" : "SimpleType[67184-67208]:SimpleType[67257-67281]"
    }, {
      "left" : "getLegendLabelToolTipGenerator",
      "right" : "getLegendLabelToolTipGenerator",
      "info" : "SimpleName[67209-67239]:SimpleName[67282-67312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67242-67300]:Block[67315-67373]"
    }, {
      "left" : "return this.legendLabelToolTipGenerator;",
      "right" : "return this.legendLabelToolTipGenerator;",
      "info" : "ReturnStatement[67253-67293]:ReturnStatement[67326-67366]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[67589-67595]:Modifier[67662-67668]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[67596-67600]:PrimitiveType[67669-67673]"
    }, {
      "left" : "setLegendLabelToolTipGenerator",
      "right" : "setLegendLabelToolTipGenerator",
      "info" : "SimpleName[67601-67631]:SimpleName[67674-67704]"
    }, {
      "left" : "PieSectionLabelGenerator generator",
      "right" : "PieSectionLabelGenerator generator",
      "info" : "SingleVariableDeclaration[67646-67680]:SingleVariableDeclaration[67719-67753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67682-67798]:Block[67755-67871]"
    }, {
      "left" : "this.legendLabelToolTipGenerator = generator;",
      "right" : "this.legendLabelToolTipGenerator = generator;",
      "info" : "ExpressionStatement[67693-67738]:ExpressionStatement[67766-67811]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[67748-67791]:ExpressionStatement[67821-67864]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[68059-68065]:Modifier[68132-68138]"
    }, {
      "left" : "PieURLGenerator",
      "right" : "PieURLGenerator",
      "info" : "SimpleType[68066-68081]:SimpleType[68139-68154]"
    }, {
      "left" : "getLegendLabelURLGenerator",
      "right" : "getLegendLabelURLGenerator",
      "info" : "SimpleName[68082-68108]:SimpleName[68155-68181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68111-68165]:Block[68184-68238]"
    }, {
      "left" : "return this.legendLabelURLGenerator;",
      "right" : "return this.legendLabelURLGenerator;",
      "info" : "ReturnStatement[68122-68158]:ReturnStatement[68195-68231]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[68475-68481]:Modifier[68548-68554]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[68482-68486]:PrimitiveType[68555-68559]"
    }, {
      "left" : "setLegendLabelURLGenerator",
      "right" : "setLegendLabelURLGenerator",
      "info" : "SimpleName[68487-68513]:SimpleName[68560-68586]"
    }, {
      "left" : "PieURLGenerator generator",
      "right" : "PieURLGenerator generator",
      "info" : "SingleVariableDeclaration[68514-68539]:SingleVariableDeclaration[68587-68612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68541-68653]:Block[68614-68726]"
    }, {
      "left" : "this.legendLabelURLGenerator = generator;",
      "right" : "this.legendLabelURLGenerator = generator;",
      "info" : "ExpressionStatement[68552-68593]:ExpressionStatement[68625-68666]"
    }, {
      "left" : "notifyListeners(new PlotChangeEvent(this));",
      "right" : "notifyListeners(new PlotChangeEvent(this));",
      "info" : "ExpressionStatement[68603-68646]:ExpressionStatement[68676-68719]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[69353-69359]:Modifier[69426-69432]"
    }, {
      "left" : "initialise",
      "right" : "initialise",
      "info" : "SimpleName[69373-69383]:SimpleName[69446-69456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69487-69792]:Block[69560-69913]"
    }, {
      "left" : "PiePlotState state = new PiePlotState(info);",
      "right" : "PiePlotState state = new PiePlotState(info);",
      "info" : "VariableDeclarationStatement[69505-69549]:VariableDeclarationStatement[69578-69622]"
    }, {
      "left" : "state.setPassesRequired(2);",
      "right" : "state.setPassesRequired(2);",
      "info" : "ExpressionStatement[69559-69586]:ExpressionStatement[69632-69659]"
    }, {
      "left" : "state.setTotal(DatasetUtilities.calculatePieDatasetTotal(\r\n                    plot.getDataset()));",
      "right" : "state.setTotal(DatasetUtilities.calculatePieDatasetTotal(\r\n                    plot.getDataset()));",
      "info" : "ExpressionStatement[69600-69699]:ExpressionStatement[69710-69809]"
    }, {
      "left" : "state.setLatestAngle(plot.getStartAngle());",
      "right" : "state.setLatestAngle(plot.getStartAngle());",
      "info" : "ExpressionStatement[69709-69752]:ExpressionStatement[69830-69873]"
    }, {
      "left" : "return state;",
      "right" : "return state;",
      "info" : "ReturnStatement[69762-69775]:ReturnStatement[69883-69896]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[70289-70295]:Modifier[70410-70416]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[70296-70300]:PrimitiveType[70417-70421]"
    }, {
      "left" : "draw",
      "right" : "draw",
      "info" : "SimpleName[70301-70305]:SimpleName[70422-70426]"
    }, {
      "left" : "Graphics2D g2",
      "right" : "Graphics2D g2",
      "info" : "SingleVariableDeclaration[70306-70319]:SingleVariableDeclaration[70427-70440]"
    }, {
      "left" : "Rectangle2D area",
      "right" : "Rectangle2D area",
      "info" : "SingleVariableDeclaration[70321-70337]:SingleVariableDeclaration[70442-70458]"
    }, {
      "left" : "Point2D anchor",
      "right" : "Point2D anchor",
      "info" : "SingleVariableDeclaration[70339-70353]:SingleVariableDeclaration[70460-70474]"
    }, {
      "left" : "PlotState parentState",
      "right" : "PlotState parentState",
      "info" : "SingleVariableDeclaration[70377-70398]:SingleVariableDeclaration[70498-70519]"
    }, {
      "left" : "PlotRenderingInfo info",
      "right" : "PlotRenderingInfo info",
      "info" : "SingleVariableDeclaration[70400-70422]:SingleVariableDeclaration[70521-70543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70424-71270]:Block[70545-71391]"
    }, {
      "left" : "RectangleInsets insets = getInsets();",
      "right" : "RectangleInsets insets = getInsets();",
      "info" : "VariableDeclarationStatement[70470-70507]:VariableDeclarationStatement[70591-70628]"
    }, {
      "left" : "insets.trim(area);",
      "right" : "insets.trim(area);",
      "info" : "ExpressionStatement[70517-70535]:ExpressionStatement[70638-70656]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[70547-70651]:IfStatement[70668-70772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70565-70651]:Block[70686-70772]"
    }, {
      "left" : "info.setPlotArea(area);",
      "right" : "info.setPlotArea(area);",
      "info" : "ExpressionStatement[70580-70603]:ExpressionStatement[70701-70724]"
    }, {
      "left" : "info.setDataArea(area);",
      "right" : "info.setDataArea(area);",
      "info" : "ExpressionStatement[70617-70640]:ExpressionStatement[70738-70761]"
    }, {
      "left" : "drawBackground(g2, area);",
      "right" : "drawBackground(g2, area);",
      "info" : "ExpressionStatement[70663-70688]:ExpressionStatement[70784-70809]"
    }, {
      "left" : "drawOutline(g2, area);",
      "right" : "drawOutline(g2, area);",
      "info" : "ExpressionStatement[70698-70720]:ExpressionStatement[70819-70841]"
    }, {
      "left" : "Shape savedClip = g2.getClip();",
      "right" : "Shape savedClip = g2.getClip();",
      "info" : "VariableDeclarationStatement[70732-70763]:VariableDeclarationStatement[70853-70884]"
    }, {
      "left" : "g2.clip(area);",
      "right" : "g2.clip(area);",
      "info" : "ExpressionStatement[70773-70787]:ExpressionStatement[70894-70908]"
    }, {
      "left" : "Composite originalComposite = g2.getComposite();",
      "right" : "Composite originalComposite = g2.getComposite();",
      "info" : "VariableDeclarationStatement[70799-70847]:VariableDeclarationStatement[70920-70968]"
    }, {
      "left" : "g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, \r\n                getForegroundAlpha()));",
      "right" : "g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, \r\n                getForegroundAlpha()));",
      "info" : "ExpressionStatement[70857-70966]:ExpressionStatement[70978-71087]"
    }, {
      "left" : "if (!DatasetUtilities.isEmptyOrNull(this.dataset))",
      "right" : "if (!DatasetUtilities.isEmptyOrNull(this.dataset))",
      "info" : "IfStatement[70978-71148]:IfStatement[71099-71269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71029-71079]:Block[71150-71200]"
    }, {
      "left" : "drawPie(g2, area, info);",
      "right" : "drawPie(g2, area, info);",
      "info" : "ExpressionStatement[71044-71068]:ExpressionStatement[71165-71189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71094-71148]:Block[71215-71269]"
    }, {
      "left" : "drawNoDataMessage(g2, area);",
      "right" : "drawNoDataMessage(g2, area);",
      "info" : "ExpressionStatement[71109-71137]:ExpressionStatement[71230-71258]"
    }, {
      "left" : "g2.setClip(savedClip);",
      "right" : "g2.setClip(savedClip);",
      "info" : "ExpressionStatement[71160-71182]:ExpressionStatement[71281-71303]"
    }, {
      "left" : "g2.setComposite(originalComposite);",
      "right" : "g2.setComposite(originalComposite);",
      "info" : "ExpressionStatement[71192-71227]:ExpressionStatement[71313-71348]"
    }, {
      "left" : "drawOutline(g2, area);",
      "right" : "drawOutline(g2, area);",
      "info" : "ExpressionStatement[71239-71261]:ExpressionStatement[71360-71382]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[71450-71459]:Modifier[71571-71580]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[71460-71464]:PrimitiveType[71581-71585]"
    }, {
      "left" : "drawPie",
      "right" : "drawPie",
      "info" : "SimpleName[71465-71472]:SimpleName[71586-71593]"
    }, {
      "left" : "Graphics2D g2",
      "right" : "Graphics2D g2",
      "info" : "SingleVariableDeclaration[71473-71486]:SingleVariableDeclaration[71594-71607]"
    }, {
      "left" : "Rectangle2D plotArea",
      "right" : "Rectangle2D plotArea",
      "info" : "SingleVariableDeclaration[71488-71508]:SingleVariableDeclaration[71609-71629]"
    }, {
      "left" : "PlotRenderingInfo info",
      "right" : "PlotRenderingInfo info",
      "info" : "SingleVariableDeclaration[71539-71561]:SingleVariableDeclaration[71660-71682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71563-76786]:Block[71684-76907]"
    }, {
      "left" : "PiePlotState state = initialise(g2, plotArea, this, null, info);",
      "right" : "PiePlotState state = initialise(g2, plotArea, this, null, info);",
      "info" : "VariableDeclarationStatement[71576-71640]:VariableDeclarationStatement[71697-71761]"
    }, {
      "left" : "double labelReserve = 0.0;",
      "right" : "double labelReserve = 0.0;",
      "info" : "VariableDeclarationStatement[71720-71746]:VariableDeclarationStatement[71841-71867]"
    }, {
      "left" : "if (this.labelGenerator != null && !this.simpleLabels)",
      "right" : "if (this.labelGenerator != null && !this.simpleLabels)",
      "info" : "IfStatement[71756-71895]:IfStatement[71877-72016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71811-71895]:Block[71932-72016]"
    }, {
      "left" : "labelReserve = this.labelGap + this.maximumLabelWidth;",
      "right" : "labelReserve = this.labelGap + this.maximumLabelWidth;",
      "info" : "ExpressionStatement[71826-71880]:ExpressionStatement[71947-72001]"
    }, {
      "left" : "double gapHorizontal = plotArea.getWidth() * (this.interiorGap \r\n                + labelReserve) * 2.0;",
      "right" : "double gapHorizontal = plotArea.getWidth() * (this.interiorGap \r\n                + labelReserve) * 2.0;",
      "info" : "VariableDeclarationStatement[71905-72008]:VariableDeclarationStatement[72026-72129]"
    }, {
      "left" : "double gapVertical = plotArea.getHeight() * this.interiorGap * 2.0;",
      "right" : "double gapVertical = plotArea.getHeight() * this.interiorGap * 2.0;",
      "info" : "VariableDeclarationStatement[72018-72085]:VariableDeclarationStatement[72139-72206]"
    }, {
      "left" : "if (DEBUG_DRAW_INTERIOR)",
      "right" : "if (DEBUG_DRAW_INTERIOR)",
      "info" : "IfStatement[72107-72643]:IfStatement[72228-72764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72132-72643]:Block[72253-72764]"
    }, {
      "left" : "double hGap = plotArea.getWidth() * this.interiorGap;",
      "right" : "double hGap = plotArea.getWidth() * this.interiorGap;",
      "info" : "VariableDeclarationStatement[72147-72200]:VariableDeclarationStatement[72268-72321]"
    }, {
      "left" : "double vGap = plotArea.getHeight() * this.interiorGap;",
      "right" : "double vGap = plotArea.getHeight() * this.interiorGap;",
      "info" : "VariableDeclarationStatement[72214-72268]:VariableDeclarationStatement[72335-72389]"
    }, {
      "left" : "double igx1 = plotArea.getX() + hGap;",
      "right" : "double igx1 = plotArea.getX() + hGap;",
      "info" : "VariableDeclarationStatement[72292-72329]:VariableDeclarationStatement[72413-72450]"
    }, {
      "left" : "double igx2 = plotArea.getMaxX() - hGap;",
      "right" : "double igx2 = plotArea.getMaxX() - hGap;",
      "info" : "VariableDeclarationStatement[72343-72383]:VariableDeclarationStatement[72464-72504]"
    }, {
      "left" : "double igy1 = plotArea.getY() + vGap;",
      "right" : "double igy1 = plotArea.getY() + vGap;",
      "info" : "VariableDeclarationStatement[72397-72434]:VariableDeclarationStatement[72518-72555]"
    }, {
      "left" : "double igy2 = plotArea.getMaxY() - vGap;",
      "right" : "double igy2 = plotArea.getMaxY() - vGap;",
      "info" : "VariableDeclarationStatement[72448-72488]:VariableDeclarationStatement[72569-72609]"
    }, {
      "left" : "g2.setPaint(Color.gray);",
      "right" : "g2.setPaint(Color.gray);",
      "info" : "ExpressionStatement[72502-72526]:ExpressionStatement[72623-72647]"
    }, {
      "left" : "g2.draw(new Rectangle2D.Double(igx1, igy1, igx2 - igx1, \r\n                    igy2 - igy1));",
      "right" : "g2.draw(new Rectangle2D.Double(igx1, igy1, igx2 - igx1, \r\n                    igy2 - igy1));",
      "info" : "ExpressionStatement[72540-72632]:ExpressionStatement[72661-72753]"
    }, {
      "left" : "double linkX = plotArea.getX() + gapHorizontal / 2;",
      "right" : "double linkX = plotArea.getX() + gapHorizontal / 2;",
      "info" : "VariableDeclarationStatement[72663-72714]:VariableDeclarationStatement[72784-72835]"
    }, {
      "left" : "double linkY = plotArea.getY() + gapVertical / 2;",
      "right" : "double linkY = plotArea.getY() + gapVertical / 2;",
      "info" : "VariableDeclarationStatement[72724-72773]:VariableDeclarationStatement[72845-72894]"
    }, {
      "left" : "double linkW = plotArea.getWidth() - gapHorizontal;",
      "right" : "double linkW = plotArea.getWidth() - gapHorizontal;",
      "info" : "VariableDeclarationStatement[72783-72834]:VariableDeclarationStatement[72904-72955]"
    }, {
      "left" : "double linkH = plotArea.getHeight() - gapVertical;",
      "right" : "double linkH = plotArea.getHeight() - gapVertical;",
      "info" : "VariableDeclarationStatement[72844-72894]:VariableDeclarationStatement[72965-73015]"
    }, {
      "left" : "if (this.circular)",
      "right" : "if (this.circular)",
      "info" : "IfStatement[72992-73249]:IfStatement[73113-73370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73011-73249]:Block[73132-73370]"
    }, {
      "left" : "double min = Math.min(linkW, linkH) / 2;",
      "right" : "double min = Math.min(linkW, linkH) / 2;",
      "info" : "VariableDeclarationStatement[73026-73066]:VariableDeclarationStatement[73147-73187]"
    }, {
      "left" : "linkX = (linkX + linkX + linkW) / 2 - min;",
      "right" : "linkX = (linkX + linkX + linkW) / 2 - min;",
      "info" : "ExpressionStatement[73080-73122]:ExpressionStatement[73201-73243]"
    }, {
      "left" : "linkY = (linkY + linkY + linkH) / 2 - min;",
      "right" : "linkY = (linkY + linkY + linkH) / 2 - min;",
      "info" : "ExpressionStatement[73136-73178]:ExpressionStatement[73257-73299]"
    }, {
      "left" : "linkW = 2 * min;",
      "right" : "linkW = 2 * min;",
      "info" : "ExpressionStatement[73192-73208]:ExpressionStatement[73313-73329]"
    }, {
      "left" : "linkH = 2 * min;",
      "right" : "linkH = 2 * min;",
      "info" : "ExpressionStatement[73222-73238]:ExpressionStatement[73343-73359]"
    }, {
      "left" : "Rectangle2D linkArea = new Rectangle2D.Double(linkX, linkY, linkW, \r\n                linkH);",
      "right" : "Rectangle2D linkArea = new Rectangle2D.Double(linkX, linkY, linkW, \r\n                linkH);",
      "info" : "VariableDeclarationStatement[73363-73455]:VariableDeclarationStatement[73484-73576]"
    }, {
      "left" : "state.setLinkArea(linkArea);",
      "right" : "state.setLinkArea(linkArea);",
      "info" : "ExpressionStatement[73465-73493]:ExpressionStatement[73586-73614]"
    }, {
      "left" : "if (DEBUG_DRAW_LINK_AREA)",
      "right" : "if (DEBUG_DRAW_LINK_AREA)",
      "info" : "IfStatement[73505-73796]:IfStatement[73626-73917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73531-73796]:Block[73652-73917]"
    }, {
      "left" : "g2.setPaint(Color.blue);",
      "right" : "g2.setPaint(Color.blue);",
      "info" : "ExpressionStatement[73546-73570]:ExpressionStatement[73667-73691]"
    }, {
      "left" : "g2.draw(linkArea);",
      "right" : "g2.draw(linkArea);",
      "info" : "ExpressionStatement[73584-73602]:ExpressionStatement[73705-73723]"
    }, {
      "left" : "g2.setPaint(Color.yellow);",
      "right" : "g2.setPaint(Color.yellow);",
      "info" : "ExpressionStatement[73616-73642]:ExpressionStatement[73737-73763]"
    }, {
      "left" : "g2.draw(new Ellipse2D.Double(linkArea.getX(), linkArea.getY(), \r\n                    linkArea.getWidth(), linkArea.getHeight()));",
      "right" : "g2.draw(new Ellipse2D.Double(linkArea.getX(), linkArea.getY(), \r\n                    linkArea.getWidth(), linkArea.getHeight()));",
      "info" : "ExpressionStatement[73656-73785]:ExpressionStatement[73777-73906]"
    }, {
      "left" : "double lm = 0.0;",
      "right" : "double lm = 0.0;",
      "info" : "VariableDeclarationStatement[74000-74016]:VariableDeclarationStatement[74121-74137]"
    }, {
      "left" : "if (!this.simpleLabels)",
      "right" : "if (!this.simpleLabels)",
      "info" : "IfStatement[74026-74102]:IfStatement[74147-74223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74050-74102]:Block[74171-74223]"
    }, {
      "left" : "lm = this.labelLinkMargin;",
      "right" : "lm = this.labelLinkMargin;",
      "info" : "ExpressionStatement[74065-74091]:ExpressionStatement[74186-74212]"
    }, {
      "left" : "double hh = linkArea.getWidth() * lm * 2.0;",
      "right" : "double hh = linkArea.getWidth() * lm * 2.0;",
      "info" : "VariableDeclarationStatement[74112-74155]:VariableDeclarationStatement[74233-74276]"
    }, {
      "left" : "double vv = linkArea.getHeight() * lm * 2.0;",
      "right" : "double vv = linkArea.getHeight() * lm * 2.0;",
      "info" : "VariableDeclarationStatement[74165-74209]:VariableDeclarationStatement[74286-74330]"
    }, {
      "left" : "Rectangle2D explodeArea = new Rectangle2D.Double(linkX + hh / 2.0, \r\n                linkY + vv / 2.0, linkW - hh, linkH - vv);",
      "right" : "Rectangle2D explodeArea = new Rectangle2D.Double(linkX + hh / 2.0, \r\n                linkY + vv / 2.0, linkW - hh, linkH - vv);",
      "info" : "VariableDeclarationStatement[74219-74346]:VariableDeclarationStatement[74340-74467]"
    }, {
      "left" : "state.setExplodedPieArea(explodeArea);",
      "right" : "state.setExplodedPieArea(explodeArea);",
      "info" : "ExpressionStatement[74365-74403]:ExpressionStatement[74486-74524]"
    }, {
      "left" : "double maximumExplodePercent = getMaximumExplodePercent();",
      "right" : "double maximumExplodePercent = getMaximumExplodePercent();",
      "info" : "VariableDeclarationStatement[74599-74657]:VariableDeclarationStatement[74720-74778]"
    }, {
      "left" : "double percent = maximumExplodePercent / (1.0 + maximumExplodePercent);",
      "right" : "double percent = maximumExplodePercent / (1.0 + maximumExplodePercent);",
      "info" : "VariableDeclarationStatement[74667-74738]:VariableDeclarationStatement[74788-74859]"
    }, {
      "left" : "double h1 = explodeArea.getWidth() * percent;",
      "right" : "double h1 = explodeArea.getWidth() * percent;",
      "info" : "VariableDeclarationStatement[74758-74803]:VariableDeclarationStatement[74879-74924]"
    }, {
      "left" : "double v1 = explodeArea.getHeight() * percent;",
      "right" : "double v1 = explodeArea.getHeight() * percent;",
      "info" : "VariableDeclarationStatement[74813-74859]:VariableDeclarationStatement[74934-74980]"
    }, {
      "left" : "Rectangle2D pieArea = new Rectangle2D.Double(explodeArea.getX() \r\n                + h1 / 2.0, explodeArea.getY() + v1 / 2.0, \r\n                explodeArea.getWidth() - h1, explodeArea.getHeight() - v1);",
      "right" : "Rectangle2D pieArea = new Rectangle2D.Double(explodeArea.getX() \r\n                + h1 / 2.0, explodeArea.getY() + v1 / 2.0, \r\n                explodeArea.getWidth() - h1, explodeArea.getHeight() - v1);",
      "info" : "VariableDeclarationStatement[74869-75071]:VariableDeclarationStatement[74990-75192]"
    }, {
      "left" : "if (DEBUG_DRAW_PIE_AREA)",
      "right" : "if (DEBUG_DRAW_PIE_AREA)",
      "info" : "IfStatement[75083-75190]:IfStatement[75204-75311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75108-75190]:Block[75229-75311]"
    }, {
      "left" : "g2.setPaint(Color.green);",
      "right" : "g2.setPaint(Color.green);",
      "info" : "ExpressionStatement[75123-75148]:ExpressionStatement[75244-75269]"
    }, {
      "left" : "g2.draw(pieArea);",
      "right" : "g2.draw(pieArea);",
      "info" : "ExpressionStatement[75162-75179]:ExpressionStatement[75283-75300]"
    }, {
      "left" : "state.setPieArea(pieArea);",
      "right" : "state.setPieArea(pieArea);",
      "info" : "ExpressionStatement[75200-75226]:ExpressionStatement[75321-75347]"
    }, {
      "left" : "state.setPieCenterX(pieArea.getCenterX());",
      "right" : "state.setPieCenterX(pieArea.getCenterX());",
      "info" : "ExpressionStatement[75236-75278]:ExpressionStatement[75357-75399]"
    }, {
      "left" : "state.setPieCenterY(pieArea.getCenterY());",
      "right" : "state.setPieCenterY(pieArea.getCenterY());",
      "info" : "ExpressionStatement[75288-75330]:ExpressionStatement[75409-75451]"
    }, {
      "left" : "state.setPieWRadius(pieArea.getWidth() / 2.0);",
      "right" : "state.setPieWRadius(pieArea.getWidth() / 2.0);",
      "info" : "ExpressionStatement[75340-75386]:ExpressionStatement[75461-75507]"
    }, {
      "left" : "state.setPieHRadius(pieArea.getHeight() / 2.0);",
      "right" : "state.setPieHRadius(pieArea.getHeight() / 2.0);",
      "info" : "ExpressionStatement[75396-75443]:ExpressionStatement[75517-75564]"
    }, {
      "left" : "if ((this.dataset != null) && (this.dataset.getKeys().size() > 0))",
      "right" : "if ((this.dataset != null) && (this.dataset.getKeys().size() > 0))",
      "info" : "IfStatement[75521-76779]:IfStatement[75642-76900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75588-76706]:Block[75709-76827]"
    }, {
      "left" : "List keys = this.dataset.getKeys();",
      "right" : "List keys = this.dataset.getKeys();",
      "info" : "VariableDeclarationStatement[75605-75640]:VariableDeclarationStatement[75726-75761]"
    }, {
      "left" : "double totalValue = DatasetUtilities.calculatePieDatasetTotal(\r\n                    this.dataset);",
      "right" : "double totalValue = DatasetUtilities.calculatePieDatasetTotal(\r\n                    this.dataset);",
      "info" : "VariableDeclarationStatement[75654-75752]:VariableDeclarationStatement[75775-75873]"
    }, {
      "left" : "int passesRequired = state.getPassesRequired();",
      "right" : "int passesRequired = state.getPassesRequired();",
      "info" : "VariableDeclarationStatement[75768-75815]:VariableDeclarationStatement[75889-75936]"
    }, {
      "left" : "for (int pass = 0; pass < passesRequired; pass++)",
      "right" : "for (int pass = 0; pass < passesRequired; pass++)",
      "info" : "ForStatement[75829-76417]:ForStatement[75950-76538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75879-76417]:Block[76000-76538]"
    }, {
      "left" : "double runningTotal = 0.0;",
      "right" : "double runningTotal = 0.0;",
      "info" : "VariableDeclarationStatement[75898-75924]:VariableDeclarationStatement[76019-76045]"
    }, {
      "left" : "for (int section = 0; section < keys.size(); section++)",
      "right" : "for (int section = 0; section < keys.size(); section++)",
      "info" : "ForStatement[75942-76402]:ForStatement[76063-76523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75998-76402]:Block[76119-76523]"
    }, {
      "left" : "Number n = this.dataset.getValue(section);",
      "right" : "Number n = this.dataset.getValue(section);",
      "info" : "VariableDeclarationStatement[76021-76063]:VariableDeclarationStatement[76142-76184]"
    }, {
      "left" : "if (n != null)",
      "right" : "if (n != null)",
      "info" : "IfStatement[76085-76382]:IfStatement[76206-76503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76100-76382]:Block[76221-76503]"
    }, {
      "left" : "double value = n.doubleValue();",
      "right" : "double value = n.doubleValue();",
      "info" : "VariableDeclarationStatement[76127-76158]:VariableDeclarationStatement[76248-76279]"
    }, {
      "left" : "if (value > 0.0)",
      "right" : "if (value > 0.0)",
      "info" : "IfStatement[76184-76359]:IfStatement[76305-76480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76201-76359]:Block[76322-76480]"
    }, {
      "left" : "runningTotal += value;",
      "right" : "runningTotal += value;",
      "info" : "ExpressionStatement[76232-76254]:ExpressionStatement[76353-76375]"
    }, {
      "left" : "drawItem(g2, section, explodeArea, state, pass);",
      "right" : "drawItem(g2, section, explodeArea, state, pass);",
      "info" : "ExpressionStatement[76284-76332]:ExpressionStatement[76405-76453]"
    }, {
      "left" : "if (this.simpleLabels)",
      "right" : "if (this.simpleLabels)",
      "info" : "IfStatement[76431-76693]:IfStatement[76552-76814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76454-76580]:Block[76575-76701]"
    }, {
      "left" : "drawSimpleLabels(g2, keys, totalValue, plotArea, linkArea, \r\n                        state);",
      "right" : "drawSimpleLabels(g2, keys, totalValue, plotArea, linkArea, \r\n                        state);",
      "info" : "ExpressionStatement[76473-76565]:ExpressionStatement[76594-76686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76599-76693]:Block[76720-76814]"
    }, {
      "left" : "drawLabels(g2, keys, totalValue, plotArea, linkArea, state);",
      "right" : "drawLabels(g2, keys, totalValue, plotArea, linkArea, state);",
      "info" : "ExpressionStatement[76618-76678]:ExpressionStatement[76739-76799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76721-76779]:Block[76842-76900]"
    }, {
      "left" : "drawNoDataMessage(g2, plotArea);",
      "right" : "drawNoDataMessage(g2, plotArea);",
      "info" : "ExpressionStatement[76736-76768]:ExpressionStatement[76857-76889]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[77127-77136]:Modifier[77248-77257]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[77137-77141]:PrimitiveType[77258-77262]"
    }, {
      "left" : "drawItem",
      "right" : "drawItem",
      "info" : "SimpleName[77142-77150]:SimpleName[77263-77271]"
    }, {
      "left" : "Graphics2D g2",
      "right" : "Graphics2D g2",
      "info" : "SingleVariableDeclaration[77151-77164]:SingleVariableDeclaration[77272-77285]"
    }, {
      "left" : "int section",
      "right" : "int section",
      "info" : "SingleVariableDeclaration[77166-77177]:SingleVariableDeclaration[77287-77298]"
    }, {
      "left" : "Rectangle2D dataArea",
      "right" : "Rectangle2D dataArea",
      "info" : "SingleVariableDeclaration[77179-77199]:SingleVariableDeclaration[77300-77320]"
    }, {
      "left" : "PiePlotState state",
      "right" : "PiePlotState state",
      "info" : "SingleVariableDeclaration[77230-77248]:SingleVariableDeclaration[77351-77369]"
    }, {
      "left" : "int currentPass",
      "right" : "int currentPass",
      "info" : "SingleVariableDeclaration[77250-77265]:SingleVariableDeclaration[77371-77386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77267-80756]:Block[77388-80877]"
    }, {
      "left" : "Number n = this.dataset.getValue(section);",
      "right" : "Number n = this.dataset.getValue(section);",
      "info" : "VariableDeclarationStatement[77284-77326]:VariableDeclarationStatement[77405-77447]"
    }, {
      "left" : "if (n == null)",
      "right" : "if (n == null)",
      "info" : "IfStatement[77336-77387]:IfStatement[77457-77508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77351-77387]:Block[77472-77508]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[77366-77373]:ReturnStatement[77487-77494]"
    }, {
      "left" : "double value = n.doubleValue();",
      "right" : "double value = n.doubleValue();",
      "info" : "VariableDeclarationStatement[77397-77428]:VariableDeclarationStatement[77518-77549]"
    }, {
      "left" : "double angle1 = 0.0;",
      "right" : "double angle1 = 0.0;",
      "info" : "VariableDeclarationStatement[77438-77458]:VariableDeclarationStatement[77559-77579]"
    }, {
      "left" : "double angle2 = 0.0;",
      "right" : "double angle2 = 0.0;",
      "info" : "VariableDeclarationStatement[77468-77488]:VariableDeclarationStatement[77589-77609]"
    }, {
      "left" : "if (this.direction == Rotation.CLOCKWISE)",
      "right" : "if (this.direction == Rotation.CLOCKWISE)",
      "info" : "IfStatement[77508-77975]:IfStatement[77629-78096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77550-77673]:Block[77671-77794]"
    }, {
      "left" : "angle1 = state.getLatestAngle();",
      "right" : "angle1 = state.getLatestAngle();",
      "info" : "ExpressionStatement[77565-77597]:ExpressionStatement[77686-77718]"
    }, {
      "left" : "angle2 = angle1 - value / state.getTotal() * 360.0;",
      "right" : "angle2 = angle1 - value / state.getTotal() * 360.0;",
      "info" : "ExpressionStatement[77611-77662]:ExpressionStatement[77732-77783]"
    }, {
      "left" : "if (this.direction == Rotation.ANTICLOCKWISE)",
      "right" : "if (this.direction == Rotation.ANTICLOCKWISE)",
      "info" : "IfStatement[77688-77975]:IfStatement[77809-78096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77734-77866]:Block[77855-77987]"
    }, {
      "left" : "angle1 = state.getLatestAngle();",
      "right" : "angle1 = state.getLatestAngle();",
      "info" : "ExpressionStatement[77749-77781]:ExpressionStatement[77870-77902]"
    }, {
      "left" : "angle2 = angle1 + value / state.getTotal() * 360.0;",
      "right" : "angle2 = angle1 + value / state.getTotal() * 360.0;",
      "info" : "ExpressionStatement[77795-77846]:ExpressionStatement[77916-77967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77881-77975]:Block[78002-78096]"
    }, {
      "left" : "throw new IllegalStateException(\"Rotation type not recognised.\");",
      "right" : "throw new IllegalStateException(\"Rotation type not recognised.\");",
      "info" : "ThrowStatement[77896-77961]:ThrowStatement[78017-78082]"
    }, {
      "left" : "double angle = (angle2 - angle1);",
      "right" : "double angle = (angle2 - angle1);",
      "info" : "VariableDeclarationStatement[77995-78028]:VariableDeclarationStatement[78116-78149]"
    }, {
      "left" : "if (Math.abs(angle) > getMinimumArcAngleToDraw())",
      "right" : "if (Math.abs(angle) > getMinimumArcAngleToDraw())",
      "info" : "IfStatement[78038-80706]:IfStatement[78159-80827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78088-80706]:Block[78209-80827]"
    }, {
      "left" : "double ep = 0.0;",
      "right" : "double ep = 0.0;",
      "info" : "VariableDeclarationStatement[78103-78119]:VariableDeclarationStatement[78224-78240]"
    }, {
      "left" : "double mep = getMaximumExplodePercent();",
      "right" : "double mep = getMaximumExplodePercent();",
      "info" : "VariableDeclarationStatement[78133-78173]:VariableDeclarationStatement[78254-78294]"
    }, {
      "left" : "if (mep > 0.0)",
      "right" : "if (mep > 0.0)",
      "info" : "IfStatement[78187-78305]:IfStatement[78308-78426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78202-78305]:Block[78323-78426]"
    }, {
      "left" : "ep = getExplodePercent(getSectionKey(section)) / mep;",
      "right" : "ep = getExplodePercent(getSectionKey(section)) / mep;",
      "info" : "ExpressionStatement[78221-78274]:ExpressionStatement[78342-78395]"
    }, {
      "left" : "Rectangle2D arcBounds = getArcBounds(state.getPieArea(), \r\n                    state.getExplodedPieArea(), angle1, angle, ep);",
      "right" : "Rectangle2D arcBounds = getArcBounds(state.getPieArea(), \r\n                    state.getExplodedPieArea(), angle1, angle, ep);",
      "info" : "VariableDeclarationStatement[78319-78445]:VariableDeclarationStatement[78440-78566]"
    }, {
      "left" : "Arc2D.Double arc = new Arc2D.Double(arcBounds, angle1, angle, \r\n                    Arc2D.PIE);",
      "right" : "Arc2D.Double arc = new Arc2D.Double(arcBounds, angle1, angle, \r\n                    Arc2D.PIE);",
      "info" : "VariableDeclarationStatement[78459-78554]:VariableDeclarationStatement[78580-78675]"
    }, {
      "left" : "if (currentPass == 0)",
      "right" : "if (currentPass == 0)",
      "info" : "IfStatement[78582-80695]:IfStatement[78703-80816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78604-78979]:Block[78725-79100]"
    }, {
      "left" : "if (this.shadowPaint != null)",
      "right" : "if (this.shadowPaint != null)",
      "info" : "IfStatement[78623-78964]:IfStatement[78744-79085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78653-78964]:Block[78774-79085]"
    }, {
      "left" : "Shape shadowArc = ShapeUtilities.createTranslatedShape(\r\n                            arc, (float) this.shadowXOffset, \r\n                            (float) this.shadowYOffset);",
      "right" : "Shape shadowArc = ShapeUtilities.createTranslatedShape(\r\n                            arc, (float) this.shadowXOffset, \r\n                            (float) this.shadowYOffset);",
      "info" : "VariableDeclarationStatement[78676-78852]:VariableDeclarationStatement[78797-78973]"
    }, {
      "left" : "g2.setPaint(this.shadowPaint);",
      "right" : "g2.setPaint(this.shadowPaint);",
      "info" : "ExpressionStatement[78874-78904]:ExpressionStatement[78995-79025]"
    }, {
      "left" : "g2.fill(shadowArc);",
      "right" : "g2.fill(shadowArc);",
      "info" : "ExpressionStatement[78926-78945]:ExpressionStatement[79047-79066]"
    }, {
      "left" : "if (currentPass == 1)",
      "right" : "if (currentPass == 1)",
      "info" : "IfStatement[78998-80695]:IfStatement[79119-80816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79020-80695]:Block[79141-80816]"
    }, {
      "left" : "Comparable key = getSectionKey(section);",
      "right" : "Comparable key = getSectionKey(section);",
      "info" : "VariableDeclarationStatement[79039-79079]:VariableDeclarationStatement[79160-79200]"
    }, {
      "left" : "Paint paint = lookupSectionPaint(key, true);",
      "right" : "Paint paint = lookupSectionPaint(key, true);",
      "info" : "VariableDeclarationStatement[79097-79141]:VariableDeclarationStatement[79218-79262]"
    }, {
      "left" : "g2.setPaint(paint);",
      "right" : "g2.setPaint(paint);",
      "info" : "ExpressionStatement[79159-79178]:ExpressionStatement[79280-79299]"
    }, {
      "left" : "g2.fill(arc);",
      "right" : "g2.fill(arc);",
      "info" : "ExpressionStatement[79196-79209]:ExpressionStatement[79317-79330]"
    }, {
      "left" : "Paint outlinePaint = lookupSectionOutlinePaint(key);",
      "right" : "Paint outlinePaint = lookupSectionOutlinePaint(key);",
      "info" : "VariableDeclarationStatement[79229-79281]:VariableDeclarationStatement[79350-79402]"
    }, {
      "left" : "Stroke outlineStroke = lookupSectionOutlineStroke(key);",
      "right" : "Stroke outlineStroke = lookupSectionOutlineStroke(key);",
      "info" : "VariableDeclarationStatement[79299-79354]:VariableDeclarationStatement[79420-79475]"
    }, {
      "left" : "if (this.sectionOutlinesVisible)",
      "right" : "if (this.sectionOutlinesVisible)",
      "info" : "IfStatement[79372-79558]:IfStatement[79493-79679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79405-79558]:Block[79526-79679]"
    }, {
      "left" : "g2.setPaint(outlinePaint);",
      "right" : "g2.setPaint(outlinePaint);",
      "info" : "ExpressionStatement[79428-79454]:ExpressionStatement[79549-79575]"
    }, {
      "left" : "g2.setStroke(outlineStroke);",
      "right" : "g2.setStroke(outlineStroke);",
      "info" : "ExpressionStatement[79476-79504]:ExpressionStatement[79597-79625]"
    }, {
      "left" : "g2.draw(arc);",
      "right" : "g2.draw(arc);",
      "info" : "ExpressionStatement[79526-79539]:ExpressionStatement[79647-79660]"
    }, {
      "left" : "if (state.getInfo() != null)",
      "right" : "if (state.getInfo() != null)",
      "info" : "IfStatement[79709-80680]:IfStatement[79830-80801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79738-80680]:Block[79859-80801]"
    }, {
      "left" : "EntityCollection entities = state.getEntityCollection();",
      "right" : "EntityCollection entities = state.getEntityCollection();",
      "info" : "VariableDeclarationStatement[79761-79817]:VariableDeclarationStatement[79882-79938]"
    }, {
      "left" : "if (entities != null)",
      "right" : "if (entities != null)",
      "info" : "IfStatement[79839-80661]:IfStatement[79960-80782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79861-80661]:Block[79982-80782]"
    }, {
      "left" : "String tip = null;",
      "right" : "String tip = null;",
      "info" : "VariableDeclarationStatement[79888-79906]:VariableDeclarationStatement[80009-80027]"
    }, {
      "left" : "if (this.toolTipGenerator != null)",
      "right" : "if (this.toolTipGenerator != null)",
      "info" : "IfStatement[79932-80126]:IfStatement[80053-80247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79967-80126]:Block[80088-80247]"
    }, {
      "left" : "tip = this.toolTipGenerator.generateToolTip(\r\n                                    this.dataset, key);",
      "right" : "tip = this.toolTipGenerator.generateToolTip(\r\n                                    this.dataset, key);",
      "info" : "ExpressionStatement[79998-80099]:ExpressionStatement[80119-80220]"
    }, {
      "left" : "String url = null;",
      "right" : "String url = null;",
      "info" : "VariableDeclarationStatement[80152-80170]:VariableDeclarationStatement[80273-80291]"
    }, {
      "left" : "if (this.urlGenerator != null)",
      "right" : "if (this.urlGenerator != null)",
      "info" : "IfStatement[80196-80393]:IfStatement[80317-80514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80227-80393]:Block[80348-80514]"
    }, {
      "left" : "url = this.urlGenerator.generateURL(this.dataset, \r\n                                    key, this.pieIndex);",
      "right" : "url = this.urlGenerator.generateURL(this.dataset, \r\n                                    key, this.pieIndex);",
      "info" : "ExpressionStatement[80258-80366]:ExpressionStatement[80379-80487]"
    }, {
      "left" : "PieSectionEntity entity = new PieSectionEntity(\r\n                                arc, this.dataset, this.pieIndex, section, key,\r\n                                tip, url);",
      "right" : "PieSectionEntity entity = new PieSectionEntity(\r\n                                arc, this.dataset, this.pieIndex, section, key,\r\n                                tip, url);",
      "info" : "VariableDeclarationStatement[80419-80591]:VariableDeclarationStatement[80540-80712]"
    }, {
      "left" : "entities.add(entity);",
      "right" : "entities.add(entity);",
      "info" : "ExpressionStatement[80617-80638]:ExpressionStatement[80738-80759]"
    }, {
      "left" : "state.setLatestAngle(angle2);",
      "right" : "state.setLatestAngle(angle2);",
      "info" : "ExpressionStatement[80720-80749]:ExpressionStatement[80841-80870]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[81163-81172]:Modifier[81284-81293]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[81173-81177]:PrimitiveType[81294-81298]"
    }, {
      "left" : "drawSimpleLabels",
      "right" : "drawSimpleLabels",
      "info" : "SimpleName[81178-81194]:SimpleName[81299-81315]"
    }, {
      "left" : "Graphics2D g2",
      "right" : "Graphics2D g2",
      "info" : "SingleVariableDeclaration[81195-81208]:SingleVariableDeclaration[81316-81329]"
    }, {
      "left" : "List keys",
      "right" : "List keys",
      "info" : "SingleVariableDeclaration[81210-81219]:SingleVariableDeclaration[81331-81340]"
    }, {
      "left" : "double totalValue",
      "right" : "double totalValue",
      "info" : "SingleVariableDeclaration[81235-81252]:SingleVariableDeclaration[81356-81373]"
    }, {
      "left" : "Rectangle2D plotArea",
      "right" : "Rectangle2D plotArea",
      "info" : "SingleVariableDeclaration[81254-81274]:SingleVariableDeclaration[81375-81395]"
    }, {
      "left" : "Rectangle2D pieArea",
      "right" : "Rectangle2D pieArea",
      "info" : "SingleVariableDeclaration[81276-81295]:SingleVariableDeclaration[81397-81416]"
    }, {
      "left" : "PiePlotState state",
      "right" : "PiePlotState state",
      "info" : "SingleVariableDeclaration[81311-81329]:SingleVariableDeclaration[81432-81450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81331-84872]:Block[81452-84993]"
    }, {
      "left" : "Composite originalComposite = g2.getComposite();",
      "right" : "Composite originalComposite = g2.getComposite();",
      "info" : "VariableDeclarationStatement[81352-81400]:VariableDeclarationStatement[81473-81521]"
    }, {
      "left" : "g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, \r\n                1.0f));",
      "right" : "g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, \r\n                1.0f));",
      "info" : "ExpressionStatement[81410-81503]:ExpressionStatement[81531-81624]"
    }, {
      "left" : "RectangleInsets labelInsets = new RectangleInsets(UnitType.RELATIVE, \r\n                0.18, 0.18, 0.18, 0.18);",
      "right" : "RectangleInsets labelInsets = new RectangleInsets(UnitType.RELATIVE, \r\n                0.18, 0.18, 0.18, 0.18);",
      "info" : "VariableDeclarationStatement[81515-81626]:VariableDeclarationStatement[81636-81747]"
    }, {
      "left" : "Rectangle2D labelsArea = labelInsets.createInsetRectangle(pieArea);",
      "right" : "Rectangle2D labelsArea = labelInsets.createInsetRectangle(pieArea);",
      "info" : "VariableDeclarationStatement[81636-81703]:VariableDeclarationStatement[81757-81824]"
    }, {
      "left" : "double runningTotal = 0.0;",
      "right" : "double runningTotal = 0.0;",
      "info" : "VariableDeclarationStatement[81713-81739]:VariableDeclarationStatement[81834-81860]"
    }, {
      "left" : "Iterator iterator = keys.iterator();",
      "right" : "Iterator iterator = keys.iterator();",
      "info" : "VariableDeclarationStatement[81749-81785]:VariableDeclarationStatement[81870-81906]"
    }, {
      "left" : "while (iterator.hasNext())",
      "right" : "while (iterator.hasNext())",
      "info" : "WhileStatement[81795-84809]:WhileStatement[81916-84930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81822-84809]:Block[81943-84930]"
    }, {
      "left" : "Comparable key = (Comparable) iterator.next();",
      "right" : "Comparable key = (Comparable) iterator.next();",
      "info" : "VariableDeclarationStatement[81837-81883]:VariableDeclarationStatement[81958-82004]"
    }, {
      "left" : "boolean include = true;",
      "right" : "boolean include = true;",
      "info" : "VariableDeclarationStatement[81897-81920]:VariableDeclarationStatement[82018-82041]"
    }, {
      "left" : "double v = 0.0;",
      "right" : "double v = 0.0;",
      "info" : "VariableDeclarationStatement[81934-81949]:VariableDeclarationStatement[82055-82070]"
    }, {
      "left" : "Number n = getDataset().getValue(key);",
      "right" : "Number n = getDataset().getValue(key);",
      "info" : "VariableDeclarationStatement[81963-82001]:VariableDeclarationStatement[82084-82122]"
    }, {
      "left" : "if (n == null)",
      "right" : "if (n == null)",
      "info" : "IfStatement[82015-82241]:IfStatement[82136-82362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82030-82097]:Block[82151-82218]"
    }, {
      "left" : "include = !getIgnoreNullValues();",
      "right" : "include = !getIgnoreNullValues();",
      "info" : "ExpressionStatement[82049-82082]:ExpressionStatement[82170-82203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82116-82241]:Block[82237-82362]"
    }, {
      "left" : "v = n.doubleValue();",
      "right" : "v = n.doubleValue();",
      "info" : "ExpressionStatement[82135-82155]:ExpressionStatement[82256-82276]"
    }, {
      "left" : "include = getIgnoreZeroValues() ? v > 0.0 : v >= 0.0;",
      "right" : "include = getIgnoreZeroValues() ? v > 0.0 : v >= 0.0;",
      "info" : "ExpressionStatement[82173-82226]:ExpressionStatement[82294-82347]"
    }, {
      "left" : "if (include)",
      "right" : "if (include)",
      "info" : "IfStatement[82257-84798]:IfStatement[82378-84919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82270-84798]:Block[82391-84919]"
    }, {
      "left" : "runningTotal = runningTotal + v;",
      "right" : "runningTotal = runningTotal + v;",
      "info" : "ExpressionStatement[82289-82321]:ExpressionStatement[82410-82442]"
    }, {
      "left" : "double mid = getStartAngle() + (getDirection().getFactor()\r\n                        * ((runningTotal - v / 2.0) * 360) / totalValue);",
      "right" : "double mid = getStartAngle() + (getDirection().getFactor()\r\n                        * ((runningTotal - v / 2.0) * 360) / totalValue);",
      "info" : "VariableDeclarationStatement[82450-82583]:VariableDeclarationStatement[82571-82704]"
    }, {
      "left" : "Arc2D arc = new Arc2D.Double(labelsArea, getStartAngle(), \r\n                        mid - getStartAngle(), Arc2D.OPEN);",
      "right" : "Arc2D arc = new Arc2D.Double(labelsArea, getStartAngle(), \r\n                        mid - getStartAngle(), Arc2D.OPEN);",
      "info" : "VariableDeclarationStatement[82619-82738]:VariableDeclarationStatement[82740-82859]"
    }, {
      "left" : "int x = (int) arc.getEndPoint().getX();",
      "right" : "int x = (int) arc.getEndPoint().getX();",
      "info" : "VariableDeclarationStatement[82756-82795]:VariableDeclarationStatement[82877-82916]"
    }, {
      "left" : "int y = (int) arc.getEndPoint().getY();",
      "right" : "int y = (int) arc.getEndPoint().getY();",
      "info" : "VariableDeclarationStatement[82813-82852]:VariableDeclarationStatement[82934-82973]"
    }, {
      "left" : "PieSectionLabelGenerator labelGenerator = getLabelGenerator();",
      "right" : "PieSectionLabelGenerator labelGenerator = getLabelGenerator();",
      "info" : "VariableDeclarationStatement[82888-82950]:VariableDeclarationStatement[83009-83071]"
    }, {
      "left" : "if (labelGenerator == null)",
      "right" : "if (labelGenerator == null)",
      "info" : "IfStatement[82968-83047]:IfStatement[83089-83168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82996-83047]:Block[83117-83168]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[83019-83028]:ContinueStatement[83140-83149]"
    }, {
      "left" : "String label = labelGenerator.generateSectionLabel(\r\n                        this.dataset, key);",
      "right" : "String label = labelGenerator.generateSectionLabel(\r\n                        this.dataset, key);",
      "info" : "VariableDeclarationStatement[83065-83161]:VariableDeclarationStatement[83186-83282]"
    }, {
      "left" : "if (label == null)",
      "right" : "if (label == null)",
      "info" : "IfStatement[83179-83249]:IfStatement[83300-83370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83198-83249]:Block[83319-83370]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[83221-83230]:ContinueStatement[83342-83351]"
    }, {
      "left" : "g2.setFont(this.labelFont);",
      "right" : "g2.setFont(this.labelFont);",
      "info" : "ExpressionStatement[83267-83294]:ExpressionStatement[83388-83415]"
    }, {
      "left" : "FontMetrics fm = g2.getFontMetrics();",
      "right" : "FontMetrics fm = g2.getFontMetrics();",
      "info" : "VariableDeclarationStatement[83312-83349]:VariableDeclarationStatement[83433-83470]"
    }, {
      "left" : "Rectangle2D bounds = TextUtilities.getTextBounds(label, g2, fm);",
      "right" : "Rectangle2D bounds = TextUtilities.getTextBounds(label, g2, fm);",
      "info" : "VariableDeclarationStatement[83367-83431]:VariableDeclarationStatement[83488-83552]"
    }, {
      "left" : "Rectangle2D out = this.labelPadding.createOutsetRectangle(\r\n                        bounds);",
      "right" : "Rectangle2D out = this.labelPadding.createOutsetRectangle(\r\n                        bounds);",
      "info" : "VariableDeclarationStatement[83449-83541]:VariableDeclarationStatement[83570-83662]"
    }, {
      "left" : "Shape bg = ShapeUtilities.createTranslatedShape(out, \r\n                        x - bounds.getCenterX(), y - bounds.getCenterY());",
      "right" : "Shape bg = ShapeUtilities.createTranslatedShape(out, \r\n                        x - bounds.getCenterX(), y - bounds.getCenterY());",
      "info" : "VariableDeclarationStatement[83559-83688]:VariableDeclarationStatement[83680-83809]"
    }, {
      "left" : "if (this.labelShadowPaint != null)",
      "right" : "if (this.labelShadowPaint != null)",
      "info" : "IfStatement[83706-84004]:IfStatement[83827-84125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83741-84004]:Block[83862-84125]"
    }, {
      "left" : "Shape shadow = ShapeUtilities.createTranslatedShape(bg, \r\n                            this.shadowXOffset, this.shadowYOffset);",
      "right" : "Shape shadow = ShapeUtilities.createTranslatedShape(bg, \r\n                            this.shadowXOffset, this.shadowYOffset);",
      "info" : "VariableDeclarationStatement[83764-83890]:VariableDeclarationStatement[83885-84011]"
    }, {
      "left" : "g2.setPaint(this.labelShadowPaint);",
      "right" : "g2.setPaint(this.labelShadowPaint);",
      "info" : "ExpressionStatement[83912-83947]:ExpressionStatement[84033-84068]"
    }, {
      "left" : "g2.fill(shadow);",
      "right" : "g2.fill(shadow);",
      "info" : "ExpressionStatement[83969-83985]:ExpressionStatement[84090-84106]"
    }, {
      "left" : "if (this.labelBackgroundPaint != null)",
      "right" : "if (this.labelBackgroundPaint != null)",
      "info" : "IfStatement[84022-84176]:IfStatement[84143-84297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84061-84176]:Block[84182-84297]"
    }, {
      "left" : "g2.setPaint(this.labelBackgroundPaint);",
      "right" : "g2.setPaint(this.labelBackgroundPaint);",
      "info" : "ExpressionStatement[84084-84123]:ExpressionStatement[84205-84244]"
    }, {
      "left" : "g2.fill(bg);",
      "right" : "g2.fill(bg);",
      "info" : "ExpressionStatement[84145-84157]:ExpressionStatement[84266-84278]"
    }, {
      "left" : "if (this.labelOutlinePaint != null \r\n                        && this.labelOutlineStroke != null)",
      "right" : "if (this.labelOutlinePaint != null \r\n                        && this.labelOutlineStroke != null)",
      "info" : "IfStatement[84194-84463]:IfStatement[84315-84584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84291-84463]:Block[84412-84584]"
    }, {
      "left" : "g2.setPaint(this.labelOutlinePaint);",
      "right" : "g2.setPaint(this.labelOutlinePaint);",
      "info" : "ExpressionStatement[84314-84350]:ExpressionStatement[84435-84471]"
    }, {
      "left" : "g2.setStroke(this.labelOutlineStroke);",
      "right" : "g2.setStroke(this.labelOutlineStroke);",
      "info" : "ExpressionStatement[84372-84410]:ExpressionStatement[84493-84531]"
    }, {
      "left" : "g2.draw(bg);",
      "right" : "g2.draw(bg);",
      "info" : "ExpressionStatement[84432-84444]:ExpressionStatement[84553-84565]"
    }, {
      "left" : "g2.setPaint(this.labelPaint);",
      "right" : "g2.setPaint(this.labelPaint);",
      "info" : "ExpressionStatement[84499-84528]:ExpressionStatement[84620-84649]"
    }, {
      "left" : "g2.setFont(this.labelFont);",
      "right" : "g2.setFont(this.labelFont);",
      "info" : "ExpressionStatement[84546-84573]:ExpressionStatement[84667-84694]"
    }, {
      "left" : "TextUtilities.drawAlignedString(getLabelGenerator()\r\n                        .generateSectionLabel(getDataset(), key), g2, x, y, \r\n                        TextAnchor.CENTER);",
      "right" : "TextUtilities.drawAlignedString(getLabelGenerator()\r\n                        .generateSectionLabel(getDataset(), key), g2, x, y, \r\n                        TextAnchor.CENTER);",
      "info" : "ExpressionStatement[84591-84765]:ExpressionStatement[84712-84886]"
    }, {
      "left" : "g2.setComposite(originalComposite);",
      "right" : "g2.setComposite(originalComposite);",
      "info" : "ExpressionStatement[84828-84863]:ExpressionStatement[84949-84984]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[85182-85191]:Modifier[85303-85312]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[85192-85196]:PrimitiveType[85313-85317]"
    }, {
      "left" : "drawLabels",
      "right" : "drawLabels",
      "info" : "SimpleName[85197-85207]:SimpleName[85318-85328]"
    }, {
      "left" : "Graphics2D g2",
      "right" : "Graphics2D g2",
      "info" : "SingleVariableDeclaration[85208-85221]:SingleVariableDeclaration[85329-85342]"
    }, {
      "left" : "List keys",
      "right" : "List keys",
      "info" : "SingleVariableDeclaration[85223-85232]:SingleVariableDeclaration[85344-85353]"
    }, {
      "left" : "double totalValue",
      "right" : "double totalValue",
      "info" : "SingleVariableDeclaration[85234-85251]:SingleVariableDeclaration[85355-85372]"
    }, {
      "left" : "Rectangle2D plotArea",
      "right" : "Rectangle2D plotArea",
      "info" : "SingleVariableDeclaration[85285-85305]:SingleVariableDeclaration[85406-85426]"
    }, {
      "left" : "Rectangle2D linkArea",
      "right" : "Rectangle2D linkArea",
      "info" : "SingleVariableDeclaration[85307-85327]:SingleVariableDeclaration[85428-85448]"
    }, {
      "left" : "PiePlotState state",
      "right" : "PiePlotState state",
      "info" : "SingleVariableDeclaration[85361-85379]:SingleVariableDeclaration[85482-85500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85381-87747]:Block[85502-87868]"
    }, {
      "left" : "Composite originalComposite = g2.getComposite();",
      "right" : "Composite originalComposite = g2.getComposite();",
      "info" : "VariableDeclarationStatement[85397-85445]:VariableDeclarationStatement[85518-85566]"
    }, {
      "left" : "g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, \r\n                1.0f));",
      "right" : "g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, \r\n                1.0f));",
      "info" : "ExpressionStatement[85455-85548]:ExpressionStatement[85576-85669]"
    }, {
      "left" : "DefaultKeyedValues leftKeys = new DefaultKeyedValues();",
      "right" : "DefaultKeyedValues leftKeys = new DefaultKeyedValues();",
      "info" : "VariableDeclarationStatement[85639-85694]:VariableDeclarationStatement[85760-85815]"
    }, {
      "left" : "DefaultKeyedValues rightKeys = new DefaultKeyedValues();",
      "right" : "DefaultKeyedValues rightKeys = new DefaultKeyedValues();",
      "info" : "VariableDeclarationStatement[85704-85760]:VariableDeclarationStatement[85825-85881]"
    }, {
      "left" : "double runningTotal = 0.0;",
      "right" : "double runningTotal = 0.0;",
      "info" : "VariableDeclarationStatement[85779-85805]:VariableDeclarationStatement[85900-85926]"
    }, {
      "left" : "Iterator iterator = keys.iterator();",
      "right" : "Iterator iterator = keys.iterator();",
      "info" : "VariableDeclarationStatement[85815-85851]:VariableDeclarationStatement[85936-85972]"
    }, {
      "left" : "while (iterator.hasNext())",
      "right" : "while (iterator.hasNext())",
      "info" : "WhileStatement[85861-86922]:WhileStatement[85982-87043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85888-86922]:Block[86009-87043]"
    }, {
      "left" : "Comparable key = (Comparable) iterator.next();",
      "right" : "Comparable key = (Comparable) iterator.next();",
      "info" : "VariableDeclarationStatement[85903-85949]:VariableDeclarationStatement[86024-86070]"
    }, {
      "left" : "boolean include = true;",
      "right" : "boolean include = true;",
      "info" : "VariableDeclarationStatement[85963-85986]:VariableDeclarationStatement[86084-86107]"
    }, {
      "left" : "double v = 0.0;",
      "right" : "double v = 0.0;",
      "info" : "VariableDeclarationStatement[86000-86015]:VariableDeclarationStatement[86121-86136]"
    }, {
      "left" : "Number n = this.dataset.getValue(key);",
      "right" : "Number n = this.dataset.getValue(key);",
      "info" : "VariableDeclarationStatement[86029-86067]:VariableDeclarationStatement[86150-86188]"
    }, {
      "left" : "if (n == null)",
      "right" : "if (n == null)",
      "info" : "IfStatement[86081-86307]:IfStatement[86202-86428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86096-86163]:Block[86217-86284]"
    }, {
      "left" : "include = !this.ignoreNullValues;",
      "right" : "include = !this.ignoreNullValues;",
      "info" : "ExpressionStatement[86115-86148]:ExpressionStatement[86236-86269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86182-86307]:Block[86303-86428]"
    }, {
      "left" : "v = n.doubleValue();",
      "right" : "v = n.doubleValue();",
      "info" : "ExpressionStatement[86201-86221]:ExpressionStatement[86322-86342]"
    }, {
      "left" : "include = this.ignoreZeroValues ? v > 0.0 : v >= 0.0;",
      "right" : "include = this.ignoreZeroValues ? v > 0.0 : v >= 0.0;",
      "info" : "ExpressionStatement[86239-86292]:ExpressionStatement[86360-86413]"
    }, {
      "left" : "if (include)",
      "right" : "if (include)",
      "info" : "IfStatement[86323-86911]:IfStatement[86444-87032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86336-86911]:Block[86457-87032]"
    }, {
      "left" : "runningTotal = runningTotal + v;",
      "right" : "runningTotal = runningTotal + v;",
      "info" : "ExpressionStatement[86355-86387]:ExpressionStatement[86476-86508]"
    }, {
      "left" : "double mid = this.startAngle + (this.direction.getFactor()\r\n                        * ((runningTotal - v / 2.0) * 360) / totalValue);",
      "right" : "double mid = this.startAngle + (this.direction.getFactor()\r\n                        * ((runningTotal - v / 2.0) * 360) / totalValue);",
      "info" : "VariableDeclarationStatement[86516-86649]:VariableDeclarationStatement[86637-86770]"
    }, {
      "left" : "if (Math.cos(Math.toRadians(mid)) < 0.0)",
      "right" : "if (Math.cos(Math.toRadians(mid)) < 0.0)",
      "info" : "IfStatement[86667-86896]:IfStatement[86788-87017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86708-86790]:Block[86829-86911]"
    }, {
      "left" : "leftKeys.addValue(key, new Double(mid));",
      "right" : "leftKeys.addValue(key, new Double(mid));",
      "info" : "ExpressionStatement[86731-86771]:ExpressionStatement[86852-86892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86813-86896]:Block[86934-87017]"
    }, {
      "left" : "rightKeys.addValue(key, new Double(mid));",
      "right" : "rightKeys.addValue(key, new Double(mid));",
      "info" : "ExpressionStatement[86836-86877]:ExpressionStatement[86957-86998]"
    }, {
      "left" : "g2.setFont(getLabelFont());",
      "right" : "g2.setFont(getLabelFont());",
      "info" : "ExpressionStatement[86941-86968]:ExpressionStatement[87062-87089]"
    }, {
      "left" : "double marginX = plotArea.getX() + this.interiorGap * plotArea.getWidth();",
      "right" : "double marginX = plotArea.getX() + this.interiorGap * plotArea.getWidth();",
      "info" : "VariableDeclarationStatement[87131-87205]:VariableDeclarationStatement[87252-87326]"
    }, {
      "left" : "double gap = plotArea.getWidth() * this.labelGap;",
      "right" : "double gap = plotArea.getWidth() * this.labelGap;",
      "info" : "VariableDeclarationStatement[87215-87264]:VariableDeclarationStatement[87336-87385]"
    }, {
      "left" : "double ww = linkArea.getX() - gap - marginX;",
      "right" : "double ww = linkArea.getX() - gap - marginX;",
      "info" : "VariableDeclarationStatement[87274-87318]:VariableDeclarationStatement[87395-87439]"
    }, {
      "left" : "float labelWidth = (float) this.labelPadding.trimWidth(ww);",
      "right" : "float labelWidth = (float) this.labelPadding.trimWidth(ww);",
      "info" : "VariableDeclarationStatement[87328-87387]:VariableDeclarationStatement[87449-87508]"
    }, {
      "left" : "if (this.labelGenerator != null)",
      "right" : "if (this.labelGenerator != null)",
      "info" : "IfStatement[87438-87693]:IfStatement[87559-87814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87471-87693]:Block[87592-87814]"
    }, {
      "left" : "drawLeftLabels(leftKeys, g2, plotArea, linkArea, labelWidth, \r\n                    state);",
      "right" : "drawLeftLabels(leftKeys, g2, plotArea, linkArea, labelWidth, \r\n                    state);",
      "info" : "ExpressionStatement[87486-87576]:ExpressionStatement[87607-87697]"
    }, {
      "left" : "drawRightLabels(rightKeys, g2, plotArea, linkArea, labelWidth, \r\n                    state);",
      "right" : "drawRightLabels(rightKeys, g2, plotArea, linkArea, labelWidth, \r\n                    state);",
      "info" : "ExpressionStatement[87590-87682]:ExpressionStatement[87711-87803]"
    }, {
      "left" : "g2.setComposite(originalComposite);",
      "right" : "g2.setComposite(originalComposite);",
      "info" : "ExpressionStatement[87703-87738]:ExpressionStatement[87824-87859]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[88201-88210]:Modifier[88322-88331]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[88211-88215]:PrimitiveType[88332-88336]"
    }, {
      "left" : "drawLeftLabels",
      "right" : "drawLeftLabels",
      "info" : "SimpleName[88216-88230]:SimpleName[88337-88351]"
    }, {
      "left" : "KeyedValues leftKeys",
      "right" : "KeyedValues leftKeys",
      "info" : "SingleVariableDeclaration[88231-88251]:SingleVariableDeclaration[88352-88372]"
    }, {
      "left" : "Graphics2D g2",
      "right" : "Graphics2D g2",
      "info" : "SingleVariableDeclaration[88253-88266]:SingleVariableDeclaration[88374-88387]"
    }, {
      "left" : "Rectangle2D plotArea",
      "right" : "Rectangle2D plotArea",
      "info" : "SingleVariableDeclaration[88304-88324]:SingleVariableDeclaration[88425-88445]"
    }, {
      "left" : "Rectangle2D linkArea",
      "right" : "Rectangle2D linkArea",
      "info" : "SingleVariableDeclaration[88326-88346]:SingleVariableDeclaration[88447-88467]"
    }, {
      "left" : "float maxLabelWidth",
      "right" : "float maxLabelWidth",
      "info" : "SingleVariableDeclaration[88384-88403]:SingleVariableDeclaration[88505-88524]"
    }, {
      "left" : "PiePlotState state",
      "right" : "PiePlotState state",
      "info" : "SingleVariableDeclaration[88405-88423]:SingleVariableDeclaration[88526-88544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88425-90340]:Block[88546-90461]"
    }, {
      "left" : "this.labelDistributor.clear();",
      "right" : "this.labelDistributor.clear();",
      "info" : "ExpressionStatement[88446-88476]:ExpressionStatement[88567-88597]"
    }, {
      "left" : "double lGap = plotArea.getWidth() * this.labelGap;",
      "right" : "double lGap = plotArea.getWidth() * this.labelGap;",
      "info" : "VariableDeclarationStatement[88486-88536]:VariableDeclarationStatement[88607-88657]"
    }, {
      "left" : "double verticalLinkRadius = state.getLinkArea().getHeight() / 2.0;",
      "right" : "double verticalLinkRadius = state.getLinkArea().getHeight() / 2.0;",
      "info" : "VariableDeclarationStatement[88546-88612]:VariableDeclarationStatement[88667-88733]"
    }, {
      "left" : "for (int i = 0; i < leftKeys.getItemCount(); i++)",
      "right" : "for (int i = 0; i < leftKeys.getItemCount(); i++)",
      "info" : "ForStatement[88622-90034]:ForStatement[88743-90155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88672-90034]:Block[88793-90155]"
    }, {
      "left" : "String label = this.labelGenerator.generateSectionLabel(\r\n                    this.dataset, leftKeys.getKey(i));",
      "right" : "String label = this.labelGenerator.generateSectionLabel(\r\n                    this.dataset, leftKeys.getKey(i));",
      "info" : "VariableDeclarationStatement[88690-88802]:VariableDeclarationStatement[88811-88923]"
    }, {
      "left" : "if (label != null)",
      "right" : "if (label != null)",
      "info" : "IfStatement[88816-90023]:IfStatement[88937-90144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88835-90023]:Block[88956-90144]"
    }, {
      "left" : "TextBlock block = TextUtilities.createTextBlock(label, \r\n                        this.labelFont, this.labelPaint, maxLabelWidth, \r\n                        new G2TextMeasurer(g2));",
      "right" : "TextBlock block = TextUtilities.createTextBlock(label, \r\n                        this.labelFont, this.labelPaint, maxLabelWidth, \r\n                        new G2TextMeasurer(g2));",
      "info" : "VariableDeclarationStatement[88854-89033]:VariableDeclarationStatement[88975-89154]"
    }, {
      "left" : "TextBox labelBox = new TextBox(block);",
      "right" : "TextBox labelBox = new TextBox(block);",
      "info" : "VariableDeclarationStatement[89051-89089]:VariableDeclarationStatement[89172-89210]"
    }, {
      "left" : "labelBox.setBackgroundPaint(this.labelBackgroundPaint);",
      "right" : "labelBox.setBackgroundPaint(this.labelBackgroundPaint);",
      "info" : "ExpressionStatement[89107-89162]:ExpressionStatement[89228-89283]"
    }, {
      "left" : "labelBox.setOutlinePaint(this.labelOutlinePaint);",
      "right" : "labelBox.setOutlinePaint(this.labelOutlinePaint);",
      "info" : "ExpressionStatement[89180-89229]:ExpressionStatement[89301-89350]"
    }, {
      "left" : "labelBox.setOutlineStroke(this.labelOutlineStroke);",
      "right" : "labelBox.setOutlineStroke(this.labelOutlineStroke);",
      "info" : "ExpressionStatement[89247-89298]:ExpressionStatement[89368-89419]"
    }, {
      "left" : "labelBox.setShadowPaint(this.labelShadowPaint);",
      "right" : "labelBox.setShadowPaint(this.labelShadowPaint);",
      "info" : "ExpressionStatement[89316-89363]:ExpressionStatement[89437-89484]"
    }, {
      "left" : "labelBox.setInteriorGap(this.labelPadding);",
      "right" : "labelBox.setInteriorGap(this.labelPadding);",
      "info" : "ExpressionStatement[89381-89424]:ExpressionStatement[89502-89545]"
    }, {
      "left" : "double theta = Math.toRadians(\r\n                        leftKeys.getValue(i).doubleValue());",
      "right" : "double theta = Math.toRadians(\r\n                        leftKeys.getValue(i).doubleValue());",
      "info" : "VariableDeclarationStatement[89442-89534]:VariableDeclarationStatement[89563-89655]"
    }, {
      "left" : "double baseY = state.getPieCenterY() - Math.sin(theta) \r\n                               * verticalLinkRadius;",
      "right" : "double baseY = state.getPieCenterY() - Math.sin(theta) \r\n                               * verticalLinkRadius;",
      "info" : "VariableDeclarationStatement[89552-89661]:VariableDeclarationStatement[89673-89782]"
    }, {
      "left" : "double hh = labelBox.getHeight(g2);",
      "right" : "double hh = labelBox.getHeight(g2);",
      "info" : "VariableDeclarationStatement[89679-89714]:VariableDeclarationStatement[89800-89835]"
    }, {
      "left" : "this.labelDistributor.addPieLabelRecord(new PieLabelRecord(\r\n                        leftKeys.getKey(i), theta, baseY, labelBox, hh,\r\n                        lGap / 2.0 + lGap / 2.0 * -Math.cos(theta), 0.9 \r\n                        + getExplodePercent(leftKeys.getKey(i))));",
      "right" : "this.labelDistributor.addPieLabelRecord(new PieLabelRecord(\r\n                        leftKeys.getKey(i), theta, baseY, labelBox, hh,\r\n                        lGap / 2.0 + lGap / 2.0 * -Math.cos(theta), 0.9 \r\n                        + getExplodePercent(leftKeys.getKey(i))));",
      "info" : "ExpressionStatement[89734-90008]:ExpressionStatement[89855-90129]"
    }, {
      "left" : "this.labelDistributor.distributeLabels(plotArea.getMinY(), \r\n                plotArea.getHeight());",
      "right" : "this.labelDistributor.distributeLabels(plotArea.getMinY(), \r\n                plotArea.getHeight());",
      "info" : "ExpressionStatement[90044-90143]:ExpressionStatement[90165-90264]"
    }, {
      "left" : "for (int i = 0; i < this.labelDistributor.getItemCount(); i++)",
      "right" : "for (int i = 0; i < this.labelDistributor.getItemCount(); i++)",
      "info" : "ForStatement[90153-90333]:ForStatement[90274-90454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90216-90333]:Block[90337-90454]"
    }, {
      "left" : "drawLeftLabel(g2, state, \r\n                    this.labelDistributor.getPieLabelRecord(i));",
      "right" : "drawLeftLabel(g2, state, \r\n                    this.labelDistributor.getPieLabelRecord(i));",
      "info" : "ExpressionStatement[90231-90322]:ExpressionStatement[90352-90443]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[90650-90659]:Modifier[90771-90780]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[90660-90664]:PrimitiveType[90781-90785]"
    }, {
      "left" : "drawRightLabels",
      "right" : "drawRightLabels",
      "info" : "SimpleName[90665-90680]:SimpleName[90786-90801]"
    }, {
      "left" : "KeyedValues keys",
      "right" : "KeyedValues keys",
      "info" : "SingleVariableDeclaration[90681-90697]:SingleVariableDeclaration[90802-90818]"
    }, {
      "left" : "Graphics2D g2",
      "right" : "Graphics2D g2",
      "info" : "SingleVariableDeclaration[90699-90712]:SingleVariableDeclaration[90820-90833]"
    }, {
      "left" : "Rectangle2D plotArea",
      "right" : "Rectangle2D plotArea",
      "info" : "SingleVariableDeclaration[90751-90771]:SingleVariableDeclaration[90872-90892]"
    }, {
      "left" : "Rectangle2D linkArea",
      "right" : "Rectangle2D linkArea",
      "info" : "SingleVariableDeclaration[90773-90793]:SingleVariableDeclaration[90894-90914]"
    }, {
      "left" : "float maxLabelWidth",
      "right" : "float maxLabelWidth",
      "info" : "SingleVariableDeclaration[90832-90851]:SingleVariableDeclaration[90953-90972]"
    }, {
      "left" : "PiePlotState state",
      "right" : "PiePlotState state",
      "info" : "SingleVariableDeclaration[90853-90871]:SingleVariableDeclaration[90974-90992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90873-92771]:Block[90994-92892]"
    }, {
      "left" : "this.labelDistributor.clear();",
      "right" : "this.labelDistributor.clear();",
      "info" : "ExpressionStatement[90923-90953]:ExpressionStatement[91044-91074]"
    }, {
      "left" : "double lGap = plotArea.getWidth() * this.labelGap;",
      "right" : "double lGap = plotArea.getWidth() * this.labelGap;",
      "info" : "VariableDeclarationStatement[90963-91013]:VariableDeclarationStatement[91084-91134]"
    }, {
      "left" : "double verticalLinkRadius = state.getLinkArea().getHeight() / 2.0;",
      "right" : "double verticalLinkRadius = state.getLinkArea().getHeight() / 2.0;",
      "info" : "VariableDeclarationStatement[91023-91089]:VariableDeclarationStatement[91144-91210]"
    }, {
      "left" : "for (int i = 0; i < keys.getItemCount(); i++)",
      "right" : "for (int i = 0; i < keys.getItemCount(); i++)",
      "info" : "ForStatement[91101-92462]:ForStatement[91222-92583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91147-92462]:Block[91268-92583]"
    }, {
      "left" : "String label = this.labelGenerator.generateSectionLabel(\r\n                    this.dataset, keys.getKey(i));",
      "right" : "String label = this.labelGenerator.generateSectionLabel(\r\n                    this.dataset, keys.getKey(i));",
      "info" : "VariableDeclarationStatement[91162-91270]:VariableDeclarationStatement[91283-91391]"
    }, {
      "left" : "if (label != null)",
      "right" : "if (label != null)",
      "info" : "IfStatement[91286-92451]:IfStatement[91407-92572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91305-92451]:Block[91426-92572]"
    }, {
      "left" : "TextBlock block = TextUtilities.createTextBlock(label, \r\n                        this.labelFont, this.labelPaint, maxLabelWidth, \r\n                        new G2TextMeasurer(g2));",
      "right" : "TextBlock block = TextUtilities.createTextBlock(label, \r\n                        this.labelFont, this.labelPaint, maxLabelWidth, \r\n                        new G2TextMeasurer(g2));",
      "info" : "VariableDeclarationStatement[91324-91503]:VariableDeclarationStatement[91445-91624]"
    }, {
      "left" : "TextBox labelBox = new TextBox(block);",
      "right" : "TextBox labelBox = new TextBox(block);",
      "info" : "VariableDeclarationStatement[91521-91559]:VariableDeclarationStatement[91642-91680]"
    }, {
      "left" : "labelBox.setBackgroundPaint(this.labelBackgroundPaint);",
      "right" : "labelBox.setBackgroundPaint(this.labelBackgroundPaint);",
      "info" : "ExpressionStatement[91577-91632]:ExpressionStatement[91698-91753]"
    }, {
      "left" : "labelBox.setOutlinePaint(this.labelOutlinePaint);",
      "right" : "labelBox.setOutlinePaint(this.labelOutlinePaint);",
      "info" : "ExpressionStatement[91650-91699]:ExpressionStatement[91771-91820]"
    }, {
      "left" : "labelBox.setOutlineStroke(this.labelOutlineStroke);",
      "right" : "labelBox.setOutlineStroke(this.labelOutlineStroke);",
      "info" : "ExpressionStatement[91717-91768]:ExpressionStatement[91838-91889]"
    }, {
      "left" : "labelBox.setShadowPaint(this.labelShadowPaint);",
      "right" : "labelBox.setShadowPaint(this.labelShadowPaint);",
      "info" : "ExpressionStatement[91786-91833]:ExpressionStatement[91907-91954]"
    }, {
      "left" : "labelBox.setInteriorGap(this.labelPadding);",
      "right" : "labelBox.setInteriorGap(this.labelPadding);",
      "info" : "ExpressionStatement[91851-91894]:ExpressionStatement[91972-92015]"
    }, {
      "left" : "double theta = Math.toRadians(keys.getValue(i).doubleValue());",
      "right" : "double theta = Math.toRadians(keys.getValue(i).doubleValue());",
      "info" : "VariableDeclarationStatement[91912-91974]:VariableDeclarationStatement[92033-92095]"
    }, {
      "left" : "double baseY = state.getPieCenterY() \r\n                              - Math.sin(theta) * verticalLinkRadius;",
      "right" : "double baseY = state.getPieCenterY() \r\n                              - Math.sin(theta) * verticalLinkRadius;",
      "info" : "VariableDeclarationStatement[91992-92100]:VariableDeclarationStatement[92113-92221]"
    }, {
      "left" : "double hh = labelBox.getHeight(g2);",
      "right" : "double hh = labelBox.getHeight(g2);",
      "info" : "VariableDeclarationStatement[92118-92153]:VariableDeclarationStatement[92239-92274]"
    }, {
      "left" : "this.labelDistributor.addPieLabelRecord(new PieLabelRecord(\r\n                        keys.getKey(i), theta, baseY, labelBox, hh,\r\n                        lGap / 2.0 + lGap / 2.0 * Math.cos(theta), \r\n                        0.9 + getExplodePercent(keys.getKey(i))));",
      "right" : "this.labelDistributor.addPieLabelRecord(new PieLabelRecord(\r\n                        keys.getKey(i), theta, baseY, labelBox, hh,\r\n                        lGap / 2.0 + lGap / 2.0 * Math.cos(theta), \r\n                        0.9 + getExplodePercent(keys.getKey(i))));",
      "info" : "ExpressionStatement[92171-92436]:ExpressionStatement[92292-92557]"
    }, {
      "left" : "this.labelDistributor.distributeLabels(plotArea.getMinY(), \r\n                plotArea.getHeight());",
      "right" : "this.labelDistributor.distributeLabels(plotArea.getMinY(), \r\n                plotArea.getHeight());",
      "info" : "ExpressionStatement[92472-92571]:ExpressionStatement[92593-92692]"
    }, {
      "left" : "for (int i = 0; i < this.labelDistributor.getItemCount(); i++)",
      "right" : "for (int i = 0; i < this.labelDistributor.getItemCount(); i++)",
      "info" : "ForStatement[92581-92762]:ForStatement[92702-92883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92644-92762]:Block[92765-92883]"
    }, {
      "left" : "drawRightLabel(g2, state, \r\n                    this.labelDistributor.getPieLabelRecord(i));",
      "right" : "drawRightLabel(g2, state, \r\n                    this.labelDistributor.getPieLabelRecord(i));",
      "info" : "ExpressionStatement[92659-92751]:ExpressionStatement[92780-92872]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[92933-92939]:Modifier[93054-93060]"
    }, {
      "left" : "LegendItemCollection",
      "right" : "LegendItemCollection",
      "info" : "SimpleType[92940-92960]:SimpleType[93061-93081]"
    }, {
      "left" : "getLegendItems",
      "right" : "getLegendItems",
      "info" : "SimpleName[92961-92975]:SimpleName[93082-93096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92978-95492]:Block[93099-95613]"
    }, {
      "left" : "LegendItemCollection result = new LegendItemCollection();",
      "right" : "LegendItemCollection result = new LegendItemCollection();",
      "info" : "VariableDeclarationStatement[92991-93048]:VariableDeclarationStatement[93112-93169]"
    }, {
      "left" : "if (this.dataset == null)",
      "right" : "if (this.dataset == null)",
      "info" : "IfStatement[93058-93124]:IfStatement[93179-93245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93084-93124]:Block[93205-93245]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[93099-93113]:ReturnStatement[93220-93234]"
    }, {
      "left" : "List keys = this.dataset.getKeys();",
      "right" : "List keys = this.dataset.getKeys();",
      "info" : "VariableDeclarationStatement[93134-93169]:VariableDeclarationStatement[93255-93290]"
    }, {
      "left" : "int section = 0;",
      "right" : "int section = 0;",
      "info" : "VariableDeclarationStatement[93179-93195]:VariableDeclarationStatement[93300-93316]"
    }, {
      "left" : "Shape shape = getLegendItemShape();",
      "right" : "Shape shape = getLegendItemShape();",
      "info" : "VariableDeclarationStatement[93205-93240]:VariableDeclarationStatement[93326-93361]"
    }, {
      "left" : "Iterator iterator = keys.iterator();",
      "right" : "Iterator iterator = keys.iterator();",
      "info" : "VariableDeclarationStatement[93250-93286]:VariableDeclarationStatement[93371-93407]"
    }, {
      "left" : "while (iterator.hasNext())",
      "right" : "while (iterator.hasNext())",
      "info" : "WhileStatement[93296-95461]:WhileStatement[93417-95582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93323-95461]:Block[93444-95582]"
    }, {
      "left" : "Comparable key = (Comparable) iterator.next();",
      "right" : "Comparable key = (Comparable) iterator.next();",
      "info" : "VariableDeclarationStatement[93338-93384]:VariableDeclarationStatement[93459-93505]"
    }, {
      "left" : "Number n = this.dataset.getValue(key);",
      "right" : "Number n = this.dataset.getValue(key);",
      "info" : "VariableDeclarationStatement[93398-93436]:VariableDeclarationStatement[93519-93557]"
    }, {
      "left" : "boolean include = true;",
      "right" : "boolean include = true;",
      "info" : "VariableDeclarationStatement[93450-93473]:VariableDeclarationStatement[93571-93594]"
    }, {
      "left" : "if (n == null)",
      "right" : "if (n == null)",
      "info" : "IfStatement[93487-93848]:IfStatement[93608-93969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93502-93572]:Block[93623-93693]"
    }, {
      "left" : "include = !this.ignoreNullValues;",
      "right" : "include = !this.ignoreNullValues;",
      "info" : "ExpressionStatement[93521-93554]:ExpressionStatement[93642-93675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93591-93848]:Block[93712-93969]"
    }, {
      "left" : "double v = n.doubleValue();",
      "right" : "double v = n.doubleValue();",
      "info" : "VariableDeclarationStatement[93610-93637]:VariableDeclarationStatement[93731-93758]"
    }, {
      "left" : "if (v == 0.0)",
      "right" : "if (v == 0.0)",
      "info" : "IfStatement[93655-93833]:IfStatement[93776-93954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93669-93747]:Block[93790-93868]"
    }, {
      "left" : "include = !this.ignoreZeroValues;",
      "right" : "include = !this.ignoreZeroValues;",
      "info" : "ExpressionStatement[93692-93725]:ExpressionStatement[93813-93846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93770-93833]:Block[93891-93954]"
    }, {
      "left" : "include = v > 0.0;",
      "right" : "include = v > 0.0;",
      "info" : "ExpressionStatement[93793-93811]:ExpressionStatement[93914-93932]"
    }, {
      "left" : "if (include)",
      "right" : "if (include)",
      "info" : "IfStatement[93862-95450]:IfStatement[93983-95571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93875-95387]:Block[93996-95508]"
    }, {
      "left" : "String label = this.legendLabelGenerator.generateSectionLabel(\r\n                        this.dataset, key);",
      "right" : "String label = this.legendLabelGenerator.generateSectionLabel(\r\n                        this.dataset, key);",
      "info" : "VariableDeclarationStatement[93894-94001]:VariableDeclarationStatement[94015-94122]"
    }, {
      "left" : "if (label != null)",
      "right" : "if (label != null)",
      "info" : "IfStatement[94019-95344]:IfStatement[94140-95465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94038-95344]:Block[94159-95465]"
    }, {
      "left" : "String description = label;",
      "right" : "String description = label;",
      "info" : "VariableDeclarationStatement[94061-94088]:VariableDeclarationStatement[94182-94209]"
    }, {
      "left" : "String toolTipText = null;",
      "right" : "String toolTipText = null;",
      "info" : "VariableDeclarationStatement[94110-94136]:VariableDeclarationStatement[94231-94257]"
    }, {
      "left" : "if (this.legendLabelToolTipGenerator != null)",
      "right" : "if (this.legendLabelToolTipGenerator != null)",
      "info" : "IfStatement[94158-94375]:IfStatement[94279-94496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94204-94375]:Block[94325-94496]"
    }, {
      "left" : "toolTipText = this.legendLabelToolTipGenerator\r\n                                .generateSectionLabel(this.dataset, key);",
      "right" : "toolTipText = this.legendLabelToolTipGenerator\r\n                                .generateSectionLabel(this.dataset, key);",
      "info" : "ExpressionStatement[94231-94352]:ExpressionStatement[94352-94473]"
    }, {
      "left" : "String urlText = null;",
      "right" : "String urlText = null;",
      "info" : "VariableDeclarationStatement[94397-94419]:VariableDeclarationStatement[94518-94540]"
    }, {
      "left" : "if (this.legendLabelURLGenerator != null)",
      "right" : "if (this.legendLabelURLGenerator != null)",
      "info" : "IfStatement[94441-94652]:IfStatement[94562-94773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94483-94652]:Block[94604-94773]"
    }, {
      "left" : "urlText = this.legendLabelURLGenerator.generateURL(\r\n                                this.dataset, key, this.pieIndex);",
      "right" : "urlText = this.legendLabelURLGenerator.generateURL(\r\n                                this.dataset, key, this.pieIndex);",
      "info" : "ExpressionStatement[94510-94629]:ExpressionStatement[94631-94750]"
    }, {
      "left" : "Paint paint = lookupSectionPaint(key, true);",
      "right" : "Paint paint = lookupSectionPaint(key, true);",
      "info" : "VariableDeclarationStatement[94674-94718]:VariableDeclarationStatement[94795-94839]"
    }, {
      "left" : "Paint outlinePaint = lookupSectionOutlinePaint(key);",
      "right" : "Paint outlinePaint = lookupSectionOutlinePaint(key);",
      "info" : "VariableDeclarationStatement[94740-94792]:VariableDeclarationStatement[94861-94913]"
    }, {
      "left" : "Stroke outlineStroke = lookupSectionOutlineStroke(key);",
      "right" : "Stroke outlineStroke = lookupSectionOutlineStroke(key);",
      "info" : "VariableDeclarationStatement[94814-94869]:VariableDeclarationStatement[94935-94990]"
    }, {
      "left" : "LegendItem item = new LegendItem(label, description, \r\n                            toolTipText, urlText, true, shape, true, paint, \r\n                            true, outlinePaint, outlineStroke, \r\n                            false,          // line not visible\r\n                            new Line2D.Float(), new BasicStroke(), Color.black);",
      "right" : "LegendItem item = new LegendItem(label, description, \r\n                            toolTipText, urlText, true, shape, true, paint, \r\n                            true, outlinePaint, outlineStroke, \r\n                            false,          // line not visible\r\n                            new Line2D.Float(), new BasicStroke(), Color.black);",
      "info" : "VariableDeclarationStatement[94891-95234]:VariableDeclarationStatement[95012-95355]"
    }, {
      "left" : "item.setDataset(getDataset());",
      "right" : "item.setDataset(getDataset());",
      "info" : "ExpressionStatement[95256-95286]:ExpressionStatement[95377-95407]"
    }, {
      "left" : "result.add(item);",
      "right" : "result.add(item);",
      "info" : "ExpressionStatement[95308-95325]:ExpressionStatement[95429-95446]"
    }, {
      "left" : "section++;",
      "right" : "section++;",
      "info" : "ExpressionStatement[95362-95372]:ExpressionStatement[95483-95493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95406-95450]:Block[95527-95571]"
    }, {
      "left" : "section++;",
      "right" : "section++;",
      "info" : "ExpressionStatement[95425-95435]:ExpressionStatement[95546-95556]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[95471-95485]:ReturnStatement[95592-95606]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[95617-95623]:Modifier[95738-95744]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[95624-95630]:SimpleType[95745-95751]"
    }, {
      "left" : "getPlotType",
      "right" : "getPlotType",
      "info" : "SimpleName[95631-95642]:SimpleName[95752-95763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95645-95714]:Block[95766-95835]"
    }, {
      "left" : "return localizationResources.getString(\"Pie_Plot\");",
      "right" : "return localizationResources.getString(\"Pie_Plot\");",
      "info" : "ReturnStatement[95656-95707]:ReturnStatement[95777-95828]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[96366-96375]:Modifier[96487-96496]"
    }, {
      "left" : "Rectangle2D",
      "right" : "Rectangle2D",
      "info" : "SimpleType[96376-96387]:SimpleType[96497-96508]"
    }, {
      "left" : "getArcBounds",
      "right" : "getArcBounds",
      "info" : "SimpleName[96388-96400]:SimpleName[96509-96521]"
    }, {
      "left" : "Rectangle2D unexploded",
      "right" : "Rectangle2D unexploded",
      "info" : "SingleVariableDeclaration[96401-96423]:SingleVariableDeclaration[96522-96544]"
    }, {
      "left" : "Rectangle2D exploded",
      "right" : "Rectangle2D exploded",
      "info" : "SingleVariableDeclaration[96466-96486]:SingleVariableDeclaration[96587-96607]"
    }, {
      "left" : "double angle",
      "right" : "double angle",
      "info" : "SingleVariableDeclaration[96528-96540]:SingleVariableDeclaration[96649-96661]"
    }, {
      "left" : "double extent",
      "right" : "double extent",
      "info" : "SingleVariableDeclaration[96542-96555]:SingleVariableDeclaration[96663-96676]"
    }, {
      "left" : "double explodePercent",
      "right" : "double explodePercent",
      "info" : "SingleVariableDeclaration[96598-96619]:SingleVariableDeclaration[96719-96740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96621-97411]:Block[96742-97532]"
    }, {
      "left" : "if (explodePercent == 0.0)",
      "right" : "if (explodePercent == 0.0)",
      "info" : "IfStatement[96634-97404]:IfStatement[96755-97525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96661-96705]:Block[96782-96826]"
    }, {
      "left" : "return unexploded;",
      "right" : "return unexploded;",
      "info" : "ReturnStatement[96676-96694]:ReturnStatement[96797-96815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96720-97404]:Block[96841-97525]"
    }, {
      "left" : "Arc2D arc1 = new Arc2D.Double(unexploded, angle, extent / 2, \r\n                    Arc2D.OPEN);",
      "right" : "Arc2D arc1 = new Arc2D.Double(unexploded, angle, extent / 2, \r\n                    Arc2D.OPEN);",
      "info" : "VariableDeclarationStatement[96735-96830]:VariableDeclarationStatement[96856-96951]"
    }, {
      "left" : "Point2D point1 = arc1.getEndPoint();",
      "right" : "Point2D point1 = arc1.getEndPoint();",
      "info" : "VariableDeclarationStatement[96844-96880]:VariableDeclarationStatement[96965-97001]"
    }, {
      "left" : "Arc2D.Double arc2 = new Arc2D.Double(exploded, angle, extent / 2, \r\n                    Arc2D.OPEN);",
      "right" : "Arc2D.Double arc2 = new Arc2D.Double(exploded, angle, extent / 2, \r\n                    Arc2D.OPEN);",
      "info" : "VariableDeclarationStatement[96894-96994]:VariableDeclarationStatement[97015-97115]"
    }, {
      "left" : "Point2D point2 = arc2.getEndPoint();",
      "right" : "Point2D point2 = arc2.getEndPoint();",
      "info" : "VariableDeclarationStatement[97008-97044]:VariableDeclarationStatement[97129-97165]"
    }, {
      "left" : "double deltaX = (point1.getX() - point2.getX()) * explodePercent;",
      "right" : "double deltaX = (point1.getX() - point2.getX()) * explodePercent;",
      "info" : "VariableDeclarationStatement[97058-97123]:VariableDeclarationStatement[97179-97244]"
    }, {
      "left" : "double deltaY = (point1.getY() - point2.getY()) * explodePercent;",
      "right" : "double deltaY = (point1.getY() - point2.getY()) * explodePercent;",
      "info" : "VariableDeclarationStatement[97137-97202]:VariableDeclarationStatement[97258-97323]"
    }, {
      "left" : "return new Rectangle2D.Double(unexploded.getX() - deltaX, \r\n                    unexploded.getY() - deltaY, unexploded.getWidth(), \r\n                    unexploded.getHeight());",
      "right" : "return new Rectangle2D.Double(unexploded.getX() - deltaX, \r\n                    unexploded.getY() - deltaY, unexploded.getWidth(), \r\n                    unexploded.getHeight());",
      "info" : "ReturnStatement[97216-97393]:ReturnStatement[97337-97514]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[97629-97638]:Modifier[97750-97759]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[97639-97643]:PrimitiveType[97760-97764]"
    }, {
      "left" : "drawLeftLabel",
      "right" : "drawLeftLabel",
      "info" : "SimpleName[97644-97657]:SimpleName[97765-97778]"
    }, {
      "left" : "Graphics2D g2",
      "right" : "Graphics2D g2",
      "info" : "SingleVariableDeclaration[97658-97671]:SingleVariableDeclaration[97779-97792]"
    }, {
      "left" : "PiePlotState state",
      "right" : "PiePlotState state",
      "info" : "SingleVariableDeclaration[97673-97691]:SingleVariableDeclaration[97794-97812]"
    }, {
      "left" : "PieLabelRecord record",
      "right" : "PieLabelRecord record",
      "info" : "SingleVariableDeclaration[97728-97749]:SingleVariableDeclaration[97849-97870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97751-99060]:Block[97872-99181]"
    }, {
      "left" : "double anchorX = state.getLinkArea().getMinX();",
      "right" : "double anchorX = state.getLinkArea().getMinX();",
      "info" : "VariableDeclarationStatement[97764-97811]:VariableDeclarationStatement[97885-97932]"
    }, {
      "left" : "double targetX = anchorX - record.getGap();",
      "right" : "double targetX = anchorX - record.getGap();",
      "info" : "VariableDeclarationStatement[97821-97864]:VariableDeclarationStatement[97942-97985]"
    }, {
      "left" : "double targetY = record.getAllocatedY();",
      "right" : "double targetY = record.getAllocatedY();",
      "info" : "VariableDeclarationStatement[97874-97914]:VariableDeclarationStatement[97995-98035]"
    }, {
      "left" : "if (this.labelLinksVisible)",
      "right" : "if (this.labelLinksVisible)",
      "info" : "IfStatement[97934-98923]:IfStatement[98055-99044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97962-98923]:Block[98083-99044]"
    }, {
      "left" : "double theta = record.getAngle();",
      "right" : "double theta = record.getAngle();",
      "info" : "VariableDeclarationStatement[97977-98010]:VariableDeclarationStatement[98098-98131]"
    }, {
      "left" : "double linkX = state.getPieCenterX() + Math.cos(theta) \r\n                    * state.getPieWRadius() * record.getLinkPercent();",
      "right" : "double linkX = state.getPieCenterX() + Math.cos(theta) \r\n                    * state.getPieWRadius() * record.getLinkPercent();",
      "info" : "VariableDeclarationStatement[98024-98151]:VariableDeclarationStatement[98145-98272]"
    }, {
      "left" : "double linkY = state.getPieCenterY() - Math.sin(theta) \r\n                    * state.getPieHRadius() * record.getLinkPercent();",
      "right" : "double linkY = state.getPieCenterY() - Math.sin(theta) \r\n                    * state.getPieHRadius() * record.getLinkPercent();",
      "info" : "VariableDeclarationStatement[98165-98292]:VariableDeclarationStatement[98286-98413]"
    }, {
      "left" : "double elbowX = state.getPieCenterX() + Math.cos(theta) \r\n                    * state.getLinkArea().getWidth() / 2.0;",
      "right" : "double elbowX = state.getPieCenterX() + Math.cos(theta) \r\n                    * state.getLinkArea().getWidth() / 2.0;",
      "info" : "VariableDeclarationStatement[98306-98423]:VariableDeclarationStatement[98427-98544]"
    }, {
      "left" : "double elbowY = state.getPieCenterY() - Math.sin(theta) \r\n                    * state.getLinkArea().getHeight() / 2.0;",
      "right" : "double elbowY = state.getPieCenterY() - Math.sin(theta) \r\n                    * state.getLinkArea().getHeight() / 2.0;",
      "info" : "VariableDeclarationStatement[98437-98555]:VariableDeclarationStatement[98558-98676]"
    }, {
      "left" : "double anchorY = elbowY;",
      "right" : "double anchorY = elbowY;",
      "info" : "VariableDeclarationStatement[98569-98593]:VariableDeclarationStatement[98690-98714]"
    }, {
      "left" : "g2.setPaint(this.labelLinkPaint);",
      "right" : "g2.setPaint(this.labelLinkPaint);",
      "info" : "ExpressionStatement[98607-98640]:ExpressionStatement[98728-98761]"
    }, {
      "left" : "g2.setStroke(this.labelLinkStroke);",
      "right" : "g2.setStroke(this.labelLinkStroke);",
      "info" : "ExpressionStatement[98654-98689]:ExpressionStatement[98775-98810]"
    }, {
      "left" : "g2.draw(new Line2D.Double(linkX, linkY, elbowX, elbowY));",
      "right" : "g2.draw(new Line2D.Double(linkX, linkY, elbowX, elbowY));",
      "info" : "ExpressionStatement[98703-98760]:ExpressionStatement[98824-98881]"
    }, {
      "left" : "g2.draw(new Line2D.Double(anchorX, anchorY, elbowX, elbowY));",
      "right" : "g2.draw(new Line2D.Double(anchorX, anchorY, elbowX, elbowY));",
      "info" : "ExpressionStatement[98774-98835]:ExpressionStatement[98895-98956]"
    }, {
      "left" : "g2.draw(new Line2D.Double(anchorX, anchorY, targetX, targetY));",
      "right" : "g2.draw(new Line2D.Double(anchorX, anchorY, targetX, targetY));",
      "info" : "ExpressionStatement[98849-98912]:ExpressionStatement[98970-99033]"
    }, {
      "left" : "TextBox tb = record.getLabel();",
      "right" : "TextBox tb = record.getLabel();",
      "info" : "VariableDeclarationStatement[98933-98964]:VariableDeclarationStatement[99054-99085]"
    }, {
      "left" : "tb.draw(g2, (float) targetX, (float) targetY, RectangleAnchor.RIGHT);",
      "right" : "tb.draw(g2, (float) targetX, (float) targetY, RectangleAnchor.RIGHT);",
      "info" : "ExpressionStatement[98974-99043]:ExpressionStatement[99095-99164]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[99275-99284]:Modifier[99396-99405]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[99285-99289]:PrimitiveType[99406-99410]"
    }, {
      "left" : "drawRightLabel",
      "right" : "drawRightLabel",
      "info" : "SimpleName[99290-99304]:SimpleName[99411-99425]"
    }, {
      "left" : "Graphics2D g2",
      "right" : "Graphics2D g2",
      "info" : "SingleVariableDeclaration[99305-99318]:SingleVariableDeclaration[99426-99439]"
    }, {
      "left" : "PiePlotState state",
      "right" : "PiePlotState state",
      "info" : "SingleVariableDeclaration[99320-99338]:SingleVariableDeclaration[99441-99459]"
    }, {
      "left" : "PieLabelRecord record",
      "right" : "PieLabelRecord record",
      "info" : "SingleVariableDeclaration[99376-99397]:SingleVariableDeclaration[99497-99518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99399-100721]:Block[99520-100842]"
    }, {
      "left" : "double anchorX = state.getLinkArea().getMaxX();",
      "right" : "double anchorX = state.getLinkArea().getMaxX();",
      "info" : "VariableDeclarationStatement[99420-99467]:VariableDeclarationStatement[99541-99588]"
    }, {
      "left" : "double targetX = anchorX + record.getGap();",
      "right" : "double targetX = anchorX + record.getGap();",
      "info" : "VariableDeclarationStatement[99477-99520]:VariableDeclarationStatement[99598-99641]"
    }, {
      "left" : "double targetY = record.getAllocatedY();",
      "right" : "double targetY = record.getAllocatedY();",
      "info" : "VariableDeclarationStatement[99530-99570]:VariableDeclarationStatement[99651-99691]"
    }, {
      "left" : "if (this.labelLinksVisible)",
      "right" : "if (this.labelLinksVisible)",
      "info" : "IfStatement[99590-100579]:IfStatement[99711-100700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99618-100579]:Block[99739-100700]"
    }, {
      "left" : "double theta = record.getAngle();",
      "right" : "double theta = record.getAngle();",
      "info" : "VariableDeclarationStatement[99633-99666]:VariableDeclarationStatement[99754-99787]"
    }, {
      "left" : "double linkX = state.getPieCenterX() + Math.cos(theta) \r\n                    * state.getPieWRadius() * record.getLinkPercent();",
      "right" : "double linkX = state.getPieCenterX() + Math.cos(theta) \r\n                    * state.getPieWRadius() * record.getLinkPercent();",
      "info" : "VariableDeclarationStatement[99680-99807]:VariableDeclarationStatement[99801-99928]"
    }, {
      "left" : "double linkY = state.getPieCenterY() - Math.sin(theta) \r\n                    * state.getPieHRadius() * record.getLinkPercent();",
      "right" : "double linkY = state.getPieCenterY() - Math.sin(theta) \r\n                    * state.getPieHRadius() * record.getLinkPercent();",
      "info" : "VariableDeclarationStatement[99821-99948]:VariableDeclarationStatement[99942-100069]"
    }, {
      "left" : "double elbowX = state.getPieCenterX() + Math.cos(theta) \r\n                    * state.getLinkArea().getWidth() / 2.0;",
      "right" : "double elbowX = state.getPieCenterX() + Math.cos(theta) \r\n                    * state.getLinkArea().getWidth() / 2.0;",
      "info" : "VariableDeclarationStatement[99962-100079]:VariableDeclarationStatement[100083-100200]"
    }, {
      "left" : "double elbowY = state.getPieCenterY() - Math.sin(theta) \r\n                    * state.getLinkArea().getHeight() / 2.0;",
      "right" : "double elbowY = state.getPieCenterY() - Math.sin(theta) \r\n                    * state.getLinkArea().getHeight() / 2.0;",
      "info" : "VariableDeclarationStatement[100093-100211]:VariableDeclarationStatement[100214-100332]"
    }, {
      "left" : "double anchorY = elbowY;",
      "right" : "double anchorY = elbowY;",
      "info" : "VariableDeclarationStatement[100225-100249]:VariableDeclarationStatement[100346-100370]"
    }, {
      "left" : "g2.setPaint(this.labelLinkPaint);",
      "right" : "g2.setPaint(this.labelLinkPaint);",
      "info" : "ExpressionStatement[100263-100296]:ExpressionStatement[100384-100417]"
    }, {
      "left" : "g2.setStroke(this.labelLinkStroke);",
      "right" : "g2.setStroke(this.labelLinkStroke);",
      "info" : "ExpressionStatement[100310-100345]:ExpressionStatement[100431-100466]"
    }, {
      "left" : "g2.draw(new Line2D.Double(linkX, linkY, elbowX, elbowY));",
      "right" : "g2.draw(new Line2D.Double(linkX, linkY, elbowX, elbowY));",
      "info" : "ExpressionStatement[100359-100416]:ExpressionStatement[100480-100537]"
    }, {
      "left" : "g2.draw(new Line2D.Double(anchorX, anchorY, elbowX, elbowY));",
      "right" : "g2.draw(new Line2D.Double(anchorX, anchorY, elbowX, elbowY));",
      "info" : "ExpressionStatement[100430-100491]:ExpressionStatement[100551-100612]"
    }, {
      "left" : "g2.draw(new Line2D.Double(anchorX, anchorY, targetX, targetY));",
      "right" : "g2.draw(new Line2D.Double(anchorX, anchorY, targetX, targetY));",
      "info" : "ExpressionStatement[100505-100568]:ExpressionStatement[100626-100689]"
    }, {
      "left" : "TextBox tb = record.getLabel();",
      "right" : "TextBox tb = record.getLabel();",
      "info" : "VariableDeclarationStatement[100599-100630]:VariableDeclarationStatement[100720-100751]"
    }, {
      "left" : "tb.draw(g2, (float) targetX, (float) targetY, RectangleAnchor.LEFT);",
      "right" : "tb.draw(g2, (float) targetX, (float) targetY, RectangleAnchor.LEFT);",
      "info" : "ExpressionStatement[100640-100708]:ExpressionStatement[100761-100829]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[101042-101048]:Modifier[101163-101169]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[101049-101056]:PrimitiveType[101170-101177]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[101057-101063]:SimpleName[101178-101184]"
    }, {
      "left" : "Object obj",
      "right" : "Object obj",
      "info" : "SingleVariableDeclaration[101064-101074]:SingleVariableDeclaration[101185-101195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101076-106362]:Block[101197-106483]"
    }, {
      "left" : "if (obj == this)",
      "right" : "if (obj == this)",
      "info" : "IfStatement[101087-101142]:IfStatement[101208-101263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101104-101142]:Block[101225-101263]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[101119-101131]:ReturnStatement[101240-101252]"
    }, {
      "left" : "if (!(obj instanceof PiePlot))",
      "right" : "if (!(obj instanceof PiePlot))",
      "info" : "IfStatement[101152-101222]:IfStatement[101273-101343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101183-101222]:Block[101304-101343]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[101198-101211]:ReturnStatement[101319-101332]"
    }, {
      "left" : "if (!super.equals(obj))",
      "right" : "if (!super.equals(obj))",
      "info" : "IfStatement[101232-101295]:IfStatement[101353-101416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101256-101295]:Block[101377-101416]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[101271-101284]:ReturnStatement[101392-101405]"
    }, {
      "left" : "PiePlot that = (PiePlot) obj;",
      "right" : "PiePlot that = (PiePlot) obj;",
      "info" : "VariableDeclarationStatement[101305-101334]:VariableDeclarationStatement[101426-101455]"
    }, {
      "left" : "if (this.pieIndex != that.pieIndex)",
      "right" : "if (this.pieIndex != that.pieIndex)",
      "info" : "IfStatement[101344-101419]:IfStatement[101465-101540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101380-101419]:Block[101501-101540]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[101395-101408]:ReturnStatement[101516-101529]"
    }, {
      "left" : "if (this.interiorGap != that.interiorGap)",
      "right" : "if (this.interiorGap != that.interiorGap)",
      "info" : "IfStatement[101429-101510]:IfStatement[101550-101631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101471-101510]:Block[101592-101631]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[101486-101499]:ReturnStatement[101607-101620]"
    }, {
      "left" : "if (this.circular != that.circular)",
      "right" : "if (this.circular != that.circular)",
      "info" : "IfStatement[101520-101595]:IfStatement[101641-101716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101556-101595]:Block[101677-101716]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[101571-101584]:ReturnStatement[101692-101705]"
    }, {
      "left" : "if (this.startAngle != that.startAngle)",
      "right" : "if (this.startAngle != that.startAngle)",
      "info" : "IfStatement[101605-101684]:IfStatement[101726-101805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101645-101684]:Block[101766-101805]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[101660-101673]:ReturnStatement[101781-101794]"
    }, {
      "left" : "if (this.direction != that.direction)",
      "right" : "if (this.direction != that.direction)",
      "info" : "IfStatement[101694-101771]:IfStatement[101815-101892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101732-101771]:Block[101853-101892]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[101747-101760]:ReturnStatement[101868-101881]"
    }, {
      "left" : "if (this.ignoreZeroValues != that.ignoreZeroValues)",
      "right" : "if (this.ignoreZeroValues != that.ignoreZeroValues)",
      "info" : "IfStatement[101781-101872]:IfStatement[101902-101993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101833-101872]:Block[101954-101993]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[101848-101861]:ReturnStatement[101969-101982]"
    }, {
      "left" : "if (this.ignoreNullValues != that.ignoreNullValues)",
      "right" : "if (this.ignoreNullValues != that.ignoreNullValues)",
      "info" : "IfStatement[101882-101973]:IfStatement[102003-102094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101934-101973]:Block[102055-102094]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[101949-101962]:ReturnStatement[102070-102083]"
    }, {
      "left" : "if (!ObjectUtilities.equal(this.sectionPaintMap, \r\n                that.sectionPaintMap))",
      "right" : "if (!ObjectUtilities.equal(this.sectionPaintMap, \r\n                that.sectionPaintMap))",
      "info" : "IfStatement[101983-102112]:IfStatement[102104-102233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102073-102112]:Block[102194-102233]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[102088-102101]:ReturnStatement[102209-102222]"
    }, {
      "left" : "if (!PaintUtilities.equal(this.baseSectionPaint, \r\n                that.baseSectionPaint))",
      "right" : "if (!PaintUtilities.equal(this.baseSectionPaint, \r\n                that.baseSectionPaint))",
      "info" : "IfStatement[102122-102252]:IfStatement[102243-102373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102213-102252]:Block[102334-102373]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[102228-102241]:ReturnStatement[102349-102362]"
    }, {
      "left" : "if (this.sectionOutlinesVisible != that.sectionOutlinesVisible)",
      "right" : "if (this.sectionOutlinesVisible != that.sectionOutlinesVisible)",
      "info" : "IfStatement[102262-102365]:IfStatement[102383-102486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102326-102365]:Block[102447-102486]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[102341-102354]:ReturnStatement[102462-102475]"
    }, {
      "left" : "if (!ObjectUtilities.equal(this.sectionOutlinePaintMap, \r\n                that.sectionOutlinePaintMap))",
      "right" : "if (!ObjectUtilities.equal(this.sectionOutlinePaintMap, \r\n                that.sectionOutlinePaintMap))",
      "info" : "IfStatement[102375-102518]:IfStatement[102496-102639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102479-102518]:Block[102600-102639]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[102494-102507]:ReturnStatement[102615-102628]"
    }, {
      "left" : "if (!PaintUtilities.equal(\r\n            this.baseSectionOutlinePaint, that.baseSectionOutlinePaint\r\n        ))",
      "right" : "if (!PaintUtilities.equal(\r\n            this.baseSectionOutlinePaint, that.baseSectionOutlinePaint\r\n        ))",
      "info" : "IfStatement[102528-102678]:IfStatement[102649-102799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102639-102678]:Block[102760-102799]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[102654-102667]:ReturnStatement[102775-102788]"
    }, {
      "left" : "if (!ObjectUtilities.equal(this.sectionOutlineStrokeMap, \r\n                that.sectionOutlineStrokeMap))",
      "right" : "if (!ObjectUtilities.equal(this.sectionOutlineStrokeMap, \r\n                that.sectionOutlineStrokeMap))",
      "info" : "IfStatement[102688-102833]:IfStatement[102809-102954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102794-102833]:Block[102915-102954]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[102809-102822]:ReturnStatement[102930-102943]"
    }, {
      "left" : "if (!ObjectUtilities.equal(\r\n            this.baseSectionOutlineStroke, that.baseSectionOutlineStroke\r\n        ))",
      "right" : "if (!ObjectUtilities.equal(\r\n            this.baseSectionOutlineStroke, that.baseSectionOutlineStroke\r\n        ))",
      "info" : "IfStatement[102843-102996]:IfStatement[102964-103117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102957-102996]:Block[103078-103117]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[102972-102985]:ReturnStatement[103093-103106]"
    }, {
      "left" : "if (!PaintUtilities.equal(this.shadowPaint, that.shadowPaint))",
      "right" : "if (!PaintUtilities.equal(this.shadowPaint, that.shadowPaint))",
      "info" : "IfStatement[103006-103108]:IfStatement[103127-103229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103069-103108]:Block[103190-103229]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[103084-103097]:ReturnStatement[103205-103218]"
    }, {
      "left" : "if (!(this.shadowXOffset == that.shadowXOffset))",
      "right" : "if (!(this.shadowXOffset == that.shadowXOffset))",
      "info" : "IfStatement[103118-103206]:IfStatement[103239-103327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103167-103206]:Block[103288-103327]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[103182-103195]:ReturnStatement[103303-103316]"
    }, {
      "left" : "if (!(this.shadowYOffset == that.shadowYOffset))",
      "right" : "if (!(this.shadowYOffset == that.shadowYOffset))",
      "info" : "IfStatement[103216-103304]:IfStatement[103337-103425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103265-103304]:Block[103386-103425]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[103280-103293]:ReturnStatement[103401-103414]"
    }, {
      "left" : "if (!ObjectUtilities.equal(this.explodePercentages, \r\n                that.explodePercentages))",
      "right" : "if (!ObjectUtilities.equal(this.explodePercentages, \r\n                that.explodePercentages))",
      "info" : "IfStatement[103314-103449]:IfStatement[103435-103570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103410-103449]:Block[103531-103570]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[103425-103438]:ReturnStatement[103546-103559]"
    }, {
      "left" : "if (!ObjectUtilities.equal(this.labelGenerator, \r\n                that.labelGenerator))",
      "right" : "if (!ObjectUtilities.equal(this.labelGenerator, \r\n                that.labelGenerator))",
      "info" : "IfStatement[103459-103586]:IfStatement[103580-103707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103547-103586]:Block[103668-103707]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[103562-103575]:ReturnStatement[103683-103696]"
    }, {
      "left" : "if (!ObjectUtilities.equal(this.labelFont, that.labelFont))",
      "right" : "if (!ObjectUtilities.equal(this.labelFont, that.labelFont))",
      "info" : "IfStatement[103596-103695]:IfStatement[103717-103816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103656-103695]:Block[103777-103816]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[103671-103684]:ReturnStatement[103792-103805]"
    }, {
      "left" : "if (!PaintUtilities.equal(this.labelPaint, that.labelPaint))",
      "right" : "if (!PaintUtilities.equal(this.labelPaint, that.labelPaint))",
      "info" : "IfStatement[103705-103805]:IfStatement[103826-103926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103766-103805]:Block[103887-103926]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[103781-103794]:ReturnStatement[103902-103915]"
    }, {
      "left" : "if (!PaintUtilities.equal(this.labelBackgroundPaint, \r\n                that.labelBackgroundPaint))",
      "right" : "if (!PaintUtilities.equal(this.labelBackgroundPaint, \r\n                that.labelBackgroundPaint))",
      "info" : "IfStatement[103815-103953]:IfStatement[103936-104074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103914-103953]:Block[104035-104074]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[103929-103942]:ReturnStatement[104050-104063]"
    }, {
      "left" : "if (!PaintUtilities.equal(this.labelOutlinePaint, \r\n                that.labelOutlinePaint))",
      "right" : "if (!PaintUtilities.equal(this.labelOutlinePaint, \r\n                that.labelOutlinePaint))",
      "info" : "IfStatement[103963-104095]:IfStatement[104084-104216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104056-104095]:Block[104177-104216]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[104071-104084]:ReturnStatement[104192-104205]"
    }, {
      "left" : "if (!ObjectUtilities.equal(this.labelOutlineStroke, \r\n                that.labelOutlineStroke))",
      "right" : "if (!ObjectUtilities.equal(this.labelOutlineStroke, \r\n                that.labelOutlineStroke))",
      "info" : "IfStatement[104105-104240]:IfStatement[104226-104361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104201-104240]:Block[104322-104361]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[104216-104229]:ReturnStatement[104337-104350]"
    }, {
      "left" : "if (!PaintUtilities.equal(this.labelShadowPaint, \r\n                that.labelShadowPaint))",
      "right" : "if (!PaintUtilities.equal(this.labelShadowPaint, \r\n                that.labelShadowPaint))",
      "info" : "IfStatement[104250-104380]:IfStatement[104371-104501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104341-104380]:Block[104462-104501]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[104356-104369]:ReturnStatement[104477-104490]"
    }, {
      "left" : "if (this.simpleLabels != that.simpleLabels)",
      "right" : "if (this.simpleLabels != that.simpleLabels)",
      "info" : "IfStatement[104390-104473]:IfStatement[104511-104594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104434-104473]:Block[104555-104594]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[104449-104462]:ReturnStatement[104570-104583]"
    }, {
      "left" : "if (!this.simpleLabelOffset.equals(that.simpleLabelOffset))",
      "right" : "if (!this.simpleLabelOffset.equals(that.simpleLabelOffset))",
      "info" : "IfStatement[104483-104582]:IfStatement[104604-104703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104543-104582]:Block[104664-104703]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[104558-104571]:ReturnStatement[104679-104692]"
    }, {
      "left" : "if (!this.labelPadding.equals(that.labelPadding))",
      "right" : "if (!this.labelPadding.equals(that.labelPadding))",
      "info" : "IfStatement[104592-104681]:IfStatement[104713-104802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104642-104681]:Block[104763-104802]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[104657-104670]:ReturnStatement[104778-104791]"
    }, {
      "left" : "if (!(this.maximumLabelWidth == that.maximumLabelWidth))",
      "right" : "if (!(this.maximumLabelWidth == that.maximumLabelWidth))",
      "info" : "IfStatement[104691-104787]:IfStatement[104812-104908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104748-104787]:Block[104869-104908]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[104763-104776]:ReturnStatement[104884-104897]"
    }, {
      "left" : "if (!(this.labelGap == that.labelGap))",
      "right" : "if (!(this.labelGap == that.labelGap))",
      "info" : "IfStatement[104797-104875]:IfStatement[104918-104996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104836-104875]:Block[104957-104996]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[104851-104864]:ReturnStatement[104972-104985]"
    }, {
      "left" : "if (!(this.labelLinkMargin == that.labelLinkMargin))",
      "right" : "if (!(this.labelLinkMargin == that.labelLinkMargin))",
      "info" : "IfStatement[104885-104977]:IfStatement[105006-105098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104938-104977]:Block[105059-105098]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[104953-104966]:ReturnStatement[105074-105087]"
    }, {
      "left" : "if (this.labelLinksVisible != that.labelLinksVisible)",
      "right" : "if (this.labelLinksVisible != that.labelLinksVisible)",
      "info" : "IfStatement[104987-105080]:IfStatement[105108-105201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105041-105080]:Block[105162-105201]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[105056-105069]:ReturnStatement[105177-105190]"
    }, {
      "left" : "if (!PaintUtilities.equal(this.labelLinkPaint, that.labelLinkPaint))",
      "right" : "if (!PaintUtilities.equal(this.labelLinkPaint, that.labelLinkPaint))",
      "info" : "IfStatement[105090-105198]:IfStatement[105211-105319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105159-105198]:Block[105280-105319]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[105174-105187]:ReturnStatement[105295-105308]"
    }, {
      "left" : "if (!ObjectUtilities.equal(this.labelLinkStroke, \r\n                that.labelLinkStroke))",
      "right" : "if (!ObjectUtilities.equal(this.labelLinkStroke, \r\n                that.labelLinkStroke))",
      "info" : "IfStatement[105208-105337]:IfStatement[105329-105458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105298-105337]:Block[105419-105458]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[105313-105326]:ReturnStatement[105434-105447]"
    }, {
      "left" : "if (!ObjectUtilities.equal(this.toolTipGenerator, \r\n                that.toolTipGenerator))",
      "right" : "if (!ObjectUtilities.equal(this.toolTipGenerator, \r\n                that.toolTipGenerator))",
      "info" : "IfStatement[105347-105478]:IfStatement[105468-105599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105439-105478]:Block[105560-105599]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[105454-105467]:ReturnStatement[105575-105588]"
    }, {
      "left" : "if (!ObjectUtilities.equal(this.urlGenerator, that.urlGenerator))",
      "right" : "if (!ObjectUtilities.equal(this.urlGenerator, that.urlGenerator))",
      "info" : "IfStatement[105488-105593]:IfStatement[105609-105714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105554-105593]:Block[105675-105714]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[105569-105582]:ReturnStatement[105690-105703]"
    }, {
      "left" : "if (!(this.minimumArcAngleToDraw == that.minimumArcAngleToDraw))",
      "right" : "if (!(this.minimumArcAngleToDraw == that.minimumArcAngleToDraw))",
      "info" : "IfStatement[105603-105707]:IfStatement[105724-105828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105668-105707]:Block[105789-105828]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[105683-105696]:ReturnStatement[105804-105817]"
    }, {
      "left" : "if (!ShapeUtilities.equal(this.legendItemShape, that.legendItemShape))",
      "right" : "if (!ShapeUtilities.equal(this.legendItemShape, that.legendItemShape))",
      "info" : "IfStatement[105717-105827]:IfStatement[105838-105948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105788-105827]:Block[105909-105948]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[105803-105816]:ReturnStatement[105924-105937]"
    }, {
      "left" : "if (!ObjectUtilities.equal(this.legendLabelGenerator, \r\n                that.legendLabelGenerator))",
      "right" : "if (!ObjectUtilities.equal(this.legendLabelGenerator, \r\n                that.legendLabelGenerator))",
      "info" : "IfStatement[105837-105976]:IfStatement[105958-106097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105937-105976]:Block[106058-106097]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[105952-105965]:ReturnStatement[106073-106086]"
    }, {
      "left" : "if (!ObjectUtilities.equal(this.legendLabelToolTipGenerator,\r\n                that.legendLabelToolTipGenerator))",
      "right" : "if (!ObjectUtilities.equal(this.legendLabelToolTipGenerator,\r\n                that.legendLabelToolTipGenerator))",
      "info" : "IfStatement[105986-106138]:IfStatement[106107-106259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106099-106138]:Block[106220-106259]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[106114-106127]:ReturnStatement[106235-106248]"
    }, {
      "left" : "if (!ObjectUtilities.equal(this.legendLabelURLGenerator,\r\n                that.legendLabelURLGenerator))",
      "right" : "if (!ObjectUtilities.equal(this.legendLabelURLGenerator,\r\n                that.legendLabelURLGenerator))",
      "info" : "IfStatement[106148-106292]:IfStatement[106269-106413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106253-106292]:Block[106374-106413]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[106268-106281]:ReturnStatement[106389-106402]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[106343-106355]:ReturnStatement[106464-106476]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[106582-106588]:Modifier[106703-106709]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[106589-106595]:SimpleType[106710-106716]"
    }, {
      "left" : "clone",
      "right" : "clone",
      "info" : "SimpleName[106596-106601]:SimpleName[106717-106722]"
    }, {
      "left" : "CloneNotSupportedException",
      "right" : "CloneNotSupportedException",
      "info" : "SimpleType[106611-106637]:SimpleType[106732-106758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106638-107732]:Block[106759-107853]"
    }, {
      "left" : "PiePlot clone = (PiePlot) super.clone();",
      "right" : "PiePlot clone = (PiePlot) super.clone();",
      "info" : "VariableDeclarationStatement[106649-106689]:VariableDeclarationStatement[106770-106810]"
    }, {
      "left" : "if (clone.dataset != null)",
      "right" : "if (clone.dataset != null)",
      "info" : "IfStatement[106699-106791]:IfStatement[106820-106912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106726-106791]:Block[106847-106912]"
    }, {
      "left" : "clone.dataset.addChangeListener(clone);",
      "right" : "clone.dataset.addChangeListener(clone);",
      "info" : "ExpressionStatement[106741-106780]:ExpressionStatement[106862-106901]"
    }, {
      "left" : "if (this.urlGenerator instanceof PublicCloneable)",
      "right" : "if (this.urlGenerator instanceof PublicCloneable)",
      "info" : "IfStatement[106801-106979]:IfStatement[106922-107100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106851-106979]:Block[106972-107100]"
    }, {
      "left" : "clone.urlGenerator = (PieURLGenerator) ObjectUtilities.clone(\r\n                    this.urlGenerator);",
      "right" : "clone.urlGenerator = (PieURLGenerator) ObjectUtilities.clone(\r\n                    this.urlGenerator);",
      "info" : "ExpressionStatement[106866-106968]:ExpressionStatement[106987-107089]"
    }, {
      "left" : "clone.legendItemShape = ShapeUtilities.clone(this.legendItemShape);",
      "right" : "clone.legendItemShape = ShapeUtilities.clone(this.legendItemShape);",
      "info" : "ExpressionStatement[106989-107056]:ExpressionStatement[107110-107177]"
    }, {
      "left" : "if (this.legendLabelGenerator != null)",
      "right" : "if (this.legendLabelGenerator != null)",
      "info" : "IfStatement[107066-107258]:IfStatement[107187-107379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107105-107258]:Block[107226-107379]"
    }, {
      "left" : "clone.legendLabelGenerator = (PieSectionLabelGenerator) \r\n                    ObjectUtilities.clone(this.legendLabelGenerator);",
      "right" : "clone.legendLabelGenerator = (PieSectionLabelGenerator) \r\n                    ObjectUtilities.clone(this.legendLabelGenerator);",
      "info" : "ExpressionStatement[107120-107247]:ExpressionStatement[107241-107368]"
    }, {
      "left" : "if (this.legendLabelToolTipGenerator != null)",
      "right" : "if (this.legendLabelToolTipGenerator != null)",
      "info" : "IfStatement[107268-107481]:IfStatement[107389-107602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107314-107481]:Block[107435-107602]"
    }, {
      "left" : "clone.legendLabelToolTipGenerator = (PieSectionLabelGenerator) \r\n                    ObjectUtilities.clone(this.legendLabelToolTipGenerator);",
      "right" : "clone.legendLabelToolTipGenerator = (PieSectionLabelGenerator) \r\n                    ObjectUtilities.clone(this.legendLabelToolTipGenerator);",
      "info" : "ExpressionStatement[107329-107470]:ExpressionStatement[107450-107591]"
    }, {
      "left" : "if (this.legendLabelURLGenerator instanceof PublicCloneable)",
      "right" : "if (this.legendLabelURLGenerator instanceof PublicCloneable)",
      "info" : "IfStatement[107491-107702]:IfStatement[107612-107823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107552-107702]:Block[107673-107823]"
    }, {
      "left" : "clone.legendLabelURLGenerator = (PieURLGenerator) \r\n                    ObjectUtilities.clone(this.legendLabelURLGenerator);",
      "right" : "clone.legendLabelURLGenerator = (PieURLGenerator) \r\n                    ObjectUtilities.clone(this.legendLabelURLGenerator);",
      "info" : "ExpressionStatement[107567-107691]:ExpressionStatement[107688-107812]"
    }, {
      "left" : "return clone;",
      "right" : "return clone;",
      "info" : "ReturnStatement[107712-107725]:ReturnStatement[107833-107846]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[107911-107918]:Modifier[108032-108039]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[107919-107923]:PrimitiveType[108040-108044]"
    }, {
      "left" : "writeObject",
      "right" : "writeObject",
      "info" : "SimpleName[107924-107935]:SimpleName[108045-108056]"
    }, {
      "left" : "ObjectOutputStream stream",
      "right" : "ObjectOutputStream stream",
      "info" : "SingleVariableDeclaration[107936-107961]:SingleVariableDeclaration[108057-108082]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[107970-107981]:SimpleType[108091-108102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107982-108854]:Block[108103-108975]"
    }, {
      "left" : "stream.defaultWriteObject();",
      "right" : "stream.defaultWriteObject();",
      "info" : "ExpressionStatement[107993-108021]:ExpressionStatement[108114-108142]"
    }, {
      "left" : "SerialUtilities.writePaint(this.baseSectionPaint, stream);",
      "right" : "SerialUtilities.writePaint(this.baseSectionPaint, stream);",
      "info" : "ExpressionStatement[108031-108089]:ExpressionStatement[108152-108210]"
    }, {
      "left" : "SerialUtilities.writePaint(this.baseSectionOutlinePaint, stream);",
      "right" : "SerialUtilities.writePaint(this.baseSectionOutlinePaint, stream);",
      "info" : "ExpressionStatement[108099-108164]:ExpressionStatement[108220-108285]"
    }, {
      "left" : "SerialUtilities.writeStroke(this.baseSectionOutlineStroke, stream);",
      "right" : "SerialUtilities.writeStroke(this.baseSectionOutlineStroke, stream);",
      "info" : "ExpressionStatement[108174-108241]:ExpressionStatement[108295-108362]"
    }, {
      "left" : "SerialUtilities.writePaint(this.shadowPaint, stream);",
      "right" : "SerialUtilities.writePaint(this.shadowPaint, stream);",
      "info" : "ExpressionStatement[108251-108304]:ExpressionStatement[108372-108425]"
    }, {
      "left" : "SerialUtilities.writePaint(this.labelPaint, stream);",
      "right" : "SerialUtilities.writePaint(this.labelPaint, stream);",
      "info" : "ExpressionStatement[108314-108366]:ExpressionStatement[108435-108487]"
    }, {
      "left" : "SerialUtilities.writePaint(this.labelBackgroundPaint, stream);",
      "right" : "SerialUtilities.writePaint(this.labelBackgroundPaint, stream);",
      "info" : "ExpressionStatement[108376-108438]:ExpressionStatement[108497-108559]"
    }, {
      "left" : "SerialUtilities.writePaint(this.labelOutlinePaint, stream);",
      "right" : "SerialUtilities.writePaint(this.labelOutlinePaint, stream);",
      "info" : "ExpressionStatement[108448-108507]:ExpressionStatement[108569-108628]"
    }, {
      "left" : "SerialUtilities.writeStroke(this.labelOutlineStroke, stream);",
      "right" : "SerialUtilities.writeStroke(this.labelOutlineStroke, stream);",
      "info" : "ExpressionStatement[108517-108578]:ExpressionStatement[108638-108699]"
    }, {
      "left" : "SerialUtilities.writePaint(this.labelShadowPaint, stream);",
      "right" : "SerialUtilities.writePaint(this.labelShadowPaint, stream);",
      "info" : "ExpressionStatement[108588-108646]:ExpressionStatement[108709-108767]"
    }, {
      "left" : "SerialUtilities.writePaint(this.labelLinkPaint, stream);",
      "right" : "SerialUtilities.writePaint(this.labelLinkPaint, stream);",
      "info" : "ExpressionStatement[108656-108712]:ExpressionStatement[108777-108833]"
    }, {
      "left" : "SerialUtilities.writeStroke(this.labelLinkStroke, stream);",
      "right" : "SerialUtilities.writeStroke(this.labelLinkStroke, stream);",
      "info" : "ExpressionStatement[108722-108780]:ExpressionStatement[108843-108901]"
    }, {
      "left" : "SerialUtilities.writeShape(this.legendItemShape, stream);",
      "right" : "SerialUtilities.writeShape(this.legendItemShape, stream);",
      "info" : "ExpressionStatement[108790-108847]:ExpressionStatement[108911-108968]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[109105-109112]:Modifier[109226-109233]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[109113-109117]:PrimitiveType[109234-109238]"
    }, {
      "left" : "readObject",
      "right" : "readObject",
      "info" : "SimpleName[109118-109128]:SimpleName[109239-109249]"
    }, {
      "left" : "ObjectInputStream stream",
      "right" : "ObjectInputStream stream",
      "info" : "SingleVariableDeclaration[109129-109153]:SingleVariableDeclaration[109250-109274]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[109172-109183]:SimpleType[109293-109304]"
    }, {
      "left" : "ClassNotFoundException",
      "right" : "ClassNotFoundException",
      "info" : "SimpleType[109185-109207]:SimpleType[109306-109328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109208-110079]:Block[109329-110200]"
    }, {
      "left" : "stream.defaultReadObject();",
      "right" : "stream.defaultReadObject();",
      "info" : "ExpressionStatement[109219-109246]:ExpressionStatement[109340-109367]"
    }, {
      "left" : "this.baseSectionPaint = SerialUtilities.readPaint(stream);",
      "right" : "this.baseSectionPaint = SerialUtilities.readPaint(stream);",
      "info" : "ExpressionStatement[109256-109314]:ExpressionStatement[109377-109435]"
    }, {
      "left" : "this.baseSectionOutlinePaint = SerialUtilities.readPaint(stream);",
      "right" : "this.baseSectionOutlinePaint = SerialUtilities.readPaint(stream);",
      "info" : "ExpressionStatement[109324-109389]:ExpressionStatement[109445-109510]"
    }, {
      "left" : "this.baseSectionOutlineStroke = SerialUtilities.readStroke(stream);",
      "right" : "this.baseSectionOutlineStroke = SerialUtilities.readStroke(stream);",
      "info" : "ExpressionStatement[109399-109466]:ExpressionStatement[109520-109587]"
    }, {
      "left" : "this.shadowPaint = SerialUtilities.readPaint(stream);",
      "right" : "this.shadowPaint = SerialUtilities.readPaint(stream);",
      "info" : "ExpressionStatement[109476-109529]:ExpressionStatement[109597-109650]"
    }, {
      "left" : "this.labelPaint = SerialUtilities.readPaint(stream);",
      "right" : "this.labelPaint = SerialUtilities.readPaint(stream);",
      "info" : "ExpressionStatement[109539-109591]:ExpressionStatement[109660-109712]"
    }, {
      "left" : "this.labelBackgroundPaint = SerialUtilities.readPaint(stream);",
      "right" : "this.labelBackgroundPaint = SerialUtilities.readPaint(stream);",
      "info" : "ExpressionStatement[109601-109663]:ExpressionStatement[109722-109784]"
    }, {
      "left" : "this.labelOutlinePaint = SerialUtilities.readPaint(stream);",
      "right" : "this.labelOutlinePaint = SerialUtilities.readPaint(stream);",
      "info" : "ExpressionStatement[109673-109732]:ExpressionStatement[109794-109853]"
    }, {
      "left" : "this.labelOutlineStroke = SerialUtilities.readStroke(stream);",
      "right" : "this.labelOutlineStroke = SerialUtilities.readStroke(stream);",
      "info" : "ExpressionStatement[109742-109803]:ExpressionStatement[109863-109924]"
    }, {
      "left" : "this.labelShadowPaint = SerialUtilities.readPaint(stream);",
      "right" : "this.labelShadowPaint = SerialUtilities.readPaint(stream);",
      "info" : "ExpressionStatement[109813-109871]:ExpressionStatement[109934-109992]"
    }, {
      "left" : "this.labelLinkPaint = SerialUtilities.readPaint(stream);",
      "right" : "this.labelLinkPaint = SerialUtilities.readPaint(stream);",
      "info" : "ExpressionStatement[109881-109937]:ExpressionStatement[110002-110058]"
    }, {
      "left" : "this.labelLinkStroke = SerialUtilities.readStroke(stream);",
      "right" : "this.labelLinkStroke = SerialUtilities.readStroke(stream);",
      "info" : "ExpressionStatement[109947-110005]:ExpressionStatement[110068-110126]"
    }, {
      "left" : "this.legendItemShape = SerialUtilities.readShape(stream);",
      "right" : "this.legendItemShape = SerialUtilities.readShape(stream);",
      "info" : "ExpressionStatement[110015-110072]:ExpressionStatement[110136-110193]"
    } ]
  },
  "interFileMappings" : { }
}