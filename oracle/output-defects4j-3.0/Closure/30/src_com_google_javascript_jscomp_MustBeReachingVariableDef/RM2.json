{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "MustBeReachingVariableDef",
      "right" : "MustBeReachingVariableDef",
      "info" : "TypeDeclaration[1301-14133]:TypeDeclaration[1301-14303]"
    }, {
      "left" : "private final Scope jsScope;",
      "right" : "private final Scope jsScope;",
      "info" : "FieldDeclaration[1774-1802]:FieldDeclaration[1774-1802]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[1805-1845]:FieldDeclaration[1805-1845]"
    }, {
      "left" : "private final Set<Var> escaped;",
      "right" : "private final Set<Var> escaped;",
      "info" : "FieldDeclaration[1848-1879]:FieldDeclaration[1848-1879]"
    }, {
      "left" : "MustBeReachingVariableDef(\n      ControlFlowGraph<Node> cfg, Scope jsScope, AbstractCompiler compiler)",
      "right" : "MustBeReachingVariableDef(\n      ControlFlowGraph<Node> cfg, Scope jsScope, AbstractCompiler compiler)",
      "info" : "MethodDeclaration[1883-2170]:MethodDeclaration[1883-2170]"
    }, {
      "left" : "Definition",
      "right" : "Definition",
      "info" : "TypeDeclaration[2174-2972]:TypeDeclaration[2174-3021]"
    }, {
      "left" : "final Node node;",
      "right" : "final Node node;",
      "info" : "FieldDeclaration[2520-2536]:FieldDeclaration[2520-2536]"
    }, {
      "left" : "final Set<Var> depends = Sets.newHashSet();",
      "right" : "final Set<Var> depends = Sets.newHashSet();",
      "info" : "FieldDeclaration[2541-2584]:FieldDeclaration[2541-2584]"
    }, {
      "left" : "Definition(Node node)",
      "right" : "Definition(Node node)",
      "info" : "MethodDeclaration[2590-2643]:MethodDeclaration[2639-2692]"
    }, {
      "left" : "public boolean equals(Object other)",
      "right" : "public boolean equals(Object other)",
      "info" : "MethodDeclaration[2649-2968]:MethodDeclaration[2698-3017]"
    }, {
      "left" : "MustDef",
      "right" : "MustDef",
      "info" : "TypeDeclaration[2976-4867]:TypeDeclaration[3025-4916]"
    }, {
      "left" : "final Map<Var, Definition> reachingDef;",
      "right" : "final Map<Var, Definition> reachingDef;",
      "info" : "FieldDeclaration[3918-3957]:FieldDeclaration[3967-4006]"
    }, {
      "left" : "public MustDef()",
      "right" : "public MustDef()",
      "info" : "MethodDeclaration[3963-4026]:MethodDeclaration[4012-4075]"
    }, {
      "left" : "public MustDef(Iterator<Var> vars)",
      "right" : "public MustDef(Iterator<Var> vars)",
      "info" : "MethodDeclaration[4032-4463]:MethodDeclaration[4081-4512]"
    }, {
      "left" : "public MustDef(MustDef other)",
      "right" : "public MustDef(MustDef other)",
      "info" : "MethodDeclaration[4469-4691]:MethodDeclaration[4518-4740]"
    }, {
      "left" : "public boolean equals(Object other)",
      "right" : "public boolean equals(Object other)",
      "info" : "MethodDeclaration[4697-4863]:MethodDeclaration[4746-4912]"
    }, {
      "left" : "MustDefJoin",
      "right" : "MustDefJoin",
      "info" : "TypeDeclaration[4871-6310]:TypeDeclaration[4920-6359]"
    }, {
      "left" : "public MustDef apply(MustDef a, MustDef b)",
      "right" : "public MustDef apply(MustDef a, MustDef b)",
      "info" : "MethodDeclaration[4947-6306]:MethodDeclaration[4996-6355]"
    }, {
      "left" : "boolean isForward()",
      "right" : "boolean isForward()",
      "info" : "MethodDeclaration[6314-6368]:MethodDeclaration[6363-6417]"
    }, {
      "left" : "MustDef createEntryLattice()",
      "right" : "MustDef createEntryLattice()",
      "info" : "MethodDeclaration[6372-6461]:MethodDeclaration[6421-6510]"
    }, {
      "left" : "MustDef createInitialEstimateLattice()",
      "right" : "MustDef createInitialEstimateLattice()",
      "info" : "MethodDeclaration[6465-6547]:MethodDeclaration[6514-6596]"
    }, {
      "left" : "MustDef flowThrough(Node n, MustDef input)",
      "right" : "MustDef flowThrough(Node n, MustDef input)",
      "info" : "MethodDeclaration[6551-7049]:MethodDeclaration[6600-7098]"
    }, {
      "left" : "private void computeMustDef(\n      Node n, Node cfgNode, MustDef output, boolean conditional)",
      "right" : "private void computeMustDef(\n      Node n, Node cfgNode, MustDef output, boolean conditional)",
      "info" : "MethodDeclaration[7053-10390]:MethodDeclaration[7102-10439]"
    }, {
      "left" : "private void addToDefIfLocal( String name, @Nullable Node node,\n      @Nullable Node rValue, MustDef def)",
      "right" : "private void addToDefIfLocal( String name, @Nullable Node node,\n      @Nullable Node rValue, MustDef def)",
      "info" : "MethodDeclaration[10394-11602]:MethodDeclaration[10443-11651]"
    }, {
      "left" : "private void escapeParameters(MustDef output)",
      "right" : "private void escapeParameters(MustDef output)",
      "info" : "MethodDeclaration[11606-12305]:MethodDeclaration[11655-12354]"
    }, {
      "left" : "private boolean isParameter(Var v)",
      "right" : "private boolean isParameter(Var v)",
      "info" : "MethodDeclaration[12309-12393]:MethodDeclaration[12358-12442]"
    }, {
      "left" : "private void computeDependence(final Definition def, Node rValue)",
      "right" : "private void computeDependence(final Definition def, Node rValue)",
      "info" : "MethodDeclaration[12397-12941]:MethodDeclaration[12446-13051]"
    }, {
      "left" : "Node getDef(String name, Node useNode)",
      "right" : "Node getDef(String name, Node useNode)",
      "info" : "MethodDeclaration[12945-13702]:MethodDeclaration[13055-13812]"
    }, {
      "left" : "boolean dependsOnOuterScopeVars(String name, Node useNode)",
      "right" : "boolean dependsOnOuterScopeVars(String name, Node useNode)",
      "info" : "MethodDeclaration[13706-14131]:MethodDeclaration[13816-14301]"
    } ],
    "mappings" : [
 {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1613-1618]:TYPE_DECLARATION_KIND[1613-1618]"
    }, {
      "left" : "MustBeReachingVariableDef",
      "right" : "MustBeReachingVariableDef",
      "info" : "SimpleName[1619-1644]:SimpleName[1619-1644]"
    }, {
      "left" : "MustBeReachingVariableDef",
      "right" : "MustBeReachingVariableDef",
      "info" : "SimpleName[1883-1908]:SimpleName[1883-1908]"
    }, {
      "left" : "ControlFlowGraph<Node> cfg",
      "right" : "ControlFlowGraph<Node> cfg",
      "info" : "SingleVariableDeclaration[1916-1942]:SingleVariableDeclaration[1916-1942]"
    }, {
      "left" : "Scope jsScope",
      "right" : "Scope jsScope",
      "info" : "SingleVariableDeclaration[1944-1957]:SingleVariableDeclaration[1944-1957]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[1959-1984]:SingleVariableDeclaration[1959-1984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1986-2170]:Block[1986-2170]"
    }, {
      "left" : "super(cfg, new MustDefJoin());",
      "right" : "super(cfg, new MustDefJoin());",
      "info" : "SuperConstructorInvocation[1992-2022]:SuperConstructorInvocation[1992-2022]"
    }, {
      "left" : "this.jsScope = jsScope;",
      "right" : "this.jsScope = jsScope;",
      "info" : "ExpressionStatement[2027-2050]:ExpressionStatement[2027-2050]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[2055-2080]:ExpressionStatement[2055-2080]"
    }, {
      "left" : "this.escaped = Sets.newHashSet();",
      "right" : "this.escaped = Sets.newHashSet();",
      "info" : "ExpressionStatement[2085-2118]:ExpressionStatement[2085-2118]"
    }, {
      "left" : "computeEscaped(jsScope, escaped, compiler);",
      "right" : "computeEscaped(jsScope, escaped, compiler);",
      "info" : "ExpressionStatement[2123-2166]:ExpressionStatement[2123-2166]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2482-2489]:Modifier[2482-2489]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2497-2502]:TYPE_DECLARATION_KIND[2497-2502]"
    }, {
      "left" : "Definition",
      "right" : "Definition",
      "info" : "SimpleName[2503-2513]:SimpleName[2503-2513]"
    }, {
      "left" : "Definition",
      "right" : "Definition",
      "info" : "SimpleName[2590-2600]:SimpleName[2639-2649]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[2601-2610]:SingleVariableDeclaration[2650-2659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2612-2643]:Block[2661-2692]"
    }, {
      "left" : "this.node = node;",
      "right" : "this.node = node;",
      "info" : "ExpressionStatement[2620-2637]:ExpressionStatement[2669-2686]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2649-2658]:MarkerAnnotation[2698-2707]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2663-2669]:Modifier[2712-2718]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[2670-2677]:PrimitiveType[2719-2726]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[2678-2684]:SimpleName[2727-2733]"
    }, {
      "left" : "Object other",
      "right" : "Object other",
      "info" : "SingleVariableDeclaration[2685-2697]:SingleVariableDeclaration[2734-2746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2699-2968]:Block[2748-3017]"
    }, {
      "left" : "if (!(other instanceof Definition))",
      "right" : "if (!(other instanceof Definition))",
      "info" : "IfStatement[2707-2774]:IfStatement[2756-2823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2743-2774]:Block[2792-2823]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2753-2766]:ReturnStatement[2802-2815]"
    }, {
      "left" : "Definition otherDef = (Definition) other;",
      "right" : "Definition otherDef = (Definition) other;",
      "info" : "VariableDeclarationStatement[2781-2822]:VariableDeclarationStatement[2830-2871]"
    }, {
      "left" : "return otherDef.node == node;",
      "right" : "return otherDef.node == node;",
      "info" : "ReturnStatement[2933-2962]:ReturnStatement[2982-3011]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3533-3539]:Modifier[3582-3588]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[3540-3545]:Modifier[3589-3594]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[3546-3551]:TYPE_DECLARATION_KIND[3595-3600]"
    }, {
      "left" : "MustDef",
      "right" : "MustDef",
      "info" : "SimpleName[3552-3559]:SimpleName[3601-3608]"
    }, {
      "left" : "LatticeElement",
      "right" : "LatticeElement",
      "info" : "SimpleType[3571-3585]:SimpleType[3620-3634]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3963-3969]:Modifier[4012-4018]"
    }, {
      "left" : "MustDef",
      "right" : "MustDef",
      "info" : "SimpleName[3970-3977]:SimpleName[4019-4026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3980-4026]:Block[4029-4075]"
    }, {
      "left" : "reachingDef = Maps.newHashMap();",
      "right" : "reachingDef = Maps.newHashMap();",
      "info" : "ExpressionStatement[3988-4020]:ExpressionStatement[4037-4069]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4032-4038]:Modifier[4081-4087]"
    }, {
      "left" : "MustDef",
      "right" : "MustDef",
      "info" : "SimpleName[4039-4046]:SimpleName[4088-4095]"
    }, {
      "left" : "Iterator<Var> vars",
      "right" : "Iterator<Var> vars",
      "info" : "SingleVariableDeclaration[4047-4065]:SingleVariableDeclaration[4096-4114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4067-4463]:Block[4116-4512]"
    }, {
      "left" : "this();",
      "right" : "this();",
      "info" : "ConstructorInvocation[4075-4082]:ConstructorInvocation[4124-4131]"
    }, {
      "left" : "while(vars.hasNext())",
      "right" : "while(vars.hasNext())",
      "info" : "WhileStatement[4089-4457]:WhileStatement[4138-4506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4111-4457]:Block[4160-4506]"
    }, {
      "left" : "Var var = vars.next();",
      "right" : "Var var = vars.next();",
      "info" : "VariableDeclarationStatement[4121-4143]:VariableDeclarationStatement[4170-4192]"
    }, {
      "left" : "reachingDef.put(var, new Definition(var.scope.getRootNode()));",
      "right" : "reachingDef.put(var, new Definition(var.scope.getRootNode()));",
      "info" : "ExpressionStatement[4387-4449]:ExpressionStatement[4436-4498]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4598-4604]:Modifier[4647-4653]"
    }, {
      "left" : "MustDef",
      "right" : "MustDef",
      "info" : "SimpleName[4605-4612]:SimpleName[4654-4661]"
    }, {
      "left" : "MustDef other",
      "right" : "MustDef other",
      "info" : "SingleVariableDeclaration[4613-4626]:SingleVariableDeclaration[4662-4675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4628-4691]:Block[4677-4740]"
    }, {
      "left" : "reachingDef = Maps.newHashMap(other.reachingDef);",
      "right" : "reachingDef = Maps.newHashMap(other.reachingDef);",
      "info" : "ExpressionStatement[4636-4685]:ExpressionStatement[4685-4734]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4697-4706]:MarkerAnnotation[4746-4755]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4711-4717]:Modifier[4760-4766]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[4718-4725]:PrimitiveType[4767-4774]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[4726-4732]:SimpleName[4775-4781]"
    }, {
      "left" : "Object other",
      "right" : "Object other",
      "info" : "SingleVariableDeclaration[4733-4745]:SingleVariableDeclaration[4782-4794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4747-4863]:Block[4796-4912]"
    }, {
      "left" : "return (other instanceof MustDef) &&\n          ((MustDef) other).reachingDef.equals(this.reachingDef);",
      "right" : "return (other instanceof MustDef) &&\n          ((MustDef) other).reachingDef.equals(this.reachingDef);",
      "info" : "ReturnStatement[4755-4857]:ReturnStatement[4804-4906]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4871-4878]:Modifier[4920-4927]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4879-4885]:Modifier[4928-4934]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[4886-4891]:TYPE_DECLARATION_KIND[4935-4940]"
    }, {
      "left" : "MustDefJoin",
      "right" : "MustDefJoin",
      "info" : "SimpleName[4892-4903]:SimpleName[4941-4952]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4947-4956]:MarkerAnnotation[4996-5005]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4961-4967]:Modifier[5010-5016]"
    }, {
      "left" : "MustDef",
      "right" : "MustDef",
      "info" : "SimpleType[4968-4975]:SimpleType[5017-5024]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[4976-4981]:SimpleName[5025-5030]"
    }, {
      "left" : "MustDef a",
      "right" : "MustDef a",
      "info" : "SingleVariableDeclaration[4982-4991]:SingleVariableDeclaration[5031-5040]"
    }, {
      "left" : "MustDef b",
      "right" : "MustDef b",
      "info" : "SingleVariableDeclaration[4993-5002]:SingleVariableDeclaration[5042-5051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5004-6306]:Block[5053-6355]"
    }, {
      "left" : "MustDef result = new MustDef();",
      "right" : "MustDef result = new MustDef();",
      "info" : "VariableDeclarationStatement[5012-5043]:VariableDeclarationStatement[5061-5092]"
    }, {
      "left" : "Map<Var, Definition> resultMap = result.reachingDef;",
      "right" : "Map<Var, Definition> resultMap = result.reachingDef;",
      "info" : "VariableDeclarationStatement[5050-5102]:VariableDeclarationStatement[5099-5151]"
    }, {
      "left" : "for (Map.Entry<Var, Definition> varEntry : a.reachingDef.entrySet())",
      "right" : "for (Map.Entry<Var, Definition> varEntry : a.reachingDef.entrySet())",
      "info" : "EnhancedForStatement[5176-5959]:EnhancedForStatement[5225-6008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5245-5959]:Block[5294-6008]"
    }, {
      "left" : "Var var = varEntry.getKey();",
      "right" : "Var var = varEntry.getKey();",
      "info" : "VariableDeclarationStatement[5255-5283]:VariableDeclarationStatement[5304-5332]"
    }, {
      "left" : "Definition aDef = varEntry.getValue();",
      "right" : "Definition aDef = varEntry.getValue();",
      "info" : "VariableDeclarationStatement[5292-5330]:VariableDeclarationStatement[5341-5379]"
    }, {
      "left" : "if (aDef == null)",
      "right" : "if (aDef == null)",
      "info" : "IfStatement[5340-5613]:IfStatement[5389-5662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5358-5613]:Block[5407-5662]"
    }, {
      "left" : "resultMap.put(var, null);",
      "right" : "resultMap.put(var, null);",
      "info" : "ExpressionStatement[5558-5583]:ExpressionStatement[5607-5632]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[5594-5603]:ContinueStatement[5643-5652]"
    }, {
      "left" : "Node aNode = aDef.node;",
      "right" : "Node aNode = aDef.node;",
      "info" : "VariableDeclarationStatement[5623-5646]:VariableDeclarationStatement[5672-5695]"
    }, {
      "left" : "if (b.reachingDef.containsKey(var))",
      "right" : "if (b.reachingDef.containsKey(var))",
      "info" : "IfStatement[5656-5951]:IfStatement[5705-6000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5692-5898]:Block[5741-5947]"
    }, {
      "left" : "Definition bDef = b.reachingDef.get(var);",
      "right" : "Definition bDef = b.reachingDef.get(var);",
      "info" : "VariableDeclarationStatement[5704-5745]:VariableDeclarationStatement[5753-5794]"
    }, {
      "left" : "if (aDef.equals(bDef))",
      "right" : "if (aDef.equals(bDef))",
      "info" : "IfStatement[5757-5888]:IfStatement[5806-5937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5780-5831]:Block[5829-5880]"
    }, {
      "left" : "resultMap.put(var, aDef);",
      "right" : "resultMap.put(var, aDef);",
      "info" : "ExpressionStatement[5794-5819]:ExpressionStatement[5843-5868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5837-5888]:Block[5886-5937]"
    }, {
      "left" : "resultMap.put(var, null);",
      "right" : "resultMap.put(var, null);",
      "info" : "ExpressionStatement[5851-5876]:ExpressionStatement[5900-5925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5904-5951]:Block[5953-6000]"
    }, {
      "left" : "resultMap.put(var, aDef);",
      "right" : "resultMap.put(var, aDef);",
      "info" : "ExpressionStatement[5916-5941]:ExpressionStatement[5965-5990]"
    }, {
      "left" : "for (Map.Entry<Var, Definition> entry : b.reachingDef.entrySet())",
      "right" : "for (Map.Entry<Var, Definition> entry : b.reachingDef.entrySet())",
      "info" : "EnhancedForStatement[6065-6279]:EnhancedForStatement[6114-6328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6131-6279]:Block[6180-6328]"
    }, {
      "left" : "Var var = entry.getKey();",
      "right" : "Var var = entry.getKey();",
      "info" : "VariableDeclarationStatement[6141-6166]:VariableDeclarationStatement[6190-6215]"
    }, {
      "left" : "if (!a.reachingDef.containsKey(var))",
      "right" : "if (!a.reachingDef.containsKey(var))",
      "info" : "IfStatement[6175-6271]:IfStatement[6224-6320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6212-6271]:Block[6261-6320]"
    }, {
      "left" : "resultMap.put(var, entry.getValue());",
      "right" : "resultMap.put(var, entry.getValue());",
      "info" : "ExpressionStatement[6224-6261]:ExpressionStatement[6273-6310]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[6286-6300]:ReturnStatement[6335-6349]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6314-6323]:MarkerAnnotation[6363-6372]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6326-6333]:PrimitiveType[6375-6382]"
    }, {
      "left" : "isForward",
      "right" : "isForward",
      "info" : "SimpleName[6334-6343]:SimpleName[6383-6392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6346-6368]:Block[6395-6417]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6352-6364]:ReturnStatement[6401-6413]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6372-6381]:MarkerAnnotation[6421-6430]"
    }, {
      "left" : "MustDef",
      "right" : "MustDef",
      "info" : "SimpleType[6384-6391]:SimpleType[6433-6440]"
    }, {
      "left" : "createEntryLattice",
      "right" : "createEntryLattice",
      "info" : "SimpleName[6392-6410]:SimpleName[6441-6459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6413-6461]:Block[6462-6510]"
    }, {
      "left" : "return new MustDef(jsScope.getVars());",
      "right" : "return new MustDef(jsScope.getVars());",
      "info" : "ReturnStatement[6419-6457]:ReturnStatement[6468-6506]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6465-6474]:MarkerAnnotation[6514-6523]"
    }, {
      "left" : "MustDef",
      "right" : "MustDef",
      "info" : "SimpleType[6477-6484]:SimpleType[6526-6533]"
    }, {
      "left" : "createInitialEstimateLattice",
      "right" : "createInitialEstimateLattice",
      "info" : "SimpleName[6485-6513]:SimpleName[6534-6562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6516-6547]:Block[6565-6596]"
    }, {
      "left" : "return new MustDef();",
      "right" : "return new MustDef();",
      "info" : "ReturnStatement[6522-6543]:ReturnStatement[6571-6592]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6551-6560]:MarkerAnnotation[6600-6609]"
    }, {
      "left" : "MustDef",
      "right" : "MustDef",
      "info" : "SimpleType[6563-6570]:SimpleType[6612-6619]"
    }, {
      "left" : "flowThrough",
      "right" : "flowThrough",
      "info" : "SimpleName[6571-6582]:SimpleName[6620-6631]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[6583-6589]:SingleVariableDeclaration[6632-6638]"
    }, {
      "left" : "MustDef input",
      "right" : "MustDef input",
      "info" : "SingleVariableDeclaration[6591-6604]:SingleVariableDeclaration[6640-6653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6606-7049]:Block[6655-7098]"
    }, {
      "left" : "MustDef output = new MustDef(input);",
      "right" : "MustDef output = new MustDef(input);",
      "info" : "VariableDeclarationStatement[6745-6781]:VariableDeclarationStatement[6794-6830]"
    }, {
      "left" : "computeMustDef(n, n, output, false);",
      "right" : "computeMustDef(n, n, output, false);",
      "info" : "ExpressionStatement[6990-7026]:ExpressionStatement[7039-7075]"
    }, {
      "left" : "return output;",
      "right" : "return output;",
      "info" : "ReturnStatement[7031-7045]:ReturnStatement[7080-7094]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7208-7215]:Modifier[7257-7264]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7216-7220]:PrimitiveType[7265-7269]"
    }, {
      "left" : "computeMustDef",
      "right" : "computeMustDef",
      "info" : "SimpleName[7221-7235]:SimpleName[7270-7284]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[7243-7249]:SingleVariableDeclaration[7292-7298]"
    }, {
      "left" : "Node cfgNode",
      "right" : "Node cfgNode",
      "info" : "SingleVariableDeclaration[7251-7263]:SingleVariableDeclaration[7300-7312]"
    }, {
      "left" : "MustDef output",
      "right" : "MustDef output",
      "info" : "SingleVariableDeclaration[7265-7279]:SingleVariableDeclaration[7314-7328]"
    }, {
      "left" : "boolean conditional",
      "right" : "boolean conditional",
      "info" : "SingleVariableDeclaration[7281-7300]:SingleVariableDeclaration[7330-7349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7302-10390]:Block[7351-10439]"
    }, {
      "left" : "switch (n.getType()) {\n\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        return;\n\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        computeMustDef(\n            NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n        return;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n)) {\n          computeMustDef(\n              NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n        } else {\n          // for(x in y) {...}\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n          if (lhs.isVar()) {\n            lhs = lhs.getLastChild(); // for(var x in y) {...}\n          }\n          if (lhs.isName()) {\n            addToDefIfLocal(lhs.getString(), cfgNode, rhs, output);\n          }\n        }\n        return;\n\n      case Token.AND:\n      case Token.OR:\n        computeMustDef(n.getFirstChild(), cfgNode, output, conditional);\n        computeMustDef(n.getLastChild(), cfgNode, output, true);\n        return;\n\n      case Token.HOOK:\n        computeMustDef(n.getFirstChild(), cfgNode, output, conditional);\n        computeMustDef(n.getFirstChild().getNext(), cfgNode, output, true);\n        computeMustDef(n.getLastChild(), cfgNode, output, true);\n        return;\n\n      case Token.VAR:\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (c.hasChildren()) {\n            computeMustDef(c.getFirstChild(), cfgNode, output, conditional);\n            addToDefIfLocal(c.getString(), conditional ? null : cfgNode,\n                c.getFirstChild(), output);\n          }\n        }\n        return;\n\n      default:\n        if (NodeUtil.isAssignmentOp(n)) {\n          if (n.getFirstChild().isName()) {\n            Node name = n.getFirstChild();\n            computeMustDef(name.getNext(), cfgNode, output, conditional);\n            addToDefIfLocal(name.getString(), conditional ? null : cfgNode,\n              n.getLastChild(), output);\n            return;\n          } else if (NodeUtil.isGet(n.getFirstChild())) {\n            // Treat all assignments to arguments as redefining the\n            // parameters itself.\n            Node obj = n.getFirstChild().getFirstChild();\n            if (obj.isName() && \"arguments\".equals(obj.getString())) {\n              // TODO(user): More accuracy can be introduced\n              // ie: We know exactly what arguments[x] is if x is a constant\n              // number.\n              escapeParameters(output);\n            }\n          }\n        }\n\n        if (n.isName() && \"arguments\".equals(n.getString())) {\n          escapeParameters(output);\n        }\n\n        // DEC and INC actually defines the variable.\n        if (n.isDec() || n.isInc()) {\n          Node target = n.getFirstChild();\n          if (target.isName()) {\n            addToDefIfLocal(target.getString(),\n                conditional ? null : cfgNode, null, output);\n            return;\n          }\n        }\n\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          computeMustDef(c, cfgNode, output, conditional);\n        }\n    }",
      "right" : "switch (n.getType()) {\n\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        return;\n\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        computeMustDef(\n            NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n        return;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n)) {\n          computeMustDef(\n              NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n        } else {\n          // for(x in y) {...}\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n          if (lhs.isVar()) {\n            lhs = lhs.getLastChild(); // for(var x in y) {...}\n          }\n          if (lhs.isName()) {\n            addToDefIfLocal(lhs.getString(), cfgNode, rhs, output);\n          }\n        }\n        return;\n\n      case Token.AND:\n      case Token.OR:\n        computeMustDef(n.getFirstChild(), cfgNode, output, conditional);\n        computeMustDef(n.getLastChild(), cfgNode, output, true);\n        return;\n\n      case Token.HOOK:\n        computeMustDef(n.getFirstChild(), cfgNode, output, conditional);\n        computeMustDef(n.getFirstChild().getNext(), cfgNode, output, true);\n        computeMustDef(n.getLastChild(), cfgNode, output, true);\n        return;\n\n      case Token.VAR:\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (c.hasChildren()) {\n            computeMustDef(c.getFirstChild(), cfgNode, output, conditional);\n            addToDefIfLocal(c.getString(), conditional ? null : cfgNode,\n                c.getFirstChild(), output);\n          }\n        }\n        return;\n\n      default:\n        if (NodeUtil.isAssignmentOp(n)) {\n          if (n.getFirstChild().isName()) {\n            Node name = n.getFirstChild();\n            computeMustDef(name.getNext(), cfgNode, output, conditional);\n            addToDefIfLocal(name.getString(), conditional ? null : cfgNode,\n              n.getLastChild(), output);\n            return;\n          } else if (NodeUtil.isGet(n.getFirstChild())) {\n            // Treat all assignments to arguments as redefining the\n            // parameters itself.\n            Node obj = n.getFirstChild().getFirstChild();\n            if (obj.isName() && \"arguments\".equals(obj.getString())) {\n              // TODO(user): More accuracy can be introduced\n              // ie: We know exactly what arguments[x] is if x is a constant\n              // number.\n              escapeParameters(output);\n            }\n          }\n        }\n\n        if (n.isName() && \"arguments\".equals(n.getString())) {\n          escapeParameters(output);\n        }\n\n        // DEC and INC actually defines the variable.\n        if (n.isDec() || n.isInc()) {\n          Node target = n.getFirstChild();\n          if (target.isName()) {\n            addToDefIfLocal(target.getString(),\n                conditional ? null : cfgNode, null, output);\n            return;\n          }\n        }\n\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          computeMustDef(c, cfgNode, output, conditional);\n        }\n    }",
      "info" : "SwitchStatement[7308-10386]:SwitchStatement[7357-10435]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[7338-7355]:SwitchCase[7387-7404]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[7362-7382]:SwitchCase[7411-7431]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7391-7398]:ReturnStatement[7440-7447]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[7406-7423]:SwitchCase[7455-7472]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[7430-7444]:SwitchCase[7479-7493]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[7451-7465]:SwitchCase[7500-7514]"
    }, {
      "left" : "computeMustDef(\n            NodeUtil.getConditionExpression(n), cfgNode, output, conditional);",
      "right" : "computeMustDef(\n            NodeUtil.getConditionExpression(n), cfgNode, output, conditional);",
      "info" : "ExpressionStatement[7474-7568]:ExpressionStatement[7523-7617]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7577-7584]:ReturnStatement[7626-7633]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[7592-7607]:SwitchCase[7641-7656]"
    }, {
      "left" : "if (!NodeUtil.isForIn(n))",
      "right" : "if (!NodeUtil.isForIn(n))",
      "info" : "IfStatement[7616-8098]:IfStatement[7665-8147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7642-7760]:Block[7691-7809]"
    }, {
      "left" : "computeMustDef(\n              NodeUtil.getConditionExpression(n), cfgNode, output, conditional);",
      "right" : "computeMustDef(\n              NodeUtil.getConditionExpression(n), cfgNode, output, conditional);",
      "info" : "ExpressionStatement[7654-7750]:ExpressionStatement[7703-7799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7766-8098]:Block[7815-8147]"
    }, {
      "left" : "Node lhs = n.getFirstChild();",
      "right" : "Node lhs = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[7809-7838]:VariableDeclarationStatement[7858-7887]"
    }, {
      "left" : "Node rhs = lhs.getNext();",
      "right" : "Node rhs = lhs.getNext();",
      "info" : "VariableDeclarationStatement[7849-7874]:VariableDeclarationStatement[7898-7923]"
    }, {
      "left" : "if (lhs.isVar())",
      "right" : "if (lhs.isVar())",
      "info" : "IfStatement[7885-7978]:IfStatement[7934-8027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7902-7978]:Block[7951-8027]"
    }, {
      "left" : "lhs = lhs.getLastChild();",
      "right" : "lhs = lhs.getLastChild();",
      "info" : "ExpressionStatement[7916-7941]:ExpressionStatement[7965-7990]"
    }, {
      "left" : "if (lhs.isName())",
      "right" : "if (lhs.isName())",
      "info" : "IfStatement[7989-8088]:IfStatement[8038-8137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8007-8088]:Block[8056-8137]"
    }, {
      "left" : "addToDefIfLocal(lhs.getString(), cfgNode, rhs, output);",
      "right" : "addToDefIfLocal(lhs.getString(), cfgNode, rhs, output);",
      "info" : "ExpressionStatement[8021-8076]:ExpressionStatement[8070-8125]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[8107-8114]:ReturnStatement[8156-8163]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[8122-8137]:SwitchCase[8171-8186]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[8144-8158]:SwitchCase[8193-8207]"
    }, {
      "left" : "computeMustDef(n.getFirstChild(), cfgNode, output, conditional);",
      "right" : "computeMustDef(n.getFirstChild(), cfgNode, output, conditional);",
      "info" : "ExpressionStatement[8167-8231]:ExpressionStatement[8216-8280]"
    }, {
      "left" : "computeMustDef(n.getLastChild(), cfgNode, output, true);",
      "right" : "computeMustDef(n.getLastChild(), cfgNode, output, true);",
      "info" : "ExpressionStatement[8240-8296]:ExpressionStatement[8289-8345]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[8305-8312]:ReturnStatement[8354-8361]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[8320-8336]:SwitchCase[8369-8385]"
    }, {
      "left" : "computeMustDef(n.getFirstChild(), cfgNode, output, conditional);",
      "right" : "computeMustDef(n.getFirstChild(), cfgNode, output, conditional);",
      "info" : "ExpressionStatement[8345-8409]:ExpressionStatement[8394-8458]"
    }, {
      "left" : "computeMustDef(n.getFirstChild().getNext(), cfgNode, output, true);",
      "right" : "computeMustDef(n.getFirstChild().getNext(), cfgNode, output, true);",
      "info" : "ExpressionStatement[8418-8485]:ExpressionStatement[8467-8534]"
    }, {
      "left" : "computeMustDef(n.getLastChild(), cfgNode, output, true);",
      "right" : "computeMustDef(n.getLastChild(), cfgNode, output, true);",
      "info" : "ExpressionStatement[8494-8550]:ExpressionStatement[8543-8599]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[8559-8566]:ReturnStatement[8608-8615]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[8574-8589]:SwitchCase[8623-8638]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[8598-8909]:ForStatement[8647-8958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8659-8909]:Block[8708-8958]"
    }, {
      "left" : "if (c.hasChildren())",
      "right" : "if (c.hasChildren())",
      "info" : "IfStatement[8671-8899]:IfStatement[8720-8948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8692-8899]:Block[8741-8948]"
    }, {
      "left" : "computeMustDef(c.getFirstChild(), cfgNode, output, conditional);",
      "right" : "computeMustDef(c.getFirstChild(), cfgNode, output, conditional);",
      "info" : "ExpressionStatement[8706-8770]:ExpressionStatement[8755-8819]"
    }, {
      "left" : "addToDefIfLocal(c.getString(), conditional ? null : cfgNode,\n                c.getFirstChild(), output);",
      "right" : "addToDefIfLocal(c.getString(), conditional ? null : cfgNode,\n                c.getFirstChild(), output);",
      "info" : "ExpressionStatement[8783-8887]:ExpressionStatement[8832-8936]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[8918-8925]:ReturnStatement[8967-8974]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[8933-8941]:SwitchCase[8982-8990]"
    }, {
      "left" : "if (NodeUtil.isAssignmentOp(n))",
      "right" : "if (NodeUtil.isAssignmentOp(n))",
      "info" : "IfStatement[8950-9809]:IfStatement[8999-9858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8982-9809]:Block[9031-9858]"
    }, {
      "left" : "if (n.getFirstChild().isName())",
      "right" : "if (n.getFirstChild().isName())",
      "info" : "IfStatement[8994-9799]:IfStatement[9043-9848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9026-9293]:Block[9075-9342]"
    }, {
      "left" : "Node name = n.getFirstChild();",
      "right" : "Node name = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[9040-9070]:VariableDeclarationStatement[9089-9119]"
    }, {
      "left" : "computeMustDef(name.getNext(), cfgNode, output, conditional);",
      "right" : "computeMustDef(name.getNext(), cfgNode, output, conditional);",
      "info" : "ExpressionStatement[9083-9144]:ExpressionStatement[9132-9193]"
    }, {
      "left" : "addToDefIfLocal(name.getString(), conditional ? null : cfgNode,\n              n.getLastChild(), output);",
      "right" : "addToDefIfLocal(name.getString(), conditional ? null : cfgNode,\n              n.getLastChild(), output);",
      "info" : "ExpressionStatement[9157-9261]:ExpressionStatement[9206-9310]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9274-9281]:ReturnStatement[9323-9330]"
    }, {
      "left" : "if (NodeUtil.isGet(n.getFirstChild()))",
      "right" : "if (NodeUtil.isGet(n.getFirstChild()))",
      "info" : "IfStatement[9299-9799]:IfStatement[9348-9848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9338-9799]:Block[9387-9848]"
    }, {
      "left" : "Node obj = n.getFirstChild().getFirstChild();",
      "right" : "Node obj = n.getFirstChild().getFirstChild();",
      "info" : "VariableDeclarationStatement[9454-9499]:VariableDeclarationStatement[9503-9548]"
    }, {
      "left" : "if (obj.isName() && \"arguments\".equals(obj.getString()))",
      "right" : "if (obj.isName() && \"arguments\".equals(obj.getString()))",
      "info" : "IfStatement[9512-9787]:IfStatement[9561-9836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9569-9787]:Block[9618-9836]"
    }, {
      "left" : "escapeParameters(output);",
      "right" : "escapeParameters(output);",
      "info" : "ExpressionStatement[9748-9773]:ExpressionStatement[9797-9822]"
    }, {
      "left" : "if (n.isName() && \"arguments\".equals(n.getString()))",
      "right" : "if (n.isName() && \"arguments\".equals(n.getString()))",
      "info" : "IfStatement[9819-9919]:IfStatement[9868-9968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9872-9919]:Block[9921-9968]"
    }, {
      "left" : "escapeParameters(output);",
      "right" : "escapeParameters(output);",
      "info" : "ExpressionStatement[9884-9909]:ExpressionStatement[9933-9958]"
    }, {
      "left" : "if (n.isDec() || n.isInc())",
      "right" : "if (n.isDec() || n.isInc())",
      "info" : "IfStatement[9983-10239]:IfStatement[10032-10288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10011-10239]:Block[10060-10288]"
    }, {
      "left" : "Node target = n.getFirstChild();",
      "right" : "Node target = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[10023-10055]:VariableDeclarationStatement[10072-10104]"
    }, {
      "left" : "if (target.isName())",
      "right" : "if (target.isName())",
      "info" : "IfStatement[10066-10229]:IfStatement[10115-10278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10087-10229]:Block[10136-10278]"
    }, {
      "left" : "addToDefIfLocal(target.getString(),\n                conditional ? null : cfgNode, null, output);",
      "right" : "addToDefIfLocal(target.getString(),\n                conditional ? null : cfgNode, null, output);",
      "info" : "ExpressionStatement[10101-10197]:ExpressionStatement[10150-10246]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10210-10217]:ReturnStatement[10259-10266]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[10249-10380]:ForStatement[10298-10429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10310-10380]:Block[10359-10429]"
    }, {
      "left" : "computeMustDef(c, cfgNode, output, conditional);",
      "right" : "computeMustDef(c, cfgNode, output, conditional);",
      "info" : "ExpressionStatement[10322-10370]:ExpressionStatement[10371-10419]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10694-10701]:Modifier[10743-10750]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10702-10706]:PrimitiveType[10751-10755]"
    }, {
      "left" : "addToDefIfLocal",
      "right" : "addToDefIfLocal",
      "info" : "SimpleName[10707-10722]:SimpleName[10756-10771]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[10724-10735]:SingleVariableDeclaration[10773-10784]"
    }, {
      "left" : "@Nullable Node node",
      "right" : "@Nullable Node node",
      "info" : "SingleVariableDeclaration[10737-10756]:SingleVariableDeclaration[10786-10805]"
    }, {
      "left" : "@Nullable Node rValue",
      "right" : "@Nullable Node rValue",
      "info" : "SingleVariableDeclaration[10764-10785]:SingleVariableDeclaration[10813-10834]"
    }, {
      "left" : "MustDef def",
      "right" : "MustDef def",
      "info" : "SingleVariableDeclaration[10787-10798]:SingleVariableDeclaration[10836-10847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10800-11602]:Block[10849-11651]"
    }, {
      "left" : "Var var = jsScope.getVar(name);",
      "right" : "Var var = jsScope.getVar(name);",
      "info" : "VariableDeclarationStatement[10806-10837]:VariableDeclarationStatement[10855-10886]"
    }, {
      "left" : "if (var == null || var.scope != jsScope)",
      "right" : "if (var == null || var.scope != jsScope)",
      "info" : "IfStatement[10955-11017]:IfStatement[11004-11066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10996-11017]:Block[11045-11066]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11004-11011]:ReturnStatement[11053-11060]"
    }, {
      "left" : "for (Var other : def.reachingDef.keySet())",
      "right" : "for (Var other : def.reachingDef.keySet())",
      "info" : "EnhancedForStatement[11023-11279]:EnhancedForStatement[11072-11328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11066-11279]:Block[11115-11328]"
    }, {
      "left" : "Definition otherDef = def.reachingDef.get(other);",
      "right" : "Definition otherDef = def.reachingDef.get(other);",
      "info" : "VariableDeclarationStatement[11074-11123]:VariableDeclarationStatement[11123-11172]"
    }, {
      "left" : "if (otherDef == null)",
      "right" : "if (otherDef == null)",
      "info" : "IfStatement[11130-11179]:IfStatement[11179-11228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11152-11179]:Block[11201-11228]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[11162-11171]:ContinueStatement[11211-11220]"
    }, {
      "left" : "if (otherDef.depends.contains(var))",
      "right" : "if (otherDef.depends.contains(var))",
      "info" : "IfStatement[11186-11273]:IfStatement[11235-11322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11222-11273]:Block[11271-11322]"
    }, {
      "left" : "def.reachingDef.put(other, null);",
      "right" : "def.reachingDef.put(other, null);",
      "info" : "ExpressionStatement[11232-11265]:ExpressionStatement[11281-11314]"
    }, {
      "left" : "if (!escaped.contains(var))",
      "right" : "if (!escaped.contains(var))",
      "info" : "IfStatement[11285-11598]:IfStatement[11334-11647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11313-11598]:Block[11362-11647]"
    }, {
      "left" : "if (node == null)",
      "right" : "if (node == null)",
      "info" : "IfStatement[11321-11592]:IfStatement[11370-11641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11339-11388]:Block[11388-11437]"
    }, {
      "left" : "def.reachingDef.put(var, null);",
      "right" : "def.reachingDef.put(var, null);",
      "info" : "ExpressionStatement[11349-11380]:ExpressionStatement[11398-11429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11394-11592]:Block[11443-11641]"
    }, {
      "left" : "Definition definition = new Definition(node);",
      "right" : "Definition definition = new Definition(node);",
      "info" : "VariableDeclarationStatement[11404-11449]:VariableDeclarationStatement[11453-11498]"
    }, {
      "left" : "if (rValue != null)",
      "right" : "if (rValue != null)",
      "info" : "IfStatement[11458-11538]:IfStatement[11507-11587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11478-11538]:Block[11527-11587]"
    }, {
      "left" : "computeDependence(definition, rValue);",
      "right" : "computeDependence(definition, rValue);",
      "info" : "ExpressionStatement[11490-11528]:ExpressionStatement[11539-11577]"
    }, {
      "left" : "def.reachingDef.put(var, definition);",
      "right" : "def.reachingDef.put(var, definition);",
      "info" : "ExpressionStatement[11547-11584]:ExpressionStatement[11596-11633]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11606-11613]:Modifier[11655-11662]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11614-11618]:PrimitiveType[11663-11667]"
    }, {
      "left" : "escapeParameters",
      "right" : "escapeParameters",
      "info" : "SimpleName[11619-11635]:SimpleName[11668-11684]"
    }, {
      "left" : "MustDef output",
      "right" : "MustDef output",
      "info" : "SingleVariableDeclaration[11636-11650]:SingleVariableDeclaration[11685-11699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11652-12305]:Block[11701-12354]"
    }, {
      "left" : "for (Iterator<Var> i = jsScope.getVars(); i.hasNext())",
      "right" : "for (Iterator<Var> i = jsScope.getVars(); i.hasNext())",
      "info" : "ForStatement[11658-11909]:ForStatement[11707-11958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11714-11909]:Block[11763-11958]"
    }, {
      "left" : "Var v = i.next();",
      "right" : "Var v = i.next();",
      "info" : "VariableDeclarationStatement[11722-11739]:VariableDeclarationStatement[11771-11788]"
    }, {
      "left" : "if (isParameter(v))",
      "right" : "if (isParameter(v))",
      "info" : "IfStatement[11746-11903]:IfStatement[11795-11952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11766-11903]:Block[11815-11952]"
    }, {
      "left" : "output.reachingDef.put(v, null);",
      "right" : "output.reachingDef.put(v, null);",
      "info" : "ExpressionStatement[11863-11895]:ExpressionStatement[11912-11944]"
    }, {
      "left" : "for (Entry<Var, Definition> pair: output.reachingDef.entrySet())",
      "right" : "for (Entry<Var, Definition> pair: output.reachingDef.entrySet())",
      "info" : "EnhancedForStatement[11991-12301]:EnhancedForStatement[12040-12350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12056-12301]:Block[12105-12350]"
    }, {
      "left" : "Definition value = pair.getValue();",
      "right" : "Definition value = pair.getValue();",
      "info" : "VariableDeclarationStatement[12064-12099]:VariableDeclarationStatement[12113-12148]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[12106-12152]:IfStatement[12155-12201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12125-12152]:Block[12174-12201]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[12135-12144]:ContinueStatement[12184-12193]"
    }, {
      "left" : "for (Var dep : value.depends)",
      "right" : "for (Var dep : value.depends)",
      "info" : "EnhancedForStatement[12159-12295]:EnhancedForStatement[12208-12344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12189-12295]:Block[12238-12344]"
    }, {
      "left" : "if (isParameter(dep))",
      "right" : "if (isParameter(dep))",
      "info" : "IfStatement[12199-12287]:IfStatement[12248-12336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12221-12287]:Block[12270-12336]"
    }, {
      "left" : "output.reachingDef.put(pair.getKey(), null);",
      "right" : "output.reachingDef.put(pair.getKey(), null);",
      "info" : "ExpressionStatement[12233-12277]:ExpressionStatement[12282-12326]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12309-12316]:Modifier[12358-12365]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[12317-12324]:PrimitiveType[12366-12373]"
    }, {
      "left" : "isParameter",
      "right" : "isParameter",
      "info" : "SimpleName[12325-12336]:SimpleName[12374-12385]"
    }, {
      "left" : "Var v",
      "right" : "Var v",
      "info" : "SingleVariableDeclaration[12337-12342]:SingleVariableDeclaration[12386-12391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12344-12393]:Block[12393-12442]"
    }, {
      "left" : "return v.getParentNode().isParamList();",
      "right" : "return v.getParentNode().isParamList();",
      "info" : "ReturnStatement[12350-12389]:ReturnStatement[12399-12438]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12516-12523]:Modifier[12565-12572]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12524-12528]:PrimitiveType[12573-12577]"
    }, {
      "left" : "computeDependence",
      "right" : "computeDependence",
      "info" : "SimpleName[12529-12546]:SimpleName[12578-12595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12582-12941]:Block[12631-13051]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, rValue,\n        new AbstractCfgNodeTraversalCallback() {\n      @Override\n      public void visit(NodeTraversal t, Node n, Node parent) {\n        if (n.isName() && jsScope.isDeclared(n.getString(), true)) {\n          Var dep = jsScope.getVar(n.getString());\n            def.depends.add(dep);\n        }\n      }\n    });",
      "right" : "NodeTraversal.traverse(compiler, rValue,\n        new AbstractCfgNodeTraversalCallback() {\n      @Override\n      public void visit(NodeTraversal t, Node n, Node parent) {\n        if (n.isName()) {\n          Var dep = jsScope.getVar(n.getString());\n          if (dep == null) {\n            def.unknownDependencies = true;\n          } else {\n            def.depends.add(dep);\n          }\n        }\n      }\n    });",
      "info" : "ExpressionStatement[12588-12937]:ExpressionStatement[12637-13047]"
    }, {
      "left" : "if (n.isName() && jsScope.isDeclared(n.getString(), true))",
      "right" : "if (n.isName())",
      "info" : "IfStatement[12766-12921]:IfStatement[12815-13031]"
    }, {
      "left" : "n.isName()",
      "right" : "n.isName()",
      "info" : "MethodInvocation[12770-12780]:MethodInvocation[12819-12829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12825-12921]:Block[12831-13031]"
    }, {
      "left" : "Var dep = jsScope.getVar(n.getString());",
      "right" : "Var dep = jsScope.getVar(n.getString());",
      "info" : "VariableDeclarationStatement[12837-12877]:VariableDeclarationStatement[12843-12883]"
    }, {
      "left" : "def.depends.add(dep);",
      "right" : "def.depends.add(dep);",
      "info" : "ExpressionStatement[12890-12911]:ExpressionStatement[12988-13009]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[13331-13335]:SimpleType[13441-13445]"
    }, {
      "left" : "getDef",
      "right" : "getDef",
      "info" : "SimpleName[13336-13342]:SimpleName[13446-13452]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[13343-13354]:SingleVariableDeclaration[13453-13464]"
    }, {
      "left" : "Node useNode",
      "right" : "Node useNode",
      "info" : "SingleVariableDeclaration[13356-13368]:SingleVariableDeclaration[13466-13478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13370-13702]:Block[13480-13812]"
    }, {
      "left" : "Preconditions.checkArgument(getCfg().hasNode(useNode));",
      "right" : "Preconditions.checkArgument(getCfg().hasNode(useNode));",
      "info" : "ExpressionStatement[13376-13431]:ExpressionStatement[13486-13541]"
    }, {
      "left" : "GraphNode<Node, Branch> n = getCfg().getNode(useNode);",
      "right" : "GraphNode<Node, Branch> n = getCfg().getNode(useNode);",
      "info" : "VariableDeclarationStatement[13436-13490]:VariableDeclarationStatement[13546-13600]"
    }, {
      "left" : "FlowState<MustDef> state = n.getAnnotation();",
      "right" : "FlowState<MustDef> state = n.getAnnotation();",
      "info" : "VariableDeclarationStatement[13495-13540]:VariableDeclarationStatement[13605-13650]"
    }, {
      "left" : "Definition def = state.getIn().reachingDef.get(jsScope.getVar(name));",
      "right" : "Definition def = state.getIn().reachingDef.get(jsScope.getVar(name));",
      "info" : "VariableDeclarationStatement[13545-13614]:VariableDeclarationStatement[13655-13724]"
    }, {
      "left" : "if (def == null)",
      "right" : "if (def == null)",
      "info" : "IfStatement[13619-13698]:IfStatement[13729-13808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13636-13662]:Block[13746-13772]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[13644-13656]:ReturnStatement[13754-13766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13668-13698]:Block[13778-13808]"
    }, {
      "left" : "return def.node;",
      "right" : "return def.node;",
      "info" : "ReturnStatement[13676-13692]:ReturnStatement[13786-13802]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[13706-13713]:PrimitiveType[13816-13823]"
    }, {
      "left" : "dependsOnOuterScopeVars",
      "right" : "dependsOnOuterScopeVars",
      "info" : "SimpleName[13714-13737]:SimpleName[13824-13847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13765-14131]:Block[13875-14301]"
    }, {
      "left" : "Preconditions.checkArgument(getCfg().hasNode(useNode));",
      "right" : "Preconditions.checkArgument(getCfg().hasNode(useNode));",
      "info" : "ExpressionStatement[13771-13826]:ExpressionStatement[13881-13936]"
    }, {
      "left" : "GraphNode<Node, Branch> n = getCfg().getNode(useNode);",
      "right" : "GraphNode<Node, Branch> n = getCfg().getNode(useNode);",
      "info" : "VariableDeclarationStatement[13831-13885]:VariableDeclarationStatement[13941-13995]"
    }, {
      "left" : "FlowState<MustDef> state = n.getAnnotation();",
      "right" : "FlowState<MustDef> state = n.getAnnotation();",
      "info" : "VariableDeclarationStatement[13890-13935]:VariableDeclarationStatement[14000-14045]"
    }, {
      "left" : "Definition def = state.getIn().reachingDef.get(jsScope.getVar(name));",
      "right" : "Definition def = state.getIn().reachingDef.get(jsScope.getVar(name));",
      "info" : "VariableDeclarationStatement[13940-14009]:VariableDeclarationStatement[14050-14119]"
    }, {
      "left" : "for (Var s : def.depends)",
      "right" : "for (Var s : def.depends)",
      "info" : "EnhancedForStatement[14015-14109]:EnhancedForStatement[14185-14279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14041-14109]:Block[14211-14279]"
    }, {
      "left" : "if (s.scope != jsScope)",
      "right" : "if (s.scope != jsScope)",
      "info" : "IfStatement[14049-14103]:IfStatement[14219-14273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14073-14103]:Block[14243-14273]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[14083-14095]:ReturnStatement[14253-14265]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14114-14127]:ReturnStatement[14284-14297]"
    } ]
  },
  "interFileMappings" : { }
}