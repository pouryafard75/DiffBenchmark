{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Parser",
      "right" : "Parser",
      "info" : "TypeDeclaration[116-10327]:TypeDeclaration[116-10707]"
    }, {
      "left" : "private static final String SQ = \"'\";",
      "right" : "private static final String SQ = \"'\";",
      "info" : "FieldDeclaration[326-363]:FieldDeclaration[326-363]"
    }, {
      "left" : "private static final String DQ = \"\\\"\";",
      "right" : "private static final String DQ = \"\\\"\";",
      "info" : "FieldDeclaration[368-406]:FieldDeclaration[368-406]"
    }, {
      "left" : "private static final Tag htmlTag = Tag.valueOf(\"html\");",
      "right" : "private static final Tag htmlTag = Tag.valueOf(\"html\");",
      "info" : "FieldDeclaration[412-467]:FieldDeclaration[412-467]"
    }, {
      "left" : "private static final Tag headTag = Tag.valueOf(\"head\");",
      "right" : "private static final Tag headTag = Tag.valueOf(\"head\");",
      "info" : "FieldDeclaration[472-527]:FieldDeclaration[472-527]"
    }, {
      "left" : "private static final Tag bodyTag = Tag.valueOf(\"body\");",
      "right" : "private static final Tag bodyTag = Tag.valueOf(\"body\");",
      "info" : "FieldDeclaration[532-587]:FieldDeclaration[532-587]"
    }, {
      "left" : "private static final Tag titleTag = Tag.valueOf(\"title\");",
      "right" : "private static final Tag titleTag = Tag.valueOf(\"title\");",
      "info" : "FieldDeclaration[592-649]:FieldDeclaration[592-649]"
    }, {
      "left" : "private static final Tag textareaTag = Tag.valueOf(\"textarea\");",
      "right" : "private static final Tag textareaTag = Tag.valueOf(\"textarea\");",
      "info" : "FieldDeclaration[654-717]:FieldDeclaration[654-717]"
    }, {
      "left" : "private final LinkedList<Element> stack;",
      "right" : "private final LinkedList<Element> stack;",
      "info" : "FieldDeclaration[723-763]:FieldDeclaration[723-763]"
    }, {
      "left" : "private final TokenQueue tq;",
      "right" : "private final TokenQueue tq;",
      "info" : "FieldDeclaration[768-796]:FieldDeclaration[768-796]"
    }, {
      "left" : "private final Document doc;",
      "right" : "private final Document doc;",
      "info" : "FieldDeclaration[801-828]:FieldDeclaration[801-828]"
    }, {
      "left" : "private String baseUri;",
      "right" : "private String baseUri;",
      "info" : "FieldDeclaration[833-856]:FieldDeclaration[833-856]"
    }, {
      "left" : "private Parser(String html, String baseUri, boolean isBodyFragment)",
      "right" : "private Parser(String html, String baseUri, boolean isBodyFragment)",
      "info" : "MethodDeclaration[862-1326]:MethodDeclaration[899-1363]"
    }, {
      "left" : "public static Document parse(String html, String baseUri)",
      "right" : "public static Document parse(String html, String baseUri)",
      "info" : "MethodDeclaration[1332-1697]:MethodDeclaration[1369-1734]"
    }, {
      "left" : "public static Document parseBodyFragment(String bodyHtml, String baseUri)",
      "right" : "public static Document parseBodyFragment(String bodyHtml, String baseUri)",
      "info" : "MethodDeclaration[1703-2165]:MethodDeclaration[1740-2202]"
    }, {
      "left" : "private Document parse()",
      "right" : "private Document parse()",
      "info" : "MethodDeclaration[2171-3159]:MethodDeclaration[2844-3412]"
    }, {
      "left" : "private void parseComment()",
      "right" : "private void parseComment()",
      "info" : "MethodDeclaration[3165-3463]:MethodDeclaration[3418-3716]"
    }, {
      "left" : "private void parseXmlDecl()",
      "right" : "private void parseXmlDecl()",
      "info" : "MethodDeclaration[3469-3818]:MethodDeclaration[3722-4071]"
    }, {
      "left" : "private void parseEndTag()",
      "right" : "private void parseEndTag()",
      "info" : "MethodDeclaration[3824-4078]:MethodDeclaration[4077-4331]"
    }, {
      "left" : "private void parseStartTag()",
      "right" : "private void parseStartTag()",
      "info" : "MethodDeclaration[4084-6111]:MethodDeclaration[4337-6364]"
    }, {
      "left" : "private Attribute parseAttribute()",
      "right" : "private Attribute parseAttribute()",
      "info" : "MethodDeclaration[6117-7196]:MethodDeclaration[6370-7449]"
    }, {
      "left" : "private void parseTextNode()",
      "right" : "private void parseTextNode()",
      "info" : "MethodDeclaration[7202-7388]:MethodDeclaration[7455-7641]"
    }, {
      "left" : "private void parseCdata()",
      "right" : "private void parseCdata()",
      "info" : "MethodDeclaration[7394-7633]:MethodDeclaration[7647-7886]"
    }, {
      "left" : "private Element addChildToParent(Element child, boolean isEmptyElement)",
      "right" : "private Element addChildToParent(Element child, boolean isEmptyElement)",
      "info" : "MethodDeclaration[7639-8727]:MethodDeclaration[7892-8992]"
    }, {
      "left" : "private boolean stackHasValidParent(Tag childTag)",
      "right" : "private boolean stackHasValidParent(Tag childTag)",
      "info" : "MethodDeclaration[8733-9221]:MethodDeclaration[8998-9601]"
    }, {
      "left" : "private Element popStackToSuitableContainer(Tag tag)",
      "right" : "private Element popStackToSuitableContainer(Tag tag)",
      "info" : "MethodDeclaration[9227-9483]:MethodDeclaration[9607-9863]"
    }, {
      "left" : "private Element popStackToClose(Tag tag)",
      "right" : "private Element popStackToClose(Tag tag)",
      "info" : "MethodDeclaration[9489-10257]:MethodDeclaration[9869-10637]"
    }, {
      "left" : "private Element last()",
      "right" : "private Element last()",
      "info" : "MethodDeclaration[10263-10325]:MethodDeclaration[10643-10705]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[300-306]:Modifier[300-306]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[307-312]:TYPE_DECLARATION_KIND[307-312]"
    }, {
      "left" : "Parser",
      "right" : "Parser",
      "info" : "SimpleName[313-319]:SimpleName[313-319]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[862-869]:Modifier[899-906]"
    }, {
      "left" : "Parser",
      "right" : "Parser",
      "info" : "SimpleName[870-876]:SimpleName[907-913]"
    }, {
      "left" : "String html",
      "right" : "String html",
      "info" : "SingleVariableDeclaration[877-888]:SingleVariableDeclaration[914-925]"
    }, {
      "left" : "String baseUri",
      "right" : "String baseUri",
      "info" : "SingleVariableDeclaration[890-904]:SingleVariableDeclaration[927-941]"
    }, {
      "left" : "boolean isBodyFragment",
      "right" : "boolean isBodyFragment",
      "info" : "SingleVariableDeclaration[906-928]:SingleVariableDeclaration[943-965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[930-1326]:Block[967-1363]"
    }, {
      "left" : "Validate.notNull(html);",
      "right" : "Validate.notNull(html);",
      "info" : "ExpressionStatement[940-963]:ExpressionStatement[977-1000]"
    }, {
      "left" : "Validate.notNull(baseUri);",
      "right" : "Validate.notNull(baseUri);",
      "info" : "ExpressionStatement[972-998]:ExpressionStatement[1009-1035]"
    }, {
      "left" : "stack = new LinkedList<Element>();",
      "right" : "stack = new LinkedList<Element>();",
      "info" : "ExpressionStatement[1008-1042]:ExpressionStatement[1045-1079]"
    }, {
      "left" : "tq = new TokenQueue(html);",
      "right" : "tq = new TokenQueue(html);",
      "info" : "ExpressionStatement[1051-1077]:ExpressionStatement[1088-1114]"
    }, {
      "left" : "this.baseUri = baseUri;",
      "right" : "this.baseUri = baseUri;",
      "info" : "ExpressionStatement[1086-1109]:ExpressionStatement[1123-1146]"
    }, {
      "left" : "if (isBodyFragment)",
      "right" : "if (isBodyFragment)",
      "info" : "IfStatement[1119-1320]:IfStatement[1156-1357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1139-1234]:Block[1176-1271]"
    }, {
      "left" : "doc = Document.createShell(baseUri);",
      "right" : "doc = Document.createShell(baseUri);",
      "info" : "ExpressionStatement[1153-1189]:ExpressionStatement[1190-1226]"
    }, {
      "left" : "stack.add(doc.body());",
      "right" : "stack.add(doc.body());",
      "info" : "ExpressionStatement[1202-1224]:ExpressionStatement[1239-1261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1240-1320]:Block[1277-1357]"
    }, {
      "left" : "doc = new Document(baseUri);",
      "right" : "doc = new Document(baseUri);",
      "info" : "ExpressionStatement[1254-1282]:ExpressionStatement[1291-1319]"
    }, {
      "left" : "stack.add(doc);",
      "right" : "stack.add(doc);",
      "info" : "ExpressionStatement[1295-1310]:ExpressionStatement[1332-1347]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1543-1549]:Modifier[1580-1586]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1550-1556]:Modifier[1587-1593]"
    }, {
      "left" : "Document",
      "right" : "Document",
      "info" : "SimpleType[1557-1565]:SimpleType[1594-1602]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[1566-1571]:SimpleName[1603-1608]"
    }, {
      "left" : "String html",
      "right" : "String html",
      "info" : "SingleVariableDeclaration[1572-1583]:SingleVariableDeclaration[1609-1620]"
    }, {
      "left" : "String baseUri",
      "right" : "String baseUri",
      "info" : "SingleVariableDeclaration[1585-1599]:SingleVariableDeclaration[1622-1636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1601-1697]:Block[1638-1734]"
    }, {
      "left" : "Parser parser = new Parser(html, baseUri, false);",
      "right" : "Parser parser = new Parser(html, baseUri, false);",
      "info" : "VariableDeclarationStatement[1611-1660]:VariableDeclarationStatement[1648-1697]"
    }, {
      "left" : "return parser.parse();",
      "right" : "return parser.parse();",
      "info" : "ReturnStatement[1669-1691]:ReturnStatement[1706-1728]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1992-1998]:Modifier[2029-2035]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1999-2005]:Modifier[2036-2042]"
    }, {
      "left" : "Document",
      "right" : "Document",
      "info" : "SimpleType[2006-2014]:SimpleType[2043-2051]"
    }, {
      "left" : "parseBodyFragment",
      "right" : "parseBodyFragment",
      "info" : "SimpleName[2015-2032]:SimpleName[2052-2069]"
    }, {
      "left" : "String bodyHtml",
      "right" : "String bodyHtml",
      "info" : "SingleVariableDeclaration[2033-2048]:SingleVariableDeclaration[2070-2085]"
    }, {
      "left" : "String baseUri",
      "right" : "String baseUri",
      "info" : "SingleVariableDeclaration[2050-2064]:SingleVariableDeclaration[2087-2101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2066-2165]:Block[2103-2202]"
    }, {
      "left" : "Parser parser = new Parser(bodyHtml, baseUri, true);",
      "right" : "Parser parser = new Parser(bodyHtml, baseUri, true);",
      "info" : "VariableDeclarationStatement[2076-2128]:VariableDeclarationStatement[2113-2165]"
    }, {
      "left" : "return parser.parse();",
      "right" : "return parser.parse();",
      "info" : "ReturnStatement[2137-2159]:ReturnStatement[2174-2196]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2591-2598]:Modifier[2844-2851]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[2608-2613]:SimpleName[2861-2866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2616-3159]:Block[2869-3412]"
    }, {
      "left" : "while (!tq.isEmpty())",
      "right" : "while (!tq.isEmpty())",
      "info" : "WhileStatement[2626-3121]:WhileStatement[2879-3374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2648-3121]:Block[2901-3374]"
    }, {
      "left" : "if (tq.matches(\"<!--\"))",
      "right" : "if (tq.matches(\"<!--\"))",
      "info" : "IfStatement[2662-3111]:IfStatement[2915-3364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2686-2733]:Block[2939-2986]"
    }, {
      "left" : "parseComment();",
      "right" : "parseComment();",
      "info" : "ExpressionStatement[2704-2719]:ExpressionStatement[2957-2972]"
    }, {
      "left" : "if (tq.matches(\"<![CDATA[\"))",
      "right" : "if (tq.matches(\"<![CDATA[\"))",
      "info" : "IfStatement[2739-3111]:IfStatement[2992-3364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2768-2813]:Block[3021-3066]"
    }, {
      "left" : "parseCdata();",
      "right" : "parseCdata();",
      "info" : "ExpressionStatement[2786-2799]:ExpressionStatement[3039-3052]"
    }, {
      "left" : "if (tq.matches(\"<?\") || tq.matches(\"<!\"))",
      "right" : "if (tq.matches(\"<?\") || tq.matches(\"<!\"))",
      "info" : "IfStatement[2819-3111]:IfStatement[3072-3364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2861-2908]:Block[3114-3161]"
    }, {
      "left" : "parseXmlDecl();",
      "right" : "parseXmlDecl();",
      "info" : "ExpressionStatement[2879-2894]:ExpressionStatement[3132-3147]"
    }, {
      "left" : "if (tq.matches(\"</\"))",
      "right" : "if (tq.matches(\"</\"))",
      "info" : "IfStatement[2914-3111]:IfStatement[3167-3364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2936-2982]:Block[3189-3235]"
    }, {
      "left" : "parseEndTag();",
      "right" : "parseEndTag();",
      "info" : "ExpressionStatement[2954-2968]:ExpressionStatement[3207-3221]"
    }, {
      "left" : "if (tq.matches(\"<\"))",
      "right" : "if (tq.matches(\"<\"))",
      "info" : "IfStatement[2988-3111]:IfStatement[3241-3364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3009-3057]:Block[3262-3310]"
    }, {
      "left" : "parseStartTag();",
      "right" : "parseStartTag();",
      "info" : "ExpressionStatement[3027-3043]:ExpressionStatement[3280-3296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3063-3111]:Block[3316-3364]"
    }, {
      "left" : "parseTextNode();",
      "right" : "parseTextNode();",
      "info" : "ExpressionStatement[3081-3097]:ExpressionStatement[3334-3350]"
    }, {
      "left" : "return doc.normalise();",
      "right" : "return doc.normalise();",
      "info" : "ReturnStatement[3130-3153]:ReturnStatement[3383-3406]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3165-3172]:Modifier[3418-3425]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3173-3177]:PrimitiveType[3426-3430]"
    }, {
      "left" : "parseComment",
      "right" : "parseComment",
      "info" : "SimpleName[3178-3190]:SimpleName[3431-3443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3193-3463]:Block[3446-3716]"
    }, {
      "left" : "tq.consume(\"<!--\");",
      "right" : "tq.consume(\"<!--\");",
      "info" : "ExpressionStatement[3203-3222]:ExpressionStatement[3456-3475]"
    }, {
      "left" : "String data = tq.chompTo(\"->\");",
      "right" : "String data = tq.chompTo(\"->\");",
      "info" : "VariableDeclarationStatement[3231-3262]:VariableDeclarationStatement[3484-3515]"
    }, {
      "left" : "if (data.endsWith(\"-\"))",
      "right" : "if (data.endsWith(\"-\"))",
      "info" : "IfStatement[3272-3366]:IfStatement[3525-3619]"
    }, {
      "left" : "data = data.substring(0, data.length()-1);",
      "right" : "data = data.substring(0, data.length()-1);",
      "info" : "ExpressionStatement[3324-3366]:ExpressionStatement[3577-3619]"
    }, {
      "left" : "Comment comment = new Comment(data, baseUri);",
      "right" : "Comment comment = new Comment(data, baseUri);",
      "info" : "VariableDeclarationStatement[3375-3420]:VariableDeclarationStatement[3628-3673]"
    }, {
      "left" : "last().appendChild(comment);",
      "right" : "last().appendChild(comment);",
      "info" : "ExpressionStatement[3429-3457]:ExpressionStatement[3682-3710]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3469-3476]:Modifier[3722-3729]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3477-3481]:PrimitiveType[3730-3734]"
    }, {
      "left" : "parseXmlDecl",
      "right" : "parseXmlDecl",
      "info" : "SimpleName[3482-3494]:SimpleName[3735-3747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3497-3818]:Block[3750-4071]"
    }, {
      "left" : "tq.consume(\"<\");",
      "right" : "tq.consume(\"<\");",
      "info" : "ExpressionStatement[3507-3523]:ExpressionStatement[3760-3776]"
    }, {
      "left" : "Character firstChar = tq.consume();",
      "right" : "Character firstChar = tq.consume();",
      "info" : "VariableDeclarationStatement[3532-3567]:VariableDeclarationStatement[3785-3820]"
    }, {
      "left" : "boolean procInstr = firstChar.toString().equals(\"!\");",
      "right" : "boolean procInstr = firstChar.toString().equals(\"!\");",
      "info" : "VariableDeclarationStatement[3609-3662]:VariableDeclarationStatement[3862-3915]"
    }, {
      "left" : "String data = tq.chompTo(\">\");",
      "right" : "String data = tq.chompTo(\">\");",
      "info" : "VariableDeclarationStatement[3671-3701]:VariableDeclarationStatement[3924-3954]"
    }, {
      "left" : "XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);",
      "right" : "XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);",
      "info" : "VariableDeclarationStatement[3711-3778]:VariableDeclarationStatement[3964-4031]"
    }, {
      "left" : "last().appendChild(decl);",
      "right" : "last().appendChild(decl);",
      "info" : "ExpressionStatement[3787-3812]:ExpressionStatement[4040-4065]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3824-3831]:Modifier[4077-4084]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3832-3836]:PrimitiveType[4085-4089]"
    }, {
      "left" : "parseEndTag",
      "right" : "parseEndTag",
      "info" : "SimpleName[3837-3848]:SimpleName[4090-4101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3851-4078]:Block[4104-4331]"
    }, {
      "left" : "tq.consume(\"</\");",
      "right" : "tq.consume(\"</\");",
      "info" : "ExpressionStatement[3861-3878]:ExpressionStatement[4114-4131]"
    }, {
      "left" : "String tagName = tq.consumeWord();",
      "right" : "String tagName = tq.consumeWord();",
      "info" : "VariableDeclarationStatement[3887-3921]:VariableDeclarationStatement[4140-4174]"
    }, {
      "left" : "tq.chompTo(\">\");",
      "right" : "tq.chompTo(\">\");",
      "info" : "ExpressionStatement[3930-3946]:ExpressionStatement[4183-4199]"
    }, {
      "left" : "if (tagName.length() != 0)",
      "right" : "if (tagName.length() != 0)",
      "info" : "IfStatement[3956-4072]:IfStatement[4209-4325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3983-4072]:Block[4236-4325]"
    }, {
      "left" : "Tag tag = Tag.valueOf(tagName);",
      "right" : "Tag tag = Tag.valueOf(tagName);",
      "info" : "VariableDeclarationStatement[3997-4028]:VariableDeclarationStatement[4250-4281]"
    }, {
      "left" : "popStackToClose(tag);",
      "right" : "popStackToClose(tag);",
      "info" : "ExpressionStatement[4041-4062]:ExpressionStatement[4294-4315]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4084-4091]:Modifier[4337-4344]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4092-4096]:PrimitiveType[4345-4349]"
    }, {
      "left" : "parseStartTag",
      "right" : "parseStartTag",
      "info" : "SimpleName[4097-4110]:SimpleName[4350-4363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4113-6111]:Block[4366-6364]"
    }, {
      "left" : "tq.consume(\"<\");",
      "right" : "tq.consume(\"<\");",
      "info" : "ExpressionStatement[4123-4139]:ExpressionStatement[4376-4392]"
    }, {
      "left" : "String tagName = tq.consumeWord();",
      "right" : "String tagName = tq.consumeWord();",
      "info" : "VariableDeclarationStatement[4148-4182]:VariableDeclarationStatement[4401-4435]"
    }, {
      "left" : "if (tagName.length() == 0)",
      "right" : "if (tagName.length() == 0)",
      "info" : "IfStatement[4192-4395]:IfStatement[4445-4648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4219-4395]:Block[4472-4648]"
    }, {
      "left" : "tq.addFirst(\"&lt;\");",
      "right" : "tq.addFirst(\"&lt;\");",
      "info" : "ExpressionStatement[4316-4336]:ExpressionStatement[4569-4589]"
    }, {
      "left" : "parseTextNode();",
      "right" : "parseTextNode();",
      "info" : "ExpressionStatement[4349-4365]:ExpressionStatement[4602-4618]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4378-4385]:ReturnStatement[4631-4638]"
    }, {
      "left" : "Attributes attributes = new Attributes();",
      "right" : "Attributes attributes = new Attributes();",
      "info" : "VariableDeclarationStatement[4405-4446]:VariableDeclarationStatement[4658-4699]"
    }, {
      "left" : "while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty())",
      "right" : "while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty())",
      "info" : "WhileStatement[4455-4652]:WhileStatement[4708-4905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4511-4652]:Block[4764-4905]"
    }, {
      "left" : "Attribute attribute = parseAttribute();",
      "right" : "Attribute attribute = parseAttribute();",
      "info" : "VariableDeclarationStatement[4525-4564]:VariableDeclarationStatement[4778-4817]"
    }, {
      "left" : "if (attribute != null)",
      "right" : "if (attribute != null)",
      "info" : "IfStatement[4577-4642]:IfStatement[4830-4895]"
    }, {
      "left" : "attributes.put(attribute);",
      "right" : "attributes.put(attribute);",
      "info" : "ExpressionStatement[4616-4642]:ExpressionStatement[4869-4895]"
    }, {
      "left" : "Tag tag = Tag.valueOf(tagName);",
      "right" : "Tag tag = Tag.valueOf(tagName);",
      "info" : "VariableDeclarationStatement[4662-4693]:VariableDeclarationStatement[4915-4946]"
    }, {
      "left" : "Element child = new Element(tag, baseUri, attributes);",
      "right" : "Element child = new Element(tag, baseUri, attributes);",
      "info" : "VariableDeclarationStatement[4702-4756]:VariableDeclarationStatement[4955-5009]"
    }, {
      "left" : "boolean isEmptyElement = tag.isEmpty();",
      "right" : "boolean isEmptyElement = tag.isEmpty();",
      "info" : "VariableDeclarationStatement[4766-4805]:VariableDeclarationStatement[5019-5058]"
    }, {
      "left" : "if (tq.matchChomp(\"/>\"))",
      "right" : "if (tq.matchChomp(\"/>\"))",
      "info" : "IfStatement[4881-5031]:IfStatement[5134-5284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4906-4982]:Block[5159-5235]"
    }, {
      "left" : "isEmptyElement = true;",
      "right" : "isEmptyElement = true;",
      "info" : "ExpressionStatement[4950-4972]:ExpressionStatement[5203-5225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4988-5031]:Block[5241-5284]"
    }, {
      "left" : "tq.matchChomp(\">\");",
      "right" : "tq.matchChomp(\">\");",
      "info" : "ExpressionStatement[5002-5021]:ExpressionStatement[5255-5274]"
    }, {
      "left" : "addChildToParent(child, isEmptyElement);",
      "right" : "addChildToParent(child, isEmptyElement);",
      "info" : "ExpressionStatement[5040-5080]:ExpressionStatement[5293-5333]"
    }, {
      "left" : "if (tag.isData())",
      "right" : "if (tag.isData())",
      "info" : "IfStatement[5182-5740]:IfStatement[5435-5993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5200-5740]:Block[5453-5993]"
    }, {
      "left" : "String data = tq.chompTo(\"</\" + tagName);",
      "right" : "String data = tq.chompTo(\"</\" + tagName);",
      "info" : "VariableDeclarationStatement[5214-5255]:VariableDeclarationStatement[5467-5508]"
    }, {
      "left" : "tq.chompTo(\">\");",
      "right" : "tq.chompTo(\">\");",
      "info" : "ExpressionStatement[5268-5284]:ExpressionStatement[5521-5537]"
    }, {
      "left" : "popStackToClose(tag);",
      "right" : "popStackToClose(tag);",
      "info" : "ExpressionStatement[5297-5318]:ExpressionStatement[5550-5571]"
    }, {
      "left" : "Node dataNode;",
      "right" : "Node dataNode;",
      "info" : "VariableDeclarationStatement[5344-5358]:VariableDeclarationStatement[5597-5611]"
    }, {
      "left" : "if (tag.equals(titleTag) || tag.equals(textareaTag))",
      "right" : "if (tag.equals(titleTag) || tag.equals(textareaTag))",
      "info" : "IfStatement[5371-5640]:IfStatement[5624-5893]"
    }, {
      "left" : "dataNode = TextNode.createFromEncoded(data, baseUri);",
      "right" : "dataNode = TextNode.createFromEncoded(data, baseUri);",
      "info" : "ExpressionStatement[5514-5567]:ExpressionStatement[5767-5820]"
    }, {
      "left" : "dataNode = new DataNode(data, baseUri);",
      "right" : "dataNode = new DataNode(data, baseUri);",
      "info" : "ExpressionStatement[5601-5640]:ExpressionStatement[5854-5893]"
    }, {
      "left" : "child.appendChild(dataNode);",
      "right" : "child.appendChild(dataNode);",
      "info" : "ExpressionStatement[5699-5727]:ExpressionStatement[5952-5980]"
    }, {
      "left" : "if (child.tagName().equals(\"base\"))",
      "right" : "if (child.tagName().equals(\"base\"))",
      "info" : "IfStatement[5794-6105]:IfStatement[6047-6358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5830-6105]:Block[6083-6358]"
    }, {
      "left" : "String href = child.absUrl(\"href\");",
      "right" : "String href = child.absUrl(\"href\");",
      "info" : "VariableDeclarationStatement[5844-5879]:VariableDeclarationStatement[6097-6132]"
    }, {
      "left" : "if (href.length() != 0)",
      "right" : "if (href.length() != 0)",
      "info" : "IfStatement[5892-6095]:IfStatement[6145-6348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5916-6095]:Block[6169-6348]"
    }, {
      "left" : "baseUri = href;",
      "right" : "baseUri = href;",
      "info" : "ExpressionStatement[5962-5977]:ExpressionStatement[6215-6230]"
    }, {
      "left" : "doc.setBaseUri(href);",
      "right" : "doc.setBaseUri(href);",
      "info" : "ExpressionStatement[5994-6015]:ExpressionStatement[6247-6268]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6117-6124]:Modifier[6370-6377]"
    }, {
      "left" : "Attribute",
      "right" : "Attribute",
      "info" : "SimpleType[6125-6134]:SimpleType[6378-6387]"
    }, {
      "left" : "parseAttribute",
      "right" : "parseAttribute",
      "info" : "SimpleName[6135-6149]:SimpleName[6388-6402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6152-7196]:Block[6405-7449]"
    }, {
      "left" : "tq.consumeWhitespace();",
      "right" : "tq.consumeWhitespace();",
      "info" : "ExpressionStatement[6162-6185]:ExpressionStatement[6415-6438]"
    }, {
      "left" : "String key = tq.consumeAttributeKey();",
      "right" : "String key = tq.consumeAttributeKey();",
      "info" : "VariableDeclarationStatement[6194-6232]:VariableDeclarationStatement[6447-6485]"
    }, {
      "left" : "String value = \"\";",
      "right" : "String value = \"\";",
      "info" : "VariableDeclarationStatement[6241-6259]:VariableDeclarationStatement[6494-6512]"
    }, {
      "left" : "tq.consumeWhitespace();",
      "right" : "tq.consumeWhitespace();",
      "info" : "ExpressionStatement[6268-6291]:ExpressionStatement[6521-6544]"
    }, {
      "left" : "if (tq.matchChomp(\"=\"))",
      "right" : "if (tq.matchChomp(\"=\"))",
      "info" : "IfStatement[6300-6976]:IfStatement[6553-7229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6324-6976]:Block[6577-7229]"
    }, {
      "left" : "tq.consumeWhitespace();",
      "right" : "tq.consumeWhitespace();",
      "info" : "ExpressionStatement[6338-6361]:ExpressionStatement[6591-6614]"
    }, {
      "left" : "if (tq.matchChomp(SQ))",
      "right" : "if (tq.matchChomp(SQ))",
      "info" : "IfStatement[6375-6930]:IfStatement[6628-7183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6398-6453]:Block[6651-6706]"
    }, {
      "left" : "value = tq.chompTo(SQ);",
      "right" : "value = tq.chompTo(SQ);",
      "info" : "ExpressionStatement[6416-6439]:ExpressionStatement[6669-6692]"
    }, {
      "left" : "if (tq.matchChomp(DQ))",
      "right" : "if (tq.matchChomp(DQ))",
      "info" : "IfStatement[6459-6930]:IfStatement[6712-7183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6482-6537]:Block[6735-6790]"
    }, {
      "left" : "value = tq.chompTo(DQ);",
      "right" : "value = tq.chompTo(DQ);",
      "info" : "ExpressionStatement[6500-6523]:ExpressionStatement[6753-6776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6543-6930]:Block[6796-7183]"
    }, {
      "left" : "StringBuilder valueAccum = new StringBuilder();",
      "right" : "StringBuilder valueAccum = new StringBuilder();",
      "info" : "VariableDeclarationStatement[6561-6608]:VariableDeclarationStatement[6814-6861]"
    }, {
      "left" : "while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.matchesWhitespace() && !tq.isEmpty())",
      "right" : "while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.matchesWhitespace() && !tq.isEmpty())",
      "info" : "WhileStatement[6714-6869]:WhileStatement[6967-7122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6797-6869]:Block[7050-7122]"
    }, {
      "left" : "valueAccum.append(tq.consume());",
      "right" : "valueAccum.append(tq.consume());",
      "info" : "ExpressionStatement[6819-6851]:ExpressionStatement[7072-7104]"
    }, {
      "left" : "value = valueAccum.toString();",
      "right" : "value = valueAccum.toString();",
      "info" : "ExpressionStatement[6886-6916]:ExpressionStatement[7139-7169]"
    }, {
      "left" : "tq.consumeWhitespace();",
      "right" : "tq.consumeWhitespace();",
      "info" : "ExpressionStatement[6943-6966]:ExpressionStatement[7196-7219]"
    }, {
      "left" : "if (key.length() != 0)",
      "right" : "if (key.length() != 0)",
      "info" : "IfStatement[6985-7190]:IfStatement[7238-7443]"
    }, {
      "left" : "return Attribute.createFromEncoded(key, value);",
      "right" : "return Attribute.createFromEncoded(key, value);",
      "info" : "ReturnStatement[7020-7067]:ReturnStatement[7273-7320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7081-7190]:Block[7334-7443]"
    }, {
      "left" : "tq.consume();",
      "right" : "tq.consume();",
      "info" : "ExpressionStatement[7095-7108]:ExpressionStatement[7348-7361]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[7168-7180]:ReturnStatement[7421-7433]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7202-7209]:Modifier[7455-7462]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7210-7214]:PrimitiveType[7463-7467]"
    }, {
      "left" : "parseTextNode",
      "right" : "parseTextNode",
      "info" : "SimpleName[7215-7228]:SimpleName[7468-7481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7231-7388]:Block[7484-7641]"
    }, {
      "left" : "String text = tq.consumeTo(\"<\");",
      "right" : "String text = tq.consumeTo(\"<\");",
      "info" : "VariableDeclarationStatement[7241-7273]:VariableDeclarationStatement[7494-7526]"
    }, {
      "left" : "TextNode textNode = TextNode.createFromEncoded(text, baseUri);",
      "right" : "TextNode textNode = TextNode.createFromEncoded(text, baseUri);",
      "info" : "VariableDeclarationStatement[7282-7344]:VariableDeclarationStatement[7535-7597]"
    }, {
      "left" : "last().appendChild(textNode);",
      "right" : "last().appendChild(textNode);",
      "info" : "ExpressionStatement[7353-7382]:ExpressionStatement[7606-7635]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7394-7401]:Modifier[7647-7654]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7402-7406]:PrimitiveType[7655-7659]"
    }, {
      "left" : "parseCdata",
      "right" : "parseCdata",
      "info" : "SimpleName[7407-7417]:SimpleName[7660-7670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7420-7633]:Block[7673-7886]"
    }, {
      "left" : "tq.consume(\"<![CDATA[\");",
      "right" : "tq.consume(\"<![CDATA[\");",
      "info" : "ExpressionStatement[7430-7454]:ExpressionStatement[7683-7707]"
    }, {
      "left" : "String rawText = tq.chompTo(\"]]>\");",
      "right" : "String rawText = tq.chompTo(\"]]>\");",
      "info" : "VariableDeclarationStatement[7463-7498]:VariableDeclarationStatement[7716-7751]"
    }, {
      "left" : "TextNode textNode = new TextNode(rawText, baseUri);",
      "right" : "TextNode textNode = new TextNode(rawText, baseUri);",
      "info" : "VariableDeclarationStatement[7507-7558]:VariableDeclarationStatement[7760-7811]"
    }, {
      "left" : "last().appendChild(textNode);",
      "right" : "last().appendChild(textNode);",
      "info" : "ExpressionStatement[7598-7627]:ExpressionStatement[7851-7880]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7639-7646]:Modifier[7892-7899]"
    }, {
      "left" : "addChildToParent",
      "right" : "addChildToParent",
      "info" : "SimpleName[7655-7671]:SimpleName[7908-7924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7711-8727]:Block[7964-8992]"
    }, {
      "left" : "Element parent = popStackToSuitableContainer(child.tag());",
      "right" : "Element parent = popStackToSuitableContainer(child.tag());",
      "info" : "VariableDeclarationStatement[7721-7779]:VariableDeclarationStatement[7974-8032]"
    }, {
      "left" : "Tag childTag = child.tag();",
      "right" : "Tag childTag = child.tag();",
      "info" : "VariableDeclarationStatement[7788-7815]:VariableDeclarationStatement[8041-8068]"
    }, {
      "left" : "boolean validAncestor = stackHasValidParent(childTag);",
      "right" : "boolean validAncestor = stackHasValidParent(childTag);",
      "info" : "VariableDeclarationStatement[7824-7878]:VariableDeclarationStatement[8077-8131]"
    }, {
      "left" : "if (!validAncestor)",
      "right" : "if (!validAncestor && !relaxed)",
      "info" : "IfStatement[7888-8598]:IfStatement[8141-8863]"
    }, {
      "left" : "!validAncestor",
      "right" : "!validAncestor",
      "info" : "PrefixExpression[7892-7906]:PrefixExpression[8145-8159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7908-8598]:Block[8173-8863]"
    }, {
      "left" : "Tag parentTag = childTag.getImplicitParent();",
      "right" : "Tag parentTag = childTag.getImplicitParent();",
      "info" : "VariableDeclarationStatement[7978-8023]:VariableDeclarationStatement[8243-8288]"
    }, {
      "left" : "Element implicit = new Element(parentTag, baseUri);",
      "right" : "Element implicit = new Element(parentTag, baseUri);",
      "info" : "VariableDeclarationStatement[8036-8087]:VariableDeclarationStatement[8301-8352]"
    }, {
      "left" : "if (child.tag().equals(bodyTag))",
      "right" : "if (child.tag().equals(bodyTag))",
      "info" : "IfStatement[8177-8331]:IfStatement[8442-8596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8210-8331]:Block[8475-8596]"
    }, {
      "left" : "Element head = new Element(headTag, baseUri);",
      "right" : "Element head = new Element(headTag, baseUri);",
      "info" : "VariableDeclarationStatement[8228-8273]:VariableDeclarationStatement[8493-8538]"
    }, {
      "left" : "implicit.appendChild(head);",
      "right" : "implicit.appendChild(head);",
      "info" : "ExpressionStatement[8290-8317]:ExpressionStatement[8555-8582]"
    }, {
      "left" : "implicit.appendChild(child);",
      "right" : "implicit.appendChild(child);",
      "info" : "ExpressionStatement[8344-8372]:ExpressionStatement[8609-8637]"
    }, {
      "left" : "Element root = addChildToParent(implicit, false);",
      "right" : "Element root = addChildToParent(implicit, false);",
      "info" : "VariableDeclarationStatement[8443-8492]:VariableDeclarationStatement[8708-8757]"
    }, {
      "left" : "if (!isEmptyElement)",
      "right" : "if (!isEmptyElement)",
      "info" : "IfStatement[8505-8563]:IfStatement[8770-8828]"
    }, {
      "left" : "stack.addLast(child);",
      "right" : "stack.addLast(child);",
      "info" : "ExpressionStatement[8542-8563]:ExpressionStatement[8807-8828]"
    }, {
      "left" : "return root;",
      "right" : "return root;",
      "info" : "ReturnStatement[8576-8588]:ReturnStatement[8841-8853]"
    }, {
      "left" : "parent.appendChild(child);",
      "right" : "parent.appendChild(child);",
      "info" : "ExpressionStatement[8608-8634]:ExpressionStatement[8873-8899]"
    }, {
      "left" : "if (!isEmptyElement)",
      "right" : "if (!isEmptyElement)",
      "info" : "IfStatement[8644-8698]:IfStatement[8909-8963]"
    }, {
      "left" : "stack.addLast(child);",
      "right" : "stack.addLast(child);",
      "info" : "ExpressionStatement[8677-8698]:ExpressionStatement[8942-8963]"
    }, {
      "left" : "return parent;",
      "right" : "return parent;",
      "info" : "ReturnStatement[8707-8721]:ReturnStatement[8972-8986]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8733-8740]:Modifier[8998-9005]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8741-8748]:PrimitiveType[9006-9013]"
    }, {
      "left" : "stackHasValidParent",
      "right" : "stackHasValidParent",
      "info" : "SimpleName[8749-8768]:SimpleName[9014-9033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8783-9221]:Block[9048-9601]"
    }, {
      "left" : "if (stack.size() == 1 && childTag.equals(htmlTag))",
      "right" : "if (stack.size() == 1 && childTag.equals(htmlTag))",
      "info" : "IfStatement[8793-8868]:IfStatement[9058-9133]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8856-8868]:ReturnStatement[9121-9133]"
    }, {
      "left" : "for (int i = stack.size() -1; i >= 0; i--)",
      "right" : "for (int i = stack.size() -1; i >= 0; i--)",
      "info" : "ForStatement[8970-9193]:ForStatement[9348-9573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9013-9193]:Block[9391-9573]"
    }, {
      "left" : "Element el = stack.get(i);",
      "right" : "Element el = stack.get(i);",
      "info" : "VariableDeclarationStatement[9027-9053]:VariableDeclarationStatement[9405-9431]"
    }, {
      "left" : "Tag parent2 = el.tag();",
      "right" : "Tag parent2 = el.tag();",
      "info" : "VariableDeclarationStatement[9066-9089]:VariableDeclarationStatement[9444-9467]"
    }, {
      "left" : "if (parent2.isValidParent(childTag))",
      "right" : "if (parent2.isValidAncestor(childTag))",
      "info" : "IfStatement[9102-9183]:IfStatement[9480-9563]"
    }, {
      "left" : "isValidParent",
      "right" : "isValidAncestor",
      "info" : "SimpleName[9114-9127]:SimpleName[9492-9507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9139-9183]:Block[9519-9563]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9157-9169]:ReturnStatement[9537-9549]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9202-9215]:ReturnStatement[9582-9595]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9227-9234]:Modifier[9607-9614]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[9235-9242]:SimpleType[9615-9622]"
    }, {
      "left" : "popStackToSuitableContainer",
      "right" : "popStackToSuitableContainer",
      "info" : "SimpleName[9243-9270]:SimpleName[9623-9650]"
    }, {
      "left" : "Tag tag",
      "right" : "Tag tag",
      "info" : "SingleVariableDeclaration[9271-9278]:SingleVariableDeclaration[9651-9658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9280-9483]:Block[9660-9863]"
    }, {
      "left" : "while (!stack.isEmpty())",
      "right" : "while (!stack.isEmpty())",
      "info" : "WhileStatement[9290-9456]:WhileStatement[9670-9836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9315-9456]:Block[9695-9836]"
    }, {
      "left" : "if (last().tag().canContain(tag))",
      "right" : "if (last().tag().canContain(tag))",
      "info" : "IfStatement[9329-9446]:IfStatement[9709-9826]"
    }, {
      "left" : "return last();",
      "right" : "return last();",
      "info" : "ReturnStatement[9379-9393]:ReturnStatement[9759-9773]"
    }, {
      "left" : "stack.removeLast();",
      "right" : "stack.removeLast();",
      "info" : "ExpressionStatement[9427-9446]:ExpressionStatement[9807-9826]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9465-9477]:ReturnStatement[9845-9857]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9489-9496]:Modifier[9869-9876]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[9497-9504]:SimpleType[9877-9884]"
    }, {
      "left" : "popStackToClose",
      "right" : "popStackToClose",
      "info" : "SimpleName[9505-9520]:SimpleName[9885-9900]"
    }, {
      "left" : "Tag tag",
      "right" : "Tag tag",
      "info" : "SingleVariableDeclaration[9521-9528]:SingleVariableDeclaration[9901-9908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9530-10257]:Block[9910-10637]"
    }, {
      "left" : "int counter = 0;",
      "right" : "int counter = 0;",
      "info" : "VariableDeclarationStatement[9635-9651]:VariableDeclarationStatement[10015-10031]"
    }, {
      "left" : "Element elToClose = null;",
      "right" : "Element elToClose = null;",
      "info" : "VariableDeclarationStatement[9660-9685]:VariableDeclarationStatement[10040-10065]"
    }, {
      "left" : "for (int i = stack.size() -1; i > 0; i--)",
      "right" : "for (int i = stack.size() -1; i > 0; i--)",
      "info" : "ForStatement[9694-10084]:ForStatement[10074-10464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9736-10084]:Block[10116-10464]"
    }, {
      "left" : "counter++;",
      "right" : "counter++;",
      "info" : "ExpressionStatement[9750-9760]:ExpressionStatement[10130-10140]"
    }, {
      "left" : "Element el = stack.get(i);",
      "right" : "Element el = stack.get(i);",
      "info" : "VariableDeclarationStatement[9773-9799]:VariableDeclarationStatement[10153-10179]"
    }, {
      "left" : "Tag elTag = el.tag();",
      "right" : "Tag elTag = el.tag();",
      "info" : "VariableDeclarationStatement[9812-9833]:VariableDeclarationStatement[10192-10213]"
    }, {
      "left" : "if (elTag.equals(bodyTag) || elTag.equals(htmlTag))",
      "right" : "if (elTag.equals(bodyTag) || elTag.equals(htmlTag))",
      "info" : "IfStatement[9846-10074]:IfStatement[10226-10454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9898-9975]:Block[10278-10355]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9955-9961]:BreakStatement[10335-10341]"
    }, {
      "left" : "if (elTag.equals(tag))",
      "right" : "if (elTag.equals(tag))",
      "info" : "IfStatement[9981-10074]:IfStatement[10361-10454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10004-10074]:Block[10384-10454]"
    }, {
      "left" : "elToClose = el;",
      "right" : "elToClose = el;",
      "info" : "ExpressionStatement[10022-10037]:ExpressionStatement[10402-10417]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10054-10060]:BreakStatement[10434-10440]"
    }, {
      "left" : "if (elToClose != null)",
      "right" : "if (elToClose != null)",
      "info" : "IfStatement[10093-10225]:IfStatement[10473-10605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10116-10225]:Block[10496-10605]"
    }, {
      "left" : "for (int i = 0; i < counter; i++)",
      "right" : "for (int i = 0; i < counter; i++)",
      "info" : "ForStatement[10130-10215]:ForStatement[10510-10595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10164-10215]:Block[10544-10595]"
    }, {
      "left" : "stack.removeLast();",
      "right" : "stack.removeLast();",
      "info" : "ExpressionStatement[10182-10201]:ExpressionStatement[10562-10581]"
    }, {
      "left" : "return elToClose;",
      "right" : "return elToClose;",
      "info" : "ReturnStatement[10234-10251]:ReturnStatement[10614-10631]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10263-10270]:Modifier[10643-10650]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[10271-10278]:SimpleType[10651-10658]"
    }, {
      "left" : "last",
      "right" : "last",
      "info" : "SimpleName[10279-10283]:SimpleName[10659-10663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10286-10325]:Block[10666-10705]"
    }, {
      "left" : "return stack.getLast();",
      "right" : "return stack.getLast();",
      "info" : "ReturnStatement[10296-10319]:ReturnStatement[10676-10699]"
    } ]
  },
  "interFileMappings" : { }
}