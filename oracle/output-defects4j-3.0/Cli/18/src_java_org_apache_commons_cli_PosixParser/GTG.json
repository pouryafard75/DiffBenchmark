{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "PosixParser",
      "right" : "PosixParser",
      "info" : "TypeDeclaration[941-10314]:TypeDeclaration[941-10244]"
    }, {
      "left" : "private List tokens = new ArrayList();",
      "right" : "private List tokens = new ArrayList();",
      "info" : "FieldDeclaration[1216-1293]:FieldDeclaration[1216-1293]"
    }, {
      "left" : "private boolean eatTheRest;",
      "right" : "private boolean eatTheRest;",
      "info" : "FieldDeclaration[1299-1375]:FieldDeclaration[1299-1375]"
    }, {
      "left" : "private Option currentOption;",
      "right" : "private Option currentOption;",
      "info" : "FieldDeclaration[1381-1451]:FieldDeclaration[1381-1451]"
    }, {
      "left" : "private Options options;",
      "right" : "private Options options;",
      "info" : "FieldDeclaration[1457-1517]:FieldDeclaration[1457-1517]"
    }, {
      "left" : "private void init()",
      "right" : "private void init()",
      "info" : "MethodDeclaration[1523-1845]:MethodDeclaration[1523-1845]"
    }, {
      "left" : "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",
      "right" : "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",
      "info" : "MethodDeclaration[1851-5780]:MethodDeclaration[1851-5771]"
    }, {
      "left" : "private void gobble(Iterator iter)",
      "right" : "private void gobble(Iterator iter)",
      "info" : "MethodDeclaration[5786-6123]:MethodDeclaration[5777-6114]"
    }, {
      "left" : "private void process(String value)",
      "right" : "private void process(String value)",
      "info" : "MethodDeclaration[6129-7266]:MethodDeclaration[6120-7257]"
    }, {
      "left" : "private void processOptionToken(String token, boolean stopAtNonOption)",
      "right" : "private void processOptionToken(String token, boolean stopAtNonOption)",
      "info" : "MethodDeclaration[7364-8203]:MethodDeclaration[7263-8133]"
    }, {
      "left" : "protected void burstToken(String token, boolean stopAtNonOption)",
      "right" : "protected void burstToken(String token, boolean stopAtNonOption)",
      "info" : "MethodDeclaration[8209-10312]:MethodDeclaration[8139-10242]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1169-1175]:Modifier[1169-1175]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1176-1181]:TYPE_DECLARATION_KIND[1176-1181]"
    }, {
      "left" : "PosixParser",
      "right" : "PosixParser",
      "info" : "SimpleName[1182-1193]:SimpleName[1182-1193]"
    }, {
      "left" : "Parser",
      "right" : "Parser",
      "info" : "SimpleType[1202-1208]:SimpleType[1202-1208]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[1732-1739]:Modifier[1732-1739]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1740-1744]:PrimitiveType[1740-1744]"
    }, {
      "left" : "init",
      "right" : "init",
      "info" : "SimpleName[1745-1749]:SimpleName[1745-1749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1756-1845]:Block[1756-1845]"
    }, {
      "left" : "eatTheRest = false;",
      "right" : "eatTheRest = false;",
      "info" : "ExpressionStatement[1766-1785]:ExpressionStatement[1766-1785]"
    }, {
      "left" : "tokens.clear();",
      "right" : "tokens.clear();",
      "info" : "ExpressionStatement[1794-1809]:ExpressionStatement[1794-1809]"
    }, {
      "left" : "currentOption = null;",
      "right" : "currentOption = null;",
      "info" : "ExpressionStatement[1818-1839]:ExpressionStatement[1818-1839]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[3978-3987]:Modifier[3978-3987]"
    }, {
      "left" : "String[]",
      "right" : "String[]",
      "info" : "ArrayType[3988-3996]:ArrayType[3988-3996]"
    }, {
      "left" : "flatten",
      "right" : "flatten",
      "info" : "SimpleName[3997-4004]:SimpleName[3997-4004]"
    }, {
      "left" : "Options options",
      "right" : "Options options",
      "info" : "SingleVariableDeclaration[4005-4020]:SingleVariableDeclaration[4005-4020]"
    }, {
      "left" : "String[] arguments",
      "right" : "String[] arguments",
      "info" : "SingleVariableDeclaration[4022-4040]:SingleVariableDeclaration[4022-4040]"
    }, {
      "left" : "boolean stopAtNonOption",
      "right" : "boolean stopAtNonOption",
      "info" : "SingleVariableDeclaration[4042-4065]:SingleVariableDeclaration[4042-4065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4071-5780]:Block[4071-5771]"
    }, {
      "left" : "init();",
      "right" : "init();",
      "info" : "ExpressionStatement[4081-4088]:ExpressionStatement[4081-4088]"
    }, {
      "left" : "this.options = options;",
      "right" : "this.options = options;",
      "info" : "ExpressionStatement[4097-4120]:ExpressionStatement[4097-4120]"
    }, {
      "left" : "Iterator iter = Arrays.asList(arguments).iterator();",
      "right" : "Iterator iter = Arrays.asList(arguments).iterator();",
      "info" : "VariableDeclarationStatement[4181-4233]:VariableDeclarationStatement[4181-4233]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[4286-5704]:WhileStatement[4286-5695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4317-5704]:Block[4317-5695]"
    }, {
      "left" : "String token = (String) iter.next();",
      "right" : "String token = (String) iter.next();",
      "info" : "VariableDeclarationStatement[4378-4414]:VariableDeclarationStatement[4378-4414]"
    }, {
      "left" : "if (token.startsWith(\"--\"))",
      "right" : "if (token.startsWith(\"--\"))",
      "info" : "IfStatement[4464-5667]:IfStatement[4464-5658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4504-4858]:Block[4504-4858]"
    }, {
      "left" : "if (token.indexOf('=') != -1)",
      "right" : "if (token.indexOf('=') != -1)",
      "info" : "IfStatement[4522-4844]:IfStatement[4522-4844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4568-4748]:Block[4568-4748]"
    }, {
      "left" : "tokens.add(token.substring(0, token.indexOf('=')));",
      "right" : "tokens.add(token.substring(0, token.indexOf('=')));",
      "info" : "ExpressionStatement[4590-4641]:ExpressionStatement[4590-4641]"
    }, {
      "left" : "tokens.add(token.substring(token.indexOf('=') + 1, token.length()));",
      "right" : "tokens.add(token.substring(token.indexOf('=') + 1, token.length()));",
      "info" : "ExpressionStatement[4662-4730]:ExpressionStatement[4662-4730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4786-4844]:Block[4786-4844]"
    }, {
      "left" : "tokens.add(token);",
      "right" : "tokens.add(token);",
      "info" : "ExpressionStatement[4808-4826]:ExpressionStatement[4808-4826]"
    }, {
      "left" : "if (\"-\".equals(token))",
      "right" : "if (\"-\".equals(token))",
      "info" : "IfStatement[4906-5667]:IfStatement[4906-5658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4941-5000]:Block[4941-4991]"
    }, {
      "left" : "processSingleHyphen",
      "right" : "tokens",
      "info" : "SimpleName[4959-4978]:SimpleName[4959-4965]"
    }, {
      "left" : "processSingleHyphen(token);",
      "right" : "tokens.add(token);",
      "info" : "ExpressionStatement[4959-4986]:ExpressionStatement[4959-4977]"
    }, {
      "left" : "if (token.startsWith(\"-\"))",
      "right" : "if (token.startsWith(\"-\"))",
      "info" : "IfStatement[5018-5667]:IfStatement[5009-5658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5057-5489]:Block[5048-5480]"
    }, {
      "left" : "if (token.length() == 2)",
      "right" : "if (token.length() == 2)",
      "info" : "IfStatement[5075-5475]:IfStatement[5066-5466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5116-5199]:Block[5107-5190]"
    }, {
      "left" : "processOptionToken(token, stopAtNonOption);",
      "right" : "processOptionToken(token, stopAtNonOption);",
      "info" : "ExpressionStatement[5138-5181]:ExpressionStatement[5129-5172]"
    }, {
      "left" : "if (options.hasOption(token))",
      "right" : "if (options.hasOption(token))",
      "info" : "IfStatement[5221-5475]:IfStatement[5212-5466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5267-5325]:Block[5258-5316]"
    }, {
      "left" : "tokens.add(token);",
      "right" : "tokens.add(token);",
      "info" : "ExpressionStatement[5289-5307]:ExpressionStatement[5280-5298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5400-5475]:Block[5391-5466]"
    }, {
      "left" : "burstToken(token, stopAtNonOption);",
      "right" : "burstToken(token, stopAtNonOption);",
      "info" : "ExpressionStatement[5422-5457]:ExpressionStatement[5413-5448]"
    }, {
      "left" : "if (stopAtNonOption)",
      "right" : "if (stopAtNonOption)",
      "info" : "IfStatement[5507-5667]:IfStatement[5498-5658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5540-5587]:Block[5531-5578]"
    }, {
      "left" : "process(token);",
      "right" : "process(token);",
      "info" : "ExpressionStatement[5558-5573]:ExpressionStatement[5549-5564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5617-5667]:Block[5608-5658]"
    }, {
      "left" : "tokens.add(token);",
      "right" : "tokens.add(token);",
      "info" : "ExpressionStatement[5635-5653]:ExpressionStatement[5626-5644]"
    }, {
      "left" : "gobble(iter);",
      "right" : "gobble(iter);",
      "info" : "ExpressionStatement[5681-5694]:ExpressionStatement[5672-5685]"
    }, {
      "left" : "return (String[]) tokens.toArray(new String[tokens.size()]);",
      "right" : "return (String[]) tokens.toArray(new String[tokens.size()]);",
      "info" : "ReturnStatement[5714-5774]:ReturnStatement[5705-5765]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5929-5936]:Modifier[5920-5927]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5937-5941]:PrimitiveType[5928-5932]"
    }, {
      "left" : "gobble",
      "right" : "gobble",
      "info" : "SimpleName[5942-5948]:SimpleName[5933-5939]"
    }, {
      "left" : "Iterator iter",
      "right" : "Iterator iter",
      "info" : "SingleVariableDeclaration[5949-5962]:SingleVariableDeclaration[5940-5953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5968-6123]:Block[5959-6114]"
    }, {
      "left" : "if (eatTheRest)",
      "right" : "if (eatTheRest)",
      "info" : "IfStatement[5978-6117]:IfStatement[5969-6108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6002-6117]:Block[5993-6108]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[6016-6107]:WhileStatement[6007-6098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6051-6107]:Block[6042-6098]"
    }, {
      "left" : "tokens.add(iter.next());",
      "right" : "tokens.add(iter.next());",
      "info" : "ExpressionStatement[6069-6093]:ExpressionStatement[6060-6084]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6764-6771]:Modifier[6755-6762]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6772-6776]:PrimitiveType[6763-6767]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[6777-6784]:SimpleName[6768-6775]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[6785-6797]:SingleVariableDeclaration[6776-6788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6803-7266]:Block[6794-7257]"
    }, {
      "left" : "if (currentOption != null && currentOption.hasArg())",
      "right" : "if (currentOption != null && currentOption.hasArg())",
      "info" : "IfStatement[6813-7260]:IfStatement[6804-7251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6874-7135]:Block[6865-7126]"
    }, {
      "left" : "if (currentOption.hasArg())",
      "right" : "if (currentOption.hasArg())",
      "info" : "IfStatement[6888-7125]:IfStatement[6879-7116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6928-7016]:Block[6919-7007]"
    }, {
      "left" : "tokens.add(value);",
      "right" : "tokens.add(value);",
      "info" : "ExpressionStatement[6946-6964]:ExpressionStatement[6937-6955]"
    }, {
      "left" : "currentOption = null;",
      "right" : "currentOption = null;",
      "info" : "ExpressionStatement[6981-7002]:ExpressionStatement[6972-6993]"
    }, {
      "left" : "if (currentOption.hasArgs())",
      "right" : "if (currentOption.hasArgs())",
      "info" : "IfStatement[7034-7125]:IfStatement[7025-7116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7075-7125]:Block[7066-7116]"
    }, {
      "left" : "tokens.add(value);",
      "right" : "tokens.add(value);",
      "info" : "ExpressionStatement[7093-7111]:ExpressionStatement[7084-7102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7157-7260]:Block[7148-7251]"
    }, {
      "left" : "eatTheRest = true;",
      "right" : "eatTheRest = true;",
      "info" : "ExpressionStatement[7171-7189]:ExpressionStatement[7162-7180]"
    }, {
      "left" : "tokens.add(\"--\");",
      "right" : "tokens.add(\"--\");",
      "info" : "ExpressionStatement[7202-7219]:ExpressionStatement[7193-7210]"
    }, {
      "left" : "tokens.add(value);",
      "right" : "tokens.add(value);",
      "info" : "ExpressionStatement[7232-7250]:ExpressionStatement[7223-7241]"
    }, {
      "left" : "tokens",
      "right" : "tokens",
      "info" : "METHOD_INVOCATION_RECEIVER[7333-7339]:METHOD_INVOCATION_RECEIVER[8099-8105]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7893-7900]:Modifier[7792-7799]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7901-7905]:PrimitiveType[7800-7804]"
    }, {
      "left" : "processOptionToken",
      "right" : "processOptionToken",
      "info" : "SimpleName[7906-7924]:SimpleName[7805-7823]"
    }, {
      "left" : "String token",
      "right" : "String token",
      "info" : "SingleVariableDeclaration[7925-7937]:SingleVariableDeclaration[7824-7836]"
    }, {
      "left" : "boolean stopAtNonOption",
      "right" : "boolean stopAtNonOption",
      "info" : "SingleVariableDeclaration[7939-7962]:SingleVariableDeclaration[7838-7861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7968-8203]:Block[7867-8133]"
    }, {
      "left" : "if (options.hasOption(token))",
      "right" : "if (options.hasOption(token))",
      "info" : "IfStatement[7978-8197]:IfStatement[7877-8127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8016-8112]:Block[7915-8011]"
    }, {
      "left" : "currentOption = options.getOption(token);",
      "right" : "currentOption = options.getOption(token);",
      "info" : "ExpressionStatement[8030-8071]:ExpressionStatement[7929-7970]"
    }, {
      "left" : "tokens.add(token);",
      "right" : "tokens.add(token);",
      "info" : "ExpressionStatement[8084-8102]:ExpressionStatement[7983-8001]"
    }, {
      "left" : "if (stopAtNonOption)",
      "right" : "if (stopAtNonOption)",
      "info" : "IfStatement[8126-8197]:IfStatement[8025-8127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8155-8197]:Block[8054-8127]"
    }, {
      "left" : "eatTheRest = true;",
      "right" : "eatTheRest = true;",
      "info" : "ExpressionStatement[8169-8187]:ExpressionStatement[8068-8086]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[9516-9525]:Modifier[9446-9455]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9526-9530]:PrimitiveType[9456-9460]"
    }, {
      "left" : "burstToken",
      "right" : "burstToken",
      "info" : "SimpleName[9531-9541]:SimpleName[9461-9471]"
    }, {
      "left" : "String token",
      "right" : "String token",
      "info" : "SingleVariableDeclaration[9542-9554]:SingleVariableDeclaration[9472-9484]"
    }, {
      "left" : "boolean stopAtNonOption",
      "right" : "boolean stopAtNonOption",
      "info" : "SingleVariableDeclaration[9556-9579]:SingleVariableDeclaration[9486-9509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9585-10312]:Block[9515-10242]"
    }, {
      "left" : "for (int i = 1; i < token.length(); i++)",
      "right" : "for (int i = 1; i < token.length(); i++)",
      "info" : "ForStatement[9595-10306]:ForStatement[9525-10236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9644-10306]:Block[9574-10236]"
    }, {
      "left" : "String ch = String.valueOf(token.charAt(i));",
      "right" : "String ch = String.valueOf(token.charAt(i));",
      "info" : "VariableDeclarationStatement[9658-9702]:VariableDeclarationStatement[9588-9632]"
    }, {
      "left" : "if (options.hasOption(ch))",
      "right" : "if (options.hasOption(ch))",
      "info" : "IfStatement[9716-10296]:IfStatement[9646-10226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9755-10059]:Block[9685-9989]"
    }, {
      "left" : "tokens.add(\"-\" + ch);",
      "right" : "tokens.add(\"-\" + ch);",
      "info" : "ExpressionStatement[9773-9794]:ExpressionStatement[9703-9724]"
    }, {
      "left" : "currentOption = options.getOption(ch);",
      "right" : "currentOption = options.getOption(ch);",
      "info" : "ExpressionStatement[9811-9849]:ExpressionStatement[9741-9779]"
    }, {
      "left" : "if (currentOption.hasArg() && (token.length() != (i + 1)))",
      "right" : "if (currentOption.hasArg() && (token.length() != (i + 1)))",
      "info" : "IfStatement[9867-10045]:IfStatement[9797-9975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9942-10045]:Block[9872-9975]"
    }, {
      "left" : "tokens.add(token.substring(i + 1));",
      "right" : "tokens.add(token.substring(i + 1));",
      "info" : "ExpressionStatement[9964-9999]:ExpressionStatement[9894-9929]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10021-10027]:BreakStatement[9951-9957]"
    }, {
      "left" : "if (stopAtNonOption)",
      "right" : "if (stopAtNonOption)",
      "info" : "IfStatement[10077-10296]:IfStatement[10007-10226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10110-10193]:Block[10040-10123]"
    }, {
      "left" : "process(token.substring(i));",
      "right" : "process(token.substring(i));",
      "info" : "ExpressionStatement[10128-10156]:ExpressionStatement[10058-10086]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10173-10179]:BreakStatement[10103-10109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10223-10296]:Block[10153-10226]"
    }, {
      "left" : "tokens.add(token);",
      "right" : "tokens.add(token);",
      "info" : "ExpressionStatement[10241-10259]:ExpressionStatement[10171-10189]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10276-10282]:BreakStatement[10206-10212]"
    } ]
  },
  "interFileMappings" : { }
}