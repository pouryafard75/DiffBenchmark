{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "MathArrays",
      "right" : "MathArrays",
      "info" : "TypeDeclaration[1720-55227]:TypeDeclaration[1720-55293]"
    }, {
      "left" : "private static final int SPLIT_FACTOR = 0x8000001;",
      "right" : "private static final int SPLIT_FACTOR = 0x8000001;",
      "info" : "FieldDeclaration[1813-1946]:FieldDeclaration[1813-1946]"
    }, {
      "left" : "private MathArrays()",
      "right" : "private MathArrays()",
      "info" : "MethodDeclaration[1952-2019]:MethodDeclaration[1952-2019]"
    }, {
      "left" : "Function",
      "right" : "Function",
      "info" : "TypeDeclaration[2025-2759]:TypeDeclaration[2025-2759]"
    }, {
      "left" : "double evaluate(double[] array);",
      "right" : "double evaluate(double[] array);",
      "info" : "MethodDeclaration[2165-2365]:MethodDeclaration[2165-2365]"
    }, {
      "left" : "double evaluate(double[] array,\n                        int startIndex,\n                        int numElements);",
      "right" : "double evaluate(double[] array,\n                        int startIndex,\n                        int numElements);",
      "info" : "MethodDeclaration[2374-2753]:MethodDeclaration[2374-2753]"
    }, {
      "left" : "public static double[] scale(double val, final double[] arr)",
      "right" : "public static double[] scale(double val, final double[] arr)",
      "info" : "MethodDeclaration[2765-3225]:MethodDeclaration[2765-3225]"
    }, {
      "left" : "public static void scaleInPlace(double val, final double[] arr)",
      "right" : "public static void scaleInPlace(double val, final double[] arr)",
      "info" : "MethodDeclaration[3231-3619]:MethodDeclaration[3231-3619]"
    }, {
      "left" : "public static double[] ebeAdd(double[] a, double[] b)\n        throws DimensionMismatchException",
      "right" : "public static double[] ebeAdd(double[] a, double[] b)\n        throws DimensionMismatchException",
      "info" : "MethodDeclaration[3625-4373]:MethodDeclaration[3625-4373]"
    }, {
      "left" : "public static double[] ebeSubtract(double[] a, double[] b)\n        throws DimensionMismatchException",
      "right" : "public static double[] ebeSubtract(double[] a, double[] b)\n        throws DimensionMismatchException",
      "info" : "MethodDeclaration[4378-5136]:MethodDeclaration[4378-5136]"
    }, {
      "left" : "public static double[] ebeMultiply(double[] a, double[] b)\n        throws DimensionMismatchException",
      "right" : "public static double[] ebeMultiply(double[] a, double[] b)\n        throws DimensionMismatchException",
      "info" : "MethodDeclaration[5141-5916]:MethodDeclaration[5141-5916]"
    }, {
      "left" : "public static double[] ebeDivide(double[] a, double[] b)\n        throws DimensionMismatchException",
      "right" : "public static double[] ebeDivide(double[] a, double[] b)\n        throws DimensionMismatchException",
      "info" : "MethodDeclaration[5921-6690]:MethodDeclaration[5921-6690]"
    }, {
      "left" : "public static double distance1(double[] p1, double[] p2)",
      "right" : "public static double distance1(double[] p1, double[] p2)",
      "info" : "MethodDeclaration[6696-7141]:MethodDeclaration[6696-7141]"
    }, {
      "left" : "public static int distance1(int[] p1, int[] p2)",
      "right" : "public static int distance1(int[] p1, int[] p2)",
      "info" : "MethodDeclaration[7147-7570]:MethodDeclaration[7147-7570]"
    }, {
      "left" : "public static double distance(double[] p1, double[] p2)",
      "right" : "public static double distance(double[] p1, double[] p2)",
      "info" : "MethodDeclaration[7576-8059]:MethodDeclaration[7576-8059]"
    }, {
      "left" : "public static double distance(int[] p1, int[] p2)",
      "right" : "public static double distance(int[] p1, int[] p2)",
      "info" : "MethodDeclaration[8065-8530]:MethodDeclaration[8065-8530]"
    }, {
      "left" : "public static double distanceInf(double[] p1, double[] p2)",
      "right" : "public static double distanceInf(double[] p1, double[] p2)",
      "info" : "MethodDeclaration[8536-9013]:MethodDeclaration[8536-9013]"
    }, {
      "left" : "public static int distanceInf(int[] p1, int[] p2)",
      "right" : "public static int distanceInf(int[] p1, int[] p2)",
      "info" : "MethodDeclaration[9019-9484]:MethodDeclaration[9019-9484]"
    }, {
      "left" : "enum : OrderDirection",
      "right" : "enum : OrderDirection",
      "info" : "EnumDeclaration[9490-9730]:EnumDeclaration[9490-9730]"
    }, {
      "left" : "public static  <T extends Comparable<? super T>> boolean isMonotonic(T[] val,\n                                      OrderDirection dir,\n                                      boolean strict)",
      "right" : "public static  <T extends Comparable<? super T>> boolean isMonotonic(T[] val,\n                                      OrderDirection dir,\n                                      boolean strict)",
      "info" : "MethodDeclaration[9736-11359]:MethodDeclaration[9736-11359]"
    }, {
      "left" : "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)",
      "right" : "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)",
      "info" : "MethodDeclaration[11365-11786]:MethodDeclaration[11365-11786]"
    }, {
      "left" : "public static boolean checkOrder(double[] val, OrderDirection dir,\n                                     boolean strict, boolean abort)\n        throws NonMonotonicSequenceException",
      "right" : "public static boolean checkOrder(double[] val, OrderDirection dir,\n                                     boolean strict, boolean abort)\n        throws NonMonotonicSequenceException",
      "info" : "MethodDeclaration[11792-13745]:MethodDeclaration[11792-13745]"
    }, {
      "left" : "public static void checkOrder(double[] val, OrderDirection dir,\n                                  boolean strict) throws NonMonotonicSequenceException",
      "right" : "public static void checkOrder(double[] val, OrderDirection dir,\n                                  boolean strict) throws NonMonotonicSequenceException",
      "info" : "MethodDeclaration[13751-14233]:MethodDeclaration[13751-14233]"
    }, {
      "left" : "public static void checkOrder(double[] val) throws NonMonotonicSequenceException",
      "right" : "public static void checkOrder(double[] val) throws NonMonotonicSequenceException",
      "info" : "MethodDeclaration[14239-14599]:MethodDeclaration[14239-14599]"
    }, {
      "left" : "public static void checkRectangular(final long[][] in)\n        throws NullArgumentException, DimensionMismatchException",
      "right" : "public static void checkRectangular(final long[][] in)\n        throws NullArgumentException, DimensionMismatchException",
      "info" : "MethodDeclaration[14605-15351]:MethodDeclaration[14605-15351]"
    }, {
      "left" : "public static void checkPositive(final double[] in)\n        throws NotStrictlyPositiveException",
      "right" : "public static void checkPositive(final double[] in)\n        throws NotStrictlyPositiveException",
      "info" : "MethodDeclaration[15357-15878]:MethodDeclaration[15357-15878]"
    }, {
      "left" : "public static void checkNonNegative(final long[] in)\n        throws NotPositiveException",
      "right" : "public static void checkNonNegative(final long[] in)\n        throws NotPositiveException",
      "info" : "MethodDeclaration[15884-16344]:MethodDeclaration[15884-16344]"
    }, {
      "left" : "public static void checkNonNegative(final long[][] in)\n        throws NotPositiveException",
      "right" : "public static void checkNonNegative(final long[][] in)\n        throws NotPositiveException",
      "info" : "MethodDeclaration[16350-16893]:MethodDeclaration[16350-16893]"
    }, {
      "left" : "public static double safeNorm(double[] v)",
      "right" : "public static double safeNorm(double[] v)",
      "info" : "MethodDeclaration[16899-21991]:MethodDeclaration[16899-21991]"
    }, {
      "left" : "public static void sortInPlace(double[] x, double[] ... yList)\n        throws DimensionMismatchException, NullArgumentException",
      "right" : "public static void sortInPlace(double[] x, double[] ... yList)\n        throws DimensionMismatchException, NullArgumentException",
      "info" : "MethodDeclaration[21997-22984]:MethodDeclaration[21997-22984]"
    }, {
      "left" : "public static void sortInPlace(double[] x,\n                                   final OrderDirection dir,\n                                   double[] ... yList)\n        throws NullArgumentException,\n               DimensionMismatchException",
      "right" : "public static void sortInPlace(double[] x,\n                                   final OrderDirection dir,\n                                   double[] ... yList)\n        throws NullArgumentException,\n               DimensionMismatchException",
      "info" : "MethodDeclaration[22990-26299]:MethodDeclaration[22990-26299]"
    }, {
      "left" : "public int compare(Pair<Double, Integer> o1,\n                               Pair<Double, Integer> o2)",
      "right" : "public int compare(Pair<Double, Integer> o1,\n                               Pair<Double, Integer> o2)",
      "info" : "MethodDeclaration[25021-25197]:MethodDeclaration[25021-25197]"
    }, {
      "left" : "public int compare(Pair<Double, Integer> o1,\n                               Pair<Double, Integer> o2)",
      "right" : "public int compare(Pair<Double, Integer> o1,\n                               Pair<Double, Integer> o2)",
      "info" : "MethodDeclaration[25263-25439]:MethodDeclaration[25263-25439]"
    }, {
      "left" : "public static int[] copyOf(int[] source)",
      "right" : "public static int[] copyOf(int[] source)",
      "info" : "MethodDeclaration[26305-26550]:MethodDeclaration[26305-26550]"
    }, {
      "left" : "public static double[] copyOf(double[] source)",
      "right" : "public static double[] copyOf(double[] source)",
      "info" : "MethodDeclaration[26556-26807]:MethodDeclaration[26556-26807]"
    }, {
      "left" : "public static int[] copyOf(int[] source, int len)",
      "right" : "public static int[] copyOf(int[] source, int len)",
      "info" : "MethodDeclaration[26813-27330]:MethodDeclaration[26813-27330]"
    }, {
      "left" : "public static double[] copyOf(double[] source, int len)",
      "right" : "public static double[] copyOf(double[] source, int len)",
      "info" : "MethodDeclaration[27336-27865]:MethodDeclaration[27336-27865]"
    }, {
      "left" : "public static double linearCombination(final double[] a, final double[] b)\n        throws DimensionMismatchException",
      "right" : "public static double linearCombination(final double[] a, final double[] b)\n        throws DimensionMismatchException",
      "info" : "MethodDeclaration[27871-30884]:MethodDeclaration[27871-30950]"
    }, {
      "left" : "public static double linearCombination(final double a1, final double b1,\n                                           final double a2, final double b2)",
      "right" : "public static double linearCombination(final double a1, final double b1,\n                                           final double a2, final double b2)",
      "info" : "MethodDeclaration[30890-34816]:MethodDeclaration[30956-34882]"
    }, {
      "left" : "public static double linearCombination(final double a1, final double b1,\n                                           final double a2, final double b2,\n                                           final double a3, final double b3)",
      "right" : "public static double linearCombination(final double a1, final double b1,\n                                           final double a2, final double b2,\n                                           final double a3, final double b3)",
      "info" : "MethodDeclaration[34822-39841]:MethodDeclaration[34888-39907]"
    }, {
      "left" : "public static double linearCombination(final double a1, final double b1,\n                                           final double a2, final double b2,\n                                           final double a3, final double b3,\n                                           final double a4, final double b4)",
      "right" : "public static double linearCombination(final double a1, final double b1,\n                                           final double a2, final double b2,\n                                           final double a3, final double b3,\n                                           final double a4, final double b4)",
      "info" : "MethodDeclaration[39847-45986]:MethodDeclaration[39913-46052]"
    }, {
      "left" : "public static boolean equals(float[] x, float[] y)",
      "right" : "public static boolean equals(float[] x, float[] y)",
      "info" : "MethodDeclaration[45992-46742]:MethodDeclaration[46058-46808]"
    }, {
      "left" : "public static boolean equalsIncludingNaN(float[] x, float[] y)",
      "right" : "public static boolean equalsIncludingNaN(float[] x, float[] y)",
      "info" : "MethodDeclaration[46748-47565]:MethodDeclaration[46814-47631]"
    }, {
      "left" : "public static boolean equals(double[] x, double[] y)",
      "right" : "public static boolean equals(double[] x, double[] y)",
      "info" : "MethodDeclaration[47571-48359]:MethodDeclaration[47637-48425]"
    }, {
      "left" : "public static boolean equalsIncludingNaN(double[] x, double[] y)",
      "right" : "public static boolean equalsIncludingNaN(double[] x, double[] y)",
      "info" : "MethodDeclaration[48365-49219]:MethodDeclaration[48431-49285]"
    }, {
      "left" : "public static double[] normalizeArray(double[] values, double normalizedSum)\n         throws MathIllegalArgumentException, MathArithmeticException",
      "right" : "public static double[] normalizeArray(double[] values, double normalizedSum)\n         throws MathIllegalArgumentException, MathArithmeticException",
      "info" : "MethodDeclaration[49226-51492]:MethodDeclaration[49292-51558]"
    }, {
      "left" : "public static <T> T[] buildArray(final Field<T> field, final int length)",
      "right" : "public static <T> T[] buildArray(final Field<T> field, final int length)",
      "info" : "MethodDeclaration[51499-52118]:MethodDeclaration[51565-52184]"
    }, {
      "left" : "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)",
      "right" : "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)",
      "info" : "MethodDeclaration[52125-53340]:MethodDeclaration[52191-53406]"
    }, {
      "left" : "public static double[] convolve(double[] x, double[] h)\n         throws NullArgumentException,\n                NoDataException",
      "right" : "public static double[] convolve(double[] x, double[] h)\n         throws NullArgumentException,\n                NoDataException",
      "info" : "MethodDeclaration[53347-55225]:MethodDeclaration[53413-55291]"
    } ],
    "mappings" : [
 {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[1996-2003]:Modifier[1996-2003]"
    }, {
      "left" : "MathArrays",
      "right" : "MathArrays",
      "info" : "SimpleName[2004-2014]:SimpleName[2004-2014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2017-2019]:Block[2017-2019]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2129-2135]:Modifier[2129-2135]"
    }, {
      "left" : "interface",
      "right" : "interface",
      "info" : "TYPE_DECLARATION_KIND[2136-2145]:TYPE_DECLARATION_KIND[2136-2145]"
    }, {
      "left" : "Function",
      "right" : "Function",
      "info" : "SimpleName[2146-2154]:SimpleName[2146-2154]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[2333-2339]:PrimitiveType[2333-2339]"
    }, {
      "left" : "evaluate",
      "right" : "evaluate",
      "info" : "SimpleName[2340-2348]:SimpleName[2340-2348]"
    }, {
      "left" : "double[] array",
      "right" : "double[] array",
      "info" : "SingleVariableDeclaration[2349-2363]:SingleVariableDeclaration[2349-2363]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[2640-2646]:PrimitiveType[2640-2646]"
    }, {
      "left" : "evaluate",
      "right" : "evaluate",
      "info" : "SimpleName[2647-2655]:SimpleName[2647-2655]"
    }, {
      "left" : "double[] array",
      "right" : "double[] array",
      "info" : "SingleVariableDeclaration[2656-2670]:SingleVariableDeclaration[2656-2670]"
    }, {
      "left" : "int startIndex",
      "right" : "int startIndex",
      "info" : "SingleVariableDeclaration[2696-2710]:SingleVariableDeclaration[2696-2710]"
    }, {
      "left" : "int numElements",
      "right" : "int numElements",
      "info" : "SingleVariableDeclaration[2736-2751]:SingleVariableDeclaration[2736-2751]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2989-2995]:Modifier[2989-2995]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2996-3002]:Modifier[2996-3002]"
    }, {
      "left" : "double[]",
      "right" : "double[]",
      "info" : "ArrayType[3003-3011]:ArrayType[3003-3011]"
    }, {
      "left" : "scale",
      "right" : "scale",
      "info" : "SimpleName[3012-3017]:SimpleName[3012-3017]"
    }, {
      "left" : "double val",
      "right" : "double val",
      "info" : "SingleVariableDeclaration[3018-3028]:SingleVariableDeclaration[3018-3028]"
    }, {
      "left" : "final double[] arr",
      "right" : "final double[] arr",
      "info" : "SingleVariableDeclaration[3030-3048]:SingleVariableDeclaration[3030-3048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3050-3225]:Block[3050-3225]"
    }, {
      "left" : "double[] newArr = new double[arr.length];",
      "right" : "double[] newArr = new double[arr.length];",
      "info" : "VariableDeclarationStatement[3060-3101]:VariableDeclarationStatement[3060-3101]"
    }, {
      "left" : "for (int i = 0; i < arr.length; i++)",
      "right" : "for (int i = 0; i < arr.length; i++)",
      "info" : "ForStatement[3110-3196]:ForStatement[3110-3196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3147-3196]:Block[3147-3196]"
    }, {
      "left" : "newArr[i] = arr[i] * val;",
      "right" : "newArr[i] = arr[i] * val;",
      "info" : "ExpressionStatement[3161-3186]:ExpressionStatement[3161-3186]"
    }, {
      "left" : "return newArr;",
      "right" : "return newArr;",
      "info" : "ReturnStatement[3205-3219]:ReturnStatement[3205-3219]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3464-3470]:Modifier[3464-3470]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3471-3477]:Modifier[3471-3477]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3478-3482]:PrimitiveType[3478-3482]"
    }, {
      "left" : "scaleInPlace",
      "right" : "scaleInPlace",
      "info" : "SimpleName[3483-3495]:SimpleName[3483-3495]"
    }, {
      "left" : "double val",
      "right" : "double val",
      "info" : "SingleVariableDeclaration[3496-3506]:SingleVariableDeclaration[3496-3506]"
    }, {
      "left" : "final double[] arr",
      "right" : "final double[] arr",
      "info" : "SingleVariableDeclaration[3508-3526]:SingleVariableDeclaration[3508-3526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3528-3619]:Block[3528-3619]"
    }, {
      "left" : "for (int i = 0; i < arr.length; i++)",
      "right" : "for (int i = 0; i < arr.length; i++)",
      "info" : "ForStatement[3538-3613]:ForStatement[3538-3613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3575-3613]:Block[3575-3613]"
    }, {
      "left" : "arr[i] *= val;",
      "right" : "arr[i] *= val;",
      "info" : "ExpressionStatement[3589-3603]:ExpressionStatement[3589-3603]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4001-4007]:Modifier[4001-4007]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4008-4014]:Modifier[4008-4014]"
    }, {
      "left" : "double[]",
      "right" : "double[]",
      "info" : "ArrayType[4015-4023]:ArrayType[4015-4023]"
    }, {
      "left" : "ebeAdd",
      "right" : "ebeAdd",
      "info" : "SimpleName[4024-4030]:SimpleName[4024-4030]"
    }, {
      "left" : "double[] a",
      "right" : "double[] a",
      "info" : "SingleVariableDeclaration[4031-4041]:SingleVariableDeclaration[4031-4041]"
    }, {
      "left" : "double[] b",
      "right" : "double[] b",
      "info" : "SingleVariableDeclaration[4043-4053]:SingleVariableDeclaration[4043-4053]"
    }, {
      "left" : "DimensionMismatchException",
      "right" : "DimensionMismatchException",
      "info" : "SimpleType[4070-4096]:SimpleType[4070-4096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4097-4373]:Block[4097-4373]"
    }, {
      "left" : "if (a.length != b.length)",
      "right" : "if (a.length != b.length)",
      "info" : "IfStatement[4107-4214]:IfStatement[4107-4214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4133-4214]:Block[4133-4214]"
    }, {
      "left" : "throw new DimensionMismatchException(a.length, b.length);",
      "right" : "throw new DimensionMismatchException(a.length, b.length);",
      "info" : "ThrowStatement[4147-4204]:ThrowStatement[4147-4204]"
    }, {
      "left" : "final double[] result = a.clone();",
      "right" : "final double[] result = a.clone();",
      "info" : "VariableDeclarationStatement[4224-4258]:VariableDeclarationStatement[4224-4258]"
    }, {
      "left" : "for (int i = 0; i < a.length; i++)",
      "right" : "for (int i = 0; i < a.length; i++)",
      "info" : "ForStatement[4267-4344]:ForStatement[4267-4344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4302-4344]:Block[4302-4344]"
    }, {
      "left" : "result[i] += b[i];",
      "right" : "result[i] += b[i];",
      "info" : "ExpressionStatement[4316-4334]:ExpressionStatement[4316-4334]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[4353-4367]:ReturnStatement[4353-4367]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4759-4765]:Modifier[4759-4765]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4766-4772]:Modifier[4766-4772]"
    }, {
      "left" : "double[]",
      "right" : "double[]",
      "info" : "ArrayType[4773-4781]:ArrayType[4773-4781]"
    }, {
      "left" : "ebeSubtract",
      "right" : "ebeSubtract",
      "info" : "SimpleName[4782-4793]:SimpleName[4782-4793]"
    }, {
      "left" : "double[] a",
      "right" : "double[] a",
      "info" : "SingleVariableDeclaration[4794-4804]:SingleVariableDeclaration[4794-4804]"
    }, {
      "left" : "double[] b",
      "right" : "double[] b",
      "info" : "SingleVariableDeclaration[4806-4816]:SingleVariableDeclaration[4806-4816]"
    }, {
      "left" : "DimensionMismatchException",
      "right" : "DimensionMismatchException",
      "info" : "SimpleType[4833-4859]:SimpleType[4833-4859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4860-5136]:Block[4860-5136]"
    }, {
      "left" : "if (a.length != b.length)",
      "right" : "if (a.length != b.length)",
      "info" : "IfStatement[4870-4977]:IfStatement[4870-4977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4896-4977]:Block[4896-4977]"
    }, {
      "left" : "throw new DimensionMismatchException(a.length, b.length);",
      "right" : "throw new DimensionMismatchException(a.length, b.length);",
      "info" : "ThrowStatement[4910-4967]:ThrowStatement[4910-4967]"
    }, {
      "left" : "final double[] result = a.clone();",
      "right" : "final double[] result = a.clone();",
      "info" : "VariableDeclarationStatement[4987-5021]:VariableDeclarationStatement[4987-5021]"
    }, {
      "left" : "for (int i = 0; i < a.length; i++)",
      "right" : "for (int i = 0; i < a.length; i++)",
      "info" : "ForStatement[5030-5107]:ForStatement[5030-5107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5065-5107]:Block[5065-5107]"
    }, {
      "left" : "result[i] -= b[i];",
      "right" : "result[i] -= b[i];",
      "info" : "ExpressionStatement[5079-5097]:ExpressionStatement[5079-5097]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[5116-5130]:ReturnStatement[5116-5130]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5539-5545]:Modifier[5539-5545]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5546-5552]:Modifier[5546-5552]"
    }, {
      "left" : "double[]",
      "right" : "double[]",
      "info" : "ArrayType[5553-5561]:ArrayType[5553-5561]"
    }, {
      "left" : "ebeMultiply",
      "right" : "ebeMultiply",
      "info" : "SimpleName[5562-5573]:SimpleName[5562-5573]"
    }, {
      "left" : "double[] a",
      "right" : "double[] a",
      "info" : "SingleVariableDeclaration[5574-5584]:SingleVariableDeclaration[5574-5584]"
    }, {
      "left" : "double[] b",
      "right" : "double[] b",
      "info" : "SingleVariableDeclaration[5586-5596]:SingleVariableDeclaration[5586-5596]"
    }, {
      "left" : "DimensionMismatchException",
      "right" : "DimensionMismatchException",
      "info" : "SimpleType[5613-5639]:SimpleType[5613-5639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5640-5916]:Block[5640-5916]"
    }, {
      "left" : "if (a.length != b.length)",
      "right" : "if (a.length != b.length)",
      "info" : "IfStatement[5650-5757]:IfStatement[5650-5757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5676-5757]:Block[5676-5757]"
    }, {
      "left" : "throw new DimensionMismatchException(a.length, b.length);",
      "right" : "throw new DimensionMismatchException(a.length, b.length);",
      "info" : "ThrowStatement[5690-5747]:ThrowStatement[5690-5747]"
    }, {
      "left" : "final double[] result = a.clone();",
      "right" : "final double[] result = a.clone();",
      "info" : "VariableDeclarationStatement[5767-5801]:VariableDeclarationStatement[5767-5801]"
    }, {
      "left" : "for (int i = 0; i < a.length; i++)",
      "right" : "for (int i = 0; i < a.length; i++)",
      "info" : "ForStatement[5810-5887]:ForStatement[5810-5887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5845-5887]:Block[5845-5887]"
    }, {
      "left" : "result[i] *= b[i];",
      "right" : "result[i] *= b[i];",
      "info" : "ExpressionStatement[5859-5877]:ExpressionStatement[5859-5877]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[5896-5910]:ReturnStatement[5896-5910]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6315-6321]:Modifier[6315-6321]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6322-6328]:Modifier[6322-6328]"
    }, {
      "left" : "double[]",
      "right" : "double[]",
      "info" : "ArrayType[6329-6337]:ArrayType[6329-6337]"
    }, {
      "left" : "ebeDivide",
      "right" : "ebeDivide",
      "info" : "SimpleName[6338-6347]:SimpleName[6338-6347]"
    }, {
      "left" : "double[] a",
      "right" : "double[] a",
      "info" : "SingleVariableDeclaration[6348-6358]:SingleVariableDeclaration[6348-6358]"
    }, {
      "left" : "double[] b",
      "right" : "double[] b",
      "info" : "SingleVariableDeclaration[6360-6370]:SingleVariableDeclaration[6360-6370]"
    }, {
      "left" : "DimensionMismatchException",
      "right" : "DimensionMismatchException",
      "info" : "SimpleType[6387-6413]:SimpleType[6387-6413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6414-6690]:Block[6414-6690]"
    }, {
      "left" : "if (a.length != b.length)",
      "right" : "if (a.length != b.length)",
      "info" : "IfStatement[6424-6531]:IfStatement[6424-6531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6450-6531]:Block[6450-6531]"
    }, {
      "left" : "throw new DimensionMismatchException(a.length, b.length);",
      "right" : "throw new DimensionMismatchException(a.length, b.length);",
      "info" : "ThrowStatement[6464-6521]:ThrowStatement[6464-6521]"
    }, {
      "left" : "final double[] result = a.clone();",
      "right" : "final double[] result = a.clone();",
      "info" : "VariableDeclarationStatement[6541-6575]:VariableDeclarationStatement[6541-6575]"
    }, {
      "left" : "for (int i = 0; i < a.length; i++)",
      "right" : "for (int i = 0; i < a.length; i++)",
      "info" : "ForStatement[6584-6661]:ForStatement[6584-6661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6619-6661]:Block[6619-6661]"
    }, {
      "left" : "result[i] /= b[i];",
      "right" : "result[i] /= b[i];",
      "info" : "ExpressionStatement[6633-6651]:ExpressionStatement[6633-6651]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[6670-6684]:ReturnStatement[6670-6684]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6929-6935]:Modifier[6929-6935]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6936-6942]:Modifier[6936-6942]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[6943-6949]:PrimitiveType[6943-6949]"
    }, {
      "left" : "distance1",
      "right" : "distance1",
      "info" : "SimpleName[6950-6959]:SimpleName[6950-6959]"
    }, {
      "left" : "double[] p1",
      "right" : "double[] p1",
      "info" : "SingleVariableDeclaration[6960-6971]:SingleVariableDeclaration[6960-6971]"
    }, {
      "left" : "double[] p2",
      "right" : "double[] p2",
      "info" : "SingleVariableDeclaration[6973-6984]:SingleVariableDeclaration[6973-6984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6986-7141]:Block[6986-7141]"
    }, {
      "left" : "double sum = 0;",
      "right" : "double sum = 0;",
      "info" : "VariableDeclarationStatement[6996-7011]:VariableDeclarationStatement[6996-7011]"
    }, {
      "left" : "for (int i = 0; i < p1.length; i++)",
      "right" : "for (int i = 0; i < p1.length; i++)",
      "info" : "ForStatement[7020-7115]:ForStatement[7020-7115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7056-7115]:Block[7056-7115]"
    }, {
      "left" : "sum += FastMath.abs(p1[i] - p2[i]);",
      "right" : "sum += FastMath.abs(p1[i] - p2[i]);",
      "info" : "ExpressionStatement[7070-7105]:ExpressionStatement[7070-7105]"
    }, {
      "left" : "return sum;",
      "right" : "return sum;",
      "info" : "ReturnStatement[7124-7135]:ReturnStatement[7124-7135]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7380-7386]:Modifier[7380-7386]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7387-7393]:Modifier[7387-7393]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[7394-7397]:PrimitiveType[7394-7397]"
    }, {
      "left" : "distance1",
      "right" : "distance1",
      "info" : "SimpleName[7398-7407]:SimpleName[7398-7407]"
    }, {
      "left" : "int[] p1",
      "right" : "int[] p1",
      "info" : "SingleVariableDeclaration[7408-7416]:SingleVariableDeclaration[7408-7416]"
    }, {
      "left" : "int[] p2",
      "right" : "int[] p2",
      "info" : "SingleVariableDeclaration[7418-7426]:SingleVariableDeclaration[7418-7426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7428-7570]:Block[7428-7570]"
    }, {
      "left" : "int sum = 0;",
      "right" : "int sum = 0;",
      "info" : "VariableDeclarationStatement[7436-7448]:VariableDeclarationStatement[7436-7448]"
    }, {
      "left" : "for (int i = 0; i < p1.length; i++)",
      "right" : "for (int i = 0; i < p1.length; i++)",
      "info" : "ForStatement[7455-7546]:ForStatement[7455-7546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7491-7546]:Block[7491-7546]"
    }, {
      "left" : "sum += FastMath.abs(p1[i] - p2[i]);",
      "right" : "sum += FastMath.abs(p1[i] - p2[i]);",
      "info" : "ExpressionStatement[7503-7538]:ExpressionStatement[7503-7538]"
    }, {
      "left" : "return sum;",
      "right" : "return sum;",
      "info" : "ReturnStatement[7553-7564]:ReturnStatement[7553-7564]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7808-7814]:Modifier[7808-7814]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7815-7821]:Modifier[7815-7821]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[7822-7828]:PrimitiveType[7822-7828]"
    }, {
      "left" : "distance",
      "right" : "distance",
      "info" : "SimpleName[7829-7837]:SimpleName[7829-7837]"
    }, {
      "left" : "double[] p1",
      "right" : "double[] p1",
      "info" : "SingleVariableDeclaration[7838-7849]:SingleVariableDeclaration[7838-7849]"
    }, {
      "left" : "double[] p2",
      "right" : "double[] p2",
      "info" : "SingleVariableDeclaration[7851-7862]:SingleVariableDeclaration[7851-7862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7864-8059]:Block[7864-8059]"
    }, {
      "left" : "double sum = 0;",
      "right" : "double sum = 0;",
      "info" : "VariableDeclarationStatement[7874-7889]:VariableDeclarationStatement[7874-7889]"
    }, {
      "left" : "for (int i = 0; i < p1.length; i++)",
      "right" : "for (int i = 0; i < p1.length; i++)",
      "info" : "ForStatement[7898-8018]:ForStatement[7898-8018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7934-8018]:Block[7934-8018]"
    }, {
      "left" : "final double dp = p1[i] - p2[i];",
      "right" : "final double dp = p1[i] - p2[i];",
      "info" : "VariableDeclarationStatement[7948-7980]:VariableDeclarationStatement[7948-7980]"
    }, {
      "left" : "sum += dp * dp;",
      "right" : "sum += dp * dp;",
      "info" : "ExpressionStatement[7993-8008]:ExpressionStatement[7993-8008]"
    }, {
      "left" : "return FastMath.sqrt(sum);",
      "right" : "return FastMath.sqrt(sum);",
      "info" : "ReturnStatement[8027-8053]:ReturnStatement[8027-8053]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8297-8303]:Modifier[8297-8303]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8304-8310]:Modifier[8304-8310]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[8311-8317]:PrimitiveType[8311-8317]"
    }, {
      "left" : "distance",
      "right" : "distance",
      "info" : "SimpleName[8318-8326]:SimpleName[8318-8326]"
    }, {
      "left" : "int[] p1",
      "right" : "int[] p1",
      "info" : "SingleVariableDeclaration[8327-8335]:SingleVariableDeclaration[8327-8335]"
    }, {
      "left" : "int[] p2",
      "right" : "int[] p2",
      "info" : "SingleVariableDeclaration[8337-8345]:SingleVariableDeclaration[8337-8345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8347-8530]:Block[8347-8530]"
    }, {
      "left" : "double sum = 0;",
      "right" : "double sum = 0;",
      "info" : "VariableDeclarationStatement[8355-8370]:VariableDeclarationStatement[8355-8370]"
    }, {
      "left" : "for (int i = 0; i < p1.length; i++)",
      "right" : "for (int i = 0; i < p1.length; i++)",
      "info" : "ForStatement[8377-8491]:ForStatement[8377-8491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8413-8491]:Block[8413-8491]"
    }, {
      "left" : "final double dp = p1[i] - p2[i];",
      "right" : "final double dp = p1[i] - p2[i];",
      "info" : "VariableDeclarationStatement[8425-8457]:VariableDeclarationStatement[8425-8457]"
    }, {
      "left" : "sum += dp * dp;",
      "right" : "sum += dp * dp;",
      "info" : "ExpressionStatement[8468-8483]:ExpressionStatement[8468-8483]"
    }, {
      "left" : "return FastMath.sqrt(sum);",
      "right" : "return FastMath.sqrt(sum);",
      "info" : "ReturnStatement[8498-8524]:ReturnStatement[8498-8524]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8781-8787]:Modifier[8781-8787]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8788-8794]:Modifier[8788-8794]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[8795-8801]:PrimitiveType[8795-8801]"
    }, {
      "left" : "distanceInf",
      "right" : "distanceInf",
      "info" : "SimpleName[8802-8813]:SimpleName[8802-8813]"
    }, {
      "left" : "double[] p1",
      "right" : "double[] p1",
      "info" : "SingleVariableDeclaration[8814-8825]:SingleVariableDeclaration[8814-8825]"
    }, {
      "left" : "double[] p2",
      "right" : "double[] p2",
      "info" : "SingleVariableDeclaration[8827-8838]:SingleVariableDeclaration[8827-8838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8840-9013]:Block[8840-9013]"
    }, {
      "left" : "double max = 0;",
      "right" : "double max = 0;",
      "info" : "VariableDeclarationStatement[8850-8865]:VariableDeclarationStatement[8850-8865]"
    }, {
      "left" : "for (int i = 0; i < p1.length; i++)",
      "right" : "for (int i = 0; i < p1.length; i++)",
      "info" : "ForStatement[8874-8987]:ForStatement[8874-8987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8910-8987]:Block[8910-8987]"
    }, {
      "left" : "max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",
      "right" : "max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",
      "info" : "ExpressionStatement[8924-8977]:ExpressionStatement[8924-8977]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[8996-9007]:ReturnStatement[8996-9007]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9264-9270]:Modifier[9264-9270]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9271-9277]:Modifier[9271-9277]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[9278-9281]:PrimitiveType[9278-9281]"
    }, {
      "left" : "distanceInf",
      "right" : "distanceInf",
      "info" : "SimpleName[9282-9293]:SimpleName[9282-9293]"
    }, {
      "left" : "int[] p1",
      "right" : "int[] p1",
      "info" : "SingleVariableDeclaration[9294-9302]:SingleVariableDeclaration[9294-9302]"
    }, {
      "left" : "int[] p2",
      "right" : "int[] p2",
      "info" : "SingleVariableDeclaration[9304-9312]:SingleVariableDeclaration[9304-9312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9314-9484]:Block[9314-9484]"
    }, {
      "left" : "int max = 0;",
      "right" : "int max = 0;",
      "info" : "VariableDeclarationStatement[9324-9336]:VariableDeclarationStatement[9324-9336]"
    }, {
      "left" : "for (int i = 0; i < p1.length; i++)",
      "right" : "for (int i = 0; i < p1.length; i++)",
      "info" : "ForStatement[9345-9458]:ForStatement[9345-9458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9381-9458]:Block[9381-9458]"
    }, {
      "left" : "max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",
      "right" : "max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",
      "info" : "ExpressionStatement[9395-9448]:ExpressionStatement[9395-9448]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[9467-9478]:ReturnStatement[9467-9478]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10080-10086]:Modifier[10080-10086]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10087-10093]:Modifier[10087-10093]"
    }, {
      "left" : "T extends Comparable<? super T>",
      "right" : "T extends Comparable<? super T>",
      "info" : "TypeParameter[10096-10127]:TypeParameter[10096-10127]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10129-10136]:PrimitiveType[10129-10136]"
    }, {
      "left" : "isMonotonic",
      "right" : "isMonotonic",
      "info" : "SimpleName[10137-10148]:SimpleName[10137-10148]"
    }, {
      "left" : "T[] val",
      "right" : "T[] val",
      "info" : "SingleVariableDeclaration[10149-10156]:SingleVariableDeclaration[10149-10156]"
    }, {
      "left" : "OrderDirection dir",
      "right" : "OrderDirection dir",
      "info" : "SingleVariableDeclaration[10196-10214]:SingleVariableDeclaration[10196-10214]"
    }, {
      "left" : "boolean strict",
      "right" : "boolean strict",
      "info" : "SingleVariableDeclaration[10254-10268]:SingleVariableDeclaration[10254-10268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10270-11359]:Block[10270-11359]"
    }, {
      "left" : "T previous = val[0];",
      "right" : "T previous = val[0];",
      "info" : "VariableDeclarationStatement[10280-10300]:VariableDeclarationStatement[10280-10300]"
    }, {
      "left" : "final int max = val.length;",
      "right" : "final int max = val.length;",
      "info" : "VariableDeclarationStatement[10309-10336]:VariableDeclarationStatement[10309-10336]"
    }, {
      "left" : "for (int i = 1; i < max; i++)",
      "right" : "for (int i = 1; i < max; i++)",
      "info" : "ForStatement[10345-11332]:ForStatement[10345-11332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10375-11332]:Block[10375-11332]"
    }, {
      "left" : "final int comp;",
      "right" : "final int comp;",
      "info" : "VariableDeclarationStatement[10389-10404]:VariableDeclarationStatement[10389-10404]"
    }, {
      "left" : "switch (dir) {\n            case INCREASING:\n                comp = previous.compareTo(val[i]);\n                if (strict) {\n                    if (comp >= 0) {\n                        return false;\n                    }\n                } else {\n                    if (comp > 0) {\n                        return false;\n                    }\n                }\n                break;\n            case DECREASING:\n                comp = val[i].compareTo(previous);\n                if (strict) {\n                    if (comp >= 0) {\n                        return false;\n                    }\n                } else {\n                    if (comp > 0) {\n                       return false;\n                    }\n                }\n                break;\n            default:\n                // Should never happen.\n                throw new MathInternalError();\n            }",
      "right" : "switch (dir) {\n            case INCREASING:\n                comp = previous.compareTo(val[i]);\n                if (strict) {\n                    if (comp >= 0) {\n                        return false;\n                    }\n                } else {\n                    if (comp > 0) {\n                        return false;\n                    }\n                }\n                break;\n            case DECREASING:\n                comp = val[i].compareTo(previous);\n                if (strict) {\n                    if (comp >= 0) {\n                        return false;\n                    }\n                } else {\n                    if (comp > 0) {\n                       return false;\n                    }\n                }\n                break;\n            default:\n                // Should never happen.\n                throw new MathInternalError();\n            }",
      "info" : "SwitchStatement[10417-11290]:SwitchStatement[10417-11290]"
    }, {
      "left" : "case INCREASING:",
      "right" : "case INCREASING:",
      "info" : "SwitchCase[10444-10460]:SwitchCase[10444-10460]"
    }, {
      "left" : "comp = previous.compareTo(val[i]);",
      "right" : "comp = previous.compareTo(val[i]);",
      "info" : "ExpressionStatement[10477-10511]:ExpressionStatement[10477-10511]"
    }, {
      "left" : "if (strict)",
      "right" : "if (strict)",
      "info" : "IfStatement[10528-10777]:IfStatement[10528-10777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10540-10656]:Block[10540-10656]"
    }, {
      "left" : "if (comp >= 0)",
      "right" : "if (comp >= 0)",
      "info" : "IfStatement[10562-10638]:IfStatement[10562-10638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10577-10638]:Block[10577-10638]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10603-10616]:ReturnStatement[10603-10616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10662-10777]:Block[10662-10777]"
    }, {
      "left" : "if (comp > 0)",
      "right" : "if (comp > 0)",
      "info" : "IfStatement[10684-10759]:IfStatement[10684-10759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10698-10759]:Block[10698-10759]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10724-10737]:ReturnStatement[10724-10737]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10794-10800]:BreakStatement[10794-10800]"
    }, {
      "left" : "case DECREASING:",
      "right" : "case DECREASING:",
      "info" : "SwitchCase[10813-10829]:SwitchCase[10813-10829]"
    }, {
      "left" : "comp = val[i].compareTo(previous);",
      "right" : "comp = val[i].compareTo(previous);",
      "info" : "ExpressionStatement[10846-10880]:ExpressionStatement[10846-10880]"
    }, {
      "left" : "if (strict)",
      "right" : "if (strict)",
      "info" : "IfStatement[10897-11145]:IfStatement[10897-11145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10909-11025]:Block[10909-11025]"
    }, {
      "left" : "if (comp >= 0)",
      "right" : "if (comp >= 0)",
      "info" : "IfStatement[10931-11007]:IfStatement[10931-11007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10946-11007]:Block[10946-11007]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10972-10985]:ReturnStatement[10972-10985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11031-11145]:Block[11031-11145]"
    }, {
      "left" : "if (comp > 0)",
      "right" : "if (comp > 0)",
      "info" : "IfStatement[11053-11127]:IfStatement[11053-11127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11067-11127]:Block[11067-11127]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11092-11105]:ReturnStatement[11092-11105]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11162-11168]:BreakStatement[11162-11168]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11181-11189]:SwitchCase[11181-11189]"
    }, {
      "left" : "throw new MathInternalError();",
      "right" : "throw new MathInternalError();",
      "info" : "ThrowStatement[11246-11276]:ThrowStatement[11246-11276]"
    }, {
      "left" : "previous = val[i];",
      "right" : "previous = val[i];",
      "info" : "ExpressionStatement[11304-11322]:ExpressionStatement[11304-11322]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11341-11353]:ReturnStatement[11341-11353]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11643-11649]:Modifier[11643-11649]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11650-11656]:Modifier[11650-11656]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11657-11664]:PrimitiveType[11657-11664]"
    }, {
      "left" : "isMonotonic",
      "right" : "isMonotonic",
      "info" : "SimpleName[11665-11676]:SimpleName[11665-11676]"
    }, {
      "left" : "double[] val",
      "right" : "double[] val",
      "info" : "SingleVariableDeclaration[11677-11689]:SingleVariableDeclaration[11677-11689]"
    }, {
      "left" : "OrderDirection dir",
      "right" : "OrderDirection dir",
      "info" : "SingleVariableDeclaration[11691-11709]:SingleVariableDeclaration[11691-11709]"
    }, {
      "left" : "boolean strict",
      "right" : "boolean strict",
      "info" : "SingleVariableDeclaration[11711-11725]:SingleVariableDeclaration[11711-11725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11727-11786]:Block[11727-11786]"
    }, {
      "left" : "return checkOrder(val, dir, strict, false);",
      "right" : "return checkOrder(val, dir, strict, false);",
      "info" : "ReturnStatement[11737-11780]:ReturnStatement[11737-11780]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12217-12223]:Modifier[12217-12223]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12224-12230]:Modifier[12224-12230]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[12231-12238]:PrimitiveType[12231-12238]"
    }, {
      "left" : "checkOrder",
      "right" : "checkOrder",
      "info" : "SimpleName[12239-12249]:SimpleName[12239-12249]"
    }, {
      "left" : "double[] val",
      "right" : "double[] val",
      "info" : "SingleVariableDeclaration[12250-12262]:SingleVariableDeclaration[12250-12262]"
    }, {
      "left" : "OrderDirection dir",
      "right" : "OrderDirection dir",
      "info" : "SingleVariableDeclaration[12264-12282]:SingleVariableDeclaration[12264-12282]"
    }, {
      "left" : "boolean strict",
      "right" : "boolean strict",
      "info" : "SingleVariableDeclaration[12321-12335]:SingleVariableDeclaration[12321-12335]"
    }, {
      "left" : "boolean abort",
      "right" : "boolean abort",
      "info" : "SingleVariableDeclaration[12337-12350]:SingleVariableDeclaration[12337-12350]"
    }, {
      "left" : "NonMonotonicSequenceException",
      "right" : "NonMonotonicSequenceException",
      "info" : "SimpleType[12367-12396]:SimpleType[12367-12396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12397-13745]:Block[12397-13745]"
    }, {
      "left" : "double previous = val[0];",
      "right" : "double previous = val[0];",
      "info" : "VariableDeclarationStatement[12407-12432]:VariableDeclarationStatement[12407-12432]"
    }, {
      "left" : "final int max = val.length;",
      "right" : "final int max = val.length;",
      "info" : "VariableDeclarationStatement[12441-12468]:VariableDeclarationStatement[12441-12468]"
    }, {
      "left" : "int index;",
      "right" : "int index;",
      "info" : "VariableDeclarationStatement[12478-12488]:VariableDeclarationStatement[12478-12488]"
    }, {
      "left" : "ITEM:\n        for (index = 1; index < max; index++) {\n            switch (dir) {\n            case INCREASING:\n                if (strict) {\n                    if (val[index] <= previous) {\n                        break ITEM;\n                    }\n                } else {\n                    if (val[index] < previous) {\n                        break ITEM;\n                    }\n                }\n                break;\n            case DECREASING:\n                if (strict) {\n                    if (val[index] >= previous) {\n                        break ITEM;\n                    }\n                } else {\n                    if (val[index] > previous) {\n                        break ITEM;\n                    }\n                }\n                break;\n            default:\n                // Should never happen.\n                throw new MathInternalError();\n            }\n\n            previous = val[index];\n        }",
      "right" : "ITEM:\n        for (index = 1; index < max; index++) {\n            switch (dir) {\n            case INCREASING:\n                if (strict) {\n                    if (val[index] <= previous) {\n                        break ITEM;\n                    }\n                } else {\n                    if (val[index] < previous) {\n                        break ITEM;\n                    }\n                }\n                break;\n            case DECREASING:\n                if (strict) {\n                    if (val[index] >= previous) {\n                        break ITEM;\n                    }\n                } else {\n                    if (val[index] > previous) {\n                        break ITEM;\n                    }\n                }\n                break;\n            default:\n                // Should never happen.\n                throw new MathInternalError();\n            }\n\n            previous = val[index];\n        }",
      "info" : "LabeledStatement[12497-13425]:LabeledStatement[12497-13425]"
    }, {
      "left" : "for (index = 1; index < max; index++)",
      "right" : "for (index = 1; index < max; index++)",
      "info" : "ForStatement[12511-13425]:ForStatement[12511-13425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12549-13425]:Block[12549-13425]"
    }, {
      "left" : "switch (dir) {\n            case INCREASING:\n                if (strict) {\n                    if (val[index] <= previous) {\n                        break ITEM;\n                    }\n                } else {\n                    if (val[index] < previous) {\n                        break ITEM;\n                    }\n                }\n                break;\n            case DECREASING:\n                if (strict) {\n                    if (val[index] >= previous) {\n                        break ITEM;\n                    }\n                } else {\n                    if (val[index] > previous) {\n                        break ITEM;\n                    }\n                }\n                break;\n            default:\n                // Should never happen.\n                throw new MathInternalError();\n            }",
      "right" : "switch (dir) {\n            case INCREASING:\n                if (strict) {\n                    if (val[index] <= previous) {\n                        break ITEM;\n                    }\n                } else {\n                    if (val[index] < previous) {\n                        break ITEM;\n                    }\n                }\n                break;\n            case DECREASING:\n                if (strict) {\n                    if (val[index] >= previous) {\n                        break ITEM;\n                    }\n                } else {\n                    if (val[index] > previous) {\n                        break ITEM;\n                    }\n                }\n                break;\n            default:\n                // Should never happen.\n                throw new MathInternalError();\n            }",
      "info" : "SwitchStatement[12563-13379]:SwitchStatement[12563-13379]"
    }, {
      "left" : "case INCREASING:",
      "right" : "case INCREASING:",
      "info" : "SwitchCase[12590-12606]:SwitchCase[12590-12606]"
    }, {
      "left" : "if (strict)",
      "right" : "if (strict)",
      "info" : "IfStatement[12623-12894]:IfStatement[12623-12894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12635-12762]:Block[12635-12762]"
    }, {
      "left" : "if (val[index] <= previous)",
      "right" : "if (val[index] <= previous)",
      "info" : "IfStatement[12657-12744]:IfStatement[12657-12744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12685-12744]:Block[12685-12744]"
    }, {
      "left" : "break ITEM;",
      "right" : "break ITEM;",
      "info" : "BreakStatement[12711-12722]:BreakStatement[12711-12722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12768-12894]:Block[12768-12894]"
    }, {
      "left" : "if (val[index] < previous)",
      "right" : "if (val[index] < previous)",
      "info" : "IfStatement[12790-12876]:IfStatement[12790-12876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12817-12876]:Block[12817-12876]"
    }, {
      "left" : "break ITEM;",
      "right" : "break ITEM;",
      "info" : "BreakStatement[12843-12854]:BreakStatement[12843-12854]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12911-12917]:BreakStatement[12911-12917]"
    }, {
      "left" : "case DECREASING:",
      "right" : "case DECREASING:",
      "info" : "SwitchCase[12930-12946]:SwitchCase[12930-12946]"
    }, {
      "left" : "if (strict)",
      "right" : "if (strict)",
      "info" : "IfStatement[12963-13234]:IfStatement[12963-13234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12975-13102]:Block[12975-13102]"
    }, {
      "left" : "if (val[index] >= previous)",
      "right" : "if (val[index] >= previous)",
      "info" : "IfStatement[12997-13084]:IfStatement[12997-13084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13025-13084]:Block[13025-13084]"
    }, {
      "left" : "break ITEM;",
      "right" : "break ITEM;",
      "info" : "BreakStatement[13051-13062]:BreakStatement[13051-13062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13108-13234]:Block[13108-13234]"
    }, {
      "left" : "if (val[index] > previous)",
      "right" : "if (val[index] > previous)",
      "info" : "IfStatement[13130-13216]:IfStatement[13130-13216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13157-13216]:Block[13157-13216]"
    }, {
      "left" : "break ITEM;",
      "right" : "break ITEM;",
      "info" : "BreakStatement[13183-13194]:BreakStatement[13183-13194]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13251-13257]:BreakStatement[13251-13257]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[13270-13278]:SwitchCase[13270-13278]"
    }, {
      "left" : "throw new MathInternalError();",
      "right" : "throw new MathInternalError();",
      "info" : "ThrowStatement[13335-13365]:ThrowStatement[13335-13365]"
    }, {
      "left" : "previous = val[index];",
      "right" : "previous = val[index];",
      "info" : "ExpressionStatement[13393-13415]:ExpressionStatement[13393-13415]"
    }, {
      "left" : "if (index == max)",
      "right" : "if (index == max)",
      "info" : "IfStatement[13435-13520]:IfStatement[13435-13520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13453-13520]:Block[13453-13520]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[13498-13510]:ReturnStatement[13498-13510]"
    }, {
      "left" : "if (abort)",
      "right" : "if (abort)",
      "info" : "IfStatement[13579-13739]:IfStatement[13579-13739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13590-13696]:Block[13590-13696]"
    }, {
      "left" : "throw new NonMonotonicSequenceException(val[index], previous, index, dir, strict);",
      "right" : "throw new NonMonotonicSequenceException(val[index], previous, index, dir, strict);",
      "info" : "ThrowStatement[13604-13686]:ThrowStatement[13604-13686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13702-13739]:Block[13702-13739]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13716-13729]:ReturnStatement[13716-13729]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14031-14037]:Modifier[14031-14037]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14038-14044]:Modifier[14038-14044]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14045-14049]:PrimitiveType[14045-14049]"
    }, {
      "left" : "checkOrder",
      "right" : "checkOrder",
      "info" : "SimpleName[14050-14060]:SimpleName[14050-14060]"
    }, {
      "left" : "double[] val",
      "right" : "double[] val",
      "info" : "SingleVariableDeclaration[14061-14073]:SingleVariableDeclaration[14061-14073]"
    }, {
      "left" : "OrderDirection dir",
      "right" : "OrderDirection dir",
      "info" : "SingleVariableDeclaration[14075-14093]:SingleVariableDeclaration[14075-14093]"
    }, {
      "left" : "boolean strict",
      "right" : "boolean strict",
      "info" : "SingleVariableDeclaration[14129-14143]:SingleVariableDeclaration[14129-14143]"
    }, {
      "left" : "NonMonotonicSequenceException",
      "right" : "NonMonotonicSequenceException",
      "info" : "SimpleType[14152-14181]:SimpleType[14152-14181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14182-14233]:Block[14182-14233]"
    }, {
      "left" : "checkOrder(val, dir, strict, true);",
      "right" : "checkOrder(val, dir, strict, true);",
      "info" : "ExpressionStatement[14192-14227]:ExpressionStatement[14192-14227]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14453-14459]:Modifier[14453-14459]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14460-14466]:Modifier[14460-14466]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14467-14471]:PrimitiveType[14467-14471]"
    }, {
      "left" : "checkOrder",
      "right" : "checkOrder",
      "info" : "SimpleName[14472-14482]:SimpleName[14472-14482]"
    }, {
      "left" : "double[] val",
      "right" : "double[] val",
      "info" : "SingleVariableDeclaration[14483-14495]:SingleVariableDeclaration[14483-14495]"
    }, {
      "left" : "NonMonotonicSequenceException",
      "right" : "NonMonotonicSequenceException",
      "info" : "SimpleType[14504-14533]:SimpleType[14504-14533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14534-14599]:Block[14534-14599]"
    }, {
      "left" : "checkOrder(val, OrderDirection.INCREASING, true);",
      "right" : "checkOrder(val, OrderDirection.INCREASING, true);",
      "info" : "ExpressionStatement[14544-14593]:ExpressionStatement[14544-14593]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14898-14904]:Modifier[14898-14904]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14905-14911]:Modifier[14905-14911]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14912-14916]:PrimitiveType[14912-14916]"
    }, {
      "left" : "checkRectangular",
      "right" : "checkRectangular",
      "info" : "SimpleName[14917-14933]:SimpleName[14917-14933]"
    }, {
      "left" : "final long[][] in",
      "right" : "final long[][] in",
      "info" : "SingleVariableDeclaration[14934-14951]:SingleVariableDeclaration[14934-14951]"
    }, {
      "left" : "NullArgumentException",
      "right" : "NullArgumentException",
      "info" : "SimpleType[14968-14989]:SimpleType[14968-14989]"
    }, {
      "left" : "DimensionMismatchException",
      "right" : "DimensionMismatchException",
      "info" : "SimpleType[14991-15017]:SimpleType[14991-15017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15018-15351]:Block[15018-15351]"
    }, {
      "left" : "MathUtils.checkNotNull(in);",
      "right" : "MathUtils.checkNotNull(in);",
      "info" : "ExpressionStatement[15028-15055]:ExpressionStatement[15028-15055]"
    }, {
      "left" : "for (int i = 1; i < in.length; i++)",
      "right" : "for (int i = 1; i < in.length; i++)",
      "info" : "ForStatement[15064-15345]:ForStatement[15064-15345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15100-15345]:Block[15100-15345]"
    }, {
      "left" : "if (in[i].length != in[0].length)",
      "right" : "if (in[i].length != in[0].length)",
      "info" : "IfStatement[15114-15335]:IfStatement[15114-15335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15148-15335]:Block[15148-15335]"
    }, {
      "left" : "throw new DimensionMismatchException(\n                        LocalizedFormats.DIFFERENT_ROWS_LENGTHS,\n                        in[i].length, in[0].length);",
      "right" : "throw new DimensionMismatchException(\n                        LocalizedFormats.DIFFERENT_ROWS_LENGTHS,\n                        in[i].length, in[0].length);",
      "info" : "ThrowStatement[15166-15321]:ThrowStatement[15166-15321]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15612-15618]:Modifier[15612-15618]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15619-15625]:Modifier[15619-15625]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15626-15630]:PrimitiveType[15626-15630]"
    }, {
      "left" : "checkPositive",
      "right" : "checkPositive",
      "info" : "SimpleName[15631-15644]:SimpleName[15631-15644]"
    }, {
      "left" : "final double[] in",
      "right" : "final double[] in",
      "info" : "SingleVariableDeclaration[15645-15662]:SingleVariableDeclaration[15645-15662]"
    }, {
      "left" : "NotStrictlyPositiveException",
      "right" : "NotStrictlyPositiveException",
      "info" : "SimpleType[15679-15707]:SimpleType[15679-15707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15708-15878]:Block[15708-15878]"
    }, {
      "left" : "for (int i = 0; i < in.length; i++)",
      "right" : "for (int i = 0; i < in.length; i++)",
      "info" : "ForStatement[15718-15872]:ForStatement[15718-15872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15754-15872]:Block[15754-15872]"
    }, {
      "left" : "if (in[i] <= 0)",
      "right" : "if (in[i] <= 0)",
      "info" : "IfStatement[15768-15862]:IfStatement[15768-15862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15784-15862]:Block[15784-15862]"
    }, {
      "left" : "throw new NotStrictlyPositiveException(in[i]);",
      "right" : "throw new NotStrictlyPositiveException(in[i]);",
      "info" : "ThrowStatement[15802-15848]:ThrowStatement[15802-15848]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16094-16100]:Modifier[16094-16100]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[16101-16107]:Modifier[16101-16107]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16108-16112]:PrimitiveType[16108-16112]"
    }, {
      "left" : "checkNonNegative",
      "right" : "checkNonNegative",
      "info" : "SimpleName[16113-16129]:SimpleName[16113-16129]"
    }, {
      "left" : "final long[] in",
      "right" : "final long[] in",
      "info" : "SingleVariableDeclaration[16130-16145]:SingleVariableDeclaration[16130-16145]"
    }, {
      "left" : "NotPositiveException",
      "right" : "NotPositiveException",
      "info" : "SimpleType[16162-16182]:SimpleType[16162-16182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16183-16344]:Block[16183-16344]"
    }, {
      "left" : "for (int i = 0; i < in.length; i++)",
      "right" : "for (int i = 0; i < in.length; i++)",
      "info" : "ForStatement[16193-16338]:ForStatement[16193-16338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16229-16338]:Block[16229-16338]"
    }, {
      "left" : "if (in[i] < 0)",
      "right" : "if (in[i] < 0)",
      "info" : "IfStatement[16243-16328]:IfStatement[16243-16328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16258-16328]:Block[16258-16328]"
    }, {
      "left" : "throw new NotPositiveException(in[i]);",
      "right" : "throw new NotPositiveException(in[i]);",
      "info" : "ThrowStatement[16276-16314]:ThrowStatement[16276-16314]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16555-16561]:Modifier[16555-16561]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[16562-16568]:Modifier[16562-16568]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16569-16573]:PrimitiveType[16569-16573]"
    }, {
      "left" : "checkNonNegative",
      "right" : "checkNonNegative",
      "info" : "SimpleName[16574-16590]:SimpleName[16574-16590]"
    }, {
      "left" : "final long[][] in",
      "right" : "final long[][] in",
      "info" : "SingleVariableDeclaration[16591-16608]:SingleVariableDeclaration[16591-16608]"
    }, {
      "left" : "NotPositiveException",
      "right" : "NotPositiveException",
      "info" : "SimpleType[16625-16645]:SimpleType[16625-16645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16646-16893]:Block[16646-16893]"
    }, {
      "left" : "for (int i = 0; i < in.length; i ++)",
      "right" : "for (int i = 0; i < in.length; i ++)",
      "info" : "ForStatement[16656-16887]:ForStatement[16656-16887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16693-16887]:Block[16693-16887]"
    }, {
      "left" : "for (int j = 0; j < in[i].length; j++)",
      "right" : "for (int j = 0; j < in[i].length; j++)",
      "info" : "ForStatement[16707-16877]:ForStatement[16707-16877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16746-16877]:Block[16746-16877]"
    }, {
      "left" : "if (in[i][j] < 0)",
      "right" : "if (in[i][j] < 0)",
      "info" : "IfStatement[16764-16863]:IfStatement[16764-16863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16782-16863]:Block[16782-16863]"
    }, {
      "left" : "throw new NotPositiveException(in[i][j]);",
      "right" : "throw new NotPositiveException(in[i][j]);",
      "info" : "ThrowStatement[16804-16845]:ThrowStatement[16804-16845]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20190-20196]:Modifier[20190-20196]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20197-20203]:Modifier[20197-20203]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[20204-20210]:PrimitiveType[20204-20210]"
    }, {
      "left" : "safeNorm",
      "right" : "safeNorm",
      "info" : "SimpleName[20211-20219]:SimpleName[20211-20219]"
    }, {
      "left" : "double[] v",
      "right" : "double[] v",
      "info" : "SingleVariableDeclaration[20220-20230]:SingleVariableDeclaration[20220-20230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20232-21991]:Block[20232-21991]"
    }, {
      "left" : "double rdwarf = 3.834e-20;",
      "right" : "double rdwarf = 3.834e-20;",
      "info" : "VariableDeclarationStatement[20242-20268]:VariableDeclarationStatement[20242-20268]"
    }, {
      "left" : "double rgiant = 1.304e+19;",
      "right" : "double rgiant = 1.304e+19;",
      "info" : "VariableDeclarationStatement[20277-20303]:VariableDeclarationStatement[20277-20303]"
    }, {
      "left" : "double s1 = 0;",
      "right" : "double s1 = 0;",
      "info" : "VariableDeclarationStatement[20312-20326]:VariableDeclarationStatement[20312-20326]"
    }, {
      "left" : "double s2 = 0;",
      "right" : "double s2 = 0;",
      "info" : "VariableDeclarationStatement[20335-20349]:VariableDeclarationStatement[20335-20349]"
    }, {
      "left" : "double s3 = 0;",
      "right" : "double s3 = 0;",
      "info" : "VariableDeclarationStatement[20358-20372]:VariableDeclarationStatement[20358-20372]"
    }, {
      "left" : "double x1max = 0;",
      "right" : "double x1max = 0;",
      "info" : "VariableDeclarationStatement[20381-20398]:VariableDeclarationStatement[20381-20398]"
    }, {
      "left" : "double x3max = 0;",
      "right" : "double x3max = 0;",
      "info" : "VariableDeclarationStatement[20407-20424]:VariableDeclarationStatement[20407-20424]"
    }, {
      "left" : "double floatn = v.length;",
      "right" : "double floatn = v.length;",
      "info" : "VariableDeclarationStatement[20433-20458]:VariableDeclarationStatement[20433-20458]"
    }, {
      "left" : "double agiant = rgiant / floatn;",
      "right" : "double agiant = rgiant / floatn;",
      "info" : "VariableDeclarationStatement[20467-20499]:VariableDeclarationStatement[20467-20499]"
    }, {
      "left" : "for (int i = 0; i < v.length; i++)",
      "right" : "for (int i = 0; i < v.length; i++)",
      "info" : "ForStatement[20508-21487]:ForStatement[20508-21487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20543-21487]:Block[20543-21487]"
    }, {
      "left" : "double xabs = Math.abs(v[i]);",
      "right" : "double xabs = Math.abs(v[i]);",
      "info" : "VariableDeclarationStatement[20557-20586]:VariableDeclarationStatement[20557-20586]"
    }, {
      "left" : "if (xabs < rdwarf || xabs > agiant)",
      "right" : "if (xabs < rdwarf || xabs > agiant)",
      "info" : "IfStatement[20599-21477]:IfStatement[20599-21477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20635-21421]:Block[20635-21421]"
    }, {
      "left" : "if (xabs > rdwarf)",
      "right" : "if (xabs > rdwarf)",
      "info" : "IfStatement[20653-21407]:IfStatement[20653-21407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20672-20999]:Block[20672-20999]"
    }, {
      "left" : "if (xabs > x1max)",
      "right" : "if (xabs > x1max)",
      "info" : "IfStatement[20694-20981]:IfStatement[20694-20981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20712-20866]:Block[20712-20866]"
    }, {
      "left" : "double r = x1max / xabs;",
      "right" : "double r = x1max / xabs;",
      "info" : "VariableDeclarationStatement[20738-20762]:VariableDeclarationStatement[20738-20762]"
    }, {
      "left" : "s1= 1 + s1 * r * r;",
      "right" : "s1= 1 + s1 * r * r;",
      "info" : "ExpressionStatement[20787-20806]:ExpressionStatement[20787-20806]"
    }, {
      "left" : "x1max = xabs;",
      "right" : "x1max = xabs;",
      "info" : "ExpressionStatement[20831-20844]:ExpressionStatement[20831-20844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20872-20981]:Block[20872-20981]"
    }, {
      "left" : "double r = xabs / x1max;",
      "right" : "double r = xabs / x1max;",
      "info" : "VariableDeclarationStatement[20898-20922]:VariableDeclarationStatement[20898-20922]"
    }, {
      "left" : "s1 += r * r;",
      "right" : "s1 += r * r;",
      "info" : "ExpressionStatement[20947-20959]:ExpressionStatement[20947-20959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21005-21407]:Block[21005-21407]"
    }, {
      "left" : "if (xabs > x3max)",
      "right" : "if (xabs > x3max)",
      "info" : "IfStatement[21027-21389]:IfStatement[21027-21389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21045-21199]:Block[21045-21199]"
    }, {
      "left" : "double r = x3max / xabs;",
      "right" : "double r = x3max / xabs;",
      "info" : "VariableDeclarationStatement[21071-21095]:VariableDeclarationStatement[21071-21095]"
    }, {
      "left" : "s3= 1 + s3 * r * r;",
      "right" : "s3= 1 + s3 * r * r;",
      "info" : "ExpressionStatement[21120-21139]:ExpressionStatement[21120-21139]"
    }, {
      "left" : "x3max = xabs;",
      "right" : "x3max = xabs;",
      "info" : "ExpressionStatement[21164-21177]:ExpressionStatement[21164-21177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21205-21389]:Block[21205-21389]"
    }, {
      "left" : "if (xabs != 0)",
      "right" : "if (xabs != 0)",
      "info" : "IfStatement[21231-21367]:IfStatement[21231-21367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21246-21367]:Block[21246-21367]"
    }, {
      "left" : "double r = xabs / x3max;",
      "right" : "double r = xabs / x3max;",
      "info" : "VariableDeclarationStatement[21276-21300]:VariableDeclarationStatement[21276-21300]"
    }, {
      "left" : "s3 += r * r;",
      "right" : "s3 += r * r;",
      "info" : "ExpressionStatement[21329-21341]:ExpressionStatement[21329-21341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21427-21477]:Block[21427-21477]"
    }, {
      "left" : "s2 += xabs * xabs;",
      "right" : "s2 += xabs * xabs;",
      "info" : "ExpressionStatement[21445-21463]:ExpressionStatement[21445-21463]"
    }, {
      "left" : "double norm;",
      "right" : "double norm;",
      "info" : "VariableDeclarationStatement[21496-21508]:VariableDeclarationStatement[21496-21508]"
    }, {
      "left" : "if (s1 != 0)",
      "right" : "if (s1 != 0)",
      "info" : "IfStatement[21517-21964]:IfStatement[21517-21964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21530-21606]:Block[21530-21606]"
    }, {
      "left" : "norm = x1max * Math.sqrt(s1 + (s2 / x1max) / x1max);",
      "right" : "norm = x1max * Math.sqrt(s1 + (s2 / x1max) / x1max);",
      "info" : "ExpressionStatement[21544-21596]:ExpressionStatement[21544-21596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21612-21964]:Block[21612-21964]"
    }, {
      "left" : "if (s2 == 0)",
      "right" : "if (s2 == 0)",
      "info" : "IfStatement[21626-21954]:IfStatement[21626-21954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21639-21700]:Block[21639-21700]"
    }, {
      "left" : "norm = x3max * Math.sqrt(s3);",
      "right" : "norm = x3max * Math.sqrt(s3);",
      "info" : "ExpressionStatement[21657-21686]:ExpressionStatement[21657-21686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21706-21954]:Block[21706-21954]"
    }, {
      "left" : "if (s2 >= x3max)",
      "right" : "if (s2 >= x3max)",
      "info" : "IfStatement[21724-21940]:IfStatement[21724-21940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21741-21838]:Block[21741-21838]"
    }, {
      "left" : "norm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));",
      "right" : "norm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));",
      "info" : "ExpressionStatement[21763-21820]:ExpressionStatement[21763-21820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21844-21940]:Block[21844-21940]"
    }, {
      "left" : "norm = Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));",
      "right" : "norm = Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));",
      "info" : "ExpressionStatement[21866-21922]:ExpressionStatement[21866-21922]"
    }, {
      "left" : "return norm;",
      "right" : "return norm;",
      "info" : "ReturnStatement[21973-21985]:ReturnStatement[21973-21985]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22791-22797]:Modifier[22791-22797]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22798-22804]:Modifier[22798-22804]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22805-22809]:PrimitiveType[22805-22809]"
    }, {
      "left" : "sortInPlace",
      "right" : "sortInPlace",
      "info" : "SimpleName[22810-22821]:SimpleName[22810-22821]"
    }, {
      "left" : "double[] x",
      "right" : "double[] x",
      "info" : "SingleVariableDeclaration[22822-22832]:SingleVariableDeclaration[22822-22832]"
    }, {
      "left" : "double[] ... yList",
      "right" : "double[] ... yList",
      "info" : "SingleVariableDeclaration[22834-22852]:SingleVariableDeclaration[22834-22852]"
    }, {
      "left" : "DimensionMismatchException",
      "right" : "DimensionMismatchException",
      "info" : "SimpleType[22869-22895]:SimpleType[22869-22895]"
    }, {
      "left" : "NullArgumentException",
      "right" : "NullArgumentException",
      "info" : "SimpleType[22897-22918]:SimpleType[22897-22918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22919-22984]:Block[22919-22984]"
    }, {
      "left" : "sortInPlace(x, OrderDirection.INCREASING, yList);",
      "right" : "sortInPlace(x, OrderDirection.INCREASING, yList);",
      "info" : "ExpressionStatement[22929-22978]:ExpressionStatement[22929-22978]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23756-23762]:Modifier[23756-23762]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23763-23769]:Modifier[23763-23769]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23770-23774]:PrimitiveType[23770-23774]"
    }, {
      "left" : "sortInPlace",
      "right" : "sortInPlace",
      "info" : "SimpleName[23775-23786]:SimpleName[23775-23786]"
    }, {
      "left" : "double[] x",
      "right" : "double[] x",
      "info" : "SingleVariableDeclaration[23787-23797]:SingleVariableDeclaration[23787-23797]"
    }, {
      "left" : "final OrderDirection dir",
      "right" : "final OrderDirection dir",
      "info" : "SingleVariableDeclaration[23834-23858]:SingleVariableDeclaration[23834-23858]"
    }, {
      "left" : "double[] ... yList",
      "right" : "double[] ... yList",
      "info" : "SingleVariableDeclaration[23895-23913]:SingleVariableDeclaration[23895-23913]"
    }, {
      "left" : "NullArgumentException",
      "right" : "NullArgumentException",
      "info" : "SimpleType[23930-23951]:SimpleType[23930-23951]"
    }, {
      "left" : "DimensionMismatchException",
      "right" : "DimensionMismatchException",
      "info" : "SimpleType[23968-23994]:SimpleType[23968-23994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23995-26299]:Block[23995-26299]"
    }, {
      "left" : "if (x == null)",
      "right" : "if (x == null)",
      "info" : "IfStatement[24037-24110]:IfStatement[24037-24110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24052-24110]:Block[24052-24110]"
    }, {
      "left" : "throw new NullArgumentException();",
      "right" : "throw new NullArgumentException();",
      "info" : "ThrowStatement[24066-24100]:ThrowStatement[24066-24100]"
    }, {
      "left" : "final int yListLen = yList.length;",
      "right" : "final int yListLen = yList.length;",
      "info" : "VariableDeclarationStatement[24120-24154]:VariableDeclarationStatement[24120-24154]"
    }, {
      "left" : "final int len = x.length;",
      "right" : "final int len = x.length;",
      "info" : "VariableDeclarationStatement[24163-24188]:VariableDeclarationStatement[24163-24188]"
    }, {
      "left" : "for (int j = 0; j < yListLen; j++)",
      "right" : "for (int j = 0; j < yListLen; j++)",
      "info" : "ForStatement[24198-24497]:ForStatement[24198-24497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24233-24497]:Block[24233-24497]"
    }, {
      "left" : "final double[] y = yList[j];",
      "right" : "final double[] y = yList[j];",
      "info" : "VariableDeclarationStatement[24247-24275]:VariableDeclarationStatement[24247-24275]"
    }, {
      "left" : "if (y == null)",
      "right" : "if (y == null)",
      "info" : "IfStatement[24288-24369]:IfStatement[24288-24369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24303-24369]:Block[24303-24369]"
    }, {
      "left" : "throw new NullArgumentException();",
      "right" : "throw new NullArgumentException();",
      "info" : "ThrowStatement[24321-24355]:ThrowStatement[24321-24355]"
    }, {
      "left" : "if (y.length != len)",
      "right" : "if (y.length != len)",
      "info" : "IfStatement[24382-24487]:IfStatement[24382-24487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24403-24487]:Block[24403-24487]"
    }, {
      "left" : "throw new DimensionMismatchException(y.length, len);",
      "right" : "throw new DimensionMismatchException(y.length, len);",
      "info" : "ThrowStatement[24421-24473]:ThrowStatement[24421-24473]"
    }, {
      "left" : "final List<Pair<Double, Integer>> list\n            = new ArrayList<Pair<Double, Integer>>(len);",
      "right" : "final List<Pair<Double, Integer>> list\n            = new ArrayList<Pair<Double, Integer>>(len);",
      "info" : "VariableDeclarationStatement[24569-24664]:VariableDeclarationStatement[24569-24664]"
    }, {
      "left" : "for (int i = 0; i < len; i++)",
      "right" : "for (int i = 0; i < len; i++)",
      "info" : "ForStatement[24673-24772]:ForStatement[24673-24772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24703-24772]:Block[24703-24772]"
    }, {
      "left" : "list.add(new Pair<Double, Integer>(x[i], i));",
      "right" : "list.add(new Pair<Double, Integer>(x[i], i));",
      "info" : "ExpressionStatement[24717-24762]:ExpressionStatement[24717-24762]"
    }, {
      "left" : "final Comparator<Pair<Double, Integer>> comp\n            = dir == MathArrays.OrderDirection.INCREASING ?\n            new Comparator<Pair<Double, Integer>>() {\n            public int compare(Pair<Double, Integer> o1,\n                               Pair<Double, Integer> o2) {\n                return o1.getKey().compareTo(o2.getKey());\n            }\n        } : new Comparator<Pair<Double,Integer>>() {\n            public int compare(Pair<Double, Integer> o1,\n                               Pair<Double, Integer> o2) {\n                return o2.getKey().compareTo(o1.getKey());\n            }\n        };",
      "right" : "final Comparator<Pair<Double, Integer>> comp\n            = dir == MathArrays.OrderDirection.INCREASING ?\n            new Comparator<Pair<Double, Integer>>() {\n            public int compare(Pair<Double, Integer> o1,\n                               Pair<Double, Integer> o2) {\n                return o1.getKey().compareTo(o2.getKey());\n            }\n        } : new Comparator<Pair<Double,Integer>>() {\n            public int compare(Pair<Double, Integer> o1,\n                               Pair<Double, Integer> o2) {\n                return o2.getKey().compareTo(o1.getKey());\n            }\n        };",
      "info" : "VariableDeclarationStatement[24850-25450]:VariableDeclarationStatement[24850-25450]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25021-25027]:Modifier[25021-25027]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[25028-25031]:PrimitiveType[25028-25031]"
    }, {
      "left" : "compare",
      "right" : "compare",
      "info" : "SimpleName[25032-25039]:SimpleName[25032-25039]"
    }, {
      "left" : "Pair<Double, Integer> o1",
      "right" : "Pair<Double, Integer> o1",
      "info" : "SingleVariableDeclaration[25040-25064]:SingleVariableDeclaration[25040-25064]"
    }, {
      "left" : "Pair<Double, Integer> o2",
      "right" : "Pair<Double, Integer> o2",
      "info" : "SingleVariableDeclaration[25097-25121]:SingleVariableDeclaration[25097-25121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25123-25197]:Block[25123-25197]"
    }, {
      "left" : "return o1.getKey().compareTo(o2.getKey());",
      "right" : "return o1.getKey().compareTo(o2.getKey());",
      "info" : "ReturnStatement[25141-25183]:ReturnStatement[25141-25183]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25263-25269]:Modifier[25263-25269]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[25270-25273]:PrimitiveType[25270-25273]"
    }, {
      "left" : "compare",
      "right" : "compare",
      "info" : "SimpleName[25274-25281]:SimpleName[25274-25281]"
    }, {
      "left" : "Pair<Double, Integer> o1",
      "right" : "Pair<Double, Integer> o1",
      "info" : "SingleVariableDeclaration[25282-25306]:SingleVariableDeclaration[25282-25306]"
    }, {
      "left" : "Pair<Double, Integer> o2",
      "right" : "Pair<Double, Integer> o2",
      "info" : "SingleVariableDeclaration[25339-25363]:SingleVariableDeclaration[25339-25363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25365-25439]:Block[25365-25439]"
    }, {
      "left" : "return o2.getKey().compareTo(o1.getKey());",
      "right" : "return o2.getKey().compareTo(o1.getKey());",
      "info" : "ReturnStatement[25383-25425]:ReturnStatement[25383-25425]"
    }, {
      "left" : "Collections.sort(list, comp);",
      "right" : "Collections.sort(list, comp);",
      "info" : "ExpressionStatement[25477-25506]:ExpressionStatement[25477-25506]"
    }, {
      "left" : "final int[] indices = new int[len];",
      "right" : "final int[] indices = new int[len];",
      "info" : "VariableDeclarationStatement[25665-25700]:VariableDeclarationStatement[25665-25700]"
    }, {
      "left" : "for (int i = 0; i < len; i++)",
      "right" : "for (int i = 0; i < len; i++)",
      "info" : "ForStatement[25709-25877]:ForStatement[25709-25877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25739-25877]:Block[25739-25877]"
    }, {
      "left" : "final Pair<Double, Integer> e = list.get(i);",
      "right" : "final Pair<Double, Integer> e = list.get(i);",
      "info" : "VariableDeclarationStatement[25753-25797]:VariableDeclarationStatement[25753-25797]"
    }, {
      "left" : "x[i] = e.getKey();",
      "right" : "x[i] = e.getKey();",
      "info" : "ExpressionStatement[25810-25828]:ExpressionStatement[25810-25828]"
    }, {
      "left" : "indices[i] = e.getValue();",
      "right" : "indices[i] = e.getValue();",
      "info" : "ExpressionStatement[25841-25867]:ExpressionStatement[25841-25867]"
    }, {
      "left" : "for (int j = 0; j < yListLen; j++)",
      "right" : "for (int j = 0; j < yListLen; j++)",
      "info" : "ForStatement[25984-26293]:ForStatement[25984-26293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26019-26293]:Block[26019-26293]"
    }, {
      "left" : "final double[] yInPlace = yList[j];",
      "right" : "final double[] yInPlace = yList[j];",
      "info" : "VariableDeclarationStatement[26087-26122]:VariableDeclarationStatement[26087-26122]"
    }, {
      "left" : "final double[] yOrig = yInPlace.clone();",
      "right" : "final double[] yOrig = yInPlace.clone();",
      "info" : "VariableDeclarationStatement[26135-26175]:VariableDeclarationStatement[26135-26175]"
    }, {
      "left" : "for (int i = 0; i < len; i++)",
      "right" : "for (int i = 0; i < len; i++)",
      "info" : "ForStatement[26189-26283]:ForStatement[26189-26283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26219-26283]:Block[26219-26283]"
    }, {
      "left" : "yInPlace[i] = yOrig[indices[i]];",
      "right" : "yInPlace[i] = yOrig[indices[i]];",
      "info" : "ExpressionStatement[26237-26269]:ExpressionStatement[26237-26269]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26454-26460]:Modifier[26454-26460]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[26461-26467]:Modifier[26461-26467]"
    }, {
      "left" : "int[]",
      "right" : "int[]",
      "info" : "ArrayType[26468-26473]:ArrayType[26468-26473]"
    }, {
      "left" : "copyOf",
      "right" : "copyOf",
      "info" : "SimpleName[26474-26480]:SimpleName[26474-26480]"
    }, {
      "left" : "int[] source",
      "right" : "int[] source",
      "info" : "SingleVariableDeclaration[26481-26493]:SingleVariableDeclaration[26481-26493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26495-26550]:Block[26495-26550]"
    }, {
      "left" : "return copyOf(source, source.length);",
      "right" : "return copyOf(source, source.length);",
      "info" : "ReturnStatement[26506-26543]:ReturnStatement[26506-26543]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26705-26711]:Modifier[26705-26711]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[26712-26718]:Modifier[26712-26718]"
    }, {
      "left" : "double[]",
      "right" : "double[]",
      "info" : "ArrayType[26719-26727]:ArrayType[26719-26727]"
    }, {
      "left" : "copyOf",
      "right" : "copyOf",
      "info" : "SimpleName[26728-26734]:SimpleName[26728-26734]"
    }, {
      "left" : "double[] source",
      "right" : "double[] source",
      "info" : "SingleVariableDeclaration[26735-26750]:SingleVariableDeclaration[26735-26750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26752-26807]:Block[26752-26807]"
    }, {
      "left" : "return copyOf(source, source.length);",
      "right" : "return copyOf(source, source.length);",
      "info" : "ReturnStatement[26763-26800]:ReturnStatement[26763-26800]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27121-27127]:Modifier[27121-27127]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[27128-27134]:Modifier[27128-27134]"
    }, {
      "left" : "int[]",
      "right" : "int[]",
      "info" : "ArrayType[27135-27140]:ArrayType[27135-27140]"
    }, {
      "left" : "copyOf",
      "right" : "copyOf",
      "info" : "SimpleName[27141-27147]:SimpleName[27141-27147]"
    }, {
      "left" : "int[] source",
      "right" : "int[] source",
      "info" : "SingleVariableDeclaration[27148-27160]:SingleVariableDeclaration[27148-27160]"
    }, {
      "left" : "int len",
      "right" : "int len",
      "info" : "SingleVariableDeclaration[27162-27169]:SingleVariableDeclaration[27162-27169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27171-27330]:Block[27171-27330]"
    }, {
      "left" : "final int[] output = new int[len];",
      "right" : "final int[] output = new int[len];",
      "info" : "VariableDeclarationStatement[27182-27216]:VariableDeclarationStatement[27182-27216]"
    }, {
      "left" : "System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",
      "right" : "System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",
      "info" : "ExpressionStatement[27226-27299]:ExpressionStatement[27226-27299]"
    }, {
      "left" : "return output;",
      "right" : "return output;",
      "info" : "ReturnStatement[27309-27323]:ReturnStatement[27309-27323]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27644-27650]:Modifier[27644-27650]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[27651-27657]:Modifier[27651-27657]"
    }, {
      "left" : "double[]",
      "right" : "double[]",
      "info" : "ArrayType[27658-27666]:ArrayType[27658-27666]"
    }, {
      "left" : "copyOf",
      "right" : "copyOf",
      "info" : "SimpleName[27667-27673]:SimpleName[27667-27673]"
    }, {
      "left" : "double[] source",
      "right" : "double[] source",
      "info" : "SingleVariableDeclaration[27674-27689]:SingleVariableDeclaration[27674-27689]"
    }, {
      "left" : "int len",
      "right" : "int len",
      "info" : "SingleVariableDeclaration[27691-27698]:SingleVariableDeclaration[27691-27698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27700-27865]:Block[27700-27865]"
    }, {
      "left" : "final double[] output = new double[len];",
      "right" : "final double[] output = new double[len];",
      "info" : "VariableDeclarationStatement[27711-27751]:VariableDeclarationStatement[27711-27751]"
    }, {
      "left" : "System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",
      "right" : "System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",
      "info" : "ExpressionStatement[27761-27834]:ExpressionStatement[27761-27834]"
    }, {
      "left" : "return output;",
      "right" : "return output;",
      "info" : "ReturnStatement[27844-27858]:ReturnStatement[27844-27858]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28667-28673]:Modifier[28667-28673]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[28674-28680]:Modifier[28674-28680]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[28681-28687]:PrimitiveType[28681-28687]"
    }, {
      "left" : "linearCombination",
      "right" : "linearCombination",
      "info" : "SimpleName[28688-28705]:SimpleName[28688-28705]"
    }, {
      "left" : "final double[] a",
      "right" : "final double[] a",
      "info" : "SingleVariableDeclaration[28706-28722]:SingleVariableDeclaration[28706-28722]"
    }, {
      "left" : "final double[] b",
      "right" : "final double[] b",
      "info" : "SingleVariableDeclaration[28724-28740]:SingleVariableDeclaration[28724-28740]"
    }, {
      "left" : "DimensionMismatchException",
      "right" : "DimensionMismatchException",
      "info" : "SimpleType[28757-28783]:SimpleType[28757-28783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28784-30884]:Block[28784-30950]"
    }, {
      "left" : "final int len = a.length;",
      "right" : "final int len = a.length;",
      "info" : "VariableDeclarationStatement[28794-28819]:VariableDeclarationStatement[28794-28819]"
    }, {
      "left" : "if (len != b.length)",
      "right" : "if (len != b.length)",
      "info" : "IfStatement[28828-28925]:IfStatement[28828-28925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28849-28925]:Block[28849-28925]"
    }, {
      "left" : "throw new DimensionMismatchException(len, b.length);",
      "right" : "throw new DimensionMismatchException(len, b.length);",
      "info" : "ThrowStatement[28863-28915]:ThrowStatement[28863-28915]"
    }, {
      "left" : "final double[] prodHigh = new double[len];",
      "right" : "final double[] prodHigh = new double[len];",
      "info" : "VariableDeclarationStatement[28984-29026]:VariableDeclarationStatement[29050-29092]"
    }, {
      "left" : "double prodLowSum = 0;",
      "right" : "double prodLowSum = 0;",
      "info" : "VariableDeclarationStatement[29035-29057]:VariableDeclarationStatement[29101-29123]"
    }, {
      "left" : "for (int i = 0; i < len; i++)",
      "right" : "for (int i = 0; i < len; i++)",
      "info" : "ForStatement[29067-29802]:ForStatement[29133-29868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29097-29802]:Block[29163-29868]"
    }, {
      "left" : "final double ai = a[i];",
      "right" : "final double ai = a[i];",
      "info" : "VariableDeclarationStatement[29111-29134]:VariableDeclarationStatement[29177-29200]"
    }, {
      "left" : "final double ca = SPLIT_FACTOR * ai;",
      "right" : "final double ca = SPLIT_FACTOR * ai;",
      "info" : "VariableDeclarationStatement[29147-29183]:VariableDeclarationStatement[29213-29249]"
    }, {
      "left" : "final double aHigh = ca - (ca - ai);",
      "right" : "final double aHigh = ca - (ca - ai);",
      "info" : "VariableDeclarationStatement[29196-29232]:VariableDeclarationStatement[29262-29298]"
    }, {
      "left" : "final double aLow = ai - aHigh;",
      "right" : "final double aLow = ai - aHigh;",
      "info" : "VariableDeclarationStatement[29245-29276]:VariableDeclarationStatement[29311-29342]"
    }, {
      "left" : "final double bi = b[i];",
      "right" : "final double bi = b[i];",
      "info" : "VariableDeclarationStatement[29290-29313]:VariableDeclarationStatement[29356-29379]"
    }, {
      "left" : "final double cb = SPLIT_FACTOR * bi;",
      "right" : "final double cb = SPLIT_FACTOR * bi;",
      "info" : "VariableDeclarationStatement[29326-29362]:VariableDeclarationStatement[29392-29428]"
    }, {
      "left" : "final double bHigh = cb - (cb - bi);",
      "right" : "final double bHigh = cb - (cb - bi);",
      "info" : "VariableDeclarationStatement[29375-29411]:VariableDeclarationStatement[29441-29477]"
    }, {
      "left" : "final double bLow = bi - bHigh;",
      "right" : "final double bLow = bi - bHigh;",
      "info" : "VariableDeclarationStatement[29424-29455]:VariableDeclarationStatement[29490-29521]"
    }, {
      "left" : "prodHigh[i] = ai * bi;",
      "right" : "prodHigh[i] = ai * bi;",
      "info" : "ExpressionStatement[29468-29490]:ExpressionStatement[29534-29556]"
    }, {
      "left" : "final double prodLow = aLow * bLow - (((prodHigh[i] -\n                                                    aHigh * bHigh) -\n                                                   aLow * bHigh) -\n                                                  aHigh * bLow);",
      "right" : "final double prodLow = aLow * bLow - (((prodHigh[i] -\n                                                    aHigh * bHigh) -\n                                                   aLow * bHigh) -\n                                                  aHigh * bLow);",
      "info" : "VariableDeclarationStatement[29503-29757]:VariableDeclarationStatement[29569-29823]"
    }, {
      "left" : "prodLowSum += prodLow;",
      "right" : "prodLowSum += prodLow;",
      "info" : "ExpressionStatement[29770-29792]:ExpressionStatement[29836-29858]"
    }, {
      "left" : "final double prodHighCur = prodHigh[0];",
      "right" : "final double prodHighCur = prodHigh[0];",
      "info" : "VariableDeclarationStatement[29813-29852]:VariableDeclarationStatement[29879-29918]"
    }, {
      "left" : "double prodHighNext = prodHigh[1];",
      "right" : "double prodHighNext = prodHigh[1];",
      "info" : "VariableDeclarationStatement[29861-29895]:VariableDeclarationStatement[29927-29961]"
    }, {
      "left" : "double sHighPrev = prodHighCur + prodHighNext;",
      "right" : "double sHighPrev = prodHighCur + prodHighNext;",
      "info" : "VariableDeclarationStatement[29904-29950]:VariableDeclarationStatement[29970-30016]"
    }, {
      "left" : "double sPrime = sHighPrev - prodHighNext;",
      "right" : "double sPrime = sHighPrev - prodHighNext;",
      "info" : "VariableDeclarationStatement[29959-30000]:VariableDeclarationStatement[30025-30066]"
    }, {
      "left" : "double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);",
      "right" : "double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);",
      "info" : "VariableDeclarationStatement[30009-30089]:VariableDeclarationStatement[30075-30155]"
    }, {
      "left" : "final int lenMinusOne = len - 1;",
      "right" : "final int lenMinusOne = len - 1;",
      "info" : "VariableDeclarationStatement[30099-30131]:VariableDeclarationStatement[30165-30197]"
    }, {
      "left" : "for (int i = 1; i < lenMinusOne; i++)",
      "right" : "for (int i = 1; i < lenMinusOne; i++)",
      "info" : "ForStatement[30140-30459]:ForStatement[30206-30525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30178-30459]:Block[30244-30525]"
    }, {
      "left" : "prodHighNext = prodHigh[i + 1];",
      "right" : "prodHighNext = prodHigh[i + 1];",
      "info" : "ExpressionStatement[30192-30223]:ExpressionStatement[30258-30289]"
    }, {
      "left" : "final double sHighCur = sHighPrev + prodHighNext;",
      "right" : "final double sHighCur = sHighPrev + prodHighNext;",
      "info" : "VariableDeclarationStatement[30236-30285]:VariableDeclarationStatement[30302-30351]"
    }, {
      "left" : "sPrime = sHighCur - prodHighNext;",
      "right" : "sPrime = sHighCur - prodHighNext;",
      "info" : "ExpressionStatement[30298-30331]:ExpressionStatement[30364-30397]"
    }, {
      "left" : "sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);",
      "right" : "sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);",
      "info" : "ExpressionStatement[30344-30415]:ExpressionStatement[30410-30481]"
    }, {
      "left" : "sHighPrev = sHighCur;",
      "right" : "sHighPrev = sHighCur;",
      "info" : "ExpressionStatement[30428-30449]:ExpressionStatement[30494-30515]"
    }, {
      "left" : "double result = sHighPrev + (prodLowSum + sLowSum);",
      "right" : "double result = sHighPrev + (prodLowSum + sLowSum);",
      "info" : "VariableDeclarationStatement[30469-30520]:VariableDeclarationStatement[30535-30586]"
    }, {
      "left" : "if (Double.isNaN(result))",
      "right" : "if (Double.isNaN(result))",
      "info" : "IfStatement[30530-30854]:IfStatement[30596-30920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30556-30854]:Block[30622-30920]"
    }, {
      "left" : "result = 0;",
      "right" : "result = 0;",
      "info" : "ExpressionStatement[30736-30747]:ExpressionStatement[30802-30813]"
    }, {
      "left" : "for (int i = 0; i < len; ++i)",
      "right" : "for (int i = 0; i < len; ++i)",
      "info" : "ForStatement[30760-30844]:ForStatement[30826-30910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30790-30844]:Block[30856-30910]"
    }, {
      "left" : "result += a[i] * b[i];",
      "right" : "result += a[i] * b[i];",
      "info" : "ExpressionStatement[30808-30830]:ExpressionStatement[30874-30896]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[30864-30878]:ReturnStatement[30930-30944]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31954-31960]:Modifier[32020-32026]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[31961-31967]:Modifier[32027-32033]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[31968-31974]:PrimitiveType[32034-32040]"
    }, {
      "left" : "linearCombination",
      "right" : "linearCombination",
      "info" : "SimpleName[31975-31992]:SimpleName[32041-32058]"
    }, {
      "left" : "final double a1",
      "right" : "final double a1",
      "info" : "SingleVariableDeclaration[31993-32008]:SingleVariableDeclaration[32059-32074]"
    }, {
      "left" : "final double b1",
      "right" : "final double b1",
      "info" : "SingleVariableDeclaration[32010-32025]:SingleVariableDeclaration[32076-32091]"
    }, {
      "left" : "final double a2",
      "right" : "final double a2",
      "info" : "SingleVariableDeclaration[32070-32085]:SingleVariableDeclaration[32136-32151]"
    }, {
      "left" : "final double b2",
      "right" : "final double b2",
      "info" : "SingleVariableDeclaration[32087-32102]:SingleVariableDeclaration[32153-32168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32104-34816]:Block[32170-34882]"
    }, {
      "left" : "final double ca1        = SPLIT_FACTOR * a1;",
      "right" : "final double ca1        = SPLIT_FACTOR * a1;",
      "info" : "VariableDeclarationStatement[32996-33040]:VariableDeclarationStatement[33062-33106]"
    }, {
      "left" : "final double a1High     = ca1 - (ca1 - a1);",
      "right" : "final double a1High     = ca1 - (ca1 - a1);",
      "info" : "VariableDeclarationStatement[33049-33092]:VariableDeclarationStatement[33115-33158]"
    }, {
      "left" : "final double a1Low      = a1 - a1High;",
      "right" : "final double a1Low      = a1 - a1High;",
      "info" : "VariableDeclarationStatement[33101-33139]:VariableDeclarationStatement[33167-33205]"
    }, {
      "left" : "final double cb1        = SPLIT_FACTOR * b1;",
      "right" : "final double cb1        = SPLIT_FACTOR * b1;",
      "info" : "VariableDeclarationStatement[33148-33192]:VariableDeclarationStatement[33214-33258]"
    }, {
      "left" : "final double b1High     = cb1 - (cb1 - b1);",
      "right" : "final double b1High     = cb1 - (cb1 - b1);",
      "info" : "VariableDeclarationStatement[33201-33244]:VariableDeclarationStatement[33267-33310]"
    }, {
      "left" : "final double b1Low      = b1 - b1High;",
      "right" : "final double b1Low      = b1 - b1High;",
      "info" : "VariableDeclarationStatement[33253-33291]:VariableDeclarationStatement[33319-33357]"
    }, {
      "left" : "final double prod1High  = a1 * b1;",
      "right" : "final double prod1High  = a1 * b1;",
      "info" : "VariableDeclarationStatement[33344-33378]:VariableDeclarationStatement[33410-33444]"
    }, {
      "left" : "final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);",
      "right" : "final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);",
      "info" : "VariableDeclarationStatement[33387-33497]:VariableDeclarationStatement[33453-33563]"
    }, {
      "left" : "final double ca2        = SPLIT_FACTOR * a2;",
      "right" : "final double ca2        = SPLIT_FACTOR * a2;",
      "info" : "VariableDeclarationStatement[33557-33601]:VariableDeclarationStatement[33623-33667]"
    }, {
      "left" : "final double a2High     = ca2 - (ca2 - a2);",
      "right" : "final double a2High     = ca2 - (ca2 - a2);",
      "info" : "VariableDeclarationStatement[33610-33653]:VariableDeclarationStatement[33676-33719]"
    }, {
      "left" : "final double a2Low      = a2 - a2High;",
      "right" : "final double a2Low      = a2 - a2High;",
      "info" : "VariableDeclarationStatement[33662-33700]:VariableDeclarationStatement[33728-33766]"
    }, {
      "left" : "final double cb2        = SPLIT_FACTOR * b2;",
      "right" : "final double cb2        = SPLIT_FACTOR * b2;",
      "info" : "VariableDeclarationStatement[33709-33753]:VariableDeclarationStatement[33775-33819]"
    }, {
      "left" : "final double b2High     = cb2 - (cb2 - b2);",
      "right" : "final double b2High     = cb2 - (cb2 - b2);",
      "info" : "VariableDeclarationStatement[33762-33805]:VariableDeclarationStatement[33828-33871]"
    }, {
      "left" : "final double b2Low      = b2 - b2High;",
      "right" : "final double b2Low      = b2 - b2High;",
      "info" : "VariableDeclarationStatement[33814-33852]:VariableDeclarationStatement[33880-33918]"
    }, {
      "left" : "final double prod2High  = a2 * b2;",
      "right" : "final double prod2High  = a2 * b2;",
      "info" : "VariableDeclarationStatement[33905-33939]:VariableDeclarationStatement[33971-34005]"
    }, {
      "left" : "final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);",
      "right" : "final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);",
      "info" : "VariableDeclarationStatement[33948-34058]:VariableDeclarationStatement[34014-34124]"
    }, {
      "left" : "final double s12High    = prod1High + prod2High;",
      "right" : "final double s12High    = prod1High + prod2High;",
      "info" : "VariableDeclarationStatement[34115-34163]:VariableDeclarationStatement[34181-34229]"
    }, {
      "left" : "final double s12Prime   = s12High - prod2High;",
      "right" : "final double s12Prime   = s12High - prod2High;",
      "info" : "VariableDeclarationStatement[34172-34218]:VariableDeclarationStatement[34238-34284]"
    }, {
      "left" : "final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);",
      "right" : "final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);",
      "info" : "VariableDeclarationStatement[34227-34313]:VariableDeclarationStatement[34293-34379]"
    }, {
      "left" : "double result = s12High + (prod1Low + prod2Low + s12Low);",
      "right" : "double result = s12High + (prod1Low + prod2Low + s12Low);",
      "info" : "VariableDeclarationStatement[34476-34533]:VariableDeclarationStatement[34542-34599]"
    }, {
      "left" : "if (Double.isNaN(result))",
      "right" : "if (Double.isNaN(result))",
      "info" : "IfStatement[34543-34786]:IfStatement[34609-34852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34569-34786]:Block[34635-34852]"
    }, {
      "left" : "result = a1 * b1 + a2 * b2;",
      "right" : "result = a1 * b1 + a2 * b2;",
      "info" : "ExpressionStatement[34749-34776]:ExpressionStatement[34815-34842]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[34796-34810]:ReturnStatement[34862-34876]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36039-36045]:Modifier[36105-36111]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36046-36052]:Modifier[36112-36118]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[36053-36059]:PrimitiveType[36119-36125]"
    }, {
      "left" : "linearCombination",
      "right" : "linearCombination",
      "info" : "SimpleName[36060-36077]:SimpleName[36126-36143]"
    }, {
      "left" : "final double a1",
      "right" : "final double a1",
      "info" : "SingleVariableDeclaration[36078-36093]:SingleVariableDeclaration[36144-36159]"
    }, {
      "left" : "final double b1",
      "right" : "final double b1",
      "info" : "SingleVariableDeclaration[36095-36110]:SingleVariableDeclaration[36161-36176]"
    }, {
      "left" : "final double a2",
      "right" : "final double a2",
      "info" : "SingleVariableDeclaration[36155-36170]:SingleVariableDeclaration[36221-36236]"
    }, {
      "left" : "final double b2",
      "right" : "final double b2",
      "info" : "SingleVariableDeclaration[36172-36187]:SingleVariableDeclaration[36238-36253]"
    }, {
      "left" : "final double a3",
      "right" : "final double a3",
      "info" : "SingleVariableDeclaration[36232-36247]:SingleVariableDeclaration[36298-36313]"
    }, {
      "left" : "final double b3",
      "right" : "final double b3",
      "info" : "SingleVariableDeclaration[36249-36264]:SingleVariableDeclaration[36315-36330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36266-39841]:Block[36332-39907]"
    }, {
      "left" : "final double ca1        = SPLIT_FACTOR * a1;",
      "right" : "final double ca1        = SPLIT_FACTOR * a1;",
      "info" : "VariableDeclarationStatement[37162-37206]:VariableDeclarationStatement[37228-37272]"
    }, {
      "left" : "final double a1High     = ca1 - (ca1 - a1);",
      "right" : "final double a1High     = ca1 - (ca1 - a1);",
      "info" : "VariableDeclarationStatement[37215-37258]:VariableDeclarationStatement[37281-37324]"
    }, {
      "left" : "final double a1Low      = a1 - a1High;",
      "right" : "final double a1Low      = a1 - a1High;",
      "info" : "VariableDeclarationStatement[37267-37305]:VariableDeclarationStatement[37333-37371]"
    }, {
      "left" : "final double cb1        = SPLIT_FACTOR * b1;",
      "right" : "final double cb1        = SPLIT_FACTOR * b1;",
      "info" : "VariableDeclarationStatement[37314-37358]:VariableDeclarationStatement[37380-37424]"
    }, {
      "left" : "final double b1High     = cb1 - (cb1 - b1);",
      "right" : "final double b1High     = cb1 - (cb1 - b1);",
      "info" : "VariableDeclarationStatement[37367-37410]:VariableDeclarationStatement[37433-37476]"
    }, {
      "left" : "final double b1Low      = b1 - b1High;",
      "right" : "final double b1Low      = b1 - b1High;",
      "info" : "VariableDeclarationStatement[37419-37457]:VariableDeclarationStatement[37485-37523]"
    }, {
      "left" : "final double prod1High  = a1 * b1;",
      "right" : "final double prod1High  = a1 * b1;",
      "info" : "VariableDeclarationStatement[37510-37544]:VariableDeclarationStatement[37576-37610]"
    }, {
      "left" : "final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);",
      "right" : "final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);",
      "info" : "VariableDeclarationStatement[37553-37663]:VariableDeclarationStatement[37619-37729]"
    }, {
      "left" : "final double ca2        = SPLIT_FACTOR * a2;",
      "right" : "final double ca2        = SPLIT_FACTOR * a2;",
      "info" : "VariableDeclarationStatement[37723-37767]:VariableDeclarationStatement[37789-37833]"
    }, {
      "left" : "final double a2High     = ca2 - (ca2 - a2);",
      "right" : "final double a2High     = ca2 - (ca2 - a2);",
      "info" : "VariableDeclarationStatement[37776-37819]:VariableDeclarationStatement[37842-37885]"
    }, {
      "left" : "final double a2Low      = a2 - a2High;",
      "right" : "final double a2Low      = a2 - a2High;",
      "info" : "VariableDeclarationStatement[37828-37866]:VariableDeclarationStatement[37894-37932]"
    }, {
      "left" : "final double cb2        = SPLIT_FACTOR * b2;",
      "right" : "final double cb2        = SPLIT_FACTOR * b2;",
      "info" : "VariableDeclarationStatement[37875-37919]:VariableDeclarationStatement[37941-37985]"
    }, {
      "left" : "final double b2High     = cb2 - (cb2 - b2);",
      "right" : "final double b2High     = cb2 - (cb2 - b2);",
      "info" : "VariableDeclarationStatement[37928-37971]:VariableDeclarationStatement[37994-38037]"
    }, {
      "left" : "final double b2Low      = b2 - b2High;",
      "right" : "final double b2Low      = b2 - b2High;",
      "info" : "VariableDeclarationStatement[37980-38018]:VariableDeclarationStatement[38046-38084]"
    }, {
      "left" : "final double prod2High  = a2 * b2;",
      "right" : "final double prod2High  = a2 * b2;",
      "info" : "VariableDeclarationStatement[38071-38105]:VariableDeclarationStatement[38137-38171]"
    }, {
      "left" : "final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);",
      "right" : "final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);",
      "info" : "VariableDeclarationStatement[38114-38224]:VariableDeclarationStatement[38180-38290]"
    }, {
      "left" : "final double ca3        = SPLIT_FACTOR * a3;",
      "right" : "final double ca3        = SPLIT_FACTOR * a3;",
      "info" : "VariableDeclarationStatement[38284-38328]:VariableDeclarationStatement[38350-38394]"
    }, {
      "left" : "final double a3High     = ca3 - (ca3 - a3);",
      "right" : "final double a3High     = ca3 - (ca3 - a3);",
      "info" : "VariableDeclarationStatement[38337-38380]:VariableDeclarationStatement[38403-38446]"
    }, {
      "left" : "final double a3Low      = a3 - a3High;",
      "right" : "final double a3Low      = a3 - a3High;",
      "info" : "VariableDeclarationStatement[38389-38427]:VariableDeclarationStatement[38455-38493]"
    }, {
      "left" : "final double cb3        = SPLIT_FACTOR * b3;",
      "right" : "final double cb3        = SPLIT_FACTOR * b3;",
      "info" : "VariableDeclarationStatement[38436-38480]:VariableDeclarationStatement[38502-38546]"
    }, {
      "left" : "final double b3High     = cb3 - (cb3 - b3);",
      "right" : "final double b3High     = cb3 - (cb3 - b3);",
      "info" : "VariableDeclarationStatement[38489-38532]:VariableDeclarationStatement[38555-38598]"
    }, {
      "left" : "final double b3Low      = b3 - b3High;",
      "right" : "final double b3Low      = b3 - b3High;",
      "info" : "VariableDeclarationStatement[38541-38579]:VariableDeclarationStatement[38607-38645]"
    }, {
      "left" : "final double prod3High  = a3 * b3;",
      "right" : "final double prod3High  = a3 * b3;",
      "info" : "VariableDeclarationStatement[38632-38666]:VariableDeclarationStatement[38698-38732]"
    }, {
      "left" : "final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);",
      "right" : "final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);",
      "info" : "VariableDeclarationStatement[38675-38785]:VariableDeclarationStatement[38741-38851]"
    }, {
      "left" : "final double s12High    = prod1High + prod2High;",
      "right" : "final double s12High    = prod1High + prod2High;",
      "info" : "VariableDeclarationStatement[38842-38890]:VariableDeclarationStatement[38908-38956]"
    }, {
      "left" : "final double s12Prime   = s12High - prod2High;",
      "right" : "final double s12Prime   = s12High - prod2High;",
      "info" : "VariableDeclarationStatement[38899-38945]:VariableDeclarationStatement[38965-39011]"
    }, {
      "left" : "final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);",
      "right" : "final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);",
      "info" : "VariableDeclarationStatement[38954-39040]:VariableDeclarationStatement[39020-39106]"
    }, {
      "left" : "final double s123High   = s12High + prod3High;",
      "right" : "final double s123High   = s12High + prod3High;",
      "info" : "VariableDeclarationStatement[39107-39153]:VariableDeclarationStatement[39173-39219]"
    }, {
      "left" : "final double s123Prime  = s123High - prod3High;",
      "right" : "final double s123Prime  = s123High - prod3High;",
      "info" : "VariableDeclarationStatement[39162-39209]:VariableDeclarationStatement[39228-39275]"
    }, {
      "left" : "final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);",
      "right" : "final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);",
      "info" : "VariableDeclarationStatement[39218-39305]:VariableDeclarationStatement[39284-39371]"
    }, {
      "left" : "double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);",
      "right" : "double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);",
      "info" : "VariableDeclarationStatement[39469-39548]:VariableDeclarationStatement[39535-39614]"
    }, {
      "left" : "if (Double.isNaN(result))",
      "right" : "if (Double.isNaN(result))",
      "info" : "IfStatement[39558-39811]:IfStatement[39624-39877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39584-39811]:Block[39650-39877]"
    }, {
      "left" : "result = a1 * b1 + a2 * b2 + a3 * b3;",
      "right" : "result = a1 * b1 + a2 * b2 + a3 * b3;",
      "info" : "ExpressionStatement[39764-39801]:ExpressionStatement[39830-39867]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[39821-39835]:ReturnStatement[39887-39901]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[41231-41237]:Modifier[41297-41303]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[41238-41244]:Modifier[41304-41310]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[41245-41251]:PrimitiveType[41311-41317]"
    }, {
      "left" : "linearCombination",
      "right" : "linearCombination",
      "info" : "SimpleName[41252-41269]:SimpleName[41318-41335]"
    }, {
      "left" : "final double a1",
      "right" : "final double a1",
      "info" : "SingleVariableDeclaration[41270-41285]:SingleVariableDeclaration[41336-41351]"
    }, {
      "left" : "final double b1",
      "right" : "final double b1",
      "info" : "SingleVariableDeclaration[41287-41302]:SingleVariableDeclaration[41353-41368]"
    }, {
      "left" : "final double a2",
      "right" : "final double a2",
      "info" : "SingleVariableDeclaration[41347-41362]:SingleVariableDeclaration[41413-41428]"
    }, {
      "left" : "final double b2",
      "right" : "final double b2",
      "info" : "SingleVariableDeclaration[41364-41379]:SingleVariableDeclaration[41430-41445]"
    }, {
      "left" : "final double a3",
      "right" : "final double a3",
      "info" : "SingleVariableDeclaration[41424-41439]:SingleVariableDeclaration[41490-41505]"
    }, {
      "left" : "final double b3",
      "right" : "final double b3",
      "info" : "SingleVariableDeclaration[41441-41456]:SingleVariableDeclaration[41507-41522]"
    }, {
      "left" : "final double a4",
      "right" : "final double a4",
      "info" : "SingleVariableDeclaration[41501-41516]:SingleVariableDeclaration[41567-41582]"
    }, {
      "left" : "final double b4",
      "right" : "final double b4",
      "info" : "SingleVariableDeclaration[41518-41533]:SingleVariableDeclaration[41584-41599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41535-45986]:Block[41601-46052]"
    }, {
      "left" : "final double ca1        = SPLIT_FACTOR * a1;",
      "right" : "final double ca1        = SPLIT_FACTOR * a1;",
      "info" : "VariableDeclarationStatement[42431-42475]:VariableDeclarationStatement[42497-42541]"
    }, {
      "left" : "final double a1High     = ca1 - (ca1 - a1);",
      "right" : "final double a1High     = ca1 - (ca1 - a1);",
      "info" : "VariableDeclarationStatement[42484-42527]:VariableDeclarationStatement[42550-42593]"
    }, {
      "left" : "final double a1Low      = a1 - a1High;",
      "right" : "final double a1Low      = a1 - a1High;",
      "info" : "VariableDeclarationStatement[42536-42574]:VariableDeclarationStatement[42602-42640]"
    }, {
      "left" : "final double cb1        = SPLIT_FACTOR * b1;",
      "right" : "final double cb1        = SPLIT_FACTOR * b1;",
      "info" : "VariableDeclarationStatement[42583-42627]:VariableDeclarationStatement[42649-42693]"
    }, {
      "left" : "final double b1High     = cb1 - (cb1 - b1);",
      "right" : "final double b1High     = cb1 - (cb1 - b1);",
      "info" : "VariableDeclarationStatement[42636-42679]:VariableDeclarationStatement[42702-42745]"
    }, {
      "left" : "final double b1Low      = b1 - b1High;",
      "right" : "final double b1Low      = b1 - b1High;",
      "info" : "VariableDeclarationStatement[42688-42726]:VariableDeclarationStatement[42754-42792]"
    }, {
      "left" : "final double prod1High  = a1 * b1;",
      "right" : "final double prod1High  = a1 * b1;",
      "info" : "VariableDeclarationStatement[42779-42813]:VariableDeclarationStatement[42845-42879]"
    }, {
      "left" : "final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);",
      "right" : "final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);",
      "info" : "VariableDeclarationStatement[42822-42932]:VariableDeclarationStatement[42888-42998]"
    }, {
      "left" : "final double ca2        = SPLIT_FACTOR * a2;",
      "right" : "final double ca2        = SPLIT_FACTOR * a2;",
      "info" : "VariableDeclarationStatement[42992-43036]:VariableDeclarationStatement[43058-43102]"
    }, {
      "left" : "final double a2High     = ca2 - (ca2 - a2);",
      "right" : "final double a2High     = ca2 - (ca2 - a2);",
      "info" : "VariableDeclarationStatement[43045-43088]:VariableDeclarationStatement[43111-43154]"
    }, {
      "left" : "final double a2Low      = a2 - a2High;",
      "right" : "final double a2Low      = a2 - a2High;",
      "info" : "VariableDeclarationStatement[43097-43135]:VariableDeclarationStatement[43163-43201]"
    }, {
      "left" : "final double cb2        = SPLIT_FACTOR * b2;",
      "right" : "final double cb2        = SPLIT_FACTOR * b2;",
      "info" : "VariableDeclarationStatement[43144-43188]:VariableDeclarationStatement[43210-43254]"
    }, {
      "left" : "final double b2High     = cb2 - (cb2 - b2);",
      "right" : "final double b2High     = cb2 - (cb2 - b2);",
      "info" : "VariableDeclarationStatement[43197-43240]:VariableDeclarationStatement[43263-43306]"
    }, {
      "left" : "final double b2Low      = b2 - b2High;",
      "right" : "final double b2Low      = b2 - b2High;",
      "info" : "VariableDeclarationStatement[43249-43287]:VariableDeclarationStatement[43315-43353]"
    }, {
      "left" : "final double prod2High  = a2 * b2;",
      "right" : "final double prod2High  = a2 * b2;",
      "info" : "VariableDeclarationStatement[43340-43374]:VariableDeclarationStatement[43406-43440]"
    }, {
      "left" : "final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);",
      "right" : "final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);",
      "info" : "VariableDeclarationStatement[43383-43493]:VariableDeclarationStatement[43449-43559]"
    }, {
      "left" : "final double ca3        = SPLIT_FACTOR * a3;",
      "right" : "final double ca3        = SPLIT_FACTOR * a3;",
      "info" : "VariableDeclarationStatement[43553-43597]:VariableDeclarationStatement[43619-43663]"
    }, {
      "left" : "final double a3High     = ca3 - (ca3 - a3);",
      "right" : "final double a3High     = ca3 - (ca3 - a3);",
      "info" : "VariableDeclarationStatement[43606-43649]:VariableDeclarationStatement[43672-43715]"
    }, {
      "left" : "final double a3Low      = a3 - a3High;",
      "right" : "final double a3Low      = a3 - a3High;",
      "info" : "VariableDeclarationStatement[43658-43696]:VariableDeclarationStatement[43724-43762]"
    }, {
      "left" : "final double cb3        = SPLIT_FACTOR * b3;",
      "right" : "final double cb3        = SPLIT_FACTOR * b3;",
      "info" : "VariableDeclarationStatement[43705-43749]:VariableDeclarationStatement[43771-43815]"
    }, {
      "left" : "final double b3High     = cb3 - (cb3 - b3);",
      "right" : "final double b3High     = cb3 - (cb3 - b3);",
      "info" : "VariableDeclarationStatement[43758-43801]:VariableDeclarationStatement[43824-43867]"
    }, {
      "left" : "final double b3Low      = b3 - b3High;",
      "right" : "final double b3Low      = b3 - b3High;",
      "info" : "VariableDeclarationStatement[43810-43848]:VariableDeclarationStatement[43876-43914]"
    }, {
      "left" : "final double prod3High  = a3 * b3;",
      "right" : "final double prod3High  = a3 * b3;",
      "info" : "VariableDeclarationStatement[43901-43935]:VariableDeclarationStatement[43967-44001]"
    }, {
      "left" : "final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);",
      "right" : "final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);",
      "info" : "VariableDeclarationStatement[43944-44054]:VariableDeclarationStatement[44010-44120]"
    }, {
      "left" : "final double ca4        = SPLIT_FACTOR * a4;",
      "right" : "final double ca4        = SPLIT_FACTOR * a4;",
      "info" : "VariableDeclarationStatement[44114-44158]:VariableDeclarationStatement[44180-44224]"
    }, {
      "left" : "final double a4High     = ca4 - (ca4 - a4);",
      "right" : "final double a4High     = ca4 - (ca4 - a4);",
      "info" : "VariableDeclarationStatement[44167-44210]:VariableDeclarationStatement[44233-44276]"
    }, {
      "left" : "final double a4Low      = a4 - a4High;",
      "right" : "final double a4Low      = a4 - a4High;",
      "info" : "VariableDeclarationStatement[44219-44257]:VariableDeclarationStatement[44285-44323]"
    }, {
      "left" : "final double cb4        = SPLIT_FACTOR * b4;",
      "right" : "final double cb4        = SPLIT_FACTOR * b4;",
      "info" : "VariableDeclarationStatement[44266-44310]:VariableDeclarationStatement[44332-44376]"
    }, {
      "left" : "final double b4High     = cb4 - (cb4 - b4);",
      "right" : "final double b4High     = cb4 - (cb4 - b4);",
      "info" : "VariableDeclarationStatement[44319-44362]:VariableDeclarationStatement[44385-44428]"
    }, {
      "left" : "final double b4Low      = b4 - b4High;",
      "right" : "final double b4Low      = b4 - b4High;",
      "info" : "VariableDeclarationStatement[44371-44409]:VariableDeclarationStatement[44437-44475]"
    }, {
      "left" : "final double prod4High  = a4 * b4;",
      "right" : "final double prod4High  = a4 * b4;",
      "info" : "VariableDeclarationStatement[44462-44496]:VariableDeclarationStatement[44528-44562]"
    }, {
      "left" : "final double prod4Low   = a4Low * b4Low - (((prod4High - a4High * b4High) - a4Low * b4High) - a4High * b4Low);",
      "right" : "final double prod4Low   = a4Low * b4Low - (((prod4High - a4High * b4High) - a4Low * b4High) - a4High * b4Low);",
      "info" : "VariableDeclarationStatement[44505-44615]:VariableDeclarationStatement[44571-44681]"
    }, {
      "left" : "final double s12High    = prod1High + prod2High;",
      "right" : "final double s12High    = prod1High + prod2High;",
      "info" : "VariableDeclarationStatement[44672-44720]:VariableDeclarationStatement[44738-44786]"
    }, {
      "left" : "final double s12Prime   = s12High - prod2High;",
      "right" : "final double s12Prime   = s12High - prod2High;",
      "info" : "VariableDeclarationStatement[44729-44775]:VariableDeclarationStatement[44795-44841]"
    }, {
      "left" : "final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);",
      "right" : "final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);",
      "info" : "VariableDeclarationStatement[44784-44870]:VariableDeclarationStatement[44850-44936]"
    }, {
      "left" : "final double s123High   = s12High + prod3High;",
      "right" : "final double s123High   = s12High + prod3High;",
      "info" : "VariableDeclarationStatement[44937-44983]:VariableDeclarationStatement[45003-45049]"
    }, {
      "left" : "final double s123Prime  = s123High - prod3High;",
      "right" : "final double s123Prime  = s123High - prod3High;",
      "info" : "VariableDeclarationStatement[44992-45039]:VariableDeclarationStatement[45058-45105]"
    }, {
      "left" : "final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);",
      "right" : "final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);",
      "info" : "VariableDeclarationStatement[45048-45135]:VariableDeclarationStatement[45114-45201]"
    }, {
      "left" : "final double s1234High  = s123High + prod4High;",
      "right" : "final double s1234High  = s123High + prod4High;",
      "info" : "VariableDeclarationStatement[45212-45259]:VariableDeclarationStatement[45278-45325]"
    }, {
      "left" : "final double s1234Prime = s1234High - prod4High;",
      "right" : "final double s1234Prime = s1234High - prod4High;",
      "info" : "VariableDeclarationStatement[45268-45316]:VariableDeclarationStatement[45334-45382]"
    }, {
      "left" : "final double s1234Low   = (prod4High - (s1234High - s1234Prime)) + (s123High - s1234Prime);",
      "right" : "final double s1234Low   = (prod4High - (s1234High - s1234Prime)) + (s123High - s1234Prime);",
      "info" : "VariableDeclarationStatement[45325-45416]:VariableDeclarationStatement[45391-45482]"
    }, {
      "left" : "double result = s1234High + (prod1Low + prod2Low + prod3Low + prod4Low + s12Low + s123Low + s1234Low);",
      "right" : "double result = s1234High + (prod1Low + prod2Low + prod3Low + prod4Low + s12Low + s123Low + s1234Low);",
      "info" : "VariableDeclarationStatement[45581-45683]:VariableDeclarationStatement[45647-45749]"
    }, {
      "left" : "if (Double.isNaN(result))",
      "right" : "if (Double.isNaN(result))",
      "info" : "IfStatement[45693-45956]:IfStatement[45759-46022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45719-45956]:Block[45785-46022]"
    }, {
      "left" : "result = a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4;",
      "right" : "result = a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4;",
      "info" : "ExpressionStatement[45899-45946]:ExpressionStatement[45965-46012]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[45966-45980]:ReturnStatement[46032-46046]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[46342-46348]:Modifier[46408-46414]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[46349-46355]:Modifier[46415-46421]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[46356-46363]:PrimitiveType[46422-46429]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[46364-46370]:SimpleName[46430-46436]"
    }, {
      "left" : "float[] x",
      "right" : "float[] x",
      "info" : "SingleVariableDeclaration[46371-46380]:SingleVariableDeclaration[46437-46446]"
    }, {
      "left" : "float[] y",
      "right" : "float[] y",
      "info" : "SingleVariableDeclaration[46382-46391]:SingleVariableDeclaration[46448-46457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46393-46742]:Block[46459-46808]"
    }, {
      "left" : "if ((x == null) || (y == null))",
      "right" : "if ((x == null) || (y == null))",
      "info" : "IfStatement[46403-46495]:IfStatement[46469-46561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46435-46495]:Block[46501-46561]"
    }, {
      "left" : "return !((x == null) ^ (y == null));",
      "right" : "return !((x == null) ^ (y == null));",
      "info" : "ReturnStatement[46449-46485]:ReturnStatement[46515-46551]"
    }, {
      "left" : "if (x.length != y.length)",
      "right" : "if (x.length != y.length)",
      "info" : "IfStatement[46504-46567]:IfStatement[46570-46633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46530-46567]:Block[46596-46633]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46544-46557]:ReturnStatement[46610-46623]"
    }, {
      "left" : "for (int i = 0; i < x.length; ++i)",
      "right" : "for (int i = 0; i < x.length; ++i)",
      "info" : "ForStatement[46576-46715]:ForStatement[46642-46781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46611-46715]:Block[46677-46781]"
    }, {
      "left" : "if (!Precision.equals(x[i], y[i]))",
      "right" : "if (!Precision.equals(x[i], y[i]))",
      "info" : "IfStatement[46625-46705]:IfStatement[46691-46771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46660-46705]:Block[46726-46771]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46678-46691]:ReturnStatement[46744-46757]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[46724-46736]:ReturnStatement[46790-46802]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[47141-47147]:Modifier[47207-47213]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[47148-47154]:Modifier[47214-47220]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[47155-47162]:PrimitiveType[47221-47228]"
    }, {
      "left" : "equalsIncludingNaN",
      "right" : "equalsIncludingNaN",
      "info" : "SimpleName[47163-47181]:SimpleName[47229-47247]"
    }, {
      "left" : "float[] x",
      "right" : "float[] x",
      "info" : "SingleVariableDeclaration[47182-47191]:SingleVariableDeclaration[47248-47257]"
    }, {
      "left" : "float[] y",
      "right" : "float[] y",
      "info" : "SingleVariableDeclaration[47193-47202]:SingleVariableDeclaration[47259-47268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47204-47565]:Block[47270-47631]"
    }, {
      "left" : "if ((x == null) || (y == null))",
      "right" : "if ((x == null) || (y == null))",
      "info" : "IfStatement[47214-47306]:IfStatement[47280-47372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47246-47306]:Block[47312-47372]"
    }, {
      "left" : "return !((x == null) ^ (y == null));",
      "right" : "return !((x == null) ^ (y == null));",
      "info" : "ReturnStatement[47260-47296]:ReturnStatement[47326-47362]"
    }, {
      "left" : "if (x.length != y.length)",
      "right" : "if (x.length != y.length)",
      "info" : "IfStatement[47315-47378]:IfStatement[47381-47444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47341-47378]:Block[47407-47444]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47355-47368]:ReturnStatement[47421-47434]"
    }, {
      "left" : "for (int i = 0; i < x.length; ++i)",
      "right" : "for (int i = 0; i < x.length; ++i)",
      "info" : "ForStatement[47387-47538]:ForStatement[47453-47604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47422-47538]:Block[47488-47604]"
    }, {
      "left" : "if (!Precision.equalsIncludingNaN(x[i], y[i]))",
      "right" : "if (!Precision.equalsIncludingNaN(x[i], y[i]))",
      "info" : "IfStatement[47436-47528]:IfStatement[47502-47594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47483-47528]:Block[47549-47594]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47501-47514]:ReturnStatement[47567-47580]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[47547-47559]:ReturnStatement[47613-47625]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[47957-47963]:Modifier[48023-48029]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[47964-47970]:Modifier[48030-48036]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[47971-47978]:PrimitiveType[48037-48044]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[47979-47985]:SimpleName[48045-48051]"
    }, {
      "left" : "double[] x",
      "right" : "double[] x",
      "info" : "SingleVariableDeclaration[47986-47996]:SingleVariableDeclaration[48052-48062]"
    }, {
      "left" : "double[] y",
      "right" : "double[] y",
      "info" : "SingleVariableDeclaration[47998-48008]:SingleVariableDeclaration[48064-48074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48010-48359]:Block[48076-48425]"
    }, {
      "left" : "if ((x == null) || (y == null))",
      "right" : "if ((x == null) || (y == null))",
      "info" : "IfStatement[48020-48112]:IfStatement[48086-48178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48052-48112]:Block[48118-48178]"
    }, {
      "left" : "return !((x == null) ^ (y == null));",
      "right" : "return !((x == null) ^ (y == null));",
      "info" : "ReturnStatement[48066-48102]:ReturnStatement[48132-48168]"
    }, {
      "left" : "if (x.length != y.length)",
      "right" : "if (x.length != y.length)",
      "info" : "IfStatement[48121-48184]:IfStatement[48187-48250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48147-48184]:Block[48213-48250]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[48161-48174]:ReturnStatement[48227-48240]"
    }, {
      "left" : "for (int i = 0; i < x.length; ++i)",
      "right" : "for (int i = 0; i < x.length; ++i)",
      "info" : "ForStatement[48193-48332]:ForStatement[48259-48398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48228-48332]:Block[48294-48398]"
    }, {
      "left" : "if (!Precision.equals(x[i], y[i]))",
      "right" : "if (!Precision.equals(x[i], y[i]))",
      "info" : "IfStatement[48242-48322]:IfStatement[48308-48388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48277-48322]:Block[48343-48388]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[48295-48308]:ReturnStatement[48361-48374]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[48341-48353]:ReturnStatement[48407-48419]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[48793-48799]:Modifier[48859-48865]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[48800-48806]:Modifier[48866-48872]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[48807-48814]:PrimitiveType[48873-48880]"
    }, {
      "left" : "equalsIncludingNaN",
      "right" : "equalsIncludingNaN",
      "info" : "SimpleName[48815-48833]:SimpleName[48881-48899]"
    }, {
      "left" : "double[] x",
      "right" : "double[] x",
      "info" : "SingleVariableDeclaration[48834-48844]:SingleVariableDeclaration[48900-48910]"
    }, {
      "left" : "double[] y",
      "right" : "double[] y",
      "info" : "SingleVariableDeclaration[48846-48856]:SingleVariableDeclaration[48912-48922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48858-49219]:Block[48924-49285]"
    }, {
      "left" : "if ((x == null) || (y == null))",
      "right" : "if ((x == null) || (y == null))",
      "info" : "IfStatement[48868-48960]:IfStatement[48934-49026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48900-48960]:Block[48966-49026]"
    }, {
      "left" : "return !((x == null) ^ (y == null));",
      "right" : "return !((x == null) ^ (y == null));",
      "info" : "ReturnStatement[48914-48950]:ReturnStatement[48980-49016]"
    }, {
      "left" : "if (x.length != y.length)",
      "right" : "if (x.length != y.length)",
      "info" : "IfStatement[48969-49032]:IfStatement[49035-49098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48995-49032]:Block[49061-49098]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[49009-49022]:ReturnStatement[49075-49088]"
    }, {
      "left" : "for (int i = 0; i < x.length; ++i)",
      "right" : "for (int i = 0; i < x.length; ++i)",
      "info" : "ForStatement[49041-49192]:ForStatement[49107-49258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49076-49192]:Block[49142-49258]"
    }, {
      "left" : "if (!Precision.equalsIncludingNaN(x[i], y[i]))",
      "right" : "if (!Precision.equalsIncludingNaN(x[i], y[i]))",
      "info" : "IfStatement[49090-49182]:IfStatement[49156-49248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49137-49182]:Block[49203-49248]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[49155-49168]:ReturnStatement[49221-49234]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[49201-49213]:ReturnStatement[49267-49279]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[50245-50251]:Modifier[50311-50317]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[50252-50258]:Modifier[50318-50324]"
    }, {
      "left" : "double[]",
      "right" : "double[]",
      "info" : "ArrayType[50259-50267]:ArrayType[50325-50333]"
    }, {
      "left" : "normalizeArray",
      "right" : "normalizeArray",
      "info" : "SimpleName[50268-50282]:SimpleName[50334-50348]"
    }, {
      "left" : "double[] values",
      "right" : "double[] values",
      "info" : "SingleVariableDeclaration[50283-50298]:SingleVariableDeclaration[50349-50364]"
    }, {
      "left" : "double normalizedSum",
      "right" : "double normalizedSum",
      "info" : "SingleVariableDeclaration[50300-50320]:SingleVariableDeclaration[50366-50386]"
    }, {
      "left" : "MathIllegalArgumentException",
      "right" : "MathIllegalArgumentException",
      "info" : "SimpleType[50338-50366]:SimpleType[50404-50432]"
    }, {
      "left" : "MathArithmeticException",
      "right" : "MathArithmeticException",
      "info" : "SimpleType[50368-50391]:SimpleType[50434-50457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50392-51492]:Block[50458-51558]"
    }, {
      "left" : "if (Double.isInfinite(normalizedSum))",
      "right" : "if (Double.isInfinite(normalizedSum))",
      "info" : "IfStatement[50403-50543]:IfStatement[50469-50609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50441-50543]:Block[50507-50609]"
    }, {
      "left" : "throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);",
      "right" : "throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);",
      "info" : "ThrowStatement[50456-50532]:ThrowStatement[50522-50598]"
    }, {
      "left" : "if (Double.isNaN(normalizedSum))",
      "right" : "if (Double.isNaN(normalizedSum))",
      "info" : "IfStatement[50553-50683]:IfStatement[50619-50749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50586-50683]:Block[50652-50749]"
    }, {
      "left" : "throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);",
      "right" : "throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);",
      "info" : "ThrowStatement[50601-50672]:ThrowStatement[50667-50738]"
    }, {
      "left" : "double sum = 0d;",
      "right" : "double sum = 0d;",
      "info" : "VariableDeclarationStatement[50693-50709]:VariableDeclarationStatement[50759-50775]"
    }, {
      "left" : "final int len = values.length;",
      "right" : "final int len = values.length;",
      "info" : "VariableDeclarationStatement[50719-50749]:VariableDeclarationStatement[50785-50815]"
    }, {
      "left" : "double[] out = new double[len];",
      "right" : "double[] out = new double[len];",
      "info" : "VariableDeclarationStatement[50759-50790]:VariableDeclarationStatement[50825-50856]"
    }, {
      "left" : "for (int i = 0; i < len; i++)",
      "right" : "for (int i = 0; i < len; i++)",
      "info" : "ForStatement[50800-51113]:ForStatement[50866-51179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50830-51113]:Block[50896-51179]"
    }, {
      "left" : "if (Double.isInfinite(values[i]))",
      "right" : "if (Double.isInfinite(values[i]))",
      "info" : "IfStatement[50845-51007]:IfStatement[50911-51073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50879-51007]:Block[50945-51073]"
    }, {
      "left" : "throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);",
      "right" : "throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);",
      "info" : "ThrowStatement[50898-50992]:ThrowStatement[50964-51058]"
    }, {
      "left" : "if (!Double.isNaN(values[i]))",
      "right" : "if (!Double.isNaN(values[i]))",
      "info" : "IfStatement[51021-51102]:IfStatement[51087-51168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51051-51102]:Block[51117-51168]"
    }, {
      "left" : "sum += values[i];",
      "right" : "sum += values[i];",
      "info" : "ExpressionStatement[51070-51087]:ExpressionStatement[51136-51153]"
    }, {
      "left" : "if (sum == 0)",
      "right" : "if (sum == 0)",
      "info" : "IfStatement[51123-51234]:IfStatement[51189-51300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51137-51234]:Block[51203-51300]"
    }, {
      "left" : "throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);",
      "right" : "throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);",
      "info" : "ThrowStatement[51152-51223]:ThrowStatement[51218-51289]"
    }, {
      "left" : "for (int i = 0; i < len; i++)",
      "right" : "for (int i = 0; i < len; i++)",
      "info" : "ForStatement[51244-51464]:ForStatement[51310-51530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51274-51464]:Block[51340-51530]"
    }, {
      "left" : "if (Double.isNaN(values[i]))",
      "right" : "if (Double.isNaN(values[i]))",
      "info" : "IfStatement[51289-51453]:IfStatement[51355-51519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51318-51372]:Block[51384-51438]"
    }, {
      "left" : "out[i] = Double.NaN;",
      "right" : "out[i] = Double.NaN;",
      "info" : "ExpressionStatement[51337-51357]:ExpressionStatement[51403-51423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51378-51453]:Block[51444-51519]"
    }, {
      "left" : "out[i] = values[i] * normalizedSum / sum;",
      "right" : "out[i] = values[i] * normalizedSum / sum;",
      "info" : "ExpressionStatement[51397-51438]:ExpressionStatement[51463-51504]"
    }, {
      "left" : "return out;",
      "right" : "return out;",
      "info" : "ReturnStatement[51474-51485]:ReturnStatement[51540-51551]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[51807-51813]:Modifier[51873-51879]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[51814-51820]:Modifier[51880-51886]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[51822-51823]:TypeParameter[51888-51889]"
    }, {
      "left" : "T[]",
      "right" : "T[]",
      "info" : "ArrayType[51825-51828]:ArrayType[51891-51894]"
    }, {
      "left" : "buildArray",
      "right" : "buildArray",
      "info" : "SimpleName[51829-51839]:SimpleName[51895-51905]"
    }, {
      "left" : "final Field<T> field",
      "right" : "final Field<T> field",
      "info" : "SingleVariableDeclaration[51840-51860]:SingleVariableDeclaration[51906-51926]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[51862-51878]:SingleVariableDeclaration[51928-51944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51880-52118]:Block[51946-52184]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\") // OK because field must be correct class\n         T[] array = (T[]) Array.newInstance(field.getRuntimeClass(), length);",
      "right" : "@SuppressWarnings(\"unchecked\") // OK because field must be correct class\n         T[] array = (T[]) Array.newInstance(field.getRuntimeClass(), length);",
      "info" : "VariableDeclarationStatement[51891-52042]:VariableDeclarationStatement[51957-52108]"
    }, {
      "left" : "Arrays.fill(array, field.getZero());",
      "right" : "Arrays.fill(array, field.getZero());",
      "info" : "ExpressionStatement[52052-52088]:ExpressionStatement[52118-52154]"
    }, {
      "left" : "return array;",
      "right" : "return array;",
      "info" : "ReturnStatement[52098-52111]:ReturnStatement[52164-52177]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[52607-52637]:SingleMemberAnnotation[52673-52703]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[52642-52648]:Modifier[52708-52714]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[52649-52655]:Modifier[52715-52721]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[52657-52658]:TypeParameter[52723-52724]"
    }, {
      "left" : "T[][]",
      "right" : "T[][]",
      "info" : "ArrayType[52660-52665]:ArrayType[52726-52731]"
    }, {
      "left" : "buildArray",
      "right" : "buildArray",
      "info" : "SimpleName[52666-52676]:SimpleName[52732-52742]"
    }, {
      "left" : "final Field<T> field",
      "right" : "final Field<T> field",
      "info" : "SingleVariableDeclaration[52677-52697]:SingleVariableDeclaration[52743-52763]"
    }, {
      "left" : "final int rows",
      "right" : "final int rows",
      "info" : "SingleVariableDeclaration[52699-52713]:SingleVariableDeclaration[52765-52779]"
    }, {
      "left" : "final int columns",
      "right" : "final int columns",
      "info" : "SingleVariableDeclaration[52715-52732]:SingleVariableDeclaration[52781-52798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52734-53340]:Block[52800-53406]"
    }, {
      "left" : "final T[][] array;",
      "right" : "final T[][] array;",
      "info" : "VariableDeclarationStatement[52745-52763]:VariableDeclarationStatement[52811-52829]"
    }, {
      "left" : "if (columns < 0)",
      "right" : "if (columns < 0)",
      "info" : "IfStatement[52773-53310]:IfStatement[52839-53376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52790-52927]:Block[52856-52993]"
    }, {
      "left" : "T[] dummyRow = buildArray(field, 0);",
      "right" : "T[] dummyRow = buildArray(field, 0);",
      "info" : "VariableDeclarationStatement[52805-52841]:VariableDeclarationStatement[52871-52907]"
    }, {
      "left" : "array = (T[][]) Array.newInstance(dummyRow.getClass(), rows);",
      "right" : "array = (T[][]) Array.newInstance(dummyRow.getClass(), rows);",
      "info" : "ExpressionStatement[52855-52916]:ExpressionStatement[52921-52982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52933-53310]:Block[52999-53376]"
    }, {
      "left" : "array = (T[][]) Array.newInstance(field.getRuntimeClass(),\n                                               new int[] {\n                                                   rows, columns\n                                               });",
      "right" : "array = (T[][]) Array.newInstance(field.getRuntimeClass(),\n                                               new int[] {\n                                                   rows, columns\n                                               });",
      "info" : "ExpressionStatement[52948-53181]:ExpressionStatement[53014-53247]"
    }, {
      "left" : "for (int i = 0; i < rows; ++i)",
      "right" : "for (int i = 0; i < rows; ++i)",
      "info" : "ForStatement[53195-53299]:ForStatement[53261-53365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53226-53299]:Block[53292-53365]"
    }, {
      "left" : "Arrays.fill(array[i], field.getZero());",
      "right" : "Arrays.fill(array[i], field.getZero());",
      "info" : "ExpressionStatement[53245-53284]:ExpressionStatement[53311-53350]"
    }, {
      "left" : "return array;",
      "right" : "return array;",
      "info" : "ReturnStatement[53320-53333]:ReturnStatement[53386-53399]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[54332-54338]:Modifier[54398-54404]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[54339-54345]:Modifier[54405-54411]"
    }, {
      "left" : "double[]",
      "right" : "double[]",
      "info" : "ArrayType[54346-54354]:ArrayType[54412-54420]"
    }, {
      "left" : "convolve",
      "right" : "convolve",
      "info" : "SimpleName[54355-54363]:SimpleName[54421-54429]"
    }, {
      "left" : "double[] x",
      "right" : "double[] x",
      "info" : "SingleVariableDeclaration[54364-54374]:SingleVariableDeclaration[54430-54440]"
    }, {
      "left" : "double[] h",
      "right" : "double[] h",
      "info" : "SingleVariableDeclaration[54376-54386]:SingleVariableDeclaration[54442-54452]"
    }, {
      "left" : "NullArgumentException",
      "right" : "NullArgumentException",
      "info" : "SimpleType[54404-54425]:SimpleType[54470-54491]"
    }, {
      "left" : "NoDataException",
      "right" : "NoDataException",
      "info" : "SimpleType[54443-54458]:SimpleType[54509-54524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54459-55225]:Block[54525-55291]"
    }, {
      "left" : "MathUtils.checkNotNull(x);",
      "right" : "MathUtils.checkNotNull(x);",
      "info" : "ExpressionStatement[54470-54496]:ExpressionStatement[54536-54562]"
    }, {
      "left" : "MathUtils.checkNotNull(h);",
      "right" : "MathUtils.checkNotNull(h);",
      "info" : "ExpressionStatement[54506-54532]:ExpressionStatement[54572-54598]"
    }, {
      "left" : "final int xLen = x.length;",
      "right" : "final int xLen = x.length;",
      "info" : "VariableDeclarationStatement[54543-54569]:VariableDeclarationStatement[54609-54635]"
    }, {
      "left" : "final int hLen = h.length;",
      "right" : "final int hLen = h.length;",
      "info" : "VariableDeclarationStatement[54579-54605]:VariableDeclarationStatement[54645-54671]"
    }, {
      "left" : "if (xLen == 0 || hLen == 0)",
      "right" : "if (xLen == 0 || hLen == 0)",
      "info" : "IfStatement[54616-54698]:IfStatement[54682-54764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54644-54698]:Block[54710-54764]"
    }, {
      "left" : "throw new NoDataException();",
      "right" : "throw new NoDataException();",
      "info" : "ThrowStatement[54659-54687]:ThrowStatement[54725-54753]"
    }, {
      "left" : "final int totalLength = xLen + hLen - 1;",
      "right" : "final int totalLength = xLen + hLen - 1;",
      "info" : "VariableDeclarationStatement[54749-54789]:VariableDeclarationStatement[54815-54855]"
    }, {
      "left" : "final double[] y = new double[totalLength];",
      "right" : "final double[] y = new double[totalLength];",
      "info" : "VariableDeclarationStatement[54799-54842]:VariableDeclarationStatement[54865-54908]"
    }, {
      "left" : "for (int n = 0; n < totalLength; n++)",
      "right" : "for (int n = 0; n < totalLength; n++)",
      "info" : "ForStatement[54919-55198]:ForStatement[54985-55264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54957-55198]:Block[55023-55264]"
    }, {
      "left" : "double yn = 0;",
      "right" : "double yn = 0;",
      "info" : "VariableDeclarationStatement[54972-54986]:VariableDeclarationStatement[55038-55052]"
    }, {
      "left" : "int k = FastMath.max(0, n + 1 - xLen);",
      "right" : "int k = FastMath.max(0, n + 1 - xLen);",
      "info" : "VariableDeclarationStatement[55000-55038]:VariableDeclarationStatement[55066-55104]"
    }, {
      "left" : "int j = n - k;",
      "right" : "int j = n - k;",
      "info" : "VariableDeclarationStatement[55052-55066]:VariableDeclarationStatement[55118-55132]"
    }, {
      "left" : "while (k < hLen && j >= 0)",
      "right" : "while (k < hLen && j >= 0)",
      "info" : "WhileStatement[55080-55163]:WhileStatement[55146-55229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55107-55163]:Block[55173-55229]"
    }, {
      "left" : "yn += x[j--] * h[k++];",
      "right" : "yn += x[j--] * h[k++];",
      "info" : "ExpressionStatement[55126-55148]:ExpressionStatement[55192-55214]"
    }, {
      "left" : "y[n] = yn;",
      "right" : "y[n] = yn;",
      "info" : "ExpressionStatement[55177-55187]:ExpressionStatement[55243-55253]"
    }, {
      "left" : "return y;",
      "right" : "return y;",
      "info" : "ReturnStatement[55209-55218]:ReturnStatement[55275-55284]"
    } ]
  },
  "interFileMappings" : { }
}