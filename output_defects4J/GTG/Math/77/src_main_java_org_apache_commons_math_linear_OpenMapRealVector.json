{
  "matchedElements" : [
 {
    "left" : "class : OpenMapRealVector",
    "right" : "class : OpenMapRealVector",
    "info" : "TypeDeclaration[1057-28688]:TypeDeclaration[1057-28456]"
  }, {
    "left" : "DEFAULT_ZERO_TOLERANCE",
    "right" : "DEFAULT_ZERO_TOLERANCE",
    "info" : "FieldDeclaration[1326-1451]:FieldDeclaration[1326-1451]"
  }, {
    "left" : "serialVersionUID",
    "right" : "serialVersionUID",
    "info" : "FieldDeclaration[1457-1567]:FieldDeclaration[1457-1567]"
  }, {
    "left" : "entries",
    "right" : "entries",
    "info" : "FieldDeclaration[1573-1652]:FieldDeclaration[1573-1652]"
  }, {
    "left" : "virtualSize",
    "right" : "virtualSize",
    "info" : "FieldDeclaration[1658-1724]:FieldDeclaration[1658-1724]"
  }, {
    "left" : "epsilon",
    "right" : "epsilon",
    "info" : "FieldDeclaration[1730-1810]:FieldDeclaration[1730-1810]"
  }, {
    "left" : "public OpenMapRealVector()",
    "right" : "public OpenMapRealVector()",
    "info" : "MethodDeclaration[1816-2342]:MethodDeclaration[1816-2342]"
  }, {
    "left" : "public OpenMapRealVector(dimension int)",
    "right" : "public OpenMapRealVector(dimension int)",
    "info" : "MethodDeclaration[2348-2558]:MethodDeclaration[2348-2558]"
  }, {
    "left" : "public OpenMapRealVector(dimension int, epsilon double)",
    "right" : "public OpenMapRealVector(dimension int, epsilon double)",
    "info" : "MethodDeclaration[2564-2955]:MethodDeclaration[2564-2955]"
  }, {
    "left" : "protected OpenMapRealVector(v , resize int)",
    "right" : "protected OpenMapRealVector(v , resize int)",
    "info" : "MethodDeclaration[2961-3313]:MethodDeclaration[2961-3313]"
  }, {
    "left" : "public OpenMapRealVector(dimension int, expectedSize int)",
    "right" : "public OpenMapRealVector(dimension int, expectedSize int)",
    "info" : "MethodDeclaration[3319-3650]:MethodDeclaration[3319-3650]"
  }, {
    "left" : "public OpenMapRealVector(dimension int, expectedSize int, epsilon double)",
    "right" : "public OpenMapRealVector(dimension int, expectedSize int, epsilon double)",
    "info" : "MethodDeclaration[3656-4168]:MethodDeclaration[3656-4168]"
  }, {
    "left" : "public OpenMapRealVector(values ...)",
    "right" : "public OpenMapRealVector(values ...)",
    "info" : "MethodDeclaration[4174-4418]:MethodDeclaration[4174-4418]"
  }, {
    "left" : "public OpenMapRealVector(values , epsilon double)",
    "right" : "public OpenMapRealVector(values , epsilon double)",
    "info" : "MethodDeclaration[4424-5059]:MethodDeclaration[4424-5059]"
  }, {
    "left" : "public OpenMapRealVector(values ...)",
    "right" : "public OpenMapRealVector(values ...)",
    "info" : "MethodDeclaration[5065-5309]:MethodDeclaration[5065-5309]"
  }, {
    "left" : "public OpenMapRealVector(values , epsilon double)",
    "right" : "public OpenMapRealVector(values , epsilon double)",
    "info" : "MethodDeclaration[5315-5937]:MethodDeclaration[5315-5937]"
  }, {
    "left" : "public OpenMapRealVector(v )",
    "right" : "public OpenMapRealVector(v )",
    "info" : "MethodDeclaration[5943-6210]:MethodDeclaration[5943-6210]"
  }, {
    "left" : "public OpenMapRealVector(v )",
    "right" : "public OpenMapRealVector(v )",
    "info" : "MethodDeclaration[6216-6691]:MethodDeclaration[6216-6691]"
  }, {
    "left" : "private getEntries() : ",
    "right" : "private getEntries() : ",
    "info" : "MethodDeclaration[6697-6869]:MethodDeclaration[6697-6869]"
  }, {
    "left" : "protected isDefaultValue(value double) : boolean",
    "right" : "protected isDefaultValue(value double) : boolean",
    "info" : "MethodDeclaration[6875-7186]:MethodDeclaration[6875-7186]"
  }, {
    "left" : "public add(v ) : ",
    "right" : "public add(v ) : ",
    "info" : "MethodDeclaration[7192-7494]:MethodDeclaration[7192-7494]"
  }, {
    "left" : "public add(v ) : ",
    "right" : "public add(v ) : ",
    "info" : "MethodDeclaration[7500-8547]:MethodDeclaration[7500-8547]"
  }, {
    "left" : "public append(v ) : ",
    "right" : "public append(v ) : ",
    "info" : "MethodDeclaration[8553-9061]:MethodDeclaration[8553-9061]"
  }, {
    "left" : "public append(v ) : ",
    "right" : "public append(v ) : ",
    "info" : "MethodDeclaration[9067-9287]:MethodDeclaration[9067-9287]"
  }, {
    "left" : "public append(d double) : ",
    "right" : "public append(d double) : ",
    "info" : "MethodDeclaration[9293-9489]:MethodDeclaration[9293-9489]"
  }, {
    "left" : "public append(a ) : ",
    "right" : "public append(a ) : ",
    "info" : "MethodDeclaration[9495-9766]:MethodDeclaration[9495-9766]"
  }, {
    "left" : "public copy() : ",
    "right" : "public copy() : ",
    "info" : "MethodDeclaration[9772-9880]:MethodDeclaration[9772-9880]"
  }, {
    "left" : "public dotProduct(v ) : double",
    "right" : "public dotProduct(v ) : double",
    "info" : "MethodDeclaration[9886-10755]:MethodDeclaration[9886-10755]"
  }, {
    "left" : "public dotProduct(v ) : double",
    "right" : "public dotProduct(v ) : double",
    "info" : "MethodDeclaration[10761-11029]:MethodDeclaration[10761-11029]"
  }, {
    "left" : "public ebeDivide(v ) : ",
    "right" : "public ebeDivide(v ) : ",
    "info" : "MethodDeclaration[11035-11474]:MethodDeclaration[11035-11474]"
  }, {
    "left" : "public ebeDivide(v ) : ",
    "right" : "public ebeDivide(v ) : ",
    "info" : "MethodDeclaration[11480-11900]:MethodDeclaration[11480-11900]"
  }, {
    "left" : "public ebeMultiply(v ) : ",
    "right" : "public ebeMultiply(v ) : ",
    "info" : "MethodDeclaration[11906-12347]:MethodDeclaration[11906-12347]"
  }, {
    "left" : "public ebeMultiply(v ) : ",
    "right" : "public ebeMultiply(v ) : ",
    "info" : "MethodDeclaration[12353-12775]:MethodDeclaration[12353-12775]"
  }, {
    "left" : "public getSubVector(index int, n int) : ",
    "right" : "public getSubVector(index int, n int) : ",
    "info" : "MethodDeclaration[12781-13331]:MethodDeclaration[12781-13331]"
  }, {
    "left" : "public getData() : ",
    "right" : "public getData() : ",
    "info" : "MethodDeclaration[13337-13622]:MethodDeclaration[13337-13622]"
  }, {
    "left" : "public getDimension() : int",
    "right" : "public getDimension() : int",
    "info" : "MethodDeclaration[13628-13714]:MethodDeclaration[13628-13714]"
  }, {
    "left" : "public getDistance(v ) : double",
    "right" : "public getDistance(v ) : double",
    "info" : "MethodDeclaration[13720-14668]:MethodDeclaration[13720-14668]"
  }, {
    "left" : "public getDistance(v ) : double",
    "right" : "public getDistance(v ) : double",
    "info" : "MethodDeclaration[14674-14979]:MethodDeclaration[14674-14979]"
  }, {
    "left" : "public getDistance(v ) : double",
    "right" : "public getDistance(v ) : double",
    "info" : "MethodDeclaration[14985-15322]:MethodDeclaration[14985-15322]"
  }, {
    "left" : "public getEntry(index int) : double",
    "right" : "public getEntry(index int) : double",
    "info" : "MethodDeclaration[15328-15484]:MethodDeclaration[15328-15484]"
  }, {
    "left" : "public getL1Distance(v ) : double",
    "right" : "public getL1Distance(v ) : double",
    "info" : "MethodDeclaration[15490-16420]:MethodDeclaration[15490-16420]"
  }, {
    "left" : "public getL1Distance(v ) : double",
    "right" : "public getL1Distance(v ) : double",
    "info" : "MethodDeclaration[16426-16737]:MethodDeclaration[16426-16737]"
  }, {
    "left" : "public getL1Distance(v ) : double",
    "right" : "public getL1Distance(v ) : double",
    "info" : "MethodDeclaration[16743-17070]:MethodDeclaration[16743-17070]"
  }, {
    "left" : "private getLInfDistance(v ) : double",
    "right" : "private getLInfDistance(v ) : double",
    "info" : "MethodDeclaration[17308-18122]:MethodDeclaration[17076-17890]"
  }, {
    "left" : "public getLInfDistance(v ) : double",
    "right" : "public getLInfDistance(v ) : double",
    "info" : "MethodDeclaration[18128-18445]:MethodDeclaration[17896-18213]"
  }, {
    "left" : "public getLInfDistance(v ) : double",
    "right" : "public getLInfDistance(v ) : double",
    "info" : "MethodDeclaration[18451-18828]:MethodDeclaration[18219-18596]"
  }, {
    "left" : "public isInfinite() : boolean",
    "right" : "public isInfinite() : boolean",
    "info" : "MethodDeclaration[18834-19304]:MethodDeclaration[18602-19072]"
  }, {
    "left" : "public isNaN() : boolean",
    "right" : "public isNaN() : boolean",
    "info" : "MethodDeclaration[19310-19591]:MethodDeclaration[19078-19359]"
  }, {
    "left" : "public mapAdd(d double) : ",
    "right" : "public mapAdd(d double) : ",
    "info" : "MethodDeclaration[19597-19710]:MethodDeclaration[19365-19478]"
  }, {
    "left" : "public mapAddToSelf(d double) : ",
    "right" : "public mapAddToSelf(d double) : ",
    "info" : "MethodDeclaration[19716-19917]:MethodDeclaration[19484-19685]"
  }, {
    "left" : "public outerProduct(v ) : ",
    "right" : "public outerProduct(v ) : ",
    "info" : "MethodDeclaration[19924-20484]:MethodDeclaration[19692-20252]"
  }, {
    "left" : "public projection(v ) : ",
    "right" : "public projection(v ) : ",
    "info" : "MethodDeclaration[20490-20709]:MethodDeclaration[20258-20477]"
  }, {
    "left" : "public projection(v ) : ",
    "right" : "public projection(v ) : ",
    "info" : "MethodDeclaration[20715-20941]:MethodDeclaration[20483-20709]"
  }, {
    "left" : "public setEntry(index int, value double) : void",
    "right" : "public setEntry(index int, value double) : void",
    "info" : "MethodDeclaration[20947-21251]:MethodDeclaration[20715-21019]"
  }, {
    "left" : "public setSubVector(index int, v ) : void",
    "right" : "public setSubVector(index int, v ) : void",
    "info" : "MethodDeclaration[21257-21486]:MethodDeclaration[21025-21254]"
  }, {
    "left" : "public setSubVector(index int, v ) : void",
    "right" : "public setSubVector(index int, v ) : void",
    "info" : "MethodDeclaration[21492-21763]:MethodDeclaration[21260-21531]"
  }, {
    "left" : "public set(value double) : void",
    "right" : "public set(value double) : void",
    "info" : "MethodDeclaration[21769-21921]:MethodDeclaration[21537-21689]"
  }, {
    "left" : "public subtract(v ) : ",
    "right" : "public subtract(v ) : ",
    "info" : "MethodDeclaration[21927-22756]:MethodDeclaration[21695-22524]"
  }, {
    "left" : "public subtract(v ) : ",
    "right" : "public subtract(v ) : ",
    "info" : "MethodDeclaration[22762-23069]:MethodDeclaration[22530-22837]"
  }, {
    "left" : "public subtract(v ) : ",
    "right" : "public subtract(v ) : ",
    "info" : "MethodDeclaration[23075-23535]:MethodDeclaration[22843-23303]"
  }, {
    "left" : "public unitVector() : ",
    "right" : "public unitVector() : ",
    "info" : "MethodDeclaration[23542-23695]:MethodDeclaration[23310-23463]"
  }, {
    "left" : "public unitize() : void",
    "right" : "public unitize() : void",
    "info" : "MethodDeclaration[23701-24114]:MethodDeclaration[23469-23882]"
  }, {
    "left" : "public toArray() : ",
    "right" : "public toArray() : ",
    "info" : "MethodDeclaration[24121-24205]:MethodDeclaration[23889-23973]"
  }, {
    "left" : "public hashCode() : int",
    "right" : "public hashCode() : int",
    "info" : "MethodDeclaration[24211-24981]:MethodDeclaration[23979-24749]"
  }, {
    "left" : "public equals(obj ) : boolean",
    "right" : "public equals(obj ) : boolean",
    "info" : "MethodDeclaration[24987-26397]:MethodDeclaration[24755-26165]"
  }, {
    "left" : "public getSparcity() : double",
    "right" : "public getSparcity() : double",
    "info" : "MethodDeclaration[26403-26597]:MethodDeclaration[26171-26365]"
  }, {
    "left" : "public sparseIterator() : ",
    "right" : "public sparseIterator() : ",
    "info" : "MethodDeclaration[26603-26729]:MethodDeclaration[26371-26497]"
  }, {
    "left" : "class : OpenMapEntry",
    "right" : "class : OpenMapEntry",
    "info" : "TypeDeclaration[26735-27718]:TypeDeclaration[26503-27486]"
  }, {
    "left" : "iter",
    "right" : "iter",
    "info" : "FieldDeclaration[27022-27097]:FieldDeclaration[26790-26865]"
  }, {
    "left" : "protected OpenMapEntry(iter )",
    "right" : "protected OpenMapEntry(iter )",
    "info" : "MethodDeclaration[27107-27317]:MethodDeclaration[26875-27085]"
  }, {
    "left" : "public getValue() : double",
    "right" : "public getValue() : double",
    "info" : "MethodDeclaration[27327-27443]:MethodDeclaration[27095-27211]"
  }, {
    "left" : "public setValue(value double) : void",
    "right" : "public setValue(value double) : void",
    "info" : "MethodDeclaration[27453-27590]:MethodDeclaration[27221-27358]"
  }, {
    "left" : "public getIndex() : int",
    "right" : "public getIndex() : int",
    "info" : "MethodDeclaration[27600-27711]:MethodDeclaration[27368-27479]"
  }, {
    "left" : "class : OpenMapSparseIterator",
    "right" : "class : OpenMapSparseIterator",
    "info" : "TypeDeclaration[27724-28686]:TypeDeclaration[27492-28454]"
  }, {
    "left" : "iter",
    "right" : "iter",
    "info" : "FieldDeclaration[27996-28060]:FieldDeclaration[27764-27828]"
  }, {
    "left" : "current",
    "right" : "current",
    "info" : "FieldDeclaration[28070-28128]:FieldDeclaration[27838-27896]"
  }, {
    "left" : "protected OpenMapSparseIterator()",
    "right" : "protected OpenMapSparseIterator()",
    "info" : "MethodDeclaration[28138-28303]:MethodDeclaration[27906-28071]"
  }, {
    "left" : "public hasNext() : boolean",
    "right" : "public hasNext() : boolean",
    "info" : "MethodDeclaration[28313-28413]:MethodDeclaration[28081-28181]"
  }, {
    "left" : "public next() : ",
    "right" : "public next() : ",
    "info" : "MethodDeclaration[28423-28539]:MethodDeclaration[28191-28307]"
  }, {
    "left" : "public remove() : void",
    "right" : "public remove() : void",
    "info" : "MethodDeclaration[28549-28679]:MethodDeclaration[28317-28447]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2267-2273]:Modifier[2267-2273]"
  }, {
    "left" : "OpenMapRealVector",
    "right" : "OpenMapRealVector",
    "info" : "SimpleName[2274-2291]:SimpleName[2274-2291]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2294-2342]:Block[2294-2342]"
  }, {
    "left" : "this(0, DEFAULT_ZERO_TOLERANCE);",
    "right" : "this(0, DEFAULT_ZERO_TOLERANCE);",
    "info" : "ConstructorInvocation[2304-2336]:ConstructorInvocation[2304-2336]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2462-2468]:Modifier[2462-2468]"
  }, {
    "left" : "OpenMapRealVector",
    "right" : "OpenMapRealVector",
    "info" : "SimpleName[2469-2486]:SimpleName[2469-2486]"
  }, {
    "left" : "int dimension",
    "right" : "int dimension",
    "info" : "SingleVariableDeclaration[2487-2500]:SingleVariableDeclaration[2487-2500]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2502-2558]:Block[2502-2558]"
  }, {
    "left" : "this(dimension, DEFAULT_ZERO_TOLERANCE);",
    "right" : "this(dimension, DEFAULT_ZERO_TOLERANCE);",
    "info" : "ConstructorInvocation[2512-2552]:ConstructorInvocation[2512-2552]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2776-2782]:Modifier[2776-2782]"
  }, {
    "left" : "OpenMapRealVector",
    "right" : "OpenMapRealVector",
    "info" : "SimpleName[2783-2800]:SimpleName[2783-2800]"
  }, {
    "left" : "int dimension",
    "right" : "int dimension",
    "info" : "SingleVariableDeclaration[2801-2814]:SingleVariableDeclaration[2801-2814]"
  }, {
    "left" : "double epsilon",
    "right" : "double epsilon",
    "info" : "SingleVariableDeclaration[2816-2830]:SingleVariableDeclaration[2816-2830]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2832-2955]:Block[2832-2955]"
  }, {
    "left" : "virtualSize = dimension;",
    "right" : "virtualSize = dimension;",
    "info" : "ExpressionStatement[2842-2866]:ExpressionStatement[2842-2866]"
  }, {
    "left" : "entries = new OpenIntToDoubleHashMap(0.0);",
    "right" : "entries = new OpenIntToDoubleHashMap(0.0);",
    "info" : "ExpressionStatement[2875-2917]:ExpressionStatement[2875-2917]"
  }, {
    "left" : "this.epsilon = epsilon;",
    "right" : "this.epsilon = epsilon;",
    "info" : "ExpressionStatement[2926-2949]:ExpressionStatement[2926-2949]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[3110-3119]:Modifier[3110-3119]"
  }, {
    "left" : "OpenMapRealVector",
    "right" : "OpenMapRealVector",
    "info" : "SimpleName[3120-3137]:SimpleName[3120-3137]"
  }, {
    "left" : "OpenMapRealVector v",
    "right" : "OpenMapRealVector v",
    "info" : "SingleVariableDeclaration[3138-3157]:SingleVariableDeclaration[3138-3157]"
  }, {
    "left" : "int resize",
    "right" : "int resize",
    "info" : "SingleVariableDeclaration[3159-3169]:SingleVariableDeclaration[3159-3169]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3171-3313]:Block[3171-3313]"
  }, {
    "left" : "virtualSize = v.getDimension() + resize;",
    "right" : "virtualSize = v.getDimension() + resize;",
    "info" : "ExpressionStatement[3181-3221]:ExpressionStatement[3181-3221]"
  }, {
    "left" : "entries = new OpenIntToDoubleHashMap(v.entries);",
    "right" : "entries = new OpenIntToDoubleHashMap(v.entries);",
    "info" : "ExpressionStatement[3230-3278]:ExpressionStatement[3230-3278]"
  }, {
    "left" : "epsilon = v.epsilon;",
    "right" : "epsilon = v.epsilon;",
    "info" : "ExpressionStatement[3287-3307]:ExpressionStatement[3287-3307]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3522-3528]:Modifier[3522-3528]"
  }, {
    "left" : "OpenMapRealVector",
    "right" : "OpenMapRealVector",
    "info" : "SimpleName[3529-3546]:SimpleName[3529-3546]"
  }, {
    "left" : "int dimension",
    "right" : "int dimension",
    "info" : "SingleVariableDeclaration[3547-3560]:SingleVariableDeclaration[3547-3560]"
  }, {
    "left" : "int expectedSize",
    "right" : "int expectedSize",
    "info" : "SingleVariableDeclaration[3562-3578]:SingleVariableDeclaration[3562-3578]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3580-3650]:Block[3580-3650]"
  }, {
    "left" : "this(dimension, expectedSize, DEFAULT_ZERO_TOLERANCE);",
    "right" : "this(dimension, expectedSize, DEFAULT_ZERO_TOLERANCE);",
    "info" : "ConstructorInvocation[3590-3644]:ConstructorInvocation[3590-3644]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3957-3963]:Modifier[3957-3963]"
  }, {
    "left" : "OpenMapRealVector",
    "right" : "OpenMapRealVector",
    "info" : "SimpleName[3964-3981]:SimpleName[3964-3981]"
  }, {
    "left" : "int dimension",
    "right" : "int dimension",
    "info" : "SingleVariableDeclaration[3982-3995]:SingleVariableDeclaration[3982-3995]"
  }, {
    "left" : "int expectedSize",
    "right" : "int expectedSize",
    "info" : "SingleVariableDeclaration[3997-4013]:SingleVariableDeclaration[3997-4013]"
  }, {
    "left" : "double epsilon",
    "right" : "double epsilon",
    "info" : "SingleVariableDeclaration[4015-4029]:SingleVariableDeclaration[4015-4029]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4031-4168]:Block[4031-4168]"
  }, {
    "left" : "virtualSize = dimension;",
    "right" : "virtualSize = dimension;",
    "info" : "ExpressionStatement[4041-4065]:ExpressionStatement[4041-4065]"
  }, {
    "left" : "entries = new OpenIntToDoubleHashMap(expectedSize, 0.0);",
    "right" : "entries = new OpenIntToDoubleHashMap(expectedSize, 0.0);",
    "info" : "ExpressionStatement[4074-4130]:ExpressionStatement[4074-4130]"
  }, {
    "left" : "this.epsilon = epsilon;",
    "right" : "this.epsilon = epsilon;",
    "info" : "ExpressionStatement[4139-4162]:ExpressionStatement[4139-4162]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4323-4329]:Modifier[4323-4329]"
  }, {
    "left" : "OpenMapRealVector",
    "right" : "OpenMapRealVector",
    "info" : "SimpleName[4330-4347]:SimpleName[4330-4347]"
  }, {
    "left" : "double[] values",
    "right" : "double[] values",
    "info" : "SingleVariableDeclaration[4348-4363]:SingleVariableDeclaration[4348-4363]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4365-4418]:Block[4365-4418]"
  }, {
    "left" : "this(values, DEFAULT_ZERO_TOLERANCE);",
    "right" : "this(values, DEFAULT_ZERO_TOLERANCE);",
    "info" : "ConstructorInvocation[4375-4412]:ConstructorInvocation[4375-4412]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4671-4677]:Modifier[4671-4677]"
  }, {
    "left" : "OpenMapRealVector",
    "right" : "OpenMapRealVector",
    "info" : "SimpleName[4678-4695]:SimpleName[4678-4695]"
  }, {
    "left" : "double[] values",
    "right" : "double[] values",
    "info" : "SingleVariableDeclaration[4696-4711]:SingleVariableDeclaration[4696-4711]"
  }, {
    "left" : "double epsilon",
    "right" : "double epsilon",
    "info" : "SingleVariableDeclaration[4713-4727]:SingleVariableDeclaration[4713-4727]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4729-5059]:Block[4729-5059]"
  }, {
    "left" : "virtualSize = values.length;",
    "right" : "virtualSize = values.length;",
    "info" : "ExpressionStatement[4739-4767]:ExpressionStatement[4739-4767]"
  }, {
    "left" : "entries = new OpenIntToDoubleHashMap(0.0);",
    "right" : "entries = new OpenIntToDoubleHashMap(0.0);",
    "info" : "ExpressionStatement[4776-4818]:ExpressionStatement[4776-4818]"
  }, {
    "left" : "this.epsilon = epsilon;",
    "right" : "this.epsilon = epsilon;",
    "info" : "ExpressionStatement[4827-4850]:ExpressionStatement[4827-4850]"
  }, {
    "left" : "for (int key = 0; key < values.length; key++)",
    "right" : "for (int key = 0; key < values.length; key++)",
    "info" : "ForStatement[4859-5053]:ForStatement[4859-5053]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4905-5053]:Block[4905-5053]"
  }, {
    "left" : "double value = values[key];",
    "right" : "double value = values[key];",
    "info" : "VariableDeclarationStatement[4919-4946]:VariableDeclarationStatement[4919-4946]"
  }, {
    "left" : "if (!isDefaultValue(value))",
    "right" : "if (!isDefaultValue(value))",
    "info" : "IfStatement[4959-5043]:IfStatement[4959-5043]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4987-5043]:Block[4987-5043]"
  }, {
    "left" : "entries.put(key, value);",
    "right" : "entries.put(key, value);",
    "info" : "ExpressionStatement[5005-5029]:ExpressionStatement[5005-5029]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5214-5220]:Modifier[5214-5220]"
  }, {
    "left" : "OpenMapRealVector",
    "right" : "OpenMapRealVector",
    "info" : "SimpleName[5221-5238]:SimpleName[5221-5238]"
  }, {
    "left" : "Double[] values",
    "right" : "Double[] values",
    "info" : "SingleVariableDeclaration[5239-5254]:SingleVariableDeclaration[5239-5254]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5256-5309]:Block[5256-5309]"
  }, {
    "left" : "this(values, DEFAULT_ZERO_TOLERANCE);",
    "right" : "this(values, DEFAULT_ZERO_TOLERANCE);",
    "info" : "ConstructorInvocation[5266-5303]:ConstructorInvocation[5266-5303]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5535-5541]:Modifier[5535-5541]"
  }, {
    "left" : "OpenMapRealVector",
    "right" : "OpenMapRealVector",
    "info" : "SimpleName[5542-5559]:SimpleName[5542-5559]"
  }, {
    "left" : "Double[] values",
    "right" : "Double[] values",
    "info" : "SingleVariableDeclaration[5560-5575]:SingleVariableDeclaration[5560-5575]"
  }, {
    "left" : "double epsilon",
    "right" : "double epsilon",
    "info" : "SingleVariableDeclaration[5577-5591]:SingleVariableDeclaration[5577-5591]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5593-5937]:Block[5593-5937]"
  }, {
    "left" : "virtualSize = values.length;",
    "right" : "virtualSize = values.length;",
    "info" : "ExpressionStatement[5603-5631]:ExpressionStatement[5603-5631]"
  }, {
    "left" : "entries = new OpenIntToDoubleHashMap(0.0);",
    "right" : "entries = new OpenIntToDoubleHashMap(0.0);",
    "info" : "ExpressionStatement[5640-5682]:ExpressionStatement[5640-5682]"
  }, {
    "left" : "this.epsilon = epsilon;",
    "right" : "this.epsilon = epsilon;",
    "info" : "ExpressionStatement[5691-5714]:ExpressionStatement[5691-5714]"
  }, {
    "left" : "for (int key = 0; key < values.length; key++)",
    "right" : "for (int key = 0; key < values.length; key++)",
    "info" : "ForStatement[5723-5931]:ForStatement[5723-5931]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5769-5931]:Block[5769-5931]"
  }, {
    "left" : "double value = values[key].doubleValue();",
    "right" : "double value = values[key].doubleValue();",
    "info" : "VariableDeclarationStatement[5783-5824]:VariableDeclarationStatement[5783-5824]"
  }, {
    "left" : "if (!isDefaultValue(value))",
    "right" : "if (!isDefaultValue(value))",
    "info" : "IfStatement[5837-5921]:IfStatement[5837-5921]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5865-5921]:Block[5865-5921]"
  }, {
    "left" : "entries.put(key, value);",
    "right" : "entries.put(key, value);",
    "info" : "ExpressionStatement[5883-5907]:ExpressionStatement[5883-5907]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6026-6032]:Modifier[6026-6032]"
  }, {
    "left" : "OpenMapRealVector",
    "right" : "OpenMapRealVector",
    "info" : "SimpleName[6033-6050]:SimpleName[6033-6050]"
  }, {
    "left" : "OpenMapRealVector v",
    "right" : "OpenMapRealVector v",
    "info" : "SingleVariableDeclaration[6051-6070]:SingleVariableDeclaration[6051-6070]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6072-6210]:Block[6072-6210]"
  }, {
    "left" : "virtualSize = v.getDimension();",
    "right" : "virtualSize = v.getDimension();",
    "info" : "ExpressionStatement[6082-6113]:ExpressionStatement[6082-6113]"
  }, {
    "left" : "entries = new OpenIntToDoubleHashMap(v.getEntries());",
    "right" : "entries = new OpenIntToDoubleHashMap(v.getEntries());",
    "info" : "ExpressionStatement[6122-6175]:ExpressionStatement[6122-6175]"
  }, {
    "left" : "epsilon = v.epsilon;",
    "right" : "epsilon = v.epsilon;",
    "info" : "ExpressionStatement[6184-6204]:ExpressionStatement[6184-6204]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6307-6313]:Modifier[6307-6313]"
  }, {
    "left" : "OpenMapRealVector",
    "right" : "OpenMapRealVector",
    "info" : "SimpleName[6314-6331]:SimpleName[6314-6331]"
  }, {
    "left" : "RealVector v",
    "right" : "RealVector v",
    "info" : "SingleVariableDeclaration[6332-6344]:SingleVariableDeclaration[6332-6344]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6346-6691]:Block[6346-6691]"
  }, {
    "left" : "virtualSize = v.getDimension();",
    "right" : "virtualSize = v.getDimension();",
    "info" : "ExpressionStatement[6356-6387]:ExpressionStatement[6356-6387]"
  }, {
    "left" : "entries = new OpenIntToDoubleHashMap(0.0);",
    "right" : "entries = new OpenIntToDoubleHashMap(0.0);",
    "info" : "ExpressionStatement[6396-6438]:ExpressionStatement[6396-6438]"
  }, {
    "left" : "epsilon = DEFAULT_ZERO_TOLERANCE;",
    "right" : "epsilon = DEFAULT_ZERO_TOLERANCE;",
    "info" : "ExpressionStatement[6447-6480]:ExpressionStatement[6447-6480]"
  }, {
    "left" : "for (int key = 0; key < virtualSize; key++)",
    "right" : "for (int key = 0; key < virtualSize; key++)",
    "info" : "ForStatement[6489-6685]:ForStatement[6489-6685]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6533-6685]:Block[6533-6685]"
  }, {
    "left" : "double value = v.getEntry(key);",
    "right" : "double value = v.getEntry(key);",
    "info" : "VariableDeclarationStatement[6547-6578]:VariableDeclarationStatement[6547-6578]"
  }, {
    "left" : "if (!isDefaultValue(value))",
    "right" : "if (!isDefaultValue(value))",
    "info" : "IfStatement[6591-6675]:IfStatement[6591-6675]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6619-6675]:Block[6619-6675]"
  }, {
    "left" : "entries.put(key, value);",
    "right" : "entries.put(key, value);",
    "info" : "ExpressionStatement[6637-6661]:ExpressionStatement[6637-6661]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6794-6801]:Modifier[6794-6801]"
  }, {
    "left" : "OpenIntToDoubleHashMap",
    "right" : "OpenIntToDoubleHashMap",
    "info" : "SimpleType[6802-6824]:SimpleType[6802-6824]"
  }, {
    "left" : "getEntries",
    "right" : "getEntries",
    "info" : "SimpleName[6825-6835]:SimpleName[6825-6835]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6838-6869]:Block[6838-6869]"
  }, {
    "left" : "return entries;",
    "right" : "return entries;",
    "info" : "ReturnStatement[6848-6863]:ReturnStatement[6848-6863]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[7090-7099]:Modifier[7090-7099]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[7100-7107]:PrimitiveType[7100-7107]"
  }, {
    "left" : "isDefaultValue",
    "right" : "isDefaultValue",
    "info" : "SimpleName[7108-7122]:SimpleName[7108-7122]"
  }, {
    "left" : "double value",
    "right" : "double value",
    "info" : "SingleVariableDeclaration[7123-7135]:SingleVariableDeclaration[7123-7135]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7137-7186]:Block[7137-7186]"
  }, {
    "left" : "return Math.abs(value) < epsilon;",
    "right" : "return Math.abs(value) < epsilon;",
    "info" : "ReturnStatement[7147-7180]:ReturnStatement[7147-7180]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7217-7223]:Modifier[7217-7223]"
  }, {
    "left" : "RealVector",
    "right" : "RealVector",
    "info" : "SimpleType[7224-7234]:SimpleType[7224-7234]"
  }, {
    "left" : "add",
    "right" : "add",
    "info" : "SimpleName[7235-7238]:SimpleName[7235-7238]"
  }, {
    "left" : "RealVector v",
    "right" : "RealVector v",
    "info" : "SingleVariableDeclaration[7239-7251]:SingleVariableDeclaration[7239-7251]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[7260-7284]:SimpleType[7260-7284]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7285-7494]:Block[7285-7494]"
  }, {
    "left" : "checkVectorDimensions(v.getDimension());",
    "right" : "checkVectorDimensions(v.getDimension());",
    "info" : "ExpressionStatement[7295-7335]:ExpressionStatement[7295-7335]"
  }, {
    "left" : "if (v instanceof OpenMapRealVector)",
    "right" : "if (v instanceof OpenMapRealVector)",
    "info" : "IfStatement[7344-7488]:IfStatement[7344-7488]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7380-7438]:Block[7380-7438]"
  }, {
    "left" : "return add((OpenMapRealVector) v);",
    "right" : "return add((OpenMapRealVector) v);",
    "info" : "ReturnStatement[7394-7428]:ReturnStatement[7394-7428]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7444-7488]:Block[7444-7488]"
  }, {
    "left" : "return super.add(v);",
    "right" : "return super.add(v);",
    "info" : "ReturnStatement[7458-7478]:ReturnStatement[7458-7478]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7794-7800]:Modifier[7794-7800]"
  }, {
    "left" : "OpenMapRealVector",
    "right" : "OpenMapRealVector",
    "info" : "SimpleType[7801-7818]:SimpleType[7801-7818]"
  }, {
    "left" : "add",
    "right" : "add",
    "info" : "SimpleName[7819-7822]:SimpleName[7819-7822]"
  }, {
    "left" : "OpenMapRealVector v",
    "right" : "OpenMapRealVector v",
    "info" : "SingleVariableDeclaration[7823-7842]:SingleVariableDeclaration[7823-7842]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[7851-7875]:SimpleType[7851-7875]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7875-8547]:Block[7875-8547]"
  }, {
    "left" : "checkVectorDimensions(v.getDimension());",
    "right" : "checkVectorDimensions(v.getDimension());",
    "info" : "ExpressionStatement[7885-7925]:ExpressionStatement[7885-7925]"
  }, {
    "left" : "boolean copyThis = entries.size() > v.entries.size();",
    "right" : "boolean copyThis = entries.size() > v.entries.size();",
    "info" : "VariableDeclarationStatement[7934-7987]:VariableDeclarationStatement[7934-7987]"
  }, {
    "left" : "OpenMapRealVector res = copyThis ? this.copy() : v.copy();",
    "right" : "OpenMapRealVector res = copyThis ? this.copy() : v.copy();",
    "info" : "VariableDeclarationStatement[7996-8054]:VariableDeclarationStatement[7996-8054]"
  }, {
    "left" : "Iterator iter = copyThis ? v.entries.iterator() : entries.iterator();",
    "right" : "Iterator iter = copyThis ? v.entries.iterator() : entries.iterator();",
    "info" : "VariableDeclarationStatement[8063-8132]:VariableDeclarationStatement[8063-8132]"
  }, {
    "left" : "OpenIntToDoubleHashMap randomAccess = copyThis ? entries : v.entries;",
    "right" : "OpenIntToDoubleHashMap randomAccess = copyThis ? entries : v.entries;",
    "info" : "VariableDeclarationStatement[8141-8210]:VariableDeclarationStatement[8141-8210]"
  }, {
    "left" : "while (iter.hasNext())",
    "right" : "while (iter.hasNext())",
    "info" : "WhileStatement[8219-8521]:WhileStatement[8219-8521]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8242-8521]:Block[8242-8521]"
  }, {
    "left" : "iter.advance();",
    "right" : "iter.advance();",
    "info" : "ExpressionStatement[8256-8271]:ExpressionStatement[8256-8271]"
  }, {
    "left" : "int key = iter.key();",
    "right" : "int key = iter.key();",
    "info" : "VariableDeclarationStatement[8284-8305]:VariableDeclarationStatement[8284-8305]"
  }, {
    "left" : "if (randomAccess.containsKey(key))",
    "right" : "if (randomAccess.containsKey(key))",
    "info" : "IfStatement[8318-8511]:IfStatement[8318-8511]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8353-8441]:Block[8353-8441]"
  }, {
    "left" : "res.setEntry(key, randomAccess.get(key) + iter.value());",
    "right" : "res.setEntry(key, randomAccess.get(key) + iter.value());",
    "info" : "ExpressionStatement[8371-8427]:ExpressionStatement[8371-8427]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8447-8511]:Block[8447-8511]"
  }, {
    "left" : "res.setEntry(key, iter.value());",
    "right" : "res.setEntry(key, iter.value());",
    "info" : "ExpressionStatement[8465-8497]:ExpressionStatement[8465-8497]"
  }, {
    "left" : "return res;",
    "right" : "return res;",
    "info" : "ReturnStatement[8530-8541]:ReturnStatement[8530-8541]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8719-8725]:Modifier[8719-8725]"
  }, {
    "left" : "OpenMapRealVector",
    "right" : "OpenMapRealVector",
    "info" : "SimpleType[8726-8743]:SimpleType[8726-8743]"
  }, {
    "left" : "append",
    "right" : "append",
    "info" : "SimpleName[8744-8750]:SimpleName[8744-8750]"
  }, {
    "left" : "OpenMapRealVector v",
    "right" : "OpenMapRealVector v",
    "info" : "SingleVariableDeclaration[8751-8770]:SingleVariableDeclaration[8751-8770]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8772-9061]:Block[8772-9061]"
  }, {
    "left" : "OpenMapRealVector res = new OpenMapRealVector(this, v.getDimension());",
    "right" : "OpenMapRealVector res = new OpenMapRealVector(this, v.getDimension());",
    "info" : "VariableDeclarationStatement[8782-8852]:VariableDeclarationStatement[8782-8852]"
  }, {
    "left" : "Iterator iter = v.entries.iterator();",
    "right" : "Iterator iter = v.entries.iterator();",
    "info" : "VariableDeclarationStatement[8861-8898]:VariableDeclarationStatement[8861-8898]"
  }, {
    "left" : "while (iter.hasNext())",
    "right" : "while (iter.hasNext())",
    "info" : "WhileStatement[8907-9035]:WhileStatement[8907-9035]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8930-9035]:Block[8930-9035]"
  }, {
    "left" : "iter.advance();",
    "right" : "iter.advance();",
    "info" : "ExpressionStatement[8944-8959]:ExpressionStatement[8944-8959]"
  }, {
    "left" : "res.setEntry(iter.key() + virtualSize, iter.value());",
    "right" : "res.setEntry(iter.key() + virtualSize, iter.value());",
    "info" : "ExpressionStatement[8972-9025]:ExpressionStatement[8972-9025]"
  }, {
    "left" : "return res;",
    "right" : "return res;",
    "info" : "ReturnStatement[9044-9055]:ReturnStatement[9044-9055]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9092-9098]:Modifier[9092-9098]"
  }, {
    "left" : "OpenMapRealVector",
    "right" : "OpenMapRealVector",
    "info" : "SimpleType[9099-9116]:SimpleType[9099-9116]"
  }, {
    "left" : "append",
    "right" : "append",
    "info" : "SimpleName[9117-9123]:SimpleName[9117-9123]"
  }, {
    "left" : "RealVector v",
    "right" : "RealVector v",
    "info" : "SingleVariableDeclaration[9124-9136]:SingleVariableDeclaration[9124-9136]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9138-9287]:Block[9138-9287]"
  }, {
    "left" : "if (v instanceof OpenMapRealVector)",
    "right" : "if (v instanceof OpenMapRealVector)",
    "info" : "IfStatement[9148-9245]:IfStatement[9148-9245]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9184-9245]:Block[9184-9245]"
  }, {
    "left" : "return append((OpenMapRealVector) v);",
    "right" : "return append((OpenMapRealVector) v);",
    "info" : "ReturnStatement[9198-9235]:ReturnStatement[9198-9235]"
  }, {
    "left" : "return append(v.getData());",
    "right" : "return append(v.getData());",
    "info" : "ReturnStatement[9254-9281]:ReturnStatement[9254-9281]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9318-9324]:Modifier[9318-9324]"
  }, {
    "left" : "OpenMapRealVector",
    "right" : "OpenMapRealVector",
    "info" : "SimpleType[9325-9342]:SimpleType[9325-9342]"
  }, {
    "left" : "append",
    "right" : "append",
    "info" : "SimpleName[9343-9349]:SimpleName[9343-9349]"
  }, {
    "left" : "double d",
    "right" : "double d",
    "info" : "SingleVariableDeclaration[9350-9358]:SingleVariableDeclaration[9350-9358]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9360-9489]:Block[9360-9489]"
  }, {
    "left" : "OpenMapRealVector res = new OpenMapRealVector(this, 1);",
    "right" : "OpenMapRealVector res = new OpenMapRealVector(this, 1);",
    "info" : "VariableDeclarationStatement[9370-9425]:VariableDeclarationStatement[9370-9425]"
  }, {
    "left" : "res.setEntry(virtualSize, d);",
    "right" : "res.setEntry(virtualSize, d);",
    "info" : "ExpressionStatement[9434-9463]:ExpressionStatement[9434-9463]"
  }, {
    "left" : "return res;",
    "right" : "return res;",
    "info" : "ReturnStatement[9472-9483]:ReturnStatement[9472-9483]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9520-9526]:Modifier[9520-9526]"
  }, {
    "left" : "OpenMapRealVector",
    "right" : "OpenMapRealVector",
    "info" : "SimpleType[9527-9544]:SimpleType[9527-9544]"
  }, {
    "left" : "append",
    "right" : "append",
    "info" : "SimpleName[9545-9551]:SimpleName[9545-9551]"
  }, {
    "left" : "double[] a",
    "right" : "double[] a",
    "info" : "SingleVariableDeclaration[9552-9562]:SingleVariableDeclaration[9552-9562]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9564-9766]:Block[9564-9766]"
  }, {
    "left" : "OpenMapRealVector res = new OpenMapRealVector(this, a.length);",
    "right" : "OpenMapRealVector res = new OpenMapRealVector(this, a.length);",
    "info" : "VariableDeclarationStatement[9574-9636]:VariableDeclarationStatement[9574-9636]"
  }, {
    "left" : "for (int i = 0; i < a.length; i++)",
    "right" : "for (int i = 0; i < a.length; i++)",
    "info" : "ForStatement[9645-9740]:ForStatement[9645-9740]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9680-9740]:Block[9680-9740]"
  }, {
    "left" : "res.setEntry(i + virtualSize, a[i]);",
    "right" : "res.setEntry(i + virtualSize, a[i]);",
    "info" : "ExpressionStatement[9694-9730]:ExpressionStatement[9694-9730]"
  }, {
    "left" : "return res;",
    "right" : "return res;",
    "info" : "ReturnStatement[9749-9760]:ReturnStatement[9749-9760]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9797-9803]:Modifier[9797-9803]"
  }, {
    "left" : "OpenMapRealVector",
    "right" : "OpenMapRealVector",
    "info" : "SimpleType[9804-9821]:SimpleType[9804-9821]"
  }, {
    "left" : "copy",
    "right" : "copy",
    "info" : "SimpleName[9822-9826]:SimpleName[9822-9826]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9829-9880]:Block[9829-9880]"
  }, {
    "left" : "return new OpenMapRealVector(this);",
    "right" : "return new OpenMapRealVector(this);",
    "info" : "ReturnStatement[9839-9874]:ReturnStatement[9839-9874]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10225-10231]:Modifier[10225-10231]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[10232-10238]:PrimitiveType[10232-10238]"
  }, {
    "left" : "dotProduct",
    "right" : "dotProduct",
    "info" : "SimpleName[10239-10249]:SimpleName[10239-10249]"
  }, {
    "left" : "OpenMapRealVector v",
    "right" : "OpenMapRealVector v",
    "info" : "SingleVariableDeclaration[10250-10269]:SingleVariableDeclaration[10250-10269]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[10278-10302]:SimpleType[10278-10302]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10303-10755]:Block[10303-10755]"
  }, {
    "left" : "checkVectorDimensions(v.getDimension());",
    "right" : "checkVectorDimensions(v.getDimension());",
    "info" : "ExpressionStatement[10313-10353]:ExpressionStatement[10313-10353]"
  }, {
    "left" : "boolean thisIsSmaller  = entries.size() < v.entries.size();",
    "right" : "boolean thisIsSmaller  = entries.size() < v.entries.size();",
    "info" : "VariableDeclarationStatement[10362-10421]:VariableDeclarationStatement[10362-10421]"
  }, {
    "left" : "Iterator iter = thisIsSmaller  ? entries.iterator() : v.entries.iterator();",
    "right" : "Iterator iter = thisIsSmaller  ? entries.iterator() : v.entries.iterator();",
    "info" : "VariableDeclarationStatement[10430-10505]:VariableDeclarationStatement[10430-10505]"
  }, {
    "left" : "OpenIntToDoubleHashMap larger = thisIsSmaller  ? v.entries : entries;",
    "right" : "OpenIntToDoubleHashMap larger = thisIsSmaller  ? v.entries : entries;",
    "info" : "VariableDeclarationStatement[10514-10583]:VariableDeclarationStatement[10514-10583]"
  }, {
    "left" : "double d = 0;",
    "right" : "double d = 0;",
    "info" : "VariableDeclarationStatement[10592-10605]:VariableDeclarationStatement[10592-10605]"
  }, {
    "left" : "while(iter.hasNext())",
    "right" : "while(iter.hasNext())",
    "info" : "WhileStatement[10614-10731]:WhileStatement[10614-10731]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10636-10731]:Block[10636-10731]"
  }, {
    "left" : "iter.advance();",
    "right" : "iter.advance();",
    "info" : "ExpressionStatement[10650-10665]:ExpressionStatement[10650-10665]"
  }, {
    "left" : "d += iter.value() * larger.get(iter.key());",
    "right" : "d += iter.value() * larger.get(iter.key());",
    "info" : "ExpressionStatement[10678-10721]:ExpressionStatement[10678-10721]"
  }, {
    "left" : "return d;",
    "right" : "return d;",
    "info" : "ReturnStatement[10740-10749]:ReturnStatement[10740-10749]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10786-10792]:Modifier[10786-10792]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[10793-10799]:PrimitiveType[10793-10799]"
  }, {
    "left" : "dotProduct",
    "right" : "dotProduct",
    "info" : "SimpleName[10800-10810]:SimpleName[10800-10810]"
  }, {
    "left" : "RealVector v",
    "right" : "RealVector v",
    "info" : "SingleVariableDeclaration[10811-10823]:SingleVariableDeclaration[10811-10823]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[10832-10856]:SimpleType[10832-10856]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10857-11029]:Block[10857-11029]"
  }, {
    "left" : "if(v instanceof OpenMapRealVector)",
    "right" : "if(v instanceof OpenMapRealVector)",
    "info" : "IfStatement[10867-11023]:IfStatement[10867-11023]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10902-10966]:Block[10902-10966]"
  }, {
    "left" : "return dotProduct((OpenMapRealVector)v);",
    "right" : "return dotProduct((OpenMapRealVector)v);",
    "info" : "ReturnStatement[10916-10956]:ReturnStatement[10916-10956]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10972-11023]:Block[10972-11023]"
  }, {
    "left" : "return super.dotProduct(v);",
    "right" : "return super.dotProduct(v);",
    "info" : "ReturnStatement[10986-11013]:ReturnStatement[10986-11013]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11060-11066]:Modifier[11060-11066]"
  }, {
    "left" : "OpenMapRealVector",
    "right" : "OpenMapRealVector",
    "info" : "SimpleType[11067-11084]:SimpleType[11067-11084]"
  }, {
    "left" : "ebeDivide",
    "right" : "ebeDivide",
    "info" : "SimpleName[11085-11094]:SimpleName[11085-11094]"
  }, {
    "left" : "RealVector v",
    "right" : "RealVector v",
    "info" : "SingleVariableDeclaration[11095-11107]:SingleVariableDeclaration[11095-11107]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[11116-11140]:SimpleType[11116-11140]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11141-11474]:Block[11141-11474]"
  }, {
    "left" : "checkVectorDimensions(v.getDimension());",
    "right" : "checkVectorDimensions(v.getDimension());",
    "info" : "ExpressionStatement[11151-11191]:ExpressionStatement[11151-11191]"
  }, {
    "left" : "OpenMapRealVector res = new OpenMapRealVector(this);",
    "right" : "OpenMapRealVector res = new OpenMapRealVector(this);",
    "info" : "VariableDeclarationStatement[11200-11252]:VariableDeclarationStatement[11200-11252]"
  }, {
    "left" : "Iterator iter = res.entries.iterator();",
    "right" : "Iterator iter = res.entries.iterator();",
    "info" : "VariableDeclarationStatement[11261-11300]:VariableDeclarationStatement[11261-11300]"
  }, {
    "left" : "while (iter.hasNext())",
    "right" : "while (iter.hasNext())",
    "info" : "WhileStatement[11309-11448]:WhileStatement[11309-11448]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11332-11448]:Block[11332-11448]"
  }, {
    "left" : "iter.advance();",
    "right" : "iter.advance();",
    "info" : "ExpressionStatement[11346-11361]:ExpressionStatement[11346-11361]"
  }, {
    "left" : "res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));",
    "right" : "res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));",
    "info" : "ExpressionStatement[11374-11438]:ExpressionStatement[11374-11438]"
  }, {
    "left" : "return res;",
    "right" : "return res;",
    "info" : "ReturnStatement[11457-11468]:ReturnStatement[11457-11468]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11505-11511]:Modifier[11505-11511]"
  }, {
    "left" : "OpenMapRealVector",
    "right" : "OpenMapRealVector",
    "info" : "SimpleType[11512-11529]:SimpleType[11512-11529]"
  }, {
    "left" : "ebeDivide",
    "right" : "ebeDivide",
    "info" : "SimpleName[11530-11539]:SimpleName[11530-11539]"
  }, {
    "left" : "double[] v",
    "right" : "double[] v",
    "info" : "SingleVariableDeclaration[11540-11550]:SingleVariableDeclaration[11540-11550]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[11559-11583]:SimpleType[11559-11583]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11584-11900]:Block[11584-11900]"
  }, {
    "left" : "checkVectorDimensions(v.length);",
    "right" : "checkVectorDimensions(v.length);",
    "info" : "ExpressionStatement[11594-11626]:ExpressionStatement[11594-11626]"
  }, {
    "left" : "OpenMapRealVector res = new OpenMapRealVector(this);",
    "right" : "OpenMapRealVector res = new OpenMapRealVector(this);",
    "info" : "VariableDeclarationStatement[11635-11687]:VariableDeclarationStatement[11635-11687]"
  }, {
    "left" : "Iterator iter = res.entries.iterator();",
    "right" : "Iterator iter = res.entries.iterator();",
    "info" : "VariableDeclarationStatement[11696-11735]:VariableDeclarationStatement[11696-11735]"
  }, {
    "left" : "while (iter.hasNext())",
    "right" : "while (iter.hasNext())",
    "info" : "WhileStatement[11744-11874]:WhileStatement[11744-11874]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11767-11874]:Block[11767-11874]"
  }, {
    "left" : "iter.advance();",
    "right" : "iter.advance();",
    "info" : "ExpressionStatement[11781-11796]:ExpressionStatement[11781-11796]"
  }, {
    "left" : "res.setEntry(iter.key(), iter.value() / v[iter.key()]);",
    "right" : "res.setEntry(iter.key(), iter.value() / v[iter.key()]);",
    "info" : "ExpressionStatement[11809-11864]:ExpressionStatement[11809-11864]"
  }, {
    "left" : "return res;",
    "right" : "return res;",
    "info" : "ReturnStatement[11883-11894]:ReturnStatement[11883-11894]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11931-11937]:Modifier[11931-11937]"
  }, {
    "left" : "OpenMapRealVector",
    "right" : "OpenMapRealVector",
    "info" : "SimpleType[11938-11955]:SimpleType[11938-11955]"
  }, {
    "left" : "ebeMultiply",
    "right" : "ebeMultiply",
    "info" : "SimpleName[11956-11967]:SimpleName[11956-11967]"
  }, {
    "left" : "RealVector v",
    "right" : "RealVector v",
    "info" : "SingleVariableDeclaration[11968-11980]:SingleVariableDeclaration[11968-11980]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[11989-12013]:SimpleType[11989-12013]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12014-12347]:Block[12014-12347]"
  }, {
    "left" : "checkVectorDimensions(v.getDimension());",
    "right" : "checkVectorDimensions(v.getDimension());",
    "info" : "ExpressionStatement[12024-12064]:ExpressionStatement[12024-12064]"
  }, {
    "left" : "OpenMapRealVector res = new OpenMapRealVector(this);",
    "right" : "OpenMapRealVector res = new OpenMapRealVector(this);",
    "info" : "VariableDeclarationStatement[12073-12125]:VariableDeclarationStatement[12073-12125]"
  }, {
    "left" : "Iterator iter = res.entries.iterator();",
    "right" : "Iterator iter = res.entries.iterator();",
    "info" : "VariableDeclarationStatement[12134-12173]:VariableDeclarationStatement[12134-12173]"
  }, {
    "left" : "while (iter.hasNext())",
    "right" : "while (iter.hasNext())",
    "info" : "WhileStatement[12182-12321]:WhileStatement[12182-12321]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12205-12321]:Block[12205-12321]"
  }, {
    "left" : "iter.advance();",
    "right" : "iter.advance();",
    "info" : "ExpressionStatement[12219-12234]:ExpressionStatement[12219-12234]"
  }, {
    "left" : "res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));",
    "right" : "res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));",
    "info" : "ExpressionStatement[12247-12311]:ExpressionStatement[12247-12311]"
  }, {
    "left" : "return res;",
    "right" : "return res;",
    "info" : "ReturnStatement[12330-12341]:ReturnStatement[12330-12341]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12378-12384]:Modifier[12378-12384]"
  }, {
    "left" : "OpenMapRealVector",
    "right" : "OpenMapRealVector",
    "info" : "SimpleType[12385-12402]:SimpleType[12385-12402]"
  }, {
    "left" : "ebeMultiply",
    "right" : "ebeMultiply",
    "info" : "SimpleName[12403-12414]:SimpleName[12403-12414]"
  }, {
    "left" : "double[] v",
    "right" : "double[] v",
    "info" : "SingleVariableDeclaration[12415-12425]:SingleVariableDeclaration[12415-12425]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[12434-12458]:SimpleType[12434-12458]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12459-12775]:Block[12459-12775]"
  }, {
    "left" : "checkVectorDimensions(v.length);",
    "right" : "checkVectorDimensions(v.length);",
    "info" : "ExpressionStatement[12469-12501]:ExpressionStatement[12469-12501]"
  }, {
    "left" : "OpenMapRealVector res = new OpenMapRealVector(this);",
    "right" : "OpenMapRealVector res = new OpenMapRealVector(this);",
    "info" : "VariableDeclarationStatement[12510-12562]:VariableDeclarationStatement[12510-12562]"
  }, {
    "left" : "Iterator iter = res.entries.iterator();",
    "right" : "Iterator iter = res.entries.iterator();",
    "info" : "VariableDeclarationStatement[12571-12610]:VariableDeclarationStatement[12571-12610]"
  }, {
    "left" : "while (iter.hasNext())",
    "right" : "while (iter.hasNext())",
    "info" : "WhileStatement[12619-12749]:WhileStatement[12619-12749]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12642-12749]:Block[12642-12749]"
  }, {
    "left" : "iter.advance();",
    "right" : "iter.advance();",
    "info" : "ExpressionStatement[12656-12671]:ExpressionStatement[12656-12671]"
  }, {
    "left" : "res.setEntry(iter.key(), iter.value() * v[iter.key()]);",
    "right" : "res.setEntry(iter.key(), iter.value() * v[iter.key()]);",
    "info" : "ExpressionStatement[12684-12739]:ExpressionStatement[12684-12739]"
  }, {
    "left" : "return res;",
    "right" : "return res;",
    "info" : "ReturnStatement[12758-12769]:ReturnStatement[12758-12769]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12806-12812]:Modifier[12806-12812]"
  }, {
    "left" : "OpenMapRealVector",
    "right" : "OpenMapRealVector",
    "info" : "SimpleType[12813-12830]:SimpleType[12813-12830]"
  }, {
    "left" : "getSubVector",
    "right" : "getSubVector",
    "info" : "SimpleName[12831-12843]:SimpleName[12831-12843]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[12844-12853]:SingleVariableDeclaration[12844-12853]"
  }, {
    "left" : "int n",
    "right" : "int n",
    "info" : "SingleVariableDeclaration[12855-12860]:SingleVariableDeclaration[12855-12860]"
  }, {
    "left" : "MatrixIndexException",
    "right" : "MatrixIndexException",
    "info" : "SimpleType[12869-12889]:SimpleType[12869-12889]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12890-13331]:Block[12890-13331]"
  }, {
    "left" : "checkIndex(index);",
    "right" : "checkIndex(index);",
    "info" : "ExpressionStatement[12900-12918]:ExpressionStatement[12900-12918]"
  }, {
    "left" : "checkIndex(index + n - 1);",
    "right" : "checkIndex(index + n - 1);",
    "info" : "ExpressionStatement[12927-12953]:ExpressionStatement[12927-12953]"
  }, {
    "left" : "OpenMapRealVector res = new OpenMapRealVector(n);",
    "right" : "OpenMapRealVector res = new OpenMapRealVector(n);",
    "info" : "VariableDeclarationStatement[12962-13011]:VariableDeclarationStatement[12962-13011]"
  }, {
    "left" : "int end = index + n;",
    "right" : "int end = index + n;",
    "info" : "VariableDeclarationStatement[13020-13040]:VariableDeclarationStatement[13020-13040]"
  }, {
    "left" : "Iterator iter = entries.iterator();",
    "right" : "Iterator iter = entries.iterator();",
    "info" : "VariableDeclarationStatement[13049-13084]:VariableDeclarationStatement[13049-13084]"
  }, {
    "left" : "while (iter.hasNext())",
    "right" : "while (iter.hasNext())",
    "info" : "WhileStatement[13093-13305]:WhileStatement[13093-13305]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13116-13305]:Block[13116-13305]"
  }, {
    "left" : "iter.advance();",
    "right" : "iter.advance();",
    "info" : "ExpressionStatement[13130-13145]:ExpressionStatement[13130-13145]"
  }, {
    "left" : "int key = iter.key();",
    "right" : "int key = iter.key();",
    "info" : "VariableDeclarationStatement[13158-13179]:VariableDeclarationStatement[13158-13179]"
  }, {
    "left" : "if (key >= index && key < end)",
    "right" : "if (key >= index && key < end)",
    "info" : "IfStatement[13192-13295]:IfStatement[13192-13295]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13223-13295]:Block[13223-13295]"
  }, {
    "left" : "res.setEntry(key - index, iter.value());",
    "right" : "res.setEntry(key - index, iter.value());",
    "info" : "ExpressionStatement[13241-13281]:ExpressionStatement[13241-13281]"
  }, {
    "left" : "return res;",
    "right" : "return res;",
    "info" : "ReturnStatement[13314-13325]:ReturnStatement[13314-13325]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13362-13368]:Modifier[13362-13368]"
  }, {
    "left" : "double[]",
    "right" : "double[]",
    "info" : "ArrayType[13369-13377]:ArrayType[13369-13377]"
  }, {
    "left" : "getData",
    "right" : "getData",
    "info" : "SimpleName[13378-13385]:SimpleName[13378-13385]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13388-13622]:Block[13388-13622]"
  }, {
    "left" : "double[] res = new double[virtualSize];",
    "right" : "double[] res = new double[virtualSize];",
    "info" : "VariableDeclarationStatement[13398-13437]:VariableDeclarationStatement[13398-13437]"
  }, {
    "left" : "Iterator iter = entries.iterator();",
    "right" : "Iterator iter = entries.iterator();",
    "info" : "VariableDeclarationStatement[13446-13481]:VariableDeclarationStatement[13446-13481]"
  }, {
    "left" : "while (iter.hasNext())",
    "right" : "while (iter.hasNext())",
    "info" : "WhileStatement[13490-13596]:WhileStatement[13490-13596]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13513-13596]:Block[13513-13596]"
  }, {
    "left" : "iter.advance();",
    "right" : "iter.advance();",
    "info" : "ExpressionStatement[13527-13542]:ExpressionStatement[13527-13542]"
  }, {
    "left" : "res[iter.key()] = iter.value();",
    "right" : "res[iter.key()] = iter.value();",
    "info" : "ExpressionStatement[13555-13586]:ExpressionStatement[13555-13586]"
  }, {
    "left" : "return res;",
    "right" : "return res;",
    "info" : "ReturnStatement[13605-13616]:ReturnStatement[13605-13616]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13653-13659]:Modifier[13653-13659]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[13660-13663]:PrimitiveType[13660-13663]"
  }, {
    "left" : "getDimension",
    "right" : "getDimension",
    "info" : "SimpleName[13664-13676]:SimpleName[13664-13676]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13679-13714]:Block[13679-13714]"
  }, {
    "left" : "return virtualSize;",
    "right" : "return virtualSize;",
    "info" : "ReturnStatement[13689-13708]:ReturnStatement[13689-13708]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13971-13977]:Modifier[13971-13977]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[13978-13984]:PrimitiveType[13978-13984]"
  }, {
    "left" : "getDistance",
    "right" : "getDistance",
    "info" : "SimpleName[13985-13996]:SimpleName[13985-13996]"
  }, {
    "left" : "OpenMapRealVector v",
    "right" : "OpenMapRealVector v",
    "info" : "SingleVariableDeclaration[13997-14016]:SingleVariableDeclaration[13997-14016]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[14025-14049]:SimpleType[14025-14049]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14050-14668]:Block[14050-14668]"
  }, {
    "left" : "Iterator iter = entries.iterator();",
    "right" : "Iterator iter = entries.iterator();",
    "info" : "VariableDeclarationStatement[14060-14095]:VariableDeclarationStatement[14060-14095]"
  }, {
    "left" : "double res = 0;",
    "right" : "double res = 0;",
    "info" : "VariableDeclarationStatement[14104-14119]:VariableDeclarationStatement[14104-14119]"
  }, {
    "left" : "while (iter.hasNext())",
    "right" : "while (iter.hasNext())",
    "info" : "WhileStatement[14128-14336]:WhileStatement[14128-14336]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14151-14336]:Block[14151-14336]"
  }, {
    "left" : "iter.advance();",
    "right" : "iter.advance();",
    "info" : "ExpressionStatement[14165-14180]:ExpressionStatement[14165-14180]"
  }, {
    "left" : "int key = iter.key();",
    "right" : "int key = iter.key();",
    "info" : "VariableDeclarationStatement[14193-14214]:VariableDeclarationStatement[14193-14214]"
  }, {
    "left" : "double delta;",
    "right" : "double delta;",
    "info" : "VariableDeclarationStatement[14227-14240]:VariableDeclarationStatement[14227-14240]"
  }, {
    "left" : "delta = iter.value() - v.getEntry(key);",
    "right" : "delta = iter.value() - v.getEntry(key);",
    "info" : "ExpressionStatement[14253-14292]:ExpressionStatement[14253-14292]"
  }, {
    "left" : "res += delta * delta;",
    "right" : "res += delta * delta;",
    "info" : "ExpressionStatement[14305-14326]:ExpressionStatement[14305-14326]"
  }, {
    "left" : "iter = v.getEntries().iterator();",
    "right" : "iter = v.getEntries().iterator();",
    "info" : "ExpressionStatement[14345-14378]:ExpressionStatement[14345-14378]"
  }, {
    "left" : "while (iter.hasNext())",
    "right" : "while (iter.hasNext())",
    "info" : "WhileStatement[14387-14631]:WhileStatement[14387-14631]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14410-14631]:Block[14410-14631]"
  }, {
    "left" : "iter.advance();",
    "right" : "iter.advance();",
    "info" : "ExpressionStatement[14424-14439]:ExpressionStatement[14424-14439]"
  }, {
    "left" : "int key = iter.key();",
    "right" : "int key = iter.key();",
    "info" : "VariableDeclarationStatement[14452-14473]:VariableDeclarationStatement[14452-14473]"
  }, {
    "left" : "if (!entries.containsKey(key))",
    "right" : "if (!entries.containsKey(key))",
    "info" : "IfStatement[14486-14621]:IfStatement[14486-14621]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14517-14621]:Block[14517-14621]"
  }, {
    "left" : "final double value = iter.value();",
    "right" : "final double value = iter.value();",
    "info" : "VariableDeclarationStatement[14535-14569]:VariableDeclarationStatement[14535-14569]"
  }, {
    "left" : "res += value * value;",
    "right" : "res += value * value;",
    "info" : "ExpressionStatement[14586-14607]:ExpressionStatement[14586-14607]"
  }, {
    "left" : "return Math.sqrt(res);",
    "right" : "return Math.sqrt(res);",
    "info" : "ReturnStatement[14640-14662]:ReturnStatement[14640-14662]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14699-14705]:Modifier[14699-14705]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[14706-14712]:PrimitiveType[14706-14712]"
  }, {
    "left" : "getDistance",
    "right" : "getDistance",
    "info" : "SimpleName[14713-14724]:SimpleName[14713-14724]"
  }, {
    "left" : "RealVector v",
    "right" : "RealVector v",
    "info" : "SingleVariableDeclaration[14725-14737]:SingleVariableDeclaration[14725-14737]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[14746-14770]:SimpleType[14746-14770]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14771-14979]:Block[14771-14979]"
  }, {
    "left" : "checkVectorDimensions(v.getDimension());",
    "right" : "checkVectorDimensions(v.getDimension());",
    "info" : "ExpressionStatement[14781-14821]:ExpressionStatement[14781-14821]"
  }, {
    "left" : "if (v instanceof OpenMapRealVector)",
    "right" : "if (v instanceof OpenMapRealVector)",
    "info" : "IfStatement[14830-14932]:IfStatement[14830-14932]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14866-14932]:Block[14866-14932]"
  }, {
    "left" : "return getDistance((OpenMapRealVector) v);",
    "right" : "return getDistance((OpenMapRealVector) v);",
    "info" : "ReturnStatement[14880-14922]:ReturnStatement[14880-14922]"
  }, {
    "left" : "return getDistance(v.getData());",
    "right" : "return getDistance(v.getData());",
    "info" : "ReturnStatement[14941-14973]:ReturnStatement[14941-14973]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15010-15016]:Modifier[15010-15016]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[15017-15023]:PrimitiveType[15017-15023]"
  }, {
    "left" : "getDistance",
    "right" : "getDistance",
    "info" : "SimpleName[15024-15035]:SimpleName[15024-15035]"
  }, {
    "left" : "double[] v",
    "right" : "double[] v",
    "info" : "SingleVariableDeclaration[15036-15046]:SingleVariableDeclaration[15036-15046]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[15055-15079]:SimpleType[15055-15079]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15080-15322]:Block[15080-15322]"
  }, {
    "left" : "checkVectorDimensions(v.length);",
    "right" : "checkVectorDimensions(v.length);",
    "info" : "ExpressionStatement[15090-15122]:ExpressionStatement[15090-15122]"
  }, {
    "left" : "double res = 0;",
    "right" : "double res = 0;",
    "info" : "VariableDeclarationStatement[15131-15146]:VariableDeclarationStatement[15131-15146]"
  }, {
    "left" : "for (int i = 0; i < v.length; i++)",
    "right" : "for (int i = 0; i < v.length; i++)",
    "info" : "ForStatement[15155-15285]:ForStatement[15155-15285]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15190-15285]:Block[15190-15285]"
  }, {
    "left" : "double delta = entries.get(i) - v[i];",
    "right" : "double delta = entries.get(i) - v[i];",
    "info" : "VariableDeclarationStatement[15204-15241]:VariableDeclarationStatement[15204-15241]"
  }, {
    "left" : "res += delta * delta;",
    "right" : "res += delta * delta;",
    "info" : "ExpressionStatement[15254-15275]:ExpressionStatement[15254-15275]"
  }, {
    "left" : "return Math.sqrt(res);",
    "right" : "return Math.sqrt(res);",
    "info" : "ReturnStatement[15294-15316]:ReturnStatement[15294-15316]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15353-15359]:Modifier[15353-15359]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[15360-15366]:PrimitiveType[15360-15366]"
  }, {
    "left" : "getEntry",
    "right" : "getEntry",
    "info" : "SimpleName[15367-15375]:SimpleName[15367-15375]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[15376-15385]:SingleVariableDeclaration[15376-15385]"
  }, {
    "left" : "MatrixIndexException",
    "right" : "MatrixIndexException",
    "info" : "SimpleType[15394-15414]:SimpleType[15394-15414]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15415-15484]:Block[15415-15484]"
  }, {
    "left" : "checkIndex(index);",
    "right" : "checkIndex(index);",
    "info" : "ExpressionStatement[15425-15443]:ExpressionStatement[15425-15443]"
  }, {
    "left" : "return entries.get(index);",
    "right" : "return entries.get(index);",
    "info" : "ReturnStatement[15452-15478]:ReturnStatement[15452-15478]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15801-15807]:Modifier[15801-15807]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[15808-15814]:PrimitiveType[15808-15814]"
  }, {
    "left" : "getL1Distance",
    "right" : "getL1Distance",
    "info" : "SimpleName[15815-15828]:SimpleName[15815-15828]"
  }, {
    "left" : "OpenMapRealVector v",
    "right" : "OpenMapRealVector v",
    "info" : "SingleVariableDeclaration[15829-15848]:SingleVariableDeclaration[15829-15848]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15850-16420]:Block[15850-16420]"
  }, {
    "left" : "double max = 0;",
    "right" : "double max = 0;",
    "info" : "VariableDeclarationStatement[15860-15875]:VariableDeclarationStatement[15860-15875]"
  }, {
    "left" : "Iterator iter = entries.iterator();",
    "right" : "Iterator iter = entries.iterator();",
    "info" : "VariableDeclarationStatement[15884-15919]:VariableDeclarationStatement[15884-15919]"
  }, {
    "left" : "while (iter.hasNext())",
    "right" : "while (iter.hasNext())",
    "info" : "WhileStatement[15928-16092]:WhileStatement[15928-16092]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15951-16092]:Block[15951-16092]"
  }, {
    "left" : "iter.advance();",
    "right" : "iter.advance();",
    "info" : "ExpressionStatement[15965-15980]:ExpressionStatement[15965-15980]"
  }, {
    "left" : "double delta = Math.abs(iter.value() - v.getEntry(iter.key()));",
    "right" : "double delta = Math.abs(iter.value() - v.getEntry(iter.key()));",
    "info" : "VariableDeclarationStatement[15993-16056]:VariableDeclarationStatement[15993-16056]"
  }, {
    "left" : "max += delta;",
    "right" : "max += delta;",
    "info" : "ExpressionStatement[16069-16082]:ExpressionStatement[16069-16082]"
  }, {
    "left" : "iter = v.getEntries().iterator();",
    "right" : "iter = v.getEntries().iterator();",
    "info" : "ExpressionStatement[16101-16134]:ExpressionStatement[16101-16134]"
  }, {
    "left" : "while (iter.hasNext())",
    "right" : "while (iter.hasNext())",
    "info" : "WhileStatement[16143-16394]:WhileStatement[16143-16394]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16166-16394]:Block[16166-16394]"
  }, {
    "left" : "iter.advance();",
    "right" : "iter.advance();",
    "info" : "ExpressionStatement[16180-16195]:ExpressionStatement[16180-16195]"
  }, {
    "left" : "int key = iter.key();",
    "right" : "int key = iter.key();",
    "info" : "VariableDeclarationStatement[16208-16229]:VariableDeclarationStatement[16208-16229]"
  }, {
    "left" : "if (!entries.containsKey(key))",
    "right" : "if (!entries.containsKey(key))",
    "info" : "IfStatement[16242-16384]:IfStatement[16242-16384]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16273-16384]:Block[16273-16384]"
  }, {
    "left" : "double delta = Math.abs(iter.value());",
    "right" : "double delta = Math.abs(iter.value());",
    "info" : "VariableDeclarationStatement[16291-16329]:VariableDeclarationStatement[16291-16329]"
  }, {
    "left" : "max +=  Math.abs(delta);",
    "right" : "max +=  Math.abs(delta);",
    "info" : "ExpressionStatement[16346-16370]:ExpressionStatement[16346-16370]"
  }, {
    "left" : "return max;",
    "right" : "return max;",
    "info" : "ReturnStatement[16403-16414]:ReturnStatement[16403-16414]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16451-16457]:Modifier[16451-16457]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[16458-16464]:PrimitiveType[16458-16464]"
  }, {
    "left" : "getL1Distance",
    "right" : "getL1Distance",
    "info" : "SimpleName[16465-16478]:SimpleName[16465-16478]"
  }, {
    "left" : "RealVector v",
    "right" : "RealVector v",
    "info" : "SingleVariableDeclaration[16479-16491]:SingleVariableDeclaration[16479-16491]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[16500-16524]:SimpleType[16500-16524]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16525-16737]:Block[16525-16737]"
  }, {
    "left" : "checkVectorDimensions(v.getDimension());",
    "right" : "checkVectorDimensions(v.getDimension());",
    "info" : "ExpressionStatement[16535-16575]:ExpressionStatement[16535-16575]"
  }, {
    "left" : "if (v instanceof OpenMapRealVector)",
    "right" : "if (v instanceof OpenMapRealVector)",
    "info" : "IfStatement[16584-16688]:IfStatement[16584-16688]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16620-16688]:Block[16620-16688]"
  }, {
    "left" : "return getL1Distance((OpenMapRealVector) v);",
    "right" : "return getL1Distance((OpenMapRealVector) v);",
    "info" : "ReturnStatement[16634-16678]:ReturnStatement[16634-16678]"
  }, {
    "left" : "return getL1Distance(v.getData());",
    "right" : "return getL1Distance(v.getData());",
    "info" : "ReturnStatement[16697-16731]:ReturnStatement[16697-16731]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16768-16774]:Modifier[16768-16774]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[16775-16781]:PrimitiveType[16775-16781]"
  }, {
    "left" : "getL1Distance",
    "right" : "getL1Distance",
    "info" : "SimpleName[16782-16795]:SimpleName[16782-16795]"
  }, {
    "left" : "double[] v",
    "right" : "double[] v",
    "info" : "SingleVariableDeclaration[16796-16806]:SingleVariableDeclaration[16796-16806]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[16815-16839]:SimpleType[16815-16839]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16840-17070]:Block[16840-17070]"
  }, {
    "left" : "checkVectorDimensions(v.length);",
    "right" : "checkVectorDimensions(v.length);",
    "info" : "ExpressionStatement[16850-16882]:ExpressionStatement[16850-16882]"
  }, {
    "left" : "double max = 0;",
    "right" : "double max = 0;",
    "info" : "VariableDeclarationStatement[16891-16906]:VariableDeclarationStatement[16891-16906]"
  }, {
    "left" : "for (int i = 0; i < v.length; i++)",
    "right" : "for (int i = 0; i < v.length; i++)",
    "info" : "ForStatement[16915-17044]:ForStatement[16915-17044]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16950-17044]:Block[16950-17044]"
  }, {
    "left" : "double delta = Math.abs(getEntry(i) - v[i]);",
    "right" : "double delta = Math.abs(getEntry(i) - v[i]);",
    "info" : "VariableDeclarationStatement[16964-17008]:VariableDeclarationStatement[16964-17008]"
  }, {
    "left" : "max += delta;",
    "right" : "max += delta;",
    "info" : "ExpressionStatement[17021-17034]:ExpressionStatement[17021-17034]"
  }, {
    "left" : "return max;",
    "right" : "return max;",
    "info" : "ReturnStatement[17053-17064]:ReturnStatement[17053-17064]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[17448-17455]:Modifier[17216-17223]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[17456-17462]:PrimitiveType[17224-17230]"
  }, {
    "left" : "getLInfDistance",
    "right" : "getLInfDistance",
    "info" : "SimpleName[17463-17478]:SimpleName[17231-17246]"
  }, {
    "left" : "OpenMapRealVector v",
    "right" : "OpenMapRealVector v",
    "info" : "SingleVariableDeclaration[17479-17498]:SingleVariableDeclaration[17247-17266]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17500-18122]:Block[17268-17890]"
  }, {
    "left" : "double max = 0;",
    "right" : "double max = 0;",
    "info" : "VariableDeclarationStatement[17510-17525]:VariableDeclarationStatement[17278-17293]"
  }, {
    "left" : "Iterator iter = entries.iterator();",
    "right" : "Iterator iter = entries.iterator();",
    "info" : "VariableDeclarationStatement[17534-17569]:VariableDeclarationStatement[17302-17337]"
  }, {
    "left" : "while (iter.hasNext())",
    "right" : "while (iter.hasNext())",
    "info" : "WhileStatement[17578-17790]:WhileStatement[17346-17558]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17601-17790]:Block[17369-17558]"
  }, {
    "left" : "iter.advance();",
    "right" : "iter.advance();",
    "info" : "ExpressionStatement[17615-17630]:ExpressionStatement[17383-17398]"
  }, {
    "left" : "double delta = Math.abs(iter.value() - v.getEntry(iter.key()));",
    "right" : "double delta = Math.abs(iter.value() - v.getEntry(iter.key()));",
    "info" : "VariableDeclarationStatement[17643-17706]:VariableDeclarationStatement[17411-17474]"
  }, {
    "left" : "if (delta > max)",
    "right" : "if (delta > max)",
    "info" : "IfStatement[17719-17780]:IfStatement[17487-17548]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17736-17780]:Block[17504-17548]"
  }, {
    "left" : "max = delta;",
    "right" : "max = delta;",
    "info" : "ExpressionStatement[17754-17766]:ExpressionStatement[17522-17534]"
  }, {
    "left" : "iter = v.getEntries().iterator();",
    "right" : "iter = v.getEntries().iterator();",
    "info" : "ExpressionStatement[17799-17832]:ExpressionStatement[17567-17600]"
  }, {
    "left" : "while (iter.hasNext())",
    "right" : "while (iter.hasNext())",
    "info" : "WhileStatement[17841-18096]:WhileStatement[17609-17864]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17864-18096]:Block[17632-17864]"
  }, {
    "left" : "iter.advance();",
    "right" : "iter.advance();",
    "info" : "ExpressionStatement[17878-17893]:ExpressionStatement[17646-17661]"
  }, {
    "left" : "int key = iter.key();",
    "right" : "int key = iter.key();",
    "info" : "VariableDeclarationStatement[17906-17927]:VariableDeclarationStatement[17674-17695]"
  }, {
    "left" : "if (!entries.containsKey(key))",
    "right" : "if (!entries.containsKey(key))",
    "info" : "IfStatement[17940-18086]:IfStatement[17708-17854]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17971-18086]:Block[17739-17854]"
  }, {
    "left" : "if (iter.value() > max)",
    "right" : "if (iter.value() > max)",
    "info" : "IfStatement[17989-18072]:IfStatement[17757-17840]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18013-18072]:Block[17781-17840]"
  }, {
    "left" : "max = iter.value();",
    "right" : "max = iter.value();",
    "info" : "ExpressionStatement[18035-18054]:ExpressionStatement[17803-17822]"
  }, {
    "left" : "return max;",
    "right" : "return max;",
    "info" : "ReturnStatement[18105-18116]:ReturnStatement[17873-17884]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18153-18159]:Modifier[17921-17927]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[18160-18166]:PrimitiveType[17928-17934]"
  }, {
    "left" : "getLInfDistance",
    "right" : "getLInfDistance",
    "info" : "SimpleName[18167-18182]:SimpleName[17935-17950]"
  }, {
    "left" : "RealVector v",
    "right" : "RealVector v",
    "info" : "SingleVariableDeclaration[18183-18195]:SingleVariableDeclaration[17951-17963]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[18204-18228]:SimpleType[17972-17996]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18229-18445]:Block[17997-18213]"
  }, {
    "left" : "checkVectorDimensions(v.getDimension());",
    "right" : "checkVectorDimensions(v.getDimension());",
    "info" : "ExpressionStatement[18239-18279]:ExpressionStatement[18007-18047]"
  }, {
    "left" : "if (v instanceof OpenMapRealVector)",
    "right" : "if (v instanceof OpenMapRealVector)",
    "info" : "IfStatement[18288-18394]:IfStatement[18056-18162]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18324-18394]:Block[18092-18162]"
  }, {
    "left" : "return getLInfDistance((OpenMapRealVector) v);",
    "right" : "return getLInfDistance((OpenMapRealVector) v);",
    "info" : "ReturnStatement[18338-18384]:ReturnStatement[18106-18152]"
  }, {
    "left" : "return getLInfDistance(v.getData());",
    "right" : "return getLInfDistance(v.getData());",
    "info" : "ReturnStatement[18403-18439]:ReturnStatement[18171-18207]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18476-18482]:Modifier[18244-18250]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[18483-18489]:PrimitiveType[18251-18257]"
  }, {
    "left" : "getLInfDistance",
    "right" : "getLInfDistance",
    "info" : "SimpleName[18490-18505]:SimpleName[18258-18273]"
  }, {
    "left" : "double[] v",
    "right" : "double[] v",
    "info" : "SingleVariableDeclaration[18506-18516]:SingleVariableDeclaration[18274-18284]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[18525-18549]:SimpleType[18293-18317]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18550-18828]:Block[18318-18596]"
  }, {
    "left" : "checkVectorDimensions(v.length);",
    "right" : "checkVectorDimensions(v.length);",
    "info" : "ExpressionStatement[18560-18592]:ExpressionStatement[18328-18360]"
  }, {
    "left" : "double max = 0;",
    "right" : "double max = 0;",
    "info" : "VariableDeclarationStatement[18601-18616]:VariableDeclarationStatement[18369-18384]"
  }, {
    "left" : "for (int i = 0; i < v.length; i++)",
    "right" : "for (int i = 0; i < v.length; i++)",
    "info" : "ForStatement[18625-18802]:ForStatement[18393-18570]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18660-18802]:Block[18428-18570]"
  }, {
    "left" : "double delta = Math.abs(getEntry(i) - v[i]);",
    "right" : "double delta = Math.abs(getEntry(i) - v[i]);",
    "info" : "VariableDeclarationStatement[18674-18718]:VariableDeclarationStatement[18442-18486]"
  }, {
    "left" : "if (delta > max)",
    "right" : "if (delta > max)",
    "info" : "IfStatement[18731-18792]:IfStatement[18499-18560]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18748-18792]:Block[18516-18560]"
  }, {
    "left" : "max = delta;",
    "right" : "max = delta;",
    "info" : "ExpressionStatement[18766-18778]:ExpressionStatement[18534-18546]"
  }, {
    "left" : "return max;",
    "right" : "return max;",
    "info" : "ReturnStatement[18811-18822]:ReturnStatement[18579-18590]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18859-18865]:Modifier[18627-18633]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[18866-18873]:PrimitiveType[18634-18641]"
  }, {
    "left" : "isInfinite",
    "right" : "isInfinite",
    "info" : "SimpleName[18874-18884]:SimpleName[18642-18652]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18887-19304]:Block[18655-19072]"
  }, {
    "left" : "boolean infiniteFound = false;",
    "right" : "boolean infiniteFound = false;",
    "info" : "VariableDeclarationStatement[18897-18927]:VariableDeclarationStatement[18665-18695]"
  }, {
    "left" : "Iterator iter = entries.iterator();",
    "right" : "Iterator iter = entries.iterator();",
    "info" : "VariableDeclarationStatement[18936-18971]:VariableDeclarationStatement[18704-18739]"
  }, {
    "left" : "while (iter.hasNext())",
    "right" : "while (iter.hasNext())",
    "info" : "WhileStatement[18980-19268]:WhileStatement[18748-19036]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19003-19268]:Block[18771-19036]"
  }, {
    "left" : "iter.advance();",
    "right" : "iter.advance();",
    "info" : "ExpressionStatement[19017-19032]:ExpressionStatement[18785-18800]"
  }, {
    "left" : "final double value = iter.value();",
    "right" : "final double value = iter.value();",
    "info" : "VariableDeclarationStatement[19045-19079]:VariableDeclarationStatement[18813-18847]"
  }, {
    "left" : "if (Double.isNaN(value))",
    "right" : "if (Double.isNaN(value))",
    "info" : "IfStatement[19092-19162]:IfStatement[18860-18930]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19117-19162]:Block[18885-18930]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[19135-19148]:ReturnStatement[18903-18916]"
  }, {
    "left" : "if (Double.isInfinite(value))",
    "right" : "if (Double.isInfinite(value))",
    "info" : "IfStatement[19175-19258]:IfStatement[18943-19026]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19205-19258]:Block[18973-19026]"
  }, {
    "left" : "infiniteFound = true;",
    "right" : "infiniteFound = true;",
    "info" : "ExpressionStatement[19223-19244]:ExpressionStatement[18991-19012]"
  }, {
    "left" : "return infiniteFound;",
    "right" : "return infiniteFound;",
    "info" : "ReturnStatement[19277-19298]:ReturnStatement[19045-19066]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[19335-19341]:Modifier[19103-19109]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[19342-19349]:PrimitiveType[19110-19117]"
  }, {
    "left" : "isNaN",
    "right" : "isNaN",
    "info" : "SimpleName[19350-19355]:SimpleName[19118-19123]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19358-19591]:Block[19126-19359]"
  }, {
    "left" : "Iterator iter = entries.iterator();",
    "right" : "Iterator iter = entries.iterator();",
    "info" : "VariableDeclarationStatement[19368-19403]:VariableDeclarationStatement[19136-19171]"
  }, {
    "left" : "while (iter.hasNext())",
    "right" : "while (iter.hasNext())",
    "info" : "WhileStatement[19412-19563]:WhileStatement[19180-19331]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19435-19563]:Block[19203-19331]"
  }, {
    "left" : "iter.advance();",
    "right" : "iter.advance();",
    "info" : "ExpressionStatement[19449-19464]:ExpressionStatement[19217-19232]"
  }, {
    "left" : "if (Double.isNaN(iter.value()))",
    "right" : "if (Double.isNaN(iter.value()))",
    "info" : "IfStatement[19477-19553]:IfStatement[19245-19321]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19509-19553]:Block[19277-19321]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[19527-19539]:ReturnStatement[19295-19307]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[19572-19585]:ReturnStatement[19340-19353]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[19622-19628]:Modifier[19390-19396]"
  }, {
    "left" : "OpenMapRealVector",
    "right" : "OpenMapRealVector",
    "info" : "SimpleType[19629-19646]:SimpleType[19397-19414]"
  }, {
    "left" : "mapAdd",
    "right" : "mapAdd",
    "info" : "SimpleName[19647-19653]:SimpleName[19415-19421]"
  }, {
    "left" : "double d",
    "right" : "double d",
    "info" : "SingleVariableDeclaration[19654-19662]:SingleVariableDeclaration[19422-19430]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19664-19710]:Block[19432-19478]"
  }, {
    "left" : "return copy().mapAddToSelf(d);",
    "right" : "return copy().mapAddToSelf(d);",
    "info" : "ReturnStatement[19674-19704]:ReturnStatement[19442-19472]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[19741-19747]:Modifier[19509-19515]"
  }, {
    "left" : "OpenMapRealVector",
    "right" : "OpenMapRealVector",
    "info" : "SimpleType[19748-19765]:SimpleType[19516-19533]"
  }, {
    "left" : "mapAddToSelf",
    "right" : "mapAddToSelf",
    "info" : "SimpleName[19766-19778]:SimpleName[19534-19546]"
  }, {
    "left" : "double d",
    "right" : "double d",
    "info" : "SingleVariableDeclaration[19779-19787]:SingleVariableDeclaration[19547-19555]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19789-19917]:Block[19557-19685]"
  }, {
    "left" : "for (int i = 0; i < virtualSize; i++)",
    "right" : "for (int i = 0; i < virtualSize; i++)",
    "info" : "ForStatement[19799-19890]:ForStatement[19567-19658]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19837-19890]:Block[19605-19658]"
  }, {
    "left" : "setEntry(i, getEntry(i) + d);",
    "right" : "setEntry(i, getEntry(i) + d);",
    "info" : "ExpressionStatement[19851-19880]:ExpressionStatement[19619-19648]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[19899-19911]:ReturnStatement[19667-19679]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[19949-19955]:Modifier[19717-19723]"
  }, {
    "left" : "RealMatrix",
    "right" : "RealMatrix",
    "info" : "SimpleType[19956-19966]:SimpleType[19724-19734]"
  }, {
    "left" : "outerProduct",
    "right" : "outerProduct",
    "info" : "SimpleName[19967-19979]:SimpleName[19735-19747]"
  }, {
    "left" : "double[] v",
    "right" : "double[] v",
    "info" : "SingleVariableDeclaration[19980-19990]:SingleVariableDeclaration[19748-19758]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[19999-20023]:SimpleType[19767-19791]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20024-20484]:Block[19792-20252]"
  }, {
    "left" : "checkVectorDimensions(v.length);",
    "right" : "checkVectorDimensions(v.length);",
    "info" : "ExpressionStatement[20034-20066]:ExpressionStatement[19802-19834]"
  }, {
    "left" : "RealMatrix res = new OpenMapRealMatrix(virtualSize, virtualSize);",
    "right" : "RealMatrix res = new OpenMapRealMatrix(virtualSize, virtualSize);",
    "info" : "VariableDeclarationStatement[20075-20140]:VariableDeclarationStatement[19843-19908]"
  }, {
    "left" : "Iterator iter = entries.iterator();",
    "right" : "Iterator iter = entries.iterator();",
    "info" : "VariableDeclarationStatement[20149-20184]:VariableDeclarationStatement[19917-19952]"
  }, {
    "left" : "while (iter.hasNext())",
    "right" : "while (iter.hasNext())",
    "info" : "WhileStatement[20193-20458]:WhileStatement[19961-20226]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20216-20458]:Block[19984-20226]"
  }, {
    "left" : "iter.advance();",
    "right" : "iter.advance();",
    "info" : "ExpressionStatement[20230-20245]:ExpressionStatement[19998-20013]"
  }, {
    "left" : "int row = iter.key();",
    "right" : "int row = iter.key();",
    "info" : "VariableDeclarationStatement[20258-20279]:VariableDeclarationStatement[20026-20047]"
  }, {
    "left" : "double value = iter.value();",
    "right" : "double value = iter.value();",
    "info" : "VariableDeclarationStatement[20292-20320]:VariableDeclarationStatement[20060-20088]"
  }, {
    "left" : "for (int col = 0; col < virtualSize; col++)",
    "right" : "for (int col = 0; col < virtualSize; col++)",
    "info" : "ForStatement[20333-20448]:ForStatement[20101-20216]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20377-20448]:Block[20145-20216]"
  }, {
    "left" : "res.setEntry(row, col, value * v[col]);",
    "right" : "res.setEntry(row, col, value * v[col]);",
    "info" : "ExpressionStatement[20395-20434]:ExpressionStatement[20163-20202]"
  }, {
    "left" : "return res;",
    "right" : "return res;",
    "info" : "ReturnStatement[20467-20478]:ReturnStatement[20235-20246]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[20515-20521]:Modifier[20283-20289]"
  }, {
    "left" : "RealVector",
    "right" : "RealVector",
    "info" : "SimpleType[20522-20532]:SimpleType[20290-20300]"
  }, {
    "left" : "projection",
    "right" : "projection",
    "info" : "SimpleName[20533-20543]:SimpleName[20301-20311]"
  }, {
    "left" : "RealVector v",
    "right" : "RealVector v",
    "info" : "SingleVariableDeclaration[20544-20556]:SingleVariableDeclaration[20312-20324]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[20565-20589]:SimpleType[20333-20357]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20590-20709]:Block[20358-20477]"
  }, {
    "left" : "checkVectorDimensions(v.getDimension());",
    "right" : "checkVectorDimensions(v.getDimension());",
    "info" : "ExpressionStatement[20600-20640]:ExpressionStatement[20368-20408]"
  }, {
    "left" : "return v.mapMultiply(dotProduct(v) / v.dotProduct(v));",
    "right" : "return v.mapMultiply(dotProduct(v) / v.dotProduct(v));",
    "info" : "ReturnStatement[20649-20703]:ReturnStatement[20417-20471]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[20740-20746]:Modifier[20508-20514]"
  }, {
    "left" : "OpenMapRealVector",
    "right" : "OpenMapRealVector",
    "info" : "SimpleType[20747-20764]:SimpleType[20515-20532]"
  }, {
    "left" : "projection",
    "right" : "projection",
    "info" : "SimpleName[20765-20775]:SimpleName[20533-20543]"
  }, {
    "left" : "double[] v",
    "right" : "double[] v",
    "info" : "SingleVariableDeclaration[20776-20786]:SingleVariableDeclaration[20544-20554]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[20795-20819]:SimpleType[20563-20587]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20820-20941]:Block[20588-20709]"
  }, {
    "left" : "checkVectorDimensions(v.length);",
    "right" : "checkVectorDimensions(v.length);",
    "info" : "ExpressionStatement[20830-20862]:ExpressionStatement[20598-20630]"
  }, {
    "left" : "return (OpenMapRealVector) projection(new OpenMapRealVector(v));",
    "right" : "return (OpenMapRealVector) projection(new OpenMapRealVector(v));",
    "info" : "ReturnStatement[20871-20935]:ReturnStatement[20639-20703]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[20972-20978]:Modifier[20740-20746]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[20979-20983]:PrimitiveType[20747-20751]"
  }, {
    "left" : "setEntry",
    "right" : "setEntry",
    "info" : "SimpleName[20984-20992]:SimpleName[20752-20760]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[20993-21002]:SingleVariableDeclaration[20761-20770]"
  }, {
    "left" : "double value",
    "right" : "double value",
    "info" : "SingleVariableDeclaration[21004-21016]:SingleVariableDeclaration[20772-20784]"
  }, {
    "left" : "MatrixIndexException",
    "right" : "MatrixIndexException",
    "info" : "SimpleType[21025-21045]:SimpleType[20793-20813]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21046-21251]:Block[20814-21019]"
  }, {
    "left" : "checkIndex(index);",
    "right" : "checkIndex(index);",
    "info" : "ExpressionStatement[21056-21074]:ExpressionStatement[20824-20842]"
  }, {
    "left" : "if (!isDefaultValue(value))",
    "right" : "if (!isDefaultValue(value))",
    "info" : "IfStatement[21083-21245]:IfStatement[20851-21013]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21111-21161]:Block[20879-20929]"
  }, {
    "left" : "entries.put(index, value);",
    "right" : "entries.put(index, value);",
    "info" : "ExpressionStatement[21125-21151]:ExpressionStatement[20893-20919]"
  }, {
    "left" : "if (entries.containsKey(index))",
    "right" : "if (entries.containsKey(index))",
    "info" : "IfStatement[21167-21245]:IfStatement[20935-21013]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21199-21245]:Block[20967-21013]"
  }, {
    "left" : "entries.remove(index);",
    "right" : "entries.remove(index);",
    "info" : "ExpressionStatement[21213-21235]:ExpressionStatement[20981-21003]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[21282-21288]:Modifier[21050-21056]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[21289-21293]:PrimitiveType[21057-21061]"
  }, {
    "left" : "setSubVector",
    "right" : "setSubVector",
    "info" : "SimpleName[21294-21306]:SimpleName[21062-21074]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[21307-21316]:SingleVariableDeclaration[21075-21084]"
  }, {
    "left" : "RealVector v",
    "right" : "RealVector v",
    "info" : "SingleVariableDeclaration[21318-21330]:SingleVariableDeclaration[21086-21098]"
  }, {
    "left" : "MatrixIndexException",
    "right" : "MatrixIndexException",
    "info" : "SimpleType[21339-21359]:SimpleType[21107-21127]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21360-21486]:Block[21128-21254]"
  }, {
    "left" : "checkIndex(index);",
    "right" : "checkIndex(index);",
    "info" : "ExpressionStatement[21370-21388]:ExpressionStatement[21138-21156]"
  }, {
    "left" : "checkIndex(index + v.getDimension() - 1);",
    "right" : "checkIndex(index + v.getDimension() - 1);",
    "info" : "ExpressionStatement[21397-21438]:ExpressionStatement[21165-21206]"
  }, {
    "left" : "setSubVector(index, v.getData());",
    "right" : "setSubVector(index, v.getData());",
    "info" : "ExpressionStatement[21447-21480]:ExpressionStatement[21215-21248]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[21517-21523]:Modifier[21285-21291]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[21524-21528]:PrimitiveType[21292-21296]"
  }, {
    "left" : "setSubVector",
    "right" : "setSubVector",
    "info" : "SimpleName[21529-21541]:SimpleName[21297-21309]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[21542-21551]:SingleVariableDeclaration[21310-21319]"
  }, {
    "left" : "double[] v",
    "right" : "double[] v",
    "info" : "SingleVariableDeclaration[21553-21563]:SingleVariableDeclaration[21321-21331]"
  }, {
    "left" : "MatrixIndexException",
    "right" : "MatrixIndexException",
    "info" : "SimpleType[21572-21592]:SimpleType[21340-21360]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21593-21763]:Block[21361-21531]"
  }, {
    "left" : "checkIndex(index);",
    "right" : "checkIndex(index);",
    "info" : "ExpressionStatement[21603-21621]:ExpressionStatement[21371-21389]"
  }, {
    "left" : "checkIndex(index + v.length - 1);",
    "right" : "checkIndex(index + v.length - 1);",
    "info" : "ExpressionStatement[21630-21663]:ExpressionStatement[21398-21431]"
  }, {
    "left" : "for (int i = 0; i < v.length; i++)",
    "right" : "for (int i = 0; i < v.length; i++)",
    "info" : "ForStatement[21672-21757]:ForStatement[21440-21525]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21707-21757]:Block[21475-21525]"
  }, {
    "left" : "setEntry(i + index, v[i]);",
    "right" : "setEntry(i + index, v[i]);",
    "info" : "ExpressionStatement[21721-21747]:ExpressionStatement[21489-21515]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[21794-21800]:Modifier[21562-21568]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[21801-21805]:PrimitiveType[21569-21573]"
  }, {
    "left" : "set",
    "right" : "set",
    "info" : "SimpleName[21806-21809]:SimpleName[21574-21577]"
  }, {
    "left" : "double value",
    "right" : "double value",
    "info" : "SingleVariableDeclaration[21810-21822]:SingleVariableDeclaration[21578-21590]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21824-21921]:Block[21592-21689]"
  }, {
    "left" : "for (int i = 0; i < virtualSize; i++)",
    "right" : "for (int i = 0; i < virtualSize; i++)",
    "info" : "ForStatement[21834-21915]:ForStatement[21602-21683]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21872-21915]:Block[21640-21683]"
  }, {
    "left" : "setEntry(i, value);",
    "right" : "setEntry(i, value);",
    "info" : "ExpressionStatement[21886-21905]:ExpressionStatement[21654-21673]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[22201-22207]:Modifier[21969-21975]"
  }, {
    "left" : "OpenMapRealVector",
    "right" : "OpenMapRealVector",
    "info" : "SimpleType[22208-22225]:SimpleType[21976-21993]"
  }, {
    "left" : "subtract",
    "right" : "subtract",
    "info" : "SimpleName[22226-22234]:SimpleName[21994-22002]"
  }, {
    "left" : "OpenMapRealVector v",
    "right" : "OpenMapRealVector v",
    "info" : "SingleVariableDeclaration[22235-22254]:SingleVariableDeclaration[22003-22022]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[22263-22287]:SimpleType[22031-22055]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22287-22756]:Block[22055-22524]"
  }, {
    "left" : "checkVectorDimensions(v.getDimension());",
    "right" : "checkVectorDimensions(v.getDimension());",
    "info" : "ExpressionStatement[22297-22337]:ExpressionStatement[22065-22105]"
  }, {
    "left" : "OpenMapRealVector res = copy();",
    "right" : "OpenMapRealVector res = copy();",
    "info" : "VariableDeclarationStatement[22346-22377]:VariableDeclarationStatement[22114-22145]"
  }, {
    "left" : "Iterator iter = v.getEntries().iterator();",
    "right" : "Iterator iter = v.getEntries().iterator();",
    "info" : "VariableDeclarationStatement[22386-22428]:VariableDeclarationStatement[22154-22196]"
  }, {
    "left" : "while (iter.hasNext())",
    "right" : "while (iter.hasNext())",
    "info" : "WhileStatement[22437-22730]:WhileStatement[22205-22498]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22460-22730]:Block[22228-22498]"
  }, {
    "left" : "iter.advance();",
    "right" : "iter.advance();",
    "info" : "ExpressionStatement[22474-22489]:ExpressionStatement[22242-22257]"
  }, {
    "left" : "int key = iter.key();",
    "right" : "int key = iter.key();",
    "info" : "VariableDeclarationStatement[22502-22523]:VariableDeclarationStatement[22270-22291]"
  }, {
    "left" : "if (entries.containsKey(key))",
    "right" : "if (entries.containsKey(key))",
    "info" : "IfStatement[22536-22720]:IfStatement[22304-22488]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22566-22649]:Block[22334-22417]"
  }, {
    "left" : "res.setEntry(key, entries.get(key) - iter.value());",
    "right" : "res.setEntry(key, entries.get(key) - iter.value());",
    "info" : "ExpressionStatement[22584-22635]:ExpressionStatement[22352-22403]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22655-22720]:Block[22423-22488]"
  }, {
    "left" : "res.setEntry(key, -iter.value());",
    "right" : "res.setEntry(key, -iter.value());",
    "info" : "ExpressionStatement[22673-22706]:ExpressionStatement[22441-22474]"
  }, {
    "left" : "return res;",
    "right" : "return res;",
    "info" : "ReturnStatement[22739-22750]:ReturnStatement[22507-22518]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[22787-22793]:Modifier[22555-22561]"
  }, {
    "left" : "OpenMapRealVector",
    "right" : "OpenMapRealVector",
    "info" : "SimpleType[22794-22811]:SimpleType[22562-22579]"
  }, {
    "left" : "subtract",
    "right" : "subtract",
    "info" : "SimpleName[22812-22820]:SimpleName[22580-22588]"
  }, {
    "left" : "RealVector v",
    "right" : "RealVector v",
    "info" : "SingleVariableDeclaration[22821-22833]:SingleVariableDeclaration[22589-22601]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[22842-22866]:SimpleType[22610-22634]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22867-23069]:Block[22635-22837]"
  }, {
    "left" : "checkVectorDimensions(v.getDimension());",
    "right" : "checkVectorDimensions(v.getDimension());",
    "info" : "ExpressionStatement[22877-22917]:ExpressionStatement[22645-22685]"
  }, {
    "left" : "if (v instanceof OpenMapRealVector)",
    "right" : "if (v instanceof OpenMapRealVector)",
    "info" : "IfStatement[22926-23025]:IfStatement[22694-22793]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22962-23025]:Block[22730-22793]"
  }, {
    "left" : "return subtract((OpenMapRealVector) v);",
    "right" : "return subtract((OpenMapRealVector) v);",
    "info" : "ReturnStatement[22976-23015]:ReturnStatement[22744-22783]"
  }, {
    "left" : "return subtract(v.getData());",
    "right" : "return subtract(v.getData());",
    "info" : "ReturnStatement[23034-23063]:ReturnStatement[22802-22831]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[23100-23106]:Modifier[22868-22874]"
  }, {
    "left" : "OpenMapRealVector",
    "right" : "OpenMapRealVector",
    "info" : "SimpleType[23107-23124]:SimpleType[22875-22892]"
  }, {
    "left" : "subtract",
    "right" : "subtract",
    "info" : "SimpleName[23125-23133]:SimpleName[22893-22901]"
  }, {
    "left" : "double[] v",
    "right" : "double[] v",
    "info" : "SingleVariableDeclaration[23134-23144]:SingleVariableDeclaration[22902-22912]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[23153-23177]:SimpleType[22921-22945]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23178-23535]:Block[22946-23303]"
  }, {
    "left" : "checkVectorDimensions(v.length);",
    "right" : "checkVectorDimensions(v.length);",
    "info" : "ExpressionStatement[23188-23220]:ExpressionStatement[22956-22988]"
  }, {
    "left" : "OpenMapRealVector res = new OpenMapRealVector(this);",
    "right" : "OpenMapRealVector res = new OpenMapRealVector(this);",
    "info" : "VariableDeclarationStatement[23229-23281]:VariableDeclarationStatement[22997-23049]"
  }, {
    "left" : "for (int i = 0; i < v.length; i++)",
    "right" : "for (int i = 0; i < v.length; i++)",
    "info" : "ForStatement[23290-23509]:ForStatement[23058-23277]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23325-23509]:Block[23093-23277]"
  }, {
    "left" : "if (entries.containsKey(i))",
    "right" : "if (entries.containsKey(i))",
    "info" : "IfStatement[23339-23499]:IfStatement[23107-23267]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23367-23438]:Block[23135-23206]"
  }, {
    "left" : "res.setEntry(i, entries.get(i) - v[i]);",
    "right" : "res.setEntry(i, entries.get(i) - v[i]);",
    "info" : "ExpressionStatement[23385-23424]:ExpressionStatement[23153-23192]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23444-23499]:Block[23212-23267]"
  }, {
    "left" : "res.setEntry(i, -v[i]);",
    "right" : "res.setEntry(i, -v[i]);",
    "info" : "ExpressionStatement[23462-23485]:ExpressionStatement[23230-23253]"
  }, {
    "left" : "return res;",
    "right" : "return res;",
    "info" : "ReturnStatement[23518-23529]:ReturnStatement[23286-23297]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[23567-23573]:Modifier[23335-23341]"
  }, {
    "left" : "OpenMapRealVector",
    "right" : "OpenMapRealVector",
    "info" : "SimpleType[23574-23591]:SimpleType[23342-23359]"
  }, {
    "left" : "unitVector",
    "right" : "unitVector",
    "info" : "SimpleName[23592-23602]:SimpleName[23360-23370]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23605-23695]:Block[23373-23463]"
  }, {
    "left" : "OpenMapRealVector res = copy();",
    "right" : "OpenMapRealVector res = copy();",
    "info" : "VariableDeclarationStatement[23615-23646]:VariableDeclarationStatement[23383-23414]"
  }, {
    "left" : "res.unitize();",
    "right" : "res.unitize();",
    "info" : "ExpressionStatement[23655-23669]:ExpressionStatement[23423-23437]"
  }, {
    "left" : "return res;",
    "right" : "return res;",
    "info" : "ReturnStatement[23678-23689]:ReturnStatement[23446-23457]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[23726-23732]:Modifier[23494-23500]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[23733-23737]:PrimitiveType[23501-23505]"
  }, {
    "left" : "unitize",
    "right" : "unitize",
    "info" : "SimpleName[23738-23745]:SimpleName[23506-23513]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23748-24114]:Block[23516-23882]"
  }, {
    "left" : "double norm = getNorm();",
    "right" : "double norm = getNorm();",
    "info" : "VariableDeclarationStatement[23758-23782]:VariableDeclarationStatement[23526-23550]"
  }, {
    "left" : "if (isDefaultValue(norm))",
    "right" : "if (isDefaultValue(norm))",
    "info" : "IfStatement[23791-23934]:IfStatement[23559-23702]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23817-23934]:Block[23585-23702]"
  }, {
    "left" : "throw  MathRuntimeException.createArithmeticException(\"cannot normalize a zero norm vector\");",
    "right" : "throw  MathRuntimeException.createArithmeticException(\"cannot normalize a zero norm vector\");",
    "info" : "ThrowStatement[23831-23924]:ThrowStatement[23599-23692]"
  }, {
    "left" : "Iterator iter = entries.iterator();",
    "right" : "Iterator iter = entries.iterator();",
    "info" : "VariableDeclarationStatement[23943-23978]:VariableDeclarationStatement[23711-23746]"
  }, {
    "left" : "while (iter.hasNext())",
    "right" : "while (iter.hasNext())",
    "info" : "WhileStatement[23987-24107]:WhileStatement[23755-23875]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24010-24107]:Block[23778-23875]"
  }, {
    "left" : "iter.advance();",
    "right" : "iter.advance();",
    "info" : "ExpressionStatement[24024-24039]:ExpressionStatement[23792-23807]"
  }, {
    "left" : "entries.put(iter.key(), iter.value() / norm);",
    "right" : "entries.put(iter.key(), iter.value() / norm);",
    "info" : "ExpressionStatement[24052-24097]:ExpressionStatement[23820-23865]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24146-24152]:Modifier[23914-23920]"
  }, {
    "left" : "double[]",
    "right" : "double[]",
    "info" : "ArrayType[24153-24161]:ArrayType[23921-23929]"
  }, {
    "left" : "toArray",
    "right" : "toArray",
    "info" : "SimpleName[24162-24169]:SimpleName[23930-23937]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24172-24205]:Block[23940-23973]"
  }, {
    "left" : "return getData();",
    "right" : "return getData();",
    "info" : "ReturnStatement[24182-24199]:ReturnStatement[23950-23967]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[24443-24452]:MarkerAnnotation[24211-24220]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24457-24463]:Modifier[24225-24231]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[24464-24467]:PrimitiveType[24232-24235]"
  }, {
    "left" : "hashCode",
    "right" : "hashCode",
    "info" : "SimpleName[24468-24476]:SimpleName[24236-24244]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24479-24981]:Block[24247-24749]"
  }, {
    "left" : "final int prime = 31;",
    "right" : "final int prime = 31;",
    "info" : "VariableDeclarationStatement[24489-24510]:VariableDeclarationStatement[24257-24278]"
  }, {
    "left" : "int result = 1;",
    "right" : "int result = 1;",
    "info" : "VariableDeclarationStatement[24519-24534]:VariableDeclarationStatement[24287-24302]"
  }, {
    "left" : "long temp;",
    "right" : "long temp;",
    "info" : "VariableDeclarationStatement[24543-24553]:VariableDeclarationStatement[24311-24321]"
  }, {
    "left" : "temp = Double.doubleToLongBits(epsilon);",
    "right" : "temp = Double.doubleToLongBits(epsilon);",
    "info" : "ExpressionStatement[24562-24602]:ExpressionStatement[24330-24370]"
  }, {
    "left" : "result = prime * result + (int) (temp ^ (temp >>> 32));",
    "right" : "result = prime * result + (int) (temp ^ (temp >>> 32));",
    "info" : "ExpressionStatement[24611-24666]:ExpressionStatement[24379-24434]"
  }, {
    "left" : "result = prime * result + virtualSize;",
    "right" : "result = prime * result + virtualSize;",
    "info" : "ExpressionStatement[24675-24713]:ExpressionStatement[24443-24481]"
  }, {
    "left" : "Iterator iter = entries.iterator();",
    "right" : "Iterator iter = entries.iterator();",
    "info" : "VariableDeclarationStatement[24722-24757]:VariableDeclarationStatement[24490-24525]"
  }, {
    "left" : "while (iter.hasNext())",
    "right" : "while (iter.hasNext())",
    "info" : "WhileStatement[24766-24952]:WhileStatement[24534-24720]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24789-24952]:Block[24557-24720]"
  }, {
    "left" : "iter.advance();",
    "right" : "iter.advance();",
    "info" : "ExpressionStatement[24803-24818]:ExpressionStatement[24571-24586]"
  }, {
    "left" : "temp = Double.doubleToLongBits(iter.value());",
    "right" : "temp = Double.doubleToLongBits(iter.value());",
    "info" : "ExpressionStatement[24831-24876]:ExpressionStatement[24599-24644]"
  }, {
    "left" : "result = prime * result + (int) (temp ^ (temp >>32));",
    "right" : "result = prime * result + (int) (temp ^ (temp >>32));",
    "info" : "ExpressionStatement[24889-24942]:ExpressionStatement[24657-24710]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[24961-24975]:ReturnStatement[24729-24743]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[25226-25235]:MarkerAnnotation[24994-25003]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[25240-25246]:Modifier[25008-25014]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[25247-25254]:PrimitiveType[25015-25022]"
  }, {
    "left" : "equals",
    "right" : "equals",
    "info" : "SimpleName[25255-25261]:SimpleName[25023-25029]"
  }, {
    "left" : "Object obj",
    "right" : "Object obj",
    "info" : "SingleVariableDeclaration[25262-25272]:SingleVariableDeclaration[25030-25040]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25274-26397]:Block[25042-26165]"
  }, {
    "left" : "if (this == obj)",
    "right" : "if (this == obj)",
    "info" : "IfStatement[25284-25337]:IfStatement[25052-25105]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25301-25337]:Block[25069-25105]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[25315-25327]:ReturnStatement[25083-25095]"
  }, {
    "left" : "if (obj == null)",
    "right" : "if (obj == null)",
    "info" : "IfStatement[25346-25400]:IfStatement[25114-25168]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25363-25400]:Block[25131-25168]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[25377-25390]:ReturnStatement[25145-25158]"
  }, {
    "left" : "if (!(obj instanceof OpenMapRealVector))",
    "right" : "if (!(obj instanceof OpenMapRealVector))",
    "info" : "IfStatement[25409-25487]:IfStatement[25177-25255]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25450-25487]:Block[25218-25255]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[25464-25477]:ReturnStatement[25232-25245]"
  }, {
    "left" : "OpenMapRealVector other = (OpenMapRealVector) obj;",
    "right" : "OpenMapRealVector other = (OpenMapRealVector) obj;",
    "info" : "VariableDeclarationStatement[25496-25546]:VariableDeclarationStatement[25264-25314]"
  }, {
    "left" : "if (virtualSize != other.virtualSize)",
    "right" : "if (virtualSize != other.virtualSize)",
    "info" : "IfStatement[25555-25630]:IfStatement[25323-25398]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25593-25630]:Block[25361-25398]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[25607-25620]:ReturnStatement[25375-25388]"
  }, {
    "left" : "if (Double.doubleToLongBits(epsilon) !=\n            Double.doubleToLongBits(other.epsilon))",
    "right" : "if (Double.doubleToLongBits(epsilon) !=\n            Double.doubleToLongBits(other.epsilon))",
    "info" : "IfStatement[25639-25768]:IfStatement[25407-25536]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25731-25768]:Block[25499-25536]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[25745-25758]:ReturnStatement[25513-25526]"
  }, {
    "left" : "Iterator iter = entries.iterator();",
    "right" : "Iterator iter = entries.iterator();",
    "info" : "VariableDeclarationStatement[25777-25812]:VariableDeclarationStatement[25545-25580]"
  }, {
    "left" : "while (iter.hasNext())",
    "right" : "while (iter.hasNext())",
    "info" : "WhileStatement[25821-26071]:WhileStatement[25589-25839]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25844-26071]:Block[25612-25839]"
  }, {
    "left" : "iter.advance();",
    "right" : "iter.advance();",
    "info" : "ExpressionStatement[25858-25873]:ExpressionStatement[25626-25641]"
  }, {
    "left" : "double test = other.getEntry(iter.key());",
    "right" : "double test = other.getEntry(iter.key());",
    "info" : "VariableDeclarationStatement[25886-25927]:VariableDeclarationStatement[25654-25695]"
  }, {
    "left" : "if (Double.doubleToLongBits(test) != Double.doubleToLongBits(iter.value()))",
    "right" : "if (Double.doubleToLongBits(test) != Double.doubleToLongBits(iter.value()))",
    "info" : "IfStatement[25940-26061]:IfStatement[25708-25829]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26016-26061]:Block[25784-25829]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[26034-26047]:ReturnStatement[25802-25815]"
  }, {
    "left" : "iter = other.getEntries().iterator();",
    "right" : "iter = other.getEntries().iterator();",
    "info" : "ExpressionStatement[26080-26117]:ExpressionStatement[25848-25885]"
  }, {
    "left" : "while (iter.hasNext())",
    "right" : "while (iter.hasNext())",
    "info" : "WhileStatement[26126-26370]:WhileStatement[25894-26138]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26149-26370]:Block[25917-26138]"
  }, {
    "left" : "iter.advance();",
    "right" : "iter.advance();",
    "info" : "ExpressionStatement[26163-26178]:ExpressionStatement[25931-25946]"
  }, {
    "left" : "double test = iter.value();",
    "right" : "double test = iter.value();",
    "info" : "VariableDeclarationStatement[26191-26218]:VariableDeclarationStatement[25959-25986]"
  }, {
    "left" : "if (Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry(iter.key())))",
    "right" : "if (Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry(iter.key())))",
    "info" : "IfStatement[26231-26360]:IfStatement[25999-26128]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26315-26360]:Block[26083-26128]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[26333-26346]:ReturnStatement[26101-26114]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[26379-26391]:ReturnStatement[26147-26159]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[26500-26506]:Modifier[26268-26274]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[26507-26513]:PrimitiveType[26275-26281]"
  }, {
    "left" : "getSparcity",
    "right" : "getSparcity",
    "info" : "SimpleName[26514-26525]:SimpleName[26282-26293]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26528-26597]:Block[26296-26365]"
  }, {
    "left" : "return (double)entries.size()/(double)getDimension();",
    "right" : "return (double)entries.size()/(double)getDimension();",
    "info" : "ReturnStatement[26538-26591]:ReturnStatement[26306-26359]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[26628-26634]:Modifier[26396-26402]"
  }, {
    "left" : "java.util.Iterator<Entry>",
    "right" : "java.util.Iterator<Entry>",
    "info" : "ParameterizedType[26635-26660]:ParameterizedType[26403-26428]"
  }, {
    "left" : "sparseIterator",
    "right" : "sparseIterator",
    "info" : "SimpleName[26661-26675]:SimpleName[26429-26443]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26678-26729]:Block[26446-26497]"
  }, {
    "left" : "return new OpenMapSparseIterator();",
    "right" : "return new OpenMapSparseIterator();",
    "info" : "ReturnStatement[26688-26723]:ReturnStatement[26456-26491]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[26968-26977]:Modifier[26736-26745]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[26978-26983]:TYPE_DECLARATION_KIND[26746-26751]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[27238-27247]:Modifier[27006-27015]"
  }, {
    "left" : "OpenMapEntry",
    "right" : "OpenMapEntry",
    "info" : "SimpleName[27248-27260]:SimpleName[27016-27028]"
  }, {
    "left" : "Iterator iter",
    "right" : "Iterator iter",
    "info" : "SingleVariableDeclaration[27261-27274]:SingleVariableDeclaration[27029-27042]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27276-27317]:Block[27044-27085]"
  }, {
    "left" : "this.iter = iter;",
    "right" : "this.iter = iter;",
    "info" : "ExpressionStatement[27290-27307]:ExpressionStatement[27058-27075]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[27356-27365]:MarkerAnnotation[27124-27133]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27374-27380]:Modifier[27142-27148]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[27381-27387]:PrimitiveType[27149-27155]"
  }, {
    "left" : "getValue",
    "right" : "getValue",
    "info" : "SimpleName[27388-27396]:SimpleName[27156-27164]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27399-27443]:Block[27167-27211]"
  }, {
    "left" : "return iter.value();",
    "right" : "return iter.value();",
    "info" : "ReturnStatement[27413-27433]:ReturnStatement[27181-27201]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[27482-27491]:MarkerAnnotation[27250-27259]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27500-27506]:Modifier[27268-27274]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[27507-27511]:PrimitiveType[27275-27279]"
  }, {
    "left" : "setValue",
    "right" : "setValue",
    "info" : "SimpleName[27512-27520]:SimpleName[27280-27288]"
  }, {
    "left" : "double value",
    "right" : "double value",
    "info" : "SingleVariableDeclaration[27521-27533]:SingleVariableDeclaration[27289-27301]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27535-27590]:Block[27303-27358]"
  }, {
    "left" : "entries.put(iter.key(), value);",
    "right" : "entries.put(iter.key(), value);",
    "info" : "ExpressionStatement[27549-27580]:ExpressionStatement[27317-27348]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[27629-27638]:MarkerAnnotation[27397-27406]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27647-27653]:Modifier[27415-27421]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[27654-27657]:PrimitiveType[27422-27425]"
  }, {
    "left" : "getIndex",
    "right" : "getIndex",
    "info" : "SimpleName[27658-27666]:SimpleName[27426-27434]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27669-27711]:Block[27437-27479]"
  }, {
    "left" : "return iter.key();",
    "right" : "return iter.key();",
    "info" : "ReturnStatement[27683-27701]:ReturnStatement[27451-27469]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[27910-27919]:Modifier[27678-27687]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[27920-27925]:TYPE_DECLARATION_KIND[27688-27693]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[28173-28182]:Modifier[27941-27950]"
  }, {
    "left" : "OpenMapSparseIterator",
    "right" : "OpenMapSparseIterator",
    "info" : "SimpleName[28183-28204]:SimpleName[27951-27972]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28207-28303]:Block[27975-28071]"
  }, {
    "left" : "iter = entries.iterator();",
    "right" : "iter = entries.iterator();",
    "info" : "ExpressionStatement[28221-28247]:ExpressionStatement[27989-28015]"
  }, {
    "left" : "current = new OpenMapEntry(iter);",
    "right" : "current = new OpenMapEntry(iter);",
    "info" : "ExpressionStatement[28260-28293]:ExpressionStatement[28028-28061]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[28342-28348]:Modifier[28110-28116]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[28349-28356]:PrimitiveType[28117-28124]"
  }, {
    "left" : "hasNext",
    "right" : "hasNext",
    "info" : "SimpleName[28357-28364]:SimpleName[28125-28132]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28367-28413]:Block[28135-28181]"
  }, {
    "left" : "return iter.hasNext();",
    "right" : "return iter.hasNext();",
    "info" : "ReturnStatement[28381-28403]:ReturnStatement[28149-28171]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[28452-28458]:Modifier[28220-28226]"
  }, {
    "left" : "Entry",
    "right" : "Entry",
    "info" : "SimpleType[28459-28464]:SimpleType[28227-28232]"
  }, {
    "left" : "next",
    "right" : "next",
    "info" : "SimpleName[28465-28469]:SimpleName[28233-28237]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28472-28539]:Block[28240-28307]"
  }, {
    "left" : "iter.advance();",
    "right" : "iter.advance();",
    "info" : "ExpressionStatement[28486-28501]:ExpressionStatement[28254-28269]"
  }, {
    "left" : "return current;",
    "right" : "return current;",
    "info" : "ReturnStatement[28514-28529]:ReturnStatement[28282-28297]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[28578-28584]:Modifier[28346-28352]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[28585-28589]:PrimitiveType[28353-28357]"
  }, {
    "left" : "remove",
    "right" : "remove",
    "info" : "SimpleName[28590-28596]:SimpleName[28358-28364]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28599-28679]:Block[28367-28447]"
  }, {
    "left" : "throw new UnsupportedOperationException(\"Not supported\");",
    "right" : "throw new UnsupportedOperationException(\"Not supported\");",
    "info" : "ThrowStatement[28613-28670]:ThrowStatement[28381-28438]"
  } ]
}