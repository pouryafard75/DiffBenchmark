{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private final MockCreationValidator creationValidator;",
      "right" : "private final MockCreationValidator creationValidator;",
      "info" : "FieldDeclaration[800-854]:FieldDeclaration[800-854]"
    }, {
      "left" : "public MockUtil(MockCreationValidator creationValidator)",
      "right" : "public MockUtil(MockCreationValidator creationValidator)",
      "info" : "MethodDeclaration[862-980]:MethodDeclaration[862-980]"
    }, {
      "left" : "public MockUtil()",
      "right" : "public MockUtil()",
      "info" : "MethodDeclaration[992-1062]:MethodDeclaration[992-1062]"
    }, {
      "left" : "public <T> T createMock(Class<T> classToMock, MockSettingsImpl settings)",
      "right" : "public <T> T createMock(Class<T> classToMock, MockSettingsImpl settings)",
      "info" : "MethodDeclaration[1070-2250]:MethodDeclaration[1070-2250]"
    }, {
      "left" : "private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings)",
      "right" : "private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings)",
      "info" : "MethodDeclaration[2707-3078]:MethodDeclaration[2540-2911]"
    }, {
      "left" : "public <T> MockHandlerInterface<T> getMockHandler(T mock)",
      "right" : "public <T> MockHandlerInterface<T> getMockHandler(T mock)",
      "info" : "MethodDeclaration[3086-3521]:MethodDeclaration[2919-3354]"
    }, {
      "left" : "private <T> boolean isMockitoMock(T mock)",
      "right" : "private <T> boolean isMockitoMock(T mock)",
      "info" : "MethodDeclaration[3529-3625]:MethodDeclaration[3362-3458]"
    }, {
      "left" : "public boolean isMock(Object mock)",
      "right" : "public boolean isMock(Object mock)",
      "info" : "MethodDeclaration[3633-3729]:MethodDeclaration[3466-3562]"
    }, {
      "left" : "private <T> MethodInterceptorFilter getInterceptor(T mock)",
      "right" : "private <T> MethodInterceptorFilter getInterceptor(T mock)",
      "info" : "MethodDeclaration[3737-4129]:MethodDeclaration[3570-3962]"
    }, {
      "left" : "public MockName getMockName(Object mock)",
      "right" : "public MockName getMockName(Object mock)",
      "info" : "MethodDeclaration[4137-4256]:MethodDeclaration[3970-4089]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[919-980]:Block[919-980]"
    }, {
      "left" : "this.creationValidator = creationValidator;",
      "right" : "this.creationValidator = creationValidator;",
      "info" : "ExpressionStatement[930-973]:ExpressionStatement[930-973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1010-1062]:Block[1010-1062]"
    }, {
      "left" : "this(new MockCreationValidator());",
      "right" : "this(new MockCreationValidator());",
      "info" : "ConstructorInvocation[1021-1055]:ConstructorInvocation[1021-1055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1143-2250]:Block[1143-2250]"
    }, {
      "left" : "creationValidator.validateType(classToMock);",
      "right" : "creationValidator.validateType(classToMock);",
      "info" : "ExpressionStatement[1154-1198]:ExpressionStatement[1154-1198]"
    }, {
      "left" : "creationValidator.validateExtraInterfaces(classToMock, settings.getExtraInterfaces());",
      "right" : "creationValidator.validateExtraInterfaces(classToMock, settings.getExtraInterfaces());",
      "info" : "ExpressionStatement[1208-1294]:ExpressionStatement[1208-1294]"
    }, {
      "left" : "creationValidator.validateMockedType(classToMock, settings.getSpiedInstance());",
      "right" : "creationValidator.validateMockedType(classToMock, settings.getSpiedInstance());",
      "info" : "ExpressionStatement[1304-1383]:ExpressionStatement[1304-1383]"
    }, {
      "left" : "settings.initiateMockName(classToMock);",
      "right" : "settings.initiateMockName(classToMock);",
      "info" : "ExpressionStatement[1395-1434]:ExpressionStatement[1395-1434]"
    }, {
      "left" : "MethodInterceptorFilter filter = newMethodInterceptorFilter(settings);",
      "right" : "MethodInterceptorFilter filter = newMethodInterceptorFilter(settings);",
      "info" : "VariableDeclarationStatement[1446-1516]:VariableDeclarationStatement[1446-1516]"
    }, {
      "left" : "Class<?>[] interfaces = settings.getExtraInterfaces();",
      "right" : "Class<?>[] interfaces = settings.getExtraInterfaces();",
      "info" : "VariableDeclarationStatement[1526-1580]:VariableDeclarationStatement[1526-1580]"
    }, {
      "left" : "Class<?>[] ancillaryTypes;",
      "right" : "Class<?>[] ancillaryTypes;",
      "info" : "VariableDeclarationStatement[1592-1618]:VariableDeclarationStatement[1592-1618]"
    }, {
      "left" : "if (settings.isSerializable())",
      "right" : "if (settings.isSerializable())",
      "info" : "IfStatement[1628-1916]:IfStatement[1628-1916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1659-1817]:Block[1659-1817]"
    }, {
      "left" : "ancillaryTypes = interfaces == null ? new Class<?>[] {Serializable.class} : new ArrayUtils().concat(interfaces, Serializable.class);",
      "right" : "ancillaryTypes = interfaces == null ? new Class<?>[] {Serializable.class} : new ArrayUtils().concat(interfaces, Serializable.class);",
      "info" : "ExpressionStatement[1674-1806]:ExpressionStatement[1674-1806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1823-1916]:Block[1823-1916]"
    }, {
      "left" : "ancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces;",
      "right" : "ancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces;",
      "info" : "ExpressionStatement[1838-1905]:ExpressionStatement[1838-1905]"
    }, {
      "left" : "Object spiedInstance = settings.getSpiedInstance();",
      "right" : "Object spiedInstance = settings.getSpiedInstance();",
      "info" : "VariableDeclarationStatement[1928-1979]:VariableDeclarationStatement[1928-1979]"
    }, {
      "left" : "T mock = ClassImposterizer.INSTANCE.imposterise(filter, classToMock, ancillaryTypes);",
      "right" : "T mock = ClassImposterizer.INSTANCE.imposterise(filter, classToMock, ancillaryTypes);",
      "info" : "VariableDeclarationStatement[1999-2084]:VariableDeclarationStatement[1999-2084]"
    }, {
      "left" : "if (spiedInstance != null)",
      "right" : "if (spiedInstance != null)",
      "info" : "IfStatement[2104-2211]:IfStatement[2104-2211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2131-2211]:Block[2131-2211]"
    }, {
      "left" : "new LenientCopyTool().copyToMock(spiedInstance, mock);",
      "right" : "new LenientCopyTool().copyToMock(spiedInstance, mock);",
      "info" : "ExpressionStatement[2146-2200]:ExpressionStatement[2146-2200]"
    }, {
      "left" : "return mock;",
      "right" : "return mock;",
      "info" : "ReturnStatement[2231-2243]:ReturnStatement[2231-2243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2797-3078]:Block[2630-2911]"
    }, {
      "left" : "MockHandler<T> mockHandler = new MockHandler<T>(settings);",
      "right" : "MockHandler<T> mockHandler = new MockHandler<T>(settings);",
      "info" : "VariableDeclarationStatement[2808-2866]:VariableDeclarationStatement[2641-2699]"
    }, {
      "left" : "InvocationNotifierHandler<T> invocationNotifierHandler = new InvocationNotifierHandler<T>(mockHandler, settings);",
      "right" : "InvocationNotifierHandler<T> invocationNotifierHandler = new InvocationNotifierHandler<T>(mockHandler, settings);",
      "info" : "VariableDeclarationStatement[2876-2989]:VariableDeclarationStatement[2709-2822]"
    }, {
      "left" : "return new MethodInterceptorFilter(invocationNotifierHandler, settings);",
      "right" : "return new MethodInterceptorFilter(invocationNotifierHandler, settings);",
      "info" : "ReturnStatement[2999-3071]:ReturnStatement[2832-2904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3144-3521]:Block[2977-3354]"
    }, {
      "left" : "if (mock == null)",
      "right" : "if (mock == null)",
      "info" : "IfStatement[3155-3270]:IfStatement[2988-3103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3173-3270]:Block[3006-3103]"
    }, {
      "left" : "throw new NotAMockException(\"Argument should be a mock, but is null!\");",
      "right" : "throw new NotAMockException(\"Argument should be a mock, but is null!\");",
      "info" : "ThrowStatement[3188-3259]:ThrowStatement[3021-3092]"
    }, {
      "left" : "if (isMockitoMock(mock))",
      "right" : "if (isMockitoMock(mock))",
      "info" : "IfStatement[3282-3514]:IfStatement[3115-3347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3307-3397]:Block[3140-3230]"
    }, {
      "left" : "return (MockHandlerInterface) getInterceptor(mock).getHandler();",
      "right" : "return (MockHandlerInterface) getInterceptor(mock).getHandler();",
      "info" : "ReturnStatement[3322-3386]:ReturnStatement[3155-3219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3403-3514]:Block[3236-3347]"
    }, {
      "left" : "throw new NotAMockException(\"Argument should be a mock, but is: \" + mock.getClass());",
      "right" : "throw new NotAMockException(\"Argument should be a mock, but is: \" + mock.getClass());",
      "info" : "ThrowStatement[3418-3503]:ThrowStatement[3251-3336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3571-3625]:Block[3404-3458]"
    }, {
      "left" : "return getInterceptor(mock) != null;",
      "right" : "return getInterceptor(mock) != null;",
      "info" : "ReturnStatement[3582-3618]:ReturnStatement[3415-3451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3668-3729]:Block[3501-3562]"
    }, {
      "left" : "return mock != null && isMockitoMock(mock);",
      "right" : "return mock != null && isMockitoMock(mock);",
      "info" : "ReturnStatement[3679-3722]:ReturnStatement[3512-3555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3796-4129]:Block[3629-3962]"
    }, {
      "left" : "if (!(mock instanceof Factory))",
      "right" : "if (!(mock instanceof Factory))",
      "info" : "IfStatement[3807-3877]:IfStatement[3640-3710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3839-3877]:Block[3672-3710]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3854-3866]:ReturnStatement[3687-3699]"
    }, {
      "left" : "Factory factory = (Factory) mock;",
      "right" : "Factory factory = (Factory) mock;",
      "info" : "VariableDeclarationStatement[3887-3920]:VariableDeclarationStatement[3720-3753]"
    }, {
      "left" : "Callback callback = factory.getCallback(0);",
      "right" : "Callback callback = factory.getCallback(0);",
      "info" : "VariableDeclarationStatement[3930-3973]:VariableDeclarationStatement[3763-3806]"
    }, {
      "left" : "if (callback instanceof MethodInterceptorFilter)",
      "right" : "if (callback instanceof MethodInterceptorFilter)",
      "info" : "IfStatement[3983-4100]:IfStatement[3816-3933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4032-4100]:Block[3865-3933]"
    }, {
      "left" : "return (MethodInterceptorFilter) callback;",
      "right" : "return (MethodInterceptorFilter) callback;",
      "info" : "ReturnStatement[4047-4089]:ReturnStatement[3880-3922]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[4110-4122]:ReturnStatement[3943-3955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4178-4256]:Block[4011-4089]"
    }, {
      "left" : "return getMockHandler(mock).getMockSettings().getMockName();",
      "right" : "return getMockHandler(mock).getMockSettings().getMockName();",
      "info" : "ReturnStatement[4189-4249]:ReturnStatement[4022-4082]"
    } ]
  },
  "interFileMappings" : { }
}