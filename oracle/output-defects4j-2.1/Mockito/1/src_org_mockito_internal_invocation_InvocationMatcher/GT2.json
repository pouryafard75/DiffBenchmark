{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "InvocationMatcher",
      "right" : "InvocationMatcher",
      "info" : "TypeDeclaration[718-6628]:TypeDeclaration[718-7233]"
    }, {
      "left" : "private static final long serialVersionUID = -3047126096857467610L;",
      "right" : "private static final long serialVersionUID = -3047126096857467610L;",
      "info" : "FieldDeclaration[864-931]:FieldDeclaration[864-931]"
    }, {
      "left" : "private final Invocation invocation;",
      "right" : "private final Invocation invocation;",
      "info" : "FieldDeclaration[936-972]:FieldDeclaration[936-972]"
    }, {
      "left" : "private final List<Matcher> matchers;",
      "right" : "private final List<Matcher> matchers;",
      "info" : "FieldDeclaration[977-1014]:FieldDeclaration[977-1014]"
    }, {
      "left" : "public InvocationMatcher(Invocation invocation, List<Matcher> matchers)",
      "right" : "public InvocationMatcher(Invocation invocation, List<Matcher> matchers)",
      "info" : "MethodDeclaration[1020-1331]:MethodDeclaration[1020-1331]"
    }, {
      "left" : "public InvocationMatcher(Invocation invocation)",
      "right" : "public InvocationMatcher(Invocation invocation)",
      "info" : "MethodDeclaration[1341-1456]:MethodDeclaration[1341-1456]"
    }, {
      "left" : "public Method getMethod()",
      "right" : "public Method getMethod()",
      "info" : "MethodDeclaration[1462-1534]:MethodDeclaration[1462-1534]"
    }, {
      "left" : "public Invocation getInvocation()",
      "right" : "public Invocation getInvocation()",
      "info" : "MethodDeclaration[1544-1617]:MethodDeclaration[1544-1617]"
    }, {
      "left" : "public List<Matcher> getMatchers()",
      "right" : "public List<Matcher> getMatchers()",
      "info" : "MethodDeclaration[1627-1699]:MethodDeclaration[1627-1699]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[1709-1805]:MethodDeclaration[1709-1805]"
    }, {
      "left" : "public boolean matches(Invocation actual)",
      "right" : "public boolean matches(Invocation actual)",
      "info" : "MethodDeclaration[1811-2037]:MethodDeclaration[1811-2037]"
    }, {
      "left" : "private boolean safelyArgumentsMatch(Object[] actualArgs)",
      "right" : "private boolean safelyArgumentsMatch(Object[] actualArgs)",
      "info" : "MethodDeclaration[2043-2269]:MethodDeclaration[2043-2269]"
    }, {
      "left" : "public boolean hasSimilarMethod(Invocation candidate)",
      "right" : "public boolean hasSimilarMethod(Invocation candidate)",
      "info" : "MethodDeclaration[2275-3166]:MethodDeclaration[2275-3166]"
    }, {
      "left" : "public boolean hasSameMethod(Invocation candidate)",
      "right" : "public boolean hasSameMethod(Invocation candidate)",
      "info" : "MethodDeclaration[3172-4008]:MethodDeclaration[3172-4008]"
    }, {
      "left" : "public Location getLocation()",
      "right" : "public Location getLocation()",
      "info" : "MethodDeclaration[4018-4096]:MethodDeclaration[4018-4096]"
    }, {
      "left" : "public void captureArgumentsFrom(Invocation invocation)",
      "right" : "public void captureArgumentsFrom(Invocation invocation)",
      "info" : "MethodDeclaration[4102-5671]:MethodDeclaration[4102-6276]"
    }, {
      "left" : "private boolean isVarargMatcher(Matcher matcher)",
      "right" : "private boolean isVarargMatcher(Matcher matcher)",
      "info" : "MethodDeclaration[5677-5979]:MethodDeclaration[6282-6584]"
    }, {
      "left" : "private boolean isVariableArgument(Invocation invocation, int position)",
      "right" : "private boolean isVariableArgument(Invocation invocation, int position)",
      "info" : "MethodDeclaration[5985-6331]:MethodDeclaration[6590-6936]"
    }, {
      "left" : "public static List<InvocationMatcher> createFrom(List<Invocation> invocations)",
      "right" : "public static List<InvocationMatcher> createFrom(List<Invocation> invocations)",
      "info" : "MethodDeclaration[6337-6626]:MethodDeclaration[6942-7231]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1092-1331]:Block[1092-1331]"
    }, {
      "left" : "this.invocation = invocation;",
      "right" : "this.invocation = invocation;",
      "info" : "ExpressionStatement[1102-1131]:ExpressionStatement[1102-1131]"
    }, {
      "left" : "if (matchers.isEmpty())",
      "right" : "if (matchers.isEmpty())",
      "info" : "IfStatement[1140-1325]:IfStatement[1140-1325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1164-1270]:Block[1164-1270]"
    }, {
      "left" : "this.matchers = ArgumentsProcessor.argumentsToMatchers(invocation.getArguments());",
      "right" : "this.matchers = ArgumentsProcessor.argumentsToMatchers(invocation.getArguments());",
      "info" : "ExpressionStatement[1178-1260]:ExpressionStatement[1178-1260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1276-1325]:Block[1276-1325]"
    }, {
      "left" : "this.matchers = matchers;",
      "right" : "this.matchers = matchers;",
      "info" : "ExpressionStatement[1290-1315]:ExpressionStatement[1290-1315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1389-1456]:Block[1389-1456]"
    }, {
      "left" : "this(invocation, Collections.<Matcher>emptyList());",
      "right" : "this(invocation, Collections.<Matcher>emptyList());",
      "info" : "ConstructorInvocation[1399-1450]:ConstructorInvocation[1399-1450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1488-1534]:Block[1488-1534]"
    }, {
      "left" : "return invocation.getMethod();",
      "right" : "return invocation.getMethod();",
      "info" : "ReturnStatement[1498-1528]:ReturnStatement[1498-1528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1578-1617]:Block[1578-1617]"
    }, {
      "left" : "return this.invocation;",
      "right" : "return this.invocation;",
      "info" : "ReturnStatement[1588-1611]:ReturnStatement[1588-1611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1662-1699]:Block[1662-1699]"
    }, {
      "left" : "return this.matchers;",
      "right" : "return this.matchers;",
      "info" : "ReturnStatement[1672-1693]:ReturnStatement[1672-1693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1734-1805]:Block[1734-1805]"
    }, {
      "left" : "return new PrintSettings().print(matchers, invocation);",
      "right" : "return new PrintSettings().print(matchers, invocation);",
      "info" : "ReturnStatement[1744-1799]:ReturnStatement[1744-1799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1853-2037]:Block[1853-2037]"
    }, {
      "left" : "return invocation.getMock().equals(actual.getMock())\n                && hasSameMethod(actual)\n                && new ArgumentsComparator().argumentsMatch(this, actual);",
      "right" : "return invocation.getMock().equals(actual.getMock())\n                && hasSameMethod(actual)\n                && new ArgumentsComparator().argumentsMatch(this, actual);",
      "info" : "ReturnStatement[1863-2031]:ReturnStatement[1863-2031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2101-2269]:Block[2101-2269]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[2111-2263]:TryStatement[2111-2263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2115-2205]:Block[2115-2205]"
    }, {
      "left" : "return new ArgumentsComparator().argumentsMatch(this, actualArgs);",
      "right" : "return new ArgumentsComparator().argumentsMatch(this, actualArgs);",
      "info" : "ReturnStatement[2129-2195]:ReturnStatement[2129-2195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2226-2263]:Block[2226-2263]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2240-2253]:ReturnStatement[2240-2253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2470-3166]:Block[2470-3166]"
    }, {
      "left" : "String wantedMethodName = getMethod().getName();",
      "right" : "String wantedMethodName = getMethod().getName();",
      "info" : "VariableDeclarationStatement[2480-2528]:VariableDeclarationStatement[2480-2528]"
    }, {
      "left" : "String currentMethodName = candidate.getMethod().getName();",
      "right" : "String currentMethodName = candidate.getMethod().getName();",
      "info" : "VariableDeclarationStatement[2537-2596]:VariableDeclarationStatement[2537-2596]"
    }, {
      "left" : "final boolean methodNameEquals = wantedMethodName.equals(currentMethodName);",
      "right" : "final boolean methodNameEquals = wantedMethodName.equals(currentMethodName);",
      "info" : "VariableDeclarationStatement[2614-2690]:VariableDeclarationStatement[2614-2690]"
    }, {
      "left" : "final boolean isUnverified = !candidate.isVerified();",
      "right" : "final boolean isUnverified = !candidate.isVerified();",
      "info" : "VariableDeclarationStatement[2699-2752]:VariableDeclarationStatement[2699-2752]"
    }, {
      "left" : "final boolean mockIsTheSame = getInvocation().getMock() == candidate.getMock();",
      "right" : "final boolean mockIsTheSame = getInvocation().getMock() == candidate.getMock();",
      "info" : "VariableDeclarationStatement[2761-2840]:VariableDeclarationStatement[2761-2840]"
    }, {
      "left" : "final boolean methodEquals = hasSameMethod(candidate);",
      "right" : "final boolean methodEquals = hasSameMethod(candidate);",
      "info" : "VariableDeclarationStatement[2849-2903]:VariableDeclarationStatement[2849-2903]"
    }, {
      "left" : "if (!methodNameEquals || !isUnverified || !mockIsTheSame)",
      "right" : "if (!methodNameEquals || !isUnverified || !mockIsTheSame)",
      "info" : "IfStatement[2913-3008]:IfStatement[2913-3008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2971-3008]:Block[2971-3008]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2985-2998]:ReturnStatement[2985-2998]"
    }, {
      "left" : "final boolean overloadedButSameArgs = !methodEquals && safelyArgumentsMatch(candidate.getArguments());",
      "right" : "final boolean overloadedButSameArgs = !methodEquals && safelyArgumentsMatch(candidate.getArguments());",
      "info" : "VariableDeclarationStatement[3018-3120]:VariableDeclarationStatement[3018-3120]"
    }, {
      "left" : "return !overloadedButSameArgs;",
      "right" : "return !overloadedButSameArgs;",
      "info" : "ReturnStatement[3130-3160]:ReturnStatement[3130-3160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3223-4008]:Block[3223-4008]"
    }, {
      "left" : "Method m1 = invocation.getMethod();",
      "right" : "Method m1 = invocation.getMethod();",
      "info" : "VariableDeclarationStatement[3406-3441]:VariableDeclarationStatement[3406-3441]"
    }, {
      "left" : "Method m2 = candidate.getMethod();",
      "right" : "Method m2 = candidate.getMethod();",
      "info" : "VariableDeclarationStatement[3450-3484]:VariableDeclarationStatement[3450-3484]"
    }, {
      "left" : "if (m1.getName() != null && m1.getName().equals(m2.getName()))",
      "right" : "if (m1.getName() != null && m1.getName().equals(m2.getName()))",
      "info" : "IfStatement[3502-3980]:IfStatement[3502-3980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3565-3980]:Block[3565-3980]"
    }, {
      "left" : "Class[] params1 = m1.getParameterTypes();",
      "right" : "Class[] params1 = m1.getParameterTypes();",
      "info" : "VariableDeclarationStatement[3623-3664]:VariableDeclarationStatement[3623-3664]"
    }, {
      "left" : "Class[] params2 = m2.getParameterTypes();",
      "right" : "Class[] params2 = m2.getParameterTypes();",
      "info" : "VariableDeclarationStatement[3677-3718]:VariableDeclarationStatement[3677-3718]"
    }, {
      "left" : "if (params1.length == params2.length)",
      "right" : "if (params1.length == params2.length)",
      "info" : "IfStatement[3731-3970]:IfStatement[3731-3970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3769-3970]:Block[3769-3970]"
    }, {
      "left" : "for (int i = 0; i < params1.length; i++)",
      "right" : "for (int i = 0; i < params1.length; i++)",
      "info" : "ForStatement[3787-3927]:ForStatement[3787-3927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3828-3927]:Block[3828-3927]"
    }, {
      "left" : "if (params1[i] != params2[i])",
      "right" : "if (params1[i] != params2[i])",
      "info" : "IfStatement[3846-3909]:IfStatement[3846-3909]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3896-3909]:ReturnStatement[3896-3909]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3944-3956]:ReturnStatement[3944-3956]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3989-4002]:ReturnStatement[3989-4002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4048-4096]:Block[4048-4096]"
    }, {
      "left" : "return invocation.getLocation();",
      "right" : "return invocation.getLocation();",
      "info" : "ReturnStatement[4058-4090]:ReturnStatement[4058-4090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4158-5671]:Block[4158-6276]"
    }, {
      "left" : "if (invocation.getMethod().isVarArgs())",
      "right" : "if (invocation.getMethod().isVarArgs())",
      "info" : "IfStatement[4168-4687]:IfStatement[4168-5292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4208-4348]:Block[4462-4588]"
    }, {
      "left" : "int indexOfVararg = invocation.getRawArguments().length - 1;",
      "right" : "int indexOfVararg = invocation.getRawArguments().length - 1;",
      "info" : "VariableDeclarationStatement[4222-4282]:VariableDeclarationStatement[4222-4282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4354-4687]:Block[4959-5292]"
    }, {
      "left" : "for (int position = 0; position < matchers.size(); position++)",
      "right" : "for (int position = 0; position < matchers.size(); position++)",
      "info" : "ForStatement[4368-4677]:ForStatement[4973-5282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4431-4677]:Block[5036-5282]"
    }, {
      "left" : "Matcher m = matchers.get(position);",
      "right" : "Matcher m = matchers.get(position);",
      "info" : "VariableDeclarationStatement[4449-4484]:VariableDeclarationStatement[5054-5089]"
    }, {
      "left" : "if (m instanceof CapturesArguments)",
      "right" : "if (m instanceof CapturesArguments)",
      "info" : "IfStatement[4501-4663]:IfStatement[5106-5268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4537-4663]:Block[5142-5268]"
    }, {
      "left" : "((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));",
      "right" : "((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));",
      "info" : "ExpressionStatement[4559-4645]:ExpressionStatement[5164-5250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5726-5979]:Block[6331-6584]"
    }, {
      "left" : "Matcher actualMatcher = matcher;",
      "right" : "Matcher actualMatcher = matcher;",
      "info" : "VariableDeclarationStatement[5736-5768]:VariableDeclarationStatement[6341-6373]"
    }, {
      "left" : "if (actualMatcher instanceof MatcherDecorator)",
      "right" : "if (actualMatcher instanceof MatcherDecorator)",
      "info" : "IfStatement[5777-5918]:IfStatement[6382-6523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5824-5918]:Block[6429-6523]"
    }, {
      "left" : "actualMatcher = ((MatcherDecorator) actualMatcher).getActualMatcher();",
      "right" : "actualMatcher = ((MatcherDecorator) actualMatcher).getActualMatcher();",
      "info" : "ExpressionStatement[5838-5908]:ExpressionStatement[6443-6513]"
    }, {
      "left" : "return actualMatcher instanceof VarargMatcher;",
      "right" : "return actualMatcher instanceof VarargMatcher;",
      "info" : "ReturnStatement[5927-5973]:ReturnStatement[6532-6578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6057-6331]:Block[6662-6936]"
    }, {
      "left" : "return invocation.getRawArguments().length - 1 == position\n                && invocation.getRawArguments()[position] != null\n                && invocation.getRawArguments()[position].getClass().isArray()\n                && invocation.getMethod().isVarArgs();",
      "right" : "return invocation.getRawArguments().length - 1 == position\n                && invocation.getRawArguments()[position] != null\n                && invocation.getRawArguments()[position].getClass().isArray()\n                && invocation.getMethod().isVarArgs();",
      "info" : "ReturnStatement[6067-6325]:ReturnStatement[6672-6930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6416-6626]:Block[7021-7231]"
    }, {
      "left" : "LinkedList<InvocationMatcher> out = new LinkedList<InvocationMatcher>();",
      "right" : "LinkedList<InvocationMatcher> out = new LinkedList<InvocationMatcher>();",
      "info" : "VariableDeclarationStatement[6426-6498]:VariableDeclarationStatement[7031-7103]"
    }, {
      "left" : "for (Invocation i : invocations)",
      "right" : "for (Invocation i : invocations)",
      "info" : "EnhancedForStatement[6508-6599]:EnhancedForStatement[7113-7204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6541-6599]:Block[7146-7204]"
    }, {
      "left" : "out.add(new InvocationMatcher(i));",
      "right" : "out.add(new InvocationMatcher(i));",
      "info" : "ExpressionStatement[6555-6589]:ExpressionStatement[7160-7194]"
    }, {
      "left" : "return out;",
      "right" : "return out;",
      "info" : "ReturnStatement[6609-6620]:ReturnStatement[7214-7225]"
    } ]
  },
  "interFileMappings" : { }
}