{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private OutputSettings outputSettings = new OutputSettings();",
      "right" : "private OutputSettings outputSettings = new OutputSettings();",
      "info" : "FieldDeclaration[365-426]:FieldDeclaration[401-462]"
    }, {
      "left" : "private QuirksMode quirksMode = QuirksMode.noQuirks;",
      "right" : "private QuirksMode quirksMode = QuirksMode.noQuirks;",
      "info" : "FieldDeclaration[431-483]:FieldDeclaration[467-519]"
    }, {
      "left" : "public Document(String baseUri)",
      "right" : "public Document(String baseUri)",
      "info" : "MethodDeclaration[489-721]:MethodDeclaration[525-757]"
    }, {
      "left" : "static public Document createShell(String baseUri)",
      "right" : "static public Document createShell(String baseUri)",
      "info" : "MethodDeclaration[727-1210]:MethodDeclaration[763-1246]"
    }, {
      "left" : "public Element head()",
      "right" : "public Element head()",
      "info" : "MethodDeclaration[1216-1397]:MethodDeclaration[1252-1433]"
    }, {
      "left" : "public Element body()",
      "right" : "public Element body()",
      "info" : "MethodDeclaration[1403-1584]:MethodDeclaration[1439-1620]"
    }, {
      "left" : "public void title(String title)",
      "right" : "public void title(String title)",
      "info" : "MethodDeclaration[1979-2465]:MethodDeclaration[2047-2533]"
    }, {
      "left" : "public Element createElement(String tagName)",
      "right" : "public Element createElement(String tagName)",
      "info" : "MethodDeclaration[2471-2798]:MethodDeclaration[2539-2866]"
    }, {
      "left" : "public Document normalise()",
      "right" : "public Document normalise()",
      "info" : "MethodDeclaration[2804-3764]:MethodDeclaration[2872-3832]"
    }, {
      "left" : "private void normaliseTextNodes(Element element)",
      "right" : "private void normaliseTextNodes(Element element)",
      "info" : "MethodDeclaration[3795-4371]:MethodDeclaration[3863-4439]"
    }, {
      "left" : "private void normaliseStructure(String tag, Element htmlEl)",
      "right" : "private void normaliseStructure(String tag, Element htmlEl)",
      "info" : "MethodDeclaration[4493-5335]:MethodDeclaration[4561-5403]"
    }, {
      "left" : "private Element findFirstElementByTagName(String tag, Node node)",
      "right" : "private Element findFirstElementByTagName(String tag, Node node)",
      "info" : "MethodDeclaration[5420-5816]:MethodDeclaration[5488-5884]"
    }, {
      "left" : "public String outerHtml()",
      "right" : "public String outerHtml()",
      "info" : "MethodDeclaration[5822-5922]:MethodDeclaration[5890-5990]"
    }, {
      "left" : "public Element text(String text)",
      "right" : "public Element text(String text)",
      "info" : "MethodDeclaration[5928-6253]:MethodDeclaration[5996-6321]"
    }, {
      "left" : "public String nodeName()",
      "right" : "public String nodeName()",
      "info" : "MethodDeclaration[6259-6333]:MethodDeclaration[6327-6401]"
    }, {
      "left" : "public Document clone()",
      "right" : "public Document clone()",
      "info" : "MethodDeclaration[6339-6517]:MethodDeclaration[6407-6585]"
    }, {
      "left" : "OutputSettings",
      "right" : "OutputSettings",
      "info" : "TypeDeclaration[6523-11123]:TypeDeclaration[6591-11191]"
    }, {
      "left" : "private Entities.EscapeMode escapeMode = Entities.EscapeMode.base;",
      "right" : "private Entities.EscapeMode escapeMode = Entities.EscapeMode.base;",
      "info" : "FieldDeclaration[6692-6758]:FieldDeclaration[6760-6826]"
    }, {
      "left" : "private Charset charset = Charset.forName(\"UTF-8\");",
      "right" : "private Charset charset = Charset.forName(\"UTF-8\");",
      "info" : "FieldDeclaration[6767-6818]:FieldDeclaration[6835-6886]"
    }, {
      "left" : "private CharsetEncoder charsetEncoder = charset.newEncoder();",
      "right" : "private CharsetEncoder charsetEncoder = charset.newEncoder();",
      "info" : "FieldDeclaration[6827-6888]:FieldDeclaration[6895-6956]"
    }, {
      "left" : "private boolean prettyPrint = true;",
      "right" : "private boolean prettyPrint = true;",
      "info" : "FieldDeclaration[6897-6932]:FieldDeclaration[6965-7000]"
    }, {
      "left" : "private int indentAmount = 1;",
      "right" : "private int indentAmount = 1;",
      "info" : "FieldDeclaration[6941-6970]:FieldDeclaration[7009-7038]"
    }, {
      "left" : "public OutputSettings()",
      "right" : "public OutputSettings()",
      "info" : "MethodDeclaration[6980-7006]:MethodDeclaration[7048-7074]"
    }, {
      "left" : "public Entities.EscapeMode escapeMode()",
      "right" : "public Entities.EscapeMode escapeMode()",
      "info" : "MethodDeclaration[7016-7552]:MethodDeclaration[7084-7620]"
    }, {
      "left" : "public OutputSettings escapeMode(Entities.EscapeMode escapeMode)",
      "right" : "public OutputSettings escapeMode(Entities.EscapeMode escapeMode)",
      "info" : "MethodDeclaration[7562-7891]:MethodDeclaration[7630-7959]"
    }, {
      "left" : "public Charset charset()",
      "right" : "public Charset charset()",
      "info" : "MethodDeclaration[7901-8439]:MethodDeclaration[7969-8507]"
    }, {
      "left" : "public OutputSettings charset(Charset charset)",
      "right" : "public OutputSettings charset(Charset charset)",
      "info" : "MethodDeclaration[8449-8878]:MethodDeclaration[8517-8946]"
    }, {
      "left" : "public OutputSettings charset(String charset)",
      "right" : "public OutputSettings charset(String charset)",
      "info" : "MethodDeclaration[8888-9214]:MethodDeclaration[8956-9282]"
    }, {
      "left" : "CharsetEncoder encoder()",
      "right" : "CharsetEncoder encoder()",
      "info" : "MethodDeclaration[9224-9295]:MethodDeclaration[9292-9363]"
    }, {
      "left" : "public boolean prettyPrint()",
      "right" : "public boolean prettyPrint()",
      "info" : "MethodDeclaration[9305-9644]:MethodDeclaration[9373-9712]"
    }, {
      "left" : "public OutputSettings prettyPrint(boolean pretty)",
      "right" : "public OutputSettings prettyPrint(boolean pretty)",
      "info" : "MethodDeclaration[9654-9932]:MethodDeclaration[9722-10000]"
    }, {
      "left" : "public int indentAmount()",
      "right" : "public int indentAmount()",
      "info" : "MethodDeclaration[9942-10154]:MethodDeclaration[10010-10222]"
    }, {
      "left" : "public OutputSettings indentAmount(int indentAmount)",
      "right" : "public OutputSettings indentAmount(int indentAmount)",
      "info" : "MethodDeclaration[10164-10557]:MethodDeclaration[10232-10625]"
    }, {
      "left" : "public OutputSettings clone()",
      "right" : "public OutputSettings clone()",
      "info" : "MethodDeclaration[10567-11117]:MethodDeclaration[10635-11185]"
    }, {
      "left" : "public OutputSettings outputSettings()",
      "right" : "public OutputSettings outputSettings()",
      "info" : "MethodDeclaration[11129-11328]:MethodDeclaration[11197-11396]"
    }, {
      "left" : "public Document outputSettings(OutputSettings outputSettings)",
      "right" : "public Document outputSettings(OutputSettings outputSettings)",
      "info" : "MethodDeclaration[11334-11665]:MethodDeclaration[11402-11733]"
    }, {
      "left" : "enum : QuirksMode",
      "right" : "enum : QuirksMode",
      "info" : "EnumDeclaration[11671-11742]:EnumDeclaration[11739-11810]"
    }, {
      "left" : "public QuirksMode quirksMode()",
      "right" : "public QuirksMode quirksMode()",
      "info" : "MethodDeclaration[11748-11813]:MethodDeclaration[11816-11881]"
    }, {
      "left" : "public Document quirksMode(QuirksMode quirksMode)",
      "right" : "public Document quirksMode(QuirksMode quirksMode)",
      "info" : "MethodDeclaration[11819-11935]:MethodDeclaration[11887-12003]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[668-721]:Block[704-757]"
    }, {
      "left" : "super(Tag.valueOf(\"#root\"), baseUri);",
      "right" : "super(Tag.valueOf(\"#root\"), baseUri);",
      "info" : "SuperConstructorInvocation[678-715]:SuperConstructorInvocation[714-751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[978-1210]:Block[1014-1246]"
    }, {
      "left" : "Validate.notNull(baseUri);",
      "right" : "Validate.notNull(baseUri);",
      "info" : "ExpressionStatement[988-1014]:ExpressionStatement[1024-1050]"
    }, {
      "left" : "Document doc = new Document(baseUri);",
      "right" : "Document doc = new Document(baseUri);",
      "info" : "VariableDeclarationStatement[1024-1061]:VariableDeclarationStatement[1060-1097]"
    }, {
      "left" : "Element html = doc.appendElement(\"html\");",
      "right" : "Element html = doc.appendElement(\"html\");",
      "info" : "VariableDeclarationStatement[1070-1111]:VariableDeclarationStatement[1106-1147]"
    }, {
      "left" : "html.appendElement(\"head\");",
      "right" : "html.appendElement(\"head\");",
      "info" : "ExpressionStatement[1120-1147]:ExpressionStatement[1156-1183]"
    }, {
      "left" : "html.appendElement(\"body\");",
      "right" : "html.appendElement(\"body\");",
      "info" : "ExpressionStatement[1156-1183]:ExpressionStatement[1192-1219]"
    }, {
      "left" : "return doc;",
      "right" : "return doc;",
      "info" : "ReturnStatement[1193-1204]:ReturnStatement[1229-1240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1334-1397]:Block[1370-1433]"
    }, {
      "left" : "return findFirstElementByTagName(\"head\", this);",
      "right" : "return findFirstElementByTagName(\"head\", this);",
      "info" : "ReturnStatement[1344-1391]:ReturnStatement[1380-1427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1521-1584]:Block[1557-1620]"
    }, {
      "left" : "return findFirstElementByTagName(\"body\", this);",
      "right" : "return findFirstElementByTagName(\"body\", this);",
      "info" : "ReturnStatement[1531-1578]:ReturnStatement[1567-1614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2203-2465]:Block[2271-2533]"
    }, {
      "left" : "Validate.notNull(title);",
      "right" : "Validate.notNull(title);",
      "info" : "ExpressionStatement[2213-2237]:ExpressionStatement[2281-2305]"
    }, {
      "left" : "Element titleEl = getElementsByTag(\"title\").first();",
      "right" : "Element titleEl = getElementsByTag(\"title\").first();",
      "info" : "VariableDeclarationStatement[2246-2298]:VariableDeclarationStatement[2314-2366]"
    }, {
      "left" : "if (titleEl == null)",
      "right" : "if (titleEl == null)",
      "info" : "IfStatement[2307-2459]:IfStatement[2375-2527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2328-2409]:Block[2396-2477]"
    }, {
      "left" : "head().appendElement(\"title\").text(title);",
      "right" : "head().appendElement(\"title\").text(title);",
      "info" : "ExpressionStatement[2357-2399]:ExpressionStatement[2425-2467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2415-2459]:Block[2483-2527]"
    }, {
      "left" : "titleEl.text(title);",
      "right" : "titleEl.text(title);",
      "info" : "ExpressionStatement[2429-2449]:ExpressionStatement[2497-2517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2725-2798]:Block[2793-2866]"
    }, {
      "left" : "return new Element(Tag.valueOf(tagName), this.baseUri());",
      "right" : "return new Element(Tag.valueOf(tagName), this.baseUri());",
      "info" : "ReturnStatement[2735-2792]:ReturnStatement[2803-2860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3075-3764]:Block[3143-3832]"
    }, {
      "left" : "Element htmlEl = findFirstElementByTagName(\"html\", this);",
      "right" : "Element htmlEl = findFirstElementByTagName(\"html\", this);",
      "info" : "VariableDeclarationStatement[3085-3142]:VariableDeclarationStatement[3153-3210]"
    }, {
      "left" : "if (htmlEl == null)",
      "right" : "if (htmlEl == null)",
      "info" : "IfStatement[3151-3214]:IfStatement[3219-3282]"
    }, {
      "left" : "htmlEl = appendElement(\"html\");",
      "right" : "htmlEl = appendElement(\"html\");",
      "info" : "ExpressionStatement[3183-3214]:ExpressionStatement[3251-3282]"
    }, {
      "left" : "if (head() == null)",
      "right" : "if (head() == null)",
      "info" : "IfStatement[3223-3285]:IfStatement[3291-3353]"
    }, {
      "left" : "htmlEl.prependElement(\"head\");",
      "right" : "htmlEl.prependElement(\"head\");",
      "info" : "ExpressionStatement[3255-3285]:ExpressionStatement[3323-3353]"
    }, {
      "left" : "if (body() == null)",
      "right" : "if (body() == null)",
      "info" : "IfStatement[3294-3355]:IfStatement[3362-3423]"
    }, {
      "left" : "htmlEl.appendElement(\"body\");",
      "right" : "htmlEl.appendElement(\"body\");",
      "info" : "ExpressionStatement[3326-3355]:ExpressionStatement[3394-3423]"
    }, {
      "left" : "normaliseTextNodes(head());",
      "right" : "normaliseTextNodes(head());",
      "info" : "ExpressionStatement[3542-3569]:ExpressionStatement[3610-3637]"
    }, {
      "left" : "normaliseTextNodes(htmlEl);",
      "right" : "normaliseTextNodes(htmlEl);",
      "info" : "ExpressionStatement[3578-3605]:ExpressionStatement[3646-3673]"
    }, {
      "left" : "normaliseTextNodes(this);",
      "right" : "normaliseTextNodes(this);",
      "info" : "ExpressionStatement[3614-3639]:ExpressionStatement[3682-3707]"
    }, {
      "left" : "normaliseStructure(\"head\", htmlEl);",
      "right" : "normaliseStructure(\"head\", htmlEl);",
      "info" : "ExpressionStatement[3649-3684]:ExpressionStatement[3717-3752]"
    }, {
      "left" : "normaliseStructure(\"body\", htmlEl);",
      "right" : "normaliseStructure(\"body\", htmlEl);",
      "info" : "ExpressionStatement[3693-3728]:ExpressionStatement[3761-3796]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[3746-3758]:ReturnStatement[3814-3826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3844-4371]:Block[3912-4439]"
    }, {
      "left" : "List<Node> toMove = new ArrayList<Node>();",
      "right" : "List<Node> toMove = new ArrayList<Node>();",
      "info" : "VariableDeclarationStatement[3854-3896]:VariableDeclarationStatement[3922-3964]"
    }, {
      "left" : "for (Node node: element.childNodes)",
      "right" : "for (Node node: element.childNodes)",
      "info" : "EnhancedForStatement[3905-4128]:EnhancedForStatement[3973-4196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3941-4128]:Block[4009-4196]"
    }, {
      "left" : "if (node instanceof TextNode)",
      "right" : "if (node instanceof TextNode)",
      "info" : "IfStatement[3955-4118]:IfStatement[4023-4186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3985-4118]:Block[4053-4186]"
    }, {
      "left" : "TextNode tn = (TextNode) node;",
      "right" : "TextNode tn = (TextNode) node;",
      "info" : "VariableDeclarationStatement[4003-4033]:VariableDeclarationStatement[4071-4101]"
    }, {
      "left" : "if (!tn.isBlank())",
      "right" : "if (!tn.isBlank())",
      "info" : "IfStatement[4050-4104]:IfStatement[4118-4172]"
    }, {
      "left" : "toMove.add(tn);",
      "right" : "toMove.add(tn);",
      "info" : "ExpressionStatement[4089-4104]:ExpressionStatement[4157-4172]"
    }, {
      "left" : "for (int i = toMove.size()-1; i >= 0; i--)",
      "right" : "for (int i = toMove.size()-1; i >= 0; i--)",
      "info" : "ForStatement[4138-4365]:ForStatement[4206-4433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4181-4365]:Block[4249-4433]"
    }, {
      "left" : "Node node = toMove.get(i);",
      "right" : "Node node = toMove.get(i);",
      "info" : "VariableDeclarationStatement[4195-4221]:VariableDeclarationStatement[4263-4289]"
    }, {
      "left" : "element.removeChild(node);",
      "right" : "element.removeChild(node);",
      "info" : "ExpressionStatement[4234-4260]:ExpressionStatement[4302-4328]"
    }, {
      "left" : "body().prependChild(new TextNode(\" \", \"\"));",
      "right" : "body().prependChild(new TextNode(\" \", \"\"));",
      "info" : "ExpressionStatement[4273-4316]:ExpressionStatement[4341-4384]"
    }, {
      "left" : "body().prependChild(node);",
      "right" : "body().prependChild(node);",
      "info" : "ExpressionStatement[4329-4355]:ExpressionStatement[4397-4423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4553-5335]:Block[4621-5403]"
    }, {
      "left" : "Elements elements = this.getElementsByTag(tag);",
      "right" : "Elements elements = this.getElementsByTag(tag);",
      "info" : "VariableDeclarationStatement[4563-4610]:VariableDeclarationStatement[4631-4678]"
    }, {
      "left" : "Element master = elements.first();",
      "right" : "Element master = elements.first();",
      "info" : "VariableDeclarationStatement[4619-4653]:VariableDeclarationStatement[4687-4721]"
    }, {
      "left" : "if (elements.size() > 1)",
      "right" : "if (elements.size() > 1)",
      "info" : "IfStatement[4723-5162]:IfStatement[4791-5230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4748-5162]:Block[4816-5230]"
    }, {
      "left" : "List<Node> toMove = new ArrayList<Node>();",
      "right" : "List<Node> toMove = new ArrayList<Node>();",
      "info" : "VariableDeclarationStatement[4796-4838]:VariableDeclarationStatement[4864-4906]"
    }, {
      "left" : "for (int i = 1; i < elements.size(); i++)",
      "right" : "for (int i = 1; i < elements.size(); i++)",
      "info" : "ForStatement[4851-5072]:ForStatement[4919-5140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4893-5072]:Block[4961-5140]"
    }, {
      "left" : "Node dupe = elements.get(i);",
      "right" : "Node dupe = elements.get(i);",
      "info" : "VariableDeclarationStatement[4911-4939]:VariableDeclarationStatement[4979-5007]"
    }, {
      "left" : "for (Node node : dupe.childNodes)\n                    toMove.add(node);",
      "right" : "for (Node node : dupe.childNodes)\n                    toMove.add(node);",
      "info" : "EnhancedForStatement[4956-5027]:EnhancedForStatement[5024-5095]"
    }, {
      "left" : "toMove.add(node);",
      "right" : "toMove.add(node);",
      "info" : "ExpressionStatement[5010-5027]:ExpressionStatement[5078-5095]"
    }, {
      "left" : "dupe.remove();",
      "right" : "dupe.remove();",
      "info" : "ExpressionStatement[5044-5058]:ExpressionStatement[5112-5126]"
    }, {
      "left" : "for (Node dupe : toMove)\n                master.appendChild(dupe);",
      "right" : "for (Node dupe : toMove)\n                master.appendChild(dupe);",
      "info" : "EnhancedForStatement[5086-5152]:EnhancedForStatement[5154-5220]"
    }, {
      "left" : "master.appendChild(dupe);",
      "right" : "master.appendChild(dupe);",
      "info" : "ExpressionStatement[5127-5152]:ExpressionStatement[5195-5220]"
    }, {
      "left" : "if (!master.parent().equals(htmlEl))",
      "right" : "if (!master.parent().equals(htmlEl))",
      "info" : "IfStatement[5208-5329]:IfStatement[5276-5397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5245-5329]:Block[5313-5397]"
    }, {
      "left" : "htmlEl.appendChild(master);",
      "right" : "htmlEl.appendChild(master);",
      "info" : "ExpressionStatement[5259-5286]:ExpressionStatement[5327-5354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5485-5816]:Block[5553-5884]"
    }, {
      "left" : "if (node.nodeName().equals(tag))",
      "right" : "if (node.nodeName().equals(tag))",
      "info" : "IfStatement[5495-5789]:IfStatement[5563-5857]"
    }, {
      "left" : "return (Element) node;",
      "right" : "return (Element) node;",
      "info" : "ReturnStatement[5540-5562]:ReturnStatement[5608-5630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5576-5789]:Block[5644-5857]"
    }, {
      "left" : "for (Node child: node.childNodes)",
      "right" : "for (Node child: node.childNodes)",
      "info" : "EnhancedForStatement[5590-5779]:EnhancedForStatement[5658-5847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5624-5779]:Block[5692-5847]"
    }, {
      "left" : "Element found = findFirstElementByTagName(tag, child);",
      "right" : "Element found = findFirstElementByTagName(tag, child);",
      "info" : "VariableDeclarationStatement[5642-5696]:VariableDeclarationStatement[5710-5764]"
    }, {
      "left" : "if (found != null)",
      "right" : "if (found != null)",
      "info" : "IfStatement[5713-5765]:IfStatement[5781-5833]"
    }, {
      "left" : "return found;",
      "right" : "return found;",
      "info" : "ReturnStatement[5752-5765]:ReturnStatement[5820-5833]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[5798-5810]:ReturnStatement[5866-5878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5862-5922]:Block[5930-5990]"
    }, {
      "left" : "return super.html();",
      "right" : "return super.html();",
      "info" : "ReturnStatement[5872-5892]:ReturnStatement[5940-5960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6158-6253]:Block[6226-6321]"
    }, {
      "left" : "body().text(text);",
      "right" : "body().text(text);",
      "info" : "ExpressionStatement[6168-6186]:ExpressionStatement[6236-6254]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[6235-6247]:ReturnStatement[6303-6315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6298-6333]:Block[6366-6401]"
    }, {
      "left" : "return \"#document\";",
      "right" : "return \"#document\";",
      "info" : "ReturnStatement[6308-6327]:ReturnStatement[6376-6395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6377-6517]:Block[6445-6585]"
    }, {
      "left" : "Document clone = (Document) super.clone();",
      "right" : "Document clone = (Document) super.clone();",
      "info" : "VariableDeclarationStatement[6387-6429]:VariableDeclarationStatement[6455-6497]"
    }, {
      "left" : "clone.outputSettings = this.outputSettings.clone();",
      "right" : "clone.outputSettings = this.outputSettings.clone();",
      "info" : "ExpressionStatement[6438-6489]:ExpressionStatement[6506-6557]"
    }, {
      "left" : "return clone;",
      "right" : "return clone;",
      "info" : "ReturnStatement[6498-6511]:ReturnStatement[6566-6579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7004-7006]:Block[7072-7074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7510-7552]:Block[7578-7620]"
    }, {
      "left" : "return escapeMode;",
      "right" : "return escapeMode;",
      "info" : "ReturnStatement[7524-7542]:ReturnStatement[7592-7610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7813-7891]:Block[7881-7959]"
    }, {
      "left" : "this.escapeMode = escapeMode;",
      "right" : "this.escapeMode = escapeMode;",
      "info" : "ExpressionStatement[7827-7856]:ExpressionStatement[7895-7924]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[7869-7881]:ReturnStatement[7937-7949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8400-8439]:Block[8468-8507]"
    }, {
      "left" : "return charset;",
      "right" : "return charset;",
      "info" : "ReturnStatement[8414-8429]:ReturnStatement[8482-8497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8683-8878]:Block[8751-8946]"
    }, {
      "left" : "this.charset = charset;",
      "right" : "this.charset = charset;",
      "info" : "ExpressionStatement[8769-8792]:ExpressionStatement[8837-8860]"
    }, {
      "left" : "charsetEncoder = charset.newEncoder();",
      "right" : "charsetEncoder = charset.newEncoder();",
      "info" : "ExpressionStatement[8805-8843]:ExpressionStatement[8873-8911]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[8856-8868]:ReturnStatement[8924-8936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9131-9214]:Block[9199-9282]"
    }, {
      "left" : "charset(Charset.forName(charset));",
      "right" : "charset(Charset.forName(charset));",
      "info" : "ExpressionStatement[9145-9179]:ExpressionStatement[9213-9247]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[9192-9204]:ReturnStatement[9260-9272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9249-9295]:Block[9317-9363]"
    }, {
      "left" : "return charsetEncoder;",
      "right" : "return charsetEncoder;",
      "info" : "ReturnStatement[9263-9285]:ReturnStatement[9331-9353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9601-9644]:Block[9669-9712]"
    }, {
      "left" : "return prettyPrint;",
      "right" : "return prettyPrint;",
      "info" : "ReturnStatement[9615-9634]:ReturnStatement[9683-9702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9862-9932]:Block[9930-10000]"
    }, {
      "left" : "prettyPrint = pretty;",
      "right" : "prettyPrint = pretty;",
      "info" : "ExpressionStatement[9876-9897]:ExpressionStatement[9944-9965]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[9910-9922]:ReturnStatement[9978-9990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10110-10154]:Block[10178-10222]"
    }, {
      "left" : "return indentAmount;",
      "right" : "return indentAmount;",
      "info" : "ReturnStatement[10124-10144]:ReturnStatement[10192-10212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10427-10557]:Block[10495-10625]"
    }, {
      "left" : "Validate.isTrue(indentAmount >= 0);",
      "right" : "Validate.isTrue(indentAmount >= 0);",
      "info" : "ExpressionStatement[10441-10476]:ExpressionStatement[10509-10544]"
    }, {
      "left" : "this.indentAmount = indentAmount;",
      "right" : "this.indentAmount = indentAmount;",
      "info" : "ExpressionStatement[10489-10522]:ExpressionStatement[10557-10590]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[10535-10547]:ReturnStatement[10603-10615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10615-11117]:Block[10683-11185]"
    }, {
      "left" : "OutputSettings clone;",
      "right" : "OutputSettings clone;",
      "info" : "VariableDeclarationStatement[10629-10650]:VariableDeclarationStatement[10697-10718]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10663-10838]:TryStatement[10731-10906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10667-10738]:Block[10735-10806]"
    }, {
      "left" : "clone = (OutputSettings) super.clone();",
      "right" : "clone = (OutputSettings) super.clone();",
      "info" : "ExpressionStatement[10685-10724]:ExpressionStatement[10753-10792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10776-10838]:Block[10844-10906]"
    }, {
      "left" : "throw new RuntimeException(e);",
      "right" : "throw new RuntimeException(e);",
      "info" : "ThrowStatement[10794-10824]:ThrowStatement[10862-10892]"
    }, {
      "left" : "clone.charset(charset.name());",
      "right" : "clone.charset(charset.name());",
      "info" : "ExpressionStatement[10851-10881]:ExpressionStatement[10919-10949]"
    }, {
      "left" : "clone.escapeMode = Entities.EscapeMode.valueOf(escapeMode.name());",
      "right" : "clone.escapeMode = Entities.EscapeMode.valueOf(escapeMode.name());",
      "info" : "ExpressionStatement[10929-10995]:ExpressionStatement[10997-11063]"
    }, {
      "left" : "return clone;",
      "right" : "return clone;",
      "info" : "ReturnStatement[11094-11107]:ReturnStatement[11162-11175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11290-11328]:Block[11358-11396]"
    }, {
      "left" : "return outputSettings;",
      "right" : "return outputSettings;",
      "info" : "ReturnStatement[11300-11322]:ReturnStatement[11368-11390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11549-11665]:Block[11617-11733]"
    }, {
      "left" : "Validate.notNull(outputSettings);",
      "right" : "Validate.notNull(outputSettings);",
      "info" : "ExpressionStatement[11559-11592]:ExpressionStatement[11627-11660]"
    }, {
      "left" : "this.outputSettings = outputSettings;",
      "right" : "this.outputSettings = outputSettings;",
      "info" : "ExpressionStatement[11601-11638]:ExpressionStatement[11669-11706]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[11647-11659]:ReturnStatement[11715-11727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11779-11813]:Block[11847-11881]"
    }, {
      "left" : "return quirksMode;",
      "right" : "return quirksMode;",
      "info" : "ReturnStatement[11789-11807]:ReturnStatement[11857-11875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11869-11935]:Block[11937-12003]"
    }, {
      "left" : "this.quirksMode = quirksMode;",
      "right" : "this.quirksMode = quirksMode;",
      "info" : "ExpressionStatement[11879-11908]:ExpressionStatement[11947-11976]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[11917-11929]:ReturnStatement[11985-11997]"
    } ]
  },
  "interFileMappings" : { }
}