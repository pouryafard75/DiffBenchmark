{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TarArchiveInputStream",
      "right" : "TarArchiveInputStream",
      "info" : "TypeDeclaration[1610-23607]:TypeDeclaration[1610-23722]"
    }, {
      "left" : "private static final int SMALL_BUFFER_SIZE = 256;",
      "right" : "private static final int SMALL_BUFFER_SIZE = 256;",
      "info" : "FieldDeclaration[1917-1966]:FieldDeclaration[1917-1966]"
    }, {
      "left" : "private final byte[] SMALL_BUF = new byte[SMALL_BUFFER_SIZE];",
      "right" : "private final byte[] SMALL_BUF = new byte[SMALL_BUFFER_SIZE];",
      "info" : "FieldDeclaration[1972-2033]:FieldDeclaration[1972-2033]"
    }, {
      "left" : "private final int recordSize;",
      "right" : "private final int recordSize;",
      "info" : "FieldDeclaration[2039-2103]:FieldDeclaration[2039-2103]"
    }, {
      "left" : "private final int blockSize;",
      "right" : "private final int blockSize;",
      "info" : "FieldDeclaration[2109-2168]:FieldDeclaration[2109-2168]"
    }, {
      "left" : "private boolean hasHitEOF;",
      "right" : "private boolean hasHitEOF;",
      "info" : "FieldDeclaration[2174-2236]:FieldDeclaration[2174-2236]"
    }, {
      "left" : "private long entrySize;",
      "right" : "private long entrySize;",
      "info" : "FieldDeclaration[2242-2302]:FieldDeclaration[2242-2302]"
    }, {
      "left" : "private long entryOffset;",
      "right" : "private long entryOffset;",
      "info" : "FieldDeclaration[2308-2384]:FieldDeclaration[2308-2384]"
    }, {
      "left" : "private final InputStream is;",
      "right" : "private final InputStream is;",
      "info" : "FieldDeclaration[2390-2459]:FieldDeclaration[2390-2459]"
    }, {
      "left" : "private TarArchiveEntry currEntry;",
      "right" : "private TarArchiveEntry currEntry;",
      "info" : "FieldDeclaration[2465-2548]:FieldDeclaration[2465-2548]"
    }, {
      "left" : "private final ZipEncoding encoding;",
      "right" : "private final ZipEncoding encoding;",
      "info" : "FieldDeclaration[2554-2625]:FieldDeclaration[2554-2625]"
    }, {
      "left" : "public TarArchiveInputStream(InputStream is)",
      "right" : "public TarArchiveInputStream(InputStream is)",
      "info" : "MethodDeclaration[2631-2857]:MethodDeclaration[2631-2857]"
    }, {
      "left" : "public TarArchiveInputStream(InputStream is, String encoding)",
      "right" : "public TarArchiveInputStream(InputStream is, String encoding)",
      "info" : "MethodDeclaration[2863-3213]:MethodDeclaration[2863-3213]"
    }, {
      "left" : "public TarArchiveInputStream(InputStream is, int blockSize)",
      "right" : "public TarArchiveInputStream(InputStream is, int blockSize)",
      "info" : "MethodDeclaration[3219-3487]:MethodDeclaration[3219-3487]"
    }, {
      "left" : "public TarArchiveInputStream(InputStream is, int blockSize,\n                                 String encoding)",
      "right" : "public TarArchiveInputStream(InputStream is, int blockSize,\n                                 String encoding)",
      "info" : "MethodDeclaration[3493-3905]:MethodDeclaration[3493-3905]"
    }, {
      "left" : "public TarArchiveInputStream(InputStream is, int blockSize, int recordSize)",
      "right" : "public TarArchiveInputStream(InputStream is, int blockSize, int recordSize)",
      "info" : "MethodDeclaration[3911-4237]:MethodDeclaration[3911-4237]"
    }, {
      "left" : "public TarArchiveInputStream(InputStream is, int blockSize, int recordSize,\n                                 String encoding)",
      "right" : "public TarArchiveInputStream(InputStream is, int blockSize, int recordSize,\n                                 String encoding)",
      "info" : "MethodDeclaration[4243-4846]:MethodDeclaration[4243-4846]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[4852-5049]:MethodDeclaration[4852-5049]"
    }, {
      "left" : "public int getRecordSize()",
      "right" : "public int getRecordSize()",
      "info" : "MethodDeclaration[5055-5244]:MethodDeclaration[5055-5244]"
    }, {
      "left" : "public int available() throws IOException",
      "right" : "public int available() throws IOException",
      "info" : "MethodDeclaration[5250-6061]:MethodDeclaration[5250-6061]"
    }, {
      "left" : "public long skip(long numToSkip) throws IOException",
      "right" : "public long skip(long numToSkip) throws IOException",
      "info" : "MethodDeclaration[6067-6764]:MethodDeclaration[6067-6764]"
    }, {
      "left" : "public synchronized void reset()",
      "right" : "public synchronized void reset()",
      "info" : "MethodDeclaration[6770-6904]:MethodDeclaration[6770-6904]"
    }, {
      "left" : "public TarArchiveEntry getNextTarEntry() throws IOException",
      "right" : "public TarArchiveEntry getNextTarEntry() throws IOException",
      "info" : "MethodDeclaration[6910-9635]:MethodDeclaration[6910-9635]"
    }, {
      "left" : "private void skipRecordPadding() throws IOException",
      "right" : "private void skipRecordPadding() throws IOException",
      "info" : "MethodDeclaration[9645-10171]:MethodDeclaration[9645-10171]"
    }, {
      "left" : "protected byte[] getLongNameData() throws IOException",
      "right" : "protected byte[] getLongNameData() throws IOException",
      "info" : "MethodDeclaration[10177-11310]:MethodDeclaration[10177-11310]"
    }, {
      "left" : "private byte[] getRecord() throws IOException",
      "right" : "private byte[] getRecord() throws IOException",
      "info" : "MethodDeclaration[11316-12209]:MethodDeclaration[11316-12209]"
    }, {
      "left" : "protected boolean isEOFRecord(byte[] record)",
      "right" : "protected boolean isEOFRecord(byte[] record)",
      "info" : "MethodDeclaration[12215-12624]:MethodDeclaration[12215-12624]"
    }, {
      "left" : "protected byte[] readRecord() throws IOException",
      "right" : "protected byte[] readRecord() throws IOException",
      "info" : "MethodDeclaration[12634-13094]:MethodDeclaration[12634-13094]"
    }, {
      "left" : "private void paxHeaders() throws IOExceptio",
      "right" : "private void paxHeaders() throws IOExceptio",
      "info" : "MethodDeclaration[13100-13313]:MethodDeclaration[13100-13313]"
    }, {
      "left" : "Map<String, String> parsePaxHeaders(InputStream i) throws IOException",
      "right" : "Map<String, String> parsePaxHeaders(InputStream i) throws IOException",
      "info" : "MethodDeclaration[13319-15330]:MethodDeclaration[13319-15330]"
    }, {
      "left" : "private void applyPaxHeadersToCurrentEntry(Map<String, String> headers)",
      "right" : "private void applyPaxHeadersToCurrentEntry(Map<String, String> headers)",
      "info" : "MethodDeclaration[15336-16959]:MethodDeclaration[15336-16959]"
    }, {
      "left" : "private void readGNUSparse() throws IOException",
      "right" : "private void readGNUSparse() throws IOException",
      "info" : "MethodDeclaration[16965-17954]:MethodDeclaration[16965-17954]"
    }, {
      "left" : "public ArchiveEntry getNextEntry() throws IOException",
      "right" : "public ArchiveEntry getNextEntry() throws IOException",
      "info" : "MethodDeclaration[17960-18300]:MethodDeclaration[17960-18300]"
    }, {
      "left" : "private void tryToConsumeSecondEOFRecord() throws IOException",
      "right" : "private void tryToConsumeSecondEOFRecord() throws IOException",
      "info" : "MethodDeclaration[18310-19228]:MethodDeclaration[18310-19228]"
    }, {
      "left" : "public int read(byte[] buf, int offset, int numToRead) throws IOException",
      "right" : "public int read(byte[] buf, int offset, int numToRead) throws IOException",
      "info" : "MethodDeclaration[19234-20375]:MethodDeclaration[19234-20490]"
    }, {
      "left" : "public boolean canReadEntryData(ArchiveEntry ae)",
      "right" : "public boolean canReadEntryData(ArchiveEntry ae)",
      "info" : "MethodDeclaration[20381-20773]:MethodDeclaration[20496-20888]"
    }, {
      "left" : "public TarArchiveEntry getCurrentEntry()",
      "right" : "public TarArchiveEntry getCurrentEntry()",
      "info" : "MethodDeclaration[20779-20996]:MethodDeclaration[20894-21111]"
    }, {
      "left" : "protected final void setCurrentEntry(TarArchiveEntry e)",
      "right" : "protected final void setCurrentEntry(TarArchiveEntry e)",
      "info" : "MethodDeclaration[21002-21088]:MethodDeclaration[21117-21203]"
    }, {
      "left" : "protected final boolean isAtEOF()",
      "right" : "protected final boolean isAtEOF()",
      "info" : "MethodDeclaration[21094-21161]:MethodDeclaration[21209-21276]"
    }, {
      "left" : "protected final void setAtEOF(boolean b)",
      "right" : "protected final void setAtEOF(boolean b)",
      "info" : "MethodDeclaration[21167-21238]:MethodDeclaration[21282-21353]"
    }, {
      "left" : "private void consumeRemainderOfLastBlock() throws IOException",
      "right" : "private void consumeRemainderOfLastBlock() throws IOException",
      "info" : "MethodDeclaration[21244-21754]:MethodDeclaration[21359-21869]"
    }, {
      "left" : "public static boolean matches(byte[] signature, int length)",
      "right" : "public static boolean matches(byte[] signature, int length)",
      "info" : "MethodDeclaration[21760-23604]:MethodDeclaration[21875-23719]"
    } ],
    "mappings" : [
 {
      "left" : "ArchiveInputStream",
      "right" : "ArchiveInputStream",
      "info" : "SimpleType[1891-1909]:SimpleType[1891-1909]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2727-2733]:Modifier[2727-2733]"
    }, {
      "left" : "TarArchiveInputStream",
      "right" : "TarArchiveInputStream",
      "info" : "SimpleName[2734-2755]:SimpleName[2734-2755]"
    }, {
      "left" : "InputStream is",
      "right" : "InputStream is",
      "info" : "SingleVariableDeclaration[2756-2770]:SingleVariableDeclaration[2756-2770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2772-2857]:Block[2772-2857]"
    }, {
      "left" : "this(is, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE);",
      "right" : "this(is, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE);",
      "info" : "ConstructorInvocation[2782-2851]:ConstructorInvocation[2782-2851]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3043-3049]:Modifier[3043-3049]"
    }, {
      "left" : "TarArchiveInputStream",
      "right" : "TarArchiveInputStream",
      "info" : "SimpleName[3050-3071]:SimpleName[3050-3071]"
    }, {
      "left" : "InputStream is",
      "right" : "InputStream is",
      "info" : "SingleVariableDeclaration[3072-3086]:SingleVariableDeclaration[3072-3086]"
    }, {
      "left" : "String encoding",
      "right" : "String encoding",
      "info" : "SingleVariableDeclaration[3088-3103]:SingleVariableDeclaration[3088-3103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3105-3213]:Block[3105-3213]"
    }, {
      "left" : "this(is, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE,\n             encoding);",
      "right" : "this(is, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE,\n             encoding);",
      "info" : "ConstructorInvocation[3115-3207]:ConstructorInvocation[3115-3207]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3361-3367]:Modifier[3361-3367]"
    }, {
      "left" : "TarArchiveInputStream",
      "right" : "TarArchiveInputStream",
      "info" : "SimpleName[3368-3389]:SimpleName[3368-3389]"
    }, {
      "left" : "InputStream is",
      "right" : "InputStream is",
      "info" : "SingleVariableDeclaration[3390-3404]:SingleVariableDeclaration[3390-3404]"
    }, {
      "left" : "int blockSize",
      "right" : "int blockSize",
      "info" : "SingleVariableDeclaration[3406-3419]:SingleVariableDeclaration[3406-3419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3421-3487]:Block[3421-3487]"
    }, {
      "left" : "this(is, blockSize, TarConstants.DEFAULT_RCDSIZE);",
      "right" : "this(is, blockSize, TarConstants.DEFAULT_RCDSIZE);",
      "info" : "ConstructorInvocation[3431-3481]:ConstructorInvocation[3431-3481]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3719-3725]:Modifier[3719-3725]"
    }, {
      "left" : "TarArchiveInputStream",
      "right" : "TarArchiveInputStream",
      "info" : "SimpleName[3726-3747]:SimpleName[3726-3747]"
    }, {
      "left" : "InputStream is",
      "right" : "InputStream is",
      "info" : "SingleVariableDeclaration[3748-3762]:SingleVariableDeclaration[3748-3762]"
    }, {
      "left" : "int blockSize",
      "right" : "int blockSize",
      "info" : "SingleVariableDeclaration[3764-3777]:SingleVariableDeclaration[3764-3777]"
    }, {
      "left" : "String encoding",
      "right" : "String encoding",
      "info" : "SingleVariableDeclaration[3812-3827]:SingleVariableDeclaration[3812-3827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3829-3905]:Block[3829-3905]"
    }, {
      "left" : "this(is, blockSize, TarConstants.DEFAULT_RCDSIZE, encoding);",
      "right" : "this(is, blockSize, TarConstants.DEFAULT_RCDSIZE, encoding);",
      "info" : "ConstructorInvocation[3839-3899]:ConstructorInvocation[3839-3899]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4101-4107]:Modifier[4101-4107]"
    }, {
      "left" : "TarArchiveInputStream",
      "right" : "TarArchiveInputStream",
      "info" : "SimpleName[4108-4129]:SimpleName[4108-4129]"
    }, {
      "left" : "InputStream is",
      "right" : "InputStream is",
      "info" : "SingleVariableDeclaration[4130-4144]:SingleVariableDeclaration[4130-4144]"
    }, {
      "left" : "int blockSize",
      "right" : "int blockSize",
      "info" : "SingleVariableDeclaration[4146-4159]:SingleVariableDeclaration[4146-4159]"
    }, {
      "left" : "int recordSize",
      "right" : "int recordSize",
      "info" : "SingleVariableDeclaration[4161-4175]:SingleVariableDeclaration[4161-4175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4177-4237]:Block[4177-4237]"
    }, {
      "left" : "this(is, blockSize, recordSize, null);",
      "right" : "this(is, blockSize, recordSize, null);",
      "info" : "ConstructorInvocation[4187-4225]:ConstructorInvocation[4187-4225]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4517-4523]:Modifier[4517-4523]"
    }, {
      "left" : "TarArchiveInputStream",
      "right" : "TarArchiveInputStream",
      "info" : "SimpleName[4524-4545]:SimpleName[4524-4545]"
    }, {
      "left" : "InputStream is",
      "right" : "InputStream is",
      "info" : "SingleVariableDeclaration[4546-4560]:SingleVariableDeclaration[4546-4560]"
    }, {
      "left" : "int blockSize",
      "right" : "int blockSize",
      "info" : "SingleVariableDeclaration[4562-4575]:SingleVariableDeclaration[4562-4575]"
    }, {
      "left" : "int recordSize",
      "right" : "int recordSize",
      "info" : "SingleVariableDeclaration[4577-4591]:SingleVariableDeclaration[4577-4591]"
    }, {
      "left" : "String encoding",
      "right" : "String encoding",
      "info" : "SingleVariableDeclaration[4626-4641]:SingleVariableDeclaration[4626-4641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4643-4846]:Block[4643-4846]"
    }, {
      "left" : "this.is = is;",
      "right" : "this.is = is;",
      "info" : "ExpressionStatement[4653-4666]:ExpressionStatement[4653-4666]"
    }, {
      "left" : "this.hasHitEOF = false;",
      "right" : "this.hasHitEOF = false;",
      "info" : "ExpressionStatement[4675-4698]:ExpressionStatement[4675-4698]"
    }, {
      "left" : "this.encoding = ZipEncodingHelper.getZipEncoding(encoding);",
      "right" : "this.encoding = ZipEncodingHelper.getZipEncoding(encoding);",
      "info" : "ExpressionStatement[4707-4766]:ExpressionStatement[4707-4766]"
    }, {
      "left" : "this.recordSize = recordSize;",
      "right" : "this.recordSize = recordSize;",
      "info" : "ExpressionStatement[4775-4804]:ExpressionStatement[4775-4804]"
    }, {
      "left" : "this.blockSize = blockSize;",
      "right" : "this.blockSize = blockSize;",
      "info" : "ExpressionStatement[4813-4840]:ExpressionStatement[4813-4840]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4969-4978]:MarkerAnnotation[4969-4978]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4983-4989]:Modifier[4983-4989]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4990-4994]:PrimitiveType[4990-4994]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[4995-5000]:SimpleName[4995-5000]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5010-5021]:SimpleType[5010-5021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5022-5049]:Block[5022-5049]"
    }, {
      "left" : "is.close();",
      "right" : "is.close();",
      "info" : "ExpressionStatement[5032-5043]:ExpressionStatement[5032-5043]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5183-5189]:Modifier[5183-5189]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[5190-5193]:PrimitiveType[5190-5193]"
    }, {
      "left" : "getRecordSize",
      "right" : "getRecordSize",
      "info" : "SimpleName[5194-5207]:SimpleName[5194-5207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5210-5244]:Block[5210-5244]"
    }, {
      "left" : "return recordSize;",
      "right" : "return recordSize;",
      "info" : "ReturnStatement[5220-5238]:ReturnStatement[5220-5238]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5843-5852]:MarkerAnnotation[5843-5852]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5857-5863]:Modifier[5857-5863]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[5864-5867]:PrimitiveType[5864-5867]"
    }, {
      "left" : "available",
      "right" : "available",
      "info" : "SimpleName[5868-5877]:SimpleName[5868-5877]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5887-5898]:SimpleType[5887-5898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5899-6061]:Block[5899-6061]"
    }, {
      "left" : "if (entrySize - entryOffset > Integer.MAX_VALUE)",
      "right" : "if (entrySize - entryOffset > Integer.MAX_VALUE)",
      "info" : "IfStatement[5909-6007]:IfStatement[5909-6007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5958-6007]:Block[5958-6007]"
    }, {
      "left" : "return Integer.MAX_VALUE;",
      "right" : "return Integer.MAX_VALUE;",
      "info" : "ReturnStatement[5972-5997]:ReturnStatement[5972-5997]"
    }, {
      "left" : "return (int) (entrySize - entryOffset);",
      "right" : "return (int) (entrySize - entryOffset);",
      "info" : "ReturnStatement[6016-6055]:ReturnStatement[6016-6055]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6454-6463]:MarkerAnnotation[6454-6463]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6468-6474]:Modifier[6468-6474]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[6475-6479]:PrimitiveType[6475-6479]"
    }, {
      "left" : "skip",
      "right" : "skip",
      "info" : "SimpleName[6480-6484]:SimpleName[6480-6484]"
    }, {
      "left" : "long numToSkip",
      "right" : "long numToSkip",
      "info" : "SingleVariableDeclaration[6485-6499]:SingleVariableDeclaration[6485-6499]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6508-6519]:SimpleType[6508-6519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6520-6764]:Block[6520-6764]"
    }, {
      "left" : "long available = entrySize - entryOffset;",
      "right" : "long available = entrySize - entryOffset;",
      "info" : "VariableDeclarationStatement[6531-6572]:VariableDeclarationStatement[6531-6572]"
    }, {
      "left" : "numToSkip = Math.min(numToSkip, available);",
      "right" : "numToSkip = Math.min(numToSkip, available);",
      "info" : "ExpressionStatement[6581-6624]:ExpressionStatement[6581-6624]"
    }, {
      "left" : "long skipped = IOUtils.skip(is, numToSkip);",
      "right" : "long skipped = IOUtils.skip(is, numToSkip);",
      "info" : "VariableDeclarationStatement[6634-6677]:VariableDeclarationStatement[6634-6677]"
    }, {
      "left" : "count(skipped);",
      "right" : "count(skipped);",
      "info" : "ExpressionStatement[6687-6702]:ExpressionStatement[6687-6702]"
    }, {
      "left" : "entryOffset += skipped;",
      "right" : "entryOffset += skipped;",
      "info" : "ExpressionStatement[6711-6734]:ExpressionStatement[6711-6734]"
    }, {
      "left" : "return skipped;",
      "right" : "return skipped;",
      "info" : "ReturnStatement[6743-6758]:ReturnStatement[6743-6758]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6850-6859]:MarkerAnnotation[6850-6859]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6864-6870]:Modifier[6864-6870]"
    }, {
      "left" : "synchronized",
      "right" : "synchronized",
      "info" : "Modifier[6871-6883]:Modifier[6871-6883]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6884-6888]:PrimitiveType[6884-6888]"
    }, {
      "left" : "reset",
      "right" : "reset",
      "info" : "SimpleName[6889-6894]:SimpleName[6889-6894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6897-6904]:Block[6897-6904]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7482-7488]:Modifier[7482-7488]"
    }, {
      "left" : "TarArchiveEntry",
      "right" : "TarArchiveEntry",
      "info" : "SimpleType[7489-7504]:SimpleType[7489-7504]"
    }, {
      "left" : "getNextTarEntry",
      "right" : "getNextTarEntry",
      "info" : "SimpleName[7505-7520]:SimpleName[7505-7520]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7530-7541]:SimpleType[7530-7541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7542-9635]:Block[7542-9635]"
    }, {
      "left" : "if (hasHitEOF)",
      "right" : "if (hasHitEOF)",
      "info" : "IfStatement[7552-7603]:IfStatement[7552-7603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7567-7603]:Block[7567-7603]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[7581-7593]:ReturnStatement[7581-7593]"
    }, {
      "left" : "if (currEntry != null)",
      "right" : "if (currEntry != null)",
      "info" : "IfStatement[7613-7836]:IfStatement[7613-7836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7636-7836]:Block[7636-7836]"
    }, {
      "left" : "skip(Long.MAX_VALUE);",
      "right" : "skip(Long.MAX_VALUE);",
      "info" : "ExpressionStatement[7718-7739]:ExpressionStatement[7718-7739]"
    }, {
      "left" : "skipRecordPadding();",
      "right" : "skipRecordPadding();",
      "info" : "ExpressionStatement[7806-7826]:ExpressionStatement[7806-7826]"
    }, {
      "left" : "byte[] headerBuf = getRecord();",
      "right" : "byte[] headerBuf = getRecord();",
      "info" : "VariableDeclarationStatement[7846-7877]:VariableDeclarationStatement[7846-7877]"
    }, {
      "left" : "if (headerBuf == null)",
      "right" : "if (headerBuf == null)",
      "info" : "IfStatement[7887-8002]:IfStatement[7887-8002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7910-8002]:Block[7910-8002]"
    }, {
      "left" : "currEntry = null;",
      "right" : "currEntry = null;",
      "info" : "ExpressionStatement[7950-7967]:ExpressionStatement[7950-7967]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[7980-7992]:ReturnStatement[7980-7992]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8012-8277]:TryStatement[8012-8277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8016-8093]:Block[8016-8093]"
    }, {
      "left" : "currEntry = new TarArchiveEntry(headerBuf, encoding);",
      "right" : "currEntry = new TarArchiveEntry(headerBuf, encoding);",
      "info" : "ExpressionStatement[8030-8083]:ExpressionStatement[8030-8083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8129-8277]:Block[8129-8277]"
    }, {
      "left" : "IOException ioe = new IOException(\"Error detected parsing the header\");",
      "right" : "IOException ioe = new IOException(\"Error detected parsing the header\");",
      "info" : "VariableDeclarationStatement[8143-8214]:VariableDeclarationStatement[8143-8214]"
    }, {
      "left" : "ioe.initCause(e);",
      "right" : "ioe.initCause(e);",
      "info" : "ExpressionStatement[8227-8244]:ExpressionStatement[8227-8244]"
    }, {
      "left" : "throw ioe;",
      "right" : "throw ioe;",
      "info" : "ThrowStatement[8257-8267]:ThrowStatement[8257-8267]"
    }, {
      "left" : "entryOffset = 0;",
      "right" : "entryOffset = 0;",
      "info" : "ExpressionStatement[8287-8303]:ExpressionStatement[8287-8303]"
    }, {
      "left" : "entrySize = currEntry.getSize();",
      "right" : "entrySize = currEntry.getSize();",
      "info" : "ExpressionStatement[8312-8344]:ExpressionStatement[8312-8344]"
    }, {
      "left" : "if (currEntry.isGNULongLinkEntry())",
      "right" : "if (currEntry.isGNULongLinkEntry())",
      "info" : "IfStatement[8354-8740]:IfStatement[8354-8740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8390-8740]:Block[8390-8740]"
    }, {
      "left" : "byte[] longLinkData = getLongNameData();",
      "right" : "byte[] longLinkData = getLongNameData();",
      "info" : "VariableDeclarationStatement[8404-8444]:VariableDeclarationStatement[8404-8444]"
    }, {
      "left" : "if (longLinkData == null)",
      "right" : "if (longLinkData == null)",
      "info" : "IfStatement[8457-8664]:IfStatement[8457-8664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8483-8664]:Block[8483-8664]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8638-8650]:ReturnStatement[8638-8650]"
    }, {
      "left" : "currEntry.setLinkName(encoding.decode(longLinkData));",
      "right" : "currEntry.setLinkName(encoding.decode(longLinkData));",
      "info" : "ExpressionStatement[8677-8730]:ExpressionStatement[8677-8730]"
    }, {
      "left" : "if (currEntry.isGNULongNameEntry())",
      "right" : "if (currEntry.isGNULongNameEntry())",
      "info" : "IfStatement[8750-9127]:IfStatement[8750-9127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8786-9127]:Block[8786-9127]"
    }, {
      "left" : "byte[] longNameData = getLongNameData();",
      "right" : "byte[] longNameData = getLongNameData();",
      "info" : "VariableDeclarationStatement[8800-8840]:VariableDeclarationStatement[8800-8840]"
    }, {
      "left" : "if (longNameData == null)",
      "right" : "if (longNameData == null)",
      "info" : "IfStatement[8853-9055]:IfStatement[8853-9055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8879-9055]:Block[8879-9055]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9029-9041]:ReturnStatement[9029-9041]"
    }, {
      "left" : "currEntry.setName(encoding.decode(longNameData));",
      "right" : "currEntry.setName(encoding.decode(longNameData));",
      "info" : "ExpressionStatement[9068-9117]:ExpressionStatement[9068-9117]"
    }, {
      "left" : "if (currEntry.isPaxHeader())",
      "right" : "if (currEntry.isPaxHeader())",
      "info" : "IfStatement[9137-9225]:IfStatement[9137-9225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9165-9225]:Block[9165-9225]"
    }, {
      "left" : "paxHeaders();",
      "right" : "paxHeaders();",
      "info" : "ExpressionStatement[9202-9215]:ExpressionStatement[9202-9215]"
    }, {
      "left" : "if (currEntry.isGNUSparse())",
      "right" : "if (currEntry.isGNUSparse())",
      "info" : "IfStatement[9235-9327]:IfStatement[9235-9327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9263-9327]:Block[9263-9327]"
    }, {
      "left" : "readGNUSparse();",
      "right" : "readGNUSparse();",
      "info" : "ExpressionStatement[9301-9317]:ExpressionStatement[9301-9317]"
    }, {
      "left" : "entrySize = currEntry.getSize();",
      "right" : "entrySize = currEntry.getSize();",
      "info" : "ExpressionStatement[9570-9602]:ExpressionStatement[9570-9602]"
    }, {
      "left" : "return currEntry;",
      "right" : "return currEntry;",
      "info" : "ReturnStatement[9612-9629]:ReturnStatement[9612-9629]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9799-9806]:Modifier[9799-9806]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9807-9811]:PrimitiveType[9807-9811]"
    }, {
      "left" : "skipRecordPadding",
      "right" : "skipRecordPadding",
      "info" : "SimpleName[9812-9829]:SimpleName[9812-9829]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[9839-9850]:SimpleType[9839-9850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9851-10171]:Block[9851-10171]"
    }, {
      "left" : "if (this.entrySize > 0 && this.entrySize % this.recordSize != 0)",
      "right" : "if (this.entrySize > 0 && this.entrySize % this.recordSize != 0)",
      "info" : "IfStatement[9861-10165]:IfStatement[9861-10165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9926-10165]:Block[9926-10165]"
    }, {
      "left" : "long numRecords = (this.entrySize / this.recordSize) + 1;",
      "right" : "long numRecords = (this.entrySize / this.recordSize) + 1;",
      "info" : "VariableDeclarationStatement[9940-9997]:VariableDeclarationStatement[9940-9997]"
    }, {
      "left" : "long padding = (numRecords * this.recordSize) - this.entrySize;",
      "right" : "long padding = (numRecords * this.recordSize) - this.entrySize;",
      "info" : "VariableDeclarationStatement[10010-10073]:VariableDeclarationStatement[10010-10073]"
    }, {
      "left" : "long skipped = IOUtils.skip(is, padding);",
      "right" : "long skipped = IOUtils.skip(is, padding);",
      "info" : "VariableDeclarationStatement[10086-10127]:VariableDeclarationStatement[10086-10127]"
    }, {
      "left" : "count(skipped);",
      "right" : "count(skipped);",
      "info" : "ExpressionStatement[10140-10155]:ExpressionStatement[10140-10155]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[10372-10381]:Modifier[10372-10381]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[10382-10388]:ArrayType[10382-10388]"
    }, {
      "left" : "getLongNameData",
      "right" : "getLongNameData",
      "info" : "SimpleName[10389-10404]:SimpleName[10389-10404]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[10414-10425]:SimpleType[10414-10425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10426-11310]:Block[10426-11310]"
    }, {
      "left" : "ByteArrayOutputStream longName = new ByteArrayOutputStream();",
      "right" : "ByteArrayOutputStream longName = new ByteArrayOutputStream();",
      "info" : "VariableDeclarationStatement[10464-10525]:VariableDeclarationStatement[10464-10525]"
    }, {
      "left" : "int length = 0;",
      "right" : "int length = 0;",
      "info" : "VariableDeclarationStatement[10534-10549]:VariableDeclarationStatement[10534-10549]"
    }, {
      "left" : "while ((length = read(SMALL_BUF)) >= 0)",
      "right" : "while ((length = read(SMALL_BUF)) >= 0)",
      "info" : "WhileStatement[10558-10659]:WhileStatement[10558-10659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10598-10659]:Block[10598-10659]"
    }, {
      "left" : "longName.write(SMALL_BUF, 0, length);",
      "right" : "longName.write(SMALL_BUF, 0, length);",
      "info" : "ExpressionStatement[10612-10649]:ExpressionStatement[10612-10649]"
    }, {
      "left" : "getNextEntry();",
      "right" : "getNextEntry();",
      "info" : "ExpressionStatement[10668-10683]:ExpressionStatement[10668-10683]"
    }, {
      "left" : "if (currEntry == null)",
      "right" : "if (currEntry == null)",
      "info" : "IfStatement[10692-10856]:IfStatement[10692-10856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10715-10856]:Block[10715-10856]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10834-10846]:ReturnStatement[10834-10846]"
    }, {
      "left" : "byte[] longNameData = longName.toByteArray();",
      "right" : "byte[] longNameData = longName.toByteArray();",
      "info" : "VariableDeclarationStatement[10865-10910]:VariableDeclarationStatement[10865-10910]"
    }, {
      "left" : "length = longNameData.length;",
      "right" : "length = longNameData.length;",
      "info" : "ExpressionStatement[10965-10994]:ExpressionStatement[10965-10994]"
    }, {
      "left" : "while (length > 0 && longNameData[length - 1] == 0)",
      "right" : "while (length > 0 && longNameData[length - 1] == 0)",
      "info" : "WhileStatement[11003-11088]:WhileStatement[11003-11088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11055-11088]:Block[11055-11088]"
    }, {
      "left" : "--length;",
      "right" : "--length;",
      "info" : "ExpressionStatement[11069-11078]:ExpressionStatement[11069-11078]"
    }, {
      "left" : "if (length != longNameData.length)",
      "right" : "if (length != longNameData.length)",
      "info" : "IfStatement[11097-11275]:IfStatement[11097-11275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11132-11275]:Block[11132-11275]"
    }, {
      "left" : "byte[] l = new byte[length];",
      "right" : "byte[] l = new byte[length];",
      "info" : "VariableDeclarationStatement[11146-11174]:VariableDeclarationStatement[11146-11174]"
    }, {
      "left" : "System.arraycopy(longNameData, 0, l, 0, length);",
      "right" : "System.arraycopy(longNameData, 0, l, 0, length);",
      "info" : "ExpressionStatement[11187-11235]:ExpressionStatement[11187-11235]"
    }, {
      "left" : "longNameData = l;",
      "right" : "longNameData = l;",
      "info" : "ExpressionStatement[11248-11265]:ExpressionStatement[11248-11265]"
    }, {
      "left" : "return longNameData;",
      "right" : "return longNameData;",
      "info" : "ReturnStatement[11284-11304]:ReturnStatement[11284-11304]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11873-11880]:Modifier[11873-11880]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[11881-11887]:ArrayType[11881-11887]"
    }, {
      "left" : "getRecord",
      "right" : "getRecord",
      "info" : "SimpleName[11888-11897]:SimpleName[11888-11897]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11907-11918]:SimpleType[11907-11918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11919-12209]:Block[11919-12209]"
    }, {
      "left" : "byte[] headerBuf = readRecord();",
      "right" : "byte[] headerBuf = readRecord();",
      "info" : "VariableDeclarationStatement[11929-11961]:VariableDeclarationStatement[11929-11961]"
    }, {
      "left" : "hasHitEOF = isEOFRecord(headerBuf);",
      "right" : "hasHitEOF = isEOFRecord(headerBuf);",
      "info" : "ExpressionStatement[11970-12005]:ExpressionStatement[11970-12005]"
    }, {
      "left" : "if (hasHitEOF && headerBuf != null)",
      "right" : "if (hasHitEOF && headerBuf != null)",
      "info" : "IfStatement[12014-12177]:IfStatement[12014-12177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12050-12177]:Block[12050-12177]"
    }, {
      "left" : "tryToConsumeSecondEOFRecord();",
      "right" : "tryToConsumeSecondEOFRecord();",
      "info" : "ExpressionStatement[12064-12094]:ExpressionStatement[12064-12094]"
    }, {
      "left" : "consumeRemainderOfLastBlock();",
      "right" : "consumeRemainderOfLastBlock();",
      "info" : "ExpressionStatement[12107-12137]:ExpressionStatement[12107-12137]"
    }, {
      "left" : "headerBuf = null;",
      "right" : "headerBuf = null;",
      "info" : "ExpressionStatement[12150-12167]:ExpressionStatement[12150-12167]"
    }, {
      "left" : "return headerBuf;",
      "right" : "return headerBuf;",
      "info" : "ReturnStatement[12186-12203]:ReturnStatement[12186-12203]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[12493-12502]:Modifier[12493-12502]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[12503-12510]:PrimitiveType[12503-12510]"
    }, {
      "left" : "isEOFRecord",
      "right" : "isEOFRecord",
      "info" : "SimpleName[12511-12522]:SimpleName[12511-12522]"
    }, {
      "left" : "byte[] record",
      "right" : "byte[] record",
      "info" : "SingleVariableDeclaration[12523-12536]:SingleVariableDeclaration[12523-12536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12538-12624]:Block[12538-12624]"
    }, {
      "left" : "return record == null || ArchiveUtils.isArrayZero(record, recordSize);",
      "right" : "return record == null || ArchiveUtils.isArrayZero(record, recordSize);",
      "info" : "ReturnStatement[12548-12618]:ReturnStatement[12548-12618]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[12817-12826]:Modifier[12817-12826]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[12827-12833]:ArrayType[12827-12833]"
    }, {
      "left" : "readRecord",
      "right" : "readRecord",
      "info" : "SimpleName[12834-12844]:SimpleName[12834-12844]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12854-12865]:SimpleType[12854-12865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12866-13094]:Block[12866-13094]"
    }, {
      "left" : "byte[] record = new byte[recordSize];",
      "right" : "byte[] record = new byte[recordSize];",
      "info" : "VariableDeclarationStatement[12877-12914]:VariableDeclarationStatement[12877-12914]"
    }, {
      "left" : "int readNow = IOUtils.readFully(is, record);",
      "right" : "int readNow = IOUtils.readFully(is, record);",
      "info" : "VariableDeclarationStatement[12924-12968]:VariableDeclarationStatement[12924-12968]"
    }, {
      "left" : "count(readNow);",
      "right" : "count(readNow);",
      "info" : "ExpressionStatement[12977-12992]:ExpressionStatement[12977-12992]"
    }, {
      "left" : "if (readNow != recordSize)",
      "right" : "if (readNow != recordSize)",
      "info" : "IfStatement[13001-13064]:IfStatement[13001-13064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13028-13064]:Block[13028-13064]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[13042-13054]:ReturnStatement[13042-13054]"
    }, {
      "left" : "return record;",
      "right" : "return record;",
      "info" : "ReturnStatement[13074-13088]:ReturnStatement[13074-13088]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13100-13107]:Modifier[13100-13107]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13108-13112]:PrimitiveType[13108-13112]"
    }, {
      "left" : "paxHeaders",
      "right" : "paxHeaders",
      "info" : "SimpleName[13113-13123]:SimpleName[13113-13123]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13133-13144]:SimpleType[13133-13144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13144-13313]:Block[13144-13313]"
    }, {
      "left" : "Map<String, String> headers = parsePaxHeaders(this);",
      "right" : "Map<String, String> headers = parsePaxHeaders(this);",
      "info" : "VariableDeclarationStatement[13154-13206]:VariableDeclarationStatement[13154-13206]"
    }, {
      "left" : "getNextEntry();",
      "right" : "getNextEntry();",
      "info" : "ExpressionStatement[13215-13230]:ExpressionStatement[13215-13230]"
    }, {
      "left" : "applyPaxHeadersToCurrentEntry(headers);",
      "right" : "applyPaxHeadersToCurrentEntry(headers);",
      "info" : "ExpressionStatement[13268-13307]:ExpressionStatement[13268-13307]"
    }, {
      "left" : "Map<String, String>",
      "right" : "Map<String, String>",
      "info" : "ParameterizedType[13319-13338]:ParameterizedType[13319-13338]"
    }, {
      "left" : "parsePaxHeaders",
      "right" : "parsePaxHeaders",
      "info" : "SimpleName[13339-13354]:SimpleName[13339-13354]"
    }, {
      "left" : "InputStream i",
      "right" : "InputStream i",
      "info" : "SingleVariableDeclaration[13355-13368]:SingleVariableDeclaration[13355-13368]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13377-13388]:SimpleType[13377-13388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13389-15330]:Block[13389-15330]"
    }, {
      "left" : "Map<String, String> headers = new HashMap<String, String>();",
      "right" : "Map<String, String> headers = new HashMap<String, String>();",
      "info" : "VariableDeclarationStatement[13399-13459]:VariableDeclarationStatement[13399-13459]"
    }, {
      "left" : "while(true)",
      "right" : "while(true)",
      "info" : "WhileStatement[13515-15300]:WhileStatement[13515-15300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13526-15300]:Block[13526-15300]"
    }, {
      "left" : "int ch;",
      "right" : "int ch;",
      "info" : "VariableDeclarationStatement[13554-13561]:VariableDeclarationStatement[13554-13561]"
    }, {
      "left" : "int len = 0;",
      "right" : "int len = 0;",
      "info" : "VariableDeclarationStatement[13574-13586]:VariableDeclarationStatement[13574-13586]"
    }, {
      "left" : "int read = 0;",
      "right" : "int read = 0;",
      "info" : "VariableDeclarationStatement[13599-13612]:VariableDeclarationStatement[13599-13612]"
    }, {
      "left" : "while((ch = i.read()) != -1)",
      "right" : "while((ch = i.read()) != -1)",
      "info" : "WhileStatement[13625-15219]:WhileStatement[13625-15219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13654-15219]:Block[13654-15219]"
    }, {
      "left" : "read++;",
      "right" : "read++;",
      "info" : "ExpressionStatement[13672-13679]:ExpressionStatement[13672-13679]"
    }, {
      "left" : "if (ch == ' ')",
      "right" : "if (ch == ' ')",
      "info" : "IfStatement[13696-15145]:IfStatement[13696-15145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13710-15145]:Block[13710-15145]"
    }, {
      "left" : "ByteArrayOutputStream coll = new ByteArrayOutputStream();",
      "right" : "ByteArrayOutputStream coll = new ByteArrayOutputStream();",
      "info" : "VariableDeclarationStatement[13791-13848]:VariableDeclarationStatement[13791-13848]"
    }, {
      "left" : "while((ch = i.read()) != -1)",
      "right" : "while((ch = i.read()) != -1)",
      "info" : "WhileStatement[13869-15073]:WhileStatement[13869-15073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13898-15073]:Block[13898-15073]"
    }, {
      "left" : "read++;",
      "right" : "read++;",
      "info" : "ExpressionStatement[13924-13931]:ExpressionStatement[13924-13931]"
    }, {
      "left" : "if (ch == '=')",
      "right" : "if (ch == '=')",
      "info" : "IfStatement[13956-15004]:IfStatement[13956-15004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13970-15004]:Block[13970-15004]"
    }, {
      "left" : "String keyword = coll.toString(CharsetNames.UTF_8);",
      "right" : "String keyword = coll.toString(CharsetNames.UTF_8);",
      "info" : "VariableDeclarationStatement[14018-14069]:VariableDeclarationStatement[14018-14069]"
    }, {
      "left" : "byte[] rest = new byte[len - read];",
      "right" : "byte[] rest = new byte[len - read];",
      "info" : "VariableDeclarationStatement[14147-14182]:VariableDeclarationStatement[14147-14182]"
    }, {
      "left" : "int got = IOUtils.readFully(i, rest);",
      "right" : "int got = IOUtils.readFully(i, rest);",
      "info" : "VariableDeclarationStatement[14211-14248]:VariableDeclarationStatement[14211-14248]"
    }, {
      "left" : "if (got != len - read)",
      "right" : "if (got != len - read)",
      "info" : "IfStatement[14277-14684]:IfStatement[14277-14684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14299-14684]:Block[14299-14684]"
    }, {
      "left" : "throw new IOException(\"Failed to read \"\n                                                      + \"Paxheader. Expected \"\n                                                      + (len - read)\n                                                      + \" bytes, read \"\n                                                      + got);",
      "right" : "throw new IOException(\"Failed to read \"\n                                                      + \"Paxheader. Expected \"\n                                                      + (len - read)\n                                                      + \" bytes, read \"\n                                                      + got);",
      "info" : "ThrowStatement[14333-14654]:ThrowStatement[14333-14654]"
    }, {
      "left" : "String value = new String(rest, 0,\n                                                      len - read - 1, CharsetNames.UTF_8);",
      "right" : "String value = new String(rest, 0,\n                                                      len - read - 1, CharsetNames.UTF_8);",
      "info" : "VariableDeclarationStatement[14761-14886]:VariableDeclarationStatement[14761-14886]"
    }, {
      "left" : "headers.put(keyword, value);",
      "right" : "headers.put(keyword, value);",
      "info" : "ExpressionStatement[14915-14943]:ExpressionStatement[14915-14943]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14972-14978]:BreakStatement[14972-14978]"
    }, {
      "left" : "coll.write((byte) ch);",
      "right" : "coll.write((byte) ch);",
      "info" : "ExpressionStatement[15029-15051]:ExpressionStatement[15029-15051]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15094-15100]:BreakStatement[15094-15100]"
    }, {
      "left" : "len *= 10;",
      "right" : "len *= 10;",
      "info" : "ExpressionStatement[15162-15172]:ExpressionStatement[15162-15172]"
    }, {
      "left" : "len += ch - '0';",
      "right" : "len += ch - '0';",
      "info" : "ExpressionStatement[15189-15205]:ExpressionStatement[15189-15205]"
    }, {
      "left" : "if (ch == -1)",
      "right" : "if (ch == -1)",
      "info" : "IfStatement[15232-15290]:IfStatement[15232-15290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15245-15290]:Block[15245-15290]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15270-15276]:BreakStatement[15270-15276]"
    }, {
      "left" : "return headers;",
      "right" : "return headers;",
      "info" : "ReturnStatement[15309-15324]:ReturnStatement[15309-15324]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15336-15343]:Modifier[15336-15343]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15344-15348]:PrimitiveType[15344-15348]"
    }, {
      "left" : "applyPaxHeadersToCurrentEntry",
      "right" : "applyPaxHeadersToCurrentEntry",
      "info" : "SimpleName[15349-15378]:SimpleName[15349-15378]"
    }, {
      "left" : "Map<String, String> headers",
      "right" : "Map<String, String> headers",
      "info" : "SingleVariableDeclaration[15379-15406]:SingleVariableDeclaration[15379-15406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15408-16959]:Block[15408-16959]"
    }, {
      "left" : "for (Entry<String, String> ent : headers.entrySet())",
      "right" : "for (Entry<String, String> ent : headers.entrySet())",
      "info" : "EnhancedForStatement[15783-16953]:EnhancedForStatement[15783-16953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15835-16953]:Block[15835-16953]"
    }, {
      "left" : "String key = ent.getKey();",
      "right" : "String key = ent.getKey();",
      "info" : "VariableDeclarationStatement[15849-15875]:VariableDeclarationStatement[15849-15875]"
    }, {
      "left" : "String val = ent.getValue();",
      "right" : "String val = ent.getValue();",
      "info" : "VariableDeclarationStatement[15888-15916]:VariableDeclarationStatement[15888-15916]"
    }, {
      "left" : "if (\"path\".equals(key))",
      "right" : "if (\"path\".equals(key))",
      "info" : "IfStatement[15929-16943]:IfStatement[15929-16943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15952-16007]:Block[15952-16007]"
    }, {
      "left" : "currEntry.setName(val);",
      "right" : "currEntry.setName(val);",
      "info" : "ExpressionStatement[15970-15993]:ExpressionStatement[15970-15993]"
    }, {
      "left" : "if (\"linkpath\".equals(key))",
      "right" : "if (\"linkpath\".equals(key))",
      "info" : "IfStatement[16013-16943]:IfStatement[16013-16943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16040-16099]:Block[16040-16099]"
    }, {
      "left" : "currEntry.setLinkName(val);",
      "right" : "currEntry.setLinkName(val);",
      "info" : "ExpressionStatement[16058-16085]:ExpressionStatement[16058-16085]"
    }, {
      "left" : "if (\"gid\".equals(key))",
      "right" : "if (\"gid\".equals(key))",
      "info" : "IfStatement[16105-16943]:IfStatement[16105-16943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16127-16203]:Block[16127-16203]"
    }, {
      "left" : "currEntry.setGroupId(Integer.parseInt(val));",
      "right" : "currEntry.setGroupId(Integer.parseInt(val));",
      "info" : "ExpressionStatement[16145-16189]:ExpressionStatement[16145-16189]"
    }, {
      "left" : "if (\"gname\".equals(key))",
      "right" : "if (\"gname\".equals(key))",
      "info" : "IfStatement[16209-16943]:IfStatement[16209-16943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16233-16293]:Block[16233-16293]"
    }, {
      "left" : "currEntry.setGroupName(val);",
      "right" : "currEntry.setGroupName(val);",
      "info" : "ExpressionStatement[16251-16279]:ExpressionStatement[16251-16279]"
    }, {
      "left" : "if (\"uid\".equals(key))",
      "right" : "if (\"uid\".equals(key))",
      "info" : "IfStatement[16299-16943]:IfStatement[16299-16943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16321-16396]:Block[16321-16396]"
    }, {
      "left" : "currEntry.setUserId(Integer.parseInt(val));",
      "right" : "currEntry.setUserId(Integer.parseInt(val));",
      "info" : "ExpressionStatement[16339-16382]:ExpressionStatement[16339-16382]"
    }, {
      "left" : "if (\"uname\".equals(key))",
      "right" : "if (\"uname\".equals(key))",
      "info" : "IfStatement[16402-16943]:IfStatement[16402-16943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16426-16485]:Block[16426-16485]"
    }, {
      "left" : "currEntry.setUserName(val);",
      "right" : "currEntry.setUserName(val);",
      "info" : "ExpressionStatement[16444-16471]:ExpressionStatement[16444-16471]"
    }, {
      "left" : "if (\"size\".equals(key))",
      "right" : "if (\"size\".equals(key))",
      "info" : "IfStatement[16491-16943]:IfStatement[16491-16943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16514-16585]:Block[16514-16585]"
    }, {
      "left" : "currEntry.setSize(Long.parseLong(val));",
      "right" : "currEntry.setSize(Long.parseLong(val));",
      "info" : "ExpressionStatement[16532-16571]:ExpressionStatement[16532-16571]"
    }, {
      "left" : "if (\"mtime\".equals(key))",
      "right" : "if (\"mtime\".equals(key))",
      "info" : "IfStatement[16591-16943]:IfStatement[16591-16943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16615-16709]:Block[16615-16709]"
    }, {
      "left" : "currEntry.setModTime((long) (Double.parseDouble(val) * 1000));",
      "right" : "currEntry.setModTime((long) (Double.parseDouble(val) * 1000));",
      "info" : "ExpressionStatement[16633-16695]:ExpressionStatement[16633-16695]"
    }, {
      "left" : "if (\"SCHILY.devminor\".equals(key))",
      "right" : "if (\"SCHILY.devminor\".equals(key))",
      "info" : "IfStatement[16715-16943]:IfStatement[16715-16943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16749-16826]:Block[16749-16826]"
    }, {
      "left" : "currEntry.setDevMinor(Integer.parseInt(val));",
      "right" : "currEntry.setDevMinor(Integer.parseInt(val));",
      "info" : "ExpressionStatement[16767-16812]:ExpressionStatement[16767-16812]"
    }, {
      "left" : "if (\"SCHILY.devmajor\".equals(key))",
      "right" : "if (\"SCHILY.devmajor\".equals(key))",
      "info" : "IfStatement[16832-16943]:IfStatement[16832-16943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16866-16943]:Block[16866-16943]"
    }, {
      "left" : "currEntry.setDevMajor(Integer.parseInt(val));",
      "right" : "currEntry.setDevMajor(Integer.parseInt(val));",
      "info" : "ExpressionStatement[16884-16929]:ExpressionStatement[16884-16929]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17238-17245]:Modifier[17238-17245]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17246-17250]:PrimitiveType[17246-17250]"
    }, {
      "left" : "readGNUSparse",
      "right" : "readGNUSparse",
      "info" : "SimpleName[17251-17264]:SimpleName[17251-17264]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[17274-17285]:SimpleType[17274-17285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17286-17954]:Block[17286-17954]"
    }, {
      "left" : "if (currEntry.isExtended())",
      "right" : "if (currEntry.isExtended())",
      "info" : "IfStatement[17443-17948]:IfStatement[17443-17948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17471-17948]:Block[17471-17948]"
    }, {
      "left" : "TarArchiveSparseEntry entry;",
      "right" : "TarArchiveSparseEntry entry;",
      "info" : "VariableDeclarationStatement[17485-17513]:VariableDeclarationStatement[17485-17513]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[17526-17938]:DoStatement[17526-17938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17529-17910]:Block[17529-17910]"
    }, {
      "left" : "byte[] headerBuf = getRecord();",
      "right" : "byte[] headerBuf = getRecord();",
      "info" : "VariableDeclarationStatement[17547-17578]:VariableDeclarationStatement[17547-17578]"
    }, {
      "left" : "if (headerBuf == null)",
      "right" : "if (headerBuf == null)",
      "info" : "IfStatement[17595-17702]:IfStatement[17595-17702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17618-17702]:Block[17618-17702]"
    }, {
      "left" : "currEntry = null;",
      "right" : "currEntry = null;",
      "info" : "ExpressionStatement[17640-17657]:ExpressionStatement[17640-17657]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17678-17684]:BreakStatement[17678-17684]"
    }, {
      "left" : "entry = new TarArchiveSparseEntry(headerBuf);",
      "right" : "entry = new TarArchiveSparseEntry(headerBuf);",
      "info" : "ExpressionStatement[17719-17764]:ExpressionStatement[17719-17764]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18191-18200]:MarkerAnnotation[18191-18200]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18205-18211]:Modifier[18205-18211]"
    }, {
      "left" : "ArchiveEntry",
      "right" : "ArchiveEntry",
      "info" : "SimpleType[18212-18224]:SimpleType[18212-18224]"
    }, {
      "left" : "getNextEntry",
      "right" : "getNextEntry",
      "info" : "SimpleName[18225-18237]:SimpleName[18225-18237]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[18247-18258]:SimpleType[18247-18258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18259-18300]:Block[18259-18300]"
    }, {
      "left" : "return getNextTarEntry();",
      "right" : "return getNextTarEntry();",
      "info" : "ReturnStatement[18269-18294]:ReturnStatement[18269-18294]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18790-18797]:Modifier[18790-18797]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18798-18802]:PrimitiveType[18798-18802]"
    }, {
      "left" : "tryToConsumeSecondEOFRecord",
      "right" : "tryToConsumeSecondEOFRecord",
      "info" : "SimpleName[18803-18830]:SimpleName[18803-18830]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[18840-18851]:SimpleType[18840-18851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18852-19228]:Block[18852-19228]"
    }, {
      "left" : "boolean shouldReset = true;",
      "right" : "boolean shouldReset = true;",
      "info" : "VariableDeclarationStatement[18862-18889]:VariableDeclarationStatement[18862-18889]"
    }, {
      "left" : "boolean marked = is.markSupported();",
      "right" : "boolean marked = is.markSupported();",
      "info" : "VariableDeclarationStatement[18898-18934]:VariableDeclarationStatement[18898-18934]"
    }, {
      "left" : "if (marked)",
      "right" : "if (marked)",
      "info" : "IfStatement[18943-18999]:IfStatement[18943-18999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18955-18999]:Block[18955-18999]"
    }, {
      "left" : "is.mark(recordSize);",
      "right" : "is.mark(recordSize);",
      "info" : "ExpressionStatement[18969-18989]:ExpressionStatement[18969-18989]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19008-19222]:TryStatement[19008-19222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19012-19077]:Block[19012-19077]"
    }, {
      "left" : "shouldReset = !isEOFRecord(readRecord());",
      "right" : "shouldReset = !isEOFRecord(readRecord());",
      "info" : "ExpressionStatement[19026-19067]:ExpressionStatement[19026-19067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19086-19222]:Block[19086-19222]"
    }, {
      "left" : "if (shouldReset && marked)",
      "right" : "if (shouldReset && marked)",
      "info" : "IfStatement[19100-19212]:IfStatement[19100-19212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19127-19212]:Block[19127-19212]"
    }, {
      "left" : "pushedBackBytes(recordSize);",
      "right" : "pushedBackBytes(recordSize);",
      "info" : "ExpressionStatement[19145-19173]:ExpressionStatement[19145-19173]"
    }, {
      "left" : "is.reset();",
      "right" : "is.reset();",
      "info" : "ExpressionStatement[19187-19198]:ExpressionStatement[19187-19198]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19751-19760]:MarkerAnnotation[19751-19760]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19765-19771]:Modifier[19765-19771]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[19772-19775]:PrimitiveType[19772-19775]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[19776-19780]:SimpleName[19776-19780]"
    }, {
      "left" : "byte[] buf",
      "right" : "byte[] buf",
      "info" : "SingleVariableDeclaration[19781-19791]:SingleVariableDeclaration[19781-19791]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[19793-19803]:SingleVariableDeclaration[19793-19803]"
    }, {
      "left" : "int numToRead",
      "right" : "int numToRead",
      "info" : "SingleVariableDeclaration[19805-19818]:SingleVariableDeclaration[19805-19818]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[19827-19838]:SimpleType[19827-19838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19839-20375]:Block[19839-20490]"
    }, {
      "left" : "int totalRead = 0;",
      "right" : "int totalRead = 0;",
      "info" : "VariableDeclarationStatement[19846-19864]:VariableDeclarationStatement[19846-19864]"
    }, {
      "left" : "if (hasHitEOF || entryOffset >= entrySize)",
      "right" : "if (hasHitEOF || entryOffset >= entrySize)",
      "info" : "IfStatement[19874-19951]:IfStatement[19874-19951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19917-19951]:Block[19917-19951]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[19931-19941]:ReturnStatement[19931-19941]"
    }, {
      "left" : "if (currEntry == null)",
      "right" : "if (currEntry == null)",
      "info" : "IfStatement[19961-20064]:IfStatement[19961-20064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19984-20064]:Block[19984-20064]"
    }, {
      "left" : "throw new IllegalStateException(\"No current tar entry\");",
      "right" : "throw new IllegalStateException(\"No current tar entry\");",
      "info" : "ThrowStatement[19998-20054]:ThrowStatement[19998-20054]"
    }, {
      "left" : "numToRead = Math.min(numToRead, available());",
      "right" : "numToRead = Math.min(numToRead, available());",
      "info" : "ExpressionStatement[20074-20119]:ExpressionStatement[20074-20119]"
    }, {
      "left" : "totalRead = is.read(buf, offset, numToRead);",
      "right" : "totalRead = is.read(buf, offset, numToRead);",
      "info" : "ExpressionStatement[20137-20181]:ExpressionStatement[20137-20181]"
    }, {
      "left" : "count(totalRead);",
      "right" : "count(totalRead);",
      "info" : "ExpressionStatement[20190-20207]:ExpressionStatement[20392-20409]"
    }, {
      "left" : "if (totalRead == -1)",
      "right" : "if (totalRead == -1)",
      "info" : "IfStatement[20225-20342]:IfStatement[20199-20457]"
    }, {
      "left" : "hasHitEOF = true;",
      "right" : "hasHitEOF = true;",
      "info" : "ExpressionStatement[20260-20277]:ExpressionStatement[20345-20362]"
    }, {
      "left" : "entryOffset += totalRead;",
      "right" : "entryOffset += totalRead;",
      "info" : "ExpressionStatement[20307-20332]:ExpressionStatement[20422-20447]"
    }, {
      "left" : "return totalRead;",
      "right" : "return totalRead;",
      "info" : "ReturnStatement[20352-20369]:ReturnStatement[20467-20484]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20533-20542]:MarkerAnnotation[20648-20657]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20547-20553]:Modifier[20662-20668]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20554-20561]:PrimitiveType[20669-20676]"
    }, {
      "left" : "canReadEntryData",
      "right" : "canReadEntryData",
      "info" : "SimpleName[20562-20578]:SimpleName[20677-20693]"
    }, {
      "left" : "ArchiveEntry ae",
      "right" : "ArchiveEntry ae",
      "info" : "SingleVariableDeclaration[20579-20594]:SingleVariableDeclaration[20694-20709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20596-20773]:Block[20711-20888]"
    }, {
      "left" : "if (ae instanceof TarArchiveEntry)",
      "right" : "if (ae instanceof TarArchiveEntry)",
      "info" : "IfStatement[20606-20745]:IfStatement[20721-20860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20641-20745]:Block[20756-20860]"
    }, {
      "left" : "TarArchiveEntry te = (TarArchiveEntry) ae;",
      "right" : "TarArchiveEntry te = (TarArchiveEntry) ae;",
      "info" : "VariableDeclarationStatement[20655-20697]:VariableDeclarationStatement[20770-20812]"
    }, {
      "left" : "return !te.isGNUSparse();",
      "right" : "return !te.isGNUSparse();",
      "info" : "ReturnStatement[20710-20735]:ReturnStatement[20825-20850]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20754-20767]:ReturnStatement[20869-20882]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20922-20928]:Modifier[21037-21043]"
    }, {
      "left" : "TarArchiveEntry",
      "right" : "TarArchiveEntry",
      "info" : "SimpleType[20929-20944]:SimpleType[21044-21059]"
    }, {
      "left" : "getCurrentEntry",
      "right" : "getCurrentEntry",
      "info" : "SimpleName[20945-20960]:SimpleName[21060-21075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20963-20996]:Block[21078-21111]"
    }, {
      "left" : "return currEntry;",
      "right" : "return currEntry;",
      "info" : "ReturnStatement[20973-20990]:ReturnStatement[21088-21105]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[21002-21011]:Modifier[21117-21126]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[21012-21017]:Modifier[21127-21132]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21018-21022]:PrimitiveType[21133-21137]"
    }, {
      "left" : "setCurrentEntry",
      "right" : "setCurrentEntry",
      "info" : "SimpleName[21023-21038]:SimpleName[21138-21153]"
    }, {
      "left" : "TarArchiveEntry e",
      "right" : "TarArchiveEntry e",
      "info" : "SingleVariableDeclaration[21039-21056]:SingleVariableDeclaration[21154-21171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21058-21088]:Block[21173-21203]"
    }, {
      "left" : "currEntry = e;",
      "right" : "currEntry = e;",
      "info" : "ExpressionStatement[21068-21082]:ExpressionStatement[21183-21197]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[21094-21103]:Modifier[21209-21218]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[21104-21109]:Modifier[21219-21224]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21110-21117]:PrimitiveType[21225-21232]"
    }, {
      "left" : "isAtEOF",
      "right" : "isAtEOF",
      "info" : "SimpleName[21118-21125]:SimpleName[21233-21240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21128-21161]:Block[21243-21276]"
    }, {
      "left" : "return hasHitEOF;",
      "right" : "return hasHitEOF;",
      "info" : "ReturnStatement[21138-21155]:ReturnStatement[21253-21270]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[21167-21176]:Modifier[21282-21291]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[21177-21182]:Modifier[21292-21297]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21183-21187]:PrimitiveType[21298-21302]"
    }, {
      "left" : "setAtEOF",
      "right" : "setAtEOF",
      "info" : "SimpleName[21188-21196]:SimpleName[21303-21311]"
    }, {
      "left" : "boolean b",
      "right" : "boolean b",
      "info" : "SingleVariableDeclaration[21197-21206]:SingleVariableDeclaration[21312-21321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21208-21238]:Block[21323-21353]"
    }, {
      "left" : "hasHitEOF = b;",
      "right" : "hasHitEOF = b;",
      "info" : "ExpressionStatement[21218-21232]:ExpressionStatement[21333-21347]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21464-21471]:Modifier[21579-21586]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21472-21476]:PrimitiveType[21587-21591]"
    }, {
      "left" : "consumeRemainderOfLastBlock",
      "right" : "consumeRemainderOfLastBlock",
      "info" : "SimpleName[21477-21504]:SimpleName[21592-21619]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[21514-21525]:SimpleType[21629-21640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21526-21754]:Block[21641-21869]"
    }, {
      "left" : "long bytesReadOfLastBlock = getBytesRead() % blockSize;",
      "right" : "long bytesReadOfLastBlock = getBytesRead() % blockSize;",
      "info" : "VariableDeclarationStatement[21536-21591]:VariableDeclarationStatement[21651-21706]"
    }, {
      "left" : "if (bytesReadOfLastBlock > 0)",
      "right" : "if (bytesReadOfLastBlock > 0)",
      "info" : "IfStatement[21600-21748]:IfStatement[21715-21863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21630-21748]:Block[21745-21863]"
    }, {
      "left" : "long skipped = IOUtils.skip(is, blockSize - bytesReadOfLastBlock);",
      "right" : "long skipped = IOUtils.skip(is, blockSize - bytesReadOfLastBlock);",
      "info" : "VariableDeclarationStatement[21644-21710]:VariableDeclarationStatement[21759-21825]"
    }, {
      "left" : "count(skipped);",
      "right" : "count(skipped);",
      "info" : "ExpressionStatement[21723-21738]:ExpressionStatement[21838-21853]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22061-22067]:Modifier[22176-22182]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22068-22074]:Modifier[22183-22189]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22075-22082]:PrimitiveType[22190-22197]"
    }, {
      "left" : "matches",
      "right" : "matches",
      "info" : "SimpleName[22083-22090]:SimpleName[22198-22205]"
    }, {
      "left" : "byte[] signature",
      "right" : "byte[] signature",
      "info" : "SingleVariableDeclaration[22091-22107]:SingleVariableDeclaration[22206-22222]"
    }, {
      "left" : "int length",
      "right" : "int length",
      "info" : "SingleVariableDeclaration[22109-22119]:SingleVariableDeclaration[22224-22234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22121-23604]:Block[22236-23719]"
    }, {
      "left" : "if (length < TarConstants.VERSION_OFFSET+TarConstants.VERSIONLEN)",
      "right" : "if (length < TarConstants.VERSION_OFFSET+TarConstants.VERSIONLEN)",
      "info" : "IfStatement[22131-22234]:IfStatement[22246-22349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22197-22234]:Block[22312-22349]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22211-22224]:ReturnStatement[22326-22339]"
    }, {
      "left" : "if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_POSIX,\n                signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN)\n            &&\n            ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_POSIX,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN))",
      "right" : "if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_POSIX,\n                signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN)\n            &&\n            ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_POSIX,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN))",
      "info" : "IfStatement[22244-22600]:IfStatement[22359-22715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22564-22600]:Block[22679-22715]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22578-22590]:ReturnStatement[22693-22705]"
    }, {
      "left" : "if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_GNU,\n                signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN)\n            &&\n            (\n             ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_GNU_SPACE,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN)\n            ||\n            ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_GNU_ZERO,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN)\n            ))",
      "right" : "if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_GNU,\n                signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN)\n            &&\n            (\n             ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_GNU_SPACE,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN)\n            ||\n            ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_GNU_ZERO,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN)\n            ))",
      "info" : "IfStatement[22609-23165]:IfStatement[22724-23280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23129-23165]:Block[23244-23280]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23143-23155]:ReturnStatement[23258-23270]"
    }, {
      "left" : "if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_ANT,\n                signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN)\n            &&\n            ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_ANT,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN))",
      "right" : "if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_ANT,\n                signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN)\n            &&\n            ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_ANT,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN))",
      "info" : "IfStatement[23224-23576]:IfStatement[23339-23691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23540-23576]:Block[23655-23691]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23554-23566]:ReturnStatement[23669-23681]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[23585-23598]:ReturnStatement[23700-23713]"
    } ]
  },
  "interFileMappings" : { }
}