{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[368-1359]:MethodDeclaration[368-1359]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[1392-2238]:MethodDeclaration[1392-2238]"
    }, {
      "left" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[2248-2417]:MethodDeclaration[2248-2417]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[2450-3577]:MethodDeclaration[2450-3577]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[3606-6583]:MethodDeclaration[3606-6583]"
    }, {
      "left" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[6593-6742]:MethodDeclaration[6593-6742]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[6779-7818]:MethodDeclaration[6779-7818]"
    }, {
      "left" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[7828-8009]:MethodDeclaration[7828-8009]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[8041-9804]:MethodDeclaration[8041-9804]"
    }, {
      "left" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[9814-9998]:MethodDeclaration[9814-9998]"
    }, {
      "left" : "boolean anyOtherEndTag(Token t, TreeBuilder tb)",
      "right" : "boolean anyOtherEndTag(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[38621-39449]:MethodDeclaration[38631-39459]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[39539-40181]:MethodDeclaration[39549-40191]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[40211-43922]:MethodDeclaration[40221-43932]"
    }, {
      "left" : "boolean anythingElse(Token t, TreeBuilder tb)",
      "right" : "boolean anythingElse(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[43932-44416]:MethodDeclaration[43942-44426]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[44450-46049]:MethodDeclaration[44460-46059]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[46081-47621]:MethodDeclaration[46091-47631]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[47657-49462]:MethodDeclaration[47667-49472]"
    }, {
      "left" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[49472-49730]:MethodDeclaration[49482-49740]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[49764-51751]:MethodDeclaration[49774-51761]"
    }, {
      "left" : "private boolean exitTableBody(Token t, TreeBuilder tb)",
      "right" : "private boolean exitTableBody(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[51761-52208]:MethodDeclaration[51771-52218]"
    }, {
      "left" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[52218-52326]:MethodDeclaration[52228-52336]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[52354-54327]:MethodDeclaration[52364-54337]"
    }, {
      "left" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[54337-54445]:MethodDeclaration[54347-54455]"
    }, {
      "left" : "private boolean handleMissingTr(Token t, TreeBuilder tb)",
      "right" : "private boolean handleMissingTr(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[54455-54703]:MethodDeclaration[54465-54713]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[54732-56658]:MethodDeclaration[54742-56668]"
    }, {
      "left" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[56668-56775]:MethodDeclaration[56678-56785]"
    }, {
      "left" : "private void closeCell(TreeBuilder tb)",
      "right" : "private void closeCell(TreeBuilder tb)",
      "info" : "MethodDeclaration[56785-57029]:MethodDeclaration[56795-57039]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[57060-60854]:MethodDeclaration[57070-60864]"
    }, {
      "left" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[60864-60983]:MethodDeclaration[60874-60993]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[61021-61816]:MethodDeclaration[61031-61826]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[61848-62841]:MethodDeclaration[61858-62851]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[62874-64630]:MethodDeclaration[62884-64640]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[64666-65576]:MethodDeclaration[64676-65586]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[65613-66145]:MethodDeclaration[65623-66155]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[66186-66848]:MethodDeclaration[66196-66858]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[66885-67020]:MethodDeclaration[66895-67030]"
    }, {
      "left" : "private static String nullString = String.valueOf(0x0000);",
      "right" : "private static String nullString = String.valueOf(0x0000);",
      "info" : "FieldDeclaration[67033-67091]:FieldDeclaration[67043-67101]"
    }, {
      "left" : "abstract boolean process(Token t, TreeBuilder tb);",
      "right" : "abstract boolean process(Token t, TreeBuilder tb);",
      "info" : "MethodDeclaration[67097-67147]:MethodDeclaration[67107-67157]"
    }, {
      "left" : "private static boolean isWhitespace(Token t)",
      "right" : "private static boolean isWhitespace(Token t)",
      "info" : "MethodDeclaration[67153-67615]:MethodDeclaration[67163-67625]"
    }, {
      "left" : "private static void handleRcData(Token.StartTag startTag, TreeBuilder tb)",
      "right" : "private static void handleRcData(Token.StartTag startTag, TreeBuilder tb)",
      "info" : "MethodDeclaration[67621-67848]:MethodDeclaration[67631-67858]"
    }, {
      "left" : "private static void handleRawtext(Token.StartTag startTag, TreeBuilder tb)",
      "right" : "private static void handleRawtext(Token.StartTag startTag, TreeBuilder tb)",
      "info" : "MethodDeclaration[67854-68083]:MethodDeclaration[67864-68093]"
    } ],
    "mappings" : [
 {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[368-375]:PrimitiveType[368-375]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[376-383]:SimpleName[376-383]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[384-391]:SingleVariableDeclaration[384-391]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[393-407]:SingleVariableDeclaration[393-407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[409-1359]:Block[409-1359]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[423-1324]:IfStatement[423-1324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[444-509]:Block[444-509]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[462-474]:ReturnStatement[462-474]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[515-1324]:IfStatement[515-1324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[534-591]:Block[534-591]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[552-577]:ExpressionStatement[552-577]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[597-1324]:IfStatement[597-1324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[616-1153]:Block[616-1153]"
    }, {
      "left" : "Token.Doctype d = t.asDoctype();",
      "right" : "Token.Doctype d = t.asDoctype();",
      "info" : "VariableDeclarationStatement[756-788]:VariableDeclarationStatement[756-788]"
    }, {
      "left" : "DocumentType doctype = new DocumentType(d.getName(), d.getPublicIdentifier(), d.getSystemIdentifier(), tb.getBaseUri());",
      "right" : "DocumentType doctype = new DocumentType(d.getName(), d.getPublicIdentifier(), d.getSystemIdentifier(), tb.getBaseUri());",
      "info" : "VariableDeclarationStatement[805-925]:VariableDeclarationStatement[805-925]"
    }, {
      "left" : "tb.getDocument().appendChild(doctype);",
      "right" : "tb.getDocument().appendChild(doctype);",
      "info" : "ExpressionStatement[942-980]:ExpressionStatement[942-980]"
    }, {
      "left" : "if (d.isForceQuirks())",
      "right" : "if (d.isForceQuirks())",
      "info" : "IfStatement[997-1096]:IfStatement[997-1096]"
    }, {
      "left" : "tb.getDocument().quirksMode(Document.QuirksMode.quirks);",
      "right" : "tb.getDocument().quirksMode(Document.QuirksMode.quirks);",
      "info" : "ExpressionStatement[1040-1096]:ExpressionStatement[1040-1096]"
    }, {
      "left" : "tb.transition(BeforeHtml);",
      "right" : "tb.transition(BeforeHtml);",
      "info" : "ExpressionStatement[1113-1139]:ExpressionStatement[1113-1139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1159-1324]:Block[1159-1324]"
    }, {
      "left" : "tb.transition(BeforeHtml);",
      "right" : "tb.transition(BeforeHtml);",
      "info" : "ExpressionStatement[1226-1252]:ExpressionStatement[1226-1252]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[1269-1290]:ReturnStatement[1269-1290]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[1337-1349]:ReturnStatement[1337-1349]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[1392-1399]:PrimitiveType[1392-1399]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[1400-1407]:SimpleName[1400-1407]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[1408-1415]:SingleVariableDeclaration[1408-1415]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[1417-1431]:SingleVariableDeclaration[1417-1431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1433-2238]:Block[1433-2238]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[1447-2203]:IfStatement[1447-2203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1466-1543]:Block[1466-1543]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[1484-1499]:ExpressionStatement[1484-1499]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[1516-1529]:ReturnStatement[1516-1529]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[1549-2203]:IfStatement[1549-2203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1568-1625]:Block[1568-1625]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[1586-1611]:ExpressionStatement[1586-1611]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[1631-2203]:IfStatement[1631-2203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1652-1717]:Block[1652-1717]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[1670-1682]:ReturnStatement[1670-1682]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "info" : "IfStatement[1723-2203]:IfStatement[1723-2203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1783-1884]:Block[1783-1884]"
    }, {
      "left" : "tb.insert(t.asStartTag());",
      "right" : "tb.insert(t.asStartTag());",
      "info" : "ExpressionStatement[1801-1827]:ExpressionStatement[1801-1827]"
    }, {
      "left" : "tb.transition(BeforeHead);",
      "right" : "tb.transition(BeforeHead);",
      "info" : "ExpressionStatement[1844-1870]:ExpressionStatement[1844-1870]"
    }, {
      "left" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().name(), \"head\", \"body\", \"html\", \"br\")))",
      "right" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().name(), \"head\", \"body\", \"html\", \"br\")))",
      "info" : "IfStatement[1890-2203]:IfStatement[1890-2203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1978-2037]:Block[1978-2037]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[1996-2023]:ReturnStatement[1996-2023]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[2043-2203]:IfStatement[2043-2203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2061-2138]:Block[2061-2138]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[2079-2094]:ExpressionStatement[2079-2094]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2111-2124]:ReturnStatement[2111-2124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2144-2203]:Block[2144-2203]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[2162-2189]:ReturnStatement[2162-2189]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[2216-2228]:ReturnStatement[2216-2228]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2248-2255]:Modifier[2248-2255]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[2256-2263]:PrimitiveType[2256-2263]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[2264-2276]:SimpleName[2264-2276]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[2277-2284]:SingleVariableDeclaration[2277-2284]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[2286-2300]:SingleVariableDeclaration[2286-2300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2302-2417]:Block[2302-2417]"
    }, {
      "left" : "tb.insert(\"html\");",
      "right" : "tb.insert(\"html\");",
      "info" : "ExpressionStatement[2316-2334]:ExpressionStatement[2316-2334]"
    }, {
      "left" : "tb.transition(BeforeHead);",
      "right" : "tb.transition(BeforeHead);",
      "info" : "ExpressionStatement[2347-2373]:ExpressionStatement[2347-2373]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[2386-2407]:ReturnStatement[2386-2407]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[2450-2457]:PrimitiveType[2450-2457]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[2458-2465]:SimpleName[2458-2465]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[2466-2473]:SingleVariableDeclaration[2466-2473]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[2475-2489]:SingleVariableDeclaration[2475-2489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2491-3577]:Block[2491-3577]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[2505-3542]:IfStatement[2505-3542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2526-2570]:Block[2526-2570]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[2544-2556]:ReturnStatement[2544-2556]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[2576-3542]:IfStatement[2576-3542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2595-2652]:Block[2595-2652]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[2613-2638]:ExpressionStatement[2613-2638]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[2658-3542]:IfStatement[2658-3542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2677-2754]:Block[2677-2754]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[2695-2710]:ExpressionStatement[2695-2710]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2727-2740]:ReturnStatement[2727-2740]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "info" : "IfStatement[2760-3542]:IfStatement[2760-3542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2820-2904]:Block[2820-2904]"
    }, {
      "left" : "return InBody.process(t, tb);",
      "right" : "return InBody.process(t, tb);",
      "info" : "ReturnStatement[2838-2867]:ReturnStatement[2838-2867]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().name().equals(\"head\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().name().equals(\"head\"))",
      "info" : "IfStatement[2910-3542]:IfStatement[2910-3542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2970-3123]:Block[2970-3123]"
    }, {
      "left" : "Element head = tb.insert(t.asStartTag());",
      "right" : "Element head = tb.insert(t.asStartTag());",
      "info" : "VariableDeclarationStatement[2988-3029]:VariableDeclarationStatement[2988-3029]"
    }, {
      "left" : "tb.setHeadElement(head);",
      "right" : "tb.setHeadElement(head);",
      "info" : "ExpressionStatement[3046-3070]:ExpressionStatement[3046-3070]"
    }, {
      "left" : "tb.transition(InHead);",
      "right" : "tb.transition(InHead);",
      "info" : "ExpressionStatement[3087-3109]:ExpressionStatement[3087-3109]"
    }, {
      "left" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().name(), \"head\", \"body\", \"html\", \"br\")))",
      "right" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().name(), \"head\", \"body\", \"html\", \"br\")))",
      "info" : "IfStatement[3129-3542]:IfStatement[3129-3542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3217-3326]:Block[3217-3326]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"head\"));",
      "right" : "tb.process(new Token.StartTag(\"head\"));",
      "info" : "ExpressionStatement[3235-3274]:ExpressionStatement[3235-3274]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[3291-3312]:ReturnStatement[3291-3312]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[3332-3542]:IfStatement[3332-3542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3350-3427]:Block[3350-3427]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[3368-3383]:ExpressionStatement[3368-3383]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3400-3413]:ReturnStatement[3400-3413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3433-3542]:Block[3433-3542]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"head\"));",
      "right" : "tb.process(new Token.StartTag(\"head\"));",
      "info" : "ExpressionStatement[3451-3490]:ExpressionStatement[3451-3490]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[3507-3528]:ReturnStatement[3507-3528]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3555-3567]:ReturnStatement[3555-3567]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3606-3613]:PrimitiveType[3606-3613]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[3614-3621]:SimpleName[3614-3621]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[3622-3629]:SingleVariableDeclaration[3622-3629]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[3631-3645]:SingleVariableDeclaration[3631-3645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3647-6583]:Block[3647-6583]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[3661-3770]:IfStatement[3661-3770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3682-3770]:Block[3682-3770]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[3700-3727]:ExpressionStatement[3700-3727]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3744-3756]:ReturnStatement[3744-3756]"
    }, {
      "left" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.name();\n                    if (name.equals(\"html\")) {\n                        return InBody.process(t, tb);\n                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {\n                        Element el = tb.insertEmpty(start);\n                        // jsoup special: update base as it is seen. todo: flip to current browser behaviour of one shot\n                        if (name.equals(\"base\") && el.hasAttr(\"href\"))\n                            tb.setBaseUri(el);\n                    } else if (name.equals(\"meta\")) {\n                        Element meta = tb.insertEmpty(start);\n                        // todo: charset switches\n                    } else if (name.equals(\"title\")) {\n                        handleRcData(start, tb);\n                    } else if (StringUtil.in(name, \"noframes\", \"style\")) {\n                        handleRawtext(start, tb);\n                    } else if (name.equals(\"noscript\")) {\n                        // else if noscript && scripting flag = true: rawtext (jsoup doesn't run script, to handle as noscript)\n                        tb.insert(start);\n                        tb.transition(InHeadNoscript);\n                    } else if (name.equals(\"script\")) {\n                        // skips some script rules as won't execute them\n                        tb.insert(start);\n                        tb.tokeniser.transition(TokeniserState.ScriptData);\n                        tb.markInsertionMode();\n                        tb.transition(Text);\n                    } else if (name.equals(\"head\")) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.name();\n                    if (name.equals(\"head\")) {\n                        tb.pop();\n                        tb.transition(AfterHead);\n                    } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) {\n                        return anythingElse(t, tb);\n                    } else {\n                        tb.error(this);\n                        return false;\n                    }\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "right" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.name();\n                    if (name.equals(\"html\")) {\n                        return InBody.process(t, tb);\n                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {\n                        Element el = tb.insertEmpty(start);\n                        // jsoup special: update base as it is seen. todo: flip to current browser behaviour of one shot\n                        if (name.equals(\"base\") && el.hasAttr(\"href\"))\n                            tb.setBaseUri(el);\n                    } else if (name.equals(\"meta\")) {\n                        Element meta = tb.insertEmpty(start);\n                        // todo: charset switches\n                    } else if (name.equals(\"title\")) {\n                        handleRcData(start, tb);\n                    } else if (StringUtil.in(name, \"noframes\", \"style\")) {\n                        handleRawtext(start, tb);\n                    } else if (name.equals(\"noscript\")) {\n                        // else if noscript && scripting flag = true: rawtext (jsoup doesn't run script, to handle as noscript)\n                        tb.insert(start);\n                        tb.transition(InHeadNoscript);\n                    } else if (name.equals(\"script\")) {\n                        // skips some script rules as won't execute them\n                        tb.insert(start);\n                        tb.tokeniser.transition(TokeniserState.ScriptData);\n                        tb.markInsertionMode();\n                        tb.transition(Text);\n                    } else if (name.equals(\"head\")) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.name();\n                    if (name.equals(\"head\")) {\n                        tb.pop();\n                        tb.transition(AfterHead);\n                    } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) {\n                        return anythingElse(t, tb);\n                    } else {\n                        tb.error(this);\n                        return false;\n                    }\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "info" : "SwitchStatement[3783-6548]:SwitchStatement[3783-6548]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[3817-3830]:SwitchCase[3817-3830]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[3851-3876]:ExpressionStatement[3851-3876]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3897-3903]:BreakStatement[3897-3903]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[3920-3933]:SwitchCase[3920-3933]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[3954-3969]:ExpressionStatement[3954-3969]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3990-4003]:ReturnStatement[3990-4003]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[4020-4034]:SwitchCase[4020-4034]"
    }, {
      "left" : "Token.StartTag start = t.asStartTag();",
      "right" : "Token.StartTag start = t.asStartTag();",
      "info" : "VariableDeclarationStatement[4055-4093]:VariableDeclarationStatement[4055-4093]"
    }, {
      "left" : "String name = start.name();",
      "right" : "String name = start.name();",
      "info" : "VariableDeclarationStatement[4114-4141]:VariableDeclarationStatement[4114-4141]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[4162-5898]:IfStatement[4162-5898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4187-4264]:Block[4187-4264]"
    }, {
      "left" : "return InBody.process(t, tb);",
      "right" : "return InBody.process(t, tb);",
      "info" : "ReturnStatement[4213-4242]:ReturnStatement[4213-4242]"
    }, {
      "left" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\"))",
      "right" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\"))",
      "info" : "IfStatement[4270-5898]:IfStatement[4270-5898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4345-4667]:Block[4345-4667]"
    }, {
      "left" : "Element el = tb.insertEmpty(start);",
      "right" : "Element el = tb.insertEmpty(start);",
      "info" : "VariableDeclarationStatement[4371-4406]:VariableDeclarationStatement[4371-4406]"
    }, {
      "left" : "if (name.equals(\"base\") && el.hasAttr(\"href\"))",
      "right" : "if (name.equals(\"base\") && el.hasAttr(\"href\"))",
      "info" : "IfStatement[4552-4645]:IfStatement[4552-4645]"
    }, {
      "left" : "tb.setBaseUri(el);",
      "right" : "tb.setBaseUri(el);",
      "info" : "ExpressionStatement[4627-4645]:ExpressionStatement[4627-4645]"
    }, {
      "left" : "if (name.equals(\"meta\"))",
      "right" : "if (name.equals(\"meta\"))",
      "info" : "IfStatement[4673-5898]:IfStatement[4673-5898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4698-4833]:Block[4698-4833]"
    }, {
      "left" : "Element meta = tb.insertEmpty(start);",
      "right" : "Element meta = tb.insertEmpty(start);",
      "info" : "VariableDeclarationStatement[4724-4761]:VariableDeclarationStatement[4724-4761]"
    }, {
      "left" : "if (name.equals(\"title\"))",
      "right" : "if (name.equals(\"title\"))",
      "info" : "IfStatement[4839-5898]:IfStatement[4839-5898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4865-4937]:Block[4865-4937]"
    }, {
      "left" : "handleRcData(start, tb);",
      "right" : "handleRcData(start, tb);",
      "info" : "ExpressionStatement[4891-4915]:ExpressionStatement[4891-4915]"
    }, {
      "left" : "if (StringUtil.in(name, \"noframes\", \"style\"))",
      "right" : "if (StringUtil.in(name, \"noframes\", \"style\"))",
      "info" : "IfStatement[4943-5898]:IfStatement[4943-5898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4989-5062]:Block[4989-5062]"
    }, {
      "left" : "handleRawtext(start, tb);",
      "right" : "handleRawtext(start, tb);",
      "info" : "ExpressionStatement[5015-5040]:ExpressionStatement[5015-5040]"
    }, {
      "left" : "if (name.equals(\"noscript\"))",
      "right" : "if (name.equals(\"noscript\"))",
      "info" : "IfStatement[5068-5898]:IfStatement[5068-5898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5097-5345]:Block[5097-5345]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[5251-5268]:ExpressionStatement[5251-5268]"
    }, {
      "left" : "tb.transition(InHeadNoscript);",
      "right" : "tb.transition(InHeadNoscript);",
      "info" : "ExpressionStatement[5293-5323]:ExpressionStatement[5293-5323]"
    }, {
      "left" : "if (name.equals(\"script\"))",
      "right" : "if (name.equals(\"script\"))",
      "info" : "IfStatement[5351-5898]:IfStatement[5351-5898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5378-5685]:Block[5378-5685]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[5477-5494]:ExpressionStatement[5477-5494]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.ScriptData);",
      "right" : "tb.tokeniser.transition(TokeniserState.ScriptData);",
      "info" : "ExpressionStatement[5519-5570]:ExpressionStatement[5519-5570]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[5595-5618]:ExpressionStatement[5595-5618]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[5643-5663]:ExpressionStatement[5643-5663]"
    }, {
      "left" : "if (name.equals(\"head\"))",
      "right" : "if (name.equals(\"head\"))",
      "info" : "IfStatement[5691-5898]:IfStatement[5691-5898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5716-5817]:Block[5716-5817]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[5742-5757]:ExpressionStatement[5742-5757]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5782-5795]:ReturnStatement[5782-5795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5823-5898]:Block[5823-5898]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[5849-5876]:ReturnStatement[5849-5876]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5919-5925]:BreakStatement[5919-5925]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[5942-5954]:SwitchCase[5942-5954]"
    }, {
      "left" : "Token.EndTag end = t.asEndTag();",
      "right" : "Token.EndTag end = t.asEndTag();",
      "info" : "VariableDeclarationStatement[5975-6007]:VariableDeclarationStatement[5975-6007]"
    }, {
      "left" : "name = end.name();",
      "right" : "name = end.name();",
      "info" : "ExpressionStatement[6028-6046]:ExpressionStatement[6028-6046]"
    }, {
      "left" : "if (name.equals(\"head\"))",
      "right" : "if (name.equals(\"head\"))",
      "info" : "IfStatement[6067-6434]:IfStatement[6067-6434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6092-6199]:Block[6092-6199]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[6118-6127]:ExpressionStatement[6118-6127]"
    }, {
      "left" : "tb.transition(AfterHead);",
      "right" : "tb.transition(AfterHead);",
      "info" : "ExpressionStatement[6152-6177]:ExpressionStatement[6152-6177]"
    }, {
      "left" : "if (StringUtil.in(name, \"body\", \"html\", \"br\"))",
      "right" : "if (StringUtil.in(name, \"body\", \"html\", \"br\"))",
      "info" : "IfStatement[6205-6434]:IfStatement[6205-6434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6252-6327]:Block[6252-6327]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[6278-6305]:ReturnStatement[6278-6305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6333-6434]:Block[6333-6434]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[6359-6374]:ExpressionStatement[6359-6374]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6399-6412]:ReturnStatement[6399-6412]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6455-6461]:BreakStatement[6455-6461]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[6478-6486]:SwitchCase[6478-6486]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[6507-6534]:ReturnStatement[6507-6534]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6561-6573]:ReturnStatement[6561-6573]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6593-6600]:Modifier[6593-6600]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6601-6608]:PrimitiveType[6601-6608]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[6609-6621]:SimpleName[6609-6621]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[6622-6629]:SingleVariableDeclaration[6622-6629]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[6631-6645]:SingleVariableDeclaration[6631-6645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6647-6742]:Block[6647-6742]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"head\"));",
      "right" : "tb.process(new Token.EndTag(\"head\"));",
      "info" : "ExpressionStatement[6661-6698]:ExpressionStatement[6661-6698]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[6711-6732]:ReturnStatement[6711-6732]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6779-6786]:PrimitiveType[6779-6786]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[6787-6794]:SimpleName[6787-6794]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[6795-6802]:SingleVariableDeclaration[6795-6802]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[6804-6818]:SingleVariableDeclaration[6804-6818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6820-7818]:Block[6820-7818]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[6834-7783]:IfStatement[6834-7783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6853-6900]:Block[6853-6900]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[6871-6886]:ExpressionStatement[6871-6886]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "info" : "IfStatement[6906-7783]:IfStatement[6906-7783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6966-7027]:Block[6966-7027]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[6984-7013]:ReturnStatement[6984-7013]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().name().equals(\"noscript\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().name().equals(\"noscript\"))",
      "info" : "IfStatement[7033-7783]:IfStatement[7033-7783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7093-7173]:Block[7093-7173]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[7111-7120]:ExpressionStatement[7111-7120]"
    }, {
      "left" : "tb.transition(InHead);",
      "right" : "tb.transition(InHead);",
      "info" : "ExpressionStatement[7137-7159]:ExpressionStatement[7137-7159]"
    }, {
      "left" : "if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().name(),\n                    \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\")))",
      "right" : "if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().name(),\n                    \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\")))",
      "info" : "IfStatement[7179-7783]:IfStatement[7179-7783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7357-7418]:Block[7357-7418]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[7375-7404]:ReturnStatement[7375-7404]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().name().equals(\"br\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().name().equals(\"br\"))",
      "info" : "IfStatement[7424-7783]:IfStatement[7424-7783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7478-7537]:Block[7478-7537]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[7496-7523]:ReturnStatement[7496-7523]"
    }, {
      "left" : "if ((t.isStartTag() && StringUtil.in(t.asStartTag().name(), \"head\", \"noscript\")) || t.isEndTag())",
      "right" : "if ((t.isStartTag() && StringUtil.in(t.asStartTag().name(), \"head\", \"noscript\")) || t.isEndTag())",
      "info" : "IfStatement[7543-7783]:IfStatement[7543-7783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7641-7718]:Block[7641-7718]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[7659-7674]:ExpressionStatement[7659-7674]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7691-7704]:ReturnStatement[7691-7704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7724-7783]:Block[7724-7783]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[7742-7769]:ReturnStatement[7742-7769]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7796-7808]:ReturnStatement[7796-7808]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7828-7835]:Modifier[7828-7835]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7836-7843]:PrimitiveType[7836-7843]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[7844-7856]:SimpleName[7844-7856]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[7857-7864]:SingleVariableDeclaration[7857-7864]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[7866-7880]:SingleVariableDeclaration[7866-7880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7882-8009]:Block[7882-8009]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[7896-7911]:ExpressionStatement[7896-7911]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"noscript\"));",
      "right" : "tb.process(new Token.EndTag(\"noscript\"));",
      "info" : "ExpressionStatement[7924-7965]:ExpressionStatement[7924-7965]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[7978-7999]:ReturnStatement[7978-7999]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8041-8048]:PrimitiveType[8041-8048]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[8049-8056]:SimpleName[8049-8056]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[8057-8064]:SingleVariableDeclaration[8057-8064]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[8066-8080]:SingleVariableDeclaration[8066-8080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8082-9804]:Block[8082-9804]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[8096-9769]:IfStatement[8096-9769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8117-8176]:Block[8117-8176]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[8135-8162]:ExpressionStatement[8135-8162]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[8182-9769]:IfStatement[8182-9769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8201-8258]:Block[8201-8258]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[8219-8244]:ExpressionStatement[8219-8244]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[8264-9769]:IfStatement[8264-9769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8283-8330]:Block[8283-8330]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[8301-8316]:ExpressionStatement[8301-8316]"
    }, {
      "left" : "if (t.isStartTag())",
      "right" : "if (t.isStartTag())",
      "info" : "IfStatement[8336-9769]:IfStatement[8336-9769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8356-9444]:Block[8356-9444]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[8374-8415]:VariableDeclarationStatement[8374-8415]"
    }, {
      "left" : "String name = startTag.name();",
      "right" : "String name = startTag.name();",
      "info" : "VariableDeclarationStatement[8432-8462]:VariableDeclarationStatement[8432-8462]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[8479-9430]:IfStatement[8479-9430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8504-8573]:Block[8504-8573]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[8526-8555]:ReturnStatement[8526-8555]"
    }, {
      "left" : "if (name.equals(\"body\"))",
      "right" : "if (name.equals(\"body\"))",
      "info" : "IfStatement[8579-9430]:IfStatement[8579-9430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8604-8749]:Block[8604-8749]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[8626-8646]:ExpressionStatement[8626-8646]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[8667-8688]:ExpressionStatement[8667-8688]"
    }, {
      "left" : "tb.transition(InBody);",
      "right" : "tb.transition(InBody);",
      "info" : "ExpressionStatement[8709-8731]:ExpressionStatement[8709-8731]"
    }, {
      "left" : "if (name.equals(\"frameset\"))",
      "right" : "if (name.equals(\"frameset\"))",
      "info" : "IfStatement[8755-9430]:IfStatement[8755-9430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8784-8891]:Block[8784-8891]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[8806-8826]:ExpressionStatement[8806-8826]"
    }, {
      "left" : "tb.transition(InFrameset);",
      "right" : "tb.transition(InFrameset);",
      "info" : "ExpressionStatement[8847-8873]:ExpressionStatement[8847-8873]"
    }, {
      "left" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"))",
      "right" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"))",
      "info" : "IfStatement[8897-9430]:IfStatement[8897-9430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9009-9244]:Block[9009-9244]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[9031-9046]:ExpressionStatement[9031-9046]"
    }, {
      "left" : "Element head = tb.getHeadElement();",
      "right" : "Element head = tb.getHeadElement();",
      "info" : "VariableDeclarationStatement[9067-9102]:VariableDeclarationStatement[9067-9102]"
    }, {
      "left" : "tb.push(head);",
      "right" : "tb.push(head);",
      "info" : "ExpressionStatement[9123-9137]:ExpressionStatement[9123-9137]"
    }, {
      "left" : "tb.process(t, InHead);",
      "right" : "tb.process(t, InHead);",
      "info" : "ExpressionStatement[9158-9180]:ExpressionStatement[9158-9180]"
    }, {
      "left" : "tb.removeFromStack(head);",
      "right" : "tb.removeFromStack(head);",
      "info" : "ExpressionStatement[9201-9226]:ExpressionStatement[9201-9226]"
    }, {
      "left" : "if (name.equals(\"head\"))",
      "right" : "if (name.equals(\"head\"))",
      "info" : "IfStatement[9250-9430]:IfStatement[9250-9430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9275-9364]:Block[9275-9364]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[9297-9312]:ExpressionStatement[9297-9312]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9333-9346]:ReturnStatement[9333-9346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9370-9430]:Block[9370-9430]"
    }, {
      "left" : "anythingElse(t, tb);",
      "right" : "anythingElse(t, tb);",
      "info" : "ExpressionStatement[9392-9412]:ExpressionStatement[9392-9412]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[9450-9769]:IfStatement[9450-9769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9468-9711]:Block[9468-9711]"
    }, {
      "left" : "if (StringUtil.in(t.asEndTag().name(), \"body\", \"html\"))",
      "right" : "if (StringUtil.in(t.asEndTag().name(), \"body\", \"html\"))",
      "info" : "IfStatement[9486-9697]:IfStatement[9486-9697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9542-9602]:Block[9542-9602]"
    }, {
      "left" : "anythingElse(t, tb);",
      "right" : "anythingElse(t, tb);",
      "info" : "ExpressionStatement[9564-9584]:ExpressionStatement[9564-9584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9608-9697]:Block[9608-9697]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[9630-9645]:ExpressionStatement[9630-9645]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9666-9679]:ReturnStatement[9666-9679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9717-9769]:Block[9717-9769]"
    }, {
      "left" : "anythingElse(t, tb);",
      "right" : "anythingElse(t, tb);",
      "info" : "ExpressionStatement[9735-9755]:ExpressionStatement[9735-9755]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9782-9794]:ReturnStatement[9782-9794]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9814-9821]:Modifier[9814-9821]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9822-9829]:PrimitiveType[9822-9829]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[9830-9842]:SimpleName[9830-9842]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[9843-9850]:SingleVariableDeclaration[9843-9850]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[9852-9866]:SingleVariableDeclaration[9852-9866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9868-9998]:Block[9868-9998]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"body\"));",
      "right" : "tb.process(new Token.StartTag(\"body\"));",
      "info" : "ExpressionStatement[9882-9921]:ExpressionStatement[9882-9921]"
    }, {
      "left" : "tb.framesetOk(true);",
      "right" : "tb.framesetOk(true);",
      "info" : "ExpressionStatement[9934-9954]:ExpressionStatement[9934-9954]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[9967-9988]:ReturnStatement[9967-9988]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[38621-38628]:PrimitiveType[38631-38638]"
    }, {
      "left" : "anyOtherEndTag",
      "right" : "anyOtherEndTag",
      "info" : "SimpleName[38629-38643]:SimpleName[38639-38653]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[38644-38651]:SingleVariableDeclaration[38654-38661]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[38653-38667]:SingleVariableDeclaration[38663-38677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38669-39449]:Block[38679-39459]"
    }, {
      "left" : "String name = t.asEndTag().name();",
      "right" : "String name = t.asEndTag().name();",
      "info" : "VariableDeclarationStatement[38683-38717]:VariableDeclarationStatement[38693-38727]"
    }, {
      "left" : "DescendableLinkedList<Element> stack = tb.getStack();",
      "right" : "DescendableLinkedList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[38730-38783]:VariableDeclarationStatement[38740-38793]"
    }, {
      "left" : "Iterator<Element> it = stack.descendingIterator();",
      "right" : "Iterator<Element> it = stack.descendingIterator();",
      "info" : "VariableDeclarationStatement[38796-38846]:VariableDeclarationStatement[38806-38856]"
    }, {
      "left" : "while (it.hasNext())",
      "right" : "while (it.hasNext())",
      "info" : "WhileStatement[38859-39414]:WhileStatement[38869-39424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38880-39414]:Block[38890-39424]"
    }, {
      "left" : "Element node = it.next();",
      "right" : "Element node = it.next();",
      "info" : "VariableDeclarationStatement[38898-38923]:VariableDeclarationStatement[38908-38933]"
    }, {
      "left" : "if (node.nodeName().equals(name))",
      "right" : "if (node.nodeName().equals(name))",
      "info" : "IfStatement[38940-39400]:IfStatement[38950-39410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38974-39229]:Block[38984-39239]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[38996-39028]:ExpressionStatement[39006-39038]"
    }, {
      "left" : "if (!name.equals(tb.currentElement().nodeName()))",
      "right" : "if (!name.equals(tb.currentElement().nodeName()))",
      "info" : "IfStatement[39049-39138]:IfStatement[39059-39148]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[39123-39138]:ExpressionStatement[39133-39148]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[39159-39184]:ExpressionStatement[39169-39194]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39205-39211]:BreakStatement[39215-39221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39235-39400]:Block[39245-39410]"
    }, {
      "left" : "if (tb.isSpecial(node))",
      "right" : "if (tb.isSpecial(node))",
      "info" : "IfStatement[39257-39382]:IfStatement[39267-39392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39281-39382]:Block[39291-39392]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[39307-39322]:ExpressionStatement[39317-39332]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[39347-39360]:ReturnStatement[39357-39370]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[39427-39439]:ReturnStatement[39437-39449]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[39539-39546]:PrimitiveType[39549-39556]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[39547-39554]:SimpleName[39557-39564]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[39555-39562]:SingleVariableDeclaration[39565-39572]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[39564-39578]:SingleVariableDeclaration[39574-39588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39580-40181]:Block[39590-40191]"
    }, {
      "left" : "if (t.isCharacter())",
      "right" : "if (t.isCharacter())",
      "info" : "IfStatement[39594-40146]:IfStatement[39604-40156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39615-39674]:Block[39625-39684]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[39633-39660]:ExpressionStatement[39643-39670]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[39680-40146]:IfStatement[39690-40156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39695-39919]:Block[39705-39929]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[39713-39728]:ExpressionStatement[39723-39738]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[39807-39816]:ExpressionStatement[39817-39826]"
    }, {
      "left" : "tb.transition(tb.originalState());",
      "right" : "tb.transition(tb.originalState());",
      "info" : "ExpressionStatement[39833-39867]:ExpressionStatement[39843-39877]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[39884-39905]:ReturnStatement[39894-39915]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[39925-40146]:IfStatement[39935-40156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39943-40146]:Block[39953-40156]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[40072-40081]:ExpressionStatement[40082-40091]"
    }, {
      "left" : "tb.transition(tb.originalState());",
      "right" : "tb.transition(tb.originalState());",
      "info" : "ExpressionStatement[40098-40132]:ExpressionStatement[40108-40142]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[40159-40171]:ReturnStatement[40169-40181]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[40211-40218]:PrimitiveType[40221-40228]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[40219-40226]:SimpleName[40229-40236]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[40227-40234]:SingleVariableDeclaration[40237-40244]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[40236-40250]:SingleVariableDeclaration[40246-40260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40252-43922]:Block[40262-43932]"
    }, {
      "left" : "if (t.isCharacter())",
      "right" : "if (t.isCharacter())",
      "info" : "IfStatement[40266-43872]:IfStatement[40276-43882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40287-40472]:Block[40297-40482]"
    }, {
      "left" : "tb.newPendingTableCharacters();",
      "right" : "tb.newPendingTableCharacters();",
      "info" : "ExpressionStatement[40305-40336]:ExpressionStatement[40315-40346]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[40353-40376]:ExpressionStatement[40363-40386]"
    }, {
      "left" : "tb.transition(InTableText);",
      "right" : "tb.transition(InTableText);",
      "info" : "ExpressionStatement[40393-40420]:ExpressionStatement[40403-40430]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[40437-40458]:ReturnStatement[40447-40468]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[40478-43872]:IfStatement[40488-43882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40497-40554]:Block[40507-40564]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[40515-40540]:ExpressionStatement[40525-40550]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[40560-43872]:IfStatement[40570-43882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40579-40656]:Block[40589-40666]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[40597-40612]:ExpressionStatement[40607-40622]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[40629-40642]:ReturnStatement[40639-40652]"
    }, {
      "left" : "if (t.isStartTag())",
      "right" : "if (t.isStartTag())",
      "info" : "IfStatement[40662-43872]:IfStatement[40672-43882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40682-42903]:Block[40692-42913]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[40700-40741]:VariableDeclarationStatement[40710-40751]"
    }, {
      "left" : "String name = startTag.name();",
      "right" : "String name = startTag.name();",
      "info" : "VariableDeclarationStatement[40758-40788]:VariableDeclarationStatement[40768-40798]"
    }, {
      "left" : "if (name.equals(\"caption\"))",
      "right" : "if (name.equals(\"caption\"))",
      "info" : "IfStatement[40805-42889]:IfStatement[40815-42899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40833-41049]:Block[40843-41059]"
    }, {
      "left" : "tb.clearStackToTableContext();",
      "right" : "tb.clearStackToTableContext();",
      "info" : "ExpressionStatement[40855-40885]:ExpressionStatement[40865-40895]"
    }, {
      "left" : "tb.insertMarkerToFormattingElements();",
      "right" : "tb.insertMarkerToFormattingElements();",
      "info" : "ExpressionStatement[40906-40944]:ExpressionStatement[40916-40954]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[40965-40985]:ExpressionStatement[40975-40995]"
    }, {
      "left" : "tb.transition(InCaption);",
      "right" : "tb.transition(InCaption);",
      "info" : "ExpressionStatement[41006-41031]:ExpressionStatement[41016-41041]"
    }, {
      "left" : "if (name.equals(\"colgroup\"))",
      "right" : "if (name.equals(\"colgroup\"))",
      "info" : "IfStatement[41055-42889]:IfStatement[41065-42899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41084-41245]:Block[41094-41255]"
    }, {
      "left" : "tb.clearStackToTableContext();",
      "right" : "tb.clearStackToTableContext();",
      "info" : "ExpressionStatement[41106-41136]:ExpressionStatement[41116-41146]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[41157-41177]:ExpressionStatement[41167-41187]"
    }, {
      "left" : "tb.transition(InColumnGroup);",
      "right" : "tb.transition(InColumnGroup);",
      "info" : "ExpressionStatement[41198-41227]:ExpressionStatement[41208-41237]"
    }, {
      "left" : "if (name.equals(\"col\"))",
      "right" : "if (name.equals(\"col\"))",
      "info" : "IfStatement[41251-42889]:IfStatement[41261-42899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41275-41400]:Block[41285-41410]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"colgroup\"));",
      "right" : "tb.process(new Token.StartTag(\"colgroup\"));",
      "info" : "ExpressionStatement[41297-41340]:ExpressionStatement[41307-41350]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[41361-41382]:ReturnStatement[41371-41392]"
    }, {
      "left" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "right" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "info" : "IfStatement[41406-42889]:IfStatement[41416-42899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41458-41617]:Block[41468-41627]"
    }, {
      "left" : "tb.clearStackToTableContext();",
      "right" : "tb.clearStackToTableContext();",
      "info" : "ExpressionStatement[41480-41510]:ExpressionStatement[41490-41520]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[41531-41551]:ExpressionStatement[41541-41561]"
    }, {
      "left" : "tb.transition(InTableBody);",
      "right" : "tb.transition(InTableBody);",
      "info" : "ExpressionStatement[41572-41599]:ExpressionStatement[41582-41609]"
    }, {
      "left" : "if (StringUtil.in(name, \"td\", \"th\", \"tr\"))",
      "right" : "if (StringUtil.in(name, \"td\", \"th\", \"tr\"))",
      "info" : "IfStatement[41623-42889]:IfStatement[41633-42899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41666-41788]:Block[41676-41798]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"tbody\"));",
      "right" : "tb.process(new Token.StartTag(\"tbody\"));",
      "info" : "ExpressionStatement[41688-41728]:ExpressionStatement[41698-41738]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[41749-41770]:ReturnStatement[41759-41780]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[41794-42889]:IfStatement[41804-42899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41820-42066]:Block[41830-42076]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[41842-41857]:ExpressionStatement[41852-41867]"
    }, {
      "left" : "boolean processed = tb.process(new Token.EndTag(\"table\"));",
      "right" : "boolean processed = tb.process(new Token.EndTag(\"table\"));",
      "info" : "VariableDeclarationStatement[41878-41936]:VariableDeclarationStatement[41888-41946]"
    }, {
      "left" : "if (processed)",
      "right" : "if (processed)",
      "info" : "IfStatement[41957-42048]:IfStatement[41967-42058]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[42027-42048]:ReturnStatement[42037-42058]"
    }, {
      "left" : "if (StringUtil.in(name, \"style\", \"script\"))",
      "right" : "if (StringUtil.in(name, \"style\", \"script\"))",
      "info" : "IfStatement[42072-42889]:IfStatement[42082-42899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42116-42185]:Block[42126-42195]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[42138-42167]:ReturnStatement[42148-42177]"
    }, {
      "left" : "if (name.equals(\"input\"))",
      "right" : "if (name.equals(\"input\"))",
      "info" : "IfStatement[42191-42889]:IfStatement[42201-42899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42217-42476]:Block[42227-42486]"
    }, {
      "left" : "if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\"))",
      "right" : "if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\"))",
      "info" : "IfStatement[42239-42458]:IfStatement[42249-42468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42304-42379]:Block[42314-42389]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[42330-42357]:ReturnStatement[42340-42367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42385-42458]:Block[42395-42468]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[42411-42436]:ExpressionStatement[42421-42446]"
    }, {
      "left" : "if (name.equals(\"form\"))",
      "right" : "if (name.equals(\"form\"))",
      "info" : "IfStatement[42482-42889]:IfStatement[42492-42899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42507-42816]:Block[42517-42826]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[42529-42544]:ExpressionStatement[42539-42554]"
    }, {
      "left" : "if (tb.getFormElement() != null)",
      "right" : "if (tb.getFormElement() != null)",
      "info" : "IfStatement[42565-42798]:IfStatement[42575-42808]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[42622-42635]:ReturnStatement[42632-42645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42661-42798]:Block[42671-42808]"
    }, {
      "left" : "Element form = tb.insertEmpty(startTag);",
      "right" : "Element form = tb.insertEmpty(startTag);",
      "info" : "VariableDeclarationStatement[42687-42727]:VariableDeclarationStatement[42697-42737]"
    }, {
      "left" : "tb.setFormElement(form);",
      "right" : "tb.setFormElement(form);",
      "info" : "ExpressionStatement[42752-42776]:ExpressionStatement[42762-42786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42822-42889]:Block[42832-42899]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[42844-42871]:ReturnStatement[42854-42881]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[42909-43872]:IfStatement[42919-43882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42927-43687]:Block[42937-43697]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[42945-42980]:VariableDeclarationStatement[42955-42990]"
    }, {
      "left" : "String name = endTag.name();",
      "right" : "String name = endTag.name();",
      "info" : "VariableDeclarationStatement[42997-43025]:VariableDeclarationStatement[43007-43035]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[43043-43673]:IfStatement[43053-43683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43069-43365]:Block[43079-43375]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[43091-43302]:IfStatement[43101-43312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43119-43220]:Block[43129-43230]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[43145-43160]:ExpressionStatement[43155-43170]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[43185-43198]:ReturnStatement[43195-43208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43226-43302]:Block[43236-43312]"
    }, {
      "left" : "tb.popStackToClose(\"table\");",
      "right" : "tb.popStackToClose(\"table\");",
      "info" : "ExpressionStatement[43252-43280]:ExpressionStatement[43262-43290]"
    }, {
      "left" : "tb.resetInsertionMode();",
      "right" : "tb.resetInsertionMode();",
      "info" : "ExpressionStatement[43323-43347]:ExpressionStatement[43333-43357]"
    }, {
      "left" : "if (StringUtil.in(name,\n                        \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(name,\n                        \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "info" : "IfStatement[43371-43673]:IfStatement[43381-43683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43511-43600]:Block[43521-43610]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[43533-43548]:ExpressionStatement[43543-43558]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[43569-43582]:ReturnStatement[43579-43592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43606-43673]:Block[43616-43683]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[43628-43655]:ReturnStatement[43638-43665]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[43693-43872]:IfStatement[43703-43882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43708-43872]:Block[43718-43882]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[43726-43812]:IfStatement[43736-43822]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[43797-43812]:ExpressionStatement[43807-43822]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[43829-43841]:ReturnStatement[43839-43851]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[43885-43912]:ReturnStatement[43895-43922]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[43932-43939]:PrimitiveType[43942-43949]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[43940-43952]:SimpleName[43950-43962]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[43953-43960]:SingleVariableDeclaration[43963-43970]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[43962-43976]:SingleVariableDeclaration[43972-43986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43978-44416]:Block[43988-44426]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[43992-44007]:ExpressionStatement[44002-44017]"
    }, {
      "left" : "boolean processed = true;",
      "right" : "boolean processed = true;",
      "info" : "VariableDeclarationStatement[44020-44045]:VariableDeclarationStatement[44030-44055]"
    }, {
      "left" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "info" : "IfStatement[44058-44376]:IfStatement[44068-44386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44151-44304]:Block[44161-44314]"
    }, {
      "left" : "tb.setFosterInserts(true);",
      "right" : "tb.setFosterInserts(true);",
      "info" : "ExpressionStatement[44169-44195]:ExpressionStatement[44179-44205]"
    }, {
      "left" : "processed = tb.process(t, InBody);",
      "right" : "processed = tb.process(t, InBody);",
      "info" : "ExpressionStatement[44212-44246]:ExpressionStatement[44222-44256]"
    }, {
      "left" : "tb.setFosterInserts(false);",
      "right" : "tb.setFosterInserts(false);",
      "info" : "ExpressionStatement[44263-44290]:ExpressionStatement[44273-44300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44310-44376]:Block[44320-44386]"
    }, {
      "left" : "processed = tb.process(t, InBody);",
      "right" : "processed = tb.process(t, InBody);",
      "info" : "ExpressionStatement[44328-44362]:ExpressionStatement[44338-44372]"
    }, {
      "left" : "return processed;",
      "right" : "return processed;",
      "info" : "ReturnStatement[44389-44406]:ReturnStatement[44399-44416]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[44450-44457]:PrimitiveType[44460-44467]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[44458-44465]:SimpleName[44468-44475]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[44466-44473]:SingleVariableDeclaration[44476-44483]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[44475-44489]:SingleVariableDeclaration[44485-44499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44491-46049]:Block[44501-46059]"
    }, {
      "left" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.getPendingTableCharacters().add(c);\n                    }\n                    break;\n                default:\n                    if (tb.getPendingTableCharacters().size() > 0) {\n                        for (Token.Character character : tb.getPendingTableCharacters()) {\n                            if (!isWhitespace(character)) {\n                                // InTable anything else section:\n                                tb.error(this);\n                                if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                    tb.setFosterInserts(true);\n                                    tb.process(character, InBody);\n                                    tb.setFosterInserts(false);\n                                } else {\n                                    tb.process(character, InBody);\n                                }\n                            } else\n                                tb.insert(character);\n                        }\n                        tb.newPendingTableCharacters();\n                    }\n                    tb.transition(tb.originalState());\n                    return tb.process(t);\n            }",
      "right" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.getPendingTableCharacters().add(c);\n                    }\n                    break;\n                default:\n                    if (tb.getPendingTableCharacters().size() > 0) {\n                        for (Token.Character character : tb.getPendingTableCharacters()) {\n                            if (!isWhitespace(character)) {\n                                // InTable anything else section:\n                                tb.error(this);\n                                if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                    tb.setFosterInserts(true);\n                                    tb.process(character, InBody);\n                                    tb.setFosterInserts(false);\n                                } else {\n                                    tb.process(character, InBody);\n                                }\n                            } else\n                                tb.insert(character);\n                        }\n                        tb.newPendingTableCharacters();\n                    }\n                    tb.transition(tb.originalState());\n                    return tb.process(t);\n            }",
      "info" : "SwitchStatement[44505-46014]:SwitchStatement[44515-46024]"
    }, {
      "left" : "case Character:",
      "right" : "case Character:",
      "info" : "SwitchCase[44539-44554]:SwitchCase[44549-44564]"
    }, {
      "left" : "Token.Character c = t.asCharacter();",
      "right" : "Token.Character c = t.asCharacter();",
      "info" : "VariableDeclarationStatement[44575-44611]:VariableDeclarationStatement[44585-44621]"
    }, {
      "left" : "if (c.getData().equals(nullString))",
      "right" : "if (c.getData().equals(nullString))",
      "info" : "IfStatement[44632-44861]:IfStatement[44642-44871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44668-44769]:Block[44678-44779]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[44694-44709]:ExpressionStatement[44704-44719]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[44734-44747]:ReturnStatement[44744-44757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44775-44861]:Block[44785-44871]"
    }, {
      "left" : "tb.getPendingTableCharacters().add(c);",
      "right" : "tb.getPendingTableCharacters().add(c);",
      "info" : "ExpressionStatement[44801-44839]:ExpressionStatement[44811-44849]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44882-44888]:BreakStatement[44892-44898]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[44905-44913]:SwitchCase[44915-44923]"
    }, {
      "left" : "if (tb.getPendingTableCharacters().size() > 0)",
      "right" : "if (tb.getPendingTableCharacters().size() > 0)",
      "info" : "IfStatement[44934-45903]:IfStatement[44944-45913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44981-45903]:Block[44991-45913]"
    }, {
      "left" : "for (Token.Character character : tb.getPendingTableCharacters())",
      "right" : "for (Token.Character character : tb.getPendingTableCharacters())",
      "info" : "EnhancedForStatement[45007-45825]:EnhancedForStatement[45017-45835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45072-45825]:Block[45082-45835]"
    }, {
      "left" : "if (!isWhitespace(character))",
      "right" : "if (!isWhitespace(character))",
      "info" : "IfStatement[45102-45799]:IfStatement[45112-45809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45132-45740]:Block[45142-45750]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[45232-45247]:ExpressionStatement[45242-45257]"
    }, {
      "left" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "info" : "IfStatement[45280-45710]:IfStatement[45290-45720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45373-45602]:Block[45383-45612]"
    }, {
      "left" : "tb.setFosterInserts(true);",
      "right" : "tb.setFosterInserts(true);",
      "info" : "ExpressionStatement[45411-45437]:ExpressionStatement[45421-45447]"
    }, {
      "left" : "tb.process(character, InBody);",
      "right" : "tb.process(character, InBody);",
      "info" : "ExpressionStatement[45474-45504]:ExpressionStatement[45484-45514]"
    }, {
      "left" : "tb.setFosterInserts(false);",
      "right" : "tb.setFosterInserts(false);",
      "info" : "ExpressionStatement[45541-45568]:ExpressionStatement[45551-45578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45608-45710]:Block[45618-45720]"
    }, {
      "left" : "tb.process(character, InBody);",
      "right" : "tb.process(character, InBody);",
      "info" : "ExpressionStatement[45646-45676]:ExpressionStatement[45656-45686]"
    }, {
      "left" : "tb.insert(character);",
      "right" : "tb.insert(character);",
      "info" : "ExpressionStatement[45778-45799]:ExpressionStatement[45788-45809]"
    }, {
      "left" : "tb.newPendingTableCharacters();",
      "right" : "tb.newPendingTableCharacters();",
      "info" : "ExpressionStatement[45850-45881]:ExpressionStatement[45860-45891]"
    }, {
      "left" : "tb.transition(tb.originalState());",
      "right" : "tb.transition(tb.originalState());",
      "info" : "ExpressionStatement[45924-45958]:ExpressionStatement[45934-45968]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[45979-46000]:ReturnStatement[45989-46010]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[46027-46039]:ReturnStatement[46037-46049]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[46081-46088]:PrimitiveType[46091-46098]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[46089-46096]:SimpleName[46099-46106]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[46097-46104]:SingleVariableDeclaration[46107-46114]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[46106-46120]:SingleVariableDeclaration[46116-46130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46122-47621]:Block[46132-47631]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().name().equals(\"caption\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().name().equals(\"caption\"))",
      "info" : "IfStatement[46136-47586]:IfStatement[46146-47596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46195-46787]:Block[46205-46797]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[46213-46248]:VariableDeclarationStatement[46223-46258]"
    }, {
      "left" : "String name = endTag.name();",
      "right" : "String name = endTag.name();",
      "info" : "VariableDeclarationStatement[46265-46293]:VariableDeclarationStatement[46275-46303]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[46310-46773]:IfStatement[46320-46783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46338-46427]:Block[46348-46437]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[46360-46375]:ExpressionStatement[46370-46385]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46396-46409]:ReturnStatement[46406-46419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46433-46773]:Block[46443-46783]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[46455-46483]:ExpressionStatement[46465-46493]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(\"caption\"))",
      "right" : "if (!tb.currentElement().nodeName().equals(\"caption\"))",
      "info" : "IfStatement[46504-46598]:IfStatement[46514-46608]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[46583-46598]:ExpressionStatement[46593-46608]"
    }, {
      "left" : "tb.popStackToClose(\"caption\");",
      "right" : "tb.popStackToClose(\"caption\");",
      "info" : "ExpressionStatement[46619-46649]:ExpressionStatement[46629-46659]"
    }, {
      "left" : "tb.clearFormattingElementsToLastMarker();",
      "right" : "tb.clearFormattingElementsToLastMarker();",
      "info" : "ExpressionStatement[46670-46711]:ExpressionStatement[46680-46721]"
    }, {
      "left" : "tb.transition(InTable);",
      "right" : "tb.transition(InTable);",
      "info" : "ExpressionStatement[46732-46755]:ExpressionStatement[46742-46765]"
    }, {
      "left" : "if ((\n                    t.isStartTag() && StringUtil.in(t.asStartTag().name(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") ||\n                            t.isEndTag() && t.asEndTag().name().equals(\"table\")))",
      "right" : "if ((\n                    t.isStartTag() && StringUtil.in(t.asStartTag().name(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") ||\n                            t.isEndTag() && t.asEndTag().name().equals(\"table\")))",
      "info" : "IfStatement[46793-47586]:IfStatement[46803-47596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47083-47280]:Block[47093-47290]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[47101-47116]:ExpressionStatement[47111-47126]"
    }, {
      "left" : "boolean processed = tb.process(new Token.EndTag(\"caption\"));",
      "right" : "boolean processed = tb.process(new Token.EndTag(\"caption\"));",
      "info" : "VariableDeclarationStatement[47133-47193]:VariableDeclarationStatement[47143-47203]"
    }, {
      "left" : "if (processed)",
      "right" : "if (processed)",
      "info" : "IfStatement[47210-47266]:IfStatement[47220-47276]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[47245-47266]:ReturnStatement[47255-47276]"
    }, {
      "left" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().name(),\n                    \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "right" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().name(),\n                    \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "info" : "IfStatement[47286-47586]:IfStatement[47296-47596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47442-47519]:Block[47452-47529]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[47460-47475]:ExpressionStatement[47470-47485]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47492-47505]:ReturnStatement[47502-47515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47525-47586]:Block[47535-47596]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[47543-47572]:ReturnStatement[47553-47582]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[47599-47611]:ReturnStatement[47609-47621]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[47657-47664]:PrimitiveType[47667-47674]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[47665-47672]:SimpleName[47675-47682]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[47673-47680]:SingleVariableDeclaration[47683-47690]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[47682-47696]:SingleVariableDeclaration[47692-47706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47698-49462]:Block[47708-49472]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[47712-47821]:IfStatement[47722-47831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47733-47821]:Block[47743-47831]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[47751-47778]:ExpressionStatement[47761-47788]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[47795-47807]:ReturnStatement[47805-47817]"
    }, {
      "left" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    break;\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.name();\n                    if (name.equals(\"html\"))\n                        return tb.process(t, InBody);\n                    else if (name.equals(\"col\"))\n                        tb.insertEmpty(startTag);\n                    else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.name();\n                    if (name.equals(\"colgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"html\")) { // frag case\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (tb.currentElement().nodeName().equals(\"html\"))\n                        return true; // stop parsing; frag case\n                    else\n                        return anythingElse(t, tb);\n                default:\n                    return anythingElse(t, tb);\n            }",
      "right" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    break;\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.name();\n                    if (name.equals(\"html\"))\n                        return tb.process(t, InBody);\n                    else if (name.equals(\"col\"))\n                        tb.insertEmpty(startTag);\n                    else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.name();\n                    if (name.equals(\"colgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"html\")) { // frag case\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (tb.currentElement().nodeName().equals(\"html\"))\n                        return true; // stop parsing; frag case\n                    else\n                        return anythingElse(t, tb);\n                default:\n                    return anythingElse(t, tb);\n            }",
      "info" : "SwitchStatement[47834-49427]:SwitchStatement[47844-49437]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[47868-47881]:SwitchCase[47878-47891]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[47902-47927]:ExpressionStatement[47912-47937]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47948-47954]:BreakStatement[47958-47964]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[47971-47984]:SwitchCase[47981-47994]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[48005-48020]:ExpressionStatement[48015-48030]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48041-48047]:BreakStatement[48051-48057]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[48064-48078]:SwitchCase[48074-48088]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[48099-48140]:VariableDeclarationStatement[48109-48150]"
    }, {
      "left" : "String name = startTag.name();",
      "right" : "String name = startTag.name();",
      "info" : "VariableDeclarationStatement[48161-48191]:VariableDeclarationStatement[48171-48201]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[48212-48466]:IfStatement[48222-48476]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[48261-48290]:ReturnStatement[48271-48300]"
    }, {
      "left" : "if (name.equals(\"col\"))",
      "right" : "if (name.equals(\"col\"))",
      "info" : "IfStatement[48316-48466]:IfStatement[48326-48476]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[48364-48389]:ExpressionStatement[48374-48399]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[48439-48466]:ReturnStatement[48449-48476]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48487-48493]:BreakStatement[48497-48503]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[48510-48522]:SwitchCase[48520-48532]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[48543-48578]:VariableDeclarationStatement[48553-48588]"
    }, {
      "left" : "name = endTag.name();",
      "right" : "name = endTag.name();",
      "info" : "ExpressionStatement[48599-48620]:ExpressionStatement[48609-48630]"
    }, {
      "left" : "if (name.equals(\"colgroup\"))",
      "right" : "if (name.equals(\"colgroup\"))",
      "info" : "IfStatement[48641-49075]:IfStatement[48651-49085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48670-49018]:Block[48680-49028]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[48696-48996]:IfStatement[48706-49006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48747-48873]:Block[48757-48883]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[48790-48805]:ExpressionStatement[48800-48815]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[48834-48847]:ReturnStatement[48844-48857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48879-48996]:Block[48889-49006]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[48909-48918]:ExpressionStatement[48919-48928]"
    }, {
      "left" : "tb.transition(InTable);",
      "right" : "tb.transition(InTable);",
      "info" : "ExpressionStatement[48947-48970]:ExpressionStatement[48957-48980]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[49048-49075]:ReturnStatement[49058-49085]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49096-49102]:BreakStatement[49106-49112]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[49119-49128]:SwitchCase[49129-49138]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[49149-49340]:IfStatement[49159-49350]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[49224-49236]:ReturnStatement[49234-49246]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[49313-49340]:ReturnStatement[49323-49350]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[49357-49365]:SwitchCase[49367-49375]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[49386-49413]:ReturnStatement[49396-49423]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[49440-49452]:ReturnStatement[49450-49462]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49472-49479]:Modifier[49482-49489]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[49480-49487]:PrimitiveType[49490-49497]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[49488-49500]:SimpleName[49498-49510]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[49501-49508]:SingleVariableDeclaration[49511-49518]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[49510-49524]:SingleVariableDeclaration[49520-49534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49526-49730]:Block[49536-49740]"
    }, {
      "left" : "boolean processed = tb.process(new Token.EndTag(\"colgroup\"));",
      "right" : "boolean processed = tb.process(new Token.EndTag(\"colgroup\"));",
      "info" : "VariableDeclarationStatement[49540-49601]:VariableDeclarationStatement[49550-49611]"
    }, {
      "left" : "if (processed)",
      "right" : "if (processed)",
      "info" : "IfStatement[49614-49695]:IfStatement[49624-49705]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[49674-49695]:ReturnStatement[49684-49705]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[49708-49720]:ReturnStatement[49718-49730]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[49764-49771]:PrimitiveType[49774-49781]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[49772-49779]:SimpleName[49782-49789]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[49780-49787]:SingleVariableDeclaration[49790-49797]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[49789-49803]:SingleVariableDeclaration[49799-49813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49805-51751]:Block[49815-51761]"
    }, {
      "left" : "switch (t.type) {\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.name();\n                    if (name.equals(\"tr\")) {\n                        tb.clearStackToTableBodyContext();\n                        tb.insert(startTag);\n                        tb.transition(InRow);\n                    } else if (StringUtil.in(name, \"th\", \"td\")) {\n                        tb.error(this);\n                        tb.process(new Token.StartTag(\"tr\"));\n                        return tb.process(startTag);\n                    } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                        return exitTableBody(t, tb);\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.name();\n                    if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                        if (!tb.inTableScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.clearStackToTableBodyContext();\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else if (name.equals(\"table\")) {\n                        return exitTableBody(t, tb);\n                    } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                        tb.error(this);\n                        return false;\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "right" : "switch (t.type) {\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.name();\n                    if (name.equals(\"tr\")) {\n                        tb.clearStackToTableBodyContext();\n                        tb.insert(startTag);\n                        tb.transition(InRow);\n                    } else if (StringUtil.in(name, \"th\", \"td\")) {\n                        tb.error(this);\n                        tb.process(new Token.StartTag(\"tr\"));\n                        return tb.process(startTag);\n                    } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                        return exitTableBody(t, tb);\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.name();\n                    if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                        if (!tb.inTableScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.clearStackToTableBodyContext();\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else if (name.equals(\"table\")) {\n                        return exitTableBody(t, tb);\n                    } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                        tb.error(this);\n                        return false;\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "info" : "SwitchStatement[49819-51716]:SwitchStatement[49829-51726]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[49853-49867]:SwitchCase[49863-49877]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[49888-49929]:VariableDeclarationStatement[49898-49939]"
    }, {
      "left" : "String name = startTag.name();",
      "right" : "String name = startTag.name();",
      "info" : "VariableDeclarationStatement[49950-49980]:VariableDeclarationStatement[49960-49990]"
    }, {
      "left" : "if (name.equals(\"tr\"))",
      "right" : "if (name.equals(\"tr\"))",
      "info" : "IfStatement[50001-50639]:IfStatement[50011-50649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50024-50197]:Block[50034-50207]"
    }, {
      "left" : "tb.clearStackToTableBodyContext();",
      "right" : "tb.clearStackToTableBodyContext();",
      "info" : "ExpressionStatement[50050-50084]:ExpressionStatement[50060-50094]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[50109-50129]:ExpressionStatement[50119-50139]"
    }, {
      "left" : "tb.transition(InRow);",
      "right" : "tb.transition(InRow);",
      "info" : "ExpressionStatement[50154-50175]:ExpressionStatement[50164-50185]"
    }, {
      "left" : "if (StringUtil.in(name, \"th\", \"td\"))",
      "right" : "if (StringUtil.in(name, \"th\", \"td\"))",
      "info" : "IfStatement[50203-50639]:IfStatement[50213-50649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50240-50418]:Block[50250-50428]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[50266-50281]:ExpressionStatement[50276-50291]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"tr\"));",
      "right" : "tb.process(new Token.StartTag(\"tr\"));",
      "info" : "ExpressionStatement[50306-50343]:ExpressionStatement[50316-50353]"
    }, {
      "left" : "return tb.process(startTag);",
      "right" : "return tb.process(startTag);",
      "info" : "ReturnStatement[50368-50396]:ReturnStatement[50378-50406]"
    }, {
      "left" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\"))",
      "right" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\"))",
      "info" : "IfStatement[50424-50639]:IfStatement[50434-50649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50506-50582]:Block[50516-50592]"
    }, {
      "left" : "return exitTableBody(t, tb);",
      "right" : "return exitTableBody(t, tb);",
      "info" : "ReturnStatement[50532-50560]:ReturnStatement[50542-50570]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[50612-50639]:ReturnStatement[50622-50649]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[50660-50666]:BreakStatement[50670-50676]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[50683-50695]:SwitchCase[50693-50705]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[50716-50751]:VariableDeclarationStatement[50726-50761]"
    }, {
      "left" : "name = endTag.name();",
      "right" : "name = endTag.name();",
      "info" : "ExpressionStatement[50772-50793]:ExpressionStatement[50782-50803]"
    }, {
      "left" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "right" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "info" : "IfStatement[50814-51602]:IfStatement[50824-51612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50866-51241]:Block[50876-51251]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[50892-51219]:IfStatement[50902-51229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50920-51033]:Block[50930-51043]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[50950-50965]:ExpressionStatement[50960-50975]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[50994-51007]:ReturnStatement[51004-51017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51039-51219]:Block[51049-51229]"
    }, {
      "left" : "tb.clearStackToTableBodyContext();",
      "right" : "tb.clearStackToTableBodyContext();",
      "info" : "ExpressionStatement[51069-51103]:ExpressionStatement[51079-51113]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[51132-51141]:ExpressionStatement[51142-51151]"
    }, {
      "left" : "tb.transition(InTable);",
      "right" : "tb.transition(InTable);",
      "info" : "ExpressionStatement[51170-51193]:ExpressionStatement[51180-51203]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[51247-51602]:IfStatement[51257-51612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51273-51349]:Block[51283-51359]"
    }, {
      "left" : "return exitTableBody(t, tb);",
      "right" : "return exitTableBody(t, tb);",
      "info" : "ReturnStatement[51299-51327]:ReturnStatement[51309-51337]"
    }, {
      "left" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\"))",
      "right" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\"))",
      "info" : "IfStatement[51355-51602]:IfStatement[51365-51612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51444-51545]:Block[51454-51555]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[51470-51485]:ExpressionStatement[51480-51495]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[51510-51523]:ReturnStatement[51520-51533]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[51575-51602]:ReturnStatement[51585-51612]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51623-51629]:BreakStatement[51633-51639]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[51646-51654]:SwitchCase[51656-51664]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[51675-51702]:ReturnStatement[51685-51712]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[51729-51741]:ReturnStatement[51739-51751]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[51761-51768]:Modifier[51771-51778]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[51769-51776]:PrimitiveType[51779-51786]"
    }, {
      "left" : "exitTableBody",
      "right" : "exitTableBody",
      "info" : "SimpleName[51777-51790]:SimpleName[51787-51800]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[51791-51798]:SingleVariableDeclaration[51801-51808]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[51800-51814]:SingleVariableDeclaration[51810-51824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51816-52208]:Block[51826-52218]"
    }, {
      "left" : "if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\")))",
      "right" : "if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\")))",
      "info" : "IfStatement[51830-52020]:IfStatement[51840-52030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51914-52020]:Block[51924-52030]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[51961-51976]:ExpressionStatement[51971-51986]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[51993-52006]:ReturnStatement[52003-52016]"
    }, {
      "left" : "tb.clearStackToTableBodyContext();",
      "right" : "tb.clearStackToTableBodyContext();",
      "info" : "ExpressionStatement[52033-52067]:ExpressionStatement[52043-52077]"
    }, {
      "left" : "tb.process(new Token.EndTag(tb.currentElement().nodeName()));",
      "right" : "tb.process(new Token.EndTag(tb.currentElement().nodeName()));",
      "info" : "ExpressionStatement[52080-52141]:ExpressionStatement[52090-52151]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[52177-52198]:ReturnStatement[52187-52208]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[52218-52225]:Modifier[52228-52235]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[52226-52233]:PrimitiveType[52236-52243]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[52234-52246]:SimpleName[52244-52256]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[52247-52254]:SingleVariableDeclaration[52257-52264]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[52256-52270]:SingleVariableDeclaration[52266-52280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52272-52326]:Block[52282-52336]"
    }, {
      "left" : "return tb.process(t, InTable);",
      "right" : "return tb.process(t, InTable);",
      "info" : "ReturnStatement[52286-52316]:ReturnStatement[52296-52326]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[52354-52361]:PrimitiveType[52364-52371]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[52362-52369]:SimpleName[52372-52379]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[52370-52377]:SingleVariableDeclaration[52380-52387]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[52379-52393]:SingleVariableDeclaration[52389-52403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52395-54327]:Block[52405-54337]"
    }, {
      "left" : "if (t.isStartTag())",
      "right" : "if (t.isStartTag())",
      "info" : "IfStatement[52409-54292]:IfStatement[52419-54302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52429-53057]:Block[52439-53067]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[52447-52488]:VariableDeclarationStatement[52457-52498]"
    }, {
      "left" : "String name = startTag.name();",
      "right" : "String name = startTag.name();",
      "info" : "VariableDeclarationStatement[52505-52535]:VariableDeclarationStatement[52515-52545]"
    }, {
      "left" : "if (StringUtil.in(name, \"th\", \"td\"))",
      "right" : "if (StringUtil.in(name, \"th\", \"td\"))",
      "info" : "IfStatement[52553-53043]:IfStatement[52563-53053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52590-52806]:Block[52600-52816]"
    }, {
      "left" : "tb.clearStackToTableRowContext();",
      "right" : "tb.clearStackToTableRowContext();",
      "info" : "ExpressionStatement[52612-52645]:ExpressionStatement[52622-52655]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[52666-52686]:ExpressionStatement[52676-52696]"
    }, {
      "left" : "tb.transition(InCell);",
      "right" : "tb.transition(InCell);",
      "info" : "ExpressionStatement[52707-52729]:ExpressionStatement[52717-52739]"
    }, {
      "left" : "tb.insertMarkerToFormattingElements();",
      "right" : "tb.insertMarkerToFormattingElements();",
      "info" : "ExpressionStatement[52750-52788]:ExpressionStatement[52760-52798]"
    }, {
      "left" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "info" : "IfStatement[52812-53043]:IfStatement[52822-53053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52900-52970]:Block[52910-52980]"
    }, {
      "left" : "return handleMissingTr(t, tb);",
      "right" : "return handleMissingTr(t, tb);",
      "info" : "ReturnStatement[52922-52952]:ReturnStatement[52932-52962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52976-53043]:Block[52986-53053]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[52998-53025]:ReturnStatement[53008-53035]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[53063-54292]:IfStatement[53073-54302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53081-54227]:Block[53091-54237]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[53099-53134]:VariableDeclarationStatement[53109-53144]"
    }, {
      "left" : "String name = endTag.name();",
      "right" : "String name = endTag.name();",
      "info" : "VariableDeclarationStatement[53151-53179]:VariableDeclarationStatement[53161-53189]"
    }, {
      "left" : "if (name.equals(\"tr\"))",
      "right" : "if (name.equals(\"tr\"))",
      "info" : "IfStatement[53197-54213]:IfStatement[53207-54223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53220-53535]:Block[53230-53545]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[53242-53379]:IfStatement[53252-53389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53270-53379]:Block[53280-53389]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[53296-53311]:ExpressionStatement[53306-53321]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[53344-53357]:ReturnStatement[53354-53367]"
    }, {
      "left" : "tb.clearStackToTableRowContext();",
      "right" : "tb.clearStackToTableRowContext();",
      "info" : "ExpressionStatement[53400-53433]:ExpressionStatement[53410-53443]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[53454-53463]:ExpressionStatement[53464-53473]"
    }, {
      "left" : "tb.transition(InTableBody);",
      "right" : "tb.transition(InTableBody);",
      "info" : "ExpressionStatement[53490-53517]:ExpressionStatement[53500-53527]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[53541-54213]:IfStatement[53551-54223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53567-53637]:Block[53577-53647]"
    }, {
      "left" : "return handleMissingTr(t, tb);",
      "right" : "return handleMissingTr(t, tb);",
      "info" : "ReturnStatement[53589-53619]:ReturnStatement[53599-53629]"
    }, {
      "left" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "right" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "info" : "IfStatement[53643-54213]:IfStatement[53653-54223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53695-53962]:Block[53705-53972]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[53717-53846]:IfStatement[53727-53856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53745-53846]:Block[53755-53856]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[53771-53786]:ExpressionStatement[53781-53796]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[53811-53824]:ReturnStatement[53821-53834]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"tr\"));",
      "right" : "tb.process(new Token.EndTag(\"tr\"));",
      "info" : "ExpressionStatement[53867-53902]:ExpressionStatement[53877-53912]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[53923-53944]:ReturnStatement[53933-53954]"
    }, {
      "left" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\"))",
      "right" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\"))",
      "info" : "IfStatement[53968-54213]:IfStatement[53978-54223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54051-54140]:Block[54061-54150]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[54073-54088]:ExpressionStatement[54083-54098]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[54109-54122]:ReturnStatement[54119-54132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54146-54213]:Block[54156-54223]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[54168-54195]:ReturnStatement[54178-54205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54233-54292]:Block[54243-54302]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[54251-54278]:ReturnStatement[54261-54288]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[54305-54317]:ReturnStatement[54315-54327]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[54337-54344]:Modifier[54347-54354]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[54345-54352]:PrimitiveType[54355-54362]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[54353-54365]:SimpleName[54363-54375]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[54366-54373]:SingleVariableDeclaration[54376-54383]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[54375-54389]:SingleVariableDeclaration[54385-54399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54391-54445]:Block[54401-54455]"
    }, {
      "left" : "return tb.process(t, InTable);",
      "right" : "return tb.process(t, InTable);",
      "info" : "ReturnStatement[54405-54435]:ReturnStatement[54415-54445]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[54455-54462]:Modifier[54465-54472]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[54463-54470]:PrimitiveType[54473-54480]"
    }, {
      "left" : "handleMissingTr",
      "right" : "handleMissingTr",
      "info" : "SimpleName[54471-54486]:SimpleName[54481-54496]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[54487-54494]:SingleVariableDeclaration[54497-54504]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[54496-54510]:SingleVariableDeclaration[54506-54520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54512-54703]:Block[54522-54713]"
    }, {
      "left" : "boolean processed = tb.process(new Token.EndTag(\"tr\"));",
      "right" : "boolean processed = tb.process(new Token.EndTag(\"tr\"));",
      "info" : "VariableDeclarationStatement[54526-54581]:VariableDeclarationStatement[54536-54591]"
    }, {
      "left" : "if (processed)",
      "right" : "if (processed)",
      "info" : "IfStatement[54594-54693]:IfStatement[54604-54703]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[54625-54646]:ReturnStatement[54635-54656]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[54680-54693]:ReturnStatement[54690-54703]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[54732-54739]:PrimitiveType[54742-54749]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[54740-54747]:SimpleName[54750-54757]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[54748-54755]:SingleVariableDeclaration[54758-54765]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[54757-54771]:SingleVariableDeclaration[54767-54781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54773-56658]:Block[54783-56668]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[54787-56623]:IfStatement[54797-56633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54805-56124]:Block[54815-56134]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[54823-54858]:VariableDeclarationStatement[54833-54868]"
    }, {
      "left" : "String name = endTag.name();",
      "right" : "String name = endTag.name();",
      "info" : "VariableDeclarationStatement[54875-54903]:VariableDeclarationStatement[54885-54913]"
    }, {
      "left" : "if (StringUtil.in(name, \"td\", \"th\"))",
      "right" : "if (StringUtil.in(name, \"td\", \"th\"))",
      "info" : "IfStatement[54921-56110]:IfStatement[54931-56120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54958-55552]:Block[54968-55562]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[54980-55225]:IfStatement[54990-55235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55008-55225]:Block[55018-55235]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[55034-55049]:ExpressionStatement[55044-55059]"
    }, {
      "left" : "tb.transition(InRow);",
      "right" : "tb.transition(InRow);",
      "info" : "ExpressionStatement[55074-55095]:ExpressionStatement[55084-55105]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55190-55203]:ReturnStatement[55200-55213]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[55246-55274]:ExpressionStatement[55256-55284]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[55295-55384]:IfStatement[55305-55394]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[55369-55384]:ExpressionStatement[55379-55394]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[55405-55430]:ExpressionStatement[55415-55440]"
    }, {
      "left" : "tb.clearFormattingElementsToLastMarker();",
      "right" : "tb.clearFormattingElementsToLastMarker();",
      "info" : "ExpressionStatement[55451-55492]:ExpressionStatement[55461-55502]"
    }, {
      "left" : "tb.transition(InRow);",
      "right" : "tb.transition(InRow);",
      "info" : "ExpressionStatement[55513-55534]:ExpressionStatement[55523-55544]"
    }, {
      "left" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\"))",
      "right" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\"))",
      "info" : "IfStatement[55558-56110]:IfStatement[55568-56120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55629-55718]:Block[55639-55728]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[55651-55666]:ExpressionStatement[55661-55676]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55687-55700]:ReturnStatement[55697-55710]"
    }, {
      "left" : "if (StringUtil.in(name, \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(name, \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "info" : "IfStatement[55724-56110]:IfStatement[55734-56120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55791-56037]:Block[55801-56047]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[55813-55942]:IfStatement[55823-55952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55841-55942]:Block[55851-55952]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[55867-55882]:ExpressionStatement[55877-55892]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55907-55920]:ReturnStatement[55917-55930]"
    }, {
      "left" : "closeCell(tb);",
      "right" : "closeCell(tb);",
      "info" : "ExpressionStatement[55963-55977]:ExpressionStatement[55973-55987]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[55998-56019]:ReturnStatement[56008-56029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56043-56110]:Block[56053-56120]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[56065-56092]:ReturnStatement[56075-56102]"
    }, {
      "left" : "if (t.isStartTag() &&\n                    StringUtil.in(t.asStartTag().name(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "right" : "if (t.isStartTag() &&\n                    StringUtil.in(t.asStartTag().name(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "info" : "IfStatement[56130-56623]:IfStatement[56140-56633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56313-56558]:Block[56323-56568]"
    }, {
      "left" : "if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\")))",
      "right" : "if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\")))",
      "info" : "IfStatement[56331-56475]:IfStatement[56341-56485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56386-56475]:Block[56396-56485]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[56408-56423]:ExpressionStatement[56418-56433]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[56444-56457]:ReturnStatement[56454-56467]"
    }, {
      "left" : "closeCell(tb);",
      "right" : "closeCell(tb);",
      "info" : "ExpressionStatement[56492-56506]:ExpressionStatement[56502-56516]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[56523-56544]:ReturnStatement[56533-56554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56564-56623]:Block[56574-56633]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[56582-56609]:ReturnStatement[56592-56619]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[56636-56648]:ReturnStatement[56646-56658]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[56668-56675]:Modifier[56678-56685]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[56676-56683]:PrimitiveType[56686-56693]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[56684-56696]:SimpleName[56694-56706]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[56697-56704]:SingleVariableDeclaration[56707-56714]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[56706-56720]:SingleVariableDeclaration[56716-56730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56722-56775]:Block[56732-56785]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[56736-56765]:ReturnStatement[56746-56775]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[56785-56792]:Modifier[56795-56802]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[56793-56797]:PrimitiveType[56803-56807]"
    }, {
      "left" : "closeCell",
      "right" : "closeCell",
      "info" : "SimpleName[56798-56807]:SimpleName[56808-56817]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[56808-56822]:SingleVariableDeclaration[56818-56832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56824-57029]:Block[56834-57039]"
    }, {
      "left" : "if (tb.inTableScope(\"td\"))",
      "right" : "if (tb.inTableScope(\"td\"))",
      "info" : "IfStatement[56838-56985]:IfStatement[56848-56995]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"td\"));",
      "right" : "tb.process(new Token.EndTag(\"td\"));",
      "info" : "ExpressionStatement[56881-56916]:ExpressionStatement[56891-56926]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"th\"));",
      "right" : "tb.process(new Token.EndTag(\"th\"));",
      "info" : "ExpressionStatement[56950-56985]:ExpressionStatement[56960-56995]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[57060-57067]:PrimitiveType[57070-57077]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[57068-57075]:SimpleName[57078-57085]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[57076-57083]:SingleVariableDeclaration[57086-57093]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[57085-57099]:SingleVariableDeclaration[57095-57109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57101-60854]:Block[57111-60864]"
    }, {
      "left" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.insert(c);\n                    }\n                    break;\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.name();\n                    if (name.equals(\"html\"))\n                        return tb.process(start, InBody);\n                    else if (name.equals(\"option\")) {\n                        tb.process(new Token.EndTag(\"option\"));\n                        tb.insert(start);\n                    } else if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.process(new Token.EndTag(\"option\"));\n                        else if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.process(new Token.EndTag(\"optgroup\"));\n                        tb.insert(start);\n                    } else if (name.equals(\"select\")) {\n                        tb.error(this);\n                        return tb.process(new Token.EndTag(\"select\"));\n                    } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) {\n                        tb.error(this);\n                        if (!tb.inSelectScope(\"select\"))\n                            return false; // frag\n                        tb.process(new Token.EndTag(\"select\"));\n                        return tb.process(start);\n                    } else if (name.equals(\"script\")) {\n                        return tb.process(t, InHead);\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.name();\n                    if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                            tb.process(new Token.EndTag(\"option\"));\n                        if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.pop();\n                        else\n                            tb.error(this);\n                    } else if (name.equals(\"option\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.pop();\n                        else\n                            tb.error(this);\n                    } else if (name.equals(\"select\")) {\n                        if (!tb.inSelectScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.popStackToClose(name);\n                            tb.resetInsertionMode();\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (!tb.currentElement().nodeName().equals(\"html\"))\n                        tb.error(this);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "right" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.insert(c);\n                    }\n                    break;\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.name();\n                    if (name.equals(\"html\"))\n                        return tb.process(start, InBody);\n                    else if (name.equals(\"option\")) {\n                        tb.process(new Token.EndTag(\"option\"));\n                        tb.insert(start);\n                    } else if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.process(new Token.EndTag(\"option\"));\n                        else if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.process(new Token.EndTag(\"optgroup\"));\n                        tb.insert(start);\n                    } else if (name.equals(\"select\")) {\n                        tb.error(this);\n                        return tb.process(new Token.EndTag(\"select\"));\n                    } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) {\n                        tb.error(this);\n                        if (!tb.inSelectScope(\"select\"))\n                            return false; // frag\n                        tb.process(new Token.EndTag(\"select\"));\n                        return tb.process(start);\n                    } else if (name.equals(\"script\")) {\n                        return tb.process(t, InHead);\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.name();\n                    if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                            tb.process(new Token.EndTag(\"option\"));\n                        if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.pop();\n                        else\n                            tb.error(this);\n                    } else if (name.equals(\"option\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.pop();\n                        else\n                            tb.error(this);\n                    } else if (name.equals(\"select\")) {\n                        if (!tb.inSelectScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.popStackToClose(name);\n                            tb.resetInsertionMode();\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (!tb.currentElement().nodeName().equals(\"html\"))\n                        tb.error(this);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "info" : "SwitchStatement[57115-60819]:SwitchStatement[57125-60829]"
    }, {
      "left" : "case Character:",
      "right" : "case Character:",
      "info" : "SwitchCase[57149-57164]:SwitchCase[57159-57174]"
    }, {
      "left" : "Token.Character c = t.asCharacter();",
      "right" : "Token.Character c = t.asCharacter();",
      "info" : "VariableDeclarationStatement[57185-57221]:VariableDeclarationStatement[57195-57231]"
    }, {
      "left" : "if (c.getData().equals(nullString))",
      "right" : "if (c.getData().equals(nullString))",
      "info" : "IfStatement[57242-57446]:IfStatement[57252-57456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57278-57379]:Block[57288-57389]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[57304-57319]:ExpressionStatement[57314-57329]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[57344-57357]:ReturnStatement[57354-57367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57385-57446]:Block[57395-57456]"
    }, {
      "left" : "tb.insert(c);",
      "right" : "tb.insert(c);",
      "info" : "ExpressionStatement[57411-57424]:ExpressionStatement[57421-57434]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57467-57473]:BreakStatement[57477-57483]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[57490-57503]:SwitchCase[57500-57513]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[57524-57549]:ExpressionStatement[57534-57559]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57570-57576]:BreakStatement[57580-57586]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[57593-57606]:SwitchCase[57603-57616]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[57627-57642]:ExpressionStatement[57637-57652]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[57663-57676]:ReturnStatement[57673-57686]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[57693-57707]:SwitchCase[57703-57717]"
    }, {
      "left" : "Token.StartTag start = t.asStartTag();",
      "right" : "Token.StartTag start = t.asStartTag();",
      "info" : "VariableDeclarationStatement[57728-57766]:VariableDeclarationStatement[57738-57776]"
    }, {
      "left" : "String name = start.name();",
      "right" : "String name = start.name();",
      "info" : "VariableDeclarationStatement[57787-57814]:VariableDeclarationStatement[57797-57824]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[57835-59202]:IfStatement[57845-59212]"
    }, {
      "left" : "return tb.process(start, InBody);",
      "right" : "return tb.process(start, InBody);",
      "info" : "ReturnStatement[57884-57917]:ReturnStatement[57894-57927]"
    }, {
      "left" : "if (name.equals(\"option\"))",
      "right" : "if (name.equals(\"option\"))",
      "info" : "IfStatement[57943-59202]:IfStatement[57953-59212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57970-58099]:Block[57980-58109]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"option\"));",
      "right" : "tb.process(new Token.EndTag(\"option\"));",
      "info" : "ExpressionStatement[57996-58035]:ExpressionStatement[58006-58045]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[58060-58077]:ExpressionStatement[58070-58087]"
    }, {
      "left" : "if (name.equals(\"optgroup\"))",
      "right" : "if (name.equals(\"optgroup\"))",
      "info" : "IfStatement[58105-59202]:IfStatement[58115-59212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58134-58498]:Block[58144-58508]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "info" : "IfStatement[58160-58434]:IfStatement[58170-58444]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"option\"));",
      "right" : "tb.process(new Token.EndTag(\"option\"));",
      "info" : "ExpressionStatement[58241-58280]:ExpressionStatement[58251-58290]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
      "info" : "IfStatement[58310-58434]:IfStatement[58320-58444]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"optgroup\"));",
      "right" : "tb.process(new Token.EndTag(\"optgroup\"));",
      "info" : "ExpressionStatement[58393-58434]:ExpressionStatement[58403-58444]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[58459-58476]:ExpressionStatement[58469-58486]"
    }, {
      "left" : "if (name.equals(\"select\"))",
      "right" : "if (name.equals(\"select\"))",
      "info" : "IfStatement[58504-59202]:IfStatement[58514-59212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58531-58665]:Block[58541-58675]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[58557-58572]:ExpressionStatement[58567-58582]"
    }, {
      "left" : "return tb.process(new Token.EndTag(\"select\"));",
      "right" : "return tb.process(new Token.EndTag(\"select\"));",
      "info" : "ReturnStatement[58597-58643]:ReturnStatement[58607-58653]"
    }, {
      "left" : "if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\"))",
      "right" : "if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\"))",
      "info" : "IfStatement[58671-59202]:IfStatement[58681-59212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58727-59011]:Block[58737-59021]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[58753-58768]:ExpressionStatement[58763-58778]"
    }, {
      "left" : "if (!tb.inSelectScope(\"select\"))",
      "right" : "if (!tb.inSelectScope(\"select\"))",
      "info" : "IfStatement[58793-58867]:IfStatement[58803-58877]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[58854-58867]:ReturnStatement[58864-58877]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"select\"));",
      "right" : "tb.process(new Token.EndTag(\"select\"));",
      "info" : "ExpressionStatement[58900-58939]:ExpressionStatement[58910-58949]"
    }, {
      "left" : "return tb.process(start);",
      "right" : "return tb.process(start);",
      "info" : "ReturnStatement[58964-58989]:ReturnStatement[58974-58999]"
    }, {
      "left" : "if (name.equals(\"script\"))",
      "right" : "if (name.equals(\"script\"))",
      "info" : "IfStatement[59017-59202]:IfStatement[59027-59212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59044-59121]:Block[59054-59131]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[59070-59099]:ReturnStatement[59080-59109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59127-59202]:Block[59137-59212]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[59153-59180]:ReturnStatement[59163-59190]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59223-59229]:BreakStatement[59233-59239]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[59246-59258]:SwitchCase[59256-59268]"
    }, {
      "left" : "Token.EndTag end = t.asEndTag();",
      "right" : "Token.EndTag end = t.asEndTag();",
      "info" : "VariableDeclarationStatement[59279-59311]:VariableDeclarationStatement[59289-59321]"
    }, {
      "left" : "name = end.name();",
      "right" : "name = end.name();",
      "info" : "ExpressionStatement[59332-59350]:ExpressionStatement[59342-59360]"
    }, {
      "left" : "if (name.equals(\"optgroup\"))",
      "right" : "if (name.equals(\"optgroup\"))",
      "info" : "IfStatement[59371-60540]:IfStatement[59381-60550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59400-59876]:Block[59410-59886]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))",
      "info" : "IfStatement[59426-59664]:IfStatement[59436-59674]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"option\"));",
      "right" : "tb.process(new Token.EndTag(\"option\"));",
      "info" : "ExpressionStatement[59625-59664]:ExpressionStatement[59635-59674]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
      "info" : "IfStatement[59689-59854]:IfStatement[59699-59864]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[59772-59781]:ExpressionStatement[59782-59791]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[59839-59854]:ExpressionStatement[59849-59864]"
    }, {
      "left" : "if (name.equals(\"option\"))",
      "right" : "if (name.equals(\"option\"))",
      "info" : "IfStatement[59882-60540]:IfStatement[59892-60550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59909-60120]:Block[59919-60130]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "info" : "IfStatement[59935-60098]:IfStatement[59945-60108]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[60016-60025]:ExpressionStatement[60026-60035]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[60083-60098]:ExpressionStatement[60093-60108]"
    }, {
      "left" : "if (name.equals(\"select\"))",
      "right" : "if (name.equals(\"select\"))",
      "info" : "IfStatement[60126-60540]:IfStatement[60136-60550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60153-60483]:Block[60163-60493]"
    }, {
      "left" : "if (!tb.inSelectScope(name))",
      "right" : "if (!tb.inSelectScope(name))",
      "info" : "IfStatement[60179-60461]:IfStatement[60189-60471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60208-60321]:Block[60218-60331]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[60238-60253]:ExpressionStatement[60248-60263]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[60282-60295]:ReturnStatement[60292-60305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60327-60461]:Block[60337-60471]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[60357-60382]:ExpressionStatement[60367-60392]"
    }, {
      "left" : "tb.resetInsertionMode();",
      "right" : "tb.resetInsertionMode();",
      "info" : "ExpressionStatement[60411-60435]:ExpressionStatement[60421-60445]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[60513-60540]:ReturnStatement[60523-60550]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60561-60567]:BreakStatement[60571-60577]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[60584-60593]:SwitchCase[60594-60603]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[60614-60705]:IfStatement[60624-60715]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[60690-60705]:ExpressionStatement[60700-60715]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60726-60732]:BreakStatement[60736-60742]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[60749-60757]:SwitchCase[60759-60767]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[60778-60805]:ReturnStatement[60788-60815]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[60832-60844]:ReturnStatement[60842-60854]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[60864-60871]:Modifier[60874-60881]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[60872-60879]:PrimitiveType[60882-60889]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[60880-60892]:SimpleName[60890-60902]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[60893-60900]:SingleVariableDeclaration[60903-60910]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[60902-60916]:SingleVariableDeclaration[60912-60926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60918-60983]:Block[60928-60993]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[60932-60947]:ExpressionStatement[60942-60957]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[60960-60973]:ReturnStatement[60970-60983]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[61021-61028]:PrimitiveType[61031-61038]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[61029-61036]:SimpleName[61039-61046]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[61037-61044]:SingleVariableDeclaration[61047-61054]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[61046-61060]:SingleVariableDeclaration[61056-61070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61062-61816]:Block[61072-61826]"
    }, {
      "left" : "if (t.isStartTag() && StringUtil.in(t.asStartTag().name(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
      "right" : "if (t.isStartTag() && StringUtil.in(t.asStartTag().name(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
      "info" : "IfStatement[61076-61806]:IfStatement[61086-61816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61201-61342]:Block[61211-61352]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[61219-61234]:ExpressionStatement[61229-61244]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"select\"));",
      "right" : "tb.process(new Token.EndTag(\"select\"));",
      "info" : "ExpressionStatement[61251-61290]:ExpressionStatement[61261-61300]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[61307-61328]:ReturnStatement[61317-61338]"
    }, {
      "left" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().name(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
      "right" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().name(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
      "info" : "IfStatement[61348-61806]:IfStatement[61358-61816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61469-61737]:Block[61479-61747]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[61487-61502]:ExpressionStatement[61497-61512]"
    }, {
      "left" : "if (tb.inTableScope(t.asEndTag().name()))",
      "right" : "if (tb.inTableScope(t.asEndTag().name()))",
      "info" : "IfStatement[61519-61723]:IfStatement[61529-61733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61561-61684]:Block[61571-61694]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"select\"));",
      "right" : "tb.process(new Token.EndTag(\"select\"));",
      "info" : "ExpressionStatement[61583-61622]:ExpressionStatement[61593-61632]"
    }, {
      "left" : "return (tb.process(t));",
      "right" : "return (tb.process(t));",
      "info" : "ReturnStatement[61643-61666]:ReturnStatement[61653-61676]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[61710-61723]:ReturnStatement[61720-61733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61743-61806]:Block[61753-61816]"
    }, {
      "left" : "return tb.process(t, InSelect);",
      "right" : "return tb.process(t, InSelect);",
      "info" : "ReturnStatement[61761-61792]:ReturnStatement[61771-61802]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[61848-61855]:PrimitiveType[61858-61865]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[61856-61863]:SimpleName[61866-61873]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[61864-61871]:SingleVariableDeclaration[61874-61881]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[61873-61887]:SingleVariableDeclaration[61883-61897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61889-62841]:Block[61899-62851]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[61903-62806]:IfStatement[61913-62816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61924-61985]:Block[61934-61995]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[61942-61971]:ReturnStatement[61952-61981]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[61991-62806]:IfStatement[62001-62816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62010-62085]:Block[62020-62095]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[62028-62053]:ExpressionStatement[62038-62063]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[62091-62806]:IfStatement[62101-62816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62110-62187]:Block[62120-62197]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[62128-62143]:ExpressionStatement[62138-62153]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[62160-62173]:ReturnStatement[62170-62183]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "info" : "IfStatement[62193-62806]:IfStatement[62203-62816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62253-62314]:Block[62263-62324]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[62271-62300]:ReturnStatement[62281-62310]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().name().equals(\"html\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().name().equals(\"html\"))",
      "info" : "IfStatement[62320-62806]:IfStatement[62330-62816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62376-62601]:Block[62386-62611]"
    }, {
      "left" : "if (tb.isFragmentParsing())",
      "right" : "if (tb.isFragmentParsing())",
      "info" : "IfStatement[62394-62587]:IfStatement[62404-62597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62422-62511]:Block[62432-62521]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[62444-62459]:ExpressionStatement[62454-62469]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[62480-62493]:ReturnStatement[62490-62503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62517-62587]:Block[62527-62597]"
    }, {
      "left" : "tb.transition(AfterAfterBody);",
      "right" : "tb.transition(AfterAfterBody);",
      "info" : "ExpressionStatement[62539-62569]:ExpressionStatement[62549-62579]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[62607-62806]:IfStatement[62617-62816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62622-62676]:Block[62632-62686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62682-62806]:Block[62692-62816]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[62700-62715]:ExpressionStatement[62710-62725]"
    }, {
      "left" : "tb.transition(InBody);",
      "right" : "tb.transition(InBody);",
      "info" : "ExpressionStatement[62732-62754]:ExpressionStatement[62742-62764]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[62771-62792]:ReturnStatement[62781-62802]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[62819-62831]:ReturnStatement[62829-62841]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[62874-62881]:PrimitiveType[62884-62891]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[62882-62889]:SimpleName[62892-62899]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[62890-62897]:SingleVariableDeclaration[62900-62907]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[62899-62913]:SingleVariableDeclaration[62909-62923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62915-64630]:Block[62925-64640]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[62929-64595]:IfStatement[62939-64605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62950-63009]:Block[62960-63019]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[62968-62995]:ExpressionStatement[62978-63005]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[63015-64595]:IfStatement[63025-64605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63034-63091]:Block[63044-63101]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[63052-63077]:ExpressionStatement[63062-63087]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[63097-64595]:IfStatement[63107-64605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63116-63193]:Block[63126-63203]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[63134-63149]:ExpressionStatement[63144-63159]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[63166-63179]:ReturnStatement[63176-63189]"
    }, {
      "left" : "if (t.isStartTag())",
      "right" : "if (t.isStartTag())",
      "info" : "IfStatement[63199-64595]:IfStatement[63209-64605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63219-63837]:Block[63229-63847]"
    }, {
      "left" : "Token.StartTag start = t.asStartTag();",
      "right" : "Token.StartTag start = t.asStartTag();",
      "info" : "VariableDeclarationStatement[63237-63275]:VariableDeclarationStatement[63247-63285]"
    }, {
      "left" : "String name = start.name();",
      "right" : "String name = start.name();",
      "info" : "VariableDeclarationStatement[63292-63319]:VariableDeclarationStatement[63302-63329]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[63336-63823]:IfStatement[63346-63833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63361-63434]:Block[63371-63444]"
    }, {
      "left" : "return tb.process(start, InBody);",
      "right" : "return tb.process(start, InBody);",
      "info" : "ReturnStatement[63383-63416]:ReturnStatement[63393-63426]"
    }, {
      "left" : "if (name.equals(\"frameset\"))",
      "right" : "if (name.equals(\"frameset\"))",
      "info" : "IfStatement[63440-63823]:IfStatement[63450-63833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63469-63526]:Block[63479-63536]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[63491-63508]:ExpressionStatement[63501-63518]"
    }, {
      "left" : "if (name.equals(\"frame\"))",
      "right" : "if (name.equals(\"frame\"))",
      "info" : "IfStatement[63532-63823]:IfStatement[63542-63833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63558-63620]:Block[63568-63630]"
    }, {
      "left" : "tb.insertEmpty(start);",
      "right" : "tb.insertEmpty(start);",
      "info" : "ExpressionStatement[63580-63602]:ExpressionStatement[63590-63612]"
    }, {
      "left" : "if (name.equals(\"noframes\"))",
      "right" : "if (name.equals(\"noframes\"))",
      "info" : "IfStatement[63626-63823]:IfStatement[63636-63833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63655-63728]:Block[63665-63738]"
    }, {
      "left" : "return tb.process(start, InHead);",
      "right" : "return tb.process(start, InHead);",
      "info" : "ReturnStatement[63677-63710]:ReturnStatement[63687-63720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63734-63823]:Block[63744-63833]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[63756-63771]:ExpressionStatement[63766-63781]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[63792-63805]:ReturnStatement[63802-63815]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().name().equals(\"frameset\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().name().equals(\"frameset\"))",
      "info" : "IfStatement[63843-64595]:IfStatement[63853-64605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63903-64319]:Block[63913-64329]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[63921-64305]:IfStatement[63931-64315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63972-64069]:Block[63982-64079]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[64002-64017]:ExpressionStatement[64012-64027]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[64038-64051]:ReturnStatement[64048-64061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64075-64305]:Block[64085-64315]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[64097-64106]:ExpressionStatement[64107-64116]"
    }, {
      "left" : "if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\"))",
      "right" : "if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\"))",
      "info" : "IfStatement[64127-64287]:IfStatement[64137-64297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64210-64287]:Block[64220-64297]"
    }, {
      "left" : "tb.transition(AfterFrameset);",
      "right" : "tb.transition(AfterFrameset);",
      "info" : "ExpressionStatement[64236-64265]:ExpressionStatement[64246-64275]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[64325-64595]:IfStatement[64335-64605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64340-64512]:Block[64350-64522]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[64358-64498]:IfStatement[64368-64508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64410-64498]:Block[64420-64508]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[64432-64447]:ExpressionStatement[64442-64457]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[64468-64480]:ReturnStatement[64478-64490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64518-64595]:Block[64528-64605]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[64536-64551]:ExpressionStatement[64546-64561]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[64568-64581]:ReturnStatement[64578-64591]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[64608-64620]:ReturnStatement[64618-64630]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[64666-64673]:PrimitiveType[64676-64683]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[64674-64681]:SimpleName[64684-64691]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[64682-64689]:SingleVariableDeclaration[64692-64699]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[64691-64705]:SingleVariableDeclaration[64701-64715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64707-65576]:Block[64717-65586]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[64721-65541]:IfStatement[64731-65551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64742-64801]:Block[64752-64811]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[64760-64787]:ExpressionStatement[64770-64797]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[64807-65541]:IfStatement[64817-65551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64826-64883]:Block[64836-64893]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[64844-64869]:ExpressionStatement[64854-64879]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[64889-65541]:IfStatement[64899-65551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64908-64985]:Block[64918-64995]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[64926-64941]:ExpressionStatement[64936-64951]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[64958-64971]:ReturnStatement[64968-64981]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "info" : "IfStatement[64991-65541]:IfStatement[65001-65551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65051-65112]:Block[65061-65122]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[65069-65098]:ReturnStatement[65079-65108]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().name().equals(\"html\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().name().equals(\"html\"))",
      "info" : "IfStatement[65118-65541]:IfStatement[65128-65551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65174-65240]:Block[65184-65250]"
    }, {
      "left" : "tb.transition(AfterAfterFrameset);",
      "right" : "tb.transition(AfterAfterFrameset);",
      "info" : "ExpressionStatement[65192-65226]:ExpressionStatement[65202-65236]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().name().equals(\"noframes\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().name().equals(\"noframes\"))",
      "info" : "IfStatement[65246-65541]:IfStatement[65256-65551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65310-65371]:Block[65320-65381]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[65328-65357]:ReturnStatement[65338-65367]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[65377-65541]:IfStatement[65387-65551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65392-65458]:Block[65402-65468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65464-65541]:Block[65474-65551]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[65482-65497]:ExpressionStatement[65492-65507]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[65514-65527]:ReturnStatement[65524-65537]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[65554-65566]:ReturnStatement[65564-65576]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[65613-65620]:PrimitiveType[65623-65630]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[65621-65628]:SimpleName[65631-65638]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[65629-65636]:SingleVariableDeclaration[65639-65646]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[65638-65652]:SingleVariableDeclaration[65648-65662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65654-66145]:Block[65664-66155]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[65668-66110]:IfStatement[65678-66120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65687-65744]:Block[65697-65754]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[65705-65730]:ExpressionStatement[65715-65740]"
    }, {
      "left" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().name().equals(\"html\")))",
      "right" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().name().equals(\"html\")))",
      "info" : "IfStatement[65750-66110]:IfStatement[65760-66120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65848-65909]:Block[65858-65919]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[65866-65895]:ReturnStatement[65876-65905]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[65915-66110]:IfStatement[65925-66120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65930-65980]:Block[65940-65990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65986-66110]:Block[65996-66120]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[66004-66019]:ExpressionStatement[66014-66029]"
    }, {
      "left" : "tb.transition(InBody);",
      "right" : "tb.transition(InBody);",
      "info" : "ExpressionStatement[66036-66058]:ExpressionStatement[66046-66068]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[66075-66096]:ReturnStatement[66085-66106]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[66123-66135]:ReturnStatement[66133-66145]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[66186-66193]:PrimitiveType[66196-66203]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[66194-66201]:SimpleName[66204-66211]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[66202-66209]:SingleVariableDeclaration[66212-66219]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[66211-66225]:SingleVariableDeclaration[66221-66235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66227-66848]:Block[66237-66858]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[66241-66813]:IfStatement[66251-66823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66260-66317]:Block[66270-66327]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[66278-66303]:ExpressionStatement[66288-66313]"
    }, {
      "left" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().name().equals(\"html\")))",
      "right" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().name().equals(\"html\")))",
      "info" : "IfStatement[66323-66813]:IfStatement[66333-66823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66421-66482]:Block[66431-66492]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[66439-66468]:ReturnStatement[66449-66478]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[66488-66813]:IfStatement[66498-66823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66503-66553]:Block[66513-66563]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().name().equals(\"nofrmes\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().name().equals(\"nofrmes\"))",
      "info" : "IfStatement[66559-66813]:IfStatement[66569-66823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66622-66683]:Block[66632-66693]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[66640-66669]:ReturnStatement[66650-66679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66689-66813]:Block[66699-66823]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[66707-66722]:ExpressionStatement[66717-66732]"
    }, {
      "left" : "tb.transition(InBody);",
      "right" : "tb.transition(InBody);",
      "info" : "ExpressionStatement[66739-66761]:ExpressionStatement[66749-66771]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[66778-66799]:ReturnStatement[66788-66809]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[66826-66838]:ReturnStatement[66836-66848]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[66885-66892]:PrimitiveType[66895-66902]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[66893-66900]:SimpleName[66903-66910]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[66901-66908]:SingleVariableDeclaration[66911-66918]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[66910-66924]:SingleVariableDeclaration[66920-66934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66926-67020]:Block[66936-67030]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[66940-66952]:ReturnStatement[66950-66962]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[67097-67105]:Modifier[67107-67115]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[67106-67113]:PrimitiveType[67116-67123]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[67114-67121]:SimpleName[67124-67131]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[67122-67129]:SingleVariableDeclaration[67132-67139]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[67131-67145]:SingleVariableDeclaration[67141-67155]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[67153-67160]:Modifier[67163-67170]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[67161-67167]:Modifier[67171-67177]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[67168-67175]:PrimitiveType[67178-67185]"
    }, {
      "left" : "isWhitespace",
      "right" : "isWhitespace",
      "info" : "SimpleName[67176-67188]:SimpleName[67186-67198]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[67189-67196]:SingleVariableDeclaration[67199-67206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67198-67615]:Block[67208-67625]"
    }, {
      "left" : "if (t.isCharacter())",
      "right" : "if (t.isCharacter())",
      "info" : "IfStatement[67208-67587]:IfStatement[67218-67597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67229-67587]:Block[67239-67597]"
    }, {
      "left" : "String data = t.asCharacter().getData();",
      "right" : "String data = t.asCharacter().getData();",
      "info" : "VariableDeclarationStatement[67243-67283]:VariableDeclarationStatement[67253-67293]"
    }, {
      "left" : "for (int i = 0; i < data.length(); i++)",
      "right" : "for (int i = 0; i < data.length(); i++)",
      "info" : "ForStatement[67374-67552]:ForStatement[67384-67562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67414-67552]:Block[67424-67562]"
    }, {
      "left" : "char c = data.charAt(i);",
      "right" : "char c = data.charAt(i);",
      "info" : "VariableDeclarationStatement[67432-67456]:VariableDeclarationStatement[67442-67466]"
    }, {
      "left" : "if (!Character.isWhitespace(c))",
      "right" : "if (!Character.isWhitespace(c))",
      "info" : "IfStatement[67473-67538]:IfStatement[67483-67548]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[67525-67538]:ReturnStatement[67535-67548]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[67565-67577]:ReturnStatement[67575-67587]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[67596-67609]:ReturnStatement[67606-67619]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[67621-67628]:Modifier[67631-67638]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[67629-67635]:Modifier[67639-67645]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[67636-67640]:PrimitiveType[67646-67650]"
    }, {
      "left" : "handleRcData",
      "right" : "handleRcData",
      "info" : "SimpleName[67641-67653]:SimpleName[67651-67663]"
    }, {
      "left" : "Token.StartTag startTag",
      "right" : "Token.StartTag startTag",
      "info" : "SingleVariableDeclaration[67654-67677]:SingleVariableDeclaration[67664-67687]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[67679-67693]:SingleVariableDeclaration[67689-67703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67695-67848]:Block[67705-67858]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[67705-67725]:ExpressionStatement[67715-67735]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "right" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "info" : "ExpressionStatement[67734-67781]:ExpressionStatement[67744-67791]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[67790-67813]:ExpressionStatement[67800-67823]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[67822-67842]:ExpressionStatement[67832-67852]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[67854-67861]:Modifier[67864-67871]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[67862-67868]:Modifier[67872-67878]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[67869-67873]:PrimitiveType[67879-67883]"
    }, {
      "left" : "handleRawtext",
      "right" : "handleRawtext",
      "info" : "SimpleName[67874-67887]:SimpleName[67884-67897]"
    }, {
      "left" : "Token.StartTag startTag",
      "right" : "Token.StartTag startTag",
      "info" : "SingleVariableDeclaration[67888-67911]:SingleVariableDeclaration[67898-67921]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[67913-67927]:SingleVariableDeclaration[67923-67937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67929-68083]:Block[67939-68093]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[67939-67959]:ExpressionStatement[67949-67969]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.Rawtext);",
      "right" : "tb.tokeniser.transition(TokeniserState.Rawtext);",
      "info" : "ExpressionStatement[67968-68016]:ExpressionStatement[67978-68026]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[68025-68048]:ExpressionStatement[68035-68058]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[68057-68077]:ExpressionStatement[68067-68087]"
    } ]
  },
  "interFileMappings" : { }
}