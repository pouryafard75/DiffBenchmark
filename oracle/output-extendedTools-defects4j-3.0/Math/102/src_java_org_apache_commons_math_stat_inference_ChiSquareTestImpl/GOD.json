{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ChiSquareTestImpl",
      "right" : "ChiSquareTestImpl",
      "info" : "TypeDeclaration[1104-15508]:TypeDeclaration[1104-16112]"
    }, {
      "left" : "private ChiSquaredDistribution distribution;",
      "right" : "private ChiSquaredDistribution distribution;",
      "info" : "FieldDeclaration[1338-1444]:FieldDeclaration[1338-1444]"
    }, {
      "left" : "public ChiSquareTestImpl()",
      "right" : "public ChiSquareTestImpl()",
      "info" : "MethodDeclaration[1452-1591]:MethodDeclaration[1452-1591]"
    }, {
      "left" : "public ChiSquareTestImpl(ChiSquaredDistribution x)",
      "right" : "public ChiSquareTestImpl(ChiSquaredDistribution x)",
      "info" : "MethodDeclaration[1597-1903]:MethodDeclaration[1597-1903]"
    }, {
      "left" : "public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException",
      "right" : "public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[1909-3183]:MethodDeclaration[1909-3787]"
    }, {
      "left" : "public double chiSquareTest(double[] expected, long[] observed)\n        throws IllegalArgumentException, MathException",
      "right" : "public double chiSquareTest(double[] expected, long[] observed)\n        throws IllegalArgumentException, MathException",
      "info" : "MethodDeclaration[3189-4001]:MethodDeclaration[3793-4605]"
    }, {
      "left" : "public boolean chiSquareTest(double[] expected, long[] observed, \n            double alpha) throws IllegalArgumentException, MathException",
      "right" : "public boolean chiSquareTest(double[] expected, long[] observed, \n            double alpha) throws IllegalArgumentException, MathException",
      "info" : "MethodDeclaration[4007-5008]:MethodDeclaration[4611-5612]"
    }, {
      "left" : "public double chiSquare(long[][] counts) throws IllegalArgumentException",
      "right" : "public double chiSquare(long[][] counts) throws IllegalArgumentException",
      "info" : "MethodDeclaration[5018-6333]:MethodDeclaration[5622-6937]"
    }, {
      "left" : "public double chiSquareTest(long[][] counts)\n    throws IllegalArgumentException, MathException",
      "right" : "public double chiSquareTest(long[][] counts)\n    throws IllegalArgumentException, MathException",
      "info" : "MethodDeclaration[6339-6908]:MethodDeclaration[6943-7512]"
    }, {
      "left" : "public boolean chiSquareTest(long[][] counts, double alpha)\n    throws IllegalArgumentException, MathException",
      "right" : "public boolean chiSquareTest(long[][] counts, double alpha)\n    throws IllegalArgumentException, MathException",
      "info" : "MethodDeclaration[6914-7569]:MethodDeclaration[7518-8173]"
    }, {
      "left" : "public double chiSquareDataSetsComparison(long[] observed1, long[] observed2)\n        throws IllegalArgumentException",
      "right" : "public double chiSquareDataSetsComparison(long[] observed1, long[] observed2)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[7579-9979]:MethodDeclaration[8183-10583]"
    }, {
      "left" : "public double chiSquareTestDataSetsComparison(long[] observed1, long[] observed2)\n        throws IllegalArgumentException, MathException",
      "right" : "public double chiSquareTestDataSetsComparison(long[] observed1, long[] observed2)\n        throws IllegalArgumentException, MathException",
      "info" : "MethodDeclaration[9985-10666]:MethodDeclaration[10589-11270]"
    }, {
      "left" : "public boolean chiSquareTestDataSetsComparison(long[] observed1, long[] observed2,\n            double alpha) throws IllegalArgumentException, MathException",
      "right" : "public boolean chiSquareTestDataSetsComparison(long[] observed1, long[] observed2,\n            double alpha) throws IllegalArgumentException, MathException",
      "info" : "MethodDeclaration[10672-11531]:MethodDeclaration[11276-12135]"
    }, {
      "left" : "private void checkArray(long[][] in) throws IllegalArgumentException",
      "right" : "private void checkArray(long[][] in) throws IllegalArgumentException",
      "info" : "MethodDeclaration[11537-12557]:MethodDeclaration[12141-13161]"
    }, {
      "left" : "protected DistributionFactory getDistributionFactory()",
      "right" : "protected DistributionFactory getDistributionFactory()",
      "info" : "MethodDeclaration[12648-12978]:MethodDeclaration[13252-13582]"
    }, {
      "left" : "private boolean isRectangular(long[][] in)",
      "right" : "private boolean isRectangular(long[][] in)",
      "info" : "MethodDeclaration[13084-13594]:MethodDeclaration[13688-14198]"
    }, {
      "left" : "private boolean isPositive(double[] in)",
      "right" : "private boolean isPositive(double[] in)",
      "info" : "MethodDeclaration[13604-14103]:MethodDeclaration[14208-14707]"
    }, {
      "left" : "private boolean isNonNegative(long[] in)",
      "right" : "private boolean isNonNegative(long[] in)",
      "info" : "MethodDeclaration[14113-14617]:MethodDeclaration[14717-15221]"
    }, {
      "left" : "private boolean isNonNegative(long[][] in)",
      "right" : "private boolean isNonNegative(long[][] in)",
      "info" : "MethodDeclaration[14627-15234]:MethodDeclaration[15231-15838]"
    }, {
      "left" : "public void setDistribution(ChiSquaredDistribution value)",
      "right" : "public void setDistribution(ChiSquaredDistribution value)",
      "info" : "MethodDeclaration[15241-15506]:MethodDeclaration[15845-16110]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1256-1262]:Modifier[1256-1262]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1263-1268]:TYPE_DECLARATION_KIND[1263-1268]"
    }, {
      "left" : "ChiSquareTestImpl",
      "right" : "ChiSquareTestImpl",
      "info" : "SimpleName[1269-1286]:SimpleName[1269-1286]"
    }, {
      "left" : "UnknownDistributionChiSquareTest",
      "right" : "UnknownDistributionChiSquareTest",
      "info" : "SimpleType[1298-1330]:SimpleType[1298-1330]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1506-1512]:Modifier[1506-1512]"
    }, {
      "left" : "ChiSquareTestImpl",
      "right" : "ChiSquareTestImpl",
      "info" : "SimpleName[1513-1530]:SimpleName[1513-1530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1533-1591]:Block[1533-1591]"
    }, {
      "left" : "this(new ChiSquaredDistributionImpl(1.0));",
      "right" : "this(new ChiSquaredDistributionImpl(1.0));",
      "info" : "ConstructorInvocation[1543-1585]:ConstructorInvocation[1543-1585]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1800-1806]:Modifier[1800-1806]"
    }, {
      "left" : "ChiSquareTestImpl",
      "right" : "ChiSquareTestImpl",
      "info" : "SimpleName[1807-1824]:SimpleName[1807-1824]"
    }, {
      "left" : "ChiSquaredDistribution x",
      "right" : "ChiSquaredDistribution x",
      "info" : "SingleVariableDeclaration[1825-1849]:SingleVariableDeclaration[1825-1849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1851-1903]:Block[1851-1903]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[1861-1869]:SuperConstructorInvocation[1861-1869]"
    }, {
      "left" : "setDistribution(x);",
      "right" : "setDistribution(x);",
      "info" : "ExpressionStatement[1878-1897]:ExpressionStatement[1878-1897]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2408-2414]:Modifier[2408-2414]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[2415-2421]:PrimitiveType[2415-2421]"
    }, {
      "left" : "chiSquare",
      "right" : "chiSquare",
      "info" : "SimpleName[2422-2431]:SimpleName[2422-2431]"
    }, {
      "left" : "double[] expected",
      "right" : "double[] expected",
      "info" : "SingleVariableDeclaration[2432-2449]:SingleVariableDeclaration[2432-2449]"
    }, {
      "left" : "long[] observed",
      "right" : "long[] observed",
      "info" : "SingleVariableDeclaration[2451-2466]:SingleVariableDeclaration[2451-2466]"
    }, {
      "left" : "IllegalArgumentException",
      "right" : "IllegalArgumentException",
      "info" : "SimpleType[2483-2507]:SimpleType[2483-2507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2508-3183]:Block[2508-3787]"
    }, {
      "left" : "if ((expected.length < 2) || (expected.length != observed.length))",
      "right" : "if ((expected.length < 2) || (expected.length != observed.length))",
      "info" : "IfStatement[2518-2711]:IfStatement[2518-2711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2585-2711]:Block[2585-2711]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");",
      "right" : "throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");",
      "info" : "ThrowStatement[2599-2701]:ThrowStatement[2599-2701]"
    }, {
      "left" : "if (!isPositive(expected) || !isNonNegative(observed))",
      "right" : "if (!isPositive(expected) || !isNonNegative(observed))",
      "info" : "IfStatement[2720-2927]:IfStatement[2720-2927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2775-2927]:Block[2775-2927]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");",
      "right" : "throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");",
      "info" : "ThrowStatement[2789-2917]:ThrowStatement[2789-2917]"
    }, {
      "left" : "double sumSq = 0.0d;",
      "right" : "double sumSq = 0.0d;",
      "info" : "VariableDeclarationStatement[2936-2956]:VariableDeclarationStatement[3350-3370]"
    }, {
      "left" : "double dev = 0.0d;",
      "right" : "double dev = 0.0d;",
      "info" : "VariableDeclarationStatement[2965-2983]:VariableDeclarationStatement[3379-3397]"
    }, {
      "left" : "for (int i = 0; i < observed.length; i++)",
      "right" : "for (int i = 0; i < observed.length; i++)",
      "info" : "ForStatement[2992-3155]:ForStatement[3406-3759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3034-3155]:Block[3448-3759]"
    }, {
      "left" : "dev = ((double) observed[i] - expected[i]);",
      "right" : "dev = ((double) observed[i] - expected[i]);",
      "info" : "ExpressionStatement[3052-3095]:ExpressionStatement[3642-3685]"
    }, {
      "left" : "sumSq += dev * dev / expected[i];",
      "right" : "sumSq += dev * dev / expected[i];",
      "info" : "ExpressionStatement[3112-3145]:ExpressionStatement[3702-3735]"
    }, {
      "left" : "return sumSq;",
      "right" : "return sumSq;",
      "info" : "ReturnStatement[3164-3177]:ReturnStatement[3768-3781]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3709-3715]:Modifier[4313-4319]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[3716-3722]:PrimitiveType[4320-4326]"
    }, {
      "left" : "chiSquareTest",
      "right" : "chiSquareTest",
      "info" : "SimpleName[3723-3736]:SimpleName[4327-4340]"
    }, {
      "left" : "double[] expected",
      "right" : "double[] expected",
      "info" : "SingleVariableDeclaration[3737-3754]:SingleVariableDeclaration[4341-4358]"
    }, {
      "left" : "long[] observed",
      "right" : "long[] observed",
      "info" : "SingleVariableDeclaration[3756-3771]:SingleVariableDeclaration[4360-4375]"
    }, {
      "left" : "IllegalArgumentException",
      "right" : "IllegalArgumentException",
      "info" : "SimpleType[3788-3812]:SimpleType[4392-4416]"
    }, {
      "left" : "MathException",
      "right" : "MathException",
      "info" : "SimpleType[3814-3827]:SimpleType[4418-4431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3828-4001]:Block[4432-4605]"
    }, {
      "left" : "distribution.setDegreesOfFreedom(expected.length - 1.0);",
      "right" : "distribution.setDegreesOfFreedom(expected.length - 1.0);",
      "info" : "ExpressionStatement[3838-3894]:ExpressionStatement[4442-4498]"
    }, {
      "left" : "return 1.0 - distribution.cumulativeProbability(\n            chiSquare(expected, observed));",
      "right" : "return 1.0 - distribution.cumulativeProbability(\n            chiSquare(expected, observed));",
      "info" : "ReturnStatement[3903-3995]:ReturnStatement[4507-4599]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4642-4648]:Modifier[5246-5252]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[4649-4656]:PrimitiveType[5253-5260]"
    }, {
      "left" : "chiSquareTest",
      "right" : "chiSquareTest",
      "info" : "SimpleName[4657-4670]:SimpleName[5261-5274]"
    }, {
      "left" : "double[] expected",
      "right" : "double[] expected",
      "info" : "SingleVariableDeclaration[4671-4688]:SingleVariableDeclaration[5275-5292]"
    }, {
      "left" : "long[] observed",
      "right" : "long[] observed",
      "info" : "SingleVariableDeclaration[4690-4705]:SingleVariableDeclaration[5294-5309]"
    }, {
      "left" : "double alpha",
      "right" : "double alpha",
      "info" : "SingleVariableDeclaration[4720-4732]:SingleVariableDeclaration[5324-5336]"
    }, {
      "left" : "IllegalArgumentException",
      "right" : "IllegalArgumentException",
      "info" : "SimpleType[4741-4765]:SimpleType[5345-5369]"
    }, {
      "left" : "MathException",
      "right" : "MathException",
      "info" : "SimpleType[4767-4780]:SimpleType[5371-5384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4781-5008]:Block[5385-5612]"
    }, {
      "left" : "if ((alpha <= 0) || (alpha > 0.5))",
      "right" : "if ((alpha <= 0) || (alpha > 0.5))",
      "info" : "IfStatement[4791-4942]:IfStatement[5395-5546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4826-4942]:Block[5430-5546]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                    \"bad significance level: \" + alpha);",
      "right" : "throw new IllegalArgumentException(\n                    \"bad significance level: \" + alpha);",
      "info" : "ThrowStatement[4840-4932]:ThrowStatement[5444-5536]"
    }, {
      "left" : "return (chiSquareTest(expected, observed) < alpha);",
      "right" : "return (chiSquareTest(expected, observed) < alpha);",
      "info" : "ReturnStatement[4951-5002]:ReturnStatement[5555-5606]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5201-5207]:Modifier[5805-5811]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[5208-5214]:PrimitiveType[5812-5818]"
    }, {
      "left" : "chiSquare",
      "right" : "chiSquare",
      "info" : "SimpleName[5215-5224]:SimpleName[5819-5828]"
    }, {
      "left" : "long[][] counts",
      "right" : "long[][] counts",
      "info" : "SingleVariableDeclaration[5225-5240]:SingleVariableDeclaration[5829-5844]"
    }, {
      "left" : "IllegalArgumentException",
      "right" : "IllegalArgumentException",
      "info" : "SimpleType[5249-5273]:SimpleType[5853-5877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5274-6333]:Block[5878-6937]"
    }, {
      "left" : "checkArray(counts);",
      "right" : "checkArray(counts);",
      "info" : "ExpressionStatement[5293-5312]:ExpressionStatement[5897-5916]"
    }, {
      "left" : "int nRows = counts.length;",
      "right" : "int nRows = counts.length;",
      "info" : "VariableDeclarationStatement[5321-5347]:VariableDeclarationStatement[5925-5951]"
    }, {
      "left" : "int nCols = counts[0].length;",
      "right" : "int nCols = counts[0].length;",
      "info" : "VariableDeclarationStatement[5356-5385]:VariableDeclarationStatement[5960-5989]"
    }, {
      "left" : "double[] rowSum = new double[nRows];",
      "right" : "double[] rowSum = new double[nRows];",
      "info" : "VariableDeclarationStatement[5449-5485]:VariableDeclarationStatement[6053-6089]"
    }, {
      "left" : "double[] colSum = new double[nCols];",
      "right" : "double[] colSum = new double[nCols];",
      "info" : "VariableDeclarationStatement[5494-5530]:VariableDeclarationStatement[6098-6134]"
    }, {
      "left" : "double total = 0.0d;",
      "right" : "double total = 0.0d;",
      "info" : "VariableDeclarationStatement[5539-5559]:VariableDeclarationStatement[6143-6163]"
    }, {
      "left" : "for (int row = 0; row < nRows; row++)",
      "right" : "for (int row = 0; row < nRows; row++)",
      "info" : "ForStatement[5568-5851]:ForStatement[6172-6455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5606-5851]:Block[6210-6455]"
    }, {
      "left" : "for (int col = 0; col < nCols; col++)",
      "right" : "for (int col = 0; col < nCols; col++)",
      "info" : "ForStatement[5620-5841]:ForStatement[6224-6445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5658-5841]:Block[6262-6445]"
    }, {
      "left" : "rowSum[row] += (double) counts[row][col];",
      "right" : "rowSum[row] += (double) counts[row][col];",
      "info" : "ExpressionStatement[5676-5717]:ExpressionStatement[6280-6321]"
    }, {
      "left" : "colSum[col] += (double) counts[row][col];",
      "right" : "colSum[col] += (double) counts[row][col];",
      "info" : "ExpressionStatement[5734-5775]:ExpressionStatement[6338-6379]"
    }, {
      "left" : "total += (double) counts[row][col];",
      "right" : "total += (double) counts[row][col];",
      "info" : "ExpressionStatement[5792-5827]:ExpressionStatement[6396-6431]"
    }, {
      "left" : "double sumSq = 0.0d;",
      "right" : "double sumSq = 0.0d;",
      "info" : "VariableDeclarationStatement[5919-5939]:VariableDeclarationStatement[6523-6543]"
    }, {
      "left" : "double expected = 0.0d;",
      "right" : "double expected = 0.0d;",
      "info" : "VariableDeclarationStatement[5948-5971]:VariableDeclarationStatement[6552-6575]"
    }, {
      "left" : "for (int row = 0; row < nRows; row++)",
      "right" : "for (int row = 0; row < nRows; row++)",
      "info" : "ForStatement[5980-6304]:ForStatement[6584-6908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6018-6304]:Block[6622-6908]"
    }, {
      "left" : "for (int col = 0; col < nCols; col++)",
      "right" : "for (int col = 0; col < nCols; col++)",
      "info" : "ForStatement[6032-6294]:ForStatement[6636-6898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6070-6294]:Block[6674-6898]"
    }, {
      "left" : "expected = (rowSum[row] * colSum[col]) / total;",
      "right" : "expected = (rowSum[row] * colSum[col]) / total;",
      "info" : "ExpressionStatement[6088-6135]:ExpressionStatement[6692-6739]"
    }, {
      "left" : "sumSq += (((double) counts[row][col] - expected) * \n                        ((double) counts[row][col] - expected)) / expected;",
      "right" : "sumSq += (((double) counts[row][col] - expected) * \n                        ((double) counts[row][col] - expected)) / expected;",
      "info" : "ExpressionStatement[6152-6279]:ExpressionStatement[6756-6883]"
    }, {
      "left" : "return sumSq;",
      "right" : "return sumSq;",
      "info" : "ReturnStatement[6314-6327]:ReturnStatement[6918-6931]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6574-6580]:Modifier[7178-7184]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[6581-6587]:PrimitiveType[7185-7191]"
    }, {
      "left" : "chiSquareTest",
      "right" : "chiSquareTest",
      "info" : "SimpleName[6588-6601]:SimpleName[7192-7205]"
    }, {
      "left" : "long[][] counts",
      "right" : "long[][] counts",
      "info" : "SingleVariableDeclaration[6602-6617]:SingleVariableDeclaration[7206-7221]"
    }, {
      "left" : "IllegalArgumentException",
      "right" : "IllegalArgumentException",
      "info" : "SimpleType[6630-6654]:SimpleType[7234-7258]"
    }, {
      "left" : "MathException",
      "right" : "MathException",
      "info" : "SimpleType[6656-6669]:SimpleType[7260-7273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6670-6908]:Block[7274-7512]"
    }, {
      "left" : "checkArray(counts);",
      "right" : "checkArray(counts);",
      "info" : "ExpressionStatement[6680-6699]:ExpressionStatement[7284-7303]"
    }, {
      "left" : "double df = ((double) counts.length -1) * ((double) counts[0].length - 1);",
      "right" : "double df = ((double) counts.length -1) * ((double) counts[0].length - 1);",
      "info" : "VariableDeclarationStatement[6708-6782]:VariableDeclarationStatement[7312-7386]"
    }, {
      "left" : "distribution.setDegreesOfFreedom(df);",
      "right" : "distribution.setDegreesOfFreedom(df);",
      "info" : "ExpressionStatement[6791-6828]:ExpressionStatement[7395-7432]"
    }, {
      "left" : "return 1 - distribution.cumulativeProbability(chiSquare(counts));",
      "right" : "return 1 - distribution.cumulativeProbability(chiSquare(counts));",
      "info" : "ReturnStatement[6837-6902]:ReturnStatement[7441-7506]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7264-7270]:Modifier[7868-7874]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7271-7278]:PrimitiveType[7875-7882]"
    }, {
      "left" : "chiSquareTest",
      "right" : "chiSquareTest",
      "info" : "SimpleName[7279-7292]:SimpleName[7883-7896]"
    }, {
      "left" : "long[][] counts",
      "right" : "long[][] counts",
      "info" : "SingleVariableDeclaration[7293-7308]:SingleVariableDeclaration[7897-7912]"
    }, {
      "left" : "double alpha",
      "right" : "double alpha",
      "info" : "SingleVariableDeclaration[7310-7322]:SingleVariableDeclaration[7914-7926]"
    }, {
      "left" : "IllegalArgumentException",
      "right" : "IllegalArgumentException",
      "info" : "SimpleType[7335-7359]:SimpleType[7939-7963]"
    }, {
      "left" : "MathException",
      "right" : "MathException",
      "info" : "SimpleType[7361-7374]:SimpleType[7965-7978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7375-7569]:Block[7979-8173]"
    }, {
      "left" : "if ((alpha <= 0) || (alpha > 0.5))",
      "right" : "if ((alpha <= 0) || (alpha > 0.5))",
      "info" : "IfStatement[7385-7515]:IfStatement[7989-8119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7420-7515]:Block[8024-8119]"
    }, {
      "left" : "throw new IllegalArgumentException(\"bad significance level: \" + alpha);",
      "right" : "throw new IllegalArgumentException(\"bad significance level: \" + alpha);",
      "info" : "ThrowStatement[7434-7505]:ThrowStatement[8038-8109]"
    }, {
      "left" : "return (chiSquareTest(counts) < alpha);",
      "right" : "return (chiSquareTest(counts) < alpha);",
      "info" : "ReturnStatement[7524-7563]:ReturnStatement[8128-8167]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7868-7874]:Modifier[8472-8478]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[7875-7881]:PrimitiveType[8479-8485]"
    }, {
      "left" : "chiSquareDataSetsComparison",
      "right" : "chiSquareDataSetsComparison",
      "info" : "SimpleName[7882-7909]:SimpleName[8486-8513]"
    }, {
      "left" : "long[] observed1",
      "right" : "long[] observed1",
      "info" : "SingleVariableDeclaration[7910-7926]:SingleVariableDeclaration[8514-8530]"
    }, {
      "left" : "long[] observed2",
      "right" : "long[] observed2",
      "info" : "SingleVariableDeclaration[7928-7944]:SingleVariableDeclaration[8532-8548]"
    }, {
      "left" : "IllegalArgumentException",
      "right" : "IllegalArgumentException",
      "info" : "SimpleType[7961-7985]:SimpleType[8565-8589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7986-9979]:Block[8590-10583]"
    }, {
      "left" : "if ((observed1.length < 2) || (observed1.length != observed2.length))",
      "right" : "if ((observed1.length < 2) || (observed1.length != observed2.length))",
      "info" : "IfStatement[8043-8240]:IfStatement[8647-8844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8113-8240]:Block[8717-8844]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                    \"oberved1, observed2 array lengths incorrect\");",
      "right" : "throw new IllegalArgumentException(\n                    \"oberved1, observed2 array lengths incorrect\");",
      "info" : "ThrowStatement[8127-8230]:ThrowStatement[8731-8834]"
    }, {
      "left" : "if (!isNonNegative(observed1) || !isNonNegative(observed2))",
      "right" : "if (!isNonNegative(observed1) || !isNonNegative(observed2))",
      "info" : "IfStatement[8287-8463]:IfStatement[8891-9067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8347-8463]:Block[8951-9067]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"observed counts must be non-negative\");",
      "right" : "throw new IllegalArgumentException(\n                \"observed counts must be non-negative\");",
      "info" : "ThrowStatement[8361-8453]:ThrowStatement[8965-9057]"
    }, {
      "left" : "long countSum1 = 0;",
      "right" : "long countSum1 = 0;",
      "info" : "VariableDeclarationStatement[8514-8533]:VariableDeclarationStatement[9118-9137]"
    }, {
      "left" : "long countSum2 = 0;",
      "right" : "long countSum2 = 0;",
      "info" : "VariableDeclarationStatement[8542-8561]:VariableDeclarationStatement[9146-9165]"
    }, {
      "left" : "boolean unequalCounts = false;",
      "right" : "boolean unequalCounts = false;",
      "info" : "VariableDeclarationStatement[8570-8600]:VariableDeclarationStatement[9174-9204]"
    }, {
      "left" : "double weight = 0.0;",
      "right" : "double weight = 0.0;",
      "info" : "VariableDeclarationStatement[8609-8629]:VariableDeclarationStatement[9213-9233]"
    }, {
      "left" : "for (int i = 0; i < observed1.length; i++)",
      "right" : "for (int i = 0; i < observed1.length; i++)",
      "info" : "ForStatement[8638-8773]:ForStatement[9242-9377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8681-8773]:Block[9285-9377]"
    }, {
      "left" : "countSum1 += observed1[i];",
      "right" : "countSum1 += observed1[i];",
      "info" : "ExpressionStatement[8695-8721]:ExpressionStatement[9299-9325]"
    }, {
      "left" : "countSum2 += observed2[i];",
      "right" : "countSum2 += observed2[i];",
      "info" : "ExpressionStatement[8734-8760]:ExpressionStatement[9338-9364]"
    }, {
      "left" : "if (countSum1 * countSum2 == 0)",
      "right" : "if (countSum1 * countSum2 == 0)",
      "info" : "IfStatement[8830-8971]:IfStatement[9434-9575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8862-8971]:Block[9466-9575]"
    }, {
      "left" : "throw new IllegalArgumentException(\n             \"observed counts cannot all be 0\");",
      "right" : "throw new IllegalArgumentException(\n             \"observed counts cannot all be 0\");",
      "info" : "ThrowStatement[8876-8960]:ThrowStatement[9480-9564]"
    }, {
      "left" : "unequalCounts = (countSum1 != countSum2);",
      "right" : "unequalCounts = (countSum1 != countSum2);",
      "info" : "ExpressionStatement[9036-9077]:ExpressionStatement[9640-9681]"
    }, {
      "left" : "if (unequalCounts)",
      "right" : "if (unequalCounts)",
      "info" : "IfStatement[9086-9189]:IfStatement[9690-9793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9105-9189]:Block[9709-9793]"
    }, {
      "left" : "weight = Math.sqrt((double) countSum1 / (double) countSum2);",
      "right" : "weight = Math.sqrt((double) countSum1 / (double) countSum2);",
      "info" : "ExpressionStatement[9119-9179]:ExpressionStatement[9723-9783]"
    }, {
      "left" : "double sumSq = 0.0d;",
      "right" : "double sumSq = 0.0d;",
      "info" : "VariableDeclarationStatement[9237-9257]:VariableDeclarationStatement[9841-9861]"
    }, {
      "left" : "double dev = 0.0d;",
      "right" : "double dev = 0.0d;",
      "info" : "VariableDeclarationStatement[9266-9284]:VariableDeclarationStatement[9870-9888]"
    }, {
      "left" : "double obs1 = 0.0d;",
      "right" : "double obs1 = 0.0d;",
      "info" : "VariableDeclarationStatement[9293-9312]:VariableDeclarationStatement[9897-9916]"
    }, {
      "left" : "double obs2 = 0.0d;",
      "right" : "double obs2 = 0.0d;",
      "info" : "VariableDeclarationStatement[9321-9340]:VariableDeclarationStatement[9925-9944]"
    }, {
      "left" : "for (int i = 0; i < observed1.length; i++)",
      "right" : "for (int i = 0; i < observed1.length; i++)",
      "info" : "ForStatement[9349-9951]:ForStatement[9953-10555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9392-9951]:Block[9996-10555]"
    }, {
      "left" : "if (observed1[i] == 0 && observed2[i] == 0)",
      "right" : "if (observed1[i] == 0 && observed2[i] == 0)",
      "info" : "IfStatement[9406-9941]:IfStatement[10010-10545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9450-9583]:Block[10054-10187]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                        \"observed counts must not both be zero\");",
      "right" : "throw new IllegalArgumentException(\n                        \"observed counts must not both be zero\");",
      "info" : "ThrowStatement[9468-9569]:ThrowStatement[10072-10173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9589-9941]:Block[10193-10545]"
    }, {
      "left" : "obs1 = (double) observed1[i];",
      "right" : "obs1 = (double) observed1[i];",
      "info" : "ExpressionStatement[9607-9636]:ExpressionStatement[10211-10240]"
    }, {
      "left" : "obs2 = (double) observed2[i];",
      "right" : "obs2 = (double) observed2[i];",
      "info" : "ExpressionStatement[9653-9682]:ExpressionStatement[10257-10286]"
    }, {
      "left" : "if (unequalCounts)",
      "right" : "if (unequalCounts)",
      "info" : "IfStatement[9699-9873]:IfStatement[10303-10477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9718-9809]:Block[10322-10413]"
    }, {
      "left" : "dev = obs1/weight - obs2 * weight;",
      "right" : "dev = obs1/weight - obs2 * weight;",
      "info" : "ExpressionStatement[9757-9791]:ExpressionStatement[10361-10395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9815-9873]:Block[10419-10477]"
    }, {
      "left" : "dev = obs1 - obs2;",
      "right" : "dev = obs1 - obs2;",
      "info" : "ExpressionStatement[9837-9855]:ExpressionStatement[10441-10459]"
    }, {
      "left" : "sumSq += (dev * dev) / (obs1 + obs2);",
      "right" : "sumSq += (dev * dev) / (obs1 + obs2);",
      "info" : "ExpressionStatement[9890-9927]:ExpressionStatement[10494-10531]"
    }, {
      "left" : "return sumSq;",
      "right" : "return sumSq;",
      "info" : "ReturnStatement[9960-9973]:ReturnStatement[10564-10577]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10326-10332]:Modifier[10930-10936]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[10333-10339]:PrimitiveType[10937-10943]"
    }, {
      "left" : "chiSquareTestDataSetsComparison",
      "right" : "chiSquareTestDataSetsComparison",
      "info" : "SimpleName[10340-10371]:SimpleName[10944-10975]"
    }, {
      "left" : "long[] observed1",
      "right" : "long[] observed1",
      "info" : "SingleVariableDeclaration[10372-10388]:SingleVariableDeclaration[10976-10992]"
    }, {
      "left" : "long[] observed2",
      "right" : "long[] observed2",
      "info" : "SingleVariableDeclaration[10390-10406]:SingleVariableDeclaration[10994-11010]"
    }, {
      "left" : "IllegalArgumentException",
      "right" : "IllegalArgumentException",
      "info" : "SimpleType[10423-10447]:SimpleType[11027-11051]"
    }, {
      "left" : "MathException",
      "right" : "MathException",
      "info" : "SimpleType[10449-10462]:SimpleType[11053-11066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10463-10666]:Block[11067-11270]"
    }, {
      "left" : "distribution.setDegreesOfFreedom((double) observed1.length - 1);",
      "right" : "distribution.setDegreesOfFreedom((double) observed1.length - 1);",
      "info" : "ExpressionStatement[10473-10537]:ExpressionStatement[11077-11141]"
    }, {
      "left" : "return 1 - distribution.cumulativeProbability(\n                chiSquareDataSetsComparison(observed1, observed2));",
      "right" : "return 1 - distribution.cumulativeProbability(\n                chiSquareDataSetsComparison(observed1, observed2));",
      "info" : "ReturnStatement[10546-10660]:ReturnStatement[11150-11264]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11128-11134]:Modifier[11732-11738]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11135-11142]:PrimitiveType[11739-11746]"
    }, {
      "left" : "chiSquareTestDataSetsComparison",
      "right" : "chiSquareTestDataSetsComparison",
      "info" : "SimpleName[11143-11174]:SimpleName[11747-11778]"
    }, {
      "left" : "long[] observed1",
      "right" : "long[] observed1",
      "info" : "SingleVariableDeclaration[11175-11191]:SingleVariableDeclaration[11779-11795]"
    }, {
      "left" : "long[] observed2",
      "right" : "long[] observed2",
      "info" : "SingleVariableDeclaration[11193-11209]:SingleVariableDeclaration[11797-11813]"
    }, {
      "left" : "double alpha",
      "right" : "double alpha",
      "info" : "SingleVariableDeclaration[11223-11235]:SingleVariableDeclaration[11827-11839]"
    }, {
      "left" : "IllegalArgumentException",
      "right" : "IllegalArgumentException",
      "info" : "SimpleType[11244-11268]:SimpleType[11848-11872]"
    }, {
      "left" : "MathException",
      "right" : "MathException",
      "info" : "SimpleType[11270-11283]:SimpleType[11874-11887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11284-11531]:Block[11888-12135]"
    }, {
      "left" : "if ((alpha <= 0) || (alpha > 0.5))",
      "right" : "if ((alpha <= 0) || (alpha > 0.5))",
      "info" : "IfStatement[11294-11445]:IfStatement[11898-12049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11329-11445]:Block[11933-12049]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                    \"bad significance level: \" + alpha);",
      "right" : "throw new IllegalArgumentException(\n                    \"bad significance level: \" + alpha);",
      "info" : "ThrowStatement[11343-11435]:ThrowStatement[11947-12039]"
    }, {
      "left" : "return (chiSquareTestDataSetsComparison(observed1, observed2) < alpha);",
      "right" : "return (chiSquareTestDataSetsComparison(observed1, observed2) < alpha);",
      "info" : "ReturnStatement[11454-11525]:ReturnStatement[12058-12129]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11890-11897]:Modifier[12494-12501]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11898-11902]:PrimitiveType[12502-12506]"
    }, {
      "left" : "checkArray",
      "right" : "checkArray",
      "info" : "SimpleName[11903-11913]:SimpleName[12507-12517]"
    }, {
      "left" : "long[][] in",
      "right" : "long[][] in",
      "info" : "SingleVariableDeclaration[11914-11925]:SingleVariableDeclaration[12518-12529]"
    }, {
      "left" : "IllegalArgumentException",
      "right" : "IllegalArgumentException",
      "info" : "SimpleType[11934-11958]:SimpleType[12538-12562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11959-12557]:Block[12563-13161]"
    }, {
      "left" : "if (in.length < 2)",
      "right" : "if (in.length < 2)",
      "info" : "IfStatement[11978-12099]:IfStatement[12582-12703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11997-12099]:Block[12601-12703]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Input table must have at least two rows\");",
      "right" : "throw new IllegalArgumentException(\"Input table must have at least two rows\");",
      "info" : "ThrowStatement[12011-12089]:ThrowStatement[12615-12693]"
    }, {
      "left" : "if (in[0].length < 2)",
      "right" : "if (in[0].length < 2)",
      "info" : "IfStatement[12117-12244]:IfStatement[12721-12848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12139-12244]:Block[12743-12848]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Input table must have at least two columns\");",
      "right" : "throw new IllegalArgumentException(\"Input table must have at least two columns\");",
      "info" : "ThrowStatement[12153-12234]:ThrowStatement[12757-12838]"
    }, {
      "left" : "if (!isRectangular(in))",
      "right" : "if (!isRectangular(in))",
      "info" : "IfStatement[12266-12384]:IfStatement[12870-12988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12290-12384]:Block[12894-12988]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Input table must be rectangular\");",
      "right" : "throw new IllegalArgumentException(\"Input table must be rectangular\");",
      "info" : "ThrowStatement[12304-12374]:ThrowStatement[12908-12978]"
    }, {
      "left" : "if (!isNonNegative(in))",
      "right" : "if (!isNonNegative(in))",
      "info" : "IfStatement[12402-12542]:IfStatement[13006-13146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12426-12542]:Block[13030-13146]"
    }, {
      "left" : "throw new IllegalArgumentException(\"All entries in input 2-way table must be non-negative\");",
      "right" : "throw new IllegalArgumentException(\"All entries in input 2-way table must be non-negative\");",
      "info" : "ThrowStatement[12440-12532]:ThrowStatement[13044-13136]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[12866-12875]:Modifier[13470-13479]"
    }, {
      "left" : "DistributionFactory",
      "right" : "DistributionFactory",
      "info" : "SimpleType[12876-12895]:SimpleType[13480-13499]"
    }, {
      "left" : "getDistributionFactory",
      "right" : "getDistributionFactory",
      "info" : "SimpleName[12896-12918]:SimpleName[13500-13522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12921-12978]:Block[13525-13582]"
    }, {
      "left" : "return DistributionFactory.newInstance();",
      "right" : "return DistributionFactory.newInstance();",
      "info" : "ReturnStatement[12931-12972]:ReturnStatement[13535-13576]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13373-13380]:Modifier[13977-13984]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[13381-13388]:PrimitiveType[13985-13992]"
    }, {
      "left" : "isRectangular",
      "right" : "isRectangular",
      "info" : "SimpleName[13389-13402]:SimpleName[13993-14006]"
    }, {
      "left" : "long[][] in",
      "right" : "long[][] in",
      "info" : "SingleVariableDeclaration[13403-13414]:SingleVariableDeclaration[14007-14018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13416-13594]:Block[14020-14198]"
    }, {
      "left" : "for (int i = 1; i < in.length; i++)",
      "right" : "for (int i = 1; i < in.length; i++)",
      "info" : "ForStatement[13426-13565]:ForStatement[14030-14169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13462-13565]:Block[14066-14169]"
    }, {
      "left" : "if (in[i].length != in[0].length)",
      "right" : "if (in[i].length != in[0].length)",
      "info" : "IfStatement[13476-13555]:IfStatement[14080-14159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13510-13555]:Block[14114-14159]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13528-13541]:ReturnStatement[14132-14145]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[13576-13588]:ReturnStatement[14180-14192]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13904-13911]:Modifier[14508-14515]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[13912-13919]:PrimitiveType[14516-14523]"
    }, {
      "left" : "isPositive",
      "right" : "isPositive",
      "info" : "SimpleName[13920-13930]:SimpleName[14524-14534]"
    }, {
      "left" : "double[] in",
      "right" : "double[] in",
      "info" : "SingleVariableDeclaration[13931-13942]:SingleVariableDeclaration[14535-14546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13944-14103]:Block[14548-14707]"
    }, {
      "left" : "for (int i = 0; i < in.length; i ++)",
      "right" : "for (int i = 0; i < in.length; i ++)",
      "info" : "ForStatement[13954-14076]:ForStatement[14558-14680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13991-14076]:Block[14595-14680]"
    }, {
      "left" : "if (in[i] <= 0)",
      "right" : "if (in[i] <= 0)",
      "info" : "IfStatement[14005-14066]:IfStatement[14609-14670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14021-14066]:Block[14625-14670]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14039-14052]:ReturnStatement[14643-14656]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[14085-14097]:ReturnStatement[14689-14701]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14418-14425]:Modifier[15022-15029]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[14426-14433]:PrimitiveType[15030-15037]"
    }, {
      "left" : "isNonNegative",
      "right" : "isNonNegative",
      "info" : "SimpleName[14434-14447]:SimpleName[15038-15051]"
    }, {
      "left" : "long[] in",
      "right" : "long[] in",
      "info" : "SingleVariableDeclaration[14448-14457]:SingleVariableDeclaration[15052-15061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14459-14617]:Block[15063-15221]"
    }, {
      "left" : "for (int i = 0; i < in.length; i ++)",
      "right" : "for (int i = 0; i < in.length; i ++)",
      "info" : "ForStatement[14469-14590]:ForStatement[15073-15194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14506-14590]:Block[15110-15194]"
    }, {
      "left" : "if (in[i] < 0)",
      "right" : "if (in[i] < 0)",
      "info" : "IfStatement[14520-14580]:IfStatement[15124-15184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14535-14580]:Block[15139-15184]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14553-14566]:ReturnStatement[15157-15170]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[14599-14611]:ReturnStatement[15203-15215]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14951-14958]:Modifier[15555-15562]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[14959-14966]:PrimitiveType[15563-15570]"
    }, {
      "left" : "isNonNegative",
      "right" : "isNonNegative",
      "info" : "SimpleName[14967-14980]:SimpleName[15571-15584]"
    }, {
      "left" : "long[][] in",
      "right" : "long[][] in",
      "info" : "SingleVariableDeclaration[14981-14992]:SingleVariableDeclaration[15585-15596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14994-15234]:Block[15598-15838]"
    }, {
      "left" : "for (int i = 0; i < in.length; i ++)",
      "right" : "for (int i = 0; i < in.length; i ++)",
      "info" : "ForStatement[15004-15207]:ForStatement[15608-15811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15041-15207]:Block[15645-15811]"
    }, {
      "left" : "for (int j = 0; j < in[i].length; j++)",
      "right" : "for (int j = 0; j < in[i].length; j++)",
      "info" : "ForStatement[15055-15197]:ForStatement[15659-15801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15094-15197]:Block[15698-15801]"
    }, {
      "left" : "if (in[i][j] < 0)",
      "right" : "if (in[i][j] < 0)",
      "info" : "IfStatement[15112-15183]:IfStatement[15716-15787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15130-15183]:Block[15734-15787]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15152-15165]:ReturnStatement[15756-15769]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15216-15228]:ReturnStatement[15820-15832]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15411-15417]:Modifier[16015-16021]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15418-15422]:PrimitiveType[16022-16026]"
    }, {
      "left" : "setDistribution",
      "right" : "setDistribution",
      "info" : "SimpleName[15423-15438]:SimpleName[16027-16042]"
    }, {
      "left" : "ChiSquaredDistribution value",
      "right" : "ChiSquaredDistribution value",
      "info" : "SingleVariableDeclaration[15439-15467]:SingleVariableDeclaration[16043-16071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15469-15506]:Block[16073-16110]"
    }, {
      "left" : "distribution = value;",
      "right" : "distribution = value;",
      "info" : "ExpressionStatement[15479-15500]:ExpressionStatement[16083-16104]"
    } ]
  },
  "interFileMappings" : { }
}