{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "BaseSecantSolver",
      "right" : "BaseSecantSolver",
      "info" : "TypeDeclaration[1089-9972]:TypeDeclaration[1089-10087]"
    }, {
      "left" : "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;",
      "right" : "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;",
      "info" : "FieldDeclaration[2265-2366]:FieldDeclaration[2265-2366]"
    }, {
      "left" : "private AllowedSolution allowed;",
      "right" : "private AllowedSolution allowed;",
      "info" : "FieldDeclaration[2372-2469]:FieldDeclaration[2372-2469]"
    }, {
      "left" : "private final Method method;",
      "right" : "private final Method method;",
      "info" : "FieldDeclaration[2475-2568]:FieldDeclaration[2475-2568]"
    }, {
      "left" : "protected BaseSecantSolver(final double absoluteAccuracy, final Method method)",
      "right" : "protected BaseSecantSolver(final double absoluteAccuracy, final Method method)",
      "info" : "MethodDeclaration[2574-2943]:MethodDeclaration[2574-2943]"
    }, {
      "left" : "protected BaseSecantSolver(final double relativeAccuracy,\n                               final double absoluteAccuracy,\n                               final Method method)",
      "right" : "protected BaseSecantSolver(final double relativeAccuracy,\n                               final double absoluteAccuracy,\n                               final Method method)",
      "info" : "MethodDeclaration[2949-3479]:MethodDeclaration[2949-3479]"
    }, {
      "left" : "protected BaseSecantSolver(final double relativeAccuracy,\n                               final double absoluteAccuracy,\n                               final double functionValueAccuracy,\n                               final Method method)",
      "right" : "protected BaseSecantSolver(final double relativeAccuracy,\n                               final double absoluteAccuracy,\n                               final double functionValueAccuracy,\n                               final Method method)",
      "info" : "MethodDeclaration[3485-4180]:MethodDeclaration[3485-4180]"
    }, {
      "left" : "public double solve(final int maxEval, final UnivariateRealFunction f,\n                        final double min, final double max,\n                        final AllowedSolution allowedSolution)",
      "right" : "public double solve(final int maxEval, final UnivariateRealFunction f,\n                        final double min, final double max,\n                        final AllowedSolution allowedSolution)",
      "info" : "MethodDeclaration[4186-4498]:MethodDeclaration[4186-4498]"
    }, {
      "left" : "public double solve(final int maxEval, final UnivariateRealFunction f,\n                        final double min, final double max, final double startValue,\n                        final AllowedSolution allowedSolution)",
      "right" : "public double solve(final int maxEval, final UnivariateRealFunction f,\n                        final double min, final double max, final double startValue,\n                        final AllowedSolution allowedSolution)",
      "info" : "MethodDeclaration[4504-4857]:MethodDeclaration[4504-4857]"
    }, {
      "left" : "public double solve(final int maxEval, final UnivariateRealFunction f,\n                        final double min, final double max, final double startValue)",
      "right" : "public double solve(final int maxEval, final UnivariateRealFunction f,\n                        final double min, final double max, final double startValue)",
      "info" : "MethodDeclaration[4863-5147]:MethodDeclaration[4863-5147]"
    }, {
      "left" : "protected final double doSolve()",
      "right" : "protected final double doSolve()",
      "info" : "MethodDeclaration[5153-9552]:MethodDeclaration[5153-9667]"
    }, {
      "left" : "enum : Method",
      "right" : "enum : Method",
      "info" : "EnumDeclaration[9558-9970]:EnumDeclaration[9673-10085]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2109-2115]:Modifier[2109-2115]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[2116-2124]:Modifier[2116-2124]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2125-2130]:TYPE_DECLARATION_KIND[2125-2130]"
    }, {
      "left" : "BaseSecantSolver",
      "right" : "BaseSecantSolver",
      "info" : "SimpleName[2131-2147]:SimpleName[2131-2147]"
    }, {
      "left" : "AbstractUnivariateRealSolver",
      "right" : "AbstractUnivariateRealSolver",
      "info" : "SimpleType[2160-2188]:SimpleType[2160-2188]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[2745-2754]:Modifier[2745-2754]"
    }, {
      "left" : "BaseSecantSolver",
      "right" : "BaseSecantSolver",
      "info" : "SimpleName[2755-2771]:SimpleName[2755-2771]"
    }, {
      "left" : "final double absoluteAccuracy",
      "right" : "final double absoluteAccuracy",
      "info" : "SingleVariableDeclaration[2772-2801]:SingleVariableDeclaration[2772-2801]"
    }, {
      "left" : "final Method method",
      "right" : "final Method method",
      "info" : "SingleVariableDeclaration[2803-2822]:SingleVariableDeclaration[2803-2822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2824-2943]:Block[2824-2943]"
    }, {
      "left" : "super(absoluteAccuracy);",
      "right" : "super(absoluteAccuracy);",
      "info" : "SuperConstructorInvocation[2834-2858]:SuperConstructorInvocation[2834-2858]"
    }, {
      "left" : "this.allowed = AllowedSolution.ANY_SIDE;",
      "right" : "this.allowed = AllowedSolution.ANY_SIDE;",
      "info" : "ExpressionStatement[2867-2907]:ExpressionStatement[2867-2907]"
    }, {
      "left" : "this.method = method;",
      "right" : "this.method = method;",
      "info" : "ExpressionStatement[2916-2937]:ExpressionStatement[2916-2937]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[3170-3179]:Modifier[3170-3179]"
    }, {
      "left" : "BaseSecantSolver",
      "right" : "BaseSecantSolver",
      "info" : "SimpleName[3180-3196]:SimpleName[3180-3196]"
    }, {
      "left" : "final double relativeAccuracy",
      "right" : "final double relativeAccuracy",
      "info" : "SingleVariableDeclaration[3197-3226]:SingleVariableDeclaration[3197-3226]"
    }, {
      "left" : "final double absoluteAccuracy",
      "right" : "final double absoluteAccuracy",
      "info" : "SingleVariableDeclaration[3259-3288]:SingleVariableDeclaration[3259-3288]"
    }, {
      "left" : "final Method method",
      "right" : "final Method method",
      "info" : "SingleVariableDeclaration[3321-3340]:SingleVariableDeclaration[3321-3340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3342-3479]:Block[3342-3479]"
    }, {
      "left" : "super(relativeAccuracy, absoluteAccuracy);",
      "right" : "super(relativeAccuracy, absoluteAccuracy);",
      "info" : "SuperConstructorInvocation[3352-3394]:SuperConstructorInvocation[3352-3394]"
    }, {
      "left" : "this.allowed = AllowedSolution.ANY_SIDE;",
      "right" : "this.allowed = AllowedSolution.ANY_SIDE;",
      "info" : "ExpressionStatement[3403-3443]:ExpressionStatement[3403-3443]"
    }, {
      "left" : "this.method = method;",
      "right" : "this.method = method;",
      "info" : "ExpressionStatement[3452-3473]:ExpressionStatement[3452-3473]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[3781-3790]:Modifier[3781-3790]"
    }, {
      "left" : "BaseSecantSolver",
      "right" : "BaseSecantSolver",
      "info" : "SimpleName[3791-3807]:SimpleName[3791-3807]"
    }, {
      "left" : "final double relativeAccuracy",
      "right" : "final double relativeAccuracy",
      "info" : "SingleVariableDeclaration[3808-3837]:SingleVariableDeclaration[3808-3837]"
    }, {
      "left" : "final double absoluteAccuracy",
      "right" : "final double absoluteAccuracy",
      "info" : "SingleVariableDeclaration[3870-3899]:SingleVariableDeclaration[3870-3899]"
    }, {
      "left" : "final double functionValueAccuracy",
      "right" : "final double functionValueAccuracy",
      "info" : "SingleVariableDeclaration[3932-3966]:SingleVariableDeclaration[3932-3966]"
    }, {
      "left" : "final Method method",
      "right" : "final Method method",
      "info" : "SingleVariableDeclaration[3999-4018]:SingleVariableDeclaration[3999-4018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4020-4180]:Block[4020-4180]"
    }, {
      "left" : "super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",
      "right" : "super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",
      "info" : "SuperConstructorInvocation[4030-4095]:SuperConstructorInvocation[4030-4095]"
    }, {
      "left" : "this.allowed = AllowedSolution.ANY_SIDE;",
      "right" : "this.allowed = AllowedSolution.ANY_SIDE;",
      "info" : "ExpressionStatement[4104-4144]:ExpressionStatement[4104-4144]"
    }, {
      "left" : "this.method = method;",
      "right" : "this.method = method;",
      "info" : "ExpressionStatement[4153-4174]:ExpressionStatement[4153-4174]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4211-4217]:Modifier[4211-4217]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[4218-4224]:PrimitiveType[4218-4224]"
    }, {
      "left" : "solve",
      "right" : "solve",
      "info" : "SimpleName[4225-4230]:SimpleName[4225-4230]"
    }, {
      "left" : "final int maxEval",
      "right" : "final int maxEval",
      "info" : "SingleVariableDeclaration[4231-4248]:SingleVariableDeclaration[4231-4248]"
    }, {
      "left" : "final UnivariateRealFunction f",
      "right" : "final UnivariateRealFunction f",
      "info" : "SingleVariableDeclaration[4250-4280]:SingleVariableDeclaration[4250-4280]"
    }, {
      "left" : "final double min",
      "right" : "final double min",
      "info" : "SingleVariableDeclaration[4306-4322]:SingleVariableDeclaration[4306-4322]"
    }, {
      "left" : "final double max",
      "right" : "final double max",
      "info" : "SingleVariableDeclaration[4324-4340]:SingleVariableDeclaration[4324-4340]"
    }, {
      "left" : "final AllowedSolution allowedSolution",
      "right" : "final AllowedSolution allowedSolution",
      "info" : "SingleVariableDeclaration[4366-4403]:SingleVariableDeclaration[4366-4403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4405-4498]:Block[4405-4498]"
    }, {
      "left" : "return solve(maxEval, f, min, max, min + 0.5 * (max - min), allowedSolution);",
      "right" : "return solve(maxEval, f, min, max, min + 0.5 * (max - min), allowedSolution);",
      "info" : "ReturnStatement[4415-4492]:ReturnStatement[4415-4492]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4529-4535]:Modifier[4529-4535]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[4536-4542]:PrimitiveType[4536-4542]"
    }, {
      "left" : "solve",
      "right" : "solve",
      "info" : "SimpleName[4543-4548]:SimpleName[4543-4548]"
    }, {
      "left" : "final int maxEval",
      "right" : "final int maxEval",
      "info" : "SingleVariableDeclaration[4549-4566]:SingleVariableDeclaration[4549-4566]"
    }, {
      "left" : "final UnivariateRealFunction f",
      "right" : "final UnivariateRealFunction f",
      "info" : "SingleVariableDeclaration[4568-4598]:SingleVariableDeclaration[4568-4598]"
    }, {
      "left" : "final double min",
      "right" : "final double min",
      "info" : "SingleVariableDeclaration[4624-4640]:SingleVariableDeclaration[4624-4640]"
    }, {
      "left" : "final double max",
      "right" : "final double max",
      "info" : "SingleVariableDeclaration[4642-4658]:SingleVariableDeclaration[4642-4658]"
    }, {
      "left" : "final double startValue",
      "right" : "final double startValue",
      "info" : "SingleVariableDeclaration[4660-4683]:SingleVariableDeclaration[4660-4683]"
    }, {
      "left" : "final AllowedSolution allowedSolution",
      "right" : "final AllowedSolution allowedSolution",
      "info" : "SingleVariableDeclaration[4709-4746]:SingleVariableDeclaration[4709-4746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4748-4857]:Block[4748-4857]"
    }, {
      "left" : "this.allowed = allowedSolution;",
      "right" : "this.allowed = allowedSolution;",
      "info" : "ExpressionStatement[4758-4789]:ExpressionStatement[4758-4789]"
    }, {
      "left" : "return super.solve(maxEval, f, min, max, startValue);",
      "right" : "return super.solve(maxEval, f, min, max, startValue);",
      "info" : "ReturnStatement[4798-4851]:ReturnStatement[4798-4851]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4888-4897]:MarkerAnnotation[4888-4897]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4902-4908]:Modifier[4902-4908]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[4909-4915]:PrimitiveType[4909-4915]"
    }, {
      "left" : "solve",
      "right" : "solve",
      "info" : "SimpleName[4916-4921]:SimpleName[4916-4921]"
    }, {
      "left" : "final int maxEval",
      "right" : "final int maxEval",
      "info" : "SingleVariableDeclaration[4922-4939]:SingleVariableDeclaration[4922-4939]"
    }, {
      "left" : "final UnivariateRealFunction f",
      "right" : "final UnivariateRealFunction f",
      "info" : "SingleVariableDeclaration[4941-4971]:SingleVariableDeclaration[4941-4971]"
    }, {
      "left" : "final double min",
      "right" : "final double min",
      "info" : "SingleVariableDeclaration[4997-5013]:SingleVariableDeclaration[4997-5013]"
    }, {
      "left" : "final double max",
      "right" : "final double max",
      "info" : "SingleVariableDeclaration[5015-5031]:SingleVariableDeclaration[5015-5031]"
    }, {
      "left" : "final double startValue",
      "right" : "final double startValue",
      "info" : "SingleVariableDeclaration[5033-5056]:SingleVariableDeclaration[5033-5056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5058-5147]:Block[5058-5147]"
    }, {
      "left" : "return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);",
      "right" : "return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);",
      "info" : "ReturnStatement[5068-5141]:ReturnStatement[5068-5141]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[5178-5187]:Modifier[5178-5187]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[5188-5193]:Modifier[5188-5193]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[5194-5200]:PrimitiveType[5194-5200]"
    }, {
      "left" : "doSolve",
      "right" : "doSolve",
      "info" : "SimpleName[5201-5208]:SimpleName[5201-5208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5211-9552]:Block[5211-9667]"
    }, {
      "left" : "double x0 = getMin();",
      "right" : "double x0 = getMin();",
      "info" : "VariableDeclarationStatement[5253-5274]:VariableDeclarationStatement[5253-5274]"
    }, {
      "left" : "double x1 = getMax();",
      "right" : "double x1 = getMax();",
      "info" : "VariableDeclarationStatement[5283-5304]:VariableDeclarationStatement[5283-5304]"
    }, {
      "left" : "double f0 = computeObjectiveValue(x0);",
      "right" : "double f0 = computeObjectiveValue(x0);",
      "info" : "VariableDeclarationStatement[5313-5351]:VariableDeclarationStatement[5313-5351]"
    }, {
      "left" : "double f1 = computeObjectiveValue(x1);",
      "right" : "double f1 = computeObjectiveValue(x1);",
      "info" : "VariableDeclarationStatement[5360-5398]:VariableDeclarationStatement[5360-5398]"
    }, {
      "left" : "if (f0 == 0.0)",
      "right" : "if (f0 == 0.0)",
      "info" : "IfStatement[5613-5662]:IfStatement[5613-5662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5628-5662]:Block[5628-5662]"
    }, {
      "left" : "return x0;",
      "right" : "return x0;",
      "info" : "ReturnStatement[5642-5652]:ReturnStatement[5642-5652]"
    }, {
      "left" : "if (f1 == 0.0)",
      "right" : "if (f1 == 0.0)",
      "info" : "IfStatement[5671-5720]:IfStatement[5671-5720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5686-5720]:Block[5686-5720]"
    }, {
      "left" : "return x1;",
      "right" : "return x1;",
      "info" : "ReturnStatement[5700-5710]:ReturnStatement[5700-5710]"
    }, {
      "left" : "verifyBracketing(x0, x1);",
      "right" : "verifyBracketing(x0, x1);",
      "info" : "ExpressionStatement[5780-5805]:ExpressionStatement[5780-5805]"
    }, {
      "left" : "final double ftol = getFunctionValueAccuracy();",
      "right" : "final double ftol = getFunctionValueAccuracy();",
      "info" : "VariableDeclarationStatement[5842-5889]:VariableDeclarationStatement[5842-5889]"
    }, {
      "left" : "final double atol = getAbsoluteAccuracy();",
      "right" : "final double atol = getAbsoluteAccuracy();",
      "info" : "VariableDeclarationStatement[5898-5940]:VariableDeclarationStatement[5898-5940]"
    }, {
      "left" : "final double rtol = getRelativeAccuracy();",
      "right" : "final double rtol = getRelativeAccuracy();",
      "info" : "VariableDeclarationStatement[5949-5991]:VariableDeclarationStatement[5949-5991]"
    }, {
      "left" : "boolean inverted = false;",
      "right" : "boolean inverted = false;",
      "info" : "VariableDeclarationStatement[6117-6142]:VariableDeclarationStatement[6117-6142]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[6199-9546]:WhileStatement[6199-9661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6212-9546]:Block[6212-9661]"
    }, {
      "left" : "final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));",
      "right" : "final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));",
      "info" : "VariableDeclarationStatement[6275-6328]:VariableDeclarationStatement[6275-6328]"
    }, {
      "left" : "final double fx = computeObjectiveValue(x);",
      "right" : "final double fx = computeObjectiveValue(x);",
      "info" : "VariableDeclarationStatement[6341-6384]:VariableDeclarationStatement[6341-6384]"
    }, {
      "left" : "if (fx == 0.0)",
      "right" : "if (fx == 0.0)",
      "info" : "IfStatement[6619-6675]:IfStatement[6619-6675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6634-6675]:Block[6634-6675]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[6652-6661]:ReturnStatement[6652-6661]"
    }, {
      "left" : "if (f1 * fx < 0)",
      "right" : "if (f1 * fx < 0)",
      "info" : "IfStatement[6750-7585]:IfStatement[6750-7700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6767-6986]:Block[6767-6986]"
    }, {
      "left" : "x0 = x1;",
      "right" : "x0 = x1;",
      "info" : "ExpressionStatement[6901-6909]:ExpressionStatement[6901-6909]"
    }, {
      "left" : "f0 = f1;",
      "right" : "f0 = f1;",
      "info" : "ExpressionStatement[6926-6934]:ExpressionStatement[6926-6934]"
    }, {
      "left" : "inverted = !inverted;",
      "right" : "inverted = !inverted;",
      "info" : "ExpressionStatement[6951-6972]:ExpressionStatement[6951-6972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6992-7585]:Block[6992-7700]"
    }, {
      "left" : "switch (method) {\n                case ILLINOIS:\n                    f0 *= 0.5;\n                    break;\n                case PEGASUS:\n                    f0 *= f1 / (f1 + fx);\n                    break;\n                case REGULA_FALSI:\n                    // Detect early that algorithm is stuck, instead of waiting\n                    // for the maximum number of iterations to be exceeded.\n                    break;\n                default:\n                    // Should never happen.\n                    throw new MathInternalError();\n                }",
      "right" : "switch (method) {\n                case ILLINOIS:\n                    f0 *= 0.5;\n                    break;\n                case PEGASUS:\n                    f0 *= f1 / (f1 + fx);\n                    break;\n                case REGULA_FALSI:\n                    // Detect early that algorithm is stuck, instead of waiting\n                    // for the maximum number of iterations to be exceeded.\n                    if (x == x1) {\n                        throw new ConvergenceException();\n                    }\n                    break;\n                default:\n                    // Should never happen.\n                    throw new MathInternalError();\n                }",
      "info" : "SwitchStatement[7010-7571]:SwitchStatement[7010-7686]"
    }, {
      "left" : "case ILLINOIS:",
      "right" : "case ILLINOIS:",
      "info" : "SwitchCase[7044-7058]:SwitchCase[7044-7058]"
    }, {
      "left" : "f0 *= 0.5;",
      "right" : "f0 *= 0.5;",
      "info" : "ExpressionStatement[7079-7089]:ExpressionStatement[7079-7089]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7110-7116]:BreakStatement[7110-7116]"
    }, {
      "left" : "case PEGASUS:",
      "right" : "case PEGASUS:",
      "info" : "SwitchCase[7133-7146]:SwitchCase[7133-7146]"
    }, {
      "left" : "f0 *= f1 / (f1 + fx);",
      "right" : "f0 *= f1 / (f1 + fx);",
      "info" : "ExpressionStatement[7167-7188]:ExpressionStatement[7167-7188]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7209-7215]:BreakStatement[7209-7215]"
    }, {
      "left" : "case REGULA_FALSI:",
      "right" : "case REGULA_FALSI:",
      "info" : "SwitchCase[7232-7250]:SwitchCase[7232-7250]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7427-7433]:BreakStatement[7542-7548]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[7450-7458]:SwitchCase[7565-7573]"
    }, {
      "left" : "throw new MathInternalError();",
      "right" : "throw new MathInternalError();",
      "info" : "ThrowStatement[7523-7553]:ThrowStatement[7638-7668]"
    }, {
      "left" : "x1 = x;",
      "right" : "x1 = x;",
      "info" : "ExpressionStatement[7646-7653]:ExpressionStatement[7761-7768]"
    }, {
      "left" : "f1 = fx;",
      "right" : "f1 = fx;",
      "info" : "ExpressionStatement[7666-7674]:ExpressionStatement[7781-7789]"
    }, {
      "left" : "if (FastMath.abs(f1) <= ftol)",
      "right" : "if (FastMath.abs(f1) <= ftol)",
      "info" : "IfStatement[7888-8734]:IfStatement[8003-8849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7918-8734]:Block[8033-8849]"
    }, {
      "left" : "switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    if (inverted) {\n                        return x1;\n                    }\n                    break;\n                case RIGHT_SIDE:\n                    if (!inverted) {\n                        return x1;\n                    }\n                    break;\n                case BELOW_SIDE:\n                    if (f1 <= 0) {\n                        return x1;\n                    }\n                    break;\n                case ABOVE_SIDE:\n                    if (f1 >= 0) {\n                        return x1;\n                    }\n                    break;\n                default:\n                    throw new MathInternalError();\n                }",
      "right" : "switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    if (inverted) {\n                        return x1;\n                    }\n                    break;\n                case RIGHT_SIDE:\n                    if (!inverted) {\n                        return x1;\n                    }\n                    break;\n                case BELOW_SIDE:\n                    if (f1 <= 0) {\n                        return x1;\n                    }\n                    break;\n                case ABOVE_SIDE:\n                    if (f1 >= 0) {\n                        return x1;\n                    }\n                    break;\n                default:\n                    throw new MathInternalError();\n                }",
      "info" : "SwitchStatement[7936-8720]:SwitchStatement[8051-8835]"
    }, {
      "left" : "case ANY_SIDE:",
      "right" : "case ANY_SIDE:",
      "info" : "SwitchCase[7971-7985]:SwitchCase[8086-8100]"
    }, {
      "left" : "return x1;",
      "right" : "return x1;",
      "info" : "ReturnStatement[8006-8016]:ReturnStatement[8121-8131]"
    }, {
      "left" : "case LEFT_SIDE:",
      "right" : "case LEFT_SIDE:",
      "info" : "SwitchCase[8033-8048]:SwitchCase[8148-8163]"
    }, {
      "left" : "if (inverted)",
      "right" : "if (inverted)",
      "info" : "IfStatement[8069-8141]:IfStatement[8184-8256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8083-8141]:Block[8198-8256]"
    }, {
      "left" : "return x1;",
      "right" : "return x1;",
      "info" : "ReturnStatement[8109-8119]:ReturnStatement[8224-8234]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8162-8168]:BreakStatement[8277-8283]"
    }, {
      "left" : "case RIGHT_SIDE:",
      "right" : "case RIGHT_SIDE:",
      "info" : "SwitchCase[8185-8201]:SwitchCase[8300-8316]"
    }, {
      "left" : "if (!inverted)",
      "right" : "if (!inverted)",
      "info" : "IfStatement[8222-8295]:IfStatement[8337-8410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8237-8295]:Block[8352-8410]"
    }, {
      "left" : "return x1;",
      "right" : "return x1;",
      "info" : "ReturnStatement[8263-8273]:ReturnStatement[8378-8388]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8316-8322]:BreakStatement[8431-8437]"
    }, {
      "left" : "case BELOW_SIDE:",
      "right" : "case BELOW_SIDE:",
      "info" : "SwitchCase[8339-8355]:SwitchCase[8454-8470]"
    }, {
      "left" : "if (f1 <= 0)",
      "right" : "if (f1 <= 0)",
      "info" : "IfStatement[8376-8447]:IfStatement[8491-8562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8389-8447]:Block[8504-8562]"
    }, {
      "left" : "return x1;",
      "right" : "return x1;",
      "info" : "ReturnStatement[8415-8425]:ReturnStatement[8530-8540]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8468-8474]:BreakStatement[8583-8589]"
    }, {
      "left" : "case ABOVE_SIDE:",
      "right" : "case ABOVE_SIDE:",
      "info" : "SwitchCase[8491-8507]:SwitchCase[8606-8622]"
    }, {
      "left" : "if (f1 >= 0)",
      "right" : "if (f1 >= 0)",
      "info" : "IfStatement[8528-8599]:IfStatement[8643-8714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8541-8599]:Block[8656-8714]"
    }, {
      "left" : "return x1;",
      "right" : "return x1;",
      "info" : "ReturnStatement[8567-8577]:ReturnStatement[8682-8692]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8620-8626]:BreakStatement[8735-8741]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[8643-8651]:SwitchCase[8758-8766]"
    }, {
      "left" : "throw new MathInternalError();",
      "right" : "throw new MathInternalError();",
      "info" : "ThrowStatement[8672-8702]:ThrowStatement[8787-8817]"
    }, {
      "left" : "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                     atol))",
      "right" : "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                     atol))",
      "info" : "IfStatement[8883-9536]:IfStatement[8998-9651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9009-9536]:Block[9124-9651]"
    }, {
      "left" : "switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    return inverted ? x1 : x0;\n                case RIGHT_SIDE:\n                    return inverted ? x0 : x1;\n                case BELOW_SIDE:\n                    return (f1 <= 0) ? x1 : x0;\n                case ABOVE_SIDE:\n                    return (f1 >= 0) ? x1 : x0;\n                default:\n                    throw new MathInternalError();\n                }",
      "right" : "switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    return inverted ? x1 : x0;\n                case RIGHT_SIDE:\n                    return inverted ? x0 : x1;\n                case BELOW_SIDE:\n                    return (f1 <= 0) ? x1 : x0;\n                case ABOVE_SIDE:\n                    return (f1 >= 0) ? x1 : x0;\n                default:\n                    throw new MathInternalError();\n                }",
      "info" : "SwitchStatement[9027-9522]:SwitchStatement[9142-9637]"
    }, {
      "left" : "case ANY_SIDE:",
      "right" : "case ANY_SIDE:",
      "info" : "SwitchCase[9062-9076]:SwitchCase[9177-9191]"
    }, {
      "left" : "return x1;",
      "right" : "return x1;",
      "info" : "ReturnStatement[9097-9107]:ReturnStatement[9212-9222]"
    }, {
      "left" : "case LEFT_SIDE:",
      "right" : "case LEFT_SIDE:",
      "info" : "SwitchCase[9124-9139]:SwitchCase[9239-9254]"
    }, {
      "left" : "return inverted ? x1 : x0;",
      "right" : "return inverted ? x1 : x0;",
      "info" : "ReturnStatement[9160-9186]:ReturnStatement[9275-9301]"
    }, {
      "left" : "case RIGHT_SIDE:",
      "right" : "case RIGHT_SIDE:",
      "info" : "SwitchCase[9203-9219]:SwitchCase[9318-9334]"
    }, {
      "left" : "return inverted ? x0 : x1;",
      "right" : "return inverted ? x0 : x1;",
      "info" : "ReturnStatement[9240-9266]:ReturnStatement[9355-9381]"
    }, {
      "left" : "case BELOW_SIDE:",
      "right" : "case BELOW_SIDE:",
      "info" : "SwitchCase[9283-9299]:SwitchCase[9398-9414]"
    }, {
      "left" : "return (f1 <= 0) ? x1 : x0;",
      "right" : "return (f1 <= 0) ? x1 : x0;",
      "info" : "ReturnStatement[9320-9347]:ReturnStatement[9435-9462]"
    }, {
      "left" : "case ABOVE_SIDE:",
      "right" : "case ABOVE_SIDE:",
      "info" : "SwitchCase[9364-9380]:SwitchCase[9479-9495]"
    }, {
      "left" : "return (f1 >= 0) ? x1 : x0;",
      "right" : "return (f1 >= 0) ? x1 : x0;",
      "info" : "ReturnStatement[9401-9428]:ReturnStatement[9516-9543]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[9445-9453]:SwitchCase[9560-9568]"
    }, {
      "left" : "throw new MathInternalError();",
      "right" : "throw new MathInternalError();",
      "info" : "ThrowStatement[9474-9504]:ThrowStatement[9589-9619]"
    } ]
  },
  "interFileMappings" : { }
}