{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "enum : TokeniserState",
      "right" : "enum : TokeniserState",
      "info" : "EnumDeclaration[27-61029]:EnumDeclaration[27-61323]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[220-971]:MethodDeclaration[220-971]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[1044-1297]:MethodDeclaration[1044-1297]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[1374-2137]:MethodDeclaration[1374-2137]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[2186-2441]:MethodDeclaration[2186-2441]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[2471-3108]:MethodDeclaration[2471-3108]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[3141-3781]:MethodDeclaration[3141-3781]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[3813-4327]:MethodDeclaration[3813-4327]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[4383-5206]:MethodDeclaration[4383-5206]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[5239-5781]:MethodDeclaration[5239-5781]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[5879-6988]:MethodDeclaration[5879-6988]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[7547-7991]:MethodDeclaration[7841-8285]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[8030-9300]:MethodDeclaration[8324-9594]"
    }, {
      "left" : "private void anythingElse(Tokeniser t, CharacterReader r)",
      "right" : "private void anythingElse(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[9310-9465]:MethodDeclaration[9604-9759]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[9507-9791]:MethodDeclaration[9801-10085]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[9831-10117]:MethodDeclaration[10125-10411]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[10157-11557]:MethodDeclaration[10451-11851]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[11602-12138]:MethodDeclaration[11896-12432]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[12181-12474]:MethodDeclaration[12475-12768]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[12517-13920]:MethodDeclaration[12811-14214]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[13964-14221]:MethodDeclaration[14258-14515]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[14269-14526]:MethodDeclaration[14563-14820]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[14566-15383]:MethodDeclaration[14860-15677]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[15427-16256]:MethodDeclaration[15721-16550]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[16304-17202]:MethodDeclaration[16598-17496]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[17254-17822]:MethodDeclaration[17548-18116]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[17872-18315]:MethodDeclaration[18166-18609]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[18365-19804]:MethodDeclaration[18659-20098]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[19854-20741]:MethodDeclaration[20148-21035]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[20787-21660]:MethodDeclaration[21081-21954]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[21710-22585]:MethodDeclaration[22004-22879]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[22639-23550]:MethodDeclaration[22933-23844]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[23608-23916]:MethodDeclaration[23902-24210]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[23964-24857]:MethodDeclaration[24258-25151]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[24928-26309]:MethodDeclaration[25222-26603]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[26383-27744]:MethodDeclaration[26677-28038]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[27785-29245]:MethodDeclaration[28079-29539]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[29288-30857]:MethodDeclaration[29582-31151]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[30907-31984]:MethodDeclaration[31201-32278]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[32034-33114]:MethodDeclaration[32328-33408]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[33160-34745]:MethodDeclaration[33454-35039]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[34857-35695]:MethodDeclaration[35151-35989]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[35737-36295]:MethodDeclaration[36031-36589]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[36330-36787]:MethodDeclaration[36624-37081]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[36831-37657]:MethodDeclaration[37125-37951]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[37692-38594]:MethodDeclaration[37986-38888]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[38633-39535]:MethodDeclaration[38927-39829]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[39565-40242]:MethodDeclaration[39859-40536]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[40279-41027]:MethodDeclaration[40573-41321]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[41060-42164]:MethodDeclaration[41354-42458]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[42201-43151]:MethodDeclaration[42495-43445]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[43181-43885]:MethodDeclaration[43475-44179]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[43925-45022]:MethodDeclaration[44219-45316]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[45056-46173]:MethodDeclaration[45350-46467]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[46212-47021]:MethodDeclaration[46506-47315]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[47069-48447]:MethodDeclaration[47363-48741]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[48499-49742]:MethodDeclaration[48793-50036]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[49801-50767]:MethodDeclaration[50095-51061]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[50826-51793]:MethodDeclaration[51120-52087]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[51844-53113]:MethodDeclaration[52138-53407]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[53176-54369]:MethodDeclaration[53470-54663]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[54417-55763]:MethodDeclaration[54711-56057]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[55815-57058]:MethodDeclaration[56109-57352]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[57117-58083]:MethodDeclaration[57411-58377]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[58142-59109]:MethodDeclaration[58436-59403]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[59160-59937]:MethodDeclaration[59454-60231]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[59972-60459]:MethodDeclaration[60266-60753]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[60494-60686]:MethodDeclaration[60788-60980]"
    }, {
      "left" : "abstract void read(Tokeniser t, CharacterReader r);",
      "right" : "abstract void read(Tokeniser t, CharacterReader r);",
      "info" : "MethodDeclaration[60700-60751]:MethodDeclaration[60994-61045]"
    }, {
      "left" : "private static final char nullChar = '\\u0000';",
      "right" : "private static final char nullChar = '\\u0000';",
      "info" : "FieldDeclaration[60757-60803]:FieldDeclaration[61051-61097]"
    }, {
      "left" : "private static final char replacementChar = Tokeniser.replacementChar;",
      "right" : "private static final char replacementChar = Tokeniser.replacementChar;",
      "info" : "FieldDeclaration[60808-60878]:FieldDeclaration[61102-61172]"
    }, {
      "left" : "private static final String replacementStr = String.valueOf(Tokeniser.replacementChar);",
      "right" : "private static final String replacementStr = String.valueOf(Tokeniser.replacementChar);",
      "info" : "FieldDeclaration[60883-60970]:FieldDeclaration[61177-61264]"
    }, {
      "left" : "private static final char eof = CharacterReader.EOF;",
      "right" : "private static final char eof = CharacterReader.EOF;",
      "info" : "FieldDeclaration[60975-61027]:FieldDeclaration[61269-61321]"
    } ],
    "mappings" : [
 {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[220-224]:PrimitiveType[220-224]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[225-229]:SimpleName[225-229]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[230-241]:SingleVariableDeclaration[230-241]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[243-260]:SingleVariableDeclaration[243-260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[262-971]:Block[262-971]"
    }, {
      "left" : "switch (r.current()) {\n                case '&':\n                    t.advanceTransition(CharacterReferenceInData);\n                    break;\n                case '<':\n                    t.advanceTransition(TagOpen);\n                    break;\n                case nullChar:\n                    t.error(this); // NOT replacement character (oddly?)\n                    t.emit(r.consume());\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeToAny('&', '<', nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "right" : "switch (r.current()) {\n                case '&':\n                    t.advanceTransition(CharacterReferenceInData);\n                    break;\n                case '<':\n                    t.advanceTransition(TagOpen);\n                    break;\n                case nullChar:\n                    t.error(this); // NOT replacement character (oddly?)\n                    t.emit(r.consume());\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeToAny('&', '<', nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "info" : "SwitchStatement[276-961]:SwitchStatement[276-961]"
    }, {
      "left" : "case '&':",
      "right" : "case '&':",
      "info" : "SwitchCase[315-324]:SwitchCase[315-324]"
    }, {
      "left" : "t.advanceTransition(CharacterReferenceInData);",
      "right" : "t.advanceTransition(CharacterReferenceInData);",
      "info" : "ExpressionStatement[345-391]:ExpressionStatement[345-391]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[412-418]:BreakStatement[412-418]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[435-444]:SwitchCase[435-444]"
    }, {
      "left" : "t.advanceTransition(TagOpen);",
      "right" : "t.advanceTransition(TagOpen);",
      "info" : "ExpressionStatement[465-494]:ExpressionStatement[465-494]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[515-521]:BreakStatement[515-521]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[538-552]:SwitchCase[538-552]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[573-587]:ExpressionStatement[573-587]"
    }, {
      "left" : "t.emit(r.consume());",
      "right" : "t.emit(r.consume());",
      "info" : "ExpressionStatement[646-666]:ExpressionStatement[646-666]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[687-693]:BreakStatement[687-693]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[710-719]:SwitchCase[710-719]"
    }, {
      "left" : "t.emit(new Token.EOF());",
      "right" : "t.emit(new Token.EOF());",
      "info" : "ExpressionStatement[740-764]:ExpressionStatement[740-764]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[785-791]:BreakStatement[785-791]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[808-816]:SwitchCase[808-816]"
    }, {
      "left" : "String data = r.consumeToAny('&', '<', nullChar);",
      "right" : "String data = r.consumeToAny('&', '<', nullChar);",
      "info" : "VariableDeclarationStatement[837-886]:VariableDeclarationStatement[837-886]"
    }, {
      "left" : "t.emit(data);",
      "right" : "t.emit(data);",
      "info" : "ExpressionStatement[907-920]:ExpressionStatement[907-920]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[941-947]:BreakStatement[941-947]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1044-1048]:PrimitiveType[1044-1048]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[1049-1053]:SimpleName[1049-1053]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[1054-1065]:SingleVariableDeclaration[1054-1065]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[1067-1084]:SingleVariableDeclaration[1067-1084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1086-1297]:Block[1086-1297]"
    }, {
      "left" : "Character c = t.consumeCharacterReference(null, false);",
      "right" : "Character c = t.consumeCharacterReference(null, false);",
      "info" : "VariableDeclarationStatement[1100-1155]:VariableDeclarationStatement[1100-1155]"
    }, {
      "left" : "if (c == null)",
      "right" : "if (c == null)",
      "info" : "IfStatement[1168-1255]:IfStatement[1168-1255]"
    }, {
      "left" : "t.emit('&');",
      "right" : "t.emit('&');",
      "info" : "ExpressionStatement[1199-1211]:ExpressionStatement[1199-1211]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[1245-1255]:ExpressionStatement[1245-1255]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[1268-1287]:ExpressionStatement[1268-1287]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1374-1378]:PrimitiveType[1374-1378]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[1379-1383]:SimpleName[1379-1383]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[1384-1395]:SingleVariableDeclaration[1384-1395]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[1397-1414]:SingleVariableDeclaration[1397-1414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1416-2137]:Block[1416-2137]"
    }, {
      "left" : "switch (r.current()) {\n                case '&':\n                    t.advanceTransition(CharacterReferenceInRcdata);\n                    break;\n                case '<':\n                    t.advanceTransition(RcdataLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeToAny('&', '<', nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "right" : "switch (r.current()) {\n                case '&':\n                    t.advanceTransition(CharacterReferenceInRcdata);\n                    break;\n                case '<':\n                    t.advanceTransition(RcdataLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeToAny('&', '<', nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "info" : "SwitchStatement[1430-2127]:SwitchStatement[1430-2127]"
    }, {
      "left" : "case '&':",
      "right" : "case '&':",
      "info" : "SwitchCase[1469-1478]:SwitchCase[1469-1478]"
    }, {
      "left" : "t.advanceTransition(CharacterReferenceInRcdata);",
      "right" : "t.advanceTransition(CharacterReferenceInRcdata);",
      "info" : "ExpressionStatement[1499-1547]:ExpressionStatement[1499-1547]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1568-1574]:BreakStatement[1568-1574]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[1591-1600]:SwitchCase[1591-1600]"
    }, {
      "left" : "t.advanceTransition(RcdataLessthanSign);",
      "right" : "t.advanceTransition(RcdataLessthanSign);",
      "info" : "ExpressionStatement[1621-1661]:ExpressionStatement[1621-1661]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1682-1688]:BreakStatement[1682-1688]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[1705-1719]:SwitchCase[1705-1719]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[1740-1754]:ExpressionStatement[1740-1754]"
    }, {
      "left" : "r.advance();",
      "right" : "r.advance();",
      "info" : "ExpressionStatement[1775-1787]:ExpressionStatement[1775-1787]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[1808-1832]:ExpressionStatement[1808-1832]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1853-1859]:BreakStatement[1853-1859]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[1876-1885]:SwitchCase[1876-1885]"
    }, {
      "left" : "t.emit(new Token.EOF());",
      "right" : "t.emit(new Token.EOF());",
      "info" : "ExpressionStatement[1906-1930]:ExpressionStatement[1906-1930]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1951-1957]:BreakStatement[1951-1957]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[1974-1982]:SwitchCase[1974-1982]"
    }, {
      "left" : "String data = r.consumeToAny('&', '<', nullChar);",
      "right" : "String data = r.consumeToAny('&', '<', nullChar);",
      "info" : "VariableDeclarationStatement[2003-2052]:VariableDeclarationStatement[2003-2052]"
    }, {
      "left" : "t.emit(data);",
      "right" : "t.emit(data);",
      "info" : "ExpressionStatement[2073-2086]:ExpressionStatement[2073-2086]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2107-2113]:BreakStatement[2107-2113]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2186-2190]:PrimitiveType[2186-2190]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[2191-2195]:SimpleName[2191-2195]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[2196-2207]:SingleVariableDeclaration[2196-2207]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[2209-2226]:SingleVariableDeclaration[2209-2226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2228-2441]:Block[2228-2441]"
    }, {
      "left" : "Character c = t.consumeCharacterReference(null, false);",
      "right" : "Character c = t.consumeCharacterReference(null, false);",
      "info" : "VariableDeclarationStatement[2242-2297]:VariableDeclarationStatement[2242-2297]"
    }, {
      "left" : "if (c == null)",
      "right" : "if (c == null)",
      "info" : "IfStatement[2310-2397]:IfStatement[2310-2397]"
    }, {
      "left" : "t.emit('&');",
      "right" : "t.emit('&');",
      "info" : "ExpressionStatement[2341-2353]:ExpressionStatement[2341-2353]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[2387-2397]:ExpressionStatement[2387-2397]"
    }, {
      "left" : "t.transition(Rcdata);",
      "right" : "t.transition(Rcdata);",
      "info" : "ExpressionStatement[2410-2431]:ExpressionStatement[2410-2431]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2471-2475]:PrimitiveType[2471-2475]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[2476-2480]:SimpleName[2476-2480]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[2481-2492]:SingleVariableDeclaration[2481-2492]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[2494-2511]:SingleVariableDeclaration[2494-2511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2513-3108]:Block[2513-3108]"
    }, {
      "left" : "switch (r.current()) {\n                case '<':\n                    t.advanceTransition(RawtextLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeToAny('<', nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "right" : "switch (r.current()) {\n                case '<':\n                    t.advanceTransition(RawtextLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeToAny('<', nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "info" : "SwitchStatement[2527-3098]:SwitchStatement[2527-3098]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[2566-2575]:SwitchCase[2566-2575]"
    }, {
      "left" : "t.advanceTransition(RawtextLessthanSign);",
      "right" : "t.advanceTransition(RawtextLessthanSign);",
      "info" : "ExpressionStatement[2596-2637]:ExpressionStatement[2596-2637]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2658-2664]:BreakStatement[2658-2664]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[2681-2695]:SwitchCase[2681-2695]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[2716-2730]:ExpressionStatement[2716-2730]"
    }, {
      "left" : "r.advance();",
      "right" : "r.advance();",
      "info" : "ExpressionStatement[2751-2763]:ExpressionStatement[2751-2763]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[2784-2808]:ExpressionStatement[2784-2808]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2829-2835]:BreakStatement[2829-2835]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[2852-2861]:SwitchCase[2852-2861]"
    }, {
      "left" : "t.emit(new Token.EOF());",
      "right" : "t.emit(new Token.EOF());",
      "info" : "ExpressionStatement[2882-2906]:ExpressionStatement[2882-2906]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2927-2933]:BreakStatement[2927-2933]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[2950-2958]:SwitchCase[2950-2958]"
    }, {
      "left" : "String data = r.consumeToAny('<', nullChar);",
      "right" : "String data = r.consumeToAny('<', nullChar);",
      "info" : "VariableDeclarationStatement[2979-3023]:VariableDeclarationStatement[2979-3023]"
    }, {
      "left" : "t.emit(data);",
      "right" : "t.emit(data);",
      "info" : "ExpressionStatement[3044-3057]:ExpressionStatement[3044-3057]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3078-3084]:BreakStatement[3078-3084]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3141-3145]:PrimitiveType[3141-3145]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[3146-3150]:SimpleName[3146-3150]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[3151-3162]:SingleVariableDeclaration[3151-3162]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[3164-3181]:SingleVariableDeclaration[3164-3181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3183-3781]:Block[3183-3781]"
    }, {
      "left" : "switch (r.current()) {\n                case '<':\n                    t.advanceTransition(ScriptDataLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeToAny('<', nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "right" : "switch (r.current()) {\n                case '<':\n                    t.advanceTransition(ScriptDataLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeToAny('<', nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "info" : "SwitchStatement[3197-3771]:SwitchStatement[3197-3771]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[3236-3245]:SwitchCase[3236-3245]"
    }, {
      "left" : "t.advanceTransition(ScriptDataLessthanSign);",
      "right" : "t.advanceTransition(ScriptDataLessthanSign);",
      "info" : "ExpressionStatement[3266-3310]:ExpressionStatement[3266-3310]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3331-3337]:BreakStatement[3331-3337]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[3354-3368]:SwitchCase[3354-3368]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[3389-3403]:ExpressionStatement[3389-3403]"
    }, {
      "left" : "r.advance();",
      "right" : "r.advance();",
      "info" : "ExpressionStatement[3424-3436]:ExpressionStatement[3424-3436]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[3457-3481]:ExpressionStatement[3457-3481]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3502-3508]:BreakStatement[3502-3508]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[3525-3534]:SwitchCase[3525-3534]"
    }, {
      "left" : "t.emit(new Token.EOF());",
      "right" : "t.emit(new Token.EOF());",
      "info" : "ExpressionStatement[3555-3579]:ExpressionStatement[3555-3579]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3600-3606]:BreakStatement[3600-3606]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[3623-3631]:SwitchCase[3623-3631]"
    }, {
      "left" : "String data = r.consumeToAny('<', nullChar);",
      "right" : "String data = r.consumeToAny('<', nullChar);",
      "info" : "VariableDeclarationStatement[3652-3696]:VariableDeclarationStatement[3652-3696]"
    }, {
      "left" : "t.emit(data);",
      "right" : "t.emit(data);",
      "info" : "ExpressionStatement[3717-3730]:ExpressionStatement[3717-3730]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3751-3757]:BreakStatement[3751-3757]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3813-3817]:PrimitiveType[3813-3817]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[3818-3822]:SimpleName[3818-3822]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[3823-3834]:SingleVariableDeclaration[3823-3834]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[3836-3853]:SingleVariableDeclaration[3836-3853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3855-4327]:Block[3855-4327]"
    }, {
      "left" : "switch (r.current()) {\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeTo(nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "right" : "switch (r.current()) {\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeTo(nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "info" : "SwitchStatement[3869-4317]:SwitchStatement[3869-4317]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[3908-3922]:SwitchCase[3908-3922]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[3943-3957]:ExpressionStatement[3943-3957]"
    }, {
      "left" : "r.advance();",
      "right" : "r.advance();",
      "info" : "ExpressionStatement[3978-3990]:ExpressionStatement[3978-3990]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[4011-4035]:ExpressionStatement[4011-4035]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4056-4062]:BreakStatement[4056-4062]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[4079-4088]:SwitchCase[4079-4088]"
    }, {
      "left" : "t.emit(new Token.EOF());",
      "right" : "t.emit(new Token.EOF());",
      "info" : "ExpressionStatement[4109-4133]:ExpressionStatement[4109-4133]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4154-4160]:BreakStatement[4154-4160]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[4177-4185]:SwitchCase[4177-4185]"
    }, {
      "left" : "String data = r.consumeTo(nullChar);",
      "right" : "String data = r.consumeTo(nullChar);",
      "info" : "VariableDeclarationStatement[4206-4242]:VariableDeclarationStatement[4206-4242]"
    }, {
      "left" : "t.emit(data);",
      "right" : "t.emit(data);",
      "info" : "ExpressionStatement[4263-4276]:ExpressionStatement[4263-4276]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4297-4303]:BreakStatement[4297-4303]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4383-4387]:PrimitiveType[4383-4387]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[4388-4392]:SimpleName[4388-4392]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[4393-4404]:SingleVariableDeclaration[4393-4404]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[4406-4423]:SingleVariableDeclaration[4406-4423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4425-5206]:Block[4425-5206]"
    }, {
      "left" : "switch (r.current()) {\n                case '!':\n                    t.advanceTransition(MarkupDeclarationOpen);\n                    break;\n                case '/':\n                    t.advanceTransition(EndTagOpen);\n                    break;\n                case '?':\n                    t.advanceTransition(BogusComment);\n                    break;\n                default:\n                    if (r.matchesLetter()) {\n                        t.createTagPending(true);\n                        t.transition(TagName);\n                    } else {\n                        t.error(this);\n                        t.emit('<'); // char that got us here\n                        t.transition(Data);\n                    }\n                    break;\n            }",
      "right" : "switch (r.current()) {\n                case '!':\n                    t.advanceTransition(MarkupDeclarationOpen);\n                    break;\n                case '/':\n                    t.advanceTransition(EndTagOpen);\n                    break;\n                case '?':\n                    t.advanceTransition(BogusComment);\n                    break;\n                default:\n                    if (r.matchesLetter()) {\n                        t.createTagPending(true);\n                        t.transition(TagName);\n                    } else {\n                        t.error(this);\n                        t.emit('<'); // char that got us here\n                        t.transition(Data);\n                    }\n                    break;\n            }",
      "info" : "SwitchStatement[4439-5196]:SwitchStatement[4439-5196]"
    }, {
      "left" : "case '!':",
      "right" : "case '!':",
      "info" : "SwitchCase[4478-4487]:SwitchCase[4478-4487]"
    }, {
      "left" : "t.advanceTransition(MarkupDeclarationOpen);",
      "right" : "t.advanceTransition(MarkupDeclarationOpen);",
      "info" : "ExpressionStatement[4508-4551]:ExpressionStatement[4508-4551]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4572-4578]:BreakStatement[4572-4578]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[4595-4604]:SwitchCase[4595-4604]"
    }, {
      "left" : "t.advanceTransition(EndTagOpen);",
      "right" : "t.advanceTransition(EndTagOpen);",
      "info" : "ExpressionStatement[4625-4657]:ExpressionStatement[4625-4657]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4678-4684]:BreakStatement[4678-4684]"
    }, {
      "left" : "case '?':",
      "right" : "case '?':",
      "info" : "SwitchCase[4701-4710]:SwitchCase[4701-4710]"
    }, {
      "left" : "t.advanceTransition(BogusComment);",
      "right" : "t.advanceTransition(BogusComment);",
      "info" : "ExpressionStatement[4731-4765]:ExpressionStatement[4731-4765]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4786-4792]:BreakStatement[4786-4792]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[4809-4817]:SwitchCase[4809-4817]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[4838-5155]:IfStatement[4838-5155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4861-4981]:Block[4861-4981]"
    }, {
      "left" : "t.createTagPending(true);",
      "right" : "t.createTagPending(true);",
      "info" : "ExpressionStatement[4887-4912]:ExpressionStatement[4887-4912]"
    }, {
      "left" : "t.transition(TagName);",
      "right" : "t.transition(TagName);",
      "info" : "ExpressionStatement[4937-4959]:ExpressionStatement[4937-4959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4987-5155]:Block[4987-5155]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[5013-5027]:ExpressionStatement[5013-5027]"
    }, {
      "left" : "t.emit('<');",
      "right" : "t.emit('<');",
      "info" : "ExpressionStatement[5052-5064]:ExpressionStatement[5052-5064]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[5114-5133]:ExpressionStatement[5114-5133]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5176-5182]:BreakStatement[5176-5182]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5239-5243]:PrimitiveType[5239-5243]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[5244-5248]:SimpleName[5244-5248]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[5249-5260]:SingleVariableDeclaration[5249-5260]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[5262-5279]:SingleVariableDeclaration[5262-5279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5281-5781]:Block[5281-5781]"
    }, {
      "left" : "if (r.isEmpty())",
      "right" : "if (r.isEmpty())",
      "info" : "IfStatement[5295-5771]:IfStatement[5295-5771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5312-5427]:Block[5312-5427]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[5330-5347]:ExpressionStatement[5330-5347]"
    }, {
      "left" : "t.emit(\"</\");",
      "right" : "t.emit(\"</\");",
      "info" : "ExpressionStatement[5364-5377]:ExpressionStatement[5364-5377]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[5394-5413]:ExpressionStatement[5394-5413]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[5433-5771]:IfStatement[5433-5771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5456-5553]:Block[5456-5553]"
    }, {
      "left" : "t.createTagPending(false);",
      "right" : "t.createTagPending(false);",
      "info" : "ExpressionStatement[5474-5500]:ExpressionStatement[5474-5500]"
    }, {
      "left" : "t.transition(TagName);",
      "right" : "t.transition(TagName);",
      "info" : "ExpressionStatement[5517-5539]:ExpressionStatement[5517-5539]"
    }, {
      "left" : "if (r.matches('>'))",
      "right" : "if (r.matches('>'))",
      "info" : "IfStatement[5559-5771]:IfStatement[5559-5771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5579-5668]:Block[5579-5668]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[5597-5611]:ExpressionStatement[5597-5611]"
    }, {
      "left" : "t.advanceTransition(Data);",
      "right" : "t.advanceTransition(Data);",
      "info" : "ExpressionStatement[5628-5654]:ExpressionStatement[5628-5654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5674-5771]:Block[5674-5771]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[5692-5706]:ExpressionStatement[5692-5706]"
    }, {
      "left" : "t.advanceTransition(BogusComment);",
      "right" : "t.advanceTransition(BogusComment);",
      "info" : "ExpressionStatement[5723-5757]:ExpressionStatement[5723-5757]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5879-5883]:PrimitiveType[5879-5883]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[5884-5888]:SimpleName[5884-5888]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[5889-5900]:SingleVariableDeclaration[5889-5900]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[5902-5919]:SingleVariableDeclaration[5902-5919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5921-6988]:Block[5921-6988]"
    }, {
      "left" : "String tagName = r.consumeToAny('\\t', '\\n', '\\f', ' ', '/', '>', nullChar).toLowerCase();",
      "right" : "String tagName = r.consumeToAny('\\t', '\\n', '\\f', ' ', '/', '>', nullChar).toLowerCase();",
      "info" : "VariableDeclarationStatement[6025-6114]:VariableDeclarationStatement[6025-6114]"
    }, {
      "left" : "t.tagPending.appendTagName(tagName);",
      "right" : "t.tagPending.appendTagName(tagName);",
      "info" : "ExpressionStatement[6127-6163]:ExpressionStatement[6127-6163]"
    }, {
      "left" : "switch (r.consume()) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeAttributeName);\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar: // replacement\n                    t.tagPending.appendTagName(replacementStr);\n                    break;\n                case eof: // should emit pending tag?\n                    t.eofError(this);\n                    t.transition(Data);\n                // no default, as covered with above consumeToAny\n            }",
      "right" : "switch (r.consume()) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeAttributeName);\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar: // replacement\n                    t.tagPending.appendTagName(replacementStr);\n                    break;\n                case eof: // should emit pending tag?\n                    t.eofError(this);\n                    t.transition(Data);\n                // no default, as covered with above consumeToAny\n            }",
      "info" : "SwitchStatement[6177-6978]:SwitchStatement[6177-6978]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[6216-6226]:SwitchCase[6216-6226]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[6243-6253]:SwitchCase[6243-6253]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[6270-6280]:SwitchCase[6270-6280]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[6297-6306]:SwitchCase[6297-6306]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[6327-6361]:ExpressionStatement[6327-6361]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6382-6388]:BreakStatement[6382-6388]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[6405-6414]:SwitchCase[6405-6414]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[6435-6469]:ExpressionStatement[6435-6469]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6490-6496]:BreakStatement[6490-6496]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[6513-6522]:SwitchCase[6513-6522]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[6543-6562]:ExpressionStatement[6543-6562]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[6583-6602]:ExpressionStatement[6583-6602]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6623-6629]:BreakStatement[6623-6629]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[6646-6660]:SwitchCase[6646-6660]"
    }, {
      "left" : "t.tagPending.appendTagName(replacementStr);",
      "right" : "t.tagPending.appendTagName(replacementStr);",
      "info" : "ExpressionStatement[6696-6739]:ExpressionStatement[6696-6739]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6760-6766]:BreakStatement[6760-6766]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[6783-6792]:SwitchCase[6783-6792]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[6841-6858]:ExpressionStatement[6841-6858]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[6879-6898]:ExpressionStatement[6879-6898]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7547-7551]:PrimitiveType[7841-7845]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[7552-7556]:SimpleName[7846-7850]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[7557-7568]:SingleVariableDeclaration[7851-7862]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[7570-7587]:SingleVariableDeclaration[7864-7881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7589-7991]:Block[7883-8285]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[7603-7981]:IfStatement[7897-8275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7626-7892]:Block[7920-8186]"
    }, {
      "left" : "t.createTagPending(false);",
      "right" : "t.createTagPending(false);",
      "info" : "ExpressionStatement[7644-7670]:ExpressionStatement[7938-7964]"
    }, {
      "left" : "t.tagPending.appendTagName(Character.toLowerCase(r.current()));",
      "right" : "t.tagPending.appendTagName(Character.toLowerCase(r.current()));",
      "info" : "ExpressionStatement[7687-7750]:ExpressionStatement[7981-8044]"
    }, {
      "left" : "t.dataBuffer.append(Character.toLowerCase(r.current()));",
      "right" : "t.dataBuffer.append(Character.toLowerCase(r.current()));",
      "info" : "ExpressionStatement[7767-7823]:ExpressionStatement[8061-8117]"
    }, {
      "left" : "t.advanceTransition(RCDATAEndTagName);",
      "right" : "t.advanceTransition(RCDATAEndTagName);",
      "info" : "ExpressionStatement[7840-7878]:ExpressionStatement[8134-8172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7898-7981]:Block[8192-8275]"
    }, {
      "left" : "t.emit(\"</\");",
      "right" : "t.emit(\"</\");",
      "info" : "ExpressionStatement[7916-7929]:ExpressionStatement[8210-8223]"
    }, {
      "left" : "t.transition(Rcdata);",
      "right" : "t.transition(Rcdata);",
      "info" : "ExpressionStatement[7946-7967]:ExpressionStatement[8240-8261]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8030-8034]:PrimitiveType[8324-8328]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[8035-8039]:SimpleName[8329-8333]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[8040-8051]:SingleVariableDeclaration[8334-8345]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[8053-8070]:SingleVariableDeclaration[8347-8364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8072-9300]:Block[8366-9594]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[8086-8312]:IfStatement[8380-8606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8109-8312]:Block[8403-8606]"
    }, {
      "left" : "String name = r.consumeLetterSequence();",
      "right" : "String name = r.consumeLetterSequence();",
      "info" : "VariableDeclarationStatement[8127-8167]:VariableDeclarationStatement[8421-8461]"
    }, {
      "left" : "t.tagPending.appendTagName(name.toLowerCase());",
      "right" : "t.tagPending.appendTagName(name.toLowerCase());",
      "info" : "ExpressionStatement[8184-8231]:ExpressionStatement[8478-8525]"
    }, {
      "left" : "t.dataBuffer.append(name);",
      "right" : "t.dataBuffer.append(name);",
      "info" : "ExpressionStatement[8248-8274]:ExpressionStatement[8542-8568]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[8291-8298]:ReturnStatement[8585-8592]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[8326-8347]:VariableDeclarationStatement[8620-8641]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    if (t.isAppropriateEndTagToken())\n                        t.transition(BeforeAttributeName);\n                    else\n                        anythingElse(t, r);\n                    break;\n                case '/':\n                    if (t.isAppropriateEndTagToken())\n                        t.transition(SelfClosingStartTag);\n                    else\n                        anythingElse(t, r);\n                    break;\n                case '>':\n                    if (t.isAppropriateEndTagToken()) {\n                        t.emitTagPending();\n                        t.transition(Data);\n                    }\n                    else\n                        anythingElse(t, r);\n                    break;\n                default:\n                    anythingElse(t, r);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    if (t.isAppropriateEndTagToken())\n                        t.transition(BeforeAttributeName);\n                    else\n                        anythingElse(t, r);\n                    break;\n                case '/':\n                    if (t.isAppropriateEndTagToken())\n                        t.transition(SelfClosingStartTag);\n                    else\n                        anythingElse(t, r);\n                    break;\n                case '>':\n                    if (t.isAppropriateEndTagToken()) {\n                        t.emitTagPending();\n                        t.transition(Data);\n                    }\n                    else\n                        anythingElse(t, r);\n                    break;\n                default:\n                    anythingElse(t, r);\n            }",
      "info" : "SwitchStatement[8360-9290]:SwitchStatement[8654-9584]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[8389-8399]:SwitchCase[8683-8693]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[8416-8426]:SwitchCase[8710-8720]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[8443-8453]:SwitchCase[8737-8747]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[8470-8479]:SwitchCase[8764-8773]"
    }, {
      "left" : "if (t.isAppropriateEndTagToken())",
      "right" : "if (t.isAppropriateEndTagToken())",
      "info" : "IfStatement[8500-8661]:IfStatement[8794-8955]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[8558-8592]:ExpressionStatement[8852-8886]"
    }, {
      "left" : "anythingElse(t, r);",
      "right" : "anythingElse(t, r);",
      "info" : "ExpressionStatement[8642-8661]:ExpressionStatement[8936-8955]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8682-8688]:BreakStatement[8976-8982]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[8705-8714]:SwitchCase[8999-9008]"
    }, {
      "left" : "if (t.isAppropriateEndTagToken())",
      "right" : "if (t.isAppropriateEndTagToken())",
      "info" : "IfStatement[8735-8896]:IfStatement[9029-9190]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[8793-8827]:ExpressionStatement[9087-9121]"
    }, {
      "left" : "anythingElse(t, r);",
      "right" : "anythingElse(t, r);",
      "info" : "ExpressionStatement[8877-8896]:ExpressionStatement[9171-9190]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8917-8923]:BreakStatement[9211-9217]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[8940-8949]:SwitchCase[9234-9243]"
    }, {
      "left" : "if (t.isAppropriateEndTagToken())",
      "right" : "if (t.isAppropriateEndTagToken())",
      "info" : "IfStatement[8970-9184]:IfStatement[9264-9478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9004-9115]:Block[9298-9409]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[9030-9049]:ExpressionStatement[9324-9343]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[9074-9093]:ExpressionStatement[9368-9387]"
    }, {
      "left" : "anythingElse(t, r);",
      "right" : "anythingElse(t, r);",
      "info" : "ExpressionStatement[9165-9184]:ExpressionStatement[9459-9478]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9205-9211]:BreakStatement[9499-9505]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[9228-9236]:SwitchCase[9522-9530]"
    }, {
      "left" : "anythingElse(t, r);",
      "right" : "anythingElse(t, r);",
      "info" : "ExpressionStatement[9257-9276]:ExpressionStatement[9551-9570]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9310-9317]:Modifier[9604-9611]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9318-9322]:PrimitiveType[9612-9616]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[9323-9335]:SimpleName[9617-9629]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[9336-9347]:SingleVariableDeclaration[9630-9641]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[9349-9366]:SingleVariableDeclaration[9643-9660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9368-9465]:Block[9662-9759]"
    }, {
      "left" : "t.emit(\"</\" + t.dataBuffer.toString());",
      "right" : "t.emit(\"</\" + t.dataBuffer.toString());",
      "info" : "ExpressionStatement[9382-9421]:ExpressionStatement[9676-9715]"
    }, {
      "left" : "t.transition(Rcdata);",
      "right" : "t.transition(Rcdata);",
      "info" : "ExpressionStatement[9434-9455]:ExpressionStatement[9728-9749]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9507-9511]:PrimitiveType[9801-9805]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[9512-9516]:SimpleName[9806-9810]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[9517-9528]:SingleVariableDeclaration[9811-9822]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[9530-9547]:SingleVariableDeclaration[9824-9841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9549-9791]:Block[9843-10085]"
    }, {
      "left" : "if (r.matches('/'))",
      "right" : "if (r.matches('/'))",
      "info" : "IfStatement[9563-9781]:IfStatement[9857-10075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9583-9692]:Block[9877-9986]"
    }, {
      "left" : "t.createTempBuffer();",
      "right" : "t.createTempBuffer();",
      "info" : "ExpressionStatement[9601-9622]:ExpressionStatement[9895-9916]"
    }, {
      "left" : "t.advanceTransition(RawtextEndTagOpen);",
      "right" : "t.advanceTransition(RawtextEndTagOpen);",
      "info" : "ExpressionStatement[9639-9678]:ExpressionStatement[9933-9972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9698-9781]:Block[9992-10075]"
    }, {
      "left" : "t.emit('<');",
      "right" : "t.emit('<');",
      "info" : "ExpressionStatement[9716-9728]:ExpressionStatement[10010-10022]"
    }, {
      "left" : "t.transition(Rawtext);",
      "right" : "t.transition(Rawtext);",
      "info" : "ExpressionStatement[9745-9767]:ExpressionStatement[10039-10061]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9831-9835]:PrimitiveType[10125-10129]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[9836-9840]:SimpleName[10130-10134]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[9841-9852]:SingleVariableDeclaration[10135-10146]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[9854-9871]:SingleVariableDeclaration[10148-10165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9873-10117]:Block[10167-10411]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[9887-10107]:IfStatement[10181-10401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9910-10017]:Block[10204-10311]"
    }, {
      "left" : "t.createTagPending(false);",
      "right" : "t.createTagPending(false);",
      "info" : "ExpressionStatement[9928-9954]:ExpressionStatement[10222-10248]"
    }, {
      "left" : "t.transition(RawtextEndTagName);",
      "right" : "t.transition(RawtextEndTagName);",
      "info" : "ExpressionStatement[9971-10003]:ExpressionStatement[10265-10297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10023-10107]:Block[10317-10401]"
    }, {
      "left" : "t.emit(\"</\");",
      "right" : "t.emit(\"</\");",
      "info" : "ExpressionStatement[10041-10054]:ExpressionStatement[10335-10348]"
    }, {
      "left" : "t.transition(Rawtext);",
      "right" : "t.transition(Rawtext);",
      "info" : "ExpressionStatement[10071-10093]:ExpressionStatement[10365-10387]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10157-10161]:PrimitiveType[10451-10455]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[10162-10166]:SimpleName[10456-10460]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[10167-10178]:SingleVariableDeclaration[10461-10472]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[10180-10197]:SingleVariableDeclaration[10474-10491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10199-11557]:Block[10493-11851]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[10213-10439]:IfStatement[10507-10733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10236-10439]:Block[10530-10733]"
    }, {
      "left" : "String name = r.consumeLetterSequence();",
      "right" : "String name = r.consumeLetterSequence();",
      "info" : "VariableDeclarationStatement[10254-10294]:VariableDeclarationStatement[10548-10588]"
    }, {
      "left" : "t.tagPending.appendTagName(name.toLowerCase());",
      "right" : "t.tagPending.appendTagName(name.toLowerCase());",
      "info" : "ExpressionStatement[10311-10358]:ExpressionStatement[10605-10652]"
    }, {
      "left" : "t.dataBuffer.append(name);",
      "right" : "t.dataBuffer.append(name);",
      "info" : "ExpressionStatement[10375-10401]:ExpressionStatement[10669-10695]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10418-10425]:ReturnStatement[10712-10719]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[10453-10474]:VariableDeclarationStatement[10747-10768]"
    }, {
      "left" : "boolean handled = true;",
      "right" : "boolean handled = true;",
      "info" : "VariableDeclarationStatement[10487-10510]:VariableDeclarationStatement[10781-10804]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    if (t.isAppropriateEndTagToken())\n                        t.transition(BeforeAttributeName);\n                    else\n                        handled = false;\n                    break;\n                case '/':\n                    if (t.isAppropriateEndTagToken())\n                        t.transition(SelfClosingStartTag);\n                    else\n                        handled = false;\n                    break;\n                case '>':\n                    if (t.isAppropriateEndTagToken()) {\n                        t.emitTagPending();\n                        t.transition(Data);\n                    }\n                    else\n                        handled = false;\n                    break;\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    if (t.isAppropriateEndTagToken())\n                        t.transition(BeforeAttributeName);\n                    else\n                        handled = false;\n                    break;\n                case '/':\n                    if (t.isAppropriateEndTagToken())\n                        t.transition(SelfClosingStartTag);\n                    else\n                        handled = false;\n                    break;\n                case '>':\n                    if (t.isAppropriateEndTagToken()) {\n                        t.emitTagPending();\n                        t.transition(Data);\n                    }\n                    else\n                        handled = false;\n                    break;\n            }",
      "info" : "SwitchStatement[10523-11379]:SwitchStatement[10817-11673]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[10552-10562]:SwitchCase[10846-10856]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[10579-10589]:SwitchCase[10873-10883]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[10606-10616]:SwitchCase[10900-10910]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[10633-10642]:SwitchCase[10927-10936]"
    }, {
      "left" : "if (t.isAppropriateEndTagToken())",
      "right" : "if (t.isAppropriateEndTagToken())",
      "info" : "IfStatement[10663-10821]:IfStatement[10957-11115]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[10721-10755]:ExpressionStatement[11015-11049]"
    }, {
      "left" : "handled = false;",
      "right" : "handled = false;",
      "info" : "ExpressionStatement[10805-10821]:ExpressionStatement[11099-11115]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10842-10848]:BreakStatement[11136-11142]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[10865-10874]:SwitchCase[11159-11168]"
    }, {
      "left" : "if (t.isAppropriateEndTagToken())",
      "right" : "if (t.isAppropriateEndTagToken())",
      "info" : "IfStatement[10895-11053]:IfStatement[11189-11347]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[10953-10987]:ExpressionStatement[11247-11281]"
    }, {
      "left" : "handled = false;",
      "right" : "handled = false;",
      "info" : "ExpressionStatement[11037-11053]:ExpressionStatement[11331-11347]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11074-11080]:BreakStatement[11368-11374]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[11097-11106]:SwitchCase[11391-11400]"
    }, {
      "left" : "if (t.isAppropriateEndTagToken())",
      "right" : "if (t.isAppropriateEndTagToken())",
      "info" : "IfStatement[11127-11338]:IfStatement[11421-11632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11161-11272]:Block[11455-11566]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[11187-11206]:ExpressionStatement[11481-11500]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[11231-11250]:ExpressionStatement[11525-11544]"
    }, {
      "left" : "handled = false;",
      "right" : "handled = false;",
      "info" : "ExpressionStatement[11322-11338]:ExpressionStatement[11616-11632]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11359-11365]:BreakStatement[11653-11659]"
    }, {
      "left" : "if (!handled)",
      "right" : "if (!handled)",
      "info" : "IfStatement[11392-11547]:IfStatement[11686-11841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11406-11547]:Block[11700-11841]"
    }, {
      "left" : "t.emit(\"</\" + t.dataBuffer.toString());",
      "right" : "t.emit(\"</\" + t.dataBuffer.toString());",
      "info" : "ExpressionStatement[11424-11463]:ExpressionStatement[11718-11757]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[11480-11494]:ExpressionStatement[11774-11788]"
    }, {
      "left" : "t.transition(Rawtext);",
      "right" : "t.transition(Rawtext);",
      "info" : "ExpressionStatement[11511-11533]:ExpressionStatement[11805-11827]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11602-11606]:PrimitiveType[11896-11900]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[11607-11611]:SimpleName[11901-11905]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[11612-11623]:SingleVariableDeclaration[11906-11917]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[11625-11642]:SingleVariableDeclaration[11919-11936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11644-12138]:Block[11938-12432]"
    }, {
      "left" : "switch (r.consume()) {\n                case '/':\n                    t.createTempBuffer();\n                    t.transition(ScriptDataEndTagOpen);\n                    break;\n                case '!':\n                    t.emit(\"<!\");\n                    t.transition(ScriptDataEscapeStart);\n                    break;\n                default:\n                    t.emit(\"<\");\n                    r.unconsume();\n                    t.transition(ScriptData);\n            }",
      "right" : "switch (r.consume()) {\n                case '/':\n                    t.createTempBuffer();\n                    t.transition(ScriptDataEndTagOpen);\n                    break;\n                case '!':\n                    t.emit(\"<!\");\n                    t.transition(ScriptDataEscapeStart);\n                    break;\n                default:\n                    t.emit(\"<\");\n                    r.unconsume();\n                    t.transition(ScriptData);\n            }",
      "info" : "SwitchStatement[11658-12128]:SwitchStatement[11952-12422]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[11697-11706]:SwitchCase[11991-12000]"
    }, {
      "left" : "t.createTempBuffer();",
      "right" : "t.createTempBuffer();",
      "info" : "ExpressionStatement[11727-11748]:ExpressionStatement[12021-12042]"
    }, {
      "left" : "t.transition(ScriptDataEndTagOpen);",
      "right" : "t.transition(ScriptDataEndTagOpen);",
      "info" : "ExpressionStatement[11769-11804]:ExpressionStatement[12063-12098]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11825-11831]:BreakStatement[12119-12125]"
    }, {
      "left" : "case '!':",
      "right" : "case '!':",
      "info" : "SwitchCase[11848-11857]:SwitchCase[12142-12151]"
    }, {
      "left" : "t.emit(\"<!\");",
      "right" : "t.emit(\"<!\");",
      "info" : "ExpressionStatement[11878-11891]:ExpressionStatement[12172-12185]"
    }, {
      "left" : "t.transition(ScriptDataEscapeStart);",
      "right" : "t.transition(ScriptDataEscapeStart);",
      "info" : "ExpressionStatement[11912-11948]:ExpressionStatement[12206-12242]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11969-11975]:BreakStatement[12263-12269]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11992-12000]:SwitchCase[12286-12294]"
    }, {
      "left" : "t.emit(\"<\");",
      "right" : "t.emit(\"<\");",
      "info" : "ExpressionStatement[12021-12033]:ExpressionStatement[12315-12327]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[12054-12068]:ExpressionStatement[12348-12362]"
    }, {
      "left" : "t.transition(ScriptData);",
      "right" : "t.transition(ScriptData);",
      "info" : "ExpressionStatement[12089-12114]:ExpressionStatement[12383-12408]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12181-12185]:PrimitiveType[12475-12479]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[12186-12190]:SimpleName[12480-12484]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[12191-12202]:SingleVariableDeclaration[12485-12496]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[12204-12221]:SingleVariableDeclaration[12498-12515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12223-12474]:Block[12517-12768]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[12237-12463]:IfStatement[12531-12757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12260-12370]:Block[12554-12664]"
    }, {
      "left" : "t.createTagPending(false);",
      "right" : "t.createTagPending(false);",
      "info" : "ExpressionStatement[12278-12304]:ExpressionStatement[12572-12598]"
    }, {
      "left" : "t.transition(ScriptDataEndTagName);",
      "right" : "t.transition(ScriptDataEndTagName);",
      "info" : "ExpressionStatement[12321-12356]:ExpressionStatement[12615-12650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12376-12463]:Block[12670-12757]"
    }, {
      "left" : "t.emit(\"</\");",
      "right" : "t.emit(\"</\");",
      "info" : "ExpressionStatement[12394-12407]:ExpressionStatement[12688-12701]"
    }, {
      "left" : "t.transition(ScriptData);",
      "right" : "t.transition(ScriptData);",
      "info" : "ExpressionStatement[12424-12449]:ExpressionStatement[12718-12743]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12517-12521]:PrimitiveType[12811-12815]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[12522-12526]:SimpleName[12816-12820]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[12527-12538]:SingleVariableDeclaration[12821-12832]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[12540-12557]:SingleVariableDeclaration[12834-12851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12559-13920]:Block[12853-14214]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[12573-12799]:IfStatement[12867-13093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12596-12799]:Block[12890-13093]"
    }, {
      "left" : "String name = r.consumeLetterSequence();",
      "right" : "String name = r.consumeLetterSequence();",
      "info" : "VariableDeclarationStatement[12614-12654]:VariableDeclarationStatement[12908-12948]"
    }, {
      "left" : "t.tagPending.appendTagName(name.toLowerCase());",
      "right" : "t.tagPending.appendTagName(name.toLowerCase());",
      "info" : "ExpressionStatement[12671-12718]:ExpressionStatement[12965-13012]"
    }, {
      "left" : "t.dataBuffer.append(name);",
      "right" : "t.dataBuffer.append(name);",
      "info" : "ExpressionStatement[12735-12761]:ExpressionStatement[13029-13055]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[12778-12785]:ReturnStatement[13072-13079]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[12813-12834]:VariableDeclarationStatement[13107-13128]"
    }, {
      "left" : "boolean handled = true;",
      "right" : "boolean handled = true;",
      "info" : "VariableDeclarationStatement[12847-12870]:VariableDeclarationStatement[13141-13164]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    if (t.isAppropriateEndTagToken())\n                        t.transition(BeforeAttributeName);\n                    else\n                        handled = false;\n                    break;\n                case '/':\n                    if (t.isAppropriateEndTagToken())\n                        t.transition(SelfClosingStartTag);\n                    else\n                        handled = false;\n                    break;\n                case '>':\n                    if (t.isAppropriateEndTagToken()) {\n                        t.emitTagPending();\n                        t.transition(Data);\n                    }\n                    else\n                        handled = false;\n                    break;\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    if (t.isAppropriateEndTagToken())\n                        t.transition(BeforeAttributeName);\n                    else\n                        handled = false;\n                    break;\n                case '/':\n                    if (t.isAppropriateEndTagToken())\n                        t.transition(SelfClosingStartTag);\n                    else\n                        handled = false;\n                    break;\n                case '>':\n                    if (t.isAppropriateEndTagToken()) {\n                        t.emitTagPending();\n                        t.transition(Data);\n                    }\n                    else\n                        handled = false;\n                    break;\n            }",
      "info" : "SwitchStatement[12883-13739]:SwitchStatement[13177-14033]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[12912-12922]:SwitchCase[13206-13216]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[12939-12949]:SwitchCase[13233-13243]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[12966-12976]:SwitchCase[13260-13270]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[12993-13002]:SwitchCase[13287-13296]"
    }, {
      "left" : "if (t.isAppropriateEndTagToken())",
      "right" : "if (t.isAppropriateEndTagToken())",
      "info" : "IfStatement[13023-13181]:IfStatement[13317-13475]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[13081-13115]:ExpressionStatement[13375-13409]"
    }, {
      "left" : "handled = false;",
      "right" : "handled = false;",
      "info" : "ExpressionStatement[13165-13181]:ExpressionStatement[13459-13475]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13202-13208]:BreakStatement[13496-13502]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[13225-13234]:SwitchCase[13519-13528]"
    }, {
      "left" : "if (t.isAppropriateEndTagToken())",
      "right" : "if (t.isAppropriateEndTagToken())",
      "info" : "IfStatement[13255-13413]:IfStatement[13549-13707]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[13313-13347]:ExpressionStatement[13607-13641]"
    }, {
      "left" : "handled = false;",
      "right" : "handled = false;",
      "info" : "ExpressionStatement[13397-13413]:ExpressionStatement[13691-13707]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13434-13440]:BreakStatement[13728-13734]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[13457-13466]:SwitchCase[13751-13760]"
    }, {
      "left" : "if (t.isAppropriateEndTagToken())",
      "right" : "if (t.isAppropriateEndTagToken())",
      "info" : "IfStatement[13487-13698]:IfStatement[13781-13992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13521-13632]:Block[13815-13926]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[13547-13566]:ExpressionStatement[13841-13860]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[13591-13610]:ExpressionStatement[13885-13904]"
    }, {
      "left" : "handled = false;",
      "right" : "handled = false;",
      "info" : "ExpressionStatement[13682-13698]:ExpressionStatement[13976-13992]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13719-13725]:BreakStatement[14013-14019]"
    }, {
      "left" : "if (!handled)",
      "right" : "if (!handled)",
      "info" : "IfStatement[13752-13910]:IfStatement[14046-14204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13766-13910]:Block[14060-14204]"
    }, {
      "left" : "t.emit(\"</\" + t.dataBuffer.toString());",
      "right" : "t.emit(\"</\" + t.dataBuffer.toString());",
      "info" : "ExpressionStatement[13784-13823]:ExpressionStatement[14078-14117]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[13840-13854]:ExpressionStatement[14134-14148]"
    }, {
      "left" : "t.transition(ScriptData);",
      "right" : "t.transition(ScriptData);",
      "info" : "ExpressionStatement[13871-13896]:ExpressionStatement[14165-14190]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13964-13968]:PrimitiveType[14258-14262]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[13969-13973]:SimpleName[14263-14267]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[13974-13985]:SingleVariableDeclaration[14268-14279]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[13987-14004]:SingleVariableDeclaration[14281-14298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14006-14221]:Block[14300-14515]"
    }, {
      "left" : "if (r.matches('-'))",
      "right" : "if (r.matches('-'))",
      "info" : "IfStatement[14020-14211]:IfStatement[14314-14505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14040-14148]:Block[14334-14442]"
    }, {
      "left" : "t.emit('-');",
      "right" : "t.emit('-');",
      "info" : "ExpressionStatement[14058-14070]:ExpressionStatement[14352-14364]"
    }, {
      "left" : "t.advanceTransition(ScriptDataEscapeStartDash);",
      "right" : "t.advanceTransition(ScriptDataEscapeStartDash);",
      "info" : "ExpressionStatement[14087-14134]:ExpressionStatement[14381-14428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14154-14211]:Block[14448-14505]"
    }, {
      "left" : "t.transition(ScriptData);",
      "right" : "t.transition(ScriptData);",
      "info" : "ExpressionStatement[14172-14197]:ExpressionStatement[14466-14491]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14269-14273]:PrimitiveType[14563-14567]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[14274-14278]:SimpleName[14568-14572]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[14279-14290]:SingleVariableDeclaration[14573-14584]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[14292-14309]:SingleVariableDeclaration[14586-14603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14311-14526]:Block[14605-14820]"
    }, {
      "left" : "if (r.matches('-'))",
      "right" : "if (r.matches('-'))",
      "info" : "IfStatement[14325-14516]:IfStatement[14619-14810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14345-14453]:Block[14639-14747]"
    }, {
      "left" : "t.emit('-');",
      "right" : "t.emit('-');",
      "info" : "ExpressionStatement[14363-14375]:ExpressionStatement[14657-14669]"
    }, {
      "left" : "t.advanceTransition(ScriptDataEscapedDashDash);",
      "right" : "t.advanceTransition(ScriptDataEscapedDashDash);",
      "info" : "ExpressionStatement[14392-14439]:ExpressionStatement[14686-14733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14459-14516]:Block[14753-14810]"
    }, {
      "left" : "t.transition(ScriptData);",
      "right" : "t.transition(ScriptData);",
      "info" : "ExpressionStatement[14477-14502]:ExpressionStatement[14771-14796]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14566-14570]:PrimitiveType[14860-14864]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[14571-14575]:SimpleName[14865-14869]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[14576-14587]:SingleVariableDeclaration[14870-14881]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[14589-14606]:SingleVariableDeclaration[14883-14900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14608-15383]:Block[14902-15677]"
    }, {
      "left" : "if (r.isEmpty())",
      "right" : "if (r.isEmpty())",
      "info" : "IfStatement[14622-14748]:IfStatement[14916-15042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14639-14748]:Block[14933-15042]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[14657-14674]:ExpressionStatement[14951-14968]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[14691-14710]:ExpressionStatement[14985-15004]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[14727-14734]:ReturnStatement[15021-15028]"
    }, {
      "left" : "switch (r.current()) {\n                case '-':\n                    t.emit('-');\n                    t.advanceTransition(ScriptDataEscapedDash);\n                    break;\n                case '<':\n                    t.advanceTransition(ScriptDataEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                default:\n                    String data = r.consumeToAny('-', '<', nullChar);\n                    t.emit(data);\n            }",
      "right" : "switch (r.current()) {\n                case '-':\n                    t.emit('-');\n                    t.advanceTransition(ScriptDataEscapedDash);\n                    break;\n                case '<':\n                    t.advanceTransition(ScriptDataEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                default:\n                    String data = r.consumeToAny('-', '<', nullChar);\n                    t.emit(data);\n            }",
      "info" : "SwitchStatement[14762-15373]:SwitchStatement[15056-15667]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[14801-14810]:SwitchCase[15095-15104]"
    }, {
      "left" : "t.emit('-');",
      "right" : "t.emit('-');",
      "info" : "ExpressionStatement[14831-14843]:ExpressionStatement[15125-15137]"
    }, {
      "left" : "t.advanceTransition(ScriptDataEscapedDash);",
      "right" : "t.advanceTransition(ScriptDataEscapedDash);",
      "info" : "ExpressionStatement[14864-14907]:ExpressionStatement[15158-15201]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14928-14934]:BreakStatement[15222-15228]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[14951-14960]:SwitchCase[15245-15254]"
    }, {
      "left" : "t.advanceTransition(ScriptDataEscapedLessthanSign);",
      "right" : "t.advanceTransition(ScriptDataEscapedLessthanSign);",
      "info" : "ExpressionStatement[14981-15032]:ExpressionStatement[15275-15326]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15053-15059]:BreakStatement[15347-15353]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[15076-15090]:SwitchCase[15370-15384]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[15111-15125]:ExpressionStatement[15405-15419]"
    }, {
      "left" : "r.advance();",
      "right" : "r.advance();",
      "info" : "ExpressionStatement[15146-15158]:ExpressionStatement[15440-15452]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[15179-15203]:ExpressionStatement[15473-15497]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15224-15230]:BreakStatement[15518-15524]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[15247-15255]:SwitchCase[15541-15549]"
    }, {
      "left" : "String data = r.consumeToAny('-', '<', nullChar);",
      "right" : "String data = r.consumeToAny('-', '<', nullChar);",
      "info" : "VariableDeclarationStatement[15276-15325]:VariableDeclarationStatement[15570-15619]"
    }, {
      "left" : "t.emit(data);",
      "right" : "t.emit(data);",
      "info" : "ExpressionStatement[15346-15359]:ExpressionStatement[15640-15653]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15427-15431]:PrimitiveType[15721-15725]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[15432-15436]:SimpleName[15726-15730]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[15437-15448]:SingleVariableDeclaration[15731-15742]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[15450-15467]:SingleVariableDeclaration[15744-15761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15469-16256]:Block[15763-16550]"
    }, {
      "left" : "if (r.isEmpty())",
      "right" : "if (r.isEmpty())",
      "info" : "IfStatement[15483-15609]:IfStatement[15777-15903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15500-15609]:Block[15794-15903]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[15518-15535]:ExpressionStatement[15812-15829]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[15552-15571]:ExpressionStatement[15846-15865]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[15588-15595]:ReturnStatement[15882-15889]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[15623-15644]:VariableDeclarationStatement[15917-15938]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    t.transition(ScriptDataEscapedDashDash);\n                    break;\n                case '<':\n                    t.transition(ScriptDataEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataEscaped);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataEscaped);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    t.transition(ScriptDataEscapedDashDash);\n                    break;\n                case '<':\n                    t.transition(ScriptDataEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataEscaped);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataEscaped);\n            }",
      "info" : "SwitchStatement[15657-16246]:SwitchStatement[15951-16540]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[15686-15695]:SwitchCase[15980-15989]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[15716-15726]:ExpressionStatement[16010-16020]"
    }, {
      "left" : "t.transition(ScriptDataEscapedDashDash);",
      "right" : "t.transition(ScriptDataEscapedDashDash);",
      "info" : "ExpressionStatement[15747-15787]:ExpressionStatement[16041-16081]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15808-15814]:BreakStatement[16102-16108]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[15831-15840]:SwitchCase[16125-16134]"
    }, {
      "left" : "t.transition(ScriptDataEscapedLessthanSign);",
      "right" : "t.transition(ScriptDataEscapedLessthanSign);",
      "info" : "ExpressionStatement[15861-15905]:ExpressionStatement[16155-16199]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15926-15932]:BreakStatement[16220-16226]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[15949-15963]:SwitchCase[16243-16257]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[15984-15998]:ExpressionStatement[16278-16292]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[16019-16043]:ExpressionStatement[16313-16337]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[16064-16096]:ExpressionStatement[16358-16390]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16117-16123]:BreakStatement[16411-16417]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[16140-16148]:SwitchCase[16434-16442]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[16169-16179]:ExpressionStatement[16463-16473]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[16200-16232]:ExpressionStatement[16494-16526]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16304-16308]:PrimitiveType[16598-16602]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[16309-16313]:SimpleName[16603-16607]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[16314-16325]:SingleVariableDeclaration[16608-16619]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[16327-16344]:SingleVariableDeclaration[16621-16638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16346-17202]:Block[16640-17496]"
    }, {
      "left" : "if (r.isEmpty())",
      "right" : "if (r.isEmpty())",
      "info" : "IfStatement[16360-16486]:IfStatement[16654-16780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16377-16486]:Block[16671-16780]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[16395-16412]:ExpressionStatement[16689-16706]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[16429-16448]:ExpressionStatement[16723-16742]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[16465-16472]:ReturnStatement[16759-16766]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[16500-16521]:VariableDeclarationStatement[16794-16815]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    break;\n                case '<':\n                    t.transition(ScriptDataEscapedLessthanSign);\n                    break;\n                case '>':\n                    t.emit(c);\n                    t.transition(ScriptData);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataEscaped);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataEscaped);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    break;\n                case '<':\n                    t.transition(ScriptDataEscapedLessthanSign);\n                    break;\n                case '>':\n                    t.emit(c);\n                    t.transition(ScriptData);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataEscaped);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataEscaped);\n            }",
      "info" : "SwitchStatement[16534-17192]:SwitchStatement[16828-17486]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[16563-16572]:SwitchCase[16857-16866]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[16593-16603]:ExpressionStatement[16887-16897]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16624-16630]:BreakStatement[16918-16924]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[16647-16656]:SwitchCase[16941-16950]"
    }, {
      "left" : "t.transition(ScriptDataEscapedLessthanSign);",
      "right" : "t.transition(ScriptDataEscapedLessthanSign);",
      "info" : "ExpressionStatement[16677-16721]:ExpressionStatement[16971-17015]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16742-16748]:BreakStatement[17036-17042]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[16765-16774]:SwitchCase[17059-17068]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[16795-16805]:ExpressionStatement[17089-17099]"
    }, {
      "left" : "t.transition(ScriptData);",
      "right" : "t.transition(ScriptData);",
      "info" : "ExpressionStatement[16826-16851]:ExpressionStatement[17120-17145]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16872-16878]:BreakStatement[17166-17172]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[16895-16909]:SwitchCase[17189-17203]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[16930-16944]:ExpressionStatement[17224-17238]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[16965-16989]:ExpressionStatement[17259-17283]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[17010-17042]:ExpressionStatement[17304-17336]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17063-17069]:BreakStatement[17357-17363]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[17086-17094]:SwitchCase[17380-17388]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[17115-17125]:ExpressionStatement[17409-17419]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[17146-17178]:ExpressionStatement[17440-17472]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17254-17258]:PrimitiveType[17548-17552]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[17259-17263]:SimpleName[17553-17557]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[17264-17275]:SingleVariableDeclaration[17558-17569]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[17277-17294]:SingleVariableDeclaration[17571-17588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17296-17822]:Block[17590-18116]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[17310-17812]:IfStatement[17604-18106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17333-17568]:Block[17627-17862]"
    }, {
      "left" : "t.createTempBuffer();",
      "right" : "t.createTempBuffer();",
      "info" : "ExpressionStatement[17351-17372]:ExpressionStatement[17645-17666]"
    }, {
      "left" : "t.dataBuffer.append(Character.toLowerCase(r.current()));",
      "right" : "t.dataBuffer.append(Character.toLowerCase(r.current()));",
      "info" : "ExpressionStatement[17389-17445]:ExpressionStatement[17683-17739]"
    }, {
      "left" : "t.emit(\"<\" + r.current());",
      "right" : "t.emit(\"<\" + r.current());",
      "info" : "ExpressionStatement[17462-17488]:ExpressionStatement[17756-17782]"
    }, {
      "left" : "t.advanceTransition(ScriptDataDoubleEscapeStart);",
      "right" : "t.advanceTransition(ScriptDataDoubleEscapeStart);",
      "info" : "ExpressionStatement[17505-17554]:ExpressionStatement[17799-17848]"
    }, {
      "left" : "if (r.matches('/'))",
      "right" : "if (r.matches('/'))",
      "info" : "IfStatement[17574-17812]:IfStatement[17868-18106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17594-17713]:Block[17888-18007]"
    }, {
      "left" : "t.createTempBuffer();",
      "right" : "t.createTempBuffer();",
      "info" : "ExpressionStatement[17612-17633]:ExpressionStatement[17906-17927]"
    }, {
      "left" : "t.advanceTransition(ScriptDataEscapedEndTagOpen);",
      "right" : "t.advanceTransition(ScriptDataEscapedEndTagOpen);",
      "info" : "ExpressionStatement[17650-17699]:ExpressionStatement[17944-17993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17719-17812]:Block[18013-18106]"
    }, {
      "left" : "t.emit('<');",
      "right" : "t.emit('<');",
      "info" : "ExpressionStatement[17737-17749]:ExpressionStatement[18031-18043]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[17766-17798]:ExpressionStatement[18060-18092]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17872-17876]:PrimitiveType[18166-18170]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[17877-17881]:SimpleName[18171-18175]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[17882-17893]:SingleVariableDeclaration[18176-18187]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[17895-17912]:SingleVariableDeclaration[18189-18206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17914-18315]:Block[18208-18609]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[17928-18305]:IfStatement[18222-18599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17951-18205]:Block[18245-18499]"
    }, {
      "left" : "t.createTagPending(false);",
      "right" : "t.createTagPending(false);",
      "info" : "ExpressionStatement[17969-17995]:ExpressionStatement[18263-18289]"
    }, {
      "left" : "t.tagPending.appendTagName(Character.toLowerCase(r.current()));",
      "right" : "t.tagPending.appendTagName(Character.toLowerCase(r.current()));",
      "info" : "ExpressionStatement[18012-18075]:ExpressionStatement[18306-18369]"
    }, {
      "left" : "t.dataBuffer.append(r.current());",
      "right" : "t.dataBuffer.append(r.current());",
      "info" : "ExpressionStatement[18092-18125]:ExpressionStatement[18386-18419]"
    }, {
      "left" : "t.advanceTransition(ScriptDataEscapedEndTagName);",
      "right" : "t.advanceTransition(ScriptDataEscapedEndTagName);",
      "info" : "ExpressionStatement[18142-18191]:ExpressionStatement[18436-18485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18211-18305]:Block[18505-18599]"
    }, {
      "left" : "t.emit(\"</\");",
      "right" : "t.emit(\"</\");",
      "info" : "ExpressionStatement[18229-18242]:ExpressionStatement[18523-18536]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[18259-18291]:ExpressionStatement[18553-18585]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18365-18369]:PrimitiveType[18659-18663]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[18370-18374]:SimpleName[18664-18668]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[18375-18386]:SingleVariableDeclaration[18669-18680]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[18388-18405]:SingleVariableDeclaration[18682-18699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18407-19804]:Block[18701-20098]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[18421-18676]:IfStatement[18715-18970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18444-18676]:Block[18738-18970]"
    }, {
      "left" : "String name = r.consumeLetterSequence();",
      "right" : "String name = r.consumeLetterSequence();",
      "info" : "VariableDeclarationStatement[18462-18502]:VariableDeclarationStatement[18756-18796]"
    }, {
      "left" : "t.tagPending.appendTagName(name.toLowerCase());",
      "right" : "t.tagPending.appendTagName(name.toLowerCase());",
      "info" : "ExpressionStatement[18519-18566]:ExpressionStatement[18813-18860]"
    }, {
      "left" : "t.dataBuffer.append(name);",
      "right" : "t.dataBuffer.append(name);",
      "info" : "ExpressionStatement[18583-18609]:ExpressionStatement[18877-18903]"
    }, {
      "left" : "r.advance();",
      "right" : "r.advance();",
      "info" : "ExpressionStatement[18626-18638]:ExpressionStatement[18920-18932]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[18655-18662]:ReturnStatement[18949-18956]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[18690-18711]:VariableDeclarationStatement[18984-19005]"
    }, {
      "left" : "boolean handled = true;",
      "right" : "boolean handled = true;",
      "info" : "VariableDeclarationStatement[18724-18747]:VariableDeclarationStatement[19018-19041]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    if (t.isAppropriateEndTagToken())\n                        t.transition(BeforeAttributeName);\n                    else\n                        handled = false;\n                    break;\n                case '/':\n                    if (t.isAppropriateEndTagToken())\n                        t.transition(SelfClosingStartTag);\n                    else\n                        handled = false;\n                    break;\n                case '>':\n                    if (t.isAppropriateEndTagToken()) {\n                        t.emitTagPending();\n                        t.transition(Data);\n                    }\n                    else\n                        handled = false;\n                    break;\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    if (t.isAppropriateEndTagToken())\n                        t.transition(BeforeAttributeName);\n                    else\n                        handled = false;\n                    break;\n                case '/':\n                    if (t.isAppropriateEndTagToken())\n                        t.transition(SelfClosingStartTag);\n                    else\n                        handled = false;\n                    break;\n                case '>':\n                    if (t.isAppropriateEndTagToken()) {\n                        t.emitTagPending();\n                        t.transition(Data);\n                    }\n                    else\n                        handled = false;\n                    break;\n            }",
      "info" : "SwitchStatement[18760-19616]:SwitchStatement[19054-19910]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[18789-18799]:SwitchCase[19083-19093]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[18816-18826]:SwitchCase[19110-19120]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[18843-18853]:SwitchCase[19137-19147]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[18870-18879]:SwitchCase[19164-19173]"
    }, {
      "left" : "if (t.isAppropriateEndTagToken())",
      "right" : "if (t.isAppropriateEndTagToken())",
      "info" : "IfStatement[18900-19058]:IfStatement[19194-19352]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[18958-18992]:ExpressionStatement[19252-19286]"
    }, {
      "left" : "handled = false;",
      "right" : "handled = false;",
      "info" : "ExpressionStatement[19042-19058]:ExpressionStatement[19336-19352]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19079-19085]:BreakStatement[19373-19379]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[19102-19111]:SwitchCase[19396-19405]"
    }, {
      "left" : "if (t.isAppropriateEndTagToken())",
      "right" : "if (t.isAppropriateEndTagToken())",
      "info" : "IfStatement[19132-19290]:IfStatement[19426-19584]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[19190-19224]:ExpressionStatement[19484-19518]"
    }, {
      "left" : "handled = false;",
      "right" : "handled = false;",
      "info" : "ExpressionStatement[19274-19290]:ExpressionStatement[19568-19584]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19311-19317]:BreakStatement[19605-19611]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[19334-19343]:SwitchCase[19628-19637]"
    }, {
      "left" : "if (t.isAppropriateEndTagToken())",
      "right" : "if (t.isAppropriateEndTagToken())",
      "info" : "IfStatement[19364-19575]:IfStatement[19658-19869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19398-19509]:Block[19692-19803]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[19424-19443]:ExpressionStatement[19718-19737]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[19468-19487]:ExpressionStatement[19762-19781]"
    }, {
      "left" : "handled = false;",
      "right" : "handled = false;",
      "info" : "ExpressionStatement[19559-19575]:ExpressionStatement[19853-19869]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19596-19602]:BreakStatement[19890-19896]"
    }, {
      "left" : "if (!handled)",
      "right" : "if (!handled)",
      "info" : "IfStatement[19629-19794]:IfStatement[19923-20088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19643-19794]:Block[19937-20088]"
    }, {
      "left" : "t.emit(\"</\" + t.dataBuffer.toString());",
      "right" : "t.emit(\"</\" + t.dataBuffer.toString());",
      "info" : "ExpressionStatement[19661-19700]:ExpressionStatement[19955-19994]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[19717-19731]:ExpressionStatement[20011-20025]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[19748-19780]:ExpressionStatement[20042-20074]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19854-19858]:PrimitiveType[20148-20152]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[19859-19863]:SimpleName[20153-20157]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[19864-19875]:SingleVariableDeclaration[20158-20169]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[19877-19894]:SingleVariableDeclaration[20171-20188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19896-20741]:Block[20190-21035]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[19910-20116]:IfStatement[20204-20410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19933-20116]:Block[20227-20410]"
    }, {
      "left" : "String name = r.consumeLetterSequence();",
      "right" : "String name = r.consumeLetterSequence();",
      "info" : "VariableDeclarationStatement[19951-19991]:VariableDeclarationStatement[20245-20285]"
    }, {
      "left" : "t.dataBuffer.append(name.toLowerCase());",
      "right" : "t.dataBuffer.append(name.toLowerCase());",
      "info" : "ExpressionStatement[20008-20048]:ExpressionStatement[20302-20342]"
    }, {
      "left" : "t.emit(name);",
      "right" : "t.emit(name);",
      "info" : "ExpressionStatement[20065-20078]:ExpressionStatement[20359-20372]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[20095-20102]:ReturnStatement[20389-20396]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[20130-20151]:VariableDeclarationStatement[20424-20445]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                case '/':\n                case '>':\n                    if (t.dataBuffer.toString().equals(\"script\"))\n                        t.transition(ScriptDataDoubleEscaped);\n                    else\n                        t.transition(ScriptDataEscaped);\n                    t.emit(c);\n                    break;\n                default:\n                    r.unconsume();\n                    t.transition(ScriptDataEscaped);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                case '/':\n                case '>':\n                    if (t.dataBuffer.toString().equals(\"script\"))\n                        t.transition(ScriptDataDoubleEscaped);\n                    else\n                        t.transition(ScriptDataEscaped);\n                    t.emit(c);\n                    break;\n                default:\n                    r.unconsume();\n                    t.transition(ScriptDataEscaped);\n            }",
      "info" : "SwitchStatement[20164-20731]:SwitchStatement[20458-21025]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[20193-20203]:SwitchCase[20487-20497]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[20220-20230]:SwitchCase[20514-20524]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[20247-20257]:SwitchCase[20541-20551]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[20274-20283]:SwitchCase[20568-20577]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[20300-20309]:SwitchCase[20594-20603]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[20326-20335]:SwitchCase[20620-20629]"
    }, {
      "left" : "if (t.dataBuffer.toString().equals(\"script\"))",
      "right" : "if (t.dataBuffer.toString().equals(\"script\"))",
      "info" : "IfStatement[20356-20546]:IfStatement[20650-20840]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscaped);",
      "right" : "t.transition(ScriptDataDoubleEscaped);",
      "info" : "ExpressionStatement[20426-20464]:ExpressionStatement[20720-20758]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[20514-20546]:ExpressionStatement[20808-20840]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[20567-20577]:ExpressionStatement[20861-20871]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20598-20604]:BreakStatement[20892-20898]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[20621-20629]:SwitchCase[20915-20923]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[20650-20664]:ExpressionStatement[20944-20958]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[20685-20717]:ExpressionStatement[20979-21011]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20787-20791]:PrimitiveType[21081-21085]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[20792-20796]:SimpleName[21086-21090]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[20797-20808]:SingleVariableDeclaration[21091-21102]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[20810-20827]:SingleVariableDeclaration[21104-21121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20829-21660]:Block[21123-21954]"
    }, {
      "left" : "char c = r.current();",
      "right" : "char c = r.current();",
      "info" : "VariableDeclarationStatement[20843-20864]:VariableDeclarationStatement[21137-21158]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    t.advanceTransition(ScriptDataDoubleEscapedDash);\n                    break;\n                case '<':\n                    t.emit(c);\n                    t.advanceTransition(ScriptDataDoubleEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    String data = r.consumeToAny('-', '<', nullChar);\n                    t.emit(data);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    t.advanceTransition(ScriptDataDoubleEscapedDash);\n                    break;\n                case '<':\n                    t.emit(c);\n                    t.advanceTransition(ScriptDataDoubleEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    String data = r.consumeToAny('-', '<', nullChar);\n                    t.emit(data);\n            }",
      "info" : "SwitchStatement[20877-21650]:SwitchStatement[21171-21944]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[20906-20915]:SwitchCase[21200-21209]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[20936-20946]:ExpressionStatement[21230-21240]"
    }, {
      "left" : "t.advanceTransition(ScriptDataDoubleEscapedDash);",
      "right" : "t.advanceTransition(ScriptDataDoubleEscapedDash);",
      "info" : "ExpressionStatement[20967-21016]:ExpressionStatement[21261-21310]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21037-21043]:BreakStatement[21331-21337]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[21060-21069]:SwitchCase[21354-21363]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[21090-21100]:ExpressionStatement[21384-21394]"
    }, {
      "left" : "t.advanceTransition(ScriptDataDoubleEscapedLessthanSign);",
      "right" : "t.advanceTransition(ScriptDataDoubleEscapedLessthanSign);",
      "info" : "ExpressionStatement[21121-21178]:ExpressionStatement[21415-21472]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21199-21205]:BreakStatement[21493-21499]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[21222-21236]:SwitchCase[21516-21530]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[21257-21271]:ExpressionStatement[21551-21565]"
    }, {
      "left" : "r.advance();",
      "right" : "r.advance();",
      "info" : "ExpressionStatement[21292-21304]:ExpressionStatement[21586-21598]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[21325-21349]:ExpressionStatement[21619-21643]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21370-21376]:BreakStatement[21664-21670]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[21393-21402]:SwitchCase[21687-21696]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[21423-21440]:ExpressionStatement[21717-21734]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[21461-21480]:ExpressionStatement[21755-21774]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21501-21507]:BreakStatement[21795-21801]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[21524-21532]:SwitchCase[21818-21826]"
    }, {
      "left" : "String data = r.consumeToAny('-', '<', nullChar);",
      "right" : "String data = r.consumeToAny('-', '<', nullChar);",
      "info" : "VariableDeclarationStatement[21553-21602]:VariableDeclarationStatement[21847-21896]"
    }, {
      "left" : "t.emit(data);",
      "right" : "t.emit(data);",
      "info" : "ExpressionStatement[21623-21636]:ExpressionStatement[21917-21930]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21710-21714]:PrimitiveType[22004-22008]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[21715-21719]:SimpleName[22009-22013]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[21720-21731]:SingleVariableDeclaration[22014-22025]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[21733-21750]:SingleVariableDeclaration[22027-22044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21752-22585]:Block[22046-22879]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[21766-21787]:VariableDeclarationStatement[22060-22081]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscapedDashDash);\n                    break;\n                case '<':\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataDoubleEscaped);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscaped);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscapedDashDash);\n                    break;\n                case '<':\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataDoubleEscaped);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscaped);\n            }",
      "info" : "SwitchStatement[21800-22575]:SwitchStatement[22094-22869]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[21829-21838]:SwitchCase[22123-22132]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[21859-21869]:ExpressionStatement[22153-22163]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscapedDashDash);",
      "right" : "t.transition(ScriptDataDoubleEscapedDashDash);",
      "info" : "ExpressionStatement[21890-21936]:ExpressionStatement[22184-22230]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21957-21963]:BreakStatement[22251-22257]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[21980-21989]:SwitchCase[22274-22283]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[22010-22020]:ExpressionStatement[22304-22314]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscapedLessthanSign);",
      "right" : "t.transition(ScriptDataDoubleEscapedLessthanSign);",
      "info" : "ExpressionStatement[22041-22091]:ExpressionStatement[22335-22385]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22112-22118]:BreakStatement[22406-22412]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[22135-22149]:SwitchCase[22429-22443]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[22170-22184]:ExpressionStatement[22464-22478]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[22205-22229]:ExpressionStatement[22499-22523]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscaped);",
      "right" : "t.transition(ScriptDataDoubleEscaped);",
      "info" : "ExpressionStatement[22250-22288]:ExpressionStatement[22544-22582]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22309-22315]:BreakStatement[22603-22609]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[22332-22341]:SwitchCase[22626-22635]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[22362-22379]:ExpressionStatement[22656-22673]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[22400-22419]:ExpressionStatement[22694-22713]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22440-22446]:BreakStatement[22734-22740]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[22463-22471]:SwitchCase[22757-22765]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[22492-22502]:ExpressionStatement[22786-22796]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscaped);",
      "right" : "t.transition(ScriptDataDoubleEscaped);",
      "info" : "ExpressionStatement[22523-22561]:ExpressionStatement[22817-22855]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22639-22643]:PrimitiveType[22933-22937]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[22644-22648]:SimpleName[22938-22942]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[22649-22660]:SingleVariableDeclaration[22943-22954]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[22662-22679]:SingleVariableDeclaration[22956-22973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22681-23550]:Block[22975-23844]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[22695-22716]:VariableDeclarationStatement[22989-23010]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    break;\n                case '<':\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscapedLessthanSign);\n                    break;\n                case '>':\n                    t.emit(c);\n                    t.transition(ScriptData);\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataDoubleEscaped);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscaped);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    break;\n                case '<':\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscapedLessthanSign);\n                    break;\n                case '>':\n                    t.emit(c);\n                    t.transition(ScriptData);\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataDoubleEscaped);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscaped);\n            }",
      "info" : "SwitchStatement[22729-23540]:SwitchStatement[23023-23834]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[22758-22767]:SwitchCase[23052-23061]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[22788-22798]:ExpressionStatement[23082-23092]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22819-22825]:BreakStatement[23113-23119]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[22842-22851]:SwitchCase[23136-23145]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[22872-22882]:ExpressionStatement[23166-23176]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscapedLessthanSign);",
      "right" : "t.transition(ScriptDataDoubleEscapedLessthanSign);",
      "info" : "ExpressionStatement[22903-22953]:ExpressionStatement[23197-23247]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22974-22980]:BreakStatement[23268-23274]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[22997-23006]:SwitchCase[23291-23300]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[23027-23037]:ExpressionStatement[23321-23331]"
    }, {
      "left" : "t.transition(ScriptData);",
      "right" : "t.transition(ScriptData);",
      "info" : "ExpressionStatement[23058-23083]:ExpressionStatement[23352-23377]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[23100-23114]:SwitchCase[23394-23408]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[23135-23149]:ExpressionStatement[23429-23443]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[23170-23194]:ExpressionStatement[23464-23488]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscaped);",
      "right" : "t.transition(ScriptDataDoubleEscaped);",
      "info" : "ExpressionStatement[23215-23253]:ExpressionStatement[23509-23547]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23274-23280]:BreakStatement[23568-23574]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[23297-23306]:SwitchCase[23591-23600]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[23327-23344]:ExpressionStatement[23621-23638]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[23365-23384]:ExpressionStatement[23659-23678]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23405-23411]:BreakStatement[23699-23705]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[23428-23436]:SwitchCase[23722-23730]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[23457-23467]:ExpressionStatement[23751-23761]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscaped);",
      "right" : "t.transition(ScriptDataDoubleEscaped);",
      "info" : "ExpressionStatement[23488-23526]:ExpressionStatement[23782-23820]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23608-23612]:PrimitiveType[23902-23906]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[23613-23617]:SimpleName[23907-23911]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[23618-23629]:SingleVariableDeclaration[23912-23923]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[23631-23648]:SingleVariableDeclaration[23925-23942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23650-23916]:Block[23944-24210]"
    }, {
      "left" : "if (r.matches('/'))",
      "right" : "if (r.matches('/'))",
      "info" : "IfStatement[23664-23906]:IfStatement[23958-24200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23684-23830]:Block[23978-24124]"
    }, {
      "left" : "t.emit('/');",
      "right" : "t.emit('/');",
      "info" : "ExpressionStatement[23702-23714]:ExpressionStatement[23996-24008]"
    }, {
      "left" : "t.createTempBuffer();",
      "right" : "t.createTempBuffer();",
      "info" : "ExpressionStatement[23731-23752]:ExpressionStatement[24025-24046]"
    }, {
      "left" : "t.advanceTransition(ScriptDataDoubleEscapeEnd);",
      "right" : "t.advanceTransition(ScriptDataDoubleEscapeEnd);",
      "info" : "ExpressionStatement[23769-23816]:ExpressionStatement[24063-24110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23836-23906]:Block[24130-24200]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscaped);",
      "right" : "t.transition(ScriptDataDoubleEscaped);",
      "info" : "ExpressionStatement[23854-23892]:ExpressionStatement[24148-24186]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23964-23968]:PrimitiveType[24258-24262]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[23969-23973]:SimpleName[24263-24267]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[23974-23985]:SingleVariableDeclaration[24268-24279]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[23987-24004]:SingleVariableDeclaration[24281-24298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24006-24857]:Block[24300-25151]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[24020-24226]:IfStatement[24314-24520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24043-24226]:Block[24337-24520]"
    }, {
      "left" : "String name = r.consumeLetterSequence();",
      "right" : "String name = r.consumeLetterSequence();",
      "info" : "VariableDeclarationStatement[24061-24101]:VariableDeclarationStatement[24355-24395]"
    }, {
      "left" : "t.dataBuffer.append(name.toLowerCase());",
      "right" : "t.dataBuffer.append(name.toLowerCase());",
      "info" : "ExpressionStatement[24118-24158]:ExpressionStatement[24412-24452]"
    }, {
      "left" : "t.emit(name);",
      "right" : "t.emit(name);",
      "info" : "ExpressionStatement[24175-24188]:ExpressionStatement[24469-24482]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[24205-24212]:ReturnStatement[24499-24506]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[24240-24261]:VariableDeclarationStatement[24534-24555]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                case '/':\n                case '>':\n                    if (t.dataBuffer.toString().equals(\"script\"))\n                        t.transition(ScriptDataEscaped);\n                    else\n                        t.transition(ScriptDataDoubleEscaped);\n                    t.emit(c);\n                    break;\n                default:\n                    r.unconsume();\n                    t.transition(ScriptDataDoubleEscaped);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                case '/':\n                case '>':\n                    if (t.dataBuffer.toString().equals(\"script\"))\n                        t.transition(ScriptDataEscaped);\n                    else\n                        t.transition(ScriptDataDoubleEscaped);\n                    t.emit(c);\n                    break;\n                default:\n                    r.unconsume();\n                    t.transition(ScriptDataDoubleEscaped);\n            }",
      "info" : "SwitchStatement[24274-24847]:SwitchStatement[24568-25141]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[24303-24313]:SwitchCase[24597-24607]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[24330-24340]:SwitchCase[24624-24634]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[24357-24367]:SwitchCase[24651-24661]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[24384-24393]:SwitchCase[24678-24687]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[24410-24419]:SwitchCase[24704-24713]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[24436-24445]:SwitchCase[24730-24739]"
    }, {
      "left" : "if (t.dataBuffer.toString().equals(\"script\"))",
      "right" : "if (t.dataBuffer.toString().equals(\"script\"))",
      "info" : "IfStatement[24466-24656]:IfStatement[24760-24950]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[24536-24568]:ExpressionStatement[24830-24862]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscaped);",
      "right" : "t.transition(ScriptDataDoubleEscaped);",
      "info" : "ExpressionStatement[24618-24656]:ExpressionStatement[24912-24950]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[24677-24687]:ExpressionStatement[24971-24981]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24708-24714]:BreakStatement[25002-25008]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[24731-24739]:SwitchCase[25025-25033]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[24760-24774]:ExpressionStatement[25054-25068]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscaped);",
      "right" : "t.transition(ScriptDataDoubleEscaped);",
      "info" : "ExpressionStatement[24795-24833]:ExpressionStatement[25089-25127]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24928-24932]:PrimitiveType[25222-25226]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[24933-24937]:SimpleName[25227-25231]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[24938-24949]:SingleVariableDeclaration[25232-25243]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[24951-24968]:SingleVariableDeclaration[25245-25262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24970-26309]:Block[25264-26603]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[24984-25005]:VariableDeclarationStatement[25278-25299]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    break; // ignore whitespace\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.newAttribute();\n                    r.unconsume();\n                    t.transition(AttributeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '\"':\n                case '\\'':\n                case '<':\n                case '=':\n                    t.error(this);\n                    t.tagPending.newAttribute();\n                    t.tagPending.appendAttributeName(c);\n                    t.transition(AttributeName);\n                    break;\n                default: // A-Z, anything else\n                    t.tagPending.newAttribute();\n                    r.unconsume();\n                    t.transition(AttributeName);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    break; // ignore whitespace\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.newAttribute();\n                    r.unconsume();\n                    t.transition(AttributeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '\"':\n                case '\\'':\n                case '<':\n                case '=':\n                    t.error(this);\n                    t.tagPending.newAttribute();\n                    t.tagPending.appendAttributeName(c);\n                    t.transition(AttributeName);\n                    break;\n                default: // A-Z, anything else\n                    t.tagPending.newAttribute();\n                    r.unconsume();\n                    t.transition(AttributeName);\n            }",
      "info" : "SwitchStatement[25018-26299]:SwitchStatement[25312-26593]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[25047-25057]:SwitchCase[25341-25351]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[25074-25084]:SwitchCase[25368-25378]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[25101-25111]:SwitchCase[25395-25405]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[25128-25137]:SwitchCase[25422-25431]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25158-25164]:BreakStatement[25452-25458]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[25202-25211]:SwitchCase[25496-25505]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[25232-25266]:ExpressionStatement[25526-25560]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25287-25293]:BreakStatement[25581-25587]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[25310-25319]:SwitchCase[25604-25613]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[25340-25359]:ExpressionStatement[25634-25653]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[25380-25399]:ExpressionStatement[25674-25693]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25420-25426]:BreakStatement[25714-25720]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[25443-25457]:SwitchCase[25737-25751]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[25478-25492]:ExpressionStatement[25772-25786]"
    }, {
      "left" : "t.tagPending.newAttribute();",
      "right" : "t.tagPending.newAttribute();",
      "info" : "ExpressionStatement[25513-25541]:ExpressionStatement[25807-25835]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[25562-25576]:ExpressionStatement[25856-25870]"
    }, {
      "left" : "t.transition(AttributeName);",
      "right" : "t.transition(AttributeName);",
      "info" : "ExpressionStatement[25597-25625]:ExpressionStatement[25891-25919]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25646-25652]:BreakStatement[25940-25946]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[25669-25678]:SwitchCase[25963-25972]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[25699-25716]:ExpressionStatement[25993-26010]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[25737-25756]:ExpressionStatement[26031-26050]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25777-25783]:BreakStatement[26071-26077]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[25800-25809]:SwitchCase[26094-26103]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[25826-25836]:SwitchCase[26120-26130]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[25853-25862]:SwitchCase[26147-26156]"
    }, {
      "left" : "case '=':",
      "right" : "case '=':",
      "info" : "SwitchCase[25879-25888]:SwitchCase[26173-26182]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[25909-25923]:ExpressionStatement[26203-26217]"
    }, {
      "left" : "t.tagPending.newAttribute();",
      "right" : "t.tagPending.newAttribute();",
      "info" : "ExpressionStatement[25944-25972]:ExpressionStatement[26238-26266]"
    }, {
      "left" : "t.tagPending.appendAttributeName(c);",
      "right" : "t.tagPending.appendAttributeName(c);",
      "info" : "ExpressionStatement[25993-26029]:ExpressionStatement[26287-26323]"
    }, {
      "left" : "t.transition(AttributeName);",
      "right" : "t.transition(AttributeName);",
      "info" : "ExpressionStatement[26050-26078]:ExpressionStatement[26344-26372]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26099-26105]:BreakStatement[26393-26399]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[26122-26130]:SwitchCase[26416-26424]"
    }, {
      "left" : "t.tagPending.newAttribute();",
      "right" : "t.tagPending.newAttribute();",
      "info" : "ExpressionStatement[26173-26201]:ExpressionStatement[26467-26495]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[26222-26236]:ExpressionStatement[26516-26530]"
    }, {
      "left" : "t.transition(AttributeName);",
      "right" : "t.transition(AttributeName);",
      "info" : "ExpressionStatement[26257-26285]:ExpressionStatement[26551-26579]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26383-26387]:PrimitiveType[26677-26681]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[26388-26392]:SimpleName[26682-26686]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[26393-26404]:SingleVariableDeclaration[26687-26698]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[26406-26423]:SingleVariableDeclaration[26700-26717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26425-27744]:Block[26719-28038]"
    }, {
      "left" : "String name = r.consumeToAny('\\t', '\\n', '\\f', ' ', '/', '=', '>', nullChar, '\"', '\\'', '<');",
      "right" : "String name = r.consumeToAny('\\t', '\\n', '\\f', ' ', '/', '=', '>', nullChar, '\"', '\\'', '<');",
      "info" : "VariableDeclarationStatement[26439-26532]:VariableDeclarationStatement[26733-26826]"
    }, {
      "left" : "t.tagPending.appendAttributeName(name.toLowerCase());",
      "right" : "t.tagPending.appendAttributeName(name.toLowerCase());",
      "info" : "ExpressionStatement[26545-26598]:ExpressionStatement[26839-26892]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[26612-26633]:VariableDeclarationStatement[26906-26927]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(AfterAttributeName);\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '=':\n                    t.transition(BeforeAttributeValue);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeName(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '\"':\n                case '\\'':\n                case '<':\n                    t.error(this);\n                    t.tagPending.appendAttributeName(c);\n                // no default, as covered in consumeToAny\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(AfterAttributeName);\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '=':\n                    t.transition(BeforeAttributeValue);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeName(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '\"':\n                case '\\'':\n                case '<':\n                    t.error(this);\n                    t.tagPending.appendAttributeName(c);\n                // no default, as covered in consumeToAny\n            }",
      "info" : "SwitchStatement[26646-27734]:SwitchStatement[26940-28028]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[26675-26685]:SwitchCase[26969-26979]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[26702-26712]:SwitchCase[26996-27006]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[26729-26739]:SwitchCase[27023-27033]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[26756-26765]:SwitchCase[27050-27059]"
    }, {
      "left" : "t.transition(AfterAttributeName);",
      "right" : "t.transition(AfterAttributeName);",
      "info" : "ExpressionStatement[26786-26819]:ExpressionStatement[27080-27113]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26840-26846]:BreakStatement[27134-27140]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[26863-26872]:SwitchCase[27157-27166]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[26893-26927]:ExpressionStatement[27187-27221]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26948-26954]:BreakStatement[27242-27248]"
    }, {
      "left" : "case '=':",
      "right" : "case '=':",
      "info" : "SwitchCase[26971-26980]:SwitchCase[27265-27274]"
    }, {
      "left" : "t.transition(BeforeAttributeValue);",
      "right" : "t.transition(BeforeAttributeValue);",
      "info" : "ExpressionStatement[27001-27036]:ExpressionStatement[27295-27330]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27057-27063]:BreakStatement[27351-27357]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[27080-27089]:SwitchCase[27374-27383]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[27110-27129]:ExpressionStatement[27404-27423]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[27150-27169]:ExpressionStatement[27444-27463]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27190-27196]:BreakStatement[27484-27490]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[27213-27227]:SwitchCase[27507-27521]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[27248-27262]:ExpressionStatement[27542-27556]"
    }, {
      "left" : "t.tagPending.appendAttributeName(replacementChar);",
      "right" : "t.tagPending.appendAttributeName(replacementChar);",
      "info" : "ExpressionStatement[27283-27333]:ExpressionStatement[27577-27627]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27354-27360]:BreakStatement[27648-27654]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[27377-27386]:SwitchCase[27671-27680]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[27407-27424]:ExpressionStatement[27701-27718]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[27445-27464]:ExpressionStatement[27739-27758]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27485-27491]:BreakStatement[27779-27785]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[27508-27517]:SwitchCase[27802-27811]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[27534-27544]:SwitchCase[27828-27838]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[27561-27570]:SwitchCase[27855-27864]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[27591-27605]:ExpressionStatement[27885-27899]"
    }, {
      "left" : "t.tagPending.appendAttributeName(c);",
      "right" : "t.tagPending.appendAttributeName(c);",
      "info" : "ExpressionStatement[27626-27662]:ExpressionStatement[27920-27956]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27785-27789]:PrimitiveType[28079-28083]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[27790-27794]:SimpleName[28084-28088]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[27795-27806]:SingleVariableDeclaration[28089-28100]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[27808-27825]:SingleVariableDeclaration[28102-28119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27827-29245]:Block[28121-29539]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[27841-27862]:VariableDeclarationStatement[28135-28156]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    // ignore\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '=':\n                    t.transition(BeforeAttributeValue);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeName(replacementChar);\n                    t.transition(AttributeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '\"':\n                case '\\'':\n                case '<':\n                    t.error(this);\n                    t.tagPending.newAttribute();\n                    t.tagPending.appendAttributeName(c);\n                    t.transition(AttributeName);\n                    break;\n                default: // A-Z, anything else\n                    t.tagPending.newAttribute();\n                    r.unconsume();\n                    t.transition(AttributeName);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    // ignore\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '=':\n                    t.transition(BeforeAttributeValue);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeName(replacementChar);\n                    t.transition(AttributeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '\"':\n                case '\\'':\n                case '<':\n                    t.error(this);\n                    t.tagPending.newAttribute();\n                    t.tagPending.appendAttributeName(c);\n                    t.transition(AttributeName);\n                    break;\n                default: // A-Z, anything else\n                    t.tagPending.newAttribute();\n                    r.unconsume();\n                    t.transition(AttributeName);\n            }",
      "info" : "SwitchStatement[27875-29235]:SwitchStatement[28169-29529]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[27904-27914]:SwitchCase[28198-28208]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[27931-27941]:SwitchCase[28225-28235]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[27958-27968]:SwitchCase[28252-28262]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[27985-27994]:SwitchCase[28279-28288]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28045-28051]:BreakStatement[28339-28345]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[28068-28077]:SwitchCase[28362-28371]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[28098-28132]:ExpressionStatement[28392-28426]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28153-28159]:BreakStatement[28447-28453]"
    }, {
      "left" : "case '=':",
      "right" : "case '=':",
      "info" : "SwitchCase[28176-28185]:SwitchCase[28470-28479]"
    }, {
      "left" : "t.transition(BeforeAttributeValue);",
      "right" : "t.transition(BeforeAttributeValue);",
      "info" : "ExpressionStatement[28206-28241]:ExpressionStatement[28500-28535]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28262-28268]:BreakStatement[28556-28562]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[28285-28294]:SwitchCase[28579-28588]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[28315-28334]:ExpressionStatement[28609-28628]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[28355-28374]:ExpressionStatement[28649-28668]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28395-28401]:BreakStatement[28689-28695]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[28418-28432]:SwitchCase[28712-28726]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[28453-28467]:ExpressionStatement[28747-28761]"
    }, {
      "left" : "t.tagPending.appendAttributeName(replacementChar);",
      "right" : "t.tagPending.appendAttributeName(replacementChar);",
      "info" : "ExpressionStatement[28488-28538]:ExpressionStatement[28782-28832]"
    }, {
      "left" : "t.transition(AttributeName);",
      "right" : "t.transition(AttributeName);",
      "info" : "ExpressionStatement[28559-28587]:ExpressionStatement[28853-28881]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28608-28614]:BreakStatement[28902-28908]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[28631-28640]:SwitchCase[28925-28934]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[28661-28678]:ExpressionStatement[28955-28972]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[28699-28718]:ExpressionStatement[28993-29012]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28739-28745]:BreakStatement[29033-29039]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[28762-28771]:SwitchCase[29056-29065]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[28788-28798]:SwitchCase[29082-29092]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[28815-28824]:SwitchCase[29109-29118]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[28845-28859]:ExpressionStatement[29139-29153]"
    }, {
      "left" : "t.tagPending.newAttribute();",
      "right" : "t.tagPending.newAttribute();",
      "info" : "ExpressionStatement[28880-28908]:ExpressionStatement[29174-29202]"
    }, {
      "left" : "t.tagPending.appendAttributeName(c);",
      "right" : "t.tagPending.appendAttributeName(c);",
      "info" : "ExpressionStatement[28929-28965]:ExpressionStatement[29223-29259]"
    }, {
      "left" : "t.transition(AttributeName);",
      "right" : "t.transition(AttributeName);",
      "info" : "ExpressionStatement[28986-29014]:ExpressionStatement[29280-29308]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29035-29041]:BreakStatement[29329-29335]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[29058-29066]:SwitchCase[29352-29360]"
    }, {
      "left" : "t.tagPending.newAttribute();",
      "right" : "t.tagPending.newAttribute();",
      "info" : "ExpressionStatement[29109-29137]:ExpressionStatement[29403-29431]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[29158-29172]:ExpressionStatement[29452-29466]"
    }, {
      "left" : "t.transition(AttributeName);",
      "right" : "t.transition(AttributeName);",
      "info" : "ExpressionStatement[29193-29221]:ExpressionStatement[29487-29515]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29288-29292]:PrimitiveType[29582-29586]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[29293-29297]:SimpleName[29587-29591]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[29298-29309]:SingleVariableDeclaration[29592-29603]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[29311-29328]:SingleVariableDeclaration[29605-29622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29330-30857]:Block[29624-31151]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[29344-29365]:VariableDeclarationStatement[29638-29659]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    // ignore\n                    break;\n                case '\"':\n                    t.transition(AttributeValue_doubleQuoted);\n                    break;\n                case '&':\n                    r.unconsume();\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                case '\\'':\n                    t.transition(AttributeValue_singleQuoted);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case '<':\n                case '=':\n                case '`':\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(c);\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                default:\n                    r.unconsume();\n                    t.transition(AttributeValue_unquoted);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    // ignore\n                    break;\n                case '\"':\n                    t.transition(AttributeValue_doubleQuoted);\n                    break;\n                case '&':\n                    r.unconsume();\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                case '\\'':\n                    t.transition(AttributeValue_singleQuoted);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case '<':\n                case '=':\n                case '`':\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(c);\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                default:\n                    r.unconsume();\n                    t.transition(AttributeValue_unquoted);\n            }",
      "info" : "SwitchStatement[29378-30847]:SwitchStatement[29672-31141]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[29407-29417]:SwitchCase[29701-29711]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[29434-29444]:SwitchCase[29728-29738]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[29461-29471]:SwitchCase[29755-29765]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[29488-29497]:SwitchCase[29782-29791]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29548-29554]:BreakStatement[29842-29848]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[29571-29580]:SwitchCase[29865-29874]"
    }, {
      "left" : "t.transition(AttributeValue_doubleQuoted);",
      "right" : "t.transition(AttributeValue_doubleQuoted);",
      "info" : "ExpressionStatement[29601-29643]:ExpressionStatement[29895-29937]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29664-29670]:BreakStatement[29958-29964]"
    }, {
      "left" : "case '&':",
      "right" : "case '&':",
      "info" : "SwitchCase[29687-29696]:SwitchCase[29981-29990]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[29717-29731]:ExpressionStatement[30011-30025]"
    }, {
      "left" : "t.transition(AttributeValue_unquoted);",
      "right" : "t.transition(AttributeValue_unquoted);",
      "info" : "ExpressionStatement[29752-29790]:ExpressionStatement[30046-30084]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29811-29817]:BreakStatement[30105-30111]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[29834-29844]:SwitchCase[30128-30138]"
    }, {
      "left" : "t.transition(AttributeValue_singleQuoted);",
      "right" : "t.transition(AttributeValue_singleQuoted);",
      "info" : "ExpressionStatement[29865-29907]:ExpressionStatement[30159-30201]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29928-29934]:BreakStatement[30222-30228]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[29951-29965]:SwitchCase[30245-30259]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[29986-30000]:ExpressionStatement[30280-30294]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(replacementChar);",
      "right" : "t.tagPending.appendAttributeValue(replacementChar);",
      "info" : "ExpressionStatement[30021-30072]:ExpressionStatement[30315-30366]"
    }, {
      "left" : "t.transition(AttributeValue_unquoted);",
      "right" : "t.transition(AttributeValue_unquoted);",
      "info" : "ExpressionStatement[30093-30131]:ExpressionStatement[30387-30425]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30152-30158]:BreakStatement[30446-30452]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[30175-30184]:SwitchCase[30469-30478]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[30205-30222]:ExpressionStatement[30499-30516]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[30243-30262]:ExpressionStatement[30537-30556]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30283-30289]:BreakStatement[30577-30583]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[30306-30315]:SwitchCase[30600-30609]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[30336-30350]:ExpressionStatement[30630-30644]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[30371-30390]:ExpressionStatement[30665-30684]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[30411-30430]:ExpressionStatement[30705-30724]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30451-30457]:BreakStatement[30745-30751]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[30474-30483]:SwitchCase[30768-30777]"
    }, {
      "left" : "case '=':",
      "right" : "case '=':",
      "info" : "SwitchCase[30500-30509]:SwitchCase[30794-30803]"
    }, {
      "left" : "case '`':",
      "right" : "case '`':",
      "info" : "SwitchCase[30526-30535]:SwitchCase[30820-30829]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[30556-30570]:ExpressionStatement[30850-30864]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(c);",
      "right" : "t.tagPending.appendAttributeValue(c);",
      "info" : "ExpressionStatement[30591-30628]:ExpressionStatement[30885-30922]"
    }, {
      "left" : "t.transition(AttributeValue_unquoted);",
      "right" : "t.transition(AttributeValue_unquoted);",
      "info" : "ExpressionStatement[30649-30687]:ExpressionStatement[30943-30981]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30708-30714]:BreakStatement[31002-31008]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[30731-30739]:SwitchCase[31025-31033]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[30760-30774]:ExpressionStatement[31054-31068]"
    }, {
      "left" : "t.transition(AttributeValue_unquoted);",
      "right" : "t.transition(AttributeValue_unquoted);",
      "info" : "ExpressionStatement[30795-30833]:ExpressionStatement[31089-31127]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[30907-30911]:PrimitiveType[31201-31205]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[30912-30916]:SimpleName[31206-31210]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[30917-30928]:SingleVariableDeclaration[31211-31222]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[30930-30947]:SingleVariableDeclaration[31224-31241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30949-31984]:Block[31243-32278]"
    }, {
      "left" : "String value = r.consumeToAny('\"', '&', nullChar);",
      "right" : "String value = r.consumeToAny('\"', '&', nullChar);",
      "info" : "VariableDeclarationStatement[30963-31013]:VariableDeclarationStatement[31257-31307]"
    }, {
      "left" : "if (value.length() > 0)",
      "right" : "if (value.length() > 0)",
      "info" : "IfStatement[31026-31107]:IfStatement[31320-31401]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(value);",
      "right" : "t.tagPending.appendAttributeValue(value);",
      "info" : "ExpressionStatement[31066-31107]:ExpressionStatement[31360-31401]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[31121-31142]:VariableDeclarationStatement[31415-31436]"
    }, {
      "left" : "switch (c) {\n                case '\"':\n                    t.transition(AfterAttributeValue_quoted);\n                    break;\n                case '&':\n                    Character ref = t.consumeCharacterReference('\"', true);\n                    if (ref != null)\n                        t.tagPending.appendAttributeValue(ref);\n                    else\n                        t.tagPending.appendAttributeValue('&');\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                // no default, handled in consume to any above\n            }",
      "right" : "switch (c) {\n                case '\"':\n                    t.transition(AfterAttributeValue_quoted);\n                    break;\n                case '&':\n                    Character ref = t.consumeCharacterReference('\"', true);\n                    if (ref != null)\n                        t.tagPending.appendAttributeValue(ref);\n                    else\n                        t.tagPending.appendAttributeValue('&');\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                // no default, handled in consume to any above\n            }",
      "info" : "SwitchStatement[31155-31974]:SwitchStatement[31449-32268]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[31184-31193]:SwitchCase[31478-31487]"
    }, {
      "left" : "t.transition(AfterAttributeValue_quoted);",
      "right" : "t.transition(AfterAttributeValue_quoted);",
      "info" : "ExpressionStatement[31214-31255]:ExpressionStatement[31508-31549]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31276-31282]:BreakStatement[31570-31576]"
    }, {
      "left" : "case '&':",
      "right" : "case '&':",
      "info" : "SwitchCase[31299-31308]:SwitchCase[31593-31602]"
    }, {
      "left" : "Character ref = t.consumeCharacterReference('\"', true);",
      "right" : "Character ref = t.consumeCharacterReference('\"', true);",
      "info" : "VariableDeclarationStatement[31329-31384]:VariableDeclarationStatement[31623-31678]"
    }, {
      "left" : "if (ref != null)",
      "right" : "if (ref != null)",
      "info" : "IfStatement[31405-31574]:IfStatement[31699-31868]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(ref);",
      "right" : "t.tagPending.appendAttributeValue(ref);",
      "info" : "ExpressionStatement[31446-31485]:ExpressionStatement[31740-31779]"
    }, {
      "left" : "t.tagPending.appendAttributeValue('&');",
      "right" : "t.tagPending.appendAttributeValue('&');",
      "info" : "ExpressionStatement[31535-31574]:ExpressionStatement[31829-31868]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31595-31601]:BreakStatement[31889-31895]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[31618-31632]:SwitchCase[31912-31926]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[31653-31667]:ExpressionStatement[31947-31961]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(replacementChar);",
      "right" : "t.tagPending.appendAttributeValue(replacementChar);",
      "info" : "ExpressionStatement[31688-31739]:ExpressionStatement[31982-32033]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31760-31766]:BreakStatement[32054-32060]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[31783-31792]:SwitchCase[32077-32086]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[31813-31830]:ExpressionStatement[32107-32124]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[31851-31870]:ExpressionStatement[32145-32164]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31891-31897]:BreakStatement[32185-32191]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[32034-32038]:PrimitiveType[32328-32332]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[32039-32043]:SimpleName[32333-32337]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[32044-32055]:SingleVariableDeclaration[32338-32349]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[32057-32074]:SingleVariableDeclaration[32351-32368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32076-33114]:Block[32370-33408]"
    }, {
      "left" : "String value = r.consumeToAny('\\'', '&', nullChar);",
      "right" : "String value = r.consumeToAny('\\'', '&', nullChar);",
      "info" : "VariableDeclarationStatement[32090-32141]:VariableDeclarationStatement[32384-32435]"
    }, {
      "left" : "if (value.length() > 0)",
      "right" : "if (value.length() > 0)",
      "info" : "IfStatement[32154-32235]:IfStatement[32448-32529]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(value);",
      "right" : "t.tagPending.appendAttributeValue(value);",
      "info" : "ExpressionStatement[32194-32235]:ExpressionStatement[32488-32529]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[32249-32270]:VariableDeclarationStatement[32543-32564]"
    }, {
      "left" : "switch (c) {\n                case '\\'':\n                    t.transition(AfterAttributeValue_quoted);\n                    break;\n                case '&':\n                    Character ref = t.consumeCharacterReference('\\'', true);\n                    if (ref != null)\n                        t.tagPending.appendAttributeValue(ref);\n                    else\n                        t.tagPending.appendAttributeValue('&');\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                // no default, handled in consume to any above\n            }",
      "right" : "switch (c) {\n                case '\\'':\n                    t.transition(AfterAttributeValue_quoted);\n                    break;\n                case '&':\n                    Character ref = t.consumeCharacterReference('\\'', true);\n                    if (ref != null)\n                        t.tagPending.appendAttributeValue(ref);\n                    else\n                        t.tagPending.appendAttributeValue('&');\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                // no default, handled in consume to any above\n            }",
      "info" : "SwitchStatement[32283-33104]:SwitchStatement[32577-33398]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[32312-32322]:SwitchCase[32606-32616]"
    }, {
      "left" : "t.transition(AfterAttributeValue_quoted);",
      "right" : "t.transition(AfterAttributeValue_quoted);",
      "info" : "ExpressionStatement[32343-32384]:ExpressionStatement[32637-32678]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32405-32411]:BreakStatement[32699-32705]"
    }, {
      "left" : "case '&':",
      "right" : "case '&':",
      "info" : "SwitchCase[32428-32437]:SwitchCase[32722-32731]"
    }, {
      "left" : "Character ref = t.consumeCharacterReference('\\'', true);",
      "right" : "Character ref = t.consumeCharacterReference('\\'', true);",
      "info" : "VariableDeclarationStatement[32458-32514]:VariableDeclarationStatement[32752-32808]"
    }, {
      "left" : "if (ref != null)",
      "right" : "if (ref != null)",
      "info" : "IfStatement[32535-32704]:IfStatement[32829-32998]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(ref);",
      "right" : "t.tagPending.appendAttributeValue(ref);",
      "info" : "ExpressionStatement[32576-32615]:ExpressionStatement[32870-32909]"
    }, {
      "left" : "t.tagPending.appendAttributeValue('&');",
      "right" : "t.tagPending.appendAttributeValue('&');",
      "info" : "ExpressionStatement[32665-32704]:ExpressionStatement[32959-32998]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32725-32731]:BreakStatement[33019-33025]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[32748-32762]:SwitchCase[33042-33056]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[32783-32797]:ExpressionStatement[33077-33091]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(replacementChar);",
      "right" : "t.tagPending.appendAttributeValue(replacementChar);",
      "info" : "ExpressionStatement[32818-32869]:ExpressionStatement[33112-33163]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32890-32896]:BreakStatement[33184-33190]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[32913-32922]:SwitchCase[33207-33216]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[32943-32960]:ExpressionStatement[33237-33254]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[32981-33000]:ExpressionStatement[33275-33294]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33021-33027]:BreakStatement[33315-33321]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[33160-33164]:PrimitiveType[33454-33458]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[33165-33169]:SimpleName[33459-33463]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[33170-33181]:SingleVariableDeclaration[33464-33475]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[33183-33200]:SingleVariableDeclaration[33477-33494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33202-34745]:Block[33496-35039]"
    }, {
      "left" : "String value = r.consumeToAny('\\t', '\\n', '\\f', ' ', '&', '>', nullChar, '\"', '\\'', '<', '=', '`');",
      "right" : "String value = r.consumeToAny('\\t', '\\n', '\\f', ' ', '&', '>', nullChar, '\"', '\\'', '<', '=', '`');",
      "info" : "VariableDeclarationStatement[33216-33315]:VariableDeclarationStatement[33510-33609]"
    }, {
      "left" : "if (value.length() > 0)",
      "right" : "if (value.length() > 0)",
      "info" : "IfStatement[33328-33409]:IfStatement[33622-33703]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(value);",
      "right" : "t.tagPending.appendAttributeValue(value);",
      "info" : "ExpressionStatement[33368-33409]:ExpressionStatement[33662-33703]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[33423-33444]:VariableDeclarationStatement[33717-33738]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeAttributeName);\n                    break;\n                case '&':\n                    Character ref = t.consumeCharacterReference('>', true);\n                    if (ref != null)\n                        t.tagPending.appendAttributeValue(ref);\n                    else\n                        t.tagPending.appendAttributeValue('&');\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '\"':\n                case '\\'':\n                case '<':\n                case '=':\n                case '`':\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(c);\n                    break;\n                // no default, handled in consume to any above\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeAttributeName);\n                    break;\n                case '&':\n                    Character ref = t.consumeCharacterReference('>', true);\n                    if (ref != null)\n                        t.tagPending.appendAttributeValue(ref);\n                    else\n                        t.tagPending.appendAttributeValue('&');\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '\"':\n                case '\\'':\n                case '<':\n                case '=':\n                case '`':\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(c);\n                    break;\n                // no default, handled in consume to any above\n            }",
      "info" : "SwitchStatement[33457-34734]:SwitchStatement[33751-35028]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[33486-33496]:SwitchCase[33780-33790]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[33513-33523]:SwitchCase[33807-33817]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[33540-33550]:SwitchCase[33834-33844]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[33567-33576]:SwitchCase[33861-33870]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[33597-33631]:ExpressionStatement[33891-33925]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33652-33658]:BreakStatement[33946-33952]"
    }, {
      "left" : "case '&':",
      "right" : "case '&':",
      "info" : "SwitchCase[33675-33684]:SwitchCase[33969-33978]"
    }, {
      "left" : "Character ref = t.consumeCharacterReference('>', true);",
      "right" : "Character ref = t.consumeCharacterReference('>', true);",
      "info" : "VariableDeclarationStatement[33705-33760]:VariableDeclarationStatement[33999-34054]"
    }, {
      "left" : "if (ref != null)",
      "right" : "if (ref != null)",
      "info" : "IfStatement[33781-33950]:IfStatement[34075-34244]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(ref);",
      "right" : "t.tagPending.appendAttributeValue(ref);",
      "info" : "ExpressionStatement[33822-33861]:ExpressionStatement[34116-34155]"
    }, {
      "left" : "t.tagPending.appendAttributeValue('&');",
      "right" : "t.tagPending.appendAttributeValue('&');",
      "info" : "ExpressionStatement[33911-33950]:ExpressionStatement[34205-34244]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33971-33977]:BreakStatement[34265-34271]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[33994-34003]:SwitchCase[34288-34297]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[34024-34043]:ExpressionStatement[34318-34337]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[34064-34083]:ExpressionStatement[34358-34377]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34104-34110]:BreakStatement[34398-34404]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[34127-34141]:SwitchCase[34421-34435]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[34162-34176]:ExpressionStatement[34456-34470]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(replacementChar);",
      "right" : "t.tagPending.appendAttributeValue(replacementChar);",
      "info" : "ExpressionStatement[34197-34248]:ExpressionStatement[34491-34542]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34269-34275]:BreakStatement[34563-34569]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[34292-34301]:SwitchCase[34586-34595]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[34322-34339]:ExpressionStatement[34616-34633]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[34360-34379]:ExpressionStatement[34654-34673]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34400-34406]:BreakStatement[34694-34700]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[34423-34432]:SwitchCase[34717-34726]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[34449-34459]:SwitchCase[34743-34753]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[34476-34485]:SwitchCase[34770-34779]"
    }, {
      "left" : "case '=':",
      "right" : "case '=':",
      "info" : "SwitchCase[34502-34511]:SwitchCase[34796-34805]"
    }, {
      "left" : "case '`':",
      "right" : "case '`':",
      "info" : "SwitchCase[34528-34537]:SwitchCase[34822-34831]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[34558-34572]:ExpressionStatement[34852-34866]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(c);",
      "right" : "t.tagPending.appendAttributeValue(c);",
      "info" : "ExpressionStatement[34593-34630]:ExpressionStatement[34887-34924]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34651-34657]:BreakStatement[34945-34951]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34857-34861]:PrimitiveType[35151-35155]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[34862-34866]:SimpleName[35156-35160]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[34867-34878]:SingleVariableDeclaration[35161-35172]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[34880-34897]:SingleVariableDeclaration[35174-35191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34899-35695]:Block[35193-35989]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[34913-34934]:VariableDeclarationStatement[35207-35228]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeAttributeName);\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    r.unconsume();\n                    t.transition(BeforeAttributeName);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeAttributeName);\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    r.unconsume();\n                    t.transition(BeforeAttributeName);\n            }",
      "info" : "SwitchStatement[34947-35684]:SwitchStatement[35241-35978]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[34976-34986]:SwitchCase[35270-35280]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[35003-35013]:SwitchCase[35297-35307]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[35030-35040]:SwitchCase[35324-35334]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[35057-35066]:SwitchCase[35351-35360]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[35087-35121]:ExpressionStatement[35381-35415]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35142-35148]:BreakStatement[35436-35442]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[35165-35174]:SwitchCase[35459-35468]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[35195-35229]:ExpressionStatement[35489-35523]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35250-35256]:BreakStatement[35544-35550]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[35273-35282]:SwitchCase[35567-35576]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[35303-35322]:ExpressionStatement[35597-35616]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[35343-35362]:ExpressionStatement[35637-35656]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35383-35389]:BreakStatement[35677-35683]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[35406-35415]:SwitchCase[35700-35709]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[35436-35453]:ExpressionStatement[35730-35747]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[35474-35493]:ExpressionStatement[35768-35787]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35514-35520]:BreakStatement[35808-35814]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[35537-35545]:SwitchCase[35831-35839]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[35566-35580]:ExpressionStatement[35860-35874]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[35601-35615]:ExpressionStatement[35895-35909]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[35636-35670]:ExpressionStatement[35930-35964]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[35737-35741]:PrimitiveType[36031-36035]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[35742-35746]:SimpleName[36036-36040]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[35747-35758]:SingleVariableDeclaration[36041-36052]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[35760-35777]:SingleVariableDeclaration[36054-36071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35779-36295]:Block[36073-36589]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[35793-35814]:VariableDeclarationStatement[36087-36108]"
    }, {
      "left" : "switch (c) {\n                case '>':\n                    t.tagPending.selfClosing = true;\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.transition(BeforeAttributeName);\n            }",
      "right" : "switch (c) {\n                case '>':\n                    t.tagPending.selfClosing = true;\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.transition(BeforeAttributeName);\n            }",
      "info" : "SwitchStatement[35827-36285]:SwitchStatement[36121-36579]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[35856-35865]:SwitchCase[36150-36159]"
    }, {
      "left" : "t.tagPending.selfClosing = true;",
      "right" : "t.tagPending.selfClosing = true;",
      "info" : "ExpressionStatement[35886-35918]:ExpressionStatement[36180-36212]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[35939-35958]:ExpressionStatement[36233-36252]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[35979-35998]:ExpressionStatement[36273-36292]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[36019-36025]:BreakStatement[36313-36319]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[36042-36051]:SwitchCase[36336-36345]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[36072-36089]:ExpressionStatement[36366-36383]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[36110-36129]:ExpressionStatement[36404-36423]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[36150-36156]:BreakStatement[36444-36450]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[36173-36181]:SwitchCase[36467-36475]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[36202-36216]:ExpressionStatement[36496-36510]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[36237-36271]:ExpressionStatement[36531-36565]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36330-36334]:PrimitiveType[36624-36628]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[36335-36339]:SimpleName[36629-36633]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[36340-36351]:SingleVariableDeclaration[36634-36645]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[36353-36370]:SingleVariableDeclaration[36647-36664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36372-36787]:Block[36666-37081]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[36532-36546]:ExpressionStatement[36826-36840]"
    }, {
      "left" : "Token.Comment comment = new Token.Comment();",
      "right" : "Token.Comment comment = new Token.Comment();",
      "info" : "VariableDeclarationStatement[36559-36603]:VariableDeclarationStatement[36853-36897]"
    }, {
      "left" : "comment.data.append(r.consumeTo('>'));",
      "right" : "comment.data.append(r.consumeTo('>'));",
      "info" : "ExpressionStatement[36616-36654]:ExpressionStatement[36910-36948]"
    }, {
      "left" : "t.emit(comment);",
      "right" : "t.emit(comment);",
      "info" : "ExpressionStatement[36722-36738]:ExpressionStatement[37016-37032]"
    }, {
      "left" : "t.advanceTransition(Data);",
      "right" : "t.advanceTransition(Data);",
      "info" : "ExpressionStatement[36751-36777]:ExpressionStatement[37045-37071]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36831-36835]:PrimitiveType[37125-37129]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[36836-36840]:SimpleName[37130-37134]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[36841-36852]:SingleVariableDeclaration[37135-37146]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[36854-36871]:SingleVariableDeclaration[37148-37165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36873-37657]:Block[37167-37951]"
    }, {
      "left" : "if (r.matchConsume(\"--\"))",
      "right" : "if (r.matchConsume(\"--\"))",
      "info" : "IfStatement[36887-37647]:IfStatement[37181-37941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36913-37014]:Block[37207-37308]"
    }, {
      "left" : "t.createCommentPending();",
      "right" : "t.createCommentPending();",
      "info" : "ExpressionStatement[36931-36956]:ExpressionStatement[37225-37250]"
    }, {
      "left" : "t.transition(CommentStart);",
      "right" : "t.transition(CommentStart);",
      "info" : "ExpressionStatement[36973-37000]:ExpressionStatement[37267-37294]"
    }, {
      "left" : "if (r.matchConsumeIgnoreCase(\"DOCTYPE\"))",
      "right" : "if (r.matchConsumeIgnoreCase(\"DOCTYPE\"))",
      "info" : "IfStatement[37020-37647]:IfStatement[37314-37941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37061-37115]:Block[37355-37409]"
    }, {
      "left" : "t.transition(Doctype);",
      "right" : "t.transition(Doctype);",
      "info" : "ExpressionStatement[37079-37101]:ExpressionStatement[37373-37395]"
    }, {
      "left" : "if (r.matchConsume(\"[CDATA[\"))",
      "right" : "if (r.matchConsume(\"[CDATA[\"))",
      "info" : "IfStatement[37121-37647]:IfStatement[37415-37941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37152-37479]:Block[37446-37773]"
    }, {
      "left" : "t.transition(CdataSection);",
      "right" : "t.transition(CdataSection);",
      "info" : "ExpressionStatement[37438-37465]:ExpressionStatement[37732-37759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37485-37647]:Block[37779-37941]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[37503-37517]:ExpressionStatement[37797-37811]"
    }, {
      "left" : "t.advanceTransition(BogusComment);",
      "right" : "t.advanceTransition(BogusComment);",
      "info" : "ExpressionStatement[37534-37568]:ExpressionStatement[37828-37862]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[37692-37696]:PrimitiveType[37986-37990]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[37697-37701]:SimpleName[37991-37995]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[37702-37713]:SingleVariableDeclaration[37996-38007]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[37715-37732]:SingleVariableDeclaration[38009-38026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37734-38594]:Block[38028-38888]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[37748-37769]:VariableDeclarationStatement[38042-38063]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.transition(CommentStartDash);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(c);\n                    t.transition(Comment);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.transition(CommentStartDash);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(c);\n                    t.transition(Comment);\n            }",
      "info" : "SwitchStatement[37782-38584]:SwitchStatement[38076-38878]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[37811-37820]:SwitchCase[38105-38114]"
    }, {
      "left" : "t.transition(CommentStartDash);",
      "right" : "t.transition(CommentStartDash);",
      "info" : "ExpressionStatement[37841-37872]:ExpressionStatement[38135-38166]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[37893-37899]:BreakStatement[38187-38193]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[37916-37930]:SwitchCase[38210-38224]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[37951-37965]:ExpressionStatement[38245-38259]"
    }, {
      "left" : "t.commentPending.data.append(replacementChar);",
      "right" : "t.commentPending.data.append(replacementChar);",
      "info" : "ExpressionStatement[37986-38032]:ExpressionStatement[38280-38326]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[38053-38075]:ExpressionStatement[38347-38369]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38096-38102]:BreakStatement[38390-38396]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[38119-38128]:SwitchCase[38413-38422]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[38149-38163]:ExpressionStatement[38443-38457]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[38184-38207]:ExpressionStatement[38478-38501]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[38228-38247]:ExpressionStatement[38522-38541]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38268-38274]:BreakStatement[38562-38568]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[38291-38300]:SwitchCase[38585-38594]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[38321-38338]:ExpressionStatement[38615-38632]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[38359-38382]:ExpressionStatement[38653-38676]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[38403-38422]:ExpressionStatement[38697-38716]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38443-38449]:BreakStatement[38737-38743]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[38466-38474]:SwitchCase[38760-38768]"
    }, {
      "left" : "t.commentPending.data.append(c);",
      "right" : "t.commentPending.data.append(c);",
      "info" : "ExpressionStatement[38495-38527]:ExpressionStatement[38789-38821]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[38548-38570]:ExpressionStatement[38842-38864]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[38633-38637]:PrimitiveType[38927-38931]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[38638-38642]:SimpleName[38932-38936]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[38643-38654]:SingleVariableDeclaration[38937-38948]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[38656-38673]:SingleVariableDeclaration[38950-38967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38675-39535]:Block[38969-39829]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[38689-38710]:VariableDeclarationStatement[38983-39004]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.transition(CommentStartDash);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(c);\n                    t.transition(Comment);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.transition(CommentStartDash);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(c);\n                    t.transition(Comment);\n            }",
      "info" : "SwitchStatement[38723-39525]:SwitchStatement[39017-39819]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[38752-38761]:SwitchCase[39046-39055]"
    }, {
      "left" : "t.transition(CommentStartDash);",
      "right" : "t.transition(CommentStartDash);",
      "info" : "ExpressionStatement[38782-38813]:ExpressionStatement[39076-39107]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38834-38840]:BreakStatement[39128-39134]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[38857-38871]:SwitchCase[39151-39165]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[38892-38906]:ExpressionStatement[39186-39200]"
    }, {
      "left" : "t.commentPending.data.append(replacementChar);",
      "right" : "t.commentPending.data.append(replacementChar);",
      "info" : "ExpressionStatement[38927-38973]:ExpressionStatement[39221-39267]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[38994-39016]:ExpressionStatement[39288-39310]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39037-39043]:BreakStatement[39331-39337]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[39060-39069]:SwitchCase[39354-39363]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[39090-39104]:ExpressionStatement[39384-39398]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[39125-39148]:ExpressionStatement[39419-39442]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[39169-39188]:ExpressionStatement[39463-39482]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39209-39215]:BreakStatement[39503-39509]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[39232-39241]:SwitchCase[39526-39535]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[39262-39279]:ExpressionStatement[39556-39573]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[39300-39323]:ExpressionStatement[39594-39617]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[39344-39363]:ExpressionStatement[39638-39657]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39384-39390]:BreakStatement[39678-39684]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[39407-39415]:SwitchCase[39701-39709]"
    }, {
      "left" : "t.commentPending.data.append(c);",
      "right" : "t.commentPending.data.append(c);",
      "info" : "ExpressionStatement[39436-39468]:ExpressionStatement[39730-39762]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[39489-39511]:ExpressionStatement[39783-39805]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[39565-39569]:PrimitiveType[39859-39863]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[39570-39574]:SimpleName[39864-39868]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[39575-39586]:SingleVariableDeclaration[39869-39880]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[39588-39605]:SingleVariableDeclaration[39882-39899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39607-40242]:Block[39901-40536]"
    }, {
      "left" : "char c = r.current();",
      "right" : "char c = r.current();",
      "info" : "VariableDeclarationStatement[39621-39642]:VariableDeclarationStatement[39915-39936]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.advanceTransition(CommentEndDash);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(r.consumeToAny('-', nullChar));\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.advanceTransition(CommentEndDash);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(r.consumeToAny('-', nullChar));\n            }",
      "info" : "SwitchStatement[39655-40232]:SwitchStatement[39949-40526]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[39684-39693]:SwitchCase[39978-39987]"
    }, {
      "left" : "t.advanceTransition(CommentEndDash);",
      "right" : "t.advanceTransition(CommentEndDash);",
      "info" : "ExpressionStatement[39714-39750]:ExpressionStatement[40008-40044]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39771-39777]:BreakStatement[40065-40071]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[39794-39808]:SwitchCase[40088-40102]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[39829-39843]:ExpressionStatement[40123-40137]"
    }, {
      "left" : "t.commentPending.data.append(replacementChar);",
      "right" : "t.commentPending.data.append(replacementChar);",
      "info" : "ExpressionStatement[39864-39910]:ExpressionStatement[40158-40204]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39931-39937]:BreakStatement[40225-40231]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[39954-39963]:SwitchCase[40248-40257]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[39984-40001]:ExpressionStatement[40278-40295]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[40022-40045]:ExpressionStatement[40316-40339]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[40066-40085]:ExpressionStatement[40360-40379]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[40106-40112]:BreakStatement[40400-40406]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[40129-40137]:SwitchCase[40423-40431]"
    }, {
      "left" : "t.commentPending.data.append(r.consumeToAny('-', nullChar));",
      "right" : "t.commentPending.data.append(r.consumeToAny('-', nullChar));",
      "info" : "ExpressionStatement[40158-40218]:ExpressionStatement[40452-40512]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[40279-40283]:PrimitiveType[40573-40577]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[40284-40288]:SimpleName[40578-40582]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[40289-40300]:SingleVariableDeclaration[40583-40594]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[40302-40319]:SingleVariableDeclaration[40596-40613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40321-41027]:Block[40615-41321]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[40335-40356]:VariableDeclarationStatement[40629-40650]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.transition(CommentEnd);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append('-').append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append('-').append(c);\n                    t.transition(Comment);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.transition(CommentEnd);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append('-').append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append('-').append(c);\n                    t.transition(Comment);\n            }",
      "info" : "SwitchStatement[40369-41017]:SwitchStatement[40663-41311]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[40398-40407]:SwitchCase[40692-40701]"
    }, {
      "left" : "t.transition(CommentEnd);",
      "right" : "t.transition(CommentEnd);",
      "info" : "ExpressionStatement[40428-40453]:ExpressionStatement[40722-40747]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[40474-40480]:BreakStatement[40768-40774]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[40497-40511]:SwitchCase[40791-40805]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[40532-40546]:ExpressionStatement[40826-40840]"
    }, {
      "left" : "t.commentPending.data.append('-').append(replacementChar);",
      "right" : "t.commentPending.data.append('-').append(replacementChar);",
      "info" : "ExpressionStatement[40567-40625]:ExpressionStatement[40861-40919]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[40646-40668]:ExpressionStatement[40940-40962]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[40689-40695]:BreakStatement[40983-40989]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[40712-40721]:SwitchCase[41006-41015]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[40742-40759]:ExpressionStatement[41036-41053]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[40780-40803]:ExpressionStatement[41074-41097]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[40824-40843]:ExpressionStatement[41118-41137]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[40864-40870]:BreakStatement[41158-41164]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[40887-40895]:SwitchCase[41181-41189]"
    }, {
      "left" : "t.commentPending.data.append('-').append(c);",
      "right" : "t.commentPending.data.append('-').append(c);",
      "info" : "ExpressionStatement[40916-40960]:ExpressionStatement[41210-41254]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[40981-41003]:ExpressionStatement[41275-41297]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[41060-41064]:PrimitiveType[41354-41358]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[41065-41069]:SimpleName[41359-41363]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[41070-41081]:SingleVariableDeclaration[41364-41375]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[41083-41100]:SingleVariableDeclaration[41377-41394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41102-42164]:Block[41396-42458]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[41116-41137]:VariableDeclarationStatement[41410-41431]"
    }, {
      "left" : "switch (c) {\n                case '>':\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(\"--\").append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case '!':\n                    t.error(this);\n                    t.transition(CommentEndBang);\n                    break;\n                case '-':\n                    t.error(this);\n                    t.commentPending.data.append('-');\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.commentPending.data.append(\"--\").append(c);\n                    t.transition(Comment);\n            }",
      "right" : "switch (c) {\n                case '>':\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(\"--\").append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case '!':\n                    t.error(this);\n                    t.transition(CommentEndBang);\n                    break;\n                case '-':\n                    t.error(this);\n                    t.commentPending.data.append('-');\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.commentPending.data.append(\"--\").append(c);\n                    t.transition(Comment);\n            }",
      "info" : "SwitchStatement[41150-42154]:SwitchStatement[41444-42448]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[41179-41188]:SwitchCase[41473-41482]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[41209-41232]:ExpressionStatement[41503-41526]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[41253-41272]:ExpressionStatement[41547-41566]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[41293-41299]:BreakStatement[41587-41593]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[41316-41330]:SwitchCase[41610-41624]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[41351-41365]:ExpressionStatement[41645-41659]"
    }, {
      "left" : "t.commentPending.data.append(\"--\").append(replacementChar);",
      "right" : "t.commentPending.data.append(\"--\").append(replacementChar);",
      "info" : "ExpressionStatement[41386-41445]:ExpressionStatement[41680-41739]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[41466-41488]:ExpressionStatement[41760-41782]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[41509-41515]:BreakStatement[41803-41809]"
    }, {
      "left" : "case '!':",
      "right" : "case '!':",
      "info" : "SwitchCase[41532-41541]:SwitchCase[41826-41835]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[41562-41576]:ExpressionStatement[41856-41870]"
    }, {
      "left" : "t.transition(CommentEndBang);",
      "right" : "t.transition(CommentEndBang);",
      "info" : "ExpressionStatement[41597-41626]:ExpressionStatement[41891-41920]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[41647-41653]:BreakStatement[41941-41947]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[41670-41679]:SwitchCase[41964-41973]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[41700-41714]:ExpressionStatement[41994-42008]"
    }, {
      "left" : "t.commentPending.data.append('-');",
      "right" : "t.commentPending.data.append('-');",
      "info" : "ExpressionStatement[41735-41769]:ExpressionStatement[42029-42063]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[41790-41796]:BreakStatement[42084-42090]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[41813-41822]:SwitchCase[42107-42116]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[41843-41860]:ExpressionStatement[42137-42154]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[41881-41904]:ExpressionStatement[42175-42198]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[41925-41944]:ExpressionStatement[42219-42238]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[41965-41971]:BreakStatement[42259-42265]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[41988-41996]:SwitchCase[42282-42290]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[42017-42031]:ExpressionStatement[42311-42325]"
    }, {
      "left" : "t.commentPending.data.append(\"--\").append(c);",
      "right" : "t.commentPending.data.append(\"--\").append(c);",
      "info" : "ExpressionStatement[42052-42097]:ExpressionStatement[42346-42391]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[42118-42140]:ExpressionStatement[42412-42434]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[42201-42205]:PrimitiveType[42495-42499]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[42206-42210]:SimpleName[42500-42504]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[42211-42222]:SingleVariableDeclaration[42505-42516]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[42224-42241]:SingleVariableDeclaration[42518-42535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42243-43151]:Block[42537-43445]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[42257-42278]:VariableDeclarationStatement[42551-42572]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.commentPending.data.append(\"--!\");\n                    t.transition(CommentEndDash);\n                    break;\n                case '>':\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(\"--!\").append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(\"--!\").append(c);\n                    t.transition(Comment);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.commentPending.data.append(\"--!\");\n                    t.transition(CommentEndDash);\n                    break;\n                case '>':\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(\"--!\").append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(\"--!\").append(c);\n                    t.transition(Comment);\n            }",
      "info" : "SwitchStatement[42291-43141]:SwitchStatement[42585-43435]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[42320-42329]:SwitchCase[42614-42623]"
    }, {
      "left" : "t.commentPending.data.append(\"--!\");",
      "right" : "t.commentPending.data.append(\"--!\");",
      "info" : "ExpressionStatement[42350-42386]:ExpressionStatement[42644-42680]"
    }, {
      "left" : "t.transition(CommentEndDash);",
      "right" : "t.transition(CommentEndDash);",
      "info" : "ExpressionStatement[42407-42436]:ExpressionStatement[42701-42730]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[42457-42463]:BreakStatement[42751-42757]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[42480-42489]:SwitchCase[42774-42783]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[42510-42533]:ExpressionStatement[42804-42827]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[42554-42573]:ExpressionStatement[42848-42867]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[42594-42600]:BreakStatement[42888-42894]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[42617-42631]:SwitchCase[42911-42925]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[42652-42666]:ExpressionStatement[42946-42960]"
    }, {
      "left" : "t.commentPending.data.append(\"--!\").append(replacementChar);",
      "right" : "t.commentPending.data.append(\"--!\").append(replacementChar);",
      "info" : "ExpressionStatement[42687-42747]:ExpressionStatement[42981-43041]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[42768-42790]:ExpressionStatement[43062-43084]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[42811-42817]:BreakStatement[43105-43111]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[42834-42843]:SwitchCase[43128-43137]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[42864-42881]:ExpressionStatement[43158-43175]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[42902-42925]:ExpressionStatement[43196-43219]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[42946-42965]:ExpressionStatement[43240-43259]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[42986-42992]:BreakStatement[43280-43286]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[43009-43017]:SwitchCase[43303-43311]"
    }, {
      "left" : "t.commentPending.data.append(\"--!\").append(c);",
      "right" : "t.commentPending.data.append(\"--!\").append(c);",
      "info" : "ExpressionStatement[43038-43084]:ExpressionStatement[43332-43378]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[43105-43127]:ExpressionStatement[43399-43421]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[43181-43185]:PrimitiveType[43475-43479]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[43186-43190]:SimpleName[43480-43484]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[43191-43202]:SingleVariableDeclaration[43485-43496]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[43204-43221]:SingleVariableDeclaration[43498-43515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43223-43885]:Block[43517-44179]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[43237-43258]:VariableDeclarationStatement[43531-43552]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeDoctypeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.createDoctypePending();\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.transition(BeforeDoctypeName);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeDoctypeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.createDoctypePending();\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.transition(BeforeDoctypeName);\n            }",
      "info" : "SwitchStatement[43271-43875]:SwitchStatement[43565-44169]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[43300-43310]:SwitchCase[43594-43604]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[43327-43337]:SwitchCase[43621-43631]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[43354-43364]:SwitchCase[43648-43658]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[43381-43390]:SwitchCase[43675-43684]"
    }, {
      "left" : "t.transition(BeforeDoctypeName);",
      "right" : "t.transition(BeforeDoctypeName);",
      "info" : "ExpressionStatement[43411-43443]:ExpressionStatement[43705-43737]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[43464-43470]:BreakStatement[43758-43764]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[43487-43496]:SwitchCase[43781-43790]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[43517-43534]:ExpressionStatement[43811-43828]"
    }, {
      "left" : "t.createDoctypePending();",
      "right" : "t.createDoctypePending();",
      "info" : "ExpressionStatement[43555-43580]:ExpressionStatement[43849-43874]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[43601-43637]:ExpressionStatement[43895-43931]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[43658-43681]:ExpressionStatement[43952-43975]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[43702-43721]:ExpressionStatement[43996-44015]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[43742-43748]:BreakStatement[44036-44042]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[43765-43773]:SwitchCase[44059-44067]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[43794-43808]:ExpressionStatement[44088-44102]"
    }, {
      "left" : "t.transition(BeforeDoctypeName);",
      "right" : "t.transition(BeforeDoctypeName);",
      "info" : "ExpressionStatement[43829-43861]:ExpressionStatement[44123-44155]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[43925-43929]:PrimitiveType[44219-44223]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[43930-43934]:SimpleName[44224-44228]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[43935-43946]:SingleVariableDeclaration[44229-44240]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[43948-43965]:SingleVariableDeclaration[44242-44259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43967-45022]:Block[44261-45316]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[43981-44128]:IfStatement[44275-44422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44004-44128]:Block[44298-44422]"
    }, {
      "left" : "t.createDoctypePending();",
      "right" : "t.createDoctypePending();",
      "info" : "ExpressionStatement[44022-44047]:ExpressionStatement[44316-44341]"
    }, {
      "left" : "t.transition(DoctypeName);",
      "right" : "t.transition(DoctypeName);",
      "info" : "ExpressionStatement[44064-44090]:ExpressionStatement[44358-44384]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[44107-44114]:ReturnStatement[44401-44408]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[44141-44162]:VariableDeclarationStatement[44435-44456]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    break; // ignore whitespace\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.name.append(replacementChar);\n                    t.transition(DoctypeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.createDoctypePending();\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.createDoctypePending();\n                    t.doctypePending.name.append(c);\n                    t.transition(DoctypeName);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    break; // ignore whitespace\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.name.append(replacementChar);\n                    t.transition(DoctypeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.createDoctypePending();\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.createDoctypePending();\n                    t.doctypePending.name.append(c);\n                    t.transition(DoctypeName);\n            }",
      "info" : "SwitchStatement[44175-45012]:SwitchStatement[44469-45306]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[44204-44214]:SwitchCase[44498-44508]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[44231-44241]:SwitchCase[44525-44535]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[44258-44268]:SwitchCase[44552-44562]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[44285-44294]:SwitchCase[44579-44588]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44315-44321]:BreakStatement[44609-44615]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[44359-44373]:SwitchCase[44653-44667]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[44394-44408]:ExpressionStatement[44688-44702]"
    }, {
      "left" : "t.doctypePending.name.append(replacementChar);",
      "right" : "t.doctypePending.name.append(replacementChar);",
      "info" : "ExpressionStatement[44429-44475]:ExpressionStatement[44723-44769]"
    }, {
      "left" : "t.transition(DoctypeName);",
      "right" : "t.transition(DoctypeName);",
      "info" : "ExpressionStatement[44496-44522]:ExpressionStatement[44790-44816]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44543-44549]:BreakStatement[44837-44843]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[44566-44575]:SwitchCase[44860-44869]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[44596-44613]:ExpressionStatement[44890-44907]"
    }, {
      "left" : "t.createDoctypePending();",
      "right" : "t.createDoctypePending();",
      "info" : "ExpressionStatement[44634-44659]:ExpressionStatement[44928-44953]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[44680-44716]:ExpressionStatement[44974-45010]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[44737-44760]:ExpressionStatement[45031-45054]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[44781-44800]:ExpressionStatement[45075-45094]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44821-44827]:BreakStatement[45115-45121]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[44844-44852]:SwitchCase[45138-45146]"
    }, {
      "left" : "t.createDoctypePending();",
      "right" : "t.createDoctypePending();",
      "info" : "ExpressionStatement[44873-44898]:ExpressionStatement[45167-45192]"
    }, {
      "left" : "t.doctypePending.name.append(c);",
      "right" : "t.doctypePending.name.append(c);",
      "info" : "ExpressionStatement[44919-44951]:ExpressionStatement[45213-45245]"
    }, {
      "left" : "t.transition(DoctypeName);",
      "right" : "t.transition(DoctypeName);",
      "info" : "ExpressionStatement[44972-44998]:ExpressionStatement[45266-45292]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[45056-45060]:PrimitiveType[45350-45354]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[45061-45065]:SimpleName[45355-45359]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[45066-45077]:SingleVariableDeclaration[45360-45371]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[45079-45096]:SingleVariableDeclaration[45373-45390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45098-46173]:Block[45392-46467]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[45112-45297]:IfStatement[45406-45591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45135-45297]:Block[45429-45591]"
    }, {
      "left" : "String name = r.consumeLetterSequence();",
      "right" : "String name = r.consumeLetterSequence();",
      "info" : "VariableDeclarationStatement[45153-45193]:VariableDeclarationStatement[45447-45487]"
    }, {
      "left" : "t.doctypePending.name.append(name.toLowerCase());",
      "right" : "t.doctypePending.name.append(name.toLowerCase());",
      "info" : "ExpressionStatement[45210-45259]:ExpressionStatement[45504-45553]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[45276-45283]:ReturnStatement[45570-45577]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[45310-45331]:VariableDeclarationStatement[45604-45625]"
    }, {
      "left" : "switch (c) {\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(AfterDoctypeName);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.name.append(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.name.append(c);\n            }",
      "right" : "switch (c) {\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(AfterDoctypeName);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.name.append(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.name.append(c);\n            }",
      "info" : "SwitchStatement[45344-46163]:SwitchStatement[45638-46457]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[45373-45382]:SwitchCase[45667-45676]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[45403-45426]:ExpressionStatement[45697-45720]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[45447-45466]:ExpressionStatement[45741-45760]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[45487-45493]:BreakStatement[45781-45787]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[45510-45520]:SwitchCase[45804-45814]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[45537-45547]:SwitchCase[45831-45841]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[45564-45574]:SwitchCase[45858-45868]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[45591-45600]:SwitchCase[45885-45894]"
    }, {
      "left" : "t.transition(AfterDoctypeName);",
      "right" : "t.transition(AfterDoctypeName);",
      "info" : "ExpressionStatement[45621-45652]:ExpressionStatement[45915-45946]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[45673-45679]:BreakStatement[45967-45973]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[45696-45710]:SwitchCase[45990-46004]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[45731-45745]:ExpressionStatement[46025-46039]"
    }, {
      "left" : "t.doctypePending.name.append(replacementChar);",
      "right" : "t.doctypePending.name.append(replacementChar);",
      "info" : "ExpressionStatement[45766-45812]:ExpressionStatement[46060-46106]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[45833-45839]:BreakStatement[46127-46133]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[45856-45865]:SwitchCase[46150-46159]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[45886-45903]:ExpressionStatement[46180-46197]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[45924-45960]:ExpressionStatement[46218-46254]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[45981-46004]:ExpressionStatement[46275-46298]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[46025-46044]:ExpressionStatement[46319-46338]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[46065-46071]:BreakStatement[46359-46365]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[46088-46096]:SwitchCase[46382-46390]"
    }, {
      "left" : "t.doctypePending.name.append(c);",
      "right" : "t.doctypePending.name.append(c);",
      "info" : "ExpressionStatement[46117-46149]:ExpressionStatement[46411-46443]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[46212-46216]:PrimitiveType[46506-46510]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[46217-46221]:SimpleName[46511-46515]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[46222-46233]:SingleVariableDeclaration[46516-46527]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[46235-46252]:SingleVariableDeclaration[46529-46546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46254-47021]:Block[46548-47315]"
    }, {
      "left" : "if (r.isEmpty())",
      "right" : "if (r.isEmpty())",
      "info" : "IfStatement[46268-46487]:IfStatement[46562-46781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46285-46487]:Block[46579-46781]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[46303-46320]:ExpressionStatement[46597-46614]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[46337-46373]:ExpressionStatement[46631-46667]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[46390-46413]:ExpressionStatement[46684-46707]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[46430-46449]:ExpressionStatement[46724-46743]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[46466-46473]:ReturnStatement[46760-46767]"
    }, {
      "left" : "if (r.matches('>'))",
      "right" : "if (r.matches('>'))",
      "info" : "IfStatement[46500-47010]:IfStatement[46794-47304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46520-46618]:Block[46814-46912]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[46538-46561]:ExpressionStatement[46832-46855]"
    }, {
      "left" : "t.advanceTransition(Data);",
      "right" : "t.advanceTransition(Data);",
      "info" : "ExpressionStatement[46578-46604]:ExpressionStatement[46872-46898]"
    }, {
      "left" : "if (r.matchConsumeIgnoreCase(\"PUBLIC\"))",
      "right" : "if (r.matchConsumeIgnoreCase(\"PUBLIC\"))",
      "info" : "IfStatement[46624-47010]:IfStatement[46918-47304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46664-46736]:Block[46958-47030]"
    }, {
      "left" : "t.transition(AfterDoctypePublicKeyword);",
      "right" : "t.transition(AfterDoctypePublicKeyword);",
      "info" : "ExpressionStatement[46682-46722]:ExpressionStatement[46976-47016]"
    }, {
      "left" : "if (r.matchConsumeIgnoreCase(\"SYSTEM\"))",
      "right" : "if (r.matchConsumeIgnoreCase(\"SYSTEM\"))",
      "info" : "IfStatement[46742-47010]:IfStatement[47036-47304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46782-46854]:Block[47076-47148]"
    }, {
      "left" : "t.transition(AfterDoctypeSystemKeyword);",
      "right" : "t.transition(AfterDoctypeSystemKeyword);",
      "info" : "ExpressionStatement[46800-46840]:ExpressionStatement[47094-47134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46860-47010]:Block[47154-47304]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[46878-46892]:ExpressionStatement[47172-47186]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[46909-46945]:ExpressionStatement[47203-47239]"
    }, {
      "left" : "t.advanceTransition(BogusDoctype);",
      "right" : "t.advanceTransition(BogusDoctype);",
      "info" : "ExpressionStatement[46962-46996]:ExpressionStatement[47256-47290]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[47069-47073]:PrimitiveType[47363-47367]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[47074-47078]:SimpleName[47368-47372]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[47079-47090]:SingleVariableDeclaration[47373-47384]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[47092-47109]:SingleVariableDeclaration[47386-47403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47111-48447]:Block[47405-48741]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[47125-47146]:VariableDeclarationStatement[47419-47440]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeDoctypePublicIdentifier);\n                    break;\n                case '\"':\n                    t.error(this);\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    t.error(this);\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_singleQuoted);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeDoctypePublicIdentifier);\n                    break;\n                case '\"':\n                    t.error(this);\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    t.error(this);\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_singleQuoted);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "info" : "SwitchStatement[47159-48437]:SwitchStatement[47453-48731]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[47188-47198]:SwitchCase[47482-47492]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[47215-47225]:SwitchCase[47509-47519]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[47242-47252]:SwitchCase[47536-47546]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[47269-47278]:SwitchCase[47563-47572]"
    }, {
      "left" : "t.transition(BeforeDoctypePublicIdentifier);",
      "right" : "t.transition(BeforeDoctypePublicIdentifier);",
      "info" : "ExpressionStatement[47299-47343]:ExpressionStatement[47593-47637]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47364-47370]:BreakStatement[47658-47664]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[47387-47396]:SwitchCase[47681-47690]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[47417-47431]:ExpressionStatement[47711-47725]"
    }, {
      "left" : "t.transition(DoctypePublicIdentifier_doubleQuoted);",
      "right" : "t.transition(DoctypePublicIdentifier_doubleQuoted);",
      "info" : "ExpressionStatement[47505-47556]:ExpressionStatement[47799-47850]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47577-47583]:BreakStatement[47871-47877]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[47600-47610]:SwitchCase[47894-47904]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[47631-47645]:ExpressionStatement[47925-47939]"
    }, {
      "left" : "t.transition(DoctypePublicIdentifier_singleQuoted);",
      "right" : "t.transition(DoctypePublicIdentifier_singleQuoted);",
      "info" : "ExpressionStatement[47719-47770]:ExpressionStatement[48013-48064]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47791-47797]:BreakStatement[48085-48091]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[47814-47823]:SwitchCase[48108-48117]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[47844-47858]:ExpressionStatement[48138-48152]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[47879-47915]:ExpressionStatement[48173-48209]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[47936-47959]:ExpressionStatement[48230-48253]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[47980-47999]:ExpressionStatement[48274-48293]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48020-48026]:BreakStatement[48314-48320]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[48043-48052]:SwitchCase[48337-48346]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[48073-48090]:ExpressionStatement[48367-48384]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[48111-48147]:ExpressionStatement[48405-48441]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[48168-48191]:ExpressionStatement[48462-48485]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[48212-48231]:ExpressionStatement[48506-48525]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48252-48258]:BreakStatement[48546-48552]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[48275-48283]:SwitchCase[48569-48577]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[48304-48318]:ExpressionStatement[48598-48612]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[48339-48375]:ExpressionStatement[48633-48669]"
    }, {
      "left" : "t.transition(BogusDoctype);",
      "right" : "t.transition(BogusDoctype);",
      "info" : "ExpressionStatement[48396-48423]:ExpressionStatement[48690-48717]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[48499-48503]:PrimitiveType[48793-48797]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[48504-48508]:SimpleName[48798-48802]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[48509-48520]:SingleVariableDeclaration[48803-48814]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[48522-48539]:SingleVariableDeclaration[48816-48833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48541-49742]:Block[48835-50036]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[48555-48576]:VariableDeclarationStatement[48849-48870]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    break;\n                case '\"':\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_singleQuoted);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    break;\n                case '\"':\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_singleQuoted);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "info" : "SwitchStatement[48589-49732]:SwitchStatement[48883-50026]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[48618-48628]:SwitchCase[48912-48922]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[48645-48655]:SwitchCase[48939-48949]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[48672-48682]:SwitchCase[48966-48976]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[48699-48708]:SwitchCase[48993-49002]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48729-48735]:BreakStatement[49023-49029]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[48752-48761]:SwitchCase[49046-49055]"
    }, {
      "left" : "t.transition(DoctypePublicIdentifier_doubleQuoted);",
      "right" : "t.transition(DoctypePublicIdentifier_doubleQuoted);",
      "info" : "ExpressionStatement[48835-48886]:ExpressionStatement[49129-49180]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48907-48913]:BreakStatement[49201-49207]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[48930-48940]:SwitchCase[49224-49234]"
    }, {
      "left" : "t.transition(DoctypePublicIdentifier_singleQuoted);",
      "right" : "t.transition(DoctypePublicIdentifier_singleQuoted);",
      "info" : "ExpressionStatement[49014-49065]:ExpressionStatement[49308-49359]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49086-49092]:BreakStatement[49380-49386]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[49109-49118]:SwitchCase[49403-49412]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[49139-49153]:ExpressionStatement[49433-49447]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[49174-49210]:ExpressionStatement[49468-49504]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[49231-49254]:ExpressionStatement[49525-49548]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[49275-49294]:ExpressionStatement[49569-49588]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49315-49321]:BreakStatement[49609-49615]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[49338-49347]:SwitchCase[49632-49641]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[49368-49385]:ExpressionStatement[49662-49679]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[49406-49442]:ExpressionStatement[49700-49736]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[49463-49486]:ExpressionStatement[49757-49780]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[49507-49526]:ExpressionStatement[49801-49820]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49547-49553]:BreakStatement[49841-49847]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[49570-49578]:SwitchCase[49864-49872]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[49599-49613]:ExpressionStatement[49893-49907]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[49634-49670]:ExpressionStatement[49928-49964]"
    }, {
      "left" : "t.transition(BogusDoctype);",
      "right" : "t.transition(BogusDoctype);",
      "info" : "ExpressionStatement[49691-49718]:ExpressionStatement[49985-50012]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[49801-49805]:PrimitiveType[50095-50099]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[49806-49810]:SimpleName[50100-50104]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[49811-49822]:SingleVariableDeclaration[50105-50116]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[49824-49841]:SingleVariableDeclaration[50118-50135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49843-50767]:Block[50137-51061]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[49857-49878]:VariableDeclarationStatement[50151-50172]"
    }, {
      "left" : "switch (c) {\n                case '\"':\n                    t.transition(AfterDoctypePublicIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.publicIdentifier.append(replacementChar);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.publicIdentifier.append(c);\n            }",
      "right" : "switch (c) {\n                case '\"':\n                    t.transition(AfterDoctypePublicIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.publicIdentifier.append(replacementChar);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.publicIdentifier.append(c);\n            }",
      "info" : "SwitchStatement[49891-50757]:SwitchStatement[50185-51051]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[49920-49929]:SwitchCase[50214-50223]"
    }, {
      "left" : "t.transition(AfterDoctypePublicIdentifier);",
      "right" : "t.transition(AfterDoctypePublicIdentifier);",
      "info" : "ExpressionStatement[49950-49993]:ExpressionStatement[50244-50287]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[50014-50020]:BreakStatement[50308-50314]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[50037-50051]:SwitchCase[50331-50345]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[50072-50086]:ExpressionStatement[50366-50380]"
    }, {
      "left" : "t.doctypePending.publicIdentifier.append(replacementChar);",
      "right" : "t.doctypePending.publicIdentifier.append(replacementChar);",
      "info" : "ExpressionStatement[50107-50165]:ExpressionStatement[50401-50459]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[50186-50192]:BreakStatement[50480-50486]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[50209-50218]:SwitchCase[50503-50512]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[50239-50253]:ExpressionStatement[50533-50547]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[50274-50310]:ExpressionStatement[50568-50604]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[50331-50354]:ExpressionStatement[50625-50648]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[50375-50394]:ExpressionStatement[50669-50688]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[50415-50421]:BreakStatement[50709-50715]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[50438-50447]:SwitchCase[50732-50741]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[50468-50485]:ExpressionStatement[50762-50779]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[50506-50542]:ExpressionStatement[50800-50836]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[50563-50586]:ExpressionStatement[50857-50880]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[50607-50626]:ExpressionStatement[50901-50920]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[50647-50653]:BreakStatement[50941-50947]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[50670-50678]:SwitchCase[50964-50972]"
    }, {
      "left" : "t.doctypePending.publicIdentifier.append(c);",
      "right" : "t.doctypePending.publicIdentifier.append(c);",
      "info" : "ExpressionStatement[50699-50743]:ExpressionStatement[50993-51037]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[50826-50830]:PrimitiveType[51120-51124]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[50831-50835]:SimpleName[51125-51129]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[50836-50847]:SingleVariableDeclaration[51130-51141]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[50849-50866]:SingleVariableDeclaration[51143-51160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50868-51793]:Block[51162-52087]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[50882-50903]:VariableDeclarationStatement[51176-51197]"
    }, {
      "left" : "switch (c) {\n                case '\\'':\n                    t.transition(AfterDoctypePublicIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.publicIdentifier.append(replacementChar);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.publicIdentifier.append(c);\n            }",
      "right" : "switch (c) {\n                case '\\'':\n                    t.transition(AfterDoctypePublicIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.publicIdentifier.append(replacementChar);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.publicIdentifier.append(c);\n            }",
      "info" : "SwitchStatement[50916-51783]:SwitchStatement[51210-52077]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[50945-50955]:SwitchCase[51239-51249]"
    }, {
      "left" : "t.transition(AfterDoctypePublicIdentifier);",
      "right" : "t.transition(AfterDoctypePublicIdentifier);",
      "info" : "ExpressionStatement[50976-51019]:ExpressionStatement[51270-51313]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51040-51046]:BreakStatement[51334-51340]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[51063-51077]:SwitchCase[51357-51371]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[51098-51112]:ExpressionStatement[51392-51406]"
    }, {
      "left" : "t.doctypePending.publicIdentifier.append(replacementChar);",
      "right" : "t.doctypePending.publicIdentifier.append(replacementChar);",
      "info" : "ExpressionStatement[51133-51191]:ExpressionStatement[51427-51485]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51212-51218]:BreakStatement[51506-51512]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[51235-51244]:SwitchCase[51529-51538]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[51265-51279]:ExpressionStatement[51559-51573]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[51300-51336]:ExpressionStatement[51594-51630]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[51357-51380]:ExpressionStatement[51651-51674]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[51401-51420]:ExpressionStatement[51695-51714]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51441-51447]:BreakStatement[51735-51741]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[51464-51473]:SwitchCase[51758-51767]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[51494-51511]:ExpressionStatement[51788-51805]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[51532-51568]:ExpressionStatement[51826-51862]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[51589-51612]:ExpressionStatement[51883-51906]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[51633-51652]:ExpressionStatement[51927-51946]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51673-51679]:BreakStatement[51967-51973]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[51696-51704]:SwitchCase[51990-51998]"
    }, {
      "left" : "t.doctypePending.publicIdentifier.append(c);",
      "right" : "t.doctypePending.publicIdentifier.append(c);",
      "info" : "ExpressionStatement[51725-51769]:ExpressionStatement[52019-52063]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[51844-51848]:PrimitiveType[52138-52142]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[51849-51853]:SimpleName[52143-52147]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[51854-51865]:SingleVariableDeclaration[52148-52159]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[51867-51884]:SingleVariableDeclaration[52161-52178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51886-53113]:Block[52180-53407]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[51900-51921]:VariableDeclarationStatement[52194-52215]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(BetweenDoctypePublicAndSystemIdentifiers);\n                    break;\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case '\"':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(BetweenDoctypePublicAndSystemIdentifiers);\n                    break;\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case '\"':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "info" : "SwitchStatement[51934-53103]:SwitchStatement[52228-53397]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[51963-51973]:SwitchCase[52257-52267]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[51990-52000]:SwitchCase[52284-52294]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[52017-52027]:SwitchCase[52311-52321]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[52044-52053]:SwitchCase[52338-52347]"
    }, {
      "left" : "t.transition(BetweenDoctypePublicAndSystemIdentifiers);",
      "right" : "t.transition(BetweenDoctypePublicAndSystemIdentifiers);",
      "info" : "ExpressionStatement[52074-52129]:ExpressionStatement[52368-52423]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52150-52156]:BreakStatement[52444-52450]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[52173-52182]:SwitchCase[52467-52476]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[52203-52226]:ExpressionStatement[52497-52520]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[52247-52266]:ExpressionStatement[52541-52560]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52287-52293]:BreakStatement[52581-52587]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[52310-52319]:SwitchCase[52604-52613]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[52340-52354]:ExpressionStatement[52634-52648]"
    }, {
      "left" : "t.transition(DoctypeSystemIdentifier_doubleQuoted);",
      "right" : "t.transition(DoctypeSystemIdentifier_doubleQuoted);",
      "info" : "ExpressionStatement[52414-52465]:ExpressionStatement[52708-52759]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52486-52492]:BreakStatement[52780-52786]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[52509-52519]:SwitchCase[52803-52813]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[52540-52554]:ExpressionStatement[52834-52848]"
    }, {
      "left" : "t.transition(DoctypeSystemIdentifier_singleQuoted);",
      "right" : "t.transition(DoctypeSystemIdentifier_singleQuoted);",
      "info" : "ExpressionStatement[52614-52665]:ExpressionStatement[52908-52959]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52686-52692]:BreakStatement[52980-52986]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[52709-52718]:SwitchCase[53003-53012]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[52739-52756]:ExpressionStatement[53033-53050]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[52777-52813]:ExpressionStatement[53071-53107]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[52834-52857]:ExpressionStatement[53128-53151]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[52878-52897]:ExpressionStatement[53172-53191]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52918-52924]:BreakStatement[53212-53218]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[52941-52949]:SwitchCase[53235-53243]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[52970-52984]:ExpressionStatement[53264-53278]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[53005-53041]:ExpressionStatement[53299-53335]"
    }, {
      "left" : "t.transition(BogusDoctype);",
      "right" : "t.transition(BogusDoctype);",
      "info" : "ExpressionStatement[53062-53089]:ExpressionStatement[53356-53383]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[53176-53180]:PrimitiveType[53470-53474]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[53181-53185]:SimpleName[53475-53479]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[53186-53197]:SingleVariableDeclaration[53480-53491]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[53199-53216]:SingleVariableDeclaration[53493-53510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53218-54369]:Block[53512-54663]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[53232-53253]:VariableDeclarationStatement[53526-53547]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    break;\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case '\"':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    break;\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case '\"':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "info" : "SwitchStatement[53266-54359]:SwitchStatement[53560-54653]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[53295-53305]:SwitchCase[53589-53599]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[53322-53332]:SwitchCase[53616-53626]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[53349-53359]:SwitchCase[53643-53653]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[53376-53385]:SwitchCase[53670-53679]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[53406-53412]:BreakStatement[53700-53706]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[53429-53438]:SwitchCase[53723-53732]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[53459-53482]:ExpressionStatement[53753-53776]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[53503-53522]:ExpressionStatement[53797-53816]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[53543-53549]:BreakStatement[53837-53843]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[53566-53575]:SwitchCase[53860-53869]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[53596-53610]:ExpressionStatement[53890-53904]"
    }, {
      "left" : "t.transition(DoctypeSystemIdentifier_doubleQuoted);",
      "right" : "t.transition(DoctypeSystemIdentifier_doubleQuoted);",
      "info" : "ExpressionStatement[53670-53721]:ExpressionStatement[53964-54015]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[53742-53748]:BreakStatement[54036-54042]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[53765-53775]:SwitchCase[54059-54069]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[53796-53810]:ExpressionStatement[54090-54104]"
    }, {
      "left" : "t.transition(DoctypeSystemIdentifier_singleQuoted);",
      "right" : "t.transition(DoctypeSystemIdentifier_singleQuoted);",
      "info" : "ExpressionStatement[53870-53921]:ExpressionStatement[54164-54215]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[53942-53948]:BreakStatement[54236-54242]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[53965-53974]:SwitchCase[54259-54268]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[53995-54012]:ExpressionStatement[54289-54306]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[54033-54069]:ExpressionStatement[54327-54363]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[54090-54113]:ExpressionStatement[54384-54407]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[54134-54153]:ExpressionStatement[54428-54447]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54174-54180]:BreakStatement[54468-54474]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[54197-54205]:SwitchCase[54491-54499]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[54226-54240]:ExpressionStatement[54520-54534]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[54261-54297]:ExpressionStatement[54555-54591]"
    }, {
      "left" : "t.transition(BogusDoctype);",
      "right" : "t.transition(BogusDoctype);",
      "info" : "ExpressionStatement[54318-54345]:ExpressionStatement[54612-54639]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[54417-54421]:PrimitiveType[54711-54715]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[54422-54426]:SimpleName[54716-54720]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[54427-54438]:SingleVariableDeclaration[54721-54732]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[54440-54457]:SingleVariableDeclaration[54734-54751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54459-55763]:Block[54753-56057]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[54473-54494]:VariableDeclarationStatement[54767-54788]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeDoctypeSystemIdentifier);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case '\"':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeDoctypeSystemIdentifier);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case '\"':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n            }",
      "info" : "SwitchStatement[54507-55753]:SwitchStatement[54801-56047]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[54536-54546]:SwitchCase[54830-54840]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[54563-54573]:SwitchCase[54857-54867]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[54590-54600]:SwitchCase[54884-54894]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[54617-54626]:SwitchCase[54911-54920]"
    }, {
      "left" : "t.transition(BeforeDoctypeSystemIdentifier);",
      "right" : "t.transition(BeforeDoctypeSystemIdentifier);",
      "info" : "ExpressionStatement[54647-54691]:ExpressionStatement[54941-54985]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54712-54718]:BreakStatement[55006-55012]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[54735-54744]:SwitchCase[55029-55038]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[54765-54779]:ExpressionStatement[55059-55073]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[54800-54836]:ExpressionStatement[55094-55130]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[54857-54880]:ExpressionStatement[55151-55174]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[54901-54920]:ExpressionStatement[55195-55214]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54941-54947]:BreakStatement[55235-55241]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[54964-54973]:SwitchCase[55258-55267]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[54994-55008]:ExpressionStatement[55288-55302]"
    }, {
      "left" : "t.transition(DoctypeSystemIdentifier_doubleQuoted);",
      "right" : "t.transition(DoctypeSystemIdentifier_doubleQuoted);",
      "info" : "ExpressionStatement[55068-55119]:ExpressionStatement[55362-55413]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55140-55146]:BreakStatement[55434-55440]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[55163-55173]:SwitchCase[55457-55467]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[55194-55208]:ExpressionStatement[55488-55502]"
    }, {
      "left" : "t.transition(DoctypeSystemIdentifier_singleQuoted);",
      "right" : "t.transition(DoctypeSystemIdentifier_singleQuoted);",
      "info" : "ExpressionStatement[55268-55319]:ExpressionStatement[55562-55613]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55340-55346]:BreakStatement[55634-55640]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[55363-55372]:SwitchCase[55657-55666]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[55393-55410]:ExpressionStatement[55687-55704]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[55431-55467]:ExpressionStatement[55725-55761]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[55488-55511]:ExpressionStatement[55782-55805]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[55532-55551]:ExpressionStatement[55826-55845]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55572-55578]:BreakStatement[55866-55872]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[55595-55603]:SwitchCase[55889-55897]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[55624-55638]:ExpressionStatement[55918-55932]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[55659-55695]:ExpressionStatement[55953-55989]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[55716-55739]:ExpressionStatement[56010-56033]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[55815-55819]:PrimitiveType[56109-56113]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[55820-55824]:SimpleName[56114-56118]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[55825-55836]:SingleVariableDeclaration[56119-56130]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[55838-55855]:SingleVariableDeclaration[56132-56149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55857-57058]:Block[56151-57352]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[55871-55892]:VariableDeclarationStatement[56165-56186]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    break;\n                case '\"':\n                    // set system id to empty string\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    // set public id to empty string\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    break;\n                case '\"':\n                    // set system id to empty string\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    // set public id to empty string\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "info" : "SwitchStatement[55905-57048]:SwitchStatement[56199-57342]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[55934-55944]:SwitchCase[56228-56238]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[55961-55971]:SwitchCase[56255-56265]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[55988-55998]:SwitchCase[56282-56292]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[56015-56024]:SwitchCase[56309-56318]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[56045-56051]:BreakStatement[56339-56345]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[56068-56077]:SwitchCase[56362-56371]"
    }, {
      "left" : "t.transition(DoctypeSystemIdentifier_doubleQuoted);",
      "right" : "t.transition(DoctypeSystemIdentifier_doubleQuoted);",
      "info" : "ExpressionStatement[56151-56202]:ExpressionStatement[56445-56496]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[56223-56229]:BreakStatement[56517-56523]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[56246-56256]:SwitchCase[56540-56550]"
    }, {
      "left" : "t.transition(DoctypeSystemIdentifier_singleQuoted);",
      "right" : "t.transition(DoctypeSystemIdentifier_singleQuoted);",
      "info" : "ExpressionStatement[56330-56381]:ExpressionStatement[56624-56675]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[56402-56408]:BreakStatement[56696-56702]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[56425-56434]:SwitchCase[56719-56728]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[56455-56469]:ExpressionStatement[56749-56763]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[56490-56526]:ExpressionStatement[56784-56820]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[56547-56570]:ExpressionStatement[56841-56864]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[56591-56610]:ExpressionStatement[56885-56904]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[56631-56637]:BreakStatement[56925-56931]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[56654-56663]:SwitchCase[56948-56957]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[56684-56701]:ExpressionStatement[56978-56995]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[56722-56758]:ExpressionStatement[57016-57052]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[56779-56802]:ExpressionStatement[57073-57096]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[56823-56842]:ExpressionStatement[57117-57136]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[56863-56869]:BreakStatement[57157-57163]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[56886-56894]:SwitchCase[57180-57188]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[56915-56929]:ExpressionStatement[57209-57223]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[56950-56986]:ExpressionStatement[57244-57280]"
    }, {
      "left" : "t.transition(BogusDoctype);",
      "right" : "t.transition(BogusDoctype);",
      "info" : "ExpressionStatement[57007-57034]:ExpressionStatement[57301-57328]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[57117-57121]:PrimitiveType[57411-57415]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[57122-57126]:SimpleName[57416-57420]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[57127-57138]:SingleVariableDeclaration[57421-57432]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[57140-57157]:SingleVariableDeclaration[57434-57451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57159-58083]:Block[57453-58377]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[57173-57194]:VariableDeclarationStatement[57467-57488]"
    }, {
      "left" : "switch (c) {\n                case '\"':\n                    t.transition(AfterDoctypeSystemIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.systemIdentifier.append(replacementChar);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.systemIdentifier.append(c);\n            }",
      "right" : "switch (c) {\n                case '\"':\n                    t.transition(AfterDoctypeSystemIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.systemIdentifier.append(replacementChar);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.systemIdentifier.append(c);\n            }",
      "info" : "SwitchStatement[57207-58073]:SwitchStatement[57501-58367]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[57236-57245]:SwitchCase[57530-57539]"
    }, {
      "left" : "t.transition(AfterDoctypeSystemIdentifier);",
      "right" : "t.transition(AfterDoctypeSystemIdentifier);",
      "info" : "ExpressionStatement[57266-57309]:ExpressionStatement[57560-57603]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57330-57336]:BreakStatement[57624-57630]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[57353-57367]:SwitchCase[57647-57661]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[57388-57402]:ExpressionStatement[57682-57696]"
    }, {
      "left" : "t.doctypePending.systemIdentifier.append(replacementChar);",
      "right" : "t.doctypePending.systemIdentifier.append(replacementChar);",
      "info" : "ExpressionStatement[57423-57481]:ExpressionStatement[57717-57775]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57502-57508]:BreakStatement[57796-57802]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[57525-57534]:SwitchCase[57819-57828]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[57555-57569]:ExpressionStatement[57849-57863]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[57590-57626]:ExpressionStatement[57884-57920]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[57647-57670]:ExpressionStatement[57941-57964]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[57691-57710]:ExpressionStatement[57985-58004]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57731-57737]:BreakStatement[58025-58031]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[57754-57763]:SwitchCase[58048-58057]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[57784-57801]:ExpressionStatement[58078-58095]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[57822-57858]:ExpressionStatement[58116-58152]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[57879-57902]:ExpressionStatement[58173-58196]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[57923-57942]:ExpressionStatement[58217-58236]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57963-57969]:BreakStatement[58257-58263]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[57986-57994]:SwitchCase[58280-58288]"
    }, {
      "left" : "t.doctypePending.systemIdentifier.append(c);",
      "right" : "t.doctypePending.systemIdentifier.append(c);",
      "info" : "ExpressionStatement[58015-58059]:ExpressionStatement[58309-58353]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[58142-58146]:PrimitiveType[58436-58440]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[58147-58151]:SimpleName[58441-58445]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[58152-58163]:SingleVariableDeclaration[58446-58457]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[58165-58182]:SingleVariableDeclaration[58459-58476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58184-59109]:Block[58478-59403]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[58198-58219]:VariableDeclarationStatement[58492-58513]"
    }, {
      "left" : "switch (c) {\n                case '\\'':\n                    t.transition(AfterDoctypeSystemIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.systemIdentifier.append(replacementChar);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.systemIdentifier.append(c);\n            }",
      "right" : "switch (c) {\n                case '\\'':\n                    t.transition(AfterDoctypeSystemIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.systemIdentifier.append(replacementChar);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.systemIdentifier.append(c);\n            }",
      "info" : "SwitchStatement[58232-59099]:SwitchStatement[58526-59393]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[58261-58271]:SwitchCase[58555-58565]"
    }, {
      "left" : "t.transition(AfterDoctypeSystemIdentifier);",
      "right" : "t.transition(AfterDoctypeSystemIdentifier);",
      "info" : "ExpressionStatement[58292-58335]:ExpressionStatement[58586-58629]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[58356-58362]:BreakStatement[58650-58656]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[58379-58393]:SwitchCase[58673-58687]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[58414-58428]:ExpressionStatement[58708-58722]"
    }, {
      "left" : "t.doctypePending.systemIdentifier.append(replacementChar);",
      "right" : "t.doctypePending.systemIdentifier.append(replacementChar);",
      "info" : "ExpressionStatement[58449-58507]:ExpressionStatement[58743-58801]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[58528-58534]:BreakStatement[58822-58828]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[58551-58560]:SwitchCase[58845-58854]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[58581-58595]:ExpressionStatement[58875-58889]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[58616-58652]:ExpressionStatement[58910-58946]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[58673-58696]:ExpressionStatement[58967-58990]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[58717-58736]:ExpressionStatement[59011-59030]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[58757-58763]:BreakStatement[59051-59057]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[58780-58789]:SwitchCase[59074-59083]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[58810-58827]:ExpressionStatement[59104-59121]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[58848-58884]:ExpressionStatement[59142-59178]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[58905-58928]:ExpressionStatement[59199-59222]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[58949-58968]:ExpressionStatement[59243-59262]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[58989-58995]:BreakStatement[59283-59289]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[59012-59020]:SwitchCase[59306-59314]"
    }, {
      "left" : "t.doctypePending.systemIdentifier.append(c);",
      "right" : "t.doctypePending.systemIdentifier.append(c);",
      "info" : "ExpressionStatement[59041-59085]:ExpressionStatement[59335-59379]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[59160-59164]:PrimitiveType[59454-59458]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[59165-59169]:SimpleName[59459-59463]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[59170-59181]:SingleVariableDeclaration[59464-59475]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[59183-59200]:SingleVariableDeclaration[59477-59494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59202-59937]:Block[59496-60231]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[59216-59237]:VariableDeclarationStatement[59510-59531]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    break;\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.transition(BogusDoctype);\n                    // NOT force quirks\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    break;\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.transition(BogusDoctype);\n                    // NOT force quirks\n            }",
      "info" : "SwitchStatement[59250-59927]:SwitchStatement[59544-60221]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[59279-59289]:SwitchCase[59573-59583]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[59306-59316]:SwitchCase[59600-59610]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[59333-59343]:SwitchCase[59627-59637]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[59360-59369]:SwitchCase[59654-59663]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59390-59396]:BreakStatement[59684-59690]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[59413-59422]:SwitchCase[59707-59716]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[59443-59466]:ExpressionStatement[59737-59760]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[59487-59506]:ExpressionStatement[59781-59800]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59527-59533]:BreakStatement[59821-59827]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[59550-59559]:SwitchCase[59844-59853]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[59580-59597]:ExpressionStatement[59874-59891]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[59618-59654]:ExpressionStatement[59912-59948]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[59675-59698]:ExpressionStatement[59969-59992]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[59719-59738]:ExpressionStatement[60013-60032]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59759-59765]:BreakStatement[60053-60059]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[59782-59790]:SwitchCase[60076-60084]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[59811-59825]:ExpressionStatement[60105-60119]"
    }, {
      "left" : "t.transition(BogusDoctype);",
      "right" : "t.transition(BogusDoctype);",
      "info" : "ExpressionStatement[59846-59873]:ExpressionStatement[60140-60167]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[59972-59976]:PrimitiveType[60266-60270]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[59977-59981]:SimpleName[60271-60275]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[59982-59993]:SingleVariableDeclaration[60276-60287]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[59995-60012]:SingleVariableDeclaration[60289-60306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60014-60459]:Block[60308-60753]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[60028-60049]:VariableDeclarationStatement[60322-60343]"
    }, {
      "left" : "switch (c) {\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    // ignore char\n                    break;\n            }",
      "right" : "switch (c) {\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    // ignore char\n                    break;\n            }",
      "info" : "SwitchStatement[60062-60449]:SwitchStatement[60356-60743]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[60091-60100]:SwitchCase[60385-60394]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[60121-60144]:ExpressionStatement[60415-60438]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[60165-60184]:ExpressionStatement[60459-60478]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60205-60211]:BreakStatement[60499-60505]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[60228-60237]:SwitchCase[60522-60531]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[60258-60281]:ExpressionStatement[60552-60575]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[60302-60321]:ExpressionStatement[60596-60615]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60342-60348]:BreakStatement[60636-60642]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[60365-60373]:SwitchCase[60659-60667]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60429-60435]:BreakStatement[60723-60729]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[60494-60498]:PrimitiveType[60788-60792]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[60499-60503]:SimpleName[60793-60797]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[60504-60515]:SingleVariableDeclaration[60798-60809]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[60517-60534]:SingleVariableDeclaration[60811-60828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60536-60686]:Block[60830-60980]"
    }, {
      "left" : "String data = r.consumeTo(\"]]>\");",
      "right" : "String data = r.consumeTo(\"]]>\");",
      "info" : "VariableDeclarationStatement[60550-60583]:VariableDeclarationStatement[60844-60877]"
    }, {
      "left" : "t.emit(data);",
      "right" : "t.emit(data);",
      "info" : "ExpressionStatement[60596-60609]:ExpressionStatement[60890-60903]"
    }, {
      "left" : "r.matchConsume(\"]]>\");",
      "right" : "r.matchConsume(\"]]>\");",
      "info" : "ExpressionStatement[60622-60644]:ExpressionStatement[60916-60938]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[60657-60676]:ExpressionStatement[60951-60970]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[60700-60708]:Modifier[60994-61002]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[60709-60713]:PrimitiveType[61003-61007]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[60714-60718]:SimpleName[61008-61012]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[60719-60730]:SingleVariableDeclaration[61013-61024]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[60732-60749]:SingleVariableDeclaration[61026-61043]"
    } ]
  },
  "interFileMappings" : { }
}