{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "GoFmtCheckinFactory",
      "right" : "GoFmtCheckinFactory",
      "info" : "TypeDeclaration[1622-3964]:TypeDeclaration[1622-3970]"
    }, {
      "left" : "private static final String GO_FMT = \"GO_FMT\";",
      "right" : "private static final String GO_FMT = \"GO_FMT\";",
      "info" : "FieldDeclaration[1689-1735]:FieldDeclaration[1689-1735]"
    }, {
      "left" : "public CheckinHandler createHandler(@NotNull final CheckinProjectPanel panel, @NotNull CommitContext commitContext)",
      "right" : "public CheckinHandler createHandler(@NotNull final CheckinProjectPanel panel, @NotNull CommitContext commitContext)",
      "info" : "MethodDeclaration[1739-3796]:MethodDeclaration[1739-3802]"
    }, {
      "left" : "public RefreshableOnComponent getBeforeCheckinConfigurationPanel()",
      "right" : "public RefreshableOnComponent getBeforeCheckinConfigurationPanel()",
      "info" : "MethodDeclaration[1908-2651]:MethodDeclaration[1908-2651]"
    }, {
      "left" : "public JComponent getComponent()",
      "right" : "public JComponent getComponent()",
      "info" : "MethodDeclaration[2109-2311]:MethodDeclaration[2109-2311]"
    }, {
      "left" : "public void refresh()",
      "right" : "public void refresh()",
      "info" : "MethodDeclaration[2323-2358]:MethodDeclaration[2323-2358]"
    }, {
      "left" : "public void saveState()",
      "right" : "public void saveState()",
      "info" : "MethodDeclaration[2370-2530]:MethodDeclaration[2370-2530]"
    }, {
      "left" : "public void restoreState()",
      "right" : "public void restoreState()",
      "info" : "MethodDeclaration[2542-2632]:MethodDeclaration[2542-2632]"
    }, {
      "left" : "public ReturnResult beforeCheckin(@Nullable CommitExecutor executor, PairConsumer<Object, Object> additionalDataConsumer)",
      "right" : "public ReturnResult beforeCheckin(@Nullable CommitExecutor executor, PairConsumer<Object, Object> additionalDataConsumer)",
      "info" : "MethodDeclaration[2659-3302]:MethodDeclaration[2659-3308]"
    }, {
      "left" : "private List<PsiFile> getPsiFiles()",
      "right" : "private List<PsiFile> getPsiFiles()",
      "info" : "MethodDeclaration[3310-3785]:MethodDeclaration[3316-3791]"
    }, {
      "left" : "private static boolean enabled(@NotNull CheckinProjectPanel panel)",
      "right" : "private static boolean enabled(@NotNull CheckinProjectPanel panel)",
      "info" : "MethodDeclaration[3800-3962]:MethodDeclaration[3806-3968]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1622-1628]:Modifier[1622-1628]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1629-1634]:TYPE_DECLARATION_KIND[1629-1634]"
    }, {
      "left" : "GoFmtCheckinFactory",
      "right" : "GoFmtCheckinFactory",
      "info" : "SimpleName[1635-1654]:SimpleName[1635-1654]"
    }, {
      "left" : "CheckinHandlerFactory",
      "right" : "CheckinHandlerFactory",
      "info" : "SimpleType[1663-1684]:SimpleType[1663-1684]"
    }, {
      "left" : "@NotNull",
      "right" : "@NotNull",
      "info" : "MarkerAnnotation[1739-1747]:MarkerAnnotation[1739-1747]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1750-1756]:Modifier[1750-1756]"
    }, {
      "left" : "CheckinHandler",
      "right" : "CheckinHandler",
      "info" : "SimpleType[1757-1771]:SimpleType[1757-1771]"
    }, {
      "left" : "createHandler",
      "right" : "createHandler",
      "info" : "SimpleName[1772-1785]:SimpleName[1772-1785]"
    }, {
      "left" : "@NotNull final CheckinProjectPanel panel",
      "right" : "@NotNull final CheckinProjectPanel panel",
      "info" : "SingleVariableDeclaration[1786-1826]:SingleVariableDeclaration[1786-1826]"
    }, {
      "left" : "@NotNull CommitContext commitContext",
      "right" : "@NotNull CommitContext commitContext",
      "info" : "SingleVariableDeclaration[1828-1864]:SingleVariableDeclaration[1828-1864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1866-3796]:Block[1866-3802]"
    }, {
      "left" : "return new CheckinHandler() {\n      @Override\n      public RefreshableOnComponent getBeforeCheckinConfigurationPanel() {\n        final JCheckBox checkBox = new JCheckBox(\"Go fmt\");\n        return new RefreshableOnComponent() {\n          @NotNull\n          public JComponent getComponent() {\n            JPanel panel = new JPanel(new BorderLayout());\n            panel.add(checkBox, BorderLayout.WEST);\n            return panel;\n          }\n\n          public void refresh() {\n          }\n\n          public void saveState() {\n            PropertiesComponent.getInstance(panel.getProject()).setValue(GO_FMT, Boolean.toString(checkBox.isSelected()));\n          }\n\n          public void restoreState() {\n            checkBox.setSelected(enabled(panel));\n          }\n        };\n      }\n\n      @Override\n      public ReturnResult beforeCheckin(@Nullable CommitExecutor executor, PairConsumer<Object, Object> additionalDataConsumer) {\n        if (enabled(panel)) {\n          FileDocumentManager.getInstance().saveAllDocuments();\n          for (PsiFile file : getPsiFiles()) {\n            try {\n              VirtualFile virtualFile = file.getVirtualFile();\n              new GoFmtFileAction().doSomething(virtualFile, ModuleUtilCore.findModuleForPsiElement(file), file.getProject(), \"Go fmt\");\n            }\n            catch (ExecutionException ignored) {\n            }\n          }\n        }\n        return super.beforeCheckin();\n      }\n\n      @NotNull\n      private List<PsiFile> getPsiFiles() {\n        Collection<VirtualFile> files = panel.getVirtualFiles();\n        List<PsiFile> psiFiles = new ArrayList<PsiFile>();\n        PsiManager manager = PsiManager.getInstance(panel.getProject());\n        for (VirtualFile file : files) {\n          PsiFile psiFile = manager.findFile(file);\n          if (psiFile instanceof GoFile) {\n            psiFiles.add(psiFile);\n          }\n        }\n        return psiFiles;\n      }\n    };",
      "right" : "return new CheckinHandler() {\n      @Override\n      public RefreshableOnComponent getBeforeCheckinConfigurationPanel() {\n        final JCheckBox checkBox = new JCheckBox(\"Go fmt\");\n        return new RefreshableOnComponent() {\n          @NotNull\n          public JComponent getComponent() {\n            JPanel panel = new JPanel(new BorderLayout());\n            panel.add(checkBox, BorderLayout.WEST);\n            return panel;\n          }\n\n          public void refresh() {\n          }\n\n          public void saveState() {\n            PropertiesComponent.getInstance(panel.getProject()).setValue(GO_FMT, Boolean.toString(checkBox.isSelected()));\n          }\n\n          public void restoreState() {\n            checkBox.setSelected(enabled(panel));\n          }\n        };\n      }\n\n      @Override\n      public ReturnResult beforeCheckin(@Nullable CommitExecutor executor, PairConsumer<Object, Object> additionalDataConsumer) {\n        if (enabled(panel)) {\n          FileDocumentManager.getInstance().saveAllDocuments();\n          for (PsiFile file : getPsiFiles()) {\n            try {\n              VirtualFile virtualFile = file.getVirtualFile();\n              new GoFmtFileAction().doSomething(virtualFile, ModuleUtilCore.findModuleForPsiElement(file), file.getProject(), \"Go fmt\", true);\n            }\n            catch (ExecutionException ignored) {\n            }\n          }\n        }\n        return super.beforeCheckin();\n      }\n\n      @NotNull\n      private List<PsiFile> getPsiFiles() {\n        Collection<VirtualFile> files = panel.getVirtualFiles();\n        List<PsiFile> psiFiles = new ArrayList<PsiFile>();\n        PsiManager manager = PsiManager.getInstance(panel.getProject());\n        for (VirtualFile file : files) {\n          PsiFile psiFile = manager.findFile(file);\n          if (psiFile instanceof GoFile) {\n            psiFiles.add(psiFile);\n          }\n        }\n        return psiFiles;\n      }\n    };",
      "info" : "ReturnStatement[1872-3792]:ReturnStatement[1872-3798]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[1908-1917]:MarkerAnnotation[1908-1917]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1924-1930]:Modifier[1924-1930]"
    }, {
      "left" : "RefreshableOnComponent",
      "right" : "RefreshableOnComponent",
      "info" : "SimpleType[1931-1953]:SimpleType[1931-1953]"
    }, {
      "left" : "getBeforeCheckinConfigurationPanel",
      "right" : "getBeforeCheckinConfigurationPanel",
      "info" : "SimpleName[1954-1988]:SimpleName[1954-1988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1991-2651]:Block[1991-2651]"
    }, {
      "left" : "final JCheckBox checkBox = new JCheckBox(\"Go fmt\");",
      "right" : "final JCheckBox checkBox = new JCheckBox(\"Go fmt\");",
      "info" : "VariableDeclarationStatement[2001-2052]:VariableDeclarationStatement[2001-2052]"
    }, {
      "left" : "return new RefreshableOnComponent() {\n          @NotNull\n          public JComponent getComponent() {\n            JPanel panel = new JPanel(new BorderLayout());\n            panel.add(checkBox, BorderLayout.WEST);\n            return panel;\n          }\n\n          public void refresh() {\n          }\n\n          public void saveState() {\n            PropertiesComponent.getInstance(panel.getProject()).setValue(GO_FMT, Boolean.toString(checkBox.isSelected()));\n          }\n\n          public void restoreState() {\n            checkBox.setSelected(enabled(panel));\n          }\n        };",
      "right" : "return new RefreshableOnComponent() {\n          @NotNull\n          public JComponent getComponent() {\n            JPanel panel = new JPanel(new BorderLayout());\n            panel.add(checkBox, BorderLayout.WEST);\n            return panel;\n          }\n\n          public void refresh() {\n          }\n\n          public void saveState() {\n            PropertiesComponent.getInstance(panel.getProject()).setValue(GO_FMT, Boolean.toString(checkBox.isSelected()));\n          }\n\n          public void restoreState() {\n            checkBox.setSelected(enabled(panel));\n          }\n        };",
      "info" : "ReturnStatement[2061-2643]:ReturnStatement[2061-2643]"
    }, {
      "left" : "@NotNull",
      "right" : "@NotNull",
      "info" : "MarkerAnnotation[2109-2117]:MarkerAnnotation[2109-2117]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2128-2134]:Modifier[2128-2134]"
    }, {
      "left" : "JComponent",
      "right" : "JComponent",
      "info" : "SimpleType[2135-2145]:SimpleType[2135-2145]"
    }, {
      "left" : "getComponent",
      "right" : "getComponent",
      "info" : "SimpleName[2146-2158]:SimpleName[2146-2158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2161-2311]:Block[2161-2311]"
    }, {
      "left" : "JPanel panel = new JPanel(new BorderLayout());",
      "right" : "JPanel panel = new JPanel(new BorderLayout());",
      "info" : "VariableDeclarationStatement[2175-2221]:VariableDeclarationStatement[2175-2221]"
    }, {
      "left" : "panel.add(checkBox, BorderLayout.WEST);",
      "right" : "panel.add(checkBox, BorderLayout.WEST);",
      "info" : "ExpressionStatement[2234-2273]:ExpressionStatement[2234-2273]"
    }, {
      "left" : "return panel;",
      "right" : "return panel;",
      "info" : "ReturnStatement[2286-2299]:ReturnStatement[2286-2299]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2323-2329]:Modifier[2323-2329]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2330-2334]:PrimitiveType[2330-2334]"
    }, {
      "left" : "refresh",
      "right" : "refresh",
      "info" : "SimpleName[2335-2342]:SimpleName[2335-2342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2345-2358]:Block[2345-2358]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2370-2376]:Modifier[2370-2376]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2377-2381]:PrimitiveType[2377-2381]"
    }, {
      "left" : "saveState",
      "right" : "saveState",
      "info" : "SimpleName[2382-2391]:SimpleName[2382-2391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2394-2530]:Block[2394-2530]"
    }, {
      "left" : "PropertiesComponent.getInstance(panel.getProject()).setValue(GO_FMT, Boolean.toString(checkBox.isSelected()));",
      "right" : "PropertiesComponent.getInstance(panel.getProject()).setValue(GO_FMT, Boolean.toString(checkBox.isSelected()));",
      "info" : "ExpressionStatement[2408-2518]:ExpressionStatement[2408-2518]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2542-2548]:Modifier[2542-2548]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2549-2553]:PrimitiveType[2549-2553]"
    }, {
      "left" : "restoreState",
      "right" : "restoreState",
      "info" : "SimpleName[2554-2566]:SimpleName[2554-2566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2569-2632]:Block[2569-2632]"
    }, {
      "left" : "checkBox.setSelected(enabled(panel));",
      "right" : "checkBox.setSelected(enabled(panel));",
      "info" : "ExpressionStatement[2583-2620]:ExpressionStatement[2583-2620]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2659-2668]:MarkerAnnotation[2659-2668]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2675-2681]:Modifier[2675-2681]"
    }, {
      "left" : "ReturnResult",
      "right" : "ReturnResult",
      "info" : "SimpleType[2682-2694]:SimpleType[2682-2694]"
    }, {
      "left" : "beforeCheckin",
      "right" : "beforeCheckin",
      "info" : "SimpleName[2695-2708]:SimpleName[2695-2708]"
    }, {
      "left" : "@Nullable CommitExecutor executor",
      "right" : "@Nullable CommitExecutor executor",
      "info" : "SingleVariableDeclaration[2709-2742]:SingleVariableDeclaration[2709-2742]"
    }, {
      "left" : "PairConsumer<Object, Object> additionalDataConsumer",
      "right" : "PairConsumer<Object, Object> additionalDataConsumer",
      "info" : "SingleVariableDeclaration[2744-2795]:SingleVariableDeclaration[2744-2795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2797-3302]:Block[2797-3308]"
    }, {
      "left" : "if (enabled(panel))",
      "right" : "if (enabled(panel))",
      "info" : "IfStatement[2807-3256]:IfStatement[2807-3262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2827-3256]:Block[2827-3262]"
    }, {
      "left" : "FileDocumentManager.getInstance().saveAllDocuments();",
      "right" : "FileDocumentManager.getInstance().saveAllDocuments();",
      "info" : "ExpressionStatement[2839-2892]:ExpressionStatement[2839-2892]"
    }, {
      "left" : "for (PsiFile file : getPsiFiles())",
      "right" : "for (PsiFile file : getPsiFiles())",
      "info" : "EnhancedForStatement[2903-3246]:EnhancedForStatement[2903-3252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2938-3246]:Block[2938-3252]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[2952-3234]:TryStatement[2952-3240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2956-3171]:Block[2956-3177]"
    }, {
      "left" : "VirtualFile virtualFile = file.getVirtualFile();",
      "right" : "VirtualFile virtualFile = file.getVirtualFile();",
      "info" : "VariableDeclarationStatement[2972-3020]:VariableDeclarationStatement[2972-3020]"
    }, {
      "left" : "new GoFmtFileAction().doSomething(virtualFile, ModuleUtilCore.findModuleForPsiElement(file), file.getProject(), \"Go fmt\");",
      "right" : "new GoFmtFileAction().doSomething(virtualFile, ModuleUtilCore.findModuleForPsiElement(file), file.getProject(), \"Go fmt\", true);",
      "info" : "ExpressionStatement[3035-3157]:ExpressionStatement[3035-3163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3219-3234]:Block[3225-3240]"
    }, {
      "left" : "return super.beforeCheckin();",
      "right" : "return super.beforeCheckin();",
      "info" : "ReturnStatement[3265-3294]:ReturnStatement[3271-3300]"
    }, {
      "left" : "@NotNull",
      "right" : "@NotNull",
      "info" : "MarkerAnnotation[3310-3318]:MarkerAnnotation[3316-3324]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3325-3332]:Modifier[3331-3338]"
    }, {
      "left" : "List<PsiFile>",
      "right" : "List<PsiFile>",
      "info" : "ParameterizedType[3333-3346]:ParameterizedType[3339-3352]"
    }, {
      "left" : "getPsiFiles",
      "right" : "getPsiFiles",
      "info" : "SimpleName[3347-3358]:SimpleName[3353-3364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3361-3785]:Block[3367-3791]"
    }, {
      "left" : "Collection<VirtualFile> files = panel.getVirtualFiles();",
      "right" : "Collection<VirtualFile> files = panel.getVirtualFiles();",
      "info" : "VariableDeclarationStatement[3371-3427]:VariableDeclarationStatement[3377-3433]"
    }, {
      "left" : "List<PsiFile> psiFiles = new ArrayList<PsiFile>();",
      "right" : "List<PsiFile> psiFiles = new ArrayList<PsiFile>();",
      "info" : "VariableDeclarationStatement[3436-3486]:VariableDeclarationStatement[3442-3492]"
    }, {
      "left" : "PsiManager manager = PsiManager.getInstance(panel.getProject());",
      "right" : "PsiManager manager = PsiManager.getInstance(panel.getProject());",
      "info" : "VariableDeclarationStatement[3495-3559]:VariableDeclarationStatement[3501-3565]"
    }, {
      "left" : "for (VirtualFile file : files)",
      "right" : "for (VirtualFile file : files)",
      "info" : "EnhancedForStatement[3568-3752]:EnhancedForStatement[3574-3758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3599-3752]:Block[3605-3758]"
    }, {
      "left" : "PsiFile psiFile = manager.findFile(file);",
      "right" : "PsiFile psiFile = manager.findFile(file);",
      "info" : "VariableDeclarationStatement[3611-3652]:VariableDeclarationStatement[3617-3658]"
    }, {
      "left" : "if (psiFile instanceof GoFile)",
      "right" : "if (psiFile instanceof GoFile)",
      "info" : "IfStatement[3663-3742]:IfStatement[3669-3748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3694-3742]:Block[3700-3748]"
    }, {
      "left" : "psiFiles.add(psiFile);",
      "right" : "psiFiles.add(psiFile);",
      "info" : "ExpressionStatement[3708-3730]:ExpressionStatement[3714-3736]"
    }, {
      "left" : "return psiFiles;",
      "right" : "return psiFiles;",
      "info" : "ReturnStatement[3761-3777]:ReturnStatement[3767-3783]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3800-3807]:Modifier[3806-3813]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3808-3814]:Modifier[3814-3820]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3815-3822]:PrimitiveType[3821-3828]"
    }, {
      "left" : "enabled",
      "right" : "enabled",
      "info" : "SimpleName[3823-3830]:SimpleName[3829-3836]"
    }, {
      "left" : "@NotNull CheckinProjectPanel panel",
      "right" : "@NotNull CheckinProjectPanel panel",
      "info" : "SingleVariableDeclaration[3831-3865]:SingleVariableDeclaration[3837-3871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3867-3962]:Block[3873-3968]"
    }, {
      "left" : "return PropertiesComponent.getInstance(panel.getProject()).getBoolean(GO_FMT, false);",
      "right" : "return PropertiesComponent.getInstance(panel.getProject()).getBoolean(GO_FMT, false);",
      "info" : "ReturnStatement[3873-3958]:ReturnStatement[3879-3964]"
    } ]
  },
  "interFileMappings" : { }
}