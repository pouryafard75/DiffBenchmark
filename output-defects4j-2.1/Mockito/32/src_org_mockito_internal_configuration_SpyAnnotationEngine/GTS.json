{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "SpyAnnotationEngine",
      "right" : "SpyAnnotationEngine",
      "info" : "TypeDeclaration[550-2882]:TypeDeclaration[599-3149]"
    }, {
      "left" : "public Object createMockFor(Annotation annotation, Field field)",
      "right" : "public Object createMockFor(Annotation annotation, Field field)",
      "info" : "MethodDeclaration[654-748]:MethodDeclaration[703-797]"
    }, {
      "left" : "public void process(Class<?> context, Object testClass)",
      "right" : "public void process(Class<?> context, Object testClass)",
      "info" : "MethodDeclaration[760-2467]:MethodDeclaration[809-2734]"
    }, {
      "left" : "void assertNoAnnotations(Class annotation, Field field, Class ... undesiredAnnotations)",
      "right" : "void assertNoAnnotations(Class annotation, Field field, Class ... undesiredAnnotations)",
      "info" : "MethodDeclaration[2512-2875]:MethodDeclaration[2779-3142]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[718-748]:Block[767-797]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[729-741]:ReturnStatement[778-790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[854-2467]:Block[903-2734]"
    }, {
      "left" : "Field[] fields = context.getDeclaredFields();",
      "right" : "Field[] fields = context.getDeclaredFields();",
      "info" : "VariableDeclarationStatement[865-910]:VariableDeclarationStatement[914-959]"
    }, {
      "left" : "for (Field field : fields)",
      "right" : "for (Field field : fields)",
      "info" : "EnhancedForStatement[920-2460]:EnhancedForStatement[969-2727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[947-2460]:Block[996-2727]"
    }, {
      "left" : "if (field.isAnnotationPresent(Spy.class))",
      "right" : "if (field.isAnnotationPresent(Spy.class))",
      "info" : "IfStatement[962-2449]:IfStatement[1011-2716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1004-2449]:Block[1053-2716]"
    }, {
      "left" : "assertNoAnnotations(Spy.class, field, Mock.class, org.mockito.MockitoAnnotations.Mock.class, Captor.class);",
      "right" : "assertNoAnnotations(Spy.class, field, Mock.class, org.mockito.MockitoAnnotations.Mock.class, Captor.class);",
      "info" : "ExpressionStatement[1023-1130]:ExpressionStatement[1072-1179]"
    }, {
      "left" : "boolean wasAccessible = field.isAccessible();",
      "right" : "boolean wasAccessible = field.isAccessible();",
      "info" : "VariableDeclarationStatement[1148-1193]:VariableDeclarationStatement[1197-1242]"
    }, {
      "left" : "field.setAccessible(true);",
      "right" : "field.setAccessible(true);",
      "info" : "ExpressionStatement[1211-1237]:ExpressionStatement[1260-1286]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[1255-2434]:TryStatement[1304-2701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1259-2188]:Block[1308-2455]"
    }, {
      "left" : "Object instance = field.get(testClass);",
      "right" : "Object instance = field.get(testClass);",
      "info" : "VariableDeclarationStatement[1282-1321]:VariableDeclarationStatement[1331-1370]"
    }, {
      "left" : "if (instance == null)",
      "right" : "if (instance == null)",
      "info" : "IfStatement[1343-1875]:IfStatement[1392-1924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1365-1875]:Block[1414-1924]"
    }, {
      "left" : "throw new MockitoException(\"Cannot create a @Spy for '\" + field.getName() + \"' field because the *instance* is missing\\n\" +\r\n                        \t\t  \"The instance must be created *before* initMocks();\\n\" +\r\n                                  \"Example of correct usage of @Spy:\\n\" +\r\n                            \t  \"   @Spy List mock = new LinkedList();\\n\" +\r\n                            \t  \"   //also, don't forget about MockitoAnnotations.initMocks();\");",
      "right" : "throw new MockitoException(\"Cannot create a @Spy for '\" + field.getName() + \"' field because the *instance* is missing\\n\" +\r\n                        \t\t  \"The instance must be created *before* initMocks();\\n\" +\r\n                                  \"Example of correct usage of @Spy:\\n\" +\r\n                            \t  \"   @Spy List mock = new LinkedList();\\n\" +\r\n                            \t  \"   //also, don't forget about MockitoAnnotations.initMocks();\");",
      "info" : "ThrowStatement[1392-1850]:ThrowStatement[1441-1899]"
    }, {
      "left" : "if (new MockUtil().isMock(instance))",
      "right" : "if (new MockUtil().isMock(instance))",
      "info" : "IfStatement[1897-2169]:IfStatement[1946-2436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1934-2069]:Block[1983-2118]"
    }, {
      "left" : "Mockito.reset(instance);",
      "right" : "Mockito.reset(instance);",
      "info" : "ExpressionStatement[2022-2046]:ExpressionStatement[2071-2095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2075-2169]:Block[2124-2436]"
    }, {
      "left" : "field.set(testClass, Mockito.spy(instance));",
      "right" : "field.set(testClass, Mockito.mock(instance.getClass(), withSettings()\r\n                                .spiedInstance(instance)\r\n                                .defaultAnswer(Mockito.CALLS_REAL_METHODS)\r\n                                .name(field.getName())));",
      "info" : "ExpressionStatement[2102-2146]:ExpressionStatement[2151-2413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2222-2348]:Block[2489-2615]"
    }, {
      "left" : "throw new MockitoException(\"Problems initiating spied field \" + field.getName(), e);",
      "right" : "throw new MockitoException(\"Problems initiating spied field \" + field.getName(), e);",
      "info" : "ThrowStatement[2245-2329]:ThrowStatement[2512-2596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2357-2434]:Block[2624-2701]"
    }, {
      "left" : "field.setAccessible(wasAccessible);",
      "right" : "field.setAccessible(wasAccessible);",
      "info" : "ExpressionStatement[2380-2415]:ExpressionStatement[2647-2682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2600-2875]:Block[2867-3142]"
    }, {
      "left" : "for (Class u : undesiredAnnotations)",
      "right" : "for (Class u : undesiredAnnotations)",
      "info" : "EnhancedForStatement[2611-2860]:EnhancedForStatement[2878-3127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2648-2860]:Block[2915-3127]"
    }, {
      "left" : "if (field.isAnnotationPresent(u))",
      "right" : "if (field.isAnnotationPresent(u))",
      "info" : "IfStatement[2663-2849]:IfStatement[2930-3116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2697-2849]:Block[2964-3116]"
    }, {
      "left" : "new Reporter().unsupportedCombinationOfAnnotations(annotation.getSimpleName(), annotation.getClass().getSimpleName());",
      "right" : "new Reporter().unsupportedCombinationOfAnnotations(annotation.getSimpleName(), annotation.getClass().getSimpleName());",
      "info" : "ExpressionStatement[2716-2834]:ExpressionStatement[2983-3101]"
    } ]
  },
  "interFileMappings" : { }
}