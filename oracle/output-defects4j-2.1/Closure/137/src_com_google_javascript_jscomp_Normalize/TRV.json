{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[2071-2111]:FieldDeclaration[2071-2111]"
    }, {
      "left" : "private final boolean assertOnChange;",
      "right" : "private final boolean assertOnChange;",
      "info" : "FieldDeclaration[2114-2151]:FieldDeclaration[2114-2151]"
    }, {
      "left" : "private static final boolean CONVERT_WHILE_TO_FOR = true;",
      "right" : "private static final boolean CONVERT_WHILE_TO_FOR = true;",
      "info" : "FieldDeclaration[2154-2211]:FieldDeclaration[2154-2211]"
    }, {
      "left" : "static final boolean MAKE_LOCAL_NAMES_UNIQUE = true;",
      "right" : "static final boolean MAKE_LOCAL_NAMES_UNIQUE = true;",
      "info" : "FieldDeclaration[2214-2266]:FieldDeclaration[2214-2266]"
    }, {
      "left" : "Normalize(AbstractCompiler compiler, boolean assertOnChange)",
      "right" : "Normalize(AbstractCompiler compiler, boolean assertOnChange)",
      "info" : "MethodDeclaration[2270-2408]:MethodDeclaration[2270-2408]"
    }, {
      "left" : "private void reportCodeChange(String changeDescription)",
      "right" : "private void reportCodeChange(String changeDescription)",
      "info" : "MethodDeclaration[2412-2645]:MethodDeclaration[2412-2645]"
    }, {
      "left" : "PropogateConstantAnnotations",
      "right" : "PropogateConstantAnnotations",
      "info" : "TypeDeclaration[4020-5703]:TypeDeclaration[4020-5703]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[4145-4185]:FieldDeclaration[4145-4185]"
    }, {
      "left" : "private final boolean assertOnChange;",
      "right" : "private final boolean assertOnChange;",
      "info" : "FieldDeclaration[4190-4227]:FieldDeclaration[4190-4227]"
    }, {
      "left" : "public PropogateConstantAnnotations(\n        AbstractCompiler compiler, boolean forbidChanges)",
      "right" : "public PropogateConstantAnnotations(\n        AbstractCompiler compiler, boolean forbidChanges)",
      "info" : "MethodDeclaration[4233-4410]:MethodDeclaration[4233-4410]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[4416-4552]:MethodDeclaration[4416-4552]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[4558-5699]:MethodDeclaration[4558-5699]"
    }, {
      "left" : "VerifyConstants",
      "right" : "VerifyConstants",
      "info" : "TypeDeclaration[5707-8170]:TypeDeclaration[5707-8170]"
    }, {
      "left" : "final private AbstractCompiler compiler;",
      "right" : "final private AbstractCompiler compiler;",
      "info" : "FieldDeclaration[5896-5936]:FieldDeclaration[5896-5936]"
    }, {
      "left" : "final private boolean checkUserDeclarations;",
      "right" : "final private boolean checkUserDeclarations;",
      "info" : "FieldDeclaration[5941-5985]:FieldDeclaration[5941-5985]"
    }, {
      "left" : "VerifyConstants(AbstractCompiler compiler, boolean checkUserDeclarations)",
      "right" : "VerifyConstants(AbstractCompiler compiler, boolean checkUserDeclarations)",
      "info" : "MethodDeclaration[5991-6162]:MethodDeclaration[5991-6162]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[6168-6494]:MethodDeclaration[6168-6494]"
    }, {
      "left" : "private Map<String,Boolean> constantMap = Maps.newHashMap();",
      "right" : "private Map<String,Boolean> constantMap = Maps.newHashMap();",
      "info" : "FieldDeclaration[6500-6560]:FieldDeclaration[6500-6560]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[6566-8166]:MethodDeclaration[6566-8166]"
    }, {
      "left" : "NormalizeStatements",
      "right" : "NormalizeStatements",
      "info" : "TypeDeclaration[8174-15936]:TypeDeclaration[8174-15936]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[8575-8615]:FieldDeclaration[8575-8615]"
    }, {
      "left" : "private final boolean assertOnChange;",
      "right" : "private final boolean assertOnChange;",
      "info" : "FieldDeclaration[8620-8657]:FieldDeclaration[8620-8657]"
    }, {
      "left" : "NormalizeStatements(AbstractCompiler compiler, boolean assertOnChange)",
      "right" : "NormalizeStatements(AbstractCompiler compiler, boolean assertOnChange)",
      "info" : "MethodDeclaration[8663-8817]:MethodDeclaration[8663-8817]"
    }, {
      "left" : "private void reportCodeChange(String changeDescription)",
      "right" : "private void reportCodeChange(String changeDescription)",
      "info" : "MethodDeclaration[8823-9068]:MethodDeclaration[8823-9068]"
    }, {
      "left" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "right" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[9074-9230]:MethodDeclaration[9074-9230]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[9236-9681]:MethodDeclaration[9236-9681]"
    }, {
      "left" : "private void doStatementNormalizations(\n        NodeTraversal t, Node n, Node parent)",
      "right" : "private void doStatementNormalizations(\n        NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[9687-10500]:MethodDeclaration[9687-10500]"
    }, {
      "left" : "private void normalizeLabels(Node n)",
      "right" : "private void normalizeLabels(Node n)",
      "info" : "MethodDeclaration[10599-11381]:MethodDeclaration[10599-11381]"
    }, {
      "left" : "private void extractForInitializer(\n        Node n, Node before, Node beforeParent)",
      "right" : "private void extractForInitializer(\n        Node n, Node before, Node beforeParent)",
      "info" : "MethodDeclaration[11387-13073]:MethodDeclaration[11387-13073]"
    }, {
      "left" : "private void splitVarDeclarations(Node n)",
      "right" : "private void splitVarDeclarations(Node n)",
      "info" : "MethodDeclaration[13079-13947]:MethodDeclaration[13079-13947]"
    }, {
      "left" : "private void moveNamedFunctions(Node functionBody)",
      "right" : "private void moveNamedFunctions(Node functionBody)",
      "info" : "MethodDeclaration[13953-15488]:MethodDeclaration[13953-15488]"
    }, {
      "left" : "private Node addToFront(Node parent, Node newChild, Node after)",
      "right" : "private Node addToFront(Node parent, Node newChild, Node after)",
      "info" : "MethodDeclaration[15494-15932]:MethodDeclaration[15494-15932]"
    }, {
      "left" : "private void removeDuplicateDeclarations(Node root)",
      "right" : "private void removeDuplicateDeclarations(Node root)",
      "info" : "MethodDeclaration[15940-16311]:MethodDeclaration[15940-16311]"
    }, {
      "left" : "DuplicateDeclarationHandler",
      "right" : "DuplicateDeclarationHandler",
      "info" : "TypeDeclaration[16315-19047]:TypeDeclaration[16315-19047]"
    }, {
      "left" : "public void onRedeclaration(\n        Scope s, String name, Node n, Node parent, Node gramps,\n        Node nodeWithLineNumber)",
      "right" : "public void onRedeclaration(\n        Scope s, String name, Node n, Node parent, Node gramps,\n        Node nodeWithLineNumber)",
      "info" : "MethodDeclaration[16491-19042]:MethodDeclaration[16491-19042]"
    }, {
      "left" : "ScopeTicklingCallback",
      "right" : "ScopeTicklingCallback",
      "info" : "TypeDeclaration[19051-19716]:TypeDeclaration[19051-19716]"
    }, {
      "left" : "public void enterScope(NodeTraversal t)",
      "right" : "public void enterScope(NodeTraversal t)",
      "info" : "MethodDeclaration[19210-19380]:MethodDeclaration[19210-19380]"
    }, {
      "left" : "public void exitScope(NodeTraversal t)",
      "right" : "public void exitScope(NodeTraversal t)",
      "info" : "MethodDeclaration[19386-19470]:MethodDeclaration[19386-19470]"
    }, {
      "left" : "public boolean shouldTraverse(\n        NodeTraversal nodeTraversal, Node n, Node parent)",
      "right" : "public boolean shouldTraverse(\n        NodeTraversal nodeTraversal, Node n, Node parent)",
      "info" : "MethodDeclaration[19476-19605]:MethodDeclaration[19476-19605]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[19611-19712]:MethodDeclaration[19611-19712]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2331-2408]:Block[2331-2408]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[2337-2362]:ExpressionStatement[2337-2362]"
    }, {
      "left" : "this.assertOnChange = assertOnChange;",
      "right" : "this.assertOnChange = assertOnChange;",
      "info" : "ExpressionStatement[2367-2404]:ExpressionStatement[2367-2404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2468-2645]:Block[2468-2645]"
    }, {
      "left" : "if (assertOnChange)",
      "right" : "if (assertOnChange)",
      "info" : "IfStatement[2474-2608]:IfStatement[2474-2608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2494-2608]:Block[2494-2608]"
    }, {
      "left" : "throw new IllegalStateException(\n          \"Normalize constraints violated:\\n\" + changeDescription);",
      "right" : "throw new IllegalStateException(\n          \"Normalize constraints violated:\\n\" + changeDescription);",
      "info" : "ThrowStatement[2502-2602]:ThrowStatement[2502-2602]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[2613-2641]:ExpressionStatement[2613-2641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4328-4410]:Block[4328-4410]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[4336-4361]:ExpressionStatement[4336-4361]"
    }, {
      "left" : "this.assertOnChange = forbidChanges;",
      "right" : "this.assertOnChange = forbidChanges;",
      "info" : "ExpressionStatement[4368-4404]:ExpressionStatement[4368-4404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4475-4552]:Block[4475-4552]"
    }, {
      "left" : "new NodeTraversal(compiler, this).traverseRoots(externs, root);",
      "right" : "new NodeTraversal(compiler, this).traverseRoots(externs, root);",
      "info" : "ExpressionStatement[4483-4546]:ExpressionStatement[4483-4546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4628-5699]:Block[4628-5699]"
    }, {
      "left" : "if (n.getType() == Token.NAME)",
      "right" : "if (n.getType() == Token.NAME)",
      "info" : "IfStatement[4703-5693]:IfStatement[4703-5693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4734-5693]:Block[4734-5693]"
    }, {
      "left" : "if (n.getString().isEmpty())",
      "right" : "if (n.getString().isEmpty())",
      "info" : "IfStatement[4744-4802]:IfStatement[4744-4802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4773-4802]:Block[4773-4802]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4785-4792]:ReturnStatement[4785-4792]"
    }, {
      "left" : "JSDocInfo info = null;",
      "right" : "JSDocInfo info = null;",
      "info" : "VariableDeclarationStatement[4812-4834]:VariableDeclarationStatement[4812-4834]"
    }, {
      "left" : "Var var = t.getScope().getVar(n.getString());",
      "right" : "Var var = t.getScope().getVar(n.getString());",
      "info" : "VariableDeclarationStatement[4899-4944]:VariableDeclarationStatement[4899-4944]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[4953-5018]:IfStatement[4953-5018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4970-5018]:Block[4970-5018]"
    }, {
      "left" : "info = var.getJSDocInfo();",
      "right" : "info = var.getJSDocInfo();",
      "info" : "ExpressionStatement[4982-5008]:ExpressionStatement[4982-5008]"
    }, {
      "left" : "if ((info != null && info.isConstant()) &&\n            !n.getBooleanProp(Node.IS_CONSTANT_NAME))",
      "right" : "if ((info != null && info.isConstant()) &&\n            !n.getBooleanProp(Node.IS_CONSTANT_NAME))",
      "info" : "IfStatement[5028-5685]:IfStatement[5028-5685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5125-5685]:Block[5125-5685]"
    }, {
      "left" : "n.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "n.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[5137-5183]:ExpressionStatement[5137-5183]"
    }, {
      "left" : "if (assertOnChange)",
      "right" : "if (assertOnChange)",
      "info" : "IfStatement[5194-5475]:IfStatement[5194-5475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5214-5475]:Block[5214-5475]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[5228-5256]:VariableDeclarationStatement[5228-5256]"
    }, {
      "left" : "throw new IllegalStateException(\n                \"Unexpected const change.\\n\" +\n                \"  name: \"+ name + \"\\n\" +\n                \"  gramps:\" + n.getParent().getParent().toStringTree());",
      "right" : "throw new IllegalStateException(\n                \"Unexpected const change.\\n\" +\n                \"  name: \"+ name + \"\\n\" +\n                \"  gramps:\" + n.getParent().getParent().toStringTree());",
      "info" : "ThrowStatement[5269-5463]:ThrowStatement[5269-5463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6065-6162]:Block[6065-6162]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[6073-6098]:ExpressionStatement[6073-6098]"
    }, {
      "left" : "this.checkUserDeclarations = checkUserDeclarations;",
      "right" : "this.checkUserDeclarations = checkUserDeclarations;",
      "info" : "ExpressionStatement[6105-6156]:ExpressionStatement[6105-6156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6227-6494]:Block[6227-6494]"
    }, {
      "left" : "Node externsAndJs = root.getParent();",
      "right" : "Node externsAndJs = root.getParent();",
      "info" : "VariableDeclarationStatement[6235-6272]:VariableDeclarationStatement[6235-6272]"
    }, {
      "left" : "Preconditions.checkState(externsAndJs != null);",
      "right" : "Preconditions.checkState(externsAndJs != null);",
      "info" : "ExpressionStatement[6279-6326]:ExpressionStatement[6279-6326]"
    }, {
      "left" : "Preconditions.checkState(externsAndJs.hasChild(externs));",
      "right" : "Preconditions.checkState(externsAndJs.hasChild(externs));",
      "info" : "ExpressionStatement[6333-6390]:ExpressionStatement[6333-6390]"
    }, {
      "left" : "NodeTraversal.traverseRoots(\n          compiler, Lists.newArrayList(externs, root), this);",
      "right" : "NodeTraversal.traverseRoots(\n          compiler, Lists.newArrayList(externs, root), this);",
      "info" : "ExpressionStatement[6398-6488]:ExpressionStatement[6398-6488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6636-8166]:Block[6636-8166]"
    }, {
      "left" : "if (n.getType() == Token.NAME)",
      "right" : "if (n.getType() == Token.NAME)",
      "info" : "IfStatement[6644-8160]:IfStatement[6644-8160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6675-8160]:Block[6675-8160]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[6685-6713]:VariableDeclarationStatement[6685-6713]"
    }, {
      "left" : "if (n.getString().isEmpty())",
      "right" : "if (n.getString().isEmpty())",
      "info" : "IfStatement[6722-6780]:IfStatement[6722-6780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6751-6780]:Block[6751-6780]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6763-6770]:ReturnStatement[6763-6770]"
    }, {
      "left" : "boolean isConst = n.getBooleanProp(Node.IS_CONSTANT_NAME);",
      "right" : "boolean isConst = n.getBooleanProp(Node.IS_CONSTANT_NAME);",
      "info" : "VariableDeclarationStatement[6790-6848]:VariableDeclarationStatement[6790-6848]"
    }, {
      "left" : "if (checkUserDeclarations)",
      "right" : "if (checkUserDeclarations)",
      "info" : "IfStatement[6857-7836]:IfStatement[6857-7836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6884-7836]:Block[6884-7836]"
    }, {
      "left" : "boolean expectedConst = false;",
      "right" : "boolean expectedConst = false;",
      "info" : "VariableDeclarationStatement[6896-6926]:VariableDeclarationStatement[6896-6926]"
    }, {
      "left" : "if (NodeUtil.isConstantName(n)\n              || compiler.getCodingConvention().isConstant(n.getString()))",
      "right" : "if (NodeUtil.isConstantName(n)\n              || compiler.getCodingConvention().isConstant(n.getString()))",
      "info" : "IfStatement[6937-7486]:IfStatement[6937-7486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7043-7090]:Block[7043-7090]"
    }, {
      "left" : "expectedConst = true;",
      "right" : "expectedConst = true;",
      "info" : "ExpressionStatement[7057-7078]:ExpressionStatement[7057-7078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7096-7486]:Block[7096-7486]"
    }, {
      "left" : "expectedConst = false;",
      "right" : "expectedConst = false;",
      "info" : "ExpressionStatement[7110-7132]:ExpressionStatement[7110-7132]"
    }, {
      "left" : "JSDocInfo info = null;",
      "right" : "JSDocInfo info = null;",
      "info" : "VariableDeclarationStatement[7146-7168]:VariableDeclarationStatement[7146-7168]"
    }, {
      "left" : "Var var = t.getScope().getVar(n.getString());",
      "right" : "Var var = t.getScope().getVar(n.getString());",
      "info" : "VariableDeclarationStatement[7181-7226]:VariableDeclarationStatement[7181-7226]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[7239-7312]:IfStatement[7239-7312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7256-7312]:Block[7256-7312]"
    }, {
      "left" : "info = var.getJSDocInfo();",
      "right" : "info = var.getJSDocInfo();",
      "info" : "ExpressionStatement[7272-7298]:ExpressionStatement[7272-7298]"
    }, {
      "left" : "if (info != null && info.isConstant())",
      "right" : "if (info != null && info.isConstant())",
      "info" : "IfStatement[7326-7474]:IfStatement[7326-7474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7365-7416]:Block[7365-7416]"
    }, {
      "left" : "expectedConst = true;",
      "right" : "expectedConst = true;",
      "info" : "ExpressionStatement[7381-7402]:ExpressionStatement[7381-7402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7422-7474]:Block[7422-7474]"
    }, {
      "left" : "expectedConst = false;",
      "right" : "expectedConst = false;",
      "info" : "ExpressionStatement[7438-7460]:ExpressionStatement[7438-7460]"
    }, {
      "left" : "if (expectedConst)",
      "right" : "if (expectedConst)",
      "info" : "IfStatement[7498-7826]:IfStatement[7498-7826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7517-7665]:Block[7517-7665]"
    }, {
      "left" : "Preconditions.checkState(expectedConst == isConst,\n                \"The name \" + name + \" is not annotated as constant.\");",
      "right" : "Preconditions.checkState(expectedConst == isConst,\n                \"The name \" + name + \" is not annotated as constant.\");",
      "info" : "ExpressionStatement[7531-7653]:ExpressionStatement[7531-7653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7671-7826]:Block[7671-7826]"
    }, {
      "left" : "Preconditions.checkState(expectedConst == isConst,\n                \"The name \" + name + \" should not be annotated as constant.\");",
      "right" : "Preconditions.checkState(expectedConst == isConst,\n                \"The name \" + name + \" should not be annotated as constant.\");",
      "info" : "ExpressionStatement[7685-7814]:ExpressionStatement[7685-7814]"
    }, {
      "left" : "Boolean value = constantMap.get(name);",
      "right" : "Boolean value = constantMap.get(name);",
      "info" : "VariableDeclarationStatement[7846-7884]:VariableDeclarationStatement[7846-7884]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[7893-8152]:IfStatement[7893-8152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7912-7965]:Block[7912-7965]"
    }, {
      "left" : "constantMap.put(name, isConst);",
      "right" : "constantMap.put(name, isConst);",
      "info" : "ExpressionStatement[7924-7955]:ExpressionStatement[7924-7955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7971-8152]:Block[7971-8152]"
    }, {
      "left" : "Preconditions.checkState(value.booleanValue() == isConst,\n              \"The name \" + name + \" is not consistently annotated as \" +\n              \"constant.\");",
      "right" : "Preconditions.checkState(value.booleanValue() == isConst,\n              \"The name \" + name + \" is not consistently annotated as \" +\n              \"constant.\");",
      "info" : "ExpressionStatement[7983-8142]:ExpressionStatement[7983-8142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8734-8817]:Block[8734-8817]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[8742-8767]:ExpressionStatement[8742-8767]"
    }, {
      "left" : "this.assertOnChange = assertOnChange;",
      "right" : "this.assertOnChange = assertOnChange;",
      "info" : "ExpressionStatement[8774-8811]:ExpressionStatement[8774-8811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8879-9068]:Block[8879-9068]"
    }, {
      "left" : "if (assertOnChange)",
      "right" : "if (assertOnChange)",
      "info" : "IfStatement[8887-9027]:IfStatement[8887-9027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8907-9027]:Block[8907-9027]"
    }, {
      "left" : "throw new IllegalStateException(\n            \"Normalize constraints violated:\\n\" + changeDescription);",
      "right" : "throw new IllegalStateException(\n            \"Normalize constraints violated:\\n\" + changeDescription);",
      "info" : "ThrowStatement[8917-9019]:ThrowStatement[8917-9019]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[9034-9062]:ExpressionStatement[9034-9062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9156-9230]:Block[9156-9230]"
    }, {
      "left" : "doStatementNormalizations(t, n, parent);",
      "right" : "doStatementNormalizations(t, n, parent);",
      "info" : "ExpressionStatement[9164-9204]:ExpressionStatement[9164-9204]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9212-9224]:ReturnStatement[9212-9224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9306-9681]:Block[9306-9681]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.WHILE:\n          if (CONVERT_WHILE_TO_FOR) {\n            Node expr = n.getFirstChild();\n            n.setType(Token.FOR);\n            n.addChildBefore(new Node(Token.EMPTY), expr);\n            n.addChildAfter(new Node(Token.EMPTY), expr);\n            reportCodeChange(\"WHILE node\");\n          }\n          break;\n      }",
      "right" : "switch (n.getType()) {\n        case Token.WHILE:\n          if (CONVERT_WHILE_TO_FOR) {\n            Node expr = n.getFirstChild();\n            n.setType(Token.FOR);\n            n.addChildBefore(new Node(Token.EMPTY), expr);\n            n.addChildAfter(new Node(Token.EMPTY), expr);\n            reportCodeChange(\"WHILE node\");\n          }\n          break;\n      }",
      "info" : "SwitchStatement[9314-9675]:SwitchStatement[9314-9675]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[9345-9362]:SwitchCase[9345-9362]"
    }, {
      "left" : "if (CONVERT_WHILE_TO_FOR)",
      "right" : "if (CONVERT_WHILE_TO_FOR)",
      "info" : "IfStatement[9373-9650]:IfStatement[9373-9650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9399-9650]:Block[9399-9650]"
    }, {
      "left" : "Node expr = n.getFirstChild();",
      "right" : "Node expr = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[9413-9443]:VariableDeclarationStatement[9413-9443]"
    }, {
      "left" : "n.setType(Token.FOR);",
      "right" : "n.setType(Token.FOR);",
      "info" : "ExpressionStatement[9456-9477]:ExpressionStatement[9456-9477]"
    }, {
      "left" : "n.addChildBefore(new Node(Token.EMPTY), expr);",
      "right" : "n.addChildBefore(new Node(Token.EMPTY), expr);",
      "info" : "ExpressionStatement[9490-9536]:ExpressionStatement[9490-9536]"
    }, {
      "left" : "n.addChildAfter(new Node(Token.EMPTY), expr);",
      "right" : "n.addChildAfter(new Node(Token.EMPTY), expr);",
      "info" : "ExpressionStatement[9549-9594]:ExpressionStatement[9549-9594]"
    }, {
      "left" : "reportCodeChange(\"WHILE node\");",
      "right" : "reportCodeChange(\"WHILE node\");",
      "info" : "ExpressionStatement[9607-9638]:ExpressionStatement[9607-9638]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9661-9667]:BreakStatement[9661-9667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9854-10500]:Block[9854-10500]"
    }, {
      "left" : "if (n.getType() == Token.LABEL)",
      "right" : "if (n.getType() == Token.LABEL)",
      "info" : "IfStatement[9862-9931]:IfStatement[9862-9931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9894-9931]:Block[9894-9931]"
    }, {
      "left" : "normalizeLabels(n);",
      "right" : "normalizeLabels(n);",
      "info" : "ExpressionStatement[9904-9923]:ExpressionStatement[9904-9923]"
    }, {
      "left" : "if (NodeUtil.isStatementBlock(n) || n.getType() == Token.LABEL)",
      "right" : "if (NodeUtil.isStatementBlock(n) || n.getType() == Token.LABEL)",
      "info" : "IfStatement[10081-10200]:IfStatement[10081-10200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10145-10200]:Block[10145-10200]"
    }, {
      "left" : "extractForInitializer(n, null, null);",
      "right" : "extractForInitializer(n, null, null);",
      "info" : "ExpressionStatement[10155-10192]:ExpressionStatement[10155-10192]"
    }, {
      "left" : "if (NodeUtil.isStatementBlock(n))",
      "right" : "if (NodeUtil.isStatementBlock(n))",
      "info" : "IfStatement[10320-10396]:IfStatement[10320-10396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10354-10396]:Block[10354-10396]"
    }, {
      "left" : "splitVarDeclarations(n);",
      "right" : "splitVarDeclarations(n);",
      "info" : "ExpressionStatement[10364-10388]:ExpressionStatement[10364-10388]"
    }, {
      "left" : "if (n.getType() == Token.FUNCTION)",
      "right" : "if (n.getType() == Token.FUNCTION)",
      "info" : "IfStatement[10404-10494]:IfStatement[10404-10494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10439-10494]:Block[10439-10494]"
    }, {
      "left" : "moveNamedFunctions(n.getLastChild());",
      "right" : "moveNamedFunctions(n.getLastChild());",
      "info" : "ExpressionStatement[10449-10486]:ExpressionStatement[10449-10486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10881-11381]:Block[10881-11381]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.LABEL);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.LABEL);",
      "info" : "ExpressionStatement[10889-10945]:ExpressionStatement[10889-10945]"
    }, {
      "left" : "Node last = n.getLastChild();",
      "right" : "Node last = n.getLastChild();",
      "info" : "VariableDeclarationStatement[10953-10982]:VariableDeclarationStatement[10953-10982]"
    }, {
      "left" : "switch (last.getType()) {\n        case Token.LABEL:\n        case Token.BLOCK:\n        case Token.FOR:\n        case Token.WHILE:\n        case Token.DO:\n          return;\n        default:\n          Node block = new Node(Token.BLOCK);\n          n.replaceChild(last, block);\n          block.addChildToFront(last);\n          reportCodeChange(\"LABEL normalization\");\n          return;\n      }",
      "right" : "switch (last.getType()) {\n        case Token.LABEL:\n        case Token.BLOCK:\n        case Token.FOR:\n        case Token.WHILE:\n        case Token.DO:\n          return;\n        default:\n          Node block = new Node(Token.BLOCK);\n          n.replaceChild(last, block);\n          block.addChildToFront(last);\n          reportCodeChange(\"LABEL normalization\");\n          return;\n      }",
      "info" : "SwitchStatement[10989-11375]:SwitchStatement[10989-11375]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[11023-11040]:SwitchCase[11023-11040]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[11049-11066]:SwitchCase[11049-11066]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[11075-11090]:SwitchCase[11075-11090]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[11099-11116]:SwitchCase[11099-11116]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[11125-11139]:SwitchCase[11125-11139]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11150-11157]:ReturnStatement[11150-11157]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11166-11174]:SwitchCase[11166-11174]"
    }, {
      "left" : "Node block = new Node(Token.BLOCK);",
      "right" : "Node block = new Node(Token.BLOCK);",
      "info" : "VariableDeclarationStatement[11185-11220]:VariableDeclarationStatement[11185-11220]"
    }, {
      "left" : "n.replaceChild(last, block);",
      "right" : "n.replaceChild(last, block);",
      "info" : "ExpressionStatement[11231-11259]:ExpressionStatement[11231-11259]"
    }, {
      "left" : "block.addChildToFront(last);",
      "right" : "block.addChildToFront(last);",
      "info" : "ExpressionStatement[11270-11298]:ExpressionStatement[11270-11298]"
    }, {
      "left" : "reportCodeChange(\"LABEL normalization\");",
      "right" : "reportCodeChange(\"LABEL normalization\");",
      "info" : "ExpressionStatement[11309-11349]:ExpressionStatement[11309-11349]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11360-11367]:ReturnStatement[11360-11367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11950-13073]:Block[11950-13073]"
    }, {
      "left" : "for (Node next, c = n.getFirstChild(); c != null; c = next)",
      "right" : "for (Node next, c = n.getFirstChild(); c != null; c = next)",
      "info" : "ForStatement[11959-13067]:ForStatement[11959-13067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12019-13067]:Block[12019-13067]"
    }, {
      "left" : "next = c.getNext();",
      "right" : "next = c.getNext();",
      "info" : "ExpressionStatement[12029-12048]:ExpressionStatement[12029-12048]"
    }, {
      "left" : "Node insertBefore = (before == null) ? c : before;",
      "right" : "Node insertBefore = (before == null) ? c : before;",
      "info" : "VariableDeclarationStatement[12057-12107]:VariableDeclarationStatement[12057-12107]"
    }, {
      "left" : "Node insertBeforeParent = (before == null) ? n : beforeParent;",
      "right" : "Node insertBeforeParent = (before == null) ? n : beforeParent;",
      "info" : "VariableDeclarationStatement[12116-12178]:VariableDeclarationStatement[12116-12178]"
    }, {
      "left" : "switch (c.getType()) {\n          case Token.LABEL:\n            extractForInitializer(c, insertBefore, insertBeforeParent);\n            break;\n          case Token.FOR:\n            if (!NodeUtil.isForIn(c)\n                && c.getFirstChild().getType() != Token.EMPTY) {\n              Node init = c.getFirstChild();\n              c.replaceChild(init, new Node(Token.EMPTY));\n\n              Node newStatement;\n              // Only VAR statements, and expressions are allowed,\n              // but are handled differently.\n              if (init.getType() == Token.VAR) {\n                newStatement = init;\n              } else {\n                newStatement = NodeUtil.newExpr(init);\n              }\n\n              insertBeforeParent.addChildBefore(newStatement, insertBefore);\n              reportCodeChange(\"FOR initializer\");\n            }\n            break;\n        }",
      "right" : "switch (c.getType()) {\n          case Token.LABEL:\n            extractForInitializer(c, insertBefore, insertBeforeParent);\n            break;\n          case Token.FOR:\n            if (!NodeUtil.isForIn(c)\n                && c.getFirstChild().getType() != Token.EMPTY) {\n              Node init = c.getFirstChild();\n              c.replaceChild(init, new Node(Token.EMPTY));\n\n              Node newStatement;\n              // Only VAR statements, and expressions are allowed,\n              // but are handled differently.\n              if (init.getType() == Token.VAR) {\n                newStatement = init;\n              } else {\n                newStatement = NodeUtil.newExpr(init);\n              }\n\n              insertBeforeParent.addChildBefore(newStatement, insertBefore);\n              reportCodeChange(\"FOR initializer\");\n            }\n            break;\n        }",
      "info" : "SwitchStatement[12187-13059]:SwitchStatement[12187-13059]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[12220-12237]:SwitchCase[12220-12237]"
    }, {
      "left" : "extractForInitializer(c, insertBefore, insertBeforeParent);",
      "right" : "extractForInitializer(c, insertBefore, insertBeforeParent);",
      "info" : "ExpressionStatement[12250-12309]:ExpressionStatement[12250-12309]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12322-12328]:BreakStatement[12322-12328]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[12339-12354]:SwitchCase[12339-12354]"
    }, {
      "left" : "if (!NodeUtil.isForIn(c)\n                && c.getFirstChild().getType() != Token.EMPTY)",
      "right" : "if (!NodeUtil.isForIn(c)\n                && c.getFirstChild().getType() != Token.EMPTY)",
      "info" : "IfStatement[12367-13030]:IfStatement[12367-13030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12455-13030]:Block[12455-13030]"
    }, {
      "left" : "Node init = c.getFirstChild();",
      "right" : "Node init = c.getFirstChild();",
      "info" : "VariableDeclarationStatement[12471-12501]:VariableDeclarationStatement[12471-12501]"
    }, {
      "left" : "c.replaceChild(init, new Node(Token.EMPTY));",
      "right" : "c.replaceChild(init, new Node(Token.EMPTY));",
      "info" : "ExpressionStatement[12516-12560]:ExpressionStatement[12516-12560]"
    }, {
      "left" : "Node newStatement;",
      "right" : "Node newStatement;",
      "info" : "VariableDeclarationStatement[12576-12594]:VariableDeclarationStatement[12576-12594]"
    }, {
      "left" : "if (init.getType() == Token.VAR)",
      "right" : "if (init.getType() == Token.VAR)",
      "info" : "IfStatement[12722-12887]:IfStatement[12722-12887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12755-12809]:Block[12755-12809]"
    }, {
      "left" : "newStatement = init;",
      "right" : "newStatement = init;",
      "info" : "ExpressionStatement[12773-12793]:ExpressionStatement[12773-12793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12815-12887]:Block[12815-12887]"
    }, {
      "left" : "newStatement = NodeUtil.newExpr(init);",
      "right" : "newStatement = NodeUtil.newExpr(init);",
      "info" : "ExpressionStatement[12833-12871]:ExpressionStatement[12833-12871]"
    }, {
      "left" : "insertBeforeParent.addChildBefore(newStatement, insertBefore);",
      "right" : "insertBeforeParent.addChildBefore(newStatement, insertBefore);",
      "info" : "ExpressionStatement[12903-12965]:ExpressionStatement[12903-12965]"
    }, {
      "left" : "reportCodeChange(\"FOR initializer\");",
      "right" : "reportCodeChange(\"FOR initializer\");",
      "info" : "ExpressionStatement[12980-13016]:ExpressionStatement[12980-13016]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13043-13049]:BreakStatement[13043-13049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13310-13947]:Block[13310-13947]"
    }, {
      "left" : "for (Node next, c = n.getFirstChild(); c != null; c = next)",
      "right" : "for (Node next, c = n.getFirstChild(); c != null; c = next)",
      "info" : "ForStatement[13318-13941]:ForStatement[13318-13941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13378-13941]:Block[13378-13941]"
    }, {
      "left" : "next = c.getNext();",
      "right" : "next = c.getNext();",
      "info" : "ExpressionStatement[13388-13407]:ExpressionStatement[13388-13407]"
    }, {
      "left" : "if (c.getType() == Token.VAR)",
      "right" : "if (c.getType() == Token.VAR)",
      "info" : "IfStatement[13416-13933]:IfStatement[13416-13933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13446-13933]:Block[13446-13933]"
    }, {
      "left" : "if (assertOnChange && !c.hasChildren())",
      "right" : "if (assertOnChange && !c.hasChildren())",
      "info" : "IfStatement[13458-13575]:IfStatement[13458-13575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13498-13575]:Block[13498-13575]"
    }, {
      "left" : "throw new IllegalStateException(\"Empty VAR node.\");",
      "right" : "throw new IllegalStateException(\"Empty VAR node.\");",
      "info" : "ThrowStatement[13512-13563]:ThrowStatement[13512-13563]"
    }, {
      "left" : "while (c.getFirstChild() != c.getLastChild())",
      "right" : "while (c.getFirstChild() != c.getLastChild())",
      "info" : "WhileStatement[13587-13923]:WhileStatement[13587-13923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13633-13923]:Block[13633-13923]"
    }, {
      "left" : "Node name = c.getFirstChild();",
      "right" : "Node name = c.getFirstChild();",
      "info" : "VariableDeclarationStatement[13647-13677]:VariableDeclarationStatement[13647-13677]"
    }, {
      "left" : "c.removeChild(name);",
      "right" : "c.removeChild(name);",
      "info" : "ExpressionStatement[13690-13710]:ExpressionStatement[13690-13710]"
    }, {
      "left" : "Node newVar = new Node(\n                Token.VAR, name, n.getLineno(), n.getCharno());",
      "right" : "Node newVar = new Node(\n                Token.VAR, name, n.getLineno(), n.getCharno());",
      "info" : "VariableDeclarationStatement[13723-13810]:VariableDeclarationStatement[13723-13810]"
    }, {
      "left" : "n.addChildBefore(newVar, c);",
      "right" : "n.addChildBefore(newVar, c);",
      "info" : "ExpressionStatement[13823-13851]:ExpressionStatement[13823-13851]"
    }, {
      "left" : "reportCodeChange(\"VAR with multiple children\");",
      "right" : "reportCodeChange(\"VAR with multiple children\");",
      "info" : "ExpressionStatement[13864-13911]:ExpressionStatement[13864-13911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14173-15488]:Block[14173-15488]"
    }, {
      "left" : "Preconditions.checkState(\n          functionBody.getParent().getType() == Token.FUNCTION);",
      "right" : "Preconditions.checkState(\n          functionBody.getParent().getType() == Token.FUNCTION);",
      "info" : "ExpressionStatement[14181-14271]:ExpressionStatement[14181-14271]"
    }, {
      "left" : "Node previous = null;",
      "right" : "Node previous = null;",
      "info" : "VariableDeclarationStatement[14278-14299]:VariableDeclarationStatement[14278-14299]"
    }, {
      "left" : "Node current = functionBody.getFirstChild();",
      "right" : "Node current = functionBody.getFirstChild();",
      "info" : "VariableDeclarationStatement[14306-14350]:VariableDeclarationStatement[14306-14350]"
    }, {
      "left" : "while (current != null && NodeUtil.isFunctionDeclaration(current))",
      "right" : "while (current != null && NodeUtil.isFunctionDeclaration(current))",
      "info" : "WhileStatement[14473-14614]:WhileStatement[14473-14614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14540-14614]:Block[14540-14614]"
    }, {
      "left" : "previous = current;",
      "right" : "previous = current;",
      "info" : "ExpressionStatement[14550-14569]:ExpressionStatement[14550-14569]"
    }, {
      "left" : "current = current.getNext();",
      "right" : "current = current.getNext();",
      "info" : "ExpressionStatement[14578-14606]:ExpressionStatement[14578-14606]"
    }, {
      "left" : "Node insertAfter = previous;",
      "right" : "Node insertAfter = previous;",
      "info" : "VariableDeclarationStatement[14678-14706]:VariableDeclarationStatement[14678-14706]"
    }, {
      "left" : "while (current != null)",
      "right" : "while (current != null)",
      "info" : "WhileStatement[14713-15482]:WhileStatement[14713-15482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14737-15482]:Block[14737-15482]"
    }, {
      "left" : "Node next = current.getNext();",
      "right" : "Node next = current.getNext();",
      "info" : "VariableDeclarationStatement[14816-14846]:VariableDeclarationStatement[14816-14846]"
    }, {
      "left" : "if (NodeUtil.isFunctionDeclaration(current))",
      "right" : "if (NodeUtil.isFunctionDeclaration(current))",
      "info" : "IfStatement[14855-15450]:IfStatement[14855-15450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14900-15326]:Block[14900-15326]"
    }, {
      "left" : "Preconditions.checkNotNull(previous);",
      "right" : "Preconditions.checkNotNull(previous);",
      "info" : "ExpressionStatement[14963-15000]:ExpressionStatement[14963-15000]"
    }, {
      "left" : "functionBody.removeChildAfter(previous);",
      "right" : "functionBody.removeChildAfter(previous);",
      "info" : "ExpressionStatement[15011-15051]:ExpressionStatement[15011-15051]"
    }, {
      "left" : "insertAfter = addToFront(functionBody, current, insertAfter);",
      "right" : "insertAfter = addToFront(functionBody, current, insertAfter);",
      "info" : "ExpressionStatement[15175-15236]:ExpressionStatement[15175-15236]"
    }, {
      "left" : "reportCodeChange(\"Move function declaration not at top of function\");",
      "right" : "reportCodeChange(\"Move function declaration not at top of function\");",
      "info" : "ExpressionStatement[15247-15316]:ExpressionStatement[15247-15316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15332-15450]:Block[15332-15450]"
    }, {
      "left" : "previous = current;",
      "right" : "previous = current;",
      "info" : "ExpressionStatement[15421-15440]:ExpressionStatement[15421-15440]"
    }, {
      "left" : "current = next;",
      "right" : "current = next;",
      "info" : "ExpressionStatement[15459-15474]:ExpressionStatement[15459-15474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15763-15932]:Block[15763-15932]"
    }, {
      "left" : "if (after == null)",
      "right" : "if (after == null)",
      "info" : "IfStatement[15771-15903]:IfStatement[15771-15903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15790-15841]:Block[15790-15841]"
    }, {
      "left" : "parent.addChildToFront(newChild);",
      "right" : "parent.addChildToFront(newChild);",
      "info" : "ExpressionStatement[15800-15833]:ExpressionStatement[15800-15833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15847-15903]:Block[15847-15903]"
    }, {
      "left" : "parent.addChildAfter(newChild, after);",
      "right" : "parent.addChildAfter(newChild, after);",
      "info" : "ExpressionStatement[15857-15895]:ExpressionStatement[15857-15895]"
    }, {
      "left" : "return newChild;",
      "right" : "return newChild;",
      "info" : "ReturnStatement[15910-15926]:ReturnStatement[15910-15926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16044-16311]:Block[16044-16311]"
    }, {
      "left" : "Callback tickler = new ScopeTicklingCallback();",
      "right" : "Callback tickler = new ScopeTicklingCallback();",
      "info" : "VariableDeclarationStatement[16050-16097]:VariableDeclarationStatement[16050-16097]"
    }, {
      "left" : "ScopeCreator scopeCreator =  new SyntacticScopeCreator(\n        compiler, new DuplicateDeclarationHandler());",
      "right" : "ScopeCreator scopeCreator =  new SyntacticScopeCreator(\n        compiler, new DuplicateDeclarationHandler());",
      "info" : "VariableDeclarationStatement[16102-16211]:VariableDeclarationStatement[16102-16211]"
    }, {
      "left" : "NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator);",
      "right" : "NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator);",
      "info" : "VariableDeclarationStatement[16216-16285]:VariableDeclarationStatement[16216-16285]"
    }, {
      "left" : "t.traverse(root);",
      "right" : "t.traverse(root);",
      "info" : "ExpressionStatement[16290-16307]:ExpressionStatement[16290-16307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16741-19042]:Block[16741-19042]"
    }, {
      "left" : "Preconditions.checkState(n.getType() == Token.NAME);",
      "right" : "Preconditions.checkState(n.getType() == Token.NAME);",
      "info" : "ExpressionStatement[16749-16801]:ExpressionStatement[16749-16801]"
    }, {
      "left" : "if (parent.getType() == Token.VAR)",
      "right" : "if (parent.getType() == Token.VAR)",
      "info" : "IfStatement[16808-19036]:IfStatement[16808-19036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16843-19036]:Block[16843-19036]"
    }, {
      "left" : "Preconditions.checkState(parent.hasOneChild());",
      "right" : "Preconditions.checkState(parent.hasOneChild());",
      "info" : "ExpressionStatement[16853-16900]:ExpressionStatement[16853-16900]"
    }, {
      "left" : "if (n.hasChildren())",
      "right" : "if (n.hasChildren())",
      "info" : "IfStatement[17900-18973]:IfStatement[17900-18973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17921-18307]:Block[17921-18307]"
    }, {
      "left" : "parent.removeChild(n);",
      "right" : "parent.removeChild(n);",
      "info" : "ExpressionStatement[17999-18021]:ExpressionStatement[17999-18021]"
    }, {
      "left" : "Node value = n.getFirstChild();",
      "right" : "Node value = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[18090-18121]:VariableDeclarationStatement[18090-18121]"
    }, {
      "left" : "n.removeChild(value);",
      "right" : "n.removeChild(value);",
      "info" : "ExpressionStatement[18132-18153]:ExpressionStatement[18132-18153]"
    }, {
      "left" : "Node replacement = new Node(Token.ASSIGN, n, value);",
      "right" : "Node replacement = new Node(Token.ASSIGN, n, value);",
      "info" : "VariableDeclarationStatement[18164-18216]:VariableDeclarationStatement[18164-18216]"
    }, {
      "left" : "gramps.replaceChild(parent, new Node(Token.EXPR_RESULT, replacement));",
      "right" : "gramps.replaceChild(parent, new Node(Token.EXPR_RESULT, replacement));",
      "info" : "ExpressionStatement[18227-18297]:ExpressionStatement[18227-18297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18313-18973]:Block[18313-18973]"
    }, {
      "left" : "if (NodeUtil.isStatementBlock(gramps))",
      "right" : "if (NodeUtil.isStatementBlock(gramps))",
      "info" : "IfStatement[18374-18963]:IfStatement[18374-18963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18413-18466]:Block[18413-18466]"
    }, {
      "left" : "gramps.removeChild(parent);",
      "right" : "gramps.removeChild(parent);",
      "info" : "ExpressionStatement[18427-18454]:ExpressionStatement[18427-18454]"
    }, {
      "left" : "if (gramps.getType() == Token.FOR)",
      "right" : "if (gramps.getType() == Token.FOR)",
      "info" : "IfStatement[18472-18963]:IfStatement[18472-18963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18507-18809]:Block[18507-18809]"
    }, {
      "left" : "parent.removeChild(n);",
      "right" : "parent.removeChild(n);",
      "info" : "ExpressionStatement[18731-18753]:ExpressionStatement[18731-18753]"
    }, {
      "left" : "gramps.replaceChild(parent, n);",
      "right" : "gramps.replaceChild(parent, n);",
      "info" : "ExpressionStatement[18766-18797]:ExpressionStatement[18766-18797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18815-18963]:Block[18815-18963]"
    }, {
      "left" : "Preconditions.checkState(gramps.getType() == Token.LABEL);",
      "right" : "Preconditions.checkState(gramps.getType() == Token.LABEL);",
      "info" : "ExpressionStatement[18829-18887]:ExpressionStatement[18829-18887]"
    }, {
      "left" : "gramps.replaceChild(parent, new Node(Token.EMPTY));",
      "right" : "gramps.replaceChild(parent, new Node(Token.EMPTY));",
      "info" : "ExpressionStatement[18900-18951]:ExpressionStatement[18900-18951]"
    }, {
      "left" : "reportCodeChange(\"Duplicate VAR declaration\");",
      "right" : "reportCodeChange(\"Duplicate VAR declaration\");",
      "info" : "ExpressionStatement[18982-19028]:ExpressionStatement[18982-19028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19264-19380]:Block[19264-19380]"
    }, {
      "left" : "t.getScope();",
      "right" : "t.getScope();",
      "info" : "ExpressionStatement[19361-19374]:ExpressionStatement[19361-19374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19439-19470]:Block[19439-19470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19579-19605]:Block[19579-19605]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[19587-19599]:ReturnStatement[19587-19599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19681-19712]:Block[19681-19712]"
    } ]
  },
  "interFileMappings" : { }
}