{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "FastDateFormat",
      "right" : "FastDateFormat",
      "info" : "TypeDeclaration[1377-56990]:TypeDeclaration[1377-56999]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[3297-3445]:FieldDeclaration[3297-3445]"
    }, {
      "left" : "public static final int FULL = DateFormat.FULL;",
      "right" : "public static final int FULL = DateFormat.FULL;",
      "info" : "FieldDeclaration[3451-3563]:FieldDeclaration[3451-3563]"
    }, {
      "left" : "public static final int LONG = DateFormat.LONG;",
      "right" : "public static final int LONG = DateFormat.LONG;",
      "info" : "FieldDeclaration[3568-3680]:FieldDeclaration[3568-3680]"
    }, {
      "left" : "public static final int MEDIUM = DateFormat.MEDIUM;",
      "right" : "public static final int MEDIUM = DateFormat.MEDIUM;",
      "info" : "FieldDeclaration[3685-3803]:FieldDeclaration[3685-3803]"
    }, {
      "left" : "public static final int SHORT = DateFormat.SHORT;",
      "right" : "public static final int SHORT = DateFormat.SHORT;",
      "info" : "FieldDeclaration[3808-3923]:FieldDeclaration[3808-3923]"
    }, {
      "left" : "private static String cDefaultPattern;",
      "right" : "private static String cDefaultPattern;",
      "info" : "FieldDeclaration[3958-3996]:FieldDeclaration[3958-3996]"
    }, {
      "left" : "private static final Map<FastDateFormat, FastDateFormat> cInstanceCache = new HashMap<FastDateFormat, FastDateFormat>(7);",
      "right" : "private static final Map<FastDateFormat, FastDateFormat> cInstanceCache = new HashMap<FastDateFormat, FastDateFormat>(7);",
      "info" : "FieldDeclaration[4041-4162]:FieldDeclaration[4041-4162]"
    }, {
      "left" : "private static final Map<Object, FastDateFormat> cDateInstanceCache = new HashMap<Object, FastDateFormat>(7);",
      "right" : "private static final Map<Object, FastDateFormat> cDateInstanceCache = new HashMap<Object, FastDateFormat>(7);",
      "info" : "FieldDeclaration[4167-4276]:FieldDeclaration[4167-4276]"
    }, {
      "left" : "private static final Map<Object, FastDateFormat> cTimeInstanceCache = new HashMap<Object, FastDateFormat>(7);",
      "right" : "private static final Map<Object, FastDateFormat> cTimeInstanceCache = new HashMap<Object, FastDateFormat>(7);",
      "info" : "FieldDeclaration[4281-4390]:FieldDeclaration[4281-4390]"
    }, {
      "left" : "private static final Map<Object, FastDateFormat> cDateTimeInstanceCache = new HashMap<Object, FastDateFormat>(7);",
      "right" : "private static final Map<Object, FastDateFormat> cDateTimeInstanceCache = new HashMap<Object, FastDateFormat>(7);",
      "info" : "FieldDeclaration[4395-4508]:FieldDeclaration[4395-4508]"
    }, {
      "left" : "private static final Map<Object, String> cTimeZoneDisplayCache = new HashMap<Object, String>(7);",
      "right" : "private static final Map<Object, String> cTimeZoneDisplayCache = new HashMap<Object, String>(7);",
      "info" : "FieldDeclaration[4513-4609]:FieldDeclaration[4513-4609]"
    }, {
      "left" : "private final String mPattern;",
      "right" : "private final String mPattern;",
      "info" : "FieldDeclaration[4615-4681]:FieldDeclaration[4615-4681]"
    }, {
      "left" : "private final TimeZone mTimeZone;",
      "right" : "private final TimeZone mTimeZone;",
      "info" : "FieldDeclaration[4686-4757]:FieldDeclaration[4686-4757]"
    }, {
      "left" : "private final boolean mTimeZoneForced;",
      "right" : "private final boolean mTimeZoneForced;",
      "info" : "FieldDeclaration[4762-4873]:FieldDeclaration[4762-4873]"
    }, {
      "left" : "private final Locale mLocale;",
      "right" : "private final Locale mLocale;",
      "info" : "FieldDeclaration[4878-4942]:FieldDeclaration[4878-4942]"
    }, {
      "left" : "private final boolean mLocaleForced;",
      "right" : "private final boolean mLocaleForced;",
      "info" : "FieldDeclaration[4947-5048]:FieldDeclaration[4947-5048]"
    }, {
      "left" : "private transient Rule[] mRules;",
      "right" : "private transient Rule[] mRules;",
      "info" : "FieldDeclaration[5053-5126]:FieldDeclaration[5053-5126]"
    }, {
      "left" : "private transient int mMaxLengthEstimate;",
      "right" : "private transient int mMaxLengthEstimate;",
      "info" : "FieldDeclaration[5131-5225]:FieldDeclaration[5131-5225]"
    }, {
      "left" : "public static FastDateFormat getInstance()",
      "right" : "public static FastDateFormat getInstance()",
      "info" : "MethodDeclaration[5309-5577]:MethodDeclaration[5309-5577]"
    }, {
      "left" : "public static FastDateFormat getInstance(String pattern)",
      "right" : "public static FastDateFormat getInstance(String pattern)",
      "info" : "MethodDeclaration[5583-6016]:MethodDeclaration[5583-6016]"
    }, {
      "left" : "public static FastDateFormat getInstance(String pattern, TimeZone timeZone)",
      "right" : "public static FastDateFormat getInstance(String pattern, TimeZone timeZone)",
      "info" : "MethodDeclaration[6022-6560]:MethodDeclaration[6022-6560]"
    }, {
      "left" : "public static FastDateFormat getInstance(String pattern, Locale locale)",
      "right" : "public static FastDateFormat getInstance(String pattern, Locale locale)",
      "info" : "MethodDeclaration[6566-7068]:MethodDeclaration[6566-7068]"
    }, {
      "left" : "public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale)",
      "right" : "public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale)",
      "info" : "MethodDeclaration[7074-8065]:MethodDeclaration[7074-8065]"
    }, {
      "left" : "public static FastDateFormat getDateInstance(int style)",
      "right" : "public static FastDateFormat getDateInstance(int style)",
      "info" : "MethodDeclaration[8149-8623]:MethodDeclaration[8149-8623]"
    }, {
      "left" : "public static FastDateFormat getDateInstance(int style, Locale locale)",
      "right" : "public static FastDateFormat getDateInstance(int style, Locale locale)",
      "info" : "MethodDeclaration[8629-9183]:MethodDeclaration[8629-9183]"
    }, {
      "left" : "public static FastDateFormat getDateInstance(int style, TimeZone timeZone)",
      "right" : "public static FastDateFormat getDateInstance(int style, TimeZone timeZone)",
      "info" : "MethodDeclaration[9189-9776]:MethodDeclaration[9189-9776]"
    }, {
      "left" : "public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale)",
      "right" : "public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale)",
      "info" : "MethodDeclaration[9781-11217]:MethodDeclaration[9781-11217]"
    }, {
      "left" : "public static FastDateFormat getTimeInstance(int style)",
      "right" : "public static FastDateFormat getTimeInstance(int style)",
      "info" : "MethodDeclaration[11301-11775]:MethodDeclaration[11301-11775]"
    }, {
      "left" : "public static FastDateFormat getTimeInstance(int style, Locale locale)",
      "right" : "public static FastDateFormat getTimeInstance(int style, Locale locale)",
      "info" : "MethodDeclaration[11781-12335]:MethodDeclaration[11781-12335]"
    }, {
      "left" : "public static FastDateFormat getTimeInstance(int style, TimeZone timeZone)",
      "right" : "public static FastDateFormat getTimeInstance(int style, TimeZone timeZone)",
      "info" : "MethodDeclaration[12345-12932]:MethodDeclaration[12345-12932]"
    }, {
      "left" : "public static synchronized FastDateFormat getTimeInstance(int style, TimeZone timeZone, Locale locale)",
      "right" : "public static synchronized FastDateFormat getTimeInstance(int style, TimeZone timeZone, Locale locale)",
      "info" : "MethodDeclaration[12942-14429]:MethodDeclaration[12942-14429]"
    }, {
      "left" : "public static FastDateFormat getDateTimeInstance(\n            int dateStyle, int timeStyle)",
      "right" : "public static FastDateFormat getDateTimeInstance(\n            int dateStyle, int timeStyle)",
      "info" : "MethodDeclaration[14513-15127]:MethodDeclaration[14513-15127]"
    }, {
      "left" : "public static FastDateFormat getDateTimeInstance(\n            int dateStyle, int timeStyle, Locale locale)",
      "right" : "public static FastDateFormat getDateTimeInstance(\n            int dateStyle, int timeStyle, Locale locale)",
      "info" : "MethodDeclaration[15137-15831]:MethodDeclaration[15137-15831]"
    }, {
      "left" : "public static FastDateFormat getDateTimeInstance(\n            int dateStyle, int timeStyle, TimeZone timeZone)",
      "right" : "public static FastDateFormat getDateTimeInstance(\n            int dateStyle, int timeStyle, TimeZone timeZone)",
      "info" : "MethodDeclaration[15841-16568]:MethodDeclaration[15841-16568]"
    }, {
      "left" : "public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n            Locale locale)",
      "right" : "public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n            Locale locale)",
      "info" : "MethodDeclaration[16577-18214]:MethodDeclaration[16577-18214]"
    }, {
      "left" : "static synchronized String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale)",
      "right" : "static synchronized String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale)",
      "info" : "MethodDeclaration[18298-19156]:MethodDeclaration[18298-19156]"
    }, {
      "left" : "private static synchronized String getDefaultPattern()",
      "right" : "private static synchronized String getDefaultPattern()",
      "info" : "MethodDeclaration[19162-19470]:MethodDeclaration[19162-19470]"
    }, {
      "left" : "protected FastDateFormat(String pattern, TimeZone timeZone, Locale locale)",
      "right" : "protected FastDateFormat(String pattern, TimeZone timeZone, Locale locale)",
      "info" : "MethodDeclaration[19573-20640]:MethodDeclaration[19573-20640]"
    }, {
      "left" : "protected void init()",
      "right" : "protected void init()",
      "info" : "MethodDeclaration[20646-21018]:MethodDeclaration[20646-21018]"
    }, {
      "left" : "protected List<Rule> parsePattern()",
      "right" : "protected List<Rule> parsePattern()",
      "info" : "MethodDeclaration[21127-26329]:MethodDeclaration[21127-26329]"
    }, {
      "left" : "protected String parseToken(String pattern, int[] indexRef)",
      "right" : "protected String parseToken(String pattern, int[] indexRef)",
      "info" : "MethodDeclaration[26335-28051]:MethodDeclaration[26335-28051]"
    }, {
      "left" : "protected NumberRule selectNumberRule(int field, int padding)",
      "right" : "protected NumberRule selectNumberRule(int field, int padding)",
      "info" : "MethodDeclaration[28057-28605]:MethodDeclaration[28057-28605]"
    }, {
      "left" : "public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos)",
      "right" : "public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos)",
      "info" : "MethodDeclaration[28711-29581]:MethodDeclaration[28711-29581]"
    }, {
      "left" : "public String format(long millis)",
      "right" : "public String format(long millis)",
      "info" : "MethodDeclaration[29587-29862]:MethodDeclaration[29587-29862]"
    }, {
      "left" : "public String format(Date date)",
      "right" : "public String format(Date date)",
      "info" : "MethodDeclaration[29868-30215]:MethodDeclaration[29868-30224]"
    }, {
      "left" : "public String format(Calendar calendar)",
      "right" : "public String format(Calendar calendar)",
      "info" : "MethodDeclaration[30221-30511]:MethodDeclaration[30230-30520]"
    }, {
      "left" : "public StringBuffer format(long millis, StringBuffer buf)",
      "right" : "public StringBuffer format(long millis, StringBuffer buf)",
      "info" : "MethodDeclaration[30517-30923]:MethodDeclaration[30526-30932]"
    }, {
      "left" : "public StringBuffer format(Date date, StringBuffer buf)",
      "right" : "public StringBuffer format(Date date, StringBuffer buf)",
      "info" : "MethodDeclaration[30929-31359]:MethodDeclaration[30938-31368]"
    }, {
      "left" : "public StringBuffer format(Calendar calendar, StringBuffer buf)",
      "right" : "public StringBuffer format(Calendar calendar, StringBuffer buf)",
      "info" : "MethodDeclaration[31365-31933]:MethodDeclaration[31374-31942]"
    }, {
      "left" : "protected StringBuffer applyRules(Calendar calendar, StringBuffer buf)",
      "right" : "protected StringBuffer applyRules(Calendar calendar, StringBuffer buf)",
      "info" : "MethodDeclaration[31939-32450]:MethodDeclaration[31948-32459]"
    }, {
      "left" : "public Object parseObject(String source, ParsePosition pos)",
      "right" : "public Object parseObject(String source, ParsePosition pos)",
      "info" : "MethodDeclaration[32549-32902]:MethodDeclaration[32558-32911]"
    }, {
      "left" : "public String getPattern()",
      "right" : "public String getPattern()",
      "info" : "MethodDeclaration[33007-33219]:MethodDeclaration[33016-33228]"
    }, {
      "left" : "public TimeZone getTimeZone()",
      "right" : "public TimeZone getTimeZone()",
      "info" : "MethodDeclaration[33225-33644]:MethodDeclaration[33234-33653]"
    }, {
      "left" : "public boolean getTimeZoneOverridesCalendar()",
      "right" : "public boolean getTimeZoneOverridesCalendar()",
      "info" : "MethodDeclaration[33650-33973]:MethodDeclaration[33659-33982]"
    }, {
      "left" : "public Locale getLocale()",
      "right" : "public Locale getLocale()",
      "info" : "MethodDeclaration[33979-34140]:MethodDeclaration[33988-34149]"
    }, {
      "left" : "public int getMaxLengthEstimate()",
      "right" : "public int getMaxLengthEstimate()",
      "info" : "MethodDeclaration[34146-34504]:MethodDeclaration[34155-34513]"
    }, {
      "left" : "public boolean equals(Object obj)",
      "right" : "public boolean equals(Object obj)",
      "info" : "MethodDeclaration[34602-35391]:MethodDeclaration[34611-35400]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[35397-35815]:MethodDeclaration[35406-35824]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[35821-36041]:MethodDeclaration[35830-36050]"
    }, {
      "left" : "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException",
      "right" : "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException",
      "info" : "MethodDeclaration[36144-36623]:MethodDeclaration[36153-36632]"
    }, {
      "left" : "Rule",
      "right" : "Rule",
      "info" : "TypeDeclaration[36724-37286]:TypeDeclaration[36733-37295]"
    }, {
      "left" : "int estimateLength();",
      "right" : "int estimateLength();",
      "info" : "MethodDeclaration[36816-36968]:MethodDeclaration[36825-36977]"
    }, {
      "left" : "void appendTo(StringBuffer buffer, Calendar calendar);",
      "right" : "void appendTo(StringBuffer buffer, Calendar calendar);",
      "info" : "MethodDeclaration[36986-37280]:MethodDeclaration[36995-37289]"
    }, {
      "left" : "NumberRule",
      "right" : "NumberRule",
      "info" : "TypeDeclaration[37292-37685]:TypeDeclaration[37301-37694]"
    }, {
      "left" : "void appendTo(StringBuffer buffer, int value);",
      "right" : "void appendTo(StringBuffer buffer, int value);",
      "info" : "MethodDeclaration[37411-37679]:MethodDeclaration[37420-37688]"
    }, {
      "left" : "CharacterLiteral",
      "right" : "CharacterLiteral",
      "info" : "TypeDeclaration[37691-38424]:TypeDeclaration[37700-38433]"
    }, {
      "left" : "private final char mValue;",
      "right" : "private final char mValue;",
      "info" : "FieldDeclaration[37836-37862]:FieldDeclaration[37845-37871]"
    }, {
      "left" : "CharacterLiteral(char value)",
      "right" : "CharacterLiteral(char value)",
      "info" : "MethodDeclaration[37872-38132]:MethodDeclaration[37881-38141]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[38142-38252]:MethodDeclaration[38151-38261]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[38262-38418]:MethodDeclaration[38271-38427]"
    }, {
      "left" : "StringLiteral",
      "right" : "StringLiteral",
      "info" : "TypeDeclaration[38430-39159]:TypeDeclaration[38439-39168]"
    }, {
      "left" : "private final String mValue;",
      "right" : "private final String mValue;",
      "info" : "FieldDeclaration[38562-38590]:FieldDeclaration[38571-38599]"
    }, {
      "left" : "StringLiteral(String value)",
      "right" : "StringLiteral(String value)",
      "info" : "MethodDeclaration[38600-38853]:MethodDeclaration[38609-38862]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[38863-38987]:MethodDeclaration[38872-38996]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[38997-39153]:MethodDeclaration[39006-39162]"
    }, {
      "left" : "TextField",
      "right" : "TextField",
      "info" : "TypeDeclaration[39165-40238]:TypeDeclaration[39174-40247]"
    }, {
      "left" : "private final int mField;",
      "right" : "private final int mField;",
      "info" : "FieldDeclaration[39298-39323]:FieldDeclaration[39307-39332]"
    }, {
      "left" : "private final String[] mValues;",
      "right" : "private final String[] mValues;",
      "info" : "FieldDeclaration[39332-39363]:FieldDeclaration[39341-39372]"
    }, {
      "left" : "TextField(int field, String[] values)",
      "right" : "TextField(int field, String[] values)",
      "info" : "MethodDeclaration[39373-39700]:MethodDeclaration[39382-39709]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[39710-40043]:MethodDeclaration[39719-40052]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[40053-40232]:MethodDeclaration[40062-40241]"
    }, {
      "left" : "UnpaddedNumberField",
      "right" : "UnpaddedNumberField",
      "info" : "TypeDeclaration[40244-41422]:TypeDeclaration[40253-41431]"
    }, {
      "left" : "private final int mField;",
      "right" : "private final int mField;",
      "info" : "FieldDeclaration[40389-40414]:FieldDeclaration[40398-40423]"
    }, {
      "left" : "UnpaddedNumberField(int field)",
      "right" : "UnpaddedNumberField(int field)",
      "info" : "MethodDeclaration[40424-40659]:MethodDeclaration[40433-40668]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[40669-40779]:MethodDeclaration[40678-40788]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[40789-40962]:MethodDeclaration[40798-40971]"
    }, {
      "left" : "public final void appendTo(StringBuffer buffer, int value)",
      "right" : "public final void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[40972-41416]:MethodDeclaration[40981-41425]"
    }, {
      "left" : "UnpaddedMonthField",
      "right" : "UnpaddedMonthField",
      "info" : "TypeDeclaration[41428-42488]:TypeDeclaration[41437-42497]"
    }, {
      "left" : "static final UnpaddedMonthField INSTANCE = new UnpaddedMonthField();",
      "right" : "static final UnpaddedMonthField INSTANCE = new UnpaddedMonthField();",
      "info" : "FieldDeclaration[41571-41639]:FieldDeclaration[41580-41648]"
    }, {
      "left" : "UnpaddedMonthField()",
      "right" : "UnpaddedMonthField()",
      "info" : "MethodDeclaration[41649-41807]:MethodDeclaration[41658-41816]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[41817-41927]:MethodDeclaration[41826-41936]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[41937-42122]:MethodDeclaration[41946-42131]"
    }, {
      "left" : "public final void appendTo(StringBuffer buffer, int value)",
      "right" : "public final void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[42132-42482]:MethodDeclaration[42141-42491]"
    }, {
      "left" : "PaddedNumberField",
      "right" : "PaddedNumberField",
      "info" : "TypeDeclaration[42494-44358]:TypeDeclaration[42503-44367]"
    }, {
      "left" : "private final int mField;",
      "right" : "private final int mField;",
      "info" : "FieldDeclaration[42634-42659]:FieldDeclaration[42643-42668]"
    }, {
      "left" : "private final int mSize;",
      "right" : "private final int mSize;",
      "info" : "FieldDeclaration[42668-42692]:FieldDeclaration[42677-42701]"
    }, {
      "left" : "PaddedNumberField(int field, int size)",
      "right" : "PaddedNumberField(int field, int size)",
      "info" : "MethodDeclaration[42702-43163]:MethodDeclaration[42711-43172]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[43173-43283]:MethodDeclaration[43182-43292]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[43293-43466]:MethodDeclaration[43302-43475]"
    }, {
      "left" : "public final void appendTo(StringBuffer buffer, int value)",
      "right" : "public final void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[43476-44352]:MethodDeclaration[43485-44361]"
    }, {
      "left" : "TwoDigitNumberField",
      "right" : "TwoDigitNumberField",
      "info" : "TypeDeclaration[44364-45454]:TypeDeclaration[44373-45463]"
    }, {
      "left" : "private final int mField;",
      "right" : "private final int mField;",
      "info" : "FieldDeclaration[44509-44534]:FieldDeclaration[44518-44543]"
    }, {
      "left" : "TwoDigitNumberField(int field)",
      "right" : "TwoDigitNumberField(int field)",
      "info" : "MethodDeclaration[44544-44780]:MethodDeclaration[44553-44789]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[44790-44900]:MethodDeclaration[44799-44909]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[44910-45083]:MethodDeclaration[44919-45092]"
    }, {
      "left" : "public final void appendTo(StringBuffer buffer, int value)",
      "right" : "public final void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[45093-45448]:MethodDeclaration[45102-45457]"
    }, {
      "left" : "TwoDigitYearField",
      "right" : "TwoDigitYearField",
      "info" : "TypeDeclaration[45460-46379]:TypeDeclaration[45469-46388]"
    }, {
      "left" : "static final TwoDigitYearField INSTANCE = new TwoDigitYearField();",
      "right" : "static final TwoDigitYearField INSTANCE = new TwoDigitYearField();",
      "info" : "FieldDeclaration[45601-45667]:FieldDeclaration[45610-45676]"
    }, {
      "left" : "TwoDigitYearField()",
      "right" : "TwoDigitYearField()",
      "info" : "MethodDeclaration[45677-45822]:MethodDeclaration[45686-45831]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[45832-45942]:MethodDeclaration[45841-45951]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[45952-46138]:MethodDeclaration[45961-46147]"
    }, {
      "left" : "public final void appendTo(StringBuffer buffer, int value)",
      "right" : "public final void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[46148-46373]:MethodDeclaration[46157-46382]"
    }, {
      "left" : "TwoDigitMonthField",
      "right" : "TwoDigitMonthField",
      "info" : "TypeDeclaration[46385-47309]:TypeDeclaration[46394-47318]"
    }, {
      "left" : "static final TwoDigitMonthField INSTANCE = new TwoDigitMonthField();",
      "right" : "static final TwoDigitMonthField INSTANCE = new TwoDigitMonthField();",
      "info" : "FieldDeclaration[46528-46596]:FieldDeclaration[46537-46605]"
    }, {
      "left" : "TwoDigitMonthField()",
      "right" : "TwoDigitMonthField()",
      "info" : "MethodDeclaration[46606-46753]:MethodDeclaration[46615-46762]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[46763-46873]:MethodDeclaration[46772-46882]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[46883-47068]:MethodDeclaration[46892-47077]"
    }, {
      "left" : "public final void appendTo(StringBuffer buffer, int value)",
      "right" : "public final void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[47078-47303]:MethodDeclaration[47087-47312]"
    }, {
      "left" : "TwelveHourField",
      "right" : "TwelveHourField",
      "info" : "TypeDeclaration[47315-48412]:TypeDeclaration[47324-48421]"
    }, {
      "left" : "private final NumberRule mRule;",
      "right" : "private final NumberRule mRule;",
      "info" : "FieldDeclaration[47459-47490]:FieldDeclaration[47468-47499]"
    }, {
      "left" : "TwelveHourField(NumberRule rule)",
      "right" : "TwelveHourField(NumberRule rule)",
      "info" : "MethodDeclaration[47500-47759]:MethodDeclaration[47509-47768]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[47769-47900]:MethodDeclaration[47778-47909]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[47910-48240]:MethodDeclaration[47919-48249]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, int value)",
      "right" : "public void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[48250-48406]:MethodDeclaration[48259-48415]"
    }, {
      "left" : "TwentyFourHourField",
      "right" : "TwentyFourHourField",
      "info" : "TypeDeclaration[48418-49541]:TypeDeclaration[48427-49550]"
    }, {
      "left" : "private final NumberRule mRule;",
      "right" : "private final NumberRule mRule;",
      "info" : "FieldDeclaration[48571-48602]:FieldDeclaration[48580-48611]"
    }, {
      "left" : "TwentyFourHourField(NumberRule rule)",
      "right" : "TwentyFourHourField(NumberRule rule)",
      "info" : "MethodDeclaration[48612-48879]:MethodDeclaration[48621-48888]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[48889-49020]:MethodDeclaration[48898-49029]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[49030-49369]:MethodDeclaration[49039-49378]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, int value)",
      "right" : "public void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[49379-49535]:MethodDeclaration[49388-49544]"
    }, {
      "left" : "TimeZoneNameRule",
      "right" : "TimeZoneNameRule",
      "info" : "TypeDeclaration[49547-51957]:TypeDeclaration[49556-51966]"
    }, {
      "left" : "private final TimeZone mTimeZone;",
      "right" : "private final TimeZone mTimeZone;",
      "info" : "FieldDeclaration[49681-49714]:FieldDeclaration[49690-49723]"
    }, {
      "left" : "private final boolean mTimeZoneForced;",
      "right" : "private final boolean mTimeZoneForced;",
      "info" : "FieldDeclaration[49723-49761]:FieldDeclaration[49732-49770]"
    }, {
      "left" : "private final Locale mLocale;",
      "right" : "private final Locale mLocale;",
      "info" : "FieldDeclaration[49770-49799]:FieldDeclaration[49779-49808]"
    }, {
      "left" : "private final int mStyle;",
      "right" : "private final int mStyle;",
      "info" : "FieldDeclaration[49808-49833]:FieldDeclaration[49817-49842]"
    }, {
      "left" : "private final String mStandard;",
      "right" : "private final String mStandard;",
      "info" : "FieldDeclaration[49842-49873]:FieldDeclaration[49851-49882]"
    }, {
      "left" : "private final String mDaylight;",
      "right" : "private final String mDaylight;",
      "info" : "FieldDeclaration[49882-49913]:FieldDeclaration[49891-49922]"
    }, {
      "left" : "TimeZoneNameRule(TimeZone timeZone, boolean timeZoneForced, Locale locale, int style)",
      "right" : "TimeZoneNameRule(TimeZone timeZone, boolean timeZoneForced, Locale locale, int style)",
      "info" : "MethodDeclaration[49923-50805]:MethodDeclaration[49932-50814]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[50815-51150]:MethodDeclaration[50824-51159]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[51160-51951]:MethodDeclaration[51169-51960]"
    }, {
      "left" : "TimeZoneNumberRule",
      "right" : "TimeZoneNumberRule",
      "info" : "TypeDeclaration[51963-53674]:TypeDeclaration[51972-53683]"
    }, {
      "left" : "static final TimeZoneNumberRule INSTANCE_COLON = new TimeZoneNumberRule(true);",
      "right" : "static final TimeZoneNumberRule INSTANCE_COLON = new TimeZoneNumberRule(true);",
      "info" : "FieldDeclaration[52159-52237]:FieldDeclaration[52168-52246]"
    }, {
      "left" : "static final TimeZoneNumberRule INSTANCE_NO_COLON = new TimeZoneNumberRule(false);",
      "right" : "static final TimeZoneNumberRule INSTANCE_NO_COLON = new TimeZoneNumberRule(false);",
      "info" : "FieldDeclaration[52246-52328]:FieldDeclaration[52255-52337]"
    }, {
      "left" : "final boolean mColon;",
      "right" : "final boolean mColon;",
      "info" : "FieldDeclaration[52346-52367]:FieldDeclaration[52355-52376]"
    }, {
      "left" : "TimeZoneNumberRule(boolean colon)",
      "right" : "TimeZoneNumberRule(boolean colon)",
      "info" : "MethodDeclaration[52385-52681]:MethodDeclaration[52394-52690]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[52691-52801]:MethodDeclaration[52700-52810]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[52811-53656]:MethodDeclaration[52820-53665]"
    }, {
      "left" : "TimeZoneDisplayKey",
      "right" : "TimeZoneDisplayKey",
      "info" : "TypeDeclaration[53758-55364]:TypeDeclaration[53767-55373]"
    }, {
      "left" : "private final TimeZone mTimeZone;",
      "right" : "private final TimeZone mTimeZone;",
      "info" : "FieldDeclaration[53899-53932]:FieldDeclaration[53908-53941]"
    }, {
      "left" : "private final int mStyle;",
      "right" : "private final int mStyle;",
      "info" : "FieldDeclaration[53941-53966]:FieldDeclaration[53950-53975]"
    }, {
      "left" : "private final Locale mLocale;",
      "right" : "private final Locale mLocale;",
      "info" : "FieldDeclaration[53975-54004]:FieldDeclaration[53984-54013]"
    }, {
      "left" : "TimeZoneDisplayKey(TimeZone timeZone,\n                           boolean daylight, int style, Locale locale)",
      "right" : "TimeZoneDisplayKey(TimeZone timeZone,\n                           boolean daylight, int style, Locale locale)",
      "info" : "MethodDeclaration[54014-54661]:MethodDeclaration[54023-54670]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[54671-54824]:MethodDeclaration[54680-54833]"
    }, {
      "left" : "public boolean equals(Object obj)",
      "right" : "public boolean equals(Object obj)",
      "info" : "MethodDeclaration[54834-55358]:MethodDeclaration[54843-55367]"
    }, {
      "left" : "Pair",
      "right" : "Pair",
      "info" : "TypeDeclaration[55448-56987]:TypeDeclaration[55457-56996]"
    }, {
      "left" : "private final Object mObj1;",
      "right" : "private final Object mObj1;",
      "info" : "FieldDeclaration[55663-55690]:FieldDeclaration[55672-55699]"
    }, {
      "left" : "private final Object mObj2;",
      "right" : "private final Object mObj2;",
      "info" : "FieldDeclaration[55699-55726]:FieldDeclaration[55708-55735]"
    }, {
      "left" : "public Pair(Object obj1, Object obj2)",
      "right" : "public Pair(Object obj1, Object obj2)",
      "info" : "MethodDeclaration[55736-56042]:MethodDeclaration[55745-56051]"
    }, {
      "left" : "public boolean equals(Object obj)",
      "right" : "public boolean equals(Object obj)",
      "info" : "MethodDeclaration[56052-56574]:MethodDeclaration[56061-56583]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[56584-56816]:MethodDeclaration[56593-56825]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[56826-56981]:MethodDeclaration[56835-56990]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5509-5577]:Block[5509-5577]"
    }, {
      "left" : "return getInstance(getDefaultPattern(), null, null);",
      "right" : "return getInstance(getDefaultPattern(), null, null);",
      "info" : "ReturnStatement[5519-5571]:ReturnStatement[5519-5571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5960-6016]:Block[5960-6016]"
    }, {
      "left" : "return getInstance(pattern, null, null);",
      "right" : "return getInstance(pattern, null, null);",
      "info" : "ReturnStatement[5970-6010]:ReturnStatement[5970-6010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6500-6560]:Block[6500-6560]"
    }, {
      "left" : "return getInstance(pattern, timeZone, null);",
      "right" : "return getInstance(pattern, timeZone, null);",
      "info" : "ReturnStatement[6510-6554]:ReturnStatement[6510-6554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7010-7068]:Block[7010-7068]"
    }, {
      "left" : "return getInstance(pattern, null, locale);",
      "right" : "return getInstance(pattern, null, locale);",
      "info" : "ReturnStatement[7020-7062]:ReturnStatement[7020-7062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7680-8065]:Block[7680-8065]"
    }, {
      "left" : "FastDateFormat emptyFormat = new FastDateFormat(pattern, timeZone, locale);",
      "right" : "FastDateFormat emptyFormat = new FastDateFormat(pattern, timeZone, locale);",
      "info" : "VariableDeclarationStatement[7690-7765]:VariableDeclarationStatement[7690-7765]"
    }, {
      "left" : "FastDateFormat format = cInstanceCache.get(emptyFormat);",
      "right" : "FastDateFormat format = cInstanceCache.get(emptyFormat);",
      "info" : "VariableDeclarationStatement[7774-7830]:VariableDeclarationStatement[7774-7830]"
    }, {
      "left" : "if (format == null)",
      "right" : "if (format == null)",
      "info" : "IfStatement[7839-8036]:IfStatement[7839-8036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7859-8036]:Block[7859-8036]"
    }, {
      "left" : "format = emptyFormat;",
      "right" : "format = emptyFormat;",
      "info" : "ExpressionStatement[7873-7894]:ExpressionStatement[7873-7894]"
    }, {
      "left" : "format.init();",
      "right" : "format.init();",
      "info" : "ExpressionStatement[7907-7921]:ExpressionStatement[7907-7921]"
    }, {
      "left" : "cInstanceCache.put(format, format);",
      "right" : "cInstanceCache.put(format, format);",
      "info" : "ExpressionStatement[7975-8010]:ExpressionStatement[7975-8010]"
    }, {
      "left" : "return format;",
      "right" : "return format;",
      "info" : "ReturnStatement[8045-8059]:ReturnStatement[8045-8059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8565-8623]:Block[8565-8623]"
    }, {
      "left" : "return getDateInstance(style, null, null);",
      "right" : "return getDateInstance(style, null, null);",
      "info" : "ReturnStatement[8575-8617]:ReturnStatement[8575-8617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9123-9183]:Block[9123-9183]"
    }, {
      "left" : "return getDateInstance(style, null, locale);",
      "right" : "return getDateInstance(style, null, locale);",
      "info" : "ReturnStatement[9133-9177]:ReturnStatement[9133-9177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9714-9776]:Block[9714-9776]"
    }, {
      "left" : "return getDateInstance(style, timeZone, null);",
      "right" : "return getDateInstance(style, timeZone, null);",
      "info" : "ReturnStatement[9724-9770]:ReturnStatement[9724-9770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10365-11217]:Block[10365-11217]"
    }, {
      "left" : "Object key = Integer.valueOf(style);",
      "right" : "Object key = Integer.valueOf(style);",
      "info" : "VariableDeclarationStatement[10375-10411]:VariableDeclarationStatement[10375-10411]"
    }, {
      "left" : "if (timeZone != null)",
      "right" : "if (timeZone != null)",
      "info" : "IfStatement[10420-10496]:IfStatement[10420-10496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10442-10496]:Block[10442-10496]"
    }, {
      "left" : "key = new Pair(key, timeZone);",
      "right" : "key = new Pair(key, timeZone);",
      "info" : "ExpressionStatement[10456-10486]:ExpressionStatement[10456-10486]"
    }, {
      "left" : "if (locale == null)",
      "right" : "if (locale == null)",
      "info" : "IfStatement[10506-10579]:IfStatement[10506-10579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10526-10579]:Block[10526-10579]"
    }, {
      "left" : "locale = Locale.getDefault();",
      "right" : "locale = Locale.getDefault();",
      "info" : "ExpressionStatement[10540-10569]:ExpressionStatement[10540-10569]"
    }, {
      "left" : "key = new Pair(key, locale);",
      "right" : "key = new Pair(key, locale);",
      "info" : "ExpressionStatement[10589-10617]:ExpressionStatement[10589-10617]"
    }, {
      "left" : "FastDateFormat format = cDateInstanceCache.get(key);",
      "right" : "FastDateFormat format = cDateInstanceCache.get(key);",
      "info" : "VariableDeclarationStatement[10627-10679]:VariableDeclarationStatement[10627-10679]"
    }, {
      "left" : "if (format == null)",
      "right" : "if (format == null)",
      "info" : "IfStatement[10688-11188]:IfStatement[10688-11188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10708-11188]:Block[10708-11188]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10722-11178]:TryStatement[10722-11178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10726-11039]:Block[10726-11039]"
    }, {
      "left" : "SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateInstance(style, locale);",
      "right" : "SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateInstance(style, locale);",
      "info" : "VariableDeclarationStatement[10744-10834]:VariableDeclarationStatement[10744-10834]"
    }, {
      "left" : "String pattern = formatter.toPattern();",
      "right" : "String pattern = formatter.toPattern();",
      "info" : "VariableDeclarationStatement[10851-10890]:VariableDeclarationStatement[10851-10890]"
    }, {
      "left" : "format = getInstance(pattern, timeZone, locale);",
      "right" : "format = getInstance(pattern, timeZone, locale);",
      "info" : "ExpressionStatement[10907-10955]:ExpressionStatement[10907-10955]"
    }, {
      "left" : "cDateInstanceCache.put(key, format);",
      "right" : "cDateInstanceCache.put(key, format);",
      "info" : "ExpressionStatement[10972-11008]:ExpressionStatement[10972-11008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11070-11178]:Block[11070-11178]"
    }, {
      "left" : "throw new IllegalArgumentException(\"No date pattern for locale: \" + locale);",
      "right" : "throw new IllegalArgumentException(\"No date pattern for locale: \" + locale);",
      "info" : "ThrowStatement[11088-11164]:ThrowStatement[11088-11164]"
    }, {
      "left" : "return format;",
      "right" : "return format;",
      "info" : "ReturnStatement[11197-11211]:ReturnStatement[11197-11211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11717-11775]:Block[11717-11775]"
    }, {
      "left" : "return getTimeInstance(style, null, null);",
      "right" : "return getTimeInstance(style, null, null);",
      "info" : "ReturnStatement[11727-11769]:ReturnStatement[11727-11769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12275-12335]:Block[12275-12335]"
    }, {
      "left" : "return getTimeInstance(style, null, locale);",
      "right" : "return getTimeInstance(style, null, locale);",
      "info" : "ReturnStatement[12285-12329]:ReturnStatement[12285-12329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12870-12932]:Block[12870-12932]"
    }, {
      "left" : "return getTimeInstance(style, timeZone, null);",
      "right" : "return getTimeInstance(style, timeZone, null);",
      "info" : "ReturnStatement[12880-12926]:ReturnStatement[12880-12926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13526-14429]:Block[13526-14429]"
    }, {
      "left" : "Object key = Integer.valueOf(style);",
      "right" : "Object key = Integer.valueOf(style);",
      "info" : "VariableDeclarationStatement[13536-13572]:VariableDeclarationStatement[13536-13572]"
    }, {
      "left" : "if (timeZone != null)",
      "right" : "if (timeZone != null)",
      "info" : "IfStatement[13581-13657]:IfStatement[13581-13657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13603-13657]:Block[13603-13657]"
    }, {
      "left" : "key = new Pair(key, timeZone);",
      "right" : "key = new Pair(key, timeZone);",
      "info" : "ExpressionStatement[13617-13647]:ExpressionStatement[13617-13647]"
    }, {
      "left" : "if (locale != null)",
      "right" : "if (locale != null)",
      "info" : "IfStatement[13666-13738]:IfStatement[13666-13738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13686-13738]:Block[13686-13738]"
    }, {
      "left" : "key = new Pair(key, locale);",
      "right" : "key = new Pair(key, locale);",
      "info" : "ExpressionStatement[13700-13728]:ExpressionStatement[13700-13728]"
    }, {
      "left" : "FastDateFormat format = cTimeInstanceCache.get(key);",
      "right" : "FastDateFormat format = cTimeInstanceCache.get(key);",
      "info" : "VariableDeclarationStatement[13748-13800]:VariableDeclarationStatement[13748-13800]"
    }, {
      "left" : "if (format == null)",
      "right" : "if (format == null)",
      "info" : "IfStatement[13809-14400]:IfStatement[13809-14400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13829-14400]:Block[13829-14400]"
    }, {
      "left" : "if (locale == null)",
      "right" : "if (locale == null)",
      "info" : "IfStatement[13843-13924]:IfStatement[13843-13924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13863-13924]:Block[13863-13924]"
    }, {
      "left" : "locale = Locale.getDefault();",
      "right" : "locale = Locale.getDefault();",
      "info" : "ExpressionStatement[13881-13910]:ExpressionStatement[13881-13910]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13938-14390]:TryStatement[13938-14390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13942-14251]:Block[13942-14251]"
    }, {
      "left" : "SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getTimeInstance(style, locale);",
      "right" : "SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getTimeInstance(style, locale);",
      "info" : "VariableDeclarationStatement[13960-14050]:VariableDeclarationStatement[13960-14050]"
    }, {
      "left" : "String pattern = formatter.toPattern();",
      "right" : "String pattern = formatter.toPattern();",
      "info" : "VariableDeclarationStatement[14067-14106]:VariableDeclarationStatement[14067-14106]"
    }, {
      "left" : "format = getInstance(pattern, timeZone, locale);",
      "right" : "format = getInstance(pattern, timeZone, locale);",
      "info" : "ExpressionStatement[14123-14171]:ExpressionStatement[14123-14171]"
    }, {
      "left" : "cTimeInstanceCache.put(key, format);",
      "right" : "cTimeInstanceCache.put(key, format);",
      "info" : "ExpressionStatement[14188-14224]:ExpressionStatement[14188-14224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14282-14390]:Block[14282-14390]"
    }, {
      "left" : "throw new IllegalArgumentException(\"No date pattern for locale: \" + locale);",
      "right" : "throw new IllegalArgumentException(\"No date pattern for locale: \" + locale);",
      "info" : "ThrowStatement[14300-14376]:ThrowStatement[14300-14376]"
    }, {
      "left" : "return format;",
      "right" : "return format;",
      "info" : "ReturnStatement[14409-14423]:ReturnStatement[14409-14423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15050-15127]:Block[15050-15127]"
    }, {
      "left" : "return getDateTimeInstance(dateStyle, timeStyle, null, null);",
      "right" : "return getDateTimeInstance(dateStyle, timeStyle, null, null);",
      "info" : "ReturnStatement[15060-15121]:ReturnStatement[15060-15121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15752-15831]:Block[15752-15831]"
    }, {
      "left" : "return getDateTimeInstance(dateStyle, timeStyle, null, locale);",
      "right" : "return getDateTimeInstance(dateStyle, timeStyle, null, locale);",
      "info" : "ReturnStatement[15762-15825]:ReturnStatement[15762-15825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16487-16568]:Block[16487-16568]"
    }, {
      "left" : "return getDateTimeInstance(dateStyle, timeStyle, timeZone, null);",
      "right" : "return getDateTimeInstance(dateStyle, timeStyle, timeZone, null);",
      "info" : "ReturnStatement[16497-16562]:ReturnStatement[16497-16562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17281-18214]:Block[17281-18214]"
    }, {
      "left" : "Object key = new Pair(Integer.valueOf(dateStyle), Integer.valueOf(timeStyle));",
      "right" : "Object key = new Pair(Integer.valueOf(dateStyle), Integer.valueOf(timeStyle));",
      "info" : "VariableDeclarationStatement[17292-17370]:VariableDeclarationStatement[17292-17370]"
    }, {
      "left" : "if (timeZone != null)",
      "right" : "if (timeZone != null)",
      "info" : "IfStatement[17379-17455]:IfStatement[17379-17455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17401-17455]:Block[17401-17455]"
    }, {
      "left" : "key = new Pair(key, timeZone);",
      "right" : "key = new Pair(key, timeZone);",
      "info" : "ExpressionStatement[17415-17445]:ExpressionStatement[17415-17445]"
    }, {
      "left" : "if (locale == null)",
      "right" : "if (locale == null)",
      "info" : "IfStatement[17464-17537]:IfStatement[17464-17537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17484-17537]:Block[17484-17537]"
    }, {
      "left" : "locale = Locale.getDefault();",
      "right" : "locale = Locale.getDefault();",
      "info" : "ExpressionStatement[17498-17527]:ExpressionStatement[17498-17527]"
    }, {
      "left" : "key = new Pair(key, locale);",
      "right" : "key = new Pair(key, locale);",
      "info" : "ExpressionStatement[17546-17574]:ExpressionStatement[17546-17574]"
    }, {
      "left" : "FastDateFormat format = cDateTimeInstanceCache.get(key);",
      "right" : "FastDateFormat format = cDateTimeInstanceCache.get(key);",
      "info" : "VariableDeclarationStatement[17584-17640]:VariableDeclarationStatement[17584-17640]"
    }, {
      "left" : "if (format == null)",
      "right" : "if (format == null)",
      "info" : "IfStatement[17649-18185]:IfStatement[17649-18185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17669-18185]:Block[17669-18185]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[17683-18175]:TryStatement[17683-18175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17687-18031]:Block[17687-18031]"
    }, {
      "left" : "SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n                        locale);",
      "right" : "SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n                        locale);",
      "info" : "VariableDeclarationStatement[17705-17838]:VariableDeclarationStatement[17705-17838]"
    }, {
      "left" : "String pattern = formatter.toPattern();",
      "right" : "String pattern = formatter.toPattern();",
      "info" : "VariableDeclarationStatement[17855-17894]:VariableDeclarationStatement[17855-17894]"
    }, {
      "left" : "format = getInstance(pattern, timeZone, locale);",
      "right" : "format = getInstance(pattern, timeZone, locale);",
      "info" : "ExpressionStatement[17911-17959]:ExpressionStatement[17911-17959]"
    }, {
      "left" : "cDateTimeInstanceCache.put(key, format);",
      "right" : "cDateTimeInstanceCache.put(key, format);",
      "info" : "ExpressionStatement[17976-18016]:ExpressionStatement[17976-18016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18062-18175]:Block[18062-18175]"
    }, {
      "left" : "throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);",
      "right" : "throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);",
      "info" : "ThrowStatement[18080-18161]:ThrowStatement[18080-18161]"
    }, {
      "left" : "return format;",
      "right" : "return format;",
      "info" : "ReturnStatement[18194-18208]:ReturnStatement[18194-18208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18781-19156]:Block[18781-19156]"
    }, {
      "left" : "Object key = new TimeZoneDisplayKey(tz, daylight, style, locale);",
      "right" : "Object key = new TimeZoneDisplayKey(tz, daylight, style, locale);",
      "info" : "VariableDeclarationStatement[18791-18856]:VariableDeclarationStatement[18791-18856]"
    }, {
      "left" : "String value = cTimeZoneDisplayCache.get(key);",
      "right" : "String value = cTimeZoneDisplayCache.get(key);",
      "info" : "VariableDeclarationStatement[18865-18911]:VariableDeclarationStatement[18865-18911]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[18920-19128]:IfStatement[18920-19128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18939-19128]:Block[18939-19128]"
    }, {
      "left" : "value = tz.getDisplayName(daylight, style, locale);",
      "right" : "value = tz.getDisplayName(daylight, style, locale);",
      "info" : "ExpressionStatement[19016-19067]:ExpressionStatement[19016-19067]"
    }, {
      "left" : "cTimeZoneDisplayCache.put(key, value);",
      "right" : "cTimeZoneDisplayCache.put(key, value);",
      "info" : "ExpressionStatement[19080-19118]:ExpressionStatement[19080-19118]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[19137-19150]:ReturnStatement[19137-19150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19316-19470]:Block[19316-19470]"
    }, {
      "left" : "if (cDefaultPattern == null)",
      "right" : "if (cDefaultPattern == null)",
      "info" : "IfStatement[19326-19432]:IfStatement[19326-19432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19355-19432]:Block[19355-19432]"
    }, {
      "left" : "cDefaultPattern = new SimpleDateFormat().toPattern();",
      "right" : "cDefaultPattern = new SimpleDateFormat().toPattern();",
      "info" : "ExpressionStatement[19369-19422]:ExpressionStatement[19369-19422]"
    }, {
      "left" : "return cDefaultPattern;",
      "right" : "return cDefaultPattern;",
      "info" : "ReturnStatement[19441-19464]:ReturnStatement[19441-19464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20135-20640]:Block[20135-20640]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[20145-20153]:SuperConstructorInvocation[20145-20153]"
    }, {
      "left" : "if (pattern == null)",
      "right" : "if (pattern == null)",
      "info" : "IfStatement[20162-20274]:IfStatement[20162-20274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20183-20274]:Block[20183-20274]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The pattern must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The pattern must not be null\");",
      "info" : "ThrowStatement[20197-20264]:ThrowStatement[20197-20264]"
    }, {
      "left" : "mPattern = pattern;",
      "right" : "mPattern = pattern;",
      "info" : "ExpressionStatement[20283-20302]:ExpressionStatement[20283-20302]"
    }, {
      "left" : "mTimeZoneForced = (timeZone != null);",
      "right" : "mTimeZoneForced = (timeZone != null);",
      "info" : "ExpressionStatement[20320-20357]:ExpressionStatement[20320-20357]"
    }, {
      "left" : "if (timeZone == null)",
      "right" : "if (timeZone == null)",
      "info" : "IfStatement[20366-20445]:IfStatement[20366-20445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20388-20445]:Block[20388-20445]"
    }, {
      "left" : "timeZone = TimeZone.getDefault();",
      "right" : "timeZone = TimeZone.getDefault();",
      "info" : "ExpressionStatement[20402-20435]:ExpressionStatement[20402-20435]"
    }, {
      "left" : "mTimeZone = timeZone;",
      "right" : "mTimeZone = timeZone;",
      "info" : "ExpressionStatement[20454-20475]:ExpressionStatement[20454-20475]"
    }, {
      "left" : "mLocaleForced = (locale != null);",
      "right" : "mLocaleForced = (locale != null);",
      "info" : "ExpressionStatement[20493-20526]:ExpressionStatement[20493-20526]"
    }, {
      "left" : "if (locale == null)",
      "right" : "if (locale == null)",
      "info" : "IfStatement[20535-20608]:IfStatement[20535-20608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20555-20608]:Block[20555-20608]"
    }, {
      "left" : "locale = Locale.getDefault();",
      "right" : "locale = Locale.getDefault();",
      "info" : "ExpressionStatement[20569-20598]:ExpressionStatement[20569-20598]"
    }, {
      "left" : "mLocale = locale;",
      "right" : "mLocale = locale;",
      "info" : "ExpressionStatement[20617-20634]:ExpressionStatement[20617-20634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20738-21018]:Block[20738-21018]"
    }, {
      "left" : "List<Rule> rulesList = parsePattern();",
      "right" : "List<Rule> rulesList = parsePattern();",
      "info" : "VariableDeclarationStatement[20748-20786]:VariableDeclarationStatement[20748-20786]"
    }, {
      "left" : "mRules = rulesList.toArray(new Rule[rulesList.size()]);",
      "right" : "mRules = rulesList.toArray(new Rule[rulesList.size()]);",
      "info" : "ExpressionStatement[20795-20850]:ExpressionStatement[20795-20850]"
    }, {
      "left" : "int len = 0;",
      "right" : "int len = 0;",
      "info" : "VariableDeclarationStatement[20860-20872]:VariableDeclarationStatement[20860-20872]"
    }, {
      "left" : "for (int i=mRules.length; --i >= 0)",
      "right" : "for (int i=mRules.length; --i >= 0)",
      "info" : "ForStatement[20881-20977]:ForStatement[20881-20977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20919-20977]:Block[20919-20977]"
    }, {
      "left" : "len += mRules[i].estimateLength();",
      "right" : "len += mRules[i].estimateLength();",
      "info" : "ExpressionStatement[20933-20967]:ExpressionStatement[20933-20967]"
    }, {
      "left" : "mMaxLengthEstimate = len;",
      "right" : "mMaxLengthEstimate = len;",
      "info" : "ExpressionStatement[20987-21012]:ExpressionStatement[20987-21012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21355-26329]:Block[21355-26329]"
    }, {
      "left" : "DateFormatSymbols symbols = new DateFormatSymbols(mLocale);",
      "right" : "DateFormatSymbols symbols = new DateFormatSymbols(mLocale);",
      "info" : "VariableDeclarationStatement[21365-21424]:VariableDeclarationStatement[21365-21424]"
    }, {
      "left" : "List<Rule> rules = new ArrayList<Rule>();",
      "right" : "List<Rule> rules = new ArrayList<Rule>();",
      "info" : "VariableDeclarationStatement[21433-21474]:VariableDeclarationStatement[21433-21474]"
    }, {
      "left" : "String[] ERAs = symbols.getEras();",
      "right" : "String[] ERAs = symbols.getEras();",
      "info" : "VariableDeclarationStatement[21484-21518]:VariableDeclarationStatement[21484-21518]"
    }, {
      "left" : "String[] months = symbols.getMonths();",
      "right" : "String[] months = symbols.getMonths();",
      "info" : "VariableDeclarationStatement[21527-21565]:VariableDeclarationStatement[21527-21565]"
    }, {
      "left" : "String[] shortMonths = symbols.getShortMonths();",
      "right" : "String[] shortMonths = symbols.getShortMonths();",
      "info" : "VariableDeclarationStatement[21574-21622]:VariableDeclarationStatement[21574-21622]"
    }, {
      "left" : "String[] weekdays = symbols.getWeekdays();",
      "right" : "String[] weekdays = symbols.getWeekdays();",
      "info" : "VariableDeclarationStatement[21631-21673]:VariableDeclarationStatement[21631-21673]"
    }, {
      "left" : "String[] shortWeekdays = symbols.getShortWeekdays();",
      "right" : "String[] shortWeekdays = symbols.getShortWeekdays();",
      "info" : "VariableDeclarationStatement[21682-21734]:VariableDeclarationStatement[21682-21734]"
    }, {
      "left" : "String[] AmPmStrings = symbols.getAmPmStrings();",
      "right" : "String[] AmPmStrings = symbols.getAmPmStrings();",
      "info" : "VariableDeclarationStatement[21743-21791]:VariableDeclarationStatement[21743-21791]"
    }, {
      "left" : "int length = mPattern.length();",
      "right" : "int length = mPattern.length();",
      "info" : "VariableDeclarationStatement[21801-21832]:VariableDeclarationStatement[21801-21832]"
    }, {
      "left" : "int[] indexRef = new int[1];",
      "right" : "int[] indexRef = new int[1];",
      "info" : "VariableDeclarationStatement[21841-21869]:VariableDeclarationStatement[21841-21869]"
    }, {
      "left" : "for (int i = 0; i < length; i++)",
      "right" : "for (int i = 0; i < length; i++)",
      "info" : "ForStatement[21879-26300]:ForStatement[21879-26300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21912-26300]:Block[21912-26300]"
    }, {
      "left" : "indexRef[0] = i;",
      "right" : "indexRef[0] = i;",
      "info" : "ExpressionStatement[21926-21942]:ExpressionStatement[21926-21942]"
    }, {
      "left" : "String token = parseToken(mPattern, indexRef);",
      "right" : "String token = parseToken(mPattern, indexRef);",
      "info" : "VariableDeclarationStatement[21955-22001]:VariableDeclarationStatement[21955-22001]"
    }, {
      "left" : "i = indexRef[0];",
      "right" : "i = indexRef[0];",
      "info" : "ExpressionStatement[22014-22030]:ExpressionStatement[22014-22030]"
    }, {
      "left" : "int tokenLen = token.length();",
      "right" : "int tokenLen = token.length();",
      "info" : "VariableDeclarationStatement[22044-22074]:VariableDeclarationStatement[22044-22074]"
    }, {
      "left" : "if (tokenLen == 0)",
      "right" : "if (tokenLen == 0)",
      "info" : "IfStatement[22087-22144]:IfStatement[22087-22144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22106-22144]:Block[22106-22144]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22124-22130]:BreakStatement[22124-22130]"
    }, {
      "left" : "Rule rule;",
      "right" : "Rule rule;",
      "info" : "VariableDeclarationStatement[22158-22168]:VariableDeclarationStatement[22158-22168]"
    }, {
      "left" : "char c = token.charAt(0);",
      "right" : "char c = token.charAt(0);",
      "info" : "VariableDeclarationStatement[22181-22206]:VariableDeclarationStatement[22181-22206]"
    }, {
      "left" : "switch (c) {\n            case 'G': // era designator (text)\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y': // year (number)\n                if (tokenLen >= 4) {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule = TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case 'M': // month in year (text and number)\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd': // day in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h': // hour in am/pm (number, 1..12)\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H': // hour in day (number, 0..23)\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm': // minute in hour (number)\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's': // second in minute (number)\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S': // millisecond (number)\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E': // day in week (text)\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D': // day in year (number)\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F': // day of week in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w': // week in year (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W': // week in month (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a': // am/pm marker (text)\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k': // hour in day (1..24)\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K': // hour in am/pm (0..11)\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z': // time zone (text)\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z': // time zone (value)\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'': // literal text\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }",
      "right" : "switch (c) {\n            case 'G': // era designator (text)\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y': // year (number)\n                if (tokenLen >= 4) {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule = TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case 'M': // month in year (text and number)\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd': // day in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h': // hour in am/pm (number, 1..12)\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H': // hour in day (number, 0..23)\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm': // minute in hour (number)\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's': // second in minute (number)\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S': // millisecond (number)\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E': // day in week (text)\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D': // day in year (number)\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F': // day of week in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w': // week in year (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W': // week in month (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a': // am/pm marker (text)\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k': // hour in day (1..24)\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K': // hour in am/pm (0..11)\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z': // time zone (text)\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z': // time zone (value)\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'': // literal text\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }",
      "info" : "SwitchStatement[22220-26260]:SwitchStatement[22220-26260]"
    }, {
      "left" : "case 'G':",
      "right" : "case 'G':",
      "info" : "SwitchCase[22245-22254]:SwitchCase[22245-22254]"
    }, {
      "left" : "rule = new TextField(Calendar.ERA, ERAs);",
      "right" : "rule = new TextField(Calendar.ERA, ERAs);",
      "info" : "ExpressionStatement[22296-22337]:ExpressionStatement[22296-22337]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22354-22360]:BreakStatement[22354-22360]"
    }, {
      "left" : "case 'y':",
      "right" : "case 'y':",
      "info" : "SwitchCase[22373-22382]:SwitchCase[22373-22382]"
    }, {
      "left" : "if (tokenLen >= 4)",
      "right" : "if (tokenLen >= 4)",
      "info" : "IfStatement[22416-22604]:IfStatement[22416-22604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22435-22524]:Block[22435-22524]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.YEAR, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.YEAR, tokenLen);",
      "info" : "ExpressionStatement[22457-22506]:ExpressionStatement[22457-22506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22530-22604]:Block[22530-22604]"
    }, {
      "left" : "rule = TwoDigitYearField.INSTANCE;",
      "right" : "rule = TwoDigitYearField.INSTANCE;",
      "info" : "ExpressionStatement[22552-22586]:ExpressionStatement[22552-22586]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22621-22627]:BreakStatement[22621-22627]"
    }, {
      "left" : "case 'M':",
      "right" : "case 'M':",
      "info" : "SwitchCase[22640-22649]:SwitchCase[22640-22649]"
    }, {
      "left" : "if (tokenLen >= 4)",
      "right" : "if (tokenLen >= 4)",
      "info" : "IfStatement[22701-23101]:IfStatement[22701-23101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22720-22805]:Block[22720-22805]"
    }, {
      "left" : "rule = new TextField(Calendar.MONTH, months);",
      "right" : "rule = new TextField(Calendar.MONTH, months);",
      "info" : "ExpressionStatement[22742-22787]:ExpressionStatement[22742-22787]"
    }, {
      "left" : "if (tokenLen == 3)",
      "right" : "if (tokenLen == 3)",
      "info" : "IfStatement[22811-23101]:IfStatement[22811-23101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22830-22920]:Block[22830-22920]"
    }, {
      "left" : "rule = new TextField(Calendar.MONTH, shortMonths);",
      "right" : "rule = new TextField(Calendar.MONTH, shortMonths);",
      "info" : "ExpressionStatement[22852-22902]:ExpressionStatement[22852-22902]"
    }, {
      "left" : "if (tokenLen == 2)",
      "right" : "if (tokenLen == 2)",
      "info" : "IfStatement[22926-23101]:IfStatement[22926-23101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22945-23020]:Block[22945-23020]"
    }, {
      "left" : "rule = TwoDigitMonthField.INSTANCE;",
      "right" : "rule = TwoDigitMonthField.INSTANCE;",
      "info" : "ExpressionStatement[22967-23002]:ExpressionStatement[22967-23002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23026-23101]:Block[23026-23101]"
    }, {
      "left" : "rule = UnpaddedMonthField.INSTANCE;",
      "right" : "rule = UnpaddedMonthField.INSTANCE;",
      "info" : "ExpressionStatement[23048-23083]:ExpressionStatement[23048-23083]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23118-23124]:BreakStatement[23118-23124]"
    }, {
      "left" : "case 'd':",
      "right" : "case 'd':",
      "info" : "SwitchCase[23137-23146]:SwitchCase[23137-23146]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);",
      "info" : "ExpressionStatement[23188-23245]:ExpressionStatement[23188-23245]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23262-23268]:BreakStatement[23262-23268]"
    }, {
      "left" : "case 'h':",
      "right" : "case 'h':",
      "info" : "SwitchCase[23281-23290]:SwitchCase[23281-23290]"
    }, {
      "left" : "rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));",
      "right" : "rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));",
      "info" : "ExpressionStatement[23340-23410]:ExpressionStatement[23340-23410]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23427-23433]:BreakStatement[23427-23433]"
    }, {
      "left" : "case 'H':",
      "right" : "case 'H':",
      "info" : "SwitchCase[23446-23455]:SwitchCase[23446-23455]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);",
      "info" : "ExpressionStatement[23503-23559]:ExpressionStatement[23503-23559]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23576-23582]:BreakStatement[23576-23582]"
    }, {
      "left" : "case 'm':",
      "right" : "case 'm':",
      "info" : "SwitchCase[23595-23604]:SwitchCase[23595-23604]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.MINUTE, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.MINUTE, tokenLen);",
      "info" : "ExpressionStatement[23648-23699]:ExpressionStatement[23648-23699]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23716-23722]:BreakStatement[23716-23722]"
    }, {
      "left" : "case 's':",
      "right" : "case 's':",
      "info" : "SwitchCase[23735-23744]:SwitchCase[23735-23744]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.SECOND, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.SECOND, tokenLen);",
      "info" : "ExpressionStatement[23790-23841]:ExpressionStatement[23790-23841]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23858-23864]:BreakStatement[23858-23864]"
    }, {
      "left" : "case 'S':",
      "right" : "case 'S':",
      "info" : "SwitchCase[23877-23886]:SwitchCase[23877-23886]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);",
      "info" : "ExpressionStatement[23927-23983]:ExpressionStatement[23927-23983]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24000-24006]:BreakStatement[24000-24006]"
    }, {
      "left" : "case 'E':",
      "right" : "case 'E':",
      "info" : "SwitchCase[24019-24028]:SwitchCase[24019-24028]"
    }, {
      "left" : "rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);",
      "right" : "rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);",
      "info" : "ExpressionStatement[24067-24151]:ExpressionStatement[24067-24151]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24168-24174]:BreakStatement[24168-24174]"
    }, {
      "left" : "case 'D':",
      "right" : "case 'D':",
      "info" : "SwitchCase[24187-24196]:SwitchCase[24187-24196]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);",
      "info" : "ExpressionStatement[24237-24293]:ExpressionStatement[24237-24293]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24310-24316]:BreakStatement[24310-24316]"
    }, {
      "left" : "case 'F':",
      "right" : "case 'F':",
      "info" : "SwitchCase[24329-24338]:SwitchCase[24329-24338]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);",
      "info" : "ExpressionStatement[24388-24453]:ExpressionStatement[24388-24453]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24470-24476]:BreakStatement[24470-24476]"
    }, {
      "left" : "case 'w':",
      "right" : "case 'w':",
      "info" : "SwitchCase[24489-24498]:SwitchCase[24489-24498]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);",
      "info" : "ExpressionStatement[24540-24597]:ExpressionStatement[24540-24597]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24614-24620]:BreakStatement[24614-24620]"
    }, {
      "left" : "case 'W':",
      "right" : "case 'W':",
      "info" : "SwitchCase[24633-24642]:SwitchCase[24633-24642]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);",
      "info" : "ExpressionStatement[24685-24743]:ExpressionStatement[24685-24743]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24760-24766]:BreakStatement[24760-24766]"
    }, {
      "left" : "case 'a':",
      "right" : "case 'a':",
      "info" : "SwitchCase[24779-24788]:SwitchCase[24779-24788]"
    }, {
      "left" : "rule = new TextField(Calendar.AM_PM, AmPmStrings);",
      "right" : "rule = new TextField(Calendar.AM_PM, AmPmStrings);",
      "info" : "ExpressionStatement[24828-24878]:ExpressionStatement[24828-24878]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24895-24901]:BreakStatement[24895-24901]"
    }, {
      "left" : "case 'k':",
      "right" : "case 'k':",
      "info" : "SwitchCase[24914-24923]:SwitchCase[24914-24923]"
    }, {
      "left" : "rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));",
      "right" : "rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));",
      "info" : "ExpressionStatement[24963-25044]:ExpressionStatement[24963-25044]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25061-25067]:BreakStatement[25061-25067]"
    }, {
      "left" : "case 'K':",
      "right" : "case 'K':",
      "info" : "SwitchCase[25080-25089]:SwitchCase[25080-25089]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.HOUR, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.HOUR, tokenLen);",
      "info" : "ExpressionStatement[25131-25180]:ExpressionStatement[25131-25180]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25197-25203]:BreakStatement[25197-25203]"
    }, {
      "left" : "case 'z':",
      "right" : "case 'z':",
      "info" : "SwitchCase[25216-25225]:SwitchCase[25216-25225]"
    }, {
      "left" : "if (tokenLen >= 4)",
      "right" : "if (tokenLen >= 4)",
      "info" : "IfStatement[25262-25528]:IfStatement[25262-25528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25281-25401]:Block[25281-25401]"
    }, {
      "left" : "rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);",
      "right" : "rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);",
      "info" : "ExpressionStatement[25303-25383]:ExpressionStatement[25303-25383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25407-25528]:Block[25407-25528]"
    }, {
      "left" : "rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);",
      "right" : "rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);",
      "info" : "ExpressionStatement[25429-25510]:ExpressionStatement[25429-25510]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25545-25551]:BreakStatement[25545-25551]"
    }, {
      "left" : "case 'Z':",
      "right" : "case 'Z':",
      "info" : "SwitchCase[25564-25573]:SwitchCase[25564-25573]"
    }, {
      "left" : "if (tokenLen == 1)",
      "right" : "if (tokenLen == 1)",
      "info" : "IfStatement[25611-25801]:IfStatement[25611-25801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25630-25714]:Block[25630-25714]"
    }, {
      "left" : "rule = TimeZoneNumberRule.INSTANCE_NO_COLON;",
      "right" : "rule = TimeZoneNumberRule.INSTANCE_NO_COLON;",
      "info" : "ExpressionStatement[25652-25696]:ExpressionStatement[25652-25696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25720-25801]:Block[25720-25801]"
    }, {
      "left" : "rule = TimeZoneNumberRule.INSTANCE_COLON;",
      "right" : "rule = TimeZoneNumberRule.INSTANCE_COLON;",
      "info" : "ExpressionStatement[25742-25783]:ExpressionStatement[25742-25783]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25818-25824]:BreakStatement[25818-25824]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[25837-25847]:SwitchCase[25837-25847]"
    }, {
      "left" : "String sub = token.substring(1);",
      "right" : "String sub = token.substring(1);",
      "info" : "VariableDeclarationStatement[25880-25912]:VariableDeclarationStatement[25880-25912]"
    }, {
      "left" : "if (sub.length() == 1)",
      "right" : "if (sub.length() == 1)",
      "info" : "IfStatement[25929-26111]:IfStatement[25929-26111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25952-26035]:Block[25952-26035]"
    }, {
      "left" : "rule = new CharacterLiteral(sub.charAt(0));",
      "right" : "rule = new CharacterLiteral(sub.charAt(0));",
      "info" : "ExpressionStatement[25974-26017]:ExpressionStatement[25974-26017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26041-26111]:Block[26041-26111]"
    }, {
      "left" : "rule = new StringLiteral(sub);",
      "right" : "rule = new StringLiteral(sub);",
      "info" : "ExpressionStatement[26063-26093]:ExpressionStatement[26063-26093]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26128-26134]:BreakStatement[26128-26134]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[26147-26155]:SwitchCase[26147-26155]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Illegal pattern component: \" + token);",
      "right" : "throw new IllegalArgumentException(\"Illegal pattern component: \" + token);",
      "info" : "ThrowStatement[26172-26246]:ThrowStatement[26172-26246]"
    }, {
      "left" : "rules.add(rule);",
      "right" : "rules.add(rule);",
      "info" : "ExpressionStatement[26274-26290]:ExpressionStatement[26274-26290]"
    }, {
      "left" : "return rules;",
      "right" : "return rules;",
      "info" : "ReturnStatement[26310-26323]:ReturnStatement[26310-26323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26569-28051]:Block[26569-28051]"
    }, {
      "left" : "StringBuilder buf = new StringBuilder();",
      "right" : "StringBuilder buf = new StringBuilder();",
      "info" : "VariableDeclarationStatement[26579-26619]:VariableDeclarationStatement[26579-26619]"
    }, {
      "left" : "int i = indexRef[0];",
      "right" : "int i = indexRef[0];",
      "info" : "VariableDeclarationStatement[26629-26649]:VariableDeclarationStatement[26629-26649]"
    }, {
      "left" : "int length = pattern.length();",
      "right" : "int length = pattern.length();",
      "info" : "VariableDeclarationStatement[26658-26688]:VariableDeclarationStatement[26658-26688]"
    }, {
      "left" : "char c = pattern.charAt(i);",
      "right" : "char c = pattern.charAt(i);",
      "info" : "VariableDeclarationStatement[26698-26725]:VariableDeclarationStatement[26698-26725]"
    }, {
      "left" : "if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')",
      "right" : "if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')",
      "info" : "IfStatement[26734-27988]:IfStatement[26734-27988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26784-27184]:Block[26784-27184]"
    }, {
      "left" : "buf.append(c);",
      "right" : "buf.append(c);",
      "info" : "ExpressionStatement[26894-26908]:ExpressionStatement[26894-26908]"
    }, {
      "left" : "while (i + 1 < length)",
      "right" : "while (i + 1 < length)",
      "info" : "WhileStatement[26922-27174]:WhileStatement[26922-27174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26945-27174]:Block[26945-27174]"
    }, {
      "left" : "char peek = pattern.charAt(i + 1);",
      "right" : "char peek = pattern.charAt(i + 1);",
      "info" : "VariableDeclarationStatement[26963-26997]:VariableDeclarationStatement[26963-26997]"
    }, {
      "left" : "if (peek == c)",
      "right" : "if (peek == c)",
      "info" : "IfStatement[27014-27160]:IfStatement[27014-27160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27029-27108]:Block[27029-27108]"
    }, {
      "left" : "buf.append(c);",
      "right" : "buf.append(c);",
      "info" : "ExpressionStatement[27051-27065]:ExpressionStatement[27051-27065]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[27086-27090]:ExpressionStatement[27086-27090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27114-27160]:Block[27114-27160]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27136-27142]:BreakStatement[27136-27142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27190-27988]:Block[27190-27988]"
    }, {
      "left" : "buf.append('\\'');",
      "right" : "buf.append('\\'');",
      "info" : "ExpressionStatement[27253-27270]:ExpressionStatement[27253-27270]"
    }, {
      "left" : "boolean inLiteral = false;",
      "right" : "boolean inLiteral = false;",
      "info" : "VariableDeclarationStatement[27284-27310]:VariableDeclarationStatement[27284-27310]"
    }, {
      "left" : "for (; i < length; i++)",
      "right" : "for (; i < length; i++)",
      "info" : "ForStatement[27324-27978]:ForStatement[27324-27978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27348-27978]:Block[27348-27978]"
    }, {
      "left" : "c = pattern.charAt(i);",
      "right" : "c = pattern.charAt(i);",
      "info" : "ExpressionStatement[27366-27388]:ExpressionStatement[27366-27388]"
    }, {
      "left" : "if (c == '\\'')",
      "right" : "if (c == '\\'')",
      "info" : "IfStatement[27406-27964]:IfStatement[27406-27964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27421-27736]:Block[27421-27736]"
    }, {
      "left" : "if (i + 1 < length && pattern.charAt(i + 1) == '\\'')",
      "right" : "if (i + 1 < length && pattern.charAt(i + 1) == '\\'')",
      "info" : "IfStatement[27443-27718]:IfStatement[27443-27718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27496-27641]:Block[27496-27641]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[27576-27580]:ExpressionStatement[27576-27580]"
    }, {
      "left" : "buf.append(c);",
      "right" : "buf.append(c);",
      "info" : "ExpressionStatement[27605-27619]:ExpressionStatement[27605-27619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27647-27718]:Block[27647-27718]"
    }, {
      "left" : "inLiteral = !inLiteral;",
      "right" : "inLiteral = !inLiteral;",
      "info" : "ExpressionStatement[27673-27696]:ExpressionStatement[27673-27696]"
    }, {
      "left" : "if (!inLiteral &&\n                         (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z'))",
      "right" : "if (!inLiteral &&\n                         (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z'))",
      "info" : "IfStatement[27742-27964]:IfStatement[27742-27964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27833-27904]:Block[27833-27904]"
    }, {
      "left" : "i--;",
      "right" : "i--;",
      "info" : "ExpressionStatement[27855-27859]:ExpressionStatement[27855-27859]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27880-27886]:BreakStatement[27880-27886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27910-27964]:Block[27910-27964]"
    }, {
      "left" : "buf.append(c);",
      "right" : "buf.append(c);",
      "info" : "ExpressionStatement[27932-27946]:ExpressionStatement[27932-27946]"
    }, {
      "left" : "indexRef[0] = i;",
      "right" : "indexRef[0] = i;",
      "info" : "ExpressionStatement[27998-28014]:ExpressionStatement[27998-28014]"
    }, {
      "left" : "return buf.toString();",
      "right" : "return buf.toString();",
      "info" : "ReturnStatement[28023-28045]:ReturnStatement[28023-28045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28352-28605]:Block[28352-28605]"
    }, {
      "left" : "switch (padding) {\n        case 1:\n            return new UnpaddedNumberField(field);\n        case 2:\n            return new TwoDigitNumberField(field);\n        default:\n            return new PaddedNumberField(field, padding);\n        }",
      "right" : "switch (padding) {\n        case 1:\n            return new UnpaddedNumberField(field);\n        case 2:\n            return new TwoDigitNumberField(field);\n        default:\n            return new PaddedNumberField(field, padding);\n        }",
      "info" : "SwitchStatement[28362-28599]:SwitchStatement[28362-28599]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[28389-28396]:SwitchCase[28389-28396]"
    }, {
      "left" : "return new UnpaddedNumberField(field);",
      "right" : "return new UnpaddedNumberField(field);",
      "info" : "ReturnStatement[28409-28447]:ReturnStatement[28409-28447]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[28456-28463]:SwitchCase[28456-28463]"
    }, {
      "left" : "return new TwoDigitNumberField(field);",
      "right" : "return new TwoDigitNumberField(field);",
      "info" : "ReturnStatement[28476-28514]:ReturnStatement[28476-28514]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[28523-28531]:SwitchCase[28523-28531]"
    }, {
      "left" : "return new PaddedNumberField(field, padding);",
      "right" : "return new PaddedNumberField(field, padding);",
      "info" : "ReturnStatement[28544-28589]:ReturnStatement[28544-28589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29116-29581]:Block[29116-29581]"
    }, {
      "left" : "if (obj instanceof Date)",
      "right" : "if (obj instanceof Date)",
      "info" : "IfStatement[29126-29575]:IfStatement[29126-29575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29151-29213]:Block[29151-29213]"
    }, {
      "left" : "return format((Date) obj, toAppendTo);",
      "right" : "return format((Date) obj, toAppendTo);",
      "info" : "ReturnStatement[29165-29203]:ReturnStatement[29165-29203]"
    }, {
      "left" : "if (obj instanceof Calendar)",
      "right" : "if (obj instanceof Calendar)",
      "info" : "IfStatement[29219-29575]:IfStatement[29219-29575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29248-29314]:Block[29248-29314]"
    }, {
      "left" : "return format((Calendar) obj, toAppendTo);",
      "right" : "return format((Calendar) obj, toAppendTo);",
      "info" : "ReturnStatement[29262-29304]:ReturnStatement[29262-29304]"
    }, {
      "left" : "if (obj instanceof Long)",
      "right" : "if (obj instanceof Long)",
      "info" : "IfStatement[29320-29575]:IfStatement[29320-29575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29345-29421]:Block[29345-29421]"
    }, {
      "left" : "return format(((Long) obj).longValue(), toAppendTo);",
      "right" : "return format(((Long) obj).longValue(), toAppendTo);",
      "info" : "ReturnStatement[29359-29411]:ReturnStatement[29359-29411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29427-29575]:Block[29427-29575]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Unknown class: \" +\n                (obj == null ? \"<null>\" : obj.getClass().getName()));",
      "right" : "throw new IllegalArgumentException(\"Unknown class: \" +\n                (obj == null ? \"<null>\" : obj.getClass().getName()));",
      "info" : "ThrowStatement[29441-29565]:ThrowStatement[29441-29565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29814-29862]:Block[29814-29862]"
    }, {
      "left" : "return format(new Date(millis));",
      "right" : "return format(new Date(millis));",
      "info" : "ReturnStatement[29824-29856]:ReturnStatement[29824-29856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30049-30215]:Block[30049-30224]"
    }, {
      "left" : "Calendar c = new GregorianCalendar(mTimeZone);",
      "right" : "Calendar c = new GregorianCalendar(mTimeZone, mLocale);",
      "info" : "VariableDeclarationStatement[30059-30105]:VariableDeclarationStatement[30059-30114]"
    }, {
      "left" : "c.setTime(date);",
      "right" : "c.setTime(date);",
      "info" : "ExpressionStatement[30114-30130]:ExpressionStatement[30123-30139]"
    }, {
      "left" : "return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();",
      "right" : "return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();",
      "info" : "ReturnStatement[30139-30209]:ReturnStatement[30148-30218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30422-30511]:Block[30431-30520]"
    }, {
      "left" : "return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();",
      "right" : "return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();",
      "info" : "ReturnStatement[30432-30505]:ReturnStatement[30441-30514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30870-30923]:Block[30879-30932]"
    }, {
      "left" : "return format(new Date(millis), buf);",
      "right" : "return format(new Date(millis), buf);",
      "info" : "ReturnStatement[30880-30917]:ReturnStatement[30889-30926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31237-31359]:Block[31246-31368]"
    }, {
      "left" : "Calendar c = new GregorianCalendar(mTimeZone);",
      "right" : "Calendar c = new GregorianCalendar(mTimeZone);",
      "info" : "VariableDeclarationStatement[31247-31293]:VariableDeclarationStatement[31256-31302]"
    }, {
      "left" : "c.setTime(date);",
      "right" : "c.setTime(date);",
      "info" : "ExpressionStatement[31302-31318]:ExpressionStatement[31311-31327]"
    }, {
      "left" : "return applyRules(c, buf);",
      "right" : "return applyRules(c, buf);",
      "info" : "ReturnStatement[31327-31353]:ReturnStatement[31336-31362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31693-31933]:Block[31702-31942]"
    }, {
      "left" : "if (mTimeZoneForced)",
      "right" : "if (mTimeZoneForced)",
      "info" : "IfStatement[31703-31885]:IfStatement[31712-31894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31724-31885]:Block[31733-31894]"
    }, {
      "left" : "calendar.getTimeInMillis();",
      "right" : "calendar.getTimeInMillis();",
      "info" : "ExpressionStatement[31738-31765]:ExpressionStatement[31747-31774]"
    }, {
      "left" : "calendar = (Calendar) calendar.clone();",
      "right" : "calendar = (Calendar) calendar.clone();",
      "info" : "ExpressionStatement[31791-31830]:ExpressionStatement[31800-31839]"
    }, {
      "left" : "calendar.setTimeZone(mTimeZone);",
      "right" : "calendar.setTimeZone(mTimeZone);",
      "info" : "ExpressionStatement[31843-31875]:ExpressionStatement[31852-31884]"
    }, {
      "left" : "return applyRules(calendar, buf);",
      "right" : "return applyRules(calendar, buf);",
      "info" : "ReturnStatement[31894-31927]:ReturnStatement[31903-31936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32263-32450]:Block[32272-32459]"
    }, {
      "left" : "Rule[] rules = mRules;",
      "right" : "Rule[] rules = mRules;",
      "info" : "VariableDeclarationStatement[32273-32295]:VariableDeclarationStatement[32282-32304]"
    }, {
      "left" : "int len = mRules.length;",
      "right" : "int len = mRules.length;",
      "info" : "VariableDeclarationStatement[32304-32328]:VariableDeclarationStatement[32313-32337]"
    }, {
      "left" : "for (int i = 0; i < len; i++)",
      "right" : "for (int i = 0; i < len; i++)",
      "info" : "ForStatement[32337-32424]:ForStatement[32346-32433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32367-32424]:Block[32376-32433]"
    }, {
      "left" : "rules[i].appendTo(buf, calendar);",
      "right" : "rules[i].appendTo(buf, calendar);",
      "info" : "ExpressionStatement[32381-32414]:ExpressionStatement[32390-32423]"
    }, {
      "left" : "return buf;",
      "right" : "return buf;",
      "info" : "ReturnStatement[32433-32444]:ReturnStatement[32442-32453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32819-32902]:Block[32828-32911]"
    }, {
      "left" : "pos.setIndex(0);",
      "right" : "pos.setIndex(0);",
      "info" : "ExpressionStatement[32829-32845]:ExpressionStatement[32838-32854]"
    }, {
      "left" : "pos.setErrorIndex(0);",
      "right" : "pos.setErrorIndex(0);",
      "info" : "ExpressionStatement[32854-32875]:ExpressionStatement[32863-32884]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[32884-32896]:ReturnStatement[32893-32905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33187-33219]:Block[33196-33228]"
    }, {
      "left" : "return mPattern;",
      "right" : "return mPattern;",
      "info" : "ReturnStatement[33197-33213]:ReturnStatement[33206-33222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33611-33644]:Block[33620-33653]"
    }, {
      "left" : "return mTimeZone;",
      "right" : "return mTimeZone;",
      "info" : "ReturnStatement[33621-33638]:ReturnStatement[33630-33647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33934-33973]:Block[33943-33982]"
    }, {
      "left" : "return mTimeZoneForced;",
      "right" : "return mTimeZoneForced;",
      "info" : "ReturnStatement[33944-33967]:ReturnStatement[33953-33976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34109-34140]:Block[34118-34149]"
    }, {
      "left" : "return mLocale;",
      "right" : "return mLocale;",
      "info" : "ReturnStatement[34119-34134]:ReturnStatement[34128-34143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34462-34504]:Block[34471-34513]"
    }, {
      "left" : "return mMaxLengthEstimate;",
      "right" : "return mMaxLengthEstimate;",
      "info" : "ReturnStatement[34472-34498]:ReturnStatement[34481-34507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34809-35391]:Block[34818-35400]"
    }, {
      "left" : "if (obj instanceof FastDateFormat == false)",
      "right" : "if (obj instanceof FastDateFormat == false)",
      "info" : "IfStatement[34819-34900]:IfStatement[34828-34909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34863-34900]:Block[34872-34909]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[34877-34890]:ReturnStatement[34886-34899]"
    }, {
      "left" : "FastDateFormat other = (FastDateFormat) obj;",
      "right" : "FastDateFormat other = (FastDateFormat) obj;",
      "info" : "VariableDeclarationStatement[34909-34953]:VariableDeclarationStatement[34918-34962]"
    }, {
      "left" : "if (\n            (mPattern == other.mPattern || mPattern.equals(other.mPattern)) &&\n            (mTimeZone == other.mTimeZone || mTimeZone.equals(other.mTimeZone)) &&\n            (mLocale == other.mLocale || mLocale.equals(other.mLocale)) &&\n            (mTimeZoneForced == other.mTimeZoneForced) &&\n            (mLocaleForced == other.mLocaleForced))",
      "right" : "if (\n            (mPattern == other.mPattern || mPattern.equals(other.mPattern)) &&\n            (mTimeZone == other.mTimeZone || mTimeZone.equals(other.mTimeZone)) &&\n            (mLocale == other.mLocale || mLocale.equals(other.mLocale)) &&\n            (mTimeZoneForced == other.mTimeZoneForced) &&\n            (mLocaleForced == other.mLocaleForced))",
      "info" : "IfStatement[34962-35363]:IfStatement[34971-35372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35327-35363]:Block[35336-35372]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[35341-35353]:ReturnStatement[35350-35362]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[35372-35385]:ReturnStatement[35381-35394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35563-35815]:Block[35572-35824]"
    }, {
      "left" : "int total = 0;",
      "right" : "int total = 0;",
      "info" : "VariableDeclarationStatement[35573-35587]:VariableDeclarationStatement[35582-35596]"
    }, {
      "left" : "total += mPattern.hashCode();",
      "right" : "total += mPattern.hashCode();",
      "info" : "ExpressionStatement[35596-35625]:ExpressionStatement[35605-35634]"
    }, {
      "left" : "total += mTimeZone.hashCode();",
      "right" : "total += mTimeZone.hashCode();",
      "info" : "ExpressionStatement[35634-35664]:ExpressionStatement[35643-35673]"
    }, {
      "left" : "total += (mTimeZoneForced ? 1 : 0);",
      "right" : "total += (mTimeZoneForced ? 1 : 0);",
      "info" : "ExpressionStatement[35673-35708]:ExpressionStatement[35682-35717]"
    }, {
      "left" : "total += mLocale.hashCode();",
      "right" : "total += mLocale.hashCode();",
      "info" : "ExpressionStatement[35717-35745]:ExpressionStatement[35726-35754]"
    }, {
      "left" : "total += (mLocaleForced ? 1 : 0);",
      "right" : "total += (mLocaleForced ? 1 : 0);",
      "info" : "ExpressionStatement[35754-35787]:ExpressionStatement[35763-35796]"
    }, {
      "left" : "return total;",
      "right" : "return total;",
      "info" : "ReturnStatement[35796-35809]:ReturnStatement[35805-35818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35983-36041]:Block[35992-36050]"
    }, {
      "left" : "return \"FastDateFormat[\" + mPattern + \"]\";",
      "right" : "return \"FastDateFormat[\" + mPattern + \"]\";",
      "info" : "ReturnStatement[35993-36035]:ReturnStatement[36002-36044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36568-36623]:Block[36577-36632]"
    }, {
      "left" : "in.defaultReadObject();",
      "right" : "in.defaultReadObject();",
      "info" : "ExpressionStatement[36578-36601]:ExpressionStatement[36587-36610]"
    }, {
      "left" : "init();",
      "right" : "init();",
      "info" : "ExpressionStatement[36610-36617]:ExpressionStatement[36619-36626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38093-38132]:Block[38102-38141]"
    }, {
      "left" : "mValue = value;",
      "right" : "mValue = value;",
      "info" : "ExpressionStatement[38107-38122]:ExpressionStatement[38116-38131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38219-38252]:Block[38228-38261]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[38233-38242]:ReturnStatement[38242-38251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38372-38418]:Block[38381-38427]"
    }, {
      "left" : "buffer.append(mValue);",
      "right" : "buffer.append(mValue);",
      "info" : "ExpressionStatement[38386-38408]:ExpressionStatement[38395-38417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38814-38853]:Block[38823-38862]"
    }, {
      "left" : "mValue = value;",
      "right" : "mValue = value;",
      "info" : "ExpressionStatement[38828-38843]:ExpressionStatement[38837-38852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38940-38987]:Block[38949-38996]"
    }, {
      "left" : "return mValue.length();",
      "right" : "return mValue.length();",
      "info" : "ReturnStatement[38954-38977]:ReturnStatement[38963-38986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39107-39153]:Block[39116-39162]"
    }, {
      "left" : "buffer.append(mValue);",
      "right" : "buffer.append(mValue);",
      "info" : "ExpressionStatement[39121-39143]:ExpressionStatement[39130-39152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39631-39700]:Block[39640-39709]"
    }, {
      "left" : "mField = field;",
      "right" : "mField = field;",
      "info" : "ExpressionStatement[39645-39660]:ExpressionStatement[39654-39669]"
    }, {
      "left" : "mValues = values;",
      "right" : "mValues = values;",
      "info" : "ExpressionStatement[39673-39690]:ExpressionStatement[39682-39699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39787-40043]:Block[39796-40052]"
    }, {
      "left" : "int max = 0;",
      "right" : "int max = 0;",
      "info" : "VariableDeclarationStatement[39801-39813]:VariableDeclarationStatement[39810-39822]"
    }, {
      "left" : "for (int i=mValues.length; --i >= 0)",
      "right" : "for (int i=mValues.length; --i >= 0)",
      "info" : "ForStatement[39826-40009]:ForStatement[39835-40018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39865-40009]:Block[39874-40018]"
    }, {
      "left" : "int len = mValues[i].length();",
      "right" : "int len = mValues[i].length();",
      "info" : "VariableDeclarationStatement[39883-39913]:VariableDeclarationStatement[39892-39922]"
    }, {
      "left" : "if (len > max)",
      "right" : "if (len > max)",
      "info" : "IfStatement[39930-39995]:IfStatement[39939-40004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39945-39995]:Block[39954-40004]"
    }, {
      "left" : "max = len;",
      "right" : "max = len;",
      "info" : "ExpressionStatement[39967-39977]:ExpressionStatement[39976-39986]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[40022-40033]:ReturnStatement[40031-40042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40163-40232]:Block[40172-40241]"
    }, {
      "left" : "buffer.append(mValues[calendar.get(mField)]);",
      "right" : "buffer.append(mValues[calendar.get(mField)]);",
      "info" : "ExpressionStatement[40177-40222]:ExpressionStatement[40186-40231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40620-40659]:Block[40629-40668]"
    }, {
      "left" : "mField = field;",
      "right" : "mField = field;",
      "info" : "ExpressionStatement[40634-40649]:ExpressionStatement[40643-40658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40746-40779]:Block[40755-40788]"
    }, {
      "left" : "return 4;",
      "right" : "return 4;",
      "info" : "ReturnStatement[40760-40769]:ReturnStatement[40769-40778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40899-40962]:Block[40908-40971]"
    }, {
      "left" : "appendTo(buffer, calendar.get(mField));",
      "right" : "appendTo(buffer, calendar.get(mField));",
      "info" : "ExpressionStatement[40913-40952]:ExpressionStatement[40922-40961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41080-41416]:Block[41089-41425]"
    }, {
      "left" : "if (value < 10)",
      "right" : "if (value < 10)",
      "info" : "IfStatement[41094-41406]:IfStatement[41103-41415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41110-41177]:Block[41119-41186]"
    }, {
      "left" : "buffer.append((char)(value + '0'));",
      "right" : "buffer.append((char)(value + '0'));",
      "info" : "ExpressionStatement[41128-41163]:ExpressionStatement[41137-41172]"
    }, {
      "left" : "if (value < 100)",
      "right" : "if (value < 100)",
      "info" : "IfStatement[41183-41406]:IfStatement[41192-41415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41200-41329]:Block[41209-41338]"
    }, {
      "left" : "buffer.append((char)(value / 10 + '0'));",
      "right" : "buffer.append((char)(value / 10 + '0'));",
      "info" : "ExpressionStatement[41218-41258]:ExpressionStatement[41227-41267]"
    }, {
      "left" : "buffer.append((char)(value % 10 + '0'));",
      "right" : "buffer.append((char)(value % 10 + '0'));",
      "info" : "ExpressionStatement[41275-41315]:ExpressionStatement[41284-41324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41335-41406]:Block[41344-41415]"
    }, {
      "left" : "buffer.append(Integer.toString(value));",
      "right" : "buffer.append(Integer.toString(value));",
      "info" : "ExpressionStatement[41353-41392]:ExpressionStatement[41362-41401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41775-41807]:Block[41784-41816]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[41789-41797]:SuperConstructorInvocation[41798-41806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41894-41927]:Block[41903-41936]"
    }, {
      "left" : "return 2;",
      "right" : "return 2;",
      "info" : "ReturnStatement[41908-41917]:ReturnStatement[41917-41926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42047-42122]:Block[42056-42131]"
    }, {
      "left" : "appendTo(buffer, calendar.get(Calendar.MONTH) + 1);",
      "right" : "appendTo(buffer, calendar.get(Calendar.MONTH) + 1);",
      "info" : "ExpressionStatement[42061-42112]:ExpressionStatement[42070-42121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42240-42482]:Block[42249-42491]"
    }, {
      "left" : "if (value < 10)",
      "right" : "if (value < 10)",
      "info" : "IfStatement[42254-42472]:IfStatement[42263-42481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42270-42337]:Block[42279-42346]"
    }, {
      "left" : "buffer.append((char)(value + '0'));",
      "right" : "buffer.append((char)(value + '0'));",
      "info" : "ExpressionStatement[42288-42323]:ExpressionStatement[42297-42332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42343-42472]:Block[42352-42481]"
    }, {
      "left" : "buffer.append((char)(value / 10 + '0'));",
      "right" : "buffer.append((char)(value / 10 + '0'));",
      "info" : "ExpressionStatement[42361-42401]:ExpressionStatement[42370-42410]"
    }, {
      "left" : "buffer.append((char)(value % 10 + '0'));",
      "right" : "buffer.append((char)(value % 10 + '0'));",
      "info" : "ExpressionStatement[42418-42458]:ExpressionStatement[42427-42467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42928-43163]:Block[42937-43172]"
    }, {
      "left" : "if (size < 3)",
      "right" : "if (size < 3)",
      "info" : "IfStatement[42942-43099]:IfStatement[42951-43108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42956-43099]:Block[42965-43108]"
    }, {
      "left" : "throw new IllegalArgumentException();",
      "right" : "throw new IllegalArgumentException();",
      "info" : "ThrowStatement[43048-43085]:ThrowStatement[43057-43094]"
    }, {
      "left" : "mField = field;",
      "right" : "mField = field;",
      "info" : "ExpressionStatement[43112-43127]:ExpressionStatement[43121-43136]"
    }, {
      "left" : "mSize = size;",
      "right" : "mSize = size;",
      "info" : "ExpressionStatement[43140-43153]:ExpressionStatement[43149-43162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43250-43283]:Block[43259-43292]"
    }, {
      "left" : "return 4;",
      "right" : "return 4;",
      "info" : "ReturnStatement[43264-43273]:ReturnStatement[43273-43282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43403-43466]:Block[43412-43475]"
    }, {
      "left" : "appendTo(buffer, calendar.get(mField));",
      "right" : "appendTo(buffer, calendar.get(mField));",
      "info" : "ExpressionStatement[43417-43456]:ExpressionStatement[43426-43465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43584-44352]:Block[43593-44361]"
    }, {
      "left" : "if (value < 100)",
      "right" : "if (value < 100)",
      "info" : "IfStatement[43598-44342]:IfStatement[43607-44351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43615-43852]:Block[43624-43861]"
    }, {
      "left" : "for (int i = mSize; --i >= 2)",
      "right" : "for (int i = mSize; --i >= 2)",
      "info" : "ForStatement[43633-43724]:ForStatement[43642-43733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43665-43724]:Block[43674-43733]"
    }, {
      "left" : "buffer.append('0');",
      "right" : "buffer.append('0');",
      "info" : "ExpressionStatement[43687-43706]:ExpressionStatement[43696-43715]"
    }, {
      "left" : "buffer.append((char)(value / 10 + '0'));",
      "right" : "buffer.append((char)(value / 10 + '0'));",
      "info" : "ExpressionStatement[43741-43781]:ExpressionStatement[43750-43790]"
    }, {
      "left" : "buffer.append((char)(value % 10 + '0'));",
      "right" : "buffer.append((char)(value % 10 + '0'));",
      "info" : "ExpressionStatement[43798-43838]:ExpressionStatement[43807-43847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43858-44342]:Block[43867-44351]"
    }, {
      "left" : "int digits;",
      "right" : "int digits;",
      "info" : "VariableDeclarationStatement[43876-43887]:VariableDeclarationStatement[43885-43896]"
    }, {
      "left" : "if (value < 1000)",
      "right" : "if (value < 1000)",
      "info" : "IfStatement[43904-44159]:IfStatement[43913-44168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43922-43973]:Block[43931-43982]"
    }, {
      "left" : "digits = 3;",
      "right" : "digits = 3;",
      "info" : "ExpressionStatement[43944-43955]:ExpressionStatement[43953-43964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43979-44159]:Block[43988-44168]"
    }, {
      "left" : "Validate.isTrue(value > -1, \"Negative values should not be possible\", value);",
      "right" : "Validate.isTrue(value > -1, \"Negative values should not be possible\", value);",
      "info" : "ExpressionStatement[44001-44078]:ExpressionStatement[44010-44087]"
    }, {
      "left" : "digits = Integer.toString(value).length();",
      "right" : "digits = Integer.toString(value).length();",
      "info" : "ExpressionStatement[44099-44141]:ExpressionStatement[44108-44150]"
    }, {
      "left" : "for (int i = mSize; --i >= digits)",
      "right" : "for (int i = mSize; --i >= digits)",
      "info" : "ForStatement[44176-44272]:ForStatement[44185-44281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44213-44272]:Block[44222-44281]"
    }, {
      "left" : "buffer.append('0');",
      "right" : "buffer.append('0');",
      "info" : "ExpressionStatement[44235-44254]:ExpressionStatement[44244-44263]"
    }, {
      "left" : "buffer.append(Integer.toString(value));",
      "right" : "buffer.append(Integer.toString(value));",
      "info" : "ExpressionStatement[44289-44328]:ExpressionStatement[44298-44337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44741-44780]:Block[44750-44789]"
    }, {
      "left" : "mField = field;",
      "right" : "mField = field;",
      "info" : "ExpressionStatement[44755-44770]:ExpressionStatement[44764-44779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44867-44900]:Block[44876-44909]"
    }, {
      "left" : "return 2;",
      "right" : "return 2;",
      "info" : "ReturnStatement[44881-44890]:ReturnStatement[44890-44899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45020-45083]:Block[45029-45092]"
    }, {
      "left" : "appendTo(buffer, calendar.get(mField));",
      "right" : "appendTo(buffer, calendar.get(mField));",
      "info" : "ExpressionStatement[45034-45073]:ExpressionStatement[45043-45082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45201-45448]:Block[45210-45457]"
    }, {
      "left" : "if (value < 100)",
      "right" : "if (value < 100)",
      "info" : "IfStatement[45215-45438]:IfStatement[45224-45447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45232-45361]:Block[45241-45370]"
    }, {
      "left" : "buffer.append((char)(value / 10 + '0'));",
      "right" : "buffer.append((char)(value / 10 + '0'));",
      "info" : "ExpressionStatement[45250-45290]:ExpressionStatement[45259-45299]"
    }, {
      "left" : "buffer.append((char)(value % 10 + '0'));",
      "right" : "buffer.append((char)(value % 10 + '0'));",
      "info" : "ExpressionStatement[45307-45347]:ExpressionStatement[45316-45356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45367-45438]:Block[45376-45447]"
    }, {
      "left" : "buffer.append(Integer.toString(value));",
      "right" : "buffer.append(Integer.toString(value));",
      "info" : "ExpressionStatement[45385-45424]:ExpressionStatement[45394-45433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45790-45822]:Block[45799-45831]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[45804-45812]:SuperConstructorInvocation[45813-45821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45909-45942]:Block[45918-45951]"
    }, {
      "left" : "return 2;",
      "right" : "return 2;",
      "info" : "ReturnStatement[45923-45932]:ReturnStatement[45932-45941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46062-46138]:Block[46071-46147]"
    }, {
      "left" : "appendTo(buffer, calendar.get(Calendar.YEAR) % 100);",
      "right" : "appendTo(buffer, calendar.get(Calendar.YEAR) % 100);",
      "info" : "ExpressionStatement[46076-46128]:ExpressionStatement[46085-46137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46256-46373]:Block[46265-46382]"
    }, {
      "left" : "buffer.append((char)(value / 10 + '0'));",
      "right" : "buffer.append((char)(value / 10 + '0'));",
      "info" : "ExpressionStatement[46270-46310]:ExpressionStatement[46279-46319]"
    }, {
      "left" : "buffer.append((char)(value % 10 + '0'));",
      "right" : "buffer.append((char)(value % 10 + '0'));",
      "info" : "ExpressionStatement[46323-46363]:ExpressionStatement[46332-46372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46721-46753]:Block[46730-46762]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[46735-46743]:SuperConstructorInvocation[46744-46752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46840-46873]:Block[46849-46882]"
    }, {
      "left" : "return 2;",
      "right" : "return 2;",
      "info" : "ReturnStatement[46854-46863]:ReturnStatement[46863-46872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46993-47068]:Block[47002-47077]"
    }, {
      "left" : "appendTo(buffer, calendar.get(Calendar.MONTH) + 1);",
      "right" : "appendTo(buffer, calendar.get(Calendar.MONTH) + 1);",
      "info" : "ExpressionStatement[47007-47058]:ExpressionStatement[47016-47067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47186-47303]:Block[47195-47312]"
    }, {
      "left" : "buffer.append((char)(value / 10 + '0'));",
      "right" : "buffer.append((char)(value / 10 + '0'));",
      "info" : "ExpressionStatement[47200-47240]:ExpressionStatement[47209-47249]"
    }, {
      "left" : "buffer.append((char)(value % 10 + '0'));",
      "right" : "buffer.append((char)(value % 10 + '0'));",
      "info" : "ExpressionStatement[47253-47293]:ExpressionStatement[47262-47302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47722-47759]:Block[47731-47768]"
    }, {
      "left" : "mRule = rule;",
      "right" : "mRule = rule;",
      "info" : "ExpressionStatement[47736-47749]:ExpressionStatement[47745-47758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47846-47900]:Block[47855-47909]"
    }, {
      "left" : "return mRule.estimateLength();",
      "right" : "return mRule.estimateLength();",
      "info" : "ReturnStatement[47860-47890]:ReturnStatement[47869-47899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48020-48240]:Block[48029-48249]"
    }, {
      "left" : "int value = calendar.get(Calendar.HOUR);",
      "right" : "int value = calendar.get(Calendar.HOUR);",
      "info" : "VariableDeclarationStatement[48034-48074]:VariableDeclarationStatement[48043-48083]"
    }, {
      "left" : "if (value == 0)",
      "right" : "if (value == 0)",
      "info" : "IfStatement[48087-48187]:IfStatement[48096-48196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48103-48187]:Block[48112-48196]"
    }, {
      "left" : "value = calendar.getLeastMaximum(Calendar.HOUR) + 1;",
      "right" : "value = calendar.getLeastMaximum(Calendar.HOUR) + 1;",
      "info" : "ExpressionStatement[48121-48173]:ExpressionStatement[48130-48182]"
    }, {
      "left" : "mRule.appendTo(buffer, value);",
      "right" : "mRule.appendTo(buffer, value);",
      "info" : "ExpressionStatement[48200-48230]:ExpressionStatement[48209-48239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48352-48406]:Block[48361-48415]"
    }, {
      "left" : "mRule.appendTo(buffer, value);",
      "right" : "mRule.appendTo(buffer, value);",
      "info" : "ExpressionStatement[48366-48396]:ExpressionStatement[48375-48405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48842-48879]:Block[48851-48888]"
    }, {
      "left" : "mRule = rule;",
      "right" : "mRule = rule;",
      "info" : "ExpressionStatement[48856-48869]:ExpressionStatement[48865-48878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48966-49020]:Block[48975-49029]"
    }, {
      "left" : "return mRule.estimateLength();",
      "right" : "return mRule.estimateLength();",
      "info" : "ReturnStatement[48980-49010]:ReturnStatement[48989-49019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49140-49369]:Block[49149-49378]"
    }, {
      "left" : "int value = calendar.get(Calendar.HOUR_OF_DAY);",
      "right" : "int value = calendar.get(Calendar.HOUR_OF_DAY);",
      "info" : "VariableDeclarationStatement[49154-49201]:VariableDeclarationStatement[49163-49210]"
    }, {
      "left" : "if (value == 0)",
      "right" : "if (value == 0)",
      "info" : "IfStatement[49214-49316]:IfStatement[49223-49325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49230-49316]:Block[49239-49325]"
    }, {
      "left" : "value = calendar.getMaximum(Calendar.HOUR_OF_DAY) + 1;",
      "right" : "value = calendar.getMaximum(Calendar.HOUR_OF_DAY) + 1;",
      "info" : "ExpressionStatement[49248-49302]:ExpressionStatement[49257-49311]"
    }, {
      "left" : "mRule.appendTo(buffer, value);",
      "right" : "mRule.appendTo(buffer, value);",
      "info" : "ExpressionStatement[49329-49359]:ExpressionStatement[49338-49368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49481-49535]:Block[49490-49544]"
    }, {
      "left" : "mRule.appendTo(buffer, value);",
      "right" : "mRule.appendTo(buffer, value);",
      "info" : "ExpressionStatement[49495-49525]:ExpressionStatement[49504-49534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50359-50805]:Block[50368-50814]"
    }, {
      "left" : "mTimeZone = timeZone;",
      "right" : "mTimeZone = timeZone;",
      "info" : "ExpressionStatement[50373-50394]:ExpressionStatement[50382-50403]"
    }, {
      "left" : "mTimeZoneForced = timeZoneForced;",
      "right" : "mTimeZoneForced = timeZoneForced;",
      "info" : "ExpressionStatement[50407-50440]:ExpressionStatement[50416-50449]"
    }, {
      "left" : "mLocale = locale;",
      "right" : "mLocale = locale;",
      "info" : "ExpressionStatement[50453-50470]:ExpressionStatement[50462-50479]"
    }, {
      "left" : "mStyle = style;",
      "right" : "mStyle = style;",
      "info" : "ExpressionStatement[50483-50498]:ExpressionStatement[50492-50507]"
    }, {
      "left" : "if (timeZoneForced)",
      "right" : "if (timeZoneForced)",
      "info" : "IfStatement[50512-50795]:IfStatement[50521-50804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50532-50706]:Block[50541-50715]"
    }, {
      "left" : "mStandard = getTimeZoneDisplay(timeZone, false, style, locale);",
      "right" : "mStandard = getTimeZoneDisplay(timeZone, false, style, locale);",
      "info" : "ExpressionStatement[50550-50613]:ExpressionStatement[50559-50622]"
    }, {
      "left" : "mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);",
      "right" : "mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);",
      "info" : "ExpressionStatement[50630-50692]:ExpressionStatement[50639-50701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50712-50795]:Block[50721-50804]"
    }, {
      "left" : "mStandard = null;",
      "right" : "mStandard = null;",
      "info" : "ExpressionStatement[50730-50747]:ExpressionStatement[50739-50756]"
    }, {
      "left" : "mDaylight = null;",
      "right" : "mDaylight = null;",
      "info" : "ExpressionStatement[50764-50781]:ExpressionStatement[50773-50790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50892-51150]:Block[50901-51159]"
    }, {
      "left" : "if (mTimeZoneForced)",
      "right" : "if (mTimeZoneForced)",
      "info" : "IfStatement[50906-51140]:IfStatement[50915-51149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50927-51015]:Block[50936-51024]"
    }, {
      "left" : "return Math.max(mStandard.length(), mDaylight.length());",
      "right" : "return Math.max(mStandard.length(), mDaylight.length());",
      "info" : "ReturnStatement[50945-51001]:ReturnStatement[50954-51010]"
    }, {
      "left" : "if (mStyle == TimeZone.SHORT)",
      "right" : "if (mStyle == TimeZone.SHORT)",
      "info" : "IfStatement[51021-51140]:IfStatement[51030-51149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51051-51092]:Block[51060-51101]"
    }, {
      "left" : "return 4;",
      "right" : "return 4;",
      "info" : "ReturnStatement[51069-51078]:ReturnStatement[51078-51087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51098-51140]:Block[51107-51149]"
    }, {
      "left" : "return 40;",
      "right" : "return 40;",
      "info" : "ReturnStatement[51116-51126]:ReturnStatement[51125-51135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51270-51951]:Block[51279-51960]"
    }, {
      "left" : "if (mTimeZoneForced)",
      "right" : "if (mTimeZoneForced)",
      "info" : "IfStatement[51284-51941]:IfStatement[51293-51950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51305-51548]:Block[51314-51557]"
    }, {
      "left" : "if (mTimeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0)",
      "right" : "if (mTimeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0)",
      "info" : "IfStatement[51323-51534]:IfStatement[51332-51543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51398-51463]:Block[51407-51472]"
    }, {
      "left" : "buffer.append(mDaylight);",
      "right" : "buffer.append(mDaylight);",
      "info" : "ExpressionStatement[51420-51445]:ExpressionStatement[51429-51454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51469-51534]:Block[51478-51543]"
    }, {
      "left" : "buffer.append(mStandard);",
      "right" : "buffer.append(mStandard);",
      "info" : "ExpressionStatement[51491-51516]:ExpressionStatement[51500-51525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51554-51941]:Block[51563-51950]"
    }, {
      "left" : "TimeZone timeZone = calendar.getTimeZone();",
      "right" : "TimeZone timeZone = calendar.getTimeZone();",
      "info" : "VariableDeclarationStatement[51572-51615]:VariableDeclarationStatement[51581-51624]"
    }, {
      "left" : "if (timeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0)",
      "right" : "if (timeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0)",
      "info" : "IfStatement[51632-51927]:IfStatement[51641-51936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51706-51813]:Block[51715-51822]"
    }, {
      "left" : "buffer.append(getTimeZoneDisplay(timeZone, true, mStyle, mLocale));",
      "right" : "buffer.append(getTimeZoneDisplay(timeZone, true, mStyle, mLocale));",
      "info" : "ExpressionStatement[51728-51795]:ExpressionStatement[51737-51804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51819-51927]:Block[51828-51936]"
    }, {
      "left" : "buffer.append(getTimeZoneDisplay(timeZone, false, mStyle, mLocale));",
      "right" : "buffer.append(getTimeZoneDisplay(timeZone, false, mStyle, mLocale));",
      "info" : "ExpressionStatement[51841-51909]:ExpressionStatement[51850-51918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52642-52681]:Block[52651-52690]"
    }, {
      "left" : "mColon = colon;",
      "right" : "mColon = colon;",
      "info" : "ExpressionStatement[52656-52671]:ExpressionStatement[52665-52680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52768-52801]:Block[52777-52810]"
    }, {
      "left" : "return 5;",
      "right" : "return 5;",
      "info" : "ReturnStatement[52782-52791]:ReturnStatement[52791-52800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52921-53656]:Block[52930-53665]"
    }, {
      "left" : "int offset = calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);",
      "right" : "int offset = calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);",
      "info" : "VariableDeclarationStatement[52935-53019]:VariableDeclarationStatement[52944-53028]"
    }, {
      "left" : "if (offset < 0)",
      "right" : "if (offset < 0)",
      "info" : "IfStatement[53045-53203]:IfStatement[53054-53212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53061-53146]:Block[53070-53155]"
    }, {
      "left" : "buffer.append('-');",
      "right" : "buffer.append('-');",
      "info" : "ExpressionStatement[53079-53098]:ExpressionStatement[53088-53107]"
    }, {
      "left" : "offset = -offset;",
      "right" : "offset = -offset;",
      "info" : "ExpressionStatement[53115-53132]:ExpressionStatement[53124-53141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53152-53203]:Block[53161-53212]"
    }, {
      "left" : "buffer.append('+');",
      "right" : "buffer.append('+');",
      "info" : "ExpressionStatement[53170-53189]:ExpressionStatement[53179-53198]"
    }, {
      "left" : "int hours = offset / (60 * 60 * 1000);",
      "right" : "int hours = offset / (60 * 60 * 1000);",
      "info" : "VariableDeclarationStatement[53229-53267]:VariableDeclarationStatement[53238-53276]"
    }, {
      "left" : "buffer.append((char)(hours / 10 + '0'));",
      "right" : "buffer.append((char)(hours / 10 + '0'));",
      "info" : "ExpressionStatement[53280-53320]:ExpressionStatement[53289-53329]"
    }, {
      "left" : "buffer.append((char)(hours % 10 + '0'));",
      "right" : "buffer.append((char)(hours % 10 + '0'));",
      "info" : "ExpressionStatement[53333-53373]:ExpressionStatement[53342-53382]"
    }, {
      "left" : "if (mColon)",
      "right" : "if (mColon)",
      "info" : "IfStatement[53399-53462]:IfStatement[53408-53471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53411-53462]:Block[53420-53471]"
    }, {
      "left" : "buffer.append(':');",
      "right" : "buffer.append(':');",
      "info" : "ExpressionStatement[53429-53448]:ExpressionStatement[53438-53457]"
    }, {
      "left" : "int minutes = offset / (60 * 1000) - 60 * hours;",
      "right" : "int minutes = offset / (60 * 1000) - 60 * hours;",
      "info" : "VariableDeclarationStatement[53488-53536]:VariableDeclarationStatement[53497-53545]"
    }, {
      "left" : "buffer.append((char)(minutes / 10 + '0'));",
      "right" : "buffer.append((char)(minutes / 10 + '0'));",
      "info" : "ExpressionStatement[53549-53591]:ExpressionStatement[53558-53600]"
    }, {
      "left" : "buffer.append((char)(minutes % 10 + '0'));",
      "right" : "buffer.append((char)(minutes % 10 + '0'));",
      "info" : "ExpressionStatement[53604-53646]:ExpressionStatement[53613-53655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54479-54661]:Block[54488-54670]"
    }, {
      "left" : "mTimeZone = timeZone;",
      "right" : "mTimeZone = timeZone;",
      "info" : "ExpressionStatement[54493-54514]:ExpressionStatement[54502-54523]"
    }, {
      "left" : "if (daylight)",
      "right" : "if (daylight)",
      "info" : "IfStatement[54527-54593]:IfStatement[54536-54602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54541-54593]:Block[54550-54602]"
    }, {
      "left" : "style |= 0x80000000;",
      "right" : "style |= 0x80000000;",
      "info" : "ExpressionStatement[54559-54579]:ExpressionStatement[54568-54588]"
    }, {
      "left" : "mStyle = style;",
      "right" : "mStyle = style;",
      "info" : "ExpressionStatement[54606-54621]:ExpressionStatement[54615-54630]"
    }, {
      "left" : "mLocale = locale;",
      "right" : "mLocale = locale;",
      "info" : "ExpressionStatement[54634-54651]:ExpressionStatement[54643-54660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54760-54824]:Block[54769-54833]"
    }, {
      "left" : "return mStyle * 31 + mLocale.hashCode();",
      "right" : "return mStyle * 31 + mLocale.hashCode();",
      "info" : "ReturnStatement[54774-54814]:ReturnStatement[54783-54823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54935-55358]:Block[54944-55367]"
    }, {
      "left" : "if (this == obj)",
      "right" : "if (this == obj)",
      "info" : "IfStatement[54949-55010]:IfStatement[54958-55019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54966-55010]:Block[54975-55019]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[54984-54996]:ReturnStatement[54993-55005]"
    }, {
      "left" : "if (obj instanceof TimeZoneDisplayKey)",
      "right" : "if (obj instanceof TimeZoneDisplayKey)",
      "info" : "IfStatement[55023-55322]:IfStatement[55032-55331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55062-55322]:Block[55071-55331]"
    }, {
      "left" : "TimeZoneDisplayKey other = (TimeZoneDisplayKey)obj;",
      "right" : "TimeZoneDisplayKey other = (TimeZoneDisplayKey)obj;",
      "info" : "VariableDeclarationStatement[55080-55131]:VariableDeclarationStatement[55089-55140]"
    }, {
      "left" : "return\n                    mTimeZone.equals(other.mTimeZone) &&\n                    mStyle == other.mStyle &&\n                    mLocale.equals(other.mLocale);",
      "right" : "return\n                    mTimeZone.equals(other.mTimeZone) &&\n                    mStyle == other.mStyle &&\n                    mLocale.equals(other.mLocale);",
      "info" : "ReturnStatement[55148-55308]:ReturnStatement[55157-55317]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55335-55348]:ReturnStatement[55344-55357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55979-56042]:Block[55988-56051]"
    }, {
      "left" : "mObj1 = obj1;",
      "right" : "mObj1 = obj1;",
      "info" : "ExpressionStatement[55993-56006]:ExpressionStatement[56002-56015]"
    }, {
      "left" : "mObj2 = obj2;",
      "right" : "mObj2 = obj2;",
      "info" : "ExpressionStatement[56019-56032]:ExpressionStatement[56028-56041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56153-56574]:Block[56162-56583]"
    }, {
      "left" : "if (this == obj)",
      "right" : "if (this == obj)",
      "info" : "IfStatement[56167-56228]:IfStatement[56176-56237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56184-56228]:Block[56193-56237]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[56202-56214]:ReturnStatement[56211-56223]"
    }, {
      "left" : "if (!(obj instanceof Pair))",
      "right" : "if (!(obj instanceof Pair))",
      "info" : "IfStatement[56242-56315]:IfStatement[56251-56324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56270-56315]:Block[56279-56324]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[56288-56301]:ReturnStatement[56297-56310]"
    }, {
      "left" : "Pair key = (Pair)obj;",
      "right" : "Pair key = (Pair)obj;",
      "info" : "VariableDeclarationStatement[56329-56350]:VariableDeclarationStatement[56338-56359]"
    }, {
      "left" : "return\n                (mObj1 == null ?\n                 key.mObj1 == null : mObj1.equals(key.mObj1)) &&\n                (mObj2 == null ?\n                 key.mObj2 == null : mObj2.equals(key.mObj2));",
      "right" : "return\n                (mObj1 == null ?\n                 key.mObj1 == null : mObj1.equals(key.mObj1)) &&\n                (mObj2 == null ?\n                 key.mObj2 == null : mObj2.equals(key.mObj2));",
      "info" : "ReturnStatement[56364-56564]:ReturnStatement[56373-56573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56673-56816]:Block[56682-56825]"
    }, {
      "left" : "return\n                (mObj1 == null ? 0 : mObj1.hashCode()) +\n                (mObj2 == null ? 0 : mObj2.hashCode());",
      "right" : "return\n                (mObj1 == null ? 0 : mObj1.hashCode()) +\n                (mObj2 == null ? 0 : mObj2.hashCode());",
      "info" : "ReturnStatement[56687-56806]:ReturnStatement[56696-56815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56918-56981]:Block[56927-56990]"
    }, {
      "left" : "return \"[\" + mObj1 + ':' + mObj2 + ']';",
      "right" : "return \"[\" + mObj1 + ':' + mObj2 + ']';",
      "info" : "ReturnStatement[56932-56971]:ReturnStatement[56941-56980]"
    } ]
  },
  "interFileMappings" : { }
}