{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "TypeDeclaration[923-31193]:TypeDeclaration[923-31071]"
    }, {
      "left" : "private static final long serialVersionUID = -6530173849413811929L;",
      "right" : "private static final long serialVersionUID = -6530173849413811929L;",
      "info" : "FieldDeclaration[1654-1764]:FieldDeclaration[1654-1764]"
    }, {
      "left" : "public static final Complex I = new Complex(0.0, 1.0);",
      "right" : "public static final Complex I = new Complex(0.0, 1.0);",
      "info" : "FieldDeclaration[1774-1901]:FieldDeclaration[1774-1901]"
    }, {
      "left" : "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);",
      "right" : "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);",
      "info" : "FieldDeclaration[1911-2035]:FieldDeclaration[1911-2035]"
    }, {
      "left" : "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);",
      "right" : "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);",
      "info" : "FieldDeclaration[2041-2194]:FieldDeclaration[2041-2194]"
    }, {
      "left" : "public static final Complex ONE = new Complex(1.0, 0.0);",
      "right" : "public static final Complex ONE = new Complex(1.0, 0.0);",
      "info" : "FieldDeclaration[2200-2314]:FieldDeclaration[2200-2314]"
    }, {
      "left" : "public static final Complex ZERO = new Complex(0.0, 0.0);",
      "right" : "public static final Complex ZERO = new Complex(0.0, 0.0);",
      "info" : "FieldDeclaration[2324-2439]:FieldDeclaration[2324-2439]"
    }, {
      "left" : "private final double imaginary;",
      "right" : "private final double imaginary;",
      "info" : "FieldDeclaration[2449-2524]:FieldDeclaration[2449-2524]"
    }, {
      "left" : "private final double real;",
      "right" : "private final double real;",
      "info" : "FieldDeclaration[2534-2599]:FieldDeclaration[2534-2599]"
    }, {
      "left" : "public Complex(double real, double imaginary)",
      "right" : "public Complex(double real, double imaginary)",
      "info" : "MethodDeclaration[2609-2907]:MethodDeclaration[2609-2907]"
    }, {
      "left" : "public double abs()",
      "right" : "public double abs()",
      "info" : "MethodDeclaration[2913-3926]:MethodDeclaration[2913-3926]"
    }, {
      "left" : "public Complex add(Complex rhs)",
      "right" : "public Complex add(Complex rhs)",
      "info" : "MethodDeclaration[3936-4717]:MethodDeclaration[3936-4717]"
    }, {
      "left" : "public Complex conjugate()",
      "right" : "public Complex conjugate()",
      "info" : "MethodDeclaration[4727-5467]:MethodDeclaration[4727-5467]"
    }, {
      "left" : "public Complex divide(Complex rhs)",
      "right" : "public Complex divide(Complex rhs)",
      "info" : "MethodDeclaration[5477-8074]:MethodDeclaration[5477-8074]"
    }, {
      "left" : "public boolean equals(Object other)",
      "right" : "public boolean equals(Object other)",
      "info" : "MethodDeclaration[8084-9628]:MethodDeclaration[8084-9506]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[9638-9993]:MethodDeclaration[9516-9871]"
    }, {
      "left" : "public double getImaginary()",
      "right" : "public double getImaginary()",
      "info" : "MethodDeclaration[9999-10152]:MethodDeclaration[9877-10030]"
    }, {
      "left" : "public double getReal()",
      "right" : "public double getReal()",
      "info" : "MethodDeclaration[10158-10291]:MethodDeclaration[10036-10169]"
    }, {
      "left" : "public boolean isNaN()",
      "right" : "public boolean isNaN()",
      "info" : "MethodDeclaration[10301-10621]:MethodDeclaration[10179-10499]"
    }, {
      "left" : "public boolean isInfinite()",
      "right" : "public boolean isInfinite()",
      "info" : "MethodDeclaration[10631-11166]:MethodDeclaration[10509-11044]"
    }, {
      "left" : "public Complex multiply(Complex rhs)",
      "right" : "public Complex multiply(Complex rhs)",
      "info" : "MethodDeclaration[11176-12681]:MethodDeclaration[11054-12559]"
    }, {
      "left" : "public Complex negate()",
      "right" : "public Complex negate()",
      "info" : "MethodDeclaration[12691-13120]:MethodDeclaration[12569-12998]"
    }, {
      "left" : "public Complex subtract(Complex rhs)",
      "right" : "public Complex subtract(Complex rhs)",
      "info" : "MethodDeclaration[13130-14022]:MethodDeclaration[13008-13900]"
    }, {
      "left" : "public Complex acos()",
      "right" : "public Complex acos()",
      "info" : "MethodDeclaration[14032-14763]:MethodDeclaration[13910-14641]"
    }, {
      "left" : "public Complex asin()",
      "right" : "public Complex asin()",
      "info" : "MethodDeclaration[14773-15492]:MethodDeclaration[14651-15370]"
    }, {
      "left" : "public Complex atan()",
      "right" : "public Complex atan()",
      "info" : "MethodDeclaration[15502-16260]:MethodDeclaration[15380-16138]"
    }, {
      "left" : "public Complex cos()",
      "right" : "public Complex cos()",
      "info" : "MethodDeclaration[16270-17550]:MethodDeclaration[16148-17428]"
    }, {
      "left" : "public Complex cosh()",
      "right" : "public Complex cosh()",
      "info" : "MethodDeclaration[17560-18877]:MethodDeclaration[17438-18755]"
    }, {
      "left" : "public Complex exp()",
      "right" : "public Complex exp()",
      "info" : "MethodDeclaration[18887-20197]:MethodDeclaration[18765-20075]"
    }, {
      "left" : "public Complex log()",
      "right" : "public Complex log()",
      "info" : "MethodDeclaration[20207-21659]:MethodDeclaration[20085-21537]"
    }, {
      "left" : "public Complex pow(Complex x)",
      "right" : "public Complex pow(Complex x)",
      "info" : "MethodDeclaration[21669-22524]:MethodDeclaration[21547-22402]"
    }, {
      "left" : "public Complex sin()",
      "right" : "public Complex sin()",
      "info" : "MethodDeclaration[22534-23808]:MethodDeclaration[22412-23686]"
    }, {
      "left" : "public Complex sinh()",
      "right" : "public Complex sinh()",
      "info" : "MethodDeclaration[23818-25131]:MethodDeclaration[23696-25009]"
    }, {
      "left" : "public Complex sqrt()",
      "right" : "public Complex sqrt()",
      "info" : "MethodDeclaration[25141-27047]:MethodDeclaration[25019-26925]"
    }, {
      "left" : "public Complex sqrt1z()",
      "right" : "public Complex sqrt1z()",
      "info" : "MethodDeclaration[27057-27871]:MethodDeclaration[26935-27749]"
    }, {
      "left" : "public Complex tan()",
      "right" : "public Complex tan()",
      "info" : "MethodDeclaration[27881-29353]:MethodDeclaration[27759-29231]"
    }, {
      "left" : "public Complex tanh()",
      "right" : "public Complex tanh()",
      "info" : "MethodDeclaration[29363-30841]:MethodDeclaration[29241-30719]"
    }, {
      "left" : "protected Complex createComplex(double real, double imaginary)",
      "right" : "protected Complex createComplex(double real, double imaginary)",
      "info" : "MethodDeclaration[30847-31191]:MethodDeclaration[30725-31069]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1601-1607]:Modifier[1601-1607]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1608-1613]:TYPE_DECLARATION_KIND[1608-1613]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleName[1614-1621]:SimpleName[1614-1621]"
    }, {
      "left" : "Serializable",
      "right" : "Serializable",
      "info" : "SimpleType[1633-1645]:SimpleType[1633-1645]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2775-2781]:Modifier[2775-2781]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleName[2782-2789]:SimpleName[2782-2789]"
    }, {
      "left" : "double real",
      "right" : "double real",
      "info" : "SingleVariableDeclaration[2790-2801]:SingleVariableDeclaration[2790-2801]"
    }, {
      "left" : "double imaginary",
      "right" : "double imaginary",
      "info" : "SingleVariableDeclaration[2803-2819]:SingleVariableDeclaration[2803-2819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2821-2907]:Block[2821-2907]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[2831-2839]:SuperConstructorInvocation[2831-2839]"
    }, {
      "left" : "this.real = real;",
      "right" : "this.real = real;",
      "info" : "ExpressionStatement[2848-2865]:ExpressionStatement[2848-2865]"
    }, {
      "left" : "this.imaginary = imaginary;",
      "right" : "this.imaginary = imaginary;",
      "info" : "ExpressionStatement[2874-2901]:ExpressionStatement[2874-2901]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3274-3280]:Modifier[3274-3280]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[3281-3287]:PrimitiveType[3281-3287]"
    }, {
      "left" : "abs",
      "right" : "abs",
      "info" : "SimpleName[3288-3291]:SimpleName[3288-3291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3294-3926]:Block[3294-3926]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[3304-3359]:IfStatement[3304-3359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3317-3359]:Block[3317-3359]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[3331-3349]:ReturnStatement[3331-3349]"
    }, {
      "left" : "if (isInfinite())",
      "right" : "if (isInfinite())",
      "info" : "IfStatement[3377-3451]:IfStatement[3377-3451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3395-3451]:Block[3395-3451]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[3409-3441]:ReturnStatement[3409-3441]"
    }, {
      "left" : "if (Math.abs(real) < Math.abs(imaginary))",
      "right" : "if (Math.abs(real) < Math.abs(imaginary))",
      "info" : "IfStatement[3469-3920]:IfStatement[3469-3920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3511-3715]:Block[3511-3715]"
    }, {
      "left" : "if (imaginary == 0.0)",
      "right" : "if (imaginary == 0.0)",
      "info" : "IfStatement[3525-3601]:IfStatement[3525-3601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3547-3601]:Block[3547-3601]"
    }, {
      "left" : "return Math.abs(real);",
      "right" : "return Math.abs(real);",
      "info" : "ReturnStatement[3565-3587]:ReturnStatement[3565-3587]"
    }, {
      "left" : "double q = real / imaginary;",
      "right" : "double q = real / imaginary;",
      "info" : "VariableDeclarationStatement[3614-3642]:VariableDeclarationStatement[3614-3642]"
    }, {
      "left" : "return (Math.abs(imaginary) * Math.sqrt(1 + q*q));",
      "right" : "return (Math.abs(imaginary) * Math.sqrt(1 + q*q));",
      "info" : "ReturnStatement[3655-3705]:ReturnStatement[3655-3705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3721-3920]:Block[3721-3920]"
    }, {
      "left" : "if (real == 0.0)",
      "right" : "if (real == 0.0)",
      "info" : "IfStatement[3735-3811]:IfStatement[3735-3811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3752-3811]:Block[3752-3811]"
    }, {
      "left" : "return Math.abs(imaginary);",
      "right" : "return Math.abs(imaginary);",
      "info" : "ReturnStatement[3770-3797]:ReturnStatement[3770-3797]"
    }, {
      "left" : "double q = imaginary / real;",
      "right" : "double q = imaginary / real;",
      "info" : "VariableDeclarationStatement[3824-3852]:VariableDeclarationStatement[3824-3852]"
    }, {
      "left" : "return (Math.abs(real) * Math.sqrt(1 + q*q));",
      "right" : "return (Math.abs(real) * Math.sqrt(1 + q*q));",
      "info" : "ReturnStatement[3865-3910]:ReturnStatement[3865-3910]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4579-4585]:Modifier[4579-4585]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[4586-4593]:SimpleType[4586-4593]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[4594-4597]:SimpleName[4594-4597]"
    }, {
      "left" : "Complex rhs",
      "right" : "Complex rhs",
      "info" : "SingleVariableDeclaration[4598-4609]:SingleVariableDeclaration[4598-4609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4611-4717]:Block[4611-4717]"
    }, {
      "left" : "return createComplex(real + rhs.getReal(),\n            imaginary + rhs.getImaginary());",
      "right" : "return createComplex(real + rhs.getReal(),\n            imaginary + rhs.getImaginary());",
      "info" : "ReturnStatement[4624-4711]:ReturnStatement[4624-4711]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5325-5331]:Modifier[5325-5331]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[5332-5339]:SimpleType[5332-5339]"
    }, {
      "left" : "conjugate",
      "right" : "conjugate",
      "info" : "SimpleName[5340-5349]:SimpleName[5340-5349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5352-5467]:Block[5352-5467]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[5362-5410]:IfStatement[5362-5410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5375-5410]:Block[5375-5410]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[5389-5400]:ReturnStatement[5389-5400]"
    }, {
      "left" : "return createComplex(real, -imaginary);",
      "right" : "return createComplex(real, -imaginary);",
      "info" : "ReturnStatement[5422-5461]:ReturnStatement[5422-5461]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7051-7057]:Modifier[7051-7057]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[7058-7065]:SimpleType[7058-7065]"
    }, {
      "left" : "divide",
      "right" : "divide",
      "info" : "SimpleName[7066-7072]:SimpleName[7066-7072]"
    }, {
      "left" : "Complex rhs",
      "right" : "Complex rhs",
      "info" : "SingleVariableDeclaration[7073-7084]:SingleVariableDeclaration[7073-7084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7086-8074]:Block[7086-8074]"
    }, {
      "left" : "if (isNaN() || rhs.isNaN())",
      "right" : "if (isNaN() || rhs.isNaN())",
      "info" : "IfStatement[7096-7159]:IfStatement[7096-7159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7124-7159]:Block[7124-7159]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[7138-7149]:ReturnStatement[7138-7149]"
    }, {
      "left" : "double c = rhs.getReal();",
      "right" : "double c = rhs.getReal();",
      "info" : "VariableDeclarationStatement[7169-7194]:VariableDeclarationStatement[7169-7194]"
    }, {
      "left" : "double d = rhs.getImaginary();",
      "right" : "double d = rhs.getImaginary();",
      "info" : "VariableDeclarationStatement[7203-7233]:VariableDeclarationStatement[7203-7233]"
    }, {
      "left" : "if (c == 0.0 && d == 0.0)",
      "right" : "if (c == 0.0 && d == 0.0)",
      "info" : "IfStatement[7242-7303]:IfStatement[7242-7303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7268-7303]:Block[7268-7303]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[7282-7293]:ReturnStatement[7282-7293]"
    }, {
      "left" : "if (rhs.isInfinite() && !isInfinite())",
      "right" : "if (rhs.isInfinite() && !isInfinite())",
      "info" : "IfStatement[7321-7396]:IfStatement[7321-7396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7360-7396]:Block[7360-7396]"
    }, {
      "left" : "return ZERO;",
      "right" : "return ZERO;",
      "info" : "ReturnStatement[7374-7386]:ReturnStatement[7374-7386]"
    }, {
      "left" : "if (Math.abs(c) < Math.abs(d))",
      "right" : "if (Math.abs(c) < Math.abs(d))",
      "info" : "IfStatement[7406-8068]:IfStatement[7406-8068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7437-7749]:Block[7437-7749]"
    }, {
      "left" : "if (d == 0.0)",
      "right" : "if (d == 0.0)",
      "info" : "IfStatement[7451-7539]:IfStatement[7451-7539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7465-7539]:Block[7465-7539]"
    }, {
      "left" : "return createComplex(real/c, imaginary/c);",
      "right" : "return createComplex(real/c, imaginary/c);",
      "info" : "ReturnStatement[7483-7525]:ReturnStatement[7483-7525]"
    }, {
      "left" : "double q = c / d;",
      "right" : "double q = c / d;",
      "info" : "VariableDeclarationStatement[7552-7569]:VariableDeclarationStatement[7552-7569]"
    }, {
      "left" : "double denominator = c * q + d;",
      "right" : "double denominator = c * q + d;",
      "info" : "VariableDeclarationStatement[7582-7613]:VariableDeclarationStatement[7582-7613]"
    }, {
      "left" : "return createComplex((real * q + imaginary) / denominator,\n                (imaginary * q - real) / denominator);",
      "right" : "return createComplex((real * q + imaginary) / denominator,\n                (imaginary * q - real) / denominator);",
      "info" : "ReturnStatement[7626-7739]:ReturnStatement[7626-7739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7755-8068]:Block[7755-8068]"
    }, {
      "left" : "if (c == 0.0)",
      "right" : "if (c == 0.0)",
      "info" : "IfStatement[7769-7858]:IfStatement[7769-7858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7783-7858]:Block[7783-7858]"
    }, {
      "left" : "return createComplex(imaginary/d, -real/c);",
      "right" : "return createComplex(imaginary/d, -real/c);",
      "info" : "ReturnStatement[7801-7844]:ReturnStatement[7801-7844]"
    }, {
      "left" : "double q = d / c;",
      "right" : "double q = d / c;",
      "info" : "VariableDeclarationStatement[7871-7888]:VariableDeclarationStatement[7871-7888]"
    }, {
      "left" : "double denominator = d * q + c;",
      "right" : "double denominator = d * q + c;",
      "info" : "VariableDeclarationStatement[7901-7932]:VariableDeclarationStatement[7901-7932]"
    }, {
      "left" : "return createComplex((imaginary * q + real) / denominator,\n                (imaginary - real * q) / denominator);",
      "right" : "return createComplex((imaginary * q + real) / denominator,\n                (imaginary - real * q) / denominator);",
      "info" : "ReturnStatement[7945-8058]:ReturnStatement[7945-8058]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8877-8883]:Modifier[8877-8883]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8884-8891]:PrimitiveType[8884-8891]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[8892-8898]:SimpleName[8892-8898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8913-9628]:Block[8913-9506]"
    }, {
      "left" : "boolean ret;",
      "right" : "boolean ret;",
      "info" : "VariableDeclarationStatement[8923-8935]:VariableDeclarationStatement[8923-8935]"
    }, {
      "left" : "if (this == other)",
      "right" : "if (this == other)",
      "info" : "IfStatement[8953-9595]:IfStatement[8953-9473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8972-9008]:Block[8972-9008]"
    }, {
      "left" : "ret = true;",
      "right" : "ret = true;",
      "info" : "ExpressionStatement[8987-8998]:ExpressionStatement[8987-8998]"
    }, {
      "left" : "if (other == null)",
      "right" : "if (other == null)",
      "info" : "IfStatement[9014-9595]:IfStatement[9014-9473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9033-9069]:Block[9033-9069]"
    }, {
      "left" : "ret = false;",
      "right" : "ret = false;",
      "info" : "ExpressionStatement[9047-9059]:ExpressionStatement[9047-9059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9076-9595]:Block[9076-9473]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9090-9585]:TryStatement[9090-9463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9094-9474]:Block[9094-9352]"
    }, {
      "left" : "Complex rhs = (Complex)other;",
      "right" : "Complex rhs = (Complex)other;",
      "info" : "VariableDeclarationStatement[9112-9141]:VariableDeclarationStatement[9112-9141]"
    }, {
      "left" : "if (rhs.isNaN())",
      "right" : "if (rhs.isNaN())",
      "info" : "IfStatement[9158-9460]:IfStatement[9158-9338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9175-9234]:Block[9175-9234]"
    }, {
      "left" : "ret = this.isNaN();",
      "right" : "ret = this.isNaN();",
      "info" : "ExpressionStatement[9197-9216]:ExpressionStatement[9197-9216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9505-9585]:Block[9383-9463]"
    }, {
      "left" : "ret = false;",
      "right" : "ret = false;",
      "info" : "ExpressionStatement[9559-9571]:ExpressionStatement[9437-9449]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[9611-9622]:ReturnStatement[9489-9500]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9819-9825]:Modifier[9697-9703]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[9826-9829]:PrimitiveType[9704-9707]"
    }, {
      "left" : "hashCode",
      "right" : "hashCode",
      "info" : "SimpleName[9830-9838]:SimpleName[9708-9716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9841-9993]:Block[9719-9871]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[9851-9897]:IfStatement[9729-9775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9864-9897]:Block[9742-9775]"
    }, {
      "left" : "return 7;",
      "right" : "return 7;",
      "info" : "ReturnStatement[9878-9887]:ReturnStatement[9756-9765]"
    }, {
      "left" : "return 37 * (17 * MathUtils.hash(imaginary) + \n            MathUtils.hash(real));",
      "right" : "return 37 * (17 * MathUtils.hash(imaginary) + \n            MathUtils.hash(real));",
      "info" : "ReturnStatement[9906-9987]:ReturnStatement[9784-9865]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10090-10096]:Modifier[9968-9974]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[10097-10103]:PrimitiveType[9975-9981]"
    }, {
      "left" : "getImaginary",
      "right" : "getImaginary",
      "info" : "SimpleName[10104-10116]:SimpleName[9982-9994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10119-10152]:Block[9997-10030]"
    }, {
      "left" : "return imaginary;",
      "right" : "return imaginary;",
      "info" : "ReturnStatement[10129-10146]:ReturnStatement[10007-10024]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10239-10245]:Modifier[10117-10123]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[10246-10252]:PrimitiveType[10124-10130]"
    }, {
      "left" : "getReal",
      "right" : "getReal",
      "info" : "SimpleName[10253-10260]:SimpleName[10131-10138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10263-10291]:Block[10141-10169]"
    }, {
      "left" : "return real;",
      "right" : "return real;",
      "info" : "ReturnStatement[10273-10285]:ReturnStatement[10151-10163]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10521-10527]:Modifier[10399-10405]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10528-10535]:PrimitiveType[10406-10413]"
    }, {
      "left" : "isNaN",
      "right" : "isNaN",
      "info" : "SimpleName[10536-10541]:SimpleName[10414-10419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10544-10621]:Block[10422-10499]"
    }, {
      "left" : "return Double.isNaN(real) || Double.isNaN(imaginary);",
      "right" : "return Double.isNaN(real) || Double.isNaN(imaginary);",
      "info" : "ReturnStatement[10554-10607]:ReturnStatement[10432-10485]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11028-11034]:Modifier[10906-10912]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11035-11042]:PrimitiveType[10913-10920]"
    }, {
      "left" : "isInfinite",
      "right" : "isInfinite",
      "info" : "SimpleName[11043-11053]:SimpleName[10921-10931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11056-11166]:Block[10934-11044]"
    }, {
      "left" : "return !isNaN() && \n        (Double.isInfinite(real) || Double.isInfinite(imaginary));",
      "right" : "return !isNaN() && \n        (Double.isInfinite(real) || Double.isInfinite(imaginary));",
      "info" : "ReturnStatement[11066-11152]:ReturnStatement[10944-11030]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12166-12172]:Modifier[12044-12050]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[12173-12180]:SimpleType[12051-12058]"
    }, {
      "left" : "multiply",
      "right" : "multiply",
      "info" : "SimpleName[12181-12189]:SimpleName[12059-12067]"
    }, {
      "left" : "Complex rhs",
      "right" : "Complex rhs",
      "info" : "SingleVariableDeclaration[12190-12201]:SingleVariableDeclaration[12068-12079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12203-12681]:Block[12081-12559]"
    }, {
      "left" : "if (isNaN() || rhs.isNaN())",
      "right" : "if (isNaN() || rhs.isNaN())",
      "info" : "IfStatement[12213-12276]:IfStatement[12091-12154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12241-12276]:Block[12119-12154]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[12255-12266]:ReturnStatement[12133-12144]"
    }, {
      "left" : "if (Double.isInfinite(real) || Double.isInfinite(imaginary) ||\n            Double.isInfinite(rhs.real)|| Double.isInfinite(rhs.imaginary))",
      "right" : "if (Double.isInfinite(real) || Double.isInfinite(imaginary) ||\n            Double.isInfinite(rhs.real)|| Double.isInfinite(rhs.imaginary))",
      "info" : "IfStatement[12285-12539]:IfStatement[12163-12417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12424-12539]:Block[12302-12417]"
    }, {
      "left" : "return INF;",
      "right" : "return INF;",
      "info" : "ReturnStatement[12518-12529]:ReturnStatement[12396-12407]"
    }, {
      "left" : "return createComplex(real * rhs.real - imaginary * rhs.imaginary,\n                real * rhs.imaginary + imaginary * rhs.real);",
      "right" : "return createComplex(real * rhs.real - imaginary * rhs.imaginary,\n                real * rhs.imaginary + imaginary * rhs.real);",
      "info" : "ReturnStatement[12548-12675]:ReturnStatement[12426-12553]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12974-12980]:Modifier[12852-12858]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[12981-12988]:SimpleType[12859-12866]"
    }, {
      "left" : "negate",
      "right" : "negate",
      "info" : "SimpleName[12989-12995]:SimpleName[12867-12873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12998-13120]:Block[12876-12998]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[13008-13056]:IfStatement[12886-12934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13021-13056]:Block[12899-12934]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[13035-13046]:ReturnStatement[12913-12924]"
    }, {
      "left" : "return createComplex(-real, -imaginary);",
      "right" : "return createComplex(-real, -imaginary);",
      "info" : "ReturnStatement[13074-13114]:ReturnStatement[12952-12992]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13801-13807]:Modifier[13679-13685]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[13808-13815]:SimpleType[13686-13693]"
    }, {
      "left" : "subtract",
      "right" : "subtract",
      "info" : "SimpleName[13816-13824]:SimpleName[13694-13702]"
    }, {
      "left" : "Complex rhs",
      "right" : "Complex rhs",
      "info" : "SingleVariableDeclaration[13825-13836]:SingleVariableDeclaration[13703-13714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13838-14022]:Block[13716-13900]"
    }, {
      "left" : "if (isNaN() || rhs.isNaN())",
      "right" : "if (isNaN() || rhs.isNaN())",
      "info" : "IfStatement[13848-13911]:IfStatement[13726-13789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13876-13911]:Block[13754-13789]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[13890-13901]:ReturnStatement[13768-13779]"
    }, {
      "left" : "return createComplex(real - rhs.getReal(),\n            imaginary - rhs.getImaginary());",
      "right" : "return createComplex(real - rhs.getReal(),\n            imaginary - rhs.getImaginary());",
      "info" : "ReturnStatement[13929-14016]:ReturnStatement[13807-13894]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14558-14564]:Modifier[14436-14442]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[14565-14572]:SimpleType[14443-14450]"
    }, {
      "left" : "acos",
      "right" : "acos",
      "info" : "SimpleName[14573-14577]:SimpleName[14451-14455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14580-14763]:Block[14458-14641]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[14590-14646]:IfStatement[14468-14524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14603-14646]:Block[14481-14524]"
    }, {
      "left" : "return Complex.NaN;",
      "right" : "return Complex.NaN;",
      "info" : "ReturnStatement[14617-14636]:ReturnStatement[14495-14514]"
    }, {
      "left" : "return this.add(this.sqrt1z().multiply(Complex.I)).log()\n              .multiply(Complex.I.negate());",
      "right" : "return this.add(this.sqrt1z().multiply(Complex.I)).log()\n              .multiply(Complex.I.negate());",
      "info" : "ReturnStatement[14656-14757]:ReturnStatement[14534-14635]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15292-15298]:Modifier[15170-15176]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[15299-15306]:SimpleType[15177-15184]"
    }, {
      "left" : "asin",
      "right" : "asin",
      "info" : "SimpleName[15307-15311]:SimpleName[15185-15189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15314-15492]:Block[15192-15370]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[15324-15380]:IfStatement[15202-15258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15337-15380]:Block[15215-15258]"
    }, {
      "left" : "return Complex.NaN;",
      "right" : "return Complex.NaN;",
      "info" : "ReturnStatement[15351-15370]:ReturnStatement[15229-15248]"
    }, {
      "left" : "return sqrt1z().add(this.multiply(Complex.I)).log()\n              .multiply(Complex.I.negate());",
      "right" : "return sqrt1z().add(this.multiply(Complex.I)).log()\n              .multiply(Complex.I.negate());",
      "info" : "ReturnStatement[15390-15486]:ReturnStatement[15268-15364]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16017-16023]:Modifier[15895-15901]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[16024-16031]:SimpleType[15902-15909]"
    }, {
      "left" : "atan",
      "right" : "atan",
      "info" : "SimpleName[16032-16036]:SimpleName[15910-15914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16039-16260]:Block[15917-16138]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[16049-16105]:IfStatement[15927-15983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16062-16105]:Block[15940-15983]"
    }, {
      "left" : "return Complex.NaN;",
      "right" : "return Complex.NaN;",
      "info" : "ReturnStatement[16076-16095]:ReturnStatement[15954-15973]"
    }, {
      "left" : "return this.add(Complex.I).divide(Complex.I.subtract(this)).log()\n            .multiply(Complex.I.divide(createComplex(2.0, 0.0)));",
      "right" : "return this.add(Complex.I).divide(Complex.I.subtract(this)).log()\n            .multiply(Complex.I.divide(createComplex(2.0, 0.0)));",
      "info" : "ReturnStatement[16123-16254]:ReturnStatement[16001-16132]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17317-17323]:Modifier[17195-17201]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[17324-17331]:SimpleType[17202-17209]"
    }, {
      "left" : "cos",
      "right" : "cos",
      "info" : "SimpleName[17332-17335]:SimpleName[17210-17213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17338-17550]:Block[17216-17428]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[17348-17404]:IfStatement[17226-17282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17361-17404]:Block[17239-17282]"
    }, {
      "left" : "return Complex.NaN;",
      "right" : "return Complex.NaN;",
      "info" : "ReturnStatement[17375-17394]:ReturnStatement[17253-17272]"
    }, {
      "left" : "return createComplex(Math.cos(real) * MathUtils.cosh(imaginary),\n            -Math.sin(real) * MathUtils.sinh(imaginary));",
      "right" : "return createComplex(Math.cos(real) * MathUtils.cosh(imaginary),\n            -Math.sin(real) * MathUtils.sinh(imaginary));",
      "info" : "ReturnStatement[17422-17544]:ReturnStatement[17300-17422]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18644-18650]:Modifier[18522-18528]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[18651-18658]:SimpleType[18529-18536]"
    }, {
      "left" : "cosh",
      "right" : "cosh",
      "info" : "SimpleName[18659-18663]:SimpleName[18537-18541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18666-18877]:Block[18544-18755]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[18676-18732]:IfStatement[18554-18610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18689-18732]:Block[18567-18610]"
    }, {
      "left" : "return Complex.NaN;",
      "right" : "return Complex.NaN;",
      "info" : "ReturnStatement[18703-18722]:ReturnStatement[18581-18600]"
    }, {
      "left" : "return createComplex(MathUtils.cosh(real) * Math.cos(imaginary),\n            MathUtils.sinh(real) * Math.sin(imaginary));",
      "right" : "return createComplex(MathUtils.cosh(real) * Math.cos(imaginary),\n            MathUtils.sinh(real) * Math.sin(imaginary));",
      "info" : "ReturnStatement[18750-18871]:ReturnStatement[18628-18749]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19961-19967]:Modifier[19839-19845]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[19968-19975]:SimpleType[19846-19853]"
    }, {
      "left" : "exp",
      "right" : "exp",
      "info" : "SimpleName[19976-19979]:SimpleName[19854-19857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19982-20197]:Block[19860-20075]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[19992-20048]:IfStatement[19870-19926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20005-20048]:Block[19883-19926]"
    }, {
      "left" : "return Complex.NaN;",
      "right" : "return Complex.NaN;",
      "info" : "ReturnStatement[20019-20038]:ReturnStatement[19897-19916]"
    }, {
      "left" : "double expReal = Math.exp(real);",
      "right" : "double expReal = Math.exp(real);",
      "info" : "VariableDeclarationStatement[20066-20098]:VariableDeclarationStatement[19944-19976]"
    }, {
      "left" : "return createComplex(expReal *  Math.cos(imaginary), expReal * Math.sin(imaginary));",
      "right" : "return createComplex(expReal *  Math.cos(imaginary), expReal * Math.sin(imaginary));",
      "info" : "ReturnStatement[20107-20191]:ReturnStatement[19985-20069]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21469-21475]:Modifier[21347-21353]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[21476-21483]:SimpleType[21354-21361]"
    }, {
      "left" : "log",
      "right" : "log",
      "info" : "SimpleName[21484-21487]:SimpleName[21362-21365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21490-21659]:Block[21368-21537]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[21500-21556]:IfStatement[21378-21434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21513-21556]:Block[21391-21434]"
    }, {
      "left" : "return Complex.NaN;",
      "right" : "return Complex.NaN;",
      "info" : "ReturnStatement[21527-21546]:ReturnStatement[21405-21424]"
    }, {
      "left" : "return createComplex(Math.log(abs()),\n            Math.atan2(imaginary, real));",
      "right" : "return createComplex(Math.log(abs()),\n            Math.atan2(imaginary, real));",
      "info" : "ReturnStatement[21566-21645]:ReturnStatement[21444-21523]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22361-22367]:Modifier[22239-22245]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[22368-22375]:SimpleType[22246-22253]"
    }, {
      "left" : "pow",
      "right" : "pow",
      "info" : "SimpleName[22376-22379]:SimpleName[22254-22257]"
    }, {
      "left" : "Complex x",
      "right" : "Complex x",
      "info" : "SingleVariableDeclaration[22380-22389]:SingleVariableDeclaration[22258-22267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22391-22524]:Block[22269-22402]"
    }, {
      "left" : "if (x == null)",
      "right" : "if (x == null)",
      "info" : "IfStatement[22401-22473]:IfStatement[22279-22351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22416-22473]:Block[22294-22351]"
    }, {
      "left" : "throw new NullPointerException();",
      "right" : "throw new NullPointerException();",
      "info" : "ThrowStatement[22430-22463]:ThrowStatement[22308-22341]"
    }, {
      "left" : "return this.log().multiply(x).exp();",
      "right" : "return this.log().multiply(x).exp();",
      "info" : "ReturnStatement[22482-22518]:ReturnStatement[22360-22396]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23576-23582]:Modifier[23454-23460]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[23583-23590]:SimpleType[23461-23468]"
    }, {
      "left" : "sin",
      "right" : "sin",
      "info" : "SimpleName[23591-23594]:SimpleName[23469-23472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23597-23808]:Block[23475-23686]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[23607-23663]:IfStatement[23485-23541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23620-23663]:Block[23498-23541]"
    }, {
      "left" : "return Complex.NaN;",
      "right" : "return Complex.NaN;",
      "info" : "ReturnStatement[23634-23653]:ReturnStatement[23512-23531]"
    }, {
      "left" : "return createComplex(Math.sin(real) * MathUtils.cosh(imaginary),\n            Math.cos(real) * MathUtils.sinh(imaginary));",
      "right" : "return createComplex(Math.sin(real) * MathUtils.cosh(imaginary),\n            Math.cos(real) * MathUtils.sinh(imaginary));",
      "info" : "ReturnStatement[23681-23802]:ReturnStatement[23559-23680]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24898-24904]:Modifier[24776-24782]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[24905-24912]:SimpleType[24783-24790]"
    }, {
      "left" : "sinh",
      "right" : "sinh",
      "info" : "SimpleName[24913-24917]:SimpleName[24791-24795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24920-25131]:Block[24798-25009]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[24930-24986]:IfStatement[24808-24864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24943-24986]:Block[24821-24864]"
    }, {
      "left" : "return Complex.NaN;",
      "right" : "return Complex.NaN;",
      "info" : "ReturnStatement[24957-24976]:ReturnStatement[24835-24854]"
    }, {
      "left" : "return createComplex(MathUtils.sinh(real) * Math.cos(imaginary),\n            MathUtils.cosh(real) * Math.sin(imaginary));",
      "right" : "return createComplex(MathUtils.sinh(real) * Math.cos(imaginary),\n            MathUtils.cosh(real) * Math.sin(imaginary));",
      "info" : "ReturnStatement[25004-25125]:ReturnStatement[24882-25003]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26539-26545]:Modifier[26417-26423]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[26546-26553]:SimpleType[26424-26431]"
    }, {
      "left" : "sqrt",
      "right" : "sqrt",
      "info" : "SimpleName[26554-26558]:SimpleName[26432-26436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26561-27047]:Block[26439-26925]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[26571-26627]:IfStatement[26449-26505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26584-26627]:Block[26462-26505]"
    }, {
      "left" : "return Complex.NaN;",
      "right" : "return Complex.NaN;",
      "info" : "ReturnStatement[26598-26617]:ReturnStatement[26476-26495]"
    }, {
      "left" : "if (real == 0.0 && imaginary == 0.0)",
      "right" : "if (real == 0.0 && imaginary == 0.0)",
      "info" : "IfStatement[26645-26737]:IfStatement[26523-26615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26682-26737]:Block[26560-26615]"
    }, {
      "left" : "return createComplex(0.0, 0.0);",
      "right" : "return createComplex(0.0, 0.0);",
      "info" : "ReturnStatement[26696-26727]:ReturnStatement[26574-26605]"
    }, {
      "left" : "double t = Math.sqrt((Math.abs(real) + abs()) / 2.0);",
      "right" : "double t = Math.sqrt((Math.abs(real) + abs()) / 2.0);",
      "info" : "VariableDeclarationStatement[26755-26808]:VariableDeclarationStatement[26633-26686]"
    }, {
      "left" : "if (real >= 0.0)",
      "right" : "if (real >= 0.0)",
      "info" : "IfStatement[26817-27041]:IfStatement[26695-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26834-26905]:Block[26712-26783]"
    }, {
      "left" : "return createComplex(t, imaginary / (2.0 * t));",
      "right" : "return createComplex(t, imaginary / (2.0 * t));",
      "info" : "ReturnStatement[26848-26895]:ReturnStatement[26726-26773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26911-27041]:Block[26789-26919]"
    }, {
      "left" : "return createComplex(Math.abs(imaginary) / (2.0 * t),\n                MathUtils.indicator(imaginary) * t);",
      "right" : "return createComplex(Math.abs(imaginary) / (2.0 * t),\n                MathUtils.indicator(imaginary) * t);",
      "info" : "ReturnStatement[26925-27031]:ReturnStatement[26803-26909]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27763-27769]:Modifier[27641-27647]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[27770-27777]:SimpleType[27648-27655]"
    }, {
      "left" : "sqrt1z",
      "right" : "sqrt1z",
      "info" : "SimpleName[27778-27784]:SimpleName[27656-27662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27787-27871]:Block[27665-27749]"
    }, {
      "left" : "return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();",
      "right" : "return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();",
      "info" : "ReturnStatement[27797-27865]:ReturnStatement[27675-27743]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29014-29020]:Modifier[28892-28898]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[29021-29028]:SimpleType[28899-28906]"
    }, {
      "left" : "tan",
      "right" : "tan",
      "info" : "SimpleName[29029-29032]:SimpleName[28907-28910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29035-29353]:Block[28913-29231]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[29045-29101]:IfStatement[28923-28979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29058-29101]:Block[28936-28979]"
    }, {
      "left" : "return Complex.NaN;",
      "right" : "return Complex.NaN;",
      "info" : "ReturnStatement[29072-29091]:ReturnStatement[28950-28969]"
    }, {
      "left" : "double real2 = 2.0 * real;",
      "right" : "double real2 = 2.0 * real;",
      "info" : "VariableDeclarationStatement[29119-29145]:VariableDeclarationStatement[28997-29023]"
    }, {
      "left" : "double imaginary2 = 2.0 * imaginary;",
      "right" : "double imaginary2 = 2.0 * imaginary;",
      "info" : "VariableDeclarationStatement[29154-29190]:VariableDeclarationStatement[29032-29068]"
    }, {
      "left" : "double d = Math.cos(real2) + MathUtils.cosh(imaginary2);",
      "right" : "double d = Math.cos(real2) + MathUtils.cosh(imaginary2);",
      "info" : "VariableDeclarationStatement[29199-29255]:VariableDeclarationStatement[29077-29133]"
    }, {
      "left" : "return createComplex(Math.sin(real2) / d, MathUtils.sinh(imaginary2) / d);",
      "right" : "return createComplex(Math.sin(real2) / d, MathUtils.sinh(imaginary2) / d);",
      "info" : "ReturnStatement[29273-29347]:ReturnStatement[29151-29225]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30501-30507]:Modifier[30379-30385]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[30508-30515]:SimpleType[30386-30393]"
    }, {
      "left" : "tanh",
      "right" : "tanh",
      "info" : "SimpleName[30516-30520]:SimpleName[30394-30398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30523-30841]:Block[30401-30719]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[30533-30589]:IfStatement[30411-30467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30546-30589]:Block[30424-30467]"
    }, {
      "left" : "return Complex.NaN;",
      "right" : "return Complex.NaN;",
      "info" : "ReturnStatement[30560-30579]:ReturnStatement[30438-30457]"
    }, {
      "left" : "double real2 = 2.0 * real;",
      "right" : "double real2 = 2.0 * real;",
      "info" : "VariableDeclarationStatement[30607-30633]:VariableDeclarationStatement[30485-30511]"
    }, {
      "left" : "double imaginary2 = 2.0 * imaginary;",
      "right" : "double imaginary2 = 2.0 * imaginary;",
      "info" : "VariableDeclarationStatement[30642-30678]:VariableDeclarationStatement[30520-30556]"
    }, {
      "left" : "double d = MathUtils.cosh(real2) + Math.cos(imaginary2);",
      "right" : "double d = MathUtils.cosh(real2) + Math.cos(imaginary2);",
      "info" : "VariableDeclarationStatement[30687-30743]:VariableDeclarationStatement[30565-30621]"
    }, {
      "left" : "return createComplex(MathUtils.sinh(real2) / d, Math.sin(imaginary2) / d);",
      "right" : "return createComplex(MathUtils.sinh(real2) / d, Math.sin(imaginary2) / d);",
      "info" : "ReturnStatement[30761-30835]:ReturnStatement[30639-30713]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[31076-31085]:Modifier[30954-30963]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[31086-31093]:SimpleType[30964-30971]"
    }, {
      "left" : "createComplex",
      "right" : "createComplex",
      "info" : "SimpleName[31094-31107]:SimpleName[30972-30985]"
    }, {
      "left" : "double real",
      "right" : "double real",
      "info" : "SingleVariableDeclaration[31108-31119]:SingleVariableDeclaration[30986-30997]"
    }, {
      "left" : "double imaginary",
      "right" : "double imaginary",
      "info" : "SingleVariableDeclaration[31121-31137]:SingleVariableDeclaration[30999-31015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31139-31191]:Block[31017-31069]"
    }, {
      "left" : "return new Complex(real, imaginary);",
      "right" : "return new Complex(real, imaginary);",
      "info" : "ReturnStatement[31149-31185]:ReturnStatement[31027-31063]"
    } ]
  },
  "interFileMappings" : { }
}