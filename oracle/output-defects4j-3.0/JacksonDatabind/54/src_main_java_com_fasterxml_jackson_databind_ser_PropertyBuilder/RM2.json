{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "PropertyBuilder",
      "right" : "PropertyBuilder",
      "info" : "TypeDeclaration[365-14452]:TypeDeclaration[365-14448]"
    }, {
      "left" : "private final static Object NO_DEFAULT_MARKER = Boolean.FALSE;",
      "right" : "private final static Object NO_DEFAULT_MARKER = Boolean.FALSE;",
      "info" : "FieldDeclaration[585-647]:FieldDeclaration[585-647]"
    }, {
      "left" : "final protected SerializationConfig _config;",
      "right" : "final protected SerializationConfig _config;",
      "info" : "FieldDeclaration[657-701]:FieldDeclaration[657-701]"
    }, {
      "left" : "final protected BeanDescription _beanDesc;",
      "right" : "final protected BeanDescription _beanDesc;",
      "info" : "FieldDeclaration[706-748]:FieldDeclaration[706-748]"
    }, {
      "left" : "final protected JsonInclude.Value _defaultInclusion;",
      "right" : "final protected JsonInclude.Value _defaultInclusion;",
      "info" : "FieldDeclaration[754-972]:FieldDeclaration[754-972]"
    }, {
      "left" : "final protected AnnotationIntrospector _annotationIntrospector;",
      "right" : "final protected AnnotationIntrospector _annotationIntrospector;",
      "info" : "FieldDeclaration[978-1041]:FieldDeclaration[978-1041]"
    }, {
      "left" : "protected Object _defaultBean;",
      "right" : "protected Object _defaultBean;",
      "info" : "FieldDeclaration[1047-1485]:FieldDeclaration[1047-1485]"
    }, {
      "left" : "public PropertyBuilder(SerializationConfig config, BeanDescription beanDesc)",
      "right" : "public PropertyBuilder(SerializationConfig config, BeanDescription beanDesc)",
      "info" : "MethodDeclaration[1491-1844]:MethodDeclaration[1491-1844]"
    }, {
      "left" : "public Annotations getClassAnnotations()",
      "right" : "public Annotations getClassAnnotations()",
      "info" : "MethodDeclaration[2012-2108]:MethodDeclaration[2012-2108]"
    }, {
      "left" : "protected BeanPropertyWriter buildWriter(SerializerProvider prov,\n            BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser,\n            TypeSerializer typeSer, TypeSerializer contentTypeSer,\n            AnnotatedMember am, boolean defaultUseStaticTyping)\n        throws JsonMappingException",
      "right" : "protected BeanPropertyWriter buildWriter(SerializerProvider prov,\n            BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser,\n            TypeSerializer typeSer, TypeSerializer contentTypeSer,\n            AnnotatedMember am, boolean defaultUseStaticTyping)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[2114-7480]:MethodDeclaration[2114-7476]"
    }, {
      "left" : "protected JavaType findSerializationType(Annotated a, boolean useStaticTyping, JavaType declaredType)\n        throws JsonMappingException",
      "right" : "protected JavaType findSerializationType(Annotated a, boolean useStaticTyping, JavaType declaredType)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[7671-10299]:MethodDeclaration[7667-10295]"
    }, {
      "left" : "protected Object getDefaultBean()",
      "right" : "protected Object getDefaultBean()",
      "info" : "MethodDeclaration[10498-11485]:MethodDeclaration[10494-11481]"
    }, {
      "left" : "protected Object getPropertyDefaultValue(String name, AnnotatedMember member,\n            JavaType type)",
      "right" : "protected Object getPropertyDefaultValue(String name, AnnotatedMember member,\n            JavaType type)",
      "info" : "MethodDeclaration[11491-12486]:MethodDeclaration[11487-12482]"
    }, {
      "left" : "protected Object getDefaultValue(JavaType type)",
      "right" : "protected Object getDefaultValue(JavaType type)",
      "info" : "MethodDeclaration[12492-13789]:MethodDeclaration[12488-13785]"
    }, {
      "left" : "protected Object _throwWrapped(Exception e, String propName, Object defaultBean)",
      "right" : "protected Object _throwWrapped(Exception e, String propName, Object defaultBean)",
      "info" : "MethodDeclaration[13992-14450]:MethodDeclaration[13988-14446]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[532-538]:Modifier[532-538]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[539-544]:TYPE_DECLARATION_KIND[539-544]"
    }, {
      "left" : "PropertyBuilder",
      "right" : "PropertyBuilder",
      "info" : "SimpleName[545-560]:SimpleName[545-560]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1491-1497]:Modifier[1491-1497]"
    }, {
      "left" : "PropertyBuilder",
      "right" : "PropertyBuilder",
      "info" : "SimpleName[1498-1513]:SimpleName[1498-1513]"
    }, {
      "left" : "SerializationConfig config",
      "right" : "SerializationConfig config",
      "info" : "SingleVariableDeclaration[1514-1540]:SingleVariableDeclaration[1514-1540]"
    }, {
      "left" : "BeanDescription beanDesc",
      "right" : "BeanDescription beanDesc",
      "info" : "SingleVariableDeclaration[1542-1566]:SingleVariableDeclaration[1542-1566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1572-1844]:Block[1572-1844]"
    }, {
      "left" : "_config = config;",
      "right" : "_config = config;",
      "info" : "ExpressionStatement[1582-1599]:ExpressionStatement[1582-1599]"
    }, {
      "left" : "_beanDesc = beanDesc;",
      "right" : "_beanDesc = beanDesc;",
      "info" : "ExpressionStatement[1608-1629]:ExpressionStatement[1608-1629]"
    }, {
      "left" : "_defaultInclusion = beanDesc.findPropertyInclusion(\n                config.getDefaultPropertyInclusion(beanDesc.getBeanClass()));",
      "right" : "_defaultInclusion = beanDesc.findPropertyInclusion(\n                config.getDefaultPropertyInclusion(beanDesc.getBeanClass()));",
      "info" : "ExpressionStatement[1638-1767]:ExpressionStatement[1638-1767]"
    }, {
      "left" : "_annotationIntrospector = _config.getAnnotationIntrospector();",
      "right" : "_annotationIntrospector = _config.getAnnotationIntrospector();",
      "info" : "ExpressionStatement[1776-1838]:ExpressionStatement[1776-1838]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2012-2018]:Modifier[2012-2018]"
    }, {
      "left" : "Annotations",
      "right" : "Annotations",
      "info" : "SimpleType[2019-2030]:SimpleType[2019-2030]"
    }, {
      "left" : "getClassAnnotations",
      "right" : "getClassAnnotations",
      "info" : "SimpleName[2031-2050]:SimpleName[2031-2050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2053-2108]:Block[2053-2108]"
    }, {
      "left" : "return _beanDesc.getClassAnnotations();",
      "right" : "return _beanDesc.getClassAnnotations();",
      "info" : "ReturnStatement[2063-2102]:ReturnStatement[2063-2102]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[2344-2353]:Modifier[2344-2353]"
    }, {
      "left" : "buildWriter",
      "right" : "buildWriter",
      "info" : "SimpleName[2373-2384]:SimpleName[2373-2384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2671-7480]:Block[2671-7476]"
    }, {
      "left" : "JavaType serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType);",
      "right" : "JavaType serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType);",
      "info" : "VariableDeclarationStatement[2776-2869]:VariableDeclarationStatement[2776-2869]"
    }, {
      "left" : "if (contentTypeSer != null)",
      "right" : "if (contentTypeSer != null)",
      "info" : "IfStatement[2976-4053]:IfStatement[2976-4053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3004-4053]:Block[3004-4053]"
    }, {
      "left" : "if (serializationType == null)",
      "right" : "if (serializationType == null)",
      "info" : "IfStatement[3265-3459]:IfStatement[3265-3459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3296-3459]:Block[3296-3459]"
    }, {
      "left" : "serializationType = declaredType;",
      "right" : "serializationType = declaredType;",
      "info" : "ExpressionStatement[3412-3445]:ExpressionStatement[3412-3445]"
    }, {
      "left" : "JavaType ct = serializationType.getContentType();",
      "right" : "JavaType ct = serializationType.getContentType();",
      "info" : "VariableDeclarationStatement[3472-3521]:VariableDeclarationStatement[3472-3521]"
    }, {
      "left" : "if (ct == null)",
      "right" : "if (ct == null)",
      "info" : "IfStatement[3620-3900]:IfStatement[3620-3900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3636-3900]:Block[3636-3900]"
    }, {
      "left" : "throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property '\"\n                        +propDef.getName()+\"' (of type \"+_beanDesc.getType()+\"); serialization type \"+serializationType+\" has no content\");",
      "right" : "throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property '\"\n                        +propDef.getName()+\"' (of type \"+_beanDesc.getType()+\"); serialization type \"+serializationType+\" has no content\");",
      "info" : "ThrowStatement[3654-3886]:ThrowStatement[3654-3886]"
    }, {
      "left" : "serializationType = serializationType.withContentTypeHandler(contentTypeSer);",
      "right" : "serializationType = serializationType.withContentTypeHandler(contentTypeSer);",
      "info" : "ExpressionStatement[3913-3990]:ExpressionStatement[3913-3990]"
    }, {
      "left" : "ct = serializationType.getContentType();",
      "right" : "ct = serializationType.getContentType();",
      "info" : "ExpressionStatement[4003-4043]:ExpressionStatement[4003-4043]"
    }, {
      "left" : "Object valueToSuppress = null;",
      "right" : "Object valueToSuppress = null;",
      "info" : "VariableDeclarationStatement[4071-4101]:VariableDeclarationStatement[4071-4101]"
    }, {
      "left" : "boolean suppressNulls = false;",
      "right" : "boolean suppressNulls = false;",
      "info" : "VariableDeclarationStatement[4110-4140]:VariableDeclarationStatement[4110-4140]"
    }, {
      "left" : "JsonInclude.Value inclV = _defaultInclusion.withOverrides(propDef.findInclusion());",
      "right" : "JsonInclude.Value inclV = _defaultInclusion.withOverrides(propDef.findInclusion());",
      "info" : "VariableDeclarationStatement[4150-4233]:VariableDeclarationStatement[4150-4233]"
    }, {
      "left" : "JsonInclude.Include inclusion = inclV.getValueInclusion();",
      "right" : "JsonInclude.Include inclusion = inclV.getValueInclusion();",
      "info" : "VariableDeclarationStatement[4242-4300]:VariableDeclarationStatement[4242-4300]"
    }, {
      "left" : "if (inclusion == JsonInclude.Include.USE_DEFAULTS)",
      "right" : "if (inclusion == JsonInclude.Include.USE_DEFAULTS)",
      "info" : "IfStatement[4309-4450]:IfStatement[4309-4450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4360-4450]:Block[4360-4450]"
    }, {
      "left" : "inclusion = JsonInclude.Include.ALWAYS;",
      "right" : "inclusion = JsonInclude.Include.ALWAYS;",
      "info" : "ExpressionStatement[4401-4440]:ExpressionStatement[4401-4440]"
    }, {
      "left" : "JavaType actualType = (serializationType == null) ? declaredType : serializationType;",
      "right" : "JavaType actualType = (serializationType == null) ? declaredType : serializationType;",
      "info" : "VariableDeclarationStatement[4552-4637]:VariableDeclarationStatement[4552-4637]"
    }, {
      "left" : "switch (inclusion) {\n        case NON_DEFAULT:\n            // 11-Nov-2015, tatu: This is tricky because semantics differ between cases,\n            //    so that if enclosing class has this, we may need to values of property,\n            //    whereas for global defaults OR per-property overrides, we have more\n            //    static definition. Sigh.\n            // First: case of class specifying it; try to find POJO property defaults\n            if (_defaultInclusion.getValueInclusion() == JsonInclude.Include.NON_DEFAULT) {\n                valueToSuppress = getPropertyDefaultValue(propDef.getName(), am, actualType);\n            } else {\n                valueToSuppress = getDefaultValue(actualType);\n            }\n            if (valueToSuppress == null) {\n                suppressNulls = true;\n            } else {\n                if (valueToSuppress.getClass().isArray()) {\n                    valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);\n                }\n            }\n\n            break;\n        case NON_ABSENT: // new with 2.6, to support Guava/JDK8 Optionals\n            // always suppress nulls\n            suppressNulls = true;\n            // and for referential types, also \"empty\", which in their case means \"absent\"\n            if (declaredType.isReferenceType()) {\n                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            }\n            break;\n        case NON_EMPTY:\n            // always suppress nulls\n            suppressNulls = true;\n            // but possibly also 'empty' values:\n            valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            break;\n        case NON_NULL:\n            suppressNulls = true;\n            // fall through\n        case ALWAYS: // default\n        default:\n            // we may still want to suppress empty collections, as per [JACKSON-254]:\n            if (declaredType.isContainerType()\n                    && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {\n                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            }\n            break;\n        }",
      "right" : "switch (inclusion) {\n        case NON_DEFAULT:\n            // 11-Nov-2015, tatu: This is tricky because semantics differ between cases,\n            //    so that if enclosing class has this, we may need to values of property,\n            //    whereas for global defaults OR per-property overrides, we have more\n            //    static definition. Sigh.\n            // First: case of class specifying it; try to find POJO property defaults\n            if (_defaultInclusion.getValueInclusion() == JsonInclude.Include.NON_DEFAULT) {\n                valueToSuppress = getPropertyDefaultValue(propDef.getName(), am, actualType);\n            } else {\n                valueToSuppress = getDefaultValue(actualType);\n            }\n            if (valueToSuppress == null) {\n                suppressNulls = true;\n            } else {\n                if (valueToSuppress.getClass().isArray()) {\n                    valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);\n                }\n            }\n\n            break;\n        case NON_ABSENT: // new with 2.6, to support Guava/JDK8 Optionals\n            // always suppress nulls\n            suppressNulls = true;\n            // and for referential types, also \"empty\", which in their case means \"absent\"\n            if (actualType.isReferenceType()) {\n                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            }\n            break;\n        case NON_EMPTY:\n            // always suppress nulls\n            suppressNulls = true;\n            // but possibly also 'empty' values:\n            valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            break;\n        case NON_NULL:\n            suppressNulls = true;\n            // fall through\n        case ALWAYS: // default\n        default:\n            // we may still want to suppress empty collections, as per [JACKSON-254]:\n            if (actualType.isContainerType()\n                    && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {\n                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            }\n            break;\n        }",
      "info" : "SwitchStatement[4655-6774]:SwitchStatement[4655-6770]"
    }, {
      "left" : "case NON_DEFAULT:",
      "right" : "case NON_DEFAULT:",
      "info" : "SwitchCase[4684-4701]:SwitchCase[4684-4701]"
    }, {
      "left" : "if (_defaultInclusion.getValueInclusion() == JsonInclude.Include.NON_DEFAULT)",
      "right" : "if (_defaultInclusion.getValueInclusion() == JsonInclude.Include.NON_DEFAULT)",
      "info" : "IfStatement[5108-5379]:IfStatement[5108-5379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5186-5295]:Block[5186-5295]"
    }, {
      "left" : "valueToSuppress = getPropertyDefaultValue(propDef.getName(), am, actualType);",
      "right" : "valueToSuppress = getPropertyDefaultValue(propDef.getName(), am, actualType);",
      "info" : "ExpressionStatement[5204-5281]:ExpressionStatement[5204-5281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5301-5379]:Block[5301-5379]"
    }, {
      "left" : "valueToSuppress = getDefaultValue(actualType);",
      "right" : "valueToSuppress = getDefaultValue(actualType);",
      "info" : "ExpressionStatement[5319-5365]:ExpressionStatement[5319-5365]"
    }, {
      "left" : "if (valueToSuppress == null)",
      "right" : "if (valueToSuppress == null)",
      "info" : "IfStatement[5392-5662]:IfStatement[5392-5662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5421-5474]:Block[5421-5474]"
    }, {
      "left" : "suppressNulls = true;",
      "right" : "suppressNulls = true;",
      "info" : "ExpressionStatement[5439-5460]:ExpressionStatement[5439-5460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5480-5662]:Block[5480-5662]"
    }, {
      "left" : "if (valueToSuppress.getClass().isArray())",
      "right" : "if (valueToSuppress.getClass().isArray())",
      "info" : "IfStatement[5498-5648]:IfStatement[5498-5648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5540-5648]:Block[5540-5648]"
    }, {
      "left" : "valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);",
      "right" : "valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);",
      "info" : "ExpressionStatement[5562-5630]:ExpressionStatement[5562-5630]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5676-5682]:BreakStatement[5676-5682]"
    }, {
      "left" : "case NON_ABSENT:",
      "right" : "case NON_ABSENT:",
      "info" : "SwitchCase[5691-5707]:SwitchCase[5691-5707]"
    }, {
      "left" : "suppressNulls = true;",
      "right" : "suppressNulls = true;",
      "info" : "ExpressionStatement[5806-5827]:ExpressionStatement[5806-5827]"
    }, {
      "left" : "if (declaredType.isReferenceType())",
      "right" : "if (actualType.isReferenceType())",
      "info" : "IfStatement[5931-6053]:IfStatement[5931-6051]"
    }, {
      "left" : "declaredType",
      "right" : "actualType",
      "info" : "SimpleName[5935-5947]:SimpleName[5935-5945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5967-6053]:Block[5965-6051]"
    }, {
      "left" : "valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;",
      "right" : "valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;",
      "info" : "ExpressionStatement[5985-6039]:ExpressionStatement[5983-6037]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6066-6072]:BreakStatement[6064-6070]"
    }, {
      "left" : "case NON_EMPTY:",
      "right" : "case NON_EMPTY:",
      "info" : "SwitchCase[6081-6096]:SwitchCase[6079-6094]"
    }, {
      "left" : "suppressNulls = true;",
      "right" : "suppressNulls = true;",
      "info" : "ExpressionStatement[6146-6167]:ExpressionStatement[6144-6165]"
    }, {
      "left" : "valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;",
      "right" : "valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;",
      "info" : "ExpressionStatement[6229-6283]:ExpressionStatement[6227-6281]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6296-6302]:BreakStatement[6294-6300]"
    }, {
      "left" : "case NON_NULL:",
      "right" : "case NON_NULL:",
      "info" : "SwitchCase[6311-6325]:SwitchCase[6309-6323]"
    }, {
      "left" : "suppressNulls = true;",
      "right" : "suppressNulls = true;",
      "info" : "ExpressionStatement[6338-6359]:ExpressionStatement[6336-6357]"
    }, {
      "left" : "case ALWAYS:",
      "right" : "case ALWAYS:",
      "info" : "SwitchCase[6396-6408]:SwitchCase[6394-6406]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[6428-6436]:SwitchCase[6426-6434]"
    }, {
      "left" : "if (declaredType.isContainerType()\n                    && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS))",
      "right" : "if (actualType.isContainerType()\n                    && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS))",
      "info" : "IfStatement[6535-6745]:IfStatement[6533-6741]"
    }, {
      "left" : "declaredType",
      "right" : "actualType",
      "info" : "SimpleName[6539-6551]:SimpleName[6537-6547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6659-6745]:Block[6655-6741]"
    }, {
      "left" : "valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;",
      "right" : "valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;",
      "info" : "ExpressionStatement[6677-6731]:ExpressionStatement[6673-6727]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6758-6764]:BreakStatement[6754-6760]"
    }, {
      "left" : "BeanPropertyWriter bpw = new BeanPropertyWriter(propDef,\n                am, _beanDesc.getClassAnnotations(), declaredType,\n                ser, typeSer, serializationType, suppressNulls, valueToSuppress);",
      "right" : "BeanPropertyWriter bpw = new BeanPropertyWriter(propDef,\n                am, _beanDesc.getClassAnnotations(), declaredType,\n                ser, typeSer, serializationType, suppressNulls, valueToSuppress);",
      "info" : "VariableDeclarationStatement[6783-6988]:VariableDeclarationStatement[6779-6984]"
    }, {
      "left" : "Object serDef = _annotationIntrospector.findNullSerializer(am);",
      "right" : "Object serDef = _annotationIntrospector.findNullSerializer(am);",
      "info" : "VariableDeclarationStatement[7043-7106]:VariableDeclarationStatement[7039-7102]"
    }, {
      "left" : "if (serDef != null)",
      "right" : "if (serDef != null)",
      "info" : "IfStatement[7115-7221]:IfStatement[7111-7217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7135-7221]:Block[7131-7217]"
    }, {
      "left" : "bpw.assignNullSerializer(prov.serializerInstance(am, serDef));",
      "right" : "bpw.assignNullSerializer(prov.serializerInstance(am, serDef));",
      "info" : "ExpressionStatement[7149-7211]:ExpressionStatement[7145-7207]"
    }, {
      "left" : "NameTransformer unwrapper = _annotationIntrospector.findUnwrappingNameTransformer(am);",
      "right" : "NameTransformer unwrapper = _annotationIntrospector.findUnwrappingNameTransformer(am);",
      "info" : "VariableDeclarationStatement[7274-7360]:VariableDeclarationStatement[7270-7356]"
    }, {
      "left" : "if (unwrapper != null)",
      "right" : "if (unwrapper != null)",
      "info" : "IfStatement[7369-7454]:IfStatement[7365-7450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7392-7454]:Block[7388-7450]"
    }, {
      "left" : "bpw = bpw.unwrappingWriter(unwrapper);",
      "right" : "bpw = bpw.unwrappingWriter(unwrapper);",
      "info" : "ExpressionStatement[7406-7444]:ExpressionStatement[7402-7440]"
    }, {
      "left" : "return bpw;",
      "right" : "return bpw;",
      "info" : "ReturnStatement[7463-7474]:ReturnStatement[7459-7470]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[7993-8002]:Modifier[7989-7998]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[8003-8011]:SimpleType[7999-8007]"
    }, {
      "left" : "findSerializationType",
      "right" : "findSerializationType",
      "info" : "SimpleName[8012-8033]:SimpleName[8008-8029]"
    }, {
      "left" : "Annotated a",
      "right" : "Annotated a",
      "info" : "SingleVariableDeclaration[8034-8045]:SingleVariableDeclaration[8030-8041]"
    }, {
      "left" : "boolean useStaticTyping",
      "right" : "boolean useStaticTyping",
      "info" : "SingleVariableDeclaration[8047-8070]:SingleVariableDeclaration[8043-8066]"
    }, {
      "left" : "JavaType declaredType",
      "right" : "JavaType declaredType",
      "info" : "SingleVariableDeclaration[8072-8093]:SingleVariableDeclaration[8068-8089]"
    }, {
      "left" : "JsonMappingException",
      "right" : "JsonMappingException",
      "info" : "SimpleType[8110-8130]:SimpleType[8106-8126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8135-10299]:Block[8131-10295]"
    }, {
      "left" : "JavaType secondary = _annotationIntrospector.refineSerializationType(_config, a, declaredType);",
      "right" : "JavaType secondary = _annotationIntrospector.refineSerializationType(_config, a, declaredType);",
      "info" : "VariableDeclarationStatement[8145-8240]:VariableDeclarationStatement[8141-8236]"
    }, {
      "left" : "if (secondary != declaredType)",
      "right" : "if (secondary != declaredType)",
      "info" : "IfStatement[8381-9755]:IfStatement[8377-9751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8412-9755]:Block[8408-9751]"
    }, {
      "left" : "Class<?> serClass = secondary.getRawClass();",
      "right" : "Class<?> serClass = secondary.getRawClass();",
      "info" : "VariableDeclarationStatement[8426-8470]:VariableDeclarationStatement[8422-8466]"
    }, {
      "left" : "Class<?> rawDeclared = declaredType.getRawClass();",
      "right" : "Class<?> rawDeclared = declaredType.getRawClass();",
      "info" : "VariableDeclarationStatement[8532-8582]:VariableDeclarationStatement[8528-8578]"
    }, {
      "left" : "if (serClass.isAssignableFrom(rawDeclared))",
      "right" : "if (serClass.isAssignableFrom(rawDeclared))",
      "info" : "IfStatement[8595-9671]:IfStatement[8591-9667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8639-8686]:Block[8635-8682]"
    }, {
      "left" : ";",
      "right" : ";",
      "info" : "EmptyStatement[8657-8658]:EmptyStatement[8653-8654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8692-9671]:Block[8688-9667]"
    }, {
      "left" : "if (!rawDeclared.isAssignableFrom(serClass))",
      "right" : "if (!rawDeclared.isAssignableFrom(serClass))",
      "info" : "IfStatement[9126-9401]:IfStatement[9122-9397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9171-9401]:Block[9167-9397]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Illegal concrete-type annotation for method '\"+a.getName()+\"': class \"+serClass.getName()+\" not a super-type of (declared) class \"+rawDeclared.getName());",
      "right" : "throw new IllegalArgumentException(\"Illegal concrete-type annotation for method '\"+a.getName()+\"': class \"+serClass.getName()+\" not a super-type of (declared) class \"+rawDeclared.getName());",
      "info" : "ThrowStatement[9193-9383]:ThrowStatement[9189-9379]"
    }, {
      "left" : "useStaticTyping = true;",
      "right" : "useStaticTyping = true;",
      "info" : "ExpressionStatement[9684-9707]:ExpressionStatement[9680-9703]"
    }, {
      "left" : "declaredType = secondary;",
      "right" : "declaredType = secondary;",
      "info" : "ExpressionStatement[9720-9745]:ExpressionStatement[9716-9741]"
    }, {
      "left" : "JsonSerialize.Typing typing = _annotationIntrospector.findSerializationTyping(a);",
      "right" : "JsonSerialize.Typing typing = _annotationIntrospector.findSerializationTyping(a);",
      "info" : "VariableDeclarationStatement[9840-9921]:VariableDeclarationStatement[9836-9917]"
    }, {
      "left" : "if ((typing != null) && (typing != JsonSerialize.Typing.DEFAULT_TYPING))",
      "right" : "if ((typing != null) && (typing != JsonSerialize.Typing.DEFAULT_TYPING))",
      "info" : "IfStatement[9930-10085]:IfStatement[9926-10081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10003-10085]:Block[9999-10081]"
    }, {
      "left" : "useStaticTyping = (typing == JsonSerialize.Typing.STATIC);",
      "right" : "useStaticTyping = (typing == JsonSerialize.Typing.STATIC);",
      "info" : "ExpressionStatement[10017-10075]:ExpressionStatement[10013-10071]"
    }, {
      "left" : "if (useStaticTyping)",
      "right" : "if (useStaticTyping)",
      "info" : "IfStatement[10094-10272]:IfStatement[10090-10268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10115-10272]:Block[10111-10268]"
    }, {
      "left" : "return declaredType.withStaticTyping();",
      "right" : "return declaredType.withStaticTyping();",
      "info" : "ReturnStatement[10210-10249]:ReturnStatement[10206-10245]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10281-10293]:ReturnStatement[10277-10289]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[10498-10507]:Modifier[10494-10503]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[10508-10514]:SimpleType[10504-10510]"
    }, {
      "left" : "getDefaultBean",
      "right" : "getDefaultBean",
      "info" : "SimpleName[10515-10529]:SimpleName[10511-10525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10536-11485]:Block[10532-11481]"
    }, {
      "left" : "Object def = _defaultBean;",
      "right" : "Object def = _defaultBean;",
      "info" : "VariableDeclarationStatement[10546-10572]:VariableDeclarationStatement[10542-10568]"
    }, {
      "left" : "if (def == null)",
      "right" : "if (def == null)",
      "info" : "IfStatement[10581-11414]:IfStatement[10577-11410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10598-11414]:Block[10594-11410]"
    }, {
      "left" : "def = _beanDesc.instantiateBean(_config.canOverrideAccessModifiers());",
      "right" : "def = _beanDesc.instantiateBean(_config.canOverrideAccessModifiers());",
      "info" : "ExpressionStatement[10777-10847]:ExpressionStatement[10773-10843]"
    }, {
      "left" : "if (def == null)",
      "right" : "if (def == null)",
      "info" : "IfStatement[10860-11372]:IfStatement[10856-11368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10877-11372]:Block[10873-11368]"
    }, {
      "left" : "def = NO_DEFAULT_MARKER;",
      "right" : "def = NO_DEFAULT_MARKER;",
      "info" : "ExpressionStatement[11334-11358]:ExpressionStatement[11330-11354]"
    }, {
      "left" : "_defaultBean = def;",
      "right" : "_defaultBean = def;",
      "info" : "ExpressionStatement[11385-11404]:ExpressionStatement[11381-11400]"
    }, {
      "left" : "return (def == NO_DEFAULT_MARKER) ? null : _defaultBean;",
      "right" : "return (def == NO_DEFAULT_MARKER) ? null : _defaultBean;",
      "info" : "ReturnStatement[11423-11479]:ReturnStatement[11419-11475]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[12075-12084]:Modifier[12071-12080]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[12085-12091]:SimpleType[12081-12087]"
    }, {
      "left" : "getPropertyDefaultValue",
      "right" : "getPropertyDefaultValue",
      "info" : "SimpleName[12092-12115]:SimpleName[12088-12111]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[12116-12127]:SingleVariableDeclaration[12112-12123]"
    }, {
      "left" : "AnnotatedMember member",
      "right" : "AnnotatedMember member",
      "info" : "SingleVariableDeclaration[12129-12151]:SingleVariableDeclaration[12125-12147]"
    }, {
      "left" : "JavaType type",
      "right" : "JavaType type",
      "info" : "SingleVariableDeclaration[12165-12178]:SingleVariableDeclaration[12161-12174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12184-12486]:Block[12180-12482]"
    }, {
      "left" : "Object defaultBean = getDefaultBean();",
      "right" : "Object defaultBean = getDefaultBean();",
      "info" : "VariableDeclarationStatement[12194-12232]:VariableDeclarationStatement[12190-12228]"
    }, {
      "left" : "if (defaultBean == null)",
      "right" : "if (defaultBean == null)",
      "info" : "IfStatement[12241-12319]:IfStatement[12237-12315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12266-12319]:Block[12262-12315]"
    }, {
      "left" : "return getDefaultValue(type);",
      "right" : "return getDefaultValue(type);",
      "info" : "ReturnStatement[12280-12309]:ReturnStatement[12276-12305]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12328-12480]:TryStatement[12324-12476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12332-12392]:Block[12328-12388]"
    }, {
      "left" : "return member.getValue(defaultBean);",
      "right" : "return member.getValue(defaultBean);",
      "info" : "ReturnStatement[12346-12382]:ReturnStatement[12342-12378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12413-12480]:Block[12409-12476]"
    }, {
      "left" : "return _throwWrapped(e, name, defaultBean);",
      "right" : "return _throwWrapped(e, name, defaultBean);",
      "info" : "ReturnStatement[12427-12470]:ReturnStatement[12423-12466]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[13169-13178]:Modifier[13165-13174]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[13179-13185]:SimpleType[13175-13181]"
    }, {
      "left" : "getDefaultValue",
      "right" : "getDefaultValue",
      "info" : "SimpleName[13186-13201]:SimpleName[13182-13197]"
    }, {
      "left" : "JavaType type",
      "right" : "JavaType type",
      "info" : "SingleVariableDeclaration[13202-13215]:SingleVariableDeclaration[13198-13211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13221-13789]:Block[13217-13785]"
    }, {
      "left" : "Class<?> cls = type.getRawClass();",
      "right" : "Class<?> cls = type.getRawClass();",
      "info" : "VariableDeclarationStatement[13394-13428]:VariableDeclarationStatement[13390-13424]"
    }, {
      "left" : "Class<?> prim = ClassUtil.primitiveType(cls);",
      "right" : "Class<?> prim = ClassUtil.primitiveType(cls);",
      "info" : "VariableDeclarationStatement[13438-13483]:VariableDeclarationStatement[13434-13479]"
    }, {
      "left" : "if (prim != null)",
      "right" : "if (prim != null)",
      "info" : "IfStatement[13492-13570]:IfStatement[13488-13566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13510-13570]:Block[13506-13566]"
    }, {
      "left" : "return ClassUtil.defaultValue(prim);",
      "right" : "return ClassUtil.defaultValue(prim);",
      "info" : "ReturnStatement[13524-13560]:ReturnStatement[13520-13556]"
    }, {
      "left" : "if (type.isContainerType() || type.isReferenceType())",
      "right" : "if (type.isContainerType() || type.isReferenceType())",
      "info" : "IfStatement[13579-13694]:IfStatement[13575-13690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13633-13694]:Block[13629-13690]"
    }, {
      "left" : "return JsonInclude.Include.NON_EMPTY;",
      "right" : "return JsonInclude.Include.NON_EMPTY;",
      "info" : "ReturnStatement[13647-13684]:ReturnStatement[13643-13680]"
    }, {
      "left" : "if (cls == String.class)",
      "right" : "if (cls == String.class)",
      "info" : "IfStatement[13703-13762]:IfStatement[13699-13758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13728-13762]:Block[13724-13758]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[13742-13752]:ReturnStatement[13738-13748]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[13771-13783]:ReturnStatement[13767-13779]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[13992-14001]:Modifier[13988-13997]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[14002-14008]:SimpleType[13998-14004]"
    }, {
      "left" : "_throwWrapped",
      "right" : "_throwWrapped",
      "info" : "SimpleName[14009-14022]:SimpleName[14005-14018]"
    }, {
      "left" : "Exception e",
      "right" : "Exception e",
      "info" : "SingleVariableDeclaration[14023-14034]:SingleVariableDeclaration[14019-14030]"
    }, {
      "left" : "String propName",
      "right" : "String propName",
      "info" : "SingleVariableDeclaration[14036-14051]:SingleVariableDeclaration[14032-14047]"
    }, {
      "left" : "Object defaultBean",
      "right" : "Object defaultBean",
      "info" : "SingleVariableDeclaration[14053-14071]:SingleVariableDeclaration[14049-14067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14077-14450]:Block[14073-14446]"
    }, {
      "left" : "Throwable t = e;",
      "right" : "Throwable t = e;",
      "info" : "VariableDeclarationStatement[14087-14103]:VariableDeclarationStatement[14083-14099]"
    }, {
      "left" : "while (t.getCause() != null)",
      "right" : "while (t.getCause() != null)",
      "info" : "WhileStatement[14112-14182]:WhileStatement[14108-14178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14141-14182]:Block[14137-14178]"
    }, {
      "left" : "t = t.getCause();",
      "right" : "t = t.getCause();",
      "info" : "ExpressionStatement[14155-14172]:ExpressionStatement[14151-14168]"
    }, {
      "left" : "if (t instanceof Error)",
      "right" : "if (t instanceof Error)",
      "info" : "IfStatement[14191-14231]:IfStatement[14187-14227]"
    }, {
      "left" : "throw (Error) t;",
      "right" : "throw (Error) t;",
      "info" : "ThrowStatement[14215-14231]:ThrowStatement[14211-14227]"
    }, {
      "left" : "if (t instanceof RuntimeException)",
      "right" : "if (t instanceof RuntimeException)",
      "info" : "IfStatement[14240-14302]:IfStatement[14236-14298]"
    }, {
      "left" : "throw (RuntimeException) t;",
      "right" : "throw (RuntimeException) t;",
      "info" : "ThrowStatement[14275-14302]:ThrowStatement[14271-14298]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Failed to get property '\"+propName+\"' of default \"+defaultBean.getClass().getName()+\" instance\");",
      "right" : "throw new IllegalArgumentException(\"Failed to get property '\"+propName+\"' of default \"+defaultBean.getClass().getName()+\" instance\");",
      "info" : "ThrowStatement[14311-14444]:ThrowStatement[14307-14440]"
    } ]
  },
  "interFileMappings" : { }
}