{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "@NonNls private static final String DOCUMENTATION_TOPIC_ID = \"reference.toolWindows.Documentation\";",
      "right" : "@NonNls private static final String DOCUMENTATION_TOPIC_ID = \"reference.toolWindows.Documentation\";",
      "info" : "FieldDeclaration[3218-3317]:FieldDeclaration[3218-3317]"
    }, {
      "left" : "private static final int PREFERRED_WIDTH_EM = 37;",
      "right" : "private static final int PREFERRED_WIDTH_EM = 37;",
      "info" : "FieldDeclaration[3321-3370]:FieldDeclaration[3321-3370]"
    }, {
      "left" : "private static final int PREFERRED_HEIGHT_MIN_EM = 7;",
      "right" : "private static final int PREFERRED_HEIGHT_MIN_EM = 7;",
      "info" : "FieldDeclaration[3373-3426]:FieldDeclaration[3373-3426]"
    }, {
      "left" : "private static final int PREFERRED_HEIGHT_MAX_EM = 20;",
      "right" : "private static final int PREFERRED_HEIGHT_MAX_EM = 20;",
      "info" : "FieldDeclaration[3429-3483]:FieldDeclaration[3429-3483]"
    }, {
      "left" : "private DocumentationManager myManager;",
      "right" : "private DocumentationManager myManager;",
      "info" : "FieldDeclaration[3487-3526]:FieldDeclaration[3487-3526]"
    }, {
      "left" : "private SmartPsiElementPointer myElement;",
      "right" : "private SmartPsiElementPointer myElement;",
      "info" : "FieldDeclaration[3529-3570]:FieldDeclaration[3529-3570]"
    }, {
      "left" : "private long myModificationCount;",
      "right" : "private long myModificationCount;",
      "info" : "FieldDeclaration[3573-3606]:FieldDeclaration[3573-3606]"
    }, {
      "left" : "private final Stack<Context> myBackStack = new Stack<Context>();",
      "right" : "private final Stack<Context> myBackStack = new Stack<Context>();",
      "info" : "FieldDeclaration[3610-3674]:FieldDeclaration[3610-3674]"
    }, {
      "left" : "private final Stack<Context> myForwardStack = new Stack<Context>();",
      "right" : "private final Stack<Context> myForwardStack = new Stack<Context>();",
      "info" : "FieldDeclaration[3677-3744]:FieldDeclaration[3677-3744]"
    }, {
      "left" : "private final ActionToolbar myToolBar;",
      "right" : "private final ActionToolbar myToolBar;",
      "info" : "FieldDeclaration[3747-3785]:FieldDeclaration[3747-3785]"
    }, {
      "left" : "private volatile boolean myIsEmpty;",
      "right" : "private volatile boolean myIsEmpty;",
      "info" : "FieldDeclaration[3788-3823]:FieldDeclaration[3788-3823]"
    }, {
      "left" : "private boolean myIsShown;",
      "right" : "private boolean myIsShown;",
      "info" : "FieldDeclaration[3826-3852]:FieldDeclaration[3826-3852]"
    }, {
      "left" : "private final JLabel myElementLabel;",
      "right" : "private final JLabel myElementLabel;",
      "info" : "FieldDeclaration[3855-3891]:FieldDeclaration[3855-3891]"
    }, {
      "left" : "private final MutableAttributeSet myFontSizeStyle = new SimpleAttributeSet();",
      "right" : "private final MutableAttributeSet myFontSizeStyle = new SimpleAttributeSet();",
      "info" : "FieldDeclaration[3894-3971]:FieldDeclaration[3894-3971]"
    }, {
      "left" : "private JSlider myFontSizeSlider;",
      "right" : "private JSlider myFontSizeSlider;",
      "info" : "FieldDeclaration[3974-4007]:FieldDeclaration[3974-4007]"
    }, {
      "left" : "private final JComponent mySettingsPanel;",
      "right" : "private final JComponent mySettingsPanel;",
      "info" : "FieldDeclaration[4010-4051]:FieldDeclaration[4010-4051]"
    }, {
      "left" : "private final MyShowSettingsButton myShowSettingsButton;",
      "right" : "private final MyShowSettingsButton myShowSettingsButton;",
      "info" : "FieldDeclaration[4054-4110]:FieldDeclaration[4054-4110]"
    }, {
      "left" : "private boolean myIgnoreFontSizeSliderChange;",
      "right" : "private boolean myIgnoreFontSizeSliderChange;",
      "info" : "FieldDeclaration[4113-4158]:FieldDeclaration[4113-4158]"
    }, {
      "left" : "private String myEffectiveExternalUrl;",
      "right" : "private String myEffectiveExternalUrl;",
      "info" : "FieldDeclaration[4161-4199]:FieldDeclaration[4161-4199]"
    }, {
      "left" : "private final MyDictionary<String, Image> myImageProvider = new MyDictionary<String, Image>() {\n    @Override\n    public Image get(Object key) {\n      if (myManager == null || key == null) return null;\n      PsiElement element = getElement();\n      if (element == null) return null;\n      URL url = (URL)key;\n      Image inMemory = myManager.getElementImage(element, url.toExternalForm());\n      return inMemory != null ? inMemory : Toolkit.getDefaultToolkit().createImage(url);\n    }\n  };",
      "right" : "private final MyDictionary<String, Image> myImageProvider = new MyDictionary<String, Image>() {\n    @Override\n    public Image get(Object key) {\n      if (myManager == null || key == null) return null;\n      PsiElement element = getElement();\n      if (element == null) return null;\n      URL url = (URL)key;\n      Image inMemory = myManager.getElementImage(element, url.toExternalForm());\n      return inMemory != null ? inMemory : Toolkit.getDefaultToolkit().createImage(url);\n    }\n  };",
      "info" : "FieldDeclaration[4202-4691]:FieldDeclaration[4202-4691]"
    }, {
      "left" : "public Image get(Object key)",
      "right" : "public Image get(Object key)",
      "info" : "MethodDeclaration[4302-4686]:MethodDeclaration[4302-4686]"
    }, {
      "left" : "Context",
      "right" : "Context",
      "info" : "TypeDeclaration[4695-5027]:TypeDeclaration[4695-5027]"
    }, {
      "left" : "private final SmartPsiElementPointer element;",
      "right" : "private final SmartPsiElementPointer element;",
      "info" : "FieldDeclaration[4730-4775]:FieldDeclaration[4730-4775]"
    }, {
      "left" : "private final String text;",
      "right" : "private final String text;",
      "info" : "FieldDeclaration[4780-4806]:FieldDeclaration[4780-4806]"
    }, {
      "left" : "private final Rectangle viewRect;",
      "right" : "private final Rectangle viewRect;",
      "info" : "FieldDeclaration[4811-4844]:FieldDeclaration[4811-4844]"
    }, {
      "left" : "public Context(SmartPsiElementPointer element, String text, Rectangle viewRect)",
      "right" : "public Context(SmartPsiElementPointer element, String text, Rectangle viewRect)",
      "info" : "MethodDeclaration[4850-5023]:MethodDeclaration[4850-5023]"
    }, {
      "left" : "private final JScrollPane myScrollPane;",
      "right" : "private final JScrollPane myScrollPane;",
      "info" : "FieldDeclaration[5031-5070]:FieldDeclaration[5031-5070]"
    }, {
      "left" : "private final JEditorPane myEditorPane;",
      "right" : "private final JEditorPane myEditorPane;",
      "info" : "FieldDeclaration[5073-5112]:FieldDeclaration[5073-5112]"
    }, {
      "left" : "private String myText;",
      "right" : "private String myText;",
      "info" : "FieldDeclaration[5115-5137]:FieldDeclaration[5115-5137]"
    }, {
      "left" : "private final JPanel myControlPanel;",
      "right" : "private final JPanel myControlPanel;",
      "info" : "FieldDeclaration[5211-5247]:FieldDeclaration[5211-5247]"
    }, {
      "left" : "private boolean myControlPanelVisible;",
      "right" : "private boolean myControlPanelVisible;",
      "info" : "FieldDeclaration[5250-5288]:FieldDeclaration[5250-5288]"
    }, {
      "left" : "private final ExternalDocAction myExternalDocAction;",
      "right" : "private final ExternalDocAction myExternalDocAction;",
      "info" : "FieldDeclaration[5291-5343]:FieldDeclaration[5291-5343]"
    }, {
      "left" : "private Consumer<PsiElement> myNavigateCallback;",
      "right" : "private Consumer<PsiElement> myNavigateCallback;",
      "info" : "FieldDeclaration[5346-5394]:FieldDeclaration[5346-5394]"
    }, {
      "left" : "private JBPopup myHint;",
      "right" : "private JBPopup myHint;",
      "info" : "FieldDeclaration[5398-5421]:FieldDeclaration[5398-5421]"
    }, {
      "left" : "private final Map<KeyStroke, ActionListener> myKeyboardActions = new HashMap<KeyStroke, ActionListener>();",
      "right" : "private final Map<KeyStroke, ActionListener> myKeyboardActions = new HashMap<KeyStroke, ActionListener>();",
      "info" : "FieldDeclaration[5425-5531]:FieldDeclaration[5425-5531]"
    }, {
      "left" : "public boolean requestFocusInWindow()",
      "right" : "public boolean requestFocusInWindow()",
      "info" : "MethodDeclaration[5535-5638]:MethodDeclaration[5535-5638]"
    }, {
      "left" : "public void requestFocus()",
      "right" : "public void requestFocus()",
      "info" : "MethodDeclaration[5643-5720]:MethodDeclaration[5643-5720]"
    }, {
      "left" : "public EditorKit getEditorKit()",
      "right" : "public EditorKit getEditorKit()",
      "info" : "MethodDeclaration[5964-6057]:MethodDeclaration[5964-6057]"
    }, {
      "left" : "public Dimension getPreferredScrollableViewportSize()",
      "right" : "public Dimension getPreferredScrollableViewportSize()",
      "info" : "MethodDeclaration[6065-7038]:MethodDeclaration[6065-7038]"
    }, {
      "left" : "protected void processKeyEvent(KeyEvent e)",
      "right" : "protected void processKeyEvent(KeyEvent e)",
      "info" : "MethodDeclaration[7110-7517]:MethodDeclaration[7110-7517]"
    }, {
      "left" : "protected void paintComponent(Graphics g)",
      "right" : "protected void paintComponent(Graphics g)",
      "info" : "MethodDeclaration[7525-7668]:MethodDeclaration[7525-7668]"
    }, {
      "left" : "public void setDocument(Document doc)",
      "right" : "public void setDocument(Document doc)",
      "info" : "MethodDeclaration[7676-7884]:MethodDeclaration[7676-7884]"
    }, {
      "left" : "public Object getData(@NonNls String dataId)",
      "right" : "public Object getData(@NonNls String dataId)",
      "info" : "MethodDeclaration[7955-8109]:MethodDeclaration[7955-8109]"
    }, {
      "left" : "protected void processMouseWheelEvent(MouseWheelEvent e)",
      "right" : "protected void processMouseWheelEvent(MouseWheelEvent e)",
      "info" : "MethodDeclaration[8444-9455]:MethodDeclaration[8449-9460]"
    }, {
      "left" : "public void mousePressed(MouseEvent e)",
      "right" : "public void mousePressed(MouseEvent e)",
      "info" : "MethodDeclaration[9661-9804]:MethodDeclaration[9666-9809]"
    }, {
      "left" : "public void dispose()",
      "right" : "public void dispose()",
      "info" : "MethodDeclaration[9914-10017]:MethodDeclaration[9919-10022]"
    }, {
      "left" : "public void focusLost(FocusEvent e)",
      "right" : "public void focusLost(FocusEvent e)",
      "info" : "MethodDeclaration[10093-10410]:MethodDeclaration[10098-10415]"
    }, {
      "left" : "public void dispose()",
      "right" : "public void dispose()",
      "info" : "MethodDeclaration[10521-10624]:MethodDeclaration[10526-10629]"
    }, {
      "left" : "public void doLayout()",
      "right" : "public void doLayout()",
      "info" : "MethodDeclaration[10728-11202]:MethodDeclaration[10733-11207]"
    }, {
      "left" : "public Dimension getPreferredSize()",
      "right" : "public Dimension getPreferredSize()",
      "info" : "MethodDeclaration[11210-11564]:MethodDeclaration[11215-11569]"
    }, {
      "left" : "public void hyperlinkUpdate(HyperlinkEvent e)",
      "right" : "public void hyperlinkUpdate(HyperlinkEvent e)",
      "info" : "MethodDeclaration[13688-13968]:MethodDeclaration[13693-13973]"
    }, {
      "left" : "public void dispose()",
      "right" : "public void dispose()",
      "info" : "MethodDeclaration[14087-14199]:MethodDeclaration[14092-14204]"
    }, {
      "left" : "public DocumentationComponent(final DocumentationManager manager)",
      "right" : "public DocumentationComponent(final DocumentationManager manager)",
      "info" : "MethodDeclaration[14266-14362]:MethodDeclaration[14271-14367]"
    }, {
      "left" : "public Object getData(@NonNls String dataId)",
      "right" : "public Object getData(@NonNls String dataId)",
      "info" : "MethodDeclaration[14366-14859]:MethodDeclaration[14371-14864]"
    }, {
      "left" : "private JComponent createSettingsPanel()",
      "right" : "private JComponent createSettingsPanel()",
      "info" : "MethodDeclaration[14863-16258]:MethodDeclaration[14868-16263]"
    }, {
      "left" : "public void stateChanged(ChangeEvent e)",
      "right" : "public void stateChanged(ChangeEvent e)",
      "info" : "MethodDeclaration[15555-15949]:MethodDeclaration[15560-15954]"
    }, {
      "left" : "private void setFontSizeSliderSize(FontSize fontSize)",
      "right" : "private void setFontSizeSliderSize(FontSize fontSize)",
      "info" : "MethodDeclaration[16262-16644]:MethodDeclaration[16267-16649]"
    }, {
      "left" : "public boolean isEmpty()",
      "right" : "public boolean isEmpty()",
      "info" : "MethodDeclaration[16648-16700]:MethodDeclaration[16653-16705]"
    }, {
      "left" : "public void startWait()",
      "right" : "public void startWait()",
      "info" : "MethodDeclaration[16704-16755]:MethodDeclaration[16709-16760]"
    }, {
      "left" : "private void setControlPanelVisible(boolean visible)",
      "right" : "private void setControlPanelVisible(boolean visible)",
      "info" : "MethodDeclaration[16759-17023]:MethodDeclaration[16764-17028]"
    }, {
      "left" : "public void setHint(JBPopup hint)",
      "right" : "public void setHint(JBPopup hint)",
      "info" : "MethodDeclaration[17027-17085]:MethodDeclaration[17032-17090]"
    }, {
      "left" : "public JComponent getComponent()",
      "right" : "public JComponent getComponent()",
      "info" : "MethodDeclaration[17089-17152]:MethodDeclaration[17094-17157]"
    }, {
      "left" : "public PsiElement getElement()",
      "right" : "public PsiElement getElement()",
      "info" : "MethodDeclaration[17156-17266]:MethodDeclaration[17161-17271]"
    }, {
      "left" : "private void setElement(SmartPsiElementPointer element)",
      "right" : "private void setElement(SmartPsiElementPointer element)",
      "info" : "MethodDeclaration[17270-17413]:MethodDeclaration[17275-17418]"
    }, {
      "left" : "public boolean isUpToDate()",
      "right" : "public boolean isUpToDate()",
      "info" : "MethodDeclaration[17417-17539]:MethodDeclaration[17422-17544]"
    }, {
      "left" : "private long getCurrentModificationCount()",
      "right" : "private long getCurrentModificationCount()",
      "info" : "MethodDeclaration[17543-17718]:MethodDeclaration[17548-17723]"
    }, {
      "left" : "public void setNavigateCallback(Consumer<PsiElement> navigateCallback)",
      "right" : "public void setNavigateCallback(Consumer<PsiElement> navigateCallback)",
      "info" : "MethodDeclaration[17722-17841]:MethodDeclaration[17727-17846]"
    }, {
      "left" : "public void setText(String text, @Nullable PsiElement element, boolean clearHistory)",
      "right" : "public void setText(String text, @Nullable PsiElement element, boolean clearHistory)",
      "info" : "MethodDeclaration[17845-17984]:MethodDeclaration[17850-17989]"
    }, {
      "left" : "public void setText(String text, PsiElement element, boolean clean, boolean clearHistory)",
      "right" : "public void setText(String text, PsiElement element, boolean clean, boolean clearHistory)",
      "info" : "MethodDeclaration[17988-18357]:MethodDeclaration[17993-18362]"
    }, {
      "left" : "public void replaceText(String text, PsiElement element)",
      "right" : "public void replaceText(String text, PsiElement element)",
      "info" : "MethodDeclaration[18361-18644]:MethodDeclaration[18366-18649]"
    }, {
      "left" : "private void clearHistory()",
      "right" : "private void clearHistory()",
      "info" : "MethodDeclaration[18648-18734]:MethodDeclaration[18653-18739]"
    }, {
      "left" : "public void setData(PsiElement _element, String text, final boolean clearHistory, String effectiveExternalUrl)",
      "right" : "public void setData(PsiElement _element, String text, final boolean clearHistory, String effectiveExternalUrl)",
      "info" : "MethodDeclaration[18738-18925]:MethodDeclaration[18743-18930]"
    }, {
      "left" : "public void setData(PsiElement _element, String text, final boolean clearHistory, String effectiveExternalUrl, String ref)",
      "right" : "public void setData(PsiElement _element, String text, final boolean clearHistory, String effectiveExternalUrl, String ref)",
      "info" : "MethodDeclaration[18931-19699]:MethodDeclaration[18936-19704]"
    }, {
      "left" : "private void setDataInternal(SmartPsiElementPointer element, String text, final Rectangle viewRect, String ref)",
      "right" : "private void setDataInternal(SmartPsiElementPointer element, String text, final Rectangle viewRect, String ref)",
      "info" : "MethodDeclaration[19703-19878]:MethodDeclaration[19708-19883]"
    }, {
      "left" : "private void setDataInternal(SmartPsiElementPointer element, String text, final Rectangle viewRect, final String ref, boolean skip)",
      "right" : "private void setDataInternal(SmartPsiElementPointer element, String text, final Rectangle viewRect, final String ref, boolean skip)",
      "info" : "MethodDeclaration[19882-20673]:MethodDeclaration[19887-20678]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[20398-20661]:MethodDeclaration[20403-20666]"
    }, {
      "left" : "private void applyFontSize()",
      "right" : "private void applyFontSize()",
      "info" : "MethodDeclaration[20677-21520]:MethodDeclaration[20682-21525]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[21363-21508]:MethodDeclaration[21368-21513]"
    }, {
      "left" : "private void goBack()",
      "right" : "private void goBack()",
      "info" : "MethodDeclaration[21524-21726]:MethodDeclaration[21529-21731]"
    }, {
      "left" : "private void goForward()",
      "right" : "private void goForward()",
      "info" : "MethodDeclaration[21730-21938]:MethodDeclaration[21735-21943]"
    }, {
      "left" : "private Context saveContext()",
      "right" : "private Context saveContext()",
      "info" : "MethodDeclaration[21942-22089]:MethodDeclaration[21947-22094]"
    }, {
      "left" : "private void restoreContext(Context context)",
      "right" : "private void restoreContext(Context context)",
      "info" : "MethodDeclaration[22093-22408]:MethodDeclaration[22098-22413]"
    }, {
      "left" : "private void updateControlState()",
      "right" : "private void updateControlState()",
      "info" : "MethodDeclaration[22412-22714]:MethodDeclaration[22417-22719]"
    }, {
      "left" : "BackAction",
      "right" : "BackAction",
      "info" : "TypeDeclaration[22718-23192]:TypeDeclaration[22723-23197]"
    }, {
      "left" : "public BackAction()",
      "right" : "public BackAction()",
      "info" : "MethodDeclaration[22808-22927]:MethodDeclaration[22813-22932]"
    }, {
      "left" : "public void actionPerformed(AnActionEvent e)",
      "right" : "public void actionPerformed(AnActionEvent e)",
      "info" : "MethodDeclaration[22933-23015]:MethodDeclaration[22938-23020]"
    }, {
      "left" : "public void update(AnActionEvent e)",
      "right" : "public void update(AnActionEvent e)",
      "info" : "MethodDeclaration[23021-23188]:MethodDeclaration[23026-23193]"
    }, {
      "left" : "ForwardAction",
      "right" : "ForwardAction",
      "info" : "TypeDeclaration[23196-23688]:TypeDeclaration[23201-23693]"
    }, {
      "left" : "public ForwardAction()",
      "right" : "public ForwardAction()",
      "info" : "MethodDeclaration[23289-23417]:MethodDeclaration[23294-23422]"
    }, {
      "left" : "public void actionPerformed(AnActionEvent e)",
      "right" : "public void actionPerformed(AnActionEvent e)",
      "info" : "MethodDeclaration[23423-23508]:MethodDeclaration[23428-23513]"
    }, {
      "left" : "public void update(AnActionEvent e)",
      "right" : "public void update(AnActionEvent e)",
      "info" : "MethodDeclaration[23514-23684]:MethodDeclaration[23519-23689]"
    }, {
      "left" : "EditDocumentationSourceAction",
      "right" : "EditDocumentationSourceAction",
      "info" : "TypeDeclaration[23692-24559]:TypeDeclaration[23697-24564]"
    }, {
      "left" : "private EditDocumentationSourceAction()",
      "right" : "private EditDocumentationSourceAction()",
      "info" : "MethodDeclaration[23778-23970]:MethodDeclaration[23783-23975]"
    }, {
      "left" : "public void actionPerformed(AnActionEvent e)",
      "right" : "public void actionPerformed(AnActionEvent e)",
      "info" : "MethodDeclaration[23976-24186]:MethodDeclaration[23981-24191]"
    }, {
      "left" : "protected Navigatable[] getNavigatables(DataContext dataContext)",
      "right" : "protected Navigatable[] getNavigatables(DataContext dataContext)",
      "info" : "MethodDeclaration[24192-24555]:MethodDeclaration[24197-24560]"
    }, {
      "left" : "ExternalDocAction",
      "right" : "ExternalDocAction",
      "info" : "TypeDeclaration[24564-26834]:TypeDeclaration[24569-26839]"
    }, {
      "left" : "private ExternalDocAction()",
      "right" : "private ExternalDocAction()",
      "info" : "MethodDeclaration[24661-24947]:MethodDeclaration[24666-24952]"
    }, {
      "left" : "public void actionPerformed(AnActionEvent e)",
      "right" : "public void actionPerformed(AnActionEvent e)",
      "info" : "MethodDeclaration[24953-25964]:MethodDeclaration[24958-25969]"
    }, {
      "left" : "public void update(AnActionEvent e)",
      "right" : "public void update(AnActionEvent e)",
      "info" : "MethodDeclaration[25970-26830]:MethodDeclaration[25975-26835]"
    }, {
      "left" : "private void registerActions()",
      "right" : "private void registerActions()",
      "info" : "MethodDeclaration[26838-30656]:MethodDeclaration[26843-30661]"
    }, {
      "left" : "public void actionPerformed(ActionEvent e)",
      "right" : "public void actionPerformed(ActionEvent e)",
      "info" : "MethodDeclaration[27134-27416]:MethodDeclaration[27139-27421]"
    }, {
      "left" : "public void actionPerformed(ActionEvent e)",
      "right" : "public void actionPerformed(ActionEvent e)",
      "info" : "MethodDeclaration[27526-27829]:MethodDeclaration[27531-27834]"
    }, {
      "left" : "public void actionPerformed(ActionEvent e)",
      "right" : "public void actionPerformed(ActionEvent e)",
      "info" : "MethodDeclaration[27939-28223]:MethodDeclaration[27944-28228]"
    }, {
      "left" : "public void actionPerformed(ActionEvent e)",
      "right" : "public void actionPerformed(ActionEvent e)",
      "info" : "MethodDeclaration[28334-28639]:MethodDeclaration[28339-28644]"
    }, {
      "left" : "public void actionPerformed(ActionEvent e)",
      "right" : "public void actionPerformed(ActionEvent e)",
      "info" : "MethodDeclaration[28752-29035]:MethodDeclaration[28757-29040]"
    }, {
      "left" : "public void actionPerformed(ActionEvent e)",
      "right" : "public void actionPerformed(ActionEvent e)",
      "info" : "MethodDeclaration[29150-29454]:MethodDeclaration[29155-29459]"
    }, {
      "left" : "public void actionPerformed(ActionEvent e)",
      "right" : "public void actionPerformed(ActionEvent e)",
      "info" : "MethodDeclaration[29564-29733]:MethodDeclaration[29569-29738]"
    }, {
      "left" : "public void actionPerformed(ActionEvent e)",
      "right" : "public void actionPerformed(ActionEvent e)",
      "info" : "MethodDeclaration[29842-30032]:MethodDeclaration[29847-30037]"
    }, {
      "left" : "public void actionPerformed(ActionEvent e)",
      "right" : "public void actionPerformed(ActionEvent e)",
      "info" : "MethodDeclaration[30161-30328]:MethodDeclaration[30166-30333]"
    }, {
      "left" : "public void actionPerformed(ActionEvent e)",
      "right" : "public void actionPerformed(ActionEvent e)",
      "info" : "MethodDeclaration[30456-30644]:MethodDeclaration[30461-30649]"
    }, {
      "left" : "public String getText()",
      "right" : "public String getText()",
      "info" : "MethodDeclaration[30660-30708]:MethodDeclaration[30665-30713]"
    }, {
      "left" : "public void dispose()",
      "right" : "public void dispose()",
      "info" : "MethodDeclaration[30712-30929]:MethodDeclaration[30717-30934]"
    }, {
      "left" : "MyShowSettingsButton",
      "right" : "MyShowSettingsButton",
      "info" : "TypeDeclaration[30933-31693]:TypeDeclaration[30938-31698]"
    }, {
      "left" : "private MyShowSettingsButton()",
      "right" : "private MyShowSettingsButton()",
      "info" : "MethodDeclaration[30996-31176]:MethodDeclaration[31001-31181]"
    }, {
      "left" : "private MyShowSettingsButton(AnAction action, Presentation presentation, String place, @NotNull Dimension minimumSize)",
      "right" : "private MyShowSettingsButton(AnAction action, Presentation presentation, String place, @NotNull Dimension minimumSize)",
      "info" : "MethodDeclaration[31182-31426]:MethodDeclaration[31187-31431]"
    }, {
      "left" : "private void hideSettings()",
      "right" : "private void hideSettings()",
      "info" : "MethodDeclaration[31432-31689]:MethodDeclaration[31437-31694]"
    }, {
      "left" : "MyShowSettingsAction",
      "right" : "MyShowSettingsAction",
      "info" : "TypeDeclaration[31697-32284]:TypeDeclaration[31702-32289]"
    }, {
      "left" : "public boolean isSelected(AnActionEvent e)",
      "right" : "public boolean isSelected(AnActionEvent e)",
      "info" : "MethodDeclaration[31760-31866]:MethodDeclaration[31765-31871]"
    }, {
      "left" : "public void setSelected(AnActionEvent e, boolean state)",
      "right" : "public void setSelected(AnActionEvent e, boolean state)",
      "info" : "MethodDeclaration[31872-32280]:MethodDeclaration[31877-32285]"
    }, {
      "left" : "MyDictionary",
      "right" : "MyDictionary",
      "info" : "TypeDeclaration[32288-32984]:TypeDeclaration[32293-32989]"
    }, {
      "left" : "public int size()",
      "right" : "public int size()",
      "info" : "MethodDeclaration[32368-32456]:MethodDeclaration[32373-32461]"
    }, {
      "left" : "public boolean isEmpty()",
      "right" : "public boolean isEmpty()",
      "info" : "MethodDeclaration[32462-32557]:MethodDeclaration[32467-32562]"
    }, {
      "left" : "public Enumeration<K> keys()",
      "right" : "public Enumeration<K> keys()",
      "info" : "MethodDeclaration[32563-32662]:MethodDeclaration[32568-32667]"
    }, {
      "left" : "public Enumeration<V> elements()",
      "right" : "public Enumeration<V> elements()",
      "info" : "MethodDeclaration[32668-32771]:MethodDeclaration[32673-32776]"
    }, {
      "left" : "public V put(K key, V value)",
      "right" : "public V put(K key, V value)",
      "info" : "MethodDeclaration[32777-32876]:MethodDeclaration[32782-32881]"
    }, {
      "left" : "public V remove(Object key)",
      "right" : "public V remove(Object key)",
      "info" : "MethodDeclaration[32882-32980]:MethodDeclaration[32887-32985]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4345-4686]:Block[4345-4686]"
    }, {
      "left" : "if (myManager == null || key == null)",
      "right" : "if (myManager == null || key == null)",
      "info" : "IfStatement[4353-4403]:IfStatement[4353-4403]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[4391-4403]:ReturnStatement[4391-4403]"
    }, {
      "left" : "PsiElement element = getElement();",
      "right" : "PsiElement element = getElement();",
      "info" : "VariableDeclarationStatement[4410-4444]:VariableDeclarationStatement[4410-4444]"
    }, {
      "left" : "if (element == null)",
      "right" : "if (element == null)",
      "info" : "IfStatement[4451-4484]:IfStatement[4451-4484]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[4472-4484]:ReturnStatement[4472-4484]"
    }, {
      "left" : "URL url = (URL)key;",
      "right" : "URL url = (URL)key;",
      "info" : "VariableDeclarationStatement[4491-4510]:VariableDeclarationStatement[4491-4510]"
    }, {
      "left" : "Image inMemory = myManager.getElementImage(element, url.toExternalForm());",
      "right" : "Image inMemory = myManager.getElementImage(element, url.toExternalForm());",
      "info" : "VariableDeclarationStatement[4517-4591]:VariableDeclarationStatement[4517-4591]"
    }, {
      "left" : "return inMemory != null ? inMemory : Toolkit.getDefaultToolkit().createImage(url);",
      "right" : "return inMemory != null ? inMemory : Toolkit.getDefaultToolkit().createImage(url);",
      "info" : "ReturnStatement[4598-4680]:ReturnStatement[4598-4680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4930-5023]:Block[4930-5023]"
    }, {
      "left" : "this.element = element;",
      "right" : "this.element = element;",
      "info" : "ExpressionStatement[4938-4961]:ExpressionStatement[4938-4961]"
    }, {
      "left" : "this.text = text;",
      "right" : "this.text = text;",
      "info" : "ExpressionStatement[4968-4985]:ExpressionStatement[4968-4985]"
    }, {
      "left" : "this.viewRect = viewRect;",
      "right" : "this.viewRect = viewRect;",
      "info" : "ExpressionStatement[4992-5017]:ExpressionStatement[4992-5017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5585-5638]:Block[5585-5638]"
    }, {
      "left" : "return myScrollPane.requestFocusInWindow();",
      "right" : "return myScrollPane.requestFocusInWindow();",
      "info" : "ReturnStatement[5591-5634]:ReturnStatement[5591-5634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5682-5720]:Block[5682-5720]"
    }, {
      "left" : "myScrollPane.requestFocus();",
      "right" : "myScrollPane.requestFocus();",
      "info" : "ExpressionStatement[5688-5716]:ExpressionStatement[5688-5716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6012-6057]:Block[6012-6057]"
    }, {
      "left" : "return new HTMLEditorKit();",
      "right" : "return new HTMLEditorKit();",
      "info" : "ReturnStatement[6022-6049]:ReturnStatement[6022-6049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6135-7038]:Block[6135-7038]"
    }, {
      "left" : "int em = myEditorPane.getFont().getSize();",
      "right" : "int em = myEditorPane.getFont().getSize();",
      "info" : "VariableDeclarationStatement[6145-6187]:VariableDeclarationStatement[6145-6187]"
    }, {
      "left" : "int prefWidth = PREFERRED_WIDTH_EM * em;",
      "right" : "int prefWidth = PREFERRED_WIDTH_EM * em;",
      "info" : "VariableDeclarationStatement[6196-6236]:VariableDeclarationStatement[6196-6236]"
    }, {
      "left" : "int prefHeightMin = PREFERRED_HEIGHT_MIN_EM * em;",
      "right" : "int prefHeightMin = PREFERRED_HEIGHT_MIN_EM * em;",
      "info" : "VariableDeclarationStatement[6245-6294]:VariableDeclarationStatement[6245-6294]"
    }, {
      "left" : "int prefHeightMax = PREFERRED_HEIGHT_MAX_EM * em;",
      "right" : "int prefHeightMax = PREFERRED_HEIGHT_MAX_EM * em;",
      "info" : "VariableDeclarationStatement[6303-6352]:VariableDeclarationStatement[6303-6352]"
    }, {
      "left" : "if (getWidth() == 0 || getHeight() == 0)",
      "right" : "if (getWidth() == 0 || getHeight() == 0)",
      "info" : "IfStatement[6362-6459]:IfStatement[6362-6459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6403-6459]:Block[6403-6459]"
    }, {
      "left" : "setSize(prefWidth, prefHeightMax);",
      "right" : "setSize(prefWidth, prefHeightMax);",
      "info" : "ExpressionStatement[6415-6449]:ExpressionStatement[6415-6449]"
    }, {
      "left" : "Insets ins = myEditorPane.getInsets();",
      "right" : "Insets ins = myEditorPane.getInsets();",
      "info" : "VariableDeclarationStatement[6469-6507]:VariableDeclarationStatement[6469-6507]"
    }, {
      "left" : "View rootView = myEditorPane.getUI().getRootView(myEditorPane);",
      "right" : "View rootView = myEditorPane.getUI().getRootView(myEditorPane);",
      "info" : "VariableDeclarationStatement[6516-6579]:VariableDeclarationStatement[6516-6579]"
    }, {
      "left" : "rootView.setSize(prefWidth, prefHeightMax);",
      "right" : "rootView.setSize(prefWidth, prefHeightMax);",
      "info" : "ExpressionStatement[6588-6631]:ExpressionStatement[6588-6631]"
    }, {
      "left" : "int prefHeight = (int)rootView.getPreferredSpan(View.Y_AXIS) + ins.bottom + ins.top +\n                         myScrollPane.getHorizontalScrollBar().getMaximumSize().height;",
      "right" : "int prefHeight = (int)rootView.getPreferredSpan(View.Y_AXIS) + ins.bottom + ins.top +\n                         myScrollPane.getHorizontalScrollBar().getMaximumSize().height;",
      "info" : "VariableDeclarationStatement[6721-6894]:VariableDeclarationStatement[6721-6894]"
    }, {
      "left" : "prefHeight = Math.max(prefHeightMin, Math.min(prefHeightMax, prefHeight));",
      "right" : "prefHeight = Math.max(prefHeightMin, Math.min(prefHeightMax, prefHeight));",
      "info" : "ExpressionStatement[6903-6977]:ExpressionStatement[6903-6977]"
    }, {
      "left" : "return new Dimension(prefWidth, prefHeight);",
      "right" : "return new Dimension(prefWidth, prefHeight);",
      "info" : "ReturnStatement[6986-7030]:ReturnStatement[6986-7030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7169-7517]:Block[7169-7517]"
    }, {
      "left" : "KeyStroke keyStroke = KeyStroke.getKeyStrokeForEvent(e);",
      "right" : "KeyStroke keyStroke = KeyStroke.getKeyStrokeForEvent(e);",
      "info" : "VariableDeclarationStatement[7179-7235]:VariableDeclarationStatement[7179-7235]"
    }, {
      "left" : "ActionListener listener = myKeyboardActions.get(keyStroke);",
      "right" : "ActionListener listener = myKeyboardActions.get(keyStroke);",
      "info" : "VariableDeclarationStatement[7244-7303]:VariableDeclarationStatement[7244-7303]"
    }, {
      "left" : "if (listener != null)",
      "right" : "if (listener != null)",
      "info" : "IfStatement[7312-7475]:IfStatement[7312-7475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7334-7475]:Block[7334-7475]"
    }, {
      "left" : "listener.actionPerformed(new ActionEvent(DocumentationComponent.this, 0, \"\"));",
      "right" : "listener.actionPerformed(new ActionEvent(DocumentationComponent.this, 0, \"\"));",
      "info" : "ExpressionStatement[7346-7424]:ExpressionStatement[7346-7424]"
    }, {
      "left" : "e.consume();",
      "right" : "e.consume();",
      "info" : "ExpressionStatement[7435-7447]:ExpressionStatement[7435-7447]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7458-7465]:ReturnStatement[7458-7465]"
    }, {
      "left" : "super.processKeyEvent(e);",
      "right" : "super.processKeyEvent(e);",
      "info" : "ExpressionStatement[7484-7509]:ExpressionStatement[7484-7509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7583-7668]:Block[7583-7668]"
    }, {
      "left" : "GraphicsUtil.setupAntialiasing(g);",
      "right" : "GraphicsUtil.setupAntialiasing(g);",
      "info" : "ExpressionStatement[7593-7627]:ExpressionStatement[7593-7627]"
    }, {
      "left" : "super.paintComponent(g);",
      "right" : "super.paintComponent(g);",
      "info" : "ExpressionStatement[7636-7660]:ExpressionStatement[7636-7660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7730-7884]:Block[7730-7884]"
    }, {
      "left" : "super.setDocument(doc);",
      "right" : "super.setDocument(doc);",
      "info" : "ExpressionStatement[7740-7763]:ExpressionStatement[7740-7763]"
    }, {
      "left" : "if (doc instanceof StyledDocument)",
      "right" : "if (doc instanceof StyledDocument)",
      "info" : "IfStatement[7772-7876]:IfStatement[7772-7876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7807-7876]:Block[7807-7876]"
    }, {
      "left" : "doc.putProperty(\"imageCache\", myImageProvider);",
      "right" : "doc.putProperty(\"imageCache\", myImageProvider);",
      "info" : "ExpressionStatement[7819-7866]:ExpressionStatement[7819-7866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8016-8109]:Block[8016-8109]"
    }, {
      "left" : "return PlatformDataKeys.HELP_ID.is(dataId) ? DOCUMENTATION_TOPIC_ID : null;",
      "right" : "return PlatformDataKeys.HELP_ID.is(dataId) ? DOCUMENTATION_TOPIC_ID : null;",
      "info" : "ReturnStatement[8026-8101]:ReturnStatement[8026-8101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8517-9455]:Block[8522-9460]"
    }, {
      "left" : "if (!EditorSettingsExternalizable.getInstance().isWheelFontChangeEnabled() || !EditorUtil.isChangeFontSize(e))",
      "right" : "if (!EditorSettingsExternalizable.getInstance().isWheelFontChangeEnabled() || !EditorUtil.isChangeFontSize(e))",
      "info" : "IfStatement[8527-8710]:IfStatement[8532-8715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8638-8710]:Block[8643-8715]"
    }, {
      "left" : "super.processMouseWheelEvent(e);",
      "right" : "super.processMouseWheelEvent(e);",
      "info" : "ExpressionStatement[8650-8682]:ExpressionStatement[8655-8687]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[8693-8700]:ReturnStatement[8698-8705]"
    }, {
      "left" : "int change = Math.abs(e.getWheelRotation());",
      "right" : "int change = Math.abs(e.getWheelRotation());",
      "info" : "VariableDeclarationStatement[8720-8764]:VariableDeclarationStatement[8725-8769]"
    }, {
      "left" : "boolean increase = e.getWheelRotation() <= 0;",
      "right" : "boolean increase = e.getWheelRotation() <= 0;",
      "info" : "VariableDeclarationStatement[8773-8818]:VariableDeclarationStatement[8778-8823]"
    }, {
      "left" : "EditorColorsManager colorsManager = EditorColorsManager.getInstance();",
      "right" : "EditorColorsManager colorsManager = EditorColorsManager.getInstance();",
      "info" : "VariableDeclarationStatement[8827-8897]:VariableDeclarationStatement[8832-8902]"
    }, {
      "left" : "EditorColorsScheme scheme = colorsManager.getGlobalScheme();",
      "right" : "EditorColorsScheme scheme = colorsManager.getGlobalScheme();",
      "info" : "VariableDeclarationStatement[8906-8966]:VariableDeclarationStatement[8911-8971]"
    }, {
      "left" : "FontSize newFontSize = scheme.getQuickDocFontSize();",
      "right" : "FontSize newFontSize = scheme.getQuickDocFontSize();",
      "info" : "VariableDeclarationStatement[8975-9027]:VariableDeclarationStatement[8980-9032]"
    }, {
      "left" : "for (; change > 0; change--)",
      "right" : "for (; change > 0; change--)",
      "info" : "ForStatement[9036-9240]:ForStatement[9041-9245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9065-9240]:Block[9070-9245]"
    }, {
      "left" : "if (increase)",
      "right" : "if (increase)",
      "info" : "IfStatement[9077-9230]:IfStatement[9082-9235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9091-9152]:Block[9096-9157]"
    }, {
      "left" : "newFontSize = newFontSize.larger();",
      "right" : "newFontSize = newFontSize.larger();",
      "info" : "ExpressionStatement[9105-9140]:ExpressionStatement[9110-9145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9168-9230]:Block[9173-9235]"
    }, {
      "left" : "newFontSize = newFontSize.smaller();",
      "right" : "newFontSize = newFontSize.smaller();",
      "info" : "ExpressionStatement[9182-9218]:ExpressionStatement[9187-9223]"
    }, {
      "left" : "if (newFontSize == scheme.getQuickDocFontSize())",
      "right" : "if (newFontSize == scheme.getQuickDocFontSize())",
      "info" : "IfStatement[9250-9328]:IfStatement[9255-9333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9299-9328]:Block[9304-9333]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9311-9318]:ReturnStatement[9316-9323]"
    }, {
      "left" : "scheme.setQuickDocFontSize(newFontSize);",
      "right" : "scheme.setQuickDocFontSize(newFontSize);",
      "info" : "ExpressionStatement[9338-9378]:ExpressionStatement[9343-9383]"
    }, {
      "left" : "applyFontSize();",
      "right" : "applyFontSize();",
      "info" : "ExpressionStatement[9387-9403]:ExpressionStatement[9392-9408]"
    }, {
      "left" : "setFontSizeSliderSize(newFontSize);",
      "right" : "setFontSizeSliderSize(newFontSize);",
      "info" : "ExpressionStatement[9412-9447]:ExpressionStatement[9417-9452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9716-9804]:Block[9721-9809]"
    }, {
      "left" : "myManager.requestFocus();",
      "right" : "myManager.requestFocus();",
      "info" : "ExpressionStatement[9726-9751]:ExpressionStatement[9731-9756]"
    }, {
      "left" : "myShowSettingsButton.hideSettings();",
      "right" : "myShowSettingsButton.hideSettings();",
      "info" : "ExpressionStatement[9760-9796]:ExpressionStatement[9765-9801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9952-10017]:Block[9957-10022]"
    }, {
      "left" : "myEditorPane.removeMouseListener(mouseAdapter);",
      "right" : "myEditorPane.removeMouseListener(mouseAdapter);",
      "info" : "ExpressionStatement[9962-10009]:ExpressionStatement[9967-10014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10145-10410]:Block[10150-10415]"
    }, {
      "left" : "Component previouslyFocused = WindowManagerEx.getInstanceEx().getFocusedComponent(manager.getProject(getElement()));",
      "right" : "Component previouslyFocused = WindowManagerEx.getInstanceEx().getFocusedComponent(manager.getProject(getElement()));",
      "info" : "VariableDeclarationStatement[10155-10271]:VariableDeclarationStatement[10160-10276]"
    }, {
      "left" : "if (previouslyFocused != myEditorPane)",
      "right" : "if (previouslyFocused != myEditorPane)",
      "info" : "IfStatement[10281-10402]:IfStatement[10286-10407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10320-10402]:Block[10325-10407]"
    }, {
      "left" : "if (myHint != null && !myHint.isDisposed())",
      "right" : "if (myHint != null && !myHint.isDisposed())",
      "info" : "IfStatement[10332-10392]:IfStatement[10337-10397]"
    }, {
      "left" : "myHint.cancel();",
      "right" : "myHint.cancel();",
      "info" : "ExpressionStatement[10376-10392]:ExpressionStatement[10381-10397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10559-10624]:Block[10564-10629]"
    }, {
      "left" : "myEditorPane.removeFocusListener(focusAdapter);",
      "right" : "myEditorPane.removeFocusListener(focusAdapter);",
      "info" : "ExpressionStatement[10569-10616]:ExpressionStatement[10574-10621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10767-11202]:Block[10772-11207]"
    }, {
      "left" : "final Rectangle r = getBounds();",
      "right" : "final Rectangle r = getBounds();",
      "info" : "VariableDeclarationStatement[10777-10809]:VariableDeclarationStatement[10782-10814]"
    }, {
      "left" : "for (Component component : getComponents())",
      "right" : "for (Component component : getComponents())",
      "info" : "EnhancedForStatement[10818-11194]:EnhancedForStatement[10823-11199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10862-11194]:Block[10867-11199]"
    }, {
      "left" : "if (component instanceof JScrollPane)",
      "right" : "if (component instanceof JScrollPane)",
      "info" : "IfStatement[10874-11184]:IfStatement[10879-11189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10912-10983]:Block[10917-10988]"
    }, {
      "left" : "component.setBounds(0, 0, r.width, r.height);",
      "right" : "component.setBounds(0, 0, r.width, r.height);",
      "info" : "ExpressionStatement[10926-10971]:ExpressionStatement[10931-10976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10999-11184]:Block[11004-11189]"
    }, {
      "left" : "int insets = 2;",
      "right" : "int insets = 2;",
      "info" : "VariableDeclarationStatement[11013-11028]:VariableDeclarationStatement[11018-11033]"
    }, {
      "left" : "Dimension d = component.getPreferredSize();",
      "right" : "Dimension d = component.getPreferredSize();",
      "info" : "VariableDeclarationStatement[11041-11084]:VariableDeclarationStatement[11046-11089]"
    }, {
      "left" : "component.setBounds(r.width - d.width - insets, insets, d.width, d.height);",
      "right" : "component.setBounds(r.width - d.width - insets, insets, d.width, d.height);",
      "info" : "ExpressionStatement[11097-11172]:ExpressionStatement[11102-11177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11262-11564]:Block[11267-11569]"
    }, {
      "left" : "Dimension editorPaneSize = myEditorPane.getPreferredScrollableViewportSize();",
      "right" : "Dimension editorPaneSize = myEditorPane.getPreferredScrollableViewportSize();",
      "info" : "VariableDeclarationStatement[11272-11349]:VariableDeclarationStatement[11277-11354]"
    }, {
      "left" : "Dimension controlPanelSize = myControlPanel.getPreferredSize();",
      "right" : "Dimension controlPanelSize = myControlPanel.getPreferredSize();",
      "info" : "VariableDeclarationStatement[11358-11421]:VariableDeclarationStatement[11363-11426]"
    }, {
      "left" : "return new Dimension(Math.max(editorPaneSize.width, controlPanelSize.width), editorPaneSize.height + controlPanelSize.height);",
      "right" : "return new Dimension(Math.max(editorPaneSize.width, controlPanelSize.width), editorPaneSize.height + controlPanelSize.height);",
      "info" : "ReturnStatement[11430-11556]:ReturnStatement[11435-11561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13750-13968]:Block[13755-13973]"
    }, {
      "left" : "HyperlinkEvent.EventType type = e.getEventType();",
      "right" : "HyperlinkEvent.EventType type = e.getEventType();",
      "info" : "VariableDeclarationStatement[13760-13809]:VariableDeclarationStatement[13765-13814]"
    }, {
      "left" : "if (type == HyperlinkEvent.EventType.ACTIVATED)",
      "right" : "if (type == HyperlinkEvent.EventType.ACTIVATED)",
      "info" : "IfStatement[13818-13960]:IfStatement[13823-13965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13866-13960]:Block[13871-13965]"
    }, {
      "left" : "manager.navigateByLink(DocumentationComponent.this, e.getDescription());",
      "right" : "manager.navigateByLink(DocumentationComponent.this, e.getDescription());",
      "info" : "ExpressionStatement[13878-13950]:ExpressionStatement[13883-13955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14125-14199]:Block[14130-14204]"
    }, {
      "left" : "myEditorPane.removeHyperlinkListener(hyperlinkListener);",
      "right" : "myEditorPane.removeHyperlinkListener(hyperlinkListener);",
      "info" : "ExpressionStatement[14135-14191]:ExpressionStatement[14140-14196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14332-14362]:Block[14337-14367]"
    }, {
      "left" : "this(manager, null);",
      "right" : "this(manager, null);",
      "info" : "ConstructorInvocation[14338-14358]:ConstructorInvocation[14343-14363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14423-14859]:Block[14428-14864]"
    }, {
      "left" : "if (DocumentationManager.SELECTED_QUICK_DOC_TEXT.getName().equals(dataId))",
      "right" : "if (DocumentationManager.SELECTED_QUICK_DOC_TEXT.getName().equals(dataId))",
      "info" : "IfStatement[14429-14837]:IfStatement[14434-14842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14504-14837]:Block[14509-14842]"
    }, {
      "left" : "String selectedText = myEditorPane.getSelectedText();",
      "right" : "String selectedText = myEditorPane.getSelectedText();",
      "info" : "VariableDeclarationStatement[14698-14751]:VariableDeclarationStatement[14703-14756]"
    }, {
      "left" : "return selectedText == null? null : selectedText.replace((char)160, ' ');",
      "right" : "return selectedText == null? null : selectedText.replace((char)160, ' ');",
      "info" : "ReturnStatement[14758-14831]:ReturnStatement[14763-14836]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[14843-14855]:ReturnStatement[14848-14860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14904-16258]:Block[14909-16263]"
    }, {
      "left" : "JPanel result = new JPanel(new FlowLayout(FlowLayout.RIGHT, 3, 0));",
      "right" : "JPanel result = new JPanel(new FlowLayout(FlowLayout.RIGHT, 3, 0));",
      "info" : "VariableDeclarationStatement[14910-14977]:VariableDeclarationStatement[14915-14982]"
    }, {
      "left" : "result.add(new JLabel(ApplicationBundle.message(\"label.font.size\")));",
      "right" : "result.add(new JLabel(ApplicationBundle.message(\"label.font.size\")));",
      "info" : "ExpressionStatement[14982-15051]:ExpressionStatement[14987-15056]"
    }, {
      "left" : "myFontSizeSlider = new JSlider(SwingConstants.HORIZONTAL, 0, FontSize.values().length - 1, 3);",
      "right" : "myFontSizeSlider = new JSlider(SwingConstants.HORIZONTAL, 0, FontSize.values().length - 1, 3);",
      "info" : "ExpressionStatement[15056-15150]:ExpressionStatement[15061-15155]"
    }, {
      "left" : "myFontSizeSlider.setMinorTickSpacing(1);",
      "right" : "myFontSizeSlider.setMinorTickSpacing(1);",
      "info" : "ExpressionStatement[15155-15195]:ExpressionStatement[15160-15200]"
    }, {
      "left" : "myFontSizeSlider.setPaintTicks(true);",
      "right" : "myFontSizeSlider.setPaintTicks(true);",
      "info" : "ExpressionStatement[15200-15237]:ExpressionStatement[15205-15242]"
    }, {
      "left" : "myFontSizeSlider.setPaintTrack(true);",
      "right" : "myFontSizeSlider.setPaintTrack(true);",
      "info" : "ExpressionStatement[15242-15279]:ExpressionStatement[15247-15284]"
    }, {
      "left" : "myFontSizeSlider.setSnapToTicks(true);",
      "right" : "myFontSizeSlider.setSnapToTicks(true);",
      "info" : "ExpressionStatement[15284-15322]:ExpressionStatement[15289-15327]"
    }, {
      "left" : "UIUtil.setSliderIsFilled(myFontSizeSlider, true);",
      "right" : "UIUtil.setSliderIsFilled(myFontSizeSlider, true);",
      "info" : "ExpressionStatement[15327-15376]:ExpressionStatement[15332-15381]"
    }, {
      "left" : "result.add(myFontSizeSlider);",
      "right" : "result.add(myFontSizeSlider);",
      "info" : "ExpressionStatement[15381-15410]:ExpressionStatement[15386-15415]"
    }, {
      "left" : "result.setBorder(BorderFactory.createLineBorder(JBColor.border(), 1));",
      "right" : "result.setBorder(BorderFactory.createLineBorder(JBColor.border(), 1));",
      "info" : "ExpressionStatement[15415-15485]:ExpressionStatement[15420-15490]"
    }, {
      "left" : "myFontSizeSlider.addChangeListener(new ChangeListener() {\n      @Override\n      public void stateChanged(ChangeEvent e) {\n        if (myIgnoreFontSizeSliderChange) {\n          return;\n        }\n        EditorColorsManager colorsManager = EditorColorsManager.getInstance();\n        EditorColorsScheme scheme = colorsManager.getGlobalScheme();\n        scheme.setQuickDocFontSize(FontSize.values()[myFontSizeSlider.getValue()]);\n        applyFontSize();\n      }\n    });",
      "right" : "myFontSizeSlider.addChangeListener(new ChangeListener() {\n      @Override\n      public void stateChanged(ChangeEvent e) {\n        if (myIgnoreFontSizeSliderChange) {\n          return;\n        }\n        EditorColorsManager colorsManager = EditorColorsManager.getInstance();\n        EditorColorsScheme scheme = colorsManager.getGlobalScheme();\n        scheme.setQuickDocFontSize(FontSize.values()[myFontSizeSlider.getValue()]);\n        applyFontSize();\n      }\n    });",
      "info" : "ExpressionStatement[15491-15957]:ExpressionStatement[15496-15962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15611-15949]:Block[15616-15954]"
    }, {
      "left" : "if (myIgnoreFontSizeSliderChange)",
      "right" : "if (myIgnoreFontSizeSliderChange)",
      "info" : "IfStatement[15621-15684]:IfStatement[15626-15689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15655-15684]:Block[15660-15689]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[15667-15674]:ReturnStatement[15672-15679]"
    }, {
      "left" : "EditorColorsManager colorsManager = EditorColorsManager.getInstance();",
      "right" : "EditorColorsManager colorsManager = EditorColorsManager.getInstance();",
      "info" : "VariableDeclarationStatement[15693-15763]:VariableDeclarationStatement[15698-15768]"
    }, {
      "left" : "EditorColorsScheme scheme = colorsManager.getGlobalScheme();",
      "right" : "EditorColorsScheme scheme = colorsManager.getGlobalScheme();",
      "info" : "VariableDeclarationStatement[15772-15832]:VariableDeclarationStatement[15777-15837]"
    }, {
      "left" : "scheme.setQuickDocFontSize(FontSize.values()[myFontSizeSlider.getValue()]);",
      "right" : "scheme.setQuickDocFontSize(FontSize.values()[myFontSizeSlider.getValue()]);",
      "info" : "ExpressionStatement[15841-15916]:ExpressionStatement[15846-15921]"
    }, {
      "left" : "applyFontSize();",
      "right" : "applyFontSize();",
      "info" : "ExpressionStatement[15925-15941]:ExpressionStatement[15930-15946]"
    }, {
      "left" : "String tooltipText = ApplicationBundle.message(\"quickdoc.tooltip.font.size.by.wheel\");",
      "right" : "String tooltipText = ApplicationBundle.message(\"quickdoc.tooltip.font.size.by.wheel\");",
      "info" : "VariableDeclarationStatement[15963-16049]:VariableDeclarationStatement[15968-16054]"
    }, {
      "left" : "result.setToolTipText(tooltipText);",
      "right" : "result.setToolTipText(tooltipText);",
      "info" : "ExpressionStatement[16054-16089]:ExpressionStatement[16059-16094]"
    }, {
      "left" : "myFontSizeSlider.setToolTipText(tooltipText);",
      "right" : "myFontSizeSlider.setToolTipText(tooltipText);",
      "info" : "ExpressionStatement[16094-16139]:ExpressionStatement[16099-16144]"
    }, {
      "left" : "result.setVisible(false);",
      "right" : "result.setVisible(false);",
      "info" : "ExpressionStatement[16144-16169]:ExpressionStatement[16149-16174]"
    }, {
      "left" : "result.setOpaque(true);",
      "right" : "result.setOpaque(true);",
      "info" : "ExpressionStatement[16174-16197]:ExpressionStatement[16179-16202]"
    }, {
      "left" : "myFontSizeSlider.setOpaque(true);",
      "right" : "myFontSizeSlider.setOpaque(true);",
      "info" : "ExpressionStatement[16202-16235]:ExpressionStatement[16207-16240]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[16240-16254]:ReturnStatement[16245-16259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16316-16644]:Block[16321-16649]"
    }, {
      "left" : "myIgnoreFontSizeSliderChange = true;",
      "right" : "myIgnoreFontSizeSliderChange = true;",
      "info" : "ExpressionStatement[16322-16358]:ExpressionStatement[16327-16363]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16363-16640]:TryStatement[16368-16645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16367-16576]:Block[16372-16581]"
    }, {
      "left" : "FontSize[] sizes = FontSize.values();",
      "right" : "FontSize[] sizes = FontSize.values();",
      "info" : "VariableDeclarationStatement[16375-16412]:VariableDeclarationStatement[16380-16417]"
    }, {
      "left" : "for (int i = 0; i < sizes.length; i++)",
      "right" : "for (int i = 0; i < sizes.length; i++)",
      "info" : "ForStatement[16419-16570]:ForStatement[16424-16575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16458-16570]:Block[16463-16575]"
    }, {
      "left" : "if (fontSize == sizes[i])",
      "right" : "if (fontSize == sizes[i])",
      "info" : "IfStatement[16468-16562]:IfStatement[16473-16567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16494-16562]:Block[16499-16567]"
    }, {
      "left" : "myFontSizeSlider.setValue(i);",
      "right" : "myFontSizeSlider.setValue(i);",
      "info" : "ExpressionStatement[16506-16535]:ExpressionStatement[16511-16540]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16546-16552]:BreakStatement[16551-16557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16589-16640]:Block[16594-16645]"
    }, {
      "left" : "myIgnoreFontSizeSliderChange = false;",
      "right" : "myIgnoreFontSizeSliderChange = false;",
      "info" : "ExpressionStatement[16597-16634]:ExpressionStatement[16602-16639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16673-16700]:Block[16678-16705]"
    }, {
      "left" : "return myIsEmpty;",
      "right" : "return myIsEmpty;",
      "info" : "ReturnStatement[16679-16696]:ReturnStatement[16684-16701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16728-16755]:Block[16733-16760]"
    }, {
      "left" : "myIsEmpty = true;",
      "right" : "myIsEmpty = true;",
      "info" : "ExpressionStatement[16734-16751]:ExpressionStatement[16739-16756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16812-17023]:Block[16817-17028]"
    }, {
      "left" : "if (visible == myControlPanelVisible)",
      "right" : "if (visible == myControlPanelVisible)",
      "info" : "IfStatement[16818-16863]:IfStatement[16823-16868]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[16856-16863]:ReturnStatement[16861-16868]"
    }, {
      "left" : "if (visible)",
      "right" : "if (visible)",
      "info" : "IfStatement[16868-16982]:IfStatement[16873-16987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16881-16935]:Block[16886-16940]"
    }, {
      "left" : "add(myControlPanel, BorderLayout.NORTH);",
      "right" : "add(myControlPanel, BorderLayout.NORTH);",
      "info" : "ExpressionStatement[16889-16929]:ExpressionStatement[16894-16934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16945-16982]:Block[16950-16987]"
    }, {
      "left" : "remove(myControlPanel);",
      "right" : "remove(myControlPanel);",
      "info" : "ExpressionStatement[16953-16976]:ExpressionStatement[16958-16981]"
    }, {
      "left" : "myControlPanelVisible = visible;",
      "right" : "myControlPanelVisible = visible;",
      "info" : "ExpressionStatement[16987-17019]:ExpressionStatement[16992-17024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17061-17085]:Block[17066-17090]"
    }, {
      "left" : "myHint = hint;",
      "right" : "myHint = hint;",
      "info" : "ExpressionStatement[17067-17081]:ExpressionStatement[17072-17086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17122-17152]:Block[17127-17157]"
    }, {
      "left" : "return myEditorPane;",
      "right" : "return myEditorPane;",
      "info" : "ReturnStatement[17128-17148]:ReturnStatement[17133-17153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17199-17266]:Block[17204-17271]"
    }, {
      "left" : "return myElement != null ? myElement.getElement() : null;",
      "right" : "return myElement != null ? myElement.getElement() : null;",
      "info" : "ReturnStatement[17205-17262]:ReturnStatement[17210-17267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17326-17413]:Block[17331-17418]"
    }, {
      "left" : "myElement = element;",
      "right" : "myElement = element;",
      "info" : "ExpressionStatement[17332-17352]:ExpressionStatement[17337-17357]"
    }, {
      "left" : "myModificationCount = getCurrentModificationCount();",
      "right" : "myModificationCount = getCurrentModificationCount();",
      "info" : "ExpressionStatement[17357-17409]:ExpressionStatement[17362-17414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17445-17539]:Block[17450-17544]"
    }, {
      "left" : "return getElement() != null && myModificationCount == getCurrentModificationCount();",
      "right" : "return getElement() != null && myModificationCount == getCurrentModificationCount();",
      "info" : "ReturnStatement[17451-17535]:ReturnStatement[17456-17540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17586-17718]:Block[17591-17723]"
    }, {
      "left" : "return myElement != null ? PsiModificationTracker.SERVICE.getInstance(myElement.getProject()).getModificationCount() : -1;",
      "right" : "return myElement != null ? PsiModificationTracker.SERVICE.getInstance(myElement.getProject()).getModificationCount() : -1;",
      "info" : "ReturnStatement[17592-17714]:ReturnStatement[17597-17719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17793-17841]:Block[17798-17846]"
    }, {
      "left" : "myNavigateCallback = navigateCallback;",
      "right" : "myNavigateCallback = navigateCallback;",
      "info" : "ExpressionStatement[17799-17837]:ExpressionStatement[17804-17842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17930-17984]:Block[17935-17989]"
    }, {
      "left" : "setText(text, element, false, clearHistory);",
      "right" : "setText(text, element, false, clearHistory);",
      "info" : "ExpressionStatement[17936-17980]:ExpressionStatement[17941-17985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18078-18357]:Block[18083-18362]"
    }, {
      "left" : "if (clean && myElement != null)",
      "right" : "if (clean && myElement != null)",
      "info" : "IfStatement[18084-18192]:IfStatement[18089-18197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18116-18192]:Block[18121-18197]"
    }, {
      "left" : "myBackStack.push(saveContext());",
      "right" : "myBackStack.push(saveContext());",
      "info" : "ExpressionStatement[18124-18156]:ExpressionStatement[18129-18161]"
    }, {
      "left" : "myForwardStack.clear();",
      "right" : "myForwardStack.clear();",
      "info" : "ExpressionStatement[18163-18186]:ExpressionStatement[18168-18191]"
    }, {
      "left" : "updateControlState();",
      "right" : "updateControlState();",
      "info" : "ExpressionStatement[18197-18218]:ExpressionStatement[18202-18223]"
    }, {
      "left" : "setData(element, text, clearHistory, null);",
      "right" : "setData(element, text, clearHistory, null);",
      "info" : "ExpressionStatement[18223-18266]:ExpressionStatement[18228-18271]"
    }, {
      "left" : "if (clean)",
      "right" : "if (clean)",
      "info" : "IfStatement[18271-18314]:IfStatement[18276-18319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18282-18314]:Block[18287-18319]"
    }, {
      "left" : "myIsEmpty = false;",
      "right" : "myIsEmpty = false;",
      "info" : "ExpressionStatement[18290-18308]:ExpressionStatement[18295-18313]"
    }, {
      "left" : "if (clearHistory)",
      "right" : "if (clearHistory)",
      "info" : "IfStatement[18320-18353]:IfStatement[18325-18358]"
    }, {
      "left" : "clearHistory();",
      "right" : "clearHistory();",
      "info" : "ExpressionStatement[18338-18353]:ExpressionStatement[18343-18358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18418-18644]:Block[18423-18649]"
    }, {
      "left" : "PsiElement current = getElement();",
      "right" : "PsiElement current = getElement();",
      "info" : "VariableDeclarationStatement[18424-18458]:VariableDeclarationStatement[18429-18463]"
    }, {
      "left" : "if (current == null || !current.getManager().areElementsEquivalent(current, element))",
      "right" : "if (current == null || !current.getManager().areElementsEquivalent(current, element))",
      "info" : "IfStatement[18463-18556]:IfStatement[18468-18561]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[18549-18556]:ReturnStatement[18554-18561]"
    }, {
      "left" : "setText(text, element, false);",
      "right" : "setText(text, element, false);",
      "info" : "ExpressionStatement[18561-18591]:ExpressionStatement[18566-18596]"
    }, {
      "left" : "if (!myBackStack.empty())",
      "right" : "if (!myBackStack.empty())",
      "info" : "IfStatement[18596-18640]:IfStatement[18601-18645]"
    }, {
      "left" : "myBackStack.pop();",
      "right" : "myBackStack.pop();",
      "info" : "ExpressionStatement[18622-18640]:ExpressionStatement[18627-18645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18676-18734]:Block[18681-18739]"
    }, {
      "left" : "myForwardStack.clear();",
      "right" : "myForwardStack.clear();",
      "info" : "ExpressionStatement[18682-18705]:ExpressionStatement[18687-18710]"
    }, {
      "left" : "myBackStack.clear();",
      "right" : "myBackStack.clear();",
      "info" : "ExpressionStatement[18710-18730]:ExpressionStatement[18715-18735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18849-18925]:Block[18854-18930]"
    }, {
      "left" : "setData(_element, text, clearHistory, effectiveExternalUrl, null);",
      "right" : "setData(_element, text, clearHistory, effectiveExternalUrl, null);",
      "info" : "ExpressionStatement[18855-18921]:ExpressionStatement[18860-18926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19054-19699]:Block[19059-19704]"
    }, {
      "left" : "myEffectiveExternalUrl = effectiveExternalUrl;",
      "right" : "myEffectiveExternalUrl = effectiveExternalUrl;",
      "info" : "ExpressionStatement[19060-19106]:ExpressionStatement[19065-19111]"
    }, {
      "left" : "if (myElement != null)",
      "right" : "if (myElement != null)",
      "info" : "IfStatement[19111-19210]:IfStatement[19116-19215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19134-19210]:Block[19139-19215]"
    }, {
      "left" : "myBackStack.push(saveContext());",
      "right" : "myBackStack.push(saveContext());",
      "info" : "ExpressionStatement[19142-19174]:ExpressionStatement[19147-19179]"
    }, {
      "left" : "myForwardStack.clear();",
      "right" : "myForwardStack.clear();",
      "info" : "ExpressionStatement[19181-19204]:ExpressionStatement[19186-19209]"
    }, {
      "left" : "final SmartPsiElementPointer element = _element != null && _element.isValid()\n                                           ? SmartPointerManager.getInstance(_element.getProject()).createSmartPsiElementPointer(_element)\n                                           : null;",
      "right" : "final SmartPsiElementPointer element = _element != null && _element.isValid()\n                                           ? SmartPointerManager.getInstance(_element.getProject()).createSmartPsiElementPointer(_element)\n                                           : null;",
      "info" : "VariableDeclarationStatement[19216-19483]:VariableDeclarationStatement[19221-19488]"
    }, {
      "left" : "if (element != null)",
      "right" : "if (element != null)",
      "info" : "IfStatement[19489-19544]:IfStatement[19494-19549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19510-19544]:Block[19515-19549]"
    }, {
      "left" : "setElement(element);",
      "right" : "setElement(element);",
      "info" : "ExpressionStatement[19518-19538]:ExpressionStatement[19523-19543]"
    }, {
      "left" : "myIsEmpty = false;",
      "right" : "myIsEmpty = false;",
      "info" : "ExpressionStatement[19550-19568]:ExpressionStatement[19555-19573]"
    }, {
      "left" : "updateControlState();",
      "right" : "updateControlState();",
      "info" : "ExpressionStatement[19573-19594]:ExpressionStatement[19578-19599]"
    }, {
      "left" : "setDataInternal(element, text, new Rectangle(0, 0), ref);",
      "right" : "setDataInternal(element, text, new Rectangle(0, 0), ref);",
      "info" : "ExpressionStatement[19599-19656]:ExpressionStatement[19604-19661]"
    }, {
      "left" : "if (clearHistory)",
      "right" : "if (clearHistory)",
      "info" : "IfStatement[19662-19695]:IfStatement[19667-19700]"
    }, {
      "left" : "clearHistory();",
      "right" : "clearHistory();",
      "info" : "ExpressionStatement[19680-19695]:ExpressionStatement[19685-19700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19815-19878]:Block[19820-19883]"
    }, {
      "left" : "setDataInternal(element, text, viewRect, ref, false);",
      "right" : "setDataInternal(element, text, viewRect, ref, false);",
      "info" : "ExpressionStatement[19821-19874]:ExpressionStatement[19826-19879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20014-20673]:Block[20019-20678]"
    }, {
      "left" : "setElement(element);",
      "right" : "setElement(element);",
      "info" : "ExpressionStatement[20020-20040]:ExpressionStatement[20025-20045]"
    }, {
      "left" : "myEditorPane.setText(text);",
      "right" : "myEditorPane.setText(text);",
      "info" : "ExpressionStatement[20046-20073]:ExpressionStatement[20051-20078]"
    }, {
      "left" : "applyFontSize();",
      "right" : "applyFontSize();",
      "info" : "ExpressionStatement[20078-20094]:ExpressionStatement[20083-20099]"
    }, {
      "left" : "if (!myIsShown && myHint != null && !ApplicationManager.getApplication().isUnitTestMode())",
      "right" : "if (!myIsShown && myHint != null && !ApplicationManager.getApplication().isUnitTestMode())",
      "info" : "IfStatement[20104-20260]:IfStatement[20109-20265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20195-20260]:Block[20200-20265]"
    }, {
      "left" : "myManager.showHint(myHint);",
      "right" : "myManager.showHint(myHint);",
      "info" : "ExpressionStatement[20203-20230]:ExpressionStatement[20208-20235]"
    }, {
      "left" : "myIsShown = true;",
      "right" : "myIsShown = true;",
      "info" : "ExpressionStatement[20237-20254]:ExpressionStatement[20242-20259]"
    }, {
      "left" : "if (!skip)",
      "right" : "if (!skip)",
      "info" : "IfStatement[20266-20305]:IfStatement[20271-20310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20277-20305]:Block[20282-20310]"
    }, {
      "left" : "myText = text;",
      "right" : "myText = text;",
      "info" : "ExpressionStatement[20285-20299]:ExpressionStatement[20290-20304]"
    }, {
      "left" : "SwingUtilities.invokeLater(new Runnable() {\n      @Override\n      public void run() {\n        myEditorPane.scrollRectToVisible(viewRect); // if ref is defined but is not found in document, this provides a default location\n        if (ref != null) {\n          myEditorPane.scrollToReference(ref);\n        }\n      }\n    });",
      "right" : "SwingUtilities.invokeLater(new Runnable() {\n      @Override\n      public void run() {\n        myEditorPane.scrollRectToVisible(viewRect); // if ref is defined but is not found in document, this provides a default location\n        if (ref != null) {\n          myEditorPane.scrollToReference(ref);\n        }\n      }\n    });",
      "info" : "ExpressionStatement[20348-20669]:ExpressionStatement[20353-20674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20432-20661]:Block[20437-20666]"
    }, {
      "left" : "myEditorPane.scrollRectToVisible(viewRect);",
      "right" : "myEditorPane.scrollRectToVisible(viewRect);",
      "info" : "ExpressionStatement[20442-20485]:ExpressionStatement[20447-20490]"
    }, {
      "left" : "if (ref != null)",
      "right" : "if (ref != null)",
      "info" : "IfStatement[20578-20653]:IfStatement[20583-20658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20595-20653]:Block[20600-20658]"
    }, {
      "left" : "myEditorPane.scrollToReference(ref);",
      "right" : "myEditorPane.scrollToReference(ref);",
      "info" : "ExpressionStatement[20607-20643]:ExpressionStatement[20612-20648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20706-21520]:Block[20711-21525]"
    }, {
      "left" : "Document document = myEditorPane.getDocument();",
      "right" : "Document document = myEditorPane.getDocument();",
      "info" : "VariableDeclarationStatement[20712-20759]:VariableDeclarationStatement[20717-20764]"
    }, {
      "left" : "if (!(document instanceof StyledDocument))",
      "right" : "if (!(document instanceof StyledDocument))",
      "info" : "IfStatement[20764-20828]:IfStatement[20769-20833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20807-20828]:Block[20812-20833]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[20815-20822]:ReturnStatement[20820-20827]"
    }, {
      "left" : "final StyledDocument styledDocument = (StyledDocument)document;",
      "right" : "final StyledDocument styledDocument = (StyledDocument)document;",
      "info" : "VariableDeclarationStatement[20834-20897]:VariableDeclarationStatement[20839-20902]"
    }, {
      "left" : "EditorColorsManager colorsManager = EditorColorsManager.getInstance();",
      "right" : "EditorColorsManager colorsManager = EditorColorsManager.getInstance();",
      "info" : "VariableDeclarationStatement[20903-20973]:VariableDeclarationStatement[20908-20978]"
    }, {
      "left" : "EditorColorsScheme scheme = colorsManager.getGlobalScheme();",
      "right" : "EditorColorsScheme scheme = colorsManager.getGlobalScheme();",
      "info" : "VariableDeclarationStatement[20978-21038]:VariableDeclarationStatement[20983-21043]"
    }, {
      "left" : "StyleConstants.setFontSize(myFontSizeStyle, scheme.getQuickDocFontSize().getSize());",
      "right" : "StyleConstants.setFontSize(myFontSizeStyle, scheme.getQuickDocFontSize().getSize());",
      "info" : "ExpressionStatement[21043-21127]:ExpressionStatement[21048-21132]"
    }, {
      "left" : "if (Registry.is(\"documentation.component.editor.font\"))",
      "right" : "if (Registry.is(\"documentation.component.editor.font\"))",
      "info" : "IfStatement[21132-21276]:IfStatement[21137-21281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21188-21276]:Block[21193-21281]"
    }, {
      "left" : "StyleConstants.setFontFamily(myFontSizeStyle, scheme.getEditorFontName());",
      "right" : "StyleConstants.setFontFamily(myFontSizeStyle, scheme.getEditorFontName());",
      "info" : "ExpressionStatement[21196-21270]:ExpressionStatement[21201-21275]"
    }, {
      "left" : "ApplicationManager.getApplication().executeOnPooledThread(new Runnable() {\n      @Override\n      public void run() {\n        styledDocument.setCharacterAttributes(0, styledDocument.getLength(), myFontSizeStyle, false);\n      }\n    });",
      "right" : "ApplicationManager.getApplication().executeOnPooledThread(new Runnable() {\n      @Override\n      public void run() {\n        styledDocument.setCharacterAttributes(0, styledDocument.getLength(), myFontSizeStyle, false);\n      }\n    });",
      "info" : "ExpressionStatement[21282-21516]:ExpressionStatement[21287-21521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21397-21508]:Block[21402-21513]"
    }, {
      "left" : "styledDocument.setCharacterAttributes(0, styledDocument.getLength(), myFontSizeStyle, false);",
      "right" : "styledDocument.setCharacterAttributes(0, styledDocument.getLength(), myFontSizeStyle, false);",
      "info" : "ExpressionStatement[21407-21500]:ExpressionStatement[21412-21505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21546-21726]:Block[21551-21731]"
    }, {
      "left" : "if (myBackStack.isEmpty())",
      "right" : "if (myBackStack.isEmpty())",
      "info" : "IfStatement[21552-21586]:IfStatement[21557-21591]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[21579-21586]:ReturnStatement[21584-21591]"
    }, {
      "left" : "Context context = myBackStack.pop();",
      "right" : "Context context = myBackStack.pop();",
      "info" : "VariableDeclarationStatement[21591-21627]:VariableDeclarationStatement[21596-21632]"
    }, {
      "left" : "myForwardStack.push(saveContext());",
      "right" : "myForwardStack.push(saveContext());",
      "info" : "ExpressionStatement[21632-21667]:ExpressionStatement[21637-21672]"
    }, {
      "left" : "restoreContext(context);",
      "right" : "restoreContext(context);",
      "info" : "ExpressionStatement[21672-21696]:ExpressionStatement[21677-21701]"
    }, {
      "left" : "updateControlState();",
      "right" : "updateControlState();",
      "info" : "ExpressionStatement[21701-21722]:ExpressionStatement[21706-21727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21755-21938]:Block[21760-21943]"
    }, {
      "left" : "if (myForwardStack.isEmpty())",
      "right" : "if (myForwardStack.isEmpty())",
      "info" : "IfStatement[21761-21798]:IfStatement[21766-21803]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[21791-21798]:ReturnStatement[21796-21803]"
    }, {
      "left" : "Context context = myForwardStack.pop();",
      "right" : "Context context = myForwardStack.pop();",
      "info" : "VariableDeclarationStatement[21803-21842]:VariableDeclarationStatement[21808-21847]"
    }, {
      "left" : "myBackStack.push(saveContext());",
      "right" : "myBackStack.push(saveContext());",
      "info" : "ExpressionStatement[21847-21879]:ExpressionStatement[21852-21884]"
    }, {
      "left" : "restoreContext(context);",
      "right" : "restoreContext(context);",
      "info" : "ExpressionStatement[21884-21908]:ExpressionStatement[21889-21913]"
    }, {
      "left" : "updateControlState();",
      "right" : "updateControlState();",
      "info" : "ExpressionStatement[21913-21934]:ExpressionStatement[21918-21939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21972-22089]:Block[21977-22094]"
    }, {
      "left" : "Rectangle rect = myScrollPane.getViewport().getViewRect();",
      "right" : "Rectangle rect = myScrollPane.getViewport().getViewRect();",
      "info" : "VariableDeclarationStatement[21978-22036]:VariableDeclarationStatement[21983-22041]"
    }, {
      "left" : "return new Context(myElement, myText, rect);",
      "right" : "return new Context(myElement, myText, rect);",
      "info" : "ReturnStatement[22041-22085]:ReturnStatement[22046-22090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22138-22408]:Block[22143-22413]"
    }, {
      "left" : "setDataInternal(context.element, context.text, context.viewRect, null);",
      "right" : "setDataInternal(context.element, context.text, context.viewRect, null);",
      "info" : "ExpressionStatement[22144-22215]:ExpressionStatement[22149-22220]"
    }, {
      "left" : "if (myNavigateCallback != null)",
      "right" : "if (myNavigateCallback != null)",
      "info" : "IfStatement[22220-22404]:IfStatement[22225-22409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22252-22404]:Block[22257-22409]"
    }, {
      "left" : "final PsiElement element = context.element.getElement();",
      "right" : "final PsiElement element = context.element.getElement();",
      "info" : "VariableDeclarationStatement[22260-22316]:VariableDeclarationStatement[22265-22321]"
    }, {
      "left" : "if (element != null)",
      "right" : "if (element != null)",
      "info" : "IfStatement[22323-22398]:IfStatement[22328-22403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22344-22398]:Block[22349-22403]"
    }, {
      "left" : "myNavigateCallback.consume(element);",
      "right" : "myNavigateCallback.consume(element);",
      "info" : "ExpressionStatement[22354-22390]:ExpressionStatement[22359-22395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22446-22714]:Block[22451-22719]"
    }, {
      "left" : "ElementLocationUtil.customizeElementLabel(myElement != null ? myElement.getElement() : null, myElementLabel);",
      "right" : "ElementLocationUtil.customizeElementLabel(myElement != null ? myElement.getElement() : null, myElementLabel);",
      "info" : "ExpressionStatement[22452-22561]:ExpressionStatement[22457-22566]"
    }, {
      "left" : "myToolBar.updateActionsImmediately();",
      "right" : "myToolBar.updateActionsImmediately();",
      "info" : "ExpressionStatement[22566-22603]:ExpressionStatement[22571-22608]"
    }, {
      "left" : "setControlPanelVisible(true);",
      "right" : "setControlPanelVisible(true);",
      "info" : "ExpressionStatement[22625-22654]:ExpressionStatement[22630-22659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22828-22927]:Block[22833-22932]"
    }, {
      "left" : "super(CodeInsightBundle.message(\"javadoc.action.back\"), null, AllIcons.Actions.Back);",
      "right" : "super(CodeInsightBundle.message(\"javadoc.action.back\"), null, AllIcons.Actions.Back);",
      "info" : "SuperConstructorInvocation[22836-22921]:SuperConstructorInvocation[22841-22926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22992-23015]:Block[22997-23020]"
    }, {
      "left" : "goBack();",
      "right" : "goBack();",
      "info" : "ExpressionStatement[23000-23009]:ExpressionStatement[23005-23014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23071-23188]:Block[23076-23193]"
    }, {
      "left" : "Presentation presentation = e.getPresentation();",
      "right" : "Presentation presentation = e.getPresentation();",
      "info" : "VariableDeclarationStatement[23079-23127]:VariableDeclarationStatement[23084-23132]"
    }, {
      "left" : "presentation.setEnabled(!myBackStack.isEmpty());",
      "right" : "presentation.setEnabled(!myBackStack.isEmpty());",
      "info" : "ExpressionStatement[23134-23182]:ExpressionStatement[23139-23187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23312-23417]:Block[23317-23422]"
    }, {
      "left" : "super(CodeInsightBundle.message(\"javadoc.action.forward\"), null, AllIcons.Actions.Forward);",
      "right" : "super(CodeInsightBundle.message(\"javadoc.action.forward\"), null, AllIcons.Actions.Forward);",
      "info" : "SuperConstructorInvocation[23320-23411]:SuperConstructorInvocation[23325-23416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23482-23508]:Block[23487-23513]"
    }, {
      "left" : "goForward();",
      "right" : "goForward();",
      "info" : "ExpressionStatement[23490-23502]:ExpressionStatement[23495-23507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23564-23684]:Block[23569-23689]"
    }, {
      "left" : "Presentation presentation = e.getPresentation();",
      "right" : "Presentation presentation = e.getPresentation();",
      "info" : "VariableDeclarationStatement[23572-23620]:VariableDeclarationStatement[23577-23625]"
    }, {
      "left" : "presentation.setEnabled(!myForwardStack.isEmpty());",
      "right" : "presentation.setEnabled(!myForwardStack.isEmpty());",
      "info" : "ExpressionStatement[23627-23678]:ExpressionStatement[23632-23683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23818-23970]:Block[23823-23975]"
    }, {
      "left" : "super(true);",
      "right" : "super(true);",
      "info" : "SuperConstructorInvocation[23826-23838]:SuperConstructorInvocation[23831-23843]"
    }, {
      "left" : "getTemplatePresentation().setIcon(AllIcons.Actions.EditSource);",
      "right" : "getTemplatePresentation().setIcon(AllIcons.Actions.EditSource);",
      "info" : "ExpressionStatement[23845-23908]:ExpressionStatement[23850-23913]"
    }, {
      "left" : "getTemplatePresentation().setText(\"Edit Source\");",
      "right" : "getTemplatePresentation().setText(\"Edit Source\");",
      "info" : "ExpressionStatement[23915-23964]:ExpressionStatement[23920-23969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24035-24186]:Block[24040-24191]"
    }, {
      "left" : "super.actionPerformed(e);",
      "right" : "super.actionPerformed(e);",
      "info" : "ExpressionStatement[24043-24068]:ExpressionStatement[24048-24073]"
    }, {
      "left" : "final JBPopup hint = myHint;",
      "right" : "final JBPopup hint = myHint;",
      "info" : "VariableDeclarationStatement[24075-24103]:VariableDeclarationStatement[24080-24108]"
    }, {
      "left" : "if (hint != null && hint.isVisible())",
      "right" : "if (hint != null && hint.isVisible())",
      "info" : "IfStatement[24110-24180]:IfStatement[24115-24185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24148-24180]:Block[24153-24185]"
    }, {
      "left" : "hint.cancel();",
      "right" : "hint.cancel();",
      "info" : "ExpressionStatement[24158-24172]:ExpressionStatement[24163-24177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24285-24555]:Block[24290-24560]"
    }, {
      "left" : "SmartPsiElementPointer element = myElement;",
      "right" : "SmartPsiElementPointer element = myElement;",
      "info" : "VariableDeclarationStatement[24293-24336]:VariableDeclarationStatement[24298-24341]"
    }, {
      "left" : "if (element != null)",
      "right" : "if (element != null)",
      "info" : "IfStatement[24343-24530]:IfStatement[24348-24535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24364-24530]:Block[24369-24535]"
    }, {
      "left" : "PsiElement psiElement = element.getElement();",
      "right" : "PsiElement psiElement = element.getElement();",
      "info" : "VariableDeclarationStatement[24374-24419]:VariableDeclarationStatement[24379-24424]"
    }, {
      "left" : "return psiElement instanceof Navigatable ? new Navigatable[] {(Navigatable)psiElement} : null;",
      "right" : "return psiElement instanceof Navigatable ? new Navigatable[] {(Navigatable)psiElement} : null;",
      "info" : "ReturnStatement[24428-24522]:ReturnStatement[24433-24527]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24537-24549]:ReturnStatement[24542-24554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24689-24947]:Block[24694-24952]"
    }, {
      "left" : "super(CodeInsightBundle.message(\"javadoc.action.view.external\"), null, AllIcons.Actions.Browser_externalJavaDoc);",
      "right" : "super(CodeInsightBundle.message(\"javadoc.action.view.external\"), null, AllIcons.Actions.Browser_externalJavaDoc);",
      "info" : "SuperConstructorInvocation[24697-24810]:SuperConstructorInvocation[24702-24815]"
    }, {
      "left" : "registerCustomShortcutSet(ActionManager.getInstance().getAction(IdeActions.ACTION_EXTERNAL_JAVADOC).getShortcutSet(), null);",
      "right" : "registerCustomShortcutSet(ActionManager.getInstance().getAction(IdeActions.ACTION_EXTERNAL_JAVADOC).getShortcutSet(), null);",
      "info" : "ExpressionStatement[24817-24941]:ExpressionStatement[24822-24946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25012-25964]:Block[25017-25969]"
    }, {
      "left" : "if (myElement == null)",
      "right" : "if (myElement == null)",
      "info" : "IfStatement[25020-25068]:IfStatement[25025-25073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25043-25068]:Block[25048-25073]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[25053-25060]:ReturnStatement[25058-25065]"
    }, {
      "left" : "final PsiElement element = myElement.getElement();",
      "right" : "final PsiElement element = myElement.getElement();",
      "info" : "VariableDeclarationStatement[25076-25126]:VariableDeclarationStatement[25081-25131]"
    }, {
      "left" : "final DocumentationProvider provider = DocumentationManager.getProviderFromElement(element);",
      "right" : "final DocumentationProvider provider = DocumentationManager.getProviderFromElement(element);",
      "info" : "VariableDeclarationStatement[25133-25225]:VariableDeclarationStatement[25138-25230]"
    }, {
      "left" : "final PsiElement originalElement = DocumentationManager.getOriginalElement(element);",
      "right" : "final PsiElement originalElement = DocumentationManager.getOriginalElement(element);",
      "info" : "VariableDeclarationStatement[25232-25316]:VariableDeclarationStatement[25237-25321]"
    }, {
      "left" : "if (!(provider instanceof CompositeDocumentationProvider &&\n            ((CompositeDocumentationProvider)provider).handleExternal(element, originalElement)))",
      "right" : "if (!(provider instanceof CompositeDocumentationProvider &&\n            ((CompositeDocumentationProvider)provider).handleExternal(element, originalElement)))",
      "info" : "IfStatement[25323-25958]:IfStatement[25328-25963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25481-25958]:Block[25486-25963]"
    }, {
      "left" : "List<String> urls;",
      "right" : "List<String> urls;",
      "info" : "VariableDeclarationStatement[25491-25509]:VariableDeclarationStatement[25496-25514]"
    }, {
      "left" : "if (!StringUtil.isEmptyOrSpaces(myEffectiveExternalUrl))",
      "right" : "if (!StringUtil.isEmptyOrSpaces(myEffectiveExternalUrl))",
      "info" : "IfStatement[25518-25829]:IfStatement[25523-25834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25575-25654]:Block[25580-25659]"
    }, {
      "left" : "urls = Collections.singletonList(myEffectiveExternalUrl);",
      "right" : "urls = Collections.singletonList(myEffectiveExternalUrl);",
      "info" : "ExpressionStatement[25587-25644]:ExpressionStatement[25592-25649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25668-25829]:Block[25673-25834]"
    }, {
      "left" : "urls = provider.getUrlFor(element, originalElement);",
      "right" : "urls = provider.getUrlFor(element, originalElement);",
      "info" : "ExpressionStatement[25680-25732]:ExpressionStatement[25685-25737]"
    }, {
      "left" : "assert urls != null : provider;",
      "right" : "assert urls != null : provider;",
      "info" : "AssertStatement[25743-25774]:AssertStatement[25748-25779]"
    }, {
      "left" : "assert !urls.isEmpty() : provider;",
      "right" : "assert !urls.isEmpty() : provider;",
      "info" : "AssertStatement[25785-25819]:AssertStatement[25790-25824]"
    }, {
      "left" : "ExternalJavaDocAction.showExternalJavadoc(urls, PlatformDataKeys.CONTEXT_COMPONENT.getData(e.getDataContext()));",
      "right" : "ExternalJavaDocAction.showExternalJavadoc(urls, PlatformDataKeys.CONTEXT_COMPONENT.getData(e.getDataContext()));",
      "info" : "ExpressionStatement[25838-25950]:ExpressionStatement[25843-25955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26020-26830]:Block[26025-26835]"
    }, {
      "left" : "final Presentation presentation = e.getPresentation();",
      "right" : "final Presentation presentation = e.getPresentation();",
      "info" : "VariableDeclarationStatement[26028-26082]:VariableDeclarationStatement[26033-26087]"
    }, {
      "left" : "presentation.setEnabled(false);",
      "right" : "presentation.setEnabled(false);",
      "info" : "ExpressionStatement[26089-26120]:ExpressionStatement[26094-26125]"
    }, {
      "left" : "if (myElement != null)",
      "right" : "if (myElement != null)",
      "info" : "IfStatement[26127-26824]:IfStatement[26132-26829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26150-26824]:Block[26155-26829]"
    }, {
      "left" : "final PsiElement element = myElement.getElement();",
      "right" : "final PsiElement element = myElement.getElement();",
      "info" : "VariableDeclarationStatement[26160-26210]:VariableDeclarationStatement[26165-26215]"
    }, {
      "left" : "final DocumentationProvider provider = DocumentationManager.getProviderFromElement(element);",
      "right" : "final DocumentationProvider provider = DocumentationManager.getProviderFromElement(element);",
      "info" : "VariableDeclarationStatement[26219-26311]:VariableDeclarationStatement[26224-26316]"
    }, {
      "left" : "final PsiElement originalElement = DocumentationManager.getOriginalElement(element);",
      "right" : "final PsiElement originalElement = DocumentationManager.getOriginalElement(element);",
      "info" : "VariableDeclarationStatement[26320-26404]:VariableDeclarationStatement[26325-26409]"
    }, {
      "left" : "if (provider instanceof ExternalDocumentationProvider)",
      "right" : "if (provider instanceof ExternalDocumentationProvider)",
      "info" : "IfStatement[26413-26816]:IfStatement[26418-26821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26468-26622]:Block[26473-26627]"
    }, {
      "left" : "presentation.setEnabled(element != null && ((ExternalDocumentationProvider)provider).hasDocumentationFor(element, originalElement));",
      "right" : "presentation.setEnabled(element != null && ((ExternalDocumentationProvider)provider).hasDocumentationFor(element, originalElement));",
      "info" : "ExpressionStatement[26480-26612]:ExpressionStatement[26485-26617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26636-26816]:Block[26641-26821]"
    }, {
      "left" : "final List<String> urls = provider.getUrlFor(element, originalElement);",
      "right" : "final List<String> urls = provider.getUrlFor(element, originalElement);",
      "info" : "VariableDeclarationStatement[26648-26719]:VariableDeclarationStatement[26653-26724]"
    }, {
      "left" : "presentation.setEnabled(element != null && urls != null && !urls.isEmpty());",
      "right" : "presentation.setEnabled(element != null && urls != null && !urls.isEmpty());",
      "info" : "ExpressionStatement[26730-26806]:ExpressionStatement[26735-26811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26869-30656]:Block[26874-30661]"
    }, {
      "left" : "myExternalDocAction\n      .registerCustomShortcutSet(ActionManager.getInstance().getAction(IdeActions.ACTION_EXTERNAL_JAVADOC).getShortcutSet(), myEditorPane);",
      "right" : "myExternalDocAction\n      .registerCustomShortcutSet(ActionManager.getInstance().getAction(IdeActions.ACTION_EXTERNAL_JAVADOC).getShortcutSet(), myEditorPane);",
      "info" : "ExpressionStatement[26875-27034]:ExpressionStatement[26880-27039]"
    }, {
      "left" : "myKeyboardActions.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0), new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        JScrollBar scrollBar = myScrollPane.getVerticalScrollBar();\n        int value = scrollBar.getValue() - scrollBar.getUnitIncrement(-1);\n        value = Math.max(value, 0);\n        scrollBar.setValue(value);\n      }\n    });",
      "right" : "myKeyboardActions.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0), new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        JScrollBar scrollBar = myScrollPane.getVerticalScrollBar();\n        int value = scrollBar.getValue() - scrollBar.getUnitIncrement(-1);\n        value = Math.max(value, 0);\n        scrollBar.setValue(value);\n      }\n    });",
      "info" : "ExpressionStatement[27040-27424]:ExpressionStatement[27045-27429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27193-27416]:Block[27198-27421]"
    }, {
      "left" : "JScrollBar scrollBar = myScrollPane.getVerticalScrollBar();",
      "right" : "JScrollBar scrollBar = myScrollPane.getVerticalScrollBar();",
      "info" : "VariableDeclarationStatement[27203-27262]:VariableDeclarationStatement[27208-27267]"
    }, {
      "left" : "int value = scrollBar.getValue() - scrollBar.getUnitIncrement(-1);",
      "right" : "int value = scrollBar.getValue() - scrollBar.getUnitIncrement(-1);",
      "info" : "VariableDeclarationStatement[27271-27337]:VariableDeclarationStatement[27276-27342]"
    }, {
      "left" : "value = Math.max(value, 0);",
      "right" : "value = Math.max(value, 0);",
      "info" : "ExpressionStatement[27346-27373]:ExpressionStatement[27351-27378]"
    }, {
      "left" : "scrollBar.setValue(value);",
      "right" : "scrollBar.setValue(value);",
      "info" : "ExpressionStatement[27382-27408]:ExpressionStatement[27387-27413]"
    }, {
      "left" : "myKeyboardActions.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0), new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        JScrollBar scrollBar = myScrollPane.getVerticalScrollBar();\n        int value = scrollBar.getValue() + scrollBar.getUnitIncrement(+1);\n        value = Math.min(value, scrollBar.getMaximum());\n        scrollBar.setValue(value);\n      }\n    });",
      "right" : "myKeyboardActions.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0), new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        JScrollBar scrollBar = myScrollPane.getVerticalScrollBar();\n        int value = scrollBar.getValue() + scrollBar.getUnitIncrement(+1);\n        value = Math.min(value, scrollBar.getMaximum());\n        scrollBar.setValue(value);\n      }\n    });",
      "info" : "ExpressionStatement[27430-27837]:ExpressionStatement[27435-27842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27585-27829]:Block[27590-27834]"
    }, {
      "left" : "JScrollBar scrollBar = myScrollPane.getVerticalScrollBar();",
      "right" : "JScrollBar scrollBar = myScrollPane.getVerticalScrollBar();",
      "info" : "VariableDeclarationStatement[27595-27654]:VariableDeclarationStatement[27600-27659]"
    }, {
      "left" : "int value = scrollBar.getValue() + scrollBar.getUnitIncrement(+1);",
      "right" : "int value = scrollBar.getValue() + scrollBar.getUnitIncrement(+1);",
      "info" : "VariableDeclarationStatement[27663-27729]:VariableDeclarationStatement[27668-27734]"
    }, {
      "left" : "value = Math.min(value, scrollBar.getMaximum());",
      "right" : "value = Math.min(value, scrollBar.getMaximum());",
      "info" : "ExpressionStatement[27738-27786]:ExpressionStatement[27743-27791]"
    }, {
      "left" : "scrollBar.setValue(value);",
      "right" : "scrollBar.setValue(value);",
      "info" : "ExpressionStatement[27795-27821]:ExpressionStatement[27800-27826]"
    }, {
      "left" : "myKeyboardActions.put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, 0), new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        JScrollBar scrollBar = myScrollPane.getHorizontalScrollBar();\n        int value = scrollBar.getValue() - scrollBar.getUnitIncrement(-1);\n        value = Math.max(value, 0);\n        scrollBar.setValue(value);\n      }\n    });",
      "right" : "myKeyboardActions.put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, 0), new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        JScrollBar scrollBar = myScrollPane.getHorizontalScrollBar();\n        int value = scrollBar.getValue() - scrollBar.getUnitIncrement(-1);\n        value = Math.max(value, 0);\n        scrollBar.setValue(value);\n      }\n    });",
      "info" : "ExpressionStatement[27843-28231]:ExpressionStatement[27848-28236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27998-28223]:Block[28003-28228]"
    }, {
      "left" : "JScrollBar scrollBar = myScrollPane.getHorizontalScrollBar();",
      "right" : "JScrollBar scrollBar = myScrollPane.getHorizontalScrollBar();",
      "info" : "VariableDeclarationStatement[28008-28069]:VariableDeclarationStatement[28013-28074]"
    }, {
      "left" : "int value = scrollBar.getValue() - scrollBar.getUnitIncrement(-1);",
      "right" : "int value = scrollBar.getValue() - scrollBar.getUnitIncrement(-1);",
      "info" : "VariableDeclarationStatement[28078-28144]:VariableDeclarationStatement[28083-28149]"
    }, {
      "left" : "value = Math.max(value, 0);",
      "right" : "value = Math.max(value, 0);",
      "info" : "ExpressionStatement[28153-28180]:ExpressionStatement[28158-28185]"
    }, {
      "left" : "scrollBar.setValue(value);",
      "right" : "scrollBar.setValue(value);",
      "info" : "ExpressionStatement[28189-28215]:ExpressionStatement[28194-28220]"
    }, {
      "left" : "myKeyboardActions.put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, 0), new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        JScrollBar scrollBar = myScrollPane.getHorizontalScrollBar();\n        int value = scrollBar.getValue() + scrollBar.getUnitIncrement(+1);\n        value = Math.min(value, scrollBar.getMaximum());\n        scrollBar.setValue(value);\n      }\n    });",
      "right" : "myKeyboardActions.put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, 0), new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        JScrollBar scrollBar = myScrollPane.getHorizontalScrollBar();\n        int value = scrollBar.getValue() + scrollBar.getUnitIncrement(+1);\n        value = Math.min(value, scrollBar.getMaximum());\n        scrollBar.setValue(value);\n      }\n    });",
      "info" : "ExpressionStatement[28237-28647]:ExpressionStatement[28242-28652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28393-28639]:Block[28398-28644]"
    }, {
      "left" : "JScrollBar scrollBar = myScrollPane.getHorizontalScrollBar();",
      "right" : "JScrollBar scrollBar = myScrollPane.getHorizontalScrollBar();",
      "info" : "VariableDeclarationStatement[28403-28464]:VariableDeclarationStatement[28408-28469]"
    }, {
      "left" : "int value = scrollBar.getValue() + scrollBar.getUnitIncrement(+1);",
      "right" : "int value = scrollBar.getValue() + scrollBar.getUnitIncrement(+1);",
      "info" : "VariableDeclarationStatement[28473-28539]:VariableDeclarationStatement[28478-28544]"
    }, {
      "left" : "value = Math.min(value, scrollBar.getMaximum());",
      "right" : "value = Math.min(value, scrollBar.getMaximum());",
      "info" : "ExpressionStatement[28548-28596]:ExpressionStatement[28553-28601]"
    }, {
      "left" : "scrollBar.setValue(value);",
      "right" : "scrollBar.setValue(value);",
      "info" : "ExpressionStatement[28605-28631]:ExpressionStatement[28610-28636]"
    }, {
      "left" : "myKeyboardActions.put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_UP, 0), new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        JScrollBar scrollBar = myScrollPane.getVerticalScrollBar();\n        int value = scrollBar.getValue() - scrollBar.getBlockIncrement(-1);\n        value = Math.max(value, 0);\n        scrollBar.setValue(value);\n      }\n    });",
      "right" : "myKeyboardActions.put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_UP, 0), new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        JScrollBar scrollBar = myScrollPane.getVerticalScrollBar();\n        int value = scrollBar.getValue() - scrollBar.getBlockIncrement(-1);\n        value = Math.max(value, 0);\n        scrollBar.setValue(value);\n      }\n    });",
      "info" : "ExpressionStatement[28653-29043]:ExpressionStatement[28658-29048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28811-29035]:Block[28816-29040]"
    }, {
      "left" : "JScrollBar scrollBar = myScrollPane.getVerticalScrollBar();",
      "right" : "JScrollBar scrollBar = myScrollPane.getVerticalScrollBar();",
      "info" : "VariableDeclarationStatement[28821-28880]:VariableDeclarationStatement[28826-28885]"
    }, {
      "left" : "int value = scrollBar.getValue() - scrollBar.getBlockIncrement(-1);",
      "right" : "int value = scrollBar.getValue() - scrollBar.getBlockIncrement(-1);",
      "info" : "VariableDeclarationStatement[28889-28956]:VariableDeclarationStatement[28894-28961]"
    }, {
      "left" : "value = Math.max(value, 0);",
      "right" : "value = Math.max(value, 0);",
      "info" : "ExpressionStatement[28965-28992]:ExpressionStatement[28970-28997]"
    }, {
      "left" : "scrollBar.setValue(value);",
      "right" : "scrollBar.setValue(value);",
      "info" : "ExpressionStatement[29001-29027]:ExpressionStatement[29006-29032]"
    }, {
      "left" : "myKeyboardActions.put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_DOWN, 0), new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        JScrollBar scrollBar = myScrollPane.getVerticalScrollBar();\n        int value = scrollBar.getValue() + scrollBar.getBlockIncrement(+1);\n        value = Math.min(value, scrollBar.getMaximum());\n        scrollBar.setValue(value);\n      }\n    });",
      "right" : "myKeyboardActions.put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_DOWN, 0), new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        JScrollBar scrollBar = myScrollPane.getVerticalScrollBar();\n        int value = scrollBar.getValue() + scrollBar.getBlockIncrement(+1);\n        value = Math.min(value, scrollBar.getMaximum());\n        scrollBar.setValue(value);\n      }\n    });",
      "info" : "ExpressionStatement[29049-29462]:ExpressionStatement[29054-29467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29209-29454]:Block[29214-29459]"
    }, {
      "left" : "JScrollBar scrollBar = myScrollPane.getVerticalScrollBar();",
      "right" : "JScrollBar scrollBar = myScrollPane.getVerticalScrollBar();",
      "info" : "VariableDeclarationStatement[29219-29278]:VariableDeclarationStatement[29224-29283]"
    }, {
      "left" : "int value = scrollBar.getValue() + scrollBar.getBlockIncrement(+1);",
      "right" : "int value = scrollBar.getValue() + scrollBar.getBlockIncrement(+1);",
      "info" : "VariableDeclarationStatement[29287-29354]:VariableDeclarationStatement[29292-29359]"
    }, {
      "left" : "value = Math.min(value, scrollBar.getMaximum());",
      "right" : "value = Math.min(value, scrollBar.getMaximum());",
      "info" : "ExpressionStatement[29363-29411]:ExpressionStatement[29368-29416]"
    }, {
      "left" : "scrollBar.setValue(value);",
      "right" : "scrollBar.setValue(value);",
      "info" : "ExpressionStatement[29420-29446]:ExpressionStatement[29425-29451]"
    }, {
      "left" : "myKeyboardActions.put(KeyStroke.getKeyStroke(KeyEvent.VK_HOME, 0), new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        JScrollBar scrollBar = myScrollPane.getHorizontalScrollBar();\n        scrollBar.setValue(0);\n      }\n    });",
      "right" : "myKeyboardActions.put(KeyStroke.getKeyStroke(KeyEvent.VK_HOME, 0), new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        JScrollBar scrollBar = myScrollPane.getHorizontalScrollBar();\n        scrollBar.setValue(0);\n      }\n    });",
      "info" : "ExpressionStatement[29468-29741]:ExpressionStatement[29473-29746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29623-29733]:Block[29628-29738]"
    }, {
      "left" : "JScrollBar scrollBar = myScrollPane.getHorizontalScrollBar();",
      "right" : "JScrollBar scrollBar = myScrollPane.getHorizontalScrollBar();",
      "info" : "VariableDeclarationStatement[29633-29694]:VariableDeclarationStatement[29638-29699]"
    }, {
      "left" : "scrollBar.setValue(0);",
      "right" : "scrollBar.setValue(0);",
      "info" : "ExpressionStatement[29703-29725]:ExpressionStatement[29708-29730]"
    }, {
      "left" : "myKeyboardActions.put(KeyStroke.getKeyStroke(KeyEvent.VK_END, 0), new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        JScrollBar scrollBar = myScrollPane.getHorizontalScrollBar();\n        scrollBar.setValue(scrollBar.getMaximum());\n      }\n    });",
      "right" : "myKeyboardActions.put(KeyStroke.getKeyStroke(KeyEvent.VK_END, 0), new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        JScrollBar scrollBar = myScrollPane.getHorizontalScrollBar();\n        scrollBar.setValue(scrollBar.getMaximum());\n      }\n    });",
      "info" : "ExpressionStatement[29747-30040]:ExpressionStatement[29752-30045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29901-30032]:Block[29906-30037]"
    }, {
      "left" : "JScrollBar scrollBar = myScrollPane.getHorizontalScrollBar();",
      "right" : "JScrollBar scrollBar = myScrollPane.getHorizontalScrollBar();",
      "info" : "VariableDeclarationStatement[29911-29972]:VariableDeclarationStatement[29916-29977]"
    }, {
      "left" : "scrollBar.setValue(scrollBar.getMaximum());",
      "right" : "scrollBar.setValue(scrollBar.getMaximum());",
      "info" : "ExpressionStatement[29981-30024]:ExpressionStatement[29986-30029]"
    }, {
      "left" : "myKeyboardActions.put(KeyStroke.getKeyStroke(KeyEvent.VK_HOME, InputEvent.CTRL_MASK), new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        JScrollBar scrollBar = myScrollPane.getVerticalScrollBar();\n        scrollBar.setValue(0);\n      }\n    });",
      "right" : "myKeyboardActions.put(KeyStroke.getKeyStroke(KeyEvent.VK_HOME, InputEvent.CTRL_MASK), new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        JScrollBar scrollBar = myScrollPane.getVerticalScrollBar();\n        scrollBar.setValue(0);\n      }\n    });",
      "info" : "ExpressionStatement[30046-30336]:ExpressionStatement[30051-30341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30220-30328]:Block[30225-30333]"
    }, {
      "left" : "JScrollBar scrollBar = myScrollPane.getVerticalScrollBar();",
      "right" : "JScrollBar scrollBar = myScrollPane.getVerticalScrollBar();",
      "info" : "VariableDeclarationStatement[30230-30289]:VariableDeclarationStatement[30235-30294]"
    }, {
      "left" : "scrollBar.setValue(0);",
      "right" : "scrollBar.setValue(0);",
      "info" : "ExpressionStatement[30298-30320]:ExpressionStatement[30303-30325]"
    }, {
      "left" : "myKeyboardActions.put(KeyStroke.getKeyStroke(KeyEvent.VK_END, InputEvent.CTRL_MASK), new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        JScrollBar scrollBar = myScrollPane.getVerticalScrollBar();\n        scrollBar.setValue(scrollBar.getMaximum());\n      }\n    });",
      "right" : "myKeyboardActions.put(KeyStroke.getKeyStroke(KeyEvent.VK_END, InputEvent.CTRL_MASK), new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        JScrollBar scrollBar = myScrollPane.getVerticalScrollBar();\n        scrollBar.setValue(scrollBar.getMaximum());\n      }\n    });",
      "info" : "ExpressionStatement[30342-30652]:ExpressionStatement[30347-30657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30515-30644]:Block[30520-30649]"
    }, {
      "left" : "JScrollBar scrollBar = myScrollPane.getVerticalScrollBar();",
      "right" : "JScrollBar scrollBar = myScrollPane.getVerticalScrollBar();",
      "info" : "VariableDeclarationStatement[30525-30584]:VariableDeclarationStatement[30530-30589]"
    }, {
      "left" : "scrollBar.setValue(scrollBar.getMaximum());",
      "right" : "scrollBar.setValue(scrollBar.getMaximum());",
      "info" : "ExpressionStatement[30593-30636]:ExpressionStatement[30598-30641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30684-30708]:Block[30689-30713]"
    }, {
      "left" : "return myText;",
      "right" : "return myText;",
      "info" : "ReturnStatement[30690-30704]:ReturnStatement[30695-30709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30746-30929]:Block[30751-30934]"
    }, {
      "left" : "myBackStack.clear();",
      "right" : "myBackStack.clear();",
      "info" : "ExpressionStatement[30752-30772]:ExpressionStatement[30757-30777]"
    }, {
      "left" : "myForwardStack.clear();",
      "right" : "myForwardStack.clear();",
      "info" : "ExpressionStatement[30777-30800]:ExpressionStatement[30782-30805]"
    }, {
      "left" : "myKeyboardActions.clear();",
      "right" : "myKeyboardActions.clear();",
      "info" : "ExpressionStatement[30805-30831]:ExpressionStatement[30810-30836]"
    }, {
      "left" : "myElement = null;",
      "right" : "myElement = null;",
      "info" : "ExpressionStatement[30836-30853]:ExpressionStatement[30841-30858]"
    }, {
      "left" : "myManager = null;",
      "right" : "myManager = null;",
      "info" : "ExpressionStatement[30858-30875]:ExpressionStatement[30863-30880]"
    }, {
      "left" : "myHint = null;",
      "right" : "myHint = null;",
      "info" : "ExpressionStatement[30880-30894]:ExpressionStatement[30885-30899]"
    }, {
      "left" : "myNavigateCallback = null;",
      "right" : "myNavigateCallback = null;",
      "info" : "ExpressionStatement[30899-30925]:ExpressionStatement[30904-30930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31027-31176]:Block[31032-31181]"
    }, {
      "left" : "this(new MyShowSettingsAction(), new Presentation(), ActionPlaces.JAVADOC_INPLACE_SETTINGS, ActionToolbar.DEFAULT_MINIMUM_BUTTON_SIZE);",
      "right" : "this(new MyShowSettingsAction(), new Presentation(), ActionPlaces.JAVADOC_INPLACE_SETTINGS, ActionToolbar.DEFAULT_MINIMUM_BUTTON_SIZE);",
      "info" : "ConstructorInvocation[31035-31170]:ConstructorInvocation[31040-31175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31301-31426]:Block[31306-31431]"
    }, {
      "left" : "super(action, presentation, place, minimumSize);",
      "right" : "super(action, presentation, place, minimumSize);",
      "info" : "SuperConstructorInvocation[31309-31357]:SuperConstructorInvocation[31314-31362]"
    }, {
      "left" : "myPresentation.setIcon(AllIcons.General.SecondaryGroup);",
      "right" : "myPresentation.setIcon(AllIcons.General.SecondaryGroup);",
      "info" : "ExpressionStatement[31364-31420]:ExpressionStatement[31369-31425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31460-31689]:Block[31465-31694]"
    }, {
      "left" : "if (!mySettingsPanel.isVisible())",
      "right" : "if (!mySettingsPanel.isVisible())",
      "info" : "IfStatement[31468-31527]:IfStatement[31473-31532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31502-31527]:Block[31507-31532]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[31512-31519]:ReturnStatement[31517-31524]"
    }, {
      "left" : "AnActionEvent event = AnActionEvent.createFromDataContext(myPlace, myPresentation, DataContext.EMPTY_CONTEXT);",
      "right" : "AnActionEvent event = AnActionEvent.createFromDataContext(myPlace, myPresentation, DataContext.EMPTY_CONTEXT);",
      "info" : "VariableDeclarationStatement[31534-31644]:VariableDeclarationStatement[31539-31649]"
    }, {
      "left" : "myAction.actionPerformed(event);",
      "right" : "myAction.actionPerformed(event);",
      "info" : "ExpressionStatement[31651-31683]:ExpressionStatement[31656-31688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31817-31866]:Block[31822-31871]"
    }, {
      "left" : "return mySettingsPanel.isVisible();",
      "right" : "return mySettingsPanel.isVisible();",
      "info" : "ReturnStatement[31825-31860]:ReturnStatement[31830-31865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31942-32280]:Block[31947-32285]"
    }, {
      "left" : "if (!state)",
      "right" : "if (!state)",
      "info" : "IfStatement[31950-32030]:IfStatement[31955-32035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31962-32030]:Block[31967-32035]"
    }, {
      "left" : "mySettingsPanel.setVisible(false);",
      "right" : "mySettingsPanel.setVisible(false);",
      "info" : "ExpressionStatement[31972-32006]:ExpressionStatement[31977-32011]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[32015-32022]:ReturnStatement[32020-32027]"
    }, {
      "left" : "EditorColorsManager colorsManager = EditorColorsManager.getInstance();",
      "right" : "EditorColorsManager colorsManager = EditorColorsManager.getInstance();",
      "info" : "VariableDeclarationStatement[32038-32108]:VariableDeclarationStatement[32043-32113]"
    }, {
      "left" : "EditorColorsScheme scheme = colorsManager.getGlobalScheme();",
      "right" : "EditorColorsScheme scheme = colorsManager.getGlobalScheme();",
      "info" : "VariableDeclarationStatement[32115-32175]:VariableDeclarationStatement[32120-32180]"
    }, {
      "left" : "setFontSizeSliderSize(scheme.getQuickDocFontSize());",
      "right" : "setFontSizeSliderSize(scheme.getQuickDocFontSize());",
      "info" : "ExpressionStatement[32182-32234]:ExpressionStatement[32187-32239]"
    }, {
      "left" : "mySettingsPanel.setVisible(true);",
      "right" : "mySettingsPanel.setVisible(true);",
      "info" : "ExpressionStatement[32241-32274]:ExpressionStatement[32246-32279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32400-32456]:Block[32405-32461]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[32408-32450]:ThrowStatement[32413-32455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32501-32557]:Block[32506-32562]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[32509-32551]:ThrowStatement[32514-32556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32606-32662]:Block[32611-32667]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[32614-32656]:ThrowStatement[32619-32661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32715-32771]:Block[32720-32776]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[32723-32765]:ThrowStatement[32728-32770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32820-32876]:Block[32825-32881]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[32828-32870]:ThrowStatement[32833-32875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32924-32980]:Block[32929-32985]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[32932-32974]:ThrowStatement[32937-32979]"
    } ]
  },
  "interFileMappings" : { }
}