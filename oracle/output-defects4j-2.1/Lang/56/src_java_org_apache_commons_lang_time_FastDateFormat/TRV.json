{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[3288-3436]:FieldDeclaration[3288-3436]"
    }, {
      "left" : "public static final int FULL = DateFormat.FULL;",
      "right" : "public static final int FULL = DateFormat.FULL;",
      "info" : "FieldDeclaration[3442-3554]:FieldDeclaration[3442-3554]"
    }, {
      "left" : "public static final int LONG = DateFormat.LONG;",
      "right" : "public static final int LONG = DateFormat.LONG;",
      "info" : "FieldDeclaration[3559-3671]:FieldDeclaration[3559-3671]"
    }, {
      "left" : "public static final int MEDIUM = DateFormat.MEDIUM;",
      "right" : "public static final int MEDIUM = DateFormat.MEDIUM;",
      "info" : "FieldDeclaration[3676-3794]:FieldDeclaration[3676-3794]"
    }, {
      "left" : "public static final int SHORT = DateFormat.SHORT;",
      "right" : "public static final int SHORT = DateFormat.SHORT;",
      "info" : "FieldDeclaration[3799-3914]:FieldDeclaration[3799-3914]"
    }, {
      "left" : "private static String cDefaultPattern;",
      "right" : "private static String cDefaultPattern;",
      "info" : "FieldDeclaration[3924-3962]:FieldDeclaration[3924-3962]"
    }, {
      "left" : "private static Map cInstanceCache = new HashMap(7);",
      "right" : "private static Map cInstanceCache = new HashMap(7);",
      "info" : "FieldDeclaration[3968-4019]:FieldDeclaration[3968-4019]"
    }, {
      "left" : "private static Map cDateInstanceCache = new HashMap(7);",
      "right" : "private static Map cDateInstanceCache = new HashMap(7);",
      "info" : "FieldDeclaration[4024-4079]:FieldDeclaration[4024-4079]"
    }, {
      "left" : "private static Map cTimeInstanceCache = new HashMap(7);",
      "right" : "private static Map cTimeInstanceCache = new HashMap(7);",
      "info" : "FieldDeclaration[4084-4139]:FieldDeclaration[4084-4139]"
    }, {
      "left" : "private static Map cDateTimeInstanceCache = new HashMap(7);",
      "right" : "private static Map cDateTimeInstanceCache = new HashMap(7);",
      "info" : "FieldDeclaration[4144-4203]:FieldDeclaration[4144-4203]"
    }, {
      "left" : "private static Map cTimeZoneDisplayCache = new HashMap(7);",
      "right" : "private static Map cTimeZoneDisplayCache = new HashMap(7);",
      "info" : "FieldDeclaration[4208-4266]:FieldDeclaration[4208-4266]"
    }, {
      "left" : "private final String mPattern;",
      "right" : "private final String mPattern;",
      "info" : "FieldDeclaration[4272-4338]:FieldDeclaration[4272-4338]"
    }, {
      "left" : "private final TimeZone mTimeZone;",
      "right" : "private final TimeZone mTimeZone;",
      "info" : "FieldDeclaration[4343-4414]:FieldDeclaration[4343-4414]"
    }, {
      "left" : "private final boolean mTimeZoneForced;",
      "right" : "private final boolean mTimeZoneForced;",
      "info" : "FieldDeclaration[4419-4530]:FieldDeclaration[4419-4530]"
    }, {
      "left" : "private final Locale mLocale;",
      "right" : "private final Locale mLocale;",
      "info" : "FieldDeclaration[4535-4599]:FieldDeclaration[4535-4599]"
    }, {
      "left" : "private final boolean mLocaleForced;",
      "right" : "private final boolean mLocaleForced;",
      "info" : "FieldDeclaration[4604-4705]:FieldDeclaration[4604-4705]"
    }, {
      "left" : "public static FastDateFormat getInstance()",
      "right" : "public static FastDateFormat getInstance()",
      "info" : "MethodDeclaration[4946-5214]:MethodDeclaration[4966-5234]"
    }, {
      "left" : "public static FastDateFormat getInstance(String pattern)",
      "right" : "public static FastDateFormat getInstance(String pattern)",
      "info" : "MethodDeclaration[5220-5653]:MethodDeclaration[5240-5673]"
    }, {
      "left" : "public static FastDateFormat getInstance(String pattern, TimeZone timeZone)",
      "right" : "public static FastDateFormat getInstance(String pattern, TimeZone timeZone)",
      "info" : "MethodDeclaration[5659-6197]:MethodDeclaration[5679-6217]"
    }, {
      "left" : "public static FastDateFormat getInstance(String pattern, Locale locale)",
      "right" : "public static FastDateFormat getInstance(String pattern, Locale locale)",
      "info" : "MethodDeclaration[6203-6705]:MethodDeclaration[6223-6725]"
    }, {
      "left" : "public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale)",
      "right" : "public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale)",
      "info" : "MethodDeclaration[6711-7719]:MethodDeclaration[6731-7739]"
    }, {
      "left" : "public static FastDateFormat getDateInstance(int style)",
      "right" : "public static FastDateFormat getDateInstance(int style)",
      "info" : "MethodDeclaration[7803-8277]:MethodDeclaration[7823-8297]"
    }, {
      "left" : "public static FastDateFormat getDateInstance(int style, Locale locale)",
      "right" : "public static FastDateFormat getDateInstance(int style, Locale locale)",
      "info" : "MethodDeclaration[8283-8837]:MethodDeclaration[8303-8857]"
    }, {
      "left" : "public static FastDateFormat getDateInstance(int style, TimeZone timeZone)",
      "right" : "public static FastDateFormat getDateInstance(int style, TimeZone timeZone)",
      "info" : "MethodDeclaration[8843-9430]:MethodDeclaration[8863-9450]"
    }, {
      "left" : "public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale)",
      "right" : "public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale)",
      "info" : "MethodDeclaration[9435-10939]:MethodDeclaration[9455-10959]"
    }, {
      "left" : "public static FastDateFormat getTimeInstance(int style)",
      "right" : "public static FastDateFormat getTimeInstance(int style)",
      "info" : "MethodDeclaration[11023-11497]:MethodDeclaration[11043-11517]"
    }, {
      "left" : "public static FastDateFormat getTimeInstance(int style, Locale locale)",
      "right" : "public static FastDateFormat getTimeInstance(int style, Locale locale)",
      "info" : "MethodDeclaration[11503-12057]:MethodDeclaration[11523-12077]"
    }, {
      "left" : "public static FastDateFormat getTimeInstance(int style, TimeZone timeZone)",
      "right" : "public static FastDateFormat getTimeInstance(int style, TimeZone timeZone)",
      "info" : "MethodDeclaration[12067-12654]:MethodDeclaration[12087-12674]"
    }, {
      "left" : "public static synchronized FastDateFormat getTimeInstance(int style, TimeZone timeZone, Locale locale)",
      "right" : "public static synchronized FastDateFormat getTimeInstance(int style, TimeZone timeZone, Locale locale)",
      "info" : "MethodDeclaration[12664-14164]:MethodDeclaration[12684-14184]"
    }, {
      "left" : "public static FastDateFormat getDateTimeInstance(\n            int dateStyle, int timeStyle)",
      "right" : "public static FastDateFormat getDateTimeInstance(\n            int dateStyle, int timeStyle)",
      "info" : "MethodDeclaration[14248-14862]:MethodDeclaration[14268-14882]"
    }, {
      "left" : "public static FastDateFormat getDateTimeInstance(\n            int dateStyle, int timeStyle, Locale locale)",
      "right" : "public static FastDateFormat getDateTimeInstance(\n            int dateStyle, int timeStyle, Locale locale)",
      "info" : "MethodDeclaration[14872-15566]:MethodDeclaration[14892-15586]"
    }, {
      "left" : "public static FastDateFormat getDateTimeInstance(\n            int dateStyle, int timeStyle, TimeZone timeZone)",
      "right" : "public static FastDateFormat getDateTimeInstance(\n            int dateStyle, int timeStyle, TimeZone timeZone)",
      "info" : "MethodDeclaration[15576-16303]:MethodDeclaration[15596-16323]"
    }, {
      "left" : "public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n            Locale locale)",
      "right" : "public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n            Locale locale)",
      "info" : "MethodDeclaration[16312-18015]:MethodDeclaration[16332-18035]"
    }, {
      "left" : "static synchronized String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale)",
      "right" : "static synchronized String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale)",
      "info" : "MethodDeclaration[18099-18966]:MethodDeclaration[18119-18986]"
    }, {
      "left" : "private static synchronized String getDefaultPattern()",
      "right" : "private static synchronized String getDefaultPattern()",
      "info" : "MethodDeclaration[18972-19280]:MethodDeclaration[18992-19300]"
    }, {
      "left" : "protected FastDateFormat(String pattern, TimeZone timeZone, Locale locale)",
      "right" : "protected FastDateFormat(String pattern, TimeZone timeZone, Locale locale)",
      "info" : "MethodDeclaration[19383-20450]:MethodDeclaration[19403-20470]"
    }, {
      "left" : "protected void init()",
      "right" : "protected void init()",
      "info" : "MethodDeclaration[20456-20831]:MethodDeclaration[20476-20851]"
    }, {
      "left" : "protected List parsePattern()",
      "right" : "protected List parsePattern()",
      "info" : "MethodDeclaration[20940-26124]:MethodDeclaration[20960-26144]"
    }, {
      "left" : "protected String parseToken(String pattern, int[] indexRef)",
      "right" : "protected String parseToken(String pattern, int[] indexRef)",
      "info" : "MethodDeclaration[26130-27844]:MethodDeclaration[26150-27864]"
    }, {
      "left" : "protected NumberRule selectNumberRule(int field, int padding)",
      "right" : "protected NumberRule selectNumberRule(int field, int padding)",
      "info" : "MethodDeclaration[27850-28398]:MethodDeclaration[27870-28418]"
    }, {
      "left" : "public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos)",
      "right" : "public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos)",
      "info" : "MethodDeclaration[28504-29360]:MethodDeclaration[28524-29380]"
    }, {
      "left" : "public String format(long millis)",
      "right" : "public String format(long millis)",
      "info" : "MethodDeclaration[29366-29641]:MethodDeclaration[29386-29661]"
    }, {
      "left" : "public String format(Date date)",
      "right" : "public String format(Date date)",
      "info" : "MethodDeclaration[29647-29994]:MethodDeclaration[29667-30014]"
    }, {
      "left" : "public String format(Calendar calendar)",
      "right" : "public String format(Calendar calendar)",
      "info" : "MethodDeclaration[30000-30290]:MethodDeclaration[30020-30310]"
    }, {
      "left" : "public StringBuffer format(long millis, StringBuffer buf)",
      "right" : "public StringBuffer format(long millis, StringBuffer buf)",
      "info" : "MethodDeclaration[30296-30702]:MethodDeclaration[30316-30722]"
    }, {
      "left" : "public StringBuffer format(Date date, StringBuffer buf)",
      "right" : "public StringBuffer format(Date date, StringBuffer buf)",
      "info" : "MethodDeclaration[30708-31138]:MethodDeclaration[30728-31158]"
    }, {
      "left" : "public StringBuffer format(Calendar calendar, StringBuffer buf)",
      "right" : "public StringBuffer format(Calendar calendar, StringBuffer buf)",
      "info" : "MethodDeclaration[31144-31659]:MethodDeclaration[31164-31679]"
    }, {
      "left" : "protected StringBuffer applyRules(Calendar calendar, StringBuffer buf)",
      "right" : "protected StringBuffer applyRules(Calendar calendar, StringBuffer buf)",
      "info" : "MethodDeclaration[31665-32176]:MethodDeclaration[31685-32196]"
    }, {
      "left" : "public Object parseObject(String source, ParsePosition pos)",
      "right" : "public Object parseObject(String source, ParsePosition pos)",
      "info" : "MethodDeclaration[32275-32614]:MethodDeclaration[32295-32634]"
    }, {
      "left" : "public String getPattern()",
      "right" : "public String getPattern()",
      "info" : "MethodDeclaration[32719-32931]:MethodDeclaration[32739-32951]"
    }, {
      "left" : "public TimeZone getTimeZone()",
      "right" : "public TimeZone getTimeZone()",
      "info" : "MethodDeclaration[32937-33356]:MethodDeclaration[32957-33376]"
    }, {
      "left" : "public boolean getTimeZoneOverridesCalendar()",
      "right" : "public boolean getTimeZoneOverridesCalendar()",
      "info" : "MethodDeclaration[33362-33685]:MethodDeclaration[33382-33705]"
    }, {
      "left" : "public Locale getLocale()",
      "right" : "public Locale getLocale()",
      "info" : "MethodDeclaration[33691-33852]:MethodDeclaration[33711-33872]"
    }, {
      "left" : "public int getMaxLengthEstimate()",
      "right" : "public int getMaxLengthEstimate()",
      "info" : "MethodDeclaration[33858-34216]:MethodDeclaration[33878-34236]"
    }, {
      "left" : "public boolean equals(Object obj)",
      "right" : "public boolean equals(Object obj)",
      "info" : "MethodDeclaration[34314-35089]:MethodDeclaration[34334-35109]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[35095-35499]:MethodDeclaration[35115-35519]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[35505-35711]:MethodDeclaration[35525-35731]"
    }, {
      "left" : "Rule",
      "right" : "Rule",
      "info" : "TypeDeclaration[35910-36472]:TypeDeclaration[36079-36641]"
    }, {
      "left" : "int estimateLength();",
      "right" : "int estimateLength();",
      "info" : "MethodDeclaration[36002-36154]:MethodDeclaration[36171-36323]"
    }, {
      "left" : "void appendTo(StringBuffer buffer, Calendar calendar);",
      "right" : "void appendTo(StringBuffer buffer, Calendar calendar);",
      "info" : "MethodDeclaration[36172-36466]:MethodDeclaration[36341-36635]"
    }, {
      "left" : "NumberRule",
      "right" : "NumberRule",
      "info" : "TypeDeclaration[36478-36871]:TypeDeclaration[36647-37040]"
    }, {
      "left" : "void appendTo(StringBuffer buffer, int value);",
      "right" : "void appendTo(StringBuffer buffer, int value);",
      "info" : "MethodDeclaration[36597-36865]:MethodDeclaration[36766-37034]"
    }, {
      "left" : "CharacterLiteral",
      "right" : "CharacterLiteral",
      "info" : "TypeDeclaration[36877-37610]:TypeDeclaration[37046-37779]"
    }, {
      "left" : "private final char mValue;",
      "right" : "private final char mValue;",
      "info" : "FieldDeclaration[37022-37048]:FieldDeclaration[37191-37217]"
    }, {
      "left" : "CharacterLiteral(char value)",
      "right" : "CharacterLiteral(char value)",
      "info" : "MethodDeclaration[37058-37318]:MethodDeclaration[37227-37487]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[37328-37438]:MethodDeclaration[37497-37607]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[37448-37604]:MethodDeclaration[37617-37773]"
    }, {
      "left" : "StringLiteral",
      "right" : "StringLiteral",
      "info" : "TypeDeclaration[37616-38345]:TypeDeclaration[37785-38514]"
    }, {
      "left" : "private final String mValue;",
      "right" : "private final String mValue;",
      "info" : "FieldDeclaration[37748-37776]:FieldDeclaration[37917-37945]"
    }, {
      "left" : "StringLiteral(String value)",
      "right" : "StringLiteral(String value)",
      "info" : "MethodDeclaration[37786-38039]:MethodDeclaration[37955-38208]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[38049-38173]:MethodDeclaration[38218-38342]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[38183-38339]:MethodDeclaration[38352-38508]"
    }, {
      "left" : "TextField",
      "right" : "TextField",
      "info" : "TypeDeclaration[38351-39424]:TypeDeclaration[38520-39593]"
    }, {
      "left" : "private final int mField;",
      "right" : "private final int mField;",
      "info" : "FieldDeclaration[38484-38509]:FieldDeclaration[38653-38678]"
    }, {
      "left" : "private final String[] mValues;",
      "right" : "private final String[] mValues;",
      "info" : "FieldDeclaration[38518-38549]:FieldDeclaration[38687-38718]"
    }, {
      "left" : "TextField(int field, String[] values)",
      "right" : "TextField(int field, String[] values)",
      "info" : "MethodDeclaration[38559-38886]:MethodDeclaration[38728-39055]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[38896-39229]:MethodDeclaration[39065-39398]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[39239-39418]:MethodDeclaration[39408-39587]"
    }, {
      "left" : "UnpaddedNumberField",
      "right" : "UnpaddedNumberField",
      "info" : "TypeDeclaration[39430-40714]:TypeDeclaration[39599-40883]"
    }, {
      "left" : "static final UnpaddedNumberField INSTANCE_YEAR = new UnpaddedNumberField(Calendar.YEAR);",
      "right" : "static final UnpaddedNumberField INSTANCE_YEAR = new UnpaddedNumberField(Calendar.YEAR);",
      "info" : "FieldDeclaration[39575-39663]:FieldDeclaration[39744-39832]"
    }, {
      "left" : "private final int mField;",
      "right" : "private final int mField;",
      "info" : "FieldDeclaration[39681-39706]:FieldDeclaration[39850-39875]"
    }, {
      "left" : "UnpaddedNumberField(int field)",
      "right" : "UnpaddedNumberField(int field)",
      "info" : "MethodDeclaration[39716-39951]:MethodDeclaration[39885-40120]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[39961-40071]:MethodDeclaration[40130-40240]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[40081-40254]:MethodDeclaration[40250-40423]"
    }, {
      "left" : "public final void appendTo(StringBuffer buffer, int value)",
      "right" : "public final void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[40264-40708]:MethodDeclaration[40433-40877]"
    }, {
      "left" : "UnpaddedMonthField",
      "right" : "UnpaddedMonthField",
      "info" : "TypeDeclaration[40720-41780]:TypeDeclaration[40889-41949]"
    }, {
      "left" : "static final UnpaddedMonthField INSTANCE = new UnpaddedMonthField();",
      "right" : "static final UnpaddedMonthField INSTANCE = new UnpaddedMonthField();",
      "info" : "FieldDeclaration[40863-40931]:FieldDeclaration[41032-41100]"
    }, {
      "left" : "UnpaddedMonthField()",
      "right" : "UnpaddedMonthField()",
      "info" : "MethodDeclaration[40941-41099]:MethodDeclaration[41110-41268]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[41109-41219]:MethodDeclaration[41278-41388]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[41229-41414]:MethodDeclaration[41398-41583]"
    }, {
      "left" : "public final void appendTo(StringBuffer buffer, int value)",
      "right" : "public final void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[41424-41774]:MethodDeclaration[41593-41943]"
    }, {
      "left" : "PaddedNumberField",
      "right" : "PaddedNumberField",
      "info" : "TypeDeclaration[41786-43650]:TypeDeclaration[41955-43819]"
    }, {
      "left" : "private final int mField;",
      "right" : "private final int mField;",
      "info" : "FieldDeclaration[41926-41951]:FieldDeclaration[42095-42120]"
    }, {
      "left" : "private final int mSize;",
      "right" : "private final int mSize;",
      "info" : "FieldDeclaration[41960-41984]:FieldDeclaration[42129-42153]"
    }, {
      "left" : "PaddedNumberField(int field, int size)",
      "right" : "PaddedNumberField(int field, int size)",
      "info" : "MethodDeclaration[41994-42455]:MethodDeclaration[42163-42624]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[42465-42575]:MethodDeclaration[42634-42744]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[42585-42758]:MethodDeclaration[42754-42927]"
    }, {
      "left" : "public final void appendTo(StringBuffer buffer, int value)",
      "right" : "public final void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[42768-43644]:MethodDeclaration[42937-43813]"
    }, {
      "left" : "TwoDigitNumberField",
      "right" : "TwoDigitNumberField",
      "info" : "TypeDeclaration[43656-44746]:TypeDeclaration[43825-44915]"
    }, {
      "left" : "private final int mField;",
      "right" : "private final int mField;",
      "info" : "FieldDeclaration[43801-43826]:FieldDeclaration[43970-43995]"
    }, {
      "left" : "TwoDigitNumberField(int field)",
      "right" : "TwoDigitNumberField(int field)",
      "info" : "MethodDeclaration[43836-44072]:MethodDeclaration[44005-44241]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[44082-44192]:MethodDeclaration[44251-44361]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[44202-44375]:MethodDeclaration[44371-44544]"
    }, {
      "left" : "public final void appendTo(StringBuffer buffer, int value)",
      "right" : "public final void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[44385-44740]:MethodDeclaration[44554-44909]"
    }, {
      "left" : "TwoDigitYearField",
      "right" : "TwoDigitYearField",
      "info" : "TypeDeclaration[44752-45671]:TypeDeclaration[44921-45840]"
    }, {
      "left" : "static final TwoDigitYearField INSTANCE = new TwoDigitYearField();",
      "right" : "static final TwoDigitYearField INSTANCE = new TwoDigitYearField();",
      "info" : "FieldDeclaration[44893-44959]:FieldDeclaration[45062-45128]"
    }, {
      "left" : "TwoDigitYearField()",
      "right" : "TwoDigitYearField()",
      "info" : "MethodDeclaration[44969-45114]:MethodDeclaration[45138-45283]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[45124-45234]:MethodDeclaration[45293-45403]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[45244-45430]:MethodDeclaration[45413-45599]"
    }, {
      "left" : "public final void appendTo(StringBuffer buffer, int value)",
      "right" : "public final void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[45440-45665]:MethodDeclaration[45609-45834]"
    }, {
      "left" : "TwoDigitMonthField",
      "right" : "TwoDigitMonthField",
      "info" : "TypeDeclaration[45677-46601]:TypeDeclaration[45846-46770]"
    }, {
      "left" : "static final TwoDigitMonthField INSTANCE = new TwoDigitMonthField();",
      "right" : "static final TwoDigitMonthField INSTANCE = new TwoDigitMonthField();",
      "info" : "FieldDeclaration[45820-45888]:FieldDeclaration[45989-46057]"
    }, {
      "left" : "TwoDigitMonthField()",
      "right" : "TwoDigitMonthField()",
      "info" : "MethodDeclaration[45898-46045]:MethodDeclaration[46067-46214]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[46055-46165]:MethodDeclaration[46224-46334]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[46175-46360]:MethodDeclaration[46344-46529]"
    }, {
      "left" : "public final void appendTo(StringBuffer buffer, int value)",
      "right" : "public final void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[46370-46595]:MethodDeclaration[46539-46764]"
    }, {
      "left" : "TwelveHourField",
      "right" : "TwelveHourField",
      "info" : "TypeDeclaration[46607-47704]:TypeDeclaration[46776-47873]"
    }, {
      "left" : "private final NumberRule mRule;",
      "right" : "private final NumberRule mRule;",
      "info" : "FieldDeclaration[46751-46782]:FieldDeclaration[46920-46951]"
    }, {
      "left" : "TwelveHourField(NumberRule rule)",
      "right" : "TwelveHourField(NumberRule rule)",
      "info" : "MethodDeclaration[46792-47051]:MethodDeclaration[46961-47220]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[47061-47192]:MethodDeclaration[47230-47361]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[47202-47532]:MethodDeclaration[47371-47701]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, int value)",
      "right" : "public void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[47542-47698]:MethodDeclaration[47711-47867]"
    }, {
      "left" : "TwentyFourHourField",
      "right" : "TwentyFourHourField",
      "info" : "TypeDeclaration[47710-48833]:TypeDeclaration[47879-49002]"
    }, {
      "left" : "private final NumberRule mRule;",
      "right" : "private final NumberRule mRule;",
      "info" : "FieldDeclaration[47863-47894]:FieldDeclaration[48032-48063]"
    }, {
      "left" : "TwentyFourHourField(NumberRule rule)",
      "right" : "TwentyFourHourField(NumberRule rule)",
      "info" : "MethodDeclaration[47904-48171]:MethodDeclaration[48073-48340]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[48181-48312]:MethodDeclaration[48350-48481]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[48322-48661]:MethodDeclaration[48491-48830]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, int value)",
      "right" : "public void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[48671-48827]:MethodDeclaration[48840-48996]"
    }, {
      "left" : "TimeZoneNameRule",
      "right" : "TimeZoneNameRule",
      "info" : "TypeDeclaration[48839-51249]:TypeDeclaration[49008-51418]"
    }, {
      "left" : "private final TimeZone mTimeZone;",
      "right" : "private final TimeZone mTimeZone;",
      "info" : "FieldDeclaration[48973-49006]:FieldDeclaration[49142-49175]"
    }, {
      "left" : "private final boolean mTimeZoneForced;",
      "right" : "private final boolean mTimeZoneForced;",
      "info" : "FieldDeclaration[49015-49053]:FieldDeclaration[49184-49222]"
    }, {
      "left" : "private final Locale mLocale;",
      "right" : "private final Locale mLocale;",
      "info" : "FieldDeclaration[49062-49091]:FieldDeclaration[49231-49260]"
    }, {
      "left" : "private final int mStyle;",
      "right" : "private final int mStyle;",
      "info" : "FieldDeclaration[49100-49125]:FieldDeclaration[49269-49294]"
    }, {
      "left" : "private final String mStandard;",
      "right" : "private final String mStandard;",
      "info" : "FieldDeclaration[49134-49165]:FieldDeclaration[49303-49334]"
    }, {
      "left" : "private final String mDaylight;",
      "right" : "private final String mDaylight;",
      "info" : "FieldDeclaration[49174-49205]:FieldDeclaration[49343-49374]"
    }, {
      "left" : "TimeZoneNameRule(TimeZone timeZone, boolean timeZoneForced, Locale locale, int style)",
      "right" : "TimeZoneNameRule(TimeZone timeZone, boolean timeZoneForced, Locale locale, int style)",
      "info" : "MethodDeclaration[49215-50097]:MethodDeclaration[49384-50266]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[50107-50442]:MethodDeclaration[50276-50611]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[50452-51243]:MethodDeclaration[50621-51412]"
    }, {
      "left" : "TimeZoneNumberRule",
      "right" : "TimeZoneNumberRule",
      "info" : "TypeDeclaration[51255-52966]:TypeDeclaration[51424-53135]"
    }, {
      "left" : "static final TimeZoneNumberRule INSTANCE_COLON = new TimeZoneNumberRule(true);",
      "right" : "static final TimeZoneNumberRule INSTANCE_COLON = new TimeZoneNumberRule(true);",
      "info" : "FieldDeclaration[51451-51529]:FieldDeclaration[51620-51698]"
    }, {
      "left" : "static final TimeZoneNumberRule INSTANCE_NO_COLON = new TimeZoneNumberRule(false);",
      "right" : "static final TimeZoneNumberRule INSTANCE_NO_COLON = new TimeZoneNumberRule(false);",
      "info" : "FieldDeclaration[51538-51620]:FieldDeclaration[51707-51789]"
    }, {
      "left" : "final boolean mColon;",
      "right" : "final boolean mColon;",
      "info" : "FieldDeclaration[51638-51659]:FieldDeclaration[51807-51828]"
    }, {
      "left" : "TimeZoneNumberRule(boolean colon)",
      "right" : "TimeZoneNumberRule(boolean colon)",
      "info" : "MethodDeclaration[51677-51973]:MethodDeclaration[51846-52142]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[51983-52093]:MethodDeclaration[52152-52262]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[52103-52948]:MethodDeclaration[52272-53117]"
    }, {
      "left" : "TimeZoneDisplayKey",
      "right" : "TimeZoneDisplayKey",
      "info" : "TypeDeclaration[53050-54620]:TypeDeclaration[53219-54789]"
    }, {
      "left" : "private final TimeZone mTimeZone;",
      "right" : "private final TimeZone mTimeZone;",
      "info" : "FieldDeclaration[53191-53224]:FieldDeclaration[53360-53393]"
    }, {
      "left" : "private final int mStyle;",
      "right" : "private final int mStyle;",
      "info" : "FieldDeclaration[53233-53258]:FieldDeclaration[53402-53427]"
    }, {
      "left" : "private final Locale mLocale;",
      "right" : "private final Locale mLocale;",
      "info" : "FieldDeclaration[53267-53296]:FieldDeclaration[53436-53465]"
    }, {
      "left" : "TimeZoneDisplayKey(TimeZone timeZone,\n                           boolean daylight, int style, Locale locale)",
      "right" : "TimeZoneDisplayKey(TimeZone timeZone,\n                           boolean daylight, int style, Locale locale)",
      "info" : "MethodDeclaration[53306-53953]:MethodDeclaration[53475-54122]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[53963-54098]:MethodDeclaration[54132-54267]"
    }, {
      "left" : "public boolean equals(Object obj)",
      "right" : "public boolean equals(Object obj)",
      "info" : "MethodDeclaration[54108-54614]:MethodDeclaration[54277-54783]"
    }, {
      "left" : "Pair",
      "right" : "Pair",
      "info" : "TypeDeclaration[54704-56189]:TypeDeclaration[54873-56358]"
    }, {
      "left" : "private final Object mObj1;",
      "right" : "private final Object mObj1;",
      "info" : "FieldDeclaration[54919-54946]:FieldDeclaration[55088-55115]"
    }, {
      "left" : "private final Object mObj2;",
      "right" : "private final Object mObj2;",
      "info" : "FieldDeclaration[54955-54982]:FieldDeclaration[55124-55151]"
    }, {
      "left" : "public Pair(Object obj1, Object obj2)",
      "right" : "public Pair(Object obj1, Object obj2)",
      "info" : "MethodDeclaration[54992-55298]:MethodDeclaration[55161-55467]"
    }, {
      "left" : "public boolean equals(Object obj)",
      "right" : "public boolean equals(Object obj)",
      "info" : "MethodDeclaration[55308-55812]:MethodDeclaration[55477-55981]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[55822-56036]:MethodDeclaration[55991-56205]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[56046-56183]:MethodDeclaration[56215-56352]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5146-5214]:Block[5166-5234]"
    }, {
      "left" : "return getInstance(getDefaultPattern(), null, null);",
      "right" : "return getInstance(getDefaultPattern(), null, null);",
      "info" : "ReturnStatement[5156-5208]:ReturnStatement[5176-5228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5597-5653]:Block[5617-5673]"
    }, {
      "left" : "return getInstance(pattern, null, null);",
      "right" : "return getInstance(pattern, null, null);",
      "info" : "ReturnStatement[5607-5647]:ReturnStatement[5627-5667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6137-6197]:Block[6157-6217]"
    }, {
      "left" : "return getInstance(pattern, timeZone, null);",
      "right" : "return getInstance(pattern, timeZone, null);",
      "info" : "ReturnStatement[6147-6191]:ReturnStatement[6167-6211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6647-6705]:Block[6667-6725]"
    }, {
      "left" : "return getInstance(pattern, null, locale);",
      "right" : "return getInstance(pattern, null, locale);",
      "info" : "ReturnStatement[6657-6699]:ReturnStatement[6677-6719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7317-7719]:Block[7337-7739]"
    }, {
      "left" : "FastDateFormat emptyFormat = new FastDateFormat(pattern, timeZone, locale);",
      "right" : "FastDateFormat emptyFormat = new FastDateFormat(pattern, timeZone, locale);",
      "info" : "VariableDeclarationStatement[7327-7402]:VariableDeclarationStatement[7347-7422]"
    }, {
      "left" : "FastDateFormat format = (FastDateFormat) cInstanceCache.get(emptyFormat);",
      "right" : "FastDateFormat format = (FastDateFormat) cInstanceCache.get(emptyFormat);",
      "info" : "VariableDeclarationStatement[7411-7484]:VariableDeclarationStatement[7431-7504]"
    }, {
      "left" : "if (format == null)",
      "right" : "if (format == null)",
      "info" : "IfStatement[7493-7690]:IfStatement[7513-7710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7513-7690]:Block[7533-7710]"
    }, {
      "left" : "format = emptyFormat;",
      "right" : "format = emptyFormat;",
      "info" : "ExpressionStatement[7527-7548]:ExpressionStatement[7547-7568]"
    }, {
      "left" : "format.init();",
      "right" : "format.init();",
      "info" : "ExpressionStatement[7561-7575]:ExpressionStatement[7581-7595]"
    }, {
      "left" : "cInstanceCache.put(format, format);",
      "right" : "cInstanceCache.put(format, format);",
      "info" : "ExpressionStatement[7629-7664]:ExpressionStatement[7649-7684]"
    }, {
      "left" : "return format;",
      "right" : "return format;",
      "info" : "ReturnStatement[7699-7713]:ReturnStatement[7719-7733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8219-8277]:Block[8239-8297]"
    }, {
      "left" : "return getDateInstance(style, null, null);",
      "right" : "return getDateInstance(style, null, null);",
      "info" : "ReturnStatement[8229-8271]:ReturnStatement[8249-8291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8777-8837]:Block[8797-8857]"
    }, {
      "left" : "return getDateInstance(style, null, locale);",
      "right" : "return getDateInstance(style, null, locale);",
      "info" : "ReturnStatement[8787-8831]:ReturnStatement[8807-8851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9368-9430]:Block[9388-9450]"
    }, {
      "left" : "return getDateInstance(style, timeZone, null);",
      "right" : "return getDateInstance(style, timeZone, null);",
      "info" : "ReturnStatement[9378-9424]:ReturnStatement[9398-9444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10019-10939]:Block[10039-10959]"
    }, {
      "left" : "Object key = new Integer(style);",
      "right" : "Object key = new Integer(style);",
      "info" : "VariableDeclarationStatement[10029-10061]:VariableDeclarationStatement[10049-10081]"
    }, {
      "left" : "if (timeZone != null)",
      "right" : "if (timeZone != null)",
      "info" : "IfStatement[10070-10146]:IfStatement[10090-10166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10092-10146]:Block[10112-10166]"
    }, {
      "left" : "key = new Pair(key, timeZone);",
      "right" : "key = new Pair(key, timeZone);",
      "info" : "ExpressionStatement[10106-10136]:ExpressionStatement[10126-10156]"
    }, {
      "left" : "if (locale != null)",
      "right" : "if (locale != null)",
      "info" : "IfStatement[10155-10227]:IfStatement[10175-10247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10175-10227]:Block[10195-10247]"
    }, {
      "left" : "key = new Pair(key, locale);",
      "right" : "key = new Pair(key, locale);",
      "info" : "ExpressionStatement[10189-10217]:ExpressionStatement[10209-10237]"
    }, {
      "left" : "FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);",
      "right" : "FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);",
      "info" : "VariableDeclarationStatement[10237-10306]:VariableDeclarationStatement[10257-10326]"
    }, {
      "left" : "if (format == null)",
      "right" : "if (format == null)",
      "info" : "IfStatement[10315-10910]:IfStatement[10335-10930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10335-10910]:Block[10355-10930]"
    }, {
      "left" : "if (locale == null)",
      "right" : "if (locale == null)",
      "info" : "IfStatement[10349-10430]:IfStatement[10369-10450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10369-10430]:Block[10389-10450]"
    }, {
      "left" : "locale = Locale.getDefault();",
      "right" : "locale = Locale.getDefault();",
      "info" : "ExpressionStatement[10387-10416]:ExpressionStatement[10407-10436]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10444-10900]:TryStatement[10464-10920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10448-10761]:Block[10468-10781]"
    }, {
      "left" : "SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateInstance(style, locale);",
      "right" : "SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateInstance(style, locale);",
      "info" : "VariableDeclarationStatement[10466-10556]:VariableDeclarationStatement[10486-10576]"
    }, {
      "left" : "String pattern = formatter.toPattern();",
      "right" : "String pattern = formatter.toPattern();",
      "info" : "VariableDeclarationStatement[10573-10612]:VariableDeclarationStatement[10593-10632]"
    }, {
      "left" : "format = getInstance(pattern, timeZone, locale);",
      "right" : "format = getInstance(pattern, timeZone, locale);",
      "info" : "ExpressionStatement[10629-10677]:ExpressionStatement[10649-10697]"
    }, {
      "left" : "cDateInstanceCache.put(key, format);",
      "right" : "cDateInstanceCache.put(key, format);",
      "info" : "ExpressionStatement[10694-10730]:ExpressionStatement[10714-10750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10792-10900]:Block[10812-10920]"
    }, {
      "left" : "throw new IllegalArgumentException(\"No date pattern for locale: \" + locale);",
      "right" : "throw new IllegalArgumentException(\"No date pattern for locale: \" + locale);",
      "info" : "ThrowStatement[10810-10886]:ThrowStatement[10830-10906]"
    }, {
      "left" : "return format;",
      "right" : "return format;",
      "info" : "ReturnStatement[10919-10933]:ReturnStatement[10939-10953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11439-11497]:Block[11459-11517]"
    }, {
      "left" : "return getTimeInstance(style, null, null);",
      "right" : "return getTimeInstance(style, null, null);",
      "info" : "ReturnStatement[11449-11491]:ReturnStatement[11469-11511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11997-12057]:Block[12017-12077]"
    }, {
      "left" : "return getTimeInstance(style, null, locale);",
      "right" : "return getTimeInstance(style, null, locale);",
      "info" : "ReturnStatement[12007-12051]:ReturnStatement[12027-12071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12592-12654]:Block[12612-12674]"
    }, {
      "left" : "return getTimeInstance(style, timeZone, null);",
      "right" : "return getTimeInstance(style, timeZone, null);",
      "info" : "ReturnStatement[12602-12648]:ReturnStatement[12622-12668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13248-14164]:Block[13268-14184]"
    }, {
      "left" : "Object key = new Integer(style);",
      "right" : "Object key = new Integer(style);",
      "info" : "VariableDeclarationStatement[13258-13290]:VariableDeclarationStatement[13278-13310]"
    }, {
      "left" : "if (timeZone != null)",
      "right" : "if (timeZone != null)",
      "info" : "IfStatement[13299-13375]:IfStatement[13319-13395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13321-13375]:Block[13341-13395]"
    }, {
      "left" : "key = new Pair(key, timeZone);",
      "right" : "key = new Pair(key, timeZone);",
      "info" : "ExpressionStatement[13335-13365]:ExpressionStatement[13355-13385]"
    }, {
      "left" : "if (locale != null)",
      "right" : "if (locale != null)",
      "info" : "IfStatement[13384-13456]:IfStatement[13404-13476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13404-13456]:Block[13424-13476]"
    }, {
      "left" : "key = new Pair(key, locale);",
      "right" : "key = new Pair(key, locale);",
      "info" : "ExpressionStatement[13418-13446]:ExpressionStatement[13438-13466]"
    }, {
      "left" : "FastDateFormat format = (FastDateFormat) cTimeInstanceCache.get(key);",
      "right" : "FastDateFormat format = (FastDateFormat) cTimeInstanceCache.get(key);",
      "info" : "VariableDeclarationStatement[13466-13535]:VariableDeclarationStatement[13486-13555]"
    }, {
      "left" : "if (format == null)",
      "right" : "if (format == null)",
      "info" : "IfStatement[13544-14135]:IfStatement[13564-14155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13564-14135]:Block[13584-14155]"
    }, {
      "left" : "if (locale == null)",
      "right" : "if (locale == null)",
      "info" : "IfStatement[13578-13659]:IfStatement[13598-13679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13598-13659]:Block[13618-13679]"
    }, {
      "left" : "locale = Locale.getDefault();",
      "right" : "locale = Locale.getDefault();",
      "info" : "ExpressionStatement[13616-13645]:ExpressionStatement[13636-13665]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13673-14125]:TryStatement[13693-14145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13677-13986]:Block[13697-14006]"
    }, {
      "left" : "SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getTimeInstance(style, locale);",
      "right" : "SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getTimeInstance(style, locale);",
      "info" : "VariableDeclarationStatement[13695-13785]:VariableDeclarationStatement[13715-13805]"
    }, {
      "left" : "String pattern = formatter.toPattern();",
      "right" : "String pattern = formatter.toPattern();",
      "info" : "VariableDeclarationStatement[13802-13841]:VariableDeclarationStatement[13822-13861]"
    }, {
      "left" : "format = getInstance(pattern, timeZone, locale);",
      "right" : "format = getInstance(pattern, timeZone, locale);",
      "info" : "ExpressionStatement[13858-13906]:ExpressionStatement[13878-13926]"
    }, {
      "left" : "cTimeInstanceCache.put(key, format);",
      "right" : "cTimeInstanceCache.put(key, format);",
      "info" : "ExpressionStatement[13923-13959]:ExpressionStatement[13943-13979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14017-14125]:Block[14037-14145]"
    }, {
      "left" : "throw new IllegalArgumentException(\"No date pattern for locale: \" + locale);",
      "right" : "throw new IllegalArgumentException(\"No date pattern for locale: \" + locale);",
      "info" : "ThrowStatement[14035-14111]:ThrowStatement[14055-14131]"
    }, {
      "left" : "return format;",
      "right" : "return format;",
      "info" : "ReturnStatement[14144-14158]:ReturnStatement[14164-14178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14785-14862]:Block[14805-14882]"
    }, {
      "left" : "return getDateTimeInstance(dateStyle, timeStyle, null, null);",
      "right" : "return getDateTimeInstance(dateStyle, timeStyle, null, null);",
      "info" : "ReturnStatement[14795-14856]:ReturnStatement[14815-14876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15487-15566]:Block[15507-15586]"
    }, {
      "left" : "return getDateTimeInstance(dateStyle, timeStyle, null, locale);",
      "right" : "return getDateTimeInstance(dateStyle, timeStyle, null, locale);",
      "info" : "ReturnStatement[15497-15560]:ReturnStatement[15517-15580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16222-16303]:Block[16242-16323]"
    }, {
      "left" : "return getDateTimeInstance(dateStyle, timeStyle, timeZone, null);",
      "right" : "return getDateTimeInstance(dateStyle, timeStyle, timeZone, null);",
      "info" : "ReturnStatement[16232-16297]:ReturnStatement[16252-16317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17016-18015]:Block[17036-18035]"
    }, {
      "left" : "Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));",
      "right" : "Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));",
      "info" : "VariableDeclarationStatement[17027-17097]:VariableDeclarationStatement[17047-17117]"
    }, {
      "left" : "if (timeZone != null)",
      "right" : "if (timeZone != null)",
      "info" : "IfStatement[17106-17182]:IfStatement[17126-17202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17128-17182]:Block[17148-17202]"
    }, {
      "left" : "key = new Pair(key, timeZone);",
      "right" : "key = new Pair(key, timeZone);",
      "info" : "ExpressionStatement[17142-17172]:ExpressionStatement[17162-17192]"
    }, {
      "left" : "if (locale != null)",
      "right" : "if (locale != null)",
      "info" : "IfStatement[17191-17263]:IfStatement[17211-17283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17211-17263]:Block[17231-17283]"
    }, {
      "left" : "key = new Pair(key, locale);",
      "right" : "key = new Pair(key, locale);",
      "info" : "ExpressionStatement[17225-17253]:ExpressionStatement[17245-17273]"
    }, {
      "left" : "FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);",
      "right" : "FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);",
      "info" : "VariableDeclarationStatement[17273-17346]:VariableDeclarationStatement[17293-17366]"
    }, {
      "left" : "if (format == null)",
      "right" : "if (format == null)",
      "info" : "IfStatement[17355-17986]:IfStatement[17375-18006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17375-17986]:Block[17395-18006]"
    }, {
      "left" : "if (locale == null)",
      "right" : "if (locale == null)",
      "info" : "IfStatement[17389-17470]:IfStatement[17409-17490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17409-17470]:Block[17429-17490]"
    }, {
      "left" : "locale = Locale.getDefault();",
      "right" : "locale = Locale.getDefault();",
      "info" : "ExpressionStatement[17427-17456]:ExpressionStatement[17447-17476]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[17484-17976]:TryStatement[17504-17996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17488-17832]:Block[17508-17852]"
    }, {
      "left" : "SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n                        locale);",
      "right" : "SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n                        locale);",
      "info" : "VariableDeclarationStatement[17506-17639]:VariableDeclarationStatement[17526-17659]"
    }, {
      "left" : "String pattern = formatter.toPattern();",
      "right" : "String pattern = formatter.toPattern();",
      "info" : "VariableDeclarationStatement[17656-17695]:VariableDeclarationStatement[17676-17715]"
    }, {
      "left" : "format = getInstance(pattern, timeZone, locale);",
      "right" : "format = getInstance(pattern, timeZone, locale);",
      "info" : "ExpressionStatement[17712-17760]:ExpressionStatement[17732-17780]"
    }, {
      "left" : "cDateTimeInstanceCache.put(key, format);",
      "right" : "cDateTimeInstanceCache.put(key, format);",
      "info" : "ExpressionStatement[17777-17817]:ExpressionStatement[17797-17837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17863-17976]:Block[17883-17996]"
    }, {
      "left" : "throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);",
      "right" : "throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);",
      "info" : "ThrowStatement[17881-17962]:ThrowStatement[17901-17982]"
    }, {
      "left" : "return format;",
      "right" : "return format;",
      "info" : "ReturnStatement[17995-18009]:ReturnStatement[18015-18029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18582-18966]:Block[18602-18986]"
    }, {
      "left" : "Object key = new TimeZoneDisplayKey(tz, daylight, style, locale);",
      "right" : "Object key = new TimeZoneDisplayKey(tz, daylight, style, locale);",
      "info" : "VariableDeclarationStatement[18592-18657]:VariableDeclarationStatement[18612-18677]"
    }, {
      "left" : "String value = (String) cTimeZoneDisplayCache.get(key);",
      "right" : "String value = (String) cTimeZoneDisplayCache.get(key);",
      "info" : "VariableDeclarationStatement[18666-18721]:VariableDeclarationStatement[18686-18741]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[18730-18938]:IfStatement[18750-18958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18749-18938]:Block[18769-18958]"
    }, {
      "left" : "value = tz.getDisplayName(daylight, style, locale);",
      "right" : "value = tz.getDisplayName(daylight, style, locale);",
      "info" : "ExpressionStatement[18826-18877]:ExpressionStatement[18846-18897]"
    }, {
      "left" : "cTimeZoneDisplayCache.put(key, value);",
      "right" : "cTimeZoneDisplayCache.put(key, value);",
      "info" : "ExpressionStatement[18890-18928]:ExpressionStatement[18910-18948]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[18947-18960]:ReturnStatement[18967-18980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19126-19280]:Block[19146-19300]"
    }, {
      "left" : "if (cDefaultPattern == null)",
      "right" : "if (cDefaultPattern == null)",
      "info" : "IfStatement[19136-19242]:IfStatement[19156-19262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19165-19242]:Block[19185-19262]"
    }, {
      "left" : "cDefaultPattern = new SimpleDateFormat().toPattern();",
      "right" : "cDefaultPattern = new SimpleDateFormat().toPattern();",
      "info" : "ExpressionStatement[19179-19232]:ExpressionStatement[19199-19252]"
    }, {
      "left" : "return cDefaultPattern;",
      "right" : "return cDefaultPattern;",
      "info" : "ReturnStatement[19251-19274]:ReturnStatement[19271-19294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19945-20450]:Block[19965-20470]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[19955-19963]:SuperConstructorInvocation[19975-19983]"
    }, {
      "left" : "if (pattern == null)",
      "right" : "if (pattern == null)",
      "info" : "IfStatement[19972-20084]:IfStatement[19992-20104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19993-20084]:Block[20013-20104]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The pattern must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The pattern must not be null\");",
      "info" : "ThrowStatement[20007-20074]:ThrowStatement[20027-20094]"
    }, {
      "left" : "mPattern = pattern;",
      "right" : "mPattern = pattern;",
      "info" : "ExpressionStatement[20093-20112]:ExpressionStatement[20113-20132]"
    }, {
      "left" : "mTimeZoneForced = (timeZone != null);",
      "right" : "mTimeZoneForced = (timeZone != null);",
      "info" : "ExpressionStatement[20130-20167]:ExpressionStatement[20150-20187]"
    }, {
      "left" : "if (timeZone == null)",
      "right" : "if (timeZone == null)",
      "info" : "IfStatement[20176-20255]:IfStatement[20196-20275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20198-20255]:Block[20218-20275]"
    }, {
      "left" : "timeZone = TimeZone.getDefault();",
      "right" : "timeZone = TimeZone.getDefault();",
      "info" : "ExpressionStatement[20212-20245]:ExpressionStatement[20232-20265]"
    }, {
      "left" : "mTimeZone = timeZone;",
      "right" : "mTimeZone = timeZone;",
      "info" : "ExpressionStatement[20264-20285]:ExpressionStatement[20284-20305]"
    }, {
      "left" : "mLocaleForced = (locale != null);",
      "right" : "mLocaleForced = (locale != null);",
      "info" : "ExpressionStatement[20303-20336]:ExpressionStatement[20323-20356]"
    }, {
      "left" : "if (locale == null)",
      "right" : "if (locale == null)",
      "info" : "IfStatement[20345-20418]:IfStatement[20365-20438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20365-20418]:Block[20385-20438]"
    }, {
      "left" : "locale = Locale.getDefault();",
      "right" : "locale = Locale.getDefault();",
      "info" : "ExpressionStatement[20379-20408]:ExpressionStatement[20399-20428]"
    }, {
      "left" : "mLocale = locale;",
      "right" : "mLocale = locale;",
      "info" : "ExpressionStatement[20427-20444]:ExpressionStatement[20447-20464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20548-20831]:Block[20568-20851]"
    }, {
      "left" : "List rulesList = parsePattern();",
      "right" : "List rulesList = parsePattern();",
      "info" : "VariableDeclarationStatement[20558-20590]:VariableDeclarationStatement[20578-20610]"
    }, {
      "left" : "mRules = (Rule[]) rulesList.toArray(new Rule[rulesList.size()]);",
      "right" : "mRules = (Rule[]) rulesList.toArray(new Rule[rulesList.size()]);",
      "info" : "ExpressionStatement[20599-20663]:ExpressionStatement[20619-20683]"
    }, {
      "left" : "int len = 0;",
      "right" : "int len = 0;",
      "info" : "VariableDeclarationStatement[20673-20685]:VariableDeclarationStatement[20693-20705]"
    }, {
      "left" : "for (int i=mRules.length; --i >= 0)",
      "right" : "for (int i=mRules.length; --i >= 0)",
      "info" : "ForStatement[20694-20790]:ForStatement[20714-20810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20732-20790]:Block[20752-20810]"
    }, {
      "left" : "len += mRules[i].estimateLength();",
      "right" : "len += mRules[i].estimateLength();",
      "info" : "ExpressionStatement[20746-20780]:ExpressionStatement[20766-20800]"
    }, {
      "left" : "mMaxLengthEstimate = len;",
      "right" : "mMaxLengthEstimate = len;",
      "info" : "ExpressionStatement[20800-20825]:ExpressionStatement[20820-20845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21162-26124]:Block[21182-26144]"
    }, {
      "left" : "DateFormatSymbols symbols = new DateFormatSymbols(mLocale);",
      "right" : "DateFormatSymbols symbols = new DateFormatSymbols(mLocale);",
      "info" : "VariableDeclarationStatement[21172-21231]:VariableDeclarationStatement[21192-21251]"
    }, {
      "left" : "List rules = new ArrayList();",
      "right" : "List rules = new ArrayList();",
      "info" : "VariableDeclarationStatement[21240-21269]:VariableDeclarationStatement[21260-21289]"
    }, {
      "left" : "String[] ERAs = symbols.getEras();",
      "right" : "String[] ERAs = symbols.getEras();",
      "info" : "VariableDeclarationStatement[21279-21313]:VariableDeclarationStatement[21299-21333]"
    }, {
      "left" : "String[] months = symbols.getMonths();",
      "right" : "String[] months = symbols.getMonths();",
      "info" : "VariableDeclarationStatement[21322-21360]:VariableDeclarationStatement[21342-21380]"
    }, {
      "left" : "String[] shortMonths = symbols.getShortMonths();",
      "right" : "String[] shortMonths = symbols.getShortMonths();",
      "info" : "VariableDeclarationStatement[21369-21417]:VariableDeclarationStatement[21389-21437]"
    }, {
      "left" : "String[] weekdays = symbols.getWeekdays();",
      "right" : "String[] weekdays = symbols.getWeekdays();",
      "info" : "VariableDeclarationStatement[21426-21468]:VariableDeclarationStatement[21446-21488]"
    }, {
      "left" : "String[] shortWeekdays = symbols.getShortWeekdays();",
      "right" : "String[] shortWeekdays = symbols.getShortWeekdays();",
      "info" : "VariableDeclarationStatement[21477-21529]:VariableDeclarationStatement[21497-21549]"
    }, {
      "left" : "String[] AmPmStrings = symbols.getAmPmStrings();",
      "right" : "String[] AmPmStrings = symbols.getAmPmStrings();",
      "info" : "VariableDeclarationStatement[21538-21586]:VariableDeclarationStatement[21558-21606]"
    }, {
      "left" : "int length = mPattern.length();",
      "right" : "int length = mPattern.length();",
      "info" : "VariableDeclarationStatement[21596-21627]:VariableDeclarationStatement[21616-21647]"
    }, {
      "left" : "int[] indexRef = new int[1];",
      "right" : "int[] indexRef = new int[1];",
      "info" : "VariableDeclarationStatement[21636-21664]:VariableDeclarationStatement[21656-21684]"
    }, {
      "left" : "for (int i = 0; i < length; i++)",
      "right" : "for (int i = 0; i < length; i++)",
      "info" : "ForStatement[21674-26095]:ForStatement[21694-26115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21707-26095]:Block[21727-26115]"
    }, {
      "left" : "indexRef[0] = i;",
      "right" : "indexRef[0] = i;",
      "info" : "ExpressionStatement[21721-21737]:ExpressionStatement[21741-21757]"
    }, {
      "left" : "String token = parseToken(mPattern, indexRef);",
      "right" : "String token = parseToken(mPattern, indexRef);",
      "info" : "VariableDeclarationStatement[21750-21796]:VariableDeclarationStatement[21770-21816]"
    }, {
      "left" : "i = indexRef[0];",
      "right" : "i = indexRef[0];",
      "info" : "ExpressionStatement[21809-21825]:ExpressionStatement[21829-21845]"
    }, {
      "left" : "int tokenLen = token.length();",
      "right" : "int tokenLen = token.length();",
      "info" : "VariableDeclarationStatement[21839-21869]:VariableDeclarationStatement[21859-21889]"
    }, {
      "left" : "if (tokenLen == 0)",
      "right" : "if (tokenLen == 0)",
      "info" : "IfStatement[21882-21939]:IfStatement[21902-21959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21901-21939]:Block[21921-21959]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21919-21925]:BreakStatement[21939-21945]"
    }, {
      "left" : "Rule rule;",
      "right" : "Rule rule;",
      "info" : "VariableDeclarationStatement[21953-21963]:VariableDeclarationStatement[21973-21983]"
    }, {
      "left" : "char c = token.charAt(0);",
      "right" : "char c = token.charAt(0);",
      "info" : "VariableDeclarationStatement[21976-22001]:VariableDeclarationStatement[21996-22021]"
    }, {
      "left" : "switch (c) {\n            case 'G': // era designator (text)\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y': // year (number)\n                if (tokenLen >= 4) {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule = TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case 'M': // month in year (text and number)\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd': // day in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h': // hour in am/pm (number, 1..12)\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H': // hour in day (number, 0..23)\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm': // minute in hour (number)\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's': // second in minute (number)\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S': // millisecond (number)\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E': // day in week (text)\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D': // day in year (number)\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F': // day of week in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w': // week in year (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W': // week in month (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a': // am/pm marker (text)\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k': // hour in day (1..24)\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K': // hour in am/pm (0..11)\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z': // time zone (text)\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z': // time zone (value)\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'': // literal text\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }",
      "right" : "switch (c) {\n            case 'G': // era designator (text)\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y': // year (number)\n                if (tokenLen >= 4) {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule = TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case 'M': // month in year (text and number)\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd': // day in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h': // hour in am/pm (number, 1..12)\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H': // hour in day (number, 0..23)\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm': // minute in hour (number)\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's': // second in minute (number)\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S': // millisecond (number)\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E': // day in week (text)\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D': // day in year (number)\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F': // day of week in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w': // week in year (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W': // week in month (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a': // am/pm marker (text)\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k': // hour in day (1..24)\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K': // hour in am/pm (0..11)\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z': // time zone (text)\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z': // time zone (value)\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'': // literal text\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }",
      "info" : "SwitchStatement[22015-26055]:SwitchStatement[22035-26075]"
    }, {
      "left" : "case 'G':",
      "right" : "case 'G':",
      "info" : "SwitchCase[22040-22049]:SwitchCase[22060-22069]"
    }, {
      "left" : "rule = new TextField(Calendar.ERA, ERAs);",
      "right" : "rule = new TextField(Calendar.ERA, ERAs);",
      "info" : "ExpressionStatement[22091-22132]:ExpressionStatement[22111-22152]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22149-22155]:BreakStatement[22169-22175]"
    }, {
      "left" : "case 'y':",
      "right" : "case 'y':",
      "info" : "SwitchCase[22168-22177]:SwitchCase[22188-22197]"
    }, {
      "left" : "if (tokenLen >= 4)",
      "right" : "if (tokenLen >= 4)",
      "info" : "IfStatement[22211-22399]:IfStatement[22231-22419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22230-22319]:Block[22250-22339]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.YEAR, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.YEAR, tokenLen);",
      "info" : "ExpressionStatement[22252-22301]:ExpressionStatement[22272-22321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22325-22399]:Block[22345-22419]"
    }, {
      "left" : "rule = TwoDigitYearField.INSTANCE;",
      "right" : "rule = TwoDigitYearField.INSTANCE;",
      "info" : "ExpressionStatement[22347-22381]:ExpressionStatement[22367-22401]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22416-22422]:BreakStatement[22436-22442]"
    }, {
      "left" : "case 'M':",
      "right" : "case 'M':",
      "info" : "SwitchCase[22435-22444]:SwitchCase[22455-22464]"
    }, {
      "left" : "if (tokenLen >= 4)",
      "right" : "if (tokenLen >= 4)",
      "info" : "IfStatement[22496-22896]:IfStatement[22516-22916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22515-22600]:Block[22535-22620]"
    }, {
      "left" : "rule = new TextField(Calendar.MONTH, months);",
      "right" : "rule = new TextField(Calendar.MONTH, months);",
      "info" : "ExpressionStatement[22537-22582]:ExpressionStatement[22557-22602]"
    }, {
      "left" : "if (tokenLen == 3)",
      "right" : "if (tokenLen == 3)",
      "info" : "IfStatement[22606-22896]:IfStatement[22626-22916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22625-22715]:Block[22645-22735]"
    }, {
      "left" : "rule = new TextField(Calendar.MONTH, shortMonths);",
      "right" : "rule = new TextField(Calendar.MONTH, shortMonths);",
      "info" : "ExpressionStatement[22647-22697]:ExpressionStatement[22667-22717]"
    }, {
      "left" : "if (tokenLen == 2)",
      "right" : "if (tokenLen == 2)",
      "info" : "IfStatement[22721-22896]:IfStatement[22741-22916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22740-22815]:Block[22760-22835]"
    }, {
      "left" : "rule = TwoDigitMonthField.INSTANCE;",
      "right" : "rule = TwoDigitMonthField.INSTANCE;",
      "info" : "ExpressionStatement[22762-22797]:ExpressionStatement[22782-22817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22821-22896]:Block[22841-22916]"
    }, {
      "left" : "rule = UnpaddedMonthField.INSTANCE;",
      "right" : "rule = UnpaddedMonthField.INSTANCE;",
      "info" : "ExpressionStatement[22843-22878]:ExpressionStatement[22863-22898]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22913-22919]:BreakStatement[22933-22939]"
    }, {
      "left" : "case 'd':",
      "right" : "case 'd':",
      "info" : "SwitchCase[22932-22941]:SwitchCase[22952-22961]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);",
      "info" : "ExpressionStatement[22983-23040]:ExpressionStatement[23003-23060]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23057-23063]:BreakStatement[23077-23083]"
    }, {
      "left" : "case 'h':",
      "right" : "case 'h':",
      "info" : "SwitchCase[23076-23085]:SwitchCase[23096-23105]"
    }, {
      "left" : "rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));",
      "right" : "rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));",
      "info" : "ExpressionStatement[23135-23205]:ExpressionStatement[23155-23225]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23222-23228]:BreakStatement[23242-23248]"
    }, {
      "left" : "case 'H':",
      "right" : "case 'H':",
      "info" : "SwitchCase[23241-23250]:SwitchCase[23261-23270]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);",
      "info" : "ExpressionStatement[23298-23354]:ExpressionStatement[23318-23374]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23371-23377]:BreakStatement[23391-23397]"
    }, {
      "left" : "case 'm':",
      "right" : "case 'm':",
      "info" : "SwitchCase[23390-23399]:SwitchCase[23410-23419]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.MINUTE, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.MINUTE, tokenLen);",
      "info" : "ExpressionStatement[23443-23494]:ExpressionStatement[23463-23514]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23511-23517]:BreakStatement[23531-23537]"
    }, {
      "left" : "case 's':",
      "right" : "case 's':",
      "info" : "SwitchCase[23530-23539]:SwitchCase[23550-23559]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.SECOND, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.SECOND, tokenLen);",
      "info" : "ExpressionStatement[23585-23636]:ExpressionStatement[23605-23656]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23653-23659]:BreakStatement[23673-23679]"
    }, {
      "left" : "case 'S':",
      "right" : "case 'S':",
      "info" : "SwitchCase[23672-23681]:SwitchCase[23692-23701]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);",
      "info" : "ExpressionStatement[23722-23778]:ExpressionStatement[23742-23798]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23795-23801]:BreakStatement[23815-23821]"
    }, {
      "left" : "case 'E':",
      "right" : "case 'E':",
      "info" : "SwitchCase[23814-23823]:SwitchCase[23834-23843]"
    }, {
      "left" : "rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);",
      "right" : "rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);",
      "info" : "ExpressionStatement[23862-23946]:ExpressionStatement[23882-23966]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23963-23969]:BreakStatement[23983-23989]"
    }, {
      "left" : "case 'D':",
      "right" : "case 'D':",
      "info" : "SwitchCase[23982-23991]:SwitchCase[24002-24011]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);",
      "info" : "ExpressionStatement[24032-24088]:ExpressionStatement[24052-24108]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24105-24111]:BreakStatement[24125-24131]"
    }, {
      "left" : "case 'F':",
      "right" : "case 'F':",
      "info" : "SwitchCase[24124-24133]:SwitchCase[24144-24153]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);",
      "info" : "ExpressionStatement[24183-24248]:ExpressionStatement[24203-24268]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24265-24271]:BreakStatement[24285-24291]"
    }, {
      "left" : "case 'w':",
      "right" : "case 'w':",
      "info" : "SwitchCase[24284-24293]:SwitchCase[24304-24313]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);",
      "info" : "ExpressionStatement[24335-24392]:ExpressionStatement[24355-24412]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24409-24415]:BreakStatement[24429-24435]"
    }, {
      "left" : "case 'W':",
      "right" : "case 'W':",
      "info" : "SwitchCase[24428-24437]:SwitchCase[24448-24457]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);",
      "info" : "ExpressionStatement[24480-24538]:ExpressionStatement[24500-24558]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24555-24561]:BreakStatement[24575-24581]"
    }, {
      "left" : "case 'a':",
      "right" : "case 'a':",
      "info" : "SwitchCase[24574-24583]:SwitchCase[24594-24603]"
    }, {
      "left" : "rule = new TextField(Calendar.AM_PM, AmPmStrings);",
      "right" : "rule = new TextField(Calendar.AM_PM, AmPmStrings);",
      "info" : "ExpressionStatement[24623-24673]:ExpressionStatement[24643-24693]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24690-24696]:BreakStatement[24710-24716]"
    }, {
      "left" : "case 'k':",
      "right" : "case 'k':",
      "info" : "SwitchCase[24709-24718]:SwitchCase[24729-24738]"
    }, {
      "left" : "rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));",
      "right" : "rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));",
      "info" : "ExpressionStatement[24758-24839]:ExpressionStatement[24778-24859]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24856-24862]:BreakStatement[24876-24882]"
    }, {
      "left" : "case 'K':",
      "right" : "case 'K':",
      "info" : "SwitchCase[24875-24884]:SwitchCase[24895-24904]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.HOUR, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.HOUR, tokenLen);",
      "info" : "ExpressionStatement[24926-24975]:ExpressionStatement[24946-24995]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24992-24998]:BreakStatement[25012-25018]"
    }, {
      "left" : "case 'z':",
      "right" : "case 'z':",
      "info" : "SwitchCase[25011-25020]:SwitchCase[25031-25040]"
    }, {
      "left" : "if (tokenLen >= 4)",
      "right" : "if (tokenLen >= 4)",
      "info" : "IfStatement[25057-25323]:IfStatement[25077-25343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25076-25196]:Block[25096-25216]"
    }, {
      "left" : "rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);",
      "right" : "rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);",
      "info" : "ExpressionStatement[25098-25178]:ExpressionStatement[25118-25198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25202-25323]:Block[25222-25343]"
    }, {
      "left" : "rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);",
      "right" : "rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);",
      "info" : "ExpressionStatement[25224-25305]:ExpressionStatement[25244-25325]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25340-25346]:BreakStatement[25360-25366]"
    }, {
      "left" : "case 'Z':",
      "right" : "case 'Z':",
      "info" : "SwitchCase[25359-25368]:SwitchCase[25379-25388]"
    }, {
      "left" : "if (tokenLen == 1)",
      "right" : "if (tokenLen == 1)",
      "info" : "IfStatement[25406-25596]:IfStatement[25426-25616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25425-25509]:Block[25445-25529]"
    }, {
      "left" : "rule = TimeZoneNumberRule.INSTANCE_NO_COLON;",
      "right" : "rule = TimeZoneNumberRule.INSTANCE_NO_COLON;",
      "info" : "ExpressionStatement[25447-25491]:ExpressionStatement[25467-25511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25515-25596]:Block[25535-25616]"
    }, {
      "left" : "rule = TimeZoneNumberRule.INSTANCE_COLON;",
      "right" : "rule = TimeZoneNumberRule.INSTANCE_COLON;",
      "info" : "ExpressionStatement[25537-25578]:ExpressionStatement[25557-25598]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25613-25619]:BreakStatement[25633-25639]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[25632-25642]:SwitchCase[25652-25662]"
    }, {
      "left" : "String sub = token.substring(1);",
      "right" : "String sub = token.substring(1);",
      "info" : "VariableDeclarationStatement[25675-25707]:VariableDeclarationStatement[25695-25727]"
    }, {
      "left" : "if (sub.length() == 1)",
      "right" : "if (sub.length() == 1)",
      "info" : "IfStatement[25724-25906]:IfStatement[25744-25926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25747-25830]:Block[25767-25850]"
    }, {
      "left" : "rule = new CharacterLiteral(sub.charAt(0));",
      "right" : "rule = new CharacterLiteral(sub.charAt(0));",
      "info" : "ExpressionStatement[25769-25812]:ExpressionStatement[25789-25832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25836-25906]:Block[25856-25926]"
    }, {
      "left" : "rule = new StringLiteral(sub);",
      "right" : "rule = new StringLiteral(sub);",
      "info" : "ExpressionStatement[25858-25888]:ExpressionStatement[25878-25908]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25923-25929]:BreakStatement[25943-25949]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[25942-25950]:SwitchCase[25962-25970]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Illegal pattern component: \" + token);",
      "right" : "throw new IllegalArgumentException(\"Illegal pattern component: \" + token);",
      "info" : "ThrowStatement[25967-26041]:ThrowStatement[25987-26061]"
    }, {
      "left" : "rules.add(rule);",
      "right" : "rules.add(rule);",
      "info" : "ExpressionStatement[26069-26085]:ExpressionStatement[26089-26105]"
    }, {
      "left" : "return rules;",
      "right" : "return rules;",
      "info" : "ReturnStatement[26105-26118]:ReturnStatement[26125-26138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26364-27844]:Block[26384-27864]"
    }, {
      "left" : "StringBuffer buf = new StringBuffer();",
      "right" : "StringBuffer buf = new StringBuffer();",
      "info" : "VariableDeclarationStatement[26374-26412]:VariableDeclarationStatement[26394-26432]"
    }, {
      "left" : "int i = indexRef[0];",
      "right" : "int i = indexRef[0];",
      "info" : "VariableDeclarationStatement[26422-26442]:VariableDeclarationStatement[26442-26462]"
    }, {
      "left" : "int length = pattern.length();",
      "right" : "int length = pattern.length();",
      "info" : "VariableDeclarationStatement[26451-26481]:VariableDeclarationStatement[26471-26501]"
    }, {
      "left" : "char c = pattern.charAt(i);",
      "right" : "char c = pattern.charAt(i);",
      "info" : "VariableDeclarationStatement[26491-26518]:VariableDeclarationStatement[26511-26538]"
    }, {
      "left" : "if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')",
      "right" : "if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')",
      "info" : "IfStatement[26527-27781]:IfStatement[26547-27801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26577-26977]:Block[26597-26997]"
    }, {
      "left" : "buf.append(c);",
      "right" : "buf.append(c);",
      "info" : "ExpressionStatement[26687-26701]:ExpressionStatement[26707-26721]"
    }, {
      "left" : "while (i + 1 < length)",
      "right" : "while (i + 1 < length)",
      "info" : "WhileStatement[26715-26967]:WhileStatement[26735-26987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26738-26967]:Block[26758-26987]"
    }, {
      "left" : "char peek = pattern.charAt(i + 1);",
      "right" : "char peek = pattern.charAt(i + 1);",
      "info" : "VariableDeclarationStatement[26756-26790]:VariableDeclarationStatement[26776-26810]"
    }, {
      "left" : "if (peek == c)",
      "right" : "if (peek == c)",
      "info" : "IfStatement[26807-26953]:IfStatement[26827-26973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26822-26901]:Block[26842-26921]"
    }, {
      "left" : "buf.append(c);",
      "right" : "buf.append(c);",
      "info" : "ExpressionStatement[26844-26858]:ExpressionStatement[26864-26878]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[26879-26883]:ExpressionStatement[26899-26903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26907-26953]:Block[26927-26973]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26929-26935]:BreakStatement[26949-26955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26983-27781]:Block[27003-27801]"
    }, {
      "left" : "buf.append('\\'');",
      "right" : "buf.append('\\'');",
      "info" : "ExpressionStatement[27046-27063]:ExpressionStatement[27066-27083]"
    }, {
      "left" : "boolean inLiteral = false;",
      "right" : "boolean inLiteral = false;",
      "info" : "VariableDeclarationStatement[27077-27103]:VariableDeclarationStatement[27097-27123]"
    }, {
      "left" : "for (; i < length; i++)",
      "right" : "for (; i < length; i++)",
      "info" : "ForStatement[27117-27771]:ForStatement[27137-27791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27141-27771]:Block[27161-27791]"
    }, {
      "left" : "c = pattern.charAt(i);",
      "right" : "c = pattern.charAt(i);",
      "info" : "ExpressionStatement[27159-27181]:ExpressionStatement[27179-27201]"
    }, {
      "left" : "if (c == '\\'')",
      "right" : "if (c == '\\'')",
      "info" : "IfStatement[27199-27757]:IfStatement[27219-27777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27214-27529]:Block[27234-27549]"
    }, {
      "left" : "if (i + 1 < length && pattern.charAt(i + 1) == '\\'')",
      "right" : "if (i + 1 < length && pattern.charAt(i + 1) == '\\'')",
      "info" : "IfStatement[27236-27511]:IfStatement[27256-27531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27289-27434]:Block[27309-27454]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[27369-27373]:ExpressionStatement[27389-27393]"
    }, {
      "left" : "buf.append(c);",
      "right" : "buf.append(c);",
      "info" : "ExpressionStatement[27398-27412]:ExpressionStatement[27418-27432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27440-27511]:Block[27460-27531]"
    }, {
      "left" : "inLiteral = !inLiteral;",
      "right" : "inLiteral = !inLiteral;",
      "info" : "ExpressionStatement[27466-27489]:ExpressionStatement[27486-27509]"
    }, {
      "left" : "if (!inLiteral &&\n                         (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z'))",
      "right" : "if (!inLiteral &&\n                         (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z'))",
      "info" : "IfStatement[27535-27757]:IfStatement[27555-27777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27626-27697]:Block[27646-27717]"
    }, {
      "left" : "i--;",
      "right" : "i--;",
      "info" : "ExpressionStatement[27648-27652]:ExpressionStatement[27668-27672]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27673-27679]:BreakStatement[27693-27699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27703-27757]:Block[27723-27777]"
    }, {
      "left" : "buf.append(c);",
      "right" : "buf.append(c);",
      "info" : "ExpressionStatement[27725-27739]:ExpressionStatement[27745-27759]"
    }, {
      "left" : "indexRef[0] = i;",
      "right" : "indexRef[0] = i;",
      "info" : "ExpressionStatement[27791-27807]:ExpressionStatement[27811-27827]"
    }, {
      "left" : "return buf.toString();",
      "right" : "return buf.toString();",
      "info" : "ReturnStatement[27816-27838]:ReturnStatement[27836-27858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28145-28398]:Block[28165-28418]"
    }, {
      "left" : "switch (padding) {\n        case 1:\n            return new UnpaddedNumberField(field);\n        case 2:\n            return new TwoDigitNumberField(field);\n        default:\n            return new PaddedNumberField(field, padding);\n        }",
      "right" : "switch (padding) {\n        case 1:\n            return new UnpaddedNumberField(field);\n        case 2:\n            return new TwoDigitNumberField(field);\n        default:\n            return new PaddedNumberField(field, padding);\n        }",
      "info" : "SwitchStatement[28155-28392]:SwitchStatement[28175-28412]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[28182-28189]:SwitchCase[28202-28209]"
    }, {
      "left" : "return new UnpaddedNumberField(field);",
      "right" : "return new UnpaddedNumberField(field);",
      "info" : "ReturnStatement[28202-28240]:ReturnStatement[28222-28260]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[28249-28256]:SwitchCase[28269-28276]"
    }, {
      "left" : "return new TwoDigitNumberField(field);",
      "right" : "return new TwoDigitNumberField(field);",
      "info" : "ReturnStatement[28269-28307]:ReturnStatement[28289-28327]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[28316-28324]:SwitchCase[28336-28344]"
    }, {
      "left" : "return new PaddedNumberField(field, padding);",
      "right" : "return new PaddedNumberField(field, padding);",
      "info" : "ReturnStatement[28337-28382]:ReturnStatement[28357-28402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28895-29360]:Block[28915-29380]"
    }, {
      "left" : "if (obj instanceof Date)",
      "right" : "if (obj instanceof Date)",
      "info" : "IfStatement[28905-29354]:IfStatement[28925-29374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28930-28992]:Block[28950-29012]"
    }, {
      "left" : "return format((Date) obj, toAppendTo);",
      "right" : "return format((Date) obj, toAppendTo);",
      "info" : "ReturnStatement[28944-28982]:ReturnStatement[28964-29002]"
    }, {
      "left" : "if (obj instanceof Calendar)",
      "right" : "if (obj instanceof Calendar)",
      "info" : "IfStatement[28998-29354]:IfStatement[29018-29374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29027-29093]:Block[29047-29113]"
    }, {
      "left" : "return format((Calendar) obj, toAppendTo);",
      "right" : "return format((Calendar) obj, toAppendTo);",
      "info" : "ReturnStatement[29041-29083]:ReturnStatement[29061-29103]"
    }, {
      "left" : "if (obj instanceof Long)",
      "right" : "if (obj instanceof Long)",
      "info" : "IfStatement[29099-29354]:IfStatement[29119-29374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29124-29200]:Block[29144-29220]"
    }, {
      "left" : "return format(((Long) obj).longValue(), toAppendTo);",
      "right" : "return format(((Long) obj).longValue(), toAppendTo);",
      "info" : "ReturnStatement[29138-29190]:ReturnStatement[29158-29210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29206-29354]:Block[29226-29374]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Unknown class: \" +\n                (obj == null ? \"<null>\" : obj.getClass().getName()));",
      "right" : "throw new IllegalArgumentException(\"Unknown class: \" +\n                (obj == null ? \"<null>\" : obj.getClass().getName()));",
      "info" : "ThrowStatement[29220-29344]:ThrowStatement[29240-29364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29593-29641]:Block[29613-29661]"
    }, {
      "left" : "return format(new Date(millis));",
      "right" : "return format(new Date(millis));",
      "info" : "ReturnStatement[29603-29635]:ReturnStatement[29623-29655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29828-29994]:Block[29848-30014]"
    }, {
      "left" : "Calendar c = new GregorianCalendar(mTimeZone);",
      "right" : "Calendar c = new GregorianCalendar(mTimeZone);",
      "info" : "VariableDeclarationStatement[29838-29884]:VariableDeclarationStatement[29858-29904]"
    }, {
      "left" : "c.setTime(date);",
      "right" : "c.setTime(date);",
      "info" : "ExpressionStatement[29893-29909]:ExpressionStatement[29913-29929]"
    }, {
      "left" : "return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();",
      "right" : "return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();",
      "info" : "ReturnStatement[29918-29988]:ReturnStatement[29938-30008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30201-30290]:Block[30221-30310]"
    }, {
      "left" : "return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();",
      "right" : "return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();",
      "info" : "ReturnStatement[30211-30284]:ReturnStatement[30231-30304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30649-30702]:Block[30669-30722]"
    }, {
      "left" : "return format(new Date(millis), buf);",
      "right" : "return format(new Date(millis), buf);",
      "info" : "ReturnStatement[30659-30696]:ReturnStatement[30679-30716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31016-31138]:Block[31036-31158]"
    }, {
      "left" : "Calendar c = new GregorianCalendar(mTimeZone);",
      "right" : "Calendar c = new GregorianCalendar(mTimeZone);",
      "info" : "VariableDeclarationStatement[31026-31072]:VariableDeclarationStatement[31046-31092]"
    }, {
      "left" : "c.setTime(date);",
      "right" : "c.setTime(date);",
      "info" : "ExpressionStatement[31081-31097]:ExpressionStatement[31101-31117]"
    }, {
      "left" : "return applyRules(c, buf);",
      "right" : "return applyRules(c, buf);",
      "info" : "ReturnStatement[31106-31132]:ReturnStatement[31126-31152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31472-31659]:Block[31492-31679]"
    }, {
      "left" : "if (mTimeZoneForced)",
      "right" : "if (mTimeZoneForced)",
      "info" : "IfStatement[31482-31611]:IfStatement[31502-31631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31503-31611]:Block[31523-31631]"
    }, {
      "left" : "calendar = (Calendar) calendar.clone();",
      "right" : "calendar = (Calendar) calendar.clone();",
      "info" : "ExpressionStatement[31517-31556]:ExpressionStatement[31537-31576]"
    }, {
      "left" : "calendar.setTimeZone(mTimeZone);",
      "right" : "calendar.setTimeZone(mTimeZone);",
      "info" : "ExpressionStatement[31569-31601]:ExpressionStatement[31589-31621]"
    }, {
      "left" : "return applyRules(calendar, buf);",
      "right" : "return applyRules(calendar, buf);",
      "info" : "ReturnStatement[31620-31653]:ReturnStatement[31640-31673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31989-32176]:Block[32009-32196]"
    }, {
      "left" : "Rule[] rules = mRules;",
      "right" : "Rule[] rules = mRules;",
      "info" : "VariableDeclarationStatement[31999-32021]:VariableDeclarationStatement[32019-32041]"
    }, {
      "left" : "int len = mRules.length;",
      "right" : "int len = mRules.length;",
      "info" : "VariableDeclarationStatement[32030-32054]:VariableDeclarationStatement[32050-32074]"
    }, {
      "left" : "for (int i = 0; i < len; i++)",
      "right" : "for (int i = 0; i < len; i++)",
      "info" : "ForStatement[32063-32150]:ForStatement[32083-32170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32093-32150]:Block[32113-32170]"
    }, {
      "left" : "rules[i].appendTo(buf, calendar);",
      "right" : "rules[i].appendTo(buf, calendar);",
      "info" : "ExpressionStatement[32107-32140]:ExpressionStatement[32127-32160]"
    }, {
      "left" : "return buf;",
      "right" : "return buf;",
      "info" : "ReturnStatement[32159-32170]:ReturnStatement[32179-32190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32531-32614]:Block[32551-32634]"
    }, {
      "left" : "pos.setIndex(0);",
      "right" : "pos.setIndex(0);",
      "info" : "ExpressionStatement[32541-32557]:ExpressionStatement[32561-32577]"
    }, {
      "left" : "pos.setErrorIndex(0);",
      "right" : "pos.setErrorIndex(0);",
      "info" : "ExpressionStatement[32566-32587]:ExpressionStatement[32586-32607]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[32596-32608]:ReturnStatement[32616-32628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32899-32931]:Block[32919-32951]"
    }, {
      "left" : "return mPattern;",
      "right" : "return mPattern;",
      "info" : "ReturnStatement[32909-32925]:ReturnStatement[32929-32945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33323-33356]:Block[33343-33376]"
    }, {
      "left" : "return mTimeZone;",
      "right" : "return mTimeZone;",
      "info" : "ReturnStatement[33333-33350]:ReturnStatement[33353-33370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33646-33685]:Block[33666-33705]"
    }, {
      "left" : "return mTimeZoneForced;",
      "right" : "return mTimeZoneForced;",
      "info" : "ReturnStatement[33656-33679]:ReturnStatement[33676-33699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33821-33852]:Block[33841-33872]"
    }, {
      "left" : "return mLocale;",
      "right" : "return mLocale;",
      "info" : "ReturnStatement[33831-33846]:ReturnStatement[33851-33866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34174-34216]:Block[34194-34236]"
    }, {
      "left" : "return mMaxLengthEstimate;",
      "right" : "return mMaxLengthEstimate;",
      "info" : "ReturnStatement[34184-34210]:ReturnStatement[34204-34230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34507-35089]:Block[34527-35109]"
    }, {
      "left" : "if (obj instanceof FastDateFormat == false)",
      "right" : "if (obj instanceof FastDateFormat == false)",
      "info" : "IfStatement[34517-34598]:IfStatement[34537-34618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34561-34598]:Block[34581-34618]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[34575-34588]:ReturnStatement[34595-34608]"
    }, {
      "left" : "FastDateFormat other = (FastDateFormat) obj;",
      "right" : "FastDateFormat other = (FastDateFormat) obj;",
      "info" : "VariableDeclarationStatement[34607-34651]:VariableDeclarationStatement[34627-34671]"
    }, {
      "left" : "if (\n            (mPattern == other.mPattern || mPattern.equals(other.mPattern)) &&\n            (mTimeZone == other.mTimeZone || mTimeZone.equals(other.mTimeZone)) &&\n            (mLocale == other.mLocale || mLocale.equals(other.mLocale)) &&\n            (mTimeZoneForced == other.mTimeZoneForced) &&\n            (mLocaleForced == other.mLocaleForced))",
      "right" : "if (\n            (mPattern == other.mPattern || mPattern.equals(other.mPattern)) &&\n            (mTimeZone == other.mTimeZone || mTimeZone.equals(other.mTimeZone)) &&\n            (mLocale == other.mLocale || mLocale.equals(other.mLocale)) &&\n            (mTimeZoneForced == other.mTimeZoneForced) &&\n            (mLocaleForced == other.mLocaleForced))",
      "info" : "IfStatement[34660-35061]:IfStatement[34680-35081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35025-35061]:Block[35045-35081]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[35039-35051]:ReturnStatement[35059-35071]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[35070-35083]:ReturnStatement[35090-35103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35247-35499]:Block[35267-35519]"
    }, {
      "left" : "int total = 0;",
      "right" : "int total = 0;",
      "info" : "VariableDeclarationStatement[35257-35271]:VariableDeclarationStatement[35277-35291]"
    }, {
      "left" : "total += mPattern.hashCode();",
      "right" : "total += mPattern.hashCode();",
      "info" : "ExpressionStatement[35280-35309]:ExpressionStatement[35300-35329]"
    }, {
      "left" : "total += mTimeZone.hashCode();",
      "right" : "total += mTimeZone.hashCode();",
      "info" : "ExpressionStatement[35318-35348]:ExpressionStatement[35338-35368]"
    }, {
      "left" : "total += (mTimeZoneForced ? 1 : 0);",
      "right" : "total += (mTimeZoneForced ? 1 : 0);",
      "info" : "ExpressionStatement[35357-35392]:ExpressionStatement[35377-35412]"
    }, {
      "left" : "total += mLocale.hashCode();",
      "right" : "total += mLocale.hashCode();",
      "info" : "ExpressionStatement[35401-35429]:ExpressionStatement[35421-35449]"
    }, {
      "left" : "total += (mLocaleForced ? 1 : 0);",
      "right" : "total += (mLocaleForced ? 1 : 0);",
      "info" : "ExpressionStatement[35438-35471]:ExpressionStatement[35458-35491]"
    }, {
      "left" : "return total;",
      "right" : "return total;",
      "info" : "ReturnStatement[35480-35493]:ReturnStatement[35500-35513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35653-35711]:Block[35673-35731]"
    }, {
      "left" : "return \"FastDateFormat[\" + mPattern + \"]\";",
      "right" : "return \"FastDateFormat[\" + mPattern + \"]\";",
      "info" : "ReturnStatement[35663-35705]:ReturnStatement[35683-35725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37279-37318]:Block[37448-37487]"
    }, {
      "left" : "mValue = value;",
      "right" : "mValue = value;",
      "info" : "ExpressionStatement[37293-37308]:ExpressionStatement[37462-37477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37405-37438]:Block[37574-37607]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[37419-37428]:ReturnStatement[37588-37597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37558-37604]:Block[37727-37773]"
    }, {
      "left" : "buffer.append(mValue);",
      "right" : "buffer.append(mValue);",
      "info" : "ExpressionStatement[37572-37594]:ExpressionStatement[37741-37763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38000-38039]:Block[38169-38208]"
    }, {
      "left" : "mValue = value;",
      "right" : "mValue = value;",
      "info" : "ExpressionStatement[38014-38029]:ExpressionStatement[38183-38198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38126-38173]:Block[38295-38342]"
    }, {
      "left" : "return mValue.length();",
      "right" : "return mValue.length();",
      "info" : "ReturnStatement[38140-38163]:ReturnStatement[38309-38332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38293-38339]:Block[38462-38508]"
    }, {
      "left" : "buffer.append(mValue);",
      "right" : "buffer.append(mValue);",
      "info" : "ExpressionStatement[38307-38329]:ExpressionStatement[38476-38498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38817-38886]:Block[38986-39055]"
    }, {
      "left" : "mField = field;",
      "right" : "mField = field;",
      "info" : "ExpressionStatement[38831-38846]:ExpressionStatement[39000-39015]"
    }, {
      "left" : "mValues = values;",
      "right" : "mValues = values;",
      "info" : "ExpressionStatement[38859-38876]:ExpressionStatement[39028-39045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38973-39229]:Block[39142-39398]"
    }, {
      "left" : "int max = 0;",
      "right" : "int max = 0;",
      "info" : "VariableDeclarationStatement[38987-38999]:VariableDeclarationStatement[39156-39168]"
    }, {
      "left" : "for (int i=mValues.length; --i >= 0)",
      "right" : "for (int i=mValues.length; --i >= 0)",
      "info" : "ForStatement[39012-39195]:ForStatement[39181-39364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39051-39195]:Block[39220-39364]"
    }, {
      "left" : "int len = mValues[i].length();",
      "right" : "int len = mValues[i].length();",
      "info" : "VariableDeclarationStatement[39069-39099]:VariableDeclarationStatement[39238-39268]"
    }, {
      "left" : "if (len > max)",
      "right" : "if (len > max)",
      "info" : "IfStatement[39116-39181]:IfStatement[39285-39350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39131-39181]:Block[39300-39350]"
    }, {
      "left" : "max = len;",
      "right" : "max = len;",
      "info" : "ExpressionStatement[39153-39163]:ExpressionStatement[39322-39332]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[39208-39219]:ReturnStatement[39377-39388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39349-39418]:Block[39518-39587]"
    }, {
      "left" : "buffer.append(mValues[calendar.get(mField)]);",
      "right" : "buffer.append(mValues[calendar.get(mField)]);",
      "info" : "ExpressionStatement[39363-39408]:ExpressionStatement[39532-39577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39912-39951]:Block[40081-40120]"
    }, {
      "left" : "mField = field;",
      "right" : "mField = field;",
      "info" : "ExpressionStatement[39926-39941]:ExpressionStatement[40095-40110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40038-40071]:Block[40207-40240]"
    }, {
      "left" : "return 4;",
      "right" : "return 4;",
      "info" : "ReturnStatement[40052-40061]:ReturnStatement[40221-40230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40191-40254]:Block[40360-40423]"
    }, {
      "left" : "appendTo(buffer, calendar.get(mField));",
      "right" : "appendTo(buffer, calendar.get(mField));",
      "info" : "ExpressionStatement[40205-40244]:ExpressionStatement[40374-40413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40372-40708]:Block[40541-40877]"
    }, {
      "left" : "if (value < 10)",
      "right" : "if (value < 10)",
      "info" : "IfStatement[40386-40698]:IfStatement[40555-40867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40402-40469]:Block[40571-40638]"
    }, {
      "left" : "buffer.append((char)(value + '0'));",
      "right" : "buffer.append((char)(value + '0'));",
      "info" : "ExpressionStatement[40420-40455]:ExpressionStatement[40589-40624]"
    }, {
      "left" : "if (value < 100)",
      "right" : "if (value < 100)",
      "info" : "IfStatement[40475-40698]:IfStatement[40644-40867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40492-40621]:Block[40661-40790]"
    }, {
      "left" : "buffer.append((char)(value / 10 + '0'));",
      "right" : "buffer.append((char)(value / 10 + '0'));",
      "info" : "ExpressionStatement[40510-40550]:ExpressionStatement[40679-40719]"
    }, {
      "left" : "buffer.append((char)(value % 10 + '0'));",
      "right" : "buffer.append((char)(value % 10 + '0'));",
      "info" : "ExpressionStatement[40567-40607]:ExpressionStatement[40736-40776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40627-40698]:Block[40796-40867]"
    }, {
      "left" : "buffer.append(Integer.toString(value));",
      "right" : "buffer.append(Integer.toString(value));",
      "info" : "ExpressionStatement[40645-40684]:ExpressionStatement[40814-40853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41067-41099]:Block[41236-41268]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[41081-41089]:SuperConstructorInvocation[41250-41258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41186-41219]:Block[41355-41388]"
    }, {
      "left" : "return 2;",
      "right" : "return 2;",
      "info" : "ReturnStatement[41200-41209]:ReturnStatement[41369-41378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41339-41414]:Block[41508-41583]"
    }, {
      "left" : "appendTo(buffer, calendar.get(Calendar.MONTH) + 1);",
      "right" : "appendTo(buffer, calendar.get(Calendar.MONTH) + 1);",
      "info" : "ExpressionStatement[41353-41404]:ExpressionStatement[41522-41573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41532-41774]:Block[41701-41943]"
    }, {
      "left" : "if (value < 10)",
      "right" : "if (value < 10)",
      "info" : "IfStatement[41546-41764]:IfStatement[41715-41933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41562-41629]:Block[41731-41798]"
    }, {
      "left" : "buffer.append((char)(value + '0'));",
      "right" : "buffer.append((char)(value + '0'));",
      "info" : "ExpressionStatement[41580-41615]:ExpressionStatement[41749-41784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41635-41764]:Block[41804-41933]"
    }, {
      "left" : "buffer.append((char)(value / 10 + '0'));",
      "right" : "buffer.append((char)(value / 10 + '0'));",
      "info" : "ExpressionStatement[41653-41693]:ExpressionStatement[41822-41862]"
    }, {
      "left" : "buffer.append((char)(value % 10 + '0'));",
      "right" : "buffer.append((char)(value % 10 + '0'));",
      "info" : "ExpressionStatement[41710-41750]:ExpressionStatement[41879-41919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42220-42455]:Block[42389-42624]"
    }, {
      "left" : "if (size < 3)",
      "right" : "if (size < 3)",
      "info" : "IfStatement[42234-42391]:IfStatement[42403-42560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42248-42391]:Block[42417-42560]"
    }, {
      "left" : "throw new IllegalArgumentException();",
      "right" : "throw new IllegalArgumentException();",
      "info" : "ThrowStatement[42340-42377]:ThrowStatement[42509-42546]"
    }, {
      "left" : "mField = field;",
      "right" : "mField = field;",
      "info" : "ExpressionStatement[42404-42419]:ExpressionStatement[42573-42588]"
    }, {
      "left" : "mSize = size;",
      "right" : "mSize = size;",
      "info" : "ExpressionStatement[42432-42445]:ExpressionStatement[42601-42614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42542-42575]:Block[42711-42744]"
    }, {
      "left" : "return 4;",
      "right" : "return 4;",
      "info" : "ReturnStatement[42556-42565]:ReturnStatement[42725-42734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42695-42758]:Block[42864-42927]"
    }, {
      "left" : "appendTo(buffer, calendar.get(mField));",
      "right" : "appendTo(buffer, calendar.get(mField));",
      "info" : "ExpressionStatement[42709-42748]:ExpressionStatement[42878-42917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42876-43644]:Block[43045-43813]"
    }, {
      "left" : "if (value < 100)",
      "right" : "if (value < 100)",
      "info" : "IfStatement[42890-43634]:IfStatement[43059-43803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42907-43144]:Block[43076-43313]"
    }, {
      "left" : "for (int i = mSize; --i >= 2)",
      "right" : "for (int i = mSize; --i >= 2)",
      "info" : "ForStatement[42925-43016]:ForStatement[43094-43185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42957-43016]:Block[43126-43185]"
    }, {
      "left" : "buffer.append('0');",
      "right" : "buffer.append('0');",
      "info" : "ExpressionStatement[42979-42998]:ExpressionStatement[43148-43167]"
    }, {
      "left" : "buffer.append((char)(value / 10 + '0'));",
      "right" : "buffer.append((char)(value / 10 + '0'));",
      "info" : "ExpressionStatement[43033-43073]:ExpressionStatement[43202-43242]"
    }, {
      "left" : "buffer.append((char)(value % 10 + '0'));",
      "right" : "buffer.append((char)(value % 10 + '0'));",
      "info" : "ExpressionStatement[43090-43130]:ExpressionStatement[43259-43299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43150-43634]:Block[43319-43803]"
    }, {
      "left" : "int digits;",
      "right" : "int digits;",
      "info" : "VariableDeclarationStatement[43168-43179]:VariableDeclarationStatement[43337-43348]"
    }, {
      "left" : "if (value < 1000)",
      "right" : "if (value < 1000)",
      "info" : "IfStatement[43196-43451]:IfStatement[43365-43620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43214-43265]:Block[43383-43434]"
    }, {
      "left" : "digits = 3;",
      "right" : "digits = 3;",
      "info" : "ExpressionStatement[43236-43247]:ExpressionStatement[43405-43416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43271-43451]:Block[43440-43620]"
    }, {
      "left" : "Validate.isTrue(value > -1, \"Negative values should not be possible\", value);",
      "right" : "Validate.isTrue(value > -1, \"Negative values should not be possible\", value);",
      "info" : "ExpressionStatement[43293-43370]:ExpressionStatement[43462-43539]"
    }, {
      "left" : "digits = Integer.toString(value).length();",
      "right" : "digits = Integer.toString(value).length();",
      "info" : "ExpressionStatement[43391-43433]:ExpressionStatement[43560-43602]"
    }, {
      "left" : "for (int i = mSize; --i >= digits)",
      "right" : "for (int i = mSize; --i >= digits)",
      "info" : "ForStatement[43468-43564]:ForStatement[43637-43733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43505-43564]:Block[43674-43733]"
    }, {
      "left" : "buffer.append('0');",
      "right" : "buffer.append('0');",
      "info" : "ExpressionStatement[43527-43546]:ExpressionStatement[43696-43715]"
    }, {
      "left" : "buffer.append(Integer.toString(value));",
      "right" : "buffer.append(Integer.toString(value));",
      "info" : "ExpressionStatement[43581-43620]:ExpressionStatement[43750-43789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44033-44072]:Block[44202-44241]"
    }, {
      "left" : "mField = field;",
      "right" : "mField = field;",
      "info" : "ExpressionStatement[44047-44062]:ExpressionStatement[44216-44231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44159-44192]:Block[44328-44361]"
    }, {
      "left" : "return 2;",
      "right" : "return 2;",
      "info" : "ReturnStatement[44173-44182]:ReturnStatement[44342-44351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44312-44375]:Block[44481-44544]"
    }, {
      "left" : "appendTo(buffer, calendar.get(mField));",
      "right" : "appendTo(buffer, calendar.get(mField));",
      "info" : "ExpressionStatement[44326-44365]:ExpressionStatement[44495-44534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44493-44740]:Block[44662-44909]"
    }, {
      "left" : "if (value < 100)",
      "right" : "if (value < 100)",
      "info" : "IfStatement[44507-44730]:IfStatement[44676-44899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44524-44653]:Block[44693-44822]"
    }, {
      "left" : "buffer.append((char)(value / 10 + '0'));",
      "right" : "buffer.append((char)(value / 10 + '0'));",
      "info" : "ExpressionStatement[44542-44582]:ExpressionStatement[44711-44751]"
    }, {
      "left" : "buffer.append((char)(value % 10 + '0'));",
      "right" : "buffer.append((char)(value % 10 + '0'));",
      "info" : "ExpressionStatement[44599-44639]:ExpressionStatement[44768-44808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44659-44730]:Block[44828-44899]"
    }, {
      "left" : "buffer.append(Integer.toString(value));",
      "right" : "buffer.append(Integer.toString(value));",
      "info" : "ExpressionStatement[44677-44716]:ExpressionStatement[44846-44885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45082-45114]:Block[45251-45283]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[45096-45104]:SuperConstructorInvocation[45265-45273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45201-45234]:Block[45370-45403]"
    }, {
      "left" : "return 2;",
      "right" : "return 2;",
      "info" : "ReturnStatement[45215-45224]:ReturnStatement[45384-45393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45354-45430]:Block[45523-45599]"
    }, {
      "left" : "appendTo(buffer, calendar.get(Calendar.YEAR) % 100);",
      "right" : "appendTo(buffer, calendar.get(Calendar.YEAR) % 100);",
      "info" : "ExpressionStatement[45368-45420]:ExpressionStatement[45537-45589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45548-45665]:Block[45717-45834]"
    }, {
      "left" : "buffer.append((char)(value / 10 + '0'));",
      "right" : "buffer.append((char)(value / 10 + '0'));",
      "info" : "ExpressionStatement[45562-45602]:ExpressionStatement[45731-45771]"
    }, {
      "left" : "buffer.append((char)(value % 10 + '0'));",
      "right" : "buffer.append((char)(value % 10 + '0'));",
      "info" : "ExpressionStatement[45615-45655]:ExpressionStatement[45784-45824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46013-46045]:Block[46182-46214]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[46027-46035]:SuperConstructorInvocation[46196-46204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46132-46165]:Block[46301-46334]"
    }, {
      "left" : "return 2;",
      "right" : "return 2;",
      "info" : "ReturnStatement[46146-46155]:ReturnStatement[46315-46324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46285-46360]:Block[46454-46529]"
    }, {
      "left" : "appendTo(buffer, calendar.get(Calendar.MONTH) + 1);",
      "right" : "appendTo(buffer, calendar.get(Calendar.MONTH) + 1);",
      "info" : "ExpressionStatement[46299-46350]:ExpressionStatement[46468-46519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46478-46595]:Block[46647-46764]"
    }, {
      "left" : "buffer.append((char)(value / 10 + '0'));",
      "right" : "buffer.append((char)(value / 10 + '0'));",
      "info" : "ExpressionStatement[46492-46532]:ExpressionStatement[46661-46701]"
    }, {
      "left" : "buffer.append((char)(value % 10 + '0'));",
      "right" : "buffer.append((char)(value % 10 + '0'));",
      "info" : "ExpressionStatement[46545-46585]:ExpressionStatement[46714-46754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47014-47051]:Block[47183-47220]"
    }, {
      "left" : "mRule = rule;",
      "right" : "mRule = rule;",
      "info" : "ExpressionStatement[47028-47041]:ExpressionStatement[47197-47210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47138-47192]:Block[47307-47361]"
    }, {
      "left" : "return mRule.estimateLength();",
      "right" : "return mRule.estimateLength();",
      "info" : "ReturnStatement[47152-47182]:ReturnStatement[47321-47351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47312-47532]:Block[47481-47701]"
    }, {
      "left" : "int value = calendar.get(Calendar.HOUR);",
      "right" : "int value = calendar.get(Calendar.HOUR);",
      "info" : "VariableDeclarationStatement[47326-47366]:VariableDeclarationStatement[47495-47535]"
    }, {
      "left" : "if (value == 0)",
      "right" : "if (value == 0)",
      "info" : "IfStatement[47379-47479]:IfStatement[47548-47648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47395-47479]:Block[47564-47648]"
    }, {
      "left" : "value = calendar.getLeastMaximum(Calendar.HOUR) + 1;",
      "right" : "value = calendar.getLeastMaximum(Calendar.HOUR) + 1;",
      "info" : "ExpressionStatement[47413-47465]:ExpressionStatement[47582-47634]"
    }, {
      "left" : "mRule.appendTo(buffer, value);",
      "right" : "mRule.appendTo(buffer, value);",
      "info" : "ExpressionStatement[47492-47522]:ExpressionStatement[47661-47691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47644-47698]:Block[47813-47867]"
    }, {
      "left" : "mRule.appendTo(buffer, value);",
      "right" : "mRule.appendTo(buffer, value);",
      "info" : "ExpressionStatement[47658-47688]:ExpressionStatement[47827-47857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48134-48171]:Block[48303-48340]"
    }, {
      "left" : "mRule = rule;",
      "right" : "mRule = rule;",
      "info" : "ExpressionStatement[48148-48161]:ExpressionStatement[48317-48330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48258-48312]:Block[48427-48481]"
    }, {
      "left" : "return mRule.estimateLength();",
      "right" : "return mRule.estimateLength();",
      "info" : "ReturnStatement[48272-48302]:ReturnStatement[48441-48471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48432-48661]:Block[48601-48830]"
    }, {
      "left" : "int value = calendar.get(Calendar.HOUR_OF_DAY);",
      "right" : "int value = calendar.get(Calendar.HOUR_OF_DAY);",
      "info" : "VariableDeclarationStatement[48446-48493]:VariableDeclarationStatement[48615-48662]"
    }, {
      "left" : "if (value == 0)",
      "right" : "if (value == 0)",
      "info" : "IfStatement[48506-48608]:IfStatement[48675-48777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48522-48608]:Block[48691-48777]"
    }, {
      "left" : "value = calendar.getMaximum(Calendar.HOUR_OF_DAY) + 1;",
      "right" : "value = calendar.getMaximum(Calendar.HOUR_OF_DAY) + 1;",
      "info" : "ExpressionStatement[48540-48594]:ExpressionStatement[48709-48763]"
    }, {
      "left" : "mRule.appendTo(buffer, value);",
      "right" : "mRule.appendTo(buffer, value);",
      "info" : "ExpressionStatement[48621-48651]:ExpressionStatement[48790-48820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48773-48827]:Block[48942-48996]"
    }, {
      "left" : "mRule.appendTo(buffer, value);",
      "right" : "mRule.appendTo(buffer, value);",
      "info" : "ExpressionStatement[48787-48817]:ExpressionStatement[48956-48986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49651-50097]:Block[49820-50266]"
    }, {
      "left" : "mTimeZone = timeZone;",
      "right" : "mTimeZone = timeZone;",
      "info" : "ExpressionStatement[49665-49686]:ExpressionStatement[49834-49855]"
    }, {
      "left" : "mTimeZoneForced = timeZoneForced;",
      "right" : "mTimeZoneForced = timeZoneForced;",
      "info" : "ExpressionStatement[49699-49732]:ExpressionStatement[49868-49901]"
    }, {
      "left" : "mLocale = locale;",
      "right" : "mLocale = locale;",
      "info" : "ExpressionStatement[49745-49762]:ExpressionStatement[49914-49931]"
    }, {
      "left" : "mStyle = style;",
      "right" : "mStyle = style;",
      "info" : "ExpressionStatement[49775-49790]:ExpressionStatement[49944-49959]"
    }, {
      "left" : "if (timeZoneForced)",
      "right" : "if (timeZoneForced)",
      "info" : "IfStatement[49804-50087]:IfStatement[49973-50256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49824-49998]:Block[49993-50167]"
    }, {
      "left" : "mStandard = getTimeZoneDisplay(timeZone, false, style, locale);",
      "right" : "mStandard = getTimeZoneDisplay(timeZone, false, style, locale);",
      "info" : "ExpressionStatement[49842-49905]:ExpressionStatement[50011-50074]"
    }, {
      "left" : "mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);",
      "right" : "mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);",
      "info" : "ExpressionStatement[49922-49984]:ExpressionStatement[50091-50153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50004-50087]:Block[50173-50256]"
    }, {
      "left" : "mStandard = null;",
      "right" : "mStandard = null;",
      "info" : "ExpressionStatement[50022-50039]:ExpressionStatement[50191-50208]"
    }, {
      "left" : "mDaylight = null;",
      "right" : "mDaylight = null;",
      "info" : "ExpressionStatement[50056-50073]:ExpressionStatement[50225-50242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50184-50442]:Block[50353-50611]"
    }, {
      "left" : "if (mTimeZoneForced)",
      "right" : "if (mTimeZoneForced)",
      "info" : "IfStatement[50198-50432]:IfStatement[50367-50601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50219-50307]:Block[50388-50476]"
    }, {
      "left" : "return Math.max(mStandard.length(), mDaylight.length());",
      "right" : "return Math.max(mStandard.length(), mDaylight.length());",
      "info" : "ReturnStatement[50237-50293]:ReturnStatement[50406-50462]"
    }, {
      "left" : "if (mStyle == TimeZone.SHORT)",
      "right" : "if (mStyle == TimeZone.SHORT)",
      "info" : "IfStatement[50313-50432]:IfStatement[50482-50601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50343-50384]:Block[50512-50553]"
    }, {
      "left" : "return 4;",
      "right" : "return 4;",
      "info" : "ReturnStatement[50361-50370]:ReturnStatement[50530-50539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50390-50432]:Block[50559-50601]"
    }, {
      "left" : "return 40;",
      "right" : "return 40;",
      "info" : "ReturnStatement[50408-50418]:ReturnStatement[50577-50587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50562-51243]:Block[50731-51412]"
    }, {
      "left" : "if (mTimeZoneForced)",
      "right" : "if (mTimeZoneForced)",
      "info" : "IfStatement[50576-51233]:IfStatement[50745-51402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50597-50840]:Block[50766-51009]"
    }, {
      "left" : "if (mTimeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0)",
      "right" : "if (mTimeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0)",
      "info" : "IfStatement[50615-50826]:IfStatement[50784-50995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50690-50755]:Block[50859-50924]"
    }, {
      "left" : "buffer.append(mDaylight);",
      "right" : "buffer.append(mDaylight);",
      "info" : "ExpressionStatement[50712-50737]:ExpressionStatement[50881-50906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50761-50826]:Block[50930-50995]"
    }, {
      "left" : "buffer.append(mStandard);",
      "right" : "buffer.append(mStandard);",
      "info" : "ExpressionStatement[50783-50808]:ExpressionStatement[50952-50977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50846-51233]:Block[51015-51402]"
    }, {
      "left" : "TimeZone timeZone = calendar.getTimeZone();",
      "right" : "TimeZone timeZone = calendar.getTimeZone();",
      "info" : "VariableDeclarationStatement[50864-50907]:VariableDeclarationStatement[51033-51076]"
    }, {
      "left" : "if (timeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0)",
      "right" : "if (timeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0)",
      "info" : "IfStatement[50924-51219]:IfStatement[51093-51388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50998-51105]:Block[51167-51274]"
    }, {
      "left" : "buffer.append(getTimeZoneDisplay(timeZone, true, mStyle, mLocale));",
      "right" : "buffer.append(getTimeZoneDisplay(timeZone, true, mStyle, mLocale));",
      "info" : "ExpressionStatement[51020-51087]:ExpressionStatement[51189-51256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51111-51219]:Block[51280-51388]"
    }, {
      "left" : "buffer.append(getTimeZoneDisplay(timeZone, false, mStyle, mLocale));",
      "right" : "buffer.append(getTimeZoneDisplay(timeZone, false, mStyle, mLocale));",
      "info" : "ExpressionStatement[51133-51201]:ExpressionStatement[51302-51370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51934-51973]:Block[52103-52142]"
    }, {
      "left" : "mColon = colon;",
      "right" : "mColon = colon;",
      "info" : "ExpressionStatement[51948-51963]:ExpressionStatement[52117-52132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52060-52093]:Block[52229-52262]"
    }, {
      "left" : "return 5;",
      "right" : "return 5;",
      "info" : "ReturnStatement[52074-52083]:ReturnStatement[52243-52252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52213-52948]:Block[52382-53117]"
    }, {
      "left" : "int offset = calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);",
      "right" : "int offset = calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);",
      "info" : "VariableDeclarationStatement[52227-52311]:VariableDeclarationStatement[52396-52480]"
    }, {
      "left" : "if (offset < 0)",
      "right" : "if (offset < 0)",
      "info" : "IfStatement[52337-52495]:IfStatement[52506-52664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52353-52438]:Block[52522-52607]"
    }, {
      "left" : "buffer.append('-');",
      "right" : "buffer.append('-');",
      "info" : "ExpressionStatement[52371-52390]:ExpressionStatement[52540-52559]"
    }, {
      "left" : "offset = -offset;",
      "right" : "offset = -offset;",
      "info" : "ExpressionStatement[52407-52424]:ExpressionStatement[52576-52593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52444-52495]:Block[52613-52664]"
    }, {
      "left" : "buffer.append('+');",
      "right" : "buffer.append('+');",
      "info" : "ExpressionStatement[52462-52481]:ExpressionStatement[52631-52650]"
    }, {
      "left" : "int hours = offset / (60 * 60 * 1000);",
      "right" : "int hours = offset / (60 * 60 * 1000);",
      "info" : "VariableDeclarationStatement[52521-52559]:VariableDeclarationStatement[52690-52728]"
    }, {
      "left" : "buffer.append((char)(hours / 10 + '0'));",
      "right" : "buffer.append((char)(hours / 10 + '0'));",
      "info" : "ExpressionStatement[52572-52612]:ExpressionStatement[52741-52781]"
    }, {
      "left" : "buffer.append((char)(hours % 10 + '0'));",
      "right" : "buffer.append((char)(hours % 10 + '0'));",
      "info" : "ExpressionStatement[52625-52665]:ExpressionStatement[52794-52834]"
    }, {
      "left" : "if (mColon)",
      "right" : "if (mColon)",
      "info" : "IfStatement[52691-52754]:IfStatement[52860-52923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52703-52754]:Block[52872-52923]"
    }, {
      "left" : "buffer.append(':');",
      "right" : "buffer.append(':');",
      "info" : "ExpressionStatement[52721-52740]:ExpressionStatement[52890-52909]"
    }, {
      "left" : "int minutes = offset / (60 * 1000) - 60 * hours;",
      "right" : "int minutes = offset / (60 * 1000) - 60 * hours;",
      "info" : "VariableDeclarationStatement[52780-52828]:VariableDeclarationStatement[52949-52997]"
    }, {
      "left" : "buffer.append((char)(minutes / 10 + '0'));",
      "right" : "buffer.append((char)(minutes / 10 + '0'));",
      "info" : "ExpressionStatement[52841-52883]:ExpressionStatement[53010-53052]"
    }, {
      "left" : "buffer.append((char)(minutes % 10 + '0'));",
      "right" : "buffer.append((char)(minutes % 10 + '0'));",
      "info" : "ExpressionStatement[52896-52938]:ExpressionStatement[53065-53107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53771-53953]:Block[53940-54122]"
    }, {
      "left" : "mTimeZone = timeZone;",
      "right" : "mTimeZone = timeZone;",
      "info" : "ExpressionStatement[53785-53806]:ExpressionStatement[53954-53975]"
    }, {
      "left" : "if (daylight)",
      "right" : "if (daylight)",
      "info" : "IfStatement[53819-53885]:IfStatement[53988-54054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53833-53885]:Block[54002-54054]"
    }, {
      "left" : "style |= 0x80000000;",
      "right" : "style |= 0x80000000;",
      "info" : "ExpressionStatement[53851-53871]:ExpressionStatement[54020-54040]"
    }, {
      "left" : "mStyle = style;",
      "right" : "mStyle = style;",
      "info" : "ExpressionStatement[53898-53913]:ExpressionStatement[54067-54082]"
    }, {
      "left" : "mLocale = locale;",
      "right" : "mLocale = locale;",
      "info" : "ExpressionStatement[53926-53943]:ExpressionStatement[54095-54112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54034-54098]:Block[54203-54267]"
    }, {
      "left" : "return mStyle * 31 + mLocale.hashCode();",
      "right" : "return mStyle * 31 + mLocale.hashCode();",
      "info" : "ReturnStatement[54048-54088]:ReturnStatement[54217-54257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54191-54614]:Block[54360-54783]"
    }, {
      "left" : "if (this == obj)",
      "right" : "if (this == obj)",
      "info" : "IfStatement[54205-54266]:IfStatement[54374-54435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54222-54266]:Block[54391-54435]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[54240-54252]:ReturnStatement[54409-54421]"
    }, {
      "left" : "if (obj instanceof TimeZoneDisplayKey)",
      "right" : "if (obj instanceof TimeZoneDisplayKey)",
      "info" : "IfStatement[54279-54578]:IfStatement[54448-54747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54318-54578]:Block[54487-54747]"
    }, {
      "left" : "TimeZoneDisplayKey other = (TimeZoneDisplayKey)obj;",
      "right" : "TimeZoneDisplayKey other = (TimeZoneDisplayKey)obj;",
      "info" : "VariableDeclarationStatement[54336-54387]:VariableDeclarationStatement[54505-54556]"
    }, {
      "left" : "return\n                    mTimeZone.equals(other.mTimeZone) &&\n                    mStyle == other.mStyle &&\n                    mLocale.equals(other.mLocale);",
      "right" : "return\n                    mTimeZone.equals(other.mTimeZone) &&\n                    mStyle == other.mStyle &&\n                    mLocale.equals(other.mLocale);",
      "info" : "ReturnStatement[54404-54564]:ReturnStatement[54573-54733]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[54591-54604]:ReturnStatement[54760-54773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55235-55298]:Block[55404-55467]"
    }, {
      "left" : "mObj1 = obj1;",
      "right" : "mObj1 = obj1;",
      "info" : "ExpressionStatement[55249-55262]:ExpressionStatement[55418-55431]"
    }, {
      "left" : "mObj2 = obj2;",
      "right" : "mObj2 = obj2;",
      "info" : "ExpressionStatement[55275-55288]:ExpressionStatement[55444-55457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55391-55812]:Block[55560-55981]"
    }, {
      "left" : "if (this == obj)",
      "right" : "if (this == obj)",
      "info" : "IfStatement[55405-55466]:IfStatement[55574-55635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55422-55466]:Block[55591-55635]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[55440-55452]:ReturnStatement[55609-55621]"
    }, {
      "left" : "if (!(obj instanceof Pair))",
      "right" : "if (!(obj instanceof Pair))",
      "info" : "IfStatement[55480-55553]:IfStatement[55649-55722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55508-55553]:Block[55677-55722]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55526-55539]:ReturnStatement[55695-55708]"
    }, {
      "left" : "Pair key = (Pair)obj;",
      "right" : "Pair key = (Pair)obj;",
      "info" : "VariableDeclarationStatement[55567-55588]:VariableDeclarationStatement[55736-55757]"
    }, {
      "left" : "return\n                (mObj1 == null ?\n                 key.mObj1 == null : mObj1.equals(key.mObj1)) &&\n                (mObj2 == null ?\n                 key.mObj2 == null : mObj2.equals(key.mObj2));",
      "right" : "return\n                (mObj1 == null ?\n                 key.mObj1 == null : mObj1.equals(key.mObj1)) &&\n                (mObj2 == null ?\n                 key.mObj2 == null : mObj2.equals(key.mObj2));",
      "info" : "ReturnStatement[55602-55802]:ReturnStatement[55771-55971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55893-56036]:Block[56062-56205]"
    }, {
      "left" : "return\n                (mObj1 == null ? 0 : mObj1.hashCode()) +\n                (mObj2 == null ? 0 : mObj2.hashCode());",
      "right" : "return\n                (mObj1 == null ? 0 : mObj1.hashCode()) +\n                (mObj2 == null ? 0 : mObj2.hashCode());",
      "info" : "ReturnStatement[55907-56026]:ReturnStatement[56076-56195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56120-56183]:Block[56289-56352]"
    }, {
      "left" : "return \"[\" + mObj1 + ':' + mObj2 + ']';",
      "right" : "return \"[\" + mObj1 + ':' + mObj2 + ']';",
      "info" : "ReturnStatement[56134-56173]:ReturnStatement[56303-56342]"
    } ]
  },
  "interFileMappings" : { }
}