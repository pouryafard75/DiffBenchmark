{
  "matchedElements" : [
 {
    "left" : "class : Complex",
    "right" : "class : Complex",
    "info" : "TypeDeclaration[1257-41054]:TypeDeclaration[1257-41451]"
  }, {
    "left" : "I",
    "right" : "I",
    "info" : "FieldDeclaration[2389-2512]:FieldDeclaration[2389-2512]"
  }, {
    "left" : "NaN",
    "right" : "NaN",
    "info" : "FieldDeclaration[2554-2678]:FieldDeclaration[2554-2678]"
  }, {
    "left" : "INF",
    "right" : "INF",
    "info" : "FieldDeclaration[2722-2875]:FieldDeclaration[2722-2875]"
  }, {
    "left" : "ONE",
    "right" : "ONE",
    "info" : "FieldDeclaration[2880-2990]:FieldDeclaration[2880-2990]"
  }, {
    "left" : "ZERO",
    "right" : "ZERO",
    "info" : "FieldDeclaration[2995-3106]:FieldDeclaration[2995-3106]"
  }, {
    "left" : "serialVersionUID",
    "right" : "serialVersionUID",
    "info" : "FieldDeclaration[3112-3222]:FieldDeclaration[3112-3222]"
  }, {
    "left" : "imaginary",
    "right" : "imaginary",
    "info" : "FieldDeclaration[3228-3290]:FieldDeclaration[3228-3290]"
  }, {
    "left" : "real",
    "right" : "real",
    "info" : "FieldDeclaration[3295-3347]:FieldDeclaration[3295-3347]"
  }, {
    "left" : "isNaN",
    "right" : "isNaN",
    "info" : "FieldDeclaration[3352-3453]:FieldDeclaration[3352-3453]"
  }, {
    "left" : "isInfinite",
    "right" : "isInfinite",
    "info" : "FieldDeclaration[3458-3560]:FieldDeclaration[3458-3560]"
  }, {
    "left" : "public Complex(real double)",
    "right" : "public Complex(real double)",
    "info" : "MethodDeclaration[3566-3736]:MethodDeclaration[3566-3736]"
  }, {
    "left" : "public Complex(real double, imaginary double)",
    "right" : "public Complex(real double, imaginary double)",
    "info" : "MethodDeclaration[3742-4183]:MethodDeclaration[3742-4183]"
  }, {
    "left" : "public abs() : double",
    "right" : "public abs() : double",
    "info" : "MethodDeclaration[4189-5161]:MethodDeclaration[4189-5161]"
  }, {
    "left" : "public add(addend ) : ",
    "right" : "public add(addend ) : ",
    "info" : "MethodDeclaration[5167-6190]:MethodDeclaration[5167-6190]"
  }, {
    "left" : "public add(addend double) : ",
    "right" : "public add(addend double) : ",
    "info" : "MethodDeclaration[6196-6654]:MethodDeclaration[6196-6654]"
  }, {
    "left" : "public conjugate() : ",
    "right" : "public conjugate() : ",
    "info" : "MethodDeclaration[6661-7397]:MethodDeclaration[6661-7397]"
  }, {
    "left" : "public divide(divisor ) : ",
    "right" : "public divide(divisor ) : ",
    "info" : "MethodDeclaration[7403-10067]:MethodDeclaration[7403-10067]"
  }, {
    "left" : "public divide(divisor double) : ",
    "right" : "public divide(divisor double) : ",
    "info" : "MethodDeclaration[10073-10757]:MethodDeclaration[10073-10757]"
  }, {
    "left" : "public reciprocal() : ",
    "right" : "public reciprocal() : ",
    "info" : "MethodDeclaration[10763-11410]:MethodDeclaration[10763-11410]"
  }, {
    "left" : "public equals(other ) : boolean",
    "right" : "public equals(other ) : boolean",
    "info" : "MethodDeclaration[11416-12530]:MethodDeclaration[11416-12530]"
  }, {
    "left" : "public hashCode() : int",
    "right" : "public hashCode() : int",
    "info" : "MethodDeclaration[12536-12948]:MethodDeclaration[12536-12948]"
  }, {
    "left" : "public getImaginary() : double",
    "right" : "public getImaginary() : double",
    "info" : "MethodDeclaration[12954-13108]:MethodDeclaration[12954-13108]"
  }, {
    "left" : "public getReal() : double",
    "right" : "public getReal() : double",
    "info" : "MethodDeclaration[13114-13248]:MethodDeclaration[13114-13248]"
  }, {
    "left" : "public isNaN() : boolean",
    "right" : "public isNaN() : boolean",
    "info" : "MethodDeclaration[13254-13525]:MethodDeclaration[13254-13525]"
  }, {
    "left" : "public isInfinite() : boolean",
    "right" : "public isInfinite() : boolean",
    "info" : "MethodDeclaration[13531-13968]:MethodDeclaration[13531-13968]"
  }, {
    "left" : "public multiply(factor ) : ",
    "right" : "public multiply(factor ) : ",
    "info" : "MethodDeclaration[13974-15634]:MethodDeclaration[13974-15634]"
  }, {
    "left" : "public multiply(factor int) : ",
    "right" : "public multiply(factor int) : ",
    "info" : "MethodDeclaration[15640-16219]:MethodDeclaration[15640-16219]"
  }, {
    "left" : "public multiply(factor double) : ",
    "right" : "public multiply(factor double) : ",
    "info" : "MethodDeclaration[16225-16935]:MethodDeclaration[16225-16935]"
  }, {
    "left" : "public negate() : ",
    "right" : "public negate() : ",
    "info" : "MethodDeclaration[16941-17312]:MethodDeclaration[16941-17312]"
  }, {
    "left" : "public subtract(subtrahend ) : ",
    "right" : "public subtract(subtrahend ) : ",
    "info" : "MethodDeclaration[17318-18381]:MethodDeclaration[17318-18381]"
  }, {
    "left" : "public subtract(subtrahend double) : ",
    "right" : "public subtract(subtrahend double) : ",
    "info" : "MethodDeclaration[18387-18836]:MethodDeclaration[18387-18836]"
  }, {
    "left" : "public acos() : ",
    "right" : "public acos() : ",
    "info" : "MethodDeclaration[18842-19542]:MethodDeclaration[18842-19542]"
  }, {
    "left" : "public asin() : ",
    "right" : "public asin() : ",
    "info" : "MethodDeclaration[19548-20234]:MethodDeclaration[19548-20234]"
  }, {
    "left" : "public atan() : ",
    "right" : "public atan() : ",
    "info" : "MethodDeclaration[20240-20951]:MethodDeclaration[20240-20951]"
  }, {
    "left" : "public cos() : ",
    "right" : "public cos() : ",
    "info" : "MethodDeclaration[20957-22279]:MethodDeclaration[20957-22279]"
  }, {
    "left" : "public cosh() : ",
    "right" : "public cosh() : ",
    "info" : "MethodDeclaration[22285-23644]:MethodDeclaration[22285-23644]"
  }, {
    "left" : "public exp() : ",
    "right" : "public exp() : ",
    "info" : "MethodDeclaration[23650-25026]:MethodDeclaration[23650-25026]"
  }, {
    "left" : "public log() : ",
    "right" : "public log() : ",
    "info" : "MethodDeclaration[25032-26577]:MethodDeclaration[25032-26577]"
  }, {
    "left" : "public pow(x ) : ",
    "right" : "public pow(x ) : ",
    "info" : "MethodDeclaration[26583-27468]:MethodDeclaration[26583-27468]"
  }, {
    "left" : "public pow(x double) : ",
    "right" : "public pow(x double) : ",
    "info" : "MethodDeclaration[27474-27805]:MethodDeclaration[27474-27805]"
  }, {
    "left" : "public sin() : ",
    "right" : "public sin() : ",
    "info" : "MethodDeclaration[27811-29134]:MethodDeclaration[27811-29134]"
  }, {
    "left" : "public sinh() : ",
    "right" : "public sinh() : ",
    "info" : "MethodDeclaration[29140-30471]:MethodDeclaration[29140-30471]"
  }, {
    "left" : "public sqrt() : ",
    "right" : "public sqrt() : ",
    "info" : "MethodDeclaration[30477-32366]:MethodDeclaration[30477-32366]"
  }, {
    "left" : "public sqrt1z() : ",
    "right" : "public sqrt1z() : ",
    "info" : "MethodDeclaration[32372-33146]:MethodDeclaration[32372-33146]"
  }, {
    "left" : "public tan() : ",
    "right" : "public tan() : ",
    "info" : "MethodDeclaration[33152-34658]:MethodDeclaration[33152-34859]"
  }, {
    "left" : "public tanh() : ",
    "right" : "public tanh() : ",
    "info" : "MethodDeclaration[34664-36180]:MethodDeclaration[34865-36577]"
  }, {
    "left" : "public getArgument() : double",
    "right" : "public getArgument() : double",
    "info" : "MethodDeclaration[36188-37107]:MethodDeclaration[36585-37504]"
  }, {
    "left" : "public nthRoot(n int) : ",
    "right" : "public nthRoot(n int) : ",
    "info" : "MethodDeclaration[37113-39199]:MethodDeclaration[37510-39596]"
  }, {
    "left" : "protected createComplex(realPart double, imaginaryPart double) : ",
    "right" : "protected createComplex(realPart double, imaginaryPart double) : ",
    "info" : "MethodDeclaration[39205-39641]:MethodDeclaration[39602-40038]"
  }, {
    "left" : "public valueOf(realPart double, imaginaryPart double) : ",
    "right" : "public valueOf(realPart double, imaginaryPart double) : ",
    "info" : "MethodDeclaration[39647-40128]:MethodDeclaration[40044-40525]"
  }, {
    "left" : "public valueOf(realPart double) : ",
    "right" : "public valueOf(realPart double) : ",
    "info" : "MethodDeclaration[40134-40447]:MethodDeclaration[40531-40844]"
  }, {
    "left" : "protected readResolve() : ",
    "right" : "protected readResolve() : ",
    "info" : "MethodDeclaration[40453-40810]:MethodDeclaration[40850-41207]"
  }, {
    "left" : "public getField() : ",
    "right" : "public getField() : ",
    "info" : "MethodDeclaration[40816-40922]:MethodDeclaration[41213-41319]"
  }, {
    "left" : "public toString() : ",
    "right" : "public toString() : ",
    "info" : "MethodDeclaration[40928-41051]:MethodDeclaration[41325-41448]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2314-2320]:Modifier[2314-2320]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[2321-2326]:TYPE_DECLARATION_KIND[2321-2326]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3676-3682]:Modifier[3676-3682]"
  }, {
    "left" : "Complex",
    "right" : "Complex",
    "info" : "SimpleName[3683-3690]:SimpleName[3683-3690]"
  }, {
    "left" : "double real",
    "right" : "double real",
    "info" : "SingleVariableDeclaration[3691-3702]:SingleVariableDeclaration[3691-3702]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3704-3736]:Block[3704-3736]"
  }, {
    "left" : "this(real, 0.0);",
    "right" : "this(real, 0.0);",
    "info" : "ConstructorInvocation[3714-3730]:ConstructorInvocation[3714-3730]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3902-3908]:Modifier[3902-3908]"
  }, {
    "left" : "Complex",
    "right" : "Complex",
    "info" : "SimpleName[3909-3916]:SimpleName[3909-3916]"
  }, {
    "left" : "double real",
    "right" : "double real",
    "info" : "SingleVariableDeclaration[3917-3928]:SingleVariableDeclaration[3917-3928]"
  }, {
    "left" : "double imaginary",
    "right" : "double imaginary",
    "info" : "SingleVariableDeclaration[3930-3946]:SingleVariableDeclaration[3930-3946]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3948-4183]:Block[3948-4183]"
  }, {
    "left" : "this.real = real;",
    "right" : "this.real = real;",
    "info" : "ExpressionStatement[3958-3975]:ExpressionStatement[3958-3975]"
  }, {
    "left" : "this.imaginary = imaginary;",
    "right" : "this.imaginary = imaginary;",
    "info" : "ExpressionStatement[3984-4011]:ExpressionStatement[3984-4011]"
  }, {
    "left" : "isNaN = Double.isNaN(real) || Double.isNaN(imaginary);",
    "right" : "isNaN = Double.isNaN(real) || Double.isNaN(imaginary);",
    "info" : "ExpressionStatement[4021-4075]:ExpressionStatement[4021-4075]"
  }, {
    "left" : "isInfinite = !isNaN &&\n            (Double.isInfinite(real) || Double.isInfinite(imaginary));",
    "right" : "isInfinite = !isNaN &&\n            (Double.isInfinite(real) || Double.isInfinite(imaginary));",
    "info" : "ExpressionStatement[4084-4177]:ExpressionStatement[4084-4177]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4497-4503]:Modifier[4497-4503]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[4504-4510]:PrimitiveType[4504-4510]"
  }, {
    "left" : "abs",
    "right" : "abs",
    "info" : "SimpleName[4511-4514]:SimpleName[4511-4514]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4517-5161]:Block[4517-5161]"
  }, {
    "left" : "if (isNaN)",
    "right" : "if (isNaN)",
    "info" : "IfStatement[4527-4580]:IfStatement[4527-4580]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4538-4580]:Block[4538-4580]"
  }, {
    "left" : "return Double.NaN;",
    "right" : "return Double.NaN;",
    "info" : "ReturnStatement[4552-4570]:ReturnStatement[4552-4570]"
  }, {
    "left" : "if (isInfinite())",
    "right" : "if (isInfinite())",
    "info" : "IfStatement[4589-4663]:IfStatement[4589-4663]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4607-4663]:Block[4607-4663]"
  }, {
    "left" : "return Double.POSITIVE_INFINITY;",
    "right" : "return Double.POSITIVE_INFINITY;",
    "info" : "ReturnStatement[4621-4653]:ReturnStatement[4621-4653]"
  }, {
    "left" : "if (FastMath.abs(real) < FastMath.abs(imaginary))",
    "right" : "if (FastMath.abs(real) < FastMath.abs(imaginary))",
    "info" : "IfStatement[4672-5155]:IfStatement[4672-5155]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4722-4938]:Block[4722-4938]"
  }, {
    "left" : "if (imaginary == 0.0)",
    "right" : "if (imaginary == 0.0)",
    "info" : "IfStatement[4736-4816]:IfStatement[4736-4816]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4758-4816]:Block[4758-4816]"
  }, {
    "left" : "return FastMath.abs(real);",
    "right" : "return FastMath.abs(real);",
    "info" : "ReturnStatement[4776-4802]:ReturnStatement[4776-4802]"
  }, {
    "left" : "double q = real / imaginary;",
    "right" : "double q = real / imaginary;",
    "info" : "VariableDeclarationStatement[4829-4857]:VariableDeclarationStatement[4829-4857]"
  }, {
    "left" : "return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);",
    "right" : "return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);",
    "info" : "ReturnStatement[4870-4928]:ReturnStatement[4870-4928]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4944-5155]:Block[4944-5155]"
  }, {
    "left" : "if (real == 0.0)",
    "right" : "if (real == 0.0)",
    "info" : "IfStatement[4958-5038]:IfStatement[4958-5038]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4975-5038]:Block[4975-5038]"
  }, {
    "left" : "return FastMath.abs(imaginary);",
    "right" : "return FastMath.abs(imaginary);",
    "info" : "ReturnStatement[4993-5024]:ReturnStatement[4993-5024]"
  }, {
    "left" : "double q = imaginary / real;",
    "right" : "double q = imaginary / real;",
    "info" : "VariableDeclarationStatement[5051-5079]:VariableDeclarationStatement[5051-5079]"
  }, {
    "left" : "return FastMath.abs(real) * FastMath.sqrt(1 + q * q);",
    "right" : "return FastMath.abs(real) * FastMath.sqrt(1 + q * q);",
    "info" : "ReturnStatement[5092-5145]:ReturnStatement[5092-5145]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5888-5894]:Modifier[5888-5894]"
  }, {
    "left" : "Complex",
    "right" : "Complex",
    "info" : "SimpleType[5895-5902]:SimpleType[5895-5902]"
  }, {
    "left" : "add",
    "right" : "add",
    "info" : "SimpleName[5903-5906]:SimpleName[5903-5906]"
  }, {
    "left" : "Complex addend",
    "right" : "Complex addend",
    "info" : "SingleVariableDeclaration[5907-5921]:SingleVariableDeclaration[5907-5921]"
  }, {
    "left" : "NullArgumentException",
    "right" : "NullArgumentException",
    "info" : "SimpleType[5930-5951]:SimpleType[5930-5951]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5952-6190]:Block[5952-6190]"
  }, {
    "left" : "MathUtils.checkNotNull(addend);",
    "right" : "MathUtils.checkNotNull(addend);",
    "info" : "ExpressionStatement[5962-5993]:ExpressionStatement[5962-5993]"
  }, {
    "left" : "if (isNaN || addend.isNaN)",
    "right" : "if (isNaN || addend.isNaN)",
    "info" : "IfStatement[6002-6064]:IfStatement[6002-6064]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6029-6064]:Block[6029-6064]"
  }, {
    "left" : "return NaN;",
    "right" : "return NaN;",
    "info" : "ReturnStatement[6043-6054]:ReturnStatement[6043-6054]"
  }, {
    "left" : "return createComplex(real + addend.getReal(),\n                             imaginary + addend.getImaginary());",
    "right" : "return createComplex(real + addend.getReal(),\n                             imaginary + addend.getImaginary());",
    "info" : "ReturnStatement[6074-6184]:ReturnStatement[6074-6184]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6477-6483]:Modifier[6477-6483]"
  }, {
    "left" : "Complex",
    "right" : "Complex",
    "info" : "SimpleType[6484-6491]:SimpleType[6484-6491]"
  }, {
    "left" : "add",
    "right" : "add",
    "info" : "SimpleName[6492-6495]:SimpleName[6492-6495]"
  }, {
    "left" : "double addend",
    "right" : "double addend",
    "info" : "SingleVariableDeclaration[6496-6509]:SingleVariableDeclaration[6496-6509]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6511-6654]:Block[6511-6654]"
  }, {
    "left" : "if (isNaN || Double.isNaN(addend))",
    "right" : "if (isNaN || Double.isNaN(addend))",
    "info" : "IfStatement[6521-6591]:IfStatement[6521-6591]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6556-6591]:Block[6556-6591]"
  }, {
    "left" : "return NaN;",
    "right" : "return NaN;",
    "info" : "ReturnStatement[6570-6581]:ReturnStatement[6570-6581]"
  }, {
    "left" : "return createComplex(real + addend, imaginary);",
    "right" : "return createComplex(real + addend, imaginary);",
    "info" : "ReturnStatement[6601-6648]:ReturnStatement[6601-6648]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7259-7265]:Modifier[7259-7265]"
  }, {
    "left" : "Complex",
    "right" : "Complex",
    "info" : "SimpleType[7266-7273]:SimpleType[7266-7273]"
  }, {
    "left" : "conjugate",
    "right" : "conjugate",
    "info" : "SimpleName[7274-7283]:SimpleName[7274-7283]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7286-7397]:Block[7286-7397]"
  }, {
    "left" : "if (isNaN)",
    "right" : "if (isNaN)",
    "info" : "IfStatement[7296-7342]:IfStatement[7296-7342]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7307-7342]:Block[7307-7342]"
  }, {
    "left" : "return NaN;",
    "right" : "return NaN;",
    "info" : "ReturnStatement[7321-7332]:ReturnStatement[7321-7332]"
  }, {
    "left" : "return createComplex(real, -imaginary);",
    "right" : "return createComplex(real, -imaginary);",
    "info" : "ReturnStatement[7352-7391]:ReturnStatement[7352-7391]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9141-9147]:Modifier[9141-9147]"
  }, {
    "left" : "Complex",
    "right" : "Complex",
    "info" : "SimpleType[9148-9155]:SimpleType[9148-9155]"
  }, {
    "left" : "divide",
    "right" : "divide",
    "info" : "SimpleName[9156-9162]:SimpleName[9156-9162]"
  }, {
    "left" : "Complex divisor",
    "right" : "Complex divisor",
    "info" : "SingleVariableDeclaration[9163-9178]:SingleVariableDeclaration[9163-9178]"
  }, {
    "left" : "NullArgumentException",
    "right" : "NullArgumentException",
    "info" : "SimpleType[9195-9216]:SimpleType[9195-9216]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9217-10067]:Block[9217-10067]"
  }, {
    "left" : "MathUtils.checkNotNull(divisor);",
    "right" : "MathUtils.checkNotNull(divisor);",
    "info" : "ExpressionStatement[9227-9259]:ExpressionStatement[9227-9259]"
  }, {
    "left" : "if (isNaN || divisor.isNaN)",
    "right" : "if (isNaN || divisor.isNaN)",
    "info" : "IfStatement[9268-9331]:IfStatement[9268-9331]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9296-9331]:Block[9296-9331]"
  }, {
    "left" : "return NaN;",
    "right" : "return NaN;",
    "info" : "ReturnStatement[9310-9321]:ReturnStatement[9310-9321]"
  }, {
    "left" : "final double c = divisor.getReal();",
    "right" : "final double c = divisor.getReal();",
    "info" : "VariableDeclarationStatement[9341-9376]:VariableDeclarationStatement[9341-9376]"
  }, {
    "left" : "final double d = divisor.getImaginary();",
    "right" : "final double d = divisor.getImaginary();",
    "info" : "VariableDeclarationStatement[9385-9425]:VariableDeclarationStatement[9385-9425]"
  }, {
    "left" : "if (c == 0.0 && d == 0.0)",
    "right" : "if (c == 0.0 && d == 0.0)",
    "info" : "IfStatement[9434-9495]:IfStatement[9434-9495]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9460-9495]:Block[9460-9495]"
  }, {
    "left" : "return NaN;",
    "right" : "return NaN;",
    "info" : "ReturnStatement[9474-9485]:ReturnStatement[9474-9485]"
  }, {
    "left" : "if (divisor.isInfinite() && !isInfinite())",
    "right" : "if (divisor.isInfinite() && !isInfinite())",
    "info" : "IfStatement[9505-9584]:IfStatement[9505-9584]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9548-9584]:Block[9548-9584]"
  }, {
    "left" : "return ZERO;",
    "right" : "return ZERO;",
    "info" : "ReturnStatement[9562-9574]:ReturnStatement[9562-9574]"
  }, {
    "left" : "if (FastMath.abs(c) < FastMath.abs(d))",
    "right" : "if (FastMath.abs(c) < FastMath.abs(d))",
    "info" : "IfStatement[9594-10061]:IfStatement[9594-10061]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9633-9844]:Block[9633-9844]"
  }, {
    "left" : "double q = c / d;",
    "right" : "double q = c / d;",
    "info" : "VariableDeclarationStatement[9647-9664]:VariableDeclarationStatement[9647-9664]"
  }, {
    "left" : "double denominator = c * q + d;",
    "right" : "double denominator = c * q + d;",
    "info" : "VariableDeclarationStatement[9677-9708]:VariableDeclarationStatement[9677-9708]"
  }, {
    "left" : "return createComplex((real * q + imaginary) / denominator,\n                (imaginary * q - real) / denominator);",
    "right" : "return createComplex((real * q + imaginary) / denominator,\n                (imaginary * q - real) / denominator);",
    "info" : "ReturnStatement[9721-9834]:ReturnStatement[9721-9834]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9850-10061]:Block[9850-10061]"
  }, {
    "left" : "double q = d / c;",
    "right" : "double q = d / c;",
    "info" : "VariableDeclarationStatement[9864-9881]:VariableDeclarationStatement[9864-9881]"
  }, {
    "left" : "double denominator = d * q + c;",
    "right" : "double denominator = d * q + c;",
    "info" : "VariableDeclarationStatement[9894-9925]:VariableDeclarationStatement[9894-9925]"
  }, {
    "left" : "return createComplex((imaginary * q + real) / denominator,\n                (imaginary - real * q) / denominator);",
    "right" : "return createComplex((imaginary * q + real) / denominator,\n                (imaginary - real * q) / denominator);",
    "info" : "ReturnStatement[9938-10051]:ReturnStatement[9938-10051]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10373-10379]:Modifier[10373-10379]"
  }, {
    "left" : "Complex",
    "right" : "Complex",
    "info" : "SimpleType[10380-10387]:SimpleType[10380-10387]"
  }, {
    "left" : "divide",
    "right" : "divide",
    "info" : "SimpleName[10388-10394]:SimpleName[10388-10394]"
  }, {
    "left" : "double divisor",
    "right" : "double divisor",
    "info" : "SingleVariableDeclaration[10395-10409]:SingleVariableDeclaration[10395-10409]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10411-10757]:Block[10411-10757]"
  }, {
    "left" : "if (isNaN || Double.isNaN(divisor))",
    "right" : "if (isNaN || Double.isNaN(divisor))",
    "info" : "IfStatement[10421-10492]:IfStatement[10421-10492]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10457-10492]:Block[10457-10492]"
  }, {
    "left" : "return NaN;",
    "right" : "return NaN;",
    "info" : "ReturnStatement[10471-10482]:ReturnStatement[10471-10482]"
  }, {
    "left" : "if (divisor == 0d)",
    "right" : "if (divisor == 0d)",
    "info" : "IfStatement[10501-10555]:IfStatement[10501-10555]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10520-10555]:Block[10520-10555]"
  }, {
    "left" : "return NaN;",
    "right" : "return NaN;",
    "info" : "ReturnStatement[10534-10545]:ReturnStatement[10534-10545]"
  }, {
    "left" : "if (Double.isInfinite(divisor))",
    "right" : "if (Double.isInfinite(divisor))",
    "info" : "IfStatement[10564-10654]:IfStatement[10564-10654]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10596-10654]:Block[10596-10654]"
  }, {
    "left" : "return !isInfinite() ? ZERO : NaN;",
    "right" : "return !isInfinite() ? ZERO : NaN;",
    "info" : "ReturnStatement[10610-10644]:ReturnStatement[10610-10644]"
  }, {
    "left" : "return createComplex(real / divisor,\n                             imaginary  / divisor);",
    "right" : "return createComplex(real / divisor,\n                             imaginary  / divisor);",
    "info" : "ReturnStatement[10663-10751]:ReturnStatement[10663-10751]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10788-10794]:Modifier[10788-10794]"
  }, {
    "left" : "Complex",
    "right" : "Complex",
    "info" : "SimpleType[10795-10802]:SimpleType[10795-10802]"
  }, {
    "left" : "reciprocal",
    "right" : "reciprocal",
    "info" : "SimpleName[10803-10813]:SimpleName[10803-10813]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10816-11410]:Block[10816-11410]"
  }, {
    "left" : "if (isNaN)",
    "right" : "if (isNaN)",
    "info" : "IfStatement[10826-10872]:IfStatement[10826-10872]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10837-10872]:Block[10837-10872]"
  }, {
    "left" : "return NaN;",
    "right" : "return NaN;",
    "info" : "ReturnStatement[10851-10862]:ReturnStatement[10851-10862]"
  }, {
    "left" : "if (real == 0.0 && imaginary == 0.0)",
    "right" : "if (real == 0.0 && imaginary == 0.0)",
    "info" : "IfStatement[10882-10954]:IfStatement[10882-10954]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10919-10954]:Block[10919-10954]"
  }, {
    "left" : "return NaN;",
    "right" : "return NaN;",
    "info" : "ReturnStatement[10933-10944]:ReturnStatement[10933-10944]"
  }, {
    "left" : "if (isInfinite)",
    "right" : "if (isInfinite)",
    "info" : "IfStatement[10964-11016]:IfStatement[10964-11016]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10980-11016]:Block[10980-11016]"
  }, {
    "left" : "return ZERO;",
    "right" : "return ZERO;",
    "info" : "ReturnStatement[10994-11006]:ReturnStatement[10994-11006]"
  }, {
    "left" : "if (FastMath.abs(real) < FastMath.abs(imaginary))",
    "right" : "if (FastMath.abs(real) < FastMath.abs(imaginary))",
    "info" : "IfStatement[11026-11404]:IfStatement[11026-11404]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11076-11237]:Block[11076-11237]"
  }, {
    "left" : "double q = real / imaginary;",
    "right" : "double q = real / imaginary;",
    "info" : "VariableDeclarationStatement[11090-11118]:VariableDeclarationStatement[11090-11118]"
  }, {
    "left" : "double scale = 1. / (real * q + imaginary);",
    "right" : "double scale = 1. / (real * q + imaginary);",
    "info" : "VariableDeclarationStatement[11131-11174]:VariableDeclarationStatement[11131-11174]"
  }, {
    "left" : "return createComplex(scale * q, -scale);",
    "right" : "return createComplex(scale * q, -scale);",
    "info" : "ReturnStatement[11187-11227]:ReturnStatement[11187-11227]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11243-11404]:Block[11243-11404]"
  }, {
    "left" : "double q = imaginary / real;",
    "right" : "double q = imaginary / real;",
    "info" : "VariableDeclarationStatement[11257-11285]:VariableDeclarationStatement[11257-11285]"
  }, {
    "left" : "double scale = 1. / (imaginary * q + real);",
    "right" : "double scale = 1. / (imaginary * q + real);",
    "info" : "VariableDeclarationStatement[11298-11341]:VariableDeclarationStatement[11298-11341]"
  }, {
    "left" : "return createComplex(scale, -scale * q);",
    "right" : "return createComplex(scale, -scale * q);",
    "info" : "ReturnStatement[11354-11394]:ReturnStatement[11354-11394]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[12135-12144]:MarkerAnnotation[12135-12144]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12149-12155]:Modifier[12149-12155]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[12156-12163]:PrimitiveType[12156-12163]"
  }, {
    "left" : "equals",
    "right" : "equals",
    "info" : "SimpleName[12164-12170]:SimpleName[12164-12170]"
  }, {
    "left" : "Object other",
    "right" : "Object other",
    "info" : "SingleVariableDeclaration[12171-12183]:SingleVariableDeclaration[12171-12183]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12185-12530]:Block[12185-12530]"
  }, {
    "left" : "if (this == other)",
    "right" : "if (this == other)",
    "info" : "IfStatement[12195-12250]:IfStatement[12195-12250]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12214-12250]:Block[12214-12250]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[12228-12240]:ReturnStatement[12228-12240]"
  }, {
    "left" : "if (other instanceof Complex)",
    "right" : "if (other instanceof Complex)",
    "info" : "IfStatement[12259-12502]:IfStatement[12259-12502]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12288-12502]:Block[12288-12502]"
  }, {
    "left" : "Complex c = (Complex)other;",
    "right" : "Complex c = (Complex)other;",
    "info" : "VariableDeclarationStatement[12302-12329]:VariableDeclarationStatement[12302-12329]"
  }, {
    "left" : "if (c.isNaN)",
    "right" : "if (c.isNaN)",
    "info" : "IfStatement[12342-12492]:IfStatement[12342-12492]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12355-12400]:Block[12355-12400]"
  }, {
    "left" : "return isNaN;",
    "right" : "return isNaN;",
    "info" : "ReturnStatement[12373-12386]:ReturnStatement[12373-12386]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12406-12492]:Block[12406-12492]"
  }, {
    "left" : "return (real == c.real) && (imaginary == c.imaginary);",
    "right" : "return (real == c.real) && (imaginary == c.imaginary);",
    "info" : "ReturnStatement[12424-12478]:ReturnStatement[12424-12478]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[12511-12524]:ReturnStatement[12511-12524]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[12763-12772]:MarkerAnnotation[12763-12772]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12777-12783]:Modifier[12777-12783]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[12784-12787]:PrimitiveType[12784-12787]"
  }, {
    "left" : "hashCode",
    "right" : "hashCode",
    "info" : "SimpleName[12788-12796]:SimpleName[12788-12796]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12799-12948]:Block[12799-12948]"
  }, {
    "left" : "if (isNaN)",
    "right" : "if (isNaN)",
    "info" : "IfStatement[12809-12853]:IfStatement[12809-12853]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12820-12853]:Block[12820-12853]"
  }, {
    "left" : "return 7;",
    "right" : "return 7;",
    "info" : "ReturnStatement[12834-12843]:ReturnStatement[12834-12843]"
  }, {
    "left" : "return 37 * (17 * MathUtils.hash(imaginary) +\n            MathUtils.hash(real));",
    "right" : "return 37 * (17 * MathUtils.hash(imaginary) +\n            MathUtils.hash(real));",
    "info" : "ReturnStatement[12862-12942]:ReturnStatement[12862-12942]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13046-13052]:Modifier[13046-13052]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[13053-13059]:PrimitiveType[13053-13059]"
  }, {
    "left" : "getImaginary",
    "right" : "getImaginary",
    "info" : "SimpleName[13060-13072]:SimpleName[13060-13072]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13075-13108]:Block[13075-13108]"
  }, {
    "left" : "return imaginary;",
    "right" : "return imaginary;",
    "info" : "ReturnStatement[13085-13102]:ReturnStatement[13085-13102]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13196-13202]:Modifier[13196-13202]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[13203-13209]:PrimitiveType[13203-13209]"
  }, {
    "left" : "getReal",
    "right" : "getReal",
    "info" : "SimpleName[13210-13217]:SimpleName[13210-13217]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13220-13248]:Block[13220-13248]"
  }, {
    "left" : "return real;",
    "right" : "return real;",
    "info" : "ReturnStatement[13230-13242]:ReturnStatement[13230-13242]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13473-13479]:Modifier[13473-13479]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[13480-13487]:PrimitiveType[13480-13487]"
  }, {
    "left" : "isNaN",
    "right" : "isNaN",
    "info" : "SimpleName[13488-13493]:SimpleName[13488-13493]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13496-13525]:Block[13496-13525]"
  }, {
    "left" : "return isNaN;",
    "right" : "return isNaN;",
    "info" : "ReturnStatement[13506-13519]:ReturnStatement[13506-13519]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13906-13912]:Modifier[13906-13912]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[13913-13920]:PrimitiveType[13913-13920]"
  }, {
    "left" : "isInfinite",
    "right" : "isInfinite",
    "info" : "SimpleName[13921-13931]:SimpleName[13921-13931]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13934-13968]:Block[13934-13968]"
  }, {
    "left" : "return isInfinite;",
    "right" : "return isInfinite;",
    "info" : "ReturnStatement[13944-13962]:ReturnStatement[13944-13962]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14992-14998]:Modifier[14992-14998]"
  }, {
    "left" : "Complex",
    "right" : "Complex",
    "info" : "SimpleType[14999-15006]:SimpleType[14999-15006]"
  }, {
    "left" : "multiply",
    "right" : "multiply",
    "info" : "SimpleName[15007-15015]:SimpleName[15007-15015]"
  }, {
    "left" : "Complex factor",
    "right" : "Complex factor",
    "info" : "SingleVariableDeclaration[15016-15030]:SingleVariableDeclaration[15016-15030]"
  }, {
    "left" : "NullArgumentException",
    "right" : "NullArgumentException",
    "info" : "SimpleType[15047-15068]:SimpleType[15047-15068]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15069-15634]:Block[15069-15634]"
  }, {
    "left" : "MathUtils.checkNotNull(factor);",
    "right" : "MathUtils.checkNotNull(factor);",
    "info" : "ExpressionStatement[15079-15110]:ExpressionStatement[15079-15110]"
  }, {
    "left" : "if (isNaN || factor.isNaN)",
    "right" : "if (isNaN || factor.isNaN)",
    "info" : "IfStatement[15119-15181]:IfStatement[15119-15181]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15146-15181]:Block[15146-15181]"
  }, {
    "left" : "return NaN;",
    "right" : "return NaN;",
    "info" : "ReturnStatement[15160-15171]:ReturnStatement[15160-15171]"
  }, {
    "left" : "if (Double.isInfinite(real) ||\n            Double.isInfinite(imaginary) ||\n            Double.isInfinite(factor.real) ||\n            Double.isInfinite(factor.imaginary))",
    "right" : "if (Double.isInfinite(real) ||\n            Double.isInfinite(imaginary) ||\n            Double.isInfinite(factor.real) ||\n            Double.isInfinite(factor.imaginary))",
    "info" : "IfStatement[15190-15467]:IfStatement[15190-15467]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15360-15467]:Block[15360-15467]"
  }, {
    "left" : "return INF;",
    "right" : "return INF;",
    "info" : "ReturnStatement[15446-15457]:ReturnStatement[15446-15457]"
  }, {
    "left" : "return createComplex(real * factor.real - imaginary * factor.imaginary,\n                             real * factor.imaginary + imaginary * factor.real);",
    "right" : "return createComplex(real * factor.real - imaginary * factor.imaginary,\n                             real * factor.imaginary + imaginary * factor.real);",
    "info" : "ReturnStatement[15476-15628]:ReturnStatement[15476-15628]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15933-15939]:Modifier[15933-15939]"
  }, {
    "left" : "Complex",
    "right" : "Complex",
    "info" : "SimpleType[15940-15947]:SimpleType[15940-15947]"
  }, {
    "left" : "multiply",
    "right" : "multiply",
    "info" : "SimpleName[15948-15956]:SimpleName[15948-15956]"
  }, {
    "left" : "final int factor",
    "right" : "final int factor",
    "info" : "SingleVariableDeclaration[15957-15973]:SingleVariableDeclaration[15957-15973]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15975-16219]:Block[15975-16219]"
  }, {
    "left" : "if (isNaN)",
    "right" : "if (isNaN)",
    "info" : "IfStatement[15985-16031]:IfStatement[15985-16031]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15996-16031]:Block[15996-16031]"
  }, {
    "left" : "return NaN;",
    "right" : "return NaN;",
    "info" : "ReturnStatement[16010-16021]:ReturnStatement[16010-16021]"
  }, {
    "left" : "if (Double.isInfinite(real) ||\n            Double.isInfinite(imaginary))",
    "right" : "if (Double.isInfinite(real) ||\n            Double.isInfinite(imaginary))",
    "info" : "IfStatement[16040-16148]:IfStatement[16040-16148]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16113-16148]:Block[16113-16148]"
  }, {
    "left" : "return INF;",
    "right" : "return INF;",
    "info" : "ReturnStatement[16127-16138]:ReturnStatement[16127-16138]"
  }, {
    "left" : "return createComplex(real * factor, imaginary * factor);",
    "right" : "return createComplex(real * factor, imaginary * factor);",
    "info" : "ReturnStatement[16157-16213]:ReturnStatement[16157-16213]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16515-16521]:Modifier[16515-16521]"
  }, {
    "left" : "Complex",
    "right" : "Complex",
    "info" : "SimpleType[16522-16529]:SimpleType[16522-16529]"
  }, {
    "left" : "multiply",
    "right" : "multiply",
    "info" : "SimpleName[16530-16538]:SimpleName[16530-16538]"
  }, {
    "left" : "double factor",
    "right" : "double factor",
    "info" : "SingleVariableDeclaration[16539-16552]:SingleVariableDeclaration[16539-16552]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16554-16935]:Block[16554-16935]"
  }, {
    "left" : "if (isNaN || Double.isNaN(factor))",
    "right" : "if (isNaN || Double.isNaN(factor))",
    "info" : "IfStatement[16564-16634]:IfStatement[16564-16634]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16599-16634]:Block[16599-16634]"
  }, {
    "left" : "return NaN;",
    "right" : "return NaN;",
    "info" : "ReturnStatement[16613-16624]:ReturnStatement[16613-16624]"
  }, {
    "left" : "if (Double.isInfinite(real) ||\n            Double.isInfinite(imaginary) ||\n            Double.isInfinite(factor))",
    "right" : "if (Double.isInfinite(real) ||\n            Double.isInfinite(imaginary) ||\n            Double.isInfinite(factor))",
    "info" : "IfStatement[16643-16864]:IfStatement[16643-16864]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16757-16864]:Block[16757-16864]"
  }, {
    "left" : "return INF;",
    "right" : "return INF;",
    "info" : "ReturnStatement[16843-16854]:ReturnStatement[16843-16854]"
  }, {
    "left" : "return createComplex(real * factor, imaginary * factor);",
    "right" : "return createComplex(real * factor, imaginary * factor);",
    "info" : "ReturnStatement[16873-16929]:ReturnStatement[16873-16929]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17176-17182]:Modifier[17176-17182]"
  }, {
    "left" : "Complex",
    "right" : "Complex",
    "info" : "SimpleType[17183-17190]:SimpleType[17183-17190]"
  }, {
    "left" : "negate",
    "right" : "negate",
    "info" : "SimpleName[17191-17197]:SimpleName[17191-17197]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17200-17312]:Block[17200-17312]"
  }, {
    "left" : "if (isNaN)",
    "right" : "if (isNaN)",
    "info" : "IfStatement[17210-17256]:IfStatement[17210-17256]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17221-17256]:Block[17221-17256]"
  }, {
    "left" : "return NaN;",
    "right" : "return NaN;",
    "info" : "ReturnStatement[17235-17246]:ReturnStatement[17235-17246]"
  }, {
    "left" : "return createComplex(-real, -imaginary);",
    "right" : "return createComplex(-real, -imaginary);",
    "info" : "ReturnStatement[17266-17306]:ReturnStatement[17266-17306]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18046-18052]:Modifier[18046-18052]"
  }, {
    "left" : "Complex",
    "right" : "Complex",
    "info" : "SimpleType[18053-18060]:SimpleType[18053-18060]"
  }, {
    "left" : "subtract",
    "right" : "subtract",
    "info" : "SimpleName[18061-18069]:SimpleName[18061-18069]"
  }, {
    "left" : "Complex subtrahend",
    "right" : "Complex subtrahend",
    "info" : "SingleVariableDeclaration[18070-18088]:SingleVariableDeclaration[18070-18088]"
  }, {
    "left" : "NullArgumentException",
    "right" : "NullArgumentException",
    "info" : "SimpleType[18105-18126]:SimpleType[18105-18126]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18127-18381]:Block[18127-18381]"
  }, {
    "left" : "MathUtils.checkNotNull(subtrahend);",
    "right" : "MathUtils.checkNotNull(subtrahend);",
    "info" : "ExpressionStatement[18137-18172]:ExpressionStatement[18137-18172]"
  }, {
    "left" : "if (isNaN || subtrahend.isNaN)",
    "right" : "if (isNaN || subtrahend.isNaN)",
    "info" : "IfStatement[18181-18247]:IfStatement[18181-18247]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18212-18247]:Block[18212-18247]"
  }, {
    "left" : "return NaN;",
    "right" : "return NaN;",
    "info" : "ReturnStatement[18226-18237]:ReturnStatement[18226-18237]"
  }, {
    "left" : "return createComplex(real - subtrahend.getReal(),\n                             imaginary - subtrahend.getImaginary());",
    "right" : "return createComplex(real - subtrahend.getReal(),\n                             imaginary - subtrahend.getImaginary());",
    "info" : "ReturnStatement[18257-18375]:ReturnStatement[18257-18375]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18643-18649]:Modifier[18643-18649]"
  }, {
    "left" : "Complex",
    "right" : "Complex",
    "info" : "SimpleType[18650-18657]:SimpleType[18650-18657]"
  }, {
    "left" : "subtract",
    "right" : "subtract",
    "info" : "SimpleName[18658-18666]:SimpleName[18658-18666]"
  }, {
    "left" : "double subtrahend",
    "right" : "double subtrahend",
    "info" : "SingleVariableDeclaration[18667-18684]:SingleVariableDeclaration[18667-18684]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18686-18836]:Block[18686-18836]"
  }, {
    "left" : "if (isNaN || Double.isNaN(subtrahend))",
    "right" : "if (isNaN || Double.isNaN(subtrahend))",
    "info" : "IfStatement[18696-18770]:IfStatement[18696-18770]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18735-18770]:Block[18735-18770]"
  }, {
    "left" : "return NaN;",
    "right" : "return NaN;",
    "info" : "ReturnStatement[18749-18760]:ReturnStatement[18749-18760]"
  }, {
    "left" : "return createComplex(real - subtrahend, imaginary);",
    "right" : "return createComplex(real - subtrahend, imaginary);",
    "info" : "ReturnStatement[18779-18830]:ReturnStatement[18779-18830]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[19365-19371]:Modifier[19365-19371]"
  }, {
    "left" : "Complex",
    "right" : "Complex",
    "info" : "SimpleType[19372-19379]:SimpleType[19372-19379]"
  }, {
    "left" : "acos",
    "right" : "acos",
    "info" : "SimpleName[19380-19384]:SimpleName[19380-19384]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19387-19542]:Block[19387-19542]"
  }, {
    "left" : "if (isNaN)",
    "right" : "if (isNaN)",
    "info" : "IfStatement[19397-19443]:IfStatement[19397-19443]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19408-19443]:Block[19408-19443]"
  }, {
    "left" : "return NaN;",
    "right" : "return NaN;",
    "info" : "ReturnStatement[19422-19433]:ReturnStatement[19422-19433]"
  }, {
    "left" : "return this.add(this.sqrt1z().multiply(I)).log()\n            .multiply(I.negate());",
    "right" : "return this.add(this.sqrt1z().multiply(I)).log()\n            .multiply(I.negate());",
    "info" : "ReturnStatement[19453-19536]:ReturnStatement[19453-19536]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[20062-20068]:Modifier[20062-20068]"
  }, {
    "left" : "Complex",
    "right" : "Complex",
    "info" : "SimpleType[20069-20076]:SimpleType[20069-20076]"
  }, {
    "left" : "asin",
    "right" : "asin",
    "info" : "SimpleName[20077-20081]:SimpleName[20077-20081]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20084-20234]:Block[20084-20234]"
  }, {
    "left" : "if (isNaN)",
    "right" : "if (isNaN)",
    "info" : "IfStatement[20094-20140]:IfStatement[20094-20140]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20105-20140]:Block[20105-20140]"
  }, {
    "left" : "return NaN;",
    "right" : "return NaN;",
    "info" : "ReturnStatement[20119-20130]:ReturnStatement[20119-20130]"
  }, {
    "left" : "return sqrt1z().add(this.multiply(I)).log()\n            .multiply(I.negate());",
    "right" : "return sqrt1z().add(this.multiply(I)).log()\n            .multiply(I.negate());",
    "info" : "ReturnStatement[20150-20228]:ReturnStatement[20150-20228]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[20750-20756]:Modifier[20750-20756]"
  }, {
    "left" : "Complex",
    "right" : "Complex",
    "info" : "SimpleType[20757-20764]:SimpleType[20757-20764]"
  }, {
    "left" : "atan",
    "right" : "atan",
    "info" : "SimpleName[20765-20769]:SimpleName[20765-20769]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20772-20951]:Block[20772-20951]"
  }, {
    "left" : "if (isNaN)",
    "right" : "if (isNaN)",
    "info" : "IfStatement[20782-20828]:IfStatement[20782-20828]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20793-20828]:Block[20793-20828]"
  }, {
    "left" : "return NaN;",
    "right" : "return NaN;",
    "info" : "ReturnStatement[20807-20818]:ReturnStatement[20807-20818]"
  }, {
    "left" : "return this.add(I).divide(I.subtract(this)).log()\n            .multiply(I.divide(createComplex(2.0, 0.0)));",
    "right" : "return this.add(I).divide(I.subtract(this)).log()\n            .multiply(I.divide(createComplex(2.0, 0.0)));",
    "info" : "ReturnStatement[20838-20945]:ReturnStatement[20838-20945]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[22041-22047]:Modifier[22041-22047]"
  }, {
    "left" : "Complex",
    "right" : "Complex",
    "info" : "SimpleType[22048-22055]:SimpleType[22048-22055]"
  }, {
    "left" : "cos",
    "right" : "cos",
    "info" : "SimpleName[22056-22059]:SimpleName[22056-22059]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22062-22279]:Block[22062-22279]"
  }, {
    "left" : "if (isNaN)",
    "right" : "if (isNaN)",
    "info" : "IfStatement[22072-22118]:IfStatement[22072-22118]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22083-22118]:Block[22083-22118]"
  }, {
    "left" : "return NaN;",
    "right" : "return NaN;",
    "info" : "ReturnStatement[22097-22108]:ReturnStatement[22097-22108]"
  }, {
    "left" : "return createComplex(FastMath.cos(real) * FastMath.cosh(imaginary),\n                             -FastMath.sin(real) * FastMath.sinh(imaginary));",
    "right" : "return createComplex(FastMath.cos(real) * FastMath.cosh(imaginary),\n                             -FastMath.sin(real) * FastMath.sinh(imaginary));",
    "info" : "ReturnStatement[22128-22273]:ReturnStatement[22128-22273]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[23406-23412]:Modifier[23406-23412]"
  }, {
    "left" : "Complex",
    "right" : "Complex",
    "info" : "SimpleType[23413-23420]:SimpleType[23413-23420]"
  }, {
    "left" : "cosh",
    "right" : "cosh",
    "info" : "SimpleName[23421-23425]:SimpleName[23421-23425]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23428-23644]:Block[23428-23644]"
  }, {
    "left" : "if (isNaN)",
    "right" : "if (isNaN)",
    "info" : "IfStatement[23438-23484]:IfStatement[23438-23484]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23449-23484]:Block[23449-23484]"
  }, {
    "left" : "return NaN;",
    "right" : "return NaN;",
    "info" : "ReturnStatement[23463-23474]:ReturnStatement[23463-23474]"
  }, {
    "left" : "return createComplex(FastMath.cosh(real) * FastMath.cos(imaginary),\n                             FastMath.sinh(real) * FastMath.sin(imaginary));",
    "right" : "return createComplex(FastMath.cosh(real) * FastMath.cos(imaginary),\n                             FastMath.sinh(real) * FastMath.sin(imaginary));",
    "info" : "ReturnStatement[23494-23638]:ReturnStatement[23494-23638]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24767-24773]:Modifier[24767-24773]"
  }, {
    "left" : "Complex",
    "right" : "Complex",
    "info" : "SimpleType[24774-24781]:SimpleType[24774-24781]"
  }, {
    "left" : "exp",
    "right" : "exp",
    "info" : "SimpleName[24782-24785]:SimpleName[24782-24785]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24788-25026]:Block[24788-25026]"
  }, {
    "left" : "if (isNaN)",
    "right" : "if (isNaN)",
    "info" : "IfStatement[24798-24844]:IfStatement[24798-24844]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24809-24844]:Block[24809-24844]"
  }, {
    "left" : "return NaN;",
    "right" : "return NaN;",
    "info" : "ReturnStatement[24823-24834]:ReturnStatement[24823-24834]"
  }, {
    "left" : "double expReal = FastMath.exp(real);",
    "right" : "double expReal = FastMath.exp(real);",
    "info" : "VariableDeclarationStatement[24854-24890]:VariableDeclarationStatement[24854-24890]"
  }, {
    "left" : "return createComplex(expReal *  FastMath.cos(imaginary),\n                             expReal * FastMath.sin(imaginary));",
    "right" : "return createComplex(expReal *  FastMath.cos(imaginary),\n                             expReal * FastMath.sin(imaginary));",
    "info" : "ReturnStatement[24899-25020]:ReturnStatement[24899-25020]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[26380-26386]:Modifier[26380-26386]"
  }, {
    "left" : "Complex",
    "right" : "Complex",
    "info" : "SimpleType[26387-26394]:SimpleType[26387-26394]"
  }, {
    "left" : "log",
    "right" : "log",
    "info" : "SimpleName[26395-26398]:SimpleName[26395-26398]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26401-26577]:Block[26401-26577]"
  }, {
    "left" : "if (isNaN)",
    "right" : "if (isNaN)",
    "info" : "IfStatement[26411-26457]:IfStatement[26411-26457]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26422-26457]:Block[26422-26457]"
  }, {
    "left" : "return NaN;",
    "right" : "return NaN;",
    "info" : "ReturnStatement[26436-26447]:ReturnStatement[26436-26447]"
  }, {
    "left" : "return createComplex(FastMath.log(abs()),\n                             FastMath.atan2(imaginary, real));",
    "right" : "return createComplex(FastMath.log(abs()),\n                             FastMath.atan2(imaginary, real));",
    "info" : "ReturnStatement[26467-26571]:ReturnStatement[26467-26571]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27314-27320]:Modifier[27314-27320]"
  }, {
    "left" : "Complex",
    "right" : "Complex",
    "info" : "SimpleType[27321-27328]:SimpleType[27321-27328]"
  }, {
    "left" : "pow",
    "right" : "pow",
    "info" : "SimpleName[27329-27332]:SimpleName[27329-27332]"
  }, {
    "left" : "Complex x",
    "right" : "Complex x",
    "info" : "SingleVariableDeclaration[27333-27342]:SingleVariableDeclaration[27333-27342]"
  }, {
    "left" : "NullArgumentException",
    "right" : "NullArgumentException",
    "info" : "SimpleType[27359-27380]:SimpleType[27359-27380]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27381-27468]:Block[27381-27468]"
  }, {
    "left" : "MathUtils.checkNotNull(x);",
    "right" : "MathUtils.checkNotNull(x);",
    "info" : "ExpressionStatement[27391-27417]:ExpressionStatement[27391-27417]"
  }, {
    "left" : "return this.log().multiply(x).exp();",
    "right" : "return this.log().multiply(x).exp();",
    "info" : "ReturnStatement[27426-27462]:ReturnStatement[27426-27462]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27724-27730]:Modifier[27724-27730]"
  }, {
    "left" : "Complex",
    "right" : "Complex",
    "info" : "SimpleType[27731-27738]:SimpleType[27731-27738]"
  }, {
    "left" : "pow",
    "right" : "pow",
    "info" : "SimpleName[27739-27742]:SimpleName[27739-27742]"
  }, {
    "left" : "double x",
    "right" : "double x",
    "info" : "SingleVariableDeclaration[27743-27751]:SingleVariableDeclaration[27743-27751]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27753-27805]:Block[27753-27805]"
  }, {
    "left" : "return this.log().multiply(x).exp();",
    "right" : "return this.log().multiply(x).exp();",
    "info" : "ReturnStatement[27763-27799]:ReturnStatement[27763-27799]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[28897-28903]:Modifier[28897-28903]"
  }, {
    "left" : "Complex",
    "right" : "Complex",
    "info" : "SimpleType[28904-28911]:SimpleType[28904-28911]"
  }, {
    "left" : "sin",
    "right" : "sin",
    "info" : "SimpleName[28912-28915]:SimpleName[28912-28915]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28918-29134]:Block[28918-29134]"
  }, {
    "left" : "if (isNaN)",
    "right" : "if (isNaN)",
    "info" : "IfStatement[28928-28974]:IfStatement[28928-28974]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28939-28974]:Block[28939-28974]"
  }, {
    "left" : "return NaN;",
    "right" : "return NaN;",
    "info" : "ReturnStatement[28953-28964]:ReturnStatement[28953-28964]"
  }, {
    "left" : "return createComplex(FastMath.sin(real) * FastMath.cosh(imaginary),\n                             FastMath.cos(real) * FastMath.sinh(imaginary));",
    "right" : "return createComplex(FastMath.sin(real) * FastMath.cosh(imaginary),\n                             FastMath.cos(real) * FastMath.sinh(imaginary));",
    "info" : "ReturnStatement[28984-29128]:ReturnStatement[28984-29128]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[30250-30256]:Modifier[30250-30256]"
  }, {
    "left" : "Complex",
    "right" : "Complex",
    "info" : "SimpleType[30257-30264]:SimpleType[30257-30264]"
  }, {
    "left" : "sinh",
    "right" : "sinh",
    "info" : "SimpleName[30265-30269]:SimpleName[30265-30269]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30272-30471]:Block[30272-30471]"
  }, {
    "left" : "if (isNaN)",
    "right" : "if (isNaN)",
    "info" : "IfStatement[30282-30328]:IfStatement[30282-30328]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30293-30328]:Block[30293-30328]"
  }, {
    "left" : "return NaN;",
    "right" : "return NaN;",
    "info" : "ReturnStatement[30307-30318]:ReturnStatement[30307-30318]"
  }, {
    "left" : "return createComplex(FastMath.sinh(real) * FastMath.cos(imaginary),\n            FastMath.cosh(real) * FastMath.sin(imaginary));",
    "right" : "return createComplex(FastMath.sinh(real) * FastMath.cos(imaginary),\n            FastMath.cosh(real) * FastMath.sin(imaginary));",
    "info" : "ReturnStatement[30338-30465]:ReturnStatement[30338-30465]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[31853-31859]:Modifier[31853-31859]"
  }, {
    "left" : "Complex",
    "right" : "Complex",
    "info" : "SimpleType[31860-31867]:SimpleType[31860-31867]"
  }, {
    "left" : "sqrt",
    "right" : "sqrt",
    "info" : "SimpleName[31868-31872]:SimpleName[31868-31872]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31875-32366]:Block[31875-32366]"
  }, {
    "left" : "if (isNaN)",
    "right" : "if (isNaN)",
    "info" : "IfStatement[31885-31931]:IfStatement[31885-31931]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31896-31931]:Block[31896-31931]"
  }, {
    "left" : "return NaN;",
    "right" : "return NaN;",
    "info" : "ReturnStatement[31910-31921]:ReturnStatement[31910-31921]"
  }, {
    "left" : "if (real == 0.0 && imaginary == 0.0)",
    "right" : "if (real == 0.0 && imaginary == 0.0)",
    "info" : "IfStatement[31941-32033]:IfStatement[31941-32033]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31978-32033]:Block[31978-32033]"
  }, {
    "left" : "return createComplex(0.0, 0.0);",
    "right" : "return createComplex(0.0, 0.0);",
    "info" : "ReturnStatement[31992-32023]:ReturnStatement[31992-32023]"
  }, {
    "left" : "double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);",
    "right" : "double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);",
    "info" : "VariableDeclarationStatement[32043-32104]:VariableDeclarationStatement[32043-32104]"
  }, {
    "left" : "if (real >= 0.0)",
    "right" : "if (real >= 0.0)",
    "info" : "IfStatement[32113-32360]:IfStatement[32113-32360]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32130-32201]:Block[32130-32201]"
  }, {
    "left" : "return createComplex(t, imaginary / (2.0 * t));",
    "right" : "return createComplex(t, imaginary / (2.0 * t));",
    "info" : "ReturnStatement[32144-32191]:ReturnStatement[32144-32191]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32207-32360]:Block[32207-32360]"
  }, {
    "left" : "return createComplex(FastMath.abs(imaginary) / (2.0 * t),\n                                 FastMath.copySign(1d, imaginary) * t);",
    "right" : "return createComplex(FastMath.abs(imaginary) / (2.0 * t),\n                                 FastMath.copySign(1d, imaginary) * t);",
    "info" : "ReturnStatement[32221-32350]:ReturnStatement[32221-32350]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[33038-33044]:Modifier[33038-33044]"
  }, {
    "left" : "Complex",
    "right" : "Complex",
    "info" : "SimpleType[33045-33052]:SimpleType[33045-33052]"
  }, {
    "left" : "sqrt1z",
    "right" : "sqrt1z",
    "info" : "SimpleName[33053-33059]:SimpleName[33053-33059]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33062-33146]:Block[33062-33146]"
  }, {
    "left" : "return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();",
    "right" : "return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();",
    "info" : "ReturnStatement[33072-33140]:ReturnStatement[33072-33140]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[34310-34316]:Modifier[34310-34316]"
  }, {
    "left" : "Complex",
    "right" : "Complex",
    "info" : "SimpleType[34317-34324]:SimpleType[34317-34324]"
  }, {
    "left" : "tan",
    "right" : "tan",
    "info" : "SimpleName[34325-34328]:SimpleName[34325-34328]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34331-34658]:Block[34331-34859]"
  }, {
    "left" : "if (isNaN)",
    "right" : "if (isNaN || Double.isInfinite(real))",
    "info" : "IfStatement[34341-34387]:IfStatement[34341-34414]"
  }, {
    "left" : "isNaN",
    "right" : "isNaN",
    "info" : "SimpleName[34345-34350]:SimpleName[34345-34350]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34352-34387]:Block[34379-34414]"
  }, {
    "left" : "return NaN;",
    "right" : "return NaN;",
    "info" : "ReturnStatement[34366-34377]:ReturnStatement[34393-34404]"
  }, {
    "left" : "double real2 = 2.0 * real;",
    "right" : "double real2 = 2.0 * real;",
    "info" : "VariableDeclarationStatement[34397-34423]:VariableDeclarationStatement[34598-34624]"
  }, {
    "left" : "double imaginary2 = 2.0 * imaginary;",
    "right" : "double imaginary2 = 2.0 * imaginary;",
    "info" : "VariableDeclarationStatement[34432-34468]:VariableDeclarationStatement[34633-34669]"
  }, {
    "left" : "double d = FastMath.cos(real2) + FastMath.cosh(imaginary2);",
    "right" : "double d = FastMath.cos(real2) + FastMath.cosh(imaginary2);",
    "info" : "VariableDeclarationStatement[34477-34536]:VariableDeclarationStatement[34678-34737]"
  }, {
    "left" : "return createComplex(FastMath.sin(real2) / d,\n                             FastMath.sinh(imaginary2) / d);",
    "right" : "return createComplex(FastMath.sin(real2) / d,\n                             FastMath.sinh(imaginary2) / d);",
    "info" : "ReturnStatement[34546-34652]:ReturnStatement[34747-34853]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35832-35838]:Modifier[36033-36039]"
  }, {
    "left" : "Complex",
    "right" : "Complex",
    "info" : "SimpleType[35839-35846]:SimpleType[36040-36047]"
  }, {
    "left" : "tanh",
    "right" : "tanh",
    "info" : "SimpleName[35847-35851]:SimpleName[36048-36052]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35854-36180]:Block[36055-36577]"
  }, {
    "left" : "if (isNaN)",
    "right" : "if (isNaN || Double.isInfinite(imaginary))",
    "info" : "IfStatement[35864-35910]:IfStatement[36065-36143]"
  }, {
    "left" : "isNaN",
    "right" : "isNaN",
    "info" : "SimpleName[35868-35873]:SimpleName[36069-36074]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35875-35910]:Block[36108-36143]"
  }, {
    "left" : "return NaN;",
    "right" : "return NaN;",
    "info" : "ReturnStatement[35889-35900]:ReturnStatement[36122-36133]"
  }, {
    "left" : "double real2 = 2.0 * real;",
    "right" : "double real2 = 2.0 * real;",
    "info" : "VariableDeclarationStatement[35919-35945]:VariableDeclarationStatement[36316-36342]"
  }, {
    "left" : "double imaginary2 = 2.0 * imaginary;",
    "right" : "double imaginary2 = 2.0 * imaginary;",
    "info" : "VariableDeclarationStatement[35954-35990]:VariableDeclarationStatement[36351-36387]"
  }, {
    "left" : "double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);",
    "right" : "double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);",
    "info" : "VariableDeclarationStatement[35999-36058]:VariableDeclarationStatement[36396-36455]"
  }, {
    "left" : "return createComplex(FastMath.sinh(real2) / d,\n                             FastMath.sin(imaginary2) / d);",
    "right" : "return createComplex(FastMath.sinh(real2) / d,\n                             FastMath.sin(imaginary2) / d);",
    "info" : "ReturnStatement[36068-36174]:ReturnStatement[36465-36571]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[37014-37020]:Modifier[37411-37417]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[37021-37027]:PrimitiveType[37418-37424]"
  }, {
    "left" : "getArgument",
    "right" : "getArgument",
    "info" : "SimpleName[37028-37039]:SimpleName[37425-37436]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37042-37107]:Block[37439-37504]"
  }, {
    "left" : "return FastMath.atan2(getImaginary(), getReal());",
    "right" : "return FastMath.atan2(getImaginary(), getReal());",
    "info" : "ReturnStatement[37052-37101]:ReturnStatement[37449-37498]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[38029-38035]:Modifier[38426-38432]"
  }, {
    "left" : "List<Complex>",
    "right" : "List<Complex>",
    "info" : "ParameterizedType[38036-38049]:ParameterizedType[38433-38446]"
  }, {
    "left" : "nthRoot",
    "right" : "nthRoot",
    "info" : "SimpleName[38050-38057]:SimpleName[38447-38454]"
  }, {
    "left" : "int n",
    "right" : "int n",
    "info" : "SingleVariableDeclaration[38058-38063]:SingleVariableDeclaration[38455-38460]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38065-39199]:Block[38462-39596]"
  }, {
    "left" : "if (n <= 0)",
    "right" : "if (n <= 0)",
    "info" : "IfStatement[38076-38246]:IfStatement[38473-38643]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38088-38246]:Block[38485-38643]"
  }, {
    "left" : "throw new NotPositiveException(LocalizedFormats.CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N,\n                                           n);",
    "right" : "throw new NotPositiveException(LocalizedFormats.CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N,\n                                           n);",
    "info" : "ThrowStatement[38102-38236]:ThrowStatement[38499-38633]"
  }, {
    "left" : "final List<Complex> result = new ArrayList<Complex>();",
    "right" : "final List<Complex> result = new ArrayList<Complex>();",
    "info" : "VariableDeclarationStatement[38256-38310]:VariableDeclarationStatement[38653-38707]"
  }, {
    "left" : "if (isNaN)",
    "right" : "if (isNaN)",
    "info" : "IfStatement[38320-38398]:IfStatement[38717-38795]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38331-38398]:Block[38728-38795]"
  }, {
    "left" : "result.add(NaN);",
    "right" : "result.add(NaN);",
    "info" : "ExpressionStatement[38345-38361]:ExpressionStatement[38742-38758]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[38374-38388]:ReturnStatement[38771-38785]"
  }, {
    "left" : "if (isInfinite())",
    "right" : "if (isInfinite())",
    "info" : "IfStatement[38407-38492]:IfStatement[38804-38889]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38425-38492]:Block[38822-38889]"
  }, {
    "left" : "result.add(INF);",
    "right" : "result.add(INF);",
    "info" : "ExpressionStatement[38439-38455]:ExpressionStatement[38836-38852]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[38468-38482]:ReturnStatement[38865-38879]"
  }, {
    "left" : "final double nthRootOfAbs = FastMath.pow(abs(), 1.0 / n);",
    "right" : "final double nthRootOfAbs = FastMath.pow(abs(), 1.0 / n);",
    "info" : "VariableDeclarationStatement[38577-38634]:VariableDeclarationStatement[38974-39031]"
  }, {
    "left" : "final double nthPhi = getArgument() / n;",
    "right" : "final double nthPhi = getArgument() / n;",
    "info" : "VariableDeclarationStatement[38714-38754]:VariableDeclarationStatement[39111-39151]"
  }, {
    "left" : "final double slice = 2 * FastMath.PI / n;",
    "right" : "final double slice = 2 * FastMath.PI / n;",
    "info" : "VariableDeclarationStatement[38763-38804]:VariableDeclarationStatement[39160-39201]"
  }, {
    "left" : "double innerPart = nthPhi;",
    "right" : "double innerPart = nthPhi;",
    "info" : "VariableDeclarationStatement[38813-38839]:VariableDeclarationStatement[39210-39236]"
  }, {
    "left" : "for (int k = 0; k < n ; k++)",
    "right" : "for (int k = 0; k < n ; k++)",
    "info" : "ForStatement[38848-39169]:ForStatement[39245-39566]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38877-39169]:Block[39274-39566]"
  }, {
    "left" : "final double realPart = nthRootOfAbs *  FastMath.cos(innerPart);",
    "right" : "final double realPart = nthRootOfAbs *  FastMath.cos(innerPart);",
    "info" : "VariableDeclarationStatement[38917-38981]:VariableDeclarationStatement[39314-39378]"
  }, {
    "left" : "final double imaginaryPart = nthRootOfAbs *  FastMath.sin(innerPart);",
    "right" : "final double imaginaryPart = nthRootOfAbs *  FastMath.sin(innerPart);",
    "info" : "VariableDeclarationStatement[38994-39063]:VariableDeclarationStatement[39391-39460]"
  }, {
    "left" : "result.add(createComplex(realPart, imaginaryPart));",
    "right" : "result.add(createComplex(realPart, imaginaryPart));",
    "info" : "ExpressionStatement[39076-39127]:ExpressionStatement[39473-39524]"
  }, {
    "left" : "innerPart += slice;",
    "right" : "innerPart += slice;",
    "info" : "ExpressionStatement[39140-39159]:ExpressionStatement[39537-39556]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[39179-39193]:ReturnStatement[39576-39590]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[39474-39483]:Modifier[39871-39880]"
  }, {
    "left" : "Complex",
    "right" : "Complex",
    "info" : "SimpleType[39484-39491]:SimpleType[39881-39888]"
  }, {
    "left" : "createComplex",
    "right" : "createComplex",
    "info" : "SimpleName[39492-39505]:SimpleName[39889-39902]"
  }, {
    "left" : "double realPart",
    "right" : "double realPart",
    "info" : "SingleVariableDeclaration[39506-39521]:SingleVariableDeclaration[39903-39918]"
  }, {
    "left" : "double imaginaryPart",
    "right" : "double imaginaryPart",
    "info" : "SingleVariableDeclaration[39559-39579]:SingleVariableDeclaration[39956-39976]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39581-39641]:Block[39978-40038]"
  }, {
    "left" : "return new Complex(realPart, imaginaryPart);",
    "right" : "return new Complex(realPart, imaginaryPart);",
    "info" : "ReturnStatement[39591-39635]:ReturnStatement[39988-40032]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[39850-39856]:Modifier[40247-40253]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[39857-39863]:Modifier[40254-40260]"
  }, {
    "left" : "Complex",
    "right" : "Complex",
    "info" : "SimpleType[39864-39871]:SimpleType[40261-40268]"
  }, {
    "left" : "valueOf",
    "right" : "valueOf",
    "info" : "SimpleName[39872-39879]:SimpleName[40269-40276]"
  }, {
    "left" : "double realPart",
    "right" : "double realPart",
    "info" : "SingleVariableDeclaration[39880-39895]:SingleVariableDeclaration[40277-40292]"
  }, {
    "left" : "double imaginaryPart",
    "right" : "double imaginaryPart",
    "info" : "SingleVariableDeclaration[39931-39951]:SingleVariableDeclaration[40328-40348]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39953-40128]:Block[40350-40525]"
  }, {
    "left" : "if (Double.isNaN(realPart) ||\n            Double.isNaN(imaginaryPart))",
    "right" : "if (Double.isNaN(realPart) ||\n            Double.isNaN(imaginaryPart))",
    "info" : "IfStatement[39963-40069]:IfStatement[40360-40466]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40034-40069]:Block[40431-40466]"
  }, {
    "left" : "return NaN;",
    "right" : "return NaN;",
    "info" : "ReturnStatement[40048-40059]:ReturnStatement[40445-40456]"
  }, {
    "left" : "return new Complex(realPart, imaginaryPart);",
    "right" : "return new Complex(realPart, imaginaryPart);",
    "info" : "ReturnStatement[40078-40122]:ReturnStatement[40475-40519]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[40283-40289]:Modifier[40680-40686]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[40290-40296]:Modifier[40687-40693]"
  }, {
    "left" : "Complex",
    "right" : "Complex",
    "info" : "SimpleType[40297-40304]:SimpleType[40694-40701]"
  }, {
    "left" : "valueOf",
    "right" : "valueOf",
    "info" : "SimpleName[40305-40312]:SimpleName[40702-40709]"
  }, {
    "left" : "double realPart",
    "right" : "double realPart",
    "info" : "SingleVariableDeclaration[40313-40328]:SingleVariableDeclaration[40710-40725]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40330-40447]:Block[40727-40844]"
  }, {
    "left" : "if (Double.isNaN(realPart))",
    "right" : "if (Double.isNaN(realPart))",
    "info" : "IfStatement[40340-40403]:IfStatement[40737-40800]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40368-40403]:Block[40765-40800]"
  }, {
    "left" : "return NaN;",
    "right" : "return NaN;",
    "info" : "ReturnStatement[40382-40393]:ReturnStatement[40779-40790]"
  }, {
    "left" : "return new Complex(realPart);",
    "right" : "return new Complex(realPart);",
    "info" : "ReturnStatement[40412-40441]:ReturnStatement[40809-40838]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[40719-40728]:Modifier[41116-41125]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[40729-40734]:Modifier[41126-41131]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[40735-40741]:SimpleType[41132-41138]"
  }, {
    "left" : "readResolve",
    "right" : "readResolve",
    "info" : "SimpleName[40742-40753]:SimpleName[41139-41150]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40756-40810]:Block[41153-41207]"
  }, {
    "left" : "return createComplex(real, imaginary);",
    "right" : "return createComplex(real, imaginary);",
    "info" : "ReturnStatement[40766-40804]:ReturnStatement[41163-41201]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[40841-40847]:Modifier[41238-41244]"
  }, {
    "left" : "ComplexField",
    "right" : "ComplexField",
    "info" : "SimpleType[40848-40860]:SimpleType[41245-41257]"
  }, {
    "left" : "getField",
    "right" : "getField",
    "info" : "SimpleName[40861-40869]:SimpleName[41258-41266]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40872-40922]:Block[41269-41319]"
  }, {
    "left" : "return ComplexField.getInstance();",
    "right" : "return ComplexField.getInstance();",
    "info" : "ReturnStatement[40882-40916]:ReturnStatement[41279-41313]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[40953-40962]:MarkerAnnotation[41350-41359]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[40967-40973]:Modifier[41364-41370]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[40974-40980]:SimpleType[41371-41377]"
  }, {
    "left" : "toString",
    "right" : "toString",
    "info" : "SimpleName[40981-40989]:SimpleName[41378-41386]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40992-41051]:Block[41389-41448]"
  }, {
    "left" : "return \"(\" + real + \", \" + imaginary + \")\";",
    "right" : "return \"(\" + real + \", \" + imaginary + \")\";",
    "info" : "ReturnStatement[41002-41045]:ReturnStatement[41399-41442]"
  } ]
}