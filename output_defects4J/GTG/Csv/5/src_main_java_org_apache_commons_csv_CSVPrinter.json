{
  "matchedElements" : [
 {
    "left" : "class : CSVPrinter",
    "right" : "class : CSVPrinter",
    "info" : "TypeDeclaration[1185-14349]:TypeDeclaration[1185-14398]"
  }, {
    "left" : "out",
    "right" : "out",
    "info" : "FieldDeclaration[1316-1395]:FieldDeclaration[1316-1395]"
  }, {
    "left" : "format",
    "right" : "format",
    "info" : "FieldDeclaration[1400-1431]:FieldDeclaration[1400-1431]"
  }, {
    "left" : "newRecord",
    "right" : "newRecord",
    "info" : "FieldDeclaration[1437-1517]:FieldDeclaration[1437-1517]"
  }, {
    "left" : "public CSVPrinter(out , format )",
    "right" : "public CSVPrinter(out , format )",
    "info" : "MethodDeclaration[1523-2388]:MethodDeclaration[1523-2388]"
  }, {
    "left" : "public close() : void",
    "right" : "public close() : void",
    "info" : "MethodDeclaration[2550-2685]:MethodDeclaration[2550-2685]"
  }, {
    "left" : "public flush() : void",
    "right" : "public flush() : void",
    "info" : "MethodDeclaration[2691-2956]:MethodDeclaration[2691-2956]"
  }, {
    "left" : "public print(value ) : void",
    "right" : "public print(value ) : void",
    "info" : "MethodDeclaration[2962-3646]:MethodDeclaration[2962-3646]"
  }, {
    "left" : "private print(object , value , offset int, len int) : void",
    "right" : "private print(object , value , offset int, len int) : void",
    "info" : "MethodDeclaration[3652-4227]:MethodDeclaration[3652-4227]"
  }, {
    "left" : "private printAndEscape(value , offset int, len int) : void",
    "right" : "private printAndEscape(value , offset int, len int) : void",
    "info" : "MethodDeclaration[4333-5391]:MethodDeclaration[4333-5391]"
  }, {
    "left" : "private printAndQuote(object , value , offset int, len int) : void",
    "right" : "private printAndQuote(object , value , offset int, len int) : void",
    "info" : "MethodDeclaration[5557-9577]:MethodDeclaration[5557-9577]"
  }, {
    "left" : "public printComment(comment ) : void",
    "right" : "public printComment(comment ) : void",
    "info" : "MethodDeclaration[9583-11025]:MethodDeclaration[9583-11025]"
  }, {
    "left" : "public println() : void",
    "right" : "public println() : void",
    "info" : "MethodDeclaration[11031-11343]:MethodDeclaration[11031-11392]"
  }, {
    "left" : "public printRecord(values ) : void",
    "right" : "public printRecord(values ) : void",
    "info" : "MethodDeclaration[11349-11823]:MethodDeclaration[11398-11872]"
  }, {
    "left" : "public printRecord() : void",
    "right" : "public printRecord() : void",
    "info" : "MethodDeclaration[11829-12301]:MethodDeclaration[11878-12350]"
  }, {
    "left" : "public printRecords(values ) : void",
    "right" : "public printRecords(values ) : void",
    "info" : "MethodDeclaration[12307-12925]:MethodDeclaration[12356-12974]"
  }, {
    "left" : "public printRecords(values ) : void",
    "right" : "public printRecords(values ) : void",
    "info" : "MethodDeclaration[12931-13541]:MethodDeclaration[12980-13590]"
  }, {
    "left" : "public printRecords(resultSet ) : void",
    "right" : "public printRecords(resultSet ) : void",
    "info" : "MethodDeclaration[13547-14183]:MethodDeclaration[13596-14232]"
  }, {
    "left" : "public getOut() : ",
    "right" : "public getOut() : ",
    "info" : "MethodDeclaration[14189-14347]:MethodDeclaration[14238-14396]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2144-2150]:Modifier[2144-2150]"
  }, {
    "left" : "CSVPrinter",
    "right" : "CSVPrinter",
    "info" : "SimpleName[2151-2161]:SimpleName[2151-2161]"
  }, {
    "left" : "final Appendable out",
    "right" : "final Appendable out",
    "info" : "SingleVariableDeclaration[2162-2182]:SingleVariableDeclaration[2162-2182]"
  }, {
    "left" : "final CSVFormat format",
    "right" : "final CSVFormat format",
    "info" : "SingleVariableDeclaration[2184-2206]:SingleVariableDeclaration[2184-2206]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2208-2388]:Block[2208-2388]"
  }, {
    "left" : "Assertions.notNull(out, \"out\");",
    "right" : "Assertions.notNull(out, \"out\");",
    "info" : "ExpressionStatement[2218-2249]:ExpressionStatement[2218-2249]"
  }, {
    "left" : "Assertions.notNull(format, \"format\");",
    "right" : "Assertions.notNull(format, \"format\");",
    "info" : "ExpressionStatement[2258-2295]:ExpressionStatement[2258-2295]"
  }, {
    "left" : "this.out = out;",
    "right" : "this.out = out;",
    "info" : "ExpressionStatement[2305-2320]:ExpressionStatement[2305-2320]"
  }, {
    "left" : "this.format = format;",
    "right" : "this.format = format;",
    "info" : "ExpressionStatement[2329-2350]:ExpressionStatement[2329-2350]"
  }, {
    "left" : "this.format.validate();",
    "right" : "this.format.validate();",
    "info" : "ExpressionStatement[2359-2382]:ExpressionStatement[2359-2382]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2550-2556]:Modifier[2550-2556]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2557-2561]:PrimitiveType[2557-2561]"
  }, {
    "left" : "close",
    "right" : "close",
    "info" : "SimpleName[2562-2567]:SimpleName[2562-2567]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[2577-2588]:SimpleType[2577-2588]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2589-2685]:Block[2589-2685]"
  }, {
    "left" : "if (out instanceof Closeable)",
    "right" : "if (out instanceof Closeable)",
    "info" : "IfStatement[2599-2679]:IfStatement[2599-2679]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2629-2679]:Block[2629-2679]"
  }, {
    "left" : "((Closeable) out).close();",
    "right" : "((Closeable) out).close();",
    "info" : "ExpressionStatement[2643-2669]:ExpressionStatement[2643-2669]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2821-2827]:Modifier[2821-2827]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2828-2832]:PrimitiveType[2828-2832]"
  }, {
    "left" : "flush",
    "right" : "flush",
    "info" : "SimpleName[2833-2838]:SimpleName[2833-2838]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[2848-2859]:SimpleType[2848-2859]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2860-2956]:Block[2860-2956]"
  }, {
    "left" : "if (out instanceof Flushable)",
    "right" : "if (out instanceof Flushable)",
    "info" : "IfStatement[2870-2950]:IfStatement[2870-2950]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2900-2950]:Block[2900-2950]"
  }, {
    "left" : "((Flushable) out).flush();",
    "right" : "((Flushable) out).flush();",
    "info" : "ExpressionStatement[2914-2940]:ExpressionStatement[2914-2940]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3221-3227]:Modifier[3221-3227]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3228-3232]:PrimitiveType[3228-3232]"
  }, {
    "left" : "print",
    "right" : "print",
    "info" : "SimpleName[3233-3238]:SimpleName[3233-3238]"
  }, {
    "left" : "final Object value",
    "right" : "final Object value",
    "info" : "SingleVariableDeclaration[3239-3257]:SingleVariableDeclaration[3239-3257]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[3266-3277]:SimpleType[3266-3277]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3278-3646]:Block[3278-3646]"
  }, {
    "left" : "String strValue;",
    "right" : "String strValue;",
    "info" : "VariableDeclarationStatement[3332-3348]:VariableDeclarationStatement[3332-3348]"
  }, {
    "left" : "if (value == null)",
    "right" : "if (value == null)",
    "info" : "IfStatement[3357-3581]:IfStatement[3357-3581]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3376-3523]:Block[3376-3523]"
  }, {
    "left" : "final String nullString = format.getNullString();",
    "right" : "final String nullString = format.getNullString();",
    "info" : "VariableDeclarationStatement[3390-3439]:VariableDeclarationStatement[3390-3439]"
  }, {
    "left" : "strValue = nullString == null ? Constants.EMPTY : nullString;",
    "right" : "strValue = nullString == null ? Constants.EMPTY : nullString;",
    "info" : "ExpressionStatement[3452-3513]:ExpressionStatement[3452-3513]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3529-3581]:Block[3529-3581]"
  }, {
    "left" : "strValue = value.toString();",
    "right" : "strValue = value.toString();",
    "info" : "ExpressionStatement[3543-3571]:ExpressionStatement[3543-3571]"
  }, {
    "left" : "this.print(value, strValue, 0, strValue.length());",
    "right" : "this.print(value, strValue, 0, strValue.length());",
    "info" : "ExpressionStatement[3590-3640]:ExpressionStatement[3590-3640]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[3652-3659]:Modifier[3652-3659]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3660-3664]:PrimitiveType[3660-3664]"
  }, {
    "left" : "print",
    "right" : "print",
    "info" : "SimpleName[3665-3670]:SimpleName[3665-3670]"
  }, {
    "left" : "final Object object",
    "right" : "final Object object",
    "info" : "SingleVariableDeclaration[3671-3690]:SingleVariableDeclaration[3671-3690]"
  }, {
    "left" : "final CharSequence value",
    "right" : "final CharSequence value",
    "info" : "SingleVariableDeclaration[3692-3716]:SingleVariableDeclaration[3692-3716]"
  }, {
    "left" : "final int offset",
    "right" : "final int offset",
    "info" : "SingleVariableDeclaration[3730-3746]:SingleVariableDeclaration[3730-3746]"
  }, {
    "left" : "final int len",
    "right" : "final int len",
    "info" : "SingleVariableDeclaration[3748-3761]:SingleVariableDeclaration[3748-3761]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[3770-3781]:SimpleType[3770-3781]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3782-4227]:Block[3782-4227]"
  }, {
    "left" : "if (!newRecord)",
    "right" : "if (!newRecord)",
    "info" : "IfStatement[3792-3866]:IfStatement[3792-3866]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3808-3866]:Block[3808-3866]"
  }, {
    "left" : "out.append(format.getDelimiter());",
    "right" : "out.append(format.getDelimiter());",
    "info" : "ExpressionStatement[3822-3856]:ExpressionStatement[3822-3856]"
  }, {
    "left" : "if (format.isQuoting())",
    "right" : "if (format.isQuoting())",
    "info" : "IfStatement[3875-4194]:IfStatement[3875-4194]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3899-4034]:Block[3899-4034]"
  }, {
    "left" : "printAndQuote(object, value, offset, len);",
    "right" : "printAndQuote(object, value, offset, len);",
    "info" : "ExpressionStatement[3982-4024]:ExpressionStatement[3982-4024]"
  }, {
    "left" : "if (format.isEscaping())",
    "right" : "if (format.isEscaping())",
    "info" : "IfStatement[4040-4194]:IfStatement[4040-4194]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4065-4124]:Block[4065-4124]"
  }, {
    "left" : "printAndEscape(value, offset, len);",
    "right" : "printAndEscape(value, offset, len);",
    "info" : "ExpressionStatement[4079-4114]:ExpressionStatement[4079-4114]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4130-4194]:Block[4130-4194]"
  }, {
    "left" : "out.append(value, offset, offset + len);",
    "right" : "out.append(value, offset, offset + len);",
    "info" : "ExpressionStatement[4144-4184]:ExpressionStatement[4144-4184]"
  }, {
    "left" : "newRecord = false;",
    "right" : "newRecord = false;",
    "info" : "ExpressionStatement[4203-4221]:ExpressionStatement[4203-4221]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[4333-4340]:Modifier[4333-4340]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4341-4345]:PrimitiveType[4341-4345]"
  }, {
    "left" : "printAndEscape",
    "right" : "printAndEscape",
    "info" : "SimpleName[4346-4360]:SimpleName[4346-4360]"
  }, {
    "left" : "final CharSequence value",
    "right" : "final CharSequence value",
    "info" : "SingleVariableDeclaration[4361-4385]:SingleVariableDeclaration[4361-4385]"
  }, {
    "left" : "final int offset",
    "right" : "final int offset",
    "info" : "SingleVariableDeclaration[4387-4403]:SingleVariableDeclaration[4387-4403]"
  }, {
    "left" : "final int len",
    "right" : "final int len",
    "info" : "SingleVariableDeclaration[4405-4418]:SingleVariableDeclaration[4405-4418]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[4427-4438]:SimpleType[4427-4438]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4439-5391]:Block[4439-5391]"
  }, {
    "left" : "int start = offset;",
    "right" : "int start = offset;",
    "info" : "VariableDeclarationStatement[4449-4468]:VariableDeclarationStatement[4449-4468]"
  }, {
    "left" : "int pos = offset;",
    "right" : "int pos = offset;",
    "info" : "VariableDeclarationStatement[4477-4494]:VariableDeclarationStatement[4477-4494]"
  }, {
    "left" : "final int end = offset + len;",
    "right" : "final int end = offset + len;",
    "info" : "VariableDeclarationStatement[4503-4532]:VariableDeclarationStatement[4503-4532]"
  }, {
    "left" : "final char delim = format.getDelimiter();",
    "right" : "final char delim = format.getDelimiter();",
    "info" : "VariableDeclarationStatement[4542-4583]:VariableDeclarationStatement[4542-4583]"
  }, {
    "left" : "final char escape = format.getEscape().charValue();",
    "right" : "final char escape = format.getEscape().charValue();",
    "info" : "VariableDeclarationStatement[4592-4643]:VariableDeclarationStatement[4592-4643]"
  }, {
    "left" : "while (pos < end)",
    "right" : "while (pos < end)",
    "info" : "WhileStatement[4653-5274]:WhileStatement[4653-5274]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4671-5274]:Block[4671-5274]"
  }, {
    "left" : "char c = value.charAt(pos);",
    "right" : "char c = value.charAt(pos);",
    "info" : "VariableDeclarationStatement[4685-4712]:VariableDeclarationStatement[4685-4712]"
  }, {
    "left" : "if (c == CR || c == LF || c == delim || c == escape)",
    "right" : "if (c == CR || c == LF || c == delim || c == escape)",
    "info" : "IfStatement[4725-5244]:IfStatement[4725-5244]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4778-5244]:Block[4778-5244]"
  }, {
    "left" : "if (pos > start)",
    "right" : "if (pos > start)",
    "info" : "IfStatement[4852-4939]:IfStatement[4852-4939]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4869-4939]:Block[4869-4939]"
  }, {
    "left" : "out.append(value, start, pos);",
    "right" : "out.append(value, start, pos);",
    "info" : "ExpressionStatement[4891-4921]:ExpressionStatement[4891-4921]"
  }, {
    "left" : "if (c == LF)",
    "right" : "if (c == LF)",
    "info" : "IfStatement[4956-5084]:IfStatement[4956-5084]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4969-5017]:Block[4969-5017]"
  }, {
    "left" : "c = 'n';",
    "right" : "c = 'n';",
    "info" : "ExpressionStatement[4991-4999]:ExpressionStatement[4991-4999]"
  }, {
    "left" : "if (c == CR)",
    "right" : "if (c == CR)",
    "info" : "IfStatement[5023-5084]:IfStatement[5023-5084]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5036-5084]:Block[5036-5084]"
  }, {
    "left" : "c = 'r';",
    "right" : "c = 'r';",
    "info" : "ExpressionStatement[5058-5066]:ExpressionStatement[5058-5066]"
  }, {
    "left" : "out.append(escape);",
    "right" : "out.append(escape);",
    "info" : "ExpressionStatement[5102-5121]:ExpressionStatement[5102-5121]"
  }, {
    "left" : "out.append(c);",
    "right" : "out.append(c);",
    "info" : "ExpressionStatement[5138-5152]:ExpressionStatement[5138-5152]"
  }, {
    "left" : "start = pos + 1;",
    "right" : "start = pos + 1;",
    "info" : "ExpressionStatement[5170-5186]:ExpressionStatement[5170-5186]"
  }, {
    "left" : "pos++;",
    "right" : "pos++;",
    "info" : "ExpressionStatement[5258-5264]:ExpressionStatement[5258-5264]"
  }, {
    "left" : "if (pos > start)",
    "right" : "if (pos > start)",
    "info" : "IfStatement[5314-5385]:IfStatement[5314-5385]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5331-5385]:Block[5331-5385]"
  }, {
    "left" : "out.append(value, start, pos);",
    "right" : "out.append(value, start, pos);",
    "info" : "ExpressionStatement[5345-5375]:ExpressionStatement[5345-5375]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[5557-5564]:Modifier[5557-5564]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[5565-5569]:PrimitiveType[5565-5569]"
  }, {
    "left" : "printAndQuote",
    "right" : "printAndQuote",
    "info" : "SimpleName[5570-5583]:SimpleName[5570-5583]"
  }, {
    "left" : "final Object object",
    "right" : "final Object object",
    "info" : "SingleVariableDeclaration[5584-5603]:SingleVariableDeclaration[5584-5603]"
  }, {
    "left" : "final CharSequence value",
    "right" : "final CharSequence value",
    "info" : "SingleVariableDeclaration[5605-5629]:SingleVariableDeclaration[5605-5629]"
  }, {
    "left" : "final int offset",
    "right" : "final int offset",
    "info" : "SingleVariableDeclaration[5643-5659]:SingleVariableDeclaration[5643-5659]"
  }, {
    "left" : "final int len",
    "right" : "final int len",
    "info" : "SingleVariableDeclaration[5661-5674]:SingleVariableDeclaration[5661-5674]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[5683-5694]:SimpleType[5683-5694]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5695-9577]:Block[5695-9577]"
  }, {
    "left" : "boolean quote = false;",
    "right" : "boolean quote = false;",
    "info" : "VariableDeclarationStatement[5705-5727]:VariableDeclarationStatement[5705-5727]"
  }, {
    "left" : "int start = offset;",
    "right" : "int start = offset;",
    "info" : "VariableDeclarationStatement[5736-5755]:VariableDeclarationStatement[5736-5755]"
  }, {
    "left" : "int pos = offset;",
    "right" : "int pos = offset;",
    "info" : "VariableDeclarationStatement[5764-5781]:VariableDeclarationStatement[5764-5781]"
  }, {
    "left" : "final int end = offset + len;",
    "right" : "final int end = offset + len;",
    "info" : "VariableDeclarationStatement[5790-5819]:VariableDeclarationStatement[5790-5819]"
  }, {
    "left" : "final char delimChar = format.getDelimiter();",
    "right" : "final char delimChar = format.getDelimiter();",
    "info" : "VariableDeclarationStatement[5829-5874]:VariableDeclarationStatement[5829-5874]"
  }, {
    "left" : "final char quoteChar = format.getQuoteChar().charValue();",
    "right" : "final char quoteChar = format.getQuoteChar().charValue();",
    "info" : "VariableDeclarationStatement[5883-5940]:VariableDeclarationStatement[5883-5940]"
  }, {
    "left" : "Quote quotePolicy = format.getQuotePolicy();",
    "right" : "Quote quotePolicy = format.getQuotePolicy();",
    "info" : "VariableDeclarationStatement[5950-5994]:VariableDeclarationStatement[5950-5994]"
  }, {
    "left" : "if (quotePolicy == null)",
    "right" : "if (quotePolicy == null)",
    "info" : "IfStatement[6003-6080]:IfStatement[6003-6080]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6028-6080]:Block[6028-6080]"
  }, {
    "left" : "quotePolicy = Quote.MINIMAL;",
    "right" : "quotePolicy = Quote.MINIMAL;",
    "info" : "ExpressionStatement[6042-6070]:ExpressionStatement[6042-6070]"
  }, {
    "left" : "switch (quotePolicy) {\n        case ALL:\n            quote = true;\n            break;\n        case NON_NUMERIC:\n            quote = !(object instanceof Number);\n            break;\n        case NONE:\n            // Use the existing escaping code\n            printAndEscape(value, offset, len);\n            return;\n        case MINIMAL:\n            if (len <= 0) {\n                // always quote an empty token that is the first\n                // on the line, as it may be the only thing on the\n                // line. If it were not quoted in that case,\n                // an empty line has no tokens.\n                if (newRecord) {\n                    quote = true;\n                }\n            } else {\n                char c = value.charAt(pos);\n\n                // Hmmm, where did this rule come from?\n                if (newRecord && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z'))) {\n                    quote = true;\n                    // } else if (c == ' ' || c == '\\f' || c == '\\t') {\n                } else if (c <= COMMENT) {\n                    // Some other chars at the start of a value caused the parser to fail, so for now\n                    // encapsulate if we start in anything less than '#'. We are being conservative\n                    // by including the default comment char too.\n                    quote = true;\n                } else {\n                    while (pos < end) {\n                        c = value.charAt(pos);\n                        if (c == LF || c == CR || c == quoteChar || c == delimChar) {\n                            quote = true;\n                            break;\n                        }\n                        pos++;\n                    }\n\n                    if (!quote) {\n                        pos = end - 1;\n                        c = value.charAt(pos);\n                        // if (c == ' ' || c == '\\f' || c == '\\t') {\n                        // Some other chars at the end caused the parser to fail, so for now\n                        // encapsulate if we end in anything less than ' '\n                        if (c <= SP) {\n                            quote = true;\n                        }\n                    }\n                }\n            }\n\n            if (!quote) {\n                // no encapsulation needed - write out the original value\n                out.append(value, start, end);\n                return;\n            }\n            break;\n        }",
    "right" : "switch (quotePolicy) {\n        case ALL:\n            quote = true;\n            break;\n        case NON_NUMERIC:\n            quote = !(object instanceof Number);\n            break;\n        case NONE:\n            // Use the existing escaping code\n            printAndEscape(value, offset, len);\n            return;\n        case MINIMAL:\n            if (len <= 0) {\n                // always quote an empty token that is the first\n                // on the line, as it may be the only thing on the\n                // line. If it were not quoted in that case,\n                // an empty line has no tokens.\n                if (newRecord) {\n                    quote = true;\n                }\n            } else {\n                char c = value.charAt(pos);\n\n                // Hmmm, where did this rule come from?\n                if (newRecord && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z'))) {\n                    quote = true;\n                    // } else if (c == ' ' || c == '\\f' || c == '\\t') {\n                } else if (c <= COMMENT) {\n                    // Some other chars at the start of a value caused the parser to fail, so for now\n                    // encapsulate if we start in anything less than '#'. We are being conservative\n                    // by including the default comment char too.\n                    quote = true;\n                } else {\n                    while (pos < end) {\n                        c = value.charAt(pos);\n                        if (c == LF || c == CR || c == quoteChar || c == delimChar) {\n                            quote = true;\n                            break;\n                        }\n                        pos++;\n                    }\n\n                    if (!quote) {\n                        pos = end - 1;\n                        c = value.charAt(pos);\n                        // if (c == ' ' || c == '\\f' || c == '\\t') {\n                        // Some other chars at the end caused the parser to fail, so for now\n                        // encapsulate if we end in anything less than ' '\n                        if (c <= SP) {\n                            quote = true;\n                        }\n                    }\n                }\n            }\n\n            if (!quote) {\n                // no encapsulation needed - write out the original value\n                out.append(value, start, end);\n                return;\n            }\n            break;\n        }",
    "info" : "SwitchStatement[6089-8545]:SwitchStatement[6089-8545]"
  }, {
    "left" : "case ALL:",
    "right" : "case ALL:",
    "info" : "SwitchCase[6120-6129]:SwitchCase[6120-6129]"
  }, {
    "left" : "quote = true;",
    "right" : "quote = true;",
    "info" : "ExpressionStatement[6142-6155]:ExpressionStatement[6142-6155]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[6168-6174]:BreakStatement[6168-6174]"
  }, {
    "left" : "case NON_NUMERIC:",
    "right" : "case NON_NUMERIC:",
    "info" : "SwitchCase[6183-6200]:SwitchCase[6183-6200]"
  }, {
    "left" : "quote = !(object instanceof Number);",
    "right" : "quote = !(object instanceof Number);",
    "info" : "ExpressionStatement[6213-6249]:ExpressionStatement[6213-6249]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[6262-6268]:BreakStatement[6262-6268]"
  }, {
    "left" : "case NONE:",
    "right" : "case NONE:",
    "info" : "SwitchCase[6277-6287]:SwitchCase[6277-6287]"
  }, {
    "left" : "printAndEscape(value, offset, len);",
    "right" : "printAndEscape(value, offset, len);",
    "info" : "ExpressionStatement[6346-6381]:ExpressionStatement[6346-6381]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[6394-6401]:ReturnStatement[6394-6401]"
  }, {
    "left" : "case MINIMAL:",
    "right" : "case MINIMAL:",
    "info" : "SwitchCase[6410-6423]:SwitchCase[6410-6423]"
  }, {
    "left" : "if (len <= 0)",
    "right" : "if (len <= 0)",
    "info" : "IfStatement[6436-8330]:IfStatement[6436-8330]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6450-6791]:Block[6450-6791]"
  }, {
    "left" : "if (newRecord)",
    "right" : "if (newRecord)",
    "info" : "IfStatement[6709-6777]:IfStatement[6709-6777]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6724-6777]:Block[6724-6777]"
  }, {
    "left" : "quote = true;",
    "right" : "quote = true;",
    "info" : "ExpressionStatement[6746-6759]:ExpressionStatement[6746-6759]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6797-8330]:Block[6797-8330]"
  }, {
    "left" : "char c = value.charAt(pos);",
    "right" : "char c = value.charAt(pos);",
    "info" : "VariableDeclarationStatement[6815-6842]:VariableDeclarationStatement[6815-6842]"
  }, {
    "left" : "if (newRecord && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z')))",
    "right" : "if (newRecord && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z')))",
    "info" : "IfStatement[6916-8316]:IfStatement[6916-8316]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7005-7130]:Block[7005-7130]"
  }, {
    "left" : "quote = true;",
    "right" : "quote = true;",
    "info" : "ExpressionStatement[7027-7040]:ExpressionStatement[7027-7040]"
  }, {
    "left" : "if (c <= COMMENT)",
    "right" : "if (c <= COMMENT)",
    "info" : "IfStatement[7136-8316]:IfStatement[7136-8316]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7154-7475]:Block[7154-7475]"
  }, {
    "left" : "quote = true;",
    "right" : "quote = true;",
    "info" : "ExpressionStatement[7444-7457]:ExpressionStatement[7444-7457]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7481-8316]:Block[7481-8316]"
  }, {
    "left" : "while (pos < end)",
    "right" : "while (pos < end)",
    "info" : "WhileStatement[7503-7811]:WhileStatement[7503-7811]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7521-7811]:Block[7521-7811]"
  }, {
    "left" : "c = value.charAt(pos);",
    "right" : "c = value.charAt(pos);",
    "info" : "ExpressionStatement[7547-7569]:ExpressionStatement[7547-7569]"
  }, {
    "left" : "if (c == LF || c == CR || c == quoteChar || c == delimChar)",
    "right" : "if (c == LF || c == CR || c == quoteChar || c == delimChar)",
    "info" : "IfStatement[7594-7758]:IfStatement[7594-7758]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7654-7758]:Block[7654-7758]"
  }, {
    "left" : "quote = true;",
    "right" : "quote = true;",
    "info" : "ExpressionStatement[7684-7697]:ExpressionStatement[7684-7697]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[7726-7732]:BreakStatement[7726-7732]"
  }, {
    "left" : "pos++;",
    "right" : "pos++;",
    "info" : "ExpressionStatement[7783-7789]:ExpressionStatement[7783-7789]"
  }, {
    "left" : "if (!quote)",
    "right" : "if (!quote)",
    "info" : "IfStatement[7833-8298]:IfStatement[7833-8298]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7845-8298]:Block[7845-8298]"
  }, {
    "left" : "pos = end - 1;",
    "right" : "pos = end - 1;",
    "info" : "ExpressionStatement[7871-7885]:ExpressionStatement[7871-7885]"
  }, {
    "left" : "c = value.charAt(pos);",
    "right" : "c = value.charAt(pos);",
    "info" : "ExpressionStatement[7910-7932]:ExpressionStatement[7910-7932]"
  }, {
    "left" : "if (c <= SP)",
    "right" : "if (c <= SP)",
    "info" : "IfStatement[8194-8276]:IfStatement[8194-8276]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8207-8276]:Block[8207-8276]"
  }, {
    "left" : "quote = true;",
    "right" : "quote = true;",
    "info" : "ExpressionStatement[8237-8250]:ExpressionStatement[8237-8250]"
  }, {
    "left" : "if (!quote)",
    "right" : "if (!quote)",
    "info" : "IfStatement[8344-8516]:IfStatement[8344-8516]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8356-8516]:Block[8356-8516]"
  }, {
    "left" : "out.append(value, start, end);",
    "right" : "out.append(value, start, end);",
    "info" : "ExpressionStatement[8448-8478]:ExpressionStatement[8448-8478]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[8495-8502]:ReturnStatement[8495-8502]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[8529-8535]:BreakStatement[8529-8535]"
  }, {
    "left" : "if (!quote)",
    "right" : "if (!quote)",
    "info" : "IfStatement[8555-8711]:IfStatement[8555-8711]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8567-8711]:Block[8567-8711]"
  }, {
    "left" : "out.append(value, start, end);",
    "right" : "out.append(value, start, end);",
    "info" : "ExpressionStatement[8651-8681]:ExpressionStatement[8651-8681]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[8694-8701]:ReturnStatement[8694-8701]"
  }, {
    "left" : "out.append(quoteChar);",
    "right" : "out.append(quoteChar);",
    "info" : "ExpressionStatement[8775-8797]:ExpressionStatement[8775-8797]"
  }, {
    "left" : "while (pos < end)",
    "right" : "while (pos < end)",
    "info" : "WhileStatement[8944-9466]:WhileStatement[8944-9466]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8962-9466]:Block[8962-9466]"
  }, {
    "left" : "final char c = value.charAt(pos);",
    "right" : "final char c = value.charAt(pos);",
    "info" : "VariableDeclarationStatement[8976-9009]:VariableDeclarationStatement[8976-9009]"
  }, {
    "left" : "if (c == quoteChar)",
    "right" : "if (c == quoteChar)",
    "info" : "IfStatement[9022-9437]:IfStatement[9022-9437]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9042-9437]:Block[9042-9437]"
  }, {
    "left" : "out.append(value, start, pos + 1);",
    "right" : "out.append(value, start, pos + 1);",
    "info" : "ExpressionStatement[9194-9228]:ExpressionStatement[9194-9228]"
  }, {
    "left" : "start = pos;",
    "right" : "start = pos;",
    "info" : "ExpressionStatement[9411-9423]:ExpressionStatement[9411-9423]"
  }, {
    "left" : "pos++;",
    "right" : "pos++;",
    "info" : "ExpressionStatement[9450-9456]:ExpressionStatement[9450-9456]"
  }, {
    "left" : "out.append(value, start, pos);",
    "right" : "out.append(value, start, pos);",
    "info" : "ExpressionStatement[9510-9540]:ExpressionStatement[9510-9540]"
  }, {
    "left" : "out.append(quoteChar);",
    "right" : "out.append(quoteChar);",
    "info" : "ExpressionStatement[9549-9571]:ExpressionStatement[9549-9571]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10119-10125]:Modifier[10119-10125]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10126-10130]:PrimitiveType[10126-10130]"
  }, {
    "left" : "printComment",
    "right" : "printComment",
    "info" : "SimpleName[10131-10143]:SimpleName[10131-10143]"
  }, {
    "left" : "final String comment",
    "right" : "final String comment",
    "info" : "SingleVariableDeclaration[10144-10164]:SingleVariableDeclaration[10144-10164]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[10173-10184]:SimpleType[10173-10184]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10185-11025]:Block[10185-11025]"
  }, {
    "left" : "if (!format.isCommentingEnabled())",
    "right" : "if (!format.isCommentingEnabled())",
    "info" : "IfStatement[10195-10261]:IfStatement[10195-10261]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10230-10261]:Block[10230-10261]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[10244-10251]:ReturnStatement[10244-10251]"
  }, {
    "left" : "if (!newRecord)",
    "right" : "if (!newRecord)",
    "info" : "IfStatement[10270-10320]:IfStatement[10270-10320]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10286-10320]:Block[10286-10320]"
  }, {
    "left" : "println();",
    "right" : "println();",
    "info" : "ExpressionStatement[10300-10310]:ExpressionStatement[10300-10310]"
  }, {
    "left" : "out.append(format.getCommentStart().charValue());",
    "right" : "out.append(format.getCommentStart().charValue());",
    "info" : "ExpressionStatement[10329-10378]:ExpressionStatement[10329-10378]"
  }, {
    "left" : "out.append(SP);",
    "right" : "out.append(SP);",
    "info" : "ExpressionStatement[10387-10402]:ExpressionStatement[10387-10402]"
  }, {
    "left" : "for (int i = 0; i < comment.length(); i++)",
    "right" : "for (int i = 0; i < comment.length(); i++)",
    "info" : "ForStatement[10411-11000]:ForStatement[10411-11000]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10454-11000]:Block[10454-11000]"
  }, {
    "left" : "final char c = comment.charAt(i);",
    "right" : "final char c = comment.charAt(i);",
    "info" : "VariableDeclarationStatement[10468-10501]:VariableDeclarationStatement[10468-10501]"
  }, {
    "left" : "switch (c) {\n            case CR:\n                if (i + 1 < comment.length() && comment.charAt(i + 1) == LF) {\n                    i++;\n                }\n                //$FALL-THROUGH$ break intentionally excluded.\n            case LF:\n                println();\n                out.append(format.getCommentStart().charValue());\n                out.append(SP);\n                break;\n            default:\n                out.append(c);\n                break;\n            }",
    "right" : "switch (c) {\n            case CR:\n                if (i + 1 < comment.length() && comment.charAt(i + 1) == LF) {\n                    i++;\n                }\n                //$FALL-THROUGH$ break intentionally excluded.\n            case LF:\n                println();\n                out.append(format.getCommentStart().charValue());\n                out.append(SP);\n                break;\n            default:\n                out.append(c);\n                break;\n            }",
    "info" : "SwitchStatement[10514-10990]:SwitchStatement[10514-10990]"
  }, {
    "left" : "case CR:",
    "right" : "case CR:",
    "info" : "SwitchCase[10539-10547]:SwitchCase[10539-10547]"
  }, {
    "left" : "if (i + 1 < comment.length() && comment.charAt(i + 1) == LF)",
    "right" : "if (i + 1 < comment.length() && comment.charAt(i + 1) == LF)",
    "info" : "IfStatement[10564-10669]:IfStatement[10564-10669]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10625-10669]:Block[10625-10669]"
  }, {
    "left" : "i++;",
    "right" : "i++;",
    "info" : "ExpressionStatement[10647-10651]:ExpressionStatement[10647-10651]"
  }, {
    "left" : "case LF:",
    "right" : "case LF:",
    "info" : "SwitchCase[10745-10753]:SwitchCase[10745-10753]"
  }, {
    "left" : "println();",
    "right" : "println();",
    "info" : "ExpressionStatement[10770-10780]:ExpressionStatement[10770-10780]"
  }, {
    "left" : "out.append(format.getCommentStart().charValue());",
    "right" : "out.append(format.getCommentStart().charValue());",
    "info" : "ExpressionStatement[10797-10846]:ExpressionStatement[10797-10846]"
  }, {
    "left" : "out.append(SP);",
    "right" : "out.append(SP);",
    "info" : "ExpressionStatement[10863-10878]:ExpressionStatement[10863-10878]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[10895-10901]:BreakStatement[10895-10901]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[10914-10922]:SwitchCase[10914-10922]"
  }, {
    "left" : "out.append(c);",
    "right" : "out.append(c);",
    "info" : "ExpressionStatement[10939-10953]:ExpressionStatement[10939-10953]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[10970-10976]:BreakStatement[10970-10976]"
  }, {
    "left" : "println();",
    "right" : "println();",
    "info" : "ExpressionStatement[11009-11019]:ExpressionStatement[11009-11019]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11160-11166]:Modifier[11160-11166]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11167-11171]:PrimitiveType[11167-11171]"
  }, {
    "left" : "println",
    "right" : "println",
    "info" : "SimpleName[11172-11179]:SimpleName[11172-11179]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[11189-11200]:SimpleType[11189-11200]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11201-11343]:Block[11201-11392]"
  }, {
    "left" : "final String recordSeparator = format.getRecordSeparator();",
    "right" : "final String recordSeparator = format.getRecordSeparator();",
    "info" : "VariableDeclarationStatement[11211-11270]:VariableDeclarationStatement[11211-11270]"
  }, {
    "left" : "out.append(recordSeparator);",
    "right" : "out.append(recordSeparator);",
    "info" : "ExpressionStatement[11283-11311]:ExpressionStatement[11322-11350]"
  }, {
    "left" : "newRecord = true;",
    "right" : "newRecord = true;",
    "info" : "ExpressionStatement[11320-11337]:ExpressionStatement[11369-11386]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11648-11654]:Modifier[11697-11703]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11655-11659]:PrimitiveType[11704-11708]"
  }, {
    "left" : "printRecord",
    "right" : "printRecord",
    "info" : "SimpleName[11660-11671]:SimpleName[11709-11720]"
  }, {
    "left" : "final Iterable<?> values",
    "right" : "final Iterable<?> values",
    "info" : "SingleVariableDeclaration[11672-11696]:SingleVariableDeclaration[11721-11745]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[11705-11716]:SimpleType[11754-11765]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11717-11823]:Block[11766-11872]"
  }, {
    "left" : "for (final Object value : values)",
    "right" : "for (final Object value : values)",
    "info" : "EnhancedForStatement[11727-11798]:EnhancedForStatement[11776-11847]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11761-11798]:Block[11810-11847]"
  }, {
    "left" : "print(value);",
    "right" : "print(value);",
    "info" : "ExpressionStatement[11775-11788]:ExpressionStatement[11824-11837]"
  }, {
    "left" : "println();",
    "right" : "println();",
    "info" : "ExpressionStatement[11807-11817]:ExpressionStatement[11856-11866]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12128-12134]:Modifier[12177-12183]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12135-12139]:PrimitiveType[12184-12188]"
  }, {
    "left" : "printRecord",
    "right" : "printRecord",
    "info" : "SimpleName[12140-12151]:SimpleName[12189-12200]"
  }, {
    "left" : "final Object... values",
    "right" : "final Object... values",
    "info" : "SingleVariableDeclaration[12152-12174]:SingleVariableDeclaration[12201-12223]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[12183-12194]:SimpleType[12232-12243]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12195-12301]:Block[12244-12350]"
  }, {
    "left" : "for (final Object value : values)",
    "right" : "for (final Object value : values)",
    "info" : "EnhancedForStatement[12205-12276]:EnhancedForStatement[12254-12325]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12239-12276]:Block[12288-12325]"
  }, {
    "left" : "print(value);",
    "right" : "print(value);",
    "info" : "ExpressionStatement[12253-12266]:ExpressionStatement[12302-12315]"
  }, {
    "left" : "println();",
    "right" : "println();",
    "info" : "ExpressionStatement[12285-12295]:ExpressionStatement[12334-12344]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12514-12520]:Modifier[12563-12569]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12521-12525]:PrimitiveType[12570-12574]"
  }, {
    "left" : "printRecords",
    "right" : "printRecords",
    "info" : "SimpleName[12526-12538]:SimpleName[12575-12587]"
  }, {
    "left" : "final Iterable<?> values",
    "right" : "final Iterable<?> values",
    "info" : "SingleVariableDeclaration[12539-12563]:SingleVariableDeclaration[12588-12612]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[12572-12583]:SimpleType[12621-12632]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12584-12925]:Block[12633-12974]"
  }, {
    "left" : "for (final Object value : values)",
    "right" : "for (final Object value : values)",
    "info" : "EnhancedForStatement[12594-12919]:EnhancedForStatement[12643-12968]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12628-12919]:Block[12677-12968]"
  }, {
    "left" : "if (value instanceof Object[])",
    "right" : "if (value instanceof Object[])",
    "info" : "IfStatement[12642-12909]:IfStatement[12691-12958]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12673-12740]:Block[12722-12789]"
  }, {
    "left" : "this.printRecord((Object[]) value);",
    "right" : "this.printRecord((Object[]) value);",
    "info" : "ExpressionStatement[12691-12726]:ExpressionStatement[12740-12775]"
  }, {
    "left" : "if (value instanceof Iterable)",
    "right" : "if (value instanceof Iterable)",
    "info" : "IfStatement[12746-12909]:IfStatement[12795-12958]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12777-12847]:Block[12826-12896]"
  }, {
    "left" : "this.printRecord((Iterable<?>) value);",
    "right" : "this.printRecord((Iterable<?>) value);",
    "info" : "ExpressionStatement[12795-12833]:ExpressionStatement[12844-12882]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12853-12909]:Block[12902-12958]"
  }, {
    "left" : "this.printRecord(value);",
    "right" : "this.printRecord(value);",
    "info" : "ExpressionStatement[12871-12895]:ExpressionStatement[12920-12944]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13133-13139]:Modifier[13182-13188]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13140-13144]:PrimitiveType[13189-13193]"
  }, {
    "left" : "printRecords",
    "right" : "printRecords",
    "info" : "SimpleName[13145-13157]:SimpleName[13194-13206]"
  }, {
    "left" : "final Object[] values",
    "right" : "final Object[] values",
    "info" : "SingleVariableDeclaration[13158-13179]:SingleVariableDeclaration[13207-13228]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[13188-13199]:SimpleType[13237-13248]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13200-13541]:Block[13249-13590]"
  }, {
    "left" : "for (final Object value : values)",
    "right" : "for (final Object value : values)",
    "info" : "EnhancedForStatement[13210-13535]:EnhancedForStatement[13259-13584]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13244-13535]:Block[13293-13584]"
  }, {
    "left" : "if (value instanceof Object[])",
    "right" : "if (value instanceof Object[])",
    "info" : "IfStatement[13258-13525]:IfStatement[13307-13574]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13289-13356]:Block[13338-13405]"
  }, {
    "left" : "this.printRecord((Object[]) value);",
    "right" : "this.printRecord((Object[]) value);",
    "info" : "ExpressionStatement[13307-13342]:ExpressionStatement[13356-13391]"
  }, {
    "left" : "if (value instanceof Iterable)",
    "right" : "if (value instanceof Iterable)",
    "info" : "IfStatement[13362-13525]:IfStatement[13411-13574]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13393-13463]:Block[13442-13512]"
  }, {
    "left" : "this.printRecord((Iterable<?>) value);",
    "right" : "this.printRecord((Iterable<?>) value);",
    "info" : "ExpressionStatement[13411-13449]:ExpressionStatement[13460-13498]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13469-13525]:Block[13518-13574]"
  }, {
    "left" : "this.printRecord(value);",
    "right" : "this.printRecord(value);",
    "info" : "ExpressionStatement[13487-13511]:ExpressionStatement[13536-13560]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13835-13841]:Modifier[13884-13890]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13842-13846]:PrimitiveType[13891-13895]"
  }, {
    "left" : "printRecords",
    "right" : "printRecords",
    "info" : "SimpleName[13847-13859]:SimpleName[13896-13908]"
  }, {
    "left" : "final ResultSet resultSet",
    "right" : "final ResultSet resultSet",
    "info" : "SingleVariableDeclaration[13860-13885]:SingleVariableDeclaration[13909-13934]"
  }, {
    "left" : "SQLException",
    "right" : "SQLException",
    "info" : "SimpleType[13894-13906]:SimpleType[13943-13955]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[13908-13919]:SimpleType[13957-13968]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13920-14183]:Block[13969-14232]"
  }, {
    "left" : "final int columnCount = resultSet.getMetaData().getColumnCount();",
    "right" : "final int columnCount = resultSet.getMetaData().getColumnCount();",
    "info" : "VariableDeclarationStatement[13930-13995]:VariableDeclarationStatement[13979-14044]"
  }, {
    "left" : "while (resultSet.next())",
    "right" : "while (resultSet.next())",
    "info" : "WhileStatement[14004-14177]:WhileStatement[14053-14226]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14029-14177]:Block[14078-14226]"
  }, {
    "left" : "for (int i = 1; i <= columnCount; i++)",
    "right" : "for (int i = 1; i <= columnCount; i++)",
    "info" : "ForStatement[14043-14144]:ForStatement[14092-14193]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14082-14144]:Block[14131-14193]"
  }, {
    "left" : "print(resultSet.getString(i));",
    "right" : "print(resultSet.getString(i));",
    "info" : "ExpressionStatement[14100-14130]:ExpressionStatement[14149-14179]"
  }, {
    "left" : "println();",
    "right" : "println();",
    "info" : "ExpressionStatement[14157-14167]:ExpressionStatement[14206-14216]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14288-14294]:Modifier[14337-14343]"
  }, {
    "left" : "Appendable",
    "right" : "Appendable",
    "info" : "SimpleType[14295-14305]:SimpleType[14344-14354]"
  }, {
    "left" : "getOut",
    "right" : "getOut",
    "info" : "SimpleName[14306-14312]:SimpleName[14355-14361]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14315-14347]:Block[14364-14396]"
  }, {
    "left" : "return this.out;",
    "right" : "return this.out;",
    "info" : "ReturnStatement[14325-14341]:ReturnStatement[14374-14390]"
  } ]
}