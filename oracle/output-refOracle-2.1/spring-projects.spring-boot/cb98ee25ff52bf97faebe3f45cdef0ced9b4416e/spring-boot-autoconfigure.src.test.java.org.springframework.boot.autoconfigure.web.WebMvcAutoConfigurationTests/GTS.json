{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "WebMvcAutoConfigurationTests",
      "right" : "WebMvcAutoConfigurationTests",
      "info" : "TypeDeclaration[3570-19450]:TypeDeclaration[3623-14977]"
    }, {
      "left" : "private static final MockEmbeddedServletContainerFactory containerFactory = new MockEmbeddedServletContainerFactory();",
      "right" : "private static final MockEmbeddedServletContainerFactory containerFactory = new MockEmbeddedServletContainerFactory();",
      "info" : "FieldDeclaration[3744-3862]:FieldDeclaration[3824-3942]"
    }, {
      "left" : "@Rule\n\tpublic ExpectedException thrown = ExpectedException.none();",
      "right" : "@Rule\n\tpublic ExpectedException thrown = ExpectedException.none();",
      "info" : "FieldDeclaration[3865-3931]:FieldDeclaration[3945-4011]"
    }, {
      "left" : "private AnnotationConfigEmbeddedWebApplicationContext context;",
      "right" : "private AnnotationConfigEmbeddedWebApplicationContext context;",
      "info" : "FieldDeclaration[3934-3996]:FieldDeclaration[4014-4076]"
    }, {
      "left" : "public void close()",
      "right" : "public void close()",
      "info" : "MethodDeclaration[3999-4090]:MethodDeclaration[4079-4170]"
    }, {
      "left" : "public void handerAdaptersCreated() throws Exception",
      "right" : "public void handerAdaptersCreated() throws Exception",
      "info" : "MethodDeclaration[4093-4789]:MethodDeclaration[4173-4615]"
    }, {
      "left" : "public void handerMappingsCreated() throws Exception",
      "right" : "public void handerMappingsCreated() throws Exception",
      "info" : "MethodDeclaration[4792-5202]:MethodDeclaration[4618-4774]"
    }, {
      "left" : "public void resourceHandlerMapping() throws Exception",
      "right" : "public void resourceHandlerMapping() throws Exception",
      "info" : "MethodDeclaration[5205-5883]:MethodDeclaration[4777-5201]"
    }, {
      "left" : "public void resourceHandlerMappingOverrideWebjars() throws Exception",
      "right" : "public void resourceHandlerMappingOverrideWebjars() throws Exception",
      "info" : "MethodDeclaration[5886-6509]:MethodDeclaration[5204-5571]"
    }, {
      "left" : "public void resourceHandlerMappingOverrideAll() throws Exception",
      "right" : "public void resourceHandlerMappingOverrideAll() throws Exception",
      "info" : "MethodDeclaration[6512-7124]:MethodDeclaration[5574-5927]"
    }, {
      "left" : "public void resourceHandlerMappingDisabled() throws Exception",
      "right" : "public void resourceHandlerMappingDisabled() throws Exception",
      "info" : "MethodDeclaration[7127-7691]:MethodDeclaration[5930-6181]"
    }, {
      "left" : "public void noLocaleResolver() throws Exception",
      "right" : "public void noLocaleResolver() throws Exception",
      "info" : "MethodDeclaration[7694-8146]:MethodDeclaration[6184-6376]"
    }, {
      "left" : "public void overrideLocale() throws Exception",
      "right" : "public void overrideLocale() throws Exception",
      "info" : "MethodDeclaration[8149-9108]:MethodDeclaration[6379-7004]"
    }, {
      "left" : "public void noDateFormat() throws Exception",
      "right" : "public void noDateFormat() throws Exception",
      "info" : "MethodDeclaration[9111-9729]:MethodDeclaration[7007-7365]"
    }, {
      "left" : "public void overrideDateFormat() throws Exception",
      "right" : "public void overrideDateFormat() throws Exception",
      "info" : "MethodDeclaration[9732-10425]:MethodDeclaration[7368-7717]"
    }, {
      "left" : "public void noMessageCodesResolver() throws Exception",
      "right" : "public void noMessageCodesResolver() throws Exception",
      "info" : "MethodDeclaration[10428-10886]:MethodDeclaration[7720-7918]"
    }, {
      "left" : "public void overrideMessageCodesFormat() throws Exception",
      "right" : "public void overrideMessageCodesFormat() throws Exception",
      "info" : "MethodDeclaration[10889-11471]:MethodDeclaration[7921-8186]"
    }, {
      "left" : "protected Map<String, List<Resource>> getFaviconMappingLocations()\n\t\t\tthrows IllegalAccessException",
      "right" : "protected Map<String, List<Resource>> getFaviconMappingLocations()\n\t\t\tthrows IllegalAccessException",
      "info" : "MethodDeclaration[11474-11713]:MethodDeclaration[8189-8428]"
    }, {
      "left" : "protected Map<String, List<Resource>> getResourceMappingLocations()\n\t\t\tthrows IllegalAccessException",
      "right" : "protected Map<String, List<Resource>> getResourceMappingLocations()\n\t\t\tthrows IllegalAccessException",
      "info" : "MethodDeclaration[11716-11957]:MethodDeclaration[8431-8672]"
    }, {
      "left" : "protected Map<String, List<Resource>> getMappingLocations(HandlerMapping mapping)\n\t\t\tthrows IllegalAccessException",
      "right" : "protected Map<String, List<Resource>> getMappingLocations(HandlerMapping mapping)\n\t\t\tthrows IllegalAccessException",
      "info" : "MethodDeclaration[11960-12741]:MethodDeclaration[8675-9456]"
    }, {
      "left" : "public void ignoreDefaultModelOnRedirectIsTrue() throws Exception",
      "right" : "public void ignoreDefaultModelOnRedirectIsTrue() throws Exception",
      "info" : "MethodDeclaration[12744-13286]:MethodDeclaration[9459-9747]"
    }, {
      "left" : "public void overrideIgnoreDefaultModelOnRedirect() throws Exception",
      "right" : "public void overrideIgnoreDefaultModelOnRedirect() throws Exception",
      "info" : "MethodDeclaration[13289-13944]:MethodDeclaration[9750-10405]"
    }, {
      "left" : "public void customViewResolver() throws Exception",
      "right" : "public void customViewResolver() throws Exception",
      "info" : "MethodDeclaration[13947-14388]:MethodDeclaration[10408-10589]"
    }, {
      "left" : "public void customContentNegotiatingViewResolver() throws Exception",
      "right" : "public void customContentNegotiatingViewResolver() throws Exception",
      "info" : "MethodDeclaration[14391-15023]:MethodDeclaration[10592-10964]"
    }, {
      "left" : "public void faviconMapping() throws IllegalAccessException",
      "right" : "public void faviconMapping() throws IllegalAccessException",
      "info" : "MethodDeclaration[15026-15786]:MethodDeclaration[10967-11473]"
    }, {
      "left" : "public void faviconMappingDisabled() throws IllegalAccessException",
      "right" : "public void faviconMappingDisabled() throws IllegalAccessException",
      "info" : "MethodDeclaration[15789-16491]:MethodDeclaration[11476-11865]"
    }, {
      "left" : "public void defaultAsyncRequestTimeout() throws Exception",
      "right" : "public void defaultAsyncRequestTimeout() throws Exception",
      "info" : "MethodDeclaration[16494-17007]:MethodDeclaration[11868-12127]"
    }, {
      "left" : "public void customAsyncRequestTimeout() throws Exception",
      "right" : "public void customAsyncRequestTimeout() throws Exception",
      "info" : "MethodDeclaration[17010-17659]:MethodDeclaration[12130-12466]"
    }, {
      "left" : "ViewConfig",
      "right" : "ViewConfig",
      "info" : "TypeDeclaration[17662-18039]:TypeDeclaration[13189-13566]"
    }, {
      "left" : "public View jsonView()",
      "right" : "public View jsonView()",
      "info" : "MethodDeclaration[17717-18035]:MethodDeclaration[13244-13562]"
    }, {
      "left" : "protected void renderMergedOutputModel(Map<String, Object> model,\n\t\t\t\t\t\tHttpServletRequest request, HttpServletResponse response)\n\t\t\t\t\t\tthrows Exception",
      "right" : "protected void renderMergedOutputModel(Map<String, Object> model,\n\t\t\t\t\t\tHttpServletRequest request, HttpServletResponse response)\n\t\t\t\t\t\tthrows Exception",
      "info" : "MethodDeclaration[17786-18025]:MethodDeclaration[13313-13552]"
    }, {
      "left" : "WebJars",
      "right" : "WebJars",
      "info" : "TypeDeclaration[18042-18306]:TypeDeclaration[13569-13833]"
    }, {
      "left" : "public void addResourceHandlers(ResourceHandlerRegistry registry)",
      "right" : "public void addResourceHandlers(ResourceHandlerRegistry registry)",
      "info" : "MethodDeclaration[18126-18302]:MethodDeclaration[13653-13829]"
    }, {
      "left" : "AllResources",
      "right" : "AllResources",
      "info" : "TypeDeclaration[18309-18564]:TypeDeclaration[13836-14091]"
    }, {
      "left" : "public void addResourceHandlers(ResourceHandlerRegistry registry)",
      "right" : "public void addResourceHandlers(ResourceHandlerRegistry registry)",
      "info" : "MethodDeclaration[18398-18560]:MethodDeclaration[13925-14087]"
    }, {
      "left" : "Config",
      "right" : "Config",
      "info" : "TypeDeclaration[18567-18917]:TypeDeclaration[14094-14444]"
    }, {
      "left" : "public EmbeddedServletContainerFactory containerFactory()",
      "right" : "public EmbeddedServletContainerFactory containerFactory()",
      "info" : "MethodDeclaration[18615-18714]:MethodDeclaration[14142-14241]"
    }, {
      "left" : "public EmbeddedServletContainerCustomizerBeanPostProcessor embeddedServletContainerCustomizerBeanPostProcessor()",
      "right" : "public EmbeddedServletContainerCustomizerBeanPostProcessor embeddedServletContainerCustomizerBeanPostProcessor()",
      "info" : "MethodDeclaration[18718-18913]:MethodDeclaration[14245-14440]"
    }, {
      "left" : "CustomViewResolver",
      "right" : "CustomViewResolver",
      "info" : "TypeDeclaration[18920-19064]:TypeDeclaration[14447-14591]"
    }, {
      "left" : "public ViewResolver viewResolver()",
      "right" : "public ViewResolver viewResolver()",
      "info" : "MethodDeclaration[18980-19060]:MethodDeclaration[14507-14587]"
    }, {
      "left" : "CustomContentNegotiatingViewResolver",
      "right" : "CustomContentNegotiatingViewResolver",
      "info" : "TypeDeclaration[19067-19265]:TypeDeclaration[14594-14792]"
    }, {
      "left" : "public ContentNegotiatingViewResolver myViewResolver()",
      "right" : "public ContentNegotiatingViewResolver myViewResolver()",
      "info" : "MethodDeclaration[19145-19261]:MethodDeclaration[14672-14788]"
    }, {
      "left" : "MyViewResolver",
      "right" : "MyViewResolver",
      "info" : "TypeDeclaration[19268-19447]:TypeDeclaration[14795-14974]"
    }, {
      "left" : "public View resolveViewName(String viewName, Locale locale) throws Exception",
      "right" : "public View resolveViewName(String viewName, Locale locale) throws Exception",
      "info" : "MethodDeclaration[19333-19443]:MethodDeclaration[14860-14970]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4027-4090]:Block[4107-4170]"
    }, {
      "left" : "if (this.context != null)",
      "right" : "if (this.context != null)",
      "info" : "IfStatement[4031-4087]:IfStatement[4111-4167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4057-4087]:Block[4137-4167]"
    }, {
      "left" : "this.context.close();",
      "right" : "this.context.close();",
      "info" : "ExpressionStatement[4062-4083]:ExpressionStatement[4142-4163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4153-4789]:Block[4233-4615]"
    }, {
      "left" : "assertEquals(3, this.context.getBeanNamesForType(HandlerAdapter.class).length);",
      "right" : "assertEquals(3, this.context.getBeanNamesForType(HandlerAdapter.class).length);",
      "info" : "ExpressionStatement[4421-4500]:ExpressionStatement[4247-4326]"
    }, {
      "left" : "assertFalse(this.context.getBean(RequestMappingHandlerAdapter.class)\n\t\t\t\t.getMessageConverters().isEmpty());",
      "right" : "assertFalse(this.context.getBean(RequestMappingHandlerAdapter.class)\n\t\t\t\t.getMessageConverters().isEmpty());",
      "info" : "ExpressionStatement[4503-4611]:ExpressionStatement[4329-4437]"
    }, {
      "left" : "assertEquals(this.context.getBean(HttpMessageConverters.class).getConverters(),\n\t\t\t\tthis.context.getBean(RequestMappingHandlerAdapter.class)\n\t\t\t\t\t\t.getMessageConverters());",
      "right" : "assertEquals(this.context.getBean(HttpMessageConverters.class).getConverters(),\n\t\t\t\tthis.context.getBean(RequestMappingHandlerAdapter.class)\n\t\t\t\t\t\t.getMessageConverters());",
      "info" : "ExpressionStatement[4614-4786]:ExpressionStatement[4440-4612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4852-5202]:Block[4678-4774]"
    }, {
      "left" : "assertEquals(6, this.context.getBeanNamesForType(HandlerMapping.class).length);",
      "right" : "assertEquals(6, this.context.getBeanNamesForType(HandlerMapping.class).length);",
      "info" : "ExpressionStatement[5120-5199]:ExpressionStatement[4692-4771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5266-5883]:Block[4838-5201]"
    }, {
      "left" : "Map<String, List<Resource>> mappingLocations = getResourceMappingLocations();",
      "right" : "Map<String, List<Resource>> mappingLocations = getResourceMappingLocations();",
      "info" : "VariableDeclarationStatement[5534-5611]:VariableDeclarationStatement[4852-4929]"
    }, {
      "left" : "assertThat(mappingLocations.get(\"/**\").size(), equalTo(5));",
      "right" : "assertThat(mappingLocations.get(\"/**\").size(), equalTo(5));",
      "info" : "ExpressionStatement[5614-5673]:ExpressionStatement[4932-4991]"
    }, {
      "left" : "assertThat(mappingLocations.get(\"/webjars/**\").size(), equalTo(1));",
      "right" : "assertThat(mappingLocations.get(\"/webjars/**\").size(), equalTo(1));",
      "info" : "ExpressionStatement[5676-5743]:ExpressionStatement[4994-5061]"
    }, {
      "left" : "assertThat(mappingLocations.get(\"/webjars/**\").get(0),\n\t\t\t\tequalTo((Resource) new ClassPathResource(\"/META-INF/resources/webjars/\")));",
      "right" : "assertThat(mappingLocations.get(\"/webjars/**\").get(0),\n\t\t\t\tequalTo((Resource) new ClassPathResource(\"/META-INF/resources/webjars/\")));",
      "info" : "ExpressionStatement[5746-5880]:ExpressionStatement[5064-5198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5962-6509]:Block[5280-5571]"
    }, {
      "left" : "Map<String, List<Resource>> mappingLocations = getResourceMappingLocations();",
      "right" : "Map<String, List<Resource>> mappingLocations = getResourceMappingLocations();",
      "info" : "VariableDeclarationStatement[6245-6322]:VariableDeclarationStatement[5307-5384]"
    }, {
      "left" : "assertThat(mappingLocations.get(\"/webjars/**\").size(), equalTo(1));",
      "right" : "assertThat(mappingLocations.get(\"/webjars/**\").size(), equalTo(1));",
      "info" : "ExpressionStatement[6325-6392]:ExpressionStatement[5387-5454]"
    }, {
      "left" : "assertThat(mappingLocations.get(\"/webjars/**\").get(0),\n\t\t\t\tequalTo((Resource) new ClassPathResource(\"/foo/\")));",
      "right" : "assertThat(mappingLocations.get(\"/webjars/**\").get(0),\n\t\t\t\tequalTo((Resource) new ClassPathResource(\"/foo/\")));",
      "info" : "ExpressionStatement[6395-6506]:ExpressionStatement[5457-5568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6584-7124]:Block[5647-5927]"
    }, {
      "left" : "Map<String, List<Resource>> mappingLocations = getResourceMappingLocations();",
      "right" : "Map<String, List<Resource>> mappingLocations = getResourceMappingLocations();",
      "info" : "VariableDeclarationStatement[6876-6953]:VariableDeclarationStatement[5679-5756]"
    }, {
      "left" : "assertThat(mappingLocations.get(\"/**\").size(), equalTo(1));",
      "right" : "assertThat(mappingLocations.get(\"/**\").size(), equalTo(1));",
      "info" : "ExpressionStatement[6956-7015]:ExpressionStatement[5759-5818]"
    }, {
      "left" : "assertThat(mappingLocations.get(\"/**\").get(0),\n\t\t\t\tequalTo((Resource) new ClassPathResource(\"/foo/\")));",
      "right" : "assertThat(mappingLocations.get(\"/**\").get(0),\n\t\t\t\tequalTo((Resource) new ClassPathResource(\"/foo/\")));",
      "info" : "ExpressionStatement[7018-7121]:ExpressionStatement[5821-5924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7196-7691]:Block[5999-6181]"
    }, {
      "left" : "this.context.register(Config.class, WebMvcAutoConfiguration.class,\n\t\t\t\tHttpMessageConvertersAutoConfiguration.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);",
      "right" : "configClasses.addAll(Arrays.asList(Config.class, WebMvcAutoConfiguration.class,\n\t\t\t\tHttpMessageConvertersAutoConfiguration.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class));",
      "info" : "ExpressionStatement[7366-7531]:ExpressionStatement[12818-12997]"
    }, {
      "left" : "Map<String, List<Resource>> mappingLocations = getResourceMappingLocations();",
      "right" : "Map<String, List<Resource>> mappingLocations = getResourceMappingLocations();",
      "info" : "VariableDeclarationStatement[7560-7637]:VariableDeclarationStatement[6050-6127]"
    }, {
      "left" : "assertThat(mappingLocations.size(), equalTo(0));",
      "right" : "assertThat(mappingLocations.size(), equalTo(0));",
      "info" : "ExpressionStatement[7640-7688]:ExpressionStatement[6130-6178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7749-8146]:Block[6239-6376]"
    }, {
      "left" : "this.thrown.expect(NoSuchBeanDefinitionException.class);",
      "right" : "this.thrown.expect(NoSuchBeanDefinitionException.class);",
      "info" : "ExpressionStatement[8041-8097]:ExpressionStatement[6271-6327]"
    }, {
      "left" : "this.context.getBean(LocaleResolver.class);",
      "right" : "this.context.getBean(LocaleResolver.class);",
      "info" : "ExpressionStatement[8100-8143]:ExpressionStatement[6330-6373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8202-9108]:Block[6432-7004]"
    }, {
      "left" : "MockHttpServletRequest request = new MockHttpServletRequest();",
      "right" : "MockHttpServletRequest request = new MockHttpServletRequest();",
      "info" : "VariableDeclarationStatement[8644-8706]:VariableDeclarationStatement[6540-6602]"
    }, {
      "left" : "request.addPreferredLocale(StringUtils.parseLocaleString(\"nl_NL\"));",
      "right" : "request.addPreferredLocale(StringUtils.parseLocaleString(\"nl_NL\"));",
      "info" : "ExpressionStatement[8709-8776]:ExpressionStatement[6605-6672]"
    }, {
      "left" : "LocaleResolver localeResolver = this.context.getBean(LocaleResolver.class);",
      "right" : "LocaleResolver localeResolver = this.context.getBean(LocaleResolver.class);",
      "info" : "VariableDeclarationStatement[8779-8854]:VariableDeclarationStatement[6675-6750]"
    }, {
      "left" : "Locale locale = localeResolver.resolveLocale(request);",
      "right" : "Locale locale = localeResolver.resolveLocale(request);",
      "info" : "VariableDeclarationStatement[8857-8911]:VariableDeclarationStatement[6753-6807]"
    }, {
      "left" : "assertThat(localeResolver, instanceOf(FixedLocaleResolver.class));",
      "right" : "assertThat(localeResolver, instanceOf(FixedLocaleResolver.class));",
      "info" : "ExpressionStatement[8914-8980]:ExpressionStatement[6810-6876]"
    }, {
      "left" : "assertThat(locale.toString(), equalTo(\"en_UK\"));",
      "right" : "assertThat(locale.toString(), equalTo(\"en_UK\"));",
      "info" : "ExpressionStatement[9057-9105]:ExpressionStatement[6953-7001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9162-9729]:Block[7058-7365]"
    }, {
      "left" : "FormattingConversionService cs = this.context\n\t\t\t\t.getBean(FormattingConversionService.class);",
      "right" : "FormattingConversionService cs = this.context\n\t\t\t\t.getBean(FormattingConversionService.class);",
      "info" : "VariableDeclarationStatement[9454-9548]:VariableDeclarationStatement[7090-7184]"
    }, {
      "left" : "Date date = new DateTime(1988, 6, 25, 20, 30).toDate();",
      "right" : "Date date = new DateTime(1988, 6, 25, 20, 30).toDate();",
      "info" : "VariableDeclarationStatement[9551-9606]:VariableDeclarationStatement[7187-7242]"
    }, {
      "left" : "assertThat(cs.convert(date, String.class), equalTo(date.toString()));",
      "right" : "assertThat(cs.convert(date, String.class), equalTo(date.toString()));",
      "info" : "ExpressionStatement[9657-9726]:ExpressionStatement[7293-7362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9789-10425]:Block[7425-7717]"
    }, {
      "left" : "FormattingConversionService cs = this.context\n\t\t\t\t.getBean(FormattingConversionService.class);",
      "right" : "FormattingConversionService cs = this.context\n\t\t\t\t.getBean(FormattingConversionService.class);",
      "info" : "VariableDeclarationStatement[10201-10295]:VariableDeclarationStatement[7493-7587]"
    }, {
      "left" : "Date date = new DateTime(1988, 6, 25, 20, 30).toDate();",
      "right" : "Date date = new DateTime(1988, 6, 25, 20, 30).toDate();",
      "info" : "VariableDeclarationStatement[10298-10353]:VariableDeclarationStatement[7590-7645]"
    }, {
      "left" : "assertThat(cs.convert(date, String.class), equalTo(\"25*06*1988\"));",
      "right" : "assertThat(cs.convert(date, String.class), equalTo(\"25*06*1988\"));",
      "info" : "ExpressionStatement[10356-10422]:ExpressionStatement[7648-7714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10489-10886]:Block[7781-7918]"
    }, {
      "left" : "assertNull(this.context.getBean(WebMvcAutoConfigurationAdapter.class)\n\t\t\t\t.getMessageCodesResolver());",
      "right" : "assertNull(this.context.getBean(WebMvcAutoConfigurationAdapter.class)\n\t\t\t\t.getMessageCodesResolver());",
      "info" : "ExpressionStatement[10781-10883]:ExpressionStatement[7813-7915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10954-11471]:Block[7986-8186]"
    }, {
      "left" : "assertNotNull(this.context.getBean(WebMvcAutoConfigurationAdapter.class)\n\t\t\t\t.getMessageCodesResolver());",
      "right" : "assertNotNull(this.context.getBean(WebMvcAutoConfigurationAdapter.class)\n\t\t\t\t.getMessageCodesResolver());",
      "info" : "ExpressionStatement[11363-11468]:ExpressionStatement[8078-8183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11574-11713]:Block[8289-8428]"
    }, {
      "left" : "HandlerMapping mapping = (HandlerMapping) this.context\n\t\t\t\t.getBean(\"faviconHandlerMapping\");",
      "right" : "HandlerMapping mapping = (HandlerMapping) this.context\n\t\t\t\t.getBean(\"faviconHandlerMapping\");",
      "info" : "VariableDeclarationStatement[11578-11671]:VariableDeclarationStatement[8293-8386]"
    }, {
      "left" : "return getMappingLocations(mapping);",
      "right" : "return getMappingLocations(mapping);",
      "info" : "ReturnStatement[11674-11710]:ReturnStatement[8389-8425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11817-11957]:Block[8532-8672]"
    }, {
      "left" : "HandlerMapping mapping = (HandlerMapping) this.context\n\t\t\t\t.getBean(\"resourceHandlerMapping\");",
      "right" : "HandlerMapping mapping = (HandlerMapping) this.context\n\t\t\t\t.getBean(\"resourceHandlerMapping\");",
      "info" : "VariableDeclarationStatement[11821-11915]:VariableDeclarationStatement[8536-8630]"
    }, {
      "left" : "return getMappingLocations(mapping);",
      "right" : "return getMappingLocations(mapping);",
      "info" : "ReturnStatement[11918-11954]:ReturnStatement[8633-8669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12107-12741]:Block[8822-9456]"
    }, {
      "left" : "Map<String, List<Resource>> mappingLocations = new LinkedHashMap<String, List<Resource>>();",
      "right" : "Map<String, List<Resource>> mappingLocations = new LinkedHashMap<String, List<Resource>>();",
      "info" : "VariableDeclarationStatement[12111-12202]:VariableDeclarationStatement[8826-8917]"
    }, {
      "left" : "if (mapping instanceof SimpleUrlHandlerMapping)",
      "right" : "if (mapping instanceof SimpleUrlHandlerMapping)",
      "info" : "IfStatement[12205-12711]:IfStatement[8920-9426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12253-12711]:Block[8968-9426]"
    }, {
      "left" : "Field locationsField = ReflectionUtils.findField(\n\t\t\t\t\tResourceHttpRequestHandler.class, \"locations\");",
      "right" : "Field locationsField = ReflectionUtils.findField(\n\t\t\t\t\tResourceHttpRequestHandler.class, \"locations\");",
      "info" : "VariableDeclarationStatement[12258-12360]:VariableDeclarationStatement[8973-9075]"
    }, {
      "left" : "locationsField.setAccessible(true);",
      "right" : "locationsField.setAccessible(true);",
      "info" : "ExpressionStatement[12364-12399]:ExpressionStatement[9079-9114]"
    }, {
      "left" : "for (Map.Entry<String, Object> entry : ((SimpleUrlHandlerMapping) mapping)\n\t\t\t\t\t.getHandlerMap().entrySet())",
      "right" : "for (Map.Entry<String, Object> entry : ((SimpleUrlHandlerMapping) mapping)\n\t\t\t\t\t.getHandlerMap().entrySet())",
      "info" : "EnhancedForStatement[12403-12707]:EnhancedForStatement[9118-9422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12512-12707]:Block[9227-9422]"
    }, {
      "left" : "ResourceHttpRequestHandler handler = (ResourceHttpRequestHandler) entry\n\t\t\t\t\t\t.getValue();",
      "right" : "ResourceHttpRequestHandler handler = (ResourceHttpRequestHandler) entry\n\t\t\t\t\t\t.getValue();",
      "info" : "VariableDeclarationStatement[12518-12608]:VariableDeclarationStatement[9233-9323]"
    }, {
      "left" : "mappingLocations.put(entry.getKey(),\n\t\t\t\t\t\t(List<Resource>) locationsField.get(handler));",
      "right" : "mappingLocations.put(entry.getKey(),\n\t\t\t\t\t\t(List<Resource>) locationsField.get(handler));",
      "info" : "ExpressionStatement[12613-12702]:ExpressionStatement[9328-9417]"
    }, {
      "left" : "return mappingLocations;",
      "right" : "return mappingLocations;",
      "info" : "ReturnStatement[12714-12738]:ReturnStatement[9429-9453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12817-13286]:Block[9532-9747]"
    }, {
      "left" : "RequestMappingHandlerAdapter adapter = this.context\n\t\t\t\t.getBean(RequestMappingHandlerAdapter.class);",
      "right" : "RequestMappingHandlerAdapter adapter = this.context\n\t\t\t\t.getBean(RequestMappingHandlerAdapter.class);",
      "info" : "VariableDeclarationStatement[13085-13186]:VariableDeclarationStatement[9546-9647]"
    }, {
      "left" : "assertEquals(true,\n\t\t\t\tReflectionTestUtils.getField(adapter, \"ignoreDefaultModelOnRedirect\"));",
      "right" : "assertEquals(true,\n\t\t\t\tReflectionTestUtils.getField(adapter, \"ignoreDefaultModelOnRedirect\"));",
      "info" : "ExpressionStatement[13189-13283]:ExpressionStatement[9650-9744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13364-13944]:Block[9825-10405]"
    }, {
      "left" : "this.context = new AnnotationConfigEmbeddedWebApplicationContext();",
      "right" : "this.context = new AnnotationConfigEmbeddedWebApplicationContext();",
      "info" : "ExpressionStatement[13368-13435]:ExpressionStatement[9829-9896]"
    }, {
      "left" : "EnvironmentTestUtils.addEnvironment(this.context,\n\t\t\t\t\"spring.mvc.ignore-default-model-on-redirect:false\");",
      "right" : "EnvironmentTestUtils.addEnvironment(this.context,\n\t\t\t\t\"spring.mvc.ignore-default-model-on-redirect:false\");",
      "info" : "ExpressionStatement[13438-13545]:ExpressionStatement[9899-10006]"
    }, {
      "left" : "this.context.register(Config.class, WebMvcAutoConfiguration.class,\n\t\t\t\tHttpMessageConvertersAutoConfiguration.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);",
      "right" : "this.context.register(Config.class, WebMvcAutoConfiguration.class,\n\t\t\t\tHttpMessageConvertersAutoConfiguration.class,\n\t\t\t\tPropertyPlaceholderAutoConfiguration.class);",
      "info" : "ExpressionStatement[13548-13713]:ExpressionStatement[10009-10174]"
    }, {
      "left" : "this.context.refresh();",
      "right" : "this.context.refresh();",
      "info" : "ExpressionStatement[13716-13739]:ExpressionStatement[10177-10200]"
    }, {
      "left" : "RequestMappingHandlerAdapter adapter = this.context\n\t\t\t\t.getBean(RequestMappingHandlerAdapter.class);",
      "right" : "RequestMappingHandlerAdapter adapter = this.context\n\t\t\t\t.getBean(RequestMappingHandlerAdapter.class);",
      "info" : "VariableDeclarationStatement[13742-13843]:VariableDeclarationStatement[10203-10304]"
    }, {
      "left" : "assertEquals(false,\n\t\t\t\tReflectionTestUtils.getField(adapter, \"ignoreDefaultModelOnRedirect\"));",
      "right" : "assertEquals(false,\n\t\t\t\tReflectionTestUtils.getField(adapter, \"ignoreDefaultModelOnRedirect\"));",
      "info" : "ExpressionStatement[13846-13941]:ExpressionStatement[10307-10402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14004-14388]:Block[10465-10589]"
    }, {
      "left" : "assertThat(this.context.getBean(\"viewResolver\"), instanceOf(MyViewResolver.class));",
      "right" : "assertThat(this.context.getBean(\"viewResolver\"), instanceOf(MyViewResolver.class));",
      "info" : "ExpressionStatement[14302-14385]:ExpressionStatement[10503-10586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14466-15023]:Block[10667-10964]"
    }, {
      "left" : "Map<String, ContentNegotiatingViewResolver> beans = this.context\n\t\t\t\t.getBeansOfType(ContentNegotiatingViewResolver.class);",
      "right" : "Map<String, ContentNegotiatingViewResolver> beans = this.context\n\t\t\t\t.getBeansOfType(ContentNegotiatingViewResolver.class);",
      "info" : "VariableDeclarationStatement[14782-14905]:VariableDeclarationStatement[10723-10846]"
    }, {
      "left" : "assertThat(beans.size(), equalTo(1));",
      "right" : "assertThat(beans.size(), equalTo(1));",
      "info" : "ExpressionStatement[14908-14945]:ExpressionStatement[10849-10886]"
    }, {
      "left" : "assertThat(beans.keySet().iterator().next(), equalTo(\"myViewResolver\"));",
      "right" : "assertThat(beans.keySet().iterator().next(), equalTo(\"myViewResolver\"));",
      "info" : "ExpressionStatement[14948-15020]:ExpressionStatement[10889-10961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15092-15786]:Block[11033-11473]"
    }, {
      "left" : "assertThat(\n\t\t\t\tthis.context.getBeansOfType(ResourceHttpRequestHandler.class).get(\n\t\t\t\t\t\t\"faviconRequestHandler\"), is(notNullValue()));",
      "right" : "assertThat(\n\t\t\t\tthis.context.getBeansOfType(ResourceHttpRequestHandler.class).get(\n\t\t\t\t\t\t\"faviconRequestHandler\"), is(notNullValue()));",
      "info" : "ExpressionStatement[15360-15495]:ExpressionStatement[11047-11182]"
    }, {
      "left" : "assertThat(\n\t\t\t\tthis.context.getBeansOfType(SimpleUrlHandlerMapping.class).get(\n\t\t\t\t\t\t\"faviconHandlerMapping\"), is(notNullValue()));",
      "right" : "assertThat(\n\t\t\t\tthis.context.getBeansOfType(SimpleUrlHandlerMapping.class).get(\n\t\t\t\t\t\t\"faviconHandlerMapping\"), is(notNullValue()));",
      "info" : "ExpressionStatement[15498-15630]:ExpressionStatement[11185-11317]"
    }, {
      "left" : "Map<String, List<Resource>> mappingLocations = getFaviconMappingLocations();",
      "right" : "Map<String, List<Resource>> mappingLocations = getFaviconMappingLocations();",
      "info" : "VariableDeclarationStatement[15633-15709]:VariableDeclarationStatement[11320-11396]"
    }, {
      "left" : "assertThat(mappingLocations.get(\"/**/favicon.ico\").size(), equalTo(5));",
      "right" : "assertThat(mappingLocations.get(\"/**/favicon.ico\").size(), equalTo(5));",
      "info" : "ExpressionStatement[15712-15783]:ExpressionStatement[11399-11470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15863-16491]:Block[11550-11865]"
    }, {
      "left" : "this.context.refresh();",
      "right" : "this.context.refresh();",
      "info" : "ExpressionStatement[16198-16221]:ExpressionStatement[13084-13107]"
    }, {
      "left" : "assertThat(\n\t\t\t\tthis.context.getBeansOfType(ResourceHttpRequestHandler.class).get(\n\t\t\t\t\t\t\"faviconRequestHandler\"), is(nullValue()));",
      "right" : "assertThat(\n\t\t\t\tthis.context.getBeansOfType(ResourceHttpRequestHandler.class).get(\n\t\t\t\t\t\t\"faviconRequestHandler\"), is(nullValue()));",
      "info" : "ExpressionStatement[16224-16356]:ExpressionStatement[11598-11730]"
    }, {
      "left" : "assertThat(\n\t\t\t\tthis.context.getBeansOfType(SimpleUrlHandlerMapping.class).get(\n\t\t\t\t\t\t\"faviconHandlerMapping\"), is(nullValue()));",
      "right" : "assertThat(\n\t\t\t\tthis.context.getBeansOfType(SimpleUrlHandlerMapping.class).get(\n\t\t\t\t\t\t\"faviconHandlerMapping\"), is(nullValue()));",
      "info" : "ExpressionStatement[16359-16488]:ExpressionStatement[11733-11862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16559-17007]:Block[11933-12127]"
    }, {
      "left" : "this.context = new AnnotationConfigEmbeddedWebApplicationContext();",
      "right" : "this.context = new AnnotationConfigEmbeddedWebApplicationContext();",
      "info" : "ExpressionStatement[16563-16630]:ExpressionStatement[12564-12631]"
    }, {
      "left" : "RequestMappingHandlerAdapter adapter = this.context\n\t\t\t\t.getBean(RequestMappingHandlerAdapter.class);",
      "right" : "RequestMappingHandlerAdapter adapter = this.context\n\t\t\t\t.getBean(RequestMappingHandlerAdapter.class);",
      "info" : "VariableDeclarationStatement[16827-16928]:VariableDeclarationStatement[11947-12048]"
    }, {
      "left" : "assertNull(ReflectionTestUtils.getField(adapter, \"asyncRequestTimeout\"));",
      "right" : "assertNull(ReflectionTestUtils.getField(adapter, \"asyncRequestTimeout\"));",
      "info" : "ExpressionStatement[16931-17004]:ExpressionStatement[12051-12124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17074-17659]:Block[12194-12466]"
    }, {
      "left" : "EnvironmentTestUtils.addEnvironment(this.context,\n\t\t\t\t\"spring.mvc.async.request-timeout:123456\");",
      "right" : "EnvironmentTestUtils.addEnvironment(this.context, environment);",
      "info" : "ExpressionStatement[17148-17245]:ExpressionStatement[12634-12697]"
    }, {
      "left" : "RequestMappingHandlerAdapter adapter = this.context\n\t\t\t\t.getBean(RequestMappingHandlerAdapter.class);",
      "right" : "RequestMappingHandlerAdapter adapter = this.context\n\t\t\t\t.getBean(RequestMappingHandlerAdapter.class);",
      "info" : "VariableDeclarationStatement[17442-17543]:VariableDeclarationStatement[12249-12350]"
    }, {
      "left" : "Object actual = ReflectionTestUtils.getField(adapter, \"asyncRequestTimeout\");",
      "right" : "Object actual = ReflectionTestUtils.getField(adapter, \"asyncRequestTimeout\");",
      "info" : "VariableDeclarationStatement[17546-17623]:VariableDeclarationStatement[12353-12430]"
    }, {
      "left" : "assertEquals(123456L, actual);",
      "right" : "assertEquals(123456L, actual);",
      "info" : "ExpressionStatement[17626-17656]:ExpressionStatement[12433-12463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17748-18035]:Block[13275-13562]"
    }, {
      "left" : "return new AbstractView() {\n\n\t\t\t\t@Override\n\t\t\t\tprotected void renderMergedOutputModel(Map<String, Object> model,\n\t\t\t\t\t\tHttpServletRequest request, HttpServletResponse response)\n\t\t\t\t\t\tthrows Exception {\n\t\t\t\t\tresponse.getOutputStream().write(\"Hello World\".getBytes());\n\t\t\t\t}\n\t\t\t};",
      "right" : "return new AbstractView() {\n\n\t\t\t\t@Override\n\t\t\t\tprotected void renderMergedOutputModel(Map<String, Object> model,\n\t\t\t\t\t\tHttpServletRequest request, HttpServletResponse response)\n\t\t\t\t\t\tthrows Exception {\n\t\t\t\t\tresponse.getOutputStream().write(\"Hello World\".getBytes());\n\t\t\t\t}\n\t\t\t};",
      "info" : "ReturnStatement[17753-18031]:ReturnStatement[13280-13558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17953-18025]:Block[13480-13552]"
    }, {
      "left" : "response.getOutputStream().write(\"Hello World\".getBytes());",
      "right" : "response.getOutputStream().write(\"Hello World\".getBytes());",
      "info" : "ExpressionStatement[17960-18019]:ExpressionStatement[13487-13546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18204-18302]:Block[13731-13829]"
    }, {
      "left" : "registry.addResourceHandler(\"/webjars/**\").addResourceLocations(\n\t\t\t\t\t\"classpath:/foo/\");",
      "right" : "registry.addResourceHandler(\"/webjars/**\").addResourceLocations(\n\t\t\t\t\t\"classpath:/foo/\");",
      "info" : "ExpressionStatement[18209-18298]:ExpressionStatement[13736-13825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18476-18560]:Block[14003-14087]"
    }, {
      "left" : "registry.addResourceHandler(\"/**\").addResourceLocations(\"classpath:/foo/\");",
      "right" : "registry.addResourceHandler(\"/**\").addResourceLocations(\"classpath:/foo/\");",
      "info" : "ExpressionStatement[18481-18556]:ExpressionStatement[14008-14083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18681-18714]:Block[14208-14241]"
    }, {
      "left" : "return containerFactory;",
      "right" : "return containerFactory;",
      "info" : "ReturnStatement[18686-18710]:ReturnStatement[14213-14237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18839-18913]:Block[14366-14440]"
    }, {
      "left" : "return new EmbeddedServletContainerCustomizerBeanPostProcessor();",
      "right" : "return new EmbeddedServletContainerCustomizerBeanPostProcessor();",
      "info" : "ReturnStatement[18844-18909]:ReturnStatement[14371-14436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19023-19060]:Block[14550-14587]"
    }, {
      "left" : "return new MyViewResolver();",
      "right" : "return new MyViewResolver();",
      "info" : "ReturnStatement[19028-19056]:ReturnStatement[14555-14583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19208-19261]:Block[14735-14788]"
    }, {
      "left" : "return new ContentNegotiatingViewResolver();",
      "right" : "return new ContentNegotiatingViewResolver();",
      "info" : "ReturnStatement[19213-19257]:ReturnStatement[14740-14784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19422-19443]:Block[14949-14970]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[19427-19439]:ReturnStatement[14954-14966]"
    } ]
  },
  "interFileMappings" : { }
}