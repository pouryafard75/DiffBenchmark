{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Compiler",
      "right" : "Compiler",
      "info" : "TypeDeclaration[2156-59340]:TypeDeclaration[2156-59371]"
    }, {
      "left" : "static final DiagnosticType MODULE_DEPENDENCY_ERROR =\n      DiagnosticType.error(\"JSC_MODULE_DEPENDENCY_ERROR\",\n          \"Bad dependency: {0} -> {1}. \"\n              + \"Modules must be listed in dependency order.\");",
      "right" : "static final DiagnosticType MODULE_DEPENDENCY_ERROR =\n      DiagnosticType.error(\"JSC_MODULE_DEPENDENCY_ERROR\",\n          \"Bad dependency: {0} -> {1}. \"\n              + \"Modules must be listed in dependency order.\");",
      "info" : "FieldDeclaration[2702-2918]:FieldDeclaration[2702-2918]"
    }, {
      "left" : "static final DiagnosticType MISSING_ENTRY_ERROR = DiagnosticType.error(\n      \"JSC_MISSING_ENTRY_ERROR\",\n      \"required entry point \\\"{0}\\\" never provided\");",
      "right" : "static final DiagnosticType MISSING_ENTRY_ERROR = DiagnosticType.error(\n      \"JSC_MISSING_ENTRY_ERROR\",\n      \"required entry point \\\"{0}\\\" never provided\");",
      "info" : "FieldDeclaration[2922-3080]:FieldDeclaration[2922-3080]"
    }, {
      "left" : "CompilerOptions options = null;",
      "right" : "CompilerOptions options = null;",
      "info" : "FieldDeclaration[3084-3115]:FieldDeclaration[3084-3115]"
    }, {
      "left" : "private PassConfig passes = null;",
      "right" : "private PassConfig passes = null;",
      "info" : "FieldDeclaration[3119-3152]:FieldDeclaration[3119-3152]"
    }, {
      "left" : "private List<CompilerInput> externs;",
      "right" : "private List<CompilerInput> externs;",
      "info" : "FieldDeclaration[3180-3216]:FieldDeclaration[3180-3216]"
    }, {
      "left" : "private List<JSModule> modules;",
      "right" : "private List<JSModule> modules;",
      "info" : "FieldDeclaration[3247-3278]:FieldDeclaration[3247-3278]"
    }, {
      "left" : "private JSModuleGraph moduleGraph;",
      "right" : "private JSModuleGraph moduleGraph;",
      "info" : "FieldDeclaration[3432-3466]:FieldDeclaration[3432-3466]"
    }, {
      "left" : "private List<CompilerInput> inputs;",
      "right" : "private List<CompilerInput> inputs;",
      "info" : "FieldDeclaration[3496-3531]:FieldDeclaration[3496-3531]"
    }, {
      "left" : "private ErrorManager errorManager;",
      "right" : "private ErrorManager errorManager;",
      "info" : "FieldDeclaration[3593-3627]:FieldDeclaration[3593-3627]"
    }, {
      "left" : "private WarningsGuard warningsGuard;",
      "right" : "private WarningsGuard warningsGuard;",
      "info" : "FieldDeclaration[3675-3711]:FieldDeclaration[3675-3711]"
    }, {
      "left" : "Node externsRoot;",
      "right" : "Node externsRoot;",
      "info" : "FieldDeclaration[3742-3759]:FieldDeclaration[3742-3759]"
    }, {
      "left" : "Node jsRoot;",
      "right" : "Node jsRoot;",
      "info" : "FieldDeclaration[3762-3774]:FieldDeclaration[3762-3774]"
    }, {
      "left" : "Node externAndJsRoot;",
      "right" : "Node externAndJsRoot;",
      "info" : "FieldDeclaration[3777-3798]:FieldDeclaration[3777-3798]"
    }, {
      "left" : "private Map<String, CompilerInput> inputsByName;",
      "right" : "private Map<String, CompilerInput> inputsByName;",
      "info" : "FieldDeclaration[3802-3850]:FieldDeclaration[3802-3850]"
    }, {
      "left" : "private SourceMap sourceMap;",
      "right" : "private SourceMap sourceMap;",
      "info" : "FieldDeclaration[3854-3911]:FieldDeclaration[3854-3911]"
    }, {
      "left" : "private String externExports = null;",
      "right" : "private String externExports = null;",
      "info" : "FieldDeclaration[3915-3999]:FieldDeclaration[3915-3999]"
    }, {
      "left" : "private int uniqueNameId = 0;",
      "right" : "private int uniqueNameId = 0;",
      "info" : "FieldDeclaration[4003-4123]:FieldDeclaration[4003-4123]"
    }, {
      "left" : "private boolean useThreads = true;",
      "right" : "private boolean useThreads = true;",
      "info" : "FieldDeclaration[4127-4194]:FieldDeclaration[4127-4194]"
    }, {
      "left" : "private boolean hasRegExpGlobalReferences = true;",
      "right" : "private boolean hasRegExpGlobalReferences = true;",
      "info" : "FieldDeclaration[4198-4348]:FieldDeclaration[4198-4348]"
    }, {
      "left" : "private FunctionInformationMap functionInformationMap;",
      "right" : "private FunctionInformationMap functionInformationMap;",
      "info" : "FieldDeclaration[4352-4444]:FieldDeclaration[4352-4444]"
    }, {
      "left" : "private final StringBuilder debugLog = new StringBuilder();",
      "right" : "private final StringBuilder debugLog = new StringBuilder();",
      "info" : "FieldDeclaration[4448-4538]:FieldDeclaration[4448-4538]"
    }, {
      "left" : "CodingConvention defaultCodingConvention = new ClosureCodingConvention();",
      "right" : "CodingConvention defaultCodingConvention = new ClosureCodingConvention();",
      "info" : "FieldDeclaration[4542-4668]:FieldDeclaration[4542-4668]"
    }, {
      "left" : "private JSTypeRegistry typeRegistry;",
      "right" : "private JSTypeRegistry typeRegistry;",
      "info" : "FieldDeclaration[4672-4708]:FieldDeclaration[4672-4708]"
    }, {
      "left" : "private Config parserConfig = null;",
      "right" : "private Config parserConfig = null;",
      "info" : "FieldDeclaration[4711-4746]:FieldDeclaration[4711-4746]"
    }, {
      "left" : "private ReverseAbstractInterpreter abstractInterpreter;",
      "right" : "private ReverseAbstractInterpreter abstractInterpreter;",
      "info" : "FieldDeclaration[4750-4805]:FieldDeclaration[4750-4805]"
    }, {
      "left" : "private TypeValidator typeValidator;",
      "right" : "private TypeValidator typeValidator;",
      "info" : "FieldDeclaration[4808-4844]:FieldDeclaration[4808-4844]"
    }, {
      "left" : "public PerformanceTracker tracker;",
      "right" : "public PerformanceTracker tracker;",
      "info" : "FieldDeclaration[4848-4882]:FieldDeclaration[4848-4882]"
    }, {
      "left" : "private final com.google.javascript.rhino.ErrorReporter oldErrorReporter =\n      RhinoErrorReporter.forOldRhino(this);",
      "right" : "private final com.google.javascript.rhino.ErrorReporter oldErrorReporter =\n      RhinoErrorReporter.forOldRhino(this);",
      "info" : "FieldDeclaration[4965-5083]:FieldDeclaration[4965-5083]"
    }, {
      "left" : "private final ErrorReporter defaultErrorReporter =\n      RhinoErrorReporter.forNewRhino(this);",
      "right" : "private final ErrorReporter defaultErrorReporter =\n      RhinoErrorReporter.forNewRhino(this);",
      "info" : "FieldDeclaration[5161-5255]:FieldDeclaration[5161-5255]"
    }, {
      "left" : "public static final DiagnosticType OPTIMIZE_LOOP_ERROR = DiagnosticType.error(\n      \"JSC_OPTIMIZE_LOOP_ERROR\",\n      \"Exceeded max number of optimization iterations: {0}\");",
      "right" : "public static final DiagnosticType OPTIMIZE_LOOP_ERROR = DiagnosticType.error(\n      \"JSC_OPTIMIZE_LOOP_ERROR\",\n      \"Exceeded max number of optimization iterations: {0}\");",
      "info" : "FieldDeclaration[5259-5483]:FieldDeclaration[5259-5483]"
    }, {
      "left" : "public static final DiagnosticType MOTION_ITERATIONS_ERROR =\n      DiagnosticType.error(\"JSC_OPTIMIZE_LOOP_ERROR\",\n          \"Exceeded max number of code motion iterations: {0}\");",
      "right" : "public static final DiagnosticType MOTION_ITERATIONS_ERROR =\n      DiagnosticType.error(\"JSC_OPTIMIZE_LOOP_ERROR\",\n          \"Exceeded max number of code motion iterations: {0}\");",
      "info" : "FieldDeclaration[5486-5665]:FieldDeclaration[5486-5665]"
    }, {
      "left" : "private static final long COMPILER_STACK_SIZE = 1048576L;",
      "right" : "private static final long COMPILER_STACK_SIZE = 1048576L;",
      "info" : "FieldDeclaration[5669-5726]:FieldDeclaration[5669-5726]"
    }, {
      "left" : "private static final Logger logger =\n      Logger.getLogger(\"com.google.javascript.jscomp\");",
      "right" : "private static final Logger logger =\n      Logger.getLogger(\"com.google.javascript.jscomp\");",
      "info" : "FieldDeclaration[5731-6006]:FieldDeclaration[5731-6006]"
    }, {
      "left" : "private final PrintStream outStream;",
      "right" : "private final PrintStream outStream;",
      "info" : "FieldDeclaration[6010-6046]:FieldDeclaration[6010-6046]"
    }, {
      "left" : "private GlobalVarReferenceMap globalRefMap = null;",
      "right" : "private GlobalVarReferenceMap globalRefMap = null;",
      "info" : "FieldDeclaration[6050-6100]:FieldDeclaration[6050-6100]"
    }, {
      "left" : "public Compiler()",
      "right" : "public Compiler()",
      "info" : "MethodDeclaration[6104-6241]:MethodDeclaration[6104-6241]"
    }, {
      "left" : "public Compiler(PrintStream stream)",
      "right" : "public Compiler(PrintStream stream)",
      "info" : "MethodDeclaration[6245-6441]:MethodDeclaration[6245-6441]"
    }, {
      "left" : "public Compiler(ErrorManager errorManager)",
      "right" : "public Compiler(ErrorManager errorManager)",
      "info" : "MethodDeclaration[6445-6610]:MethodDeclaration[6445-6610]"
    }, {
      "left" : "public void setErrorManager(ErrorManager errorManager)",
      "right" : "public void setErrorManager(ErrorManager errorManager)",
      "info" : "MethodDeclaration[6614-6919]:MethodDeclaration[6614-6919]"
    }, {
      "left" : "private MessageFormatter createMessageFormatter()",
      "right" : "private MessageFormatter createMessageFormatter()",
      "info" : "MethodDeclaration[6923-7212]:MethodDeclaration[6923-7212]"
    }, {
      "left" : "public void initOptions(CompilerOptions options)",
      "right" : "public void initOptions(CompilerOptions options)",
      "info" : "MethodDeclaration[7216-9448]:MethodDeclaration[7216-9479]"
    }, {
      "left" : "public void init(JSSourceFile[] externs, JSSourceFile[] inputs,\n      CompilerOptions options)",
      "right" : "public void init(JSSourceFile[] externs, JSSourceFile[] inputs,\n      CompilerOptions options)",
      "info" : "MethodDeclaration[9452-9738]:MethodDeclaration[9483-9769]"
    }, {
      "left" : "public void init(List<JSSourceFile> externs, List<JSSourceFile> inputs,\n      CompilerOptions options)",
      "right" : "public void init(List<JSSourceFile> externs, List<JSSourceFile> inputs,\n      CompilerOptions options)",
      "info" : "MethodDeclaration[9742-10110]:MethodDeclaration[9773-10141]"
    }, {
      "left" : "public void init(JSSourceFile[] externs, JSModule[] modules,\n      CompilerOptions options)",
      "right" : "public void init(JSSourceFile[] externs, JSModule[] modules,\n      CompilerOptions options)",
      "info" : "MethodDeclaration[10114-10437]:MethodDeclaration[10145-10468]"
    }, {
      "left" : "public void initModules(\n      List<JSSourceFile> externs, List<JSModule> modules,\n      CompilerOptions options)",
      "right" : "public void initModules(\n      List<JSSourceFile> externs, List<JSModule> modules,\n      CompilerOptions options)",
      "info" : "MethodDeclaration[10441-11519]:MethodDeclaration[10472-11550]"
    }, {
      "left" : "private void initBasedOnOptions()",
      "right" : "private void initBasedOnOptions()",
      "info" : "MethodDeclaration[11523-11797]:MethodDeclaration[11554-11828]"
    }, {
      "left" : "private List<CompilerInput> makeCompilerInput(\n      List<JSSourceFile> files, boolean isExtern)",
      "right" : "private List<CompilerInput> makeCompilerInput(\n      List<JSSourceFile> files, boolean isExtern)",
      "info" : "MethodDeclaration[11801-12074]:MethodDeclaration[11832-12105]"
    }, {
      "left" : "private static final DiagnosticType EMPTY_MODULE_LIST_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_MODULE_LIST_ERROR\",\n          \"At least one module must be provided\");",
      "right" : "private static final DiagnosticType EMPTY_MODULE_LIST_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_MODULE_LIST_ERROR\",\n          \"At least one module must be provided\");",
      "info" : "FieldDeclaration[12078-12248]:FieldDeclaration[12109-12279]"
    }, {
      "left" : "private static final DiagnosticType EMPTY_ROOT_MODULE_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_ROOT_MODULE_ERROR\",\n          \"Root module '{0}' must contain at least one source code input\");",
      "right" : "private static final DiagnosticType EMPTY_ROOT_MODULE_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_ROOT_MODULE_ERROR\",\n          \"Root module '{0}' must contain at least one source code input\");",
      "info" : "FieldDeclaration[12252-12447]:FieldDeclaration[12283-12478]"
    }, {
      "left" : "private void checkFirstModule(List<JSModule> modules)",
      "right" : "private void checkFirstModule(List<JSModule> modules)",
      "info" : "MethodDeclaration[12451-12970]:MethodDeclaration[12482-13001]"
    }, {
      "left" : "private static void fillEmptyModules(List<JSModule> modules)",
      "right" : "private static void fillEmptyModules(List<JSModule> modules)",
      "info" : "MethodDeclaration[12974-13323]:MethodDeclaration[13005-13354]"
    }, {
      "left" : "public void rebuildInputsFromModules()",
      "right" : "public void rebuildInputsFromModules()",
      "info" : "MethodDeclaration[13327-13687]:MethodDeclaration[13358-13718]"
    }, {
      "left" : "private static List<CompilerInput> getAllInputsFromModules(\n      List<JSModule> modules)",
      "right" : "private static List<CompilerInput> getAllInputsFromModules(\n      List<JSModule> modules)",
      "info" : "MethodDeclaration[13691-14420]:MethodDeclaration[13722-14451]"
    }, {
      "left" : "static final DiagnosticType DUPLICATE_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_INPUT\", \"Duplicate input: {0}\");",
      "right" : "static final DiagnosticType DUPLICATE_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_INPUT\", \"Duplicate input: {0}\");",
      "info" : "FieldDeclaration[14424-14544]:FieldDeclaration[14455-14575]"
    }, {
      "left" : "static final DiagnosticType DUPLICATE_EXTERN_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_EXTERN_INPUT\",\n          \"Duplicate extern input: {0}\");",
      "right" : "static final DiagnosticType DUPLICATE_EXTERN_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_EXTERN_INPUT\",\n          \"Duplicate extern input: {0}\");",
      "info" : "FieldDeclaration[14547-14698]:FieldDeclaration[14578-14729]"
    }, {
      "left" : "void initInputsByNameMap()",
      "right" : "void initInputsByNameMap()",
      "info" : "MethodDeclaration[14702-15399]:MethodDeclaration[14733-15430]"
    }, {
      "left" : "public Result compile(\n      JSSourceFile extern, JSSourceFile input, CompilerOptions options)",
      "right" : "public Result compile(\n      JSSourceFile extern, JSSourceFile input, CompilerOptions options)",
      "info" : "MethodDeclaration[15403-15571]:MethodDeclaration[15434-15602]"
    }, {
      "left" : "public Result compile(\n      JSSourceFile extern, JSSourceFile[] input, CompilerOptions options)",
      "right" : "public Result compile(\n      JSSourceFile extern, JSSourceFile[] input, CompilerOptions options)",
      "info" : "MethodDeclaration[15575-15745]:MethodDeclaration[15606-15776]"
    }, {
      "left" : "public Result compile(\n      JSSourceFile extern, JSModule[] modules, CompilerOptions options)",
      "right" : "public Result compile(\n      JSSourceFile extern, JSModule[] modules, CompilerOptions options)",
      "info" : "MethodDeclaration[15749-15919]:MethodDeclaration[15780-15950]"
    }, {
      "left" : "public Result compile(JSSourceFile[] externs,\n                        JSSourceFile[] inputs,\n                        CompilerOptions options)",
      "right" : "public Result compile(JSSourceFile[] externs,\n                        JSSourceFile[] inputs,\n                        CompilerOptions options)",
      "info" : "MethodDeclaration[15923-16244]:MethodDeclaration[15954-16275]"
    }, {
      "left" : "public Result compile(List<JSSourceFile> externs,\n      List<JSSourceFile> inputs, CompilerOptions options)",
      "right" : "public Result compile(List<JSSourceFile> externs,\n      List<JSSourceFile> inputs, CompilerOptions options)",
      "info" : "MethodDeclaration[16248-16783]:MethodDeclaration[16279-16814]"
    }, {
      "left" : "public Result compile(JSSourceFile[] externs,\n                        JSModule[] modules,\n                        CompilerOptions options)",
      "right" : "public Result compile(JSSourceFile[] externs,\n                        JSModule[] modules,\n                        CompilerOptions options)",
      "info" : "MethodDeclaration[16787-17110]:MethodDeclaration[16818-17141]"
    }, {
      "left" : "public Result compileModules(List<JSSourceFile> externs,\n      List<JSModule> modules, CompilerOptions options)",
      "right" : "public Result compileModules(List<JSSourceFile> externs,\n      List<JSModule> modules, CompilerOptions options)",
      "info" : "MethodDeclaration[17114-17662]:MethodDeclaration[17145-17693]"
    }, {
      "left" : "private Result compile()",
      "right" : "private Result compile()",
      "info" : "MethodDeclaration[17666-17869]:MethodDeclaration[17697-17900]"
    }, {
      "left" : "public Result call() throws Exception",
      "right" : "public Result call() throws Exception",
      "info" : "MethodDeclaration[17755-17857]:MethodDeclaration[17786-17888]"
    }, {
      "left" : "public void disableThreads()",
      "right" : "public void disableThreads()",
      "info" : "MethodDeclaration[17873-18036]:MethodDeclaration[17904-18067]"
    }, {
      "left" : "private <T> T runInCompilerThread(final Callable<T> callable)",
      "right" : "private <T> T runInCompilerThread(final Callable<T> callable)",
      "info" : "MethodDeclaration[18040-18176]:MethodDeclaration[18071-18207]"
    }, {
      "left" : "static <T> T runCallableWithLargeStack(final Callable<T> callable)",
      "right" : "static <T> T runCallableWithLargeStack(final Callable<T> callable)",
      "info" : "MethodDeclaration[18180-18299]:MethodDeclaration[18211-18330]"
    }, {
      "left" : "static <T> T runCallable(\n      final Callable<T> callable, boolean useLargeStackThread, boolean trace)",
      "right" : "static <T> T runCallable(\n      final Callable<T> callable, boolean useLargeStackThread, boolean trace)",
      "info" : "MethodDeclaration[18303-19882]:MethodDeclaration[18334-19913]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[19009-19366]:MethodDeclaration[19040-19397]"
    }, {
      "left" : "private void compileInternal()",
      "right" : "private void compileInternal()",
      "info" : "MethodDeclaration[19886-20714]:MethodDeclaration[19917-20745]"
    }, {
      "left" : "public void parse()",
      "right" : "public void parse()",
      "info" : "MethodDeclaration[20718-20762]:MethodDeclaration[20749-20793]"
    }, {
      "left" : "PassConfig getPassConfig()",
      "right" : "PassConfig getPassConfig()",
      "info" : "MethodDeclaration[20766-20892]:MethodDeclaration[20797-20923]"
    }, {
      "left" : "PassConfig createPassConfigInternal()",
      "right" : "PassConfig createPassConfigInternal()",
      "info" : "MethodDeclaration[20896-21091]:MethodDeclaration[20927-21122]"
    }, {
      "left" : "public void setPassConfig(PassConfig passes)",
      "right" : "public void setPassConfig(PassConfig passes)",
      "info" : "MethodDeclaration[21095-21839]:MethodDeclaration[21126-21870]"
    }, {
      "left" : "boolean precheck()",
      "right" : "boolean precheck()",
      "info" : "MethodDeclaration[21843-22079]:MethodDeclaration[21874-22110]"
    }, {
      "left" : "public void check()",
      "right" : "public void check()",
      "info" : "MethodDeclaration[22083-23159]:MethodDeclaration[22114-23190]"
    }, {
      "left" : "private void externExports()",
      "right" : "private void externExports()",
      "info" : "MethodDeclaration[23163-23425]:MethodDeclaration[23194-23456]"
    }, {
      "left" : "void process(CompilerPass p)",
      "right" : "void process(CompilerPass p)",
      "info" : "MethodDeclaration[23429-23511]:MethodDeclaration[23460-23542]"
    }, {
      "left" : "private final PassFactory sanityCheck =\n      new PassFactory(\"sanityCheck\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new SanityCheck(compiler);\n    }\n  };",
      "right" : "private final PassFactory sanityCheck =\n      new PassFactory(\"sanityCheck\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new SanityCheck(compiler);\n    }\n  };",
      "info" : "FieldDeclaration[23515-23736]:FieldDeclaration[23546-23767]"
    }, {
      "left" : "protected CompilerPass createInternal(AbstractCompiler compiler)",
      "right" : "protected CompilerPass createInternal(AbstractCompiler compiler)",
      "info" : "MethodDeclaration[23605-23731]:MethodDeclaration[23636-23762]"
    }, {
      "left" : "private void maybeSanityCheck()",
      "right" : "private void maybeSanityCheck()",
      "info" : "MethodDeclaration[23740-23856]:MethodDeclaration[23771-23887]"
    }, {
      "left" : "private void runSanityCheck()",
      "right" : "private void runSanityCheck()",
      "info" : "MethodDeclaration[23860-23954]:MethodDeclaration[23891-23985]"
    }, {
      "left" : "void removeTryCatchFinally()",
      "right" : "void removeTryCatchFinally()",
      "info" : "MethodDeclaration[23958-24233]:MethodDeclaration[23989-24264]"
    }, {
      "left" : "void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n      Set<String> stripTypePrefixes, Set<String> stripNamePrefixes)",
      "right" : "void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n      Set<String> stripTypePrefixes, Set<String> stripNamePrefixes)",
      "info" : "MethodDeclaration[24237-24818]:MethodDeclaration[24268-24849]"
    }, {
      "left" : "private void runCustomPasses(CustomPassExecutionTime executionTime)",
      "right" : "private void runCustomPasses(CustomPassExecutionTime executionTime)",
      "info" : "MethodDeclaration[24822-25258]:MethodDeclaration[24853-25289]"
    }, {
      "left" : "private Tracer currentTracer = null;",
      "right" : "private Tracer currentTracer = null;",
      "info" : "FieldDeclaration[25262-25298]:FieldDeclaration[25293-25329]"
    }, {
      "left" : "private String currentPassName = null;",
      "right" : "private String currentPassName = null;",
      "info" : "FieldDeclaration[25301-25339]:FieldDeclaration[25332-25370]"
    }, {
      "left" : "void startPass(String passName)",
      "right" : "void startPass(String passName)",
      "info" : "MethodDeclaration[25343-25554]:MethodDeclaration[25374-25585]"
    }, {
      "left" : "void endPass()",
      "right" : "void endPass()",
      "info" : "MethodDeclaration[25558-25901]:MethodDeclaration[25589-25932]"
    }, {
      "left" : "Tracer newTracer(String passName)",
      "right" : "Tracer newTracer(String passName)",
      "info" : "MethodDeclaration[25905-26238]:MethodDeclaration[25936-26269]"
    }, {
      "left" : "void stopTracer(Tracer t, String passName)",
      "right" : "void stopTracer(Tracer t, String passName)",
      "info" : "MethodDeclaration[26242-26405]:MethodDeclaration[26273-26436]"
    }, {
      "left" : "public Result getResult()",
      "right" : "public Result getResult()",
      "info" : "MethodDeclaration[26409-26836]:MethodDeclaration[26440-26867]"
    }, {
      "left" : "public JSError[] getMessages()",
      "right" : "public JSError[] getMessages()",
      "info" : "MethodDeclaration[26840-26980]:MethodDeclaration[26871-27011]"
    }, {
      "left" : "public JSError[] getErrors()",
      "right" : "public JSError[] getErrors()",
      "info" : "MethodDeclaration[26984-27114]:MethodDeclaration[27015-27145]"
    }, {
      "left" : "public JSError[] getWarnings()",
      "right" : "public JSError[] getWarnings()",
      "info" : "MethodDeclaration[27118-27254]:MethodDeclaration[27149-27285]"
    }, {
      "left" : "public Node getRoot()",
      "right" : "public Node getRoot()",
      "info" : "MethodDeclaration[27258-27325]:MethodDeclaration[27289-27356]"
    }, {
      "left" : "private int nextUniqueNameId()",
      "right" : "private int nextUniqueNameId()",
      "info" : "MethodDeclaration[27329-27451]:MethodDeclaration[27360-27482]"
    }, {
      "left" : "void resetUniqueNameId()",
      "right" : "void resetUniqueNameId()",
      "info" : "MethodDeclaration[27455-27579]:MethodDeclaration[27486-27610]"
    }, {
      "left" : "Supplier<String> getUniqueNameIdSupplier()",
      "right" : "Supplier<String> getUniqueNameIdSupplier()",
      "info" : "MethodDeclaration[27583-27810]:MethodDeclaration[27614-27841]"
    }, {
      "left" : "public String get()",
      "right" : "public String get()",
      "info" : "MethodDeclaration[27714-27799]:MethodDeclaration[27745-27830]"
    }, {
      "left" : "boolean areNodesEqualForInlining(Node n1, Node n2)",
      "right" : "boolean areNodesEqualForInlining(Node n1, Node n2)",
      "info" : "MethodDeclaration[27814-28177]:MethodDeclaration[27845-28208]"
    }, {
      "left" : "public CompilerInput getInput(String name)",
      "right" : "public CompilerInput getInput(String name)",
      "info" : "MethodDeclaration[28488-28583]:MethodDeclaration[28519-28614]"
    }, {
      "left" : "protected void removeInput(String name)",
      "right" : "protected void removeInput(String name)",
      "info" : "MethodDeclaration[28587-28953]:MethodDeclaration[28618-28984]"
    }, {
      "left" : "public CompilerInput newExternInput(String name)",
      "right" : "public CompilerInput newExternInput(String name)",
      "info" : "MethodDeclaration[28957-29364]:MethodDeclaration[28988-29395]"
    }, {
      "left" : "void addIncrementalSourceAst(JsAst ast)",
      "right" : "void addIncrementalSourceAst(JsAst ast)",
      "info" : "MethodDeclaration[29368-29723]:MethodDeclaration[29399-29754]"
    }, {
      "left" : "boolean replaceIncrementalSourceAst(JsAst ast)",
      "right" : "boolean replaceIncrementalSourceAst(JsAst ast)",
      "info" : "MethodDeclaration[29727-30822]:MethodDeclaration[29758-30853]"
    }, {
      "left" : "JSModuleGraph getModuleGraph()",
      "right" : "JSModuleGraph getModuleGraph()",
      "info" : "MethodDeclaration[30826-30898]:MethodDeclaration[30857-30929]"
    }, {
      "left" : "public JSTypeRegistry getTypeRegistry()",
      "right" : "public JSTypeRegistry getTypeRegistry()",
      "info" : "MethodDeclaration[30902-31101]:MethodDeclaration[30933-31132]"
    }, {
      "left" : "ScopeCreator getTypedScopeCreator()",
      "right" : "ScopeCreator getTypedScopeCreator()",
      "info" : "MethodDeclaration[31105-31209]:MethodDeclaration[31136-31240]"
    }, {
      "left" : "public Scope getTopScope()",
      "right" : "public Scope getTopScope()",
      "info" : "MethodDeclaration[31213-31299]:MethodDeclaration[31244-31330]"
    }, {
      "left" : "public ReverseAbstractInterpreter getReverseAbstractInterpreter()",
      "right" : "public ReverseAbstractInterpreter getReverseAbstractInterpreter()",
      "info" : "MethodDeclaration[31303-31868]:MethodDeclaration[31334-31899]"
    }, {
      "left" : "TypeValidator getTypeValidator()",
      "right" : "TypeValidator getTypeValidator()",
      "info" : "MethodDeclaration[31872-32034]:MethodDeclaration[31903-32065]"
    }, {
      "left" : "Node parseInputs()",
      "right" : "Node parseInputs()",
      "info" : "MethodDeclaration[32206-36492]:MethodDeclaration[32237-36523]"
    }, {
      "left" : "public Node parse(JSSourceFile file)",
      "right" : "public Node parse(JSSourceFile file)",
      "info" : "MethodDeclaration[36496-36668]:MethodDeclaration[36527-36699]"
    }, {
      "left" : "Node parseSyntheticCode(String js)",
      "right" : "Node parseSyntheticCode(String js)",
      "info" : "MethodDeclaration[36672-36903]:MethodDeclaration[36703-36934]"
    }, {
      "left" : "void initCompilerOptionsIfTesting()",
      "right" : "void initCompilerOptionsIfTesting()",
      "info" : "MethodDeclaration[36907-37127]:MethodDeclaration[36938-37158]"
    }, {
      "left" : "Node parseSyntheticCode(String fileName, String js)",
      "right" : "Node parseSyntheticCode(String fileName, String js)",
      "info" : "MethodDeclaration[37131-37291]:MethodDeclaration[37162-37322]"
    }, {
      "left" : "Node parseTestCode(String js)",
      "right" : "Node parseTestCode(String js)",
      "info" : "MethodDeclaration[37295-37634]:MethodDeclaration[37326-37665]"
    }, {
      "left" : "ErrorReporter getDefaultErrorReporter()",
      "right" : "ErrorReporter getDefaultErrorReporter()",
      "info" : "MethodDeclaration[37638-37728]:MethodDeclaration[37669-37759]"
    }, {
      "left" : "public String toSource()",
      "right" : "public String toSource()",
      "info" : "MethodDeclaration[37920-38618]:MethodDeclaration[37951-38649]"
    }, {
      "left" : "public String call() throws Exception",
      "right" : "public String call() throws Exception",
      "info" : "MethodDeclaration[38072-38606]:MethodDeclaration[38103-38637]"
    }, {
      "left" : "public String[] toSourceArray()",
      "right" : "public String[] toSourceArray()",
      "info" : "MethodDeclaration[38622-39398]:MethodDeclaration[38653-39429]"
    }, {
      "left" : "public String[] call() throws Exception",
      "right" : "public String[] call() throws Exception",
      "info" : "MethodDeclaration[38793-39386]:MethodDeclaration[38824-39417]"
    }, {
      "left" : "public String toSource(final JSModule module)",
      "right" : "public String toSource(final JSModule module)",
      "info" : "MethodDeclaration[39402-40185]:MethodDeclaration[39433-40216]"
    }, {
      "left" : "public String call() throws Exception",
      "right" : "public String call() throws Exception",
      "info" : "MethodDeclaration[39583-40173]:MethodDeclaration[39614-40204]"
    }, {
      "left" : "public String[] toSourceArray(final JSModule module)",
      "right" : "public String[] toSourceArray(final JSModule module)",
      "info" : "MethodDeclaration[40190-41128]:MethodDeclaration[40221-41159]"
    }, {
      "left" : "public String[] call() throws Exception",
      "right" : "public String[] call() throws Exception",
      "info" : "MethodDeclaration[40394-41116]:MethodDeclaration[40425-41147]"
    }, {
      "left" : "public void toSource(final CodeBuilder cb,\n                       final int inputSeqNum,\n                       final Node root)",
      "right" : "public void toSource(final CodeBuilder cb,\n                       final int inputSeqNum,\n                       final Node root)",
      "info" : "MethodDeclaration[41132-43694]:MethodDeclaration[41163-43725]"
    }, {
      "left" : "public Void call() throws Exception",
      "right" : "public Void call() throws Exception",
      "info" : "MethodDeclaration[41669-43682]:MethodDeclaration[41700-43713]"
    }, {
      "left" : "String toSource(Node n)",
      "right" : "String toSource(Node n)",
      "info" : "MethodDeclaration[43698-43906]:MethodDeclaration[43729-43937]"
    }, {
      "left" : "private String toSource(Node n, SourceMap sourceMap)",
      "right" : "private String toSource(Node n, SourceMap sourceMap)",
      "info" : "MethodDeclaration[43910-44631]:MethodDeclaration[43941-44662]"
    }, {
      "left" : "CodeBuilder",
      "right" : "CodeBuilder",
      "info" : "TypeDeclaration[44635-46380]:TypeDeclaration[44666-46411]"
    }, {
      "left" : "private final StringBuilder sb = new StringBuilder();",
      "right" : "private final StringBuilder sb = new StringBuilder();",
      "info" : "FieldDeclaration[44832-44885]:FieldDeclaration[44863-44916]"
    }, {
      "left" : "private int lineCount = 0;",
      "right" : "private int lineCount = 0;",
      "info" : "FieldDeclaration[44890-44916]:FieldDeclaration[44921-44947]"
    }, {
      "left" : "private int colCount = 0;",
      "right" : "private int colCount = 0;",
      "info" : "FieldDeclaration[44921-44946]:FieldDeclaration[44952-44977]"
    }, {
      "left" : "void reset()",
      "right" : "void reset()",
      "info" : "MethodDeclaration[44952-45061]:MethodDeclaration[44983-45092]"
    }, {
      "left" : "CodeBuilder append(String str)",
      "right" : "CodeBuilder append(String str)",
      "info" : "MethodDeclaration[45067-45633]:MethodDeclaration[45098-45664]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[45639-45761]:MethodDeclaration[45670-45792]"
    }, {
      "left" : "public int getLength()",
      "right" : "public int getLength()",
      "info" : "MethodDeclaration[45767-45873]:MethodDeclaration[45798-45904]"
    }, {
      "left" : "int getLineIndex()",
      "right" : "int getLineIndex()",
      "info" : "MethodDeclaration[45879-46008]:MethodDeclaration[45910-46039]"
    }, {
      "left" : "int getColumnIndex()",
      "right" : "int getColumnIndex()",
      "info" : "MethodDeclaration[46014-46146]:MethodDeclaration[46045-46177]"
    }, {
      "left" : "boolean endsWith(String suffix)",
      "right" : "boolean endsWith(String suffix)",
      "info" : "MethodDeclaration[46152-46376]:MethodDeclaration[46183-46407]"
    }, {
      "left" : "public void optimize()",
      "right" : "public void optimize()",
      "info" : "MethodDeclaration[46558-47204]:MethodDeclaration[46589-47235]"
    }, {
      "left" : "void setCssRenamingMap(CssRenamingMap map)",
      "right" : "void setCssRenamingMap(CssRenamingMap map)",
      "info" : "MethodDeclaration[47208-47302]:MethodDeclaration[47239-47333]"
    }, {
      "left" : "CssRenamingMap getCssRenamingMap()",
      "right" : "CssRenamingMap getCssRenamingMap()",
      "info" : "MethodDeclaration[47306-47393]:MethodDeclaration[47337-47424]"
    }, {
      "left" : "public void processDefines()",
      "right" : "public void processDefines()",
      "info" : "MethodDeclaration[47397-47884]:MethodDeclaration[47428-47915]"
    }, {
      "left" : "boolean isInliningForbidden()",
      "right" : "boolean isInliningForbidden()",
      "info" : "MethodDeclaration[47888-48091]:MethodDeclaration[47919-48122]"
    }, {
      "left" : "ControlFlowGraph<Node> computeCFG()",
      "right" : "ControlFlowGraph<Node> computeCFG()",
      "info" : "MethodDeclaration[48095-48417]:MethodDeclaration[48126-48448]"
    }, {
      "left" : "public void normalize()",
      "right" : "public void normalize()",
      "info" : "MethodDeclaration[48421-48566]:MethodDeclaration[48452-48597]"
    }, {
      "left" : "void prepareAst(Node root)",
      "right" : "void prepareAst(Node root)",
      "info" : "MethodDeclaration[48570-48773]:MethodDeclaration[48601-48804]"
    }, {
      "left" : "void recordFunctionInformation()",
      "right" : "void recordFunctionInformation()",
      "info" : "MethodDeclaration[48777-49191]:MethodDeclaration[48808-49222]"
    }, {
      "left" : "protected final CodeChangeHandler.RecentChange recentChange =\n      new CodeChangeHandler.RecentChange();",
      "right" : "protected final CodeChangeHandler.RecentChange recentChange =\n      new CodeChangeHandler.RecentChange();",
      "info" : "FieldDeclaration[49195-49300]:FieldDeclaration[49226-49331]"
    }, {
      "left" : "private final List<CodeChangeHandler> codeChangeHandlers =\n      Lists.<CodeChangeHandler>newArrayList();",
      "right" : "private final List<CodeChangeHandler> codeChangeHandlers =\n      Lists.<CodeChangeHandler>newArrayList();",
      "info" : "FieldDeclaration[49303-49408]:FieldDeclaration[49334-49439]"
    }, {
      "left" : "void addChangeHandler(CodeChangeHandler handler)",
      "right" : "void addChangeHandler(CodeChangeHandler handler)",
      "info" : "MethodDeclaration[49412-49515]:MethodDeclaration[49443-49546]"
    }, {
      "left" : "void removeChangeHandler(CodeChangeHandler handler)",
      "right" : "void removeChangeHandler(CodeChangeHandler handler)",
      "info" : "MethodDeclaration[49519-49628]:MethodDeclaration[49550-49659]"
    }, {
      "left" : "public void reportCodeChange()",
      "right" : "public void reportCodeChange()",
      "info" : "MethodDeclaration[49632-49966]:MethodDeclaration[49663-49997]"
    }, {
      "left" : "public CodingConvention getCodingConvention()",
      "right" : "public CodingConvention getCodingConvention()",
      "info" : "MethodDeclaration[49970-50197]:MethodDeclaration[50001-50228]"
    }, {
      "left" : "public boolean isIdeMode()",
      "right" : "public boolean isIdeMode()",
      "info" : "MethodDeclaration[50201-50273]:MethodDeclaration[50232-50304]"
    }, {
      "left" : "public boolean acceptEcmaScript5()",
      "right" : "public boolean acceptEcmaScript5()",
      "info" : "MethodDeclaration[50277-50468]:MethodDeclaration[50308-50499]"
    }, {
      "left" : "public LanguageMode languageMode()",
      "right" : "public LanguageMode languageMode()",
      "info" : "MethodDeclaration[50472-50548]:MethodDeclaration[50503-50579]"
    }, {
      "left" : "public boolean acceptConstKeyword()",
      "right" : "public boolean acceptConstKeyword()",
      "info" : "MethodDeclaration[50552-50644]:MethodDeclaration[50583-50675]"
    }, {
      "left" : "Config getParserConfig()",
      "right" : "Config getParserConfig()",
      "info" : "MethodDeclaration[50648-51330]:MethodDeclaration[50679-51361]"
    }, {
      "left" : "public boolean isTypeCheckingEnabled()",
      "right" : "public boolean isTypeCheckingEnabled()",
      "info" : "MethodDeclaration[51334-51421]:MethodDeclaration[51365-51452]"
    }, {
      "left" : "protected DiagnosticGroups getDiagnosticGroups()",
      "right" : "protected DiagnosticGroups getDiagnosticGroups()",
      "info" : "MethodDeclaration[51602-51833]:MethodDeclaration[51633-51864]"
    }, {
      "left" : "public void report(JSError error)",
      "right" : "public void report(JSError error)",
      "info" : "MethodDeclaration[51837-52155]:MethodDeclaration[51868-52186]"
    }, {
      "left" : "public CheckLevel getErrorLevel(JSError error)",
      "right" : "public CheckLevel getErrorLevel(JSError error)",
      "info" : "MethodDeclaration[52159-52303]:MethodDeclaration[52190-52334]"
    }, {
      "left" : "void throwInternalError(String message, Exception cause)",
      "right" : "void throwInternalError(String message, Exception cause)",
      "info" : "MethodDeclaration[52307-52695]:MethodDeclaration[52338-52726]"
    }, {
      "left" : "public int getErrorCount()",
      "right" : "public int getErrorCount()",
      "info" : "MethodDeclaration[52700-52817]:MethodDeclaration[52731-52848]"
    }, {
      "left" : "public int getWarningCount()",
      "right" : "public int getWarningCount()",
      "info" : "MethodDeclaration[52821-52944]:MethodDeclaration[52852-52975]"
    }, {
      "left" : "boolean hasHaltingErrors()",
      "right" : "boolean hasHaltingErrors()",
      "info" : "MethodDeclaration[52948-53040]:MethodDeclaration[52979-53071]"
    }, {
      "left" : "public boolean hasErrors()",
      "right" : "public boolean hasErrors()",
      "info" : "MethodDeclaration[53044-53525]:MethodDeclaration[53075-53556]"
    }, {
      "left" : "void addToDebugLog(String str)",
      "right" : "void addToDebugLog(String str)",
      "info" : "MethodDeclaration[53529-53710]:MethodDeclaration[53560-53741]"
    }, {
      "left" : "private SourceFile getSourceFileByName(String sourceName)",
      "right" : "private SourceFile getSourceFileByName(String sourceName)",
      "info" : "MethodDeclaration[53714-53907]:MethodDeclaration[53745-53938]"
    }, {
      "left" : "public String getSourceLine(String sourceName, int lineNumber)",
      "right" : "public String getSourceLine(String sourceName, int lineNumber)",
      "info" : "MethodDeclaration[53911-54174]:MethodDeclaration[53942-54205]"
    }, {
      "left" : "public Region getSourceRegion(String sourceName, int lineNumber)",
      "right" : "public Region getSourceRegion(String sourceName, int lineNumber)",
      "info" : "MethodDeclaration[54178-54445]:MethodDeclaration[54209-54476]"
    }, {
      "left" : "Node getNodeForCodeInsertion(JSModule module)",
      "right" : "Node getNodeForCodeInsertion(JSModule module)",
      "info" : "MethodDeclaration[54633-55084]:MethodDeclaration[54664-55115]"
    }, {
      "left" : "public SourceMap getSourceMap()",
      "right" : "public SourceMap getSourceMap()",
      "info" : "MethodDeclaration[55088-55147]:MethodDeclaration[55119-55178]"
    }, {
      "left" : "VariableMap getVariableMap()",
      "right" : "VariableMap getVariableMap()",
      "info" : "MethodDeclaration[55151-55248]:MethodDeclaration[55182-55279]"
    }, {
      "left" : "VariableMap getPropertyMap()",
      "right" : "VariableMap getPropertyMap()",
      "info" : "MethodDeclaration[55252-55349]:MethodDeclaration[55283-55380]"
    }, {
      "left" : "CompilerOptions getOptions()",
      "right" : "CompilerOptions getOptions()",
      "info" : "MethodDeclaration[55353-55407]:MethodDeclaration[55384-55438]"
    }, {
      "left" : "FunctionInformationMap getFunctionalInformationMap()",
      "right" : "FunctionInformationMap getFunctionalInformationMap()",
      "info" : "MethodDeclaration[55411-55504]:MethodDeclaration[55442-55535]"
    }, {
      "left" : "public static void setLoggingLevel(Level level)",
      "right" : "public static void setLoggingLevel(Level level)",
      "info" : "MethodDeclaration[55508-55675]:MethodDeclaration[55539-55706]"
    }, {
      "left" : "public String getAstDotGraph() throws IOException",
      "right" : "public String getAstDotGraph() throws IOException",
      "info" : "MethodDeclaration[55679-56036]:MethodDeclaration[55710-56067]"
    }, {
      "left" : "public ErrorManager getErrorManager()",
      "right" : "public ErrorManager getErrorManager()",
      "info" : "MethodDeclaration[56040-56195]:MethodDeclaration[56071-56226]"
    }, {
      "left" : "List<CompilerInput> getInputsInOrder()",
      "right" : "List<CompilerInput> getInputsInOrder()",
      "info" : "MethodDeclaration[56199-56319]:MethodDeclaration[56230-56350]"
    }, {
      "left" : "IntermediateState",
      "right" : "IntermediateState",
      "info" : "TypeDeclaration[56323-57389]:TypeDeclaration[56354-57420]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[56989-57037]:FieldDeclaration[57020-57068]"
    }, {
      "left" : "Node externsRoot;",
      "right" : "Node externsRoot;",
      "info" : "FieldDeclaration[57043-57060]:FieldDeclaration[57074-57091]"
    }, {
      "left" : "private Node jsRoot;",
      "right" : "private Node jsRoot;",
      "info" : "FieldDeclaration[57065-57085]:FieldDeclaration[57096-57116]"
    }, {
      "left" : "private List<CompilerInput> externs;",
      "right" : "private List<CompilerInput> externs;",
      "info" : "FieldDeclaration[57090-57126]:FieldDeclaration[57121-57157]"
    }, {
      "left" : "private List<CompilerInput> inputs;",
      "right" : "private List<CompilerInput> inputs;",
      "info" : "FieldDeclaration[57131-57166]:FieldDeclaration[57162-57197]"
    }, {
      "left" : "private List<JSModule> modules;",
      "right" : "private List<JSModule> modules;",
      "info" : "FieldDeclaration[57171-57202]:FieldDeclaration[57202-57233]"
    }, {
      "left" : "private PassConfig.State passConfigState;",
      "right" : "private PassConfig.State passConfigState;",
      "info" : "FieldDeclaration[57207-57248]:FieldDeclaration[57238-57279]"
    }, {
      "left" : "private JSTypeRegistry typeRegistry;",
      "right" : "private JSTypeRegistry typeRegistry;",
      "info" : "FieldDeclaration[57253-57289]:FieldDeclaration[57284-57320]"
    }, {
      "left" : "private AbstractCompiler.LifeCycleStage lifeCycleStage;",
      "right" : "private AbstractCompiler.LifeCycleStage lifeCycleStage;",
      "info" : "FieldDeclaration[57294-57349]:FieldDeclaration[57325-57380]"
    }, {
      "left" : "private IntermediateState()",
      "right" : "private IntermediateState()",
      "info" : "MethodDeclaration[57355-57385]:MethodDeclaration[57386-57416]"
    }, {
      "left" : "public IntermediateState getState()",
      "right" : "public IntermediateState getState()",
      "info" : "MethodDeclaration[57393-57904]:MethodDeclaration[57424-57935]"
    }, {
      "left" : "public void setState(IntermediateState state)",
      "right" : "public void setState(IntermediateState state)",
      "info" : "MethodDeclaration[57908-58431]:MethodDeclaration[57939-58462]"
    }, {
      "left" : "List<CompilerInput> getInputsForTesting()",
      "right" : "List<CompilerInput> getInputsForTesting()",
      "info" : "MethodDeclaration[58435-58522]:MethodDeclaration[58466-58553]"
    }, {
      "left" : "List<CompilerInput> getExternsForTesting()",
      "right" : "List<CompilerInput> getExternsForTesting()",
      "info" : "MethodDeclaration[58526-58615]:MethodDeclaration[58557-58646]"
    }, {
      "left" : "boolean hasRegExpGlobalReferences()",
      "right" : "boolean hasRegExpGlobalReferences()",
      "info" : "MethodDeclaration[58619-58710]:MethodDeclaration[58650-58741]"
    }, {
      "left" : "void setHasRegExpGlobalReferences(boolean references)",
      "right" : "void setHasRegExpGlobalReferences(boolean references)",
      "info" : "MethodDeclaration[58714-58829]:MethodDeclaration[58745-58860]"
    }, {
      "left" : "void updateGlobalVarReferences(Map<Var, ReferenceCollection> refMapPatch,\n      Node collectionRoot)",
      "right" : "void updateGlobalVarReferences(Map<Var, ReferenceCollection> refMapPatch,\n      Node collectionRoot)",
      "info" : "MethodDeclaration[58833-59253]:MethodDeclaration[58864-59284]"
    }, {
      "left" : "ReferenceMap getGlobalVarReferences()",
      "right" : "ReferenceMap getGlobalVarReferences()",
      "info" : "MethodDeclaration[59257-59337]:MethodDeclaration[59288-59368]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6206-6241]:Block[6206-6241]"
    }, {
      "left" : "this((PrintStream) null);",
      "right" : "this((PrintStream) null);",
      "info" : "ConstructorInvocation[6212-6237]:ConstructorInvocation[6212-6237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6376-6441]:Block[6376-6441]"
    }, {
      "left" : "addChangeHandler(recentChange);",
      "right" : "addChangeHandler(recentChange);",
      "info" : "ExpressionStatement[6382-6413]:ExpressionStatement[6382-6413]"
    }, {
      "left" : "outStream = stream;",
      "right" : "outStream = stream;",
      "info" : "ExpressionStatement[6418-6437]:ExpressionStatement[6418-6437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6558-6610]:Block[6558-6610]"
    }, {
      "left" : "this();",
      "right" : "this();",
      "info" : "ConstructorInvocation[6564-6571]:ConstructorInvocation[6564-6571]"
    }, {
      "left" : "setErrorManager(errorManager);",
      "right" : "setErrorManager(errorManager);",
      "info" : "ExpressionStatement[6576-6606]:ExpressionStatement[6576-6606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6785-6919]:Block[6785-6919]"
    }, {
      "left" : "Preconditions.checkNotNull(\n        errorManager, \"the error manager cannot be null\");",
      "right" : "Preconditions.checkNotNull(\n        errorManager, \"the error manager cannot be null\");",
      "info" : "ExpressionStatement[6791-6877]:ExpressionStatement[6791-6877]"
    }, {
      "left" : "this.errorManager = errorManager;",
      "right" : "this.errorManager = errorManager;",
      "info" : "ExpressionStatement[6882-6915]:ExpressionStatement[6882-6915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7087-7212]:Block[7087-7212]"
    }, {
      "left" : "boolean colorize = options.shouldColorizeErrorOutput();",
      "right" : "boolean colorize = options.shouldColorizeErrorOutput();",
      "info" : "VariableDeclarationStatement[7093-7148]:VariableDeclarationStatement[7093-7148]"
    }, {
      "left" : "return options.errorFormat.toFormatter(this, colorize);",
      "right" : "return options.errorFormat.toFormatter(this, colorize);",
      "info" : "ReturnStatement[7153-7208]:ReturnStatement[7153-7208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7379-9448]:Block[7379-9479]"
    }, {
      "left" : "this.options = options;",
      "right" : "this.options = options;",
      "info" : "ExpressionStatement[7385-7408]:ExpressionStatement[7385-7408]"
    }, {
      "left" : "if (errorManager == null)",
      "right" : "if (errorManager == null)",
      "info" : "IfStatement[7413-7817]:IfStatement[7413-7817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7439-7817]:Block[7439-7817]"
    }, {
      "left" : "if (outStream == null)",
      "right" : "if (outStream == null)",
      "info" : "IfStatement[7447-7811]:IfStatement[7447-7811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7470-7575]:Block[7470-7575]"
    }, {
      "left" : "setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));",
      "right" : "setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));",
      "info" : "ExpressionStatement[7480-7567]:ExpressionStatement[7480-7567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7581-7811]:Block[7581-7811]"
    }, {
      "left" : "PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);",
      "right" : "PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);",
      "info" : "VariableDeclarationStatement[7591-7702]:VariableDeclarationStatement[7591-7702]"
    }, {
      "left" : "printer.setSummaryDetailLevel(options.summaryDetailLevel);",
      "right" : "printer.setSummaryDetailLevel(options.summaryDetailLevel);",
      "info" : "ExpressionStatement[7711-7769]:ExpressionStatement[7711-7769]"
    }, {
      "left" : "setErrorManager(printer);",
      "right" : "setErrorManager(printer);",
      "info" : "ExpressionStatement[7778-7803]:ExpressionStatement[7778-7803]"
    }, {
      "left" : "if (options.enables(DiagnosticGroups.CHECK_TYPES))",
      "right" : "if (options.enables(DiagnosticGroups.CHECK_TYPES))",
      "info" : "IfStatement[7885-8418]:IfStatement[7885-8418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7936-7976]:Block[7936-7976]"
    }, {
      "left" : "options.checkTypes = true;",
      "right" : "options.checkTypes = true;",
      "info" : "ExpressionStatement[7944-7970]:ExpressionStatement[7944-7970]"
    }, {
      "left" : "if (options.disables(DiagnosticGroups.CHECK_TYPES))",
      "right" : "if (options.disables(DiagnosticGroups.CHECK_TYPES))",
      "info" : "IfStatement[7982-8418]:IfStatement[7982-8418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8034-8075]:Block[8034-8075]"
    }, {
      "left" : "options.checkTypes = false;",
      "right" : "options.checkTypes = false;",
      "info" : "ExpressionStatement[8042-8069]:ExpressionStatement[8042-8069]"
    }, {
      "left" : "if (!options.checkTypes)",
      "right" : "if (!options.checkTypes)",
      "info" : "IfStatement[8081-8418]:IfStatement[8081-8418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8106-8418]:Block[8106-8418]"
    }, {
      "left" : "options.setWarningLevel(\n          DiagnosticGroup.forType(\n              RhinoErrorReporter.TYPE_PARSE_ERROR),\n          CheckLevel.OFF);",
      "right" : "options.setWarningLevel(\n          DiagnosticGroup.forType(\n              RhinoErrorReporter.TYPE_PARSE_ERROR),\n          CheckLevel.OFF);",
      "info" : "ExpressionStatement[8274-8412]:ExpressionStatement[8274-8412]"
    }, {
      "left" : "if (options.checkGlobalThisLevel.isOn())",
      "right" : "if (options.checkGlobalThisLevel.isOn())",
      "info" : "IfStatement[8424-8584]:IfStatement[8424-8584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8465-8584]:Block[8465-8584]"
    }, {
      "left" : "options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);",
      "right" : "options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);",
      "info" : "ExpressionStatement[8473-8578]:ExpressionStatement[8473-8578]"
    }, {
      "left" : "List<WarningsGuard> guards = Lists.newArrayList();",
      "right" : "List<WarningsGuard> guards = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[8628-8678]:VariableDeclarationStatement[8628-8678]"
    }, {
      "left" : "guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));",
      "right" : "guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));",
      "info" : "ExpressionStatement[8683-8791]:ExpressionStatement[8683-8791]"
    }, {
      "left" : "guards.add(options.getWarningsGuard());",
      "right" : "guards.add(options.getWarningsGuard());",
      "info" : "ExpressionStatement[8796-8835]:ExpressionStatement[8796-8835]"
    }, {
      "left" : "if (!options.checkSymbols &&\n        (warningsGuard == null || !warningsGuard.disables(\n            DiagnosticGroups.CHECK_VARIABLES)))",
      "right" : "if (!options.checkSymbols &&\n        !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES))",
      "info" : "IfStatement[9128-9384]:IfStatement[9204-9433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9264-9384]:Block[9300-9433]"
    }, {
      "left" : "guards.add(new DiagnosticGroupWarningsGuard(\n          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));",
      "right" : "composedGuards.addGuard(new DiagnosticGroupWarningsGuard(\n          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));",
      "info" : "ExpressionStatement[9272-9378]:ExpressionStatement[9308-9427]"
    }, {
      "left" : "this.warningsGuard = new ComposeWarningsGuard(guards);",
      "right" : "this.warningsGuard = composedGuards;",
      "info" : "ExpressionStatement[9390-9444]:ExpressionStatement[9439-9475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9621-9738]:Block[9652-9769]"
    }, {
      "left" : "init(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSSourceFile>newArrayList(inputs), options);",
      "right" : "init(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSSourceFile>newArrayList(inputs), options);",
      "info" : "ExpressionStatement[9627-9734]:ExpressionStatement[9658-9765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9919-10110]:Block[9950-10141]"
    }, {
      "left" : "JSModule module = new JSModule(\"[singleton]\");",
      "right" : "JSModule module = new JSModule(\"[singleton]\");",
      "info" : "VariableDeclarationStatement[9925-9971]:VariableDeclarationStatement[9956-10002]"
    }, {
      "left" : "for (JSSourceFile input : inputs)",
      "right" : "for (JSSourceFile input : inputs)",
      "info" : "EnhancedForStatement[9976-10042]:EnhancedForStatement[10007-10073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10010-10042]:Block[10041-10073]"
    }, {
      "left" : "module.add(input);",
      "right" : "module.add(input);",
      "info" : "ExpressionStatement[10018-10036]:ExpressionStatement[10049-10067]"
    }, {
      "left" : "initModules(externs, Lists.newArrayList(module), options);",
      "right" : "initModules(externs, Lists.newArrayList(module), options);",
      "info" : "ExpressionStatement[10048-10106]:ExpressionStatement[10079-10137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10315-10437]:Block[10346-10468]"
    }, {
      "left" : "initModules(Lists.<JSSourceFile>newArrayList(externs),\n         Lists.<JSModule>newArrayList(modules), options);",
      "right" : "initModules(Lists.<JSSourceFile>newArrayList(externs),\n         Lists.<JSModule>newArrayList(modules), options);",
      "info" : "ExpressionStatement[10321-10433]:ExpressionStatement[10352-10464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10664-11519]:Block[10695-11550]"
    }, {
      "left" : "initOptions(options);",
      "right" : "initOptions(options);",
      "info" : "ExpressionStatement[10670-10691]:ExpressionStatement[10701-10722]"
    }, {
      "left" : "checkFirstModule(modules);",
      "right" : "checkFirstModule(modules);",
      "info" : "ExpressionStatement[10697-10723]:ExpressionStatement[10728-10754]"
    }, {
      "left" : "fillEmptyModules(modules);",
      "right" : "fillEmptyModules(modules);",
      "info" : "ExpressionStatement[10728-10754]:ExpressionStatement[10759-10785]"
    }, {
      "left" : "this.externs = makeCompilerInput(externs, true);",
      "right" : "this.externs = makeCompilerInput(externs, true);",
      "info" : "ExpressionStatement[10760-10808]:ExpressionStatement[10791-10839]"
    }, {
      "left" : "this.modules = modules;",
      "right" : "this.modules = modules;",
      "info" : "ExpressionStatement[10916-10939]:ExpressionStatement[10947-10970]"
    }, {
      "left" : "if (modules.size() > 1)",
      "right" : "if (modules.size() > 1)",
      "info" : "IfStatement[10944-11408]:IfStatement[10975-11439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10968-11364]:Block[10999-11395]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10976-11358]:TryStatement[11007-11389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10980-11044]:Block[11011-11075]"
    }, {
      "left" : "this.moduleGraph = new JSModuleGraph(modules);",
      "right" : "this.moduleGraph = new JSModuleGraph(modules);",
      "info" : "ExpressionStatement[10990-11036]:ExpressionStatement[11021-11067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11095-11358]:Block[11126-11389]"
    }, {
      "left" : "report(JSError.make(MODULE_DEPENDENCY_ERROR,\n                e.getModule().getName(), e.getDependentModule().getName()));",
      "right" : "report(JSError.make(MODULE_DEPENDENCY_ERROR,\n                e.getModule().getName(), e.getDependentModule().getName()));",
      "info" : "ExpressionStatement[11213-11334]:ExpressionStatement[11244-11365]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11343-11350]:ReturnStatement[11374-11381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11370-11408]:Block[11401-11439]"
    }, {
      "left" : "this.moduleGraph = null;",
      "right" : "this.moduleGraph = null;",
      "info" : "ExpressionStatement[11378-11402]:ExpressionStatement[11409-11433]"
    }, {
      "left" : "this.inputs = getAllInputsFromModules(modules);",
      "right" : "this.inputs = getAllInputsFromModules(modules);",
      "info" : "ExpressionStatement[11414-11461]:ExpressionStatement[11445-11492]"
    }, {
      "left" : "initBasedOnOptions();",
      "right" : "initBasedOnOptions();",
      "info" : "ExpressionStatement[11466-11487]:ExpressionStatement[11497-11518]"
    }, {
      "left" : "initInputsByNameMap();",
      "right" : "initInputsByNameMap();",
      "info" : "ExpressionStatement[11493-11515]:ExpressionStatement[11524-11546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11639-11797]:Block[11670-11828]"
    }, {
      "left" : "if (options.sourceMapOutputPath != null)",
      "right" : "if (options.sourceMapOutputPath != null)",
      "info" : "IfStatement[11688-11793]:IfStatement[11719-11824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11729-11793]:Block[11760-11824]"
    }, {
      "left" : "sourceMap = options.sourceMapFormat.getInstance();",
      "right" : "sourceMap = options.sourceMapFormat.getInstance();",
      "info" : "ExpressionStatement[11737-11787]:ExpressionStatement[11768-11818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11898-12074]:Block[11929-12105]"
    }, {
      "left" : "List<CompilerInput> inputs = Lists.newArrayList();",
      "right" : "List<CompilerInput> inputs = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[11904-11954]:VariableDeclarationStatement[11935-11985]"
    }, {
      "left" : "for (JSSourceFile file : files)",
      "right" : "for (JSSourceFile file : files)",
      "info" : "EnhancedForStatement[11959-12051]:EnhancedForStatement[11990-12082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11991-12051]:Block[12022-12082]"
    }, {
      "left" : "inputs.add(new CompilerInput(file, isExtern));",
      "right" : "inputs.add(new CompilerInput(file, isExtern));",
      "info" : "ExpressionStatement[11999-12045]:ExpressionStatement[12030-12076]"
    }, {
      "left" : "return inputs;",
      "right" : "return inputs;",
      "info" : "ReturnStatement[12056-12070]:ReturnStatement[12087-12101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12638-12970]:Block[12669-13001]"
    }, {
      "left" : "if (modules.isEmpty())",
      "right" : "if (modules.isEmpty())",
      "info" : "IfStatement[12644-12966]:IfStatement[12675-12997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12667-12727]:Block[12698-12758]"
    }, {
      "left" : "report(JSError.make(EMPTY_MODULE_LIST_ERROR));",
      "right" : "report(JSError.make(EMPTY_MODULE_LIST_ERROR));",
      "info" : "ExpressionStatement[12675-12721]:ExpressionStatement[12706-12752]"
    }, {
      "left" : "if (modules.get(0).getInputs().isEmpty() && modules.size() > 1)",
      "right" : "if (modules.get(0).getInputs().isEmpty() && modules.size() > 1)",
      "info" : "IfStatement[12733-12966]:IfStatement[12764-12997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12797-12966]:Block[12828-12997]"
    }, {
      "left" : "report(JSError.make(EMPTY_ROOT_MODULE_ERROR,\n          modules.get(0).getName()));",
      "right" : "report(JSError.make(EMPTY_ROOT_MODULE_ERROR,\n          modules.get(0).getName()));",
      "info" : "ExpressionStatement[12878-12960]:ExpressionStatement[12909-12991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13147-13323]:Block[13178-13354]"
    }, {
      "left" : "for (JSModule module : modules)",
      "right" : "for (JSModule module : modules)",
      "info" : "EnhancedForStatement[13153-13319]:EnhancedForStatement[13184-13350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13185-13319]:Block[13216-13350]"
    }, {
      "left" : "if (module.getInputs().isEmpty())",
      "right" : "if (module.getInputs().isEmpty())",
      "info" : "IfStatement[13193-13313]:IfStatement[13224-13344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13227-13313]:Block[13258-13344]"
    }, {
      "left" : "module.add(JSSourceFile.fromCode(\"[\" + module.getName() + \"]\", \"\"));",
      "right" : "module.add(JSSourceFile.fromCode(\"[\" + module.getName() + \"]\", \"\"));",
      "info" : "ExpressionStatement[13237-13305]:ExpressionStatement[13268-13336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13608-13687]:Block[13639-13718]"
    }, {
      "left" : "inputs = getAllInputsFromModules(modules);",
      "right" : "inputs = getAllInputsFromModules(modules);",
      "info" : "ExpressionStatement[13614-13656]:ExpressionStatement[13645-13687]"
    }, {
      "left" : "initInputsByNameMap();",
      "right" : "initInputsByNameMap();",
      "info" : "ExpressionStatement[13661-13683]:ExpressionStatement[13692-13714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13887-14420]:Block[13918-14451]"
    }, {
      "left" : "List<CompilerInput> inputs = Lists.newArrayList();",
      "right" : "List<CompilerInput> inputs = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[13893-13943]:VariableDeclarationStatement[13924-13974]"
    }, {
      "left" : "Map<String, JSModule> inputMap = Maps.newHashMap();",
      "right" : "Map<String, JSModule> inputMap = Maps.newHashMap();",
      "info" : "VariableDeclarationStatement[13948-13999]:VariableDeclarationStatement[13979-14030]"
    }, {
      "left" : "for (JSModule module : modules)",
      "right" : "for (JSModule module : modules)",
      "info" : "EnhancedForStatement[14004-14397]:EnhancedForStatement[14035-14428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14036-14397]:Block[14067-14428]"
    }, {
      "left" : "for (CompilerInput input : module.getInputs())",
      "right" : "for (CompilerInput input : module.getInputs())",
      "info" : "EnhancedForStatement[14044-14391]:EnhancedForStatement[14075-14422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14091-14391]:Block[14122-14422]"
    }, {
      "left" : "String inputName = input.getName();",
      "right" : "String inputName = input.getName();",
      "info" : "VariableDeclarationStatement[14101-14136]:VariableDeclarationStatement[14132-14167]"
    }, {
      "left" : "inputs.add(input);",
      "right" : "inputs.add(input);",
      "info" : "ExpressionStatement[14324-14342]:ExpressionStatement[14355-14373]"
    }, {
      "left" : "inputMap.put(inputName, module);",
      "right" : "inputMap.put(inputName, module);",
      "info" : "ExpressionStatement[14351-14383]:ExpressionStatement[14382-14414]"
    }, {
      "left" : "return inputs;",
      "right" : "return inputs;",
      "info" : "ReturnStatement[14402-14416]:ReturnStatement[14433-14447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14841-15399]:Block[14872-15430]"
    }, {
      "left" : "inputsByName = new HashMap<String, CompilerInput>();",
      "right" : "inputsByName = new HashMap<String, CompilerInput>();",
      "info" : "ExpressionStatement[14847-14899]:ExpressionStatement[14878-14930]"
    }, {
      "left" : "for (CompilerInput input : externs)",
      "right" : "for (CompilerInput input : externs)",
      "info" : "EnhancedForStatement[14904-15151]:EnhancedForStatement[14935-15182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14940-15151]:Block[14971-15182]"
    }, {
      "left" : "String name = input.getName();",
      "right" : "String name = input.getName();",
      "info" : "VariableDeclarationStatement[14948-14978]:VariableDeclarationStatement[14979-15009]"
    }, {
      "left" : "if (!inputsByName.containsKey(name))",
      "right" : "if (!inputsByName.containsKey(name))",
      "info" : "IfStatement[14985-15145]:IfStatement[15016-15176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15022-15070]:Block[15053-15101]"
    }, {
      "left" : "inputsByName.put(name, input);",
      "right" : "inputsByName.put(name, input);",
      "info" : "ExpressionStatement[15032-15062]:ExpressionStatement[15063-15093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15076-15145]:Block[15107-15176]"
    }, {
      "left" : "report(JSError.make(DUPLICATE_EXTERN_INPUT, name));",
      "right" : "report(JSError.make(DUPLICATE_EXTERN_INPUT, name));",
      "info" : "ExpressionStatement[15086-15137]:ExpressionStatement[15117-15168]"
    }, {
      "left" : "for (CompilerInput input : inputs)",
      "right" : "for (CompilerInput input : inputs)",
      "info" : "EnhancedForStatement[15156-15395]:EnhancedForStatement[15187-15426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15191-15395]:Block[15222-15426]"
    }, {
      "left" : "String name = input.getName();",
      "right" : "String name = input.getName();",
      "info" : "VariableDeclarationStatement[15199-15229]:VariableDeclarationStatement[15230-15260]"
    }, {
      "left" : "if (!inputsByName.containsKey(name))",
      "right" : "if (!inputsByName.containsKey(name))",
      "info" : "IfStatement[15236-15389]:IfStatement[15267-15420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15273-15321]:Block[15304-15352]"
    }, {
      "left" : "inputsByName.put(name, input);",
      "right" : "inputsByName.put(name, input);",
      "info" : "ExpressionStatement[15283-15313]:ExpressionStatement[15314-15344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15327-15389]:Block[15358-15420]"
    }, {
      "left" : "report(JSError.make(DUPLICATE_INPUT, name));",
      "right" : "report(JSError.make(DUPLICATE_INPUT, name));",
      "info" : "ExpressionStatement[15337-15381]:ExpressionStatement[15368-15412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15498-15571]:Block[15529-15602]"
    }, {
      "left" : "return compile(extern, new JSSourceFile[] { input }, options);",
      "right" : "return compile(extern, new JSSourceFile[] { input }, options);",
      "info" : "ReturnStatement[15505-15567]:ReturnStatement[15536-15598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15672-15745]:Block[15703-15776]"
    }, {
      "left" : "return compile(new JSSourceFile[] { extern }, input, options);",
      "right" : "return compile(new JSSourceFile[] { extern }, input, options);",
      "info" : "ReturnStatement[15679-15741]:ReturnStatement[15710-15772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15844-15919]:Block[15875-15950]"
    }, {
      "left" : "return compile(new JSSourceFile[] { extern }, modules, options);",
      "right" : "return compile(new JSSourceFile[] { extern }, modules, options);",
      "info" : "ReturnStatement[15851-15915]:ReturnStatement[15882-15946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16109-16244]:Block[16140-16275]"
    }, {
      "left" : "return compile(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSSourceFile>newArrayList(inputs),\n        options);",
      "right" : "return compile(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSSourceFile>newArrayList(inputs),\n        options);",
      "info" : "ReturnStatement[16115-16240]:ReturnStatement[16146-16271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16400-16783]:Block[16431-16814]"
    }, {
      "left" : "Preconditions.checkState(jsRoot == null);",
      "right" : "Preconditions.checkState(jsRoot == null);",
      "info" : "ExpressionStatement[16460-16501]:ExpressionStatement[16491-16532]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16507-16779]:TryStatement[16538-16810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16511-16641]:Block[16542-16672]"
    }, {
      "left" : "init(externs, inputs, options);",
      "right" : "init(externs, inputs, options);",
      "info" : "ExpressionStatement[16519-16550]:ExpressionStatement[16550-16581]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[16557-16611]:IfStatement[16588-16642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16574-16611]:Block[16605-16642]"
    }, {
      "left" : "return getResult();",
      "right" : "return getResult();",
      "info" : "ReturnStatement[16584-16603]:ReturnStatement[16615-16634]"
    }, {
      "left" : "return compile();",
      "right" : "return compile();",
      "info" : "ReturnStatement[16618-16635]:ReturnStatement[16649-16666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16650-16779]:Block[16681-16810]"
    }, {
      "left" : "Tracer t = newTracer(\"generateReport\");",
      "right" : "Tracer t = newTracer(\"generateReport\");",
      "info" : "VariableDeclarationStatement[16658-16697]:VariableDeclarationStatement[16689-16728]"
    }, {
      "left" : "errorManager.generateReport();",
      "right" : "errorManager.generateReport();",
      "info" : "ExpressionStatement[16704-16734]:ExpressionStatement[16735-16765]"
    }, {
      "left" : "stopTracer(t, \"generateReport\");",
      "right" : "stopTracer(t, \"generateReport\");",
      "info" : "ExpressionStatement[16741-16773]:ExpressionStatement[16772-16804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16971-17110]:Block[17002-17141]"
    }, {
      "left" : "return compileModules(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSModule>newArrayList(modules),\n        options);",
      "right" : "return compileModules(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSModule>newArrayList(modules),\n        options);",
      "info" : "ReturnStatement[16977-17106]:ReturnStatement[17008-17137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17271-17662]:Block[17302-17693]"
    }, {
      "left" : "Preconditions.checkState(jsRoot == null);",
      "right" : "Preconditions.checkState(jsRoot == null);",
      "info" : "ExpressionStatement[17331-17372]:ExpressionStatement[17362-17403]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[17378-17658]:TryStatement[17409-17689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17382-17520]:Block[17413-17551]"
    }, {
      "left" : "initModules(externs, modules, options);",
      "right" : "initModules(externs, modules, options);",
      "info" : "ExpressionStatement[17390-17429]:ExpressionStatement[17421-17460]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[17436-17490]:IfStatement[17467-17521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17453-17490]:Block[17484-17521]"
    }, {
      "left" : "return getResult();",
      "right" : "return getResult();",
      "info" : "ReturnStatement[17463-17482]:ReturnStatement[17494-17513]"
    }, {
      "left" : "return compile();",
      "right" : "return compile();",
      "info" : "ReturnStatement[17497-17514]:ReturnStatement[17528-17545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17529-17658]:Block[17560-17689]"
    }, {
      "left" : "Tracer t = newTracer(\"generateReport\");",
      "right" : "Tracer t = newTracer(\"generateReport\");",
      "info" : "VariableDeclarationStatement[17537-17576]:VariableDeclarationStatement[17568-17607]"
    }, {
      "left" : "errorManager.generateReport();",
      "right" : "errorManager.generateReport();",
      "info" : "ExpressionStatement[17583-17613]:ExpressionStatement[17614-17644]"
    }, {
      "left" : "stopTracer(t, \"generateReport\");",
      "right" : "stopTracer(t, \"generateReport\");",
      "info" : "ExpressionStatement[17620-17652]:ExpressionStatement[17651-17683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17691-17869]:Block[17722-17900]"
    }, {
      "left" : "return runInCompilerThread(new Callable<Result>() {\n      public Result call() throws Exception {\n        compileInternal();\n        return getResult();\n      }\n    });",
      "right" : "return runInCompilerThread(new Callable<Result>() {\n      public Result call() throws Exception {\n        compileInternal();\n        return getResult();\n      }\n    });",
      "info" : "ReturnStatement[17697-17865]:ReturnStatement[17728-17896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17793-17857]:Block[17824-17888]"
    }, {
      "left" : "compileInternal();",
      "right" : "compileInternal();",
      "info" : "ExpressionStatement[17803-17821]:ExpressionStatement[17834-17852]"
    }, {
      "left" : "return getResult();",
      "right" : "return getResult();",
      "info" : "ReturnStatement[17830-17849]:ReturnStatement[17861-17880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18007-18036]:Block[18038-18067]"
    }, {
      "left" : "useThreads = false;",
      "right" : "useThreads = false;",
      "info" : "ExpressionStatement[18013-18032]:ExpressionStatement[18044-18063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18102-18176]:Block[18133-18207]"
    }, {
      "left" : "return runCallable(callable, useThreads, options.tracer.isOn());",
      "right" : "return runCallable(callable, useThreads, options.tracer.isOn());",
      "info" : "ReturnStatement[18108-18172]:ReturnStatement[18139-18203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18247-18299]:Block[18278-18330]"
    }, {
      "left" : "return runCallable(callable, true, false);",
      "right" : "return runCallable(callable, true, false);",
      "info" : "ReturnStatement[18253-18295]:ReturnStatement[18284-18326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18440-19882]:Block[18471-19913]"
    }, {
      "left" : "final boolean dumpTraceReport = trace;",
      "right" : "final boolean dumpTraceReport = trace;",
      "info" : "VariableDeclarationStatement[18828-18866]:VariableDeclarationStatement[18859-18897]"
    }, {
      "left" : "final Object[] result = new Object[1];",
      "right" : "final Object[] result = new Object[1];",
      "info" : "VariableDeclarationStatement[18871-18909]:VariableDeclarationStatement[18902-18940]"
    }, {
      "left" : "final Throwable[] exception = new Throwable[1];",
      "right" : "final Throwable[] exception = new Throwable[1];",
      "info" : "VariableDeclarationStatement[18914-18961]:VariableDeclarationStatement[18945-18992]"
    }, {
      "left" : "Runnable runnable = new Runnable() {\n      public void run() {\n        try {\n          if (dumpTraceReport) {\n            Tracer.initCurrentThreadTrace();\n          }\n          result[0] = callable.call();\n        } catch (Throwable e) {\n          exception[0] = e;\n        } finally {\n          if (dumpTraceReport) {\n            Tracer.logAndClearCurrentThreadTrace();\n          }\n        }\n      }\n    };",
      "right" : "Runnable runnable = new Runnable() {\n      public void run() {\n        try {\n          if (dumpTraceReport) {\n            Tracer.initCurrentThreadTrace();\n          }\n          result[0] = callable.call();\n        } catch (Throwable e) {\n          exception[0] = e;\n        } finally {\n          if (dumpTraceReport) {\n            Tracer.logAndClearCurrentThreadTrace();\n          }\n        }\n      }\n    };",
      "info" : "VariableDeclarationStatement[18966-19373]:VariableDeclarationStatement[18997-19404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19027-19366]:Block[19058-19397]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19037-19358]:TryStatement[19068-19389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19041-19181]:Block[19072-19212]"
    }, {
      "left" : "if (dumpTraceReport)",
      "right" : "if (dumpTraceReport)",
      "info" : "IfStatement[19053-19132]:IfStatement[19084-19163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19074-19132]:Block[19105-19163]"
    }, {
      "left" : "Tracer.initCurrentThreadTrace();",
      "right" : "Tracer.initCurrentThreadTrace();",
      "info" : "ExpressionStatement[19088-19120]:ExpressionStatement[19119-19151]"
    }, {
      "left" : "result[0] = callable.call();",
      "right" : "result[0] = callable.call();",
      "info" : "ExpressionStatement[19143-19171]:ExpressionStatement[19174-19202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19202-19241]:Block[19233-19272]"
    }, {
      "left" : "exception[0] = e;",
      "right" : "exception[0] = e;",
      "info" : "ExpressionStatement[19214-19231]:ExpressionStatement[19245-19262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19250-19358]:Block[19281-19389]"
    }, {
      "left" : "if (dumpTraceReport)",
      "right" : "if (dumpTraceReport)",
      "info" : "IfStatement[19262-19348]:IfStatement[19293-19379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19283-19348]:Block[19314-19379]"
    }, {
      "left" : "Tracer.logAndClearCurrentThreadTrace();",
      "right" : "Tracer.logAndClearCurrentThreadTrace();",
      "info" : "ExpressionStatement[19297-19336]:ExpressionStatement[19328-19367]"
    }, {
      "left" : "if (useLargeStackThread)",
      "right" : "if (useLargeStackThread)",
      "info" : "IfStatement[19379-19704]:IfStatement[19410-19735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19404-19669]:Block[19435-19700]"
    }, {
      "left" : "Thread th = new Thread(null, runnable, \"jscompiler\", COMPILER_STACK_SIZE);",
      "right" : "Thread th = new Thread(null, runnable, \"jscompiler\", COMPILER_STACK_SIZE);",
      "info" : "VariableDeclarationStatement[19412-19486]:VariableDeclarationStatement[19443-19517]"
    }, {
      "left" : "th.start();",
      "right" : "th.start();",
      "info" : "ExpressionStatement[19493-19504]:ExpressionStatement[19524-19535]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[19511-19663]:WhileStatement[19542-19694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19524-19663]:Block[19555-19694]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19534-19655]:TryStatement[19565-19686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19538-19587]:Block[19569-19618]"
    }, {
      "left" : "th.join();",
      "right" : "th.join();",
      "info" : "ExpressionStatement[19550-19560]:ExpressionStatement[19581-19591]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19571-19577]:BreakStatement[19602-19608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19624-19655]:Block[19655-19686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19675-19704]:Block[19706-19735]"
    }, {
      "left" : "runnable.run();",
      "right" : "runnable.run();",
      "info" : "ExpressionStatement[19683-19698]:ExpressionStatement[19714-19729]"
    }, {
      "left" : "if (exception[0] != null)",
      "right" : "if (exception[0] != null)",
      "info" : "IfStatement[19770-19851]:IfStatement[19801-19882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19796-19851]:Block[19827-19882]"
    }, {
      "left" : "throw new RuntimeException(exception[0]);",
      "right" : "throw new RuntimeException(exception[0]);",
      "info" : "ThrowStatement[19804-19845]:ThrowStatement[19835-19876]"
    }, {
      "left" : "return (T) result[0];",
      "right" : "return (T) result[0];",
      "info" : "ReturnStatement[19857-19878]:ReturnStatement[19888-19909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19917-20714]:Block[19948-20745]"
    }, {
      "left" : "parse();",
      "right" : "parse();",
      "info" : "ExpressionStatement[19923-19931]:ExpressionStatement[19954-19962]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[19936-19974]:IfStatement[19967-20005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19953-19974]:Block[19984-20005]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[19961-19968]:ReturnStatement[19992-19999]"
    }, {
      "left" : "if (!precheck())",
      "right" : "if (!precheck())",
      "info" : "IfStatement[19980-20018]:IfStatement[20011-20049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19997-20018]:Block[20028-20049]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[20005-20012]:ReturnStatement[20036-20043]"
    }, {
      "left" : "if (options.nameAnonymousFunctionsOnly)",
      "right" : "if (options.nameAnonymousFunctionsOnly)",
      "info" : "IfStatement[20024-20171]:IfStatement[20055-20202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20064-20171]:Block[20095-20202]"
    }, {
      "left" : "check();",
      "right" : "check();",
      "info" : "ExpressionStatement[20143-20151]:ExpressionStatement[20174-20182]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[20158-20165]:ReturnStatement[20189-20196]"
    }, {
      "left" : "if (!options.skipAllPasses)",
      "right" : "if (!options.skipAllPasses)",
      "info" : "IfStatement[20177-20540]:IfStatement[20208-20571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20205-20540]:Block[20236-20571]"
    }, {
      "left" : "check();",
      "right" : "check();",
      "info" : "ExpressionStatement[20213-20221]:ExpressionStatement[20244-20252]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[20228-20270]:IfStatement[20259-20301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20245-20270]:Block[20276-20301]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[20255-20262]:ReturnStatement[20286-20293]"
    }, {
      "left" : "if (options.isExternExportsEnabled()\n          || options.externExportsPath != null)",
      "right" : "if (options.isExternExportsEnabled()\n          || options.externExportsPath != null)",
      "info" : "IfStatement[20278-20397]:IfStatement[20309-20428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20363-20397]:Block[20394-20428]"
    }, {
      "left" : "externExports();",
      "right" : "externExports();",
      "info" : "ExpressionStatement[20373-20389]:ExpressionStatement[20404-20420]"
    }, {
      "left" : "if (!options.ideMode)",
      "right" : "if (!options.ideMode)",
      "info" : "IfStatement[20483-20534]:IfStatement[20514-20565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20505-20534]:Block[20536-20565]"
    }, {
      "left" : "optimize();",
      "right" : "optimize();",
      "info" : "ExpressionStatement[20515-20526]:ExpressionStatement[20546-20557]"
    }, {
      "left" : "if (options.recordFunctionInformation)",
      "right" : "if (options.recordFunctionInformation)",
      "info" : "IfStatement[20546-20627]:IfStatement[20577-20658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20585-20627]:Block[20616-20658]"
    }, {
      "left" : "recordFunctionInformation();",
      "right" : "recordFunctionInformation();",
      "info" : "ExpressionStatement[20593-20621]:ExpressionStatement[20624-20652]"
    }, {
      "left" : "if (options.devMode == DevMode.START_AND_END)",
      "right" : "if (options.devMode == DevMode.START_AND_END)",
      "info" : "IfStatement[20633-20710]:IfStatement[20664-20741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20679-20710]:Block[20710-20741]"
    }, {
      "left" : "runSanityCheck();",
      "right" : "runSanityCheck();",
      "info" : "ExpressionStatement[20687-20704]:ExpressionStatement[20718-20735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20738-20762]:Block[20769-20793]"
    }, {
      "left" : "parseInputs();",
      "right" : "parseInputs();",
      "info" : "ExpressionStatement[20744-20758]:ExpressionStatement[20775-20789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20793-20892]:Block[20824-20923]"
    }, {
      "left" : "if (passes == null)",
      "right" : "if (passes == null)",
      "info" : "IfStatement[20799-20869]:IfStatement[20830-20900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20819-20869]:Block[20850-20900]"
    }, {
      "left" : "passes = createPassConfigInternal();",
      "right" : "passes = createPassConfigInternal();",
      "info" : "ExpressionStatement[20827-20863]:ExpressionStatement[20858-20894]"
    }, {
      "left" : "return passes;",
      "right" : "return passes;",
      "info" : "ReturnStatement[20874-20888]:ReturnStatement[20905-20919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21043-21091]:Block[21074-21122]"
    }, {
      "left" : "return new DefaultPassConfig(options);",
      "right" : "return new DefaultPassConfig(options);",
      "info" : "ReturnStatement[21049-21087]:ReturnStatement[21080-21118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21341-21839]:Block[21372-21870]"
    }, {
      "left" : "Preconditions.checkNotNull(passes);",
      "right" : "Preconditions.checkNotNull(passes);",
      "info" : "ExpressionStatement[21656-21691]:ExpressionStatement[21687-21722]"
    }, {
      "left" : "if (this.passes != null)",
      "right" : "if (this.passes != null)",
      "info" : "IfStatement[21697-21809]:IfStatement[21728-21840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21722-21809]:Block[21753-21840]"
    }, {
      "left" : "throw new IllegalStateException(\"this.passes has already been assigned\");",
      "right" : "throw new IllegalStateException(\"this.passes has already been assigned\");",
      "info" : "ThrowStatement[21730-21803]:ThrowStatement[21761-21834]"
    }, {
      "left" : "this.passes = passes;",
      "right" : "this.passes = passes;",
      "info" : "ExpressionStatement[21814-21835]:ExpressionStatement[21845-21866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22057-22079]:Block[22088-22110]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22063-22075]:ReturnStatement[22094-22106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22103-23159]:Block[22134-23190]"
    }, {
      "left" : "runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);",
      "right" : "runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);",
      "info" : "ExpressionStatement[22109-22164]:ExpressionStatement[22140-22195]"
    }, {
      "left" : "PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);",
      "right" : "PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);",
      "info" : "VariableDeclarationStatement[22170-22236]:VariableDeclarationStatement[22201-22267]"
    }, {
      "left" : "if (options.devMode == DevMode.EVERY_PASS)",
      "right" : "if (options.devMode == DevMode.EVERY_PASS)",
      "info" : "IfStatement[22241-22341]:IfStatement[22272-22372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22284-22341]:Block[22315-22372]"
    }, {
      "left" : "phaseOptimizer.setSanityCheck(sanityCheck);",
      "right" : "phaseOptimizer.setSanityCheck(sanityCheck);",
      "info" : "ExpressionStatement[22292-22335]:ExpressionStatement[22323-22366]"
    }, {
      "left" : "phaseOptimizer.consume(getPassConfig().getChecks());",
      "right" : "phaseOptimizer.consume(getPassConfig().getChecks());",
      "info" : "ExpressionStatement[22346-22398]:ExpressionStatement[22377-22429]"
    }, {
      "left" : "phaseOptimizer.process(externsRoot, jsRoot);",
      "right" : "phaseOptimizer.process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[22403-22447]:ExpressionStatement[22434-22478]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[22452-22490]:IfStatement[22483-22521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22469-22490]:Block[22500-22521]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[22477-22484]:ReturnStatement[22508-22515]"
    }, {
      "left" : "if (options.nameAnonymousFunctionsOnly)",
      "right" : "if (options.nameAnonymousFunctionsOnly)",
      "info" : "IfStatement[22573-22634]:IfStatement[22604-22665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22613-22634]:Block[22644-22665]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[22621-22628]:ReturnStatement[22652-22659]"
    }, {
      "left" : "if (options.removeTryCatchFinally)",
      "right" : "if (options.removeTryCatchFinally)",
      "info" : "IfStatement[22640-22713]:IfStatement[22671-22744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22675-22713]:Block[22706-22744]"
    }, {
      "left" : "removeTryCatchFinally();",
      "right" : "removeTryCatchFinally();",
      "info" : "ExpressionStatement[22683-22707]:ExpressionStatement[22714-22738]"
    }, {
      "left" : "if (options.getTweakProcessing().shouldStrip() ||\n        !options.stripTypes.isEmpty() ||\n        !options.stripNameSuffixes.isEmpty() ||\n        !options.stripTypePrefixes.isEmpty() ||\n        !options.stripNamePrefixes.isEmpty())",
      "right" : "if (options.getTweakProcessing().shouldStrip() ||\n        !options.stripTypes.isEmpty() ||\n        !options.stripNameSuffixes.isEmpty() ||\n        !options.stripTypePrefixes.isEmpty() ||\n        !options.stripNamePrefixes.isEmpty())",
      "info" : "IfStatement[22719-23087]:IfStatement[22750-23118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22952-23087]:Block[22983-23118]"
    }, {
      "left" : "stripCode(options.stripTypes, options.stripNameSuffixes,\n          options.stripTypePrefixes, options.stripNamePrefixes);",
      "right" : "stripCode(options.stripTypes, options.stripNameSuffixes,\n          options.stripTypePrefixes, options.stripNamePrefixes);",
      "info" : "ExpressionStatement[22960-23081]:ExpressionStatement[22991-23112]"
    }, {
      "left" : "runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);",
      "right" : "runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);",
      "info" : "ExpressionStatement[23093-23155]:ExpressionStatement[23124-23186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23192-23425]:Block[23223-23456]"
    }, {
      "left" : "logger.info(\"Creating extern file for exports\");",
      "right" : "logger.info(\"Creating extern file for exports\");",
      "info" : "ExpressionStatement[23198-23246]:ExpressionStatement[23229-23277]"
    }, {
      "left" : "startPass(\"externExports\");",
      "right" : "startPass(\"externExports\");",
      "info" : "ExpressionStatement[23251-23278]:ExpressionStatement[23282-23309]"
    }, {
      "left" : "ExternExportsPass pass = new ExternExportsPass(this);",
      "right" : "ExternExportsPass pass = new ExternExportsPass(this);",
      "info" : "VariableDeclarationStatement[23284-23337]:VariableDeclarationStatement[23315-23368]"
    }, {
      "left" : "process(pass);",
      "right" : "process(pass);",
      "info" : "ExpressionStatement[23342-23356]:ExpressionStatement[23373-23387]"
    }, {
      "left" : "externExports = pass.getGeneratedExterns();",
      "right" : "externExports = pass.getGeneratedExterns();",
      "info" : "ExpressionStatement[23362-23405]:ExpressionStatement[23393-23436]"
    }, {
      "left" : "endPass();",
      "right" : "endPass();",
      "info" : "ExpressionStatement[23411-23421]:ExpressionStatement[23442-23452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23470-23511]:Block[23501-23542]"
    }, {
      "left" : "p.process(externsRoot, jsRoot);",
      "right" : "p.process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[23476-23507]:ExpressionStatement[23507-23538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23684-23731]:Block[23715-23762]"
    }, {
      "left" : "return new SanityCheck(compiler);",
      "right" : "return new SanityCheck(compiler);",
      "info" : "ReturnStatement[23692-23725]:ReturnStatement[23723-23756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23772-23856]:Block[23803-23887]"
    }, {
      "left" : "if (options.devMode == DevMode.EVERY_PASS)",
      "right" : "if (options.devMode == DevMode.EVERY_PASS)",
      "info" : "IfStatement[23778-23852]:IfStatement[23809-23883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23821-23852]:Block[23852-23883]"
    }, {
      "left" : "runSanityCheck();",
      "right" : "runSanityCheck();",
      "info" : "ExpressionStatement[23829-23846]:ExpressionStatement[23860-23877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23890-23954]:Block[23921-23985]"
    }, {
      "left" : "sanityCheck.create(this).process(externsRoot, jsRoot);",
      "right" : "sanityCheck.create(this).process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[23896-23950]:ExpressionStatement[23927-23981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24063-24233]:Block[24094-24264]"
    }, {
      "left" : "logger.info(\"Remove try/catch/finally\");",
      "right" : "logger.info(\"Remove try/catch/finally\");",
      "info" : "ExpressionStatement[24069-24109]:ExpressionStatement[24100-24140]"
    }, {
      "left" : "startPass(\"removeTryCatchFinally\");",
      "right" : "startPass(\"removeTryCatchFinally\");",
      "info" : "ExpressionStatement[24114-24149]:ExpressionStatement[24145-24180]"
    }, {
      "left" : "RemoveTryCatch r = new RemoveTryCatch(this);",
      "right" : "RemoveTryCatch r = new RemoveTryCatch(this);",
      "info" : "VariableDeclarationStatement[24154-24198]:VariableDeclarationStatement[24185-24229]"
    }, {
      "left" : "process(r);",
      "right" : "process(r);",
      "info" : "ExpressionStatement[24203-24214]:ExpressionStatement[24234-24245]"
    }, {
      "left" : "endPass();",
      "right" : "endPass();",
      "info" : "ExpressionStatement[24219-24229]:ExpressionStatement[24250-24260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24515-24818]:Block[24546-24849]"
    }, {
      "left" : "logger.info(\"Strip code\");",
      "right" : "logger.info(\"Strip code\");",
      "info" : "ExpressionStatement[24521-24547]:ExpressionStatement[24552-24578]"
    }, {
      "left" : "startPass(\"stripCode\");",
      "right" : "startPass(\"stripCode\");",
      "info" : "ExpressionStatement[24552-24575]:ExpressionStatement[24583-24606]"
    }, {
      "left" : "StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n        stripTypePrefixes, stripNamePrefixes);",
      "right" : "StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n        stripTypePrefixes, stripNamePrefixes);",
      "info" : "VariableDeclarationStatement[24580-24691]:VariableDeclarationStatement[24611-24722]"
    }, {
      "left" : "if (options.getTweakProcessing().shouldStrip())",
      "right" : "if (options.getTweakProcessing().shouldStrip())",
      "info" : "IfStatement[24696-24783]:IfStatement[24727-24814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24744-24783]:Block[24775-24814]"
    }, {
      "left" : "r.enableTweakStripping();",
      "right" : "r.enableTweakStripping();",
      "info" : "ExpressionStatement[24752-24777]:ExpressionStatement[24783-24808]"
    }, {
      "left" : "process(r);",
      "right" : "process(r);",
      "info" : "ExpressionStatement[24788-24799]:ExpressionStatement[24819-24830]"
    }, {
      "left" : "endPass();",
      "right" : "endPass();",
      "info" : "ExpressionStatement[24804-24814]:ExpressionStatement[24835-24845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24975-25258]:Block[25006-25289]"
    }, {
      "left" : "if (options.customPasses != null)",
      "right" : "if (options.customPasses != null)",
      "info" : "IfStatement[24981-25254]:IfStatement[25012-25285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25015-25254]:Block[25046-25285]"
    }, {
      "left" : "Tracer t = newTracer(\"runCustomPasses\");",
      "right" : "Tracer t = newTracer(\"runCustomPasses\");",
      "info" : "VariableDeclarationStatement[25023-25063]:VariableDeclarationStatement[25054-25094]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[25070-25248]:TryStatement[25101-25279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25074-25188]:Block[25105-25219]"
    }, {
      "left" : "for (CompilerPass p : options.customPasses.get(executionTime))",
      "right" : "for (CompilerPass p : options.customPasses.get(executionTime))",
      "info" : "EnhancedForStatement[25084-25180]:EnhancedForStatement[25115-25211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25147-25180]:Block[25178-25211]"
    }, {
      "left" : "process(p);",
      "right" : "process(p);",
      "info" : "ExpressionStatement[25159-25170]:ExpressionStatement[25190-25201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25197-25248]:Block[25228-25279]"
    }, {
      "left" : "stopTracer(t, \"runCustomPasses\");",
      "right" : "stopTracer(t, \"runCustomPasses\");",
      "info" : "ExpressionStatement[25207-25240]:ExpressionStatement[25238-25271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25423-25554]:Block[25454-25585]"
    }, {
      "left" : "Preconditions.checkState(currentTracer == null);",
      "right" : "Preconditions.checkState(currentTracer == null);",
      "info" : "ExpressionStatement[25429-25477]:ExpressionStatement[25460-25508]"
    }, {
      "left" : "currentPassName = passName;",
      "right" : "currentPassName = passName;",
      "info" : "ExpressionStatement[25482-25509]:ExpressionStatement[25513-25540]"
    }, {
      "left" : "currentTracer = newTracer(passName);",
      "right" : "currentTracer = newTracer(passName);",
      "info" : "ExpressionStatement[25514-25550]:ExpressionStatement[25545-25581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25615-25901]:Block[25646-25932]"
    }, {
      "left" : "Preconditions.checkState(currentTracer != null,\n        \"Tracer should not be null at the end of a pass.\");",
      "right" : "Preconditions.checkState(currentTracer != null,\n        \"Tracer should not be null at the end of a pass.\");",
      "info" : "ExpressionStatement[25621-25728]:ExpressionStatement[25652-25759]"
    }, {
      "left" : "stopTracer(currentTracer, currentPassName);",
      "right" : "stopTracer(currentTracer, currentPassName);",
      "info" : "ExpressionStatement[25733-25776]:ExpressionStatement[25764-25807]"
    }, {
      "left" : "String passToCheck = currentPassName;",
      "right" : "String passToCheck = currentPassName;",
      "info" : "VariableDeclarationStatement[25781-25818]:VariableDeclarationStatement[25812-25849]"
    }, {
      "left" : "currentPassName = null;",
      "right" : "currentPassName = null;",
      "info" : "ExpressionStatement[25823-25846]:ExpressionStatement[25854-25877]"
    }, {
      "left" : "currentTracer = null;",
      "right" : "currentTracer = null;",
      "info" : "ExpressionStatement[25851-25872]:ExpressionStatement[25882-25903]"
    }, {
      "left" : "maybeSanityCheck();",
      "right" : "maybeSanityCheck();",
      "info" : "ExpressionStatement[25878-25897]:ExpressionStatement[25909-25928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26002-26238]:Block[26033-26269]"
    }, {
      "left" : "String comment = passName\n        + (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");",
      "right" : "String comment = passName\n        + (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");",
      "info" : "VariableDeclarationStatement[26008-26110]:VariableDeclarationStatement[26039-26141]"
    }, {
      "left" : "if (options.tracer.isOn())",
      "right" : "if (options.tracer.isOn())",
      "info" : "IfStatement[26115-26190]:IfStatement[26146-26221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26142-26190]:Block[26173-26221]"
    }, {
      "left" : "tracker.recordPassStart(passName);",
      "right" : "tracker.recordPassStart(passName);",
      "info" : "ExpressionStatement[26150-26184]:ExpressionStatement[26181-26215]"
    }, {
      "left" : "return new Tracer(\"Compiler\", comment);",
      "right" : "return new Tracer(\"Compiler\", comment);",
      "info" : "ReturnStatement[26195-26234]:ReturnStatement[26226-26265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26285-26405]:Block[26316-26436]"
    }, {
      "left" : "long result = t.stop();",
      "right" : "long result = t.stop();",
      "info" : "VariableDeclarationStatement[26291-26314]:VariableDeclarationStatement[26322-26345]"
    }, {
      "left" : "if (options.tracer.isOn())",
      "right" : "if (options.tracer.isOn())",
      "info" : "IfStatement[26319-26401]:IfStatement[26350-26432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26346-26401]:Block[26377-26432]"
    }, {
      "left" : "tracker.recordPassStop(passName, result);",
      "right" : "tracker.recordPassStop(passName, result);",
      "info" : "ExpressionStatement[26354-26395]:ExpressionStatement[26385-26426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26491-26836]:Block[26522-26867]"
    }, {
      "left" : "PassConfig.State state = getPassConfig().getIntermediateState();",
      "right" : "PassConfig.State state = getPassConfig().getIntermediateState();",
      "info" : "VariableDeclarationStatement[26497-26561]:VariableDeclarationStatement[26528-26592]"
    }, {
      "left" : "return new Result(getErrors(), getWarnings(), debugLog.toString(),\n        state.variableMap, state.propertyMap,\n        state.anonymousFunctionNameMap, state.stringMap, functionInformationMap,\n        sourceMap, externExports, state.cssNames, state.idGeneratorMap);",
      "right" : "return new Result(getErrors(), getWarnings(), debugLog.toString(),\n        state.variableMap, state.propertyMap,\n        state.anonymousFunctionNameMap, state.stringMap, functionInformationMap,\n        sourceMap, externExports, state.cssNames, state.idGeneratorMap);",
      "info" : "ReturnStatement[26566-26832]:ReturnStatement[26597-26863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26951-26980]:Block[26982-27011]"
    }, {
      "left" : "return getErrors();",
      "right" : "return getErrors();",
      "info" : "ReturnStatement[26957-26976]:ReturnStatement[26988-27007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27072-27114]:Block[27103-27145]"
    }, {
      "left" : "return errorManager.getErrors();",
      "right" : "return errorManager.getErrors();",
      "info" : "ReturnStatement[27078-27110]:ReturnStatement[27109-27141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27210-27254]:Block[27241-27285]"
    }, {
      "left" : "return errorManager.getWarnings();",
      "right" : "return errorManager.getWarnings();",
      "info" : "ReturnStatement[27216-27250]:ReturnStatement[27247-27281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27292-27325]:Block[27323-27356]"
    }, {
      "left" : "return externAndJsRoot;",
      "right" : "return externAndJsRoot;",
      "info" : "ReturnStatement[27298-27321]:ReturnStatement[27329-27352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27419-27451]:Block[27450-27482]"
    }, {
      "left" : "return uniqueNameId++;",
      "right" : "return uniqueNameId++;",
      "info" : "ReturnStatement[27425-27447]:ReturnStatement[27456-27478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27552-27579]:Block[27583-27610]"
    }, {
      "left" : "uniqueNameId = 0;",
      "right" : "uniqueNameId = 0;",
      "info" : "ExpressionStatement[27558-27575]:ExpressionStatement[27589-27606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27638-27810]:Block[27669-27841]"
    }, {
      "left" : "final Compiler self = this;",
      "right" : "final Compiler self = this;",
      "info" : "VariableDeclarationStatement[27644-27671]:VariableDeclarationStatement[27675-27702]"
    }, {
      "left" : "return new Supplier<String>() {\n      public String get() {\n        return String.valueOf(self.nextUniqueNameId());\n      }\n    };",
      "right" : "return new Supplier<String>() {\n      public String get() {\n        return String.valueOf(self.nextUniqueNameId());\n      }\n    };",
      "info" : "ReturnStatement[27676-27806]:ReturnStatement[27707-27837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27734-27799]:Block[27765-27830]"
    }, {
      "left" : "return String.valueOf(self.nextUniqueNameId());",
      "right" : "return String.valueOf(self.nextUniqueNameId());",
      "info" : "ReturnStatement[27744-27791]:ReturnStatement[27775-27822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27877-28177]:Block[27908-28208]"
    }, {
      "left" : "if (options.ambiguateProperties ||\n        options.disambiguateProperties)",
      "right" : "if (options.ambiguateProperties ||\n        options.disambiguateProperties)",
      "info" : "IfStatement[27883-28173]:IfStatement[27914-28204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27958-28124]:Block[27989-28155]"
    }, {
      "left" : "return n1.isEquivalentToTyped(n2);",
      "right" : "return n1.isEquivalentToTyped(n2);",
      "info" : "ReturnStatement[28084-28118]:ReturnStatement[28115-28149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28130-28173]:Block[28161-28204]"
    }, {
      "left" : "return n1.isEquivalentTo(n2);",
      "right" : "return n1.isEquivalentTo(n2);",
      "info" : "ReturnStatement[28138-28167]:ReturnStatement[28169-28198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28543-28583]:Block[28574-28614]"
    }, {
      "left" : "return inputsByName.get(name);",
      "right" : "return inputsByName.get(name);",
      "info" : "ReturnStatement[28549-28579]:ReturnStatement[28580-28610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28729-28953]:Block[28760-28984]"
    }, {
      "left" : "CompilerInput input = getInput(name);",
      "right" : "CompilerInput input = getInput(name);",
      "info" : "VariableDeclarationStatement[28735-28772]:VariableDeclarationStatement[28766-28803]"
    }, {
      "left" : "if (input == null)",
      "right" : "if (input == null)",
      "info" : "IfStatement[28777-28817]:IfStatement[28808-28848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28796-28817]:Block[28827-28848]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[28804-28811]:ReturnStatement[28835-28842]"
    }, {
      "left" : "inputsByName.remove(name);",
      "right" : "inputsByName.remove(name);",
      "info" : "ExpressionStatement[28822-28848]:ExpressionStatement[28853-28879]"
    }, {
      "left" : "Node root = input.getAstRoot(this);",
      "right" : "Node root = input.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[28853-28888]:VariableDeclarationStatement[28884-28919]"
    }, {
      "left" : "if (root != null)",
      "right" : "if (root != null)",
      "info" : "IfStatement[28893-28949]:IfStatement[28924-28980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28911-28949]:Block[28942-28980]"
    }, {
      "left" : "root.detachFromParent();",
      "right" : "root.detachFromParent();",
      "info" : "ExpressionStatement[28919-28943]:ExpressionStatement[28950-28974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29018-29364]:Block[29049-29395]"
    }, {
      "left" : "if (inputsByName.containsKey(name))",
      "right" : "if (inputsByName.containsKey(name))",
      "info" : "IfStatement[29024-29146]:IfStatement[29055-29177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29060-29146]:Block[29091-29177]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Conflicting externs name: \" + name);",
      "right" : "throw new IllegalArgumentException(\"Conflicting externs name: \" + name);",
      "info" : "ThrowStatement[29068-29140]:ThrowStatement[29099-29171]"
    }, {
      "left" : "SourceAst ast = new SyntheticAst(name);",
      "right" : "SourceAst ast = new SyntheticAst(name);",
      "info" : "VariableDeclarationStatement[29151-29190]:VariableDeclarationStatement[29182-29221]"
    }, {
      "left" : "CompilerInput input = new CompilerInput(ast, name, true);",
      "right" : "CompilerInput input = new CompilerInput(ast, name, true);",
      "info" : "VariableDeclarationStatement[29195-29252]:VariableDeclarationStatement[29226-29283]"
    }, {
      "left" : "inputsByName.put(name, input);",
      "right" : "inputsByName.put(name, input);",
      "info" : "ExpressionStatement[29257-29287]:ExpressionStatement[29288-29318]"
    }, {
      "left" : "externsRoot.addChildToFront(ast.getAstRoot(this));",
      "right" : "externsRoot.addChildToFront(ast.getAstRoot(this));",
      "info" : "ExpressionStatement[29292-29342]:ExpressionStatement[29323-29373]"
    }, {
      "left" : "return input;",
      "right" : "return input;",
      "info" : "ReturnStatement[29347-29360]:ReturnStatement[29378-29391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29487-29723]:Block[29518-29754]"
    }, {
      "left" : "String sourceName = ast.getSourceFile().getName();",
      "right" : "String sourceName = ast.getSourceFile().getName();",
      "info" : "VariableDeclarationStatement[29493-29543]:VariableDeclarationStatement[29524-29574]"
    }, {
      "left" : "Preconditions.checkState(\n        getInput(sourceName) == null,\n        \"Duplicate input of name \" + sourceName);",
      "right" : "Preconditions.checkState(\n        getInput(sourceName) == null,\n        \"Duplicate input of name \" + sourceName);",
      "info" : "ExpressionStatement[29548-29661]:ExpressionStatement[29579-29692]"
    }, {
      "left" : "inputsByName.put(sourceName, new CompilerInput(ast));",
      "right" : "inputsByName.put(sourceName, new CompilerInput(ast));",
      "info" : "ExpressionStatement[29666-29719]:ExpressionStatement[29697-29750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30045-30822]:Block[30076-30853]"
    }, {
      "left" : "String sourceName = ast.getSourceFile().getName();",
      "right" : "String sourceName = ast.getSourceFile().getName();",
      "info" : "VariableDeclarationStatement[30051-30101]:VariableDeclarationStatement[30082-30132]"
    }, {
      "left" : "CompilerInput oldInput =\n        Preconditions.checkNotNull(\n            getInput(sourceName),\n            \"No input to replace: \" + sourceName);",
      "right" : "CompilerInput oldInput =\n        Preconditions.checkNotNull(\n            getInput(sourceName),\n            \"No input to replace: \" + sourceName);",
      "info" : "VariableDeclarationStatement[30106-30251]:VariableDeclarationStatement[30137-30282]"
    }, {
      "left" : "Node newRoot = ast.getAstRoot(this);",
      "right" : "Node newRoot = ast.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[30256-30292]:VariableDeclarationStatement[30287-30323]"
    }, {
      "left" : "if (newRoot == null)",
      "right" : "if (newRoot == null)",
      "info" : "IfStatement[30297-30345]:IfStatement[30328-30376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30318-30345]:Block[30349-30376]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30326-30339]:ReturnStatement[30357-30370]"
    }, {
      "left" : "Node oldRoot = oldInput.getAstRoot(this);",
      "right" : "Node oldRoot = oldInput.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[30351-30392]:VariableDeclarationStatement[30382-30423]"
    }, {
      "left" : "if (oldRoot != null)",
      "right" : "if (oldRoot != null)",
      "info" : "IfStatement[30397-30552]:IfStatement[30428-30583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30418-30483]:Block[30449-30514]"
    }, {
      "left" : "oldRoot.getParent().replaceChild(oldRoot, newRoot);",
      "right" : "oldRoot.getParent().replaceChild(oldRoot, newRoot);",
      "info" : "ExpressionStatement[30426-30477]:ExpressionStatement[30457-30508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30489-30552]:Block[30520-30583]"
    }, {
      "left" : "getRoot().getLastChild().addChildToBack(newRoot);",
      "right" : "getRoot().getLastChild().addChildToBack(newRoot);",
      "info" : "ExpressionStatement[30497-30546]:ExpressionStatement[30528-30577]"
    }, {
      "left" : "CompilerInput newInput = new CompilerInput(ast);",
      "right" : "CompilerInput newInput = new CompilerInput(ast);",
      "info" : "VariableDeclarationStatement[30558-30606]:VariableDeclarationStatement[30589-30637]"
    }, {
      "left" : "inputsByName.put(sourceName, newInput);",
      "right" : "inputsByName.put(sourceName, newInput);",
      "info" : "ExpressionStatement[30611-30650]:ExpressionStatement[30642-30681]"
    }, {
      "left" : "JSModule module = oldInput.getModule();",
      "right" : "JSModule module = oldInput.getModule();",
      "info" : "VariableDeclarationStatement[30656-30695]:VariableDeclarationStatement[30687-30726]"
    }, {
      "left" : "if (module != null)",
      "right" : "if (module != null)",
      "info" : "IfStatement[30700-30801]:IfStatement[30731-30832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30720-30801]:Block[30751-30832]"
    }, {
      "left" : "module.addAfter(newInput, oldInput);",
      "right" : "module.addAfter(newInput, oldInput);",
      "info" : "ExpressionStatement[30728-30764]:ExpressionStatement[30759-30795]"
    }, {
      "left" : "module.remove(oldInput);",
      "right" : "module.remove(oldInput);",
      "info" : "ExpressionStatement[30771-30795]:ExpressionStatement[30802-30826]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[30806-30818]:ReturnStatement[30837-30849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30869-30898]:Block[30900-30929]"
    }, {
      "left" : "return moduleGraph;",
      "right" : "return moduleGraph;",
      "info" : "ReturnStatement[30875-30894]:ReturnStatement[30906-30925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30954-31101]:Block[30985-31132]"
    }, {
      "left" : "if (typeRegistry == null)",
      "right" : "if (typeRegistry == null)",
      "info" : "IfStatement[30960-31072]:IfStatement[30991-31103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30986-31072]:Block[31017-31103]"
    }, {
      "left" : "typeRegistry = new JSTypeRegistry(oldErrorReporter, options.looseTypes);",
      "right" : "typeRegistry = new JSTypeRegistry(oldErrorReporter, options.looseTypes);",
      "info" : "ExpressionStatement[30994-31066]:ExpressionStatement[31025-31097]"
    }, {
      "left" : "return typeRegistry;",
      "right" : "return typeRegistry;",
      "info" : "ReturnStatement[31077-31097]:ReturnStatement[31108-31128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31153-31209]:Block[31184-31240]"
    }, {
      "left" : "return getPassConfig().getTypedScopeCreator();",
      "right" : "return getPassConfig().getTypedScopeCreator();",
      "info" : "ReturnStatement[31159-31205]:ReturnStatement[31190-31236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31252-31299]:Block[31283-31330]"
    }, {
      "left" : "return getPassConfig().getTopScope();",
      "right" : "return getPassConfig().getTopScope();",
      "info" : "ReturnStatement[31258-31295]:ReturnStatement[31289-31326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31381-31868]:Block[31412-31899]"
    }, {
      "left" : "if (abstractInterpreter == null)",
      "right" : "if (abstractInterpreter == null)",
      "info" : "IfStatement[31387-31832]:IfStatement[31418-31863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31420-31832]:Block[31451-31863]"
    }, {
      "left" : "ChainableReverseAbstractInterpreter interpreter =\n          new SemanticReverseAbstractInterpreter(\n              getCodingConvention(), getTypeRegistry());",
      "right" : "ChainableReverseAbstractInterpreter interpreter =\n          new SemanticReverseAbstractInterpreter(\n              getCodingConvention(), getTypeRegistry());",
      "info" : "VariableDeclarationStatement[31428-31584]:VariableDeclarationStatement[31459-31615]"
    }, {
      "left" : "if (options.closurePass)",
      "right" : "if (options.closurePass)",
      "info" : "IfStatement[31591-31785]:IfStatement[31622-31816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31616-31785]:Block[31647-31816]"
    }, {
      "left" : "interpreter = new ClosureReverseAbstractInterpreter(\n            getCodingConvention(), getTypeRegistry())\n            .append(interpreter).getFirst();",
      "right" : "interpreter = new ClosureReverseAbstractInterpreter(\n            getCodingConvention(), getTypeRegistry())\n            .append(interpreter).getFirst();",
      "info" : "ExpressionStatement[31626-31777]:ExpressionStatement[31657-31808]"
    }, {
      "left" : "abstractInterpreter = interpreter;",
      "right" : "abstractInterpreter = interpreter;",
      "info" : "ExpressionStatement[31792-31826]:ExpressionStatement[31823-31857]"
    }, {
      "left" : "return abstractInterpreter;",
      "right" : "return abstractInterpreter;",
      "info" : "ReturnStatement[31837-31864]:ReturnStatement[31868-31895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31917-32034]:Block[31948-32065]"
    }, {
      "left" : "if (typeValidator == null)",
      "right" : "if (typeValidator == null)",
      "info" : "IfStatement[31923-32004]:IfStatement[31954-32035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31950-32004]:Block[31981-32035]"
    }, {
      "left" : "typeValidator = new TypeValidator(this);",
      "right" : "typeValidator = new TypeValidator(this);",
      "info" : "ExpressionStatement[31958-31998]:ExpressionStatement[31989-32029]"
    }, {
      "left" : "return typeValidator;",
      "right" : "return typeValidator;",
      "info" : "ReturnStatement[32009-32030]:ReturnStatement[32040-32061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32385-36492]:Block[32416-36523]"
    }, {
      "left" : "boolean devMode = options.devMode != DevMode.OFF;",
      "right" : "boolean devMode = options.devMode != DevMode.OFF;",
      "info" : "VariableDeclarationStatement[32391-32440]:VariableDeclarationStatement[32422-32471]"
    }, {
      "left" : "if (externsRoot != null)",
      "right" : "if (externsRoot != null)",
      "info" : "IfStatement[32559-32627]:IfStatement[32590-32658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32584-32627]:Block[32615-32658]"
    }, {
      "left" : "externsRoot.detachChildren();",
      "right" : "externsRoot.detachChildren();",
      "info" : "ExpressionStatement[32592-32621]:ExpressionStatement[32623-32652]"
    }, {
      "left" : "if (jsRoot != null)",
      "right" : "if (jsRoot != null)",
      "info" : "IfStatement[32632-32690]:IfStatement[32663-32721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32652-32690]:Block[32683-32721]"
    }, {
      "left" : "jsRoot.detachChildren();",
      "right" : "jsRoot.detachChildren();",
      "info" : "ExpressionStatement[32660-32684]:ExpressionStatement[32691-32715]"
    }, {
      "left" : "jsRoot = new Node(Token.BLOCK);",
      "right" : "jsRoot = new Node(Token.BLOCK);",
      "info" : "ExpressionStatement[32726-32757]:ExpressionStatement[32757-32788]"
    }, {
      "left" : "jsRoot.setIsSyntheticBlock(true);",
      "right" : "jsRoot.setIsSyntheticBlock(true);",
      "info" : "ExpressionStatement[32762-32795]:ExpressionStatement[32793-32826]"
    }, {
      "left" : "externsRoot = new Node(Token.BLOCK);",
      "right" : "externsRoot = new Node(Token.BLOCK);",
      "info" : "ExpressionStatement[32801-32837]:ExpressionStatement[32832-32868]"
    }, {
      "left" : "externsRoot.setIsSyntheticBlock(true);",
      "right" : "externsRoot.setIsSyntheticBlock(true);",
      "info" : "ExpressionStatement[32842-32880]:ExpressionStatement[32873-32911]"
    }, {
      "left" : "externAndJsRoot = new Node(Token.BLOCK, externsRoot, jsRoot);",
      "right" : "externAndJsRoot = new Node(Token.BLOCK, externsRoot, jsRoot);",
      "info" : "ExpressionStatement[32886-32947]:ExpressionStatement[32917-32978]"
    }, {
      "left" : "externAndJsRoot.setIsSyntheticBlock(true);",
      "right" : "externAndJsRoot.setIsSyntheticBlock(true);",
      "info" : "ExpressionStatement[32952-32994]:ExpressionStatement[32983-33025]"
    }, {
      "left" : "if (options.tracer.isOn())",
      "right" : "if (options.tracer.isOn())",
      "info" : "IfStatement[33000-33182]:IfStatement[33031-33213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33027-33182]:Block[33058-33213]"
    }, {
      "left" : "tracker = new PerformanceTracker(jsRoot,\n          options.tracer == TracerMode.ALL);",
      "right" : "tracker = new PerformanceTracker(jsRoot,\n          options.tracer == TracerMode.ALL);",
      "info" : "ExpressionStatement[33035-33120]:ExpressionStatement[33066-33151]"
    }, {
      "left" : "addChangeHandler(tracker.getCodeChangeHandler());",
      "right" : "addChangeHandler(tracker.getCodeChangeHandler());",
      "info" : "ExpressionStatement[33127-33176]:ExpressionStatement[33158-33207]"
    }, {
      "left" : "Tracer tracer = newTracer(\"parseInputs\");",
      "right" : "Tracer tracer = newTracer(\"parseInputs\");",
      "info" : "VariableDeclarationStatement[33188-33229]:VariableDeclarationStatement[33219-33260]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[33235-36488]:TryStatement[33266-36519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33239-36431]:Block[33270-36462]"
    }, {
      "left" : "for (CompilerInput input : externs)",
      "right" : "for (CompilerInput input : externs)",
      "info" : "EnhancedForStatement[33279-33464]:EnhancedForStatement[33310-33495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33315-33464]:Block[33346-33495]"
    }, {
      "left" : "Node n = input.getAstRoot(this);",
      "right" : "Node n = input.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[33325-33357]:VariableDeclarationStatement[33356-33388]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[33366-33417]:IfStatement[33397-33448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33383-33417]:Block[33414-33448]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[33395-33407]:ReturnStatement[33426-33438]"
    }, {
      "left" : "externsRoot.addChildToBack(n);",
      "right" : "externsRoot.addChildToBack(n);",
      "info" : "ExpressionStatement[33426-33456]:ExpressionStatement[33457-33487]"
    }, {
      "left" : "if (options.manageClosureDependencies)",
      "right" : "if (options.manageClosureDependencies)",
      "info" : "IfStatement[33525-34484]:IfStatement[33556-34515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33564-34484]:Block[33595-34515]"
    }, {
      "left" : "for (CompilerInput input : inputs)",
      "right" : "for (CompilerInput input : inputs)",
      "info" : "EnhancedForStatement[33574-33920]:EnhancedForStatement[33605-33951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33609-33920]:Block[33640-33951]"
    }, {
      "left" : "input.setCompiler(this);",
      "right" : "input.setCompiler(this);",
      "info" : "ExpressionStatement[33621-33645]:ExpressionStatement[33652-33676]"
    }, {
      "left" : "for (String provide : input.getProvides())",
      "right" : "for (String provide : input.getProvides())",
      "info" : "EnhancedForStatement[33795-33910]:EnhancedForStatement[33826-33941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33838-33910]:Block[33869-33941]"
    }, {
      "left" : "getTypeRegistry().forwardDeclareType(provide);",
      "right" : "getTypeRegistry().forwardDeclareType(provide);",
      "info" : "ExpressionStatement[33852-33898]:ExpressionStatement[33883-33929]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[33930-34476]:TryStatement[33961-34507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33934-34151]:Block[33965-34182]"
    }, {
      "left" : "inputs =\n              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n              .manageDependencies(\n                  options.manageClosureDependenciesEntryPoints, inputs);",
      "right" : "inputs =\n              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n              .manageDependencies(\n                  options.manageClosureDependenciesEntryPoints, inputs);",
      "info" : "ExpressionStatement[33946-34141]:ExpressionStatement[33977-34172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34190-34323]:Block[34221-34354]"
    }, {
      "left" : "report(JSError.make(\n              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));",
      "right" : "report(JSError.make(\n              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));",
      "info" : "ExpressionStatement[34202-34290]:ExpressionStatement[34233-34321]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[34301-34313]:ReturnStatement[34332-34344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34358-34476]:Block[34389-34507]"
    }, {
      "left" : "report(JSError.make(\n              MISSING_ENTRY_ERROR, e.getMessage()));",
      "right" : "report(JSError.make(\n              MISSING_ENTRY_ERROR, e.getMessage()));",
      "info" : "ExpressionStatement[34370-34443]:ExpressionStatement[34401-34474]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[34454-34466]:ReturnStatement[34485-34497]"
    }, {
      "left" : "boolean staleInputs = false;",
      "right" : "boolean staleInputs = false;",
      "info" : "VariableDeclarationStatement[34550-34578]:VariableDeclarationStatement[34581-34609]"
    }, {
      "left" : "for (CompilerInput input : inputs)",
      "right" : "for (CompilerInput input : inputs)",
      "info" : "EnhancedForStatement[34585-35429]:EnhancedForStatement[34616-35460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34620-35429]:Block[34651-35460]"
    }, {
      "left" : "Node n = input.getAstRoot(this);",
      "right" : "Node n = input.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[34630-34662]:VariableDeclarationStatement[34661-34693]"
    }, {
      "left" : "if (n == null)",
      "right" : "if (n == null)",
      "info" : "IfStatement[34732-34778]:IfStatement[34763-34809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34747-34778]:Block[34778-34809]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[34759-34768]:ContinueStatement[34790-34799]"
    }, {
      "left" : "if (n.getJSDocInfo() != null)",
      "right" : "if (n.getJSDocInfo() != null)",
      "info" : "IfStatement[34788-35421]:IfStatement[34819-35452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34818-35421]:Block[34849-35452]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[34830-34864]:VariableDeclarationStatement[34861-34895]"
    }, {
      "left" : "if (info.isExterns())",
      "right" : "if (info.isExterns())",
      "info" : "IfStatement[34875-35411]:IfStatement[34906-35442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34897-35291]:Block[34928-35322]"
    }, {
      "left" : "externsRoot.addChildToBack(n);",
      "right" : "externsRoot.addChildToBack(n);",
      "info" : "ExpressionStatement[35101-35131]:ExpressionStatement[35132-35162]"
    }, {
      "left" : "input.setIsExtern(true);",
      "right" : "input.setIsExtern(true);",
      "info" : "ExpressionStatement[35144-35168]:ExpressionStatement[35175-35199]"
    }, {
      "left" : "input.getModule().remove(input);",
      "right" : "input.getModule().remove(input);",
      "info" : "ExpressionStatement[35182-35214]:ExpressionStatement[35213-35245]"
    }, {
      "left" : "externs.add(input);",
      "right" : "externs.add(input);",
      "info" : "ExpressionStatement[35228-35247]:ExpressionStatement[35259-35278]"
    }, {
      "left" : "staleInputs = true;",
      "right" : "staleInputs = true;",
      "info" : "ExpressionStatement[35260-35279]:ExpressionStatement[35291-35310]"
    }, {
      "left" : "if (info.isNoCompile())",
      "right" : "if (info.isNoCompile())",
      "info" : "IfStatement[35297-35411]:IfStatement[35328-35442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35321-35411]:Block[35352-35442]"
    }, {
      "left" : "input.getModule().remove(input);",
      "right" : "input.getModule().remove(input);",
      "info" : "ExpressionStatement[35335-35367]:ExpressionStatement[35366-35398]"
    }, {
      "left" : "staleInputs = true;",
      "right" : "staleInputs = true;",
      "info" : "ExpressionStatement[35380-35399]:ExpressionStatement[35411-35430]"
    }, {
      "left" : "if (staleInputs)",
      "right" : "if (staleInputs)",
      "info" : "IfStatement[35437-35534]:IfStatement[35468-35565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35454-35534]:Block[35485-35565]"
    }, {
      "left" : "fillEmptyModules(modules);",
      "right" : "fillEmptyModules(modules);",
      "info" : "ExpressionStatement[35464-35490]:ExpressionStatement[35495-35521]"
    }, {
      "left" : "rebuildInputsFromModules();",
      "right" : "rebuildInputsFromModules();",
      "info" : "ExpressionStatement[35499-35526]:ExpressionStatement[35530-35557]"
    }, {
      "left" : "for (CompilerInput input : inputs)",
      "right" : "for (CompilerInput input : inputs)",
      "info" : "EnhancedForStatement[35566-36340]:EnhancedForStatement[35597-36371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35601-36340]:Block[35632-36371]"
    }, {
      "left" : "Node n = input.getAstRoot(this);",
      "right" : "Node n = input.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[35611-35643]:VariableDeclarationStatement[35642-35674]"
    }, {
      "left" : "if (n == null)",
      "right" : "if (n == null)",
      "info" : "IfStatement[35652-35698]:IfStatement[35683-35729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35667-35698]:Block[35698-35729]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[35679-35688]:ContinueStatement[35710-35719]"
    }, {
      "left" : "if (devMode)",
      "right" : "if (devMode)",
      "info" : "IfStatement[35708-35826]:IfStatement[35739-35857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35721-35826]:Block[35752-35857]"
    }, {
      "left" : "runSanityCheck();",
      "right" : "runSanityCheck();",
      "info" : "ExpressionStatement[35733-35750]:ExpressionStatement[35764-35781]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[35761-35816]:IfStatement[35792-35847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35778-35816]:Block[35809-35847]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[35792-35804]:ReturnStatement[35823-35835]"
    }, {
      "left" : "if (options.sourceMapOutputPath != null ||\n            options.nameReferenceReportPath != null)",
      "right" : "if (options.sourceMapOutputPath != null ||\n            options.nameReferenceReportPath != null)",
      "info" : "IfStatement[35836-36297]:IfStatement[35867-36328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35932-36297]:Block[35963-36328]"
    }, {
      "left" : "SourceInformationAnnotator sia =\n              new SourceInformationAnnotator(\n                  input.getName(), options.devMode != DevMode.OFF);",
      "right" : "SourceInformationAnnotator sia =\n              new SourceInformationAnnotator(\n                  input.getName(), options.devMode != DevMode.OFF);",
      "info" : "VariableDeclarationStatement[36093-36239]:VariableDeclarationStatement[36124-36270]"
    }, {
      "left" : "NodeTraversal.traverse(this, n, sia);",
      "right" : "NodeTraversal.traverse(this, n, sia);",
      "info" : "ExpressionStatement[36250-36287]:ExpressionStatement[36281-36318]"
    }, {
      "left" : "jsRoot.addChildToBack(n);",
      "right" : "jsRoot.addChildToBack(n);",
      "info" : "ExpressionStatement[36307-36332]:ExpressionStatement[36338-36363]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[36348-36395]:IfStatement[36379-36426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36365-36395]:Block[36396-36426]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[36375-36387]:ReturnStatement[36406-36418]"
    }, {
      "left" : "return externAndJsRoot;",
      "right" : "return externAndJsRoot;",
      "info" : "ReturnStatement[36402-36425]:ReturnStatement[36433-36456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36440-36488]:Block[36471-36519]"
    }, {
      "left" : "stopTracer(tracer, \"parseInputs\");",
      "right" : "stopTracer(tracer, \"parseInputs\");",
      "info" : "ExpressionStatement[36448-36482]:ExpressionStatement[36479-36513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36533-36668]:Block[36564-36699]"
    }, {
      "left" : "initCompilerOptionsIfTesting();",
      "right" : "initCompilerOptionsIfTesting();",
      "info" : "ExpressionStatement[36539-36570]:ExpressionStatement[36570-36601]"
    }, {
      "left" : "addToDebugLog(\"Parsing: \" + file.getName());",
      "right" : "addToDebugLog(\"Parsing: \" + file.getName());",
      "info" : "ExpressionStatement[36575-36619]:ExpressionStatement[36606-36650]"
    }, {
      "left" : "return new JsAst(file).getAstRoot(this);",
      "right" : "return new JsAst(file).getAstRoot(this);",
      "info" : "ReturnStatement[36624-36664]:ReturnStatement[36655-36695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36719-36903]:Block[36750-36934]"
    }, {
      "left" : "CompilerInput input = new CompilerInput(\n        JSSourceFile.fromCode(\" [synthetic] \", js));",
      "right" : "CompilerInput input = new CompilerInput(\n        JSSourceFile.fromCode(\" [synthetic] \", js));",
      "info" : "VariableDeclarationStatement[36725-36818]:VariableDeclarationStatement[36756-36849]"
    }, {
      "left" : "inputsByName.put(input.getName(), input);",
      "right" : "inputsByName.put(input.getName(), input);",
      "info" : "ExpressionStatement[36823-36864]:ExpressionStatement[36854-36895]"
    }, {
      "left" : "return input.getAstRoot(this);",
      "right" : "return input.getAstRoot(this);",
      "info" : "ReturnStatement[36869-36899]:ReturnStatement[36900-36930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36943-37127]:Block[36974-37158]"
    }, {
      "left" : "if (options == null)",
      "right" : "if (options == null)",
      "info" : "IfStatement[36949-37123]:IfStatement[36980-37154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36970-37123]:Block[37001-37154]"
    }, {
      "left" : "initOptions(new CompilerOptions());",
      "right" : "initOptions(new CompilerOptions());",
      "info" : "ExpressionStatement[37082-37117]:ExpressionStatement[37113-37148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37195-37291]:Block[37226-37322]"
    }, {
      "left" : "initCompilerOptionsIfTesting();",
      "right" : "initCompilerOptionsIfTesting();",
      "info" : "ExpressionStatement[37201-37232]:ExpressionStatement[37232-37263]"
    }, {
      "left" : "return parse(JSSourceFile.fromCode(fileName, js));",
      "right" : "return parse(JSSourceFile.fromCode(fileName, js));",
      "info" : "ReturnStatement[37237-37287]:ReturnStatement[37268-37318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37337-37634]:Block[37368-37665]"
    }, {
      "left" : "initCompilerOptionsIfTesting();",
      "right" : "initCompilerOptionsIfTesting();",
      "info" : "ExpressionStatement[37343-37374]:ExpressionStatement[37374-37405]"
    }, {
      "left" : "CompilerInput input = new CompilerInput(\n        JSSourceFile.fromCode(\" [testcode] \", js));",
      "right" : "CompilerInput input = new CompilerInput(\n        JSSourceFile.fromCode(\" [testcode] \", js));",
      "info" : "VariableDeclarationStatement[37379-37471]:VariableDeclarationStatement[37410-37502]"
    }, {
      "left" : "if (inputsByName == null)",
      "right" : "if (inputsByName == null)",
      "info" : "IfStatement[37476-37549]:IfStatement[37507-37580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37502-37549]:Block[37533-37580]"
    }, {
      "left" : "inputsByName = Maps.newHashMap();",
      "right" : "inputsByName = Maps.newHashMap();",
      "info" : "ExpressionStatement[37510-37543]:ExpressionStatement[37541-37574]"
    }, {
      "left" : "inputsByName.put(input.getName(), input);",
      "right" : "inputsByName.put(input.getName(), input);",
      "info" : "ExpressionStatement[37554-37595]:ExpressionStatement[37585-37626]"
    }, {
      "left" : "return input.getAstRoot(this);",
      "right" : "return input.getAstRoot(this);",
      "info" : "ReturnStatement[37600-37630]:ReturnStatement[37631-37661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37690-37728]:Block[37721-37759]"
    }, {
      "left" : "return defaultErrorReporter;",
      "right" : "return defaultErrorReporter;",
      "info" : "ReturnStatement[37696-37724]:ReturnStatement[37727-37755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38008-38618]:Block[38039-38649]"
    }, {
      "left" : "return runInCompilerThread(new Callable<String>() {\n      public String call() throws Exception {\n        Tracer tracer = newTracer(\"toSource\");\n        try {\n          CodeBuilder cb = new CodeBuilder();\n          if (jsRoot != null) {\n            int i = 0;\n            for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext()) {\n              toSource(cb, i++, scriptNode);\n            }\n          }\n          return cb.toString();\n        } finally {\n          stopTracer(tracer, \"toSource\");\n        }\n      }\n    });",
      "right" : "return runInCompilerThread(new Callable<String>() {\n      public String call() throws Exception {\n        Tracer tracer = newTracer(\"toSource\");\n        try {\n          CodeBuilder cb = new CodeBuilder();\n          if (jsRoot != null) {\n            int i = 0;\n            for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext()) {\n              toSource(cb, i++, scriptNode);\n            }\n          }\n          return cb.toString();\n        } finally {\n          stopTracer(tracer, \"toSource\");\n        }\n      }\n    });",
      "info" : "ReturnStatement[38014-38614]:ReturnStatement[38045-38645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38110-38606]:Block[38141-38637]"
    }, {
      "left" : "Tracer tracer = newTracer(\"toSource\");",
      "right" : "Tracer tracer = newTracer(\"toSource\");",
      "info" : "VariableDeclarationStatement[38120-38158]:VariableDeclarationStatement[38151-38189]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[38167-38598]:TryStatement[38198-38629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38171-38536]:Block[38202-38567]"
    }, {
      "left" : "CodeBuilder cb = new CodeBuilder();",
      "right" : "CodeBuilder cb = new CodeBuilder();",
      "info" : "VariableDeclarationStatement[38183-38218]:VariableDeclarationStatement[38214-38249]"
    }, {
      "left" : "if (jsRoot != null)",
      "right" : "if (jsRoot != null)",
      "info" : "IfStatement[38229-38494]:IfStatement[38260-38525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38249-38494]:Block[38280-38525]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[38263-38273]:VariableDeclarationStatement[38294-38304]"
    }, {
      "left" : "for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext())",
      "right" : "for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext())",
      "info" : "ForStatement[38286-38482]:ForStatement[38317-38513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38422-38482]:Block[38453-38513]"
    }, {
      "left" : "toSource(cb, i++, scriptNode);",
      "right" : "toSource(cb, i++, scriptNode);",
      "info" : "ExpressionStatement[38438-38468]:ExpressionStatement[38469-38499]"
    }, {
      "left" : "return cb.toString();",
      "right" : "return cb.toString();",
      "info" : "ReturnStatement[38505-38526]:ReturnStatement[38536-38557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38545-38598]:Block[38576-38629]"
    }, {
      "left" : "stopTracer(tracer, \"toSource\");",
      "right" : "stopTracer(tracer, \"toSource\");",
      "info" : "ExpressionStatement[38557-38588]:ExpressionStatement[38588-38619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38727-39398]:Block[38758-39429]"
    }, {
      "left" : "return runInCompilerThread(new Callable<String[]>() {\n      public String[] call() throws Exception {\n        Tracer tracer = newTracer(\"toSourceArray\");\n        try {\n          int numInputs = inputs.size();\n          String[] sources = new String[numInputs];\n          CodeBuilder cb = new CodeBuilder();\n          for (int i = 0; i < numInputs; i++) {\n            Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n            cb.reset();\n            toSource(cb, i, scriptNode);\n            sources[i] = cb.toString();\n          }\n          return sources;\n        } finally {\n          stopTracer(tracer, \"toSourceArray\");\n        }\n      }\n    });",
      "right" : "return runInCompilerThread(new Callable<String[]>() {\n      public String[] call() throws Exception {\n        Tracer tracer = newTracer(\"toSourceArray\");\n        try {\n          int numInputs = inputs.size();\n          String[] sources = new String[numInputs];\n          CodeBuilder cb = new CodeBuilder();\n          for (int i = 0; i < numInputs; i++) {\n            Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n            cb.reset();\n            toSource(cb, i, scriptNode);\n            sources[i] = cb.toString();\n          }\n          return sources;\n        } finally {\n          stopTracer(tracer, \"toSourceArray\");\n        }\n      }\n    });",
      "info" : "ReturnStatement[38733-39394]:ReturnStatement[38764-39425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38833-39386]:Block[38864-39417]"
    }, {
      "left" : "Tracer tracer = newTracer(\"toSourceArray\");",
      "right" : "Tracer tracer = newTracer(\"toSourceArray\");",
      "info" : "VariableDeclarationStatement[38843-38886]:VariableDeclarationStatement[38874-38917]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[38895-39378]:TryStatement[38926-39409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38899-39311]:Block[38930-39342]"
    }, {
      "left" : "int numInputs = inputs.size();",
      "right" : "int numInputs = inputs.size();",
      "info" : "VariableDeclarationStatement[38911-38941]:VariableDeclarationStatement[38942-38972]"
    }, {
      "left" : "String[] sources = new String[numInputs];",
      "right" : "String[] sources = new String[numInputs];",
      "info" : "VariableDeclarationStatement[38952-38993]:VariableDeclarationStatement[38983-39024]"
    }, {
      "left" : "CodeBuilder cb = new CodeBuilder();",
      "right" : "CodeBuilder cb = new CodeBuilder();",
      "info" : "VariableDeclarationStatement[39004-39039]:VariableDeclarationStatement[39035-39070]"
    }, {
      "left" : "for (int i = 0; i < numInputs; i++)",
      "right" : "for (int i = 0; i < numInputs; i++)",
      "info" : "ForStatement[39050-39275]:ForStatement[39081-39306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39086-39275]:Block[39117-39306]"
    }, {
      "left" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "right" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "info" : "VariableDeclarationStatement[39100-39158]:VariableDeclarationStatement[39131-39189]"
    }, {
      "left" : "cb.reset();",
      "right" : "cb.reset();",
      "info" : "ExpressionStatement[39171-39182]:ExpressionStatement[39202-39213]"
    }, {
      "left" : "toSource(cb, i, scriptNode);",
      "right" : "toSource(cb, i, scriptNode);",
      "info" : "ExpressionStatement[39195-39223]:ExpressionStatement[39226-39254]"
    }, {
      "left" : "sources[i] = cb.toString();",
      "right" : "sources[i] = cb.toString();",
      "info" : "ExpressionStatement[39236-39263]:ExpressionStatement[39267-39294]"
    }, {
      "left" : "return sources;",
      "right" : "return sources;",
      "info" : "ReturnStatement[39286-39301]:ReturnStatement[39317-39332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39320-39378]:Block[39351-39409]"
    }, {
      "left" : "stopTracer(tracer, \"toSourceArray\");",
      "right" : "stopTracer(tracer, \"toSourceArray\");",
      "info" : "ExpressionStatement[39332-39368]:ExpressionStatement[39363-39399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39519-40185]:Block[39550-40216]"
    }, {
      "left" : "return runInCompilerThread(new Callable<String>() {\n      public String call() throws Exception {\n        List<CompilerInput> inputs = module.getInputs();\n        int numInputs = inputs.size();\n        if (numInputs == 0) {\n          return \"\";\n        }\n        CodeBuilder cb = new CodeBuilder();\n        for (int i = 0; i < numInputs; i++) {\n          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode == null) {\n            throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());\n          }\n          toSource(cb, i, scriptNode);\n        }\n        return cb.toString();\n      }\n    });",
      "right" : "return runInCompilerThread(new Callable<String>() {\n      public String call() throws Exception {\n        List<CompilerInput> inputs = module.getInputs();\n        int numInputs = inputs.size();\n        if (numInputs == 0) {\n          return \"\";\n        }\n        CodeBuilder cb = new CodeBuilder();\n        for (int i = 0; i < numInputs; i++) {\n          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode == null) {\n            throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());\n          }\n          toSource(cb, i, scriptNode);\n        }\n        return cb.toString();\n      }\n    });",
      "info" : "ReturnStatement[39525-40181]:ReturnStatement[39556-40212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39621-40173]:Block[39652-40204]"
    }, {
      "left" : "List<CompilerInput> inputs = module.getInputs();",
      "right" : "List<CompilerInput> inputs = module.getInputs();",
      "info" : "VariableDeclarationStatement[39631-39679]:VariableDeclarationStatement[39662-39710]"
    }, {
      "left" : "int numInputs = inputs.size();",
      "right" : "int numInputs = inputs.size();",
      "info" : "VariableDeclarationStatement[39688-39718]:VariableDeclarationStatement[39719-39749]"
    }, {
      "left" : "if (numInputs == 0)",
      "right" : "if (numInputs == 0)",
      "info" : "IfStatement[39727-39779]:IfStatement[39758-39810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39747-39779]:Block[39778-39810]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[39759-39769]:ReturnStatement[39790-39800]"
    }, {
      "left" : "CodeBuilder cb = new CodeBuilder();",
      "right" : "CodeBuilder cb = new CodeBuilder();",
      "info" : "VariableDeclarationStatement[39788-39823]:VariableDeclarationStatement[39819-39854]"
    }, {
      "left" : "for (int i = 0; i < numInputs; i++)",
      "right" : "for (int i = 0; i < numInputs; i++)",
      "info" : "ForStatement[39832-40135]:ForStatement[39863-40166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39868-40135]:Block[39899-40166]"
    }, {
      "left" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "right" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "info" : "VariableDeclarationStatement[39880-39938]:VariableDeclarationStatement[39911-39969]"
    }, {
      "left" : "if (scriptNode == null)",
      "right" : "if (scriptNode == null)",
      "info" : "IfStatement[39949-40086]:IfStatement[39980-40117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39973-40086]:Block[40004-40117]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());",
      "right" : "throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());",
      "info" : "ThrowStatement[39987-40074]:ThrowStatement[40018-40105]"
    }, {
      "left" : "toSource(cb, i, scriptNode);",
      "right" : "toSource(cb, i, scriptNode);",
      "info" : "ExpressionStatement[40097-40125]:ExpressionStatement[40128-40156]"
    }, {
      "left" : "return cb.toString();",
      "right" : "return cb.toString();",
      "info" : "ReturnStatement[40144-40165]:ReturnStatement[40175-40196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40328-41128]:Block[40359-41159]"
    }, {
      "left" : "return runInCompilerThread(new Callable<String[]>() {\n      public String[] call() throws Exception {\n        List<CompilerInput> inputs = module.getInputs();\n        int numInputs = inputs.size();\n        if (numInputs == 0) {\n          return new String[0];\n        }\n\n        String[] sources = new String[numInputs];\n        CodeBuilder cb = new CodeBuilder();\n        for (int i = 0; i < numInputs; i++) {\n          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode == null) {\n            throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());\n          }\n\n          cb.reset();\n          toSource(cb, i, scriptNode);\n          sources[i] = cb.toString();\n        }\n        return sources;\n      }\n    });",
      "right" : "return runInCompilerThread(new Callable<String[]>() {\n      public String[] call() throws Exception {\n        List<CompilerInput> inputs = module.getInputs();\n        int numInputs = inputs.size();\n        if (numInputs == 0) {\n          return new String[0];\n        }\n\n        String[] sources = new String[numInputs];\n        CodeBuilder cb = new CodeBuilder();\n        for (int i = 0; i < numInputs; i++) {\n          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode == null) {\n            throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());\n          }\n\n          cb.reset();\n          toSource(cb, i, scriptNode);\n          sources[i] = cb.toString();\n        }\n        return sources;\n      }\n    });",
      "info" : "ReturnStatement[40334-41124]:ReturnStatement[40365-41155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40434-41116]:Block[40465-41147]"
    }, {
      "left" : "List<CompilerInput> inputs = module.getInputs();",
      "right" : "List<CompilerInput> inputs = module.getInputs();",
      "info" : "VariableDeclarationStatement[40444-40492]:VariableDeclarationStatement[40475-40523]"
    }, {
      "left" : "int numInputs = inputs.size();",
      "right" : "int numInputs = inputs.size();",
      "info" : "VariableDeclarationStatement[40501-40531]:VariableDeclarationStatement[40532-40562]"
    }, {
      "left" : "if (numInputs == 0)",
      "right" : "if (numInputs == 0)",
      "info" : "IfStatement[40540-40603]:IfStatement[40571-40634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40560-40603]:Block[40591-40634]"
    }, {
      "left" : "return new String[0];",
      "right" : "return new String[0];",
      "info" : "ReturnStatement[40572-40593]:ReturnStatement[40603-40624]"
    }, {
      "left" : "String[] sources = new String[numInputs];",
      "right" : "String[] sources = new String[numInputs];",
      "info" : "VariableDeclarationStatement[40613-40654]:VariableDeclarationStatement[40644-40685]"
    }, {
      "left" : "CodeBuilder cb = new CodeBuilder();",
      "right" : "CodeBuilder cb = new CodeBuilder();",
      "info" : "VariableDeclarationStatement[40663-40698]:VariableDeclarationStatement[40694-40729]"
    }, {
      "left" : "for (int i = 0; i < numInputs; i++)",
      "right" : "for (int i = 0; i < numInputs; i++)",
      "info" : "ForStatement[40707-41084]:ForStatement[40738-41115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40743-41084]:Block[40774-41115]"
    }, {
      "left" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "right" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "info" : "VariableDeclarationStatement[40755-40813]:VariableDeclarationStatement[40786-40844]"
    }, {
      "left" : "if (scriptNode == null)",
      "right" : "if (scriptNode == null)",
      "info" : "IfStatement[40824-40974]:IfStatement[40855-41005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40848-40974]:Block[40879-41005]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());",
      "right" : "throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());",
      "info" : "ThrowStatement[40862-40962]:ThrowStatement[40893-40993]"
    }, {
      "left" : "cb.reset();",
      "right" : "cb.reset();",
      "info" : "ExpressionStatement[40986-40997]:ExpressionStatement[41017-41028]"
    }, {
      "left" : "toSource(cb, i, scriptNode);",
      "right" : "toSource(cb, i, scriptNode);",
      "info" : "ExpressionStatement[41008-41036]:ExpressionStatement[41039-41067]"
    }, {
      "left" : "sources[i] = cb.toString();",
      "right" : "sources[i] = cb.toString();",
      "info" : "ExpressionStatement[41047-41074]:ExpressionStatement[41078-41105]"
    }, {
      "left" : "return sources;",
      "right" : "return sources;",
      "info" : "ReturnStatement[41093-41108]:ReturnStatement[41124-41139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41614-43694]:Block[41645-43725]"
    }, {
      "left" : "runInCompilerThread(new Callable<Void>() {\n      public Void call() throws Exception {\n        if (options.printInputDelimiter) {\n          if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\")) {\n            cb.append(\"\\n\");  // Make sure that the label starts on a new line\n          }\n          Preconditions.checkState(root.getType() == Token.SCRIPT);\n\n          String delimiter = options.inputDelimiter;\n\n          String sourceName = (String)root.getProp(Node.SOURCENAME_PROP);\n          Preconditions.checkState(sourceName != null);\n          Preconditions.checkState(!sourceName.isEmpty());\n\n          delimiter = delimiter.replaceAll(\"%name%\", sourceName)\n            .replaceAll(\"%num%\", String.valueOf(inputSeqNum));\n\n          cb.append(delimiter)\n            .append(\"\\n\");\n        }\n        if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null) {\n          cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");\n        }\n\n        // If there is a valid source map, then indicate to it that the current\n        // root node's mappings are offset by the given string builder buffer.\n        if (options.sourceMapOutputPath != null) {\n          sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());\n        }\n\n        String code = toSource(root, sourceMap);\n        if (!code.isEmpty()) {\n          cb.append(code);\n\n          // In order to avoid parse ambiguity when files are concatenated\n          // together, all files should end in a semi-colon. Do a quick\n          // heuristic check if there's an obvious semi-colon already there.\n          int length = code.length();\n          char lastChar = code.charAt(length - 1);\n          char secondLastChar = length >= 2 ?\n              code.charAt(length - 2) : '\\0';\n          boolean hasSemiColon = lastChar == ';' ||\n              (lastChar == '\\n' && secondLastChar == ';');\n          if (!hasSemiColon) {\n            cb.append(\";\");\n          }\n        }\n        return null;\n      }\n    });",
      "right" : "runInCompilerThread(new Callable<Void>() {\n      public Void call() throws Exception {\n        if (options.printInputDelimiter) {\n          if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\")) {\n            cb.append(\"\\n\");  // Make sure that the label starts on a new line\n          }\n          Preconditions.checkState(root.getType() == Token.SCRIPT);\n\n          String delimiter = options.inputDelimiter;\n\n          String sourceName = (String)root.getProp(Node.SOURCENAME_PROP);\n          Preconditions.checkState(sourceName != null);\n          Preconditions.checkState(!sourceName.isEmpty());\n\n          delimiter = delimiter.replaceAll(\"%name%\", sourceName)\n            .replaceAll(\"%num%\", String.valueOf(inputSeqNum));\n\n          cb.append(delimiter)\n            .append(\"\\n\");\n        }\n        if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null) {\n          cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");\n        }\n\n        // If there is a valid source map, then indicate to it that the current\n        // root node's mappings are offset by the given string builder buffer.\n        if (options.sourceMapOutputPath != null) {\n          sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());\n        }\n\n        String code = toSource(root, sourceMap);\n        if (!code.isEmpty()) {\n          cb.append(code);\n\n          // In order to avoid parse ambiguity when files are concatenated\n          // together, all files should end in a semi-colon. Do a quick\n          // heuristic check if there's an obvious semi-colon already there.\n          int length = code.length();\n          char lastChar = code.charAt(length - 1);\n          char secondLastChar = length >= 2 ?\n              code.charAt(length - 2) : '\\0';\n          boolean hasSemiColon = lastChar == ';' ||\n              (lastChar == '\\n' && secondLastChar == ';');\n          if (!hasSemiColon) {\n            cb.append(\";\");\n          }\n        }\n        return null;\n      }\n    });",
      "info" : "ExpressionStatement[41620-43690]:ExpressionStatement[41651-43721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41705-43682]:Block[41736-43713]"
    }, {
      "left" : "if (options.printInputDelimiter)",
      "right" : "if (options.printInputDelimiter)",
      "info" : "IfStatement[41715-42410]:IfStatement[41746-42441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41748-42410]:Block[41779-42441]"
    }, {
      "left" : "if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\"))",
      "right" : "if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\"))",
      "info" : "IfStatement[41760-41900]:IfStatement[41791-41931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41808-41900]:Block[41839-41931]"
    }, {
      "left" : "cb.append(\"\\n\");",
      "right" : "cb.append(\"\\n\");",
      "info" : "ExpressionStatement[41822-41838]:ExpressionStatement[41853-41869]"
    }, {
      "left" : "Preconditions.checkState(root.getType() == Token.SCRIPT);",
      "right" : "Preconditions.checkState(root.getType() == Token.SCRIPT);",
      "info" : "ExpressionStatement[41911-41968]:ExpressionStatement[41942-41999]"
    }, {
      "left" : "String delimiter = options.inputDelimiter;",
      "right" : "String delimiter = options.inputDelimiter;",
      "info" : "VariableDeclarationStatement[41980-42022]:VariableDeclarationStatement[42011-42053]"
    }, {
      "left" : "String sourceName = (String)root.getProp(Node.SOURCENAME_PROP);",
      "right" : "String sourceName = (String)root.getProp(Node.SOURCENAME_PROP);",
      "info" : "VariableDeclarationStatement[42034-42097]:VariableDeclarationStatement[42065-42128]"
    }, {
      "left" : "Preconditions.checkState(sourceName != null);",
      "right" : "Preconditions.checkState(sourceName != null);",
      "info" : "ExpressionStatement[42108-42153]:ExpressionStatement[42139-42184]"
    }, {
      "left" : "Preconditions.checkState(!sourceName.isEmpty());",
      "right" : "Preconditions.checkState(!sourceName.isEmpty());",
      "info" : "ExpressionStatement[42164-42212]:ExpressionStatement[42195-42243]"
    }, {
      "left" : "delimiter = delimiter.replaceAll(\"%name%\", sourceName)\n            .replaceAll(\"%num%\", String.valueOf(inputSeqNum));",
      "right" : "delimiter = delimiter.replaceAll(\"%name%\", sourceName)\n            .replaceAll(\"%num%\", String.valueOf(inputSeqNum));",
      "info" : "ExpressionStatement[42224-42341]:ExpressionStatement[42255-42372]"
    }, {
      "left" : "cb.append(delimiter)\n            .append(\"\\n\");",
      "right" : "cb.append(delimiter)\n            .append(\"\\n\");",
      "info" : "ExpressionStatement[42353-42400]:ExpressionStatement[42384-42431]"
    }, {
      "left" : "if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null)",
      "right" : "if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null)",
      "info" : "IfStatement[42419-42630]:IfStatement[42450-42661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42508-42630]:Block[42539-42661]"
    }, {
      "left" : "cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");",
      "right" : "cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");",
      "info" : "ExpressionStatement[42520-42620]:ExpressionStatement[42551-42651]"
    }, {
      "left" : "if (options.sourceMapOutputPath != null)",
      "right" : "if (options.sourceMapOutputPath != null)",
      "info" : "IfStatement[42799-42947]:IfStatement[42830-42978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42840-42947]:Block[42871-42978]"
    }, {
      "left" : "sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());",
      "right" : "sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());",
      "info" : "ExpressionStatement[42852-42937]:ExpressionStatement[42883-42968]"
    }, {
      "left" : "String code = toSource(root, sourceMap);",
      "right" : "String code = toSource(root, sourceMap);",
      "info" : "VariableDeclarationStatement[42957-42997]:VariableDeclarationStatement[42988-43028]"
    }, {
      "left" : "if (!code.isEmpty())",
      "right" : "if (!code.isEmpty())",
      "info" : "IfStatement[43006-43653]:IfStatement[43037-43684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43027-43653]:Block[43058-43684]"
    }, {
      "left" : "cb.append(code);",
      "right" : "cb.append(code);",
      "info" : "ExpressionStatement[43039-43055]:ExpressionStatement[43070-43086]"
    }, {
      "left" : "int length = code.length();",
      "right" : "int length = code.length();",
      "info" : "VariableDeclarationStatement[43291-43318]:VariableDeclarationStatement[43322-43349]"
    }, {
      "left" : "char lastChar = code.charAt(length - 1);",
      "right" : "char lastChar = code.charAt(length - 1);",
      "info" : "VariableDeclarationStatement[43329-43369]:VariableDeclarationStatement[43360-43400]"
    }, {
      "left" : "char secondLastChar = length >= 2 ?\n              code.charAt(length - 2) : '\\0';",
      "right" : "char secondLastChar = length >= 2 ?\n              code.charAt(length - 2) : '\\0';",
      "info" : "VariableDeclarationStatement[43380-43461]:VariableDeclarationStatement[43411-43492]"
    }, {
      "left" : "boolean hasSemiColon = lastChar == ';' ||\n              (lastChar == '\\n' && secondLastChar == ';');",
      "right" : "boolean hasSemiColon = lastChar == ';' ||\n              (lastChar == '\\n' && secondLastChar == ';');",
      "info" : "VariableDeclarationStatement[43472-43572]:VariableDeclarationStatement[43503-43603]"
    }, {
      "left" : "if (!hasSemiColon)",
      "right" : "if (!hasSemiColon)",
      "info" : "IfStatement[43583-43643]:IfStatement[43614-43674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43602-43643]:Block[43633-43674]"
    }, {
      "left" : "cb.append(\";\");",
      "right" : "cb.append(\";\");",
      "info" : "ExpressionStatement[43616-43631]:ExpressionStatement[43647-43662]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[43662-43674]:ReturnStatement[43693-43705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43835-43906]:Block[43866-43937]"
    }, {
      "left" : "initCompilerOptionsIfTesting();",
      "right" : "initCompilerOptionsIfTesting();",
      "info" : "ExpressionStatement[43841-43872]:ExpressionStatement[43872-43903]"
    }, {
      "left" : "return toSource(n, null);",
      "right" : "return toSource(n, null);",
      "info" : "ReturnStatement[43877-43902]:ReturnStatement[43908-43933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44025-44631]:Block[44056-44662]"
    }, {
      "left" : "CodePrinter.Builder builder = new CodePrinter.Builder(n);",
      "right" : "CodePrinter.Builder builder = new CodePrinter.Builder(n);",
      "info" : "VariableDeclarationStatement[44031-44088]:VariableDeclarationStatement[44062-44119]"
    }, {
      "left" : "builder.setPrettyPrint(options.prettyPrint);",
      "right" : "builder.setPrettyPrint(options.prettyPrint);",
      "info" : "ExpressionStatement[44093-44137]:ExpressionStatement[44124-44168]"
    }, {
      "left" : "builder.setLineBreak(options.lineBreak);",
      "right" : "builder.setLineBreak(options.lineBreak);",
      "info" : "ExpressionStatement[44142-44182]:ExpressionStatement[44173-44213]"
    }, {
      "left" : "builder.setSourceMap(sourceMap);",
      "right" : "builder.setSourceMap(sourceMap);",
      "info" : "ExpressionStatement[44187-44219]:ExpressionStatement[44218-44250]"
    }, {
      "left" : "builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);",
      "right" : "builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);",
      "info" : "ExpressionStatement[44224-44286]:ExpressionStatement[44255-44317]"
    }, {
      "left" : "builder.setTagAsStrict(\n        options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT);",
      "right" : "builder.setTagAsStrict(\n        options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT);",
      "info" : "ExpressionStatement[44291-44384]:ExpressionStatement[44322-44415]"
    }, {
      "left" : "builder.setLineLengthThreshold(options.lineLengthThreshold);",
      "right" : "builder.setLineLengthThreshold(options.lineLengthThreshold);",
      "info" : "ExpressionStatement[44389-44449]:ExpressionStatement[44420-44480]"
    }, {
      "left" : "Charset charset = options.outputCharset != null ?\n        Charset.forName(options.outputCharset) : null;",
      "right" : "Charset charset = options.outputCharset != null ?\n        Charset.forName(options.outputCharset) : null;",
      "info" : "VariableDeclarationStatement[44455-44559]:VariableDeclarationStatement[44486-44590]"
    }, {
      "left" : "builder.setOutputCharset(charset);",
      "right" : "builder.setOutputCharset(charset);",
      "info" : "ExpressionStatement[44564-44598]:ExpressionStatement[44595-44629]"
    }, {
      "left" : "return builder.build();",
      "right" : "return builder.build();",
      "info" : "ReturnStatement[44604-44627]:ReturnStatement[44635-44658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45031-45061]:Block[45062-45092]"
    }, {
      "left" : "sb.setLength(0);",
      "right" : "sb.setLength(0);",
      "info" : "ExpressionStatement[45039-45055]:ExpressionStatement[45070-45086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45154-45633]:Block[45185-45664]"
    }, {
      "left" : "sb.append(str);",
      "right" : "sb.append(str);",
      "info" : "ExpressionStatement[45162-45177]:ExpressionStatement[45193-45208]"
    }, {
      "left" : "int index = -1;",
      "right" : "int index = -1;",
      "info" : "VariableDeclarationStatement[45251-45266]:VariableDeclarationStatement[45282-45297]"
    }, {
      "left" : "int lastIndex = index;",
      "right" : "int lastIndex = index;",
      "info" : "VariableDeclarationStatement[45273-45295]:VariableDeclarationStatement[45304-45326]"
    }, {
      "left" : "while ((index = str.indexOf('\\n', index + 1)) >= 0)",
      "right" : "while ((index = str.indexOf('\\n', index + 1)) >= 0)",
      "info" : "WhileStatement[45302-45411]:WhileStatement[45333-45442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45354-45411]:Block[45385-45442]"
    }, {
      "left" : "++lineCount;",
      "right" : "++lineCount;",
      "info" : "ExpressionStatement[45364-45376]:ExpressionStatement[45395-45407]"
    }, {
      "left" : "lastIndex = index;",
      "right" : "lastIndex = index;",
      "info" : "ExpressionStatement[45385-45403]:ExpressionStatement[45416-45434]"
    }, {
      "left" : "if (lastIndex == -1)",
      "right" : "if (lastIndex == -1)",
      "info" : "IfStatement[45419-45607]:IfStatement[45450-45638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45440-45541]:Block[45471-45572]"
    }, {
      "left" : "colCount += str.length();",
      "right" : "colCount += str.length();",
      "info" : "ExpressionStatement[45508-45533]:ExpressionStatement[45539-45564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45547-45607]:Block[45578-45638]"
    }, {
      "left" : "colCount = str.length() - (lastIndex + 1);",
      "right" : "colCount = str.length() - (lastIndex + 1);",
      "info" : "ExpressionStatement[45557-45599]:ExpressionStatement[45588-45630]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[45615-45627]:ReturnStatement[45646-45658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45726-45761]:Block[45757-45792]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[45734-45755]:ReturnStatement[45765-45786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45840-45873]:Block[45871-45904]"
    }, {
      "left" : "return sb.length();",
      "right" : "return sb.length();",
      "info" : "ReturnStatement[45848-45867]:ReturnStatement[45879-45898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45977-46008]:Block[46008-46039]"
    }, {
      "left" : "return lineCount;",
      "right" : "return lineCount;",
      "info" : "ReturnStatement[45985-46002]:ReturnStatement[46016-46033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46116-46146]:Block[46147-46177]"
    }, {
      "left" : "return colCount;",
      "right" : "return colCount;",
      "info" : "ReturnStatement[46124-46140]:ReturnStatement[46155-46171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46251-46376]:Block[46282-46407]"
    }, {
      "left" : "return (sb.length() > suffix.length())\n          && suffix.equals(sb.substring(sb.length() - suffix.length()));",
      "right" : "return (sb.length() > suffix.length())\n          && suffix.equals(sb.substring(sb.length() - suffix.length()));",
      "info" : "ReturnStatement[46259-46370]:ReturnStatement[46290-46401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46581-47204]:Block[46612-47235]"
    }, {
      "left" : "normalize();",
      "right" : "normalize();",
      "info" : "ExpressionStatement[46855-46867]:ExpressionStatement[46886-46898]"
    }, {
      "left" : "PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);",
      "right" : "PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);",
      "info" : "VariableDeclarationStatement[46873-46939]:VariableDeclarationStatement[46904-46970]"
    }, {
      "left" : "if (options.devMode == DevMode.EVERY_PASS)",
      "right" : "if (options.devMode == DevMode.EVERY_PASS)",
      "info" : "IfStatement[46944-47044]:IfStatement[46975-47075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46987-47044]:Block[47018-47075]"
    }, {
      "left" : "phaseOptimizer.setSanityCheck(sanityCheck);",
      "right" : "phaseOptimizer.setSanityCheck(sanityCheck);",
      "info" : "ExpressionStatement[46995-47038]:ExpressionStatement[47026-47069]"
    }, {
      "left" : "phaseOptimizer.consume(getPassConfig().getOptimizations());",
      "right" : "phaseOptimizer.consume(getPassConfig().getOptimizations());",
      "info" : "ExpressionStatement[47049-47108]:ExpressionStatement[47080-47139]"
    }, {
      "left" : "phaseOptimizer.process(externsRoot, jsRoot);",
      "right" : "phaseOptimizer.process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[47113-47157]:ExpressionStatement[47144-47188]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[47162-47200]:IfStatement[47193-47231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47179-47200]:Block[47210-47231]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[47187-47194]:ReturnStatement[47218-47225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47263-47302]:Block[47294-47333]"
    }, {
      "left" : "options.cssRenamingMap = map;",
      "right" : "options.cssRenamingMap = map;",
      "info" : "ExpressionStatement[47269-47298]:ExpressionStatement[47300-47329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47353-47393]:Block[47384-47424]"
    }, {
      "left" : "return options.cssRenamingMap;",
      "right" : "return options.cssRenamingMap;",
      "info" : "ReturnStatement[47359-47389]:ReturnStatement[47390-47420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47775-47884]:Block[47806-47915]"
    }, {
      "left" : "(new DefaultPassConfig(options)).processDefines.create(this)\n        .process(externsRoot, jsRoot);",
      "right" : "(new DefaultPassConfig(options)).processDefines.create(this)\n        .process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[47781-47880]:ExpressionStatement[47812-47911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47918-48091]:Block[47949-48122]"
    }, {
      "left" : "return options.propertyRenaming == PropertyRenamingPolicy.HEURISTIC ||\n        options.propertyRenaming ==\n            PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;",
      "right" : "return options.propertyRenaming == PropertyRenamingPolicy.HEURISTIC ||\n        options.propertyRenaming ==\n            PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;",
      "info" : "ReturnStatement[47924-48087]:ReturnStatement[47955-48118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48163-48417]:Block[48194-48448]"
    }, {
      "left" : "logger.info(\"Computing Control Flow Graph\");",
      "right" : "logger.info(\"Computing Control Flow Graph\");",
      "info" : "ExpressionStatement[48169-48213]:ExpressionStatement[48200-48244]"
    }, {
      "left" : "Tracer tracer = newTracer(\"computeCFG\");",
      "right" : "Tracer tracer = newTracer(\"computeCFG\");",
      "info" : "VariableDeclarationStatement[48218-48258]:VariableDeclarationStatement[48249-48289]"
    }, {
      "left" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);",
      "right" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);",
      "info" : "VariableDeclarationStatement[48263-48332]:VariableDeclarationStatement[48294-48363]"
    }, {
      "left" : "process(cfa);",
      "right" : "process(cfa);",
      "info" : "ExpressionStatement[48337-48350]:ExpressionStatement[48368-48381]"
    }, {
      "left" : "stopTracer(tracer, \"computeCFG\");",
      "right" : "stopTracer(tracer, \"computeCFG\");",
      "info" : "ExpressionStatement[48355-48388]:ExpressionStatement[48386-48419]"
    }, {
      "left" : "return cfa.getCfg();",
      "right" : "return cfa.getCfg();",
      "info" : "ReturnStatement[48393-48413]:ReturnStatement[48424-48444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48445-48566]:Block[48476-48597]"
    }, {
      "left" : "logger.info(\"Normalizing\");",
      "right" : "logger.info(\"Normalizing\");",
      "info" : "ExpressionStatement[48451-48478]:ExpressionStatement[48482-48509]"
    }, {
      "left" : "startPass(\"normalize\");",
      "right" : "startPass(\"normalize\");",
      "info" : "ExpressionStatement[48483-48506]:ExpressionStatement[48514-48537]"
    }, {
      "left" : "process(new Normalize(this, false));",
      "right" : "process(new Normalize(this, false));",
      "info" : "ExpressionStatement[48511-48547]:ExpressionStatement[48542-48578]"
    }, {
      "left" : "endPass();",
      "right" : "endPass();",
      "info" : "ExpressionStatement[48552-48562]:ExpressionStatement[48583-48593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48609-48773]:Block[48640-48804]"
    }, {
      "left" : "Tracer tracer = newTracer(\"prepareAst\");",
      "right" : "Tracer tracer = newTracer(\"prepareAst\");",
      "info" : "VariableDeclarationStatement[48615-48655]:VariableDeclarationStatement[48646-48686]"
    }, {
      "left" : "CompilerPass pass = new PrepareAst(this);",
      "right" : "CompilerPass pass = new PrepareAst(this);",
      "info" : "VariableDeclarationStatement[48660-48701]:VariableDeclarationStatement[48691-48732]"
    }, {
      "left" : "pass.process(null, root);",
      "right" : "pass.process(null, root);",
      "info" : "ExpressionStatement[48706-48731]:ExpressionStatement[48737-48762]"
    }, {
      "left" : "stopTracer(tracer, \"prepareAst\");",
      "right" : "stopTracer(tracer, \"prepareAst\");",
      "info" : "ExpressionStatement[48736-48769]:ExpressionStatement[48767-48800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48810-49191]:Block[48841-49222]"
    }, {
      "left" : "logger.info(\"Recording function information\");",
      "right" : "logger.info(\"Recording function information\");",
      "info" : "ExpressionStatement[48816-48862]:ExpressionStatement[48847-48893]"
    }, {
      "left" : "startPass(\"recordFunctionInformation\");",
      "right" : "startPass(\"recordFunctionInformation\");",
      "info" : "ExpressionStatement[48867-48906]:ExpressionStatement[48898-48937]"
    }, {
      "left" : "RecordFunctionInformation recordFunctionInfoPass =\n        new RecordFunctionInformation(\n            this, getPassConfig().getIntermediateState().functionNames);",
      "right" : "RecordFunctionInformation recordFunctionInfoPass =\n        new RecordFunctionInformation(\n            this, getPassConfig().getIntermediateState().functionNames);",
      "info" : "VariableDeclarationStatement[48911-49073]:VariableDeclarationStatement[48942-49104]"
    }, {
      "left" : "process(recordFunctionInfoPass);",
      "right" : "process(recordFunctionInfoPass);",
      "info" : "ExpressionStatement[49078-49110]:ExpressionStatement[49109-49141]"
    }, {
      "left" : "functionInformationMap = recordFunctionInfoPass.getMap();",
      "right" : "functionInformationMap = recordFunctionInfoPass.getMap();",
      "info" : "ExpressionStatement[49115-49172]:ExpressionStatement[49146-49203]"
    }, {
      "left" : "endPass();",
      "right" : "endPass();",
      "info" : "ExpressionStatement[49177-49187]:ExpressionStatement[49208-49218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49473-49515]:Block[49504-49546]"
    }, {
      "left" : "codeChangeHandlers.add(handler);",
      "right" : "codeChangeHandlers.add(handler);",
      "info" : "ExpressionStatement[49479-49511]:ExpressionStatement[49510-49542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49583-49628]:Block[49614-49659]"
    }, {
      "left" : "codeChangeHandlers.remove(handler);",
      "right" : "codeChangeHandlers.remove(handler);",
      "info" : "ExpressionStatement[49589-49624]:ExpressionStatement[49620-49655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49866-49966]:Block[49897-49997]"
    }, {
      "left" : "for (CodeChangeHandler handler : codeChangeHandlers)",
      "right" : "for (CodeChangeHandler handler : codeChangeHandlers)",
      "info" : "EnhancedForStatement[49872-49962]:EnhancedForStatement[49903-49993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49925-49962]:Block[49956-49993]"
    }, {
      "left" : "handler.reportChange();",
      "right" : "handler.reportChange();",
      "info" : "ExpressionStatement[49933-49956]:ExpressionStatement[49964-49987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50028-50197]:Block[50059-50228]"
    }, {
      "left" : "CodingConvention convention = options.getCodingConvention();",
      "right" : "CodingConvention convention = options.getCodingConvention();",
      "info" : "VariableDeclarationStatement[50034-50094]:VariableDeclarationStatement[50065-50125]"
    }, {
      "left" : "convention = convention != null ? convention : defaultCodingConvention;",
      "right" : "convention = convention != null ? convention : defaultCodingConvention;",
      "info" : "ExpressionStatement[50099-50170]:ExpressionStatement[50130-50201]"
    }, {
      "left" : "return convention;",
      "right" : "return convention;",
      "info" : "ReturnStatement[50175-50193]:ReturnStatement[50206-50224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50240-50273]:Block[50271-50304]"
    }, {
      "left" : "return options.ideMode;",
      "right" : "return options.ideMode;",
      "info" : "ReturnStatement[50246-50269]:ReturnStatement[50277-50300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50324-50468]:Block[50355-50499]"
    }, {
      "left" : "switch (options.getLanguageIn()) {\n      case ECMASCRIPT5:\n      case ECMASCRIPT5_STRICT:\n        return true;\n    }",
      "right" : "switch (options.getLanguageIn()) {\n      case ECMASCRIPT5:\n      case ECMASCRIPT5_STRICT:\n        return true;\n    }",
      "info" : "SwitchStatement[50330-50446]:SwitchStatement[50361-50477]"
    }, {
      "left" : "case ECMASCRIPT5:",
      "right" : "case ECMASCRIPT5:",
      "info" : "SwitchCase[50371-50388]:SwitchCase[50402-50419]"
    }, {
      "left" : "case ECMASCRIPT5_STRICT:",
      "right" : "case ECMASCRIPT5_STRICT:",
      "info" : "SwitchCase[50395-50419]:SwitchCase[50426-50450]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[50428-50440]:ReturnStatement[50459-50471]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[50451-50464]:ReturnStatement[50482-50495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50507-50548]:Block[50538-50579]"
    }, {
      "left" : "return options.getLanguageIn();",
      "right" : "return options.getLanguageIn();",
      "info" : "ReturnStatement[50513-50544]:ReturnStatement[50544-50575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50600-50644]:Block[50631-50675]"
    }, {
      "left" : "return options.acceptConstKeyword;",
      "right" : "return options.acceptConstKeyword;",
      "info" : "ReturnStatement[50606-50640]:ReturnStatement[50637-50671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50685-51330]:Block[50716-51361]"
    }, {
      "left" : "if (parserConfig == null)",
      "right" : "if (parserConfig == null)",
      "info" : "IfStatement[50691-51301]:IfStatement[50722-51332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50717-51301]:Block[50748-51332]"
    }, {
      "left" : "Config.LanguageMode mode;",
      "right" : "Config.LanguageMode mode;",
      "info" : "VariableDeclarationStatement[50725-50750]:VariableDeclarationStatement[50756-50781]"
    }, {
      "left" : "switch (options.getLanguageIn()) {\n        case ECMASCRIPT3:\n          mode = Config.LanguageMode.ECMASCRIPT3;\n          break;\n        case ECMASCRIPT5:\n          mode = Config.LanguageMode.ECMASCRIPT5;\n          break;\n        case ECMASCRIPT5_STRICT:\n          mode = Config.LanguageMode.ECMASCRIPT5_STRICT;\n          break;\n        default:\n          throw new IllegalStateException(\"unexpected language mode\");\n      }",
      "right" : "switch (options.getLanguageIn()) {\n        case ECMASCRIPT3:\n          mode = Config.LanguageMode.ECMASCRIPT3;\n          break;\n        case ECMASCRIPT5:\n          mode = Config.LanguageMode.ECMASCRIPT5;\n          break;\n        case ECMASCRIPT5_STRICT:\n          mode = Config.LanguageMode.ECMASCRIPT5_STRICT;\n          break;\n        default:\n          throw new IllegalStateException(\"unexpected language mode\");\n      }",
      "info" : "SwitchStatement[50757-51180]:SwitchStatement[50788-51211]"
    }, {
      "left" : "case ECMASCRIPT3:",
      "right" : "case ECMASCRIPT3:",
      "info" : "SwitchCase[50800-50817]:SwitchCase[50831-50848]"
    }, {
      "left" : "mode = Config.LanguageMode.ECMASCRIPT3;",
      "right" : "mode = Config.LanguageMode.ECMASCRIPT3;",
      "info" : "ExpressionStatement[50828-50867]:ExpressionStatement[50859-50898]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[50878-50884]:BreakStatement[50909-50915]"
    }, {
      "left" : "case ECMASCRIPT5:",
      "right" : "case ECMASCRIPT5:",
      "info" : "SwitchCase[50893-50910]:SwitchCase[50924-50941]"
    }, {
      "left" : "mode = Config.LanguageMode.ECMASCRIPT5;",
      "right" : "mode = Config.LanguageMode.ECMASCRIPT5;",
      "info" : "ExpressionStatement[50921-50960]:ExpressionStatement[50952-50991]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[50971-50977]:BreakStatement[51002-51008]"
    }, {
      "left" : "case ECMASCRIPT5_STRICT:",
      "right" : "case ECMASCRIPT5_STRICT:",
      "info" : "SwitchCase[50986-51010]:SwitchCase[51017-51041]"
    }, {
      "left" : "mode = Config.LanguageMode.ECMASCRIPT5_STRICT;",
      "right" : "mode = Config.LanguageMode.ECMASCRIPT5_STRICT;",
      "info" : "ExpressionStatement[51021-51067]:ExpressionStatement[51052-51098]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51078-51084]:BreakStatement[51109-51115]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[51093-51101]:SwitchCase[51124-51132]"
    }, {
      "left" : "throw new IllegalStateException(\"unexpected language mode\");",
      "right" : "throw new IllegalStateException(\"unexpected language mode\");",
      "info" : "ThrowStatement[51112-51172]:ThrowStatement[51143-51203]"
    }, {
      "left" : "parserConfig = ParserRunner.createConfig(\n        isIdeMode(),\n        mode,\n        acceptConstKeyword());",
      "right" : "parserConfig = ParserRunner.createConfig(\n        isIdeMode(),\n        mode,\n        acceptConstKeyword());",
      "info" : "ExpressionStatement[51188-51295]:ExpressionStatement[51219-51326]"
    }, {
      "left" : "return parserConfig;",
      "right" : "return parserConfig;",
      "info" : "ReturnStatement[51306-51326]:ReturnStatement[51337-51357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51385-51421]:Block[51416-51452]"
    }, {
      "left" : "return options.checkTypes;",
      "right" : "return options.checkTypes;",
      "info" : "ReturnStatement[51391-51417]:ReturnStatement[51422-51448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51793-51833]:Block[51824-51864]"
    }, {
      "left" : "return new DiagnosticGroups();",
      "right" : "return new DiagnosticGroups();",
      "info" : "ReturnStatement[51799-51829]:ReturnStatement[51830-51860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51883-52155]:Block[51914-52186]"
    }, {
      "left" : "CheckLevel level = error.level;",
      "right" : "CheckLevel level = error.level;",
      "info" : "VariableDeclarationStatement[51889-51920]:VariableDeclarationStatement[51920-51951]"
    }, {
      "left" : "if (warningsGuard != null)",
      "right" : "if (warningsGuard != null)",
      "info" : "IfStatement[51925-52079]:IfStatement[51956-52110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51952-52079]:Block[51983-52110]"
    }, {
      "left" : "CheckLevel newLevel = warningsGuard.level(error);",
      "right" : "CheckLevel newLevel = warningsGuard.level(error);",
      "info" : "VariableDeclarationStatement[51960-52009]:VariableDeclarationStatement[51991-52040]"
    }, {
      "left" : "if (newLevel != null)",
      "right" : "if (newLevel != null)",
      "info" : "IfStatement[52016-52073]:IfStatement[52047-52104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52038-52073]:Block[52069-52104]"
    }, {
      "left" : "level = newLevel;",
      "right" : "level = newLevel;",
      "info" : "ExpressionStatement[52048-52065]:ExpressionStatement[52079-52096]"
    }, {
      "left" : "if (level.isOn())",
      "right" : "if (level.isOn())",
      "info" : "IfStatement[52085-52151]:IfStatement[52116-52182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52103-52151]:Block[52134-52182]"
    }, {
      "left" : "errorManager.report(level, error);",
      "right" : "errorManager.report(level, error);",
      "info" : "ExpressionStatement[52111-52145]:ExpressionStatement[52142-52176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52218-52303]:Block[52249-52334]"
    }, {
      "left" : "Preconditions.checkNotNull(options);",
      "right" : "Preconditions.checkNotNull(options);",
      "info" : "ExpressionStatement[52224-52260]:ExpressionStatement[52255-52291]"
    }, {
      "left" : "return warningsGuard.level(error);",
      "right" : "return warningsGuard.level(error);",
      "info" : "ReturnStatement[52265-52299]:ReturnStatement[52296-52330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52419-52695]:Block[52450-52726]"
    }, {
      "left" : "String finalMessage =\n      \"INTERNAL COMPILER ERROR.\\n\" +\n      \"Please report this problem.\\n\" + message;",
      "right" : "String finalMessage =\n      \"INTERNAL COMPILER ERROR.\\n\" +\n      \"Please report this problem.\\n\" + message;",
      "info" : "VariableDeclarationStatement[52425-52532]:VariableDeclarationStatement[52456-52563]"
    }, {
      "left" : "RuntimeException e = new RuntimeException(finalMessage, cause);",
      "right" : "RuntimeException e = new RuntimeException(finalMessage, cause);",
      "info" : "VariableDeclarationStatement[52538-52601]:VariableDeclarationStatement[52569-52632]"
    }, {
      "left" : "if (cause != null)",
      "right" : "if (cause != null)",
      "info" : "IfStatement[52606-52678]:IfStatement[52637-52709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52625-52678]:Block[52656-52709]"
    }, {
      "left" : "e.setStackTrace(cause.getStackTrace());",
      "right" : "e.setStackTrace(cause.getStackTrace());",
      "info" : "ExpressionStatement[52633-52672]:ExpressionStatement[52664-52703]"
    }, {
      "left" : "throw e;",
      "right" : "throw e;",
      "info" : "ThrowStatement[52683-52691]:ThrowStatement[52714-52722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52771-52817]:Block[52802-52848]"
    }, {
      "left" : "return errorManager.getErrorCount();",
      "right" : "return errorManager.getErrorCount();",
      "info" : "ReturnStatement[52777-52813]:ReturnStatement[52808-52844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52896-52944]:Block[52927-52975]"
    }, {
      "left" : "return errorManager.getWarningCount();",
      "right" : "return errorManager.getWarningCount();",
      "info" : "ReturnStatement[52902-52940]:ReturnStatement[52933-52971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52987-53040]:Block[53018-53071]"
    }, {
      "left" : "return !isIdeMode() && getErrorCount() > 0;",
      "right" : "return !isIdeMode() && getErrorCount() > 0;",
      "info" : "ReturnStatement[52993-53036]:ReturnStatement[53024-53067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53489-53525]:Block[53520-53556]"
    }, {
      "left" : "return hasHaltingErrors();",
      "right" : "return hasHaltingErrors();",
      "info" : "ReturnStatement[53495-53521]:ReturnStatement[53526-53552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53630-53710]:Block[53661-53741]"
    }, {
      "left" : "debugLog.append(str);",
      "right" : "debugLog.append(str);",
      "info" : "ExpressionStatement[53636-53657]:ExpressionStatement[53667-53688]"
    }, {
      "left" : "debugLog.append('\\n');",
      "right" : "debugLog.append('\\n');",
      "info" : "ExpressionStatement[53662-53684]:ExpressionStatement[53693-53715]"
    }, {
      "left" : "logger.fine(str);",
      "right" : "logger.fine(str);",
      "info" : "ExpressionStatement[53689-53706]:ExpressionStatement[53720-53737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53772-53907]:Block[53803-53938]"
    }, {
      "left" : "if (inputsByName.containsKey(sourceName))",
      "right" : "if (inputsByName.containsKey(sourceName))",
      "info" : "IfStatement[53778-53886]:IfStatement[53809-53917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53820-53886]:Block[53851-53917]"
    }, {
      "left" : "return inputsByName.get(sourceName).getSourceFile();",
      "right" : "return inputsByName.get(sourceName).getSourceFile();",
      "info" : "ReturnStatement[53828-53880]:ReturnStatement[53859-53911]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[53891-53903]:ReturnStatement[53922-53934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53974-54174]:Block[54005-54205]"
    }, {
      "left" : "if (lineNumber < 1)",
      "right" : "if (lineNumber < 1)",
      "info" : "IfStatement[53980-54026]:IfStatement[54011-54057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54000-54026]:Block[54031-54057]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[54008-54020]:ReturnStatement[54039-54051]"
    }, {
      "left" : "SourceFile input = getSourceFileByName(sourceName);",
      "right" : "SourceFile input = getSourceFileByName(sourceName);",
      "info" : "VariableDeclarationStatement[54031-54082]:VariableDeclarationStatement[54062-54113]"
    }, {
      "left" : "if (input != null)",
      "right" : "if (input != null)",
      "info" : "IfStatement[54087-54153]:IfStatement[54118-54184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54106-54153]:Block[54137-54184]"
    }, {
      "left" : "return input.getLine(lineNumber);",
      "right" : "return input.getLine(lineNumber);",
      "info" : "ReturnStatement[54114-54147]:ReturnStatement[54145-54178]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[54158-54170]:ReturnStatement[54189-54201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54243-54445]:Block[54274-54476]"
    }, {
      "left" : "if (lineNumber < 1)",
      "right" : "if (lineNumber < 1)",
      "info" : "IfStatement[54249-54295]:IfStatement[54280-54326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54269-54295]:Block[54300-54326]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[54277-54289]:ReturnStatement[54308-54320]"
    }, {
      "left" : "SourceFile input = getSourceFileByName(sourceName);",
      "right" : "SourceFile input = getSourceFileByName(sourceName);",
      "info" : "VariableDeclarationStatement[54300-54351]:VariableDeclarationStatement[54331-54382]"
    }, {
      "left" : "if (input != null)",
      "right" : "if (input != null)",
      "info" : "IfStatement[54356-54424]:IfStatement[54387-54455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54375-54424]:Block[54406-54455]"
    }, {
      "left" : "return input.getRegion(lineNumber);",
      "right" : "return input.getRegion(lineNumber);",
      "info" : "ReturnStatement[54383-54418]:ReturnStatement[54414-54449]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[54429-54441]:ReturnStatement[54460-54472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54691-55084]:Block[54722-55115]"
    }, {
      "left" : "if (module == null)",
      "right" : "if (module == null)",
      "info" : "IfStatement[54697-54862]:IfStatement[54728-54893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54717-54862]:Block[54748-54893]"
    }, {
      "left" : "if (inputs.isEmpty())",
      "right" : "if (inputs.isEmpty())",
      "info" : "IfStatement[54725-54810]:IfStatement[54756-54841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54747-54810]:Block[54778-54841]"
    }, {
      "left" : "throw new IllegalStateException(\"No inputs\");",
      "right" : "throw new IllegalStateException(\"No inputs\");",
      "info" : "ThrowStatement[54757-54802]:ThrowStatement[54788-54833]"
    }, {
      "left" : "return inputs.get(0).getAstRoot(this);",
      "right" : "return inputs.get(0).getAstRoot(this);",
      "info" : "ReturnStatement[54818-54856]:ReturnStatement[54849-54887]"
    }, {
      "left" : "List<CompilerInput> moduleInputs = module.getInputs();",
      "right" : "List<CompilerInput> moduleInputs = module.getInputs();",
      "info" : "VariableDeclarationStatement[54868-54922]:VariableDeclarationStatement[54899-54953]"
    }, {
      "left" : "if (moduleInputs.size() > 0)",
      "right" : "if (moduleInputs.size() > 0)",
      "info" : "IfStatement[54927-55014]:IfStatement[54958-55045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54956-55014]:Block[54987-55045]"
    }, {
      "left" : "return moduleInputs.get(0).getAstRoot(this);",
      "right" : "return moduleInputs.get(0).getAstRoot(this);",
      "info" : "ReturnStatement[54964-55008]:ReturnStatement[54995-55039]"
    }, {
      "left" : "throw new IllegalStateException(\"Root module has no inputs\");",
      "right" : "throw new IllegalStateException(\"Root module has no inputs\");",
      "info" : "ThrowStatement[55019-55080]:ThrowStatement[55050-55111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55120-55147]:Block[55151-55178]"
    }, {
      "left" : "return sourceMap;",
      "right" : "return sourceMap;",
      "info" : "ReturnStatement[55126-55143]:ReturnStatement[55157-55174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55180-55248]:Block[55211-55279]"
    }, {
      "left" : "return getPassConfig().getIntermediateState().variableMap;",
      "right" : "return getPassConfig().getIntermediateState().variableMap;",
      "info" : "ReturnStatement[55186-55244]:ReturnStatement[55217-55275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55281-55349]:Block[55312-55380]"
    }, {
      "left" : "return getPassConfig().getIntermediateState().propertyMap;",
      "right" : "return getPassConfig().getIntermediateState().propertyMap;",
      "info" : "ReturnStatement[55287-55345]:ReturnStatement[55318-55376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55382-55407]:Block[55413-55438]"
    }, {
      "left" : "return options;",
      "right" : "return options;",
      "info" : "ReturnStatement[55388-55403]:ReturnStatement[55419-55434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55464-55504]:Block[55495-55535]"
    }, {
      "left" : "return functionInformationMap;",
      "right" : "return functionInformationMap;",
      "info" : "ReturnStatement[55470-55500]:ReturnStatement[55501-55531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55642-55675]:Block[55673-55706]"
    }, {
      "left" : "logger.setLevel(level);",
      "right" : "logger.setLevel(level);",
      "info" : "ExpressionStatement[55648-55671]:ExpressionStatement[55679-55702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55805-56036]:Block[55836-56067]"
    }, {
      "left" : "if (jsRoot != null)",
      "right" : "if (jsRoot != null)",
      "info" : "IfStatement[55811-56032]:IfStatement[55842-56063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55831-56002]:Block[55862-56033]"
    }, {
      "left" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);",
      "right" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);",
      "info" : "VariableDeclarationStatement[55839-55908]:VariableDeclarationStatement[55870-55939]"
    }, {
      "left" : "cfa.process(null, jsRoot);",
      "right" : "cfa.process(null, jsRoot);",
      "info" : "ExpressionStatement[55915-55941]:ExpressionStatement[55946-55972]"
    }, {
      "left" : "return DotFormatter.toDot(jsRoot, cfa.getCfg());",
      "right" : "return DotFormatter.toDot(jsRoot, cfa.getCfg());",
      "info" : "ReturnStatement[55948-55996]:ReturnStatement[55979-56027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56008-56032]:Block[56039-56063]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[56016-56026]:ReturnStatement[56047-56057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56090-56195]:Block[56121-56226]"
    }, {
      "left" : "if (options == null)",
      "right" : "if (options == null)",
      "info" : "IfStatement[56096-56166]:IfStatement[56127-56197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56117-56166]:Block[56148-56197]"
    }, {
      "left" : "initOptions(new CompilerOptions());",
      "right" : "initOptions(new CompilerOptions());",
      "info" : "ExpressionStatement[56125-56160]:ExpressionStatement[56156-56191]"
    }, {
      "left" : "return errorManager;",
      "right" : "return errorManager;",
      "info" : "ReturnStatement[56171-56191]:ReturnStatement[56202-56222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56250-56319]:Block[56281-56350]"
    }, {
      "left" : "return Collections.<CompilerInput>unmodifiableList(inputs);",
      "right" : "return Collections.<CompilerInput>unmodifiableList(inputs);",
      "info" : "ReturnStatement[56256-56315]:ReturnStatement[56287-56346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57383-57385]:Block[57414-57416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57521-57904]:Block[57552-57935]"
    }, {
      "left" : "IntermediateState state = new IntermediateState();",
      "right" : "IntermediateState state = new IntermediateState();",
      "info" : "VariableDeclarationStatement[57527-57577]:VariableDeclarationStatement[57558-57608]"
    }, {
      "left" : "state.externsRoot = externsRoot;",
      "right" : "state.externsRoot = externsRoot;",
      "info" : "ExpressionStatement[57582-57614]:ExpressionStatement[57613-57645]"
    }, {
      "left" : "state.jsRoot = jsRoot;",
      "right" : "state.jsRoot = jsRoot;",
      "info" : "ExpressionStatement[57619-57641]:ExpressionStatement[57650-57672]"
    }, {
      "left" : "state.externs = externs;",
      "right" : "state.externs = externs;",
      "info" : "ExpressionStatement[57646-57670]:ExpressionStatement[57677-57701]"
    }, {
      "left" : "state.inputs = inputs;",
      "right" : "state.inputs = inputs;",
      "info" : "ExpressionStatement[57675-57697]:ExpressionStatement[57706-57728]"
    }, {
      "left" : "state.modules = modules;",
      "right" : "state.modules = modules;",
      "info" : "ExpressionStatement[57702-57726]:ExpressionStatement[57733-57757]"
    }, {
      "left" : "state.passConfigState = getPassConfig().getIntermediateState();",
      "right" : "state.passConfigState = getPassConfig().getIntermediateState();",
      "info" : "ExpressionStatement[57731-57794]:ExpressionStatement[57762-57825]"
    }, {
      "left" : "state.typeRegistry = typeRegistry;",
      "right" : "state.typeRegistry = typeRegistry;",
      "info" : "ExpressionStatement[57799-57833]:ExpressionStatement[57830-57864]"
    }, {
      "left" : "state.lifeCycleStage = getLifeCycleStage();",
      "right" : "state.lifeCycleStage = getLifeCycleStage();",
      "info" : "ExpressionStatement[57838-57881]:ExpressionStatement[57869-57912]"
    }, {
      "left" : "return state;",
      "right" : "return state;",
      "info" : "ReturnStatement[57887-57900]:ReturnStatement[57918-57931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58087-58431]:Block[58118-58462]"
    }, {
      "left" : "externsRoot = state.externsRoot;",
      "right" : "externsRoot = state.externsRoot;",
      "info" : "ExpressionStatement[58093-58125]:ExpressionStatement[58124-58156]"
    }, {
      "left" : "jsRoot = state.jsRoot;",
      "right" : "jsRoot = state.jsRoot;",
      "info" : "ExpressionStatement[58130-58152]:ExpressionStatement[58161-58183]"
    }, {
      "left" : "externs = state.externs;",
      "right" : "externs = state.externs;",
      "info" : "ExpressionStatement[58157-58181]:ExpressionStatement[58188-58212]"
    }, {
      "left" : "inputs = state.inputs;",
      "right" : "inputs = state.inputs;",
      "info" : "ExpressionStatement[58186-58208]:ExpressionStatement[58217-58239]"
    }, {
      "left" : "modules = state.modules;",
      "right" : "modules = state.modules;",
      "info" : "ExpressionStatement[58213-58237]:ExpressionStatement[58244-58268]"
    }, {
      "left" : "passes = createPassConfigInternal();",
      "right" : "passes = createPassConfigInternal();",
      "info" : "ExpressionStatement[58242-58278]:ExpressionStatement[58273-58309]"
    }, {
      "left" : "getPassConfig().setIntermediateState(state.passConfigState);",
      "right" : "getPassConfig().setIntermediateState(state.passConfigState);",
      "info" : "ExpressionStatement[58283-58343]:ExpressionStatement[58314-58374]"
    }, {
      "left" : "typeRegistry = state.typeRegistry;",
      "right" : "typeRegistry = state.typeRegistry;",
      "info" : "ExpressionStatement[58348-58382]:ExpressionStatement[58379-58413]"
    }, {
      "left" : "setLifeCycleStage(state.lifeCycleStage);",
      "right" : "setLifeCycleStage(state.lifeCycleStage);",
      "info" : "ExpressionStatement[58387-58427]:ExpressionStatement[58418-58458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58498-58522]:Block[58529-58553]"
    }, {
      "left" : "return inputs;",
      "right" : "return inputs;",
      "info" : "ReturnStatement[58504-58518]:ReturnStatement[58535-58549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58590-58615]:Block[58621-58646]"
    }, {
      "left" : "return externs;",
      "right" : "return externs;",
      "info" : "ReturnStatement[58596-58611]:ReturnStatement[58627-58642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58667-58710]:Block[58698-58741]"
    }, {
      "left" : "return hasRegExpGlobalReferences;",
      "right" : "return hasRegExpGlobalReferences;",
      "info" : "ReturnStatement[58673-58706]:ReturnStatement[58704-58737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58780-58829]:Block[58811-58860]"
    }, {
      "left" : "hasRegExpGlobalReferences = references;",
      "right" : "hasRegExpGlobalReferences = references;",
      "info" : "ExpressionStatement[58786-58825]:ExpressionStatement[58817-58856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58946-59253]:Block[58977-59284]"
    }, {
      "left" : "Preconditions.checkState(collectionRoot.getType() == Token.SCRIPT\n        || collectionRoot.getType() == Token.BLOCK);",
      "right" : "Preconditions.checkState(collectionRoot.getType() == Token.SCRIPT\n        || collectionRoot.getType() == Token.BLOCK);",
      "info" : "ExpressionStatement[58952-59070]:ExpressionStatement[58983-59101]"
    }, {
      "left" : "if (globalRefMap == null)",
      "right" : "if (globalRefMap == null)",
      "info" : "IfStatement[59075-59176]:IfStatement[59106-59207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59101-59176]:Block[59132-59207]"
    }, {
      "left" : "globalRefMap = new GlobalVarReferenceMap(getInputsInOrder());",
      "right" : "globalRefMap = new GlobalVarReferenceMap(getInputsInOrder());",
      "info" : "ExpressionStatement[59109-59170]:ExpressionStatement[59140-59201]"
    }, {
      "left" : "globalRefMap.updateGlobalVarReferences(refMapPatch, collectionRoot);",
      "right" : "globalRefMap.updateGlobalVarReferences(refMapPatch, collectionRoot);",
      "info" : "ExpressionStatement[59181-59249]:ExpressionStatement[59212-59280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59307-59337]:Block[59338-59368]"
    }, {
      "left" : "return globalRefMap;",
      "right" : "return globalRefMap;",
      "info" : "ReturnStatement[59313-59333]:ReturnStatement[59344-59364]"
    } ]
  },
  "interFileMappings" : { }
}