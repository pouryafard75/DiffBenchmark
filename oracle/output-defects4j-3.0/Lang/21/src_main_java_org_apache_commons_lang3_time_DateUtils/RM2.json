{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "DateUtils",
      "right" : "DateUtils",
      "info" : "TypeDeclaration[1091-79295]:TypeDeclaration[1091-79309]"
    }, {
      "left" : "public static final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone(\"GMT\");",
      "right" : "public static final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone(\"GMT\");",
      "info" : "FieldDeclaration[2230-2373]:FieldDeclaration[2230-2373]"
    }, {
      "left" : "public static final long MILLIS_PER_SECOND = 1000;",
      "right" : "public static final long MILLIS_PER_SECOND = 1000;",
      "info" : "FieldDeclaration[2378-2514]:FieldDeclaration[2378-2514]"
    }, {
      "left" : "public static final long MILLIS_PER_MINUTE = 60 * MILLIS_PER_SECOND;",
      "right" : "public static final long MILLIS_PER_MINUTE = 60 * MILLIS_PER_SECOND;",
      "info" : "FieldDeclaration[2519-2673]:FieldDeclaration[2519-2673]"
    }, {
      "left" : "public static final long MILLIS_PER_HOUR = 60 * MILLIS_PER_MINUTE;",
      "right" : "public static final long MILLIS_PER_HOUR = 60 * MILLIS_PER_MINUTE;",
      "info" : "FieldDeclaration[2678-2828]:FieldDeclaration[2678-2828]"
    }, {
      "left" : "public static final long MILLIS_PER_DAY = 24 * MILLIS_PER_HOUR;",
      "right" : "public static final long MILLIS_PER_DAY = 24 * MILLIS_PER_HOUR;",
      "info" : "FieldDeclaration[2833-2979]:FieldDeclaration[2833-2979]"
    }, {
      "left" : "public final static int SEMI_MONTH = 1001;",
      "right" : "public final static int SEMI_MONTH = 1001;",
      "info" : "FieldDeclaration[2985-3156]:FieldDeclaration[2985-3156]"
    }, {
      "left" : "private static final int[][] fields = {\n            {Calendar.MILLISECOND},\n            {Calendar.SECOND},\n            {Calendar.MINUTE},\n            {Calendar.HOUR_OF_DAY, Calendar.HOUR},\n            {Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.AM_PM \n                \n            },\n            {Calendar.MONTH, DateUtils.SEMI_MONTH},\n            {Calendar.YEAR},\n            {Calendar.ERA}};",
      "right" : "private static final int[][] fields = {\n            {Calendar.MILLISECOND},\n            {Calendar.SECOND},\n            {Calendar.MINUTE},\n            {Calendar.HOUR_OF_DAY, Calendar.HOUR},\n            {Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.AM_PM \n                \n            },\n            {Calendar.MONTH, DateUtils.SEMI_MONTH},\n            {Calendar.YEAR},\n            {Calendar.ERA}};",
      "info" : "FieldDeclaration[3162-3638]:FieldDeclaration[3162-3638]"
    }, {
      "left" : "public final static int RANGE_WEEK_SUNDAY = 1;",
      "right" : "public final static int RANGE_WEEK_SUNDAY = 1;",
      "info" : "FieldDeclaration[3644-3747]:FieldDeclaration[3644-3747]"
    }, {
      "left" : "public final static int RANGE_WEEK_MONDAY = 2;",
      "right" : "public final static int RANGE_WEEK_MONDAY = 2;",
      "info" : "FieldDeclaration[3753-3856]:FieldDeclaration[3753-3856]"
    }, {
      "left" : "public final static int RANGE_WEEK_RELATIVE = 3;",
      "right" : "public final static int RANGE_WEEK_RELATIVE = 3;",
      "info" : "FieldDeclaration[3862-3976]:FieldDeclaration[3862-3976]"
    }, {
      "left" : "public final static int RANGE_WEEK_CENTER = 4;",
      "right" : "public final static int RANGE_WEEK_CENTER = 4;",
      "info" : "FieldDeclaration[3982-4098]:FieldDeclaration[3982-4098]"
    }, {
      "left" : "public final static int RANGE_MONTH_SUNDAY = 5;",
      "right" : "public final static int RANGE_MONTH_SUNDAY = 5;",
      "info" : "FieldDeclaration[4104-4218]:FieldDeclaration[4104-4218]"
    }, {
      "left" : "public final static int RANGE_MONTH_MONDAY = 6;",
      "right" : "public final static int RANGE_MONTH_MONDAY = 6;",
      "info" : "FieldDeclaration[4224-4338]:FieldDeclaration[4224-4338]"
    }, {
      "left" : "public final static int MODIFY_TRUNCATE = 0;",
      "right" : "public final static int MODIFY_TRUNCATE = 0;",
      "info" : "FieldDeclaration[4348-4465]:FieldDeclaration[4348-4465]"
    }, {
      "left" : "public final static int MODIFY_ROUND = 1;",
      "right" : "public final static int MODIFY_ROUND = 1;",
      "info" : "FieldDeclaration[4471-4582]:FieldDeclaration[4471-4582]"
    }, {
      "left" : "public final static int MODIFY_CEILING= 2;",
      "right" : "public final static int MODIFY_CEILING= 2;",
      "info" : "FieldDeclaration[4592-4703]:FieldDeclaration[4592-4703]"
    }, {
      "left" : "public DateUtils()",
      "right" : "public DateUtils()",
      "info" : "MethodDeclaration[4714-5074]:MethodDeclaration[4714-5074]"
    }, {
      "left" : "public static boolean isSameDay(Date date1, Date date2)",
      "right" : "public static boolean isSameDay(Date date1, Date date2)",
      "info" : "MethodDeclaration[5158-6065]:MethodDeclaration[5158-6065]"
    }, {
      "left" : "public static boolean isSameDay(Calendar cal1, Calendar cal2)",
      "right" : "public static boolean isSameDay(Calendar cal1, Calendar cal2)",
      "info" : "MethodDeclaration[6071-7025]:MethodDeclaration[6071-7025]"
    }, {
      "left" : "public static boolean isSameInstant(Date date1, Date date2)",
      "right" : "public static boolean isSameInstant(Date date1, Date date2)",
      "info" : "MethodDeclaration[7109-7829]:MethodDeclaration[7109-7829]"
    }, {
      "left" : "public static boolean isSameInstant(Calendar cal1, Calendar cal2)",
      "right" : "public static boolean isSameInstant(Calendar cal1, Calendar cal2)",
      "info" : "MethodDeclaration[7835-8587]:MethodDeclaration[7835-8587]"
    }, {
      "left" : "public static boolean isSameLocalTime(Calendar cal1, Calendar cal2)",
      "right" : "public static boolean isSameLocalTime(Calendar cal1, Calendar cal2)",
      "info" : "MethodDeclaration[8671-9997]:MethodDeclaration[8671-10011]"
    }, {
      "left" : "public static Date parseDate(String str, String... parsePatterns) throws ParseException",
      "right" : "public static Date parseDate(String str, String... parsePatterns) throws ParseException",
      "info" : "MethodDeclaration[10081-10980]:MethodDeclaration[10095-10994]"
    }, {
      "left" : "public static Date parseDateStrictly(String str, String... parsePatterns) throws ParseException",
      "right" : "public static Date parseDateStrictly(String str, String... parsePatterns) throws ParseException",
      "info" : "MethodDeclaration[11066-12008]:MethodDeclaration[11080-12022]"
    }, {
      "left" : "private static Date parseDateWithLeniency(String str, String[] parsePatterns,\n            boolean lenient) throws ParseException",
      "right" : "private static Date parseDateWithLeniency(String str, String[] parsePatterns,\n            boolean lenient) throws ParseException",
      "info" : "MethodDeclaration[12014-14190]:MethodDeclaration[12028-14204]"
    }, {
      "left" : "public static Date addYears(Date date, int amount)",
      "right" : "public static Date addYears(Date date, int amount)",
      "info" : "MethodDeclaration[14274-14727]:MethodDeclaration[14288-14741]"
    }, {
      "left" : "public static Date addMonths(Date date, int amount)",
      "right" : "public static Date addMonths(Date date, int amount)",
      "info" : "MethodDeclaration[14811-15267]:MethodDeclaration[14825-15281]"
    }, {
      "left" : "public static Date addWeeks(Date date, int amount)",
      "right" : "public static Date addWeeks(Date date, int amount)",
      "info" : "MethodDeclaration[15351-15812]:MethodDeclaration[15365-15826]"
    }, {
      "left" : "public static Date addDays(Date date, int amount)",
      "right" : "public static Date addDays(Date date, int amount)",
      "info" : "MethodDeclaration[15896-16355]:MethodDeclaration[15910-16369]"
    }, {
      "left" : "public static Date addHours(Date date, int amount)",
      "right" : "public static Date addHours(Date date, int amount)",
      "info" : "MethodDeclaration[16439-16899]:MethodDeclaration[16453-16913]"
    }, {
      "left" : "public static Date addMinutes(Date date, int amount)",
      "right" : "public static Date addMinutes(Date date, int amount)",
      "info" : "MethodDeclaration[16983-17442]:MethodDeclaration[16997-17456]"
    }, {
      "left" : "public static Date addSeconds(Date date, int amount)",
      "right" : "public static Date addSeconds(Date date, int amount)",
      "info" : "MethodDeclaration[17526-17985]:MethodDeclaration[17540-17999]"
    }, {
      "left" : "public static Date addMilliseconds(Date date, int amount)",
      "right" : "public static Date addMilliseconds(Date date, int amount)",
      "info" : "MethodDeclaration[18069-18543]:MethodDeclaration[18083-18557]"
    }, {
      "left" : "private static Date add(Date date, int calendarField, int amount)",
      "right" : "private static Date add(Date date, int calendarField, int amount)",
      "info" : "MethodDeclaration[18627-19337]:MethodDeclaration[18641-19351]"
    }, {
      "left" : "public static Date setYears(Date date, int amount)",
      "right" : "public static Date setYears(Date date, int amount)",
      "info" : "MethodDeclaration[19425-19881]:MethodDeclaration[19439-19895]"
    }, {
      "left" : "public static Date setMonths(Date date, int amount)",
      "right" : "public static Date setMonths(Date date, int amount)",
      "info" : "MethodDeclaration[19965-20424]:MethodDeclaration[19979-20438]"
    }, {
      "left" : "public static Date setDays(Date date, int amount)",
      "right" : "public static Date setDays(Date date, int amount)",
      "info" : "MethodDeclaration[20508-20978]:MethodDeclaration[20522-20992]"
    }, {
      "left" : "public static Date setHours(Date date, int amount)",
      "right" : "public static Date setHours(Date date, int amount)",
      "info" : "MethodDeclaration[21062-21558]:MethodDeclaration[21076-21572]"
    }, {
      "left" : "public static Date setMinutes(Date date, int amount)",
      "right" : "public static Date setMinutes(Date date, int amount)",
      "info" : "MethodDeclaration[21642-22103]:MethodDeclaration[21656-22117]"
    }, {
      "left" : "public static Date setSeconds(Date date, int amount)",
      "right" : "public static Date setSeconds(Date date, int amount)",
      "info" : "MethodDeclaration[22191-22653]:MethodDeclaration[22205-22667]"
    }, {
      "left" : "public static Date setMilliseconds(Date date, int amount)",
      "right" : "public static Date setMilliseconds(Date date, int amount)",
      "info" : "MethodDeclaration[22737-23213]:MethodDeclaration[22751-23227]"
    }, {
      "left" : "private static Date set(Date date, int calendarField, int amount)",
      "right" : "private static Date set(Date date, int calendarField, int amount)",
      "info" : "MethodDeclaration[23302-24202]:MethodDeclaration[23316-24216]"
    }, {
      "left" : "public static Calendar toCalendar(Date date)",
      "right" : "public static Calendar toCalendar(Date date)",
      "info" : "MethodDeclaration[24289-24664]:MethodDeclaration[24303-24678]"
    }, {
      "left" : "public static Date round(Date date, int field)",
      "right" : "public static Date round(Date date, int field)",
      "info" : "MethodDeclaration[24752-26365]:MethodDeclaration[24766-26379]"
    }, {
      "left" : "public static Calendar round(Calendar date, int field)",
      "right" : "public static Calendar round(Calendar date, int field)",
      "info" : "MethodDeclaration[26371-27985]:MethodDeclaration[26385-27999]"
    }, {
      "left" : "public static Date round(Object date, int field)",
      "right" : "public static Date round(Object date, int field)",
      "info" : "MethodDeclaration[27991-29879]:MethodDeclaration[28005-29893]"
    }, {
      "left" : "public static Date truncate(Date date, int field)",
      "right" : "public static Date truncate(Date date, int field)",
      "info" : "MethodDeclaration[29963-30966]:MethodDeclaration[29977-30980]"
    }, {
      "left" : "public static Calendar truncate(Calendar date, int field)",
      "right" : "public static Calendar truncate(Calendar date, int field)",
      "info" : "MethodDeclaration[30972-31982]:MethodDeclaration[30986-31996]"
    }, {
      "left" : "public static Date truncate(Object date, int field)",
      "right" : "public static Date truncate(Object date, int field)",
      "info" : "MethodDeclaration[31988-33314]:MethodDeclaration[32002-33328]"
    }, {
      "left" : "public static Date ceiling(Date date, int field)",
      "right" : "public static Date ceiling(Date date, int field)",
      "info" : "MethodDeclaration[33400-34415]:MethodDeclaration[33414-34429]"
    }, {
      "left" : "public static Calendar ceiling(Calendar date, int field)",
      "right" : "public static Calendar ceiling(Calendar date, int field)",
      "info" : "MethodDeclaration[34421-35434]:MethodDeclaration[34435-35448]"
    }, {
      "left" : "public static Date ceiling(Object date, int field)",
      "right" : "public static Date ceiling(Object date, int field)",
      "info" : "MethodDeclaration[35440-36805]:MethodDeclaration[35454-36819]"
    }, {
      "left" : "private static void modify(Calendar val, int field, int modType)",
      "right" : "private static void modify(Calendar val, int field, int modType)",
      "info" : "MethodDeclaration[36889-43223]:MethodDeclaration[36903-43237]"
    }, {
      "left" : "public static Iterator<Calendar> iterator(Date focus, int rangeStyle)",
      "right" : "public static Iterator<Calendar> iterator(Date focus, int rangeStyle)",
      "info" : "MethodDeclaration[43307-44833]:MethodDeclaration[43321-44847]"
    }, {
      "left" : "public static Iterator<Calendar> iterator(Calendar focus, int rangeStyle)",
      "right" : "public static Iterator<Calendar> iterator(Calendar focus, int rangeStyle)",
      "info" : "MethodDeclaration[44839-48875]:MethodDeclaration[44853-48889]"
    }, {
      "left" : "public static Iterator<?> iterator(Object focus, int rangeStyle)",
      "right" : "public static Iterator<?> iterator(Object focus, int rangeStyle)",
      "info" : "MethodDeclaration[48881-50307]:MethodDeclaration[48895-50321]"
    }, {
      "left" : "public static long getFragmentInMilliseconds(Date date, int fragment)",
      "right" : "public static long getFragmentInMilliseconds(Date date, int fragment)",
      "info" : "MethodDeclaration[50317-52226]:MethodDeclaration[50331-52240]"
    }, {
      "left" : "public static long getFragmentInSeconds(Date date, int fragment)",
      "right" : "public static long getFragmentInSeconds(Date date, int fragment)",
      "info" : "MethodDeclaration[52236-54207]:MethodDeclaration[52250-54221]"
    }, {
      "left" : "public static long getFragmentInMinutes(Date date, int fragment)",
      "right" : "public static long getFragmentInMinutes(Date date, int fragment)",
      "info" : "MethodDeclaration[54217-56241]:MethodDeclaration[54231-56255]"
    }, {
      "left" : "public static long getFragmentInHours(Date date, int fragment)",
      "right" : "public static long getFragmentInHours(Date date, int fragment)",
      "info" : "MethodDeclaration[56251-58239]:MethodDeclaration[56265-58253]"
    }, {
      "left" : "public static long getFragmentInDays(Date date, int fragment)",
      "right" : "public static long getFragmentInDays(Date date, int fragment)",
      "info" : "MethodDeclaration[58249-60150]:MethodDeclaration[58263-60164]"
    }, {
      "left" : "public static long getFragmentInMilliseconds(Calendar calendar, int fragment)",
      "right" : "public static long getFragmentInMilliseconds(Calendar calendar, int fragment)",
      "info" : "MethodDeclaration[60156-62204]:MethodDeclaration[60170-62218]"
    }, {
      "left" : "public static long getFragmentInSeconds(Calendar calendar, int fragment)",
      "right" : "public static long getFragmentInSeconds(Calendar calendar, int fragment)",
      "info" : "MethodDeclaration[62209-64207]:MethodDeclaration[62223-64221]"
    }, {
      "left" : "public static long getFragmentInMinutes(Calendar calendar, int fragment)",
      "right" : "public static long getFragmentInMinutes(Calendar calendar, int fragment)",
      "info" : "MethodDeclaration[64217-66269]:MethodDeclaration[64231-66283]"
    }, {
      "left" : "public static long getFragmentInHours(Calendar calendar, int fragment)",
      "right" : "public static long getFragmentInHours(Calendar calendar, int fragment)",
      "info" : "MethodDeclaration[66279-68309]:MethodDeclaration[66293-68323]"
    }, {
      "left" : "public static long getFragmentInDays(Calendar calendar, int fragment)",
      "right" : "public static long getFragmentInDays(Calendar calendar, int fragment)",
      "info" : "MethodDeclaration[68319-70384]:MethodDeclaration[68333-70398]"
    }, {
      "left" : "private static long getFragment(Date date, int fragment, int unit)",
      "right" : "private static long getFragment(Date date, int fragment, int unit)",
      "info" : "MethodDeclaration[70394-71165]:MethodDeclaration[70408-71179]"
    }, {
      "left" : "private static long getFragment(Calendar calendar, int fragment, int unit)",
      "right" : "private static long getFragment(Calendar calendar, int fragment, int unit)",
      "info" : "MethodDeclaration[71171-73426]:MethodDeclaration[71185-73440]"
    }, {
      "left" : "public static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field)",
      "right" : "public static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field)",
      "info" : "MethodDeclaration[73436-74145]:MethodDeclaration[73450-74159]"
    }, {
      "left" : "public static boolean truncatedEquals(Date date1, Date date2, int field)",
      "right" : "public static boolean truncatedEquals(Date date1, Date date2, int field)",
      "info" : "MethodDeclaration[74151-74850]:MethodDeclaration[74165-74864]"
    }, {
      "left" : "public static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field)",
      "right" : "public static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field)",
      "info" : "MethodDeclaration[74856-75747]:MethodDeclaration[74870-75761]"
    }, {
      "left" : "public static int truncatedCompareTo(Date date1, Date date2, int field)",
      "right" : "public static int truncatedCompareTo(Date date1, Date date2, int field)",
      "info" : "MethodDeclaration[75753-76622]:MethodDeclaration[75767-76636]"
    }, {
      "left" : "private static long getMillisPerUnit(int unit)",
      "right" : "private static long getMillisPerUnit(int unit)",
      "info" : "MethodDeclaration[76632-77746]:MethodDeclaration[76646-77760]"
    }, {
      "left" : "DateIterator",
      "right" : "DateIterator",
      "info" : "TypeDeclaration[77752-79288]:TypeDeclaration[77766-79302]"
    }, {
      "left" : "private final Calendar endFinal;",
      "right" : "private final Calendar endFinal;",
      "info" : "FieldDeclaration[77863-77895]:FieldDeclaration[77877-77909]"
    }, {
      "left" : "private final Calendar spot;",
      "right" : "private final Calendar spot;",
      "info" : "FieldDeclaration[77904-77932]:FieldDeclaration[77918-77946]"
    }, {
      "left" : "DateIterator(Calendar startFinal, Calendar endFinal)",
      "right" : "DateIterator(Calendar startFinal, Calendar endFinal)",
      "info" : "MethodDeclaration[77950-78360]:MethodDeclaration[77964-78374]"
    }, {
      "left" : "public boolean hasNext()",
      "right" : "public boolean hasNext()",
      "info" : "MethodDeclaration[78370-78624]:MethodDeclaration[78384-78638]"
    }, {
      "left" : "public Calendar next()",
      "right" : "public Calendar next()",
      "info" : "MethodDeclaration[78634-79000]:MethodDeclaration[78648-79014]"
    }, {
      "left" : "public void remove()",
      "right" : "public void remove()",
      "info" : "MethodDeclaration[79010-79282]:MethodDeclaration[79024-79296]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2196-2202]:Modifier[2196-2202]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2203-2208]:TYPE_DECLARATION_KIND[2203-2208]"
    }, {
      "left" : "DateUtils",
      "right" : "DateUtils",
      "info" : "SimpleName[2209-2218]:SimpleName[2209-2218]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5031-5037]:Modifier[5031-5037]"
    }, {
      "left" : "DateUtils",
      "right" : "DateUtils",
      "info" : "SimpleName[5038-5047]:SimpleName[5038-5047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5050-5074]:Block[5050-5074]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[5060-5068]:SuperConstructorInvocation[5060-5068]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5677-5683]:Modifier[5677-5683]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5684-5690]:Modifier[5684-5690]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5691-5698]:PrimitiveType[5691-5698]"
    }, {
      "left" : "isSameDay",
      "right" : "isSameDay",
      "info" : "SimpleName[5699-5708]:SimpleName[5699-5708]"
    }, {
      "left" : "Date date1",
      "right" : "Date date1",
      "info" : "SingleVariableDeclaration[5709-5719]:SingleVariableDeclaration[5709-5719]"
    }, {
      "left" : "Date date2",
      "right" : "Date date2",
      "info" : "SingleVariableDeclaration[5721-5731]:SingleVariableDeclaration[5721-5731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5733-6065]:Block[5733-6065]"
    }, {
      "left" : "if (date1 == null || date2 == null)",
      "right" : "if (date1 == null || date2 == null)",
      "info" : "IfStatement[5743-5867]:IfStatement[5743-5867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5779-5867]:Block[5779-5867]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[5793-5857]:ThrowStatement[5793-5857]"
    }, {
      "left" : "Calendar cal1 = Calendar.getInstance();",
      "right" : "Calendar cal1 = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[5876-5915]:VariableDeclarationStatement[5876-5915]"
    }, {
      "left" : "cal1.setTime(date1);",
      "right" : "cal1.setTime(date1);",
      "info" : "ExpressionStatement[5924-5944]:ExpressionStatement[5924-5944]"
    }, {
      "left" : "Calendar cal2 = Calendar.getInstance();",
      "right" : "Calendar cal2 = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[5953-5992]:VariableDeclarationStatement[5953-5992]"
    }, {
      "left" : "cal2.setTime(date2);",
      "right" : "cal2.setTime(date2);",
      "info" : "ExpressionStatement[6001-6021]:ExpressionStatement[6001-6021]"
    }, {
      "left" : "return isSameDay(cal1, cal2);",
      "right" : "return isSameDay(cal1, cal2);",
      "info" : "ReturnStatement[6030-6059]:ReturnStatement[6030-6059]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6604-6610]:Modifier[6604-6610]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6611-6617]:Modifier[6611-6617]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6618-6625]:PrimitiveType[6618-6625]"
    }, {
      "left" : "isSameDay",
      "right" : "isSameDay",
      "info" : "SimpleName[6626-6635]:SimpleName[6626-6635]"
    }, {
      "left" : "Calendar cal1",
      "right" : "Calendar cal1",
      "info" : "SingleVariableDeclaration[6636-6649]:SingleVariableDeclaration[6636-6649]"
    }, {
      "left" : "Calendar cal2",
      "right" : "Calendar cal2",
      "info" : "SingleVariableDeclaration[6651-6664]:SingleVariableDeclaration[6651-6664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6666-7025]:Block[6666-7025]"
    }, {
      "left" : "if (cal1 == null || cal2 == null)",
      "right" : "if (cal1 == null || cal2 == null)",
      "info" : "IfStatement[6676-6798]:IfStatement[6676-6798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6710-6798]:Block[6710-6798]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[6724-6788]:ThrowStatement[6724-6788]"
    }, {
      "left" : "return (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR));",
      "right" : "return (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR));",
      "info" : "ReturnStatement[6807-7019]:ReturnStatement[6807-7019]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7578-7584]:Modifier[7578-7584]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7585-7591]:Modifier[7585-7591]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7592-7599]:PrimitiveType[7592-7599]"
    }, {
      "left" : "isSameInstant",
      "right" : "isSameInstant",
      "info" : "SimpleName[7600-7613]:SimpleName[7600-7613]"
    }, {
      "left" : "Date date1",
      "right" : "Date date1",
      "info" : "SingleVariableDeclaration[7614-7624]:SingleVariableDeclaration[7614-7624]"
    }, {
      "left" : "Date date2",
      "right" : "Date date2",
      "info" : "SingleVariableDeclaration[7626-7636]:SingleVariableDeclaration[7626-7636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7638-7829]:Block[7638-7829]"
    }, {
      "left" : "if (date1 == null || date2 == null)",
      "right" : "if (date1 == null || date2 == null)",
      "info" : "IfStatement[7648-7772]:IfStatement[7648-7772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7684-7772]:Block[7684-7772]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[7698-7762]:ThrowStatement[7698-7762]"
    }, {
      "left" : "return date1.getTime() == date2.getTime();",
      "right" : "return date1.getTime() == date2.getTime();",
      "info" : "ReturnStatement[7781-7823]:ReturnStatement[7781-7823]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8314-8320]:Modifier[8314-8320]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8321-8327]:Modifier[8321-8327]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8328-8335]:PrimitiveType[8328-8335]"
    }, {
      "left" : "isSameInstant",
      "right" : "isSameInstant",
      "info" : "SimpleName[8336-8349]:SimpleName[8336-8349]"
    }, {
      "left" : "Calendar cal1",
      "right" : "Calendar cal1",
      "info" : "SingleVariableDeclaration[8350-8363]:SingleVariableDeclaration[8350-8363]"
    }, {
      "left" : "Calendar cal2",
      "right" : "Calendar cal2",
      "info" : "SingleVariableDeclaration[8365-8378]:SingleVariableDeclaration[8365-8378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8380-8587]:Block[8380-8587]"
    }, {
      "left" : "if (cal1 == null || cal2 == null)",
      "right" : "if (cal1 == null || cal2 == null)",
      "info" : "IfStatement[8390-8512]:IfStatement[8390-8512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8424-8512]:Block[8424-8512]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[8438-8502]:ThrowStatement[8438-8502]"
    }, {
      "left" : "return cal1.getTime().getTime() == cal2.getTime().getTime();",
      "right" : "return cal1.getTime().getTime() == cal2.getTime().getTime();",
      "info" : "ReturnStatement[8521-8581]:ReturnStatement[8521-8581]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9214-9220]:Modifier[9214-9220]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9221-9227]:Modifier[9221-9227]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9228-9235]:PrimitiveType[9228-9235]"
    }, {
      "left" : "isSameLocalTime",
      "right" : "isSameLocalTime",
      "info" : "SimpleName[9236-9251]:SimpleName[9236-9251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9282-9997]:Block[9282-10011]"
    }, {
      "left" : "if (cal1 == null || cal2 == null)",
      "right" : "if (cal1 == null || cal2 == null)",
      "info" : "IfStatement[9292-9414]:IfStatement[9292-9414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9326-9414]:Block[9326-9414]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[9340-9404]:ThrowStatement[9340-9404]"
    }, {
      "left" : "return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n                cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n                cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n                cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n                cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n                cal1.getClass() == cal2.getClass());",
      "right" : "return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n                cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n                cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n                cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&\n                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n                cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n                cal1.getClass() == cal2.getClass());",
      "info" : "ReturnStatement[9423-9991]:ReturnStatement[9423-10005]"
    }, {
      "left" : "Calendar.HOUR",
      "right" : "Calendar.HOUR_OF_DAY",
      "info" : "QualifiedName[9672-9685]:QualifiedName[9672-9692]"
    }, {
      "left" : "Calendar.HOUR",
      "right" : "Calendar.HOUR_OF_DAY",
      "info" : "QualifiedName[9699-9712]:QualifiedName[9706-9726]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10821-10827]:Modifier[10835-10841]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10828-10834]:Modifier[10842-10848]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[10835-10839]:SimpleType[10849-10853]"
    }, {
      "left" : "parseDate",
      "right" : "parseDate",
      "info" : "SimpleName[10840-10849]:SimpleName[10854-10863]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[10850-10860]:SingleVariableDeclaration[10864-10874]"
    }, {
      "left" : "String... parsePatterns",
      "right" : "String... parsePatterns",
      "info" : "SingleVariableDeclaration[10862-10885]:SingleVariableDeclaration[10876-10899]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[10894-10908]:SimpleType[10908-10922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10909-10980]:Block[10923-10994]"
    }, {
      "left" : "return parseDateWithLeniency(str, parsePatterns, true);",
      "right" : "return parseDateWithLeniency(str, parsePatterns, true);",
      "info" : "ReturnStatement[10919-10974]:ReturnStatement[10933-10988]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11840-11846]:Modifier[11854-11860]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11847-11853]:Modifier[11861-11867]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[11854-11858]:SimpleType[11868-11872]"
    }, {
      "left" : "parseDateStrictly",
      "right" : "parseDateStrictly",
      "info" : "SimpleName[11859-11876]:SimpleName[11873-11890]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[11877-11887]:SingleVariableDeclaration[11891-11901]"
    }, {
      "left" : "String... parsePatterns",
      "right" : "String... parsePatterns",
      "info" : "SingleVariableDeclaration[11889-11912]:SingleVariableDeclaration[11903-11926]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[11921-11935]:SimpleType[11935-11949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11936-12008]:Block[11950-12022]"
    }, {
      "left" : "return parseDateWithLeniency(str, parsePatterns, false);",
      "right" : "return parseDateWithLeniency(str, parsePatterns, false);",
      "info" : "ReturnStatement[11946-12002]:ReturnStatement[11960-12016]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12799-12806]:Modifier[12813-12820]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12807-12813]:Modifier[12821-12827]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[12814-12818]:SimpleType[12828-12832]"
    }, {
      "left" : "parseDateWithLeniency",
      "right" : "parseDateWithLeniency",
      "info" : "SimpleName[12819-12840]:SimpleName[12833-12854]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[12841-12851]:SingleVariableDeclaration[12855-12865]"
    }, {
      "left" : "String[] parsePatterns",
      "right" : "String[] parsePatterns",
      "info" : "SingleVariableDeclaration[12853-12875]:SingleVariableDeclaration[12867-12889]"
    }, {
      "left" : "boolean lenient",
      "right" : "boolean lenient",
      "info" : "SingleVariableDeclaration[12889-12904]:SingleVariableDeclaration[12903-12918]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[12913-12927]:SimpleType[12927-12941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12928-14190]:Block[12942-14204]"
    }, {
      "left" : "if (str == null || parsePatterns == null)",
      "right" : "if (str == null || parsePatterns == null)",
      "info" : "IfStatement[12938-13077]:IfStatement[12952-13091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12980-13077]:Block[12994-13091]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Date and Patterns must not be null\");",
      "right" : "throw new IllegalArgumentException(\"Date and Patterns must not be null\");",
      "info" : "ThrowStatement[12994-13067]:ThrowStatement[13008-13081]"
    }, {
      "left" : "SimpleDateFormat parser = new SimpleDateFormat();",
      "right" : "SimpleDateFormat parser = new SimpleDateFormat();",
      "info" : "VariableDeclarationStatement[13095-13144]:VariableDeclarationStatement[13109-13158]"
    }, {
      "left" : "parser.setLenient(lenient);",
      "right" : "parser.setLenient(lenient);",
      "info" : "ExpressionStatement[13153-13180]:ExpressionStatement[13167-13194]"
    }, {
      "left" : "ParsePosition pos = new ParsePosition(0);",
      "right" : "ParsePosition pos = new ParsePosition(0);",
      "info" : "VariableDeclarationStatement[13189-13230]:VariableDeclarationStatement[13203-13244]"
    }, {
      "left" : "for (int i = 0; i < parsePatterns.length; i++)",
      "right" : "for (int i = 0; i < parsePatterns.length; i++)",
      "info" : "ForStatement[13239-14110]:ForStatement[13253-14124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13286-14110]:Block[13300-14124]"
    }, {
      "left" : "String pattern = parsePatterns[i];",
      "right" : "String pattern = parsePatterns[i];",
      "info" : "VariableDeclarationStatement[13301-13335]:VariableDeclarationStatement[13315-13349]"
    }, {
      "left" : "if (parsePatterns[i].endsWith(\"ZZ\"))",
      "right" : "if (parsePatterns[i].endsWith(\"ZZ\"))",
      "info" : "IfStatement[13444-13566]:IfStatement[13458-13580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13481-13566]:Block[13495-13580]"
    }, {
      "left" : "pattern = pattern.substring(0, pattern.length() - 1);",
      "right" : "pattern = pattern.substring(0, pattern.length() - 1);",
      "info" : "ExpressionStatement[13499-13552]:ExpressionStatement[13513-13566]"
    }, {
      "left" : "parser.applyPattern(pattern);",
      "right" : "parser.applyPattern(pattern);",
      "info" : "ExpressionStatement[13592-13621]:ExpressionStatement[13606-13635]"
    }, {
      "left" : "pos.setIndex(0);",
      "right" : "pos.setIndex(0);",
      "info" : "ExpressionStatement[13634-13650]:ExpressionStatement[13648-13664]"
    }, {
      "left" : "String str2 = str;",
      "right" : "String str2 = str;",
      "info" : "VariableDeclarationStatement[13664-13682]:VariableDeclarationStatement[13678-13696]"
    }, {
      "left" : "if (parsePatterns[i].endsWith(\"ZZ\"))",
      "right" : "if (parsePatterns[i].endsWith(\"ZZ\"))",
      "info" : "IfStatement[13806-13940]:IfStatement[13820-13954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13843-13940]:Block[13857-13954]"
    }, {
      "left" : "str2 = str.replaceAll(\"([-+][0-9][0-9]):([0-9][0-9])$\", \"$1$2\");",
      "right" : "str2 = str.replaceAll(\"([-+][0-9][0-9]):([0-9][0-9])$\", \"$1$2\");",
      "info" : "ExpressionStatement[13861-13925]:ExpressionStatement[13875-13939]"
    }, {
      "left" : "Date date = parser.parse(str2, pos);",
      "right" : "Date date = parser.parse(str2, pos);",
      "info" : "VariableDeclarationStatement[13954-13990]:VariableDeclarationStatement[13968-14004]"
    }, {
      "left" : "if (date != null && pos.getIndex() == str2.length())",
      "right" : "if (date != null && pos.getIndex() == str2.length())",
      "info" : "IfStatement[14003-14100]:IfStatement[14017-14114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14056-14100]:Block[14070-14114]"
    }, {
      "left" : "return date;",
      "right" : "return date;",
      "info" : "ReturnStatement[14074-14086]:ReturnStatement[14088-14100]"
    }, {
      "left" : "throw new ParseException(\"Unable to parse the date: \" + str, -1);",
      "right" : "throw new ParseException(\"Unable to parse the date: \" + str, -1);",
      "info" : "ThrowStatement[14119-14184]:ThrowStatement[14133-14198]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14620-14626]:Modifier[14634-14640]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14627-14633]:Modifier[14641-14647]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[14634-14638]:SimpleType[14648-14652]"
    }, {
      "left" : "addYears",
      "right" : "addYears",
      "info" : "SimpleName[14639-14647]:SimpleName[14653-14661]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[14648-14657]:SingleVariableDeclaration[14662-14671]"
    }, {
      "left" : "int amount",
      "right" : "int amount",
      "info" : "SingleVariableDeclaration[14659-14669]:SingleVariableDeclaration[14673-14683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14671-14727]:Block[14685-14741]"
    }, {
      "left" : "return add(date, Calendar.YEAR, amount);",
      "right" : "return add(date, Calendar.YEAR, amount);",
      "info" : "ReturnStatement[14681-14721]:ReturnStatement[14695-14735]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15158-15164]:Modifier[15172-15178]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15165-15171]:Modifier[15179-15185]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[15172-15176]:SimpleType[15186-15190]"
    }, {
      "left" : "addMonths",
      "right" : "addMonths",
      "info" : "SimpleName[15177-15186]:SimpleName[15191-15200]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[15187-15196]:SingleVariableDeclaration[15201-15210]"
    }, {
      "left" : "int amount",
      "right" : "int amount",
      "info" : "SingleVariableDeclaration[15198-15208]:SingleVariableDeclaration[15212-15222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15210-15267]:Block[15224-15281]"
    }, {
      "left" : "return add(date, Calendar.MONTH, amount);",
      "right" : "return add(date, Calendar.MONTH, amount);",
      "info" : "ReturnStatement[15220-15261]:ReturnStatement[15234-15275]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15697-15703]:Modifier[15711-15717]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15704-15710]:Modifier[15718-15724]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[15711-15715]:SimpleType[15725-15729]"
    }, {
      "left" : "addWeeks",
      "right" : "addWeeks",
      "info" : "SimpleName[15716-15724]:SimpleName[15730-15738]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[15725-15734]:SingleVariableDeclaration[15739-15748]"
    }, {
      "left" : "int amount",
      "right" : "int amount",
      "info" : "SingleVariableDeclaration[15736-15746]:SingleVariableDeclaration[15750-15760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15748-15812]:Block[15762-15826]"
    }, {
      "left" : "return add(date, Calendar.WEEK_OF_YEAR, amount);",
      "right" : "return add(date, Calendar.WEEK_OF_YEAR, amount);",
      "info" : "ReturnStatement[15758-15806]:ReturnStatement[15772-15820]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16241-16247]:Modifier[16255-16261]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[16248-16254]:Modifier[16262-16268]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[16255-16259]:SimpleType[16269-16273]"
    }, {
      "left" : "addDays",
      "right" : "addDays",
      "info" : "SimpleName[16260-16267]:SimpleName[16274-16281]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[16268-16277]:SingleVariableDeclaration[16282-16291]"
    }, {
      "left" : "int amount",
      "right" : "int amount",
      "info" : "SingleVariableDeclaration[16279-16289]:SingleVariableDeclaration[16293-16303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16291-16355]:Block[16305-16369]"
    }, {
      "left" : "return add(date, Calendar.DAY_OF_MONTH, amount);",
      "right" : "return add(date, Calendar.DAY_OF_MONTH, amount);",
      "info" : "ReturnStatement[16301-16349]:ReturnStatement[16315-16363]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16785-16791]:Modifier[16799-16805]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[16792-16798]:Modifier[16806-16812]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[16799-16803]:SimpleType[16813-16817]"
    }, {
      "left" : "addHours",
      "right" : "addHours",
      "info" : "SimpleName[16804-16812]:SimpleName[16818-16826]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[16813-16822]:SingleVariableDeclaration[16827-16836]"
    }, {
      "left" : "int amount",
      "right" : "int amount",
      "info" : "SingleVariableDeclaration[16824-16834]:SingleVariableDeclaration[16838-16848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16836-16899]:Block[16850-16913]"
    }, {
      "left" : "return add(date, Calendar.HOUR_OF_DAY, amount);",
      "right" : "return add(date, Calendar.HOUR_OF_DAY, amount);",
      "info" : "ReturnStatement[16846-16893]:ReturnStatement[16860-16907]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17331-17337]:Modifier[17345-17351]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[17338-17344]:Modifier[17352-17358]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[17345-17349]:SimpleType[17359-17363]"
    }, {
      "left" : "addMinutes",
      "right" : "addMinutes",
      "info" : "SimpleName[17350-17360]:SimpleName[17364-17374]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[17361-17370]:SingleVariableDeclaration[17375-17384]"
    }, {
      "left" : "int amount",
      "right" : "int amount",
      "info" : "SingleVariableDeclaration[17372-17382]:SingleVariableDeclaration[17386-17396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17384-17442]:Block[17398-17456]"
    }, {
      "left" : "return add(date, Calendar.MINUTE, amount);",
      "right" : "return add(date, Calendar.MINUTE, amount);",
      "info" : "ReturnStatement[17394-17436]:ReturnStatement[17408-17450]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17874-17880]:Modifier[17888-17894]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[17881-17887]:Modifier[17895-17901]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[17888-17892]:SimpleType[17902-17906]"
    }, {
      "left" : "addSeconds",
      "right" : "addSeconds",
      "info" : "SimpleName[17893-17903]:SimpleName[17907-17917]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[17904-17913]:SingleVariableDeclaration[17918-17927]"
    }, {
      "left" : "int amount",
      "right" : "int amount",
      "info" : "SingleVariableDeclaration[17915-17925]:SingleVariableDeclaration[17929-17939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17927-17985]:Block[17941-17999]"
    }, {
      "left" : "return add(date, Calendar.SECOND, amount);",
      "right" : "return add(date, Calendar.SECOND, amount);",
      "info" : "ReturnStatement[17937-17979]:ReturnStatement[17951-17993]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18422-18428]:Modifier[18436-18442]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18429-18435]:Modifier[18443-18449]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[18436-18440]:SimpleType[18450-18454]"
    }, {
      "left" : "addMilliseconds",
      "right" : "addMilliseconds",
      "info" : "SimpleName[18441-18456]:SimpleName[18455-18470]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[18457-18466]:SingleVariableDeclaration[18471-18480]"
    }, {
      "left" : "int amount",
      "right" : "int amount",
      "info" : "SingleVariableDeclaration[18468-18478]:SingleVariableDeclaration[18482-18492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18480-18543]:Block[18494-18557]"
    }, {
      "left" : "return add(date, Calendar.MILLISECOND, amount);",
      "right" : "return add(date, Calendar.MILLISECOND, amount);",
      "info" : "ReturnStatement[18490-18537]:ReturnStatement[18504-18551]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19013-19020]:Modifier[19027-19034]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19021-19027]:Modifier[19035-19041]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[19028-19032]:SimpleType[19042-19046]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[19033-19036]:SimpleName[19047-19050]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[19037-19046]:SingleVariableDeclaration[19051-19060]"
    }, {
      "left" : "int calendarField",
      "right" : "int calendarField",
      "info" : "SingleVariableDeclaration[19048-19065]:SingleVariableDeclaration[19062-19079]"
    }, {
      "left" : "int amount",
      "right" : "int amount",
      "info" : "SingleVariableDeclaration[19067-19077]:SingleVariableDeclaration[19081-19091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19079-19337]:Block[19093-19351]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[19089-19195]:IfStatement[19103-19209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19107-19195]:Block[19121-19209]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[19121-19185]:ThrowStatement[19135-19199]"
    }, {
      "left" : "Calendar c = Calendar.getInstance();",
      "right" : "Calendar c = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[19204-19240]:VariableDeclarationStatement[19218-19254]"
    }, {
      "left" : "c.setTime(date);",
      "right" : "c.setTime(date);",
      "info" : "ExpressionStatement[19249-19265]:ExpressionStatement[19263-19279]"
    }, {
      "left" : "c.add(calendarField, amount);",
      "right" : "c.add(calendarField, amount);",
      "info" : "ExpressionStatement[19274-19303]:ExpressionStatement[19288-19317]"
    }, {
      "left" : "return c.getTime();",
      "right" : "return c.getTime();",
      "info" : "ReturnStatement[19312-19331]:ReturnStatement[19326-19345]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19774-19780]:Modifier[19788-19794]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19781-19787]:Modifier[19795-19801]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[19788-19792]:SimpleType[19802-19806]"
    }, {
      "left" : "setYears",
      "right" : "setYears",
      "info" : "SimpleName[19793-19801]:SimpleName[19807-19815]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[19802-19811]:SingleVariableDeclaration[19816-19825]"
    }, {
      "left" : "int amount",
      "right" : "int amount",
      "info" : "SingleVariableDeclaration[19813-19823]:SingleVariableDeclaration[19827-19837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19825-19881]:Block[19839-19895]"
    }, {
      "left" : "return set(date, Calendar.YEAR, amount);",
      "right" : "return set(date, Calendar.YEAR, amount);",
      "info" : "ReturnStatement[19835-19875]:ReturnStatement[19849-19889]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20315-20321]:Modifier[20329-20335]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20322-20328]:Modifier[20336-20342]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[20329-20333]:SimpleType[20343-20347]"
    }, {
      "left" : "setMonths",
      "right" : "setMonths",
      "info" : "SimpleName[20334-20343]:SimpleName[20348-20357]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[20344-20353]:SingleVariableDeclaration[20358-20367]"
    }, {
      "left" : "int amount",
      "right" : "int amount",
      "info" : "SingleVariableDeclaration[20355-20365]:SingleVariableDeclaration[20369-20379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20367-20424]:Block[20381-20438]"
    }, {
      "left" : "return set(date, Calendar.MONTH, amount);",
      "right" : "return set(date, Calendar.MONTH, amount);",
      "info" : "ReturnStatement[20377-20418]:ReturnStatement[20391-20432]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20864-20870]:Modifier[20878-20884]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20871-20877]:Modifier[20885-20891]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[20878-20882]:SimpleType[20892-20896]"
    }, {
      "left" : "setDays",
      "right" : "setDays",
      "info" : "SimpleName[20883-20890]:SimpleName[20897-20904]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[20891-20900]:SingleVariableDeclaration[20905-20914]"
    }, {
      "left" : "int amount",
      "right" : "int amount",
      "info" : "SingleVariableDeclaration[20902-20912]:SingleVariableDeclaration[20916-20926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20914-20978]:Block[20928-20992]"
    }, {
      "left" : "return set(date, Calendar.DAY_OF_MONTH, amount);",
      "right" : "return set(date, Calendar.DAY_OF_MONTH, amount);",
      "info" : "ReturnStatement[20924-20972]:ReturnStatement[20938-20986]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21444-21450]:Modifier[21458-21464]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[21451-21457]:Modifier[21465-21471]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[21458-21462]:SimpleType[21472-21476]"
    }, {
      "left" : "setHours",
      "right" : "setHours",
      "info" : "SimpleName[21463-21471]:SimpleName[21477-21485]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[21472-21481]:SingleVariableDeclaration[21486-21495]"
    }, {
      "left" : "int amount",
      "right" : "int amount",
      "info" : "SingleVariableDeclaration[21483-21493]:SingleVariableDeclaration[21497-21507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21495-21558]:Block[21509-21572]"
    }, {
      "left" : "return set(date, Calendar.HOUR_OF_DAY, amount);",
      "right" : "return set(date, Calendar.HOUR_OF_DAY, amount);",
      "info" : "ReturnStatement[21505-21552]:ReturnStatement[21519-21566]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21992-21998]:Modifier[22006-22012]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[21999-22005]:Modifier[22013-22019]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[22006-22010]:SimpleType[22020-22024]"
    }, {
      "left" : "setMinutes",
      "right" : "setMinutes",
      "info" : "SimpleName[22011-22021]:SimpleName[22025-22035]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[22022-22031]:SingleVariableDeclaration[22036-22045]"
    }, {
      "left" : "int amount",
      "right" : "int amount",
      "info" : "SingleVariableDeclaration[22033-22043]:SingleVariableDeclaration[22047-22057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22045-22103]:Block[22059-22117]"
    }, {
      "left" : "return set(date, Calendar.MINUTE, amount);",
      "right" : "return set(date, Calendar.MINUTE, amount);",
      "info" : "ReturnStatement[22055-22097]:ReturnStatement[22069-22111]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22542-22548]:Modifier[22556-22562]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22549-22555]:Modifier[22563-22569]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[22556-22560]:SimpleType[22570-22574]"
    }, {
      "left" : "setSeconds",
      "right" : "setSeconds",
      "info" : "SimpleName[22561-22571]:SimpleName[22575-22585]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[22572-22581]:SingleVariableDeclaration[22586-22595]"
    }, {
      "left" : "int amount",
      "right" : "int amount",
      "info" : "SingleVariableDeclaration[22583-22593]:SingleVariableDeclaration[22597-22607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22595-22653]:Block[22609-22667]"
    }, {
      "left" : "return set(date, Calendar.SECOND, amount);",
      "right" : "return set(date, Calendar.SECOND, amount);",
      "info" : "ReturnStatement[22605-22647]:ReturnStatement[22619-22661]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23092-23098]:Modifier[23106-23112]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23099-23105]:Modifier[23113-23119]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[23106-23110]:SimpleType[23120-23124]"
    }, {
      "left" : "setMilliseconds",
      "right" : "setMilliseconds",
      "info" : "SimpleName[23111-23126]:SimpleName[23125-23140]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[23127-23136]:SingleVariableDeclaration[23141-23150]"
    }, {
      "left" : "int amount",
      "right" : "int amount",
      "info" : "SingleVariableDeclaration[23138-23148]:SingleVariableDeclaration[23152-23162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23150-23213]:Block[23164-23227]"
    }, {
      "left" : "return set(date, Calendar.MILLISECOND, amount);",
      "right" : "return set(date, Calendar.MILLISECOND, amount);",
      "info" : "ReturnStatement[23160-23207]:ReturnStatement[23174-23221]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23771-23778]:Modifier[23785-23792]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23779-23785]:Modifier[23793-23799]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[23786-23790]:SimpleType[23800-23804]"
    }, {
      "left" : "set",
      "right" : "set",
      "info" : "SimpleName[23791-23794]:SimpleName[23805-23808]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[23795-23804]:SingleVariableDeclaration[23809-23818]"
    }, {
      "left" : "int calendarField",
      "right" : "int calendarField",
      "info" : "SingleVariableDeclaration[23806-23823]:SingleVariableDeclaration[23820-23837]"
    }, {
      "left" : "int amount",
      "right" : "int amount",
      "info" : "SingleVariableDeclaration[23825-23835]:SingleVariableDeclaration[23839-23849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23837-24202]:Block[23851-24216]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[23847-23953]:IfStatement[23861-23967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23865-23953]:Block[23879-23967]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[23879-23943]:ThrowStatement[23893-23957]"
    }, {
      "left" : "Calendar c = Calendar.getInstance();",
      "right" : "Calendar c = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[24040-24076]:VariableDeclarationStatement[24054-24090]"
    }, {
      "left" : "c.setLenient(false);",
      "right" : "c.setLenient(false);",
      "info" : "ExpressionStatement[24085-24105]:ExpressionStatement[24099-24119]"
    }, {
      "left" : "c.setTime(date);",
      "right" : "c.setTime(date);",
      "info" : "ExpressionStatement[24114-24130]:ExpressionStatement[24128-24144]"
    }, {
      "left" : "c.set(calendarField, amount);",
      "right" : "c.set(calendarField, amount);",
      "info" : "ExpressionStatement[24139-24168]:ExpressionStatement[24153-24182]"
    }, {
      "left" : "return c.getTime();",
      "right" : "return c.getTime();",
      "info" : "ReturnStatement[24177-24196]:ReturnStatement[24191-24210]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24524-24530]:Modifier[24538-24544]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24531-24537]:Modifier[24545-24551]"
    }, {
      "left" : "Calendar",
      "right" : "Calendar",
      "info" : "SimpleType[24538-24546]:SimpleType[24552-24560]"
    }, {
      "left" : "toCalendar",
      "right" : "toCalendar",
      "info" : "SimpleName[24547-24557]:SimpleName[24561-24571]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[24558-24567]:SingleVariableDeclaration[24572-24581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24569-24664]:Block[24583-24678]"
    }, {
      "left" : "Calendar c = Calendar.getInstance();",
      "right" : "Calendar c = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[24579-24615]:VariableDeclarationStatement[24593-24629]"
    }, {
      "left" : "c.setTime(date);",
      "right" : "c.setTime(date);",
      "info" : "ExpressionStatement[24624-24640]:ExpressionStatement[24638-24654]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[24649-24658]:ReturnStatement[24663-24672]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26046-26052]:Modifier[26060-26066]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[26053-26059]:Modifier[26067-26073]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[26060-26064]:SimpleType[26074-26078]"
    }, {
      "left" : "round",
      "right" : "round",
      "info" : "SimpleName[26065-26070]:SimpleName[26079-26084]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[26071-26080]:SingleVariableDeclaration[26085-26094]"
    }, {
      "left" : "int field",
      "right" : "int field",
      "info" : "SingleVariableDeclaration[26082-26091]:SingleVariableDeclaration[26096-26105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26093-26365]:Block[26107-26379]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[26103-26209]:IfStatement[26117-26223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26121-26209]:Block[26135-26223]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[26135-26199]:ThrowStatement[26149-26213]"
    }, {
      "left" : "Calendar gval = Calendar.getInstance();",
      "right" : "Calendar gval = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[26218-26257]:VariableDeclarationStatement[26232-26271]"
    }, {
      "left" : "gval.setTime(date);",
      "right" : "gval.setTime(date);",
      "info" : "ExpressionStatement[26266-26285]:ExpressionStatement[26280-26299]"
    }, {
      "left" : "modify(gval, field, MODIFY_ROUND);",
      "right" : "modify(gval, field, MODIFY_ROUND);",
      "info" : "ExpressionStatement[26294-26328]:ExpressionStatement[26308-26342]"
    }, {
      "left" : "return gval.getTime();",
      "right" : "return gval.getTime();",
      "info" : "ReturnStatement[26337-26359]:ReturnStatement[26351-26373]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27686-27692]:Modifier[27700-27706]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[27693-27699]:Modifier[27707-27713]"
    }, {
      "left" : "Calendar",
      "right" : "Calendar",
      "info" : "SimpleType[27700-27708]:SimpleType[27714-27722]"
    }, {
      "left" : "round",
      "right" : "round",
      "info" : "SimpleName[27709-27714]:SimpleName[27723-27728]"
    }, {
      "left" : "Calendar date",
      "right" : "Calendar date",
      "info" : "SingleVariableDeclaration[27715-27728]:SingleVariableDeclaration[27729-27742]"
    }, {
      "left" : "int field",
      "right" : "int field",
      "info" : "SingleVariableDeclaration[27730-27739]:SingleVariableDeclaration[27744-27753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27741-27985]:Block[27755-27999]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[27751-27857]:IfStatement[27765-27871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27769-27857]:Block[27783-27871]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[27783-27847]:ThrowStatement[27797-27861]"
    }, {
      "left" : "Calendar rounded = (Calendar) date.clone();",
      "right" : "Calendar rounded = (Calendar) date.clone();",
      "info" : "VariableDeclarationStatement[27866-27909]:VariableDeclarationStatement[27880-27923]"
    }, {
      "left" : "modify(rounded, field, MODIFY_ROUND);",
      "right" : "modify(rounded, field, MODIFY_ROUND);",
      "info" : "ExpressionStatement[27918-27955]:ExpressionStatement[27932-27969]"
    }, {
      "left" : "return rounded;",
      "right" : "return rounded;",
      "info" : "ReturnStatement[27964-27979]:ReturnStatement[27978-27993]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29423-29429]:Modifier[29437-29443]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29430-29436]:Modifier[29444-29450]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[29437-29441]:SimpleType[29451-29455]"
    }, {
      "left" : "round",
      "right" : "round",
      "info" : "SimpleName[29442-29447]:SimpleName[29456-29461]"
    }, {
      "left" : "Object date",
      "right" : "Object date",
      "info" : "SingleVariableDeclaration[29448-29459]:SingleVariableDeclaration[29462-29473]"
    }, {
      "left" : "int field",
      "right" : "int field",
      "info" : "SingleVariableDeclaration[29461-29470]:SingleVariableDeclaration[29475-29484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29472-29879]:Block[29486-29893]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[29482-29588]:IfStatement[29496-29602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29500-29588]:Block[29514-29602]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[29514-29578]:ThrowStatement[29528-29592]"
    }, {
      "left" : "if (date instanceof Date)",
      "right" : "if (date instanceof Date)",
      "info" : "IfStatement[29597-29873]:IfStatement[29611-29887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29623-29680]:Block[29637-29694]"
    }, {
      "left" : "return round((Date) date, field);",
      "right" : "return round((Date) date, field);",
      "info" : "ReturnStatement[29637-29670]:ReturnStatement[29651-29684]"
    }, {
      "left" : "if (date instanceof Calendar)",
      "right" : "if (date instanceof Calendar)",
      "info" : "IfStatement[29686-29873]:IfStatement[29700-29887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29716-29787]:Block[29730-29801]"
    }, {
      "left" : "return round((Calendar) date, field).getTime();",
      "right" : "return round((Calendar) date, field).getTime();",
      "info" : "ReturnStatement[29730-29777]:ReturnStatement[29744-29791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29793-29873]:Block[29807-29887]"
    }, {
      "left" : "throw new ClassCastException(\"Could not round \" + date);",
      "right" : "throw new ClassCastException(\"Could not round \" + date);",
      "info" : "ThrowStatement[29807-29863]:ThrowStatement[29821-29877]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30641-30647]:Modifier[30655-30661]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30648-30654]:Modifier[30662-30668]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[30655-30659]:SimpleType[30669-30673]"
    }, {
      "left" : "truncate",
      "right" : "truncate",
      "info" : "SimpleName[30660-30668]:SimpleName[30674-30682]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[30669-30678]:SingleVariableDeclaration[30683-30692]"
    }, {
      "left" : "int field",
      "right" : "int field",
      "info" : "SingleVariableDeclaration[30680-30689]:SingleVariableDeclaration[30694-30703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30691-30966]:Block[30705-30980]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[30701-30807]:IfStatement[30715-30821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30719-30807]:Block[30733-30821]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[30733-30797]:ThrowStatement[30747-30811]"
    }, {
      "left" : "Calendar gval = Calendar.getInstance();",
      "right" : "Calendar gval = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[30816-30855]:VariableDeclarationStatement[30830-30869]"
    }, {
      "left" : "gval.setTime(date);",
      "right" : "gval.setTime(date);",
      "info" : "ExpressionStatement[30864-30883]:ExpressionStatement[30878-30897]"
    }, {
      "left" : "modify(gval, field, MODIFY_TRUNCATE);",
      "right" : "modify(gval, field, MODIFY_TRUNCATE);",
      "info" : "ExpressionStatement[30892-30929]:ExpressionStatement[30906-30943]"
    }, {
      "left" : "return gval.getTime();",
      "right" : "return gval.getTime();",
      "info" : "ReturnStatement[30938-30960]:ReturnStatement[30952-30974]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31671-31677]:Modifier[31685-31691]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[31678-31684]:Modifier[31692-31698]"
    }, {
      "left" : "Calendar",
      "right" : "Calendar",
      "info" : "SimpleType[31685-31693]:SimpleType[31699-31707]"
    }, {
      "left" : "truncate",
      "right" : "truncate",
      "info" : "SimpleName[31694-31702]:SimpleName[31708-31716]"
    }, {
      "left" : "Calendar date",
      "right" : "Calendar date",
      "info" : "SingleVariableDeclaration[31703-31716]:SingleVariableDeclaration[31717-31730]"
    }, {
      "left" : "int field",
      "right" : "int field",
      "info" : "SingleVariableDeclaration[31718-31727]:SingleVariableDeclaration[31732-31741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31729-31982]:Block[31743-31996]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[31739-31845]:IfStatement[31753-31859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31757-31845]:Block[31771-31859]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[31771-31835]:ThrowStatement[31785-31849]"
    }, {
      "left" : "Calendar truncated = (Calendar) date.clone();",
      "right" : "Calendar truncated = (Calendar) date.clone();",
      "info" : "VariableDeclarationStatement[31854-31899]:VariableDeclarationStatement[31868-31913]"
    }, {
      "left" : "modify(truncated, field, MODIFY_TRUNCATE);",
      "right" : "modify(truncated, field, MODIFY_TRUNCATE);",
      "info" : "ExpressionStatement[31908-31950]:ExpressionStatement[31922-31964]"
    }, {
      "left" : "return truncated;",
      "right" : "return truncated;",
      "info" : "ReturnStatement[31959-31976]:ReturnStatement[31973-31990]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32846-32852]:Modifier[32860-32866]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32853-32859]:Modifier[32867-32873]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[32860-32864]:SimpleType[32874-32878]"
    }, {
      "left" : "truncate",
      "right" : "truncate",
      "info" : "SimpleName[32865-32873]:SimpleName[32879-32887]"
    }, {
      "left" : "Object date",
      "right" : "Object date",
      "info" : "SingleVariableDeclaration[32874-32885]:SingleVariableDeclaration[32888-32899]"
    }, {
      "left" : "int field",
      "right" : "int field",
      "info" : "SingleVariableDeclaration[32887-32896]:SingleVariableDeclaration[32901-32910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32898-33314]:Block[32912-33328]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[32908-33014]:IfStatement[32922-33028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32926-33014]:Block[32940-33028]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[32940-33004]:ThrowStatement[32954-33018]"
    }, {
      "left" : "if (date instanceof Date)",
      "right" : "if (date instanceof Date)",
      "info" : "IfStatement[33023-33308]:IfStatement[33037-33322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33049-33109]:Block[33063-33123]"
    }, {
      "left" : "return truncate((Date) date, field);",
      "right" : "return truncate((Date) date, field);",
      "info" : "ReturnStatement[33063-33099]:ReturnStatement[33077-33113]"
    }, {
      "left" : "if (date instanceof Calendar)",
      "right" : "if (date instanceof Calendar)",
      "info" : "IfStatement[33115-33308]:IfStatement[33129-33322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33145-33219]:Block[33159-33233]"
    }, {
      "left" : "return truncate((Calendar) date, field).getTime();",
      "right" : "return truncate((Calendar) date, field).getTime();",
      "info" : "ReturnStatement[33159-33209]:ReturnStatement[33173-33223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33225-33308]:Block[33239-33322]"
    }, {
      "left" : "throw new ClassCastException(\"Could not truncate \" + date);",
      "right" : "throw new ClassCastException(\"Could not truncate \" + date);",
      "info" : "ThrowStatement[33239-33298]:ThrowStatement[33253-33312]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34092-34098]:Modifier[34106-34112]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[34099-34105]:Modifier[34113-34119]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[34106-34110]:SimpleType[34120-34124]"
    }, {
      "left" : "ceiling",
      "right" : "ceiling",
      "info" : "SimpleName[34111-34118]:SimpleName[34125-34132]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[34119-34128]:SingleVariableDeclaration[34133-34142]"
    }, {
      "left" : "int field",
      "right" : "int field",
      "info" : "SingleVariableDeclaration[34130-34139]:SingleVariableDeclaration[34144-34153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34141-34415]:Block[34155-34429]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[34151-34257]:IfStatement[34165-34271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34169-34257]:Block[34183-34271]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[34183-34247]:ThrowStatement[34197-34261]"
    }, {
      "left" : "Calendar gval = Calendar.getInstance();",
      "right" : "Calendar gval = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[34266-34305]:VariableDeclarationStatement[34280-34319]"
    }, {
      "left" : "gval.setTime(date);",
      "right" : "gval.setTime(date);",
      "info" : "ExpressionStatement[34314-34333]:ExpressionStatement[34328-34347]"
    }, {
      "left" : "modify(gval, field, MODIFY_CEILING);",
      "right" : "modify(gval, field, MODIFY_CEILING);",
      "info" : "ExpressionStatement[34342-34378]:ExpressionStatement[34356-34392]"
    }, {
      "left" : "return gval.getTime();",
      "right" : "return gval.getTime();",
      "info" : "ReturnStatement[34387-34409]:ReturnStatement[34401-34423]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35134-35140]:Modifier[35148-35154]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[35141-35147]:Modifier[35155-35161]"
    }, {
      "left" : "Calendar",
      "right" : "Calendar",
      "info" : "SimpleType[35148-35156]:SimpleType[35162-35170]"
    }, {
      "left" : "ceiling",
      "right" : "ceiling",
      "info" : "SimpleName[35157-35164]:SimpleName[35171-35178]"
    }, {
      "left" : "Calendar date",
      "right" : "Calendar date",
      "info" : "SingleVariableDeclaration[35165-35178]:SingleVariableDeclaration[35179-35192]"
    }, {
      "left" : "int field",
      "right" : "int field",
      "info" : "SingleVariableDeclaration[35180-35189]:SingleVariableDeclaration[35194-35203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35191-35434]:Block[35205-35448]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[35201-35307]:IfStatement[35215-35321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35219-35307]:Block[35233-35321]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[35233-35297]:ThrowStatement[35247-35311]"
    }, {
      "left" : "Calendar ceiled = (Calendar) date.clone();",
      "right" : "Calendar ceiled = (Calendar) date.clone();",
      "info" : "VariableDeclarationStatement[35316-35358]:VariableDeclarationStatement[35330-35372]"
    }, {
      "left" : "modify(ceiled, field, MODIFY_CEILING);",
      "right" : "modify(ceiled, field, MODIFY_CEILING);",
      "info" : "ExpressionStatement[35367-35405]:ExpressionStatement[35381-35419]"
    }, {
      "left" : "return ceiled;",
      "right" : "return ceiled;",
      "info" : "ReturnStatement[35414-35428]:ReturnStatement[35428-35442]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36312-36318]:Modifier[36326-36332]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36319-36325]:Modifier[36333-36339]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[36326-36330]:SimpleType[36340-36344]"
    }, {
      "left" : "ceiling",
      "right" : "ceiling",
      "info" : "SimpleName[36331-36338]:SimpleName[36345-36352]"
    }, {
      "left" : "Object date",
      "right" : "Object date",
      "info" : "SingleVariableDeclaration[36339-36350]:SingleVariableDeclaration[36353-36364]"
    }, {
      "left" : "int field",
      "right" : "int field",
      "info" : "SingleVariableDeclaration[36352-36361]:SingleVariableDeclaration[36366-36375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36363-36805]:Block[36377-36819]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[36373-36479]:IfStatement[36387-36493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36391-36479]:Block[36405-36493]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[36405-36469]:ThrowStatement[36419-36483]"
    }, {
      "left" : "if (date instanceof Date)",
      "right" : "if (date instanceof Date)",
      "info" : "IfStatement[36488-36799]:IfStatement[36502-36813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36514-36573]:Block[36528-36587]"
    }, {
      "left" : "return ceiling((Date) date, field);",
      "right" : "return ceiling((Date) date, field);",
      "info" : "ReturnStatement[36528-36563]:ReturnStatement[36542-36577]"
    }, {
      "left" : "if (date instanceof Calendar)",
      "right" : "if (date instanceof Calendar)",
      "info" : "IfStatement[36579-36799]:IfStatement[36593-36813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36609-36682]:Block[36623-36696]"
    }, {
      "left" : "return ceiling((Calendar) date, field).getTime();",
      "right" : "return ceiling((Calendar) date, field).getTime();",
      "info" : "ReturnStatement[36623-36672]:ReturnStatement[36637-36686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36688-36799]:Block[36702-36813]"
    }, {
      "left" : "throw new ClassCastException(\"Could not find ceiling of for type: \" + date.getClass());",
      "right" : "throw new ClassCastException(\"Could not find ceiling of for type: \" + date.getClass());",
      "info" : "ThrowStatement[36702-36789]:ThrowStatement[36716-36803]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37153-37160]:Modifier[37167-37174]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[37161-37167]:Modifier[37175-37181]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[37168-37172]:PrimitiveType[37182-37186]"
    }, {
      "left" : "modify",
      "right" : "modify",
      "info" : "SimpleName[37173-37179]:SimpleName[37187-37193]"
    }, {
      "left" : "Calendar val",
      "right" : "Calendar val",
      "info" : "SingleVariableDeclaration[37180-37192]:SingleVariableDeclaration[37194-37206]"
    }, {
      "left" : "int field",
      "right" : "int field",
      "info" : "SingleVariableDeclaration[37194-37203]:SingleVariableDeclaration[37208-37217]"
    }, {
      "left" : "int modType",
      "right" : "int modType",
      "info" : "SingleVariableDeclaration[37205-37216]:SingleVariableDeclaration[37219-37230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37218-43223]:Block[37232-43237]"
    }, {
      "left" : "if (val.get(Calendar.YEAR) > 280000000)",
      "right" : "if (val.get(Calendar.YEAR) > 280000000)",
      "info" : "IfStatement[37228-37376]:IfStatement[37242-37390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37268-37376]:Block[37282-37390]"
    }, {
      "left" : "throw new ArithmeticException(\"Calendar value too large for accurate calculations\");",
      "right" : "throw new ArithmeticException(\"Calendar value too large for accurate calculations\");",
      "info" : "ThrowStatement[37282-37366]:ThrowStatement[37296-37380]"
    }, {
      "left" : "if (field == Calendar.MILLISECOND)",
      "right" : "if (field == Calendar.MILLISECOND)",
      "info" : "IfStatement[37394-37460]:IfStatement[37408-37474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37429-37460]:Block[37443-37474]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[37443-37450]:ReturnStatement[37457-37464]"
    }, {
      "left" : "Date date = val.getTime();",
      "right" : "Date date = val.getTime();",
      "info" : "VariableDeclarationStatement[37743-37769]:VariableDeclarationStatement[37757-37783]"
    }, {
      "left" : "long time = date.getTime();",
      "right" : "long time = date.getTime();",
      "info" : "VariableDeclarationStatement[37778-37805]:VariableDeclarationStatement[37792-37819]"
    }, {
      "left" : "boolean done = false;",
      "right" : "boolean done = false;",
      "info" : "VariableDeclarationStatement[37814-37835]:VariableDeclarationStatement[37828-37849]"
    }, {
      "left" : "int millisecs = val.get(Calendar.MILLISECOND);",
      "right" : "int millisecs = val.get(Calendar.MILLISECOND);",
      "info" : "VariableDeclarationStatement[37878-37924]:VariableDeclarationStatement[37892-37938]"
    }, {
      "left" : "if (MODIFY_TRUNCATE == modType || millisecs < 500)",
      "right" : "if (MODIFY_TRUNCATE == modType || millisecs < 500)",
      "info" : "IfStatement[37933-38032]:IfStatement[37947-38046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37984-38032]:Block[37998-38046]"
    }, {
      "left" : "time = time - millisecs;",
      "right" : "time = time - millisecs;",
      "info" : "ExpressionStatement[37998-38022]:ExpressionStatement[38012-38036]"
    }, {
      "left" : "if (field == Calendar.SECOND)",
      "right" : "if (field == Calendar.SECOND)",
      "info" : "IfStatement[38041-38107]:IfStatement[38055-38121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38071-38107]:Block[38085-38121]"
    }, {
      "left" : "done = true;",
      "right" : "done = true;",
      "info" : "ExpressionStatement[38085-38097]:ExpressionStatement[38099-38111]"
    }, {
      "left" : "int seconds = val.get(Calendar.SECOND);",
      "right" : "int seconds = val.get(Calendar.SECOND);",
      "info" : "VariableDeclarationStatement[38145-38184]:VariableDeclarationStatement[38159-38198]"
    }, {
      "left" : "if (!done && (MODIFY_TRUNCATE == modType || seconds < 30))",
      "right" : "if (!done && (MODIFY_TRUNCATE == modType || seconds < 30))",
      "info" : "IfStatement[38193-38308]:IfStatement[38207-38322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38252-38308]:Block[38266-38322]"
    }, {
      "left" : "time = time - (seconds * 1000L);",
      "right" : "time = time - (seconds * 1000L);",
      "info" : "ExpressionStatement[38266-38298]:ExpressionStatement[38280-38312]"
    }, {
      "left" : "if (field == Calendar.MINUTE)",
      "right" : "if (field == Calendar.MINUTE)",
      "info" : "IfStatement[38317-38383]:IfStatement[38331-38397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38347-38383]:Block[38361-38397]"
    }, {
      "left" : "done = true;",
      "right" : "done = true;",
      "info" : "ExpressionStatement[38361-38373]:ExpressionStatement[38375-38387]"
    }, {
      "left" : "int minutes = val.get(Calendar.MINUTE);",
      "right" : "int minutes = val.get(Calendar.MINUTE);",
      "info" : "VariableDeclarationStatement[38421-38460]:VariableDeclarationStatement[38435-38474]"
    }, {
      "left" : "if (!done && (MODIFY_TRUNCATE == modType || minutes < 30))",
      "right" : "if (!done && (MODIFY_TRUNCATE == modType || minutes < 30))",
      "info" : "IfStatement[38469-38585]:IfStatement[38483-38599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38528-38585]:Block[38542-38599]"
    }, {
      "left" : "time = time - (minutes * 60000L);",
      "right" : "time = time - (minutes * 60000L);",
      "info" : "ExpressionStatement[38542-38575]:ExpressionStatement[38556-38589]"
    }, {
      "left" : "if (date.getTime() != time)",
      "right" : "if (date.getTime() != time)",
      "info" : "IfStatement[38617-38719]:IfStatement[38631-38733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38645-38719]:Block[38659-38733]"
    }, {
      "left" : "date.setTime(time);",
      "right" : "date.setTime(time);",
      "info" : "ExpressionStatement[38659-38678]:ExpressionStatement[38673-38692]"
    }, {
      "left" : "val.setTime(date);",
      "right" : "val.setTime(date);",
      "info" : "ExpressionStatement[38691-38709]:ExpressionStatement[38705-38723]"
    }, {
      "left" : "boolean roundUp = false;",
      "right" : "boolean roundUp = false;",
      "info" : "VariableDeclarationStatement[38819-38843]:VariableDeclarationStatement[38833-38857]"
    }, {
      "left" : "for (int i = 0; i < fields.length; i++)",
      "right" : "for (int i = 0; i < fields.length; i++)",
      "info" : "ForStatement[38852-43128]:ForStatement[38866-43142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38892-43128]:Block[38906-43142]"
    }, {
      "left" : "for (int j = 0; j < fields[i].length; j++)",
      "right" : "for (int j = 0; j < fields[i].length; j++)",
      "info" : "ForStatement[38906-40833]:ForStatement[38920-40847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38949-40833]:Block[38963-40847]"
    }, {
      "left" : "if (fields[i][j] == field)",
      "right" : "if (fields[i][j] == field)",
      "info" : "IfStatement[38967-40819]:IfStatement[38981-40833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38994-40819]:Block[39008-40833]"
    }, {
      "left" : "if (modType == MODIFY_CEILING || (modType == MODIFY_ROUND && roundUp))",
      "right" : "if (modType == MODIFY_CEILING || (modType == MODIFY_ROUND && roundUp))",
      "info" : "IfStatement[39075-40773]:IfStatement[39089-40787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39146-40773]:Block[39160-40787]"
    }, {
      "left" : "if (field == DateUtils.SEMI_MONTH)",
      "right" : "if (field == DateUtils.SEMI_MONTH)",
      "info" : "IfStatement[39172-40751]:IfStatement[39186-40765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39207-39852]:Block[39221-39866]"
    }, {
      "left" : "if (val.get(Calendar.DATE) == 1)",
      "right" : "if (val.get(Calendar.DATE) == 1)",
      "info" : "IfStatement[39461-39743]:IfStatement[39475-39757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39494-39585]:Block[39508-39599]"
    }, {
      "left" : "val.add(Calendar.DATE, 15);",
      "right" : "val.add(Calendar.DATE, 15);",
      "info" : "ExpressionStatement[39528-39555]:ExpressionStatement[39542-39569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39591-39743]:Block[39605-39757]"
    }, {
      "left" : "val.add(Calendar.DATE, -15);",
      "right" : "val.add(Calendar.DATE, -15);",
      "info" : "ExpressionStatement[39625-39653]:ExpressionStatement[39639-39667]"
    }, {
      "left" : "val.add(Calendar.MONTH, 1);",
      "right" : "val.add(Calendar.MONTH, 1);",
      "info" : "ExpressionStatement[39686-39713]:ExpressionStatement[39700-39727]"
    }, {
      "left" : "if (field == Calendar.AM_PM)",
      "right" : "if (field == Calendar.AM_PM)",
      "info" : "IfStatement[39858-40751]:IfStatement[39872-40765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39887-40525]:Block[39901-40539]"
    }, {
      "left" : "if (val.get(Calendar.HOUR_OF_DAY) == 0)",
      "right" : "if (val.get(Calendar.HOUR_OF_DAY) == 0)",
      "info" : "IfStatement[40116-40418]:IfStatement[40130-40432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40156-40254]:Block[40170-40268]"
    }, {
      "left" : "val.add(Calendar.HOUR_OF_DAY, 12);",
      "right" : "val.add(Calendar.HOUR_OF_DAY, 12);",
      "info" : "ExpressionStatement[40190-40224]:ExpressionStatement[40204-40238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40260-40418]:Block[40274-40432]"
    }, {
      "left" : "val.add(Calendar.HOUR_OF_DAY, -12);",
      "right" : "val.add(Calendar.HOUR_OF_DAY, -12);",
      "info" : "ExpressionStatement[40294-40329]:ExpressionStatement[40308-40343]"
    }, {
      "left" : "val.add(Calendar.DATE, 1);",
      "right" : "val.add(Calendar.DATE, 1);",
      "info" : "ExpressionStatement[40362-40388]:ExpressionStatement[40376-40402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40531-40751]:Block[40545-40765]"
    }, {
      "left" : "val.add(fields[i][0], 1);",
      "right" : "val.add(fields[i][0], 1);",
      "info" : "ExpressionStatement[40700-40725]:ExpressionStatement[40714-40739]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[40794-40801]:ReturnStatement[40808-40815]"
    }, {
      "left" : "int offset = 0;",
      "right" : "int offset = 0;",
      "info" : "VariableDeclarationStatement[40911-40926]:VariableDeclarationStatement[40925-40940]"
    }, {
      "left" : "boolean offsetSet = false;",
      "right" : "boolean offsetSet = false;",
      "info" : "VariableDeclarationStatement[40939-40965]:VariableDeclarationStatement[40953-40979]"
    }, {
      "left" : "switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (fields[i][0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }",
      "right" : "switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (fields[i][0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }",
      "info" : "SwitchStatement[41064-42521]:SwitchStatement[41078-42535]"
    }, {
      "left" : "case DateUtils.SEMI_MONTH:",
      "right" : "case DateUtils.SEMI_MONTH:",
      "info" : "SwitchCase[41097-41123]:SwitchCase[41111-41137]"
    }, {
      "left" : "if (fields[i][0] == Calendar.DATE)",
      "right" : "if (fields[i][0] == Calendar.DATE)",
      "info" : "IfStatement[41144-41932]:IfStatement[41158-41946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41179-41932]:Block[41193-41946]"
    }, {
      "left" : "offset = val.get(Calendar.DATE) - 1;",
      "right" : "offset = val.get(Calendar.DATE) - 1;",
      "info" : "ExpressionStatement[41420-41456]:ExpressionStatement[41434-41470]"
    }, {
      "left" : "if (offset >= 15)",
      "right" : "if (offset >= 15)",
      "info" : "IfStatement[41648-41735]:IfStatement[41662-41749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41666-41735]:Block[41680-41749]"
    }, {
      "left" : "offset -= 15;",
      "right" : "offset -= 15;",
      "info" : "ExpressionStatement[41696-41709]:ExpressionStatement[41710-41723]"
    }, {
      "left" : "roundUp = offset > 7;",
      "right" : "roundUp = offset > 7;",
      "info" : "ExpressionStatement[41847-41868]:ExpressionStatement[41861-41882]"
    }, {
      "left" : "offsetSet = true;",
      "right" : "offsetSet = true;",
      "info" : "ExpressionStatement[41893-41910]:ExpressionStatement[41907-41924]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[41953-41959]:BreakStatement[41967-41973]"
    }, {
      "left" : "case Calendar.AM_PM:",
      "right" : "case Calendar.AM_PM:",
      "info" : "SwitchCase[41976-41996]:SwitchCase[41990-42010]"
    }, {
      "left" : "if (fields[i][0] == Calendar.HOUR_OF_DAY)",
      "right" : "if (fields[i][0] == Calendar.HOUR_OF_DAY)",
      "info" : "IfStatement[42017-42480]:IfStatement[42031-42494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42059-42480]:Block[42073-42494]"
    }, {
      "left" : "offset = val.get(Calendar.HOUR_OF_DAY);",
      "right" : "offset = val.get(Calendar.HOUR_OF_DAY);",
      "info" : "ExpressionStatement[42218-42257]:ExpressionStatement[42232-42271]"
    }, {
      "left" : "if (offset >= 12)",
      "right" : "if (offset >= 12)",
      "info" : "IfStatement[42282-42369]:IfStatement[42296-42383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42300-42369]:Block[42314-42383]"
    }, {
      "left" : "offset -= 12;",
      "right" : "offset -= 12;",
      "info" : "ExpressionStatement[42330-42343]:ExpressionStatement[42344-42357]"
    }, {
      "left" : "roundUp = offset >= 6;",
      "right" : "roundUp = offset >= 6;",
      "info" : "ExpressionStatement[42394-42416]:ExpressionStatement[42408-42430]"
    }, {
      "left" : "offsetSet = true;",
      "right" : "offsetSet = true;",
      "info" : "ExpressionStatement[42441-42458]:ExpressionStatement[42455-42472]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[42501-42507]:BreakStatement[42515-42521]"
    }, {
      "left" : "if (!offsetSet)",
      "right" : "if (!offsetSet)",
      "info" : "IfStatement[42534-42959]:IfStatement[42548-42973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42550-42959]:Block[42564-42973]"
    }, {
      "left" : "int min = val.getActualMinimum(fields[i][0]);",
      "right" : "int min = val.getActualMinimum(fields[i][0]);",
      "info" : "VariableDeclarationStatement[42568-42613]:VariableDeclarationStatement[42582-42627]"
    }, {
      "left" : "int max = val.getActualMaximum(fields[i][0]);",
      "right" : "int max = val.getActualMaximum(fields[i][0]);",
      "info" : "VariableDeclarationStatement[42630-42675]:VariableDeclarationStatement[42644-42689]"
    }, {
      "left" : "offset = val.get(fields[i][0]) - min;",
      "right" : "offset = val.get(fields[i][0]) - min;",
      "info" : "ExpressionStatement[42762-42799]:ExpressionStatement[42776-42813]"
    }, {
      "left" : "roundUp = offset > ((max - min) / 2);",
      "right" : "roundUp = offset > ((max - min) / 2);",
      "info" : "ExpressionStatement[42908-42945]:ExpressionStatement[42922-42959]"
    }, {
      "left" : "if (offset != 0)",
      "right" : "if (offset != 0)",
      "info" : "IfStatement[43015-43118]:IfStatement[43029-43132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43032-43118]:Block[43046-43132]"
    }, {
      "left" : "val.set(fields[i][0], val.get(fields[i][0]) - offset);",
      "right" : "val.set(fields[i][0], val.get(fields[i][0]) - offset);",
      "info" : "ExpressionStatement[43050-43104]:ExpressionStatement[43064-43118]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");",
      "right" : "throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");",
      "info" : "ThrowStatement[43137-43216]:ThrowStatement[43151-43230]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[44520-44526]:Modifier[44534-44540]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[44527-44533]:Modifier[44541-44547]"
    }, {
      "left" : "Iterator<Calendar>",
      "right" : "Iterator<Calendar>",
      "info" : "ParameterizedType[44534-44552]:ParameterizedType[44548-44566]"
    }, {
      "left" : "iterator",
      "right" : "iterator",
      "info" : "SimpleName[44553-44561]:SimpleName[44567-44575]"
    }, {
      "left" : "Date focus",
      "right" : "Date focus",
      "info" : "SingleVariableDeclaration[44562-44572]:SingleVariableDeclaration[44576-44586]"
    }, {
      "left" : "int rangeStyle",
      "right" : "int rangeStyle",
      "info" : "SingleVariableDeclaration[44574-44588]:SingleVariableDeclaration[44588-44602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44590-44833]:Block[44604-44847]"
    }, {
      "left" : "if (focus == null)",
      "right" : "if (focus == null)",
      "info" : "IfStatement[44600-44707]:IfStatement[44614-44721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44619-44707]:Block[44633-44721]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[44633-44697]:ThrowStatement[44647-44711]"
    }, {
      "left" : "Calendar gval = Calendar.getInstance();",
      "right" : "Calendar gval = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[44716-44755]:VariableDeclarationStatement[44730-44769]"
    }, {
      "left" : "gval.setTime(focus);",
      "right" : "gval.setTime(focus);",
      "info" : "ExpressionStatement[44764-44784]:ExpressionStatement[44778-44798]"
    }, {
      "left" : "return iterator(gval, rangeStyle);",
      "right" : "return iterator(gval, rangeStyle);",
      "info" : "ReturnStatement[44793-44827]:ReturnStatement[44807-44841]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[46001-46007]:Modifier[46015-46021]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[46008-46014]:Modifier[46022-46028]"
    }, {
      "left" : "Iterator<Calendar>",
      "right" : "Iterator<Calendar>",
      "info" : "ParameterizedType[46015-46033]:ParameterizedType[46029-46047]"
    }, {
      "left" : "iterator",
      "right" : "iterator",
      "info" : "SimpleName[46034-46042]:SimpleName[46048-46056]"
    }, {
      "left" : "Calendar focus",
      "right" : "Calendar focus",
      "info" : "SingleVariableDeclaration[46043-46057]:SingleVariableDeclaration[46057-46071]"
    }, {
      "left" : "int rangeStyle",
      "right" : "int rangeStyle",
      "info" : "SingleVariableDeclaration[46059-46073]:SingleVariableDeclaration[46073-46087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46075-48875]:Block[46089-48889]"
    }, {
      "left" : "if (focus == null)",
      "right" : "if (focus == null)",
      "info" : "IfStatement[46085-46192]:IfStatement[46099-46206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46104-46192]:Block[46118-46206]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[46118-46182]:ThrowStatement[46132-46196]"
    }, {
      "left" : "Calendar start = null;",
      "right" : "Calendar start = null;",
      "info" : "VariableDeclarationStatement[46201-46223]:VariableDeclarationStatement[46215-46237]"
    }, {
      "left" : "Calendar end = null;",
      "right" : "Calendar end = null;",
      "info" : "VariableDeclarationStatement[46232-46252]:VariableDeclarationStatement[46246-46266]"
    }, {
      "left" : "int startCutoff = Calendar.SUNDAY;",
      "right" : "int startCutoff = Calendar.SUNDAY;",
      "info" : "VariableDeclarationStatement[46261-46295]:VariableDeclarationStatement[46275-46309]"
    }, {
      "left" : "int endCutoff = Calendar.SATURDAY;",
      "right" : "int endCutoff = Calendar.SATURDAY;",
      "info" : "VariableDeclarationStatement[46304-46338]:VariableDeclarationStatement[46318-46352]"
    }, {
      "left" : "switch (rangeStyle) {\n            case RANGE_MONTH_SUNDAY:\n            case RANGE_MONTH_MONDAY:\n                //Set start to the first of the month\n                start = truncate(focus, Calendar.MONTH);\n                //Set end to the last of the month\n                end = (Calendar) start.clone();\n                end.add(Calendar.MONTH, 1);\n                end.add(Calendar.DATE, -1);\n                //Loop start back to the previous sunday or monday\n                if (rangeStyle == RANGE_MONTH_MONDAY) {\n                    startCutoff = Calendar.MONDAY;\n                    endCutoff = Calendar.SUNDAY;\n                }\n                break;\n            case RANGE_WEEK_SUNDAY:\n            case RANGE_WEEK_MONDAY:\n            case RANGE_WEEK_RELATIVE:\n            case RANGE_WEEK_CENTER:\n                //Set start and end to the current date\n                start = truncate(focus, Calendar.DATE);\n                end = truncate(focus, Calendar.DATE);\n                switch (rangeStyle) {\n                    case RANGE_WEEK_SUNDAY:\n                        //already set by default\n                        break;\n                    case RANGE_WEEK_MONDAY:\n                        startCutoff = Calendar.MONDAY;\n                        endCutoff = Calendar.SUNDAY;\n                        break;\n                    case RANGE_WEEK_RELATIVE:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK);\n                        endCutoff = startCutoff - 1;\n                        break;\n                    case RANGE_WEEK_CENTER:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3;\n                        endCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3;\n                        break;\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"The range style \" + rangeStyle + \" is not valid.\");\n        }",
      "right" : "switch (rangeStyle) {\n            case RANGE_MONTH_SUNDAY:\n            case RANGE_MONTH_MONDAY:\n                //Set start to the first of the month\n                start = truncate(focus, Calendar.MONTH);\n                //Set end to the last of the month\n                end = (Calendar) start.clone();\n                end.add(Calendar.MONTH, 1);\n                end.add(Calendar.DATE, -1);\n                //Loop start back to the previous sunday or monday\n                if (rangeStyle == RANGE_MONTH_MONDAY) {\n                    startCutoff = Calendar.MONDAY;\n                    endCutoff = Calendar.SUNDAY;\n                }\n                break;\n            case RANGE_WEEK_SUNDAY:\n            case RANGE_WEEK_MONDAY:\n            case RANGE_WEEK_RELATIVE:\n            case RANGE_WEEK_CENTER:\n                //Set start and end to the current date\n                start = truncate(focus, Calendar.DATE);\n                end = truncate(focus, Calendar.DATE);\n                switch (rangeStyle) {\n                    case RANGE_WEEK_SUNDAY:\n                        //already set by default\n                        break;\n                    case RANGE_WEEK_MONDAY:\n                        startCutoff = Calendar.MONDAY;\n                        endCutoff = Calendar.SUNDAY;\n                        break;\n                    case RANGE_WEEK_RELATIVE:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK);\n                        endCutoff = startCutoff - 1;\n                        break;\n                    case RANGE_WEEK_CENTER:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3;\n                        endCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3;\n                        break;\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"The range style \" + rangeStyle + \" is not valid.\");\n        }",
      "info" : "SwitchStatement[46347-48261]:SwitchStatement[46361-48275]"
    }, {
      "left" : "case RANGE_MONTH_SUNDAY:",
      "right" : "case RANGE_MONTH_SUNDAY:",
      "info" : "SwitchCase[46381-46405]:SwitchCase[46395-46419]"
    }, {
      "left" : "case RANGE_MONTH_MONDAY:",
      "right" : "case RANGE_MONTH_MONDAY:",
      "info" : "SwitchCase[46418-46442]:SwitchCase[46432-46456]"
    }, {
      "left" : "start = truncate(focus, Calendar.MONTH);",
      "right" : "start = truncate(focus, Calendar.MONTH);",
      "info" : "ExpressionStatement[46513-46553]:ExpressionStatement[46527-46567]"
    }, {
      "left" : "end = (Calendar) start.clone();",
      "right" : "end = (Calendar) start.clone();",
      "info" : "ExpressionStatement[46621-46652]:ExpressionStatement[46635-46666]"
    }, {
      "left" : "end.add(Calendar.MONTH, 1);",
      "right" : "end.add(Calendar.MONTH, 1);",
      "info" : "ExpressionStatement[46669-46696]:ExpressionStatement[46683-46710]"
    }, {
      "left" : "end.add(Calendar.DATE, -1);",
      "right" : "end.add(Calendar.DATE, -1);",
      "info" : "ExpressionStatement[46713-46740]:ExpressionStatement[46727-46754]"
    }, {
      "left" : "if (rangeStyle == RANGE_MONTH_MONDAY)",
      "right" : "if (rangeStyle == RANGE_MONTH_MONDAY)",
      "info" : "IfStatement[46824-46981]:IfStatement[46838-46995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46862-46981]:Block[46876-46995]"
    }, {
      "left" : "startCutoff = Calendar.MONDAY;",
      "right" : "startCutoff = Calendar.MONDAY;",
      "info" : "ExpressionStatement[46884-46914]:ExpressionStatement[46898-46928]"
    }, {
      "left" : "endCutoff = Calendar.SUNDAY;",
      "right" : "endCutoff = Calendar.SUNDAY;",
      "info" : "ExpressionStatement[46935-46963]:ExpressionStatement[46949-46977]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[46998-47004]:BreakStatement[47012-47018]"
    }, {
      "left" : "case RANGE_WEEK_SUNDAY:",
      "right" : "case RANGE_WEEK_SUNDAY:",
      "info" : "SwitchCase[47017-47040]:SwitchCase[47031-47054]"
    }, {
      "left" : "case RANGE_WEEK_MONDAY:",
      "right" : "case RANGE_WEEK_MONDAY:",
      "info" : "SwitchCase[47053-47076]:SwitchCase[47067-47090]"
    }, {
      "left" : "case RANGE_WEEK_RELATIVE:",
      "right" : "case RANGE_WEEK_RELATIVE:",
      "info" : "SwitchCase[47089-47114]:SwitchCase[47103-47128]"
    }, {
      "left" : "case RANGE_WEEK_CENTER:",
      "right" : "case RANGE_WEEK_CENTER:",
      "info" : "SwitchCase[47127-47150]:SwitchCase[47141-47164]"
    }, {
      "left" : "start = truncate(focus, Calendar.DATE);",
      "right" : "start = truncate(focus, Calendar.DATE);",
      "info" : "ExpressionStatement[47223-47262]:ExpressionStatement[47237-47276]"
    }, {
      "left" : "end = truncate(focus, Calendar.DATE);",
      "right" : "end = truncate(focus, Calendar.DATE);",
      "info" : "ExpressionStatement[47279-47316]:ExpressionStatement[47293-47330]"
    }, {
      "left" : "switch (rangeStyle) {\n                    case RANGE_WEEK_SUNDAY:\n                        //already set by default\n                        break;\n                    case RANGE_WEEK_MONDAY:\n                        startCutoff = Calendar.MONDAY;\n                        endCutoff = Calendar.SUNDAY;\n                        break;\n                    case RANGE_WEEK_RELATIVE:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK);\n                        endCutoff = startCutoff - 1;\n                        break;\n                    case RANGE_WEEK_CENTER:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3;\n                        endCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3;\n                        break;\n                }",
      "right" : "switch (rangeStyle) {\n                    case RANGE_WEEK_SUNDAY:\n                        //already set by default\n                        break;\n                    case RANGE_WEEK_MONDAY:\n                        startCutoff = Calendar.MONDAY;\n                        endCutoff = Calendar.SUNDAY;\n                        break;\n                    case RANGE_WEEK_RELATIVE:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK);\n                        endCutoff = startCutoff - 1;\n                        break;\n                    case RANGE_WEEK_CENTER:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3;\n                        endCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3;\n                        break;\n                }",
      "info" : "SwitchStatement[47333-48103]:SwitchStatement[47347-48117]"
    }, {
      "left" : "case RANGE_WEEK_SUNDAY:",
      "right" : "case RANGE_WEEK_SUNDAY:",
      "info" : "SwitchCase[47375-47398]:SwitchCase[47389-47412]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47472-47478]:BreakStatement[47486-47492]"
    }, {
      "left" : "case RANGE_WEEK_MONDAY:",
      "right" : "case RANGE_WEEK_MONDAY:",
      "info" : "SwitchCase[47499-47522]:SwitchCase[47513-47536]"
    }, {
      "left" : "startCutoff = Calendar.MONDAY;",
      "right" : "startCutoff = Calendar.MONDAY;",
      "info" : "ExpressionStatement[47547-47577]:ExpressionStatement[47561-47591]"
    }, {
      "left" : "endCutoff = Calendar.SUNDAY;",
      "right" : "endCutoff = Calendar.SUNDAY;",
      "info" : "ExpressionStatement[47602-47630]:ExpressionStatement[47616-47644]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47655-47661]:BreakStatement[47669-47675]"
    }, {
      "left" : "case RANGE_WEEK_RELATIVE:",
      "right" : "case RANGE_WEEK_RELATIVE:",
      "info" : "SwitchCase[47682-47707]:SwitchCase[47696-47721]"
    }, {
      "left" : "startCutoff = focus.get(Calendar.DAY_OF_WEEK);",
      "right" : "startCutoff = focus.get(Calendar.DAY_OF_WEEK);",
      "info" : "ExpressionStatement[47732-47778]:ExpressionStatement[47746-47792]"
    }, {
      "left" : "endCutoff = startCutoff - 1;",
      "right" : "endCutoff = startCutoff - 1;",
      "info" : "ExpressionStatement[47803-47831]:ExpressionStatement[47817-47845]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47856-47862]:BreakStatement[47870-47876]"
    }, {
      "left" : "case RANGE_WEEK_CENTER:",
      "right" : "case RANGE_WEEK_CENTER:",
      "info" : "SwitchCase[47883-47906]:SwitchCase[47897-47920]"
    }, {
      "left" : "startCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3;",
      "right" : "startCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3;",
      "info" : "ExpressionStatement[47931-47981]:ExpressionStatement[47945-47995]"
    }, {
      "left" : "endCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3;",
      "right" : "endCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3;",
      "info" : "ExpressionStatement[48006-48054]:ExpressionStatement[48020-48068]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48079-48085]:BreakStatement[48093-48099]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48120-48126]:BreakStatement[48134-48140]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[48139-48147]:SwitchCase[48153-48161]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The range style \" + rangeStyle + \" is not valid.\");",
      "right" : "throw new IllegalArgumentException(\"The range style \" + rangeStyle + \" is not valid.\");",
      "info" : "ThrowStatement[48164-48251]:ThrowStatement[48178-48265]"
    }, {
      "left" : "if (startCutoff < Calendar.SUNDAY)",
      "right" : "if (startCutoff < Calendar.SUNDAY)",
      "info" : "IfStatement[48270-48346]:IfStatement[48284-48360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48305-48346]:Block[48319-48360]"
    }, {
      "left" : "startCutoff += 7;",
      "right" : "startCutoff += 7;",
      "info" : "ExpressionStatement[48319-48336]:ExpressionStatement[48333-48350]"
    }, {
      "left" : "if (startCutoff > Calendar.SATURDAY)",
      "right" : "if (startCutoff > Calendar.SATURDAY)",
      "info" : "IfStatement[48355-48433]:IfStatement[48369-48447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48392-48433]:Block[48406-48447]"
    }, {
      "left" : "startCutoff -= 7;",
      "right" : "startCutoff -= 7;",
      "info" : "ExpressionStatement[48406-48423]:ExpressionStatement[48420-48437]"
    }, {
      "left" : "if (endCutoff < Calendar.SUNDAY)",
      "right" : "if (endCutoff < Calendar.SUNDAY)",
      "info" : "IfStatement[48442-48514]:IfStatement[48456-48528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48475-48514]:Block[48489-48528]"
    }, {
      "left" : "endCutoff += 7;",
      "right" : "endCutoff += 7;",
      "info" : "ExpressionStatement[48489-48504]:ExpressionStatement[48503-48518]"
    }, {
      "left" : "if (endCutoff > Calendar.SATURDAY)",
      "right" : "if (endCutoff > Calendar.SATURDAY)",
      "info" : "IfStatement[48523-48597]:IfStatement[48537-48611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48558-48597]:Block[48572-48611]"
    }, {
      "left" : "endCutoff -= 7;",
      "right" : "endCutoff -= 7;",
      "info" : "ExpressionStatement[48572-48587]:ExpressionStatement[48586-48601]"
    }, {
      "left" : "while (start.get(Calendar.DAY_OF_WEEK) != startCutoff)",
      "right" : "while (start.get(Calendar.DAY_OF_WEEK) != startCutoff)",
      "info" : "WhileStatement[48606-48714]:WhileStatement[48620-48728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48661-48714]:Block[48675-48728]"
    }, {
      "left" : "start.add(Calendar.DATE, -1);",
      "right" : "start.add(Calendar.DATE, -1);",
      "info" : "ExpressionStatement[48675-48704]:ExpressionStatement[48689-48718]"
    }, {
      "left" : "while (end.get(Calendar.DAY_OF_WEEK) != endCutoff)",
      "right" : "while (end.get(Calendar.DAY_OF_WEEK) != endCutoff)",
      "info" : "WhileStatement[48723-48824]:WhileStatement[48737-48838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48774-48824]:Block[48788-48838]"
    }, {
      "left" : "end.add(Calendar.DATE, 1);",
      "right" : "end.add(Calendar.DATE, 1);",
      "info" : "ExpressionStatement[48788-48814]:ExpressionStatement[48802-48828]"
    }, {
      "left" : "return new DateIterator(start, end);",
      "right" : "return new DateIterator(start, end);",
      "info" : "ReturnStatement[48833-48869]:ReturnStatement[48847-48883]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[49812-49818]:Modifier[49826-49832]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[49819-49825]:Modifier[49833-49839]"
    }, {
      "left" : "Iterator<?>",
      "right" : "Iterator<?>",
      "info" : "ParameterizedType[49826-49837]:ParameterizedType[49840-49851]"
    }, {
      "left" : "iterator",
      "right" : "iterator",
      "info" : "SimpleName[49838-49846]:SimpleName[49852-49860]"
    }, {
      "left" : "Object focus",
      "right" : "Object focus",
      "info" : "SingleVariableDeclaration[49847-49859]:SingleVariableDeclaration[49861-49873]"
    }, {
      "left" : "int rangeStyle",
      "right" : "int rangeStyle",
      "info" : "SingleVariableDeclaration[49861-49875]:SingleVariableDeclaration[49875-49889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49877-50307]:Block[49891-50321]"
    }, {
      "left" : "if (focus == null)",
      "right" : "if (focus == null)",
      "info" : "IfStatement[49887-49994]:IfStatement[49901-50008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49906-49994]:Block[49920-50008]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[49920-49984]:ThrowStatement[49934-49998]"
    }, {
      "left" : "if (focus instanceof Date)",
      "right" : "if (focus instanceof Date)",
      "info" : "IfStatement[50003-50301]:IfStatement[50017-50315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50030-50096]:Block[50044-50110]"
    }, {
      "left" : "return iterator((Date) focus, rangeStyle);",
      "right" : "return iterator((Date) focus, rangeStyle);",
      "info" : "ReturnStatement[50044-50086]:ReturnStatement[50058-50100]"
    }, {
      "left" : "if (focus instanceof Calendar)",
      "right" : "if (focus instanceof Calendar)",
      "info" : "IfStatement[50102-50301]:IfStatement[50116-50315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50133-50203]:Block[50147-50217]"
    }, {
      "left" : "return iterator((Calendar) focus, rangeStyle);",
      "right" : "return iterator((Calendar) focus, rangeStyle);",
      "info" : "ReturnStatement[50147-50193]:ReturnStatement[50161-50207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50209-50301]:Block[50223-50315]"
    }, {
      "left" : "throw new ClassCastException(\"Could not iterate based on \" + focus);",
      "right" : "throw new ClassCastException(\"Could not iterate based on \" + focus);",
      "info" : "ThrowStatement[50223-50291]:ThrowStatement[50237-50305]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[52079-52085]:Modifier[52093-52099]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[52086-52092]:Modifier[52100-52106]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[52093-52097]:PrimitiveType[52107-52111]"
    }, {
      "left" : "getFragmentInMilliseconds",
      "right" : "getFragmentInMilliseconds",
      "info" : "SimpleName[52098-52123]:SimpleName[52112-52137]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[52124-52133]:SingleVariableDeclaration[52138-52147]"
    }, {
      "left" : "int fragment",
      "right" : "int fragment",
      "info" : "SingleVariableDeclaration[52135-52147]:SingleVariableDeclaration[52149-52161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52149-52226]:Block[52163-52240]"
    }, {
      "left" : "return getFragment(date, fragment, Calendar.MILLISECOND);",
      "right" : "return getFragment(date, fragment, Calendar.MILLISECOND);",
      "info" : "ReturnStatement[52159-52216]:ReturnStatement[52173-52230]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[54074-54080]:Modifier[54088-54094]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[54081-54087]:Modifier[54095-54101]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[54088-54092]:PrimitiveType[54102-54106]"
    }, {
      "left" : "getFragmentInSeconds",
      "right" : "getFragmentInSeconds",
      "info" : "SimpleName[54093-54113]:SimpleName[54107-54127]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[54114-54123]:SingleVariableDeclaration[54128-54137]"
    }, {
      "left" : "int fragment",
      "right" : "int fragment",
      "info" : "SingleVariableDeclaration[54125-54137]:SingleVariableDeclaration[54139-54151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54139-54207]:Block[54153-54221]"
    }, {
      "left" : "return getFragment(date, fragment, Calendar.SECOND);",
      "right" : "return getFragment(date, fragment, Calendar.SECOND);",
      "info" : "ReturnStatement[54149-54201]:ReturnStatement[54163-54215]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[56108-56114]:Modifier[56122-56128]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[56115-56121]:Modifier[56129-56135]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[56122-56126]:PrimitiveType[56136-56140]"
    }, {
      "left" : "getFragmentInMinutes",
      "right" : "getFragmentInMinutes",
      "info" : "SimpleName[56127-56147]:SimpleName[56141-56161]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[56148-56157]:SingleVariableDeclaration[56162-56171]"
    }, {
      "left" : "int fragment",
      "right" : "int fragment",
      "info" : "SingleVariableDeclaration[56159-56171]:SingleVariableDeclaration[56173-56185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56173-56241]:Block[56187-56255]"
    }, {
      "left" : "return getFragment(date, fragment, Calendar.MINUTE);",
      "right" : "return getFragment(date, fragment, Calendar.MINUTE);",
      "info" : "ReturnStatement[56183-56235]:ReturnStatement[56197-56249]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[58103-58109]:Modifier[58117-58123]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[58110-58116]:Modifier[58124-58130]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[58117-58121]:PrimitiveType[58131-58135]"
    }, {
      "left" : "getFragmentInHours",
      "right" : "getFragmentInHours",
      "info" : "SimpleName[58122-58140]:SimpleName[58136-58154]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[58141-58150]:SingleVariableDeclaration[58155-58164]"
    }, {
      "left" : "int fragment",
      "right" : "int fragment",
      "info" : "SingleVariableDeclaration[58152-58164]:SingleVariableDeclaration[58166-58178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58166-58239]:Block[58180-58253]"
    }, {
      "left" : "return getFragment(date, fragment, Calendar.HOUR_OF_DAY);",
      "right" : "return getFragment(date, fragment, Calendar.HOUR_OF_DAY);",
      "info" : "ReturnStatement[58176-58233]:ReturnStatement[58190-58247]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[60015-60021]:Modifier[60029-60035]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[60022-60028]:Modifier[60036-60042]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[60029-60033]:PrimitiveType[60043-60047]"
    }, {
      "left" : "getFragmentInDays",
      "right" : "getFragmentInDays",
      "info" : "SimpleName[60034-60051]:SimpleName[60048-60065]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[60052-60061]:SingleVariableDeclaration[60066-60075]"
    }, {
      "left" : "int fragment",
      "right" : "int fragment",
      "info" : "SingleVariableDeclaration[60063-60075]:SingleVariableDeclaration[60077-60089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60077-60150]:Block[60091-60164]"
    }, {
      "left" : "return getFragment(date, fragment, Calendar.DAY_OF_YEAR);",
      "right" : "return getFragment(date, fragment, Calendar.DAY_OF_YEAR);",
      "info" : "ReturnStatement[60087-60144]:ReturnStatement[60101-60158]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[62055-62061]:Modifier[62069-62075]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[62062-62068]:Modifier[62076-62082]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[62069-62073]:PrimitiveType[62083-62087]"
    }, {
      "left" : "getFragmentInMilliseconds",
      "right" : "getFragmentInMilliseconds",
      "info" : "SimpleName[62074-62099]:SimpleName[62088-62113]"
    }, {
      "left" : "Calendar calendar",
      "right" : "Calendar calendar",
      "info" : "SingleVariableDeclaration[62100-62117]:SingleVariableDeclaration[62114-62131]"
    }, {
      "left" : "int fragment",
      "right" : "int fragment",
      "info" : "SingleVariableDeclaration[62119-62131]:SingleVariableDeclaration[62133-62145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62133-62204]:Block[62147-62218]"
    }, {
      "left" : "return getFragment(calendar, fragment, Calendar.MILLISECOND);",
      "right" : "return getFragment(calendar, fragment, Calendar.MILLISECOND);",
      "info" : "ReturnStatement[62139-62200]:ReturnStatement[62153-62214]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[64062-64068]:Modifier[64076-64082]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[64069-64075]:Modifier[64083-64089]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[64076-64080]:PrimitiveType[64090-64094]"
    }, {
      "left" : "getFragmentInSeconds",
      "right" : "getFragmentInSeconds",
      "info" : "SimpleName[64081-64101]:SimpleName[64095-64115]"
    }, {
      "left" : "Calendar calendar",
      "right" : "Calendar calendar",
      "info" : "SingleVariableDeclaration[64102-64119]:SingleVariableDeclaration[64116-64133]"
    }, {
      "left" : "int fragment",
      "right" : "int fragment",
      "info" : "SingleVariableDeclaration[64121-64133]:SingleVariableDeclaration[64135-64147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64135-64207]:Block[64149-64221]"
    }, {
      "left" : "return getFragment(calendar, fragment, Calendar.SECOND);",
      "right" : "return getFragment(calendar, fragment, Calendar.SECOND);",
      "info" : "ReturnStatement[64145-64201]:ReturnStatement[64159-64215]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[66124-66130]:Modifier[66138-66144]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[66131-66137]:Modifier[66145-66151]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[66138-66142]:PrimitiveType[66152-66156]"
    }, {
      "left" : "getFragmentInMinutes",
      "right" : "getFragmentInMinutes",
      "info" : "SimpleName[66143-66163]:SimpleName[66157-66177]"
    }, {
      "left" : "Calendar calendar",
      "right" : "Calendar calendar",
      "info" : "SingleVariableDeclaration[66164-66181]:SingleVariableDeclaration[66178-66195]"
    }, {
      "left" : "int fragment",
      "right" : "int fragment",
      "info" : "SingleVariableDeclaration[66183-66195]:SingleVariableDeclaration[66197-66209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66197-66269]:Block[66211-66283]"
    }, {
      "left" : "return getFragment(calendar, fragment, Calendar.MINUTE);",
      "right" : "return getFragment(calendar, fragment, Calendar.MINUTE);",
      "info" : "ReturnStatement[66207-66263]:ReturnStatement[66221-66277]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[68161-68167]:Modifier[68175-68181]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[68168-68174]:Modifier[68182-68188]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[68175-68179]:PrimitiveType[68189-68193]"
    }, {
      "left" : "getFragmentInHours",
      "right" : "getFragmentInHours",
      "info" : "SimpleName[68180-68198]:SimpleName[68194-68212]"
    }, {
      "left" : "Calendar calendar",
      "right" : "Calendar calendar",
      "info" : "SingleVariableDeclaration[68199-68216]:SingleVariableDeclaration[68213-68230]"
    }, {
      "left" : "int fragment",
      "right" : "int fragment",
      "info" : "SingleVariableDeclaration[68218-68230]:SingleVariableDeclaration[68232-68244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68232-68309]:Block[68246-68323]"
    }, {
      "left" : "return getFragment(calendar, fragment, Calendar.HOUR_OF_DAY);",
      "right" : "return getFragment(calendar, fragment, Calendar.HOUR_OF_DAY);",
      "info" : "ReturnStatement[68242-68303]:ReturnStatement[68256-68317]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[70237-70243]:Modifier[70251-70257]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[70244-70250]:Modifier[70258-70264]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[70251-70255]:PrimitiveType[70265-70269]"
    }, {
      "left" : "getFragmentInDays",
      "right" : "getFragmentInDays",
      "info" : "SimpleName[70256-70273]:SimpleName[70270-70287]"
    }, {
      "left" : "Calendar calendar",
      "right" : "Calendar calendar",
      "info" : "SingleVariableDeclaration[70274-70291]:SingleVariableDeclaration[70288-70305]"
    }, {
      "left" : "int fragment",
      "right" : "int fragment",
      "info" : "SingleVariableDeclaration[70293-70305]:SingleVariableDeclaration[70307-70319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70307-70384]:Block[70321-70398]"
    }, {
      "left" : "return getFragment(calendar, fragment, Calendar.DAY_OF_YEAR);",
      "right" : "return getFragment(calendar, fragment, Calendar.DAY_OF_YEAR);",
      "info" : "ReturnStatement[70317-70378]:ReturnStatement[70331-70392]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[70838-70845]:Modifier[70852-70859]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[70846-70852]:Modifier[70860-70866]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[70853-70857]:PrimitiveType[70867-70871]"
    }, {
      "left" : "getFragment",
      "right" : "getFragment",
      "info" : "SimpleName[70858-70869]:SimpleName[70872-70883]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[70870-70879]:SingleVariableDeclaration[70884-70893]"
    }, {
      "left" : "int fragment",
      "right" : "int fragment",
      "info" : "SingleVariableDeclaration[70881-70893]:SingleVariableDeclaration[70895-70907]"
    }, {
      "left" : "int unit",
      "right" : "int unit",
      "info" : "SingleVariableDeclaration[70895-70903]:SingleVariableDeclaration[70909-70917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70905-71165]:Block[70919-71179]"
    }, {
      "left" : "if(date == null)",
      "right" : "if(date == null)",
      "info" : "IfStatement[70915-71021]:IfStatement[70929-71035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70932-71021]:Block[70946-71035]"
    }, {
      "left" : "throw  new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw  new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[70946-71011]:ThrowStatement[70960-71025]"
    }, {
      "left" : "Calendar calendar = Calendar.getInstance();",
      "right" : "Calendar calendar = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[71030-71073]:VariableDeclarationStatement[71044-71087]"
    }, {
      "left" : "calendar.setTime(date);",
      "right" : "calendar.setTime(date);",
      "info" : "ExpressionStatement[71082-71105]:ExpressionStatement[71096-71119]"
    }, {
      "left" : "return getFragment(calendar, fragment, unit);",
      "right" : "return getFragment(calendar, fragment, unit);",
      "info" : "ReturnStatement[71114-71159]:ReturnStatement[71128-71173]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[71635-71642]:Modifier[71649-71656]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[71643-71649]:Modifier[71657-71663]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[71650-71654]:PrimitiveType[71664-71668]"
    }, {
      "left" : "getFragment",
      "right" : "getFragment",
      "info" : "SimpleName[71655-71666]:SimpleName[71669-71680]"
    }, {
      "left" : "Calendar calendar",
      "right" : "Calendar calendar",
      "info" : "SingleVariableDeclaration[71667-71684]:SingleVariableDeclaration[71681-71698]"
    }, {
      "left" : "int fragment",
      "right" : "int fragment",
      "info" : "SingleVariableDeclaration[71686-71698]:SingleVariableDeclaration[71700-71712]"
    }, {
      "left" : "int unit",
      "right" : "int unit",
      "info" : "SingleVariableDeclaration[71700-71708]:SingleVariableDeclaration[71714-71722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71710-73426]:Block[71724-73440]"
    }, {
      "left" : "if(calendar == null)",
      "right" : "if(calendar == null)",
      "info" : "IfStatement[71720-71831]:IfStatement[71734-71845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71741-71831]:Block[71755-71845]"
    }, {
      "left" : "throw  new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw  new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[71755-71820]:ThrowStatement[71769-71834]"
    }, {
      "left" : "long millisPerUnit = getMillisPerUnit(unit);",
      "right" : "long millisPerUnit = getMillisPerUnit(unit);",
      "info" : "VariableDeclarationStatement[71840-71884]:VariableDeclarationStatement[71854-71898]"
    }, {
      "left" : "long result = 0;",
      "right" : "long result = 0;",
      "info" : "VariableDeclarationStatement[71893-71909]:VariableDeclarationStatement[71907-71923]"
    }, {
      "left" : "switch (fragment) {\n            case Calendar.YEAR:\n                result += (calendar.get(Calendar.DAY_OF_YEAR) * MILLIS_PER_DAY) / millisPerUnit;\n                break;\n            case Calendar.MONTH:\n                result += (calendar.get(Calendar.DAY_OF_MONTH) * MILLIS_PER_DAY) / millisPerUnit;\n                break;\n        }",
      "right" : "switch (fragment) {\n            case Calendar.YEAR:\n                result += (calendar.get(Calendar.DAY_OF_YEAR) * MILLIS_PER_DAY) / millisPerUnit;\n                break;\n            case Calendar.MONTH:\n                result += (calendar.get(Calendar.DAY_OF_MONTH) * MILLIS_PER_DAY) / millisPerUnit;\n                break;\n        }",
      "info" : "SwitchStatement[71994-72329]:SwitchStatement[72008-72343]"
    }, {
      "left" : "case Calendar.YEAR:",
      "right" : "case Calendar.YEAR:",
      "info" : "SwitchCase[72026-72045]:SwitchCase[72040-72059]"
    }, {
      "left" : "result += (calendar.get(Calendar.DAY_OF_YEAR) * MILLIS_PER_DAY) / millisPerUnit;",
      "right" : "result += (calendar.get(Calendar.DAY_OF_YEAR) * MILLIS_PER_DAY) / millisPerUnit;",
      "info" : "ExpressionStatement[72062-72142]:ExpressionStatement[72076-72156]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[72159-72165]:BreakStatement[72173-72179]"
    }, {
      "left" : "case Calendar.MONTH:",
      "right" : "case Calendar.MONTH:",
      "info" : "SwitchCase[72178-72198]:SwitchCase[72192-72212]"
    }, {
      "left" : "result += (calendar.get(Calendar.DAY_OF_MONTH) * MILLIS_PER_DAY) / millisPerUnit;",
      "right" : "result += (calendar.get(Calendar.DAY_OF_MONTH) * MILLIS_PER_DAY) / millisPerUnit;",
      "info" : "ExpressionStatement[72215-72296]:ExpressionStatement[72229-72310]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[72313-72319]:BreakStatement[72327-72333]"
    }, {
      "left" : "switch (fragment) {\n            // Number of days already calculated for these cases\n            case Calendar.YEAR:\n            case Calendar.MONTH:\n            \n            // The rest of the valid cases\n            case Calendar.DAY_OF_YEAR:\n            case Calendar.DATE:\n                result += (calendar.get(Calendar.HOUR_OF_DAY) * MILLIS_PER_HOUR) / millisPerUnit;\n                //$FALL-THROUGH$\n            case Calendar.HOUR_OF_DAY:\n                result += (calendar.get(Calendar.MINUTE) * MILLIS_PER_MINUTE) / millisPerUnit;\n                //$FALL-THROUGH$\n            case Calendar.MINUTE:\n                result += (calendar.get(Calendar.SECOND) * MILLIS_PER_SECOND) / millisPerUnit;\n                //$FALL-THROUGH$\n            case Calendar.SECOND:\n                result += (calendar.get(Calendar.MILLISECOND) * 1) / millisPerUnit;\n                break;\n            case Calendar.MILLISECOND: break;//never useful\n                default: throw new IllegalArgumentException(\"The fragment \" + fragment + \" is not supported\");\n        }",
      "right" : "switch (fragment) {\n            // Number of days already calculated for these cases\n            case Calendar.YEAR:\n            case Calendar.MONTH:\n            \n            // The rest of the valid cases\n            case Calendar.DAY_OF_YEAR:\n            case Calendar.DATE:\n                result += (calendar.get(Calendar.HOUR_OF_DAY) * MILLIS_PER_HOUR) / millisPerUnit;\n                //$FALL-THROUGH$\n            case Calendar.HOUR_OF_DAY:\n                result += (calendar.get(Calendar.MINUTE) * MILLIS_PER_MINUTE) / millisPerUnit;\n                //$FALL-THROUGH$\n            case Calendar.MINUTE:\n                result += (calendar.get(Calendar.SECOND) * MILLIS_PER_SECOND) / millisPerUnit;\n                //$FALL-THROUGH$\n            case Calendar.SECOND:\n                result += (calendar.get(Calendar.MILLISECOND) * 1) / millisPerUnit;\n                break;\n            case Calendar.MILLISECOND: break;//never useful\n                default: throw new IllegalArgumentException(\"The fragment \" + fragment + \" is not supported\");\n        }",
      "info" : "SwitchStatement[72339-73397]:SwitchStatement[72353-73411]"
    }, {
      "left" : "case Calendar.YEAR:",
      "right" : "case Calendar.YEAR:",
      "info" : "SwitchCase[72436-72455]:SwitchCase[72450-72469]"
    }, {
      "left" : "case Calendar.MONTH:",
      "right" : "case Calendar.MONTH:",
      "info" : "SwitchCase[72468-72488]:SwitchCase[72482-72502]"
    }, {
      "left" : "case Calendar.DAY_OF_YEAR:",
      "right" : "case Calendar.DAY_OF_YEAR:",
      "info" : "SwitchCase[72557-72583]:SwitchCase[72571-72597]"
    }, {
      "left" : "case Calendar.DATE:",
      "right" : "case Calendar.DATE:",
      "info" : "SwitchCase[72596-72615]:SwitchCase[72610-72629]"
    }, {
      "left" : "result += (calendar.get(Calendar.HOUR_OF_DAY) * MILLIS_PER_HOUR) / millisPerUnit;",
      "right" : "result += (calendar.get(Calendar.HOUR_OF_DAY) * MILLIS_PER_HOUR) / millisPerUnit;",
      "info" : "ExpressionStatement[72632-72713]:ExpressionStatement[72646-72727]"
    }, {
      "left" : "case Calendar.HOUR_OF_DAY:",
      "right" : "case Calendar.HOUR_OF_DAY:",
      "info" : "SwitchCase[72759-72785]:SwitchCase[72773-72799]"
    }, {
      "left" : "result += (calendar.get(Calendar.MINUTE) * MILLIS_PER_MINUTE) / millisPerUnit;",
      "right" : "result += (calendar.get(Calendar.MINUTE) * MILLIS_PER_MINUTE) / millisPerUnit;",
      "info" : "ExpressionStatement[72802-72880]:ExpressionStatement[72816-72894]"
    }, {
      "left" : "case Calendar.MINUTE:",
      "right" : "case Calendar.MINUTE:",
      "info" : "SwitchCase[72926-72947]:SwitchCase[72940-72961]"
    }, {
      "left" : "result += (calendar.get(Calendar.SECOND) * MILLIS_PER_SECOND) / millisPerUnit;",
      "right" : "result += (calendar.get(Calendar.SECOND) * MILLIS_PER_SECOND) / millisPerUnit;",
      "info" : "ExpressionStatement[72964-73042]:ExpressionStatement[72978-73056]"
    }, {
      "left" : "case Calendar.SECOND:",
      "right" : "case Calendar.SECOND:",
      "info" : "SwitchCase[73088-73109]:SwitchCase[73102-73123]"
    }, {
      "left" : "result += (calendar.get(Calendar.MILLISECOND) * 1) / millisPerUnit;",
      "right" : "result += (calendar.get(Calendar.MILLISECOND) * 1) / millisPerUnit;",
      "info" : "ExpressionStatement[73126-73193]:ExpressionStatement[73140-73207]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[73210-73216]:BreakStatement[73224-73230]"
    }, {
      "left" : "case Calendar.MILLISECOND:",
      "right" : "case Calendar.MILLISECOND:",
      "info" : "SwitchCase[73229-73255]:SwitchCase[73243-73269]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[73256-73262]:BreakStatement[73270-73276]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[73293-73301]:SwitchCase[73307-73315]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The fragment \" + fragment + \" is not supported\");",
      "right" : "throw new IllegalArgumentException(\"The fragment \" + fragment + \" is not supported\");",
      "info" : "ThrowStatement[73302-73387]:ThrowStatement[73316-73401]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[73406-73420]:ReturnStatement[73420-73434]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[74000-74006]:Modifier[74014-74020]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[74007-74013]:Modifier[74021-74027]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[74014-74021]:PrimitiveType[74028-74035]"
    }, {
      "left" : "truncatedEquals",
      "right" : "truncatedEquals",
      "info" : "SimpleName[74022-74037]:SimpleName[74036-74051]"
    }, {
      "left" : "Calendar cal1",
      "right" : "Calendar cal1",
      "info" : "SingleVariableDeclaration[74038-74051]:SingleVariableDeclaration[74052-74065]"
    }, {
      "left" : "Calendar cal2",
      "right" : "Calendar cal2",
      "info" : "SingleVariableDeclaration[74053-74066]:SingleVariableDeclaration[74067-74080]"
    }, {
      "left" : "int field",
      "right" : "int field",
      "info" : "SingleVariableDeclaration[74068-74077]:SingleVariableDeclaration[74082-74091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74079-74145]:Block[74093-74159]"
    }, {
      "left" : "return truncatedCompareTo(cal1, cal2, field) == 0;",
      "right" : "return truncatedCompareTo(cal1, cal2, field) == 0;",
      "info" : "ReturnStatement[74089-74139]:ReturnStatement[74103-74153]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[74709-74715]:Modifier[74723-74729]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[74716-74722]:Modifier[74730-74736]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[74723-74730]:PrimitiveType[74737-74744]"
    }, {
      "left" : "truncatedEquals",
      "right" : "truncatedEquals",
      "info" : "SimpleName[74731-74746]:SimpleName[74745-74760]"
    }, {
      "left" : "Date date1",
      "right" : "Date date1",
      "info" : "SingleVariableDeclaration[74747-74757]:SingleVariableDeclaration[74761-74771]"
    }, {
      "left" : "Date date2",
      "right" : "Date date2",
      "info" : "SingleVariableDeclaration[74759-74769]:SingleVariableDeclaration[74773-74783]"
    }, {
      "left" : "int field",
      "right" : "int field",
      "info" : "SingleVariableDeclaration[74771-74780]:SingleVariableDeclaration[74785-74794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74782-74850]:Block[74796-74864]"
    }, {
      "left" : "return truncatedCompareTo(date1, date2, field) == 0;",
      "right" : "return truncatedCompareTo(date1, date2, field) == 0;",
      "info" : "ReturnStatement[74792-74844]:ReturnStatement[74806-74858]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[75495-75501]:Modifier[75509-75515]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[75502-75508]:Modifier[75516-75522]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[75509-75512]:PrimitiveType[75523-75526]"
    }, {
      "left" : "truncatedCompareTo",
      "right" : "truncatedCompareTo",
      "info" : "SimpleName[75513-75531]:SimpleName[75527-75545]"
    }, {
      "left" : "Calendar cal1",
      "right" : "Calendar cal1",
      "info" : "SingleVariableDeclaration[75532-75545]:SingleVariableDeclaration[75546-75559]"
    }, {
      "left" : "Calendar cal2",
      "right" : "Calendar cal2",
      "info" : "SingleVariableDeclaration[75547-75560]:SingleVariableDeclaration[75561-75574]"
    }, {
      "left" : "int field",
      "right" : "int field",
      "info" : "SingleVariableDeclaration[75562-75571]:SingleVariableDeclaration[75576-75585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75573-75747]:Block[75587-75761]"
    }, {
      "left" : "Calendar truncatedCal1 = truncate(cal1, field);",
      "right" : "Calendar truncatedCal1 = truncate(cal1, field);",
      "info" : "VariableDeclarationStatement[75583-75630]:VariableDeclarationStatement[75597-75644]"
    }, {
      "left" : "Calendar truncatedCal2 = truncate(cal2, field);",
      "right" : "Calendar truncatedCal2 = truncate(cal2, field);",
      "info" : "VariableDeclarationStatement[75639-75686]:VariableDeclarationStatement[75653-75700]"
    }, {
      "left" : "return truncatedCal1.compareTo(truncatedCal2);",
      "right" : "return truncatedCal1.compareTo(truncatedCal2);",
      "info" : "ReturnStatement[75695-75741]:ReturnStatement[75709-75755]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[76378-76384]:Modifier[76392-76398]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[76385-76391]:Modifier[76399-76405]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[76392-76395]:PrimitiveType[76406-76409]"
    }, {
      "left" : "truncatedCompareTo",
      "right" : "truncatedCompareTo",
      "info" : "SimpleName[76396-76414]:SimpleName[76410-76428]"
    }, {
      "left" : "Date date1",
      "right" : "Date date1",
      "info" : "SingleVariableDeclaration[76415-76425]:SingleVariableDeclaration[76429-76439]"
    }, {
      "left" : "Date date2",
      "right" : "Date date2",
      "info" : "SingleVariableDeclaration[76427-76437]:SingleVariableDeclaration[76441-76451]"
    }, {
      "left" : "int field",
      "right" : "int field",
      "info" : "SingleVariableDeclaration[76439-76448]:SingleVariableDeclaration[76453-76462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76450-76622]:Block[76464-76636]"
    }, {
      "left" : "Date truncatedDate1 = truncate(date1, field);",
      "right" : "Date truncatedDate1 = truncate(date1, field);",
      "info" : "VariableDeclarationStatement[76460-76505]:VariableDeclarationStatement[76474-76519]"
    }, {
      "left" : "Date truncatedDate2 = truncate(date2, field);",
      "right" : "Date truncatedDate2 = truncate(date2, field);",
      "info" : "VariableDeclarationStatement[76514-76559]:VariableDeclarationStatement[76528-76573]"
    }, {
      "left" : "return truncatedDate1.compareTo(truncatedDate2);",
      "right" : "return truncatedDate1.compareTo(truncatedDate2);",
      "info" : "ReturnStatement[76568-76616]:ReturnStatement[76582-76630]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[76946-76953]:Modifier[76960-76967]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[76954-76960]:Modifier[76968-76974]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[76961-76965]:PrimitiveType[76975-76979]"
    }, {
      "left" : "getMillisPerUnit",
      "right" : "getMillisPerUnit",
      "info" : "SimpleName[76966-76982]:SimpleName[76980-76996]"
    }, {
      "left" : "int unit",
      "right" : "int unit",
      "info" : "SingleVariableDeclaration[76983-76991]:SingleVariableDeclaration[76997-77005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76993-77746]:Block[77007-77760]"
    }, {
      "left" : "long result = Long.MAX_VALUE;",
      "right" : "long result = Long.MAX_VALUE;",
      "info" : "VariableDeclarationStatement[77003-77032]:VariableDeclarationStatement[77017-77046]"
    }, {
      "left" : "switch (unit) {\n            case Calendar.DAY_OF_YEAR:\n            case Calendar.DATE:\n                result = MILLIS_PER_DAY;\n                break;\n            case Calendar.HOUR_OF_DAY:\n                result = MILLIS_PER_HOUR;\n                break;\n            case Calendar.MINUTE:\n                result = MILLIS_PER_MINUTE;\n                break;\n            case Calendar.SECOND:\n                result = MILLIS_PER_SECOND;\n                break;\n            case Calendar.MILLISECOND:\n                result = 1;\n                break;\n            default: throw new IllegalArgumentException(\"The unit \" + unit + \" cannot be represented is milleseconds\");\n        }",
      "right" : "switch (unit) {\n            case Calendar.DAY_OF_YEAR:\n            case Calendar.DATE:\n                result = MILLIS_PER_DAY;\n                break;\n            case Calendar.HOUR_OF_DAY:\n                result = MILLIS_PER_HOUR;\n                break;\n            case Calendar.MINUTE:\n                result = MILLIS_PER_MINUTE;\n                break;\n            case Calendar.SECOND:\n                result = MILLIS_PER_SECOND;\n                break;\n            case Calendar.MILLISECOND:\n                result = 1;\n                break;\n            default: throw new IllegalArgumentException(\"The unit \" + unit + \" cannot be represented is milleseconds\");\n        }",
      "info" : "SwitchStatement[77041-77717]:SwitchStatement[77055-77731]"
    }, {
      "left" : "case Calendar.DAY_OF_YEAR:",
      "right" : "case Calendar.DAY_OF_YEAR:",
      "info" : "SwitchCase[77069-77095]:SwitchCase[77083-77109]"
    }, {
      "left" : "case Calendar.DATE:",
      "right" : "case Calendar.DATE:",
      "info" : "SwitchCase[77108-77127]:SwitchCase[77122-77141]"
    }, {
      "left" : "result = MILLIS_PER_DAY;",
      "right" : "result = MILLIS_PER_DAY;",
      "info" : "ExpressionStatement[77144-77168]:ExpressionStatement[77158-77182]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[77185-77191]:BreakStatement[77199-77205]"
    }, {
      "left" : "case Calendar.HOUR_OF_DAY:",
      "right" : "case Calendar.HOUR_OF_DAY:",
      "info" : "SwitchCase[77204-77230]:SwitchCase[77218-77244]"
    }, {
      "left" : "result = MILLIS_PER_HOUR;",
      "right" : "result = MILLIS_PER_HOUR;",
      "info" : "ExpressionStatement[77247-77272]:ExpressionStatement[77261-77286]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[77289-77295]:BreakStatement[77303-77309]"
    }, {
      "left" : "case Calendar.MINUTE:",
      "right" : "case Calendar.MINUTE:",
      "info" : "SwitchCase[77308-77329]:SwitchCase[77322-77343]"
    }, {
      "left" : "result = MILLIS_PER_MINUTE;",
      "right" : "result = MILLIS_PER_MINUTE;",
      "info" : "ExpressionStatement[77346-77373]:ExpressionStatement[77360-77387]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[77390-77396]:BreakStatement[77404-77410]"
    }, {
      "left" : "case Calendar.SECOND:",
      "right" : "case Calendar.SECOND:",
      "info" : "SwitchCase[77409-77430]:SwitchCase[77423-77444]"
    }, {
      "left" : "result = MILLIS_PER_SECOND;",
      "right" : "result = MILLIS_PER_SECOND;",
      "info" : "ExpressionStatement[77447-77474]:ExpressionStatement[77461-77488]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[77491-77497]:BreakStatement[77505-77511]"
    }, {
      "left" : "case Calendar.MILLISECOND:",
      "right" : "case Calendar.MILLISECOND:",
      "info" : "SwitchCase[77510-77536]:SwitchCase[77524-77550]"
    }, {
      "left" : "result = 1;",
      "right" : "result = 1;",
      "info" : "ExpressionStatement[77553-77564]:ExpressionStatement[77567-77578]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[77581-77587]:BreakStatement[77595-77601]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[77600-77608]:SwitchCase[77614-77622]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The unit \" + unit + \" cannot be represented is milleseconds\");",
      "right" : "throw new IllegalArgumentException(\"The unit \" + unit + \" cannot be represented is milleseconds\");",
      "info" : "ThrowStatement[77609-77707]:ThrowStatement[77623-77721]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[77726-77740]:ReturnStatement[77740-77754]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[77797-77803]:Modifier[77811-77817]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[77804-77809]:TYPE_DECLARATION_KIND[77818-77823]"
    }, {
      "left" : "DateIterator",
      "right" : "DateIterator",
      "info" : "SimpleName[77810-77822]:SimpleName[77824-77836]"
    }, {
      "left" : "DateIterator",
      "right" : "DateIterator",
      "info" : "SimpleName[78165-78177]:SimpleName[78179-78191]"
    }, {
      "left" : "Calendar startFinal",
      "right" : "Calendar startFinal",
      "info" : "SingleVariableDeclaration[78178-78197]:SingleVariableDeclaration[78192-78211]"
    }, {
      "left" : "Calendar endFinal",
      "right" : "Calendar endFinal",
      "info" : "SingleVariableDeclaration[78199-78216]:SingleVariableDeclaration[78213-78230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78218-78360]:Block[78232-78374]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[78232-78240]:SuperConstructorInvocation[78246-78254]"
    }, {
      "left" : "this.endFinal = endFinal;",
      "right" : "this.endFinal = endFinal;",
      "info" : "ExpressionStatement[78253-78278]:ExpressionStatement[78267-78292]"
    }, {
      "left" : "spot = startFinal;",
      "right" : "spot = startFinal;",
      "info" : "ExpressionStatement[78291-78309]:ExpressionStatement[78305-78323]"
    }, {
      "left" : "spot.add(Calendar.DATE, -1);",
      "right" : "spot.add(Calendar.DATE, -1);",
      "info" : "ExpressionStatement[78322-78350]:ExpressionStatement[78336-78364]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[78546-78552]:Modifier[78560-78566]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[78553-78560]:PrimitiveType[78567-78574]"
    }, {
      "left" : "hasNext",
      "right" : "hasNext",
      "info" : "SimpleName[78561-78568]:SimpleName[78575-78582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78571-78624]:Block[78585-78638]"
    }, {
      "left" : "return spot.before(endFinal);",
      "right" : "return spot.before(endFinal);",
      "info" : "ReturnStatement[78585-78614]:ReturnStatement[78599-78628]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[78775-78781]:Modifier[78789-78795]"
    }, {
      "left" : "Calendar",
      "right" : "Calendar",
      "info" : "SimpleType[78782-78790]:SimpleType[78796-78804]"
    }, {
      "left" : "next",
      "right" : "next",
      "info" : "SimpleName[78791-78795]:SimpleName[78805-78809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78798-79000]:Block[78812-79014]"
    }, {
      "left" : "if (spot.equals(endFinal))",
      "right" : "if (spot.equals(endFinal))",
      "info" : "IfStatement[78812-78906]:IfStatement[78826-78920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78839-78906]:Block[78853-78920]"
    }, {
      "left" : "throw new NoSuchElementException();",
      "right" : "throw new NoSuchElementException();",
      "info" : "ThrowStatement[78857-78892]:ThrowStatement[78871-78906]"
    }, {
      "left" : "spot.add(Calendar.DATE, 1);",
      "right" : "spot.add(Calendar.DATE, 1);",
      "info" : "ExpressionStatement[78919-78946]:ExpressionStatement[78933-78960]"
    }, {
      "left" : "return (Calendar) spot.clone();",
      "right" : "return (Calendar) spot.clone();",
      "info" : "ReturnStatement[78959-78990]:ReturnStatement[78973-79004]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[79195-79201]:Modifier[79209-79215]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[79202-79206]:PrimitiveType[79216-79220]"
    }, {
      "left" : "remove",
      "right" : "remove",
      "info" : "SimpleName[79207-79213]:SimpleName[79221-79227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79216-79282]:Block[79230-79296]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[79230-79272]:ThrowStatement[79244-79286]"
    } ]
  },
  "interFileMappings" : { }
}