{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "TypeDeclaration[1926-29035]:TypeDeclaration[1926-29100]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[2637-2685]:FieldDeclaration[2637-2685]"
    }, {
      "left" : "private boolean resolved = false;",
      "right" : "private boolean resolved = false;",
      "info" : "FieldDeclaration[2689-2722]:FieldDeclaration[2689-2722]"
    }, {
      "left" : "private JSType resolveResult = null;",
      "right" : "private JSType resolveResult = null;",
      "info" : "FieldDeclaration[2725-2761]:FieldDeclaration[2725-2761]"
    }, {
      "left" : "public static final String UNKNOWN_NAME =\n      \"Unknown class name\";",
      "right" : "public static final String UNKNOWN_NAME =\n      \"Unknown class name\";",
      "info" : "FieldDeclaration[2765-2834]:FieldDeclaration[2765-2834]"
    }, {
      "left" : "public static final String NOT_A_CLASS =\n      \"Not declared as a constructor\";",
      "right" : "public static final String NOT_A_CLASS =\n      \"Not declared as a constructor\";",
      "info" : "FieldDeclaration[2838-2917]:FieldDeclaration[2838-2917]"
    }, {
      "left" : "public static final String NOT_A_TYPE =\n      \"Not declared as a type name\";",
      "right" : "public static final String NOT_A_TYPE =\n      \"Not declared as a type name\";",
      "info" : "FieldDeclaration[2921-2997]:FieldDeclaration[2921-2997]"
    }, {
      "left" : "public static final String EMPTY_TYPE_COMPONENT =\n      \"Named type with empty name component\";",
      "right" : "public static final String EMPTY_TYPE_COMPONENT =\n      \"Named type with empty name component\";",
      "info" : "FieldDeclaration[3001-3096]:FieldDeclaration[3001-3096]"
    }, {
      "left" : "static final Comparator<JSType> ALPHA = new Comparator<JSType>() {\n    public int compare(JSType t1, JSType t2) {\n      return t1.toString().compareTo(t2.toString());\n    }\n  };",
      "right" : "static final Comparator<JSType> ALPHA = new Comparator<JSType>() {\n    public int compare(JSType t1, JSType t2) {\n      return t1.toString().compareTo(t2.toString());\n    }\n  };",
      "info" : "FieldDeclaration[3100-3488]:FieldDeclaration[3100-3488]"
    }, {
      "left" : "public int compare(JSType t1, JSType t2)",
      "right" : "public int compare(JSType t1, JSType t2)",
      "info" : "MethodDeclaration[3382-3483]:MethodDeclaration[3382-3483]"
    }, {
      "left" : "public static final int ENUMDECL = 1;",
      "right" : "public static final int ENUMDECL = 1;",
      "info" : "FieldDeclaration[3538-3575]:FieldDeclaration[3538-3575]"
    }, {
      "left" : "public static final int NOT_ENUMDECL = 0;",
      "right" : "public static final int NOT_ENUMDECL = 0;",
      "info" : "FieldDeclaration[3578-3619]:FieldDeclaration[3578-3619]"
    }, {
      "left" : "final JSTypeRegistry registry;",
      "right" : "final JSTypeRegistry registry;",
      "info" : "FieldDeclaration[3623-3653]:FieldDeclaration[3623-3653]"
    }, {
      "left" : "JSType(JSTypeRegistry registry)",
      "right" : "JSType(JSTypeRegistry registry)",
      "info" : "MethodDeclaration[3657-3724]:MethodDeclaration[3657-3724]"
    }, {
      "left" : "JSType getNativeType(JSTypeNative typeId)",
      "right" : "JSType getNativeType(JSTypeNative typeId)",
      "info" : "MethodDeclaration[3728-3873]:MethodDeclaration[3728-3873]"
    }, {
      "left" : "public JSDocInfo getJSDocInfo()",
      "right" : "public JSDocInfo getJSDocInfo()",
      "info" : "MethodDeclaration[3877-4109]:MethodDeclaration[3877-4109]"
    }, {
      "left" : "void forgiveUnknownNames()",
      "right" : "void forgiveUnknownNames()",
      "info" : "MethodDeclaration[4113-4316]:MethodDeclaration[4113-4316]"
    }, {
      "left" : "public boolean isNoType()",
      "right" : "public boolean isNoType()",
      "info" : "MethodDeclaration[4320-4369]:MethodDeclaration[4320-4369]"
    }, {
      "left" : "public boolean isNoObjectType()",
      "right" : "public boolean isNoObjectType()",
      "info" : "MethodDeclaration[4373-4428]:MethodDeclaration[4373-4428]"
    }, {
      "left" : "public final boolean isEmptyType()",
      "right" : "public final boolean isEmptyType()",
      "info" : "MethodDeclaration[4432-4515]:MethodDeclaration[4432-4515]"
    }, {
      "left" : "public boolean isNumberObjectType()",
      "right" : "public boolean isNumberObjectType()",
      "info" : "MethodDeclaration[4519-4578]:MethodDeclaration[4519-4578]"
    }, {
      "left" : "public boolean isNumberValueType()",
      "right" : "public boolean isNumberValueType()",
      "info" : "MethodDeclaration[4582-4640]:MethodDeclaration[4582-4640]"
    }, {
      "left" : "public boolean isFunctionPrototypeType()",
      "right" : "public boolean isFunctionPrototypeType()",
      "info" : "MethodDeclaration[4644-4762]:MethodDeclaration[4644-4762]"
    }, {
      "left" : "public boolean isStringObjectType()",
      "right" : "public boolean isStringObjectType()",
      "info" : "MethodDeclaration[4766-4825]:MethodDeclaration[4766-4825]"
    }, {
      "left" : "boolean isTheObjectType()",
      "right" : "boolean isTheObjectType()",
      "info" : "MethodDeclaration[4829-4878]:MethodDeclaration[4829-4878]"
    }, {
      "left" : "public boolean isStringValueType()",
      "right" : "public boolean isStringValueType()",
      "info" : "MethodDeclaration[4882-4940]:MethodDeclaration[4882-4940]"
    }, {
      "left" : "public final boolean isString()",
      "right" : "public final boolean isString()",
      "info" : "MethodDeclaration[4944-5194]:MethodDeclaration[4944-5194]"
    }, {
      "left" : "public final boolean isNumber()",
      "right" : "public final boolean isNumber()",
      "info" : "MethodDeclaration[5198-5448]:MethodDeclaration[5198-5448]"
    }, {
      "left" : "public boolean isArrayType()",
      "right" : "public boolean isArrayType()",
      "info" : "MethodDeclaration[5452-5504]:MethodDeclaration[5452-5504]"
    }, {
      "left" : "public boolean isBooleanObjectType()",
      "right" : "public boolean isBooleanObjectType()",
      "info" : "MethodDeclaration[5508-5568]:MethodDeclaration[5508-5568]"
    }, {
      "left" : "public boolean isBooleanValueType()",
      "right" : "public boolean isBooleanValueType()",
      "info" : "MethodDeclaration[5572-5631]:MethodDeclaration[5572-5631]"
    }, {
      "left" : "public boolean isRegexpType()",
      "right" : "public boolean isRegexpType()",
      "info" : "MethodDeclaration[5635-5688]:MethodDeclaration[5635-5688]"
    }, {
      "left" : "public boolean isDateType()",
      "right" : "public boolean isDateType()",
      "info" : "MethodDeclaration[5692-5743]:MethodDeclaration[5692-5743]"
    }, {
      "left" : "public boolean isNullType()",
      "right" : "public boolean isNullType()",
      "info" : "MethodDeclaration[5747-5798]:MethodDeclaration[5747-5798]"
    }, {
      "left" : "public boolean isVoidType()",
      "right" : "public boolean isVoidType()",
      "info" : "MethodDeclaration[5802-5853]:MethodDeclaration[5802-5853]"
    }, {
      "left" : "public boolean isAllType()",
      "right" : "public boolean isAllType()",
      "info" : "MethodDeclaration[5857-5907]:MethodDeclaration[5857-5907]"
    }, {
      "left" : "public boolean isUnknownType()",
      "right" : "public boolean isUnknownType()",
      "info" : "MethodDeclaration[5911-5965]:MethodDeclaration[5911-5965]"
    }, {
      "left" : "public boolean isCheckedUnknownType()",
      "right" : "public boolean isCheckedUnknownType()",
      "info" : "MethodDeclaration[5969-6030]:MethodDeclaration[5969-6030]"
    }, {
      "left" : "public boolean isUnionType()",
      "right" : "public boolean isUnionType()",
      "info" : "MethodDeclaration[6034-6086]:MethodDeclaration[6034-6086]"
    }, {
      "left" : "public boolean isFunctionType()",
      "right" : "public boolean isFunctionType()",
      "info" : "MethodDeclaration[6090-6145]:MethodDeclaration[6090-6145]"
    }, {
      "left" : "public boolean isEnumElementType()",
      "right" : "public boolean isEnumElementType()",
      "info" : "MethodDeclaration[6149-6207]:MethodDeclaration[6149-6207]"
    }, {
      "left" : "public boolean isEnumType()",
      "right" : "public boolean isEnumType()",
      "info" : "MethodDeclaration[6211-6262]:MethodDeclaration[6211-6262]"
    }, {
      "left" : "boolean isNamedType()",
      "right" : "boolean isNamedType()",
      "info" : "MethodDeclaration[6266-6311]:MethodDeclaration[6266-6311]"
    }, {
      "left" : "public boolean isRecordType()",
      "right" : "public boolean isRecordType()",
      "info" : "MethodDeclaration[6315-6368]:MethodDeclaration[6315-6368]"
    }, {
      "left" : "public boolean isTemplateType()",
      "right" : "public boolean isTemplateType()",
      "info" : "MethodDeclaration[6372-6427]:MethodDeclaration[6372-6427]"
    }, {
      "left" : "public boolean isObject()",
      "right" : "public boolean isObject()",
      "info" : "MethodDeclaration[6431-6606]:MethodDeclaration[6431-6606]"
    }, {
      "left" : "public boolean isConstructor()",
      "right" : "public boolean isConstructor()",
      "info" : "MethodDeclaration[6610-6796]:MethodDeclaration[6610-6796]"
    }, {
      "left" : "public boolean isNominalType()",
      "right" : "public boolean isNominalType()",
      "info" : "MethodDeclaration[6800-6955]:MethodDeclaration[6800-6955]"
    }, {
      "left" : "public boolean isInstanceType()",
      "right" : "public boolean isInstanceType()",
      "info" : "MethodDeclaration[6959-7092]:MethodDeclaration[6959-7092]"
    }, {
      "left" : "public boolean isInterface()",
      "right" : "public boolean isInterface()",
      "info" : "MethodDeclaration[7096-7279]:MethodDeclaration[7096-7279]"
    }, {
      "left" : "public boolean isOrdinaryFunction()",
      "right" : "public boolean isOrdinaryFunction()",
      "info" : "MethodDeclaration[7283-7481]:MethodDeclaration[7283-7481]"
    }, {
      "left" : "public boolean isEquivalentTo(JSType jsType)",
      "right" : "public boolean isEquivalentTo(JSType jsType)",
      "info" : "MethodDeclaration[7485-7987]:MethodDeclaration[7485-7987]"
    }, {
      "left" : "public static boolean isEquivalent(JSType typeA, JSType typeB)",
      "right" : "public static boolean isEquivalent(JSType typeA, JSType typeB)",
      "info" : "MethodDeclaration[7991-8159]:MethodDeclaration[7991-8159]"
    }, {
      "left" : "public boolean equals(Object jsType)",
      "right" : "public boolean equals(Object jsType)",
      "info" : "MethodDeclaration[8163-8306]:MethodDeclaration[8163-8306]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[8310-8391]:MethodDeclaration[8310-8391]"
    }, {
      "left" : "public final boolean matchesInt32Context()",
      "right" : "public final boolean matchesInt32Context()",
      "info" : "MethodDeclaration[8395-8759]:MethodDeclaration[8395-8759]"
    }, {
      "left" : "public final boolean matchesUint32Context()",
      "right" : "public final boolean matchesUint32Context()",
      "info" : "MethodDeclaration[8763-9027]:MethodDeclaration[8763-9027]"
    }, {
      "left" : "public boolean matchesNumberContext()",
      "right" : "public boolean matchesNumberContext()",
      "info" : "MethodDeclaration[9031-9242]:MethodDeclaration[9031-9242]"
    }, {
      "left" : "public boolean matchesStringContext()",
      "right" : "public boolean matchesStringContext()",
      "info" : "MethodDeclaration[9246-9705]:MethodDeclaration[9246-9705]"
    }, {
      "left" : "public boolean matchesObjectContext()",
      "right" : "public boolean matchesObjectContext()",
      "info" : "MethodDeclaration[9709-10110]:MethodDeclaration[9709-10110]"
    }, {
      "left" : "public JSType findPropertyType(String propertyName)",
      "right" : "public JSType findPropertyType(String propertyName)",
      "info" : "MethodDeclaration[10114-10703]:MethodDeclaration[10114-10703]"
    }, {
      "left" : "public boolean canBeCalled()",
      "right" : "public boolean canBeCalled()",
      "info" : "MethodDeclaration[10707-10946]:MethodDeclaration[10707-10946]"
    }, {
      "left" : "public boolean canAssignTo(JSType that)",
      "right" : "public boolean canAssignTo(JSType that)",
      "info" : "MethodDeclaration[10950-11294]:MethodDeclaration[10950-11294]"
    }, {
      "left" : "public JSType autoboxesTo()",
      "right" : "public JSType autoboxesTo()",
      "info" : "MethodDeclaration[11298-11495]:MethodDeclaration[11298-11495]"
    }, {
      "left" : "public JSType unboxesTo()",
      "right" : "public JSType unboxesTo()",
      "info" : "MethodDeclaration[11499-11686]:MethodDeclaration[11499-11686]"
    }, {
      "left" : "public ObjectType toObjectType()",
      "right" : "public ObjectType toObjectType()",
      "info" : "MethodDeclaration[11690-12098]:MethodDeclaration[11690-12098]"
    }, {
      "left" : "public final ObjectType dereference()",
      "right" : "public final ObjectType dereference()",
      "info" : "MethodDeclaration[12102-12475]:MethodDeclaration[12102-12475]"
    }, {
      "left" : "public final boolean canTestForEqualityWith(JSType that)",
      "right" : "public final boolean canTestForEqualityWith(JSType that)",
      "info" : "MethodDeclaration[12479-12896]:MethodDeclaration[12479-12896]"
    }, {
      "left" : "public TernaryValue testForEquality(JSType that)",
      "right" : "public TernaryValue testForEquality(JSType that)",
      "info" : "MethodDeclaration[12900-14093]:MethodDeclaration[12900-14093]"
    }, {
      "left" : "public final boolean canTestForShallowEqualityWith(JSType that)",
      "right" : "public final boolean canTestForShallowEqualityWith(JSType that)",
      "info" : "MethodDeclaration[14097-14555]:MethodDeclaration[14097-14555]"
    }, {
      "left" : "public boolean isNullable()",
      "right" : "public boolean isNullable()",
      "info" : "MethodDeclaration[14559-14712]:MethodDeclaration[14559-14712]"
    }, {
      "left" : "public JSType getLeastSupertype(JSType that)",
      "right" : "public JSType getLeastSupertype(JSType that)",
      "info" : "MethodDeclaration[14716-15396]:MethodDeclaration[14716-15396]"
    }, {
      "left" : "static JSType getLeastSupertype(JSType thisType, JSType thatType)",
      "right" : "static JSType getLeastSupertype(JSType thisType, JSType thatType)",
      "info" : "MethodDeclaration[15400-15865]:MethodDeclaration[15400-15865]"
    }, {
      "left" : "public JSType getGreatestSubtype(JSType that)",
      "right" : "public JSType getGreatestSubtype(JSType that)",
      "info" : "MethodDeclaration[15869-16547]:MethodDeclaration[15869-16547]"
    }, {
      "left" : "static JSType getGreatestSubtype(JSType thisType, JSType thatType)",
      "right" : "static JSType getGreatestSubtype(JSType thisType, JSType thatType)",
      "info" : "MethodDeclaration[16551-17778]:MethodDeclaration[16551-17778]"
    }, {
      "left" : "public JSType getRestrictedTypeGivenToBooleanOutcome(boolean outcome)",
      "right" : "public JSType getRestrictedTypeGivenToBooleanOutcome(boolean outcome)",
      "info" : "MethodDeclaration[17782-18622]:MethodDeclaration[17782-18622]"
    }, {
      "left" : "public abstract BooleanLiteralSet getPossibleToBooleanOutcomes();",
      "right" : "public abstract BooleanLiteralSet getPossibleToBooleanOutcomes();",
      "info" : "MethodDeclaration[18626-19444]:MethodDeclaration[18626-19444]"
    }, {
      "left" : "public TypePair getTypesUnderEquality(JSType that)",
      "right" : "public TypePair getTypesUnderEquality(JSType that)",
      "info" : "MethodDeclaration[19448-20565]:MethodDeclaration[19448-20565]"
    }, {
      "left" : "public TypePair getTypesUnderInequality(JSType that)",
      "right" : "public TypePair getTypesUnderInequality(JSType that)",
      "info" : "MethodDeclaration[20569-21705]:MethodDeclaration[20569-21770]"
    }, {
      "left" : "public TypePair getTypesUnderShallowEquality(JSType that)",
      "right" : "public TypePair getTypesUnderShallowEquality(JSType that)",
      "info" : "MethodDeclaration[21709-22261]:MethodDeclaration[21774-22326]"
    }, {
      "left" : "public TypePair getTypesUnderShallowInequality(JSType that)",
      "right" : "public TypePair getTypesUnderShallowInequality(JSType that)",
      "info" : "MethodDeclaration[22265-23249]:MethodDeclaration[22330-23314]"
    }, {
      "left" : "public JSType restrictByNotNullOrUndefined()",
      "right" : "public JSType restrictByNotNullOrUndefined()",
      "info" : "MethodDeclaration[23253-23438]:MethodDeclaration[23318-23503]"
    }, {
      "left" : "public abstract boolean isSubtype(JSType that);",
      "right" : "public abstract boolean isSubtype(JSType that);",
      "info" : "MethodDeclaration[23442-24787]:MethodDeclaration[23507-24852]"
    }, {
      "left" : "public boolean differsFrom(JSType that)",
      "right" : "public boolean differsFrom(JSType that)",
      "info" : "MethodDeclaration[24791-25420]:MethodDeclaration[24856-25485]"
    }, {
      "left" : "static boolean isSubtype(JSType thisType, JSType thatType)",
      "right" : "static boolean isSubtype(JSType thisType, JSType thatType)",
      "info" : "MethodDeclaration[25424-26220]:MethodDeclaration[25489-26285]"
    }, {
      "left" : "public abstract <T> T visit(Visitor<T> visitor);",
      "right" : "public abstract <T> T visit(Visitor<T> visitor);",
      "info" : "MethodDeclaration[26224-26429]:MethodDeclaration[26289-26494]"
    }, {
      "left" : "public final JSType forceResolve(ErrorReporter t, StaticScope<JSType> scope)",
      "right" : "public final JSType forceResolve(ErrorReporter t, StaticScope<JSType> scope)",
      "info" : "MethodDeclaration[26433-26849]:MethodDeclaration[26498-26914]"
    }, {
      "left" : "public final JSType resolve(ErrorReporter t, StaticScope<JSType> scope)",
      "right" : "public final JSType resolve(ErrorReporter t, StaticScope<JSType> scope)",
      "info" : "MethodDeclaration[26854-27974]:MethodDeclaration[26919-28039]"
    }, {
      "left" : "abstract JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope);",
      "right" : "abstract JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope);",
      "info" : "MethodDeclaration[27978-28085]:MethodDeclaration[28043-28150]"
    }, {
      "left" : "void setResolvedTypeInternal(JSType type)",
      "right" : "void setResolvedTypeInternal(JSType type)",
      "info" : "MethodDeclaration[28089-28183]:MethodDeclaration[28154-28248]"
    }, {
      "left" : "public final boolean isResolved()",
      "right" : "public final boolean isResolved()",
      "info" : "MethodDeclaration[28187-28292]:MethodDeclaration[28252-28357]"
    }, {
      "left" : "public final void clearResolved()",
      "right" : "public final void clearResolved()",
      "info" : "MethodDeclaration[28296-28419]:MethodDeclaration[28361-28484]"
    }, {
      "left" : "static final JSType safeResolve(\n      JSType type, ErrorReporter t, StaticScope<JSType> scope)",
      "right" : "static final JSType safeResolve(\n      JSType type, ErrorReporter t, StaticScope<JSType> scope)",
      "info" : "MethodDeclaration[28423-28638]:MethodDeclaration[28488-28703]"
    }, {
      "left" : "TypePair",
      "right" : "TypePair",
      "info" : "TypeDeclaration[28642-28847]:TypeDeclaration[28707-28912]"
    }, {
      "left" : "public final JSType typeA;",
      "right" : "public final JSType typeA;",
      "info" : "FieldDeclaration[28677-28703]:FieldDeclaration[28742-28768]"
    }, {
      "left" : "public final JSType typeB;",
      "right" : "public final JSType typeB;",
      "info" : "FieldDeclaration[28708-28734]:FieldDeclaration[28773-28799]"
    }, {
      "left" : "public TypePair(JSType typeA, JSType typeB)",
      "right" : "public TypePair(JSType typeA, JSType typeB)",
      "info" : "MethodDeclaration[28740-28843]:MethodDeclaration[28805-28908]"
    }, {
      "left" : "public String toDebugHashCodeString()",
      "right" : "public String toDebugHashCodeString()",
      "info" : "MethodDeclaration[28851-29033]:MethodDeclaration[28916-29098]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3423-3483]:Block[3423-3483]"
    }, {
      "left" : "return t1.toString().compareTo(t2.toString());",
      "right" : "return t1.toString().compareTo(t2.toString());",
      "info" : "ReturnStatement[3431-3477]:ReturnStatement[3431-3477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3689-3724]:Block[3689-3724]"
    }, {
      "left" : "this.registry = registry;",
      "right" : "this.registry = registry;",
      "info" : "ExpressionStatement[3695-3720]:ExpressionStatement[3695-3720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3825-3873]:Block[3825-3873]"
    }, {
      "left" : "return registry.getNativeType(typeId);",
      "right" : "return registry.getNativeType(typeId);",
      "info" : "ReturnStatement[3831-3869]:ReturnStatement[3831-3869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4087-4109]:Block[4087-4109]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[4093-4105]:ReturnStatement[4093-4105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4314-4316]:Block[4314-4316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4346-4369]:Block[4346-4369]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4352-4365]:ReturnStatement[4352-4365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4405-4428]:Block[4405-4428]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4411-4424]:ReturnStatement[4411-4424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4467-4515]:Block[4467-4515]"
    }, {
      "left" : "return isNoType() || isNoObjectType();",
      "right" : "return isNoType() || isNoObjectType();",
      "info" : "ReturnStatement[4473-4511]:ReturnStatement[4473-4511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4555-4578]:Block[4555-4578]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4561-4574]:ReturnStatement[4561-4574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4617-4640]:Block[4617-4640]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4623-4636]:ReturnStatement[4623-4636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4739-4762]:Block[4739-4762]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4745-4758]:ReturnStatement[4745-4758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4802-4825]:Block[4802-4825]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4808-4821]:ReturnStatement[4808-4821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4855-4878]:Block[4855-4878]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4861-4874]:ReturnStatement[4861-4874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4917-4940]:Block[4917-4940]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4923-4936]:ReturnStatement[4923-4936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5096-5194]:Block[5096-5194]"
    }, {
      "left" : "return this.isSubtype(\n        getNativeType(JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE));",
      "right" : "return this.isSubtype(\n        getNativeType(JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE));",
      "info" : "ReturnStatement[5102-5190]:ReturnStatement[5102-5190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5350-5448]:Block[5350-5448]"
    }, {
      "left" : "return this.isSubtype(\n        getNativeType(JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE));",
      "right" : "return this.isSubtype(\n        getNativeType(JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE));",
      "info" : "ReturnStatement[5356-5444]:ReturnStatement[5356-5444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5481-5504]:Block[5481-5504]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5487-5500]:ReturnStatement[5487-5500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5545-5568]:Block[5545-5568]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5551-5564]:ReturnStatement[5551-5564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5608-5631]:Block[5608-5631]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5614-5627]:ReturnStatement[5614-5627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5665-5688]:Block[5665-5688]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5671-5684]:ReturnStatement[5671-5684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5720-5743]:Block[5720-5743]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5726-5739]:ReturnStatement[5726-5739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5775-5798]:Block[5775-5798]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5781-5794]:ReturnStatement[5781-5794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5830-5853]:Block[5830-5853]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5836-5849]:ReturnStatement[5836-5849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5884-5907]:Block[5884-5907]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5890-5903]:ReturnStatement[5890-5903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5942-5965]:Block[5942-5965]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5948-5961]:ReturnStatement[5948-5961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6007-6030]:Block[6007-6030]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6013-6026]:ReturnStatement[6013-6026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6063-6086]:Block[6063-6086]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6069-6082]:ReturnStatement[6069-6082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6122-6145]:Block[6122-6145]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6128-6141]:ReturnStatement[6128-6141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6184-6207]:Block[6184-6207]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6190-6203]:ReturnStatement[6190-6203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6239-6262]:Block[6239-6262]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6245-6258]:ReturnStatement[6245-6258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6288-6311]:Block[6288-6311]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6294-6307]:ReturnStatement[6294-6307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6345-6368]:Block[6345-6368]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6351-6364]:ReturnStatement[6351-6364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6404-6427]:Block[6404-6427]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6410-6423]:ReturnStatement[6410-6423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6583-6606]:Block[6583-6606]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6589-6602]:ReturnStatement[6589-6602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6773-6796]:Block[6773-6796]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6779-6792]:ReturnStatement[6779-6792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6932-6955]:Block[6932-6955]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6938-6951]:ReturnStatement[6938-6951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7069-7092]:Block[7069-7092]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7075-7088]:ReturnStatement[7075-7088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7256-7279]:Block[7256-7279]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7262-7275]:ReturnStatement[7262-7275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7458-7481]:Block[7458-7481]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7464-7477]:ReturnStatement[7464-7477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7583-7987]:Block[7583-7987]"
    }, {
      "left" : "if (jsType instanceof ProxyObjectType)",
      "right" : "if (jsType instanceof ProxyObjectType)",
      "info" : "IfStatement[7589-7677]:IfStatement[7589-7677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7628-7677]:Block[7628-7677]"
    }, {
      "left" : "return jsType.isEquivalentTo(this);",
      "right" : "return jsType.isEquivalentTo(this);",
      "info" : "ReturnStatement[7636-7671]:ReturnStatement[7636-7671]"
    }, {
      "left" : "return this == jsType;",
      "right" : "return this == jsType;",
      "info" : "ReturnStatement[7961-7983]:ReturnStatement[7961-7983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8054-8159]:Block[8054-8159]"
    }, {
      "left" : "return (typeA == null || typeB == null) ?\n        typeA == typeB : typeA.isEquivalentTo(typeB);",
      "right" : "return (typeA == null || typeB == null) ?\n        typeA == typeB : typeA.isEquivalentTo(typeB);",
      "info" : "ReturnStatement[8060-8155]:ReturnStatement[8060-8155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8212-8306]:Block[8212-8306]"
    }, {
      "left" : "return (jsType instanceof JSType) ?\n        isEquivalentTo((JSType) jsType) : false;",
      "right" : "return (jsType instanceof JSType) ?\n        isEquivalentTo((JSType) jsType) : false;",
      "info" : "ReturnStatement[8218-8302]:ReturnStatement[8218-8302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8344-8391]:Block[8344-8391]"
    }, {
      "left" : "return System.identityHashCode(this);",
      "right" : "return System.identityHashCode(this);",
      "info" : "ReturnStatement[8350-8387]:ReturnStatement[8350-8387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8719-8759]:Block[8719-8759]"
    }, {
      "left" : "return matchesNumberContext();",
      "right" : "return matchesNumberContext();",
      "info" : "ReturnStatement[8725-8755]:ReturnStatement[8725-8755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8987-9027]:Block[8987-9027]"
    }, {
      "left" : "return matchesNumberContext();",
      "right" : "return matchesNumberContext();",
      "info" : "ReturnStatement[8993-9023]:ReturnStatement[8993-9023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9219-9242]:Block[9219-9242]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9225-9238]:ReturnStatement[9225-9238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9682-9705]:Block[9682-9705]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9688-9701]:ReturnStatement[9688-9701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10087-10110]:Block[10087-10110]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10093-10106]:ReturnStatement[10093-10106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10516-10703]:Block[10516-10703]"
    }, {
      "left" : "ObjectType autoboxObjType = ObjectType.cast(autoboxesTo());",
      "right" : "ObjectType autoboxObjType = ObjectType.cast(autoboxesTo());",
      "info" : "VariableDeclarationStatement[10522-10581]:VariableDeclarationStatement[10522-10581]"
    }, {
      "left" : "if (autoboxObjType != null)",
      "right" : "if (autoboxObjType != null)",
      "info" : "IfStatement[10586-10681]:IfStatement[10586-10681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10614-10681]:Block[10614-10681]"
    }, {
      "left" : "return autoboxObjType.findPropertyType(propertyName);",
      "right" : "return autoboxObjType.findPropertyType(propertyName);",
      "info" : "ReturnStatement[10622-10675]:ReturnStatement[10622-10675]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10687-10699]:ReturnStatement[10687-10699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10923-10946]:Block[10923-10946]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10929-10942]:ReturnStatement[10929-10942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11214-11294]:Block[11214-11294]"
    }, {
      "left" : "if (this.isSubtype(that))",
      "right" : "if (this.isSubtype(that))",
      "info" : "IfStatement[11220-11272]:IfStatement[11220-11272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11246-11272]:Block[11246-11272]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11254-11266]:ReturnStatement[11254-11266]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11277-11290]:ReturnStatement[11277-11290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11473-11495]:Block[11473-11495]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11479-11491]:ReturnStatement[11479-11491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11664-11686]:Block[11664-11686]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11670-11682]:ReturnStatement[11670-11682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12027-12098]:Block[12027-12098]"
    }, {
      "left" : "return this instanceof ObjectType ? (ObjectType) this : null;",
      "right" : "return this instanceof ObjectType ? (ObjectType) this : null;",
      "info" : "ReturnStatement[12033-12094]:ReturnStatement[12033-12094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12299-12475]:Block[12299-12475]"
    }, {
      "left" : "JSType restricted = restrictByNotNullOrUndefined();",
      "right" : "JSType restricted = restrictByNotNullOrUndefined();",
      "info" : "VariableDeclarationStatement[12305-12356]:VariableDeclarationStatement[12305-12356]"
    }, {
      "left" : "JSType autobox = restricted.autoboxesTo();",
      "right" : "JSType autobox = restricted.autoboxesTo();",
      "info" : "VariableDeclarationStatement[12361-12403]:VariableDeclarationStatement[12361-12403]"
    }, {
      "left" : "return ObjectType.cast(autobox == null ? restricted : autobox);",
      "right" : "return ObjectType.cast(autobox == null ? restricted : autobox);",
      "info" : "ReturnStatement[12408-12471]:ReturnStatement[12408-12471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12836-12896]:Block[12836-12896]"
    }, {
      "left" : "return this.testForEquality(that).equals(UNKNOWN);",
      "right" : "return this.testForEquality(that).equals(UNKNOWN);",
      "info" : "ReturnStatement[12842-12892]:ReturnStatement[12842-12892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13533-14093]:Block[13533-14093]"
    }, {
      "left" : "if (that.isAllType() || that.isNoType() || that.isUnknownType())",
      "right" : "if (that.isAllType() || that.isNoType() || that.isUnknownType())",
      "info" : "IfStatement[13539-13633]:IfStatement[13539-13633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13604-13633]:Block[13604-13633]"
    }, {
      "left" : "return UNKNOWN;",
      "right" : "return UNKNOWN;",
      "info" : "ReturnStatement[13612-13627]:ReturnStatement[13612-13627]"
    }, {
      "left" : "if (that.isEnumElementType())",
      "right" : "if (that.isEnumElementType())",
      "info" : "IfStatement[13638-13716]:IfStatement[13638-13716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13668-13716]:Block[13668-13716]"
    }, {
      "left" : "return that.testForEquality(this);",
      "right" : "return that.testForEquality(this);",
      "info" : "ReturnStatement[13676-13710]:ReturnStatement[13676-13710]"
    }, {
      "left" : "if (that instanceof UnionType)",
      "right" : "if (that instanceof UnionType)",
      "info" : "IfStatement[13721-14072]:IfStatement[13721-14072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13752-14072]:Block[13752-14072]"
    }, {
      "left" : "UnionType union = (UnionType) that;",
      "right" : "UnionType union = (UnionType) that;",
      "info" : "VariableDeclarationStatement[13760-13795]:VariableDeclarationStatement[13760-13795]"
    }, {
      "left" : "TernaryValue result = null;",
      "right" : "TernaryValue result = null;",
      "info" : "VariableDeclarationStatement[13802-13829]:VariableDeclarationStatement[13802-13829]"
    }, {
      "left" : "for (JSType t : union.alternates)",
      "right" : "for (JSType t : union.alternates)",
      "info" : "EnhancedForStatement[13836-14066]:EnhancedForStatement[13836-14066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13870-14066]:Block[13870-14066]"
    }, {
      "left" : "TernaryValue test = this.testForEquality(t);",
      "right" : "TernaryValue test = this.testForEquality(t);",
      "info" : "VariableDeclarationStatement[13880-13924]:VariableDeclarationStatement[13880-13924]"
    }, {
      "left" : "if (result == null)",
      "right" : "if (result == null)",
      "info" : "IfStatement[13933-14058]:IfStatement[13933-14058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13953-13989]:Block[13953-13989]"
    }, {
      "left" : "result = test;",
      "right" : "result = test;",
      "info" : "ExpressionStatement[13965-13979]:ExpressionStatement[13965-13979]"
    }, {
      "left" : "if (!result.equals(test))",
      "right" : "if (!result.equals(test))",
      "info" : "IfStatement[13995-14058]:IfStatement[13995-14058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14021-14058]:Block[14021-14058]"
    }, {
      "left" : "return UNKNOWN;",
      "right" : "return UNKNOWN;",
      "info" : "ReturnStatement[14033-14048]:ReturnStatement[14033-14048]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[14077-14089]:ReturnStatement[14077-14089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14493-14555]:Block[14493-14555]"
    }, {
      "left" : "return this.isSubtype(that) || that.isSubtype(this);",
      "right" : "return this.isSubtype(that) || that.isSubtype(this);",
      "info" : "ReturnStatement[14499-14551]:ReturnStatement[14499-14551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14641-14712]:Block[14641-14712]"
    }, {
      "left" : "return this.isSubtype(getNativeType(JSTypeNative.NULL_TYPE));",
      "right" : "return this.isSubtype(getNativeType(JSTypeNative.NULL_TYPE));",
      "info" : "ReturnStatement[14647-14708]:ReturnStatement[14647-14708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15197-15396]:Block[15197-15396]"
    }, {
      "left" : "if (that.isUnionType())",
      "right" : "if (that.isUnionType())",
      "info" : "IfStatement[15203-15350]:IfStatement[15203-15350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15227-15350]:Block[15227-15350]"
    }, {
      "left" : "return that.getLeastSupertype(this);",
      "right" : "return that.getLeastSupertype(this);",
      "info" : "ReturnStatement[15308-15344]:ReturnStatement[15308-15344]"
    }, {
      "left" : "return getLeastSupertype(this, that);",
      "right" : "return getLeastSupertype(this, that);",
      "info" : "ReturnStatement[15355-15392]:ReturnStatement[15355-15392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15588-15865]:Block[15588-15865]"
    }, {
      "left" : "if (thatType.isEmptyType() || thatType.isAllType())",
      "right" : "if (thatType.isEmptyType() || thatType.isAllType())",
      "info" : "IfStatement[15594-15794]:IfStatement[15594-15794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15646-15794]:Block[15646-15794]"
    }, {
      "left" : "return thatType.getLeastSupertype(thisType);",
      "right" : "return thatType.getLeastSupertype(thisType);",
      "info" : "ReturnStatement[15744-15788]:ReturnStatement[15744-15788]"
    }, {
      "left" : "return thisType.registry.createUnionType(thisType, thatType);",
      "right" : "return thisType.registry.createUnionType(thisType, thatType);",
      "info" : "ReturnStatement[15800-15861]:ReturnStatement[15800-15861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16342-16547]:Block[16342-16547]"
    }, {
      "left" : "if (that.isRecordType())",
      "right" : "if (that.isRecordType())",
      "info" : "IfStatement[16349-16500]:IfStatement[16349-16500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16374-16500]:Block[16374-16500]"
    }, {
      "left" : "return that.getGreatestSubtype(this);",
      "right" : "return that.getGreatestSubtype(this);",
      "info" : "ReturnStatement[16457-16494]:ReturnStatement[16457-16494]"
    }, {
      "left" : "return getGreatestSubtype(this, that);",
      "right" : "return getGreatestSubtype(this, that);",
      "info" : "ReturnStatement[16505-16543]:ReturnStatement[16505-16543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16741-17778]:Block[16741-17778]"
    }, {
      "left" : "if (thatType.isEmptyType() || thatType.isAllType())",
      "right" : "if (thatType.isEmptyType() || thatType.isAllType())",
      "info" : "IfStatement[16747-17717]:IfStatement[16747-17717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16799-16948]:Block[16799-16948]"
    }, {
      "left" : "return thatType.getGreatestSubtype(thisType);",
      "right" : "return thatType.getGreatestSubtype(thisType);",
      "info" : "ReturnStatement[16897-16942]:ReturnStatement[16897-16942]"
    }, {
      "left" : "if (thisType.isUnknownType() || thatType.isUnknownType())",
      "right" : "if (thisType.isUnknownType() || thatType.isUnknownType())",
      "info" : "IfStatement[16954-17717]:IfStatement[16954-17717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17012-17264]:Block[17012-17264]"
    }, {
      "left" : "return thisType.isEquivalentTo(thatType) ? thisType :\n          thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);",
      "right" : "return thisType.isEquivalentTo(thatType) ? thisType :\n          thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);",
      "info" : "ReturnStatement[17144-17258]:ReturnStatement[17144-17258]"
    }, {
      "left" : "if (thisType.isSubtype(thatType))",
      "right" : "if (thisType.isSubtype(thatType))",
      "info" : "IfStatement[17270-17717]:IfStatement[17270-17717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17304-17334]:Block[17304-17334]"
    }, {
      "left" : "return thisType;",
      "right" : "return thisType;",
      "info" : "ReturnStatement[17312-17328]:ReturnStatement[17312-17328]"
    }, {
      "left" : "if (thatType.isSubtype(thisType))",
      "right" : "if (thatType.isSubtype(thisType))",
      "info" : "IfStatement[17340-17717]:IfStatement[17340-17717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17374-17404]:Block[17374-17404]"
    }, {
      "left" : "return thatType;",
      "right" : "return thatType;",
      "info" : "ReturnStatement[17382-17398]:ReturnStatement[17382-17398]"
    }, {
      "left" : "if (thisType.isUnionType())",
      "right" : "if (thisType.isUnionType())",
      "info" : "IfStatement[17410-17717]:IfStatement[17410-17717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17438-17497]:Block[17438-17497]"
    }, {
      "left" : "return ((UnionType) thisType).meet(thatType);",
      "right" : "return ((UnionType) thisType).meet(thatType);",
      "info" : "ReturnStatement[17446-17491]:ReturnStatement[17446-17491]"
    }, {
      "left" : "if (thatType.isUnionType())",
      "right" : "if (thatType.isUnionType())",
      "info" : "IfStatement[17503-17717]:IfStatement[17503-17717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17531-17590]:Block[17531-17590]"
    }, {
      "left" : "return ((UnionType) thatType).meet(thisType);",
      "right" : "return ((UnionType) thatType).meet(thisType);",
      "info" : "ReturnStatement[17539-17584]:ReturnStatement[17539-17584]"
    }, {
      "left" : "if (thisType.isObject() && thatType.isObject())",
      "right" : "if (thisType.isObject() && thatType.isObject())",
      "info" : "IfStatement[17596-17717]:IfStatement[17596-17717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17644-17717]:Block[17644-17717]"
    }, {
      "left" : "return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);",
      "right" : "return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);",
      "info" : "ReturnStatement[17652-17711]:ReturnStatement[17652-17711]"
    }, {
      "left" : "return thisType.getNativeType(JSTypeNative.NO_TYPE);",
      "right" : "return thisType.getNativeType(JSTypeNative.NO_TYPE);",
      "info" : "ReturnStatement[17722-17774]:ReturnStatement[17722-17774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18426-18622]:Block[18426-18622]"
    }, {
      "left" : "BooleanLiteralSet literals = getPossibleToBooleanOutcomes();",
      "right" : "BooleanLiteralSet literals = getPossibleToBooleanOutcomes();",
      "info" : "VariableDeclarationStatement[18432-18492]:VariableDeclarationStatement[18432-18492]"
    }, {
      "left" : "if (literals.contains(outcome))",
      "right" : "if (literals.contains(outcome))",
      "info" : "IfStatement[18497-18618]:IfStatement[18497-18618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18529-18555]:Block[18529-18555]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[18537-18549]:ReturnStatement[18537-18549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18561-18618]:Block[18561-18618]"
    }, {
      "left" : "return getNativeType(JSTypeNative.NO_TYPE);",
      "right" : "return getNativeType(JSTypeNative.NO_TYPE);",
      "info" : "ReturnStatement[18569-18612]:ReturnStatement[18569-18612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20120-20565]:Block[20120-20565]"
    }, {
      "left" : "if (that instanceof UnionType)",
      "right" : "if (that instanceof UnionType)",
      "info" : "IfStatement[20146-20282]:IfStatement[20146-20282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20177-20282]:Block[20177-20282]"
    }, {
      "left" : "TypePair p = that.getTypesUnderEquality(this);",
      "right" : "TypePair p = that.getTypesUnderEquality(this);",
      "info" : "VariableDeclarationStatement[20185-20231]:VariableDeclarationStatement[20185-20231]"
    }, {
      "left" : "return new TypePair(p.typeB, p.typeA);",
      "right" : "return new TypePair(p.typeB, p.typeA);",
      "info" : "ReturnStatement[20238-20276]:ReturnStatement[20238-20276]"
    }, {
      "left" : "switch (this.testForEquality(that)) {\n      case FALSE:\n        return new TypePair(null, null);\n\n      case TRUE:\n      case UNKNOWN:\n        return new TypePair(this, that);\n    }",
      "right" : "switch (this.testForEquality(that)) {\n      case FALSE:\n        return new TypePair(null, null);\n\n      case TRUE:\n      case UNKNOWN:\n        return new TypePair(this, that);\n    }",
      "info" : "SwitchStatement[20307-20488]:SwitchStatement[20307-20488]"
    }, {
      "left" : "case FALSE:",
      "right" : "case FALSE:",
      "info" : "SwitchCase[20351-20362]:SwitchCase[20351-20362]"
    }, {
      "left" : "return new TypePair(null, null);",
      "right" : "return new TypePair(null, null);",
      "info" : "ReturnStatement[20371-20403]:ReturnStatement[20371-20403]"
    }, {
      "left" : "case TRUE:",
      "right" : "case TRUE:",
      "info" : "SwitchCase[20411-20421]:SwitchCase[20411-20421]"
    }, {
      "left" : "case UNKNOWN:",
      "right" : "case UNKNOWN:",
      "info" : "SwitchCase[20428-20441]:SwitchCase[20428-20441]"
    }, {
      "left" : "return new TypePair(this, that);",
      "right" : "return new TypePair(this, that);",
      "info" : "ReturnStatement[20450-20482]:ReturnStatement[20450-20482]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[20527-20561]:ThrowStatement[20527-20561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21258-21705]:Block[21258-21770]"
    }, {
      "left" : "if (that instanceof UnionType)",
      "right" : "if (that instanceof UnionType)",
      "info" : "IfStatement[21284-21422]:IfStatement[21284-21422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21315-21422]:Block[21315-21422]"
    }, {
      "left" : "TypePair p = that.getTypesUnderInequality(this);",
      "right" : "TypePair p = that.getTypesUnderInequality(this);",
      "info" : "VariableDeclarationStatement[21323-21371]:VariableDeclarationStatement[21323-21371]"
    }, {
      "left" : "return new TypePair(p.typeB, p.typeA);",
      "right" : "return new TypePair(p.typeB, p.typeA);",
      "info" : "ReturnStatement[21378-21416]:ReturnStatement[21378-21416]"
    }, {
      "left" : "switch (this.testForEquality(that)) {\n      case TRUE:\n        return new TypePair(null, null);\n\n      case FALSE:\n      case UNKNOWN:\n        return new TypePair(this, that);\n    }",
      "right" : "switch (this.testForEquality(that)) {\n      case TRUE:\n        JSType noType = getNativeType(JSTypeNative.NO_TYPE);\n        return new TypePair(noType, noType);\n\n      case FALSE:\n      case UNKNOWN:\n        return new TypePair(this, that);\n    }",
      "info" : "SwitchStatement[21447-21628]:SwitchStatement[21447-21693]"
    }, {
      "left" : "case TRUE:",
      "right" : "case TRUE:",
      "info" : "SwitchCase[21491-21501]:SwitchCase[21491-21501]"
    }, {
      "left" : "return new TypePair(null, null);",
      "right" : "return new TypePair(noType, noType);",
      "info" : "ReturnStatement[21510-21542]:ReturnStatement[21571-21607]"
    }, {
      "left" : "case FALSE:",
      "right" : "case FALSE:",
      "info" : "SwitchCase[21550-21561]:SwitchCase[21615-21626]"
    }, {
      "left" : "case UNKNOWN:",
      "right" : "case UNKNOWN:",
      "info" : "SwitchCase[21568-21581]:SwitchCase[21633-21646]"
    }, {
      "left" : "return new TypePair(this, that);",
      "right" : "return new TypePair(this, that);",
      "info" : "ReturnStatement[21590-21622]:ReturnStatement[21655-21687]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[21667-21701]:ThrowStatement[21732-21766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22157-22261]:Block[22222-22326]"
    }, {
      "left" : "JSType commonType = getGreatestSubtype(that);",
      "right" : "JSType commonType = getGreatestSubtype(that);",
      "info" : "VariableDeclarationStatement[22163-22208]:VariableDeclarationStatement[22228-22273]"
    }, {
      "left" : "return new TypePair(commonType, commonType);",
      "right" : "return new TypePair(commonType, commonType);",
      "info" : "ReturnStatement[22213-22257]:ReturnStatement[22278-22322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22716-23249]:Block[22781-23314]"
    }, {
      "left" : "if (that instanceof UnionType)",
      "right" : "if (that instanceof UnionType)",
      "info" : "IfStatement[22741-22886]:IfStatement[22806-22951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22772-22886]:Block[22837-22951]"
    }, {
      "left" : "TypePair p = that.getTypesUnderShallowInequality(this);",
      "right" : "TypePair p = that.getTypesUnderShallowInequality(this);",
      "info" : "VariableDeclarationStatement[22780-22835]:VariableDeclarationStatement[22845-22900]"
    }, {
      "left" : "return new TypePair(p.typeB, p.typeA);",
      "right" : "return new TypePair(p.typeB, p.typeA);",
      "info" : "ReturnStatement[22842-22880]:ReturnStatement[22907-22945]"
    }, {
      "left" : "if (this.isNullType() && that.isNullType() ||\n        this.isVoidType() && that.isVoidType())",
      "right" : "if (this.isNullType() && that.isNullType() ||\n        this.isVoidType() && that.isVoidType())",
      "info" : "IfStatement[23053-23245]:IfStatement[23118-23310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23147-23193]:Block[23212-23258]"
    }, {
      "left" : "return new TypePair(null, null);",
      "right" : "return new TypePair(null, null);",
      "info" : "ReturnStatement[23155-23187]:ReturnStatement[23220-23252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23199-23245]:Block[23264-23310]"
    }, {
      "left" : "return new TypePair(this, that);",
      "right" : "return new TypePair(this, that);",
      "info" : "ReturnStatement[23207-23239]:ReturnStatement[23272-23304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23416-23438]:Block[23481-23503]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[23422-23434]:ReturnStatement[23487-23499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25118-25420]:Block[25183-25485]"
    }, {
      "left" : "if (!this.isUnknownType() && !that.isUnknownType())",
      "right" : "if (!this.isUnknownType() && !that.isUnknownType())",
      "info" : "IfStatement[25183-25283]:IfStatement[25248-25348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25235-25283]:Block[25300-25348]"
    }, {
      "left" : "return !this.isEquivalentTo(that);",
      "right" : "return !this.isEquivalentTo(that);",
      "info" : "ReturnStatement[25243-25277]:ReturnStatement[25308-25342]"
    }, {
      "left" : "return this.isUnknownType() ^ that.isUnknownType();",
      "right" : "return this.isUnknownType() ^ that.isUnknownType();",
      "info" : "ReturnStatement[25365-25416]:ReturnStatement[25430-25481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25587-26220]:Block[25652-26285]"
    }, {
      "left" : "if (thatType.isUnknownType())",
      "right" : "if (thatType.isUnknownType())",
      "info" : "IfStatement[25608-25664]:IfStatement[25673-25729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25638-25664]:Block[25703-25729]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[25646-25658]:ReturnStatement[25711-25723]"
    }, {
      "left" : "if (thisType.isEquivalentTo(thatType))",
      "right" : "if (thisType.isEquivalentTo(thatType))",
      "info" : "IfStatement[25685-25750]:IfStatement[25750-25815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25724-25750]:Block[25789-25815]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[25732-25744]:ReturnStatement[25797-25809]"
    }, {
      "left" : "if (thatType.isAllType())",
      "right" : "if (thatType.isAllType())",
      "info" : "IfStatement[25771-25823]:IfStatement[25836-25888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25797-25823]:Block[25862-25888]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[25805-25817]:ReturnStatement[25870-25882]"
    }, {
      "left" : "if (thatType instanceof UnionType)",
      "right" : "if (thatType instanceof UnionType)",
      "info" : "IfStatement[25842-26061]:IfStatement[25907-26126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25877-26061]:Block[25942-26126]"
    }, {
      "left" : "UnionType union = (UnionType)thatType;",
      "right" : "UnionType union = (UnionType)thatType;",
      "info" : "VariableDeclarationStatement[25885-25923]:VariableDeclarationStatement[25950-25988]"
    }, {
      "left" : "for (JSType element : union.alternates)",
      "right" : "for (JSType element : union.alternates)",
      "info" : "EnhancedForStatement[25930-26055]:EnhancedForStatement[25995-26120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25970-26055]:Block[26035-26120]"
    }, {
      "left" : "if (thisType.isSubtype(element))",
      "right" : "if (thisType.isSubtype(element))",
      "info" : "IfStatement[25980-26047]:IfStatement[26045-26112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26013-26047]:Block[26078-26112]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[26025-26037]:ReturnStatement[26090-26102]"
    }, {
      "left" : "if (thatType instanceof NamedType)",
      "right" : "if (thatType instanceof NamedType)",
      "info" : "IfStatement[26085-26198]:IfStatement[26150-26263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26120-26198]:Block[26185-26263]"
    }, {
      "left" : "return thisType.isSubtype(((NamedType)thatType).referencedType);",
      "right" : "return thisType.isSubtype(((NamedType)thatType).referencedType);",
      "info" : "ReturnStatement[26128-26192]:ReturnStatement[26193-26257]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26203-26216]:ReturnStatement[26268-26281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26629-26849]:Block[26694-26914]"
    }, {
      "left" : "ResolveMode oldResolveMode = registry.getResolveMode();",
      "right" : "ResolveMode oldResolveMode = registry.getResolveMode();",
      "info" : "VariableDeclarationStatement[26635-26690]:VariableDeclarationStatement[26700-26755]"
    }, {
      "left" : "registry.setResolveMode(ResolveMode.IMMEDIATE);",
      "right" : "registry.setResolveMode(ResolveMode.IMMEDIATE);",
      "info" : "ExpressionStatement[26695-26742]:ExpressionStatement[26760-26807]"
    }, {
      "left" : "JSType result = resolve(t, scope);",
      "right" : "JSType result = resolve(t, scope);",
      "info" : "VariableDeclarationStatement[26747-26781]:VariableDeclarationStatement[26812-26846]"
    }, {
      "left" : "registry.setResolveMode(oldResolveMode);",
      "right" : "registry.setResolveMode(oldResolveMode);",
      "info" : "ExpressionStatement[26786-26826]:ExpressionStatement[26851-26891]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[26831-26845]:ReturnStatement[26896-26910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27526-27974]:Block[27591-28039]"
    }, {
      "left" : "if (resolved)",
      "right" : "if (resolved)",
      "info" : "IfStatement[27532-27818]:IfStatement[27597-27883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27546-27818]:Block[27611-27883]"
    }, {
      "left" : "if (resolveResult == null)",
      "right" : "if (resolveResult == null)",
      "info" : "IfStatement[27682-27784]:IfStatement[27747-27849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27709-27784]:Block[27774-27849]"
    }, {
      "left" : "return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);",
      "right" : "return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);",
      "info" : "ReturnStatement[27719-27776]:ReturnStatement[27784-27841]"
    }, {
      "left" : "return resolveResult;",
      "right" : "return resolveResult;",
      "info" : "ReturnStatement[27791-27812]:ReturnStatement[27856-27877]"
    }, {
      "left" : "resolved = true;",
      "right" : "resolved = true;",
      "info" : "ExpressionStatement[27823-27839]:ExpressionStatement[27888-27904]"
    }, {
      "left" : "resolveResult = resolveInternal(t, scope);",
      "right" : "resolveResult = resolveInternal(t, scope);",
      "info" : "ExpressionStatement[27844-27886]:ExpressionStatement[27909-27951]"
    }, {
      "left" : "resolveResult.setResolvedTypeInternal(resolveResult);",
      "right" : "resolveResult.setResolvedTypeInternal(resolveResult);",
      "info" : "ExpressionStatement[27891-27944]:ExpressionStatement[27956-28009]"
    }, {
      "left" : "return resolveResult;",
      "right" : "return resolveResult;",
      "info" : "ReturnStatement[27949-27970]:ReturnStatement[28014-28035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28131-28183]:Block[28196-28248]"
    }, {
      "left" : "resolveResult = type;",
      "right" : "resolveResult = type;",
      "info" : "ExpressionStatement[28137-28158]:ExpressionStatement[28202-28223]"
    }, {
      "left" : "resolved = true;",
      "right" : "resolved = true;",
      "info" : "ExpressionStatement[28163-28179]:ExpressionStatement[28228-28244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28266-28292]:Block[28331-28357]"
    }, {
      "left" : "return resolved;",
      "right" : "return resolved;",
      "info" : "ReturnStatement[28272-28288]:ReturnStatement[28337-28353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28366-28419]:Block[28431-28484]"
    }, {
      "left" : "resolved = false;",
      "right" : "resolved = false;",
      "info" : "ExpressionStatement[28372-28389]:ExpressionStatement[28437-28454]"
    }, {
      "left" : "resolveResult = null;",
      "right" : "resolveResult = null;",
      "info" : "ExpressionStatement[28394-28415]:ExpressionStatement[28459-28480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28576-28638]:Block[28641-28703]"
    }, {
      "left" : "return type == null ? null : type.resolve(t, scope);",
      "right" : "return type == null ? null : type.resolve(t, scope);",
      "info" : "ReturnStatement[28582-28634]:ReturnStatement[28647-28699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28784-28843]:Block[28849-28908]"
    }, {
      "left" : "this.typeA = typeA;",
      "right" : "this.typeA = typeA;",
      "info" : "ExpressionStatement[28792-28811]:ExpressionStatement[28857-28876]"
    }, {
      "left" : "this.typeB = typeB;",
      "right" : "this.typeB = typeB;",
      "info" : "ExpressionStatement[28818-28837]:ExpressionStatement[28883-28902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28988-29033]:Block[29053-29098]"
    }, {
      "left" : "return \"{\" + this.hashCode() + \"}\";",
      "right" : "return \"{\" + this.hashCode() + \"}\";",
      "info" : "ReturnStatement[28994-29029]:ReturnStatement[29059-29094]"
    } ]
  },
  "interFileMappings" : { }
}