{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "DateTimeZone",
      "right" : "DateTimeZone",
      "info" : "TypeDeclaration[1575-49676]:TypeDeclaration[1575-49693]"
    }, {
      "left" : "private static final long serialVersionUID = 5546345482340108586L;",
      "right" : "private static final long serialVersionUID = 5546345482340108586L;",
      "info" : "FieldDeclaration[3689-3789]:FieldDeclaration[3689-3789]"
    }, {
      "left" : "public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);",
      "right" : "public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);",
      "info" : "FieldDeclaration[3795-3932]:FieldDeclaration[3795-3932]"
    }, {
      "left" : "private static Provider cProvider;",
      "right" : "private static Provider cProvider;",
      "info" : "FieldDeclaration[3938-4026]:FieldDeclaration[3938-4026]"
    }, {
      "left" : "private static NameProvider cNameProvider;",
      "right" : "private static NameProvider cNameProvider;",
      "info" : "FieldDeclaration[4031-4132]:FieldDeclaration[4031-4132]"
    }, {
      "left" : "private static Set<String> cAvailableIDs;",
      "right" : "private static Set<String> cAvailableIDs;",
      "info" : "FieldDeclaration[4137-4212]:FieldDeclaration[4137-4212]"
    }, {
      "left" : "private static volatile DateTimeZone cDefault;",
      "right" : "private static volatile DateTimeZone cDefault;",
      "info" : "FieldDeclaration[4217-4297]:FieldDeclaration[4217-4297]"
    }, {
      "left" : "private static DateTimeFormatter cOffsetFormatter;",
      "right" : "private static DateTimeFormatter cOffsetFormatter;",
      "info" : "FieldDeclaration[4302-4407]:FieldDeclaration[4302-4407]"
    }, {
      "left" : "private static Map<String, SoftReference<DateTimeZone>> iFixedOffsetCache;",
      "right" : "private static Map<String, SoftReference<DateTimeZone>> iFixedOffsetCache;",
      "info" : "FieldDeclaration[4413-4570]:FieldDeclaration[4413-4570]"
    }, {
      "left" : "private static Map<String, String> cZoneIdConversion;",
      "right" : "private static Map<String, String> cZoneIdConversion;",
      "info" : "FieldDeclaration[4576-4678]:FieldDeclaration[4576-4678]"
    }, {
      "left" : "public static DateTimeZone getDefault()",
      "right" : "public static DateTimeZone getDefault()",
      "info" : "MethodDeclaration[4842-6534]:MethodDeclaration[4842-6534]"
    }, {
      "left" : "public static void setDefault(DateTimeZone zone) throws SecurityException",
      "right" : "public static void setDefault(DateTimeZone zone) throws SecurityException",
      "info" : "MethodDeclaration[6540-7383]:MethodDeclaration[6540-7383]"
    }, {
      "left" : "public static DateTimeZone forID(String id)",
      "right" : "public static DateTimeZone forID(String id)",
      "info" : "MethodDeclaration[7467-8902]:MethodDeclaration[7467-8902]"
    }, {
      "left" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
      "right" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
      "info" : "MethodDeclaration[8908-9493]:MethodDeclaration[8908-9493]"
    }, {
      "left" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
      "right" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
      "info" : "MethodDeclaration[9499-11224]:MethodDeclaration[9499-11224]"
    }, {
      "left" : "public static DateTimeZone forOffsetMillis(int millisOffset)",
      "right" : "public static DateTimeZone forOffsetMillis(int millisOffset)",
      "info" : "MethodDeclaration[11230-11612]:MethodDeclaration[11230-11612]"
    }, {
      "left" : "public static DateTimeZone forTimeZone(TimeZone zone)",
      "right" : "public static DateTimeZone forTimeZone(TimeZone zone)",
      "info" : "MethodDeclaration[11618-13576]:MethodDeclaration[11618-13576]"
    }, {
      "left" : "private static synchronized DateTimeZone fixedOffsetZone(String id, int offset)",
      "right" : "private static synchronized DateTimeZone fixedOffsetZone(String id, int offset)",
      "info" : "MethodDeclaration[13660-14520]:MethodDeclaration[13660-14520]"
    }, {
      "left" : "public static Set<String> getAvailableIDs()",
      "right" : "public static Set<String> getAvailableIDs()",
      "info" : "MethodDeclaration[14526-14725]:MethodDeclaration[14526-14725]"
    }, {
      "left" : "public static Provider getProvider()",
      "right" : "public static Provider getProvider()",
      "info" : "MethodDeclaration[14809-15097]:MethodDeclaration[14809-15097]"
    }, {
      "left" : "public static void setProvider(Provider provider) throws SecurityException",
      "right" : "public static void setProvider(Provider provider) throws SecurityException",
      "info" : "MethodDeclaration[15103-15805]:MethodDeclaration[15103-15805]"
    }, {
      "left" : "private static void setProvider0(Provider provider)",
      "right" : "private static void setProvider0(Provider provider)",
      "info" : "MethodDeclaration[15811-16736]:MethodDeclaration[15811-16736]"
    }, {
      "left" : "private static Provider getDefaultProvider()",
      "right" : "private static Provider getDefaultProvider()",
      "info" : "MethodDeclaration[16742-18153]:MethodDeclaration[16742-18153]"
    }, {
      "left" : "public static NameProvider getNameProvider()",
      "right" : "public static NameProvider getNameProvider()",
      "info" : "MethodDeclaration[18237-18531]:MethodDeclaration[18237-18531]"
    }, {
      "left" : "public static void setNameProvider(NameProvider nameProvider) throws SecurityException",
      "right" : "public static void setNameProvider(NameProvider nameProvider) throws SecurityException",
      "info" : "MethodDeclaration[18537-19265]:MethodDeclaration[18537-19265]"
    }, {
      "left" : "private static void setNameProvider0(NameProvider nameProvider)",
      "right" : "private static void setNameProvider0(NameProvider nameProvider)",
      "info" : "MethodDeclaration[19271-19712]:MethodDeclaration[19271-19712]"
    }, {
      "left" : "private static NameProvider getDefaultNameProvider()",
      "right" : "private static NameProvider getDefaultNameProvider()",
      "info" : "MethodDeclaration[19718-20754]:MethodDeclaration[19718-20754]"
    }, {
      "left" : "private static synchronized String getConvertedId(String id)",
      "right" : "private static synchronized String getConvertedId(String id)",
      "info" : "MethodDeclaration[20838-22880]:MethodDeclaration[20838-22897]"
    }, {
      "left" : "private static int parseOffset(String str)",
      "right" : "private static int parseOffset(String str)",
      "info" : "MethodDeclaration[22886-23579]:MethodDeclaration[22903-23596]"
    }, {
      "left" : "public DateTimeZone getZone()",
      "right" : "public DateTimeZone getZone()",
      "info" : "MethodDeclaration[23121-23195]:MethodDeclaration[23138-23212]"
    }, {
      "left" : "public Chronology withUTC()",
      "right" : "public Chronology withUTC()",
      "info" : "MethodDeclaration[23208-23280]:MethodDeclaration[23225-23297]"
    }, {
      "left" : "public Chronology withZone(DateTimeZone zone)",
      "right" : "public Chronology withZone(DateTimeZone zone)",
      "info" : "MethodDeclaration[23293-23383]:MethodDeclaration[23310-23400]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[23396-23481]:MethodDeclaration[23413-23498]"
    }, {
      "left" : "private static String printOffset(int offset)",
      "right" : "private static String printOffset(int offset)",
      "info" : "MethodDeclaration[23585-24987]:MethodDeclaration[23602-25004]"
    }, {
      "left" : "private static synchronized DateTimeFormatter offsetFormatter()",
      "right" : "private static synchronized DateTimeFormatter offsetFormatter()",
      "info" : "MethodDeclaration[24993-25418]:MethodDeclaration[25010-25435]"
    }, {
      "left" : "private final String iID;",
      "right" : "private final String iID;",
      "info" : "FieldDeclaration[25535-25560]:FieldDeclaration[25552-25577]"
    }, {
      "left" : "protected DateTimeZone(String id)",
      "right" : "protected DateTimeZone(String id)",
      "info" : "MethodDeclaration[25566-25866]:MethodDeclaration[25583-25883]"
    }, {
      "left" : "public final String getID()",
      "right" : "public final String getID()",
      "info" : "MethodDeclaration[25973-26152]:MethodDeclaration[25990-26169]"
    }, {
      "left" : "public abstract String getNameKey(long instant);",
      "right" : "public abstract String getNameKey(long instant);",
      "info" : "MethodDeclaration[26158-26529]:MethodDeclaration[26175-26546]"
    }, {
      "left" : "public final String getShortName(long instant)",
      "right" : "public final String getShortName(long instant)",
      "info" : "MethodDeclaration[26535-27051]:MethodDeclaration[26552-27068]"
    }, {
      "left" : "public String getShortName(long instant, Locale locale)",
      "right" : "public String getShortName(long instant, Locale locale)",
      "info" : "MethodDeclaration[27057-27971]:MethodDeclaration[27074-27988]"
    }, {
      "left" : "public final String getName(long instant)",
      "right" : "public final String getName(long instant)",
      "info" : "MethodDeclaration[27977-28481]:MethodDeclaration[27994-28498]"
    }, {
      "left" : "public String getName(long instant, Locale locale)",
      "right" : "public String getName(long instant, Locale locale)",
      "info" : "MethodDeclaration[28487-29389]:MethodDeclaration[28504-29406]"
    }, {
      "left" : "public abstract int getOffset(long instant);",
      "right" : "public abstract int getOffset(long instant);",
      "info" : "MethodDeclaration[29395-29685]:MethodDeclaration[29412-29702]"
    }, {
      "left" : "public final int getOffset(ReadableInstant instant)",
      "right" : "public final int getOffset(ReadableInstant instant)",
      "info" : "MethodDeclaration[29691-30134]:MethodDeclaration[29708-30151]"
    }, {
      "left" : "public abstract int getStandardOffset(long instant);",
      "right" : "public abstract int getStandardOffset(long instant);",
      "info" : "MethodDeclaration[30140-30487]:MethodDeclaration[30157-30504]"
    }, {
      "left" : "public boolean isStandardOffset(long instant)",
      "right" : "public boolean isStandardOffset(long instant)",
      "info" : "MethodDeclaration[30493-31362]:MethodDeclaration[30510-31379]"
    }, {
      "left" : "public int getOffsetFromLocal(long instantLocal)",
      "right" : "public int getOffsetFromLocal(long instantLocal)",
      "info" : "MethodDeclaration[31368-34518]:MethodDeclaration[31385-34535]"
    }, {
      "left" : "public long convertUTCToLocal(long instantUTC)",
      "right" : "public long convertUTCToLocal(long instantUTC)",
      "info" : "MethodDeclaration[34524-35396]:MethodDeclaration[34541-35413]"
    }, {
      "left" : "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
      "right" : "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
      "info" : "MethodDeclaration[35402-36738]:MethodDeclaration[35419-36755]"
    }, {
      "left" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
      "right" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
      "info" : "MethodDeclaration[36744-39703]:MethodDeclaration[36761-39720]"
    }, {
      "left" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
      "right" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
      "info" : "MethodDeclaration[39709-40565]:MethodDeclaration[39726-40582]"
    }, {
      "left" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
      "right" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
      "info" : "MethodDeclaration[45078-45818]:MethodDeclaration[45095-45835]"
    }, {
      "left" : "public long adjustOffset(long instant, boolean earlierOrLater)",
      "right" : "public long adjustOffset(long instant, boolean earlierOrLater)",
      "info" : "MethodDeclaration[45824-46524]:MethodDeclaration[45841-46541]"
    }, {
      "left" : "public abstract boolean isFixed();",
      "right" : "public abstract boolean isFixed();",
      "info" : "MethodDeclaration[46608-46761]:MethodDeclaration[46625-46778]"
    }, {
      "left" : "public abstract long nextTransition(long instant);",
      "right" : "public abstract long nextTransition(long instant);",
      "info" : "MethodDeclaration[46767-47156]:MethodDeclaration[46784-47173]"
    }, {
      "left" : "public abstract long previousTransition(long instant);",
      "right" : "public abstract long previousTransition(long instant);",
      "info" : "MethodDeclaration[47162-47556]:MethodDeclaration[47179-47573]"
    }, {
      "left" : "public java.util.TimeZone toTimeZone()",
      "right" : "public java.util.TimeZone toTimeZone()",
      "info" : "MethodDeclaration[47659-47895]:MethodDeclaration[47676-47912]"
    }, {
      "left" : "public abstract boolean equals(Object object);",
      "right" : "public abstract boolean equals(Object object);",
      "info" : "MethodDeclaration[47901-48136]:MethodDeclaration[47918-48153]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[48142-48316]:MethodDeclaration[48159-48333]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[48322-48495]:MethodDeclaration[48339-48512]"
    }, {
      "left" : "protected Object writeReplace() throws ObjectStreamException",
      "right" : "protected Object writeReplace() throws ObjectStreamException",
      "info" : "MethodDeclaration[48501-48862]:MethodDeclaration[48518-48879]"
    }, {
      "left" : "Stub",
      "right" : "Stub",
      "info" : "TypeDeclaration[48868-49673]:TypeDeclaration[48885-49690]"
    }, {
      "left" : "private static final long serialVersionUID = -6471952376487863581L;",
      "right" : "private static final long serialVersionUID = -6471952376487863581L;",
      "info" : "FieldDeclaration[48996-49098]:FieldDeclaration[49013-49115]"
    }, {
      "left" : "private transient String iID;",
      "right" : "private transient String iID;",
      "info" : "FieldDeclaration[49107-49171]:FieldDeclaration[49124-49188]"
    }, {
      "left" : "Stub(String id)",
      "right" : "Stub(String id)",
      "info" : "MethodDeclaration[49181-49319]:MethodDeclaration[49198-49336]"
    }, {
      "left" : "private void writeObject(ObjectOutputStream out) throws IOException",
      "right" : "private void writeObject(ObjectOutputStream out) throws IOException",
      "info" : "MethodDeclaration[49329-49439]:MethodDeclaration[49346-49456]"
    }, {
      "left" : "private void readObject(ObjectInputStream in) throws IOException",
      "right" : "private void readObject(ObjectInputStream in) throws IOException",
      "info" : "MethodDeclaration[49449-49557]:MethodDeclaration[49466-49574]"
    }, {
      "left" : "private Object readResolve() throws ObjectStreamException",
      "right" : "private Object readResolve() throws ObjectStreamException",
      "info" : "MethodDeclaration[49567-49667]:MethodDeclaration[49584-49684]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5419-6534]:Block[5419-6534]"
    }, {
      "left" : "DateTimeZone zone = cDefault;",
      "right" : "DateTimeZone zone = cDefault;",
      "info" : "VariableDeclarationStatement[5429-5458]:VariableDeclarationStatement[5429-5458]"
    }, {
      "left" : "if (zone == null)",
      "right" : "if (zone == null)",
      "info" : "IfStatement[5467-6507]:IfStatement[5467-6507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5485-6507]:Block[5485-6507]"
    }, {
      "left" : "synchronized(DateTimeZone.class) {\n                zone = cDefault;\n                if (zone == null) {\n                    DateTimeZone temp = null;\n                    try {\n                        try {\n                            String id = System.getProperty(\"user.timezone\");\n                            if (id != null) {  // null check avoids stack overflow\n                                temp = forID(id);\n                            }\n                        } catch (RuntimeException ex) {\n                            // ignored\n                        }\n                        if (temp == null) {\n                            temp = forTimeZone(TimeZone.getDefault());\n                        }\n                    } catch (IllegalArgumentException ex) {\n                        // ignored\n                    }\n                    if (temp == null) {\n                        temp = UTC;\n                    }\n                    cDefault = zone = temp;\n                }\n            }",
      "right" : "synchronized(DateTimeZone.class) {\n                zone = cDefault;\n                if (zone == null) {\n                    DateTimeZone temp = null;\n                    try {\n                        try {\n                            String id = System.getProperty(\"user.timezone\");\n                            if (id != null) {  // null check avoids stack overflow\n                                temp = forID(id);\n                            }\n                        } catch (RuntimeException ex) {\n                            // ignored\n                        }\n                        if (temp == null) {\n                            temp = forTimeZone(TimeZone.getDefault());\n                        }\n                    } catch (IllegalArgumentException ex) {\n                        // ignored\n                    }\n                    if (temp == null) {\n                        temp = UTC;\n                    }\n                    cDefault = zone = temp;\n                }\n            }",
      "info" : "SynchronizedStatement[5499-6497]:SynchronizedStatement[5499-6497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5532-6497]:Block[5532-6497]"
    }, {
      "left" : "zone = cDefault;",
      "right" : "zone = cDefault;",
      "info" : "ExpressionStatement[5550-5566]:ExpressionStatement[5550-5566]"
    }, {
      "left" : "if (zone == null)",
      "right" : "if (zone == null)",
      "info" : "IfStatement[5583-6483]:IfStatement[5583-6483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5601-6483]:Block[5601-6483]"
    }, {
      "left" : "DateTimeZone temp = null;",
      "right" : "DateTimeZone temp = null;",
      "info" : "VariableDeclarationStatement[5623-5648]:VariableDeclarationStatement[5623-5648]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[5669-6323]:TryStatement[5669-6323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5673-6228]:Block[5673-6228]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[5699-6065]:TryStatement[5699-6065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5703-5970]:Block[5703-5970]"
    }, {
      "left" : "String id = System.getProperty(\"user.timezone\");",
      "right" : "String id = System.getProperty(\"user.timezone\");",
      "info" : "VariableDeclarationStatement[5733-5781]:VariableDeclarationStatement[5733-5781]"
    }, {
      "left" : "if (id != null)",
      "right" : "if (id != null)",
      "info" : "IfStatement[5810-5944]:IfStatement[5810-5944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5826-5944]:Block[5826-5944]"
    }, {
      "left" : "temp = forID(id);",
      "right" : "temp = forID(id);",
      "info" : "ExpressionStatement[5897-5914]:ExpressionStatement[5897-5914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5999-6065]:Block[5999-6065]"
    }, {
      "left" : "if (temp == null)",
      "right" : "if (temp == null)",
      "info" : "IfStatement[6090-6206]:IfStatement[6090-6206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6108-6206]:Block[6108-6206]"
    }, {
      "left" : "temp = forTimeZone(TimeZone.getDefault());",
      "right" : "temp = forTimeZone(TimeZone.getDefault());",
      "info" : "ExpressionStatement[6138-6180]:ExpressionStatement[6138-6180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6265-6323]:Block[6265-6323]"
    }, {
      "left" : "if (temp == null)",
      "right" : "if (temp == null)",
      "info" : "IfStatement[6344-6421]:IfStatement[6344-6421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6362-6421]:Block[6362-6421]"
    }, {
      "left" : "temp = UTC;",
      "right" : "temp = UTC;",
      "info" : "ExpressionStatement[6388-6399]:ExpressionStatement[6388-6399]"
    }, {
      "left" : "cDefault = zone = temp;",
      "right" : "cDefault = zone = temp;",
      "info" : "ExpressionStatement[6442-6465]:ExpressionStatement[6442-6465]"
    }, {
      "left" : "return zone;",
      "right" : "return zone;",
      "info" : "ReturnStatement[6516-6528]:ReturnStatement[6516-6528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6993-7383]:Block[6993-7383]"
    }, {
      "left" : "SecurityManager sm = System.getSecurityManager();",
      "right" : "SecurityManager sm = System.getSecurityManager();",
      "info" : "VariableDeclarationStatement[7003-7052]:VariableDeclarationStatement[7003-7052]"
    }, {
      "left" : "if (sm != null)",
      "right" : "if (sm != null)",
      "info" : "IfStatement[7061-7171]:IfStatement[7061-7171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7077-7171]:Block[7077-7171]"
    }, {
      "left" : "sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setDefault\"));",
      "right" : "sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setDefault\"));",
      "info" : "ExpressionStatement[7091-7161]:ExpressionStatement[7091-7161]"
    }, {
      "left" : "if (zone == null)",
      "right" : "if (zone == null)",
      "info" : "IfStatement[7180-7295]:IfStatement[7180-7295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7198-7295]:Block[7198-7295]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The datetime zone must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The datetime zone must not be null\");",
      "info" : "ThrowStatement[7212-7285]:ThrowStatement[7212-7285]"
    }, {
      "left" : "synchronized(DateTimeZone.class) {\n            cDefault = zone;\n        }",
      "right" : "synchronized(DateTimeZone.class) {\n            cDefault = zone;\n        }",
      "info" : "SynchronizedStatement[7304-7377]:SynchronizedStatement[7304-7377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7337-7377]:Block[7337-7377]"
    }, {
      "left" : "cDefault = zone;",
      "right" : "cDefault = zone;",
      "info" : "ExpressionStatement[7351-7367]:ExpressionStatement[7351-7367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8224-8902]:Block[8224-8902]"
    }, {
      "left" : "if (id == null)",
      "right" : "if (id == null)",
      "info" : "IfStatement[8234-8294]:IfStatement[8234-8294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8250-8294]:Block[8250-8294]"
    }, {
      "left" : "return getDefault();",
      "right" : "return getDefault();",
      "info" : "ReturnStatement[8264-8284]:ReturnStatement[8264-8284]"
    }, {
      "left" : "if (id.equals(\"UTC\"))",
      "right" : "if (id.equals(\"UTC\"))",
      "info" : "IfStatement[8303-8373]:IfStatement[8303-8373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8325-8373]:Block[8325-8373]"
    }, {
      "left" : "return DateTimeZone.UTC;",
      "right" : "return DateTimeZone.UTC;",
      "info" : "ReturnStatement[8339-8363]:ReturnStatement[8339-8363]"
    }, {
      "left" : "DateTimeZone zone = cProvider.getZone(id);",
      "right" : "DateTimeZone zone = cProvider.getZone(id);",
      "info" : "VariableDeclarationStatement[8382-8424]:VariableDeclarationStatement[8382-8424]"
    }, {
      "left" : "if (zone != null)",
      "right" : "if (zone != null)",
      "info" : "IfStatement[8433-8487]:IfStatement[8433-8487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8451-8487]:Block[8451-8487]"
    }, {
      "left" : "return zone;",
      "right" : "return zone;",
      "info" : "ReturnStatement[8465-8477]:ReturnStatement[8465-8477]"
    }, {
      "left" : "if (id.startsWith(\"+\") || id.startsWith(\"-\"))",
      "right" : "if (id.startsWith(\"+\") || id.startsWith(\"-\"))",
      "info" : "IfStatement[8496-8797]:IfStatement[8496-8797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8542-8797]:Block[8542-8797]"
    }, {
      "left" : "int offset = parseOffset(id);",
      "right" : "int offset = parseOffset(id);",
      "info" : "VariableDeclarationStatement[8556-8585]:VariableDeclarationStatement[8556-8585]"
    }, {
      "left" : "if (offset == 0L)",
      "right" : "if (offset == 0L)",
      "info" : "IfStatement[8598-8787]:IfStatement[8598-8787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8616-8672]:Block[8616-8672]"
    }, {
      "left" : "return DateTimeZone.UTC;",
      "right" : "return DateTimeZone.UTC;",
      "info" : "ReturnStatement[8634-8658]:ReturnStatement[8634-8658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8678-8787]:Block[8678-8787]"
    }, {
      "left" : "id = printOffset(offset);",
      "right" : "id = printOffset(offset);",
      "info" : "ExpressionStatement[8696-8721]:ExpressionStatement[8696-8721]"
    }, {
      "left" : "return fixedOffsetZone(id, offset);",
      "right" : "return fixedOffsetZone(id, offset);",
      "info" : "ReturnStatement[8738-8773]:ReturnStatement[8738-8773]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The datetime zone id '\" + id + \"' is not recognised\");",
      "right" : "throw new IllegalArgumentException(\"The datetime zone id '\" + id + \"' is not recognised\");",
      "info" : "ThrowStatement[8806-8896]:ThrowStatement[8806-8896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9432-9493]:Block[9432-9493]"
    }, {
      "left" : "return forOffsetHoursMinutes(hoursOffset, 0);",
      "right" : "return forOffsetHoursMinutes(hoursOffset, 0);",
      "info" : "ReturnStatement[9442-9487]:ReturnStatement[9442-9487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10346-11224]:Block[10346-11224]"
    }, {
      "left" : "if (hoursOffset == 0 && minutesOffset == 0)",
      "right" : "if (hoursOffset == 0 && minutesOffset == 0)",
      "info" : "IfStatement[10356-10448]:IfStatement[10356-10448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10400-10448]:Block[10400-10448]"
    }, {
      "left" : "return DateTimeZone.UTC;",
      "right" : "return DateTimeZone.UTC;",
      "info" : "ReturnStatement[10414-10438]:ReturnStatement[10414-10438]"
    }, {
      "left" : "if (minutesOffset < 0 || minutesOffset > 59)",
      "right" : "if (minutesOffset < 0 || minutesOffset > 59)",
      "info" : "IfStatement[10457-10603]:IfStatement[10457-10603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10502-10603]:Block[10502-10603]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);",
      "right" : "throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);",
      "info" : "ThrowStatement[10516-10593]:ThrowStatement[10516-10593]"
    }, {
      "left" : "int offset = 0;",
      "right" : "int offset = 0;",
      "info" : "VariableDeclarationStatement[10612-10627]:VariableDeclarationStatement[10612-10627]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10636-11178]:TryStatement[10636-11178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10640-11064]:Block[10640-11064]"
    }, {
      "left" : "int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);",
      "right" : "int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);",
      "info" : "VariableDeclarationStatement[10654-10716]:VariableDeclarationStatement[10654-10716]"
    }, {
      "left" : "if (hoursInMinutes < 0)",
      "right" : "if (hoursInMinutes < 0)",
      "info" : "IfStatement[10729-10956]:IfStatement[10729-10956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10753-10852]:Block[10753-10852]"
    }, {
      "left" : "minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);",
      "right" : "minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);",
      "info" : "ExpressionStatement[10771-10838]:ExpressionStatement[10771-10838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10858-10956]:Block[10858-10956]"
    }, {
      "left" : "minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);",
      "right" : "minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);",
      "info" : "ExpressionStatement[10876-10942]:ExpressionStatement[10876-10942]"
    }, {
      "left" : "offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",
      "right" : "offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",
      "info" : "ExpressionStatement[10969-11054]:ExpressionStatement[10969-11054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11096-11178]:Block[11096-11178]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Offset is too large\");",
      "right" : "throw new IllegalArgumentException(\"Offset is too large\");",
      "info" : "ThrowStatement[11110-11168]:ThrowStatement[11110-11168]"
    }, {
      "left" : "return forOffsetMillis(offset);",
      "right" : "return forOffsetMillis(offset);",
      "info" : "ReturnStatement[11187-11218]:ReturnStatement[11187-11218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11508-11612]:Block[11508-11612]"
    }, {
      "left" : "String id = printOffset(millisOffset);",
      "right" : "String id = printOffset(millisOffset);",
      "info" : "VariableDeclarationStatement[11518-11556]:VariableDeclarationStatement[11518-11556]"
    }, {
      "left" : "return fixedOffsetZone(id, millisOffset);",
      "right" : "return fixedOffsetZone(id, millisOffset);",
      "info" : "ReturnStatement[11565-11606]:ReturnStatement[11565-11606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12352-13576]:Block[12352-13576]"
    }, {
      "left" : "if (zone == null)",
      "right" : "if (zone == null)",
      "info" : "IfStatement[12362-12424]:IfStatement[12362-12424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12380-12424]:Block[12380-12424]"
    }, {
      "left" : "return getDefault();",
      "right" : "return getDefault();",
      "info" : "ReturnStatement[12394-12414]:ReturnStatement[12394-12414]"
    }, {
      "left" : "final String id = zone.getID();",
      "right" : "final String id = zone.getID();",
      "info" : "VariableDeclarationStatement[12433-12464]:VariableDeclarationStatement[12433-12464]"
    }, {
      "left" : "if (id.equals(\"UTC\"))",
      "right" : "if (id.equals(\"UTC\"))",
      "info" : "IfStatement[12473-12543]:IfStatement[12473-12543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12495-12543]:Block[12495-12543]"
    }, {
      "left" : "return DateTimeZone.UTC;",
      "right" : "return DateTimeZone.UTC;",
      "info" : "ReturnStatement[12509-12533]:ReturnStatement[12509-12533]"
    }, {
      "left" : "DateTimeZone dtz = null;",
      "right" : "DateTimeZone dtz = null;",
      "info" : "VariableDeclarationStatement[12637-12661]:VariableDeclarationStatement[12637-12661]"
    }, {
      "left" : "String convId = getConvertedId(id);",
      "right" : "String convId = getConvertedId(id);",
      "info" : "VariableDeclarationStatement[12670-12705]:VariableDeclarationStatement[12670-12705]"
    }, {
      "left" : "if (convId != null)",
      "right" : "if (convId != null)",
      "info" : "IfStatement[12714-12790]:IfStatement[12714-12790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12734-12790]:Block[12734-12790]"
    }, {
      "left" : "dtz = cProvider.getZone(convId);",
      "right" : "dtz = cProvider.getZone(convId);",
      "info" : "ExpressionStatement[12748-12780]:ExpressionStatement[12748-12780]"
    }, {
      "left" : "if (dtz == null)",
      "right" : "if (dtz == null)",
      "info" : "IfStatement[12799-12868]:IfStatement[12799-12868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12816-12868]:Block[12816-12868]"
    }, {
      "left" : "dtz = cProvider.getZone(id);",
      "right" : "dtz = cProvider.getZone(id);",
      "info" : "ExpressionStatement[12830-12858]:ExpressionStatement[12830-12858]"
    }, {
      "left" : "if (dtz != null)",
      "right" : "if (dtz != null)",
      "info" : "IfStatement[12877-12929]:IfStatement[12877-12929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12894-12929]:Block[12894-12929]"
    }, {
      "left" : "return dtz;",
      "right" : "return dtz;",
      "info" : "ReturnStatement[12908-12919]:ReturnStatement[12908-12919]"
    }, {
      "left" : "if (convId == null)",
      "right" : "if (convId == null)",
      "info" : "IfStatement[12978-13471]:IfStatement[12978-13471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12998-13471]:Block[12998-13471]"
    }, {
      "left" : "convId = zone.getDisplayName();",
      "right" : "convId = zone.getDisplayName();",
      "info" : "ExpressionStatement[13012-13043]:ExpressionStatement[13012-13043]"
    }, {
      "left" : "if (convId.startsWith(\"GMT+\") || convId.startsWith(\"GMT-\"))",
      "right" : "if (convId.startsWith(\"GMT+\") || convId.startsWith(\"GMT-\"))",
      "info" : "IfStatement[13056-13461]:IfStatement[13056-13461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13116-13461]:Block[13116-13461]"
    }, {
      "left" : "convId = convId.substring(3);",
      "right" : "convId = convId.substring(3);",
      "info" : "ExpressionStatement[13134-13163]:ExpressionStatement[13134-13163]"
    }, {
      "left" : "int offset = parseOffset(convId);",
      "right" : "int offset = parseOffset(convId);",
      "info" : "VariableDeclarationStatement[13180-13213]:VariableDeclarationStatement[13180-13213]"
    }, {
      "left" : "if (offset == 0L)",
      "right" : "if (offset == 0L)",
      "info" : "IfStatement[13230-13447]:IfStatement[13230-13447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13248-13312]:Block[13248-13312]"
    }, {
      "left" : "return DateTimeZone.UTC;",
      "right" : "return DateTimeZone.UTC;",
      "info" : "ReturnStatement[13270-13294]:ReturnStatement[13270-13294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13318-13447]:Block[13318-13447]"
    }, {
      "left" : "convId = printOffset(offset);",
      "right" : "convId = printOffset(offset);",
      "info" : "ExpressionStatement[13340-13369]:ExpressionStatement[13340-13369]"
    }, {
      "left" : "return fixedOffsetZone(convId, offset);",
      "right" : "return fixedOffsetZone(convId, offset);",
      "info" : "ReturnStatement[13390-13429]:ReturnStatement[13390-13429]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The datetime zone id '\" + id + \"' is not recognised\");",
      "right" : "throw new IllegalArgumentException(\"The datetime zone id '\" + id + \"' is not recognised\");",
      "info" : "ThrowStatement[13480-13570]:ThrowStatement[13480-13570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13911-14520]:Block[13911-14520]"
    }, {
      "left" : "if (offset == 0)",
      "right" : "if (offset == 0)",
      "info" : "IfStatement[13921-13986]:IfStatement[13921-13986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13938-13986]:Block[13938-13986]"
    }, {
      "left" : "return DateTimeZone.UTC;",
      "right" : "return DateTimeZone.UTC;",
      "info" : "ReturnStatement[13952-13976]:ReturnStatement[13952-13976]"
    }, {
      "left" : "if (iFixedOffsetCache == null)",
      "right" : "if (iFixedOffsetCache == null)",
      "info" : "IfStatement[13995-14121]:IfStatement[13995-14121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14026-14121]:Block[14026-14121]"
    }, {
      "left" : "iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",
      "right" : "iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",
      "info" : "ExpressionStatement[14040-14111]:ExpressionStatement[14040-14111]"
    }, {
      "left" : "DateTimeZone zone;",
      "right" : "DateTimeZone zone;",
      "info" : "VariableDeclarationStatement[14130-14148]:VariableDeclarationStatement[14130-14148]"
    }, {
      "left" : "Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);",
      "right" : "Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);",
      "info" : "VariableDeclarationStatement[14157-14213]:VariableDeclarationStatement[14157-14213]"
    }, {
      "left" : "if (ref != null)",
      "right" : "if (ref != null)",
      "info" : "IfStatement[14222-14355]:IfStatement[14222-14355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14239-14355]:Block[14239-14355]"
    }, {
      "left" : "zone = ref.get();",
      "right" : "zone = ref.get();",
      "info" : "ExpressionStatement[14253-14270]:ExpressionStatement[14253-14270]"
    }, {
      "left" : "if (zone != null)",
      "right" : "if (zone != null)",
      "info" : "IfStatement[14283-14345]:IfStatement[14283-14345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14301-14345]:Block[14301-14345]"
    }, {
      "left" : "return zone;",
      "right" : "return zone;",
      "info" : "ReturnStatement[14319-14331]:ReturnStatement[14319-14331]"
    }, {
      "left" : "zone = new FixedDateTimeZone(id, null, offset, offset);",
      "right" : "zone = new FixedDateTimeZone(id, null, offset, offset);",
      "info" : "ExpressionStatement[14364-14419]:ExpressionStatement[14364-14419]"
    }, {
      "left" : "iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",
      "right" : "iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",
      "info" : "ExpressionStatement[14428-14493]:ExpressionStatement[14428-14493]"
    }, {
      "left" : "return zone;",
      "right" : "return zone;",
      "info" : "ReturnStatement[14502-14514]:ReturnStatement[14502-14514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14688-14725]:Block[14688-14725]"
    }, {
      "left" : "return cAvailableIDs;",
      "right" : "return cAvailableIDs;",
      "info" : "ReturnStatement[14698-14719]:ReturnStatement[14698-14719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15064-15097]:Block[15064-15097]"
    }, {
      "left" : "return cProvider;",
      "right" : "return cProvider;",
      "info" : "ReturnStatement[15074-15091]:ReturnStatement[15074-15091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15588-15805]:Block[15588-15805]"
    }, {
      "left" : "SecurityManager sm = System.getSecurityManager();",
      "right" : "SecurityManager sm = System.getSecurityManager();",
      "info" : "VariableDeclarationStatement[15598-15647]:VariableDeclarationStatement[15598-15647]"
    }, {
      "left" : "if (sm != null)",
      "right" : "if (sm != null)",
      "info" : "IfStatement[15656-15767]:IfStatement[15656-15767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15672-15767]:Block[15672-15767]"
    }, {
      "left" : "sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setProvider\"));",
      "right" : "sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setProvider\"));",
      "info" : "ExpressionStatement[15686-15757]:ExpressionStatement[15686-15757]"
    }, {
      "left" : "setProvider0(provider);",
      "right" : "setProvider0(provider);",
      "info" : "ExpressionStatement[15776-15799]:ExpressionStatement[15776-15799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16092-16736]:Block[16092-16736]"
    }, {
      "left" : "if (provider == null)",
      "right" : "if (provider == null)",
      "info" : "IfStatement[16102-16180]:IfStatement[16102-16180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16124-16180]:Block[16124-16180]"
    }, {
      "left" : "provider = getDefaultProvider();",
      "right" : "provider = getDefaultProvider();",
      "info" : "ExpressionStatement[16138-16170]:ExpressionStatement[16138-16170]"
    }, {
      "left" : "Set<String> ids = provider.getAvailableIDs();",
      "right" : "Set<String> ids = provider.getAvailableIDs();",
      "info" : "VariableDeclarationStatement[16189-16234]:VariableDeclarationStatement[16189-16234]"
    }, {
      "left" : "if (ids == null || ids.size() == 0)",
      "right" : "if (ids == null || ids.size() == 0)",
      "info" : "IfStatement[16243-16402]:IfStatement[16243-16402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16279-16402]:Block[16279-16402]"
    }, {
      "left" : "throw new IllegalArgumentException\n                (\"The provider doesn't have any available ids\");",
      "right" : "throw new IllegalArgumentException\n                (\"The provider doesn't have any available ids\");",
      "info" : "ThrowStatement[16293-16392]:ThrowStatement[16293-16392]"
    }, {
      "left" : "if (!ids.contains(\"UTC\"))",
      "right" : "if (!ids.contains(\"UTC\"))",
      "info" : "IfStatement[16411-16532]:IfStatement[16411-16532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16437-16532]:Block[16437-16532]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The provider doesn't support UTC\");",
      "right" : "throw new IllegalArgumentException(\"The provider doesn't support UTC\");",
      "info" : "ThrowStatement[16451-16522]:ThrowStatement[16451-16522]"
    }, {
      "left" : "if (!UTC.equals(provider.getZone(\"UTC\")))",
      "right" : "if (!UTC.equals(provider.getZone(\"UTC\")))",
      "info" : "IfStatement[16541-16671]:IfStatement[16541-16671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16583-16671]:Block[16583-16671]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Invalid UTC zone provided\");",
      "right" : "throw new IllegalArgumentException(\"Invalid UTC zone provided\");",
      "info" : "ThrowStatement[16597-16661]:ThrowStatement[16597-16661]"
    }, {
      "left" : "cProvider = provider;",
      "right" : "cProvider = provider;",
      "info" : "ExpressionStatement[16680-16701]:ExpressionStatement[16680-16701]"
    }, {
      "left" : "cAvailableIDs = ids;",
      "right" : "cAvailableIDs = ids;",
      "info" : "ExpressionStatement[16710-16730]:ExpressionStatement[16710-16730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17132-18153]:Block[17132-18153]"
    }, {
      "left" : "Provider provider = null;",
      "right" : "Provider provider = null;",
      "info" : "VariableDeclarationStatement[17142-17167]:VariableDeclarationStatement[17142-17167]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[17177-17723]:TryStatement[17177-17723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17181-17659]:Block[17181-17659]"
    }, {
      "left" : "String providerClass =\n                System.getProperty(\"org.joda.time.DateTimeZone.Provider\");",
      "right" : "String providerClass =\n                System.getProperty(\"org.joda.time.DateTimeZone.Provider\");",
      "info" : "VariableDeclarationStatement[17195-17292]:VariableDeclarationStatement[17195-17292]"
    }, {
      "left" : "if (providerClass != null)",
      "right" : "if (providerClass != null)",
      "info" : "IfStatement[17305-17649]:IfStatement[17305-17649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17332-17649]:Block[17332-17649]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[17350-17635]:TryStatement[17350-17635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17354-17459]:Block[17354-17459]"
    }, {
      "left" : "provider = (Provider) Class.forName(providerClass).newInstance();",
      "right" : "provider = (Provider) Class.forName(providerClass).newInstance();",
      "info" : "ExpressionStatement[17376-17441]:ExpressionStatement[17376-17441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17481-17635]:Block[17481-17635]"
    }, {
      "left" : "Thread thread = Thread.currentThread();",
      "right" : "Thread thread = Thread.currentThread();",
      "info" : "VariableDeclarationStatement[17503-17542]:VariableDeclarationStatement[17503-17542]"
    }, {
      "left" : "thread.getThreadGroup().uncaughtException(thread, ex);",
      "right" : "thread.getThreadGroup().uncaughtException(thread, ex);",
      "info" : "ExpressionStatement[17563-17617]:ExpressionStatement[17563-17617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17689-17723]:Block[17689-17723]"
    }, {
      "left" : "if (provider == null)",
      "right" : "if (provider == null)",
      "info" : "IfStatement[17733-18036]:IfStatement[17733-18036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17755-18036]:Block[17755-18036]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[17769-18026]:TryStatement[17769-18026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17773-17862]:Block[17773-17862]"
    }, {
      "left" : "provider = new ZoneInfoProvider(\"org/joda/time/tz/data\");",
      "right" : "provider = new ZoneInfoProvider(\"org/joda/time/tz/data\");",
      "info" : "ExpressionStatement[17791-17848]:ExpressionStatement[17791-17848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17884-18026]:Block[17884-18026]"
    }, {
      "left" : "Thread thread = Thread.currentThread();",
      "right" : "Thread thread = Thread.currentThread();",
      "info" : "VariableDeclarationStatement[17902-17941]:VariableDeclarationStatement[17902-17941]"
    }, {
      "left" : "thread.getThreadGroup().uncaughtException(thread, ex);",
      "right" : "thread.getThreadGroup().uncaughtException(thread, ex);",
      "info" : "ExpressionStatement[17958-18012]:ExpressionStatement[17958-18012]"
    }, {
      "left" : "if (provider == null)",
      "right" : "if (provider == null)",
      "info" : "IfStatement[18046-18121]:IfStatement[18046-18121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18068-18121]:Block[18068-18121]"
    }, {
      "left" : "provider = new UTCProvider();",
      "right" : "provider = new UTCProvider();",
      "info" : "ExpressionStatement[18082-18111]:ExpressionStatement[18082-18111]"
    }, {
      "left" : "return provider;",
      "right" : "return provider;",
      "info" : "ReturnStatement[18131-18147]:ReturnStatement[18131-18147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18494-18531]:Block[18494-18531]"
    }, {
      "left" : "return cNameProvider;",
      "right" : "return cNameProvider;",
      "info" : "ReturnStatement[18504-18525]:ReturnStatement[18504-18525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19036-19265]:Block[19036-19265]"
    }, {
      "left" : "SecurityManager sm = System.getSecurityManager();",
      "right" : "SecurityManager sm = System.getSecurityManager();",
      "info" : "VariableDeclarationStatement[19046-19095]:VariableDeclarationStatement[19046-19095]"
    }, {
      "left" : "if (sm != null)",
      "right" : "if (sm != null)",
      "info" : "IfStatement[19104-19219]:IfStatement[19104-19219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19120-19219]:Block[19120-19219]"
    }, {
      "left" : "sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setNameProvider\"));",
      "right" : "sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setNameProvider\"));",
      "info" : "ExpressionStatement[19134-19209]:ExpressionStatement[19134-19209]"
    }, {
      "left" : "setNameProvider0(nameProvider);",
      "right" : "setNameProvider0(nameProvider);",
      "info" : "ExpressionStatement[19228-19259]:ExpressionStatement[19228-19259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19568-19712]:Block[19568-19712]"
    }, {
      "left" : "if (nameProvider == null)",
      "right" : "if (nameProvider == null)",
      "info" : "IfStatement[19578-19668]:IfStatement[19578-19668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19604-19668]:Block[19604-19668]"
    }, {
      "left" : "nameProvider = getDefaultNameProvider();",
      "right" : "nameProvider = getDefaultNameProvider();",
      "info" : "ExpressionStatement[19618-19658]:ExpressionStatement[19618-19658]"
    }, {
      "left" : "cNameProvider = nameProvider;",
      "right" : "cNameProvider = nameProvider;",
      "info" : "ExpressionStatement[19677-19706]:ExpressionStatement[19677-19706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20024-20754]:Block[20024-20754]"
    }, {
      "left" : "NameProvider nameProvider = null;",
      "right" : "NameProvider nameProvider = null;",
      "info" : "VariableDeclarationStatement[20034-20067]:VariableDeclarationStatement[20034-20067]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[20076-20617]:TryStatement[20076-20617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20080-20554]:Block[20080-20554]"
    }, {
      "left" : "String providerClass = System.getProperty(\"org.joda.time.DateTimeZone.NameProvider\");",
      "right" : "String providerClass = System.getProperty(\"org.joda.time.DateTimeZone.NameProvider\");",
      "info" : "VariableDeclarationStatement[20094-20179]:VariableDeclarationStatement[20094-20179]"
    }, {
      "left" : "if (providerClass != null)",
      "right" : "if (providerClass != null)",
      "info" : "IfStatement[20192-20544]:IfStatement[20192-20544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20219-20544]:Block[20219-20544]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[20237-20530]:TryStatement[20237-20530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20241-20354]:Block[20241-20354]"
    }, {
      "left" : "nameProvider = (NameProvider) Class.forName(providerClass).newInstance();",
      "right" : "nameProvider = (NameProvider) Class.forName(providerClass).newInstance();",
      "info" : "ExpressionStatement[20263-20336]:ExpressionStatement[20263-20336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20376-20530]:Block[20376-20530]"
    }, {
      "left" : "Thread thread = Thread.currentThread();",
      "right" : "Thread thread = Thread.currentThread();",
      "info" : "VariableDeclarationStatement[20398-20437]:VariableDeclarationStatement[20398-20437]"
    }, {
      "left" : "thread.getThreadGroup().uncaughtException(thread, ex);",
      "right" : "thread.getThreadGroup().uncaughtException(thread, ex);",
      "info" : "ExpressionStatement[20458-20512]:ExpressionStatement[20458-20512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20584-20617]:Block[20584-20617]"
    }, {
      "left" : "if (nameProvider == null)",
      "right" : "if (nameProvider == null)",
      "info" : "IfStatement[20627-20718]:IfStatement[20627-20718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20653-20718]:Block[20653-20718]"
    }, {
      "left" : "nameProvider = new DefaultNameProvider();",
      "right" : "nameProvider = new DefaultNameProvider();",
      "info" : "ExpressionStatement[20667-20708]:ExpressionStatement[20667-20708]"
    }, {
      "left" : "return nameProvider;",
      "right" : "return nameProvider;",
      "info" : "ReturnStatement[20728-20748]:ReturnStatement[20728-20748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21060-22880]:Block[21060-22897]"
    }, {
      "left" : "Map<String, String> map = cZoneIdConversion;",
      "right" : "Map<String, String> map = cZoneIdConversion;",
      "info" : "VariableDeclarationStatement[21070-21114]:VariableDeclarationStatement[21070-21114]"
    }, {
      "left" : "if (map == null)",
      "right" : "if (map == null)",
      "info" : "IfStatement[21123-22846]:IfStatement[21123-22863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21140-22846]:Block[21140-22863]"
    }, {
      "left" : "map = new HashMap<String, String>();",
      "right" : "map = new HashMap<String, String>();",
      "info" : "ExpressionStatement[21208-21244]:ExpressionStatement[21208-21244]"
    }, {
      "left" : "map.put(\"GMT\", \"UTC\");",
      "right" : "map.put(\"GMT\", \"UTC\");",
      "info" : "ExpressionStatement[21257-21279]:ExpressionStatement[21257-21279]"
    }, {
      "left" : "map.put(\"MIT\", \"Pacific/Apia\");",
      "right" : "map.put(\"MIT\", \"Pacific/Apia\");",
      "info" : "ExpressionStatement[21292-21323]:ExpressionStatement[21467-21498]"
    }, {
      "left" : "map.put(\"HST\", \"Pacific/Honolulu\");",
      "right" : "map.put(\"HST\", \"Pacific/Honolulu\");",
      "info" : "ExpressionStatement[21336-21371]:ExpressionStatement[21511-21546]"
    }, {
      "left" : "map.put(\"AST\", \"America/Anchorage\");",
      "right" : "map.put(\"AST\", \"America/Anchorage\");",
      "info" : "ExpressionStatement[21407-21443]:ExpressionStatement[21582-21618]"
    }, {
      "left" : "map.put(\"PST\", \"America/Los_Angeles\");",
      "right" : "map.put(\"PST\", \"America/Los_Angeles\");",
      "info" : "ExpressionStatement[21456-21494]:ExpressionStatement[21631-21669]"
    }, {
      "left" : "map.put(\"MST\", \"America/Denver\");",
      "right" : "map.put(\"MST\", \"America/Denver\");",
      "info" : "ExpressionStatement[21507-21540]:ExpressionStatement[21682-21715]"
    }, {
      "left" : "map.put(\"PNT\", \"America/Phoenix\");",
      "right" : "map.put(\"PNT\", \"America/Phoenix\");",
      "info" : "ExpressionStatement[21576-21610]:ExpressionStatement[21751-21785]"
    }, {
      "left" : "map.put(\"CST\", \"America/Chicago\");",
      "right" : "map.put(\"CST\", \"America/Chicago\");",
      "info" : "ExpressionStatement[21623-21657]:ExpressionStatement[21798-21832]"
    }, {
      "left" : "map.put(\"EST\", \"America/New_York\");",
      "right" : "map.put(\"EST\", \"America/New_York\");",
      "info" : "ExpressionStatement[21670-21705]:ExpressionStatement[21845-21880]"
    }, {
      "left" : "map.put(\"IET\", \"America/Indianapolis\");",
      "right" : "map.put(\"IET\", \"America/Indiana/Indianapolis\");",
      "info" : "ExpressionStatement[21741-21780]:ExpressionStatement[21916-21963]"
    }, {
      "left" : "map.put(\"PRT\", \"America/Puerto_Rico\");",
      "right" : "map.put(\"PRT\", \"America/Puerto_Rico\");",
      "info" : "ExpressionStatement[21793-21831]:ExpressionStatement[21976-22014]"
    }, {
      "left" : "map.put(\"CNT\", \"America/St_Johns\");",
      "right" : "map.put(\"CNT\", \"America/St_Johns\");",
      "info" : "ExpressionStatement[21844-21879]:ExpressionStatement[22027-22062]"
    }, {
      "left" : "map.put(\"AGT\", \"America/Buenos_Aires\");",
      "right" : "map.put(\"AGT\", \"America/Argentina/Buenos_Aires\");",
      "info" : "ExpressionStatement[21892-21931]:ExpressionStatement[22075-22124]"
    }, {
      "left" : "map.put(\"BET\", \"America/Sao_Paulo\");",
      "right" : "map.put(\"BET\", \"America/Sao_Paulo\");",
      "info" : "ExpressionStatement[21944-21980]:ExpressionStatement[22137-22173]"
    }, {
      "left" : "map.put(\"WET\", \"Europe/London\");",
      "right" : "map.put(\"EET\", \"EET\");",
      "info" : "ExpressionStatement[21993-22025]:ExpressionStatement[21432-21454]"
    }, {
      "left" : "map.put(\"ECT\", \"Europe/Paris\");",
      "right" : "map.put(\"ECT\", \"CET\");",
      "info" : "ExpressionStatement[22038-22069]:ExpressionStatement[21397-21419]"
    }, {
      "left" : "map.put(\"ART\", \"Africa/Cairo\");",
      "right" : "map.put(\"ART\", \"Africa/Cairo\");",
      "info" : "ExpressionStatement[22082-22113]:ExpressionStatement[22186-22217]"
    }, {
      "left" : "map.put(\"CAT\", \"Africa/Harare\");",
      "right" : "map.put(\"CAT\", \"Africa/Harare\");",
      "info" : "ExpressionStatement[22126-22158]:ExpressionStatement[22230-22262]"
    }, {
      "left" : "map.put(\"EET\", \"Europe/Bucharest\");",
      "right" : "map.put(\"MET\", \"CET\");",
      "info" : "ExpressionStatement[22171-22206]:ExpressionStatement[21362-21384]"
    }, {
      "left" : "map.put(\"EAT\", \"Africa/Addis_Ababa\");",
      "right" : "map.put(\"EAT\", \"Africa/Addis_Ababa\");",
      "info" : "ExpressionStatement[22219-22256]:ExpressionStatement[22275-22312]"
    }, {
      "left" : "map.put(\"MET\", \"Asia/Tehran\");",
      "right" : "map.put(\"IST\", \"Asia/Kolkata\");",
      "info" : "ExpressionStatement[22269-22299]:ExpressionStatement[22413-22444]"
    }, {
      "left" : "map.put(\"NET\", \"Asia/Yerevan\");",
      "right" : "map.put(\"NET\", \"Asia/Yerevan\");",
      "info" : "ExpressionStatement[22312-22343]:ExpressionStatement[22325-22356]"
    }, {
      "left" : "map.put(\"PLT\", \"Asia/Karachi\");",
      "right" : "map.put(\"PLT\", \"Asia/Karachi\");",
      "info" : "ExpressionStatement[22356-22387]:ExpressionStatement[22369-22400]"
    }, {
      "left" : "map.put(\"IST\", \"Asia/Calcutta\");",
      "right" : "map.put(\"VST\", \"Asia/Ho_Chi_Minh\");",
      "info" : "ExpressionStatement[22400-22432]:ExpressionStatement[22499-22534]"
    }, {
      "left" : "map.put(\"BST\", \"Asia/Dhaka\");",
      "right" : "map.put(\"BST\", \"Asia/Dhaka\");",
      "info" : "ExpressionStatement[22445-22474]:ExpressionStatement[22457-22486]"
    }, {
      "left" : "map.put(\"VST\", \"Asia/Saigon\");",
      "right" : "map.put(\"CET\", \"CET\");",
      "info" : "ExpressionStatement[22487-22517]:ExpressionStatement[21327-21349]"
    }, {
      "left" : "map.put(\"CTT\", \"Asia/Shanghai\");",
      "right" : "map.put(\"CTT\", \"Asia/Shanghai\");",
      "info" : "ExpressionStatement[22530-22562]:ExpressionStatement[22547-22579]"
    }, {
      "left" : "map.put(\"JST\", \"Asia/Tokyo\");",
      "right" : "map.put(\"JST\", \"Asia/Tokyo\");",
      "info" : "ExpressionStatement[22575-22604]:ExpressionStatement[22592-22621]"
    }, {
      "left" : "map.put(\"ACT\", \"Australia/Darwin\");",
      "right" : "map.put(\"ACT\", \"Australia/Darwin\");",
      "info" : "ExpressionStatement[22617-22652]:ExpressionStatement[22634-22669]"
    }, {
      "left" : "map.put(\"AET\", \"Australia/Sydney\");",
      "right" : "map.put(\"AET\", \"Australia/Sydney\");",
      "info" : "ExpressionStatement[22665-22700]:ExpressionStatement[22682-22717]"
    }, {
      "left" : "map.put(\"SST\", \"Pacific/Guadalcanal\");",
      "right" : "map.put(\"SST\", \"Pacific/Guadalcanal\");",
      "info" : "ExpressionStatement[22713-22751]:ExpressionStatement[22730-22768]"
    }, {
      "left" : "map.put(\"NST\", \"Pacific/Auckland\");",
      "right" : "map.put(\"NST\", \"Pacific/Auckland\");",
      "info" : "ExpressionStatement[22764-22799]:ExpressionStatement[22781-22816]"
    }, {
      "left" : "cZoneIdConversion = map;",
      "right" : "cZoneIdConversion = map;",
      "info" : "ExpressionStatement[22812-22836]:ExpressionStatement[22829-22853]"
    }, {
      "left" : "return map.get(id);",
      "right" : "return map.get(id);",
      "info" : "ReturnStatement[22855-22874]:ReturnStatement[22872-22891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22929-23579]:Block[22946-23596]"
    }, {
      "left" : "Chronology chrono = new BaseChronology() {\n            public DateTimeZone getZone() {\n                return null;\n            }\n            public Chronology withUTC() {\n                return this;\n            }\n            public Chronology withZone(DateTimeZone zone) {\n                return this;\n            }\n            public String toString() {\n                return getClass().getName();\n            }\n        };",
      "right" : "Chronology chrono = new BaseChronology() {\n            public DateTimeZone getZone() {\n                return null;\n            }\n            public Chronology withUTC() {\n                return this;\n            }\n            public Chronology withZone(DateTimeZone zone) {\n                return this;\n            }\n            public String toString() {\n                return getClass().getName();\n            }\n        };",
      "info" : "VariableDeclarationStatement[23066-23492]:VariableDeclarationStatement[23083-23509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23151-23195]:Block[23168-23212]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[23169-23181]:ReturnStatement[23186-23198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23236-23280]:Block[23253-23297]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[23254-23266]:ReturnStatement[23271-23283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23339-23383]:Block[23356-23400]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[23357-23369]:ReturnStatement[23374-23386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23421-23481]:Block[23438-23498]"
    }, {
      "left" : "return getClass().getName();",
      "right" : "return getClass().getName();",
      "info" : "ReturnStatement[23439-23467]:ReturnStatement[23456-23484]"
    }, {
      "left" : "return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);",
      "right" : "return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);",
      "info" : "ReturnStatement[23501-23573]:ReturnStatement[23518-23590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23911-24987]:Block[23928-25004]"
    }, {
      "left" : "StringBuffer buf = new StringBuffer();",
      "right" : "StringBuffer buf = new StringBuffer();",
      "info" : "VariableDeclarationStatement[23921-23959]:VariableDeclarationStatement[23938-23976]"
    }, {
      "left" : "if (offset >= 0)",
      "right" : "if (offset >= 0)",
      "info" : "IfStatement[23968-24101]:IfStatement[23985-24118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23985-24025]:Block[24002-24042]"
    }, {
      "left" : "buf.append('+');",
      "right" : "buf.append('+');",
      "info" : "ExpressionStatement[23999-24015]:ExpressionStatement[24016-24032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24031-24101]:Block[24048-24118]"
    }, {
      "left" : "buf.append('-');",
      "right" : "buf.append('-');",
      "info" : "ExpressionStatement[24045-24061]:ExpressionStatement[24062-24078]"
    }, {
      "left" : "offset = -offset;",
      "right" : "offset = -offset;",
      "info" : "ExpressionStatement[24074-24091]:ExpressionStatement[24091-24108]"
    }, {
      "left" : "int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;",
      "right" : "int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;",
      "info" : "VariableDeclarationStatement[24111-24166]:VariableDeclarationStatement[24128-24183]"
    }, {
      "left" : "FormatUtils.appendPaddedInteger(buf, hours, 2);",
      "right" : "FormatUtils.appendPaddedInteger(buf, hours, 2);",
      "info" : "ExpressionStatement[24175-24222]:ExpressionStatement[24192-24239]"
    }, {
      "left" : "offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;",
      "right" : "offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;",
      "info" : "ExpressionStatement[24231-24289]:ExpressionStatement[24248-24306]"
    }, {
      "left" : "int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;",
      "right" : "int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;",
      "info" : "VariableDeclarationStatement[24299-24358]:VariableDeclarationStatement[24316-24375]"
    }, {
      "left" : "buf.append(':');",
      "right" : "buf.append(':');",
      "info" : "ExpressionStatement[24367-24383]:ExpressionStatement[24384-24400]"
    }, {
      "left" : "FormatUtils.appendPaddedInteger(buf, minutes, 2);",
      "right" : "FormatUtils.appendPaddedInteger(buf, minutes, 2);",
      "info" : "ExpressionStatement[24392-24441]:ExpressionStatement[24409-24458]"
    }, {
      "left" : "offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;",
      "right" : "offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;",
      "info" : "ExpressionStatement[24450-24506]:ExpressionStatement[24467-24523]"
    }, {
      "left" : "if (offset == 0)",
      "right" : "if (offset == 0)",
      "info" : "IfStatement[24515-24578]:IfStatement[24532-24595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24532-24578]:Block[24549-24595]"
    }, {
      "left" : "return buf.toString();",
      "right" : "return buf.toString();",
      "info" : "ReturnStatement[24546-24568]:ReturnStatement[24563-24585]"
    }, {
      "left" : "int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;",
      "right" : "int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;",
      "info" : "VariableDeclarationStatement[24588-24647]:VariableDeclarationStatement[24605-24664]"
    }, {
      "left" : "buf.append(':');",
      "right" : "buf.append(':');",
      "info" : "ExpressionStatement[24656-24672]:ExpressionStatement[24673-24689]"
    }, {
      "left" : "FormatUtils.appendPaddedInteger(buf, seconds, 2);",
      "right" : "FormatUtils.appendPaddedInteger(buf, seconds, 2);",
      "info" : "ExpressionStatement[24681-24730]:ExpressionStatement[24698-24747]"
    }, {
      "left" : "offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;",
      "right" : "offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;",
      "info" : "ExpressionStatement[24739-24795]:ExpressionStatement[24756-24812]"
    }, {
      "left" : "if (offset == 0)",
      "right" : "if (offset == 0)",
      "info" : "IfStatement[24804-24867]:IfStatement[24821-24884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24821-24867]:Block[24838-24884]"
    }, {
      "left" : "return buf.toString();",
      "right" : "return buf.toString();",
      "info" : "ReturnStatement[24835-24857]:ReturnStatement[24852-24874]"
    }, {
      "left" : "buf.append('.');",
      "right" : "buf.append('.');",
      "info" : "ExpressionStatement[24877-24893]:ExpressionStatement[24894-24910]"
    }, {
      "left" : "FormatUtils.appendPaddedInteger(buf, offset, 3);",
      "right" : "FormatUtils.appendPaddedInteger(buf, offset, 3);",
      "info" : "ExpressionStatement[24902-24950]:ExpressionStatement[24919-24967]"
    }, {
      "left" : "return buf.toString();",
      "right" : "return buf.toString();",
      "info" : "ReturnStatement[24959-24981]:ReturnStatement[24976-24998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25178-25418]:Block[25195-25435]"
    }, {
      "left" : "if (cOffsetFormatter == null)",
      "right" : "if (cOffsetFormatter == null)",
      "info" : "IfStatement[25188-25379]:IfStatement[25205-25396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25218-25379]:Block[25235-25396]"
    }, {
      "left" : "cOffsetFormatter = new DateTimeFormatterBuilder()\n                .appendTimeZoneOffset(null, true, 2, 4)\n                .toFormatter();",
      "right" : "cOffsetFormatter = new DateTimeFormatterBuilder()\n                .appendTimeZoneOffset(null, true, 2, 4)\n                .toFormatter();",
      "info" : "ExpressionStatement[25232-25369]:ExpressionStatement[25249-25386]"
    }, {
      "left" : "return cOffsetFormatter;",
      "right" : "return cOffsetFormatter;",
      "info" : "ReturnStatement[25388-25412]:ReturnStatement[25405-25429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25734-25866]:Block[25751-25883]"
    }, {
      "left" : "if (id == null)",
      "right" : "if (id == null)",
      "info" : "IfStatement[25744-25842]:IfStatement[25761-25859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25760-25842]:Block[25777-25859]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Id must not be null\");",
      "right" : "throw new IllegalArgumentException(\"Id must not be null\");",
      "info" : "ThrowStatement[25774-25832]:ThrowStatement[25791-25849]"
    }, {
      "left" : "iID = id;",
      "right" : "iID = id;",
      "info" : "ExpressionStatement[25851-25860]:ExpressionStatement[25868-25877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26125-26152]:Block[26142-26169]"
    }, {
      "left" : "return iID;",
      "right" : "return iID;",
      "info" : "ReturnStatement[26135-26146]:ReturnStatement[26152-26163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27000-27051]:Block[27017-27068]"
    }, {
      "left" : "return getShortName(instant, null);",
      "right" : "return getShortName(instant, null);",
      "info" : "ReturnStatement[27010-27045]:ReturnStatement[27027-27062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27588-27971]:Block[27605-27988]"
    }, {
      "left" : "if (locale == null)",
      "right" : "if (locale == null)",
      "info" : "IfStatement[27598-27671]:IfStatement[27615-27688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27618-27671]:Block[27635-27688]"
    }, {
      "left" : "locale = Locale.getDefault();",
      "right" : "locale = Locale.getDefault();",
      "info" : "ExpressionStatement[27632-27661]:ExpressionStatement[27649-27678]"
    }, {
      "left" : "String nameKey = getNameKey(instant);",
      "right" : "String nameKey = getNameKey(instant);",
      "info" : "VariableDeclarationStatement[27680-27717]:VariableDeclarationStatement[27697-27734]"
    }, {
      "left" : "if (nameKey == null)",
      "right" : "if (nameKey == null)",
      "info" : "IfStatement[27726-27782]:IfStatement[27743-27799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27747-27782]:Block[27764-27799]"
    }, {
      "left" : "return iID;",
      "right" : "return iID;",
      "info" : "ReturnStatement[27761-27772]:ReturnStatement[27778-27789]"
    }, {
      "left" : "String name = cNameProvider.getShortName(locale, iID, nameKey);",
      "right" : "String name = cNameProvider.getShortName(locale, iID, nameKey);",
      "info" : "VariableDeclarationStatement[27791-27854]:VariableDeclarationStatement[27808-27871]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[27863-27917]:IfStatement[27880-27934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27881-27917]:Block[27898-27934]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[27895-27907]:ReturnStatement[27912-27924]"
    }, {
      "left" : "return printOffset(getOffset(instant));",
      "right" : "return printOffset(getOffset(instant));",
      "info" : "ReturnStatement[27926-27965]:ReturnStatement[27943-27982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28435-28481]:Block[28452-28498]"
    }, {
      "left" : "return getName(instant, null);",
      "right" : "return getName(instant, null);",
      "info" : "ReturnStatement[28445-28475]:ReturnStatement[28462-28492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29011-29389]:Block[29028-29406]"
    }, {
      "left" : "if (locale == null)",
      "right" : "if (locale == null)",
      "info" : "IfStatement[29021-29094]:IfStatement[29038-29111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29041-29094]:Block[29058-29111]"
    }, {
      "left" : "locale = Locale.getDefault();",
      "right" : "locale = Locale.getDefault();",
      "info" : "ExpressionStatement[29055-29084]:ExpressionStatement[29072-29101]"
    }, {
      "left" : "String nameKey = getNameKey(instant);",
      "right" : "String nameKey = getNameKey(instant);",
      "info" : "VariableDeclarationStatement[29103-29140]:VariableDeclarationStatement[29120-29157]"
    }, {
      "left" : "if (nameKey == null)",
      "right" : "if (nameKey == null)",
      "info" : "IfStatement[29149-29205]:IfStatement[29166-29222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29170-29205]:Block[29187-29222]"
    }, {
      "left" : "return iID;",
      "right" : "return iID;",
      "info" : "ReturnStatement[29184-29195]:ReturnStatement[29201-29212]"
    }, {
      "left" : "String name = cNameProvider.getName(locale, iID, nameKey);",
      "right" : "String name = cNameProvider.getName(locale, iID, nameKey);",
      "info" : "VariableDeclarationStatement[29214-29272]:VariableDeclarationStatement[29231-29289]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[29281-29335]:IfStatement[29298-29352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29299-29335]:Block[29316-29352]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[29313-29325]:ReturnStatement[29330-29342]"
    }, {
      "left" : "return printOffset(getOffset(instant));",
      "right" : "return printOffset(getOffset(instant));",
      "info" : "ReturnStatement[29344-29383]:ReturnStatement[29361-29400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29974-30134]:Block[29991-30151]"
    }, {
      "left" : "if (instant == null)",
      "right" : "if (instant == null)",
      "info" : "IfStatement[29984-30081]:IfStatement[30001-30098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30005-30081]:Block[30022-30098]"
    }, {
      "left" : "return getOffset(DateTimeUtils.currentTimeMillis());",
      "right" : "return getOffset(DateTimeUtils.currentTimeMillis());",
      "info" : "ReturnStatement[30019-30071]:ReturnStatement[30036-30088]"
    }, {
      "left" : "return getOffset(instant.getMillis());",
      "right" : "return getOffset(instant.getMillis());",
      "info" : "ReturnStatement[30090-30128]:ReturnStatement[30107-30145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31290-31362]:Block[31307-31379]"
    }, {
      "left" : "return getOffset(instant) == getStandardOffset(instant);",
      "right" : "return getOffset(instant) == getStandardOffset(instant);",
      "info" : "ReturnStatement[31300-31356]:ReturnStatement[31317-31373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33009-34518]:Block[33026-34535]"
    }, {
      "left" : "final int offsetLocal = getOffset(instantLocal);",
      "right" : "final int offsetLocal = getOffset(instantLocal);",
      "info" : "VariableDeclarationStatement[33078-33126]:VariableDeclarationStatement[33095-33143]"
    }, {
      "left" : "final long instantAdjusted = instantLocal - offsetLocal;",
      "right" : "final long instantAdjusted = instantLocal - offsetLocal;",
      "info" : "VariableDeclarationStatement[33207-33263]:VariableDeclarationStatement[33224-33280]"
    }, {
      "left" : "final int offsetAdjusted = getOffset(instantAdjusted);",
      "right" : "final int offsetAdjusted = getOffset(instantAdjusted);",
      "info" : "VariableDeclarationStatement[33272-33326]:VariableDeclarationStatement[33289-33343]"
    }, {
      "left" : "if (offsetLocal != offsetAdjusted)",
      "right" : "if (offsetLocal != offsetAdjusted)",
      "info" : "IfStatement[33400-34481]:IfStatement[33417-34498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33435-34112]:Block[33452-34129]"
    }, {
      "left" : "if ((offsetLocal - offsetAdjusted) < 0)",
      "right" : "if ((offsetLocal - offsetAdjusted) < 0)",
      "info" : "IfStatement[33601-34102]:IfStatement[33618-34119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33641-34102]:Block[33658-34119]"
    }, {
      "left" : "long nextLocal = nextTransition(instantAdjusted);",
      "right" : "long nextLocal = nextTransition(instantAdjusted);",
      "info" : "VariableDeclarationStatement[33849-33898]:VariableDeclarationStatement[33866-33915]"
    }, {
      "left" : "long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);",
      "right" : "long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);",
      "info" : "VariableDeclarationStatement[33915-33981]:VariableDeclarationStatement[33932-33998]"
    }, {
      "left" : "if (nextLocal != nextAdjusted)",
      "right" : "if (nextLocal != nextAdjusted)",
      "info" : "IfStatement[33998-34088]:IfStatement[34015-34105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34029-34088]:Block[34046-34105]"
    }, {
      "left" : "return offsetLocal;",
      "right" : "return offsetLocal;",
      "info" : "ReturnStatement[34051-34070]:ReturnStatement[34068-34087]"
    }, {
      "left" : "if (offsetLocal > 0)",
      "right" : "if (offsetLocal > 0)",
      "info" : "IfStatement[34118-34481]:IfStatement[34135-34498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34139-34481]:Block[34156-34498]"
    }, {
      "left" : "long prev = previousTransition(instantAdjusted);",
      "right" : "long prev = previousTransition(instantAdjusted);",
      "info" : "VariableDeclarationStatement[34153-34201]:VariableDeclarationStatement[34170-34218]"
    }, {
      "left" : "if (prev < instantAdjusted)",
      "right" : "if (prev < instantAdjusted)",
      "info" : "IfStatement[34214-34471]:IfStatement[34231-34488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34242-34471]:Block[34259-34488]"
    }, {
      "left" : "int offsetPrev = getOffset(prev);",
      "right" : "int offsetPrev = getOffset(prev);",
      "info" : "VariableDeclarationStatement[34260-34293]:VariableDeclarationStatement[34277-34310]"
    }, {
      "left" : "int diff = offsetPrev - offsetLocal;",
      "right" : "int diff = offsetPrev - offsetLocal;",
      "info" : "VariableDeclarationStatement[34310-34346]:VariableDeclarationStatement[34327-34363]"
    }, {
      "left" : "if (instantAdjusted - prev <= diff)",
      "right" : "if (instantAdjusted - prev <= diff)",
      "info" : "IfStatement[34363-34457]:IfStatement[34380-34474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34399-34457]:Block[34416-34474]"
    }, {
      "left" : "return offsetPrev;",
      "right" : "return offsetPrev;",
      "info" : "ReturnStatement[34421-34439]:ReturnStatement[34438-34456]"
    }, {
      "left" : "return offsetAdjusted;",
      "right" : "return offsetAdjusted;",
      "info" : "ReturnStatement[34490-34512]:ReturnStatement[34507-34529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35015-35396]:Block[35032-35413]"
    }, {
      "left" : "int offset = getOffset(instantUTC);",
      "right" : "int offset = getOffset(instantUTC);",
      "info" : "VariableDeclarationStatement[35025-35060]:VariableDeclarationStatement[35042-35077]"
    }, {
      "left" : "long instantLocal = instantUTC + offset;",
      "right" : "long instantLocal = instantUTC + offset;",
      "info" : "VariableDeclarationStatement[35069-35109]:VariableDeclarationStatement[35086-35126]"
    }, {
      "left" : "if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0)",
      "right" : "if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0)",
      "info" : "IfStatement[35197-35361]:IfStatement[35214-35378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35264-35361]:Block[35281-35378]"
    }, {
      "left" : "throw new ArithmeticException(\"Adding time zone offset caused overflow\");",
      "right" : "throw new ArithmeticException(\"Adding time zone offset caused overflow\");",
      "info" : "ThrowStatement[35278-35351]:ThrowStatement[35295-35368]"
    }, {
      "left" : "return instantLocal;",
      "right" : "return instantLocal;",
      "info" : "ReturnStatement[35370-35390]:ReturnStatement[35387-35407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36399-36738]:Block[36416-36755]"
    }, {
      "left" : "int offsetOriginal = getOffset(originalInstantUTC);",
      "right" : "int offsetOriginal = getOffset(originalInstantUTC);",
      "info" : "VariableDeclarationStatement[36409-36460]:VariableDeclarationStatement[36426-36477]"
    }, {
      "left" : "long instantUTC = instantLocal - offsetOriginal;",
      "right" : "long instantUTC = instantLocal - offsetOriginal;",
      "info" : "VariableDeclarationStatement[36469-36517]:VariableDeclarationStatement[36486-36534]"
    }, {
      "left" : "int offsetLocalFromOriginal = getOffset(instantUTC);",
      "right" : "int offsetLocalFromOriginal = getOffset(instantUTC);",
      "info" : "VariableDeclarationStatement[36526-36578]:VariableDeclarationStatement[36543-36595]"
    }, {
      "left" : "if (offsetLocalFromOriginal == offsetOriginal)",
      "right" : "if (offsetLocalFromOriginal == offsetOriginal)",
      "info" : "IfStatement[36587-36676]:IfStatement[36604-36693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36634-36676]:Block[36651-36693]"
    }, {
      "left" : "return instantUTC;",
      "right" : "return instantUTC;",
      "info" : "ReturnStatement[36648-36666]:ReturnStatement[36665-36683]"
    }, {
      "left" : "return convertLocalToUTC(instantLocal, strict);",
      "right" : "return convertLocalToUTC(instantLocal, strict);",
      "info" : "ReturnStatement[36685-36732]:ReturnStatement[36702-36749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37414-39703]:Block[37431-39720]"
    }, {
      "left" : "int offsetLocal = getOffset(instantLocal);",
      "right" : "int offsetLocal = getOffset(instantLocal);",
      "info" : "VariableDeclarationStatement[37483-37525]:VariableDeclarationStatement[37500-37542]"
    }, {
      "left" : "int offset = getOffset(instantLocal - offsetLocal);",
      "right" : "int offset = getOffset(instantLocal - offsetLocal);",
      "info" : "VariableDeclarationStatement[37606-37657]:VariableDeclarationStatement[37623-37674]"
    }, {
      "left" : "if (offsetLocal != offset)",
      "right" : "if (offsetLocal != offset)",
      "info" : "IfStatement[37731-39331]:IfStatement[37748-39348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37758-39331]:Block[37775-39348]"
    }, {
      "left" : "if (strict || offsetLocal < 0)",
      "right" : "if (strict || offsetLocal < 0)",
      "info" : "IfStatement[37977-39321]:IfStatement[37994-39338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38008-39321]:Block[38025-39338]"
    }, {
      "left" : "long nextLocal = nextTransition(instantLocal - offsetLocal);",
      "right" : "long nextLocal = nextTransition(instantLocal - offsetLocal);",
      "info" : "VariableDeclarationStatement[38080-38140]:VariableDeclarationStatement[38097-38157]"
    }, {
      "left" : "if (nextLocal == (instantLocal - offsetLocal))",
      "right" : "if (nextLocal == (instantLocal - offsetLocal))",
      "info" : "IfStatement[38157-38271]:IfStatement[38174-38288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38204-38271]:Block[38221-38288]"
    }, {
      "left" : "nextLocal = Long.MAX_VALUE;",
      "right" : "nextLocal = Long.MAX_VALUE;",
      "info" : "ExpressionStatement[38226-38253]:ExpressionStatement[38243-38270]"
    }, {
      "left" : "long nextAdjusted = nextTransition(instantLocal - offset);",
      "right" : "long nextAdjusted = nextTransition(instantLocal - offset);",
      "info" : "VariableDeclarationStatement[38288-38346]:VariableDeclarationStatement[38305-38363]"
    }, {
      "left" : "if (nextAdjusted == (instantLocal - offset))",
      "right" : "if (nextAdjusted == (instantLocal - offset))",
      "info" : "IfStatement[38363-38478]:IfStatement[38380-38495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38408-38478]:Block[38425-38495]"
    }, {
      "left" : "nextAdjusted = Long.MAX_VALUE;",
      "right" : "nextAdjusted = Long.MAX_VALUE;",
      "info" : "ExpressionStatement[38430-38460]:ExpressionStatement[38447-38477]"
    }, {
      "left" : "if (nextLocal != nextAdjusted)",
      "right" : "if (nextLocal != nextAdjusted)",
      "info" : "IfStatement[38495-39307]:IfStatement[38512-39324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38526-39307]:Block[38543-39324]"
    }, {
      "left" : "if (strict)",
      "right" : "if (strict)",
      "info" : "IfStatement[38597-39289]:IfStatement[38614-39306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38609-38978]:Block[38626-38995]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition: \" +\n                                DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS\").print(new Instant(instantLocal)) +\n                                \" (\" + getID() + \")\");",
      "right" : "throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition: \" +\n                                DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS\").print(new Instant(instantLocal)) +\n                                \" (\" + getID() + \")\");",
      "info" : "ThrowStatement[38688-38956]:ThrowStatement[38705-38973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38984-39289]:Block[39001-39306]"
    }, {
      "left" : "offset = offsetLocal;",
      "right" : "offset = offsetLocal;",
      "info" : "ExpressionStatement[39246-39267]:ExpressionStatement[39263-39284]"
    }, {
      "left" : "long instantUTC = instantLocal - offset;",
      "right" : "long instantUTC = instantLocal - offset;",
      "info" : "VariableDeclarationStatement[39370-39410]:VariableDeclarationStatement[39387-39427]"
    }, {
      "left" : "if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0)",
      "right" : "if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0)",
      "info" : "IfStatement[39500-39670]:IfStatement[39517-39687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39568-39670]:Block[39585-39687]"
    }, {
      "left" : "throw new ArithmeticException(\"Subtracting time zone offset caused overflow\");",
      "right" : "throw new ArithmeticException(\"Subtracting time zone offset caused overflow\");",
      "info" : "ThrowStatement[39582-39660]:ThrowStatement[39599-39677]"
    }, {
      "left" : "return instantUTC;",
      "right" : "return instantUTC;",
      "info" : "ReturnStatement[39679-39697]:ReturnStatement[39696-39714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40262-40565]:Block[40279-40582]"
    }, {
      "left" : "if (newZone == null)",
      "right" : "if (newZone == null)",
      "info" : "IfStatement[40272-40353]:IfStatement[40289-40370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40293-40353]:Block[40310-40370]"
    }, {
      "left" : "newZone = DateTimeZone.getDefault();",
      "right" : "newZone = DateTimeZone.getDefault();",
      "info" : "ExpressionStatement[40307-40343]:ExpressionStatement[40324-40360]"
    }, {
      "left" : "if (newZone == this)",
      "right" : "if (newZone == this)",
      "info" : "IfStatement[40362-40425]:IfStatement[40379-40442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40383-40425]:Block[40400-40442]"
    }, {
      "left" : "return oldInstant;",
      "right" : "return oldInstant;",
      "info" : "ReturnStatement[40397-40415]:ReturnStatement[40414-40432]"
    }, {
      "left" : "long instantLocal = convertUTCToLocal(oldInstant);",
      "right" : "long instantLocal = convertUTCToLocal(oldInstant);",
      "info" : "VariableDeclarationStatement[40434-40484]:VariableDeclarationStatement[40451-40501]"
    }, {
      "left" : "return newZone.convertLocalToUTC(instantLocal, false, oldInstant);",
      "right" : "return newZone.convertLocalToUTC(instantLocal, false, oldInstant);",
      "info" : "ReturnStatement[40493-40559]:ReturnStatement[40510-40576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45583-45818]:Block[45600-45835]"
    }, {
      "left" : "if (isFixed())",
      "right" : "if (isFixed())",
      "info" : "IfStatement[45593-45645]:IfStatement[45610-45662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45608-45645]:Block[45625-45662]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[45622-45635]:ReturnStatement[45639-45652]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[45654-45812]:TryStatement[45671-45829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45658-45739]:Block[45675-45756]"
    }, {
      "left" : "localDateTime.toDateTime(this);",
      "right" : "localDateTime.toDateTime(this);",
      "info" : "ExpressionStatement[45672-45703]:ExpressionStatement[45689-45720]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[45716-45729]:ReturnStatement[45733-45746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45776-45812]:Block[45793-45829]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[45790-45802]:ReturnStatement[45807-45819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46139-46524]:Block[46156-46541]"
    }, {
      "left" : "long before = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);",
      "right" : "long before = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);",
      "info" : "VariableDeclarationStatement[46149-46230]:VariableDeclarationStatement[46166-46247]"
    }, {
      "left" : "long after = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);",
      "right" : "long after = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);",
      "info" : "VariableDeclarationStatement[46239-46319]:VariableDeclarationStatement[46256-46336]"
    }, {
      "left" : "if (before == after)",
      "right" : "if (before == after)",
      "info" : "IfStatement[46328-46388]:IfStatement[46345-46405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46349-46388]:Block[46366-46405]"
    }, {
      "left" : "return instant;",
      "right" : "return instant;",
      "info" : "ReturnStatement[46363-46378]:ReturnStatement[46380-46395]"
    }, {
      "left" : "long local = convertUTCToLocal(instant);",
      "right" : "long local = convertUTCToLocal(instant);",
      "info" : "VariableDeclarationStatement[46397-46437]:VariableDeclarationStatement[46414-46454]"
    }, {
      "left" : "return convertLocalToUTC(local, false, earlierOrLater ? after : before);",
      "right" : "return convertLocalToUTC(local, false, earlierOrLater ? after : before);",
      "info" : "ReturnStatement[46446-46518]:ReturnStatement[46463-46535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47836-47895]:Block[47853-47912]"
    }, {
      "left" : "return java.util.TimeZone.getTimeZone(iID);",
      "right" : "return java.util.TimeZone.getTimeZone(iID);",
      "info" : "ReturnStatement[47846-47889]:ReturnStatement[47863-47906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48269-48316]:Block[48286-48333]"
    }, {
      "left" : "return 57 + getID().hashCode();",
      "right" : "return 57 + getID().hashCode();",
      "info" : "ReturnStatement[48279-48310]:ReturnStatement[48296-48327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48464-48495]:Block[48481-48512]"
    }, {
      "left" : "return getID();",
      "right" : "return getID();",
      "info" : "ReturnStatement[48474-48489]:ReturnStatement[48491-48506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48825-48862]:Block[48842-48879]"
    }, {
      "left" : "return new Stub(iID);",
      "right" : "return new Stub(iID);",
      "info" : "ReturnStatement[48835-48856]:ReturnStatement[48852-48873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49286-49319]:Block[49303-49336]"
    }, {
      "left" : "iID = id;",
      "right" : "iID = id;",
      "info" : "ExpressionStatement[49300-49309]:ExpressionStatement[49317-49326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49397-49439]:Block[49414-49456]"
    }, {
      "left" : "out.writeUTF(iID);",
      "right" : "out.writeUTF(iID);",
      "info" : "ExpressionStatement[49411-49429]:ExpressionStatement[49428-49446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49514-49557]:Block[49531-49574]"
    }, {
      "left" : "iID = in.readUTF();",
      "right" : "iID = in.readUTF();",
      "info" : "ExpressionStatement[49528-49547]:ExpressionStatement[49545-49564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49625-49667]:Block[49642-49684]"
    }, {
      "left" : "return forID(iID);",
      "right" : "return forID(iID);",
      "info" : "ReturnStatement[49639-49657]:ReturnStatement[49656-49674]"
    } ]
  },
  "interFileMappings" : { }
}