{
  "matchedElements" : [
 {
    "left" : "class : ReaderBasedJsonParser",
    "right" : "class : ReaderBasedJsonParser",
    "info" : "TypeDeclaration[409-100060]:TypeDeclaration[409-100059]"
  }, {
    "left" : "FEAT_MASK_TRAILING_COMMA",
    "right" : "FEAT_MASK_TRAILING_COMMA",
    "info" : "FieldDeclaration[663-756]:FieldDeclaration[663-756]"
  }, {
    "left" : "_icLatin1",
    "right" : "_icLatin1",
    "info" : "FieldDeclaration[900-972]:FieldDeclaration[900-972]"
  }, {
    "left" : "_reader",
    "right" : "_reader",
    "info" : "FieldDeclaration[1149-1355]:FieldDeclaration[1149-1355]"
  }, {
    "left" : "_inputBuffer",
    "right" : "_inputBuffer",
    "info" : "FieldDeclaration[1361-1515]:FieldDeclaration[1361-1515]"
  }, {
    "left" : "_bufferRecyclable",
    "right" : "_bufferRecyclable",
    "info" : "FieldDeclaration[1521-1807]:FieldDeclaration[1521-1807]"
  }, {
    "left" : "_objectCodec",
    "right" : "_objectCodec",
    "info" : "FieldDeclaration[1978-2013]:FieldDeclaration[1978-2013]"
  }, {
    "left" : "_symbols",
    "right" : "_symbols",
    "info" : "FieldDeclaration[2019-2069]:FieldDeclaration[2019-2069]"
  }, {
    "left" : "_hashSeed",
    "right" : "_hashSeed",
    "info" : "FieldDeclaration[2075-2105]:FieldDeclaration[2075-2105]"
  }, {
    "left" : "_tokenIncomplete",
    "right" : "_tokenIncomplete",
    "info" : "FieldDeclaration[2276-2504]:FieldDeclaration[2276-2504]"
  }, {
    "left" : "_nameStartOffset",
    "right" : "_nameStartOffset",
    "info" : "FieldDeclaration[2510-2836]:FieldDeclaration[2510-2836]"
  }, {
    "left" : "_nameStartRow",
    "right" : "_nameStartRow",
    "info" : "FieldDeclaration[2842-2904]:FieldDeclaration[2842-2904]"
  }, {
    "left" : "_nameStartCol",
    "right" : "_nameStartCol",
    "info" : "FieldDeclaration[2910-2972]:FieldDeclaration[2910-2972]"
  }, {
    "left" : "public ReaderBasedJsonParser(ctxt , features int, r , codec , st , inputBuffer , start int, end int, bufferRecyclable boolean)",
    "right" : "public ReaderBasedJsonParser(ctxt , features int, r , codec , st , inputBuffer , start int, end int, bufferRecyclable boolean)",
    "info" : "MethodDeclaration[3140-3831]:MethodDeclaration[3140-3831]"
  }, {
    "left" : "public ReaderBasedJsonParser(ctxt , features int, r , codec , st )",
    "right" : "public ReaderBasedJsonParser(ctxt , features int, r , codec , st )",
    "info" : "MethodDeclaration[3837-4390]:MethodDeclaration[3837-4390]"
  }, {
    "left" : "public getCodec() : ",
    "right" : "public getCodec() : ",
    "info" : "MethodDeclaration[4575-4639]:MethodDeclaration[4575-4639]"
  }, {
    "left" : "public setCodec(c ) : void",
    "right" : "public setCodec(c ) : void",
    "info" : "MethodDeclaration[4644-4711]:MethodDeclaration[4644-4711]"
  }, {
    "left" : "public releaseBuffered(w ) : int",
    "right" : "public releaseBuffered(w ) : int",
    "info" : "MethodDeclaration[4717-5017]:MethodDeclaration[4717-5017]"
  }, {
    "left" : "public getInputSource() : ",
    "right" : "public getInputSource() : ",
    "info" : "MethodDeclaration[5023-5083]:MethodDeclaration[5023-5083]"
  }, {
    "left" : "protected getNextChar(eofMsg ) : char",
    "right" : "protected getNextChar(eofMsg ) : char",
    "info" : "MethodDeclaration[5089-5228]:MethodDeclaration[5089-5228]"
  }, {
    "left" : "protected getNextChar(eofMsg , forToken ) : char",
    "right" : "protected getNextChar(eofMsg , forToken ) : char",
    "info" : "MethodDeclaration[5238-5515]:MethodDeclaration[5238-5515]"
  }, {
    "left" : "protected _closeInput() : void",
    "right" : "protected _closeInput() : void",
    "info" : "MethodDeclaration[5521-6182]:MethodDeclaration[5521-6182]"
  }, {
    "left" : "protected _releaseBuffers() : void",
    "right" : "protected _releaseBuffers() : void",
    "info" : "MethodDeclaration[6188-6887]:MethodDeclaration[6188-6887]"
  }, {
    "left" : "protected _loadMoreGuaranteed() : void",
    "right" : "protected _loadMoreGuaranteed() : void",
    "info" : "MethodDeclaration[7073-7187]:MethodDeclaration[7073-7187]"
  }, {
    "left" : "protected _loadMore() : boolean",
    "right" : "protected _loadMore() : boolean",
    "info" : "MethodDeclaration[7197-8184]:MethodDeclaration[7197-8184]"
  }, {
    "left" : "public getText() : ",
    "right" : "public getText() : ",
    "info" : "MethodDeclaration[8365-9024]:MethodDeclaration[8365-9024]"
  }, {
    "left" : "public getText(writer ) : int",
    "right" : "public getText(writer ) : int",
    "info" : "MethodDeclaration[9030-9854]:MethodDeclaration[9030-9854]"
  }, {
    "left" : "public getValueAsString() : ",
    "right" : "public getValueAsString() : ",
    "info" : "MethodDeclaration[9950-10447]:MethodDeclaration[9950-10447]"
  }, {
    "left" : "public getValueAsString(defValue ) : ",
    "right" : "public getValueAsString(defValue ) : ",
    "info" : "MethodDeclaration[10471-10983]:MethodDeclaration[10471-10983]"
  }, {
    "left" : "protected _getText2(t ) : ",
    "right" : "protected _getText2(t ) : ",
    "info" : "MethodDeclaration[10989-11431]:MethodDeclaration[10989-11431]"
  }, {
    "left" : "public getTextCharacters() : ",
    "right" : "public getTextCharacters() : ",
    "info" : "MethodDeclaration[11437-12731]:MethodDeclaration[11437-12731]"
  }, {
    "left" : "public getTextLength() : int",
    "right" : "public getTextLength() : int",
    "info" : "MethodDeclaration[12737-13483]:MethodDeclaration[12737-13483]"
  }, {
    "left" : "public getTextOffset() : int",
    "right" : "public getTextOffset() : int",
    "info" : "MethodDeclaration[13489-14180]:MethodDeclaration[13489-14180]"
  }, {
    "left" : "public getBinaryValue(b64variant ) : ",
    "right" : "public getBinaryValue(b64variant ) : ",
    "info" : "MethodDeclaration[14186-15533]:MethodDeclaration[14186-15533]"
  }, {
    "left" : "public readBinaryValue(b64variant , out ) : int",
    "right" : "public readBinaryValue(b64variant , out ) : int",
    "info" : "MethodDeclaration[15539-16173]:MethodDeclaration[15539-16173]"
  }, {
    "left" : "protected _readBinary(b64variant , out , buffer ) : int",
    "right" : "protected _readBinary(b64variant , out , buffer ) : int",
    "info" : "MethodDeclaration[16179-21872]:MethodDeclaration[16179-21872]"
  }, {
    "left" : "public nextToken() : ",
    "right" : "public nextToken() : ",
    "info" : "MethodDeclaration[22051-26187]:MethodDeclaration[22051-26187]"
  }, {
    "left" : "private _nextAfterName() : ",
    "right" : "private _nextAfterName() : ",
    "info" : "MethodDeclaration[26193-26860]:MethodDeclaration[26193-26860]"
  }, {
    "left" : "public finishToken() : void",
    "right" : "public finishToken() : void",
    "info" : "MethodDeclaration[26866-27075]:MethodDeclaration[26866-27075]"
  }, {
    "left" : "public nextFieldName(sstr ) : boolean",
    "right" : "public nextFieldName(sstr ) : boolean",
    "info" : "MethodDeclaration[27293-29724]:MethodDeclaration[27293-29724]"
  }, {
    "left" : "public nextFieldName() : ",
    "right" : "public nextFieldName() : ",
    "info" : "MethodDeclaration[29730-32254]:MethodDeclaration[29730-32254]"
  }, {
    "left" : "private _isNextTokenNameYes(i int) : void",
    "right" : "private _isNextTokenNameYes(i int) : void",
    "info" : "MethodDeclaration[32260-33468]:MethodDeclaration[32260-33468]"
  }, {
    "left" : "protected _isNextTokenNameMaybe(i int, nameToMatch ) : boolean",
    "right" : "protected _isNextTokenNameMaybe(i int, nameToMatch ) : boolean",
    "info" : "MethodDeclaration[33474-35022]:MethodDeclaration[33474-35022]"
  }, {
    "left" : "private _nextTokenNotInObject(i int) : ",
    "right" : "private _nextTokenNotInObject(i int) : ",
    "info" : "MethodDeclaration[35028-37286]:MethodDeclaration[35028-37286]"
  }, {
    "left" : "public nextTextValue() : ",
    "right" : "public nextTextValue() : ",
    "info" : "MethodDeclaration[37346-38389]:MethodDeclaration[37346-38389]"
  }, {
    "left" : "public nextIntValue(defaultValue int) : int",
    "right" : "public nextIntValue(defaultValue int) : int",
    "info" : "MethodDeclaration[38445-39331]:MethodDeclaration[38445-39331]"
  }, {
    "left" : "public nextLongValue(defaultValue long) : long",
    "right" : "public nextLongValue(defaultValue long) : long",
    "info" : "MethodDeclaration[39387-40317]:MethodDeclaration[39387-40317]"
  }, {
    "left" : "public nextBooleanValue() : ",
    "right" : "public nextBooleanValue() : ",
    "info" : "MethodDeclaration[40377-41464]:MethodDeclaration[40377-41464]"
  }, {
    "left" : "protected _parsePosNumber(ch int) : ",
    "right" : "protected _parsePosNumber(ch int) : ",
    "info" : "MethodDeclaration[41654-44408]:MethodDeclaration[41654-44408]"
  }, {
    "left" : "private _parseFloat(ch int, startPtr int, ptr int, neg boolean, intLen int) : ",
    "right" : "private _parseFloat(ch int, startPtr int, ptr int, neg boolean, intLen int) : ",
    "info" : "MethodDeclaration[44414-46796]:MethodDeclaration[44414-46796]"
  }, {
    "left" : "protected _parseNegNumber() : ",
    "right" : "protected _parseNegNumber() : ",
    "info" : "MethodDeclaration[46802-48313]:MethodDeclaration[46802-48313]"
  }, {
    "left" : "private _parseNumber2(neg boolean, startPtr int) : ",
    "right" : "private _parseNumber2(neg boolean, startPtr int) : ",
    "info" : "MethodDeclaration[48319-53163]:MethodDeclaration[48319-53163]"
  }, {
    "left" : "private _verifyNoLeadingZeroes() : char",
    "right" : "private _verifyNoLeadingZeroes() : char",
    "info" : "MethodDeclaration[53169-53735]:MethodDeclaration[53169-53735]"
  }, {
    "left" : "private _verifyNLZ2() : char",
    "right" : "private _verifyNLZ2() : char",
    "info" : "MethodDeclaration[53741-54773]:MethodDeclaration[53741-54773]"
  }, {
    "left" : "protected _handleInvalidNumberStart(ch int, negative boolean) : ",
    "right" : "protected _handleInvalidNumberStart(ch int, negative boolean) : ",
    "info" : "MethodDeclaration[54779-56322]:MethodDeclaration[54779-56322]"
  }, {
    "left" : "private _verifyRootSpace(ch int) : void",
    "right" : "private _verifyRootSpace(ch int) : void",
    "info" : "MethodDeclaration[56328-57025]:MethodDeclaration[56328-57025]"
  }, {
    "left" : "protected _parseName() : ",
    "right" : "protected _parseName() : ",
    "info" : "MethodDeclaration[57218-58155]:MethodDeclaration[57218-58155]"
  }, {
    "left" : "private _parseName2(startPtr int, hash int, endChar int) : ",
    "right" : "private _parseName2(startPtr int, hash int, endChar int) : ",
    "info" : "MethodDeclaration[58161-60158]:MethodDeclaration[58161-60158]"
  }, {
    "left" : "protected _handleOddName(i int) : ",
    "right" : "protected _handleOddName(i int) : ",
    "info" : "MethodDeclaration[60164-62512]:MethodDeclaration[60164-62512]"
  }, {
    "left" : "protected _parseAposName() : ",
    "right" : "protected _parseAposName() : ",
    "info" : "MethodDeclaration[62518-63501]:MethodDeclaration[62518-63501]"
  }, {
    "left" : "protected _handleOddValue(i int) : ",
    "right" : "protected _handleOddValue(i int) : ",
    "info" : "MethodDeclaration[63507-66253]:MethodDeclaration[63507-66253]"
  }, {
    "left" : "protected _handleApos() : ",
    "right" : "protected _handleApos() : ",
    "info" : "MethodDeclaration[66259-67775]:MethodDeclaration[66259-67775]"
  }, {
    "left" : "private _handleOddName2(startPtr int, hash int, codes ) : ",
    "right" : "private _handleOddName2(startPtr int, hash int, codes ) : ",
    "info" : "MethodDeclaration[67781-69267]:MethodDeclaration[67781-69266]"
  }, {
    "left" : "protected _finishString() : void",
    "right" : "protected _finishString() : void",
    "info" : "MethodDeclaration[69273-70439]:MethodDeclaration[69272-70438]"
  }, {
    "left" : "protected _finishString2() : void",
    "right" : "protected _finishString2() : void",
    "info" : "MethodDeclaration[70445-71958]:MethodDeclaration[70444-71957]"
  }, {
    "left" : "protected _skipString() : void",
    "right" : "protected _skipString() : void",
    "info" : "MethodDeclaration[71964-73623]:MethodDeclaration[71963-73622]"
  }, {
    "left" : "protected _skipCR() : void",
    "right" : "protected _skipCR() : void",
    "info" : "MethodDeclaration[73812-74208]:MethodDeclaration[73811-74207]"
  }, {
    "left" : "private _skipColon() : int",
    "right" : "private _skipColon() : int",
    "info" : "MethodDeclaration[74214-76021]:MethodDeclaration[74213-76020]"
  }, {
    "left" : "private _skipColon2(gotColon boolean) : int",
    "right" : "private _skipColon2(gotColon boolean) : int",
    "info" : "MethodDeclaration[76027-77322]:MethodDeclaration[76026-77321]"
  }, {
    "left" : "private _skipColonFast(ptr int) : int",
    "right" : "private _skipColonFast(ptr int) : int",
    "info" : "MethodDeclaration[77403-79016]:MethodDeclaration[77402-79015]"
  }, {
    "left" : "private _skipComma(i int) : int",
    "right" : "private _skipComma(i int) : int",
    "info" : "MethodDeclaration[79074-80000]:MethodDeclaration[79073-79999]"
  }, {
    "left" : "private _skipAfterComma2() : int",
    "right" : "private _skipAfterComma2() : int",
    "info" : "MethodDeclaration[80006-81003]:MethodDeclaration[80005-81002]"
  }, {
    "left" : "private _skipWSOrEnd() : int",
    "right" : "private _skipWSOrEnd() : int",
    "info" : "MethodDeclaration[81009-82610]:MethodDeclaration[81008-82609]"
  }, {
    "left" : "private _skipWSOrEnd2() : int",
    "right" : "private _skipWSOrEnd2() : int",
    "info" : "MethodDeclaration[82616-83635]:MethodDeclaration[82615-83634]"
  }, {
    "left" : "private _skipComment() : void",
    "right" : "private _skipComment() : void",
    "info" : "MethodDeclaration[83641-84354]:MethodDeclaration[83640-84353]"
  }, {
    "left" : "private _skipCComment() : void",
    "right" : "private _skipCComment() : void",
    "info" : "MethodDeclaration[84360-85421]:MethodDeclaration[84359-85420]"
  }, {
    "left" : "private _skipYAMLComment() : boolean",
    "right" : "private _skipYAMLComment() : boolean",
    "info" : "MethodDeclaration[85427-85625]:MethodDeclaration[85426-85624]"
  }, {
    "left" : "private _skipLine() : void",
    "right" : "private _skipLine() : void",
    "info" : "MethodDeclaration[85631-86252]:MethodDeclaration[85630-86251]"
  }, {
    "left" : "protected _decodeEscaped() : char",
    "right" : "protected _decodeEscaped() : char",
    "info" : "MethodDeclaration[86258-87774]:MethodDeclaration[86257-87773]"
  }, {
    "left" : "private _matchTrue() : void",
    "right" : "private _matchTrue() : void",
    "info" : "MethodDeclaration[87780-88321]:MethodDeclaration[87779-88320]"
  }, {
    "left" : "private _matchFalse() : void",
    "right" : "private _matchFalse() : void",
    "info" : "MethodDeclaration[88327-88889]:MethodDeclaration[88326-88888]"
  }, {
    "left" : "private _matchNull() : void",
    "right" : "private _matchNull() : void",
    "info" : "MethodDeclaration[88895-89436]:MethodDeclaration[88894-89435]"
  }, {
    "left" : "protected _matchToken(matchStr , i int) : void",
    "right" : "protected _matchToken(matchStr , i int) : void",
    "info" : "MethodDeclaration[89442-90158]:MethodDeclaration[89441-90157]"
  }, {
    "left" : "private _matchToken2(matchStr , i int) : void",
    "right" : "private _matchToken2(matchStr , i int) : void",
    "info" : "MethodDeclaration[90164-90906]:MethodDeclaration[90163-90905]"
  }, {
    "left" : "private _checkMatchEnd(matchStr , i int, c int) : void",
    "right" : "private _checkMatchEnd(matchStr , i int, c int) : void",
    "info" : "MethodDeclaration[90912-91205]:MethodDeclaration[90911-91204]"
  }, {
    "left" : "protected _decodeBase64(b64variant ) : ",
    "right" : "protected _decodeBase64(b64variant ) : ",
    "info" : "MethodDeclaration[91376-96667]:MethodDeclaration[91375-96666]"
  }, {
    "left" : "public getTokenLocation() : ",
    "right" : "public getTokenLocation() : ",
    "info" : "MethodDeclaration[96880-97324]:MethodDeclaration[96879-97323]"
  }, {
    "left" : "public getCurrentLocation() : ",
    "right" : "public getCurrentLocation() : ",
    "info" : "MethodDeclaration[97330-97603]:MethodDeclaration[97329-97602]"
  }, {
    "left" : "private _updateLocation() : void",
    "right" : "private _updateLocation() : void",
    "info" : "MethodDeclaration[97627-97849]:MethodDeclaration[97626-97848]"
  }, {
    "left" : "private _updateNameLocation() : void",
    "right" : "private _updateNameLocation() : void",
    "info" : "MethodDeclaration[97873-98075]:MethodDeclaration[97872-98074]"
  }, {
    "left" : "protected _reportInvalidToken(matchedPart ) : void",
    "right" : "protected _reportInvalidToken(matchedPart ) : void",
    "info" : "MethodDeclaration[98248-98405]:MethodDeclaration[98247-98404]"
  }, {
    "left" : "protected _reportInvalidToken(matchedPart , msg ) : void",
    "right" : "protected _reportInvalidToken(matchedPart , msg ) : void",
    "info" : "MethodDeclaration[98411-99214]:MethodDeclaration[98410-99213]"
  }, {
    "left" : "private _closeScope(i int) : void",
    "right" : "private _closeScope(i int) : void",
    "info" : "MethodDeclaration[99395-100058]:MethodDeclaration[99394-100057]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3327-3333]:Modifier[3327-3333]"
  }, {
    "left" : "ReaderBasedJsonParser",
    "right" : "ReaderBasedJsonParser",
    "info" : "SimpleName[3334-3355]:SimpleName[3334-3355]"
  }, {
    "left" : "IOContext ctxt",
    "right" : "IOContext ctxt",
    "info" : "SingleVariableDeclaration[3356-3370]:SingleVariableDeclaration[3356-3370]"
  }, {
    "left" : "int features",
    "right" : "int features",
    "info" : "SingleVariableDeclaration[3372-3384]:SingleVariableDeclaration[3372-3384]"
  }, {
    "left" : "Reader r",
    "right" : "Reader r",
    "info" : "SingleVariableDeclaration[3386-3394]:SingleVariableDeclaration[3386-3394]"
  }, {
    "left" : "ObjectCodec codec",
    "right" : "ObjectCodec codec",
    "info" : "SingleVariableDeclaration[3408-3425]:SingleVariableDeclaration[3408-3425]"
  }, {
    "left" : "CharsToNameCanonicalizer st",
    "right" : "CharsToNameCanonicalizer st",
    "info" : "SingleVariableDeclaration[3427-3454]:SingleVariableDeclaration[3427-3454]"
  }, {
    "left" : "char[] inputBuffer",
    "right" : "char[] inputBuffer",
    "info" : "SingleVariableDeclaration[3468-3486]:SingleVariableDeclaration[3468-3486]"
  }, {
    "left" : "int start",
    "right" : "int start",
    "info" : "SingleVariableDeclaration[3488-3497]:SingleVariableDeclaration[3488-3497]"
  }, {
    "left" : "int end",
    "right" : "int end",
    "info" : "SingleVariableDeclaration[3499-3506]:SingleVariableDeclaration[3499-3506]"
  }, {
    "left" : "boolean bufferRecyclable",
    "right" : "boolean bufferRecyclable",
    "info" : "SingleVariableDeclaration[3520-3544]:SingleVariableDeclaration[3520-3544]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3550-3831]:Block[3550-3831]"
  }, {
    "left" : "super(ctxt, features);",
    "right" : "super(ctxt, features);",
    "info" : "SuperConstructorInvocation[3560-3582]:SuperConstructorInvocation[3560-3582]"
  }, {
    "left" : "_reader = r;",
    "right" : "_reader = r;",
    "info" : "ExpressionStatement[3591-3603]:ExpressionStatement[3591-3603]"
  }, {
    "left" : "_inputBuffer = inputBuffer;",
    "right" : "_inputBuffer = inputBuffer;",
    "info" : "ExpressionStatement[3612-3639]:ExpressionStatement[3612-3639]"
  }, {
    "left" : "_inputPtr = start;",
    "right" : "_inputPtr = start;",
    "info" : "ExpressionStatement[3648-3666]:ExpressionStatement[3648-3666]"
  }, {
    "left" : "_inputEnd = end;",
    "right" : "_inputEnd = end;",
    "info" : "ExpressionStatement[3675-3691]:ExpressionStatement[3675-3691]"
  }, {
    "left" : "_objectCodec = codec;",
    "right" : "_objectCodec = codec;",
    "info" : "ExpressionStatement[3700-3721]:ExpressionStatement[3700-3721]"
  }, {
    "left" : "_symbols = st;",
    "right" : "_symbols = st;",
    "info" : "ExpressionStatement[3730-3744]:ExpressionStatement[3730-3744]"
  }, {
    "left" : "_hashSeed = st.hashSeed();",
    "right" : "_hashSeed = st.hashSeed();",
    "info" : "ExpressionStatement[3753-3779]:ExpressionStatement[3753-3779]"
  }, {
    "left" : "_bufferRecyclable = bufferRecyclable;",
    "right" : "_bufferRecyclable = bufferRecyclable;",
    "info" : "ExpressionStatement[3788-3825]:ExpressionStatement[3788-3825]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3986-3992]:Modifier[3986-3992]"
  }, {
    "left" : "ReaderBasedJsonParser",
    "right" : "ReaderBasedJsonParser",
    "info" : "SimpleName[3993-4014]:SimpleName[3993-4014]"
  }, {
    "left" : "IOContext ctxt",
    "right" : "IOContext ctxt",
    "info" : "SingleVariableDeclaration[4015-4029]:SingleVariableDeclaration[4015-4029]"
  }, {
    "left" : "int features",
    "right" : "int features",
    "info" : "SingleVariableDeclaration[4031-4043]:SingleVariableDeclaration[4031-4043]"
  }, {
    "left" : "Reader r",
    "right" : "Reader r",
    "info" : "SingleVariableDeclaration[4045-4053]:SingleVariableDeclaration[4045-4053]"
  }, {
    "left" : "ObjectCodec codec",
    "right" : "ObjectCodec codec",
    "info" : "SingleVariableDeclaration[4063-4080]:SingleVariableDeclaration[4063-4080]"
  }, {
    "left" : "CharsToNameCanonicalizer st",
    "right" : "CharsToNameCanonicalizer st",
    "info" : "SingleVariableDeclaration[4082-4109]:SingleVariableDeclaration[4082-4109]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4115-4390]:Block[4115-4390]"
  }, {
    "left" : "super(ctxt, features);",
    "right" : "super(ctxt, features);",
    "info" : "SuperConstructorInvocation[4125-4147]:SuperConstructorInvocation[4125-4147]"
  }, {
    "left" : "_reader = r;",
    "right" : "_reader = r;",
    "info" : "ExpressionStatement[4156-4168]:ExpressionStatement[4156-4168]"
  }, {
    "left" : "_inputBuffer = ctxt.allocTokenBuffer();",
    "right" : "_inputBuffer = ctxt.allocTokenBuffer();",
    "info" : "ExpressionStatement[4177-4216]:ExpressionStatement[4177-4216]"
  }, {
    "left" : "_inputPtr = 0;",
    "right" : "_inputPtr = 0;",
    "info" : "ExpressionStatement[4225-4239]:ExpressionStatement[4225-4239]"
  }, {
    "left" : "_inputEnd = 0;",
    "right" : "_inputEnd = 0;",
    "info" : "ExpressionStatement[4248-4262]:ExpressionStatement[4248-4262]"
  }, {
    "left" : "_objectCodec = codec;",
    "right" : "_objectCodec = codec;",
    "info" : "ExpressionStatement[4271-4292]:ExpressionStatement[4271-4292]"
  }, {
    "left" : "_symbols = st;",
    "right" : "_symbols = st;",
    "info" : "ExpressionStatement[4301-4315]:ExpressionStatement[4301-4315]"
  }, {
    "left" : "_hashSeed = st.hashSeed();",
    "right" : "_hashSeed = st.hashSeed();",
    "info" : "ExpressionStatement[4324-4350]:ExpressionStatement[4324-4350]"
  }, {
    "left" : "_bufferRecyclable = true;",
    "right" : "_bufferRecyclable = true;",
    "info" : "ExpressionStatement[4359-4384]:ExpressionStatement[4359-4384]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4575-4584]:MarkerAnnotation[4575-4584]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4585-4591]:Modifier[4585-4591]"
  }, {
    "left" : "ObjectCodec",
    "right" : "ObjectCodec",
    "info" : "SimpleType[4592-4603]:SimpleType[4592-4603]"
  }, {
    "left" : "getCodec",
    "right" : "getCodec",
    "info" : "SimpleName[4604-4612]:SimpleName[4604-4612]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4615-4639]:Block[4615-4639]"
  }, {
    "left" : "return _objectCodec;",
    "right" : "return _objectCodec;",
    "info" : "ReturnStatement[4617-4637]:ReturnStatement[4617-4637]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4644-4653]:MarkerAnnotation[4644-4653]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4654-4660]:Modifier[4654-4660]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4661-4665]:PrimitiveType[4661-4665]"
  }, {
    "left" : "setCodec",
    "right" : "setCodec",
    "info" : "SimpleName[4666-4674]:SimpleName[4666-4674]"
  }, {
    "left" : "ObjectCodec c",
    "right" : "ObjectCodec c",
    "info" : "SingleVariableDeclaration[4675-4688]:SingleVariableDeclaration[4675-4688]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4690-4711]:Block[4690-4711]"
  }, {
    "left" : "_objectCodec = c;",
    "right" : "_objectCodec = c;",
    "info" : "ExpressionStatement[4692-4709]:ExpressionStatement[4692-4709]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4717-4726]:MarkerAnnotation[4717-4726]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4731-4737]:Modifier[4731-4737]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[4738-4741]:PrimitiveType[4738-4741]"
  }, {
    "left" : "releaseBuffered",
    "right" : "releaseBuffered",
    "info" : "SimpleName[4742-4757]:SimpleName[4742-4757]"
  }, {
    "left" : "Writer w",
    "right" : "Writer w",
    "info" : "SingleVariableDeclaration[4758-4766]:SingleVariableDeclaration[4758-4766]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[4775-4786]:SimpleType[4775-4786]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4787-5017]:Block[4787-5017]"
  }, {
    "left" : "int count = _inputEnd - _inputPtr;",
    "right" : "int count = _inputEnd - _inputPtr;",
    "info" : "VariableDeclarationStatement[4797-4831]:VariableDeclarationStatement[4797-4831]"
  }, {
    "left" : "if (count < 1)",
    "right" : "if (count < 1)",
    "info" : "IfStatement[4840-4868]:IfStatement[4840-4868]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4855-4868]:Block[4855-4868]"
  }, {
    "left" : "return 0;",
    "right" : "return 0;",
    "info" : "ReturnStatement[4857-4866]:ReturnStatement[4857-4866]"
  }, {
    "left" : "int origPtr = _inputPtr;",
    "right" : "int origPtr = _inputPtr;",
    "info" : "VariableDeclarationStatement[4918-4942]:VariableDeclarationStatement[4918-4942]"
  }, {
    "left" : "w.write(_inputBuffer, origPtr, count);",
    "right" : "w.write(_inputBuffer, origPtr, count);",
    "info" : "ExpressionStatement[4951-4989]:ExpressionStatement[4951-4989]"
  }, {
    "left" : "return count;",
    "right" : "return count;",
    "info" : "ReturnStatement[4998-5011]:ReturnStatement[4998-5011]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[5023-5032]:MarkerAnnotation[5023-5032]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5033-5039]:Modifier[5033-5039]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[5040-5046]:SimpleType[5040-5046]"
  }, {
    "left" : "getInputSource",
    "right" : "getInputSource",
    "info" : "SimpleName[5047-5061]:SimpleName[5047-5061]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5064-5083]:Block[5064-5083]"
  }, {
    "left" : "return _reader;",
    "right" : "return _reader;",
    "info" : "ReturnStatement[5066-5081]:ReturnStatement[5066-5081]"
  }, {
    "left" : "@Deprecated",
    "right" : "@Deprecated",
    "info" : "MarkerAnnotation[5089-5100]:MarkerAnnotation[5089-5100]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[5118-5127]:Modifier[5118-5127]"
  }, {
    "left" : "char",
    "right" : "char",
    "info" : "PrimitiveType[5128-5132]:PrimitiveType[5128-5132]"
  }, {
    "left" : "getNextChar",
    "right" : "getNextChar",
    "info" : "SimpleName[5133-5144]:SimpleName[5133-5144]"
  }, {
    "left" : "String eofMsg",
    "right" : "String eofMsg",
    "info" : "SingleVariableDeclaration[5145-5158]:SingleVariableDeclaration[5145-5158]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[5167-5178]:SimpleType[5167-5178]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5179-5228]:Block[5179-5228]"
  }, {
    "left" : "return getNextChar(eofMsg, null);",
    "right" : "return getNextChar(eofMsg, null);",
    "info" : "ReturnStatement[5189-5222]:ReturnStatement[5189-5222]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[5238-5247]:Modifier[5238-5247]"
  }, {
    "left" : "char",
    "right" : "char",
    "info" : "PrimitiveType[5248-5252]:PrimitiveType[5248-5252]"
  }, {
    "left" : "getNextChar",
    "right" : "getNextChar",
    "info" : "SimpleName[5253-5264]:SimpleName[5253-5264]"
  }, {
    "left" : "String eofMsg",
    "right" : "String eofMsg",
    "info" : "SingleVariableDeclaration[5265-5278]:SingleVariableDeclaration[5265-5278]"
  }, {
    "left" : "JsonToken forToken",
    "right" : "JsonToken forToken",
    "info" : "SingleVariableDeclaration[5280-5298]:SingleVariableDeclaration[5280-5298]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[5307-5318]:SimpleType[5307-5318]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5319-5515]:Block[5319-5515]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[5329-5467]:IfStatement[5329-5467]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5357-5467]:Block[5357-5467]"
  }, {
    "left" : "if (!_loadMore())",
    "right" : "if (!_loadMore())",
    "info" : "IfStatement[5371-5457]:IfStatement[5371-5457]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5389-5457]:Block[5389-5457]"
  }, {
    "left" : "_reportInvalidEOF(eofMsg, forToken);",
    "right" : "_reportInvalidEOF(eofMsg, forToken);",
    "info" : "ExpressionStatement[5407-5443]:ExpressionStatement[5407-5443]"
  }, {
    "left" : "return _inputBuffer[_inputPtr++];",
    "right" : "return _inputBuffer[_inputPtr++];",
    "info" : "ReturnStatement[5476-5509]:ReturnStatement[5476-5509]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[5521-5530]:MarkerAnnotation[5521-5530]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[5535-5544]:Modifier[5535-5544]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[5545-5549]:PrimitiveType[5545-5549]"
  }, {
    "left" : "_closeInput",
    "right" : "_closeInput",
    "info" : "SimpleName[5550-5561]:SimpleName[5550-5561]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[5571-5582]:SimpleType[5571-5582]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5583-6182]:Block[5583-6182]"
  }, {
    "left" : "if (_reader != null)",
    "right" : "if (_reader != null)",
    "info" : "IfStatement[5979-6176]:IfStatement[5979-6176]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6000-6176]:Block[6000-6176]"
  }, {
    "left" : "if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_SOURCE))",
    "right" : "if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_SOURCE))",
    "info" : "IfStatement[6014-6138]:IfStatement[6014-6138]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6090-6138]:Block[6090-6138]"
  }, {
    "left" : "_reader.close();",
    "right" : "_reader.close();",
    "info" : "ExpressionStatement[6108-6124]:ExpressionStatement[6108-6124]"
  }, {
    "left" : "_reader = null;",
    "right" : "_reader = null;",
    "info" : "ExpressionStatement[6151-6166]:ExpressionStatement[6151-6166]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6440-6449]:MarkerAnnotation[6440-6449]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[6454-6463]:Modifier[6454-6463]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[6464-6468]:PrimitiveType[6464-6468]"
  }, {
    "left" : "_releaseBuffers",
    "right" : "_releaseBuffers",
    "info" : "SimpleName[6469-6484]:SimpleName[6469-6484]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[6494-6505]:SimpleType[6494-6505]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6506-6887]:Block[6506-6887]"
  }, {
    "left" : "super._releaseBuffers();",
    "right" : "super._releaseBuffers();",
    "info" : "ExpressionStatement[6516-6540]:ExpressionStatement[6516-6540]"
  }, {
    "left" : "_symbols.release();",
    "right" : "_symbols.release();",
    "info" : "ExpressionStatement[6586-6605]:ExpressionStatement[6586-6605]"
  }, {
    "left" : "if (_bufferRecyclable)",
    "right" : "if (_bufferRecyclable)",
    "info" : "IfStatement[6674-6881]:IfStatement[6674-6881]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6697-6881]:Block[6697-6881]"
  }, {
    "left" : "char[] buf = _inputBuffer;",
    "right" : "char[] buf = _inputBuffer;",
    "info" : "VariableDeclarationStatement[6711-6737]:VariableDeclarationStatement[6711-6737]"
  }, {
    "left" : "if (buf != null)",
    "right" : "if (buf != null)",
    "info" : "IfStatement[6750-6871]:IfStatement[6750-6871]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6767-6871]:Block[6767-6871]"
  }, {
    "left" : "_inputBuffer = null;",
    "right" : "_inputBuffer = null;",
    "info" : "ExpressionStatement[6785-6805]:ExpressionStatement[6785-6805]"
  }, {
    "left" : "_ioContext.releaseTokenBuffer(buf);",
    "right" : "_ioContext.releaseTokenBuffer(buf);",
    "info" : "ExpressionStatement[6822-6857]:ExpressionStatement[6822-6857]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[7073-7082]:Modifier[7073-7082]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7083-7087]:PrimitiveType[7083-7087]"
  }, {
    "left" : "_loadMoreGuaranteed",
    "right" : "_loadMoreGuaranteed",
    "info" : "SimpleName[7088-7107]:SimpleName[7088-7107]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[7117-7128]:SimpleType[7117-7128]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7129-7187]:Block[7129-7187]"
  }, {
    "left" : "if (!_loadMore())",
    "right" : "if (!_loadMore())",
    "info" : "IfStatement[7139-7181]:IfStatement[7139-7181]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7157-7181]:Block[7157-7181]"
  }, {
    "left" : "_reportInvalidEOF();",
    "right" : "_reportInvalidEOF();",
    "info" : "ExpressionStatement[7159-7179]:ExpressionStatement[7159-7179]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[7197-7206]:Modifier[7197-7206]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[7207-7214]:PrimitiveType[7207-7214]"
  }, {
    "left" : "_loadMore",
    "right" : "_loadMore",
    "info" : "SimpleName[7215-7224]:SimpleName[7215-7224]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[7234-7245]:SimpleType[7234-7245]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7250-8184]:Block[7250-8184]"
  }, {
    "left" : "final int bufSize = _inputEnd;",
    "right" : "final int bufSize = _inputEnd;",
    "info" : "VariableDeclarationStatement[7260-7290]:VariableDeclarationStatement[7260-7290]"
  }, {
    "left" : "_currInputProcessed += bufSize;",
    "right" : "_currInputProcessed += bufSize;",
    "info" : "ExpressionStatement[7300-7331]:ExpressionStatement[7300-7331]"
  }, {
    "left" : "_currInputRowStart -= bufSize;",
    "right" : "_currInputRowStart -= bufSize;",
    "info" : "ExpressionStatement[7340-7370]:ExpressionStatement[7340-7370]"
  }, {
    "left" : "_nameStartOffset -= bufSize;",
    "right" : "_nameStartOffset -= bufSize;",
    "info" : "ExpressionStatement[7619-7647]:ExpressionStatement[7619-7647]"
  }, {
    "left" : "if (_reader != null)",
    "right" : "if (_reader != null)",
    "info" : "IfStatement[7657-8156]:IfStatement[7657-8156]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7678-8156]:Block[7678-8156]"
  }, {
    "left" : "int count = _reader.read(_inputBuffer, 0, _inputBuffer.length);",
    "right" : "int count = _reader.read(_inputBuffer, 0, _inputBuffer.length);",
    "info" : "VariableDeclarationStatement[7692-7755]:VariableDeclarationStatement[7692-7755]"
  }, {
    "left" : "if (count > 0)",
    "right" : "if (count > 0)",
    "info" : "IfStatement[7768-7893]:IfStatement[7768-7893]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7783-7893]:Block[7783-7893]"
  }, {
    "left" : "_inputPtr = 0;",
    "right" : "_inputPtr = 0;",
    "info" : "ExpressionStatement[7801-7815]:ExpressionStatement[7801-7815]"
  }, {
    "left" : "_inputEnd = count;",
    "right" : "_inputEnd = count;",
    "info" : "ExpressionStatement[7832-7850]:ExpressionStatement[7832-7850]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[7867-7879]:ReturnStatement[7867-7879]"
  }, {
    "left" : "_closeInput();",
    "right" : "_closeInput();",
    "info" : "ExpressionStatement[7934-7948]:ExpressionStatement[7934-7948]"
  }, {
    "left" : "if (count == 0)",
    "right" : "if (count == 0)",
    "info" : "IfStatement[8013-8146]:IfStatement[8013-8146]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8029-8146]:Block[8029-8146]"
  }, {
    "left" : "throw new IOException(\"Reader returned 0 characters when trying to read \"+_inputEnd);",
    "right" : "throw new IOException(\"Reader returned 0 characters when trying to read \"+_inputEnd);",
    "info" : "ThrowStatement[8047-8132]:ThrowStatement[8047-8132]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[8165-8178]:ReturnStatement[8165-8178]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[8624-8633]:MarkerAnnotation[8624-8633]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8638-8644]:Modifier[8638-8644]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[8645-8650]:Modifier[8645-8650]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[8651-8657]:SimpleType[8651-8657]"
  }, {
    "left" : "getText",
    "right" : "getText",
    "info" : "SimpleName[8658-8665]:SimpleName[8658-8665]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[8675-8686]:SimpleType[8675-8686]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8691-9024]:Block[8691-9024]"
  }, {
    "left" : "JsonToken t = _currToken;",
    "right" : "JsonToken t = _currToken;",
    "info" : "VariableDeclarationStatement[8701-8726]:VariableDeclarationStatement[8701-8726]"
  }, {
    "left" : "if (t == JsonToken.VALUE_STRING)",
    "right" : "if (t == JsonToken.VALUE_STRING)",
    "info" : "IfStatement[8735-8989]:IfStatement[8735-8989]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8768-8989]:Block[8768-8989]"
  }, {
    "left" : "if (_tokenIncomplete)",
    "right" : "if (_tokenIncomplete)",
    "info" : "IfStatement[8782-8928]:IfStatement[8782-8928]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8804-8928]:Block[8804-8928]"
  }, {
    "left" : "_tokenIncomplete = false;",
    "right" : "_tokenIncomplete = false;",
    "info" : "ExpressionStatement[8822-8847]:ExpressionStatement[8822-8847]"
  }, {
    "left" : "_finishString();",
    "right" : "_finishString();",
    "info" : "ExpressionStatement[8864-8880]:ExpressionStatement[8864-8880]"
  }, {
    "left" : "return _textBuffer.contentsAsString();",
    "right" : "return _textBuffer.contentsAsString();",
    "info" : "ReturnStatement[8941-8979]:ReturnStatement[8941-8979]"
  }, {
    "left" : "return _getText2(t);",
    "right" : "return _getText2(t);",
    "info" : "ReturnStatement[8998-9018]:ReturnStatement[8998-9018]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[9030-9039]:MarkerAnnotation[9030-9039]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9057-9063]:Modifier[9057-9063]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[9064-9067]:PrimitiveType[9064-9067]"
  }, {
    "left" : "getText",
    "right" : "getText",
    "info" : "SimpleName[9068-9075]:SimpleName[9068-9075]"
  }, {
    "left" : "Writer writer",
    "right" : "Writer writer",
    "info" : "SingleVariableDeclaration[9076-9089]:SingleVariableDeclaration[9076-9089]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[9098-9109]:SimpleType[9098-9109]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9114-9854]:Block[9114-9854]"
  }, {
    "left" : "JsonToken t = _currToken;",
    "right" : "JsonToken t = _currToken;",
    "info" : "VariableDeclarationStatement[9124-9149]:VariableDeclarationStatement[9124-9149]"
  }, {
    "left" : "if (t == JsonToken.VALUE_STRING)",
    "right" : "if (t == JsonToken.VALUE_STRING)",
    "info" : "IfStatement[9158-9418]:IfStatement[9158-9418]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9191-9418]:Block[9191-9418]"
  }, {
    "left" : "if (_tokenIncomplete)",
    "right" : "if (_tokenIncomplete)",
    "info" : "IfStatement[9205-9351]:IfStatement[9205-9351]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9227-9351]:Block[9227-9351]"
  }, {
    "left" : "_tokenIncomplete = false;",
    "right" : "_tokenIncomplete = false;",
    "info" : "ExpressionStatement[9245-9270]:ExpressionStatement[9245-9270]"
  }, {
    "left" : "_finishString();",
    "right" : "_finishString();",
    "info" : "ExpressionStatement[9287-9303]:ExpressionStatement[9287-9303]"
  }, {
    "left" : "return _textBuffer.contentsToWriter(writer);",
    "right" : "return _textBuffer.contentsToWriter(writer);",
    "info" : "ReturnStatement[9364-9408]:ReturnStatement[9364-9408]"
  }, {
    "left" : "if (t == JsonToken.FIELD_NAME)",
    "right" : "if (t == JsonToken.FIELD_NAME)",
    "info" : "IfStatement[9427-9586]:IfStatement[9427-9586]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9458-9586]:Block[9458-9586]"
  }, {
    "left" : "String n = _parsingContext.getCurrentName();",
    "right" : "String n = _parsingContext.getCurrentName();",
    "info" : "VariableDeclarationStatement[9472-9516]:VariableDeclarationStatement[9472-9516]"
  }, {
    "left" : "writer.write(n);",
    "right" : "writer.write(n);",
    "info" : "ExpressionStatement[9529-9545]:ExpressionStatement[9529-9545]"
  }, {
    "left" : "return n.length();",
    "right" : "return n.length();",
    "info" : "ReturnStatement[9558-9576]:ReturnStatement[9558-9576]"
  }, {
    "left" : "if (t != null)",
    "right" : "if (t != null)",
    "info" : "IfStatement[9595-9830]:IfStatement[9595-9830]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9610-9830]:Block[9610-9830]"
  }, {
    "left" : "if (t.isNumeric())",
    "right" : "if (t.isNumeric())",
    "info" : "IfStatement[9624-9719]:IfStatement[9624-9719]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9643-9719]:Block[9643-9719]"
  }, {
    "left" : "return _textBuffer.contentsToWriter(writer);",
    "right" : "return _textBuffer.contentsToWriter(writer);",
    "info" : "ReturnStatement[9661-9705]:ReturnStatement[9661-9705]"
  }, {
    "left" : "char[] ch = t.asCharArray();",
    "right" : "char[] ch = t.asCharArray();",
    "info" : "VariableDeclarationStatement[9732-9760]:VariableDeclarationStatement[9732-9760]"
  }, {
    "left" : "writer.write(ch);",
    "right" : "writer.write(ch);",
    "info" : "ExpressionStatement[9773-9790]:ExpressionStatement[9773-9790]"
  }, {
    "left" : "return ch.length;",
    "right" : "return ch.length;",
    "info" : "ReturnStatement[9803-9820]:ReturnStatement[9803-9820]"
  }, {
    "left" : "return 0;",
    "right" : "return 0;",
    "info" : "ReturnStatement[9839-9848]:ReturnStatement[9839-9848]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[9950-9959]:MarkerAnnotation[9950-9959]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9964-9970]:Modifier[9964-9970]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[9971-9976]:Modifier[9971-9976]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[9977-9983]:SimpleType[9977-9983]"
  }, {
    "left" : "getValueAsString",
    "right" : "getValueAsString",
    "info" : "SimpleName[9984-10000]:SimpleName[9984-10000]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[10010-10021]:SimpleType[10010-10021]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10026-10447]:Block[10026-10447]"
  }, {
    "left" : "if (_currToken == JsonToken.VALUE_STRING)",
    "right" : "if (_currToken == JsonToken.VALUE_STRING)",
    "info" : "IfStatement[10036-10299]:IfStatement[10036-10299]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10078-10299]:Block[10078-10299]"
  }, {
    "left" : "if (_tokenIncomplete)",
    "right" : "if (_tokenIncomplete)",
    "info" : "IfStatement[10092-10238]:IfStatement[10092-10238]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10114-10238]:Block[10114-10238]"
  }, {
    "left" : "_tokenIncomplete = false;",
    "right" : "_tokenIncomplete = false;",
    "info" : "ExpressionStatement[10132-10157]:ExpressionStatement[10132-10157]"
  }, {
    "left" : "_finishString();",
    "right" : "_finishString();",
    "info" : "ExpressionStatement[10174-10190]:ExpressionStatement[10174-10190]"
  }, {
    "left" : "return _textBuffer.contentsAsString();",
    "right" : "return _textBuffer.contentsAsString();",
    "info" : "ReturnStatement[10251-10289]:ReturnStatement[10251-10289]"
  }, {
    "left" : "if (_currToken == JsonToken.FIELD_NAME)",
    "right" : "if (_currToken == JsonToken.FIELD_NAME)",
    "info" : "IfStatement[10308-10396]:IfStatement[10308-10396]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10348-10396]:Block[10348-10396]"
  }, {
    "left" : "return getCurrentName();",
    "right" : "return getCurrentName();",
    "info" : "ReturnStatement[10362-10386]:ReturnStatement[10362-10386]"
  }, {
    "left" : "return super.getValueAsString(null);",
    "right" : "return super.getValueAsString(null);",
    "info" : "ReturnStatement[10405-10441]:ReturnStatement[10405-10441]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10471-10480]:MarkerAnnotation[10471-10480]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10485-10491]:Modifier[10485-10491]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[10492-10497]:Modifier[10492-10497]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[10498-10504]:SimpleType[10498-10504]"
  }, {
    "left" : "getValueAsString",
    "right" : "getValueAsString",
    "info" : "SimpleName[10505-10521]:SimpleName[10505-10521]"
  }, {
    "left" : "String defValue",
    "right" : "String defValue",
    "info" : "SingleVariableDeclaration[10522-10537]:SingleVariableDeclaration[10522-10537]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[10546-10557]:SimpleType[10546-10557]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10558-10983]:Block[10558-10983]"
  }, {
    "left" : "if (_currToken == JsonToken.VALUE_STRING)",
    "right" : "if (_currToken == JsonToken.VALUE_STRING)",
    "info" : "IfStatement[10568-10831]:IfStatement[10568-10831]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10610-10831]:Block[10610-10831]"
  }, {
    "left" : "if (_tokenIncomplete)",
    "right" : "if (_tokenIncomplete)",
    "info" : "IfStatement[10624-10770]:IfStatement[10624-10770]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10646-10770]:Block[10646-10770]"
  }, {
    "left" : "_tokenIncomplete = false;",
    "right" : "_tokenIncomplete = false;",
    "info" : "ExpressionStatement[10664-10689]:ExpressionStatement[10664-10689]"
  }, {
    "left" : "_finishString();",
    "right" : "_finishString();",
    "info" : "ExpressionStatement[10706-10722]:ExpressionStatement[10706-10722]"
  }, {
    "left" : "return _textBuffer.contentsAsString();",
    "right" : "return _textBuffer.contentsAsString();",
    "info" : "ReturnStatement[10783-10821]:ReturnStatement[10783-10821]"
  }, {
    "left" : "if (_currToken == JsonToken.FIELD_NAME)",
    "right" : "if (_currToken == JsonToken.FIELD_NAME)",
    "info" : "IfStatement[10840-10928]:IfStatement[10840-10928]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10880-10928]:Block[10880-10928]"
  }, {
    "left" : "return getCurrentName();",
    "right" : "return getCurrentName();",
    "info" : "ReturnStatement[10894-10918]:ReturnStatement[10894-10918]"
  }, {
    "left" : "return super.getValueAsString(defValue);",
    "right" : "return super.getValueAsString(defValue);",
    "info" : "ReturnStatement[10937-10977]:ReturnStatement[10937-10977]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[10989-10998]:Modifier[10989-10998]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[10999-11004]:Modifier[10999-11004]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[11005-11011]:SimpleType[11005-11011]"
  }, {
    "left" : "_getText2",
    "right" : "_getText2",
    "info" : "SimpleName[11012-11021]:SimpleName[11012-11021]"
  }, {
    "left" : "JsonToken t",
    "right" : "JsonToken t",
    "info" : "SingleVariableDeclaration[11022-11033]:SingleVariableDeclaration[11022-11033]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11035-11431]:Block[11035-11431]"
  }, {
    "left" : "if (t == null)",
    "right" : "if (t == null)",
    "info" : "IfStatement[11045-11096]:IfStatement[11045-11096]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11060-11096]:Block[11060-11096]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[11074-11086]:ReturnStatement[11074-11086]"
  }, {
    "left" : "switch (t.id()) {\n        case ID_FIELD_NAME:\n            return _parsingContext.getCurrentName();\n\n        case ID_STRING:\n            // fall through\n        case ID_NUMBER_INT:\n        case ID_NUMBER_FLOAT:\n            return _textBuffer.contentsAsString();\n        default:\n            return t.asString();\n        }",
    "right" : "switch (t.id()) {\n        case ID_FIELD_NAME:\n            return _parsingContext.getCurrentName();\n\n        case ID_STRING:\n            // fall through\n        case ID_NUMBER_INT:\n        case ID_NUMBER_FLOAT:\n            return _textBuffer.contentsAsString();\n        default:\n            return t.asString();\n        }",
    "info" : "SwitchStatement[11105-11425]:SwitchStatement[11105-11425]"
  }, {
    "left" : "case ID_FIELD_NAME:",
    "right" : "case ID_FIELD_NAME:",
    "info" : "SwitchCase[11131-11150]:SwitchCase[11131-11150]"
  }, {
    "left" : "return _parsingContext.getCurrentName();",
    "right" : "return _parsingContext.getCurrentName();",
    "info" : "ReturnStatement[11163-11203]:ReturnStatement[11163-11203]"
  }, {
    "left" : "case ID_STRING:",
    "right" : "case ID_STRING:",
    "info" : "SwitchCase[11213-11228]:SwitchCase[11213-11228]"
  }, {
    "left" : "case ID_NUMBER_INT:",
    "right" : "case ID_NUMBER_INT:",
    "info" : "SwitchCase[11265-11284]:SwitchCase[11265-11284]"
  }, {
    "left" : "case ID_NUMBER_FLOAT:",
    "right" : "case ID_NUMBER_FLOAT:",
    "info" : "SwitchCase[11293-11314]:SwitchCase[11293-11314]"
  }, {
    "left" : "return _textBuffer.contentsAsString();",
    "right" : "return _textBuffer.contentsAsString();",
    "info" : "ReturnStatement[11327-11365]:ReturnStatement[11327-11365]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[11374-11382]:SwitchCase[11374-11382]"
  }, {
    "left" : "return t.asString();",
    "right" : "return t.asString();",
    "info" : "ReturnStatement[11395-11415]:ReturnStatement[11395-11415]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[11437-11446]:MarkerAnnotation[11437-11446]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11451-11457]:Modifier[11451-11457]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[11458-11463]:Modifier[11458-11463]"
  }, {
    "left" : "char[]",
    "right" : "char[]",
    "info" : "ArrayType[11464-11470]:ArrayType[11464-11470]"
  }, {
    "left" : "getTextCharacters",
    "right" : "getTextCharacters",
    "info" : "SimpleName[11471-11488]:SimpleName[11471-11488]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[11498-11509]:SimpleType[11498-11509]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11514-12731]:Block[11514-12731]"
  }, {
    "left" : "if (_currToken != null)",
    "right" : "if (_currToken != null)",
    "info" : "IfStatement[11524-12704]:IfStatement[11524-12704]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11548-12704]:Block[11548-12704]"
  }, {
    "left" : "switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                if (!_nameCopied) {\n                    String name = _parsingContext.getCurrentName();\n                    int nameLen = name.length();\n                    if (_nameCopyBuffer == null) {\n                        _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);\n                    } else if (_nameCopyBuffer.length < nameLen) {\n                        _nameCopyBuffer = new char[nameLen];\n                    }\n                    name.getChars(0, nameLen, _nameCopyBuffer, 0);\n                    _nameCopied = true;\n                }\n                return _nameCopyBuffer;\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextBuffer();\n            default:\n                return _currToken.asCharArray();\n            }",
    "right" : "switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                if (!_nameCopied) {\n                    String name = _parsingContext.getCurrentName();\n                    int nameLen = name.length();\n                    if (_nameCopyBuffer == null) {\n                        _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);\n                    } else if (_nameCopyBuffer.length < nameLen) {\n                        _nameCopyBuffer = new char[nameLen];\n                    }\n                    name.getChars(0, nameLen, _nameCopyBuffer, 0);\n                    _nameCopied = true;\n                }\n                return _nameCopyBuffer;\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextBuffer();\n            default:\n                return _currToken.asCharArray();\n            }",
    "info" : "SwitchStatement[11597-12694]:SwitchStatement[11597-12694]"
  }, {
    "left" : "case ID_FIELD_NAME:",
    "right" : "case ID_FIELD_NAME:",
    "info" : "SwitchCase[11636-11655]:SwitchCase[11636-11655]"
  }, {
    "left" : "if (!_nameCopied)",
    "right" : "if (!_nameCopied)",
    "info" : "IfStatement[11672-12217]:IfStatement[11672-12217]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11690-12217]:Block[11690-12217]"
  }, {
    "left" : "String name = _parsingContext.getCurrentName();",
    "right" : "String name = _parsingContext.getCurrentName();",
    "info" : "VariableDeclarationStatement[11712-11759]:VariableDeclarationStatement[11712-11759]"
  }, {
    "left" : "int nameLen = name.length();",
    "right" : "int nameLen = name.length();",
    "info" : "VariableDeclarationStatement[11780-11808]:VariableDeclarationStatement[11780-11808]"
  }, {
    "left" : "if (_nameCopyBuffer == null)",
    "right" : "if (_nameCopyBuffer == null)",
    "info" : "IfStatement[11829-12092]:IfStatement[11829-12092]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11858-11964]:Block[11858-11964]"
  }, {
    "left" : "_nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);",
    "right" : "_nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);",
    "info" : "ExpressionStatement[11884-11942]:ExpressionStatement[11884-11942]"
  }, {
    "left" : "if (_nameCopyBuffer.length < nameLen)",
    "right" : "if (_nameCopyBuffer.length < nameLen)",
    "info" : "IfStatement[11970-12092]:IfStatement[11970-12092]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12008-12092]:Block[12008-12092]"
  }, {
    "left" : "_nameCopyBuffer = new char[nameLen];",
    "right" : "_nameCopyBuffer = new char[nameLen];",
    "info" : "ExpressionStatement[12034-12070]:ExpressionStatement[12034-12070]"
  }, {
    "left" : "name.getChars(0, nameLen, _nameCopyBuffer, 0);",
    "right" : "name.getChars(0, nameLen, _nameCopyBuffer, 0);",
    "info" : "ExpressionStatement[12113-12159]:ExpressionStatement[12113-12159]"
  }, {
    "left" : "_nameCopied = true;",
    "right" : "_nameCopied = true;",
    "info" : "ExpressionStatement[12180-12199]:ExpressionStatement[12180-12199]"
  }, {
    "left" : "return _nameCopyBuffer;",
    "right" : "return _nameCopyBuffer;",
    "info" : "ReturnStatement[12234-12257]:ReturnStatement[12234-12257]"
  }, {
    "left" : "case ID_STRING:",
    "right" : "case ID_STRING:",
    "info" : "SwitchCase[12270-12285]:SwitchCase[12270-12285]"
  }, {
    "left" : "if (_tokenIncomplete)",
    "right" : "if (_tokenIncomplete)",
    "info" : "IfStatement[12302-12460]:IfStatement[12302-12460]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12324-12460]:Block[12324-12460]"
  }, {
    "left" : "_tokenIncomplete = false;",
    "right" : "_tokenIncomplete = false;",
    "info" : "ExpressionStatement[12346-12371]:ExpressionStatement[12346-12371]"
  }, {
    "left" : "_finishString();",
    "right" : "_finishString();",
    "info" : "ExpressionStatement[12392-12408]:ExpressionStatement[12392-12408]"
  }, {
    "left" : "case ID_NUMBER_INT:",
    "right" : "case ID_NUMBER_INT:",
    "info" : "SwitchCase[12505-12524]:SwitchCase[12505-12524]"
  }, {
    "left" : "case ID_NUMBER_FLOAT:",
    "right" : "case ID_NUMBER_FLOAT:",
    "info" : "SwitchCase[12537-12558]:SwitchCase[12537-12558]"
  }, {
    "left" : "return _textBuffer.getTextBuffer();",
    "right" : "return _textBuffer.getTextBuffer();",
    "info" : "ReturnStatement[12575-12610]:ReturnStatement[12575-12610]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[12623-12631]:SwitchCase[12623-12631]"
  }, {
    "left" : "return _currToken.asCharArray();",
    "right" : "return _currToken.asCharArray();",
    "info" : "ReturnStatement[12648-12680]:ReturnStatement[12648-12680]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[12713-12725]:ReturnStatement[12713-12725]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[12737-12746]:MarkerAnnotation[12737-12746]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12751-12757]:Modifier[12751-12757]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[12758-12763]:Modifier[12758-12763]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[12764-12767]:PrimitiveType[12764-12767]"
  }, {
    "left" : "getTextLength",
    "right" : "getTextLength",
    "info" : "SimpleName[12768-12781]:SimpleName[12768-12781]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[12791-12802]:SimpleType[12791-12802]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12807-13483]:Block[12807-13483]"
  }, {
    "left" : "if (_currToken != null)",
    "right" : "if (_currToken != null)",
    "info" : "IfStatement[12817-13459]:IfStatement[12817-13459]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12841-13459]:Block[12841-13459]"
  }, {
    "left" : "switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                return _parsingContext.getCurrentName().length();\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.size();\n            default:\n                return _currToken.asCharArray().length;\n            }",
    "right" : "switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                return _parsingContext.getCurrentName().length();\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.size();\n            default:\n                return _currToken.asCharArray().length;\n            }",
    "info" : "SwitchStatement[12890-13449]:SwitchStatement[12890-13449]"
  }, {
    "left" : "case ID_FIELD_NAME:",
    "right" : "case ID_FIELD_NAME:",
    "info" : "SwitchCase[12929-12948]:SwitchCase[12929-12948]"
  }, {
    "left" : "return _parsingContext.getCurrentName().length();",
    "right" : "return _parsingContext.getCurrentName().length();",
    "info" : "ReturnStatement[12965-13014]:ReturnStatement[12965-13014]"
  }, {
    "left" : "case ID_STRING:",
    "right" : "case ID_STRING:",
    "info" : "SwitchCase[13027-13042]:SwitchCase[13027-13042]"
  }, {
    "left" : "if (_tokenIncomplete)",
    "right" : "if (_tokenIncomplete)",
    "info" : "IfStatement[13059-13217]:IfStatement[13059-13217]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13081-13217]:Block[13081-13217]"
  }, {
    "left" : "_tokenIncomplete = false;",
    "right" : "_tokenIncomplete = false;",
    "info" : "ExpressionStatement[13103-13128]:ExpressionStatement[13103-13128]"
  }, {
    "left" : "_finishString();",
    "right" : "_finishString();",
    "info" : "ExpressionStatement[13149-13165]:ExpressionStatement[13149-13165]"
  }, {
    "left" : "case ID_NUMBER_INT:",
    "right" : "case ID_NUMBER_INT:",
    "info" : "SwitchCase[13262-13281]:SwitchCase[13262-13281]"
  }, {
    "left" : "case ID_NUMBER_FLOAT:",
    "right" : "case ID_NUMBER_FLOAT:",
    "info" : "SwitchCase[13294-13315]:SwitchCase[13294-13315]"
  }, {
    "left" : "return _textBuffer.size();",
    "right" : "return _textBuffer.size();",
    "info" : "ReturnStatement[13332-13358]:ReturnStatement[13332-13358]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[13371-13379]:SwitchCase[13371-13379]"
  }, {
    "left" : "return _currToken.asCharArray().length;",
    "right" : "return _currToken.asCharArray().length;",
    "info" : "ReturnStatement[13396-13435]:ReturnStatement[13396-13435]"
  }, {
    "left" : "return 0;",
    "right" : "return 0;",
    "info" : "ReturnStatement[13468-13477]:ReturnStatement[13468-13477]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[13489-13498]:MarkerAnnotation[13489-13498]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13503-13509]:Modifier[13503-13509]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[13510-13515]:Modifier[13510-13515]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[13516-13519]:PrimitiveType[13516-13519]"
  }, {
    "left" : "getTextOffset",
    "right" : "getTextOffset",
    "info" : "SimpleName[13520-13533]:SimpleName[13520-13533]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[13543-13554]:SimpleType[13543-13554]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13559-14180]:Block[13559-14180]"
  }, {
    "left" : "if (_currToken != null)",
    "right" : "if (_currToken != null)",
    "info" : "IfStatement[13636-14156]:IfStatement[13636-14156]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13660-14156]:Block[13660-14156]"
  }, {
    "left" : "switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                return 0;\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextOffset();\n            default:\n            }",
    "right" : "switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                return 0;\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextOffset();\n            default:\n            }",
    "info" : "SwitchStatement[13674-14146]:SwitchStatement[13674-14146]"
  }, {
    "left" : "case ID_FIELD_NAME:",
    "right" : "case ID_FIELD_NAME:",
    "info" : "SwitchCase[13713-13732]:SwitchCase[13713-13732]"
  }, {
    "left" : "return 0;",
    "right" : "return 0;",
    "info" : "ReturnStatement[13749-13758]:ReturnStatement[13749-13758]"
  }, {
    "left" : "case ID_STRING:",
    "right" : "case ID_STRING:",
    "info" : "SwitchCase[13771-13786]:SwitchCase[13771-13786]"
  }, {
    "left" : "if (_tokenIncomplete)",
    "right" : "if (_tokenIncomplete)",
    "info" : "IfStatement[13803-13961]:IfStatement[13803-13961]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13825-13961]:Block[13825-13961]"
  }, {
    "left" : "_tokenIncomplete = false;",
    "right" : "_tokenIncomplete = false;",
    "info" : "ExpressionStatement[13847-13872]:ExpressionStatement[13847-13872]"
  }, {
    "left" : "_finishString();",
    "right" : "_finishString();",
    "info" : "ExpressionStatement[13893-13909]:ExpressionStatement[13893-13909]"
  }, {
    "left" : "case ID_NUMBER_INT:",
    "right" : "case ID_NUMBER_INT:",
    "info" : "SwitchCase[14006-14025]:SwitchCase[14006-14025]"
  }, {
    "left" : "case ID_NUMBER_FLOAT:",
    "right" : "case ID_NUMBER_FLOAT:",
    "info" : "SwitchCase[14038-14059]:SwitchCase[14038-14059]"
  }, {
    "left" : "return _textBuffer.getTextOffset();",
    "right" : "return _textBuffer.getTextOffset();",
    "info" : "ReturnStatement[14076-14111]:ReturnStatement[14076-14111]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[14124-14132]:SwitchCase[14124-14132]"
  }, {
    "left" : "return 0;",
    "right" : "return 0;",
    "info" : "ReturnStatement[14165-14174]:ReturnStatement[14165-14174]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[14186-14195]:MarkerAnnotation[14186-14195]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14200-14206]:Modifier[14200-14206]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[14207-14213]:ArrayType[14207-14213]"
  }, {
    "left" : "getBinaryValue",
    "right" : "getBinaryValue",
    "info" : "SimpleName[14214-14228]:SimpleName[14214-14228]"
  }, {
    "left" : "Base64Variant b64variant",
    "right" : "Base64Variant b64variant",
    "info" : "SingleVariableDeclaration[14229-14253]:SingleVariableDeclaration[14229-14253]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[14262-14273]:SimpleType[14262-14273]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14278-15533]:Block[14278-15533]"
  }, {
    "left" : "if ((_currToken == JsonToken.VALUE_EMBEDDED_OBJECT) && (_binaryValue != null))",
    "right" : "if ((_currToken == JsonToken.VALUE_EMBEDDED_OBJECT) && (_binaryValue != null))",
    "info" : "IfStatement[14288-14411]:IfStatement[14288-14411]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14367-14411]:Block[14367-14411]"
  }, {
    "left" : "return _binaryValue;",
    "right" : "return _binaryValue;",
    "info" : "ReturnStatement[14381-14401]:ReturnStatement[14381-14401]"
  }, {
    "left" : "if (_currToken != JsonToken.VALUE_STRING)",
    "right" : "if (_currToken != JsonToken.VALUE_STRING)",
    "info" : "IfStatement[14420-14601]:IfStatement[14420-14601]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14462-14601]:Block[14462-14601]"
  }, {
    "left" : "_reportError(\"Current token (\"+_currToken+\") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary\");",
    "right" : "_reportError(\"Current token (\"+_currToken+\") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary\");",
    "info" : "ExpressionStatement[14476-14591]:ExpressionStatement[14476-14591]"
  }, {
    "left" : "if (_tokenIncomplete)",
    "right" : "if (_tokenIncomplete)",
    "info" : "IfStatement[14690-15498]:IfStatement[14690-15498]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14712-15159]:Block[14712-15159]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[14726-14974]:TryStatement[14726-14974]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14730-14803]:Block[14730-14803]"
  }, {
    "left" : "_binaryValue = _decodeBase64(b64variant);",
    "right" : "_binaryValue = _decodeBase64(b64variant);",
    "info" : "ExpressionStatement[14748-14789]:ExpressionStatement[14748-14789]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14841-14974]:Block[14841-14974]"
  }, {
    "left" : "throw _constructError(\"Failed to decode VALUE_STRING as base64 (\"+b64variant+\"): \"+iae.getMessage());",
    "right" : "throw _constructError(\"Failed to decode VALUE_STRING as base64 (\"+b64variant+\"): \"+iae.getMessage());",
    "info" : "ThrowStatement[14859-14960]:ThrowStatement[14859-14960]"
  }, {
    "left" : "_tokenIncomplete = false;",
    "right" : "_tokenIncomplete = false;",
    "info" : "ExpressionStatement[15124-15149]:ExpressionStatement[15124-15149]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15165-15498]:Block[15165-15498]"
  }, {
    "left" : "if (_binaryValue == null)",
    "right" : "if (_binaryValue == null)",
    "info" : "IfStatement[15217-15488]:IfStatement[15217-15488]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15243-15488]:Block[15243-15488]"
  }, {
    "left" : "@SuppressWarnings(\"resource\")\n                ByteArrayBuilder builder = _getByteArrayBuilder();",
    "right" : "@SuppressWarnings(\"resource\")\n                ByteArrayBuilder builder = _getByteArrayBuilder();",
    "info" : "VariableDeclarationStatement[15261-15357]:VariableDeclarationStatement[15261-15357]"
  }, {
    "left" : "_decodeBase64(getText(), builder, b64variant);",
    "right" : "_decodeBase64(getText(), builder, b64variant);",
    "info" : "ExpressionStatement[15374-15420]:ExpressionStatement[15374-15420]"
  }, {
    "left" : "_binaryValue = builder.toByteArray();",
    "right" : "_binaryValue = builder.toByteArray();",
    "info" : "ExpressionStatement[15437-15474]:ExpressionStatement[15437-15474]"
  }, {
    "left" : "return _binaryValue;",
    "right" : "return _binaryValue;",
    "info" : "ReturnStatement[15507-15527]:ReturnStatement[15507-15527]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[15539-15548]:MarkerAnnotation[15539-15548]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15553-15559]:Modifier[15553-15559]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[15560-15563]:PrimitiveType[15560-15563]"
  }, {
    "left" : "readBinaryValue",
    "right" : "readBinaryValue",
    "info" : "SimpleName[15564-15579]:SimpleName[15564-15579]"
  }, {
    "left" : "Base64Variant b64variant",
    "right" : "Base64Variant b64variant",
    "info" : "SingleVariableDeclaration[15580-15604]:SingleVariableDeclaration[15580-15604]"
  }, {
    "left" : "OutputStream out",
    "right" : "OutputStream out",
    "info" : "SingleVariableDeclaration[15606-15622]:SingleVariableDeclaration[15606-15622]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[15631-15642]:SimpleType[15631-15642]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15647-16173]:Block[15647-16173]"
  }, {
    "left" : "if (!_tokenIncomplete || _currToken != JsonToken.VALUE_STRING)",
    "right" : "if (!_tokenIncomplete || _currToken != JsonToken.VALUE_STRING)",
    "info" : "IfStatement[15733-15913]:IfStatement[15733-15913]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15796-15913]:Block[15796-15913]"
  }, {
    "left" : "byte[] b = getBinaryValue(b64variant);",
    "right" : "byte[] b = getBinaryValue(b64variant);",
    "info" : "VariableDeclarationStatement[15810-15848]:VariableDeclarationStatement[15810-15848]"
  }, {
    "left" : "out.write(b);",
    "right" : "out.write(b);",
    "info" : "ExpressionStatement[15861-15874]:ExpressionStatement[15861-15874]"
  }, {
    "left" : "return b.length;",
    "right" : "return b.length;",
    "info" : "ReturnStatement[15887-15903]:ReturnStatement[15887-15903]"
  }, {
    "left" : "byte[] buf = _ioContext.allocBase64Buffer();",
    "right" : "byte[] buf = _ioContext.allocBase64Buffer();",
    "info" : "VariableDeclarationStatement[15976-16020]:VariableDeclarationStatement[15976-16020]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[16029-16167]:TryStatement[16029-16167]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16033-16098]:Block[16033-16098]"
  }, {
    "left" : "return _readBinary(b64variant, out, buf);",
    "right" : "return _readBinary(b64variant, out, buf);",
    "info" : "ReturnStatement[16047-16088]:ReturnStatement[16047-16088]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16107-16167]:Block[16107-16167]"
  }, {
    "left" : "_ioContext.releaseBase64Buffer(buf);",
    "right" : "_ioContext.releaseBase64Buffer(buf);",
    "info" : "ExpressionStatement[16121-16157]:ExpressionStatement[16121-16157]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[16179-16188]:Modifier[16179-16188]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[16189-16192]:PrimitiveType[16189-16192]"
  }, {
    "left" : "_readBinary",
    "right" : "_readBinary",
    "info" : "SimpleName[16193-16204]:SimpleName[16193-16204]"
  }, {
    "left" : "Base64Variant b64variant",
    "right" : "Base64Variant b64variant",
    "info" : "SingleVariableDeclaration[16205-16229]:SingleVariableDeclaration[16205-16229]"
  }, {
    "left" : "OutputStream out",
    "right" : "OutputStream out",
    "info" : "SingleVariableDeclaration[16231-16247]:SingleVariableDeclaration[16231-16247]"
  }, {
    "left" : "byte[] buffer",
    "right" : "byte[] buffer",
    "info" : "SingleVariableDeclaration[16249-16262]:SingleVariableDeclaration[16249-16262]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[16271-16282]:SimpleType[16271-16282]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16287-21872]:Block[16287-21872]"
  }, {
    "left" : "int outputPtr = 0;",
    "right" : "int outputPtr = 0;",
    "info" : "VariableDeclarationStatement[16297-16315]:VariableDeclarationStatement[16297-16315]"
  }, {
    "left" : "final int outputEnd = buffer.length - 3;",
    "right" : "final int outputEnd = buffer.length - 3;",
    "info" : "VariableDeclarationStatement[16324-16364]:VariableDeclarationStatement[16324-16364]"
  }, {
    "left" : "int outputCount = 0;",
    "right" : "int outputCount = 0;",
    "info" : "VariableDeclarationStatement[16373-16393]:VariableDeclarationStatement[16373-16393]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[16403-21682]:WhileStatement[16403-21682]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16416-21682]:Block[16416-21682]"
  }, {
    "left" : "char ch;",
    "right" : "char ch;",
    "info" : "VariableDeclarationStatement[16493-16501]:VariableDeclarationStatement[16493-16501]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[16514-16712]:DoStatement[16514-16712]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16517-16687]:Block[16517-16687]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[16535-16625]:IfStatement[16535-16625]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16563-16625]:Block[16563-16625]"
  }, {
    "left" : "_loadMoreGuaranteed();",
    "right" : "_loadMoreGuaranteed();",
    "info" : "ExpressionStatement[16585-16607]:ExpressionStatement[16585-16607]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr++];",
    "right" : "ch = _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[16642-16673]:ExpressionStatement[16642-16673]"
  }, {
    "left" : "int bits = b64variant.decodeBase64Char(ch);",
    "right" : "int bits = b64variant.decodeBase64Char(ch);",
    "info" : "VariableDeclarationStatement[16725-16768]:VariableDeclarationStatement[16725-16768]"
  }, {
    "left" : "if (bits < 0)",
    "right" : "if (bits < 0)",
    "info" : "IfStatement[16781-17091]:IfStatement[16781-17091]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16795-17091]:Block[16795-17091]"
  }, {
    "left" : "if (ch == '\"')",
    "right" : "if (ch == '\"')",
    "info" : "IfStatement[16850-16911]:IfStatement[16850-16911]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16865-16911]:Block[16865-16911]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[16887-16893]:BreakStatement[16887-16893]"
  }, {
    "left" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
    "right" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
    "info" : "ExpressionStatement[16928-16974]:ExpressionStatement[16928-16974]"
  }, {
    "left" : "if (bits < 0)",
    "right" : "if (bits < 0)",
    "info" : "IfStatement[16991-17077]:IfStatement[16991-17077]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17005-17077]:Block[17005-17077]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[17050-17059]:ContinueStatement[17050-17059]"
  }, {
    "left" : "if (outputPtr > outputEnd)",
    "right" : "if (outputPtr > outputEnd)",
    "info" : "IfStatement[17147-17311]:IfStatement[17147-17311]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17174-17311]:Block[17174-17311]"
  }, {
    "left" : "outputCount += outputPtr;",
    "right" : "outputCount += outputPtr;",
    "info" : "ExpressionStatement[17192-17217]:ExpressionStatement[17192-17217]"
  }, {
    "left" : "out.write(buffer, 0, outputPtr);",
    "right" : "out.write(buffer, 0, outputPtr);",
    "info" : "ExpressionStatement[17234-17266]:ExpressionStatement[17234-17266]"
  }, {
    "left" : "outputPtr = 0;",
    "right" : "outputPtr = 0;",
    "info" : "ExpressionStatement[17283-17297]:ExpressionStatement[17283-17297]"
  }, {
    "left" : "int decodedData = bits;",
    "right" : "int decodedData = bits;",
    "info" : "VariableDeclarationStatement[17325-17348]:VariableDeclarationStatement[17325-17348]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[17433-17515]:IfStatement[17433-17515]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17461-17515]:Block[17461-17515]"
  }, {
    "left" : "_loadMoreGuaranteed();",
    "right" : "_loadMoreGuaranteed();",
    "info" : "ExpressionStatement[17479-17501]:ExpressionStatement[17479-17501]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr++];",
    "right" : "ch = _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[17528-17559]:ExpressionStatement[17528-17559]"
  }, {
    "left" : "bits = b64variant.decodeBase64Char(ch);",
    "right" : "bits = b64variant.decodeBase64Char(ch);",
    "info" : "ExpressionStatement[17572-17611]:ExpressionStatement[17572-17611]"
  }, {
    "left" : "if (bits < 0)",
    "right" : "if (bits < 0)",
    "info" : "IfStatement[17624-17716]:IfStatement[17624-17716]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17638-17716]:Block[17638-17716]"
  }, {
    "left" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
    "right" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
    "info" : "ExpressionStatement[17656-17702]:ExpressionStatement[17656-17702]"
  }, {
    "left" : "decodedData = (decodedData << 6) | bits;",
    "right" : "decodedData = (decodedData << 6) | bits;",
    "info" : "ExpressionStatement[17729-17769]:ExpressionStatement[17729-17769]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[17844-17926]:IfStatement[17844-17926]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17872-17926]:Block[17872-17926]"
  }, {
    "left" : "_loadMoreGuaranteed();",
    "right" : "_loadMoreGuaranteed();",
    "info" : "ExpressionStatement[17890-17912]:ExpressionStatement[17890-17912]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr++];",
    "right" : "ch = _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[17939-17970]:ExpressionStatement[17939-17970]"
  }, {
    "left" : "bits = b64variant.decodeBase64Char(ch);",
    "right" : "bits = b64variant.decodeBase64Char(ch);",
    "info" : "ExpressionStatement[17983-18022]:ExpressionStatement[17983-18022]"
  }, {
    "left" : "if (bits < 0)",
    "right" : "if (bits < 0)",
    "info" : "IfStatement[18093-19641]:IfStatement[18093-19641]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18107-19641]:Block[18107-19641]"
  }, {
    "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
    "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
    "info" : "IfStatement[18125-18777]:IfStatement[18125-18777]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18173-18777]:Block[18173-18777]"
  }, {
    "left" : "if (ch == '\"')",
    "right" : "if (ch == '\"')",
    "info" : "IfStatement[18278-18692]:IfStatement[18278-18692]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18293-18692]:Block[18293-18692]"
  }, {
    "left" : "decodedData >>= 4;",
    "right" : "decodedData >>= 4;",
    "info" : "ExpressionStatement[18319-18337]:ExpressionStatement[18319-18337]"
  }, {
    "left" : "buffer[outputPtr++] = (byte) decodedData;",
    "right" : "buffer[outputPtr++] = (byte) decodedData;",
    "info" : "ExpressionStatement[18362-18403]:ExpressionStatement[18362-18403]"
  }, {
    "left" : "if (b64variant.usesPadding())",
    "right" : "if (b64variant.usesPadding())",
    "info" : "IfStatement[18428-18639]:IfStatement[18428-18639]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18458-18639]:Block[18458-18639]"
  }, {
    "left" : "--_inputPtr;",
    "right" : "--_inputPtr;",
    "info" : "ExpressionStatement[18488-18500]:ExpressionStatement[18488-18500]"
  }, {
    "left" : "_handleBase64MissingPadding(b64variant);",
    "right" : "_handleBase64MissingPadding(b64variant);",
    "info" : "ExpressionStatement[18573-18613]:ExpressionStatement[18573-18613]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18664-18670]:BreakStatement[18664-18670]"
  }, {
    "left" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
    "right" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
    "info" : "ExpressionStatement[18713-18759]:ExpressionStatement[18713-18759]"
  }, {
    "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
    "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
    "info" : "IfStatement[18794-19627]:IfStatement[18794-19627]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18842-19627]:Block[18842-19627]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[18908-19006]:IfStatement[18908-19006]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18936-19006]:Block[18936-19006]"
  }, {
    "left" : "_loadMoreGuaranteed();",
    "right" : "_loadMoreGuaranteed();",
    "info" : "ExpressionStatement[18962-18984]:ExpressionStatement[18962-18984]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr++];",
    "right" : "ch = _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[19027-19058]:ExpressionStatement[19027-19058]"
  }, {
    "left" : "if (!b64variant.usesPaddingChar(ch))",
    "right" : "if (!b64variant.usesPaddingChar(ch))",
    "info" : "IfStatement[19079-19415]:IfStatement[19079-19415]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19116-19415]:Block[19116-19415]"
  }, {
    "left" : "if (_decodeBase64Escape(b64variant, ch, 3) != Base64Variant.BASE64_VALUE_PADDING)",
    "right" : "if (_decodeBase64Escape(b64variant, ch, 3) != Base64Variant.BASE64_VALUE_PADDING)",
    "info" : "IfStatement[19142-19393]:IfStatement[19142-19393]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19224-19393]:Block[19224-19393]"
  }, {
    "left" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
    "right" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
    "info" : "ThrowStatement[19254-19367]:ThrowStatement[19254-19367]"
  }, {
    "left" : "decodedData >>= 4;",
    "right" : "decodedData >>= 4;",
    "info" : "ExpressionStatement[19499-19517]:ExpressionStatement[19499-19517]"
  }, {
    "left" : "buffer[outputPtr++] = (byte) decodedData;",
    "right" : "buffer[outputPtr++] = (byte) decodedData;",
    "info" : "ExpressionStatement[19538-19579]:ExpressionStatement[19538-19579]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[19600-19609]:ContinueStatement[19600-19609]"
  }, {
    "left" : "decodedData = (decodedData << 6) | bits;",
    "right" : "decodedData = (decodedData << 6) | bits;",
    "info" : "ExpressionStatement[19688-19728]:ExpressionStatement[19688-19728]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[19812-19894]:IfStatement[19812-19894]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19840-19894]:Block[19840-19894]"
  }, {
    "left" : "_loadMoreGuaranteed();",
    "right" : "_loadMoreGuaranteed();",
    "info" : "ExpressionStatement[19858-19880]:ExpressionStatement[19858-19880]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr++];",
    "right" : "ch = _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[19907-19938]:ExpressionStatement[19907-19938]"
  }, {
    "left" : "bits = b64variant.decodeBase64Char(ch);",
    "right" : "bits = b64variant.decodeBase64Char(ch);",
    "info" : "ExpressionStatement[19951-19990]:ExpressionStatement[19951-19990]"
  }, {
    "left" : "if (bits < 0)",
    "right" : "if (bits < 0)",
    "info" : "IfStatement[20003-21388]:IfStatement[20003-21388]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20017-21388]:Block[20017-21388]"
  }, {
    "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
    "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
    "info" : "IfStatement[20035-20760]:IfStatement[20035-20760]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20083-20760]:Block[20083-20760]"
  }, {
    "left" : "if (ch == '\"')",
    "right" : "if (ch == '\"')",
    "info" : "IfStatement[20188-20675]:IfStatement[20188-20675]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20203-20675]:Block[20203-20675]"
  }, {
    "left" : "decodedData >>= 2;",
    "right" : "decodedData >>= 2;",
    "info" : "ExpressionStatement[20229-20247]:ExpressionStatement[20229-20247]"
  }, {
    "left" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
    "right" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
    "info" : "ExpressionStatement[20272-20320]:ExpressionStatement[20272-20320]"
  }, {
    "left" : "buffer[outputPtr++] = (byte) decodedData;",
    "right" : "buffer[outputPtr++] = (byte) decodedData;",
    "info" : "ExpressionStatement[20345-20386]:ExpressionStatement[20345-20386]"
  }, {
    "left" : "if (b64variant.usesPadding())",
    "right" : "if (b64variant.usesPadding())",
    "info" : "IfStatement[20411-20622]:IfStatement[20411-20622]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20441-20622]:Block[20441-20622]"
  }, {
    "left" : "--_inputPtr;",
    "right" : "--_inputPtr;",
    "info" : "ExpressionStatement[20471-20483]:ExpressionStatement[20471-20483]"
  }, {
    "left" : "_handleBase64MissingPadding(b64variant);",
    "right" : "_handleBase64MissingPadding(b64variant);",
    "info" : "ExpressionStatement[20556-20596]:ExpressionStatement[20556-20596]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20647-20653]:BreakStatement[20647-20653]"
  }, {
    "left" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
    "right" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
    "info" : "ExpressionStatement[20696-20742]:ExpressionStatement[20696-20742]"
  }, {
    "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
    "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
    "info" : "IfStatement[20777-21374]:IfStatement[20777-21374]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20825-21374]:Block[20825-21374]"
  }, {
    "left" : "decodedData >>= 2;",
    "right" : "decodedData >>= 2;",
    "info" : "ExpressionStatement[21177-21195]:ExpressionStatement[21177-21195]"
  }, {
    "left" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
    "right" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
    "info" : "ExpressionStatement[21216-21264]:ExpressionStatement[21216-21264]"
  }, {
    "left" : "buffer[outputPtr++] = (byte) decodedData;",
    "right" : "buffer[outputPtr++] = (byte) decodedData;",
    "info" : "ExpressionStatement[21285-21326]:ExpressionStatement[21285-21326]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[21347-21356]:ContinueStatement[21347-21356]"
  }, {
    "left" : "decodedData = (decodedData << 6) | bits;",
    "right" : "decodedData = (decodedData << 6) | bits;",
    "info" : "ExpressionStatement[21455-21495]:ExpressionStatement[21455-21495]"
  }, {
    "left" : "buffer[outputPtr++] = (byte) (decodedData >> 16);",
    "right" : "buffer[outputPtr++] = (byte) (decodedData >> 16);",
    "info" : "ExpressionStatement[21508-21557]:ExpressionStatement[21508-21557]"
  }, {
    "left" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
    "right" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
    "info" : "ExpressionStatement[21570-21618]:ExpressionStatement[21570-21618]"
  }, {
    "left" : "buffer[outputPtr++] = (byte) decodedData;",
    "right" : "buffer[outputPtr++] = (byte) decodedData;",
    "info" : "ExpressionStatement[21631-21672]:ExpressionStatement[21631-21672]"
  }, {
    "left" : "_tokenIncomplete = false;",
    "right" : "_tokenIncomplete = false;",
    "info" : "ExpressionStatement[21691-21716]:ExpressionStatement[21691-21716]"
  }, {
    "left" : "if (outputPtr > 0)",
    "right" : "if (outputPtr > 0)",
    "info" : "IfStatement[21725-21838]:IfStatement[21725-21838]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21744-21838]:Block[21744-21838]"
  }, {
    "left" : "outputCount += outputPtr;",
    "right" : "outputCount += outputPtr;",
    "info" : "ExpressionStatement[21758-21783]:ExpressionStatement[21758-21783]"
  }, {
    "left" : "out.write(buffer, 0, outputPtr);",
    "right" : "out.write(buffer, 0, outputPtr);",
    "info" : "ExpressionStatement[21796-21828]:ExpressionStatement[21796-21828]"
  }, {
    "left" : "return outputCount;",
    "right" : "return outputCount;",
    "info" : "ReturnStatement[21847-21866]:ReturnStatement[21847-21866]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[22166-22175]:MarkerAnnotation[22166-22175]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[22180-22186]:Modifier[22180-22186]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[22187-22192]:Modifier[22187-22192]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[22193-22202]:SimpleType[22193-22202]"
  }, {
    "left" : "nextToken",
    "right" : "nextToken",
    "info" : "SimpleName[22203-22212]:SimpleName[22203-22212]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[22222-22233]:SimpleType[22222-22233]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22238-26187]:Block[22238-26187]"
  }, {
    "left" : "if (_currToken == JsonToken.FIELD_NAME)",
    "right" : "if (_currToken == JsonToken.FIELD_NAME)",
    "info" : "IfStatement[22461-22549]:IfStatement[22461-22549]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22501-22549]:Block[22501-22549]"
  }, {
    "left" : "return _nextAfterName();",
    "right" : "return _nextAfterName();",
    "info" : "ReturnStatement[22515-22539]:ReturnStatement[22515-22539]"
  }, {
    "left" : "_numTypesValid = NR_UNKNOWN;",
    "right" : "_numTypesValid = NR_UNKNOWN;",
    "info" : "ExpressionStatement[22698-22726]:ExpressionStatement[22698-22726]"
  }, {
    "left" : "if (_tokenIncomplete)",
    "right" : "if (_tokenIncomplete)",
    "info" : "IfStatement[22735-22826]:IfStatement[22735-22826]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22757-22826]:Block[22757-22826]"
  }, {
    "left" : "_skipString();",
    "right" : "_skipString();",
    "info" : "ExpressionStatement[22771-22785]:ExpressionStatement[22771-22785]"
  }, {
    "left" : "int i = _skipWSOrEnd();",
    "right" : "int i = _skipWSOrEnd();",
    "info" : "VariableDeclarationStatement[22835-22858]:VariableDeclarationStatement[22835-22858]"
  }, {
    "left" : "if (i < 0)",
    "right" : "if (i < 0)",
    "info" : "IfStatement[22867-23093]:IfStatement[22867-23093]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22878-23093]:Block[22878-23093]"
  }, {
    "left" : "close();",
    "right" : "close();",
    "info" : "ExpressionStatement[23035-23043]:ExpressionStatement[23035-23043]"
  }, {
    "left" : "return (_currToken = null);",
    "right" : "return (_currToken = null);",
    "info" : "ReturnStatement[23056-23083]:ReturnStatement[23056-23083]"
  }, {
    "left" : "_binaryValue = null;",
    "right" : "_binaryValue = null;",
    "info" : "ExpressionStatement[23144-23164]:ExpressionStatement[23144-23164]"
  }, {
    "left" : "if (i == INT_RBRACKET || i == INT_RCURLY)",
    "right" : "if (i == INT_RBRACKET || i == INT_RCURLY)",
    "info" : "IfStatement[23200-23312]:IfStatement[23200-23312]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23242-23312]:Block[23242-23312]"
  }, {
    "left" : "_closeScope(i);",
    "right" : "_closeScope(i);",
    "info" : "ExpressionStatement[23256-23271]:ExpressionStatement[23256-23271]"
  }, {
    "left" : "return _currToken;",
    "right" : "return _currToken;",
    "info" : "ReturnStatement[23284-23302]:ReturnStatement[23284-23302]"
  }, {
    "left" : "if (_parsingContext.expectComma())",
    "right" : "if (_parsingContext.expectComma())",
    "info" : "IfStatement[23366-23720]:IfStatement[23366-23720]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23401-23720]:Block[23401-23720]"
  }, {
    "left" : "i = _skipComma(i);",
    "right" : "i = _skipComma(i);",
    "info" : "ExpressionStatement[23415-23433]:ExpressionStatement[23415-23433]"
  }, {
    "left" : "if ((_features & FEAT_MASK_TRAILING_COMMA) != 0)",
    "right" : "if ((_features & FEAT_MASK_TRAILING_COMMA) != 0)",
    "info" : "IfStatement[23489-23710]:IfStatement[23489-23710]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23538-23710]:Block[23538-23710]"
  }, {
    "left" : "if ((i == INT_RBRACKET) || (i == INT_RCURLY))",
    "right" : "if ((i == INT_RBRACKET) || (i == INT_RCURLY))",
    "info" : "IfStatement[23556-23696]:IfStatement[23556-23696]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23602-23696]:Block[23602-23696]"
  }, {
    "left" : "_closeScope(i);",
    "right" : "_closeScope(i);",
    "info" : "ExpressionStatement[23624-23639]:ExpressionStatement[23624-23639]"
  }, {
    "left" : "return _currToken;",
    "right" : "return _currToken;",
    "info" : "ReturnStatement[23660-23678]:ReturnStatement[23660-23678]"
  }, {
    "left" : "boolean inObject = _parsingContext.inObject();",
    "right" : "boolean inObject = _parsingContext.inObject();",
    "info" : "VariableDeclarationStatement[23891-23937]:VariableDeclarationStatement[23891-23937]"
  }, {
    "left" : "if (inObject)",
    "right" : "if (inObject)",
    "info" : "IfStatement[23946-24253]:IfStatement[23946-24253]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23960-24253]:Block[23960-24253]"
  }, {
    "left" : "_updateNameLocation();",
    "right" : "_updateNameLocation();",
    "info" : "ExpressionStatement[24015-24037]:ExpressionStatement[24015-24037]"
  }, {
    "left" : "String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);",
    "right" : "String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);",
    "info" : "VariableDeclarationStatement[24050-24116]:VariableDeclarationStatement[24050-24116]"
  }, {
    "left" : "_parsingContext.setCurrentName(name);",
    "right" : "_parsingContext.setCurrentName(name);",
    "info" : "ExpressionStatement[24129-24166]:ExpressionStatement[24129-24166]"
  }, {
    "left" : "_currToken = JsonToken.FIELD_NAME;",
    "right" : "_currToken = JsonToken.FIELD_NAME;",
    "info" : "ExpressionStatement[24179-24213]:ExpressionStatement[24179-24213]"
  }, {
    "left" : "i = _skipColon();",
    "right" : "i = _skipColon();",
    "info" : "ExpressionStatement[24226-24243]:ExpressionStatement[24226-24243]"
  }, {
    "left" : "_updateLocation();",
    "right" : "_updateLocation();",
    "info" : "ExpressionStatement[24262-24280]:ExpressionStatement[24262-24280]"
  }, {
    "left" : "JsonToken t;",
    "right" : "JsonToken t;",
    "info" : "VariableDeclarationStatement[24342-24354]:VariableDeclarationStatement[24342-24354]"
  }, {
    "left" : "switch (i) {\n        case '\"':\n            _tokenIncomplete = true;\n            t = JsonToken.VALUE_STRING;\n            break;\n        case '[':\n            if (!inObject) {\n                _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            }\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            if (!inObject) {\n                _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            }\n            t = JsonToken.START_OBJECT;\n            break;\n        case '}':\n            // Error: } is not valid at this point; valid closers have\n            // been handled earlier\n            _reportUnexpectedChar(i, \"expected a value\");\n        case 't':\n            _matchTrue();\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case 'f':\n            _matchFalse();\n            t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchNull();\n            t = JsonToken.VALUE_NULL;\n            break;\n\n        case '-':\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicate by a more specific error message.\n             */\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        default:\n            t = _handleOddValue(i);\n            break;\n        }",
    "right" : "switch (i) {\n        case '\"':\n            _tokenIncomplete = true;\n            t = JsonToken.VALUE_STRING;\n            break;\n        case '[':\n            if (!inObject) {\n                _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            }\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            if (!inObject) {\n                _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            }\n            t = JsonToken.START_OBJECT;\n            break;\n        case '}':\n            // Error: } is not valid at this point; valid closers have\n            // been handled earlier\n            _reportUnexpectedChar(i, \"expected a value\");\n        case 't':\n            _matchTrue();\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case 'f':\n            _matchFalse();\n            t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchNull();\n            t = JsonToken.VALUE_NULL;\n            break;\n\n        case '-':\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicate by a more specific error message.\n             */\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        default:\n            t = _handleOddValue(i);\n            break;\n        }",
    "info" : "SwitchStatement[24364-26045]:SwitchStatement[24364-26045]"
  }, {
    "left" : "case '\"':",
    "right" : "case '\"':",
    "info" : "SwitchCase[24385-24394]:SwitchCase[24385-24394]"
  }, {
    "left" : "_tokenIncomplete = true;",
    "right" : "_tokenIncomplete = true;",
    "info" : "ExpressionStatement[24407-24431]:ExpressionStatement[24407-24431]"
  }, {
    "left" : "t = JsonToken.VALUE_STRING;",
    "right" : "t = JsonToken.VALUE_STRING;",
    "info" : "ExpressionStatement[24444-24471]:ExpressionStatement[24444-24471]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[24484-24490]:BreakStatement[24484-24490]"
  }, {
    "left" : "case '[':",
    "right" : "case '[':",
    "info" : "SwitchCase[24499-24508]:SwitchCase[24499-24508]"
  }, {
    "left" : "if (!inObject)",
    "right" : "if (!inObject)",
    "info" : "IfStatement[24521-24658]:IfStatement[24521-24658]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24536-24658]:Block[24536-24658]"
  }, {
    "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
    "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
    "info" : "ExpressionStatement[24554-24644]:ExpressionStatement[24554-24644]"
  }, {
    "left" : "t = JsonToken.START_ARRAY;",
    "right" : "t = JsonToken.START_ARRAY;",
    "info" : "ExpressionStatement[24671-24697]:ExpressionStatement[24671-24697]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[24710-24716]:BreakStatement[24710-24716]"
  }, {
    "left" : "case '{':",
    "right" : "case '{':",
    "info" : "SwitchCase[24725-24734]:SwitchCase[24725-24734]"
  }, {
    "left" : "if (!inObject)",
    "right" : "if (!inObject)",
    "info" : "IfStatement[24747-24885]:IfStatement[24747-24885]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24762-24885]:Block[24762-24885]"
  }, {
    "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
    "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
    "info" : "ExpressionStatement[24780-24871]:ExpressionStatement[24780-24871]"
  }, {
    "left" : "t = JsonToken.START_OBJECT;",
    "right" : "t = JsonToken.START_OBJECT;",
    "info" : "ExpressionStatement[24898-24925]:ExpressionStatement[24898-24925]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[24938-24944]:BreakStatement[24938-24944]"
  }, {
    "left" : "case '}':",
    "right" : "case '}':",
    "info" : "SwitchCase[24953-24962]:SwitchCase[24953-24962]"
  }, {
    "left" : "_reportUnexpectedChar(i, \"expected a value\");",
    "right" : "_reportUnexpectedChar(i, \"expected a value\");",
    "info" : "ExpressionStatement[25082-25127]:ExpressionStatement[25082-25127]"
  }, {
    "left" : "case 't':",
    "right" : "case 't':",
    "info" : "SwitchCase[25136-25145]:SwitchCase[25136-25145]"
  }, {
    "left" : "_matchTrue();",
    "right" : "_matchTrue();",
    "info" : "ExpressionStatement[25158-25171]:ExpressionStatement[25158-25171]"
  }, {
    "left" : "t = JsonToken.VALUE_TRUE;",
    "right" : "t = JsonToken.VALUE_TRUE;",
    "info" : "ExpressionStatement[25184-25209]:ExpressionStatement[25184-25209]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[25222-25228]:BreakStatement[25222-25228]"
  }, {
    "left" : "case 'f':",
    "right" : "case 'f':",
    "info" : "SwitchCase[25237-25246]:SwitchCase[25237-25246]"
  }, {
    "left" : "_matchFalse();",
    "right" : "_matchFalse();",
    "info" : "ExpressionStatement[25259-25273]:ExpressionStatement[25259-25273]"
  }, {
    "left" : "t = JsonToken.VALUE_FALSE;",
    "right" : "t = JsonToken.VALUE_FALSE;",
    "info" : "ExpressionStatement[25286-25312]:ExpressionStatement[25286-25312]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[25325-25331]:BreakStatement[25325-25331]"
  }, {
    "left" : "case 'n':",
    "right" : "case 'n':",
    "info" : "SwitchCase[25340-25349]:SwitchCase[25340-25349]"
  }, {
    "left" : "_matchNull();",
    "right" : "_matchNull();",
    "info" : "ExpressionStatement[25362-25375]:ExpressionStatement[25362-25375]"
  }, {
    "left" : "t = JsonToken.VALUE_NULL;",
    "right" : "t = JsonToken.VALUE_NULL;",
    "info" : "ExpressionStatement[25388-25413]:ExpressionStatement[25388-25413]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[25426-25432]:BreakStatement[25426-25432]"
  }, {
    "left" : "case '-':",
    "right" : "case '-':",
    "info" : "SwitchCase[25442-25451]:SwitchCase[25442-25451]"
  }, {
    "left" : "t = _parseNegNumber();",
    "right" : "t = _parseNegNumber();",
    "info" : "ExpressionStatement[25687-25709]:ExpressionStatement[25687-25709]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[25722-25728]:BreakStatement[25722-25728]"
  }, {
    "left" : "case '0':",
    "right" : "case '0':",
    "info" : "SwitchCase[25737-25746]:SwitchCase[25737-25746]"
  }, {
    "left" : "case '1':",
    "right" : "case '1':",
    "info" : "SwitchCase[25755-25764]:SwitchCase[25755-25764]"
  }, {
    "left" : "case '2':",
    "right" : "case '2':",
    "info" : "SwitchCase[25773-25782]:SwitchCase[25773-25782]"
  }, {
    "left" : "case '3':",
    "right" : "case '3':",
    "info" : "SwitchCase[25791-25800]:SwitchCase[25791-25800]"
  }, {
    "left" : "case '4':",
    "right" : "case '4':",
    "info" : "SwitchCase[25809-25818]:SwitchCase[25809-25818]"
  }, {
    "left" : "case '5':",
    "right" : "case '5':",
    "info" : "SwitchCase[25827-25836]:SwitchCase[25827-25836]"
  }, {
    "left" : "case '6':",
    "right" : "case '6':",
    "info" : "SwitchCase[25845-25854]:SwitchCase[25845-25854]"
  }, {
    "left" : "case '7':",
    "right" : "case '7':",
    "info" : "SwitchCase[25863-25872]:SwitchCase[25863-25872]"
  }, {
    "left" : "case '8':",
    "right" : "case '8':",
    "info" : "SwitchCase[25881-25890]:SwitchCase[25881-25890]"
  }, {
    "left" : "case '9':",
    "right" : "case '9':",
    "info" : "SwitchCase[25899-25908]:SwitchCase[25899-25908]"
  }, {
    "left" : "t = _parsePosNumber(i);",
    "right" : "t = _parsePosNumber(i);",
    "info" : "ExpressionStatement[25921-25944]:ExpressionStatement[25921-25944]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[25957-25963]:BreakStatement[25957-25963]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[25972-25980]:SwitchCase[25972-25980]"
  }, {
    "left" : "t = _handleOddValue(i);",
    "right" : "t = _handleOddValue(i);",
    "info" : "ExpressionStatement[25993-26016]:ExpressionStatement[25993-26016]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[26029-26035]:BreakStatement[26029-26035]"
  }, {
    "left" : "if (inObject)",
    "right" : "if (inObject)",
    "info" : "IfStatement[26055-26139]:IfStatement[26055-26139]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26069-26139]:Block[26069-26139]"
  }, {
    "left" : "_nextToken = t;",
    "right" : "_nextToken = t;",
    "info" : "ExpressionStatement[26083-26098]:ExpressionStatement[26083-26098]"
  }, {
    "left" : "return _currToken;",
    "right" : "return _currToken;",
    "info" : "ReturnStatement[26111-26129]:ReturnStatement[26111-26129]"
  }, {
    "left" : "_currToken = t;",
    "right" : "_currToken = t;",
    "info" : "ExpressionStatement[26148-26163]:ExpressionStatement[26148-26163]"
  }, {
    "left" : "return t;",
    "right" : "return t;",
    "info" : "ReturnStatement[26172-26181]:ReturnStatement[26172-26181]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[26193-26200]:Modifier[26193-26200]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[26201-26206]:Modifier[26201-26206]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[26207-26216]:SimpleType[26207-26216]"
  }, {
    "left" : "_nextAfterName",
    "right" : "_nextAfterName",
    "info" : "SimpleName[26217-26231]:SimpleName[26217-26231]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26238-26860]:Block[26238-26860]"
  }, {
    "left" : "_nameCopied = false;",
    "right" : "_nameCopied = false;",
    "info" : "ExpressionStatement[26248-26268]:ExpressionStatement[26248-26268]"
  }, {
    "left" : "JsonToken t = _nextToken;",
    "right" : "JsonToken t = _nextToken;",
    "info" : "VariableDeclarationStatement[26316-26341]:VariableDeclarationStatement[26316-26341]"
  }, {
    "left" : "_nextToken = null;",
    "right" : "_nextToken = null;",
    "info" : "ExpressionStatement[26350-26368]:ExpressionStatement[26350-26368]"
  }, {
    "left" : "if (t == JsonToken.START_ARRAY)",
    "right" : "if (t == JsonToken.START_ARRAY)",
    "info" : "IfStatement[26521-26821]:IfStatement[26521-26821]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26553-26667]:Block[26553-26667]"
  }, {
    "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
    "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
    "info" : "ExpressionStatement[26567-26657]:ExpressionStatement[26567-26657]"
  }, {
    "left" : "if (t == JsonToken.START_OBJECT)",
    "right" : "if (t == JsonToken.START_OBJECT)",
    "info" : "IfStatement[26673-26821]:IfStatement[26673-26821]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26706-26821]:Block[26706-26821]"
  }, {
    "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
    "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
    "info" : "ExpressionStatement[26720-26811]:ExpressionStatement[26720-26811]"
  }, {
    "left" : "return (_currToken = t);",
    "right" : "return (_currToken = t);",
    "info" : "ReturnStatement[26830-26854]:ReturnStatement[26830-26854]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[26866-26875]:MarkerAnnotation[26866-26875]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[26880-26886]:Modifier[26880-26886]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[26887-26891]:PrimitiveType[26887-26891]"
  }, {
    "left" : "finishToken",
    "right" : "finishToken",
    "info" : "SimpleName[26892-26903]:SimpleName[26892-26903]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[26913-26924]:SimpleType[26913-26924]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26925-27075]:Block[26925-27075]"
  }, {
    "left" : "if (_tokenIncomplete)",
    "right" : "if (_tokenIncomplete)",
    "info" : "IfStatement[26935-27069]:IfStatement[26935-27069]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26957-27069]:Block[26957-27069]"
  }, {
    "left" : "_tokenIncomplete = false;",
    "right" : "_tokenIncomplete = false;",
    "info" : "ExpressionStatement[26971-26996]:ExpressionStatement[26971-26996]"
  }, {
    "left" : "_finishString();",
    "right" : "_finishString();",
    "info" : "ExpressionStatement[27009-27025]:ExpressionStatement[27009-27025]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[27293-27302]:MarkerAnnotation[27293-27302]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27307-27313]:Modifier[27307-27313]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[27314-27321]:PrimitiveType[27314-27321]"
  }, {
    "left" : "nextFieldName",
    "right" : "nextFieldName",
    "info" : "SimpleName[27322-27335]:SimpleName[27322-27335]"
  }, {
    "left" : "SerializableString sstr",
    "right" : "SerializableString sstr",
    "info" : "SingleVariableDeclaration[27336-27359]:SingleVariableDeclaration[27336-27359]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[27368-27379]:SimpleType[27368-27379]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27384-29724]:Block[27384-29724]"
  }, {
    "left" : "_numTypesValid = NR_UNKNOWN;",
    "right" : "_numTypesValid = NR_UNKNOWN;",
    "info" : "ExpressionStatement[27464-27492]:ExpressionStatement[27464-27492]"
  }, {
    "left" : "if (_currToken == JsonToken.FIELD_NAME)",
    "right" : "if (_currToken == JsonToken.FIELD_NAME)",
    "info" : "IfStatement[27501-27608]:IfStatement[27501-27608]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27541-27608]:Block[27541-27608]"
  }, {
    "left" : "_nextAfterName();",
    "right" : "_nextAfterName();",
    "info" : "ExpressionStatement[27555-27572]:ExpressionStatement[27555-27572]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[27585-27598]:ReturnStatement[27585-27598]"
  }, {
    "left" : "if (_tokenIncomplete)",
    "right" : "if (_tokenIncomplete)",
    "info" : "IfStatement[27617-27677]:IfStatement[27617-27677]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27639-27677]:Block[27639-27677]"
  }, {
    "left" : "_skipString();",
    "right" : "_skipString();",
    "info" : "ExpressionStatement[27653-27667]:ExpressionStatement[27653-27667]"
  }, {
    "left" : "int i = _skipWSOrEnd();",
    "right" : "int i = _skipWSOrEnd();",
    "info" : "VariableDeclarationStatement[27686-27709]:VariableDeclarationStatement[27686-27709]"
  }, {
    "left" : "if (i < 0)",
    "right" : "if (i < 0)",
    "info" : "IfStatement[27718-27818]:IfStatement[27718-27818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27729-27818]:Block[27729-27818]"
  }, {
    "left" : "close();",
    "right" : "close();",
    "info" : "ExpressionStatement[27743-27751]:ExpressionStatement[27743-27751]"
  }, {
    "left" : "_currToken = null;",
    "right" : "_currToken = null;",
    "info" : "ExpressionStatement[27764-27782]:ExpressionStatement[27764-27782]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[27795-27808]:ReturnStatement[27795-27808]"
  }, {
    "left" : "_binaryValue = null;",
    "right" : "_binaryValue = null;",
    "info" : "ExpressionStatement[27827-27847]:ExpressionStatement[27827-27847]"
  }, {
    "left" : "if (i == INT_RBRACKET || i == INT_RCURLY)",
    "right" : "if (i == INT_RBRACKET || i == INT_RCURLY)",
    "info" : "IfStatement[27883-27990]:IfStatement[27883-27990]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27925-27990]:Block[27925-27990]"
  }, {
    "left" : "_closeScope(i);",
    "right" : "_closeScope(i);",
    "info" : "ExpressionStatement[27939-27954]:ExpressionStatement[27939-27954]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[27967-27980]:ReturnStatement[27967-27980]"
  }, {
    "left" : "if (_parsingContext.expectComma())",
    "right" : "if (_parsingContext.expectComma())",
    "info" : "IfStatement[28000-28349]:IfStatement[28000-28349]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28035-28349]:Block[28035-28349]"
  }, {
    "left" : "i = _skipComma(i);",
    "right" : "i = _skipComma(i);",
    "info" : "ExpressionStatement[28049-28067]:ExpressionStatement[28049-28067]"
  }, {
    "left" : "if ((_features & FEAT_MASK_TRAILING_COMMA) != 0)",
    "right" : "if ((_features & FEAT_MASK_TRAILING_COMMA) != 0)",
    "info" : "IfStatement[28123-28339]:IfStatement[28123-28339]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28172-28339]:Block[28172-28339]"
  }, {
    "left" : "if ((i == INT_RBRACKET) || (i == INT_RCURLY))",
    "right" : "if ((i == INT_RBRACKET) || (i == INT_RCURLY))",
    "info" : "IfStatement[28190-28325]:IfStatement[28190-28325]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28236-28325]:Block[28236-28325]"
  }, {
    "left" : "_closeScope(i);",
    "right" : "_closeScope(i);",
    "info" : "ExpressionStatement[28258-28273]:ExpressionStatement[28258-28273]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[28294-28307]:ReturnStatement[28294-28307]"
  }, {
    "left" : "if (!_parsingContext.inObject())",
    "right" : "if (!_parsingContext.inObject())",
    "info" : "IfStatement[28359-28498]:IfStatement[28359-28498]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28392-28498]:Block[28392-28498]"
  }, {
    "left" : "_updateLocation();",
    "right" : "_updateLocation();",
    "info" : "ExpressionStatement[28406-28424]:ExpressionStatement[28406-28424]"
  }, {
    "left" : "_nextTokenNotInObject(i);",
    "right" : "_nextTokenNotInObject(i);",
    "info" : "ExpressionStatement[28437-28462]:ExpressionStatement[28437-28462]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[28475-28488]:ReturnStatement[28475-28488]"
  }, {
    "left" : "_updateNameLocation();",
    "right" : "_updateNameLocation();",
    "info" : "ExpressionStatement[28508-28530]:ExpressionStatement[28508-28530]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[28539-29660]:IfStatement[28539-29660]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28559-29660]:Block[28559-29660]"
  }, {
    "left" : "char[] nameChars = sstr.asQuotedChars();",
    "right" : "char[] nameChars = sstr.asQuotedChars();",
    "info" : "VariableDeclarationStatement[28638-28678]:VariableDeclarationStatement[28638-28678]"
  }, {
    "left" : "final int len = nameChars.length;",
    "right" : "final int len = nameChars.length;",
    "info" : "VariableDeclarationStatement[28691-28724]:VariableDeclarationStatement[28691-28724]"
  }, {
    "left" : "if ((_inputPtr + len + 4) < _inputEnd)",
    "right" : "if ((_inputPtr + len + 4) < _inputEnd)",
    "info" : "IfStatement[28821-29650]:IfStatement[28821-29650]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28860-29650]:Block[28860-29650]"
  }, {
    "left" : "final int end = _inputPtr+len;",
    "right" : "final int end = _inputPtr+len;",
    "info" : "VariableDeclarationStatement[28937-28967]:VariableDeclarationStatement[28937-28967]"
  }, {
    "left" : "if (_inputBuffer[end] == '\"')",
    "right" : "if (_inputBuffer[end] == '\"')",
    "info" : "IfStatement[28984-29636]:IfStatement[28984-29636]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29014-29636]:Block[29014-29636]"
  }, {
    "left" : "int offset = 0;",
    "right" : "int offset = 0;",
    "info" : "VariableDeclarationStatement[29036-29051]:VariableDeclarationStatement[29036-29051]"
  }, {
    "left" : "int ptr = _inputPtr;",
    "right" : "int ptr = _inputPtr;",
    "info" : "VariableDeclarationStatement[29072-29092]:VariableDeclarationStatement[29072-29092]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[29113-29618]:WhileStatement[29113-29618]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29126-29618]:Block[29126-29618]"
  }, {
    "left" : "if (ptr == end)",
    "right" : "if (ptr == end)",
    "info" : "IfStatement[29152-29400]:IfStatement[29152-29400]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29168-29400]:Block[29168-29400]"
  }, {
    "left" : "_parsingContext.setCurrentName(sstr.getValue());",
    "right" : "_parsingContext.setCurrentName(sstr.getValue());",
    "info" : "ExpressionStatement[29213-29261]:ExpressionStatement[29213-29261]"
  }, {
    "left" : "_isNextTokenNameYes(_skipColonFast(ptr+1));",
    "right" : "_isNextTokenNameYes(_skipColonFast(ptr+1));",
    "info" : "ExpressionStatement[29290-29333]:ExpressionStatement[29290-29333]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[29362-29374]:ReturnStatement[29362-29374]"
  }, {
    "left" : "if (nameChars[offset] != _inputBuffer[ptr])",
    "right" : "if (nameChars[offset] != _inputBuffer[ptr])",
    "info" : "IfStatement[29425-29531]:IfStatement[29425-29531]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29469-29531]:Block[29469-29531]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[29499-29505]:BreakStatement[29499-29505]"
  }, {
    "left" : "++offset;",
    "right" : "++offset;",
    "info" : "ExpressionStatement[29556-29565]:ExpressionStatement[29556-29565]"
  }, {
    "left" : "++ptr;",
    "right" : "++ptr;",
    "info" : "ExpressionStatement[29590-29596]:ExpressionStatement[29590-29596]"
  }, {
    "left" : "return _isNextTokenNameMaybe(i, sstr.getValue());",
    "right" : "return _isNextTokenNameMaybe(i, sstr.getValue());",
    "info" : "ReturnStatement[29669-29718]:ReturnStatement[29669-29718]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[29730-29739]:MarkerAnnotation[29730-29739]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[29744-29750]:Modifier[29744-29750]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[29751-29757]:SimpleType[29751-29757]"
  }, {
    "left" : "nextFieldName",
    "right" : "nextFieldName",
    "info" : "SimpleName[29758-29771]:SimpleName[29758-29771]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[29781-29792]:SimpleType[29781-29792]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29797-32254]:Block[29797-32254]"
  }, {
    "left" : "_numTypesValid = NR_UNKNOWN;",
    "right" : "_numTypesValid = NR_UNKNOWN;",
    "info" : "ExpressionStatement[29894-29922]:ExpressionStatement[29894-29922]"
  }, {
    "left" : "if (_currToken == JsonToken.FIELD_NAME)",
    "right" : "if (_currToken == JsonToken.FIELD_NAME)",
    "info" : "IfStatement[29931-30037]:IfStatement[29931-30037]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29971-30037]:Block[29971-30037]"
  }, {
    "left" : "_nextAfterName();",
    "right" : "_nextAfterName();",
    "info" : "ExpressionStatement[29985-30002]:ExpressionStatement[29985-30002]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[30015-30027]:ReturnStatement[30015-30027]"
  }, {
    "left" : "if (_tokenIncomplete)",
    "right" : "if (_tokenIncomplete)",
    "info" : "IfStatement[30046-30106]:IfStatement[30046-30106]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30068-30106]:Block[30068-30106]"
  }, {
    "left" : "_skipString();",
    "right" : "_skipString();",
    "info" : "ExpressionStatement[30082-30096]:ExpressionStatement[30082-30096]"
  }, {
    "left" : "int i = _skipWSOrEnd();",
    "right" : "int i = _skipWSOrEnd();",
    "info" : "VariableDeclarationStatement[30115-30138]:VariableDeclarationStatement[30115-30138]"
  }, {
    "left" : "if (i < 0)",
    "right" : "if (i < 0)",
    "info" : "IfStatement[30147-30246]:IfStatement[30147-30246]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30158-30246]:Block[30158-30246]"
  }, {
    "left" : "close();",
    "right" : "close();",
    "info" : "ExpressionStatement[30172-30180]:ExpressionStatement[30172-30180]"
  }, {
    "left" : "_currToken = null;",
    "right" : "_currToken = null;",
    "info" : "ExpressionStatement[30193-30211]:ExpressionStatement[30193-30211]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[30224-30236]:ReturnStatement[30224-30236]"
  }, {
    "left" : "_binaryValue = null;",
    "right" : "_binaryValue = null;",
    "info" : "ExpressionStatement[30255-30275]:ExpressionStatement[30255-30275]"
  }, {
    "left" : "if (i == INT_RBRACKET || i == INT_RCURLY)",
    "right" : "if (i == INT_RBRACKET || i == INT_RCURLY)",
    "info" : "IfStatement[30284-30390]:IfStatement[30284-30390]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30326-30390]:Block[30326-30390]"
  }, {
    "left" : "_closeScope(i);",
    "right" : "_closeScope(i);",
    "info" : "ExpressionStatement[30340-30355]:ExpressionStatement[30340-30355]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[30368-30380]:ReturnStatement[30368-30380]"
  }, {
    "left" : "if (_parsingContext.expectComma())",
    "right" : "if (_parsingContext.expectComma())",
    "info" : "IfStatement[30399-30704]:IfStatement[30399-30704]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30434-30704]:Block[30434-30704]"
  }, {
    "left" : "i = _skipComma(i);",
    "right" : "i = _skipComma(i);",
    "info" : "ExpressionStatement[30448-30466]:ExpressionStatement[30448-30466]"
  }, {
    "left" : "if ((_features & FEAT_MASK_TRAILING_COMMA) != 0)",
    "right" : "if ((_features & FEAT_MASK_TRAILING_COMMA) != 0)",
    "info" : "IfStatement[30479-30694]:IfStatement[30479-30694]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30528-30694]:Block[30528-30694]"
  }, {
    "left" : "if ((i == INT_RBRACKET) || (i == INT_RCURLY))",
    "right" : "if ((i == INT_RBRACKET) || (i == INT_RCURLY))",
    "info" : "IfStatement[30546-30680]:IfStatement[30546-30680]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30592-30680]:Block[30592-30680]"
  }, {
    "left" : "_closeScope(i);",
    "right" : "_closeScope(i);",
    "info" : "ExpressionStatement[30614-30629]:ExpressionStatement[30614-30629]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[30650-30662]:ReturnStatement[30650-30662]"
  }, {
    "left" : "if (!_parsingContext.inObject())",
    "right" : "if (!_parsingContext.inObject())",
    "info" : "IfStatement[30713-30851]:IfStatement[30713-30851]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30746-30851]:Block[30746-30851]"
  }, {
    "left" : "_updateLocation();",
    "right" : "_updateLocation();",
    "info" : "ExpressionStatement[30760-30778]:ExpressionStatement[30760-30778]"
  }, {
    "left" : "_nextTokenNotInObject(i);",
    "right" : "_nextTokenNotInObject(i);",
    "info" : "ExpressionStatement[30791-30816]:ExpressionStatement[30791-30816]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[30829-30841]:ReturnStatement[30829-30841]"
  }, {
    "left" : "_updateNameLocation();",
    "right" : "_updateNameLocation();",
    "info" : "ExpressionStatement[30861-30883]:ExpressionStatement[30861-30883]"
  }, {
    "left" : "String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);",
    "right" : "String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);",
    "info" : "VariableDeclarationStatement[30892-30958]:VariableDeclarationStatement[30892-30958]"
  }, {
    "left" : "_parsingContext.setCurrentName(name);",
    "right" : "_parsingContext.setCurrentName(name);",
    "info" : "ExpressionStatement[30967-31004]:ExpressionStatement[30967-31004]"
  }, {
    "left" : "_currToken = JsonToken.FIELD_NAME;",
    "right" : "_currToken = JsonToken.FIELD_NAME;",
    "info" : "ExpressionStatement[31013-31047]:ExpressionStatement[31013-31047]"
  }, {
    "left" : "i = _skipColon();",
    "right" : "i = _skipColon();",
    "info" : "ExpressionStatement[31056-31073]:ExpressionStatement[31056-31073]"
  }, {
    "left" : "_updateLocation();",
    "right" : "_updateLocation();",
    "info" : "ExpressionStatement[31083-31101]:ExpressionStatement[31083-31101]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[31110-31252]:IfStatement[31110-31252]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31130-31252]:Block[31130-31252]"
  }, {
    "left" : "_tokenIncomplete = true;",
    "right" : "_tokenIncomplete = true;",
    "info" : "ExpressionStatement[31144-31168]:ExpressionStatement[31144-31168]"
  }, {
    "left" : "_nextToken = JsonToken.VALUE_STRING;",
    "right" : "_nextToken = JsonToken.VALUE_STRING;",
    "info" : "ExpressionStatement[31181-31217]:ExpressionStatement[31181-31217]"
  }, {
    "left" : "return name;",
    "right" : "return name;",
    "info" : "ReturnStatement[31230-31242]:ReturnStatement[31230-31242]"
  }, {
    "left" : "JsonToken t;",
    "right" : "JsonToken t;",
    "info" : "VariableDeclarationStatement[31322-31334]:VariableDeclarationStatement[31322-31334]"
  }, {
    "left" : "switch (i) {\n        case '-':\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        case 'f':\n            _matchFalse();\n            t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchNull();\n            t = JsonToken.VALUE_NULL;\n            break;\n        case 't':\n            _matchTrue();\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n        default:\n            t = _handleOddValue(i);\n            break;\n        }",
    "right" : "switch (i) {\n        case '-':\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        case 'f':\n            _matchFalse();\n            t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchNull();\n            t = JsonToken.VALUE_NULL;\n            break;\n        case 't':\n            _matchTrue();\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n        default:\n            t = _handleOddValue(i);\n            break;\n        }",
    "info" : "SwitchStatement[31344-32203]:SwitchStatement[31344-32203]"
  }, {
    "left" : "case '-':",
    "right" : "case '-':",
    "info" : "SwitchCase[31365-31374]:SwitchCase[31365-31374]"
  }, {
    "left" : "t = _parseNegNumber();",
    "right" : "t = _parseNegNumber();",
    "info" : "ExpressionStatement[31387-31409]:ExpressionStatement[31387-31409]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[31422-31428]:BreakStatement[31422-31428]"
  }, {
    "left" : "case '0':",
    "right" : "case '0':",
    "info" : "SwitchCase[31437-31446]:SwitchCase[31437-31446]"
  }, {
    "left" : "case '1':",
    "right" : "case '1':",
    "info" : "SwitchCase[31455-31464]:SwitchCase[31455-31464]"
  }, {
    "left" : "case '2':",
    "right" : "case '2':",
    "info" : "SwitchCase[31473-31482]:SwitchCase[31473-31482]"
  }, {
    "left" : "case '3':",
    "right" : "case '3':",
    "info" : "SwitchCase[31491-31500]:SwitchCase[31491-31500]"
  }, {
    "left" : "case '4':",
    "right" : "case '4':",
    "info" : "SwitchCase[31509-31518]:SwitchCase[31509-31518]"
  }, {
    "left" : "case '5':",
    "right" : "case '5':",
    "info" : "SwitchCase[31527-31536]:SwitchCase[31527-31536]"
  }, {
    "left" : "case '6':",
    "right" : "case '6':",
    "info" : "SwitchCase[31545-31554]:SwitchCase[31545-31554]"
  }, {
    "left" : "case '7':",
    "right" : "case '7':",
    "info" : "SwitchCase[31563-31572]:SwitchCase[31563-31572]"
  }, {
    "left" : "case '8':",
    "right" : "case '8':",
    "info" : "SwitchCase[31581-31590]:SwitchCase[31581-31590]"
  }, {
    "left" : "case '9':",
    "right" : "case '9':",
    "info" : "SwitchCase[31599-31608]:SwitchCase[31599-31608]"
  }, {
    "left" : "t = _parsePosNumber(i);",
    "right" : "t = _parsePosNumber(i);",
    "info" : "ExpressionStatement[31621-31644]:ExpressionStatement[31621-31644]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[31657-31663]:BreakStatement[31657-31663]"
  }, {
    "left" : "case 'f':",
    "right" : "case 'f':",
    "info" : "SwitchCase[31672-31681]:SwitchCase[31672-31681]"
  }, {
    "left" : "_matchFalse();",
    "right" : "_matchFalse();",
    "info" : "ExpressionStatement[31694-31708]:ExpressionStatement[31694-31708]"
  }, {
    "left" : "t = JsonToken.VALUE_FALSE;",
    "right" : "t = JsonToken.VALUE_FALSE;",
    "info" : "ExpressionStatement[31721-31747]:ExpressionStatement[31721-31747]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[31760-31766]:BreakStatement[31760-31766]"
  }, {
    "left" : "case 'n':",
    "right" : "case 'n':",
    "info" : "SwitchCase[31775-31784]:SwitchCase[31775-31784]"
  }, {
    "left" : "_matchNull();",
    "right" : "_matchNull();",
    "info" : "ExpressionStatement[31797-31810]:ExpressionStatement[31797-31810]"
  }, {
    "left" : "t = JsonToken.VALUE_NULL;",
    "right" : "t = JsonToken.VALUE_NULL;",
    "info" : "ExpressionStatement[31823-31848]:ExpressionStatement[31823-31848]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[31861-31867]:BreakStatement[31861-31867]"
  }, {
    "left" : "case 't':",
    "right" : "case 't':",
    "info" : "SwitchCase[31876-31885]:SwitchCase[31876-31885]"
  }, {
    "left" : "_matchTrue();",
    "right" : "_matchTrue();",
    "info" : "ExpressionStatement[31898-31911]:ExpressionStatement[31898-31911]"
  }, {
    "left" : "t = JsonToken.VALUE_TRUE;",
    "right" : "t = JsonToken.VALUE_TRUE;",
    "info" : "ExpressionStatement[31924-31949]:ExpressionStatement[31924-31949]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[31962-31968]:BreakStatement[31962-31968]"
  }, {
    "left" : "case '[':",
    "right" : "case '[':",
    "info" : "SwitchCase[31977-31986]:SwitchCase[31977-31986]"
  }, {
    "left" : "t = JsonToken.START_ARRAY;",
    "right" : "t = JsonToken.START_ARRAY;",
    "info" : "ExpressionStatement[31999-32025]:ExpressionStatement[31999-32025]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[32038-32044]:BreakStatement[32038-32044]"
  }, {
    "left" : "case '{':",
    "right" : "case '{':",
    "info" : "SwitchCase[32053-32062]:SwitchCase[32053-32062]"
  }, {
    "left" : "t = JsonToken.START_OBJECT;",
    "right" : "t = JsonToken.START_OBJECT;",
    "info" : "ExpressionStatement[32075-32102]:ExpressionStatement[32075-32102]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[32115-32121]:BreakStatement[32115-32121]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[32130-32138]:SwitchCase[32130-32138]"
  }, {
    "left" : "t = _handleOddValue(i);",
    "right" : "t = _handleOddValue(i);",
    "info" : "ExpressionStatement[32151-32174]:ExpressionStatement[32151-32174]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[32187-32193]:BreakStatement[32187-32193]"
  }, {
    "left" : "_nextToken = t;",
    "right" : "_nextToken = t;",
    "info" : "ExpressionStatement[32212-32227]:ExpressionStatement[32212-32227]"
  }, {
    "left" : "return name;",
    "right" : "return name;",
    "info" : "ReturnStatement[32236-32248]:ReturnStatement[32236-32248]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[32260-32267]:Modifier[32260-32267]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[32268-32273]:Modifier[32268-32273]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[32274-32278]:PrimitiveType[32274-32278]"
  }, {
    "left" : "_isNextTokenNameYes",
    "right" : "_isNextTokenNameYes",
    "info" : "SimpleName[32279-32298]:SimpleName[32279-32298]"
  }, {
    "left" : "int i",
    "right" : "int i",
    "info" : "SingleVariableDeclaration[32299-32304]:SingleVariableDeclaration[32299-32304]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[32313-32324]:SimpleType[32313-32324]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32329-33468]:Block[32329-33468]"
  }, {
    "left" : "_currToken = JsonToken.FIELD_NAME;",
    "right" : "_currToken = JsonToken.FIELD_NAME;",
    "info" : "ExpressionStatement[32339-32373]:ExpressionStatement[32339-32373]"
  }, {
    "left" : "_updateLocation();",
    "right" : "_updateLocation();",
    "info" : "ExpressionStatement[32382-32400]:ExpressionStatement[32382-32400]"
  }, {
    "left" : "switch (i) {\n        case '\"':\n            _tokenIncomplete = true;\n            _nextToken = JsonToken.VALUE_STRING;\n            return;\n        case '[':\n            _nextToken = JsonToken.START_ARRAY;\n            return;\n        case '{':\n            _nextToken = JsonToken.START_OBJECT;\n            return;\n        case 't':\n            _matchToken(\"true\", 1);\n            _nextToken = JsonToken.VALUE_TRUE;\n            return;\n        case 'f':\n            _matchToken(\"false\", 1);\n            _nextToken = JsonToken.VALUE_FALSE;\n            return;\n        case 'n':\n            _matchToken(\"null\", 1);\n            _nextToken = JsonToken.VALUE_NULL;\n            return;\n        case '-':\n            _nextToken = _parseNegNumber();\n            return;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            _nextToken = _parsePosNumber(i);\n            return;\n        }",
    "right" : "switch (i) {\n        case '\"':\n            _tokenIncomplete = true;\n            _nextToken = JsonToken.VALUE_STRING;\n            return;\n        case '[':\n            _nextToken = JsonToken.START_ARRAY;\n            return;\n        case '{':\n            _nextToken = JsonToken.START_OBJECT;\n            return;\n        case 't':\n            _matchToken(\"true\", 1);\n            _nextToken = JsonToken.VALUE_TRUE;\n            return;\n        case 'f':\n            _matchToken(\"false\", 1);\n            _nextToken = JsonToken.VALUE_FALSE;\n            return;\n        case 'n':\n            _matchToken(\"null\", 1);\n            _nextToken = JsonToken.VALUE_NULL;\n            return;\n        case '-':\n            _nextToken = _parseNegNumber();\n            return;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            _nextToken = _parsePosNumber(i);\n            return;\n        }",
    "info" : "SwitchStatement[32410-33421]:SwitchStatement[32410-33421]"
  }, {
    "left" : "case '\"':",
    "right" : "case '\"':",
    "info" : "SwitchCase[32431-32440]:SwitchCase[32431-32440]"
  }, {
    "left" : "_tokenIncomplete = true;",
    "right" : "_tokenIncomplete = true;",
    "info" : "ExpressionStatement[32453-32477]:ExpressionStatement[32453-32477]"
  }, {
    "left" : "_nextToken = JsonToken.VALUE_STRING;",
    "right" : "_nextToken = JsonToken.VALUE_STRING;",
    "info" : "ExpressionStatement[32490-32526]:ExpressionStatement[32490-32526]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[32539-32546]:ReturnStatement[32539-32546]"
  }, {
    "left" : "case '[':",
    "right" : "case '[':",
    "info" : "SwitchCase[32555-32564]:SwitchCase[32555-32564]"
  }, {
    "left" : "_nextToken = JsonToken.START_ARRAY;",
    "right" : "_nextToken = JsonToken.START_ARRAY;",
    "info" : "ExpressionStatement[32577-32612]:ExpressionStatement[32577-32612]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[32625-32632]:ReturnStatement[32625-32632]"
  }, {
    "left" : "case '{':",
    "right" : "case '{':",
    "info" : "SwitchCase[32641-32650]:SwitchCase[32641-32650]"
  }, {
    "left" : "_nextToken = JsonToken.START_OBJECT;",
    "right" : "_nextToken = JsonToken.START_OBJECT;",
    "info" : "ExpressionStatement[32663-32699]:ExpressionStatement[32663-32699]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[32712-32719]:ReturnStatement[32712-32719]"
  }, {
    "left" : "case 't':",
    "right" : "case 't':",
    "info" : "SwitchCase[32728-32737]:SwitchCase[32728-32737]"
  }, {
    "left" : "_matchToken(\"true\", 1);",
    "right" : "_matchToken(\"true\", 1);",
    "info" : "ExpressionStatement[32750-32773]:ExpressionStatement[32750-32773]"
  }, {
    "left" : "_nextToken = JsonToken.VALUE_TRUE;",
    "right" : "_nextToken = JsonToken.VALUE_TRUE;",
    "info" : "ExpressionStatement[32786-32820]:ExpressionStatement[32786-32820]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[32833-32840]:ReturnStatement[32833-32840]"
  }, {
    "left" : "case 'f':",
    "right" : "case 'f':",
    "info" : "SwitchCase[32849-32858]:SwitchCase[32849-32858]"
  }, {
    "left" : "_matchToken(\"false\", 1);",
    "right" : "_matchToken(\"false\", 1);",
    "info" : "ExpressionStatement[32871-32895]:ExpressionStatement[32871-32895]"
  }, {
    "left" : "_nextToken = JsonToken.VALUE_FALSE;",
    "right" : "_nextToken = JsonToken.VALUE_FALSE;",
    "info" : "ExpressionStatement[32908-32943]:ExpressionStatement[32908-32943]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[32956-32963]:ReturnStatement[32956-32963]"
  }, {
    "left" : "case 'n':",
    "right" : "case 'n':",
    "info" : "SwitchCase[32972-32981]:SwitchCase[32972-32981]"
  }, {
    "left" : "_matchToken(\"null\", 1);",
    "right" : "_matchToken(\"null\", 1);",
    "info" : "ExpressionStatement[32994-33017]:ExpressionStatement[32994-33017]"
  }, {
    "left" : "_nextToken = JsonToken.VALUE_NULL;",
    "right" : "_nextToken = JsonToken.VALUE_NULL;",
    "info" : "ExpressionStatement[33030-33064]:ExpressionStatement[33030-33064]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[33077-33084]:ReturnStatement[33077-33084]"
  }, {
    "left" : "case '-':",
    "right" : "case '-':",
    "info" : "SwitchCase[33093-33102]:SwitchCase[33093-33102]"
  }, {
    "left" : "_nextToken = _parseNegNumber();",
    "right" : "_nextToken = _parseNegNumber();",
    "info" : "ExpressionStatement[33115-33146]:ExpressionStatement[33115-33146]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[33159-33166]:ReturnStatement[33159-33166]"
  }, {
    "left" : "case '0':",
    "right" : "case '0':",
    "info" : "SwitchCase[33175-33184]:SwitchCase[33175-33184]"
  }, {
    "left" : "case '1':",
    "right" : "case '1':",
    "info" : "SwitchCase[33193-33202]:SwitchCase[33193-33202]"
  }, {
    "left" : "case '2':",
    "right" : "case '2':",
    "info" : "SwitchCase[33211-33220]:SwitchCase[33211-33220]"
  }, {
    "left" : "case '3':",
    "right" : "case '3':",
    "info" : "SwitchCase[33229-33238]:SwitchCase[33229-33238]"
  }, {
    "left" : "case '4':",
    "right" : "case '4':",
    "info" : "SwitchCase[33247-33256]:SwitchCase[33247-33256]"
  }, {
    "left" : "case '5':",
    "right" : "case '5':",
    "info" : "SwitchCase[33265-33274]:SwitchCase[33265-33274]"
  }, {
    "left" : "case '6':",
    "right" : "case '6':",
    "info" : "SwitchCase[33283-33292]:SwitchCase[33283-33292]"
  }, {
    "left" : "case '7':",
    "right" : "case '7':",
    "info" : "SwitchCase[33301-33310]:SwitchCase[33301-33310]"
  }, {
    "left" : "case '8':",
    "right" : "case '8':",
    "info" : "SwitchCase[33319-33328]:SwitchCase[33319-33328]"
  }, {
    "left" : "case '9':",
    "right" : "case '9':",
    "info" : "SwitchCase[33337-33346]:SwitchCase[33337-33346]"
  }, {
    "left" : "_nextToken = _parsePosNumber(i);",
    "right" : "_nextToken = _parsePosNumber(i);",
    "info" : "ExpressionStatement[33359-33391]:ExpressionStatement[33359-33391]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[33404-33411]:ReturnStatement[33404-33411]"
  }, {
    "left" : "_nextToken = _handleOddValue(i);",
    "right" : "_nextToken = _handleOddValue(i);",
    "info" : "ExpressionStatement[33430-33462]:ExpressionStatement[33430-33462]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[33474-33483]:Modifier[33474-33483]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[33484-33491]:PrimitiveType[33484-33491]"
  }, {
    "left" : "_isNextTokenNameMaybe",
    "right" : "_isNextTokenNameMaybe",
    "info" : "SimpleName[33492-33513]:SimpleName[33492-33513]"
  }, {
    "left" : "int i",
    "right" : "int i",
    "info" : "SingleVariableDeclaration[33514-33519]:SingleVariableDeclaration[33514-33519]"
  }, {
    "left" : "String nameToMatch",
    "right" : "String nameToMatch",
    "info" : "SingleVariableDeclaration[33521-33539]:SingleVariableDeclaration[33521-33539]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[33548-33559]:SimpleType[33548-33559]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33564-35022]:Block[33564-35022]"
  }, {
    "left" : "String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);",
    "right" : "String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);",
    "info" : "VariableDeclarationStatement[33632-33698]:VariableDeclarationStatement[33632-33698]"
  }, {
    "left" : "_parsingContext.setCurrentName(name);",
    "right" : "_parsingContext.setCurrentName(name);",
    "info" : "ExpressionStatement[33707-33744]:ExpressionStatement[33707-33744]"
  }, {
    "left" : "_currToken = JsonToken.FIELD_NAME;",
    "right" : "_currToken = JsonToken.FIELD_NAME;",
    "info" : "ExpressionStatement[33753-33787]:ExpressionStatement[33753-33787]"
  }, {
    "left" : "i = _skipColon();",
    "right" : "i = _skipColon();",
    "info" : "ExpressionStatement[33796-33813]:ExpressionStatement[33796-33813]"
  }, {
    "left" : "_updateLocation();",
    "right" : "_updateLocation();",
    "info" : "ExpressionStatement[33822-33840]:ExpressionStatement[33822-33840]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[33849-34011]:IfStatement[33849-34011]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33869-34011]:Block[33869-34011]"
  }, {
    "left" : "_tokenIncomplete = true;",
    "right" : "_tokenIncomplete = true;",
    "info" : "ExpressionStatement[33883-33907]:ExpressionStatement[33883-33907]"
  }, {
    "left" : "_nextToken = JsonToken.VALUE_STRING;",
    "right" : "_nextToken = JsonToken.VALUE_STRING;",
    "info" : "ExpressionStatement[33920-33956]:ExpressionStatement[33920-33956]"
  }, {
    "left" : "return nameToMatch.equals(name);",
    "right" : "return nameToMatch.equals(name);",
    "info" : "ReturnStatement[33969-34001]:ReturnStatement[33969-34001]"
  }, {
    "left" : "JsonToken t;",
    "right" : "JsonToken t;",
    "info" : "VariableDeclarationStatement[34071-34083]:VariableDeclarationStatement[34071-34083]"
  }, {
    "left" : "switch (i) {\n        case '-':\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        case 'f':\n            _matchFalse();\n            t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchNull();\n            t = JsonToken.VALUE_NULL;\n            break;\n        case 't':\n            _matchTrue();\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n        default:\n            t = _handleOddValue(i);\n            break;\n        }",
    "right" : "switch (i) {\n        case '-':\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        case 'f':\n            _matchFalse();\n            t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchNull();\n            t = JsonToken.VALUE_NULL;\n            break;\n        case 't':\n            _matchTrue();\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n        default:\n            t = _handleOddValue(i);\n            break;\n        }",
    "info" : "SwitchStatement[34092-34951]:SwitchStatement[34092-34951]"
  }, {
    "left" : "case '-':",
    "right" : "case '-':",
    "info" : "SwitchCase[34113-34122]:SwitchCase[34113-34122]"
  }, {
    "left" : "t = _parseNegNumber();",
    "right" : "t = _parseNegNumber();",
    "info" : "ExpressionStatement[34135-34157]:ExpressionStatement[34135-34157]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[34170-34176]:BreakStatement[34170-34176]"
  }, {
    "left" : "case '0':",
    "right" : "case '0':",
    "info" : "SwitchCase[34185-34194]:SwitchCase[34185-34194]"
  }, {
    "left" : "case '1':",
    "right" : "case '1':",
    "info" : "SwitchCase[34203-34212]:SwitchCase[34203-34212]"
  }, {
    "left" : "case '2':",
    "right" : "case '2':",
    "info" : "SwitchCase[34221-34230]:SwitchCase[34221-34230]"
  }, {
    "left" : "case '3':",
    "right" : "case '3':",
    "info" : "SwitchCase[34239-34248]:SwitchCase[34239-34248]"
  }, {
    "left" : "case '4':",
    "right" : "case '4':",
    "info" : "SwitchCase[34257-34266]:SwitchCase[34257-34266]"
  }, {
    "left" : "case '5':",
    "right" : "case '5':",
    "info" : "SwitchCase[34275-34284]:SwitchCase[34275-34284]"
  }, {
    "left" : "case '6':",
    "right" : "case '6':",
    "info" : "SwitchCase[34293-34302]:SwitchCase[34293-34302]"
  }, {
    "left" : "case '7':",
    "right" : "case '7':",
    "info" : "SwitchCase[34311-34320]:SwitchCase[34311-34320]"
  }, {
    "left" : "case '8':",
    "right" : "case '8':",
    "info" : "SwitchCase[34329-34338]:SwitchCase[34329-34338]"
  }, {
    "left" : "case '9':",
    "right" : "case '9':",
    "info" : "SwitchCase[34347-34356]:SwitchCase[34347-34356]"
  }, {
    "left" : "t = _parsePosNumber(i);",
    "right" : "t = _parsePosNumber(i);",
    "info" : "ExpressionStatement[34369-34392]:ExpressionStatement[34369-34392]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[34405-34411]:BreakStatement[34405-34411]"
  }, {
    "left" : "case 'f':",
    "right" : "case 'f':",
    "info" : "SwitchCase[34420-34429]:SwitchCase[34420-34429]"
  }, {
    "left" : "_matchFalse();",
    "right" : "_matchFalse();",
    "info" : "ExpressionStatement[34442-34456]:ExpressionStatement[34442-34456]"
  }, {
    "left" : "t = JsonToken.VALUE_FALSE;",
    "right" : "t = JsonToken.VALUE_FALSE;",
    "info" : "ExpressionStatement[34469-34495]:ExpressionStatement[34469-34495]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[34508-34514]:BreakStatement[34508-34514]"
  }, {
    "left" : "case 'n':",
    "right" : "case 'n':",
    "info" : "SwitchCase[34523-34532]:SwitchCase[34523-34532]"
  }, {
    "left" : "_matchNull();",
    "right" : "_matchNull();",
    "info" : "ExpressionStatement[34545-34558]:ExpressionStatement[34545-34558]"
  }, {
    "left" : "t = JsonToken.VALUE_NULL;",
    "right" : "t = JsonToken.VALUE_NULL;",
    "info" : "ExpressionStatement[34571-34596]:ExpressionStatement[34571-34596]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[34609-34615]:BreakStatement[34609-34615]"
  }, {
    "left" : "case 't':",
    "right" : "case 't':",
    "info" : "SwitchCase[34624-34633]:SwitchCase[34624-34633]"
  }, {
    "left" : "_matchTrue();",
    "right" : "_matchTrue();",
    "info" : "ExpressionStatement[34646-34659]:ExpressionStatement[34646-34659]"
  }, {
    "left" : "t = JsonToken.VALUE_TRUE;",
    "right" : "t = JsonToken.VALUE_TRUE;",
    "info" : "ExpressionStatement[34672-34697]:ExpressionStatement[34672-34697]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[34710-34716]:BreakStatement[34710-34716]"
  }, {
    "left" : "case '[':",
    "right" : "case '[':",
    "info" : "SwitchCase[34725-34734]:SwitchCase[34725-34734]"
  }, {
    "left" : "t = JsonToken.START_ARRAY;",
    "right" : "t = JsonToken.START_ARRAY;",
    "info" : "ExpressionStatement[34747-34773]:ExpressionStatement[34747-34773]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[34786-34792]:BreakStatement[34786-34792]"
  }, {
    "left" : "case '{':",
    "right" : "case '{':",
    "info" : "SwitchCase[34801-34810]:SwitchCase[34801-34810]"
  }, {
    "left" : "t = JsonToken.START_OBJECT;",
    "right" : "t = JsonToken.START_OBJECT;",
    "info" : "ExpressionStatement[34823-34850]:ExpressionStatement[34823-34850]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[34863-34869]:BreakStatement[34863-34869]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[34878-34886]:SwitchCase[34878-34886]"
  }, {
    "left" : "t = _handleOddValue(i);",
    "right" : "t = _handleOddValue(i);",
    "info" : "ExpressionStatement[34899-34922]:ExpressionStatement[34899-34922]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[34935-34941]:BreakStatement[34935-34941]"
  }, {
    "left" : "_nextToken = t;",
    "right" : "_nextToken = t;",
    "info" : "ExpressionStatement[34960-34975]:ExpressionStatement[34960-34975]"
  }, {
    "left" : "return nameToMatch.equals(name);",
    "right" : "return nameToMatch.equals(name);",
    "info" : "ReturnStatement[34984-35016]:ReturnStatement[34984-35016]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[35028-35035]:Modifier[35028-35035]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[35036-35041]:Modifier[35036-35041]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[35042-35051]:SimpleType[35042-35051]"
  }, {
    "left" : "_nextTokenNotInObject",
    "right" : "_nextTokenNotInObject",
    "info" : "SimpleName[35052-35073]:SimpleName[35052-35073]"
  }, {
    "left" : "int i",
    "right" : "int i",
    "info" : "SingleVariableDeclaration[35074-35079]:SingleVariableDeclaration[35074-35079]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[35088-35099]:SimpleType[35088-35099]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35104-37286]:Block[35104-37286]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[35114-35240]:IfStatement[35114-35240]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35134-35240]:Block[35134-35240]"
  }, {
    "left" : "_tokenIncomplete = true;",
    "right" : "_tokenIncomplete = true;",
    "info" : "ExpressionStatement[35148-35172]:ExpressionStatement[35148-35172]"
  }, {
    "left" : "return (_currToken = JsonToken.VALUE_STRING);",
    "right" : "return (_currToken = JsonToken.VALUE_STRING);",
    "info" : "ReturnStatement[35185-35230]:ReturnStatement[35185-35230]"
  }, {
    "left" : "switch (i) {\n        case '[':\n            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_ARRAY);\n        case '{':\n            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_OBJECT);\n        case 't':\n            _matchToken(\"true\", 1);\n            return (_currToken = JsonToken.VALUE_TRUE);\n        case 'f':\n            _matchToken(\"false\", 1);\n            return (_currToken = JsonToken.VALUE_FALSE);\n        case 'n':\n            _matchToken(\"null\", 1);\n            return (_currToken = JsonToken.VALUE_NULL);\n        case '-':\n            return (_currToken = _parseNegNumber());\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicated by a more specific error message.\n             */\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            return (_currToken = _parsePosNumber(i));\n        /*\n         * This check proceeds only if the Feature.ALLOW_MISSING_VALUES is enabled\n         * The Check is for missing values. Incase of missing values in an array, the next token will be either ',' or ']'.\n         * This case, decrements the already incremented _inputPtr in the buffer in case of comma(,) \n         * so that the existing flow goes back to checking the next token which will be comma again and\n         * it continues the parsing.\n         * Also the case returns NULL as current token in case of ',' or ']'.    \n         */\n        case ',':\n        case ']':\n        \tif(isEnabled(Feature.ALLOW_MISSING_VALUES)) {\n        \t\t_inputPtr--;\n        \t\treturn (_currToken = JsonToken.VALUE_NULL);  \n        \t}    \n        }",
    "right" : "switch (i) {\n        case '[':\n            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_ARRAY);\n        case '{':\n            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_OBJECT);\n        case 't':\n            _matchToken(\"true\", 1);\n            return (_currToken = JsonToken.VALUE_TRUE);\n        case 'f':\n            _matchToken(\"false\", 1);\n            return (_currToken = JsonToken.VALUE_FALSE);\n        case 'n':\n            _matchToken(\"null\", 1);\n            return (_currToken = JsonToken.VALUE_NULL);\n        case '-':\n            return (_currToken = _parseNegNumber());\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicated by a more specific error message.\n             */\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            return (_currToken = _parsePosNumber(i));\n        /*\n         * This check proceeds only if the Feature.ALLOW_MISSING_VALUES is enabled\n         * The Check is for missing values. Incase of missing values in an array, the next token will be either ',' or ']'.\n         * This case, decrements the already incremented _inputPtr in the buffer in case of comma(,) \n         * so that the existing flow goes back to checking the next token which will be comma again and\n         * it continues the parsing.\n         * Also the case returns NULL as current token in case of ',' or ']'.    \n         */\n        case ',':\n        case ']':\n        \tif(isEnabled(Feature.ALLOW_MISSING_VALUES)) {\n        \t\t_inputPtr--;\n        \t\treturn (_currToken = JsonToken.VALUE_NULL);  \n        \t}    \n        }",
    "info" : "SwitchStatement[35249-37230]:SwitchStatement[35249-37230]"
  }, {
    "left" : "case '[':",
    "right" : "case '[':",
    "info" : "SwitchCase[35270-35279]:SwitchCase[35270-35279]"
  }, {
    "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
    "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
    "info" : "ExpressionStatement[35292-35382]:ExpressionStatement[35292-35382]"
  }, {
    "left" : "return (_currToken = JsonToken.START_ARRAY);",
    "right" : "return (_currToken = JsonToken.START_ARRAY);",
    "info" : "ReturnStatement[35395-35439]:ReturnStatement[35395-35439]"
  }, {
    "left" : "case '{':",
    "right" : "case '{':",
    "info" : "SwitchCase[35448-35457]:SwitchCase[35448-35457]"
  }, {
    "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
    "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
    "info" : "ExpressionStatement[35470-35561]:ExpressionStatement[35470-35561]"
  }, {
    "left" : "return (_currToken = JsonToken.START_OBJECT);",
    "right" : "return (_currToken = JsonToken.START_OBJECT);",
    "info" : "ReturnStatement[35574-35619]:ReturnStatement[35574-35619]"
  }, {
    "left" : "case 't':",
    "right" : "case 't':",
    "info" : "SwitchCase[35628-35637]:SwitchCase[35628-35637]"
  }, {
    "left" : "_matchToken(\"true\", 1);",
    "right" : "_matchToken(\"true\", 1);",
    "info" : "ExpressionStatement[35650-35673]:ExpressionStatement[35650-35673]"
  }, {
    "left" : "return (_currToken = JsonToken.VALUE_TRUE);",
    "right" : "return (_currToken = JsonToken.VALUE_TRUE);",
    "info" : "ReturnStatement[35686-35729]:ReturnStatement[35686-35729]"
  }, {
    "left" : "case 'f':",
    "right" : "case 'f':",
    "info" : "SwitchCase[35738-35747]:SwitchCase[35738-35747]"
  }, {
    "left" : "_matchToken(\"false\", 1);",
    "right" : "_matchToken(\"false\", 1);",
    "info" : "ExpressionStatement[35760-35784]:ExpressionStatement[35760-35784]"
  }, {
    "left" : "return (_currToken = JsonToken.VALUE_FALSE);",
    "right" : "return (_currToken = JsonToken.VALUE_FALSE);",
    "info" : "ReturnStatement[35797-35841]:ReturnStatement[35797-35841]"
  }, {
    "left" : "case 'n':",
    "right" : "case 'n':",
    "info" : "SwitchCase[35850-35859]:SwitchCase[35850-35859]"
  }, {
    "left" : "_matchToken(\"null\", 1);",
    "right" : "_matchToken(\"null\", 1);",
    "info" : "ExpressionStatement[35872-35895]:ExpressionStatement[35872-35895]"
  }, {
    "left" : "return (_currToken = JsonToken.VALUE_NULL);",
    "right" : "return (_currToken = JsonToken.VALUE_NULL);",
    "info" : "ReturnStatement[35908-35951]:ReturnStatement[35908-35951]"
  }, {
    "left" : "case '-':",
    "right" : "case '-':",
    "info" : "SwitchCase[35960-35969]:SwitchCase[35960-35969]"
  }, {
    "left" : "return (_currToken = _parseNegNumber());",
    "right" : "return (_currToken = _parseNegNumber());",
    "info" : "ReturnStatement[35982-36022]:ReturnStatement[35982-36022]"
  }, {
    "left" : "case '0':",
    "right" : "case '0':",
    "info" : "SwitchCase[36255-36264]:SwitchCase[36255-36264]"
  }, {
    "left" : "case '1':",
    "right" : "case '1':",
    "info" : "SwitchCase[36273-36282]:SwitchCase[36273-36282]"
  }, {
    "left" : "case '2':",
    "right" : "case '2':",
    "info" : "SwitchCase[36291-36300]:SwitchCase[36291-36300]"
  }, {
    "left" : "case '3':",
    "right" : "case '3':",
    "info" : "SwitchCase[36309-36318]:SwitchCase[36309-36318]"
  }, {
    "left" : "case '4':",
    "right" : "case '4':",
    "info" : "SwitchCase[36327-36336]:SwitchCase[36327-36336]"
  }, {
    "left" : "case '5':",
    "right" : "case '5':",
    "info" : "SwitchCase[36345-36354]:SwitchCase[36345-36354]"
  }, {
    "left" : "case '6':",
    "right" : "case '6':",
    "info" : "SwitchCase[36363-36372]:SwitchCase[36363-36372]"
  }, {
    "left" : "case '7':",
    "right" : "case '7':",
    "info" : "SwitchCase[36381-36390]:SwitchCase[36381-36390]"
  }, {
    "left" : "case '8':",
    "right" : "case '8':",
    "info" : "SwitchCase[36399-36408]:SwitchCase[36399-36408]"
  }, {
    "left" : "case '9':",
    "right" : "case '9':",
    "info" : "SwitchCase[36417-36426]:SwitchCase[36417-36426]"
  }, {
    "left" : "return (_currToken = _parsePosNumber(i));",
    "right" : "return (_currToken = _parsePosNumber(i));",
    "info" : "ReturnStatement[36439-36480]:ReturnStatement[36439-36480]"
  }, {
    "left" : "case ',':",
    "right" : "case ',':",
    "info" : "SwitchCase[37044-37053]:SwitchCase[37044-37053]"
  }, {
    "left" : "case ']':",
    "right" : "case ']':",
    "info" : "SwitchCase[37062-37071]:SwitchCase[37062-37071]"
  }, {
    "left" : "if(isEnabled(Feature.ALLOW_MISSING_VALUES))",
    "right" : "if(isEnabled(Feature.ALLOW_MISSING_VALUES))",
    "info" : "IfStatement[37081-37216]:IfStatement[37081-37216]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37125-37216]:Block[37125-37216]"
  }, {
    "left" : "_inputPtr--;",
    "right" : "_inputPtr--;",
    "info" : "ExpressionStatement[37137-37149]:ExpressionStatement[37137-37149]"
  }, {
    "left" : "return (_currToken = JsonToken.VALUE_NULL);",
    "right" : "return (_currToken = JsonToken.VALUE_NULL);",
    "info" : "ReturnStatement[37160-37203]:ReturnStatement[37160-37203]"
  }, {
    "left" : "return (_currToken = _handleOddValue(i));",
    "right" : "return (_currToken = _handleOddValue(i));",
    "info" : "ReturnStatement[37239-37280]:ReturnStatement[37239-37280]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[37346-37355]:MarkerAnnotation[37346-37355]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[37360-37366]:Modifier[37360-37366]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[37367-37372]:Modifier[37367-37372]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[37373-37379]:SimpleType[37373-37379]"
  }, {
    "left" : "nextTextValue",
    "right" : "nextTextValue",
    "info" : "SimpleName[37380-37393]:SimpleName[37380-37393]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[37403-37414]:SimpleType[37403-37414]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37419-38389]:Block[37419-38389]"
  }, {
    "left" : "if (_currToken == JsonToken.FIELD_NAME)",
    "right" : "if (_currToken == JsonToken.FIELD_NAME)",
    "info" : "IfStatement[37429-38260]:IfStatement[37429-38260]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37469-38260]:Block[37469-38260]"
  }, {
    "left" : "_nameCopied = false;",
    "right" : "_nameCopied = false;",
    "info" : "ExpressionStatement[37522-37542]:ExpressionStatement[37522-37542]"
  }, {
    "left" : "JsonToken t = _nextToken;",
    "right" : "JsonToken t = _nextToken;",
    "info" : "VariableDeclarationStatement[37555-37580]:VariableDeclarationStatement[37555-37580]"
  }, {
    "left" : "_nextToken = null;",
    "right" : "_nextToken = null;",
    "info" : "ExpressionStatement[37593-37611]:ExpressionStatement[37593-37611]"
  }, {
    "left" : "_currToken = t;",
    "right" : "_currToken = t;",
    "info" : "ExpressionStatement[37624-37639]:ExpressionStatement[37624-37639]"
  }, {
    "left" : "if (t == JsonToken.VALUE_STRING)",
    "right" : "if (t == JsonToken.VALUE_STRING)",
    "info" : "IfStatement[37652-37896]:IfStatement[37652-37896]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37685-37896]:Block[37685-37896]"
  }, {
    "left" : "if (_tokenIncomplete)",
    "right" : "if (_tokenIncomplete)",
    "info" : "IfStatement[37703-37827]:IfStatement[37703-37827]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37725-37827]:Block[37725-37827]"
  }, {
    "left" : "_tokenIncomplete = false;",
    "right" : "_tokenIncomplete = false;",
    "info" : "ExpressionStatement[37747-37772]:ExpressionStatement[37747-37772]"
  }, {
    "left" : "_finishString();",
    "right" : "_finishString();",
    "info" : "ExpressionStatement[37793-37809]:ExpressionStatement[37793-37809]"
  }, {
    "left" : "return _textBuffer.contentsAsString();",
    "right" : "return _textBuffer.contentsAsString();",
    "info" : "ReturnStatement[37844-37882]:ReturnStatement[37844-37882]"
  }, {
    "left" : "if (t == JsonToken.START_ARRAY)",
    "right" : "if (t == JsonToken.START_ARRAY)",
    "info" : "IfStatement[37909-38225]:IfStatement[37909-38225]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37941-38063]:Block[37941-38063]"
  }, {
    "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
    "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
    "info" : "ExpressionStatement[37959-38049]:ExpressionStatement[37959-38049]"
  }, {
    "left" : "if (t == JsonToken.START_OBJECT)",
    "right" : "if (t == JsonToken.START_OBJECT)",
    "info" : "IfStatement[38069-38225]:IfStatement[38069-38225]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38102-38225]:Block[38102-38225]"
  }, {
    "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
    "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
    "info" : "ExpressionStatement[38120-38211]:ExpressionStatement[38120-38211]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[38238-38250]:ReturnStatement[38238-38250]"
  }, {
    "left" : "return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;",
    "right" : "return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;",
    "info" : "ReturnStatement[38317-38383]:ReturnStatement[38317-38383]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[38445-38454]:MarkerAnnotation[38445-38454]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[38459-38465]:Modifier[38459-38465]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[38466-38471]:Modifier[38466-38471]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[38472-38475]:PrimitiveType[38472-38475]"
  }, {
    "left" : "nextIntValue",
    "right" : "nextIntValue",
    "info" : "SimpleName[38476-38488]:SimpleName[38476-38488]"
  }, {
    "left" : "int defaultValue",
    "right" : "int defaultValue",
    "info" : "SingleVariableDeclaration[38489-38505]:SingleVariableDeclaration[38489-38505]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[38514-38525]:SimpleType[38514-38525]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38530-39331]:Block[38530-39331]"
  }, {
    "left" : "if (_currToken == JsonToken.FIELD_NAME)",
    "right" : "if (_currToken == JsonToken.FIELD_NAME)",
    "info" : "IfStatement[38540-39186]:IfStatement[38540-39186]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38580-39186]:Block[38580-39186]"
  }, {
    "left" : "_nameCopied = false;",
    "right" : "_nameCopied = false;",
    "info" : "ExpressionStatement[38594-38614]:ExpressionStatement[38594-38614]"
  }, {
    "left" : "JsonToken t = _nextToken;",
    "right" : "JsonToken t = _nextToken;",
    "info" : "VariableDeclarationStatement[38627-38652]:VariableDeclarationStatement[38627-38652]"
  }, {
    "left" : "_nextToken = null;",
    "right" : "_nextToken = null;",
    "info" : "ExpressionStatement[38665-38683]:ExpressionStatement[38665-38683]"
  }, {
    "left" : "_currToken = t;",
    "right" : "_currToken = t;",
    "info" : "ExpressionStatement[38696-38711]:ExpressionStatement[38696-38711]"
  }, {
    "left" : "if (t == JsonToken.VALUE_NUMBER_INT)",
    "right" : "if (t == JsonToken.VALUE_NUMBER_INT)",
    "info" : "IfStatement[38724-38814]:IfStatement[38724-38814]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38761-38814]:Block[38761-38814]"
  }, {
    "left" : "return getIntValue();",
    "right" : "return getIntValue();",
    "info" : "ReturnStatement[38779-38800]:ReturnStatement[38779-38800]"
  }, {
    "left" : "if (t == JsonToken.START_ARRAY)",
    "right" : "if (t == JsonToken.START_ARRAY)",
    "info" : "IfStatement[38827-39143]:IfStatement[38827-39143]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38859-38981]:Block[38859-38981]"
  }, {
    "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
    "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
    "info" : "ExpressionStatement[38877-38967]:ExpressionStatement[38877-38967]"
  }, {
    "left" : "if (t == JsonToken.START_OBJECT)",
    "right" : "if (t == JsonToken.START_OBJECT)",
    "info" : "IfStatement[38987-39143]:IfStatement[38987-39143]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39020-39143]:Block[39020-39143]"
  }, {
    "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
    "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
    "info" : "ExpressionStatement[39038-39129]:ExpressionStatement[39038-39129]"
  }, {
    "left" : "return defaultValue;",
    "right" : "return defaultValue;",
    "info" : "ReturnStatement[39156-39176]:ReturnStatement[39156-39176]"
  }, {
    "left" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;",
    "right" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;",
    "info" : "ReturnStatement[39243-39325]:ReturnStatement[39243-39325]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[39387-39396]:MarkerAnnotation[39387-39396]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[39401-39407]:Modifier[39401-39407]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[39408-39413]:Modifier[39408-39413]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[39414-39418]:PrimitiveType[39414-39418]"
  }, {
    "left" : "nextLongValue",
    "right" : "nextLongValue",
    "info" : "SimpleName[39419-39432]:SimpleName[39419-39432]"
  }, {
    "left" : "long defaultValue",
    "right" : "long defaultValue",
    "info" : "SingleVariableDeclaration[39433-39450]:SingleVariableDeclaration[39433-39450]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[39459-39470]:SimpleType[39459-39470]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39475-40317]:Block[39475-40317]"
  }, {
    "left" : "if (_currToken == JsonToken.FIELD_NAME)",
    "right" : "if (_currToken == JsonToken.FIELD_NAME)",
    "info" : "IfStatement[39485-40171]:IfStatement[39485-40171]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39525-40171]:Block[39525-40171]"
  }, {
    "left" : "_nameCopied = false;",
    "right" : "_nameCopied = false;",
    "info" : "ExpressionStatement[39578-39598]:ExpressionStatement[39578-39598]"
  }, {
    "left" : "JsonToken t = _nextToken;",
    "right" : "JsonToken t = _nextToken;",
    "info" : "VariableDeclarationStatement[39611-39636]:VariableDeclarationStatement[39611-39636]"
  }, {
    "left" : "_nextToken = null;",
    "right" : "_nextToken = null;",
    "info" : "ExpressionStatement[39649-39667]:ExpressionStatement[39649-39667]"
  }, {
    "left" : "_currToken = t;",
    "right" : "_currToken = t;",
    "info" : "ExpressionStatement[39680-39695]:ExpressionStatement[39680-39695]"
  }, {
    "left" : "if (t == JsonToken.VALUE_NUMBER_INT)",
    "right" : "if (t == JsonToken.VALUE_NUMBER_INT)",
    "info" : "IfStatement[39708-39799]:IfStatement[39708-39799]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39745-39799]:Block[39745-39799]"
  }, {
    "left" : "return getLongValue();",
    "right" : "return getLongValue();",
    "info" : "ReturnStatement[39763-39785]:ReturnStatement[39763-39785]"
  }, {
    "left" : "if (t == JsonToken.START_ARRAY)",
    "right" : "if (t == JsonToken.START_ARRAY)",
    "info" : "IfStatement[39812-40128]:IfStatement[39812-40128]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39844-39966]:Block[39844-39966]"
  }, {
    "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
    "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
    "info" : "ExpressionStatement[39862-39952]:ExpressionStatement[39862-39952]"
  }, {
    "left" : "if (t == JsonToken.START_OBJECT)",
    "right" : "if (t == JsonToken.START_OBJECT)",
    "info" : "IfStatement[39972-40128]:IfStatement[39972-40128]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40005-40128]:Block[40005-40128]"
  }, {
    "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
    "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
    "info" : "ExpressionStatement[40023-40114]:ExpressionStatement[40023-40114]"
  }, {
    "left" : "return defaultValue;",
    "right" : "return defaultValue;",
    "info" : "ReturnStatement[40141-40161]:ReturnStatement[40141-40161]"
  }, {
    "left" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;",
    "right" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;",
    "info" : "ReturnStatement[40228-40311]:ReturnStatement[40228-40311]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[40377-40386]:MarkerAnnotation[40377-40386]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[40391-40397]:Modifier[40391-40397]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[40398-40403]:Modifier[40398-40403]"
  }, {
    "left" : "Boolean",
    "right" : "Boolean",
    "info" : "SimpleType[40404-40411]:SimpleType[40404-40411]"
  }, {
    "left" : "nextBooleanValue",
    "right" : "nextBooleanValue",
    "info" : "SimpleName[40412-40428]:SimpleName[40412-40428]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[40438-40449]:SimpleType[40438-40449]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40454-41464]:Block[40454-41464]"
  }, {
    "left" : "if (_currToken == JsonToken.FIELD_NAME)",
    "right" : "if (_currToken == JsonToken.FIELD_NAME)",
    "info" : "IfStatement[40464-41232]:IfStatement[40464-41232]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40504-41232]:Block[40504-41232]"
  }, {
    "left" : "_nameCopied = false;",
    "right" : "_nameCopied = false;",
    "info" : "ExpressionStatement[40557-40577]:ExpressionStatement[40557-40577]"
  }, {
    "left" : "JsonToken t = _nextToken;",
    "right" : "JsonToken t = _nextToken;",
    "info" : "VariableDeclarationStatement[40590-40615]:VariableDeclarationStatement[40590-40615]"
  }, {
    "left" : "_nextToken = null;",
    "right" : "_nextToken = null;",
    "info" : "ExpressionStatement[40628-40646]:ExpressionStatement[40628-40646]"
  }, {
    "left" : "_currToken = t;",
    "right" : "_currToken = t;",
    "info" : "ExpressionStatement[40659-40674]:ExpressionStatement[40659-40674]"
  }, {
    "left" : "if (t == JsonToken.VALUE_TRUE)",
    "right" : "if (t == JsonToken.VALUE_TRUE)",
    "info" : "IfStatement[40687-40770]:IfStatement[40687-40770]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40718-40770]:Block[40718-40770]"
  }, {
    "left" : "return Boolean.TRUE;",
    "right" : "return Boolean.TRUE;",
    "info" : "ReturnStatement[40736-40756]:ReturnStatement[40736-40756]"
  }, {
    "left" : "if (t == JsonToken.VALUE_FALSE)",
    "right" : "if (t == JsonToken.VALUE_FALSE)",
    "info" : "IfStatement[40783-40868]:IfStatement[40783-40868]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40815-40868]:Block[40815-40868]"
  }, {
    "left" : "return Boolean.FALSE;",
    "right" : "return Boolean.FALSE;",
    "info" : "ReturnStatement[40833-40854]:ReturnStatement[40833-40854]"
  }, {
    "left" : "if (t == JsonToken.START_ARRAY)",
    "right" : "if (t == JsonToken.START_ARRAY)",
    "info" : "IfStatement[40881-41197]:IfStatement[40881-41197]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40913-41035]:Block[40913-41035]"
  }, {
    "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
    "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
    "info" : "ExpressionStatement[40931-41021]:ExpressionStatement[40931-41021]"
  }, {
    "left" : "if (t == JsonToken.START_OBJECT)",
    "right" : "if (t == JsonToken.START_OBJECT)",
    "info" : "IfStatement[41041-41197]:IfStatement[41041-41197]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41074-41197]:Block[41074-41197]"
  }, {
    "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
    "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
    "info" : "ExpressionStatement[41092-41183]:ExpressionStatement[41092-41183]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[41210-41222]:ReturnStatement[41210-41222]"
  }, {
    "left" : "JsonToken t = nextToken();",
    "right" : "JsonToken t = nextToken();",
    "info" : "VariableDeclarationStatement[41241-41267]:VariableDeclarationStatement[41241-41267]"
  }, {
    "left" : "if (t != null)",
    "right" : "if (t != null)",
    "info" : "IfStatement[41276-41437]:IfStatement[41276-41437]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41291-41437]:Block[41291-41437]"
  }, {
    "left" : "int id = t.id();",
    "right" : "int id = t.id();",
    "info" : "VariableDeclarationStatement[41305-41321]:VariableDeclarationStatement[41305-41321]"
  }, {
    "left" : "if (id == ID_TRUE)",
    "right" : "if (id == ID_TRUE)",
    "info" : "IfStatement[41334-41373]:IfStatement[41334-41373]"
  }, {
    "left" : "return Boolean.TRUE;",
    "right" : "return Boolean.TRUE;",
    "info" : "ReturnStatement[41353-41373]:ReturnStatement[41353-41373]"
  }, {
    "left" : "if (id == ID_FALSE)",
    "right" : "if (id == ID_FALSE)",
    "info" : "IfStatement[41386-41427]:IfStatement[41386-41427]"
  }, {
    "left" : "return Boolean.FALSE;",
    "right" : "return Boolean.FALSE;",
    "info" : "ReturnStatement[41406-41427]:ReturnStatement[41406-41427]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[41446-41458]:ReturnStatement[41446-41458]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[42433-42442]:Modifier[42433-42442]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[42443-42448]:Modifier[42443-42448]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[42449-42458]:SimpleType[42449-42458]"
  }, {
    "left" : "_parsePosNumber",
    "right" : "_parsePosNumber",
    "info" : "SimpleName[42459-42474]:SimpleName[42459-42474]"
  }, {
    "left" : "int ch",
    "right" : "int ch",
    "info" : "SingleVariableDeclaration[42475-42481]:SingleVariableDeclaration[42475-42481]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[42490-42501]:SimpleType[42490-42501]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42506-44408]:Block[42506-44408]"
  }, {
    "left" : "int ptr = _inputPtr;",
    "right" : "int ptr = _inputPtr;",
    "info" : "VariableDeclarationStatement[42789-42809]:VariableDeclarationStatement[42789-42809]"
  }, {
    "left" : "int startPtr = ptr-1;",
    "right" : "int startPtr = ptr-1;",
    "info" : "VariableDeclarationStatement[42818-42839]:VariableDeclarationStatement[42818-42839]"
  }, {
    "left" : "final int inputLen = _inputEnd;",
    "right" : "final int inputLen = _inputEnd;",
    "info" : "VariableDeclarationStatement[42881-42912]:VariableDeclarationStatement[42881-42912]"
  }, {
    "left" : "if (ch == INT_0)",
    "right" : "if (ch == INT_0)",
    "info" : "IfStatement[42969-43048]:IfStatement[42969-43048]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42986-43048]:Block[42986-43048]"
  }, {
    "left" : "return _parseNumber2(false, startPtr);",
    "right" : "return _parseNumber2(false, startPtr);",
    "info" : "ReturnStatement[43000-43038]:ReturnStatement[43000-43038]"
  }, {
    "left" : "int intLen = 1;",
    "right" : "int intLen = 1;",
    "info" : "VariableDeclarationStatement[43346-43361]:VariableDeclarationStatement[43346-43361]"
  }, {
    "left" : "int_loop:\n        while (true) {\n            if (ptr >= inputLen) {\n                _inputPtr = startPtr;\n                return _parseNumber2(false, startPtr);\n            }\n            ch = (int) _inputBuffer[ptr++];\n            if (ch < INT_0 || ch > INT_9) {\n                break int_loop;\n            }\n            ++intLen;\n        }",
    "right" : "int_loop:\n        while (true) {\n            if (ptr >= inputLen) {\n                _inputPtr = startPtr;\n                return _parseNumber2(false, startPtr);\n            }\n            ch = (int) _inputBuffer[ptr++];\n            if (ch < INT_0 || ch > INT_9) {\n                break int_loop;\n            }\n            ++intLen;\n        }",
    "info" : "LabeledStatement[43446-43786]:LabeledStatement[43446-43786]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[43464-43786]:WhileStatement[43464-43786]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43477-43786]:Block[43477-43786]"
  }, {
    "left" : "if (ptr >= inputLen)",
    "right" : "if (ptr >= inputLen)",
    "info" : "IfStatement[43491-43620]:IfStatement[43491-43620]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43512-43620]:Block[43512-43620]"
  }, {
    "left" : "_inputPtr = startPtr;",
    "right" : "_inputPtr = startPtr;",
    "info" : "ExpressionStatement[43530-43551]:ExpressionStatement[43530-43551]"
  }, {
    "left" : "return _parseNumber2(false, startPtr);",
    "right" : "return _parseNumber2(false, startPtr);",
    "info" : "ReturnStatement[43568-43606]:ReturnStatement[43568-43606]"
  }, {
    "left" : "ch = (int) _inputBuffer[ptr++];",
    "right" : "ch = (int) _inputBuffer[ptr++];",
    "info" : "ExpressionStatement[43633-43664]:ExpressionStatement[43633-43664]"
  }, {
    "left" : "if (ch < INT_0 || ch > INT_9)",
    "right" : "if (ch < INT_0 || ch > INT_9)",
    "info" : "IfStatement[43677-43754]:IfStatement[43677-43754]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43707-43754]:Block[43707-43754]"
  }, {
    "left" : "break int_loop;",
    "right" : "break int_loop;",
    "info" : "BreakStatement[43725-43740]:BreakStatement[43725-43740]"
  }, {
    "left" : "++intLen;",
    "right" : "++intLen;",
    "info" : "ExpressionStatement[43767-43776]:ExpressionStatement[43767-43776]"
  }, {
    "left" : "if (ch == INT_PERIOD || ch == INT_e || ch == INT_E)",
    "right" : "if (ch == INT_PERIOD || ch == INT_e || ch == INT_E)",
    "info" : "IfStatement[43795-43953]:IfStatement[43795-43953]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43847-43953]:Block[43847-43953]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[43861-43877]:ExpressionStatement[43861-43877]"
  }, {
    "left" : "return _parseFloat(ch, startPtr, ptr, false, intLen);",
    "right" : "return _parseFloat(ch, startPtr, ptr, false, intLen);",
    "info" : "ReturnStatement[43890-43943]:ReturnStatement[43890-43943]"
  }, {
    "left" : "--ptr;",
    "right" : "--ptr;",
    "info" : "ExpressionStatement[44030-44036]:ExpressionStatement[44030-44036]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[44086-44102]:ExpressionStatement[44086-44102]"
  }, {
    "left" : "if (_parsingContext.inRoot())",
    "right" : "if (_parsingContext.inRoot())",
    "info" : "IfStatement[44189-44264]:IfStatement[44189-44264]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44219-44264]:Block[44219-44264]"
  }, {
    "left" : "_verifyRootSpace(ch);",
    "right" : "_verifyRootSpace(ch);",
    "info" : "ExpressionStatement[44233-44254]:ExpressionStatement[44233-44254]"
  }, {
    "left" : "int len = ptr-startPtr;",
    "right" : "int len = ptr-startPtr;",
    "info" : "VariableDeclarationStatement[44273-44296]:VariableDeclarationStatement[44273-44296]"
  }, {
    "left" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, len);",
    "right" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, len);",
    "info" : "ExpressionStatement[44305-44362]:ExpressionStatement[44305-44362]"
  }, {
    "left" : "return resetInt(false, intLen);",
    "right" : "return resetInt(false, intLen);",
    "info" : "ReturnStatement[44371-44402]:ReturnStatement[44371-44402]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[44414-44421]:Modifier[44414-44421]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[44422-44427]:Modifier[44422-44427]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[44428-44437]:SimpleType[44428-44437]"
  }, {
    "left" : "_parseFloat",
    "right" : "_parseFloat",
    "info" : "SimpleName[44438-44449]:SimpleName[44438-44449]"
  }, {
    "left" : "int ch",
    "right" : "int ch",
    "info" : "SingleVariableDeclaration[44450-44456]:SingleVariableDeclaration[44450-44456]"
  }, {
    "left" : "int startPtr",
    "right" : "int startPtr",
    "info" : "SingleVariableDeclaration[44458-44470]:SingleVariableDeclaration[44458-44470]"
  }, {
    "left" : "int ptr",
    "right" : "int ptr",
    "info" : "SingleVariableDeclaration[44472-44479]:SingleVariableDeclaration[44472-44479]"
  }, {
    "left" : "boolean neg",
    "right" : "boolean neg",
    "info" : "SingleVariableDeclaration[44481-44492]:SingleVariableDeclaration[44481-44492]"
  }, {
    "left" : "int intLen",
    "right" : "int intLen",
    "info" : "SingleVariableDeclaration[44494-44504]:SingleVariableDeclaration[44494-44504]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[44521-44532]:SimpleType[44521-44532]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44537-46796]:Block[44537-46796]"
  }, {
    "left" : "final int inputLen = _inputEnd;",
    "right" : "final int inputLen = _inputEnd;",
    "info" : "VariableDeclarationStatement[44547-44578]:VariableDeclarationStatement[44547-44578]"
  }, {
    "left" : "int fractLen = 0;",
    "right" : "int fractLen = 0;",
    "info" : "VariableDeclarationStatement[44587-44604]:VariableDeclarationStatement[44587-44604]"
  }, {
    "left" : "if (ch == '.')",
    "right" : "if (ch == '.')",
    "info" : "IfStatement[44660-45263]:IfStatement[44660-45263]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44675-45263]:Block[44675-45263]"
  }, {
    "left" : "fract_loop:\n            while (true) {\n                if (ptr >= inputLen) {\n                    return _parseNumber2(neg, startPtr);\n                }\n                ch = (int) _inputBuffer[ptr++];\n                if (ch < INT_0 || ch > INT_9) {\n                    break fract_loop;\n                }\n                ++fractLen;\n            }",
    "right" : "fract_loop:\n            while (true) {\n                if (ptr >= inputLen) {\n                    return _parseNumber2(neg, startPtr);\n                }\n                ch = (int) _inputBuffer[ptr++];\n                if (ch < INT_0 || ch > INT_9) {\n                    break fract_loop;\n                }\n                ++fractLen;\n            }",
    "info" : "LabeledStatement[44706-45052]:LabeledStatement[44706-45052]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[44730-45052]:WhileStatement[44730-45052]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44743-45052]:Block[44743-45052]"
  }, {
    "left" : "if (ptr >= inputLen)",
    "right" : "if (ptr >= inputLen)",
    "info" : "IfStatement[44761-44858]:IfStatement[44761-44858]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44782-44858]:Block[44782-44858]"
  }, {
    "left" : "return _parseNumber2(neg, startPtr);",
    "right" : "return _parseNumber2(neg, startPtr);",
    "info" : "ReturnStatement[44804-44840]:ReturnStatement[44804-44840]"
  }, {
    "left" : "ch = (int) _inputBuffer[ptr++];",
    "right" : "ch = (int) _inputBuffer[ptr++];",
    "info" : "ExpressionStatement[44875-44906]:ExpressionStatement[44875-44906]"
  }, {
    "left" : "if (ch < INT_0 || ch > INT_9)",
    "right" : "if (ch < INT_0 || ch > INT_9)",
    "info" : "IfStatement[44923-45010]:IfStatement[44923-45010]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44953-45010]:Block[44953-45010]"
  }, {
    "left" : "break fract_loop;",
    "right" : "break fract_loop;",
    "info" : "BreakStatement[44975-44992]:BreakStatement[44975-44992]"
  }, {
    "left" : "++fractLen;",
    "right" : "++fractLen;",
    "info" : "ExpressionStatement[45027-45038]:ExpressionStatement[45027-45038]"
  }, {
    "left" : "if (fractLen == 0)",
    "right" : "if (fractLen == 0)",
    "info" : "IfStatement[45130-45253]:IfStatement[45130-45253]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45149-45253]:Block[45149-45253]"
  }, {
    "left" : "reportUnexpectedNumberChar(ch, \"Decimal point not followed by a digit\");",
    "right" : "reportUnexpectedNumberChar(ch, \"Decimal point not followed by a digit\");",
    "info" : "ExpressionStatement[45167-45239]:ExpressionStatement[45167-45239]"
  }, {
    "left" : "int expLen = 0;",
    "right" : "int expLen = 0;",
    "info" : "VariableDeclarationStatement[45272-45287]:VariableDeclarationStatement[45272-45287]"
  }, {
    "left" : "if (ch == 'e' || ch == 'E')",
    "right" : "if (ch == 'e' || ch == 'E')",
    "info" : "IfStatement[45296-46358]:IfStatement[45296-46358]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45324-46358]:Block[45324-46358]"
  }, {
    "left" : "if (ptr >= inputLen)",
    "right" : "if (ptr >= inputLen)",
    "info" : "IfStatement[45357-45484]:IfStatement[45357-45484]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45378-45484]:Block[45378-45484]"
  }, {
    "left" : "_inputPtr = startPtr;",
    "right" : "_inputPtr = startPtr;",
    "info" : "ExpressionStatement[45396-45417]:ExpressionStatement[45396-45417]"
  }, {
    "left" : "return _parseNumber2(neg, startPtr);",
    "right" : "return _parseNumber2(neg, startPtr);",
    "info" : "ReturnStatement[45434-45470]:ReturnStatement[45434-45470]"
  }, {
    "left" : "ch = (int) _inputBuffer[ptr++];",
    "right" : "ch = (int) _inputBuffer[ptr++];",
    "info" : "ExpressionStatement[45528-45559]:ExpressionStatement[45528-45559]"
  }, {
    "left" : "if (ch == INT_MINUS || ch == INT_PLUS)",
    "right" : "if (ch == INT_MINUS || ch == INT_PLUS)",
    "info" : "IfStatement[45572-45851]:IfStatement[45572-45851]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45611-45851]:Block[45611-45851]"
  }, {
    "left" : "if (ptr >= inputLen)",
    "right" : "if (ptr >= inputLen)",
    "info" : "IfStatement[45650-45789]:IfStatement[45650-45789]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45671-45789]:Block[45671-45789]"
  }, {
    "left" : "_inputPtr = startPtr;",
    "right" : "_inputPtr = startPtr;",
    "info" : "ExpressionStatement[45693-45714]:ExpressionStatement[45693-45714]"
  }, {
    "left" : "return _parseNumber2(neg, startPtr);",
    "right" : "return _parseNumber2(neg, startPtr);",
    "info" : "ReturnStatement[45735-45771]:ReturnStatement[45735-45771]"
  }, {
    "left" : "ch = (int) _inputBuffer[ptr++];",
    "right" : "ch = (int) _inputBuffer[ptr++];",
    "info" : "ExpressionStatement[45806-45837]:ExpressionStatement[45806-45837]"
  }, {
    "left" : "while (ch <= INT_9 && ch >= INT_0)",
    "right" : "while (ch <= INT_9 && ch >= INT_0)",
    "info" : "WhileStatement[45864-46144]:WhileStatement[45864-46144]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45899-46144]:Block[45899-46144]"
  }, {
    "left" : "++expLen;",
    "right" : "++expLen;",
    "info" : "ExpressionStatement[45917-45926]:ExpressionStatement[45917-45926]"
  }, {
    "left" : "if (ptr >= inputLen)",
    "right" : "if (ptr >= inputLen)",
    "info" : "IfStatement[45943-46082]:IfStatement[45943-46082]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45964-46082]:Block[45964-46082]"
  }, {
    "left" : "_inputPtr = startPtr;",
    "right" : "_inputPtr = startPtr;",
    "info" : "ExpressionStatement[45986-46007]:ExpressionStatement[45986-46007]"
  }, {
    "left" : "return _parseNumber2(neg, startPtr);",
    "right" : "return _parseNumber2(neg, startPtr);",
    "info" : "ReturnStatement[46028-46064]:ReturnStatement[46028-46064]"
  }, {
    "left" : "ch = (int) _inputBuffer[ptr++];",
    "right" : "ch = (int) _inputBuffer[ptr++];",
    "info" : "ExpressionStatement[46099-46130]:ExpressionStatement[46099-46130]"
  }, {
    "left" : "if (expLen == 0)",
    "right" : "if (expLen == 0)",
    "info" : "IfStatement[46222-46348]:IfStatement[46222-46348]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46239-46348]:Block[46239-46348]"
  }, {
    "left" : "reportUnexpectedNumberChar(ch, \"Exponent indicator not followed by a digit\");",
    "right" : "reportUnexpectedNumberChar(ch, \"Exponent indicator not followed by a digit\");",
    "info" : "ExpressionStatement[46257-46334]:ExpressionStatement[46257-46334]"
  }, {
    "left" : "--ptr;",
    "right" : "--ptr;",
    "info" : "ExpressionStatement[46367-46373]:ExpressionStatement[46367-46373]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[46423-46439]:ExpressionStatement[46423-46439]"
  }, {
    "left" : "if (_parsingContext.inRoot())",
    "right" : "if (_parsingContext.inRoot())",
    "info" : "IfStatement[46526-46601]:IfStatement[46526-46601]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46556-46601]:Block[46556-46601]"
  }, {
    "left" : "_verifyRootSpace(ch);",
    "right" : "_verifyRootSpace(ch);",
    "info" : "ExpressionStatement[46570-46591]:ExpressionStatement[46570-46591]"
  }, {
    "left" : "int len = ptr-startPtr;",
    "right" : "int len = ptr-startPtr;",
    "info" : "VariableDeclarationStatement[46610-46633]:VariableDeclarationStatement[46610-46633]"
  }, {
    "left" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, len);",
    "right" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, len);",
    "info" : "ExpressionStatement[46642-46699]:ExpressionStatement[46642-46699]"
  }, {
    "left" : "return resetFloat(neg, intLen, fractLen, expLen);",
    "right" : "return resetFloat(neg, intLen, fractLen, expLen);",
    "info" : "ReturnStatement[46741-46790]:ReturnStatement[46741-46790]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[46802-46811]:Modifier[46802-46811]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[46812-46817]:Modifier[46812-46817]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[46818-46827]:SimpleType[46818-46827]"
  }, {
    "left" : "_parseNegNumber",
    "right" : "_parseNegNumber",
    "info" : "SimpleName[46828-46843]:SimpleName[46828-46843]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[46853-46864]:SimpleType[46853-46864]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46869-48313]:Block[46869-48313]"
  }, {
    "left" : "int ptr = _inputPtr;",
    "right" : "int ptr = _inputPtr;",
    "info" : "VariableDeclarationStatement[46879-46899]:VariableDeclarationStatement[46879-46899]"
  }, {
    "left" : "int startPtr = ptr-1;",
    "right" : "int startPtr = ptr-1;",
    "info" : "VariableDeclarationStatement[46908-46929]:VariableDeclarationStatement[46908-46929]"
  }, {
    "left" : "final int inputLen = _inputEnd;",
    "right" : "final int inputLen = _inputEnd;",
    "info" : "VariableDeclarationStatement[46976-47007]:VariableDeclarationStatement[46976-47007]"
  }, {
    "left" : "if (ptr >= inputLen)",
    "right" : "if (ptr >= inputLen)",
    "info" : "IfStatement[47017-47099]:IfStatement[47017-47099]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47038-47099]:Block[47038-47099]"
  }, {
    "left" : "return _parseNumber2(true, startPtr);",
    "right" : "return _parseNumber2(true, startPtr);",
    "info" : "ReturnStatement[47052-47089]:ReturnStatement[47052-47089]"
  }, {
    "left" : "int ch = _inputBuffer[ptr++];",
    "right" : "int ch = _inputBuffer[ptr++];",
    "info" : "VariableDeclarationStatement[47108-47137]:VariableDeclarationStatement[47108-47137]"
  }, {
    "left" : "if (ch > INT_9 || ch < INT_0)",
    "right" : "if (ch > INT_9 || ch < INT_0)",
    "info" : "IfStatement[47209-47335]:IfStatement[47209-47335]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47239-47335]:Block[47239-47335]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[47253-47269]:ExpressionStatement[47253-47269]"
  }, {
    "left" : "return _handleInvalidNumberStart(ch, true);",
    "right" : "return _handleInvalidNumberStart(ch, true);",
    "info" : "ReturnStatement[47282-47325]:ReturnStatement[47282-47325]"
  }, {
    "left" : "if (ch == INT_0)",
    "right" : "if (ch == INT_0)",
    "info" : "IfStatement[47391-47469]:IfStatement[47391-47469]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47408-47469]:Block[47408-47469]"
  }, {
    "left" : "return _parseNumber2(true, startPtr);",
    "right" : "return _parseNumber2(true, startPtr);",
    "info" : "ReturnStatement[47422-47459]:ReturnStatement[47422-47459]"
  }, {
    "left" : "int intLen = 1;",
    "right" : "int intLen = 1;",
    "info" : "VariableDeclarationStatement[47478-47493]:VariableDeclarationStatement[47478-47493]"
  }, {
    "left" : "int_loop:\n        while (true) {\n            if (ptr >= inputLen) {\n                return _parseNumber2(true, startPtr);\n            }\n            ch = (int) _inputBuffer[ptr++];\n            if (ch < INT_0 || ch > INT_9) {\n                break int_loop;\n            }\n            ++intLen;\n        }",
    "right" : "int_loop:\n        while (true) {\n            if (ptr >= inputLen) {\n                return _parseNumber2(true, startPtr);\n            }\n            ch = (int) _inputBuffer[ptr++];\n            if (ch < INT_0 || ch > INT_9) {\n                break int_loop;\n            }\n            ++intLen;\n        }",
    "info" : "LabeledStatement[47578-47879]:LabeledStatement[47578-47879]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[47596-47879]:WhileStatement[47596-47879]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47609-47879]:Block[47609-47879]"
  }, {
    "left" : "if (ptr >= inputLen)",
    "right" : "if (ptr >= inputLen)",
    "info" : "IfStatement[47623-47713]:IfStatement[47623-47713]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47644-47713]:Block[47644-47713]"
  }, {
    "left" : "return _parseNumber2(true, startPtr);",
    "right" : "return _parseNumber2(true, startPtr);",
    "info" : "ReturnStatement[47662-47699]:ReturnStatement[47662-47699]"
  }, {
    "left" : "ch = (int) _inputBuffer[ptr++];",
    "right" : "ch = (int) _inputBuffer[ptr++];",
    "info" : "ExpressionStatement[47726-47757]:ExpressionStatement[47726-47757]"
  }, {
    "left" : "if (ch < INT_0 || ch > INT_9)",
    "right" : "if (ch < INT_0 || ch > INT_9)",
    "info" : "IfStatement[47770-47847]:IfStatement[47770-47847]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47800-47847]:Block[47800-47847]"
  }, {
    "left" : "break int_loop;",
    "right" : "break int_loop;",
    "info" : "BreakStatement[47818-47833]:BreakStatement[47818-47833]"
  }, {
    "left" : "++intLen;",
    "right" : "++intLen;",
    "info" : "ExpressionStatement[47860-47869]:ExpressionStatement[47860-47869]"
  }, {
    "left" : "if (ch == INT_PERIOD || ch == INT_e || ch == INT_E)",
    "right" : "if (ch == INT_PERIOD || ch == INT_e || ch == INT_E)",
    "info" : "IfStatement[47889-48046]:IfStatement[47889-48046]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47941-48046]:Block[47941-48046]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[47955-47971]:ExpressionStatement[47955-47971]"
  }, {
    "left" : "return _parseFloat(ch, startPtr, ptr, true, intLen);",
    "right" : "return _parseFloat(ch, startPtr, ptr, true, intLen);",
    "info" : "ReturnStatement[47984-48036]:ReturnStatement[47984-48036]"
  }, {
    "left" : "--ptr;",
    "right" : "--ptr;",
    "info" : "ExpressionStatement[48055-48061]:ExpressionStatement[48055-48061]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[48070-48086]:ExpressionStatement[48070-48086]"
  }, {
    "left" : "if (_parsingContext.inRoot())",
    "right" : "if (_parsingContext.inRoot())",
    "info" : "IfStatement[48095-48170]:IfStatement[48095-48170]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48125-48170]:Block[48125-48170]"
  }, {
    "left" : "_verifyRootSpace(ch);",
    "right" : "_verifyRootSpace(ch);",
    "info" : "ExpressionStatement[48139-48160]:ExpressionStatement[48139-48160]"
  }, {
    "left" : "int len = ptr-startPtr;",
    "right" : "int len = ptr-startPtr;",
    "info" : "VariableDeclarationStatement[48179-48202]:VariableDeclarationStatement[48179-48202]"
  }, {
    "left" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, len);",
    "right" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, len);",
    "info" : "ExpressionStatement[48211-48268]:ExpressionStatement[48211-48268]"
  }, {
    "left" : "return resetInt(true, intLen);",
    "right" : "return resetInt(true, intLen);",
    "info" : "ReturnStatement[48277-48307]:ReturnStatement[48277-48307]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[48646-48653]:Modifier[48646-48653]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[48654-48659]:Modifier[48654-48659]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[48660-48669]:SimpleType[48660-48669]"
  }, {
    "left" : "_parseNumber2",
    "right" : "_parseNumber2",
    "info" : "SimpleName[48670-48683]:SimpleName[48670-48683]"
  }, {
    "left" : "boolean neg",
    "right" : "boolean neg",
    "info" : "SingleVariableDeclaration[48684-48695]:SingleVariableDeclaration[48684-48695]"
  }, {
    "left" : "int startPtr",
    "right" : "int startPtr",
    "info" : "SingleVariableDeclaration[48697-48709]:SingleVariableDeclaration[48697-48709]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[48718-48729]:SimpleType[48718-48729]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48734-53163]:Block[48734-53163]"
  }, {
    "left" : "_inputPtr = neg ? (startPtr+1) : startPtr;",
    "right" : "_inputPtr = neg ? (startPtr+1) : startPtr;",
    "info" : "ExpressionStatement[48744-48786]:ExpressionStatement[48744-48786]"
  }, {
    "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "info" : "VariableDeclarationStatement[48795-48851]:VariableDeclarationStatement[48795-48851]"
  }, {
    "left" : "int outPtr = 0;",
    "right" : "int outPtr = 0;",
    "info" : "VariableDeclarationStatement[48860-48875]:VariableDeclarationStatement[48860-48875]"
  }, {
    "left" : "if (neg)",
    "right" : "if (neg)",
    "info" : "IfStatement[48918-48974]:IfStatement[48918-48974]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48927-48974]:Block[48927-48974]"
  }, {
    "left" : "outBuf[outPtr++] = '-';",
    "right" : "outBuf[outPtr++] = '-';",
    "info" : "ExpressionStatement[48941-48964]:ExpressionStatement[48941-48964]"
  }, {
    "left" : "int intLen = 0;",
    "right" : "int intLen = 0;",
    "info" : "VariableDeclarationStatement[49046-49061]:VariableDeclarationStatement[49046-49061]"
  }, {
    "left" : "char c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n                : getNextChar(\"No digit following minus sign\", JsonToken.VALUE_NUMBER_INT);",
    "right" : "char c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n                : getNextChar(\"No digit following minus sign\", JsonToken.VALUE_NUMBER_INT);",
    "info" : "VariableDeclarationStatement[49070-49222]:VariableDeclarationStatement[49070-49222]"
  }, {
    "left" : "if (c == '0')",
    "right" : "if (c == '0')",
    "info" : "IfStatement[49231-49298]:IfStatement[49231-49298]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49245-49298]:Block[49245-49298]"
  }, {
    "left" : "c = _verifyNoLeadingZeroes();",
    "right" : "c = _verifyNoLeadingZeroes();",
    "info" : "ExpressionStatement[49259-49288]:ExpressionStatement[49259-49288]"
  }, {
    "left" : "boolean eof = false;",
    "right" : "boolean eof = false;",
    "info" : "VariableDeclarationStatement[49307-49327]:VariableDeclarationStatement[49307-49327]"
  }, {
    "left" : "int_loop:\n        while (c >= '0' && c <= '9') {\n            ++intLen;\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = c;\n            if (_inputPtr >= _inputEnd && !_loadMore()) {\n                // EOF is legal for main level int values\n                c = CHAR_NULL;\n                eof = true;\n                break int_loop;\n            }\n            c = _inputBuffer[_inputPtr++];\n        }",
    "right" : "int_loop:\n        while (c >= '0' && c <= '9') {\n            ++intLen;\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = c;\n            if (_inputPtr >= _inputEnd && !_loadMore()) {\n                // EOF is legal for main level int values\n                c = CHAR_NULL;\n                eof = true;\n                break int_loop;\n            }\n            c = _inputBuffer[_inputPtr++];\n        }",
    "info" : "LabeledStatement[49387-49911]:LabeledStatement[49387-49911]"
  }, {
    "left" : "while (c >= '0' && c <= '9')",
    "right" : "while (c >= '0' && c <= '9')",
    "info" : "WhileStatement[49405-49911]:WhileStatement[49405-49911]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49434-49911]:Block[49434-49911]"
  }, {
    "left" : "++intLen;",
    "right" : "++intLen;",
    "info" : "ExpressionStatement[49448-49457]:ExpressionStatement[49448-49457]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[49470-49603]:IfStatement[49470-49603]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49499-49603]:Block[49499-49603]"
  }, {
    "left" : "outBuf = _textBuffer.finishCurrentSegment();",
    "right" : "outBuf = _textBuffer.finishCurrentSegment();",
    "info" : "ExpressionStatement[49517-49561]:ExpressionStatement[49517-49561]"
  }, {
    "left" : "outPtr = 0;",
    "right" : "outPtr = 0;",
    "info" : "ExpressionStatement[49578-49589]:ExpressionStatement[49578-49589]"
  }, {
    "left" : "outBuf[outPtr++] = c;",
    "right" : "outBuf[outPtr++] = c;",
    "info" : "ExpressionStatement[49616-49637]:ExpressionStatement[49616-49637]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd && !_loadMore())",
    "right" : "if (_inputPtr >= _inputEnd && !_loadMore())",
    "info" : "IfStatement[49650-49858]:IfStatement[49650-49858]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49694-49858]:Block[49694-49858]"
  }, {
    "left" : "c = CHAR_NULL;",
    "right" : "c = CHAR_NULL;",
    "info" : "ExpressionStatement[49770-49784]:ExpressionStatement[49770-49784]"
  }, {
    "left" : "eof = true;",
    "right" : "eof = true;",
    "info" : "ExpressionStatement[49801-49812]:ExpressionStatement[49801-49812]"
  }, {
    "left" : "break int_loop;",
    "right" : "break int_loop;",
    "info" : "BreakStatement[49829-49844]:BreakStatement[49829-49844]"
  }, {
    "left" : "c = _inputBuffer[_inputPtr++];",
    "right" : "c = _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[49871-49901]:ExpressionStatement[49871-49901]"
  }, {
    "left" : "if (intLen == 0)",
    "right" : "if (intLen == 0)",
    "info" : "IfStatement[49966-50048]:IfStatement[49966-50048]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49983-50048]:Block[49983-50048]"
  }, {
    "left" : "return _handleInvalidNumberStart(c, neg);",
    "right" : "return _handleInvalidNumberStart(c, neg);",
    "info" : "ReturnStatement[49997-50038]:ReturnStatement[49997-50038]"
  }, {
    "left" : "int fractLen = 0;",
    "right" : "int fractLen = 0;",
    "info" : "VariableDeclarationStatement[50058-50075]:VariableDeclarationStatement[50058-50075]"
  }, {
    "left" : "if (c == '.')",
    "right" : "if (c == '.')",
    "info" : "IfStatement[50130-51145]:IfStatement[50130-51145]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50144-51145]:Block[50144-51145]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[50175-50308]:IfStatement[50175-50308]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50204-50308]:Block[50204-50308]"
  }, {
    "left" : "outBuf = _textBuffer.finishCurrentSegment();",
    "right" : "outBuf = _textBuffer.finishCurrentSegment();",
    "info" : "ExpressionStatement[50222-50266]:ExpressionStatement[50222-50266]"
  }, {
    "left" : "outPtr = 0;",
    "right" : "outPtr = 0;",
    "info" : "ExpressionStatement[50283-50294]:ExpressionStatement[50283-50294]"
  }, {
    "left" : "outBuf[outPtr++] = c;",
    "right" : "outBuf[outPtr++] = c;",
    "info" : "ExpressionStatement[50321-50342]:ExpressionStatement[50321-50342]"
  }, {
    "left" : "fract_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd && !_loadMore()) {\n                    eof = true;\n                    break fract_loop;\n                }\n                c = _inputBuffer[_inputPtr++];\n                if (c < INT_0 || c > INT_9) {\n                    break fract_loop;\n                }\n                ++fractLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = c;\n            }",
    "right" : "fract_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd && !_loadMore()) {\n                    eof = true;\n                    break fract_loop;\n                }\n                c = _inputBuffer[_inputPtr++];\n                if (c < INT_0 || c > INT_9) {\n                    break fract_loop;\n                }\n                ++fractLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = c;\n            }",
    "info" : "LabeledStatement[50356-50935]:LabeledStatement[50356-50935]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[50380-50935]:WhileStatement[50380-50935]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50393-50935]:Block[50393-50935]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd && !_loadMore())",
    "right" : "if (_inputPtr >= _inputEnd && !_loadMore())",
    "info" : "IfStatement[50411-50544]:IfStatement[50411-50544]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50455-50544]:Block[50455-50544]"
  }, {
    "left" : "eof = true;",
    "right" : "eof = true;",
    "info" : "ExpressionStatement[50477-50488]:ExpressionStatement[50477-50488]"
  }, {
    "left" : "break fract_loop;",
    "right" : "break fract_loop;",
    "info" : "BreakStatement[50509-50526]:BreakStatement[50509-50526]"
  }, {
    "left" : "c = _inputBuffer[_inputPtr++];",
    "right" : "c = _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[50561-50591]:ExpressionStatement[50561-50591]"
  }, {
    "left" : "if (c < INT_0 || c > INT_9)",
    "right" : "if (c < INT_0 || c > INT_9)",
    "info" : "IfStatement[50608-50693]:IfStatement[50608-50693]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50636-50693]:Block[50636-50693]"
  }, {
    "left" : "break fract_loop;",
    "right" : "break fract_loop;",
    "info" : "BreakStatement[50658-50675]:BreakStatement[50658-50675]"
  }, {
    "left" : "++fractLen;",
    "right" : "++fractLen;",
    "info" : "ExpressionStatement[50710-50721]:ExpressionStatement[50710-50721]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[50738-50883]:IfStatement[50738-50883]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50767-50883]:Block[50767-50883]"
  }, {
    "left" : "outBuf = _textBuffer.finishCurrentSegment();",
    "right" : "outBuf = _textBuffer.finishCurrentSegment();",
    "info" : "ExpressionStatement[50789-50833]:ExpressionStatement[50789-50833]"
  }, {
    "left" : "outPtr = 0;",
    "right" : "outPtr = 0;",
    "info" : "ExpressionStatement[50854-50865]:ExpressionStatement[50854-50865]"
  }, {
    "left" : "outBuf[outPtr++] = c;",
    "right" : "outBuf[outPtr++] = c;",
    "info" : "ExpressionStatement[50900-50921]:ExpressionStatement[50900-50921]"
  }, {
    "left" : "if (fractLen == 0)",
    "right" : "if (fractLen == 0)",
    "info" : "IfStatement[51013-51135]:IfStatement[51013-51135]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51032-51135]:Block[51032-51135]"
  }, {
    "left" : "reportUnexpectedNumberChar(c, \"Decimal point not followed by a digit\");",
    "right" : "reportUnexpectedNumberChar(c, \"Decimal point not followed by a digit\");",
    "info" : "ExpressionStatement[51050-51121]:ExpressionStatement[51050-51121]"
  }, {
    "left" : "int expLen = 0;",
    "right" : "int expLen = 0;",
    "info" : "VariableDeclarationStatement[51155-51170]:VariableDeclarationStatement[51155-51170]"
  }, {
    "left" : "if (c == 'e' || c == 'E')",
    "right" : "if (c == 'e' || c == 'E')",
    "info" : "IfStatement[51179-52798]:IfStatement[51179-52798]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51205-52798]:Block[51205-52798]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[51232-51365]:IfStatement[51232-51365]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51261-51365]:Block[51261-51365]"
  }, {
    "left" : "outBuf = _textBuffer.finishCurrentSegment();",
    "right" : "outBuf = _textBuffer.finishCurrentSegment();",
    "info" : "ExpressionStatement[51279-51323]:ExpressionStatement[51279-51323]"
  }, {
    "left" : "outPtr = 0;",
    "right" : "outPtr = 0;",
    "info" : "ExpressionStatement[51340-51351]:ExpressionStatement[51340-51351]"
  }, {
    "left" : "outBuf[outPtr++] = c;",
    "right" : "outBuf[outPtr++] = c;",
    "info" : "ExpressionStatement[51378-51399]:ExpressionStatement[51378-51399]"
  }, {
    "left" : "c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n                : getNextChar(\"expected a digit for number exponent\");",
    "right" : "c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n                : getNextChar(\"expected a digit for number exponent\");",
    "info" : "ExpressionStatement[51479-51605]:ExpressionStatement[51479-51605]"
  }, {
    "left" : "if (c == '-' || c == '+')",
    "right" : "if (c == '-' || c == '+')",
    "info" : "IfStatement[51649-52080]:IfStatement[51649-52080]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51675-52080]:Block[51675-52080]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[51693-51838]:IfStatement[51693-51838]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51722-51838]:Block[51722-51838]"
  }, {
    "left" : "outBuf = _textBuffer.finishCurrentSegment();",
    "right" : "outBuf = _textBuffer.finishCurrentSegment();",
    "info" : "ExpressionStatement[51744-51788]:ExpressionStatement[51744-51788]"
  }, {
    "left" : "outPtr = 0;",
    "right" : "outPtr = 0;",
    "info" : "ExpressionStatement[51809-51820]:ExpressionStatement[51809-51820]"
  }, {
    "left" : "outBuf[outPtr++] = c;",
    "right" : "outBuf[outPtr++] = c;",
    "info" : "ExpressionStatement[51855-51876]:ExpressionStatement[51855-51876]"
  }, {
    "left" : "c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n                    : getNextChar(\"expected a digit for number exponent\");",
    "right" : "c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n                    : getNextChar(\"expected a digit for number exponent\");",
    "info" : "ExpressionStatement[51936-52066]:ExpressionStatement[51936-52066]"
  }, {
    "left" : "exp_loop:\n            while (c <= INT_9 && c >= INT_0) {\n                ++expLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = c;\n                if (_inputPtr >= _inputEnd && !_loadMore()) {\n                    eof = true;\n                    break exp_loop;\n                }\n                c = _inputBuffer[_inputPtr++];\n            }",
    "right" : "exp_loop:\n            while (c <= INT_9 && c >= INT_0) {\n                ++expLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = c;\n                if (_inputPtr >= _inputEnd && !_loadMore()) {\n                    eof = true;\n                    break exp_loop;\n                }\n                c = _inputBuffer[_inputPtr++];\n            }",
    "info" : "LabeledStatement[52094-52585]:LabeledStatement[52094-52585]"
  }, {
    "left" : "while (c <= INT_9 && c >= INT_0)",
    "right" : "while (c <= INT_9 && c >= INT_0)",
    "info" : "WhileStatement[52116-52585]:WhileStatement[52116-52585]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52149-52585]:Block[52149-52585]"
  }, {
    "left" : "++expLen;",
    "right" : "++expLen;",
    "info" : "ExpressionStatement[52167-52176]:ExpressionStatement[52167-52176]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[52193-52338]:IfStatement[52193-52338]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52222-52338]:Block[52222-52338]"
  }, {
    "left" : "outBuf = _textBuffer.finishCurrentSegment();",
    "right" : "outBuf = _textBuffer.finishCurrentSegment();",
    "info" : "ExpressionStatement[52244-52288]:ExpressionStatement[52244-52288]"
  }, {
    "left" : "outPtr = 0;",
    "right" : "outPtr = 0;",
    "info" : "ExpressionStatement[52309-52320]:ExpressionStatement[52309-52320]"
  }, {
    "left" : "outBuf[outPtr++] = c;",
    "right" : "outBuf[outPtr++] = c;",
    "info" : "ExpressionStatement[52355-52376]:ExpressionStatement[52355-52376]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd && !_loadMore())",
    "right" : "if (_inputPtr >= _inputEnd && !_loadMore())",
    "info" : "IfStatement[52393-52524]:IfStatement[52393-52524]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52437-52524]:Block[52437-52524]"
  }, {
    "left" : "eof = true;",
    "right" : "eof = true;",
    "info" : "ExpressionStatement[52459-52470]:ExpressionStatement[52459-52470]"
  }, {
    "left" : "break exp_loop;",
    "right" : "break exp_loop;",
    "info" : "BreakStatement[52491-52506]:BreakStatement[52491-52506]"
  }, {
    "left" : "c = _inputBuffer[_inputPtr++];",
    "right" : "c = _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[52541-52571]:ExpressionStatement[52541-52571]"
  }, {
    "left" : "if (expLen == 0)",
    "right" : "if (expLen == 0)",
    "info" : "IfStatement[52663-52788]:IfStatement[52663-52788]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52680-52788]:Block[52680-52788]"
  }, {
    "left" : "reportUnexpectedNumberChar(c, \"Exponent indicator not followed by a digit\");",
    "right" : "reportUnexpectedNumberChar(c, \"Exponent indicator not followed by a digit\");",
    "info" : "ExpressionStatement[52698-52774]:ExpressionStatement[52698-52774]"
  }, {
    "left" : "if (!eof)",
    "right" : "if (!eof)",
    "info" : "IfStatement[52884-53025]:IfStatement[52884-53025]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52894-53025]:Block[52894-53025]"
  }, {
    "left" : "--_inputPtr;",
    "right" : "--_inputPtr;",
    "info" : "ExpressionStatement[52908-52920]:ExpressionStatement[52908-52920]"
  }, {
    "left" : "if (_parsingContext.inRoot())",
    "right" : "if (_parsingContext.inRoot())",
    "info" : "IfStatement[52933-53015]:IfStatement[52933-53015]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52963-53015]:Block[52963-53015]"
  }, {
    "left" : "_verifyRootSpace(c);",
    "right" : "_verifyRootSpace(c);",
    "info" : "ExpressionStatement[52981-53001]:ExpressionStatement[52981-53001]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[53034-53071]:ExpressionStatement[53034-53071]"
  }, {
    "left" : "return reset(neg, intLen, fractLen, expLen);",
    "right" : "return reset(neg, intLen, fractLen, expLen);",
    "info" : "ReturnStatement[53113-53157]:ReturnStatement[53113-53157]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[53290-53297]:Modifier[53290-53297]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[53298-53303]:Modifier[53298-53303]"
  }, {
    "left" : "char",
    "right" : "char",
    "info" : "PrimitiveType[53304-53308]:PrimitiveType[53304-53308]"
  }, {
    "left" : "_verifyNoLeadingZeroes",
    "right" : "_verifyNoLeadingZeroes",
    "info" : "SimpleName[53309-53331]:SimpleName[53309-53331]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[53341-53352]:SimpleType[53341-53352]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53357-53735]:Block[53357-53735]"
  }, {
    "left" : "if (_inputPtr < _inputEnd)",
    "right" : "if (_inputPtr < _inputEnd)",
    "info" : "IfStatement[53395-53655]:IfStatement[53395-53655]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53422-53655]:Block[53422-53655]"
  }, {
    "left" : "char ch = _inputBuffer[_inputPtr];",
    "right" : "char ch = _inputBuffer[_inputPtr];",
    "info" : "VariableDeclarationStatement[53436-53470]:VariableDeclarationStatement[53436-53470]"
  }, {
    "left" : "if (ch < '0' || ch > '9')",
    "right" : "if (ch < '0' || ch > '9')",
    "info" : "IfStatement[53576-53645]:IfStatement[53576-53645]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53602-53645]:Block[53602-53645]"
  }, {
    "left" : "return '0';",
    "right" : "return '0';",
    "info" : "ReturnStatement[53620-53631]:ReturnStatement[53620-53631]"
  }, {
    "left" : "return _verifyNLZ2();",
    "right" : "return _verifyNLZ2();",
    "info" : "ReturnStatement[53708-53729]:ReturnStatement[53708-53729]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[53741-53748]:Modifier[53741-53748]"
  }, {
    "left" : "char",
    "right" : "char",
    "info" : "PrimitiveType[53749-53753]:PrimitiveType[53749-53753]"
  }, {
    "left" : "_verifyNLZ2",
    "right" : "_verifyNLZ2",
    "info" : "SimpleName[53754-53765]:SimpleName[53754-53765]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[53775-53786]:SimpleType[53775-53786]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53791-54773]:Block[53791-54773]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd && !_loadMore())",
    "right" : "if (_inputPtr >= _inputEnd && !_loadMore())",
    "info" : "IfStatement[53801-53880]:IfStatement[53801-53880]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53845-53880]:Block[53845-53880]"
  }, {
    "left" : "return '0';",
    "right" : "return '0';",
    "info" : "ReturnStatement[53859-53870]:ReturnStatement[53859-53870]"
  }, {
    "left" : "char ch = _inputBuffer[_inputPtr];",
    "right" : "char ch = _inputBuffer[_inputPtr];",
    "info" : "VariableDeclarationStatement[53889-53923]:VariableDeclarationStatement[53889-53923]"
  }, {
    "left" : "if (ch < '0' || ch > '9')",
    "right" : "if (ch < '0' || ch > '9')",
    "info" : "IfStatement[53932-53993]:IfStatement[53932-53993]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53958-53993]:Block[53958-53993]"
  }, {
    "left" : "return '0';",
    "right" : "return '0';",
    "info" : "ReturnStatement[53972-53983]:ReturnStatement[53972-53983]"
  }, {
    "left" : "if (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS))",
    "right" : "if (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS))",
    "info" : "IfStatement[54002-54129]:IfStatement[54002-54129]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54055-54129]:Block[54055-54129]"
  }, {
    "left" : "reportInvalidNumber(\"Leading zeroes not allowed\");",
    "right" : "reportInvalidNumber(\"Leading zeroes not allowed\");",
    "info" : "ExpressionStatement[54069-54119]:ExpressionStatement[54069-54119]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[54248-54260]:ExpressionStatement[54248-54260]"
  }, {
    "left" : "if (ch == INT_0)",
    "right" : "if (ch == INT_0)",
    "info" : "IfStatement[54299-54748]:IfStatement[54299-54748]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54316-54748]:Block[54316-54748]"
  }, {
    "left" : "while (_inputPtr < _inputEnd || _loadMore())",
    "right" : "while (_inputPtr < _inputEnd || _loadMore())",
    "info" : "WhileStatement[54330-54738]:WhileStatement[54330-54738]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54375-54738]:Block[54375-54738]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr];",
    "right" : "ch = _inputBuffer[_inputPtr];",
    "info" : "ExpressionStatement[54393-54422]:ExpressionStatement[54393-54422]"
  }, {
    "left" : "if (ch < '0' || ch > '9')",
    "right" : "if (ch < '0' || ch > '9')",
    "info" : "IfStatement[54439-54559]:IfStatement[54439-54559]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54465-54559]:Block[54465-54559]"
  }, {
    "left" : "return '0';",
    "right" : "return '0';",
    "info" : "ReturnStatement[54530-54541]:ReturnStatement[54530-54541]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[54576-54588]:ExpressionStatement[54576-54588]"
  }, {
    "left" : "if (ch != '0')",
    "right" : "if (ch != '0')",
    "info" : "IfStatement[54627-54724]:IfStatement[54627-54724]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54642-54724]:Block[54642-54724]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[54700-54706]:BreakStatement[54700-54706]"
  }, {
    "left" : "return ch;",
    "right" : "return ch;",
    "info" : "ReturnStatement[54757-54767]:ReturnStatement[54757-54767]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[54899-54908]:Modifier[54899-54908]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[54909-54918]:SimpleType[54909-54918]"
  }, {
    "left" : "_handleInvalidNumberStart",
    "right" : "_handleInvalidNumberStart",
    "info" : "SimpleName[54919-54944]:SimpleName[54919-54944]"
  }, {
    "left" : "int ch",
    "right" : "int ch",
    "info" : "SingleVariableDeclaration[54945-54951]:SingleVariableDeclaration[54945-54951]"
  }, {
    "left" : "boolean negative",
    "right" : "boolean negative",
    "info" : "SingleVariableDeclaration[54953-54969]:SingleVariableDeclaration[54953-54969]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[54978-54989]:SimpleType[54978-54989]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54994-56322]:Block[54994-56322]"
  }, {
    "left" : "if (ch == 'I')",
    "right" : "if (ch == 'I')",
    "info" : "IfStatement[55004-56185]:IfStatement[55004-56185]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55019-56185]:Block[55019-56185]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[55033-55204]:IfStatement[55033-55204]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55061-55204]:Block[55061-55204]"
  }, {
    "left" : "if (!_loadMore())",
    "right" : "if (!_loadMore())",
    "info" : "IfStatement[55079-55190]:IfStatement[55079-55190]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55097-55190]:Block[55097-55190]"
  }, {
    "left" : "_reportInvalidEOFInValue(JsonToken.VALUE_NUMBER_INT);",
    "right" : "_reportInvalidEOFInValue(JsonToken.VALUE_NUMBER_INT);",
    "info" : "ExpressionStatement[55119-55172]:ExpressionStatement[55119-55172]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr++];",
    "right" : "ch = _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[55217-55248]:ExpressionStatement[55217-55248]"
  }, {
    "left" : "if (ch == 'N')",
    "right" : "if (ch == 'N')",
    "info" : "IfStatement[55261-56175]:IfStatement[55261-56175]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55276-55710]:Block[55276-55710]"
  }, {
    "left" : "String match = negative ? \"-INF\" :\"+INF\";",
    "right" : "String match = negative ? \"-INF\" :\"+INF\";",
    "info" : "VariableDeclarationStatement[55294-55335]:VariableDeclarationStatement[55294-55335]"
  }, {
    "left" : "_matchToken(match, 3);",
    "right" : "_matchToken(match, 3);",
    "info" : "ExpressionStatement[55352-55374]:ExpressionStatement[55352-55374]"
  }, {
    "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
    "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
    "info" : "IfStatement[55391-55570]:IfStatement[55391-55570]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55441-55570]:Block[55441-55570]"
  }, {
    "left" : "return resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);",
    "right" : "return resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);",
    "info" : "ReturnStatement[55463-55552]:ReturnStatement[55463-55552]"
  }, {
    "left" : "_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
    "right" : "_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
    "info" : "ExpressionStatement[55587-55696]:ExpressionStatement[55587-55696]"
  }, {
    "left" : "if (ch == 'n')",
    "right" : "if (ch == 'n')",
    "info" : "IfStatement[55716-56175]:IfStatement[55716-56175]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55731-56175]:Block[55731-56175]"
  }, {
    "left" : "String match = negative ? \"-Infinity\" :\"+Infinity\";",
    "right" : "String match = negative ? \"-Infinity\" :\"+Infinity\";",
    "info" : "VariableDeclarationStatement[55749-55800]:VariableDeclarationStatement[55749-55800]"
  }, {
    "left" : "_matchToken(match, 3);",
    "right" : "_matchToken(match, 3);",
    "info" : "ExpressionStatement[55817-55839]:ExpressionStatement[55817-55839]"
  }, {
    "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
    "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
    "info" : "IfStatement[55856-56035]:IfStatement[55856-56035]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55906-56035]:Block[55906-56035]"
  }, {
    "left" : "return resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);",
    "right" : "return resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);",
    "info" : "ReturnStatement[55928-56017]:ReturnStatement[55928-56017]"
  }, {
    "left" : "_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
    "right" : "_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
    "info" : "ExpressionStatement[56052-56161]:ExpressionStatement[56052-56161]"
  }, {
    "left" : "reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");",
    "right" : "reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");",
    "info" : "ExpressionStatement[56194-56295]:ExpressionStatement[56194-56295]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[56304-56316]:ReturnStatement[56304-56316]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[56573-56580]:Modifier[56573-56580]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[56581-56586]:Modifier[56581-56586]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[56587-56591]:PrimitiveType[56587-56591]"
  }, {
    "left" : "_verifyRootSpace",
    "right" : "_verifyRootSpace",
    "info" : "SimpleName[56592-56608]:SimpleName[56592-56608]"
  }, {
    "left" : "int ch",
    "right" : "int ch",
    "info" : "SingleVariableDeclaration[56609-56615]:SingleVariableDeclaration[56609-56615]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[56624-56635]:SimpleType[56624-56635]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56640-57025]:Block[56640-57025]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[56710-56722]:ExpressionStatement[56710-56722]"
  }, {
    "left" : "switch (ch) {\n        case ' ':\n        case '\\t':\n            return;\n        case '\\r':\n            _skipCR();\n            return;\n        case '\\n':\n            ++_currInputRow;\n            _currInputRowStart = _inputPtr;\n            return;\n        }",
    "right" : "switch (ch) {\n        case ' ':\n        case '\\t':\n            return;\n        case '\\r':\n            _skipCR();\n            return;\n        case '\\n':\n            ++_currInputRow;\n            _currInputRowStart = _inputPtr;\n            return;\n        }",
    "info" : "SwitchStatement[56731-56985]:SwitchStatement[56731-56985]"
  }, {
    "left" : "case ' ':",
    "right" : "case ' ':",
    "info" : "SwitchCase[56753-56762]:SwitchCase[56753-56762]"
  }, {
    "left" : "case '\\t':",
    "right" : "case '\\t':",
    "info" : "SwitchCase[56771-56781]:SwitchCase[56771-56781]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[56794-56801]:ReturnStatement[56794-56801]"
  }, {
    "left" : "case '\\r':",
    "right" : "case '\\r':",
    "info" : "SwitchCase[56810-56820]:SwitchCase[56810-56820]"
  }, {
    "left" : "_skipCR();",
    "right" : "_skipCR();",
    "info" : "ExpressionStatement[56833-56843]:ExpressionStatement[56833-56843]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[56856-56863]:ReturnStatement[56856-56863]"
  }, {
    "left" : "case '\\n':",
    "right" : "case '\\n':",
    "info" : "SwitchCase[56872-56882]:SwitchCase[56872-56882]"
  }, {
    "left" : "++_currInputRow;",
    "right" : "++_currInputRow;",
    "info" : "ExpressionStatement[56895-56911]:ExpressionStatement[56895-56911]"
  }, {
    "left" : "_currInputRowStart = _inputPtr;",
    "right" : "_currInputRowStart = _inputPtr;",
    "info" : "ExpressionStatement[56924-56955]:ExpressionStatement[56924-56955]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[56968-56975]:ReturnStatement[56968-56975]"
  }, {
    "left" : "_reportMissingRootWS(ch);",
    "right" : "_reportMissingRootWS(ch);",
    "info" : "ExpressionStatement[56994-57019]:ExpressionStatement[56994-57019]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[57218-57227]:Modifier[57218-57227]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[57228-57233]:Modifier[57228-57233]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[57234-57240]:SimpleType[57234-57240]"
  }, {
    "left" : "_parseName",
    "right" : "_parseName",
    "info" : "SimpleName[57241-57251]:SimpleName[57241-57251]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[57261-57272]:SimpleType[57261-57272]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57277-58155]:Block[57277-58155]"
  }, {
    "left" : "int ptr = _inputPtr;",
    "right" : "int ptr = _inputPtr;",
    "info" : "VariableDeclarationStatement[57445-57465]:VariableDeclarationStatement[57445-57465]"
  }, {
    "left" : "int hash = _hashSeed;",
    "right" : "int hash = _hashSeed;",
    "info" : "VariableDeclarationStatement[57474-57495]:VariableDeclarationStatement[57474-57495]"
  }, {
    "left" : "final int[] codes = _icLatin1;",
    "right" : "final int[] codes = _icLatin1;",
    "info" : "VariableDeclarationStatement[57504-57534]:VariableDeclarationStatement[57504-57534]"
  }, {
    "left" : "while (ptr < _inputEnd)",
    "right" : "while (ptr < _inputEnd)",
    "info" : "WhileStatement[57544-58041]:WhileStatement[57544-58041]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57568-58041]:Block[57568-58041]"
  }, {
    "left" : "int ch = _inputBuffer[ptr];",
    "right" : "int ch = _inputBuffer[ptr];",
    "info" : "VariableDeclarationStatement[57582-57609]:VariableDeclarationStatement[57582-57609]"
  }, {
    "left" : "if (ch < codes.length && codes[ch] != 0)",
    "right" : "if (ch < codes.length && codes[ch] != 0)",
    "info" : "IfStatement[57622-57943]:IfStatement[57622-57943]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57663-57943]:Block[57663-57943]"
  }, {
    "left" : "if (ch == '\"')",
    "right" : "if (ch == '\"')",
    "info" : "IfStatement[57681-57906]:IfStatement[57681-57906]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57696-57906]:Block[57696-57906]"
  }, {
    "left" : "int start = _inputPtr;",
    "right" : "int start = _inputPtr;",
    "info" : "VariableDeclarationStatement[57718-57740]:VariableDeclarationStatement[57718-57740]"
  }, {
    "left" : "_inputPtr = ptr+1;",
    "right" : "_inputPtr = ptr+1;",
    "info" : "ExpressionStatement[57761-57779]:ExpressionStatement[57761-57779]"
  }, {
    "left" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
    "right" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
    "info" : "ReturnStatement[57821-57888]:ReturnStatement[57821-57888]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[57923-57929]:BreakStatement[57923-57929]"
  }, {
    "left" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;",
    "right" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;",
    "info" : "ExpressionStatement[57956-58012]:ExpressionStatement[57956-58012]"
  }, {
    "left" : "++ptr;",
    "right" : "++ptr;",
    "info" : "ExpressionStatement[58025-58031]:ExpressionStatement[58025-58031]"
  }, {
    "left" : "int start = _inputPtr;",
    "right" : "int start = _inputPtr;",
    "info" : "VariableDeclarationStatement[58050-58072]:VariableDeclarationStatement[58050-58072]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[58081-58097]:ExpressionStatement[58081-58097]"
  }, {
    "left" : "return _parseName2(start, hash, INT_QUOTE);",
    "right" : "return _parseName2(start, hash, INT_QUOTE);",
    "info" : "ReturnStatement[58106-58149]:ReturnStatement[58106-58149]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[58161-58168]:Modifier[58161-58168]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[58169-58175]:SimpleType[58169-58175]"
  }, {
    "left" : "_parseName2",
    "right" : "_parseName2",
    "info" : "SimpleName[58176-58187]:SimpleName[58176-58187]"
  }, {
    "left" : "int startPtr",
    "right" : "int startPtr",
    "info" : "SingleVariableDeclaration[58188-58200]:SingleVariableDeclaration[58188-58200]"
  }, {
    "left" : "int hash",
    "right" : "int hash",
    "info" : "SingleVariableDeclaration[58202-58210]:SingleVariableDeclaration[58202-58210]"
  }, {
    "left" : "int endChar",
    "right" : "int endChar",
    "info" : "SingleVariableDeclaration[58212-58223]:SingleVariableDeclaration[58212-58223]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[58232-58243]:SimpleType[58232-58243]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58248-60158]:Block[58248-60158]"
  }, {
    "left" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));",
    "right" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));",
    "info" : "ExpressionStatement[58258-58334]:ExpressionStatement[58258-58334]"
  }, {
    "left" : "char[] outBuf = _textBuffer.getCurrentSegment();",
    "right" : "char[] outBuf = _textBuffer.getCurrentSegment();",
    "info" : "VariableDeclarationStatement[58489-58537]:VariableDeclarationStatement[58489-58537]"
  }, {
    "left" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
    "right" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
    "info" : "VariableDeclarationStatement[58546-58595]:VariableDeclarationStatement[58546-58595]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[58605-59860]:WhileStatement[58605-59860]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58618-59860]:Block[58618-59860]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[58632-58808]:IfStatement[58632-58808]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58660-58808]:Block[58660-58808]"
  }, {
    "left" : "if (!_loadMore())",
    "right" : "if (!_loadMore())",
    "info" : "IfStatement[58678-58794]:IfStatement[58678-58794]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58696-58794]:Block[58696-58794]"
  }, {
    "left" : "_reportInvalidEOF(\" in field name\", JsonToken.FIELD_NAME);",
    "right" : "_reportInvalidEOF(\" in field name\", JsonToken.FIELD_NAME);",
    "info" : "ExpressionStatement[58718-58776]:ExpressionStatement[58718-58776]"
  }, {
    "left" : "char c = _inputBuffer[_inputPtr++];",
    "right" : "char c = _inputBuffer[_inputPtr++];",
    "info" : "VariableDeclarationStatement[58821-58856]:VariableDeclarationStatement[58821-58856]"
  }, {
    "left" : "int i = (int) c;",
    "right" : "int i = (int) c;",
    "info" : "VariableDeclarationStatement[58869-58885]:VariableDeclarationStatement[58869-58885]"
  }, {
    "left" : "if (i <= INT_BACKSLASH)",
    "right" : "if (i <= INT_BACKSLASH)",
    "info" : "IfStatement[58898-59525]:IfStatement[58898-59525]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58922-59525]:Block[58922-59525]"
  }, {
    "left" : "if (i == INT_BACKSLASH)",
    "right" : "if (i == INT_BACKSLASH)",
    "info" : "IfStatement[58940-59511]:IfStatement[58940-59511]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58964-59256]:Block[58964-59256]"
  }, {
    "left" : "c = _decodeEscaped();",
    "right" : "c = _decodeEscaped();",
    "info" : "ExpressionStatement[59217-59238]:ExpressionStatement[59217-59238]"
  }, {
    "left" : "if (i <= endChar)",
    "right" : "if (i <= endChar)",
    "info" : "IfStatement[59262-59511]:IfStatement[59262-59511]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59280-59511]:Block[59280-59511]"
  }, {
    "left" : "if (i == endChar)",
    "right" : "if (i == endChar)",
    "info" : "IfStatement[59302-59374]:IfStatement[59302-59374]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59320-59374]:Block[59320-59374]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[59346-59352]:BreakStatement[59346-59352]"
  }, {
    "left" : "if (i < INT_SPACE)",
    "right" : "if (i < INT_SPACE)",
    "info" : "IfStatement[59395-59493]:IfStatement[59395-59493]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59414-59493]:Block[59414-59493]"
  }, {
    "left" : "_throwUnquotedSpace(i, \"name\");",
    "right" : "_throwUnquotedSpace(i, \"name\");",
    "info" : "ExpressionStatement[59440-59471]:ExpressionStatement[59440-59471]"
  }, {
    "left" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + c;",
    "right" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + c;",
    "info" : "ExpressionStatement[59538-59593]:ExpressionStatement[59538-59593]"
  }, {
    "left" : "outBuf[outPtr++] = c;",
    "right" : "outBuf[outPtr++] = c;",
    "info" : "ExpressionStatement[59651-59672]:ExpressionStatement[59651-59672]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[59717-59850]:IfStatement[59717-59850]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59746-59850]:Block[59746-59850]"
  }, {
    "left" : "outBuf = _textBuffer.finishCurrentSegment();",
    "right" : "outBuf = _textBuffer.finishCurrentSegment();",
    "info" : "ExpressionStatement[59764-59808]:ExpressionStatement[59764-59808]"
  }, {
    "left" : "outPtr = 0;",
    "right" : "outPtr = 0;",
    "info" : "ExpressionStatement[59825-59836]:ExpressionStatement[59825-59836]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[59869-59906]:ExpressionStatement[59869-59906]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59915-60152]:Block[59915-60152]"
  }, {
    "left" : "TextBuffer tb = _textBuffer;",
    "right" : "TextBuffer tb = _textBuffer;",
    "info" : "VariableDeclarationStatement[59929-59957]:VariableDeclarationStatement[59929-59957]"
  }, {
    "left" : "char[] buf = tb.getTextBuffer();",
    "right" : "char[] buf = tb.getTextBuffer();",
    "info" : "VariableDeclarationStatement[59970-60002]:VariableDeclarationStatement[59970-60002]"
  }, {
    "left" : "int start = tb.getTextOffset();",
    "right" : "int start = tb.getTextOffset();",
    "info" : "VariableDeclarationStatement[60015-60046]:VariableDeclarationStatement[60015-60046]"
  }, {
    "left" : "int len = tb.size();",
    "right" : "int len = tb.size();",
    "info" : "VariableDeclarationStatement[60059-60079]:VariableDeclarationStatement[60059-60079]"
  }, {
    "left" : "return _symbols.findSymbol(buf, start, len, hash);",
    "right" : "return _symbols.findSymbol(buf, start, len, hash);",
    "info" : "ReturnStatement[60092-60142]:ReturnStatement[60092-60142]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[60414-60423]:Modifier[60414-60423]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[60424-60430]:SimpleType[60424-60430]"
  }, {
    "left" : "_handleOddName",
    "right" : "_handleOddName",
    "info" : "SimpleName[60431-60445]:SimpleName[60431-60445]"
  }, {
    "left" : "int i",
    "right" : "int i",
    "info" : "SingleVariableDeclaration[60446-60451]:SingleVariableDeclaration[60446-60451]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[60460-60471]:SimpleType[60460-60471]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60476-62512]:Block[60476-62512]"
  }, {
    "left" : "if (i == '\\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
    "right" : "if (i == '\\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
    "info" : "IfStatement[60532-60637]:IfStatement[60532-60637]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60589-60637]:Block[60589-60637]"
  }, {
    "left" : "return _parseAposName();",
    "right" : "return _parseAposName();",
    "info" : "ReturnStatement[60603-60627]:ReturnStatement[60603-60627]"
  }, {
    "left" : "if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES))",
    "right" : "if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES))",
    "info" : "IfStatement[60712-60863]:IfStatement[60712-60863]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60764-60863]:Block[60764-60863]"
  }, {
    "left" : "_reportUnexpectedChar(i, \"was expecting double-quote to start field name\");",
    "right" : "_reportUnexpectedChar(i, \"was expecting double-quote to start field name\");",
    "info" : "ExpressionStatement[60778-60853]:ExpressionStatement[60778-60853]"
  }, {
    "left" : "final int[] codes = CharTypes.getInputCodeLatin1JsNames();",
    "right" : "final int[] codes = CharTypes.getInputCodeLatin1JsNames();",
    "info" : "VariableDeclarationStatement[60872-60930]:VariableDeclarationStatement[60872-60930]"
  }, {
    "left" : "final int maxCode = codes.length;",
    "right" : "final int maxCode = codes.length;",
    "info" : "VariableDeclarationStatement[60939-60972]:VariableDeclarationStatement[60939-60972]"
  }, {
    "left" : "boolean firstOk;",
    "right" : "boolean firstOk;",
    "info" : "VariableDeclarationStatement[61055-61071]:VariableDeclarationStatement[61055-61071]"
  }, {
    "left" : "if (i < maxCode)",
    "right" : "if (i < maxCode)",
    "info" : "IfStatement[61081-61270]:IfStatement[61081-61270]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61098-61189]:Block[61098-61189]"
  }, {
    "left" : "firstOk = (codes[i] == 0);",
    "right" : "firstOk = (codes[i] == 0);",
    "info" : "ExpressionStatement[61153-61179]:ExpressionStatement[61153-61179]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61195-61270]:Block[61195-61270]"
  }, {
    "left" : "firstOk = Character.isJavaIdentifierPart((char) i);",
    "right" : "firstOk = Character.isJavaIdentifierPart((char) i);",
    "info" : "ExpressionStatement[61209-61260]:ExpressionStatement[61209-61260]"
  }, {
    "left" : "if (!firstOk)",
    "right" : "if (!firstOk)",
    "info" : "IfStatement[61279-61456]:IfStatement[61279-61456]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61293-61456]:Block[61293-61456]"
  }, {
    "left" : "_reportUnexpectedChar(i, \"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name\");",
    "right" : "_reportUnexpectedChar(i, \"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name\");",
    "info" : "ExpressionStatement[61307-61446]:ExpressionStatement[61307-61446]"
  }, {
    "left" : "int ptr = _inputPtr;",
    "right" : "int ptr = _inputPtr;",
    "info" : "VariableDeclarationStatement[61465-61485]:VariableDeclarationStatement[61465-61485]"
  }, {
    "left" : "int hash = _hashSeed;",
    "right" : "int hash = _hashSeed;",
    "info" : "VariableDeclarationStatement[61494-61515]:VariableDeclarationStatement[61494-61515]"
  }, {
    "left" : "final int inputLen = _inputEnd;",
    "right" : "final int inputLen = _inputEnd;",
    "info" : "VariableDeclarationStatement[61524-61555]:VariableDeclarationStatement[61524-61555]"
  }, {
    "left" : "if (ptr < inputLen)",
    "right" : "if (ptr < inputLen)",
    "info" : "IfStatement[61565-62396]:IfStatement[61565-62396]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61585-62396]:Block[61585-62396]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[61599-62386]:DoStatement[61599-62386]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61602-62362]:Block[61602-62362]"
  }, {
    "left" : "int ch = _inputBuffer[ptr];",
    "right" : "int ch = _inputBuffer[ptr];",
    "info" : "VariableDeclarationStatement[61620-61647]:VariableDeclarationStatement[61620-61647]"
  }, {
    "left" : "if (ch < maxCode)",
    "right" : "if (ch < maxCode)",
    "info" : "IfStatement[61664-62252]:IfStatement[61664-62252]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61682-61978]:Block[61682-61978]"
  }, {
    "left" : "if (codes[ch] != 0)",
    "right" : "if (codes[ch] != 0)",
    "info" : "IfStatement[61704-61960]:IfStatement[61704-61960]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61724-61960]:Block[61724-61960]"
  }, {
    "left" : "int start = _inputPtr-1;",
    "right" : "int start = _inputPtr-1;",
    "info" : "VariableDeclarationStatement[61750-61774]:VariableDeclarationStatement[61750-61774]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[61830-61846]:ExpressionStatement[61830-61846]"
  }, {
    "left" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
    "right" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
    "info" : "ReturnStatement[61871-61938]:ReturnStatement[61871-61938]"
  }, {
    "left" : "if (!Character.isJavaIdentifierPart((char) ch))",
    "right" : "if (!Character.isJavaIdentifierPart((char) ch))",
    "info" : "IfStatement[61984-62252]:IfStatement[61984-62252]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62032-62252]:Block[62032-62252]"
  }, {
    "left" : "int start = _inputPtr-1;",
    "right" : "int start = _inputPtr-1;",
    "info" : "VariableDeclarationStatement[62054-62078]:VariableDeclarationStatement[62054-62078]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[62130-62146]:ExpressionStatement[62130-62146]"
  }, {
    "left" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
    "right" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
    "info" : "ReturnStatement[62167-62234]:ReturnStatement[62167-62234]"
  }, {
    "left" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;",
    "right" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;",
    "info" : "ExpressionStatement[62269-62325]:ExpressionStatement[62269-62325]"
  }, {
    "left" : "++ptr;",
    "right" : "++ptr;",
    "info" : "ExpressionStatement[62342-62348]:ExpressionStatement[62342-62348]"
  }, {
    "left" : "int start = _inputPtr-1;",
    "right" : "int start = _inputPtr-1;",
    "info" : "VariableDeclarationStatement[62405-62429]:VariableDeclarationStatement[62405-62429]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[62438-62454]:ExpressionStatement[62438-62454]"
  }, {
    "left" : "return _handleOddName2(start, hash, codes);",
    "right" : "return _handleOddName2(start, hash, codes);",
    "info" : "ReturnStatement[62463-62506]:ReturnStatement[62463-62506]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[62518-62527]:Modifier[62518-62527]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[62528-62534]:SimpleType[62528-62534]"
  }, {
    "left" : "_parseAposName",
    "right" : "_parseAposName",
    "info" : "SimpleName[62535-62549]:SimpleName[62535-62549]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[62559-62570]:SimpleType[62559-62570]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62575-63501]:Block[62575-63501]"
  }, {
    "left" : "int ptr = _inputPtr;",
    "right" : "int ptr = _inputPtr;",
    "info" : "VariableDeclarationStatement[62632-62652]:VariableDeclarationStatement[62632-62652]"
  }, {
    "left" : "int hash = _hashSeed;",
    "right" : "int hash = _hashSeed;",
    "info" : "VariableDeclarationStatement[62661-62682]:VariableDeclarationStatement[62661-62682]"
  }, {
    "left" : "final int inputLen = _inputEnd;",
    "right" : "final int inputLen = _inputEnd;",
    "info" : "VariableDeclarationStatement[62691-62722]:VariableDeclarationStatement[62691-62722]"
  }, {
    "left" : "if (ptr < inputLen)",
    "right" : "if (ptr < inputLen)",
    "info" : "IfStatement[62732-63390]:IfStatement[62732-63390]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62752-63390]:Block[62752-63390]"
  }, {
    "left" : "final int[] codes = _icLatin1;",
    "right" : "final int[] codes = _icLatin1;",
    "info" : "VariableDeclarationStatement[62766-62796]:VariableDeclarationStatement[62766-62796]"
  }, {
    "left" : "final int maxCode = codes.length;",
    "right" : "final int maxCode = codes.length;",
    "info" : "VariableDeclarationStatement[62809-62842]:VariableDeclarationStatement[62809-62842]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[62856-63380]:DoStatement[62856-63380]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62859-63356]:Block[62859-63356]"
  }, {
    "left" : "int ch = _inputBuffer[ptr];",
    "right" : "int ch = _inputBuffer[ptr];",
    "info" : "VariableDeclarationStatement[62877-62904]:VariableDeclarationStatement[62877-62904]"
  }, {
    "left" : "if (ch == '\\'')",
    "right" : "if (ch == '\\'')",
    "info" : "IfStatement[62921-63147]:IfStatement[62921-63147]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62937-63147]:Block[62937-63147]"
  }, {
    "left" : "int start = _inputPtr;",
    "right" : "int start = _inputPtr;",
    "info" : "VariableDeclarationStatement[62959-62981]:VariableDeclarationStatement[62959-62981]"
  }, {
    "left" : "_inputPtr = ptr+1;",
    "right" : "_inputPtr = ptr+1;",
    "info" : "ExpressionStatement[63002-63020]:ExpressionStatement[63002-63020]"
  }, {
    "left" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
    "right" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
    "info" : "ReturnStatement[63062-63129]:ReturnStatement[63062-63129]"
  }, {
    "left" : "if (ch < maxCode && codes[ch] != 0)",
    "right" : "if (ch < maxCode && codes[ch] != 0)",
    "info" : "IfStatement[63164-63246]:IfStatement[63164-63246]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63200-63246]:Block[63200-63246]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[63222-63228]:BreakStatement[63222-63228]"
  }, {
    "left" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;",
    "right" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;",
    "info" : "ExpressionStatement[63263-63319]:ExpressionStatement[63263-63319]"
  }, {
    "left" : "++ptr;",
    "right" : "++ptr;",
    "info" : "ExpressionStatement[63336-63342]:ExpressionStatement[63336-63342]"
  }, {
    "left" : "int start = _inputPtr;",
    "right" : "int start = _inputPtr;",
    "info" : "VariableDeclarationStatement[63400-63422]:VariableDeclarationStatement[63400-63422]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[63431-63447]:ExpressionStatement[63431-63447]"
  }, {
    "left" : "return _parseName2(start, hash, '\\'');",
    "right" : "return _parseName2(start, hash, '\\'');",
    "info" : "ReturnStatement[63457-63495]:ReturnStatement[63457-63495]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[63662-63671]:Modifier[63662-63671]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[63672-63681]:SimpleType[63672-63681]"
  }, {
    "left" : "_handleOddValue",
    "right" : "_handleOddValue",
    "info" : "SimpleName[63682-63697]:SimpleName[63682-63697]"
  }, {
    "left" : "int i",
    "right" : "int i",
    "info" : "SingleVariableDeclaration[63698-63703]:SingleVariableDeclaration[63698-63703]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[63712-63723]:SimpleType[63712-63723]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63728-66253]:Block[63728-66253]"
  }, {
    "left" : "switch (i) {\n        case '\\'':\n            /* Allow single quotes? Unlike with regular Strings, we'll eagerly parse\n             * contents; this so that there'sno need to store information on quote char used.\n             * Also, no separation to fast/slow parsing; we'll just do\n             * one regular (~= slowish) parsing, to keep code simple\n             */\n            if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {\n                return _handleApos();\n            }\n            break;\n        case ']':\n            /* 28-Mar-2016: [
core#116]: If Feature.ALLOW_MISSING_VALUES is enabled\n             *   we may allow \"missing values\", that is, encountering a trailing\n             *   comma or closing marker where value would be expected\n             */\n            if (!_parsingContext.inArray()) {\n                break;\n            }\n            // fall through\n        case ',':\n            if (isEnabled(Feature.ALLOW_MISSING_VALUES)) {\n                --_inputPtr;\n                return JsonToken.VALUE_NULL;\n            }\n            break;\n        case 'N':\n            _matchToken(\"NaN\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"NaN\", Double.NaN);\n            }\n            _reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case 'I':\n            _matchToken(\"Infinity\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);\n            }\n            _reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case '+': // note: '-' is taken as number\n            if (_inputPtr >= _inputEnd) {\n                if (!_loadMore()) {\n                    _reportInvalidEOFInValue(JsonToken.VALUE_NUMBER_INT);\n                }\n            }\n            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++], false);\n        }",
    "right" : "switch (i) {\n        case '\\'':\n            /* Allow single quotes? Unlike with regular Strings, we'll eagerly parse\n             * contents; this so that there'sno need to store information on quote char used.\n             * Also, no separation to fast/slow parsing; we'll just do\n             * one regular (~= slowish) parsing, to keep code simple\n             */\n            if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {\n                return _handleApos();\n            }\n            break;\n        case ']':\n            /* 28-Mar-2016: [
core#116]: If Feature.ALLOW_MISSING_VALUES is enabled\n             *   we may allow \"missing values\", that is, encountering a trailing\n             *   comma or closing marker where value would be expected\n             */\n            if (!_parsingContext.inArray()) {\n                break;\n            }\n            // fall through\n        case ',':\n            if (isEnabled(Feature.ALLOW_MISSING_VALUES)) {\n                --_inputPtr;\n                return JsonToken.VALUE_NULL;\n            }\n            break;\n        case 'N':\n            _matchToken(\"NaN\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"NaN\", Double.NaN);\n            }\n            _reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case 'I':\n            _matchToken(\"Infinity\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);\n            }\n            _reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case '+': // note: '-' is taken as number\n            if (_inputPtr >= _inputEnd) {\n                if (!_loadMore()) {\n                    _reportInvalidEOFInValue(JsonToken.VALUE_NUMBER_INT);\n                }\n            }\n            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++], false);\n        }",
    "info" : "SwitchStatement[63815-65867]:SwitchStatement[63815-65867]"
  }, {
    "left" : "case '\\'':",
    "right" : "case '\\'':",
    "info" : "SwitchCase[63836-63846]:SwitchCase[63836-63846]"
  }, {
    "left" : "if (isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
    "right" : "if (isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
    "info" : "IfStatement[64194-64291]:IfStatement[64194-64291]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64238-64291]:Block[64238-64291]"
  }, {
    "left" : "return _handleApos();",
    "right" : "return _handleApos();",
    "info" : "ReturnStatement[64256-64277]:ReturnStatement[64256-64277]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[64304-64310]:BreakStatement[64304-64310]"
  }, {
    "left" : "case ']':",
    "right" : "case ']':",
    "info" : "SwitchCase[64319-64328]:SwitchCase[64319-64328]"
  }, {
    "left" : "if (!_parsingContext.inArray())",
    "right" : "if (!_parsingContext.inArray())",
    "info" : "IfStatement[64592-64662]:IfStatement[64592-64662]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64624-64662]:Block[64624-64662]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[64642-64648]:BreakStatement[64642-64648]"
  }, {
    "left" : "case ',':",
    "right" : "case ',':",
    "info" : "SwitchCase[64699-64708]:SwitchCase[64699-64708]"
  }, {
    "left" : "if (isEnabled(Feature.ALLOW_MISSING_VALUES))",
    "right" : "if (isEnabled(Feature.ALLOW_MISSING_VALUES))",
    "info" : "IfStatement[64721-64855]:IfStatement[64721-64855]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64766-64855]:Block[64766-64855]"
  }, {
    "left" : "--_inputPtr;",
    "right" : "--_inputPtr;",
    "info" : "ExpressionStatement[64784-64796]:ExpressionStatement[64784-64796]"
  }, {
    "left" : "return JsonToken.VALUE_NULL;",
    "right" : "return JsonToken.VALUE_NULL;",
    "info" : "ReturnStatement[64813-64841]:ReturnStatement[64813-64841]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[64868-64874]:BreakStatement[64868-64874]"
  }, {
    "left" : "case 'N':",
    "right" : "case 'N':",
    "info" : "SwitchCase[64883-64892]:SwitchCase[64883-64892]"
  }, {
    "left" : "_matchToken(\"NaN\", 1);",
    "right" : "_matchToken(\"NaN\", 1);",
    "info" : "ExpressionStatement[64905-64927]:ExpressionStatement[64905-64927]"
  }, {
    "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
    "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
    "info" : "IfStatement[64940-65059]:IfStatement[64940-65059]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64990-65059]:Block[64990-65059]"
  }, {
    "left" : "return resetAsNaN(\"NaN\", Double.NaN);",
    "right" : "return resetAsNaN(\"NaN\", Double.NaN);",
    "info" : "ReturnStatement[65008-65045]:ReturnStatement[65008-65045]"
  }, {
    "left" : "_reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
    "right" : "_reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
    "info" : "ExpressionStatement[65072-65175]:ExpressionStatement[65072-65175]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[65188-65194]:BreakStatement[65188-65194]"
  }, {
    "left" : "case 'I':",
    "right" : "case 'I':",
    "info" : "SwitchCase[65203-65212]:SwitchCase[65203-65212]"
  }, {
    "left" : "_matchToken(\"Infinity\", 1);",
    "right" : "_matchToken(\"Infinity\", 1);",
    "info" : "ExpressionStatement[65225-65252]:ExpressionStatement[65225-65252]"
  }, {
    "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
    "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
    "info" : "IfStatement[65265-65403]:IfStatement[65265-65403]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65315-65403]:Block[65315-65403]"
  }, {
    "left" : "return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);",
    "right" : "return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);",
    "info" : "ReturnStatement[65333-65389]:ReturnStatement[65333-65389]"
  }, {
    "left" : "_reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
    "right" : "_reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
    "info" : "ExpressionStatement[65416-65524]:ExpressionStatement[65416-65524]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[65537-65543]:BreakStatement[65537-65543]"
  }, {
    "left" : "case '+':",
    "right" : "case '+':",
    "info" : "SwitchCase[65552-65561]:SwitchCase[65552-65561]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[65606-65777]:IfStatement[65606-65777]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65634-65777]:Block[65634-65777]"
  }, {
    "left" : "if (!_loadMore())",
    "right" : "if (!_loadMore())",
    "info" : "IfStatement[65652-65763]:IfStatement[65652-65763]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65670-65763]:Block[65670-65763]"
  }, {
    "left" : "_reportInvalidEOFInValue(JsonToken.VALUE_NUMBER_INT);",
    "right" : "_reportInvalidEOFInValue(JsonToken.VALUE_NUMBER_INT);",
    "info" : "ExpressionStatement[65692-65745]:ExpressionStatement[65692-65745]"
  }, {
    "left" : "return _handleInvalidNumberStart(_inputBuffer[_inputPtr++], false);",
    "right" : "return _handleInvalidNumberStart(_inputBuffer[_inputPtr++], false);",
    "info" : "ReturnStatement[65790-65857]:ReturnStatement[65790-65857]"
  }, {
    "left" : "if (Character.isJavaIdentifierStart(i))",
    "right" : "if (Character.isJavaIdentifierStart(i))",
    "info" : "IfStatement[65929-66059]:IfStatement[65929-66059]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65969-66059]:Block[65969-66059]"
  }, {
    "left" : "_reportInvalidToken(\"\"+((char) i), \"('true', 'false' or 'null')\");",
    "right" : "_reportInvalidToken(\"\"+((char) i), \"('true', 'false' or 'null')\");",
    "info" : "ExpressionStatement[65983-66049]:ExpressionStatement[65983-66049]"
  }, {
    "left" : "_reportUnexpectedChar(i, \"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\");",
    "right" : "_reportUnexpectedChar(i, \"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\");",
    "info" : "ExpressionStatement[66116-66226]:ExpressionStatement[66116-66226]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[66235-66247]:ReturnStatement[66235-66247]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[66259-66268]:Modifier[66259-66268]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[66269-66278]:SimpleType[66269-66278]"
  }, {
    "left" : "_handleApos",
    "right" : "_handleApos",
    "info" : "SimpleName[66279-66290]:SimpleName[66279-66290]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[66300-66311]:SimpleType[66300-66311]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66316-67775]:Block[66316-67775]"
  }, {
    "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "info" : "VariableDeclarationStatement[66326-66382]:VariableDeclarationStatement[66326-66382]"
  }, {
    "left" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
    "right" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
    "info" : "VariableDeclarationStatement[66391-66440]:VariableDeclarationStatement[66391-66440]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[66450-67684]:WhileStatement[66450-67684]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66463-67684]:Block[66463-67684]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[66477-66717]:IfStatement[66477-66717]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66505-66717]:Block[66505-66717]"
  }, {
    "left" : "if (!_loadMore())",
    "right" : "if (!_loadMore())",
    "info" : "IfStatement[66523-66703]:IfStatement[66523-66703]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66541-66703]:Block[66541-66703]"
  }, {
    "left" : "_reportInvalidEOF(\": was expecting closing quote for a string value\",\n                            JsonToken.VALUE_STRING);",
    "right" : "_reportInvalidEOF(\": was expecting closing quote for a string value\",\n                            JsonToken.VALUE_STRING);",
    "info" : "ExpressionStatement[66563-66685]:ExpressionStatement[66563-66685]"
  }, {
    "left" : "char c = _inputBuffer[_inputPtr++];",
    "right" : "char c = _inputBuffer[_inputPtr++];",
    "info" : "VariableDeclarationStatement[66730-66765]:VariableDeclarationStatement[66730-66765]"
  }, {
    "left" : "int i = (int) c;",
    "right" : "int i = (int) c;",
    "info" : "VariableDeclarationStatement[66778-66794]:VariableDeclarationStatement[66778-66794]"
  }, {
    "left" : "if (i <= '\\\\')",
    "right" : "if (i <= '\\\\')",
    "info" : "IfStatement[66807-67418]:IfStatement[66807-67418]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66822-67418]:Block[66822-67418]"
  }, {
    "left" : "if (i == '\\\\')",
    "right" : "if (i == '\\\\')",
    "info" : "IfStatement[66840-67404]:IfStatement[66840-67404]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66855-67147]:Block[66855-67147]"
  }, {
    "left" : "c = _decodeEscaped();",
    "right" : "c = _decodeEscaped();",
    "info" : "ExpressionStatement[67108-67129]:ExpressionStatement[67108-67129]"
  }, {
    "left" : "if (i <= '\\'')",
    "right" : "if (i <= '\\'')",
    "info" : "IfStatement[67153-67404]:IfStatement[67153-67404]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67168-67404]:Block[67168-67404]"
  }, {
    "left" : "if (i == '\\'')",
    "right" : "if (i == '\\'')",
    "info" : "IfStatement[67190-67259]:IfStatement[67190-67259]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67205-67259]:Block[67205-67259]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[67231-67237]:BreakStatement[67231-67237]"
  }, {
    "left" : "if (i < INT_SPACE)",
    "right" : "if (i < INT_SPACE)",
    "info" : "IfStatement[67280-67386]:IfStatement[67280-67386]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67299-67386]:Block[67299-67386]"
  }, {
    "left" : "_throwUnquotedSpace(i, \"string value\");",
    "right" : "_throwUnquotedSpace(i, \"string value\");",
    "info" : "ExpressionStatement[67325-67364]:ExpressionStatement[67325-67364]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[67462-67595]:IfStatement[67462-67595]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67491-67595]:Block[67491-67595]"
  }, {
    "left" : "outBuf = _textBuffer.finishCurrentSegment();",
    "right" : "outBuf = _textBuffer.finishCurrentSegment();",
    "info" : "ExpressionStatement[67509-67553]:ExpressionStatement[67509-67553]"
  }, {
    "left" : "outPtr = 0;",
    "right" : "outPtr = 0;",
    "info" : "ExpressionStatement[67570-67581]:ExpressionStatement[67570-67581]"
  }, {
    "left" : "outBuf[outPtr++] = c;",
    "right" : "outBuf[outPtr++] = c;",
    "info" : "ExpressionStatement[67653-67674]:ExpressionStatement[67653-67674]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[67693-67730]:ExpressionStatement[67693-67730]"
  }, {
    "left" : "return JsonToken.VALUE_STRING;",
    "right" : "return JsonToken.VALUE_STRING;",
    "info" : "ReturnStatement[67739-67769]:ReturnStatement[67739-67769]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[67781-67788]:Modifier[67781-67788]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[67789-67795]:SimpleType[67789-67795]"
  }, {
    "left" : "_handleOddName2",
    "right" : "_handleOddName2",
    "info" : "SimpleName[67796-67811]:SimpleName[67796-67811]"
  }, {
    "left" : "int startPtr",
    "right" : "int startPtr",
    "info" : "SingleVariableDeclaration[67812-67824]:SingleVariableDeclaration[67812-67824]"
  }, {
    "left" : "int hash",
    "right" : "int hash",
    "info" : "SingleVariableDeclaration[67826-67834]:SingleVariableDeclaration[67826-67834]"
  }, {
    "left" : "int[] codes",
    "right" : "int[] codes",
    "info" : "SingleVariableDeclaration[67836-67847]:SingleVariableDeclaration[67836-67847]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[67856-67867]:SimpleType[67856-67867]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67872-69267]:Block[67872-69266]"
  }, {
    "left" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));",
    "right" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));",
    "info" : "ExpressionStatement[67882-67958]:ExpressionStatement[67882-67958]"
  }, {
    "left" : "char[] outBuf = _textBuffer.getCurrentSegment();",
    "right" : "char[] outBuf = _textBuffer.getCurrentSegment();",
    "info" : "VariableDeclarationStatement[67967-68015]:VariableDeclarationStatement[67967-68015]"
  }, {
    "left" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
    "right" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
    "info" : "VariableDeclarationStatement[68024-68073]:VariableDeclarationStatement[68024-68073]"
  }, {
    "left" : "final int maxCode = codes.length;",
    "right" : "final int maxCode = codes.length;",
    "info" : "VariableDeclarationStatement[68082-68115]:VariableDeclarationStatement[68082-68115]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[68125-68968]:WhileStatement[68125-68967]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68138-68968]:Block[68138-68967]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[68152-68321]:IfStatement[68152-68321]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68180-68321]:Block[68180-68321]"
  }, {
    "left" : "if (!_loadMore())",
    "right" : "if (!_loadMore())",
    "info" : "IfStatement[68198-68307]:IfStatement[68198-68307]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68216-68307]:Block[68216-68307]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[68283-68289]:BreakStatement[68283-68289]"
  }, {
    "left" : "char c = _inputBuffer[_inputPtr];",
    "right" : "char c = _inputBuffer[_inputPtr];",
    "info" : "VariableDeclarationStatement[68334-68367]:VariableDeclarationStatement[68334-68367]"
  }, {
    "left" : "int i = (int) c;",
    "right" : "int i = (int) c;",
    "info" : "VariableDeclarationStatement[68380-68396]:VariableDeclarationStatement[68380-68396]"
  }, {
    "left" : "if (i <= maxCode)",
    "right" : "if (i < maxCode)",
    "info" : "IfStatement[68409-68608]:IfStatement[68409-68607]"
  }, {
    "left" : "<=",
    "right" : "<",
    "info" : "INFIX_EXPRESSION_OPERATOR[68415-68417]:INFIX_EXPRESSION_OPERATOR[68415-68416]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68427-68524]:Block[68426-68523]"
  }, {
    "left" : "if (codes[i] != 0)",
    "right" : "if (codes[i] != 0)",
    "info" : "IfStatement[68445-68510]:IfStatement[68444-68509]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68464-68510]:Block[68463-68509]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[68486-68492]:BreakStatement[68485-68491]"
  }, {
    "left" : "if (!Character.isJavaIdentifierPart(c))",
    "right" : "if (!Character.isJavaIdentifierPart(c))",
    "info" : "IfStatement[68530-68608]:IfStatement[68529-68607]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68570-68608]:Block[68569-68607]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[68588-68594]:BreakStatement[68587-68593]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[68621-68633]:ExpressionStatement[68620-68632]"
  }, {
    "left" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;",
    "right" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;",
    "info" : "ExpressionStatement[68646-68701]:ExpressionStatement[68645-68700]"
  }, {
    "left" : "outBuf[outPtr++] = c;",
    "right" : "outBuf[outPtr++] = c;",
    "info" : "ExpressionStatement[68759-68780]:ExpressionStatement[68758-68779]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[68825-68958]:IfStatement[68824-68957]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68854-68958]:Block[68853-68957]"
  }, {
    "left" : "outBuf = _textBuffer.finishCurrentSegment();",
    "right" : "outBuf = _textBuffer.finishCurrentSegment();",
    "info" : "ExpressionStatement[68872-68916]:ExpressionStatement[68871-68915]"
  }, {
    "left" : "outPtr = 0;",
    "right" : "outPtr = 0;",
    "info" : "ExpressionStatement[68933-68944]:ExpressionStatement[68932-68943]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[68977-69014]:ExpressionStatement[68976-69013]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69023-69261]:Block[69022-69260]"
  }, {
    "left" : "TextBuffer tb = _textBuffer;",
    "right" : "TextBuffer tb = _textBuffer;",
    "info" : "VariableDeclarationStatement[69037-69065]:VariableDeclarationStatement[69036-69064]"
  }, {
    "left" : "char[] buf = tb.getTextBuffer();",
    "right" : "char[] buf = tb.getTextBuffer();",
    "info" : "VariableDeclarationStatement[69078-69110]:VariableDeclarationStatement[69077-69109]"
  }, {
    "left" : "int start = tb.getTextOffset();",
    "right" : "int start = tb.getTextOffset();",
    "info" : "VariableDeclarationStatement[69123-69154]:VariableDeclarationStatement[69122-69153]"
  }, {
    "left" : "int len = tb.size();",
    "right" : "int len = tb.size();",
    "info" : "VariableDeclarationStatement[69167-69187]:VariableDeclarationStatement[69166-69186]"
  }, {
    "left" : "return _symbols.findSymbol(buf, start, len, hash);",
    "right" : "return _symbols.findSymbol(buf, start, len, hash);",
    "info" : "ReturnStatement[69201-69251]:ReturnStatement[69200-69250]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[69273-69282]:MarkerAnnotation[69272-69281]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[69287-69296]:Modifier[69286-69295]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[69297-69302]:Modifier[69296-69301]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[69303-69307]:PrimitiveType[69302-69306]"
  }, {
    "left" : "_finishString",
    "right" : "_finishString",
    "info" : "SimpleName[69308-69321]:SimpleName[69307-69320]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[69331-69342]:SimpleType[69330-69341]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69347-70439]:Block[69346-70438]"
  }, {
    "left" : "int ptr = _inputPtr;",
    "right" : "int ptr = _inputPtr;",
    "info" : "VariableDeclarationStatement[69544-69564]:VariableDeclarationStatement[69543-69563]"
  }, {
    "left" : "final int inputLen = _inputEnd;",
    "right" : "final int inputLen = _inputEnd;",
    "info" : "VariableDeclarationStatement[69573-69604]:VariableDeclarationStatement[69572-69603]"
  }, {
    "left" : "if (ptr < inputLen)",
    "right" : "if (ptr < inputLen)",
    "info" : "IfStatement[69614-70231]:IfStatement[69613-70230]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69634-70231]:Block[69633-70230]"
  }, {
    "left" : "final int[] codes = _icLatin1;",
    "right" : "final int[] codes = _icLatin1;",
    "info" : "VariableDeclarationStatement[69648-69678]:VariableDeclarationStatement[69647-69677]"
  }, {
    "left" : "final int maxCode = codes.length;",
    "right" : "final int maxCode = codes.length;",
    "info" : "VariableDeclarationStatement[69691-69724]:VariableDeclarationStatement[69690-69723]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[69738-70221]:DoStatement[69737-70220]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69741-70197]:Block[69740-70196]"
  }, {
    "left" : "int ch = _inputBuffer[ptr];",
    "right" : "int ch = _inputBuffer[ptr];",
    "info" : "VariableDeclarationStatement[69759-69786]:VariableDeclarationStatement[69758-69785]"
  }, {
    "left" : "if (ch < maxCode && codes[ch] != 0)",
    "right" : "if (ch < maxCode && codes[ch] != 0)",
    "info" : "IfStatement[69803-70160]:IfStatement[69802-70159]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69839-70160]:Block[69838-70159]"
  }, {
    "left" : "if (ch == '\"')",
    "right" : "if (ch == '\"')",
    "info" : "IfStatement[69861-70115]:IfStatement[69860-70114]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69876-70115]:Block[69875-70114]"
  }, {
    "left" : "_textBuffer.resetWithShared(_inputBuffer, _inputPtr, (ptr-_inputPtr));",
    "right" : "_textBuffer.resetWithShared(_inputBuffer, _inputPtr, (ptr-_inputPtr));",
    "info" : "ExpressionStatement[69902-69972]:ExpressionStatement[69901-69971]"
  }, {
    "left" : "_inputPtr = ptr+1;",
    "right" : "_inputPtr = ptr+1;",
    "info" : "ExpressionStatement[69997-70015]:ExpressionStatement[69996-70014]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[70086-70093]:ReturnStatement[70085-70092]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[70136-70142]:BreakStatement[70135-70141]"
  }, {
    "left" : "++ptr;",
    "right" : "++ptr;",
    "info" : "ExpressionStatement[70177-70183]:ExpressionStatement[70176-70182]"
  }, {
    "left" : "_textBuffer.resetWithCopy(_inputBuffer, _inputPtr, (ptr-_inputPtr));",
    "right" : "_textBuffer.resetWithCopy(_inputBuffer, _inputPtr, (ptr-_inputPtr));",
    "info" : "ExpressionStatement[70314-70382]:ExpressionStatement[70313-70381]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[70391-70407]:ExpressionStatement[70390-70406]"
  }, {
    "left" : "_finishString2();",
    "right" : "_finishString2();",
    "info" : "ExpressionStatement[70416-70433]:ExpressionStatement[70415-70432]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[70445-70454]:Modifier[70444-70453]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[70455-70459]:PrimitiveType[70454-70458]"
  }, {
    "left" : "_finishString2",
    "right" : "_finishString2",
    "info" : "SimpleName[70460-70474]:SimpleName[70459-70473]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[70484-70495]:SimpleType[70483-70494]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70500-71958]:Block[70499-71957]"
  }, {
    "left" : "char[] outBuf = _textBuffer.getCurrentSegment();",
    "right" : "char[] outBuf = _textBuffer.getCurrentSegment();",
    "info" : "VariableDeclarationStatement[70510-70558]:VariableDeclarationStatement[70509-70557]"
  }, {
    "left" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
    "right" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
    "info" : "VariableDeclarationStatement[70567-70616]:VariableDeclarationStatement[70566-70615]"
  }, {
    "left" : "final int[] codes = _icLatin1;",
    "right" : "final int[] codes = _icLatin1;",
    "info" : "VariableDeclarationStatement[70625-70655]:VariableDeclarationStatement[70624-70654]"
  }, {
    "left" : "final int maxCode = codes.length;",
    "right" : "final int maxCode = codes.length;",
    "info" : "VariableDeclarationStatement[70664-70697]:VariableDeclarationStatement[70663-70696]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[70707-71906]:WhileStatement[70706-71905]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70720-71906]:Block[70719-71905]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[70734-70974]:IfStatement[70733-70973]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70762-70974]:Block[70761-70973]"
  }, {
    "left" : "if (!_loadMore())",
    "right" : "if (!_loadMore())",
    "info" : "IfStatement[70780-70960]:IfStatement[70779-70959]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70798-70960]:Block[70797-70959]"
  }, {
    "left" : "_reportInvalidEOF(\": was expecting closing quote for a string value\",\n                            JsonToken.VALUE_STRING);",
    "right" : "_reportInvalidEOF(\": was expecting closing quote for a string value\",\n                            JsonToken.VALUE_STRING);",
    "info" : "ExpressionStatement[70820-70942]:ExpressionStatement[70819-70941]"
  }, {
    "left" : "char c = _inputBuffer[_inputPtr++];",
    "right" : "char c = _inputBuffer[_inputPtr++];",
    "info" : "VariableDeclarationStatement[70987-71022]:VariableDeclarationStatement[70986-71021]"
  }, {
    "left" : "int i = (int) c;",
    "right" : "int i = (int) c;",
    "info" : "VariableDeclarationStatement[71035-71051]:VariableDeclarationStatement[71034-71050]"
  }, {
    "left" : "if (i < maxCode && codes[i] != 0)",
    "right" : "if (i < maxCode && codes[i] != 0)",
    "info" : "IfStatement[71064-71640]:IfStatement[71063-71639]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71098-71640]:Block[71097-71639]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[71116-71608]:IfStatement[71115-71607]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71136-71182]:Block[71135-71181]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[71158-71164]:BreakStatement[71157-71163]"
  }, {
    "left" : "if (i == INT_BACKSLASH)",
    "right" : "if (i == INT_BACKSLASH)",
    "info" : "IfStatement[71188-71608]:IfStatement[71187-71607]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71212-71504]:Block[71211-71503]"
  }, {
    "left" : "c = _decodeEscaped();",
    "right" : "c = _decodeEscaped();",
    "info" : "ExpressionStatement[71465-71486]:ExpressionStatement[71464-71485]"
  }, {
    "left" : "if (i < INT_SPACE)",
    "right" : "if (i < INT_SPACE)",
    "info" : "IfStatement[71510-71608]:IfStatement[71509-71607]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71529-71608]:Block[71528-71607]"
  }, {
    "left" : "_throwUnquotedSpace(i, \"string value\");",
    "right" : "_throwUnquotedSpace(i, \"string value\");",
    "info" : "ExpressionStatement[71551-71590]:ExpressionStatement[71550-71589]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[71684-71817]:IfStatement[71683-71816]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71713-71817]:Block[71712-71816]"
  }, {
    "left" : "outBuf = _textBuffer.finishCurrentSegment();",
    "right" : "outBuf = _textBuffer.finishCurrentSegment();",
    "info" : "ExpressionStatement[71731-71775]:ExpressionStatement[71730-71774]"
  }, {
    "left" : "outPtr = 0;",
    "right" : "outPtr = 0;",
    "info" : "ExpressionStatement[71792-71803]:ExpressionStatement[71791-71802]"
  }, {
    "left" : "outBuf[outPtr++] = c;",
    "right" : "outBuf[outPtr++] = c;",
    "info" : "ExpressionStatement[71875-71896]:ExpressionStatement[71874-71895]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[71915-71952]:ExpressionStatement[71914-71951]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[72161-72170]:Modifier[72160-72169]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[72171-72176]:Modifier[72170-72175]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[72177-72181]:PrimitiveType[72176-72180]"
  }, {
    "left" : "_skipString",
    "right" : "_skipString",
    "info" : "SimpleName[72182-72193]:SimpleName[72181-72192]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[72203-72214]:SimpleType[72202-72213]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72219-73623]:Block[72218-73622]"
  }, {
    "left" : "_tokenIncomplete = false;",
    "right" : "_tokenIncomplete = false;",
    "info" : "ExpressionStatement[72229-72254]:ExpressionStatement[72228-72253]"
  }, {
    "left" : "int inPtr = _inputPtr;",
    "right" : "int inPtr = _inputPtr;",
    "info" : "VariableDeclarationStatement[72264-72286]:VariableDeclarationStatement[72263-72285]"
  }, {
    "left" : "int inLen = _inputEnd;",
    "right" : "int inLen = _inputEnd;",
    "info" : "VariableDeclarationStatement[72295-72317]:VariableDeclarationStatement[72294-72316]"
  }, {
    "left" : "char[] inBuf = _inputBuffer;",
    "right" : "char[] inBuf = _inputBuffer;",
    "info" : "VariableDeclarationStatement[72326-72354]:VariableDeclarationStatement[72325-72353]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[72364-73617]:WhileStatement[72363-73616]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72377-73617]:Block[72376-73616]"
  }, {
    "left" : "if (inPtr >= inLen)",
    "right" : "if (inPtr >= inLen)",
    "info" : "IfStatement[72391-72728]:IfStatement[72390-72727]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72411-72728]:Block[72410-72727]"
  }, {
    "left" : "_inputPtr = inPtr;",
    "right" : "_inputPtr = inPtr;",
    "info" : "ExpressionStatement[72429-72447]:ExpressionStatement[72428-72446]"
  }, {
    "left" : "if (!_loadMore())",
    "right" : "if (!_loadMore())",
    "info" : "IfStatement[72464-72644]:IfStatement[72463-72643]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72482-72644]:Block[72481-72643]"
  }, {
    "left" : "_reportInvalidEOF(\": was expecting closing quote for a string value\",\n                            JsonToken.VALUE_STRING);",
    "right" : "_reportInvalidEOF(\": was expecting closing quote for a string value\",\n                            JsonToken.VALUE_STRING);",
    "info" : "ExpressionStatement[72504-72626]:ExpressionStatement[72503-72625]"
  }, {
    "left" : "inPtr = _inputPtr;",
    "right" : "inPtr = _inputPtr;",
    "info" : "ExpressionStatement[72661-72679]:ExpressionStatement[72660-72678]"
  }, {
    "left" : "inLen = _inputEnd;",
    "right" : "inLen = _inputEnd;",
    "info" : "ExpressionStatement[72696-72714]:ExpressionStatement[72695-72713]"
  }, {
    "left" : "char c = inBuf[inPtr++];",
    "right" : "char c = inBuf[inPtr++];",
    "info" : "VariableDeclarationStatement[72741-72765]:VariableDeclarationStatement[72740-72764]"
  }, {
    "left" : "int i = (int) c;",
    "right" : "int i = (int) c;",
    "info" : "VariableDeclarationStatement[72778-72794]:VariableDeclarationStatement[72777-72793]"
  }, {
    "left" : "if (i <= INT_BACKSLASH)",
    "right" : "if (i <= INT_BACKSLASH)",
    "info" : "IfStatement[72807-73607]:IfStatement[72806-73606]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72831-73607]:Block[72830-73606]"
  }, {
    "left" : "if (i == INT_BACKSLASH)",
    "right" : "if (i == INT_BACKSLASH)",
    "info" : "IfStatement[72849-73593]:IfStatement[72848-73592]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72873-73240]:Block[72872-73239]"
  }, {
    "left" : "_inputPtr = inPtr;",
    "right" : "_inputPtr = inPtr;",
    "info" : "ExpressionStatement[73079-73097]:ExpressionStatement[73078-73096]"
  }, {
    "left" : "_decodeEscaped();",
    "right" : "_decodeEscaped();",
    "info" : "ExpressionStatement[73127-73144]:ExpressionStatement[73126-73143]"
  }, {
    "left" : "inPtr = _inputPtr;",
    "right" : "inPtr = _inputPtr;",
    "info" : "ExpressionStatement[73165-73183]:ExpressionStatement[73164-73182]"
  }, {
    "left" : "inLen = _inputEnd;",
    "right" : "inLen = _inputEnd;",
    "info" : "ExpressionStatement[73204-73222]:ExpressionStatement[73203-73221]"
  }, {
    "left" : "if (i <= INT_QUOTE)",
    "right" : "if (i <= INT_QUOTE)",
    "info" : "IfStatement[73246-73593]:IfStatement[73245-73592]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73266-73593]:Block[73265-73592]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[73288-73405]:IfStatement[73287-73404]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73308-73405]:Block[73307-73404]"
  }, {
    "left" : "_inputPtr = inPtr;",
    "right" : "_inputPtr = inPtr;",
    "info" : "ExpressionStatement[73334-73352]:ExpressionStatement[73333-73351]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[73377-73383]:BreakStatement[73376-73382]"
  }, {
    "left" : "if (i < INT_SPACE)",
    "right" : "if (i < INT_SPACE)",
    "info" : "IfStatement[73426-73575]:IfStatement[73425-73574]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73445-73575]:Block[73444-73574]"
  }, {
    "left" : "_inputPtr = inPtr;",
    "right" : "_inputPtr = inPtr;",
    "info" : "ExpressionStatement[73471-73489]:ExpressionStatement[73470-73488]"
  }, {
    "left" : "_throwUnquotedSpace(i, \"string value\");",
    "right" : "_throwUnquotedSpace(i, \"string value\");",
    "info" : "ExpressionStatement[73514-73553]:ExpressionStatement[73513-73552]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[73930-73939]:Modifier[73929-73938]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[73940-73945]:Modifier[73939-73944]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[73946-73950]:PrimitiveType[73945-73949]"
  }, {
    "left" : "_skipCR",
    "right" : "_skipCR",
    "info" : "SimpleName[73951-73958]:SimpleName[73950-73957]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[73968-73979]:SimpleType[73967-73978]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73980-74208]:Block[73979-74207]"
  }, {
    "left" : "if (_inputPtr < _inputEnd || _loadMore())",
    "right" : "if (_inputPtr < _inputEnd || _loadMore())",
    "info" : "IfStatement[73990-74137]:IfStatement[73989-74136]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74032-74137]:Block[74031-74136]"
  }, {
    "left" : "if (_inputBuffer[_inputPtr] == '\\n')",
    "right" : "if (_inputBuffer[_inputPtr] == '\\n')",
    "info" : "IfStatement[74046-74127]:IfStatement[74045-74126]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74083-74127]:Block[74082-74126]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[74101-74113]:ExpressionStatement[74100-74112]"
  }, {
    "left" : "++_currInputRow;",
    "right" : "++_currInputRow;",
    "info" : "ExpressionStatement[74146-74162]:ExpressionStatement[74145-74161]"
  }, {
    "left" : "_currInputRowStart = _inputPtr;",
    "right" : "_currInputRowStart = _inputPtr;",
    "info" : "ExpressionStatement[74171-74202]:ExpressionStatement[74170-74201]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[74214-74221]:Modifier[74213-74220]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[74222-74227]:Modifier[74221-74226]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[74228-74231]:PrimitiveType[74227-74230]"
  }, {
    "left" : "_skipColon",
    "right" : "_skipColon",
    "info" : "SimpleName[74232-74242]:SimpleName[74231-74241]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[74252-74263]:SimpleType[74251-74262]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74268-76021]:Block[74267-76020]"
  }, {
    "left" : "if ((_inputPtr + 4) >= _inputEnd)",
    "right" : "if ((_inputPtr + 4) >= _inputEnd)",
    "info" : "IfStatement[74278-74362]:IfStatement[74277-74361]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74312-74362]:Block[74311-74361]"
  }, {
    "left" : "return _skipColon2(false);",
    "right" : "return _skipColon2(false);",
    "info" : "ReturnStatement[74326-74352]:ReturnStatement[74325-74351]"
  }, {
    "left" : "char c = _inputBuffer[_inputPtr];",
    "right" : "char c = _inputBuffer[_inputPtr];",
    "info" : "VariableDeclarationStatement[74371-74404]:VariableDeclarationStatement[74370-74403]"
  }, {
    "left" : "if (c == ':')",
    "right" : "if (c == ':')",
    "info" : "IfStatement[74413-75184]:IfStatement[74412-75183]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74427-75184]:Block[74426-75183]"
  }, {
    "left" : "int i = _inputBuffer[++_inputPtr];",
    "right" : "int i = _inputBuffer[++_inputPtr];",
    "info" : "VariableDeclarationStatement[74474-74508]:VariableDeclarationStatement[74473-74507]"
  }, {
    "left" : "if (i > INT_SPACE)",
    "right" : "if (i > INT_SPACE)",
    "info" : "IfStatement[74521-74745]:IfStatement[74520-74744]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74540-74745]:Block[74539-74744]"
  }, {
    "left" : "if (i == INT_SLASH || i == INT_HASH)",
    "right" : "if (i == INT_SLASH || i == INT_HASH)",
    "info" : "IfStatement[74574-74676]:IfStatement[74573-74675]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74611-74676]:Block[74610-74675]"
  }, {
    "left" : "return _skipColon2(true);",
    "right" : "return _skipColon2(true);",
    "info" : "ReturnStatement[74633-74658]:ReturnStatement[74632-74657]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[74693-74705]:ExpressionStatement[74692-74704]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[74722-74731]:ReturnStatement[74721-74730]"
  }, {
    "left" : "if (i == INT_SPACE || i == INT_TAB)",
    "right" : "if (i == INT_SPACE || i == INT_TAB)",
    "info" : "IfStatement[74758-75111]:IfStatement[74757-75110]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74794-75111]:Block[74793-75110]"
  }, {
    "left" : "i = (int) _inputBuffer[++_inputPtr];",
    "right" : "i = (int) _inputBuffer[++_inputPtr];",
    "info" : "ExpressionStatement[74812-74848]:ExpressionStatement[74811-74847]"
  }, {
    "left" : "if (i > INT_SPACE)",
    "right" : "if (i > INT_SPACE)",
    "info" : "IfStatement[74865-75097]:IfStatement[74864-75096]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74884-75097]:Block[74883-75096]"
  }, {
    "left" : "if (i == INT_SLASH || i == INT_HASH)",
    "right" : "if (i == INT_SLASH || i == INT_HASH)",
    "info" : "IfStatement[74906-75016]:IfStatement[74905-75015]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74943-75016]:Block[74942-75015]"
  }, {
    "left" : "return _skipColon2(true);",
    "right" : "return _skipColon2(true);",
    "info" : "ReturnStatement[74969-74994]:ReturnStatement[74968-74993]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[75037-75049]:ExpressionStatement[75036-75048]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[75070-75079]:ReturnStatement[75069-75078]"
  }, {
    "left" : "return _skipColon2(true);",
    "right" : "return _skipColon2(true);",
    "info" : "ReturnStatement[75124-75149]:ReturnStatement[75123-75148]"
  }, {
    "left" : "if (c == ' ' || c == '\\t')",
    "right" : "if (c == ' ' || c == '\\t')",
    "info" : "IfStatement[75193-75274]:IfStatement[75192-75273]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75220-75274]:Block[75219-75273]"
  }, {
    "left" : "c = _inputBuffer[++_inputPtr];",
    "right" : "c = _inputBuffer[++_inputPtr];",
    "info" : "ExpressionStatement[75234-75264]:ExpressionStatement[75233-75263]"
  }, {
    "left" : "if (c == ':')",
    "right" : "if (c == ':')",
    "info" : "IfStatement[75283-75980]:IfStatement[75282-75979]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75297-75980]:Block[75296-75979]"
  }, {
    "left" : "int i = _inputBuffer[++_inputPtr];",
    "right" : "int i = _inputBuffer[++_inputPtr];",
    "info" : "VariableDeclarationStatement[75311-75345]:VariableDeclarationStatement[75310-75344]"
  }, {
    "left" : "if (i > INT_SPACE)",
    "right" : "if (i > INT_SPACE)",
    "info" : "IfStatement[75358-75566]:IfStatement[75357-75565]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75377-75566]:Block[75376-75565]"
  }, {
    "left" : "if (i == INT_SLASH || i == INT_HASH)",
    "right" : "if (i == INT_SLASH || i == INT_HASH)",
    "info" : "IfStatement[75395-75497]:IfStatement[75394-75496]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75432-75497]:Block[75431-75496]"
  }, {
    "left" : "return _skipColon2(true);",
    "right" : "return _skipColon2(true);",
    "info" : "ReturnStatement[75454-75479]:ReturnStatement[75453-75478]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[75514-75526]:ExpressionStatement[75513-75525]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[75543-75552]:ReturnStatement[75542-75551]"
  }, {
    "left" : "if (i == INT_SPACE || i == INT_TAB)",
    "right" : "if (i == INT_SPACE || i == INT_TAB)",
    "info" : "IfStatement[75579-75932]:IfStatement[75578-75931]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75615-75932]:Block[75614-75931]"
  }, {
    "left" : "i = (int) _inputBuffer[++_inputPtr];",
    "right" : "i = (int) _inputBuffer[++_inputPtr];",
    "info" : "ExpressionStatement[75633-75669]:ExpressionStatement[75632-75668]"
  }, {
    "left" : "if (i > INT_SPACE)",
    "right" : "if (i > INT_SPACE)",
    "info" : "IfStatement[75686-75918]:IfStatement[75685-75917]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75705-75918]:Block[75704-75917]"
  }, {
    "left" : "if (i == INT_SLASH || i == INT_HASH)",
    "right" : "if (i == INT_SLASH || i == INT_HASH)",
    "info" : "IfStatement[75727-75837]:IfStatement[75726-75836]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75764-75837]:Block[75763-75836]"
  }, {
    "left" : "return _skipColon2(true);",
    "right" : "return _skipColon2(true);",
    "info" : "ReturnStatement[75790-75815]:ReturnStatement[75789-75814]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[75858-75870]:ExpressionStatement[75857-75869]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[75891-75900]:ReturnStatement[75890-75899]"
  }, {
    "left" : "return _skipColon2(true);",
    "right" : "return _skipColon2(true);",
    "info" : "ReturnStatement[75945-75970]:ReturnStatement[75944-75969]"
  }, {
    "left" : "return _skipColon2(false);",
    "right" : "return _skipColon2(false);",
    "info" : "ReturnStatement[75989-76015]:ReturnStatement[75988-76014]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[76027-76034]:Modifier[76026-76033]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[76035-76040]:Modifier[76034-76039]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[76041-76044]:PrimitiveType[76040-76043]"
  }, {
    "left" : "_skipColon2",
    "right" : "_skipColon2",
    "info" : "SimpleName[76045-76056]:SimpleName[76044-76055]"
  }, {
    "left" : "boolean gotColon",
    "right" : "boolean gotColon",
    "info" : "SingleVariableDeclaration[76057-76073]:SingleVariableDeclaration[76056-76072]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[76082-76093]:SimpleType[76081-76092]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76098-77322]:Block[76097-77321]"
  }, {
    "left" : "while (_inputPtr < _inputEnd || _loadMore())",
    "right" : "while (_inputPtr < _inputEnd || _loadMore())",
    "info" : "WhileStatement[76108-77190]:WhileStatement[76107-77189]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76153-77190]:Block[76152-77189]"
  }, {
    "left" : "int i = (int) _inputBuffer[_inputPtr++];",
    "right" : "int i = (int) _inputBuffer[_inputPtr++];",
    "info" : "VariableDeclarationStatement[76167-76207]:VariableDeclarationStatement[76166-76206]"
  }, {
    "left" : "if (i > INT_SPACE)",
    "right" : "if (i > INT_SPACE)",
    "info" : "IfStatement[76220-76832]:IfStatement[76219-76831]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76239-76832]:Block[76238-76831]"
  }, {
    "left" : "if (i == INT_SLASH)",
    "right" : "if (i == INT_SLASH)",
    "info" : "IfStatement[76257-76362]:IfStatement[76256-76361]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76277-76362]:Block[76276-76361]"
  }, {
    "left" : "_skipComment();",
    "right" : "_skipComment();",
    "info" : "ExpressionStatement[76299-76314]:ExpressionStatement[76298-76313]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[76335-76344]:ContinueStatement[76334-76343]"
  }, {
    "left" : "if (i == INT_HASH)",
    "right" : "if (i == INT_HASH)",
    "info" : "IfStatement[76379-76519]:IfStatement[76378-76518]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76398-76519]:Block[76397-76518]"
  }, {
    "left" : "if (_skipYAMLComment())",
    "right" : "if (_skipYAMLComment())",
    "info" : "IfStatement[76420-76501]:IfStatement[76419-76500]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76444-76501]:Block[76443-76500]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[76470-76479]:ContinueStatement[76469-76478]"
  }, {
    "left" : "if (gotColon)",
    "right" : "if (gotColon)",
    "info" : "IfStatement[76536-76599]:IfStatement[76535-76598]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76550-76599]:Block[76549-76598]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[76572-76581]:ReturnStatement[76571-76580]"
  }, {
    "left" : "if (i != INT_COLON)",
    "right" : "if (i != INT_COLON)",
    "info" : "IfStatement[76616-76759]:IfStatement[76615-76758]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76636-76759]:Block[76635-76758]"
  }, {
    "left" : "_reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");",
    "right" : "_reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");",
    "info" : "ExpressionStatement[76658-76741]:ExpressionStatement[76657-76740]"
  }, {
    "left" : "gotColon = true;",
    "right" : "gotColon = true;",
    "info" : "ExpressionStatement[76776-76792]:ExpressionStatement[76775-76791]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[76809-76818]:ContinueStatement[76808-76817]"
  }, {
    "left" : "if (i < INT_SPACE)",
    "right" : "if (i < INT_SPACE)",
    "info" : "IfStatement[76845-77180]:IfStatement[76844-77179]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76864-77180]:Block[76863-77179]"
  }, {
    "left" : "if (i == INT_LF)",
    "right" : "if (i == INT_LF)",
    "info" : "IfStatement[76882-77166]:IfStatement[76881-77165]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76899-77007]:Block[76898-77006]"
  }, {
    "left" : "++_currInputRow;",
    "right" : "++_currInputRow;",
    "info" : "ExpressionStatement[76921-76937]:ExpressionStatement[76920-76936]"
  }, {
    "left" : "_currInputRowStart = _inputPtr;",
    "right" : "_currInputRowStart = _inputPtr;",
    "info" : "ExpressionStatement[76958-76989]:ExpressionStatement[76957-76988]"
  }, {
    "left" : "if (i == INT_CR)",
    "right" : "if (i == INT_CR)",
    "info" : "IfStatement[77013-77166]:IfStatement[77012-77165]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77030-77080]:Block[77029-77079]"
  }, {
    "left" : "_skipCR();",
    "right" : "_skipCR();",
    "info" : "ExpressionStatement[77052-77062]:ExpressionStatement[77051-77061]"
  }, {
    "left" : "if (i != INT_TAB)",
    "right" : "if (i != INT_TAB)",
    "info" : "IfStatement[77086-77166]:IfStatement[77085-77165]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77104-77166]:Block[77103-77165]"
  }, {
    "left" : "_throwInvalidSpace(i);",
    "right" : "_throwInvalidSpace(i);",
    "info" : "ExpressionStatement[77126-77148]:ExpressionStatement[77125-77147]"
  }, {
    "left" : "_reportInvalidEOF(\" within/between \"+_parsingContext.typeDesc()+\" entries\",\n                null);",
    "right" : "_reportInvalidEOF(\" within/between \"+_parsingContext.typeDesc()+\" entries\",\n                null);",
    "info" : "ExpressionStatement[77199-77297]:ExpressionStatement[77198-77296]"
  }, {
    "left" : "return -1;",
    "right" : "return -1;",
    "info" : "ReturnStatement[77306-77316]:ReturnStatement[77305-77315]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[77403-77410]:Modifier[77402-77409]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[77411-77416]:Modifier[77410-77415]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[77417-77420]:PrimitiveType[77416-77419]"
  }, {
    "left" : "_skipColonFast",
    "right" : "_skipColonFast",
    "info" : "SimpleName[77421-77435]:SimpleName[77420-77434]"
  }, {
    "left" : "int ptr",
    "right" : "int ptr",
    "info" : "SingleVariableDeclaration[77436-77443]:SingleVariableDeclaration[77435-77442]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[77452-77463]:SimpleType[77451-77462]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77468-79016]:Block[77467-79015]"
  }, {
    "left" : "int i = (int) _inputBuffer[ptr++];",
    "right" : "int i = (int) _inputBuffer[ptr++];",
    "info" : "VariableDeclarationStatement[77478-77512]:VariableDeclarationStatement[77477-77511]"
  }, {
    "left" : "if (i == INT_COLON)",
    "right" : "if (i == INT_COLON)",
    "info" : "IfStatement[77521-78234]:IfStatement[77520-78233]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77541-78234]:Block[77540-78233]"
  }, {
    "left" : "i = _inputBuffer[ptr++];",
    "right" : "i = _inputBuffer[ptr++];",
    "info" : "ExpressionStatement[77588-77612]:ExpressionStatement[77587-77611]"
  }, {
    "left" : "if (i > INT_SPACE)",
    "right" : "if (i > INT_SPACE)",
    "info" : "IfStatement[77625-78130]:IfStatement[77624-78129]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77644-77815]:Block[77643-77814]"
  }, {
    "left" : "if (i != INT_SLASH && i != INT_HASH)",
    "right" : "if (i != INT_SLASH && i != INT_HASH)",
    "info" : "IfStatement[77678-77801]:IfStatement[77677-77800]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77715-77801]:Block[77714-77800]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[77737-77753]:ExpressionStatement[77736-77752]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[77774-77783]:ReturnStatement[77773-77782]"
  }, {
    "left" : "if (i == INT_SPACE || i == INT_TAB)",
    "right" : "if (i == INT_SPACE || i == INT_TAB)",
    "info" : "IfStatement[77821-78130]:IfStatement[77820-78129]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77857-78130]:Block[77856-78129]"
  }, {
    "left" : "i = (int) _inputBuffer[ptr++];",
    "right" : "i = (int) _inputBuffer[ptr++];",
    "info" : "ExpressionStatement[77875-77905]:ExpressionStatement[77874-77904]"
  }, {
    "left" : "if (i > INT_SPACE)",
    "right" : "if (i > INT_SPACE)",
    "info" : "IfStatement[77922-78116]:IfStatement[77921-78115]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77941-78116]:Block[77940-78115]"
  }, {
    "left" : "if (i != INT_SLASH && i != INT_HASH)",
    "right" : "if (i != INT_SLASH && i != INT_HASH)",
    "info" : "IfStatement[77963-78098]:IfStatement[77962-78097]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78000-78098]:Block[77999-78097]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[78026-78042]:ExpressionStatement[78025-78041]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[78067-78076]:ReturnStatement[78066-78075]"
  }, {
    "left" : "_inputPtr = ptr-1;",
    "right" : "_inputPtr = ptr-1;",
    "info" : "ExpressionStatement[78143-78161]:ExpressionStatement[78142-78160]"
  }, {
    "left" : "return _skipColon2(true);",
    "right" : "return _skipColon2(true);",
    "info" : "ReturnStatement[78174-78199]:ReturnStatement[78173-78198]"
  }, {
    "left" : "if (i == INT_SPACE || i == INT_TAB)",
    "right" : "if (i == INT_SPACE || i == INT_TAB)",
    "info" : "IfStatement[78243-78327]:IfStatement[78242-78326]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78279-78327]:Block[78278-78326]"
  }, {
    "left" : "i = _inputBuffer[ptr++];",
    "right" : "i = _inputBuffer[ptr++];",
    "info" : "ExpressionStatement[78293-78317]:ExpressionStatement[78292-78316]"
  }, {
    "left" : "boolean gotColon = (i == INT_COLON);",
    "right" : "boolean gotColon = (i == INT_COLON);",
    "info" : "VariableDeclarationStatement[78336-78372]:VariableDeclarationStatement[78335-78371]"
  }, {
    "left" : "if (gotColon)",
    "right" : "if (gotColon)",
    "info" : "IfStatement[78381-78945]:IfStatement[78380-78944]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78395-78945]:Block[78394-78944]"
  }, {
    "left" : "i = _inputBuffer[ptr++];",
    "right" : "i = _inputBuffer[ptr++];",
    "info" : "ExpressionStatement[78409-78433]:ExpressionStatement[78408-78432]"
  }, {
    "left" : "if (i > INT_SPACE)",
    "right" : "if (i > INT_SPACE)",
    "info" : "IfStatement[78446-78935]:IfStatement[78445-78934]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78465-78620]:Block[78464-78619]"
  }, {
    "left" : "if (i != INT_SLASH && i != INT_HASH)",
    "right" : "if (i != INT_SLASH && i != INT_HASH)",
    "info" : "IfStatement[78483-78606]:IfStatement[78482-78605]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78520-78606]:Block[78519-78605]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[78542-78558]:ExpressionStatement[78541-78557]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[78579-78588]:ReturnStatement[78578-78587]"
  }, {
    "left" : "if (i == INT_SPACE || i == INT_TAB)",
    "right" : "if (i == INT_SPACE || i == INT_TAB)",
    "info" : "IfStatement[78626-78935]:IfStatement[78625-78934]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78662-78935]:Block[78661-78934]"
  }, {
    "left" : "i = (int) _inputBuffer[ptr++];",
    "right" : "i = (int) _inputBuffer[ptr++];",
    "info" : "ExpressionStatement[78680-78710]:ExpressionStatement[78679-78709]"
  }, {
    "left" : "if (i > INT_SPACE)",
    "right" : "if (i > INT_SPACE)",
    "info" : "IfStatement[78727-78921]:IfStatement[78726-78920]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78746-78921]:Block[78745-78920]"
  }, {
    "left" : "if (i != INT_SLASH && i != INT_HASH)",
    "right" : "if (i != INT_SLASH && i != INT_HASH)",
    "info" : "IfStatement[78768-78903]:IfStatement[78767-78902]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78805-78903]:Block[78804-78902]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[78831-78847]:ExpressionStatement[78830-78846]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[78872-78881]:ReturnStatement[78871-78880]"
  }, {
    "left" : "_inputPtr = ptr-1;",
    "right" : "_inputPtr = ptr-1;",
    "info" : "ExpressionStatement[78954-78972]:ExpressionStatement[78953-78971]"
  }, {
    "left" : "return _skipColon2(gotColon);",
    "right" : "return _skipColon2(gotColon);",
    "info" : "ReturnStatement[78981-79010]:ReturnStatement[78980-79009]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[79074-79081]:Modifier[79073-79080]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[79082-79087]:Modifier[79081-79086]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[79088-79091]:PrimitiveType[79087-79090]"
  }, {
    "left" : "_skipComma",
    "right" : "_skipComma",
    "info" : "SimpleName[79092-79102]:SimpleName[79091-79101]"
  }, {
    "left" : "int i",
    "right" : "int i",
    "info" : "SingleVariableDeclaration[79103-79108]:SingleVariableDeclaration[79102-79107]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[79117-79128]:SimpleType[79116-79127]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79133-80000]:Block[79132-79999]"
  }, {
    "left" : "if (i != INT_COMMA)",
    "right" : "if (i != INT_COMMA)",
    "info" : "IfStatement[79143-79286]:IfStatement[79142-79285]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79163-79286]:Block[79162-79285]"
  }, {
    "left" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.typeDesc()+\" entries\");",
    "right" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.typeDesc()+\" entries\");",
    "info" : "ExpressionStatement[79177-79276]:ExpressionStatement[79176-79275]"
  }, {
    "left" : "while (_inputPtr < _inputEnd)",
    "right" : "while (_inputPtr < _inputEnd)",
    "info" : "WhileStatement[79295-79959]:WhileStatement[79294-79958]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79325-79959]:Block[79324-79958]"
  }, {
    "left" : "i = (int) _inputBuffer[_inputPtr++];",
    "right" : "i = (int) _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[79339-79375]:ExpressionStatement[79338-79374]"
  }, {
    "left" : "if (i > INT_SPACE)",
    "right" : "if (i > INT_SPACE)",
    "info" : "IfStatement[79388-79601]:IfStatement[79387-79600]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79407-79601]:Block[79406-79600]"
  }, {
    "left" : "if (i == INT_SLASH || i == INT_HASH)",
    "right" : "if (i == INT_SLASH || i == INT_HASH)",
    "info" : "IfStatement[79425-79561]:IfStatement[79424-79560]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79462-79561]:Block[79461-79560]"
  }, {
    "left" : "--_inputPtr;",
    "right" : "--_inputPtr;",
    "info" : "ExpressionStatement[79484-79496]:ExpressionStatement[79483-79495]"
  }, {
    "left" : "return _skipAfterComma2();",
    "right" : "return _skipAfterComma2();",
    "info" : "ReturnStatement[79517-79543]:ReturnStatement[79516-79542]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[79578-79587]:ReturnStatement[79577-79586]"
  }, {
    "left" : "if (i < INT_SPACE)",
    "right" : "if (i < INT_SPACE)",
    "info" : "IfStatement[79614-79949]:IfStatement[79613-79948]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79633-79949]:Block[79632-79948]"
  }, {
    "left" : "if (i == INT_LF)",
    "right" : "if (i == INT_LF)",
    "info" : "IfStatement[79651-79935]:IfStatement[79650-79934]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79668-79776]:Block[79667-79775]"
  }, {
    "left" : "++_currInputRow;",
    "right" : "++_currInputRow;",
    "info" : "ExpressionStatement[79690-79706]:ExpressionStatement[79689-79705]"
  }, {
    "left" : "_currInputRowStart = _inputPtr;",
    "right" : "_currInputRowStart = _inputPtr;",
    "info" : "ExpressionStatement[79727-79758]:ExpressionStatement[79726-79757]"
  }, {
    "left" : "if (i == INT_CR)",
    "right" : "if (i == INT_CR)",
    "info" : "IfStatement[79782-79935]:IfStatement[79781-79934]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79799-79849]:Block[79798-79848]"
  }, {
    "left" : "_skipCR();",
    "right" : "_skipCR();",
    "info" : "ExpressionStatement[79821-79831]:ExpressionStatement[79820-79830]"
  }, {
    "left" : "if (i != INT_TAB)",
    "right" : "if (i != INT_TAB)",
    "info" : "IfStatement[79855-79935]:IfStatement[79854-79934]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79873-79935]:Block[79872-79934]"
  }, {
    "left" : "_throwInvalidSpace(i);",
    "right" : "_throwInvalidSpace(i);",
    "info" : "ExpressionStatement[79895-79917]:ExpressionStatement[79894-79916]"
  }, {
    "left" : "return _skipAfterComma2();",
    "right" : "return _skipAfterComma2();",
    "info" : "ReturnStatement[79968-79994]:ReturnStatement[79967-79993]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[80006-80013]:Modifier[80005-80012]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[80014-80019]:Modifier[80013-80018]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[80020-80023]:PrimitiveType[80019-80022]"
  }, {
    "left" : "_skipAfterComma2",
    "right" : "_skipAfterComma2",
    "info" : "SimpleName[80024-80040]:SimpleName[80023-80039]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[80050-80061]:SimpleType[80049-80060]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80066-81003]:Block[80065-81002]"
  }, {
    "left" : "while (_inputPtr < _inputEnd || _loadMore())",
    "right" : "while (_inputPtr < _inputEnd || _loadMore())",
    "info" : "WhileStatement[80076-80885]:WhileStatement[80075-80884]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80121-80885]:Block[80120-80884]"
  }, {
    "left" : "int i = (int) _inputBuffer[_inputPtr++];",
    "right" : "int i = (int) _inputBuffer[_inputPtr++];",
    "info" : "VariableDeclarationStatement[80135-80175]:VariableDeclarationStatement[80134-80174]"
  }, {
    "left" : "if (i > INT_SPACE)",
    "right" : "if (i > INT_SPACE)",
    "info" : "IfStatement[80188-80527]:IfStatement[80187-80526]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80207-80527]:Block[80206-80526]"
  }, {
    "left" : "if (i == INT_SLASH)",
    "right" : "if (i == INT_SLASH)",
    "info" : "IfStatement[80225-80330]:IfStatement[80224-80329]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80245-80330]:Block[80244-80329]"
  }, {
    "left" : "_skipComment();",
    "right" : "_skipComment();",
    "info" : "ExpressionStatement[80267-80282]:ExpressionStatement[80266-80281]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[80303-80312]:ContinueStatement[80302-80311]"
  }, {
    "left" : "if (i == INT_HASH)",
    "right" : "if (i == INT_HASH)",
    "info" : "IfStatement[80347-80487]:IfStatement[80346-80486]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80366-80487]:Block[80365-80486]"
  }, {
    "left" : "if (_skipYAMLComment())",
    "right" : "if (_skipYAMLComment())",
    "info" : "IfStatement[80388-80469]:IfStatement[80387-80468]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80412-80469]:Block[80411-80468]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[80438-80447]:ContinueStatement[80437-80446]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[80504-80513]:ReturnStatement[80503-80512]"
  }, {
    "left" : "if (i < INT_SPACE)",
    "right" : "if (i < INT_SPACE)",
    "info" : "IfStatement[80540-80875]:IfStatement[80539-80874]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80559-80875]:Block[80558-80874]"
  }, {
    "left" : "if (i == INT_LF)",
    "right" : "if (i == INT_LF)",
    "info" : "IfStatement[80577-80861]:IfStatement[80576-80860]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80594-80702]:Block[80593-80701]"
  }, {
    "left" : "++_currInputRow;",
    "right" : "++_currInputRow;",
    "info" : "ExpressionStatement[80616-80632]:ExpressionStatement[80615-80631]"
  }, {
    "left" : "_currInputRowStart = _inputPtr;",
    "right" : "_currInputRowStart = _inputPtr;",
    "info" : "ExpressionStatement[80653-80684]:ExpressionStatement[80652-80683]"
  }, {
    "left" : "if (i == INT_CR)",
    "right" : "if (i == INT_CR)",
    "info" : "IfStatement[80708-80861]:IfStatement[80707-80860]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80725-80775]:Block[80724-80774]"
  }, {
    "left" : "_skipCR();",
    "right" : "_skipCR();",
    "info" : "ExpressionStatement[80747-80757]:ExpressionStatement[80746-80756]"
  }, {
    "left" : "if (i != INT_TAB)",
    "right" : "if (i != INT_TAB)",
    "info" : "IfStatement[80781-80861]:IfStatement[80780-80860]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80799-80861]:Block[80798-80860]"
  }, {
    "left" : "_throwInvalidSpace(i);",
    "right" : "_throwInvalidSpace(i);",
    "info" : "ExpressionStatement[80821-80843]:ExpressionStatement[80820-80842]"
  }, {
    "left" : "throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.typeDesc()+\" entries\");",
    "right" : "throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.typeDesc()+\" entries\");",
    "info" : "ThrowStatement[80894-80997]:ThrowStatement[80893-80996]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[81009-81016]:Modifier[81008-81015]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[81017-81022]:Modifier[81016-81021]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[81023-81026]:PrimitiveType[81022-81025]"
  }, {
    "left" : "_skipWSOrEnd",
    "right" : "_skipWSOrEnd",
    "info" : "SimpleName[81027-81039]:SimpleName[81026-81038]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[81049-81060]:SimpleType[81048-81059]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81065-82610]:Block[81064-82609]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[81227-81353]:IfStatement[81226-81352]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81255-81353]:Block[81254-81352]"
  }, {
    "left" : "if (!_loadMore())",
    "right" : "if (!_loadMore())",
    "info" : "IfStatement[81269-81343]:IfStatement[81268-81342]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81287-81343]:Block[81286-81342]"
  }, {
    "left" : "return _eofAsNextChar();",
    "right" : "return _eofAsNextChar();",
    "info" : "ReturnStatement[81305-81329]:ReturnStatement[81304-81328]"
  }, {
    "left" : "int i = _inputBuffer[_inputPtr++];",
    "right" : "int i = _inputBuffer[_inputPtr++];",
    "info" : "VariableDeclarationStatement[81362-81396]:VariableDeclarationStatement[81361-81395]"
  }, {
    "left" : "if (i > INT_SPACE)",
    "right" : "if (i > INT_SPACE)",
    "info" : "IfStatement[81405-81591]:IfStatement[81404-81590]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81424-81591]:Block[81423-81590]"
  }, {
    "left" : "if (i == INT_SLASH || i == INT_HASH)",
    "right" : "if (i == INT_SLASH || i == INT_HASH)",
    "info" : "IfStatement[81438-81559]:IfStatement[81437-81558]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81475-81559]:Block[81474-81558]"
  }, {
    "left" : "--_inputPtr;",
    "right" : "--_inputPtr;",
    "info" : "ExpressionStatement[81493-81505]:ExpressionStatement[81492-81504]"
  }, {
    "left" : "return _skipWSOrEnd2();",
    "right" : "return _skipWSOrEnd2();",
    "info" : "ReturnStatement[81522-81545]:ReturnStatement[81521-81544]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[81572-81581]:ReturnStatement[81571-81580]"
  }, {
    "left" : "if (i != INT_SPACE)",
    "right" : "if (i != INT_SPACE)",
    "info" : "IfStatement[81600-81900]:IfStatement[81599-81899]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81620-81900]:Block[81619-81899]"
  }, {
    "left" : "if (i == INT_LF)",
    "right" : "if (i == INT_LF)",
    "info" : "IfStatement[81634-81890]:IfStatement[81633-81889]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81651-81747]:Block[81650-81746]"
  }, {
    "left" : "++_currInputRow;",
    "right" : "++_currInputRow;",
    "info" : "ExpressionStatement[81669-81685]:ExpressionStatement[81668-81684]"
  }, {
    "left" : "_currInputRowStart = _inputPtr;",
    "right" : "_currInputRowStart = _inputPtr;",
    "info" : "ExpressionStatement[81702-81733]:ExpressionStatement[81701-81732]"
  }, {
    "left" : "if (i == INT_CR)",
    "right" : "if (i == INT_CR)",
    "info" : "IfStatement[81753-81890]:IfStatement[81752-81889]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81770-81812]:Block[81769-81811]"
  }, {
    "left" : "_skipCR();",
    "right" : "_skipCR();",
    "info" : "ExpressionStatement[81788-81798]:ExpressionStatement[81787-81797]"
  }, {
    "left" : "if (i != INT_TAB)",
    "right" : "if (i != INT_TAB)",
    "info" : "IfStatement[81818-81890]:IfStatement[81817-81889]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81836-81890]:Block[81835-81889]"
  }, {
    "left" : "_throwInvalidSpace(i);",
    "right" : "_throwInvalidSpace(i);",
    "info" : "ExpressionStatement[81854-81876]:ExpressionStatement[81853-81875]"
  }, {
    "left" : "while (_inputPtr < _inputEnd)",
    "right" : "while (_inputPtr < _inputEnd)",
    "info" : "WhileStatement[81910-82572]:WhileStatement[81909-82571]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81940-82572]:Block[81939-82571]"
  }, {
    "left" : "i = (int) _inputBuffer[_inputPtr++];",
    "right" : "i = (int) _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[81954-81990]:ExpressionStatement[81953-81989]"
  }, {
    "left" : "if (i > INT_SPACE)",
    "right" : "if (i > INT_SPACE)",
    "info" : "IfStatement[82003-82213]:IfStatement[82002-82212]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82022-82213]:Block[82021-82212]"
  }, {
    "left" : "if (i == INT_SLASH || i == INT_HASH)",
    "right" : "if (i == INT_SLASH || i == INT_HASH)",
    "info" : "IfStatement[82040-82173]:IfStatement[82039-82172]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82077-82173]:Block[82076-82172]"
  }, {
    "left" : "--_inputPtr;",
    "right" : "--_inputPtr;",
    "info" : "ExpressionStatement[82099-82111]:ExpressionStatement[82098-82110]"
  }, {
    "left" : "return _skipWSOrEnd2();",
    "right" : "return _skipWSOrEnd2();",
    "info" : "ReturnStatement[82132-82155]:ReturnStatement[82131-82154]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[82190-82199]:ReturnStatement[82189-82198]"
  }, {
    "left" : "if (i != INT_SPACE)",
    "right" : "if (i != INT_SPACE)",
    "info" : "IfStatement[82226-82562]:IfStatement[82225-82561]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82246-82562]:Block[82245-82561]"
  }, {
    "left" : "if (i == INT_LF)",
    "right" : "if (i == INT_LF)",
    "info" : "IfStatement[82264-82548]:IfStatement[82263-82547]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82281-82389]:Block[82280-82388]"
  }, {
    "left" : "++_currInputRow;",
    "right" : "++_currInputRow;",
    "info" : "ExpressionStatement[82303-82319]:ExpressionStatement[82302-82318]"
  }, {
    "left" : "_currInputRowStart = _inputPtr;",
    "right" : "_currInputRowStart = _inputPtr;",
    "info" : "ExpressionStatement[82340-82371]:ExpressionStatement[82339-82370]"
  }, {
    "left" : "if (i == INT_CR)",
    "right" : "if (i == INT_CR)",
    "info" : "IfStatement[82395-82548]:IfStatement[82394-82547]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82412-82462]:Block[82411-82461]"
  }, {
    "left" : "_skipCR();",
    "right" : "_skipCR();",
    "info" : "ExpressionStatement[82434-82444]:ExpressionStatement[82433-82443]"
  }, {
    "left" : "if (i != INT_TAB)",
    "right" : "if (i != INT_TAB)",
    "info" : "IfStatement[82468-82548]:IfStatement[82467-82547]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82486-82548]:Block[82485-82547]"
  }, {
    "left" : "_throwInvalidSpace(i);",
    "right" : "_throwInvalidSpace(i);",
    "info" : "ExpressionStatement[82508-82530]:ExpressionStatement[82507-82529]"
  }, {
    "left" : "return _skipWSOrEnd2();",
    "right" : "return _skipWSOrEnd2();",
    "info" : "ReturnStatement[82581-82604]:ReturnStatement[82580-82603]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[82616-82623]:Modifier[82615-82622]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[82624-82627]:PrimitiveType[82623-82626]"
  }, {
    "left" : "_skipWSOrEnd2",
    "right" : "_skipWSOrEnd2",
    "info" : "SimpleName[82628-82641]:SimpleName[82627-82640]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[82651-82662]:SimpleType[82650-82661]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82667-83635]:Block[82666-83634]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[82677-83629]:WhileStatement[82676-83628]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82690-83629]:Block[82689-83628]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[82704-82872]:IfStatement[82703-82871]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82732-82872]:Block[82731-82871]"
  }, {
    "left" : "if (!_loadMore())",
    "right" : "if (!_loadMore())",
    "info" : "IfStatement[82750-82858]:IfStatement[82749-82857]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82768-82858]:Block[82767-82857]"
  }, {
    "left" : "return _eofAsNextChar();",
    "right" : "return _eofAsNextChar();",
    "info" : "ReturnStatement[82816-82840]:ReturnStatement[82815-82839]"
  }, {
    "left" : "int i = (int) _inputBuffer[_inputPtr++];",
    "right" : "int i = (int) _inputBuffer[_inputPtr++];",
    "info" : "VariableDeclarationStatement[82885-82925]:VariableDeclarationStatement[82884-82924]"
  }, {
    "left" : "if (i > INT_SPACE)",
    "right" : "if (i > INT_SPACE)",
    "info" : "IfStatement[82938-83619]:IfStatement[82937-83618]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82957-83277]:Block[82956-83276]"
  }, {
    "left" : "if (i == INT_SLASH)",
    "right" : "if (i == INT_SLASH)",
    "info" : "IfStatement[82975-83080]:IfStatement[82974-83079]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82995-83080]:Block[82994-83079]"
  }, {
    "left" : "_skipComment();",
    "right" : "_skipComment();",
    "info" : "ExpressionStatement[83017-83032]:ExpressionStatement[83016-83031]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[83053-83062]:ContinueStatement[83052-83061]"
  }, {
    "left" : "if (i == INT_HASH)",
    "right" : "if (i == INT_HASH)",
    "info" : "IfStatement[83097-83237]:IfStatement[83096-83236]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83116-83237]:Block[83115-83236]"
  }, {
    "left" : "if (_skipYAMLComment())",
    "right" : "if (_skipYAMLComment())",
    "info" : "IfStatement[83138-83219]:IfStatement[83137-83218]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83162-83219]:Block[83161-83218]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[83188-83197]:ContinueStatement[83187-83196]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[83254-83263]:ReturnStatement[83253-83262]"
  }, {
    "left" : "if (i != INT_SPACE)",
    "right" : "if (i != INT_SPACE)",
    "info" : "IfStatement[83283-83619]:IfStatement[83282-83618]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83303-83619]:Block[83302-83618]"
  }, {
    "left" : "if (i == INT_LF)",
    "right" : "if (i == INT_LF)",
    "info" : "IfStatement[83321-83605]:IfStatement[83320-83604]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83338-83446]:Block[83337-83445]"
  }, {
    "left" : "++_currInputRow;",
    "right" : "++_currInputRow;",
    "info" : "ExpressionStatement[83360-83376]:ExpressionStatement[83359-83375]"
  }, {
    "left" : "_currInputRowStart = _inputPtr;",
    "right" : "_currInputRowStart = _inputPtr;",
    "info" : "ExpressionStatement[83397-83428]:ExpressionStatement[83396-83427]"
  }, {
    "left" : "if (i == INT_CR)",
    "right" : "if (i == INT_CR)",
    "info" : "IfStatement[83452-83605]:IfStatement[83451-83604]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83469-83519]:Block[83468-83518]"
  }, {
    "left" : "_skipCR();",
    "right" : "_skipCR();",
    "info" : "ExpressionStatement[83491-83501]:ExpressionStatement[83490-83500]"
  }, {
    "left" : "if (i != INT_TAB)",
    "right" : "if (i != INT_TAB)",
    "info" : "IfStatement[83525-83605]:IfStatement[83524-83604]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83543-83605]:Block[83542-83604]"
  }, {
    "left" : "_throwInvalidSpace(i);",
    "right" : "_throwInvalidSpace(i);",
    "info" : "ExpressionStatement[83565-83587]:ExpressionStatement[83564-83586]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[83641-83648]:Modifier[83640-83647]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[83649-83653]:PrimitiveType[83648-83652]"
  }, {
    "left" : "_skipComment",
    "right" : "_skipComment",
    "info" : "SimpleName[83654-83666]:SimpleName[83653-83665]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[83676-83687]:SimpleType[83675-83686]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83692-84354]:Block[83691-84353]"
  }, {
    "left" : "if (!isEnabled(Feature.ALLOW_COMMENTS))",
    "right" : "if (!isEnabled(Feature.ALLOW_COMMENTS))",
    "info" : "IfStatement[83702-83906]:IfStatement[83701-83905]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83742-83906]:Block[83741-83905]"
  }, {
    "left" : "_reportUnexpectedChar('/', \"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)\");",
    "right" : "_reportUnexpectedChar('/', \"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)\");",
    "info" : "ExpressionStatement[83756-83896]:ExpressionStatement[83755-83895]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd && !_loadMore())",
    "right" : "if (_inputPtr >= _inputEnd && !_loadMore())",
    "info" : "IfStatement[83972-84081]:IfStatement[83971-84080]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84016-84081]:Block[84015-84080]"
  }, {
    "left" : "_reportInvalidEOF(\" in a comment\", null);",
    "right" : "_reportInvalidEOF(\" in a comment\", null);",
    "info" : "ExpressionStatement[84030-84071]:ExpressionStatement[84029-84070]"
  }, {
    "left" : "char c = _inputBuffer[_inputPtr++];",
    "right" : "char c = _inputBuffer[_inputPtr++];",
    "info" : "VariableDeclarationStatement[84090-84125]:VariableDeclarationStatement[84089-84124]"
  }, {
    "left" : "if (c == '/')",
    "right" : "if (c == '/')",
    "info" : "IfStatement[84134-84348]:IfStatement[84133-84347]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84148-84184]:Block[84147-84183]"
  }, {
    "left" : "_skipLine();",
    "right" : "_skipLine();",
    "info" : "ExpressionStatement[84162-84174]:ExpressionStatement[84161-84173]"
  }, {
    "left" : "if (c == '*')",
    "right" : "if (c == '*')",
    "info" : "IfStatement[84190-84348]:IfStatement[84189-84347]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84204-84244]:Block[84203-84243]"
  }, {
    "left" : "_skipCComment();",
    "right" : "_skipCComment();",
    "info" : "ExpressionStatement[84218-84234]:ExpressionStatement[84217-84233]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84250-84348]:Block[84249-84347]"
  }, {
    "left" : "_reportUnexpectedChar(c, \"was expecting either '*' or '/' for a comment\");",
    "right" : "_reportUnexpectedChar(c, \"was expecting either '*' or '/' for a comment\");",
    "info" : "ExpressionStatement[84264-84338]:ExpressionStatement[84263-84337]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[84360-84367]:Modifier[84359-84366]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[84368-84372]:PrimitiveType[84367-84371]"
  }, {
    "left" : "_skipCComment",
    "right" : "_skipCComment",
    "info" : "SimpleName[84373-84386]:SimpleName[84372-84385]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[84396-84407]:SimpleType[84395-84406]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84412-85421]:Block[84411-85420]"
  }, {
    "left" : "while ((_inputPtr < _inputEnd) || _loadMore())",
    "right" : "while ((_inputPtr < _inputEnd) || _loadMore())",
    "info" : "WhileStatement[84460-85365]:WhileStatement[84459-85364]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84507-85365]:Block[84506-85364]"
  }, {
    "left" : "int i = (int) _inputBuffer[_inputPtr++];",
    "right" : "int i = (int) _inputBuffer[_inputPtr++];",
    "info" : "VariableDeclarationStatement[84521-84561]:VariableDeclarationStatement[84520-84560]"
  }, {
    "left" : "if (i <= '*')",
    "right" : "if (i <= '*')",
    "info" : "IfStatement[84574-85355]:IfStatement[84573-85354]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84588-85355]:Block[84587-85354]"
  }, {
    "left" : "if (i == '*')",
    "right" : "if (i == '*')",
    "info" : "IfStatement[84606-84953]:IfStatement[84605-84952]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84620-84953]:Block[84619-84952]"
  }, {
    "left" : "if ((_inputPtr >= _inputEnd) && !_loadMore())",
    "right" : "if ((_inputPtr >= _inputEnd) && !_loadMore())",
    "info" : "IfStatement[84650-84750]:IfStatement[84649-84749]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84696-84750]:Block[84695-84749]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[84722-84728]:BreakStatement[84721-84727]"
  }, {
    "left" : "if (_inputBuffer[_inputPtr] == INT_SLASH)",
    "right" : "if (_inputBuffer[_inputPtr] == INT_SLASH)",
    "info" : "IfStatement[84771-84905]:IfStatement[84770-84904]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84813-84905]:Block[84812-84904]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[84839-84851]:ExpressionStatement[84838-84850]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[84876-84883]:ReturnStatement[84875-84882]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[84926-84935]:ContinueStatement[84925-84934]"
  }, {
    "left" : "if (i < INT_SPACE)",
    "right" : "if (i < INT_SPACE)",
    "info" : "IfStatement[84970-85341]:IfStatement[84969-85340]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84989-85341]:Block[84988-85340]"
  }, {
    "left" : "if (i == INT_LF)",
    "right" : "if (i == INT_LF)",
    "info" : "IfStatement[85011-85323]:IfStatement[85010-85322]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[85028-85148]:Block[85027-85147]"
  }, {
    "left" : "++_currInputRow;",
    "right" : "++_currInputRow;",
    "info" : "ExpressionStatement[85054-85070]:ExpressionStatement[85053-85069]"
  }, {
    "left" : "_currInputRowStart = _inputPtr;",
    "right" : "_currInputRowStart = _inputPtr;",
    "info" : "ExpressionStatement[85095-85126]:ExpressionStatement[85094-85125]"
  }, {
    "left" : "if (i == INT_CR)",
    "right" : "if (i == INT_CR)",
    "info" : "IfStatement[85154-85323]:IfStatement[85153-85322]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[85171-85229]:Block[85170-85228]"
  }, {
    "left" : "_skipCR();",
    "right" : "_skipCR();",
    "info" : "ExpressionStatement[85197-85207]:ExpressionStatement[85196-85206]"
  }, {
    "left" : "if (i != INT_TAB)",
    "right" : "if (i != INT_TAB)",
    "info" : "IfStatement[85235-85323]:IfStatement[85234-85322]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[85253-85323]:Block[85252-85322]"
  }, {
    "left" : "_throwInvalidSpace(i);",
    "right" : "_throwInvalidSpace(i);",
    "info" : "ExpressionStatement[85279-85301]:ExpressionStatement[85278-85300]"
  }, {
    "left" : "_reportInvalidEOF(\" in a comment\", null);",
    "right" : "_reportInvalidEOF(\" in a comment\", null);",
    "info" : "ExpressionStatement[85374-85415]:ExpressionStatement[85373-85414]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[85427-85434]:Modifier[85426-85433]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[85435-85442]:PrimitiveType[85434-85441]"
  }, {
    "left" : "_skipYAMLComment",
    "right" : "_skipYAMLComment",
    "info" : "SimpleName[85443-85459]:SimpleName[85442-85458]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[85469-85480]:SimpleType[85468-85479]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[85485-85625]:Block[85484-85624]"
  }, {
    "left" : "if (!isEnabled(Feature.ALLOW_YAML_COMMENTS))",
    "right" : "if (!isEnabled(Feature.ALLOW_YAML_COMMENTS))",
    "info" : "IfStatement[85495-85577]:IfStatement[85494-85576]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[85540-85577]:Block[85539-85576]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[85554-85567]:ReturnStatement[85553-85566]"
  }, {
    "left" : "_skipLine();",
    "right" : "_skipLine();",
    "info" : "ExpressionStatement[85586-85598]:ExpressionStatement[85585-85597]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[85607-85619]:ReturnStatement[85606-85618]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[85631-85638]:Modifier[85630-85637]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[85639-85643]:PrimitiveType[85638-85642]"
  }, {
    "left" : "_skipLine",
    "right" : "_skipLine",
    "info" : "SimpleName[85644-85653]:SimpleName[85643-85652]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[85663-85674]:SimpleType[85662-85673]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[85679-86252]:Block[85678-86251]"
  }, {
    "left" : "while ((_inputPtr < _inputEnd) || _loadMore())",
    "right" : "while ((_inputPtr < _inputEnd) || _loadMore())",
    "info" : "WhileStatement[85733-86246]:WhileStatement[85732-86245]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[85780-86246]:Block[85779-86245]"
  }, {
    "left" : "int i = (int) _inputBuffer[_inputPtr++];",
    "right" : "int i = (int) _inputBuffer[_inputPtr++];",
    "info" : "VariableDeclarationStatement[85794-85834]:VariableDeclarationStatement[85793-85833]"
  }, {
    "left" : "if (i < INT_SPACE)",
    "right" : "if (i < INT_SPACE)",
    "info" : "IfStatement[85847-86236]:IfStatement[85846-86235]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[85866-86236]:Block[85865-86235]"
  }, {
    "left" : "if (i == INT_LF)",
    "right" : "if (i == INT_LF)",
    "info" : "IfStatement[85884-86222]:IfStatement[85883-86221]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[85901-86036]:Block[85900-86035]"
  }, {
    "left" : "++_currInputRow;",
    "right" : "++_currInputRow;",
    "info" : "ExpressionStatement[85923-85939]:ExpressionStatement[85922-85938]"
  }, {
    "left" : "_currInputRowStart = _inputPtr;",
    "right" : "_currInputRowStart = _inputPtr;",
    "info" : "ExpressionStatement[85960-85991]:ExpressionStatement[85959-85990]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[86012-86018]:BreakStatement[86011-86017]"
  }, {
    "left" : "if (i == INT_CR)",
    "right" : "if (i == INT_CR)",
    "info" : "IfStatement[86042-86222]:IfStatement[86041-86221]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[86059-86136]:Block[86058-86135]"
  }, {
    "left" : "_skipCR();",
    "right" : "_skipCR();",
    "info" : "ExpressionStatement[86081-86091]:ExpressionStatement[86080-86090]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[86112-86118]:BreakStatement[86111-86117]"
  }, {
    "left" : "if (i != INT_TAB)",
    "right" : "if (i != INT_TAB)",
    "info" : "IfStatement[86142-86222]:IfStatement[86141-86221]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[86160-86222]:Block[86159-86221]"
  }, {
    "left" : "_throwInvalidSpace(i);",
    "right" : "_throwInvalidSpace(i);",
    "info" : "ExpressionStatement[86182-86204]:ExpressionStatement[86181-86203]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[86258-86267]:MarkerAnnotation[86257-86266]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[86272-86281]:Modifier[86271-86280]"
  }, {
    "left" : "char",
    "right" : "char",
    "info" : "PrimitiveType[86282-86286]:PrimitiveType[86281-86285]"
  }, {
    "left" : "_decodeEscaped",
    "right" : "_decodeEscaped",
    "info" : "SimpleName[86287-86301]:SimpleName[86286-86300]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[86311-86322]:SimpleType[86310-86321]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[86327-87774]:Block[86326-87773]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[86337-86514]:IfStatement[86336-86513]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[86365-86514]:Block[86364-86513]"
  }, {
    "left" : "if (!_loadMore())",
    "right" : "if (!_loadMore())",
    "info" : "IfStatement[86379-86504]:IfStatement[86378-86503]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[86397-86504]:Block[86396-86503]"
  }, {
    "left" : "_reportInvalidEOF(\" in character escape sequence\", JsonToken.VALUE_STRING);",
    "right" : "_reportInvalidEOF(\" in character escape sequence\", JsonToken.VALUE_STRING);",
    "info" : "ExpressionStatement[86415-86490]:ExpressionStatement[86414-86489]"
  }, {
    "left" : "char c = _inputBuffer[_inputPtr++];",
    "right" : "char c = _inputBuffer[_inputPtr++];",
    "info" : "VariableDeclarationStatement[86523-86558]:VariableDeclarationStatement[86522-86557]"
  }, {
    "left" : "switch ((int) c) {\n            // First, ones that are mapped\n        case 'b':\n            return '\\b';\n        case 't':\n            return '\\t';\n        case 'n':\n            return '\\n';\n        case 'f':\n            return '\\f';\n        case 'r':\n            return '\\r';\n\n            // And these are to be returned as they are\n        case '\"':\n        case '/':\n        case '\\\\':\n            return c;\n\n        case 'u': // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape(c);\n        }",
    "right" : "switch ((int) c) {\n            // First, ones that are mapped\n        case 'b':\n            return '\\b';\n        case 't':\n            return '\\t';\n        case 'n':\n            return '\\n';\n        case 'f':\n            return '\\f';\n        case 'r':\n            return '\\r';\n\n            // And these are to be returned as they are\n        case '\"':\n        case '/':\n        case '\\\\':\n            return c;\n\n        case 'u': // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape(c);\n        }",
    "info" : "SwitchStatement[86568-87129]:SwitchStatement[86567-87128]"
  }, {
    "left" : "case 'b':",
    "right" : "case 'b':",
    "info" : "SwitchCase[86638-86647]:SwitchCase[86637-86646]"
  }, {
    "left" : "return '\\b';",
    "right" : "return '\\b';",
    "info" : "ReturnStatement[86660-86672]:ReturnStatement[86659-86671]"
  }, {
    "left" : "case 't':",
    "right" : "case 't':",
    "info" : "SwitchCase[86681-86690]:SwitchCase[86680-86689]"
  }, {
    "left" : "return '\\t';",
    "right" : "return '\\t';",
    "info" : "ReturnStatement[86703-86715]:ReturnStatement[86702-86714]"
  }, {
    "left" : "case 'n':",
    "right" : "case 'n':",
    "info" : "SwitchCase[86724-86733]:SwitchCase[86723-86732]"
  }, {
    "left" : "return '\\n';",
    "right" : "return '\\n';",
    "info" : "ReturnStatement[86746-86758]:ReturnStatement[86745-86757]"
  }, {
    "left" : "case 'f':",
    "right" : "case 'f':",
    "info" : "SwitchCase[86767-86776]:SwitchCase[86766-86775]"
  }, {
    "left" : "return '\\f';",
    "right" : "return '\\f';",
    "info" : "ReturnStatement[86789-86801]:ReturnStatement[86788-86800]"
  }, {
    "left" : "case 'r':",
    "right" : "case 'r':",
    "info" : "SwitchCase[86810-86819]:SwitchCase[86809-86818]"
  }, {
    "left" : "return '\\r';",
    "right" : "return '\\r';",
    "info" : "ReturnStatement[86832-86844]:ReturnStatement[86831-86843]"
  }, {
    "left" : "case '\"':",
    "right" : "case '\"':",
    "info" : "SwitchCase[86910-86919]:SwitchCase[86909-86918]"
  }, {
    "left" : "case '/':",
    "right" : "case '/':",
    "info" : "SwitchCase[86928-86937]:SwitchCase[86927-86936]"
  }, {
    "left" : "case '\\\\':",
    "right" : "case '\\\\':",
    "info" : "SwitchCase[86946-86956]:SwitchCase[86945-86955]"
  }, {
    "left" : "return c;",
    "right" : "return c;",
    "info" : "ReturnStatement[86969-86978]:ReturnStatement[86968-86977]"
  }, {
    "left" : "case 'u':",
    "right" : "case 'u':",
    "info" : "SwitchCase[86988-86997]:SwitchCase[86987-86996]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[87037-87043]:BreakStatement[87036-87042]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[87053-87061]:SwitchCase[87052-87060]"
  }, {
    "left" : "return _handleUnrecognizedCharacterEscape(c);",
    "right" : "return _handleUnrecognizedCharacterEscape(c);",
    "info" : "ReturnStatement[87074-87119]:ReturnStatement[87073-87118]"
  }, {
    "left" : "int value = 0;",
    "right" : "int value = 0;",
    "info" : "VariableDeclarationStatement[87186-87200]:VariableDeclarationStatement[87185-87199]"
  }, {
    "left" : "for (int i = 0; i < 4; ++i)",
    "right" : "for (int i = 0; i < 4; ++i)",
    "info" : "ForStatement[87209-87739]:ForStatement[87208-87738]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[87237-87739]:Block[87236-87738]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[87251-87444]:IfStatement[87250-87443]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[87279-87444]:Block[87278-87443]"
  }, {
    "left" : "if (!_loadMore())",
    "right" : "if (!_loadMore())",
    "info" : "IfStatement[87297-87430]:IfStatement[87296-87429]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[87315-87430]:Block[87314-87429]"
  }, {
    "left" : "_reportInvalidEOF(\" in character escape sequence\", JsonToken.VALUE_STRING);",
    "right" : "_reportInvalidEOF(\" in character escape sequence\", JsonToken.VALUE_STRING);",
    "info" : "ExpressionStatement[87337-87412]:ExpressionStatement[87336-87411]"
  }, {
    "left" : "int ch = (int) _inputBuffer[_inputPtr++];",
    "right" : "int ch = (int) _inputBuffer[_inputPtr++];",
    "info" : "VariableDeclarationStatement[87457-87498]:VariableDeclarationStatement[87456-87497]"
  }, {
    "left" : "int digit = CharTypes.charToHex(ch);",
    "right" : "int digit = CharTypes.charToHex(ch);",
    "info" : "VariableDeclarationStatement[87511-87547]:VariableDeclarationStatement[87510-87546]"
  }, {
    "left" : "if (digit < 0)",
    "right" : "if (digit < 0)",
    "info" : "IfStatement[87560-87687]:IfStatement[87559-87686]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[87575-87687]:Block[87574-87686]"
  }, {
    "left" : "_reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");",
    "right" : "_reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");",
    "info" : "ExpressionStatement[87593-87673]:ExpressionStatement[87592-87672]"
  }, {
    "left" : "value = (value << 4) | digit;",
    "right" : "value = (value << 4) | digit;",
    "info" : "ExpressionStatement[87700-87729]:ExpressionStatement[87699-87728]"
  }, {
    "left" : "return (char) value;",
    "right" : "return (char) value;",
    "info" : "ReturnStatement[87748-87768]:ReturnStatement[87747-87767]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[87780-87787]:Modifier[87779-87786]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[87788-87793]:Modifier[87787-87792]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[87794-87798]:PrimitiveType[87793-87797]"
  }, {
    "left" : "_matchTrue",
    "right" : "_matchTrue",
    "info" : "SimpleName[87799-87809]:SimpleName[87798-87808]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[87819-87830]:SimpleType[87818-87829]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[87831-88321]:Block[87830-88320]"
  }, {
    "left" : "int ptr = _inputPtr;",
    "right" : "int ptr = _inputPtr;",
    "info" : "VariableDeclarationStatement[87841-87861]:VariableDeclarationStatement[87840-87860]"
  }, {
    "left" : "if ((ptr + 3) < _inputEnd)",
    "right" : "if ((ptr + 3) < _inputEnd)",
    "info" : "IfStatement[87870-88235]:IfStatement[87869-88234]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[87897-88235]:Block[87896-88234]"
  }, {
    "left" : "final char[] b = _inputBuffer;",
    "right" : "final char[] b = _inputBuffer;",
    "info" : "VariableDeclarationStatement[87911-87941]:VariableDeclarationStatement[87910-87940]"
  }, {
    "left" : "if (b[ptr] == 'r' && b[++ptr] == 'u' && b[++ptr] == 'e')",
    "right" : "if (b[ptr] == 'r' && b[++ptr] == 'u' && b[++ptr] == 'e')",
    "info" : "IfStatement[87954-88225]:IfStatement[87953-88224]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[88011-88225]:Block[88010-88224]"
  }, {
    "left" : "char c = b[++ptr];",
    "right" : "char c = b[++ptr];",
    "info" : "VariableDeclarationStatement[88029-88047]:VariableDeclarationStatement[88028-88046]"
  }, {
    "left" : "if (c < '0' || c == ']' || c == '}')",
    "right" : "if (c < '0' || c == ']' || c == '}')",
    "info" : "IfStatement[88064-88211]:IfStatement[88063-88210]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[88101-88211]:Block[88100-88210]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[88149-88165]:ExpressionStatement[88148-88164]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[88186-88193]:ReturnStatement[88185-88192]"
  }, {
    "left" : "_matchToken(\"true\", 1);",
    "right" : "_matchToken(\"true\", 1);",
    "info" : "ExpressionStatement[88292-88315]:ExpressionStatement[88291-88314]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[88327-88334]:Modifier[88326-88333]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[88335-88340]:Modifier[88334-88339]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[88341-88345]:PrimitiveType[88340-88344]"
  }, {
    "left" : "_matchFalse",
    "right" : "_matchFalse",
    "info" : "SimpleName[88346-88357]:SimpleName[88345-88356]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[88367-88378]:SimpleType[88366-88377]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[88379-88889]:Block[88378-88888]"
  }, {
    "left" : "int ptr = _inputPtr;",
    "right" : "int ptr = _inputPtr;",
    "info" : "VariableDeclarationStatement[88389-88409]:VariableDeclarationStatement[88388-88408]"
  }, {
    "left" : "if ((ptr + 4) < _inputEnd)",
    "right" : "if ((ptr + 4) < _inputEnd)",
    "info" : "IfStatement[88418-88802]:IfStatement[88417-88801]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[88445-88802]:Block[88444-88801]"
  }, {
    "left" : "final char[] b = _inputBuffer;",
    "right" : "final char[] b = _inputBuffer;",
    "info" : "VariableDeclarationStatement[88459-88489]:VariableDeclarationStatement[88458-88488]"
  }, {
    "left" : "if (b[ptr] == 'a' && b[++ptr] == 'l' && b[++ptr] == 's' && b[++ptr] == 'e')",
    "right" : "if (b[ptr] == 'a' && b[++ptr] == 'l' && b[++ptr] == 's' && b[++ptr] == 'e')",
    "info" : "IfStatement[88502-88792]:IfStatement[88501-88791]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[88578-88792]:Block[88577-88791]"
  }, {
    "left" : "char c = b[++ptr];",
    "right" : "char c = b[++ptr];",
    "info" : "VariableDeclarationStatement[88596-88614]:VariableDeclarationStatement[88595-88613]"
  }, {
    "left" : "if (c < '0' || c == ']' || c == '}')",
    "right" : "if (c < '0' || c == ']' || c == '}')",
    "info" : "IfStatement[88631-88778]:IfStatement[88630-88777]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[88668-88778]:Block[88667-88777]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[88716-88732]:ExpressionStatement[88715-88731]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[88753-88760]:ReturnStatement[88752-88759]"
  }, {
    "left" : "_matchToken(\"false\", 1);",
    "right" : "_matchToken(\"false\", 1);",
    "info" : "ExpressionStatement[88859-88883]:ExpressionStatement[88858-88882]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[88895-88902]:Modifier[88894-88901]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[88903-88908]:Modifier[88902-88907]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[88909-88913]:PrimitiveType[88908-88912]"
  }, {
    "left" : "_matchNull",
    "right" : "_matchNull",
    "info" : "SimpleName[88914-88924]:SimpleName[88913-88923]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[88934-88945]:SimpleType[88933-88944]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[88946-89436]:Block[88945-89435]"
  }, {
    "left" : "int ptr = _inputPtr;",
    "right" : "int ptr = _inputPtr;",
    "info" : "VariableDeclarationStatement[88956-88976]:VariableDeclarationStatement[88955-88975]"
  }, {
    "left" : "if ((ptr + 3) < _inputEnd)",
    "right" : "if ((ptr + 3) < _inputEnd)",
    "info" : "IfStatement[88985-89350]:IfStatement[88984-89349]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[89012-89350]:Block[89011-89349]"
  }, {
    "left" : "final char[] b = _inputBuffer;",
    "right" : "final char[] b = _inputBuffer;",
    "info" : "VariableDeclarationStatement[89026-89056]:VariableDeclarationStatement[89025-89055]"
  }, {
    "left" : "if (b[ptr] == 'u' && b[++ptr] == 'l' && b[++ptr] == 'l')",
    "right" : "if (b[ptr] == 'u' && b[++ptr] == 'l' && b[++ptr] == 'l')",
    "info" : "IfStatement[89069-89340]:IfStatement[89068-89339]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[89126-89340]:Block[89125-89339]"
  }, {
    "left" : "char c = b[++ptr];",
    "right" : "char c = b[++ptr];",
    "info" : "VariableDeclarationStatement[89144-89162]:VariableDeclarationStatement[89143-89161]"
  }, {
    "left" : "if (c < '0' || c == ']' || c == '}')",
    "right" : "if (c < '0' || c == ']' || c == '}')",
    "info" : "IfStatement[89179-89326]:IfStatement[89178-89325]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[89216-89326]:Block[89215-89325]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[89264-89280]:ExpressionStatement[89263-89279]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[89301-89308]:ReturnStatement[89300-89307]"
  }, {
    "left" : "_matchToken(\"null\", 1);",
    "right" : "_matchToken(\"null\", 1);",
    "info" : "ExpressionStatement[89407-89430]:ExpressionStatement[89406-89429]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[89529-89538]:Modifier[89528-89537]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[89539-89544]:Modifier[89538-89543]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[89545-89549]:PrimitiveType[89544-89548]"
  }, {
    "left" : "_matchToken",
    "right" : "_matchToken",
    "info" : "SimpleName[89550-89561]:SimpleName[89549-89560]"
  }, {
    "left" : "String matchStr",
    "right" : "String matchStr",
    "info" : "SingleVariableDeclaration[89562-89577]:SingleVariableDeclaration[89561-89576]"
  }, {
    "left" : "int i",
    "right" : "int i",
    "info" : "SingleVariableDeclaration[89579-89584]:SingleVariableDeclaration[89578-89583]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[89593-89604]:SimpleType[89592-89603]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[89609-90158]:Block[89608-90157]"
  }, {
    "left" : "final int len = matchStr.length();",
    "right" : "final int len = matchStr.length();",
    "info" : "VariableDeclarationStatement[89619-89653]:VariableDeclarationStatement[89618-89652]"
  }, {
    "left" : "if ((_inputPtr + len) >= _inputEnd)",
    "right" : "if ((_inputPtr + len) >= _inputEnd)",
    "info" : "IfStatement[89662-89768]:IfStatement[89661-89767]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[89698-89768]:Block[89697-89767]"
  }, {
    "left" : "_matchToken2(matchStr, i);",
    "right" : "_matchToken2(matchStr, i);",
    "info" : "ExpressionStatement[89712-89738]:ExpressionStatement[89711-89737]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[89751-89758]:ReturnStatement[89750-89757]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[89778-89978]:DoStatement[89777-89977]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[89781-89959]:Block[89780-89958]"
  }, {
    "left" : "if (_inputBuffer[_inputPtr] != matchStr.charAt(i))",
    "right" : "if (_inputBuffer[_inputPtr] != matchStr.charAt(i))",
    "info" : "IfStatement[89795-89924]:IfStatement[89794-89923]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[89846-89924]:Block[89845-89923]"
  }, {
    "left" : "_reportInvalidToken(matchStr.substring(0, i));",
    "right" : "_reportInvalidToken(matchStr.substring(0, i));",
    "info" : "ExpressionStatement[89864-89910]:ExpressionStatement[89863-89909]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[89937-89949]:ExpressionStatement[89936-89948]"
  }, {
    "left" : "int ch = _inputBuffer[_inputPtr];",
    "right" : "int ch = _inputBuffer[_inputPtr];",
    "info" : "VariableDeclarationStatement[89987-90020]:VariableDeclarationStatement[89986-90019]"
  }, {
    "left" : "if (ch >= '0' && ch != ']' && ch != '}')",
    "right" : "if (ch >= '0' && ch != ']' && ch != '}')",
    "info" : "IfStatement[90029-90152]:IfStatement[90028-90151]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[90070-90152]:Block[90069-90151]"
  }, {
    "left" : "_checkMatchEnd(matchStr, i, ch);",
    "right" : "_checkMatchEnd(matchStr, i, ch);",
    "info" : "ExpressionStatement[90110-90142]:ExpressionStatement[90109-90141]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[90164-90171]:Modifier[90163-90170]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[90172-90177]:Modifier[90171-90176]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[90178-90182]:PrimitiveType[90177-90181]"
  }, {
    "left" : "_matchToken2",
    "right" : "_matchToken2",
    "info" : "SimpleName[90183-90195]:SimpleName[90182-90194]"
  }, {
    "left" : "String matchStr",
    "right" : "String matchStr",
    "info" : "SingleVariableDeclaration[90196-90211]:SingleVariableDeclaration[90195-90210]"
  }, {
    "left" : "int i",
    "right" : "int i",
    "info" : "SingleVariableDeclaration[90213-90218]:SingleVariableDeclaration[90212-90217]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[90227-90238]:SimpleType[90226-90237]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[90243-90906]:Block[90242-90905]"
  }, {
    "left" : "final int len = matchStr.length();",
    "right" : "final int len = matchStr.length();",
    "info" : "VariableDeclarationStatement[90253-90287]:VariableDeclarationStatement[90252-90286]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[90296-90561]:DoStatement[90295-90560]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[90299-90542]:Block[90298-90541]"
  }, {
    "left" : "if (((_inputPtr >= _inputEnd) && !_loadMore())\n                ||  (_inputBuffer[_inputPtr] != matchStr.charAt(i)))",
    "right" : "if (((_inputPtr >= _inputEnd) && !_loadMore())\n                ||  (_inputBuffer[_inputPtr] != matchStr.charAt(i)))",
    "info" : "IfStatement[90313-90507]:IfStatement[90312-90506]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[90429-90507]:Block[90428-90506]"
  }, {
    "left" : "_reportInvalidToken(matchStr.substring(0, i));",
    "right" : "_reportInvalidToken(matchStr.substring(0, i));",
    "info" : "ExpressionStatement[90447-90493]:ExpressionStatement[90446-90492]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[90520-90532]:ExpressionStatement[90519-90531]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd && !_loadMore())",
    "right" : "if (_inputPtr >= _inputEnd && !_loadMore())",
    "info" : "IfStatement[90651-90726]:IfStatement[90650-90725]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[90695-90726]:Block[90694-90725]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[90709-90716]:ReturnStatement[90708-90715]"
  }, {
    "left" : "int ch = _inputBuffer[_inputPtr];",
    "right" : "int ch = _inputBuffer[_inputPtr];",
    "info" : "VariableDeclarationStatement[90735-90768]:VariableDeclarationStatement[90734-90767]"
  }, {
    "left" : "if (ch >= '0' && ch != ']' && ch != '}')",
    "right" : "if (ch >= '0' && ch != ']' && ch != '}')",
    "info" : "IfStatement[90777-90900]:IfStatement[90776-90899]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[90818-90900]:Block[90817-90899]"
  }, {
    "left" : "_checkMatchEnd(matchStr, i, ch);",
    "right" : "_checkMatchEnd(matchStr, i, ch);",
    "info" : "ExpressionStatement[90858-90890]:ExpressionStatement[90857-90889]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[90912-90919]:Modifier[90911-90918]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[90920-90925]:Modifier[90919-90924]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[90926-90930]:PrimitiveType[90925-90929]"
  }, {
    "left" : "_checkMatchEnd",
    "right" : "_checkMatchEnd",
    "info" : "SimpleName[90931-90945]:SimpleName[90930-90944]"
  }, {
    "left" : "String matchStr",
    "right" : "String matchStr",
    "info" : "SingleVariableDeclaration[90946-90961]:SingleVariableDeclaration[90945-90960]"
  }, {
    "left" : "int i",
    "right" : "int i",
    "info" : "SingleVariableDeclaration[90963-90968]:SingleVariableDeclaration[90962-90967]"
  }, {
    "left" : "int c",
    "right" : "int c",
    "info" : "SingleVariableDeclaration[90970-90975]:SingleVariableDeclaration[90969-90974]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[90984-90995]:SimpleType[90983-90994]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[90996-91205]:Block[90995-91204]"
  }, {
    "left" : "char ch = (char) c;",
    "right" : "char ch = (char) c;",
    "info" : "VariableDeclarationStatement[91061-91080]:VariableDeclarationStatement[91060-91079]"
  }, {
    "left" : "if (Character.isJavaIdentifierPart(ch))",
    "right" : "if (Character.isJavaIdentifierPart(ch))",
    "info" : "IfStatement[91089-91199]:IfStatement[91088-91198]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[91129-91199]:Block[91128-91198]"
  }, {
    "left" : "_reportInvalidToken(matchStr.substring(0, i));",
    "right" : "_reportInvalidToken(matchStr.substring(0, i));",
    "info" : "ExpressionStatement[91143-91189]:ExpressionStatement[91142-91188]"
  }, {
    "left" : "@SuppressWarnings(\"resource\")",
    "right" : "@SuppressWarnings(\"resource\")",
    "info" : "SingleMemberAnnotation[91484-91513]:SingleMemberAnnotation[91483-91512]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[91518-91527]:Modifier[91517-91526]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[91528-91534]:ArrayType[91527-91533]"
  }, {
    "left" : "_decodeBase64",
    "right" : "_decodeBase64",
    "info" : "SimpleName[91535-91548]:SimpleName[91534-91547]"
  }, {
    "left" : "Base64Variant b64variant",
    "right" : "Base64Variant b64variant",
    "info" : "SingleVariableDeclaration[91549-91573]:SingleVariableDeclaration[91548-91572]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[91582-91593]:SimpleType[91581-91592]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[91598-96667]:Block[91597-96666]"
  }, {
    "left" : "ByteArrayBuilder builder = _getByteArrayBuilder();",
    "right" : "ByteArrayBuilder builder = _getByteArrayBuilder();",
    "info" : "VariableDeclarationStatement[91608-91658]:VariableDeclarationStatement[91607-91657]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[91689-96661]:WhileStatement[91688-96660]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[91702-96661]:Block[91701-96660]"
  }, {
    "left" : "char ch;",
    "right" : "char ch;",
    "info" : "VariableDeclarationStatement[91779-91787]:VariableDeclarationStatement[91778-91786]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[91800-91998]:DoStatement[91799-91997]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[91803-91973]:Block[91802-91972]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[91821-91911]:IfStatement[91820-91910]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[91849-91911]:Block[91848-91910]"
  }, {
    "left" : "_loadMoreGuaranteed();",
    "right" : "_loadMoreGuaranteed();",
    "info" : "ExpressionStatement[91871-91893]:ExpressionStatement[91870-91892]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr++];",
    "right" : "ch = _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[91928-91959]:ExpressionStatement[91927-91958]"
  }, {
    "left" : "int bits = b64variant.decodeBase64Char(ch);",
    "right" : "int bits = b64variant.decodeBase64Char(ch);",
    "info" : "VariableDeclarationStatement[92011-92054]:VariableDeclarationStatement[92010-92053]"
  }, {
    "left" : "if (bits < 0)",
    "right" : "if (bits < 0)",
    "info" : "IfStatement[92067-92400]:IfStatement[92066-92399]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[92081-92400]:Block[92080-92399]"
  }, {
    "left" : "if (ch == '\"')",
    "right" : "if (ch == '\"')",
    "info" : "IfStatement[92099-92220]:IfStatement[92098-92219]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[92114-92220]:Block[92113-92219]"
  }, {
    "left" : "return builder.toByteArray();",
    "right" : "return builder.toByteArray();",
    "info" : "ReturnStatement[92173-92202]:ReturnStatement[92172-92201]"
  }, {
    "left" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
    "right" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
    "info" : "ExpressionStatement[92237-92283]:ExpressionStatement[92236-92282]"
  }, {
    "left" : "if (bits < 0)",
    "right" : "if (bits < 0)",
    "info" : "IfStatement[92300-92386]:IfStatement[92299-92385]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[92314-92386]:Block[92313-92385]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[92359-92368]:ContinueStatement[92358-92367]"
  }, {
    "left" : "int decodedData = bits;",
    "right" : "int decodedData = bits;",
    "info" : "VariableDeclarationStatement[92413-92436]:VariableDeclarationStatement[92412-92435]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[92521-92603]:IfStatement[92520-92602]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[92549-92603]:Block[92548-92602]"
  }, {
    "left" : "_loadMoreGuaranteed();",
    "right" : "_loadMoreGuaranteed();",
    "info" : "ExpressionStatement[92567-92589]:ExpressionStatement[92566-92588]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr++];",
    "right" : "ch = _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[92616-92647]:ExpressionStatement[92615-92646]"
  }, {
    "left" : "bits = b64variant.decodeBase64Char(ch);",
    "right" : "bits = b64variant.decodeBase64Char(ch);",
    "info" : "ExpressionStatement[92660-92699]:ExpressionStatement[92659-92698]"
  }, {
    "left" : "if (bits < 0)",
    "right" : "if (bits < 0)",
    "info" : "IfStatement[92712-92804]:IfStatement[92711-92803]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[92726-92804]:Block[92725-92803]"
  }, {
    "left" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
    "right" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
    "info" : "ExpressionStatement[92744-92790]:ExpressionStatement[92743-92789]"
  }, {
    "left" : "decodedData = (decodedData << 6) | bits;",
    "right" : "decodedData = (decodedData << 6) | bits;",
    "info" : "ExpressionStatement[92817-92857]:ExpressionStatement[92816-92856]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[92932-93014]:IfStatement[92931-93013]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[92960-93014]:Block[92959-93013]"
  }, {
    "left" : "_loadMoreGuaranteed();",
    "right" : "_loadMoreGuaranteed();",
    "info" : "ExpressionStatement[92978-93000]:ExpressionStatement[92977-92999]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr++];",
    "right" : "ch = _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[93027-93058]:ExpressionStatement[93026-93057]"
  }, {
    "left" : "bits = b64variant.decodeBase64Char(ch);",
    "right" : "bits = b64variant.decodeBase64Char(ch);",
    "info" : "ExpressionStatement[93071-93110]:ExpressionStatement[93070-93109]"
  }, {
    "left" : "if (bits < 0)",
    "right" : "if (bits < 0)",
    "info" : "IfStatement[93181-94821]:IfStatement[93180-94820]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[93195-94821]:Block[93194-94820]"
  }, {
    "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
    "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
    "info" : "IfStatement[93213-93875]:IfStatement[93212-93874]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[93261-93875]:Block[93260-93874]"
  }, {
    "left" : "if (ch == '\"')",
    "right" : "if (ch == '\"')",
    "info" : "IfStatement[93366-93790]:IfStatement[93365-93789]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[93381-93790]:Block[93380-93789]"
  }, {
    "left" : "decodedData >>= 4;",
    "right" : "decodedData >>= 4;",
    "info" : "ExpressionStatement[93407-93425]:ExpressionStatement[93406-93424]"
  }, {
    "left" : "builder.append(decodedData);",
    "right" : "builder.append(decodedData);",
    "info" : "ExpressionStatement[93450-93478]:ExpressionStatement[93449-93477]"
  }, {
    "left" : "if (b64variant.usesPadding())",
    "right" : "if (b64variant.usesPadding())",
    "info" : "IfStatement[93503-93714]:IfStatement[93502-93713]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[93533-93714]:Block[93532-93713]"
  }, {
    "left" : "--_inputPtr;",
    "right" : "--_inputPtr;",
    "info" : "ExpressionStatement[93563-93575]:ExpressionStatement[93562-93574]"
  }, {
    "left" : "_handleBase64MissingPadding(b64variant);",
    "right" : "_handleBase64MissingPadding(b64variant);",
    "info" : "ExpressionStatement[93648-93688]:ExpressionStatement[93647-93687]"
  }, {
    "left" : "return builder.toByteArray();",
    "right" : "return builder.toByteArray();",
    "info" : "ReturnStatement[93739-93768]:ReturnStatement[93738-93767]"
  }, {
    "left" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
    "right" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
    "info" : "ExpressionStatement[93811-93857]:ExpressionStatement[93810-93856]"
  }, {
    "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
    "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
    "info" : "IfStatement[93892-94729]:IfStatement[93891-94728]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[93940-94729]:Block[93939-94728]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[94023-94121]:IfStatement[94022-94120]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[94051-94121]:Block[94050-94120]"
  }, {
    "left" : "_loadMoreGuaranteed();",
    "right" : "_loadMoreGuaranteed();",
    "info" : "ExpressionStatement[94077-94099]:ExpressionStatement[94076-94098]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr++];",
    "right" : "ch = _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[94142-94173]:ExpressionStatement[94141-94172]"
  }, {
    "left" : "if (!b64variant.usesPaddingChar(ch))",
    "right" : "if (!b64variant.usesPaddingChar(ch))",
    "info" : "IfStatement[94194-94530]:IfStatement[94193-94529]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[94231-94530]:Block[94230-94529]"
  }, {
    "left" : "if (_decodeBase64Escape(b64variant, ch, 3) != Base64Variant.BASE64_VALUE_PADDING)",
    "right" : "if (_decodeBase64Escape(b64variant, ch, 3) != Base64Variant.BASE64_VALUE_PADDING)",
    "info" : "IfStatement[94257-94508]:IfStatement[94256-94507]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[94339-94508]:Block[94338-94507]"
  }, {
    "left" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
    "right" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
    "info" : "ThrowStatement[94369-94482]:ThrowStatement[94368-94481]"
  }, {
    "left" : "decodedData >>= 4;",
    "right" : "decodedData >>= 4;",
    "info" : "ExpressionStatement[94614-94632]:ExpressionStatement[94613-94631]"
  }, {
    "left" : "builder.append(decodedData);",
    "right" : "builder.append(decodedData);",
    "info" : "ExpressionStatement[94653-94681]:ExpressionStatement[94652-94680]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[94702-94711]:ContinueStatement[94701-94710]"
  }, {
    "left" : "decodedData = (decodedData << 6) | bits;",
    "right" : "decodedData = (decodedData << 6) | bits;",
    "info" : "ExpressionStatement[94868-94908]:ExpressionStatement[94867-94907]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[94992-95074]:IfStatement[94991-95073]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[95020-95074]:Block[95019-95073]"
  }, {
    "left" : "_loadMoreGuaranteed();",
    "right" : "_loadMoreGuaranteed();",
    "info" : "ExpressionStatement[95038-95060]:ExpressionStatement[95037-95059]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr++];",
    "right" : "ch = _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[95087-95118]:ExpressionStatement[95086-95117]"
  }, {
    "left" : "bits = b64variant.decodeBase64Char(ch);",
    "right" : "bits = b64variant.decodeBase64Char(ch);",
    "info" : "ExpressionStatement[95131-95170]:ExpressionStatement[95130-95169]"
  }, {
    "left" : "if (bits < 0)",
    "right" : "if (bits < 0)",
    "info" : "IfStatement[95183-96493]:IfStatement[95182-96492]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[95197-96493]:Block[95196-96492]"
  }, {
    "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
    "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
    "info" : "IfStatement[95215-95885]:IfStatement[95214-95884]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[95263-95885]:Block[95262-95884]"
  }, {
    "left" : "if (ch == '\"')",
    "right" : "if (ch == '\"')",
    "info" : "IfStatement[95368-95800]:IfStatement[95367-95799]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[95383-95800]:Block[95382-95799]"
  }, {
    "left" : "decodedData >>= 2;",
    "right" : "decodedData >>= 2;",
    "info" : "ExpressionStatement[95409-95427]:ExpressionStatement[95408-95426]"
  }, {
    "left" : "builder.appendTwoBytes(decodedData);",
    "right" : "builder.appendTwoBytes(decodedData);",
    "info" : "ExpressionStatement[95452-95488]:ExpressionStatement[95451-95487]"
  }, {
    "left" : "if (b64variant.usesPadding())",
    "right" : "if (b64variant.usesPadding())",
    "info" : "IfStatement[95513-95724]:IfStatement[95512-95723]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[95543-95724]:Block[95542-95723]"
  }, {
    "left" : "--_inputPtr;",
    "right" : "--_inputPtr;",
    "info" : "ExpressionStatement[95573-95585]:ExpressionStatement[95572-95584]"
  }, {
    "left" : "_handleBase64MissingPadding(b64variant);",
    "right" : "_handleBase64MissingPadding(b64variant);",
    "info" : "ExpressionStatement[95658-95698]:ExpressionStatement[95657-95697]"
  }, {
    "left" : "return builder.toByteArray();",
    "right" : "return builder.toByteArray();",
    "info" : "ReturnStatement[95749-95778]:ReturnStatement[95748-95777]"
  }, {
    "left" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
    "right" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
    "info" : "ExpressionStatement[95821-95867]:ExpressionStatement[95820-95866]"
  }, {
    "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
    "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
    "info" : "IfStatement[95902-96401]:IfStatement[95901-96400]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[95950-96401]:Block[95949-96400]"
  }, {
    "left" : "decodedData >>= 2;",
    "right" : "decodedData >>= 2;",
    "info" : "ExpressionStatement[96278-96296]:ExpressionStatement[96277-96295]"
  }, {
    "left" : "builder.appendTwoBytes(decodedData);",
    "right" : "builder.appendTwoBytes(decodedData);",
    "info" : "ExpressionStatement[96317-96353]:ExpressionStatement[96316-96352]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[96374-96383]:ContinueStatement[96373-96382]"
  }, {
    "left" : "decodedData = (decodedData << 6) | bits;",
    "right" : "decodedData = (decodedData << 6) | bits;",
    "info" : "ExpressionStatement[96560-96600]:ExpressionStatement[96559-96599]"
  }, {
    "left" : "builder.appendThreeBytes(decodedData);",
    "right" : "builder.appendThreeBytes(decodedData);",
    "info" : "ExpressionStatement[96613-96651]:ExpressionStatement[96612-96650]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[96880-96889]:MarkerAnnotation[96879-96888]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[96894-96900]:Modifier[96893-96899]"
  }, {
    "left" : "JsonLocation",
    "right" : "JsonLocation",
    "info" : "SimpleType[96901-96913]:SimpleType[96900-96912]"
  }, {
    "left" : "getTokenLocation",
    "right" : "getTokenLocation",
    "info" : "SimpleName[96914-96930]:SimpleName[96913-96929]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[96937-97324]:Block[96936-97323]"
  }, {
    "left" : "if (_currToken == JsonToken.FIELD_NAME)",
    "right" : "if (_currToken == JsonToken.FIELD_NAME)",
    "info" : "IfStatement[96947-97189]:IfStatement[96946-97188]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[96987-97189]:Block[96986-97188]"
  }, {
    "left" : "long total = _currInputProcessed + (_nameStartOffset-1);",
    "right" : "long total = _currInputProcessed + (_nameStartOffset-1);",
    "info" : "VariableDeclarationStatement[97001-97057]:VariableDeclarationStatement[97000-97056]"
  }, {
    "left" : "return new JsonLocation(_getSourceReference(),\n                    -1L, total, _nameStartRow, _nameStartCol);",
    "right" : "return new JsonLocation(_getSourceReference(),\n                    -1L, total, _nameStartRow, _nameStartCol);",
    "info" : "ReturnStatement[97070-97179]:ReturnStatement[97069-97178]"
  }, {
    "left" : "return new JsonLocation(_getSourceReference(),\n                -1L, _tokenInputTotal-1, _tokenInputRow, _tokenInputCol);",
    "right" : "return new JsonLocation(_getSourceReference(),\n                -1L, _tokenInputTotal-1, _tokenInputRow, _tokenInputCol);",
    "info" : "ReturnStatement[97198-97318]:ReturnStatement[97197-97317]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[97330-97339]:MarkerAnnotation[97329-97338]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[97344-97350]:Modifier[97343-97349]"
  }, {
    "left" : "JsonLocation",
    "right" : "JsonLocation",
    "info" : "SimpleType[97351-97363]:SimpleType[97350-97362]"
  }, {
    "left" : "getCurrentLocation",
    "right" : "getCurrentLocation",
    "info" : "SimpleName[97364-97382]:SimpleName[97363-97381]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[97385-97603]:Block[97384-97602]"
  }, {
    "left" : "int col = _inputPtr - _currInputRowStart + 1;",
    "right" : "int col = _inputPtr - _currInputRowStart + 1;",
    "info" : "VariableDeclarationStatement[97395-97440]:VariableDeclarationStatement[97394-97439]"
  }, {
    "left" : "return new JsonLocation(_getSourceReference(),\n                -1L, _currInputProcessed + _inputPtr,\n                _currInputRow, col);",
    "right" : "return new JsonLocation(_getSourceReference(),\n                -1L, _currInputProcessed + _inputPtr,\n                _currInputRow, col);",
    "info" : "ReturnStatement[97460-97597]:ReturnStatement[97459-97596]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[97627-97634]:Modifier[97626-97633]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[97635-97640]:Modifier[97634-97639]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[97641-97645]:PrimitiveType[97640-97644]"
  }, {
    "left" : "_updateLocation",
    "right" : "_updateLocation",
    "info" : "SimpleName[97646-97661]:SimpleName[97645-97660]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[97668-97849]:Block[97667-97848]"
  }, {
    "left" : "int ptr = _inputPtr;",
    "right" : "int ptr = _inputPtr;",
    "info" : "VariableDeclarationStatement[97678-97698]:VariableDeclarationStatement[97677-97697]"
  }, {
    "left" : "_tokenInputTotal = _currInputProcessed + ptr;",
    "right" : "_tokenInputTotal = _currInputProcessed + ptr;",
    "info" : "ExpressionStatement[97707-97752]:ExpressionStatement[97706-97751]"
  }, {
    "left" : "_tokenInputRow = _currInputRow;",
    "right" : "_tokenInputRow = _currInputRow;",
    "info" : "ExpressionStatement[97761-97792]:ExpressionStatement[97760-97791]"
  }, {
    "left" : "_tokenInputCol = ptr - _currInputRowStart;",
    "right" : "_tokenInputCol = ptr - _currInputRowStart;",
    "info" : "ExpressionStatement[97801-97843]:ExpressionStatement[97800-97842]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[97873-97880]:Modifier[97872-97879]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[97881-97886]:Modifier[97880-97885]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[97887-97891]:PrimitiveType[97886-97890]"
  }, {
    "left" : "_updateNameLocation",
    "right" : "_updateNameLocation",
    "info" : "SimpleName[97892-97911]:SimpleName[97891-97910]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[97918-98075]:Block[97917-98074]"
  }, {
    "left" : "int ptr = _inputPtr;",
    "right" : "int ptr = _inputPtr;",
    "info" : "VariableDeclarationStatement[97928-97948]:VariableDeclarationStatement[97927-97947]"
  }, {
    "left" : "_nameStartOffset = ptr;",
    "right" : "_nameStartOffset = ptr;",
    "info" : "ExpressionStatement[97957-97980]:ExpressionStatement[97956-97979]"
  }, {
    "left" : "_nameStartRow = _currInputRow;",
    "right" : "_nameStartRow = _currInputRow;",
    "info" : "ExpressionStatement[97989-98019]:ExpressionStatement[97988-98018]"
  }, {
    "left" : "_nameStartCol = ptr - _currInputRowStart;",
    "right" : "_nameStartCol = ptr - _currInputRowStart;",
    "info" : "ExpressionStatement[98028-98069]:ExpressionStatement[98027-98068]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[98248-98257]:Modifier[98247-98256]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[98258-98262]:PrimitiveType[98257-98261]"
  }, {
    "left" : "_reportInvalidToken",
    "right" : "_reportInvalidToken",
    "info" : "SimpleName[98263-98282]:SimpleName[98262-98281]"
  }, {
    "left" : "String matchedPart",
    "right" : "String matchedPart",
    "info" : "SingleVariableDeclaration[98283-98301]:SingleVariableDeclaration[98282-98300]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[98310-98321]:SimpleType[98309-98320]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[98322-98405]:Block[98321-98404]"
  }, {
    "left" : "_reportInvalidToken(matchedPart, \"'null', 'true', 'false' or NaN\");",
    "right" : "_reportInvalidToken(matchedPart, \"'null', 'true', 'false' or NaN\");",
    "info" : "ExpressionStatement[98332-98399]:ExpressionStatement[98331-98398]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[98411-98420]:Modifier[98410-98419]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[98421-98425]:PrimitiveType[98420-98424]"
  }, {
    "left" : "_reportInvalidToken",
    "right" : "_reportInvalidToken",
    "info" : "SimpleName[98426-98445]:SimpleName[98425-98444]"
  }, {
    "left" : "String matchedPart",
    "right" : "String matchedPart",
    "info" : "SingleVariableDeclaration[98446-98464]:SingleVariableDeclaration[98445-98463]"
  }, {
    "left" : "String msg",
    "right" : "String msg",
    "info" : "SingleVariableDeclaration[98466-98476]:SingleVariableDeclaration[98465-98475]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[98485-98496]:SimpleType[98484-98495]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[98501-99214]:Block[98500-99213]"
  }, {
    "left" : "StringBuilder sb = new StringBuilder(matchedPart);",
    "right" : "StringBuilder sb = new StringBuilder(matchedPart);",
    "info" : "VariableDeclarationStatement[98699-98749]:VariableDeclarationStatement[98698-98748]"
  }, {
    "left" : "while ((_inputPtr < _inputEnd) || _loadMore())",
    "right" : "while ((_inputPtr < _inputEnd) || _loadMore())",
    "info" : "WhileStatement[98758-99132]:WhileStatement[98757-99131]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[98805-99132]:Block[98804-99131]"
  }, {
    "left" : "char c = _inputBuffer[_inputPtr];",
    "right" : "char c = _inputBuffer[_inputPtr];",
    "info" : "VariableDeclarationStatement[98819-98852]:VariableDeclarationStatement[98818-98851]"
  }, {
    "left" : "if (!Character.isJavaIdentifierPart(c))",
    "right" : "if (!Character.isJavaIdentifierPart(c))",
    "info" : "IfStatement[98865-98943]:IfStatement[98864-98942]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[98905-98943]:Block[98904-98942]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[98923-98929]:BreakStatement[98922-98928]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[98956-98968]:ExpressionStatement[98955-98967]"
  }, {
    "left" : "sb.append(c);",
    "right" : "sb.append(c);",
    "info" : "ExpressionStatement[98981-98994]:ExpressionStatement[98980-98993]"
  }, {
    "left" : "if (sb.length() >= MAX_ERROR_TOKEN_LENGTH)",
    "right" : "if (sb.length() >= MAX_ERROR_TOKEN_LENGTH)",
    "info" : "IfStatement[99007-99122]:IfStatement[99006-99121]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[99050-99122]:Block[99049-99121]"
  }, {
    "left" : "sb.append(\"...\");",
    "right" : "sb.append(\"...\");",
    "info" : "ExpressionStatement[99068-99085]:ExpressionStatement[99067-99084]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[99102-99108]:BreakStatement[99101-99107]"
  }, {
    "left" : "_reportError(\"Unrecognized token '%s': was expecting %s\", sb, msg);",
    "right" : "_reportError(\"Unrecognized token '%s': was expecting %s\", sb, msg);",
    "info" : "ExpressionStatement[99141-99208]:ExpressionStatement[99140-99207]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[99395-99402]:Modifier[99394-99401]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[99403-99407]:PrimitiveType[99402-99406]"
  }, {
    "left" : "_closeScope",
    "right" : "_closeScope",
    "info" : "SimpleName[99408-99419]:SimpleName[99407-99418]"
  }, {
    "left" : "int i",
    "right" : "int i",
    "info" : "SingleVariableDeclaration[99420-99425]:SingleVariableDeclaration[99419-99424]"
  }, {
    "left" : "JsonParseException",
    "right" : "JsonParseException",
    "info" : "SimpleType[99434-99452]:SimpleType[99433-99451]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[99453-100058]:Block[99452-100057]"
  }, {
    "left" : "if (i == INT_RBRACKET)",
    "right" : "if (i == INT_RBRACKET)",
    "info" : "IfStatement[99463-99753]:IfStatement[99462-99752]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[99486-99753]:Block[99485-99752]"
  }, {
    "left" : "_updateLocation();",
    "right" : "_updateLocation();",
    "info" : "ExpressionStatement[99500-99518]:ExpressionStatement[99499-99517]"
  }, {
    "left" : "if (!_parsingContext.inArray())",
    "right" : "if (!_parsingContext.inArray())",
    "info" : "IfStatement[99531-99630]:IfStatement[99530-99629]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[99563-99630]:Block[99562-99629]"
  }, {
    "left" : "_reportMismatchedEndMarker(i, '}');",
    "right" : "_reportMismatchedEndMarker(i, '}');",
    "info" : "ExpressionStatement[99581-99616]:ExpressionStatement[99580-99615]"
  }, {
    "left" : "_parsingContext = _parsingContext.clearAndGetParent();",
    "right" : "_parsingContext = _parsingContext.clearAndGetParent();",
    "info" : "ExpressionStatement[99643-99697]:ExpressionStatement[99642-99696]"
  }, {
    "left" : "_currToken = JsonToken.END_ARRAY;",
    "right" : "_currToken = JsonToken.END_ARRAY;",
    "info" : "ExpressionStatement[99710-99743]:ExpressionStatement[99709-99742]"
  }, {
    "left" : "if (i == INT_RCURLY)",
    "right" : "if (i == INT_RCURLY)",
    "info" : "IfStatement[99762-100052]:IfStatement[99761-100051]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[99783-100052]:Block[99782-100051]"
  }, {
    "left" : "_updateLocation();",
    "right" : "_updateLocation();",
    "info" : "ExpressionStatement[99797-99815]:ExpressionStatement[99796-99814]"
  }, {
    "left" : "if (!_parsingContext.inObject())",
    "right" : "if (!_parsingContext.inObject())",
    "info" : "IfStatement[99828-99928]:IfStatement[99827-99927]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[99861-99928]:Block[99860-99927]"
  }, {
    "left" : "_reportMismatchedEndMarker(i, ']');",
    "right" : "_reportMismatchedEndMarker(i, ']');",
    "info" : "ExpressionStatement[99879-99914]:ExpressionStatement[99878-99913]"
  }, {
    "left" : "_parsingContext = _parsingContext.clearAndGetParent();",
    "right" : "_parsingContext = _parsingContext.clearAndGetParent();",
    "info" : "ExpressionStatement[99941-99995]:ExpressionStatement[99940-99994]"
  }, {
    "left" : "_currToken = JsonToken.END_OBJECT;",
    "right" : "_currToken = JsonToken.END_OBJECT;",
    "info" : "ExpressionStatement[100008-100042]:ExpressionStatement[100007-100041]"
  } ]
}