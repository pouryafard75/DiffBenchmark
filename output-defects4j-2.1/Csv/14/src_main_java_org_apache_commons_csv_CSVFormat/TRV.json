{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "enum : Predefined",
      "right" : "enum : Predefined",
      "info" : "EnumDeclaration[4554-5696]:EnumDeclaration[4554-5696]"
    }, {
      "left" : "private final CSVFormat format;",
      "right" : "private final CSVFormat format;",
      "info" : "FieldDeclaration[5398-5429]:FieldDeclaration[5398-5429]"
    }, {
      "left" : "Predefined(final CSVFormat format)",
      "right" : "Predefined(final CSVFormat format)",
      "info" : "MethodDeclaration[5439-5519]:MethodDeclaration[5439-5519]"
    }, {
      "left" : "public CSVFormat getFormat()",
      "right" : "public CSVFormat getFormat()",
      "info" : "MethodDeclaration[5529-5690]:MethodDeclaration[5529-5690]"
    }, {
      "left" : "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true, CRLF,\n            null, null, null, false, false, false, false, false);",
      "right" : "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true, CRLF,\n            null, null, null, false, false, false, false, false);",
      "info" : "FieldDeclaration[5702-6257]:FieldDeclaration[5702-6257]"
    }, {
      "left" : "public static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false).withAllowMissingColumnNames();",
      "right" : "public static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false).withAllowMissingColumnNames();",
      "info" : "FieldDeclaration[6263-7510]:FieldDeclaration[6263-7510]"
    }, {
      "left" : "public static final CSVFormat INFORMIX_UNLOAD = DEFAULT.withDelimiter(PIPE).withEscape(BACKSLASH)\n            .withQuote(DOUBLE_QUOTE_CHAR).withRecordSeparator(LF);",
      "right" : "public static final CSVFormat INFORMIX_UNLOAD = DEFAULT.withDelimiter(PIPE).withEscape(BACKSLASH)\n            .withQuote(DOUBLE_QUOTE_CHAR).withRecordSeparator(LF);",
      "info" : "FieldDeclaration[7516-8558]:FieldDeclaration[7516-8558]"
    }, {
      "left" : "public static final CSVFormat INFORMIX_UNLOAD_CSV = DEFAULT.withDelimiter(COMMA).withQuote(DOUBLE_QUOTE_CHAR)\n            .withRecordSeparator(LF);",
      "right" : "public static final CSVFormat INFORMIX_UNLOAD_CSV = DEFAULT.withDelimiter(COMMA).withQuote(DOUBLE_QUOTE_CHAR)\n            .withRecordSeparator(LF);",
      "info" : "FieldDeclaration[8564-9579]:FieldDeclaration[8564-9579]"
    }, {
      "left" : "public static final CSVFormat MYSQL = DEFAULT.withDelimiter(TAB).withEscape(BACKSLASH).withIgnoreEmptyLines(false)\n            .withQuote(null).withRecordSeparator(LF).withNullString(\"\\\\N\");",
      "right" : "public static final CSVFormat MYSQL = DEFAULT.withDelimiter(TAB).withEscape(BACKSLASH).withIgnoreEmptyLines(false)\n            .withQuote(null).withRecordSeparator(LF).withNullString(\"\\\\N\");",
      "info" : "FieldDeclaration[9585-10620]:FieldDeclaration[9585-10620]"
    }, {
      "left" : "public static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);",
      "right" : "public static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);",
      "info" : "FieldDeclaration[10626-11089]:FieldDeclaration[10626-11089]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[11095-11143]:FieldDeclaration[11095-11143]"
    }, {
      "left" : "public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces();",
      "right" : "public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces();",
      "info" : "FieldDeclaration[11149-11558]:FieldDeclaration[11149-11558]"
    }, {
      "left" : "private static boolean isLineBreak(final char c)",
      "right" : "private static boolean isLineBreak(final char c)",
      "info" : "MethodDeclaration[11564-11876]:MethodDeclaration[11564-11876]"
    }, {
      "left" : "private static boolean isLineBreak(final Character c)",
      "right" : "private static boolean isLineBreak(final Character c)",
      "info" : "MethodDeclaration[11882-12248]:MethodDeclaration[11882-12248]"
    }, {
      "left" : "public static CSVFormat newFormat(final char delimiter)",
      "right" : "public static CSVFormat newFormat(final char delimiter)",
      "info" : "MethodDeclaration[12254-13082]:MethodDeclaration[12254-13082]"
    }, {
      "left" : "public static CSVFormat valueOf(final String format)",
      "right" : "public static CSVFormat valueOf(final String format)",
      "info" : "MethodDeclaration[13088-13420]:MethodDeclaration[13088-13420]"
    }, {
      "left" : "private final boolean allowMissingColumnNames;",
      "right" : "private final boolean allowMissingColumnNames;",
      "info" : "FieldDeclaration[13426-13472]:FieldDeclaration[13426-13472]"
    }, {
      "left" : "private final Character commentMarker;",
      "right" : "private final Character commentMarker;",
      "info" : "FieldDeclaration[13478-13516]:FieldDeclaration[13478-13516]"
    }, {
      "left" : "private final char delimiter;",
      "right" : "private final char delimiter;",
      "info" : "FieldDeclaration[13556-13585]:FieldDeclaration[13556-13585]"
    }, {
      "left" : "private final Character escapeCharacter;",
      "right" : "private final Character escapeCharacter;",
      "info" : "FieldDeclaration[13591-13631]:FieldDeclaration[13591-13631]"
    }, {
      "left" : "private final String[] header;",
      "right" : "private final String[] header;",
      "info" : "FieldDeclaration[13669-13699]:FieldDeclaration[13669-13699]"
    }, {
      "left" : "private final String[] headerComments;",
      "right" : "private final String[] headerComments;",
      "info" : "FieldDeclaration[13737-13775]:FieldDeclaration[13737-13775]"
    }, {
      "left" : "private final boolean ignoreEmptyLines;",
      "right" : "private final boolean ignoreEmptyLines;",
      "info" : "FieldDeclaration[13814-13853]:FieldDeclaration[13814-13853]"
    }, {
      "left" : "private final boolean ignoreHeaderCase;",
      "right" : "private final boolean ignoreHeaderCase;",
      "info" : "FieldDeclaration[13859-13898]:FieldDeclaration[13859-13898]"
    }, {
      "left" : "private final boolean ignoreSurroundingSpaces;",
      "right" : "private final boolean ignoreSurroundingSpaces;",
      "info" : "FieldDeclaration[13939-13985]:FieldDeclaration[13939-13985]"
    }, {
      "left" : "private final String nullString;",
      "right" : "private final String nullString;",
      "info" : "FieldDeclaration[14051-14083]:FieldDeclaration[14051-14083]"
    }, {
      "left" : "private final Character quoteCharacter;",
      "right" : "private final Character quoteCharacter;",
      "info" : "FieldDeclaration[14130-14169]:FieldDeclaration[14130-14169]"
    }, {
      "left" : "private final QuoteMode quoteMode;",
      "right" : "private final QuoteMode quoteMode;",
      "info" : "FieldDeclaration[14206-14240]:FieldDeclaration[14206-14240]"
    }, {
      "left" : "private final String recordSeparator;",
      "right" : "private final String recordSeparator;",
      "info" : "FieldDeclaration[14246-14283]:FieldDeclaration[14246-14283]"
    }, {
      "left" : "private final boolean skipHeaderRecord;",
      "right" : "private final boolean skipHeaderRecord;",
      "info" : "FieldDeclaration[14304-14343]:FieldDeclaration[14304-14343]"
    }, {
      "left" : "private final boolean trailingDelimiter;",
      "right" : "private final boolean trailingDelimiter;",
      "info" : "FieldDeclaration[14349-14389]:FieldDeclaration[14349-14389]"
    }, {
      "left" : "private final boolean trim;",
      "right" : "private final boolean trim;",
      "info" : "FieldDeclaration[14395-14422]:FieldDeclaration[14395-14422]"
    }, {
      "left" : "private CSVFormat(final char delimiter, final Character quoteChar, final QuoteMode quoteMode,\n            final Character commentStart, final Character escape, final boolean ignoreSurroundingSpaces,\n            final boolean ignoreEmptyLines, final String recordSeparator, final String nullString,\n            final Object[] headerComments, final String[] header, final boolean skipHeaderRecord,\n            final boolean allowMissingColumnNames, final boolean ignoreHeaderCase, final boolean trim,\n            final boolean trailingDelimiter)",
      "right" : "private CSVFormat(final char delimiter, final Character quoteChar, final QuoteMode quoteMode,\n            final Character commentStart, final Character escape, final boolean ignoreSurroundingSpaces,\n            final boolean ignoreEmptyLines, final String recordSeparator, final String nullString,\n            final Object[] headerComments, final String[] header, final boolean skipHeaderRecord,\n            final boolean allowMissingColumnNames, final boolean ignoreHeaderCase, final boolean trim,\n            final boolean trailingDelimiter)",
      "info" : "MethodDeclaration[14428-17289]:MethodDeclaration[14428-17289]"
    }, {
      "left" : "public boolean equals(final Object obj)",
      "right" : "public boolean equals(final Object obj)",
      "info" : "MethodDeclaration[17295-19329]:MethodDeclaration[17295-19329]"
    }, {
      "left" : "public String format(final Object... values)",
      "right" : "public String format(final Object... values)",
      "info" : "MethodDeclaration[19335-19924]:MethodDeclaration[19335-19924]"
    }, {
      "left" : "public boolean getAllowMissingColumnNames()",
      "right" : "public boolean getAllowMissingColumnNames()",
      "info" : "MethodDeclaration[19930-20301]:MethodDeclaration[19930-20301]"
    }, {
      "left" : "public Character getCommentMarker()",
      "right" : "public Character getCommentMarker()",
      "info" : "MethodDeclaration[20307-20530]:MethodDeclaration[20307-20530]"
    }, {
      "left" : "public char getDelimiter()",
      "right" : "public char getDelimiter()",
      "info" : "MethodDeclaration[20536-20739]:MethodDeclaration[20536-20739]"
    }, {
      "left" : "public Character getEscapeCharacter()",
      "right" : "public Character getEscapeCharacter()",
      "info" : "MethodDeclaration[20745-20939]:MethodDeclaration[20745-20939]"
    }, {
      "left" : "public String[] getHeader()",
      "right" : "public String[] getHeader()",
      "info" : "MethodDeclaration[20945-21214]:MethodDeclaration[20945-21214]"
    }, {
      "left" : "public String[] getHeaderComments()",
      "right" : "public String[] getHeaderComments()",
      "info" : "MethodDeclaration[21220-21485]:MethodDeclaration[21220-21485]"
    }, {
      "left" : "public boolean getIgnoreEmptyLines()",
      "right" : "public boolean getIgnoreEmptyLines()",
      "info" : "MethodDeclaration[21491-21816]:MethodDeclaration[21491-21816]"
    }, {
      "left" : "public boolean getIgnoreHeaderCase()",
      "right" : "public boolean getIgnoreHeaderCase()",
      "info" : "MethodDeclaration[21822-22115]:MethodDeclaration[21822-22115]"
    }, {
      "left" : "public boolean getIgnoreSurroundingSpaces()",
      "right" : "public boolean getIgnoreSurroundingSpaces()",
      "info" : "MethodDeclaration[22121-22434]:MethodDeclaration[22121-22434]"
    }, {
      "left" : "public String getNullString()",
      "right" : "public String getNullString()",
      "info" : "MethodDeclaration[22440-22972]:MethodDeclaration[22440-22972]"
    }, {
      "left" : "public Character getQuoteCharacter()",
      "right" : "public Character getQuoteCharacter()",
      "info" : "MethodDeclaration[22978-23223]:MethodDeclaration[22978-23223]"
    }, {
      "left" : "public QuoteMode getQuoteMode()",
      "right" : "public QuoteMode getQuoteMode()",
      "info" : "MethodDeclaration[23229-23396]:MethodDeclaration[23229-23396]"
    }, {
      "left" : "public String getRecordSeparator()",
      "right" : "public String getRecordSeparator()",
      "info" : "MethodDeclaration[23402-23598]:MethodDeclaration[23402-23598]"
    }, {
      "left" : "public boolean getSkipHeaderRecord()",
      "right" : "public boolean getSkipHeaderRecord()",
      "info" : "MethodDeclaration[23604-23804]:MethodDeclaration[23604-23804]"
    }, {
      "left" : "public boolean getTrailingDelimiter()",
      "right" : "public boolean getTrailingDelimiter()",
      "info" : "MethodDeclaration[23810-24034]:MethodDeclaration[23810-24034]"
    }, {
      "left" : "public boolean getTrim()",
      "right" : "public boolean getTrim()",
      "info" : "MethodDeclaration[24040-24236]:MethodDeclaration[24040-24236]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[24242-25294]:MethodDeclaration[24242-25294]"
    }, {
      "left" : "public boolean isCommentMarkerSet()",
      "right" : "public boolean isCommentMarkerSet()",
      "info" : "MethodDeclaration[25300-25647]:MethodDeclaration[25300-25647]"
    }, {
      "left" : "public boolean isEscapeCharacterSet()",
      "right" : "public boolean isEscapeCharacterSet()",
      "info" : "MethodDeclaration[25653-25865]:MethodDeclaration[25653-25865]"
    }, {
      "left" : "public boolean isNullStringSet()",
      "right" : "public boolean isNullStringSet()",
      "info" : "MethodDeclaration[25871-26078]:MethodDeclaration[25871-26078]"
    }, {
      "left" : "public boolean isQuoteCharacterSet()",
      "right" : "public boolean isQuoteCharacterSet()",
      "info" : "MethodDeclaration[26084-26297]:MethodDeclaration[26084-26297]"
    }, {
      "left" : "public CSVParser parse(final Reader in) throws IOException",
      "right" : "public CSVParser parse(final Reader in) throws IOException",
      "info" : "MethodDeclaration[26303-26752]:MethodDeclaration[26303-26752]"
    }, {
      "left" : "public CSVPrinter print(final Appendable out) throws IOException",
      "right" : "public CSVPrinter print(final Appendable out) throws IOException",
      "info" : "MethodDeclaration[26758-27182]:MethodDeclaration[26758-27182]"
    }, {
      "left" : "public CSVPrinter print(final File out, Charset charset) throws IOException",
      "right" : "public CSVPrinter print(final File out, Charset charset) throws IOException",
      "info" : "MethodDeclaration[27188-27842]:MethodDeclaration[27188-27842]"
    }, {
      "left" : "public CSVPrinter print(final Path out, Charset charset) throws IOException",
      "right" : "public CSVPrinter print(final Path out, Charset charset) throws IOException",
      "info" : "MethodDeclaration[27848-28356]:MethodDeclaration[27848-28356]"
    }, {
      "left" : "public void print(final Object value, final Appendable out, final boolean newRecord) throws IOException",
      "right" : "public void print(final Object value, final Appendable out, final boolean newRecord) throws IOException",
      "info" : "MethodDeclaration[28362-29508]:MethodDeclaration[28362-29508]"
    }, {
      "left" : "private void print(final Object object, final CharSequence value, final int offset, final int len,\n            final Appendable out, final boolean newRecord) throws IOException",
      "right" : "private void print(final Object object, final CharSequence value, final int offset, final int len,\n            final Appendable out, final boolean newRecord) throws IOException",
      "info" : "MethodDeclaration[29514-30197]:MethodDeclaration[29514-30197]"
    }, {
      "left" : "private void printAndEscape(final CharSequence value, final int offset, final int len, final Appendable out)\n            throws IOException",
      "right" : "private void printAndEscape(final CharSequence value, final int offset, final int len, final Appendable out)\n            throws IOException",
      "info" : "MethodDeclaration[30303-31390]:MethodDeclaration[30303-31390]"
    }, {
      "left" : "public void println(final Appendable out) throws IOException",
      "right" : "public void println(final Appendable out) throws IOException",
      "info" : "MethodDeclaration[35650-36094]:MethodDeclaration[35656-36100]"
    }, {
      "left" : "public void printRecord(final Appendable out, final Object... values) throws IOException",
      "right" : "public void printRecord(final Appendable out, final Object... values) throws IOException",
      "info" : "MethodDeclaration[36100-36951]:MethodDeclaration[36106-36957]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[36957-38550]:MethodDeclaration[36963-38556]"
    }, {
      "left" : "private String[] toStringArray(final Object[] values)",
      "right" : "private String[] toStringArray(final Object[] values)",
      "info" : "MethodDeclaration[38556-38936]:MethodDeclaration[38562-38942]"
    }, {
      "left" : "private CharSequence trim(final CharSequence charSequence)",
      "right" : "private CharSequence trim(final CharSequence charSequence)",
      "info" : "MethodDeclaration[38942-39488]:MethodDeclaration[38948-39494]"
    }, {
      "left" : "private void validate() throws IllegalArgumentException",
      "right" : "private void validate() throws IllegalArgumentException",
      "info" : "MethodDeclaration[39494-41718]:MethodDeclaration[39500-41724]"
    }, {
      "left" : "public CSVFormat withAllowMissingColumnNames()",
      "right" : "public CSVFormat withAllowMissingColumnNames()",
      "info" : "MethodDeclaration[41724-42143]:MethodDeclaration[41730-42149]"
    }, {
      "left" : "public CSVFormat withAllowMissingColumnNames(final boolean allowMissingColumnNames)",
      "right" : "public CSVFormat withAllowMissingColumnNames(final boolean allowMissingColumnNames)",
      "info" : "MethodDeclaration[42149-43045]:MethodDeclaration[42155-43051]"
    }, {
      "left" : "public CSVFormat withCommentMarker(final char commentMarker)",
      "right" : "public CSVFormat withCommentMarker(final char commentMarker)",
      "info" : "MethodDeclaration[43051-43718]:MethodDeclaration[43057-43724]"
    }, {
      "left" : "public CSVFormat withCommentMarker(final Character commentMarker)",
      "right" : "public CSVFormat withCommentMarker(final Character commentMarker)",
      "info" : "MethodDeclaration[43724-44832]:MethodDeclaration[43730-44838]"
    }, {
      "left" : "public CSVFormat withDelimiter(final char delimiter)",
      "right" : "public CSVFormat withDelimiter(final char delimiter)",
      "info" : "MethodDeclaration[44838-45745]:MethodDeclaration[44844-45751]"
    }, {
      "left" : "public CSVFormat withEscape(final char escape)",
      "right" : "public CSVFormat withEscape(final char escape)",
      "info" : "MethodDeclaration[45751-46271]:MethodDeclaration[45757-46277]"
    }, {
      "left" : "public CSVFormat withEscape(final Character escape)",
      "right" : "public CSVFormat withEscape(final Character escape)",
      "info" : "MethodDeclaration[46277-47223]:MethodDeclaration[46283-47229]"
    }, {
      "left" : "public CSVFormat withFirstRecordAsHeader()",
      "right" : "public CSVFormat withFirstRecordAsHeader()",
      "info" : "MethodDeclaration[47229-47802]:MethodDeclaration[47235-47808]"
    }, {
      "left" : "public CSVFormat withHeader(final Class<? extends Enum<?>> headerEnum)",
      "right" : "public CSVFormat withHeader(final Class<? extends Enum<?>> headerEnum)",
      "info" : "MethodDeclaration[47808-49010]:MethodDeclaration[47814-49016]"
    }, {
      "left" : "public CSVFormat withHeader(final ResultSet resultSet) throws SQLException",
      "right" : "public CSVFormat withHeader(final ResultSet resultSet) throws SQLException",
      "info" : "MethodDeclaration[49016-50102]:MethodDeclaration[49022-50108]"
    }, {
      "left" : "public CSVFormat withHeader(final ResultSetMetaData metaData) throws SQLException",
      "right" : "public CSVFormat withHeader(final ResultSetMetaData metaData) throws SQLException",
      "info" : "MethodDeclaration[50108-51463]:MethodDeclaration[50114-51469]"
    }, {
      "left" : "public CSVFormat withHeader(final String... header)",
      "right" : "public CSVFormat withHeader(final String... header)",
      "info" : "MethodDeclaration[51469-52646]:MethodDeclaration[51475-52652]"
    }, {
      "left" : "public CSVFormat withHeaderComments(final Object... headerComments)",
      "right" : "public CSVFormat withHeaderComments(final Object... headerComments)",
      "info" : "MethodDeclaration[52652-53701]:MethodDeclaration[52658-53707]"
    }, {
      "left" : "public CSVFormat withIgnoreEmptyLines()",
      "right" : "public CSVFormat withIgnoreEmptyLines()",
      "info" : "MethodDeclaration[53707-54114]:MethodDeclaration[53713-54120]"
    }, {
      "left" : "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines)",
      "right" : "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines)",
      "info" : "MethodDeclaration[54120-54973]:MethodDeclaration[54126-54979]"
    }, {
      "left" : "public CSVFormat withIgnoreHeaderCase()",
      "right" : "public CSVFormat withIgnoreHeaderCase()",
      "info" : "MethodDeclaration[54979-55321]:MethodDeclaration[54985-55327]"
    }, {
      "left" : "public CSVFormat withIgnoreHeaderCase(final boolean ignoreHeaderCase)",
      "right" : "public CSVFormat withIgnoreHeaderCase(final boolean ignoreHeaderCase)",
      "info" : "MethodDeclaration[55327-56124]:MethodDeclaration[55333-56130]"
    }, {
      "left" : "public CSVFormat withIgnoreSurroundingSpaces()",
      "right" : "public CSVFormat withIgnoreSurroundingSpaces()",
      "info" : "MethodDeclaration[56130-56526]:MethodDeclaration[56136-56532]"
    }, {
      "left" : "public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces)",
      "right" : "public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces)",
      "info" : "MethodDeclaration[56532-57344]:MethodDeclaration[56538-57350]"
    }, {
      "left" : "public CSVFormat withNullString(final String nullString)",
      "right" : "public CSVFormat withNullString(final String nullString)",
      "info" : "MethodDeclaration[57350-58377]:MethodDeclaration[57356-58383]"
    }, {
      "left" : "public CSVFormat withQuote(final char quoteChar)",
      "right" : "public CSVFormat withQuote(final char quoteChar)",
      "info" : "MethodDeclaration[58383-58896]:MethodDeclaration[58389-58902]"
    }, {
      "left" : "public CSVFormat withQuote(final Character quoteChar)",
      "right" : "public CSVFormat withQuote(final Character quoteChar)",
      "info" : "MethodDeclaration[58902-59838]:MethodDeclaration[58908-59844]"
    }, {
      "left" : "public CSVFormat withQuoteMode(final QuoteMode quoteModePolicy)",
      "right" : "public CSVFormat withQuoteMode(final QuoteMode quoteModePolicy)",
      "info" : "MethodDeclaration[59844-60548]:MethodDeclaration[59850-60554]"
    }, {
      "left" : "public CSVFormat withRecordSeparator(final char recordSeparator)",
      "right" : "public CSVFormat withRecordSeparator(final char recordSeparator)",
      "info" : "MethodDeclaration[60554-61233]:MethodDeclaration[60560-61239]"
    }, {
      "left" : "public CSVFormat withRecordSeparator(final String recordSeparator)",
      "right" : "public CSVFormat withRecordSeparator(final String recordSeparator)",
      "info" : "MethodDeclaration[61239-62266]:MethodDeclaration[61245-62272]"
    }, {
      "left" : "public CSVFormat withSkipHeaderRecord()",
      "right" : "public CSVFormat withSkipHeaderRecord()",
      "info" : "MethodDeclaration[62272-62684]:MethodDeclaration[62278-62690]"
    }, {
      "left" : "public CSVFormat withSkipHeaderRecord(final boolean skipHeaderRecord)",
      "right" : "public CSVFormat withSkipHeaderRecord(final boolean skipHeaderRecord)",
      "info" : "MethodDeclaration[62690-63415]:MethodDeclaration[62696-63421]"
    }, {
      "left" : "public CSVFormat withTrailingDelimiter()",
      "right" : "public CSVFormat withTrailingDelimiter()",
      "info" : "MethodDeclaration[63421-63716]:MethodDeclaration[63427-63722]"
    }, {
      "left" : "public CSVFormat withTrailingDelimiter(final boolean trailingDelimiter)",
      "right" : "public CSVFormat withTrailingDelimiter(final boolean trailingDelimiter)",
      "info" : "MethodDeclaration[63722-64435]:MethodDeclaration[63728-64441]"
    }, {
      "left" : "public CSVFormat withTrim()",
      "right" : "public CSVFormat withTrim()",
      "info" : "MethodDeclaration[64441-64707]:MethodDeclaration[64447-64713]"
    }, {
      "left" : "public CSVFormat withTrim(final boolean trim)",
      "right" : "public CSVFormat withTrim(final boolean trim)",
      "info" : "MethodDeclaration[64713-65389]:MethodDeclaration[64719-65395]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5474-5519]:Block[5474-5519]"
    }, {
      "left" : "this.format = format;",
      "right" : "this.format = format;",
      "info" : "ExpressionStatement[5488-5509]:ExpressionStatement[5488-5509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5652-5690]:Block[5652-5690]"
    }, {
      "left" : "return format;",
      "right" : "return format;",
      "info" : "ReturnStatement[5666-5680]:ReturnStatement[5666-5680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11834-11876]:Block[11834-11876]"
    }, {
      "left" : "return c == LF || c == CR;",
      "right" : "return c == LF || c == CR;",
      "info" : "ReturnStatement[11844-11870]:ReturnStatement[11844-11870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12185-12248]:Block[12185-12248]"
    }, {
      "left" : "return c != null && isLineBreak(c.charValue());",
      "right" : "return c != null && isLineBreak(c.charValue());",
      "info" : "ReturnStatement[12195-12242]:ReturnStatement[12195-12242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12921-13082]:Block[12921-13082]"
    }, {
      "left" : "return new CSVFormat(delimiter, null, null, null, null, false, false, null, null, null, null, false, false,\n                false, false, false);",
      "right" : "return new CSVFormat(delimiter, null, null, null, null, false, false, null, null, null, null, false, false,\n                false, false, false);",
      "info" : "ReturnStatement[12931-13076]:ReturnStatement[12931-13076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13348-13420]:Block[13348-13420]"
    }, {
      "left" : "return CSVFormat.Predefined.valueOf(format).getFormat();",
      "right" : "return CSVFormat.Predefined.valueOf(format).getFormat();",
      "info" : "ReturnStatement[13358-13414]:ReturnStatement[13358-13414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16502-17289]:Block[16502-17289]"
    }, {
      "left" : "this.delimiter = delimiter;",
      "right" : "this.delimiter = delimiter;",
      "info" : "ExpressionStatement[16512-16539]:ExpressionStatement[16512-16539]"
    }, {
      "left" : "this.quoteCharacter = quoteChar;",
      "right" : "this.quoteCharacter = quoteChar;",
      "info" : "ExpressionStatement[16548-16580]:ExpressionStatement[16548-16580]"
    }, {
      "left" : "this.quoteMode = quoteMode;",
      "right" : "this.quoteMode = quoteMode;",
      "info" : "ExpressionStatement[16589-16616]:ExpressionStatement[16589-16616]"
    }, {
      "left" : "this.commentMarker = commentStart;",
      "right" : "this.commentMarker = commentStart;",
      "info" : "ExpressionStatement[16625-16659]:ExpressionStatement[16625-16659]"
    }, {
      "left" : "this.escapeCharacter = escape;",
      "right" : "this.escapeCharacter = escape;",
      "info" : "ExpressionStatement[16668-16698]:ExpressionStatement[16668-16698]"
    }, {
      "left" : "this.ignoreSurroundingSpaces = ignoreSurroundingSpaces;",
      "right" : "this.ignoreSurroundingSpaces = ignoreSurroundingSpaces;",
      "info" : "ExpressionStatement[16707-16762]:ExpressionStatement[16707-16762]"
    }, {
      "left" : "this.allowMissingColumnNames = allowMissingColumnNames;",
      "right" : "this.allowMissingColumnNames = allowMissingColumnNames;",
      "info" : "ExpressionStatement[16771-16826]:ExpressionStatement[16771-16826]"
    }, {
      "left" : "this.ignoreEmptyLines = ignoreEmptyLines;",
      "right" : "this.ignoreEmptyLines = ignoreEmptyLines;",
      "info" : "ExpressionStatement[16835-16876]:ExpressionStatement[16835-16876]"
    }, {
      "left" : "this.recordSeparator = recordSeparator;",
      "right" : "this.recordSeparator = recordSeparator;",
      "info" : "ExpressionStatement[16885-16924]:ExpressionStatement[16885-16924]"
    }, {
      "left" : "this.nullString = nullString;",
      "right" : "this.nullString = nullString;",
      "info" : "ExpressionStatement[16933-16962]:ExpressionStatement[16933-16962]"
    }, {
      "left" : "this.headerComments = toStringArray(headerComments);",
      "right" : "this.headerComments = toStringArray(headerComments);",
      "info" : "ExpressionStatement[16971-17023]:ExpressionStatement[16971-17023]"
    }, {
      "left" : "this.header = header == null ? null : header.clone();",
      "right" : "this.header = header == null ? null : header.clone();",
      "info" : "ExpressionStatement[17032-17085]:ExpressionStatement[17032-17085]"
    }, {
      "left" : "this.skipHeaderRecord = skipHeaderRecord;",
      "right" : "this.skipHeaderRecord = skipHeaderRecord;",
      "info" : "ExpressionStatement[17094-17135]:ExpressionStatement[17094-17135]"
    }, {
      "left" : "this.ignoreHeaderCase = ignoreHeaderCase;",
      "right" : "this.ignoreHeaderCase = ignoreHeaderCase;",
      "info" : "ExpressionStatement[17144-17185]:ExpressionStatement[17144-17185]"
    }, {
      "left" : "this.trailingDelimiter = trailingDelimiter;",
      "right" : "this.trailingDelimiter = trailingDelimiter;",
      "info" : "ExpressionStatement[17194-17237]:ExpressionStatement[17194-17237]"
    }, {
      "left" : "this.trim = trim;",
      "right" : "this.trim = trim;",
      "info" : "ExpressionStatement[17246-17263]:ExpressionStatement[17246-17263]"
    }, {
      "left" : "validate();",
      "right" : "validate();",
      "info" : "ExpressionStatement[17272-17283]:ExpressionStatement[17272-17283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17349-19329]:Block[17349-19329]"
    }, {
      "left" : "if (this == obj)",
      "right" : "if (this == obj)",
      "info" : "IfStatement[17359-17412]:IfStatement[17359-17412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17376-17412]:Block[17376-17412]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[17390-17402]:ReturnStatement[17390-17402]"
    }, {
      "left" : "if (obj == null)",
      "right" : "if (obj == null)",
      "info" : "IfStatement[17421-17475]:IfStatement[17421-17475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17438-17475]:Block[17438-17475]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17452-17465]:ReturnStatement[17452-17465]"
    }, {
      "left" : "if (getClass() != obj.getClass())",
      "right" : "if (getClass() != obj.getClass())",
      "info" : "IfStatement[17484-17555]:IfStatement[17484-17555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17518-17555]:Block[17518-17555]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17532-17545]:ReturnStatement[17532-17545]"
    }, {
      "left" : "final CSVFormat other = (CSVFormat) obj;",
      "right" : "final CSVFormat other = (CSVFormat) obj;",
      "info" : "VariableDeclarationStatement[17565-17605]:VariableDeclarationStatement[17565-17605]"
    }, {
      "left" : "if (delimiter != other.delimiter)",
      "right" : "if (delimiter != other.delimiter)",
      "info" : "IfStatement[17614-17685]:IfStatement[17614-17685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17648-17685]:Block[17648-17685]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17662-17675]:ReturnStatement[17662-17675]"
    }, {
      "left" : "if (quoteMode != other.quoteMode)",
      "right" : "if (quoteMode != other.quoteMode)",
      "info" : "IfStatement[17694-17765]:IfStatement[17694-17765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17728-17765]:Block[17728-17765]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17742-17755]:ReturnStatement[17742-17755]"
    }, {
      "left" : "if (quoteCharacter == null)",
      "right" : "if (quoteCharacter == null)",
      "info" : "IfStatement[17774-17998]:IfStatement[17774-17998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17802-17905]:Block[17802-17905]"
    }, {
      "left" : "if (other.quoteCharacter != null)",
      "right" : "if (other.quoteCharacter != null)",
      "info" : "IfStatement[17816-17895]:IfStatement[17816-17895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17850-17895]:Block[17850-17895]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17868-17881]:ReturnStatement[17868-17881]"
    }, {
      "left" : "if (!quoteCharacter.equals(other.quoteCharacter))",
      "right" : "if (!quoteCharacter.equals(other.quoteCharacter))",
      "info" : "IfStatement[17911-17998]:IfStatement[17911-17998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17961-17998]:Block[17961-17998]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17975-17988]:ReturnStatement[17975-17988]"
    }, {
      "left" : "if (commentMarker == null)",
      "right" : "if (commentMarker == null)",
      "info" : "IfStatement[18007-18227]:IfStatement[18007-18227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18034-18136]:Block[18034-18136]"
    }, {
      "left" : "if (other.commentMarker != null)",
      "right" : "if (other.commentMarker != null)",
      "info" : "IfStatement[18048-18126]:IfStatement[18048-18126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18081-18126]:Block[18081-18126]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18099-18112]:ReturnStatement[18099-18112]"
    }, {
      "left" : "if (!commentMarker.equals(other.commentMarker))",
      "right" : "if (!commentMarker.equals(other.commentMarker))",
      "info" : "IfStatement[18142-18227]:IfStatement[18142-18227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18190-18227]:Block[18190-18227]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18204-18217]:ReturnStatement[18204-18217]"
    }, {
      "left" : "if (escapeCharacter == null)",
      "right" : "if (escapeCharacter == null)",
      "info" : "IfStatement[18236-18464]:IfStatement[18236-18464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18265-18369]:Block[18265-18369]"
    }, {
      "left" : "if (other.escapeCharacter != null)",
      "right" : "if (other.escapeCharacter != null)",
      "info" : "IfStatement[18279-18359]:IfStatement[18279-18359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18314-18359]:Block[18314-18359]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18332-18345]:ReturnStatement[18332-18345]"
    }, {
      "left" : "if (!escapeCharacter.equals(other.escapeCharacter))",
      "right" : "if (!escapeCharacter.equals(other.escapeCharacter))",
      "info" : "IfStatement[18375-18464]:IfStatement[18375-18464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18427-18464]:Block[18427-18464]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18441-18454]:ReturnStatement[18441-18454]"
    }, {
      "left" : "if (nullString == null)",
      "right" : "if (nullString == null)",
      "info" : "IfStatement[18473-18681]:IfStatement[18473-18681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18497-18596]:Block[18497-18596]"
    }, {
      "left" : "if (other.nullString != null)",
      "right" : "if (other.nullString != null)",
      "info" : "IfStatement[18511-18586]:IfStatement[18511-18586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18541-18586]:Block[18541-18586]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18559-18572]:ReturnStatement[18559-18572]"
    }, {
      "left" : "if (!nullString.equals(other.nullString))",
      "right" : "if (!nullString.equals(other.nullString))",
      "info" : "IfStatement[18602-18681]:IfStatement[18602-18681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18644-18681]:Block[18644-18681]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18658-18671]:ReturnStatement[18658-18671]"
    }, {
      "left" : "if (!Arrays.equals(header, other.header))",
      "right" : "if (!Arrays.equals(header, other.header))",
      "info" : "IfStatement[18690-18769]:IfStatement[18690-18769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18732-18769]:Block[18732-18769]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18746-18759]:ReturnStatement[18746-18759]"
    }, {
      "left" : "if (ignoreSurroundingSpaces != other.ignoreSurroundingSpaces)",
      "right" : "if (ignoreSurroundingSpaces != other.ignoreSurroundingSpaces)",
      "info" : "IfStatement[18778-18877]:IfStatement[18778-18877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18840-18877]:Block[18840-18877]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18854-18867]:ReturnStatement[18854-18867]"
    }, {
      "left" : "if (ignoreEmptyLines != other.ignoreEmptyLines)",
      "right" : "if (ignoreEmptyLines != other.ignoreEmptyLines)",
      "info" : "IfStatement[18886-18971]:IfStatement[18886-18971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18934-18971]:Block[18934-18971]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18948-18961]:ReturnStatement[18948-18961]"
    }, {
      "left" : "if (skipHeaderRecord != other.skipHeaderRecord)",
      "right" : "if (skipHeaderRecord != other.skipHeaderRecord)",
      "info" : "IfStatement[18980-19065]:IfStatement[18980-19065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19028-19065]:Block[19028-19065]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19042-19055]:ReturnStatement[19042-19055]"
    }, {
      "left" : "if (recordSeparator == null)",
      "right" : "if (recordSeparator == null)",
      "info" : "IfStatement[19074-19302]:IfStatement[19074-19302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19103-19207]:Block[19103-19207]"
    }, {
      "left" : "if (other.recordSeparator != null)",
      "right" : "if (other.recordSeparator != null)",
      "info" : "IfStatement[19117-19197]:IfStatement[19117-19197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19152-19197]:Block[19152-19197]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19170-19183]:ReturnStatement[19170-19183]"
    }, {
      "left" : "if (!recordSeparator.equals(other.recordSeparator))",
      "right" : "if (!recordSeparator.equals(other.recordSeparator))",
      "info" : "IfStatement[19213-19302]:IfStatement[19213-19302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19265-19302]:Block[19265-19302]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19279-19292]:ReturnStatement[19279-19292]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[19311-19323]:ReturnStatement[19311-19323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19536-19924]:Block[19536-19924]"
    }, {
      "left" : "final StringWriter out = new StringWriter();",
      "right" : "final StringWriter out = new StringWriter();",
      "info" : "VariableDeclarationStatement[19546-19590]:VariableDeclarationStatement[19546-19590]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19599-19918]:TryStatement[19599-19918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19661-19758]:Block[19661-19758]"
    }, {
      "left" : "csvPrinter.printRecord(values);",
      "right" : "csvPrinter.printRecord(values);",
      "info" : "ExpressionStatement[19675-19706]:ExpressionStatement[19675-19706]"
    }, {
      "left" : "return out.toString().trim();",
      "right" : "return out.toString().trim();",
      "info" : "ReturnStatement[19719-19748]:ReturnStatement[19719-19748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19787-19918]:Block[19787-19918]"
    }, {
      "left" : "throw new IllegalStateException(e);",
      "right" : "throw new IllegalStateException(e);",
      "info" : "ThrowStatement[19873-19908]:ThrowStatement[19873-19908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20254-20301]:Block[20254-20301]"
    }, {
      "left" : "return allowMissingColumnNames;",
      "right" : "return allowMissingColumnNames;",
      "info" : "ReturnStatement[20264-20295]:ReturnStatement[20264-20295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20493-20530]:Block[20493-20530]"
    }, {
      "left" : "return commentMarker;",
      "right" : "return commentMarker;",
      "info" : "ReturnStatement[20503-20524]:ReturnStatement[20503-20524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20706-20739]:Block[20706-20739]"
    }, {
      "left" : "return delimiter;",
      "right" : "return delimiter;",
      "info" : "ReturnStatement[20716-20733]:ReturnStatement[20716-20733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20900-20939]:Block[20900-20939]"
    }, {
      "left" : "return escapeCharacter;",
      "right" : "return escapeCharacter;",
      "info" : "ReturnStatement[20910-20933]:ReturnStatement[20910-20933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21152-21214]:Block[21152-21214]"
    }, {
      "left" : "return header != null ? header.clone() : null;",
      "right" : "return header != null ? header.clone() : null;",
      "info" : "ReturnStatement[21162-21208]:ReturnStatement[21162-21208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21407-21485]:Block[21407-21485]"
    }, {
      "left" : "return headerComments != null ? headerComments.clone() : null;",
      "right" : "return headerComments != null ? headerComments.clone() : null;",
      "info" : "ReturnStatement[21417-21479]:ReturnStatement[21417-21479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21776-21816]:Block[21776-21816]"
    }, {
      "left" : "return ignoreEmptyLines;",
      "right" : "return ignoreEmptyLines;",
      "info" : "ReturnStatement[21786-21810]:ReturnStatement[21786-21810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22075-22115]:Block[22075-22115]"
    }, {
      "left" : "return ignoreHeaderCase;",
      "right" : "return ignoreHeaderCase;",
      "info" : "ReturnStatement[22085-22109]:ReturnStatement[22085-22109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22387-22434]:Block[22387-22434]"
    }, {
      "left" : "return ignoreSurroundingSpaces;",
      "right" : "return ignoreSurroundingSpaces;",
      "info" : "ReturnStatement[22397-22428]:ReturnStatement[22397-22428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22938-22972]:Block[22938-22972]"
    }, {
      "left" : "return nullString;",
      "right" : "return nullString;",
      "info" : "ReturnStatement[22948-22966]:ReturnStatement[22948-22966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23185-23223]:Block[23185-23223]"
    }, {
      "left" : "return quoteCharacter;",
      "right" : "return quoteCharacter;",
      "info" : "ReturnStatement[23195-23217]:ReturnStatement[23195-23217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23363-23396]:Block[23363-23396]"
    }, {
      "left" : "return quoteMode;",
      "right" : "return quoteMode;",
      "info" : "ReturnStatement[23373-23390]:ReturnStatement[23373-23390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23559-23598]:Block[23559-23598]"
    }, {
      "left" : "return recordSeparator;",
      "right" : "return recordSeparator;",
      "info" : "ReturnStatement[23569-23592]:ReturnStatement[23569-23592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23764-23804]:Block[23764-23804]"
    }, {
      "left" : "return skipHeaderRecord;",
      "right" : "return skipHeaderRecord;",
      "info" : "ReturnStatement[23774-23798]:ReturnStatement[23774-23798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23993-24034]:Block[23993-24034]"
    }, {
      "left" : "return trailingDelimiter;",
      "right" : "return trailingDelimiter;",
      "info" : "ReturnStatement[24003-24028]:ReturnStatement[24003-24028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24208-24236]:Block[24208-24236]"
    }, {
      "left" : "return trim;",
      "right" : "return trim;",
      "info" : "ReturnStatement[24218-24230]:ReturnStatement[24218-24230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24278-25294]:Block[24278-25294]"
    }, {
      "left" : "final int prime = 31;",
      "right" : "final int prime = 31;",
      "info" : "VariableDeclarationStatement[24288-24309]:VariableDeclarationStatement[24288-24309]"
    }, {
      "left" : "int result = 1;",
      "right" : "int result = 1;",
      "info" : "VariableDeclarationStatement[24318-24333]:VariableDeclarationStatement[24318-24333]"
    }, {
      "left" : "result = prime * result + delimiter;",
      "right" : "result = prime * result + delimiter;",
      "info" : "ExpressionStatement[24343-24379]:ExpressionStatement[24343-24379]"
    }, {
      "left" : "result = prime * result + ((quoteMode == null) ? 0 : quoteMode.hashCode());",
      "right" : "result = prime * result + ((quoteMode == null) ? 0 : quoteMode.hashCode());",
      "info" : "ExpressionStatement[24388-24463]:ExpressionStatement[24388-24463]"
    }, {
      "left" : "result = prime * result + ((quoteCharacter == null) ? 0 : quoteCharacter.hashCode());",
      "right" : "result = prime * result + ((quoteCharacter == null) ? 0 : quoteCharacter.hashCode());",
      "info" : "ExpressionStatement[24472-24557]:ExpressionStatement[24472-24557]"
    }, {
      "left" : "result = prime * result + ((commentMarker == null) ? 0 : commentMarker.hashCode());",
      "right" : "result = prime * result + ((commentMarker == null) ? 0 : commentMarker.hashCode());",
      "info" : "ExpressionStatement[24566-24649]:ExpressionStatement[24566-24649]"
    }, {
      "left" : "result = prime * result + ((escapeCharacter == null) ? 0 : escapeCharacter.hashCode());",
      "right" : "result = prime * result + ((escapeCharacter == null) ? 0 : escapeCharacter.hashCode());",
      "info" : "ExpressionStatement[24658-24745]:ExpressionStatement[24658-24745]"
    }, {
      "left" : "result = prime * result + ((nullString == null) ? 0 : nullString.hashCode());",
      "right" : "result = prime * result + ((nullString == null) ? 0 : nullString.hashCode());",
      "info" : "ExpressionStatement[24754-24831]:ExpressionStatement[24754-24831]"
    }, {
      "left" : "result = prime * result + (ignoreSurroundingSpaces ? 1231 : 1237);",
      "right" : "result = prime * result + (ignoreSurroundingSpaces ? 1231 : 1237);",
      "info" : "ExpressionStatement[24840-24906]:ExpressionStatement[24840-24906]"
    }, {
      "left" : "result = prime * result + (ignoreHeaderCase ? 1231 : 1237);",
      "right" : "result = prime * result + (ignoreHeaderCase ? 1231 : 1237);",
      "info" : "ExpressionStatement[24915-24974]:ExpressionStatement[24915-24974]"
    }, {
      "left" : "result = prime * result + (ignoreEmptyLines ? 1231 : 1237);",
      "right" : "result = prime * result + (ignoreEmptyLines ? 1231 : 1237);",
      "info" : "ExpressionStatement[24983-25042]:ExpressionStatement[24983-25042]"
    }, {
      "left" : "result = prime * result + (skipHeaderRecord ? 1231 : 1237);",
      "right" : "result = prime * result + (skipHeaderRecord ? 1231 : 1237);",
      "info" : "ExpressionStatement[25051-25110]:ExpressionStatement[25051-25110]"
    }, {
      "left" : "result = prime * result + ((recordSeparator == null) ? 0 : recordSeparator.hashCode());",
      "right" : "result = prime * result + ((recordSeparator == null) ? 0 : recordSeparator.hashCode());",
      "info" : "ExpressionStatement[25119-25206]:ExpressionStatement[25119-25206]"
    }, {
      "left" : "result = prime * result + Arrays.hashCode(header);",
      "right" : "result = prime * result + Arrays.hashCode(header);",
      "info" : "ExpressionStatement[25215-25265]:ExpressionStatement[25215-25265]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[25274-25288]:ReturnStatement[25274-25288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25602-25647]:Block[25602-25647]"
    }, {
      "left" : "return commentMarker != null;",
      "right" : "return commentMarker != null;",
      "info" : "ReturnStatement[25612-25641]:ReturnStatement[25612-25641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25818-25865]:Block[25818-25865]"
    }, {
      "left" : "return escapeCharacter != null;",
      "right" : "return escapeCharacter != null;",
      "info" : "ReturnStatement[25828-25859]:ReturnStatement[25828-25859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26036-26078]:Block[26036-26078]"
    }, {
      "left" : "return nullString != null;",
      "right" : "return nullString != null;",
      "info" : "ReturnStatement[26046-26072]:ReturnStatement[26046-26072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26251-26297]:Block[26251-26297]"
    }, {
      "left" : "return quoteCharacter != null;",
      "right" : "return quoteCharacter != null;",
      "info" : "ReturnStatement[26261-26291]:ReturnStatement[26261-26291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26705-26752]:Block[26705-26752]"
    }, {
      "left" : "return new CSVParser(in, this);",
      "right" : "return new CSVParser(in, this);",
      "info" : "ReturnStatement[26715-26746]:ReturnStatement[26715-26746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27133-27182]:Block[27133-27182]"
    }, {
      "left" : "return new CSVPrinter(out, this);",
      "right" : "return new CSVPrinter(out, this);",
      "info" : "ReturnStatement[27143-27176]:ReturnStatement[27143-27176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27677-27842]:Block[27677-27842]"
    }, {
      "left" : "return new CSVPrinter(new OutputStreamWriter(new FileOutputStream(out), charset), this);",
      "right" : "return new CSVPrinter(new OutputStreamWriter(new FileOutputStream(out), charset), this);",
      "info" : "ReturnStatement[27748-27836]:ReturnStatement[27748-27836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28304-28356]:Block[28304-28356]"
    }, {
      "left" : "return print(out.toFile(), charset);",
      "right" : "return print(out.toFile(), charset);",
      "info" : "ReturnStatement[28314-28350]:ReturnStatement[28314-28350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28949-29508]:Block[28949-29508]"
    }, {
      "left" : "CharSequence charSequence;",
      "right" : "CharSequence charSequence;",
      "info" : "VariableDeclarationStatement[29089-29115]:VariableDeclarationStatement[29089-29115]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[29124-29349]:IfStatement[29124-29349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29143-29232]:Block[29143-29232]"
    }, {
      "left" : "charSequence = nullString == null ? Constants.EMPTY : nullString;",
      "right" : "charSequence = nullString == null ? Constants.EMPTY : nullString;",
      "info" : "ExpressionStatement[29157-29222]:ExpressionStatement[29157-29222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29238-29349]:Block[29238-29349]"
    }, {
      "left" : "charSequence = value instanceof CharSequence ? (CharSequence) value : value.toString();",
      "right" : "charSequence = value instanceof CharSequence ? (CharSequence) value : value.toString();",
      "info" : "ExpressionStatement[29252-29339]:ExpressionStatement[29252-29339]"
    }, {
      "left" : "charSequence = getTrim() ? trim(charSequence) : charSequence;",
      "right" : "charSequence = getTrim() ? trim(charSequence) : charSequence;",
      "info" : "ExpressionStatement[29358-29419]:ExpressionStatement[29358-29419]"
    }, {
      "left" : "this.print(value, charSequence, 0, charSequence.length(), out, newRecord);",
      "right" : "this.print(value, charSequence, 0, charSequence.length(), out, newRecord);",
      "info" : "ExpressionStatement[29428-29502]:ExpressionStatement[29428-29502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29691-30197]:Block[29691-30197]"
    }, {
      "left" : "if (!newRecord)",
      "right" : "if (!newRecord)",
      "info" : "IfStatement[29701-29768]:IfStatement[29701-29768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29717-29768]:Block[29717-29768]"
    }, {
      "left" : "out.append(getDelimiter());",
      "right" : "out.append(getDelimiter());",
      "info" : "ExpressionStatement[29731-29758]:ExpressionStatement[29731-29758]"
    }, {
      "left" : "if (object == null)",
      "right" : "if (object == null)",
      "info" : "IfStatement[29777-30191]:IfStatement[29777-30191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29797-29839]:Block[29797-29839]"
    }, {
      "left" : "out.append(value);",
      "right" : "out.append(value);",
      "info" : "ExpressionStatement[29811-29829]:ExpressionStatement[29811-29829]"
    }, {
      "left" : "if (isQuoteCharacterSet())",
      "right" : "if (isQuoteCharacterSet())",
      "info" : "IfStatement[29845-30191]:IfStatement[29845-30191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29872-30023]:Block[29872-30023]"
    }, {
      "left" : "printAndQuote(object, value, offset, len, out, newRecord);",
      "right" : "printAndQuote(object, value, offset, len, out, newRecord);",
      "info" : "ExpressionStatement[29955-30013]:ExpressionStatement[29955-30013]"
    }, {
      "left" : "if (isEscapeCharacterSet())",
      "right" : "if (isEscapeCharacterSet())",
      "info" : "IfStatement[30029-30191]:IfStatement[30029-30191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30057-30121]:Block[30057-30121]"
    }, {
      "left" : "printAndEscape(value, offset, len, out);",
      "right" : "printAndEscape(value, offset, len, out);",
      "info" : "ExpressionStatement[30071-30111]:ExpressionStatement[30071-30111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30127-30191]:Block[30127-30191]"
    }, {
      "left" : "out.append(value, offset, offset + len);",
      "right" : "out.append(value, offset, offset + len);",
      "info" : "ExpressionStatement[30141-30181]:ExpressionStatement[30141-30181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30443-31390]:Block[30443-31390]"
    }, {
      "left" : "int start = offset;",
      "right" : "int start = offset;",
      "info" : "VariableDeclarationStatement[30453-30472]:VariableDeclarationStatement[30453-30472]"
    }, {
      "left" : "int pos = offset;",
      "right" : "int pos = offset;",
      "info" : "VariableDeclarationStatement[30481-30498]:VariableDeclarationStatement[30481-30498]"
    }, {
      "left" : "final int end = offset + len;",
      "right" : "final int end = offset + len;",
      "info" : "VariableDeclarationStatement[30507-30536]:VariableDeclarationStatement[30507-30536]"
    }, {
      "left" : "final char delim = getDelimiter();",
      "right" : "final char delim = getDelimiter();",
      "info" : "VariableDeclarationStatement[30546-30580]:VariableDeclarationStatement[30546-30580]"
    }, {
      "left" : "final char escape = getEscapeCharacter().charValue();",
      "right" : "final char escape = getEscapeCharacter().charValue();",
      "info" : "VariableDeclarationStatement[30589-30642]:VariableDeclarationStatement[30589-30642]"
    }, {
      "left" : "while (pos < end)",
      "right" : "while (pos < end)",
      "info" : "WhileStatement[30652-31273]:WhileStatement[30652-31273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30670-31273]:Block[30670-31273]"
    }, {
      "left" : "char c = value.charAt(pos);",
      "right" : "char c = value.charAt(pos);",
      "info" : "VariableDeclarationStatement[30684-30711]:VariableDeclarationStatement[30684-30711]"
    }, {
      "left" : "if (c == CR || c == LF || c == delim || c == escape)",
      "right" : "if (c == CR || c == LF || c == delim || c == escape)",
      "info" : "IfStatement[30724-31243]:IfStatement[30724-31243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30777-31243]:Block[30777-31243]"
    }, {
      "left" : "if (pos > start)",
      "right" : "if (pos > start)",
      "info" : "IfStatement[30851-30938]:IfStatement[30851-30938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30868-30938]:Block[30868-30938]"
    }, {
      "left" : "out.append(value, start, pos);",
      "right" : "out.append(value, start, pos);",
      "info" : "ExpressionStatement[30890-30920]:ExpressionStatement[30890-30920]"
    }, {
      "left" : "if (c == LF)",
      "right" : "if (c == LF)",
      "info" : "IfStatement[30955-31083]:IfStatement[30955-31083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30968-31016]:Block[30968-31016]"
    }, {
      "left" : "c = 'n';",
      "right" : "c = 'n';",
      "info" : "ExpressionStatement[30990-30998]:ExpressionStatement[30990-30998]"
    }, {
      "left" : "if (c == CR)",
      "right" : "if (c == CR)",
      "info" : "IfStatement[31022-31083]:IfStatement[31022-31083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31035-31083]:Block[31035-31083]"
    }, {
      "left" : "c = 'r';",
      "right" : "c = 'r';",
      "info" : "ExpressionStatement[31057-31065]:ExpressionStatement[31057-31065]"
    }, {
      "left" : "out.append(escape);",
      "right" : "out.append(escape);",
      "info" : "ExpressionStatement[31101-31120]:ExpressionStatement[31101-31120]"
    }, {
      "left" : "out.append(c);",
      "right" : "out.append(c);",
      "info" : "ExpressionStatement[31137-31151]:ExpressionStatement[31137-31151]"
    }, {
      "left" : "start = pos + 1;",
      "right" : "start = pos + 1;",
      "info" : "ExpressionStatement[31169-31185]:ExpressionStatement[31169-31185]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[31257-31263]:ExpressionStatement[31257-31263]"
    }, {
      "left" : "if (pos > start)",
      "right" : "if (pos > start)",
      "info" : "IfStatement[31313-31384]:IfStatement[31313-31384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31330-31384]:Block[31330-31384]"
    }, {
      "left" : "out.append(value, start, pos);",
      "right" : "out.append(value, start, pos);",
      "info" : "ExpressionStatement[31344-31374]:ExpressionStatement[31344-31374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35909-36094]:Block[35915-36100]"
    }, {
      "left" : "if (getTrailingDelimiter())",
      "right" : "if (getTrailingDelimiter())",
      "info" : "IfStatement[35919-35998]:IfStatement[35925-36004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35947-35998]:Block[35953-36004]"
    }, {
      "left" : "out.append(getDelimiter());",
      "right" : "out.append(getDelimiter());",
      "info" : "ExpressionStatement[35961-35988]:ExpressionStatement[35967-35994]"
    }, {
      "left" : "if (recordSeparator != null)",
      "right" : "if (recordSeparator != null)",
      "info" : "IfStatement[36007-36088]:IfStatement[36013-36094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36036-36088]:Block[36042-36094]"
    }, {
      "left" : "out.append(recordSeparator);",
      "right" : "out.append(recordSeparator);",
      "info" : "ExpressionStatement[36050-36078]:ExpressionStatement[36056-36084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36819-36951]:Block[36825-36957]"
    }, {
      "left" : "for (int i = 0; i < values.length; i++)",
      "right" : "for (int i = 0; i < values.length; i++)",
      "info" : "ForStatement[36829-36923]:ForStatement[36835-36929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36869-36923]:Block[36875-36929]"
    }, {
      "left" : "print(values[i], out, i == 0);",
      "right" : "print(values[i], out, i == 0);",
      "info" : "ExpressionStatement[36883-36913]:ExpressionStatement[36889-36919]"
    }, {
      "left" : "println(out);",
      "right" : "println(out);",
      "info" : "ExpressionStatement[36932-36945]:ExpressionStatement[36938-36951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36996-38550]:Block[37002-38556]"
    }, {
      "left" : "final StringBuilder sb = new StringBuilder();",
      "right" : "final StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[37006-37051]:VariableDeclarationStatement[37012-37057]"
    }, {
      "left" : "sb.append(\"Delimiter=<\").append(delimiter).append('>');",
      "right" : "sb.append(\"Delimiter=<\").append(delimiter).append('>');",
      "info" : "ExpressionStatement[37060-37115]:ExpressionStatement[37066-37121]"
    }, {
      "left" : "if (isEscapeCharacterSet())",
      "right" : "if (isEscapeCharacterSet())",
      "info" : "IfStatement[37124-37262]:IfStatement[37130-37268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37152-37262]:Block[37158-37268]"
    }, {
      "left" : "sb.append(' ');",
      "right" : "sb.append(' ');",
      "info" : "ExpressionStatement[37166-37181]:ExpressionStatement[37172-37187]"
    }, {
      "left" : "sb.append(\"Escape=<\").append(escapeCharacter).append('>');",
      "right" : "sb.append(\"Escape=<\").append(escapeCharacter).append('>');",
      "info" : "ExpressionStatement[37194-37252]:ExpressionStatement[37200-37258]"
    }, {
      "left" : "if (isQuoteCharacterSet())",
      "right" : "if (isQuoteCharacterSet())",
      "info" : "IfStatement[37271-37410]:IfStatement[37277-37416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37298-37410]:Block[37304-37416]"
    }, {
      "left" : "sb.append(' ');",
      "right" : "sb.append(' ');",
      "info" : "ExpressionStatement[37312-37327]:ExpressionStatement[37318-37333]"
    }, {
      "left" : "sb.append(\"QuoteChar=<\").append(quoteCharacter).append('>');",
      "right" : "sb.append(\"QuoteChar=<\").append(quoteCharacter).append('>');",
      "info" : "ExpressionStatement[37340-37400]:ExpressionStatement[37346-37406]"
    }, {
      "left" : "if (isCommentMarkerSet())",
      "right" : "if (isCommentMarkerSet())",
      "info" : "IfStatement[37419-37559]:IfStatement[37425-37565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37445-37559]:Block[37451-37565]"
    }, {
      "left" : "sb.append(' ');",
      "right" : "sb.append(' ');",
      "info" : "ExpressionStatement[37459-37474]:ExpressionStatement[37465-37480]"
    }, {
      "left" : "sb.append(\"CommentStart=<\").append(commentMarker).append('>');",
      "right" : "sb.append(\"CommentStart=<\").append(commentMarker).append('>');",
      "info" : "ExpressionStatement[37487-37549]:ExpressionStatement[37493-37555]"
    }, {
      "left" : "if (isNullStringSet())",
      "right" : "if (isNullStringSet())",
      "info" : "IfStatement[37568-37700]:IfStatement[37574-37706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37591-37700]:Block[37597-37706]"
    }, {
      "left" : "sb.append(' ');",
      "right" : "sb.append(' ');",
      "info" : "ExpressionStatement[37605-37620]:ExpressionStatement[37611-37626]"
    }, {
      "left" : "sb.append(\"NullString=<\").append(nullString).append('>');",
      "right" : "sb.append(\"NullString=<\").append(nullString).append('>');",
      "info" : "ExpressionStatement[37633-37690]:ExpressionStatement[37639-37696]"
    }, {
      "left" : "if (recordSeparator != null)",
      "right" : "if (recordSeparator != null)",
      "info" : "IfStatement[37709-37857]:IfStatement[37715-37863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37738-37857]:Block[37744-37863]"
    }, {
      "left" : "sb.append(' ');",
      "right" : "sb.append(' ');",
      "info" : "ExpressionStatement[37752-37767]:ExpressionStatement[37758-37773]"
    }, {
      "left" : "sb.append(\"RecordSeparator=<\").append(recordSeparator).append('>');",
      "right" : "sb.append(\"RecordSeparator=<\").append(recordSeparator).append('>');",
      "info" : "ExpressionStatement[37780-37847]:ExpressionStatement[37786-37853]"
    }, {
      "left" : "if (getIgnoreEmptyLines())",
      "right" : "if (getIgnoreEmptyLines())",
      "info" : "IfStatement[37866-37950]:IfStatement[37872-37956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37893-37950]:Block[37899-37956]"
    }, {
      "left" : "sb.append(\" EmptyLines:ignored\");",
      "right" : "sb.append(\" EmptyLines:ignored\");",
      "info" : "ExpressionStatement[37907-37940]:ExpressionStatement[37913-37946]"
    }, {
      "left" : "if (getIgnoreSurroundingSpaces())",
      "right" : "if (getIgnoreSurroundingSpaces())",
      "info" : "IfStatement[37959-38057]:IfStatement[37965-38063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37993-38057]:Block[37999-38063]"
    }, {
      "left" : "sb.append(\" SurroundingSpaces:ignored\");",
      "right" : "sb.append(\" SurroundingSpaces:ignored\");",
      "info" : "ExpressionStatement[38007-38047]:ExpressionStatement[38013-38053]"
    }, {
      "left" : "if (getIgnoreHeaderCase())",
      "right" : "if (getIgnoreHeaderCase())",
      "info" : "IfStatement[38066-38156]:IfStatement[38072-38162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38093-38156]:Block[38099-38162]"
    }, {
      "left" : "sb.append(\" IgnoreHeaderCase:ignored\");",
      "right" : "sb.append(\" IgnoreHeaderCase:ignored\");",
      "info" : "ExpressionStatement[38107-38146]:ExpressionStatement[38113-38152]"
    }, {
      "left" : "sb.append(\" SkipHeaderRecord:\").append(skipHeaderRecord);",
      "right" : "sb.append(\" SkipHeaderRecord:\").append(skipHeaderRecord);",
      "info" : "ExpressionStatement[38165-38222]:ExpressionStatement[38171-38228]"
    }, {
      "left" : "if (headerComments != null)",
      "right" : "if (headerComments != null)",
      "info" : "IfStatement[38231-38380]:IfStatement[38237-38386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38259-38380]:Block[38265-38386]"
    }, {
      "left" : "sb.append(' ');",
      "right" : "sb.append(' ');",
      "info" : "ExpressionStatement[38273-38288]:ExpressionStatement[38279-38294]"
    }, {
      "left" : "sb.append(\"HeaderComments:\").append(Arrays.toString(headerComments));",
      "right" : "sb.append(\"HeaderComments:\").append(Arrays.toString(headerComments));",
      "info" : "ExpressionStatement[38301-38370]:ExpressionStatement[38307-38376]"
    }, {
      "left" : "if (header != null)",
      "right" : "if (header != null)",
      "info" : "IfStatement[38389-38514]:IfStatement[38395-38520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38409-38514]:Block[38415-38520]"
    }, {
      "left" : "sb.append(' ');",
      "right" : "sb.append(' ');",
      "info" : "ExpressionStatement[38423-38438]:ExpressionStatement[38429-38444]"
    }, {
      "left" : "sb.append(\"Header:\").append(Arrays.toString(header));",
      "right" : "sb.append(\"Header:\").append(Arrays.toString(header));",
      "info" : "ExpressionStatement[38451-38504]:ExpressionStatement[38457-38510]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[38523-38544]:ReturnStatement[38529-38550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38610-38936]:Block[38616-38942]"
    }, {
      "left" : "if (values == null)",
      "right" : "if (values == null)",
      "info" : "IfStatement[38620-38676]:IfStatement[38626-38682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38640-38676]:Block[38646-38682]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[38654-38666]:ReturnStatement[38660-38672]"
    }, {
      "left" : "final String[] strings = new String[values.length];",
      "right" : "final String[] strings = new String[values.length];",
      "info" : "VariableDeclarationStatement[38685-38736]:VariableDeclarationStatement[38691-38742]"
    }, {
      "left" : "for (int i = 0; i < values.length; i++)",
      "right" : "for (int i = 0; i < values.length; i++)",
      "info" : "ForStatement[38745-38906]:ForStatement[38751-38912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38785-38906]:Block[38791-38912]"
    }, {
      "left" : "final Object value = values[i];",
      "right" : "final Object value = values[i];",
      "info" : "VariableDeclarationStatement[38799-38830]:VariableDeclarationStatement[38805-38836]"
    }, {
      "left" : "strings[i] = value == null ? null : value.toString();",
      "right" : "strings[i] = value == null ? null : value.toString();",
      "info" : "ExpressionStatement[38843-38896]:ExpressionStatement[38849-38902]"
    }, {
      "left" : "return strings;",
      "right" : "return strings;",
      "info" : "ReturnStatement[38915-38930]:ReturnStatement[38921-38936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39001-39488]:Block[39007-39494]"
    }, {
      "left" : "if (charSequence instanceof String)",
      "right" : "if (charSequence instanceof String)",
      "info" : "IfStatement[39011-39109]:IfStatement[39017-39115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39047-39109]:Block[39053-39115]"
    }, {
      "left" : "return ((String) charSequence).trim();",
      "right" : "return ((String) charSequence).trim();",
      "info" : "ReturnStatement[39061-39099]:ReturnStatement[39067-39105]"
    }, {
      "left" : "final int count = charSequence.length();",
      "right" : "final int count = charSequence.length();",
      "info" : "VariableDeclarationStatement[39118-39158]:VariableDeclarationStatement[39124-39164]"
    }, {
      "left" : "int len = count;",
      "right" : "int len = count;",
      "info" : "VariableDeclarationStatement[39167-39183]:VariableDeclarationStatement[39173-39189]"
    }, {
      "left" : "int pos = 0;",
      "right" : "int pos = 0;",
      "info" : "VariableDeclarationStatement[39192-39204]:VariableDeclarationStatement[39198-39210]"
    }, {
      "left" : "while (pos < len && charSequence.charAt(pos) <= SP)",
      "right" : "while (pos < len && charSequence.charAt(pos) <= SP)",
      "info" : "WhileStatement[39214-39296]:WhileStatement[39220-39302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39266-39296]:Block[39272-39302]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[39280-39286]:ExpressionStatement[39286-39292]"
    }, {
      "left" : "while (pos < len && charSequence.charAt(len - 1) <= SP)",
      "right" : "while (pos < len && charSequence.charAt(len - 1) <= SP)",
      "info" : "WhileStatement[39305-39391]:WhileStatement[39311-39397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39361-39391]:Block[39367-39397]"
    }, {
      "left" : "len--;",
      "right" : "len--;",
      "info" : "ExpressionStatement[39375-39381]:ExpressionStatement[39381-39387]"
    }, {
      "left" : "return pos > 0 || len < count ? charSequence.subSequence(pos, len) : charSequence;",
      "right" : "return pos > 0 || len < count ? charSequence.subSequence(pos, len) : charSequence;",
      "info" : "ReturnStatement[39400-39482]:ReturnStatement[39406-39488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39716-41718]:Block[39722-41724]"
    }, {
      "left" : "if (isLineBreak(delimiter))",
      "right" : "if (isLineBreak(delimiter))",
      "info" : "IfStatement[39726-39853]:IfStatement[39732-39859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39754-39853]:Block[39760-39859]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The delimiter cannot be a line break\");",
      "right" : "throw new IllegalArgumentException(\"The delimiter cannot be a line break\");",
      "info" : "ThrowStatement[39768-39843]:ThrowStatement[39774-39849]"
    }, {
      "left" : "if (quoteCharacter != null && delimiter == quoteCharacter.charValue())",
      "right" : "if (quoteCharacter != null && delimiter == quoteCharacter.charValue())",
      "info" : "IfStatement[39863-40105]:IfStatement[39869-40111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39934-40105]:Block[39940-40111]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                    \"The quoteChar character and the delimiter cannot be the same ('\" + quoteCharacter + \"')\");",
      "right" : "throw new IllegalArgumentException(\n                    \"The quoteChar character and the delimiter cannot be the same ('\" + quoteCharacter + \"')\");",
      "info" : "ThrowStatement[39948-40095]:ThrowStatement[39954-40101]"
    }, {
      "left" : "if (escapeCharacter != null && delimiter == escapeCharacter.charValue())",
      "right" : "if (escapeCharacter != null && delimiter == escapeCharacter.charValue())",
      "info" : "IfStatement[40115-40357]:IfStatement[40121-40363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40188-40357]:Block[40194-40363]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                    \"The escape character and the delimiter cannot be the same ('\" + escapeCharacter + \"')\");",
      "right" : "throw new IllegalArgumentException(\n                    \"The escape character and the delimiter cannot be the same ('\" + escapeCharacter + \"')\");",
      "info" : "ThrowStatement[40202-40347]:ThrowStatement[40208-40353]"
    }, {
      "left" : "if (commentMarker != null && delimiter == commentMarker.charValue())",
      "right" : "if (commentMarker != null && delimiter == commentMarker.charValue())",
      "info" : "IfStatement[40367-40610]:IfStatement[40373-40616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40436-40610]:Block[40442-40616]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                    \"The comment start character and the delimiter cannot be the same ('\" + commentMarker + \"')\");",
      "right" : "throw new IllegalArgumentException(\n                    \"The comment start character and the delimiter cannot be the same ('\" + commentMarker + \"')\");",
      "info" : "ThrowStatement[40450-40600]:ThrowStatement[40456-40606]"
    }, {
      "left" : "if (quoteCharacter != null && quoteCharacter.equals(commentMarker))",
      "right" : "if (quoteCharacter != null && quoteCharacter.equals(commentMarker))",
      "info" : "IfStatement[40620-40862]:IfStatement[40626-40868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40688-40862]:Block[40694-40868]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                    \"The comment start character and the quoteChar cannot be the same ('\" + commentMarker + \"')\");",
      "right" : "throw new IllegalArgumentException(\n                    \"The comment start character and the quoteChar cannot be the same ('\" + commentMarker + \"')\");",
      "info" : "ThrowStatement[40702-40852]:ThrowStatement[40708-40858]"
    }, {
      "left" : "if (escapeCharacter != null && escapeCharacter.equals(commentMarker))",
      "right" : "if (escapeCharacter != null && escapeCharacter.equals(commentMarker))",
      "info" : "IfStatement[40872-41113]:IfStatement[40878-41119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40942-41113]:Block[40948-41119]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                    \"The comment start and the escape character cannot be the same ('\" + commentMarker + \"')\");",
      "right" : "throw new IllegalArgumentException(\n                    \"The comment start and the escape character cannot be the same ('\" + commentMarker + \"')\");",
      "info" : "ThrowStatement[40956-41103]:ThrowStatement[40962-41109]"
    }, {
      "left" : "if (escapeCharacter == null && quoteMode == QuoteMode.NONE)",
      "right" : "if (escapeCharacter == null && quoteMode == QuoteMode.NONE)",
      "info" : "IfStatement[41123-41295]:IfStatement[41129-41301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41183-41295]:Block[41189-41301]"
    }, {
      "left" : "throw new IllegalArgumentException(\"No quotes mode set but no escape character is set\");",
      "right" : "throw new IllegalArgumentException(\"No quotes mode set but no escape character is set\");",
      "info" : "ThrowStatement[41197-41285]:ThrowStatement[41203-41291]"
    }, {
      "left" : "if (header != null)",
      "right" : "if (header != null)",
      "info" : "IfStatement[41332-41712]:IfStatement[41338-41718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41352-41712]:Block[41358-41718]"
    }, {
      "left" : "final Set<String> dupCheck = new HashSet<>();",
      "right" : "final Set<String> dupCheck = new HashSet<>();",
      "info" : "VariableDeclarationStatement[41366-41411]:VariableDeclarationStatement[41372-41417]"
    }, {
      "left" : "for (final String hdr : header)",
      "right" : "for (final String hdr : header)",
      "info" : "EnhancedForStatement[41424-41702]:EnhancedForStatement[41430-41708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41456-41702]:Block[41462-41708]"
    }, {
      "left" : "if (!dupCheck.add(hdr))",
      "right" : "if (!dupCheck.add(hdr))",
      "info" : "IfStatement[41474-41688]:IfStatement[41480-41694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41498-41688]:Block[41504-41694]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                            \"The header contains a duplicate entry: '\" + hdr + \"' in \" + Arrays.toString(header));",
      "right" : "throw new IllegalArgumentException(\n                            \"The header contains a duplicate entry: '\" + hdr + \"' in \" + Arrays.toString(header));",
      "info" : "ThrowStatement[41520-41670]:ThrowStatement[41526-41676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42081-42143]:Block[42087-42149]"
    }, {
      "left" : "return this.withAllowMissingColumnNames(true);",
      "right" : "return this.withAllowMissingColumnNames(true);",
      "info" : "ReturnStatement[42091-42137]:ReturnStatement[42097-42143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42724-43045]:Block[42730-43051]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
      "info" : "ReturnStatement[42734-43039]:ReturnStatement[42740-43045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43643-43718]:Block[43649-43724]"
    }, {
      "left" : "return withCommentMarker(Character.valueOf(commentMarker));",
      "right" : "return withCommentMarker(Character.valueOf(commentMarker));",
      "info" : "ReturnStatement[43653-43712]:ReturnStatement[43659-43718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44350-44832]:Block[44356-44838]"
    }, {
      "left" : "if (isLineBreak(commentMarker))",
      "right" : "if (isLineBreak(commentMarker))",
      "info" : "IfStatement[44360-44512]:IfStatement[44366-44518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44392-44512]:Block[44398-44518]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The comment start marker character cannot be a line break\");",
      "right" : "throw new IllegalArgumentException(\"The comment start marker character cannot be a line break\");",
      "info" : "ThrowStatement[44406-44502]:ThrowStatement[44412-44508]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
      "info" : "ReturnStatement[44521-44826]:ReturnStatement[44527-44832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45288-45745]:Block[45294-45751]"
    }, {
      "left" : "if (isLineBreak(delimiter))",
      "right" : "if (isLineBreak(delimiter))",
      "info" : "IfStatement[45298-45425]:IfStatement[45304-45431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45326-45425]:Block[45332-45431]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The delimiter cannot be a line break\");",
      "right" : "throw new IllegalArgumentException(\"The delimiter cannot be a line break\");",
      "info" : "ThrowStatement[45340-45415]:ThrowStatement[45346-45421]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
      "info" : "ReturnStatement[45434-45739]:ReturnStatement[45440-45745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46210-46271]:Block[46216-46277]"
    }, {
      "left" : "return withEscape(Character.valueOf(escape));",
      "right" : "return withEscape(Character.valueOf(escape));",
      "info" : "ReturnStatement[46220-46265]:ReturnStatement[46226-46271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46771-47223]:Block[46777-47229]"
    }, {
      "left" : "if (isLineBreak(escape))",
      "right" : "if (isLineBreak(escape))",
      "info" : "IfStatement[46781-46912]:IfStatement[46787-46918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46806-46912]:Block[46812-46918]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The escape character cannot be a line break\");",
      "right" : "throw new IllegalArgumentException(\"The escape character cannot be a line break\");",
      "info" : "ThrowStatement[46820-46902]:ThrowStatement[46826-46908]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape, ignoreSurroundingSpaces,\n                ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\n                allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape, ignoreSurroundingSpaces,\n                ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\n                allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
      "info" : "ReturnStatement[46921-47217]:ReturnStatement[46927-47223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47743-47802]:Block[47749-47808]"
    }, {
      "left" : "return withHeader().withSkipHeaderRecord();",
      "right" : "return withHeader().withSkipHeaderRecord();",
      "info" : "ReturnStatement[47753-47796]:ReturnStatement[47759-47802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48646-49010]:Block[48652-49016]"
    }, {
      "left" : "String[] header = null;",
      "right" : "String[] header = null;",
      "info" : "VariableDeclarationStatement[48656-48679]:VariableDeclarationStatement[48662-48685]"
    }, {
      "left" : "if (headerEnum != null)",
      "right" : "if (headerEnum != null)",
      "info" : "IfStatement[48688-48969]:IfStatement[48694-48975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48712-48969]:Block[48718-48975]"
    }, {
      "left" : "final Enum<?>[] enumValues = headerEnum.getEnumConstants();",
      "right" : "final Enum<?>[] enumValues = headerEnum.getEnumConstants();",
      "info" : "VariableDeclarationStatement[48726-48785]:VariableDeclarationStatement[48732-48791]"
    }, {
      "left" : "header = new String[enumValues.length];",
      "right" : "header = new String[enumValues.length];",
      "info" : "ExpressionStatement[48798-48837]:ExpressionStatement[48804-48843]"
    }, {
      "left" : "for (int i = 0; i < enumValues.length; i++)",
      "right" : "for (int i = 0; i < enumValues.length; i++)",
      "info" : "ForStatement[48850-48959]:ForStatement[48856-48965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48894-48959]:Block[48900-48965]"
    }, {
      "left" : "header[i] = enumValues[i].name();",
      "right" : "header[i] = enumValues[i].name();",
      "info" : "ExpressionStatement[48912-48945]:ExpressionStatement[48918-48951]"
    }, {
      "left" : "return withHeader(header);",
      "right" : "return withHeader(header);",
      "info" : "ReturnStatement[48978-49004]:ReturnStatement[48984-49010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50016-50102]:Block[50022-50108]"
    }, {
      "left" : "return withHeader(resultSet != null ? resultSet.getMetaData() : null);",
      "right" : "return withHeader(resultSet != null ? resultSet.getMetaData() : null);",
      "info" : "ReturnStatement[50026-50096]:ReturnStatement[50032-50102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51112-51463]:Block[51118-51469]"
    }, {
      "left" : "String[] labels = null;",
      "right" : "String[] labels = null;",
      "info" : "VariableDeclarationStatement[51122-51145]:VariableDeclarationStatement[51128-51151]"
    }, {
      "left" : "if (metaData != null)",
      "right" : "if (metaData != null)",
      "info" : "IfStatement[51154-51422]:IfStatement[51160-51428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51176-51422]:Block[51182-51428]"
    }, {
      "left" : "final int columnCount = metaData.getColumnCount();",
      "right" : "final int columnCount = metaData.getColumnCount();",
      "info" : "VariableDeclarationStatement[51190-51240]:VariableDeclarationStatement[51196-51246]"
    }, {
      "left" : "labels = new String[columnCount];",
      "right" : "labels = new String[columnCount];",
      "info" : "ExpressionStatement[51253-51286]:ExpressionStatement[51259-51292]"
    }, {
      "left" : "for (int i = 0; i < columnCount; i++)",
      "right" : "for (int i = 0; i < columnCount; i++)",
      "info" : "ForStatement[51299-51412]:ForStatement[51305-51418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51337-51412]:Block[51343-51418]"
    }, {
      "left" : "labels[i] = metaData.getColumnLabel(i + 1);",
      "right" : "labels[i] = metaData.getColumnLabel(i + 1);",
      "info" : "ExpressionStatement[51355-51398]:ExpressionStatement[51361-51404]"
    }, {
      "left" : "return withHeader(labels);",
      "right" : "return withHeader(labels);",
      "info" : "ReturnStatement[51431-51457]:ReturnStatement[51437-51463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52325-52646]:Block[52331-52652]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
      "info" : "ReturnStatement[52335-52640]:ReturnStatement[52341-52646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53380-53701]:Block[53386-53707]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
      "info" : "ReturnStatement[53390-53695]:ReturnStatement[53396-53701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54059-54114]:Block[54065-54120]"
    }, {
      "left" : "return this.withIgnoreEmptyLines(true);",
      "right" : "return this.withIgnoreEmptyLines(true);",
      "info" : "ReturnStatement[54069-54108]:ReturnStatement[54075-54114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54652-54973]:Block[54658-54979]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
      "info" : "ReturnStatement[54662-54967]:ReturnStatement[54668-54973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55266-55321]:Block[55272-55327]"
    }, {
      "left" : "return this.withIgnoreHeaderCase(true);",
      "right" : "return this.withIgnoreHeaderCase(true);",
      "info" : "ReturnStatement[55276-55315]:ReturnStatement[55282-55321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55803-56124]:Block[55809-56130]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
      "info" : "ReturnStatement[55813-56118]:ReturnStatement[55819-56124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56464-56526]:Block[56470-56532]"
    }, {
      "left" : "return this.withIgnoreSurroundingSpaces(true);",
      "right" : "return this.withIgnoreSurroundingSpaces(true);",
      "info" : "ReturnStatement[56474-56520]:ReturnStatement[56480-56526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57023-57344]:Block[57029-57350]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
      "info" : "ReturnStatement[57033-57338]:ReturnStatement[57039-57344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58056-58377]:Block[58062-58383]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
      "info" : "ReturnStatement[58066-58371]:ReturnStatement[58072-58377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58833-58896]:Block[58839-58902]"
    }, {
      "left" : "return withQuote(Character.valueOf(quoteChar));",
      "right" : "return withQuote(Character.valueOf(quoteChar));",
      "info" : "ReturnStatement[58843-58890]:ReturnStatement[58849-58896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59386-59838]:Block[59392-59844]"
    }, {
      "left" : "if (isLineBreak(quoteChar))",
      "right" : "if (isLineBreak(quoteChar))",
      "info" : "IfStatement[59396-59523]:IfStatement[59402-59529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59424-59523]:Block[59430-59529]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The quoteChar cannot be a line break\");",
      "right" : "throw new IllegalArgumentException(\"The quoteChar cannot be a line break\");",
      "info" : "ThrowStatement[59438-59513]:ThrowStatement[59444-59519]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteChar, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces,\n                ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\n                allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
      "right" : "return new CSVFormat(delimiter, quoteChar, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces,\n                ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\n                allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
      "info" : "ReturnStatement[59532-59832]:ReturnStatement[59538-59838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60221-60548]:Block[60227-60554]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteModePolicy, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteModePolicy, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
      "info" : "ReturnStatement[60231-60542]:ReturnStatement[60237-60548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61157-61233]:Block[61163-61239]"
    }, {
      "left" : "return withRecordSeparator(String.valueOf(recordSeparator));",
      "right" : "return withRecordSeparator(String.valueOf(recordSeparator));",
      "info" : "ReturnStatement[61167-61227]:ReturnStatement[61173-61233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61945-62266]:Block[61951-62272]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
      "info" : "ReturnStatement[61955-62260]:ReturnStatement[61961-62266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62629-62684]:Block[62635-62690]"
    }, {
      "left" : "return this.withSkipHeaderRecord(true);",
      "right" : "return this.withSkipHeaderRecord(true);",
      "info" : "ReturnStatement[62639-62678]:ReturnStatement[62645-62684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63094-63415]:Block[63100-63421]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
      "info" : "ReturnStatement[63104-63409]:ReturnStatement[63110-63415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63665-63716]:Block[63671-63722]"
    }, {
      "left" : "return withTrailingDelimiter(true);",
      "right" : "return withTrailingDelimiter(true);",
      "info" : "ReturnStatement[63675-63710]:ReturnStatement[63681-63716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64114-64435]:Block[64120-64441]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
      "info" : "ReturnStatement[64124-64429]:ReturnStatement[64130-64435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64669-64707]:Block[64675-64713]"
    }, {
      "left" : "return withTrim(true);",
      "right" : "return withTrim(true);",
      "info" : "ReturnStatement[64679-64701]:ReturnStatement[64685-64707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65068-65389]:Block[65074-65395]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
      "info" : "ReturnStatement[65078-65383]:ReturnStatement[65084-65389]"
    } ]
  },
  "interFileMappings" : { }
}