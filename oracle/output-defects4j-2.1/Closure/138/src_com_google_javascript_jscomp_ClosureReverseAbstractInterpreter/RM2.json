{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ClosureReverseAbstractInterpreter",
      "right" : "ClosureReverseAbstractInterpreter",
      "info" : "TypeDeclaration[1578-8485]:TypeDeclaration[1578-8438]"
    }, {
      "left" : "private final Visitor<JSType> restrictToArrayVisitor =\n      new RestrictByTrueTypeOfResultVisitor() {\n        @Override\n        protected JSType caseTopType(JSType topType) {\n          // Ideally, we would like to return any subtype of Array.\n          // Since that's not possible, we don't restrict the type.\n          return topType;\n        }\n\n        @Override\n        public JSType caseObjectType(ObjectType type) {\n          JSType arrayType = getNativeType(ARRAY_TYPE);\n          return arrayType.isSubtype(type) ? arrayType : null;\n        }\n      };",
      "right" : "private final Visitor<JSType> restrictToArrayVisitor =\n      new RestrictByTrueTypeOfResultVisitor() {\n        @Override\n        protected JSType caseTopType(JSType topType) {\n          // Ideally, we would like to return any subtype of Array.\n          // Since that's not possible, we don't restrict the type.\n          return topType;\n        }\n\n        @Override\n        public JSType caseObjectType(ObjectType type) {\n          JSType arrayType = getNativeType(ARRAY_TYPE);\n          return arrayType.isSubtype(type) ? arrayType : null;\n        }\n      };",
      "info" : "FieldDeclaration[1785-2406]:FieldDeclaration[1785-2406]"
    }, {
      "left" : "protected JSType caseTopType(JSType topType)",
      "right" : "protected JSType caseTopType(JSType topType)",
      "info" : "MethodDeclaration[1957-2193]:MethodDeclaration[1957-2193]"
    }, {
      "left" : "public JSType caseObjectType(ObjectType type)",
      "right" : "public JSType caseObjectType(ObjectType type)",
      "info" : "MethodDeclaration[2203-2397]:MethodDeclaration[2203-2397]"
    }, {
      "left" : "private final Visitor<JSType> restrictToNotArrayVisitor =\n      new RestrictByFalseTypeOfResultVisitor() {\n        @Override\n        public JSType caseObjectType(ObjectType type) {\n          return type.isSubtype(getNativeType(ARRAY_TYPE)) ? null : type;\n        }\n      };",
      "right" : "private final Visitor<JSType> restrictToNotArrayVisitor =\n      new RestrictByFalseTypeOfResultVisitor() {\n        @Override\n        public JSType caseObjectType(ObjectType type) {\n          return type.isSubtype(getNativeType(ARRAY_TYPE)) ? null : type;\n        }\n      };",
      "info" : "FieldDeclaration[2410-2745]:FieldDeclaration[2410-2745]"
    }, {
      "left" : "public JSType caseObjectType(ObjectType type)",
      "right" : "public JSType caseObjectType(ObjectType type)",
      "info" : "MethodDeclaration[2587-2736]:MethodDeclaration[2587-2736]"
    }, {
      "left" : "private final Visitor<JSType> restrictToObjectVisitor =\n      new RestrictByTrueTypeOfResultVisitor() {\n        @Override\n        protected JSType caseTopType(JSType topType) {\n          return getNativeType(NO_OBJECT_TYPE);\n        }\n\n        @Override\n        public JSType caseObjectType(ObjectType type) {\n          return type;\n        }\n\n        @Override\n        public JSType caseFunctionType(FunctionType type) {\n          return type;\n        }\n      };",
      "right" : "private final Visitor<JSType> restrictToObjectVisitor =\n      new RestrictByTrueTypeOfResultVisitor() {\n        @Override\n        protected JSType caseTopType(JSType topType) {\n          return getNativeType(NO_OBJECT_TYPE);\n        }\n\n        @Override\n        public JSType caseObjectType(ObjectType type) {\n          return type;\n        }\n\n        @Override\n        public JSType caseFunctionType(FunctionType type) {\n          return type;\n        }\n      };",
      "info" : "FieldDeclaration[2749-3326]:FieldDeclaration[2749-3326]"
    }, {
      "left" : "protected JSType caseTopType(JSType topType)",
      "right" : "protected JSType caseTopType(JSType topType)",
      "info" : "MethodDeclaration[2975-3097]:MethodDeclaration[2975-3097]"
    }, {
      "left" : "public JSType caseObjectType(ObjectType type)",
      "right" : "public JSType caseObjectType(ObjectType type)",
      "info" : "MethodDeclaration[3107-3205]:MethodDeclaration[3107-3205]"
    }, {
      "left" : "public JSType caseFunctionType(FunctionType type)",
      "right" : "public JSType caseFunctionType(FunctionType type)",
      "info" : "MethodDeclaration[3215-3317]:MethodDeclaration[3215-3317]"
    }, {
      "left" : "private final Visitor<JSType> restrictToNotObjectVisitor =\n      new RestrictByFalseTypeOfResultVisitor() {\n        @Override\n        public JSType caseObjectType(ObjectType type) {\n          return null;\n        }\n\n        @Override\n        public JSType caseFunctionType(FunctionType type) {\n          return null;\n        }\n      };",
      "right" : "private final Visitor<JSType> restrictToNotObjectVisitor =\n      new RestrictByFalseTypeOfResultVisitor() {\n        @Override\n        public JSType caseObjectType(ObjectType type) {\n          return null;\n        }\n\n        @Override\n        public JSType caseFunctionType(FunctionType type) {\n          return null;\n        }\n      };",
      "info" : "FieldDeclaration[3330-3728]:FieldDeclaration[3330-3728]"
    }, {
      "left" : "public JSType caseObjectType(ObjectType type)",
      "right" : "public JSType caseObjectType(ObjectType type)",
      "info" : "MethodDeclaration[3509-3607]:MethodDeclaration[3509-3607]"
    }, {
      "left" : "public JSType caseFunctionType(FunctionType type)",
      "right" : "public JSType caseFunctionType(FunctionType type)",
      "info" : "MethodDeclaration[3617-3719]:MethodDeclaration[3617-3719]"
    }, {
      "left" : "private Map<String, Function<TypeRestriction, JSType>> restricters;",
      "right" : "private Map<String, Function<TypeRestriction, JSType>> restricters;",
      "info" : "FieldDeclaration[3732-3842]:FieldDeclaration[3732-3842]"
    }, {
      "left" : "ClosureReverseAbstractInterpreter(CodingConvention convention,\n      final JSTypeRegistry typeRegistry)",
      "right" : "ClosureReverseAbstractInterpreter(CodingConvention convention,\n      final JSTypeRegistry typeRegistry)",
      "info" : "MethodDeclaration[3846-6694]:MethodDeclaration[3846-6694]"
    }, {
      "left" : "public JSType apply(TypeRestriction p)",
      "right" : "public JSType apply(TypeRestriction p)",
      "info" : "MethodDeclaration[4228-4420]:MethodDeclaration[4228-4420]"
    }, {
      "left" : "public JSType apply(TypeRestriction p)",
      "right" : "public JSType apply(TypeRestriction p)",
      "info" : "MethodDeclaration[4501-4707]:MethodDeclaration[4501-4707]"
    }, {
      "left" : "public JSType apply(TypeRestriction p)",
      "right" : "public JSType apply(TypeRestriction p)",
      "info" : "MethodDeclaration[4797-5031]:MethodDeclaration[4797-5031]"
    }, {
      "left" : "public JSType apply(TypeRestriction p)",
      "right" : "public JSType apply(TypeRestriction p)",
      "info" : "MethodDeclaration[5114-5239]:MethodDeclaration[5114-5239]"
    }, {
      "left" : "public JSType apply(TypeRestriction p)",
      "right" : "public JSType apply(TypeRestriction p)",
      "info" : "MethodDeclaration[5323-5449]:MethodDeclaration[5323-5449]"
    }, {
      "left" : "public JSType apply(TypeRestriction p)",
      "right" : "public JSType apply(TypeRestriction p)",
      "info" : "MethodDeclaration[5532-5657]:MethodDeclaration[5532-5657]"
    }, {
      "left" : "public JSType apply(TypeRestriction p)",
      "right" : "public JSType apply(TypeRestriction p)",
      "info" : "MethodDeclaration[5742-5869]:MethodDeclaration[5742-5869]"
    }, {
      "left" : "public JSType apply(TypeRestriction p)",
      "right" : "public JSType apply(TypeRestriction p)",
      "info" : "MethodDeclaration[5951-6265]:MethodDeclaration[5951-6265]"
    }, {
      "left" : "public JSType apply(TypeRestriction p)",
      "right" : "public JSType apply(TypeRestriction p)",
      "info" : "MethodDeclaration[6348-6665]:MethodDeclaration[6348-6665]"
    }, {
      "left" : "public FlowScope getPreciserScopeKnowingConditionOutcome(Node condition,\n      FlowScope blindScope, boolean outcome)",
      "right" : "public FlowScope getPreciserScopeKnowingConditionOutcome(Node condition,\n      FlowScope blindScope, boolean outcome)",
      "info" : "MethodDeclaration[6698-7760]:MethodDeclaration[6698-7713]"
    }, {
      "left" : "private FlowScope restrictParameter(Node parameter, JSType type,\n      FlowScope blindScope, Function<TypeRestriction, JSType> restriction,\n      boolean outcome)",
      "right" : "private FlowScope restrictParameter(Node parameter, JSType type,\n      FlowScope blindScope, Function<TypeRestriction, JSType> restriction,\n      boolean outcome)",
      "info" : "MethodDeclaration[7764-8250]:MethodDeclaration[7717-8203]"
    }, {
      "left" : "TypeRestriction",
      "right" : "TypeRestriction",
      "info" : "TypeDeclaration[8254-8483]:TypeDeclaration[8207-8436]"
    }, {
      "left" : "private final JSType type;",
      "right" : "private final JSType type;",
      "info" : "FieldDeclaration[8297-8323]:FieldDeclaration[8250-8276]"
    }, {
      "left" : "private final boolean outcome;",
      "right" : "private final boolean outcome;",
      "info" : "FieldDeclaration[8328-8358]:FieldDeclaration[8281-8311]"
    }, {
      "left" : "private TypeRestriction(JSType type, boolean outcome)",
      "right" : "private TypeRestriction(JSType type, boolean outcome)",
      "info" : "MethodDeclaration[8364-8479]:MethodDeclaration[8317-8432]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2020-2193]:Block[2020-2193]"
    }, {
      "left" : "return topType;",
      "right" : "return topType;",
      "info" : "ReturnStatement[2168-2183]:ReturnStatement[2168-2183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2267-2397]:Block[2267-2397]"
    }, {
      "left" : "JSType arrayType = getNativeType(ARRAY_TYPE);",
      "right" : "JSType arrayType = getNativeType(ARRAY_TYPE);",
      "info" : "VariableDeclarationStatement[2279-2324]:VariableDeclarationStatement[2279-2324]"
    }, {
      "left" : "return arrayType.isSubtype(type) ? arrayType : null;",
      "right" : "return arrayType.isSubtype(type) ? arrayType : null;",
      "info" : "ReturnStatement[2335-2387]:ReturnStatement[2335-2387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2651-2736]:Block[2651-2736]"
    }, {
      "left" : "return type.isSubtype(getNativeType(ARRAY_TYPE)) ? null : type;",
      "right" : "return type.isSubtype(getNativeType(ARRAY_TYPE)) ? null : type;",
      "info" : "ReturnStatement[2663-2726]:ReturnStatement[2663-2726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3038-3097]:Block[3038-3097]"
    }, {
      "left" : "return getNativeType(NO_OBJECT_TYPE);",
      "right" : "return getNativeType(NO_OBJECT_TYPE);",
      "info" : "ReturnStatement[3050-3087]:ReturnStatement[3050-3087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3171-3205]:Block[3171-3205]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[3183-3195]:ReturnStatement[3183-3195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3283-3317]:Block[3283-3317]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[3295-3307]:ReturnStatement[3295-3307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3573-3607]:Block[3573-3607]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3585-3597]:ReturnStatement[3585-3597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3685-3719]:Block[3685-3719]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3697-3709]:ReturnStatement[3697-3709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4020-6694]:Block[4020-6694]"
    }, {
      "left" : "super(convention, typeRegistry);",
      "right" : "super(convention, typeRegistry);",
      "info" : "SuperConstructorInvocation[4026-4058]:SuperConstructorInvocation[4026-4058]"
    }, {
      "left" : "this.restricters =\n      new ImmutableMap.Builder<String, Function<TypeRestriction, JSType>>()\n      .put(\"isDef\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          if (p.outcome) {\n            return getRestrictedWithoutUndefined(p.type);\n          } else {\n            return null;\n          }\n         }\n      })\n      .put(\"isNull\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          if (p.outcome) {\n            return getNativeType(NULL_TYPE);\n          } else {\n            return getRestrictedWithoutNull(p.type);\n          }\n        }\n      })\n      .put(\"isDefAndNotNull\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          if (p.outcome) {\n            return getRestrictedWithoutUndefined(\n                getRestrictedWithoutNull(p.type));\n          } else {\n            return null;\n          }\n        }\n      })\n      .put(\"isString\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          return getRestrictedByTypeOfResult(p.type, \"string\", p.outcome);\n        }\n      })\n      .put(\"isBoolean\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          return getRestrictedByTypeOfResult(p.type, \"boolean\", p.outcome);\n        }\n      })\n      .put(\"isNumber\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          return getRestrictedByTypeOfResult(p.type, \"number\", p.outcome);\n        }\n      })\n      .put(\"isFunction\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          return getRestrictedByTypeOfResult(p.type, \"function\", p.outcome);\n        }\n      })\n      .put(\"isArray\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          if (p.type == null) {\n            return p.outcome ? getNativeType(ARRAY_TYPE) : null;\n          }\n\n          Visitor<JSType> visitor = p.outcome ? restrictToArrayVisitor :\n              restrictToNotArrayVisitor;\n          return p.type.visit(visitor);\n        }\n      })\n      .put(\"isObject\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          if (p.type == null) {\n            return p.outcome ? getNativeType(OBJECT_TYPE) : null;\n          }\n\n          Visitor<JSType> visitor = p.outcome ? restrictToObjectVisitor :\n              restrictToNotObjectVisitor;\n          return p.type.visit(visitor);\n        }\n      })\n      .build();",
      "right" : "this.restricters =\n      new ImmutableMap.Builder<String, Function<TypeRestriction, JSType>>()\n      .put(\"isDef\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          if (p.outcome) {\n            return getRestrictedWithoutUndefined(p.type);\n          } else {\n            return null;\n          }\n         }\n      })\n      .put(\"isNull\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          if (p.outcome) {\n            return getNativeType(NULL_TYPE);\n          } else {\n            return getRestrictedWithoutNull(p.type);\n          }\n        }\n      })\n      .put(\"isDefAndNotNull\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          if (p.outcome) {\n            return getRestrictedWithoutUndefined(\n                getRestrictedWithoutNull(p.type));\n          } else {\n            return null;\n          }\n        }\n      })\n      .put(\"isString\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          return getRestrictedByTypeOfResult(p.type, \"string\", p.outcome);\n        }\n      })\n      .put(\"isBoolean\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          return getRestrictedByTypeOfResult(p.type, \"boolean\", p.outcome);\n        }\n      })\n      .put(\"isNumber\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          return getRestrictedByTypeOfResult(p.type, \"number\", p.outcome);\n        }\n      })\n      .put(\"isFunction\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          return getRestrictedByTypeOfResult(p.type, \"function\", p.outcome);\n        }\n      })\n      .put(\"isArray\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          if (p.type == null) {\n            return p.outcome ? getNativeType(ARRAY_TYPE) : null;\n          }\n\n          Visitor<JSType> visitor = p.outcome ? restrictToArrayVisitor :\n              restrictToNotArrayVisitor;\n          return p.type.visit(visitor);\n        }\n      })\n      .put(\"isObject\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          if (p.type == null) {\n            return p.outcome ? getNativeType(OBJECT_TYPE) : null;\n          }\n\n          Visitor<JSType> visitor = p.outcome ? restrictToObjectVisitor :\n              restrictToNotObjectVisitor;\n          return p.type.visit(visitor);\n        }\n      })\n      .build();",
      "info" : "ExpressionStatement[4063-6690]:ExpressionStatement[4063-6690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4267-4420]:Block[4267-4420]"
    }, {
      "left" : "if (p.outcome)",
      "right" : "if (p.outcome)",
      "info" : "IfStatement[4279-4409]:IfStatement[4279-4409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4294-4365]:Block[4294-4365]"
    }, {
      "left" : "return getRestrictedWithoutUndefined(p.type);",
      "right" : "return getRestrictedWithoutUndefined(p.type);",
      "info" : "ReturnStatement[4308-4353]:ReturnStatement[4308-4353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4371-4409]:Block[4371-4409]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[4385-4397]:ReturnStatement[4385-4397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4540-4707]:Block[4540-4707]"
    }, {
      "left" : "if (p.outcome)",
      "right" : "if (p.outcome)",
      "info" : "IfStatement[4552-4697]:IfStatement[4552-4697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4567-4625]:Block[4567-4625]"
    }, {
      "left" : "return getNativeType(NULL_TYPE);",
      "right" : "return getNativeType(NULL_TYPE);",
      "info" : "ReturnStatement[4581-4613]:ReturnStatement[4581-4613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4631-4697]:Block[4631-4697]"
    }, {
      "left" : "return getRestrictedWithoutNull(p.type);",
      "right" : "return getRestrictedWithoutNull(p.type);",
      "info" : "ReturnStatement[4645-4685]:ReturnStatement[4645-4685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4836-5031]:Block[4836-5031]"
    }, {
      "left" : "if (p.outcome)",
      "right" : "if (p.outcome)",
      "info" : "IfStatement[4848-5021]:IfStatement[4848-5021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4863-4977]:Block[4863-4977]"
    }, {
      "left" : "return getRestrictedWithoutUndefined(\n                getRestrictedWithoutNull(p.type));",
      "right" : "return getRestrictedWithoutUndefined(\n                getRestrictedWithoutNull(p.type));",
      "info" : "ReturnStatement[4877-4965]:ReturnStatement[4877-4965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4983-5021]:Block[4983-5021]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[4997-5009]:ReturnStatement[4997-5009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5153-5239]:Block[5153-5239]"
    }, {
      "left" : "return getRestrictedByTypeOfResult(p.type, \"string\", p.outcome);",
      "right" : "return getRestrictedByTypeOfResult(p.type, \"string\", p.outcome);",
      "info" : "ReturnStatement[5165-5229]:ReturnStatement[5165-5229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5362-5449]:Block[5362-5449]"
    }, {
      "left" : "return getRestrictedByTypeOfResult(p.type, \"boolean\", p.outcome);",
      "right" : "return getRestrictedByTypeOfResult(p.type, \"boolean\", p.outcome);",
      "info" : "ReturnStatement[5374-5439]:ReturnStatement[5374-5439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5571-5657]:Block[5571-5657]"
    }, {
      "left" : "return getRestrictedByTypeOfResult(p.type, \"number\", p.outcome);",
      "right" : "return getRestrictedByTypeOfResult(p.type, \"number\", p.outcome);",
      "info" : "ReturnStatement[5583-5647]:ReturnStatement[5583-5647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5781-5869]:Block[5781-5869]"
    }, {
      "left" : "return getRestrictedByTypeOfResult(p.type, \"function\", p.outcome);",
      "right" : "return getRestrictedByTypeOfResult(p.type, \"function\", p.outcome);",
      "info" : "ReturnStatement[5793-5859]:ReturnStatement[5793-5859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5990-6265]:Block[5990-6265]"
    }, {
      "left" : "if (p.type == null)",
      "right" : "if (p.type == null)",
      "info" : "IfStatement[6002-6100]:IfStatement[6002-6100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6022-6100]:Block[6022-6100]"
    }, {
      "left" : "return p.outcome ? getNativeType(ARRAY_TYPE) : null;",
      "right" : "return p.outcome ? getNativeType(ARRAY_TYPE) : null;",
      "info" : "ReturnStatement[6036-6088]:ReturnStatement[6036-6088]"
    }, {
      "left" : "Visitor<JSType> visitor = p.outcome ? restrictToArrayVisitor :\n              restrictToNotArrayVisitor;",
      "right" : "Visitor<JSType> visitor = p.outcome ? restrictToArrayVisitor :\n              restrictToNotArrayVisitor;",
      "info" : "VariableDeclarationStatement[6112-6215]:VariableDeclarationStatement[6112-6215]"
    }, {
      "left" : "return p.type.visit(visitor);",
      "right" : "return p.type.visit(visitor);",
      "info" : "ReturnStatement[6226-6255]:ReturnStatement[6226-6255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6387-6665]:Block[6387-6665]"
    }, {
      "left" : "if (p.type == null)",
      "right" : "if (p.type == null)",
      "info" : "IfStatement[6399-6498]:IfStatement[6399-6498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6419-6498]:Block[6419-6498]"
    }, {
      "left" : "return p.outcome ? getNativeType(OBJECT_TYPE) : null;",
      "right" : "return p.outcome ? getNativeType(OBJECT_TYPE) : null;",
      "info" : "ReturnStatement[6433-6486]:ReturnStatement[6433-6486]"
    }, {
      "left" : "Visitor<JSType> visitor = p.outcome ? restrictToObjectVisitor :\n              restrictToNotObjectVisitor;",
      "right" : "Visitor<JSType> visitor = p.outcome ? restrictToObjectVisitor :\n              restrictToNotObjectVisitor;",
      "info" : "VariableDeclarationStatement[6510-6615]:VariableDeclarationStatement[6510-6615]"
    }, {
      "left" : "return p.type.visit(visitor);",
      "right" : "return p.type.visit(visitor);",
      "info" : "ReturnStatement[6626-6655]:ReturnStatement[6626-6655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6828-7760]:Block[6828-7713]"
    }, {
      "left" : "if (condition.getType() == CALL && condition.getChildCount() == 2)",
      "right" : "if (condition.getType() == CALL && condition.getChildCount() == 2)",
      "info" : "IfStatement[6834-7662]:IfStatement[6834-7615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6901-7662]:Block[6901-7615]"
    }, {
      "left" : "Node callee = condition.getFirstChild();",
      "right" : "Node callee = condition.getFirstChild();",
      "info" : "VariableDeclarationStatement[6909-6949]:VariableDeclarationStatement[6909-6949]"
    }, {
      "left" : "Node param = condition.getLastChild();",
      "right" : "Node param = condition.getLastChild();",
      "info" : "VariableDeclarationStatement[6956-6994]:VariableDeclarationStatement[6956-6994]"
    }, {
      "left" : "if (callee.getType() == GETPROP && param.isQualifiedName())",
      "right" : "if (callee.getType() == GETPROP && param.isQualifiedName())",
      "info" : "IfStatement[7001-7656]:IfStatement[7001-7609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7061-7656]:Block[7061-7609]"
    }, {
      "left" : "JSType paramType =  getTypeIfRefinable(param, blindScope);",
      "right" : "JSType paramType =  getTypeIfRefinable(param, blindScope);",
      "info" : "VariableDeclarationStatement[7071-7129]:VariableDeclarationStatement[7071-7129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7161-7648]:Block[7330-7601]"
    }, {
      "left" : "Node left = callee.getFirstChild();",
      "right" : "Node left = callee.getFirstChild();",
      "info" : "VariableDeclarationStatement[7171-7206]:VariableDeclarationStatement[7138-7173]"
    }, {
      "left" : "Node right = callee.getLastChild();",
      "right" : "Node right = callee.getLastChild();",
      "info" : "VariableDeclarationStatement[7215-7250]:VariableDeclarationStatement[7182-7217]"
    }, {
      "left" : "if (left.getType() == NAME && \"goog\".equals(left.getString()) &&\n            right.getType() == STRING)",
      "right" : "if (left.getType() == NAME && \"goog\".equals(left.getString()) &&\n            right.getType() == STRING)",
      "info" : "IfStatement[7259-7638]:IfStatement[7226-7601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7363-7638]:Block[7473-7591]"
    }, {
      "left" : "Function<TypeRestriction, JSType> restricter =\n              restricters.get(right.getString());",
      "right" : "Function<TypeRestriction, JSType> restricter =\n              restricters.get(right.getString());",
      "info" : "VariableDeclarationStatement[7375-7471]:VariableDeclarationStatement[7342-7438]"
    }, {
      "left" : "if (restricter != null)",
      "right" : "if (restricter != null)",
      "info" : "IfStatement[7482-7626]:IfStatement[7449-7591]"
    }, {
      "left" : "return restrictParameter(param, paramType, blindScope, restricter,\n                outcome);",
      "right" : "return restrictParameter(param, paramType, blindScope, restricter,\n                outcome);",
      "info" : "ReturnStatement[7520-7612]:ReturnStatement[7487-7579]"
    }, {
      "left" : "return nextPreciserScopeKnowingConditionOutcome(\n        condition, blindScope, outcome);",
      "right" : "return nextPreciserScopeKnowingConditionOutcome(\n        condition, blindScope, outcome);",
      "info" : "ReturnStatement[7667-7756]:ReturnStatement[7620-7709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7927-8250]:Block[7880-8203]"
    }, {
      "left" : "type = restriction.apply(new TypeRestriction(type, outcome));",
      "right" : "type = restriction.apply(new TypeRestriction(type, outcome));",
      "info" : "ExpressionStatement[7952-8013]:ExpressionStatement[7905-7966]"
    }, {
      "left" : "if (type != null)",
      "right" : "if (type != null)",
      "info" : "IfStatement[8045-8246]:IfStatement[7998-8199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8063-8208]:Block[8016-8161]"
    }, {
      "left" : "FlowScope informed = blindScope.createChildFlowScope();",
      "right" : "FlowScope informed = blindScope.createChildFlowScope();",
      "info" : "VariableDeclarationStatement[8071-8126]:VariableDeclarationStatement[8024-8079]"
    }, {
      "left" : "declareNameInScope(informed, parameter, type);",
      "right" : "declareNameInScope(informed, parameter, type);",
      "info" : "ExpressionStatement[8133-8179]:ExpressionStatement[8086-8132]"
    }, {
      "left" : "return informed;",
      "right" : "return informed;",
      "info" : "ReturnStatement[8186-8202]:ReturnStatement[8139-8155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8214-8246]:Block[8167-8199]"
    }, {
      "left" : "return blindScope;",
      "right" : "return blindScope;",
      "info" : "ReturnStatement[8222-8240]:ReturnStatement[8175-8193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8418-8479]:Block[8371-8432]"
    }, {
      "left" : "this.type = type;",
      "right" : "this.type = type;",
      "info" : "ExpressionStatement[8426-8443]:ExpressionStatement[8379-8396]"
    }, {
      "left" : "this.outcome = outcome;",
      "right" : "this.outcome = outcome;",
      "info" : "ExpressionStatement[8450-8473]:ExpressionStatement[8403-8426]"
    } ]
  },
  "interFileMappings" : { }
}