{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TypeInference",
      "right" : "TypeInference",
      "info" : "TypeDeclaration[2935-56905]:TypeDeclaration[2935-57095]"
    }, {
      "left" : "static final DiagnosticType FUNCTION_LITERAL_UNDEFINED_THIS =\n    DiagnosticType.warning(\n        \"JSC_FUNCTION_LITERAL_UNDEFINED_THIS\",\n        \"Function literal argument refers to undefined this argument\");",
      "right" : "static final DiagnosticType FUNCTION_LITERAL_UNDEFINED_THIS =\n    DiagnosticType.warning(\n        \"JSC_FUNCTION_LITERAL_UNDEFINED_THIS\",\n        \"Function literal argument refers to undefined this argument\");",
      "info" : "FieldDeclaration[3217-3425]:FieldDeclaration[3217-3425]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[3429-3469]:FieldDeclaration[3429-3469]"
    }, {
      "left" : "private final JSTypeRegistry registry;",
      "right" : "private final JSTypeRegistry registry;",
      "info" : "FieldDeclaration[3472-3510]:FieldDeclaration[3472-3510]"
    }, {
      "left" : "private final ReverseAbstractInterpreter reverseInterpreter;",
      "right" : "private final ReverseAbstractInterpreter reverseInterpreter;",
      "info" : "FieldDeclaration[3513-3573]:FieldDeclaration[3513-3573]"
    }, {
      "left" : "private final Scope syntacticScope;",
      "right" : "private final Scope syntacticScope;",
      "info" : "FieldDeclaration[3576-3611]:FieldDeclaration[3576-3611]"
    }, {
      "left" : "private final FlowScope functionScope;",
      "right" : "private final FlowScope functionScope;",
      "info" : "FieldDeclaration[3614-3652]:FieldDeclaration[3614-3652]"
    }, {
      "left" : "private final FlowScope bottomScope;",
      "right" : "private final FlowScope bottomScope;",
      "info" : "FieldDeclaration[3655-3691]:FieldDeclaration[3655-3691]"
    }, {
      "left" : "private final Map<String, AssertionFunctionSpec> assertionFunctionsMap;",
      "right" : "private final Map<String, AssertionFunctionSpec> assertionFunctionsMap;",
      "info" : "FieldDeclaration[3694-3765]:FieldDeclaration[3694-3765]"
    }, {
      "left" : "private final ObjectType unknownType;",
      "right" : "private final ObjectType unknownType;",
      "info" : "FieldDeclaration[3790-3827]:FieldDeclaration[3790-3827]"
    }, {
      "left" : "TypeInference(AbstractCompiler compiler, ControlFlowGraph<Node> cfg,\n                ReverseAbstractInterpreter reverseInterpreter,\n                Scope functionScope,\n                Map<String, AssertionFunctionSpec> assertionFunctionsMap)",
      "right" : "TypeInference(AbstractCompiler compiler, ControlFlowGraph<Node> cfg,\n                ReverseAbstractInterpreter reverseInterpreter,\n                Scope functionScope,\n                Map<String, AssertionFunctionSpec> assertionFunctionsMap)",
      "info" : "MethodDeclaration[3831-5065]:MethodDeclaration[3831-5065]"
    }, {
      "left" : "private void inferArguments(Scope functionScope)",
      "right" : "private void inferArguments(Scope functionScope)",
      "info" : "MethodDeclaration[5069-6669]:MethodDeclaration[5069-6669]"
    }, {
      "left" : "FlowScope createInitialEstimateLattice()",
      "right" : "FlowScope createInitialEstimateLattice()",
      "info" : "MethodDeclaration[6673-6755]:MethodDeclaration[6673-6755]"
    }, {
      "left" : "FlowScope createEntryLattice()",
      "right" : "FlowScope createEntryLattice()",
      "info" : "MethodDeclaration[6759-6833]:MethodDeclaration[6759-6833]"
    }, {
      "left" : "FlowScope flowThrough(Node n, FlowScope input)",
      "right" : "FlowScope flowThrough(Node n, FlowScope input)",
      "info" : "MethodDeclaration[6837-7185]:MethodDeclaration[6837-7185]"
    }, {
      "left" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
      "right" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
      "info" : "MethodDeclaration[7189-11944]:MethodDeclaration[7189-11944]"
    }, {
      "left" : "private FlowScope traverse(Node n, FlowScope scope)",
      "right" : "private FlowScope traverse(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[11948-15758]:MethodDeclaration[11948-15758]"
    }, {
      "left" : "private FlowScope traverseReturn(Node n, FlowScope scope)",
      "right" : "private FlowScope traverseReturn(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[15762-16300]:MethodDeclaration[15762-16300]"
    }, {
      "left" : "private FlowScope traverseCatch(Node catchNode, FlowScope scope)",
      "right" : "private FlowScope traverseCatch(Node catchNode, FlowScope scope)",
      "info" : "MethodDeclaration[16304-16995]:MethodDeclaration[16304-16995]"
    }, {
      "left" : "private FlowScope traverseAssign(Node n, FlowScope scope)",
      "right" : "private FlowScope traverseAssign(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[16999-17365]:MethodDeclaration[16999-17365]"
    }, {
      "left" : "private void updateScopeForTypeChange(\n      FlowScope scope, Node left, JSType leftType, JSType resultType)",
      "right" : "private void updateScopeForTypeChange(\n      FlowScope scope, Node left, JSType leftType, JSType resultType)",
      "info" : "MethodDeclaration[17369-19264]:MethodDeclaration[17369-19264]"
    }, {
      "left" : "private void ensurePropertyDefined(Node getprop, JSType rightType)",
      "right" : "private void ensurePropertyDefined(Node getprop, JSType rightType)",
      "info" : "MethodDeclaration[19268-22579]:MethodDeclaration[19268-22579]"
    }, {
      "left" : "private void ensurePropertyDeclared(Node getprop)",
      "right" : "private void ensurePropertyDeclared(Node getprop)",
      "info" : "MethodDeclaration[22583-23116]:MethodDeclaration[22583-23116]"
    }, {
      "left" : "private boolean ensurePropertyDeclaredHelper(\n      Node getprop, ObjectType objectType)",
      "right" : "private boolean ensurePropertyDeclaredHelper(\n      Node getprop, ObjectType objectType)",
      "info" : "MethodDeclaration[23120-24065]:MethodDeclaration[23120-24065]"
    }, {
      "left" : "private FlowScope traverseName(Node n, FlowScope scope)",
      "right" : "private FlowScope traverseName(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[24069-26071]:MethodDeclaration[24069-26071]"
    }, {
      "left" : "private FlowScope traverseArrayLiteral(Node n, FlowScope scope)",
      "right" : "private FlowScope traverseArrayLiteral(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[26075-26291]:MethodDeclaration[26075-26291]"
    }, {
      "left" : "private FlowScope traverseObjectLiteral(Node n, FlowScope scope)",
      "right" : "private FlowScope traverseObjectLiteral(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[26295-28225]:MethodDeclaration[26295-28225]"
    }, {
      "left" : "private FlowScope traverseAdd(Node n, FlowScope scope)",
      "right" : "private FlowScope traverseAdd(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[28229-29345]:MethodDeclaration[28229-29345]"
    }, {
      "left" : "private boolean isAddedAsNumber(JSType type)",
      "right" : "private boolean isAddedAsNumber(JSType type)",
      "info" : "MethodDeclaration[29349-29546]:MethodDeclaration[29349-29546]"
    }, {
      "left" : "private FlowScope traverseHook(Node n, FlowScope scope)",
      "right" : "private FlowScope traverseHook(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[29550-30696]:MethodDeclaration[29550-30696]"
    }, {
      "left" : "private FlowScope traverseCall(Node n, FlowScope scope)",
      "right" : "private FlowScope traverseCall(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[30700-31332]:MethodDeclaration[30700-31332]"
    }, {
      "left" : "private FlowScope tightenTypesAfterAssertions(FlowScope scope,\n      Node callNode)",
      "right" : "private FlowScope tightenTypesAfterAssertions(FlowScope scope,\n      Node callNode)",
      "info" : "MethodDeclaration[31336-32793]:MethodDeclaration[31336-32793]"
    }, {
      "left" : "private FlowScope narrowScope(FlowScope scope, Node node, JSType narrowed)",
      "right" : "private FlowScope narrowScope(FlowScope scope, Node node, JSType narrowed)",
      "info" : "MethodDeclaration[32797-33265]:MethodDeclaration[32797-33265]"
    }, {
      "left" : "private void backwardsInferenceFromCallSite(Node n, FunctionType fnType)",
      "right" : "private void backwardsInferenceFromCallSite(Node n, FunctionType fnType)",
      "info" : "MethodDeclaration[33269-34493]:MethodDeclaration[33269-34493]"
    }, {
      "left" : "private void updateBind(Node n)",
      "right" : "private void updateBind(Node n)",
      "info" : "MethodDeclaration[34497-35203]:MethodDeclaration[34497-35203]"
    }, {
      "left" : "private void updateTypeOfParameters(Node n, FunctionType fnType)",
      "right" : "private void updateTypeOfParameters(Node n, FunctionType fnType)",
      "info" : "MethodDeclaration[35207-36428]:MethodDeclaration[35207-36428]"
    }, {
      "left" : "private Map<TemplateType, JSType> inferTemplateTypesFromParameters(\n      FunctionType fnType, Node call)",
      "right" : "private Map<TemplateType, JSType> inferTemplateTypesFromParameters(\n      FunctionType fnType, Node call)",
      "info" : "MethodDeclaration[36432-37198]:MethodDeclaration[36432-37198]"
    }, {
      "left" : "private void maybeResolveTemplatedType(\n      JSType paramType,\n      JSType argType,\n      Map<TemplateType, JSType> resolvedTypes)",
      "right" : "private void maybeResolveTemplatedType(\n      JSType paramType,\n      JSType argType,\n      Map<TemplateType, JSType> resolvedTypes)",
      "info" : "MethodDeclaration[37202-39647]:MethodDeclaration[37202-39647]"
    }, {
      "left" : "private void maybeResolveTemplateTypeFromNodes(\n      Iterable<Node> declParams,\n      Iterable<Node> callParams,\n      Map<TemplateType, JSType> resolvedTypes)",
      "right" : "private void maybeResolveTemplateTypeFromNodes(\n      Iterable<Node> declParams,\n      Iterable<Node> callParams,\n      Map<TemplateType, JSType> resolvedTypes)",
      "info" : "MethodDeclaration[39651-39926]:MethodDeclaration[39651-39926]"
    }, {
      "left" : "private void maybeResolveTemplateTypeFromNodes(\n      Iterator<Node> declParams,\n      Iterator<Node> callParams,\n      Map<TemplateType, JSType> resolvedTypes)",
      "right" : "private void maybeResolveTemplateTypeFromNodes(\n      Iterator<Node> declParams,\n      Iterator<Node> callParams,\n      Map<TemplateType, JSType> resolvedTypes)",
      "info" : "MethodDeclaration[39930-40573]:MethodDeclaration[39930-40573]"
    }, {
      "left" : "private static void resolvedTemplateType(\n      Map<TemplateType, JSType> map, TemplateType template, JSType resolved)",
      "right" : "private static void resolvedTemplateType(\n      Map<TemplateType, JSType> map, TemplateType template, JSType resolved)",
      "info" : "MethodDeclaration[40577-40968]:MethodDeclaration[40577-40968]"
    }, {
      "left" : "TemplateTypeReplacer",
      "right" : "TemplateTypeReplacer",
      "info" : "TypeDeclaration[40972-41635]:TypeDeclaration[40972-41635]"
    }, {
      "left" : "private final Map<TemplateType, JSType> replacements;",
      "right" : "private final Map<TemplateType, JSType> replacements;",
      "info" : "FieldDeclaration[41048-41101]:FieldDeclaration[41048-41101]"
    }, {
      "left" : "private final JSTypeRegistry registry;",
      "right" : "private final JSTypeRegistry registry;",
      "info" : "FieldDeclaration[41106-41144]:FieldDeclaration[41106-41144]"
    }, {
      "left" : "boolean madeChanges = false;",
      "right" : "boolean madeChanges = false;",
      "info" : "FieldDeclaration[41149-41177]:FieldDeclaration[41149-41177]"
    }, {
      "left" : "TemplateTypeReplacer(\n        JSTypeRegistry registry, Map<TemplateType, JSType> replacements)",
      "right" : "TemplateTypeReplacer(\n        JSTypeRegistry registry, Map<TemplateType, JSType> replacements)",
      "info" : "MethodDeclaration[41183-41380]:MethodDeclaration[41183-41380]"
    }, {
      "left" : "public JSType caseTemplateType(TemplateType type)",
      "right" : "public JSType caseTemplateType(TemplateType type)",
      "info" : "MethodDeclaration[41386-41631]:MethodDeclaration[41386-41631]"
    }, {
      "left" : "private boolean inferTemplatedTypesForCall(\n      Node n, FunctionType fnType)",
      "right" : "private boolean inferTemplatedTypesForCall(\n      Node n, FunctionType fnType)",
      "info" : "MethodDeclaration[41639-42717]:MethodDeclaration[41639-42907]"
    }, {
      "left" : "private FlowScope traverseNew(Node n, FlowScope scope)",
      "right" : "private FlowScope traverseNew(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[42721-44218]:MethodDeclaration[42911-44408]"
    }, {
      "left" : "private BooleanOutcomePair traverseAnd(Node n, FlowScope scope)",
      "right" : "private BooleanOutcomePair traverseAnd(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[44222-44348]:MethodDeclaration[44412-44538]"
    }, {
      "left" : "private FlowScope traverseChildren(Node n, FlowScope scope)",
      "right" : "private FlowScope traverseChildren(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[44352-44547]:MethodDeclaration[44542-44737]"
    }, {
      "left" : "private FlowScope traverseGetElem(Node n, FlowScope scope)",
      "right" : "private FlowScope traverseGetElem(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[44551-44997]:MethodDeclaration[44741-45187]"
    }, {
      "left" : "private FlowScope traverseGetProp(Node n, FlowScope scope)",
      "right" : "private FlowScope traverseGetProp(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[45001-45348]:MethodDeclaration[45191-45538]"
    }, {
      "left" : "private static void inferPropertyTypesToMatchConstraint(\n      JSType type, JSType constraint)",
      "right" : "private static void inferPropertyTypesToMatchConstraint(\n      JSType type, JSType constraint)",
      "info" : "MethodDeclaration[45352-46087]:MethodDeclaration[45542-46277]"
    }, {
      "left" : "private FlowScope dereferencePointer(Node n, FlowScope scope)",
      "right" : "private FlowScope dereferencePointer(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[46091-46497]:MethodDeclaration[46281-46687]"
    }, {
      "left" : "private JSType getPropertyType(JSType objType, String propName,\n      Node n, FlowScope scope)",
      "right" : "private JSType getPropertyType(JSType objType, String propName,\n      Node n, FlowScope scope)",
      "info" : "MethodDeclaration[46501-48929]:MethodDeclaration[46691-49119]"
    }, {
      "left" : "private BooleanOutcomePair traverseOr(Node n, FlowScope scope)",
      "right" : "private BooleanOutcomePair traverseOr(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[48933-49059]:MethodDeclaration[49123-49249]"
    }, {
      "left" : "private BooleanOutcomePair traverseShortCircuitingBinOp(\n      Node n, FlowScope scope, boolean condition)",
      "right" : "private BooleanOutcomePair traverseShortCircuitingBinOp(\n      Node n, FlowScope scope, boolean condition)",
      "info" : "MethodDeclaration[49063-51422]:MethodDeclaration[49253-51612]"
    }, {
      "left" : "private BooleanOutcomePair traverseWithinShortCircuitingBinOp(Node n,\n      FlowScope scope)",
      "right" : "private BooleanOutcomePair traverseWithinShortCircuitingBinOp(Node n,\n      FlowScope scope)",
      "info" : "MethodDeclaration[51426-51788]:MethodDeclaration[51616-51978]"
    }, {
      "left" : "BooleanOutcomePair getBooleanOutcomePair(BooleanOutcomePair left,\n      BooleanOutcomePair right, boolean condition)",
      "right" : "BooleanOutcomePair getBooleanOutcomePair(BooleanOutcomePair left,\n      BooleanOutcomePair right, boolean condition)",
      "info" : "MethodDeclaration[51792-52424]:MethodDeclaration[51982-52614]"
    }, {
      "left" : "static BooleanLiteralSet getBooleanOutcomes(BooleanLiteralSet left,\n      BooleanLiteralSet right, boolean condition)",
      "right" : "static BooleanLiteralSet getBooleanOutcomes(BooleanLiteralSet left,\n      BooleanLiteralSet right, boolean condition)",
      "info" : "MethodDeclaration[52428-53286]:MethodDeclaration[52618-53476]"
    }, {
      "left" : "BooleanOutcomePair",
      "right" : "BooleanOutcomePair",
      "info" : "TypeDeclaration[53290-55148]:TypeDeclaration[53480-55338]"
    }, {
      "left" : "final BooleanLiteralSet toBooleanOutcomes;",
      "right" : "final BooleanLiteralSet toBooleanOutcomes;",
      "info" : "FieldDeclaration[53618-53660]:FieldDeclaration[53808-53850]"
    }, {
      "left" : "final BooleanLiteralSet booleanValues;",
      "right" : "final BooleanLiteralSet booleanValues;",
      "info" : "FieldDeclaration[53665-53703]:FieldDeclaration[53855-53893]"
    }, {
      "left" : "final FlowScope leftScope;",
      "right" : "final FlowScope leftScope;",
      "info" : "FieldDeclaration[53784-53810]:FieldDeclaration[53974-54000]"
    }, {
      "left" : "final FlowScope rightScope;",
      "right" : "final FlowScope rightScope;",
      "info" : "FieldDeclaration[53869-53896]:FieldDeclaration[54059-54086]"
    }, {
      "left" : "FlowScope joinedScope = null;",
      "right" : "FlowScope joinedScope = null;",
      "info" : "FieldDeclaration[53978-54007]:FieldDeclaration[54168-54197]"
    }, {
      "left" : "BooleanOutcomePair(\n        BooleanLiteralSet toBooleanOutcomes, BooleanLiteralSet booleanValues,\n        FlowScope leftScope, FlowScope rightScope)",
      "right" : "BooleanOutcomePair(\n        BooleanLiteralSet toBooleanOutcomes, BooleanLiteralSet booleanValues,\n        FlowScope leftScope, FlowScope rightScope)",
      "info" : "MethodDeclaration[54013-54331]:MethodDeclaration[54203-54521]"
    }, {
      "left" : "FlowScope getJoinedFlowScope()",
      "right" : "FlowScope getJoinedFlowScope()",
      "info" : "MethodDeclaration[54337-54721]:MethodDeclaration[54527-54911]"
    }, {
      "left" : "FlowScope getOutcomeFlowScope(int nodeType, boolean outcome)",
      "right" : "FlowScope getOutcomeFlowScope(int nodeType, boolean outcome)",
      "info" : "MethodDeclaration[54727-55144]:MethodDeclaration[54917-55334]"
    }, {
      "left" : "private BooleanOutcomePair newBooleanOutcomePair(\n      JSType jsType, FlowScope flowScope)",
      "right" : "private BooleanOutcomePair newBooleanOutcomePair(\n      JSType jsType, FlowScope flowScope)",
      "info" : "MethodDeclaration[55152-55630]:MethodDeclaration[55342-55820]"
    }, {
      "left" : "private void redeclareSimpleVar(\n      FlowScope scope, Node nameNode, JSType varType)",
      "right" : "private void redeclareSimpleVar(\n      FlowScope scope, Node nameNode, JSType varType)",
      "info" : "MethodDeclaration[55634-56028]:MethodDeclaration[55824-56218]"
    }, {
      "left" : "private boolean isUnflowable(Var v)",
      "right" : "private boolean isUnflowable(Var v)",
      "info" : "MethodDeclaration[56032-56246]:MethodDeclaration[56222-56436]"
    }, {
      "left" : "private JSType getJSType(Node n)",
      "right" : "private JSType getJSType(Node n)",
      "info" : "MethodDeclaration[56250-56801]:MethodDeclaration[56440-56991]"
    }, {
      "left" : "private JSType getNativeType(JSTypeNative typeId)",
      "right" : "private JSType getNativeType(JSTypeNative typeId)",
      "info" : "MethodDeclaration[56805-56903]:MethodDeclaration[56995-57093]"
    } ],
    "mappings" : [
 {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[3048-3053]:TYPE_DECLARATION_KIND[3048-3053]"
    }, {
      "left" : "TypeInference",
      "right" : "TypeInference",
      "info" : "SimpleName[3054-3067]:SimpleName[3054-3067]"
    }, {
      "left" : "TypeInference",
      "right" : "TypeInference",
      "info" : "SimpleName[3831-3844]:SimpleName[3831-3844]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[3845-3870]:SingleVariableDeclaration[3845-3870]"
    }, {
      "left" : "ControlFlowGraph<Node> cfg",
      "right" : "ControlFlowGraph<Node> cfg",
      "info" : "SingleVariableDeclaration[3872-3898]:SingleVariableDeclaration[3872-3898]"
    }, {
      "left" : "ReverseAbstractInterpreter reverseInterpreter",
      "right" : "ReverseAbstractInterpreter reverseInterpreter",
      "info" : "SingleVariableDeclaration[3916-3961]:SingleVariableDeclaration[3916-3961]"
    }, {
      "left" : "Scope functionScope",
      "right" : "Scope functionScope",
      "info" : "SingleVariableDeclaration[3979-3998]:SingleVariableDeclaration[3979-3998]"
    }, {
      "left" : "Map<String, AssertionFunctionSpec> assertionFunctionsMap",
      "right" : "Map<String, AssertionFunctionSpec> assertionFunctionsMap",
      "info" : "SingleVariableDeclaration[4016-4072]:SingleVariableDeclaration[4016-4072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4074-5065]:Block[4074-5065]"
    }, {
      "left" : "super(cfg, new LinkedFlowScope.FlowScopeJoinOp());",
      "right" : "super(cfg, new LinkedFlowScope.FlowScopeJoinOp());",
      "info" : "SuperConstructorInvocation[4080-4130]:SuperConstructorInvocation[4080-4130]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[4135-4160]:ExpressionStatement[4135-4160]"
    }, {
      "left" : "this.registry = compiler.getTypeRegistry();",
      "right" : "this.registry = compiler.getTypeRegistry();",
      "info" : "ExpressionStatement[4165-4208]:ExpressionStatement[4165-4208]"
    }, {
      "left" : "this.reverseInterpreter = reverseInterpreter;",
      "right" : "this.reverseInterpreter = reverseInterpreter;",
      "info" : "ExpressionStatement[4213-4258]:ExpressionStatement[4213-4258]"
    }, {
      "left" : "this.unknownType = registry.getNativeObjectType(UNKNOWN_TYPE);",
      "right" : "this.unknownType = registry.getNativeObjectType(UNKNOWN_TYPE);",
      "info" : "ExpressionStatement[4263-4325]:ExpressionStatement[4263-4325]"
    }, {
      "left" : "this.syntacticScope = functionScope;",
      "right" : "this.syntacticScope = functionScope;",
      "info" : "ExpressionStatement[4331-4367]:ExpressionStatement[4331-4367]"
    }, {
      "left" : "inferArguments(functionScope);",
      "right" : "inferArguments(functionScope);",
      "info" : "ExpressionStatement[4372-4402]:ExpressionStatement[4372-4402]"
    }, {
      "left" : "this.functionScope = LinkedFlowScope.createEntryLattice(functionScope);",
      "right" : "this.functionScope = LinkedFlowScope.createEntryLattice(functionScope);",
      "info" : "ExpressionStatement[4408-4479]:ExpressionStatement[4408-4479]"
    }, {
      "left" : "this.assertionFunctionsMap = assertionFunctionsMap;",
      "right" : "this.assertionFunctionsMap = assertionFunctionsMap;",
      "info" : "ExpressionStatement[4484-4535]:ExpressionStatement[4484-4535]"
    }, {
      "left" : "Iterator<Var> varIt =\n        functionScope.getDeclarativelyUnboundVarsWithoutTypes();",
      "right" : "Iterator<Var> varIt =\n        functionScope.getDeclarativelyUnboundVarsWithoutTypes();",
      "info" : "VariableDeclarationStatement[4634-4720]:VariableDeclarationStatement[4634-4720]"
    }, {
      "left" : "while (varIt.hasNext())",
      "right" : "while (varIt.hasNext())",
      "info" : "WhileStatement[4725-4936]:WhileStatement[4725-4936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4749-4936]:Block[4749-4936]"
    }, {
      "left" : "Var var = varIt.next();",
      "right" : "Var var = varIt.next();",
      "info" : "VariableDeclarationStatement[4757-4780]:VariableDeclarationStatement[4757-4780]"
    }, {
      "left" : "if (isUnflowable(var))",
      "right" : "if (isUnflowable(var))",
      "info" : "IfStatement[4787-4837]:IfStatement[4787-4837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4810-4837]:Block[4810-4837]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[4820-4829]:ContinueStatement[4820-4829]"
    }, {
      "left" : "this.functionScope.inferSlotType(\n          var.getName(), getNativeType(VOID_TYPE));",
      "right" : "this.functionScope.inferSlotType(\n          var.getName(), getNativeType(VOID_TYPE));",
      "info" : "ExpressionStatement[4845-4930]:ExpressionStatement[4845-4930]"
    }, {
      "left" : "this.bottomScope = LinkedFlowScope.createEntryLattice(\n        Scope.createLatticeBottom(functionScope.getRootNode()));",
      "right" : "this.bottomScope = LinkedFlowScope.createEntryLattice(\n        Scope.createLatticeBottom(functionScope.getRootNode()));",
      "info" : "ExpressionStatement[4942-5061]:ExpressionStatement[4942-5061]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5155-5162]:Modifier[5155-5162]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5163-5167]:PrimitiveType[5163-5167]"
    }, {
      "left" : "inferArguments",
      "right" : "inferArguments",
      "info" : "SimpleName[5168-5182]:SimpleName[5168-5182]"
    }, {
      "left" : "Scope functionScope",
      "right" : "Scope functionScope",
      "info" : "SingleVariableDeclaration[5183-5202]:SingleVariableDeclaration[5183-5202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5204-6669]:Block[5204-6669]"
    }, {
      "left" : "Node functionNode = functionScope.getRootNode();",
      "right" : "Node functionNode = functionScope.getRootNode();",
      "info" : "VariableDeclarationStatement[5210-5258]:VariableDeclarationStatement[5210-5258]"
    }, {
      "left" : "Node astParameters = functionNode.getFirstChild().getNext();",
      "right" : "Node astParameters = functionNode.getFirstChild().getNext();",
      "info" : "VariableDeclarationStatement[5263-5323]:VariableDeclarationStatement[5263-5323]"
    }, {
      "left" : "Node iifeArgumentNode = null;",
      "right" : "Node iifeArgumentNode = null;",
      "info" : "VariableDeclarationStatement[5328-5357]:VariableDeclarationStatement[5328-5357]"
    }, {
      "left" : "if (NodeUtil.isCallOrNewTarget(functionNode))",
      "right" : "if (NodeUtil.isCallOrNewTarget(functionNode))",
      "info" : "IfStatement[5363-5465]:IfStatement[5363-5465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5409-5465]:Block[5409-5465]"
    }, {
      "left" : "iifeArgumentNode = functionNode.getNext();",
      "right" : "iifeArgumentNode = functionNode.getNext();",
      "info" : "ExpressionStatement[5417-5459]:ExpressionStatement[5417-5459]"
    }, {
      "left" : "FunctionType functionType =\n        JSType.toMaybeFunctionType(functionNode.getJSType());",
      "right" : "FunctionType functionType =\n        JSType.toMaybeFunctionType(functionNode.getJSType());",
      "info" : "VariableDeclarationStatement[5471-5560]:VariableDeclarationStatement[5471-5560]"
    }, {
      "left" : "if (functionType != null)",
      "right" : "if (functionType != null)",
      "info" : "IfStatement[5565-6665]:IfStatement[5565-6665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5591-6665]:Block[5591-6665]"
    }, {
      "left" : "Node parameterTypes = functionType.getParametersNode();",
      "right" : "Node parameterTypes = functionType.getParametersNode();",
      "info" : "VariableDeclarationStatement[5599-5654]:VariableDeclarationStatement[5599-5654]"
    }, {
      "left" : "if (parameterTypes != null)",
      "right" : "if (parameterTypes != null)",
      "info" : "IfStatement[5661-6659]:IfStatement[5661-6659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5689-6659]:Block[5689-6659]"
    }, {
      "left" : "Node parameterTypeNode = parameterTypes.getFirstChild();",
      "right" : "Node parameterTypeNode = parameterTypes.getFirstChild();",
      "info" : "VariableDeclarationStatement[5699-5755]:VariableDeclarationStatement[5699-5755]"
    }, {
      "left" : "for (Node astParameter : astParameters.children())",
      "right" : "for (Node astParameter : astParameters.children())",
      "info" : "EnhancedForStatement[5764-6651]:EnhancedForStatement[5764-6651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5815-6651]:Block[5815-6651]"
    }, {
      "left" : "Var var = functionScope.getVar(astParameter.getString());",
      "right" : "Var var = functionScope.getVar(astParameter.getString());",
      "info" : "VariableDeclarationStatement[5827-5884]:VariableDeclarationStatement[5827-5884]"
    }, {
      "left" : "Preconditions.checkNotNull(var);",
      "right" : "Preconditions.checkNotNull(var);",
      "info" : "ExpressionStatement[5895-5927]:ExpressionStatement[5895-5927]"
    }, {
      "left" : "if (var.isTypeInferred() &&\n              var.getType() == unknownType)",
      "right" : "if (var.isTypeInferred() &&\n              var.getType() == unknownType)",
      "info" : "IfStatement[5938-6411]:IfStatement[5938-6411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6010-6411]:Block[6010-6411]"
    }, {
      "left" : "JSType newType = null;",
      "right" : "JSType newType = null;",
      "info" : "VariableDeclarationStatement[6024-6046]:VariableDeclarationStatement[6024-6046]"
    }, {
      "left" : "if (iifeArgumentNode != null)",
      "right" : "if (iifeArgumentNode != null)",
      "info" : "IfStatement[6060-6266]:IfStatement[6060-6266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6090-6159]:Block[6090-6159]"
    }, {
      "left" : "newType = iifeArgumentNode.getJSType();",
      "right" : "newType = iifeArgumentNode.getJSType();",
      "info" : "ExpressionStatement[6106-6145]:ExpressionStatement[6106-6145]"
    }, {
      "left" : "if (parameterTypeNode != null)",
      "right" : "if (parameterTypeNode != null)",
      "info" : "IfStatement[6165-6266]:IfStatement[6165-6266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6196-6266]:Block[6196-6266]"
    }, {
      "left" : "newType = parameterTypeNode.getJSType();",
      "right" : "newType = parameterTypeNode.getJSType();",
      "info" : "ExpressionStatement[6212-6252]:ExpressionStatement[6212-6252]"
    }, {
      "left" : "if (newType != null)",
      "right" : "if (newType != null)",
      "info" : "IfStatement[6280-6399]:IfStatement[6280-6399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6301-6399]:Block[6301-6399]"
    }, {
      "left" : "var.setType(newType);",
      "right" : "var.setType(newType);",
      "info" : "ExpressionStatement[6317-6338]:ExpressionStatement[6317-6338]"
    }, {
      "left" : "astParameter.setJSType(newType);",
      "right" : "astParameter.setJSType(newType);",
      "info" : "ExpressionStatement[6353-6385]:ExpressionStatement[6353-6385]"
    }, {
      "left" : "if (parameterTypeNode != null)",
      "right" : "if (parameterTypeNode != null)",
      "info" : "IfStatement[6423-6528]:IfStatement[6423-6528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6454-6528]:Block[6454-6528]"
    }, {
      "left" : "parameterTypeNode = parameterTypeNode.getNext();",
      "right" : "parameterTypeNode = parameterTypeNode.getNext();",
      "info" : "ExpressionStatement[6468-6516]:ExpressionStatement[6468-6516]"
    }, {
      "left" : "if (iifeArgumentNode != null)",
      "right" : "if (iifeArgumentNode != null)",
      "info" : "IfStatement[6539-6641]:IfStatement[6539-6641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6569-6641]:Block[6569-6641]"
    }, {
      "left" : "iifeArgumentNode = iifeArgumentNode.getNext();",
      "right" : "iifeArgumentNode = iifeArgumentNode.getNext();",
      "info" : "ExpressionStatement[6583-6629]:ExpressionStatement[6583-6629]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6673-6682]:MarkerAnnotation[6673-6682]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[6685-6694]:SimpleType[6685-6694]"
    }, {
      "left" : "createInitialEstimateLattice",
      "right" : "createInitialEstimateLattice",
      "info" : "SimpleName[6695-6723]:SimpleName[6695-6723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6726-6755]:Block[6726-6755]"
    }, {
      "left" : "return bottomScope;",
      "right" : "return bottomScope;",
      "info" : "ReturnStatement[6732-6751]:ReturnStatement[6732-6751]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6759-6768]:MarkerAnnotation[6759-6768]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[6771-6780]:SimpleType[6771-6780]"
    }, {
      "left" : "createEntryLattice",
      "right" : "createEntryLattice",
      "info" : "SimpleName[6781-6799]:SimpleName[6781-6799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6802-6833]:Block[6802-6833]"
    }, {
      "left" : "return functionScope;",
      "right" : "return functionScope;",
      "info" : "ReturnStatement[6808-6829]:ReturnStatement[6808-6829]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6837-6846]:MarkerAnnotation[6837-6846]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[6849-6858]:SimpleType[6849-6858]"
    }, {
      "left" : "flowThrough",
      "right" : "flowThrough",
      "info" : "SimpleName[6859-6870]:SimpleName[6859-6870]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[6871-6877]:SingleVariableDeclaration[6871-6877]"
    }, {
      "left" : "FlowScope input",
      "right" : "FlowScope input",
      "info" : "SingleVariableDeclaration[6879-6894]:SingleVariableDeclaration[6879-6894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6896-7185]:Block[6896-7185]"
    }, {
      "left" : "if (input == bottomScope)",
      "right" : "if (input == bottomScope)",
      "info" : "IfStatement[7021-7074]:IfStatement[7021-7074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7047-7074]:Block[7047-7074]"
    }, {
      "left" : "return input;",
      "right" : "return input;",
      "info" : "ReturnStatement[7055-7068]:ReturnStatement[7055-7068]"
    }, {
      "left" : "FlowScope output = input.createChildFlowScope();",
      "right" : "FlowScope output = input.createChildFlowScope();",
      "info" : "VariableDeclarationStatement[7080-7128]:VariableDeclarationStatement[7080-7128]"
    }, {
      "left" : "output = traverse(n, output);",
      "right" : "output = traverse(n, output);",
      "info" : "ExpressionStatement[7133-7162]:ExpressionStatement[7133-7162]"
    }, {
      "left" : "return output;",
      "right" : "return output;",
      "info" : "ReturnStatement[7167-7181]:ReturnStatement[7167-7181]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7189-7198]:MarkerAnnotation[7189-7198]"
    }, {
      "left" : "@SuppressWarnings({\"fallthrough\", \"incomplete-switch\"})",
      "right" : "@SuppressWarnings({\"fallthrough\", \"incomplete-switch\"})",
      "info" : "SingleMemberAnnotation[7201-7256]:SingleMemberAnnotation[7201-7256]"
    }, {
      "left" : "List<FlowScope>",
      "right" : "List<FlowScope>",
      "info" : "ParameterizedType[7259-7274]:ParameterizedType[7259-7274]"
    }, {
      "left" : "branchedFlowThrough",
      "right" : "branchedFlowThrough",
      "info" : "SimpleName[7275-7294]:SimpleName[7275-7294]"
    }, {
      "left" : "Node source",
      "right" : "Node source",
      "info" : "SingleVariableDeclaration[7295-7306]:SingleVariableDeclaration[7295-7306]"
    }, {
      "left" : "FlowScope input",
      "right" : "FlowScope input",
      "info" : "SingleVariableDeclaration[7308-7323]:SingleVariableDeclaration[7308-7323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7325-11944]:Block[7325-11944]"
    }, {
      "left" : "FlowScope output = flowThrough(source, input);",
      "right" : "FlowScope output = flowThrough(source, input);",
      "info" : "VariableDeclarationStatement[7647-7693]:VariableDeclarationStatement[7647-7693]"
    }, {
      "left" : "Node condition = null;",
      "right" : "Node condition = null;",
      "info" : "VariableDeclarationStatement[7698-7720]:VariableDeclarationStatement[7698-7720]"
    }, {
      "left" : "FlowScope conditionFlowScope = null;",
      "right" : "FlowScope conditionFlowScope = null;",
      "info" : "VariableDeclarationStatement[7725-7761]:VariableDeclarationStatement[7725-7761]"
    }, {
      "left" : "BooleanOutcomePair conditionOutcomes = null;",
      "right" : "BooleanOutcomePair conditionOutcomes = null;",
      "info" : "VariableDeclarationStatement[7766-7810]:VariableDeclarationStatement[7766-7810]"
    }, {
      "left" : "List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(source);",
      "right" : "List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(source);",
      "info" : "VariableDeclarationStatement[7816-7891]:VariableDeclarationStatement[7816-7891]"
    }, {
      "left" : "List<FlowScope> result = Lists.newArrayListWithCapacity(branchEdges.size());",
      "right" : "List<FlowScope> result = Lists.newArrayListWithCapacity(branchEdges.size());",
      "info" : "VariableDeclarationStatement[7896-7972]:VariableDeclarationStatement[7896-7972]"
    }, {
      "left" : "for (DiGraphEdge<Node, Branch> branchEdge : branchEdges)",
      "right" : "for (DiGraphEdge<Node, Branch> branchEdge : branchEdges)",
      "info" : "EnhancedForStatement[7977-11921]:EnhancedForStatement[7977-11921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8034-11921]:Block[8034-11921]"
    }, {
      "left" : "Branch branch = branchEdge.getValue();",
      "right" : "Branch branch = branchEdge.getValue();",
      "info" : "VariableDeclarationStatement[8042-8080]:VariableDeclarationStatement[8042-8080]"
    }, {
      "left" : "FlowScope newScope = output;",
      "right" : "FlowScope newScope = output;",
      "info" : "VariableDeclarationStatement[8087-8115]:VariableDeclarationStatement[8087-8115]"
    }, {
      "left" : "switch (branch) {\n        case ON_TRUE:\n          if (NodeUtil.isForIn(source)) {\n            // item is assigned a property name, so its type should be string.\n            Node item = source.getFirstChild();\n            Node obj = item.getNext();\n\n            FlowScope informed = traverse(obj, output.createChildFlowScope());\n\n            if (item.isVar()) {\n              item = item.getFirstChild();\n            }\n            if (item.isName()) {\n              JSType iterKeyType = getNativeType(STRING_TYPE);\n              ObjectType objType = getJSType(obj).dereference();\n              JSType objIndexType = objType == null ?\n                  null : objType.getTemplateTypeMap().getTemplateType(\n                      registry.getObjectIndexKey());\n              if (objIndexType != null && !objIndexType.isUnknownType()) {\n                JSType narrowedKeyType =\n                    iterKeyType.getGreatestSubtype(objIndexType);\n                if (!narrowedKeyType.isEmptyType()) {\n                  iterKeyType = narrowedKeyType;\n                }\n              }\n              redeclareSimpleVar(informed, item, iterKeyType);\n            }\n            newScope = informed;\n            break;\n          }\n\n          // FALL THROUGH\n\n        case ON_FALSE:\n          if (condition == null) {\n            condition = NodeUtil.getConditionExpression(source);\n            if (condition == null && source.isCase()) {\n              condition = source;\n\n              // conditionFlowScope is cached from previous iterations\n              // of the loop.\n              if (conditionFlowScope == null) {\n                conditionFlowScope = traverse(\n                    condition.getFirstChild(), output.createChildFlowScope());\n              }\n            }\n          }\n\n          if (condition != null) {\n            if (condition.isAnd() ||\n                condition.isOr()) {\n              // When handling the short-circuiting binary operators,\n              // the outcome scope on true can be different than the outcome\n              // scope on false.\n              //\n              // TODO(nicksantos): The \"right\" way to do this is to\n              // carry the known outcome all the way through the\n              // recursive traversal, so that we can construct a\n              // different flow scope based on the outcome. However,\n              // this would require a bunch of code and a bunch of\n              // extra computation for an edge case. This seems to be\n              // a \"good enough\" approximation.\n\n              // conditionOutcomes is cached from previous iterations\n              // of the loop.\n              if (conditionOutcomes == null) {\n                conditionOutcomes = condition.isAnd() ?\n                    traverseAnd(condition, output.createChildFlowScope()) :\n                    traverseOr(condition, output.createChildFlowScope());\n              }\n              newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition,\n                      conditionOutcomes.getOutcomeFlowScope(\n                          condition.getType(), branch == Branch.ON_TRUE),\n                      branch == Branch.ON_TRUE);\n            } else {\n              // conditionFlowScope is cached from previous iterations\n              // of the loop.\n              if (conditionFlowScope == null) {\n                conditionFlowScope =\n                    traverse(condition, output.createChildFlowScope());\n              }\n              newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition, conditionFlowScope, branch == Branch.ON_TRUE);\n            }\n          }\n          break;\n      }",
      "right" : "switch (branch) {\n        case ON_TRUE:\n          if (NodeUtil.isForIn(source)) {\n            // item is assigned a property name, so its type should be string.\n            Node item = source.getFirstChild();\n            Node obj = item.getNext();\n\n            FlowScope informed = traverse(obj, output.createChildFlowScope());\n\n            if (item.isVar()) {\n              item = item.getFirstChild();\n            }\n            if (item.isName()) {\n              JSType iterKeyType = getNativeType(STRING_TYPE);\n              ObjectType objType = getJSType(obj).dereference();\n              JSType objIndexType = objType == null ?\n                  null : objType.getTemplateTypeMap().getTemplateType(\n                      registry.getObjectIndexKey());\n              if (objIndexType != null && !objIndexType.isUnknownType()) {\n                JSType narrowedKeyType =\n                    iterKeyType.getGreatestSubtype(objIndexType);\n                if (!narrowedKeyType.isEmptyType()) {\n                  iterKeyType = narrowedKeyType;\n                }\n              }\n              redeclareSimpleVar(informed, item, iterKeyType);\n            }\n            newScope = informed;\n            break;\n          }\n\n          // FALL THROUGH\n\n        case ON_FALSE:\n          if (condition == null) {\n            condition = NodeUtil.getConditionExpression(source);\n            if (condition == null && source.isCase()) {\n              condition = source;\n\n              // conditionFlowScope is cached from previous iterations\n              // of the loop.\n              if (conditionFlowScope == null) {\n                conditionFlowScope = traverse(\n                    condition.getFirstChild(), output.createChildFlowScope());\n              }\n            }\n          }\n\n          if (condition != null) {\n            if (condition.isAnd() ||\n                condition.isOr()) {\n              // When handling the short-circuiting binary operators,\n              // the outcome scope on true can be different than the outcome\n              // scope on false.\n              //\n              // TODO(nicksantos): The \"right\" way to do this is to\n              // carry the known outcome all the way through the\n              // recursive traversal, so that we can construct a\n              // different flow scope based on the outcome. However,\n              // this would require a bunch of code and a bunch of\n              // extra computation for an edge case. This seems to be\n              // a \"good enough\" approximation.\n\n              // conditionOutcomes is cached from previous iterations\n              // of the loop.\n              if (conditionOutcomes == null) {\n                conditionOutcomes = condition.isAnd() ?\n                    traverseAnd(condition, output.createChildFlowScope()) :\n                    traverseOr(condition, output.createChildFlowScope());\n              }\n              newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition,\n                      conditionOutcomes.getOutcomeFlowScope(\n                          condition.getType(), branch == Branch.ON_TRUE),\n                      branch == Branch.ON_TRUE);\n            } else {\n              // conditionFlowScope is cached from previous iterations\n              // of the loop.\n              if (conditionFlowScope == null) {\n                conditionFlowScope =\n                    traverse(condition, output.createChildFlowScope());\n              }\n              newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition, conditionFlowScope, branch == Branch.ON_TRUE);\n            }\n          }\n          break;\n      }",
      "info" : "SwitchStatement[8123-11875]:SwitchStatement[8123-11875]"
    }, {
      "left" : "case ON_TRUE:",
      "right" : "case ON_TRUE:",
      "info" : "SwitchCase[8149-8162]:SwitchCase[8149-8162]"
    }, {
      "left" : "if (NodeUtil.isForIn(source))",
      "right" : "if (NodeUtil.isForIn(source))",
      "info" : "IfStatement[8173-9339]:IfStatement[8173-9339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8203-9339]:Block[8203-9339]"
    }, {
      "left" : "Node item = source.getFirstChild();",
      "right" : "Node item = source.getFirstChild();",
      "info" : "VariableDeclarationStatement[8296-8331]:VariableDeclarationStatement[8296-8331]"
    }, {
      "left" : "Node obj = item.getNext();",
      "right" : "Node obj = item.getNext();",
      "info" : "VariableDeclarationStatement[8344-8370]:VariableDeclarationStatement[8344-8370]"
    }, {
      "left" : "FlowScope informed = traverse(obj, output.createChildFlowScope());",
      "right" : "FlowScope informed = traverse(obj, output.createChildFlowScope());",
      "info" : "VariableDeclarationStatement[8384-8450]:VariableDeclarationStatement[8384-8450]"
    }, {
      "left" : "if (item.isVar())",
      "right" : "if (item.isVar())",
      "info" : "IfStatement[8464-8540]:IfStatement[8464-8540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8482-8540]:Block[8482-8540]"
    }, {
      "left" : "item = item.getFirstChild();",
      "right" : "item = item.getFirstChild();",
      "info" : "ExpressionStatement[8498-8526]:ExpressionStatement[8498-8526]"
    }, {
      "left" : "if (item.isName())",
      "right" : "if (item.isName())",
      "info" : "IfStatement[8553-9275]:IfStatement[8553-9275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8572-9275]:Block[8572-9275]"
    }, {
      "left" : "JSType iterKeyType = getNativeType(STRING_TYPE);",
      "right" : "JSType iterKeyType = getNativeType(STRING_TYPE);",
      "info" : "VariableDeclarationStatement[8588-8636]:VariableDeclarationStatement[8588-8636]"
    }, {
      "left" : "ObjectType objType = getJSType(obj).dereference();",
      "right" : "ObjectType objType = getJSType(obj).dereference();",
      "info" : "VariableDeclarationStatement[8651-8701]:VariableDeclarationStatement[8651-8701]"
    }, {
      "left" : "JSType objIndexType = objType == null ?\n                  null : objType.getTemplateTypeMap().getTemplateType(\n                      registry.getObjectIndexKey());",
      "right" : "JSType objIndexType = objType == null ?\n                  null : objType.getTemplateTypeMap().getTemplateType(\n                      registry.getObjectIndexKey());",
      "info" : "VariableDeclarationStatement[8716-8879]:VariableDeclarationStatement[8716-8879]"
    }, {
      "left" : "if (objIndexType != null && !objIndexType.isUnknownType())",
      "right" : "if (objIndexType != null && !objIndexType.isUnknownType())",
      "info" : "IfStatement[8894-9198]:IfStatement[8894-9198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8953-9198]:Block[8953-9198]"
    }, {
      "left" : "JSType narrowedKeyType =\n                    iterKeyType.getGreatestSubtype(objIndexType);",
      "right" : "JSType narrowedKeyType =\n                    iterKeyType.getGreatestSubtype(objIndexType);",
      "info" : "VariableDeclarationStatement[8971-9061]:VariableDeclarationStatement[8971-9061]"
    }, {
      "left" : "if (!narrowedKeyType.isEmptyType())",
      "right" : "if (!narrowedKeyType.isEmptyType())",
      "info" : "IfStatement[9078-9182]:IfStatement[9078-9182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9114-9182]:Block[9114-9182]"
    }, {
      "left" : "iterKeyType = narrowedKeyType;",
      "right" : "iterKeyType = narrowedKeyType;",
      "info" : "ExpressionStatement[9134-9164]:ExpressionStatement[9134-9164]"
    }, {
      "left" : "redeclareSimpleVar(informed, item, iterKeyType);",
      "right" : "redeclareSimpleVar(informed, item, iterKeyType);",
      "info" : "ExpressionStatement[9213-9261]:ExpressionStatement[9213-9261]"
    }, {
      "left" : "newScope = informed;",
      "right" : "newScope = informed;",
      "info" : "ExpressionStatement[9288-9308]:ExpressionStatement[9288-9308]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9321-9327]:BreakStatement[9321-9327]"
    }, {
      "left" : "case ON_FALSE:",
      "right" : "case ON_FALSE:",
      "info" : "SwitchCase[9376-9390]:SwitchCase[9376-9390]"
    }, {
      "left" : "if (condition == null)",
      "right" : "if (condition == null)",
      "info" : "IfStatement[9401-9898]:IfStatement[9401-9898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9424-9898]:Block[9424-9898]"
    }, {
      "left" : "condition = NodeUtil.getConditionExpression(source);",
      "right" : "condition = NodeUtil.getConditionExpression(source);",
      "info" : "ExpressionStatement[9438-9490]:ExpressionStatement[9438-9490]"
    }, {
      "left" : "if (condition == null && source.isCase())",
      "right" : "if (condition == null && source.isCase())",
      "info" : "IfStatement[9503-9886]:IfStatement[9503-9886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9545-9886]:Block[9545-9886]"
    }, {
      "left" : "condition = source;",
      "right" : "condition = source;",
      "info" : "ExpressionStatement[9561-9580]:ExpressionStatement[9561-9580]"
    }, {
      "left" : "if (conditionFlowScope == null)",
      "right" : "if (conditionFlowScope == null)",
      "info" : "IfStatement[9697-9872]:IfStatement[9697-9872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9729-9872]:Block[9729-9872]"
    }, {
      "left" : "conditionFlowScope = traverse(\n                    condition.getFirstChild(), output.createChildFlowScope());",
      "right" : "conditionFlowScope = traverse(\n                    condition.getFirstChild(), output.createChildFlowScope());",
      "info" : "ExpressionStatement[9747-9856]:ExpressionStatement[9747-9856]"
    }, {
      "left" : "if (condition != null)",
      "right" : "if (condition != null)",
      "info" : "IfStatement[9910-11850]:IfStatement[9910-11850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9933-11850]:Block[9933-11850]"
    }, {
      "left" : "if (condition.isAnd() ||\n                condition.isOr())",
      "right" : "if (condition.isAnd() ||\n                condition.isOr())",
      "info" : "IfStatement[9947-11838]:IfStatement[9947-11838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10006-11360]:Block[10006-11360]"
    }, {
      "left" : "if (conditionOutcomes == null)",
      "right" : "if (conditionOutcomes == null)",
      "info" : "IfStatement[10772-11026]:IfStatement[10772-11026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10803-11026]:Block[10803-11026]"
    }, {
      "left" : "conditionOutcomes = condition.isAnd() ?\n                    traverseAnd(condition, output.createChildFlowScope()) :\n                    traverseOr(condition, output.createChildFlowScope());",
      "right" : "conditionOutcomes = condition.isAnd() ?\n                    traverseAnd(condition, output.createChildFlowScope()) :\n                    traverseOr(condition, output.createChildFlowScope());",
      "info" : "ExpressionStatement[10821-11010]:ExpressionStatement[10821-11010]"
    }, {
      "left" : "newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition,\n                      conditionOutcomes.getOutcomeFlowScope(\n                          condition.getType(), branch == Branch.ON_TRUE),\n                      branch == Branch.ON_TRUE);",
      "right" : "newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition,\n                      conditionOutcomes.getOutcomeFlowScope(\n                          condition.getType(), branch == Branch.ON_TRUE),\n                      branch == Branch.ON_TRUE);",
      "info" : "ExpressionStatement[11041-11346]:ExpressionStatement[11041-11346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11366-11838]:Block[11366-11838]"
    }, {
      "left" : "if (conditionFlowScope == null)",
      "right" : "if (conditionFlowScope == null)",
      "info" : "IfStatement[11483-11641]:IfStatement[11483-11641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11515-11641]:Block[11515-11641]"
    }, {
      "left" : "conditionFlowScope =\n                    traverse(condition, output.createChildFlowScope());",
      "right" : "conditionFlowScope =\n                    traverse(condition, output.createChildFlowScope());",
      "info" : "ExpressionStatement[11533-11625]:ExpressionStatement[11533-11625]"
    }, {
      "left" : "newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition, conditionFlowScope, branch == Branch.ON_TRUE);",
      "right" : "newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition, conditionFlowScope, branch == Branch.ON_TRUE);",
      "info" : "ExpressionStatement[11656-11824]:ExpressionStatement[11656-11824]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11861-11867]:BreakStatement[11861-11867]"
    }, {
      "left" : "result.add(newScope.optimize());",
      "right" : "result.add(newScope.optimize());",
      "info" : "ExpressionStatement[11883-11915]:ExpressionStatement[11883-11915]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[11926-11940]:ReturnStatement[11926-11940]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11948-11955]:Modifier[11948-11955]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[11956-11965]:SimpleType[11956-11965]"
    }, {
      "left" : "traverse",
      "right" : "traverse",
      "info" : "SimpleName[11966-11974]:SimpleName[11966-11974]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[11975-11981]:SingleVariableDeclaration[11975-11981]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[11983-11998]:SingleVariableDeclaration[11983-11998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12000-15758]:Block[12000-15758]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.ASSIGN:\n        scope = traverseAssign(n, scope);\n        break;\n\n      case Token.NAME:\n        scope = traverseName(n, scope);\n        break;\n\n      case Token.GETPROP:\n        scope = traverseGetProp(n, scope);\n        break;\n\n      case Token.AND:\n        scope = traverseAnd(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();\n        break;\n\n      case Token.OR:\n        scope = traverseOr(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();\n        break;\n\n      case Token.HOOK:\n        scope = traverseHook(n, scope);\n        break;\n\n      case Token.OBJECTLIT:\n        scope = traverseObjectLiteral(n, scope);\n        break;\n\n      case Token.CALL:\n        scope = traverseCall(n, scope);\n        break;\n\n      case Token.NEW:\n        scope = traverseNew(n, scope);\n        break;\n\n      case Token.ASSIGN_ADD:\n      case Token.ADD:\n        scope = traverseAdd(n, scope);\n        break;\n\n      case Token.POS:\n      case Token.NEG:\n        scope = traverse(n.getFirstChild(), scope);  // Find types.\n        n.setJSType(getNativeType(NUMBER_TYPE));\n        break;\n\n      case Token.ARRAYLIT:\n        scope = traverseArrayLiteral(n, scope);\n        break;\n\n      case Token.THIS:\n        n.setJSType(scope.getTypeOfThis());\n        break;\n\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.ASSIGN_URSH:\n      case Token.URSH:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_SUB:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.BITAND:\n      case Token.BITXOR:\n      case Token.BITOR:\n      case Token.MUL:\n      case Token.SUB:\n      case Token.DEC:\n      case Token.INC:\n      case Token.BITNOT:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getNativeType(NUMBER_TYPE));\n        break;\n\n      case Token.PARAM_LIST:\n        scope = traverse(n.getFirstChild(), scope);\n        n.setJSType(getJSType(n.getFirstChild()));\n        break;\n\n      case Token.COMMA:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getJSType(n.getLastChild()));\n        break;\n\n      case Token.TYPEOF:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getNativeType(STRING_TYPE));\n        break;\n\n      case Token.DELPROP:\n      case Token.LT:\n      case Token.LE:\n      case Token.GT:\n      case Token.GE:\n      case Token.NOT:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.INSTANCEOF:\n      case Token.IN:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getNativeType(BOOLEAN_TYPE));\n        break;\n\n      case Token.GETELEM:\n        scope = traverseGetElem(n, scope);\n        break;\n\n      case Token.EXPR_RESULT:\n        scope = traverseChildren(n, scope);\n        if (n.getFirstChild().isGetProp()) {\n          ensurePropertyDeclared(n.getFirstChild());\n        }\n        break;\n\n      case Token.SWITCH:\n        scope = traverse(n.getFirstChild(), scope);\n        break;\n\n      case Token.RETURN:\n        scope = traverseReturn(n, scope);\n        break;\n\n      case Token.VAR:\n      case Token.THROW:\n        scope = traverseChildren(n, scope);\n        break;\n\n      case Token.CATCH:\n        scope = traverseCatch(n, scope);\n        break;\n\n      case Token.CAST:\n        scope = traverseChildren(n, scope);\n        JSDocInfo info = n.getJSDocInfo();\n        if (info != null && info.hasType()) {\n          n.setJSType(info.getType().evaluate(syntacticScope, registry));\n        }\n        break;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.ASSIGN:\n        scope = traverseAssign(n, scope);\n        break;\n\n      case Token.NAME:\n        scope = traverseName(n, scope);\n        break;\n\n      case Token.GETPROP:\n        scope = traverseGetProp(n, scope);\n        break;\n\n      case Token.AND:\n        scope = traverseAnd(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();\n        break;\n\n      case Token.OR:\n        scope = traverseOr(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();\n        break;\n\n      case Token.HOOK:\n        scope = traverseHook(n, scope);\n        break;\n\n      case Token.OBJECTLIT:\n        scope = traverseObjectLiteral(n, scope);\n        break;\n\n      case Token.CALL:\n        scope = traverseCall(n, scope);\n        break;\n\n      case Token.NEW:\n        scope = traverseNew(n, scope);\n        break;\n\n      case Token.ASSIGN_ADD:\n      case Token.ADD:\n        scope = traverseAdd(n, scope);\n        break;\n\n      case Token.POS:\n      case Token.NEG:\n        scope = traverse(n.getFirstChild(), scope);  // Find types.\n        n.setJSType(getNativeType(NUMBER_TYPE));\n        break;\n\n      case Token.ARRAYLIT:\n        scope = traverseArrayLiteral(n, scope);\n        break;\n\n      case Token.THIS:\n        n.setJSType(scope.getTypeOfThis());\n        break;\n\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.ASSIGN_URSH:\n      case Token.URSH:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_SUB:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.BITAND:\n      case Token.BITXOR:\n      case Token.BITOR:\n      case Token.MUL:\n      case Token.SUB:\n      case Token.DEC:\n      case Token.INC:\n      case Token.BITNOT:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getNativeType(NUMBER_TYPE));\n        break;\n\n      case Token.PARAM_LIST:\n        scope = traverse(n.getFirstChild(), scope);\n        n.setJSType(getJSType(n.getFirstChild()));\n        break;\n\n      case Token.COMMA:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getJSType(n.getLastChild()));\n        break;\n\n      case Token.TYPEOF:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getNativeType(STRING_TYPE));\n        break;\n\n      case Token.DELPROP:\n      case Token.LT:\n      case Token.LE:\n      case Token.GT:\n      case Token.GE:\n      case Token.NOT:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.INSTANCEOF:\n      case Token.IN:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getNativeType(BOOLEAN_TYPE));\n        break;\n\n      case Token.GETELEM:\n        scope = traverseGetElem(n, scope);\n        break;\n\n      case Token.EXPR_RESULT:\n        scope = traverseChildren(n, scope);\n        if (n.getFirstChild().isGetProp()) {\n          ensurePropertyDeclared(n.getFirstChild());\n        }\n        break;\n\n      case Token.SWITCH:\n        scope = traverse(n.getFirstChild(), scope);\n        break;\n\n      case Token.RETURN:\n        scope = traverseReturn(n, scope);\n        break;\n\n      case Token.VAR:\n      case Token.THROW:\n        scope = traverseChildren(n, scope);\n        break;\n\n      case Token.CATCH:\n        scope = traverseCatch(n, scope);\n        break;\n\n      case Token.CAST:\n        scope = traverseChildren(n, scope);\n        JSDocInfo info = n.getJSDocInfo();\n        if (info != null && info.hasType()) {\n          n.setJSType(info.getType().evaluate(syntacticScope, registry));\n        }\n        break;\n    }",
      "info" : "SwitchStatement[12006-15735]:SwitchStatement[12006-15735]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[12035-12053]:SwitchCase[12035-12053]"
    }, {
      "left" : "scope = traverseAssign(n, scope);",
      "right" : "scope = traverseAssign(n, scope);",
      "info" : "ExpressionStatement[12062-12095]:ExpressionStatement[12062-12095]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12104-12110]:BreakStatement[12104-12110]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[12118-12134]:SwitchCase[12118-12134]"
    }, {
      "left" : "scope = traverseName(n, scope);",
      "right" : "scope = traverseName(n, scope);",
      "info" : "ExpressionStatement[12143-12174]:ExpressionStatement[12143-12174]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12183-12189]:BreakStatement[12183-12189]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[12197-12216]:SwitchCase[12197-12216]"
    }, {
      "left" : "scope = traverseGetProp(n, scope);",
      "right" : "scope = traverseGetProp(n, scope);",
      "info" : "ExpressionStatement[12225-12259]:ExpressionStatement[12225-12259]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12268-12274]:BreakStatement[12268-12274]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[12282-12297]:SwitchCase[12282-12297]"
    }, {
      "left" : "scope = traverseAnd(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();",
      "right" : "scope = traverseAnd(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();",
      "info" : "ExpressionStatement[12306-12393]:ExpressionStatement[12306-12393]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12402-12408]:BreakStatement[12402-12408]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[12416-12430]:SwitchCase[12416-12430]"
    }, {
      "left" : "scope = traverseOr(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();",
      "right" : "scope = traverseOr(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();",
      "info" : "ExpressionStatement[12439-12525]:ExpressionStatement[12439-12525]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12534-12540]:BreakStatement[12534-12540]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[12548-12564]:SwitchCase[12548-12564]"
    }, {
      "left" : "scope = traverseHook(n, scope);",
      "right" : "scope = traverseHook(n, scope);",
      "info" : "ExpressionStatement[12573-12604]:ExpressionStatement[12573-12604]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12613-12619]:BreakStatement[12613-12619]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[12627-12648]:SwitchCase[12627-12648]"
    }, {
      "left" : "scope = traverseObjectLiteral(n, scope);",
      "right" : "scope = traverseObjectLiteral(n, scope);",
      "info" : "ExpressionStatement[12657-12697]:ExpressionStatement[12657-12697]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12706-12712]:BreakStatement[12706-12712]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[12720-12736]:SwitchCase[12720-12736]"
    }, {
      "left" : "scope = traverseCall(n, scope);",
      "right" : "scope = traverseCall(n, scope);",
      "info" : "ExpressionStatement[12745-12776]:ExpressionStatement[12745-12776]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12785-12791]:BreakStatement[12785-12791]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[12799-12814]:SwitchCase[12799-12814]"
    }, {
      "left" : "scope = traverseNew(n, scope);",
      "right" : "scope = traverseNew(n, scope);",
      "info" : "ExpressionStatement[12823-12853]:ExpressionStatement[12823-12853]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12862-12868]:BreakStatement[12862-12868]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[12876-12898]:SwitchCase[12876-12898]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[12905-12920]:SwitchCase[12905-12920]"
    }, {
      "left" : "scope = traverseAdd(n, scope);",
      "right" : "scope = traverseAdd(n, scope);",
      "info" : "ExpressionStatement[12929-12959]:ExpressionStatement[12929-12959]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12968-12974]:BreakStatement[12968-12974]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[12982-12997]:SwitchCase[12982-12997]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[13004-13019]:SwitchCase[13004-13019]"
    }, {
      "left" : "scope = traverse(n.getFirstChild(), scope);",
      "right" : "scope = traverse(n.getFirstChild(), scope);",
      "info" : "ExpressionStatement[13028-13071]:ExpressionStatement[13028-13071]"
    }, {
      "left" : "n.setJSType(getNativeType(NUMBER_TYPE));",
      "right" : "n.setJSType(getNativeType(NUMBER_TYPE));",
      "info" : "ExpressionStatement[13096-13136]:ExpressionStatement[13096-13136]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13145-13151]:BreakStatement[13145-13151]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[13159-13179]:SwitchCase[13159-13179]"
    }, {
      "left" : "scope = traverseArrayLiteral(n, scope);",
      "right" : "scope = traverseArrayLiteral(n, scope);",
      "info" : "ExpressionStatement[13188-13227]:ExpressionStatement[13188-13227]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13236-13242]:BreakStatement[13236-13242]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[13250-13266]:SwitchCase[13250-13266]"
    }, {
      "left" : "n.setJSType(scope.getTypeOfThis());",
      "right" : "n.setJSType(scope.getTypeOfThis());",
      "info" : "ExpressionStatement[13275-13310]:ExpressionStatement[13275-13310]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13319-13325]:BreakStatement[13319-13325]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[13333-13355]:SwitchCase[13333-13355]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[13362-13384]:SwitchCase[13362-13384]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[13391-13406]:SwitchCase[13391-13406]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[13413-13428]:SwitchCase[13413-13428]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[13435-13458]:SwitchCase[13435-13458]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[13465-13481]:SwitchCase[13465-13481]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[13488-13510]:SwitchCase[13488-13510]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[13517-13539]:SwitchCase[13517-13539]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[13546-13571]:SwitchCase[13546-13571]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[13578-13603]:SwitchCase[13578-13603]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[13610-13634]:SwitchCase[13610-13634]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[13641-13663]:SwitchCase[13641-13663]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[13670-13692]:SwitchCase[13670-13692]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[13699-13714]:SwitchCase[13699-13714]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[13721-13736]:SwitchCase[13721-13736]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[13743-13761]:SwitchCase[13743-13761]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[13768-13786]:SwitchCase[13768-13786]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[13793-13810]:SwitchCase[13793-13810]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[13817-13832]:SwitchCase[13817-13832]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[13839-13854]:SwitchCase[13839-13854]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[13861-13876]:SwitchCase[13861-13876]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[13883-13898]:SwitchCase[13883-13898]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[13905-13923]:SwitchCase[13905-13923]"
    }, {
      "left" : "scope = traverseChildren(n, scope);",
      "right" : "scope = traverseChildren(n, scope);",
      "info" : "ExpressionStatement[13932-13967]:ExpressionStatement[13932-13967]"
    }, {
      "left" : "n.setJSType(getNativeType(NUMBER_TYPE));",
      "right" : "n.setJSType(getNativeType(NUMBER_TYPE));",
      "info" : "ExpressionStatement[13976-14016]:ExpressionStatement[13976-14016]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14025-14031]:BreakStatement[14025-14031]"
    }, {
      "left" : "case Token.PARAM_LIST:",
      "right" : "case Token.PARAM_LIST:",
      "info" : "SwitchCase[14039-14061]:SwitchCase[14039-14061]"
    }, {
      "left" : "scope = traverse(n.getFirstChild(), scope);",
      "right" : "scope = traverse(n.getFirstChild(), scope);",
      "info" : "ExpressionStatement[14070-14113]:ExpressionStatement[14070-14113]"
    }, {
      "left" : "n.setJSType(getJSType(n.getFirstChild()));",
      "right" : "n.setJSType(getJSType(n.getFirstChild()));",
      "info" : "ExpressionStatement[14122-14164]:ExpressionStatement[14122-14164]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14173-14179]:BreakStatement[14173-14179]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[14187-14204]:SwitchCase[14187-14204]"
    }, {
      "left" : "scope = traverseChildren(n, scope);",
      "right" : "scope = traverseChildren(n, scope);",
      "info" : "ExpressionStatement[14213-14248]:ExpressionStatement[14213-14248]"
    }, {
      "left" : "n.setJSType(getJSType(n.getLastChild()));",
      "right" : "n.setJSType(getJSType(n.getLastChild()));",
      "info" : "ExpressionStatement[14257-14298]:ExpressionStatement[14257-14298]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14307-14313]:BreakStatement[14307-14313]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[14321-14339]:SwitchCase[14321-14339]"
    }, {
      "left" : "scope = traverseChildren(n, scope);",
      "right" : "scope = traverseChildren(n, scope);",
      "info" : "ExpressionStatement[14348-14383]:ExpressionStatement[14348-14383]"
    }, {
      "left" : "n.setJSType(getNativeType(STRING_TYPE));",
      "right" : "n.setJSType(getNativeType(STRING_TYPE));",
      "info" : "ExpressionStatement[14392-14432]:ExpressionStatement[14392-14432]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14441-14447]:BreakStatement[14441-14447]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[14455-14474]:SwitchCase[14455-14474]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[14481-14495]:SwitchCase[14481-14495]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[14502-14516]:SwitchCase[14502-14516]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[14523-14537]:SwitchCase[14523-14537]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[14544-14558]:SwitchCase[14544-14558]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[14565-14580]:SwitchCase[14565-14580]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[14587-14601]:SwitchCase[14587-14601]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[14608-14622]:SwitchCase[14608-14622]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[14629-14645]:SwitchCase[14629-14645]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[14652-14668]:SwitchCase[14652-14668]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[14675-14697]:SwitchCase[14675-14697]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[14704-14718]:SwitchCase[14704-14718]"
    }, {
      "left" : "scope = traverseChildren(n, scope);",
      "right" : "scope = traverseChildren(n, scope);",
      "info" : "ExpressionStatement[14727-14762]:ExpressionStatement[14727-14762]"
    }, {
      "left" : "n.setJSType(getNativeType(BOOLEAN_TYPE));",
      "right" : "n.setJSType(getNativeType(BOOLEAN_TYPE));",
      "info" : "ExpressionStatement[14771-14812]:ExpressionStatement[14771-14812]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14821-14827]:BreakStatement[14821-14827]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[14835-14854]:SwitchCase[14835-14854]"
    }, {
      "left" : "scope = traverseGetElem(n, scope);",
      "right" : "scope = traverseGetElem(n, scope);",
      "info" : "ExpressionStatement[14863-14897]:ExpressionStatement[14863-14897]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14906-14912]:BreakStatement[14906-14912]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[14920-14943]:SwitchCase[14920-14943]"
    }, {
      "left" : "scope = traverseChildren(n, scope);",
      "right" : "scope = traverseChildren(n, scope);",
      "info" : "ExpressionStatement[14952-14987]:ExpressionStatement[14952-14987]"
    }, {
      "left" : "if (n.getFirstChild().isGetProp())",
      "right" : "if (n.getFirstChild().isGetProp())",
      "info" : "IfStatement[14996-15095]:IfStatement[14996-15095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15031-15095]:Block[15031-15095]"
    }, {
      "left" : "ensurePropertyDeclared(n.getFirstChild());",
      "right" : "ensurePropertyDeclared(n.getFirstChild());",
      "info" : "ExpressionStatement[15043-15085]:ExpressionStatement[15043-15085]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15104-15110]:BreakStatement[15104-15110]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[15118-15136]:SwitchCase[15118-15136]"
    }, {
      "left" : "scope = traverse(n.getFirstChild(), scope);",
      "right" : "scope = traverse(n.getFirstChild(), scope);",
      "info" : "ExpressionStatement[15145-15188]:ExpressionStatement[15145-15188]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15197-15203]:BreakStatement[15197-15203]"
    }, {
      "left" : "case Token.RETURN:",
      "right" : "case Token.RETURN:",
      "info" : "SwitchCase[15211-15229]:SwitchCase[15211-15229]"
    }, {
      "left" : "scope = traverseReturn(n, scope);",
      "right" : "scope = traverseReturn(n, scope);",
      "info" : "ExpressionStatement[15238-15271]:ExpressionStatement[15238-15271]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15280-15286]:BreakStatement[15280-15286]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[15294-15309]:SwitchCase[15294-15309]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[15316-15333]:SwitchCase[15316-15333]"
    }, {
      "left" : "scope = traverseChildren(n, scope);",
      "right" : "scope = traverseChildren(n, scope);",
      "info" : "ExpressionStatement[15342-15377]:ExpressionStatement[15342-15377]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15386-15392]:BreakStatement[15386-15392]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[15400-15417]:SwitchCase[15400-15417]"
    }, {
      "left" : "scope = traverseCatch(n, scope);",
      "right" : "scope = traverseCatch(n, scope);",
      "info" : "ExpressionStatement[15426-15458]:ExpressionStatement[15426-15458]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15467-15473]:BreakStatement[15467-15473]"
    }, {
      "left" : "case Token.CAST:",
      "right" : "case Token.CAST:",
      "info" : "SwitchCase[15481-15497]:SwitchCase[15481-15497]"
    }, {
      "left" : "scope = traverseChildren(n, scope);",
      "right" : "scope = traverseChildren(n, scope);",
      "info" : "ExpressionStatement[15506-15541]:ExpressionStatement[15506-15541]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[15550-15584]:VariableDeclarationStatement[15550-15584]"
    }, {
      "left" : "if (info != null && info.hasType())",
      "right" : "if (info != null && info.hasType())",
      "info" : "IfStatement[15593-15714]:IfStatement[15593-15714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15629-15714]:Block[15629-15714]"
    }, {
      "left" : "n.setJSType(info.getType().evaluate(syntacticScope, registry));",
      "right" : "n.setJSType(info.getType().evaluate(syntacticScope, registry));",
      "info" : "ExpressionStatement[15641-15704]:ExpressionStatement[15641-15704]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15723-15729]:BreakStatement[15723-15729]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[15741-15754]:ReturnStatement[15741-15754]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15804-15811]:Modifier[15804-15811]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[15812-15821]:SimpleType[15812-15821]"
    }, {
      "left" : "traverseReturn",
      "right" : "traverseReturn",
      "info" : "SimpleName[15822-15836]:SimpleName[15822-15836]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[15837-15843]:SingleVariableDeclaration[15837-15843]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[15845-15860]:SingleVariableDeclaration[15845-15860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15862-16300]:Block[15862-16300]"
    }, {
      "left" : "scope = traverseChildren(n, scope);",
      "right" : "scope = traverseChildren(n, scope);",
      "info" : "ExpressionStatement[15868-15903]:ExpressionStatement[15868-15903]"
    }, {
      "left" : "Node retValue = n.getFirstChild();",
      "right" : "Node retValue = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[15909-15943]:VariableDeclarationStatement[15909-15943]"
    }, {
      "left" : "if (retValue != null)",
      "right" : "if (retValue != null)",
      "info" : "IfStatement[15948-16278]:IfStatement[15948-16278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15970-16278]:Block[15970-16278]"
    }, {
      "left" : "JSType type = functionScope.getRootNode().getJSType();",
      "right" : "JSType type = functionScope.getRootNode().getJSType();",
      "info" : "VariableDeclarationStatement[15978-16032]:VariableDeclarationStatement[15978-16032]"
    }, {
      "left" : "if (type != null)",
      "right" : "if (type != null)",
      "info" : "IfStatement[16039-16272]:IfStatement[16039-16272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16057-16272]:Block[16057-16272]"
    }, {
      "left" : "FunctionType fnType = type.toMaybeFunctionType();",
      "right" : "FunctionType fnType = type.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[16067-16116]:VariableDeclarationStatement[16067-16116]"
    }, {
      "left" : "if (fnType != null)",
      "right" : "if (fnType != null)",
      "info" : "IfStatement[16125-16264]:IfStatement[16125-16264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16145-16264]:Block[16145-16264]"
    }, {
      "left" : "inferPropertyTypesToMatchConstraint(\n              retValue.getJSType(), fnType.getReturnType());",
      "right" : "inferPropertyTypesToMatchConstraint(\n              retValue.getJSType(), fnType.getReturnType());",
      "info" : "ExpressionStatement[16157-16254]:ExpressionStatement[16157-16254]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[16283-16296]:ReturnStatement[16283-16296]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16447-16454]:Modifier[16447-16454]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[16455-16464]:SimpleType[16455-16464]"
    }, {
      "left" : "traverseCatch",
      "right" : "traverseCatch",
      "info" : "SimpleName[16465-16478]:SimpleName[16465-16478]"
    }, {
      "left" : "Node catchNode",
      "right" : "Node catchNode",
      "info" : "SingleVariableDeclaration[16479-16493]:SingleVariableDeclaration[16479-16493]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[16495-16510]:SingleVariableDeclaration[16495-16510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16512-16995]:Block[16512-16995]"
    }, {
      "left" : "Node name = catchNode.getFirstChild();",
      "right" : "Node name = catchNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[16518-16556]:VariableDeclarationStatement[16518-16556]"
    }, {
      "left" : "JSType type;",
      "right" : "JSType type;",
      "info" : "VariableDeclarationStatement[16561-16573]:VariableDeclarationStatement[16561-16573]"
    }, {
      "left" : "JSDocInfo info = name.getJSDocInfo();",
      "right" : "JSDocInfo info = name.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[16687-16724]:VariableDeclarationStatement[16687-16724]"
    }, {
      "left" : "if (info != null && info.hasType())",
      "right" : "if (info != null && info.hasType())",
      "info" : "IfStatement[16729-16904]:IfStatement[16729-16904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16765-16836]:Block[16765-16836]"
    }, {
      "left" : "type = info.getType().evaluate(syntacticScope, registry);",
      "right" : "type = info.getType().evaluate(syntacticScope, registry);",
      "info" : "ExpressionStatement[16773-16830]:ExpressionStatement[16773-16830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16842-16904]:Block[16842-16904]"
    }, {
      "left" : "type = getNativeType(JSTypeNative.UNKNOWN_TYPE);",
      "right" : "type = getNativeType(JSTypeNative.UNKNOWN_TYPE);",
      "info" : "ExpressionStatement[16850-16898]:ExpressionStatement[16850-16898]"
    }, {
      "left" : "redeclareSimpleVar(scope, name, type);",
      "right" : "redeclareSimpleVar(scope, name, type);",
      "info" : "ExpressionStatement[16909-16947]:ExpressionStatement[16909-16947]"
    }, {
      "left" : "name.setJSType(type);",
      "right" : "name.setJSType(type);",
      "info" : "ExpressionStatement[16952-16973]:ExpressionStatement[16952-16973]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[16978-16991]:ReturnStatement[16978-16991]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16999-17006]:Modifier[16999-17006]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[17007-17016]:SimpleType[17007-17016]"
    }, {
      "left" : "traverseAssign",
      "right" : "traverseAssign",
      "info" : "SimpleName[17017-17031]:SimpleName[17017-17031]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[17032-17038]:SingleVariableDeclaration[17032-17038]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[17040-17055]:SingleVariableDeclaration[17040-17055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17057-17365]:Block[17057-17365]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[17063-17093]:VariableDeclarationStatement[17063-17093]"
    }, {
      "left" : "Node right = n.getLastChild();",
      "right" : "Node right = n.getLastChild();",
      "info" : "VariableDeclarationStatement[17098-17128]:VariableDeclarationStatement[17098-17128]"
    }, {
      "left" : "scope = traverseChildren(n, scope);",
      "right" : "scope = traverseChildren(n, scope);",
      "info" : "ExpressionStatement[17133-17168]:ExpressionStatement[17133-17168]"
    }, {
      "left" : "JSType leftType = left.getJSType();",
      "right" : "JSType leftType = left.getJSType();",
      "info" : "VariableDeclarationStatement[17174-17209]:VariableDeclarationStatement[17174-17209]"
    }, {
      "left" : "JSType rightType = getJSType(right);",
      "right" : "JSType rightType = getJSType(right);",
      "info" : "VariableDeclarationStatement[17214-17250]:VariableDeclarationStatement[17214-17250]"
    }, {
      "left" : "n.setJSType(rightType);",
      "right" : "n.setJSType(rightType);",
      "info" : "ExpressionStatement[17255-17278]:ExpressionStatement[17255-17278]"
    }, {
      "left" : "updateScopeForTypeChange(scope, left, leftType, rightType);",
      "right" : "updateScopeForTypeChange(scope, left, leftType, rightType);",
      "info" : "ExpressionStatement[17284-17343]:ExpressionStatement[17284-17343]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[17348-17361]:ReturnStatement[17348-17361]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17486-17493]:Modifier[17486-17493]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17494-17498]:PrimitiveType[17494-17498]"
    }, {
      "left" : "updateScopeForTypeChange",
      "right" : "updateScopeForTypeChange",
      "info" : "SimpleName[17499-17523]:SimpleName[17499-17523]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[17531-17546]:SingleVariableDeclaration[17531-17546]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[17548-17557]:SingleVariableDeclaration[17548-17557]"
    }, {
      "left" : "JSType leftType",
      "right" : "JSType leftType",
      "info" : "SingleVariableDeclaration[17559-17574]:SingleVariableDeclaration[17559-17574]"
    }, {
      "left" : "JSType resultType",
      "right" : "JSType resultType",
      "info" : "SingleVariableDeclaration[17576-17593]:SingleVariableDeclaration[17576-17593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17595-19264]:Block[17595-19264]"
    }, {
      "left" : "Preconditions.checkNotNull(resultType);",
      "right" : "Preconditions.checkNotNull(resultType);",
      "info" : "ExpressionStatement[17601-17640]:ExpressionStatement[17601-17640]"
    }, {
      "left" : "switch (left.getType()) {\n      case Token.NAME:\n        String varName = left.getString();\n        Var var = syntacticScope.getVar(varName);\n\n        // When looking at VAR initializers for declared VARs, we trust\n        // the declared type over the type it's being initialized to.\n        // This has two purposes:\n        // 1) We avoid re-declaring declared variables so that built-in\n        //    types defined in externs are not redeclared.\n        // 2) When there's a lexical closure like\n        //    /** @type {?string} */ var x = null;\n        //    function f() { x = 'xyz'; }\n        //    the inference will ignore the lexical closure,\n        //    which is just wrong. This bug needs to be fixed eventually.\n        boolean isVarDeclaration = left.hasChildren();\n        if (!isVarDeclaration || var == null || var.isTypeInferred()) {\n          redeclareSimpleVar(scope, left, resultType);\n        }\n        left.setJSType(isVarDeclaration || leftType == null ?\n            resultType : null);\n\n        if (var != null && var.isTypeInferred()) {\n          JSType oldType = var.getType();\n          var.setType(oldType == null ?\n              resultType : oldType.getLeastSupertype(resultType));\n        }\n        break;\n      case Token.GETPROP:\n        String qualifiedName = left.getQualifiedName();\n        if (qualifiedName != null) {\n          scope.inferQualifiedSlot(left, qualifiedName,\n              leftType == null ? unknownType : leftType,\n              resultType);\n        }\n\n        left.setJSType(resultType);\n        ensurePropertyDefined(left, resultType);\n        break;\n    }",
      "right" : "switch (left.getType()) {\n      case Token.NAME:\n        String varName = left.getString();\n        Var var = syntacticScope.getVar(varName);\n\n        // When looking at VAR initializers for declared VARs, we trust\n        // the declared type over the type it's being initialized to.\n        // This has two purposes:\n        // 1) We avoid re-declaring declared variables so that built-in\n        //    types defined in externs are not redeclared.\n        // 2) When there's a lexical closure like\n        //    /** @type {?string} */ var x = null;\n        //    function f() { x = 'xyz'; }\n        //    the inference will ignore the lexical closure,\n        //    which is just wrong. This bug needs to be fixed eventually.\n        boolean isVarDeclaration = left.hasChildren();\n        if (!isVarDeclaration || var == null || var.isTypeInferred()) {\n          redeclareSimpleVar(scope, left, resultType);\n        }\n        left.setJSType(isVarDeclaration || leftType == null ?\n            resultType : null);\n\n        if (var != null && var.isTypeInferred()) {\n          JSType oldType = var.getType();\n          var.setType(oldType == null ?\n              resultType : oldType.getLeastSupertype(resultType));\n        }\n        break;\n      case Token.GETPROP:\n        String qualifiedName = left.getQualifiedName();\n        if (qualifiedName != null) {\n          scope.inferQualifiedSlot(left, qualifiedName,\n              leftType == null ? unknownType : leftType,\n              resultType);\n        }\n\n        left.setJSType(resultType);\n        ensurePropertyDefined(left, resultType);\n        break;\n    }",
      "info" : "SwitchStatement[17645-19260]:SwitchStatement[17645-19260]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[17677-17693]:SwitchCase[17677-17693]"
    }, {
      "left" : "String varName = left.getString();",
      "right" : "String varName = left.getString();",
      "info" : "VariableDeclarationStatement[17702-17736]:VariableDeclarationStatement[17702-17736]"
    }, {
      "left" : "Var var = syntacticScope.getVar(varName);",
      "right" : "Var var = syntacticScope.getVar(varName);",
      "info" : "VariableDeclarationStatement[17745-17786]:VariableDeclarationStatement[17745-17786]"
    }, {
      "left" : "boolean isVarDeclaration = left.hasChildren();",
      "right" : "boolean isVarDeclaration = left.hasChildren();",
      "info" : "VariableDeclarationStatement[18381-18427]:VariableDeclarationStatement[18381-18427]"
    }, {
      "left" : "if (!isVarDeclaration || var == null || var.isTypeInferred())",
      "right" : "if (!isVarDeclaration || var == null || var.isTypeInferred())",
      "info" : "IfStatement[18436-18564]:IfStatement[18436-18564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18498-18564]:Block[18498-18564]"
    }, {
      "left" : "redeclareSimpleVar(scope, left, resultType);",
      "right" : "redeclareSimpleVar(scope, left, resultType);",
      "info" : "ExpressionStatement[18510-18554]:ExpressionStatement[18510-18554]"
    }, {
      "left" : "left.setJSType(isVarDeclaration || leftType == null ?\n            resultType : null);",
      "right" : "left.setJSType(isVarDeclaration || leftType == null ?\n            resultType : null);",
      "info" : "ExpressionStatement[18573-18658]:ExpressionStatement[18573-18658]"
    }, {
      "left" : "if (var != null && var.isTypeInferred())",
      "right" : "if (var != null && var.isTypeInferred())",
      "info" : "IfStatement[18668-18869]:IfStatement[18668-18869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18709-18869]:Block[18709-18869]"
    }, {
      "left" : "JSType oldType = var.getType();",
      "right" : "JSType oldType = var.getType();",
      "info" : "VariableDeclarationStatement[18721-18752]:VariableDeclarationStatement[18721-18752]"
    }, {
      "left" : "var.setType(oldType == null ?\n              resultType : oldType.getLeastSupertype(resultType));",
      "right" : "var.setType(oldType == null ?\n              resultType : oldType.getLeastSupertype(resultType));",
      "info" : "ExpressionStatement[18763-18859]:ExpressionStatement[18763-18859]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18878-18884]:BreakStatement[18878-18884]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[18891-18910]:SwitchCase[18891-18910]"
    }, {
      "left" : "String qualifiedName = left.getQualifiedName();",
      "right" : "String qualifiedName = left.getQualifiedName();",
      "info" : "VariableDeclarationStatement[18919-18966]:VariableDeclarationStatement[18919-18966]"
    }, {
      "left" : "if (qualifiedName != null)",
      "right" : "if (qualifiedName != null)",
      "info" : "IfStatement[18975-19153]:IfStatement[18975-19153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19002-19153]:Block[19002-19153]"
    }, {
      "left" : "scope.inferQualifiedSlot(left, qualifiedName,\n              leftType == null ? unknownType : leftType,\n              resultType);",
      "right" : "scope.inferQualifiedSlot(left, qualifiedName,\n              leftType == null ? unknownType : leftType,\n              resultType);",
      "info" : "ExpressionStatement[19014-19143]:ExpressionStatement[19014-19143]"
    }, {
      "left" : "left.setJSType(resultType);",
      "right" : "left.setJSType(resultType);",
      "info" : "ExpressionStatement[19163-19190]:ExpressionStatement[19163-19190]"
    }, {
      "left" : "ensurePropertyDefined(left, resultType);",
      "right" : "ensurePropertyDefined(left, resultType);",
      "info" : "ExpressionStatement[19199-19239]:ExpressionStatement[19199-19239]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19248-19254]:BreakStatement[19248-19254]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19346-19353]:Modifier[19346-19353]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19354-19358]:PrimitiveType[19354-19358]"
    }, {
      "left" : "ensurePropertyDefined",
      "right" : "ensurePropertyDefined",
      "info" : "SimpleName[19359-19380]:SimpleName[19359-19380]"
    }, {
      "left" : "Node getprop",
      "right" : "Node getprop",
      "info" : "SingleVariableDeclaration[19381-19393]:SingleVariableDeclaration[19381-19393]"
    }, {
      "left" : "JSType rightType",
      "right" : "JSType rightType",
      "info" : "SingleVariableDeclaration[19395-19411]:SingleVariableDeclaration[19395-19411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19413-22579]:Block[19413-22579]"
    }, {
      "left" : "String propName = getprop.getLastChild().getString();",
      "right" : "String propName = getprop.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[19419-19472]:VariableDeclarationStatement[19419-19472]"
    }, {
      "left" : "Node obj = getprop.getFirstChild();",
      "right" : "Node obj = getprop.getFirstChild();",
      "info" : "VariableDeclarationStatement[19477-19512]:VariableDeclarationStatement[19477-19512]"
    }, {
      "left" : "JSType nodeType = getJSType(obj);",
      "right" : "JSType nodeType = getJSType(obj);",
      "info" : "VariableDeclarationStatement[19517-19550]:VariableDeclarationStatement[19517-19550]"
    }, {
      "left" : "ObjectType objectType = ObjectType.cast(\n        nodeType.restrictByNotNullOrUndefined());",
      "right" : "ObjectType objectType = ObjectType.cast(\n        nodeType.restrictByNotNullOrUndefined());",
      "info" : "VariableDeclarationStatement[19555-19645]:VariableDeclarationStatement[19555-19645]"
    }, {
      "left" : "boolean propCreationInConstructor = obj.isThis() &&\n        getJSType(syntacticScope.getRootNode()).isConstructor();",
      "right" : "boolean propCreationInConstructor = obj.isThis() &&\n        getJSType(syntacticScope.getRootNode()).isConstructor();",
      "info" : "VariableDeclarationStatement[19650-19766]:VariableDeclarationStatement[19650-19766]"
    }, {
      "left" : "if (objectType == null)",
      "right" : "if (objectType == null)",
      "info" : "IfStatement[19772-22575]:IfStatement[19772-22575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19796-19862]:Block[19796-19862]"
    }, {
      "left" : "registry.registerPropertyOnType(propName, nodeType);",
      "right" : "registry.registerPropertyOnType(propName, nodeType);",
      "info" : "ExpressionStatement[19804-19856]:ExpressionStatement[19804-19856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19868-22575]:Block[19868-22575]"
    }, {
      "left" : "if (nodeType.isStruct() && !objectType.hasProperty(propName))",
      "right" : "if (nodeType.isStruct() && !objectType.hasProperty(propName))",
      "info" : "IfStatement[19876-21199]:IfStatement[19876-21199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19938-21199]:Block[19938-21199]"
    }, {
      "left" : "boolean staticPropCreation = false;",
      "right" : "boolean staticPropCreation = false;",
      "info" : "VariableDeclarationStatement[20531-20566]:VariableDeclarationStatement[20531-20566]"
    }, {
      "left" : "Node maybeAssignStm = getprop.getParent().getParent();",
      "right" : "Node maybeAssignStm = getprop.getParent().getParent();",
      "info" : "VariableDeclarationStatement[20575-20629]:VariableDeclarationStatement[20575-20629]"
    }, {
      "left" : "if (syntacticScope.isGlobal() &&\n            NodeUtil.isPrototypePropertyDeclaration(maybeAssignStm))",
      "right" : "if (syntacticScope.isGlobal() &&\n            NodeUtil.isPrototypePropertyDeclaration(maybeAssignStm))",
      "info" : "IfStatement[20638-21044]:IfStatement[20638-21044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20740-21044]:Block[20740-21044]"
    }, {
      "left" : "String propCreationFilename = maybeAssignStm.getSourceFileName();",
      "right" : "String propCreationFilename = maybeAssignStm.getSourceFileName();",
      "info" : "VariableDeclarationStatement[20752-20817]:VariableDeclarationStatement[20752-20817]"
    }, {
      "left" : "Node ctor = objectType.getOwnerFunction().getSource();",
      "right" : "Node ctor = objectType.getOwnerFunction().getSource();",
      "info" : "VariableDeclarationStatement[20828-20882]:VariableDeclarationStatement[20828-20882]"
    }, {
      "left" : "if (ctor != null &&\n              ctor.getSourceFileName().equals(propCreationFilename))",
      "right" : "if (ctor != null &&\n              ctor.getSourceFileName().equals(propCreationFilename))",
      "info" : "IfStatement[20893-21034]:IfStatement[20893-21034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20982-21034]:Block[20982-21034]"
    }, {
      "left" : "staticPropCreation = true;",
      "right" : "staticPropCreation = true;",
      "info" : "ExpressionStatement[20996-21022]:ExpressionStatement[20996-21022]"
    }, {
      "left" : "if (!propCreationInConstructor && !staticPropCreation)",
      "right" : "if (!propCreationInConstructor && !staticPropCreation)",
      "info" : "IfStatement[21053-21191]:IfStatement[21053-21191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21108-21191]:Block[21108-21191]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[21120-21127]:ReturnStatement[21120-21127]"
    }, {
      "left" : "if (ensurePropertyDeclaredHelper(getprop, objectType))",
      "right" : "if (ensurePropertyDeclaredHelper(getprop, objectType))",
      "info" : "IfStatement[21207-21287]:IfStatement[21207-21287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21262-21287]:Block[21262-21287]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[21272-21279]:ReturnStatement[21272-21279]"
    }, {
      "left" : "if (!objectType.isPropertyTypeDeclared(propName))",
      "right" : "if (!objectType.isPropertyTypeDeclared(propName))",
      "info" : "IfStatement[21295-22569]:IfStatement[21295-22569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21345-22569]:Block[21345-22569]"
    }, {
      "left" : "if (objectType.hasProperty(propName) || !objectType.isInstanceType())",
      "right" : "if (objectType.hasProperty(propName) || !objectType.isInstanceType())",
      "info" : "IfStatement[22044-22561]:IfStatement[22044-22561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22114-22356]:Block[22114-22356]"
    }, {
      "left" : "if (\"prototype\".equals(propName))",
      "right" : "if (\"prototype\".equals(propName))",
      "info" : "IfStatement[22126-22346]:IfStatement[22126-22346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22160-22250]:Block[22160-22250]"
    }, {
      "left" : "objectType.defineDeclaredProperty(propName, rightType, getprop);",
      "right" : "objectType.defineDeclaredProperty(propName, rightType, getprop);",
      "info" : "ExpressionStatement[22174-22238]:ExpressionStatement[22174-22238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22256-22346]:Block[22256-22346]"
    }, {
      "left" : "objectType.defineInferredProperty(propName, rightType, getprop);",
      "right" : "objectType.defineInferredProperty(propName, rightType, getprop);",
      "info" : "ExpressionStatement[22270-22334]:ExpressionStatement[22270-22334]"
    }, {
      "left" : "if (propCreationInConstructor)",
      "right" : "if (propCreationInConstructor)",
      "info" : "IfStatement[22362-22561]:IfStatement[22362-22561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22393-22479]:Block[22393-22479]"
    }, {
      "left" : "objectType.defineInferredProperty(propName, rightType, getprop);",
      "right" : "objectType.defineInferredProperty(propName, rightType, getprop);",
      "info" : "ExpressionStatement[22405-22469]:ExpressionStatement[22405-22469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22485-22561]:Block[22485-22561]"
    }, {
      "left" : "registry.registerPropertyOnType(propName, objectType);",
      "right" : "registry.registerPropertyOnType(propName, objectType);",
      "info" : "ExpressionStatement[22497-22551]:ExpressionStatement[22497-22551]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22850-22857]:Modifier[22850-22857]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22858-22862]:PrimitiveType[22858-22862]"
    }, {
      "left" : "ensurePropertyDeclared",
      "right" : "ensurePropertyDeclared",
      "info" : "SimpleName[22863-22885]:SimpleName[22863-22885]"
    }, {
      "left" : "Node getprop",
      "right" : "Node getprop",
      "info" : "SingleVariableDeclaration[22886-22898]:SingleVariableDeclaration[22886-22898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22900-23116]:Block[22900-23116]"
    }, {
      "left" : "ObjectType ownerType = ObjectType.cast(\n        getJSType(getprop.getFirstChild()).restrictByNotNullOrUndefined());",
      "right" : "ObjectType ownerType = ObjectType.cast(\n        getJSType(getprop.getFirstChild()).restrictByNotNullOrUndefined());",
      "info" : "VariableDeclarationStatement[22906-23021]:VariableDeclarationStatement[22906-23021]"
    }, {
      "left" : "if (ownerType != null)",
      "right" : "if (ownerType != null)",
      "info" : "IfStatement[23026-23112]:IfStatement[23026-23112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23049-23112]:Block[23049-23112]"
    }, {
      "left" : "ensurePropertyDeclaredHelper(getprop, ownerType);",
      "right" : "ensurePropertyDeclaredHelper(getprop, ownerType);",
      "info" : "ExpressionStatement[23057-23106]:ExpressionStatement[23057-23106]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23231-23238]:Modifier[23231-23238]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23239-23246]:PrimitiveType[23239-23246]"
    }, {
      "left" : "ensurePropertyDeclaredHelper",
      "right" : "ensurePropertyDeclaredHelper",
      "info" : "SimpleName[23247-23275]:SimpleName[23247-23275]"
    }, {
      "left" : "Node getprop",
      "right" : "Node getprop",
      "info" : "SingleVariableDeclaration[23283-23295]:SingleVariableDeclaration[23283-23295]"
    }, {
      "left" : "ObjectType objectType",
      "right" : "ObjectType objectType",
      "info" : "SingleVariableDeclaration[23297-23318]:SingleVariableDeclaration[23297-23318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23320-24065]:Block[23320-24065]"
    }, {
      "left" : "String propName = getprop.getLastChild().getString();",
      "right" : "String propName = getprop.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[23326-23379]:VariableDeclarationStatement[23326-23379]"
    }, {
      "left" : "String qName = getprop.getQualifiedName();",
      "right" : "String qName = getprop.getQualifiedName();",
      "info" : "VariableDeclarationStatement[23384-23426]:VariableDeclarationStatement[23384-23426]"
    }, {
      "left" : "if (qName != null)",
      "right" : "if (qName != null)",
      "info" : "IfStatement[23431-24043]:IfStatement[23431-24043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23450-24043]:Block[23450-24043]"
    }, {
      "left" : "Var var = syntacticScope.getVar(qName);",
      "right" : "Var var = syntacticScope.getVar(qName);",
      "info" : "VariableDeclarationStatement[23458-23497]:VariableDeclarationStatement[23458-23497]"
    }, {
      "left" : "if (var != null && !var.isTypeInferred())",
      "right" : "if (var != null && !var.isTypeInferred())",
      "info" : "IfStatement[23504-24037]:IfStatement[23504-24037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23546-24037]:Block[23546-24037]"
    }, {
      "left" : "if (propName.equals(\"prototype\") ||\n        // Handle prototype declarations that could not be addressed earlier.\n            (!objectType.hasOwnProperty(propName) &&\n             (!objectType.isInstanceType() ||\n                 (var.isExtern() && !objectType.isNativeObjectType()))))",
      "right" : "if (propName.equals(\"prototype\") ||\n        // Handle prototype declarations that could not be addressed earlier.\n            (!objectType.hasOwnProperty(propName) &&\n             (!objectType.isInstanceType() ||\n                 (var.isExtern() && !objectType.isNativeObjectType()))))",
      "info" : "IfStatement[23631-24029]:IfStatement[23631-24029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23917-24029]:Block[23917-24029]"
    }, {
      "left" : "return objectType.defineDeclaredProperty(\n              propName, var.getType(), getprop);",
      "right" : "return objectType.defineDeclaredProperty(\n              propName, var.getType(), getprop);",
      "info" : "ReturnStatement[23929-24019]:ReturnStatement[23929-24019]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24048-24061]:ReturnStatement[24048-24061]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24069-24076]:Modifier[24069-24076]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[24077-24086]:SimpleType[24077-24086]"
    }, {
      "left" : "traverseName",
      "right" : "traverseName",
      "info" : "SimpleName[24087-24099]:SimpleName[24087-24099]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[24100-24106]:SingleVariableDeclaration[24100-24106]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[24108-24123]:SingleVariableDeclaration[24108-24123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24125-26071]:Block[24125-26071]"
    }, {
      "left" : "String varName = n.getString();",
      "right" : "String varName = n.getString();",
      "info" : "VariableDeclarationStatement[24131-24162]:VariableDeclarationStatement[24131-24162]"
    }, {
      "left" : "Node value = n.getFirstChild();",
      "right" : "Node value = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[24167-24198]:VariableDeclarationStatement[24167-24198]"
    }, {
      "left" : "JSType type = n.getJSType();",
      "right" : "JSType type = n.getJSType();",
      "info" : "VariableDeclarationStatement[24203-24231]:VariableDeclarationStatement[24203-24231]"
    }, {
      "left" : "if (value != null)",
      "right" : "if (value != null)",
      "info" : "IfStatement[24236-26026]:IfStatement[24236-26026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24255-24425]:Block[24255-24425]"
    }, {
      "left" : "scope = traverse(value, scope);",
      "right" : "scope = traverse(value, scope);",
      "info" : "ExpressionStatement[24263-24294]:ExpressionStatement[24263-24294]"
    }, {
      "left" : "updateScopeForTypeChange(scope, n, n.getJSType() /* could be null */,\n          getJSType(value));",
      "right" : "updateScopeForTypeChange(scope, n, n.getJSType() /* could be null */,\n          getJSType(value));",
      "info" : "ExpressionStatement[24301-24399]:ExpressionStatement[24301-24399]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[24406-24419]:ReturnStatement[24406-24419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24431-26026]:Block[24431-26026]"
    }, {
      "left" : "StaticSlot<JSType> var = scope.getSlot(varName);",
      "right" : "StaticSlot<JSType> var = scope.getSlot(varName);",
      "info" : "VariableDeclarationStatement[24439-24487]:VariableDeclarationStatement[24439-24487]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[24494-26020]:IfStatement[24494-26020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24511-26020]:Block[24511-26020]"
    }, {
      "left" : "boolean isInferred = var.isTypeInferred();",
      "right" : "boolean isInferred = var.isTypeInferred();",
      "info" : "VariableDeclarationStatement[24790-24832]:VariableDeclarationStatement[24790-24832]"
    }, {
      "left" : "boolean unflowable = isInferred &&\n            isUnflowable(syntacticScope.getVar(varName));",
      "right" : "boolean unflowable = isInferred &&\n            isUnflowable(syntacticScope.getVar(varName));",
      "info" : "VariableDeclarationStatement[24841-24933]:VariableDeclarationStatement[24841-24933]"
    }, {
      "left" : "boolean nonLocalInferredSlot = false;",
      "right" : "boolean nonLocalInferredSlot = false;",
      "info" : "VariableDeclarationStatement[25515-25552]:VariableDeclarationStatement[25515-25552]"
    }, {
      "left" : "if (isInferred && syntacticScope.isLocal())",
      "right" : "if (isInferred && syntacticScope.isLocal())",
      "info" : "IfStatement[25561-25843]:IfStatement[25561-25843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25605-25843]:Block[25605-25843]"
    }, {
      "left" : "Var maybeOuterVar = syntacticScope.getParent().getVar(varName);",
      "right" : "Var maybeOuterVar = syntacticScope.getParent().getVar(varName);",
      "info" : "VariableDeclarationStatement[25617-25680]:VariableDeclarationStatement[25617-25680]"
    }, {
      "left" : "if (var == maybeOuterVar &&\n              !maybeOuterVar.isMarkedAssignedExactlyOnce())",
      "right" : "if (var == maybeOuterVar &&\n              !maybeOuterVar.isMarkedAssignedExactlyOnce())",
      "info" : "IfStatement[25691-25833]:IfStatement[25691-25833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25779-25833]:Block[25779-25833]"
    }, {
      "left" : "nonLocalInferredSlot = true;",
      "right" : "nonLocalInferredSlot = true;",
      "info" : "ExpressionStatement[25793-25821]:ExpressionStatement[25793-25821]"
    }, {
      "left" : "if (!unflowable && !nonLocalInferredSlot)",
      "right" : "if (!unflowable && !nonLocalInferredSlot)",
      "info" : "IfStatement[25853-26012]:IfStatement[25853-26012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25895-26012]:Block[25895-26012]"
    }, {
      "left" : "type = var.getType();",
      "right" : "type = var.getType();",
      "info" : "ExpressionStatement[25907-25928]:ExpressionStatement[25907-25928]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[25939-26002]:IfStatement[25939-26002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25957-26002]:Block[25957-26002]"
    }, {
      "left" : "type = unknownType;",
      "right" : "type = unknownType;",
      "info" : "ExpressionStatement[25971-25990]:ExpressionStatement[25971-25990]"
    }, {
      "left" : "n.setJSType(type);",
      "right" : "n.setJSType(type);",
      "info" : "ExpressionStatement[26031-26049]:ExpressionStatement[26031-26049]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[26054-26067]:ReturnStatement[26054-26067]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26120-26127]:Modifier[26120-26127]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[26128-26137]:SimpleType[26128-26137]"
    }, {
      "left" : "traverseArrayLiteral",
      "right" : "traverseArrayLiteral",
      "info" : "SimpleName[26138-26158]:SimpleName[26138-26158]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[26159-26165]:SingleVariableDeclaration[26159-26165]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[26167-26182]:SingleVariableDeclaration[26167-26182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26184-26291]:Block[26184-26291]"
    }, {
      "left" : "scope = traverseChildren(n, scope);",
      "right" : "scope = traverseChildren(n, scope);",
      "info" : "ExpressionStatement[26190-26225]:ExpressionStatement[26190-26225]"
    }, {
      "left" : "n.setJSType(getNativeType(ARRAY_TYPE));",
      "right" : "n.setJSType(getNativeType(ARRAY_TYPE));",
      "info" : "ExpressionStatement[26230-26269]:ExpressionStatement[26230-26269]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[26274-26287]:ReturnStatement[26274-26287]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26295-26302]:Modifier[26295-26302]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[26303-26312]:SimpleType[26303-26312]"
    }, {
      "left" : "traverseObjectLiteral",
      "right" : "traverseObjectLiteral",
      "info" : "SimpleName[26313-26334]:SimpleName[26313-26334]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[26335-26341]:SingleVariableDeclaration[26335-26341]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[26343-26358]:SingleVariableDeclaration[26343-26358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26360-28225]:Block[26360-28225]"
    }, {
      "left" : "JSType type = n.getJSType();",
      "right" : "JSType type = n.getJSType();",
      "info" : "VariableDeclarationStatement[26366-26394]:VariableDeclarationStatement[26366-26394]"
    }, {
      "left" : "Preconditions.checkNotNull(type);",
      "right" : "Preconditions.checkNotNull(type);",
      "info" : "ExpressionStatement[26399-26432]:ExpressionStatement[26399-26432]"
    }, {
      "left" : "for (Node name = n.getFirstChild(); name != null; name = name.getNext())",
      "right" : "for (Node name = n.getFirstChild(); name != null; name = name.getNext())",
      "info" : "ForStatement[26438-26571]:ForStatement[26438-26571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26511-26571]:Block[26511-26571]"
    }, {
      "left" : "scope = traverse(name.getFirstChild(), scope);",
      "right" : "scope = traverse(name.getFirstChild(), scope);",
      "info" : "ExpressionStatement[26519-26565]:ExpressionStatement[26519-26565]"
    }, {
      "left" : "ObjectType objectType = ObjectType.cast(type);",
      "right" : "ObjectType objectType = ObjectType.cast(type);",
      "info" : "VariableDeclarationStatement[26745-26791]:VariableDeclarationStatement[26745-26791]"
    }, {
      "left" : "if (objectType == null\n        || n.getBooleanProp(Node.REFLECTED_OBJECT)\n        || objectType.isEnumType())",
      "right" : "if (objectType == null\n        || n.getBooleanProp(Node.REFLECTED_OBJECT)\n        || objectType.isEnumType())",
      "info" : "IfStatement[26796-26933]:IfStatement[26796-26933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26906-26933]:Block[26906-26933]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[26914-26927]:ReturnStatement[26914-26927]"
    }, {
      "left" : "String qObjName = NodeUtil.getBestLValueName(\n        NodeUtil.getBestLValue(n));",
      "right" : "String qObjName = NodeUtil.getBestLValueName(\n        NodeUtil.getBestLValue(n));",
      "info" : "VariableDeclarationStatement[26939-27020]:VariableDeclarationStatement[26939-27020]"
    }, {
      "left" : "for (Node name = n.getFirstChild(); name != null;\n         name = name.getNext())",
      "right" : "for (Node name = n.getFirstChild(); name != null;\n         name = name.getNext())",
      "info" : "ForStatement[27025-28203]:ForStatement[27025-28203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27107-28203]:Block[27107-28203]"
    }, {
      "left" : "String memberName = NodeUtil.getObjectLitKeyName(name);",
      "right" : "String memberName = NodeUtil.getObjectLitKeyName(name);",
      "info" : "VariableDeclarationStatement[27115-27170]:VariableDeclarationStatement[27115-27170]"
    }, {
      "left" : "if (memberName != null)",
      "right" : "if (memberName != null)",
      "info" : "IfStatement[27177-28197]:IfStatement[27177-28197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27201-28148]:Block[27201-28148]"
    }, {
      "left" : "JSType rawValueType =  name.getFirstChild().getJSType();",
      "right" : "JSType rawValueType =  name.getFirstChild().getJSType();",
      "info" : "VariableDeclarationStatement[27211-27267]:VariableDeclarationStatement[27211-27267]"
    }, {
      "left" : "JSType valueType = NodeUtil.getObjectLitKeyTypeFromValueType(\n            name, rawValueType);",
      "right" : "JSType valueType = NodeUtil.getObjectLitKeyTypeFromValueType(\n            name, rawValueType);",
      "info" : "VariableDeclarationStatement[27276-27370]:VariableDeclarationStatement[27276-27370]"
    }, {
      "left" : "if (valueType == null)",
      "right" : "if (valueType == null)",
      "info" : "IfStatement[27379-27448]:IfStatement[27379-27448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27402-27448]:Block[27402-27448]"
    }, {
      "left" : "valueType = unknownType;",
      "right" : "valueType = unknownType;",
      "info" : "ExpressionStatement[27414-27438]:ExpressionStatement[27414-27438]"
    }, {
      "left" : "objectType.defineInferredProperty(memberName, valueType, name);",
      "right" : "objectType.defineInferredProperty(memberName, valueType, name);",
      "info" : "ExpressionStatement[27457-27520]:ExpressionStatement[27457-27520]"
    }, {
      "left" : "if (qObjName != null && name.isStringKey())",
      "right" : "if (qObjName != null && name.isStringKey())",
      "info" : "IfStatement[27607-28140]:IfStatement[27607-28140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27651-28140]:Block[27651-28140]"
    }, {
      "left" : "String qKeyName = qObjName + \".\" + memberName;",
      "right" : "String qKeyName = qObjName + \".\" + memberName;",
      "info" : "VariableDeclarationStatement[27663-27709]:VariableDeclarationStatement[27663-27709]"
    }, {
      "left" : "Var var = syntacticScope.getVar(qKeyName);",
      "right" : "Var var = syntacticScope.getVar(qKeyName);",
      "info" : "VariableDeclarationStatement[27720-27762]:VariableDeclarationStatement[27720-27762]"
    }, {
      "left" : "JSType oldType = var == null ? null : var.getType();",
      "right" : "JSType oldType = var == null ? null : var.getType();",
      "info" : "VariableDeclarationStatement[27773-27825]:VariableDeclarationStatement[27773-27825]"
    }, {
      "left" : "if (var != null && var.isTypeInferred())",
      "right" : "if (var != null && var.isTypeInferred())",
      "info" : "IfStatement[27836-27997]:IfStatement[27836-27997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27877-27997]:Block[27877-27997]"
    }, {
      "left" : "var.setType(oldType == null ?\n                valueType : oldType.getLeastSupertype(oldType));",
      "right" : "var.setType(oldType == null ?\n                valueType : oldType.getLeastSupertype(oldType));",
      "info" : "ExpressionStatement[27891-27985]:ExpressionStatement[27891-27985]"
    }, {
      "left" : "scope.inferQualifiedSlot(name, qKeyName,\n              oldType == null ? unknownType : oldType,\n              valueType);",
      "right" : "scope.inferQualifiedSlot(name, qKeyName,\n              oldType == null ? unknownType : oldType,\n              valueType);",
      "info" : "ExpressionStatement[28009-28130]:ExpressionStatement[28009-28130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28154-28197]:Block[28154-28197]"
    }, {
      "left" : "n.setJSType(unknownType);",
      "right" : "n.setJSType(unknownType);",
      "info" : "ExpressionStatement[28164-28189]:ExpressionStatement[28164-28189]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[28208-28221]:ReturnStatement[28208-28221]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28229-28236]:Modifier[28229-28236]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[28237-28246]:SimpleType[28237-28246]"
    }, {
      "left" : "traverseAdd",
      "right" : "traverseAdd",
      "info" : "SimpleName[28247-28258]:SimpleName[28247-28258]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[28259-28265]:SingleVariableDeclaration[28259-28265]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[28267-28282]:SingleVariableDeclaration[28267-28282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28284-29345]:Block[28284-29345]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[28290-28320]:VariableDeclarationStatement[28290-28320]"
    }, {
      "left" : "Node right = left.getNext();",
      "right" : "Node right = left.getNext();",
      "info" : "VariableDeclarationStatement[28325-28353]:VariableDeclarationStatement[28325-28353]"
    }, {
      "left" : "scope = traverseChildren(n, scope);",
      "right" : "scope = traverseChildren(n, scope);",
      "info" : "ExpressionStatement[28358-28393]:ExpressionStatement[28358-28393]"
    }, {
      "left" : "JSType leftType = left.getJSType();",
      "right" : "JSType leftType = left.getJSType();",
      "info" : "VariableDeclarationStatement[28399-28434]:VariableDeclarationStatement[28399-28434]"
    }, {
      "left" : "JSType rightType = right.getJSType();",
      "right" : "JSType rightType = right.getJSType();",
      "info" : "VariableDeclarationStatement[28439-28476]:VariableDeclarationStatement[28439-28476]"
    }, {
      "left" : "JSType type = unknownType;",
      "right" : "JSType type = unknownType;",
      "info" : "VariableDeclarationStatement[28482-28508]:VariableDeclarationStatement[28482-28508]"
    }, {
      "left" : "if (leftType != null && rightType != null)",
      "right" : "if (leftType != null && rightType != null)",
      "info" : "IfStatement[28513-29204]:IfStatement[28513-29204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28556-29204]:Block[28556-29204]"
    }, {
      "left" : "boolean leftIsUnknown = leftType.isUnknownType();",
      "right" : "boolean leftIsUnknown = leftType.isUnknownType();",
      "info" : "VariableDeclarationStatement[28564-28613]:VariableDeclarationStatement[28564-28613]"
    }, {
      "left" : "boolean rightIsUnknown = rightType.isUnknownType();",
      "right" : "boolean rightIsUnknown = rightType.isUnknownType();",
      "info" : "VariableDeclarationStatement[28620-28671]:VariableDeclarationStatement[28620-28671]"
    }, {
      "left" : "if (leftIsUnknown && rightIsUnknown)",
      "right" : "if (leftIsUnknown && rightIsUnknown)",
      "info" : "IfStatement[28678-29198]:IfStatement[28678-29198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28715-28752]:Block[28715-28752]"
    }, {
      "left" : "type = unknownType;",
      "right" : "type = unknownType;",
      "info" : "ExpressionStatement[28725-28744]:ExpressionStatement[28725-28744]"
    }, {
      "left" : "if ((!leftIsUnknown && leftType.isString()) ||\n                 (!rightIsUnknown && rightType.isString()))",
      "right" : "if ((!leftIsUnknown && leftType.isString()) ||\n                 (!rightIsUnknown && rightType.isString()))",
      "info" : "IfStatement[28758-29198]:IfStatement[28758-29198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28865-28917]:Block[28865-28917]"
    }, {
      "left" : "type = getNativeType(STRING_TYPE);",
      "right" : "type = getNativeType(STRING_TYPE);",
      "info" : "ExpressionStatement[28875-28909]:ExpressionStatement[28875-28909]"
    }, {
      "left" : "if (leftIsUnknown || rightIsUnknown)",
      "right" : "if (leftIsUnknown || rightIsUnknown)",
      "info" : "IfStatement[28923-29198]:IfStatement[28923-29198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28960-28997]:Block[28960-28997]"
    }, {
      "left" : "type = unknownType;",
      "right" : "type = unknownType;",
      "info" : "ExpressionStatement[28970-28989]:ExpressionStatement[28970-28989]"
    }, {
      "left" : "if (isAddedAsNumber(leftType) && isAddedAsNumber(rightType))",
      "right" : "if (isAddedAsNumber(leftType) && isAddedAsNumber(rightType))",
      "info" : "IfStatement[29003-29198]:IfStatement[29003-29198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29064-29116]:Block[29064-29116]"
    }, {
      "left" : "type = getNativeType(NUMBER_TYPE);",
      "right" : "type = getNativeType(NUMBER_TYPE);",
      "info" : "ExpressionStatement[29074-29108]:ExpressionStatement[29074-29108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29122-29198]:Block[29122-29198]"
    }, {
      "left" : "type = registry.createUnionType(STRING_TYPE, NUMBER_TYPE);",
      "right" : "type = registry.createUnionType(STRING_TYPE, NUMBER_TYPE);",
      "info" : "ExpressionStatement[29132-29190]:ExpressionStatement[29132-29190]"
    }, {
      "left" : "n.setJSType(type);",
      "right" : "n.setJSType(type);",
      "info" : "ExpressionStatement[29209-29227]:ExpressionStatement[29209-29227]"
    }, {
      "left" : "if (n.isAssignAdd())",
      "right" : "if (n.isAssignAdd())",
      "info" : "IfStatement[29233-29322]:IfStatement[29233-29322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29254-29322]:Block[29254-29322]"
    }, {
      "left" : "updateScopeForTypeChange(scope, left, leftType, type);",
      "right" : "updateScopeForTypeChange(scope, left, leftType, type);",
      "info" : "ExpressionStatement[29262-29316]:ExpressionStatement[29262-29316]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[29328-29341]:ReturnStatement[29328-29341]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29349-29356]:Modifier[29349-29356]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29357-29364]:PrimitiveType[29357-29364]"
    }, {
      "left" : "isAddedAsNumber",
      "right" : "isAddedAsNumber",
      "info" : "SimpleName[29365-29380]:SimpleName[29365-29380]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[29381-29392]:SingleVariableDeclaration[29381-29392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29394-29546]:Block[29394-29546]"
    }, {
      "left" : "return type.isSubtype(registry.createUnionType(VOID_TYPE, NULL_TYPE,\n        NUMBER_VALUE_OR_OBJECT_TYPE, BOOLEAN_TYPE, BOOLEAN_OBJECT_TYPE));",
      "right" : "return type.isSubtype(registry.createUnionType(VOID_TYPE, NULL_TYPE,\n        NUMBER_VALUE_OR_OBJECT_TYPE, BOOLEAN_TYPE, BOOLEAN_OBJECT_TYPE));",
      "info" : "ReturnStatement[29400-29542]:ReturnStatement[29400-29542]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29550-29557]:Modifier[29550-29557]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[29558-29567]:SimpleType[29558-29567]"
    }, {
      "left" : "traverseHook",
      "right" : "traverseHook",
      "info" : "SimpleName[29568-29580]:SimpleName[29568-29580]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[29581-29587]:SingleVariableDeclaration[29581-29587]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[29589-29604]:SingleVariableDeclaration[29589-29604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29606-30696]:Block[29606-30696]"
    }, {
      "left" : "Node condition = n.getFirstChild();",
      "right" : "Node condition = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[29612-29647]:VariableDeclarationStatement[29612-29647]"
    }, {
      "left" : "Node trueNode = condition.getNext();",
      "right" : "Node trueNode = condition.getNext();",
      "info" : "VariableDeclarationStatement[29652-29688]:VariableDeclarationStatement[29652-29688]"
    }, {
      "left" : "Node falseNode = n.getLastChild();",
      "right" : "Node falseNode = n.getLastChild();",
      "info" : "VariableDeclarationStatement[29693-29727]:VariableDeclarationStatement[29693-29727]"
    }, {
      "left" : "scope = traverse(condition, scope);",
      "right" : "scope = traverse(condition, scope);",
      "info" : "ExpressionStatement[29761-29796]:ExpressionStatement[29761-29796]"
    }, {
      "left" : "FlowScope trueScope = reverseInterpreter.\n        getPreciserScopeKnowingConditionOutcome(\n            condition, scope, true);",
      "right" : "FlowScope trueScope = reverseInterpreter.\n        getPreciserScopeKnowingConditionOutcome(\n            condition, scope, true);",
      "info" : "VariableDeclarationStatement[29876-30003]:VariableDeclarationStatement[29876-30003]"
    }, {
      "left" : "FlowScope falseScope = reverseInterpreter.\n        getPreciserScopeKnowingConditionOutcome(\n            condition, scope, false);",
      "right" : "FlowScope falseScope = reverseInterpreter.\n        getPreciserScopeKnowingConditionOutcome(\n            condition, scope, false);",
      "info" : "VariableDeclarationStatement[30008-30137]:VariableDeclarationStatement[30008-30137]"
    }, {
      "left" : "traverse(trueNode, trueScope.createChildFlowScope());",
      "right" : "traverse(trueNode, trueScope.createChildFlowScope());",
      "info" : "ExpressionStatement[30192-30245]:ExpressionStatement[30192-30245]"
    }, {
      "left" : "traverse(falseNode, falseScope.createChildFlowScope());",
      "right" : "traverse(falseNode, falseScope.createChildFlowScope());",
      "info" : "ExpressionStatement[30302-30357]:ExpressionStatement[30302-30357]"
    }, {
      "left" : "JSType trueType = trueNode.getJSType();",
      "right" : "JSType trueType = trueNode.getJSType();",
      "info" : "VariableDeclarationStatement[30414-30453]:VariableDeclarationStatement[30414-30453]"
    }, {
      "left" : "JSType falseType = falseNode.getJSType();",
      "right" : "JSType falseType = falseNode.getJSType();",
      "info" : "VariableDeclarationStatement[30458-30499]:VariableDeclarationStatement[30458-30499]"
    }, {
      "left" : "if (trueType != null && falseType != null)",
      "right" : "if (trueType != null && falseType != null)",
      "info" : "IfStatement[30504-30650]:IfStatement[30504-30650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30547-30612]:Block[30547-30612]"
    }, {
      "left" : "n.setJSType(trueType.getLeastSupertype(falseType));",
      "right" : "n.setJSType(trueType.getLeastSupertype(falseType));",
      "info" : "ExpressionStatement[30555-30606]:ExpressionStatement[30555-30606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30618-30650]:Block[30618-30650]"
    }, {
      "left" : "n.setJSType(null);",
      "right" : "n.setJSType(null);",
      "info" : "ExpressionStatement[30626-30644]:ExpressionStatement[30626-30644]"
    }, {
      "left" : "return scope.createChildFlowScope();",
      "right" : "return scope.createChildFlowScope();",
      "info" : "ReturnStatement[30656-30692]:ReturnStatement[30656-30692]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30700-30707]:Modifier[30700-30707]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[30708-30717]:SimpleType[30708-30717]"
    }, {
      "left" : "traverseCall",
      "right" : "traverseCall",
      "info" : "SimpleName[30718-30730]:SimpleName[30718-30730]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[30731-30737]:SingleVariableDeclaration[30731-30737]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[30739-30754]:SingleVariableDeclaration[30739-30754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30756-31332]:Block[30756-31332]"
    }, {
      "left" : "scope = traverseChildren(n, scope);",
      "right" : "scope = traverseChildren(n, scope);",
      "info" : "ExpressionStatement[30762-30797]:ExpressionStatement[30762-30797]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[30803-30833]:VariableDeclarationStatement[30803-30833]"
    }, {
      "left" : "JSType functionType = getJSType(left).restrictByNotNullOrUndefined();",
      "right" : "JSType functionType = getJSType(left).restrictByNotNullOrUndefined();",
      "info" : "VariableDeclarationStatement[30838-30907]:VariableDeclarationStatement[30838-30907]"
    }, {
      "left" : "if (functionType.isFunctionType())",
      "right" : "if (functionType.isFunctionType())",
      "info" : "IfStatement[30912-31258]:IfStatement[30912-31258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30947-31110]:Block[30947-31110]"
    }, {
      "left" : "FunctionType fnType = functionType.toMaybeFunctionType();",
      "right" : "FunctionType fnType = functionType.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[30955-31012]:VariableDeclarationStatement[30955-31012]"
    }, {
      "left" : "n.setJSType(fnType.getReturnType());",
      "right" : "n.setJSType(fnType.getReturnType());",
      "info" : "ExpressionStatement[31019-31055]:ExpressionStatement[31019-31055]"
    }, {
      "left" : "backwardsInferenceFromCallSite(n, fnType);",
      "right" : "backwardsInferenceFromCallSite(n, fnType);",
      "info" : "ExpressionStatement[31062-31104]:ExpressionStatement[31062-31104]"
    }, {
      "left" : "if (functionType.isEquivalentTo(\n        getNativeType(CHECKED_UNKNOWN_TYPE)))",
      "right" : "if (functionType.isEquivalentTo(\n        getNativeType(CHECKED_UNKNOWN_TYPE)))",
      "info" : "IfStatement[31116-31258]:IfStatement[31116-31258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31195-31258]:Block[31195-31258]"
    }, {
      "left" : "n.setJSType(getNativeType(CHECKED_UNKNOWN_TYPE));",
      "right" : "n.setJSType(getNativeType(CHECKED_UNKNOWN_TYPE));",
      "info" : "ExpressionStatement[31203-31252]:ExpressionStatement[31203-31252]"
    }, {
      "left" : "scope = tightenTypesAfterAssertions(scope, n);",
      "right" : "scope = tightenTypesAfterAssertions(scope, n);",
      "info" : "ExpressionStatement[31264-31310]:ExpressionStatement[31264-31310]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[31315-31328]:ReturnStatement[31315-31328]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31336-31343]:Modifier[31336-31343]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[31344-31353]:SimpleType[31344-31353]"
    }, {
      "left" : "tightenTypesAfterAssertions",
      "right" : "tightenTypesAfterAssertions",
      "info" : "SimpleName[31354-31381]:SimpleName[31354-31381]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[31382-31397]:SingleVariableDeclaration[31382-31397]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[31405-31418]:SingleVariableDeclaration[31405-31418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31420-32793]:Block[31420-32793]"
    }, {
      "left" : "Node left = callNode.getFirstChild();",
      "right" : "Node left = callNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[31426-31463]:VariableDeclarationStatement[31426-31463]"
    }, {
      "left" : "Node firstParam = left.getNext();",
      "right" : "Node firstParam = left.getNext();",
      "info" : "VariableDeclarationStatement[31468-31501]:VariableDeclarationStatement[31468-31501]"
    }, {
      "left" : "AssertionFunctionSpec assertionFunctionSpec =\n        assertionFunctionsMap.get(left.getQualifiedName());",
      "right" : "AssertionFunctionSpec assertionFunctionSpec =\n        assertionFunctionsMap.get(left.getQualifiedName());",
      "info" : "VariableDeclarationStatement[31506-31611]:VariableDeclarationStatement[31506-31611]"
    }, {
      "left" : "if (assertionFunctionSpec == null || firstParam == null)",
      "right" : "if (assertionFunctionSpec == null || firstParam == null)",
      "info" : "IfStatement[31616-31700]:IfStatement[31616-31700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31673-31700]:Block[31673-31700]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[31681-31694]:ReturnStatement[31681-31694]"
    }, {
      "left" : "Node assertedNode = assertionFunctionSpec.getAssertedParam(firstParam);",
      "right" : "Node assertedNode = assertionFunctionSpec.getAssertedParam(firstParam);",
      "info" : "VariableDeclarationStatement[31705-31776]:VariableDeclarationStatement[31705-31776]"
    }, {
      "left" : "if (assertedNode == null)",
      "right" : "if (assertedNode == null)",
      "info" : "IfStatement[31781-31834]:IfStatement[31781-31834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31807-31834]:Block[31807-31834]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[31815-31828]:ReturnStatement[31815-31828]"
    }, {
      "left" : "JSType assertedType = assertionFunctionSpec.getAssertedType(\n        callNode, registry);",
      "right" : "JSType assertedType = assertionFunctionSpec.getAssertedType(\n        callNode, registry);",
      "info" : "VariableDeclarationStatement[31839-31928]:VariableDeclarationStatement[31839-31928]"
    }, {
      "left" : "String assertedNodeName = assertedNode.getQualifiedName();",
      "right" : "String assertedNodeName = assertedNode.getQualifiedName();",
      "info" : "VariableDeclarationStatement[31933-31991]:VariableDeclarationStatement[31933-31991]"
    }, {
      "left" : "JSType narrowed;",
      "right" : "JSType narrowed;",
      "info" : "VariableDeclarationStatement[31997-32013]:VariableDeclarationStatement[31997-32013]"
    }, {
      "left" : "if (assertedType == null)",
      "right" : "if (assertedType == null)",
      "info" : "IfStatement[32086-32736]:IfStatement[32086-32736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32112-32411]:Block[32112-32411]"
    }, {
      "left" : "scope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n          assertedNode, scope, true);",
      "right" : "scope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n          assertedNode, scope, true);",
      "info" : "ExpressionStatement[32177-32282]:ExpressionStatement[32177-32282]"
    }, {
      "left" : "narrowed = getJSType(assertedNode).restrictByNotNullOrUndefined();",
      "right" : "narrowed = getJSType(assertedNode).restrictByNotNullOrUndefined();",
      "info" : "ExpressionStatement[32339-32405]:ExpressionStatement[32339-32405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32417-32736]:Block[32417-32736]"
    }, {
      "left" : "JSType type = getJSType(assertedNode);",
      "right" : "JSType type = getJSType(assertedNode);",
      "info" : "VariableDeclarationStatement[32500-32538]:VariableDeclarationStatement[32500-32538]"
    }, {
      "left" : "narrowed = type.getGreatestSubtype(assertedType);",
      "right" : "narrowed = type.getGreatestSubtype(assertedType);",
      "info" : "ExpressionStatement[32545-32594]:ExpressionStatement[32545-32594]"
    }, {
      "left" : "if (assertedNodeName != null && type.differsFrom(narrowed))",
      "right" : "if (assertedNodeName != null && type.differsFrom(narrowed))",
      "info" : "IfStatement[32601-32730]:IfStatement[32601-32730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32661-32730]:Block[32661-32730]"
    }, {
      "left" : "scope = narrowScope(scope, assertedNode, narrowed);",
      "right" : "scope = narrowScope(scope, assertedNode, narrowed);",
      "info" : "ExpressionStatement[32671-32722]:ExpressionStatement[32671-32722]"
    }, {
      "left" : "callNode.setJSType(narrowed);",
      "right" : "callNode.setJSType(narrowed);",
      "info" : "ExpressionStatement[32742-32771]:ExpressionStatement[32742-32771]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[32776-32789]:ReturnStatement[32776-32789]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32797-32804]:Modifier[32797-32804]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[32805-32814]:SimpleType[32805-32814]"
    }, {
      "left" : "narrowScope",
      "right" : "narrowScope",
      "info" : "SimpleName[32815-32826]:SimpleName[32815-32826]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[32827-32842]:SingleVariableDeclaration[32827-32842]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[32844-32853]:SingleVariableDeclaration[32844-32853]"
    }, {
      "left" : "JSType narrowed",
      "right" : "JSType narrowed",
      "info" : "SingleVariableDeclaration[32855-32870]:SingleVariableDeclaration[32855-32870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32872-33265]:Block[32872-33265]"
    }, {
      "left" : "if (node.isThis())",
      "right" : "if (node.isThis())",
      "info" : "IfStatement[32878-33003]:IfStatement[32878-33003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32897-33003]:Block[32897-33003]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[32984-32997]:ReturnStatement[32984-32997]"
    }, {
      "left" : "scope = scope.createChildFlowScope();",
      "right" : "scope = scope.createChildFlowScope();",
      "info" : "ExpressionStatement[33009-33046]:ExpressionStatement[33009-33046]"
    }, {
      "left" : "if (node.isGetProp())",
      "right" : "if (node.isGetProp())",
      "info" : "IfStatement[33051-33243]:IfStatement[33051-33243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33073-33181]:Block[33073-33181]"
    }, {
      "left" : "scope.inferQualifiedSlot(\n          node, node.getQualifiedName(), getJSType(node), narrowed);",
      "right" : "scope.inferQualifiedSlot(\n          node, node.getQualifiedName(), getJSType(node), narrowed);",
      "info" : "ExpressionStatement[33081-33175]:ExpressionStatement[33081-33175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33187-33243]:Block[33187-33243]"
    }, {
      "left" : "redeclareSimpleVar(scope, node, narrowed);",
      "right" : "redeclareSimpleVar(scope, node, narrowed);",
      "info" : "ExpressionStatement[33195-33237]:ExpressionStatement[33195-33237]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[33248-33261]:ReturnStatement[33248-33261]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34191-34198]:Modifier[34191-34198]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34199-34203]:PrimitiveType[34199-34203]"
    }, {
      "left" : "backwardsInferenceFromCallSite",
      "right" : "backwardsInferenceFromCallSite",
      "info" : "SimpleName[34204-34234]:SimpleName[34204-34234]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[34235-34241]:SingleVariableDeclaration[34235-34241]"
    }, {
      "left" : "FunctionType fnType",
      "right" : "FunctionType fnType",
      "info" : "SingleVariableDeclaration[34243-34262]:SingleVariableDeclaration[34243-34262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34264-34493]:Block[34264-34493]"
    }, {
      "left" : "boolean updatedFnType = inferTemplatedTypesForCall(n, fnType);",
      "right" : "boolean updatedFnType = inferTemplatedTypesForCall(n, fnType);",
      "info" : "VariableDeclarationStatement[34270-34332]:VariableDeclarationStatement[34270-34332]"
    }, {
      "left" : "if (updatedFnType)",
      "right" : "if (updatedFnType)",
      "info" : "IfStatement[34337-34431]:IfStatement[34337-34431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34356-34431]:Block[34356-34431]"
    }, {
      "left" : "fnType = n.getFirstChild().getJSType().toMaybeFunctionType();",
      "right" : "fnType = n.getFirstChild().getJSType().toMaybeFunctionType();",
      "info" : "ExpressionStatement[34364-34425]:ExpressionStatement[34364-34425]"
    }, {
      "left" : "updateTypeOfParameters(n, fnType);",
      "right" : "updateTypeOfParameters(n, fnType);",
      "info" : "ExpressionStatement[34436-34470]:ExpressionStatement[34436-34470]"
    }, {
      "left" : "updateBind(n);",
      "right" : "updateBind(n);",
      "info" : "ExpressionStatement[34475-34489]:ExpressionStatement[34475-34489]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34664-34671]:Modifier[34664-34671]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34672-34676]:PrimitiveType[34672-34676]"
    }, {
      "left" : "updateBind",
      "right" : "updateBind",
      "info" : "SimpleName[34677-34687]:SimpleName[34677-34687]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[34688-34694]:SingleVariableDeclaration[34688-34694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34696-35203]:Block[34696-35203]"
    }, {
      "left" : "CodingConvention.Bind bind =\n        compiler.getCodingConvention().describeFunctionBind(n, true);",
      "right" : "CodingConvention.Bind bind =\n        compiler.getCodingConvention().describeFunctionBind(n, true);",
      "info" : "VariableDeclarationStatement[34702-34800]:VariableDeclarationStatement[34702-34800]"
    }, {
      "left" : "if (bind == null)",
      "right" : "if (bind == null)",
      "info" : "IfStatement[34805-34844]:IfStatement[34805-34844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34823-34844]:Block[34823-34844]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[34831-34838]:ReturnStatement[34831-34838]"
    }, {
      "left" : "FunctionType callTargetFn = getJSType(bind.target)\n        .restrictByNotNullOrUndefined().toMaybeFunctionType();",
      "right" : "FunctionType callTargetFn = getJSType(bind.target)\n        .restrictByNotNullOrUndefined().toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[34850-34963]:VariableDeclarationStatement[34850-34963]"
    }, {
      "left" : "if (callTargetFn == null)",
      "right" : "if (callTargetFn == null)",
      "info" : "IfStatement[34968-35015]:IfStatement[34968-35015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34994-35015]:Block[34994-35015]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[35002-35009]:ReturnStatement[35002-35009]"
    }, {
      "left" : "n.setJSType(\n        callTargetFn.getBindReturnType(\n            // getBindReturnType expects the 'this' argument to be included.\n            bind.getBoundParameterCount() + 1));",
      "right" : "n.setJSType(\n        callTargetFn.getBindReturnType(\n            // getBindReturnType expects the 'this' argument to be included.\n            bind.getBoundParameterCount() + 1));",
      "info" : "ExpressionStatement[35021-35199]:ExpressionStatement[35021-35199]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35367-35374]:Modifier[35367-35374]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[35375-35379]:PrimitiveType[35375-35379]"
    }, {
      "left" : "updateTypeOfParameters",
      "right" : "updateTypeOfParameters",
      "info" : "SimpleName[35380-35402]:SimpleName[35380-35402]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[35403-35409]:SingleVariableDeclaration[35403-35409]"
    }, {
      "left" : "FunctionType fnType",
      "right" : "FunctionType fnType",
      "info" : "SingleVariableDeclaration[35411-35430]:SingleVariableDeclaration[35411-35430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35432-36428]:Block[35432-36428]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[35438-35448]:VariableDeclarationStatement[35438-35448]"
    }, {
      "left" : "int childCount = n.getChildCount();",
      "right" : "int childCount = n.getChildCount();",
      "info" : "VariableDeclarationStatement[35453-35488]:VariableDeclarationStatement[35453-35488]"
    }, {
      "left" : "for (Node iParameter : fnType.getParameters())",
      "right" : "for (Node iParameter : fnType.getParameters())",
      "info" : "EnhancedForStatement[35493-36424]:EnhancedForStatement[35493-36424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35540-36424]:Block[35540-36424]"
    }, {
      "left" : "if (i + 1 >= childCount)",
      "right" : "if (i + 1 >= childCount)",
      "info" : "IfStatement[35548-35661]:IfStatement[35548-35661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35573-35661]:Block[35573-35661]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[35646-35653]:ReturnStatement[35646-35653]"
    }, {
      "left" : "JSType iParameterType = getJSType(iParameter);",
      "right" : "JSType iParameterType = getJSType(iParameter);",
      "info" : "VariableDeclarationStatement[35669-35715]:VariableDeclarationStatement[35669-35715]"
    }, {
      "left" : "Node iArgument = n.getChildAtIndex(i + 1);",
      "right" : "Node iArgument = n.getChildAtIndex(i + 1);",
      "info" : "VariableDeclarationStatement[35722-35764]:VariableDeclarationStatement[35722-35764]"
    }, {
      "left" : "JSType iArgumentType = getJSType(iArgument);",
      "right" : "JSType iArgumentType = getJSType(iArgument);",
      "info" : "VariableDeclarationStatement[35771-35815]:VariableDeclarationStatement[35771-35815]"
    }, {
      "left" : "inferPropertyTypesToMatchConstraint(iArgumentType, iParameterType);",
      "right" : "inferPropertyTypesToMatchConstraint(iArgumentType, iParameterType);",
      "info" : "ExpressionStatement[35822-35889]:ExpressionStatement[35822-35889]"
    }, {
      "left" : "JSType restrictedParameter = iParameterType\n          .restrictByNotNullOrUndefined()\n          .toMaybeFunctionType();",
      "right" : "JSType restrictedParameter = iParameterType\n          .restrictByNotNullOrUndefined()\n          .toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[36045-36164]:VariableDeclarationStatement[36045-36164]"
    }, {
      "left" : "if (restrictedParameter != null)",
      "right" : "if (restrictedParameter != null)",
      "info" : "IfStatement[36171-36407]:IfStatement[36171-36407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36204-36407]:Block[36204-36407]"
    }, {
      "left" : "if (iArgument.isFunction() &&\n            iArgumentType.isFunctionType() &&\n            iArgument.getJSDocInfo() == null)",
      "right" : "if (iArgument.isFunction() &&\n            iArgumentType.isFunctionType() &&\n            iArgument.getJSDocInfo() == null)",
      "info" : "IfStatement[36214-36399]:IfStatement[36214-36399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36336-36399]:Block[36336-36399]"
    }, {
      "left" : "iArgument.setJSType(restrictedParameter);",
      "right" : "iArgument.setJSType(restrictedParameter);",
      "info" : "ExpressionStatement[36348-36389]:ExpressionStatement[36348-36389]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[36414-36418]:ExpressionStatement[36414-36418]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36432-36439]:Modifier[36432-36439]"
    }, {
      "left" : "Map<TemplateType, JSType>",
      "right" : "Map<TemplateType, JSType>",
      "info" : "ParameterizedType[36440-36465]:ParameterizedType[36440-36465]"
    }, {
      "left" : "inferTemplateTypesFromParameters",
      "right" : "inferTemplateTypesFromParameters",
      "info" : "SimpleName[36466-36498]:SimpleName[36466-36498]"
    }, {
      "left" : "FunctionType fnType",
      "right" : "FunctionType fnType",
      "info" : "SingleVariableDeclaration[36506-36525]:SingleVariableDeclaration[36506-36525]"
    }, {
      "left" : "Node call",
      "right" : "Node call",
      "info" : "SingleVariableDeclaration[36527-36536]:SingleVariableDeclaration[36527-36536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36538-37198]:Block[36538-37198]"
    }, {
      "left" : "if (fnType.getTemplateTypeMap().getTemplateKeys().isEmpty())",
      "right" : "if (fnType.getTemplateTypeMap().getTemplateKeys().isEmpty())",
      "info" : "IfStatement[36544-36649]:IfStatement[36544-36649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36605-36649]:Block[36605-36649]"
    }, {
      "left" : "return Collections.emptyMap();",
      "right" : "return Collections.emptyMap();",
      "info" : "ReturnStatement[36613-36643]:ReturnStatement[36613-36643]"
    }, {
      "left" : "Map<TemplateType, JSType> resolvedTypes = Maps.newIdentityHashMap();",
      "right" : "Map<TemplateType, JSType> resolvedTypes = Maps.newIdentityHashMap();",
      "info" : "VariableDeclarationStatement[36655-36723]:VariableDeclarationStatement[36655-36723]"
    }, {
      "left" : "Node callTarget = call.getFirstChild();",
      "right" : "Node callTarget = call.getFirstChild();",
      "info" : "VariableDeclarationStatement[36729-36768]:VariableDeclarationStatement[36729-36768]"
    }, {
      "left" : "if (NodeUtil.isGet(callTarget))",
      "right" : "if (NodeUtil.isGet(callTarget))",
      "info" : "IfStatement[36773-36976]:IfStatement[36773-36976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36805-36976]:Block[36805-36976]"
    }, {
      "left" : "Node obj = callTarget.getFirstChild();",
      "right" : "Node obj = callTarget.getFirstChild();",
      "info" : "VariableDeclarationStatement[36813-36851]:VariableDeclarationStatement[36813-36851]"
    }, {
      "left" : "maybeResolveTemplatedType(\n          fnType.getTypeOfThis(),\n          getJSType(obj),\n          resolvedTypes);",
      "right" : "maybeResolveTemplatedType(\n          fnType.getTypeOfThis(),\n          getJSType(obj),\n          resolvedTypes);",
      "info" : "ExpressionStatement[36858-36970]:ExpressionStatement[36858-36970]"
    }, {
      "left" : "if (call.hasMoreThanOneChild())",
      "right" : "if (call.hasMoreThanOneChild())",
      "info" : "IfStatement[36982-37168]:IfStatement[36982-37168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37014-37168]:Block[37014-37168]"
    }, {
      "left" : "maybeResolveTemplateTypeFromNodes(\n          fnType.getParameters(),\n          call.getChildAtIndex(1).siblings(),\n          resolvedTypes);",
      "right" : "maybeResolveTemplateTypeFromNodes(\n          fnType.getParameters(),\n          call.getChildAtIndex(1).siblings(),\n          resolvedTypes);",
      "info" : "ExpressionStatement[37022-37162]:ExpressionStatement[37022-37162]"
    }, {
      "left" : "return resolvedTypes;",
      "right" : "return resolvedTypes;",
      "info" : "ReturnStatement[37173-37194]:ReturnStatement[37173-37194]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37202-37209]:Modifier[37202-37209]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[37210-37214]:PrimitiveType[37210-37214]"
    }, {
      "left" : "maybeResolveTemplatedType",
      "right" : "maybeResolveTemplatedType",
      "info" : "SimpleName[37215-37240]:SimpleName[37215-37240]"
    }, {
      "left" : "JSType paramType",
      "right" : "JSType paramType",
      "info" : "SingleVariableDeclaration[37248-37264]:SingleVariableDeclaration[37248-37264]"
    }, {
      "left" : "JSType argType",
      "right" : "JSType argType",
      "info" : "SingleVariableDeclaration[37272-37286]:SingleVariableDeclaration[37272-37286]"
    }, {
      "left" : "Map<TemplateType, JSType> resolvedTypes",
      "right" : "Map<TemplateType, JSType> resolvedTypes",
      "info" : "SingleVariableDeclaration[37294-37333]:SingleVariableDeclaration[37294-37333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37335-39647]:Block[37335-39647]"
    }, {
      "left" : "if (paramType.isTemplateType())",
      "right" : "if (paramType.isTemplateType())",
      "info" : "IfStatement[37341-39643]:IfStatement[37341-39643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37373-37496]:Block[37373-37496]"
    }, {
      "left" : "resolvedTemplateType(\n          resolvedTypes, paramType.toMaybeTemplateType(), argType);",
      "right" : "resolvedTemplateType(\n          resolvedTypes, paramType.toMaybeTemplateType(), argType);",
      "info" : "ExpressionStatement[37401-37490]:ExpressionStatement[37401-37490]"
    }, {
      "left" : "if (paramType.isUnionType())",
      "right" : "if (paramType.isUnionType())",
      "info" : "IfStatement[37502-39643]:IfStatement[37502-39643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37531-37798]:Block[37531-37798]"
    }, {
      "left" : "UnionType unionType = paramType.toMaybeUnionType();",
      "right" : "UnionType unionType = paramType.toMaybeUnionType();",
      "info" : "VariableDeclarationStatement[37602-37653]:VariableDeclarationStatement[37602-37653]"
    }, {
      "left" : "for (JSType alernative : unionType.getAlternates())",
      "right" : "for (JSType alernative : unionType.getAlternates())",
      "info" : "EnhancedForStatement[37660-37792]:EnhancedForStatement[37660-37792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37712-37792]:Block[37712-37792]"
    }, {
      "left" : "maybeResolveTemplatedType(alernative, argType, resolvedTypes);",
      "right" : "maybeResolveTemplatedType(alernative, argType, resolvedTypes);",
      "info" : "ExpressionStatement[37722-37784]:ExpressionStatement[37722-37784]"
    }, {
      "left" : "if (paramType.isFunctionType())",
      "right" : "if (paramType.isFunctionType())",
      "info" : "IfStatement[37804-39643]:IfStatement[37804-39643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37836-38754]:Block[37836-38754]"
    }, {
      "left" : "FunctionType paramFunctionType = paramType.toMaybeFunctionType();",
      "right" : "FunctionType paramFunctionType = paramType.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[37844-37909]:VariableDeclarationStatement[37844-37909]"
    }, {
      "left" : "FunctionType argFunctionType = argType\n          .restrictByNotNullOrUndefined()\n          .collapseUnion()\n          .toMaybeFunctionType();",
      "right" : "FunctionType argFunctionType = argType\n          .restrictByNotNullOrUndefined()\n          .collapseUnion()\n          .toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[37916-38057]:VariableDeclarationStatement[37916-38057]"
    }, {
      "left" : "if (argFunctionType != null && argFunctionType.isSubtype(paramType))",
      "right" : "if (argFunctionType != null && argFunctionType.isSubtype(paramType))",
      "info" : "IfStatement[38064-38748]:IfStatement[38064-38748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38133-38748]:Block[38133-38748]"
    }, {
      "left" : "maybeResolveTemplatedType(\n            paramFunctionType.getTypeOfThis(),\n            argFunctionType.getTypeOfThis(), resolvedTypes);",
      "right" : "maybeResolveTemplatedType(\n            paramFunctionType.getTypeOfThis(),\n            argFunctionType.getTypeOfThis(), resolvedTypes);",
      "info" : "ExpressionStatement[38198-38332]:ExpressionStatement[38198-38332]"
    }, {
      "left" : "maybeResolveTemplatedType(\n            paramFunctionType.getReturnType(),\n            argFunctionType.getReturnType(), resolvedTypes);",
      "right" : "maybeResolveTemplatedType(\n            paramFunctionType.getReturnType(),\n            argFunctionType.getReturnType(), resolvedTypes);",
      "info" : "ExpressionStatement[38396-38530]:ExpressionStatement[38396-38530]"
    }, {
      "left" : "maybeResolveTemplateTypeFromNodes(\n            paramFunctionType.getParameters(),\n            argFunctionType.getParameters(), resolvedTypes);",
      "right" : "maybeResolveTemplateTypeFromNodes(\n            paramFunctionType.getParameters(),\n            argFunctionType.getParameters(), resolvedTypes);",
      "info" : "ExpressionStatement[38598-38740]:ExpressionStatement[38598-38740]"
    }, {
      "left" : "if (paramType.isTemplatizedType())",
      "right" : "if (paramType.isTemplatizedType())",
      "info" : "IfStatement[38760-39643]:IfStatement[38760-39643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38795-39643]:Block[38795-39643]"
    }, {
      "left" : "ObjectType referencedParamType = paramType\n          .toMaybeTemplatizedType()\n          .getReferencedType();",
      "right" : "ObjectType referencedParamType = paramType\n          .toMaybeTemplatizedType()\n          .getReferencedType();",
      "info" : "VariableDeclarationStatement[38831-38941]:VariableDeclarationStatement[38831-38941]"
    }, {
      "left" : "JSType argObjectType = argType\n          .restrictByNotNullOrUndefined()\n          .collapseUnion();",
      "right" : "JSType argObjectType = argType\n          .restrictByNotNullOrUndefined()\n          .collapseUnion();",
      "info" : "VariableDeclarationStatement[38948-39048]:VariableDeclarationStatement[38948-39048]"
    }, {
      "left" : "if (argObjectType.isSubtype(referencedParamType))",
      "right" : "if (argObjectType.isSubtype(referencedParamType))",
      "info" : "IfStatement[39056-39637]:IfStatement[39056-39637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39106-39637]:Block[39106-39637]"
    }, {
      "left" : "TemplateTypeMap paramTypeMap = paramType.getTemplateTypeMap();",
      "right" : "TemplateTypeMap paramTypeMap = paramType.getTemplateTypeMap();",
      "info" : "VariableDeclarationStatement[39255-39317]:VariableDeclarationStatement[39255-39317]"
    }, {
      "left" : "TemplateTypeMap argTypeMap = argObjectType.getTemplateTypeMap();",
      "right" : "TemplateTypeMap argTypeMap = argObjectType.getTemplateTypeMap();",
      "info" : "VariableDeclarationStatement[39326-39390]:VariableDeclarationStatement[39326-39390]"
    }, {
      "left" : "for (TemplateType key : paramTypeMap.getTemplateKeys())",
      "right" : "for (TemplateType key : paramTypeMap.getTemplateKeys())",
      "info" : "EnhancedForStatement[39399-39629]:EnhancedForStatement[39399-39629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39455-39629]:Block[39455-39629]"
    }, {
      "left" : "maybeResolveTemplatedType(\n              paramTypeMap.getTemplateType(key),\n              argTypeMap.getTemplateType(key),\n              resolvedTypes);",
      "right" : "maybeResolveTemplatedType(\n              paramTypeMap.getTemplateType(key),\n              argTypeMap.getTemplateType(key),\n              resolvedTypes);",
      "info" : "ExpressionStatement[39467-39619]:ExpressionStatement[39467-39619]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[39651-39658]:Modifier[39651-39658]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[39659-39663]:PrimitiveType[39659-39663]"
    }, {
      "left" : "maybeResolveTemplateTypeFromNodes",
      "right" : "maybeResolveTemplateTypeFromNodes",
      "info" : "SimpleName[39664-39697]:SimpleName[39664-39697]"
    }, {
      "left" : "Iterable<Node> declParams",
      "right" : "Iterable<Node> declParams",
      "info" : "SingleVariableDeclaration[39705-39730]:SingleVariableDeclaration[39705-39730]"
    }, {
      "left" : "Iterable<Node> callParams",
      "right" : "Iterable<Node> callParams",
      "info" : "SingleVariableDeclaration[39738-39763]:SingleVariableDeclaration[39738-39763]"
    }, {
      "left" : "Map<TemplateType, JSType> resolvedTypes",
      "right" : "Map<TemplateType, JSType> resolvedTypes",
      "info" : "SingleVariableDeclaration[39771-39810]:SingleVariableDeclaration[39771-39810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39812-39926]:Block[39812-39926]"
    }, {
      "left" : "maybeResolveTemplateTypeFromNodes(\n        declParams.iterator(), callParams.iterator(), resolvedTypes);",
      "right" : "maybeResolveTemplateTypeFromNodes(\n        declParams.iterator(), callParams.iterator(), resolvedTypes);",
      "info" : "ExpressionStatement[39818-39922]:ExpressionStatement[39818-39922]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[39930-39937]:Modifier[39930-39937]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[39938-39942]:PrimitiveType[39938-39942]"
    }, {
      "left" : "maybeResolveTemplateTypeFromNodes",
      "right" : "maybeResolveTemplateTypeFromNodes",
      "info" : "SimpleName[39943-39976]:SimpleName[39943-39976]"
    }, {
      "left" : "Iterator<Node> declParams",
      "right" : "Iterator<Node> declParams",
      "info" : "SingleVariableDeclaration[39984-40009]:SingleVariableDeclaration[39984-40009]"
    }, {
      "left" : "Iterator<Node> callParams",
      "right" : "Iterator<Node> callParams",
      "info" : "SingleVariableDeclaration[40017-40042]:SingleVariableDeclaration[40017-40042]"
    }, {
      "left" : "Map<TemplateType, JSType> resolvedTypes",
      "right" : "Map<TemplateType, JSType> resolvedTypes",
      "info" : "SingleVariableDeclaration[40050-40089]:SingleVariableDeclaration[40050-40089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40091-40573]:Block[40091-40573]"
    }, {
      "left" : "while (declParams.hasNext() && callParams.hasNext())",
      "right" : "while (declParams.hasNext() && callParams.hasNext())",
      "info" : "WhileStatement[40097-40569]:WhileStatement[40097-40569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40150-40569]:Block[40150-40569]"
    }, {
      "left" : "Node declParam = declParams.next();",
      "right" : "Node declParam = declParams.next();",
      "info" : "VariableDeclarationStatement[40158-40193]:VariableDeclarationStatement[40158-40193]"
    }, {
      "left" : "maybeResolveTemplatedType(\n          getJSType(declParam),\n          getJSType(callParams.next()),\n          resolvedTypes);",
      "right" : "maybeResolveTemplatedType(\n          getJSType(declParam),\n          getJSType(callParams.next()),\n          resolvedTypes);",
      "info" : "ExpressionStatement[40200-40324]:ExpressionStatement[40200-40324]"
    }, {
      "left" : "if (declParam.isVarArgs())",
      "right" : "if (declParam.isVarArgs())",
      "info" : "IfStatement[40331-40563]:IfStatement[40331-40563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40358-40563]:Block[40358-40563]"
    }, {
      "left" : "while (callParams.hasNext())",
      "right" : "while (callParams.hasNext())",
      "info" : "WhileStatement[40368-40555]:WhileStatement[40368-40555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40397-40555]:Block[40397-40555]"
    }, {
      "left" : "maybeResolveTemplatedType(\n              getJSType(declParam),\n              getJSType(callParams.next()),\n              resolvedTypes);",
      "right" : "maybeResolveTemplatedType(\n              getJSType(declParam),\n              getJSType(callParams.next()),\n              resolvedTypes);",
      "info" : "ExpressionStatement[40409-40545]:ExpressionStatement[40409-40545]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[40577-40584]:Modifier[40577-40584]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[40585-40591]:Modifier[40585-40591]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[40592-40596]:PrimitiveType[40592-40596]"
    }, {
      "left" : "resolvedTemplateType",
      "right" : "resolvedTemplateType",
      "info" : "SimpleName[40597-40617]:SimpleName[40597-40617]"
    }, {
      "left" : "Map<TemplateType, JSType> map",
      "right" : "Map<TemplateType, JSType> map",
      "info" : "SingleVariableDeclaration[40625-40654]:SingleVariableDeclaration[40625-40654]"
    }, {
      "left" : "TemplateType template",
      "right" : "TemplateType template",
      "info" : "SingleVariableDeclaration[40656-40677]:SingleVariableDeclaration[40656-40677]"
    }, {
      "left" : "JSType resolved",
      "right" : "JSType resolved",
      "info" : "SingleVariableDeclaration[40679-40694]:SingleVariableDeclaration[40679-40694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40696-40968]:Block[40696-40968]"
    }, {
      "left" : "JSType previous = map.get(template);",
      "right" : "JSType previous = map.get(template);",
      "info" : "VariableDeclarationStatement[40702-40738]:VariableDeclarationStatement[40702-40738]"
    }, {
      "left" : "if (!resolved.isUnknownType())",
      "right" : "if (!resolved.isUnknownType())",
      "info" : "IfStatement[40743-40964]:IfStatement[40743-40964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40774-40964]:Block[40774-40964]"
    }, {
      "left" : "if (previous == null)",
      "right" : "if (previous == null)",
      "info" : "IfStatement[40782-40958]:IfStatement[40782-40958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40804-40850]:Block[40804-40850]"
    }, {
      "left" : "map.put(template, resolved);",
      "right" : "map.put(template, resolved);",
      "info" : "ExpressionStatement[40814-40842]:ExpressionStatement[40814-40842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40856-40958]:Block[40856-40958]"
    }, {
      "left" : "JSType join = previous.getLeastSupertype(resolved);",
      "right" : "JSType join = previous.getLeastSupertype(resolved);",
      "info" : "VariableDeclarationStatement[40866-40917]:VariableDeclarationStatement[40866-40917]"
    }, {
      "left" : "map.put(template, join);",
      "right" : "map.put(template, join);",
      "info" : "ExpressionStatement[40926-40950]:ExpressionStatement[40926-40950]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[40972-40979]:Modifier[40972-40979]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[40980-40986]:Modifier[40980-40986]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[40987-40992]:TYPE_DECLARATION_KIND[40987-40992]"
    }, {
      "left" : "TemplateTypeReplacer",
      "right" : "TemplateTypeReplacer",
      "info" : "SimpleName[40993-41013]:SimpleName[40993-41013]"
    }, {
      "left" : "ModificationVisitor",
      "right" : "ModificationVisitor",
      "info" : "SimpleType[41022-41041]:SimpleType[41022-41041]"
    }, {
      "left" : "TemplateTypeReplacer",
      "right" : "TemplateTypeReplacer",
      "info" : "SimpleName[41183-41203]:SimpleName[41183-41203]"
    }, {
      "left" : "JSTypeRegistry registry",
      "right" : "JSTypeRegistry registry",
      "info" : "SingleVariableDeclaration[41213-41236]:SingleVariableDeclaration[41213-41236]"
    }, {
      "left" : "Map<TemplateType, JSType> replacements",
      "right" : "Map<TemplateType, JSType> replacements",
      "info" : "SingleVariableDeclaration[41238-41276]:SingleVariableDeclaration[41238-41276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41278-41380]:Block[41278-41380]"
    }, {
      "left" : "super(registry);",
      "right" : "super(registry);",
      "info" : "SuperConstructorInvocation[41286-41302]:SuperConstructorInvocation[41286-41302]"
    }, {
      "left" : "this.registry = registry;",
      "right" : "this.registry = registry;",
      "info" : "ExpressionStatement[41309-41334]:ExpressionStatement[41309-41334]"
    }, {
      "left" : "this.replacements = replacements;",
      "right" : "this.replacements = replacements;",
      "info" : "ExpressionStatement[41341-41374]:ExpressionStatement[41341-41374]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[41386-41395]:MarkerAnnotation[41386-41395]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[41400-41406]:Modifier[41400-41406]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[41407-41413]:SimpleType[41407-41413]"
    }, {
      "left" : "caseTemplateType",
      "right" : "caseTemplateType",
      "info" : "SimpleName[41414-41430]:SimpleName[41414-41430]"
    }, {
      "left" : "TemplateType type",
      "right" : "TemplateType type",
      "info" : "SingleVariableDeclaration[41431-41448]:SingleVariableDeclaration[41431-41448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41450-41631]:Block[41450-41631]"
    }, {
      "left" : "madeChanges = true;",
      "right" : "madeChanges = true;",
      "info" : "ExpressionStatement[41458-41477]:ExpressionStatement[41458-41477]"
    }, {
      "left" : "JSType replacement = replacements.get(type);",
      "right" : "JSType replacement = replacements.get(type);",
      "info" : "VariableDeclarationStatement[41484-41528]:VariableDeclarationStatement[41484-41528]"
    }, {
      "left" : "return replacement != null ?\n          replacement : registry.getNativeType(UNKNOWN_TYPE);",
      "right" : "return replacement != null ?\n          replacement : registry.getNativeType(UNKNOWN_TYPE);",
      "info" : "ReturnStatement[41535-41625]:ReturnStatement[41535-41625]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[41830-41837]:Modifier[41830-41837]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[41838-41845]:PrimitiveType[41838-41845]"
    }, {
      "left" : "inferTemplatedTypesForCall",
      "right" : "inferTemplatedTypesForCall",
      "info" : "SimpleName[41846-41872]:SimpleName[41846-41872]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[41880-41886]:SingleVariableDeclaration[41880-41886]"
    }, {
      "left" : "FunctionType fnType",
      "right" : "FunctionType fnType",
      "info" : "SingleVariableDeclaration[41888-41907]:SingleVariableDeclaration[41888-41907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41909-42717]:Block[41909-42907]"
    }, {
      "left" : "final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()\n        .getTemplateKeys();",
      "right" : "final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()\n        .getTemplateKeys();",
      "info" : "VariableDeclarationStatement[41915-42011]:VariableDeclarationStatement[41915-42011]"
    }, {
      "left" : "if (keys.isEmpty())",
      "right" : "if (keys.isEmpty())",
      "info" : "IfStatement[42016-42063]:IfStatement[42016-42063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42036-42063]:Block[42036-42063]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[42044-42057]:ReturnStatement[42044-42057]"
    }, {
      "left" : "Map<TemplateType, JSType> inferred = \n        inferTemplateTypesFromParameters(fnType, n);",
      "right" : "Map<TemplateType, JSType> inferred = Maps.filterKeys(\n        inferTemplateTypesFromParameters(fnType, n),\n        new Predicate<TemplateType>() {\n\n          @Override\n          public boolean apply(TemplateType key) {\n            return keys.contains(key);\n          }}\n        );",
      "info" : "VariableDeclarationStatement[42108-42198]:VariableDeclarationStatement[42108-42389]"
    }, {
      "left" : "inferTemplateTypesFromParameters(fnType, n)",
      "right" : "inferTemplateTypesFromParameters(fnType, n)",
      "info" : "MethodInvocation[42154-42197]:MethodInvocation[42170-42213]"
    }, {
      "left" : "TemplateTypeReplacer replacer = new TemplateTypeReplacer(\n        registry, inferred);",
      "right" : "TemplateTypeReplacer replacer = new TemplateTypeReplacer(\n        registry, inferred);",
      "info" : "VariableDeclarationStatement[42310-42396]:VariableDeclarationStatement[42500-42586]"
    }, {
      "left" : "Node callTarget = n.getFirstChild();",
      "right" : "Node callTarget = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[42401-42437]:VariableDeclarationStatement[42591-42627]"
    }, {
      "left" : "FunctionType replacementFnType = fnType.visit(replacer)\n        .toMaybeFunctionType();",
      "right" : "FunctionType replacementFnType = fnType.visit(replacer)\n        .toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[42443-42530]:VariableDeclarationStatement[42633-42720]"
    }, {
      "left" : "Preconditions.checkNotNull(replacementFnType);",
      "right" : "Preconditions.checkNotNull(replacementFnType);",
      "info" : "ExpressionStatement[42535-42581]:ExpressionStatement[42725-42771]"
    }, {
      "left" : "callTarget.setJSType(replacementFnType);",
      "right" : "callTarget.setJSType(replacementFnType);",
      "info" : "ExpressionStatement[42587-42627]:ExpressionStatement[42777-42817]"
    }, {
      "left" : "n.setJSType(replacementFnType.getReturnType());",
      "right" : "n.setJSType(replacementFnType.getReturnType());",
      "info" : "ExpressionStatement[42632-42679]:ExpressionStatement[42822-42869]"
    }, {
      "left" : "return replacer.madeChanges;",
      "right" : "return replacer.madeChanges;",
      "info" : "ReturnStatement[42685-42713]:ReturnStatement[42875-42903]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[42721-42728]:Modifier[42911-42918]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[42729-42738]:SimpleType[42919-42928]"
    }, {
      "left" : "traverseNew",
      "right" : "traverseNew",
      "info" : "SimpleName[42739-42750]:SimpleName[42929-42940]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[42751-42757]:SingleVariableDeclaration[42941-42947]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[42759-42774]:SingleVariableDeclaration[42949-42964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42776-44218]:Block[42966-44408]"
    }, {
      "left" : "scope = traverseChildren(n, scope);",
      "right" : "scope = traverseChildren(n, scope);",
      "info" : "ExpressionStatement[42782-42817]:ExpressionStatement[42972-43007]"
    }, {
      "left" : "Node constructor = n.getFirstChild();",
      "right" : "Node constructor = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[42823-42860]:VariableDeclarationStatement[43013-43050]"
    }, {
      "left" : "JSType constructorType = constructor.getJSType();",
      "right" : "JSType constructorType = constructor.getJSType();",
      "info" : "VariableDeclarationStatement[42865-42914]:VariableDeclarationStatement[43055-43104]"
    }, {
      "left" : "JSType type = null;",
      "right" : "JSType type = null;",
      "info" : "VariableDeclarationStatement[42919-42938]:VariableDeclarationStatement[43109-43128]"
    }, {
      "left" : "if (constructorType != null)",
      "right" : "if (constructorType != null)",
      "info" : "IfStatement[42943-44173]:IfStatement[43133-44363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42972-44173]:Block[43162-44363]"
    }, {
      "left" : "constructorType = constructorType.restrictByNotNullOrUndefined();",
      "right" : "constructorType = constructorType.restrictByNotNullOrUndefined();",
      "info" : "ExpressionStatement[42980-43045]:ExpressionStatement[43170-43235]"
    }, {
      "left" : "if (constructorType.isUnknownType())",
      "right" : "if (constructorType.isUnknownType())",
      "info" : "IfStatement[43052-44167]:IfStatement[43242-44357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43089-43126]:Block[43279-43316]"
    }, {
      "left" : "type = unknownType;",
      "right" : "type = unknownType;",
      "info" : "ExpressionStatement[43099-43118]:ExpressionStatement[43289-43308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43132-44167]:Block[43322-44357]"
    }, {
      "left" : "FunctionType ct = constructorType.toMaybeFunctionType();",
      "right" : "FunctionType ct = constructorType.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[43142-43198]:VariableDeclarationStatement[43332-43388]"
    }, {
      "left" : "if (ct == null && constructorType instanceof FunctionType)",
      "right" : "if (ct == null && constructorType instanceof FunctionType)",
      "info" : "IfStatement[43207-43552]:IfStatement[43397-43742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43266-43552]:Block[43456-43742]"
    }, {
      "left" : "ct = (FunctionType) constructorType;",
      "right" : "ct = (FunctionType) constructorType;",
      "info" : "ExpressionStatement[43506-43542]:ExpressionStatement[43696-43732]"
    }, {
      "left" : "if (ct != null && ct.isConstructor())",
      "right" : "if (ct != null && ct.isConstructor())",
      "info" : "IfStatement[43561-44159]:IfStatement[43751-44349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43599-44159]:Block[43789-44349]"
    }, {
      "left" : "backwardsInferenceFromCallSite(n, ct);",
      "right" : "backwardsInferenceFromCallSite(n, ct);",
      "info" : "ExpressionStatement[43611-43649]:ExpressionStatement[43801-43839]"
    }, {
      "left" : "ObjectType instanceType = ct.getInstanceType();",
      "right" : "ObjectType instanceType = ct.getInstanceType();",
      "info" : "VariableDeclarationStatement[43810-43857]:VariableDeclarationStatement[44000-44047]"
    }, {
      "left" : "Map<TemplateType, JSType> inferredTypes =\n              inferTemplateTypesFromParameters(ct, n);",
      "right" : "Map<TemplateType, JSType> inferredTypes =\n              inferTemplateTypesFromParameters(ct, n);",
      "info" : "VariableDeclarationStatement[43868-43964]:VariableDeclarationStatement[44058-44154]"
    }, {
      "left" : "if (inferredTypes.isEmpty())",
      "right" : "if (inferredTypes.isEmpty())",
      "info" : "IfStatement[43975-44149]:IfStatement[44165-44339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44004-44050]:Block[44194-44240]"
    }, {
      "left" : "type = instanceType;",
      "right" : "type = instanceType;",
      "info" : "ExpressionStatement[44018-44038]:ExpressionStatement[44208-44228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44056-44149]:Block[44246-44339]"
    }, {
      "left" : "type = registry.createTemplatizedType(instanceType, inferredTypes);",
      "right" : "type = registry.createTemplatizedType(instanceType, inferredTypes);",
      "info" : "ExpressionStatement[44070-44137]:ExpressionStatement[44260-44327]"
    }, {
      "left" : "n.setJSType(type);",
      "right" : "n.setJSType(type);",
      "info" : "ExpressionStatement[44178-44196]:ExpressionStatement[44368-44386]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[44201-44214]:ReturnStatement[44391-44404]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[44222-44229]:Modifier[44412-44419]"
    }, {
      "left" : "BooleanOutcomePair",
      "right" : "BooleanOutcomePair",
      "info" : "SimpleType[44230-44248]:SimpleType[44420-44438]"
    }, {
      "left" : "traverseAnd",
      "right" : "traverseAnd",
      "info" : "SimpleName[44249-44260]:SimpleName[44439-44450]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[44261-44267]:SingleVariableDeclaration[44451-44457]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[44269-44284]:SingleVariableDeclaration[44459-44474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44286-44348]:Block[44476-44538]"
    }, {
      "left" : "return traverseShortCircuitingBinOp(n, scope, true);",
      "right" : "return traverseShortCircuitingBinOp(n, scope, true);",
      "info" : "ReturnStatement[44292-44344]:ReturnStatement[44482-44534]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[44352-44359]:Modifier[44542-44549]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[44360-44369]:SimpleType[44550-44559]"
    }, {
      "left" : "traverseChildren",
      "right" : "traverseChildren",
      "info" : "SimpleName[44370-44386]:SimpleName[44560-44576]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[44387-44393]:SingleVariableDeclaration[44577-44583]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[44395-44410]:SingleVariableDeclaration[44585-44600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44412-44547]:Block[44602-44737]"
    }, {
      "left" : "for (Node el = n.getFirstChild(); el != null; el = el.getNext())",
      "right" : "for (Node el = n.getFirstChild(); el != null; el = el.getNext())",
      "info" : "ForStatement[44418-44525]:ForStatement[44608-44715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44483-44525]:Block[44673-44715]"
    }, {
      "left" : "scope = traverse(el, scope);",
      "right" : "scope = traverse(el, scope);",
      "info" : "ExpressionStatement[44491-44519]:ExpressionStatement[44681-44709]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[44530-44543]:ReturnStatement[44720-44733]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[44551-44558]:Modifier[44741-44748]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[44559-44568]:SimpleType[44749-44758]"
    }, {
      "left" : "traverseGetElem",
      "right" : "traverseGetElem",
      "info" : "SimpleName[44569-44584]:SimpleName[44759-44774]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[44585-44591]:SingleVariableDeclaration[44775-44781]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[44593-44608]:SingleVariableDeclaration[44783-44798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44610-44997]:Block[44800-45187]"
    }, {
      "left" : "scope = traverseChildren(n, scope);",
      "right" : "scope = traverseChildren(n, scope);",
      "info" : "ExpressionStatement[44616-44651]:ExpressionStatement[44806-44841]"
    }, {
      "left" : "JSType type = getJSType(n.getFirstChild()).restrictByNotNullOrUndefined();",
      "right" : "JSType type = getJSType(n.getFirstChild()).restrictByNotNullOrUndefined();",
      "info" : "VariableDeclarationStatement[44656-44730]:VariableDeclarationStatement[44846-44920]"
    }, {
      "left" : "TemplateTypeMap typeMap = type.getTemplateTypeMap();",
      "right" : "TemplateTypeMap typeMap = type.getTemplateTypeMap();",
      "info" : "VariableDeclarationStatement[44735-44787]:VariableDeclarationStatement[44925-44977]"
    }, {
      "left" : "if (typeMap.hasTemplateType(registry.getObjectElementKey()))",
      "right" : "if (typeMap.hasTemplateType(registry.getObjectElementKey()))",
      "info" : "IfStatement[44792-44936]:IfStatement[44982-45126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44853-44936]:Block[45043-45126]"
    }, {
      "left" : "n.setJSType(typeMap.getTemplateType(registry.getObjectElementKey()));",
      "right" : "n.setJSType(typeMap.getTemplateType(registry.getObjectElementKey()));",
      "info" : "ExpressionStatement[44861-44930]:ExpressionStatement[45051-45120]"
    }, {
      "left" : "return dereferencePointer(n.getFirstChild(), scope);",
      "right" : "return dereferencePointer(n.getFirstChild(), scope);",
      "info" : "ReturnStatement[44941-44993]:ReturnStatement[45131-45183]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[45001-45008]:Modifier[45191-45198]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[45009-45018]:SimpleType[45199-45208]"
    }, {
      "left" : "traverseGetProp",
      "right" : "traverseGetProp",
      "info" : "SimpleName[45019-45034]:SimpleName[45209-45224]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[45035-45041]:SingleVariableDeclaration[45225-45231]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[45043-45058]:SingleVariableDeclaration[45233-45248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45060-45348]:Block[45250-45538]"
    }, {
      "left" : "Node objNode = n.getFirstChild();",
      "right" : "Node objNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[45066-45099]:VariableDeclarationStatement[45256-45289]"
    }, {
      "left" : "Node property = n.getLastChild();",
      "right" : "Node property = n.getLastChild();",
      "info" : "VariableDeclarationStatement[45104-45137]:VariableDeclarationStatement[45294-45327]"
    }, {
      "left" : "scope = traverseChildren(n, scope);",
      "right" : "scope = traverseChildren(n, scope);",
      "info" : "ExpressionStatement[45142-45177]:ExpressionStatement[45332-45367]"
    }, {
      "left" : "n.setJSType(\n        getPropertyType(\n            objNode.getJSType(), property.getString(), n, scope));",
      "right" : "n.setJSType(\n        getPropertyType(\n            objNode.getJSType(), property.getString(), n, scope));",
      "info" : "ExpressionStatement[45183-45287]:ExpressionStatement[45373-45477]"
    }, {
      "left" : "return dereferencePointer(n.getFirstChild(), scope);",
      "right" : "return dereferencePointer(n.getFirstChild(), scope);",
      "info" : "ReturnStatement[45292-45344]:ReturnStatement[45482-45534]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[45882-45889]:Modifier[46072-46079]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[45890-45896]:Modifier[46080-46086]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[45897-45901]:PrimitiveType[46087-46091]"
    }, {
      "left" : "inferPropertyTypesToMatchConstraint",
      "right" : "inferPropertyTypesToMatchConstraint",
      "info" : "SimpleName[45902-45937]:SimpleName[46092-46127]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[45945-45956]:SingleVariableDeclaration[46135-46146]"
    }, {
      "left" : "JSType constraint",
      "right" : "JSType constraint",
      "info" : "SingleVariableDeclaration[45958-45975]:SingleVariableDeclaration[46148-46165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45977-46087]:Block[46167-46277]"
    }, {
      "left" : "if (type == null || constraint == null)",
      "right" : "if (type == null || constraint == null)",
      "info" : "IfStatement[45983-46044]:IfStatement[46173-46234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46023-46044]:Block[46213-46234]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[46031-46038]:ReturnStatement[46221-46228]"
    }, {
      "left" : "type.matchConstraint(constraint);",
      "right" : "type.matchConstraint(constraint);",
      "info" : "ExpressionStatement[46050-46083]:ExpressionStatement[46240-46273]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[46193-46200]:Modifier[46383-46390]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[46201-46210]:SimpleType[46391-46400]"
    }, {
      "left" : "dereferencePointer",
      "right" : "dereferencePointer",
      "info" : "SimpleName[46211-46229]:SimpleName[46401-46419]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[46230-46236]:SingleVariableDeclaration[46420-46426]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[46238-46253]:SingleVariableDeclaration[46428-46443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46255-46497]:Block[46445-46687]"
    }, {
      "left" : "if (n.isQualifiedName())",
      "right" : "if (n.isQualifiedName())",
      "info" : "IfStatement[46261-46475]:IfStatement[46451-46665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46286-46475]:Block[46476-46665]"
    }, {
      "left" : "JSType type = getJSType(n);",
      "right" : "JSType type = getJSType(n);",
      "info" : "VariableDeclarationStatement[46294-46321]:VariableDeclarationStatement[46484-46511]"
    }, {
      "left" : "JSType narrowed = type.restrictByNotNullOrUndefined();",
      "right" : "JSType narrowed = type.restrictByNotNullOrUndefined();",
      "info" : "VariableDeclarationStatement[46328-46382]:VariableDeclarationStatement[46518-46572]"
    }, {
      "left" : "if (type != narrowed)",
      "right" : "if (type != narrowed)",
      "info" : "IfStatement[46389-46469]:IfStatement[46579-46659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46411-46469]:Block[46601-46659]"
    }, {
      "left" : "scope = narrowScope(scope, n, narrowed);",
      "right" : "scope = narrowScope(scope, n, narrowed);",
      "info" : "ExpressionStatement[46421-46461]:ExpressionStatement[46611-46651]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[46480-46493]:ReturnStatement[46670-46683]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[46501-46508]:Modifier[46691-46698]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[46509-46515]:SimpleType[46699-46705]"
    }, {
      "left" : "getPropertyType",
      "right" : "getPropertyType",
      "info" : "SimpleName[46516-46531]:SimpleName[46706-46721]"
    }, {
      "left" : "JSType objType",
      "right" : "JSType objType",
      "info" : "SingleVariableDeclaration[46532-46546]:SingleVariableDeclaration[46722-46736]"
    }, {
      "left" : "String propName",
      "right" : "String propName",
      "info" : "SingleVariableDeclaration[46548-46563]:SingleVariableDeclaration[46738-46753]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[46571-46577]:SingleVariableDeclaration[46761-46767]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[46579-46594]:SingleVariableDeclaration[46769-46784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46596-48929]:Block[46786-49119]"
    }, {
      "left" : "JSType propertyType = null;",
      "right" : "JSType propertyType = null;",
      "info" : "VariableDeclarationStatement[46983-47010]:VariableDeclarationStatement[47173-47200]"
    }, {
      "left" : "boolean isLocallyInferred = false;",
      "right" : "boolean isLocallyInferred = false;",
      "info" : "VariableDeclarationStatement[47015-47049]:VariableDeclarationStatement[47205-47239]"
    }, {
      "left" : "String qualifiedName = n.getQualifiedName();",
      "right" : "String qualifiedName = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[47129-47173]:VariableDeclarationStatement[47319-47363]"
    }, {
      "left" : "StaticSlot<JSType> var = scope.getSlot(qualifiedName);",
      "right" : "StaticSlot<JSType> var = scope.getSlot(qualifiedName);",
      "info" : "VariableDeclarationStatement[47178-47232]:VariableDeclarationStatement[47368-47422]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[47237-47555]:IfStatement[47427-47745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47254-47555]:Block[47444-47745]"
    }, {
      "left" : "JSType varType = var.getType();",
      "right" : "JSType varType = var.getType();",
      "info" : "VariableDeclarationStatement[47262-47293]:VariableDeclarationStatement[47452-47483]"
    }, {
      "left" : "if (varType != null)",
      "right" : "if (varType != null)",
      "info" : "IfStatement[47300-47549]:IfStatement[47490-47739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47321-47549]:Block[47511-47739]"
    }, {
      "left" : "boolean isDeclared = !var.isTypeInferred();",
      "right" : "boolean isDeclared = !var.isTypeInferred();",
      "info" : "VariableDeclarationStatement[47331-47374]:VariableDeclarationStatement[47521-47564]"
    }, {
      "left" : "isLocallyInferred = (var != syntacticScope.getSlot(qualifiedName));",
      "right" : "isLocallyInferred = (var != syntacticScope.getSlot(qualifiedName));",
      "info" : "ExpressionStatement[47383-47450]:ExpressionStatement[47573-47640]"
    }, {
      "left" : "if (isDeclared || isLocallyInferred)",
      "right" : "if (isDeclared || isLocallyInferred)",
      "info" : "IfStatement[47459-47541]:IfStatement[47649-47731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47496-47541]:Block[47686-47731]"
    }, {
      "left" : "propertyType = varType;",
      "right" : "propertyType = varType;",
      "info" : "ExpressionStatement[47508-47531]:ExpressionStatement[47698-47721]"
    }, {
      "left" : "if (propertyType == null && objType != null)",
      "right" : "if (propertyType == null && objType != null)",
      "info" : "IfStatement[47561-47747]:IfStatement[47751-47937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47606-47747]:Block[47796-47937]"
    }, {
      "left" : "JSType foundType = objType.findPropertyType(propName);",
      "right" : "JSType foundType = objType.findPropertyType(propName);",
      "info" : "VariableDeclarationStatement[47614-47668]:VariableDeclarationStatement[47804-47858]"
    }, {
      "left" : "if (foundType != null)",
      "right" : "if (foundType != null)",
      "info" : "IfStatement[47675-47741]:IfStatement[47865-47931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47698-47741]:Block[47888-47931]"
    }, {
      "left" : "propertyType = foundType;",
      "right" : "propertyType = foundType;",
      "info" : "ExpressionStatement[47708-47733]:ExpressionStatement[47898-47923]"
    }, {
      "left" : "if (propertyType != null && objType != null)",
      "right" : "if (propertyType != null && objType != null)",
      "info" : "IfStatement[47753-48228]:IfStatement[47943-48418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47798-48228]:Block[47988-48418]"
    }, {
      "left" : "JSType restrictedObjType = objType.restrictByNotNullOrUndefined();",
      "right" : "JSType restrictedObjType = objType.restrictByNotNullOrUndefined();",
      "info" : "VariableDeclarationStatement[47806-47872]:VariableDeclarationStatement[47996-48062]"
    }, {
      "left" : "if (!restrictedObjType.getTemplateTypeMap().isEmpty()\n          && propertyType.hasAnyTemplateTypes())",
      "right" : "if (!restrictedObjType.getTemplateTypeMap().isEmpty()\n          && propertyType.hasAnyTemplateTypes())",
      "info" : "IfStatement[47879-48222]:IfStatement[48069-48412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47982-48222]:Block[48172-48412]"
    }, {
      "left" : "TemplateTypeMap typeMap = restrictedObjType.getTemplateTypeMap();",
      "right" : "TemplateTypeMap typeMap = restrictedObjType.getTemplateTypeMap();",
      "info" : "VariableDeclarationStatement[47992-48057]:VariableDeclarationStatement[48182-48247]"
    }, {
      "left" : "TemplateTypeMapReplacer replacer = new TemplateTypeMapReplacer(\n            registry, typeMap);",
      "right" : "TemplateTypeMapReplacer replacer = new TemplateTypeMapReplacer(\n            registry, typeMap);",
      "info" : "VariableDeclarationStatement[48066-48161]:VariableDeclarationStatement[48256-48351]"
    }, {
      "left" : "propertyType = propertyType.visit(replacer);",
      "right" : "propertyType = propertyType.visit(replacer);",
      "info" : "ExpressionStatement[48170-48214]:ExpressionStatement[48360-48404]"
    }, {
      "left" : "if ((propertyType == null || propertyType.isUnknownType())\n        && qualifiedName != null)",
      "right" : "if ((propertyType == null || propertyType.isUnknownType())\n        && qualifiedName != null)",
      "info" : "IfStatement[48234-48572]:IfStatement[48424-48762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48327-48572]:Block[48517-48762]"
    }, {
      "left" : "ObjectType regType = ObjectType.cast(registry.getType(qualifiedName));",
      "right" : "ObjectType regType = ObjectType.cast(registry.getType(qualifiedName));",
      "info" : "VariableDeclarationStatement[48410-48480]:VariableDeclarationStatement[48600-48670]"
    }, {
      "left" : "if (regType != null)",
      "right" : "if (regType != null)",
      "info" : "IfStatement[48487-48566]:IfStatement[48677-48756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48508-48566]:Block[48698-48756]"
    }, {
      "left" : "propertyType = regType.getConstructor();",
      "right" : "propertyType = regType.getConstructor();",
      "info" : "ExpressionStatement[48518-48558]:ExpressionStatement[48708-48748]"
    }, {
      "left" : "if (propertyType == null)",
      "right" : "if (propertyType == null)",
      "info" : "IfStatement[48578-48925]:IfStatement[48768-49115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48604-48637]:Block[48794-48827]"
    }, {
      "left" : "return unknownType;",
      "right" : "return unknownType;",
      "info" : "ReturnStatement[48612-48631]:ReturnStatement[48802-48821]"
    }, {
      "left" : "if (propertyType.isEquivalentTo(unknownType) && isLocallyInferred)",
      "right" : "if (propertyType.isEquivalentTo(unknownType) && isLocallyInferred)",
      "info" : "IfStatement[48643-48925]:IfStatement[48833-49115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48710-48885]:Block[48900-49075]"
    }, {
      "left" : "return getNativeType(CHECKED_UNKNOWN_TYPE);",
      "right" : "return getNativeType(CHECKED_UNKNOWN_TYPE);",
      "info" : "ReturnStatement[48836-48879]:ReturnStatement[49026-49069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48891-48925]:Block[49081-49115]"
    }, {
      "left" : "return propertyType;",
      "right" : "return propertyType;",
      "info" : "ReturnStatement[48899-48919]:ReturnStatement[49089-49109]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48933-48940]:Modifier[49123-49130]"
    }, {
      "left" : "BooleanOutcomePair",
      "right" : "BooleanOutcomePair",
      "info" : "SimpleType[48941-48959]:SimpleType[49131-49149]"
    }, {
      "left" : "traverseOr",
      "right" : "traverseOr",
      "info" : "SimpleName[48960-48970]:SimpleName[49150-49160]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[48971-48977]:SingleVariableDeclaration[49161-49167]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[48979-48994]:SingleVariableDeclaration[49169-49184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48996-49059]:Block[49186-49249]"
    }, {
      "left" : "return traverseShortCircuitingBinOp(n, scope, false);",
      "right" : "return traverseShortCircuitingBinOp(n, scope, false);",
      "info" : "ReturnStatement[49002-49055]:ReturnStatement[49192-49245]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49063-49070]:Modifier[49253-49260]"
    }, {
      "left" : "BooleanOutcomePair",
      "right" : "BooleanOutcomePair",
      "info" : "SimpleType[49071-49089]:SimpleType[49261-49279]"
    }, {
      "left" : "traverseShortCircuitingBinOp",
      "right" : "traverseShortCircuitingBinOp",
      "info" : "SimpleName[49090-49118]:SimpleName[49280-49308]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[49126-49132]:SingleVariableDeclaration[49316-49322]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[49134-49149]:SingleVariableDeclaration[49324-49339]"
    }, {
      "left" : "boolean condition",
      "right" : "boolean condition",
      "info" : "SingleVariableDeclaration[49151-49168]:SingleVariableDeclaration[49341-49358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49170-51422]:Block[49360-51612]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[49176-49206]:VariableDeclarationStatement[49366-49396]"
    }, {
      "left" : "Node right = n.getLastChild();",
      "right" : "Node right = n.getLastChild();",
      "info" : "VariableDeclarationStatement[49211-49241]:VariableDeclarationStatement[49401-49431]"
    }, {
      "left" : "BooleanOutcomePair leftLiterals =\n        traverseWithinShortCircuitingBinOp(left,\n            scope.createChildFlowScope());",
      "right" : "BooleanOutcomePair leftLiterals =\n        traverseWithinShortCircuitingBinOp(left,\n            scope.createChildFlowScope());",
      "info" : "VariableDeclarationStatement[49273-49398]:VariableDeclarationStatement[49463-49588]"
    }, {
      "left" : "JSType leftType = left.getJSType();",
      "right" : "JSType leftType = left.getJSType();",
      "info" : "VariableDeclarationStatement[49403-49438]:VariableDeclarationStatement[49593-49628]"
    }, {
      "left" : "FlowScope rightScope = reverseInterpreter.\n        getPreciserScopeKnowingConditionOutcome(\n            left, leftLiterals.getOutcomeFlowScope(left.getType(), condition),\n            condition);",
      "right" : "FlowScope rightScope = reverseInterpreter.\n        getPreciserScopeKnowingConditionOutcome(\n            left, leftLiterals.getOutcomeFlowScope(left.getType(), condition),\n            condition);",
      "info" : "VariableDeclarationStatement[49562-49756]:VariableDeclarationStatement[49752-49946]"
    }, {
      "left" : "BooleanOutcomePair rightLiterals =\n        traverseWithinShortCircuitingBinOp(\n            right, rightScope.createChildFlowScope());",
      "right" : "BooleanOutcomePair rightLiterals =\n        traverseWithinShortCircuitingBinOp(\n            right, rightScope.createChildFlowScope());",
      "info" : "VariableDeclarationStatement[49789-49922]:VariableDeclarationStatement[49979-50112]"
    }, {
      "left" : "JSType rightType = right.getJSType();",
      "right" : "JSType rightType = right.getJSType();",
      "info" : "VariableDeclarationStatement[49927-49964]:VariableDeclarationStatement[50117-50154]"
    }, {
      "left" : "JSType type;",
      "right" : "JSType type;",
      "info" : "VariableDeclarationStatement[49970-49982]:VariableDeclarationStatement[50160-50172]"
    }, {
      "left" : "BooleanOutcomePair literals;",
      "right" : "BooleanOutcomePair literals;",
      "info" : "VariableDeclarationStatement[49987-50015]:VariableDeclarationStatement[50177-50205]"
    }, {
      "left" : "if (leftType != null && rightType != null)",
      "right" : "if (leftType != null && rightType != null)",
      "info" : "IfStatement[50020-51373]:IfStatement[50210-51563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50063-51150]:Block[50253-51340]"
    }, {
      "left" : "leftType = leftType.getRestrictedTypeGivenToBooleanOutcome(!condition);",
      "right" : "leftType = leftType.getRestrictedTypeGivenToBooleanOutcome(!condition);",
      "info" : "ExpressionStatement[50071-50142]:ExpressionStatement[50261-50332]"
    }, {
      "left" : "if (leftLiterals.toBooleanOutcomes ==\n          BooleanLiteralSet.get(!condition))",
      "right" : "if (leftLiterals.toBooleanOutcomes ==\n          BooleanLiteralSet.get(!condition))",
      "info" : "IfStatement[50149-50690]:IfStatement[50339-50880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50232-50394]:Block[50422-50584]"
    }, {
      "left" : "type = leftType;",
      "right" : "type = leftType;",
      "info" : "ExpressionStatement[50337-50353]:ExpressionStatement[50527-50543]"
    }, {
      "left" : "literals = leftLiterals;",
      "right" : "literals = leftLiterals;",
      "info" : "ExpressionStatement[50362-50386]:ExpressionStatement[50552-50576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50400-50690]:Block[50590-50880]"
    }, {
      "left" : "type = leftType.getLeastSupertype(rightType);",
      "right" : "type = leftType.getLeastSupertype(rightType);",
      "info" : "ExpressionStatement[50543-50588]:ExpressionStatement[50733-50778]"
    }, {
      "left" : "literals =\n            getBooleanOutcomePair(leftLiterals, rightLiterals, condition);",
      "right" : "literals =\n            getBooleanOutcomePair(leftLiterals, rightLiterals, condition);",
      "info" : "ExpressionStatement[50597-50682]:ExpressionStatement[50787-50872]"
    }, {
      "left" : "if (literals.booleanValues == BooleanLiteralSet.EMPTY &&\n          getNativeType(BOOLEAN_TYPE).isSubtype(type))",
      "right" : "if (literals.booleanValues == BooleanLiteralSet.EMPTY &&\n          getNativeType(BOOLEAN_TYPE).isSubtype(type))",
      "info" : "IfStatement[50819-51144]:IfStatement[51009-51334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50931-51144]:Block[51121-51334]"
    }, {
      "left" : "if (type.isUnionType())",
      "right" : "if (type.isUnionType())",
      "info" : "IfStatement[50996-51136]:IfStatement[51186-51326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51020-51136]:Block[51210-51326]"
    }, {
      "left" : "type = type.toMaybeUnionType().getRestrictedUnion(\n              getNativeType(BOOLEAN_TYPE));",
      "right" : "type = type.toMaybeUnionType().getRestrictedUnion(\n              getNativeType(BOOLEAN_TYPE));",
      "info" : "ExpressionStatement[51032-51126]:ExpressionStatement[51222-51316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51156-51373]:Block[51346-51563]"
    }, {
      "left" : "type = null;",
      "right" : "type = null;",
      "info" : "ExpressionStatement[51164-51176]:ExpressionStatement[51354-51366]"
    }, {
      "left" : "literals = new BooleanOutcomePair(\n          BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH,\n          leftLiterals.getJoinedFlowScope(),\n          rightLiterals.getJoinedFlowScope());",
      "right" : "literals = new BooleanOutcomePair(\n          BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH,\n          leftLiterals.getJoinedFlowScope(),\n          rightLiterals.getJoinedFlowScope());",
      "info" : "ExpressionStatement[51183-51367]:ExpressionStatement[51373-51557]"
    }, {
      "left" : "n.setJSType(type);",
      "right" : "n.setJSType(type);",
      "info" : "ExpressionStatement[51378-51396]:ExpressionStatement[51568-51586]"
    }, {
      "left" : "return literals;",
      "right" : "return literals;",
      "info" : "ReturnStatement[51402-51418]:ReturnStatement[51592-51608]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[51426-51433]:Modifier[51616-51623]"
    }, {
      "left" : "BooleanOutcomePair",
      "right" : "BooleanOutcomePair",
      "info" : "SimpleType[51434-51452]:SimpleType[51624-51642]"
    }, {
      "left" : "traverseWithinShortCircuitingBinOp",
      "right" : "traverseWithinShortCircuitingBinOp",
      "info" : "SimpleName[51453-51487]:SimpleName[51643-51677]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[51488-51494]:SingleVariableDeclaration[51678-51684]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[51502-51517]:SingleVariableDeclaration[51692-51707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51519-51788]:Block[51709-51978]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.AND:\n        return traverseAnd(n, scope);\n\n      case Token.OR:\n        return traverseOr(n, scope);\n\n      default:\n        scope = traverse(n, scope);\n        return newBooleanOutcomePair(n.getJSType(), scope);\n    }",
      "right" : "switch (n.getType()) {\n      case Token.AND:\n        return traverseAnd(n, scope);\n\n      case Token.OR:\n        return traverseOr(n, scope);\n\n      default:\n        scope = traverse(n, scope);\n        return newBooleanOutcomePair(n.getJSType(), scope);\n    }",
      "info" : "SwitchStatement[51525-51784]:SwitchStatement[51715-51974]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[51554-51569]:SwitchCase[51744-51759]"
    }, {
      "left" : "return traverseAnd(n, scope);",
      "right" : "return traverseAnd(n, scope);",
      "info" : "ReturnStatement[51578-51607]:ReturnStatement[51768-51797]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[51615-51629]:SwitchCase[51805-51819]"
    }, {
      "left" : "return traverseOr(n, scope);",
      "right" : "return traverseOr(n, scope);",
      "info" : "ReturnStatement[51638-51666]:ReturnStatement[51828-51856]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[51674-51682]:SwitchCase[51864-51872]"
    }, {
      "left" : "scope = traverse(n, scope);",
      "right" : "scope = traverse(n, scope);",
      "info" : "ExpressionStatement[51691-51718]:ExpressionStatement[51881-51908]"
    }, {
      "left" : "return newBooleanOutcomePair(n.getJSType(), scope);",
      "right" : "return newBooleanOutcomePair(n.getJSType(), scope);",
      "info" : "ReturnStatement[51727-51778]:ReturnStatement[51917-51968]"
    }, {
      "left" : "BooleanOutcomePair",
      "right" : "BooleanOutcomePair",
      "info" : "SimpleType[52008-52026]:SimpleType[52198-52216]"
    }, {
      "left" : "getBooleanOutcomePair",
      "right" : "getBooleanOutcomePair",
      "info" : "SimpleName[52027-52048]:SimpleName[52217-52238]"
    }, {
      "left" : "BooleanOutcomePair left",
      "right" : "BooleanOutcomePair left",
      "info" : "SingleVariableDeclaration[52049-52072]:SingleVariableDeclaration[52239-52262]"
    }, {
      "left" : "BooleanOutcomePair right",
      "right" : "BooleanOutcomePair right",
      "info" : "SingleVariableDeclaration[52080-52104]:SingleVariableDeclaration[52270-52294]"
    }, {
      "left" : "boolean condition",
      "right" : "boolean condition",
      "info" : "SingleVariableDeclaration[52106-52123]:SingleVariableDeclaration[52296-52313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52125-52424]:Block[52315-52614]"
    }, {
      "left" : "return new BooleanOutcomePair(\n        getBooleanOutcomes(left.toBooleanOutcomes, right.toBooleanOutcomes,\n                           condition),\n        getBooleanOutcomes(left.booleanValues, right.booleanValues, condition),\n        left.getJoinedFlowScope(), right.getJoinedFlowScope());",
      "right" : "return new BooleanOutcomePair(\n        getBooleanOutcomes(left.toBooleanOutcomes, right.toBooleanOutcomes,\n                           condition),\n        getBooleanOutcomes(left.booleanValues, right.booleanValues, condition),\n        left.getJoinedFlowScope(), right.getJoinedFlowScope());",
      "info" : "ReturnStatement[52131-52420]:ReturnStatement[52321-52610]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[53085-53091]:Modifier[53275-53281]"
    }, {
      "left" : "BooleanLiteralSet",
      "right" : "BooleanLiteralSet",
      "info" : "SimpleType[53092-53109]:SimpleType[53282-53299]"
    }, {
      "left" : "getBooleanOutcomes",
      "right" : "getBooleanOutcomes",
      "info" : "SimpleName[53110-53128]:SimpleName[53300-53318]"
    }, {
      "left" : "BooleanLiteralSet left",
      "right" : "BooleanLiteralSet left",
      "info" : "SingleVariableDeclaration[53129-53151]:SingleVariableDeclaration[53319-53341]"
    }, {
      "left" : "BooleanLiteralSet right",
      "right" : "BooleanLiteralSet right",
      "info" : "SingleVariableDeclaration[53159-53182]:SingleVariableDeclaration[53349-53372]"
    }, {
      "left" : "boolean condition",
      "right" : "boolean condition",
      "info" : "SingleVariableDeclaration[53184-53201]:SingleVariableDeclaration[53374-53391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53203-53286]:Block[53393-53476]"
    }, {
      "left" : "return right.union(left.intersection(BooleanLiteralSet.get(!condition)));",
      "right" : "return right.union(left.intersection(BooleanLiteralSet.get(!condition)));",
      "info" : "ReturnStatement[53209-53282]:ReturnStatement[53399-53472]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[53573-53580]:Modifier[53763-53770]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[53581-53586]:Modifier[53771-53776]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[53587-53592]:TYPE_DECLARATION_KIND[53777-53782]"
    }, {
      "left" : "BooleanOutcomePair",
      "right" : "BooleanOutcomePair",
      "info" : "SimpleName[53593-53611]:SimpleName[53783-53801]"
    }, {
      "left" : "BooleanOutcomePair",
      "right" : "BooleanOutcomePair",
      "info" : "SimpleName[54013-54031]:SimpleName[54203-54221]"
    }, {
      "left" : "BooleanLiteralSet toBooleanOutcomes",
      "right" : "BooleanLiteralSet toBooleanOutcomes",
      "info" : "SingleVariableDeclaration[54041-54076]:SingleVariableDeclaration[54231-54266]"
    }, {
      "left" : "BooleanLiteralSet booleanValues",
      "right" : "BooleanLiteralSet booleanValues",
      "info" : "SingleVariableDeclaration[54078-54109]:SingleVariableDeclaration[54268-54299]"
    }, {
      "left" : "FlowScope leftScope",
      "right" : "FlowScope leftScope",
      "info" : "SingleVariableDeclaration[54119-54138]:SingleVariableDeclaration[54309-54328]"
    }, {
      "left" : "FlowScope rightScope",
      "right" : "FlowScope rightScope",
      "info" : "SingleVariableDeclaration[54140-54160]:SingleVariableDeclaration[54330-54350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54162-54331]:Block[54352-54521]"
    }, {
      "left" : "this.toBooleanOutcomes = toBooleanOutcomes;",
      "right" : "this.toBooleanOutcomes = toBooleanOutcomes;",
      "info" : "ExpressionStatement[54170-54213]:ExpressionStatement[54360-54403]"
    }, {
      "left" : "this.booleanValues = booleanValues;",
      "right" : "this.booleanValues = booleanValues;",
      "info" : "ExpressionStatement[54220-54255]:ExpressionStatement[54410-54445]"
    }, {
      "left" : "this.leftScope = leftScope;",
      "right" : "this.leftScope = leftScope;",
      "info" : "ExpressionStatement[54262-54289]:ExpressionStatement[54452-54479]"
    }, {
      "left" : "this.rightScope = rightScope;",
      "right" : "this.rightScope = rightScope;",
      "info" : "ExpressionStatement[54296-54325]:ExpressionStatement[54486-54515]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[54461-54470]:SimpleType[54651-54660]"
    }, {
      "left" : "getJoinedFlowScope",
      "right" : "getJoinedFlowScope",
      "info" : "SimpleName[54471-54489]:SimpleName[54661-54679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54492-54721]:Block[54682-54911]"
    }, {
      "left" : "if (joinedScope == null)",
      "right" : "if (joinedScope == null)",
      "info" : "IfStatement[54500-54689]:IfStatement[54690-54879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54525-54689]:Block[54715-54879]"
    }, {
      "left" : "if (leftScope == rightScope)",
      "right" : "if (leftScope == rightScope)",
      "info" : "IfStatement[54535-54681]:IfStatement[54725-54871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54564-54611]:Block[54754-54801]"
    }, {
      "left" : "joinedScope = rightScope;",
      "right" : "joinedScope = rightScope;",
      "info" : "ExpressionStatement[54576-54601]:ExpressionStatement[54766-54791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54617-54681]:Block[54807-54871]"
    }, {
      "left" : "joinedScope = join(leftScope, rightScope);",
      "right" : "joinedScope = join(leftScope, rightScope);",
      "info" : "ExpressionStatement[54629-54671]:ExpressionStatement[54819-54861]"
    }, {
      "left" : "return joinedScope;",
      "right" : "return joinedScope;",
      "info" : "ReturnStatement[54696-54715]:ReturnStatement[54886-54905]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[54832-54841]:SimpleType[55022-55031]"
    }, {
      "left" : "getOutcomeFlowScope",
      "right" : "getOutcomeFlowScope",
      "info" : "SimpleName[54842-54861]:SimpleName[55032-55051]"
    }, {
      "left" : "int nodeType",
      "right" : "int nodeType",
      "info" : "SingleVariableDeclaration[54862-54874]:SingleVariableDeclaration[55052-55064]"
    }, {
      "left" : "boolean outcome",
      "right" : "boolean outcome",
      "info" : "SingleVariableDeclaration[54876-54891]:SingleVariableDeclaration[55066-55081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54893-55144]:Block[55083-55334]"
    }, {
      "left" : "if (nodeType == Token.AND && outcome ||\n          nodeType == Token.OR && !outcome)",
      "right" : "if (nodeType == Token.AND && outcome ||\n          nodeType == Token.OR && !outcome)",
      "info" : "IfStatement[54901-55138]:IfStatement[55091-55328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54985-55086]:Block[55175-55276]"
    }, {
      "left" : "return rightScope;",
      "right" : "return rightScope;",
      "info" : "ReturnStatement[55060-55078]:ReturnStatement[55250-55268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55092-55138]:Block[55282-55328]"
    }, {
      "left" : "return getJoinedFlowScope();",
      "right" : "return getJoinedFlowScope();",
      "info" : "ReturnStatement[55102-55130]:ReturnStatement[55292-55320]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[55152-55159]:Modifier[55342-55349]"
    }, {
      "left" : "BooleanOutcomePair",
      "right" : "BooleanOutcomePair",
      "info" : "SimpleType[55160-55178]:SimpleType[55350-55368]"
    }, {
      "left" : "newBooleanOutcomePair",
      "right" : "newBooleanOutcomePair",
      "info" : "SimpleName[55179-55200]:SimpleName[55369-55390]"
    }, {
      "left" : "JSType jsType",
      "right" : "JSType jsType",
      "info" : "SingleVariableDeclaration[55208-55221]:SingleVariableDeclaration[55398-55411]"
    }, {
      "left" : "FlowScope flowScope",
      "right" : "FlowScope flowScope",
      "info" : "SingleVariableDeclaration[55223-55242]:SingleVariableDeclaration[55413-55432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55244-55630]:Block[55434-55820]"
    }, {
      "left" : "if (jsType == null)",
      "right" : "if (jsType == null)",
      "info" : "IfStatement[55250-55395]:IfStatement[55440-55585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55270-55395]:Block[55460-55585]"
    }, {
      "left" : "return new BooleanOutcomePair(\n          BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, flowScope, flowScope);",
      "right" : "return new BooleanOutcomePair(\n          BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, flowScope, flowScope);",
      "info" : "ReturnStatement[55278-55389]:ReturnStatement[55468-55579]"
    }, {
      "left" : "return new BooleanOutcomePair(jsType.getPossibleToBooleanOutcomes(),\n        registry.getNativeType(BOOLEAN_TYPE).isSubtype(jsType) ?\n            BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY,\n        flowScope, flowScope);",
      "right" : "return new BooleanOutcomePair(jsType.getPossibleToBooleanOutcomes(),\n        registry.getNativeType(BOOLEAN_TYPE).isSubtype(jsType) ?\n            BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY,\n        flowScope, flowScope);",
      "info" : "ReturnStatement[55400-55626]:ReturnStatement[55590-55816]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[55634-55641]:Modifier[55824-55831]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[55642-55646]:PrimitiveType[55832-55836]"
    }, {
      "left" : "redeclareSimpleVar",
      "right" : "redeclareSimpleVar",
      "info" : "SimpleName[55647-55665]:SimpleName[55837-55855]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[55673-55688]:SingleVariableDeclaration[55863-55878]"
    }, {
      "left" : "Node nameNode",
      "right" : "Node nameNode",
      "info" : "SingleVariableDeclaration[55690-55703]:SingleVariableDeclaration[55880-55893]"
    }, {
      "left" : "JSType varType",
      "right" : "JSType varType",
      "info" : "SingleVariableDeclaration[55705-55719]:SingleVariableDeclaration[55895-55909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55721-56028]:Block[55911-56218]"
    }, {
      "left" : "Preconditions.checkState(nameNode.isName());",
      "right" : "Preconditions.checkState(nameNode.isName());",
      "info" : "ExpressionStatement[55727-55771]:ExpressionStatement[55917-55961]"
    }, {
      "left" : "String varName = nameNode.getString();",
      "right" : "String varName = nameNode.getString();",
      "info" : "VariableDeclarationStatement[55776-55814]:VariableDeclarationStatement[55966-56004]"
    }, {
      "left" : "if (varType == null)",
      "right" : "if (varType == null)",
      "info" : "IfStatement[55819-55905]:IfStatement[56009-56095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55840-55905]:Block[56030-56095]"
    }, {
      "left" : "varType = getNativeType(JSTypeNative.UNKNOWN_TYPE);",
      "right" : "varType = getNativeType(JSTypeNative.UNKNOWN_TYPE);",
      "info" : "ExpressionStatement[55848-55899]:ExpressionStatement[56038-56089]"
    }, {
      "left" : "if (isUnflowable(syntacticScope.getVar(varName)))",
      "right" : "if (isUnflowable(syntacticScope.getVar(varName)))",
      "info" : "IfStatement[55910-55981]:IfStatement[56100-56171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55960-55981]:Block[56150-56171]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[55968-55975]:ReturnStatement[56158-56165]"
    }, {
      "left" : "scope.inferSlotType(varName, varType);",
      "right" : "scope.inferSlotType(varName, varType);",
      "info" : "ExpressionStatement[55986-56024]:ExpressionStatement[56176-56214]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[56032-56039]:Modifier[56222-56229]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[56040-56047]:PrimitiveType[56230-56237]"
    }, {
      "left" : "isUnflowable",
      "right" : "isUnflowable",
      "info" : "SimpleName[56048-56060]:SimpleName[56238-56250]"
    }, {
      "left" : "Var v",
      "right" : "Var v",
      "info" : "SingleVariableDeclaration[56061-56066]:SingleVariableDeclaration[56251-56256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56068-56246]:Block[56258-56436]"
    }, {
      "left" : "return v != null && v.isLocal() && v.isMarkedEscaped() &&\n        // It's OK to flow a variable in the scope where it's escaped.\n        v.getScope() == syntacticScope;",
      "right" : "return v != null && v.isLocal() && v.isMarkedEscaped() &&\n        // It's OK to flow a variable in the scope where it's escaped.\n        v.getScope() == syntacticScope;",
      "info" : "ReturnStatement[56074-56242]:ReturnStatement[56264-56432]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[56356-56363]:Modifier[56546-56553]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[56364-56370]:SimpleType[56554-56560]"
    }, {
      "left" : "getJSType",
      "right" : "getJSType",
      "info" : "SimpleName[56371-56380]:SimpleName[56561-56570]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[56381-56387]:SingleVariableDeclaration[56571-56577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56389-56801]:Block[56579-56991]"
    }, {
      "left" : "JSType jsType = n.getJSType();",
      "right" : "JSType jsType = n.getJSType();",
      "info" : "VariableDeclarationStatement[56395-56425]:VariableDeclarationStatement[56585-56615]"
    }, {
      "left" : "if (jsType == null)",
      "right" : "if (jsType == null)",
      "info" : "IfStatement[56430-56797]:IfStatement[56620-56987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56450-56763]:Block[56640-56953]"
    }, {
      "left" : "return unknownType;",
      "right" : "return unknownType;",
      "info" : "ReturnStatement[56738-56757]:ReturnStatement[56928-56947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56769-56797]:Block[56959-56987]"
    }, {
      "left" : "return jsType;",
      "right" : "return jsType;",
      "info" : "ReturnStatement[56777-56791]:ReturnStatement[56967-56981]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[56805-56812]:Modifier[56995-57002]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[56813-56819]:SimpleType[57003-57009]"
    }, {
      "left" : "getNativeType",
      "right" : "getNativeType",
      "info" : "SimpleName[56820-56833]:SimpleName[57010-57023]"
    }, {
      "left" : "JSTypeNative typeId",
      "right" : "JSTypeNative typeId",
      "info" : "SingleVariableDeclaration[56834-56853]:SingleVariableDeclaration[57024-57043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56855-56903]:Block[57045-57093]"
    }, {
      "left" : "return registry.getNativeType(typeId);",
      "right" : "return registry.getNativeType(typeId);",
      "info" : "ReturnStatement[56861-56899]:ReturnStatement[57051-57089]"
    } ]
  },
  "interFileMappings" : { }
}