{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[2552-2600]:FieldDeclaration[2552-2600]"
    }, {
      "left" : "private final SortedMap<String, JSType> properties = Maps.newTreeMap();",
      "right" : "private final SortedMap<String, JSType> properties = Maps.newTreeMap();",
      "info" : "FieldDeclaration[2604-2675]:FieldDeclaration[2604-2675]"
    }, {
      "left" : "private final boolean declared;",
      "right" : "private final boolean declared;",
      "info" : "FieldDeclaration[2678-2709]:FieldDeclaration[2678-2709]"
    }, {
      "left" : "private boolean isFrozen = false;",
      "right" : "private boolean isFrozen = false;",
      "info" : "FieldDeclaration[2712-2745]:FieldDeclaration[2712-2745]"
    }, {
      "left" : "RecordType(JSTypeRegistry registry, Map<String, RecordProperty> properties)",
      "right" : "RecordType(JSTypeRegistry registry, Map<String, RecordProperty> properties)",
      "info" : "MethodDeclaration[2749-2868]:MethodDeclaration[2749-2868]"
    }, {
      "left" : "RecordType(JSTypeRegistry registry, Map<String, RecordProperty> properties,\n      boolean declared)",
      "right" : "RecordType(JSTypeRegistry registry, Map<String, RecordProperty> properties,\n      boolean declared)",
      "info" : "MethodDeclaration[2872-4155]:MethodDeclaration[2872-4155]"
    }, {
      "left" : "boolean isSynthetic()",
      "right" : "boolean isSynthetic()",
      "info" : "MethodDeclaration[4159-4271]:MethodDeclaration[4159-4271]"
    }, {
      "left" : "public ObjectType getImplicitPrototype()",
      "right" : "public ObjectType getImplicitPrototype()",
      "info" : "MethodDeclaration[4754-4879]:MethodDeclaration[4748-4873]"
    }, {
      "left" : "boolean defineProperty(String propertyName, JSType type,\n      boolean inferred, Node propertyNode)",
      "right" : "boolean defineProperty(String propertyName, JSType type,\n      boolean inferred, Node propertyNode)",
      "info" : "MethodDeclaration[4883-5202]:MethodDeclaration[4877-5196]"
    }, {
      "left" : "RecordType toMaybeRecordType()",
      "right" : "RecordType toMaybeRecordType()",
      "info" : "MethodDeclaration[7768-7833]:MethodDeclaration[7680-7745]"
    }, {
      "left" : "public boolean isSubtype(JSType that)",
      "right" : "public boolean isSubtype(JSType that)",
      "info" : "MethodDeclaration[7837-8449]:MethodDeclaration[7749-8361]"
    }, {
      "left" : "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope)",
      "right" : "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope)",
      "info" : "MethodDeclaration[10199-10587]:MethodDeclaration[10037-10425]"
    } ],
    "mappings" : [
 {
      "left" : "RecordType",
      "right" : "RecordType",
      "info" : "SimpleName[2749-2759]:SimpleName[2749-2759]"
    }, {
      "left" : "JSTypeRegistry registry",
      "right" : "JSTypeRegistry registry",
      "info" : "SingleVariableDeclaration[2760-2783]:SingleVariableDeclaration[2760-2783]"
    }, {
      "left" : "Map<String, RecordProperty> properties",
      "right" : "Map<String, RecordProperty> properties",
      "info" : "SingleVariableDeclaration[2785-2823]:SingleVariableDeclaration[2785-2823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2825-2868]:Block[2825-2868]"
    }, {
      "left" : "this(registry, properties, true);",
      "right" : "this(registry, properties, true);",
      "info" : "ConstructorInvocation[2831-2864]:ConstructorInvocation[2831-2864]"
    }, {
      "left" : "RecordType",
      "right" : "RecordType",
      "info" : "SimpleName[3406-3416]:SimpleName[3406-3416]"
    }, {
      "left" : "JSTypeRegistry registry",
      "right" : "JSTypeRegistry registry",
      "info" : "SingleVariableDeclaration[3417-3440]:SingleVariableDeclaration[3417-3440]"
    }, {
      "left" : "Map<String, RecordProperty> properties",
      "right" : "Map<String, RecordProperty> properties",
      "info" : "SingleVariableDeclaration[3442-3480]:SingleVariableDeclaration[3442-3480]"
    }, {
      "left" : "boolean declared",
      "right" : "boolean declared",
      "info" : "SingleVariableDeclaration[3488-3504]:SingleVariableDeclaration[3488-3504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3506-4155]:Block[3506-4155]"
    }, {
      "left" : "super(registry, null, null);",
      "right" : "super(registry, null, null);",
      "info" : "SuperConstructorInvocation[3512-3540]:SuperConstructorInvocation[3512-3540]"
    }, {
      "left" : "setPrettyPrint(true);",
      "right" : "setPrettyPrint(true);",
      "info" : "ExpressionStatement[3545-3566]:ExpressionStatement[3545-3566]"
    }, {
      "left" : "this.declared = declared;",
      "right" : "this.declared = declared;",
      "info" : "ExpressionStatement[3571-3596]:ExpressionStatement[3571-3596]"
    }, {
      "left" : "for (String property : properties.keySet())",
      "right" : "for (String property : properties.keySet())",
      "info" : "EnhancedForStatement[3602-4098]:EnhancedForStatement[3602-4098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3646-4098]:Block[3646-4098]"
    }, {
      "left" : "RecordProperty prop = properties.get(property);",
      "right" : "RecordProperty prop = properties.get(property);",
      "info" : "VariableDeclarationStatement[3654-3701]:VariableDeclarationStatement[3654-3701]"
    }, {
      "left" : "if (prop == null)",
      "right" : "if (prop == null)",
      "info" : "IfStatement[3708-3854]:IfStatement[3708-3854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3726-3854]:Block[3726-3854]"
    }, {
      "left" : "throw new IllegalStateException(\n            \"RecordProperty associated with a property should not be null!\");",
      "right" : "throw new IllegalStateException(\n            \"RecordProperty associated with a property should not be null!\");",
      "info" : "ThrowStatement[3736-3846]:ThrowStatement[3736-3846]"
    }, {
      "left" : "if (declared)",
      "right" : "if (declared)",
      "info" : "IfStatement[3861-4092]:IfStatement[3861-4092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3875-3979]:Block[3875-3979]"
    }, {
      "left" : "defineDeclaredProperty(\n            property, prop.getType(), prop.getPropertyNode());",
      "right" : "defineDeclaredProperty(\n            property, prop.getType(), prop.getPropertyNode());",
      "info" : "ExpressionStatement[3885-3971]:ExpressionStatement[3885-3971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3985-4092]:Block[3985-4092]"
    }, {
      "left" : "defineSynthesizedProperty(\n            property, prop.getType(), prop.getPropertyNode());",
      "right" : "defineSynthesizedProperty(\n            property, prop.getType(), prop.getPropertyNode());",
      "info" : "ExpressionStatement[3995-4084]:ExpressionStatement[3995-4084]"
    }, {
      "left" : "isFrozen = true;",
      "right" : "isFrozen = true;",
      "info" : "ExpressionStatement[4135-4151]:ExpressionStatement[4135-4151]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[4222-4229]:PrimitiveType[4222-4229]"
    }, {
      "left" : "isSynthetic",
      "right" : "isSynthetic",
      "info" : "SimpleName[4230-4241]:SimpleName[4230-4241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4244-4271]:Block[4244-4271]"
    }, {
      "left" : "return !declared;",
      "right" : "return !declared;",
      "info" : "ReturnStatement[4250-4267]:ReturnStatement[4250-4267]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4754-4763]:MarkerAnnotation[4748-4757]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4766-4772]:Modifier[4760-4766]"
    }, {
      "left" : "ObjectType",
      "right" : "ObjectType",
      "info" : "SimpleType[4773-4783]:SimpleType[4767-4777]"
    }, {
      "left" : "getImplicitPrototype",
      "right" : "getImplicitPrototype",
      "info" : "SimpleName[4784-4804]:SimpleName[4778-4798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4807-4879]:Block[4801-4873]"
    }, {
      "left" : "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);",
      "right" : "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);",
      "info" : "ReturnStatement[4813-4875]:ReturnStatement[4807-4869]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4883-4892]:MarkerAnnotation[4877-4886]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[4895-4902]:PrimitiveType[4889-4896]"
    }, {
      "left" : "defineProperty",
      "right" : "defineProperty",
      "info" : "SimpleName[4903-4917]:SimpleName[4897-4911]"
    }, {
      "left" : "String propertyName",
      "right" : "String propertyName",
      "info" : "SingleVariableDeclaration[4918-4937]:SingleVariableDeclaration[4912-4931]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[4939-4950]:SingleVariableDeclaration[4933-4944]"
    }, {
      "left" : "boolean inferred",
      "right" : "boolean inferred",
      "info" : "SingleVariableDeclaration[4958-4974]:SingleVariableDeclaration[4952-4968]"
    }, {
      "left" : "Node propertyNode",
      "right" : "Node propertyNode",
      "info" : "SingleVariableDeclaration[4976-4993]:SingleVariableDeclaration[4970-4987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4995-5202]:Block[4989-5196]"
    }, {
      "left" : "if (isFrozen)",
      "right" : "if (isFrozen)",
      "info" : "IfStatement[5001-5042]:IfStatement[4995-5036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5015-5042]:Block[5009-5036]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5023-5036]:ReturnStatement[5017-5030]"
    }, {
      "left" : "if (!inferred)",
      "right" : "if (!inferred)",
      "info" : "IfStatement[5048-5112]:IfStatement[5042-5106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5063-5112]:Block[5057-5106]"
    }, {
      "left" : "properties.put(propertyName, type);",
      "right" : "properties.put(propertyName, type);",
      "info" : "ExpressionStatement[5071-5106]:ExpressionStatement[5065-5100]"
    }, {
      "left" : "return super.defineProperty(propertyName, type, inferred,\n        propertyNode);",
      "right" : "return super.defineProperty(propertyName, type, inferred,\n        propertyNode);",
      "info" : "ReturnStatement[5118-5198]:ReturnStatement[5112-5192]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7768-7777]:MarkerAnnotation[7680-7689]"
    }, {
      "left" : "RecordType",
      "right" : "RecordType",
      "info" : "SimpleType[7780-7790]:SimpleType[7692-7702]"
    }, {
      "left" : "toMaybeRecordType",
      "right" : "toMaybeRecordType",
      "info" : "SimpleName[7791-7808]:SimpleName[7703-7720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7811-7833]:Block[7723-7745]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[7817-7829]:ReturnStatement[7729-7741]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7837-7846]:MarkerAnnotation[7749-7758]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7849-7855]:Modifier[7761-7767]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7856-7863]:PrimitiveType[7768-7775]"
    }, {
      "left" : "isSubtype",
      "right" : "isSubtype",
      "info" : "SimpleName[7864-7873]:SimpleName[7776-7785]"
    }, {
      "left" : "JSType that",
      "right" : "JSType that",
      "info" : "SingleVariableDeclaration[7874-7885]:SingleVariableDeclaration[7786-7797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7887-8449]:Block[7799-8361]"
    }, {
      "left" : "if (JSType.isSubtypeHelper(this, that))",
      "right" : "if (JSType.isSubtypeHelper(this, that))",
      "info" : "IfStatement[7893-7959]:IfStatement[7805-7871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7933-7959]:Block[7845-7871]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7941-7953]:ReturnStatement[7853-7865]"
    }, {
      "left" : "if (registry.getNativeObjectType(\n            JSTypeNative.OBJECT_TYPE).isSubtype(that))",
      "right" : "if (registry.getNativeObjectType(\n            JSTypeNative.OBJECT_TYPE).isSubtype(that))",
      "info" : "IfStatement[8033-8148]:IfStatement[7945-8060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8122-8148]:Block[8034-8060]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8130-8142]:ReturnStatement[8042-8054]"
    }, {
      "left" : "if (!that.isRecordType())",
      "right" : "if (!that.isRecordType())",
      "info" : "IfStatement[8326-8379]:IfStatement[8238-8291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8352-8379]:Block[8264-8291]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8360-8373]:ReturnStatement[8272-8285]"
    }, {
      "left" : "return RecordType.isSubtype(this, that.toMaybeRecordType());",
      "right" : "return RecordType.isSubtype(this, that.toMaybeRecordType());",
      "info" : "ReturnStatement[8385-8445]:ReturnStatement[8297-8357]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10199-10208]:MarkerAnnotation[10037-10046]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[10211-10217]:SimpleType[10049-10055]"
    }, {
      "left" : "resolveInternal",
      "right" : "resolveInternal",
      "info" : "SimpleName[10218-10233]:SimpleName[10056-10071]"
    }, {
      "left" : "ErrorReporter t",
      "right" : "ErrorReporter t",
      "info" : "SingleVariableDeclaration[10234-10249]:SingleVariableDeclaration[10072-10087]"
    }, {
      "left" : "StaticScope<JSType> scope",
      "right" : "StaticScope<JSType> scope",
      "info" : "SingleVariableDeclaration[10251-10276]:SingleVariableDeclaration[10089-10114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10278-10587]:Block[10116-10425]"
    }, {
      "left" : "for (Map.Entry<String, JSType> entry : properties.entrySet())",
      "right" : "for (Map.Entry<String, JSType> entry : properties.entrySet())",
      "info" : "EnhancedForStatement[10284-10539]:EnhancedForStatement[10122-10377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10346-10539]:Block[10184-10377]"
    }, {
      "left" : "JSType type = entry.getValue();",
      "right" : "JSType type = entry.getValue();",
      "info" : "VariableDeclarationStatement[10354-10385]:VariableDeclarationStatement[10192-10223]"
    }, {
      "left" : "JSType resolvedType = type.resolve(t, scope);",
      "right" : "JSType resolvedType = type.resolve(t, scope);",
      "info" : "VariableDeclarationStatement[10392-10437]:VariableDeclarationStatement[10230-10275]"
    }, {
      "left" : "if (type != resolvedType)",
      "right" : "if (type != resolvedType)",
      "info" : "IfStatement[10444-10533]:IfStatement[10282-10371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10470-10533]:Block[10308-10371]"
    }, {
      "left" : "properties.put(entry.getKey(), resolvedType);",
      "right" : "properties.put(entry.getKey(), resolvedType);",
      "info" : "ExpressionStatement[10480-10525]:ExpressionStatement[10318-10363]"
    }, {
      "left" : "return super.resolveInternal(t, scope);",
      "right" : "return super.resolveInternal(t, scope);",
      "info" : "ReturnStatement[10544-10583]:ReturnStatement[10382-10421]"
    } ]
  },
  "interFileMappings" : { }
}