{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "protected static final String dataPrefix = \"data-\";",
      "right" : "protected static final String dataPrefix = \"data-\";",
      "info" : "FieldDeclaration[907-958]:FieldDeclaration[907-958]"
    }, {
      "left" : "private LinkedHashMap<String, Attribute> attributes = null;",
      "right" : "private LinkedHashMap<String, Attribute> attributes = null;",
      "info" : "FieldDeclaration[964-1023]:FieldDeclaration[964-1023]"
    }, {
      "left" : "public String get(String key)",
      "right" : "public String get(String key)",
      "info" : "MethodDeclaration[1175-1597]:MethodDeclaration[1175-1597]"
    }, {
      "left" : "public String getIgnoreCase(String key)",
      "right" : "public String getIgnoreCase(String key)",
      "info" : "MethodDeclaration[1603-2121]:MethodDeclaration[1603-2121]"
    }, {
      "left" : "public void put(String key, String value)",
      "right" : "public void put(String key, String value)",
      "info" : "MethodDeclaration[2127-2388]:MethodDeclaration[2127-2388]"
    }, {
      "left" : "public void put(String key, boolean value)",
      "right" : "public void put(String key, boolean value)",
      "info" : "MethodDeclaration[2394-2691]:MethodDeclaration[2394-2691]"
    }, {
      "left" : "public void put(Attribute attribute)",
      "right" : "public void put(Attribute attribute)",
      "info" : "MethodDeclaration[2697-3041]:MethodDeclaration[2697-3041]"
    }, {
      "left" : "public void remove(String key)",
      "right" : "public void remove(String key)",
      "info" : "MethodDeclaration[3047-3313]:MethodDeclaration[3047-3313]"
    }, {
      "left" : "public boolean hasKey(String key)",
      "right" : "public boolean hasKey(String key)",
      "info" : "MethodDeclaration[3797-4084]:MethodDeclaration[3782-4069]"
    }, {
      "left" : "public boolean hasKeyIgnoreCase(String key)",
      "right" : "public boolean hasKeyIgnoreCase(String key)",
      "info" : "MethodDeclaration[4090-4525]:MethodDeclaration[4075-4510]"
    }, {
      "left" : "public int size()",
      "right" : "public int size()",
      "info" : "MethodDeclaration[4531-4725]:MethodDeclaration[4516-4710]"
    }, {
      "left" : "public void addAll(Attributes incoming)",
      "right" : "public void addAll(Attributes incoming)",
      "info" : "MethodDeclaration[4731-5131]:MethodDeclaration[4716-5116]"
    }, {
      "left" : "public Iterator<Attribute> iterator()",
      "right" : "public Iterator<Attribute> iterator()",
      "info" : "MethodDeclaration[5137-5364]:MethodDeclaration[5122-5349]"
    }, {
      "left" : "public List<Attribute> asList()",
      "right" : "public List<Attribute> asList()",
      "info" : "MethodDeclaration[5370-5980]:MethodDeclaration[5355-5965]"
    }, {
      "left" : "public Map<String, String> dataset()",
      "right" : "public Map<String, String> dataset()",
      "info" : "MethodDeclaration[5986-6274]:MethodDeclaration[5971-6259]"
    }, {
      "left" : "public String html()",
      "right" : "public String html()",
      "info" : "MethodDeclaration[6280-6835]:MethodDeclaration[6265-6820]"
    }, {
      "left" : "void html(Appendable accum, Document.OutputSettings out) throws IOException",
      "right" : "void html(Appendable accum, Document.OutputSettings out) throws IOException",
      "info" : "MethodDeclaration[6841-7185]:MethodDeclaration[6826-7170]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[7191-7260]:MethodDeclaration[7176-7245]"
    }, {
      "left" : "public boolean equals(Object o)",
      "right" : "public boolean equals(Object o)",
      "info" : "MethodDeclaration[7266-7778]:MethodDeclaration[7251-7763]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[7784-8050]:MethodDeclaration[7769-8035]"
    }, {
      "left" : "public Attributes clone()",
      "right" : "public Attributes clone()",
      "info" : "MethodDeclaration[8056-8582]:MethodDeclaration[8041-8567]"
    }, {
      "left" : "Dataset",
      "right" : "Dataset",
      "info" : "TypeDeclaration[8588-10494]:TypeDeclaration[8573-10479]"
    }, {
      "left" : "private Dataset()",
      "right" : "private Dataset()",
      "info" : "MethodDeclaration[8657-8792]:MethodDeclaration[8642-8777]"
    }, {
      "left" : "public Set<Entry<String, String>> entrySet()",
      "right" : "public Set<Entry<String, String>> entrySet()",
      "info" : "MethodDeclaration[8802-8911]:MethodDeclaration[8787-8896]"
    }, {
      "left" : "public String put(String key, String value)",
      "right" : "public String put(String key, String value)",
      "info" : "MethodDeclaration[8921-9260]:MethodDeclaration[8906-9245]"
    }, {
      "left" : "EntrySet",
      "right" : "EntrySet",
      "info" : "TypeDeclaration[9270-9754]:TypeDeclaration[9255-9739]"
    }, {
      "left" : "public Iterator<Map.Entry<String, String>> iterator()",
      "right" : "public Iterator<Map.Entry<String, String>> iterator()",
      "info" : "MethodDeclaration[9355-9492]:MethodDeclaration[9340-9477]"
    }, {
      "left" : "public int size()",
      "right" : "public int size()",
      "info" : "MethodDeclaration[9505-9744]:MethodDeclaration[9490-9729]"
    }, {
      "left" : "DatasetIterator",
      "right" : "DatasetIterator",
      "info" : "TypeDeclaration[9764-10488]:TypeDeclaration[9749-10473]"
    }, {
      "left" : "private Iterator<Attribute> attrIter = attributes.values().iterator();",
      "right" : "private Iterator<Attribute> attrIter = attributes.values().iterator();",
      "info" : "FieldDeclaration[9855-9925]:FieldDeclaration[9840-9910]"
    }, {
      "left" : "private Attribute attr;",
      "right" : "private Attribute attr;",
      "info" : "FieldDeclaration[9938-9961]:FieldDeclaration[9923-9946]"
    }, {
      "left" : "public boolean hasNext()",
      "right" : "public boolean hasNext()",
      "info" : "MethodDeclaration[9974-10212]:MethodDeclaration[9959-10197]"
    }, {
      "left" : "public Entry<String, String> next()",
      "right" : "public Entry<String, String> next()",
      "info" : "MethodDeclaration[10226-10378]:MethodDeclaration[10211-10363]"
    }, {
      "left" : "public void remove()",
      "right" : "public void remove()",
      "info" : "MethodDeclaration[10392-10478]:MethodDeclaration[10377-10463]"
    }, {
      "left" : "private static String dataKey(String key)",
      "right" : "private static String dataKey(String key)",
      "info" : "MethodDeclaration[10500-10582]:MethodDeclaration[10485-10567]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1403-1597]:Block[1403-1597]"
    }, {
      "left" : "Validate.notEmpty(key);",
      "right" : "Validate.notEmpty(key);",
      "info" : "ExpressionStatement[1413-1436]:ExpressionStatement[1413-1436]"
    }, {
      "left" : "if (attributes == null)",
      "right" : "if (attributes == null)",
      "info" : "IfStatement[1446-1492]:IfStatement[1446-1492]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[1482-1492]:ReturnStatement[1482-1492]"
    }, {
      "left" : "Attribute attr = attributes.get(key);",
      "right" : "Attribute attr = attributes.get(key);",
      "info" : "VariableDeclarationStatement[1502-1539]:VariableDeclarationStatement[1502-1539]"
    }, {
      "left" : "return attr != null ? attr.getValue() : \"\";",
      "right" : "return attr != null ? attr.getValue() : \"\";",
      "info" : "ReturnStatement[1548-1591]:ReturnStatement[1548-1591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1838-2121]:Block[1838-2121]"
    }, {
      "left" : "Validate.notEmpty(key);",
      "right" : "Validate.notEmpty(key);",
      "info" : "ExpressionStatement[1848-1871]:ExpressionStatement[1848-1871]"
    }, {
      "left" : "if (attributes == null)",
      "right" : "if (attributes == null)",
      "info" : "IfStatement[1880-1926]:IfStatement[1880-1926]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[1916-1926]:ReturnStatement[1916-1926]"
    }, {
      "left" : "for (String attrKey : attributes.keySet())",
      "right" : "for (String attrKey : attributes.keySet())",
      "info" : "EnhancedForStatement[1936-2096]:EnhancedForStatement[1936-2096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1979-2096]:Block[1979-2096]"
    }, {
      "left" : "if (attrKey.equalsIgnoreCase(key))",
      "right" : "if (attrKey.equalsIgnoreCase(key))",
      "info" : "IfStatement[1993-2086]:IfStatement[1993-2086]"
    }, {
      "left" : "return attributes.get(attrKey).getValue();",
      "right" : "return attributes.get(attrKey).getValue();",
      "info" : "ReturnStatement[2044-2086]:ReturnStatement[2044-2086]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[2105-2115]:ReturnStatement[2105-2115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2310-2388]:Block[2310-2388]"
    }, {
      "left" : "Attribute attr = new Attribute(key, value);",
      "right" : "Attribute attr = new Attribute(key, value);",
      "info" : "VariableDeclarationStatement[2320-2363]:VariableDeclarationStatement[2320-2363]"
    }, {
      "left" : "put(attr);",
      "right" : "put(attr);",
      "info" : "ExpressionStatement[2372-2382]:ExpressionStatement[2372-2382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2583-2691]:Block[2583-2691]"
    }, {
      "left" : "if (value)",
      "right" : "if (value)",
      "info" : "IfStatement[2593-2685]:IfStatement[2593-2685]"
    }, {
      "left" : "put(new BooleanAttribute(key));",
      "right" : "put(new BooleanAttribute(key));",
      "info" : "ExpressionStatement[2616-2647]:ExpressionStatement[2616-2647]"
    }, {
      "left" : "remove(key);",
      "right" : "remove(key);",
      "info" : "ExpressionStatement[2673-2685]:ExpressionStatement[2673-2685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2843-3041]:Block[2843-3041]"
    }, {
      "left" : "Validate.notNull(attribute);",
      "right" : "Validate.notNull(attribute);",
      "info" : "ExpressionStatement[2853-2881]:ExpressionStatement[2853-2881]"
    }, {
      "left" : "if (attributes == null)",
      "right" : "if (attributes == null)",
      "info" : "IfStatement[2890-2980]:IfStatement[2890-2980]"
    }, {
      "left" : "attributes = new LinkedHashMap<String, Attribute>(2);",
      "right" : "attributes = new LinkedHashMap<String, Attribute>(2);",
      "info" : "ExpressionStatement[2927-2980]:ExpressionStatement[2927-2980]"
    }, {
      "left" : "attributes.put(attribute.getKey(), attribute);",
      "right" : "attributes.put(attribute.getKey(), attribute);",
      "info" : "ExpressionStatement[2989-3035]:ExpressionStatement[2989-3035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3190-3313]:Block[3190-3313]"
    }, {
      "left" : "Validate.notEmpty(key);",
      "right" : "Validate.notEmpty(key);",
      "info" : "ExpressionStatement[3200-3223]:ExpressionStatement[3200-3223]"
    }, {
      "left" : "if (attributes == null)",
      "right" : "if (attributes == null)",
      "info" : "IfStatement[3232-3275]:IfStatement[3232-3275]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[3268-3275]:ReturnStatement[3268-3275]"
    }, {
      "left" : "attributes.remove(key);",
      "right" : "attributes.remove(key);",
      "info" : "ExpressionStatement[3284-3307]:ExpressionStatement[3284-3307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4011-4084]:Block[3996-4069]"
    }, {
      "left" : "return attributes != null && attributes.containsKey(key);",
      "right" : "return attributes != null && attributes.containsKey(key);",
      "info" : "ReturnStatement[4021-4078]:ReturnStatement[4006-4063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4299-4525]:Block[4284-4510]"
    }, {
      "left" : "if (attributes == null)",
      "right" : "if (attributes == null)",
      "info" : "IfStatement[4309-4358]:IfStatement[4294-4343]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4345-4358]:ReturnStatement[4330-4343]"
    }, {
      "left" : "for (String attrKey : attributes.keySet())",
      "right" : "for (String attrKey : attributes.keySet())",
      "info" : "EnhancedForStatement[4367-4497]:EnhancedForStatement[4352-4482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4410-4497]:Block[4395-4482]"
    }, {
      "left" : "if (attrKey.equalsIgnoreCase(key))",
      "right" : "if (attrKey.equalsIgnoreCase(key))",
      "info" : "IfStatement[4424-4487]:IfStatement[4409-4472]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4475-4487]:ReturnStatement[4460-4472]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4506-4519]:ReturnStatement[4491-4504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4630-4725]:Block[4615-4710]"
    }, {
      "left" : "if (attributes == null)",
      "right" : "if (attributes == null)",
      "info" : "IfStatement[4640-4685]:IfStatement[4625-4670]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[4676-4685]:ReturnStatement[4661-4670]"
    }, {
      "left" : "return attributes.size();",
      "right" : "return attributes.size();",
      "info" : "ReturnStatement[4694-4719]:ReturnStatement[4679-4704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4910-5131]:Block[4895-5116]"
    }, {
      "left" : "if (incoming.size() == 0)",
      "right" : "if (incoming.size() == 0)",
      "info" : "IfStatement[4920-4965]:IfStatement[4905-4950]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4958-4965]:ReturnStatement[4943-4950]"
    }, {
      "left" : "if (attributes == null)",
      "right" : "if (attributes == null)",
      "info" : "IfStatement[4974-5077]:IfStatement[4959-5062]"
    }, {
      "left" : "attributes = new LinkedHashMap<String, Attribute>(incoming.size());",
      "right" : "attributes = new LinkedHashMap<String, Attribute>(incoming.size());",
      "info" : "ExpressionStatement[5010-5077]:ExpressionStatement[4995-5062]"
    }, {
      "left" : "attributes.putAll(incoming.attributes);",
      "right" : "attributes.putAll(incoming.attributes);",
      "info" : "ExpressionStatement[5086-5125]:ExpressionStatement[5071-5110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5175-5364]:Block[5160-5349]"
    }, {
      "left" : "if (attributes == null || attributes.isEmpty())",
      "right" : "if (attributes == null || attributes.isEmpty())",
      "info" : "IfStatement[5185-5310]:IfStatement[5170-5295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5233-5310]:Block[5218-5295]"
    }, {
      "left" : "return Collections.<Attribute>emptyList().iterator();",
      "right" : "return Collections.<Attribute>emptyList().iterator();",
      "info" : "ReturnStatement[5247-5300]:ReturnStatement[5232-5285]"
    }, {
      "left" : "return attributes.values().iterator();",
      "right" : "return attributes.values().iterator();",
      "info" : "ReturnStatement[5320-5358]:ReturnStatement[5305-5343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5644-5980]:Block[5629-5965]"
    }, {
      "left" : "if (attributes == null)",
      "right" : "if (attributes == null)",
      "info" : "IfStatement[5654-5721]:IfStatement[5639-5706]"
    }, {
      "left" : "return Collections.emptyList();",
      "right" : "return Collections.emptyList();",
      "info" : "ReturnStatement[5690-5721]:ReturnStatement[5675-5706]"
    }, {
      "left" : "List<Attribute> list = new ArrayList<Attribute>(attributes.size());",
      "right" : "List<Attribute> list = new ArrayList<Attribute>(attributes.size());",
      "info" : "VariableDeclarationStatement[5731-5798]:VariableDeclarationStatement[5716-5783]"
    }, {
      "left" : "for (Map.Entry<String, Attribute> entry : attributes.entrySet())",
      "right" : "for (Map.Entry<String, Attribute> entry : attributes.entrySet())",
      "info" : "EnhancedForStatement[5807-5923]:EnhancedForStatement[5792-5908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5872-5923]:Block[5857-5908]"
    }, {
      "left" : "list.add(entry.getValue());",
      "right" : "list.add(entry.getValue());",
      "info" : "ExpressionStatement[5886-5913]:ExpressionStatement[5871-5898]"
    }, {
      "left" : "return Collections.unmodifiableList(list);",
      "right" : "return Collections.unmodifiableList(list);",
      "info" : "ReturnStatement[5932-5974]:ReturnStatement[5917-5959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6237-6274]:Block[6222-6259]"
    }, {
      "left" : "return new Dataset();",
      "right" : "return new Dataset();",
      "info" : "ReturnStatement[6247-6268]:ReturnStatement[6232-6253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6493-6835]:Block[6478-6820]"
    }, {
      "left" : "StringBuilder accum = new StringBuilder();",
      "right" : "StringBuilder accum = new StringBuilder();",
      "info" : "VariableDeclarationStatement[6503-6545]:VariableDeclarationStatement[6488-6530]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6554-6796]:TryStatement[6539-6781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6558-6691]:Block[6543-6676]"
    }, {
      "left" : "html(accum, (new Document(\"\")).outputSettings());",
      "right" : "html(accum, (new Document(\"\")).outputSettings());",
      "info" : "ExpressionStatement[6572-6621]:ExpressionStatement[6557-6606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6714-6796]:Block[6699-6781]"
    }, {
      "left" : "throw new SerializationException(e);",
      "right" : "throw new SerializationException(e);",
      "info" : "ThrowStatement[6750-6786]:ThrowStatement[6735-6771]"
    }, {
      "left" : "return accum.toString();",
      "right" : "return accum.toString();",
      "info" : "ReturnStatement[6805-6829]:ReturnStatement[6790-6814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6917-7185]:Block[6902-7170]"
    }, {
      "left" : "if (attributes == null)",
      "right" : "if (attributes == null)",
      "info" : "IfStatement[6927-6970]:IfStatement[6912-6955]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6963-6970]:ReturnStatement[6948-6955]"
    }, {
      "left" : "for (Map.Entry<String, Attribute> entry : attributes.entrySet())",
      "right" : "for (Map.Entry<String, Attribute> entry : attributes.entrySet())",
      "info" : "EnhancedForStatement[6980-7179]:EnhancedForStatement[6965-7164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7045-7179]:Block[7030-7164]"
    }, {
      "left" : "Attribute attribute = entry.getValue();",
      "right" : "Attribute attribute = entry.getValue();",
      "info" : "VariableDeclarationStatement[7059-7098]:VariableDeclarationStatement[7044-7083]"
    }, {
      "left" : "accum.append(\" \");",
      "right" : "accum.append(\" \");",
      "info" : "ExpressionStatement[7111-7129]:ExpressionStatement[7096-7114]"
    }, {
      "left" : "attribute.html(accum, out);",
      "right" : "attribute.html(accum, out);",
      "info" : "ExpressionStatement[7142-7169]:ExpressionStatement[7127-7154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7230-7260]:Block[7215-7245]"
    }, {
      "left" : "return html();",
      "right" : "return html();",
      "info" : "ReturnStatement[7240-7254]:ReturnStatement[7225-7239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7535-7778]:Block[7520-7763]"
    }, {
      "left" : "if (this == o)",
      "right" : "if (this == o)",
      "info" : "IfStatement[7545-7572]:IfStatement[7530-7557]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7560-7572]:ReturnStatement[7545-7557]"
    }, {
      "left" : "if (!(o instanceof Attributes))",
      "right" : "if (!(o instanceof Attributes))",
      "info" : "IfStatement[7581-7626]:IfStatement[7566-7611]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7613-7626]:ReturnStatement[7598-7611]"
    }, {
      "left" : "Attributes that = (Attributes) o;",
      "right" : "Attributes that = (Attributes) o;",
      "info" : "VariableDeclarationStatement[7636-7669]:VariableDeclarationStatement[7621-7654]"
    }, {
      "left" : "return !(attributes != null ? !attributes.equals(that.attributes) : that.attributes != null);",
      "right" : "return !(attributes != null ? !attributes.equals(that.attributes) : that.attributes != null);",
      "info" : "ReturnStatement[7679-7772]:ReturnStatement[7664-7757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7980-8050]:Block[7965-8035]"
    }, {
      "left" : "return attributes != null ? attributes.hashCode() : 0;",
      "right" : "return attributes != null ? attributes.hashCode() : 0;",
      "info" : "ReturnStatement[7990-8044]:ReturnStatement[7975-8029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8096-8582]:Block[8081-8567]"
    }, {
      "left" : "if (attributes == null)",
      "right" : "if (attributes == null)",
      "info" : "IfStatement[8106-8166]:IfStatement[8091-8151]"
    }, {
      "left" : "return new Attributes();",
      "right" : "return new Attributes();",
      "info" : "ReturnStatement[8142-8166]:ReturnStatement[8127-8151]"
    }, {
      "left" : "Attributes clone;",
      "right" : "Attributes clone;",
      "info" : "VariableDeclarationStatement[8176-8193]:VariableDeclarationStatement[8161-8178]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8202-8357]:TryStatement[8187-8342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8206-8265]:Block[8191-8250]"
    }, {
      "left" : "clone = (Attributes) super.clone();",
      "right" : "clone = (Attributes) super.clone();",
      "info" : "ExpressionStatement[8220-8255]:ExpressionStatement[8205-8240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8303-8357]:Block[8288-8342]"
    }, {
      "left" : "throw new RuntimeException(e);",
      "right" : "throw new RuntimeException(e);",
      "info" : "ThrowStatement[8317-8347]:ThrowStatement[8302-8332]"
    }, {
      "left" : "clone.attributes = new LinkedHashMap<String, Attribute>(attributes.size());",
      "right" : "clone.attributes = new LinkedHashMap<String, Attribute>(attributes.size());",
      "info" : "ExpressionStatement[8366-8441]:ExpressionStatement[8351-8426]"
    }, {
      "left" : "for (Attribute attribute: this)\n            clone.attributes.put(attribute.getKey(), attribute.clone());",
      "right" : "for (Attribute attribute: this)\n            clone.attributes.put(attribute.getKey(), attribute.clone());",
      "info" : "EnhancedForStatement[8450-8554]:EnhancedForStatement[8435-8539]"
    }, {
      "left" : "clone.attributes.put(attribute.getKey(), attribute.clone());",
      "right" : "clone.attributes.put(attribute.getKey(), attribute.clone());",
      "info" : "ExpressionStatement[8494-8554]:ExpressionStatement[8479-8539]"
    }, {
      "left" : "return clone;",
      "right" : "return clone;",
      "info" : "ReturnStatement[8563-8576]:ReturnStatement[8548-8561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8675-8792]:Block[8660-8777]"
    }, {
      "left" : "if (attributes == null)",
      "right" : "if (attributes == null)",
      "info" : "IfStatement[8689-8782]:IfStatement[8674-8767]"
    }, {
      "left" : "attributes = new LinkedHashMap<String, Attribute>(2);",
      "right" : "attributes = new LinkedHashMap<String, Attribute>(2);",
      "info" : "ExpressionStatement[8729-8782]:ExpressionStatement[8714-8767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8865-8911]:Block[8850-8896]"
    }, {
      "left" : "return new EntrySet();",
      "right" : "return new EntrySet();",
      "info" : "ReturnStatement[8879-8901]:ReturnStatement[8864-8886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8983-9260]:Block[8968-9245]"
    }, {
      "left" : "String dataKey = dataKey(key);",
      "right" : "String dataKey = dataKey(key);",
      "info" : "VariableDeclarationStatement[8997-9027]:VariableDeclarationStatement[8982-9012]"
    }, {
      "left" : "String oldValue = hasKey(dataKey) ? attributes.get(dataKey).getValue() : null;",
      "right" : "String oldValue = hasKey(dataKey) ? attributes.get(dataKey).getValue() : null;",
      "info" : "VariableDeclarationStatement[9040-9118]:VariableDeclarationStatement[9025-9103]"
    }, {
      "left" : "Attribute attr = new Attribute(dataKey, value);",
      "right" : "Attribute attr = new Attribute(dataKey, value);",
      "info" : "VariableDeclarationStatement[9131-9178]:VariableDeclarationStatement[9116-9163]"
    }, {
      "left" : "attributes.put(dataKey, attr);",
      "right" : "attributes.put(dataKey, attr);",
      "info" : "ExpressionStatement[9191-9221]:ExpressionStatement[9176-9206]"
    }, {
      "left" : "return oldValue;",
      "right" : "return oldValue;",
      "info" : "ReturnStatement[9234-9250]:ReturnStatement[9219-9235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9431-9492]:Block[9416-9477]"
    }, {
      "left" : "return new DatasetIterator();",
      "right" : "return new DatasetIterator();",
      "info" : "ReturnStatement[9449-9478]:ReturnStatement[9434-9463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9545-9744]:Block[9530-9729]"
    }, {
      "left" : "int count = 0;",
      "right" : "int count = 0;",
      "info" : "VariableDeclarationStatement[9563-9577]:VariableDeclarationStatement[9548-9562]"
    }, {
      "left" : "Iterator iter = new DatasetIterator();",
      "right" : "Iterator iter = new DatasetIterator();",
      "info" : "VariableDeclarationStatement[9594-9632]:VariableDeclarationStatement[9579-9617]"
    }, {
      "left" : "while (iter.hasNext())\n                    count++;",
      "right" : "while (iter.hasNext())\n                    count++;",
      "info" : "WhileStatement[9649-9700]:WhileStatement[9634-9685]"
    }, {
      "left" : "count++;",
      "right" : "count++;",
      "info" : "ExpressionStatement[9692-9700]:ExpressionStatement[9677-9685]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[9717-9730]:ReturnStatement[9702-9715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9999-10212]:Block[9984-10197]"
    }, {
      "left" : "while (attrIter.hasNext())",
      "right" : "while (attrIter.hasNext())",
      "info" : "WhileStatement[10017-10168]:WhileStatement[10002-10153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10044-10168]:Block[10029-10153]"
    }, {
      "left" : "attr = attrIter.next();",
      "right" : "attr = attrIter.next();",
      "info" : "ExpressionStatement[10066-10089]:ExpressionStatement[10051-10074]"
    }, {
      "left" : "if (attr.isDataAttribute())",
      "right" : "if (attr.isDataAttribute())",
      "info" : "IfStatement[10110-10150]:IfStatement[10095-10135]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[10138-10150]:ReturnStatement[10123-10135]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10185-10198]:ReturnStatement[10170-10183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10262-10378]:Block[10247-10363]"
    }, {
      "left" : "return new Attribute(attr.getKey().substring(dataPrefix.length()), attr.getValue());",
      "right" : "return new Attribute(attr.getKey().substring(dataPrefix.length()), attr.getValue());",
      "info" : "ReturnStatement[10280-10364]:ReturnStatement[10265-10349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10413-10478]:Block[10398-10463]"
    }, {
      "left" : "attributes.remove(attr.getKey());",
      "right" : "attributes.remove(attr.getKey());",
      "info" : "ExpressionStatement[10431-10464]:ExpressionStatement[10416-10449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10542-10582]:Block[10527-10567]"
    }, {
      "left" : "return dataPrefix + key;",
      "right" : "return dataPrefix + key;",
      "info" : "ReturnStatement[10552-10576]:ReturnStatement[10537-10561]"
    } ]
  },
  "interFileMappings" : { }
}