{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "UpdateMapperUnitTests",
      "right" : "UpdateMapperUnitTests",
      "info" : "TypeDeclaration[2631-33654]:TypeDeclaration[2659-35619]"
    }, {
      "left" : "@Mock MongoDbFactory factory;",
      "right" : "@Mock MongoDbFactory factory;",
      "info" : "FieldDeclaration[2837-2866]:FieldDeclaration[2865-2894]"
    }, {
      "left" : "MappingMongoConverter converter;",
      "right" : "MappingMongoConverter converter;",
      "info" : "FieldDeclaration[2868-2900]:FieldDeclaration[2896-2928]"
    }, {
      "left" : "MongoMappingContext context;",
      "right" : "MongoMappingContext context;",
      "info" : "FieldDeclaration[2902-2930]:FieldDeclaration[2930-2958]"
    }, {
      "left" : "UpdateMapper mapper;",
      "right" : "UpdateMapper mapper;",
      "info" : "FieldDeclaration[2932-2952]:FieldDeclaration[2960-2980]"
    }, {
      "left" : "private Converter<NestedEntity, DBObject> writingConverterSpy;",
      "right" : "private Converter<NestedEntity, DBObject> writingConverterSpy;",
      "info" : "FieldDeclaration[2955-3017]:FieldDeclaration[2983-3045]"
    }, {
      "left" : "public void setUp()",
      "right" : "public void setUp()",
      "info" : "MethodDeclaration[3020-3596]:MethodDeclaration[3048-3624]"
    }, {
      "left" : "public void updateMapperRetainsTypeInformationForCollectionField()",
      "right" : "public void updateMapperRetainsTypeInformationForCollectionField()",
      "info" : "MethodDeclaration[3599-4112]:MethodDeclaration[3627-4140]"
    }, {
      "left" : "public void updateMapperShouldRetainTypeInformationForNestedEntities()",
      "right" : "public void updateMapperShouldRetainTypeInformationForNestedEntities()",
      "info" : "MethodDeclaration[4115-4646]:MethodDeclaration[4143-4674]"
    }, {
      "left" : "public void updateMapperShouldNotPersistTypeInformationForKnownSimpleTypes()",
      "right" : "public void updateMapperShouldNotPersistTypeInformationForKnownSimpleTypes()",
      "info" : "MethodDeclaration[4649-5106]:MethodDeclaration[4677-5134]"
    }, {
      "left" : "public void updateMapperShouldNotPersistTypeInformationForNullValues()",
      "right" : "public void updateMapperShouldNotPersistTypeInformationForNullValues()",
      "info" : "MethodDeclaration[5109-5557]:MethodDeclaration[5137-5585]"
    }, {
      "left" : "public void updateMapperShouldRetainTypeInformationForNestedCollectionElements()",
      "right" : "public void updateMapperShouldRetainTypeInformationForNestedCollectionElements()",
      "info" : "MethodDeclaration[5560-6156]:MethodDeclaration[5588-6184]"
    }, {
      "left" : "public void updateMapperShouldSupportNestedCollectionElementUpdates()",
      "right" : "public void updateMapperShouldSupportNestedCollectionElementUpdates()",
      "info" : "MethodDeclaration[6159-6728]:MethodDeclaration[6187-6756]"
    }, {
      "left" : "public void updateMapperShouldWriteTypeInformationForComplexNestedCollectionElementUpdates()",
      "right" : "public void updateMapperShouldWriteTypeInformationForComplexNestedCollectionElementUpdates()",
      "info" : "MethodDeclaration[6731-7551]:MethodDeclaration[6759-7579]"
    }, {
      "left" : "public void updateMapperShouldConvertPushCorrectlyWhenCalledWithEachUsingSimpleTypes()",
      "right" : "public void updateMapperShouldConvertPushCorrectlyWhenCalledWithEachUsingSimpleTypes()",
      "info" : "MethodDeclaration[7554-8294]:MethodDeclaration[7582-8322]"
    }, {
      "left" : "public void updateMapperShouldConvertPushWhithoutAddingClassInformationWhenUsedWithEvery()",
      "right" : "public void updateMapperShouldConvertPushWhithoutAddingClassInformationWhenUsedWithEvery()",
      "info" : "MethodDeclaration[8297-8837]:MethodDeclaration[8325-8865]"
    }, {
      "left" : "public void updateMapperShouldConvertPushCorrectlyWhenCalledWithEachUsingCustomTypes()",
      "right" : "public void updateMapperShouldConvertPushCorrectlyWhenCalledWithEachUsingCustomTypes()",
      "info" : "MethodDeclaration[8840-9579]:MethodDeclaration[8868-9607]"
    }, {
      "left" : "public void updateMapperShouldRetainClassInformationForPushCorrectlyWhenCalledWithEachUsingCustomTypes()",
      "right" : "public void updateMapperShouldRetainClassInformationForPushCorrectlyWhenCalledWithEachUsingCustomTypes()",
      "info" : "MethodDeclaration[9582-10216]:MethodDeclaration[9610-10244]"
    }, {
      "left" : "public void testUpdateShouldAllowMultiplePushEachForDifferentFields()",
      "right" : "public void testUpdateShouldAllowMultiplePushEachForDifferentFields()",
      "info" : "MethodDeclaration[10219-10767]:MethodDeclaration[10247-10795]"
    }, {
      "left" : "public void updatePushEachAtPositionWorksCorrectlyWhenGivenPositiveIndexParameter()",
      "right" : "public void updatePushEachAtPositionWorksCorrectlyWhenGivenPositiveIndexParameter()",
      "info" : "MethodDeclaration[10770-11410]:MethodDeclaration[10798-11438]"
    }, {
      "left" : "public void updatePushEachAtPositionWorksCorrectlyWhenGivenPositionFirst()",
      "right" : "public void updatePushEachAtPositionWorksCorrectlyWhenGivenPositionFirst()",
      "info" : "MethodDeclaration[11413-12057]:MethodDeclaration[11441-12085]"
    }, {
      "left" : "public void updatePushEachAtPositionWorksCorrectlyWhenGivenPositionLast()",
      "right" : "public void updatePushEachAtPositionWorksCorrectlyWhenGivenPositionLast()",
      "info" : "MethodDeclaration[12060-12650]:MethodDeclaration[12088-12678]"
    }, {
      "left" : "public void updatePushEachAtPositionWorksCorrectlyWhenGivenPositionNull()",
      "right" : "public void updatePushEachAtPositionWorksCorrectlyWhenGivenPositionNull()",
      "info" : "MethodDeclaration[12653-13234]:MethodDeclaration[12681-13262]"
    }, {
      "left" : "public void testUpdateMapperShouldConsiderCustomWriteTarget()",
      "right" : "public void testUpdateMapperShouldConsiderCustomWriteTarget()",
      "info" : "MethodDeclaration[13237-13824]:MethodDeclaration[13265-13852]"
    }, {
      "left" : "public void createsDbRefForEntityIdOnPulls()",
      "right" : "public void createsDbRefForEntityIdOnPulls()",
      "info" : "MethodDeclaration[13827-14283]:MethodDeclaration[13855-14311]"
    }, {
      "left" : "public void createsDbRefForEntityOnPulls()",
      "right" : "public void createsDbRefForEntityOnPulls()",
      "info" : "MethodDeclaration[14286-14797]:MethodDeclaration[14314-14825]"
    }, {
      "left" : "public void rejectsInvalidFieldReferenceForDbRef()",
      "right" : "public void rejectsInvalidFieldReferenceForDbRef()",
      "info" : "MethodDeclaration[14800-15119]:MethodDeclaration[14828-15147]"
    }, {
      "left" : "public void rendersNestedDbRefCorrectly()",
      "right" : "public void rendersNestedDbRefCorrectly()",
      "info" : "MethodDeclaration[15122-15549]:MethodDeclaration[15150-15577]"
    }, {
      "left" : "public void rendersUpdateOfDbRefPropertyWithDomainObjectCorrectly()",
      "right" : "public void rendersUpdateOfDbRefPropertyWithDomainObjectCorrectly()",
      "info" : "MethodDeclaration[15552-16074]:MethodDeclaration[15580-16102]"
    }, {
      "left" : "public void rendersUpdateAndPreservesKeyForPathsNotPointingToProperty()",
      "right" : "public void rendersUpdateAndPreservesKeyForPathsNotPointingToProperty()",
      "info" : "MethodDeclaration[16077-16540]:MethodDeclaration[16105-16568]"
    }, {
      "left" : "public void doesNotConvertRawDbObjects()",
      "right" : "public void doesNotConvertRawDbObjects()",
      "info" : "MethodDeclaration[16543-17233]:MethodDeclaration[16571-17261]"
    }, {
      "left" : "public void testUpdateShouldApply$addToSetCorrectlyWhenUsedWith$each()",
      "right" : "public void testUpdateShouldApply$addToSetCorrectlyWhenUsedWith$each()",
      "info" : "MethodDeclaration[17236-17887]:MethodDeclaration[17264-17915]"
    }, {
      "left" : "public void testUpdateShouldRetainClassTypeInformationWhenUsing$addToSetWith$eachForCustomTypes()",
      "right" : "public void testUpdateShouldRetainClassTypeInformationWhenUsing$addToSetWith$eachForCustomTypes()",
      "info" : "MethodDeclaration[17890-18650]:MethodDeclaration[17918-18678]"
    }, {
      "left" : "public void updateOnDbrefPropertyOfInterfaceTypeWithoutExplicitGetterForIdShouldBeMappedCorrectly()",
      "right" : "public void updateOnDbrefPropertyOfInterfaceTypeWithoutExplicitGetterForIdShouldBeMappedCorrectly()",
      "info" : "MethodDeclaration[18653-19351]:MethodDeclaration[18681-19379]"
    }, {
      "left" : "public void updateMapperConvertsNestedQueryCorrectly()",
      "right" : "public void updateMapperConvertsNestedQueryCorrectly()",
      "info" : "MethodDeclaration[19354-20040]:MethodDeclaration[19382-20068]"
    }, {
      "left" : "public void updateMapperConvertsPullWithNestedQuerfyOnDBRefCorrectly()",
      "right" : "public void updateMapperConvertsPullWithNestedQuerfyOnDBRefCorrectly()",
      "info" : "MethodDeclaration[20043-20641]:MethodDeclaration[20071-20669]"
    }, {
      "left" : "public void shouldNotRemovePositionalParameter()",
      "right" : "public void shouldNotRemovePositionalParameter()",
      "info" : "MethodDeclaration[20644-21131]:MethodDeclaration[20672-21159]"
    }, {
      "left" : "public void mappingEachOperatorShouldNotAddTypeInfoForNonInterfaceNonAbstractTypes()",
      "right" : "public void mappingEachOperatorShouldNotAddTypeInfoForNonInterfaceNonAbstractTypes()",
      "info" : "MethodDeclaration[21134-21738]:MethodDeclaration[21162-21766]"
    }, {
      "left" : "public void mappingEachOperatorShouldAddTypeHintForInterfaceTypes()",
      "right" : "public void mappingEachOperatorShouldAddTypeHintForInterfaceTypes()",
      "info" : "MethodDeclaration[21741-22320]:MethodDeclaration[21769-22348]"
    }, {
      "left" : "public void mappingEachOperatorShouldAddTypeHintForAbstractTypes()",
      "right" : "public void mappingEachOperatorShouldAddTypeHintForAbstractTypes()",
      "info" : "MethodDeclaration[22323-22966]:MethodDeclaration[22351-22994]"
    }, {
      "left" : "public void mappingShouldOnlyRemoveTypeHintFromTopLevelTypeInCaseOfNestedDocument()",
      "right" : "public void mappingShouldOnlyRemoveTypeHintFromTopLevelTypeInCaseOfNestedDocument()",
      "info" : "MethodDeclaration[22969-23836]:MethodDeclaration[22997-23864]"
    }, {
      "left" : "public void mappingShouldRetainTypeInformationOfNestedListWhenUpdatingConcreteyParentType()",
      "right" : "public void mappingShouldRetainTypeInformationOfNestedListWhenUpdatingConcreteyParentType()",
      "info" : "MethodDeclaration[23839-24654]:MethodDeclaration[23867-24682]"
    }, {
      "left" : "public void mappingShouldRetainTypeInformationForObjectValues()",
      "right" : "public void mappingShouldRetainTypeInformationForObjectValues()",
      "info" : "MethodDeclaration[24657-25170]:MethodDeclaration[24685-25198]"
    }, {
      "left" : "public void mappingShouldNotRetainTypeInformationForConcreteValues()",
      "right" : "public void mappingShouldNotRetainTypeInformationForConcreteValues()",
      "info" : "MethodDeclaration[25173-25686]:MethodDeclaration[25201-25714]"
    }, {
      "left" : "public void mappingShouldRetainTypeInformationForObjectValuesWithAlias()",
      "right" : "public void mappingShouldRetainTypeInformationForObjectValuesWithAlias()",
      "info" : "MethodDeclaration[25689-26232]:MethodDeclaration[25717-26260]"
    }, {
      "left" : "public void mappingShouldRetrainTypeInformationWhenValueTypeOfMapDoesNotMatchItsDeclaration()",
      "right" : "public void mappingShouldRetrainTypeInformationWhenValueTypeOfMapDoesNotMatchItsDeclaration()",
      "info" : "MethodDeclaration[26235-26889]:MethodDeclaration[26263-26917]"
    }, {
      "left" : "public void mappingShouldNotContainTypeInformationWhenValueTypeOfMapMatchesDeclaration()",
      "right" : "public void mappingShouldNotContainTypeInformationWhenValueTypeOfMapMatchesDeclaration()",
      "info" : "MethodDeclaration[26892-27542]:MethodDeclaration[26920-27570]"
    }, {
      "left" : "public void mapsUpdateWithBothReadingAndWritingConverterRegistered()",
      "right" : "public void mapsUpdateWithBothReadingAndWritingConverterRegistered()",
      "info" : "MethodDeclaration[27545-28566]:MethodDeclaration[27573-28594]"
    }, {
      "left" : "DomainTypeWrappingConcreteyTypeHavingListOfInterfaceTypeAttributes",
      "right" : "DomainTypeWrappingConcreteyTypeHavingListOfInterfaceTypeAttributes",
      "info" : "TypeDeclaration[28569-28718]:TypeDeclaration[30476-30625]"
    }, {
      "left" : "ListModelWrapper concreteTypeWithListAttributeOfInterfaceType;",
      "right" : "ListModelWrapper concreteTypeWithListAttributeOfInterfaceType;",
      "info" : "FieldDeclaration[28653-28715]:FieldDeclaration[30560-30622]"
    }, {
      "left" : "DomainTypeWithListOfConcreteTypesHavingSingleInterfaceTypeAttribute",
      "right" : "DomainTypeWithListOfConcreteTypesHavingSingleInterfaceTypeAttribute",
      "info" : "TypeDeclaration[28721-28892]:TypeDeclaration[30628-30799]"
    }, {
      "left" : "List<WrapperAroundInterfaceType> listHoldingConcretyTypeWithInterfaceTypeAttribute;",
      "right" : "List<WrapperAroundInterfaceType> listHoldingConcretyTypeWithInterfaceTypeAttribute;",
      "info" : "FieldDeclaration[28806-28889]:FieldDeclaration[30713-30796]"
    }, {
      "left" : "WrapperAroundInterfaceType",
      "right" : "WrapperAroundInterfaceType",
      "info" : "TypeDeclaration[28895-28962]:TypeDeclaration[30802-30869]"
    }, {
      "left" : "Model interfaceType;",
      "right" : "Model interfaceType;",
      "info" : "FieldDeclaration[28939-28959]:FieldDeclaration[30846-30866]"
    }, {
      "left" : "DocumentWithReferenceToInterface",
      "right" : "DocumentWithReferenceToInterface",
      "info" : "TypeDeclaration[28965-29210]:TypeDeclaration[30872-31117]"
    }, {
      "left" : "String getId();",
      "right" : "String getId();",
      "info" : "MethodDeclaration[29126-29141]:MethodDeclaration[31033-31048]"
    }, {
      "left" : "InterfaceDocumentDefinitionWithoutId getReferencedDocument();",
      "right" : "InterfaceDocumentDefinitionWithoutId getReferencedDocument();",
      "info" : "MethodDeclaration[29145-29206]:MethodDeclaration[31052-31113]"
    }, {
      "left" : "InterfaceDocumentDefinitionWithoutId",
      "right" : "InterfaceDocumentDefinitionWithoutId",
      "info" : "TypeDeclaration[29213-29293]:TypeDeclaration[31120-31200]"
    }, {
      "left" : "String getValue();",
      "right" : "String getValue();",
      "info" : "MethodDeclaration[29272-29290]:MethodDeclaration[31179-31197]"
    }, {
      "left" : "InterfaceDocumentDefinitionImpl",
      "right" : "InterfaceDocumentDefinitionImpl",
      "info" : "TypeDeclaration[29296-29610]:TypeDeclaration[31203-31517]"
    }, {
      "left" : "@Id String id;",
      "right" : "@Id String id;",
      "info" : "FieldDeclaration[29394-29408]:FieldDeclaration[31301-31315]"
    }, {
      "left" : "String value;",
      "right" : "String value;",
      "info" : "FieldDeclaration[29411-29424]:FieldDeclaration[31318-31331]"
    }, {
      "left" : "public InterfaceDocumentDefinitionImpl(String id, String value)",
      "right" : "public InterfaceDocumentDefinitionImpl(String id, String value)",
      "info" : "MethodDeclaration[29428-29538]:MethodDeclaration[31335-31445]"
    }, {
      "left" : "public String getValue()",
      "right" : "public String getValue()",
      "info" : "MethodDeclaration[29542-29606]:MethodDeclaration[31449-31513]"
    }, {
      "left" : "DocumentWithReferenceToInterfaceImpl",
      "right" : "DocumentWithReferenceToInterfaceImpl",
      "info" : "TypeDeclaration[29613-30224]:TypeDeclaration[31520-32131]"
    }, {
      "left" : "private @Id String id;",
      "right" : "private @Id String id;",
      "info" : "FieldDeclaration[29712-29734]:FieldDeclaration[31619-31641]"
    }, {
      "left" : "@org.springframework.data.mongodb.core.mapping.DBRef //\n\t\tprivate InterfaceDocumentDefinitionWithoutId referencedDocument;",
      "right" : "@org.springframework.data.mongodb.core.mapping.DBRef //\n\t\tprivate InterfaceDocumentDefinitionWithoutId referencedDocument;",
      "info" : "FieldDeclaration[29738-29860]:FieldDeclaration[31645-31767]"
    }, {
      "left" : "public String getId()",
      "right" : "public String getId()",
      "info" : "MethodDeclaration[29864-29905]:MethodDeclaration[31771-31812]"
    }, {
      "left" : "public void setId(String id)",
      "right" : "public void setId(String id)",
      "info" : "MethodDeclaration[29909-29960]:MethodDeclaration[31816-31867]"
    }, {
      "left" : "public void setModel(InterfaceDocumentDefinitionWithoutId referencedDocument)",
      "right" : "public void setModel(InterfaceDocumentDefinitionWithoutId referencedDocument)",
      "info" : "MethodDeclaration[29964-30096]:MethodDeclaration[31871-32003]"
    }, {
      "left" : "public InterfaceDocumentDefinitionWithoutId getReferencedDocument()",
      "right" : "public InterfaceDocumentDefinitionWithoutId getReferencedDocument()",
      "info" : "MethodDeclaration[30100-30220]:MethodDeclaration[32007-32127]"
    }, {
      "left" : "Model",
      "right" : "Model",
      "info" : "TypeDeclaration[30227-30252]:TypeDeclaration[32134-32159]"
    }, {
      "left" : "ModelImpl",
      "right" : "ModelImpl",
      "info" : "TypeDeclaration[30255-30380]:TypeDeclaration[32162-32287]"
    }, {
      "left" : "public int value;",
      "right" : "public int value;",
      "info" : "FieldDeclaration[30299-30316]:FieldDeclaration[32206-32223]"
    }, {
      "left" : "public ModelImpl(int value)",
      "right" : "public ModelImpl(int value)",
      "info" : "MethodDeclaration[30320-30376]:MethodDeclaration[32227-32283]"
    }, {
      "left" : "ModelWrapper",
      "right" : "ModelWrapper",
      "info" : "TypeDeclaration[30383-30521]:TypeDeclaration[32290-32428]"
    }, {
      "left" : "Model model;",
      "right" : "Model model;",
      "info" : "FieldDeclaration[30413-30425]:FieldDeclaration[32320-32332]"
    }, {
      "left" : "public ModelWrapper()",
      "right" : "public ModelWrapper()",
      "info" : "MethodDeclaration[30429-30453]:MethodDeclaration[32336-32360]"
    }, {
      "left" : "public ModelWrapper(Model model)",
      "right" : "public ModelWrapper(Model model)",
      "info" : "MethodDeclaration[30457-30518]:MethodDeclaration[32364-32425]"
    }, {
      "left" : "ListModelWrapper",
      "right" : "ListModelWrapper",
      "info" : "TypeDeclaration[30524-30581]:TypeDeclaration[32431-32488]"
    }, {
      "left" : "List<Model> models;",
      "right" : "List<Model> models;",
      "info" : "FieldDeclaration[30559-30578]:FieldDeclaration[32466-32485]"
    }, {
      "left" : "ListModel",
      "right" : "ListModel",
      "info" : "TypeDeclaration[30584-30719]:TypeDeclaration[32491-32626]"
    }, {
      "left" : "List<String> values;",
      "right" : "List<String> values;",
      "info" : "FieldDeclaration[30612-30632]:FieldDeclaration[32519-32539]"
    }, {
      "left" : "public ListModel(String... values)",
      "right" : "public ListModel(String... values)",
      "info" : "MethodDeclaration[30636-30716]:MethodDeclaration[32543-32623]"
    }, {
      "left" : "ParentClass",
      "right" : "ParentClass",
      "info" : "TypeDeclaration[30722-30995]:TypeDeclaration[32629-32902]"
    }, {
      "left" : "String id;",
      "right" : "String id;",
      "info" : "FieldDeclaration[30752-30762]:FieldDeclaration[32659-32669]"
    }, {
      "left" : "@Field(\"aliased\") //\n\t\tList<? extends AbstractChildClass> list;",
      "right" : "@Field(\"aliased\") //\n\t\tList<? extends AbstractChildClass> list;",
      "info" : "FieldDeclaration[30766-30829]:FieldDeclaration[32673-32736]"
    }, {
      "left" : "@Field //\n\t\tList<Model> listOfInterface;",
      "right" : "@Field //\n\t\tList<Model> listOfInterface;",
      "info" : "FieldDeclaration[30833-30873]:FieldDeclaration[32740-32780]"
    }, {
      "left" : "public ParentClass(String id, List<? extends AbstractChildClass> list)",
      "right" : "public ParentClass(String id, List<? extends AbstractChildClass> list)",
      "info" : "MethodDeclaration[30877-30991]:MethodDeclaration[32784-32898]"
    }, {
      "left" : "AbstractChildClass",
      "right" : "AbstractChildClass",
      "info" : "TypeDeclaration[30998-31266]:TypeDeclaration[32905-33173]"
    }, {
      "left" : "String id;",
      "right" : "String id;",
      "info" : "FieldDeclaration[31044-31054]:FieldDeclaration[32951-32961]"
    }, {
      "left" : "String value;",
      "right" : "String value;",
      "info" : "FieldDeclaration[31057-31070]:FieldDeclaration[32964-32977]"
    }, {
      "left" : "String otherValue;",
      "right" : "String otherValue;",
      "info" : "FieldDeclaration[31073-31091]:FieldDeclaration[32980-32998]"
    }, {
      "left" : "AbstractChildClass someObject;",
      "right" : "AbstractChildClass someObject;",
      "info" : "FieldDeclaration[31094-31124]:FieldDeclaration[33001-33031]"
    }, {
      "left" : "public AbstractChildClass(String id, String value)",
      "right" : "public AbstractChildClass(String id, String value)",
      "info" : "MethodDeclaration[31128-31263]:MethodDeclaration[33035-33170]"
    }, {
      "left" : "ConcreteChildClass",
      "right" : "ConcreteChildClass",
      "info" : "TypeDeclaration[31269-31413]:TypeDeclaration[33176-33320]"
    }, {
      "left" : "public ConcreteChildClass(String id, String value)",
      "right" : "public ConcreteChildClass(String id, String value)",
      "info" : "MethodDeclaration[31333-31410]:MethodDeclaration[33240-33317]"
    }, {
      "left" : "DomainEntity",
      "right" : "DomainEntity",
      "info" : "TypeDeclaration[31416-31600]:TypeDeclaration[33323-33507]"
    }, {
      "left" : "List<NestedEntity> collectionOfNestedEntities;",
      "right" : "List<NestedEntity> collectionOfNestedEntities;",
      "info" : "FieldDeclaration[31446-31492]:FieldDeclaration[33353-33399]"
    }, {
      "left" : "public List<NestedEntity> getCollectionOfNestedEntities()",
      "right" : "public List<NestedEntity> getCollectionOfNestedEntities()",
      "info" : "MethodDeclaration[31496-31597]:MethodDeclaration[33403-33504]"
    }, {
      "left" : "NestedEntity",
      "right" : "NestedEntity",
      "info" : "TypeDeclaration[31603-31724]:TypeDeclaration[33510-33631]"
    }, {
      "left" : "String name;",
      "right" : "String name;",
      "info" : "FieldDeclaration[31633-31645]:FieldDeclaration[33540-33552]"
    }, {
      "left" : "public NestedEntity(String name)",
      "right" : "public NestedEntity(String name)",
      "info" : "MethodDeclaration[31649-31720]:MethodDeclaration[33556-33627]"
    }, {
      "left" : "NestedEntityWriteConverter",
      "right" : "NestedEntityWriteConverter",
      "info" : "TypeDeclaration[31727-31932]:TypeDeclaration[33634-33839]"
    }, {
      "left" : "public DBObject convert(NestedEntity source)",
      "right" : "public DBObject convert(NestedEntity source)",
      "info" : "MethodDeclaration[31836-31929]:MethodDeclaration[33743-33836]"
    }, {
      "left" : "DocumentWithDBRefCollection",
      "right" : "DocumentWithDBRefCollection",
      "info" : "TypeDeclaration[31935-32196]:TypeDeclaration[33842-34103]"
    }, {
      "left" : "@Id public String id;",
      "right" : "@Id public String id;",
      "info" : "FieldDeclaration[31981-32002]:FieldDeclaration[33888-33909]"
    }, {
      "left" : "@org.springframework.data.mongodb.core.mapping.DBRef //\n\t\tpublic List<Entity> dbRefAnnotatedList;",
      "right" : "@org.springframework.data.mongodb.core.mapping.DBRef //\n\t\tpublic List<Entity> dbRefAnnotatedList;",
      "info" : "FieldDeclaration[32006-32103]:FieldDeclaration[33913-34010]"
    }, {
      "left" : "@org.springframework.data.mongodb.core.mapping.DBRef //\n\t\tpublic Entity dbRefProperty;",
      "right" : "@org.springframework.data.mongodb.core.mapping.DBRef //\n\t\tpublic Entity dbRefProperty;",
      "info" : "FieldDeclaration[32107-32193]:FieldDeclaration[34014-34100]"
    }, {
      "left" : "Entity",
      "right" : "Entity",
      "info" : "TypeDeclaration[32199-32263]:TypeDeclaration[34106-34170]"
    }, {
      "left" : "@Id public String id;",
      "right" : "@Id public String id;",
      "info" : "FieldDeclaration[32224-32245]:FieldDeclaration[34131-34152]"
    }, {
      "left" : "String name;",
      "right" : "String name;",
      "info" : "FieldDeclaration[32248-32260]:FieldDeclaration[34155-34167]"
    }, {
      "left" : "Wrapper",
      "right" : "Wrapper",
      "info" : "TypeDeclaration[32266-32347]:TypeDeclaration[34173-34254]"
    }, {
      "left" : "@Field(\"mapped\") DocumentWithDBRefCollection nested;",
      "right" : "@Field(\"mapped\") DocumentWithDBRefCollection nested;",
      "info" : "FieldDeclaration[32292-32344]:FieldDeclaration[34199-34251]"
    }, {
      "left" : "DocumentWithNestedCollection",
      "right" : "DocumentWithNestedCollection",
      "info" : "TypeDeclaration[32350-32431]:TypeDeclaration[34257-34338]"
    }, {
      "left" : "List<NestedDocument> nestedDocs;",
      "right" : "List<NestedDocument> nestedDocs;",
      "info" : "FieldDeclaration[32396-32428]:FieldDeclaration[34303-34335]"
    }, {
      "left" : "NestedDocument",
      "right" : "NestedDocument",
      "info" : "TypeDeclaration[32434-32559]:TypeDeclaration[34341-34466]"
    }, {
      "left" : "String name;",
      "right" : "String name;",
      "info" : "FieldDeclaration[32467-32479]:FieldDeclaration[34374-34386]"
    }, {
      "left" : "public NestedDocument(String name)",
      "right" : "public NestedDocument(String name)",
      "info" : "MethodDeclaration[32483-32556]:MethodDeclaration[34390-34463]"
    }, {
      "left" : "EntityWithObject",
      "right" : "EntityWithObject",
      "info" : "TypeDeclaration[32562-32645]:TypeDeclaration[34469-34552]"
    }, {
      "left" : "Object value;",
      "right" : "Object value;",
      "info" : "FieldDeclaration[32597-32610]:FieldDeclaration[34504-34517]"
    }, {
      "left" : "NestedDocument concreteValue;",
      "right" : "NestedDocument concreteValue;",
      "info" : "FieldDeclaration[32613-32642]:FieldDeclaration[34520-34549]"
    }, {
      "left" : "EntityWithAliasedObject",
      "right" : "EntityWithAliasedObject",
      "info" : "TypeDeclaration[32648-32730]:TypeDeclaration[34555-34637]"
    }, {
      "left" : "@Field(\"renamed-value\") Object value;",
      "right" : "@Field(\"renamed-value\") Object value;",
      "info" : "FieldDeclaration[32690-32727]:FieldDeclaration[34597-34634]"
    }, {
      "left" : "EntityWithObjectMap",
      "right" : "EntityWithObjectMap",
      "info" : "TypeDeclaration[32733-32841]:TypeDeclaration[34640-34748]"
    }, {
      "left" : "Map<Object, Object> map;",
      "right" : "Map<Object, Object> map;",
      "info" : "FieldDeclaration[32771-32795]:FieldDeclaration[34678-34702]"
    }, {
      "left" : "Map<Object, NestedDocument> concreteMap;",
      "right" : "Map<Object, NestedDocument> concreteMap;",
      "info" : "FieldDeclaration[32798-32838]:FieldDeclaration[34705-34745]"
    }, {
      "left" : "ClassWithEnum",
      "right" : "ClassWithEnum",
      "info" : "TypeDeclaration[32844-33652]:TypeDeclaration[34751-35559]"
    }, {
      "left" : "Allocation allocation;",
      "right" : "Allocation allocation;",
      "info" : "FieldDeclaration[32876-32898]:FieldDeclaration[34783-34805]"
    }, {
      "left" : "enum : Allocation",
      "right" : "enum : Allocation",
      "info" : "EnumDeclaration[32902-33253]:EnumDeclaration[34809-35160]"
    }, {
      "left" : "String code;",
      "right" : "String code;",
      "info" : "FieldDeclaration[32967-32979]:FieldDeclaration[34874-34886]"
    }, {
      "left" : "private Allocation(String code)",
      "right" : "private Allocation(String code)",
      "info" : "MethodDeclaration[32984-33044]:MethodDeclaration[34891-34951]"
    }, {
      "left" : "public static Allocation of(String code)",
      "right" : "public static Allocation of(String code)",
      "info" : "MethodDeclaration[33049-33249]:MethodDeclaration[34956-35156]"
    }, {
      "left" : "enum : AllocationToStringConverter",
      "right" : "enum : AllocationToStringConverter",
      "info" : "EnumDeclaration[33257-33446]:EnumDeclaration[35164-35353]"
    }, {
      "left" : "public String convert(Allocation source)",
      "right" : "public String convert(Allocation source)",
      "info" : "MethodDeclaration[33358-33442]:MethodDeclaration[35265-35349]"
    }, {
      "left" : "enum : StringToAllocationConverter",
      "right" : "enum : StringToAllocationConverter",
      "info" : "EnumDeclaration[33450-33649]:EnumDeclaration[35357-35556]"
    }, {
      "left" : "public Allocation convert(String source)",
      "right" : "public Allocation convert(String source)",
      "info" : "MethodDeclaration[33551-33645]:MethodDeclaration[35458-35552]"
    } ],
    "mappings" : [
 {
      "left" : "@RunWith(MockitoJUnitRunner.class)",
      "right" : "@RunWith(MockitoJUnitRunner.class)",
      "info" : "SingleMemberAnnotation[2763-2797]:SingleMemberAnnotation[2791-2825]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2798-2804]:Modifier[2826-2832]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2805-2810]:TYPE_DECLARATION_KIND[2833-2838]"
    }, {
      "left" : "UpdateMapperUnitTests",
      "right" : "UpdateMapperUnitTests",
      "info" : "SimpleName[2811-2832]:SimpleName[2839-2860]"
    }, {
      "left" : "@Before",
      "right" : "@Before",
      "info" : "MarkerAnnotation[3020-3027]:MarkerAnnotation[3048-3055]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3029-3035]:Modifier[3057-3063]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3036-3040]:PrimitiveType[3064-3068]"
    }, {
      "left" : "setUp",
      "right" : "setUp",
      "info" : "SimpleName[3041-3046]:SimpleName[3069-3074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3049-3596]:Block[3077-3624]"
    }, {
      "left" : "this.writingConverterSpy = Mockito.spy(new NestedEntityWriteConverter());",
      "right" : "this.writingConverterSpy = Mockito.spy(new NestedEntityWriteConverter());",
      "info" : "ExpressionStatement[3054-3127]:ExpressionStatement[3082-3155]"
    }, {
      "left" : "CustomConversions conversions = new CustomConversions(Arrays.asList(writingConverterSpy));",
      "right" : "CustomConversions conversions = new CustomConversions(Arrays.asList(writingConverterSpy));",
      "info" : "VariableDeclarationStatement[3130-3220]:VariableDeclarationStatement[3158-3248]"
    }, {
      "left" : "this.context = new MongoMappingContext();",
      "right" : "this.context = new MongoMappingContext();",
      "info" : "ExpressionStatement[3224-3265]:ExpressionStatement[3252-3293]"
    }, {
      "left" : "this.context.setSimpleTypeHolder(conversions.getSimpleTypeHolder());",
      "right" : "this.context.setSimpleTypeHolder(conversions.getSimpleTypeHolder());",
      "info" : "ExpressionStatement[3268-3336]:ExpressionStatement[3296-3364]"
    }, {
      "left" : "this.context.initialize();",
      "right" : "this.context.initialize();",
      "info" : "ExpressionStatement[3339-3365]:ExpressionStatement[3367-3393]"
    }, {
      "left" : "this.converter = new MappingMongoConverter(new DefaultDbRefResolver(factory), context);",
      "right" : "this.converter = new MappingMongoConverter(new DefaultDbRefResolver(factory), context);",
      "info" : "ExpressionStatement[3369-3456]:ExpressionStatement[3397-3484]"
    }, {
      "left" : "this.converter.setCustomConversions(conversions);",
      "right" : "this.converter.setCustomConversions(conversions);",
      "info" : "ExpressionStatement[3459-3508]:ExpressionStatement[3487-3536]"
    }, {
      "left" : "this.converter.afterPropertiesSet();",
      "right" : "this.converter.afterPropertiesSet();",
      "info" : "ExpressionStatement[3511-3547]:ExpressionStatement[3539-3575]"
    }, {
      "left" : "this.mapper = new UpdateMapper(converter);",
      "right" : "this.mapper = new UpdateMapper(converter);",
      "info" : "ExpressionStatement[3551-3593]:ExpressionStatement[3579-3621]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[3632-3637]:MarkerAnnotation[3660-3665]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3639-3645]:Modifier[3667-3673]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3646-3650]:PrimitiveType[3674-3678]"
    }, {
      "left" : "updateMapperRetainsTypeInformationForCollectionField",
      "right" : "updateMapperRetainsTypeInformationForCollectionField",
      "info" : "SimpleName[3651-3703]:SimpleName[3679-3731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3706-4112]:Block[3734-4140]"
    }, {
      "left" : "Update update = new Update().push(\"list\", new ConcreteChildClass(\"2\", \"BAR\"));",
      "right" : "Update update = new Update().push(\"list\", new ConcreteChildClass(\"2\", \"BAR\"));",
      "info" : "VariableDeclarationStatement[3711-3789]:VariableDeclarationStatement[3739-3817]"
    }, {
      "left" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(ParentClass.class));",
      "right" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(ParentClass.class));",
      "info" : "VariableDeclarationStatement[3793-3918]:VariableDeclarationStatement[3821-3946]"
    }, {
      "left" : "DBObject push = getAsDBObject(mappedObject, \"$push\");",
      "right" : "DBObject push = getAsDBObject(mappedObject, \"$push\");",
      "info" : "VariableDeclarationStatement[3922-3975]:VariableDeclarationStatement[3950-4003]"
    }, {
      "left" : "DBObject list = getAsDBObject(push, \"aliased\");",
      "right" : "DBObject list = getAsDBObject(push, \"aliased\");",
      "info" : "VariableDeclarationStatement[3978-4025]:VariableDeclarationStatement[4006-4053]"
    }, {
      "left" : "assertThat(list.get(\"_class\"), is((Object) ConcreteChildClass.class.getName()));",
      "right" : "assertThat(list.get(\"_class\"), is((Object) ConcreteChildClass.class.getName()));",
      "info" : "ExpressionStatement[4029-4109]:ExpressionStatement[4057-4137]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[4148-4153]:MarkerAnnotation[4176-4181]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4155-4161]:Modifier[4183-4189]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4162-4166]:PrimitiveType[4190-4194]"
    }, {
      "left" : "updateMapperShouldRetainTypeInformationForNestedEntities",
      "right" : "updateMapperShouldRetainTypeInformationForNestedEntities",
      "info" : "SimpleName[4167-4223]:SimpleName[4195-4251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4226-4646]:Block[4254-4674]"
    }, {
      "left" : "Update update = Update.update(\"model\", new ModelImpl(1));",
      "right" : "Update update = Update.update(\"model\", new ModelImpl(1));",
      "info" : "VariableDeclarationStatement[4231-4288]:VariableDeclarationStatement[4259-4316]"
    }, {
      "left" : "UpdateMapper mapper = new UpdateMapper(converter);",
      "right" : "UpdateMapper mapper = new UpdateMapper(converter);",
      "info" : "VariableDeclarationStatement[4291-4341]:VariableDeclarationStatement[4319-4369]"
    }, {
      "left" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(ModelWrapper.class));",
      "right" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(ModelWrapper.class));",
      "info" : "VariableDeclarationStatement[4345-4471]:VariableDeclarationStatement[4373-4499]"
    }, {
      "left" : "DBObject set = getAsDBObject(mappedObject, \"$set\");",
      "right" : "DBObject set = getAsDBObject(mappedObject, \"$set\");",
      "info" : "VariableDeclarationStatement[4475-4526]:VariableDeclarationStatement[4503-4554]"
    }, {
      "left" : "DBObject modelDbObject = (DBObject) set.get(\"model\");",
      "right" : "DBObject modelDbObject = (DBObject) set.get(\"model\");",
      "info" : "VariableDeclarationStatement[4529-4582]:VariableDeclarationStatement[4557-4610]"
    }, {
      "left" : "assertThat(modelDbObject.get(\"_class\"), not(nullValue()));",
      "right" : "assertThat(modelDbObject.get(\"_class\"), not(nullValue()));",
      "info" : "ExpressionStatement[4585-4643]:ExpressionStatement[4613-4671]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[4682-4687]:MarkerAnnotation[4710-4715]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4689-4695]:Modifier[4717-4723]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4696-4700]:PrimitiveType[4724-4728]"
    }, {
      "left" : "updateMapperShouldNotPersistTypeInformationForKnownSimpleTypes",
      "right" : "updateMapperShouldNotPersistTypeInformationForKnownSimpleTypes",
      "info" : "SimpleName[4701-4763]:SimpleName[4729-4791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4766-5106]:Block[4794-5134]"
    }, {
      "left" : "Update update = Update.update(\"model.value\", 1);",
      "right" : "Update update = Update.update(\"model.value\", 1);",
      "info" : "VariableDeclarationStatement[4771-4819]:VariableDeclarationStatement[4799-4847]"
    }, {
      "left" : "UpdateMapper mapper = new UpdateMapper(converter);",
      "right" : "UpdateMapper mapper = new UpdateMapper(converter);",
      "info" : "VariableDeclarationStatement[4822-4872]:VariableDeclarationStatement[4850-4900]"
    }, {
      "left" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(ModelWrapper.class));",
      "right" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(ModelWrapper.class));",
      "info" : "VariableDeclarationStatement[4876-5002]:VariableDeclarationStatement[4904-5030]"
    }, {
      "left" : "DBObject set = getAsDBObject(mappedObject, \"$set\");",
      "right" : "DBObject set = getAsDBObject(mappedObject, \"$set\");",
      "info" : "VariableDeclarationStatement[5006-5057]:VariableDeclarationStatement[5034-5085]"
    }, {
      "left" : "assertThat(set.get(\"_class\"), nullValue());",
      "right" : "assertThat(set.get(\"_class\"), nullValue());",
      "info" : "ExpressionStatement[5060-5103]:ExpressionStatement[5088-5131]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[5142-5147]:MarkerAnnotation[5170-5175]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5149-5155]:Modifier[5177-5183]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5156-5160]:PrimitiveType[5184-5188]"
    }, {
      "left" : "updateMapperShouldNotPersistTypeInformationForNullValues",
      "right" : "updateMapperShouldNotPersistTypeInformationForNullValues",
      "info" : "SimpleName[5161-5217]:SimpleName[5189-5245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5220-5557]:Block[5248-5585]"
    }, {
      "left" : "Update update = Update.update(\"model\", null);",
      "right" : "Update update = Update.update(\"model\", null);",
      "info" : "VariableDeclarationStatement[5225-5270]:VariableDeclarationStatement[5253-5298]"
    }, {
      "left" : "UpdateMapper mapper = new UpdateMapper(converter);",
      "right" : "UpdateMapper mapper = new UpdateMapper(converter);",
      "info" : "VariableDeclarationStatement[5273-5323]:VariableDeclarationStatement[5301-5351]"
    }, {
      "left" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(ModelWrapper.class));",
      "right" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(ModelWrapper.class));",
      "info" : "VariableDeclarationStatement[5327-5453]:VariableDeclarationStatement[5355-5481]"
    }, {
      "left" : "DBObject set = getAsDBObject(mappedObject, \"$set\");",
      "right" : "DBObject set = getAsDBObject(mappedObject, \"$set\");",
      "info" : "VariableDeclarationStatement[5457-5508]:VariableDeclarationStatement[5485-5536]"
    }, {
      "left" : "assertThat(set.get(\"_class\"), nullValue());",
      "right" : "assertThat(set.get(\"_class\"), nullValue());",
      "info" : "ExpressionStatement[5511-5554]:ExpressionStatement[5539-5582]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[5593-5598]:MarkerAnnotation[5621-5626]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5600-5606]:Modifier[5628-5634]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5607-5611]:PrimitiveType[5635-5639]"
    }, {
      "left" : "updateMapperShouldRetainTypeInformationForNestedCollectionElements",
      "right" : "updateMapperShouldRetainTypeInformationForNestedCollectionElements",
      "info" : "SimpleName[5612-5678]:SimpleName[5640-5706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5681-6156]:Block[5709-6184]"
    }, {
      "left" : "Update update = Update.update(\"list.$\", new ConcreteChildClass(\"42\", \"bubu\"));",
      "right" : "Update update = Update.update(\"list.$\", new ConcreteChildClass(\"42\", \"bubu\"));",
      "info" : "VariableDeclarationStatement[5686-5764]:VariableDeclarationStatement[5714-5792]"
    }, {
      "left" : "UpdateMapper mapper = new UpdateMapper(converter);",
      "right" : "UpdateMapper mapper = new UpdateMapper(converter);",
      "info" : "VariableDeclarationStatement[5768-5818]:VariableDeclarationStatement[5796-5846]"
    }, {
      "left" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(ParentClass.class));",
      "right" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(ParentClass.class));",
      "info" : "VariableDeclarationStatement[5821-5946]:VariableDeclarationStatement[5849-5974]"
    }, {
      "left" : "DBObject set = getAsDBObject(mappedObject, \"$set\");",
      "right" : "DBObject set = getAsDBObject(mappedObject, \"$set\");",
      "info" : "VariableDeclarationStatement[5950-6001]:VariableDeclarationStatement[5978-6029]"
    }, {
      "left" : "DBObject modelDbObject = getAsDBObject(set, \"aliased.$\");",
      "right" : "DBObject modelDbObject = getAsDBObject(set, \"aliased.$\");",
      "info" : "VariableDeclarationStatement[6004-6061]:VariableDeclarationStatement[6032-6089]"
    }, {
      "left" : "assertThat(modelDbObject.get(\"_class\"), is((Object) ConcreteChildClass.class.getName()));",
      "right" : "assertThat(modelDbObject.get(\"_class\"), is((Object) ConcreteChildClass.class.getName()));",
      "info" : "ExpressionStatement[6064-6153]:ExpressionStatement[6092-6181]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[6192-6197]:MarkerAnnotation[6220-6225]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6199-6205]:Modifier[6227-6233]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6206-6210]:PrimitiveType[6234-6238]"
    }, {
      "left" : "updateMapperShouldSupportNestedCollectionElementUpdates",
      "right" : "updateMapperShouldSupportNestedCollectionElementUpdates",
      "info" : "SimpleName[6211-6266]:SimpleName[6239-6294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6269-6728]:Block[6297-6756]"
    }, {
      "left" : "Update update = Update.update(\"list.$.value\", \"foo\").set(\"list.$.otherValue\", \"bar\");",
      "right" : "Update update = Update.update(\"list.$.value\", \"foo\").set(\"list.$.otherValue\", \"bar\");",
      "info" : "VariableDeclarationStatement[6274-6359]:VariableDeclarationStatement[6302-6387]"
    }, {
      "left" : "UpdateMapper mapper = new UpdateMapper(converter);",
      "right" : "UpdateMapper mapper = new UpdateMapper(converter);",
      "info" : "VariableDeclarationStatement[6363-6413]:VariableDeclarationStatement[6391-6441]"
    }, {
      "left" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(ParentClass.class));",
      "right" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(ParentClass.class));",
      "info" : "VariableDeclarationStatement[6416-6541]:VariableDeclarationStatement[6444-6569]"
    }, {
      "left" : "DBObject set = getAsDBObject(mappedObject, \"$set\");",
      "right" : "DBObject set = getAsDBObject(mappedObject, \"$set\");",
      "info" : "VariableDeclarationStatement[6545-6596]:VariableDeclarationStatement[6573-6624]"
    }, {
      "left" : "assertThat(set.get(\"aliased.$.value\"), is((Object) \"foo\"));",
      "right" : "assertThat(set.get(\"aliased.$.value\"), is((Object) \"foo\"));",
      "info" : "ExpressionStatement[6599-6658]:ExpressionStatement[6627-6686]"
    }, {
      "left" : "assertThat(set.get(\"aliased.$.otherValue\"), is((Object) \"bar\"));",
      "right" : "assertThat(set.get(\"aliased.$.otherValue\"), is((Object) \"bar\"));",
      "info" : "ExpressionStatement[6661-6725]:ExpressionStatement[6689-6753]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[6764-6769]:MarkerAnnotation[6792-6797]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6771-6777]:Modifier[6799-6805]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6778-6782]:PrimitiveType[6806-6810]"
    }, {
      "left" : "updateMapperShouldWriteTypeInformationForComplexNestedCollectionElementUpdates",
      "right" : "updateMapperShouldWriteTypeInformationForComplexNestedCollectionElementUpdates",
      "info" : "SimpleName[6783-6861]:SimpleName[6811-6889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6864-7551]:Block[6892-7579]"
    }, {
      "left" : "Update update = Update.update(\"list.$.value\", \"foo\").set(\"list.$.someObject\", new ConcreteChildClass(\"42\", \"bubu\"));",
      "right" : "Update update = Update.update(\"list.$.value\", \"foo\").set(\"list.$.someObject\", new ConcreteChildClass(\"42\", \"bubu\"));",
      "info" : "VariableDeclarationStatement[6869-6985]:VariableDeclarationStatement[6897-7013]"
    }, {
      "left" : "UpdateMapper mapper = new UpdateMapper(converter);",
      "right" : "UpdateMapper mapper = new UpdateMapper(converter);",
      "info" : "VariableDeclarationStatement[6989-7039]:VariableDeclarationStatement[7017-7067]"
    }, {
      "left" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(ParentClass.class));",
      "right" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(ParentClass.class));",
      "info" : "VariableDeclarationStatement[7042-7167]:VariableDeclarationStatement[7070-7195]"
    }, {
      "left" : "DBObject dbo = getAsDBObject(mappedObject, \"$set\");",
      "right" : "DBObject dbo = getAsDBObject(mappedObject, \"$set\");",
      "info" : "VariableDeclarationStatement[7171-7222]:VariableDeclarationStatement[7199-7250]"
    }, {
      "left" : "assertThat(dbo.get(\"aliased.$.value\"), is((Object) \"foo\"));",
      "right" : "assertThat(dbo.get(\"aliased.$.value\"), is((Object) \"foo\"));",
      "info" : "ExpressionStatement[7225-7284]:ExpressionStatement[7253-7312]"
    }, {
      "left" : "DBObject someObject = getAsDBObject(dbo, \"aliased.$.someObject\");",
      "right" : "DBObject someObject = getAsDBObject(dbo, \"aliased.$.someObject\");",
      "info" : "VariableDeclarationStatement[7288-7353]:VariableDeclarationStatement[7316-7381]"
    }, {
      "left" : "assertThat(someObject, is(notNullValue()));",
      "right" : "assertThat(someObject, is(notNullValue()));",
      "info" : "ExpressionStatement[7356-7399]:ExpressionStatement[7384-7427]"
    }, {
      "left" : "assertThat(someObject.get(\"_class\"), is((Object) ConcreteChildClass.class.getName()));",
      "right" : "assertThat(someObject.get(\"_class\"), is((Object) ConcreteChildClass.class.getName()));",
      "info" : "ExpressionStatement[7402-7488]:ExpressionStatement[7430-7516]"
    }, {
      "left" : "assertThat(someObject.get(\"value\"), is((Object) \"bubu\"));",
      "right" : "assertThat(someObject.get(\"value\"), is((Object) \"bubu\"));",
      "info" : "ExpressionStatement[7491-7548]:ExpressionStatement[7519-7576]"
    }, {
      "left" : "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })",
      "right" : "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })",
      "info" : "SingleMemberAnnotation[7587-7633]:SingleMemberAnnotation[7615-7661]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[7635-7640]:MarkerAnnotation[7663-7668]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7642-7648]:Modifier[7670-7676]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7649-7653]:PrimitiveType[7677-7681]"
    }, {
      "left" : "updateMapperShouldConvertPushCorrectlyWhenCalledWithEachUsingSimpleTypes",
      "right" : "updateMapperShouldConvertPushCorrectlyWhenCalledWithEachUsingSimpleTypes",
      "info" : "SimpleName[7654-7726]:SimpleName[7682-7754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7729-8294]:Block[7757-8322]"
    }, {
      "left" : "Update update = new Update().push(\"values\").each(\"spring\", \"data\", \"mongodb\");",
      "right" : "Update update = new Update().push(\"values\").each(\"spring\", \"data\", \"mongodb\");",
      "info" : "VariableDeclarationStatement[7734-7812]:VariableDeclarationStatement[7762-7840]"
    }, {
      "left" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(), context.getPersistentEntity(Model.class));",
      "right" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(), context.getPersistentEntity(Model.class));",
      "info" : "VariableDeclarationStatement[7815-7930]:VariableDeclarationStatement[7843-7958]"
    }, {
      "left" : "DBObject push = getAsDBObject(mappedObject, \"$push\");",
      "right" : "DBObject push = getAsDBObject(mappedObject, \"$push\");",
      "info" : "VariableDeclarationStatement[7934-7987]:VariableDeclarationStatement[7962-8015]"
    }, {
      "left" : "DBObject values = getAsDBObject(push, \"values\");",
      "right" : "DBObject values = getAsDBObject(push, \"values\");",
      "info" : "VariableDeclarationStatement[7990-8038]:VariableDeclarationStatement[8018-8066]"
    }, {
      "left" : "BasicDBList each = getAsDBList(values, \"$each\");",
      "right" : "BasicDBList each = getAsDBList(values, \"$each\");",
      "info" : "VariableDeclarationStatement[8041-8089]:VariableDeclarationStatement[8069-8117]"
    }, {
      "left" : "assertThat(push.get(\"_class\"), nullValue());",
      "right" : "assertThat(push.get(\"_class\"), nullValue());",
      "info" : "ExpressionStatement[8093-8137]:ExpressionStatement[8121-8165]"
    }, {
      "left" : "assertThat(values.get(\"_class\"), nullValue());",
      "right" : "assertThat(values.get(\"_class\"), nullValue());",
      "info" : "ExpressionStatement[8140-8186]:ExpressionStatement[8168-8214]"
    }, {
      "left" : "assertThat(each.toMap(), (Matcher) allOf(hasValue(\"spring\"), hasValue(\"data\"), hasValue(\"mongodb\")));",
      "right" : "assertThat(each.toMap(), (Matcher) allOf(hasValue(\"spring\"), hasValue(\"data\"), hasValue(\"mongodb\")));",
      "info" : "ExpressionStatement[8190-8291]:ExpressionStatement[8218-8319]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[8330-8335]:MarkerAnnotation[8358-8363]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8337-8343]:Modifier[8365-8371]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8344-8348]:PrimitiveType[8372-8376]"
    }, {
      "left" : "updateMapperShouldConvertPushWhithoutAddingClassInformationWhenUsedWithEvery",
      "right" : "updateMapperShouldConvertPushWhithoutAddingClassInformationWhenUsedWithEvery",
      "info" : "SimpleName[8349-8425]:SimpleName[8377-8453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8428-8837]:Block[8456-8865]"
    }, {
      "left" : "Update update = new Update().push(\"values\").each(\"spring\", \"data\", \"mongodb\");",
      "right" : "Update update = new Update().push(\"values\").each(\"spring\", \"data\", \"mongodb\");",
      "info" : "VariableDeclarationStatement[8433-8511]:VariableDeclarationStatement[8461-8539]"
    }, {
      "left" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(), context.getPersistentEntity(Model.class));",
      "right" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(), context.getPersistentEntity(Model.class));",
      "info" : "VariableDeclarationStatement[8515-8630]:VariableDeclarationStatement[8543-8658]"
    }, {
      "left" : "DBObject push = getAsDBObject(mappedObject, \"$push\");",
      "right" : "DBObject push = getAsDBObject(mappedObject, \"$push\");",
      "info" : "VariableDeclarationStatement[8633-8686]:VariableDeclarationStatement[8661-8714]"
    }, {
      "left" : "DBObject values = getAsDBObject(push, \"values\");",
      "right" : "DBObject values = getAsDBObject(push, \"values\");",
      "info" : "VariableDeclarationStatement[8689-8737]:VariableDeclarationStatement[8717-8765]"
    }, {
      "left" : "assertThat(push.get(\"_class\"), nullValue());",
      "right" : "assertThat(push.get(\"_class\"), nullValue());",
      "info" : "ExpressionStatement[8741-8785]:ExpressionStatement[8769-8813]"
    }, {
      "left" : "assertThat(values.get(\"_class\"), nullValue());",
      "right" : "assertThat(values.get(\"_class\"), nullValue());",
      "info" : "ExpressionStatement[8788-8834]:ExpressionStatement[8816-8862]"
    }, {
      "left" : "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })",
      "right" : "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })",
      "info" : "SingleMemberAnnotation[8873-8919]:SingleMemberAnnotation[8901-8947]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[8921-8926]:MarkerAnnotation[8949-8954]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8928-8934]:Modifier[8956-8962]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8935-8939]:PrimitiveType[8963-8967]"
    }, {
      "left" : "updateMapperShouldConvertPushCorrectlyWhenCalledWithEachUsingCustomTypes",
      "right" : "updateMapperShouldConvertPushCorrectlyWhenCalledWithEachUsingCustomTypes",
      "info" : "SimpleName[8940-9012]:SimpleName[8968-9040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9015-9579]:Block[9043-9607]"
    }, {
      "left" : "Update update = new Update().push(\"models\").each(new ListModel(\"spring\", \"data\", \"mongodb\"));",
      "right" : "Update update = new Update().push(\"models\").each(new ListModel(\"spring\", \"data\", \"mongodb\"));",
      "info" : "VariableDeclarationStatement[9020-9113]:VariableDeclarationStatement[9048-9141]"
    }, {
      "left" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(ModelWrapper.class));",
      "right" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(ModelWrapper.class));",
      "info" : "VariableDeclarationStatement[9116-9242]:VariableDeclarationStatement[9144-9270]"
    }, {
      "left" : "DBObject push = getAsDBObject(mappedObject, \"$push\");",
      "right" : "DBObject push = getAsDBObject(mappedObject, \"$push\");",
      "info" : "VariableDeclarationStatement[9246-9299]:VariableDeclarationStatement[9274-9327]"
    }, {
      "left" : "DBObject model = getAsDBObject(push, \"models\");",
      "right" : "DBObject model = getAsDBObject(push, \"models\");",
      "info" : "VariableDeclarationStatement[9302-9349]:VariableDeclarationStatement[9330-9377]"
    }, {
      "left" : "BasicDBList each = getAsDBList(model, \"$each\");",
      "right" : "BasicDBList each = getAsDBList(model, \"$each\");",
      "info" : "VariableDeclarationStatement[9352-9399]:VariableDeclarationStatement[9380-9427]"
    }, {
      "left" : "BasicDBList values = getAsDBList((DBObject) each.get(0), \"values\");",
      "right" : "BasicDBList values = getAsDBList((DBObject) each.get(0), \"values\");",
      "info" : "VariableDeclarationStatement[9402-9469]:VariableDeclarationStatement[9430-9497]"
    }, {
      "left" : "assertThat(values.toMap(), (Matcher) allOf(hasValue(\"spring\"), hasValue(\"data\"), hasValue(\"mongodb\")));",
      "right" : "assertThat(values.toMap(), (Matcher) allOf(hasValue(\"spring\"), hasValue(\"data\"), hasValue(\"mongodb\")));",
      "info" : "ExpressionStatement[9473-9576]:ExpressionStatement[9501-9604]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[9615-9620]:MarkerAnnotation[9643-9648]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9622-9628]:Modifier[9650-9656]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9629-9633]:PrimitiveType[9657-9661]"
    }, {
      "left" : "updateMapperShouldRetainClassInformationForPushCorrectlyWhenCalledWithEachUsingCustomTypes",
      "right" : "updateMapperShouldRetainClassInformationForPushCorrectlyWhenCalledWithEachUsingCustomTypes",
      "info" : "SimpleName[9634-9724]:SimpleName[9662-9752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9727-10216]:Block[9755-10244]"
    }, {
      "left" : "Update update = new Update().push(\"models\").each(new ListModel(\"spring\", \"data\", \"mongodb\"));",
      "right" : "Update update = new Update().push(\"models\").each(new ListModel(\"spring\", \"data\", \"mongodb\"));",
      "info" : "VariableDeclarationStatement[9732-9825]:VariableDeclarationStatement[9760-9853]"
    }, {
      "left" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(ModelWrapper.class));",
      "right" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(ModelWrapper.class));",
      "info" : "VariableDeclarationStatement[9828-9954]:VariableDeclarationStatement[9856-9982]"
    }, {
      "left" : "DBObject push = getAsDBObject(mappedObject, \"$push\");",
      "right" : "DBObject push = getAsDBObject(mappedObject, \"$push\");",
      "info" : "VariableDeclarationStatement[9958-10011]:VariableDeclarationStatement[9986-10039]"
    }, {
      "left" : "DBObject model = getAsDBObject(push, \"models\");",
      "right" : "DBObject model = getAsDBObject(push, \"models\");",
      "info" : "VariableDeclarationStatement[10014-10061]:VariableDeclarationStatement[10042-10089]"
    }, {
      "left" : "BasicDBList each = getAsDBList(model, \"$each\");",
      "right" : "BasicDBList each = getAsDBList(model, \"$each\");",
      "info" : "VariableDeclarationStatement[10064-10111]:VariableDeclarationStatement[10092-10139]"
    }, {
      "left" : "assertThat(((DBObject) each.get(0)).get(\"_class\").toString(), equalTo(ListModel.class.getName()));",
      "right" : "assertThat(((DBObject) each.get(0)).get(\"_class\").toString(), equalTo(ListModel.class.getName()));",
      "info" : "ExpressionStatement[10115-10213]:ExpressionStatement[10143-10241]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[10252-10257]:MarkerAnnotation[10280-10285]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10259-10265]:Modifier[10287-10293]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10266-10270]:PrimitiveType[10294-10298]"
    }, {
      "left" : "testUpdateShouldAllowMultiplePushEachForDifferentFields",
      "right" : "testUpdateShouldAllowMultiplePushEachForDifferentFields",
      "info" : "SimpleName[10271-10326]:SimpleName[10299-10354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10329-10767]:Block[10357-10795]"
    }, {
      "left" : "Update update = new Update().push(\"category\").each(\"spring\", \"data\").push(\"type\").each(\"mongodb\");",
      "right" : "Update update = new Update().push(\"category\").each(\"spring\", \"data\").push(\"type\").each(\"mongodb\");",
      "info" : "VariableDeclarationStatement[10334-10432]:VariableDeclarationStatement[10362-10460]"
    }, {
      "left" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(), context.getPersistentEntity(Object.class));",
      "right" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(), context.getPersistentEntity(Object.class));",
      "info" : "VariableDeclarationStatement[10435-10551]:VariableDeclarationStatement[10463-10579]"
    }, {
      "left" : "DBObject push = getAsDBObject(mappedObject, \"$push\");",
      "right" : "DBObject push = getAsDBObject(mappedObject, \"$push\");",
      "info" : "VariableDeclarationStatement[10555-10608]:VariableDeclarationStatement[10583-10636]"
    }, {
      "left" : "assertThat(getAsDBObject(push, \"category\").containsField(\"$each\"), is(true));",
      "right" : "assertThat(getAsDBObject(push, \"category\").containsField(\"$each\"), is(true));",
      "info" : "ExpressionStatement[10611-10688]:ExpressionStatement[10639-10716]"
    }, {
      "left" : "assertThat(getAsDBObject(push, \"type\").containsField(\"$each\"), is(true));",
      "right" : "assertThat(getAsDBObject(push, \"type\").containsField(\"$each\"), is(true));",
      "info" : "ExpressionStatement[10691-10764]:ExpressionStatement[10719-10792]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[10803-10808]:MarkerAnnotation[10831-10836]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10810-10816]:Modifier[10838-10844]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10817-10821]:PrimitiveType[10845-10849]"
    }, {
      "left" : "updatePushEachAtPositionWorksCorrectlyWhenGivenPositiveIndexParameter",
      "right" : "updatePushEachAtPositionWorksCorrectlyWhenGivenPositiveIndexParameter",
      "info" : "SimpleName[10822-10891]:SimpleName[10850-10919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10894-11410]:Block[10922-11438]"
    }, {
      "left" : "Update update = new Update().push(\"key\").atPosition(2).each(Arrays.asList(\"Arya\", \"Arry\", \"Weasel\"));",
      "right" : "Update update = new Update().push(\"key\").atPosition(2).each(Arrays.asList(\"Arya\", \"Arry\", \"Weasel\"));",
      "info" : "VariableDeclarationStatement[10899-11000]:VariableDeclarationStatement[10927-11028]"
    }, {
      "left" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(), context.getPersistentEntity(Object.class));",
      "right" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(), context.getPersistentEntity(Object.class));",
      "info" : "VariableDeclarationStatement[11004-11120]:VariableDeclarationStatement[11032-11148]"
    }, {
      "left" : "DBObject push = getAsDBObject(mappedObject, \"$push\");",
      "right" : "DBObject push = getAsDBObject(mappedObject, \"$push\");",
      "info" : "VariableDeclarationStatement[11124-11177]:VariableDeclarationStatement[11152-11205]"
    }, {
      "left" : "DBObject key = getAsDBObject(push, \"key\");",
      "right" : "DBObject key = getAsDBObject(push, \"key\");",
      "info" : "VariableDeclarationStatement[11180-11222]:VariableDeclarationStatement[11208-11250]"
    }, {
      "left" : "assertThat(key.containsField(\"$position\"), is(true));",
      "right" : "assertThat(key.containsField(\"$position\"), is(true));",
      "info" : "ExpressionStatement[11226-11279]:ExpressionStatement[11254-11307]"
    }, {
      "left" : "assertThat((Integer) key.get(\"$position\"), is(2));",
      "right" : "assertThat((Integer) key.get(\"$position\"), is(2));",
      "info" : "ExpressionStatement[11282-11332]:ExpressionStatement[11310-11360]"
    }, {
      "left" : "assertThat(getAsDBObject(push, \"key\").containsField(\"$each\"), is(true));",
      "right" : "assertThat(getAsDBObject(push, \"key\").containsField(\"$each\"), is(true));",
      "info" : "ExpressionStatement[11335-11407]:ExpressionStatement[11363-11435]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[11446-11451]:MarkerAnnotation[11474-11479]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11453-11459]:Modifier[11481-11487]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11460-11464]:PrimitiveType[11488-11492]"
    }, {
      "left" : "updatePushEachAtPositionWorksCorrectlyWhenGivenPositionFirst",
      "right" : "updatePushEachAtPositionWorksCorrectlyWhenGivenPositionFirst",
      "info" : "SimpleName[11465-11525]:SimpleName[11493-11553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11528-12057]:Block[11556-12085]"
    }, {
      "left" : "Update update = new Update().push(\"key\").atPosition(Position.FIRST).each(Arrays.asList(\"Arya\", \"Arry\", \"Weasel\"));",
      "right" : "Update update = new Update().push(\"key\").atPosition(Position.FIRST).each(Arrays.asList(\"Arya\", \"Arry\", \"Weasel\"));",
      "info" : "VariableDeclarationStatement[11533-11647]:VariableDeclarationStatement[11561-11675]"
    }, {
      "left" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(), context.getPersistentEntity(Object.class));",
      "right" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(), context.getPersistentEntity(Object.class));",
      "info" : "VariableDeclarationStatement[11651-11767]:VariableDeclarationStatement[11679-11795]"
    }, {
      "left" : "DBObject push = getAsDBObject(mappedObject, \"$push\");",
      "right" : "DBObject push = getAsDBObject(mappedObject, \"$push\");",
      "info" : "VariableDeclarationStatement[11771-11824]:VariableDeclarationStatement[11799-11852]"
    }, {
      "left" : "DBObject key = getAsDBObject(push, \"key\");",
      "right" : "DBObject key = getAsDBObject(push, \"key\");",
      "info" : "VariableDeclarationStatement[11827-11869]:VariableDeclarationStatement[11855-11897]"
    }, {
      "left" : "assertThat(key.containsField(\"$position\"), is(true));",
      "right" : "assertThat(key.containsField(\"$position\"), is(true));",
      "info" : "ExpressionStatement[11873-11926]:ExpressionStatement[11901-11954]"
    }, {
      "left" : "assertThat((Integer) key.get(\"$position\"), is(0));",
      "right" : "assertThat((Integer) key.get(\"$position\"), is(0));",
      "info" : "ExpressionStatement[11929-11979]:ExpressionStatement[11957-12007]"
    }, {
      "left" : "assertThat(getAsDBObject(push, \"key\").containsField(\"$each\"), is(true));",
      "right" : "assertThat(getAsDBObject(push, \"key\").containsField(\"$each\"), is(true));",
      "info" : "ExpressionStatement[11982-12054]:ExpressionStatement[12010-12082]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[12093-12098]:MarkerAnnotation[12121-12126]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12100-12106]:Modifier[12128-12134]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12107-12111]:PrimitiveType[12135-12139]"
    }, {
      "left" : "updatePushEachAtPositionWorksCorrectlyWhenGivenPositionLast",
      "right" : "updatePushEachAtPositionWorksCorrectlyWhenGivenPositionLast",
      "info" : "SimpleName[12112-12171]:SimpleName[12140-12199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12174-12650]:Block[12202-12678]"
    }, {
      "left" : "Update update = new Update().push(\"key\").atPosition(Position.LAST).each(Arrays.asList(\"Arya\", \"Arry\", \"Weasel\"));",
      "right" : "Update update = new Update().push(\"key\").atPosition(Position.LAST).each(Arrays.asList(\"Arya\", \"Arry\", \"Weasel\"));",
      "info" : "VariableDeclarationStatement[12179-12292]:VariableDeclarationStatement[12207-12320]"
    }, {
      "left" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(), context.getPersistentEntity(Object.class));",
      "right" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(), context.getPersistentEntity(Object.class));",
      "info" : "VariableDeclarationStatement[12296-12412]:VariableDeclarationStatement[12324-12440]"
    }, {
      "left" : "DBObject push = getAsDBObject(mappedObject, \"$push\");",
      "right" : "DBObject push = getAsDBObject(mappedObject, \"$push\");",
      "info" : "VariableDeclarationStatement[12416-12469]:VariableDeclarationStatement[12444-12497]"
    }, {
      "left" : "DBObject key = getAsDBObject(push, \"key\");",
      "right" : "DBObject key = getAsDBObject(push, \"key\");",
      "info" : "VariableDeclarationStatement[12472-12514]:VariableDeclarationStatement[12500-12542]"
    }, {
      "left" : "assertThat(key.containsField(\"$position\"), is(false));",
      "right" : "assertThat(key.containsField(\"$position\"), is(false));",
      "info" : "ExpressionStatement[12518-12572]:ExpressionStatement[12546-12600]"
    }, {
      "left" : "assertThat(getAsDBObject(push, \"key\").containsField(\"$each\"), is(true));",
      "right" : "assertThat(getAsDBObject(push, \"key\").containsField(\"$each\"), is(true));",
      "info" : "ExpressionStatement[12575-12647]:ExpressionStatement[12603-12675]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[12686-12691]:MarkerAnnotation[12714-12719]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12693-12699]:Modifier[12721-12727]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12700-12704]:PrimitiveType[12728-12732]"
    }, {
      "left" : "updatePushEachAtPositionWorksCorrectlyWhenGivenPositionNull",
      "right" : "updatePushEachAtPositionWorksCorrectlyWhenGivenPositionNull",
      "info" : "SimpleName[12705-12764]:SimpleName[12733-12792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12767-13234]:Block[12795-13262]"
    }, {
      "left" : "Update update = new Update().push(\"key\").atPosition(null).each(Arrays.asList(\"Arya\", \"Arry\", \"Weasel\"));",
      "right" : "Update update = new Update().push(\"key\").atPosition(null).each(Arrays.asList(\"Arya\", \"Arry\", \"Weasel\"));",
      "info" : "VariableDeclarationStatement[12772-12876]:VariableDeclarationStatement[12800-12904]"
    }, {
      "left" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(), context.getPersistentEntity(Object.class));",
      "right" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(), context.getPersistentEntity(Object.class));",
      "info" : "VariableDeclarationStatement[12880-12996]:VariableDeclarationStatement[12908-13024]"
    }, {
      "left" : "DBObject push = getAsDBObject(mappedObject, \"$push\");",
      "right" : "DBObject push = getAsDBObject(mappedObject, \"$push\");",
      "info" : "VariableDeclarationStatement[13000-13053]:VariableDeclarationStatement[13028-13081]"
    }, {
      "left" : "DBObject key = getAsDBObject(push, \"key\");",
      "right" : "DBObject key = getAsDBObject(push, \"key\");",
      "info" : "VariableDeclarationStatement[13056-13098]:VariableDeclarationStatement[13084-13126]"
    }, {
      "left" : "assertThat(key.containsField(\"$position\"), is(false));",
      "right" : "assertThat(key.containsField(\"$position\"), is(false));",
      "info" : "ExpressionStatement[13102-13156]:ExpressionStatement[13130-13184]"
    }, {
      "left" : "assertThat(getAsDBObject(push, \"key\").containsField(\"$each\"), is(true));",
      "right" : "assertThat(getAsDBObject(push, \"key\").containsField(\"$each\"), is(true));",
      "info" : "ExpressionStatement[13159-13231]:ExpressionStatement[13187-13259]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[13270-13275]:MarkerAnnotation[13298-13303]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13277-13283]:Modifier[13305-13311]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13284-13288]:PrimitiveType[13312-13316]"
    }, {
      "left" : "testUpdateMapperShouldConsiderCustomWriteTarget",
      "right" : "testUpdateMapperShouldConsiderCustomWriteTarget",
      "info" : "SimpleName[13289-13336]:SimpleName[13317-13364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13339-13824]:Block[13367-13852]"
    }, {
      "left" : "List<NestedEntity> someValues = Arrays.asList(new NestedEntity(\"spring\"), new NestedEntity(\"data\"),\n\t\t\t\tnew NestedEntity(\"mongodb\"));",
      "right" : "List<NestedEntity> someValues = Arrays.asList(new NestedEntity(\"spring\"), new NestedEntity(\"data\"),\n\t\t\t\tnew NestedEntity(\"mongodb\"));",
      "info" : "VariableDeclarationStatement[13344-13477]:VariableDeclarationStatement[13372-13505]"
    }, {
      "left" : "NestedEntity[] array = new NestedEntity[someValues.size()];",
      "right" : "NestedEntity[] array = new NestedEntity[someValues.size()];",
      "info" : "VariableDeclarationStatement[13480-13539]:VariableDeclarationStatement[13508-13567]"
    }, {
      "left" : "Update update = new Update().pushAll(\"collectionOfNestedEntities\", someValues.toArray(array));",
      "right" : "Update update = new Update().pushAll(\"collectionOfNestedEntities\", someValues.toArray(array));",
      "info" : "VariableDeclarationStatement[13543-13637]:VariableDeclarationStatement[13571-13665]"
    }, {
      "left" : "mapper.getMappedObject(update.getUpdateObject(), context.getPersistentEntity(DomainEntity.class));",
      "right" : "mapper.getMappedObject(update.getUpdateObject(), context.getPersistentEntity(DomainEntity.class));",
      "info" : "ExpressionStatement[13640-13738]:ExpressionStatement[13668-13766]"
    }, {
      "left" : "verify(writingConverterSpy, times(3)).convert(Mockito.any(NestedEntity.class));",
      "right" : "verify(writingConverterSpy, times(3)).convert(Mockito.any(NestedEntity.class));",
      "info" : "ExpressionStatement[13742-13821]:ExpressionStatement[13770-13849]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[13860-13865]:MarkerAnnotation[13888-13893]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13867-13873]:Modifier[13895-13901]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13874-13878]:PrimitiveType[13902-13906]"
    }, {
      "left" : "createsDbRefForEntityIdOnPulls",
      "right" : "createsDbRefForEntityIdOnPulls",
      "info" : "SimpleName[13879-13909]:SimpleName[13907-13937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13912-14283]:Block[13940-14311]"
    }, {
      "left" : "Update update = new Update().pull(\"dbRefAnnotatedList.id\", \"2\");",
      "right" : "Update update = new Update().pull(\"dbRefAnnotatedList.id\", \"2\");",
      "info" : "VariableDeclarationStatement[13917-13981]:VariableDeclarationStatement[13945-14009]"
    }, {
      "left" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(DocumentWithDBRefCollection.class));",
      "right" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(DocumentWithDBRefCollection.class));",
      "info" : "VariableDeclarationStatement[13985-14126]:VariableDeclarationStatement[14013-14154]"
    }, {
      "left" : "DBObject pullClause = getAsDBObject(mappedObject, \"$pull\");",
      "right" : "DBObject pullClause = getAsDBObject(mappedObject, \"$pull\");",
      "info" : "VariableDeclarationStatement[14130-14189]:VariableDeclarationStatement[14158-14217]"
    }, {
      "left" : "assertThat(pullClause.get(\"dbRefAnnotatedList\"), is((Object) new DBRef(\"entity\", \"2\")));",
      "right" : "assertThat(pullClause.get(\"dbRefAnnotatedList\"), is((Object) new DBRef(\"entity\", \"2\")));",
      "info" : "ExpressionStatement[14192-14280]:ExpressionStatement[14220-14308]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[14319-14324]:MarkerAnnotation[14347-14352]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14326-14332]:Modifier[14354-14360]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14333-14337]:PrimitiveType[14361-14365]"
    }, {
      "left" : "createsDbRefForEntityOnPulls",
      "right" : "createsDbRefForEntityOnPulls",
      "info" : "SimpleName[14338-14366]:SimpleName[14366-14394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14369-14797]:Block[14397-14825]"
    }, {
      "left" : "Entity entity = new Entity();",
      "right" : "Entity entity = new Entity();",
      "info" : "VariableDeclarationStatement[14374-14403]:VariableDeclarationStatement[14402-14431]"
    }, {
      "left" : "entity.id = \"5\";",
      "right" : "entity.id = \"5\";",
      "info" : "ExpressionStatement[14406-14422]:ExpressionStatement[14434-14450]"
    }, {
      "left" : "Update update = new Update().pull(\"dbRefAnnotatedList\", entity);",
      "right" : "Update update = new Update().pull(\"dbRefAnnotatedList\", entity);",
      "info" : "VariableDeclarationStatement[14426-14490]:VariableDeclarationStatement[14454-14518]"
    }, {
      "left" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(DocumentWithDBRefCollection.class));",
      "right" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(DocumentWithDBRefCollection.class));",
      "info" : "VariableDeclarationStatement[14493-14634]:VariableDeclarationStatement[14521-14662]"
    }, {
      "left" : "DBObject pullClause = getAsDBObject(mappedObject, \"$pull\");",
      "right" : "DBObject pullClause = getAsDBObject(mappedObject, \"$pull\");",
      "info" : "VariableDeclarationStatement[14638-14697]:VariableDeclarationStatement[14666-14725]"
    }, {
      "left" : "assertThat(pullClause.get(\"dbRefAnnotatedList\"), is((Object) new DBRef(\"entity\", entity.id)));",
      "right" : "assertThat(pullClause.get(\"dbRefAnnotatedList\"), is((Object) new DBRef(\"entity\", entity.id)));",
      "info" : "ExpressionStatement[14700-14794]:ExpressionStatement[14728-14822]"
    }, {
      "left" : "@Test(expected = MappingException.class)",
      "right" : "@Test(expected = MappingException.class)",
      "info" : "NormalAnnotation[14833-14873]:NormalAnnotation[14861-14901]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14875-14881]:Modifier[14903-14909]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14882-14886]:PrimitiveType[14910-14914]"
    }, {
      "left" : "rejectsInvalidFieldReferenceForDbRef",
      "right" : "rejectsInvalidFieldReferenceForDbRef",
      "info" : "SimpleName[14887-14923]:SimpleName[14915-14951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14926-15119]:Block[14954-15147]"
    }, {
      "left" : "Update update = new Update().pull(\"dbRefAnnotatedList.name\", \"NAME\");",
      "right" : "Update update = new Update().pull(\"dbRefAnnotatedList.name\", \"NAME\");",
      "info" : "VariableDeclarationStatement[14931-15000]:VariableDeclarationStatement[14959-15028]"
    }, {
      "left" : "mapper.getMappedObject(update.getUpdateObject(), context.getPersistentEntity(DocumentWithDBRefCollection.class));",
      "right" : "mapper.getMappedObject(update.getUpdateObject(), context.getPersistentEntity(DocumentWithDBRefCollection.class));",
      "info" : "ExpressionStatement[15003-15116]:ExpressionStatement[15031-15144]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[15155-15160]:MarkerAnnotation[15183-15188]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15162-15168]:Modifier[15190-15196]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15169-15173]:PrimitiveType[15197-15201]"
    }, {
      "left" : "rendersNestedDbRefCorrectly",
      "right" : "rendersNestedDbRefCorrectly",
      "info" : "SimpleName[15174-15201]:SimpleName[15202-15229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15204-15549]:Block[15232-15577]"
    }, {
      "left" : "Update update = new Update().pull(\"nested.dbRefAnnotatedList.id\", \"2\");",
      "right" : "Update update = new Update().pull(\"nested.dbRefAnnotatedList.id\", \"2\");",
      "info" : "VariableDeclarationStatement[15209-15280]:VariableDeclarationStatement[15237-15308]"
    }, {
      "left" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(Wrapper.class));",
      "right" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(Wrapper.class));",
      "info" : "VariableDeclarationStatement[15283-15404]:VariableDeclarationStatement[15311-15432]"
    }, {
      "left" : "DBObject pullClause = getAsDBObject(mappedObject, \"$pull\");",
      "right" : "DBObject pullClause = getAsDBObject(mappedObject, \"$pull\");",
      "info" : "VariableDeclarationStatement[15408-15467]:VariableDeclarationStatement[15436-15495]"
    }, {
      "left" : "assertThat(pullClause.containsField(\"mapped.dbRefAnnotatedList\"), is(true));",
      "right" : "assertThat(pullClause.containsField(\"mapped.dbRefAnnotatedList\"), is(true));",
      "info" : "ExpressionStatement[15470-15546]:ExpressionStatement[15498-15574]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[15585-15590]:MarkerAnnotation[15613-15618]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15592-15598]:Modifier[15620-15626]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15599-15603]:PrimitiveType[15627-15631]"
    }, {
      "left" : "rendersUpdateOfDbRefPropertyWithDomainObjectCorrectly",
      "right" : "rendersUpdateOfDbRefPropertyWithDomainObjectCorrectly",
      "info" : "SimpleName[15604-15657]:SimpleName[15632-15685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15660-16074]:Block[15688-16102]"
    }, {
      "left" : "Entity entity = new Entity();",
      "right" : "Entity entity = new Entity();",
      "info" : "VariableDeclarationStatement[15665-15694]:VariableDeclarationStatement[15693-15722]"
    }, {
      "left" : "entity.id = \"5\";",
      "right" : "entity.id = \"5\";",
      "info" : "ExpressionStatement[15697-15713]:ExpressionStatement[15725-15741]"
    }, {
      "left" : "Update update = new Update().set(\"dbRefProperty\", entity);",
      "right" : "Update update = new Update().set(\"dbRefProperty\", entity);",
      "info" : "VariableDeclarationStatement[15717-15775]:VariableDeclarationStatement[15745-15803]"
    }, {
      "left" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(DocumentWithDBRefCollection.class));",
      "right" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(DocumentWithDBRefCollection.class));",
      "info" : "VariableDeclarationStatement[15778-15919]:VariableDeclarationStatement[15806-15947]"
    }, {
      "left" : "DBObject setClause = getAsDBObject(mappedObject, \"$set\");",
      "right" : "DBObject setClause = getAsDBObject(mappedObject, \"$set\");",
      "info" : "VariableDeclarationStatement[15923-15980]:VariableDeclarationStatement[15951-16008]"
    }, {
      "left" : "assertThat(setClause.get(\"dbRefProperty\"), is((Object) new DBRef(\"entity\", entity.id)));",
      "right" : "assertThat(setClause.get(\"dbRefProperty\"), is((Object) new DBRef(\"entity\", entity.id)));",
      "info" : "ExpressionStatement[15983-16071]:ExpressionStatement[16011-16099]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[16110-16115]:MarkerAnnotation[16138-16143]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16117-16123]:Modifier[16145-16151]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16124-16128]:PrimitiveType[16152-16156]"
    }, {
      "left" : "rendersUpdateAndPreservesKeyForPathsNotPointingToProperty",
      "right" : "rendersUpdateAndPreservesKeyForPathsNotPointingToProperty",
      "info" : "SimpleName[16129-16186]:SimpleName[16157-16214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16189-16540]:Block[16217-16568]"
    }, {
      "left" : "Update update = new Update().set(\"listOfInterface.$.value\", \"expected-value\");",
      "right" : "Update update = new Update().set(\"listOfInterface.$.value\", \"expected-value\");",
      "info" : "VariableDeclarationStatement[16194-16272]:VariableDeclarationStatement[16222-16300]"
    }, {
      "left" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(ParentClass.class));",
      "right" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(ParentClass.class));",
      "info" : "VariableDeclarationStatement[16275-16400]:VariableDeclarationStatement[16303-16428]"
    }, {
      "left" : "DBObject setClause = getAsDBObject(mappedObject, \"$set\");",
      "right" : "DBObject setClause = getAsDBObject(mappedObject, \"$set\");",
      "info" : "VariableDeclarationStatement[16404-16461]:VariableDeclarationStatement[16432-16489]"
    }, {
      "left" : "assertThat(setClause.containsField(\"listOfInterface.$.value\"), is(true));",
      "right" : "assertThat(setClause.containsField(\"listOfInterface.$.value\"), is(true));",
      "info" : "ExpressionStatement[16464-16537]:ExpressionStatement[16492-16565]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[16576-16581]:MarkerAnnotation[16604-16609]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16583-16589]:Modifier[16611-16617]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16590-16594]:PrimitiveType[16618-16622]"
    }, {
      "left" : "doesNotConvertRawDbObjects",
      "right" : "doesNotConvertRawDbObjects",
      "info" : "SimpleName[16595-16621]:SimpleName[16623-16649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16624-17233]:Block[16652-17261]"
    }, {
      "left" : "Update update = new Update();",
      "right" : "Update update = new Update();",
      "info" : "VariableDeclarationStatement[16629-16658]:VariableDeclarationStatement[16657-16686]"
    }, {
      "left" : "update.pull(\"options\",\n\t\t\t\tnew BasicDBObject(\"_id\", new BasicDBObject(\"$in\", converter.convertToMongoType(Arrays.asList(1L, 2L)))));",
      "right" : "update.pull(\"options\",\n\t\t\t\tnew BasicDBObject(\"_id\", new BasicDBObject(\"$in\", converter.convertToMongoType(Arrays.asList(1L, 2L)))));",
      "info" : "ExpressionStatement[16661-16793]:ExpressionStatement[16689-16821]"
    }, {
      "left" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(ParentClass.class));",
      "right" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(ParentClass.class));",
      "info" : "VariableDeclarationStatement[16797-16922]:VariableDeclarationStatement[16825-16950]"
    }, {
      "left" : "DBObject setClause = getAsDBObject(mappedObject, \"$pull\");",
      "right" : "DBObject setClause = getAsDBObject(mappedObject, \"$pull\");",
      "info" : "VariableDeclarationStatement[16926-16984]:VariableDeclarationStatement[16954-17012]"
    }, {
      "left" : "DBObject options = getAsDBObject(setClause, \"options\");",
      "right" : "DBObject options = getAsDBObject(setClause, \"options\");",
      "info" : "VariableDeclarationStatement[16987-17042]:VariableDeclarationStatement[17015-17070]"
    }, {
      "left" : "DBObject idClause = getAsDBObject(options, \"_id\");",
      "right" : "DBObject idClause = getAsDBObject(options, \"_id\");",
      "info" : "VariableDeclarationStatement[17045-17095]:VariableDeclarationStatement[17073-17123]"
    }, {
      "left" : "BasicDBList inClause = getAsDBList(idClause, \"$in\");",
      "right" : "BasicDBList inClause = getAsDBList(idClause, \"$in\");",
      "info" : "VariableDeclarationStatement[17098-17150]:VariableDeclarationStatement[17126-17178]"
    }, {
      "left" : "assertThat(inClause, IsIterableContainingInOrder.<Object> contains(1L, 2L));",
      "right" : "assertThat(inClause, IsIterableContainingInOrder.<Object> contains(1L, 2L));",
      "info" : "ExpressionStatement[17154-17230]:ExpressionStatement[17182-17258]"
    }, {
      "left" : "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })",
      "right" : "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })",
      "info" : "SingleMemberAnnotation[17269-17315]:SingleMemberAnnotation[17297-17343]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[17317-17322]:MarkerAnnotation[17345-17350]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17324-17330]:Modifier[17352-17358]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17331-17335]:PrimitiveType[17359-17363]"
    }, {
      "left" : "testUpdateShouldApply$addToSetCorrectlyWhenUsedWith$each",
      "right" : "testUpdateShouldApply$addToSetCorrectlyWhenUsedWith$each",
      "info" : "SimpleName[17336-17392]:SimpleName[17364-17420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17395-17887]:Block[17423-17915]"
    }, {
      "left" : "Update update = new Update().addToSet(\"values\").each(\"spring\", \"data\", \"mongodb\");",
      "right" : "Update update = new Update().addToSet(\"values\").each(\"spring\", \"data\", \"mongodb\");",
      "info" : "VariableDeclarationStatement[17400-17482]:VariableDeclarationStatement[17428-17510]"
    }, {
      "left" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(ListModel.class));",
      "right" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(ListModel.class));",
      "info" : "VariableDeclarationStatement[17485-17608]:VariableDeclarationStatement[17513-17636]"
    }, {
      "left" : "DBObject addToSet = getAsDBObject(mappedObject, \"$addToSet\");",
      "right" : "DBObject addToSet = getAsDBObject(mappedObject, \"$addToSet\");",
      "info" : "VariableDeclarationStatement[17612-17673]:VariableDeclarationStatement[17640-17701]"
    }, {
      "left" : "DBObject values = getAsDBObject(addToSet, \"values\");",
      "right" : "DBObject values = getAsDBObject(addToSet, \"values\");",
      "info" : "VariableDeclarationStatement[17676-17728]:VariableDeclarationStatement[17704-17756]"
    }, {
      "left" : "BasicDBList each = getAsDBList(values, \"$each\");",
      "right" : "BasicDBList each = getAsDBList(values, \"$each\");",
      "info" : "VariableDeclarationStatement[17731-17779]:VariableDeclarationStatement[17759-17807]"
    }, {
      "left" : "assertThat(each.toMap(), (Matcher) allOf(hasValue(\"spring\"), hasValue(\"data\"), hasValue(\"mongodb\")));",
      "right" : "assertThat(each.toMap(), (Matcher) allOf(hasValue(\"spring\"), hasValue(\"data\"), hasValue(\"mongodb\")));",
      "info" : "ExpressionStatement[17783-17884]:ExpressionStatement[17811-17912]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[17923-17928]:MarkerAnnotation[17951-17956]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17930-17936]:Modifier[17958-17964]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17937-17941]:PrimitiveType[17965-17969]"
    }, {
      "left" : "testUpdateShouldRetainClassTypeInformationWhenUsing$addToSetWith$eachForCustomTypes",
      "right" : "testUpdateShouldRetainClassTypeInformationWhenUsing$addToSetWith$eachForCustomTypes",
      "info" : "SimpleName[17942-18025]:SimpleName[17970-18053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18028-18650]:Block[18056-18678]"
    }, {
      "left" : "Update update = new Update().addToSet(\"models\").each(new ModelImpl(2014), new ModelImpl(1), new ModelImpl(28));",
      "right" : "Update update = new Update().addToSet(\"models\").each(new ModelImpl(2014), new ModelImpl(1), new ModelImpl(28));",
      "info" : "VariableDeclarationStatement[18033-18144]:VariableDeclarationStatement[18061-18172]"
    }, {
      "left" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(ModelWrapper.class));",
      "right" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(ModelWrapper.class));",
      "info" : "VariableDeclarationStatement[18147-18273]:VariableDeclarationStatement[18175-18301]"
    }, {
      "left" : "DBObject addToSet = getAsDBObject(mappedObject, \"$addToSet\");",
      "right" : "DBObject addToSet = getAsDBObject(mappedObject, \"$addToSet\");",
      "info" : "VariableDeclarationStatement[18277-18338]:VariableDeclarationStatement[18305-18366]"
    }, {
      "left" : "DBObject values = getAsDBObject(addToSet, \"models\");",
      "right" : "DBObject values = getAsDBObject(addToSet, \"models\");",
      "info" : "VariableDeclarationStatement[18342-18394]:VariableDeclarationStatement[18370-18422]"
    }, {
      "left" : "BasicDBList each = getAsDBList(values, \"$each\");",
      "right" : "BasicDBList each = getAsDBList(values, \"$each\");",
      "info" : "VariableDeclarationStatement[18397-18445]:VariableDeclarationStatement[18425-18473]"
    }, {
      "left" : "for (Object updateValue : each)",
      "right" : "for (Object updateValue : each)",
      "info" : "EnhancedForStatement[18449-18647]:EnhancedForStatement[18477-18675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18481-18647]:Block[18509-18675]"
    }, {
      "left" : "assertThat(((DBObject) updateValue).get(\"_class\").toString(),\n\t\t\t\t\tequalTo(\"org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests$ModelImpl\"));",
      "right" : "assertThat(((DBObject) updateValue).get(\"_class\").toString(),\n\t\t\t\t\tequalTo(\"org.springframework.data.mongodb.core.convert.UpdateMapperUnitTests$ModelImpl\"));",
      "info" : "ExpressionStatement[18486-18643]:ExpressionStatement[18514-18671]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[18686-18691]:MarkerAnnotation[18714-18719]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18693-18699]:Modifier[18721-18727]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18700-18704]:PrimitiveType[18728-18732]"
    }, {
      "left" : "updateOnDbrefPropertyOfInterfaceTypeWithoutExplicitGetterForIdShouldBeMappedCorrectly",
      "right" : "updateOnDbrefPropertyOfInterfaceTypeWithoutExplicitGetterForIdShouldBeMappedCorrectly",
      "info" : "SimpleName[18705-18790]:SimpleName[18733-18818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18793-19351]:Block[18821-19379]"
    }, {
      "left" : "Update update = new Update().set(\"referencedDocument\", new InterfaceDocumentDefinitionImpl(\"1\", \"Foo\"));",
      "right" : "Update update = new Update().set(\"referencedDocument\", new InterfaceDocumentDefinitionImpl(\"1\", \"Foo\"));",
      "info" : "VariableDeclarationStatement[18798-18902]:VariableDeclarationStatement[18826-18930]"
    }, {
      "left" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(DocumentWithReferenceToInterfaceImpl.class));",
      "right" : "DBObject mappedObject = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(DocumentWithReferenceToInterfaceImpl.class));",
      "info" : "VariableDeclarationStatement[18905-19055]:VariableDeclarationStatement[18933-19083]"
    }, {
      "left" : "DBObject $set = DBObjectTestUtils.getAsDBObject(mappedObject, \"$set\");",
      "right" : "DBObject $set = DBObjectTestUtils.getAsDBObject(mappedObject, \"$set\");",
      "info" : "VariableDeclarationStatement[19059-19129]:VariableDeclarationStatement[19087-19157]"
    }, {
      "left" : "Object model = $set.get(\"referencedDocument\");",
      "right" : "Object model = $set.get(\"referencedDocument\");",
      "info" : "VariableDeclarationStatement[19132-19178]:VariableDeclarationStatement[19160-19206]"
    }, {
      "left" : "DBRef expectedDBRef = new DBRef(\"interfaceDocumentDefinitionImpl\", \"1\");",
      "right" : "DBRef expectedDBRef = new DBRef(\"interfaceDocumentDefinitionImpl\", \"1\");",
      "info" : "VariableDeclarationStatement[19182-19254]:VariableDeclarationStatement[19210-19282]"
    }, {
      "left" : "assertThat(model, allOf(instanceOf(DBRef.class), IsEqual.<Object> equalTo(expectedDBRef)));",
      "right" : "assertThat(model, allOf(instanceOf(DBRef.class), IsEqual.<Object> equalTo(expectedDBRef)));",
      "info" : "ExpressionStatement[19257-19348]:ExpressionStatement[19285-19376]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[19387-19392]:MarkerAnnotation[19415-19420]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19394-19400]:Modifier[19422-19428]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19401-19405]:PrimitiveType[19429-19433]"
    }, {
      "left" : "updateMapperConvertsNestedQueryCorrectly",
      "right" : "updateMapperConvertsNestedQueryCorrectly",
      "info" : "SimpleName[19406-19446]:SimpleName[19434-19474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19449-20040]:Block[19477-20068]"
    }, {
      "left" : "Update update = new Update().pull(\"list\", Query.query(Criteria.where(\"value\").in(\"foo\", \"bar\")));",
      "right" : "Update update = new Update().pull(\"list\", Query.query(Criteria.where(\"value\").in(\"foo\", \"bar\")));",
      "info" : "VariableDeclarationStatement[19454-19551]:VariableDeclarationStatement[19482-19579]"
    }, {
      "left" : "DBObject mappedUpdate = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(ParentClass.class));",
      "right" : "DBObject mappedUpdate = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(ParentClass.class));",
      "info" : "VariableDeclarationStatement[19554-19679]:VariableDeclarationStatement[19582-19707]"
    }, {
      "left" : "DBObject $pull = DBObjectTestUtils.getAsDBObject(mappedUpdate, \"$pull\");",
      "right" : "DBObject $pull = DBObjectTestUtils.getAsDBObject(mappedUpdate, \"$pull\");",
      "info" : "VariableDeclarationStatement[19683-19755]:VariableDeclarationStatement[19711-19783]"
    }, {
      "left" : "DBObject list = DBObjectTestUtils.getAsDBObject($pull, \"aliased\");",
      "right" : "DBObject list = DBObjectTestUtils.getAsDBObject($pull, \"aliased\");",
      "info" : "VariableDeclarationStatement[19758-19824]:VariableDeclarationStatement[19786-19852]"
    }, {
      "left" : "DBObject value = DBObjectTestUtils.getAsDBObject(list, \"value\");",
      "right" : "DBObject value = DBObjectTestUtils.getAsDBObject(list, \"value\");",
      "info" : "VariableDeclarationStatement[19827-19891]:VariableDeclarationStatement[19855-19919]"
    }, {
      "left" : "BasicDBList $in = DBObjectTestUtils.getAsDBList(value, \"$in\");",
      "right" : "BasicDBList $in = DBObjectTestUtils.getAsDBList(value, \"$in\");",
      "info" : "VariableDeclarationStatement[19894-19956]:VariableDeclarationStatement[19922-19984]"
    }, {
      "left" : "assertThat($in, IsIterableContainingInOrder.<Object> contains(\"foo\", \"bar\"));",
      "right" : "assertThat($in, IsIterableContainingInOrder.<Object> contains(\"foo\", \"bar\"));",
      "info" : "ExpressionStatement[19960-20037]:ExpressionStatement[19988-20065]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[20076-20081]:MarkerAnnotation[20104-20109]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20083-20089]:Modifier[20111-20117]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20090-20094]:PrimitiveType[20118-20122]"
    }, {
      "left" : "updateMapperConvertsPullWithNestedQuerfyOnDBRefCorrectly",
      "right" : "updateMapperConvertsPullWithNestedQuerfyOnDBRefCorrectly",
      "info" : "SimpleName[20095-20151]:SimpleName[20123-20179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20154-20641]:Block[20182-20669]"
    }, {
      "left" : "Update update = new Update().pull(\"dbRefAnnotatedList\", Query.query(Criteria.where(\"id\").is(\"1\")));",
      "right" : "Update update = new Update().pull(\"dbRefAnnotatedList\", Query.query(Criteria.where(\"id\").is(\"1\")));",
      "info" : "VariableDeclarationStatement[20159-20258]:VariableDeclarationStatement[20187-20286]"
    }, {
      "left" : "DBObject mappedUpdate = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(DocumentWithDBRefCollection.class));",
      "right" : "DBObject mappedUpdate = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(DocumentWithDBRefCollection.class));",
      "info" : "VariableDeclarationStatement[20261-20402]:VariableDeclarationStatement[20289-20430]"
    }, {
      "left" : "DBObject $pull = DBObjectTestUtils.getAsDBObject(mappedUpdate, \"$pull\");",
      "right" : "DBObject $pull = DBObjectTestUtils.getAsDBObject(mappedUpdate, \"$pull\");",
      "info" : "VariableDeclarationStatement[20406-20478]:VariableDeclarationStatement[20434-20506]"
    }, {
      "left" : "DBObject list = DBObjectTestUtils.getAsDBObject($pull, \"dbRefAnnotatedList\");",
      "right" : "DBObject list = DBObjectTestUtils.getAsDBObject($pull, \"dbRefAnnotatedList\");",
      "info" : "VariableDeclarationStatement[20481-20558]:VariableDeclarationStatement[20509-20586]"
    }, {
      "left" : "assertThat(list, equalTo(new BasicDBObjectBuilder().add(\"_id\", \"1\").get()));",
      "right" : "assertThat(list, equalTo(new BasicDBObjectBuilder().add(\"_id\", \"1\").get()));",
      "info" : "ExpressionStatement[20562-20638]:ExpressionStatement[20590-20666]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[20678-20683]:MarkerAnnotation[20706-20711]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20685-20691]:Modifier[20713-20719]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20692-20696]:PrimitiveType[20720-20724]"
    }, {
      "left" : "shouldNotRemovePositionalParameter",
      "right" : "shouldNotRemovePositionalParameter",
      "info" : "SimpleName[20697-20731]:SimpleName[20725-20759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20734-21131]:Block[20762-21159]"
    }, {
      "left" : "Update update = new Update();",
      "right" : "Update update = new Update();",
      "info" : "VariableDeclarationStatement[20739-20768]:VariableDeclarationStatement[20767-20796]"
    }, {
      "left" : "update.unset(\"dbRefAnnotatedList.$\");",
      "right" : "update.unset(\"dbRefAnnotatedList.$\");",
      "info" : "ExpressionStatement[20771-20808]:ExpressionStatement[20799-20836]"
    }, {
      "left" : "DBObject mappedUpdate = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(DocumentWithDBRefCollection.class));",
      "right" : "DBObject mappedUpdate = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(DocumentWithDBRefCollection.class));",
      "info" : "VariableDeclarationStatement[20812-20953]:VariableDeclarationStatement[20840-20981]"
    }, {
      "left" : "DBObject $unset = DBObjectTestUtils.getAsDBObject(mappedUpdate, \"$unset\");",
      "right" : "DBObject $unset = DBObjectTestUtils.getAsDBObject(mappedUpdate, \"$unset\");",
      "info" : "VariableDeclarationStatement[20957-21031]:VariableDeclarationStatement[20985-21059]"
    }, {
      "left" : "assertThat($unset, equalTo(new BasicDBObjectBuilder().add(\"dbRefAnnotatedList.$\", 1).get()));",
      "right" : "assertThat($unset, equalTo(new BasicDBObjectBuilder().add(\"dbRefAnnotatedList.$\", 1).get()));",
      "info" : "ExpressionStatement[21035-21128]:ExpressionStatement[21063-21156]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[21168-21173]:MarkerAnnotation[21196-21201]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21175-21181]:Modifier[21203-21209]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21182-21186]:PrimitiveType[21210-21214]"
    }, {
      "left" : "mappingEachOperatorShouldNotAddTypeInfoForNonInterfaceNonAbstractTypes",
      "right" : "mappingEachOperatorShouldNotAddTypeInfoForNonInterfaceNonAbstractTypes",
      "info" : "SimpleName[21187-21257]:SimpleName[21215-21285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21260-21738]:Block[21288-21766]"
    }, {
      "left" : "Update update = new Update().addToSet(\"nestedDocs\").each(new NestedDocument(\"nested-1\"),\n\t\t\t\tnew NestedDocument(\"nested-2\"));",
      "right" : "Update update = new Update().addToSet(\"nestedDocs\").each(new NestedDocument(\"nested-1\"),\n\t\t\t\tnew NestedDocument(\"nested-2\"));",
      "info" : "VariableDeclarationStatement[21265-21390]:VariableDeclarationStatement[21293-21418]"
    }, {
      "left" : "DBObject mappedUpdate = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(DocumentWithNestedCollection.class));",
      "right" : "DBObject mappedUpdate = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(DocumentWithNestedCollection.class));",
      "info" : "VariableDeclarationStatement[21394-21536]:VariableDeclarationStatement[21422-21564]"
    }, {
      "left" : "assertThat(mappedUpdate, isBsonObject().notContaining(\"$addToSet.nestedDocs.$each.[0]._class\"));",
      "right" : "assertThat(mappedUpdate, isBsonObject().notContaining(\"$addToSet.nestedDocs.$each.[0]._class\"));",
      "info" : "ExpressionStatement[21540-21636]:ExpressionStatement[21568-21664]"
    }, {
      "left" : "assertThat(mappedUpdate, isBsonObject().notContaining(\"$addToSet.nestedDocs.$each.[1]._class\"));",
      "right" : "assertThat(mappedUpdate, isBsonObject().notContaining(\"$addToSet.nestedDocs.$each.[1]._class\"));",
      "info" : "ExpressionStatement[21639-21735]:ExpressionStatement[21667-21763]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[21775-21780]:MarkerAnnotation[21803-21808]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21782-21788]:Modifier[21810-21816]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21789-21793]:PrimitiveType[21817-21821]"
    }, {
      "left" : "mappingEachOperatorShouldAddTypeHintForInterfaceTypes",
      "right" : "mappingEachOperatorShouldAddTypeHintForInterfaceTypes",
      "info" : "SimpleName[21794-21847]:SimpleName[21822-21875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21850-22320]:Block[21878-22348]"
    }, {
      "left" : "Update update = new Update().addToSet(\"models\").each(new ModelImpl(1), new ModelImpl(2));",
      "right" : "Update update = new Update().addToSet(\"models\").each(new ModelImpl(1), new ModelImpl(2));",
      "info" : "VariableDeclarationStatement[21855-21944]:VariableDeclarationStatement[21883-21972]"
    }, {
      "left" : "DBObject mappedUpdate = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(ListModelWrapper.class));",
      "right" : "DBObject mappedUpdate = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(ListModelWrapper.class));",
      "info" : "VariableDeclarationStatement[21948-22078]:VariableDeclarationStatement[21976-22106]"
    }, {
      "left" : "assertThat(mappedUpdate, isBsonObject().containing(\"$addToSet.models.$each.[0]._class\", ModelImpl.class.getName()));",
      "right" : "assertThat(mappedUpdate, isBsonObject().containing(\"$addToSet.models.$each.[0]._class\", ModelImpl.class.getName()));",
      "info" : "ExpressionStatement[22082-22198]:ExpressionStatement[22110-22226]"
    }, {
      "left" : "assertThat(mappedUpdate, isBsonObject().containing(\"$addToSet.models.$each.[1]._class\", ModelImpl.class.getName()));",
      "right" : "assertThat(mappedUpdate, isBsonObject().containing(\"$addToSet.models.$each.[1]._class\", ModelImpl.class.getName()));",
      "info" : "ExpressionStatement[22201-22317]:ExpressionStatement[22229-22345]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[22357-22362]:MarkerAnnotation[22385-22390]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22364-22370]:Modifier[22392-22398]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22371-22375]:PrimitiveType[22399-22403]"
    }, {
      "left" : "mappingEachOperatorShouldAddTypeHintForAbstractTypes",
      "right" : "mappingEachOperatorShouldAddTypeHintForAbstractTypes",
      "info" : "SimpleName[22376-22428]:SimpleName[22404-22456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22431-22966]:Block[22459-22994]"
    }, {
      "left" : "Update update = new Update().addToSet(\"list\").each(new ConcreteChildClass(\"foo\", \"one\"),\n\t\t\t\tnew ConcreteChildClass(\"bar\", \"two\"));",
      "right" : "Update update = new Update().addToSet(\"list\").each(new ConcreteChildClass(\"foo\", \"one\"),\n\t\t\t\tnew ConcreteChildClass(\"bar\", \"two\"));",
      "info" : "VariableDeclarationStatement[22436-22567]:VariableDeclarationStatement[22464-22595]"
    }, {
      "left" : "DBObject mappedUpdate = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(ParentClass.class));",
      "right" : "DBObject mappedUpdate = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(ParentClass.class));",
      "info" : "VariableDeclarationStatement[22571-22696]:VariableDeclarationStatement[22599-22724]"
    }, {
      "left" : "assertThat(mappedUpdate,\n\t\t\t\tisBsonObject().containing(\"$addToSet.aliased.$each.[0]._class\", ConcreteChildClass.class.getName()));",
      "right" : "assertThat(mappedUpdate,\n\t\t\t\tisBsonObject().containing(\"$addToSet.aliased.$each.[0]._class\", ConcreteChildClass.class.getName()));",
      "info" : "ExpressionStatement[22700-22830]:ExpressionStatement[22728-22858]"
    }, {
      "left" : "assertThat(mappedUpdate,\n\t\t\t\tisBsonObject().containing(\"$addToSet.aliased.$each.[1]._class\", ConcreteChildClass.class.getName()));",
      "right" : "assertThat(mappedUpdate,\n\t\t\t\tisBsonObject().containing(\"$addToSet.aliased.$each.[1]._class\", ConcreteChildClass.class.getName()));",
      "info" : "ExpressionStatement[22833-22963]:ExpressionStatement[22861-22991]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[23003-23008]:MarkerAnnotation[23031-23036]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23010-23016]:Modifier[23038-23044]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23017-23021]:PrimitiveType[23045-23049]"
    }, {
      "left" : "mappingShouldOnlyRemoveTypeHintFromTopLevelTypeInCaseOfNestedDocument",
      "right" : "mappingShouldOnlyRemoveTypeHintFromTopLevelTypeInCaseOfNestedDocument",
      "info" : "SimpleName[23022-23091]:SimpleName[23050-23119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23094-23836]:Block[23122-23864]"
    }, {
      "left" : "WrapperAroundInterfaceType wait = new WrapperAroundInterfaceType();",
      "right" : "WrapperAroundInterfaceType wait = new WrapperAroundInterfaceType();",
      "info" : "VariableDeclarationStatement[23099-23166]:VariableDeclarationStatement[23127-23194]"
    }, {
      "left" : "wait.interfaceType = new ModelImpl(1);",
      "right" : "wait.interfaceType = new ModelImpl(1);",
      "info" : "ExpressionStatement[23169-23207]:ExpressionStatement[23197-23235]"
    }, {
      "left" : "Update update = new Update().addToSet(\"listHoldingConcretyTypeWithInterfaceTypeAttribute\").each(wait);",
      "right" : "Update update = new Update().addToSet(\"listHoldingConcretyTypeWithInterfaceTypeAttribute\").each(wait);",
      "info" : "VariableDeclarationStatement[23211-23313]:VariableDeclarationStatement[23239-23341]"
    }, {
      "left" : "DBObject mappedUpdate = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(DomainTypeWithListOfConcreteTypesHavingSingleInterfaceTypeAttribute.class));",
      "right" : "DBObject mappedUpdate = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(DomainTypeWithListOfConcreteTypesHavingSingleInterfaceTypeAttribute.class));",
      "info" : "VariableDeclarationStatement[23316-23497]:VariableDeclarationStatement[23344-23525]"
    }, {
      "left" : "assertThat(mappedUpdate,\n\t\t\t\tisBsonObject().notContaining(\"$addToSet.listHoldingConcretyTypeWithInterfaceTypeAttribute.$each.[0]._class\"));",
      "right" : "assertThat(mappedUpdate,\n\t\t\t\tisBsonObject().notContaining(\"$addToSet.listHoldingConcretyTypeWithInterfaceTypeAttribute.$each.[0]._class\"));",
      "info" : "ExpressionStatement[23501-23640]:ExpressionStatement[23529-23668]"
    }, {
      "left" : "assertThat(mappedUpdate,\n\t\t\t\tisBsonObject().containing(\n\t\t\t\t\t\t\"$addToSet.listHoldingConcretyTypeWithInterfaceTypeAttribute.$each.[0].interfaceType._class\",\n\t\t\t\t\t\tModelImpl.class.getName()));",
      "right" : "assertThat(mappedUpdate,\n\t\t\t\tisBsonObject().containing(\n\t\t\t\t\t\t\"$addToSet.listHoldingConcretyTypeWithInterfaceTypeAttribute.$each.[0].interfaceType._class\",\n\t\t\t\t\t\tModelImpl.class.getName()));",
      "info" : "ExpressionStatement[23643-23833]:ExpressionStatement[23671-23861]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[23873-23878]:MarkerAnnotation[23901-23906]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23880-23886]:Modifier[23908-23914]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23887-23891]:PrimitiveType[23915-23919]"
    }, {
      "left" : "mappingShouldRetainTypeInformationOfNestedListWhenUpdatingConcreteyParentType",
      "right" : "mappingShouldRetainTypeInformationOfNestedListWhenUpdatingConcreteyParentType",
      "info" : "SimpleName[23892-23969]:SimpleName[23920-23997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23972-24654]:Block[24000-24682]"
    }, {
      "left" : "ListModelWrapper lmw = new ListModelWrapper();",
      "right" : "ListModelWrapper lmw = new ListModelWrapper();",
      "info" : "VariableDeclarationStatement[23977-24023]:VariableDeclarationStatement[24005-24051]"
    }, {
      "left" : "lmw.models = Collections.<Model> singletonList(new ModelImpl(1));",
      "right" : "lmw.models = Collections.<Model> singletonList(new ModelImpl(1));",
      "info" : "ExpressionStatement[24026-24091]:ExpressionStatement[24054-24119]"
    }, {
      "left" : "Update update = new Update().set(\"concreteTypeWithListAttributeOfInterfaceType\", lmw);",
      "right" : "Update update = new Update().set(\"concreteTypeWithListAttributeOfInterfaceType\", lmw);",
      "info" : "VariableDeclarationStatement[24095-24181]:VariableDeclarationStatement[24123-24209]"
    }, {
      "left" : "DBObject mappedUpdate = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(DomainTypeWrappingConcreteyTypeHavingListOfInterfaceTypeAttributes.class));",
      "right" : "DBObject mappedUpdate = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(DomainTypeWrappingConcreteyTypeHavingListOfInterfaceTypeAttributes.class));",
      "info" : "VariableDeclarationStatement[24184-24364]:VariableDeclarationStatement[24212-24392]"
    }, {
      "left" : "assertThat(mappedUpdate, isBsonObject().notContaining(\"$set.concreteTypeWithListAttributeOfInterfaceType._class\"));",
      "right" : "assertThat(mappedUpdate, isBsonObject().notContaining(\"$set.concreteTypeWithListAttributeOfInterfaceType._class\"));",
      "info" : "ExpressionStatement[24368-24483]:ExpressionStatement[24396-24511]"
    }, {
      "left" : "assertThat(\n\t\t\t\tmappedUpdate,\n\t\t\t\tisBsonObject().containing(\"$set.concreteTypeWithListAttributeOfInterfaceType.models.[0]._class\",\n\t\t\t\t\t\tModelImpl.class.getName()));",
      "right" : "assertThat(\n\t\t\t\tmappedUpdate,\n\t\t\t\tisBsonObject().containing(\"$set.concreteTypeWithListAttributeOfInterfaceType.models.[0]._class\",\n\t\t\t\t\t\tModelImpl.class.getName()));",
      "info" : "ExpressionStatement[24486-24651]:ExpressionStatement[24514-24679]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[24691-24696]:MarkerAnnotation[24719-24724]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24698-24704]:Modifier[24726-24732]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24705-24709]:PrimitiveType[24733-24737]"
    }, {
      "left" : "mappingShouldRetainTypeInformationForObjectValues",
      "right" : "mappingShouldRetainTypeInformationForObjectValues",
      "info" : "SimpleName[24710-24759]:SimpleName[24738-24787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24762-25170]:Block[24790-25198]"
    }, {
      "left" : "Update update = new Update().set(\"value\", new NestedDocument(\"kaladin\"));",
      "right" : "Update update = new Update().set(\"value\", new NestedDocument(\"kaladin\"));",
      "info" : "VariableDeclarationStatement[24767-24840]:VariableDeclarationStatement[24795-24868]"
    }, {
      "left" : "DBObject mappedUpdate = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(EntityWithObject.class));",
      "right" : "DBObject mappedUpdate = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(EntityWithObject.class));",
      "info" : "VariableDeclarationStatement[24843-24973]:VariableDeclarationStatement[24871-25001]"
    }, {
      "left" : "assertThat(mappedUpdate, isBsonObject().containing(\"$set.value.name\", \"kaladin\"));",
      "right" : "assertThat(mappedUpdate, isBsonObject().containing(\"$set.value.name\", \"kaladin\"));",
      "info" : "ExpressionStatement[24977-25059]:ExpressionStatement[25005-25087]"
    }, {
      "left" : "assertThat(mappedUpdate, isBsonObject().containing(\"$set.value._class\", NestedDocument.class.getName()));",
      "right" : "assertThat(mappedUpdate, isBsonObject().containing(\"$set.value._class\", NestedDocument.class.getName()));",
      "info" : "ExpressionStatement[25062-25167]:ExpressionStatement[25090-25195]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[25207-25212]:MarkerAnnotation[25235-25240]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25214-25220]:Modifier[25242-25248]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25221-25225]:PrimitiveType[25249-25253]"
    }, {
      "left" : "mappingShouldNotRetainTypeInformationForConcreteValues",
      "right" : "mappingShouldNotRetainTypeInformationForConcreteValues",
      "info" : "SimpleName[25226-25280]:SimpleName[25254-25308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25283-25686]:Block[25311-25714]"
    }, {
      "left" : "Update update = new Update().set(\"concreteValue\", new NestedDocument(\"shallan\"));",
      "right" : "Update update = new Update().set(\"concreteValue\", new NestedDocument(\"shallan\"));",
      "info" : "VariableDeclarationStatement[25288-25369]:VariableDeclarationStatement[25316-25397]"
    }, {
      "left" : "DBObject mappedUpdate = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(EntityWithObject.class));",
      "right" : "DBObject mappedUpdate = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(EntityWithObject.class));",
      "info" : "VariableDeclarationStatement[25372-25502]:VariableDeclarationStatement[25400-25530]"
    }, {
      "left" : "assertThat(mappedUpdate, isBsonObject().containing(\"$set.concreteValue.name\", \"shallan\"));",
      "right" : "assertThat(mappedUpdate, isBsonObject().containing(\"$set.concreteValue.name\", \"shallan\"));",
      "info" : "ExpressionStatement[25506-25596]:ExpressionStatement[25534-25624]"
    }, {
      "left" : "assertThat(mappedUpdate, isBsonObject().notContaining(\"$set.concreteValue._class\"));",
      "right" : "assertThat(mappedUpdate, isBsonObject().notContaining(\"$set.concreteValue._class\"));",
      "info" : "ExpressionStatement[25599-25683]:ExpressionStatement[25627-25711]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[25723-25728]:MarkerAnnotation[25751-25756]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25730-25736]:Modifier[25758-25764]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25737-25741]:PrimitiveType[25765-25769]"
    }, {
      "left" : "mappingShouldRetainTypeInformationForObjectValuesWithAlias",
      "right" : "mappingShouldRetainTypeInformationForObjectValuesWithAlias",
      "info" : "SimpleName[25742-25800]:SimpleName[25770-25828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25803-26232]:Block[25831-26260]"
    }, {
      "left" : "Update update = new Update().set(\"value\", new NestedDocument(\"adolin\"));",
      "right" : "Update update = new Update().set(\"value\", new NestedDocument(\"adolin\"));",
      "info" : "VariableDeclarationStatement[25808-25880]:VariableDeclarationStatement[25836-25908]"
    }, {
      "left" : "DBObject mappedUpdate = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(EntityWithAliasedObject.class));",
      "right" : "DBObject mappedUpdate = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(EntityWithAliasedObject.class));",
      "info" : "VariableDeclarationStatement[25883-26020]:VariableDeclarationStatement[25911-26048]"
    }, {
      "left" : "assertThat(mappedUpdate, isBsonObject().containing(\"$set.renamed-value.name\", \"adolin\"));",
      "right" : "assertThat(mappedUpdate, isBsonObject().containing(\"$set.renamed-value.name\", \"adolin\"));",
      "info" : "ExpressionStatement[26024-26113]:ExpressionStatement[26052-26141]"
    }, {
      "left" : "assertThat(mappedUpdate, isBsonObject().containing(\"$set.renamed-value._class\", NestedDocument.class.getName()));",
      "right" : "assertThat(mappedUpdate, isBsonObject().containing(\"$set.renamed-value._class\", NestedDocument.class.getName()));",
      "info" : "ExpressionStatement[26116-26229]:ExpressionStatement[26144-26257]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[26269-26274]:MarkerAnnotation[26297-26302]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26276-26282]:Modifier[26304-26310]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26283-26287]:PrimitiveType[26311-26315]"
    }, {
      "left" : "mappingShouldRetrainTypeInformationWhenValueTypeOfMapDoesNotMatchItsDeclaration",
      "right" : "mappingShouldRetrainTypeInformationWhenValueTypeOfMapDoesNotMatchItsDeclaration",
      "info" : "SimpleName[26288-26367]:SimpleName[26316-26395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26370-26889]:Block[26398-26917]"
    }, {
      "left" : "Map<Object, Object> map = Collections.<Object, Object> singletonMap(\"szeth\", new NestedDocument(\"son-son-vallano\"));",
      "right" : "Map<Object, Object> map = Collections.<Object, Object> singletonMap(\"szeth\", new NestedDocument(\"son-son-vallano\"));",
      "info" : "VariableDeclarationStatement[26375-26491]:VariableDeclarationStatement[26403-26519]"
    }, {
      "left" : "Update update = new Update().set(\"map\", map);",
      "right" : "Update update = new Update().set(\"map\", map);",
      "info" : "VariableDeclarationStatement[26495-26540]:VariableDeclarationStatement[26523-26568]"
    }, {
      "left" : "DBObject mappedUpdate = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(EntityWithObjectMap.class));",
      "right" : "DBObject mappedUpdate = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(EntityWithObjectMap.class));",
      "info" : "VariableDeclarationStatement[26543-26676]:VariableDeclarationStatement[26571-26704]"
    }, {
      "left" : "assertThat(mappedUpdate, isBsonObject().containing(\"$set.map.szeth.name\", \"son-son-vallano\"));",
      "right" : "assertThat(mappedUpdate, isBsonObject().containing(\"$set.map.szeth.name\", \"son-son-vallano\"));",
      "info" : "ExpressionStatement[26680-26774]:ExpressionStatement[26708-26802]"
    }, {
      "left" : "assertThat(mappedUpdate, isBsonObject().containing(\"$set.map.szeth._class\", NestedDocument.class.getName()));",
      "right" : "assertThat(mappedUpdate, isBsonObject().containing(\"$set.map.szeth._class\", NestedDocument.class.getName()));",
      "info" : "ExpressionStatement[26777-26886]:ExpressionStatement[26805-26914]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[26926-26931]:MarkerAnnotation[26954-26959]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26933-26939]:Modifier[26961-26967]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26940-26944]:PrimitiveType[26968-26972]"
    }, {
      "left" : "mappingShouldNotContainTypeInformationWhenValueTypeOfMapMatchesDeclaration",
      "right" : "mappingShouldNotContainTypeInformationWhenValueTypeOfMapMatchesDeclaration",
      "info" : "SimpleName[26945-27019]:SimpleName[26973-27047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27022-27542]:Block[27050-27570]"
    }, {
      "left" : "Map<Object, NestedDocument> map = Collections.<Object, NestedDocument> singletonMap(\"jasnah\", new NestedDocument(\n\t\t\t\t\"kholin\"));",
      "right" : "Map<Object, NestedDocument> map = Collections.<Object, NestedDocument> singletonMap(\"jasnah\", new NestedDocument(\n\t\t\t\t\"kholin\"));",
      "info" : "VariableDeclarationStatement[27027-27156]:VariableDeclarationStatement[27055-27184]"
    }, {
      "left" : "Update update = new Update().set(\"concreteMap\", map);",
      "right" : "Update update = new Update().set(\"concreteMap\", map);",
      "info" : "VariableDeclarationStatement[27160-27213]:VariableDeclarationStatement[27188-27241]"
    }, {
      "left" : "DBObject mappedUpdate = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(EntityWithObjectMap.class));",
      "right" : "DBObject mappedUpdate = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tcontext.getPersistentEntity(EntityWithObjectMap.class));",
      "info" : "VariableDeclarationStatement[27216-27349]:VariableDeclarationStatement[27244-27377]"
    }, {
      "left" : "assertThat(mappedUpdate, isBsonObject().containing(\"$set.concreteMap.jasnah.name\", \"kholin\"));",
      "right" : "assertThat(mappedUpdate, isBsonObject().containing(\"$set.concreteMap.jasnah.name\", \"kholin\"));",
      "info" : "ExpressionStatement[27353-27447]:ExpressionStatement[27381-27475]"
    }, {
      "left" : "assertThat(mappedUpdate, isBsonObject().notContaining(\"$set.concreteMap.jasnah._class\"));",
      "right" : "assertThat(mappedUpdate, isBsonObject().notContaining(\"$set.concreteMap.jasnah._class\"));",
      "info" : "ExpressionStatement[27450-27539]:ExpressionStatement[27478-27567]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[27579-27584]:MarkerAnnotation[27607-27612]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[27586-27616]:SingleMemberAnnotation[27614-27644]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27618-27624]:Modifier[27646-27652]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27625-27629]:PrimitiveType[27653-27657]"
    }, {
      "left" : "mapsUpdateWithBothReadingAndWritingConverterRegistered",
      "right" : "mapsUpdateWithBothReadingAndWritingConverterRegistered",
      "info" : "SimpleName[27630-27684]:SimpleName[27658-27712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27687-28566]:Block[27715-28594]"
    }, {
      "left" : "CustomConversions conversions = new CustomConversions(\n\t\t\t\tArrays.asList(AllocationToStringConverter.INSTANCE, StringToAllocationConverter.INSTANCE));",
      "right" : "CustomConversions conversions = new CustomConversions(\n\t\t\t\tArrays.asList(AllocationToStringConverter.INSTANCE, StringToAllocationConverter.INSTANCE));",
      "info" : "VariableDeclarationStatement[27692-27842]:VariableDeclarationStatement[27720-27870]"
    }, {
      "left" : "MongoMappingContext mappingContext = new MongoMappingContext();",
      "right" : "MongoMappingContext mappingContext = new MongoMappingContext();",
      "info" : "VariableDeclarationStatement[27846-27909]:VariableDeclarationStatement[27874-27937]"
    }, {
      "left" : "mappingContext.setSimpleTypeHolder(conversions.getSimpleTypeHolder());",
      "right" : "mappingContext.setSimpleTypeHolder(conversions.getSimpleTypeHolder());",
      "info" : "ExpressionStatement[27912-27982]:ExpressionStatement[27940-28010]"
    }, {
      "left" : "mappingContext.afterPropertiesSet();",
      "right" : "mappingContext.afterPropertiesSet();",
      "info" : "ExpressionStatement[27985-28021]:ExpressionStatement[28013-28049]"
    }, {
      "left" : "MappingMongoConverter converter = new MappingMongoConverter(mock(DbRefResolver.class), mappingContext);",
      "right" : "MappingMongoConverter converter = new MappingMongoConverter(mock(DbRefResolver.class), mappingContext);",
      "info" : "VariableDeclarationStatement[28025-28128]:VariableDeclarationStatement[28053-28156]"
    }, {
      "left" : "converter.setCustomConversions(conversions);",
      "right" : "converter.setCustomConversions(conversions);",
      "info" : "ExpressionStatement[28131-28175]:ExpressionStatement[28159-28203]"
    }, {
      "left" : "converter.afterPropertiesSet();",
      "right" : "converter.afterPropertiesSet();",
      "info" : "ExpressionStatement[28178-28209]:ExpressionStatement[28206-28237]"
    }, {
      "left" : "UpdateMapper mapper = new UpdateMapper(converter);",
      "right" : "UpdateMapper mapper = new UpdateMapper(converter);",
      "info" : "VariableDeclarationStatement[28213-28263]:VariableDeclarationStatement[28241-28291]"
    }, {
      "left" : "Update update = new Update().set(\"allocation\", Allocation.AVAILABLE);",
      "right" : "Update update = new Update().set(\"allocation\", Allocation.AVAILABLE);",
      "info" : "VariableDeclarationStatement[28267-28336]:VariableDeclarationStatement[28295-28364]"
    }, {
      "left" : "DBObject result = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tmappingContext.getPersistentEntity(ClassWithEnum.class));",
      "right" : "DBObject result = mapper.getMappedObject(update.getUpdateObject(),\n\t\t\t\tmappingContext.getPersistentEntity(ClassWithEnum.class));",
      "info" : "VariableDeclarationStatement[28339-28467]:VariableDeclarationStatement[28367-28495]"
    }, {
      "left" : "assertThat(result, isBsonObject().containing(\"$set.allocation\", Allocation.AVAILABLE.code));",
      "right" : "assertThat(result, isBsonObject().containing(\"$set.allocation\", Allocation.AVAILABLE.code));",
      "info" : "ExpressionStatement[28471-28563]:ExpressionStatement[28499-28591]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[28569-28575]:Modifier[30476-30482]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[28576-28581]:TYPE_DECLARATION_KIND[30483-30488]"
    }, {
      "left" : "DomainTypeWrappingConcreteyTypeHavingListOfInterfaceTypeAttributes",
      "right" : "DomainTypeWrappingConcreteyTypeHavingListOfInterfaceTypeAttributes",
      "info" : "SimpleName[28582-28648]:SimpleName[30489-30555]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[28721-28727]:Modifier[30628-30634]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[28728-28733]:TYPE_DECLARATION_KIND[30635-30640]"
    }, {
      "left" : "DomainTypeWithListOfConcreteTypesHavingSingleInterfaceTypeAttribute",
      "right" : "DomainTypeWithListOfConcreteTypesHavingSingleInterfaceTypeAttribute",
      "info" : "SimpleName[28734-28801]:SimpleName[30641-30708]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[28895-28901]:Modifier[30802-30808]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[28902-28907]:TYPE_DECLARATION_KIND[30809-30814]"
    }, {
      "left" : "WrapperAroundInterfaceType",
      "right" : "WrapperAroundInterfaceType",
      "info" : "SimpleName[28908-28934]:SimpleName[30815-30841]"
    }, {
      "left" : "@org.springframework.data.mongodb.core.mapping.Document(collection = \"DocumentWithReferenceToInterface\")",
      "right" : "@org.springframework.data.mongodb.core.mapping.Document(collection = \"DocumentWithReferenceToInterface\")",
      "info" : "NormalAnnotation[28965-29069]:NormalAnnotation[30872-30976]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29071-29077]:Modifier[30978-30984]"
    }, {
      "left" : "interface",
      "right" : "interface",
      "info" : "TYPE_DECLARATION_KIND[29078-29087]:TYPE_DECLARATION_KIND[30985-30994]"
    }, {
      "left" : "DocumentWithReferenceToInterface",
      "right" : "DocumentWithReferenceToInterface",
      "info" : "SimpleName[29088-29120]:SimpleName[30995-31027]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[29126-29132]:SimpleType[31033-31039]"
    }, {
      "left" : "getId",
      "right" : "getId",
      "info" : "SimpleName[29133-29138]:SimpleName[31040-31045]"
    }, {
      "left" : "InterfaceDocumentDefinitionWithoutId",
      "right" : "InterfaceDocumentDefinitionWithoutId",
      "info" : "SimpleType[29145-29181]:SimpleType[31052-31088]"
    }, {
      "left" : "getReferencedDocument",
      "right" : "getReferencedDocument",
      "info" : "SimpleName[29182-29203]:SimpleName[31089-31110]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29213-29219]:Modifier[31120-31126]"
    }, {
      "left" : "interface",
      "right" : "interface",
      "info" : "TYPE_DECLARATION_KIND[29220-29229]:TYPE_DECLARATION_KIND[31127-31136]"
    }, {
      "left" : "InterfaceDocumentDefinitionWithoutId",
      "right" : "InterfaceDocumentDefinitionWithoutId",
      "info" : "SimpleName[29230-29266]:SimpleName[31137-31173]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[29272-29278]:SimpleType[31179-31185]"
    }, {
      "left" : "getValue",
      "right" : "getValue",
      "info" : "SimpleName[29279-29287]:SimpleName[31186-31194]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29296-29302]:Modifier[31203-31209]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[29303-29308]:TYPE_DECLARATION_KIND[31210-31215]"
    }, {
      "left" : "InterfaceDocumentDefinitionImpl",
      "right" : "InterfaceDocumentDefinitionImpl",
      "info" : "SimpleName[29309-29340]:SimpleName[31216-31247]"
    }, {
      "left" : "InterfaceDocumentDefinitionWithoutId",
      "right" : "InterfaceDocumentDefinitionWithoutId",
      "info" : "SimpleType[29352-29388]:SimpleType[31259-31295]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29428-29434]:Modifier[31335-31341]"
    }, {
      "left" : "InterfaceDocumentDefinitionImpl",
      "right" : "InterfaceDocumentDefinitionImpl",
      "info" : "SimpleName[29435-29466]:SimpleName[31342-31373]"
    }, {
      "left" : "String id",
      "right" : "String id",
      "info" : "SingleVariableDeclaration[29467-29476]:SingleVariableDeclaration[31374-31383]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[29478-29490]:SingleVariableDeclaration[31385-31397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29492-29538]:Block[31399-31445]"
    }, {
      "left" : "this.id = id;",
      "right" : "this.id = id;",
      "info" : "ExpressionStatement[29498-29511]:ExpressionStatement[31405-31418]"
    }, {
      "left" : "this.value = value;",
      "right" : "this.value = value;",
      "info" : "ExpressionStatement[29515-29534]:ExpressionStatement[31422-31441]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29542-29551]:MarkerAnnotation[31449-31458]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29554-29560]:Modifier[31461-31467]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[29561-29567]:SimpleType[31468-31474]"
    }, {
      "left" : "getValue",
      "right" : "getValue",
      "info" : "SimpleName[29568-29576]:SimpleName[31475-31483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29579-29606]:Block[31486-31513]"
    }, {
      "left" : "return this.value;",
      "right" : "return this.value;",
      "info" : "ReturnStatement[29584-29602]:ReturnStatement[31491-31509]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29613-29619]:Modifier[31520-31526]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[29620-29625]:TYPE_DECLARATION_KIND[31527-31532]"
    }, {
      "left" : "DocumentWithReferenceToInterfaceImpl",
      "right" : "DocumentWithReferenceToInterfaceImpl",
      "info" : "SimpleName[29626-29662]:SimpleName[31533-31569]"
    }, {
      "left" : "DocumentWithReferenceToInterface",
      "right" : "DocumentWithReferenceToInterface",
      "info" : "SimpleType[29674-29706]:SimpleType[31581-31613]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29864-29870]:Modifier[31771-31777]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[29871-29877]:SimpleType[31778-31784]"
    }, {
      "left" : "getId",
      "right" : "getId",
      "info" : "SimpleName[29878-29883]:SimpleName[31785-31790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29886-29905]:Block[31793-31812]"
    }, {
      "left" : "return id;",
      "right" : "return id;",
      "info" : "ReturnStatement[29891-29901]:ReturnStatement[31798-31808]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29909-29915]:Modifier[31816-31822]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29916-29920]:PrimitiveType[31823-31827]"
    }, {
      "left" : "setId",
      "right" : "setId",
      "info" : "SimpleName[29921-29926]:SimpleName[31828-31833]"
    }, {
      "left" : "String id",
      "right" : "String id",
      "info" : "SingleVariableDeclaration[29927-29936]:SingleVariableDeclaration[31834-31843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29938-29960]:Block[31845-31867]"
    }, {
      "left" : "this.id = id;",
      "right" : "this.id = id;",
      "info" : "ExpressionStatement[29943-29956]:ExpressionStatement[31850-31863]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29964-29970]:Modifier[31871-31877]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29971-29975]:PrimitiveType[31878-31882]"
    }, {
      "left" : "setModel",
      "right" : "setModel",
      "info" : "SimpleName[29976-29984]:SimpleName[31883-31891]"
    }, {
      "left" : "InterfaceDocumentDefinitionWithoutId referencedDocument",
      "right" : "InterfaceDocumentDefinitionWithoutId referencedDocument",
      "info" : "SingleVariableDeclaration[29985-30040]:SingleVariableDeclaration[31892-31947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30042-30096]:Block[31949-32003]"
    }, {
      "left" : "this.referencedDocument = referencedDocument;",
      "right" : "this.referencedDocument = referencedDocument;",
      "info" : "ExpressionStatement[30047-30092]:ExpressionStatement[31954-31999]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30100-30109]:MarkerAnnotation[32007-32016]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30112-30118]:Modifier[32019-32025]"
    }, {
      "left" : "InterfaceDocumentDefinitionWithoutId",
      "right" : "InterfaceDocumentDefinitionWithoutId",
      "info" : "SimpleType[30119-30155]:SimpleType[32026-32062]"
    }, {
      "left" : "getReferencedDocument",
      "right" : "getReferencedDocument",
      "info" : "SimpleName[30156-30177]:SimpleName[32063-32084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30180-30220]:Block[32087-32127]"
    }, {
      "left" : "return this.referencedDocument;",
      "right" : "return this.referencedDocument;",
      "info" : "ReturnStatement[30185-30216]:ReturnStatement[32092-32123]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30227-30233]:Modifier[32134-32140]"
    }, {
      "left" : "interface",
      "right" : "interface",
      "info" : "TYPE_DECLARATION_KIND[30234-30243]:TYPE_DECLARATION_KIND[32141-32150]"
    }, {
      "left" : "Model",
      "right" : "Model",
      "info" : "SimpleName[30244-30249]:SimpleName[32151-32156]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30255-30261]:Modifier[32162-32168]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[30262-30267]:TYPE_DECLARATION_KIND[32169-32174]"
    }, {
      "left" : "ModelImpl",
      "right" : "ModelImpl",
      "info" : "SimpleName[30268-30277]:SimpleName[32175-32184]"
    }, {
      "left" : "Model",
      "right" : "Model",
      "info" : "SimpleType[30289-30294]:SimpleType[32196-32201]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30320-30326]:Modifier[32227-32233]"
    }, {
      "left" : "ModelImpl",
      "right" : "ModelImpl",
      "info" : "SimpleName[30327-30336]:SimpleName[32234-32243]"
    }, {
      "left" : "int value",
      "right" : "int value",
      "info" : "SingleVariableDeclaration[30337-30346]:SingleVariableDeclaration[32244-32253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30348-30376]:Block[32255-32283]"
    }, {
      "left" : "this.value = value;",
      "right" : "this.value = value;",
      "info" : "ExpressionStatement[30353-30372]:ExpressionStatement[32260-32279]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30383-30389]:Modifier[32290-32296]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[30390-30395]:TYPE_DECLARATION_KIND[32297-32302]"
    }, {
      "left" : "ModelWrapper",
      "right" : "ModelWrapper",
      "info" : "SimpleName[30396-30408]:SimpleName[32303-32315]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30429-30435]:Modifier[32336-32342]"
    }, {
      "left" : "ModelWrapper",
      "right" : "ModelWrapper",
      "info" : "SimpleName[30436-30448]:SimpleName[32343-32355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30451-30453]:Block[32358-32360]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30457-30463]:Modifier[32364-32370]"
    }, {
      "left" : "ModelWrapper",
      "right" : "ModelWrapper",
      "info" : "SimpleName[30464-30476]:SimpleName[32371-32383]"
    }, {
      "left" : "Model model",
      "right" : "Model model",
      "info" : "SingleVariableDeclaration[30477-30488]:SingleVariableDeclaration[32384-32395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30490-30518]:Block[32397-32425]"
    }, {
      "left" : "this.model = model;",
      "right" : "this.model = model;",
      "info" : "ExpressionStatement[30495-30514]:ExpressionStatement[32402-32421]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30524-30530]:Modifier[32431-32437]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[30531-30536]:TYPE_DECLARATION_KIND[32438-32443]"
    }, {
      "left" : "ListModelWrapper",
      "right" : "ListModelWrapper",
      "info" : "SimpleName[30537-30553]:SimpleName[32444-32460]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30584-30590]:Modifier[32491-32497]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[30591-30596]:TYPE_DECLARATION_KIND[32498-32503]"
    }, {
      "left" : "ListModel",
      "right" : "ListModel",
      "info" : "SimpleName[30597-30606]:SimpleName[32504-32513]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30636-30642]:Modifier[32543-32549]"
    }, {
      "left" : "ListModel",
      "right" : "ListModel",
      "info" : "SimpleName[30643-30652]:SimpleName[32550-32559]"
    }, {
      "left" : "String... values",
      "right" : "String... values",
      "info" : "SingleVariableDeclaration[30653-30669]:SingleVariableDeclaration[32560-32576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30671-30716]:Block[32578-32623]"
    }, {
      "left" : "this.values = Arrays.asList(values);",
      "right" : "this.values = Arrays.asList(values);",
      "info" : "ExpressionStatement[30676-30712]:ExpressionStatement[32583-32619]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30722-30728]:Modifier[32629-32635]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[30729-30734]:TYPE_DECLARATION_KIND[32636-32641]"
    }, {
      "left" : "ParentClass",
      "right" : "ParentClass",
      "info" : "SimpleName[30735-30746]:SimpleName[32642-32653]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30877-30883]:Modifier[32784-32790]"
    }, {
      "left" : "ParentClass",
      "right" : "ParentClass",
      "info" : "SimpleName[30884-30895]:SimpleName[32791-32802]"
    }, {
      "left" : "String id",
      "right" : "String id",
      "info" : "SingleVariableDeclaration[30896-30905]:SingleVariableDeclaration[32803-32812]"
    }, {
      "left" : "List<? extends AbstractChildClass> list",
      "right" : "List<? extends AbstractChildClass> list",
      "info" : "SingleVariableDeclaration[30907-30946]:SingleVariableDeclaration[32814-32853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30948-30991]:Block[32855-32898]"
    }, {
      "left" : "this.id = id;",
      "right" : "this.id = id;",
      "info" : "ExpressionStatement[30953-30966]:ExpressionStatement[32860-32873]"
    }, {
      "left" : "this.list = list;",
      "right" : "this.list = list;",
      "info" : "ExpressionStatement[30970-30987]:ExpressionStatement[32877-32894]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30998-31004]:Modifier[32905-32911]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[31005-31013]:Modifier[32912-32920]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[31014-31019]:TYPE_DECLARATION_KIND[32921-32926]"
    }, {
      "left" : "AbstractChildClass",
      "right" : "AbstractChildClass",
      "info" : "SimpleName[31020-31038]:SimpleName[32927-32945]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31128-31134]:Modifier[33035-33041]"
    }, {
      "left" : "AbstractChildClass",
      "right" : "AbstractChildClass",
      "info" : "SimpleName[31135-31153]:SimpleName[33042-33060]"
    }, {
      "left" : "String id",
      "right" : "String id",
      "info" : "SingleVariableDeclaration[31154-31163]:SingleVariableDeclaration[33061-33070]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[31165-31177]:SingleVariableDeclaration[33072-33084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31179-31263]:Block[33086-33170]"
    }, {
      "left" : "this.id = id;",
      "right" : "this.id = id;",
      "info" : "ExpressionStatement[31184-31197]:ExpressionStatement[33091-33104]"
    }, {
      "left" : "this.value = value;",
      "right" : "this.value = value;",
      "info" : "ExpressionStatement[31201-31220]:ExpressionStatement[33108-33127]"
    }, {
      "left" : "this.otherValue = \"other_\" + value;",
      "right" : "this.otherValue = \"other_\" + value;",
      "info" : "ExpressionStatement[31224-31259]:ExpressionStatement[33131-33166]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[31269-31275]:Modifier[33176-33182]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[31276-31281]:TYPE_DECLARATION_KIND[33183-33188]"
    }, {
      "left" : "ConcreteChildClass",
      "right" : "ConcreteChildClass",
      "info" : "SimpleName[31282-31300]:SimpleName[33189-33207]"
    }, {
      "left" : "AbstractChildClass",
      "right" : "AbstractChildClass",
      "info" : "SimpleType[31309-31327]:SimpleType[33216-33234]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31333-31339]:Modifier[33240-33246]"
    }, {
      "left" : "ConcreteChildClass",
      "right" : "ConcreteChildClass",
      "info" : "SimpleName[31340-31358]:SimpleName[33247-33265]"
    }, {
      "left" : "String id",
      "right" : "String id",
      "info" : "SingleVariableDeclaration[31359-31368]:SingleVariableDeclaration[33266-33275]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[31370-31382]:SingleVariableDeclaration[33277-33289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31384-31410]:Block[33291-33317]"
    }, {
      "left" : "super(id, value);",
      "right" : "super(id, value);",
      "info" : "SuperConstructorInvocation[31389-31406]:SuperConstructorInvocation[33296-33313]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[31416-31422]:Modifier[33323-33329]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[31423-31428]:TYPE_DECLARATION_KIND[33330-33335]"
    }, {
      "left" : "DomainEntity",
      "right" : "DomainEntity",
      "info" : "SimpleName[31429-31441]:SimpleName[33336-33348]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31496-31502]:Modifier[33403-33409]"
    }, {
      "left" : "List<NestedEntity>",
      "right" : "List<NestedEntity>",
      "info" : "ParameterizedType[31503-31521]:ParameterizedType[33410-33428]"
    }, {
      "left" : "getCollectionOfNestedEntities",
      "right" : "getCollectionOfNestedEntities",
      "info" : "SimpleName[31522-31551]:SimpleName[33429-33458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31554-31597]:Block[33461-33504]"
    }, {
      "left" : "return collectionOfNestedEntities;",
      "right" : "return collectionOfNestedEntities;",
      "info" : "ReturnStatement[31559-31593]:ReturnStatement[33466-33500]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[31603-31609]:Modifier[33510-33516]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[31610-31615]:TYPE_DECLARATION_KIND[33517-33522]"
    }, {
      "left" : "NestedEntity",
      "right" : "NestedEntity",
      "info" : "SimpleName[31616-31628]:SimpleName[33523-33535]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31649-31655]:Modifier[33556-33562]"
    }, {
      "left" : "NestedEntity",
      "right" : "NestedEntity",
      "info" : "SimpleName[31656-31668]:SimpleName[33563-33575]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[31669-31680]:SingleVariableDeclaration[33576-33587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31682-31720]:Block[33589-33627]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[31687-31695]:SuperConstructorInvocation[33594-33602]"
    }, {
      "left" : "this.name = name;",
      "right" : "this.name = name;",
      "info" : "ExpressionStatement[31699-31716]:ExpressionStatement[33606-33623]"
    }, {
      "left" : "@WritingConverter",
      "right" : "@WritingConverter",
      "info" : "MarkerAnnotation[31727-31744]:MarkerAnnotation[33634-33651]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[31746-31752]:Modifier[33653-33659]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[31753-31758]:TYPE_DECLARATION_KIND[33660-33665]"
    }, {
      "left" : "NestedEntityWriteConverter",
      "right" : "NestedEntityWriteConverter",
      "info" : "SimpleName[31759-31785]:SimpleName[33666-33692]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[31836-31845]:MarkerAnnotation[33743-33752]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31848-31854]:Modifier[33755-33761]"
    }, {
      "left" : "DBObject",
      "right" : "DBObject",
      "info" : "SimpleType[31855-31863]:SimpleType[33762-33770]"
    }, {
      "left" : "convert",
      "right" : "convert",
      "info" : "SimpleName[31864-31871]:SimpleName[33771-33778]"
    }, {
      "left" : "NestedEntity source",
      "right" : "NestedEntity source",
      "info" : "SingleVariableDeclaration[31872-31891]:SingleVariableDeclaration[33779-33798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31893-31929]:Block[33800-33836]"
    }, {
      "left" : "return new BasicDBObject();",
      "right" : "return new BasicDBObject();",
      "info" : "ReturnStatement[31898-31925]:ReturnStatement[33805-33832]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[31935-31941]:Modifier[33842-33848]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[31942-31947]:TYPE_DECLARATION_KIND[33849-33854]"
    }, {
      "left" : "DocumentWithDBRefCollection",
      "right" : "DocumentWithDBRefCollection",
      "info" : "SimpleName[31948-31975]:SimpleName[33855-33882]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32199-32205]:Modifier[34106-34112]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[32206-32211]:TYPE_DECLARATION_KIND[34113-34118]"
    }, {
      "left" : "Entity",
      "right" : "Entity",
      "info" : "SimpleName[32212-32218]:SimpleName[34119-34125]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32266-32272]:Modifier[34173-34179]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[32273-32278]:TYPE_DECLARATION_KIND[34180-34185]"
    }, {
      "left" : "Wrapper",
      "right" : "Wrapper",
      "info" : "SimpleName[32279-32286]:SimpleName[34186-34193]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32350-32356]:Modifier[34257-34263]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[32357-32362]:TYPE_DECLARATION_KIND[34264-34269]"
    }, {
      "left" : "DocumentWithNestedCollection",
      "right" : "DocumentWithNestedCollection",
      "info" : "SimpleName[32363-32391]:SimpleName[34270-34298]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32434-32440]:Modifier[34341-34347]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[32441-32446]:TYPE_DECLARATION_KIND[34348-34353]"
    }, {
      "left" : "NestedDocument",
      "right" : "NestedDocument",
      "info" : "SimpleName[32447-32461]:SimpleName[34354-34368]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32483-32489]:Modifier[34390-34396]"
    }, {
      "left" : "NestedDocument",
      "right" : "NestedDocument",
      "info" : "SimpleName[32490-32504]:SimpleName[34397-34411]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[32505-32516]:SingleVariableDeclaration[34412-34423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32518-32556]:Block[34425-34463]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[32523-32531]:SuperConstructorInvocation[34430-34438]"
    }, {
      "left" : "this.name = name;",
      "right" : "this.name = name;",
      "info" : "ExpressionStatement[32535-32552]:ExpressionStatement[34442-34459]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32562-32568]:Modifier[34469-34475]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[32569-32574]:TYPE_DECLARATION_KIND[34476-34481]"
    }, {
      "left" : "EntityWithObject",
      "right" : "EntityWithObject",
      "info" : "SimpleName[32575-32591]:SimpleName[34482-34498]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32648-32654]:Modifier[34555-34561]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[32655-32660]:TYPE_DECLARATION_KIND[34562-34567]"
    }, {
      "left" : "EntityWithAliasedObject",
      "right" : "EntityWithAliasedObject",
      "info" : "SimpleName[32661-32684]:SimpleName[34568-34591]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32733-32739]:Modifier[34640-34646]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[32740-32745]:TYPE_DECLARATION_KIND[34647-34652]"
    }, {
      "left" : "EntityWithObjectMap",
      "right" : "EntityWithObjectMap",
      "info" : "SimpleName[32746-32765]:SimpleName[34653-34672]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32844-32850]:Modifier[34751-34757]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[32851-32856]:TYPE_DECLARATION_KIND[34758-34763]"
    }, {
      "left" : "ClassWithEnum",
      "right" : "ClassWithEnum",
      "info" : "SimpleName[32857-32870]:SimpleName[34764-34777]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32984-32991]:Modifier[34891-34898]"
    }, {
      "left" : "Allocation",
      "right" : "Allocation",
      "info" : "SimpleName[32992-33002]:SimpleName[34899-34909]"
    }, {
      "left" : "String code",
      "right" : "String code",
      "info" : "SingleVariableDeclaration[33003-33014]:SingleVariableDeclaration[34910-34921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33016-33044]:Block[34923-34951]"
    }, {
      "left" : "this.code = code;",
      "right" : "this.code = code;",
      "info" : "ExpressionStatement[33022-33039]:ExpressionStatement[34929-34946]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33049-33055]:Modifier[34956-34962]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[33056-33062]:Modifier[34963-34969]"
    }, {
      "left" : "Allocation",
      "right" : "Allocation",
      "info" : "SimpleType[33063-33073]:SimpleType[34970-34980]"
    }, {
      "left" : "of",
      "right" : "of",
      "info" : "SimpleName[33074-33076]:SimpleName[34981-34983]"
    }, {
      "left" : "String code",
      "right" : "String code",
      "info" : "SingleVariableDeclaration[33077-33088]:SingleVariableDeclaration[34984-34995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33090-33249]:Block[34997-35156]"
    }, {
      "left" : "for (Allocation value : values())",
      "right" : "for (Allocation value : values())",
      "info" : "EnhancedForStatement[33097-33201]:EnhancedForStatement[35004-35108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33131-33201]:Block[35038-35108]"
    }, {
      "left" : "if (value.code.equals(code))",
      "right" : "if (value.code.equals(code))",
      "info" : "IfStatement[33138-33195]:IfStatement[35045-35102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33167-33195]:Block[35074-35102]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[33175-33188]:ReturnStatement[35082-35095]"
    }, {
      "left" : "throw new IllegalArgumentException();",
      "right" : "throw new IllegalArgumentException();",
      "info" : "ThrowStatement[33207-33244]:ThrowStatement[35114-35151]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[33358-33367]:MarkerAnnotation[35265-35274]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33371-33377]:Modifier[35278-35284]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[33378-33384]:SimpleType[35285-35291]"
    }, {
      "left" : "convert",
      "right" : "convert",
      "info" : "SimpleName[33385-33392]:SimpleName[35292-35299]"
    }, {
      "left" : "Allocation source",
      "right" : "Allocation source",
      "info" : "SingleVariableDeclaration[33393-33410]:SingleVariableDeclaration[35300-35317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33412-33442]:Block[35319-35349]"
    }, {
      "left" : "return source.code;",
      "right" : "return source.code;",
      "info" : "ReturnStatement[33418-33437]:ReturnStatement[35325-35344]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[33551-33560]:MarkerAnnotation[35458-35467]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33564-33570]:Modifier[35471-35477]"
    }, {
      "left" : "Allocation",
      "right" : "Allocation",
      "info" : "SimpleType[33571-33581]:SimpleType[35478-35488]"
    }, {
      "left" : "convert",
      "right" : "convert",
      "info" : "SimpleName[33582-33589]:SimpleName[35489-35496]"
    }, {
      "left" : "String source",
      "right" : "String source",
      "info" : "SingleVariableDeclaration[33590-33603]:SingleVariableDeclaration[35497-35510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33605-33645]:Block[35512-35552]"
    }, {
      "left" : "return Allocation.of(source);",
      "right" : "return Allocation.of(source);",
      "info" : "ReturnStatement[33611-33640]:ReturnStatement[35518-35547]"
    } ]
  },
  "interFileMappings" : { }
}