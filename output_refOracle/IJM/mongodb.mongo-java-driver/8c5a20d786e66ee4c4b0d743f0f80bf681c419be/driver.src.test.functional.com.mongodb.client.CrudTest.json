{
  "matchedElements" : [
 {
    "left" : "",
    "right" : "",
    "info" : "TypeDeclaration[1896-13663]:TypeDeclaration[1889-13656]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[1979-2009]:FieldDeclaration[1972-2002]"
  }, {
    "left" : "private final String description;",
    "right" : "private final String description;",
    "info" : "FieldDeclaration[2014-2047]:FieldDeclaration[2007-2040]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[2052-2081]:FieldDeclaration[2045-2074]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[2086-2124]:FieldDeclaration[2079-2117]"
  }, {
    "left" : "private MongoCollection<BsonDocument> collection;",
    "right" : "private MongoCollection<BsonDocument> collection;",
    "info" : "FieldDeclaration[2129-2178]:FieldDeclaration[2122-2171]"
  }, {
    "left" : "public CrudTest(final String filename, final String description, final BsonArray data, final BsonDocument definition) {\n        this.filename = filename;\n        this.description = description;\n        this.data = data;\n        this.definition = definition;\n    }",
    "right" : "public CrudTest(final String filename, final String description, final BsonArray data, final BsonDocument definition) {\n        this.filename = filename;\n        this.description = description;\n        this.data = data;\n        this.definition = definition;\n    }",
    "info" : "MethodDeclaration[2184-2447]:MethodDeclaration[2177-2440]"
  }, {
    "left" : "@Before\n    public void setUp() {\n        super.setUp();\n        List<BsonDocument> documents = new ArrayList<BsonDocument>();\n        for (BsonValue document: data) {\n            documents.add(document.asDocument());\n        }\n        getCollectionHelper().insertDocuments(documents);\n        collection = database.getCollection(getClass().getName(), BsonDocument.class);\n    }",
    "right" : "@Before\n    public void setUp() {\n        super.setUp();\n        List<BsonDocument> documents = new ArrayList<BsonDocument>();\n        for (BsonValue document: data) {\n            documents.add(document.asDocument());\n        }\n        getCollectionHelper().insertDocuments(documents);\n        collection = database.getCollection(getClass().getName(), BsonDocument.class);\n    }",
    "info" : "MethodDeclaration[2453-2831]:MethodDeclaration[2446-2824]"
  }, {
    "left" : "@Test\n    public void shouldPassAllOutcomes() {\n        BsonDocument outcome = getOperationResults(definition.getDocument(\"operation\"));\n        BsonDocument expectedOutcome = definition.getDocument(\"outcome\");\n\n        if (checkResult()) {\n            assertEquals(description, expectedOutcome.get(\"result\"), outcome.get(\"result\"));\n        }\n        if (expectedOutcome.containsKey(\"collection\")) {\n            assertCollectionEquals(expectedOutcome.getDocument(\"collection\"));\n        }\n    }",
    "right" : "@Test\n    public void shouldPassAllOutcomes() {\n        BsonDocument outcome = getOperationResults(definition.getDocument(\"operation\"));\n        BsonDocument expectedOutcome = definition.getDocument(\"outcome\");\n\n        if (checkResult()) {\n            assertEquals(description, expectedOutcome.get(\"result\"), outcome.get(\"result\"));\n        }\n        if (expectedOutcome.containsKey(\"collection\")) {\n            assertCollectionEquals(expectedOutcome.getDocument(\"collection\"));\n        }\n    }",
    "info" : "MethodDeclaration[2837-3332]:MethodDeclaration[2830-3325]"
  }, {
    "left" : "@Parameterized.Parameters(name = \"{1}\")\n    public static Collection<Object[]> data() throws URISyntaxException, IOException {\n        List<Object[]> data = new ArrayList<Object[]>();\n        for (File file : JsonPoweredTestHelper.getTestFiles(\"/crud\")) {\n            BsonDocument testDocument = JsonPoweredTestHelper.getTestDocument(file);\n            for (BsonValue test: testDocument.getArray(\"tests\")) {\n                data.add(new Object[]{file.getName(), test.asDocument().getString(\"description\").getValue(),\n                        testDocument.getArray(\"data\"), test.asDocument()});\n            }\n        }\n        return data;\n    }",
    "right" : "@Parameterized.Parameters(name = \"{1}\")\n    public static Collection<Object[]> data() throws URISyntaxException, IOException {\n        List<Object[]> data = new ArrayList<Object[]>();\n        for (File file : JsonPoweredTestHelper.getTestFiles(\"/crud\")) {\n            BsonDocument testDocument = JsonPoweredTestHelper.getTestDocument(file);\n            for (BsonValue test: testDocument.getArray(\"tests\")) {\n                data.add(new Object[]{file.getName(), test.asDocument().getString(\"description\").getValue(),\n                        testDocument.getArray(\"data\"), test.asDocument()});\n            }\n        }\n        return data;\n    }",
    "info" : "MethodDeclaration[3338-3981]:MethodDeclaration[3331-3974]"
  }, {
    "left" : "private boolean checkResult() {\n        if (filename.contains(\"insert\")) {\n            // We don't return any id's for insert commands\n            return false;\n        } else if (!serverVersionAtLeast(asList(3, 0, 0))\n                && description.contains(\"when no documents match with upsert returning the document before modification\")) {\n            // Pre 3.0 versions of MongoDB return an empty document rather than a null\n            return false;\n        }\n        return true;\n    }",
    "right" : "private boolean checkResult() {\n        if (filename.contains(\"insert\")) {\n            // We don't return any id's for insert commands\n            return false;\n        } else if (!serverVersionAtLeast(asList(3, 0, 0))\n                && description.contains(\"when no documents match with upsert returning the document before modification\")) {\n            // Pre 3.0 versions of MongoDB return an empty document rather than a null\n            return false;\n        }\n        return true;\n    }",
    "info" : "MethodDeclaration[3987-4480]:MethodDeclaration[3980-4473]"
  }, {
    "left" : "private void assertCollectionEquals(final BsonDocument expectedCollection) {\n        MongoCollection<BsonDocument> collectionToCompare = collection;\n        if (expectedCollection.containsKey(\"name\")) {\n            collectionToCompare = database.getCollection(expectedCollection.getString(\"name\").getValue(), BsonDocument.class);\n        }\n        assertEquals(description, expectedCollection.getArray(\"data\"), collectionToCompare.find().into(new BsonArray()));\n    }",
    "right" : "private void assertCollectionEquals(final BsonDocument expectedCollection) {\n        MongoCollection<BsonDocument> collectionToCompare = collection;\n        if (expectedCollection.containsKey(\"name\")) {\n            collectionToCompare = database.getCollection(expectedCollection.getString(\"name\").getValue(), BsonDocument.class);\n        }\n        assertEquals(description, expectedCollection.getArray(\"data\"), collectionToCompare.find().into(new BsonArray()));\n    }",
    "info" : "MethodDeclaration[4486-4953]:MethodDeclaration[4479-4946]"
  }, {
    "left" : "private operation BsonDocument) : BsonDocument",
    "right" : "private operation BsonDocument) : BsonDocument",
    "info" : "MethodDeclaration[4959-6062]:MethodDeclaration[4952-6055]"
  }, {
    "left" : "private BsonDocument toResult(final int count) {\n        return toResult(new BsonInt32(count));\n    }",
    "right" : "private BsonDocument toResult(final int count) {\n        return toResult(new BsonInt32(count));\n    }",
    "info" : "MethodDeclaration[6068-6169]:MethodDeclaration[6061-6162]"
  }, {
    "left" : "private BsonDocument toResult(final MongoIterable<BsonDocument> results) {\n        return toResult(new BsonArray(results.into(new ArrayList<BsonDocument>())));\n    }",
    "right" : "private BsonDocument toResult(final MongoIterable<BsonDocument> results) {\n        return toResult(new BsonArray(results.into(new ArrayList<BsonDocument>())));\n    }",
    "info" : "MethodDeclaration[6174-6339]:MethodDeclaration[6167-6332]"
  }, {
    "left" : "private BsonDocument toResult(final String key, final BsonValue value) {\n        return toResult(new BsonDocument(key, value));\n    }",
    "right" : "private BsonDocument toResult(final String key, final BsonValue value) {\n        return toResult(new BsonDocument(key, value));\n    }",
    "info" : "MethodDeclaration[6344-6477]:MethodDeclaration[6337-6470]"
  }, {
    "left" : "private BsonDocument toResult(final UpdateResult updateResult) {\n        assumeTrue(serverVersionAtLeast(asList(2, 6, 0))); // ModifiedCount is not accessible pre 2.6\n        BsonDocument resultDoc = new BsonDocument(\"matchedCount\", new BsonInt32((int) updateResult.getMatchedCount()))\n                .append(\"modifiedCount\", new BsonInt32((int) updateResult.getModifiedCount()));\n        if (updateResult.getUpsertedId() != null) {\n            resultDoc.append(\"upsertedId\", updateResult.getUpsertedId());\n        }\n        return toResult(resultDoc);\n    }",
    "right" : "private BsonDocument toResult(final UpdateResult updateResult) {\n        assumeTrue(serverVersionAtLeast(asList(2, 6, 0))); // ModifiedCount is not accessible pre 2.6\n        BsonDocument resultDoc = new BsonDocument(\"matchedCount\", new BsonInt32((int) updateResult.getMatchedCount()))\n                .append(\"modifiedCount\", new BsonInt32((int) updateResult.getModifiedCount()));\n        if (updateResult.getUpsertedId() != null) {\n            resultDoc.append(\"upsertedId\", updateResult.getUpsertedId());\n        }\n        return toResult(resultDoc);\n    }",
    "info" : "MethodDeclaration[6482-7041]:MethodDeclaration[6475-7034]"
  }, {
    "left" : "private BsonDocument toResult(final BsonValue results) {\n        return new BsonDocument(\"result\", results != null ? results : BsonNull.VALUE);\n    }",
    "right" : "private BsonDocument toResult(final BsonValue results) {\n        return new BsonDocument(\"result\", results != null ? results : BsonNull.VALUE);\n    }",
    "info" : "MethodDeclaration[7046-7195]:MethodDeclaration[7039-7188]"
  }, {
    "left" : "private BsonDocument getAggregateResult(final BsonDocument arguments) {\n        if (!serverVersionAtLeast(asList(2, 6, 0))) {\n            assumeFalse(description.contains(\"$out\"));\n        }\n\n        List<BsonDocument> pipeline = new ArrayList<BsonDocument>();\n        for (BsonValue stage: arguments.getArray(\"pipeline\")) {\n            pipeline.add(stage.asDocument());\n        }\n        return toResult(collection.aggregate(pipeline).batchSize(arguments.getNumber(\"batchSize\").intValue()));\n    }",
    "right" : "private BsonDocument getAggregateResult(final BsonDocument arguments) {\n        if (!serverVersionAtLeast(asList(2, 6, 0))) {\n            assumeFalse(description.contains(\"$out\"));\n        }\n\n        List<BsonDocument> pipeline = new ArrayList<BsonDocument>();\n        for (BsonValue stage: arguments.getArray(\"pipeline\")) {\n            pipeline.add(stage.asDocument());\n        }\n        return toResult(collection.aggregate(pipeline).batchSize(arguments.getNumber(\"batchSize\").intValue()));\n    }",
    "info" : "MethodDeclaration[7200-7698]:MethodDeclaration[7193-7691]"
  }, {
    "left" : "private arguments BsonDocument...) : BsonDocument",
    "right" : "private arguments BsonDocument...) : BsonDocument",
    "info" : "MethodDeclaration[7704-8165]:MethodDeclaration[7697-8158]"
  }, {
    "left" : "private arguments BsonDocument...) : BsonDocument",
    "right" : "private arguments BsonDocument...) : BsonDocument",
    "info" : "MethodDeclaration[8171-8434]:MethodDeclaration[8164-8427]"
  }, {
    "left" : "private BsonDocument getFindResult(final BsonDocument arguments) {\n        FindIterable<BsonDocument> findIterable = collection.find(arguments.getDocument(\"filter\"));\n        if (arguments.containsKey(\"skip\")) {\n            findIterable.skip(arguments.getNumber(\"skip\").intValue());\n        }\n        if (arguments.containsKey(\"limit\")) {\n            findIterable.limit(arguments.getNumber(\"limit\").intValue());\n        }\n        if (arguments.containsKey(\"batchSize\")) {\n            findIterable.batchSize(arguments.getNumber(\"batchSize\").intValue());\n        }\n        return toResult(findIterable);\n    }",
    "right" : "private BsonDocument getFindResult(final BsonDocument arguments) {\n        FindIterable<BsonDocument> findIterable = collection.find(arguments.getDocument(\"filter\"));\n        if (arguments.containsKey(\"skip\")) {\n            findIterable.skip(arguments.getNumber(\"skip\").intValue());\n        }\n        if (arguments.containsKey(\"limit\")) {\n            findIterable.limit(arguments.getNumber(\"limit\").intValue());\n        }\n        if (arguments.containsKey(\"batchSize\")) {\n            findIterable.batchSize(arguments.getNumber(\"batchSize\").intValue());\n        }\n        return toResult(findIterable);\n    }",
    "info" : "MethodDeclaration[8440-9047]:MethodDeclaration[8433-9040]"
  }, {
    "left" : "private BsonDocument getDeleteManyResult(final BsonDocument arguments) {\n        return toResult(\"deletedCount\",\n                new BsonInt32((int) collection.deleteMany(arguments.getDocument(\"filter\")).getDeletedCount()));\n    }",
    "right" : "private BsonDocument getDeleteManyResult(final BsonDocument arguments) {\n        return toResult(\"deletedCount\",\n                new BsonInt32((int) collection.deleteMany(arguments.getDocument(\"filter\")).getDeletedCount()));\n    }",
    "info" : "MethodDeclaration[9053-9283]:MethodDeclaration[9046-9276]"
  }, {
    "left" : "private BsonDocument getDeleteOneResult(final BsonDocument arguments) {\n        return toResult(\"deletedCount\", new BsonInt32((int) collection.deleteOne(arguments.getDocument(\"filter\")).getDeletedCount()));\n    }",
    "right" : "private BsonDocument getDeleteOneResult(final BsonDocument arguments) {\n        return toResult(\"deletedCount\", new BsonInt32((int) collection.deleteOne(arguments.getDocument(\"filter\")).getDeletedCount()));\n    }",
    "info" : "MethodDeclaration[9289-9501]:MethodDeclaration[9282-9494]"
  }, {
    "left" : "private arguments BsonDocument...) : BsonDocument",
    "right" : "private arguments BsonDocument...) : BsonDocument",
    "info" : "MethodDeclaration[9507-10002]:MethodDeclaration[9500-9995]"
  }, {
    "left" : "private BsonDocument getFindOneAndReplaceResult(final BsonDocument arguments) {\n        assumeTrue(serverVersionAtLeast(asList(2, 6, 0))); // in 2.4 the server can ignore the supplied _id and creates an ObjectID\n        FindOneAndReplaceOptions options = new FindOneAndReplaceOptions();\n        if (arguments.containsKey(\"projection\")) {\n            options.projection(arguments.getDocument(\"projection\"));\n        }\n        if (arguments.containsKey(\"sort\")) {\n            options.sort(arguments.getDocument(\"sort\"));\n        }\n        if (arguments.containsKey(\"upsert\")) {\n            options.upsert(arguments.getBoolean(\"upsert\").getValue());\n        }\n        if (arguments.containsKey(\"returnDocument\")) {\n            options.returnDocument(arguments.getString(\"returnDocument\").getValue().equals(\"After\") ? ReturnDocument.AFTER\n                    : ReturnDocument.BEFORE);\n        }\n        return toResult(collection.findOneAndReplace(arguments.getDocument(\"filter\"), arguments.getDocument(\"replacement\"), options));\n    }",
    "right" : "private BsonDocument getFindOneAndReplaceResult(final BsonDocument arguments) {\n        assumeTrue(serverVersionAtLeast(asList(2, 6, 0))); // in 2.4 the server can ignore the supplied _id and creates an ObjectID\n        FindOneAndReplaceOptions options = new FindOneAndReplaceOptions();\n        if (arguments.containsKey(\"projection\")) {\n            options.projection(arguments.getDocument(\"projection\"));\n        }\n        if (arguments.containsKey(\"sort\")) {\n            options.sort(arguments.getDocument(\"sort\"));\n        }\n        if (arguments.containsKey(\"upsert\")) {\n            options.upsert(arguments.getBoolean(\"upsert\").getValue());\n        }\n        if (arguments.containsKey(\"returnDocument\")) {\n            options.returnDocument(arguments.getString(\"returnDocument\").getValue().equals(\"After\") ? ReturnDocument.AFTER\n                    : ReturnDocument.BEFORE);\n        }\n        return toResult(collection.findOneAndReplace(arguments.getDocument(\"filter\"), arguments.getDocument(\"replacement\"), options));\n    }",
    "info" : "MethodDeclaration[10008-11039]:MethodDeclaration[10001-11032]"
  }, {
    "left" : "private BsonDocument getFindOneAndUpdateResult(final BsonDocument arguments) {\n        FindOneAndUpdateOptions options = new FindOneAndUpdateOptions();\n        if (arguments.containsKey(\"projection\")) {\n            options.projection(arguments.getDocument(\"projection\"));\n        }\n        if (arguments.containsKey(\"sort\")) {\n            options.sort(arguments.getDocument(\"sort\"));\n        }\n        if (arguments.containsKey(\"upsert\")) {\n            options.upsert(arguments.getBoolean(\"upsert\").getValue());\n        }\n        if (arguments.containsKey(\"returnDocument\")) {\n            options.returnDocument(arguments.getString(\"returnDocument\").getValue().equals(\"After\") ? ReturnDocument.AFTER\n                    : ReturnDocument.BEFORE);\n        }\n        return toResult(collection.findOneAndUpdate(arguments.getDocument(\"filter\"), arguments.getDocument(\"update\"), options));\n    }",
    "right" : "private BsonDocument getFindOneAndUpdateResult(final BsonDocument arguments) {\n        FindOneAndUpdateOptions options = new FindOneAndUpdateOptions();\n        if (arguments.containsKey(\"projection\")) {\n            options.projection(arguments.getDocument(\"projection\"));\n        }\n        if (arguments.containsKey(\"sort\")) {\n            options.sort(arguments.getDocument(\"sort\"));\n        }\n        if (arguments.containsKey(\"upsert\")) {\n            options.upsert(arguments.getBoolean(\"upsert\").getValue());\n        }\n        if (arguments.containsKey(\"returnDocument\")) {\n            options.returnDocument(arguments.getString(\"returnDocument\").getValue().equals(\"After\") ? ReturnDocument.AFTER\n                    : ReturnDocument.BEFORE);\n        }\n        return toResult(collection.findOneAndUpdate(arguments.getDocument(\"filter\"), arguments.getDocument(\"update\"), options));\n    }",
    "info" : "MethodDeclaration[11045-11935]:MethodDeclaration[11038-11928]"
  }, {
    "left" : "private BsonDocument getInsertOneResult(final BsonDocument arguments) {\n        collection.insertOne(arguments.getDocument(\"document\"));\n        return toResult((BsonValue) null);\n    }",
    "right" : "private BsonDocument getInsertOneResult(final BsonDocument arguments) {\n        collection.insertOne(arguments.getDocument(\"document\"));\n        return toResult((BsonValue) null);\n    }",
    "info" : "MethodDeclaration[11941-12126]:MethodDeclaration[11934-12119]"
  }, {
    "left" : "private BsonDocument getInsertManyResult(final BsonDocument arguments) {\n        List<BsonDocument> documents = new ArrayList<BsonDocument>();\n        for (BsonValue document : arguments.getArray(\"documents\")) {\n            documents.add(document.asDocument());\n        }\n        collection.insertMany(documents);\n        return toResult((BsonValue) null);\n    }",
    "right" : "private BsonDocument getInsertManyResult(final BsonDocument arguments) {\n        List<BsonDocument> documents = new ArrayList<BsonDocument>();\n        for (BsonValue document : arguments.getArray(\"documents\")) {\n            documents.add(document.asDocument());\n        }\n        collection.insertMany(documents);\n        return toResult((BsonValue) null);\n    }",
    "info" : "MethodDeclaration[12132-12494]:MethodDeclaration[12125-12487]"
  }, {
    "left" : "private BsonDocument getReplaceOneResult(final BsonDocument arguments) {\n        UpdateOptions options = new UpdateOptions();\n        if (arguments.containsKey(\"upsert\")) {\n            options.upsert(arguments.getBoolean(\"upsert\").getValue());\n        }\n        return toResult(collection.replaceOne(arguments.getDocument(\"filter\"), arguments.getDocument(\"replacement\"), options));\n    }",
    "right" : "private BsonDocument getReplaceOneResult(final BsonDocument arguments) {\n        UpdateOptions options = new UpdateOptions();\n        if (arguments.containsKey(\"upsert\")) {\n            options.upsert(arguments.getBoolean(\"upsert\").getValue());\n        }\n        return toResult(collection.replaceOne(arguments.getDocument(\"filter\"), arguments.getDocument(\"replacement\"), options));\n    }",
    "info" : "MethodDeclaration[12500-12887]:MethodDeclaration[12493-12880]"
  }, {
    "left" : "private BsonDocument getUpdateManyResult(final BsonDocument arguments) {\n        UpdateOptions options = new UpdateOptions();\n        if (arguments.containsKey(\"upsert\")) {\n            options.upsert(arguments.getBoolean(\"upsert\").getValue());\n        }\n        return toResult(collection.updateMany(arguments.getDocument(\"filter\"), arguments.getDocument(\"update\"), options));\n    }",
    "right" : "private BsonDocument getUpdateManyResult(final BsonDocument arguments) {\n        UpdateOptions options = new UpdateOptions();\n        if (arguments.containsKey(\"upsert\")) {\n            options.upsert(arguments.getBoolean(\"upsert\").getValue());\n        }\n        return toResult(collection.updateMany(arguments.getDocument(\"filter\"), arguments.getDocument(\"update\"), options));\n    }",
    "info" : "MethodDeclaration[12893-13275]:MethodDeclaration[12886-13268]"
  }, {
    "left" : "private BsonDocument getUpdateOneResult(final BsonDocument arguments) {\n        UpdateOptions options = new UpdateOptions();\n        if (arguments.containsKey(\"upsert\")) {\n            options.upsert(arguments.getBoolean(\"upsert\").getValue());\n        }\n        return toResult(collection.updateOne(arguments.getDocument(\"filter\"), arguments.getDocument(\"update\"), options));\n    }",
    "right" : "private BsonDocument getUpdateOneResult(final BsonDocument arguments) {\n        UpdateOptions options = new UpdateOptions();\n        if (arguments.containsKey(\"upsert\")) {\n            options.upsert(arguments.getBoolean(\"upsert\").getValue());\n        }\n        return toResult(collection.updateOne(arguments.getDocument(\"filter\"), arguments.getDocument(\"update\"), options));\n    }",
    "info" : "MethodDeclaration[13281-13661]:MethodDeclaration[13274-13654]"
  } ],
  "mappings" : [
 {
    "left" : "import com.mongodb.JsonPoweredTestHelper;",
    "right" : "import util.JsonPoweredTestHelper;",
    "info" : "ImportDeclaration[624-665]:ImportDeclaration[1288-1322]"
  }, {
    "left" : "@RunWith(Parameterized.class)",
    "right" : "@RunWith(Parameterized.class)",
    "info" : "SingleMemberAnnotation[1896-1925]:SingleMemberAnnotation[1889-1918]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1926-1932]:Modifier[1919-1925]"
  }, {
    "left" : "DatabaseTestCase",
    "right" : "DatabaseTestCase",
    "info" : "SimpleType[1956-1972]:SimpleType[1949-1965]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2184-2190]:Modifier[2177-2183]"
  }, {
    "left" : "final String filename",
    "right" : "final String filename",
    "info" : "SingleVariableDeclaration[2200-2221]:SingleVariableDeclaration[2193-2214]"
  }, {
    "left" : "final String description",
    "right" : "final String description",
    "info" : "SingleVariableDeclaration[2223-2247]:SingleVariableDeclaration[2216-2240]"
  }, {
    "left" : "final BsonArray data",
    "right" : "final BsonArray data",
    "info" : "SingleVariableDeclaration[2249-2269]:SingleVariableDeclaration[2242-2262]"
  }, {
    "left" : "final BsonDocument definition",
    "right" : "final BsonDocument definition",
    "info" : "SingleVariableDeclaration[2271-2300]:SingleVariableDeclaration[2264-2293]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2302-2447]:Block[2295-2440]"
  }, {
    "left" : "this.filename = filename;",
    "right" : "this.filename = filename;",
    "info" : "ExpressionStatement[2312-2337]:ExpressionStatement[2305-2330]"
  }, {
    "left" : "this.description = description;",
    "right" : "this.description = description;",
    "info" : "ExpressionStatement[2346-2377]:ExpressionStatement[2339-2370]"
  }, {
    "left" : "this.data = data;",
    "right" : "this.data = data;",
    "info" : "ExpressionStatement[2386-2403]:ExpressionStatement[2379-2396]"
  }, {
    "left" : "this.definition = definition;",
    "right" : "this.definition = definition;",
    "info" : "ExpressionStatement[2412-2441]:ExpressionStatement[2405-2434]"
  }, {
    "left" : "@Before",
    "right" : "@Before",
    "info" : "MarkerAnnotation[2453-2460]:MarkerAnnotation[2446-2453]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2465-2471]:Modifier[2458-2464]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2472-2476]:PrimitiveType[2465-2469]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2485-2831]:Block[2478-2824]"
  }, {
    "left" : "super.setUp();",
    "right" : "super.setUp();",
    "info" : "ExpressionStatement[2495-2509]:ExpressionStatement[2488-2502]"
  }, {
    "left" : "List<BsonDocument> documents = new ArrayList<BsonDocument>();",
    "right" : "List<BsonDocument> documents = new ArrayList<BsonDocument>();",
    "info" : "VariableDeclarationStatement[2518-2579]:VariableDeclarationStatement[2511-2572]"
  }, {
    "left" : "for (BsonValue document: data)",
    "right" : "for (BsonValue document: data)",
    "info" : "EnhancedForStatement[2588-2680]:EnhancedForStatement[2581-2673]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2619-2680]:Block[2612-2673]"
  }, {
    "left" : "documents.add(document.asDocument());",
    "right" : "documents.add(document.asDocument());",
    "info" : "ExpressionStatement[2633-2670]:ExpressionStatement[2626-2663]"
  }, {
    "left" : "getCollectionHelper().insertDocuments(documents);",
    "right" : "getCollectionHelper().insertDocuments(documents);",
    "info" : "ExpressionStatement[2689-2738]:ExpressionStatement[2682-2731]"
  }, {
    "left" : "collection = database.getCollection(getClass().getName(), BsonDocument.class);",
    "right" : "collection = database.getCollection(getClass().getName(), BsonDocument.class);",
    "info" : "ExpressionStatement[2747-2825]:ExpressionStatement[2740-2818]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[2837-2842]:MarkerAnnotation[2830-2835]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2847-2853]:Modifier[2840-2846]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2854-2858]:PrimitiveType[2847-2851]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2883-3332]:Block[2876-3325]"
  }, {
    "left" : "BsonDocument outcome = getOperationResults(definition.getDocument(\"operation\"));",
    "right" : "BsonDocument outcome = getOperationResults(definition.getDocument(\"operation\"));",
    "info" : "VariableDeclarationStatement[2893-2973]:VariableDeclarationStatement[2886-2966]"
  }, {
    "left" : "BsonDocument expectedOutcome = definition.getDocument(\"outcome\");",
    "right" : "BsonDocument expectedOutcome = definition.getDocument(\"outcome\");",
    "info" : "VariableDeclarationStatement[2982-3047]:VariableDeclarationStatement[2975-3040]"
  }, {
    "left" : "if (checkResult())",
    "right" : "if (checkResult())",
    "info" : "IfStatement[3057-3180]:IfStatement[3050-3173]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3076-3180]:Block[3069-3173]"
  }, {
    "left" : "assertEquals(description, expectedOutcome.get(\"result\"), outcome.get(\"result\"));",
    "right" : "assertEquals(description, expectedOutcome.get(\"result\"), outcome.get(\"result\"));",
    "info" : "ExpressionStatement[3090-3170]:ExpressionStatement[3083-3163]"
  }, {
    "left" : "if (expectedOutcome.containsKey(\"collection\"))",
    "right" : "if (expectedOutcome.containsKey(\"collection\"))",
    "info" : "IfStatement[3189-3326]:IfStatement[3182-3319]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3236-3326]:Block[3229-3319]"
  }, {
    "left" : "assertCollectionEquals(expectedOutcome.getDocument(\"collection\"));",
    "right" : "assertCollectionEquals(expectedOutcome.getDocument(\"collection\"));",
    "info" : "ExpressionStatement[3250-3316]:ExpressionStatement[3243-3309]"
  }, {
    "left" : "@Parameterized.Parameters(name = \"{1}\")",
    "right" : "@Parameterized.Parameters(name = \"{1}\")",
    "info" : "NormalAnnotation[3338-3377]:NormalAnnotation[3331-3370]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3382-3388]:Modifier[3375-3381]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[3389-3395]:Modifier[3382-3388]"
  }, {
    "left" : "Collection<Object[]>",
    "right" : "Collection<Object[]>",
    "info" : "ParameterizedType[3396-3416]:ParameterizedType[3389-3409]"
  }, {
    "left" : "URISyntaxException",
    "right" : "URISyntaxException",
    "info" : "SimpleType[3431-3449]:SimpleType[3424-3442]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[3451-3462]:SimpleType[3444-3455]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3463-3981]:Block[3456-3974]"
  }, {
    "left" : "List<Object[]> data = new ArrayList<Object[]>();",
    "right" : "List<Object[]> data = new ArrayList<Object[]>();",
    "info" : "VariableDeclarationStatement[3473-3521]:VariableDeclarationStatement[3466-3514]"
  }, {
    "left" : "for (File file : JsonPoweredTestHelper.getTestFiles(\"/crud\"))",
    "right" : "for (File file : JsonPoweredTestHelper.getTestFiles(\"/crud\"))",
    "info" : "EnhancedForStatement[3530-3954]:EnhancedForStatement[3523-3947]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3592-3954]:Block[3585-3947]"
  }, {
    "left" : "BsonDocument testDocument = JsonPoweredTestHelper.getTestDocument(file);",
    "right" : "BsonDocument testDocument = JsonPoweredTestHelper.getTestDocument(file);",
    "info" : "VariableDeclarationStatement[3606-3678]:VariableDeclarationStatement[3599-3671]"
  }, {
    "left" : "for (BsonValue test: testDocument.getArray(\"tests\"))",
    "right" : "for (BsonValue test: testDocument.getArray(\"tests\"))",
    "info" : "EnhancedForStatement[3691-3944]:EnhancedForStatement[3684-3937]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3744-3944]:Block[3737-3937]"
  }, {
    "left" : "data.add(new Object[]{file.getName(), test.asDocument().getString(\"description\").getValue(),\n                        testDocument.getArray(\"data\"), test.asDocument()});",
    "right" : "data.add(new Object[]{file.getName(), test.asDocument().getString(\"description\").getValue(),\n                        testDocument.getArray(\"data\"), test.asDocument()});",
    "info" : "ExpressionStatement[3762-3930]:ExpressionStatement[3755-3923]"
  }, {
    "left" : "return data;",
    "right" : "return data;",
    "info" : "ReturnStatement[3963-3975]:ReturnStatement[3956-3968]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[3987-3994]:Modifier[3980-3987]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[3995-4002]:PrimitiveType[3988-3995]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4017-4480]:Block[4010-4473]"
  }, {
    "left" : "if (filename.contains(\"insert\"))",
    "right" : "if (filename.contains(\"insert\"))",
    "info" : "IfStatement[4027-4453]:IfStatement[4020-4446]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4060-4157]:Block[4053-4150]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[4134-4147]:ReturnStatement[4127-4140]"
  }, {
    "left" : "if (!serverVersionAtLeast(asList(3, 0, 0))\n                && description.contains(\"when no documents match with upsert returning the document before modification\"))",
    "right" : "if (!serverVersionAtLeast(asList(3, 0, 0))\n                && description.contains(\"when no documents match with upsert returning the document before modification\"))",
    "info" : "IfStatement[4163-4453]:IfStatement[4156-4446]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4329-4453]:Block[4322-4446]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[4430-4443]:ReturnStatement[4423-4436]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[4462-4474]:ReturnStatement[4455-4467]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[4486-4493]:Modifier[4479-4486]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4494-4498]:PrimitiveType[4487-4491]"
  }, {
    "left" : "final BsonDocument expectedCollection",
    "right" : "final BsonDocument expectedCollection",
    "info" : "SingleVariableDeclaration[4522-4559]:SingleVariableDeclaration[4515-4552]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4561-4953]:Block[4554-4946]"
  }, {
    "left" : "MongoCollection<BsonDocument> collectionToCompare = collection;",
    "right" : "MongoCollection<BsonDocument> collectionToCompare = collection;",
    "info" : "VariableDeclarationStatement[4571-4634]:VariableDeclarationStatement[4564-4627]"
  }, {
    "left" : "if (expectedCollection.containsKey(\"name\"))",
    "right" : "if (expectedCollection.containsKey(\"name\"))",
    "info" : "IfStatement[4643-4825]:IfStatement[4636-4818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4687-4825]:Block[4680-4818]"
  }, {
    "left" : "collectionToCompare = database.getCollection(expectedCollection.getString(\"name\").getValue(), BsonDocument.class);",
    "right" : "collectionToCompare = database.getCollection(expectedCollection.getString(\"name\").getValue(), BsonDocument.class);",
    "info" : "ExpressionStatement[4701-4815]:ExpressionStatement[4694-4808]"
  }, {
    "left" : "assertEquals(description, expectedCollection.getArray(\"data\"), collectionToCompare.find().into(new BsonArray()));",
    "right" : "assertEquals(description, expectedCollection.getArray(\"data\"), collectionToCompare.find().into(new BsonArray()));",
    "info" : "ExpressionStatement[4834-4947]:ExpressionStatement[4827-4940]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[4959-4966]:Modifier[4952-4959]"
  }, {
    "left" : "BsonDocument",
    "right" : "BsonDocument",
    "info" : "SimpleType[4967-4979]:SimpleType[4960-4972]"
  }, {
    "left" : "final BsonDocument operation",
    "right" : "final BsonDocument operation",
    "info" : "SingleVariableDeclaration[5000-5028]:SingleVariableDeclaration[4993-5021]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5030-6062]:Block[5023-6055]"
  }, {
    "left" : "String name = operation.getString(\"name\").getValue();",
    "right" : "String name = operation.getString(\"name\").getValue();",
    "info" : "VariableDeclarationStatement[5040-5093]:VariableDeclarationStatement[5033-5086]"
  }, {
    "left" : "BsonDocument arguments = operation.getDocument(\"arguments\");",
    "right" : "BsonDocument arguments = operation.getDocument(\"arguments\");",
    "info" : "VariableDeclarationStatement[5102-5162]:VariableDeclarationStatement[5095-5155]"
  }, {
    "left" : "String methodName = \"get\" + name.substring(0, 1).toUpperCase() + name.substring(1) + \"Result\";",
    "right" : "String methodName = \"get\" + name.substring(0, 1).toUpperCase() + name.substring(1) + \"Result\";",
    "info" : "VariableDeclarationStatement[5172-5266]:VariableDeclarationStatement[5165-5259]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[5275-6056]:TryStatement[5268-6049]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5279-5446]:Block[5272-5439]"
  }, {
    "left" : "Method method = getClass().getDeclaredMethod(methodName, BsonDocument.class);",
    "right" : "Method method = getClass().getDeclaredMethod(methodName, BsonDocument.class);",
    "info" : "VariableDeclarationStatement[5293-5370]:VariableDeclarationStatement[5286-5363]"
  }, {
    "left" : "return (BsonDocument) method.invoke(this, arguments);",
    "right" : "return (BsonDocument) method.invoke(this, arguments);",
    "info" : "ReturnStatement[5383-5436]:ReturnStatement[5376-5429]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5479-5585]:Block[5472-5578]"
  }, {
    "left" : "throw new UnsupportedOperationException(\"No handler for operation \" + methodName);",
    "right" : "throw new UnsupportedOperationException(\"No handler for operation \" + methodName);",
    "info" : "ThrowStatement[5493-5575]:ThrowStatement[5486-5568]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5622-5904]:Block[5615-5897]"
  }, {
    "left" : "if (e.getTargetException() instanceof AssumptionViolatedException)",
    "right" : "if (e.getTargetException() instanceof AssumptionViolatedException)",
    "info" : "IfStatement[5636-5794]:IfStatement[5629-5787]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5703-5794]:Block[5696-5787]"
  }, {
    "left" : "throw (AssumptionViolatedException) e.getTargetException();",
    "right" : "throw (AssumptionViolatedException) e.getTargetException();",
    "info" : "ThrowStatement[5721-5780]:ThrowStatement[5714-5773]"
  }, {
    "left" : "throw new UnsupportedOperationException(\"Invalid handler for operation \" + methodName);",
    "right" : "throw new UnsupportedOperationException(\"Invalid handler for operation \" + methodName);",
    "info" : "ThrowStatement[5807-5894]:ThrowStatement[5800-5887]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5938-6056]:Block[5931-6049]"
  }, {
    "left" : "throw new UnsupportedOperationException(\"Invalid handler access for operation \" + methodName);",
    "right" : "throw new UnsupportedOperationException(\"Invalid handler access for operation \" + methodName);",
    "info" : "ThrowStatement[5952-6046]:ThrowStatement[5945-6039]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6068-6075]:Modifier[6061-6068]"
  }, {
    "left" : "BsonDocument",
    "right" : "BsonDocument",
    "info" : "SimpleType[6076-6088]:SimpleType[6069-6081]"
  }, {
    "left" : "final int count",
    "right" : "final int count",
    "info" : "SingleVariableDeclaration[6098-6113]:SingleVariableDeclaration[6091-6106]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6115-6169]:Block[6108-6162]"
  }, {
    "left" : "return toResult(new BsonInt32(count));",
    "right" : "return toResult(new BsonInt32(count));",
    "info" : "ReturnStatement[6125-6163]:ReturnStatement[6118-6156]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6174-6181]:Modifier[6167-6174]"
  }, {
    "left" : "BsonDocument",
    "right" : "BsonDocument",
    "info" : "SimpleType[6182-6194]:SimpleType[6175-6187]"
  }, {
    "left" : "final MongoIterable<BsonDocument> results",
    "right" : "final MongoIterable<BsonDocument> results",
    "info" : "SingleVariableDeclaration[6204-6245]:SingleVariableDeclaration[6197-6238]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6247-6339]:Block[6240-6332]"
  }, {
    "left" : "return toResult(new BsonArray(results.into(new ArrayList<BsonDocument>())));",
    "right" : "return toResult(new BsonArray(results.into(new ArrayList<BsonDocument>())));",
    "info" : "ReturnStatement[6257-6333]:ReturnStatement[6250-6326]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6344-6351]:Modifier[6337-6344]"
  }, {
    "left" : "BsonDocument",
    "right" : "BsonDocument",
    "info" : "SimpleType[6352-6364]:SimpleType[6345-6357]"
  }, {
    "left" : "final String key",
    "right" : "final String key",
    "info" : "SingleVariableDeclaration[6374-6390]:SingleVariableDeclaration[6367-6383]"
  }, {
    "left" : "final BsonValue value",
    "right" : "final BsonValue value",
    "info" : "SingleVariableDeclaration[6392-6413]:SingleVariableDeclaration[6385-6406]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6415-6477]:Block[6408-6470]"
  }, {
    "left" : "return toResult(new BsonDocument(key, value));",
    "right" : "return toResult(new BsonDocument(key, value));",
    "info" : "ReturnStatement[6425-6471]:ReturnStatement[6418-6464]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6482-6489]:Modifier[6475-6482]"
  }, {
    "left" : "BsonDocument",
    "right" : "BsonDocument",
    "info" : "SimpleType[6490-6502]:SimpleType[6483-6495]"
  }, {
    "left" : "final UpdateResult updateResult",
    "right" : "final UpdateResult updateResult",
    "info" : "SingleVariableDeclaration[6512-6543]:SingleVariableDeclaration[6505-6536]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6545-7041]:Block[6538-7034]"
  }, {
    "left" : "assumeTrue(serverVersionAtLeast(asList(2, 6, 0)));",
    "right" : "assumeTrue(serverVersionAtLeast(asList(2, 6, 0)));",
    "info" : "ExpressionStatement[6555-6605]:ExpressionStatement[6548-6598]"
  }, {
    "left" : "BsonDocument resultDoc = new BsonDocument(\"matchedCount\", new BsonInt32((int) updateResult.getMatchedCount()))\n                .append(\"modifiedCount\", new BsonInt32((int) updateResult.getModifiedCount()));",
    "right" : "BsonDocument resultDoc = new BsonDocument(\"matchedCount\", new BsonInt32((int) updateResult.getMatchedCount()))\n                .append(\"modifiedCount\", new BsonInt32((int) updateResult.getModifiedCount()));",
    "info" : "VariableDeclarationStatement[6657-6863]:VariableDeclarationStatement[6650-6856]"
  }, {
    "left" : "if (updateResult.getUpsertedId() != null)",
    "right" : "if (updateResult.getUpsertedId() != null)",
    "info" : "IfStatement[6872-6999]:IfStatement[6865-6992]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6914-6999]:Block[6907-6992]"
  }, {
    "left" : "resultDoc.append(\"upsertedId\", updateResult.getUpsertedId());",
    "right" : "resultDoc.append(\"upsertedId\", updateResult.getUpsertedId());",
    "info" : "ExpressionStatement[6928-6989]:ExpressionStatement[6921-6982]"
  }, {
    "left" : "return toResult(resultDoc);",
    "right" : "return toResult(resultDoc);",
    "info" : "ReturnStatement[7008-7035]:ReturnStatement[7001-7028]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7046-7053]:Modifier[7039-7046]"
  }, {
    "left" : "BsonDocument",
    "right" : "BsonDocument",
    "info" : "SimpleType[7054-7066]:SimpleType[7047-7059]"
  }, {
    "left" : "final BsonValue results",
    "right" : "final BsonValue results",
    "info" : "SingleVariableDeclaration[7076-7099]:SingleVariableDeclaration[7069-7092]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7101-7195]:Block[7094-7188]"
  }, {
    "left" : "return new BsonDocument(\"result\", results != null ? results : BsonNull.VALUE);",
    "right" : "return new BsonDocument(\"result\", results != null ? results : BsonNull.VALUE);",
    "info" : "ReturnStatement[7111-7189]:ReturnStatement[7104-7182]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7200-7207]:Modifier[7193-7200]"
  }, {
    "left" : "BsonDocument",
    "right" : "BsonDocument",
    "info" : "SimpleType[7208-7220]:SimpleType[7201-7213]"
  }, {
    "left" : "final BsonDocument arguments",
    "right" : "final BsonDocument arguments",
    "info" : "SingleVariableDeclaration[7240-7268]:SingleVariableDeclaration[7233-7261]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7270-7698]:Block[7263-7691]"
  }, {
    "left" : "if (!serverVersionAtLeast(asList(2, 6, 0)))",
    "right" : "if (!serverVersionAtLeast(asList(2, 6, 0)))",
    "info" : "IfStatement[7280-7390]:IfStatement[7273-7383]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7324-7390]:Block[7317-7383]"
  }, {
    "left" : "assumeFalse(description.contains(\"$out\"));",
    "right" : "assumeFalse(description.contains(\"$out\"));",
    "info" : "ExpressionStatement[7338-7380]:ExpressionStatement[7331-7373]"
  }, {
    "left" : "List<BsonDocument> pipeline = new ArrayList<BsonDocument>();",
    "right" : "List<BsonDocument> pipeline = new ArrayList<BsonDocument>();",
    "info" : "VariableDeclarationStatement[7400-7460]:VariableDeclarationStatement[7393-7453]"
  }, {
    "left" : "for (BsonValue stage: arguments.getArray(\"pipeline\"))",
    "right" : "for (BsonValue stage: arguments.getArray(\"pipeline\"))",
    "info" : "EnhancedForStatement[7469-7580]:EnhancedForStatement[7462-7573]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7523-7580]:Block[7516-7573]"
  }, {
    "left" : "pipeline.add(stage.asDocument());",
    "right" : "pipeline.add(stage.asDocument());",
    "info" : "ExpressionStatement[7537-7570]:ExpressionStatement[7530-7563]"
  }, {
    "left" : "return toResult(collection.aggregate(pipeline).batchSize(arguments.getNumber(\"batchSize\").intValue()));",
    "right" : "return toResult(collection.aggregate(pipeline).batchSize(arguments.getNumber(\"batchSize\").intValue()));",
    "info" : "ReturnStatement[7589-7692]:ReturnStatement[7582-7685]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7704-7711]:Modifier[7697-7704]"
  }, {
    "left" : "BsonDocument",
    "right" : "BsonDocument",
    "info" : "SimpleType[7712-7724]:SimpleType[7705-7717]"
  }, {
    "left" : "final BsonDocument arguments",
    "right" : "final BsonDocument arguments",
    "info" : "SingleVariableDeclaration[7740-7768]:SingleVariableDeclaration[7733-7761]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7770-8165]:Block[7763-8158]"
  }, {
    "left" : "CountOptions options = new CountOptions();",
    "right" : "CountOptions options = new CountOptions();",
    "info" : "VariableDeclarationStatement[7780-7822]:VariableDeclarationStatement[7773-7815]"
  }, {
    "left" : "if (arguments.containsKey(\"skip\"))",
    "right" : "if (arguments.containsKey(\"skip\"))",
    "info" : "IfStatement[7831-7943]:IfStatement[7824-7936]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7866-7943]:Block[7859-7936]"
  }, {
    "left" : "options.skip(arguments.getNumber(\"skip\").intValue());",
    "right" : "options.skip(arguments.getNumber(\"skip\").intValue());",
    "info" : "ExpressionStatement[7880-7933]:ExpressionStatement[7873-7926]"
  }, {
    "left" : "if (arguments.containsKey(\"limit\"))",
    "right" : "if (arguments.containsKey(\"limit\"))",
    "info" : "IfStatement[7952-8067]:IfStatement[7945-8060]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7988-8067]:Block[7981-8060]"
  }, {
    "left" : "options.limit(arguments.getNumber(\"limit\").intValue());",
    "right" : "options.limit(arguments.getNumber(\"limit\").intValue());",
    "info" : "ExpressionStatement[8002-8057]:ExpressionStatement[7995-8050]"
  }, {
    "left" : "return toResult((int) collection.count(arguments.getDocument(\"filter\"), options));",
    "right" : "return toResult((int) collection.count(arguments.getDocument(\"filter\"), options));",
    "info" : "ReturnStatement[8077-8159]:ReturnStatement[8070-8152]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[8171-8178]:Modifier[8164-8171]"
  }, {
    "left" : "BsonDocument",
    "right" : "BsonDocument",
    "info" : "SimpleType[8179-8191]:SimpleType[8172-8184]"
  }, {
    "left" : "final BsonDocument arguments",
    "right" : "final BsonDocument arguments",
    "info" : "SingleVariableDeclaration[8210-8238]:SingleVariableDeclaration[8203-8231]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8240-8434]:Block[8233-8427]"
  }, {
    "left" : "return toResult(collection.distinct(arguments.getString(\"fieldName\").getValue(), BsonInt32.class)\n                .filter(arguments.getDocument(\"filter\")).into(new BsonArray()));",
    "right" : "return toResult(collection.distinct(arguments.getString(\"fieldName\").getValue(), BsonInt32.class)\n                .filter(arguments.getDocument(\"filter\")).into(new BsonArray()));",
    "info" : "ReturnStatement[8250-8428]:ReturnStatement[8243-8421]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[8440-8447]:Modifier[8433-8440]"
  }, {
    "left" : "BsonDocument",
    "right" : "BsonDocument",
    "info" : "SimpleType[8448-8460]:SimpleType[8441-8453]"
  }, {
    "left" : "final BsonDocument arguments",
    "right" : "final BsonDocument arguments",
    "info" : "SingleVariableDeclaration[8475-8503]:SingleVariableDeclaration[8468-8496]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8505-9047]:Block[8498-9040]"
  }, {
    "left" : "FindIterable<BsonDocument> findIterable = collection.find(arguments.getDocument(\"filter\"));",
    "right" : "FindIterable<BsonDocument> findIterable = collection.find(arguments.getDocument(\"filter\"));",
    "info" : "VariableDeclarationStatement[8515-8606]:VariableDeclarationStatement[8508-8599]"
  }, {
    "left" : "if (arguments.containsKey(\"skip\"))",
    "right" : "if (arguments.containsKey(\"skip\"))",
    "info" : "IfStatement[8615-8732]:IfStatement[8608-8725]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8650-8732]:Block[8643-8725]"
  }, {
    "left" : "findIterable.skip(arguments.getNumber(\"skip\").intValue());",
    "right" : "findIterable.skip(arguments.getNumber(\"skip\").intValue());",
    "info" : "ExpressionStatement[8664-8722]:ExpressionStatement[8657-8715]"
  }, {
    "left" : "if (arguments.containsKey(\"limit\"))",
    "right" : "if (arguments.containsKey(\"limit\"))",
    "info" : "IfStatement[8741-8861]:IfStatement[8734-8854]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8777-8861]:Block[8770-8854]"
  }, {
    "left" : "findIterable.limit(arguments.getNumber(\"limit\").intValue());",
    "right" : "findIterable.limit(arguments.getNumber(\"limit\").intValue());",
    "info" : "ExpressionStatement[8791-8851]:ExpressionStatement[8784-8844]"
  }, {
    "left" : "if (arguments.containsKey(\"batchSize\"))",
    "right" : "if (arguments.containsKey(\"batchSize\"))",
    "info" : "IfStatement[8870-9002]:IfStatement[8863-8995]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8910-9002]:Block[8903-8995]"
  }, {
    "left" : "findIterable.batchSize(arguments.getNumber(\"batchSize\").intValue());",
    "right" : "findIterable.batchSize(arguments.getNumber(\"batchSize\").intValue());",
    "info" : "ExpressionStatement[8924-8992]:ExpressionStatement[8917-8985]"
  }, {
    "left" : "return toResult(findIterable);",
    "right" : "return toResult(findIterable);",
    "info" : "ReturnStatement[9011-9041]:ReturnStatement[9004-9034]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[9053-9060]:Modifier[9046-9053]"
  }, {
    "left" : "BsonDocument",
    "right" : "BsonDocument",
    "info" : "SimpleType[9061-9073]:SimpleType[9054-9066]"
  }, {
    "left" : "final BsonDocument arguments",
    "right" : "final BsonDocument arguments",
    "info" : "SingleVariableDeclaration[9094-9122]:SingleVariableDeclaration[9087-9115]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9124-9283]:Block[9117-9276]"
  }, {
    "left" : "return toResult(\"deletedCount\",\n                new BsonInt32((int) collection.deleteMany(arguments.getDocument(\"filter\")).getDeletedCount()));",
    "right" : "return toResult(\"deletedCount\",\n                new BsonInt32((int) collection.deleteMany(arguments.getDocument(\"filter\")).getDeletedCount()));",
    "info" : "ReturnStatement[9134-9277]:ReturnStatement[9127-9270]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[9289-9296]:Modifier[9282-9289]"
  }, {
    "left" : "BsonDocument",
    "right" : "BsonDocument",
    "info" : "SimpleType[9297-9309]:SimpleType[9290-9302]"
  }, {
    "left" : "final BsonDocument arguments",
    "right" : "final BsonDocument arguments",
    "info" : "SingleVariableDeclaration[9329-9357]:SingleVariableDeclaration[9322-9350]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9359-9501]:Block[9352-9494]"
  }, {
    "left" : "return toResult(\"deletedCount\", new BsonInt32((int) collection.deleteOne(arguments.getDocument(\"filter\")).getDeletedCount()));",
    "right" : "return toResult(\"deletedCount\", new BsonInt32((int) collection.deleteOne(arguments.getDocument(\"filter\")).getDeletedCount()));",
    "info" : "ReturnStatement[9369-9495]:ReturnStatement[9362-9488]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[9507-9514]:Modifier[9500-9507]"
  }, {
    "left" : "BsonDocument",
    "right" : "BsonDocument",
    "info" : "SimpleType[9515-9527]:SimpleType[9508-9520]"
  }, {
    "left" : "final BsonDocument arguments",
    "right" : "final BsonDocument arguments",
    "info" : "SingleVariableDeclaration[9554-9582]:SingleVariableDeclaration[9547-9575]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9584-10002]:Block[9577-9995]"
  }, {
    "left" : "FindOneAndDeleteOptions options = new FindOneAndDeleteOptions();",
    "right" : "FindOneAndDeleteOptions options = new FindOneAndDeleteOptions();",
    "info" : "VariableDeclarationStatement[9594-9658]:VariableDeclarationStatement[9587-9651]"
  }, {
    "left" : "if (arguments.containsKey(\"projection\"))",
    "right" : "if (arguments.containsKey(\"projection\"))",
    "info" : "IfStatement[9667-9788]:IfStatement[9660-9781]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9708-9788]:Block[9701-9781]"
  }, {
    "left" : "options.projection(arguments.getDocument(\"projection\"));",
    "right" : "options.projection(arguments.getDocument(\"projection\"));",
    "info" : "ExpressionStatement[9722-9778]:ExpressionStatement[9715-9771]"
  }, {
    "left" : "if (arguments.containsKey(\"sort\"))",
    "right" : "if (arguments.containsKey(\"sort\"))",
    "info" : "IfStatement[9797-9900]:IfStatement[9790-9893]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9832-9900]:Block[9825-9893]"
  }, {
    "left" : "options.sort(arguments.getDocument(\"sort\"));",
    "right" : "options.sort(arguments.getDocument(\"sort\"));",
    "info" : "ExpressionStatement[9846-9890]:ExpressionStatement[9839-9883]"
  }, {
    "left" : "return toResult(collection.findOneAndDelete(arguments.getDocument(\"filter\"), options));",
    "right" : "return toResult(collection.findOneAndDelete(arguments.getDocument(\"filter\"), options));",
    "info" : "ReturnStatement[9909-9996]:ReturnStatement[9902-9989]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[10008-10015]:Modifier[10001-10008]"
  }, {
    "left" : "BsonDocument",
    "right" : "BsonDocument",
    "info" : "SimpleType[10016-10028]:SimpleType[10009-10021]"
  }, {
    "left" : "final BsonDocument arguments",
    "right" : "final BsonDocument arguments",
    "info" : "SingleVariableDeclaration[10056-10084]:SingleVariableDeclaration[10049-10077]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10086-11039]:Block[10079-11032]"
  }, {
    "left" : "assumeTrue(serverVersionAtLeast(asList(2, 6, 0)));",
    "right" : "assumeTrue(serverVersionAtLeast(asList(2, 6, 0)));",
    "info" : "ExpressionStatement[10096-10146]:ExpressionStatement[10089-10139]"
  }, {
    "left" : "FindOneAndReplaceOptions options = new FindOneAndReplaceOptions();",
    "right" : "FindOneAndReplaceOptions options = new FindOneAndReplaceOptions();",
    "info" : "VariableDeclarationStatement[10228-10294]:VariableDeclarationStatement[10221-10287]"
  }, {
    "left" : "if (arguments.containsKey(\"projection\"))",
    "right" : "if (arguments.containsKey(\"projection\"))",
    "info" : "IfStatement[10303-10424]:IfStatement[10296-10417]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10344-10424]:Block[10337-10417]"
  }, {
    "left" : "options.projection(arguments.getDocument(\"projection\"));",
    "right" : "options.projection(arguments.getDocument(\"projection\"));",
    "info" : "ExpressionStatement[10358-10414]:ExpressionStatement[10351-10407]"
  }, {
    "left" : "if (arguments.containsKey(\"sort\"))",
    "right" : "if (arguments.containsKey(\"sort\"))",
    "info" : "IfStatement[10433-10536]:IfStatement[10426-10529]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10468-10536]:Block[10461-10529]"
  }, {
    "left" : "options.sort(arguments.getDocument(\"sort\"));",
    "right" : "options.sort(arguments.getDocument(\"sort\"));",
    "info" : "ExpressionStatement[10482-10526]:ExpressionStatement[10475-10519]"
  }, {
    "left" : "if (arguments.containsKey(\"upsert\"))",
    "right" : "if (arguments.containsKey(\"upsert\"))",
    "info" : "IfStatement[10545-10664]:IfStatement[10538-10657]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10582-10664]:Block[10575-10657]"
  }, {
    "left" : "options.upsert(arguments.getBoolean(\"upsert\").getValue());",
    "right" : "options.upsert(arguments.getBoolean(\"upsert\").getValue());",
    "info" : "ExpressionStatement[10596-10654]:ExpressionStatement[10589-10647]"
  }, {
    "left" : "if (arguments.containsKey(\"returnDocument\"))",
    "right" : "if (arguments.containsKey(\"returnDocument\"))",
    "info" : "IfStatement[10673-10898]:IfStatement[10666-10891]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10718-10898]:Block[10711-10891]"
  }, {
    "left" : "options.returnDocument(arguments.getString(\"returnDocument\").getValue().equals(\"After\") ? ReturnDocument.AFTER\n                    : ReturnDocument.BEFORE);",
    "right" : "options.returnDocument(arguments.getString(\"returnDocument\").getValue().equals(\"After\") ? ReturnDocument.AFTER\n                    : ReturnDocument.BEFORE);",
    "info" : "ExpressionStatement[10732-10888]:ExpressionStatement[10725-10881]"
  }, {
    "left" : "return toResult(collection.findOneAndReplace(arguments.getDocument(\"filter\"), arguments.getDocument(\"replacement\"), options));",
    "right" : "return toResult(collection.findOneAndReplace(arguments.getDocument(\"filter\"), arguments.getDocument(\"replacement\"), options));",
    "info" : "ReturnStatement[10907-11033]:ReturnStatement[10900-11026]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[11045-11052]:Modifier[11038-11045]"
  }, {
    "left" : "BsonDocument",
    "right" : "BsonDocument",
    "info" : "SimpleType[11053-11065]:SimpleType[11046-11058]"
  }, {
    "left" : "final BsonDocument arguments",
    "right" : "final BsonDocument arguments",
    "info" : "SingleVariableDeclaration[11092-11120]:SingleVariableDeclaration[11085-11113]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11122-11935]:Block[11115-11928]"
  }, {
    "left" : "FindOneAndUpdateOptions options = new FindOneAndUpdateOptions();",
    "right" : "FindOneAndUpdateOptions options = new FindOneAndUpdateOptions();",
    "info" : "VariableDeclarationStatement[11132-11196]:VariableDeclarationStatement[11125-11189]"
  }, {
    "left" : "if (arguments.containsKey(\"projection\"))",
    "right" : "if (arguments.containsKey(\"projection\"))",
    "info" : "IfStatement[11205-11326]:IfStatement[11198-11319]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11246-11326]:Block[11239-11319]"
  }, {
    "left" : "options.projection(arguments.getDocument(\"projection\"));",
    "right" : "options.projection(arguments.getDocument(\"projection\"));",
    "info" : "ExpressionStatement[11260-11316]:ExpressionStatement[11253-11309]"
  }, {
    "left" : "if (arguments.containsKey(\"sort\"))",
    "right" : "if (arguments.containsKey(\"sort\"))",
    "info" : "IfStatement[11335-11438]:IfStatement[11328-11431]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11370-11438]:Block[11363-11431]"
  }, {
    "left" : "options.sort(arguments.getDocument(\"sort\"));",
    "right" : "options.sort(arguments.getDocument(\"sort\"));",
    "info" : "ExpressionStatement[11384-11428]:ExpressionStatement[11377-11421]"
  }, {
    "left" : "if (arguments.containsKey(\"upsert\"))",
    "right" : "if (arguments.containsKey(\"upsert\"))",
    "info" : "IfStatement[11447-11566]:IfStatement[11440-11559]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11484-11566]:Block[11477-11559]"
  }, {
    "left" : "options.upsert(arguments.getBoolean(\"upsert\").getValue());",
    "right" : "options.upsert(arguments.getBoolean(\"upsert\").getValue());",
    "info" : "ExpressionStatement[11498-11556]:ExpressionStatement[11491-11549]"
  }, {
    "left" : "if (arguments.containsKey(\"returnDocument\"))",
    "right" : "if (arguments.containsKey(\"returnDocument\"))",
    "info" : "IfStatement[11575-11800]:IfStatement[11568-11793]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11620-11800]:Block[11613-11793]"
  }, {
    "left" : "options.returnDocument(arguments.getString(\"returnDocument\").getValue().equals(\"After\") ? ReturnDocument.AFTER\n                    : ReturnDocument.BEFORE);",
    "right" : "options.returnDocument(arguments.getString(\"returnDocument\").getValue().equals(\"After\") ? ReturnDocument.AFTER\n                    : ReturnDocument.BEFORE);",
    "info" : "ExpressionStatement[11634-11790]:ExpressionStatement[11627-11783]"
  }, {
    "left" : "return toResult(collection.findOneAndUpdate(arguments.getDocument(\"filter\"), arguments.getDocument(\"update\"), options));",
    "right" : "return toResult(collection.findOneAndUpdate(arguments.getDocument(\"filter\"), arguments.getDocument(\"update\"), options));",
    "info" : "ReturnStatement[11809-11929]:ReturnStatement[11802-11922]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[11941-11948]:Modifier[11934-11941]"
  }, {
    "left" : "BsonDocument",
    "right" : "BsonDocument",
    "info" : "SimpleType[11949-11961]:SimpleType[11942-11954]"
  }, {
    "left" : "final BsonDocument arguments",
    "right" : "final BsonDocument arguments",
    "info" : "SingleVariableDeclaration[11981-12009]:SingleVariableDeclaration[11974-12002]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12011-12126]:Block[12004-12119]"
  }, {
    "left" : "collection.insertOne(arguments.getDocument(\"document\"));",
    "right" : "collection.insertOne(arguments.getDocument(\"document\"));",
    "info" : "ExpressionStatement[12021-12077]:ExpressionStatement[12014-12070]"
  }, {
    "left" : "return toResult((BsonValue) null);",
    "right" : "return toResult((BsonValue) null);",
    "info" : "ReturnStatement[12086-12120]:ReturnStatement[12079-12113]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12132-12139]:Modifier[12125-12132]"
  }, {
    "left" : "BsonDocument",
    "right" : "BsonDocument",
    "info" : "SimpleType[12140-12152]:SimpleType[12133-12145]"
  }, {
    "left" : "final BsonDocument arguments",
    "right" : "final BsonDocument arguments",
    "info" : "SingleVariableDeclaration[12173-12201]:SingleVariableDeclaration[12166-12194]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12203-12494]:Block[12196-12487]"
  }, {
    "left" : "List<BsonDocument> documents = new ArrayList<BsonDocument>();",
    "right" : "List<BsonDocument> documents = new ArrayList<BsonDocument>();",
    "info" : "VariableDeclarationStatement[12213-12274]:VariableDeclarationStatement[12206-12267]"
  }, {
    "left" : "for (BsonValue document : arguments.getArray(\"documents\"))",
    "right" : "for (BsonValue document : arguments.getArray(\"documents\"))",
    "info" : "EnhancedForStatement[12283-12403]:EnhancedForStatement[12276-12396]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12342-12403]:Block[12335-12396]"
  }, {
    "left" : "documents.add(document.asDocument());",
    "right" : "documents.add(document.asDocument());",
    "info" : "ExpressionStatement[12356-12393]:ExpressionStatement[12349-12386]"
  }, {
    "left" : "collection.insertMany(documents);",
    "right" : "collection.insertMany(documents);",
    "info" : "ExpressionStatement[12412-12445]:ExpressionStatement[12405-12438]"
  }, {
    "left" : "return toResult((BsonValue) null);",
    "right" : "return toResult((BsonValue) null);",
    "info" : "ReturnStatement[12454-12488]:ReturnStatement[12447-12481]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12500-12507]:Modifier[12493-12500]"
  }, {
    "left" : "BsonDocument",
    "right" : "BsonDocument",
    "info" : "SimpleType[12508-12520]:SimpleType[12501-12513]"
  }, {
    "left" : "final BsonDocument arguments",
    "right" : "final BsonDocument arguments",
    "info" : "SingleVariableDeclaration[12541-12569]:SingleVariableDeclaration[12534-12562]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12571-12887]:Block[12564-12880]"
  }, {
    "left" : "UpdateOptions options = new UpdateOptions();",
    "right" : "UpdateOptions options = new UpdateOptions();",
    "info" : "VariableDeclarationStatement[12581-12625]:VariableDeclarationStatement[12574-12618]"
  }, {
    "left" : "if (arguments.containsKey(\"upsert\"))",
    "right" : "if (arguments.containsKey(\"upsert\"))",
    "info" : "IfStatement[12634-12753]:IfStatement[12627-12746]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12671-12753]:Block[12664-12746]"
  }, {
    "left" : "options.upsert(arguments.getBoolean(\"upsert\").getValue());",
    "right" : "options.upsert(arguments.getBoolean(\"upsert\").getValue());",
    "info" : "ExpressionStatement[12685-12743]:ExpressionStatement[12678-12736]"
  }, {
    "left" : "return toResult(collection.replaceOne(arguments.getDocument(\"filter\"), arguments.getDocument(\"replacement\"), options));",
    "right" : "return toResult(collection.replaceOne(arguments.getDocument(\"filter\"), arguments.getDocument(\"replacement\"), options));",
    "info" : "ReturnStatement[12762-12881]:ReturnStatement[12755-12874]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12893-12900]:Modifier[12886-12893]"
  }, {
    "left" : "BsonDocument",
    "right" : "BsonDocument",
    "info" : "SimpleType[12901-12913]:SimpleType[12894-12906]"
  }, {
    "left" : "final BsonDocument arguments",
    "right" : "final BsonDocument arguments",
    "info" : "SingleVariableDeclaration[12934-12962]:SingleVariableDeclaration[12927-12955]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12964-13275]:Block[12957-13268]"
  }, {
    "left" : "UpdateOptions options = new UpdateOptions();",
    "right" : "UpdateOptions options = new UpdateOptions();",
    "info" : "VariableDeclarationStatement[12974-13018]:VariableDeclarationStatement[12967-13011]"
  }, {
    "left" : "if (arguments.containsKey(\"upsert\"))",
    "right" : "if (arguments.containsKey(\"upsert\"))",
    "info" : "IfStatement[13027-13146]:IfStatement[13020-13139]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13064-13146]:Block[13057-13139]"
  }, {
    "left" : "options.upsert(arguments.getBoolean(\"upsert\").getValue());",
    "right" : "options.upsert(arguments.getBoolean(\"upsert\").getValue());",
    "info" : "ExpressionStatement[13078-13136]:ExpressionStatement[13071-13129]"
  }, {
    "left" : "return toResult(collection.updateMany(arguments.getDocument(\"filter\"), arguments.getDocument(\"update\"), options));",
    "right" : "return toResult(collection.updateMany(arguments.getDocument(\"filter\"), arguments.getDocument(\"update\"), options));",
    "info" : "ReturnStatement[13155-13269]:ReturnStatement[13148-13262]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[13281-13288]:Modifier[13274-13281]"
  }, {
    "left" : "BsonDocument",
    "right" : "BsonDocument",
    "info" : "SimpleType[13289-13301]:SimpleType[13282-13294]"
  }, {
    "left" : "final BsonDocument arguments",
    "right" : "final BsonDocument arguments",
    "info" : "SingleVariableDeclaration[13321-13349]:SingleVariableDeclaration[13314-13342]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13351-13661]:Block[13344-13654]"
  }, {
    "left" : "UpdateOptions options = new UpdateOptions();",
    "right" : "UpdateOptions options = new UpdateOptions();",
    "info" : "VariableDeclarationStatement[13361-13405]:VariableDeclarationStatement[13354-13398]"
  }, {
    "left" : "if (arguments.containsKey(\"upsert\"))",
    "right" : "if (arguments.containsKey(\"upsert\"))",
    "info" : "IfStatement[13414-13533]:IfStatement[13407-13526]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13451-13533]:Block[13444-13526]"
  }, {
    "left" : "options.upsert(arguments.getBoolean(\"upsert\").getValue());",
    "right" : "options.upsert(arguments.getBoolean(\"upsert\").getValue());",
    "info" : "ExpressionStatement[13465-13523]:ExpressionStatement[13458-13516]"
  }, {
    "left" : "return toResult(collection.updateOne(arguments.getDocument(\"filter\"), arguments.getDocument(\"update\"), options));",
    "right" : "return toResult(collection.updateOne(arguments.getDocument(\"filter\"), arguments.getDocument(\"update\"), options));",
    "info" : "ReturnStatement[13542-13655]:ReturnStatement[13535-13648]"
  } ]
}