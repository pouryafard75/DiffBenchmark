{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "DataStructuresTiming",
      "right" : "DataStructuresTiming",
      "info" : "TypeDeclaration[1586-85441]:TypeDeclaration[1618-72424]"
    }, {
      "left" : "private static final Random RANDOM = new Random();",
      "right" : "private static final Random RANDOM = new Random();",
      "info" : "FieldDeclaration[1627-1677]:FieldDeclaration[1659-1709]"
    }, {
      "left" : "private static final DecimalFormat FORMAT = new DecimalFormat(\"0.##\");",
      "right" : "private static final DecimalFormat FORMAT = new DecimalFormat(\"0.##\");",
      "info" : "FieldDeclaration[1682-1752]:FieldDeclaration[1714-1784]"
    }, {
      "left" : "private static final int NUMBER_OF_TESTS = 3;",
      "right" : "private static final int NUMBER_OF_TESTS = 3;",
      "info" : "FieldDeclaration[1757-1802]:FieldDeclaration[1789-1834]"
    }, {
      "left" : "private static final int ARRAY_SIZE = 1024*20;",
      "right" : "private static final int ARRAY_SIZE = 1024*20;",
      "info" : "FieldDeclaration[1906-1952]:FieldDeclaration[1932-1978]"
    }, {
      "left" : "private static final int RANDOM_SIZE = 1000 * ARRAY_SIZE;",
      "right" : "private static final int RANDOM_SIZE = 1000 * ARRAY_SIZE;",
      "info" : "FieldDeclaration[2023-2080]:FieldDeclaration[2049-2106]"
    }, {
      "left" : "private static final Integer INVALID = RANDOM_SIZE + 10;",
      "right" : "private static final Integer INVALID = RANDOM_SIZE + 10;",
      "info" : "FieldDeclaration[2085-2141]:FieldDeclaration[2111-2167]"
    }, {
      "left" : "private static boolean firstTimeThru = true;",
      "right" : "private static boolean firstTimeThru = true;",
      "info" : "FieldDeclaration[2279-2323]:FieldDeclaration[2878-2922]"
    }, {
      "left" : "private static int debug = 1;",
      "right" : "private static int debug = 1;",
      "info" : "FieldDeclaration[2383-2412]:FieldDeclaration[2462-2491]"
    }, {
      "left" : "private static boolean debugTime = true;",
      "right" : "private static boolean debugTime = true;",
      "info" : "FieldDeclaration[2510-2550]:FieldDeclaration[2589-2629]"
    }, {
      "left" : "private static boolean debugMemory = true;",
      "right" : "private static boolean debugMemory = true;",
      "info" : "FieldDeclaration[2640-2682]:FieldDeclaration[2719-2761]"
    }, {
      "left" : "private static final int TESTS = 39;",
      "right" : "private static final int TESTS = 39;",
      "info" : "FieldDeclaration[2737-2773]:FieldDeclaration[2173-2209]"
    }, {
      "left" : "private static final String[] testNames = new String[TESTS];",
      "right" : "private static final String[] testNames = new String[TESTS];",
      "info" : "FieldDeclaration[2827-2887]:FieldDeclaration[2263-2323]"
    }, {
      "left" : "private static final long[][] testResults = new long[TESTS][];",
      "right" : "private static final long[][] testResults = new long[TESTS][];",
      "info" : "FieldDeclaration[2924-2986]:FieldDeclaration[2360-2422]"
    }, {
      "left" : "private static int testIndex = 0;",
      "right" : "private static int testIndex = 0;",
      "info" : "FieldDeclaration[3025-3058]:FieldDeclaration[2816-2849]"
    }, {
      "left" : "public static void main(String[] args)",
      "right" : "public static void main(String[] args)",
      "info" : "MethodDeclaration[3088-3517]:MethodDeclaration[2983-3372]"
    }, {
      "left" : "private static void generateTestData(int idx, int size, Integer[][] unsorteds, Integer[][] sorteds, String[] strings)",
      "right" : "private static void generateTestData(int idx, int size, Integer[][] unsorteds, Integer[][] sorteds, String[] strings)",
      "info" : "MethodDeclaration[3523-4833]:MethodDeclaration[3378-4694]"
    }, {
      "left" : "private static boolean runTests()",
      "right" : "private static boolean runTests()",
      "info" : "MethodDeclaration[4839-32261]:MethodDeclaration[4700-10168]"
    }, {
      "left" : "private static void handleError(Object obj)",
      "right" : "private static void handleError(String input, Object obj)",
      "info" : "MethodDeclaration[32267-32452]:MethodDeclaration[11218-11416]"
    }, {
      "left" : "private static boolean testBST()",
      "right" : "private static final boolean runTests(Testable testable, int tests, Integer[][] unsorteds, Integer sorteds[][], String[] strings)",
      "info" : "MethodDeclaration[33244-33490]:MethodDeclaration[10174-11212]"
    }, {
      "left" : "public int compare(Integer arg0, Integer arg1)",
      "right" : "public int compare(Integer arg0, Integer arg1)",
      "info" : "MethodDeclaration[37173-37441]:MethodDeclaration[19467-19763]"
    }, {
      "left" : "private static <T extends Comparable<T>> boolean testJavaCollection(Collection<T> collection, Class<T> type, String name)",
      "right" : "private static <T extends Comparable<T>> boolean testJavaCollection(Collection<T> collection, Class<T> type, String name, Integer[] _unsorted, Integer[] _sorted, String input)",
      "info" : "MethodDeclaration[46645-63158]:MethodDeclaration[35028-51399]"
    }, {
      "left" : "private static <K extends Comparable<K>,V> boolean testJavaMap(java.util.Map<K,V> map, Class<K> keyType, String name)",
      "right" : "private static <K extends Comparable<K>,V> boolean testJavaMap(java.util.Map<K,V> map, Class<K> keyType, Class<V> valueType, String name, Integer[] _unsorted, Integer[] _sorted, String input)",
      "info" : "MethodDeclaration[63164-80064]:MethodDeclaration[51405-67024]"
    }, {
      "left" : "private static final String getTestResults(int number, String[] names, long[][] results)",
      "right" : "private static final String getTestResults(int number, String[] names, long[][] results)",
      "info" : "MethodDeclaration[80070-84613]:MethodDeclaration[67030-71596]"
    }, {
      "left" : "private static final long getMemoryUse()",
      "right" : "private static final long getMemoryUse()",
      "info" : "MethodDeclaration[84619-84892]:MethodDeclaration[71602-71875]"
    }, {
      "left" : "private static final void putOutTheGarbage()",
      "right" : "private static final void putOutTheGarbage()",
      "info" : "MethodDeclaration[84898-85028]:MethodDeclaration[71881-72011]"
    }, {
      "left" : "private static final long fSLEEP_INTERVAL = 100;",
      "right" : "private static final long fSLEEP_INTERVAL = 100;",
      "info" : "FieldDeclaration[85034-85082]:FieldDeclaration[72017-72065]"
    }, {
      "left" : "private static final void collectGarbage()",
      "right" : "private static final void collectGarbage()",
      "info" : "MethodDeclaration[85088-85439]:MethodDeclaration[72071-72422]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1586-1592]:Modifier[1618-1624]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1593-1598]:TYPE_DECLARATION_KIND[1625-1630]"
    }, {
      "left" : "DataStructuresTiming",
      "right" : "DataStructuresTiming",
      "info" : "SimpleName[1599-1619]:SimpleName[1631-1651]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3088-3094]:Modifier[2983-2989]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3095-3101]:Modifier[2990-2996]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3102-3106]:PrimitiveType[2997-3001]"
    }, {
      "left" : "main",
      "right" : "main",
      "info" : "SimpleName[3107-3111]:SimpleName[3002-3006]"
    }, {
      "left" : "String[] args",
      "right" : "String[] args",
      "info" : "SingleVariableDeclaration[3112-3125]:SingleVariableDeclaration[3007-3020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3127-3517]:Block[3022-3372]"
    }, {
      "left" : "System.out.println(\"Starting tests.\");",
      "right" : "System.out.println(\"Starting tests.\");",
      "info" : "ExpressionStatement[3137-3175]:ExpressionStatement[3032-3070]"
    }, {
      "left" : "boolean passed = false;",
      "right" : "boolean passed = false;",
      "info" : "VariableDeclarationStatement[3184-3207]:VariableDeclarationStatement[3079-3102]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[3216-3368]:TryStatement[3111-3223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3220-3264]:Block[3115-3159]"
    }, {
      "left" : "passed = runTests();",
      "right" : "passed = runTests();",
      "info" : "ExpressionStatement[3234-3254]:ExpressionStatement[3129-3149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3296-3368]:Block[3191-3223]"
    }, {
      "left" : "throw e;",
      "right" : "throw e;",
      "info" : "ThrowStatement[3350-3358]:ThrowStatement[3205-3213]"
    }, {
      "left" : "if (passed)",
      "right" : "if (passed)",
      "info" : "IfStatement[3377-3511]:IfStatement[3232-3366]"
    }, {
      "left" : "System.out.println(\"Tests finished. All passed.\");",
      "right" : "System.out.println(\"Tests finished. All passed.\");",
      "info" : "ExpressionStatement[3389-3439]:ExpressionStatement[3244-3294]"
    }, {
      "left" : "System.err.println(\"Tests finished. Detected a failure.\");",
      "right" : "System.err.println(\"Tests finished. Detected a failure.\");",
      "info" : "ExpressionStatement[3453-3511]:ExpressionStatement[3308-3366]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3523-3530]:Modifier[3378-3385]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3531-3537]:Modifier[3386-3392]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3538-3542]:PrimitiveType[3393-3397]"
    }, {
      "left" : "generateTestData",
      "right" : "generateTestData",
      "info" : "SimpleName[3543-3559]:SimpleName[3398-3414]"
    }, {
      "left" : "int idx",
      "right" : "int idx",
      "info" : "SingleVariableDeclaration[3560-3567]:SingleVariableDeclaration[3415-3422]"
    }, {
      "left" : "int size",
      "right" : "int size",
      "info" : "SingleVariableDeclaration[3569-3577]:SingleVariableDeclaration[3424-3432]"
    }, {
      "left" : "Integer[][] unsorteds",
      "right" : "Integer[][] unsorteds",
      "info" : "SingleVariableDeclaration[3579-3600]:SingleVariableDeclaration[3434-3455]"
    }, {
      "left" : "Integer[][] sorteds",
      "right" : "Integer[][] sorteds",
      "info" : "SingleVariableDeclaration[3602-3621]:SingleVariableDeclaration[3457-3476]"
    }, {
      "left" : "String[] strings",
      "right" : "String[] strings",
      "info" : "SingleVariableDeclaration[3623-3639]:SingleVariableDeclaration[3478-3494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3641-4833]:Block[3496-4694]"
    }, {
      "left" : "System.out.println(\"Generating data.\");",
      "right" : "System.out.println(\"Generating data.\");",
      "info" : "ExpressionStatement[3651-3690]:ExpressionStatement[3506-3545]"
    }, {
      "left" : "StringBuilder builder = new StringBuilder();",
      "right" : "StringBuilder builder = new StringBuilder();",
      "info" : "VariableDeclarationStatement[3699-3743]:VariableDeclarationStatement[3554-3598]"
    }, {
      "left" : "builder.append(\"Array=\");",
      "right" : "builder.append(\"Array=\");",
      "info" : "ExpressionStatement[3752-3777]:ExpressionStatement[3607-3632]"
    }, {
      "left" : "java.util.Set<Integer> set = new java.util.HashSet<Integer>();",
      "right" : "java.util.Set<Integer> set = new java.util.HashSet<Integer>();",
      "info" : "VariableDeclarationStatement[3786-3848]:VariableDeclarationStatement[3641-3703]"
    }, {
      "left" : "unsorteds[idx] = new Integer[size];",
      "right" : "unsorteds[idx] = new Integer[size];",
      "info" : "ExpressionStatement[3857-3892]:ExpressionStatement[3712-3747]"
    }, {
      "left" : "sorteds[idx] = new Integer[size];",
      "right" : "sorteds[idx] = new Integer[size];",
      "info" : "ExpressionStatement[3901-3934]:ExpressionStatement[3756-3789]"
    }, {
      "left" : "for (int i = 0; i < size; i++)",
      "right" : "for (int i = 0; i < size; i++)",
      "info" : "ForStatement[3943-4501]:ForStatement[3798-4356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3974-4501]:Block[3829-4356]"
    }, {
      "left" : "Integer j = RANDOM.nextInt(RANDOM_SIZE);",
      "right" : "Integer j = RANDOM.nextInt(RANDOM_SIZE);",
      "info" : "VariableDeclarationStatement[3988-4028]:VariableDeclarationStatement[3843-3883]"
    }, {
      "left" : "boolean found = true;",
      "right" : "boolean found = true;",
      "info" : "VariableDeclarationStatement[4090-4111]:VariableDeclarationStatement[3945-3966]"
    }, {
      "left" : "while (found)",
      "right" : "while (found)",
      "info" : "WhileStatement[4124-4398]:WhileStatement[3979-4253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4138-4398]:Block[3993-4253]"
    }, {
      "left" : "if (set.contains(j))",
      "right" : "if (set.contains(j))",
      "info" : "IfStatement[4156-4384]:IfStatement[4011-4239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4177-4249]:Block[4032-4104]"
    }, {
      "left" : "j = RANDOM.nextInt(RANDOM_SIZE);",
      "right" : "j = RANDOM.nextInt(RANDOM_SIZE);",
      "info" : "ExpressionStatement[4199-4231]:ExpressionStatement[4054-4086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4255-4384]:Block[4110-4239]"
    }, {
      "left" : "unsorteds[idx][i] = j;",
      "right" : "unsorteds[idx][i] = j;",
      "info" : "ExpressionStatement[4277-4299]:ExpressionStatement[4132-4154]"
    }, {
      "left" : "set.add(j);",
      "right" : "set.add(j);",
      "info" : "ExpressionStatement[4320-4331]:ExpressionStatement[4175-4186]"
    }, {
      "left" : "found = false;",
      "right" : "found = false;",
      "info" : "ExpressionStatement[4352-4366]:ExpressionStatement[4207-4221]"
    }, {
      "left" : "unsorteds[idx][i] = j;",
      "right" : "unsorteds[idx][i] = j;",
      "info" : "ExpressionStatement[4411-4433]:ExpressionStatement[4266-4288]"
    }, {
      "left" : "if (i!=size-1)",
      "right" : "if (i!=size-1)",
      "info" : "IfStatement[4446-4491]:IfStatement[4301-4346]"
    }, {
      "left" : "builder.append(j).append(',');",
      "right" : "builder.append(j).append(',');",
      "info" : "ExpressionStatement[4461-4491]:ExpressionStatement[4316-4346]"
    }, {
      "left" : "set.clear();",
      "right" : "set.clear();",
      "info" : "ExpressionStatement[4510-4522]:ExpressionStatement[4365-4377]"
    }, {
      "left" : "set = null;",
      "right" : "set = null;",
      "info" : "ExpressionStatement[4531-4542]:ExpressionStatement[4386-4397]"
    }, {
      "left" : "builder.append('\\n');",
      "right" : "builder.append('\\n');",
      "info" : "ExpressionStatement[4551-4572]:ExpressionStatement[4406-4427]"
    }, {
      "left" : "strings[idx] = builder.toString();",
      "right" : "strings[idx] = builder.toString();",
      "info" : "ExpressionStatement[4581-4615]:ExpressionStatement[4436-4470]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[4624-4666]:IfStatement[4479-4527]"
    }, {
      "left" : "System.out.println(string);",
      "right" : "System.out.println(strings[idx]);",
      "info" : "ExpressionStatement[4639-4666]:ExpressionStatement[4494-4527]"
    }, {
      "left" : "sorteds[idx] = Arrays.copyOf(unsorteds[idx], unsorteds[idx].length);",
      "right" : "sorteds[idx] = Arrays.copyOf(unsorteds[idx], unsorteds[idx].length);",
      "info" : "ExpressionStatement[4676-4744]:ExpressionStatement[4537-4605]"
    }, {
      "left" : "Arrays.sort(sorteds[idx]);",
      "right" : "Arrays.sort(sorteds[idx]);",
      "info" : "ExpressionStatement[4753-4779]:ExpressionStatement[4614-4640]"
    }, {
      "left" : "System.out.println(\"Generated data.\");",
      "right" : "System.out.println(\"Generated data.\");",
      "info" : "ExpressionStatement[4789-4827]:ExpressionStatement[4650-4688]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4839-4846]:Modifier[4700-4707]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4847-4853]:Modifier[4708-4714]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[4854-4861]:PrimitiveType[4715-4722]"
    }, {
      "left" : "runTests",
      "right" : "runTests",
      "info" : "SimpleName[4862-4870]:SimpleName[4723-4731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4873-32261]:Block[4734-10168]"
    }, {
      "left" : "testIndex = 0;",
      "right" : "testIndex = 0;",
      "info" : "ExpressionStatement[4883-4897]:ExpressionStatement[4744-4758]"
    }, {
      "left" : "int tests = NUMBER_OF_TESTS+1;",
      "right" : "int tests = NUMBER_OF_TESTS+1;",
      "info" : "VariableDeclarationStatement[4999-5029]:VariableDeclarationStatement[4828-4858]"
    }, {
      "left" : "Integer[][] unsorteds = new Integer[tests][];",
      "right" : "Integer[][] unsorteds = new Integer[tests][];",
      "info" : "VariableDeclarationStatement[5038-5083]:VariableDeclarationStatement[4867-4912]"
    }, {
      "left" : "Integer[][] sorteds = new Integer[tests][];",
      "right" : "Integer[][] sorteds = new Integer[tests][];",
      "info" : "VariableDeclarationStatement[5092-5135]:VariableDeclarationStatement[4921-4964]"
    }, {
      "left" : "String[] strings = new String[tests];",
      "right" : "String[] strings = new String[tests];",
      "info" : "VariableDeclarationStatement[5144-5181]:VariableDeclarationStatement[4973-5010]"
    }, {
      "left" : "for (int i=0; i<tests; i++)\n            generateTestData(i, ARRAY_SIZE, unsorteds, sorteds, strings);",
      "right" : "for (int i=0; i<tests; i++)\n            generateTestData(i, ARRAY_SIZE, unsorteds, sorteds, strings);",
      "info" : "ForStatement[5190-5291]:ForStatement[5019-5120]"
    }, {
      "left" : "generateTestData(i, ARRAY_SIZE, unsorteds, sorteds, strings);",
      "right" : "generateTestData(i, ARRAY_SIZE, unsorteds, sorteds, strings);",
      "info" : "ExpressionStatement[5230-5291]:ExpressionStatement[5059-5120]"
    }, {
      "left" : "firstTimeThru = true;",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[5319-5340]:ExpressionStatement[5129-5148]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[5702-5707]:BooleanLiteral[5269-5274]"
    }, {
      "left" : "System.err.println(string);",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[5790-5817]:ExpressionStatement[5284-5303]"
    }, {
      "left" : "if (debugTime && debugMemory)",
      "right" : "if (!runTests(new testRedBlackTree(), tests, unsorteds, sorteds, strings))",
      "info" : "IfStatement[5910-6028]:IfStatement[5313-5401]"
    }, {
      "left" : "NUMBER_OF_TESTS",
      "right" : "tests",
      "info" : "SimpleName[5986-6001]:SimpleName[5351-5356]"
    }, {
      "left" : "testResults",
      "right" : "strings",
      "info" : "SimpleName[6014-6025]:SimpleName[5378-5385]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[6062-6081]:ExpressionStatement[5410-5429]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[6453-6458]:BooleanLiteral[5516-5521]"
    }, {
      "left" : "System.err.println(string);",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[6541-6568]:ExpressionStatement[5531-5550]"
    }, {
      "left" : "if (debugTime && debugMemory)",
      "right" : "if (!runTests(new testSplayTree(), tests, unsorteds, sorteds, strings))",
      "info" : "IfStatement[6661-6779]:IfStatement[5560-5645]"
    }, {
      "left" : "NUMBER_OF_TESTS",
      "right" : "tests",
      "info" : "SimpleName[6737-6752]:SimpleName[5595-5600]"
    }, {
      "left" : "testResults",
      "right" : "strings",
      "info" : "SimpleName[6765-6776]:SimpleName[5622-5629]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[6813-6832]:ExpressionStatement[5654-5673]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[7193-7198]:BooleanLiteral[5758-5763]"
    }, {
      "left" : "System.err.println(string);",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[7281-7308]:ExpressionStatement[5773-5792]"
    }, {
      "left" : "if (debugTime && debugMemory)",
      "right" : "if (!runTests(new testTreap(), tests, unsorteds, sorteds, strings))",
      "info" : "IfStatement[7401-7519]:IfStatement[5802-5883]"
    }, {
      "left" : "NUMBER_OF_TESTS",
      "right" : "tests",
      "info" : "SimpleName[7477-7492]:SimpleName[5833-5838]"
    }, {
      "left" : "testResults",
      "right" : "strings",
      "info" : "SimpleName[7505-7516]:SimpleName[5860-5867]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[7553-7572]:ExpressionStatement[5892-5911]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[7937-7942]:BooleanLiteral[5994-5999]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[8297-8316]:ExpressionStatement[6009-6028]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[8673-8678]:BooleanLiteral[6130-6135]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[9033-9052]:ExpressionStatement[6145-6164]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[9408-9413]:BooleanLiteral[6248-6253]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[9768-9787]:ExpressionStatement[6263-6282]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[10139-10144]:BooleanLiteral[6374-6379]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[10499-10518]:ExpressionStatement[6389-6408]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[10909-10914]:BooleanLiteral[6517-6522]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[11269-11288]:ExpressionStatement[6532-6551]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[11642-11647]:BooleanLiteral[6639-6644]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[12002-12021]:ExpressionStatement[6654-6673]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[12392-12397]:BooleanLiteral[6782-6787]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[12752-12771]:ExpressionStatement[6797-6816]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[13162-13167]:BooleanLiteral[6908-6913]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[13522-13541]:ExpressionStatement[6923-6942]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[13904-13909]:BooleanLiteral[7033-7038]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[14264-14283]:ExpressionStatement[7048-7067]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[14671-14676]:BooleanLiteral[7158-7163]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[15031-15050]:ExpressionStatement[7173-7192]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[15411-15416]:BooleanLiteral[7284-7289]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[15771-15790]:ExpressionStatement[7299-7318]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[16160-16165]:BooleanLiteral[7409-7414]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[16520-16539]:ExpressionStatement[7424-7443]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[16900-16905]:BooleanLiteral[7554-7559]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[17260-17279]:ExpressionStatement[7569-7588]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[17665-17670]:BooleanLiteral[7677-7682]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[18025-18044]:ExpressionStatement[7692-7711]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[18403-18408]:BooleanLiteral[7805-7810]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[18763-18782]:ExpressionStatement[7820-7839]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[19151-19156]:BooleanLiteral[7929-7934]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[19511-19530]:ExpressionStatement[7944-7963]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[19890-19895]:BooleanLiteral[8076-8081]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[20250-20269]:ExpressionStatement[8091-8110]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[20658-20663]:BooleanLiteral[8200-8205]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[21018-21037]:ExpressionStatement[8215-8234]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[21398-21403]:BooleanLiteral[8329-8334]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[21758-21777]:ExpressionStatement[8344-8363]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[22148-22153]:BooleanLiteral[8454-8459]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[22508-22527]:ExpressionStatement[8469-8488]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[22889-22894]:BooleanLiteral[8596-8601]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[23249-23268]:ExpressionStatement[8611-8630]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[23652-23657]:BooleanLiteral[8720-8725]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[24012-24031]:ExpressionStatement[8735-8754]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[24392-24397]:BooleanLiteral[8845-8850]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[24752-24771]:ExpressionStatement[8860-8879]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[25133-25138]:BooleanLiteral[8987-8992]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[25493-25512]:ExpressionStatement[9002-9021]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[25899-25904]:BooleanLiteral[9115-9120]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[26259-26278]:ExpressionStatement[9130-9149]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[26639-26644]:BooleanLiteral[9244-9249]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[26999-27018]:ExpressionStatement[9259-9278]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[27388-27393]:BooleanLiteral[9369-9374]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[27748-27767]:ExpressionStatement[9384-9403]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[28128-28133]:BooleanLiteral[9490-9495]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[28488-28507]:ExpressionStatement[9505-9524]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[28868-28873]:BooleanLiteral[9611-9616]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[29228-29247]:ExpressionStatement[9626-9645]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[29612-29617]:BooleanLiteral[9734-9739]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[29972-29991]:ExpressionStatement[9749-9768]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[30372-30377]:BooleanLiteral[9863-9868]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[30732-30751]:ExpressionStatement[9878-9897]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[31121-31126]:BooleanLiteral[9988-9993]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[31481-31500]:ExpressionStatement[10003-10022]"
    }, {
      "left" : "false",
      "right" : "false",
      "info" : "BooleanLiteral[31854-31859]:BooleanLiteral[10106-10111]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[32214-32233]:ExpressionStatement[10121-10140]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[32243-32255]:ReturnStatement[10150-10162]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32267-32274]:Modifier[11218-11225]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32275-32281]:Modifier[11226-11232]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[32282-32286]:PrimitiveType[11233-11237]"
    }, {
      "left" : "handleError",
      "right" : "handleError",
      "info" : "SimpleName[32287-32298]:SimpleName[11238-11249]"
    }, {
      "left" : "Object obj",
      "right" : "Object obj",
      "info" : "SingleVariableDeclaration[32299-32309]:SingleVariableDeclaration[11264-11274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32311-32452]:Block[11276-11416]"
    }, {
      "left" : "System.err.println(string);",
      "right" : "System.err.println(input);",
      "info" : "ExpressionStatement[32321-32348]:ExpressionStatement[11286-11312]"
    }, {
      "left" : "string",
      "right" : "input",
      "info" : "SimpleName[32340-32346]:SimpleName[11305-11310]"
    }, {
      "left" : "System.err.println(obj.toString());",
      "right" : "System.err.println(obj.toString());",
      "info" : "ExpressionStatement[32357-32392]:ExpressionStatement[11321-11356]"
    }, {
      "left" : "throw new RuntimeException(\"Error in test.\");",
      "right" : "throw new RuntimeException(\"Error in test.\");",
      "info" : "ThrowStatement[32401-32446]:ThrowStatement[11365-11410]"
    }, {
      "left" : "avlTree = new AVLTree<Integer>()",
      "right" : "avlTree = new AVLTree<Integer>()",
      "info" : "VariableDeclarationFragment[32505-32537]:VariableDeclarationFragment[11790-11822]"
    }, {
      "left" : "bstCollection = avlTree.toCollection()",
      "right" : "bstCollection = avlTree.toCollection()",
      "info" : "VariableDeclarationFragment[32657-32695]:VariableDeclarationFragment[11896-11934]"
    }, {
      "left" : "bTree = new BTree<Integer>(2)",
      "right" : "bTree = new BTree<Integer>(2)",
      "info" : "VariableDeclarationFragment[32850-32879]:VariableDeclarationFragment[12350-12379]"
    }, {
      "left" : "bstCollection = bTree.toCollection()",
      "right" : "bstCollection = bTree.toCollection()",
      "info" : "VariableDeclarationFragment[32997-33033]:VariableDeclarationFragment[12451-12487]"
    }, {
      "left" : "bst = new BinarySearchTree<Integer>()",
      "right" : "bst = new BinarySearchTree<Integer>()",
      "info" : "VariableDeclarationFragment[33201-33238]:VariableDeclarationFragment[12912-12949]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[33244-33251]:Modifier[10174-10181]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[33252-33258]:Modifier[10182-10188]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[33259-33266]:PrimitiveType[10195-10202]"
    }, {
      "left" : "testBST",
      "right" : "runTests",
      "info" : "SimpleName[33267-33274]:SimpleName[10203-10211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33277-33490]:Block[10304-11212]"
    }, {
      "left" : "String name = \"BST <Integer>\";",
      "right" : "String string = strings[i];",
      "info" : "VariableDeclarationStatement[33287-33317]:VariableDeclarationStatement[10539-10566]"
    }, {
      "left" : "name = \"BST <Integer>\"",
      "right" : "name = \"BST <Integer>\"",
      "info" : "VariableDeclarationFragment[33294-33316]:VariableDeclarationFragment[12966-12988]"
    }, {
      "left" : "bstCollection = bst.toCollection()",
      "right" : "bstCollection = bst.toCollection()",
      "info" : "VariableDeclarationFragment[33346-33380]:VariableDeclarationFragment[13018-13052]"
    }, {
      "left" : "if (!testJavaCollection(bstCollection,Integer.class,name))",
      "right" : "if (debugTime && debugMemory)",
      "info" : "IfStatement[33391-33463]:IfStatement[11043-11161]"
    }, {
      "left" : "name",
      "right" : "testNames",
      "info" : "SimpleName[33443-33447]:SimpleName[11136-11145]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33450-33463]:ReturnStatement[10815-10828]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[33472-33484]:ReturnStatement[11194-11206]"
    }, {
      "left" : "aHeapMin = new BinaryHeap.BinaryHeapArray<Integer>(BinaryHeap.Type.MIN)",
      "right" : "aHeapMin = new BinaryHeap.BinaryHeapArray<Integer>(BinaryHeap.Type.MIN)",
      "info" : "VariableDeclarationFragment[33553-33624]:VariableDeclarationFragment[13496-13567]"
    }, {
      "left" : "tHeapMin = new BinaryHeap.BinaryHeapTree<Integer>(BinaryHeap.Type.MIN)",
      "right" : "tHeapMin = new BinaryHeap.BinaryHeapTree<Integer>(BinaryHeap.Type.MIN)",
      "info" : "VariableDeclarationFragment[33686-33756]:VariableDeclarationFragment[14132-14202]"
    }, {
      "left" : "aCollectionMin = aHeapMin.toCollection()",
      "right" : "aCollectionMin = aHeapMin.toCollection()",
      "info" : "VariableDeclarationFragment[33885-33925]:VariableDeclarationFragment[13649-13689]"
    }, {
      "left" : "tCollectionMin = tHeapMin.toCollection()",
      "right" : "tCollectionMin = tHeapMin.toCollection()",
      "info" : "VariableDeclarationFragment[34097-34137]:VariableDeclarationFragment[14283-14323]"
    }, {
      "left" : "aHeapMax = new BinaryHeap.BinaryHeapArray<Integer>(BinaryHeap.Type.MAX)",
      "right" : "aHeapMax = new BinaryHeap.BinaryHeapArray<Integer>(BinaryHeap.Type.MAX)",
      "info" : "VariableDeclarationFragment[34315-34386]:VariableDeclarationFragment[14768-14839]"
    }, {
      "left" : "tHeapMax = new BinaryHeap.BinaryHeapTree<Integer>(BinaryHeap.Type.MAX)",
      "right" : "tHeapMax = new BinaryHeap.BinaryHeapTree<Integer>(BinaryHeap.Type.MAX)",
      "info" : "VariableDeclarationFragment[34448-34518]:VariableDeclarationFragment[15404-15474]"
    }, {
      "left" : "aCollectionMax = aHeapMax.toCollection()",
      "right" : "aCollectionMax = aHeapMax.toCollection()",
      "info" : "VariableDeclarationFragment[34647-34687]:VariableDeclarationFragment[14921-14961]"
    }, {
      "left" : "tCollectionMax = tHeapMax.toCollection()",
      "right" : "tCollectionMax = tHeapMax.toCollection()",
      "info" : "VariableDeclarationFragment[34859-34899]:VariableDeclarationFragment[15555-15595]"
    }, {
      "left" : "pHashMap = new HashMap<Integer,String>(HashMap.Type.PROBING, ARRAY_SIZE/2)",
      "right" : "pHashMap = new HashMap<Integer,String>(HashMap.Type.PROBING, ARRAY_SIZE/2)",
      "info" : "VariableDeclarationFragment[35065-35139]:VariableDeclarationFragment[16030-16104]"
    }, {
      "left" : "cHashMap = new HashMap<Integer,String>(HashMap.Type.CHAINING, ARRAY_SIZE/2)",
      "right" : "cHashMap = new HashMap<Integer,String>(HashMap.Type.CHAINING, ARRAY_SIZE/2)",
      "info" : "VariableDeclarationFragment[35190-35265]:VariableDeclarationFragment[16650-16725]"
    }, {
      "left" : "name = \"Probing HashMap <Integer>\"",
      "right" : "name = \"Probing HashMap <Integer>\"",
      "info" : "VariableDeclarationFragment[35325-35359]:VariableDeclarationFragment[16121-16155]"
    }, {
      "left" : "jMap = pHashMap.toMap()",
      "right" : "jMap = pHashMap.toMap()",
      "info" : "VariableDeclarationFragment[35399-35422]:VariableDeclarationFragment[16195-16218]"
    }, {
      "left" : "cHashMap.toMap()",
      "right" : "cHashMap.toMap()",
      "info" : "MethodInvocation[35551-35567]:MethodInvocation[16824-16840]"
    }, {
      "left" : "hamt = new HashArrayMappedTrie<Integer,String>()",
      "right" : "hamt = new HashArrayMappedTrie<Integer,String>()",
      "info" : "VariableDeclarationFragment[35725-35773]:VariableDeclarationFragment[17273-17321]"
    }, {
      "left" : "jMap = hamt.toMap()",
      "right" : "jMap = hamt.toMap()",
      "info" : "VariableDeclarationFragment[35897-35916]:VariableDeclarationFragment[17401-17420]"
    }, {
      "left" : "javaHashMap = new java.util.HashMap<Integer,String>(ARRAY_SIZE/2)",
      "right" : "javaHashMap = new java.util.HashMap<Integer,String>(ARRAY_SIZE/2)",
      "info" : "VariableDeclarationFragment[36071-36136]:VariableDeclarationFragment[17854-17919]"
    }, {
      "left" : "name = \"Java's HashMap <Integer>\"",
      "right" : "name = \"Java's HashMap <Integer>\"",
      "info" : "VariableDeclarationFragment[36200-36233]:VariableDeclarationFragment[17936-17969]"
    }, {
      "left" : "name = \"Java's Min-Heap <Integer> [array]\"",
      "right" : "name = \"Java's Min-Heap <Integer> [array]\"",
      "info" : "VariableDeclarationFragment[36850-36892]:VariableDeclarationFragment[18866-18908]"
    }, {
      "left" : "javaMaxArrayHeap = new java.util.PriorityQueue<Integer>(10,\n        new Comparator<Integer>() {\n            @Override\n            public int compare(Integer arg0, Integer arg1) {\n                if (arg0.compareTo(arg1) > 0)\n                    return -1;\n                else if (arg1.compareTo(arg0) > 0)\n                    return 1;\n                return 0;\n            }\n        }\n    )",
      "right" : "javaMaxArrayHeap = new java.util.PriorityQueue<Integer>(10,\n            new Comparator<Integer>() {\n                @Override\n                public int compare(Integer arg0, Integer arg1) {\n                    if (arg0.compareTo(arg1) > 0)\n                        return -1;\n                    else if (arg1.compareTo(arg0) > 0)\n                        return 1;\n                    return 0;\n                }\n            }\n        )",
      "info" : "VariableDeclarationFragment[37065-37457]:VariableDeclarationFragment[19351-19787]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[37173-37182]:MarkerAnnotation[19467-19476]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37195-37201]:Modifier[19493-19499]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[37202-37205]:PrimitiveType[19500-19503]"
    }, {
      "left" : "compare",
      "right" : "compare",
      "info" : "SimpleName[37206-37213]:SimpleName[19504-19511]"
    }, {
      "left" : "Integer arg0",
      "right" : "Integer arg0",
      "info" : "SingleVariableDeclaration[37214-37226]:SingleVariableDeclaration[19512-19524]"
    }, {
      "left" : "Integer arg1",
      "right" : "Integer arg1",
      "info" : "SingleVariableDeclaration[37228-37240]:SingleVariableDeclaration[19526-19538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37242-37441]:Block[19540-19763]"
    }, {
      "left" : "if (arg0.compareTo(arg1) > 0)",
      "right" : "if (arg0.compareTo(arg1) > 0)",
      "info" : "IfStatement[37260-37401]:IfStatement[19562-19715]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[37310-37320]:ReturnStatement[19616-19626]"
    }, {
      "left" : "if (arg1.compareTo(arg0) > 0)",
      "right" : "if (arg1.compareTo(arg0) > 0)",
      "info" : "IfStatement[37342-37401]:IfStatement[19652-19715]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[37392-37401]:ReturnStatement[19706-19715]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[37418-37427]:ReturnStatement[19736-19745]"
    }, {
      "left" : "name = \"Java's Max-Heap <Integer> [array]\"",
      "right" : "name = \"Java's Max-Heap <Integer> [array]\"",
      "info" : "VariableDeclarationFragment[37521-37563]:VariableDeclarationFragment[19804-19846]"
    }, {
      "left" : "javaArrayList = new java.util.ArrayList<Integer>()",
      "right" : "javaArrayList = new java.util.ArrayList<Integer>()",
      "info" : "VariableDeclarationFragment[37727-37777]:VariableDeclarationFragment[20282-20332]"
    }, {
      "left" : "name = \"Java's List <Integer> [array]\"",
      "right" : "name = \"Java's List <Integer> [array]\"",
      "info" : "VariableDeclarationFragment[37843-37881]:VariableDeclarationFragment[20349-20387]"
    }, {
      "left" : "javaLinkedList = new java.util.LinkedList<Integer>()",
      "right" : "javaLinkedList = new java.util.LinkedList<Integer>()",
      "info" : "VariableDeclarationFragment[38042-38094]:VariableDeclarationFragment[20821-20873]"
    }, {
      "left" : "name = \"Java's List <Integer> [linked]\"",
      "right" : "name = \"Java's List <Integer> [linked]\"",
      "info" : "VariableDeclarationFragment[38161-38200]:VariableDeclarationFragment[20890-20929]"
    }, {
      "left" : "javaArrayQueue = new java.util.ArrayDeque<Integer>()",
      "right" : "javaArrayQueue = new java.util.ArrayDeque<Integer>()",
      "info" : "VariableDeclarationFragment[38363-38415]:VariableDeclarationFragment[21365-21417]"
    }, {
      "left" : "name = \"Java's Queue <Integer> [array]\"",
      "right" : "name = \"Java's Queue <Integer> [array]\"",
      "info" : "VariableDeclarationFragment[38482-38521]:VariableDeclarationFragment[21434-21473]"
    }, {
      "left" : "javaLinkedQueue = new java.util.LinkedList<Integer>()",
      "right" : "javaLinkedQueue = new java.util.LinkedList<Integer>()",
      "info" : "VariableDeclarationFragment[38684-38737]:VariableDeclarationFragment[21910-21963]"
    }, {
      "left" : "name = \"Java's Queue <Integer> [linked]\"",
      "right" : "name = \"Java's Queue <Integer> [linked]\"",
      "info" : "VariableDeclarationFragment[38805-38845]:VariableDeclarationFragment[21980-22020]"
    }, {
      "left" : "javaRedBlackTreeInteger = new java.util.TreeSet<Integer>()",
      "right" : "javaRedBlackTreeInteger = new java.util.TreeSet<Integer>()",
      "info" : "VariableDeclarationFragment[39011-39069]:VariableDeclarationFragment[22468-22526]"
    }, {
      "left" : "name = \"Java's Red-Black Tree <Integer>\"",
      "right" : "name = \"Java's Red-Black Tree <Integer>\"",
      "info" : "VariableDeclarationFragment[39145-39185]:VariableDeclarationFragment[22543-22583]"
    }, {
      "left" : "javaRedBlackTreeString = new java.util.TreeSet<String>()",
      "right" : "javaRedBlackTreeString = new java.util.TreeSet<String>()",
      "info" : "VariableDeclarationFragment[39358-39414]:VariableDeclarationFragment[23037-23093]"
    }, {
      "left" : "name = \"Java's Red-Black Tree <String>\"",
      "right" : "name = \"Java's Red-Black Tree <String>\"",
      "info" : "VariableDeclarationFragment[39489-39528]:VariableDeclarationFragment[23110-23149]"
    }, {
      "left" : "javaStack = new java.util.Stack<Integer>()",
      "right" : "javaStack = new java.util.Stack<Integer>()",
      "info" : "VariableDeclarationFragment[39698-39740]:VariableDeclarationFragment[23587-23629]"
    }, {
      "left" : "name = \"Java's Stack <Integer> [array]\"",
      "right" : "name = \"Java's Stack <Integer> [array]\"",
      "info" : "VariableDeclarationFragment[39802-39841]:VariableDeclarationFragment[23646-23685]"
    }, {
      "left" : "javaTreeMap = new java.util.TreeMap<String,Integer>()",
      "right" : "javaTreeMap = new java.util.TreeMap<String,Integer>()",
      "info" : "VariableDeclarationFragment[40004-40057]:VariableDeclarationFragment[24118-24171]"
    }, {
      "left" : "name = \"Java's TreeMap <String>\"",
      "right" : "name = \"Java's TreeMap <String>\"",
      "info" : "VariableDeclarationFragment[40121-40153]:VariableDeclarationFragment[24188-24220]"
    }, {
      "left" : "arrayList = new List.ArrayList<Integer>()",
      "right" : "arrayList = new List.ArrayList<Integer>()",
      "info" : "VariableDeclarationFragment[40304-40345]:VariableDeclarationFragment[24653-24694]"
    }, {
      "left" : "name = \"List <Integer> [array]\"",
      "right" : "name = \"List <Integer> [array]\"",
      "info" : "VariableDeclarationFragment[40407-40438]:VariableDeclarationFragment[24711-24742]"
    }, {
      "left" : "aCollection = arrayList.toCollection()",
      "right" : "aCollection = arrayList.toCollection()",
      "info" : "VariableDeclarationFragment[40468-40506]:VariableDeclarationFragment[24772-24810]"
    }, {
      "left" : "linkedList = new List.LinkedList<Integer>()",
      "right" : "linkedList = new List.LinkedList<Integer>()",
      "info" : "VariableDeclarationFragment[40666-40709]:VariableDeclarationFragment[25239-25282]"
    }, {
      "left" : "name = \"List <Integer> [linked]\"",
      "right" : "name = \"List <Integer> [linked]\"",
      "info" : "VariableDeclarationFragment[40772-40804]:VariableDeclarationFragment[25299-25331]"
    }, {
      "left" : "lCollection = linkedList.toCollection()",
      "right" : "lCollection = linkedList.toCollection()",
      "info" : "VariableDeclarationFragment[40834-40873]:VariableDeclarationFragment[25361-25400]"
    }, {
      "left" : "patriciaTrie = new PatriciaTrie<String>()",
      "right" : "patriciaTrie = new PatriciaTrie<String>()",
      "info" : "VariableDeclarationFragment[41029-41070]:VariableDeclarationFragment[25827-25868]"
    }, {
      "left" : "name = \"PatriciaTrie <String>\"",
      "right" : "name = \"PatriciaTrie <String>\"",
      "info" : "VariableDeclarationFragment[41135-41165]:VariableDeclarationFragment[25885-25915]"
    }, {
      "left" : "bstCollection = patriciaTrie.toCollection()",
      "right" : "bstCollection = patriciaTrie.toCollection()",
      "info" : "VariableDeclarationFragment[41194-41237]:VariableDeclarationFragment[25944-25987]"
    }, {
      "left" : "arrayQueue = new Queue.ArrayQueue<Integer>()",
      "right" : "arrayQueue = new Queue.ArrayQueue<Integer>()",
      "info" : "VariableDeclarationFragment[41408-41452]:VariableDeclarationFragment[26418-26462]"
    }, {
      "left" : "name = \"Queue <Integer> [array]\"",
      "right" : "name = \"Queue <Integer> [array]\"",
      "info" : "VariableDeclarationFragment[41515-41547]:VariableDeclarationFragment[26479-26511]"
    }, {
      "left" : "aCollection = arrayQueue.toCollection()",
      "right" : "aCollection = arrayQueue.toCollection()",
      "info" : "VariableDeclarationFragment[41577-41616]:VariableDeclarationFragment[26541-26580]"
    }, {
      "left" : "linkedQueue = new Queue.LinkedQueue<Integer>()",
      "right" : "linkedQueue = new Queue.LinkedQueue<Integer>()",
      "info" : "VariableDeclarationFragment[41778-41824]:VariableDeclarationFragment[27012-27058]"
    }, {
      "left" : "name = \"Queue <Integer> [linked]\"",
      "right" : "name = \"Queue <Integer> [linked]\"",
      "info" : "VariableDeclarationFragment[41888-41921]:VariableDeclarationFragment[27075-27108]"
    }, {
      "left" : "lCollection = linkedQueue.toCollection()",
      "right" : "lCollection = linkedQueue.toCollection()",
      "info" : "VariableDeclarationFragment[41951-41991]:VariableDeclarationFragment[27138-27178]"
    }, {
      "left" : "radixTrie = new RadixTrie<String,Integer>()",
      "right" : "radixTrie = new RadixTrie<String,Integer>()",
      "info" : "VariableDeclarationFragment[42152-42195]:VariableDeclarationFragment[27607-27650]"
    }, {
      "left" : "name = \"RadixTrie <String>\"",
      "right" : "name = \"RadixTrie <String>\"",
      "info" : "VariableDeclarationFragment[42257-42284]:VariableDeclarationFragment[27667-27694]"
    }, {
      "left" : "jMap = radixTrie.toMap()",
      "right" : "jMap = radixTrie.toMap()",
      "info" : "VariableDeclarationFragment[42324-42348]:VariableDeclarationFragment[27734-27758]"
    }, {
      "left" : "redBlackTree = new RedBlackTree<Integer>()",
      "right" : "redBlackTree = new RedBlackTree<Integer>()",
      "info" : "VariableDeclarationFragment[42494-42536]:VariableDeclarationFragment[28189-28231]"
    }, {
      "left" : "name = \"Red-Black Tree <Integer>\"",
      "right" : "name = \"Red-Black Tree <Integer>\"",
      "info" : "VariableDeclarationFragment[42601-42634]:VariableDeclarationFragment[28248-28281]"
    }, {
      "left" : "bstCollection = redBlackTree.toCollection()",
      "right" : "bstCollection = redBlackTree.toCollection()",
      "info" : "VariableDeclarationFragment[42664-42707]:VariableDeclarationFragment[28311-28354]"
    }, {
      "left" : "javaSkipList = new ConcurrentSkipListSet<Integer>()",
      "right" : "javaSkipList = new ConcurrentSkipListSet<Integer>()",
      "info" : "VariableDeclarationFragment[42866-42917]:VariableDeclarationFragment[28784-28835]"
    }, {
      "left" : "name = \"Java's SkipListSet <Integer>\"",
      "right" : "name = \"Java's SkipListSet <Integer>\"",
      "info" : "VariableDeclarationFragment[42982-43019]:VariableDeclarationFragment[28852-28889]"
    }, {
      "left" : "skipList = new SkipList<Integer>()",
      "right" : "skipList = new SkipList<Integer>()",
      "info" : "VariableDeclarationFragment[43228-43262]:VariableDeclarationFragment[29365-29399]"
    }, {
      "left" : "name = \"SkipList <Integer>\"",
      "right" : "name = \"SkipList <Integer>\"",
      "info" : "VariableDeclarationFragment[43323-43350]:VariableDeclarationFragment[29416-29443]"
    }, {
      "left" : "lCollection = skipList.toCollection()",
      "right" : "lCollection = skipList.toCollection()",
      "info" : "VariableDeclarationFragment[43380-43417]:VariableDeclarationFragment[29473-29510]"
    }, {
      "left" : "splayTree = new SplayTree<Integer>()",
      "right" : "splayTree = new SplayTree<Integer>()",
      "info" : "VariableDeclarationFragment[43578-43614]:VariableDeclarationFragment[29939-29975]"
    }, {
      "left" : "name = \"Splay Tree <Integer>\"",
      "right" : "name = \"Splay Tree <Integer>\"",
      "info" : "VariableDeclarationFragment[43676-43705]:VariableDeclarationFragment[29992-30021]"
    }, {
      "left" : "bstCollection = splayTree.toCollection()",
      "right" : "bstCollection = splayTree.toCollection()",
      "info" : "VariableDeclarationFragment[43735-43775]:VariableDeclarationFragment[30051-30091]"
    }, {
      "left" : "arrayStack = new Stack.ArrayStack<Integer>()",
      "right" : "arrayStack = new Stack.ArrayStack<Integer>()",
      "info" : "VariableDeclarationFragment[43938-43982]:VariableDeclarationFragment[30523-30567]"
    }, {
      "left" : "name = \"Stack <Integer> [array]\"",
      "right" : "name = \"Stack <Integer> [array]\"",
      "info" : "VariableDeclarationFragment[44045-44077]:VariableDeclarationFragment[30584-30616]"
    }, {
      "left" : "aCollection = arrayStack.toCollection()",
      "right" : "aCollection = arrayStack.toCollection()",
      "info" : "VariableDeclarationFragment[44107-44146]:VariableDeclarationFragment[30646-30685]"
    }, {
      "left" : "linkedStack = new Stack.LinkedStack<Integer>()",
      "right" : "linkedStack = new Stack.LinkedStack<Integer>()",
      "info" : "VariableDeclarationFragment[44308-44354]:VariableDeclarationFragment[31117-31163]"
    }, {
      "left" : "name = \"Stack <Integer> [linked]\"",
      "right" : "name = \"Stack <Integer> [linked]\"",
      "info" : "VariableDeclarationFragment[44418-44451]:VariableDeclarationFragment[31180-31213]"
    }, {
      "left" : "lCollection = linkedStack.toCollection()",
      "right" : "lCollection = linkedStack.toCollection()",
      "info" : "VariableDeclarationFragment[44481-44521]:VariableDeclarationFragment[31243-31283]"
    }, {
      "left" : "treap = new Treap<Integer>()",
      "right" : "treap = new Treap<Integer>()",
      "info" : "VariableDeclarationFragment[44682-44710]:VariableDeclarationFragment[31708-31736]"
    }, {
      "left" : "name = \"Treap <Integer>\"",
      "right" : "name = \"Treap <Integer>\"",
      "info" : "VariableDeclarationFragment[44768-44792]:VariableDeclarationFragment[31753-31777]"
    }, {
      "left" : "treapCollection = treap.toCollection()",
      "right" : "treapCollection = treap.toCollection()",
      "info" : "VariableDeclarationFragment[44822-44860]:VariableDeclarationFragment[31807-31845]"
    }, {
      "left" : "treeMap = new TreeMap<String,Integer>()",
      "right" : "treeMap = new TreeMap<String,Integer>()",
      "info" : "VariableDeclarationFragment[45023-45062]:VariableDeclarationFragment[32274-32313]"
    }, {
      "left" : "name = \"TreeMap <String>\"",
      "right" : "name = \"TreeMap <String>\"",
      "info" : "VariableDeclarationFragment[45122-45147]:VariableDeclarationFragment[32330-32355]"
    }, {
      "left" : "jMap = treeMap.toMap()",
      "right" : "jMap = treeMap.toMap()",
      "info" : "VariableDeclarationFragment[45187-45209]:VariableDeclarationFragment[32395-32417]"
    }, {
      "left" : "trie = new Trie<String>()",
      "right" : "trie = new Trie<String>()",
      "info" : "VariableDeclarationFragment[45342-45367]:VariableDeclarationFragment[32827-32852]"
    }, {
      "left" : "name = \"Trie <String>\"",
      "right" : "name = \"Trie <String>\"",
      "info" : "VariableDeclarationFragment[45424-45446]:VariableDeclarationFragment[32869-32891]"
    }, {
      "left" : "trieCollection = trie.toCollection()",
      "right" : "trieCollection = trie.toCollection()",
      "info" : "VariableDeclarationFragment[45475-45511]:VariableDeclarationFragment[32920-32956]"
    }, {
      "left" : "trieMap = new TrieMap<String,Integer>()",
      "right" : "trieMap = new TrieMap<String,Integer>()",
      "info" : "VariableDeclarationFragment[45672-45711]:VariableDeclarationFragment[33383-33422]"
    }, {
      "left" : "name = \"TrieMap <String>\"",
      "right" : "name = \"TrieMap <String>\"",
      "info" : "VariableDeclarationFragment[45771-45796]:VariableDeclarationFragment[33439-33464]"
    }, {
      "left" : "jMap = trieMap.toMap()",
      "right" : "jMap = trieMap.toMap()",
      "info" : "VariableDeclarationFragment[45836-45858]:VariableDeclarationFragment[33504-33526]"
    }, {
      "left" : "javaSkipListMap = new ConcurrentSkipListMap<String,Integer>()",
      "right" : "javaSkipListMap = new ConcurrentSkipListMap<String,Integer>()",
      "info" : "VariableDeclarationFragment[46016-46077]:VariableDeclarationFragment[33972-34033]"
    }, {
      "left" : "name = \"Java's SkipListMap <String>\"",
      "right" : "name = \"Java's SkipListMap <String>\"",
      "info" : "VariableDeclarationFragment[46145-46181]:VariableDeclarationFragment[34050-34086]"
    }, {
      "left" : "skipListMap = new SkipListMap<String,Integer>()",
      "right" : "skipListMap = new SkipListMap<String,Integer>()",
      "info" : "VariableDeclarationFragment[46340-46387]:VariableDeclarationFragment[34529-34576]"
    }, {
      "left" : "name = \"SkipListMap <String>\"",
      "right" : "name = \"SkipListMap <String>\"",
      "info" : "VariableDeclarationFragment[46451-46480]:VariableDeclarationFragment[34593-34622]"
    }, {
      "left" : "jMap = skipListMap.toMap()",
      "right" : "jMap = skipListMap.toMap()",
      "info" : "VariableDeclarationFragment[46520-46546]:VariableDeclarationFragment[34662-34688]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[46645-46652]:Modifier[35063-35070]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[46653-46659]:Modifier[35071-35077]"
    }, {
      "left" : "T extends Comparable<T>",
      "right" : "T extends Comparable<T>",
      "info" : "TypeParameter[46661-46684]:TypeParameter[35079-35102]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[46686-46693]:PrimitiveType[35104-35111]"
    }, {
      "left" : "testJavaCollection",
      "right" : "testJavaCollection",
      "info" : "SimpleName[46694-46712]:SimpleName[35112-35130]"
    }, {
      "left" : "Collection<T> collection",
      "right" : "Collection<T> collection",
      "info" : "SingleVariableDeclaration[46713-46737]:SingleVariableDeclaration[35131-35155]"
    }, {
      "left" : "Class<T> type",
      "right" : "Class<T> type",
      "info" : "SingleVariableDeclaration[46739-46752]:SingleVariableDeclaration[35157-35170]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[46754-46765]:SingleVariableDeclaration[35172-35183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46767-63158]:Block[35239-51399]"
    }, {
      "left" : "if (!collection.isEmpty())",
      "right" : "if (!collection.isEmpty())",
      "info" : "IfStatement[46822-46990]:IfStatement[35294-35468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46849-46990]:Block[35321-35468]"
    }, {
      "left" : "System.err.println(name+\" initial isEmpty() failed.\");",
      "right" : "System.err.println(name+\" initial isEmpty() failed.\");",
      "info" : "ExpressionStatement[46863-46917]:ExpressionStatement[35335-35389]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[46930-46954]:ExpressionStatement[35402-35432]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[46942-46952]:SimpleName[35420-35430]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46967-46980]:ReturnStatement[35445-35458]"
    }, {
      "left" : "if (collection.size()!=0)",
      "right" : "if (collection.size()!=0)",
      "info" : "IfStatement[46999-47163]:IfStatement[35477-35647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47025-47163]:Block[35503-35647]"
    }, {
      "left" : "System.err.println(name+\" initial size() failed.\");",
      "right" : "System.err.println(name+\" initial size() failed.\");",
      "info" : "ExpressionStatement[47039-47090]:ExpressionStatement[35517-35568]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[47103-47127]:ExpressionStatement[35581-35611]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[47115-47125]:SimpleName[35599-35609]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47140-47153]:ReturnStatement[35624-35637]"
    }, {
      "left" : "long sortedCount = 0;",
      "right" : "long sortedCount = 0;",
      "info" : "VariableDeclarationStatement[47173-47194]:VariableDeclarationStatement[36004-36025]"
    }, {
      "left" : "long unsortedCount = 0;",
      "right" : "long unsortedCount = 0;",
      "info" : "VariableDeclarationStatement[47203-47226]:VariableDeclarationStatement[36034-36057]"
    }, {
      "left" : "long addTime = 0L;",
      "right" : "long addTime = 0L;",
      "info" : "VariableDeclarationStatement[47236-47254]:VariableDeclarationStatement[36067-36085]"
    }, {
      "left" : "long removeTime = 0L;",
      "right" : "long removeTime = 0L;",
      "info" : "VariableDeclarationStatement[47263-47284]:VariableDeclarationStatement[36094-36115]"
    }, {
      "left" : "long beforeAddTime = 0L;",
      "right" : "long beforeAddTime = 0L;",
      "info" : "VariableDeclarationStatement[47294-47318]:VariableDeclarationStatement[36125-36149]"
    }, {
      "left" : "long afterAddTime = 0L;",
      "right" : "long afterAddTime = 0L;",
      "info" : "VariableDeclarationStatement[47327-47350]:VariableDeclarationStatement[36158-36181]"
    }, {
      "left" : "long beforeRemoveTime = 0L;",
      "right" : "long beforeRemoveTime = 0L;",
      "info" : "VariableDeclarationStatement[47359-47386]:VariableDeclarationStatement[36190-36217]"
    }, {
      "left" : "long afterRemoveTime = 0L;",
      "right" : "long afterRemoveTime = 0L;",
      "info" : "VariableDeclarationStatement[47395-47421]:VariableDeclarationStatement[36226-36252]"
    }, {
      "left" : "long memory = 0L;",
      "right" : "long memory = 0L;",
      "info" : "VariableDeclarationStatement[47431-47448]:VariableDeclarationStatement[36262-36279]"
    }, {
      "left" : "long beforeMemory = 0L;",
      "right" : "long beforeMemory = 0L;",
      "info" : "VariableDeclarationStatement[47458-47481]:VariableDeclarationStatement[36289-36312]"
    }, {
      "left" : "long afterMemory = 0L;",
      "right" : "long afterMemory = 0L;",
      "info" : "VariableDeclarationStatement[47490-47512]:VariableDeclarationStatement[36321-36343]"
    }, {
      "left" : "long lookupTime = 0L;",
      "right" : "long lookupTime = 0L;",
      "info" : "VariableDeclarationStatement[47522-47543]:VariableDeclarationStatement[36353-36374]"
    }, {
      "left" : "long beforeLookupTime = 0L;",
      "right" : "long beforeLookupTime = 0L;",
      "info" : "VariableDeclarationStatement[47553-47580]:VariableDeclarationStatement[36384-36411]"
    }, {
      "left" : "long afterLookupTime = 0L;",
      "right" : "long afterLookupTime = 0L;",
      "info" : "VariableDeclarationStatement[47589-47615]:VariableDeclarationStatement[36420-36446]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[47625-47665]:IfStatement[36456-36496]"
    }, {
      "left" : "System.out.println(name);",
      "right" : "System.out.println(name);",
      "info" : "ExpressionStatement[47640-47665]:ExpressionStatement[36471-36496]"
    }, {
      "left" : "if (!firstTimeThru)",
      "right" : "if (!firstTimeThru)",
      "info" : "IfStatement[47725-47785]:IfStatement[36556-36616]"
    }, {
      "left" : "testNames[testIndex] = name;",
      "right" : "testNames[testIndex] = name;",
      "info" : "ExpressionStatement[47757-47785]:ExpressionStatement[36588-36616]"
    }, {
      "left" : "unsortedCount++;",
      "right" : "unsortedCount++;",
      "info" : "ExpressionStatement[47795-47811]:ExpressionStatement[40025-40041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47820-51331]:Block[36651-40015]"
    }, {
      "left" : "beforeMemory = 0L;",
      "right" : "beforeMemory = 0L;",
      "info" : "ExpressionStatement[47901-47919]:ExpressionStatement[43815-43833]"
    }, {
      "left" : "afterMemory = 0L;",
      "right" : "afterMemory = 0L;",
      "info" : "ExpressionStatement[47932-47949]:ExpressionStatement[43846-43863]"
    }, {
      "left" : "beforeAddTime = 0L;",
      "right" : "beforeAddTime = 0L;",
      "info" : "ExpressionStatement[47962-47981]:ExpressionStatement[36793-36812]"
    }, {
      "left" : "afterAddTime = 0L;",
      "right" : "afterAddTime = 0L;",
      "info" : "ExpressionStatement[47994-48012]:ExpressionStatement[36825-36843]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[48025-48093]:IfStatement[43951-44019]"
    }, {
      "left" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[48042-48093]:ExpressionStatement[43968-44019]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[48106-48155]:IfStatement[36937-36986]"
    }, {
      "left" : "beforeAddTime = System.nanoTime();",
      "right" : "beforeAddTime = System.nanoTime();",
      "info" : "ExpressionStatement[48121-48155]:ExpressionStatement[36952-36986]"
    }, {
      "left" : "for (int i = 0; i < unsorted.length; i++)",
      "right" : "for (int i = unsorted.length - 1; i >= 0; i--)",
      "info" : "ForStatement[48168-48573]:ForStatement[40450-40807]"
    }, {
      "left" : "int i = 0",
      "right" : "int i = 0",
      "info" : "VariableDeclarationExpression[48173-48182]:VariableDeclarationExpression[47615-47624]"
    }, {
      "left" : "<",
      "right" : ">=",
      "info" : "INFIX_EXPRESSION_OPERATOR[48186-48187]:INFIX_EXPRESSION_OPERATOR[40486-40488]"
    }, {
      "left" : "++",
      "right" : "--",
      "info" : "POSTFIX_EXPRESSION_OPERATOR[48206-48208]:POSTFIX_EXPRESSION_OPERATOR[40493-40495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48210-48573]:Block[40497-40807]"
    }, {
      "left" : "Integer",
      "right" : "T",
      "info" : "SimpleName[48228-48235]:SimpleName[40515-40516]"
    }, {
      "left" : "Integer value = unsorted[i];",
      "right" : "T item = unsorted[i];",
      "info" : "VariableDeclarationStatement[48228-48256]:VariableDeclarationStatement[40515-40536]"
    }, {
      "left" : "value",
      "right" : "item",
      "info" : "SimpleName[48236-48241]:SimpleName[40517-40521]"
    }, {
      "left" : "boolean added = collection.add(item);",
      "right" : "boolean added = collection.add(item);",
      "info" : "VariableDeclarationStatement[48325-48362]:VariableDeclarationStatement[47704-47741]"
    }, {
      "left" : "if (!added)",
      "right" : "if (!added)",
      "info" : "IfStatement[48379-48559]:IfStatement[40607-40793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48391-48559]:Block[40619-40793]"
    }, {
      "left" : "System.err.println(name+\" unsorted add failed.\");",
      "right" : "System.err.println(name+\" unsorted add failed.\");",
      "info" : "ExpressionStatement[48413-48462]:ExpressionStatement[40641-40690]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[48483-48507]:ExpressionStatement[40711-40741]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[48495-48505]:SimpleName[40729-40739]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[48528-48541]:ReturnStatement[40762-40775]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[48586-48840]:IfStatement[37364-37618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48601-48840]:Block[37379-37618]"
    }, {
      "left" : "afterAddTime = System.nanoTime();",
      "right" : "afterAddTime = System.nanoTime();",
      "info" : "ExpressionStatement[48619-48652]:ExpressionStatement[37397-37430]"
    }, {
      "left" : "addTime += afterAddTime - beforeAddTime;",
      "right" : "addTime += afterAddTime - beforeAddTime;",
      "info" : "ExpressionStatement[48669-48709]:ExpressionStatement[37447-37487]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[48726-48826]:IfStatement[37504-37604]"
    }, {
      "left" : "System.out.println(name+\" unsorted add time = \" + (addTime / unsortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted add time = \" + (addTime / unsortedCount) + \" ns\");",
      "info" : "ExpressionStatement[48741-48826]:ExpressionStatement[37519-37604]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[48853-49141]:IfStatement[37631-37919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48870-49141]:Block[37648-37919]"
    }, {
      "left" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[48888-48938]:ExpressionStatement[37666-37716]"
    }, {
      "left" : "memory += afterMemory - beforeMemory;",
      "right" : "memory += afterMemory - beforeMemory;",
      "info" : "ExpressionStatement[48955-48992]:ExpressionStatement[37733-37770]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[49009-49127]:IfStatement[37787-37905]"
    }, {
      "left" : "System.out.println(name+\" unsorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "right" : "System.out.println(name+\" unsorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "info" : "ExpressionStatement[49024-49127]:ExpressionStatement[37802-37905]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[49155-49212]:IfStatement[45052-45109]"
    }, {
      "left" : "System.out.println(collection.toString());",
      "right" : "System.out.println(collection.toString());",
      "info" : "ExpressionStatement[49170-49212]:ExpressionStatement[45067-45109]"
    }, {
      "left" : "beforeLookupTime = 0L;",
      "right" : "beforeLookupTime = 0L;",
      "info" : "ExpressionStatement[49226-49248]:ExpressionStatement[45123-45145]"
    }, {
      "left" : "afterLookupTime = 0L;",
      "right" : "afterLookupTime = 0L;",
      "info" : "ExpressionStatement[49261-49282]:ExpressionStatement[45158-45179]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[49295-49347]:IfStatement[45192-45244]"
    }, {
      "left" : "beforeLookupTime = System.nanoTime();",
      "right" : "beforeLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[49310-49347]:ExpressionStatement[45207-45244]"
    }, {
      "left" : "for (int i = 0; i < unsorted.length; i++)",
      "right" : "for (int i = 0; i < unsorted.length; i++)",
      "info" : "ForStatement[49360-49781]:ForStatement[41594-41962]"
    }, {
      "left" : "int i = 0",
      "right" : "int i = 0",
      "info" : "VariableDeclarationExpression[49365-49374]:VariableDeclarationExpression[46087-46096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49402-49781]:Block[41636-41962]"
    }, {
      "left" : "Integer",
      "right" : "T",
      "info" : "SimpleName[49420-49427]:SimpleName[41654-41655]"
    }, {
      "left" : "Integer value = unsorted[i];",
      "right" : "T item = unsorted[i];",
      "info" : "VariableDeclarationStatement[49420-49448]:VariableDeclarationStatement[41654-41675]"
    }, {
      "left" : "value",
      "right" : "item",
      "info" : "SimpleName[49428-49433]:SimpleName[41656-41660]"
    }, {
      "left" : "boolean contains = collection.contains(item);",
      "right" : "boolean contains = collection.contains(item);",
      "info" : "VariableDeclarationStatement[49517-49562]:VariableDeclarationStatement[48861-48906]"
    }, {
      "left" : "if (!contains)",
      "right" : "if (!contains)",
      "info" : "IfStatement[49579-49767]:IfStatement[41754-41948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49594-49767]:Block[41769-41948]"
    }, {
      "left" : "System.err.println(name+\" unsorted contains failed.\");",
      "right" : "System.err.println(name+\" unsorted contains failed.\");",
      "info" : "ExpressionStatement[49616-49670]:ExpressionStatement[41791-41845]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[49691-49715]:ExpressionStatement[41866-41896]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[49703-49713]:SimpleName[41884-41894]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[49736-49749]:ReturnStatement[41917-41930]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[49794-50080]:IfStatement[38519-38805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49809-50080]:Block[38534-38805]"
    }, {
      "left" : "afterLookupTime = System.nanoTime();",
      "right" : "afterLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[49827-49863]:ExpressionStatement[38552-38588]"
    }, {
      "left" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "right" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "info" : "ExpressionStatement[49880-49929]:ExpressionStatement[38605-38654]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[49946-50066]:IfStatement[38671-38791]"
    }, {
      "left" : "System.out.println(name+\" unsorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "info" : "ExpressionStatement[49961-50066]:ExpressionStatement[38686-38791]"
    }, {
      "left" : "beforeRemoveTime = 0L;",
      "right" : "beforeRemoveTime = 0L;",
      "info" : "ExpressionStatement[50094-50116]:ExpressionStatement[38819-38841]"
    }, {
      "left" : "afterRemoveTime = 0L;",
      "right" : "afterRemoveTime = 0L;",
      "info" : "ExpressionStatement[50129-50150]:ExpressionStatement[38854-38875]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[50163-50215]:IfStatement[38888-38940]"
    }, {
      "left" : "beforeRemoveTime = System.nanoTime();",
      "right" : "beforeRemoveTime = System.nanoTime();",
      "info" : "ExpressionStatement[50178-50215]:ExpressionStatement[38903-38940]"
    }, {
      "left" : "for (int i = 0; i < unsorted.length; i++)",
      "right" : "for (int i = 0; i < unsorted.length; i++)",
      "info" : "ForStatement[50228-50643]:ForStatement[42409-42771]"
    }, {
      "left" : "int i = 0",
      "right" : "int i = 0",
      "info" : "VariableDeclarationExpression[50233-50242]:VariableDeclarationExpression[48772-48781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50270-50643]:Block[42451-42771]"
    }, {
      "left" : "Integer",
      "right" : "T",
      "info" : "SimpleName[50288-50295]:SimpleName[42469-42470]"
    }, {
      "left" : "Integer value = unsorted[i];",
      "right" : "T item = unsorted[i];",
      "info" : "VariableDeclarationStatement[50288-50316]:VariableDeclarationStatement[42469-42490]"
    }, {
      "left" : "value",
      "right" : "item",
      "info" : "SimpleName[50296-50301]:SimpleName[42471-42475]"
    }, {
      "left" : "boolean removed = collection.remove(item);",
      "right" : "boolean removed = collection.remove(item);",
      "info" : "VariableDeclarationStatement[50385-50427]:VariableDeclarationStatement[49691-49733]"
    }, {
      "left" : "if (!removed)",
      "right" : "if (!removed)",
      "info" : "IfStatement[50444-50629]:IfStatement[42566-42757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50458-50629]:Block[42580-42757]"
    }, {
      "left" : "System.err.println(name+\" unsorted remove failed.\");",
      "right" : "System.err.println(name+\" unsorted remove failed.\");",
      "info" : "ExpressionStatement[50480-50532]:ExpressionStatement[42602-42654]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[50553-50577]:ExpressionStatement[42675-42705]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[50565-50575]:SimpleName[42693-42703]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[50598-50611]:ReturnStatement[42726-42739]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[50656-50928]:IfStatement[39328-39600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50671-50928]:Block[39343-39600]"
    }, {
      "left" : "afterRemoveTime = System.nanoTime();",
      "right" : "afterRemoveTime = System.nanoTime();",
      "info" : "ExpressionStatement[50689-50725]:ExpressionStatement[39361-39397]"
    }, {
      "left" : "removeTime += afterRemoveTime - beforeRemoveTime;",
      "right" : "removeTime += afterRemoveTime - beforeRemoveTime;",
      "info" : "ExpressionStatement[50742-50791]:ExpressionStatement[39414-39463]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[50808-50914]:IfStatement[39480-39586]"
    }, {
      "left" : "System.out.println(name+\" unsorted remove time = \" + (removeTime / unsortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted remove time = \" + (removeTime / unsortedCount) + \" ns\");",
      "info" : "ExpressionStatement[50823-50914]:ExpressionStatement[39495-39586]"
    }, {
      "left" : "if (!collection.isEmpty())",
      "right" : "if (!collection.isEmpty())",
      "info" : "IfStatement[50942-51127]:IfStatement[43070-43261]"
    }, {
      "left" : "!collection.isEmpty()",
      "right" : "!collection.isEmpty()",
      "info" : "PrefixExpression[50946-50967]:PrefixExpression[50282-50303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50969-51127]:Block[43097-43261]"
    }, {
      "left" : "System.err.println(name+\" unsorted isEmpty() failed.\");",
      "right" : "System.err.println(name+\" unsorted isEmpty() failed.\");",
      "info" : "ExpressionStatement[50987-51042]:ExpressionStatement[43115-43170]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[51059-51083]:ExpressionStatement[43187-43217]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[51071-51081]:SimpleName[43205-43215]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[51100-51113]:ReturnStatement[43234-43247]"
    }, {
      "left" : "if (collection.size()!=0)",
      "right" : "if (collection.size()!=0)",
      "info" : "IfStatement[51140-51321]:IfStatement[43274-43461]"
    }, {
      "left" : "collection.size()!=0",
      "right" : "collection.size()!=0",
      "info" : "InfixExpression[51144-51164]:InfixExpression[50484-50504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51166-51321]:Block[43300-43461]"
    }, {
      "left" : "System.err.println(name+\" unsorted size() failed.\");",
      "right" : "System.err.println(name+\" unsorted size() failed.\");",
      "info" : "ExpressionStatement[51184-51236]:ExpressionStatement[43318-43370]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[51253-51277]:ExpressionStatement[43387-43417]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[51265-51275]:SimpleName[43405-43415]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[51294-51307]:ReturnStatement[43434-43447]"
    }, {
      "left" : "unsortedCount++;",
      "right" : "unsortedCount++;",
      "info" : "ExpressionStatement[51341-51357]:ExpressionStatement[36626-36642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51366-54934]:Block[40050-43471]"
    }, {
      "left" : "beforeMemory = 0L;",
      "right" : "beforeMemory = 0L;",
      "info" : "ExpressionStatement[51499-51517]:ExpressionStatement[40183-40201]"
    }, {
      "left" : "afterMemory = 0L;",
      "right" : "afterMemory = 0L;",
      "info" : "ExpressionStatement[51530-51547]:ExpressionStatement[40214-40231]"
    }, {
      "left" : "beforeAddTime = 0L;",
      "right" : "beforeAddTime = 0L;",
      "info" : "ExpressionStatement[51560-51579]:ExpressionStatement[40244-40263]"
    }, {
      "left" : "afterAddTime = 0L;",
      "right" : "afterAddTime = 0L;",
      "info" : "ExpressionStatement[51592-51610]:ExpressionStatement[40276-40294]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[51623-51691]:IfStatement[40307-40375]"
    }, {
      "left" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[51640-51691]:ExpressionStatement[40324-40375]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[51704-51753]:IfStatement[40388-40437]"
    }, {
      "left" : "beforeAddTime = System.nanoTime();",
      "right" : "beforeAddTime = System.nanoTime();",
      "info" : "ExpressionStatement[51719-51753]:ExpressionStatement[40403-40437]"
    }, {
      "left" : "for (int i = unsorted.length - 1; i >= 0; i--)",
      "right" : "for (int i = 0; i < unsorted.length; i++)",
      "info" : "ForStatement[51766-52176]:ForStatement[36999-37351]"
    }, {
      "left" : "int i = unsorted.length - 1",
      "right" : "int i = unsorted.length - 1",
      "info" : "VariableDeclarationExpression[51771-51798]:VariableDeclarationExpression[40455-40482]"
    }, {
      "left" : ">=",
      "right" : "<",
      "info" : "INFIX_EXPRESSION_OPERATOR[51802-51804]:INFIX_EXPRESSION_OPERATOR[37017-37018]"
    }, {
      "left" : "--",
      "right" : "++",
      "info" : "POSTFIX_EXPRESSION_OPERATOR[51809-51811]:POSTFIX_EXPRESSION_OPERATOR[37037-37039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51813-52176]:Block[37041-37351]"
    }, {
      "left" : "Integer",
      "right" : "T",
      "info" : "SimpleName[51831-51838]:SimpleName[37059-37060]"
    }, {
      "left" : "Integer value = unsorted[i];",
      "right" : "T item = unsorted[i];",
      "info" : "VariableDeclarationStatement[51831-51859]:VariableDeclarationStatement[37059-37080]"
    }, {
      "left" : "value",
      "right" : "item",
      "info" : "SimpleName[51839-51844]:SimpleName[37061-37065]"
    }, {
      "left" : "boolean added = collection.add(item);",
      "right" : "boolean added = collection.add(item);",
      "info" : "VariableDeclarationStatement[51928-51965]:VariableDeclarationStatement[44194-44231]"
    }, {
      "left" : "if (!added)",
      "right" : "if (!added)",
      "info" : "IfStatement[51982-52162]:IfStatement[37151-37337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51994-52162]:Block[37163-37337]"
    }, {
      "left" : "System.err.println(name+\" unsorted add failed.\");",
      "right" : "System.err.println(name+\" unsorted add failed.\");",
      "info" : "ExpressionStatement[52016-52065]:ExpressionStatement[37185-37234]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[52086-52110]:ExpressionStatement[37255-37285]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[52098-52108]:SimpleName[37273-37283]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[52131-52144]:ReturnStatement[37306-37319]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[52189-52443]:IfStatement[40820-41074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52204-52443]:Block[40835-41074]"
    }, {
      "left" : "afterAddTime = System.nanoTime();",
      "right" : "afterAddTime = System.nanoTime();",
      "info" : "ExpressionStatement[52222-52255]:ExpressionStatement[40853-40886]"
    }, {
      "left" : "addTime += afterAddTime - beforeAddTime;",
      "right" : "addTime += afterAddTime - beforeAddTime;",
      "info" : "ExpressionStatement[52272-52312]:ExpressionStatement[40903-40943]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[52329-52429]:IfStatement[40960-41060]"
    }, {
      "left" : "System.out.println(name+\" unsorted add time = \" + (addTime / unsortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted add time = \" + (addTime / unsortedCount) + \" ns\");",
      "info" : "ExpressionStatement[52344-52429]:ExpressionStatement[40975-41060]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[52456-52744]:IfStatement[41087-41375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52473-52744]:Block[41104-41375]"
    }, {
      "left" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[52491-52541]:ExpressionStatement[41122-41172]"
    }, {
      "left" : "memory += afterMemory - beforeMemory;",
      "right" : "memory += afterMemory - beforeMemory;",
      "info" : "ExpressionStatement[52558-52595]:ExpressionStatement[41189-41226]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[52612-52730]:IfStatement[41243-41361]"
    }, {
      "left" : "System.out.println(name+\" unsorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "right" : "System.out.println(name+\" unsorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "info" : "ExpressionStatement[52627-52730]:ExpressionStatement[41258-41361]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[52758-52815]:IfStatement[41389-41446]"
    }, {
      "left" : "System.out.println(collection.toString());",
      "right" : "System.out.println(collection.toString());",
      "info" : "ExpressionStatement[52773-52815]:ExpressionStatement[41404-41446]"
    }, {
      "left" : "beforeLookupTime = 0L;",
      "right" : "beforeLookupTime = 0L;",
      "info" : "ExpressionStatement[52829-52851]:ExpressionStatement[41460-41482]"
    }, {
      "left" : "afterLookupTime = 0L;",
      "right" : "afterLookupTime = 0L;",
      "info" : "ExpressionStatement[52864-52885]:ExpressionStatement[41495-41516]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[52898-52950]:IfStatement[41529-41581]"
    }, {
      "left" : "beforeLookupTime = System.nanoTime();",
      "right" : "beforeLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[52913-52950]:ExpressionStatement[41544-41581]"
    }, {
      "left" : "for (int i = 0; i < unsorted.length; i++)",
      "right" : "for (int i = 0; i < unsorted.length; i++)",
      "info" : "ForStatement[52963-53384]:ForStatement[38138-38506]"
    }, {
      "left" : "int i = 0",
      "right" : "int i = 0",
      "info" : "VariableDeclarationExpression[52968-52977]:VariableDeclarationExpression[45262-45271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53005-53384]:Block[38180-38506]"
    }, {
      "left" : "Integer",
      "right" : "T",
      "info" : "SimpleName[53023-53030]:SimpleName[38198-38199]"
    }, {
      "left" : "Integer value = unsorted[i];",
      "right" : "T item = unsorted[i];",
      "info" : "VariableDeclarationStatement[53023-53051]:VariableDeclarationStatement[38198-38219]"
    }, {
      "left" : "value",
      "right" : "item",
      "info" : "SimpleName[53031-53036]:SimpleName[38200-38204]"
    }, {
      "left" : "boolean contains = collection.contains(item);",
      "right" : "boolean contains = collection.contains(item);",
      "info" : "VariableDeclarationStatement[53120-53165]:VariableDeclarationStatement[45351-45396]"
    }, {
      "left" : "if (!contains)",
      "right" : "if (!contains)",
      "info" : "IfStatement[53182-53370]:IfStatement[38298-38492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53197-53370]:Block[38313-38492]"
    }, {
      "left" : "System.err.println(name+\" unsorted contains failed.\");",
      "right" : "System.err.println(name+\" unsorted contains failed.\");",
      "info" : "ExpressionStatement[53219-53273]:ExpressionStatement[38335-38389]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[53294-53318]:ExpressionStatement[38410-38440]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[53306-53316]:SimpleName[38428-38438]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[53339-53352]:ReturnStatement[38461-38474]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[53397-53683]:IfStatement[41975-42261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53412-53683]:Block[41990-42261]"
    }, {
      "left" : "afterLookupTime = System.nanoTime();",
      "right" : "afterLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[53430-53466]:ExpressionStatement[42008-42044]"
    }, {
      "left" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "right" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "info" : "ExpressionStatement[53483-53532]:ExpressionStatement[42061-42110]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[53549-53669]:IfStatement[42127-42247]"
    }, {
      "left" : "System.out.println(name+\" unsorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "info" : "ExpressionStatement[53564-53669]:ExpressionStatement[42142-42247]"
    }, {
      "left" : "beforeRemoveTime = 0L;",
      "right" : "beforeRemoveTime = 0L;",
      "info" : "ExpressionStatement[53697-53719]:ExpressionStatement[42275-42297]"
    }, {
      "left" : "afterRemoveTime = 0L;",
      "right" : "afterRemoveTime = 0L;",
      "info" : "ExpressionStatement[53732-53753]:ExpressionStatement[42310-42331]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[53766-53818]:IfStatement[42344-42396]"
    }, {
      "left" : "beforeRemoveTime = System.nanoTime();",
      "right" : "beforeRemoveTime = System.nanoTime();",
      "info" : "ExpressionStatement[53781-53818]:ExpressionStatement[42359-42396]"
    }, {
      "left" : "for (int i = 0; i < unsorted.length; i++)",
      "right" : "for (int i = 0; i < unsorted.length; i++)",
      "info" : "ForStatement[53831-54246]:ForStatement[38953-39315]"
    }, {
      "left" : "int i = 0",
      "right" : "int i = 0",
      "info" : "VariableDeclarationExpression[53836-53845]:VariableDeclarationExpression[44105-44114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53873-54246]:Block[38995-39315]"
    }, {
      "left" : "Integer",
      "right" : "T",
      "info" : "SimpleName[53891-53898]:SimpleName[39013-39014]"
    }, {
      "left" : "Integer value = unsorted[i];",
      "right" : "T item = unsorted[i];",
      "info" : "VariableDeclarationStatement[53891-53919]:VariableDeclarationStatement[39013-39034]"
    }, {
      "left" : "value",
      "right" : "item",
      "info" : "SimpleName[53899-53904]:SimpleName[39015-39019]"
    }, {
      "left" : "boolean removed = collection.remove(item);",
      "right" : "boolean removed = collection.remove(item);",
      "info" : "VariableDeclarationStatement[53988-54030]:VariableDeclarationStatement[46176-46218]"
    }, {
      "left" : "if (!removed)",
      "right" : "if (!removed)",
      "info" : "IfStatement[54047-54232]:IfStatement[39110-39301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54061-54232]:Block[39124-39301]"
    }, {
      "left" : "System.err.println(name+\" unsorted remove failed.\");",
      "right" : "System.err.println(name+\" unsorted remove failed.\");",
      "info" : "ExpressionStatement[54083-54135]:ExpressionStatement[39146-39198]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[54156-54180]:ExpressionStatement[39219-39249]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[54168-54178]:SimpleName[39237-39247]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[54201-54214]:ReturnStatement[39270-39283]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[54259-54531]:IfStatement[42784-43056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54274-54531]:Block[42799-43056]"
    }, {
      "left" : "afterRemoveTime = System.nanoTime();",
      "right" : "afterRemoveTime = System.nanoTime();",
      "info" : "ExpressionStatement[54292-54328]:ExpressionStatement[42817-42853]"
    }, {
      "left" : "removeTime += afterRemoveTime - beforeRemoveTime;",
      "right" : "removeTime += afterRemoveTime - beforeRemoveTime;",
      "info" : "ExpressionStatement[54345-54394]:ExpressionStatement[42870-42919]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[54411-54517]:IfStatement[42936-43042]"
    }, {
      "left" : "System.out.println(name+\" unsorted remove time = \" + (removeTime / unsortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted remove time = \" + (removeTime / unsortedCount) + \" ns\");",
      "info" : "ExpressionStatement[54426-54517]:ExpressionStatement[42951-43042]"
    }, {
      "left" : "if (!collection.isEmpty())",
      "right" : "if (!collection.isEmpty())",
      "info" : "IfStatement[54545-54730]:IfStatement[39614-39805]"
    }, {
      "left" : "!collection.isEmpty()",
      "right" : "!collection.isEmpty()",
      "info" : "PrefixExpression[54549-54570]:PrefixExpression[46767-46788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54572-54730]:Block[39641-39805]"
    }, {
      "left" : "System.err.println(name+\" unsorted isEmpty() failed.\");",
      "right" : "System.err.println(name+\" unsorted isEmpty() failed.\");",
      "info" : "ExpressionStatement[54590-54645]:ExpressionStatement[39659-39714]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[54662-54686]:ExpressionStatement[39731-39761]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[54674-54684]:SimpleName[39749-39759]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[54703-54716]:ReturnStatement[39778-39791]"
    }, {
      "left" : "if (collection.size()!=0)",
      "right" : "if (collection.size()!=0)",
      "info" : "IfStatement[54743-54924]:IfStatement[39818-40005]"
    }, {
      "left" : "collection.size()!=0",
      "right" : "collection.size()!=0",
      "info" : "InfixExpression[54747-54767]:InfixExpression[46969-46989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54769-54924]:Block[39844-40005]"
    }, {
      "left" : "System.err.println(name+\" unsorted size() failed.\");",
      "right" : "System.err.println(name+\" unsorted size() failed.\");",
      "info" : "ExpressionStatement[54787-54839]:ExpressionStatement[39862-39914]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[54856-54880]:ExpressionStatement[39931-39961]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[54868-54878]:SimpleName[39949-39959]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[54897-54910]:ReturnStatement[39978-39991]"
    }, {
      "left" : "long addSortedTime = 0L;",
      "right" : "long addSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[54944-54968]:VariableDeclarationStatement[43481-43505]"
    }, {
      "left" : "long removeSortedTime = 0L;",
      "right" : "long removeSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[54977-55004]:VariableDeclarationStatement[43514-43541]"
    }, {
      "left" : "long beforeAddSortedTime = 0L;",
      "right" : "long beforeAddSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[55014-55044]:VariableDeclarationStatement[43551-43581]"
    }, {
      "left" : "long afterAddSortedTime = 0L;",
      "right" : "long afterAddSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[55053-55082]:VariableDeclarationStatement[43590-43619]"
    }, {
      "left" : "long beforeRemoveSortedTime = 0L;",
      "right" : "long beforeRemoveSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[55092-55125]:VariableDeclarationStatement[43629-43662]"
    }, {
      "left" : "long afterRemoveSortedTime = 0L;",
      "right" : "long afterRemoveSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[55134-55166]:VariableDeclarationStatement[43671-43703]"
    }, {
      "left" : "sortedCount++;",
      "right" : "sortedCount++;",
      "info" : "ExpressionStatement[55176-55190]:ExpressionStatement[47170-47184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55199-58772]:Block[43736-47160]"
    }, {
      "left" : "beforeMemory = 0L;",
      "right" : "beforeMemory = 0L;",
      "info" : "ExpressionStatement[55278-55296]:ExpressionStatement[36732-36750]"
    }, {
      "left" : "afterMemory = 0L;",
      "right" : "afterMemory = 0L;",
      "info" : "ExpressionStatement[55309-55326]:ExpressionStatement[36763-36780]"
    }, {
      "left" : "beforeAddSortedTime = 0L;",
      "right" : "beforeAddSortedTime = 0L;",
      "info" : "ExpressionStatement[55339-55364]:ExpressionStatement[43876-43901]"
    }, {
      "left" : "afterAddSortedTime = 0L;",
      "right" : "afterAddSortedTime = 0L;",
      "info" : "ExpressionStatement[55377-55401]:ExpressionStatement[43914-43938]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[55414-55482]:IfStatement[36856-36924]"
    }, {
      "left" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[55431-55482]:ExpressionStatement[36873-36924]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[55495-55550]:IfStatement[44032-44087]"
    }, {
      "left" : "beforeAddSortedTime = System.nanoTime();",
      "right" : "beforeAddSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[55510-55550]:ExpressionStatement[44047-44087]"
    }, {
      "left" : "for (int i = 0; i < sorted.length; i++)",
      "right" : "for (int i = 0; i < sorted.length; i++)",
      "info" : "ForStatement[55563-55964]:ForStatement[47610-47956]"
    }, {
      "left" : "int i = 0",
      "right" : "int i = 0",
      "info" : "VariableDeclarationExpression[55568-55577]:VariableDeclarationExpression[42414-42423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55603-55964]:Block[47650-47956]"
    }, {
      "left" : "Integer",
      "right" : "T",
      "info" : "SimpleName[55621-55628]:SimpleName[47668-47669]"
    }, {
      "left" : "Integer value = unsorted[i];",
      "right" : "T item = sorted[i];",
      "info" : "VariableDeclarationStatement[55621-55649]:VariableDeclarationStatement[47668-47687]"
    }, {
      "left" : "value",
      "right" : "item",
      "info" : "SimpleName[55629-55634]:SimpleName[47670-47674]"
    }, {
      "left" : "unsorted",
      "right" : "sorted",
      "info" : "SimpleName[55637-55645]:SimpleName[47677-47683]"
    }, {
      "left" : "boolean added = collection.add(item);",
      "right" : "boolean added = collection.add(item);",
      "info" : "VariableDeclarationStatement[55718-55755]:VariableDeclarationStatement[40553-40590]"
    }, {
      "left" : "if (!added)",
      "right" : "if (!added)",
      "info" : "IfStatement[55772-55950]:IfStatement[47758-47942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55784-55950]:Block[47770-47942]"
    }, {
      "left" : "System.err.println(name+\" sorted add failed.\");",
      "right" : "System.err.println(name+\" sorted add failed.\");",
      "info" : "ExpressionStatement[55806-55853]:ExpressionStatement[47792-47839]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[55874-55898]:ExpressionStatement[47860-47890]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[55886-55896]:SimpleName[47878-47888]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55919-55932]:ReturnStatement[47911-47924]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[55977-56257]:IfStatement[44459-44739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55992-56257]:Block[44474-44739]"
    }, {
      "left" : "afterAddSortedTime = System.nanoTime();",
      "right" : "afterAddSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[56010-56049]:ExpressionStatement[44492-44531]"
    }, {
      "left" : "addSortedTime += afterAddSortedTime - beforeAddSortedTime;",
      "right" : "addSortedTime += afterAddSortedTime - beforeAddSortedTime;",
      "info" : "ExpressionStatement[56066-56124]:ExpressionStatement[44548-44606]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[56141-56243]:IfStatement[44623-44725]"
    }, {
      "left" : "System.out.println(name+\" sorted add time = \" + (addSortedTime / sortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" sorted add time = \" + (addSortedTime / sortedCount) + \" ns\");",
      "info" : "ExpressionStatement[56156-56243]:ExpressionStatement[44638-44725]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[56270-56556]:IfStatement[44752-45038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56287-56556]:Block[44769-45038]"
    }, {
      "left" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[56305-56355]:ExpressionStatement[44787-44837]"
    }, {
      "left" : "memory += afterMemory - beforeMemory;",
      "right" : "memory += afterMemory - beforeMemory;",
      "info" : "ExpressionStatement[56372-56409]:ExpressionStatement[44854-44891]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[56426-56542]:IfStatement[44908-45024]"
    }, {
      "left" : "System.out.println(name+\" sorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "right" : "System.out.println(name+\" sorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "info" : "ExpressionStatement[56441-56542]:ExpressionStatement[44923-45024]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[56570-56627]:IfStatement[37933-37990]"
    }, {
      "left" : "System.out.println(collection.toString());",
      "right" : "System.out.println(collection.toString());",
      "info" : "ExpressionStatement[56585-56627]:ExpressionStatement[37948-37990]"
    }, {
      "left" : "beforeLookupTime = 0L;",
      "right" : "beforeLookupTime = 0L;",
      "info" : "ExpressionStatement[56641-56663]:ExpressionStatement[38004-38026]"
    }, {
      "left" : "afterLookupTime = 0L;",
      "right" : "afterLookupTime = 0L;",
      "info" : "ExpressionStatement[56676-56697]:ExpressionStatement[38039-38060]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[56710-56762]:IfStatement[38073-38125]"
    }, {
      "left" : "beforeLookupTime = System.nanoTime();",
      "right" : "beforeLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[56725-56762]:ExpressionStatement[38088-38125]"
    }, {
      "left" : "for (int i = 0; i < sorted.length; i++)",
      "right" : "for (int i = 0; i < sorted.length; i++)",
      "info" : "ForStatement[56775-57190]:ForStatement[48767-49129]"
    }, {
      "left" : "int i = 0",
      "right" : "int i = 0",
      "info" : "VariableDeclarationExpression[56780-56789]:VariableDeclarationExpression[41599-41608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56815-57190]:Block[48807-49129]"
    }, {
      "left" : "Integer",
      "right" : "T",
      "info" : "SimpleName[56833-56840]:SimpleName[48825-48826]"
    }, {
      "left" : "Integer value = sorted[i];",
      "right" : "T item = sorted[i];",
      "info" : "VariableDeclarationStatement[56833-56859]:VariableDeclarationStatement[48825-48844]"
    }, {
      "left" : "value",
      "right" : "item",
      "info" : "SimpleName[56841-56846]:SimpleName[48827-48831]"
    }, {
      "left" : "boolean contains = collection.contains(item);",
      "right" : "boolean contains = collection.contains(item);",
      "info" : "VariableDeclarationStatement[56928-56973]:VariableDeclarationStatement[41692-41737]"
    }, {
      "left" : "if (!contains)",
      "right" : "if (!contains)",
      "info" : "IfStatement[56990-57176]:IfStatement[48923-49115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57005-57176]:Block[48938-49115]"
    }, {
      "left" : "System.err.println(name+\" sorted contains failed.\");",
      "right" : "System.err.println(name+\" sorted contains failed.\");",
      "info" : "ExpressionStatement[57027-57079]:ExpressionStatement[48960-49012]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[57100-57124]:ExpressionStatement[49033-49063]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[57112-57122]:SimpleName[49051-49061]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[57145-57158]:ReturnStatement[49084-49097]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[57203-57487]:IfStatement[45632-45916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57218-57487]:Block[45647-45916]"
    }, {
      "left" : "afterLookupTime = System.nanoTime();",
      "right" : "afterLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[57236-57272]:ExpressionStatement[45665-45701]"
    }, {
      "left" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "right" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "info" : "ExpressionStatement[57289-57338]:ExpressionStatement[45718-45767]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[57355-57473]:IfStatement[45784-45902]"
    }, {
      "left" : "System.out.println(name+\" sorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "right" : "System.out.println(name+\" sorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "info" : "ExpressionStatement[57370-57473]:ExpressionStatement[45799-45902]"
    }, {
      "left" : "beforeRemoveSortedTime = 0L;",
      "right" : "beforeRemoveSortedTime = 0L;",
      "info" : "ExpressionStatement[57501-57529]:ExpressionStatement[45930-45958]"
    }, {
      "left" : "afterRemoveSortedTime = 0L;",
      "right" : "afterRemoveSortedTime = 0L;",
      "info" : "ExpressionStatement[57542-57569]:ExpressionStatement[45971-45998]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[57582-57640]:IfStatement[46011-46069]"
    }, {
      "left" : "beforeRemoveSortedTime = System.nanoTime();",
      "right" : "beforeRemoveSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[57597-57640]:ExpressionStatement[46026-46069]"
    }, {
      "left" : "for (int i = 0; i < sorted.length; i++)",
      "right" : "for (int i = sorted.length - 1; i >= 0; i--)",
      "info" : "ForStatement[57653-58062]:ForStatement[49592-49953]"
    }, {
      "left" : "int i = 0",
      "right" : "int i = 0",
      "info" : "VariableDeclarationExpression[57658-57667]:VariableDeclarationExpression[38958-38967]"
    }, {
      "left" : "<",
      "right" : ">=",
      "info" : "INFIX_EXPRESSION_OPERATOR[57671-57672]:INFIX_EXPRESSION_OPERATOR[49626-49628]"
    }, {
      "left" : "++",
      "right" : "--",
      "info" : "POSTFIX_EXPRESSION_OPERATOR[57689-57691]:POSTFIX_EXPRESSION_OPERATOR[49633-49635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57693-58062]:Block[49637-49953]"
    }, {
      "left" : "Integer",
      "right" : "T",
      "info" : "SimpleName[57711-57718]:SimpleName[49655-49656]"
    }, {
      "left" : "Integer value = sorted[i];",
      "right" : "T item = sorted[i];",
      "info" : "VariableDeclarationStatement[57711-57737]:VariableDeclarationStatement[49655-49674]"
    }, {
      "left" : "value",
      "right" : "item",
      "info" : "SimpleName[57719-57724]:SimpleName[49657-49661]"
    }, {
      "left" : "boolean removed = collection.remove(item);",
      "right" : "boolean removed = collection.remove(item);",
      "info" : "VariableDeclarationStatement[57806-57848]:VariableDeclarationStatement[42507-42549]"
    }, {
      "left" : "if (!removed)",
      "right" : "if (!removed)",
      "info" : "IfStatement[57865-58048]:IfStatement[49750-49939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57879-58048]:Block[49764-49939]"
    }, {
      "left" : "System.err.println(name+\" sorted remove failed.\");",
      "right" : "System.err.println(name+\" sorted remove failed.\");",
      "info" : "ExpressionStatement[57901-57951]:ExpressionStatement[49786-49836]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[57972-57996]:ExpressionStatement[49857-49887]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[57984-57994]:SimpleName[49875-49885]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[58017-58030]:ReturnStatement[49908-49921]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[58075-58373]:IfStatement[46451-46749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58090-58373]:Block[46466-46749]"
    }, {
      "left" : "afterRemoveSortedTime = System.nanoTime();",
      "right" : "afterRemoveSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[58108-58150]:ExpressionStatement[46484-46526]"
    }, {
      "left" : "removeSortedTime += afterRemoveSortedTime - beforeRemoveSortedTime;",
      "right" : "removeSortedTime += afterRemoveSortedTime - beforeRemoveSortedTime;",
      "info" : "ExpressionStatement[58167-58234]:ExpressionStatement[46543-46610]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[58251-58359]:IfStatement[46627-46735]"
    }, {
      "left" : "System.out.println(name+\" sorted remove time = \" + (removeSortedTime / sortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" sorted remove time = \" + (removeSortedTime / sortedCount) + \" ns\");",
      "info" : "ExpressionStatement[58266-58359]:ExpressionStatement[46642-46735]"
    }, {
      "left" : "if (!collection.isEmpty())",
      "right" : "if (!collection.isEmpty())",
      "info" : "IfStatement[58387-58570]:IfStatement[50278-50467]"
    }, {
      "left" : "!collection.isEmpty()",
      "right" : "!collection.isEmpty()",
      "info" : "PrefixExpression[58391-58412]:PrefixExpression[43074-43095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58414-58570]:Block[50305-50467]"
    }, {
      "left" : "System.err.println(name+\" sorted isEmpty() failed.\");",
      "right" : "System.err.println(name+\" sorted isEmpty() failed.\");",
      "info" : "ExpressionStatement[58432-58485]:ExpressionStatement[50323-50376]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[58502-58526]:ExpressionStatement[50393-50423]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[58514-58524]:SimpleName[50411-50421]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[58543-58556]:ReturnStatement[50440-50453]"
    }, {
      "left" : "if (collection.size()!=0)",
      "right" : "if (collection.size()!=0)",
      "info" : "IfStatement[58583-58762]:IfStatement[50480-50665]"
    }, {
      "left" : "collection.size()!=0",
      "right" : "collection.size()!=0",
      "info" : "InfixExpression[58587-58607]:InfixExpression[43278-43298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58609-58762]:Block[50506-50665]"
    }, {
      "left" : "System.err.println(name+\" sorted size() failed.\");",
      "right" : "System.err.println(name+\" sorted size() failed.\");",
      "info" : "ExpressionStatement[58627-58677]:ExpressionStatement[50524-50574]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[58694-58718]:ExpressionStatement[50591-50621]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[58706-58716]:SimpleName[50609-50619]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[58735-58748]:ReturnStatement[50638-50651]"
    }, {
      "left" : "sortedCount++;",
      "right" : "sortedCount++;",
      "info" : "ExpressionStatement[58782-58796]:ExpressionStatement[43713-43727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58805-62434]:Block[47193-50675]"
    }, {
      "left" : "beforeMemory = 0L;",
      "right" : "beforeMemory = 0L;",
      "info" : "ExpressionStatement[58937-58955]:ExpressionStatement[47325-47343]"
    }, {
      "left" : "afterMemory = 0L;",
      "right" : "afterMemory = 0L;",
      "info" : "ExpressionStatement[58968-58985]:ExpressionStatement[47356-47373]"
    }, {
      "left" : "beforeAddSortedTime = 0L;",
      "right" : "beforeAddSortedTime = 0L;",
      "info" : "ExpressionStatement[58998-59023]:ExpressionStatement[47386-47411]"
    }, {
      "left" : "afterAddSortedTime = 0L;",
      "right" : "afterAddSortedTime = 0L;",
      "info" : "ExpressionStatement[59036-59060]:ExpressionStatement[47424-47448]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[59073-59141]:IfStatement[47461-47529]"
    }, {
      "left" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[59090-59141]:ExpressionStatement[47478-47529]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[59154-59209]:IfStatement[47542-47597]"
    }, {
      "left" : "beforeAddSortedTime = System.nanoTime();",
      "right" : "beforeAddSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[59169-59209]:ExpressionStatement[47557-47597]"
    }, {
      "left" : "for (int i = 0; i < sorted.length; i++)",
      "right" : "for (int i = 0; i < sorted.length; i++)",
      "info" : "ForStatement[59222-59621]:ForStatement[44100-44446]"
    }, {
      "left" : "int i = 0",
      "right" : "int i = 0",
      "info" : "VariableDeclarationExpression[59227-59236]:VariableDeclarationExpression[38143-38152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59262-59621]:Block[44140-44446]"
    }, {
      "left" : "Integer",
      "right" : "T",
      "info" : "SimpleName[59280-59287]:SimpleName[44158-44159]"
    }, {
      "left" : "Integer value = sorted[i];",
      "right" : "T item = sorted[i];",
      "info" : "VariableDeclarationStatement[59280-59306]:VariableDeclarationStatement[44158-44177]"
    }, {
      "left" : "value",
      "right" : "item",
      "info" : "SimpleName[59288-59293]:SimpleName[44160-44164]"
    }, {
      "left" : "boolean added = collection.add(item);",
      "right" : "boolean added = collection.add(item);",
      "info" : "VariableDeclarationStatement[59375-59412]:VariableDeclarationStatement[37097-37134]"
    }, {
      "left" : "if (!added)",
      "right" : "if (!added)",
      "info" : "IfStatement[59429-59607]:IfStatement[44248-44432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59441-59607]:Block[44260-44432]"
    }, {
      "left" : "System.err.println(name+\" sorted add failed.\");",
      "right" : "System.err.println(name+\" sorted add failed.\");",
      "info" : "ExpressionStatement[59463-59510]:ExpressionStatement[44282-44329]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[59531-59555]:ExpressionStatement[44350-44380]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[59543-59553]:SimpleName[44368-44378]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[59576-59589]:ReturnStatement[44401-44414]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[59634-59914]:IfStatement[47969-48249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59649-59914]:Block[47984-48249]"
    }, {
      "left" : "afterAddSortedTime = System.nanoTime();",
      "right" : "afterAddSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[59667-59706]:ExpressionStatement[48002-48041]"
    }, {
      "left" : "addSortedTime += afterAddSortedTime - beforeAddSortedTime;",
      "right" : "addSortedTime += afterAddSortedTime - beforeAddSortedTime;",
      "info" : "ExpressionStatement[59723-59781]:ExpressionStatement[48058-48116]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[59798-59900]:IfStatement[48133-48235]"
    }, {
      "left" : "System.out.println(name+\" sorted add time = \" + (addSortedTime / sortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" sorted add time = \" + (addSortedTime / sortedCount) + \" ns\");",
      "info" : "ExpressionStatement[59813-59900]:ExpressionStatement[48148-48235]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[59927-60213]:IfStatement[48262-48548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59944-60213]:Block[48279-48548]"
    }, {
      "left" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[59962-60012]:ExpressionStatement[48297-48347]"
    }, {
      "left" : "memory += afterMemory - beforeMemory;",
      "right" : "memory += afterMemory - beforeMemory;",
      "info" : "ExpressionStatement[60029-60066]:ExpressionStatement[48364-48401]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[60083-60199]:IfStatement[48418-48534]"
    }, {
      "left" : "System.out.println(name+\" sorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "right" : "System.out.println(name+\" sorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "info" : "ExpressionStatement[60098-60199]:ExpressionStatement[48433-48534]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[60227-60284]:IfStatement[48562-48619]"
    }, {
      "left" : "System.out.println(collection.toString());",
      "right" : "System.out.println(collection.toString());",
      "info" : "ExpressionStatement[60242-60284]:ExpressionStatement[48577-48619]"
    }, {
      "left" : "beforeLookupTime = 0L;",
      "right" : "beforeLookupTime = 0L;",
      "info" : "ExpressionStatement[60298-60320]:ExpressionStatement[48633-48655]"
    }, {
      "left" : "afterLookupTime = 0L;",
      "right" : "afterLookupTime = 0L;",
      "info" : "ExpressionStatement[60333-60354]:ExpressionStatement[48668-48689]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[60367-60419]:IfStatement[48702-48754]"
    }, {
      "left" : "beforeLookupTime = System.nanoTime();",
      "right" : "beforeLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[60382-60419]:ExpressionStatement[48717-48754]"
    }, {
      "left" : "for (int i = 0; i < sorted.length; i++)",
      "right" : "for (int i = 0; i < sorted.length; i++)",
      "info" : "ForStatement[60432-60847]:ForStatement[45257-45619]"
    }, {
      "left" : "int i = 0",
      "right" : "int i = 0",
      "info" : "VariableDeclarationExpression[60437-60446]:VariableDeclarationExpression[37004-37013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60472-60847]:Block[45297-45619]"
    }, {
      "left" : "Integer",
      "right" : "T",
      "info" : "SimpleName[60490-60497]:SimpleName[45315-45316]"
    }, {
      "left" : "Integer value = sorted[i];",
      "right" : "T item = sorted[i];",
      "info" : "VariableDeclarationStatement[60490-60516]:VariableDeclarationStatement[45315-45334]"
    }, {
      "left" : "value",
      "right" : "item",
      "info" : "SimpleName[60498-60503]:SimpleName[45317-45321]"
    }, {
      "left" : "boolean contains = collection.contains(item);",
      "right" : "boolean contains = collection.contains(item);",
      "info" : "VariableDeclarationStatement[60585-60630]:VariableDeclarationStatement[38236-38281]"
    }, {
      "left" : "if (!contains)",
      "right" : "if (!contains)",
      "info" : "IfStatement[60647-60833]:IfStatement[45413-45605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60662-60833]:Block[45428-45605]"
    }, {
      "left" : "System.err.println(name+\" sorted contains failed.\");",
      "right" : "System.err.println(name+\" sorted contains failed.\");",
      "info" : "ExpressionStatement[60684-60736]:ExpressionStatement[45450-45502]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[60757-60781]:ExpressionStatement[45523-45553]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[60769-60779]:SimpleName[45541-45551]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[60802-60815]:ReturnStatement[45574-45587]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[60860-61144]:IfStatement[49142-49426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60875-61144]:Block[49157-49426]"
    }, {
      "left" : "afterLookupTime = System.nanoTime();",
      "right" : "afterLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[60893-60929]:ExpressionStatement[49175-49211]"
    }, {
      "left" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "right" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "info" : "ExpressionStatement[60946-60995]:ExpressionStatement[49228-49277]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[61012-61130]:IfStatement[49294-49412]"
    }, {
      "left" : "System.out.println(name+\" sorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "right" : "System.out.println(name+\" sorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "info" : "ExpressionStatement[61027-61130]:ExpressionStatement[49309-49412]"
    }, {
      "left" : "beforeRemoveSortedTime = 0L;",
      "right" : "beforeRemoveSortedTime = 0L;",
      "info" : "ExpressionStatement[61158-61186]:ExpressionStatement[49440-49468]"
    }, {
      "left" : "afterRemoveSortedTime = 0L;",
      "right" : "afterRemoveSortedTime = 0L;",
      "info" : "ExpressionStatement[61199-61226]:ExpressionStatement[49481-49508]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[61239-61297]:IfStatement[49521-49579]"
    }, {
      "left" : "beforeRemoveSortedTime = System.nanoTime();",
      "right" : "beforeRemoveSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[61254-61297]:ExpressionStatement[49536-49579]"
    }, {
      "left" : "for (int i = sorted.length - 1; i >= 0; i--)",
      "right" : "for (int i = 0; i < sorted.length; i++)",
      "info" : "ForStatement[61310-61724]:ForStatement[46082-46438]"
    }, {
      "left" : "int i = sorted.length - 1",
      "right" : "int i = sorted.length - 1",
      "info" : "VariableDeclarationExpression[61315-61340]:VariableDeclarationExpression[49597-49622]"
    }, {
      "left" : ">=",
      "right" : "<",
      "info" : "INFIX_EXPRESSION_OPERATOR[61344-61346]:INFIX_EXPRESSION_OPERATOR[46100-46101]"
    }, {
      "left" : "--",
      "right" : "++",
      "info" : "POSTFIX_EXPRESSION_OPERATOR[61351-61353]:POSTFIX_EXPRESSION_OPERATOR[46118-46120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61355-61724]:Block[46122-46438]"
    }, {
      "left" : "Integer",
      "right" : "T",
      "info" : "SimpleName[61373-61380]:SimpleName[46140-46141]"
    }, {
      "left" : "Integer value = sorted[i];",
      "right" : "T item = sorted[i];",
      "info" : "VariableDeclarationStatement[61373-61399]:VariableDeclarationStatement[46140-46159]"
    }, {
      "left" : "value",
      "right" : "item",
      "info" : "SimpleName[61381-61386]:SimpleName[46142-46146]"
    }, {
      "left" : "boolean removed = collection.remove(item);",
      "right" : "boolean removed = collection.remove(item);",
      "info" : "VariableDeclarationStatement[61468-61510]:VariableDeclarationStatement[39051-39093]"
    }, {
      "left" : "if (!removed)",
      "right" : "if (!removed)",
      "info" : "IfStatement[61527-61710]:IfStatement[46235-46424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61541-61710]:Block[46249-46424]"
    }, {
      "left" : "System.err.println(name+\" sorted remove failed.\");",
      "right" : "System.err.println(name+\" sorted remove failed.\");",
      "info" : "ExpressionStatement[61563-61613]:ExpressionStatement[46271-46321]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[61634-61658]:ExpressionStatement[46342-46372]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[61646-61656]:SimpleName[46360-46370]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[61679-61692]:ReturnStatement[46393-46406]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[61737-62035]:IfStatement[49966-50264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61752-62035]:Block[49981-50264]"
    }, {
      "left" : "afterRemoveSortedTime = System.nanoTime();",
      "right" : "afterRemoveSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[61770-61812]:ExpressionStatement[49999-50041]"
    }, {
      "left" : "removeSortedTime += afterRemoveSortedTime - beforeRemoveSortedTime;",
      "right" : "removeSortedTime += afterRemoveSortedTime - beforeRemoveSortedTime;",
      "info" : "ExpressionStatement[61829-61896]:ExpressionStatement[50058-50125]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[61913-62021]:IfStatement[50142-50250]"
    }, {
      "left" : "System.out.println(name+\" sorted remove time = \" + (removeSortedTime / sortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" sorted remove time = \" + (removeSortedTime / sortedCount) + \" ns\");",
      "info" : "ExpressionStatement[61928-62021]:ExpressionStatement[50157-50250]"
    }, {
      "left" : "if (!collection.isEmpty())",
      "right" : "if (!collection.isEmpty())",
      "info" : "IfStatement[62049-62232]:IfStatement[46763-46952]"
    }, {
      "left" : "!collection.isEmpty()",
      "right" : "!collection.isEmpty()",
      "info" : "PrefixExpression[62053-62074]:PrefixExpression[39618-39639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62076-62232]:Block[46790-46952]"
    }, {
      "left" : "System.err.println(name+\" sorted isEmpty() failed.\");",
      "right" : "System.err.println(name+\" sorted isEmpty() failed.\");",
      "info" : "ExpressionStatement[62094-62147]:ExpressionStatement[46808-46861]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[62164-62188]:ExpressionStatement[46878-46908]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[62176-62186]:SimpleName[46896-46906]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[62205-62218]:ReturnStatement[46925-46938]"
    }, {
      "left" : "if (collection.size()!=0)",
      "right" : "if (collection.size()!=0)",
      "info" : "IfStatement[62245-62424]:IfStatement[46965-47150]"
    }, {
      "left" : "collection.size()!=0",
      "right" : "collection.size()!=0",
      "info" : "InfixExpression[62249-62269]:InfixExpression[39822-39842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62271-62424]:Block[46991-47150]"
    }, {
      "left" : "System.err.println(name+\" sorted size() failed.\");",
      "right" : "System.err.println(name+\" sorted size() failed.\");",
      "info" : "ExpressionStatement[62289-62339]:ExpressionStatement[47009-47059]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[62356-62380]:ExpressionStatement[47076-47106]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[62368-62378]:SimpleName[47094-47104]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[62397-62410]:ReturnStatement[47123-47136]"
    }, {
      "left" : "if (!firstTimeThru)",
      "right" : "if (!firstTimeThru)",
      "info" : "IfStatement[62494-63084]:IfStatement[50735-51325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62514-63084]:Block[50755-51325]"
    }, {
      "left" : "if (testResults[testIndex] == null)",
      "right" : "if (testResults[testIndex] == null)",
      "info" : "IfStatement[62528-62618]:IfStatement[50769-50859]"
    }, {
      "left" : "testResults[testIndex] = new long[6];",
      "right" : "testResults[testIndex] = new long[6];",
      "info" : "ExpressionStatement[62581-62618]:ExpressionStatement[50822-50859]"
    }, {
      "left" : "testResults[testIndex][0] += (addTime / unsortedCount);",
      "right" : "testResults[testIndex][0] += (addTime / unsortedCount);",
      "info" : "ExpressionStatement[62631-62686]:ExpressionStatement[50872-50927]"
    }, {
      "left" : "testResults[testIndex][1] += (removeTime / unsortedCount);",
      "right" : "testResults[testIndex][1] += (removeTime / unsortedCount);",
      "info" : "ExpressionStatement[62699-62757]:ExpressionStatement[50940-50998]"
    }, {
      "left" : "testResults[testIndex][2] += (addSortedTime / sortedCount);",
      "right" : "testResults[testIndex][2] += (addSortedTime / sortedCount);",
      "info" : "ExpressionStatement[62770-62829]:ExpressionStatement[51011-51070]"
    }, {
      "left" : "testResults[testIndex][3] += (removeSortedTime / sortedCount);",
      "right" : "testResults[testIndex][3] += (removeSortedTime / sortedCount);",
      "info" : "ExpressionStatement[62842-62904]:ExpressionStatement[51083-51145]"
    }, {
      "left" : "testResults[testIndex][4] += (lookupTime / (unsortedCount + sortedCount));",
      "right" : "testResults[testIndex][4] += (lookupTime / (unsortedCount + sortedCount));",
      "info" : "ExpressionStatement[62917-62991]:ExpressionStatement[51158-51232]"
    }, {
      "left" : "testResults[testIndex][5] += (memory / (unsortedCount + sortedCount));",
      "right" : "testResults[testIndex][5] += (memory / (unsortedCount + sortedCount));",
      "info" : "ExpressionStatement[63004-63074]:ExpressionStatement[51245-51315]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[63094-63130]:IfStatement[51335-51371]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[63109-63130]:ExpressionStatement[51350-51371]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[63140-63152]:ReturnStatement[51381-51393]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[63164-63194]:SingleMemberAnnotation[51405-51435]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[63199-63206]:Modifier[51440-51447]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[63207-63213]:Modifier[51448-51454]"
    }, {
      "left" : "K extends Comparable<K>",
      "right" : "K extends Comparable<K>",
      "info" : "TypeParameter[63215-63238]:TypeParameter[51456-51479]"
    }, {
      "left" : "V",
      "right" : "V",
      "info" : "TypeParameter[63239-63240]:TypeParameter[51480-51481]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[63242-63249]:PrimitiveType[51483-51490]"
    }, {
      "left" : "testJavaMap",
      "right" : "testJavaMap",
      "info" : "SimpleName[63250-63261]:SimpleName[51491-51502]"
    }, {
      "left" : "java.util.Map<K,V> map",
      "right" : "java.util.Map<K,V> map",
      "info" : "SingleVariableDeclaration[63262-63284]:SingleVariableDeclaration[51503-51525]"
    }, {
      "left" : "Class<K> keyType",
      "right" : "Class<K> keyType",
      "info" : "SingleVariableDeclaration[63286-63302]:SingleVariableDeclaration[51527-51543]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[63304-63315]:SingleVariableDeclaration[51565-51576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63317-80064]:Block[51632-67024]"
    }, {
      "left" : "if (!map.isEmpty())",
      "right" : "if (!map.isEmpty())",
      "info" : "IfStatement[63365-63519]:IfStatement[51680-51840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63385-63519]:Block[51700-51840]"
    }, {
      "left" : "System.err.println(name+\" initial isEmpty() failed.\");",
      "right" : "System.err.println(name+\" initial isEmpty() failed.\");",
      "info" : "ExpressionStatement[63399-63453]:ExpressionStatement[51714-51768]"
    }, {
      "left" : "handleError(map);",
      "right" : "handleError(input,map);",
      "info" : "ExpressionStatement[63466-63483]:ExpressionStatement[51781-51804]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "SimpleName[63478-63481]:SimpleName[51799-51802]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[63496-63509]:ReturnStatement[51817-51830]"
    }, {
      "left" : "if (map.size()!=0)",
      "right" : "if (map.size()!=0)",
      "info" : "IfStatement[63528-63678]:IfStatement[51849-52005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63547-63678]:Block[51868-52005]"
    }, {
      "left" : "System.err.println(name+\" initial size() failed.\");",
      "right" : "System.err.println(name+\" initial size() failed.\");",
      "info" : "ExpressionStatement[63561-63612]:ExpressionStatement[51882-51933]"
    }, {
      "left" : "handleError(map);",
      "right" : "handleError(input,map);",
      "info" : "ExpressionStatement[63625-63642]:ExpressionStatement[51946-51969]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "SimpleName[63637-63640]:SimpleName[51964-51967]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[63655-63668]:ReturnStatement[51982-51995]"
    }, {
      "left" : "long sortedCount = 0;",
      "right" : "long sortedCount = 0;",
      "info" : "VariableDeclarationStatement[63688-63709]:VariableDeclarationStatement[52752-52773]"
    }, {
      "left" : "long unsortedCount = 0;",
      "right" : "long unsortedCount = 0;",
      "info" : "VariableDeclarationStatement[63718-63741]:VariableDeclarationStatement[52782-52805]"
    }, {
      "left" : "long addTime = 0L;",
      "right" : "long addTime = 0L;",
      "info" : "VariableDeclarationStatement[63751-63769]:VariableDeclarationStatement[52815-52833]"
    }, {
      "left" : "long removeTime = 0L;",
      "right" : "long removeTime = 0L;",
      "info" : "VariableDeclarationStatement[63778-63799]:VariableDeclarationStatement[52842-52863]"
    }, {
      "left" : "long beforeAddTime = 0L;",
      "right" : "long beforeAddTime = 0L;",
      "info" : "VariableDeclarationStatement[63809-63833]:VariableDeclarationStatement[52873-52897]"
    }, {
      "left" : "long afterAddTime = 0L;",
      "right" : "long afterAddTime = 0L;",
      "info" : "VariableDeclarationStatement[63842-63865]:VariableDeclarationStatement[52906-52929]"
    }, {
      "left" : "long beforeRemoveTime = 0L;",
      "right" : "long beforeRemoveTime = 0L;",
      "info" : "VariableDeclarationStatement[63874-63901]:VariableDeclarationStatement[52938-52965]"
    }, {
      "left" : "long afterRemoveTime = 0L;",
      "right" : "long afterRemoveTime = 0L;",
      "info" : "VariableDeclarationStatement[63910-63936]:VariableDeclarationStatement[52974-53000]"
    }, {
      "left" : "long memory = 0L;",
      "right" : "long memory = 0L;",
      "info" : "VariableDeclarationStatement[63946-63963]:VariableDeclarationStatement[53010-53027]"
    }, {
      "left" : "long beforeMemory = 0L;",
      "right" : "long beforeMemory = 0L;",
      "info" : "VariableDeclarationStatement[63973-63996]:VariableDeclarationStatement[53037-53060]"
    }, {
      "left" : "long afterMemory = 0L;",
      "right" : "long afterMemory = 0L;",
      "info" : "VariableDeclarationStatement[64005-64027]:VariableDeclarationStatement[53069-53091]"
    }, {
      "left" : "long lookupTime = 0L;",
      "right" : "long lookupTime = 0L;",
      "info" : "VariableDeclarationStatement[64037-64058]:VariableDeclarationStatement[53101-53122]"
    }, {
      "left" : "long beforeLookupTime = 0L;",
      "right" : "long beforeLookupTime = 0L;",
      "info" : "VariableDeclarationStatement[64068-64095]:VariableDeclarationStatement[53132-53159]"
    }, {
      "left" : "long afterLookupTime = 0L;",
      "right" : "long afterLookupTime = 0L;",
      "info" : "VariableDeclarationStatement[64104-64130]:VariableDeclarationStatement[53168-53194]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[64140-64180]:IfStatement[53204-53244]"
    }, {
      "left" : "System.out.println(name);",
      "right" : "System.out.println(name);",
      "info" : "ExpressionStatement[64155-64180]:ExpressionStatement[53219-53244]"
    }, {
      "left" : "if (!firstTimeThru)",
      "right" : "if (!firstTimeThru)",
      "info" : "IfStatement[64240-64300]:IfStatement[53304-53364]"
    }, {
      "left" : "testNames[testIndex] = name;",
      "right" : "testNames[testIndex] = name;",
      "info" : "ExpressionStatement[64272-64300]:ExpressionStatement[53336-53364]"
    }, {
      "left" : "unsortedCount++;",
      "right" : "unsortedCount++;",
      "info" : "ExpressionStatement[64310-64326]:ExpressionStatement[56470-56486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64335-67921]:Block[53399-56460]"
    }, {
      "left" : "beforeMemory = 0L;",
      "right" : "beforeMemory = 0L;",
      "info" : "ExpressionStatement[64349-64367]:ExpressionStatement[63129-63147]"
    }, {
      "left" : "afterMemory = 0L;",
      "right" : "afterMemory = 0L;",
      "info" : "ExpressionStatement[64380-64397]:ExpressionStatement[63160-63177]"
    }, {
      "left" : "beforeAddTime = 0L;",
      "right" : "beforeAddTime = 0L;",
      "info" : "ExpressionStatement[64410-64429]:ExpressionStatement[53474-53493]"
    }, {
      "left" : "afterAddTime = 0L;",
      "right" : "afterAddTime = 0L;",
      "info" : "ExpressionStatement[64442-64460]:ExpressionStatement[53506-53524]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[64473-64541]:IfStatement[63265-63333]"
    }, {
      "left" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[64490-64541]:ExpressionStatement[63282-63333]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[64554-64603]:IfStatement[53618-53667]"
    }, {
      "left" : "beforeAddTime = System.nanoTime();",
      "right" : "beforeAddTime = System.nanoTime();",
      "info" : "ExpressionStatement[64569-64603]:ExpressionStatement[53633-53667]"
    }, {
      "left" : "int i = 0",
      "right" : "int i = 0",
      "info" : "VariableDeclarationExpression[64621-64630]:VariableDeclarationExpression[62068-62077]"
    }, {
      "left" : "Integer item = unsorted[i];",
      "right" : "K[] kSorted = (K[]) Array.newInstance(keyType, _sorted.length);",
      "info" : "VariableDeclarationStatement[64676-64703]:VariableDeclarationStatement[52091-52154]"
    }, {
      "left" : "item",
      "right" : "kSorted",
      "info" : "SimpleName[64684-64688]:SimpleName[52095-52102]"
    }, {
      "left" : "K k = null;",
      "right" : "V[] vUnsorted = (V[]) Array.newInstance(valueType, _unsorted.length);",
      "info" : "VariableDeclarationStatement[64720-64731]:VariableDeclarationStatement[52163-52232]"
    }, {
      "left" : "k",
      "right" : "vUnsorted",
      "info" : "SimpleName[64722-64723]:SimpleName[52167-52176]"
    }, {
      "left" : "V v = null;",
      "right" : "V[] vSorted = (V[]) Array.newInstance(valueType, _sorted.length);",
      "info" : "VariableDeclarationStatement[64748-64759]:VariableDeclarationStatement[52241-52306]"
    }, {
      "left" : "v",
      "right" : "vSorted",
      "info" : "SimpleName[64750-64751]:SimpleName[52245-52252]"
    }, {
      "left" : "k = (K)Utils.parseT(item, keyType)",
      "right" : "kUnsorted[i] = Utils.parseT(_unsorted[i], keyType)",
      "info" : "Assignment[64843-64877]:Assignment[52366-52416]"
    }, {
      "left" : "Utils",
      "right" : "Utils",
      "info" : "METHOD_INVOCATION_RECEIVER[64850-64855]:METHOD_INVOCATION_RECEIVER[52381-52386]"
    }, {
      "left" : "keyType",
      "right" : "keyType",
      "info" : "SimpleName[64869-64876]:SimpleName[52408-52415]"
    }, {
      "left" : "v = (V)Utils.parseT(item, String.class)",
      "right" : "kSorted[i] = Utils.parseT(_sorted[i], keyType)",
      "info" : "Assignment[64899-64938]:Assignment[52475-52521]"
    }, {
      "left" : "Utils",
      "right" : "Utils",
      "info" : "METHOD_INVOCATION_RECEIVER[64906-64911]:METHOD_INVOCATION_RECEIVER[52488-52493]"
    }, {
      "left" : "k = (K)Utils.parseT(item, keyType)",
      "right" : "vUnsorted[i] = Utils.parseT(_unsorted[i], valueType)",
      "info" : "Assignment[65029-65063]:Assignment[52582-52634]"
    }, {
      "left" : "Utils",
      "right" : "Utils",
      "info" : "METHOD_INVOCATION_RECEIVER[65036-65041]:METHOD_INVOCATION_RECEIVER[52597-52602]"
    }, {
      "left" : "keyType",
      "right" : "valueType",
      "info" : "SimpleName[65055-65062]:SimpleName[52624-52633]"
    }, {
      "left" : "v = (V)Utils.parseT(item, Integer.class)",
      "right" : "vSorted[i] = Utils.parseT(_sorted[i], valueType)",
      "info" : "Assignment[65085-65125]:Assignment[52693-52741]"
    }, {
      "left" : "Utils",
      "right" : "Utils",
      "info" : "METHOD_INVOCATION_RECEIVER[65092-65097]:METHOD_INVOCATION_RECEIVER[52706-52711]"
    }, {
      "left" : "map.put(k, v);",
      "right" : "map.put(k, v);",
      "info" : "ExpressionStatement[65161-65175]:ExpressionStatement[63541-63555]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[65202-65456]:IfStatement[53854-54108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65217-65456]:Block[53869-54108]"
    }, {
      "left" : "afterAddTime = System.nanoTime();",
      "right" : "afterAddTime = System.nanoTime();",
      "info" : "ExpressionStatement[65235-65268]:ExpressionStatement[53887-53920]"
    }, {
      "left" : "addTime += afterAddTime - beforeAddTime;",
      "right" : "addTime += afterAddTime - beforeAddTime;",
      "info" : "ExpressionStatement[65285-65325]:ExpressionStatement[53937-53977]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[65342-65442]:IfStatement[53994-54094]"
    }, {
      "left" : "System.out.println(name+\" unsorted add time = \" + (addTime / unsortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted add time = \" + (addTime / unsortedCount) + \" ns\");",
      "info" : "ExpressionStatement[65357-65442]:ExpressionStatement[54009-54094]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[65469-65757]:IfStatement[54121-54409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65486-65757]:Block[54138-54409]"
    }, {
      "left" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[65504-65554]:ExpressionStatement[54156-54206]"
    }, {
      "left" : "memory += afterMemory - beforeMemory;",
      "right" : "memory += afterMemory - beforeMemory;",
      "info" : "ExpressionStatement[65571-65608]:ExpressionStatement[54223-54260]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[65625-65743]:IfStatement[54277-54395]"
    }, {
      "left" : "System.out.println(name+\" unsorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "right" : "System.out.println(name+\" unsorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "info" : "ExpressionStatement[65640-65743]:ExpressionStatement[54292-54395]"
    }, {
      "left" : "K invalidKey = (K) Utils.parseT(INVALID, keyType);",
      "right" : "K invalidKey = (K) Utils.parseT(INVALID, keyType);",
      "info" : "VariableDeclarationStatement[65771-65821]:VariableDeclarationStatement[64175-64225]"
    }, {
      "left" : "boolean contains = map.containsKey(invalidKey);",
      "right" : "boolean contains = map.containsKey(invalidKey);",
      "info" : "VariableDeclarationStatement[65834-65881]:VariableDeclarationStatement[64238-64285]"
    }, {
      "left" : "V removed = map.remove(invalidKey);",
      "right" : "V removed = map.remove(invalidKey);",
      "info" : "VariableDeclarationStatement[65894-65929]:VariableDeclarationStatement[64298-64333]"
    }, {
      "left" : "if (contains || (removed!=null))",
      "right" : "if (contains || (removed!=null))",
      "info" : "IfStatement[65942-66137]:IfStatement[54594-54789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65975-66137]:Block[54627-54789]"
    }, {
      "left" : "System.err.println(name+\" unsorted invalidity check. contains=\" + contains + \" removed=\" + removed);",
      "right" : "System.err.println(name+\" unsorted invalidity check. contains=\" + contains + \" removed=\" + removed);",
      "info" : "ExpressionStatement[65993-66093]:ExpressionStatement[54645-54745]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[66110-66123]:ReturnStatement[54762-54775]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[66151-66201]:IfStatement[64553-64603]"
    }, {
      "left" : "System.out.println(map.toString());",
      "right" : "System.out.println(map.toString());",
      "info" : "ExpressionStatement[66166-66201]:ExpressionStatement[64568-64603]"
    }, {
      "left" : "beforeLookupTime = 0L;",
      "right" : "beforeLookupTime = 0L;",
      "info" : "ExpressionStatement[66215-66237]:ExpressionStatement[64617-64639]"
    }, {
      "left" : "afterLookupTime = 0L;",
      "right" : "afterLookupTime = 0L;",
      "info" : "ExpressionStatement[66250-66271]:ExpressionStatement[64652-64673]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[66284-66336]:IfStatement[64686-64738]"
    }, {
      "left" : "beforeLookupTime = System.nanoTime();",
      "right" : "beforeLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[66299-66336]:ExpressionStatement[64701-64738]"
    }, {
      "left" : "for (Integer item : unsorted)",
      "right" : "for (K k : kUnsorted)",
      "info" : "EnhancedForStatement[66349-66485]:EnhancedForStatement[55001-55074]"
    }, {
      "left" : "Integer",
      "right" : "K",
      "info" : "SimpleName[66354-66361]:SimpleName[55006-55007]"
    }, {
      "left" : "item",
      "right" : "k",
      "info" : "SimpleName[66362-66366]:SimpleName[55008-55009]"
    }, {
      "left" : "unsorted",
      "right" : "kUnsorted",
      "info" : "SimpleName[66369-66377]:SimpleName[55012-55021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66379-66485]:Block[55023-55074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66379-66485]:Block[64771-64822]"
    }, {
      "left" : "map.containsKey(k);",
      "right" : "map.containsKey(k);",
      "info" : "ExpressionStatement[66452-66471]:ExpressionStatement[64789-64808]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[66498-66784]:IfStatement[55087-55373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66513-66784]:Block[55102-55373]"
    }, {
      "left" : "afterLookupTime = System.nanoTime();",
      "right" : "afterLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[66531-66567]:ExpressionStatement[55120-55156]"
    }, {
      "left" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "right" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "info" : "ExpressionStatement[66584-66633]:ExpressionStatement[55173-55222]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[66650-66770]:IfStatement[55239-55359]"
    }, {
      "left" : "System.out.println(name+\" unsorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "info" : "ExpressionStatement[66665-66770]:ExpressionStatement[55254-55359]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[66798-66850]:IfStatement[55387-55439]"
    }, {
      "left" : "beforeRemoveTime = System.nanoTime();",
      "right" : "beforeRemoveTime = System.nanoTime();",
      "info" : "ExpressionStatement[66813-66850]:ExpressionStatement[55402-55439]"
    }, {
      "left" : "for (int i = 0; i < unsorted.length; i++)",
      "right" : "for (int i = kSorted.length - 1; i >= 0; i--)",
      "info" : "ForStatement[66863-67261]:ForStatement[65285-65605]"
    }, {
      "left" : "int i = 0",
      "right" : "int i = 0",
      "info" : "VariableDeclarationExpression[66868-66877]:VariableDeclarationExpression[63419-63428]"
    }, {
      "left" : "<",
      "right" : ">=",
      "info" : "INFIX_EXPRESSION_OPERATOR[66881-66882]:INFIX_EXPRESSION_OPERATOR[65320-65322]"
    }, {
      "left" : "++",
      "right" : "--",
      "info" : "POSTFIX_EXPRESSION_OPERATOR[66901-66903]:POSTFIX_EXPRESSION_OPERATOR[65327-65329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66905-67261]:Block[65331-65605]"
    }, {
      "left" : "Integer",
      "right" : "K",
      "info" : "SimpleName[66923-66930]:SimpleName[65349-65350]"
    }, {
      "left" : "Integer item = unsorted[i];",
      "right" : "K k = kSorted[i];",
      "info" : "VariableDeclarationStatement[66923-66950]:VariableDeclarationStatement[65349-65366]"
    }, {
      "left" : "item",
      "right" : "k",
      "info" : "SimpleName[66931-66935]:SimpleName[65351-65352]"
    }, {
      "left" : "unsorted",
      "right" : "kSorted",
      "info" : "SimpleName[66938-66946]:SimpleName[65355-65362]"
    }, {
      "left" : "removed = map.remove(k);",
      "right" : "removed = map.remove(k);",
      "info" : "ExpressionStatement[67022-67046]:ExpressionStatement[65383-65407]"
    }, {
      "left" : "if (removed==null)",
      "right" : "if (removed==null)",
      "info" : "IfStatement[67063-67230]:IfStatement[65424-65591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67082-67230]:Block[65443-65591]"
    }, {
      "left" : "System.err.println(name+\" unsorted invalidity check. removed=\" + removed);",
      "right" : "System.err.println(name+\" unsorted invalidity check. removed=\" + removed);",
      "info" : "ExpressionStatement[67104-67178]:ExpressionStatement[65465-65539]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[67199-67212]:ReturnStatement[65560-65573]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[67274-67546]:IfStatement[55801-56073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67289-67546]:Block[55816-56073]"
    }, {
      "left" : "afterRemoveTime = System.nanoTime();",
      "right" : "afterRemoveTime = System.nanoTime();",
      "info" : "ExpressionStatement[67307-67343]:ExpressionStatement[55834-55870]"
    }, {
      "left" : "removeTime += afterRemoveTime - beforeRemoveTime;",
      "right" : "removeTime += afterRemoveTime - beforeRemoveTime;",
      "info" : "ExpressionStatement[67360-67409]:ExpressionStatement[55887-55936]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[67426-67532]:IfStatement[55953-56059]"
    }, {
      "left" : "System.out.println(name+\" unsorted remove time = \" + (removeTime / unsortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted remove time = \" + (removeTime / unsortedCount) + \" ns\");",
      "info" : "ExpressionStatement[67441-67532]:ExpressionStatement[55968-56059]"
    }, {
      "left" : "if (!map.isEmpty())",
      "right" : "if (!map.isEmpty())",
      "info" : "IfStatement[67560-67731]:IfStatement[59245-59422]"
    }, {
      "left" : "!map.isEmpty()",
      "right" : "!map.isEmpty()",
      "info" : "PrefixExpression[67564-67578]:PrefixExpression[65934-65948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67580-67731]:Block[59265-59422]"
    }, {
      "left" : "System.err.println(name+\" unsorted isEmpty() failed.\");",
      "right" : "System.err.println(name+\" unsorted isEmpty() failed.\");",
      "info" : "ExpressionStatement[67598-67653]:ExpressionStatement[59283-59338]"
    }, {
      "left" : "handleError(map);",
      "right" : "handleError(input,map);",
      "info" : "ExpressionStatement[67670-67687]:ExpressionStatement[59355-59378]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "SimpleName[67682-67685]:SimpleName[59373-59376]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[67704-67717]:ReturnStatement[59395-59408]"
    }, {
      "left" : "if (map.size()!=0)",
      "right" : "if (map.size()!=0)",
      "info" : "IfStatement[67744-67911]:IfStatement[59435-59608]"
    }, {
      "left" : "map.size()!=0",
      "right" : "map.size()!=0",
      "info" : "InfixExpression[67748-67761]:InfixExpression[66122-66135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67763-67911]:Block[59454-59608]"
    }, {
      "left" : "System.err.println(name+\" unsorted size() failed.\");",
      "right" : "System.err.println(name+\" unsorted size() failed.\");",
      "info" : "ExpressionStatement[67781-67833]:ExpressionStatement[59472-59524]"
    }, {
      "left" : "handleError(map);",
      "right" : "handleError(input,map);",
      "info" : "ExpressionStatement[67850-67867]:ExpressionStatement[59541-59564]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "SimpleName[67862-67865]:SimpleName[59559-59562]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[67884-67897]:ReturnStatement[59581-59594]"
    }, {
      "left" : "unsortedCount++;",
      "right" : "unsortedCount++;",
      "info" : "ExpressionStatement[67931-67947]:ExpressionStatement[53374-53390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67956-71604]:Block[56495-59618]"
    }, {
      "left" : "beforeMemory = 0L;",
      "right" : "beforeMemory = 0L;",
      "info" : "ExpressionStatement[67970-67988]:ExpressionStatement[56509-56527]"
    }, {
      "left" : "afterMemory = 0L;",
      "right" : "afterMemory = 0L;",
      "info" : "ExpressionStatement[68001-68018]:ExpressionStatement[56540-56557]"
    }, {
      "left" : "beforeAddTime = 0L;",
      "right" : "beforeAddTime = 0L;",
      "info" : "ExpressionStatement[68031-68050]:ExpressionStatement[56570-56589]"
    }, {
      "left" : "afterAddTime = 0L;",
      "right" : "afterAddTime = 0L;",
      "info" : "ExpressionStatement[68063-68081]:ExpressionStatement[56602-56620]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[68094-68162]:IfStatement[56633-56701]"
    }, {
      "left" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[68111-68162]:ExpressionStatement[56650-56701]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[68175-68224]:IfStatement[56714-56763]"
    }, {
      "left" : "beforeAddTime = System.nanoTime();",
      "right" : "beforeAddTime = System.nanoTime();",
      "info" : "ExpressionStatement[68190-68224]:ExpressionStatement[56729-56763]"
    }, {
      "left" : "int i = unsorted.length - 1",
      "right" : "int i = kUnsorted.length - 1",
      "info" : "VariableDeclarationExpression[68242-68269]:VariableDeclarationExpression[56781-56809]"
    }, {
      "left" : "unsorted.length",
      "right" : "kUnsorted.length",
      "info" : "QualifiedName[68250-68265]:QualifiedName[56789-56805]"
    }, {
      "left" : "i >= 0",
      "right" : "i >= 0",
      "info" : "InfixExpression[68271-68277]:InfixExpression[56811-56817]"
    }, {
      "left" : "i--",
      "right" : "i--",
      "info" : "PostfixExpression[68279-68282]:PostfixExpression[56819-56822]"
    }, {
      "left" : "Integer",
      "right" : "K",
      "info" : "SimpleName[68302-68309]:SimpleName[56842-56843]"
    }, {
      "left" : "Integer item = unsorted[i];",
      "right" : "K k = kUnsorted[i];",
      "info" : "VariableDeclarationStatement[68302-68329]:VariableDeclarationStatement[56842-56861]"
    }, {
      "left" : "item",
      "right" : "k",
      "info" : "SimpleName[68310-68314]:SimpleName[56844-56845]"
    }, {
      "left" : "unsorted",
      "right" : "kUnsorted",
      "info" : "SimpleName[68317-68325]:SimpleName[56848-56857]"
    }, {
      "left" : "V v = null;",
      "right" : "V v = vUnsorted[i];",
      "info" : "VariableDeclarationStatement[68374-68385]:VariableDeclarationStatement[56878-56897]"
    }, {
      "left" : "map.put(k, v);",
      "right" : "map.put(k, v);",
      "info" : "ExpressionStatement[68787-68801]:ExpressionStatement[60319-60333]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[68828-69082]:IfStatement[56955-57209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68843-69082]:Block[56970-57209]"
    }, {
      "left" : "afterAddTime = System.nanoTime();",
      "right" : "afterAddTime = System.nanoTime();",
      "info" : "ExpressionStatement[68861-68894]:ExpressionStatement[56988-57021]"
    }, {
      "left" : "addTime += afterAddTime - beforeAddTime;",
      "right" : "addTime += afterAddTime - beforeAddTime;",
      "info" : "ExpressionStatement[68911-68951]:ExpressionStatement[57038-57078]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[68968-69068]:IfStatement[57095-57195]"
    }, {
      "left" : "System.out.println(name+\" unsorted add time = \" + (addTime / unsortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted add time = \" + (addTime / unsortedCount) + \" ns\");",
      "info" : "ExpressionStatement[68983-69068]:ExpressionStatement[57110-57195]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[69095-69383]:IfStatement[57222-57510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69112-69383]:Block[57239-57510]"
    }, {
      "left" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[69130-69180]:ExpressionStatement[57257-57307]"
    }, {
      "left" : "memory += afterMemory - beforeMemory;",
      "right" : "memory += afterMemory - beforeMemory;",
      "info" : "ExpressionStatement[69197-69234]:ExpressionStatement[57324-57361]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[69251-69369]:IfStatement[57378-57496]"
    }, {
      "left" : "System.out.println(name+\" unsorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "right" : "System.out.println(name+\" unsorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "info" : "ExpressionStatement[69266-69369]:ExpressionStatement[57393-57496]"
    }, {
      "left" : "K invalidKey = (K) Utils.parseT(INVALID, keyType);",
      "right" : "K invalidKey = (K) Utils.parseT(INVALID, keyType);",
      "info" : "VariableDeclarationStatement[69397-69447]:VariableDeclarationStatement[57524-57574]"
    }, {
      "left" : "boolean contains = map.containsKey(invalidKey);",
      "right" : "boolean contains = map.containsKey(invalidKey);",
      "info" : "VariableDeclarationStatement[69460-69507]:VariableDeclarationStatement[57587-57634]"
    }, {
      "left" : "V removed = map.remove(invalidKey);",
      "right" : "V removed = map.remove(invalidKey);",
      "info" : "VariableDeclarationStatement[69520-69555]:VariableDeclarationStatement[57647-57682]"
    }, {
      "left" : "if (contains || (removed!=null))",
      "right" : "if (contains || (removed!=null))",
      "info" : "IfStatement[69568-69763]:IfStatement[57695-57890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69601-69763]:Block[57728-57890]"
    }, {
      "left" : "System.err.println(name+\" unsorted invalidity check. contains=\" + contains + \" removed=\" + removed);",
      "right" : "System.err.println(name+\" unsorted invalidity check. contains=\" + contains + \" removed=\" + removed);",
      "info" : "ExpressionStatement[69619-69719]:ExpressionStatement[57746-57846]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[69736-69749]:ReturnStatement[57863-57876]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[69777-69827]:IfStatement[57904-57954]"
    }, {
      "left" : "System.out.println(map.toString());",
      "right" : "System.out.println(map.toString());",
      "info" : "ExpressionStatement[69792-69827]:ExpressionStatement[57919-57954]"
    }, {
      "left" : "beforeLookupTime = 0L;",
      "right" : "beforeLookupTime = 0L;",
      "info" : "ExpressionStatement[69841-69863]:ExpressionStatement[57968-57990]"
    }, {
      "left" : "afterLookupTime = 0L;",
      "right" : "afterLookupTime = 0L;",
      "info" : "ExpressionStatement[69876-69897]:ExpressionStatement[58003-58024]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[69910-69962]:IfStatement[58037-58089]"
    }, {
      "left" : "beforeLookupTime = System.nanoTime();",
      "right" : "beforeLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[69925-69962]:ExpressionStatement[58052-58089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70005-70111]:Block[61549-61600]"
    }, {
      "left" : "map.containsKey(k);",
      "right" : "map.containsKey(k);",
      "info" : "ExpressionStatement[70078-70097]:ExpressionStatement[61567-61586]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[70124-70410]:IfStatement[58188-58474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70139-70410]:Block[58203-58474]"
    }, {
      "left" : "afterLookupTime = System.nanoTime();",
      "right" : "afterLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[70157-70193]:ExpressionStatement[58221-58257]"
    }, {
      "left" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "right" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "info" : "ExpressionStatement[70210-70259]:ExpressionStatement[58274-58323]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[70276-70396]:IfStatement[58340-58460]"
    }, {
      "left" : "System.out.println(name+\" unsorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "info" : "ExpressionStatement[70291-70396]:ExpressionStatement[58355-58460]"
    }, {
      "left" : "beforeRemoveTime = 0L;",
      "right" : "beforeRemoveTime = 0L;",
      "info" : "ExpressionStatement[70424-70446]:ExpressionStatement[58488-58510]"
    }, {
      "left" : "afterRemoveTime = 0L;",
      "right" : "afterRemoveTime = 0L;",
      "info" : "ExpressionStatement[70459-70480]:ExpressionStatement[58523-58544]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[70493-70545]:IfStatement[58557-58609]"
    }, {
      "left" : "beforeRemoveTime = System.nanoTime();",
      "right" : "beforeRemoveTime = System.nanoTime();",
      "info" : "ExpressionStatement[70508-70545]:ExpressionStatement[58572-58609]"
    }, {
      "left" : "for (int i = unsorted.length - 1; i >= 0; i--)",
      "right" : "for (int i = 0; i < kSorted.length; i++)",
      "info" : "ForStatement[70558-70944]:ForStatement[62063-62378]"
    }, {
      "left" : ">=",
      "right" : "<",
      "info" : "INFIX_EXPRESSION_OPERATOR[70594-70596]:INFIX_EXPRESSION_OPERATOR[62081-62082]"
    }, {
      "left" : "--",
      "right" : "++",
      "info" : "POSTFIX_EXPRESSION_OPERATOR[70601-70603]:POSTFIX_EXPRESSION_OPERATOR[62100-62102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70605-70944]:Block[62104-62378]"
    }, {
      "left" : "Integer",
      "right" : "K",
      "info" : "SimpleName[70623-70630]:SimpleName[62122-62123]"
    }, {
      "left" : "Integer item = unsorted[i];",
      "right" : "K k = kSorted[i];",
      "info" : "VariableDeclarationStatement[70623-70650]:VariableDeclarationStatement[62122-62139]"
    }, {
      "left" : "item",
      "right" : "k",
      "info" : "SimpleName[70631-70635]:SimpleName[62124-62125]"
    }, {
      "left" : "unsorted",
      "right" : "kSorted",
      "info" : "SimpleName[70638-70646]:SimpleName[62128-62135]"
    }, {
      "left" : "removed = map.remove(k);",
      "right" : "removed = map.remove(k);",
      "info" : "ExpressionStatement[70722-70746]:ExpressionStatement[62156-62180]"
    }, {
      "left" : "if (removed==null)",
      "right" : "if (removed==null)",
      "info" : "IfStatement[70763-70930]:IfStatement[62197-62364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70782-70930]:Block[62216-62364]"
    }, {
      "left" : "System.err.println(name+\" unsorted invalidity check. removed=\" + removed);",
      "right" : "System.err.println(name+\" unsorted invalidity check. removed=\" + removed);",
      "info" : "ExpressionStatement[70804-70878]:ExpressionStatement[62238-62312]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[70899-70912]:ReturnStatement[62333-62346]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[70957-71229]:IfStatement[58959-59231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70972-71229]:Block[58974-59231]"
    }, {
      "left" : "afterRemoveTime = System.nanoTime();",
      "right" : "afterRemoveTime = System.nanoTime();",
      "info" : "ExpressionStatement[70990-71026]:ExpressionStatement[58992-59028]"
    }, {
      "left" : "removeTime += afterRemoveTime - beforeRemoveTime;",
      "right" : "removeTime += afterRemoveTime - beforeRemoveTime;",
      "info" : "ExpressionStatement[71043-71092]:ExpressionStatement[59045-59094]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[71109-71215]:IfStatement[59111-59217]"
    }, {
      "left" : "System.out.println(name+\" unsorted remove time = \" + (removeTime / unsortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted remove time = \" + (removeTime / unsortedCount) + \" ns\");",
      "info" : "ExpressionStatement[71124-71215]:ExpressionStatement[59126-59217]"
    }, {
      "left" : "if (!map.isEmpty())",
      "right" : "if (!map.isEmpty())",
      "info" : "IfStatement[71243-71414]:IfStatement[56087-56264]"
    }, {
      "left" : "!map.isEmpty()",
      "right" : "!map.isEmpty()",
      "info" : "PrefixExpression[71247-71261]:PrefixExpression[62707-62721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71263-71414]:Block[56107-56264]"
    }, {
      "left" : "System.err.println(name+\" unsorted isEmpty() failed.\");",
      "right" : "System.err.println(name+\" unsorted isEmpty() failed.\");",
      "info" : "ExpressionStatement[71281-71336]:ExpressionStatement[56125-56180]"
    }, {
      "left" : "handleError(map);",
      "right" : "handleError(input,map);",
      "info" : "ExpressionStatement[71353-71370]:ExpressionStatement[56197-56220]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "SimpleName[71365-71368]:SimpleName[56215-56218]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[71387-71400]:ReturnStatement[56237-56250]"
    }, {
      "left" : "if (map.size()!=0)",
      "right" : "if (map.size()!=0)",
      "info" : "IfStatement[71427-71594]:IfStatement[56277-56450]"
    }, {
      "left" : "map.size()!=0",
      "right" : "map.size()!=0",
      "info" : "InfixExpression[71431-71444]:InfixExpression[62895-62908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71446-71594]:Block[56296-56450]"
    }, {
      "left" : "System.err.println(name+\" unsorted size() failed.\");",
      "right" : "System.err.println(name+\" unsorted size() failed.\");",
      "info" : "ExpressionStatement[71464-71516]:ExpressionStatement[56314-56366]"
    }, {
      "left" : "handleError(map);",
      "right" : "handleError(input,map);",
      "info" : "ExpressionStatement[71533-71550]:ExpressionStatement[56383-56406]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "SimpleName[71545-71548]:SimpleName[56401-56404]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[71567-71580]:ReturnStatement[56423-56436]"
    }, {
      "left" : "long addSortedTime = 0L;",
      "right" : "long addSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[71614-71638]:VariableDeclarationStatement[59628-59652]"
    }, {
      "left" : "long removeSortedTime = 0L;",
      "right" : "long removeSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[71647-71674]:VariableDeclarationStatement[59661-59688]"
    }, {
      "left" : "long beforeAddSortedTime = 0L;",
      "right" : "long beforeAddSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[71684-71714]:VariableDeclarationStatement[59698-59728]"
    }, {
      "left" : "long afterAddSortedTime = 0L;",
      "right" : "long afterAddSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[71723-71752]:VariableDeclarationStatement[59737-59766]"
    }, {
      "left" : "long beforeRemoveSortedTime = 0L;",
      "right" : "long beforeRemoveSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[71762-71795]:VariableDeclarationStatement[59776-59809]"
    }, {
      "left" : "long afterRemoveSortedTime = 0L;",
      "right" : "long afterRemoveSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[71804-71836]:VariableDeclarationStatement[59818-59850]"
    }, {
      "left" : "sortedCount++;",
      "right" : "sortedCount++;",
      "info" : "ExpressionStatement[71846-71860]:ExpressionStatement[63082-63096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71869-75585]:Block[63105-66300]"
    }, {
      "left" : "beforeMemory = 0L;",
      "right" : "beforeMemory = 0L;",
      "info" : "ExpressionStatement[71893-71911]:ExpressionStatement[59907-59925]"
    }, {
      "left" : "afterMemory = 0L;",
      "right" : "afterMemory = 0L;",
      "info" : "ExpressionStatement[71924-71941]:ExpressionStatement[59938-59955]"
    }, {
      "left" : "beforeAddSortedTime = 0L;",
      "right" : "beforeAddSortedTime = 0L;",
      "info" : "ExpressionStatement[71954-71979]:ExpressionStatement[63190-63215]"
    }, {
      "left" : "afterAddSortedTime = 0L;",
      "right" : "afterAddSortedTime = 0L;",
      "info" : "ExpressionStatement[71992-72016]:ExpressionStatement[63228-63252]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[72029-72097]:IfStatement[60043-60111]"
    }, {
      "left" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[72046-72097]:ExpressionStatement[60060-60111]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[72110-72165]:IfStatement[63346-63401]"
    }, {
      "left" : "beforeAddSortedTime = System.nanoTime();",
      "right" : "beforeAddSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[72125-72165]:ExpressionStatement[63361-63401]"
    }, {
      "left" : "for (int i = 0; i < sorted.length; i++)",
      "right" : "for (int i = 0; i < kSorted.length; i++)",
      "info" : "ForStatement[72178-72747]:ForStatement[63414-63569]"
    }, {
      "left" : "int i = 0",
      "right" : "int i = 0",
      "info" : "VariableDeclarationExpression[72183-72192]:VariableDeclarationExpression[60197-60206]"
    }, {
      "left" : "sorted.length",
      "right" : "kSorted.length",
      "info" : "QualifiedName[72198-72211]:QualifiedName[63434-63448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72218-72747]:Block[63455-63569]"
    }, {
      "left" : "Integer",
      "right" : "K",
      "info" : "SimpleName[72236-72243]:SimpleName[63473-63474]"
    }, {
      "left" : "Integer item = sorted[i];",
      "right" : "K k = kSorted[i];",
      "info" : "VariableDeclarationStatement[72236-72261]:VariableDeclarationStatement[63473-63490]"
    }, {
      "left" : "item",
      "right" : "k",
      "info" : "SimpleName[72244-72248]:SimpleName[63475-63476]"
    }, {
      "left" : "sorted",
      "right" : "kSorted",
      "info" : "SimpleName[72251-72257]:SimpleName[63479-63486]"
    }, {
      "left" : "V v = null;",
      "right" : "V v = vSorted[i];",
      "info" : "VariableDeclarationStatement[72306-72317]:VariableDeclarationStatement[63507-63524]"
    }, {
      "left" : "map.put(k, v);",
      "right" : "map.put(k, v);",
      "info" : "ExpressionStatement[72719-72733]:ExpressionStatement[56914-56928]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[72760-73040]:IfStatement[63582-63862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72775-73040]:Block[63597-63862]"
    }, {
      "left" : "afterAddSortedTime = System.nanoTime();",
      "right" : "afterAddSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[72793-72832]:ExpressionStatement[63615-63654]"
    }, {
      "left" : "addSortedTime += afterAddSortedTime - beforeAddSortedTime;",
      "right" : "addSortedTime += afterAddSortedTime - beforeAddSortedTime;",
      "info" : "ExpressionStatement[72849-72907]:ExpressionStatement[63671-63729]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[72924-73026]:IfStatement[63746-63848]"
    }, {
      "left" : "System.out.println(name+\" sorted add time = \" + (addSortedTime / sortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" sorted add time = \" + (addSortedTime / sortedCount) + \" ns\");",
      "info" : "ExpressionStatement[72939-73026]:ExpressionStatement[63761-63848]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[73053-73339]:IfStatement[63875-64161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73070-73339]:Block[63892-64161]"
    }, {
      "left" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[73088-73138]:ExpressionStatement[63910-63960]"
    }, {
      "left" : "memory += afterMemory - beforeMemory;",
      "right" : "memory += afterMemory - beforeMemory;",
      "info" : "ExpressionStatement[73155-73192]:ExpressionStatement[63977-64014]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[73209-73325]:IfStatement[64031-64147]"
    }, {
      "left" : "System.out.println(name+\" sorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "right" : "System.out.println(name+\" sorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "info" : "ExpressionStatement[73224-73325]:ExpressionStatement[64046-64147]"
    }, {
      "left" : "K invalidKey = (K) Utils.parseT(INVALID, keyType);",
      "right" : "K invalidKey = (K) Utils.parseT(INVALID, keyType);",
      "info" : "VariableDeclarationStatement[73353-73403]:VariableDeclarationStatement[60953-61003]"
    }, {
      "left" : "boolean contains = map.containsKey(invalidKey);",
      "right" : "boolean contains = map.containsKey(invalidKey);",
      "info" : "VariableDeclarationStatement[73416-73463]:VariableDeclarationStatement[61016-61063]"
    }, {
      "left" : "V removed = map.remove(invalidKey);",
      "right" : "V removed = map.remove(invalidKey);",
      "info" : "VariableDeclarationStatement[73476-73511]:VariableDeclarationStatement[61076-61111]"
    }, {
      "left" : "if (contains || (removed!=null))",
      "right" : "if (contains || (removed!=null))",
      "info" : "IfStatement[73524-73717]:IfStatement[64346-64539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73557-73717]:Block[64379-64539]"
    }, {
      "left" : "System.err.println(name+\" sorted invalidity check. contains=\" + contains + \" removed=\" + removed);",
      "right" : "System.err.println(name+\" sorted invalidity check. contains=\" + contains + \" removed=\" + removed);",
      "info" : "ExpressionStatement[73575-73673]:ExpressionStatement[64397-64495]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[73690-73703]:ReturnStatement[64512-64525]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[73731-73781]:IfStatement[61331-61381]"
    }, {
      "left" : "System.out.println(map.toString());",
      "right" : "System.out.println(map.toString());",
      "info" : "ExpressionStatement[73746-73781]:ExpressionStatement[61346-61381]"
    }, {
      "left" : "beforeLookupTime = 0L;",
      "right" : "beforeLookupTime = 0L;",
      "info" : "ExpressionStatement[73795-73817]:ExpressionStatement[61395-61417]"
    }, {
      "left" : "afterLookupTime = 0L;",
      "right" : "afterLookupTime = 0L;",
      "info" : "ExpressionStatement[73830-73851]:ExpressionStatement[61430-61451]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[73864-73916]:IfStatement[61464-61516]"
    }, {
      "left" : "beforeLookupTime = System.nanoTime();",
      "right" : "beforeLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[73879-73916]:ExpressionStatement[61479-61516]"
    }, {
      "left" : "for (Integer item : sorted)",
      "right" : "for (K k : kSorted)",
      "info" : "EnhancedForStatement[73929-74063]:EnhancedForStatement[64751-64822]"
    }, {
      "left" : "Integer",
      "right" : "K",
      "info" : "SimpleName[73934-73941]:SimpleName[64756-64757]"
    }, {
      "left" : "item",
      "right" : "k",
      "info" : "SimpleName[73942-73946]:SimpleName[64758-64759]"
    }, {
      "left" : "sorted",
      "right" : "kSorted",
      "info" : "SimpleName[73949-73955]:SimpleName[64762-64769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73957-74063]:Block[64771-64822]"
    }, {
      "left" : "map.containsKey(k);",
      "right" : "map.containsKey(k);",
      "info" : "ExpressionStatement[74030-74049]:ExpressionStatement[58142-58161]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[74076-74360]:IfStatement[64835-65119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74091-74360]:Block[64850-65119]"
    }, {
      "left" : "afterLookupTime = System.nanoTime();",
      "right" : "afterLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[74109-74145]:ExpressionStatement[64868-64904]"
    }, {
      "left" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "right" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "info" : "ExpressionStatement[74162-74211]:ExpressionStatement[64921-64970]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[74228-74346]:IfStatement[64987-65105]"
    }, {
      "left" : "System.out.println(name+\" sorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "right" : "System.out.println(name+\" sorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "info" : "ExpressionStatement[74243-74346]:ExpressionStatement[65002-65105]"
    }, {
      "left" : "beforeRemoveSortedTime = 0L;",
      "right" : "beforeRemoveSortedTime = 0L;",
      "info" : "ExpressionStatement[74374-74402]:ExpressionStatement[65133-65161]"
    }, {
      "left" : "afterRemoveSortedTime = 0L;",
      "right" : "afterRemoveSortedTime = 0L;",
      "info" : "ExpressionStatement[74415-74442]:ExpressionStatement[65174-65201]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[74455-74513]:IfStatement[65214-65272]"
    }, {
      "left" : "beforeRemoveSortedTime = System.nanoTime();",
      "right" : "beforeRemoveSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[74470-74513]:ExpressionStatement[65229-65272]"
    }, {
      "left" : "int i = 0",
      "right" : "int i = 0",
      "info" : "VariableDeclarationExpression[74531-74540]:VariableDeclarationExpression[55457-55466]"
    }, {
      "left" : "removed = map.remove(k);",
      "right" : "removed = map.remove(k);",
      "info" : "ExpressionStatement[74681-74705]:ExpressionStatement[58724-58748]"
    }, {
      "left" : "if (removed==null)",
      "right" : "if (removed==null)",
      "info" : "IfStatement[74722-74889]:IfStatement[58765-58932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74741-74889]:Block[58784-58932]"
    }, {
      "left" : "System.err.println(name+\" unsorted invalidity check. removed=\" + removed);",
      "right" : "System.err.println(name+\" unsorted invalidity check. removed=\" + removed);",
      "info" : "ExpressionStatement[74763-74837]:ExpressionStatement[58806-58880]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[74858-74871]:ReturnStatement[58901-58914]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[74916-75214]:IfStatement[65618-65916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74931-75214]:Block[65633-65916]"
    }, {
      "left" : "afterRemoveSortedTime = System.nanoTime();",
      "right" : "afterRemoveSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[74949-74991]:ExpressionStatement[65651-65693]"
    }, {
      "left" : "removeSortedTime += afterRemoveSortedTime - beforeRemoveSortedTime;",
      "right" : "removeSortedTime += afterRemoveSortedTime - beforeRemoveSortedTime;",
      "info" : "ExpressionStatement[75008-75075]:ExpressionStatement[65710-65777]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[75092-75200]:IfStatement[65794-65902]"
    }, {
      "left" : "System.out.println(name+\" sorted remove time = \" + (removeSortedTime / sortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" sorted remove time = \" + (removeSortedTime / sortedCount) + \" ns\");",
      "info" : "ExpressionStatement[75107-75200]:ExpressionStatement[65809-65902]"
    }, {
      "left" : "if (!map.isEmpty())",
      "right" : "if (!map.isEmpty())",
      "info" : "IfStatement[75228-75397]:IfStatement[65930-66105]"
    }, {
      "left" : "!map.isEmpty()",
      "right" : "!map.isEmpty()",
      "info" : "PrefixExpression[75232-75246]:PrefixExpression[59249-59263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75248-75397]:Block[65950-66105]"
    }, {
      "left" : "System.err.println(name+\" sorted isEmpty() failed.\");",
      "right" : "System.err.println(name+\" sorted isEmpty() failed.\");",
      "info" : "ExpressionStatement[75266-75319]:ExpressionStatement[65968-66021]"
    }, {
      "left" : "handleError(map);",
      "right" : "handleError(input,map);",
      "info" : "ExpressionStatement[75336-75353]:ExpressionStatement[66038-66061]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "SimpleName[75348-75351]:SimpleName[66056-66059]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[75370-75383]:ReturnStatement[66078-66091]"
    }, {
      "left" : "if (map.size()!=0)",
      "right" : "if (map.size()!=0)",
      "info" : "IfStatement[75410-75575]:IfStatement[66118-66289]"
    }, {
      "left" : "map.size()!=0",
      "right" : "map.size()!=0",
      "info" : "InfixExpression[75414-75427]:InfixExpression[59439-59452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75429-75575]:Block[66137-66289]"
    }, {
      "left" : "System.err.println(name+\" sorted size() failed.\");",
      "right" : "System.err.println(name+\" sorted size() failed.\");",
      "info" : "ExpressionStatement[75447-75497]:ExpressionStatement[66155-66205]"
    }, {
      "left" : "handleError(map);",
      "right" : "handleError(input,map);",
      "info" : "ExpressionStatement[75514-75531]:ExpressionStatement[66222-66245]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "SimpleName[75526-75529]:SimpleName[66240-66243]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[75548-75561]:ReturnStatement[66262-66275]"
    }, {
      "left" : "sortedCount++;",
      "right" : "sortedCount++;",
      "info" : "ExpressionStatement[75595-75609]:ExpressionStatement[59860-59874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75618-79340]:Block[59883-63072]"
    }, {
      "left" : "beforeMemory = 0L;",
      "right" : "beforeMemory = 0L;",
      "info" : "ExpressionStatement[75642-75660]:ExpressionStatement[53413-53431]"
    }, {
      "left" : "afterMemory = 0L;",
      "right" : "afterMemory = 0L;",
      "info" : "ExpressionStatement[75673-75690]:ExpressionStatement[53444-53461]"
    }, {
      "left" : "beforeAddSortedTime = 0L;",
      "right" : "beforeAddSortedTime = 0L;",
      "info" : "ExpressionStatement[75703-75728]:ExpressionStatement[59968-59993]"
    }, {
      "left" : "afterAddSortedTime = 0L;",
      "right" : "afterAddSortedTime = 0L;",
      "info" : "ExpressionStatement[75741-75765]:ExpressionStatement[60006-60030]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[75778-75846]:IfStatement[53537-53605]"
    }, {
      "left" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[75795-75846]:ExpressionStatement[53554-53605]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[75859-75914]:IfStatement[60124-60179]"
    }, {
      "left" : "beforeAddSortedTime = System.nanoTime();",
      "right" : "beforeAddSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[75874-75914]:ExpressionStatement[60139-60179]"
    }, {
      "left" : "for (int i = 0; i < sorted.length; i++)",
      "right" : "for (int i = 0; i < kSorted.length; i++)",
      "info" : "ForStatement[75927-76496]:ForStatement[60192-60347]"
    }, {
      "left" : "int i = 0",
      "right" : "int i = 0",
      "info" : "VariableDeclarationExpression[75932-75941]:VariableDeclarationExpression[53685-53694]"
    }, {
      "left" : "sorted.length",
      "right" : "kSorted.length",
      "info" : "QualifiedName[75947-75960]:QualifiedName[60212-60226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75967-76496]:Block[60233-60347]"
    }, {
      "left" : "Integer",
      "right" : "K",
      "info" : "SimpleName[75985-75992]:SimpleName[60251-60252]"
    }, {
      "left" : "Integer item = sorted[i];",
      "right" : "K k = kSorted[i];",
      "info" : "VariableDeclarationStatement[75985-76010]:VariableDeclarationStatement[60251-60268]"
    }, {
      "left" : "item",
      "right" : "k",
      "info" : "SimpleName[75993-75997]:SimpleName[60253-60254]"
    }, {
      "left" : "sorted",
      "right" : "kSorted",
      "info" : "SimpleName[76000-76006]:SimpleName[60257-60264]"
    }, {
      "left" : "V v = null;",
      "right" : "V v = vSorted[i];",
      "info" : "VariableDeclarationStatement[76055-76066]:VariableDeclarationStatement[60285-60302]"
    }, {
      "left" : "map.put(k, v);",
      "right" : "map.put(k, v);",
      "info" : "ExpressionStatement[76468-76482]:ExpressionStatement[53813-53827]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[76509-76789]:IfStatement[60360-60640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76524-76789]:Block[60375-60640]"
    }, {
      "left" : "afterAddSortedTime = System.nanoTime();",
      "right" : "afterAddSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[76542-76581]:ExpressionStatement[60393-60432]"
    }, {
      "left" : "addSortedTime += afterAddSortedTime - beforeAddSortedTime;",
      "right" : "addSortedTime += afterAddSortedTime - beforeAddSortedTime;",
      "info" : "ExpressionStatement[76598-76656]:ExpressionStatement[60449-60507]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[76673-76775]:IfStatement[60524-60626]"
    }, {
      "left" : "System.out.println(name+\" sorted add time = \" + (addSortedTime / sortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" sorted add time = \" + (addSortedTime / sortedCount) + \" ns\");",
      "info" : "ExpressionStatement[76688-76775]:ExpressionStatement[60539-60626]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[76802-77088]:IfStatement[60653-60939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76819-77088]:Block[60670-60939]"
    }, {
      "left" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[76837-76887]:ExpressionStatement[60688-60738]"
    }, {
      "left" : "memory += afterMemory - beforeMemory;",
      "right" : "memory += afterMemory - beforeMemory;",
      "info" : "ExpressionStatement[76904-76941]:ExpressionStatement[60755-60792]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[76958-77074]:IfStatement[60809-60925]"
    }, {
      "left" : "System.out.println(name+\" sorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "right" : "System.out.println(name+\" sorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "info" : "ExpressionStatement[76973-77074]:ExpressionStatement[60824-60925]"
    }, {
      "left" : "K invalidKey = (K) Utils.parseT(INVALID, keyType);",
      "right" : "K invalidKey = (K) Utils.parseT(INVALID, keyType);",
      "info" : "VariableDeclarationStatement[77102-77152]:VariableDeclarationStatement[54423-54473]"
    }, {
      "left" : "boolean contains = map.containsKey(invalidKey);",
      "right" : "boolean contains = map.containsKey(invalidKey);",
      "info" : "VariableDeclarationStatement[77165-77212]:VariableDeclarationStatement[54486-54533]"
    }, {
      "left" : "V removed = map.remove(invalidKey);",
      "right" : "V removed = map.remove(invalidKey);",
      "info" : "VariableDeclarationStatement[77225-77260]:VariableDeclarationStatement[54546-54581]"
    }, {
      "left" : "if (contains || (removed!=null))",
      "right" : "if (contains || (removed!=null))",
      "info" : "IfStatement[77273-77466]:IfStatement[61124-61317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77306-77466]:Block[61157-61317]"
    }, {
      "left" : "System.err.println(name+\" sorted invalidity check. contains=\" + contains + \" removed=\" + removed);",
      "right" : "System.err.println(name+\" sorted invalidity check. contains=\" + contains + \" removed=\" + removed);",
      "info" : "ExpressionStatement[77324-77422]:ExpressionStatement[61175-61273]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[77439-77452]:ReturnStatement[61290-61303]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[77480-77530]:IfStatement[54803-54853]"
    }, {
      "left" : "System.out.println(map.toString());",
      "right" : "System.out.println(map.toString());",
      "info" : "ExpressionStatement[77495-77530]:ExpressionStatement[54818-54853]"
    }, {
      "left" : "beforeLookupTime = 0L;",
      "right" : "beforeLookupTime = 0L;",
      "info" : "ExpressionStatement[77544-77566]:ExpressionStatement[54867-54889]"
    }, {
      "left" : "afterLookupTime = 0L;",
      "right" : "afterLookupTime = 0L;",
      "info" : "ExpressionStatement[77579-77600]:ExpressionStatement[54902-54923]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[77613-77665]:IfStatement[54936-54988]"
    }, {
      "left" : "beforeLookupTime = System.nanoTime();",
      "right" : "beforeLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[77628-77665]:ExpressionStatement[54951-54988]"
    }, {
      "left" : "for (Integer item : sorted)",
      "right" : "for (K k : kSorted)",
      "info" : "EnhancedForStatement[77678-77812]:EnhancedForStatement[61529-61600]"
    }, {
      "left" : "Integer",
      "right" : "K",
      "info" : "SimpleName[77683-77690]:SimpleName[61534-61535]"
    }, {
      "left" : "item",
      "right" : "k",
      "info" : "SimpleName[77691-77695]:SimpleName[61536-61537]"
    }, {
      "left" : "sorted",
      "right" : "kSorted",
      "info" : "SimpleName[77698-77704]:SimpleName[61540-61547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77706-77812]:Block[55023-55074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77706-77812]:Block[61549-61600]"
    }, {
      "left" : "map.containsKey(k);",
      "right" : "map.containsKey(k);",
      "info" : "ExpressionStatement[77779-77798]:ExpressionStatement[55041-55060]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[77825-78109]:IfStatement[61613-61897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77840-78109]:Block[61628-61897]"
    }, {
      "left" : "afterLookupTime = System.nanoTime();",
      "right" : "afterLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[77858-77894]:ExpressionStatement[61646-61682]"
    }, {
      "left" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "right" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "info" : "ExpressionStatement[77911-77960]:ExpressionStatement[61699-61748]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[77977-78095]:IfStatement[61765-61883]"
    }, {
      "left" : "System.out.println(name+\" sorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "right" : "System.out.println(name+\" sorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "info" : "ExpressionStatement[77992-78095]:ExpressionStatement[61780-61883]"
    }, {
      "left" : "beforeRemoveSortedTime = 0L;",
      "right" : "beforeRemoveSortedTime = 0L;",
      "info" : "ExpressionStatement[78123-78151]:ExpressionStatement[61911-61939]"
    }, {
      "left" : "afterRemoveSortedTime = 0L;",
      "right" : "afterRemoveSortedTime = 0L;",
      "info" : "ExpressionStatement[78164-78191]:ExpressionStatement[61952-61979]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[78204-78262]:IfStatement[61992-62050]"
    }, {
      "left" : "beforeRemoveSortedTime = System.nanoTime();",
      "right" : "beforeRemoveSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[78219-78262]:ExpressionStatement[62007-62050]"
    }, {
      "left" : "for (int i = sorted.length - 1; i >= 0; i--)",
      "right" : "for (int i = 0; i < kUnsorted.length; i++)",
      "info" : "ForStatement[78275-78657]:ForStatement[55452-55788]"
    }, {
      "left" : ">=",
      "right" : "<",
      "info" : "INFIX_EXPRESSION_OPERATOR[78309-78311]:INFIX_EXPRESSION_OPERATOR[55470-55471]"
    }, {
      "left" : "--",
      "right" : "++",
      "info" : "POSTFIX_EXPRESSION_OPERATOR[78316-78318]:POSTFIX_EXPRESSION_OPERATOR[55491-55493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78320-78657]:Block[55495-55788]"
    }, {
      "left" : "Integer",
      "right" : "K",
      "info" : "SimpleName[78338-78345]:SimpleName[55513-55514]"
    }, {
      "left" : "Integer item = sorted[i];",
      "right" : "K k = kUnsorted[i];",
      "info" : "VariableDeclarationStatement[78338-78363]:VariableDeclarationStatement[55513-55532]"
    }, {
      "left" : "item",
      "right" : "k",
      "info" : "SimpleName[78346-78350]:SimpleName[55515-55516]"
    }, {
      "left" : "sorted",
      "right" : "kUnsorted",
      "info" : "SimpleName[78353-78359]:SimpleName[55519-55528]"
    }, {
      "left" : "removed = map.remove(k);",
      "right" : "removed = map.remove(k);",
      "info" : "ExpressionStatement[78435-78459]:ExpressionStatement[55549-55573]"
    }, {
      "left" : "if (removed==null)",
      "right" : "if (removed==null)",
      "info" : "IfStatement[78476-78643]:IfStatement[55590-55757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78495-78643]:Block[55609-55757]"
    }, {
      "left" : "System.err.println(name+\" unsorted invalidity check. removed=\" + removed);",
      "right" : "System.err.println(name+\" unsorted invalidity check. removed=\" + removed);",
      "info" : "ExpressionStatement[78517-78591]:ExpressionStatement[55631-55705]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[78612-78625]:ReturnStatement[55726-55739]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[78670-78968]:IfStatement[62391-62689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78685-78968]:Block[62406-62689]"
    }, {
      "left" : "afterRemoveSortedTime = System.nanoTime();",
      "right" : "afterRemoveSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[78703-78745]:ExpressionStatement[62424-62466]"
    }, {
      "left" : "removeSortedTime += afterRemoveSortedTime - beforeRemoveSortedTime;",
      "right" : "removeSortedTime += afterRemoveSortedTime - beforeRemoveSortedTime;",
      "info" : "ExpressionStatement[78762-78829]:ExpressionStatement[62483-62550]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[78846-78954]:IfStatement[62567-62675]"
    }, {
      "left" : "System.out.println(name+\" sorted remove time = \" + (removeSortedTime / sortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" sorted remove time = \" + (removeSortedTime / sortedCount) + \" ns\");",
      "info" : "ExpressionStatement[78861-78954]:ExpressionStatement[62582-62675]"
    }, {
      "left" : "if (!map.isEmpty())",
      "right" : "if (!map.isEmpty())",
      "info" : "IfStatement[78982-79151]:IfStatement[62703-62878]"
    }, {
      "left" : "!map.isEmpty()",
      "right" : "!map.isEmpty()",
      "info" : "PrefixExpression[78986-79000]:PrefixExpression[56091-56105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79002-79151]:Block[62723-62878]"
    }, {
      "left" : "System.err.println(name+\" sorted isEmpty() failed.\");",
      "right" : "System.err.println(name+\" sorted isEmpty() failed.\");",
      "info" : "ExpressionStatement[79020-79073]:ExpressionStatement[62741-62794]"
    }, {
      "left" : "handleError(map);",
      "right" : "handleError(input,map);",
      "info" : "ExpressionStatement[79090-79107]:ExpressionStatement[62811-62834]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "SimpleName[79102-79105]:SimpleName[62829-62832]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[79124-79137]:ReturnStatement[62851-62864]"
    }, {
      "left" : "if (map.size()!=0)",
      "right" : "if (map.size()!=0)",
      "info" : "IfStatement[79164-79329]:IfStatement[62891-63062]"
    }, {
      "left" : "map.size()!=0",
      "right" : "map.size()!=0",
      "info" : "InfixExpression[79168-79181]:InfixExpression[56281-56294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79183-79329]:Block[62910-63062]"
    }, {
      "left" : "System.err.println(name+\" sorted size() failed.\");",
      "right" : "System.err.println(name+\" sorted size() failed.\");",
      "info" : "ExpressionStatement[79201-79251]:ExpressionStatement[62928-62978]"
    }, {
      "left" : "handleError(map);",
      "right" : "handleError(input,map);",
      "info" : "ExpressionStatement[79268-79285]:ExpressionStatement[62995-63018]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "SimpleName[79280-79283]:SimpleName[63013-63016]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[79302-79315]:ReturnStatement[63035-63048]"
    }, {
      "left" : "if (!firstTimeThru)",
      "right" : "if (!firstTimeThru)",
      "info" : "IfStatement[79400-79990]:IfStatement[66360-66950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79420-79990]:Block[66380-66950]"
    }, {
      "left" : "if (testResults[testIndex] == null)",
      "right" : "if (testResults[testIndex] == null)",
      "info" : "IfStatement[79434-79524]:IfStatement[66394-66484]"
    }, {
      "left" : "testResults[testIndex] = new long[6];",
      "right" : "testResults[testIndex] = new long[6];",
      "info" : "ExpressionStatement[79487-79524]:ExpressionStatement[66447-66484]"
    }, {
      "left" : "testResults[testIndex][0] += (addTime / unsortedCount);",
      "right" : "testResults[testIndex][0] += (addTime / unsortedCount);",
      "info" : "ExpressionStatement[79537-79592]:ExpressionStatement[66497-66552]"
    }, {
      "left" : "testResults[testIndex][1] += (removeTime / unsortedCount);",
      "right" : "testResults[testIndex][1] += (removeTime / unsortedCount);",
      "info" : "ExpressionStatement[79605-79663]:ExpressionStatement[66565-66623]"
    }, {
      "left" : "testResults[testIndex][2] += (addSortedTime / sortedCount);",
      "right" : "testResults[testIndex][2] += (addSortedTime / sortedCount);",
      "info" : "ExpressionStatement[79676-79735]:ExpressionStatement[66636-66695]"
    }, {
      "left" : "testResults[testIndex][3] += (removeSortedTime / sortedCount);",
      "right" : "testResults[testIndex][3] += (removeSortedTime / sortedCount);",
      "info" : "ExpressionStatement[79748-79810]:ExpressionStatement[66708-66770]"
    }, {
      "left" : "testResults[testIndex][4] += (lookupTime / (unsortedCount + sortedCount));",
      "right" : "testResults[testIndex][4] += (lookupTime / (unsortedCount + sortedCount));",
      "info" : "ExpressionStatement[79823-79897]:ExpressionStatement[66783-66857]"
    }, {
      "left" : "testResults[testIndex][5] += (memory / (unsortedCount + sortedCount));",
      "right" : "testResults[testIndex][5] += (memory / (unsortedCount + sortedCount));",
      "info" : "ExpressionStatement[79910-79980]:ExpressionStatement[66870-66940]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[80000-80036]:IfStatement[66960-66996]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[80015-80036]:ExpressionStatement[66975-66996]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[80046-80058]:ReturnStatement[67006-67018]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[80070-80077]:Modifier[67030-67037]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[80078-80084]:Modifier[67038-67044]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[80085-80090]:Modifier[67045-67050]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[80091-80097]:SimpleType[67051-67057]"
    }, {
      "left" : "getTestResults",
      "right" : "getTestResults",
      "info" : "SimpleName[80098-80112]:SimpleName[67058-67072]"
    }, {
      "left" : "int number",
      "right" : "int number",
      "info" : "SingleVariableDeclaration[80113-80123]:SingleVariableDeclaration[67073-67083]"
    }, {
      "left" : "String[] names",
      "right" : "String[] names",
      "info" : "SingleVariableDeclaration[80125-80139]:SingleVariableDeclaration[67085-67099]"
    }, {
      "left" : "long[][] results",
      "right" : "long[][] results",
      "info" : "SingleVariableDeclaration[80141-80157]:SingleVariableDeclaration[67101-67117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80159-84613]:Block[67119-71596]"
    }, {
      "left" : "StringBuilder resultsBuilder = new StringBuilder();",
      "right" : "StringBuilder resultsBuilder = new StringBuilder();",
      "info" : "VariableDeclarationStatement[80169-80220]:VariableDeclarationStatement[67129-67180]"
    }, {
      "left" : "String format = \"%-35s %-10s %-15s %-15s %-25s %-15s %-15s\\n\";",
      "right" : "String format = \"%-35s %-10s %-15s %-15s %-25s %-15s %-15s\\n\";",
      "info" : "VariableDeclarationStatement[80229-80291]:VariableDeclarationStatement[67189-67251]"
    }, {
      "left" : "Formatter formatter = new Formatter(resultsBuilder, Locale.US);",
      "right" : "Formatter formatter = new Formatter(resultsBuilder, Locale.US);",
      "info" : "VariableDeclarationStatement[80300-80363]:VariableDeclarationStatement[67260-67323]"
    }, {
      "left" : "formatter.format(format, \"Data Structure\", \"Add time\", \"Remove time\", \"Sorted add time\", \"Sorted remove time\", \"Lookup time\", \"Size\");",
      "right" : "formatter.format(format, \"Data Structure (\"+ARRAY_SIZE+\" items)\", \"Add time\", \"Remove time\", \"Sorted add time\", \"Sorted remove time\", \"Lookup time\", \"Size\");",
      "info" : "ExpressionStatement[80372-80506]:ExpressionStatement[67332-67489]"
    }, {
      "left" : "format",
      "right" : "format",
      "info" : "SimpleName[80389-80395]:SimpleName[67349-67355]"
    }, {
      "left" : "\"Add time\"",
      "right" : "\"Add time\"",
      "info" : "StringLiteral[80415-80425]:StringLiteral[67398-67408]"
    }, {
      "left" : "\"Remove time\"",
      "right" : "\"Remove time\"",
      "info" : "StringLiteral[80427-80440]:StringLiteral[67410-67423]"
    }, {
      "left" : "\"Sorted add time\"",
      "right" : "\"Sorted add time\"",
      "info" : "StringLiteral[80442-80459]:StringLiteral[67425-67442]"
    }, {
      "left" : "\"Sorted remove time\"",
      "right" : "\"Sorted remove time\"",
      "info" : "StringLiteral[80461-80481]:StringLiteral[67444-67464]"
    }, {
      "left" : "\"Lookup time\"",
      "right" : "\"Lookup time\"",
      "info" : "StringLiteral[80483-80496]:StringLiteral[67466-67479]"
    }, {
      "left" : "\"Size\"",
      "right" : "\"Size\"",
      "info" : "StringLiteral[80498-80504]:StringLiteral[67481-67487]"
    }, {
      "left" : "double KB = 1000;",
      "right" : "double KB = 1000;",
      "info" : "VariableDeclarationStatement[80516-80533]:VariableDeclarationStatement[67499-67516]"
    }, {
      "left" : "double MB = 1000 * KB;",
      "right" : "double MB = 1000 * KB;",
      "info" : "VariableDeclarationStatement[80542-80564]:VariableDeclarationStatement[67525-67547]"
    }, {
      "left" : "double MILLIS = 1000000;",
      "right" : "double MILLIS = 1000000;",
      "info" : "VariableDeclarationStatement[80574-80598]:VariableDeclarationStatement[67557-67581]"
    }, {
      "left" : "double SECOND = 1000;",
      "right" : "double SECOND = 1000;",
      "info" : "VariableDeclarationStatement[80607-80628]:VariableDeclarationStatement[67590-67611]"
    }, {
      "left" : "double MINUTES = 60 * SECOND;",
      "right" : "double MINUTES = 60 * SECOND;",
      "info" : "VariableDeclarationStatement[80637-80666]:VariableDeclarationStatement[67620-67649]"
    }, {
      "left" : "for (int i=0; i<TESTS; i++)",
      "right" : "for (int i=0; i<TESTS; i++)",
      "info" : "ForStatement[80676-84537]:ForStatement[67659-71520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80704-84537]:Block[67687-71520]"
    }, {
      "left" : "String name = names[i];",
      "right" : "String name = names[i];",
      "info" : "VariableDeclarationStatement[80718-80741]:VariableDeclarationStatement[67701-67724]"
    }, {
      "left" : "long[] result = results[i];",
      "right" : "long[] result = results[i];",
      "info" : "VariableDeclarationStatement[80754-80781]:VariableDeclarationStatement[67737-67764]"
    }, {
      "left" : "if (name != null && result != null)",
      "right" : "if (name != null && result != null)",
      "info" : "IfStatement[80794-84527]:IfStatement[67777-71510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80830-84527]:Block[67813-71510]"
    }, {
      "left" : "double addTime = result[0] / MILLIS;",
      "right" : "double addTime = result[0] / MILLIS;",
      "info" : "VariableDeclarationStatement[80848-80884]:VariableDeclarationStatement[67831-67867]"
    }, {
      "left" : "addTime /= number;",
      "right" : "addTime /= number;",
      "info" : "ExpressionStatement[80901-80919]:ExpressionStatement[67884-67902]"
    }, {
      "left" : "String addTimeString = null;",
      "right" : "String addTimeString = null;",
      "info" : "VariableDeclarationStatement[80936-80964]:VariableDeclarationStatement[67919-67947]"
    }, {
      "left" : "if (addTime > MINUTES)",
      "right" : "if (addTime > MINUTES)",
      "info" : "IfStatement[80981-81376]:IfStatement[67964-68359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81004-81130]:Block[67987-68113]"
    }, {
      "left" : "addTime /= MINUTES;",
      "right" : "addTime /= MINUTES;",
      "info" : "ExpressionStatement[81026-81045]:ExpressionStatement[68009-68028]"
    }, {
      "left" : "addTimeString = FORMAT.format(addTime) + \" m\";",
      "right" : "addTimeString = FORMAT.format(addTime) + \" m\";",
      "info" : "ExpressionStatement[81066-81112]:ExpressionStatement[68049-68095]"
    }, {
      "left" : "if (addTime > SECOND)",
      "right" : "if (addTime > SECOND)",
      "info" : "IfStatement[81136-81376]:IfStatement[68119-68359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81158-81283]:Block[68141-68266]"
    }, {
      "left" : "addTime /= SECOND;",
      "right" : "addTime /= SECOND;",
      "info" : "ExpressionStatement[81180-81198]:ExpressionStatement[68163-68181]"
    }, {
      "left" : "addTimeString = FORMAT.format(addTime) + \" s\";",
      "right" : "addTimeString = FORMAT.format(addTime) + \" s\";",
      "info" : "ExpressionStatement[81219-81265]:ExpressionStatement[68202-68248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81289-81376]:Block[68272-68359]"
    }, {
      "left" : "addTimeString = FORMAT.format(addTime) + \" ms\";",
      "right" : "addTimeString = FORMAT.format(addTime) + \" ms\";",
      "info" : "ExpressionStatement[81311-81358]:ExpressionStatement[68294-68341]"
    }, {
      "left" : "double removeTime = result[1] / MILLIS;",
      "right" : "double removeTime = result[1] / MILLIS;",
      "info" : "VariableDeclarationStatement[81394-81433]:VariableDeclarationStatement[68377-68416]"
    }, {
      "left" : "removeTime /= number;",
      "right" : "removeTime /= number;",
      "info" : "ExpressionStatement[81450-81471]:ExpressionStatement[68433-68454]"
    }, {
      "left" : "String removeTimeString = null;",
      "right" : "String removeTimeString = null;",
      "info" : "VariableDeclarationStatement[81488-81519]:VariableDeclarationStatement[68471-68502]"
    }, {
      "left" : "if (removeTime > MINUTES)",
      "right" : "if (removeTime > MINUTES)",
      "info" : "IfStatement[81536-81961]:IfStatement[68519-68944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81562-81697]:Block[68545-68680]"
    }, {
      "left" : "removeTime /= MINUTES;",
      "right" : "removeTime /= MINUTES;",
      "info" : "ExpressionStatement[81584-81606]:ExpressionStatement[68567-68589]"
    }, {
      "left" : "removeTimeString = FORMAT.format(removeTime) + \" m\";",
      "right" : "removeTimeString = FORMAT.format(removeTime) + \" m\";",
      "info" : "ExpressionStatement[81627-81679]:ExpressionStatement[68610-68662]"
    }, {
      "left" : "if (removeTime > SECOND)",
      "right" : "if (removeTime > SECOND)",
      "info" : "IfStatement[81703-81961]:IfStatement[68686-68944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81728-81862]:Block[68711-68845]"
    }, {
      "left" : "removeTime /= SECOND;",
      "right" : "removeTime /= SECOND;",
      "info" : "ExpressionStatement[81750-81771]:ExpressionStatement[68733-68754]"
    }, {
      "left" : "removeTimeString = FORMAT.format(removeTime) + \" s\";",
      "right" : "removeTimeString = FORMAT.format(removeTime) + \" s\";",
      "info" : "ExpressionStatement[81792-81844]:ExpressionStatement[68775-68827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81868-81961]:Block[68851-68944]"
    }, {
      "left" : "removeTimeString = FORMAT.format(removeTime) + \" ms\";",
      "right" : "removeTimeString = FORMAT.format(removeTime) + \" ms\";",
      "info" : "ExpressionStatement[81890-81943]:ExpressionStatement[68873-68926]"
    }, {
      "left" : "double addSortedTime = result[2] / MILLIS;",
      "right" : "double addSortedTime = result[2] / MILLIS;",
      "info" : "VariableDeclarationStatement[82005-82047]:VariableDeclarationStatement[68988-69030]"
    }, {
      "left" : "addSortedTime /= number;",
      "right" : "addSortedTime /= number;",
      "info" : "ExpressionStatement[82064-82088]:ExpressionStatement[69047-69071]"
    }, {
      "left" : "String sortedAddTimeString = null;",
      "right" : "String sortedAddTimeString = null;",
      "info" : "VariableDeclarationStatement[82105-82139]:VariableDeclarationStatement[69088-69122]"
    }, {
      "left" : "if (addSortedTime > MINUTES)",
      "right" : "if (addSortedTime > MINUTES)",
      "info" : "IfStatement[82156-82611]:IfStatement[69139-69594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82185-82329]:Block[69168-69312]"
    }, {
      "left" : "addSortedTime /= MINUTES;",
      "right" : "addSortedTime /= MINUTES;",
      "info" : "ExpressionStatement[82207-82232]:ExpressionStatement[69190-69215]"
    }, {
      "left" : "sortedAddTimeString = FORMAT.format(addSortedTime) + \" m\";",
      "right" : "sortedAddTimeString = FORMAT.format(addSortedTime) + \" m\";",
      "info" : "ExpressionStatement[82253-82311]:ExpressionStatement[69236-69294]"
    }, {
      "left" : "if (addSortedTime > SECOND)",
      "right" : "if (addSortedTime > SECOND)",
      "info" : "IfStatement[82335-82611]:IfStatement[69318-69594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82363-82506]:Block[69346-69489]"
    }, {
      "left" : "addSortedTime /= SECOND;",
      "right" : "addSortedTime /= SECOND;",
      "info" : "ExpressionStatement[82385-82409]:ExpressionStatement[69368-69392]"
    }, {
      "left" : "sortedAddTimeString = FORMAT.format(addSortedTime) + \" s\";",
      "right" : "sortedAddTimeString = FORMAT.format(addSortedTime) + \" s\";",
      "info" : "ExpressionStatement[82430-82488]:ExpressionStatement[69413-69471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82512-82611]:Block[69495-69594]"
    }, {
      "left" : "sortedAddTimeString = FORMAT.format(addSortedTime) + \" ms\";",
      "right" : "sortedAddTimeString = FORMAT.format(addSortedTime) + \" ms\";",
      "info" : "ExpressionStatement[82534-82593]:ExpressionStatement[69517-69576]"
    }, {
      "left" : "double removeSortedTime = result[3] / MILLIS;",
      "right" : "double removeSortedTime = result[3] / MILLIS;",
      "info" : "VariableDeclarationStatement[82629-82674]:VariableDeclarationStatement[69612-69657]"
    }, {
      "left" : "removeSortedTime /= number;",
      "right" : "removeSortedTime /= number;",
      "info" : "ExpressionStatement[82691-82718]:ExpressionStatement[69674-69701]"
    }, {
      "left" : "String sortedRemoveTimeString = null;",
      "right" : "String sortedRemoveTimeString = null;",
      "info" : "VariableDeclarationStatement[82735-82772]:VariableDeclarationStatement[69718-69755]"
    }, {
      "left" : "if (removeSortedTime > MINUTES)",
      "right" : "if (removeSortedTime > MINUTES)",
      "info" : "IfStatement[82789-83274]:IfStatement[69772-70257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82821-82974]:Block[69804-69957]"
    }, {
      "left" : "removeSortedTime /= MINUTES;",
      "right" : "removeSortedTime /= MINUTES;",
      "info" : "ExpressionStatement[82843-82871]:ExpressionStatement[69826-69854]"
    }, {
      "left" : "sortedRemoveTimeString = FORMAT.format(removeSortedTime) + \" m\";",
      "right" : "sortedRemoveTimeString = FORMAT.format(removeSortedTime) + \" m\";",
      "info" : "ExpressionStatement[82892-82956]:ExpressionStatement[69875-69939]"
    }, {
      "left" : "if (removeSortedTime > SECOND)",
      "right" : "if (removeSortedTime > SECOND)",
      "info" : "IfStatement[82980-83274]:IfStatement[69963-70257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83011-83163]:Block[69994-70146]"
    }, {
      "left" : "removeSortedTime /= SECOND;",
      "right" : "removeSortedTime /= SECOND;",
      "info" : "ExpressionStatement[83033-83060]:ExpressionStatement[70016-70043]"
    }, {
      "left" : "sortedRemoveTimeString = FORMAT.format(removeSortedTime) + \" s\";",
      "right" : "sortedRemoveTimeString = FORMAT.format(removeSortedTime) + \" s\";",
      "info" : "ExpressionStatement[83081-83145]:ExpressionStatement[70064-70128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83169-83274]:Block[70152-70257]"
    }, {
      "left" : "sortedRemoveTimeString = FORMAT.format(removeSortedTime) + \" ms\";",
      "right" : "sortedRemoveTimeString = FORMAT.format(removeSortedTime) + \" ms\";",
      "info" : "ExpressionStatement[83191-83256]:ExpressionStatement[70174-70239]"
    }, {
      "left" : "double lookupTime = result[4] / MILLIS;",
      "right" : "double lookupTime = result[4] / MILLIS;",
      "info" : "VariableDeclarationStatement[83292-83331]:VariableDeclarationStatement[70275-70314]"
    }, {
      "left" : "lookupTime /= number;",
      "right" : "lookupTime /= number;",
      "info" : "ExpressionStatement[83348-83369]:ExpressionStatement[70331-70352]"
    }, {
      "left" : "String lookupTimeString = null;",
      "right" : "String lookupTimeString = null;",
      "info" : "VariableDeclarationStatement[83386-83417]:VariableDeclarationStatement[70369-70400]"
    }, {
      "left" : "if (lookupTime > MINUTES)",
      "right" : "if (lookupTime > MINUTES)",
      "info" : "IfStatement[83434-83859]:IfStatement[70417-70842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83460-83595]:Block[70443-70578]"
    }, {
      "left" : "lookupTime /= MINUTES;",
      "right" : "lookupTime /= MINUTES;",
      "info" : "ExpressionStatement[83482-83504]:ExpressionStatement[70465-70487]"
    }, {
      "left" : "lookupTimeString = FORMAT.format(lookupTime) + \" m\";",
      "right" : "lookupTimeString = FORMAT.format(lookupTime) + \" m\";",
      "info" : "ExpressionStatement[83525-83577]:ExpressionStatement[70508-70560]"
    }, {
      "left" : "if (lookupTime > SECOND)",
      "right" : "if (lookupTime > SECOND)",
      "info" : "IfStatement[83601-83859]:IfStatement[70584-70842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83626-83760]:Block[70609-70743]"
    }, {
      "left" : "lookupTime /= SECOND;",
      "right" : "lookupTime /= SECOND;",
      "info" : "ExpressionStatement[83648-83669]:ExpressionStatement[70631-70652]"
    }, {
      "left" : "lookupTimeString = FORMAT.format(lookupTime) + \" s\";",
      "right" : "lookupTimeString = FORMAT.format(lookupTime) + \" s\";",
      "info" : "ExpressionStatement[83690-83742]:ExpressionStatement[70673-70725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83766-83859]:Block[70749-70842]"
    }, {
      "left" : "lookupTimeString = FORMAT.format(lookupTime) + \" ms\";",
      "right" : "lookupTimeString = FORMAT.format(lookupTime) + \" ms\";",
      "info" : "ExpressionStatement[83788-83841]:ExpressionStatement[70771-70824]"
    }, {
      "left" : "double size = result[5];",
      "right" : "double size = result[5];",
      "info" : "VariableDeclarationStatement[83877-83901]:VariableDeclarationStatement[70860-70884]"
    }, {
      "left" : "size /= number;",
      "right" : "size /= number;",
      "info" : "ExpressionStatement[83918-83933]:ExpressionStatement[70901-70916]"
    }, {
      "left" : "String sizeString = null;",
      "right" : "String sizeString = null;",
      "info" : "VariableDeclarationStatement[83950-83975]:VariableDeclarationStatement[70933-70958]"
    }, {
      "left" : "if (size > MB)",
      "right" : "if (size > MB)",
      "info" : "IfStatement[83992-84356]:IfStatement[70975-71339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84007-84126]:Block[70990-71109]"
    }, {
      "left" : "size = size / MB;",
      "right" : "size = size / MB;",
      "info" : "ExpressionStatement[84029-84046]:ExpressionStatement[71012-71029]"
    }, {
      "left" : "sizeString = FORMAT.format(size) + \" MB\";",
      "right" : "sizeString = FORMAT.format(size) + \" MB\";",
      "info" : "ExpressionStatement[84067-84108]:ExpressionStatement[71050-71091]"
    }, {
      "left" : "if (size > KB)",
      "right" : "if (size > KB)",
      "info" : "IfStatement[84132-84356]:IfStatement[71115-71339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84147-84266]:Block[71130-71249]"
    }, {
      "left" : "size = size / KB;",
      "right" : "size = size / KB;",
      "info" : "ExpressionStatement[84169-84186]:ExpressionStatement[71152-71169]"
    }, {
      "left" : "sizeString = FORMAT.format(size) + \" KB\";",
      "right" : "sizeString = FORMAT.format(size) + \" KB\";",
      "info" : "ExpressionStatement[84207-84248]:ExpressionStatement[71190-71231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84272-84356]:Block[71255-71339]"
    }, {
      "left" : "sizeString = FORMAT.format(size) + \" Bytes\";",
      "right" : "sizeString = FORMAT.format(size) + \" Bytes\";",
      "info" : "ExpressionStatement[84294-84338]:ExpressionStatement[71277-71321]"
    }, {
      "left" : "formatter.format(format, name, addTimeString, removeTimeString, sortedAddTimeString, sortedRemoveTimeString, lookupTimeString, sizeString);",
      "right" : "formatter.format(format, name, addTimeString, removeTimeString, sortedAddTimeString, sortedRemoveTimeString, lookupTimeString, sizeString);",
      "info" : "ExpressionStatement[84374-84513]:ExpressionStatement[71357-71496]"
    }, {
      "left" : "formatter.close();",
      "right" : "formatter.close();",
      "info" : "ExpressionStatement[84546-84564]:ExpressionStatement[71529-71547]"
    }, {
      "left" : "return resultsBuilder.toString();",
      "right" : "return resultsBuilder.toString();",
      "info" : "ReturnStatement[84574-84607]:ReturnStatement[71557-71590]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[84619-84626]:Modifier[71602-71609]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[84627-84633]:Modifier[71610-71616]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[84634-84639]:Modifier[71617-71622]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[84640-84644]:PrimitiveType[71623-71627]"
    }, {
      "left" : "getMemoryUse",
      "right" : "getMemoryUse",
      "info" : "SimpleName[84645-84657]:SimpleName[71628-71640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84660-84892]:Block[71643-71875]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[84670-84689]:ExpressionStatement[71653-71672]"
    }, {
      "left" : "long totalMemory = Runtime.getRuntime().totalMemory();",
      "right" : "long totalMemory = Runtime.getRuntime().totalMemory();",
      "info" : "VariableDeclarationStatement[84698-84752]:VariableDeclarationStatement[71681-71735]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[84762-84781]:ExpressionStatement[71745-71764]"
    }, {
      "left" : "long freeMemory = Runtime.getRuntime().freeMemory();",
      "right" : "long freeMemory = Runtime.getRuntime().freeMemory();",
      "info" : "VariableDeclarationStatement[84790-84842]:VariableDeclarationStatement[71773-71825]"
    }, {
      "left" : "return (totalMemory - freeMemory);",
      "right" : "return (totalMemory - freeMemory);",
      "info" : "ReturnStatement[84852-84886]:ReturnStatement[71835-71869]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[84898-84905]:Modifier[71881-71888]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[84906-84912]:Modifier[71889-71895]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[84913-84918]:Modifier[71896-71901]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[84919-84923]:PrimitiveType[71902-71906]"
    }, {
      "left" : "putOutTheGarbage",
      "right" : "putOutTheGarbage",
      "info" : "SimpleName[84924-84940]:SimpleName[71907-71923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84943-85028]:Block[71926-72011]"
    }, {
      "left" : "collectGarbage();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[84953-84970]:ExpressionStatement[71936-71953]"
    }, {
      "left" : "collectGarbage();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[84979-84996]:ExpressionStatement[71962-71979]"
    }, {
      "left" : "collectGarbage();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[85005-85022]:ExpressionStatement[71988-72005]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[85088-85095]:Modifier[72071-72078]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[85096-85102]:Modifier[72079-72085]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[85103-85108]:Modifier[72086-72091]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[85109-85113]:PrimitiveType[72092-72096]"
    }, {
      "left" : "collectGarbage",
      "right" : "collectGarbage",
      "info" : "SimpleName[85114-85128]:SimpleName[72097-72111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85131-85439]:Block[72114-72422]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[85141-85433]:TryStatement[72124-72416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85145-85355]:Block[72128-72338]"
    }, {
      "left" : "System.gc();",
      "right" : "System.gc();",
      "info" : "ExpressionStatement[85159-85171]:ExpressionStatement[72142-72154]"
    }, {
      "left" : "System.gc();",
      "right" : "System.gc();",
      "info" : "ExpressionStatement[85184-85196]:ExpressionStatement[72167-72179]"
    }, {
      "left" : "System.gc();",
      "right" : "System.gc();",
      "info" : "ExpressionStatement[85209-85221]:ExpressionStatement[72192-72204]"
    }, {
      "left" : "Thread.sleep(fSLEEP_INTERVAL);",
      "right" : "Thread.sleep(fSLEEP_INTERVAL);",
      "info" : "ExpressionStatement[85234-85264]:ExpressionStatement[72217-72247]"
    }, {
      "left" : "System.runFinalization();",
      "right" : "System.runFinalization();",
      "info" : "ExpressionStatement[85277-85302]:ExpressionStatement[72260-72285]"
    }, {
      "left" : "Thread.sleep(fSLEEP_INTERVAL);",
      "right" : "Thread.sleep(fSLEEP_INTERVAL);",
      "info" : "ExpressionStatement[85315-85345]:ExpressionStatement[72298-72328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85388-85433]:Block[72371-72416]"
    }, {
      "left" : "ex.printStackTrace();",
      "right" : "ex.printStackTrace();",
      "info" : "ExpressionStatement[85402-85423]:ExpressionStatement[72385-72406]"
    } ]
  },
  "interFileMappings" : { }
}