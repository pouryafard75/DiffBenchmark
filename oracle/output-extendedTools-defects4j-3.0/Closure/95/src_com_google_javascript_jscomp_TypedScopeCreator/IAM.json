{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "TypeDeclaration[4201-55842]:TypeDeclaration[4201-56131]"
    }, {
      "left" : "static final String DELEGATE_PROXY_SUFFIX = \"(Proxy)\";",
      "right" : "static final String DELEGATE_PROXY_SUFFIX = \"(Proxy)\";",
      "info" : "FieldDeclaration[4706-4843]:FieldDeclaration[4706-4843]"
    }, {
      "left" : "static final DiagnosticType MALFORMED_TYPEDEF =\n      DiagnosticType.warning(\n          \"JSC_MALFORMED_TYPEDEF\",\n          \"Typedef for {0} does not have any type information\");",
      "right" : "static final DiagnosticType MALFORMED_TYPEDEF =\n      DiagnosticType.warning(\n          \"JSC_MALFORMED_TYPEDEF\",\n          \"Typedef for {0} does not have any type information\");",
      "info" : "FieldDeclaration[4847-5024]:FieldDeclaration[4847-5024]"
    }, {
      "left" : "static final DiagnosticType ENUM_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_ENUM_INITIALIZER_NOT_ENUM\",\n          \"enum initializer must be an object literal or an enum\");",
      "right" : "static final DiagnosticType ENUM_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_ENUM_INITIALIZER_NOT_ENUM\",\n          \"enum initializer must be an object literal or an enum\");",
      "info" : "FieldDeclaration[5028-5215]:FieldDeclaration[5028-5215]"
    }, {
      "left" : "static final DiagnosticType CONSTRUCTOR_EXPECTED =\n      DiagnosticType.warning(\n          \"JSC_REFLECT_CONSTRUCTOR_EXPECTED\",\n          \"Constructor expected as first argument\");",
      "right" : "static final DiagnosticType CONSTRUCTOR_EXPECTED =\n      DiagnosticType.warning(\n          \"JSC_REFLECT_CONSTRUCTOR_EXPECTED\",\n          \"Constructor expected as first argument\");",
      "info" : "FieldDeclaration[5219-5398]:FieldDeclaration[5219-5398]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[5402-5442]:FieldDeclaration[5402-5442]"
    }, {
      "left" : "private final ErrorReporter typeParsingErrorReporter;",
      "right" : "private final ErrorReporter typeParsingErrorReporter;",
      "info" : "FieldDeclaration[5445-5498]:FieldDeclaration[5445-5498]"
    }, {
      "left" : "private final TypeValidator validator;",
      "right" : "private final TypeValidator validator;",
      "info" : "FieldDeclaration[5501-5539]:FieldDeclaration[5501-5539]"
    }, {
      "left" : "private final CodingConvention codingConvention;",
      "right" : "private final CodingConvention codingConvention;",
      "info" : "FieldDeclaration[5542-5590]:FieldDeclaration[5542-5590]"
    }, {
      "left" : "private final JSTypeRegistry typeRegistry;",
      "right" : "private final JSTypeRegistry typeRegistry;",
      "info" : "FieldDeclaration[5593-5635]:FieldDeclaration[5593-5635]"
    }, {
      "left" : "private List<ObjectType> delegateProxyPrototypes = Lists.newArrayList();",
      "right" : "private List<ObjectType> delegateProxyPrototypes = Lists.newArrayList();",
      "info" : "FieldDeclaration[5638-5710]:FieldDeclaration[5638-5710]"
    }, {
      "left" : "DeferredSetType",
      "right" : "DeferredSetType",
      "info" : "TypeDeclaration[5714-6387]:TypeDeclaration[5714-6387]"
    }, {
      "left" : "final Node node;",
      "right" : "final Node node;",
      "info" : "FieldDeclaration[5893-5909]:FieldDeclaration[5893-5909]"
    }, {
      "left" : "final JSType type;",
      "right" : "final JSType type;",
      "info" : "FieldDeclaration[5914-5932]:FieldDeclaration[5914-5932]"
    }, {
      "left" : "DeferredSetType(Node node, JSType type)",
      "right" : "DeferredSetType(Node node, JSType type)",
      "info" : "MethodDeclaration[5938-6275]:MethodDeclaration[5938-6275]"
    }, {
      "left" : "void resolve(Scope scope)",
      "right" : "void resolve(Scope scope)",
      "info" : "MethodDeclaration[6281-6383]:MethodDeclaration[6281-6383]"
    }, {
      "left" : "TypedScopeCreator(AbstractCompiler compiler)",
      "right" : "TypedScopeCreator(AbstractCompiler compiler)",
      "info" : "MethodDeclaration[6391-6493]:MethodDeclaration[6391-6493]"
    }, {
      "left" : "TypedScopeCreator(AbstractCompiler compiler,\n      CodingConvention codingConvention)",
      "right" : "TypedScopeCreator(AbstractCompiler compiler,\n      CodingConvention codingConvention)",
      "info" : "MethodDeclaration[6497-6835]:MethodDeclaration[6497-6835]"
    }, {
      "left" : "public Scope createScope(Node root, Scope parent)",
      "right" : "public Scope createScope(Node root, Scope parent)",
      "info" : "MethodDeclaration[6839-8701]:MethodDeclaration[6839-8701]"
    }, {
      "left" : "Scope createInitialScope(Node root)",
      "right" : "Scope createInitialScope(Node root)",
      "info" : "MethodDeclaration[8705-10449]:MethodDeclaration[8705-10449]"
    }, {
      "left" : "private void declareNativeFunctionType(Scope scope, JSTypeNative tId)",
      "right" : "private void declareNativeFunctionType(Scope scope, JSTypeNative tId)",
      "info" : "MethodDeclaration[10453-10757]:MethodDeclaration[10453-10757]"
    }, {
      "left" : "private void declareNativeValueType(Scope scope, String name,\n      JSTypeNative tId)",
      "right" : "private void declareNativeValueType(Scope scope, String name,\n      JSTypeNative tId)",
      "info" : "MethodDeclaration[10761-10921]:MethodDeclaration[10761-10921]"
    }, {
      "left" : "private void declareNativeType(Scope scope, String name, JSType t)",
      "right" : "private void declareNativeType(Scope scope, String name, JSType t)",
      "info" : "MethodDeclaration[10925-11044]:MethodDeclaration[10925-11044]"
    }, {
      "left" : "DiscoverEnums",
      "right" : "DiscoverEnums",
      "info" : "TypeDeclaration[11048-12152]:TypeDeclaration[11048-12152]"
    }, {
      "left" : "private final JSTypeRegistry registry;",
      "right" : "private final JSTypeRegistry registry;",
      "info" : "FieldDeclaration[11130-11168]:FieldDeclaration[11130-11168]"
    }, {
      "left" : "DiscoverEnums(JSTypeRegistry registry)",
      "right" : "DiscoverEnums(JSTypeRegistry registry)",
      "info" : "MethodDeclaration[11174-11252]:MethodDeclaration[11174-11252]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node node, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node node, Node parent)",
      "info" : "MethodDeclaration[11258-11939]:MethodDeclaration[11258-11939]"
    }, {
      "left" : "private void identifyEnumInNameNode(Node nameNode, JSDocInfo info)",
      "right" : "private void identifyEnumInNameNode(Node nameNode, JSDocInfo info)",
      "info" : "MethodDeclaration[11945-12148]:MethodDeclaration[11945-12148]"
    }, {
      "left" : "private static Node getPrototypePropertyOwner(Node n)",
      "right" : "private static Node getPrototypePropertyOwner(Node n)",
      "info" : "MethodDeclaration[12156-12794]:MethodDeclaration[12156-12794]"
    }, {
      "left" : "private void attachLiteralTypes(Node n)",
      "right" : "private void attachLiteralTypes(Node n)",
      "info" : "MethodDeclaration[12798-13795]:MethodDeclaration[12798-13795]"
    }, {
      "left" : "private JSType getNativeType(JSTypeNative nativeType)",
      "right" : "private JSType getNativeType(JSTypeNative nativeType)",
      "info" : "MethodDeclaration[13799-13909]:MethodDeclaration[13799-13909]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "TypeDeclaration[13913-49058]:TypeDeclaration[13913-49347]"
    }, {
      "left" : "final Scope scope;",
      "right" : "final Scope scope;",
      "info" : "FieldDeclaration[14004-14076]:FieldDeclaration[14004-14076]"
    }, {
      "left" : "private final List<DeferredSetType> deferredSetTypes =\n        Lists.newArrayList();",
      "right" : "private final List<DeferredSetType> deferredSetTypes =\n        Lists.newArrayList();",
      "info" : "FieldDeclaration[14082-14166]:FieldDeclaration[14082-14166]"
    }, {
      "left" : "private final List<Node> nonExternFunctions = Lists.newArrayList();",
      "right" : "private final List<Node> nonExternFunctions = Lists.newArrayList();",
      "info" : "FieldDeclaration[14172-14326]:FieldDeclaration[14172-14326]"
    }, {
      "left" : "private final List<StubDeclaration> stubDeclarations =\n        Lists.newArrayList();",
      "right" : "private final List<StubDeclaration> stubDeclarations =\n        Lists.newArrayList();",
      "info" : "FieldDeclaration[14332-14586]:FieldDeclaration[14332-14586]"
    }, {
      "left" : "private String sourceName = null;",
      "right" : "private String sourceName = null;",
      "info" : "FieldDeclaration[14592-14687]:FieldDeclaration[14592-14687]"
    }, {
      "left" : "private AbstractScopeBuilder(Scope scope)",
      "right" : "private AbstractScopeBuilder(Scope scope)",
      "info" : "MethodDeclaration[14693-14768]:MethodDeclaration[14693-14768]"
    }, {
      "left" : "void setDeferredType(Node node, JSType type)",
      "right" : "void setDeferredType(Node node, JSType type)",
      "info" : "MethodDeclaration[14774-14887]:MethodDeclaration[14774-14887]"
    }, {
      "left" : "void resolveTypes()",
      "right" : "void resolveTypes()",
      "info" : "MethodDeclaration[14893-15393]:MethodDeclaration[14893-15393]"
    }, {
      "left" : "public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent)",
      "right" : "public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent)",
      "info" : "MethodDeclaration[15399-15935]:MethodDeclaration[15399-15935]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[15941-17491]:MethodDeclaration[15941-17491]"
    }, {
      "left" : "JSType getDeclaredTypeInAnnotation(\n        NodeTraversal t, Node node, JSDocInfo info)",
      "right" : "JSType getDeclaredTypeInAnnotation(\n        NodeTraversal t, Node node, JSDocInfo info)",
      "info" : "MethodDeclaration[17497-17895]:MethodDeclaration[17497-17895]"
    }, {
      "left" : "JSType getDeclaredTypeInAnnotation(String sourceName,\n        Node node, JSDocInfo info)",
      "right" : "JSType getDeclaredTypeInAnnotation(String sourceName,\n        Node node, JSDocInfo info)",
      "info" : "MethodDeclaration[17901-19576]:MethodDeclaration[17901-19576]"
    }, {
      "left" : "void assertDefinitionNode(Node n, int type)",
      "right" : "void assertDefinitionNode(Node n, int type)",
      "info" : "MethodDeclaration[19582-19882]:MethodDeclaration[19582-19882]"
    }, {
      "left" : "void defineCatch(Node n, Node parent)",
      "right" : "void defineCatch(Node n, Node parent)",
      "info" : "MethodDeclaration[19888-20107]:MethodDeclaration[19888-20107]"
    }, {
      "left" : "void defineVar(Node n, Node parent)",
      "right" : "void defineVar(Node n, Node parent)",
      "info" : "MethodDeclaration[20113-20739]:MethodDeclaration[20113-20739]"
    }, {
      "left" : "void defineDeclaredFunction(Node n, Node parent)",
      "right" : "void defineDeclaredFunction(Node n, Node parent)",
      "info" : "MethodDeclaration[20745-21467]:MethodDeclaration[20745-21467]"
    }, {
      "left" : "void defineNamedTypeAssign(Node n, Node parent)",
      "right" : "void defineNamedTypeAssign(Node n, Node parent)",
      "info" : "MethodDeclaration[21473-22653]:MethodDeclaration[21473-22653]"
    }, {
      "left" : "private void defineName(Node name, Node var, Node parent, JSDocInfo info)",
      "right" : "private void defineName(Node name, Node var, Node parent, JSDocInfo info)",
      "info" : "MethodDeclaration[22659-24385]:MethodDeclaration[22659-24385]"
    }, {
      "left" : "private FunctionType getFunctionType(String name,\n        Node rValue, JSDocInfo info, @Nullable Node lvalueNode)",
      "right" : "private FunctionType getFunctionType(String name,\n        Node rValue, JSDocInfo info, @Nullable Node lvalueNode)",
      "info" : "MethodDeclaration[24391-27987]:MethodDeclaration[24391-27987]"
    }, {
      "left" : "private FunctionType findOverriddenFunction(\n        ObjectType ownerType, String propName)",
      "right" : "private FunctionType findOverriddenFunction(\n        ObjectType ownerType, String propName)",
      "info" : "MethodDeclaration[27993-28820]:MethodDeclaration[27993-28820]"
    }, {
      "left" : "private EnumType getEnumType(String name, Node parent,\n        Node value, JSType elementsType)",
      "right" : "private EnumType getEnumType(String name, Node parent,\n        Node value, JSType elementsType)",
      "info" : "MethodDeclaration[28826-31041]:MethodDeclaration[28826-31041]"
    }, {
      "left" : "private void defineSlot(Node name, Node parent, JSType type)",
      "right" : "private void defineSlot(Node name, Node parent, JSType type)",
      "info" : "MethodDeclaration[31047-31571]:MethodDeclaration[31047-31571]"
    }, {
      "left" : "void defineSlot(Node n, Node parent, JSType type, boolean inferred)",
      "right" : "void defineSlot(Node n, Node parent, JSType type, boolean inferred)",
      "info" : "MethodDeclaration[31577-35174]:MethodDeclaration[31577-35463]"
    }, {
      "left" : "private boolean isQnameRootedInGlobalScope(Node n)",
      "right" : "private boolean isQnameRootedInGlobalScope(Node n)",
      "info" : "MethodDeclaration[35180-35574]:MethodDeclaration[35469-35863]"
    }, {
      "left" : "private JSType getDeclaredGetPropType(NodeTraversal t, JSDocInfo info,\n        Node n, Node rhsValue)",
      "right" : "private JSType getDeclaredGetPropType(NodeTraversal t, JSDocInfo info,\n        Node n, Node rhsValue)",
      "info" : "MethodDeclaration[35580-36449]:MethodDeclaration[35869-36738]"
    }, {
      "left" : "private void checkForClassDefiningCalls(\n        NodeTraversal t, Node n, Node parent)",
      "right" : "private void checkForClassDefiningCalls(\n        NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[36455-38964]:MethodDeclaration[36744-39253]"
    }, {
      "left" : "private void applyDelegateRelationship(\n        DelegateRelationship delegateRelationship)",
      "right" : "private void applyDelegateRelationship(\n        DelegateRelationship delegateRelationship)",
      "info" : "MethodDeclaration[38970-40881]:MethodDeclaration[39259-41170]"
    }, {
      "left" : "void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "right" : "void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "info" : "MethodDeclaration[40887-45360]:MethodDeclaration[41176-45649]"
    }, {
      "left" : "private ObjectType getObjectSlot(String slotName)",
      "right" : "private ObjectType getObjectSlot(String slotName)",
      "info" : "MethodDeclaration[45366-45914]:MethodDeclaration[45655-46203]"
    }, {
      "left" : "void resolveStubDeclarations()",
      "right" : "void resolveStubDeclarations()",
      "info" : "MethodDeclaration[45920-47240]:MethodDeclaration[46209-47529]"
    }, {
      "left" : "CollectProperties",
      "right" : "CollectProperties",
      "info" : "TypeDeclaration[47246-49029]:TypeDeclaration[47535-49318]"
    }, {
      "left" : "private final ObjectType thisType;",
      "right" : "private final ObjectType thisType;",
      "info" : "FieldDeclaration[47467-47501]:FieldDeclaration[47756-47790]"
    }, {
      "left" : "CollectProperties(ObjectType thisType)",
      "right" : "CollectProperties(ObjectType thisType)",
      "info" : "MethodDeclaration[47509-47591]:MethodDeclaration[47798-47880]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[47599-48036]:MethodDeclaration[47888-48325]"
    }, {
      "left" : "private void maybeCollectMember(NodeTraversal t,\n          Node member, Node nodeWithJsDocInfo)",
      "right" : "private void maybeCollectMember(NodeTraversal t,\n          Node member, Node nodeWithJsDocInfo)",
      "info" : "MethodDeclaration[48044-49023]:MethodDeclaration[48333-49312]"
    }, {
      "left" : "StubDeclaration",
      "right" : "StubDeclaration",
      "info" : "TypeDeclaration[49062-49451]:TypeDeclaration[49351-49740]"
    }, {
      "left" : "private final Node node;",
      "right" : "private final Node node;",
      "info" : "FieldDeclaration[49177-49201]:FieldDeclaration[49466-49490]"
    }, {
      "left" : "private final boolean isExtern;",
      "right" : "private final boolean isExtern;",
      "info" : "FieldDeclaration[49206-49237]:FieldDeclaration[49495-49526]"
    }, {
      "left" : "private final String ownerName;",
      "right" : "private final String ownerName;",
      "info" : "FieldDeclaration[49242-49273]:FieldDeclaration[49531-49562]"
    }, {
      "left" : "private StubDeclaration(Node node, boolean isExtern, String ownerName)",
      "right" : "private StubDeclaration(Node node, boolean isExtern, String ownerName)",
      "info" : "MethodDeclaration[49279-49447]:MethodDeclaration[49568-49736]"
    }, {
      "left" : "GlobalScopeBuilder",
      "right" : "GlobalScopeBuilder",
      "info" : "TypeDeclaration[49455-52964]:TypeDeclaration[49744-53253]"
    }, {
      "left" : "private GlobalScopeBuilder(Scope scope)",
      "right" : "private GlobalScopeBuilder(Scope scope)",
      "info" : "MethodDeclaration[49641-49708]:MethodDeclaration[49930-49997]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[49714-50447]:MethodDeclaration[50003-50736]"
    }, {
      "left" : "void maybeDeclareQualifiedName(\n        NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "right" : "void maybeDeclareQualifiedName(\n        NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "info" : "MethodDeclaration[50453-50695]:MethodDeclaration[50742-50984]"
    }, {
      "left" : "private void checkForTypedef(\n        NodeTraversal t, Node candidate, JSDocInfo info)",
      "right" : "private void checkForTypedef(\n        NodeTraversal t, Node candidate, JSDocInfo info)",
      "info" : "MethodDeclaration[50701-51804]:MethodDeclaration[50990-52093]"
    }, {
      "left" : "// TODO(nicksantos): Kill this.\n    private void checkForOldStyleTypedef(NodeTraversal t, Node candidate)",
      "right" : "// TODO(nicksantos): Kill this.\n    private void checkForOldStyleTypedef(NodeTraversal t, Node candidate)",
      "info" : "MethodDeclaration[51810-52960]:MethodDeclaration[52099-53249]"
    }, {
      "left" : "LocalScopeBuilder",
      "right" : "LocalScopeBuilder",
      "info" : "TypeDeclaration[52994-55815]:TypeDeclaration[53283-56104]"
    }, {
      "left" : "private LocalScopeBuilder(Scope scope)",
      "right" : "private LocalScopeBuilder(Scope scope)",
      "info" : "MethodDeclaration[53169-53302]:MethodDeclaration[53458-53591]"
    }, {
      "left" : "void build()",
      "right" : "void build()",
      "info" : "MethodDeclaration[53308-53456]:MethodDeclaration[53597-53745]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[53462-54004]:MethodDeclaration[53751-54293]"
    }, {
      "left" : "private void handleFunctionInputs(Node fnNode)",
      "right" : "private void handleFunctionInputs(Node fnNode)",
      "info" : "MethodDeclaration[54010-54875]:MethodDeclaration[54299-55164]"
    }, {
      "left" : "private void declareArguments(Node functionNode)",
      "right" : "private void declareArguments(Node functionNode)",
      "info" : "MethodDeclaration[54881-55787]:MethodDeclaration[55170-56076]"
    } ],
    "mappings" : [
 {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[4648-4653]:Modifier[4648-4653]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[4654-4659]:TYPE_DECLARATION_KIND[4654-4659]"
    }, {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "SimpleName[4660-4677]:SimpleName[4660-4677]"
    }, {
      "left" : "ScopeCreator",
      "right" : "ScopeCreator",
      "info" : "SimpleType[4689-4701]:SimpleType[4689-4701]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5857-5864]:Modifier[5857-5864]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[5865-5870]:TYPE_DECLARATION_KIND[5865-5870]"
    }, {
      "left" : "DeferredSetType",
      "right" : "DeferredSetType",
      "info" : "SimpleName[5871-5886]:SimpleName[5871-5886]"
    }, {
      "left" : "DeferredSetType",
      "right" : "DeferredSetType",
      "info" : "SimpleName[5938-5953]:SimpleName[5938-5953]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[5954-5963]:SingleVariableDeclaration[5954-5963]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[5965-5976]:SingleVariableDeclaration[5965-5976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5978-6275]:Block[5978-6275]"
    }, {
      "left" : "Preconditions.checkNotNull(node);",
      "right" : "Preconditions.checkNotNull(node);",
      "info" : "ExpressionStatement[5986-6019]:ExpressionStatement[5986-6019]"
    }, {
      "left" : "Preconditions.checkNotNull(type);",
      "right" : "Preconditions.checkNotNull(type);",
      "info" : "ExpressionStatement[6026-6059]:ExpressionStatement[6026-6059]"
    }, {
      "left" : "this.node = node;",
      "right" : "this.node = node;",
      "info" : "ExpressionStatement[6066-6083]:ExpressionStatement[6066-6083]"
    }, {
      "left" : "this.type = type;",
      "right" : "this.type = type;",
      "info" : "ExpressionStatement[6090-6107]:ExpressionStatement[6090-6107]"
    }, {
      "left" : "node.setJSType(type);",
      "right" : "node.setJSType(type);",
      "info" : "ExpressionStatement[6248-6269]:ExpressionStatement[6248-6269]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6281-6285]:PrimitiveType[6281-6285]"
    }, {
      "left" : "resolve",
      "right" : "resolve",
      "info" : "SimpleName[6286-6293]:SimpleName[6286-6293]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[6294-6305]:SingleVariableDeclaration[6294-6305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6307-6383]:Block[6307-6383]"
    }, {
      "left" : "node.setJSType(type.resolve(typeParsingErrorReporter, scope));",
      "right" : "node.setJSType(type.resolve(typeParsingErrorReporter, scope));",
      "info" : "ExpressionStatement[6315-6377]:ExpressionStatement[6315-6377]"
    }, {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "SimpleName[6391-6408]:SimpleName[6391-6408]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[6409-6434]:SingleVariableDeclaration[6409-6434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6436-6493]:Block[6436-6493]"
    }, {
      "left" : "this(compiler, compiler.getCodingConvention());",
      "right" : "this(compiler, compiler.getCodingConvention());",
      "info" : "ConstructorInvocation[6442-6489]:ConstructorInvocation[6442-6489]"
    }, {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "SimpleName[6497-6514]:SimpleName[6497-6514]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[6515-6540]:SingleVariableDeclaration[6515-6540]"
    }, {
      "left" : "CodingConvention codingConvention",
      "right" : "CodingConvention codingConvention",
      "info" : "SingleVariableDeclaration[6548-6581]:SingleVariableDeclaration[6548-6581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6583-6835]:Block[6583-6835]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[6589-6614]:ExpressionStatement[6589-6614]"
    }, {
      "left" : "this.validator = compiler.getTypeValidator();",
      "right" : "this.validator = compiler.getTypeValidator();",
      "info" : "ExpressionStatement[6619-6664]:ExpressionStatement[6619-6664]"
    }, {
      "left" : "this.codingConvention = codingConvention;",
      "right" : "this.codingConvention = codingConvention;",
      "info" : "ExpressionStatement[6669-6710]:ExpressionStatement[6669-6710]"
    }, {
      "left" : "this.typeRegistry = compiler.getTypeRegistry();",
      "right" : "this.typeRegistry = compiler.getTypeRegistry();",
      "info" : "ExpressionStatement[6715-6762]:ExpressionStatement[6715-6762]"
    }, {
      "left" : "this.typeParsingErrorReporter = typeRegistry.getErrorReporter();",
      "right" : "this.typeParsingErrorReporter = typeRegistry.getErrorReporter();",
      "info" : "ExpressionStatement[6767-6831]:ExpressionStatement[6767-6831]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6976-6982]:Modifier[6976-6982]"
    }, {
      "left" : "Scope",
      "right" : "Scope",
      "info" : "SimpleType[6983-6988]:SimpleType[6983-6988]"
    }, {
      "left" : "createScope",
      "right" : "createScope",
      "info" : "SimpleName[6989-7000]:SimpleName[6989-7000]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[7001-7010]:SingleVariableDeclaration[7001-7010]"
    }, {
      "left" : "Scope parent",
      "right" : "Scope parent",
      "info" : "SingleVariableDeclaration[7012-7024]:SingleVariableDeclaration[7012-7024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7026-8701]:Block[7026-8701]"
    }, {
      "left" : "Scope newScope = null;",
      "right" : "Scope newScope = null;",
      "info" : "VariableDeclarationStatement[7221-7243]:VariableDeclarationStatement[7221-7243]"
    }, {
      "left" : "AbstractScopeBuilder scopeBuilder = null;",
      "right" : "AbstractScopeBuilder scopeBuilder = null;",
      "info" : "VariableDeclarationStatement[7248-7289]:VariableDeclarationStatement[7248-7289]"
    }, {
      "left" : "if (parent == null)",
      "right" : "if (parent == null)",
      "info" : "IfStatement[7294-7802]:IfStatement[7294-7802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7314-7597]:Block[7314-7597]"
    }, {
      "left" : "newScope = createInitialScope(root);",
      "right" : "newScope = createInitialScope(root);",
      "info" : "ExpressionStatement[7373-7409]:ExpressionStatement[7373-7409]"
    }, {
      "left" : "GlobalScopeBuilder globalScopeBuilder = new GlobalScopeBuilder(newScope);",
      "right" : "GlobalScopeBuilder globalScopeBuilder = new GlobalScopeBuilder(newScope);",
      "info" : "VariableDeclarationStatement[7417-7490]:VariableDeclarationStatement[7417-7490]"
    }, {
      "left" : "scopeBuilder = globalScopeBuilder;",
      "right" : "scopeBuilder = globalScopeBuilder;",
      "info" : "ExpressionStatement[7497-7531]:ExpressionStatement[7497-7531]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, scopeBuilder);",
      "right" : "NodeTraversal.traverse(compiler, root, scopeBuilder);",
      "info" : "ExpressionStatement[7538-7591]:ExpressionStatement[7538-7591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7603-7802]:Block[7603-7802]"
    }, {
      "left" : "newScope = new Scope(parent, root);",
      "right" : "newScope = new Scope(parent, root);",
      "info" : "ExpressionStatement[7611-7646]:ExpressionStatement[7611-7646]"
    }, {
      "left" : "LocalScopeBuilder localScopeBuilder = new LocalScopeBuilder(newScope);",
      "right" : "LocalScopeBuilder localScopeBuilder = new LocalScopeBuilder(newScope);",
      "info" : "VariableDeclarationStatement[7653-7723]:VariableDeclarationStatement[7653-7723]"
    }, {
      "left" : "scopeBuilder = localScopeBuilder;",
      "right" : "scopeBuilder = localScopeBuilder;",
      "info" : "ExpressionStatement[7730-7763]:ExpressionStatement[7730-7763]"
    }, {
      "left" : "localScopeBuilder.build();",
      "right" : "localScopeBuilder.build();",
      "info" : "ExpressionStatement[7770-7796]:ExpressionStatement[7770-7796]"
    }, {
      "left" : "scopeBuilder.resolveStubDeclarations();",
      "right" : "scopeBuilder.resolveStubDeclarations();",
      "info" : "ExpressionStatement[7808-7847]:ExpressionStatement[7808-7847]"
    }, {
      "left" : "scopeBuilder.resolveTypes();",
      "right" : "scopeBuilder.resolveTypes();",
      "info" : "ExpressionStatement[7852-7880]:ExpressionStatement[7852-7880]"
    }, {
      "left" : "for (Node functionNode : scopeBuilder.nonExternFunctions)",
      "right" : "for (Node functionNode : scopeBuilder.nonExternFunctions)",
      "info" : "EnhancedForStatement[8048-8520]:EnhancedForStatement[8048-8520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8106-8520]:Block[8106-8520]"
    }, {
      "left" : "JSType type = functionNode.getJSType();",
      "right" : "JSType type = functionNode.getJSType();",
      "info" : "VariableDeclarationStatement[8114-8153]:VariableDeclarationStatement[8114-8153]"
    }, {
      "left" : "if (type != null && type instanceof FunctionType)",
      "right" : "if (type != null && type instanceof FunctionType)",
      "info" : "IfStatement[8160-8514]:IfStatement[8160-8514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8210-8514]:Block[8210-8514]"
    }, {
      "left" : "FunctionType fnType = (FunctionType) type;",
      "right" : "FunctionType fnType = (FunctionType) type;",
      "info" : "VariableDeclarationStatement[8220-8262]:VariableDeclarationStatement[8220-8262]"
    }, {
      "left" : "ObjectType fnThisType = fnType.getTypeOfThis();",
      "right" : "ObjectType fnThisType = fnType.getTypeOfThis();",
      "info" : "VariableDeclarationStatement[8271-8318]:VariableDeclarationStatement[8271-8318]"
    }, {
      "left" : "if (!fnThisType.isUnknownType())",
      "right" : "if (!fnThisType.isUnknownType())",
      "info" : "IfStatement[8327-8506]:IfStatement[8327-8506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8360-8506]:Block[8360-8506]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, functionNode.getLastChild(),\n              scopeBuilder.new CollectProperties(fnThisType));",
      "right" : "NodeTraversal.traverse(compiler, functionNode.getLastChild(),\n              scopeBuilder.new CollectProperties(fnThisType));",
      "info" : "ExpressionStatement[8372-8496]:ExpressionStatement[8372-8496]"
    }, {
      "left" : "if (parent == null)",
      "right" : "if (parent == null)",
      "info" : "IfStatement[8526-8676]:IfStatement[8526-8676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8546-8676]:Block[8546-8676]"
    }, {
      "left" : "codingConvention.defineDelegateProxyPrototypeProperties(\n          typeRegistry, newScope, delegateProxyPrototypes);",
      "right" : "codingConvention.defineDelegateProxyPrototypeProperties(\n          typeRegistry, newScope, delegateProxyPrototypes);",
      "info" : "ExpressionStatement[8554-8670]:ExpressionStatement[8554-8670]"
    }, {
      "left" : "return newScope;",
      "right" : "return newScope;",
      "info" : "ReturnStatement[8681-8697]:ReturnStatement[8681-8697]"
    }, {
      "left" : "@VisibleForTesting",
      "right" : "@VisibleForTesting",
      "info" : "MarkerAnnotation[8833-8851]:MarkerAnnotation[8833-8851]"
    }, {
      "left" : "Scope",
      "right" : "Scope",
      "info" : "SimpleType[8854-8859]:SimpleType[8854-8859]"
    }, {
      "left" : "createInitialScope",
      "right" : "createInitialScope",
      "info" : "SimpleName[8860-8878]:SimpleName[8860-8878]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[8879-8888]:SingleVariableDeclaration[8879-8888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8890-10449]:Block[8890-10449]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, new DiscoverEnums(typeRegistry));",
      "right" : "NodeTraversal.traverse(compiler, root, new DiscoverEnums(typeRegistry));",
      "info" : "ExpressionStatement[8897-8969]:ExpressionStatement[8897-8969]"
    }, {
      "left" : "Scope s = new Scope(root, compiler);",
      "right" : "Scope s = new Scope(root, compiler);",
      "info" : "VariableDeclarationStatement[8975-9011]:VariableDeclarationStatement[8975-9011]"
    }, {
      "left" : "declareNativeFunctionType(s, ARRAY_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, ARRAY_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9016-9066]:ExpressionStatement[9016-9066]"
    }, {
      "left" : "declareNativeFunctionType(s, BOOLEAN_OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, BOOLEAN_OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9071-9130]:ExpressionStatement[9071-9130]"
    }, {
      "left" : "declareNativeFunctionType(s, DATE_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, DATE_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9135-9184]:ExpressionStatement[9135-9184]"
    }, {
      "left" : "declareNativeFunctionType(s, ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9189-9239]:ExpressionStatement[9189-9239]"
    }, {
      "left" : "declareNativeFunctionType(s, EVAL_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, EVAL_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9244-9299]:ExpressionStatement[9244-9299]"
    }, {
      "left" : "declareNativeFunctionType(s, FUNCTION_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, FUNCTION_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9304-9357]:ExpressionStatement[9304-9357]"
    }, {
      "left" : "declareNativeFunctionType(s, NUMBER_OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, NUMBER_OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9362-9420]:ExpressionStatement[9362-9420]"
    }, {
      "left" : "declareNativeFunctionType(s, OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9425-9476]:ExpressionStatement[9425-9476]"
    }, {
      "left" : "declareNativeFunctionType(s, RANGE_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, RANGE_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9481-9537]:ExpressionStatement[9481-9537]"
    }, {
      "left" : "declareNativeFunctionType(s, REFERENCE_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, REFERENCE_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9542-9602]:ExpressionStatement[9542-9602]"
    }, {
      "left" : "declareNativeFunctionType(s, REGEXP_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, REGEXP_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9607-9658]:ExpressionStatement[9607-9658]"
    }, {
      "left" : "declareNativeFunctionType(s, STRING_OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, STRING_OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9663-9721]:ExpressionStatement[9663-9721]"
    }, {
      "left" : "declareNativeFunctionType(s, SYNTAX_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, SYNTAX_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9726-9783]:ExpressionStatement[9726-9783]"
    }, {
      "left" : "declareNativeFunctionType(s, TYPE_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, TYPE_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9788-9843]:ExpressionStatement[9788-9843]"
    }, {
      "left" : "declareNativeFunctionType(s, URI_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, URI_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9848-9902]:ExpressionStatement[9848-9902]"
    }, {
      "left" : "declareNativeValueType(s, \"undefined\", VOID_TYPE);",
      "right" : "declareNativeValueType(s, \"undefined\", VOID_TYPE);",
      "info" : "ExpressionStatement[9907-9957]:ExpressionStatement[9907-9957]"
    }, {
      "left" : "declareNativeValueType(s, \"goog.typedef\", NO_TYPE);",
      "right" : "declareNativeValueType(s, \"goog.typedef\", NO_TYPE);",
      "info" : "ExpressionStatement[10142-10193]:ExpressionStatement[10142-10193]"
    }, {
      "left" : "declareNativeValueType(s, \"ActiveXObject\", NO_OBJECT_TYPE);",
      "right" : "declareNativeValueType(s, \"ActiveXObject\", NO_OBJECT_TYPE);",
      "info" : "ExpressionStatement[10371-10430]:ExpressionStatement[10371-10430]"
    }, {
      "left" : "return s;",
      "right" : "return s;",
      "info" : "ReturnStatement[10436-10445]:ReturnStatement[10436-10445]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10453-10460]:Modifier[10453-10460]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10461-10465]:PrimitiveType[10461-10465]"
    }, {
      "left" : "declareNativeFunctionType",
      "right" : "declareNativeFunctionType",
      "info" : "SimpleName[10466-10491]:SimpleName[10466-10491]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[10492-10503]:SingleVariableDeclaration[10492-10503]"
    }, {
      "left" : "JSTypeNative tId",
      "right" : "JSTypeNative tId",
      "info" : "SingleVariableDeclaration[10505-10521]:SingleVariableDeclaration[10505-10521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10523-10757]:Block[10523-10757]"
    }, {
      "left" : "FunctionType t = typeRegistry.getNativeFunctionType(tId);",
      "right" : "FunctionType t = typeRegistry.getNativeFunctionType(tId);",
      "info" : "VariableDeclarationStatement[10529-10586]:VariableDeclarationStatement[10529-10586]"
    }, {
      "left" : "declareNativeType(scope, t.getInstanceType().getReferenceName(), t);",
      "right" : "declareNativeType(scope, t.getInstanceType().getReferenceName(), t);",
      "info" : "ExpressionStatement[10591-10659]:ExpressionStatement[10591-10659]"
    }, {
      "left" : "declareNativeType(\n        scope, t.getPrototype().getReferenceName(), t.getPrototype());",
      "right" : "declareNativeType(\n        scope, t.getPrototype().getReferenceName(), t.getPrototype());",
      "info" : "ExpressionStatement[10664-10753]:ExpressionStatement[10664-10753]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10761-10768]:Modifier[10761-10768]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10769-10773]:PrimitiveType[10769-10773]"
    }, {
      "left" : "declareNativeValueType",
      "right" : "declareNativeValueType",
      "info" : "SimpleName[10774-10796]:SimpleName[10774-10796]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[10797-10808]:SingleVariableDeclaration[10797-10808]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[10810-10821]:SingleVariableDeclaration[10810-10821]"
    }, {
      "left" : "JSTypeNative tId",
      "right" : "JSTypeNative tId",
      "info" : "SingleVariableDeclaration[10829-10845]:SingleVariableDeclaration[10829-10845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10847-10921]:Block[10847-10921]"
    }, {
      "left" : "declareNativeType(scope, name, typeRegistry.getNativeType(tId));",
      "right" : "declareNativeType(scope, name, typeRegistry.getNativeType(tId));",
      "info" : "ExpressionStatement[10853-10917]:ExpressionStatement[10853-10917]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10925-10932]:Modifier[10925-10932]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10933-10937]:PrimitiveType[10933-10937]"
    }, {
      "left" : "declareNativeType",
      "right" : "declareNativeType",
      "info" : "SimpleName[10938-10955]:SimpleName[10938-10955]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[10956-10967]:SingleVariableDeclaration[10956-10967]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[10969-10980]:SingleVariableDeclaration[10969-10980]"
    }, {
      "left" : "JSType t",
      "right" : "JSType t",
      "info" : "SingleVariableDeclaration[10982-10990]:SingleVariableDeclaration[10982-10990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10992-11044]:Block[10992-11044]"
    }, {
      "left" : "scope.declare(name, null, t, null, false);",
      "right" : "scope.declare(name, null, t, null, false);",
      "info" : "ExpressionStatement[10998-11040]:ExpressionStatement[10998-11040]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11048-11055]:Modifier[11048-11055]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11056-11062]:Modifier[11056-11062]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[11063-11068]:TYPE_DECLARATION_KIND[11063-11068]"
    }, {
      "left" : "DiscoverEnums",
      "right" : "DiscoverEnums",
      "info" : "SimpleName[11069-11082]:SimpleName[11069-11082]"
    }, {
      "left" : "AbstractShallowStatementCallback",
      "right" : "AbstractShallowStatementCallback",
      "info" : "SimpleType[11091-11123]:SimpleType[11091-11123]"
    }, {
      "left" : "DiscoverEnums",
      "right" : "DiscoverEnums",
      "info" : "SimpleName[11174-11187]:SimpleName[11174-11187]"
    }, {
      "left" : "JSTypeRegistry registry",
      "right" : "JSTypeRegistry registry",
      "info" : "SingleVariableDeclaration[11188-11211]:SingleVariableDeclaration[11188-11211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11213-11252]:Block[11213-11252]"
    }, {
      "left" : "this.registry = registry;",
      "right" : "this.registry = registry;",
      "info" : "ExpressionStatement[11221-11246]:ExpressionStatement[11221-11246]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11258-11267]:MarkerAnnotation[11258-11267]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11272-11278]:Modifier[11272-11278]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11279-11283]:PrimitiveType[11279-11283]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[11284-11289]:SimpleName[11284-11289]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[11290-11305]:SingleVariableDeclaration[11290-11305]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[11307-11316]:SingleVariableDeclaration[11307-11316]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[11318-11329]:SingleVariableDeclaration[11318-11329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11331-11939]:Block[11331-11939]"
    }, {
      "left" : "Node nameNode = null;",
      "right" : "Node nameNode = null;",
      "info" : "VariableDeclarationStatement[11339-11360]:VariableDeclarationStatement[11339-11360]"
    }, {
      "left" : "switch (node.getType()) {\n        case Token.VAR:\n          for (Node child = node.getFirstChild();\n               child != null; child = child.getNext()) {\n            identifyEnumInNameNode(\n                child, NodeUtil.getInfoForNameNode(child));\n          }\n          break;\n        case Token.EXPR_RESULT:\n          Node maybeAssign = node.getFirstChild();\n          if (maybeAssign.getType() == Token.ASSIGN) {\n            identifyEnumInNameNode(\n                maybeAssign.getFirstChild(), maybeAssign.getJSDocInfo());\n          }\n          break;\n      }",
      "right" : "switch (node.getType()) {\n        case Token.VAR:\n          for (Node child = node.getFirstChild();\n               child != null; child = child.getNext()) {\n            identifyEnumInNameNode(\n                child, NodeUtil.getInfoForNameNode(child));\n          }\n          break;\n        case Token.EXPR_RESULT:\n          Node maybeAssign = node.getFirstChild();\n          if (maybeAssign.getType() == Token.ASSIGN) {\n            identifyEnumInNameNode(\n                maybeAssign.getFirstChild(), maybeAssign.getJSDocInfo());\n          }\n          break;\n      }",
      "info" : "SwitchStatement[11367-11933]:SwitchStatement[11367-11933]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[11401-11416]:SwitchCase[11401-11416]"
    }, {
      "left" : "for (Node child = node.getFirstChild();\n               child != null; child = child.getNext())",
      "right" : "for (Node child = node.getFirstChild();\n               child != null; child = child.getNext())",
      "info" : "ForStatement[11427-11631]:ForStatement[11427-11631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11522-11631]:Block[11522-11631]"
    }, {
      "left" : "identifyEnumInNameNode(\n                child, NodeUtil.getInfoForNameNode(child));",
      "right" : "identifyEnumInNameNode(\n                child, NodeUtil.getInfoForNameNode(child));",
      "info" : "ExpressionStatement[11536-11619]:ExpressionStatement[11536-11619]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11642-11648]:BreakStatement[11642-11648]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[11657-11680]:SwitchCase[11657-11680]"
    }, {
      "left" : "Node maybeAssign = node.getFirstChild();",
      "right" : "Node maybeAssign = node.getFirstChild();",
      "info" : "VariableDeclarationStatement[11691-11731]:VariableDeclarationStatement[11691-11731]"
    }, {
      "left" : "if (maybeAssign.getType() == Token.ASSIGN)",
      "right" : "if (maybeAssign.getType() == Token.ASSIGN)",
      "info" : "IfStatement[11742-11908]:IfStatement[11742-11908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11785-11908]:Block[11785-11908]"
    }, {
      "left" : "identifyEnumInNameNode(\n                maybeAssign.getFirstChild(), maybeAssign.getJSDocInfo());",
      "right" : "identifyEnumInNameNode(\n                maybeAssign.getFirstChild(), maybeAssign.getJSDocInfo());",
      "info" : "ExpressionStatement[11799-11896]:ExpressionStatement[11799-11896]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11919-11925]:BreakStatement[11919-11925]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11945-11952]:Modifier[11945-11952]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11953-11957]:PrimitiveType[11953-11957]"
    }, {
      "left" : "identifyEnumInNameNode",
      "right" : "identifyEnumInNameNode",
      "info" : "SimpleName[11958-11980]:SimpleName[11958-11980]"
    }, {
      "left" : "Node nameNode",
      "right" : "Node nameNode",
      "info" : "SingleVariableDeclaration[11981-11994]:SingleVariableDeclaration[11981-11994]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[11996-12010]:SingleVariableDeclaration[11996-12010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12012-12148]:Block[12012-12148]"
    }, {
      "left" : "if (info != null && info.hasEnumParameterType())",
      "right" : "if (info != null && info.hasEnumParameterType())",
      "info" : "IfStatement[12020-12142]:IfStatement[12020-12142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12069-12142]:Block[12069-12142]"
    }, {
      "left" : "registry.identifyEnumName(nameNode.getQualifiedName());",
      "right" : "registry.identifyEnumName(nameNode.getQualifiedName());",
      "info" : "ExpressionStatement[12079-12134]:ExpressionStatement[12079-12134]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12362-12369]:Modifier[12362-12369]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12370-12376]:Modifier[12370-12376]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[12377-12381]:SimpleType[12377-12381]"
    }, {
      "left" : "getPrototypePropertyOwner",
      "right" : "getPrototypePropertyOwner",
      "info" : "SimpleName[12382-12407]:SimpleName[12382-12407]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[12408-12414]:SingleVariableDeclaration[12408-12414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12416-12794]:Block[12416-12794]"
    }, {
      "left" : "if (n.getType() == Token.GETPROP)",
      "right" : "if (n.getType() == Token.GETPROP)",
      "info" : "IfStatement[12422-12773]:IfStatement[12422-12773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12456-12773]:Block[12456-12773]"
    }, {
      "left" : "Node firstChild = n.getFirstChild();",
      "right" : "Node firstChild = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[12464-12500]:VariableDeclarationStatement[12464-12500]"
    }, {
      "left" : "if (firstChild.getType() == Token.GETPROP &&\n          firstChild.getLastChild().getString().equals(\"prototype\"))",
      "right" : "if (firstChild.getType() == Token.GETPROP &&\n          firstChild.getLastChild().getString().equals(\"prototype\"))",
      "info" : "IfStatement[12507-12767]:IfStatement[12507-12767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12621-12767]:Block[12621-12767]"
    }, {
      "left" : "Node maybeOwner = firstChild.getFirstChild();",
      "right" : "Node maybeOwner = firstChild.getFirstChild();",
      "info" : "VariableDeclarationStatement[12631-12676]:VariableDeclarationStatement[12631-12676]"
    }, {
      "left" : "if (maybeOwner.isQualifiedName())",
      "right" : "if (maybeOwner.isQualifiedName())",
      "info" : "IfStatement[12685-12759]:IfStatement[12685-12759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12719-12759]:Block[12719-12759]"
    }, {
      "left" : "return maybeOwner;",
      "right" : "return maybeOwner;",
      "info" : "ReturnStatement[12731-12749]:ReturnStatement[12731-12749]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12778-12790]:ReturnStatement[12778-12790]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12798-12805]:Modifier[12798-12805]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12806-12810]:PrimitiveType[12806-12810]"
    }, {
      "left" : "attachLiteralTypes",
      "right" : "attachLiteralTypes",
      "info" : "SimpleName[12811-12829]:SimpleName[12811-12829]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[12830-12836]:SingleVariableDeclaration[12830-12836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12838-13795]:Block[12838-13795]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.NULL:\n        n.setJSType(getNativeType(NULL_TYPE));\n        break;\n\n      case Token.VOID:\n        n.setJSType(getNativeType(VOID_TYPE));\n        break;\n\n      case Token.STRING:\n        n.setJSType(getNativeType(STRING_TYPE));\n        break;\n\n      case Token.NUMBER:\n        n.setJSType(getNativeType(NUMBER_TYPE));\n        break;\n\n      case Token.TRUE:\n      case Token.FALSE:\n        n.setJSType(getNativeType(BOOLEAN_TYPE));\n        break;\n\n      case Token.REGEXP:\n        n.setJSType(getNativeType(REGEXP_TYPE));\n        break;\n\n      case Token.REF_SPECIAL:\n        n.setJSType(getNativeType(UNKNOWN_TYPE));\n        break;\n\n      case Token.OBJECTLIT:\n        if (n.getJSType() == null) {\n          n.setJSType(typeRegistry.createAnonymousObjectType());\n        }\n        break;\n\n      // NOTE(nicksantos): If we ever support Array tuples,\n      // we will need to put ARRAYLIT here as well.\n    }",
      "right" : "switch (n.getType()) {\n      case Token.NULL:\n        n.setJSType(getNativeType(NULL_TYPE));\n        break;\n\n      case Token.VOID:\n        n.setJSType(getNativeType(VOID_TYPE));\n        break;\n\n      case Token.STRING:\n        n.setJSType(getNativeType(STRING_TYPE));\n        break;\n\n      case Token.NUMBER:\n        n.setJSType(getNativeType(NUMBER_TYPE));\n        break;\n\n      case Token.TRUE:\n      case Token.FALSE:\n        n.setJSType(getNativeType(BOOLEAN_TYPE));\n        break;\n\n      case Token.REGEXP:\n        n.setJSType(getNativeType(REGEXP_TYPE));\n        break;\n\n      case Token.REF_SPECIAL:\n        n.setJSType(getNativeType(UNKNOWN_TYPE));\n        break;\n\n      case Token.OBJECTLIT:\n        if (n.getJSType() == null) {\n          n.setJSType(typeRegistry.createAnonymousObjectType());\n        }\n        break;\n\n      // NOTE(nicksantos): If we ever support Array tuples,\n      // we will need to put ARRAYLIT here as well.\n    }",
      "info" : "SwitchStatement[12844-13791]:SwitchStatement[12844-13791]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[12873-12889]:SwitchCase[12873-12889]"
    }, {
      "left" : "n.setJSType(getNativeType(NULL_TYPE));",
      "right" : "n.setJSType(getNativeType(NULL_TYPE));",
      "info" : "ExpressionStatement[12898-12936]:ExpressionStatement[12898-12936]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12945-12951]:BreakStatement[12945-12951]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[12959-12975]:SwitchCase[12959-12975]"
    }, {
      "left" : "n.setJSType(getNativeType(VOID_TYPE));",
      "right" : "n.setJSType(getNativeType(VOID_TYPE));",
      "info" : "ExpressionStatement[12984-13022]:ExpressionStatement[12984-13022]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13031-13037]:BreakStatement[13031-13037]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[13045-13063]:SwitchCase[13045-13063]"
    }, {
      "left" : "n.setJSType(getNativeType(STRING_TYPE));",
      "right" : "n.setJSType(getNativeType(STRING_TYPE));",
      "info" : "ExpressionStatement[13072-13112]:ExpressionStatement[13072-13112]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13121-13127]:BreakStatement[13121-13127]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[13135-13153]:SwitchCase[13135-13153]"
    }, {
      "left" : "n.setJSType(getNativeType(NUMBER_TYPE));",
      "right" : "n.setJSType(getNativeType(NUMBER_TYPE));",
      "info" : "ExpressionStatement[13162-13202]:ExpressionStatement[13162-13202]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13211-13217]:BreakStatement[13211-13217]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[13225-13241]:SwitchCase[13225-13241]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[13248-13265]:SwitchCase[13248-13265]"
    }, {
      "left" : "n.setJSType(getNativeType(BOOLEAN_TYPE));",
      "right" : "n.setJSType(getNativeType(BOOLEAN_TYPE));",
      "info" : "ExpressionStatement[13274-13315]:ExpressionStatement[13274-13315]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13324-13330]:BreakStatement[13324-13330]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[13338-13356]:SwitchCase[13338-13356]"
    }, {
      "left" : "n.setJSType(getNativeType(REGEXP_TYPE));",
      "right" : "n.setJSType(getNativeType(REGEXP_TYPE));",
      "info" : "ExpressionStatement[13365-13405]:ExpressionStatement[13365-13405]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13414-13420]:BreakStatement[13414-13420]"
    }, {
      "left" : "case Token.REF_SPECIAL:",
      "right" : "case Token.REF_SPECIAL:",
      "info" : "SwitchCase[13428-13451]:SwitchCase[13428-13451]"
    }, {
      "left" : "n.setJSType(getNativeType(UNKNOWN_TYPE));",
      "right" : "n.setJSType(getNativeType(UNKNOWN_TYPE));",
      "info" : "ExpressionStatement[13460-13501]:ExpressionStatement[13460-13501]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13510-13516]:BreakStatement[13510-13516]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[13524-13545]:SwitchCase[13524-13545]"
    }, {
      "left" : "if (n.getJSType() == null)",
      "right" : "if (n.getJSType() == null)",
      "info" : "IfStatement[13554-13657]:IfStatement[13554-13657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13581-13657]:Block[13581-13657]"
    }, {
      "left" : "n.setJSType(typeRegistry.createAnonymousObjectType());",
      "right" : "n.setJSType(typeRegistry.createAnonymousObjectType());",
      "info" : "ExpressionStatement[13593-13647]:ExpressionStatement[13593-13647]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13666-13672]:BreakStatement[13666-13672]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13799-13806]:Modifier[13799-13806]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[13807-13813]:SimpleType[13807-13813]"
    }, {
      "left" : "getNativeType",
      "right" : "getNativeType",
      "info" : "SimpleName[13814-13827]:SimpleName[13814-13827]"
    }, {
      "left" : "JSTypeNative nativeType",
      "right" : "JSTypeNative nativeType",
      "info" : "SingleVariableDeclaration[13828-13851]:SingleVariableDeclaration[13828-13851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13853-13909]:Block[13853-13909]"
    }, {
      "left" : "return typeRegistry.getNativeType(nativeType);",
      "right" : "return typeRegistry.getNativeType(nativeType);",
      "info" : "ReturnStatement[13859-13905]:ReturnStatement[13859-13905]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13913-13920]:Modifier[13913-13920]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[13921-13929]:Modifier[13921-13929]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[13930-13935]:TYPE_DECLARATION_KIND[13930-13935]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleName[13936-13956]:SimpleName[13936-13956]"
    }, {
      "left" : "NodeTraversal.Callback",
      "right" : "NodeTraversal.Callback",
      "info" : "SimpleType[13974-13996]:SimpleType[13974-13996]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14693-14700]:Modifier[14693-14700]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleName[14701-14721]:SimpleName[14701-14721]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[14722-14733]:SingleVariableDeclaration[14722-14733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14735-14768]:Block[14735-14768]"
    }, {
      "left" : "this.scope = scope;",
      "right" : "this.scope = scope;",
      "info" : "ExpressionStatement[14743-14762]:ExpressionStatement[14743-14762]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14774-14778]:PrimitiveType[14774-14778]"
    }, {
      "left" : "setDeferredType",
      "right" : "setDeferredType",
      "info" : "SimpleName[14779-14794]:SimpleName[14779-14794]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[14795-14804]:SingleVariableDeclaration[14795-14804]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[14806-14817]:SingleVariableDeclaration[14806-14817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14819-14887]:Block[14819-14887]"
    }, {
      "left" : "deferredSetTypes.add(new DeferredSetType(node, type));",
      "right" : "deferredSetTypes.add(new DeferredSetType(node, type));",
      "info" : "ExpressionStatement[14827-14881]:ExpressionStatement[14827-14881]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14893-14897]:PrimitiveType[14893-14897]"
    }, {
      "left" : "resolveTypes",
      "right" : "resolveTypes",
      "info" : "SimpleName[14898-14910]:SimpleName[14898-14910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14913-15393]:Block[14913-15393]"
    }, {
      "left" : "for (DeferredSetType deferred : deferredSetTypes)",
      "right" : "for (DeferredSetType deferred : deferredSetTypes)",
      "info" : "EnhancedForStatement[14970-15062]:EnhancedForStatement[14970-15062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15020-15062]:Block[15020-15062]"
    }, {
      "left" : "deferred.resolve(scope);",
      "right" : "deferred.resolve(scope);",
      "info" : "ExpressionStatement[15030-15054]:ExpressionStatement[15030-15054]"
    }, {
      "left" : "Iterator<Var> vars = scope.getVars();",
      "right" : "Iterator<Var> vars = scope.getVars();",
      "info" : "VariableDeclarationStatement[15125-15162]:VariableDeclarationStatement[15125-15162]"
    }, {
      "left" : "while (vars.hasNext())",
      "right" : "while (vars.hasNext())",
      "info" : "WhileStatement[15169-15260]:WhileStatement[15169-15260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15192-15260]:Block[15192-15260]"
    }, {
      "left" : "vars.next().resolveType(typeParsingErrorReporter);",
      "right" : "vars.next().resolveType(typeParsingErrorReporter);",
      "info" : "ExpressionStatement[15202-15252]:ExpressionStatement[15202-15252]"
    }, {
      "left" : "typeRegistry.resolveTypesInScope(scope);",
      "right" : "typeRegistry.resolveTypesInScope(scope);",
      "info" : "ExpressionStatement[15347-15387]:ExpressionStatement[15347-15387]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15399-15408]:MarkerAnnotation[15399-15408]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15413-15419]:Modifier[15413-15419]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[15420-15425]:Modifier[15420-15425]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[15426-15433]:PrimitiveType[15426-15433]"
    }, {
      "left" : "shouldTraverse",
      "right" : "shouldTraverse",
      "info" : "SimpleName[15434-15448]:SimpleName[15434-15448]"
    }, {
      "left" : "NodeTraversal nodeTraversal",
      "right" : "NodeTraversal nodeTraversal",
      "info" : "SingleVariableDeclaration[15449-15476]:SingleVariableDeclaration[15449-15476]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[15478-15484]:SingleVariableDeclaration[15478-15484]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[15494-15505]:SingleVariableDeclaration[15494-15505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15507-15935]:Block[15507-15935]"
    }, {
      "left" : "if (n.getType() == Token.FUNCTION ||\n          n.getType() == Token.SCRIPT)",
      "right" : "if (n.getType() == Token.FUNCTION ||\n          n.getType() == Token.SCRIPT)",
      "info" : "IfStatement[15515-15663]:IfStatement[15515-15663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15591-15663]:Block[15591-15663]"
    }, {
      "left" : "sourceName = (String) n.getProp(Node.SOURCENAME_PROP);",
      "right" : "sourceName = (String) n.getProp(Node.SOURCENAME_PROP);",
      "info" : "ExpressionStatement[15601-15655]:ExpressionStatement[15601-15655]"
    }, {
      "left" : "return parent == null || parent.getType() != Token.FUNCTION ||\n          n == parent.getFirstChild() || parent == scope.getRootNode();",
      "right" : "return parent == null || parent.getType() != Token.FUNCTION ||\n          n == parent.getFirstChild() || parent == scope.getRootNode();",
      "info" : "ReturnStatement[15795-15929]:ReturnStatement[15795-15929]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15941-15950]:MarkerAnnotation[15941-15950]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15955-15961]:Modifier[15955-15961]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15962-15966]:PrimitiveType[15962-15966]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[15967-15972]:SimpleName[15967-15972]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[15973-15988]:SingleVariableDeclaration[15973-15988]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[15990-15996]:SingleVariableDeclaration[15990-15996]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[15998-16009]:SingleVariableDeclaration[15998-16009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16011-17491]:Block[16011-17491]"
    }, {
      "left" : "attachLiteralTypes(n);",
      "right" : "attachLiteralTypes(n);",
      "info" : "ExpressionStatement[16019-16041]:ExpressionStatement[16019-16041]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.CALL:\n          checkForClassDefiningCalls(t, n, parent);\n          break;\n\n        case Token.FUNCTION:\n          if (t.getInput() == null || !t.getInput().isExtern()) {\n            nonExternFunctions.add(n);\n          }\n\n          // VARs and ASSIGNs are handled in different branches of this\n          // switch statement.\n          if (parent.getType() != Token.ASSIGN &&\n              parent.getType() != Token.NAME) {\n            defineDeclaredFunction(n, parent);\n          }\n\n          break;\n\n        case Token.ASSIGN:\n          // Handle constructor and enum definitions.\n          defineNamedTypeAssign(n, parent);\n\n          // Handle initialization of properties.\n          Node firstChild = n.getFirstChild();\n          if (firstChild.getType() == Token.GETPROP &&\n              firstChild.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());\n          }\n          break;\n\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n\n        case Token.GETPROP:\n          // Handle stubbed properties.\n          if (parent.getType() == Token.EXPR_RESULT &&\n              n.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n          }\n          break;\n      }",
      "right" : "switch (n.getType()) {\n        case Token.CALL:\n          checkForClassDefiningCalls(t, n, parent);\n          break;\n\n        case Token.FUNCTION:\n          if (t.getInput() == null || !t.getInput().isExtern()) {\n            nonExternFunctions.add(n);\n          }\n\n          // VARs and ASSIGNs are handled in different branches of this\n          // switch statement.\n          if (parent.getType() != Token.ASSIGN &&\n              parent.getType() != Token.NAME) {\n            defineDeclaredFunction(n, parent);\n          }\n\n          break;\n\n        case Token.ASSIGN:\n          // Handle constructor and enum definitions.\n          defineNamedTypeAssign(n, parent);\n\n          // Handle initialization of properties.\n          Node firstChild = n.getFirstChild();\n          if (firstChild.getType() == Token.GETPROP &&\n              firstChild.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());\n          }\n          break;\n\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n\n        case Token.GETPROP:\n          // Handle stubbed properties.\n          if (parent.getType() == Token.EXPR_RESULT &&\n              n.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n          }\n          break;\n      }",
      "info" : "SwitchStatement[16049-17485]:SwitchStatement[16049-17485]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[16080-16096]:SwitchCase[16080-16096]"
    }, {
      "left" : "checkForClassDefiningCalls(t, n, parent);",
      "right" : "checkForClassDefiningCalls(t, n, parent);",
      "info" : "ExpressionStatement[16107-16148]:ExpressionStatement[16107-16148]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16159-16165]:BreakStatement[16159-16165]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[16175-16195]:SwitchCase[16175-16195]"
    }, {
      "left" : "if (t.getInput() == null || !t.getInput().isExtern())",
      "right" : "if (t.getInput() == null || !t.getInput().isExtern())",
      "info" : "IfStatement[16206-16312]:IfStatement[16206-16312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16260-16312]:Block[16260-16312]"
    }, {
      "left" : "nonExternFunctions.add(n);",
      "right" : "nonExternFunctions.add(n);",
      "info" : "ExpressionStatement[16274-16300]:ExpressionStatement[16274-16300]"
    }, {
      "left" : "if (parent.getType() != Token.ASSIGN &&\n              parent.getType() != Token.NAME)",
      "right" : "if (parent.getType() != Token.ASSIGN &&\n              parent.getType() != Token.NAME)",
      "info" : "IfStatement[16427-16573]:IfStatement[16427-16573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16513-16573]:Block[16513-16573]"
    }, {
      "left" : "defineDeclaredFunction(n, parent);",
      "right" : "defineDeclaredFunction(n, parent);",
      "info" : "ExpressionStatement[16527-16561]:ExpressionStatement[16527-16561]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16585-16591]:BreakStatement[16585-16591]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[16601-16619]:SwitchCase[16601-16619]"
    }, {
      "left" : "defineNamedTypeAssign(n, parent);",
      "right" : "defineNamedTypeAssign(n, parent);",
      "info" : "ExpressionStatement[16684-16717]:ExpressionStatement[16684-16717]"
    }, {
      "left" : "Node firstChild = n.getFirstChild();",
      "right" : "Node firstChild = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[16779-16815]:VariableDeclarationStatement[16779-16815]"
    }, {
      "left" : "if (firstChild.getType() == Token.GETPROP &&\n              firstChild.isQualifiedName())",
      "right" : "if (firstChild.getType() == Token.GETPROP &&\n              firstChild.isQualifiedName())",
      "info" : "IfStatement[16826-17041]:IfStatement[16826-17041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16915-17041]:Block[16915-17041]"
    }, {
      "left" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());",
      "right" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());",
      "info" : "ExpressionStatement[16929-17029]:ExpressionStatement[16929-17029]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17052-17058]:BreakStatement[17052-17058]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[17068-17085]:SwitchCase[17068-17085]"
    }, {
      "left" : "defineCatch(n, parent);",
      "right" : "defineCatch(n, parent);",
      "info" : "ExpressionStatement[17096-17119]:ExpressionStatement[17096-17119]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17130-17136]:BreakStatement[17130-17136]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[17146-17161]:SwitchCase[17146-17161]"
    }, {
      "left" : "defineVar(n, parent);",
      "right" : "defineVar(n, parent);",
      "info" : "ExpressionStatement[17172-17193]:ExpressionStatement[17172-17193]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17204-17210]:BreakStatement[17204-17210]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[17220-17239]:SwitchCase[17220-17239]"
    }, {
      "left" : "if (parent.getType() == Token.EXPR_RESULT &&\n              n.isQualifiedName())",
      "right" : "if (parent.getType() == Token.EXPR_RESULT &&\n              n.isQualifiedName())",
      "info" : "IfStatement[17290-17460]:IfStatement[17290-17460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17370-17460]:Block[17370-17460]"
    }, {
      "left" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);",
      "right" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);",
      "info" : "ExpressionStatement[17384-17448]:ExpressionStatement[17384-17448]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17471-17477]:BreakStatement[17471-17477]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[17727-17733]:SimpleType[17727-17733]"
    }, {
      "left" : "getDeclaredTypeInAnnotation",
      "right" : "getDeclaredTypeInAnnotation",
      "info" : "SimpleName[17734-17761]:SimpleName[17734-17761]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[17771-17786]:SingleVariableDeclaration[17771-17786]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[17788-17797]:SingleVariableDeclaration[17788-17797]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[17799-17813]:SingleVariableDeclaration[17799-17813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17815-17895]:Block[17815-17895]"
    }, {
      "left" : "return getDeclaredTypeInAnnotation(t.getSourceName(), node, info);",
      "right" : "return getDeclaredTypeInAnnotation(t.getSourceName(), node, info);",
      "info" : "ReturnStatement[17823-17889]:ReturnStatement[17823-17889]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[17901-17907]:SimpleType[17901-17907]"
    }, {
      "left" : "getDeclaredTypeInAnnotation",
      "right" : "getDeclaredTypeInAnnotation",
      "info" : "SimpleName[17908-17935]:SimpleName[17908-17935]"
    }, {
      "left" : "String sourceName",
      "right" : "String sourceName",
      "info" : "SingleVariableDeclaration[17936-17953]:SingleVariableDeclaration[17936-17953]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[17963-17972]:SingleVariableDeclaration[17963-17972]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[17974-17988]:SingleVariableDeclaration[17974-17988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17990-19576]:Block[17990-19576]"
    }, {
      "left" : "JSType jsType = null;",
      "right" : "JSType jsType = null;",
      "info" : "VariableDeclarationStatement[17998-18019]:VariableDeclarationStatement[17998-18019]"
    }, {
      "left" : "Node objNode = node.getType() == Token.GETPROP ?\n          node.getFirstChild() : null;",
      "right" : "Node objNode = node.getType() == Token.GETPROP ?\n          node.getFirstChild() : null;",
      "info" : "VariableDeclarationStatement[18026-18113]:VariableDeclarationStatement[18026-18113]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[18120-19549]:IfStatement[18120-19549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18138-19549]:Block[18138-19549]"
    }, {
      "left" : "if (info.hasType())",
      "right" : "if (info.hasType())",
      "info" : "IfStatement[18148-19541]:IfStatement[18148-19541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18168-18244]:Block[18168-18244]"
    }, {
      "left" : "jsType = info.getType().evaluate(scope, typeRegistry);",
      "right" : "jsType = info.getType().evaluate(scope, typeRegistry);",
      "info" : "ExpressionStatement[18180-18234]:ExpressionStatement[18180-18234]"
    }, {
      "left" : "if (FunctionTypeBuilder.isFunctionTypeDeclaration(info))",
      "right" : "if (FunctionTypeBuilder.isFunctionTypeDeclaration(info))",
      "info" : "IfStatement[18250-19541]:IfStatement[18250-19541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18307-19541]:Block[18307-19541]"
    }, {
      "left" : "String fnName = node.getQualifiedName();",
      "right" : "String fnName = node.getQualifiedName();",
      "info" : "VariableDeclarationStatement[18319-18359]:VariableDeclarationStatement[18319-18359]"
    }, {
      "left" : "if (info.isConstructor() && typeRegistry.getType(fnName) != null)",
      "right" : "if (info.isConstructor() && typeRegistry.getType(fnName) != null)",
      "info" : "IfStatement[18427-18531]:IfStatement[18427-18531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18493-18531]:Block[18493-18531]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[18507-18519]:ReturnStatement[18507-18519]"
    }, {
      "left" : "FunctionTypeBuilder builder =\n              new FunctionTypeBuilder(\n                  fnName, compiler, node, sourceName, scope)\n              .inferTemplateTypeName(info)\n              .inferReturnType(info)\n              .inferParameterTypes(info)\n              .inferInheritance(info);",
      "right" : "FunctionTypeBuilder builder =\n              new FunctionTypeBuilder(\n                  fnName, compiler, node, sourceName, scope)\n              .inferTemplateTypeName(info)\n              .inferReturnType(info)\n              .inferParameterTypes(info)\n              .inferInheritance(info);",
      "info" : "VariableDeclarationStatement[18543-18832]:VariableDeclarationStatement[18543-18832]"
    }, {
      "left" : "boolean searchedForThisType = false;",
      "right" : "boolean searchedForThisType = false;",
      "info" : "VariableDeclarationStatement[18881-18917]:VariableDeclarationStatement[18881-18917]"
    }, {
      "left" : "if (objNode != null)",
      "right" : "if (objNode != null)",
      "info" : "IfStatement[18928-19378]:IfStatement[18928-19378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18949-19378]:Block[18949-19378]"
    }, {
      "left" : "if (objNode.getType() == Token.GETPROP &&\n                objNode.getLastChild().getString().equals(\"prototype\"))",
      "right" : "if (objNode.getType() == Token.GETPROP &&\n                objNode.getLastChild().getString().equals(\"prototype\"))",
      "info" : "IfStatement[18963-19366]:IfStatement[18963-19366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19077-19202]:Block[19077-19202]"
    }, {
      "left" : "builder.inferThisType(info, objNode.getFirstChild());",
      "right" : "builder.inferThisType(info, objNode.getFirstChild());",
      "info" : "ExpressionStatement[19093-19146]:ExpressionStatement[19093-19146]"
    }, {
      "left" : "searchedForThisType = true;",
      "right" : "searchedForThisType = true;",
      "info" : "ExpressionStatement[19161-19188]:ExpressionStatement[19161-19188]"
    }, {
      "left" : "if (objNode.getType() == Token.THIS)",
      "right" : "if (objNode.getType() == Token.THIS)",
      "info" : "IfStatement[19208-19366]:IfStatement[19208-19366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19245-19366]:Block[19245-19366]"
    }, {
      "left" : "builder.inferThisType(info, objNode.getJSType());",
      "right" : "builder.inferThisType(info, objNode.getJSType());",
      "info" : "ExpressionStatement[19261-19310]:ExpressionStatement[19261-19310]"
    }, {
      "left" : "searchedForThisType = true;",
      "right" : "searchedForThisType = true;",
      "info" : "ExpressionStatement[19325-19352]:ExpressionStatement[19325-19352]"
    }, {
      "left" : "if (!searchedForThisType)",
      "right" : "if (!searchedForThisType)",
      "info" : "IfStatement[19390-19483]:IfStatement[19390-19483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19416-19483]:Block[19416-19483]"
    }, {
      "left" : "builder.inferThisType(info, (Node) null);",
      "right" : "builder.inferThisType(info, (Node) null);",
      "info" : "ExpressionStatement[19430-19471]:ExpressionStatement[19430-19471]"
    }, {
      "left" : "jsType = builder.buildAndRegister();",
      "right" : "jsType = builder.buildAndRegister();",
      "info" : "ExpressionStatement[19495-19531]:ExpressionStatement[19495-19531]"
    }, {
      "left" : "return jsType;",
      "right" : "return jsType;",
      "info" : "ReturnStatement[19556-19570]:ReturnStatement[19556-19570]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19726-19730]:PrimitiveType[19726-19730]"
    }, {
      "left" : "assertDefinitionNode",
      "right" : "assertDefinitionNode",
      "info" : "SimpleName[19731-19751]:SimpleName[19731-19751]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[19752-19758]:SingleVariableDeclaration[19752-19758]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[19760-19768]:SingleVariableDeclaration[19760-19768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19770-19882]:Block[19770-19882]"
    }, {
      "left" : "Preconditions.checkState(sourceName != null);",
      "right" : "Preconditions.checkState(sourceName != null);",
      "info" : "ExpressionStatement[19778-19823]:ExpressionStatement[19778-19823]"
    }, {
      "left" : "Preconditions.checkState(n.getType() == type);",
      "right" : "Preconditions.checkState(n.getType() == type);",
      "info" : "ExpressionStatement[19830-19876]:ExpressionStatement[19830-19876]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19938-19942]:PrimitiveType[19938-19942]"
    }, {
      "left" : "defineCatch",
      "right" : "defineCatch",
      "info" : "SimpleName[19943-19954]:SimpleName[19943-19954]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[19955-19961]:SingleVariableDeclaration[19955-19961]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[19963-19974]:SingleVariableDeclaration[19963-19974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19976-20107]:Block[19976-20107]"
    }, {
      "left" : "assertDefinitionNode(n, Token.CATCH);",
      "right" : "assertDefinitionNode(n, Token.CATCH);",
      "info" : "ExpressionStatement[19984-20021]:ExpressionStatement[19984-20021]"
    }, {
      "left" : "Node catchName = n.getFirstChild();",
      "right" : "Node catchName = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[20028-20063]:VariableDeclarationStatement[20028-20063]"
    }, {
      "left" : "defineSlot(catchName, n, null);",
      "right" : "defineSlot(catchName, n, null);",
      "info" : "ExpressionStatement[20070-20101]:ExpressionStatement[20070-20101]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20166-20170]:PrimitiveType[20166-20170]"
    }, {
      "left" : "defineVar",
      "right" : "defineVar",
      "info" : "SimpleName[20171-20180]:SimpleName[20171-20180]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[20181-20187]:SingleVariableDeclaration[20181-20187]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[20189-20200]:SingleVariableDeclaration[20189-20200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20202-20739]:Block[20202-20739]"
    }, {
      "left" : "assertDefinitionNode(n, Token.VAR);",
      "right" : "assertDefinitionNode(n, Token.VAR);",
      "info" : "ExpressionStatement[20210-20245]:ExpressionStatement[20210-20245]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[20252-20286]:VariableDeclarationStatement[20252-20286]"
    }, {
      "left" : "if (n.hasMoreThanOneChild())",
      "right" : "if (n.hasMoreThanOneChild())",
      "info" : "IfStatement[20293-20733]:IfStatement[20293-20733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20322-20585]:Block[20322-20585]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[20332-20466]:IfStatement[20332-20466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20350-20466]:Block[20350-20466]"
    }, {
      "left" : "compiler.report(JSError.make(sourceName, n, MULTIPLE_VAR_DEF));",
      "right" : "compiler.report(JSError.make(sourceName, n, MULTIPLE_VAR_DEF));",
      "info" : "ExpressionStatement[20393-20456]:ExpressionStatement[20393-20456]"
    }, {
      "left" : "for (Node name : n.children())",
      "right" : "for (Node name : n.children())",
      "info" : "EnhancedForStatement[20475-20577]:EnhancedForStatement[20475-20577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20506-20577]:Block[20506-20577]"
    }, {
      "left" : "defineName(name, n, parent, name.getJSDocInfo());",
      "right" : "defineName(name, n, parent, name.getJSDocInfo());",
      "info" : "ExpressionStatement[20518-20567]:ExpressionStatement[20518-20567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20591-20733]:Block[20591-20733]"
    }, {
      "left" : "Node name = n.getFirstChild();",
      "right" : "Node name = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[20601-20631]:VariableDeclarationStatement[20601-20631]"
    }, {
      "left" : "defineName(name, n, parent,\n            (info != null) ? info : name.getJSDocInfo());",
      "right" : "defineName(name, n, parent,\n            (info != null) ? info : name.getJSDocInfo());",
      "info" : "ExpressionStatement[20640-20725]:ExpressionStatement[20640-20725]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20797-20801]:PrimitiveType[20797-20801]"
    }, {
      "left" : "defineDeclaredFunction",
      "right" : "defineDeclaredFunction",
      "info" : "SimpleName[20802-20824]:SimpleName[20802-20824]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[20825-20831]:SingleVariableDeclaration[20825-20831]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[20833-20844]:SingleVariableDeclaration[20833-20844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20846-21467]:Block[20846-21467]"
    }, {
      "left" : "assertDefinitionNode(n, Token.FUNCTION);",
      "right" : "assertDefinitionNode(n, Token.FUNCTION);",
      "info" : "ExpressionStatement[20854-20894]:ExpressionStatement[20854-20894]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[20902-20936]:VariableDeclarationStatement[20902-20936]"
    }, {
      "left" : "int parentType = parent.getType();",
      "right" : "int parentType = parent.getType();",
      "info" : "VariableDeclarationStatement[20943-20977]:VariableDeclarationStatement[20943-20977]"
    }, {
      "left" : "Preconditions.checkState(\n          (scope.isLocal() || parentType != Token.ASSIGN) &&\n          parentType != Token.NAME,\n          \"function defined as standalone function when it is being \" +\n          \"assigned\");",
      "right" : "Preconditions.checkState(\n          (scope.isLocal() || parentType != Token.ASSIGN) &&\n          parentType != Token.NAME,\n          \"function defined as standalone function when it is being \" +\n          \"assigned\");",
      "info" : "ExpressionStatement[20984-21201]:ExpressionStatement[20984-21201]"
    }, {
      "left" : "String functionName = n.getFirstChild().getString();",
      "right" : "String functionName = n.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[21208-21260]:VariableDeclarationStatement[21208-21260]"
    }, {
      "left" : "FunctionType functionType = getFunctionType(functionName, n, info,\n          null);",
      "right" : "FunctionType functionType = getFunctionType(functionName, n, info,\n          null);",
      "info" : "VariableDeclarationStatement[21267-21350]:VariableDeclarationStatement[21267-21350]"
    }, {
      "left" : "if (NodeUtil.isFunctionDeclaration(n))",
      "right" : "if (NodeUtil.isFunctionDeclaration(n))",
      "info" : "IfStatement[21357-21461]:IfStatement[21357-21461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21396-21461]:Block[21396-21461]"
    }, {
      "left" : "defineSlot(n.getFirstChild(), n, functionType);",
      "right" : "defineSlot(n.getFirstChild(), n, functionType);",
      "info" : "ExpressionStatement[21406-21453]:ExpressionStatement[21406-21453]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21555-21559]:PrimitiveType[21555-21559]"
    }, {
      "left" : "defineNamedTypeAssign",
      "right" : "defineNamedTypeAssign",
      "info" : "SimpleName[21560-21581]:SimpleName[21560-21581]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[21582-21588]:SingleVariableDeclaration[21582-21588]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[21590-21601]:SingleVariableDeclaration[21590-21601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21603-22653]:Block[21603-22653]"
    }, {
      "left" : "assertDefinitionNode(n, Token.ASSIGN);",
      "right" : "assertDefinitionNode(n, Token.ASSIGN);",
      "info" : "ExpressionStatement[21611-21649]:ExpressionStatement[21611-21649]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[21656-21690]:VariableDeclarationStatement[21656-21690]"
    }, {
      "left" : "Node rvalue = n.getLastChild();",
      "right" : "Node rvalue = n.getLastChild();",
      "info" : "VariableDeclarationStatement[22038-22069]:VariableDeclarationStatement[22038-22069]"
    }, {
      "left" : "Node lvalue = n.getFirstChild();",
      "right" : "Node lvalue = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[22076-22108]:VariableDeclarationStatement[22076-22108]"
    }, {
      "left" : "info = (info != null) ? info : rvalue.getJSDocInfo();",
      "right" : "info = (info != null) ? info : rvalue.getJSDocInfo();",
      "info" : "ExpressionStatement[22115-22168]:ExpressionStatement[22115-22168]"
    }, {
      "left" : "if (rvalue.getType() == Token.FUNCTION ||\n          info != null && info.isConstructor())",
      "right" : "if (rvalue.getType() == Token.FUNCTION ||\n          info != null && info.isConstructor())",
      "info" : "IfStatement[22175-22647]:IfStatement[22175-22647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22265-22360]:Block[22265-22360]"
    }, {
      "left" : "getFunctionType(lvalue.getQualifiedName(), rvalue, info,\n            lvalue);",
      "right" : "getFunctionType(lvalue.getQualifiedName(), rvalue, info,\n            lvalue);",
      "info" : "ExpressionStatement[22275-22352]:ExpressionStatement[22275-22352]"
    }, {
      "left" : "if (info != null && info.hasEnumParameterType())",
      "right" : "if (info != null && info.hasEnumParameterType())",
      "info" : "IfStatement[22366-22647]:IfStatement[22366-22647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22415-22647]:Block[22415-22647]"
    }, {
      "left" : "JSType type = getEnumType(lvalue.getQualifiedName(), n, rvalue,\n            info.getEnumParameterType().evaluate(scope, typeRegistry));",
      "right" : "JSType type = getEnumType(lvalue.getQualifiedName(), n, rvalue,\n            info.getEnumParameterType().evaluate(scope, typeRegistry));",
      "info" : "VariableDeclarationStatement[22425-22560]:VariableDeclarationStatement[22425-22560]"
    }, {
      "left" : "if (type != null)",
      "right" : "if (type != null)",
      "info" : "IfStatement[22569-22639]:IfStatement[22569-22639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22587-22639]:Block[22587-22639]"
    }, {
      "left" : "setDeferredType(lvalue, type);",
      "right" : "setDeferredType(lvalue, type);",
      "info" : "ExpressionStatement[22599-22629]:ExpressionStatement[22599-22629]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23043-23050]:Modifier[23043-23050]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23051-23055]:PrimitiveType[23051-23055]"
    }, {
      "left" : "defineName",
      "right" : "defineName",
      "info" : "SimpleName[23056-23066]:SimpleName[23056-23066]"
    }, {
      "left" : "Node name",
      "right" : "Node name",
      "info" : "SingleVariableDeclaration[23067-23076]:SingleVariableDeclaration[23067-23076]"
    }, {
      "left" : "Node var",
      "right" : "Node var",
      "info" : "SingleVariableDeclaration[23078-23086]:SingleVariableDeclaration[23078-23086]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[23088-23099]:SingleVariableDeclaration[23088-23099]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[23101-23115]:SingleVariableDeclaration[23101-23115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23117-24385]:Block[23117-24385]"
    }, {
      "left" : "Node value = name.getFirstChild();",
      "right" : "Node value = name.getFirstChild();",
      "info" : "VariableDeclarationStatement[23125-23159]:VariableDeclarationStatement[23125-23159]"
    }, {
      "left" : "if (value != null && value.getType() == Token.FUNCTION)",
      "right" : "if (value != null && value.getType() == Token.FUNCTION)",
      "info" : "IfStatement[23167-24379]:IfStatement[23167-24379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23223-23593]:Block[23223-23593]"
    }, {
      "left" : "String functionName = name.getString();",
      "right" : "String functionName = name.getString();",
      "info" : "VariableDeclarationStatement[23253-23292]:VariableDeclarationStatement[23253-23292]"
    }, {
      "left" : "FunctionType functionType =\n            getFunctionType(functionName, value, info, null);",
      "right" : "FunctionType functionType =\n            getFunctionType(functionName, value, info, null);",
      "info" : "VariableDeclarationStatement[23301-23390]:VariableDeclarationStatement[23301-23390]"
    }, {
      "left" : "if (functionType.isReturnTypeInferred() &&\n            scope.isLocal())",
      "right" : "if (functionType.isReturnTypeInferred() &&\n            scope.isLocal())",
      "info" : "IfStatement[23399-23585]:IfStatement[23399-23585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23471-23521]:Block[23471-23521]"
    }, {
      "left" : "defineSlot(name, var, null);",
      "right" : "defineSlot(name, var, null);",
      "info" : "ExpressionStatement[23483-23511]:ExpressionStatement[23483-23511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23527-23585]:Block[23527-23585]"
    }, {
      "left" : "defineSlot(name, var, functionType);",
      "right" : "defineSlot(name, var, functionType);",
      "info" : "ExpressionStatement[23539-23575]:ExpressionStatement[23539-23575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23599-24379]:Block[23599-24379]"
    }, {
      "left" : "JSType type = null;",
      "right" : "JSType type = null;",
      "info" : "VariableDeclarationStatement[23636-23655]:VariableDeclarationStatement[23636-23655]"
    }, {
      "left" : "if (info == null)",
      "right" : "if (info == null)",
      "info" : "IfStatement[23664-24333]:IfStatement[23664-24333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23682-23949]:Block[23682-23949]"
    }, {
      "left" : "CompilerInput input = compiler.getInput(sourceName);",
      "right" : "CompilerInput input = compiler.getInput(sourceName);",
      "info" : "VariableDeclarationStatement[23744-23796]:VariableDeclarationStatement[23744-23796]"
    }, {
      "left" : "Preconditions.checkNotNull(input, sourceName);",
      "right" : "Preconditions.checkNotNull(input, sourceName);",
      "info" : "ExpressionStatement[23807-23853]:ExpressionStatement[23807-23853]"
    }, {
      "left" : "type = input.isExtern() ?\n              getNativeType(UNKNOWN_TYPE) : null;",
      "right" : "type = input.isExtern() ?\n              getNativeType(UNKNOWN_TYPE) : null;",
      "info" : "ExpressionStatement[23864-23939]:ExpressionStatement[23864-23939]"
    }, {
      "left" : "if (info.hasEnumParameterType())",
      "right" : "if (info.hasEnumParameterType())",
      "info" : "IfStatement[23955-24333]:IfStatement[23955-24333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23988-24132]:Block[23988-24132]"
    }, {
      "left" : "type = getEnumType(name.getString(), var, value,\n              info.getEnumParameterType().evaluate(scope, typeRegistry));",
      "right" : "type = getEnumType(name.getString(), var, value,\n              info.getEnumParameterType().evaluate(scope, typeRegistry));",
      "info" : "ExpressionStatement[24000-24122]:ExpressionStatement[24000-24122]"
    }, {
      "left" : "if (info.isConstructor())",
      "right" : "if (info.isConstructor())",
      "info" : "IfStatement[24138-24333]:IfStatement[24138-24333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24164-24246]:Block[24164-24246]"
    }, {
      "left" : "type = getFunctionType(name.getString(), value, info, name);",
      "right" : "type = getFunctionType(name.getString(), value, info, name);",
      "info" : "ExpressionStatement[24176-24236]:ExpressionStatement[24176-24236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24252-24333]:Block[24252-24333]"
    }, {
      "left" : "type = getDeclaredTypeInAnnotation(sourceName, name, info);",
      "right" : "type = getDeclaredTypeInAnnotation(sourceName, name, info);",
      "info" : "ExpressionStatement[24264-24323]:ExpressionStatement[24264-24323]"
    }, {
      "left" : "defineSlot(name, var, type);",
      "right" : "defineSlot(name, var, type);",
      "info" : "ExpressionStatement[24343-24371]:ExpressionStatement[24343-24371]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24996-25003]:Modifier[24996-25003]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[25004-25016]:SimpleType[25004-25016]"
    }, {
      "left" : "getFunctionType",
      "right" : "getFunctionType",
      "info" : "SimpleName[25017-25032]:SimpleName[25017-25032]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[25033-25044]:SingleVariableDeclaration[25033-25044]"
    }, {
      "left" : "Node rValue",
      "right" : "Node rValue",
      "info" : "SingleVariableDeclaration[25054-25065]:SingleVariableDeclaration[25054-25065]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[25067-25081]:SingleVariableDeclaration[25067-25081]"
    }, {
      "left" : "@Nullable Node lvalueNode",
      "right" : "@Nullable Node lvalueNode",
      "info" : "SingleVariableDeclaration[25083-25108]:SingleVariableDeclaration[25083-25108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25110-27987]:Block[25110-27987]"
    }, {
      "left" : "FunctionType functionType = null;",
      "right" : "FunctionType functionType = null;",
      "info" : "VariableDeclarationStatement[25118-25151]:VariableDeclarationStatement[25118-25151]"
    }, {
      "left" : "if (rValue != null && rValue.isQualifiedName() && scope.isGlobal())",
      "right" : "if (rValue != null && rValue.isQualifiedName() && scope.isGlobal())",
      "info" : "IfStatement[25237-25693]:IfStatement[25237-25693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25305-25693]:Block[25305-25693]"
    }, {
      "left" : "Var var = scope.getVar(rValue.getQualifiedName());",
      "right" : "Var var = scope.getVar(rValue.getQualifiedName());",
      "info" : "VariableDeclarationStatement[25315-25365]:VariableDeclarationStatement[25315-25365]"
    }, {
      "left" : "if (var != null && var.getType() instanceof FunctionType)",
      "right" : "if (var != null && var.getType() instanceof FunctionType)",
      "info" : "IfStatement[25374-25656]:IfStatement[25374-25656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25432-25656]:Block[25432-25656]"
    }, {
      "left" : "functionType = (FunctionType) var.getType();",
      "right" : "functionType = (FunctionType) var.getType();",
      "info" : "ExpressionStatement[25444-25488]:ExpressionStatement[25444-25488]"
    }, {
      "left" : "if (functionType != null && functionType.isConstructor())",
      "right" : "if (functionType != null && functionType.isConstructor())",
      "info" : "IfStatement[25499-25646]:IfStatement[25499-25646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25557-25646]:Block[25557-25646]"
    }, {
      "left" : "typeRegistry.declareType(name, functionType.getInstanceType());",
      "right" : "typeRegistry.declareType(name, functionType.getInstanceType());",
      "info" : "ExpressionStatement[25571-25634]:ExpressionStatement[25571-25634]"
    }, {
      "left" : "return functionType;",
      "right" : "return functionType;",
      "info" : "ReturnStatement[25665-25685]:ReturnStatement[25665-25685]"
    }, {
      "left" : "Node owner = null;",
      "right" : "Node owner = null;",
      "info" : "VariableDeclarationStatement[25701-25719]:VariableDeclarationStatement[25701-25719]"
    }, {
      "left" : "if (lvalueNode != null)",
      "right" : "if (lvalueNode != null)",
      "info" : "IfStatement[25726-25814]:IfStatement[25726-25814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25750-25814]:Block[25750-25814]"
    }, {
      "left" : "owner = getPrototypePropertyOwner(lvalueNode);",
      "right" : "owner = getPrototypePropertyOwner(lvalueNode);",
      "info" : "ExpressionStatement[25760-25806]:ExpressionStatement[25760-25806]"
    }, {
      "left" : "Node errorRoot = rValue == null ? lvalueNode : rValue;",
      "right" : "Node errorRoot = rValue == null ? lvalueNode : rValue;",
      "info" : "VariableDeclarationStatement[25822-25876]:VariableDeclarationStatement[25822-25876]"
    }, {
      "left" : "boolean isFnLiteral =\n          rValue != null && rValue.getType() == Token.FUNCTION;",
      "right" : "boolean isFnLiteral =\n          rValue != null && rValue.getType() == Token.FUNCTION;",
      "info" : "VariableDeclarationStatement[25883-25968]:VariableDeclarationStatement[25883-25968]"
    }, {
      "left" : "Node fnRoot = isFnLiteral ? rValue : null;",
      "right" : "Node fnRoot = isFnLiteral ? rValue : null;",
      "info" : "VariableDeclarationStatement[25975-26017]:VariableDeclarationStatement[25975-26017]"
    }, {
      "left" : "Node parametersNode = isFnLiteral ?\n          rValue.getFirstChild().getNext() : null;",
      "right" : "Node parametersNode = isFnLiteral ?\n          rValue.getFirstChild().getNext() : null;",
      "info" : "VariableDeclarationStatement[26024-26110]:VariableDeclarationStatement[26024-26110]"
    }, {
      "left" : "Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;",
      "right" : "Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;",
      "info" : "VariableDeclarationStatement[26117-26178]:VariableDeclarationStatement[26117-26178]"
    }, {
      "left" : "if (functionType == null && info != null && info.hasType())",
      "right" : "if (functionType == null && info != null && info.hasType())",
      "info" : "IfStatement[26186-26584]:IfStatement[26186-26584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26246-26584]:Block[26246-26584]"
    }, {
      "left" : "JSType type = info.getType().evaluate(scope, typeRegistry);",
      "right" : "JSType type = info.getType().evaluate(scope, typeRegistry);",
      "info" : "VariableDeclarationStatement[26256-26315]:VariableDeclarationStatement[26256-26315]"
    }, {
      "left" : "type = type.restrictByNotNullOrUndefined();",
      "right" : "type = type.restrictByNotNullOrUndefined();",
      "info" : "ExpressionStatement[26397-26440]:ExpressionStatement[26397-26440]"
    }, {
      "left" : "if (type.isFunctionType())",
      "right" : "if (type.isFunctionType())",
      "info" : "IfStatement[26449-26576]:IfStatement[26449-26576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26476-26576]:Block[26476-26576]"
    }, {
      "left" : "functionType = (FunctionType) type;",
      "right" : "functionType = (FunctionType) type;",
      "info" : "ExpressionStatement[26488-26523]:ExpressionStatement[26488-26523]"
    }, {
      "left" : "functionType.setJSDocInfo(info);",
      "right" : "functionType.setJSDocInfo(info);",
      "info" : "ExpressionStatement[26534-26566]:ExpressionStatement[26534-26566]"
    }, {
      "left" : "if (functionType == null)",
      "right" : "if (functionType == null)",
      "info" : "IfStatement[26592-27793]:IfStatement[26592-27793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26618-27793]:Block[26618-27793]"
    }, {
      "left" : "FunctionType overriddenPropType = null;",
      "right" : "FunctionType overriddenPropType = null;",
      "info" : "VariableDeclarationStatement[26681-26720]:VariableDeclarationStatement[26681-26720]"
    }, {
      "left" : "if (lvalueNode != null && lvalueNode.getType() == Token.GETPROP &&\n            lvalueNode.isQualifiedName())",
      "right" : "if (lvalueNode != null && lvalueNode.getType() == Token.GETPROP &&\n            lvalueNode.isQualifiedName())",
      "info" : "IfStatement[26729-27255]:IfStatement[26729-27255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26838-27255]:Block[26838-27255]"
    }, {
      "left" : "Var var = scope.getVar(\n              lvalueNode.getFirstChild().getQualifiedName());",
      "right" : "Var var = scope.getVar(\n              lvalueNode.getFirstChild().getQualifiedName());",
      "info" : "VariableDeclarationStatement[26850-26935]:VariableDeclarationStatement[26850-26935]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[26946-27245]:IfStatement[26946-27245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26963-27245]:Block[26963-27245]"
    }, {
      "left" : "ObjectType ownerType = ObjectType.cast(var.getType());",
      "right" : "ObjectType ownerType = ObjectType.cast(var.getType());",
      "info" : "VariableDeclarationStatement[26977-27031]:VariableDeclarationStatement[26977-27031]"
    }, {
      "left" : "if (ownerType != null)",
      "right" : "if (ownerType != null)",
      "info" : "IfStatement[27044-27233]:IfStatement[27044-27233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27067-27233]:Block[27067-27233]"
    }, {
      "left" : "String propName = lvalueNode.getLastChild().getString();",
      "right" : "String propName = lvalueNode.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[27083-27139]:VariableDeclarationStatement[27083-27139]"
    }, {
      "left" : "overriddenPropType = findOverriddenFunction(ownerType, propName);",
      "right" : "overriddenPropType = findOverriddenFunction(ownerType, propName);",
      "info" : "ExpressionStatement[27154-27219]:ExpressionStatement[27154-27219]"
    }, {
      "left" : "functionType =\n            new FunctionTypeBuilder(name, compiler, errorRoot, sourceName,\n                scope)\n            .setSourceNode(fnRoot)\n            .inferFromOverriddenFunction(overriddenPropType, parametersNode)\n            .inferTemplateTypeName(info)\n            .inferReturnType(info)\n            .inferInheritance(info)\n            .inferThisType(info, owner)\n            .inferParameterTypes(parametersNode, info)\n            .inferReturnStatementsAsLastResort(fnBlock)\n            .buildAndRegister();",
      "right" : "functionType =\n            new FunctionTypeBuilder(name, compiler, errorRoot, sourceName,\n                scope)\n            .setSourceNode(fnRoot)\n            .inferFromOverriddenFunction(overriddenPropType, parametersNode)\n            .inferTemplateTypeName(info)\n            .inferReturnType(info)\n            .inferInheritance(info)\n            .inferThisType(info, owner)\n            .inferParameterTypes(parametersNode, info)\n            .inferReturnStatementsAsLastResort(fnBlock)\n            .buildAndRegister();",
      "info" : "ExpressionStatement[27265-27785]:ExpressionStatement[27265-27785]"
    }, {
      "left" : "if (rValue != null)",
      "right" : "if (rValue != null)",
      "info" : "IfStatement[27859-27935]:IfStatement[27859-27935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27879-27935]:Block[27879-27935]"
    }, {
      "left" : "setDeferredType(rValue, functionType);",
      "right" : "setDeferredType(rValue, functionType);",
      "info" : "ExpressionStatement[27889-27927]:ExpressionStatement[27889-27927]"
    }, {
      "left" : "return functionType;",
      "right" : "return functionType;",
      "info" : "ReturnStatement[27961-27981]:ReturnStatement[27961-27981]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28080-28087]:Modifier[28080-28087]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[28088-28100]:SimpleType[28088-28100]"
    }, {
      "left" : "findOverriddenFunction",
      "right" : "findOverriddenFunction",
      "info" : "SimpleName[28101-28123]:SimpleName[28101-28123]"
    }, {
      "left" : "ObjectType ownerType",
      "right" : "ObjectType ownerType",
      "info" : "SingleVariableDeclaration[28133-28153]:SingleVariableDeclaration[28133-28153]"
    }, {
      "left" : "String propName",
      "right" : "String propName",
      "info" : "SingleVariableDeclaration[28155-28170]:SingleVariableDeclaration[28155-28170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28172-28820]:Block[28172-28820]"
    }, {
      "left" : "JSType propType = ownerType.getPropertyType(propName);",
      "right" : "JSType propType = ownerType.getPropertyType(propName);",
      "info" : "VariableDeclarationStatement[28266-28320]:VariableDeclarationStatement[28266-28320]"
    }, {
      "left" : "if (propType instanceof FunctionType)",
      "right" : "if (propType instanceof FunctionType)",
      "info" : "IfStatement[28327-28794]:IfStatement[28327-28794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28365-28414]:Block[28365-28414]"
    }, {
      "left" : "return (FunctionType) propType;",
      "right" : "return (FunctionType) propType;",
      "info" : "ReturnStatement[28375-28406]:ReturnStatement[28375-28406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28420-28794]:Block[28420-28794]"
    }, {
      "left" : "for (ObjectType iface :\n                 ownerType.getCtorImplementedInterfaces())",
      "right" : "for (ObjectType iface :\n                 ownerType.getCtorImplementedInterfaces())",
      "info" : "EnhancedForStatement[28532-28786]:EnhancedForStatement[28532-28786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28615-28786]:Block[28615-28786]"
    }, {
      "left" : "propType = iface.getPropertyType(propName);",
      "right" : "propType = iface.getPropertyType(propName);",
      "info" : "ExpressionStatement[28627-28670]:ExpressionStatement[28627-28670]"
    }, {
      "left" : "if (propType instanceof FunctionType)",
      "right" : "if (propType instanceof FunctionType)",
      "info" : "IfStatement[28681-28776]:IfStatement[28681-28776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28719-28776]:Block[28719-28776]"
    }, {
      "left" : "return (FunctionType) propType;",
      "right" : "return (FunctionType) propType;",
      "info" : "ReturnStatement[28733-28764]:ReturnStatement[28733-28764]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[28802-28814]:ReturnStatement[28802-28814]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29472-29479]:Modifier[29472-29479]"
    }, {
      "left" : "EnumType",
      "right" : "EnumType",
      "info" : "SimpleType[29480-29488]:SimpleType[29480-29488]"
    }, {
      "left" : "getEnumType",
      "right" : "getEnumType",
      "info" : "SimpleName[29489-29500]:SimpleName[29489-29500]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[29501-29512]:SingleVariableDeclaration[29501-29512]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[29514-29525]:SingleVariableDeclaration[29514-29525]"
    }, {
      "left" : "Node value",
      "right" : "Node value",
      "info" : "SingleVariableDeclaration[29535-29545]:SingleVariableDeclaration[29535-29545]"
    }, {
      "left" : "JSType elementsType",
      "right" : "JSType elementsType",
      "info" : "SingleVariableDeclaration[29547-29566]:SingleVariableDeclaration[29547-29566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29568-31041]:Block[29568-31041]"
    }, {
      "left" : "EnumType enumType = null;",
      "right" : "EnumType enumType = null;",
      "info" : "VariableDeclarationStatement[29576-29601]:VariableDeclarationStatement[29576-29601]"
    }, {
      "left" : "if (value != null)",
      "right" : "if (value != null)",
      "info" : "IfStatement[29638-30731]:IfStatement[29638-30731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29657-30731]:Block[29657-30731]"
    }, {
      "left" : "if (value.getType() == Token.OBJECTLIT)",
      "right" : "if (value.getType() == Token.OBJECTLIT)",
      "info" : "IfStatement[29667-30723]:IfStatement[29667-30723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29707-30490]:Block[29707-30490]"
    }, {
      "left" : "enumType = typeRegistry.createEnumType(name, elementsType);",
      "right" : "enumType = typeRegistry.createEnumType(name, elementsType);",
      "info" : "ExpressionStatement[29754-29813]:ExpressionStatement[29754-29813]"
    }, {
      "left" : "Node key = value.getFirstChild();",
      "right" : "Node key = value.getFirstChild();",
      "info" : "VariableDeclarationStatement[29862-29895]:VariableDeclarationStatement[29862-29895]"
    }, {
      "left" : "while (key != null)",
      "right" : "while (key != null)",
      "info" : "WhileStatement[29906-30480]:WhileStatement[29906-30480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29926-30480]:Block[29926-30480]"
    }, {
      "left" : "String keyName = NodeUtil.getStringValue(key);",
      "right" : "String keyName = NodeUtil.getStringValue(key);",
      "info" : "VariableDeclarationStatement[29940-29986]:VariableDeclarationStatement[29940-29986]"
    }, {
      "left" : "if (enumType.hasOwnProperty(keyName))",
      "right" : "if (enumType.hasOwnProperty(keyName))",
      "info" : "IfStatement[30000-30379]:IfStatement[30000-30379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30038-30134]:Block[30038-30134]"
    }, {
      "left" : "compiler.report(JSError.make(sourceName, key, ENUM_DUP, keyName));",
      "right" : "compiler.report(JSError.make(sourceName, key, ENUM_DUP, keyName));",
      "info" : "ExpressionStatement[30054-30120]:ExpressionStatement[30054-30120]"
    }, {
      "left" : "if (!codingConvention.isValidEnumKey(keyName))",
      "right" : "if (!codingConvention.isValidEnumKey(keyName))",
      "info" : "IfStatement[30140-30379]:IfStatement[30140-30379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30187-30311]:Block[30187-30311]"
    }, {
      "left" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
      "right" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
      "info" : "ExpressionStatement[30203-30297]:ExpressionStatement[30203-30297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30317-30379]:Block[30317-30379]"
    }, {
      "left" : "enumType.defineElement(keyName);",
      "right" : "enumType.defineElement(keyName);",
      "info" : "ExpressionStatement[30333-30365]:ExpressionStatement[30333-30365]"
    }, {
      "left" : "key = key.getNext();",
      "right" : "key = key.getNext();",
      "info" : "ExpressionStatement[30392-30412]:ExpressionStatement[30392-30412]"
    }, {
      "left" : "key = (key == null) ? null : key.getNext();",
      "right" : "key = (key == null) ? null : key.getNext();",
      "info" : "ExpressionStatement[30425-30468]:ExpressionStatement[30425-30468]"
    }, {
      "left" : "if (value.isQualifiedName())",
      "right" : "if (value.isQualifiedName())",
      "info" : "IfStatement[30496-30723]:IfStatement[30496-30723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30525-30723]:Block[30525-30723]"
    }, {
      "left" : "Var var = scope.getVar(value.getQualifiedName());",
      "right" : "Var var = scope.getVar(value.getQualifiedName());",
      "info" : "VariableDeclarationStatement[30537-30586]:VariableDeclarationStatement[30537-30586]"
    }, {
      "left" : "if (var != null && var.getType() instanceof EnumType)",
      "right" : "if (var != null && var.getType() instanceof EnumType)",
      "info" : "IfStatement[30597-30713]:IfStatement[30597-30713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30651-30713]:Block[30651-30713]"
    }, {
      "left" : "enumType = (EnumType) var.getType();",
      "right" : "enumType = (EnumType) var.getType();",
      "info" : "ExpressionStatement[30665-30701]:ExpressionStatement[30665-30701]"
    }, {
      "left" : "if (enumType == null)",
      "right" : "if (enumType == null)",
      "info" : "IfStatement[30739-31011]:IfStatement[30739-31011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30761-30847]:Block[30761-30847]"
    }, {
      "left" : "compiler.report(JSError.make(sourceName, parent, ENUM_INITIALIZER));",
      "right" : "compiler.report(JSError.make(sourceName, parent, ENUM_INITIALIZER));",
      "info" : "ExpressionStatement[30771-30839]:ExpressionStatement[30771-30839]"
    }, {
      "left" : "if (scope.isGlobal())",
      "right" : "if (scope.isGlobal())",
      "info" : "IfStatement[30853-31011]:IfStatement[30853-31011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30875-31011]:Block[30875-31011]"
    }, {
      "left" : "if (name != null && !name.isEmpty())",
      "right" : "if (name != null && !name.isEmpty())",
      "info" : "IfStatement[30885-31003]:IfStatement[30885-31003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30922-31003]:Block[30922-31003]"
    }, {
      "left" : "typeRegistry.declareType(name, enumType.getElementsType());",
      "right" : "typeRegistry.declareType(name, enumType.getElementsType());",
      "info" : "ExpressionStatement[30934-30993]:ExpressionStatement[30934-30993]"
    }, {
      "left" : "return enumType;",
      "right" : "return enumType;",
      "info" : "ReturnStatement[31019-31035]:ReturnStatement[31019-31035]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31451-31458]:Modifier[31451-31458]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[31459-31463]:PrimitiveType[31459-31463]"
    }, {
      "left" : "defineSlot",
      "right" : "defineSlot",
      "info" : "SimpleName[31464-31474]:SimpleName[31464-31474]"
    }, {
      "left" : "Node name",
      "right" : "Node name",
      "info" : "SingleVariableDeclaration[31475-31484]:SingleVariableDeclaration[31475-31484]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[31486-31497]:SingleVariableDeclaration[31486-31497]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[31499-31510]:SingleVariableDeclaration[31499-31510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31512-31571]:Block[31512-31571]"
    }, {
      "left" : "defineSlot(name, parent, type, type == null);",
      "right" : "defineSlot(name, parent, type, type == null);",
      "info" : "ExpressionStatement[31520-31565]:ExpressionStatement[31520-31565]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[32060-32064]:PrimitiveType[32060-32064]"
    }, {
      "left" : "defineSlot",
      "right" : "defineSlot",
      "info" : "SimpleName[32065-32075]:SimpleName[32065-32075]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[32076-32082]:SingleVariableDeclaration[32076-32082]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[32084-32095]:SingleVariableDeclaration[32084-32095]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[32097-32108]:SingleVariableDeclaration[32097-32108]"
    }, {
      "left" : "boolean inferred",
      "right" : "boolean inferred",
      "info" : "SingleVariableDeclaration[32110-32126]:SingleVariableDeclaration[32110-32126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32128-35174]:Block[32128-35463]"
    }, {
      "left" : "Preconditions.checkArgument(inferred || type != null);",
      "right" : "Preconditions.checkArgument(inferred || type != null);",
      "info" : "ExpressionStatement[32136-32190]:ExpressionStatement[32136-32190]"
    }, {
      "left" : "boolean shouldDeclareOnGlobalThis = false;",
      "right" : "boolean shouldDeclareOnGlobalThis = false;",
      "info" : "VariableDeclarationStatement[32260-32302]:VariableDeclarationStatement[32260-32302]"
    }, {
      "left" : "if (n.getType() == Token.NAME)",
      "right" : "if (n.getType() == Token.NAME)",
      "info" : "IfStatement[32309-32922]:IfStatement[32309-32922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32340-32723]:Block[32340-32723]"
    }, {
      "left" : "Preconditions.checkArgument(\n            parent.getType() == Token.FUNCTION ||\n            parent.getType() == Token.VAR ||\n            parent.getType() == Token.LP ||\n            parent.getType() == Token.CATCH);",
      "right" : "Preconditions.checkArgument(\n            parent.getType() == Token.FUNCTION ||\n            parent.getType() == Token.VAR ||\n            parent.getType() == Token.LP ||\n            parent.getType() == Token.CATCH);",
      "info" : "ExpressionStatement[32350-32563]:ExpressionStatement[32350-32563]"
    }, {
      "left" : "shouldDeclareOnGlobalThis = scope.isGlobal() &&\n            (parent.getType() == Token.VAR ||\n             parent.getType() == Token.FUNCTION);",
      "right" : "shouldDeclareOnGlobalThis = scope.isGlobal() &&\n            (parent.getType() == Token.VAR ||\n             parent.getType() == Token.FUNCTION);",
      "info" : "ExpressionStatement[32572-32715]:ExpressionStatement[32572-32715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32729-32922]:Block[32729-32922]"
    }, {
      "left" : "Preconditions.checkArgument(\n            n.getType() == Token.GETPROP &&\n            (parent.getType() == Token.ASSIGN ||\n             parent.getType() == Token.EXPR_RESULT));",
      "right" : "Preconditions.checkArgument(\n            n.getType() == Token.GETPROP &&\n            (parent.getType() == Token.ASSIGN ||\n             parent.getType() == Token.EXPR_RESULT));",
      "info" : "ExpressionStatement[32739-32914]:ExpressionStatement[32739-32914]"
    }, {
      "left" : "String variableName = n.getQualifiedName();",
      "right" : "String variableName = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[32929-32972]:VariableDeclarationStatement[32929-32972]"
    }, {
      "left" : "Preconditions.checkArgument(!variableName.isEmpty());",
      "right" : "Preconditions.checkArgument(!variableName.isEmpty());",
      "info" : "ExpressionStatement[32979-33032]:ExpressionStatement[32979-33032]"
    }, {
      "left" : "Scope scopeToDeclareIn = scope;",
      "right" : "Scope scopeToDeclareIn = scope;",
      "info" : "VariableDeclarationStatement[33240-33271]:VariableDeclarationStatement[33240-33271]"
    }, {
      "left" : "if (scopeToDeclareIn.isDeclared(variableName, false))",
      "right" : "if (scopeToDeclareIn.isDeclared(variableName, false))",
      "info" : "IfStatement[33429-35168]:IfStatement[33718-35457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33483-33660]:Block[33772-33949]"
    }, {
      "left" : "Var oldVar = scopeToDeclareIn.getVar(variableName);",
      "right" : "Var oldVar = scopeToDeclareIn.getVar(variableName);",
      "info" : "VariableDeclarationStatement[33493-33544]:VariableDeclarationStatement[33782-33833]"
    }, {
      "left" : "validator.expectUndeclaredVariable(\n            sourceName, n, parent, oldVar, variableName, type);",
      "right" : "validator.expectUndeclaredVariable(\n            sourceName, n, parent, oldVar, variableName, type);",
      "info" : "ExpressionStatement[33553-33652]:ExpressionStatement[33842-33941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33666-35168]:Block[33955-35457]"
    }, {
      "left" : "if (!inferred)",
      "right" : "if (!inferred)",
      "info" : "IfStatement[33676-33738]:IfStatement[33965-34027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33691-33738]:Block[33980-34027]"
    }, {
      "left" : "setDeferredType(n, type);",
      "right" : "setDeferredType(n, type);",
      "info" : "ExpressionStatement[33703-33728]:ExpressionStatement[33992-34017]"
    }, {
      "left" : "CompilerInput input = compiler.getInput(sourceName);",
      "right" : "CompilerInput input = compiler.getInput(sourceName);",
      "info" : "VariableDeclarationStatement[33747-33799]:VariableDeclarationStatement[34036-34088]"
    }, {
      "left" : "scopeToDeclareIn.declare(variableName, n, type, input, inferred);",
      "right" : "scopeToDeclareIn.declare(variableName, n, type, input, inferred);",
      "info" : "ExpressionStatement[33808-33873]:ExpressionStatement[34097-34162]"
    }, {
      "left" : "if (shouldDeclareOnGlobalThis)",
      "right" : "if (shouldDeclareOnGlobalThis)",
      "info" : "IfStatement[33883-34416]:IfStatement[34172-34705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33914-34416]:Block[34203-34705]"
    }, {
      "left" : "ObjectType globalThis =\n              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);",
      "right" : "ObjectType globalThis =\n              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);",
      "info" : "VariableDeclarationStatement[33926-34023]:VariableDeclarationStatement[34215-34312]"
    }, {
      "left" : "boolean isExtern = input.isExtern();",
      "right" : "boolean isExtern = input.isExtern();",
      "info" : "VariableDeclarationStatement[34034-34070]:VariableDeclarationStatement[34323-34359]"
    }, {
      "left" : "if (inferred)",
      "right" : "if (inferred)",
      "info" : "IfStatement[34081-34406]:IfStatement[34370-34695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34095-34310]:Block[34384-34599]"
    }, {
      "left" : "globalThis.defineInferredProperty(variableName,\n                type == null ?\n                    getNativeType(JSTypeNative.NO_TYPE) :\n                    type,\n                isExtern);",
      "right" : "globalThis.defineInferredProperty(variableName,\n                type == null ?\n                    getNativeType(JSTypeNative.NO_TYPE) :\n                    type,\n                isExtern);",
      "info" : "ExpressionStatement[34109-34298]:ExpressionStatement[34398-34587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34316-34406]:Block[34605-34695]"
    }, {
      "left" : "globalThis.defineDeclaredProperty(variableName, type, isExtern);",
      "right" : "globalThis.defineDeclaredProperty(variableName, type, isExtern);",
      "info" : "ExpressionStatement[34330-34394]:ExpressionStatement[34619-34683]"
    }, {
      "left" : "if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType)",
      "right" : "if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType)",
      "info" : "IfStatement[34525-35160]:IfStatement[34814-35449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34590-35160]:Block[34879-35449]"
    }, {
      "left" : "FunctionType fnType = (FunctionType) type;",
      "right" : "FunctionType fnType = (FunctionType) type;",
      "info" : "VariableDeclarationStatement[34602-34644]:VariableDeclarationStatement[34891-34933]"
    }, {
      "left" : "if (fnType.isConstructor() || fnType.isInterface())",
      "right" : "if (fnType.isConstructor() || fnType.isInterface())",
      "info" : "IfStatement[34655-35150]:IfStatement[34944-35439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34707-35150]:Block[34996-35439]"
    }, {
      "left" : "FunctionType superClassCtor = fnType.getSuperClassConstructor();",
      "right" : "FunctionType superClassCtor = fnType.getSuperClassConstructor();",
      "info" : "VariableDeclarationStatement[34721-34785]:VariableDeclarationStatement[35010-35074]"
    }, {
      "left" : "scopeToDeclareIn.declare(variableName + \".prototype\", n,\n                fnType.getPrototype(), compiler.getInput(sourceName),\n                /* declared iff there's an explicit supertype */\n                superClassCtor == null ||\n                superClassCtor.getInstanceType().equals(\n                    getNativeType(OBJECT_TYPE)));",
      "right" : "scopeToDeclareIn.declare(variableName + \".prototype\", n,\n                fnType.getPrototype(), compiler.getInput(sourceName),\n                /* declared iff there's an explicit supertype */\n                superClassCtor == null ||\n                superClassCtor.getInstanceType().equals(\n                    getNativeType(OBJECT_TYPE)));",
      "info" : "ExpressionStatement[34798-35138]:ExpressionStatement[35087-35427]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35272-35279]:Modifier[35561-35568]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[35280-35287]:PrimitiveType[35569-35576]"
    }, {
      "left" : "isQnameRootedInGlobalScope",
      "right" : "isQnameRootedInGlobalScope",
      "info" : "SimpleName[35288-35314]:SimpleName[35577-35603]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[35315-35321]:SingleVariableDeclaration[35604-35610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35323-35574]:Block[35612-35863]"
    }, {
      "left" : "Node root = NodeUtil.getRootOfQualifiedName(n);",
      "right" : "Node root = NodeUtil.getRootOfQualifiedName(n);",
      "info" : "VariableDeclarationStatement[35331-35378]:VariableDeclarationStatement[35620-35667]"
    }, {
      "left" : "if (root.getType() == Token.NAME)",
      "right" : "if (root.getType() == Token.NAME)",
      "info" : "IfStatement[35385-35548]:IfStatement[35674-35837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35419-35548]:Block[35708-35837]"
    }, {
      "left" : "Var var = scope.getVar(root.getString());",
      "right" : "Var var = scope.getVar(root.getString());",
      "info" : "VariableDeclarationStatement[35429-35470]:VariableDeclarationStatement[35718-35759]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[35479-35540]:IfStatement[35768-35829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35496-35540]:Block[35785-35829]"
    }, {
      "left" : "return var.isGlobal();",
      "right" : "return var.isGlobal();",
      "info" : "ReturnStatement[35508-35530]:ReturnStatement[35797-35819]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[35555-35568]:ReturnStatement[35844-35857]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35943-35950]:Modifier[36232-36239]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[35951-35957]:SimpleType[36240-36246]"
    }, {
      "left" : "getDeclaredGetPropType",
      "right" : "getDeclaredGetPropType",
      "info" : "SimpleName[35958-35980]:SimpleName[36247-36269]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[35981-35996]:SingleVariableDeclaration[36270-36285]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[35998-36012]:SingleVariableDeclaration[36287-36301]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[36022-36028]:SingleVariableDeclaration[36311-36317]"
    }, {
      "left" : "Node rhsValue",
      "right" : "Node rhsValue",
      "info" : "SingleVariableDeclaration[36030-36043]:SingleVariableDeclaration[36319-36332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36045-36449]:Block[36334-36738]"
    }, {
      "left" : "if (info != null && info.hasType())",
      "right" : "if (info != null && info.hasType())",
      "info" : "IfStatement[36053-36443]:IfStatement[36342-36732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36089-36154]:Block[36378-36443]"
    }, {
      "left" : "return getDeclaredTypeInAnnotation(t, n, info);",
      "right" : "return getDeclaredTypeInAnnotation(t, n, info);",
      "info" : "ReturnStatement[36099-36146]:ReturnStatement[36388-36435]"
    }, {
      "left" : "if (info != null && info.hasEnumParameterType())",
      "right" : "if (info != null && info.hasEnumParameterType())",
      "info" : "IfStatement[36160-36443]:IfStatement[36449-36732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36209-36248]:Block[36498-36537]"
    }, {
      "left" : "return n.getJSType();",
      "right" : "return n.getJSType();",
      "info" : "ReturnStatement[36219-36240]:ReturnStatement[36508-36529]"
    }, {
      "left" : "if (rhsValue != null &&\n          rhsValue.getType() == Token.FUNCTION)",
      "right" : "if (rhsValue != null &&\n          rhsValue.getType() == Token.FUNCTION)",
      "info" : "IfStatement[36254-36443]:IfStatement[36543-36732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36326-36372]:Block[36615-36661]"
    }, {
      "left" : "return rhsValue.getJSType();",
      "right" : "return rhsValue.getJSType();",
      "info" : "ReturnStatement[36336-36364]:ReturnStatement[36625-36653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36378-36443]:Block[36667-36732]"
    }, {
      "left" : "return getDeclaredTypeInAnnotation(t, n, info);",
      "right" : "return getDeclaredTypeInAnnotation(t, n, info);",
      "info" : "ReturnStatement[36388-36435]:ReturnStatement[36677-36724]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36652-36659]:Modifier[36941-36948]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36660-36664]:PrimitiveType[36949-36953]"
    }, {
      "left" : "checkForClassDefiningCalls",
      "right" : "checkForClassDefiningCalls",
      "info" : "SimpleName[36665-36691]:SimpleName[36954-36980]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[36701-36716]:SingleVariableDeclaration[36990-37005]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[36718-36724]:SingleVariableDeclaration[37007-37013]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[36726-36737]:SingleVariableDeclaration[37015-37026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36739-38964]:Block[37028-39253]"
    }, {
      "left" : "SubclassRelationship relationship =\n          codingConvention.getClassesDefinedByCall(n);",
      "right" : "SubclassRelationship relationship =\n          codingConvention.getClassesDefinedByCall(n);",
      "info" : "VariableDeclarationStatement[36747-36837]:VariableDeclarationStatement[37036-37126]"
    }, {
      "left" : "if (relationship != null)",
      "right" : "if (relationship != null)",
      "info" : "IfStatement[36844-37608]:IfStatement[37133-37897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36870-37608]:Block[37159-37897]"
    }, {
      "left" : "ObjectType superClass = ObjectType.cast(\n            typeRegistry.getType(relationship.superclassName));",
      "right" : "ObjectType superClass = ObjectType.cast(\n            typeRegistry.getType(relationship.superclassName));",
      "info" : "VariableDeclarationStatement[36880-36984]:VariableDeclarationStatement[37169-37273]"
    }, {
      "left" : "ObjectType subClass = ObjectType.cast(\n            typeRegistry.getType(relationship.subclassName));",
      "right" : "ObjectType subClass = ObjectType.cast(\n            typeRegistry.getType(relationship.subclassName));",
      "info" : "VariableDeclarationStatement[36993-37093]:VariableDeclarationStatement[37282-37382]"
    }, {
      "left" : "if (superClass != null && subClass != null)",
      "right" : "if (superClass != null && subClass != null)",
      "info" : "IfStatement[37102-37600]:IfStatement[37391-37889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37146-37600]:Block[37435-37889]"
    }, {
      "left" : "FunctionType superCtor = superClass.getConstructor();",
      "right" : "FunctionType superCtor = superClass.getConstructor();",
      "info" : "VariableDeclarationStatement[37158-37211]:VariableDeclarationStatement[37447-37500]"
    }, {
      "left" : "FunctionType subCtor = subClass.getConstructor();",
      "right" : "FunctionType subCtor = subClass.getConstructor();",
      "info" : "VariableDeclarationStatement[37222-37271]:VariableDeclarationStatement[37511-37560]"
    }, {
      "left" : "if (relationship.type == SubclassType.INHERITS)",
      "right" : "if (relationship.type == SubclassType.INHERITS)",
      "info" : "IfStatement[37283-37411]:IfStatement[37572-37700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37331-37411]:Block[37620-37700]"
    }, {
      "left" : "validator.expectSuperType(t, n, superClass, subClass);",
      "right" : "validator.expectSuperType(t, n, superClass, subClass);",
      "info" : "ExpressionStatement[37345-37399]:ExpressionStatement[37634-37688]"
    }, {
      "left" : "if (superCtor != null && subCtor != null)",
      "right" : "if (superCtor != null && subCtor != null)",
      "info" : "IfStatement[37423-37590]:IfStatement[37712-37879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37465-37590]:Block[37754-37879]"
    }, {
      "left" : "codingConvention.applySubclassRelationship(\n                superCtor, subCtor, relationship.type);",
      "right" : "codingConvention.applySubclassRelationship(\n                superCtor, subCtor, relationship.type);",
      "info" : "ExpressionStatement[37479-37578]:ExpressionStatement[37768-37867]"
    }, {
      "left" : "String singletonGetterClassName =\n          codingConvention.getSingletonGetterClassName(n);",
      "right" : "String singletonGetterClassName =\n          codingConvention.getSingletonGetterClassName(n);",
      "info" : "VariableDeclarationStatement[37616-37708]:VariableDeclarationStatement[37905-37997]"
    }, {
      "left" : "if (singletonGetterClassName != null)",
      "right" : "if (singletonGetterClassName != null)",
      "info" : "IfStatement[37715-38238]:IfStatement[38004-38527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37753-38238]:Block[38042-38527]"
    }, {
      "left" : "ObjectType objectType = ObjectType.cast(\n            typeRegistry.getType(singletonGetterClassName));",
      "right" : "ObjectType objectType = ObjectType.cast(\n            typeRegistry.getType(singletonGetterClassName));",
      "info" : "VariableDeclarationStatement[37763-37864]:VariableDeclarationStatement[38052-38153]"
    }, {
      "left" : "if (objectType != null)",
      "right" : "if (objectType != null)",
      "info" : "IfStatement[37873-38230]:IfStatement[38162-38519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37897-38230]:Block[38186-38519]"
    }, {
      "left" : "FunctionType functionType = objectType.getConstructor();",
      "right" : "FunctionType functionType = objectType.getConstructor();",
      "info" : "VariableDeclarationStatement[37909-37965]:VariableDeclarationStatement[38198-38254]"
    }, {
      "left" : "if (functionType != null)",
      "right" : "if (functionType != null)",
      "info" : "IfStatement[37977-38220]:IfStatement[38266-38509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38003-38220]:Block[38292-38509]"
    }, {
      "left" : "FunctionType getterType =\n                typeRegistry.createFunctionType(objectType);",
      "right" : "FunctionType getterType =\n                typeRegistry.createFunctionType(objectType);",
      "info" : "VariableDeclarationStatement[38017-38103]:VariableDeclarationStatement[38306-38392]"
    }, {
      "left" : "codingConvention.applySingletonGetter(functionType, getterType,\n                objectType);",
      "right" : "codingConvention.applySingletonGetter(functionType, getterType,\n                objectType);",
      "info" : "ExpressionStatement[38116-38208]:ExpressionStatement[38405-38497]"
    }, {
      "left" : "DelegateRelationship delegateRelationship =\n          codingConvention.getDelegateRelationship(n);",
      "right" : "DelegateRelationship delegateRelationship =\n          codingConvention.getDelegateRelationship(n);",
      "info" : "VariableDeclarationStatement[38246-38344]:VariableDeclarationStatement[38535-38633]"
    }, {
      "left" : "if (delegateRelationship != null)",
      "right" : "if (delegateRelationship != null)",
      "info" : "IfStatement[38351-38451]:IfStatement[38640-38740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38385-38451]:Block[38674-38740]"
    }, {
      "left" : "applyDelegateRelationship(delegateRelationship);",
      "right" : "applyDelegateRelationship(delegateRelationship);",
      "info" : "ExpressionStatement[38395-38443]:ExpressionStatement[38684-38732]"
    }, {
      "left" : "ObjectLiteralCast objectLiteralCast =\n          codingConvention.getObjectLiteralCast(t, n);",
      "right" : "ObjectLiteralCast objectLiteralCast =\n          codingConvention.getObjectLiteralCast(t, n);",
      "info" : "VariableDeclarationStatement[38459-38551]:VariableDeclarationStatement[38748-38840]"
    }, {
      "left" : "if (objectLiteralCast != null)",
      "right" : "if (objectLiteralCast != null)",
      "info" : "IfStatement[38558-38958]:IfStatement[38847-39247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38589-38958]:Block[38878-39247]"
    }, {
      "left" : "ObjectType type = ObjectType.cast(\n            typeRegistry.getType(objectLiteralCast.typeName));",
      "right" : "ObjectType type = ObjectType.cast(\n            typeRegistry.getType(objectLiteralCast.typeName));",
      "info" : "VariableDeclarationStatement[38599-38696]:VariableDeclarationStatement[38888-38985]"
    }, {
      "left" : "if (type != null && type.getConstructor() != null)",
      "right" : "if (type != null && type.getConstructor() != null)",
      "info" : "IfStatement[38705-38950]:IfStatement[38994-39239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38756-38830]:Block[39045-39119]"
    }, {
      "left" : "setDeferredType(objectLiteralCast.objectNode, type);",
      "right" : "setDeferredType(objectLiteralCast.objectNode, type);",
      "info" : "ExpressionStatement[38768-38820]:ExpressionStatement[39057-39109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38836-38950]:Block[39125-39239]"
    }, {
      "left" : "compiler.report(JSError.make(t.getSourceName(), n,\n                  CONSTRUCTOR_EXPECTED));",
      "right" : "compiler.report(JSError.make(t.getSourceName(), n,\n                  CONSTRUCTOR_EXPECTED));",
      "info" : "ExpressionStatement[38848-38940]:ExpressionStatement[39137-39229]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[39048-39055]:Modifier[39337-39344]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[39056-39060]:PrimitiveType[39345-39349]"
    }, {
      "left" : "applyDelegateRelationship",
      "right" : "applyDelegateRelationship",
      "info" : "SimpleName[39061-39086]:SimpleName[39350-39375]"
    }, {
      "left" : "DelegateRelationship delegateRelationship",
      "right" : "DelegateRelationship delegateRelationship",
      "info" : "SingleVariableDeclaration[39096-39137]:SingleVariableDeclaration[39385-39426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39139-40881]:Block[39428-41170]"
    }, {
      "left" : "ObjectType delegatorObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegator));",
      "right" : "ObjectType delegatorObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegator));",
      "info" : "VariableDeclarationStatement[39147-39257]:VariableDeclarationStatement[39436-39546]"
    }, {
      "left" : "ObjectType delegateBaseObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegateBase));",
      "right" : "ObjectType delegateBaseObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegateBase));",
      "info" : "VariableDeclarationStatement[39264-39380]:VariableDeclarationStatement[39553-39669]"
    }, {
      "left" : "ObjectType delegateSuperObject = ObjectType.cast(\n          typeRegistry.getType(codingConvention.getDelegateSuperclassName()));",
      "right" : "ObjectType delegateSuperObject = ObjectType.cast(\n          typeRegistry.getType(codingConvention.getDelegateSuperclassName()));",
      "info" : "VariableDeclarationStatement[39387-39515]:VariableDeclarationStatement[39676-39804]"
    }, {
      "left" : "if (delegatorObject != null &&\n          delegateBaseObject != null &&\n          delegateSuperObject != null)",
      "right" : "if (delegatorObject != null &&\n          delegateBaseObject != null &&\n          delegateSuperObject != null)",
      "info" : "IfStatement[39522-40875]:IfStatement[39811-41164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39632-40875]:Block[39921-41164]"
    }, {
      "left" : "FunctionType delegatorCtor = delegatorObject.getConstructor();",
      "right" : "FunctionType delegatorCtor = delegatorObject.getConstructor();",
      "info" : "VariableDeclarationStatement[39642-39704]:VariableDeclarationStatement[39931-39993]"
    }, {
      "left" : "FunctionType delegateBaseCtor = delegateBaseObject.getConstructor();",
      "right" : "FunctionType delegateBaseCtor = delegateBaseObject.getConstructor();",
      "info" : "VariableDeclarationStatement[39713-39781]:VariableDeclarationStatement[40002-40070]"
    }, {
      "left" : "FunctionType delegateSuperCtor = delegateSuperObject.getConstructor();",
      "right" : "FunctionType delegateSuperCtor = delegateSuperObject.getConstructor();",
      "info" : "VariableDeclarationStatement[39790-39860]:VariableDeclarationStatement[40079-40149]"
    }, {
      "left" : "if (delegatorCtor != null && delegateBaseCtor != null &&\n            delegateSuperCtor != null)",
      "right" : "if (delegatorCtor != null && delegateBaseCtor != null &&\n            delegateSuperCtor != null)",
      "info" : "IfStatement[39870-40867]:IfStatement[40159-41156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39966-40867]:Block[40255-41156]"
    }, {
      "left" : "FunctionParamBuilder functionParamBuilder =\n              new FunctionParamBuilder(typeRegistry);",
      "right" : "FunctionParamBuilder functionParamBuilder =\n              new FunctionParamBuilder(typeRegistry);",
      "info" : "VariableDeclarationStatement[39978-40075]:VariableDeclarationStatement[40267-40364]"
    }, {
      "left" : "functionParamBuilder.addRequiredParams(\n              getNativeType(U2U_CONSTRUCTOR_TYPE));",
      "right" : "functionParamBuilder.addRequiredParams(\n              getNativeType(U2U_CONSTRUCTOR_TYPE));",
      "info" : "ExpressionStatement[40086-40177]:ExpressionStatement[40375-40466]"
    }, {
      "left" : "FunctionType findDelegate = typeRegistry.createFunctionType(\n              typeRegistry.createDefaultObjectUnion(delegateBaseObject),\n              functionParamBuilder.build());",
      "right" : "FunctionType findDelegate = typeRegistry.createFunctionType(\n              typeRegistry.createDefaultObjectUnion(delegateBaseObject),\n              functionParamBuilder.build());",
      "info" : "VariableDeclarationStatement[40188-40366]:VariableDeclarationStatement[40477-40655]"
    }, {
      "left" : "FunctionType delegateProxy = typeRegistry.createConstructorType(\n              delegateBaseObject.getReferenceName() + DELEGATE_PROXY_SUFFIX,\n              null, null, null);",
      "right" : "FunctionType delegateProxy = typeRegistry.createConstructorType(\n              delegateBaseObject.getReferenceName() + DELEGATE_PROXY_SUFFIX,\n              null, null, null);",
      "info" : "VariableDeclarationStatement[40378-40552]:VariableDeclarationStatement[40667-40841]"
    }, {
      "left" : "delegateProxy.setPrototypeBasedOn(delegateBaseObject);",
      "right" : "delegateProxy.setPrototypeBasedOn(delegateBaseObject);",
      "info" : "ExpressionStatement[40563-40617]:ExpressionStatement[40852-40906]"
    }, {
      "left" : "codingConvention.applyDelegateRelationship(\n              delegateSuperObject, delegateBaseObject, delegatorObject,\n              delegateProxy, findDelegate);",
      "right" : "codingConvention.applyDelegateRelationship(\n              delegateSuperObject, delegateBaseObject, delegatorObject,\n              delegateProxy, findDelegate);",
      "info" : "ExpressionStatement[40629-40788]:ExpressionStatement[40918-41077]"
    }, {
      "left" : "delegateProxyPrototypes.add(delegateProxy.getPrototype());",
      "right" : "delegateProxyPrototypes.add(delegateProxy.getPrototype());",
      "info" : "ExpressionStatement[40799-40857]:ExpressionStatement[41088-41146]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[41310-41314]:PrimitiveType[41599-41603]"
    }, {
      "left" : "maybeDeclareQualifiedName",
      "right" : "maybeDeclareQualifiedName",
      "info" : "SimpleName[41315-41340]:SimpleName[41604-41629]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[41341-41356]:SingleVariableDeclaration[41630-41645]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[41358-41372]:SingleVariableDeclaration[41647-41661]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[41382-41388]:SingleVariableDeclaration[41671-41677]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[41390-41401]:SingleVariableDeclaration[41679-41690]"
    }, {
      "left" : "Node rhsValue",
      "right" : "Node rhsValue",
      "info" : "SingleVariableDeclaration[41403-41416]:SingleVariableDeclaration[41692-41705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41418-45360]:Block[41707-45649]"
    }, {
      "left" : "Node ownerNode = n.getFirstChild();",
      "right" : "Node ownerNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[41426-41461]:VariableDeclarationStatement[41715-41750]"
    }, {
      "left" : "String ownerName = ownerNode.getQualifiedName();",
      "right" : "String ownerName = ownerNode.getQualifiedName();",
      "info" : "VariableDeclarationStatement[41468-41516]:VariableDeclarationStatement[41757-41805]"
    }, {
      "left" : "String qName = n.getQualifiedName();",
      "right" : "String qName = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[41523-41559]:VariableDeclarationStatement[41812-41848]"
    }, {
      "left" : "String propName = n.getLastChild().getString();",
      "right" : "String propName = n.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[41566-41613]:VariableDeclarationStatement[41855-41902]"
    }, {
      "left" : "Preconditions.checkArgument(qName != null && ownerName != null);",
      "right" : "Preconditions.checkArgument(qName != null && ownerName != null);",
      "info" : "ExpressionStatement[41620-41684]:ExpressionStatement[41909-41973]"
    }, {
      "left" : "if (\"prototype\".equals(propName))",
      "right" : "if (\"prototype\".equals(propName))",
      "info" : "IfStatement[41927-42212]:IfStatement[42216-42501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41961-42212]:Block[42250-42501]"
    }, {
      "left" : "Var qVar = scope.getVar(qName);",
      "right" : "Var qVar = scope.getVar(qName);",
      "info" : "VariableDeclarationStatement[41971-42002]:VariableDeclarationStatement[42260-42291]"
    }, {
      "left" : "if (qVar != null)",
      "right" : "if (qVar != null)",
      "info" : "IfStatement[42011-42204]:IfStatement[42300-42493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42029-42204]:Block[42318-42493]"
    }, {
      "left" : "if (!qVar.isTypeInferred())",
      "right" : "if (!qVar.isTypeInferred())",
      "info" : "IfStatement[42041-42161]:IfStatement[42330-42450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42069-42161]:Block[42358-42450]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[42142-42149]:ReturnStatement[42431-42438]"
    }, {
      "left" : "scope.undeclare(qVar);",
      "right" : "scope.undeclare(qVar);",
      "info" : "ExpressionStatement[42172-42194]:ExpressionStatement[42461-42483]"
    }, {
      "left" : "JSType valueType = getDeclaredGetPropType(t, info, n, rhsValue);",
      "right" : "JSType valueType = getDeclaredGetPropType(t, info, n, rhsValue);",
      "info" : "VariableDeclarationStatement[42801-42865]:VariableDeclarationStatement[43090-43154]"
    }, {
      "left" : "if (valueType == null && rhsValue != null)",
      "right" : "if (valueType == null && rhsValue != null)",
      "info" : "IfStatement[42872-43001]:IfStatement[43161-43290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42915-43001]:Block[43204-43290]"
    }, {
      "left" : "valueType = rhsValue.getJSType();",
      "right" : "valueType = rhsValue.getJSType();",
      "info" : "ExpressionStatement[42960-42993]:ExpressionStatement[43249-43282]"
    }, {
      "left" : "if (valueType == null)",
      "right" : "if (valueType == null)",
      "info" : "IfStatement[43009-43280]:IfStatement[43298-43569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43032-43280]:Block[43321-43569]"
    }, {
      "left" : "if (parent.getType() == Token.EXPR_RESULT)",
      "right" : "if (parent.getType() == Token.EXPR_RESULT)",
      "info" : "IfStatement[43042-43255]:IfStatement[43331-43544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43085-43255]:Block[43374-43544]"
    }, {
      "left" : "stubDeclarations.add(new StubDeclaration(\n              n,\n              t.getInput() != null && t.getInput().isExtern(),\n              ownerName));",
      "right" : "stubDeclarations.add(new StubDeclaration(\n              n,\n              t.getInput() != null && t.getInput().isExtern(),\n              ownerName));",
      "info" : "ExpressionStatement[43097-43245]:ExpressionStatement[43386-43534]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[43265-43272]:ReturnStatement[43554-43561]"
    }, {
      "left" : "boolean inferred = true;",
      "right" : "boolean inferred = true;",
      "info" : "VariableDeclarationStatement[43288-43312]:VariableDeclarationStatement[43577-43601]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[43319-43529]:IfStatement[43608-43818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43337-43529]:Block[43626-43818]"
    }, {
      "left" : "inferred = !(info.hasType() || info.hasEnumParameterType() ||\n            FunctionTypeBuilder.isFunctionTypeDeclaration(info));",
      "right" : "inferred = !(info.hasType() || info.hasEnumParameterType() ||\n            FunctionTypeBuilder.isFunctionTypeDeclaration(info));",
      "info" : "ExpressionStatement[43394-43521]:ExpressionStatement[43683-43810]"
    }, {
      "left" : "if (inferred)",
      "right" : "if (inferred)",
      "info" : "IfStatement[43537-43741]:IfStatement[43826-44030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43551-43741]:Block[43840-44030]"
    }, {
      "left" : "inferred = !(rhsValue != null &&\n            rhsValue.getType() == Token.FUNCTION &&\n            !scope.isDeclared(qName, false));",
      "right" : "inferred = !(rhsValue != null &&\n            rhsValue.getType() == Token.FUNCTION &&\n            !scope.isDeclared(qName, false));",
      "info" : "ExpressionStatement[43603-43733]:ExpressionStatement[43892-44022]"
    }, {
      "left" : "if (!inferred)",
      "right" : "if (!inferred)",
      "info" : "IfStatement[43749-45354]:IfStatement[44038-45643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43764-44627]:Block[44053-44916]"
    }, {
      "left" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "right" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "info" : "VariableDeclarationStatement[43774-43822]:VariableDeclarationStatement[44063-44111]"
    }, {
      "left" : "if (ownerType != null)",
      "right" : "if (ownerType != null)",
      "info" : "IfStatement[43831-44434]:IfStatement[44120-44723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43854-44434]:Block[44143-44723]"
    }, {
      "left" : "boolean isExtern = t.getInput() != null && t.getInput().isExtern();",
      "right" : "boolean isExtern = t.getInput() != null && t.getInput().isExtern();",
      "info" : "VariableDeclarationStatement[43967-44034]:VariableDeclarationStatement[44256-44323]"
    }, {
      "left" : "if ((!ownerType.hasOwnProperty(propName) ||\n               ownerType.isPropertyTypeInferred(propName)) &&\n              ((isExtern && !ownerType.isNativeObjectType()) ||\n               !ownerType.isInstanceType()))",
      "right" : "if ((!ownerType.hasOwnProperty(propName) ||\n               ownerType.isPropertyTypeInferred(propName)) &&\n              ((isExtern && !ownerType.isNativeObjectType()) ||\n               !ownerType.isInstanceType()))",
      "info" : "IfStatement[44045-44424]:IfStatement[44334-44713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44260-44424]:Block[44549-44713]"
    }, {
      "left" : "ownerType.defineDeclaredProperty(propName, valueType, isExtern);",
      "right" : "ownerType.defineDeclaredProperty(propName, valueType, isExtern);",
      "info" : "ExpressionStatement[44348-44412]:ExpressionStatement[44637-44701]"
    }, {
      "left" : "defineSlot(n, parent, valueType, inferred);",
      "right" : "defineSlot(n, parent, valueType, inferred);",
      "info" : "ExpressionStatement[44576-44619]:ExpressionStatement[44865-44908]"
    }, {
      "left" : "if (rhsValue != null &&\n          rhsValue.getType() == Token.TRUE)",
      "right" : "if (rhsValue != null &&\n          rhsValue.getType() == Token.TRUE)",
      "info" : "IfStatement[44633-45354]:IfStatement[44922-45643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44701-45354]:Block[44990-45643]"
    }, {
      "left" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "right" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "info" : "VariableDeclarationStatement[44777-44825]:VariableDeclarationStatement[45066-45114]"
    }, {
      "left" : "if (ownerType instanceof FunctionType)",
      "right" : "if (ownerType instanceof FunctionType)",
      "info" : "IfStatement[44834-45346]:IfStatement[45123-45635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44873-45346]:Block[45162-45635]"
    }, {
      "left" : "JSType ownerTypeOfThis = ((FunctionType) ownerType).getTypeOfThis();",
      "right" : "JSType ownerTypeOfThis = ((FunctionType) ownerType).getTypeOfThis();",
      "info" : "VariableDeclarationStatement[44885-44953]:VariableDeclarationStatement[45174-45242]"
    }, {
      "left" : "String delegateName = codingConvention.getDelegateSuperclassName();",
      "right" : "String delegateName = codingConvention.getDelegateSuperclassName();",
      "info" : "VariableDeclarationStatement[44964-45031]:VariableDeclarationStatement[45253-45320]"
    }, {
      "left" : "JSType delegateType = delegateName == null ?\n              null : typeRegistry.getType(delegateName);",
      "right" : "JSType delegateType = delegateName == null ?\n              null : typeRegistry.getType(delegateName);",
      "info" : "VariableDeclarationStatement[45042-45143]:VariableDeclarationStatement[45331-45432]"
    }, {
      "left" : "if (delegateType != null &&\n              ownerTypeOfThis.isSubtype(delegateType))",
      "right" : "if (delegateType != null &&\n              ownerTypeOfThis.isSubtype(delegateType))",
      "info" : "IfStatement[45154-45336]:IfStatement[45443-45625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45237-45336]:Block[45526-45625]"
    }, {
      "left" : "defineSlot(n, parent, getNativeType(BOOLEAN_TYPE),\n                true);",
      "right" : "defineSlot(n, parent, getNativeType(BOOLEAN_TYPE),\n                true);",
      "info" : "ExpressionStatement[45251-45324]:ExpressionStatement[45540-45613]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[45586-45593]:Modifier[45875-45882]"
    }, {
      "left" : "ObjectType",
      "right" : "ObjectType",
      "info" : "SimpleType[45594-45604]:SimpleType[45883-45893]"
    }, {
      "left" : "getObjectSlot",
      "right" : "getObjectSlot",
      "info" : "SimpleName[45605-45618]:SimpleName[45894-45907]"
    }, {
      "left" : "String slotName",
      "right" : "String slotName",
      "info" : "SingleVariableDeclaration[45619-45634]:SingleVariableDeclaration[45908-45923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45636-45914]:Block[45925-46203]"
    }, {
      "left" : "Var ownerVar = scope.getVar(slotName);",
      "right" : "Var ownerVar = scope.getVar(slotName);",
      "info" : "VariableDeclarationStatement[45644-45682]:VariableDeclarationStatement[45933-45971]"
    }, {
      "left" : "if (ownerVar != null)",
      "right" : "if (ownerVar != null)",
      "info" : "IfStatement[45689-45889]:IfStatement[45978-46178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45711-45889]:Block[46000-46178]"
    }, {
      "left" : "JSType ownerVarType = ownerVar.getType();",
      "right" : "JSType ownerVarType = ownerVar.getType();",
      "info" : "VariableDeclarationStatement[45721-45762]:VariableDeclarationStatement[46010-46051]"
    }, {
      "left" : "return ObjectType.cast(ownerVarType == null ?\n            null : ownerVarType.restrictByNotNullOrUndefined());",
      "right" : "return ObjectType.cast(ownerVarType == null ?\n            null : ownerVarType.restrictByNotNullOrUndefined());",
      "info" : "ReturnStatement[45771-45881]:ReturnStatement[46060-46170]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[45896-45908]:ReturnStatement[46185-46197]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[46051-46055]:PrimitiveType[46340-46344]"
    }, {
      "left" : "resolveStubDeclarations",
      "right" : "resolveStubDeclarations",
      "info" : "SimpleName[46056-46079]:SimpleName[46345-46368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46082-47240]:Block[46371-47529]"
    }, {
      "left" : "for (StubDeclaration stub : stubDeclarations)",
      "right" : "for (StubDeclaration stub : stubDeclarations)",
      "info" : "EnhancedForStatement[46090-47234]:EnhancedForStatement[46379-47523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46136-47234]:Block[46425-47523]"
    }, {
      "left" : "Node n = stub.node;",
      "right" : "Node n = stub.node;",
      "info" : "VariableDeclarationStatement[46146-46165]:VariableDeclarationStatement[46435-46454]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[46174-46202]:VariableDeclarationStatement[46463-46491]"
    }, {
      "left" : "String qName = n.getQualifiedName();",
      "right" : "String qName = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[46211-46247]:VariableDeclarationStatement[46500-46536]"
    }, {
      "left" : "String propName = n.getLastChild().getString();",
      "right" : "String propName = n.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[46256-46303]:VariableDeclarationStatement[46545-46592]"
    }, {
      "left" : "String ownerName = stub.ownerName;",
      "right" : "String ownerName = stub.ownerName;",
      "info" : "VariableDeclarationStatement[46312-46346]:VariableDeclarationStatement[46601-46635]"
    }, {
      "left" : "boolean isExtern = stub.isExtern;",
      "right" : "boolean isExtern = stub.isExtern;",
      "info" : "VariableDeclarationStatement[46355-46388]:VariableDeclarationStatement[46644-46677]"
    }, {
      "left" : "if (scope.isDeclared(qName, false))",
      "right" : "if (scope.isDeclared(qName, false))",
      "info" : "IfStatement[46398-46465]:IfStatement[46687-46754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46434-46465]:Block[46723-46754]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[46446-46455]:ContinueStatement[46735-46744]"
    }, {
      "left" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "right" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "info" : "VariableDeclarationStatement[46582-46630]:VariableDeclarationStatement[46871-46919]"
    }, {
      "left" : "ObjectType unknownType = typeRegistry.getNativeObjectType(UNKNOWN_TYPE);",
      "right" : "ObjectType unknownType = typeRegistry.getNativeObjectType(UNKNOWN_TYPE);",
      "info" : "VariableDeclarationStatement[46639-46711]:VariableDeclarationStatement[46928-47000]"
    }, {
      "left" : "defineSlot(n, parent, unknownType, true);",
      "right" : "defineSlot(n, parent, unknownType, true);",
      "info" : "ExpressionStatement[46720-46761]:ExpressionStatement[47009-47050]"
    }, {
      "left" : "if (ownerType != null &&\n            (isExtern || ownerType.isFunctionPrototypeType()))",
      "right" : "if (ownerType != null &&\n            (isExtern || ownerType.isFunctionPrototypeType()))",
      "info" : "IfStatement[46771-47226]:IfStatement[47060-47515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46859-47092]:Block[47148-47381]"
    }, {
      "left" : "ownerType.defineInferredProperty(\n              propName, unknownType, isExtern);",
      "right" : "ownerType.defineInferredProperty(\n              propName, unknownType, isExtern);",
      "info" : "ExpressionStatement[47001-47082]:ExpressionStatement[47290-47371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47098-47226]:Block[47387-47515]"
    }, {
      "left" : "typeRegistry.registerPropertyOnType(\n              propName, ownerType == null ? unknownType : ownerType);",
      "right" : "typeRegistry.registerPropertyOnType(\n              propName, ownerType == null ? unknownType : ownerType);",
      "info" : "ExpressionStatement[47110-47216]:ExpressionStatement[47399-47505]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[47372-47379]:Modifier[47661-47668]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[47380-47385]:Modifier[47669-47674]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[47386-47391]:TYPE_DECLARATION_KIND[47675-47680]"
    }, {
      "left" : "CollectProperties",
      "right" : "CollectProperties",
      "info" : "SimpleName[47392-47409]:SimpleName[47681-47698]"
    }, {
      "left" : "AbstractShallowStatementCallback",
      "right" : "AbstractShallowStatementCallback",
      "info" : "SimpleType[47426-47458]:SimpleType[47715-47747]"
    }, {
      "left" : "CollectProperties",
      "right" : "CollectProperties",
      "info" : "SimpleName[47509-47526]:SimpleName[47798-47815]"
    }, {
      "left" : "ObjectType thisType",
      "right" : "ObjectType thisType",
      "info" : "SingleVariableDeclaration[47527-47546]:SingleVariableDeclaration[47816-47835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47548-47591]:Block[47837-47880]"
    }, {
      "left" : "this.thisType = thisType;",
      "right" : "this.thisType = thisType;",
      "info" : "ExpressionStatement[47558-47583]:ExpressionStatement[47847-47872]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[47599-47605]:Modifier[47888-47894]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[47606-47610]:PrimitiveType[47895-47899]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[47611-47616]:SimpleName[47900-47905]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[47617-47632]:SingleVariableDeclaration[47906-47921]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[47634-47640]:SingleVariableDeclaration[47923-47929]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[47642-47653]:SingleVariableDeclaration[47931-47942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47655-48036]:Block[47944-48325]"
    }, {
      "left" : "if (n.getType() == Token.EXPR_RESULT)",
      "right" : "if (n.getType() == Token.EXPR_RESULT)",
      "info" : "IfStatement[47665-48028]:IfStatement[47954-48317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47703-48028]:Block[47992-48317]"
    }, {
      "left" : "Node child = n.getFirstChild();",
      "right" : "Node child = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[47715-47746]:VariableDeclarationStatement[48004-48035]"
    }, {
      "left" : "switch (child.getType()) {\n            case Token.ASSIGN:\n              maybeCollectMember(t, child.getFirstChild(), child);\n              break;\n            case Token.GETPROP:\n              maybeCollectMember(t, child, child);\n              break;\n          }",
      "right" : "switch (child.getType()) {\n            case Token.ASSIGN:\n              maybeCollectMember(t, child.getFirstChild(), child);\n              break;\n            case Token.GETPROP:\n              maybeCollectMember(t, child, child);\n              break;\n          }",
      "info" : "SwitchStatement[47757-48018]:SwitchStatement[48046-48307]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[47796-47814]:SwitchCase[48085-48103]"
    }, {
      "left" : "maybeCollectMember(t, child.getFirstChild(), child);",
      "right" : "maybeCollectMember(t, child.getFirstChild(), child);",
      "info" : "ExpressionStatement[47829-47881]:ExpressionStatement[48118-48170]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47896-47902]:BreakStatement[48185-48191]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[47915-47934]:SwitchCase[48204-48223]"
    }, {
      "left" : "maybeCollectMember(t, child, child);",
      "right" : "maybeCollectMember(t, child, child);",
      "info" : "ExpressionStatement[47949-47985]:ExpressionStatement[48238-48274]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48000-48006]:BreakStatement[48289-48295]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48044-48051]:Modifier[48333-48340]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[48052-48056]:PrimitiveType[48341-48345]"
    }, {
      "left" : "maybeCollectMember",
      "right" : "maybeCollectMember",
      "info" : "SimpleName[48057-48075]:SimpleName[48346-48364]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[48076-48091]:SingleVariableDeclaration[48365-48380]"
    }, {
      "left" : "Node member",
      "right" : "Node member",
      "info" : "SingleVariableDeclaration[48103-48114]:SingleVariableDeclaration[48392-48403]"
    }, {
      "left" : "Node nodeWithJsDocInfo",
      "right" : "Node nodeWithJsDocInfo",
      "info" : "SingleVariableDeclaration[48116-48138]:SingleVariableDeclaration[48405-48427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48140-49023]:Block[48429-49312]"
    }, {
      "left" : "JSDocInfo info = nodeWithJsDocInfo.getJSDocInfo();",
      "right" : "JSDocInfo info = nodeWithJsDocInfo.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[48150-48200]:VariableDeclarationStatement[48439-48489]"
    }, {
      "left" : "if (info == null ||\n            member.getType() != Token.GETPROP ||\n            member.getFirstChild().getType() != Token.THIS)",
      "right" : "if (info == null ||\n            member.getType() != Token.GETPROP ||\n            member.getFirstChild().getType() != Token.THIS)",
      "info" : "IfStatement[48396-48554]:IfStatement[48685-48843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48525-48554]:Block[48814-48843]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[48537-48544]:ReturnStatement[48826-48833]"
    }, {
      "left" : "member.getFirstChild().setJSType(thisType);",
      "right" : "member.getFirstChild().setJSType(thisType);",
      "info" : "ExpressionStatement[48564-48607]:ExpressionStatement[48853-48896]"
    }, {
      "left" : "JSType jsType = getDeclaredTypeInAnnotation(t, member, info);",
      "right" : "JSType jsType = getDeclaredTypeInAnnotation(t, member, info);",
      "info" : "VariableDeclarationStatement[48616-48677]:VariableDeclarationStatement[48905-48966]"
    }, {
      "left" : "Node name = member.getLastChild();",
      "right" : "Node name = member.getLastChild();",
      "info" : "VariableDeclarationStatement[48686-48720]:VariableDeclarationStatement[48975-49009]"
    }, {
      "left" : "if (jsType != null &&\n            (name.getType() == Token.NAME || name.getType() == Token.STRING))",
      "right" : "if (jsType != null &&\n            (name.getType() == Token.NAME || name.getType() == Token.STRING))",
      "info" : "IfStatement[48729-49015]:IfStatement[49018-49304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48829-49015]:Block[49118-49304]"
    }, {
      "left" : "thisType.defineDeclaredProperty(\n              name.getString(),\n              jsType,\n              false /* functions with implementations are not in externs */);",
      "right" : "thisType.defineDeclaredProperty(\n              name.getString(),\n              jsType,\n              false /* functions with implementations are not in externs */);",
      "info" : "ExpressionStatement[48841-49005]:ExpressionStatement[49130-49294]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49128-49135]:Modifier[49417-49424]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[49136-49142]:Modifier[49425-49431]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[49143-49148]:Modifier[49432-49437]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[49149-49154]:TYPE_DECLARATION_KIND[49438-49443]"
    }, {
      "left" : "StubDeclaration",
      "right" : "StubDeclaration",
      "info" : "SimpleName[49155-49170]:SimpleName[49444-49459]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49279-49286]:Modifier[49568-49575]"
    }, {
      "left" : "StubDeclaration",
      "right" : "StubDeclaration",
      "info" : "SimpleName[49287-49302]:SimpleName[49576-49591]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[49303-49312]:SingleVariableDeclaration[49592-49601]"
    }, {
      "left" : "boolean isExtern",
      "right" : "boolean isExtern",
      "info" : "SingleVariableDeclaration[49314-49330]:SingleVariableDeclaration[49603-49619]"
    }, {
      "left" : "String ownerName",
      "right" : "String ownerName",
      "info" : "SingleVariableDeclaration[49332-49348]:SingleVariableDeclaration[49621-49637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49350-49447]:Block[49639-49736]"
    }, {
      "left" : "this.node = node;",
      "right" : "this.node = node;",
      "info" : "ExpressionStatement[49358-49375]:ExpressionStatement[49647-49664]"
    }, {
      "left" : "this.isExtern = isExtern;",
      "right" : "this.isExtern = isExtern;",
      "info" : "ExpressionStatement[49382-49407]:ExpressionStatement[49671-49696]"
    }, {
      "left" : "this.ownerName = ownerName;",
      "right" : "this.ownerName = ownerName;",
      "info" : "ExpressionStatement[49414-49441]:ExpressionStatement[49703-49730]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49566-49573]:Modifier[49855-49862]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[49574-49579]:Modifier[49863-49868]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[49580-49585]:TYPE_DECLARATION_KIND[49869-49874]"
    }, {
      "left" : "GlobalScopeBuilder",
      "right" : "GlobalScopeBuilder",
      "info" : "SimpleName[49586-49604]:SimpleName[49875-49893]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleType[49613-49633]:SimpleType[49902-49922]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49641-49648]:Modifier[49930-49937]"
    }, {
      "left" : "GlobalScopeBuilder",
      "right" : "GlobalScopeBuilder",
      "info" : "SimpleName[49649-49667]:SimpleName[49938-49956]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[49668-49679]:SingleVariableDeclaration[49957-49968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49681-49708]:Block[49970-49997]"
    }, {
      "left" : "super(scope);",
      "right" : "super(scope);",
      "info" : "SuperConstructorInvocation[49689-49702]:SuperConstructorInvocation[49978-49991]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[49958-49967]:MarkerAnnotation[50247-50256]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[49968-49974]:Modifier[50257-50263]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[49975-49979]:PrimitiveType[50264-50268]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[49980-49985]:SimpleName[50269-50274]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[49986-50001]:SingleVariableDeclaration[50275-50290]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[50003-50009]:SingleVariableDeclaration[50292-50298]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[50011-50022]:SingleVariableDeclaration[50300-50311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50024-50447]:Block[50313-50736]"
    }, {
      "left" : "super.visit(t, n, parent);",
      "right" : "super.visit(t, n, parent);",
      "info" : "ExpressionStatement[50032-50058]:ExpressionStatement[50321-50347]"
    }, {
      "left" : "switch (n.getType()) {\n\n        case Token.ASSIGN:\n          // Handle typedefs.\n          checkForOldStyleTypedef(t, n);\n          break;\n\n        case Token.VAR:\n          // Handle typedefs.\n          if (n.hasOneChild()) {\n            checkForOldStyleTypedef(t, n);\n            checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());\n          }\n          break;\n      }",
      "right" : "switch (n.getType()) {\n\n        case Token.ASSIGN:\n          // Handle typedefs.\n          checkForOldStyleTypedef(t, n);\n          break;\n\n        case Token.VAR:\n          // Handle typedefs.\n          if (n.hasOneChild()) {\n            checkForOldStyleTypedef(t, n);\n            checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());\n          }\n          break;\n      }",
      "info" : "SwitchStatement[50066-50441]:SwitchStatement[50355-50730]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[50098-50116]:SwitchCase[50387-50405]"
    }, {
      "left" : "checkForOldStyleTypedef(t, n);",
      "right" : "checkForOldStyleTypedef(t, n);",
      "info" : "ExpressionStatement[50157-50187]:ExpressionStatement[50446-50476]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[50198-50204]:BreakStatement[50487-50493]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[50214-50229]:SwitchCase[50503-50518]"
    }, {
      "left" : "if (n.hasOneChild())",
      "right" : "if (n.hasOneChild())",
      "info" : "IfStatement[50270-50416]:IfStatement[50559-50705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50291-50416]:Block[50580-50705]"
    }, {
      "left" : "checkForOldStyleTypedef(t, n);",
      "right" : "checkForOldStyleTypedef(t, n);",
      "info" : "ExpressionStatement[50305-50335]:ExpressionStatement[50594-50624]"
    }, {
      "left" : "checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());",
      "right" : "checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());",
      "info" : "ExpressionStatement[50348-50404]:ExpressionStatement[50637-50693]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[50427-50433]:BreakStatement[50716-50722]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[50453-50462]:MarkerAnnotation[50742-50751]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[50467-50471]:PrimitiveType[50756-50760]"
    }, {
      "left" : "maybeDeclareQualifiedName",
      "right" : "maybeDeclareQualifiedName",
      "info" : "SimpleName[50472-50497]:SimpleName[50761-50786]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[50507-50522]:SingleVariableDeclaration[50796-50811]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[50524-50538]:SingleVariableDeclaration[50813-50827]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[50548-50554]:SingleVariableDeclaration[50837-50843]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[50556-50567]:SingleVariableDeclaration[50845-50856]"
    }, {
      "left" : "Node rhsValue",
      "right" : "Node rhsValue",
      "info" : "SingleVariableDeclaration[50569-50582]:SingleVariableDeclaration[50858-50871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50584-50695]:Block[50873-50984]"
    }, {
      "left" : "checkForTypedef(t, n, info);",
      "right" : "checkForTypedef(t, n, info);",
      "info" : "ExpressionStatement[50592-50620]:ExpressionStatement[50881-50909]"
    }, {
      "left" : "super.maybeDeclareQualifiedName(t, info, n, parent, rhsValue);",
      "right" : "super.maybeDeclareQualifiedName(t, info, n, parent, rhsValue);",
      "info" : "ExpressionStatement[50627-50689]:ExpressionStatement[50916-50978]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[50862-50869]:Modifier[51151-51158]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[50870-50874]:PrimitiveType[51159-51163]"
    }, {
      "left" : "checkForTypedef",
      "right" : "checkForTypedef",
      "info" : "SimpleName[50875-50890]:SimpleName[51164-51179]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[50900-50915]:SingleVariableDeclaration[51189-51204]"
    }, {
      "left" : "Node candidate",
      "right" : "Node candidate",
      "info" : "SingleVariableDeclaration[50917-50931]:SingleVariableDeclaration[51206-51220]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[50933-50947]:SingleVariableDeclaration[51222-51236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50949-51804]:Block[51238-52093]"
    }, {
      "left" : "if (info == null || !info.hasTypedefType())",
      "right" : "if (info == null || !info.hasTypedefType())",
      "info" : "IfStatement[50957-51026]:IfStatement[51246-51315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51001-51026]:Block[51290-51315]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[51011-51018]:ReturnStatement[51300-51307]"
    }, {
      "left" : "String typedef = candidate.getQualifiedName();",
      "right" : "String typedef = candidate.getQualifiedName();",
      "info" : "VariableDeclarationStatement[51034-51080]:VariableDeclarationStatement[51323-51369]"
    }, {
      "left" : "if (typedef == null)",
      "right" : "if (typedef == null)",
      "info" : "IfStatement[51087-51133]:IfStatement[51376-51422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51108-51133]:Block[51397-51422]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[51118-51125]:ReturnStatement[51407-51414]"
    }, {
      "left" : "typeRegistry.forwardDeclareType(typedef);",
      "right" : "typeRegistry.forwardDeclareType(typedef);",
      "info" : "ExpressionStatement[51307-51348]:ExpressionStatement[51596-51637]"
    }, {
      "left" : "JSType realType = info.getTypedefType().evaluate(scope, typeRegistry);",
      "right" : "JSType realType = info.getTypedefType().evaluate(scope, typeRegistry);",
      "info" : "VariableDeclarationStatement[51356-51426]:VariableDeclarationStatement[51645-51715]"
    }, {
      "left" : "if (realType == null)",
      "right" : "if (realType == null)",
      "info" : "IfStatement[51433-51591]:IfStatement[51722-51880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51455-51591]:Block[51744-51880]"
    }, {
      "left" : "compiler.report(\n            JSError.make(\n                t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
      "right" : "compiler.report(\n            JSError.make(\n                t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
      "info" : "ExpressionStatement[51465-51583]:ExpressionStatement[51754-51872]"
    }, {
      "left" : "typeRegistry.declareType(typedef, realType);",
      "right" : "typeRegistry.declareType(typedef, realType);",
      "info" : "ExpressionStatement[51599-51643]:ExpressionStatement[51888-51932]"
    }, {
      "left" : "if (candidate.getType() == Token.GETPROP)",
      "right" : "if (candidate.getType() == Token.GETPROP)",
      "info" : "IfStatement[51650-51798]:IfStatement[51939-52087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51692-51798]:Block[51981-52087]"
    }, {
      "left" : "defineSlot(candidate, candidate.getParent(),\n            getNativeType(NO_TYPE), false);",
      "right" : "defineSlot(candidate, candidate.getParent(),\n            getNativeType(NO_TYPE), false);",
      "info" : "ExpressionStatement[51702-51790]:ExpressionStatement[51991-52079]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[51972-51979]:Modifier[52261-52268]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[51980-51984]:PrimitiveType[52269-52273]"
    }, {
      "left" : "checkForOldStyleTypedef",
      "right" : "checkForOldStyleTypedef",
      "info" : "SimpleName[51985-52008]:SimpleName[52274-52297]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[52009-52024]:SingleVariableDeclaration[52298-52313]"
    }, {
      "left" : "Node candidate",
      "right" : "Node candidate",
      "info" : "SingleVariableDeclaration[52026-52040]:SingleVariableDeclaration[52315-52329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52042-52960]:Block[52331-53249]"
    }, {
      "left" : "String typedef = codingConvention.identifyTypeDefAssign(candidate);",
      "right" : "String typedef = codingConvention.identifyTypeDefAssign(candidate);",
      "info" : "VariableDeclarationStatement[52078-52145]:VariableDeclarationStatement[52367-52434]"
    }, {
      "left" : "if (typedef != null)",
      "right" : "if (typedef != null)",
      "info" : "IfStatement[52152-52954]:IfStatement[52441-53243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52173-52954]:Block[52462-53243]"
    }, {
      "left" : "typeRegistry.forwardDeclareType(typedef);",
      "right" : "typeRegistry.forwardDeclareType(typedef);",
      "info" : "ExpressionStatement[52355-52396]:ExpressionStatement[52644-52685]"
    }, {
      "left" : "JSDocInfo info = candidate.getJSDocInfo();",
      "right" : "JSDocInfo info = candidate.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[52406-52448]:VariableDeclarationStatement[52695-52737]"
    }, {
      "left" : "JSType realType = null;",
      "right" : "JSType realType = null;",
      "info" : "VariableDeclarationStatement[52457-52480]:VariableDeclarationStatement[52746-52769]"
    }, {
      "left" : "if (info != null && info.getType() != null)",
      "right" : "if (info != null && info.getType() != null)",
      "info" : "IfStatement[52489-52611]:IfStatement[52778-52900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52533-52611]:Block[52822-52900]"
    }, {
      "left" : "realType = info.getType().evaluate(scope, typeRegistry);",
      "right" : "realType = info.getType().evaluate(scope, typeRegistry);",
      "info" : "ExpressionStatement[52545-52601]:ExpressionStatement[52834-52890]"
    }, {
      "left" : "if (realType == null)",
      "right" : "if (realType == null)",
      "info" : "IfStatement[52621-52787]:IfStatement[52910-53076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52643-52787]:Block[52932-53076]"
    }, {
      "left" : "compiler.report(\n              JSError.make(\n                  t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
      "right" : "compiler.report(\n              JSError.make(\n                  t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
      "info" : "ExpressionStatement[52655-52777]:ExpressionStatement[52944-53066]"
    }, {
      "left" : "typeRegistry.declareType(typedef, realType);",
      "right" : "typeRegistry.declareType(typedef, realType);",
      "info" : "ExpressionStatement[52797-52841]:ExpressionStatement[53086-53130]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[53096-53103]:Modifier[53385-53392]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[53104-53109]:Modifier[53393-53398]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[53110-53115]:TYPE_DECLARATION_KIND[53399-53404]"
    }, {
      "left" : "LocalScopeBuilder",
      "right" : "LocalScopeBuilder",
      "info" : "SimpleName[53116-53133]:SimpleName[53405-53422]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleType[53142-53162]:SimpleType[53431-53451]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[53236-53243]:Modifier[53525-53532]"
    }, {
      "left" : "LocalScopeBuilder",
      "right" : "LocalScopeBuilder",
      "info" : "SimpleName[53244-53261]:SimpleName[53533-53550]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[53262-53273]:SingleVariableDeclaration[53551-53562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53275-53302]:Block[53564-53591]"
    }, {
      "left" : "super(scope);",
      "right" : "super(scope);",
      "info" : "SuperConstructorInvocation[53283-53296]:SuperConstructorInvocation[53572-53585]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[53369-53373]:PrimitiveType[53658-53662]"
    }, {
      "left" : "build",
      "right" : "build",
      "info" : "SimpleName[53374-53379]:SimpleName[53663-53668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53382-53456]:Block[53671-53745]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, scope.getRootNode(), this);",
      "right" : "NodeTraversal.traverse(compiler, scope.getRootNode(), this);",
      "info" : "ExpressionStatement[53390-53450]:ExpressionStatement[53679-53739]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[53720-53729]:MarkerAnnotation[54009-54018]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[53730-53736]:Modifier[54019-54025]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[53737-53741]:PrimitiveType[54026-54030]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[53742-53747]:SimpleName[54031-54036]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[53748-53763]:SingleVariableDeclaration[54037-54052]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[53765-53771]:SingleVariableDeclaration[54054-54060]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[53773-53784]:SingleVariableDeclaration[54062-54073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53786-54004]:Block[54075-54293]"
    }, {
      "left" : "if (n == scope.getRootNode())",
      "right" : "if (n == scope.getRootNode())",
      "info" : "IfStatement[53794-53831]:IfStatement[54083-54120]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[53824-53831]:ReturnStatement[54113-54120]"
    }, {
      "left" : "if (n.getType() == Token.LP && parent == scope.getRootNode())",
      "right" : "if (n.getType() == Token.LP && parent == scope.getRootNode())",
      "info" : "IfStatement[53839-53964]:IfStatement[54128-54253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53901-53964]:Block[54190-54253]"
    }, {
      "left" : "handleFunctionInputs(parent);",
      "right" : "handleFunctionInputs(parent);",
      "info" : "ExpressionStatement[53911-53940]:ExpressionStatement[54200-54229]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[53949-53956]:ReturnStatement[54238-54245]"
    }, {
      "left" : "super.visit(t, n, parent);",
      "right" : "super.visit(t, n, parent);",
      "info" : "ExpressionStatement[53972-53998]:ExpressionStatement[54261-54287]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[54072-54079]:Modifier[54361-54368]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[54080-54084]:PrimitiveType[54369-54373]"
    }, {
      "left" : "handleFunctionInputs",
      "right" : "handleFunctionInputs",
      "info" : "SimpleName[54085-54105]:SimpleName[54374-54394]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[54106-54117]:SingleVariableDeclaration[54395-54406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54119-54875]:Block[54408-55164]"
    }, {
      "left" : "Node fnNameNode = fnNode.getFirstChild();",
      "right" : "Node fnNameNode = fnNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[54163-54204]:VariableDeclarationStatement[54452-54493]"
    }, {
      "left" : "String fnName = fnNameNode.getString();",
      "right" : "String fnName = fnNameNode.getString();",
      "info" : "VariableDeclarationStatement[54211-54250]:VariableDeclarationStatement[54500-54539]"
    }, {
      "left" : "if (!fnName.isEmpty())",
      "right" : "if (!fnName.isEmpty())",
      "info" : "IfStatement[54257-54836]:IfStatement[54546-55125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54280-54836]:Block[54569-55125]"
    }, {
      "left" : "Scope.Var fnVar = scope.getVar(fnName);",
      "right" : "Scope.Var fnVar = scope.getVar(fnName);",
      "info" : "VariableDeclarationStatement[54290-54329]:VariableDeclarationStatement[54579-54618]"
    }, {
      "left" : "if (fnVar == null ||\n            // Make sure we're not touching a native function. Native\n            // functions aren't bleeding, but may not have a declaration\n            // node.\n            (fnVar.getNameNode() != null &&\n                // Make sure that the function is actually bleeding by checking\n                // if has already been declared.\n                fnVar.getInitialValue() != fnNode))",
      "right" : "if (fnVar == null ||\n            // Make sure we're not touching a native function. Native\n            // functions aren't bleeding, but may not have a declaration\n            // node.\n            (fnVar.getNameNode() != null &&\n                // Make sure that the function is actually bleeding by checking\n                // if has already been declared.\n                fnVar.getInitialValue() != fnNode))",
      "info" : "IfStatement[54338-54828]:IfStatement[54627-55117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54748-54828]:Block[55037-55117]"
    }, {
      "left" : "defineSlot(fnNameNode, fnNode, fnNode.getJSType(), false);",
      "right" : "defineSlot(fnNameNode, fnNode, fnNode.getJSType(), false);",
      "info" : "ExpressionStatement[54760-54818]:ExpressionStatement[55049-55107]"
    }, {
      "left" : "declareArguments(fnNode);",
      "right" : "declareArguments(fnNode);",
      "info" : "ExpressionStatement[54844-54869]:ExpressionStatement[55133-55158]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[54944-54951]:Modifier[55233-55240]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[54952-54956]:PrimitiveType[55241-55245]"
    }, {
      "left" : "declareArguments",
      "right" : "declareArguments",
      "info" : "SimpleName[54957-54973]:SimpleName[55246-55262]"
    }, {
      "left" : "Node functionNode",
      "right" : "Node functionNode",
      "info" : "SingleVariableDeclaration[54974-54991]:SingleVariableDeclaration[55263-55280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54993-55787]:Block[55282-56076]"
    }, {
      "left" : "Node astParameters = functionNode.getFirstChild().getNext();",
      "right" : "Node astParameters = functionNode.getFirstChild().getNext();",
      "info" : "VariableDeclarationStatement[55001-55061]:VariableDeclarationStatement[55290-55350]"
    }, {
      "left" : "Node body = astParameters.getNext();",
      "right" : "Node body = astParameters.getNext();",
      "info" : "VariableDeclarationStatement[55068-55104]:VariableDeclarationStatement[55357-55393]"
    }, {
      "left" : "FunctionType functionType = (FunctionType) functionNode.getJSType();",
      "right" : "FunctionType functionType = (FunctionType) functionNode.getJSType();",
      "info" : "VariableDeclarationStatement[55111-55179]:VariableDeclarationStatement[55400-55468]"
    }, {
      "left" : "if (functionType != null)",
      "right" : "if (functionType != null)",
      "info" : "IfStatement[55186-55781]:IfStatement[55475-56070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55212-55781]:Block[55501-56070]"
    }, {
      "left" : "Node jsDocParameters = functionType.getParametersNode();",
      "right" : "Node jsDocParameters = functionType.getParametersNode();",
      "info" : "VariableDeclarationStatement[55222-55278]:VariableDeclarationStatement[55511-55567]"
    }, {
      "left" : "if (jsDocParameters != null)",
      "right" : "if (jsDocParameters != null)",
      "info" : "IfStatement[55287-55773]:IfStatement[55576-56062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55316-55773]:Block[55605-56062]"
    }, {
      "left" : "Node jsDocParameter = jsDocParameters.getFirstChild();",
      "right" : "Node jsDocParameter = jsDocParameters.getFirstChild();",
      "info" : "VariableDeclarationStatement[55328-55382]:VariableDeclarationStatement[55617-55671]"
    }, {
      "left" : "for (Node astParameter : astParameters.children())",
      "right" : "for (Node astParameter : astParameters.children())",
      "info" : "EnhancedForStatement[55393-55763]:EnhancedForStatement[55682-56052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55444-55763]:Block[55733-56052]"
    }, {
      "left" : "if (jsDocParameter != null)",
      "right" : "if (jsDocParameter != null)",
      "info" : "IfStatement[55458-55751]:IfStatement[55747-56040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55486-55664]:Block[55775-55953]"
    }, {
      "left" : "defineSlot(astParameter, functionNode,\n                  jsDocParameter.getJSType(), true);",
      "right" : "defineSlot(astParameter, functionNode,\n                  jsDocParameter.getJSType(), true);",
      "info" : "ExpressionStatement[55502-55593]:ExpressionStatement[55791-55882]"
    }, {
      "left" : "jsDocParameter = jsDocParameter.getNext();",
      "right" : "jsDocParameter = jsDocParameter.getNext();",
      "info" : "ExpressionStatement[55608-55650]:ExpressionStatement[55897-55939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55670-55751]:Block[55959-56040]"
    }, {
      "left" : "defineSlot(astParameter, functionNode, null, true);",
      "right" : "defineSlot(astParameter, functionNode, null, true);",
      "info" : "ExpressionStatement[55686-55737]:ExpressionStatement[55975-56026]"
    } ]
  },
  "interFileMappings" : { }
}