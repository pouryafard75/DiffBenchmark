{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "DataUtil",
      "right" : "DataUtil",
      "info" : "TypeDeclaration[372-9464]:TypeDeclaration[372-10018]"
    }, {
      "left" : "private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:\\\"|')?([^\\\\s,;\\\"']*)\");",
      "right" : "private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:\\\"|')?([^\\\\s,;\\\"']*)\");",
      "info" : "FieldDeclaration[465-573]:FieldDeclaration[465-573]"
    }, {
      "left" : "static final String defaultCharset = \"UTF-8\";",
      "right" : "static final String defaultCharset = \"UTF-8\";",
      "info" : "FieldDeclaration[578-623]:FieldDeclaration[578-623]"
    }, {
      "left" : "private static final int bufferSize = 0x20000;",
      "right" : "private static final int bufferSize = 0x20000;",
      "info" : "FieldDeclaration[675-721]:FieldDeclaration[675-721]"
    }, {
      "left" : "private static final int UNICODE_BOM = 0xFEFF;",
      "right" : "private static final int UNICODE_BOM = 0xFEFF;",
      "info" : "FieldDeclaration[736-782]:FieldDeclaration[736-782]"
    }, {
      "left" : "private static final char[] mimeBoundaryChars =\n            \"-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray();",
      "right" : "private static final char[] mimeBoundaryChars =\n            \"-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray();",
      "info" : "FieldDeclaration[787-928]:FieldDeclaration[787-928]"
    }, {
      "left" : "static final int boundaryLength = 32;",
      "right" : "static final int boundaryLength = 32;",
      "info" : "FieldDeclaration[933-970]:FieldDeclaration[933-970]"
    }, {
      "left" : "private DataUtil()",
      "right" : "private DataUtil()",
      "info" : "MethodDeclaration[976-997]:MethodDeclaration[976-997]"
    }, {
      "left" : "public static Document load(File in, String charsetName, String baseUri) throws IOException",
      "right" : "public static Document load(File in, String charsetName, String baseUri) throws IOException",
      "info" : "MethodDeclaration[1003-1512]:MethodDeclaration[1003-1512]"
    }, {
      "left" : "public static Document load(InputStream in, String charsetName, String baseUri) throws IOException",
      "right" : "public static Document load(InputStream in, String charsetName, String baseUri) throws IOException",
      "info" : "MethodDeclaration[1518-2078]:MethodDeclaration[1518-2078]"
    }, {
      "left" : "public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException",
      "right" : "public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException",
      "info" : "MethodDeclaration[2084-2746]:MethodDeclaration[2084-2746]"
    }, {
      "left" : "static void crossStreams(final InputStream in, final OutputStream out) throws IOException",
      "right" : "static void crossStreams(final InputStream in, final OutputStream out) throws IOException",
      "info" : "MethodDeclaration[2752-3230]:MethodDeclaration[2752-3230]"
    }, {
      "left" : "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser)",
      "right" : "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser)",
      "info" : "MethodDeclaration[3487-6079]:MethodDeclaration[3487-6633]"
    }, {
      "left" : "static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException",
      "right" : "static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException",
      "info" : "MethodDeclaration[6085-7261]:MethodDeclaration[6639-7815]"
    }, {
      "left" : "static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException",
      "right" : "static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException",
      "info" : "MethodDeclaration[7267-7396]:MethodDeclaration[7821-7950]"
    }, {
      "left" : "static ByteBuffer readFileToByteBuffer(File file) throws IOException",
      "right" : "static ByteBuffer readFileToByteBuffer(File file) throws IOException",
      "info" : "MethodDeclaration[7402-7880]:MethodDeclaration[7956-8434]"
    }, {
      "left" : "static ByteBuffer emptyByteBuffer()",
      "right" : "static ByteBuffer emptyByteBuffer()",
      "info" : "MethodDeclaration[7886-7968]:MethodDeclaration[8440-8522]"
    }, {
      "left" : "static String getCharsetFromContentType(String contentType)",
      "right" : "static String getCharsetFromContentType(String contentType)",
      "info" : "MethodDeclaration[7974-9047]:MethodDeclaration[8528-9601]"
    }, {
      "left" : "static String mimeBoundary()",
      "right" : "static String mimeBoundary()",
      "info" : "MethodDeclaration[9053-9462]:MethodDeclaration[9607-10016]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[995-997]:Block[995-997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1366-1512]:Block[1366-1512]"
    }, {
      "left" : "ByteBuffer byteData = readFileToByteBuffer(in);",
      "right" : "ByteBuffer byteData = readFileToByteBuffer(in);",
      "info" : "VariableDeclarationStatement[1376-1423]:VariableDeclarationStatement[1376-1423]"
    }, {
      "left" : "return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());",
      "right" : "return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());",
      "info" : "ReturnStatement[1432-1506]:ReturnStatement[1432-1506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1936-2078]:Block[1936-2078]"
    }, {
      "left" : "ByteBuffer byteData = readToByteBuffer(in);",
      "right" : "ByteBuffer byteData = readToByteBuffer(in);",
      "info" : "VariableDeclarationStatement[1946-1989]:VariableDeclarationStatement[1946-1989]"
    }, {
      "left" : "return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());",
      "right" : "return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());",
      "info" : "ReturnStatement[1998-2072]:ReturnStatement[1998-2072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2617-2746]:Block[2617-2746]"
    }, {
      "left" : "ByteBuffer byteData = readToByteBuffer(in);",
      "right" : "ByteBuffer byteData = readToByteBuffer(in);",
      "info" : "VariableDeclarationStatement[2627-2670]:VariableDeclarationStatement[2627-2670]"
    }, {
      "left" : "return parseByteData(byteData, charsetName, baseUri, parser);",
      "right" : "return parseByteData(byteData, charsetName, baseUri, parser);",
      "info" : "ReturnStatement[2679-2740]:ReturnStatement[2679-2740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3057-3230]:Block[3057-3230]"
    }, {
      "left" : "final byte[] buffer = new byte[bufferSize];",
      "right" : "final byte[] buffer = new byte[bufferSize];",
      "info" : "VariableDeclarationStatement[3067-3110]:VariableDeclarationStatement[3067-3110]"
    }, {
      "left" : "int len;",
      "right" : "int len;",
      "info" : "VariableDeclarationStatement[3119-3127]:VariableDeclarationStatement[3119-3127]"
    }, {
      "left" : "while ((len = in.read(buffer)) != -1)",
      "right" : "while ((len = in.read(buffer)) != -1)",
      "info" : "WhileStatement[3136-3224]:WhileStatement[3136-3224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3174-3224]:Block[3174-3224]"
    }, {
      "left" : "out.write(buffer, 0, len);",
      "right" : "out.write(buffer, 0, len);",
      "info" : "ExpressionStatement[3188-3214]:ExpressionStatement[3188-3214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3589-6079]:Block[3589-6633]"
    }, {
      "left" : "String docData;",
      "right" : "String docData;",
      "info" : "VariableDeclarationStatement[3599-3614]:VariableDeclarationStatement[3599-3614]"
    }, {
      "left" : "Document doc = null;",
      "right" : "Document doc = null;",
      "info" : "VariableDeclarationStatement[3623-3643]:VariableDeclarationStatement[3623-3643]"
    }, {
      "left" : "if (charsetName == null)",
      "right" : "if (charsetName == null)",
      "info" : "IfStatement[3716-5600]:IfStatement[4576-6460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3741-5295]:Block[4601-6155]"
    }, {
      "left" : "docData = Charset.forName(defaultCharset).decode(byteData).toString();",
      "right" : "docData = Charset.forName(defaultCharset).decode(byteData).toString();",
      "info" : "ExpressionStatement[3924-3994]:ExpressionStatement[4784-4854]"
    }, {
      "left" : "doc = parser.parseInput(docData, baseUri);",
      "right" : "doc = parser.parseInput(docData, baseUri);",
      "info" : "ExpressionStatement[4007-4049]:ExpressionStatement[4867-4909]"
    }, {
      "left" : "Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();",
      "right" : "Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();",
      "info" : "VariableDeclarationStatement[4062-4144]:VariableDeclarationStatement[4922-5004]"
    }, {
      "left" : "if (meta != null)",
      "right" : "if (meta != null)",
      "info" : "IfStatement[4157-5285]:IfStatement[5017-6145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4175-5285]:Block[5035-6145]"
    }, {
      "left" : "String foundCharset = null;",
      "right" : "String foundCharset = null;",
      "info" : "VariableDeclarationStatement[4242-4269]:VariableDeclarationStatement[5102-5129]"
    }, {
      "left" : "if (meta.hasAttr(\"http-equiv\"))",
      "right" : "if (meta.hasAttr(\"http-equiv\"))",
      "info" : "IfStatement[4286-4421]:IfStatement[5146-5281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4318-4421]:Block[5178-5281]"
    }, {
      "left" : "foundCharset = getCharsetFromContentType(meta.attr(\"content\"));",
      "right" : "foundCharset = getCharsetFromContentType(meta.attr(\"content\"));",
      "info" : "ExpressionStatement[4340-4403]:ExpressionStatement[5200-5263]"
    }, {
      "left" : "if (foundCharset == null && meta.hasAttr(\"charset\"))",
      "right" : "if (foundCharset == null && meta.hasAttr(\"charset\"))",
      "info" : "IfStatement[4438-4829]:IfStatement[5298-5689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4491-4829]:Block[5351-5689]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[4513-4811]:TryStatement[5373-5671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4517-4704]:Block[5377-5564]"
    }, {
      "left" : "if (Charset.isSupported(meta.attr(\"charset\")))",
      "right" : "if (Charset.isSupported(meta.attr(\"charset\")))",
      "info" : "IfStatement[4543-4682]:IfStatement[5403-5542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4590-4682]:Block[5450-5542]"
    }, {
      "left" : "foundCharset = meta.attr(\"charset\");",
      "right" : "foundCharset = meta.attr(\"charset\");",
      "info" : "ExpressionStatement[4620-4656]:ExpressionStatement[5480-5516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4743-4811]:Block[5603-5671]"
    }, {
      "left" : "foundCharset = null;",
      "right" : "foundCharset = null;",
      "info" : "ExpressionStatement[4769-4789]:ExpressionStatement[5629-5649]"
    }, {
      "left" : "if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset))",
      "right" : "if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset))",
      "info" : "IfStatement[4847-5271]:IfStatement[5707-6131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4943-5271]:Block[5803-6131]"
    }, {
      "left" : "foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");",
      "right" : "foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");",
      "info" : "ExpressionStatement[4986-5045]:ExpressionStatement[5846-5905]"
    }, {
      "left" : "charsetName = foundCharset;",
      "right" : "charsetName = foundCharset;",
      "info" : "ExpressionStatement[5066-5093]:ExpressionStatement[5926-5953]"
    }, {
      "left" : "byteData.rewind();",
      "right" : "byteData.rewind();",
      "info" : "ExpressionStatement[5114-5132]:ExpressionStatement[5974-5992]"
    }, {
      "left" : "docData = Charset.forName(foundCharset).decode(byteData).toString();",
      "right" : "docData = Charset.forName(foundCharset).decode(byteData).toString();",
      "info" : "ExpressionStatement[5153-5221]:ExpressionStatement[6013-6081]"
    }, {
      "left" : "doc = null;",
      "right" : "doc = null;",
      "info" : "ExpressionStatement[5242-5253]:ExpressionStatement[6102-6113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5301-5600]:Block[6161-6460]"
    }, {
      "left" : "Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");",
      "right" : "Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");",
      "info" : "ExpressionStatement[5377-5510]:ExpressionStatement[6237-6370]"
    }, {
      "left" : "docData = Charset.forName(charsetName).decode(byteData).toString();",
      "right" : "docData = Charset.forName(charsetName).decode(byteData).toString();",
      "info" : "ExpressionStatement[5523-5590]:ExpressionStatement[6383-6450]"
    }, {
      "left" : "if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM)",
      "right" : "if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF || // BE\n                bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0x00 && bom[3] == 0x00)",
      "info" : "IfStatement[5609-5906]:IfStatement[3828-4566]"
    }, {
      "left" : "byteData.rewind();",
      "right" : "byteData.rewind();",
      "info" : "ExpressionStatement[5685-5703]:ExpressionStatement[3801-3819]"
    }, {
      "left" : "charsetName = defaultCharset;",
      "right" : "charsetName = \"UTF-16\";",
      "info" : "ExpressionStatement[5843-5872]:ExpressionStatement[4255-4278]"
    }, {
      "left" : "doc = null;",
      "right" : "charsetName = \"UTF-8\";",
      "info" : "ExpressionStatement[5885-5896]:ExpressionStatement[4401-4423]"
    }, {
      "left" : "if (doc == null)",
      "right" : "if (doc == null)",
      "info" : "IfStatement[5915-6053]:IfStatement[6469-6607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5932-6053]:Block[6486-6607]"
    }, {
      "left" : "doc = parser.parseInput(docData, baseUri);",
      "right" : "doc = parser.parseInput(docData, baseUri);",
      "info" : "ExpressionStatement[5946-5988]:ExpressionStatement[6500-6542]"
    }, {
      "left" : "doc.outputSettings().charset(charsetName);",
      "right" : "doc.outputSettings().charset(charsetName);",
      "info" : "ExpressionStatement[6001-6043]:ExpressionStatement[6555-6597]"
    }, {
      "left" : "return doc;",
      "right" : "return doc;",
      "info" : "ReturnStatement[6062-6073]:ReturnStatement[6616-6627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6517-7261]:Block[7071-7815]"
    }, {
      "left" : "Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
      "right" : "Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
      "info" : "ExpressionStatement[6527-6600]:ExpressionStatement[7081-7154]"
    }, {
      "left" : "final boolean capped = maxSize > 0;",
      "right" : "final boolean capped = maxSize > 0;",
      "info" : "VariableDeclarationStatement[6609-6644]:VariableDeclarationStatement[7163-7198]"
    }, {
      "left" : "byte[] buffer = new byte[bufferSize];",
      "right" : "byte[] buffer = new byte[bufferSize];",
      "info" : "VariableDeclarationStatement[6653-6690]:VariableDeclarationStatement[7207-7244]"
    }, {
      "left" : "ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);",
      "right" : "ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);",
      "info" : "VariableDeclarationStatement[6699-6771]:VariableDeclarationStatement[7253-7325]"
    }, {
      "left" : "int read;",
      "right" : "int read;",
      "info" : "VariableDeclarationStatement[6780-6789]:VariableDeclarationStatement[7334-7343]"
    }, {
      "left" : "int remaining = maxSize;",
      "right" : "int remaining = maxSize;",
      "info" : "VariableDeclarationStatement[6798-6822]:VariableDeclarationStatement[7352-7376]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[6832-7198]:WhileStatement[7386-7752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6845-7198]:Block[7399-7752]"
    }, {
      "left" : "read = inStream.read(buffer);",
      "right" : "read = inStream.read(buffer);",
      "info" : "ExpressionStatement[6859-6888]:ExpressionStatement[7413-7442]"
    }, {
      "left" : "if (read == -1)",
      "right" : "if (read == -1)",
      "info" : "IfStatement[6901-6923]:IfStatement[7455-7477]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6917-6923]:BreakStatement[7471-7477]"
    }, {
      "left" : "if (capped)",
      "right" : "if (capped)",
      "info" : "IfStatement[6936-7142]:IfStatement[7490-7696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6948-7142]:Block[7502-7696]"
    }, {
      "left" : "if (read > remaining)",
      "right" : "if (read > remaining)",
      "info" : "IfStatement[6966-7093]:IfStatement[7520-7647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6988-7093]:Block[7542-7647]"
    }, {
      "left" : "outStream.write(buffer, 0, remaining);",
      "right" : "outStream.write(buffer, 0, remaining);",
      "info" : "ExpressionStatement[7010-7048]:ExpressionStatement[7564-7602]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7069-7075]:BreakStatement[7623-7629]"
    }, {
      "left" : "remaining -= read;",
      "right" : "remaining -= read;",
      "info" : "ExpressionStatement[7110-7128]:ExpressionStatement[7664-7682]"
    }, {
      "left" : "outStream.write(buffer, 0, read);",
      "right" : "outStream.write(buffer, 0, read);",
      "info" : "ExpressionStatement[7155-7188]:ExpressionStatement[7709-7742]"
    }, {
      "left" : "return ByteBuffer.wrap(outStream.toByteArray());",
      "right" : "return ByteBuffer.wrap(outStream.toByteArray());",
      "info" : "ReturnStatement[7207-7255]:ReturnStatement[7761-7809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7343-7396]:Block[7897-7950]"
    }, {
      "left" : "return readToByteBuffer(inStream, 0);",
      "right" : "return readToByteBuffer(inStream, 0);",
      "info" : "ReturnStatement[7353-7390]:ReturnStatement[7907-7944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7471-7880]:Block[8025-8434]"
    }, {
      "left" : "RandomAccessFile randomAccessFile = null;",
      "right" : "RandomAccessFile randomAccessFile = null;",
      "info" : "VariableDeclarationStatement[7481-7522]:VariableDeclarationStatement[8035-8076]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7531-7874]:TryStatement[8085-8428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7535-7770]:Block[8089-8324]"
    }, {
      "left" : "randomAccessFile = new RandomAccessFile(file, \"r\");",
      "right" : "randomAccessFile = new RandomAccessFile(file, \"r\");",
      "info" : "ExpressionStatement[7549-7600]:ExpressionStatement[8103-8154]"
    }, {
      "left" : "byte[] bytes = new byte[(int) randomAccessFile.length()];",
      "right" : "byte[] bytes = new byte[(int) randomAccessFile.length()];",
      "info" : "VariableDeclarationStatement[7613-7670]:VariableDeclarationStatement[8167-8224]"
    }, {
      "left" : "randomAccessFile.readFully(bytes);",
      "right" : "randomAccessFile.readFully(bytes);",
      "info" : "ExpressionStatement[7683-7717]:ExpressionStatement[8237-8271]"
    }, {
      "left" : "return ByteBuffer.wrap(bytes);",
      "right" : "return ByteBuffer.wrap(bytes);",
      "info" : "ReturnStatement[7730-7760]:ReturnStatement[8284-8314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7779-7874]:Block[8333-8428]"
    }, {
      "left" : "if (randomAccessFile != null)",
      "right" : "if (randomAccessFile != null)",
      "info" : "IfStatement[7793-7864]:IfStatement[8347-8418]"
    }, {
      "left" : "randomAccessFile.close();",
      "right" : "randomAccessFile.close();",
      "info" : "ExpressionStatement[7839-7864]:ExpressionStatement[8393-8418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7922-7968]:Block[8476-8522]"
    }, {
      "left" : "return ByteBuffer.allocate(0);",
      "right" : "return ByteBuffer.allocate(0);",
      "info" : "ReturnStatement[7932-7962]:ReturnStatement[8486-8516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8330-9047]:Block[8884-9601]"
    }, {
      "left" : "if (contentType == null)",
      "right" : "if (contentType == null)",
      "info" : "IfStatement[8340-8377]:IfStatement[8894-8931]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8365-8377]:ReturnStatement[8919-8931]"
    }, {
      "left" : "Matcher m = charsetPattern.matcher(contentType);",
      "right" : "Matcher m = charsetPattern.matcher(contentType);",
      "info" : "VariableDeclarationStatement[8386-8434]:VariableDeclarationStatement[8940-8988]"
    }, {
      "left" : "if (m.find())",
      "right" : "if (m.find())",
      "info" : "IfStatement[8443-9020]:IfStatement[8997-9574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8457-9020]:Block[9011-9574]"
    }, {
      "left" : "String charset = m.group(1).trim();",
      "right" : "String charset = m.group(1).trim();",
      "info" : "VariableDeclarationStatement[8471-8506]:VariableDeclarationStatement[9025-9060]"
    }, {
      "left" : "charset = charset.replace(\"charset=\", \"\");",
      "right" : "charset = charset.replace(\"charset=\", \"\");",
      "info" : "ExpressionStatement[8519-8561]:ExpressionStatement[9073-9115]"
    }, {
      "left" : "if (charset.length() == 0)",
      "right" : "if (charset.length() == 0)",
      "info" : "IfStatement[8574-8613]:IfStatement[9128-9167]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8601-8613]:ReturnStatement[9155-9167]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8626-9010]:TryStatement[9180-9564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8630-8840]:Block[9184-9394]"
    }, {
      "left" : "if (Charset.isSupported(charset))",
      "right" : "if (Charset.isSupported(charset))",
      "info" : "IfStatement[8648-8697]:IfStatement[9202-9251]"
    }, {
      "left" : "return charset;",
      "right" : "return charset;",
      "info" : "ReturnStatement[8682-8697]:ReturnStatement[9236-9251]"
    }, {
      "left" : "charset = charset.toUpperCase(Locale.ENGLISH);",
      "right" : "charset = charset.toUpperCase(Locale.ENGLISH);",
      "info" : "ExpressionStatement[8714-8760]:ExpressionStatement[9268-9314]"
    }, {
      "left" : "if (Charset.isSupported(charset))",
      "right" : "if (Charset.isSupported(charset))",
      "info" : "IfStatement[8777-8826]:IfStatement[9331-9380]"
    }, {
      "left" : "return charset;",
      "right" : "return charset;",
      "info" : "ReturnStatement[8811-8826]:ReturnStatement[9365-9380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8879-9010]:Block[9433-9564]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8984-8996]:ReturnStatement[9538-9550]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9029-9041]:ReturnStatement[9583-9595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9166-9462]:Block[9720-10016]"
    }, {
      "left" : "final StringBuilder mime = new StringBuilder(boundaryLength);",
      "right" : "final StringBuilder mime = new StringBuilder(boundaryLength);",
      "info" : "VariableDeclarationStatement[9176-9237]:VariableDeclarationStatement[9730-9791]"
    }, {
      "left" : "final Random rand = new Random();",
      "right" : "final Random rand = new Random();",
      "info" : "VariableDeclarationStatement[9246-9279]:VariableDeclarationStatement[9800-9833]"
    }, {
      "left" : "for (int i = 0; i < boundaryLength; i++)",
      "right" : "for (int i = 0; i < boundaryLength; i++)",
      "info" : "ForStatement[9288-9424]:ForStatement[9842-9978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9329-9424]:Block[9883-9978]"
    }, {
      "left" : "mime.append(mimeBoundaryChars[rand.nextInt(mimeBoundaryChars.length)]);",
      "right" : "mime.append(mimeBoundaryChars[rand.nextInt(mimeBoundaryChars.length)]);",
      "info" : "ExpressionStatement[9343-9414]:ExpressionStatement[9897-9968]"
    }, {
      "left" : "return mime.toString();",
      "right" : "return mime.toString();",
      "info" : "ReturnStatement[9433-9456]:ReturnStatement[9987-10010]"
    } ]
  },
  "interFileMappings" : { }
}