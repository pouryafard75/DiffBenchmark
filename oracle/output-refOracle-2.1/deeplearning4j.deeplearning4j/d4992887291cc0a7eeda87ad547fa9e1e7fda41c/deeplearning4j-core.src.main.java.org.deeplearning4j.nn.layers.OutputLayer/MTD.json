{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "OutputLayer",
      "right" : "OutputLayer",
      "info" : "TypeDeclaration[1692-11272]:TypeDeclaration[1692-11824]"
    }, {
      "left" : "private static final long serialVersionUID = -7065564817460914364L;",
      "right" : "private static final long serialVersionUID = -7065564817460914364L;",
      "info" : "FieldDeclaration[1951-2018]:FieldDeclaration[1951-2018]"
    }, {
      "left" : "private INDArray labels;",
      "right" : "private INDArray labels;",
      "info" : "FieldDeclaration[2062-2086]:FieldDeclaration[2062-2086]"
    }, {
      "left" : "public OutputLayer(NeuralNetConfiguration conf)",
      "right" : "public OutputLayer(NeuralNetConfiguration conf)",
      "info" : "MethodDeclaration[2092-2168]:MethodDeclaration[2092-2168]"
    }, {
      "left" : "public OutputLayer(NeuralNetConfiguration conf, INDArray input)",
      "right" : "public OutputLayer(NeuralNetConfiguration conf, INDArray input)",
      "info" : "MethodDeclaration[2174-2273]:MethodDeclaration[2174-2273]"
    }, {
      "left" : "public  double score()",
      "right" : "public  double score()",
      "info" : "MethodDeclaration[2279-2860]:MethodDeclaration[2279-2860]"
    }, {
      "left" : "public void setScore()",
      "right" : "public void setScore()",
      "info" : "MethodDeclaration[2866-3120]:MethodDeclaration[2866-3120]"
    }, {
      "left" : "public Pair<Gradient, Double> gradientAndScore()",
      "right" : "public Pair<Gradient, Double> gradientAndScore()",
      "info" : "MethodDeclaration[3127-3244]:MethodDeclaration[3127-3244]"
    }, {
      "left" : "public Gradient gradient()",
      "right" : "public Gradient gradient()",
      "info" : "MethodDeclaration[3251-3942]:MethodDeclaration[3251-3942]"
    }, {
      "left" : "private INDArray getWeightGradient()",
      "right" : "private INDArray getWeightGradient()",
      "info" : "MethodDeclaration[3950-5391]:MethodDeclaration[3950-5391]"
    }, {
      "left" : "public INDArray activate(INDArray input)",
      "right" : "public INDArray activate(INDArray input)",
      "info" : "MethodDeclaration[5398-5490]:MethodDeclaration[5398-5490]"
    }, {
      "left" : "public INDArray activate()",
      "right" : "public INDArray activate()",
      "info" : "MethodDeclaration[5496-5574]:MethodDeclaration[5496-5574]"
    }, {
      "left" : "public double score(DataSet data)",
      "right" : "public double score(DataSet data)",
      "info" : "MethodDeclaration[5580-5911]:MethodDeclaration[5580-5912]"
    }, {
      "left" : "public double score(INDArray examples, INDArray labels)",
      "right" : "public double score(INDArray examples, INDArray labels)",
      "info" : "MethodDeclaration[5917-6499]:MethodDeclaration[5918-6500]"
    }, {
      "left" : "public int numLabels()",
      "right" : "public int numLabels()",
      "info" : "MethodDeclaration[6505-6715]:MethodDeclaration[6506-6716]"
    }, {
      "left" : "public void fit(DataSetIterator iter)",
      "right" : "public void fit(DataSetIterator iter)",
      "info" : "MethodDeclaration[6721-6840]:MethodDeclaration[6722-6841]"
    }, {
      "left" : "public int[] predict(INDArray d)",
      "right" : "public int[] predict(INDArray d)",
      "info" : "MethodDeclaration[6846-7271]:MethodDeclaration[6847-7272]"
    }, {
      "left" : "public INDArray labelProbabilities(INDArray examples)",
      "right" : "public INDArray labelProbabilities(INDArray examples)",
      "info" : "MethodDeclaration[7277-7625]:MethodDeclaration[7278-7626]"
    }, {
      "left" : "public void fit(INDArray examples, INDArray labels)",
      "right" : "public void fit(INDArray examples, INDArray labels)",
      "info" : "MethodDeclaration[7631-8198]:MethodDeclaration[7632-8199]"
    }, {
      "left" : "public void fit(DataSet data)",
      "right" : "public void fit(DataSet data)",
      "info" : "MethodDeclaration[8204-8394]:MethodDeclaration[8205-8396]"
    }, {
      "left" : "public void fit(INDArray examples, int[] labels)",
      "right" : "public void fit(INDArray examples, int[] labels)",
      "info" : "MethodDeclaration[8400-8793]:MethodDeclaration[8402-8795]"
    }, {
      "left" : "public void clear()",
      "right" : "public void clear()",
      "info" : "MethodDeclaration[8799-8966]:MethodDeclaration[8801-8968]"
    }, {
      "left" : "public INDArray transform(INDArray data)",
      "right" : "public INDArray transform(INDArray data)",
      "info" : "MethodDeclaration[8972-9283]:MethodDeclaration[8974-9285]"
    }, {
      "left" : "public void setParams(INDArray params)",
      "right" : "public void setParams(INDArray params)",
      "info" : "MethodDeclaration[9291-10064]:MethodDeclaration[9293-10066]"
    }, {
      "left" : "public void fit(INDArray data)",
      "right" : "public void fit(INDArray data)",
      "info" : "MethodDeclaration[10069-10248]:MethodDeclaration[10071-10250]"
    }, {
      "left" : "public void iterate(INDArray input)",
      "right" : "public void iterate(INDArray input)",
      "info" : "MethodDeclaration[10254-10312]:MethodDeclaration[10256-10363]"
    }, {
      "left" : "public  INDArray output(INDArray x)",
      "right" : "public  INDArray output(INDArray x,boolean test)",
      "info" : "MethodDeclaration[10321-11120]:MethodDeclaration[10789-11672]"
    }, {
      "left" : "public  INDArray getLabels()",
      "right" : "public  INDArray getLabels()",
      "info" : "MethodDeclaration[11126-11185]:MethodDeclaration[11678-11737]"
    }, {
      "left" : "public  void setLabels(INDArray labels)",
      "right" : "public  void setLabels(INDArray labels)",
      "info" : "MethodDeclaration[11191-11268]:MethodDeclaration[11743-11820]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2140-2168]:Block[2140-2168]"
    }, {
      "left" : "super(conf);",
      "right" : "super(conf);",
      "info" : "SuperConstructorInvocation[2150-2162]:SuperConstructorInvocation[2150-2162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2238-2273]:Block[2238-2273]"
    }, {
      "left" : "super(conf, input);",
      "right" : "super(conf, input);",
      "info" : "SuperConstructorInvocation[2248-2267]:SuperConstructorInvocation[2248-2267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2428-2860]:Block[2428-2860]"
    }, {
      "left" : "LinAlgExceptions.assertRows(input, labels);",
      "right" : "LinAlgExceptions.assertRows(input, labels);",
      "info" : "ExpressionStatement[2438-2481]:ExpressionStatement[2438-2481]"
    }, {
      "left" : "INDArray output  = output(input);",
      "right" : "INDArray output  = output(input);",
      "info" : "VariableDeclarationStatement[2490-2523]:VariableDeclarationStatement[2490-2523]"
    }, {
      "left" : "if(conf.getLossFunction() != LossFunctions.LossFunction.RECONSTRUCTION_CROSSENTROPY)",
      "right" : "if(conf.getLossFunction() != LossFunctions.LossFunction.RECONSTRUCTION_CROSSENTROPY)",
      "info" : "IfStatement[2532-2735]:IfStatement[2532-2735]"
    }, {
      "left" : "return  LossFunctions.score(labels,conf.getLossFunction(),output,conf.getL2(),conf.isUseRegularization());",
      "right" : "return  LossFunctions.score(labels,conf.getLossFunction(),output,conf.getL2(),conf.isUseRegularization());",
      "info" : "ReturnStatement[2629-2735]:ReturnStatement[2629-2735]"
    }, {
      "left" : "return  -LossFunctions.score(labels,conf.getLossFunction(),output,conf.getL2(),conf.isUseRegularization());",
      "right" : "return  -LossFunctions.score(labels,conf.getLossFunction(),output,conf.getL2(),conf.isUseRegularization());",
      "info" : "ReturnStatement[2745-2852]:ReturnStatement[2745-2852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2903-3120]:Block[2903-3120]"
    }, {
      "left" : "LinAlgExceptions.assertRows(input,labels);",
      "right" : "LinAlgExceptions.assertRows(input,labels);",
      "info" : "ExpressionStatement[2913-2955]:ExpressionStatement[2913-2955]"
    }, {
      "left" : "INDArray output  = output(input);",
      "right" : "INDArray output  = output(input);",
      "info" : "VariableDeclarationStatement[2964-2997]:VariableDeclarationStatement[2964-2997]"
    }, {
      "left" : "score =  LossFunctions.score(labels,conf.getLossFunction(),output,conf.getL2(),conf.isUseRegularization());",
      "right" : "score =  LossFunctions.score(labels,conf.getLossFunction(),output,conf.getL2(),conf.isUseRegularization());",
      "info" : "ExpressionStatement[3006-3113]:ExpressionStatement[3006-3113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3190-3244]:Block[3190-3244]"
    }, {
      "left" : "return new Pair<>(gradient(),score());",
      "right" : "return new Pair<>(gradient(),score());",
      "info" : "ReturnStatement[3200-3238]:ReturnStatement[3200-3238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3414-3942]:Block[3414-3942]"
    }, {
      "left" : "LinAlgExceptions.assertRows(input, labels);",
      "right" : "LinAlgExceptions.assertRows(input, labels);",
      "info" : "ExpressionStatement[3424-3467]:ExpressionStatement[3424-3467]"
    }, {
      "left" : "INDArray netOut = activate(input);",
      "right" : "INDArray netOut = activate(input);",
      "info" : "VariableDeclarationStatement[3505-3539]:VariableDeclarationStatement[3505-3539]"
    }, {
      "left" : "INDArray dy = netOut.sub(labels);",
      "right" : "INDArray dy = netOut.sub(labels);",
      "info" : "VariableDeclarationStatement[3580-3613]:VariableDeclarationStatement[3580-3613]"
    }, {
      "left" : "INDArray wGradient = getWeightGradient();",
      "right" : "INDArray wGradient = getWeightGradient();",
      "info" : "VariableDeclarationStatement[3624-3665]:VariableDeclarationStatement[3624-3665]"
    }, {
      "left" : "INDArray bGradient = dy.mean(0);",
      "right" : "INDArray bGradient = dy.mean(0);",
      "info" : "VariableDeclarationStatement[3674-3706]:VariableDeclarationStatement[3674-3706]"
    }, {
      "left" : "Gradient g = new DefaultGradient();",
      "right" : "Gradient g = new DefaultGradient();",
      "info" : "VariableDeclarationStatement[3715-3750]:VariableDeclarationStatement[3715-3750]"
    }, {
      "left" : "g.gradientForVariable().put(DefaultParamInitializer.WEIGHT_KEY,wGradient);",
      "right" : "g.gradientForVariable().put(DefaultParamInitializer.WEIGHT_KEY,wGradient);",
      "info" : "ExpressionStatement[3760-3834]:ExpressionStatement[3760-3834]"
    }, {
      "left" : "g.gradientForVariable().put(DefaultParamInitializer.BIAS_KEY, bGradient);",
      "right" : "g.gradientForVariable().put(DefaultParamInitializer.BIAS_KEY, bGradient);",
      "info" : "ExpressionStatement[3843-3916]:ExpressionStatement[3843-3916]"
    }, {
      "left" : "return g;",
      "right" : "return g;",
      "info" : "ReturnStatement[3926-3935]:ReturnStatement[3926-3935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3987-5391]:Block[3987-5391]"
    }, {
      "left" : "INDArray z = output(input);",
      "right" : "INDArray z = output(input);",
      "info" : "VariableDeclarationStatement[3997-4024]:VariableDeclarationStatement[3997-4024]"
    }, {
      "left" : "switch (conf.getLossFunction()) {\n            case MCXENT:\n                INDArray preOut = preOutput(input);\n                //input activation\n                INDArray pYGivenX = Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(\"softmax\",preOut),1);\n                //difference of outputs\n                INDArray dy = pYGivenX.sub(labels);\n                return input.transpose().mmul(dy);\n\n            case XENT:\n                INDArray xEntDiff = labels.sub(z);\n                return input.transpose().mmul(xEntDiff.div(z.mul(z.rsub(1))));\n            case MSE:\n                INDArray mseDelta = labels.sub(z);\n                return input.transpose().mmul(mseDelta.neg());\n            case EXPLL:\n                return input.transpose().mmul(labels.rsub(1).divi(z));\n            case RMSE_XENT:\n                INDArray rmseXentDiff = labels.sub(z);\n                INDArray squaredrmseXentDiff = pow(rmseXentDiff, 2.0);\n                INDArray sqrt = sqrt(squaredrmseXentDiff);\n                return input.transpose().mmul(sqrt);\n            case SQUARED_LOSS:\n                return input.transpose().mmul(pow(labels.sub(z),2));\n            case NEGATIVELOGLIKELIHOOD:\n                return input.transpose().mmul(log(z).negi());\n\n\n        }",
      "right" : "switch (conf.getLossFunction()) {\n            case MCXENT:\n                INDArray preOut = preOutput(input);\n                //input activation\n                INDArray pYGivenX = Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(\"softmax\",preOut),1);\n                //difference of outputs\n                INDArray dy = pYGivenX.sub(labels);\n                return input.transpose().mmul(dy);\n\n            case XENT:\n                INDArray xEntDiff = labels.sub(z);\n                return input.transpose().mmul(xEntDiff.div(z.mul(z.rsub(1))));\n            case MSE:\n                INDArray mseDelta = labels.sub(z);\n                return input.transpose().mmul(mseDelta.neg());\n            case EXPLL:\n                return input.transpose().mmul(labels.rsub(1).divi(z));\n            case RMSE_XENT:\n                INDArray rmseXentDiff = labels.sub(z);\n                INDArray squaredrmseXentDiff = pow(rmseXentDiff, 2.0);\n                INDArray sqrt = sqrt(squaredrmseXentDiff);\n                return input.transpose().mmul(sqrt);\n            case SQUARED_LOSS:\n                return input.transpose().mmul(pow(labels.sub(z),2));\n            case NEGATIVELOGLIKELIHOOD:\n                return input.transpose().mmul(log(z).negi());\n\n\n        }",
      "info" : "SwitchStatement[4034-5317]:SwitchStatement[4034-5317]"
    }, {
      "left" : "case MCXENT:",
      "right" : "case MCXENT:",
      "info" : "SwitchCase[4080-4092]:SwitchCase[4080-4092]"
    }, {
      "left" : "INDArray preOut = preOutput(input);",
      "right" : "INDArray preOut = preOutput(input);",
      "info" : "VariableDeclarationStatement[4109-4144]:VariableDeclarationStatement[4109-4144]"
    }, {
      "left" : "INDArray pYGivenX = Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(\"softmax\",preOut),1);",
      "right" : "INDArray pYGivenX = Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(\"softmax\",preOut),1);",
      "info" : "VariableDeclarationStatement[4196-4309]:VariableDeclarationStatement[4196-4309]"
    }, {
      "left" : "INDArray dy = pYGivenX.sub(labels);",
      "right" : "INDArray dy = pYGivenX.sub(labels);",
      "info" : "VariableDeclarationStatement[4366-4401]:VariableDeclarationStatement[4366-4401]"
    }, {
      "left" : "return input.transpose().mmul(dy);",
      "right" : "return input.transpose().mmul(dy);",
      "info" : "ReturnStatement[4418-4452]:ReturnStatement[4418-4452]"
    }, {
      "left" : "case XENT:",
      "right" : "case XENT:",
      "info" : "SwitchCase[4466-4476]:SwitchCase[4466-4476]"
    }, {
      "left" : "INDArray xEntDiff = labels.sub(z);",
      "right" : "INDArray xEntDiff = labels.sub(z);",
      "info" : "VariableDeclarationStatement[4493-4527]:VariableDeclarationStatement[4493-4527]"
    }, {
      "left" : "return input.transpose().mmul(xEntDiff.div(z.mul(z.rsub(1))));",
      "right" : "return input.transpose().mmul(xEntDiff.div(z.mul(z.rsub(1))));",
      "info" : "ReturnStatement[4544-4606]:ReturnStatement[4544-4606]"
    }, {
      "left" : "case MSE:",
      "right" : "case MSE:",
      "info" : "SwitchCase[4619-4628]:SwitchCase[4619-4628]"
    }, {
      "left" : "INDArray mseDelta = labels.sub(z);",
      "right" : "INDArray mseDelta = labels.sub(z);",
      "info" : "VariableDeclarationStatement[4645-4679]:VariableDeclarationStatement[4645-4679]"
    }, {
      "left" : "return input.transpose().mmul(mseDelta.neg());",
      "right" : "return input.transpose().mmul(mseDelta.neg());",
      "info" : "ReturnStatement[4696-4742]:ReturnStatement[4696-4742]"
    }, {
      "left" : "case EXPLL:",
      "right" : "case EXPLL:",
      "info" : "SwitchCase[4755-4766]:SwitchCase[4755-4766]"
    }, {
      "left" : "return input.transpose().mmul(labels.rsub(1).divi(z));",
      "right" : "return input.transpose().mmul(labels.rsub(1).divi(z));",
      "info" : "ReturnStatement[4783-4837]:ReturnStatement[4783-4837]"
    }, {
      "left" : "case RMSE_XENT:",
      "right" : "case RMSE_XENT:",
      "info" : "SwitchCase[4850-4865]:SwitchCase[4850-4865]"
    }, {
      "left" : "INDArray rmseXentDiff = labels.sub(z);",
      "right" : "INDArray rmseXentDiff = labels.sub(z);",
      "info" : "VariableDeclarationStatement[4882-4920]:VariableDeclarationStatement[4882-4920]"
    }, {
      "left" : "INDArray squaredrmseXentDiff = pow(rmseXentDiff, 2.0);",
      "right" : "INDArray squaredrmseXentDiff = pow(rmseXentDiff, 2.0);",
      "info" : "VariableDeclarationStatement[4937-4991]:VariableDeclarationStatement[4937-4991]"
    }, {
      "left" : "INDArray sqrt = sqrt(squaredrmseXentDiff);",
      "right" : "INDArray sqrt = sqrt(squaredrmseXentDiff);",
      "info" : "VariableDeclarationStatement[5008-5050]:VariableDeclarationStatement[5008-5050]"
    }, {
      "left" : "return input.transpose().mmul(sqrt);",
      "right" : "return input.transpose().mmul(sqrt);",
      "info" : "ReturnStatement[5067-5103]:ReturnStatement[5067-5103]"
    }, {
      "left" : "case SQUARED_LOSS:",
      "right" : "case SQUARED_LOSS:",
      "info" : "SwitchCase[5116-5134]:SwitchCase[5116-5134]"
    }, {
      "left" : "return input.transpose().mmul(pow(labels.sub(z),2));",
      "right" : "return input.transpose().mmul(pow(labels.sub(z),2));",
      "info" : "ReturnStatement[5151-5203]:ReturnStatement[5151-5203]"
    }, {
      "left" : "case NEGATIVELOGLIKELIHOOD:",
      "right" : "case NEGATIVELOGLIKELIHOOD:",
      "info" : "SwitchCase[5216-5243]:SwitchCase[5216-5243]"
    }, {
      "left" : "return input.transpose().mmul(log(z).negi());",
      "right" : "return input.transpose().mmul(log(z).negi());",
      "info" : "ReturnStatement[5260-5305]:ReturnStatement[5260-5305]"
    }, {
      "left" : "throw new IllegalStateException(\"Invalid loss function\");",
      "right" : "throw new IllegalStateException(\"Invalid loss function\");",
      "info" : "ThrowStatement[5327-5384]:ThrowStatement[5327-5384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5453-5490]:Block[5453-5490]"
    }, {
      "left" : "return output(input);",
      "right" : "return output(input);",
      "info" : "ReturnStatement[5463-5484]:ReturnStatement[5463-5484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5537-5574]:Block[5537-5574]"
    }, {
      "left" : "return output(input);",
      "right" : "return output(input);",
      "info" : "ReturnStatement[5547-5568]:ReturnStatement[5547-5568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5840-5911]:Block[5840-5912]"
    }, {
      "left" : "return score(data.getFeatureMatrix(),data.getLabels());",
      "right" : "return score(data.getFeatureMatrix(), data.getLabels());",
      "info" : "ReturnStatement[5850-5905]:ReturnStatement[5850-5906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6364-6499]:Block[6365-6500]"
    }, {
      "left" : "Evaluation eval = new Evaluation();",
      "right" : "Evaluation eval = new Evaluation();",
      "info" : "VariableDeclarationStatement[6374-6409]:VariableDeclarationStatement[6375-6410]"
    }, {
      "left" : "eval.eval(labels,labelProbabilities(examples));",
      "right" : "eval.eval(labels,labelProbabilities(examples));",
      "info" : "ExpressionStatement[6418-6465]:ExpressionStatement[6419-6466]"
    }, {
      "left" : "return  eval.f1();",
      "right" : "return  eval.f1();",
      "info" : "ReturnStatement[6474-6492]:ReturnStatement[6475-6493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6675-6715]:Block[6676-6716]"
    }, {
      "left" : "return labels.columns();",
      "right" : "return labels.columns();",
      "info" : "ReturnStatement[6685-6709]:ReturnStatement[6686-6710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6773-6840]:Block[6774-6841]"
    }, {
      "left" : "while(iter.hasNext())\n            fit(iter.next());",
      "right" : "while(iter.hasNext())\n            fit(iter.next());",
      "info" : "WhileStatement[6783-6834]:WhileStatement[6784-6835]"
    }, {
      "left" : "fit(iter.next());",
      "right" : "fit(iter.next());",
      "info" : "ExpressionStatement[6817-6834]:ExpressionStatement[6818-6835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7056-7271]:Block[7057-7272]"
    }, {
      "left" : "INDArray output = output(d);",
      "right" : "INDArray output = output(d);",
      "info" : "VariableDeclarationStatement[7066-7094]:VariableDeclarationStatement[7067-7095]"
    }, {
      "left" : "int[] ret = new int[d.rows()];",
      "right" : "int[] ret = new int[d.rows()];",
      "info" : "VariableDeclarationStatement[7103-7133]:VariableDeclarationStatement[7104-7134]"
    }, {
      "left" : "for(int i = 0; i < ret.length; i++)\n            ret[i] = Nd4j.getBlasWrapper().iamax(output.getRow(i));",
      "right" : "for(int i = 0; i < ret.length; i++)\n            ret[i] = Nd4j.getBlasWrapper().iamax(output.getRow(i));",
      "info" : "ForStatement[7142-7245]:ForStatement[7143-7246]"
    }, {
      "left" : "ret[i] = Nd4j.getBlasWrapper().iamax(output.getRow(i));",
      "right" : "ret[i] = Nd4j.getBlasWrapper().iamax(output.getRow(i));",
      "info" : "ExpressionStatement[7190-7245]:ExpressionStatement[7191-7246]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[7254-7265]:ReturnStatement[7255-7266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7585-7625]:Block[7586-7626]"
    }, {
      "left" : "return output(examples);",
      "right" : "return output(examples);",
      "info" : "ReturnStatement[7595-7619]:ReturnStatement[7596-7620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7882-8198]:Block[7883-8199]"
    }, {
      "left" : "this.input = examples.dup();",
      "right" : "this.input = examples.dup();",
      "info" : "ExpressionStatement[7892-7920]:ExpressionStatement[7893-7921]"
    }, {
      "left" : "applyDropOutIfNecessary(this.input);",
      "right" : "applyDropOutIfNecessary(this.input);",
      "info" : "ExpressionStatement[7929-7965]:ExpressionStatement[7930-7966]"
    }, {
      "left" : "this.labels = labels;",
      "right" : "this.labels = labels;",
      "info" : "ExpressionStatement[7974-7995]:ExpressionStatement[7975-7996]"
    }, {
      "left" : "Solver solver = new Solver.Builder()\n                .configure(conf())\n                .listeners(getIterationListeners())\n                .model(this).build();",
      "right" : "Solver solver = new Solver.Builder()\n                .configure(conf())\n                .listeners(getIterationListeners())\n                .model(this).build();",
      "info" : "VariableDeclarationStatement[8004-8165]:VariableDeclarationStatement[8005-8166]"
    }, {
      "left" : "solver.optimize();",
      "right" : "solver.optimize();",
      "info" : "ExpressionStatement[8174-8192]:ExpressionStatement[8175-8193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8332-8394]:Block[8333-8396]"
    }, {
      "left" : "fit(data.getFeatureMatrix(),data.getLabels());",
      "right" : "fit(data.getFeatureMatrix(), data.getLabels());",
      "info" : "ExpressionStatement[8342-8388]:ExpressionStatement[8343-8390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8665-8793]:Block[8667-8795]"
    }, {
      "left" : "INDArray outcomeMatrix = FeatureUtil.toOutcomeMatrix(labels, numLabels());",
      "right" : "INDArray outcomeMatrix = FeatureUtil.toOutcomeMatrix(labels, numLabels());",
      "info" : "VariableDeclarationStatement[8675-8749]:VariableDeclarationStatement[8677-8751]"
    }, {
      "left" : "fit(examples,outcomeMatrix);",
      "right" : "fit(examples,outcomeMatrix);",
      "info" : "ExpressionStatement[8758-8786]:ExpressionStatement[8760-8788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8833-8966]:Block[8835-8968]"
    }, {
      "left" : "super.clear();",
      "right" : "super.clear();",
      "info" : "ExpressionStatement[8843-8857]:ExpressionStatement[8845-8859]"
    }, {
      "left" : "if(labels != null)",
      "right" : "if(labels != null)",
      "info" : "IfStatement[8866-8960]:IfStatement[8868-8962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8885-8960]:Block[8887-8962]"
    }, {
      "left" : "labels.data().destroy();",
      "right" : "labels.data().destroy();",
      "info" : "ExpressionStatement[8899-8923]:ExpressionStatement[8901-8925]"
    }, {
      "left" : "labels = null;",
      "right" : "labels = null;",
      "info" : "ExpressionStatement[8936-8950]:ExpressionStatement[8938-8952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9244-9283]:Block[9246-9285]"
    }, {
      "left" : "return preOutput(data);",
      "right" : "return preOutput(data);",
      "info" : "ReturnStatement[9254-9277]:ReturnStatement[9256-9279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9584-10064]:Block[9586-10066]"
    }, {
      "left" : "INDArray wParams = params.get(NDArrayIndex.interval(0, conf.getNIn() * conf.getNOut()));",
      "right" : "INDArray wParams = params.get(NDArrayIndex.interval(0, conf.getNIn() * conf.getNOut()));",
      "info" : "VariableDeclarationStatement[9594-9682]:VariableDeclarationStatement[9596-9684]"
    }, {
      "left" : "INDArray W = getParam(DefaultParamInitializer.WEIGHT_KEY);",
      "right" : "INDArray W = getParam(DefaultParamInitializer.WEIGHT_KEY);",
      "info" : "VariableDeclarationStatement[9691-9749]:VariableDeclarationStatement[9693-9751]"
    }, {
      "left" : "W.assign(wParams);",
      "right" : "W.assign(wParams);",
      "info" : "ExpressionStatement[9758-9776]:ExpressionStatement[9760-9778]"
    }, {
      "left" : "INDArray bias = getParam(DefaultParamInitializer.BIAS_KEY);",
      "right" : "INDArray bias = getParam(DefaultParamInitializer.BIAS_KEY);",
      "info" : "VariableDeclarationStatement[9785-9844]:VariableDeclarationStatement[9787-9846]"
    }, {
      "left" : "int biasBegin = params.length() - bias.length();",
      "right" : "int biasBegin = params.length() - bias.length();",
      "info" : "VariableDeclarationStatement[9853-9901]:VariableDeclarationStatement[9855-9903]"
    }, {
      "left" : "int biasEnd = params.length();",
      "right" : "int biasEnd = params.length();",
      "info" : "VariableDeclarationStatement[9910-9940]:VariableDeclarationStatement[9912-9942]"
    }, {
      "left" : "INDArray biasAssign = params.get(NDArrayIndex.interval(biasBegin, biasEnd));",
      "right" : "INDArray biasAssign = params.get(NDArrayIndex.interval(biasBegin, biasEnd));",
      "info" : "VariableDeclarationStatement[9949-10025]:VariableDeclarationStatement[9951-10027]"
    }, {
      "left" : "bias.assign(biasAssign);",
      "right" : "bias.assign(biasAssign);",
      "info" : "ExpressionStatement[10034-10058]:ExpressionStatement[10036-10060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10224-10248]:Block[10226-10250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10304-10312]:Block[10306-10363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10694-11120]:Block[11175-11672]"
    }, {
      "left" : "if(x == null)",
      "right" : "if(x == null)",
      "info" : "IfStatement[10704-10790]:IfStatement[11185-11271]"
    }, {
      "left" : "throw new IllegalArgumentException(\"No null input allowed\");",
      "right" : "throw new IllegalArgumentException(\"No null input allowed\");",
      "info" : "ThrowStatement[10730-10790]:ThrowStatement[11211-11271]"
    }, {
      "left" : "INDArray preOutput = preOutput(x);",
      "right" : "INDArray preOutput = preOutput(x);",
      "info" : "VariableDeclarationStatement[10800-10834]:VariableDeclarationStatement[11281-11315]"
    }, {
      "left" : "if(conf.getActivationFunction().equals(\"softmax\"))",
      "right" : "if(conf.getActivationFunction().equals(\"softmax\"))",
      "info" : "IfStatement[10843-11055]:IfStatement[11324-11536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10894-11055]:Block[11375-11536]"
    }, {
      "left" : "INDArray ret = Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(\"softmax\", preOutput), 1);",
      "right" : "INDArray ret = Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(\"softmax\", preOutput), 1);",
      "info" : "VariableDeclarationStatement[10908-11021]:VariableDeclarationStatement[11389-11502]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[11034-11045]:ReturnStatement[11515-11526]"
    }, {
      "left" : "this.input = x;",
      "right" : "applyDropOutIfNecessary(input());",
      "info" : "ExpressionStatement[11065-11080]:ExpressionStatement[11598-11631]"
    }, {
      "left" : "return super.activate();",
      "right" : "return super.activate();",
      "info" : "ReturnStatement[11089-11113]:ReturnStatement[11641-11665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11155-11185]:Block[11707-11737]"
    }, {
      "left" : "return labels;",
      "right" : "return labels;",
      "info" : "ReturnStatement[11165-11179]:ReturnStatement[11717-11731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11231-11268]:Block[11783-11820]"
    }, {
      "left" : "this.labels = labels;",
      "right" : "this.labels = labels;",
      "info" : "ExpressionStatement[11241-11262]:ExpressionStatement[11793-11814]"
    } ]
  },
  "interFileMappings" : { }
}