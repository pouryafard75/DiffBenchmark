{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "AnnotatedClass",
      "right" : "AnnotatedClass",
      "info" : "TypeDeclaration[396-38087]:TypeDeclaration[396-38263]"
    }, {
      "left" : "private final static AnnotationMap[] NO_ANNOTATION_MAPS = new AnnotationMap[0];",
      "right" : "private final static AnnotationMap[] NO_ANNOTATION_MAPS = new AnnotationMap[0];",
      "info" : "FieldDeclaration[458-537]:FieldDeclaration[458-537]"
    }, {
      "left" : "final protected Class<?> _class;",
      "right" : "final protected Class<?> _class;",
      "info" : "FieldDeclaration[708-860]:FieldDeclaration[708-860]"
    }, {
      "left" : "final protected List<Class<?>> _superTypes;",
      "right" : "final protected List<Class<?>> _superTypes;",
      "info" : "FieldDeclaration[866-1036]:FieldDeclaration[866-1036]"
    }, {
      "left" : "final protected AnnotationIntrospector _annotationIntrospector;",
      "right" : "final protected AnnotationIntrospector _annotationIntrospector;",
      "info" : "FieldDeclaration[1042-1265]:FieldDeclaration[1042-1265]"
    }, {
      "left" : "final protected MixInResolver _mixInResolver;",
      "right" : "final protected MixInResolver _mixInResolver;",
      "info" : "FieldDeclaration[1271-1519]:FieldDeclaration[1271-1519]"
    }, {
      "left" : "final protected Class<?> _primaryMixIn;",
      "right" : "final protected Class<?> _primaryMixIn;",
      "info" : "FieldDeclaration[1525-1672]:FieldDeclaration[1525-1672]"
    }, {
      "left" : "protected AnnotationMap _classAnnotations;",
      "right" : "protected AnnotationMap _classAnnotations;",
      "info" : "FieldDeclaration[1850-2040]:FieldDeclaration[1850-2040]"
    }, {
      "left" : "protected boolean _creatorsResolved = false;",
      "right" : "protected boolean _creatorsResolved = false;",
      "info" : "FieldDeclaration[2046-2191]:FieldDeclaration[2046-2191]"
    }, {
      "left" : "protected AnnotatedConstructor _defaultConstructor;",
      "right" : "protected AnnotatedConstructor _defaultConstructor;",
      "info" : "FieldDeclaration[2201-2334]:FieldDeclaration[2201-2334]"
    }, {
      "left" : "protected List<AnnotatedConstructor> _constructors;",
      "right" : "protected List<AnnotatedConstructor> _constructors;",
      "info" : "FieldDeclaration[2340-2466]:FieldDeclaration[2340-2466]"
    }, {
      "left" : "protected List<AnnotatedMethod> _creatorMethods;",
      "right" : "protected List<AnnotatedMethod> _creatorMethods;",
      "info" : "FieldDeclaration[2472-2621]:FieldDeclaration[2472-2621]"
    }, {
      "left" : "protected AnnotatedMethodMap  _memberMethods;",
      "right" : "protected AnnotatedMethodMap  _memberMethods;",
      "info" : "FieldDeclaration[2627-2817]:FieldDeclaration[2627-2817]"
    }, {
      "left" : "protected List<AnnotatedField> _fields;",
      "right" : "protected List<AnnotatedField> _fields;",
      "info" : "FieldDeclaration[2823-2981]:FieldDeclaration[2823-2981]"
    }, {
      "left" : "private AnnotatedClass(Class<?> cls, List<Class<?>> superTypes,\n            AnnotationIntrospector aintr, MixInResolver mir,\n            AnnotationMap classAnnotations)",
      "right" : "private AnnotatedClass(Class<?> cls, List<Class<?>> superTypes,\n            AnnotationIntrospector aintr, MixInResolver mir,\n            AnnotationMap classAnnotations)",
      "info" : "MethodDeclaration[3153-3763]:MethodDeclaration[3153-3763]"
    }, {
      "left" : "public AnnotatedClass withAnnotations(AnnotationMap ann)",
      "right" : "public AnnotatedClass withAnnotations(AnnotationMap ann)",
      "info" : "MethodDeclaration[3769-3965]:MethodDeclaration[3769-3965]"
    }, {
      "left" : "public static AnnotatedClass construct(Class<?> cls,\n            AnnotationIntrospector aintr, MixInResolver mir)",
      "right" : "public static AnnotatedClass construct(Class<?> cls,\n            AnnotationIntrospector aintr, MixInResolver mir)",
      "info" : "MethodDeclaration[3975-4398]:MethodDeclaration[3975-4398]"
    }, {
      "left" : "public static AnnotatedClass constructWithoutSuperTypes(Class<?> cls,\n            AnnotationIntrospector aintr, MixInResolver mir)",
      "right" : "public static AnnotatedClass constructWithoutSuperTypes(Class<?> cls,\n            AnnotationIntrospector aintr, MixInResolver mir)",
      "info" : "MethodDeclaration[4404-4839]:MethodDeclaration[4404-4839]"
    }, {
      "left" : "public Class<?> getAnnotated()",
      "right" : "public Class<?> getAnnotated()",
      "info" : "MethodDeclaration[5016-5079]:MethodDeclaration[5016-5079]"
    }, {
      "left" : "public int getModifiers()",
      "right" : "public int getModifiers()",
      "info" : "MethodDeclaration[5085-5158]:MethodDeclaration[5085-5158]"
    }, {
      "left" : "public String getName()",
      "right" : "public String getName()",
      "info" : "MethodDeclaration[5164-5230]:MethodDeclaration[5164-5230]"
    }, {
      "left" : "public <A extends Annotation> A getAnnotation(Class<A> acls)",
      "right" : "public <A extends Annotation> A getAnnotation(Class<A> acls)",
      "info" : "MethodDeclaration[5236-5456]:MethodDeclaration[5236-5456]"
    }, {
      "left" : "public Type getGenericType()",
      "right" : "public Type getGenericType()",
      "info" : "MethodDeclaration[5462-5535]:MethodDeclaration[5462-5535]"
    }, {
      "left" : "public Class<?> getRawType()",
      "right" : "public Class<?> getRawType()",
      "info" : "MethodDeclaration[5541-5614]:MethodDeclaration[5541-5614]"
    }, {
      "left" : "public Iterable<Annotation> annotations()",
      "right" : "public Iterable<Annotation> annotations()",
      "info" : "MethodDeclaration[5620-5821]:MethodDeclaration[5620-5821]"
    }, {
      "left" : "protected AnnotationMap getAllAnnotations()",
      "right" : "protected AnnotationMap getAllAnnotations()",
      "info" : "MethodDeclaration[5831-6020]:MethodDeclaration[5831-6020]"
    }, {
      "left" : "public Annotations getAnnotations()",
      "right" : "public Annotations getAnnotations()",
      "info" : "MethodDeclaration[6211-6378]:MethodDeclaration[6211-6378]"
    }, {
      "left" : "public boolean hasAnnotations()",
      "right" : "public boolean hasAnnotations()",
      "info" : "MethodDeclaration[6388-6562]:MethodDeclaration[6388-6562]"
    }, {
      "left" : "public AnnotatedConstructor getDefaultConstructor()",
      "right" : "public AnnotatedConstructor getDefaultConstructor()",
      "info" : "MethodDeclaration[6568-6742]:MethodDeclaration[6568-6742]"
    }, {
      "left" : "public List<AnnotatedConstructor> getConstructors()",
      "right" : "public List<AnnotatedConstructor> getConstructors()",
      "info" : "MethodDeclaration[6748-6916]:MethodDeclaration[6748-6916]"
    }, {
      "left" : "public List<AnnotatedMethod> getStaticMethods()",
      "right" : "public List<AnnotatedMethod> getStaticMethods()",
      "info" : "MethodDeclaration[6922-7088]:MethodDeclaration[6922-7088]"
    }, {
      "left" : "public Iterable<AnnotatedMethod> memberMethods()",
      "right" : "public Iterable<AnnotatedMethod> memberMethods()",
      "info" : "MethodDeclaration[7094-7269]:MethodDeclaration[7094-7269]"
    }, {
      "left" : "public int getMemberMethodCount()",
      "right" : "public int getMemberMethodCount()",
      "info" : "MethodDeclaration[7275-7442]:MethodDeclaration[7275-7442]"
    }, {
      "left" : "public AnnotatedMethod findMethod(String name, Class<?>[] paramTypes)",
      "right" : "public AnnotatedMethod findMethod(String name, Class<?>[] paramTypes)",
      "info" : "MethodDeclaration[7448-7667]:MethodDeclaration[7448-7667]"
    }, {
      "left" : "public int getFieldCount()",
      "right" : "public int getFieldCount()",
      "info" : "MethodDeclaration[7673-7808]:MethodDeclaration[7673-7808]"
    }, {
      "left" : "public Iterable<AnnotatedField> fields()",
      "right" : "public Iterable<AnnotatedField> fields()",
      "info" : "MethodDeclaration[7814-7960]:MethodDeclaration[7814-7960]"
    }, {
      "left" : "private void resolveClassAnnotations()",
      "right" : "private void resolveClassAnnotations()",
      "info" : "MethodDeclaration[8159-9671]:MethodDeclaration[8159-9671]"
    }, {
      "left" : "private void resolveCreators()",
      "right" : "private void resolveCreators()",
      "info" : "MethodDeclaration[9681-13136]:MethodDeclaration[9681-13136]"
    }, {
      "left" : "private void resolveMemberMethods()",
      "right" : "private void resolveMemberMethods()",
      "info" : "MethodDeclaration[13146-15421]:MethodDeclaration[13146-15421]"
    }, {
      "left" : "private void resolveFields()",
      "right" : "private void resolveFields()",
      "info" : "MethodDeclaration[15431-15982]:MethodDeclaration[15431-15982]"
    }, {
      "left" : "protected void _addClassMixIns(AnnotationMap annotations, Class<?> toMask)",
      "right" : "protected void _addClassMixIns(AnnotationMap annotations, Class<?> toMask)",
      "info" : "MethodDeclaration[16297-16629]:MethodDeclaration[16297-16629]"
    }, {
      "left" : "protected void _addClassMixIns(AnnotationMap annotations, Class<?> toMask,\n                                   Class<?> mixin)",
      "right" : "protected void _addClassMixIns(AnnotationMap annotations, Class<?> toMask,\n                                   Class<?> mixin)",
      "info" : "MethodDeclaration[16635-17550]:MethodDeclaration[16635-17550]"
    }, {
      "left" : "protected void _addConstructorMixIns(Class<?> mixin)",
      "right" : "protected void _addConstructorMixIns(Class<?> mixin)",
      "info" : "MethodDeclaration[17773-18872]:MethodDeclaration[17773-18872]"
    }, {
      "left" : "protected void _addFactoryMixIns(Class<?> mixin)",
      "right" : "protected void _addFactoryMixIns(Class<?> mixin)",
      "info" : "MethodDeclaration[18878-19850]:MethodDeclaration[18878-19850]"
    }, {
      "left" : "protected void _addMemberMethods(Class<?> cls, AnnotatedMethodMap methods,\n            Class<?> mixInCls, AnnotatedMethodMap mixIns)",
      "right" : "protected void _addMemberMethods(Class<?> cls, AnnotatedMethodMap methods,\n            Class<?> mixInCls, AnnotatedMethodMap mixIns)",
      "info" : "MethodDeclaration[20056-22034]:MethodDeclaration[20056-22034]"
    }, {
      "left" : "protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,\n            Class<?> mixInCls, AnnotatedMethodMap mixIns)",
      "right" : "protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,\n            Class<?> mixInCls, AnnotatedMethodMap mixIns)",
      "info" : "MethodDeclaration[22040-23332]:MethodDeclaration[22040-23508]"
    }, {
      "left" : "protected Map<String,AnnotatedField> _findFields(Class<?> c, Map<String,AnnotatedField> fields)",
      "right" : "protected Map<String,AnnotatedField> _findFields(Class<?> c, Map<String,AnnotatedField> fields)",
      "info" : "MethodDeclaration[23537-25265]:MethodDeclaration[23713-25441]"
    }, {
      "left" : "protected void _addFieldMixIns(Class<?> targetClass, Class<?> mixInCls,\n            Map<String,AnnotatedField> fields)",
      "right" : "protected void _addFieldMixIns(Class<?> targetClass, Class<?> mixInCls,\n            Map<String,AnnotatedField> fields)",
      "info" : "MethodDeclaration[25271-26410]:MethodDeclaration[25447-26586]"
    }, {
      "left" : "protected AnnotatedMethod _constructMethod(Method m)",
      "right" : "protected AnnotatedMethod _constructMethod(Method m)",
      "info" : "MethodDeclaration[26608-27136]:MethodDeclaration[26784-27312]"
    }, {
      "left" : "protected AnnotatedConstructor _constructConstructor(Constructor<?> ctor, boolean defaultCtor)",
      "right" : "protected AnnotatedConstructor _constructConstructor(Constructor<?> ctor, boolean defaultCtor)",
      "info" : "MethodDeclaration[27142-29888]:MethodDeclaration[27318-30064]"
    }, {
      "left" : "protected AnnotatedMethod _constructCreatorMethod(Method m)",
      "right" : "protected AnnotatedMethod _constructCreatorMethod(Method m)",
      "info" : "MethodDeclaration[29894-30371]:MethodDeclaration[30070-30547]"
    }, {
      "left" : "protected AnnotatedField _constructField(Field f)",
      "right" : "protected AnnotatedField _constructField(Field f)",
      "info" : "MethodDeclaration[30377-30697]:MethodDeclaration[30553-30873]"
    }, {
      "left" : "private AnnotationMap _emptyAnnotationMap()",
      "right" : "private AnnotationMap _emptyAnnotationMap()",
      "info" : "MethodDeclaration[30704-30791]:MethodDeclaration[30880-30967]"
    }, {
      "left" : "private AnnotationMap[] _emptyAnnotationMaps(int count)",
      "right" : "private AnnotationMap[] _emptyAnnotationMaps(int count)",
      "info" : "MethodDeclaration[30797-31110]:MethodDeclaration[30973-31286]"
    }, {
      "left" : "protected boolean _isIncludableMemberMethod(Method m)",
      "right" : "protected boolean _isIncludableMemberMethod(Method m)",
      "info" : "MethodDeclaration[31307-31886]:MethodDeclaration[31483-32062]"
    }, {
      "left" : "private boolean _isIncludableField(Field f)",
      "right" : "private boolean _isIncludableField(Field f)",
      "info" : "MethodDeclaration[31892-32349]:MethodDeclaration[32068-32525]"
    }, {
      "left" : "protected AnnotationMap[] _collectRelevantAnnotations(Annotation[][] anns)",
      "right" : "protected AnnotationMap[] _collectRelevantAnnotations(Annotation[][] anns)",
      "info" : "MethodDeclaration[32544-32853]:MethodDeclaration[32720-33029]"
    }, {
      "left" : "protected AnnotationMap _collectRelevantAnnotations(Annotation[] anns)",
      "right" : "protected AnnotationMap _collectRelevantAnnotations(Annotation[] anns)",
      "info" : "MethodDeclaration[32859-33067]:MethodDeclaration[33035-33243]"
    }, {
      "left" : "private void _addAnnotationsIfNotPresent(AnnotationMap result, Annotation[] anns)",
      "right" : "private void _addAnnotationsIfNotPresent(AnnotationMap result, Annotation[] anns)",
      "info" : "MethodDeclaration[33287-34225]:MethodDeclaration[33463-34401]"
    }, {
      "left" : "private void _addAnnotationsIfNotPresent(AnnotatedMember target, Annotation[] anns)",
      "right" : "private void _addAnnotationsIfNotPresent(AnnotatedMember target, Annotation[] anns)",
      "info" : "MethodDeclaration[34231-35171]:MethodDeclaration[34407-35347]"
    }, {
      "left" : "private void _addOrOverrideAnnotations(AnnotatedMember target, Annotation[] anns)",
      "right" : "private void _addOrOverrideAnnotations(AnnotatedMember target, Annotation[] anns)",
      "info" : "MethodDeclaration[35181-36086]:MethodDeclaration[35357-36262]"
    }, {
      "left" : "protected void _addMixOvers(Constructor<?> mixin, AnnotatedConstructor target,\n            boolean addParamAnnotations)",
      "right" : "protected void _addMixOvers(Constructor<?> mixin, AnnotatedConstructor target,\n            boolean addParamAnnotations)",
      "info" : "MethodDeclaration[36096-36716]:MethodDeclaration[36272-36892]"
    }, {
      "left" : "protected void _addMixOvers(Method mixin, AnnotatedMethod target,\n            boolean addParamAnnotations)",
      "right" : "protected void _addMixOvers(Method mixin, AnnotatedMethod target,\n            boolean addParamAnnotations)",
      "info" : "MethodDeclaration[36722-37329]:MethodDeclaration[36898-37505]"
    }, {
      "left" : "protected void _addMixUnders(Method src, AnnotatedMethod target)",
      "right" : "protected void _addMixUnders(Method src, AnnotatedMethod target)",
      "info" : "MethodDeclaration[37335-37635]:MethodDeclaration[37511-37811]"
    }, {
      "left" : "private final boolean _isAnnotationBundle(Annotation ann)",
      "right" : "private final boolean _isAnnotationBundle(Annotation ann)",
      "info" : "MethodDeclaration[37640-37807]:MethodDeclaration[37816-37983]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[37981-38085]:MethodDeclaration[38157-38261]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[396-402]:Modifier[396-402]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[409-414]:TYPE_DECLARATION_KIND[409-414]"
    }, {
      "left" : "AnnotatedClass",
      "right" : "AnnotatedClass",
      "info" : "SimpleName[415-429]:SimpleName[415-429]"
    }, {
      "left" : "Annotated",
      "right" : "Annotated",
      "info" : "SimpleType[442-451]:SimpleType[442-451]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3298-3305]:Modifier[3298-3305]"
    }, {
      "left" : "AnnotatedClass",
      "right" : "AnnotatedClass",
      "info" : "SimpleName[3306-3320]:SimpleName[3306-3320]"
    }, {
      "left" : "Class<?> cls",
      "right" : "Class<?> cls",
      "info" : "SingleVariableDeclaration[3321-3333]:SingleVariableDeclaration[3321-3333]"
    }, {
      "left" : "List<Class<?>> superTypes",
      "right" : "List<Class<?>> superTypes",
      "info" : "SingleVariableDeclaration[3335-3360]:SingleVariableDeclaration[3335-3360]"
    }, {
      "left" : "AnnotationIntrospector aintr",
      "right" : "AnnotationIntrospector aintr",
      "info" : "SingleVariableDeclaration[3374-3402]:SingleVariableDeclaration[3374-3402]"
    }, {
      "left" : "MixInResolver mir",
      "right" : "MixInResolver mir",
      "info" : "SingleVariableDeclaration[3404-3421]:SingleVariableDeclaration[3404-3421]"
    }, {
      "left" : "AnnotationMap classAnnotations",
      "right" : "AnnotationMap classAnnotations",
      "info" : "SingleVariableDeclaration[3435-3465]:SingleVariableDeclaration[3435-3465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3471-3763]:Block[3471-3763]"
    }, {
      "left" : "_class = cls;",
      "right" : "_class = cls;",
      "info" : "ExpressionStatement[3481-3494]:ExpressionStatement[3481-3494]"
    }, {
      "left" : "_superTypes = superTypes;",
      "right" : "_superTypes = superTypes;",
      "info" : "ExpressionStatement[3503-3528]:ExpressionStatement[3503-3528]"
    }, {
      "left" : "_annotationIntrospector = aintr;",
      "right" : "_annotationIntrospector = aintr;",
      "info" : "ExpressionStatement[3537-3569]:ExpressionStatement[3537-3569]"
    }, {
      "left" : "_mixInResolver = mir;",
      "right" : "_mixInResolver = mir;",
      "info" : "ExpressionStatement[3578-3599]:ExpressionStatement[3578-3599]"
    }, {
      "left" : "_primaryMixIn = (_mixInResolver == null) ? null\n            : _mixInResolver.findMixInClassFor(_class);",
      "right" : "_primaryMixIn = (_mixInResolver == null) ? null\n            : _mixInResolver.findMixInClassFor(_class);",
      "info" : "ExpressionStatement[3608-3711]:ExpressionStatement[3608-3711]"
    }, {
      "left" : "_classAnnotations = classAnnotations;",
      "right" : "_classAnnotations = classAnnotations;",
      "info" : "ExpressionStatement[3720-3757]:ExpressionStatement[3720-3757]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3769-3778]:MarkerAnnotation[3769-3778]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3783-3789]:Modifier[3783-3789]"
    }, {
      "left" : "AnnotatedClass",
      "right" : "AnnotatedClass",
      "info" : "SimpleType[3790-3804]:SimpleType[3790-3804]"
    }, {
      "left" : "withAnnotations",
      "right" : "withAnnotations",
      "info" : "SimpleName[3805-3820]:SimpleName[3805-3820]"
    }, {
      "left" : "AnnotationMap ann",
      "right" : "AnnotationMap ann",
      "info" : "SingleVariableDeclaration[3821-3838]:SingleVariableDeclaration[3821-3838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3840-3965]:Block[3840-3965]"
    }, {
      "left" : "return new AnnotatedClass(_class, _superTypes,\n                _annotationIntrospector, _mixInResolver, ann);",
      "right" : "return new AnnotatedClass(_class, _superTypes,\n                _annotationIntrospector, _mixInResolver, ann);",
      "info" : "ReturnStatement[3850-3959]:ReturnStatement[3850-3959]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4162-4168]:Modifier[4162-4168]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4169-4175]:Modifier[4169-4175]"
    }, {
      "left" : "AnnotatedClass",
      "right" : "AnnotatedClass",
      "info" : "SimpleType[4176-4190]:SimpleType[4176-4190]"
    }, {
      "left" : "construct",
      "right" : "construct",
      "info" : "SimpleName[4191-4200]:SimpleName[4191-4200]"
    }, {
      "left" : "Class<?> cls",
      "right" : "Class<?> cls",
      "info" : "SingleVariableDeclaration[4201-4213]:SingleVariableDeclaration[4201-4213]"
    }, {
      "left" : "AnnotationIntrospector aintr",
      "right" : "AnnotationIntrospector aintr",
      "info" : "SingleVariableDeclaration[4227-4255]:SingleVariableDeclaration[4227-4255]"
    }, {
      "left" : "MixInResolver mir",
      "right" : "MixInResolver mir",
      "info" : "SingleVariableDeclaration[4257-4274]:SingleVariableDeclaration[4257-4274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4280-4398]:Block[4280-4398]"
    }, {
      "left" : "return new AnnotatedClass(cls,\n                ClassUtil.findSuperTypes(cls, null), aintr, mir, null);",
      "right" : "return new AnnotatedClass(cls,\n                ClassUtil.findSuperTypes(cls, null), aintr, mir, null);",
      "info" : "ReturnStatement[4290-4392]:ReturnStatement[4290-4392]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4588-4594]:Modifier[4588-4594]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4595-4601]:Modifier[4595-4601]"
    }, {
      "left" : "AnnotatedClass",
      "right" : "AnnotatedClass",
      "info" : "SimpleType[4602-4616]:SimpleType[4602-4616]"
    }, {
      "left" : "constructWithoutSuperTypes",
      "right" : "constructWithoutSuperTypes",
      "info" : "SimpleName[4617-4643]:SimpleName[4617-4643]"
    }, {
      "left" : "Class<?> cls",
      "right" : "Class<?> cls",
      "info" : "SingleVariableDeclaration[4644-4656]:SingleVariableDeclaration[4644-4656]"
    }, {
      "left" : "AnnotationIntrospector aintr",
      "right" : "AnnotationIntrospector aintr",
      "info" : "SingleVariableDeclaration[4670-4698]:SingleVariableDeclaration[4670-4698]"
    }, {
      "left" : "MixInResolver mir",
      "right" : "MixInResolver mir",
      "info" : "SingleVariableDeclaration[4700-4717]:SingleVariableDeclaration[4700-4717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4723-4839]:Block[4723-4839]"
    }, {
      "left" : "return new AnnotatedClass(cls,\n                Collections.<Class<?>>emptyList(), aintr, mir, null);",
      "right" : "return new AnnotatedClass(cls,\n                Collections.<Class<?>>emptyList(), aintr, mir, null);",
      "info" : "ReturnStatement[4733-4833]:ReturnStatement[4733-4833]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5016-5025]:MarkerAnnotation[5016-5025]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5030-5036]:Modifier[5030-5036]"
    }, {
      "left" : "Class<?>",
      "right" : "Class<?>",
      "info" : "ParameterizedType[5037-5045]:ParameterizedType[5037-5045]"
    }, {
      "left" : "getAnnotated",
      "right" : "getAnnotated",
      "info" : "SimpleName[5046-5058]:SimpleName[5046-5058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5061-5079]:Block[5061-5079]"
    }, {
      "left" : "return _class;",
      "right" : "return _class;",
      "info" : "ReturnStatement[5063-5077]:ReturnStatement[5063-5077]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5085-5094]:MarkerAnnotation[5085-5094]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5099-5105]:Modifier[5099-5105]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[5106-5109]:PrimitiveType[5106-5109]"
    }, {
      "left" : "getModifiers",
      "right" : "getModifiers",
      "info" : "SimpleName[5110-5122]:SimpleName[5110-5122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5125-5158]:Block[5125-5158]"
    }, {
      "left" : "return _class.getModifiers();",
      "right" : "return _class.getModifiers();",
      "info" : "ReturnStatement[5127-5156]:ReturnStatement[5127-5156]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5164-5173]:MarkerAnnotation[5164-5173]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5178-5184]:Modifier[5178-5184]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[5185-5191]:SimpleType[5185-5191]"
    }, {
      "left" : "getName",
      "right" : "getName",
      "info" : "SimpleName[5192-5199]:SimpleName[5192-5199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5202-5230]:Block[5202-5230]"
    }, {
      "left" : "return _class.getName();",
      "right" : "return _class.getName();",
      "info" : "ReturnStatement[5204-5228]:ReturnStatement[5204-5228]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5236-5245]:MarkerAnnotation[5236-5245]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5250-5256]:Modifier[5250-5256]"
    }, {
      "left" : "A extends Annotation",
      "right" : "A extends Annotation",
      "info" : "TypeParameter[5258-5278]:TypeParameter[5258-5278]"
    }, {
      "left" : "A",
      "right" : "A",
      "info" : "SimpleType[5280-5281]:SimpleType[5280-5281]"
    }, {
      "left" : "getAnnotation",
      "right" : "getAnnotation",
      "info" : "SimpleName[5282-5295]:SimpleName[5282-5295]"
    }, {
      "left" : "Class<A> acls",
      "right" : "Class<A> acls",
      "info" : "SingleVariableDeclaration[5296-5309]:SingleVariableDeclaration[5296-5309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5315-5456]:Block[5315-5456]"
    }, {
      "left" : "if (_classAnnotations == null)",
      "right" : "if (_classAnnotations == null)",
      "info" : "IfStatement[5325-5406]:IfStatement[5325-5406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5356-5406]:Block[5356-5406]"
    }, {
      "left" : "resolveClassAnnotations();",
      "right" : "resolveClassAnnotations();",
      "info" : "ExpressionStatement[5370-5396]:ExpressionStatement[5370-5396]"
    }, {
      "left" : "return _classAnnotations.get(acls);",
      "right" : "return _classAnnotations.get(acls);",
      "info" : "ReturnStatement[5415-5450]:ReturnStatement[5415-5450]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5462-5471]:MarkerAnnotation[5462-5471]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5476-5482]:Modifier[5476-5482]"
    }, {
      "left" : "Type",
      "right" : "Type",
      "info" : "SimpleType[5483-5487]:SimpleType[5483-5487]"
    }, {
      "left" : "getGenericType",
      "right" : "getGenericType",
      "info" : "SimpleName[5488-5502]:SimpleName[5488-5502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5505-5535]:Block[5505-5535]"
    }, {
      "left" : "return _class;",
      "right" : "return _class;",
      "info" : "ReturnStatement[5515-5529]:ReturnStatement[5515-5529]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5541-5550]:MarkerAnnotation[5541-5550]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5555-5561]:Modifier[5555-5561]"
    }, {
      "left" : "Class<?>",
      "right" : "Class<?>",
      "info" : "ParameterizedType[5562-5570]:ParameterizedType[5562-5570]"
    }, {
      "left" : "getRawType",
      "right" : "getRawType",
      "info" : "SimpleName[5571-5581]:SimpleName[5571-5581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5584-5614]:Block[5584-5614]"
    }, {
      "left" : "return _class;",
      "right" : "return _class;",
      "info" : "ReturnStatement[5594-5608]:ReturnStatement[5594-5608]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5620-5629]:MarkerAnnotation[5620-5629]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5634-5640]:Modifier[5634-5640]"
    }, {
      "left" : "Iterable<Annotation>",
      "right" : "Iterable<Annotation>",
      "info" : "ParameterizedType[5641-5661]:ParameterizedType[5641-5661]"
    }, {
      "left" : "annotations",
      "right" : "annotations",
      "info" : "SimpleName[5662-5673]:SimpleName[5662-5673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5676-5821]:Block[5676-5821]"
    }, {
      "left" : "if (_classAnnotations == null)",
      "right" : "if (_classAnnotations == null)",
      "info" : "IfStatement[5686-5767]:IfStatement[5686-5767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5717-5767]:Block[5717-5767]"
    }, {
      "left" : "resolveClassAnnotations();",
      "right" : "resolveClassAnnotations();",
      "info" : "ExpressionStatement[5731-5757]:ExpressionStatement[5731-5757]"
    }, {
      "left" : "return _classAnnotations.annotations();",
      "right" : "return _classAnnotations.annotations();",
      "info" : "ReturnStatement[5776-5815]:ReturnStatement[5776-5815]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5831-5840]:MarkerAnnotation[5831-5840]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[5845-5854]:Modifier[5845-5854]"
    }, {
      "left" : "AnnotationMap",
      "right" : "AnnotationMap",
      "info" : "SimpleType[5855-5868]:SimpleType[5855-5868]"
    }, {
      "left" : "getAllAnnotations",
      "right" : "getAllAnnotations",
      "info" : "SimpleName[5869-5886]:SimpleName[5869-5886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5889-6020]:Block[5889-6020]"
    }, {
      "left" : "if (_classAnnotations == null)",
      "right" : "if (_classAnnotations == null)",
      "info" : "IfStatement[5899-5980]:IfStatement[5899-5980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5930-5980]:Block[5930-5980]"
    }, {
      "left" : "resolveClassAnnotations();",
      "right" : "resolveClassAnnotations();",
      "info" : "ExpressionStatement[5944-5970]:ExpressionStatement[5944-5970]"
    }, {
      "left" : "return _classAnnotations;",
      "right" : "return _classAnnotations;",
      "info" : "ReturnStatement[5989-6014]:ReturnStatement[5989-6014]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6211-6217]:Modifier[6211-6217]"
    }, {
      "left" : "Annotations",
      "right" : "Annotations",
      "info" : "SimpleType[6218-6229]:SimpleType[6218-6229]"
    }, {
      "left" : "getAnnotations",
      "right" : "getAnnotations",
      "info" : "SimpleName[6230-6244]:SimpleName[6230-6244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6247-6378]:Block[6247-6378]"
    }, {
      "left" : "if (_classAnnotations == null)",
      "right" : "if (_classAnnotations == null)",
      "info" : "IfStatement[6257-6338]:IfStatement[6257-6338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6288-6338]:Block[6288-6338]"
    }, {
      "left" : "resolveClassAnnotations();",
      "right" : "resolveClassAnnotations();",
      "info" : "ExpressionStatement[6302-6328]:ExpressionStatement[6302-6328]"
    }, {
      "left" : "return _classAnnotations;",
      "right" : "return _classAnnotations;",
      "info" : "ReturnStatement[6347-6372]:ReturnStatement[6347-6372]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6388-6394]:Modifier[6388-6394]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6395-6402]:PrimitiveType[6395-6402]"
    }, {
      "left" : "hasAnnotations",
      "right" : "hasAnnotations",
      "info" : "SimpleName[6403-6417]:SimpleName[6403-6417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6420-6562]:Block[6420-6562]"
    }, {
      "left" : "if (_classAnnotations == null)",
      "right" : "if (_classAnnotations == null)",
      "info" : "IfStatement[6430-6511]:IfStatement[6430-6511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6461-6511]:Block[6461-6511]"
    }, {
      "left" : "resolveClassAnnotations();",
      "right" : "resolveClassAnnotations();",
      "info" : "ExpressionStatement[6475-6501]:ExpressionStatement[6475-6501]"
    }, {
      "left" : "return _classAnnotations.size() > 0;",
      "right" : "return _classAnnotations.size() > 0;",
      "info" : "ReturnStatement[6520-6556]:ReturnStatement[6520-6556]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6568-6574]:Modifier[6568-6574]"
    }, {
      "left" : "AnnotatedConstructor",
      "right" : "AnnotatedConstructor",
      "info" : "SimpleType[6575-6595]:SimpleType[6575-6595]"
    }, {
      "left" : "getDefaultConstructor",
      "right" : "getDefaultConstructor",
      "info" : "SimpleName[6596-6617]:SimpleName[6596-6617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6624-6742]:Block[6624-6742]"
    }, {
      "left" : "if (!_creatorsResolved)",
      "right" : "if (!_creatorsResolved)",
      "info" : "IfStatement[6634-6700]:IfStatement[6634-6700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6658-6700]:Block[6658-6700]"
    }, {
      "left" : "resolveCreators();",
      "right" : "resolveCreators();",
      "info" : "ExpressionStatement[6672-6690]:ExpressionStatement[6672-6690]"
    }, {
      "left" : "return _defaultConstructor;",
      "right" : "return _defaultConstructor;",
      "info" : "ReturnStatement[6709-6736]:ReturnStatement[6709-6736]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6748-6754]:Modifier[6748-6754]"
    }, {
      "left" : "List<AnnotatedConstructor>",
      "right" : "List<AnnotatedConstructor>",
      "info" : "ParameterizedType[6755-6781]:ParameterizedType[6755-6781]"
    }, {
      "left" : "getConstructors",
      "right" : "getConstructors",
      "info" : "SimpleName[6782-6797]:SimpleName[6782-6797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6804-6916]:Block[6804-6916]"
    }, {
      "left" : "if (!_creatorsResolved)",
      "right" : "if (!_creatorsResolved)",
      "info" : "IfStatement[6814-6880]:IfStatement[6814-6880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6838-6880]:Block[6838-6880]"
    }, {
      "left" : "resolveCreators();",
      "right" : "resolveCreators();",
      "info" : "ExpressionStatement[6852-6870]:ExpressionStatement[6852-6870]"
    }, {
      "left" : "return _constructors;",
      "right" : "return _constructors;",
      "info" : "ReturnStatement[6889-6910]:ReturnStatement[6889-6910]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6922-6928]:Modifier[6922-6928]"
    }, {
      "left" : "List<AnnotatedMethod>",
      "right" : "List<AnnotatedMethod>",
      "info" : "ParameterizedType[6929-6950]:ParameterizedType[6929-6950]"
    }, {
      "left" : "getStaticMethods",
      "right" : "getStaticMethods",
      "info" : "SimpleName[6951-6967]:SimpleName[6951-6967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6974-7088]:Block[6974-7088]"
    }, {
      "left" : "if (!_creatorsResolved)",
      "right" : "if (!_creatorsResolved)",
      "info" : "IfStatement[6984-7050]:IfStatement[6984-7050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7008-7050]:Block[7008-7050]"
    }, {
      "left" : "resolveCreators();",
      "right" : "resolveCreators();",
      "info" : "ExpressionStatement[7022-7040]:ExpressionStatement[7022-7040]"
    }, {
      "left" : "return _creatorMethods;",
      "right" : "return _creatorMethods;",
      "info" : "ReturnStatement[7059-7082]:ReturnStatement[7059-7082]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7094-7100]:Modifier[7094-7100]"
    }, {
      "left" : "Iterable<AnnotatedMethod>",
      "right" : "Iterable<AnnotatedMethod>",
      "info" : "ParameterizedType[7101-7126]:ParameterizedType[7101-7126]"
    }, {
      "left" : "memberMethods",
      "right" : "memberMethods",
      "info" : "SimpleName[7127-7140]:SimpleName[7127-7140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7147-7269]:Block[7147-7269]"
    }, {
      "left" : "if (_memberMethods == null)",
      "right" : "if (_memberMethods == null)",
      "info" : "IfStatement[7157-7232]:IfStatement[7157-7232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7185-7232]:Block[7185-7232]"
    }, {
      "left" : "resolveMemberMethods();",
      "right" : "resolveMemberMethods();",
      "info" : "ExpressionStatement[7199-7222]:ExpressionStatement[7199-7222]"
    }, {
      "left" : "return _memberMethods;",
      "right" : "return _memberMethods;",
      "info" : "ReturnStatement[7241-7263]:ReturnStatement[7241-7263]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7275-7281]:Modifier[7275-7281]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[7282-7285]:PrimitiveType[7282-7285]"
    }, {
      "left" : "getMemberMethodCount",
      "right" : "getMemberMethodCount",
      "info" : "SimpleName[7286-7306]:SimpleName[7286-7306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7313-7442]:Block[7313-7442]"
    }, {
      "left" : "if (_memberMethods == null)",
      "right" : "if (_memberMethods == null)",
      "info" : "IfStatement[7323-7398]:IfStatement[7323-7398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7351-7398]:Block[7351-7398]"
    }, {
      "left" : "resolveMemberMethods();",
      "right" : "resolveMemberMethods();",
      "info" : "ExpressionStatement[7365-7388]:ExpressionStatement[7365-7388]"
    }, {
      "left" : "return _memberMethods.size();",
      "right" : "return _memberMethods.size();",
      "info" : "ReturnStatement[7407-7436]:ReturnStatement[7407-7436]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7448-7454]:Modifier[7448-7454]"
    }, {
      "left" : "AnnotatedMethod",
      "right" : "AnnotatedMethod",
      "info" : "SimpleType[7455-7470]:SimpleType[7455-7470]"
    }, {
      "left" : "findMethod",
      "right" : "findMethod",
      "info" : "SimpleName[7471-7481]:SimpleName[7471-7481]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[7482-7493]:SingleVariableDeclaration[7482-7493]"
    }, {
      "left" : "Class<?>[] paramTypes",
      "right" : "Class<?>[] paramTypes",
      "info" : "SingleVariableDeclaration[7495-7516]:SingleVariableDeclaration[7495-7516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7522-7667]:Block[7522-7667]"
    }, {
      "left" : "if (_memberMethods == null)",
      "right" : "if (_memberMethods == null)",
      "info" : "IfStatement[7532-7607]:IfStatement[7532-7607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7560-7607]:Block[7560-7607]"
    }, {
      "left" : "resolveMemberMethods();",
      "right" : "resolveMemberMethods();",
      "info" : "ExpressionStatement[7574-7597]:ExpressionStatement[7574-7597]"
    }, {
      "left" : "return _memberMethods.find(name, paramTypes);",
      "right" : "return _memberMethods.find(name, paramTypes);",
      "info" : "ReturnStatement[7616-7661]:ReturnStatement[7616-7661]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7673-7679]:Modifier[7673-7679]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[7680-7683]:PrimitiveType[7680-7683]"
    }, {
      "left" : "getFieldCount",
      "right" : "getFieldCount",
      "info" : "SimpleName[7684-7697]:SimpleName[7684-7697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7700-7808]:Block[7700-7808]"
    }, {
      "left" : "if (_fields == null)",
      "right" : "if (_fields == null)",
      "info" : "IfStatement[7710-7771]:IfStatement[7710-7771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7731-7771]:Block[7731-7771]"
    }, {
      "left" : "resolveFields();",
      "right" : "resolveFields();",
      "info" : "ExpressionStatement[7745-7761]:ExpressionStatement[7745-7761]"
    }, {
      "left" : "return _fields.size();",
      "right" : "return _fields.size();",
      "info" : "ReturnStatement[7780-7802]:ReturnStatement[7780-7802]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7814-7820]:Modifier[7814-7820]"
    }, {
      "left" : "Iterable<AnnotatedField>",
      "right" : "Iterable<AnnotatedField>",
      "info" : "ParameterizedType[7821-7845]:ParameterizedType[7821-7845]"
    }, {
      "left" : "fields",
      "right" : "fields",
      "info" : "SimpleName[7846-7852]:SimpleName[7846-7852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7859-7960]:Block[7859-7960]"
    }, {
      "left" : "if (_fields == null)",
      "right" : "if (_fields == null)",
      "info" : "IfStatement[7869-7930]:IfStatement[7869-7930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7890-7930]:Block[7890-7930]"
    }, {
      "left" : "resolveFields();",
      "right" : "resolveFields();",
      "info" : "ExpressionStatement[7904-7920]:ExpressionStatement[7904-7920]"
    }, {
      "left" : "return _fields;",
      "right" : "return _fields;",
      "info" : "ReturnStatement[7939-7954]:ReturnStatement[7939-7954]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8321-8328]:Modifier[8321-8328]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8329-8333]:PrimitiveType[8329-8333]"
    }, {
      "left" : "resolveClassAnnotations",
      "right" : "resolveClassAnnotations",
      "info" : "SimpleName[8334-8357]:SimpleName[8334-8357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8364-9671]:Block[8364-9671]"
    }, {
      "left" : "_classAnnotations = new AnnotationMap();",
      "right" : "_classAnnotations = new AnnotationMap();",
      "info" : "ExpressionStatement[8374-8414]:ExpressionStatement[8374-8414]"
    }, {
      "left" : "if (_annotationIntrospector != null)",
      "right" : "if (_annotationIntrospector != null)",
      "info" : "IfStatement[8505-9665]:IfStatement[8505-9665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8542-9665]:Block[8542-9665]"
    }, {
      "left" : "if (_primaryMixIn != null)",
      "right" : "if (_primaryMixIn != null)",
      "info" : "IfStatement[8612-8729]:IfStatement[8612-8729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8639-8729]:Block[8639-8729]"
    }, {
      "left" : "_addClassMixIns(_classAnnotations, _class, _primaryMixIn);",
      "right" : "_addClassMixIns(_classAnnotations, _class, _primaryMixIn);",
      "info" : "ExpressionStatement[8657-8715]:ExpressionStatement[8657-8715]"
    }, {
      "left" : "_addAnnotationsIfNotPresent(_classAnnotations, _class.getDeclaredAnnotations());",
      "right" : "_addAnnotationsIfNotPresent(_classAnnotations, _class.getDeclaredAnnotations());",
      "info" : "ExpressionStatement[8799-8879]:ExpressionStatement[8799-8879]"
    }, {
      "left" : "for (Class<?> cls : _superTypes)",
      "right" : "for (Class<?> cls : _superTypes)",
      "info" : "EnhancedForStatement[8938-9194]:EnhancedForStatement[8938-9194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8971-9194]:Block[8971-9194]"
    }, {
      "left" : "_addClassMixIns(_classAnnotations, cls);",
      "right" : "_addClassMixIns(_classAnnotations, cls);",
      "info" : "ExpressionStatement[9046-9086]:ExpressionStatement[9046-9086]"
    }, {
      "left" : "_addAnnotationsIfNotPresent(_classAnnotations, cls.getDeclaredAnnotations());",
      "right" : "_addAnnotationsIfNotPresent(_classAnnotations, cls.getDeclaredAnnotations());",
      "info" : "ExpressionStatement[9103-9180]:ExpressionStatement[9103-9180]"
    }, {
      "left" : "_addClassMixIns(_classAnnotations, Object.class);",
      "right" : "_addClassMixIns(_classAnnotations, Object.class);",
      "info" : "ExpressionStatement[9606-9655]:ExpressionStatement[9606-9655]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9821-9828]:Modifier[9821-9828]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9829-9833]:PrimitiveType[9829-9833]"
    }, {
      "left" : "resolveCreators",
      "right" : "resolveCreators",
      "info" : "SimpleName[9834-9849]:SimpleName[9834-9849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9856-13136]:Block[9856-13136]"
    }, {
      "left" : "List<AnnotatedConstructor> constructors = null;",
      "right" : "List<AnnotatedConstructor> constructors = null;",
      "info" : "VariableDeclarationStatement[9913-9960]:VariableDeclarationStatement[9913-9960]"
    }, {
      "left" : "Constructor<?>[] declaredCtors = _class.getDeclaredConstructors();",
      "right" : "Constructor<?>[] declaredCtors = _class.getDeclaredConstructors();",
      "info" : "VariableDeclarationStatement[9969-10035]:VariableDeclarationStatement[9969-10035]"
    }, {
      "left" : "for (Constructor<?> ctor : declaredCtors)",
      "right" : "for (Constructor<?> ctor : declaredCtors)",
      "info" : "EnhancedForStatement[10044-10501]:EnhancedForStatement[10044-10501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10086-10501]:Block[10086-10501]"
    }, {
      "left" : "if (ctor.getParameterTypes().length == 0)",
      "right" : "if (ctor.getParameterTypes().length == 0)",
      "info" : "IfStatement[10100-10491]:IfStatement[10100-10491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10142-10230]:Block[10142-10230]"
    }, {
      "left" : "_defaultConstructor = _constructConstructor(ctor, true);",
      "right" : "_defaultConstructor = _constructConstructor(ctor, true);",
      "info" : "ExpressionStatement[10160-10216]:ExpressionStatement[10160-10216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10236-10491]:Block[10236-10491]"
    }, {
      "left" : "if (constructors == null)",
      "right" : "if (constructors == null)",
      "info" : "IfStatement[10254-10407]:IfStatement[10254-10407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10280-10407]:Block[10280-10407]"
    }, {
      "left" : "constructors = new ArrayList<AnnotatedConstructor>(Math.max(10, declaredCtors.length));",
      "right" : "constructors = new ArrayList<AnnotatedConstructor>(Math.max(10, declaredCtors.length));",
      "info" : "ExpressionStatement[10302-10389]:ExpressionStatement[10302-10389]"
    }, {
      "left" : "constructors.add(_constructConstructor(ctor, false));",
      "right" : "constructors.add(_constructConstructor(ctor, false));",
      "info" : "ExpressionStatement[10424-10477]:ExpressionStatement[10424-10477]"
    }, {
      "left" : "if (constructors == null)",
      "right" : "if (constructors == null)",
      "info" : "IfStatement[10510-10659]:IfStatement[10510-10659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10536-10600]:Block[10536-10600]"
    }, {
      "left" : "_constructors = Collections.emptyList();",
      "right" : "_constructors = Collections.emptyList();",
      "info" : "ExpressionStatement[10550-10590]:ExpressionStatement[10550-10590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10606-10659]:Block[10606-10659]"
    }, {
      "left" : "_constructors = constructors;",
      "right" : "_constructors = constructors;",
      "info" : "ExpressionStatement[10620-10649]:ExpressionStatement[10620-10649]"
    }, {
      "left" : "if (_primaryMixIn != null)",
      "right" : "if (_primaryMixIn != null)",
      "info" : "IfStatement[10716-10897]:IfStatement[10716-10897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10743-10897]:Block[10743-10897]"
    }, {
      "left" : "if (_defaultConstructor != null || !_constructors.isEmpty())",
      "right" : "if (_defaultConstructor != null || !_constructors.isEmpty())",
      "info" : "IfStatement[10757-10887]:IfStatement[10757-10887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10818-10887]:Block[10818-10887]"
    }, {
      "left" : "_addConstructorMixIns(_primaryMixIn);",
      "right" : "_addConstructorMixIns(_primaryMixIn);",
      "info" : "ExpressionStatement[10836-10873]:ExpressionStatement[10836-10873]"
    }, {
      "left" : "if (_annotationIntrospector != null)",
      "right" : "if (_annotationIntrospector != null)",
      "info" : "IfStatement[11168-11777]:IfStatement[11168-11777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11205-11777]:Block[11205-11777]"
    }, {
      "left" : "if (_defaultConstructor != null)",
      "right" : "if (_defaultConstructor != null)",
      "info" : "IfStatement[11219-11417]:IfStatement[11219-11417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11252-11417]:Block[11252-11417]"
    }, {
      "left" : "if (_annotationIntrospector.hasIgnoreMarker(_defaultConstructor))",
      "right" : "if (_annotationIntrospector.hasIgnoreMarker(_defaultConstructor))",
      "info" : "IfStatement[11270-11403]:IfStatement[11270-11403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11336-11403]:Block[11336-11403]"
    }, {
      "left" : "_defaultConstructor = null;",
      "right" : "_defaultConstructor = null;",
      "info" : "ExpressionStatement[11358-11385]:ExpressionStatement[11358-11385]"
    }, {
      "left" : "if (_constructors != null)",
      "right" : "if (_constructors != null)",
      "info" : "IfStatement[11430-11767]:IfStatement[11430-11767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11457-11767]:Block[11457-11767]"
    }, {
      "left" : "for (int i = _constructors.size(); --i >= 0)",
      "right" : "for (int i = _constructors.size(); --i >= 0)",
      "info" : "ForStatement[11527-11753]:ForStatement[11527-11753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11574-11753]:Block[11574-11753]"
    }, {
      "left" : "if (_annotationIntrospector.hasIgnoreMarker(_constructors.get(i)))",
      "right" : "if (_annotationIntrospector.hasIgnoreMarker(_constructors.get(i)))",
      "info" : "IfStatement[11596-11735]:IfStatement[11596-11735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11663-11735]:Block[11663-11735]"
    }, {
      "left" : "_constructors.remove(i);",
      "right" : "_constructors.remove(i);",
      "info" : "ExpressionStatement[11689-11713]:ExpressionStatement[11689-11713]"
    }, {
      "left" : "List<AnnotatedMethod> creatorMethods = null;",
      "right" : "List<AnnotatedMethod> creatorMethods = null;",
      "info" : "VariableDeclarationStatement[11786-11830]:VariableDeclarationStatement[11786-11830]"
    }, {
      "left" : "for (Method m : _class.getDeclaredMethods())",
      "right" : "for (Method m : _class.getDeclaredMethods())",
      "info" : "EnhancedForStatement[11915-12376]:EnhancedForStatement[11915-12376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11960-12376]:Block[11960-12376]"
    }, {
      "left" : "if (!Modifier.isStatic(m.getModifiers()))",
      "right" : "if (!Modifier.isStatic(m.getModifiers()))",
      "info" : "IfStatement[11974-12057]:IfStatement[11974-12057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12016-12057]:Block[12016-12057]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[12034-12043]:ContinueStatement[12034-12043]"
    }, {
      "left" : "if (creatorMethods == null)",
      "right" : "if (creatorMethods == null)",
      "info" : "IfStatement[12195-12306]:IfStatement[12195-12306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12223-12306]:Block[12223-12306]"
    }, {
      "left" : "creatorMethods = new ArrayList<AnnotatedMethod>(8);",
      "right" : "creatorMethods = new ArrayList<AnnotatedMethod>(8);",
      "info" : "ExpressionStatement[12241-12292]:ExpressionStatement[12241-12292]"
    }, {
      "left" : "creatorMethods.add(_constructCreatorMethod(m));",
      "right" : "creatorMethods.add(_constructCreatorMethod(m));",
      "info" : "ExpressionStatement[12319-12366]:ExpressionStatement[12319-12366]"
    }, {
      "left" : "if (creatorMethods == null)",
      "right" : "if (creatorMethods == null)",
      "info" : "IfStatement[12385-13096]:IfStatement[12385-13096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12413-12479]:Block[12413-12479]"
    }, {
      "left" : "_creatorMethods = Collections.emptyList();",
      "right" : "_creatorMethods = Collections.emptyList();",
      "info" : "ExpressionStatement[12427-12469]:ExpressionStatement[12427-12469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12485-13096]:Block[12485-13096]"
    }, {
      "left" : "_creatorMethods = creatorMethods;",
      "right" : "_creatorMethods = creatorMethods;",
      "info" : "ExpressionStatement[12499-12532]:ExpressionStatement[12499-12532]"
    }, {
      "left" : "if (_primaryMixIn != null)",
      "right" : "if (_primaryMixIn != null)",
      "info" : "IfStatement[12579-12671]:IfStatement[12579-12671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12606-12671]:Block[12606-12671]"
    }, {
      "left" : "_addFactoryMixIns(_primaryMixIn);",
      "right" : "_addFactoryMixIns(_primaryMixIn);",
      "info" : "ExpressionStatement[12624-12657]:ExpressionStatement[12624-12657]"
    }, {
      "left" : "if (_annotationIntrospector != null)",
      "right" : "if (_annotationIntrospector != null)",
      "info" : "IfStatement[12733-13086]:IfStatement[12733-13086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12770-13086]:Block[12770-13086]"
    }, {
      "left" : "for (int i = _creatorMethods.size(); --i >= 0)",
      "right" : "for (int i = _creatorMethods.size(); --i >= 0)",
      "info" : "ForStatement[12840-13072]:ForStatement[12840-13072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12889-13072]:Block[12889-13072]"
    }, {
      "left" : "if (_annotationIntrospector.hasIgnoreMarker(_creatorMethods.get(i)))",
      "right" : "if (_annotationIntrospector.hasIgnoreMarker(_creatorMethods.get(i)))",
      "info" : "IfStatement[12911-13054]:IfStatement[12911-13054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12980-13054]:Block[12980-13054]"
    }, {
      "left" : "_creatorMethods.remove(i);",
      "right" : "_creatorMethods.remove(i);",
      "info" : "ExpressionStatement[13006-13032]:ExpressionStatement[13006-13032]"
    }, {
      "left" : "_creatorsResolved = true;",
      "right" : "_creatorsResolved = true;",
      "info" : "ExpressionStatement[13105-13130]:ExpressionStatement[13105-13130]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13415-13422]:Modifier[13415-13422]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13423-13427]:PrimitiveType[13423-13427]"
    }, {
      "left" : "resolveMemberMethods",
      "right" : "resolveMemberMethods",
      "info" : "SimpleName[13428-13448]:SimpleName[13428-13448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13455-15421]:Block[13455-15421]"
    }, {
      "left" : "_memberMethods = new AnnotatedMethodMap();",
      "right" : "_memberMethods = new AnnotatedMethodMap();",
      "info" : "ExpressionStatement[13465-13507]:ExpressionStatement[13465-13507]"
    }, {
      "left" : "AnnotatedMethodMap mixins = new AnnotatedMethodMap();",
      "right" : "AnnotatedMethodMap mixins = new AnnotatedMethodMap();",
      "info" : "VariableDeclarationStatement[13516-13569]:VariableDeclarationStatement[13516-13569]"
    }, {
      "left" : "_addMemberMethods(_class, _memberMethods, _primaryMixIn, mixins);",
      "right" : "_addMemberMethods(_class, _memberMethods, _primaryMixIn, mixins);",
      "info" : "ExpressionStatement[13626-13691]:ExpressionStatement[13626-13691]"
    }, {
      "left" : "for (Class<?> cls : _superTypes)",
      "right" : "for (Class<?> cls : _superTypes)",
      "info" : "EnhancedForStatement[13770-13992]:EnhancedForStatement[13770-13992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13803-13992]:Block[13803-13992]"
    }, {
      "left" : "Class<?> mixin = (_mixInResolver == null) ? null : _mixInResolver.findMixInClassFor(cls);",
      "right" : "Class<?> mixin = (_mixInResolver == null) ? null : _mixInResolver.findMixInClassFor(cls);",
      "info" : "VariableDeclarationStatement[13817-13906]:VariableDeclarationStatement[13817-13906]"
    }, {
      "left" : "_addMemberMethods(cls, _memberMethods, mixin, mixins);",
      "right" : "_addMemberMethods(cls, _memberMethods, mixin, mixins);",
      "info" : "ExpressionStatement[13928-13982]:ExpressionStatement[13928-13982]"
    }, {
      "left" : "if (_mixInResolver != null)",
      "right" : "if (_mixInResolver != null)",
      "info" : "IfStatement[14078-14314]:IfStatement[14078-14314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14106-14314]:Block[14106-14314]"
    }, {
      "left" : "Class<?> mixin = _mixInResolver.findMixInClassFor(Object.class);",
      "right" : "Class<?> mixin = _mixInResolver.findMixInClassFor(Object.class);",
      "info" : "VariableDeclarationStatement[14120-14184]:VariableDeclarationStatement[14120-14184]"
    }, {
      "left" : "if (mixin != null)",
      "right" : "if (mixin != null)",
      "info" : "IfStatement[14197-14304]:IfStatement[14197-14304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14216-14304]:Block[14216-14304]"
    }, {
      "left" : "_addMethodMixIns(_class, _memberMethods, mixin, mixins);",
      "right" : "_addMethodMixIns(_class, _memberMethods, mixin, mixins);",
      "info" : "ExpressionStatement[14234-14290]:ExpressionStatement[14234-14290]"
    }, {
      "left" : "if (_annotationIntrospector != null)",
      "right" : "if (_annotationIntrospector != null)",
      "info" : "IfStatement[14688-15415]:IfStatement[14688-15415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14725-15415]:Block[14725-15415]"
    }, {
      "left" : "if (!mixins.isEmpty())",
      "right" : "if (!mixins.isEmpty())",
      "info" : "IfStatement[14739-15405]:IfStatement[14739-15405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14762-15405]:Block[14762-15405]"
    }, {
      "left" : "Iterator<AnnotatedMethod> it = mixins.iterator();",
      "right" : "Iterator<AnnotatedMethod> it = mixins.iterator();",
      "info" : "VariableDeclarationStatement[14780-14829]:VariableDeclarationStatement[14780-14829]"
    }, {
      "left" : "while (it.hasNext())",
      "right" : "while (it.hasNext())",
      "info" : "WhileStatement[14846-15391]:WhileStatement[14846-15391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14867-15391]:Block[14867-15391]"
    }, {
      "left" : "AnnotatedMethod mixIn = it.next();",
      "right" : "AnnotatedMethod mixIn = it.next();",
      "info" : "VariableDeclarationStatement[14889-14923]:VariableDeclarationStatement[14889-14923]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[14944-15373]:TryStatement[14944-15373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14948-15349]:Block[14948-15349]"
    }, {
      "left" : "Method m = Object.class.getDeclaredMethod(mixIn.getName(), mixIn.getRawParameterTypes());",
      "right" : "Method m = Object.class.getDeclaredMethod(mixIn.getName(), mixIn.getRawParameterTypes());",
      "info" : "VariableDeclarationStatement[14974-15063]:VariableDeclarationStatement[14974-15063]"
    }, {
      "left" : "if (m != null)",
      "right" : "if (m != null)",
      "info" : "IfStatement[15088-15327]:IfStatement[15088-15327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15103-15327]:Block[15103-15327]"
    }, {
      "left" : "AnnotatedMethod am = _constructMethod(m);",
      "right" : "AnnotatedMethod am = _constructMethod(m);",
      "info" : "VariableDeclarationStatement[15133-15174]:VariableDeclarationStatement[15133-15174]"
    }, {
      "left" : "_addMixOvers(mixIn.getAnnotated(), am, false);",
      "right" : "_addMixOvers(mixIn.getAnnotated(), am, false);",
      "info" : "ExpressionStatement[15203-15249]:ExpressionStatement[15203-15249]"
    }, {
      "left" : "_memberMethods.add(am);",
      "right" : "_memberMethods.add(am);",
      "info" : "ExpressionStatement[15278-15301]:ExpressionStatement[15278-15301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15370-15373]:Block[15370-15373]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15607-15614]:Modifier[15607-15614]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15615-15619]:PrimitiveType[15615-15619]"
    }, {
      "left" : "resolveFields",
      "right" : "resolveFields",
      "info" : "SimpleName[15620-15633]:SimpleName[15620-15633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15640-15982]:Block[15640-15982]"
    }, {
      "left" : "Map<String,AnnotatedField> foundFields = _findFields(_class, null);",
      "right" : "Map<String,AnnotatedField> foundFields = _findFields(_class, null);",
      "info" : "VariableDeclarationStatement[15650-15717]:VariableDeclarationStatement[15650-15717]"
    }, {
      "left" : "if (foundFields == null || foundFields.size() == 0)",
      "right" : "if (foundFields == null || foundFields.size() == 0)",
      "info" : "IfStatement[15726-15976]:IfStatement[15726-15976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15778-15836]:Block[15778-15836]"
    }, {
      "left" : "_fields = Collections.emptyList();",
      "right" : "_fields = Collections.emptyList();",
      "info" : "ExpressionStatement[15792-15826]:ExpressionStatement[15792-15826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15842-15976]:Block[15842-15976]"
    }, {
      "left" : "_fields = new ArrayList<AnnotatedField>(foundFields.size());",
      "right" : "_fields = new ArrayList<AnnotatedField>(foundFields.size());",
      "info" : "ExpressionStatement[15856-15916]:ExpressionStatement[15856-15916]"
    }, {
      "left" : "_fields.addAll(foundFields.values());",
      "right" : "_fields.addAll(foundFields.values());",
      "info" : "ExpressionStatement[15929-15966]:ExpressionStatement[15929-15966]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[16403-16412]:Modifier[16403-16412]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16413-16417]:PrimitiveType[16413-16417]"
    }, {
      "left" : "_addClassMixIns",
      "right" : "_addClassMixIns",
      "info" : "SimpleName[16418-16433]:SimpleName[16418-16433]"
    }, {
      "left" : "AnnotationMap annotations",
      "right" : "AnnotationMap annotations",
      "info" : "SingleVariableDeclaration[16434-16459]:SingleVariableDeclaration[16434-16459]"
    }, {
      "left" : "Class<?> toMask",
      "right" : "Class<?> toMask",
      "info" : "SingleVariableDeclaration[16461-16476]:SingleVariableDeclaration[16461-16476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16482-16629]:Block[16482-16629]"
    }, {
      "left" : "if (_mixInResolver != null)",
      "right" : "if (_mixInResolver != null)",
      "info" : "IfStatement[16492-16623]:IfStatement[16492-16623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16520-16623]:Block[16520-16623]"
    }, {
      "left" : "_addClassMixIns(annotations, toMask, _mixInResolver.findMixInClassFor(toMask));",
      "right" : "_addClassMixIns(annotations, toMask, _mixInResolver.findMixInClassFor(toMask));",
      "info" : "ExpressionStatement[16534-16613]:ExpressionStatement[16534-16613]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[16635-16644]:Modifier[16635-16644]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16645-16649]:PrimitiveType[16645-16649]"
    }, {
      "left" : "_addClassMixIns",
      "right" : "_addClassMixIns",
      "info" : "SimpleName[16650-16665]:SimpleName[16650-16665]"
    }, {
      "left" : "AnnotationMap annotations",
      "right" : "AnnotationMap annotations",
      "info" : "SingleVariableDeclaration[16666-16691]:SingleVariableDeclaration[16666-16691]"
    }, {
      "left" : "Class<?> toMask",
      "right" : "Class<?> toMask",
      "info" : "SingleVariableDeclaration[16693-16708]:SingleVariableDeclaration[16693-16708]"
    }, {
      "left" : "Class<?> mixin",
      "right" : "Class<?> mixin",
      "info" : "SingleVariableDeclaration[16745-16759]:SingleVariableDeclaration[16745-16759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16765-17550]:Block[16765-17550]"
    }, {
      "left" : "if (mixin == null)",
      "right" : "if (mixin == null)",
      "info" : "IfStatement[16775-16825]:IfStatement[16775-16825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16794-16825]:Block[16794-16825]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[16808-16815]:ReturnStatement[16808-16815]"
    }, {
      "left" : "_addAnnotationsIfNotPresent(annotations, mixin.getDeclaredAnnotations());",
      "right" : "_addAnnotationsIfNotPresent(annotations, mixin.getDeclaredAnnotations());",
      "info" : "ExpressionStatement[16894-16967]:ExpressionStatement[16894-16967]"
    }, {
      "left" : "for (Class<?> parent : ClassUtil.findSuperTypes(mixin, toMask))",
      "right" : "for (Class<?> parent : ClassUtil.findSuperTypes(mixin, toMask))",
      "info" : "EnhancedForStatement[17382-17544]:EnhancedForStatement[17382-17544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17446-17544]:Block[17446-17544]"
    }, {
      "left" : "_addAnnotationsIfNotPresent(annotations, parent.getDeclaredAnnotations());",
      "right" : "_addAnnotationsIfNotPresent(annotations, parent.getDeclaredAnnotations());",
      "info" : "ExpressionStatement[17460-17534]:ExpressionStatement[17460-17534]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[17773-17782]:Modifier[17773-17782]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17783-17787]:PrimitiveType[17783-17787]"
    }, {
      "left" : "_addConstructorMixIns",
      "right" : "_addConstructorMixIns",
      "info" : "SimpleName[17788-17809]:SimpleName[17788-17809]"
    }, {
      "left" : "Class<?> mixin",
      "right" : "Class<?> mixin",
      "info" : "SingleVariableDeclaration[17810-17824]:SingleVariableDeclaration[17810-17824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17830-18872]:Block[17830-18872]"
    }, {
      "left" : "MemberKey[] ctorKeys = null;",
      "right" : "MemberKey[] ctorKeys = null;",
      "info" : "VariableDeclarationStatement[17840-17868]:VariableDeclarationStatement[17840-17868]"
    }, {
      "left" : "int ctorCount = (_constructors == null) ? 0 : _constructors.size();",
      "right" : "int ctorCount = (_constructors == null) ? 0 : _constructors.size();",
      "info" : "VariableDeclarationStatement[17877-17944]:VariableDeclarationStatement[17877-17944]"
    }, {
      "left" : "for (Constructor<?> ctor : mixin.getDeclaredConstructors())",
      "right" : "for (Constructor<?> ctor : mixin.getDeclaredConstructors())",
      "info" : "EnhancedForStatement[17953-18866]:EnhancedForStatement[17953-18866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18013-18866]:Block[18013-18866]"
    }, {
      "left" : "if (ctor.getParameterTypes().length == 0)",
      "right" : "if (ctor.getParameterTypes().length == 0)",
      "info" : "IfStatement[18027-18856]:IfStatement[18027-18856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18069-18221]:Block[18069-18221]"
    }, {
      "left" : "if (_defaultConstructor != null)",
      "right" : "if (_defaultConstructor != null)",
      "info" : "IfStatement[18087-18207]:IfStatement[18087-18207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18120-18207]:Block[18120-18207]"
    }, {
      "left" : "_addMixOvers(ctor, _defaultConstructor, false);",
      "right" : "_addMixOvers(ctor, _defaultConstructor, false);",
      "info" : "ExpressionStatement[18142-18189]:ExpressionStatement[18142-18189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18227-18856]:Block[18227-18856]"
    }, {
      "left" : "if (ctorKeys == null)",
      "right" : "if (ctorKeys == null)",
      "info" : "IfStatement[18245-18513]:IfStatement[18245-18513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18267-18513]:Block[18267-18513]"
    }, {
      "left" : "ctorKeys = new MemberKey[ctorCount];",
      "right" : "ctorKeys = new MemberKey[ctorCount];",
      "info" : "ExpressionStatement[18289-18325]:ExpressionStatement[18289-18325]"
    }, {
      "left" : "for (int i = 0; i < ctorCount; ++i)",
      "right" : "for (int i = 0; i < ctorCount; ++i)",
      "info" : "ForStatement[18346-18495]:ForStatement[18346-18495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18382-18495]:Block[18382-18495]"
    }, {
      "left" : "ctorKeys[i] = new MemberKey(_constructors.get(i).getAnnotated());",
      "right" : "ctorKeys[i] = new MemberKey(_constructors.get(i).getAnnotated());",
      "info" : "ExpressionStatement[18408-18473]:ExpressionStatement[18408-18473]"
    }, {
      "left" : "MemberKey key = new MemberKey(ctor);",
      "right" : "MemberKey key = new MemberKey(ctor);",
      "info" : "VariableDeclarationStatement[18530-18566]:VariableDeclarationStatement[18530-18566]"
    }, {
      "left" : "for (int i = 0; i < ctorCount; ++i)",
      "right" : "for (int i = 0; i < ctorCount; ++i)",
      "info" : "ForStatement[18584-18842]:ForStatement[18584-18842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18620-18842]:Block[18620-18842]"
    }, {
      "left" : "if (!key.equals(ctorKeys[i]))",
      "right" : "if (!key.equals(ctorKeys[i]))",
      "info" : "IfStatement[18642-18729]:IfStatement[18642-18729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18672-18729]:Block[18672-18729]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[18698-18707]:ContinueStatement[18698-18707]"
    }, {
      "left" : "_addMixOvers(ctor, _constructors.get(i), true);",
      "right" : "_addMixOvers(ctor, _constructors.get(i), true);",
      "info" : "ExpressionStatement[18750-18797]:ExpressionStatement[18750-18797]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18818-18824]:BreakStatement[18818-18824]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[18878-18887]:Modifier[18878-18887]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18888-18892]:PrimitiveType[18888-18892]"
    }, {
      "left" : "_addFactoryMixIns",
      "right" : "_addFactoryMixIns",
      "info" : "SimpleName[18893-18910]:SimpleName[18893-18910]"
    }, {
      "left" : "Class<?> mixin",
      "right" : "Class<?> mixin",
      "info" : "SingleVariableDeclaration[18911-18925]:SingleVariableDeclaration[18911-18925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18931-19850]:Block[18931-19850]"
    }, {
      "left" : "MemberKey[] methodKeys = null;",
      "right" : "MemberKey[] methodKeys = null;",
      "info" : "VariableDeclarationStatement[18941-18971]:VariableDeclarationStatement[18941-18971]"
    }, {
      "left" : "int methodCount = _creatorMethods.size();",
      "right" : "int methodCount = _creatorMethods.size();",
      "info" : "VariableDeclarationStatement[18980-19021]:VariableDeclarationStatement[18980-19021]"
    }, {
      "left" : "for (Method m : mixin.getDeclaredMethods())",
      "right" : "for (Method m : mixin.getDeclaredMethods())",
      "info" : "EnhancedForStatement[19031-19844]:EnhancedForStatement[19031-19844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19075-19844]:Block[19075-19844]"
    }, {
      "left" : "if (!Modifier.isStatic(m.getModifiers()))",
      "right" : "if (!Modifier.isStatic(m.getModifiers()))",
      "info" : "IfStatement[19089-19172]:IfStatement[19089-19172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19131-19172]:Block[19131-19172]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[19149-19158]:ContinueStatement[19149-19158]"
    }, {
      "left" : "if (m.getParameterTypes().length == 0)",
      "right" : "if (m.getParameterTypes().length == 0)",
      "info" : "IfStatement[19185-19265]:IfStatement[19185-19265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19224-19265]:Block[19224-19265]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[19242-19251]:ContinueStatement[19242-19251]"
    }, {
      "left" : "if (methodKeys == null)",
      "right" : "if (methodKeys == null)",
      "info" : "IfStatement[19278-19538]:IfStatement[19278-19538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19302-19538]:Block[19302-19538]"
    }, {
      "left" : "methodKeys = new MemberKey[methodCount];",
      "right" : "methodKeys = new MemberKey[methodCount];",
      "info" : "ExpressionStatement[19320-19360]:ExpressionStatement[19320-19360]"
    }, {
      "left" : "for (int i = 0; i < methodCount; ++i)",
      "right" : "for (int i = 0; i < methodCount; ++i)",
      "info" : "ForStatement[19377-19524]:ForStatement[19377-19524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19415-19524]:Block[19415-19524]"
    }, {
      "left" : "methodKeys[i] = new MemberKey(_creatorMethods.get(i).getAnnotated());",
      "right" : "methodKeys[i] = new MemberKey(_creatorMethods.get(i).getAnnotated());",
      "info" : "ExpressionStatement[19437-19506]:ExpressionStatement[19437-19506]"
    }, {
      "left" : "MemberKey key = new MemberKey(m);",
      "right" : "MemberKey key = new MemberKey(m);",
      "info" : "VariableDeclarationStatement[19551-19584]:VariableDeclarationStatement[19551-19584]"
    }, {
      "left" : "for (int i = 0; i < methodCount; ++i)",
      "right" : "for (int i = 0; i < methodCount; ++i)",
      "info" : "ForStatement[19597-19834]:ForStatement[19597-19834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19635-19834]:Block[19635-19834]"
    }, {
      "left" : "if (!key.equals(methodKeys[i]))",
      "right" : "if (!key.equals(methodKeys[i]))",
      "info" : "IfStatement[19653-19734]:IfStatement[19653-19734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19685-19734]:Block[19685-19734]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[19707-19716]:ContinueStatement[19707-19716]"
    }, {
      "left" : "_addMixOvers(m, _creatorMethods.get(i), true);",
      "right" : "_addMixOvers(m, _creatorMethods.get(i), true);",
      "info" : "ExpressionStatement[19751-19797]:ExpressionStatement[19751-19797]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19814-19820]:BreakStatement[19814-19820]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[20056-20065]:Modifier[20056-20065]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20066-20070]:PrimitiveType[20066-20070]"
    }, {
      "left" : "_addMemberMethods",
      "right" : "_addMemberMethods",
      "info" : "SimpleName[20071-20088]:SimpleName[20071-20088]"
    }, {
      "left" : "Class<?> cls",
      "right" : "Class<?> cls",
      "info" : "SingleVariableDeclaration[20089-20101]:SingleVariableDeclaration[20089-20101]"
    }, {
      "left" : "AnnotatedMethodMap methods",
      "right" : "AnnotatedMethodMap methods",
      "info" : "SingleVariableDeclaration[20103-20129]:SingleVariableDeclaration[20103-20129]"
    }, {
      "left" : "Class<?> mixInCls",
      "right" : "Class<?> mixInCls",
      "info" : "SingleVariableDeclaration[20143-20160]:SingleVariableDeclaration[20143-20160]"
    }, {
      "left" : "AnnotatedMethodMap mixIns",
      "right" : "AnnotatedMethodMap mixIns",
      "info" : "SingleVariableDeclaration[20162-20187]:SingleVariableDeclaration[20162-20187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20193-22034]:Block[20193-22034]"
    }, {
      "left" : "if (mixInCls != null)",
      "right" : "if (mixInCls != null)",
      "info" : "IfStatement[20280-20375]:IfStatement[20280-20375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20302-20375]:Block[20302-20375]"
    }, {
      "left" : "_addMethodMixIns(cls, methods, mixInCls, mixIns);",
      "right" : "_addMethodMixIns(cls, methods, mixInCls, mixIns);",
      "info" : "ExpressionStatement[20316-20365]:ExpressionStatement[20316-20365]"
    }, {
      "left" : "if (cls == null)",
      "right" : "if (cls == null)",
      "info" : "IfStatement[20392-20498]:IfStatement[20392-20498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20409-20498]:Block[20409-20498]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[20481-20488]:ReturnStatement[20481-20488]"
    }, {
      "left" : "for (Method m : cls.getDeclaredMethods())",
      "right" : "for (Method m : cls.getDeclaredMethods())",
      "info" : "EnhancedForStatement[20554-22028]:EnhancedForStatement[20554-22028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20596-22028]:Block[20596-22028]"
    }, {
      "left" : "if (!_isIncludableMemberMethod(m))",
      "right" : "if (!_isIncludableMemberMethod(m))",
      "info" : "IfStatement[20610-20686]:IfStatement[20610-20686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20645-20686]:Block[20645-20686]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[20663-20672]:ContinueStatement[20663-20672]"
    }, {
      "left" : "AnnotatedMethod old = methods.find(m);",
      "right" : "AnnotatedMethod old = methods.find(m);",
      "info" : "VariableDeclarationStatement[20699-20737]:VariableDeclarationStatement[20699-20737]"
    }, {
      "left" : "if (old == null)",
      "right" : "if (old == null)",
      "info" : "IfStatement[20750-22018]:IfStatement[20750-22018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20767-21098]:Block[20767-21098]"
    }, {
      "left" : "AnnotatedMethod newM = _constructMethod(m);",
      "right" : "AnnotatedMethod newM = _constructMethod(m);",
      "info" : "VariableDeclarationStatement[20785-20828]:VariableDeclarationStatement[20785-20828]"
    }, {
      "left" : "methods.add(newM);",
      "right" : "methods.add(newM);",
      "info" : "ExpressionStatement[20845-20863]:ExpressionStatement[20845-20863]"
    }, {
      "left" : "old = mixIns.remove(m);",
      "right" : "old = mixIns.remove(m);",
      "info" : "ExpressionStatement[20941-20964]:ExpressionStatement[20941-20964]"
    }, {
      "left" : "if (old != null)",
      "right" : "if (old != null)",
      "info" : "IfStatement[20981-21084]:IfStatement[20981-21084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20998-21084]:Block[20998-21084]"
    }, {
      "left" : "_addMixOvers(old.getAnnotated(), newM, false);",
      "right" : "_addMixOvers(old.getAnnotated(), newM, false);",
      "info" : "ExpressionStatement[21020-21066]:ExpressionStatement[21020-21066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21104-22018]:Block[21104-22018]"
    }, {
      "left" : "_addMixUnders(m, old);",
      "right" : "_addMixUnders(m, old);",
      "info" : "ExpressionStatement[21300-21322]:ExpressionStatement[21300-21322]"
    }, {
      "left" : "if (old.getDeclaringClass().isInterface() && !m.getDeclaringClass().isInterface())",
      "right" : "if (old.getDeclaringClass().isInterface() && !m.getDeclaringClass().isInterface())",
      "info" : "IfStatement[21850-22004]:IfStatement[21850-22004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21933-22004]:Block[21933-22004]"
    }, {
      "left" : "methods.add(old.withMethod(m));",
      "right" : "methods.add(old.withMethod(m));",
      "info" : "ExpressionStatement[21955-21986]:ExpressionStatement[21955-21986]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[22040-22049]:Modifier[22040-22049]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22050-22054]:PrimitiveType[22050-22054]"
    }, {
      "left" : "_addMethodMixIns",
      "right" : "_addMethodMixIns",
      "info" : "SimpleName[22055-22071]:SimpleName[22055-22071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22184-23332]:Block[22184-23508]"
    }, {
      "left" : "List<Class<?>> parents = new ArrayList<Class<?>>();",
      "right" : "List<Class<?>> parents = new ArrayList<Class<?>>();",
      "info" : "VariableDeclarationStatement[22194-22245]:VariableDeclarationStatement[22194-22245]"
    }, {
      "left" : "parents.add(mixInCls);",
      "right" : "parents.add(mixInCls);",
      "info" : "ExpressionStatement[22254-22276]:ExpressionStatement[22254-22276]"
    }, {
      "left" : "ClassUtil.findSuperTypes(mixInCls, targetClass, parents);",
      "right" : "ClassUtil.findSuperTypes(mixInCls, targetClass, parents);",
      "info" : "ExpressionStatement[22285-22342]:ExpressionStatement[22285-22342]"
    }, {
      "left" : "for (Class<?> mixin : parents)",
      "right" : "for (Class<?> mixin : parents)",
      "info" : "EnhancedForStatement[22351-23326]:EnhancedForStatement[22351-23502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22382-23326]:Block[22382-23502]"
    }, {
      "left" : "for (Method m : mixin.getDeclaredMethods())",
      "right" : "for (Method m : mixin.getDeclaredMethods())",
      "info" : "EnhancedForStatement[22396-23316]:EnhancedForStatement[22396-23492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22440-23316]:Block[22440-23492]"
    }, {
      "left" : "if (!_isIncludableMemberMethod(m))",
      "right" : "if (!_isIncludableMemberMethod(m))",
      "info" : "IfStatement[22458-22542]:IfStatement[22458-22542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22493-22542]:Block[22493-22542]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[22515-22524]:ContinueStatement[22515-22524]"
    }, {
      "left" : "AnnotatedMethod am = methods.find(m);",
      "right" : "AnnotatedMethod am = methods.find(m);",
      "info" : "VariableDeclarationStatement[22559-22596]:VariableDeclarationStatement[22559-22596]"
    }, {
      "left" : "if (am != null)",
      "right" : "if (am != null)",
      "info" : "IfStatement[22832-23302]:IfStatement[22832-23478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22848-23132]:Block[22848-23132]"
    }, {
      "left" : "_addMixUnders(m, am);",
      "right" : "_addMixUnders(m, am);",
      "info" : "ExpressionStatement[22870-22891]:ExpressionStatement[22870-22891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23138-23302]:Block[23138-23478]"
    }, {
      "left" : "mixIns.add(_constructMethod(m));",
      "right" : "mixIns.add(_constructMethod(m));",
      "info" : "ExpressionStatement[23252-23284]:ExpressionStatement[23406-23438]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[23537-23546]:Modifier[23713-23722]"
    }, {
      "left" : "Map<String,AnnotatedField>",
      "right" : "Map<String,AnnotatedField>",
      "info" : "ParameterizedType[23547-23573]:ParameterizedType[23723-23749]"
    }, {
      "left" : "_findFields",
      "right" : "_findFields",
      "info" : "SimpleName[23574-23585]:SimpleName[23750-23761]"
    }, {
      "left" : "Class<?> c",
      "right" : "Class<?> c",
      "info" : "SingleVariableDeclaration[23586-23596]:SingleVariableDeclaration[23762-23772]"
    }, {
      "left" : "Map<String,AnnotatedField> fields",
      "right" : "Map<String,AnnotatedField> fields",
      "info" : "SingleVariableDeclaration[23598-23631]:SingleVariableDeclaration[23774-23807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23637-25265]:Block[23813-25441]"
    }, {
      "left" : "Class<?> parent = c.getSuperclass();",
      "right" : "Class<?> parent = c.getSuperclass();",
      "info" : "VariableDeclarationStatement[23904-23940]:VariableDeclarationStatement[24080-24116]"
    }, {
      "left" : "if (parent != null)",
      "right" : "if (parent != null)",
      "info" : "IfStatement[23949-25236]:IfStatement[24125-25412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23969-25236]:Block[24145-25412]"
    }, {
      "left" : "fields = _findFields(parent, fields);",
      "right" : "fields = _findFields(parent, fields);",
      "info" : "ExpressionStatement[24192-24229]:ExpressionStatement[24368-24405]"
    }, {
      "left" : "for (Field f : c.getDeclaredFields())",
      "right" : "for (Field f : c.getDeclaredFields())",
      "info" : "EnhancedForStatement[24242-24936]:EnhancedForStatement[24418-25112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24280-24936]:Block[24456-25112]"
    }, {
      "left" : "if (!_isIncludableField(f))",
      "right" : "if (!_isIncludableField(f))",
      "info" : "IfStatement[24359-24436]:IfStatement[24535-24612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24387-24436]:Block[24563-24612]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[24409-24418]:ContinueStatement[24585-24594]"
    }, {
      "left" : "if (fields == null)",
      "right" : "if (fields == null)",
      "info" : "IfStatement[24749-24861]:IfStatement[24925-25037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24769-24861]:Block[24945-25037]"
    }, {
      "left" : "fields = new LinkedHashMap<String,AnnotatedField>();",
      "right" : "fields = new LinkedHashMap<String,AnnotatedField>();",
      "info" : "ExpressionStatement[24791-24843]:ExpressionStatement[24967-25019]"
    }, {
      "left" : "fields.put(f.getName(), _constructField(f));",
      "right" : "fields.put(f.getName(), _constructField(f));",
      "info" : "ExpressionStatement[24878-24922]:ExpressionStatement[25054-25098]"
    }, {
      "left" : "if (_mixInResolver != null)",
      "right" : "if (_mixInResolver != null)",
      "info" : "IfStatement[24998-25226]:IfStatement[25174-25402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25026-25226]:Block[25202-25402]"
    }, {
      "left" : "Class<?> mixin = _mixInResolver.findMixInClassFor(c);",
      "right" : "Class<?> mixin = _mixInResolver.findMixInClassFor(c);",
      "info" : "VariableDeclarationStatement[25044-25097]:VariableDeclarationStatement[25220-25273]"
    }, {
      "left" : "if (mixin != null)",
      "right" : "if (mixin != null)",
      "info" : "IfStatement[25114-25212]:IfStatement[25290-25388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25133-25212]:Block[25309-25388]"
    }, {
      "left" : "_addFieldMixIns(parent, mixin, fields);",
      "right" : "_addFieldMixIns(parent, mixin, fields);",
      "info" : "ExpressionStatement[25155-25194]:ExpressionStatement[25331-25370]"
    }, {
      "left" : "return fields;",
      "right" : "return fields;",
      "info" : "ReturnStatement[25245-25259]:ReturnStatement[25421-25435]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[25473-25482]:Modifier[25649-25658]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25483-25487]:PrimitiveType[25659-25663]"
    }, {
      "left" : "_addFieldMixIns",
      "right" : "_addFieldMixIns",
      "info" : "SimpleName[25488-25503]:SimpleName[25664-25679]"
    }, {
      "left" : "Class<?> targetClass",
      "right" : "Class<?> targetClass",
      "info" : "SingleVariableDeclaration[25504-25524]:SingleVariableDeclaration[25680-25700]"
    }, {
      "left" : "Class<?> mixInCls",
      "right" : "Class<?> mixInCls",
      "info" : "SingleVariableDeclaration[25526-25543]:SingleVariableDeclaration[25702-25719]"
    }, {
      "left" : "Map<String,AnnotatedField> fields",
      "right" : "Map<String,AnnotatedField> fields",
      "info" : "SingleVariableDeclaration[25557-25590]:SingleVariableDeclaration[25733-25766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25596-26410]:Block[25772-26586]"
    }, {
      "left" : "List<Class<?>> parents = new ArrayList<Class<?>>();",
      "right" : "List<Class<?>> parents = new ArrayList<Class<?>>();",
      "info" : "VariableDeclarationStatement[25606-25657]:VariableDeclarationStatement[25782-25833]"
    }, {
      "left" : "parents.add(mixInCls);",
      "right" : "parents.add(mixInCls);",
      "info" : "ExpressionStatement[25666-25688]:ExpressionStatement[25842-25864]"
    }, {
      "left" : "ClassUtil.findSuperTypes(mixInCls, targetClass, parents);",
      "right" : "ClassUtil.findSuperTypes(mixInCls, targetClass, parents);",
      "info" : "ExpressionStatement[25697-25754]:ExpressionStatement[25873-25930]"
    }, {
      "left" : "for (Class<?> mixin : parents)",
      "right" : "for (Class<?> mixin : parents)",
      "info" : "EnhancedForStatement[25763-26404]:EnhancedForStatement[25939-26580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25794-26404]:Block[25970-26580]"
    }, {
      "left" : "for (Field mixinField : mixin.getDeclaredFields())",
      "right" : "for (Field mixinField : mixin.getDeclaredFields())",
      "info" : "EnhancedForStatement[25808-26394]:EnhancedForStatement[25984-26570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25859-26394]:Block[26035-26570]"
    }, {
      "left" : "if (!_isIncludableField(mixinField))",
      "right" : "if (!_isIncludableField(mixinField))",
      "info" : "IfStatement[25959-26045]:IfStatement[26135-26221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25996-26045]:Block[26172-26221]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[26018-26027]:ContinueStatement[26194-26203]"
    }, {
      "left" : "String name = mixinField.getName();",
      "right" : "String name = mixinField.getName();",
      "info" : "VariableDeclarationStatement[26062-26097]:VariableDeclarationStatement[26238-26273]"
    }, {
      "left" : "AnnotatedField maskedField = fields.get(name);",
      "right" : "AnnotatedField maskedField = fields.get(name);",
      "info" : "VariableDeclarationStatement[26176-26222]:VariableDeclarationStatement[26352-26398]"
    }, {
      "left" : "if (maskedField != null)",
      "right" : "if (maskedField != null)",
      "info" : "IfStatement[26239-26380]:IfStatement[26415-26556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26264-26380]:Block[26440-26556]"
    }, {
      "left" : "_addOrOverrideAnnotations(maskedField, mixinField.getDeclaredAnnotations());",
      "right" : "_addOrOverrideAnnotations(maskedField, mixinField.getDeclaredAnnotations());",
      "info" : "ExpressionStatement[26286-26362]:ExpressionStatement[26462-26538]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[26608-26617]:Modifier[26784-26793]"
    }, {
      "left" : "AnnotatedMethod",
      "right" : "AnnotatedMethod",
      "info" : "SimpleType[26618-26633]:SimpleType[26794-26809]"
    }, {
      "left" : "_constructMethod",
      "right" : "_constructMethod",
      "info" : "SimpleName[26634-26650]:SimpleName[26810-26826]"
    }, {
      "left" : "Method m",
      "right" : "Method m",
      "info" : "SingleVariableDeclaration[26651-26659]:SingleVariableDeclaration[26827-26835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26665-27136]:Block[26841-27312]"
    }, {
      "left" : "if (_annotationIntrospector == null)",
      "right" : "if (_annotationIntrospector == null)",
      "info" : "IfStatement[26866-27028]:IfStatement[27042-27204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26903-27028]:Block[27079-27204]"
    }, {
      "left" : "return new AnnotatedMethod(m, _emptyAnnotationMap(), null);",
      "right" : "return new AnnotatedMethod(m, _emptyAnnotationMap(), null);",
      "info" : "ReturnStatement[26959-27018]:ReturnStatement[27135-27194]"
    }, {
      "left" : "return new AnnotatedMethod(m, _collectRelevantAnnotations(m.getDeclaredAnnotations()), null);",
      "right" : "return new AnnotatedMethod(m, _collectRelevantAnnotations(m.getDeclaredAnnotations()), null);",
      "info" : "ReturnStatement[27037-27130]:ReturnStatement[27213-27306]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[27142-27151]:Modifier[27318-27327]"
    }, {
      "left" : "AnnotatedConstructor",
      "right" : "AnnotatedConstructor",
      "info" : "SimpleType[27152-27172]:SimpleType[27328-27348]"
    }, {
      "left" : "_constructConstructor",
      "right" : "_constructConstructor",
      "info" : "SimpleName[27173-27194]:SimpleName[27349-27370]"
    }, {
      "left" : "Constructor<?> ctor",
      "right" : "Constructor<?> ctor",
      "info" : "SingleVariableDeclaration[27195-27214]:SingleVariableDeclaration[27371-27390]"
    }, {
      "left" : "boolean defaultCtor",
      "right" : "boolean defaultCtor",
      "info" : "SingleVariableDeclaration[27216-27235]:SingleVariableDeclaration[27392-27411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27241-29888]:Block[27417-30064]"
    }, {
      "left" : "if (_annotationIntrospector == null)",
      "right" : "if (_annotationIntrospector == null)",
      "info" : "IfStatement[27251-27470]:IfStatement[27427-27646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27288-27470]:Block[27464-27646]"
    }, {
      "left" : "return new AnnotatedConstructor(ctor, _emptyAnnotationMap(), _emptyAnnotationMaps(ctor.getParameterTypes().length));",
      "right" : "return new AnnotatedConstructor(ctor, _emptyAnnotationMap(), _emptyAnnotationMaps(ctor.getParameterTypes().length));",
      "info" : "ReturnStatement[27344-27460]:ReturnStatement[27520-27636]"
    }, {
      "left" : "if (defaultCtor)",
      "right" : "if (defaultCtor)",
      "info" : "IfStatement[27479-27624]:IfStatement[27655-27800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27496-27624]:Block[27672-27800]"
    }, {
      "left" : "return new AnnotatedConstructor(ctor, _collectRelevantAnnotations(ctor.getDeclaredAnnotations()), null);",
      "right" : "return new AnnotatedConstructor(ctor, _collectRelevantAnnotations(ctor.getDeclaredAnnotations()), null);",
      "info" : "ReturnStatement[27510-27614]:ReturnStatement[27686-27790]"
    }, {
      "left" : "Annotation[][] paramAnns = ctor.getParameterAnnotations();",
      "right" : "Annotation[][] paramAnns = ctor.getParameterAnnotations();",
      "info" : "VariableDeclarationStatement[27633-27691]:VariableDeclarationStatement[27809-27867]"
    }, {
      "left" : "int paramCount = ctor.getParameterTypes().length;",
      "right" : "int paramCount = ctor.getParameterTypes().length;",
      "info" : "VariableDeclarationStatement[27700-27749]:VariableDeclarationStatement[27876-27925]"
    }, {
      "left" : "AnnotationMap[] resolvedAnnotations = null;",
      "right" : "AnnotationMap[] resolvedAnnotations = null;",
      "info" : "VariableDeclarationStatement[28071-28114]:VariableDeclarationStatement[28247-28290]"
    }, {
      "left" : "if (paramCount != paramAnns.length)",
      "right" : "if (paramCount != paramAnns.length)",
      "info" : "IfStatement[28123-29738]:IfStatement[28299-29914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28159-29647]:Block[28335-29823]"
    }, {
      "left" : "Class<?> dc = ctor.getDeclaringClass();",
      "right" : "Class<?> dc = ctor.getDeclaringClass();",
      "info" : "VariableDeclarationStatement[28320-28359]:VariableDeclarationStatement[28496-28535]"
    }, {
      "left" : "if (dc.isEnum() && (paramCount == paramAnns.length + 2))",
      "right" : "if (dc.isEnum() && (paramCount == paramAnns.length + 2))",
      "info" : "IfStatement[28449-29346]:IfStatement[28625-29522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28506-28775]:Block[28682-28951]"
    }, {
      "left" : "Annotation[][] old = paramAnns;",
      "right" : "Annotation[][] old = paramAnns;",
      "info" : "VariableDeclarationStatement[28524-28555]:VariableDeclarationStatement[28700-28731]"
    }, {
      "left" : "paramAnns = new Annotation[old.length+2][];",
      "right" : "paramAnns = new Annotation[old.length+2][];",
      "info" : "ExpressionStatement[28572-28615]:ExpressionStatement[28748-28791]"
    }, {
      "left" : "System.arraycopy(old, 0, paramAnns, 2, old.length);",
      "right" : "System.arraycopy(old, 0, paramAnns, 2, old.length);",
      "info" : "ExpressionStatement[28632-28683]:ExpressionStatement[28808-28859]"
    }, {
      "left" : "resolvedAnnotations = _collectRelevantAnnotations(paramAnns);",
      "right" : "resolvedAnnotations = _collectRelevantAnnotations(paramAnns);",
      "info" : "ExpressionStatement[28700-28761]:ExpressionStatement[28876-28937]"
    }, {
      "left" : "if (dc.isMemberClass())",
      "right" : "if (dc.isMemberClass())",
      "info" : "IfStatement[28781-29346]:IfStatement[28957-29522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28805-29346]:Block[28981-29522]"
    }, {
      "left" : "if (paramCount == (paramAnns.length + 1))",
      "right" : "if (paramCount == (paramAnns.length + 1))",
      "info" : "IfStatement[28923-29332]:IfStatement[29099-29508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28965-29332]:Block[29141-29508]"
    }, {
      "left" : "Annotation[][] old = paramAnns;",
      "right" : "Annotation[][] old = paramAnns;",
      "info" : "VariableDeclarationStatement[29065-29096]:VariableDeclarationStatement[29241-29272]"
    }, {
      "left" : "paramAnns = new Annotation[old.length+1][];",
      "right" : "paramAnns = new Annotation[old.length+1][];",
      "info" : "ExpressionStatement[29117-29160]:ExpressionStatement[29293-29336]"
    }, {
      "left" : "System.arraycopy(old, 0, paramAnns, 1, old.length);",
      "right" : "System.arraycopy(old, 0, paramAnns, 1, old.length);",
      "info" : "ExpressionStatement[29181-29232]:ExpressionStatement[29357-29408]"
    }, {
      "left" : "resolvedAnnotations = _collectRelevantAnnotations(paramAnns);",
      "right" : "resolvedAnnotations = _collectRelevantAnnotations(paramAnns);",
      "info" : "ExpressionStatement[29253-29314]:ExpressionStatement[29429-29490]"
    }, {
      "left" : "if (resolvedAnnotations == null)",
      "right" : "if (resolvedAnnotations == null)",
      "info" : "IfStatement[29359-29637]:IfStatement[29535-29813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29392-29637]:Block[29568-29813]"
    }, {
      "left" : "throw new IllegalStateException(\"Internal error: constructor for \"+ctor.getDeclaringClass().getName()\n                        +\" has mismatch: \"+paramCount+\" parameters; \"+paramAnns.length+\" sets of annotations\");",
      "right" : "throw new IllegalStateException(\"Internal error: constructor for \"+ctor.getDeclaringClass().getName()\n                        +\" has mismatch: \"+paramCount+\" parameters; \"+paramAnns.length+\" sets of annotations\");",
      "info" : "ThrowStatement[29410-29623]:ThrowStatement[29586-29799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29653-29738]:Block[29829-29914]"
    }, {
      "left" : "resolvedAnnotations = _collectRelevantAnnotations(paramAnns);",
      "right" : "resolvedAnnotations = _collectRelevantAnnotations(paramAnns);",
      "info" : "ExpressionStatement[29667-29728]:ExpressionStatement[29843-29904]"
    }, {
      "left" : "return new AnnotatedConstructor(ctor, _collectRelevantAnnotations(ctor.getDeclaredAnnotations()),\n                resolvedAnnotations);",
      "right" : "return new AnnotatedConstructor(ctor, _collectRelevantAnnotations(ctor.getDeclaredAnnotations()),\n                resolvedAnnotations);",
      "info" : "ReturnStatement[29747-29882]:ReturnStatement[29923-30058]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[29894-29903]:Modifier[30070-30079]"
    }, {
      "left" : "AnnotatedMethod",
      "right" : "AnnotatedMethod",
      "info" : "SimpleType[29904-29919]:SimpleType[30080-30095]"
    }, {
      "left" : "_constructCreatorMethod",
      "right" : "_constructCreatorMethod",
      "info" : "SimpleName[29920-29943]:SimpleName[30096-30119]"
    }, {
      "left" : "Method m",
      "right" : "Method m",
      "info" : "SingleVariableDeclaration[29944-29952]:SingleVariableDeclaration[30120-30128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29958-30371]:Block[30134-30547]"
    }, {
      "left" : "if (_annotationIntrospector == null)",
      "right" : "if (_annotationIntrospector == null)",
      "info" : "IfStatement[29968-30176]:IfStatement[30144-30352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30005-30176]:Block[30181-30352]"
    }, {
      "left" : "return new AnnotatedMethod(m, _emptyAnnotationMap(), _emptyAnnotationMaps(m.getParameterTypes().length));",
      "right" : "return new AnnotatedMethod(m, _emptyAnnotationMap(), _emptyAnnotationMaps(m.getParameterTypes().length));",
      "info" : "ReturnStatement[30061-30166]:ReturnStatement[30237-30342]"
    }, {
      "left" : "return new AnnotatedMethod(m, _collectRelevantAnnotations(m.getDeclaredAnnotations()),\n                                   _collectRelevantAnnotations(m.getParameterAnnotations()));",
      "right" : "return new AnnotatedMethod(m, _collectRelevantAnnotations(m.getDeclaredAnnotations()),\n                                   _collectRelevantAnnotations(m.getParameterAnnotations()));",
      "info" : "ReturnStatement[30185-30365]:ReturnStatement[30361-30541]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[30377-30386]:Modifier[30553-30562]"
    }, {
      "left" : "AnnotatedField",
      "right" : "AnnotatedField",
      "info" : "SimpleType[30387-30401]:SimpleType[30563-30577]"
    }, {
      "left" : "_constructField",
      "right" : "_constructField",
      "info" : "SimpleName[30402-30417]:SimpleName[30578-30593]"
    }, {
      "left" : "Field f",
      "right" : "Field f",
      "info" : "SingleVariableDeclaration[30418-30425]:SingleVariableDeclaration[30594-30601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30431-30697]:Block[30607-30873]"
    }, {
      "left" : "if (_annotationIntrospector == null)",
      "right" : "if (_annotationIntrospector == null)",
      "info" : "IfStatement[30441-30596]:IfStatement[30617-30772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30478-30596]:Block[30654-30772]"
    }, {
      "left" : "return new AnnotatedField(f, _emptyAnnotationMap());",
      "right" : "return new AnnotatedField(f, _emptyAnnotationMap());",
      "info" : "ReturnStatement[30534-30586]:ReturnStatement[30710-30762]"
    }, {
      "left" : "return new AnnotatedField(f, _collectRelevantAnnotations(f.getDeclaredAnnotations()));",
      "right" : "return new AnnotatedField(f, _collectRelevantAnnotations(f.getDeclaredAnnotations()));",
      "info" : "ReturnStatement[30605-30691]:ReturnStatement[30781-30867]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30704-30711]:Modifier[30880-30887]"
    }, {
      "left" : "AnnotationMap",
      "right" : "AnnotationMap",
      "info" : "SimpleType[30712-30725]:SimpleType[30888-30901]"
    }, {
      "left" : "_emptyAnnotationMap",
      "right" : "_emptyAnnotationMap",
      "info" : "SimpleName[30726-30745]:SimpleName[30902-30921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30748-30791]:Block[30924-30967]"
    }, {
      "left" : "return new AnnotationMap();",
      "right" : "return new AnnotationMap();",
      "info" : "ReturnStatement[30758-30785]:ReturnStatement[30934-30961]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30797-30804]:Modifier[30973-30980]"
    }, {
      "left" : "AnnotationMap[]",
      "right" : "AnnotationMap[]",
      "info" : "ArrayType[30805-30820]:ArrayType[30981-30996]"
    }, {
      "left" : "_emptyAnnotationMaps",
      "right" : "_emptyAnnotationMaps",
      "info" : "SimpleName[30821-30841]:SimpleName[30997-31017]"
    }, {
      "left" : "int count",
      "right" : "int count",
      "info" : "SingleVariableDeclaration[30842-30851]:SingleVariableDeclaration[31018-31027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30853-31110]:Block[31029-31286]"
    }, {
      "left" : "if (count == 0)",
      "right" : "if (count == 0)",
      "info" : "IfStatement[30863-30929]:IfStatement[31039-31105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30879-30929]:Block[31055-31105]"
    }, {
      "left" : "return NO_ANNOTATION_MAPS;",
      "right" : "return NO_ANNOTATION_MAPS;",
      "info" : "ReturnStatement[30893-30919]:ReturnStatement[31069-31095]"
    }, {
      "left" : "AnnotationMap[] maps = new AnnotationMap[count];",
      "right" : "AnnotationMap[] maps = new AnnotationMap[count];",
      "info" : "VariableDeclarationStatement[30938-30986]:VariableDeclarationStatement[31114-31162]"
    }, {
      "left" : "for (int i = 0; i < count; ++i)",
      "right" : "for (int i = 0; i < count; ++i)",
      "info" : "ForStatement[30995-31083]:ForStatement[31171-31259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31027-31083]:Block[31203-31259]"
    }, {
      "left" : "maps[i] = _emptyAnnotationMap();",
      "right" : "maps[i] = _emptyAnnotationMap();",
      "info" : "ExpressionStatement[31041-31073]:ExpressionStatement[31217-31249]"
    }, {
      "left" : "return maps;",
      "right" : "return maps;",
      "info" : "ReturnStatement[31092-31104]:ReturnStatement[31268-31280]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[31307-31316]:Modifier[31483-31492]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[31317-31324]:PrimitiveType[31493-31500]"
    }, {
      "left" : "_isIncludableMemberMethod",
      "right" : "_isIncludableMemberMethod",
      "info" : "SimpleName[31325-31350]:SimpleName[31501-31526]"
    }, {
      "left" : "Method m",
      "right" : "Method m",
      "info" : "SingleVariableDeclaration[31351-31359]:SingleVariableDeclaration[31527-31535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31365-31886]:Block[31541-32062]"
    }, {
      "left" : "if (Modifier.isStatic(m.getModifiers()))",
      "right" : "if (Modifier.isStatic(m.getModifiers()))",
      "info" : "IfStatement[31375-31453]:IfStatement[31551-31629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31416-31453]:Block[31592-31629]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[31430-31443]:ReturnStatement[31606-31619]"
    }, {
      "left" : "if (m.isSynthetic() || m.isBridge())",
      "right" : "if (m.isSynthetic() || m.isBridge())",
      "info" : "IfStatement[31647-31721]:IfStatement[31823-31897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31684-31721]:Block[31860-31897]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[31698-31711]:ReturnStatement[31874-31887]"
    }, {
      "left" : "int pcount = m.getParameterTypes().length;",
      "right" : "int pcount = m.getParameterTypes().length;",
      "info" : "VariableDeclarationStatement[31808-31850]:VariableDeclarationStatement[31984-32026]"
    }, {
      "left" : "return (pcount <= 2);",
      "right" : "return (pcount <= 2);",
      "info" : "ReturnStatement[31859-31880]:ReturnStatement[32035-32056]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31892-31899]:Modifier[32068-32075]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[31900-31907]:PrimitiveType[32076-32083]"
    }, {
      "left" : "_isIncludableField",
      "right" : "_isIncludableField",
      "info" : "SimpleName[31908-31926]:SimpleName[32084-32102]"
    }, {
      "left" : "Field f",
      "right" : "Field f",
      "info" : "SingleVariableDeclaration[31927-31934]:SingleVariableDeclaration[32103-32110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31940-32349]:Block[32116-32525]"
    }, {
      "left" : "if (f.isSynthetic())",
      "right" : "if (f.isSynthetic())",
      "info" : "IfStatement[32063-32121]:IfStatement[32239-32297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32084-32121]:Block[32260-32297]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32098-32111]:ReturnStatement[32274-32287]"
    }, {
      "left" : "int mods = f.getModifiers();",
      "right" : "int mods = f.getModifiers();",
      "info" : "VariableDeclarationStatement[32189-32217]:VariableDeclarationStatement[32365-32393]"
    }, {
      "left" : "if (Modifier.isStatic(mods) || Modifier.isTransient(mods))",
      "right" : "if (Modifier.isStatic(mods) || Modifier.isTransient(mods))",
      "info" : "IfStatement[32226-32322]:IfStatement[32402-32498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32285-32322]:Block[32461-32498]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32299-32312]:ReturnStatement[32475-32488]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[32331-32343]:ReturnStatement[32507-32519]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[32544-32553]:Modifier[32720-32729]"
    }, {
      "left" : "AnnotationMap[]",
      "right" : "AnnotationMap[]",
      "info" : "ArrayType[32554-32569]:ArrayType[32730-32745]"
    }, {
      "left" : "_collectRelevantAnnotations",
      "right" : "_collectRelevantAnnotations",
      "info" : "SimpleName[32570-32597]:SimpleName[32746-32773]"
    }, {
      "left" : "Annotation[][] anns",
      "right" : "Annotation[][] anns",
      "info" : "SingleVariableDeclaration[32598-32617]:SingleVariableDeclaration[32774-32793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32623-32853]:Block[32799-33029]"
    }, {
      "left" : "int len = anns.length;",
      "right" : "int len = anns.length;",
      "info" : "VariableDeclarationStatement[32633-32655]:VariableDeclarationStatement[32809-32831]"
    }, {
      "left" : "AnnotationMap[] result = new AnnotationMap[len];",
      "right" : "AnnotationMap[] result = new AnnotationMap[len];",
      "info" : "VariableDeclarationStatement[32664-32712]:VariableDeclarationStatement[32840-32888]"
    }, {
      "left" : "for (int i = 0; i < len; ++i)",
      "right" : "for (int i = 0; i < len; ++i)",
      "info" : "ForStatement[32721-32824]:ForStatement[32897-33000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32751-32824]:Block[32927-33000]"
    }, {
      "left" : "result[i] = _collectRelevantAnnotations(anns[i]);",
      "right" : "result[i] = _collectRelevantAnnotations(anns[i]);",
      "info" : "ExpressionStatement[32765-32814]:ExpressionStatement[32941-32990]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[32833-32847]:ReturnStatement[33009-33023]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[32859-32868]:Modifier[33035-33044]"
    }, {
      "left" : "AnnotationMap",
      "right" : "AnnotationMap",
      "info" : "SimpleType[32869-32882]:SimpleType[33045-33058]"
    }, {
      "left" : "_collectRelevantAnnotations",
      "right" : "_collectRelevantAnnotations",
      "info" : "SimpleName[32883-32910]:SimpleName[33059-33086]"
    }, {
      "left" : "Annotation[] anns",
      "right" : "Annotation[] anns",
      "info" : "SingleVariableDeclaration[32911-32928]:SingleVariableDeclaration[33087-33104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32934-33067]:Block[33110-33243]"
    }, {
      "left" : "AnnotationMap annMap = new AnnotationMap();",
      "right" : "AnnotationMap annMap = new AnnotationMap();",
      "info" : "VariableDeclarationStatement[32944-32987]:VariableDeclarationStatement[33120-33163]"
    }, {
      "left" : "_addAnnotationsIfNotPresent(annMap, anns);",
      "right" : "_addAnnotationsIfNotPresent(annMap, anns);",
      "info" : "ExpressionStatement[32996-33038]:ExpressionStatement[33172-33214]"
    }, {
      "left" : "return annMap;",
      "right" : "return annMap;",
      "info" : "ReturnStatement[33047-33061]:ReturnStatement[33223-33237]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[33287-33294]:Modifier[33463-33470]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[33295-33299]:PrimitiveType[33471-33475]"
    }, {
      "left" : "_addAnnotationsIfNotPresent",
      "right" : "_addAnnotationsIfNotPresent",
      "info" : "SimpleName[33300-33327]:SimpleName[33476-33503]"
    }, {
      "left" : "AnnotationMap result",
      "right" : "AnnotationMap result",
      "info" : "SingleVariableDeclaration[33328-33348]:SingleVariableDeclaration[33504-33524]"
    }, {
      "left" : "Annotation[] anns",
      "right" : "Annotation[] anns",
      "info" : "SingleVariableDeclaration[33350-33367]:SingleVariableDeclaration[33526-33543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33373-34225]:Block[33549-34401]"
    }, {
      "left" : "if (anns != null)",
      "right" : "if (anns != null)",
      "info" : "IfStatement[33383-34219]:IfStatement[33559-34395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33401-34219]:Block[33577-34395]"
    }, {
      "left" : "List<Annotation[]> bundles = null;",
      "right" : "List<Annotation[]> bundles = null;",
      "info" : "VariableDeclarationStatement[33415-33449]:VariableDeclarationStatement[33591-33625]"
    }, {
      "left" : "for (Annotation ann : anns)",
      "right" : "for (Annotation ann : anns)",
      "info" : "EnhancedForStatement[33462-33943]:EnhancedForStatement[33638-34119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33490-33943]:Block[33666-34119]"
    }, {
      "left" : "if (_isAnnotationBundle(ann))",
      "right" : "if (_isAnnotationBundle(ann))",
      "info" : "IfStatement[33537-33929]:IfStatement[33713-34105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33567-33797]:Block[33743-33973]"
    }, {
      "left" : "if (bundles == null)",
      "right" : "if (bundles == null)",
      "info" : "IfStatement[33589-33699]:IfStatement[33765-33875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33610-33699]:Block[33786-33875]"
    }, {
      "left" : "bundles = new LinkedList<Annotation[]>();",
      "right" : "bundles = new LinkedList<Annotation[]>();",
      "info" : "ExpressionStatement[33636-33677]:ExpressionStatement[33812-33853]"
    }, {
      "left" : "bundles.add(ann.annotationType().getDeclaredAnnotations());",
      "right" : "bundles.add(ann.annotationType().getDeclaredAnnotations());",
      "info" : "ExpressionStatement[33720-33779]:ExpressionStatement[33896-33955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33803-33929]:Block[33979-34105]"
    }, {
      "left" : "result.addIfNotPresent(ann);",
      "right" : "result.addIfNotPresent(ann);",
      "info" : "ExpressionStatement[33883-33911]:ExpressionStatement[34059-34087]"
    }, {
      "left" : "if (bundles != null)",
      "right" : "if (bundles != null)",
      "info" : "IfStatement[33956-34209]:IfStatement[34132-34385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33977-34209]:Block[34153-34385]"
    }, {
      "left" : "for (Annotation[] annotations : bundles)",
      "right" : "for (Annotation[] annotations : bundles)",
      "info" : "EnhancedForStatement[34065-34195]:EnhancedForStatement[34241-34371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34106-34195]:Block[34282-34371]"
    }, {
      "left" : "_addAnnotationsIfNotPresent(result, annotations);",
      "right" : "_addAnnotationsIfNotPresent(result, annotations);",
      "info" : "ExpressionStatement[34128-34177]:ExpressionStatement[34304-34353]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34231-34238]:Modifier[34407-34414]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34239-34243]:PrimitiveType[34415-34419]"
    }, {
      "left" : "_addAnnotationsIfNotPresent",
      "right" : "_addAnnotationsIfNotPresent",
      "info" : "SimpleName[34244-34271]:SimpleName[34420-34447]"
    }, {
      "left" : "AnnotatedMember target",
      "right" : "AnnotatedMember target",
      "info" : "SingleVariableDeclaration[34272-34294]:SingleVariableDeclaration[34448-34470]"
    }, {
      "left" : "Annotation[] anns",
      "right" : "Annotation[] anns",
      "info" : "SingleVariableDeclaration[34296-34313]:SingleVariableDeclaration[34472-34489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34319-35171]:Block[34495-35347]"
    }, {
      "left" : "if (anns != null)",
      "right" : "if (anns != null)",
      "info" : "IfStatement[34329-35165]:IfStatement[34505-35341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34347-35165]:Block[34523-35341]"
    }, {
      "left" : "List<Annotation[]> bundles = null;",
      "right" : "List<Annotation[]> bundles = null;",
      "info" : "VariableDeclarationStatement[34361-34395]:VariableDeclarationStatement[34537-34571]"
    }, {
      "left" : "for (Annotation ann : anns)",
      "right" : "for (Annotation ann : anns)",
      "info" : "EnhancedForStatement[34408-34889]:EnhancedForStatement[34584-35065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34436-34889]:Block[34612-35065]"
    }, {
      "left" : "if (_isAnnotationBundle(ann))",
      "right" : "if (_isAnnotationBundle(ann))",
      "info" : "IfStatement[34483-34875]:IfStatement[34659-35051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34513-34743]:Block[34689-34919]"
    }, {
      "left" : "if (bundles == null)",
      "right" : "if (bundles == null)",
      "info" : "IfStatement[34535-34645]:IfStatement[34711-34821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34556-34645]:Block[34732-34821]"
    }, {
      "left" : "bundles = new LinkedList<Annotation[]>();",
      "right" : "bundles = new LinkedList<Annotation[]>();",
      "info" : "ExpressionStatement[34582-34623]:ExpressionStatement[34758-34799]"
    }, {
      "left" : "bundles.add(ann.annotationType().getDeclaredAnnotations());",
      "right" : "bundles.add(ann.annotationType().getDeclaredAnnotations());",
      "info" : "ExpressionStatement[34666-34725]:ExpressionStatement[34842-34901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34749-34875]:Block[34925-35051]"
    }, {
      "left" : "target.addIfNotPresent(ann);",
      "right" : "target.addIfNotPresent(ann);",
      "info" : "ExpressionStatement[34829-34857]:ExpressionStatement[35005-35033]"
    }, {
      "left" : "if (bundles != null)",
      "right" : "if (bundles != null)",
      "info" : "IfStatement[34902-35155]:IfStatement[35078-35331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34923-35155]:Block[35099-35331]"
    }, {
      "left" : "for (Annotation[] annotations : bundles)",
      "right" : "for (Annotation[] annotations : bundles)",
      "info" : "EnhancedForStatement[35011-35141]:EnhancedForStatement[35187-35317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35052-35141]:Block[35228-35317]"
    }, {
      "left" : "_addAnnotationsIfNotPresent(target, annotations);",
      "right" : "_addAnnotationsIfNotPresent(target, annotations);",
      "info" : "ExpressionStatement[35074-35123]:ExpressionStatement[35250-35299]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35181-35188]:Modifier[35357-35364]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[35189-35193]:PrimitiveType[35365-35369]"
    }, {
      "left" : "_addOrOverrideAnnotations",
      "right" : "_addOrOverrideAnnotations",
      "info" : "SimpleName[35194-35219]:SimpleName[35370-35395]"
    }, {
      "left" : "AnnotatedMember target",
      "right" : "AnnotatedMember target",
      "info" : "SingleVariableDeclaration[35220-35242]:SingleVariableDeclaration[35396-35418]"
    }, {
      "left" : "Annotation[] anns",
      "right" : "Annotation[] anns",
      "info" : "SingleVariableDeclaration[35244-35261]:SingleVariableDeclaration[35420-35437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35267-36086]:Block[35443-36262]"
    }, {
      "left" : "if (anns != null)",
      "right" : "if (anns != null)",
      "info" : "IfStatement[35277-36080]:IfStatement[35453-36256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35295-36080]:Block[35471-36256]"
    }, {
      "left" : "List<Annotation[]> bundles = null;",
      "right" : "List<Annotation[]> bundles = null;",
      "info" : "VariableDeclarationStatement[35309-35343]:VariableDeclarationStatement[35485-35519]"
    }, {
      "left" : "for (Annotation ann : anns)",
      "right" : "for (Annotation ann : anns)",
      "info" : "EnhancedForStatement[35356-35822]:EnhancedForStatement[35532-35998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35384-35822]:Block[35560-35998]"
    }, {
      "left" : "if (_isAnnotationBundle(ann))",
      "right" : "if (_isAnnotationBundle(ann))",
      "info" : "IfStatement[35431-35808]:IfStatement[35607-35984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35461-35691]:Block[35637-35867]"
    }, {
      "left" : "if (bundles == null)",
      "right" : "if (bundles == null)",
      "info" : "IfStatement[35483-35593]:IfStatement[35659-35769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35504-35593]:Block[35680-35769]"
    }, {
      "left" : "bundles = new LinkedList<Annotation[]>();",
      "right" : "bundles = new LinkedList<Annotation[]>();",
      "info" : "ExpressionStatement[35530-35571]:ExpressionStatement[35706-35747]"
    }, {
      "left" : "bundles.add(ann.annotationType().getDeclaredAnnotations());",
      "right" : "bundles.add(ann.annotationType().getDeclaredAnnotations());",
      "info" : "ExpressionStatement[35614-35673]:ExpressionStatement[35790-35849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35697-35808]:Block[35873-35984]"
    }, {
      "left" : "target.addOrOverride(ann);",
      "right" : "target.addOrOverride(ann);",
      "info" : "ExpressionStatement[35764-35790]:ExpressionStatement[35940-35966]"
    }, {
      "left" : "if (bundles != null)",
      "right" : "if (bundles != null)",
      "info" : "IfStatement[35835-36070]:IfStatement[36011-36246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35856-36070]:Block[36032-36246]"
    }, {
      "left" : "for (Annotation[] annotations : bundles)",
      "right" : "for (Annotation[] annotations : bundles)",
      "info" : "EnhancedForStatement[35928-36056]:EnhancedForStatement[36104-36232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35969-36056]:Block[36145-36232]"
    }, {
      "left" : "_addOrOverrideAnnotations(target, annotations);",
      "right" : "_addOrOverrideAnnotations(target, annotations);",
      "info" : "ExpressionStatement[35991-36038]:ExpressionStatement[36167-36214]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[36209-36218]:Modifier[36385-36394]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36219-36223]:PrimitiveType[36395-36399]"
    }, {
      "left" : "_addMixOvers",
      "right" : "_addMixOvers",
      "info" : "SimpleName[36224-36236]:SimpleName[36400-36412]"
    }, {
      "left" : "Constructor<?> mixin",
      "right" : "Constructor<?> mixin",
      "info" : "SingleVariableDeclaration[36237-36257]:SingleVariableDeclaration[36413-36433]"
    }, {
      "left" : "AnnotatedConstructor target",
      "right" : "AnnotatedConstructor target",
      "info" : "SingleVariableDeclaration[36259-36286]:SingleVariableDeclaration[36435-36462]"
    }, {
      "left" : "boolean addParamAnnotations",
      "right" : "boolean addParamAnnotations",
      "info" : "SingleVariableDeclaration[36300-36327]:SingleVariableDeclaration[36476-36503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36333-36716]:Block[36509-36892]"
    }, {
      "left" : "_addOrOverrideAnnotations(target, mixin.getDeclaredAnnotations());",
      "right" : "_addOrOverrideAnnotations(target, mixin.getDeclaredAnnotations());",
      "info" : "ExpressionStatement[36343-36409]:ExpressionStatement[36519-36585]"
    }, {
      "left" : "if (addParamAnnotations)",
      "right" : "if (addParamAnnotations)",
      "info" : "IfStatement[36418-36710]:IfStatement[36594-36886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36443-36710]:Block[36619-36886]"
    }, {
      "left" : "Annotation[][] pa = mixin.getParameterAnnotations();",
      "right" : "Annotation[][] pa = mixin.getParameterAnnotations();",
      "info" : "VariableDeclarationStatement[36457-36509]:VariableDeclarationStatement[36633-36685]"
    }, {
      "left" : "for (int i = 0, len = pa.length; i < len; ++i)",
      "right" : "for (int i = 0, len = pa.length; i < len; ++i)",
      "info" : "ForStatement[36522-36700]:ForStatement[36698-36876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36569-36700]:Block[36745-36876]"
    }, {
      "left" : "for (Annotation a : pa[i])",
      "right" : "for (Annotation a : pa[i])",
      "info" : "EnhancedForStatement[36587-36686]:EnhancedForStatement[36763-36862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36614-36686]:Block[36790-36862]"
    }, {
      "left" : "target.addOrOverrideParam(i, a);",
      "right" : "target.addOrOverrideParam(i, a);",
      "info" : "ExpressionStatement[36636-36668]:ExpressionStatement[36812-36844]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[36835-36844]:Modifier[37011-37020]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36845-36849]:PrimitiveType[37021-37025]"
    }, {
      "left" : "_addMixOvers",
      "right" : "_addMixOvers",
      "info" : "SimpleName[36850-36862]:SimpleName[37026-37038]"
    }, {
      "left" : "Method mixin",
      "right" : "Method mixin",
      "info" : "SingleVariableDeclaration[36863-36875]:SingleVariableDeclaration[37039-37051]"
    }, {
      "left" : "AnnotatedMethod target",
      "right" : "AnnotatedMethod target",
      "info" : "SingleVariableDeclaration[36877-36899]:SingleVariableDeclaration[37053-37075]"
    }, {
      "left" : "boolean addParamAnnotations",
      "right" : "boolean addParamAnnotations",
      "info" : "SingleVariableDeclaration[36913-36940]:SingleVariableDeclaration[37089-37116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36946-37329]:Block[37122-37505]"
    }, {
      "left" : "_addOrOverrideAnnotations(target, mixin.getDeclaredAnnotations());",
      "right" : "_addOrOverrideAnnotations(target, mixin.getDeclaredAnnotations());",
      "info" : "ExpressionStatement[36956-37022]:ExpressionStatement[37132-37198]"
    }, {
      "left" : "if (addParamAnnotations)",
      "right" : "if (addParamAnnotations)",
      "info" : "IfStatement[37031-37323]:IfStatement[37207-37499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37056-37323]:Block[37232-37499]"
    }, {
      "left" : "Annotation[][] pa = mixin.getParameterAnnotations();",
      "right" : "Annotation[][] pa = mixin.getParameterAnnotations();",
      "info" : "VariableDeclarationStatement[37070-37122]:VariableDeclarationStatement[37246-37298]"
    }, {
      "left" : "for (int i = 0, len = pa.length; i < len; ++i)",
      "right" : "for (int i = 0, len = pa.length; i < len; ++i)",
      "info" : "ForStatement[37135-37313]:ForStatement[37311-37489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37182-37313]:Block[37358-37489]"
    }, {
      "left" : "for (Annotation a : pa[i])",
      "right" : "for (Annotation a : pa[i])",
      "info" : "EnhancedForStatement[37200-37299]:EnhancedForStatement[37376-37475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37227-37299]:Block[37403-37475]"
    }, {
      "left" : "target.addOrOverrideParam(i, a);",
      "right" : "target.addOrOverrideParam(i, a);",
      "info" : "ExpressionStatement[37249-37281]:ExpressionStatement[37425-37457]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[37488-37497]:Modifier[37664-37673]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[37498-37502]:PrimitiveType[37674-37678]"
    }, {
      "left" : "_addMixUnders",
      "right" : "_addMixUnders",
      "info" : "SimpleName[37503-37516]:SimpleName[37679-37692]"
    }, {
      "left" : "Method src",
      "right" : "Method src",
      "info" : "SingleVariableDeclaration[37517-37527]:SingleVariableDeclaration[37693-37703]"
    }, {
      "left" : "AnnotatedMethod target",
      "right" : "AnnotatedMethod target",
      "info" : "SingleVariableDeclaration[37529-37551]:SingleVariableDeclaration[37705-37727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37553-37635]:Block[37729-37811]"
    }, {
      "left" : "_addAnnotationsIfNotPresent(target, src.getDeclaredAnnotations());",
      "right" : "_addAnnotationsIfNotPresent(target, src.getDeclaredAnnotations());",
      "info" : "ExpressionStatement[37563-37629]:ExpressionStatement[37739-37805]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37640-37647]:Modifier[37816-37823]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[37648-37653]:Modifier[37824-37829]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[37654-37661]:PrimitiveType[37830-37837]"
    }, {
      "left" : "_isAnnotationBundle",
      "right" : "_isAnnotationBundle",
      "info" : "SimpleName[37662-37681]:SimpleName[37838-37857]"
    }, {
      "left" : "Annotation ann",
      "right" : "Annotation ann",
      "info" : "SingleVariableDeclaration[37682-37696]:SingleVariableDeclaration[37858-37872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37701-37807]:Block[37877-37983]"
    }, {
      "left" : "return (_annotationIntrospector != null) && _annotationIntrospector.isAnnotationBundle(ann);",
      "right" : "return (_annotationIntrospector != null) && _annotationIntrospector.isAnnotationBundle(ann);",
      "info" : "ReturnStatement[37710-37802]:ReturnStatement[37886-37978]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[37981-37990]:MarkerAnnotation[38157-38166]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37995-38001]:Modifier[38171-38177]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[38002-38008]:SimpleType[38178-38184]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[38009-38017]:SimpleName[38185-38193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38024-38085]:Block[38200-38261]"
    }, {
      "left" : "return \"[AnnotedClass \"+_class.getName()+\"]\";",
      "right" : "return \"[AnnotedClass \"+_class.getName()+\"]\";",
      "info" : "ReturnStatement[38034-38079]:ReturnStatement[38210-38255]"
    } ]
  },
  "interFileMappings" : { }
}