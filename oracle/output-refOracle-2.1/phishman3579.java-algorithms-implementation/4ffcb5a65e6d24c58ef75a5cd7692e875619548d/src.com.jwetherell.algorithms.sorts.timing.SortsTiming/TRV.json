{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final DecimalFormat FORMAT = new DecimalFormat(\"#.###\");",
      "right" : "private static final DecimalFormat FORMAT = new DecimalFormat(\"#.###\");",
      "info" : "FieldDeclaration[604-675]:FieldDeclaration[604-675]"
    }, {
      "left" : "private static final int SIZE = 100000;",
      "right" : "private static final int SIZE = 100000;",
      "info" : "FieldDeclaration[680-719]:FieldDeclaration[680-719]"
    }, {
      "left" : "private static final boolean showResult = false;",
      "right" : "private static final boolean showResult = false;",
      "info" : "FieldDeclaration[725-773]:FieldDeclaration[725-773]"
    }, {
      "left" : "private static final boolean showComparison = true;",
      "right" : "private static final boolean showComparison = true;",
      "info" : "FieldDeclaration[778-829]:FieldDeclaration[778-829]"
    }, {
      "left" : "private static final boolean checkResults = true;",
      "right" : "private static final boolean checkResults = true;",
      "info" : "FieldDeclaration[834-883]:FieldDeclaration[834-883]"
    }, {
      "left" : "private static int insertionCount = 0;",
      "right" : "private static int insertionCount = 0;",
      "info" : "FieldDeclaration[889-927]:FieldDeclaration[889-927]"
    }, {
      "left" : "private static final double[] insertionResults = new double[1 * 3];",
      "right" : "private static final double[] insertionResults = new double[1 * 3];",
      "info" : "FieldDeclaration[932-999]:FieldDeclaration[932-999]"
    }, {
      "left" : "private static int bubbleCount = 0;",
      "right" : "private static int bubbleCount = 0;",
      "info" : "FieldDeclaration[1004-1039]:FieldDeclaration[1004-1039]"
    }, {
      "left" : "private static final double[] bubbleResults = new double[1 * 3];",
      "right" : "private static final double[] bubbleResults = new double[1 * 3];",
      "info" : "FieldDeclaration[1044-1108]:FieldDeclaration[1044-1108]"
    }, {
      "left" : "private static int shellCount = 0;",
      "right" : "private static int shellCount = 0;",
      "info" : "FieldDeclaration[1113-1147]:FieldDeclaration[1113-1147]"
    }, {
      "left" : "private static final double[] shellResults = new double[1 * 3];",
      "right" : "private static final double[] shellResults = new double[1 * 3];",
      "info" : "FieldDeclaration[1152-1215]:FieldDeclaration[1152-1215]"
    }, {
      "left" : "private static int mergeInPlaceCount = 0;",
      "right" : "private static int mergeInPlaceCount = 0;",
      "info" : "FieldDeclaration[1220-1261]:FieldDeclaration[1220-1261]"
    }, {
      "left" : "private static final double[] mergeInPlaceResults = new double[1 * 3];",
      "right" : "private static final double[] mergeInPlaceResults = new double[1 * 3];",
      "info" : "FieldDeclaration[1266-1336]:FieldDeclaration[1266-1336]"
    }, {
      "left" : "private static int mergeNotInPlaceCount = 0;",
      "right" : "private static int mergeNotInPlaceCount = 0;",
      "info" : "FieldDeclaration[1341-1385]:FieldDeclaration[1341-1385]"
    }, {
      "left" : "private static final double[] mergeNotInPlaceResults = new double[1 * 3];",
      "right" : "private static final double[] mergeNotInPlaceResults = new double[1 * 3];",
      "info" : "FieldDeclaration[1390-1463]:FieldDeclaration[1390-1463]"
    }, {
      "left" : "private static int quickCount = 0;",
      "right" : "private static int quickCount = 0;",
      "info" : "FieldDeclaration[1468-1502]:FieldDeclaration[1468-1502]"
    }, {
      "left" : "private static final double[] quickResults = new double[3 * 3];",
      "right" : "private static final double[] quickResults = new double[3 * 3];",
      "info" : "FieldDeclaration[1507-1570]:FieldDeclaration[1507-1570]"
    }, {
      "left" : "private static int heapCount = 0;",
      "right" : "private static int heapCount = 0;",
      "info" : "FieldDeclaration[1575-1608]:FieldDeclaration[1575-1608]"
    }, {
      "left" : "private static final double[] heapResults = new double[1 * 3];",
      "right" : "private static final double[] heapResults = new double[1 * 3];",
      "info" : "FieldDeclaration[1613-1675]:FieldDeclaration[1613-1675]"
    }, {
      "left" : "private static int countingCount = 0;",
      "right" : "private static int countingCount = 0;",
      "info" : "FieldDeclaration[1680-1717]:FieldDeclaration[1680-1717]"
    }, {
      "left" : "private static final double[] countingResults = new double[1 * 3];",
      "right" : "private static final double[] countingResults = new double[1 * 3];",
      "info" : "FieldDeclaration[1722-1788]:FieldDeclaration[1722-1788]"
    }, {
      "left" : "private static int radixCount = 0;",
      "right" : "private static int radixCount = 0;",
      "info" : "FieldDeclaration[1793-1827]:FieldDeclaration[1793-1827]"
    }, {
      "left" : "private static final double[] radixResults = new double[1 * 3];",
      "right" : "private static final double[] radixResults = new double[1 * 3];",
      "info" : "FieldDeclaration[1832-1895]:FieldDeclaration[1832-1895]"
    }, {
      "left" : "private static int americanFlagCount = 0;",
      "right" : "private static int americanFlagCount = 0;",
      "info" : "FieldDeclaration[1900-1941]:FieldDeclaration[1900-1941]"
    }, {
      "left" : "private static final double[] americanFlagResults = new double[1 * 3];",
      "right" : "private static final double[] americanFlagResults = new double[1 * 3];",
      "info" : "FieldDeclaration[1946-2016]:FieldDeclaration[1946-2016]"
    }, {
      "left" : "private static final boolean showInsertion = true;",
      "right" : "private static final boolean showInsertion = true;",
      "info" : "FieldDeclaration[2022-2072]:FieldDeclaration[2022-2072]"
    }, {
      "left" : "private static final boolean showBubble = true;",
      "right" : "private static final boolean showBubble = true;",
      "info" : "FieldDeclaration[2077-2124]:FieldDeclaration[2077-2124]"
    }, {
      "left" : "private static final boolean showShell = true;",
      "right" : "private static final boolean showShell = true;",
      "info" : "FieldDeclaration[2129-2175]:FieldDeclaration[2129-2175]"
    }, {
      "left" : "private static final boolean showMergeInPlace = true;",
      "right" : "private static final boolean showMergeInPlace = true;",
      "info" : "FieldDeclaration[2180-2233]:FieldDeclaration[2180-2233]"
    }, {
      "left" : "private static final boolean showMergeNotInPlace = true;",
      "right" : "private static final boolean showMergeNotInPlace = true;",
      "info" : "FieldDeclaration[2238-2294]:FieldDeclaration[2238-2294]"
    }, {
      "left" : "private static final boolean showQuick = true;",
      "right" : "private static final boolean showQuick = true;",
      "info" : "FieldDeclaration[2299-2345]:FieldDeclaration[2299-2345]"
    }, {
      "left" : "private static final boolean showHeap = true;",
      "right" : "private static final boolean showHeap = true;",
      "info" : "FieldDeclaration[2350-2395]:FieldDeclaration[2350-2395]"
    }, {
      "left" : "private static final boolean showCounting = true;",
      "right" : "private static final boolean showCounting = true;",
      "info" : "FieldDeclaration[2400-2449]:FieldDeclaration[2400-2449]"
    }, {
      "left" : "private static final boolean showRadix = true;",
      "right" : "private static final boolean showRadix = true;",
      "info" : "FieldDeclaration[2454-2500]:FieldDeclaration[2454-2500]"
    }, {
      "left" : "private static final boolean showAmericanFlag = true;",
      "right" : "private static final boolean showAmericanFlag = true;",
      "info" : "FieldDeclaration[2505-2558]:FieldDeclaration[2505-2558]"
    }, {
      "left" : "private static Integer[] unsorted = null;",
      "right" : "private static Integer[] unsorted = null;",
      "info" : "FieldDeclaration[2564-2605]:FieldDeclaration[2564-2605]"
    }, {
      "left" : "private static Integer[] sorted = null;",
      "right" : "private static Integer[] sorted = null;",
      "info" : "FieldDeclaration[2610-2649]:FieldDeclaration[2610-2649]"
    }, {
      "left" : "private static Integer[] reverse = null;",
      "right" : "private static Integer[] reverse = null;",
      "info" : "FieldDeclaration[2654-2694]:FieldDeclaration[2654-2694]"
    }, {
      "left" : "private static final void showComparison()",
      "right" : "private static final void showComparison()",
      "info" : "MethodDeclaration[27063-30026]:MethodDeclaration[27243-30206]"
    }, {
      "left" : "private static final void showResult(Integer[] u, Integer[] r)",
      "right" : "private static final void showResult(Integer[] u, Integer[] r)",
      "info" : "MethodDeclaration[30032-30234]:MethodDeclaration[30212-30414]"
    }, {
      "left" : "private static final boolean check(Integer[] array)",
      "right" : "private static final boolean check(Integer[] array)",
      "info" : "MethodDeclaration[30240-30450]:MethodDeclaration[30420-30630]"
    }, {
      "left" : "public static final String print(Integer[] array)",
      "right" : "public static final String print(Integer[] array)",
      "info" : "MethodDeclaration[30456-30559]:MethodDeclaration[30636-30739]"
    }, {
      "left" : "public static final String print(Integer[] array, int start, int length)",
      "right" : "public static final String print(Integer[] array, int start, int length)",
      "info" : "MethodDeclaration[30565-30908]:MethodDeclaration[30745-31088]"
    }, {
      "left" : "public static final String printWithPivot(Integer[] array, int pivotIndex, int start, int length)",
      "right" : "public static final String printWithPivot(Integer[] array, int pivotIndex, int start, int length)",
      "info" : "MethodDeclaration[30914-31384]:MethodDeclaration[31094-31564]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27106-30026]:Block[27286-30206]"
    }, {
      "left" : "System.out.println(\"Algorithm\\t\\t\\tRandom\\tSorted\\tReverse Sorted\");",
      "right" : "System.out.println(\"Algorithm\\t\\t\\tRandom\\tSorted\\tReverse Sorted\");",
      "info" : "ExpressionStatement[27116-27184]:ExpressionStatement[27296-27364]"
    }, {
      "left" : "if (showInsertion)",
      "right" : "if (showInsertion)",
      "info" : "IfStatement[27193-27433]:IfStatement[27373-27613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27212-27433]:Block[27392-27613]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[27226-27236]:VariableDeclarationStatement[27406-27416]"
    }, {
      "left" : "System.out.println(\"Insertion sort\\t\\t\\t\" + FORMAT.format(insertionResults[i++]) + \"\\t\" + FORMAT.format(insertionResults[i++]) + \"\\t\" + FORMAT.format(insertionResults[i++]));",
      "right" : "System.out.println(\"Insertion sort\\t\\t\\t\" + FORMAT.format(insertionResults[i++]) + \"\\t\" + FORMAT.format(insertionResults[i++]) + \"\\t\" + FORMAT.format(insertionResults[i++]));",
      "info" : "ExpressionStatement[27249-27423]:ExpressionStatement[27429-27603]"
    }, {
      "left" : "if (showBubble)",
      "right" : "if (showBubble)",
      "info" : "IfStatement[27442-27667]:IfStatement[27622-27847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27458-27667]:Block[27638-27847]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[27472-27482]:VariableDeclarationStatement[27652-27662]"
    }, {
      "left" : "System.out.println(\"Bubble sort\\t\\t\\t\" + FORMAT.format(bubbleResults[i++]) + \"\\t\" + FORMAT.format(bubbleResults[i++]) + \"\\t\" + FORMAT.format(bubbleResults[i++]));",
      "right" : "System.out.println(\"Bubble sort\\t\\t\\t\" + FORMAT.format(bubbleResults[i++]) + \"\\t\" + FORMAT.format(bubbleResults[i++]) + \"\\t\" + FORMAT.format(bubbleResults[i++]));",
      "info" : "ExpressionStatement[27495-27657]:ExpressionStatement[27675-27837]"
    }, {
      "left" : "if (showShell)",
      "right" : "if (showShell)",
      "info" : "IfStatement[27676-27896]:IfStatement[27856-28076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27691-27896]:Block[27871-28076]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[27705-27715]:VariableDeclarationStatement[27885-27895]"
    }, {
      "left" : "System.out.println(\"Shell sort\\t\\t\\t\" + FORMAT.format(shellResults[i++]) + \"\\t\" + FORMAT.format(shellResults[i++]) + \"\\t\" + FORMAT.format(shellResults[i++]));",
      "right" : "System.out.println(\"Shell sort\\t\\t\\t\" + FORMAT.format(shellResults[i++]) + \"\\t\" + FORMAT.format(shellResults[i++]) + \"\\t\" + FORMAT.format(shellResults[i++]));",
      "info" : "ExpressionStatement[27728-27886]:ExpressionStatement[27908-28066]"
    }, {
      "left" : "if (showMergeInPlace)",
      "right" : "if (showMergeInPlace)",
      "info" : "IfStatement[27905-28162]:IfStatement[28085-28342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27927-28162]:Block[28107-28342]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[27941-27951]:VariableDeclarationStatement[28121-28131]"
    }, {
      "left" : "System.out.println(\"Merge (in-place) sort\\t\\t\" + FORMAT.format(mergeInPlaceResults[i++]) + \"\\t\" + FORMAT.format(mergeInPlaceResults[i++]) + \"\\t\" + FORMAT.format(mergeInPlaceResults[i++]));",
      "right" : "System.out.println(\"Merge (in-place) sort\\t\\t\" + FORMAT.format(mergeInPlaceResults[i++]) + \"\\t\" + FORMAT.format(mergeInPlaceResults[i++]) + \"\\t\" + FORMAT.format(mergeInPlaceResults[i++]));",
      "info" : "ExpressionStatement[27964-28152]:ExpressionStatement[28144-28332]"
    }, {
      "left" : "if (showMergeNotInPlace)",
      "right" : "if (showMergeNotInPlace)",
      "info" : "IfStatement[28171-28442]:IfStatement[28351-28622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28196-28442]:Block[28376-28622]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[28210-28220]:VariableDeclarationStatement[28390-28400]"
    }, {
      "left" : "System.out.println(\"Merge (not-in-place) sort\\t\" + FORMAT.format(mergeNotInPlaceResults[i++]) + \"\\t\" + FORMAT.format(mergeNotInPlaceResults[i++]) + \"\\t\" + FORMAT.format(mergeNotInPlaceResults[i++]));",
      "right" : "System.out.println(\"Merge (not-in-place) sort\\t\" + FORMAT.format(mergeNotInPlaceResults[i++]) + \"\\t\" + FORMAT.format(mergeNotInPlaceResults[i++]) + \"\\t\" + FORMAT.format(mergeNotInPlaceResults[i++]));",
      "info" : "ExpressionStatement[28233-28432]:ExpressionStatement[28413-28612]"
    }, {
      "left" : "if (showQuick)",
      "right" : "if (showQuick)",
      "info" : "IfStatement[28451-29060]:IfStatement[28631-29240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28466-29060]:Block[28646-29240]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[28480-28490]:VariableDeclarationStatement[28660-28670]"
    }, {
      "left" : "System.out.println(\"Quicksort with first as pivot\\t\" + FORMAT.format(quickResults[i++]) + \"\\t\" + FORMAT.format(quickResults[i++]) + \"\\t\" + FORMAT.format(quickResults[i++]));",
      "right" : "System.out.println(\"Quicksort with first as pivot\\t\" + FORMAT.format(quickResults[i++]) + \"\\t\" + FORMAT.format(quickResults[i++]) + \"\\t\" + FORMAT.format(quickResults[i++]));",
      "info" : "ExpressionStatement[28503-28676]:ExpressionStatement[28683-28856]"
    }, {
      "left" : "System.out.println(\"Quicksort with middle as pivot\\t\" + FORMAT.format(quickResults[i++]) + \"\\t\" + FORMAT.format(quickResults[i++]) + \"\\t\" + FORMAT.format(quickResults[i++]));",
      "right" : "System.out.println(\"Quicksort with middle as pivot\\t\" + FORMAT.format(quickResults[i++]) + \"\\t\" + FORMAT.format(quickResults[i++]) + \"\\t\" + FORMAT.format(quickResults[i++]));",
      "info" : "ExpressionStatement[28689-28863]:ExpressionStatement[28869-29043]"
    }, {
      "left" : "System.out.println(\"Quicksort with random as pivot\\t\" + FORMAT.format(quickResults[i++]) + \"\\t\" + FORMAT.format(quickResults[i++]) + \"\\t\" + FORMAT.format(quickResults[i++]));",
      "right" : "System.out.println(\"Quicksort with random as pivot\\t\" + FORMAT.format(quickResults[i++]) + \"\\t\" + FORMAT.format(quickResults[i++]) + \"\\t\" + FORMAT.format(quickResults[i++]));",
      "info" : "ExpressionStatement[28876-29050]:ExpressionStatement[29056-29230]"
    }, {
      "left" : "if (showHeap)",
      "right" : "if (showHeap)",
      "info" : "IfStatement[29069-29284]:IfStatement[29249-29464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29083-29284]:Block[29263-29464]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[29097-29107]:VariableDeclarationStatement[29277-29287]"
    }, {
      "left" : "System.out.println(\"Heap sort\\t\\t\\t\" + FORMAT.format(heapResults[i++]) + \"\\t\" + FORMAT.format(heapResults[i++]) + \"\\t\" + FORMAT.format(heapResults[i++]));",
      "right" : "System.out.println(\"Heap sort\\t\\t\\t\" + FORMAT.format(heapResults[i++]) + \"\\t\" + FORMAT.format(heapResults[i++]) + \"\\t\" + FORMAT.format(heapResults[i++]));",
      "info" : "ExpressionStatement[29120-29274]:ExpressionStatement[29300-29454]"
    }, {
      "left" : "if (showCounting)",
      "right" : "if (showCounting)",
      "info" : "IfStatement[29293-29528]:IfStatement[29473-29708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29311-29528]:Block[29491-29708]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[29325-29335]:VariableDeclarationStatement[29505-29515]"
    }, {
      "left" : "System.out.println(\"Counting sort\\t\\t\\t\" + FORMAT.format(countingResults[i++]) + \"\\t\" + FORMAT.format(countingResults[i++]) + \"\\t\" + FORMAT.format(countingResults[i++]));",
      "right" : "System.out.println(\"Counting sort\\t\\t\\t\" + FORMAT.format(countingResults[i++]) + \"\\t\" + FORMAT.format(countingResults[i++]) + \"\\t\" + FORMAT.format(countingResults[i++]));",
      "info" : "ExpressionStatement[29348-29518]:ExpressionStatement[29528-29698]"
    }, {
      "left" : "if (showRadix)",
      "right" : "if (showRadix)",
      "info" : "IfStatement[29537-29757]:IfStatement[29717-29937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29552-29757]:Block[29732-29937]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[29566-29576]:VariableDeclarationStatement[29746-29756]"
    }, {
      "left" : "System.out.println(\"Radix sort\\t\\t\\t\" + FORMAT.format(radixResults[i++]) + \"\\t\" + FORMAT.format(radixResults[i++]) + \"\\t\" + FORMAT.format(radixResults[i++]));",
      "right" : "System.out.println(\"Radix sort\\t\\t\\t\" + FORMAT.format(radixResults[i++]) + \"\\t\" + FORMAT.format(radixResults[i++]) + \"\\t\" + FORMAT.format(radixResults[i++]));",
      "info" : "ExpressionStatement[29589-29747]:ExpressionStatement[29769-29927]"
    }, {
      "left" : "if (showAmericanFlag)",
      "right" : "if (showAmericanFlag)",
      "info" : "IfStatement[29766-30020]:IfStatement[29946-30200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29788-30020]:Block[29968-30200]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[29802-29812]:VariableDeclarationStatement[29982-29992]"
    }, {
      "left" : "System.out.println(\"American Flag sort\\t\\t\" + FORMAT.format(americanFlagResults[i++]) + \"\\t\" + FORMAT.format(americanFlagResults[i++]) + \"\\t\" + FORMAT.format(americanFlagResults[i++]));",
      "right" : "System.out.println(\"American Flag sort\\t\\t\" + FORMAT.format(americanFlagResults[i++]) + \"\\t\" + FORMAT.format(americanFlagResults[i++]) + \"\\t\" + FORMAT.format(americanFlagResults[i++]));",
      "info" : "ExpressionStatement[29825-30010]:ExpressionStatement[30005-30190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30095-30234]:Block[30275-30414]"
    }, {
      "left" : "System.out.println(\"Unsorted: \" + print(u));",
      "right" : "System.out.println(\"Unsorted: \" + print(u));",
      "info" : "ExpressionStatement[30105-30149]:ExpressionStatement[30285-30329]"
    }, {
      "left" : "System.out.println(\"Sorted: \" + print(r));",
      "right" : "System.out.println(\"Sorted: \" + print(r));",
      "info" : "ExpressionStatement[30158-30200]:ExpressionStatement[30338-30380]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[30209-30228]:ExpressionStatement[30389-30408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30292-30450]:Block[30472-30630]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[30302-30423]:ForStatement[30482-30603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30341-30423]:Block[30521-30603]"
    }, {
      "left" : "if (array[i - 1] > array[i])",
      "right" : "if (array[i - 1] > array[i])",
      "info" : "IfStatement[30355-30413]:IfStatement[30535-30593]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30400-30413]:ReturnStatement[30580-30593]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[30432-30444]:ReturnStatement[30612-30624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30506-30559]:Block[30686-30739]"
    }, {
      "left" : "return print(array, 0, array.length);",
      "right" : "return print(array, 0, array.length);",
      "info" : "ReturnStatement[30516-30553]:ReturnStatement[30696-30733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30638-30908]:Block[30818-31088]"
    }, {
      "left" : "final Integer[] clone = array.clone();",
      "right" : "final Integer[] clone = array.clone();",
      "info" : "VariableDeclarationStatement[30648-30686]:VariableDeclarationStatement[30828-30866]"
    }, {
      "left" : "StringBuilder builder = new StringBuilder();",
      "right" : "StringBuilder builder = new StringBuilder();",
      "info" : "VariableDeclarationStatement[30695-30739]:VariableDeclarationStatement[30875-30919]"
    }, {
      "left" : "for (int i = 0; i < length; i++)",
      "right" : "for (int i = 0; i < length; i++)",
      "info" : "ForStatement[30748-30867]:ForStatement[30928-31047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30781-30867]:Block[30961-31047]"
    }, {
      "left" : "int e = clone[start + i];",
      "right" : "int e = clone[start + i];",
      "info" : "VariableDeclarationStatement[30795-30820]:VariableDeclarationStatement[30975-31000]"
    }, {
      "left" : "builder.append(e + \" \");",
      "right" : "builder.append(e + \" \");",
      "info" : "ExpressionStatement[30833-30857]:ExpressionStatement[31013-31037]"
    }, {
      "left" : "return builder.toString();",
      "right" : "return builder.toString();",
      "info" : "ReturnStatement[30876-30902]:ReturnStatement[31056-31082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31012-31384]:Block[31192-31564]"
    }, {
      "left" : "final Integer[] clone = array.clone();",
      "right" : "final Integer[] clone = array.clone();",
      "info" : "VariableDeclarationStatement[31022-31060]:VariableDeclarationStatement[31202-31240]"
    }, {
      "left" : "StringBuilder builder = new StringBuilder();",
      "right" : "StringBuilder builder = new StringBuilder();",
      "info" : "VariableDeclarationStatement[31069-31113]:VariableDeclarationStatement[31249-31293]"
    }, {
      "left" : "for (int i = 0; i < length; i++)",
      "right" : "for (int i = 0; i < length; i++)",
      "info" : "ForStatement[31122-31343]:ForStatement[31302-31523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31155-31343]:Block[31335-31523]"
    }, {
      "left" : "int e = clone[start + i];",
      "right" : "int e = clone[start + i];",
      "info" : "VariableDeclarationStatement[31169-31194]:VariableDeclarationStatement[31349-31374]"
    }, {
      "left" : "if (i == pivotIndex)",
      "right" : "if (i == pivotIndex)",
      "info" : "IfStatement[31207-31333]:IfStatement[31387-31513]"
    }, {
      "left" : "builder.append(\"`\" + e + \"` \");",
      "right" : "builder.append(\"`\" + e + \"` \");",
      "info" : "ExpressionStatement[31244-31275]:ExpressionStatement[31424-31455]"
    }, {
      "left" : "builder.append(e + \" \");",
      "right" : "builder.append(e + \" \");",
      "info" : "ExpressionStatement[31309-31333]:ExpressionStatement[31489-31513]"
    }, {
      "left" : "return builder.toString();",
      "right" : "return builder.toString();",
      "info" : "ReturnStatement[31352-31378]:ReturnStatement[31532-31558]"
    } ]
  },
  "interFileMappings" : { }
}