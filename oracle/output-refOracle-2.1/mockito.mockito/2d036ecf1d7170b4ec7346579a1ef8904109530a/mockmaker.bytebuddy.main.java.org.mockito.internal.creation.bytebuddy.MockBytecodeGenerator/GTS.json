{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "MockBytecodeGenerator",
      "right" : "MockBytecodeGenerator",
      "info" : "TypeDeclaration[1129-4627]:TypeDeclaration[1584-5322]"
    }, {
      "left" : "private final ByteBuddy byteBuddy;",
      "right" : "private final ByteBuddy byteBuddy;",
      "info" : "FieldDeclaration[1163-1197]:FieldDeclaration[1618-1652]"
    }, {
      "left" : "private final Random random;",
      "right" : "private final Random random;",
      "info" : "FieldDeclaration[1202-1230]:FieldDeclaration[1657-1685]"
    }, {
      "left" : "public MockBytecodeGenerator()",
      "right" : "public MockBytecodeGenerator()",
      "info" : "MethodDeclaration[1236-1601]:MethodDeclaration[1736-2334]"
    }, {
      "left" : "public <T> Class<? extends T> generateMockClass(MockFeatures<T> features)",
      "right" : "public <T> Class<? extends T> generateMockClass(MockFeatures<T> features)",
      "info" : "MethodDeclaration[1607-3415]:MethodDeclaration[2340-3728]"
    }, {
      "left" : "private String nameFor(Class<?> type)",
      "right" : "private String nameFor(Class<?> type)",
      "info" : "MethodDeclaration[3524-3897]:MethodDeclaration[4219-4592]"
    }, {
      "left" : "private boolean isComingFromJDK(Class<?> type)",
      "right" : "private boolean isComingFromJDK(Class<?> type)",
      "info" : "MethodDeclaration[3903-4373]:MethodDeclaration[4598-5068]"
    }, {
      "left" : "private boolean isComingFromSealedPackage(Class<?> type)",
      "right" : "private boolean isComingFromSealedPackage(Class<?> type)",
      "info" : "MethodDeclaration[4379-4517]:MethodDeclaration[5074-5212]"
    }, {
      "left" : "private boolean isComingFromSignedJar(Class<?> type)",
      "right" : "private boolean isComingFromSignedJar(Class<?> type)",
      "info" : "MethodDeclaration[4523-4625]:MethodDeclaration[5218-5320]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1267-1601]:Block[1767-2334]"
    }, {
      "left" : "byteBuddy = new ByteBuddy(ClassFileVersion.JAVA_V5)\n//                .withIgnoredMethods(isBridge())\n                .withDefaultMethodAttributeAppender(MethodAttributeAppender.ForInstrumentedMethod.INSTANCE)\n                .withAttribute(TypeAttributeAppender.ForSuperType.INSTANCE);",
      "right" : "byteBuddy = new ByteBuddy(ClassFileVersion.JAVA_V5)\n                .withDefaultMethodAttributeAppender(MethodAttributeAppender.ForInstrumentedMethod.INSTANCE)\n                .withAttribute(TypeAttributeAppender.ForSuperType.INSTANCE);",
      "info" : "ExpressionStatement[1277-1563]:ExpressionStatement[1777-2013]"
    }, {
      "left" : "random = new Random();",
      "right" : "random = new Random();",
      "info" : "ExpressionStatement[1573-1595]:ExpressionStatement[2306-2328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1681-3415]:Block[2414-3728]"
    }, {
      "left" : "DynamicType.Builder<T> builder =\n                byteBuddy.subclass(features.mockedType, ConstructorStrategy.Default.IMITATE_SUPER_TYPE)\n                         .name(nameFor(features.mockedType))\n                         .implement(features.interfaces.toArray(new Class<?>[features.interfaces.size()]))\n                         .method(any()).intercept(toInstanceField(MockMethodInterceptor.class, \"mockitoInterceptor\")\n                                                          .filter(isDeclaredBy(MockMethodInterceptor.class)))\n                         .implement(MockMethodInterceptor.MockAccess.class).intercept(ofBeanProperty())\n                         .method(isHashCode()).intercept(to(MockMethodInterceptor.ForHashCode.class))\n                         .method(isEquals()).intercept(to(MockMethodInterceptor.ForEquals.class))\n                         .defineField(\"serialVersionUID\", long.class, STATIC, PRIVATE, FINAL).value(42L);",
      "right" : "DynamicType.Builder<T> builder =\n                byteBuddy.subclass(features.mockedType, ConstructorStrategy.Default.IMITATE_SUPER_TYPE)\n                         .name(nameFor(features.mockedType))\n                         .implement(features.interfaces.toArray(new Class<?>[features.interfaces.size()]))\n                         .method(any()).intercept(delegation)\n                         .defineField(\"mockitoInterceptor\", MockMethodInterceptor.class, PRIVATE)\n                         .implement(MockAccess.class).intercept(FieldAccessor.ofBeanProperty())\n                         .method(isHashCode()).intercept(to(MockMethodInterceptor.ForHashCode.class))\n                         .method(isEquals()).intercept(to(MockMethodInterceptor.ForEquals.class))\n                         .defineField(\"serialVersionUID\", long.class, STATIC, PRIVATE, FINAL).value(42L);",
      "info" : "VariableDeclarationStatement[1691-2632]:VariableDeclarationStatement[2424-3290]"
    }, {
      "left" : "if (features.crossClassLoaderSerializable)",
      "right" : "if (features.crossClassLoaderSerializable)",
      "info" : "IfStatement[2641-2865]:IfStatement[3299-3523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2684-2865]:Block[3342-3523]"
    }, {
      "left" : "builder = builder.implement(CrossClassLoaderSerializableMock.class)\n                             .intercept(to(MockMethodInterceptor.ForWriteReplace.class));",
      "right" : "builder = builder.implement(CrossClassLoaderSerializableMock.class)\n                             .intercept(to(MockMethodInterceptor.ForWriteReplace.class));",
      "info" : "ExpressionStatement[2698-2855]:ExpressionStatement[3356-3513]"
    }, {
      "left" : "Class<?>[] allMockedTypes = new Class<?>[features.interfaces.size() + 1];",
      "right" : "Class<?>[] allMockedTypes = new Class<?>[features.interfaces.size() + 1];",
      "info" : "VariableDeclarationStatement[2874-2947]:VariableDeclarationStatement[3808-3881]"
    }, {
      "left" : "allMockedTypes[0] = features.mockedType;",
      "right" : "allMockedTypes[0] = features.mockedType;",
      "info" : "ExpressionStatement[2956-2996]:ExpressionStatement[3890-3930]"
    }, {
      "left" : "return builder.make()\n                      .load(SearchingClassLoader.combineLoadersOf(allMockedTypes), ClassLoadingStrategy.Default.INJECTION)\n                      .getLoaded();",
      "right" : "return builder.make()\n                      .load(SearchingClassLoader.combineLoadersOf(allMockedTypes(features)), ClassLoadingStrategy.Default.INJECTION)\n                      .getLoaded();",
      "info" : "ReturnStatement[3229-3409]:ReturnStatement[3532-3722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3562-3897]:Block[4257-4592]"
    }, {
      "left" : "String typeName = type.getName();",
      "right" : "String typeName = type.getName();",
      "info" : "VariableDeclarationStatement[3572-3605]:VariableDeclarationStatement[4267-4300]"
    }, {
      "left" : "if (isComingFromJDK(type)\n                || isComingFromSignedJar(type)\n                || isComingFromSealedPackage(type))",
      "right" : "if (isComingFromJDK(type)\n                || isComingFromSignedJar(type)\n                || isComingFromSealedPackage(type))",
      "info" : "IfStatement[3614-3796]:IfStatement[4309-4491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3739-3796]:Block[4434-4491]"
    }, {
      "left" : "typeName = \"codegen.\" + typeName;",
      "right" : "typeName = \"codegen.\" + typeName;",
      "info" : "ExpressionStatement[3753-3786]:ExpressionStatement[4448-4481]"
    }, {
      "left" : "return String.format(\"%s$%s$%d\", typeName, \"MockitoMock\", Math.abs(random.nextInt()));",
      "right" : "return String.format(\"%s$%s$%d\", typeName, \"MockitoMock\", Math.abs(random.nextInt()));",
      "info" : "ReturnStatement[3805-3891]:ReturnStatement[4500-4586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3950-4373]:Block[4645-5068]"
    }, {
      "left" : "return type.getPackage() != null && \"Java Runtime Environment\".equalsIgnoreCase(type.getPackage().getImplementationTitle())\n                || type.getName().startsWith(\"java.\")\n                || type.getName().startsWith(\"javax.\");",
      "right" : "return type.getPackage() != null && \"Java Runtime Environment\".equalsIgnoreCase(type.getPackage().getImplementationTitle())\n                || type.getName().startsWith(\"java.\")\n                || type.getName().startsWith(\"javax.\");",
      "info" : "ReturnStatement[4134-4367]:ReturnStatement[4829-5062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4436-4517]:Block[5131-5212]"
    }, {
      "left" : "return type.getPackage() != null && type.getPackage().isSealed();",
      "right" : "return type.getPackage() != null && type.getPackage().isSealed();",
      "info" : "ReturnStatement[4446-4511]:ReturnStatement[5141-5206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4576-4625]:Block[5271-5320]"
    }, {
      "left" : "return type.getSigners() != null;",
      "right" : "return type.getSigners() != null;",
      "info" : "ReturnStatement[4586-4619]:ReturnStatement[5281-5314]"
    } ]
  },
  "interFileMappings" : { }
}