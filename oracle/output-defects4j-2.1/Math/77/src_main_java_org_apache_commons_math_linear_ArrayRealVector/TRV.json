{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final String NON_FITTING_POSITION_AND_SIZE_MESSAGE =\n        \"position {0} and size {1} don't fit to the size of the input array {2}\";",
      "right" : "private static final String NON_FITTING_POSITION_AND_SIZE_MESSAGE =\n        \"position {0} and size {1} don't fit to the size of the input array {2}\";",
      "info" : "FieldDeclaration[1245-1448]:FieldDeclaration[1245-1448]"
    }, {
      "left" : "private static final long serialVersionUID = -1097961340710804027L;",
      "right" : "private static final long serialVersionUID = -1097961340710804027L;",
      "info" : "FieldDeclaration[1454-1565]:FieldDeclaration[1454-1565]"
    }, {
      "left" : "private static final RealVectorFormat DEFAULT_FORMAT =\n        RealVectorFormat.getInstance();",
      "right" : "private static final RealVectorFormat DEFAULT_FORMAT =\n        RealVectorFormat.getInstance();",
      "info" : "FieldDeclaration[1571-1692]:FieldDeclaration[1571-1692]"
    }, {
      "left" : "protected double data[];",
      "right" : "protected double data[];",
      "info" : "FieldDeclaration[1698-1756]:FieldDeclaration[1698-1756]"
    }, {
      "left" : "public ArrayRealVector()",
      "right" : "public ArrayRealVector()",
      "info" : "MethodDeclaration[1762-2288]:MethodDeclaration[1762-2288]"
    }, {
      "left" : "public ArrayRealVector(int size)",
      "right" : "public ArrayRealVector(int size)",
      "info" : "MethodDeclaration[2294-2471]:MethodDeclaration[2294-2471]"
    }, {
      "left" : "public ArrayRealVector(int size, double preset)",
      "right" : "public ArrayRealVector(int size, double preset)",
      "info" : "MethodDeclaration[2477-2775]:MethodDeclaration[2477-2775]"
    }, {
      "left" : "public ArrayRealVector(double[] d)",
      "right" : "public ArrayRealVector(double[] d)",
      "info" : "MethodDeclaration[2781-2965]:MethodDeclaration[2781-2965]"
    }, {
      "left" : "public ArrayRealVector(double[] d, boolean copyArray)\n        throws NullPointerException, IllegalArgumentException",
      "right" : "public ArrayRealVector(double[] d, boolean copyArray)\n        throws NullPointerException, IllegalArgumentException",
      "info" : "MethodDeclaration[2971-4094]:MethodDeclaration[2971-4094]"
    }, {
      "left" : "public ArrayRealVector(double[] d, int pos, int size)",
      "right" : "public ArrayRealVector(double[] d, int pos, int size)",
      "info" : "MethodDeclaration[4100-4625]:MethodDeclaration[4100-4625]"
    }, {
      "left" : "public ArrayRealVector(Double[] d)",
      "right" : "public ArrayRealVector(Double[] d)",
      "info" : "MethodDeclaration[4631-4898]:MethodDeclaration[4631-4898]"
    }, {
      "left" : "public ArrayRealVector(Double[] d, int pos, int size)",
      "right" : "public ArrayRealVector(Double[] d, int pos, int size)",
      "info" : "MethodDeclaration[4904-5491]:MethodDeclaration[4904-5491]"
    }, {
      "left" : "public ArrayRealVector(RealVector v)",
      "right" : "public ArrayRealVector(RealVector v)",
      "info" : "MethodDeclaration[5497-5794]:MethodDeclaration[5497-5794]"
    }, {
      "left" : "public ArrayRealVector(ArrayRealVector v)",
      "right" : "public ArrayRealVector(ArrayRealVector v)",
      "info" : "MethodDeclaration[5800-5985]:MethodDeclaration[5800-5985]"
    }, {
      "left" : "public ArrayRealVector(ArrayRealVector v, boolean deep)",
      "right" : "public ArrayRealVector(ArrayRealVector v, boolean deep)",
      "info" : "MethodDeclaration[5991-6275]:MethodDeclaration[5991-6275]"
    }, {
      "left" : "public ArrayRealVector(ArrayRealVector v1, ArrayRealVector v2)",
      "right" : "public ArrayRealVector(ArrayRealVector v1, ArrayRealVector v2)",
      "info" : "MethodDeclaration[6281-6777]:MethodDeclaration[6281-6777]"
    }, {
      "left" : "public ArrayRealVector(ArrayRealVector v1, RealVector v2)",
      "right" : "public ArrayRealVector(ArrayRealVector v1, RealVector v2)",
      "info" : "MethodDeclaration[6783-7335]:MethodDeclaration[6783-7335]"
    }, {
      "left" : "public ArrayRealVector(RealVector v1, ArrayRealVector v2)",
      "right" : "public ArrayRealVector(RealVector v1, ArrayRealVector v2)",
      "info" : "MethodDeclaration[7341-7889]:MethodDeclaration[7341-7889]"
    }, {
      "left" : "public ArrayRealVector(ArrayRealVector v1, double[] v2)",
      "right" : "public ArrayRealVector(ArrayRealVector v1, double[] v2)",
      "info" : "MethodDeclaration[7895-8395]:MethodDeclaration[7895-8395]"
    }, {
      "left" : "public ArrayRealVector(double[] v1, ArrayRealVector v2)",
      "right" : "public ArrayRealVector(double[] v1, ArrayRealVector v2)",
      "info" : "MethodDeclaration[8401-8901]:MethodDeclaration[8401-8901]"
    }, {
      "left" : "public ArrayRealVector(double[] v1, double[] v2)",
      "right" : "public ArrayRealVector(double[] v1, double[] v2)",
      "info" : "MethodDeclaration[8907-9387]:MethodDeclaration[8907-9387]"
    }, {
      "left" : "public AbstractRealVector copy()",
      "right" : "public AbstractRealVector copy()",
      "info" : "MethodDeclaration[9393-9506]:MethodDeclaration[9393-9506]"
    }, {
      "left" : "public RealVector add(RealVector v)\n        throws IllegalArgumentException",
      "right" : "public RealVector add(RealVector v)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[9512-10068]:MethodDeclaration[9512-10068]"
    }, {
      "left" : "public RealVector add(double[] v)\n        throws IllegalArgumentException",
      "right" : "public RealVector add(double[] v)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[10074-10392]:MethodDeclaration[10074-10392]"
    }, {
      "left" : "public ArrayRealVector add(ArrayRealVector v)\n        throws IllegalArgumentException",
      "right" : "public ArrayRealVector add(ArrayRealVector v)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[10398-10724]:MethodDeclaration[10398-10724]"
    }, {
      "left" : "public RealVector subtract(RealVector v)\n        throws IllegalArgumentException",
      "right" : "public RealVector subtract(RealVector v)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[10730-11295]:MethodDeclaration[10730-11295]"
    }, {
      "left" : "public RealVector subtract(double[] v)\n        throws IllegalArgumentException",
      "right" : "public RealVector subtract(double[] v)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[11301-11624]:MethodDeclaration[11301-11624]"
    }, {
      "left" : "public ArrayRealVector subtract(ArrayRealVector v)\n        throws IllegalArgumentException",
      "right" : "public ArrayRealVector subtract(ArrayRealVector v)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[11630-11962]:MethodDeclaration[11630-11962]"
    }, {
      "left" : "public RealVector mapAddToSelf(double d)",
      "right" : "public RealVector mapAddToSelf(double d)",
      "info" : "MethodDeclaration[11968-12155]:MethodDeclaration[11968-12155]"
    }, {
      "left" : "public RealVector mapSubtractToSelf(double d)",
      "right" : "public RealVector mapSubtractToSelf(double d)",
      "info" : "MethodDeclaration[12161-12353]:MethodDeclaration[12161-12353]"
    }, {
      "left" : "public RealVector mapMultiplyToSelf(double d)",
      "right" : "public RealVector mapMultiplyToSelf(double d)",
      "info" : "MethodDeclaration[12359-12551]:MethodDeclaration[12359-12551]"
    }, {
      "left" : "public RealVector mapDivideToSelf(double d)",
      "right" : "public RealVector mapDivideToSelf(double d)",
      "info" : "MethodDeclaration[12557-12747]:MethodDeclaration[12557-12747]"
    }, {
      "left" : "public RealVector mapPowToSelf(double d)",
      "right" : "public RealVector mapPowToSelf(double d)",
      "info" : "MethodDeclaration[12753-12949]:MethodDeclaration[12753-12949]"
    }, {
      "left" : "public RealVector mapExpToSelf()",
      "right" : "public RealVector mapExpToSelf()",
      "info" : "MethodDeclaration[12955-13140]:MethodDeclaration[12955-13140]"
    }, {
      "left" : "public RealVector mapExpm1ToSelf()",
      "right" : "public RealVector mapExpm1ToSelf()",
      "info" : "MethodDeclaration[13146-13335]:MethodDeclaration[13146-13335]"
    }, {
      "left" : "public RealVector mapLogToSelf()",
      "right" : "public RealVector mapLogToSelf()",
      "info" : "MethodDeclaration[13341-13526]:MethodDeclaration[13341-13526]"
    }, {
      "left" : "public RealVector mapLog10ToSelf()",
      "right" : "public RealVector mapLog10ToSelf()",
      "info" : "MethodDeclaration[13532-13721]:MethodDeclaration[13532-13721]"
    }, {
      "left" : "public RealVector mapLog1pToSelf()",
      "right" : "public RealVector mapLog1pToSelf()",
      "info" : "MethodDeclaration[13727-13916]:MethodDeclaration[13727-13916]"
    }, {
      "left" : "public RealVector mapCoshToSelf()",
      "right" : "public RealVector mapCoshToSelf()",
      "info" : "MethodDeclaration[13922-14109]:MethodDeclaration[13922-14109]"
    }, {
      "left" : "public RealVector mapSinhToSelf()",
      "right" : "public RealVector mapSinhToSelf()",
      "info" : "MethodDeclaration[14115-14302]:MethodDeclaration[14115-14302]"
    }, {
      "left" : "public RealVector mapTanhToSelf()",
      "right" : "public RealVector mapTanhToSelf()",
      "info" : "MethodDeclaration[14308-14495]:MethodDeclaration[14308-14495]"
    }, {
      "left" : "public RealVector mapCosToSelf()",
      "right" : "public RealVector mapCosToSelf()",
      "info" : "MethodDeclaration[14501-14686]:MethodDeclaration[14501-14686]"
    }, {
      "left" : "public RealVector mapSinToSelf()",
      "right" : "public RealVector mapSinToSelf()",
      "info" : "MethodDeclaration[14692-14877]:MethodDeclaration[14692-14877]"
    }, {
      "left" : "public RealVector mapTanToSelf()",
      "right" : "public RealVector mapTanToSelf()",
      "info" : "MethodDeclaration[14883-15068]:MethodDeclaration[14883-15068]"
    }, {
      "left" : "public RealVector mapAcosToSelf()",
      "right" : "public RealVector mapAcosToSelf()",
      "info" : "MethodDeclaration[15074-15261]:MethodDeclaration[15074-15261]"
    }, {
      "left" : "public RealVector mapAsinToSelf()",
      "right" : "public RealVector mapAsinToSelf()",
      "info" : "MethodDeclaration[15267-15454]:MethodDeclaration[15267-15454]"
    }, {
      "left" : "public RealVector mapAtanToSelf()",
      "right" : "public RealVector mapAtanToSelf()",
      "info" : "MethodDeclaration[15460-15647]:MethodDeclaration[15460-15647]"
    }, {
      "left" : "public RealVector mapInvToSelf()",
      "right" : "public RealVector mapInvToSelf()",
      "info" : "MethodDeclaration[15653-15834]:MethodDeclaration[15653-15834]"
    }, {
      "left" : "public RealVector mapAbsToSelf()",
      "right" : "public RealVector mapAbsToSelf()",
      "info" : "MethodDeclaration[15840-16025]:MethodDeclaration[15840-16025]"
    }, {
      "left" : "public RealVector mapSqrtToSelf()",
      "right" : "public RealVector mapSqrtToSelf()",
      "info" : "MethodDeclaration[16031-16218]:MethodDeclaration[16031-16218]"
    }, {
      "left" : "public RealVector mapCbrtToSelf()",
      "right" : "public RealVector mapCbrtToSelf()",
      "info" : "MethodDeclaration[16224-16411]:MethodDeclaration[16224-16411]"
    }, {
      "left" : "public RealVector mapCeilToSelf()",
      "right" : "public RealVector mapCeilToSelf()",
      "info" : "MethodDeclaration[16417-16604]:MethodDeclaration[16417-16604]"
    }, {
      "left" : "public RealVector mapFloorToSelf()",
      "right" : "public RealVector mapFloorToSelf()",
      "info" : "MethodDeclaration[16610-16799]:MethodDeclaration[16610-16799]"
    }, {
      "left" : "public RealVector mapRintToSelf()",
      "right" : "public RealVector mapRintToSelf()",
      "info" : "MethodDeclaration[16805-16992]:MethodDeclaration[16805-16992]"
    }, {
      "left" : "public RealVector mapSignumToSelf()",
      "right" : "public RealVector mapSignumToSelf()",
      "info" : "MethodDeclaration[16998-17189]:MethodDeclaration[16998-17189]"
    }, {
      "left" : "public RealVector mapUlpToSelf()",
      "right" : "public RealVector mapUlpToSelf()",
      "info" : "MethodDeclaration[17195-17380]:MethodDeclaration[17195-17380]"
    }, {
      "left" : "public RealVector ebeMultiply(RealVector v)\n        throws IllegalArgumentException",
      "right" : "public RealVector ebeMultiply(RealVector v)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[17386-17864]:MethodDeclaration[17386-17864]"
    }, {
      "left" : "public RealVector ebeMultiply(double[] v)\n        throws IllegalArgumentException",
      "right" : "public RealVector ebeMultiply(double[] v)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[17870-18196]:MethodDeclaration[17870-18196]"
    }, {
      "left" : "public ArrayRealVector ebeMultiply(ArrayRealVector v)\n        throws IllegalArgumentException",
      "right" : "public ArrayRealVector ebeMultiply(ArrayRealVector v)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[18202-18621]:MethodDeclaration[18202-18621]"
    }, {
      "left" : "public RealVector ebeDivide(RealVector v)\n        throws IllegalArgumentException",
      "right" : "public RealVector ebeDivide(RealVector v)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[18627-19101]:MethodDeclaration[18627-19101]"
    }, {
      "left" : "public RealVector ebeDivide(double[] v)\n        throws IllegalArgumentException",
      "right" : "public RealVector ebeDivide(double[] v)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[19107-19435]:MethodDeclaration[19107-19435]"
    }, {
      "left" : "public ArrayRealVector ebeDivide(ArrayRealVector v)\n        throws IllegalArgumentException",
      "right" : "public ArrayRealVector ebeDivide(ArrayRealVector v)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[19441-19844]:MethodDeclaration[19441-19844]"
    }, {
      "left" : "public double[] getData()",
      "right" : "public double[] getData()",
      "info" : "MethodDeclaration[19850-19937]:MethodDeclaration[19850-19937]"
    }, {
      "left" : "public double[] getDataRef()",
      "right" : "public double[] getDataRef()",
      "info" : "MethodDeclaration[19943-20170]:MethodDeclaration[19943-20170]"
    }, {
      "left" : "public double dotProduct(RealVector v)\n        throws IllegalArgumentException",
      "right" : "public double dotProduct(RealVector v)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[20176-20707]:MethodDeclaration[20176-20707]"
    }, {
      "left" : "public double dotProduct(double[] v)\n        throws IllegalArgumentException",
      "right" : "public double dotProduct(double[] v)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[20713-21000]:MethodDeclaration[20713-21000]"
    }, {
      "left" : "public double dotProduct(ArrayRealVector v)\n        throws IllegalArgumentException",
      "right" : "public double dotProduct(ArrayRealVector v)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[21006-21383]:MethodDeclaration[21006-21383]"
    }, {
      "left" : "public double getNorm()",
      "right" : "public double getNorm()",
      "info" : "MethodDeclaration[21389-21582]:MethodDeclaration[21389-21582]"
    }, {
      "left" : "public double getL1Norm()",
      "right" : "public double getL1Norm()",
      "info" : "MethodDeclaration[21588-21778]:MethodDeclaration[21588-21778]"
    }, {
      "left" : "public double getDistance(RealVector v)\n        throws IllegalArgumentException",
      "right" : "public double getDistance(RealVector v)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[21997-22500]:MethodDeclaration[21996-22499]"
    }, {
      "left" : "public double getDistance(double[] v)\n        throws IllegalArgumentException",
      "right" : "public double getDistance(double[] v)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[22506-22853]:MethodDeclaration[22505-22852]"
    }, {
      "left" : "public double getDistance(ArrayRealVector v)\n        throws IllegalArgumentException",
      "right" : "public double getDistance(ArrayRealVector v)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[22858-23547]:MethodDeclaration[22857-23546]"
    }, {
      "left" : "public double getL1Distance(RealVector v)\n        throws IllegalArgumentException",
      "right" : "public double getL1Distance(RealVector v)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[23553-24051]:MethodDeclaration[23552-24050]"
    }, {
      "left" : "public double getL1Distance(double[] v)\n        throws IllegalArgumentException",
      "right" : "public double getL1Distance(double[] v)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[24057-24397]:MethodDeclaration[24056-24396]"
    }, {
      "left" : "public double getL1Distance(ArrayRealVector v)\n        throws IllegalArgumentException",
      "right" : "public double getL1Distance(ArrayRealVector v)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[24403-25073]:MethodDeclaration[24402-25072]"
    }, {
      "left" : "public double getLInfDistance(RealVector v)\n        throws IllegalArgumentException",
      "right" : "public double getLInfDistance(RealVector v)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[25079-25595]:MethodDeclaration[25078-25594]"
    }, {
      "left" : "public double getLInfDistance(double[] v)\n        throws IllegalArgumentException",
      "right" : "public double getLInfDistance(double[] v)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[25601-25957]:MethodDeclaration[25600-25956]"
    }, {
      "left" : "public double getLInfDistance(ArrayRealVector v)\n        throws IllegalArgumentException",
      "right" : "public double getLInfDistance(ArrayRealVector v)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[25963-26643]:MethodDeclaration[25962-26642]"
    }, {
      "left" : "public RealVector unitVector() throws ArithmeticException",
      "right" : "public RealVector unitVector() throws ArithmeticException",
      "info" : "MethodDeclaration[26649-26924]:MethodDeclaration[26648-26923]"
    }, {
      "left" : "public void unitize() throws ArithmeticException",
      "right" : "public void unitize() throws ArithmeticException",
      "info" : "MethodDeclaration[26930-27221]:MethodDeclaration[26929-27220]"
    }, {
      "left" : "public RealVector projection(RealVector v)",
      "right" : "public RealVector projection(RealVector v)",
      "info" : "MethodDeclaration[27227-27365]:MethodDeclaration[27226-27364]"
    }, {
      "left" : "public RealVector projection(double[] v)",
      "right" : "public RealVector projection(double[] v)",
      "info" : "MethodDeclaration[27371-27502]:MethodDeclaration[27370-27501]"
    }, {
      "left" : "public ArrayRealVector projection(ArrayRealVector v)",
      "right" : "public ArrayRealVector projection(ArrayRealVector v)",
      "info" : "MethodDeclaration[27507-27915]:MethodDeclaration[27506-27914]"
    }, {
      "left" : "public RealMatrix outerProduct(RealVector v)\n        throws IllegalArgumentException",
      "right" : "public RealMatrix outerProduct(RealVector v)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[27921-28540]:MethodDeclaration[27920-28539]"
    }, {
      "left" : "public RealMatrix outerProduct(ArrayRealVector v)\n        throws IllegalArgumentException",
      "right" : "public RealMatrix outerProduct(ArrayRealVector v)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[28546-28944]:MethodDeclaration[28545-28943]"
    }, {
      "left" : "public RealMatrix outerProduct(double[] v)\n        throws IllegalArgumentException",
      "right" : "public RealMatrix outerProduct(double[] v)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[28950-29404]:MethodDeclaration[28949-29403]"
    }, {
      "left" : "public double getEntry(int index) throws MatrixIndexException",
      "right" : "public double getEntry(int index) throws MatrixIndexException",
      "info" : "MethodDeclaration[29410-29532]:MethodDeclaration[29409-29531]"
    }, {
      "left" : "public int getDimension()",
      "right" : "public int getDimension()",
      "info" : "MethodDeclaration[29538-29624]:MethodDeclaration[29537-29623]"
    }, {
      "left" : "public RealVector append(RealVector v)",
      "right" : "public RealVector append(RealVector v)",
      "info" : "MethodDeclaration[29630-29884]:MethodDeclaration[29629-29883]"
    }, {
      "left" : "public ArrayRealVector append(ArrayRealVector v)",
      "right" : "public ArrayRealVector append(ArrayRealVector v)",
      "info" : "MethodDeclaration[29890-30145]:MethodDeclaration[29889-30144]"
    }, {
      "left" : "public RealVector append(double in)",
      "right" : "public RealVector append(double in)",
      "info" : "MethodDeclaration[30151-30412]:MethodDeclaration[30150-30411]"
    }, {
      "left" : "public RealVector append(double[] in)",
      "right" : "public RealVector append(double[] in)",
      "info" : "MethodDeclaration[30418-30534]:MethodDeclaration[30417-30533]"
    }, {
      "left" : "public RealVector getSubVector(int index, int n)",
      "right" : "public RealVector getSubVector(int index, int n)",
      "info" : "MethodDeclaration[30540-30896]:MethodDeclaration[30539-30895]"
    }, {
      "left" : "public void setEntry(int index, double value)",
      "right" : "public void setEntry(int index, double value)",
      "info" : "MethodDeclaration[30902-31116]:MethodDeclaration[30901-31115]"
    }, {
      "left" : "public void setSubVector(int index, RealVector v)",
      "right" : "public void setSubVector(int index, RealVector v)",
      "info" : "MethodDeclaration[31122-31631]:MethodDeclaration[31121-31630]"
    }, {
      "left" : "public void setSubVector(int index, double[] v)",
      "right" : "public void setSubVector(int index, double[] v)",
      "info" : "MethodDeclaration[31637-31925]:MethodDeclaration[31636-31924]"
    }, {
      "left" : "public void set(int index, ArrayRealVector v)\n        throws MatrixIndexException",
      "right" : "public void set(int index, ArrayRealVector v)\n        throws MatrixIndexException",
      "info" : "MethodDeclaration[31931-32321]:MethodDeclaration[31930-32320]"
    }, {
      "left" : "public void set(double value)",
      "right" : "public void set(double value)",
      "info" : "MethodDeclaration[32327-32423]:MethodDeclaration[32326-32422]"
    }, {
      "left" : "public double[] toArray(",
      "right" : "public double[] toArray(",
      "info" : "MethodDeclaration[32429-32515]:MethodDeclaration[32428-32514]"
    }, {
      "left" : "public String toString(",
      "right" : "public String toString(",
      "info" : "MethodDeclaration[32521-32635]:MethodDeclaration[32520-32634]"
    }, {
      "left" : "protected void checkVectorDimensions(RealVector v)\n        throws IllegalArgumentException",
      "right" : "protected void checkVectorDimensions(RealVector v)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[32641-33020]:MethodDeclaration[32640-33019]"
    }, {
      "left" : "protected void checkVectorDimensions(int n)\n        throws IllegalArgumentException",
      "right" : "protected void checkVectorDimensions(int n)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[33026-33566]:MethodDeclaration[33025-33565]"
    }, {
      "left" : "public boolean isNaN()",
      "right" : "public boolean isNaN()",
      "info" : "MethodDeclaration[33572-33915]:MethodDeclaration[33571-33914]"
    }, {
      "left" : "public boolean isInfinite()",
      "right" : "public boolean isInfinite()",
      "info" : "MethodDeclaration[33921-34395]:MethodDeclaration[33920-34394]"
    }, {
      "left" : "public boolean equals(Object other)",
      "right" : "public boolean equals(Object other)",
      "info" : "MethodDeclaration[34401-35774]:MethodDeclaration[34400-35773]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[35780-36077]:MethodDeclaration[35779-36076]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2251-2288]:Block[2251-2288]"
    }, {
      "left" : "data = new double[0];",
      "right" : "data = new double[0];",
      "info" : "ExpressionStatement[2261-2282]:ExpressionStatement[2261-2282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2431-2471]:Block[2431-2471]"
    }, {
      "left" : "data = new double[size];",
      "right" : "data = new double[size];",
      "info" : "ExpressionStatement[2441-2465]:ExpressionStatement[2441-2465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2700-2775]:Block[2700-2775]"
    }, {
      "left" : "data = new double[size];",
      "right" : "data = new double[size];",
      "info" : "ExpressionStatement[2710-2734]:ExpressionStatement[2710-2734]"
    }, {
      "left" : "Arrays.fill(data, preset);",
      "right" : "Arrays.fill(data, preset);",
      "info" : "ExpressionStatement[2743-2769]:ExpressionStatement[2743-2769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2932-2965]:Block[2932-2965]"
    }, {
      "left" : "data = d.clone();",
      "right" : "data = d.clone();",
      "info" : "ExpressionStatement[2942-2959]:ExpressionStatement[2942-2959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3812-4094]:Block[3812-4094]"
    }, {
      "left" : "if (d == null)",
      "right" : "if (d == null)",
      "info" : "IfStatement[3822-3894]:IfStatement[3822-3894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3837-3894]:Block[3837-3894]"
    }, {
      "left" : "throw new NullPointerException();",
      "right" : "throw new NullPointerException();",
      "info" : "ThrowStatement[3851-3884]:ThrowStatement[3851-3884]"
    }, {
      "left" : "if (d.length == 0)",
      "right" : "if (d.length == 0)",
      "info" : "IfStatement[3903-4045]:IfStatement[3903-4045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3922-4045]:Block[3922-4045]"
    }, {
      "left" : "throw MathRuntimeException.createIllegalArgumentException(\"vector must have at least one element\");",
      "right" : "throw MathRuntimeException.createIllegalArgumentException(\"vector must have at least one element\");",
      "info" : "ThrowStatement[3936-4035]:ThrowStatement[3936-4035]"
    }, {
      "left" : "data = copyArray ? d.clone() :  d;",
      "right" : "data = copyArray ? d.clone() :  d;",
      "info" : "ExpressionStatement[4054-4088]:ExpressionStatement[4054-4088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4339-4625]:Block[4339-4625]"
    }, {
      "left" : "if (d.length < pos + size)",
      "right" : "if (d.length < pos + size)",
      "info" : "IfStatement[4349-4537]:IfStatement[4349-4537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4376-4537]:Block[4376-4537]"
    }, {
      "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                  NON_FITTING_POSITION_AND_SIZE_MESSAGE, pos, size, d.length);",
      "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                  NON_FITTING_POSITION_AND_SIZE_MESSAGE, pos, size, d.length);",
      "info" : "ThrowStatement[4390-4527]:ThrowStatement[4390-4527]"
    }, {
      "left" : "data = new double[size];",
      "right" : "data = new double[size];",
      "info" : "ExpressionStatement[4546-4570]:ExpressionStatement[4546-4570]"
    }, {
      "left" : "System.arraycopy(d, pos, data, 0, size);",
      "right" : "System.arraycopy(d, pos, data, 0, size);",
      "info" : "ExpressionStatement[4579-4619]:ExpressionStatement[4579-4619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4757-4898]:Block[4757-4898]"
    }, {
      "left" : "data = new double[d.length];",
      "right" : "data = new double[d.length];",
      "info" : "ExpressionStatement[4767-4795]:ExpressionStatement[4767-4795]"
    }, {
      "left" : "for (int i = 0; i < d.length; i++)",
      "right" : "for (int i = 0; i < d.length; i++)",
      "info" : "ForStatement[4804-4892]:ForStatement[4804-4892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4839-4892]:Block[4839-4892]"
    }, {
      "left" : "data[i] = d[i].doubleValue();",
      "right" : "data[i] = d[i].doubleValue();",
      "info" : "ExpressionStatement[4853-4882]:ExpressionStatement[4853-4882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5149-5491]:Block[5149-5491]"
    }, {
      "left" : "if (d.length < pos + size)",
      "right" : "if (d.length < pos + size)",
      "info" : "IfStatement[5159-5347]:IfStatement[5159-5347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5186-5347]:Block[5186-5347]"
    }, {
      "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                  NON_FITTING_POSITION_AND_SIZE_MESSAGE, pos, size, d.length);",
      "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                  NON_FITTING_POSITION_AND_SIZE_MESSAGE, pos, size, d.length);",
      "info" : "ThrowStatement[5200-5337]:ThrowStatement[5200-5337]"
    }, {
      "left" : "data = new double[size];",
      "right" : "data = new double[size];",
      "info" : "ExpressionStatement[5356-5380]:ExpressionStatement[5356-5380]"
    }, {
      "left" : "for (int i = pos; i < pos + size; i++)",
      "right" : "for (int i = pos; i < pos + size; i++)",
      "info" : "ForStatement[5389-5485]:ForStatement[5389-5485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5428-5485]:Block[5428-5485]"
    }, {
      "left" : "data[i-pos] = d[i].doubleValue();",
      "right" : "data[i-pos] = d[i].doubleValue();",
      "info" : "ExpressionStatement[5442-5475]:ExpressionStatement[5442-5475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5647-5794]:Block[5647-5794]"
    }, {
      "left" : "data = new double[v.getDimension()];",
      "right" : "data = new double[v.getDimension()];",
      "info" : "ExpressionStatement[5657-5693]:ExpressionStatement[5657-5693]"
    }, {
      "left" : "for (int i = 0; i < data.length; ++i)",
      "right" : "for (int i = 0; i < data.length; ++i)",
      "info" : "ForStatement[5702-5788]:ForStatement[5702-5788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5740-5788]:Block[5740-5788]"
    }, {
      "left" : "data[i] = v.getEntry(i);",
      "right" : "data[i] = v.getEntry(i);",
      "info" : "ExpressionStatement[5754-5778]:ExpressionStatement[5754-5778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5955-5985]:Block[5955-5985]"
    }, {
      "left" : "this(v, true);",
      "right" : "this(v, true);",
      "info" : "ConstructorInvocation[5965-5979]:ConstructorInvocation[5965-5979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6221-6275]:Block[6221-6275]"
    }, {
      "left" : "data = deep ? v.data.clone() : v.data;",
      "right" : "data = deep ? v.data.clone() : v.data;",
      "info" : "ExpressionStatement[6231-6269]:ExpressionStatement[6231-6269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6571-6777]:Block[6571-6777]"
    }, {
      "left" : "data = new double[v1.data.length + v2.data.length];",
      "right" : "data = new double[v1.data.length + v2.data.length];",
      "info" : "ExpressionStatement[6581-6632]:ExpressionStatement[6581-6632]"
    }, {
      "left" : "System.arraycopy(v1.data, 0, data, 0, v1.data.length);",
      "right" : "System.arraycopy(v1.data, 0, data, 0, v1.data.length);",
      "info" : "ExpressionStatement[6641-6695]:ExpressionStatement[6641-6695]"
    }, {
      "left" : "System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);",
      "right" : "System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);",
      "info" : "ExpressionStatement[6704-6771]:ExpressionStatement[6704-6771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7068-7335]:Block[7068-7335]"
    }, {
      "left" : "final int l1 = v1.data.length;",
      "right" : "final int l1 = v1.data.length;",
      "info" : "VariableDeclarationStatement[7078-7108]:VariableDeclarationStatement[7078-7108]"
    }, {
      "left" : "final int l2 = v2.getDimension();",
      "right" : "final int l2 = v2.getDimension();",
      "info" : "VariableDeclarationStatement[7117-7150]:VariableDeclarationStatement[7117-7150]"
    }, {
      "left" : "data = new double[l1 + l2];",
      "right" : "data = new double[l1 + l2];",
      "info" : "ExpressionStatement[7159-7186]:ExpressionStatement[7159-7186]"
    }, {
      "left" : "System.arraycopy(v1.data, 0, data, 0, l1);",
      "right" : "System.arraycopy(v1.data, 0, data, 0, l1);",
      "info" : "ExpressionStatement[7195-7237]:ExpressionStatement[7195-7237]"
    }, {
      "left" : "for (int i = 0; i < l2; ++i)",
      "right" : "for (int i = 0; i < l2; ++i)",
      "info" : "ForStatement[7246-7329]:ForStatement[7246-7329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7275-7329]:Block[7275-7329]"
    }, {
      "left" : "data[l1 + i] = v2.getEntry(i);",
      "right" : "data[l1 + i] = v2.getEntry(i);",
      "info" : "ExpressionStatement[7289-7319]:ExpressionStatement[7289-7319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7626-7889]:Block[7626-7889]"
    }, {
      "left" : "final int l1 = v1.getDimension();",
      "right" : "final int l1 = v1.getDimension();",
      "info" : "VariableDeclarationStatement[7636-7669]:VariableDeclarationStatement[7636-7669]"
    }, {
      "left" : "final int l2 = v2.data.length;",
      "right" : "final int l2 = v2.data.length;",
      "info" : "VariableDeclarationStatement[7678-7708]:VariableDeclarationStatement[7678-7708]"
    }, {
      "left" : "data = new double[l1 + l2];",
      "right" : "data = new double[l1 + l2];",
      "info" : "ExpressionStatement[7717-7744]:ExpressionStatement[7717-7744]"
    }, {
      "left" : "for (int i = 0; i < l1; ++i)",
      "right" : "for (int i = 0; i < l1; ++i)",
      "info" : "ForStatement[7753-7831]:ForStatement[7753-7831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7782-7831]:Block[7782-7831]"
    }, {
      "left" : "data[i] = v1.getEntry(i);",
      "right" : "data[i] = v1.getEntry(i);",
      "info" : "ExpressionStatement[7796-7821]:ExpressionStatement[7796-7821]"
    }, {
      "left" : "System.arraycopy(v2.data, 0, data, l1, l2);",
      "right" : "System.arraycopy(v2.data, 0, data, l1, l2);",
      "info" : "ExpressionStatement[7840-7883]:ExpressionStatement[7840-7883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8178-8395]:Block[8178-8395]"
    }, {
      "left" : "final int l1 = v1.getDimension();",
      "right" : "final int l1 = v1.getDimension();",
      "info" : "VariableDeclarationStatement[8188-8221]:VariableDeclarationStatement[8188-8221]"
    }, {
      "left" : "final int l2 = v2.length;",
      "right" : "final int l2 = v2.length;",
      "info" : "VariableDeclarationStatement[8230-8255]:VariableDeclarationStatement[8230-8255]"
    }, {
      "left" : "data = new double[l1 + l2];",
      "right" : "data = new double[l1 + l2];",
      "info" : "ExpressionStatement[8264-8291]:ExpressionStatement[8264-8291]"
    }, {
      "left" : "System.arraycopy(v1.data, 0, data, 0, l1);",
      "right" : "System.arraycopy(v1.data, 0, data, 0, l1);",
      "info" : "ExpressionStatement[8300-8342]:ExpressionStatement[8300-8342]"
    }, {
      "left" : "System.arraycopy(v2, 0, data, l1, l2);",
      "right" : "System.arraycopy(v2, 0, data, l1, l2);",
      "info" : "ExpressionStatement[8351-8389]:ExpressionStatement[8351-8389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8684-8901]:Block[8684-8901]"
    }, {
      "left" : "final int l1 = v1.length;",
      "right" : "final int l1 = v1.length;",
      "info" : "VariableDeclarationStatement[8694-8719]:VariableDeclarationStatement[8694-8719]"
    }, {
      "left" : "final int l2 = v2.getDimension();",
      "right" : "final int l2 = v2.getDimension();",
      "info" : "VariableDeclarationStatement[8728-8761]:VariableDeclarationStatement[8728-8761]"
    }, {
      "left" : "data = new double[l1 + l2];",
      "right" : "data = new double[l1 + l2];",
      "info" : "ExpressionStatement[8770-8797]:ExpressionStatement[8770-8797]"
    }, {
      "left" : "System.arraycopy(v1, 0, data, 0, l1);",
      "right" : "System.arraycopy(v1, 0, data, 0, l1);",
      "info" : "ExpressionStatement[8806-8843]:ExpressionStatement[8806-8843]"
    }, {
      "left" : "System.arraycopy(v2.data, 0, data, l1, l2);",
      "right" : "System.arraycopy(v2.data, 0, data, l1, l2);",
      "info" : "ExpressionStatement[8852-8895]:ExpressionStatement[8852-8895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9183-9387]:Block[9183-9387]"
    }, {
      "left" : "final int l1 = v1.length;",
      "right" : "final int l1 = v1.length;",
      "info" : "VariableDeclarationStatement[9193-9218]:VariableDeclarationStatement[9193-9218]"
    }, {
      "left" : "final int l2 = v2.length;",
      "right" : "final int l2 = v2.length;",
      "info" : "VariableDeclarationStatement[9227-9252]:VariableDeclarationStatement[9227-9252]"
    }, {
      "left" : "data = new double[l1 + l2];",
      "right" : "data = new double[l1 + l2];",
      "info" : "ExpressionStatement[9261-9288]:ExpressionStatement[9261-9288]"
    }, {
      "left" : "System.arraycopy(v1, 0, data, 0, l1);",
      "right" : "System.arraycopy(v1, 0, data, 0, l1);",
      "info" : "ExpressionStatement[9297-9334]:ExpressionStatement[9297-9334]"
    }, {
      "left" : "System.arraycopy(v2, 0, data, l1, l2);",
      "right" : "System.arraycopy(v2, 0, data, l1, l2);",
      "info" : "ExpressionStatement[9343-9381]:ExpressionStatement[9343-9381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9451-9506]:Block[9451-9506]"
    }, {
      "left" : "return new ArrayRealVector(this, true);",
      "right" : "return new ArrayRealVector(this, true);",
      "info" : "ReturnStatement[9461-9500]:ReturnStatement[9461-9500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9613-10068]:Block[9613-10068]"
    }, {
      "left" : "if (v instanceof ArrayRealVector)",
      "right" : "if (v instanceof ArrayRealVector)",
      "info" : "IfStatement[9623-10062]:IfStatement[9623-10062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9657-9713]:Block[9657-9713]"
    }, {
      "left" : "return add((ArrayRealVector) v);",
      "right" : "return add((ArrayRealVector) v);",
      "info" : "ReturnStatement[9671-9703]:ReturnStatement[9671-9703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9719-10062]:Block[9719-10062]"
    }, {
      "left" : "checkVectorDimensions(v);",
      "right" : "checkVectorDimensions(v);",
      "info" : "ExpressionStatement[9733-9758]:ExpressionStatement[9733-9758]"
    }, {
      "left" : "double[] out = data.clone();",
      "right" : "double[] out = data.clone();",
      "info" : "VariableDeclarationStatement[9771-9799]:VariableDeclarationStatement[9771-9799]"
    }, {
      "left" : "Iterator<Entry> it = v.sparseIterator();",
      "right" : "Iterator<Entry> it = v.sparseIterator();",
      "info" : "VariableDeclarationStatement[9812-9852]:VariableDeclarationStatement[9812-9852]"
    }, {
      "left" : "Entry e;",
      "right" : "Entry e;",
      "info" : "VariableDeclarationStatement[9865-9873]:VariableDeclarationStatement[9865-9873]"
    }, {
      "left" : "while (it.hasNext() && (e = it.next()) != null)",
      "right" : "while (it.hasNext() && (e = it.next()) != null)",
      "info" : "WhileStatement[9886-10000]:WhileStatement[9886-10000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9934-10000]:Block[9934-10000]"
    }, {
      "left" : "out[e.getIndex()] += e.getValue();",
      "right" : "out[e.getIndex()] += e.getValue();",
      "info" : "ExpressionStatement[9952-9986]:ExpressionStatement[9952-9986]"
    }, {
      "left" : "return new ArrayRealVector(out, false);",
      "right" : "return new ArrayRealVector(out, false);",
      "info" : "ReturnStatement[10013-10052]:ReturnStatement[10013-10052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10173-10392]:Block[10173-10392]"
    }, {
      "left" : "checkVectorDimensions(v.length);",
      "right" : "checkVectorDimensions(v.length);",
      "info" : "ExpressionStatement[10183-10215]:ExpressionStatement[10183-10215]"
    }, {
      "left" : "double[] out = data.clone();",
      "right" : "double[] out = data.clone();",
      "info" : "VariableDeclarationStatement[10224-10252]:VariableDeclarationStatement[10224-10252]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[10261-10338]:ForStatement[10261-10338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10299-10338]:Block[10299-10338]"
    }, {
      "left" : "out[i] += v[i];",
      "right" : "out[i] += v[i];",
      "info" : "ExpressionStatement[10313-10328]:ExpressionStatement[10313-10328]"
    }, {
      "left" : "return new ArrayRealVector(out, false);",
      "right" : "return new ArrayRealVector(out, false);",
      "info" : "ReturnStatement[10347-10386]:ReturnStatement[10347-10386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10671-10724]:Block[10671-10724]"
    }, {
      "left" : "return (ArrayRealVector) add(v.data);",
      "right" : "return (ArrayRealVector) add(v.data);",
      "info" : "ReturnStatement[10681-10718]:ReturnStatement[10681-10718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10836-11295]:Block[10836-11295]"
    }, {
      "left" : "if (v instanceof ArrayRealVector)",
      "right" : "if (v instanceof ArrayRealVector)",
      "info" : "IfStatement[10846-11289]:IfStatement[10846-11289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10880-10941]:Block[10880-10941]"
    }, {
      "left" : "return subtract((ArrayRealVector) v);",
      "right" : "return subtract((ArrayRealVector) v);",
      "info" : "ReturnStatement[10894-10931]:ReturnStatement[10894-10931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10947-11289]:Block[10947-11289]"
    }, {
      "left" : "checkVectorDimensions(v);",
      "right" : "checkVectorDimensions(v);",
      "info" : "ExpressionStatement[10961-10986]:ExpressionStatement[10961-10986]"
    }, {
      "left" : "double[] out = data.clone();",
      "right" : "double[] out = data.clone();",
      "info" : "VariableDeclarationStatement[10999-11027]:VariableDeclarationStatement[10999-11027]"
    }, {
      "left" : "Iterator<Entry> it = v.sparseIterator();",
      "right" : "Iterator<Entry> it = v.sparseIterator();",
      "info" : "VariableDeclarationStatement[11040-11080]:VariableDeclarationStatement[11040-11080]"
    }, {
      "left" : "Entry e;",
      "right" : "Entry e;",
      "info" : "VariableDeclarationStatement[11093-11101]:VariableDeclarationStatement[11093-11101]"
    }, {
      "left" : "while(it.hasNext() && (e = it.next()) != null)",
      "right" : "while(it.hasNext() && (e = it.next()) != null)",
      "info" : "WhileStatement[11114-11227]:WhileStatement[11114-11227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11161-11227]:Block[11161-11227]"
    }, {
      "left" : "out[e.getIndex()] -= e.getValue();",
      "right" : "out[e.getIndex()] -= e.getValue();",
      "info" : "ExpressionStatement[11179-11213]:ExpressionStatement[11179-11213]"
    }, {
      "left" : "return new ArrayRealVector(out, false);",
      "right" : "return new ArrayRealVector(out, false);",
      "info" : "ReturnStatement[11240-11279]:ReturnStatement[11240-11279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11405-11624]:Block[11405-11624]"
    }, {
      "left" : "checkVectorDimensions(v.length);",
      "right" : "checkVectorDimensions(v.length);",
      "info" : "ExpressionStatement[11415-11447]:ExpressionStatement[11415-11447]"
    }, {
      "left" : "double[] out = data.clone();",
      "right" : "double[] out = data.clone();",
      "info" : "VariableDeclarationStatement[11456-11484]:VariableDeclarationStatement[11456-11484]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[11493-11570]:ForStatement[11493-11570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11531-11570]:Block[11531-11570]"
    }, {
      "left" : "out[i] -= v[i];",
      "right" : "out[i] -= v[i];",
      "info" : "ExpressionStatement[11545-11560]:ExpressionStatement[11545-11560]"
    }, {
      "left" : "return new ArrayRealVector(out, false);",
      "right" : "return new ArrayRealVector(out, false);",
      "info" : "ReturnStatement[11579-11618]:ReturnStatement[11579-11618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11904-11962]:Block[11904-11962]"
    }, {
      "left" : "return (ArrayRealVector) subtract(v.data);",
      "right" : "return (ArrayRealVector) subtract(v.data);",
      "info" : "ReturnStatement[11914-11956]:ReturnStatement[11914-11956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12034-12155]:Block[12034-12155]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[12044-12128]:ForStatement[12044-12128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12082-12128]:Block[12082-12128]"
    }, {
      "left" : "data[i] = data[i] + d;",
      "right" : "data[i] = data[i] + d;",
      "info" : "ExpressionStatement[12096-12118]:ExpressionStatement[12096-12118]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[12137-12149]:ReturnStatement[12137-12149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12232-12353]:Block[12232-12353]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[12242-12326]:ForStatement[12242-12326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12280-12326]:Block[12280-12326]"
    }, {
      "left" : "data[i] = data[i] - d;",
      "right" : "data[i] = data[i] - d;",
      "info" : "ExpressionStatement[12294-12316]:ExpressionStatement[12294-12316]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[12335-12347]:ReturnStatement[12335-12347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12430-12551]:Block[12430-12551]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[12440-12524]:ForStatement[12440-12524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12478-12524]:Block[12478-12524]"
    }, {
      "left" : "data[i] = data[i] * d;",
      "right" : "data[i] = data[i] * d;",
      "info" : "ExpressionStatement[12492-12514]:ExpressionStatement[12492-12514]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[12533-12545]:ReturnStatement[12533-12545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12626-12747]:Block[12626-12747]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[12636-12720]:ForStatement[12636-12720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12674-12720]:Block[12674-12720]"
    }, {
      "left" : "data[i] = data[i] / d;",
      "right" : "data[i] = data[i] / d;",
      "info" : "ExpressionStatement[12688-12710]:ExpressionStatement[12688-12710]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[12729-12741]:ReturnStatement[12729-12741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12819-12949]:Block[12819-12949]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[12829-12922]:ForStatement[12829-12922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12867-12922]:Block[12867-12922]"
    }, {
      "left" : "data[i] = Math.pow(data[i], d);",
      "right" : "data[i] = Math.pow(data[i], d);",
      "info" : "ExpressionStatement[12881-12912]:ExpressionStatement[12881-12912]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[12931-12943]:ReturnStatement[12931-12943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13013-13140]:Block[13013-13140]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[13023-13113]:ForStatement[13023-13113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13061-13113]:Block[13061-13113]"
    }, {
      "left" : "data[i] = Math.exp(data[i]);",
      "right" : "data[i] = Math.exp(data[i]);",
      "info" : "ExpressionStatement[13075-13103]:ExpressionStatement[13075-13103]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[13122-13134]:ReturnStatement[13122-13134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13206-13335]:Block[13206-13335]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[13216-13308]:ForStatement[13216-13308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13254-13308]:Block[13254-13308]"
    }, {
      "left" : "data[i] = Math.expm1(data[i]);",
      "right" : "data[i] = Math.expm1(data[i]);",
      "info" : "ExpressionStatement[13268-13298]:ExpressionStatement[13268-13298]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[13317-13329]:ReturnStatement[13317-13329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13399-13526]:Block[13399-13526]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[13409-13499]:ForStatement[13409-13499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13447-13499]:Block[13447-13499]"
    }, {
      "left" : "data[i] = Math.log(data[i]);",
      "right" : "data[i] = Math.log(data[i]);",
      "info" : "ExpressionStatement[13461-13489]:ExpressionStatement[13461-13489]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[13508-13520]:ReturnStatement[13508-13520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13592-13721]:Block[13592-13721]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[13602-13694]:ForStatement[13602-13694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13640-13694]:Block[13640-13694]"
    }, {
      "left" : "data[i] = Math.log10(data[i]);",
      "right" : "data[i] = Math.log10(data[i]);",
      "info" : "ExpressionStatement[13654-13684]:ExpressionStatement[13654-13684]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[13703-13715]:ReturnStatement[13703-13715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13787-13916]:Block[13787-13916]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[13797-13889]:ForStatement[13797-13889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13835-13889]:Block[13835-13889]"
    }, {
      "left" : "data[i] = Math.log1p(data[i]);",
      "right" : "data[i] = Math.log1p(data[i]);",
      "info" : "ExpressionStatement[13849-13879]:ExpressionStatement[13849-13879]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[13898-13910]:ReturnStatement[13898-13910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13981-14109]:Block[13981-14109]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[13991-14082]:ForStatement[13991-14082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14029-14082]:Block[14029-14082]"
    }, {
      "left" : "data[i] = Math.cosh(data[i]);",
      "right" : "data[i] = Math.cosh(data[i]);",
      "info" : "ExpressionStatement[14043-14072]:ExpressionStatement[14043-14072]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[14091-14103]:ReturnStatement[14091-14103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14174-14302]:Block[14174-14302]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[14184-14275]:ForStatement[14184-14275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14222-14275]:Block[14222-14275]"
    }, {
      "left" : "data[i] = Math.sinh(data[i]);",
      "right" : "data[i] = Math.sinh(data[i]);",
      "info" : "ExpressionStatement[14236-14265]:ExpressionStatement[14236-14265]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[14284-14296]:ReturnStatement[14284-14296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14367-14495]:Block[14367-14495]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[14377-14468]:ForStatement[14377-14468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14415-14468]:Block[14415-14468]"
    }, {
      "left" : "data[i] = Math.tanh(data[i]);",
      "right" : "data[i] = Math.tanh(data[i]);",
      "info" : "ExpressionStatement[14429-14458]:ExpressionStatement[14429-14458]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[14477-14489]:ReturnStatement[14477-14489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14559-14686]:Block[14559-14686]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[14569-14659]:ForStatement[14569-14659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14607-14659]:Block[14607-14659]"
    }, {
      "left" : "data[i] = Math.cos(data[i]);",
      "right" : "data[i] = Math.cos(data[i]);",
      "info" : "ExpressionStatement[14621-14649]:ExpressionStatement[14621-14649]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[14668-14680]:ReturnStatement[14668-14680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14750-14877]:Block[14750-14877]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[14760-14850]:ForStatement[14760-14850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14798-14850]:Block[14798-14850]"
    }, {
      "left" : "data[i] = Math.sin(data[i]);",
      "right" : "data[i] = Math.sin(data[i]);",
      "info" : "ExpressionStatement[14812-14840]:ExpressionStatement[14812-14840]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[14859-14871]:ReturnStatement[14859-14871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14941-15068]:Block[14941-15068]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[14951-15041]:ForStatement[14951-15041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14989-15041]:Block[14989-15041]"
    }, {
      "left" : "data[i] = Math.tan(data[i]);",
      "right" : "data[i] = Math.tan(data[i]);",
      "info" : "ExpressionStatement[15003-15031]:ExpressionStatement[15003-15031]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[15050-15062]:ReturnStatement[15050-15062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15133-15261]:Block[15133-15261]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[15143-15234]:ForStatement[15143-15234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15181-15234]:Block[15181-15234]"
    }, {
      "left" : "data[i] = Math.acos(data[i]);",
      "right" : "data[i] = Math.acos(data[i]);",
      "info" : "ExpressionStatement[15195-15224]:ExpressionStatement[15195-15224]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[15243-15255]:ReturnStatement[15243-15255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15326-15454]:Block[15326-15454]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[15336-15427]:ForStatement[15336-15427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15374-15427]:Block[15374-15427]"
    }, {
      "left" : "data[i] = Math.asin(data[i]);",
      "right" : "data[i] = Math.asin(data[i]);",
      "info" : "ExpressionStatement[15388-15417]:ExpressionStatement[15388-15417]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[15436-15448]:ReturnStatement[15436-15448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15519-15647]:Block[15519-15647]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[15529-15620]:ForStatement[15529-15620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15567-15620]:Block[15567-15620]"
    }, {
      "left" : "data[i] = Math.atan(data[i]);",
      "right" : "data[i] = Math.atan(data[i]);",
      "info" : "ExpressionStatement[15581-15610]:ExpressionStatement[15581-15610]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[15629-15641]:ReturnStatement[15629-15641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15711-15834]:Block[15711-15834]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[15721-15807]:ForStatement[15721-15807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15759-15807]:Block[15759-15807]"
    }, {
      "left" : "data[i] = 1.0 / data[i];",
      "right" : "data[i] = 1.0 / data[i];",
      "info" : "ExpressionStatement[15773-15797]:ExpressionStatement[15773-15797]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[15816-15828]:ReturnStatement[15816-15828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15898-16025]:Block[15898-16025]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[15908-15998]:ForStatement[15908-15998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15946-15998]:Block[15946-15998]"
    }, {
      "left" : "data[i] = Math.abs(data[i]);",
      "right" : "data[i] = Math.abs(data[i]);",
      "info" : "ExpressionStatement[15960-15988]:ExpressionStatement[15960-15988]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[16007-16019]:ReturnStatement[16007-16019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16090-16218]:Block[16090-16218]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[16100-16191]:ForStatement[16100-16191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16138-16191]:Block[16138-16191]"
    }, {
      "left" : "data[i] = Math.sqrt(data[i]);",
      "right" : "data[i] = Math.sqrt(data[i]);",
      "info" : "ExpressionStatement[16152-16181]:ExpressionStatement[16152-16181]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[16200-16212]:ReturnStatement[16200-16212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16283-16411]:Block[16283-16411]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[16293-16384]:ForStatement[16293-16384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16331-16384]:Block[16331-16384]"
    }, {
      "left" : "data[i] = Math.cbrt(data[i]);",
      "right" : "data[i] = Math.cbrt(data[i]);",
      "info" : "ExpressionStatement[16345-16374]:ExpressionStatement[16345-16374]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[16393-16405]:ReturnStatement[16393-16405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16476-16604]:Block[16476-16604]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[16486-16577]:ForStatement[16486-16577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16524-16577]:Block[16524-16577]"
    }, {
      "left" : "data[i] = Math.ceil(data[i]);",
      "right" : "data[i] = Math.ceil(data[i]);",
      "info" : "ExpressionStatement[16538-16567]:ExpressionStatement[16538-16567]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[16586-16598]:ReturnStatement[16586-16598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16670-16799]:Block[16670-16799]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[16680-16772]:ForStatement[16680-16772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16718-16772]:Block[16718-16772]"
    }, {
      "left" : "data[i] = Math.floor(data[i]);",
      "right" : "data[i] = Math.floor(data[i]);",
      "info" : "ExpressionStatement[16732-16762]:ExpressionStatement[16732-16762]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[16781-16793]:ReturnStatement[16781-16793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16864-16992]:Block[16864-16992]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[16874-16965]:ForStatement[16874-16965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16912-16965]:Block[16912-16965]"
    }, {
      "left" : "data[i] = Math.rint(data[i]);",
      "right" : "data[i] = Math.rint(data[i]);",
      "info" : "ExpressionStatement[16926-16955]:ExpressionStatement[16926-16955]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[16974-16986]:ReturnStatement[16974-16986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17059-17189]:Block[17059-17189]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[17069-17162]:ForStatement[17069-17162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17107-17162]:Block[17107-17162]"
    }, {
      "left" : "data[i] = Math.signum(data[i]);",
      "right" : "data[i] = Math.signum(data[i]);",
      "info" : "ExpressionStatement[17121-17152]:ExpressionStatement[17121-17152]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[17171-17183]:ReturnStatement[17171-17183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17253-17380]:Block[17253-17380]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[17263-17353]:ForStatement[17263-17353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17301-17353]:Block[17301-17353]"
    }, {
      "left" : "data[i] = Math.ulp(data[i]);",
      "right" : "data[i] = Math.ulp(data[i]);",
      "info" : "ExpressionStatement[17315-17343]:ExpressionStatement[17315-17343]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[17362-17374]:ReturnStatement[17362-17374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17495-17864]:Block[17495-17864]"
    }, {
      "left" : "if (v instanceof ArrayRealVector)",
      "right" : "if (v instanceof ArrayRealVector)",
      "info" : "IfStatement[17505-17858]:IfStatement[17505-17858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17539-17603]:Block[17539-17603]"
    }, {
      "left" : "return ebeMultiply((ArrayRealVector) v);",
      "right" : "return ebeMultiply((ArrayRealVector) v);",
      "info" : "ReturnStatement[17553-17593]:ReturnStatement[17553-17593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17609-17858]:Block[17609-17858]"
    }, {
      "left" : "checkVectorDimensions(v);",
      "right" : "checkVectorDimensions(v);",
      "info" : "ExpressionStatement[17623-17648]:ExpressionStatement[17623-17648]"
    }, {
      "left" : "double[] out = data.clone();",
      "right" : "double[] out = data.clone();",
      "info" : "VariableDeclarationStatement[17661-17689]:VariableDeclarationStatement[17661-17689]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[17702-17796]:ForStatement[17702-17796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17740-17796]:Block[17740-17796]"
    }, {
      "left" : "out[i] *= v.getEntry(i);",
      "right" : "out[i] *= v.getEntry(i);",
      "info" : "ExpressionStatement[17758-17782]:ExpressionStatement[17758-17782]"
    }, {
      "left" : "return new ArrayRealVector(out, false);",
      "right" : "return new ArrayRealVector(out, false);",
      "info" : "ReturnStatement[17809-17848]:ReturnStatement[17809-17848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17977-18196]:Block[17977-18196]"
    }, {
      "left" : "checkVectorDimensions(v.length);",
      "right" : "checkVectorDimensions(v.length);",
      "info" : "ExpressionStatement[17987-18019]:ExpressionStatement[17987-18019]"
    }, {
      "left" : "double[] out = data.clone();",
      "right" : "double[] out = data.clone();",
      "info" : "VariableDeclarationStatement[18028-18056]:VariableDeclarationStatement[18028-18056]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[18065-18142]:ForStatement[18065-18142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18103-18142]:Block[18103-18142]"
    }, {
      "left" : "out[i] *= v[i];",
      "right" : "out[i] *= v[i];",
      "info" : "ExpressionStatement[18117-18132]:ExpressionStatement[18117-18132]"
    }, {
      "left" : "return new ArrayRealVector(out, false);",
      "right" : "return new ArrayRealVector(out, false);",
      "info" : "ReturnStatement[18151-18190]:ReturnStatement[18151-18190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18560-18621]:Block[18560-18621]"
    }, {
      "left" : "return (ArrayRealVector) ebeMultiply(v.data);",
      "right" : "return (ArrayRealVector) ebeMultiply(v.data);",
      "info" : "ReturnStatement[18570-18615]:ReturnStatement[18570-18615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18734-19101]:Block[18734-19101]"
    }, {
      "left" : "if (v instanceof ArrayRealVector)",
      "right" : "if (v instanceof ArrayRealVector)",
      "info" : "IfStatement[18744-19095]:IfStatement[18744-19095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18778-18840]:Block[18778-18840]"
    }, {
      "left" : "return ebeDivide((ArrayRealVector) v);",
      "right" : "return ebeDivide((ArrayRealVector) v);",
      "info" : "ReturnStatement[18792-18830]:ReturnStatement[18792-18830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18846-19095]:Block[18846-19095]"
    }, {
      "left" : "checkVectorDimensions(v);",
      "right" : "checkVectorDimensions(v);",
      "info" : "ExpressionStatement[18860-18885]:ExpressionStatement[18860-18885]"
    }, {
      "left" : "double[] out = data.clone();",
      "right" : "double[] out = data.clone();",
      "info" : "VariableDeclarationStatement[18898-18926]:VariableDeclarationStatement[18898-18926]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[18939-19033]:ForStatement[18939-19033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18977-19033]:Block[18977-19033]"
    }, {
      "left" : "out[i] /= v.getEntry(i);",
      "right" : "out[i] /= v.getEntry(i);",
      "info" : "ExpressionStatement[18995-19019]:ExpressionStatement[18995-19019]"
    }, {
      "left" : "return new ArrayRealVector(out, false);",
      "right" : "return new ArrayRealVector(out, false);",
      "info" : "ReturnStatement[19046-19085]:ReturnStatement[19046-19085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19212-19435]:Block[19212-19435]"
    }, {
      "left" : "checkVectorDimensions(v.length);",
      "right" : "checkVectorDimensions(v.length);",
      "info" : "ExpressionStatement[19222-19254]:ExpressionStatement[19222-19254]"
    }, {
      "left" : "double[] out = data.clone();",
      "right" : "double[] out = data.clone();",
      "info" : "VariableDeclarationStatement[19263-19291]:VariableDeclarationStatement[19263-19291]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[19300-19381]:ForStatement[19300-19381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19338-19381]:Block[19338-19381]"
    }, {
      "left" : "out[i] /= v[i];",
      "right" : "out[i] /= v[i];",
      "info" : "ExpressionStatement[19356-19371]:ExpressionStatement[19356-19371]"
    }, {
      "left" : "return new ArrayRealVector(out, false);",
      "right" : "return new ArrayRealVector(out, false);",
      "info" : "ReturnStatement[19390-19429]:ReturnStatement[19390-19429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19785-19844]:Block[19785-19844]"
    }, {
      "left" : "return (ArrayRealVector) ebeDivide(v.data);",
      "right" : "return (ArrayRealVector) ebeDivide(v.data);",
      "info" : "ReturnStatement[19795-19838]:ReturnStatement[19795-19838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19901-19937]:Block[19901-19937]"
    }, {
      "left" : "return data.clone();",
      "right" : "return data.clone();",
      "info" : "ReturnStatement[19911-19931]:ReturnStatement[19911-19931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20142-20170]:Block[20142-20170]"
    }, {
      "left" : "return data;",
      "right" : "return data;",
      "info" : "ReturnStatement[20152-20164]:ReturnStatement[20152-20164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20280-20707]:Block[20280-20707]"
    }, {
      "left" : "if (v instanceof ArrayRealVector)",
      "right" : "if (v instanceof ArrayRealVector)",
      "info" : "IfStatement[20290-20701]:IfStatement[20290-20701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20324-20387]:Block[20324-20387]"
    }, {
      "left" : "return dotProduct((ArrayRealVector) v);",
      "right" : "return dotProduct((ArrayRealVector) v);",
      "info" : "ReturnStatement[20338-20377]:ReturnStatement[20338-20377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20393-20701]:Block[20393-20701]"
    }, {
      "left" : "checkVectorDimensions(v);",
      "right" : "checkVectorDimensions(v);",
      "info" : "ExpressionStatement[20407-20432]:ExpressionStatement[20407-20432]"
    }, {
      "left" : "double dot = 0;",
      "right" : "double dot = 0;",
      "info" : "VariableDeclarationStatement[20445-20460]:VariableDeclarationStatement[20445-20460]"
    }, {
      "left" : "Iterator<Entry> it = v.sparseIterator();",
      "right" : "Iterator<Entry> it = v.sparseIterator();",
      "info" : "VariableDeclarationStatement[20473-20513]:VariableDeclarationStatement[20473-20513]"
    }, {
      "left" : "Entry e;",
      "right" : "Entry e;",
      "info" : "VariableDeclarationStatement[20526-20534]:VariableDeclarationStatement[20526-20534]"
    }, {
      "left" : "while(it.hasNext() && (e = it.next()) != null)",
      "right" : "while(it.hasNext() && (e = it.next()) != null)",
      "info" : "WhileStatement[20547-20667]:WhileStatement[20547-20667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20594-20667]:Block[20594-20667]"
    }, {
      "left" : "dot += data[e.getIndex()] * e.getValue();",
      "right" : "dot += data[e.getIndex()] * e.getValue();",
      "info" : "ExpressionStatement[20612-20653]:ExpressionStatement[20612-20653]"
    }, {
      "left" : "return dot;",
      "right" : "return dot;",
      "info" : "ReturnStatement[20680-20691]:ReturnStatement[20680-20691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20815-21000]:Block[20815-21000]"
    }, {
      "left" : "checkVectorDimensions(v.length);",
      "right" : "checkVectorDimensions(v.length);",
      "info" : "ExpressionStatement[20825-20857]:ExpressionStatement[20825-20857]"
    }, {
      "left" : "double dot = 0;",
      "right" : "double dot = 0;",
      "info" : "VariableDeclarationStatement[20866-20881]:VariableDeclarationStatement[20866-20881]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[20890-20974]:ForStatement[20890-20974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20928-20974]:Block[20928-20974]"
    }, {
      "left" : "dot += data[i] * v[i];",
      "right" : "dot += data[i] * v[i];",
      "info" : "ExpressionStatement[20942-20964]:ExpressionStatement[20942-20964]"
    }, {
      "left" : "return dot;",
      "right" : "return dot;",
      "info" : "ReturnStatement[20983-20994]:ReturnStatement[20983-20994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21341-21383]:Block[21341-21383]"
    }, {
      "left" : "return dotProduct(v.data);",
      "right" : "return dotProduct(v.data);",
      "info" : "ReturnStatement[21351-21377]:ReturnStatement[21351-21377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21452-21582]:Block[21452-21582]"
    }, {
      "left" : "double sum = 0;",
      "right" : "double sum = 0;",
      "info" : "VariableDeclarationStatement[21462-21477]:VariableDeclarationStatement[21462-21477]"
    }, {
      "left" : "for (double a : data)",
      "right" : "for (double a : data)",
      "info" : "EnhancedForStatement[21486-21545]:EnhancedForStatement[21486-21545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21508-21545]:Block[21508-21545]"
    }, {
      "left" : "sum += a * a;",
      "right" : "sum += a * a;",
      "info" : "ExpressionStatement[21522-21535]:ExpressionStatement[21522-21535]"
    }, {
      "left" : "return Math.sqrt(sum);",
      "right" : "return Math.sqrt(sum);",
      "info" : "ReturnStatement[21554-21576]:ReturnStatement[21554-21576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21653-21778]:Block[21653-21778]"
    }, {
      "left" : "double sum = 0;",
      "right" : "double sum = 0;",
      "info" : "VariableDeclarationStatement[21663-21678]:VariableDeclarationStatement[21663-21678]"
    }, {
      "left" : "for (double a : data)",
      "right" : "for (double a : data)",
      "info" : "EnhancedForStatement[21687-21752]:EnhancedForStatement[21687-21752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21709-21752]:Block[21709-21752]"
    }, {
      "left" : "sum += Math.abs(a);",
      "right" : "sum += Math.abs(a);",
      "info" : "ExpressionStatement[21723-21742]:ExpressionStatement[21723-21742]"
    }, {
      "left" : "return sum;",
      "right" : "return sum;",
      "info" : "ReturnStatement[21761-21772]:ReturnStatement[21761-21772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22102-22500]:Block[22101-22499]"
    }, {
      "left" : "if (v instanceof ArrayRealVector)",
      "right" : "if (v instanceof ArrayRealVector)",
      "info" : "IfStatement[22112-22494]:IfStatement[22111-22493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22146-22210]:Block[22145-22209]"
    }, {
      "left" : "return getDistance((ArrayRealVector) v);",
      "right" : "return getDistance((ArrayRealVector) v);",
      "info" : "ReturnStatement[22160-22200]:ReturnStatement[22159-22199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22216-22494]:Block[22215-22493]"
    }, {
      "left" : "checkVectorDimensions(v);",
      "right" : "checkVectorDimensions(v);",
      "info" : "ExpressionStatement[22230-22255]:ExpressionStatement[22229-22254]"
    }, {
      "left" : "double sum = 0;",
      "right" : "double sum = 0;",
      "info" : "VariableDeclarationStatement[22268-22283]:VariableDeclarationStatement[22267-22282]"
    }, {
      "left" : "for (int i = 0; i < data.length; ++i)",
      "right" : "for (int i = 0; i < data.length; ++i)",
      "info" : "ForStatement[22296-22449]:ForStatement[22295-22448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22334-22449]:Block[22333-22448]"
    }, {
      "left" : "final double delta = data[i] - v.getEntry(i);",
      "right" : "final double delta = data[i] - v.getEntry(i);",
      "info" : "VariableDeclarationStatement[22352-22397]:VariableDeclarationStatement[22351-22396]"
    }, {
      "left" : "sum += delta * delta;",
      "right" : "sum += delta * delta;",
      "info" : "ExpressionStatement[22414-22435]:ExpressionStatement[22413-22434]"
    }, {
      "left" : "return Math.sqrt(sum);",
      "right" : "return Math.sqrt(sum);",
      "info" : "ReturnStatement[22462-22484]:ReturnStatement[22461-22483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22609-22853]:Block[22608-22852]"
    }, {
      "left" : "checkVectorDimensions(v.length);",
      "right" : "checkVectorDimensions(v.length);",
      "info" : "ExpressionStatement[22619-22651]:ExpressionStatement[22618-22650]"
    }, {
      "left" : "double sum = 0;",
      "right" : "double sum = 0;",
      "info" : "VariableDeclarationStatement[22660-22675]:VariableDeclarationStatement[22659-22674]"
    }, {
      "left" : "for (int i = 0; i < data.length; ++i)",
      "right" : "for (int i = 0; i < data.length; ++i)",
      "info" : "ForStatement[22684-22816]:ForStatement[22683-22815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22722-22816]:Block[22721-22815]"
    }, {
      "left" : "final double delta = data[i] - v[i];",
      "right" : "final double delta = data[i] - v[i];",
      "info" : "VariableDeclarationStatement[22736-22772]:VariableDeclarationStatement[22735-22771]"
    }, {
      "left" : "sum += delta * delta;",
      "right" : "sum += delta * delta;",
      "info" : "ExpressionStatement[22785-22806]:ExpressionStatement[22784-22805]"
    }, {
      "left" : "return Math.sqrt(sum);",
      "right" : "return Math.sqrt(sum);",
      "info" : "ReturnStatement[22825-22847]:ReturnStatement[22824-22846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23504-23547]:Block[23503-23546]"
    }, {
      "left" : "return getDistance(v.data);",
      "right" : "return getDistance(v.data);",
      "info" : "ReturnStatement[23514-23541]:ReturnStatement[23513-23540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23660-24051]:Block[23659-24050]"
    }, {
      "left" : "if (v instanceof ArrayRealVector)",
      "right" : "if (v instanceof ArrayRealVector)",
      "info" : "IfStatement[23670-24045]:IfStatement[23669-24044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23704-23770]:Block[23703-23769]"
    }, {
      "left" : "return getL1Distance((ArrayRealVector) v);",
      "right" : "return getL1Distance((ArrayRealVector) v);",
      "info" : "ReturnStatement[23718-23760]:ReturnStatement[23717-23759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23776-24045]:Block[23775-24044]"
    }, {
      "left" : "checkVectorDimensions(v);",
      "right" : "checkVectorDimensions(v);",
      "info" : "ExpressionStatement[23790-23815]:ExpressionStatement[23789-23814]"
    }, {
      "left" : "double sum = 0;",
      "right" : "double sum = 0;",
      "info" : "VariableDeclarationStatement[23828-23843]:VariableDeclarationStatement[23827-23842]"
    }, {
      "left" : "for (int i = 0; i < data.length; ++i)",
      "right" : "for (int i = 0; i < data.length; ++i)",
      "info" : "ForStatement[23856-24011]:ForStatement[23855-24010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23894-24011]:Block[23893-24010]"
    }, {
      "left" : "final double delta = data[i] - v.getEntry(i);",
      "right" : "final double delta = data[i] - v.getEntry(i);",
      "info" : "VariableDeclarationStatement[23912-23957]:VariableDeclarationStatement[23911-23956]"
    }, {
      "left" : "sum += Math.abs(delta);",
      "right" : "sum += Math.abs(delta);",
      "info" : "ExpressionStatement[23974-23997]:ExpressionStatement[23973-23996]"
    }, {
      "left" : "return sum;",
      "right" : "return sum;",
      "info" : "ReturnStatement[24024-24035]:ReturnStatement[24023-24034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24162-24397]:Block[24161-24396]"
    }, {
      "left" : "checkVectorDimensions(v.length);",
      "right" : "checkVectorDimensions(v.length);",
      "info" : "ExpressionStatement[24172-24204]:ExpressionStatement[24171-24203]"
    }, {
      "left" : "double sum = 0;",
      "right" : "double sum = 0;",
      "info" : "VariableDeclarationStatement[24213-24228]:VariableDeclarationStatement[24212-24227]"
    }, {
      "left" : "for (int i = 0; i < data.length; ++i)",
      "right" : "for (int i = 0; i < data.length; ++i)",
      "info" : "ForStatement[24237-24371]:ForStatement[24236-24370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24275-24371]:Block[24274-24370]"
    }, {
      "left" : "final double delta = data[i] - v[i];",
      "right" : "final double delta = data[i] - v[i];",
      "info" : "VariableDeclarationStatement[24289-24325]:VariableDeclarationStatement[24288-24324]"
    }, {
      "left" : "sum += Math.abs(delta);",
      "right" : "sum += Math.abs(delta);",
      "info" : "ExpressionStatement[24338-24361]:ExpressionStatement[24337-24360]"
    }, {
      "left" : "return sum;",
      "right" : "return sum;",
      "info" : "ReturnStatement[24380-24391]:ReturnStatement[24379-24390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25028-25073]:Block[25027-25072]"
    }, {
      "left" : "return getL1Distance(v.data);",
      "right" : "return getL1Distance(v.data);",
      "info" : "ReturnStatement[25038-25067]:ReturnStatement[25037-25066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25188-25595]:Block[25187-25594]"
    }, {
      "left" : "if (v instanceof ArrayRealVector)",
      "right" : "if (v instanceof ArrayRealVector)",
      "info" : "IfStatement[25198-25589]:IfStatement[25197-25588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25232-25300]:Block[25231-25299]"
    }, {
      "left" : "return getLInfDistance((ArrayRealVector) v);",
      "right" : "return getLInfDistance((ArrayRealVector) v);",
      "info" : "ReturnStatement[25246-25290]:ReturnStatement[25245-25289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25306-25589]:Block[25305-25588]"
    }, {
      "left" : "checkVectorDimensions(v);",
      "right" : "checkVectorDimensions(v);",
      "info" : "ExpressionStatement[25320-25345]:ExpressionStatement[25319-25344]"
    }, {
      "left" : "double max = 0;",
      "right" : "double max = 0;",
      "info" : "VariableDeclarationStatement[25358-25373]:VariableDeclarationStatement[25357-25372]"
    }, {
      "left" : "for (int i = 0; i < data.length; ++i)",
      "right" : "for (int i = 0; i < data.length; ++i)",
      "info" : "ForStatement[25386-25555]:ForStatement[25385-25554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25424-25555]:Block[25423-25554]"
    }, {
      "left" : "final double delta = data[i] - v.getEntry(i);",
      "right" : "final double delta = data[i] - v.getEntry(i);",
      "info" : "VariableDeclarationStatement[25442-25487]:VariableDeclarationStatement[25441-25486]"
    }, {
      "left" : "max = Math.max(max, Math.abs(delta));",
      "right" : "max = Math.max(max, Math.abs(delta));",
      "info" : "ExpressionStatement[25504-25541]:ExpressionStatement[25503-25540]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[25568-25579]:ReturnStatement[25567-25578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25708-25957]:Block[25707-25956]"
    }, {
      "left" : "checkVectorDimensions(v.length);",
      "right" : "checkVectorDimensions(v.length);",
      "info" : "ExpressionStatement[25718-25750]:ExpressionStatement[25717-25749]"
    }, {
      "left" : "double max = 0;",
      "right" : "double max = 0;",
      "info" : "VariableDeclarationStatement[25759-25774]:VariableDeclarationStatement[25758-25773]"
    }, {
      "left" : "for (int i = 0; i < data.length; ++i)",
      "right" : "for (int i = 0; i < data.length; ++i)",
      "info" : "ForStatement[25783-25931]:ForStatement[25782-25930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25821-25931]:Block[25820-25930]"
    }, {
      "left" : "final double delta = data[i] - v[i];",
      "right" : "final double delta = data[i] - v[i];",
      "info" : "VariableDeclarationStatement[25835-25871]:VariableDeclarationStatement[25834-25870]"
    }, {
      "left" : "max = Math.max(max, Math.abs(delta));",
      "right" : "max = Math.max(max, Math.abs(delta));",
      "info" : "ExpressionStatement[25884-25921]:ExpressionStatement[25883-25920]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[25940-25951]:ReturnStatement[25939-25950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26596-26643]:Block[26595-26642]"
    }, {
      "left" : "return getLInfDistance(v.data);",
      "right" : "return getLInfDistance(v.data);",
      "info" : "ReturnStatement[26606-26637]:ReturnStatement[26605-26636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26732-26924]:Block[26731-26923]"
    }, {
      "left" : "final double norm = getNorm();",
      "right" : "final double norm = getNorm();",
      "info" : "VariableDeclarationStatement[26742-26772]:VariableDeclarationStatement[26741-26771]"
    }, {
      "left" : "if (norm == 0)",
      "right" : "if (norm == 0)",
      "info" : "IfStatement[26781-26886]:IfStatement[26780-26885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26796-26886]:Block[26795-26885]"
    }, {
      "left" : "throw MathRuntimeException.createArithmeticException(\"zero norm\");",
      "right" : "throw MathRuntimeException.createArithmeticException(\"zero norm\");",
      "info" : "ThrowStatement[26810-26876]:ThrowStatement[26809-26875]"
    }, {
      "left" : "return mapDivide(norm);",
      "right" : "return mapDivide(norm);",
      "info" : "ReturnStatement[26895-26918]:ReturnStatement[26894-26917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27004-27221]:Block[27003-27220]"
    }, {
      "left" : "final double norm = getNorm();",
      "right" : "final double norm = getNorm();",
      "info" : "VariableDeclarationStatement[27014-27044]:VariableDeclarationStatement[27013-27043]"
    }, {
      "left" : "if (norm == 0)",
      "right" : "if (norm == 0)",
      "info" : "IfStatement[27053-27184]:IfStatement[27052-27183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27068-27184]:Block[27067-27183]"
    }, {
      "left" : "throw MathRuntimeException.createArithmeticException(\"cannot normalize a zero norm vector\");",
      "right" : "throw MathRuntimeException.createArithmeticException(\"cannot normalize a zero norm vector\");",
      "info" : "ThrowStatement[27082-27174]:ThrowStatement[27081-27173]"
    }, {
      "left" : "mapDivideToSelf(norm);",
      "right" : "mapDivideToSelf(norm);",
      "info" : "ExpressionStatement[27193-27215]:ExpressionStatement[27192-27214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27295-27365]:Block[27294-27364]"
    }, {
      "left" : "return v.mapMultiply(dotProduct(v) / v.dotProduct(v));",
      "right" : "return v.mapMultiply(dotProduct(v) / v.dotProduct(v));",
      "info" : "ReturnStatement[27305-27359]:ReturnStatement[27304-27358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27437-27502]:Block[27436-27501]"
    }, {
      "left" : "return projection(new ArrayRealVector(v, false));",
      "right" : "return projection(new ArrayRealVector(v, false));",
      "info" : "ReturnStatement[27447-27496]:ReturnStatement[27446-27495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27827-27915]:Block[27826-27914]"
    }, {
      "left" : "return (ArrayRealVector) v.mapMultiply(dotProduct(v) / v.dotProduct(v));",
      "right" : "return (ArrayRealVector) v.mapMultiply(dotProduct(v) / v.dotProduct(v));",
      "info" : "ReturnStatement[27837-27909]:ReturnStatement[27836-27908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28031-28540]:Block[28030-28539]"
    }, {
      "left" : "if (v instanceof ArrayRealVector)",
      "right" : "if (v instanceof ArrayRealVector)",
      "info" : "IfStatement[28041-28534]:IfStatement[28040-28533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28075-28140]:Block[28074-28139]"
    }, {
      "left" : "return outerProduct((ArrayRealVector) v);",
      "right" : "return outerProduct((ArrayRealVector) v);",
      "info" : "ReturnStatement[28089-28130]:ReturnStatement[28088-28129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28146-28534]:Block[28145-28533]"
    }, {
      "left" : "checkVectorDimensions(v);",
      "right" : "checkVectorDimensions(v);",
      "info" : "ExpressionStatement[28160-28185]:ExpressionStatement[28159-28184]"
    }, {
      "left" : "final int m = data.length;",
      "right" : "final int m = data.length;",
      "info" : "VariableDeclarationStatement[28198-28224]:VariableDeclarationStatement[28197-28223]"
    }, {
      "left" : "final RealMatrix out = MatrixUtils.createRealMatrix(m, m);",
      "right" : "final RealMatrix out = MatrixUtils.createRealMatrix(m, m);",
      "info" : "VariableDeclarationStatement[28237-28295]:VariableDeclarationStatement[28236-28294]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[28308-28500]:ForStatement[28307-28499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28346-28500]:Block[28345-28499]"
    }, {
      "left" : "for (int j = 0; j < data.length; j++)",
      "right" : "for (int j = 0; j < data.length; j++)",
      "info" : "ForStatement[28364-28486]:ForStatement[28363-28485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28402-28486]:Block[28401-28485]"
    }, {
      "left" : "out.setEntry(i, j, data[i] * v.getEntry(j));",
      "right" : "out.setEntry(i, j, data[i] * v.getEntry(j));",
      "info" : "ExpressionStatement[28424-28468]:ExpressionStatement[28423-28467]"
    }, {
      "left" : "return out;",
      "right" : "return out;",
      "info" : "ReturnStatement[28513-28524]:ReturnStatement[28512-28523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28900-28944]:Block[28899-28943]"
    }, {
      "left" : "return outerProduct(v.data);",
      "right" : "return outerProduct(v.data);",
      "info" : "ReturnStatement[28910-28938]:ReturnStatement[28909-28937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29058-29404]:Block[29057-29403]"
    }, {
      "left" : "checkVectorDimensions(v.length);",
      "right" : "checkVectorDimensions(v.length);",
      "info" : "ExpressionStatement[29068-29100]:ExpressionStatement[29067-29099]"
    }, {
      "left" : "final int m = data.length;",
      "right" : "final int m = data.length;",
      "info" : "VariableDeclarationStatement[29109-29135]:VariableDeclarationStatement[29108-29134]"
    }, {
      "left" : "final RealMatrix out = MatrixUtils.createRealMatrix(m, m);",
      "right" : "final RealMatrix out = MatrixUtils.createRealMatrix(m, m);",
      "info" : "VariableDeclarationStatement[29144-29202]:VariableDeclarationStatement[29143-29201]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[29211-29378]:ForStatement[29210-29377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29249-29378]:Block[29248-29377]"
    }, {
      "left" : "for (int j = 0; j < data.length; j++)",
      "right" : "for (int j = 0; j < data.length; j++)",
      "info" : "ForStatement[29263-29368]:ForStatement[29262-29367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29301-29368]:Block[29300-29367]"
    }, {
      "left" : "out.setEntry(i, j, data[i] * v[j]);",
      "right" : "out.setEntry(i, j, data[i] * v[j]);",
      "info" : "ExpressionStatement[29319-29354]:ExpressionStatement[29318-29353]"
    }, {
      "left" : "return out;",
      "right" : "return out;",
      "info" : "ReturnStatement[29387-29398]:ReturnStatement[29386-29397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29497-29532]:Block[29496-29531]"
    }, {
      "left" : "return data[index];",
      "right" : "return data[index];",
      "info" : "ReturnStatement[29507-29526]:ReturnStatement[29506-29525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29589-29624]:Block[29588-29623]"
    }, {
      "left" : "return data.length;",
      "right" : "return data.length;",
      "info" : "ReturnStatement[29599-29618]:ReturnStatement[29598-29617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29694-29884]:Block[29693-29883]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[29704-29878]:TryStatement[29703-29877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29708-29786]:Block[29707-29785]"
    }, {
      "left" : "return new ArrayRealVector(this, (ArrayRealVector) v);",
      "right" : "return new ArrayRealVector(this, (ArrayRealVector) v);",
      "info" : "ReturnStatement[29722-29776]:ReturnStatement[29721-29775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29818-29878]:Block[29817-29877]"
    }, {
      "left" : "return new ArrayRealVector(this, v);",
      "right" : "return new ArrayRealVector(this, v);",
      "info" : "ReturnStatement[29832-29868]:ReturnStatement[29831-29867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30093-30145]:Block[30092-30144]"
    }, {
      "left" : "return new ArrayRealVector(this, v);",
      "right" : "return new ArrayRealVector(this, v);",
      "info" : "ReturnStatement[30103-30139]:ReturnStatement[30102-30138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30212-30412]:Block[30211-30411]"
    }, {
      "left" : "final double[] out = new double[data.length + 1];",
      "right" : "final double[] out = new double[data.length + 1];",
      "info" : "VariableDeclarationStatement[30222-30271]:VariableDeclarationStatement[30221-30270]"
    }, {
      "left" : "System.arraycopy(data, 0, out, 0, data.length);",
      "right" : "System.arraycopy(data, 0, out, 0, data.length);",
      "info" : "ExpressionStatement[30280-30327]:ExpressionStatement[30279-30326]"
    }, {
      "left" : "out[data.length] = in;",
      "right" : "out[data.length] = in;",
      "info" : "ExpressionStatement[30336-30358]:ExpressionStatement[30335-30357]"
    }, {
      "left" : "return new ArrayRealVector(out, false);",
      "right" : "return new ArrayRealVector(out, false);",
      "info" : "ReturnStatement[30367-30406]:ReturnStatement[30366-30405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30481-30534]:Block[30480-30533]"
    }, {
      "left" : "return new ArrayRealVector(this, in);",
      "right" : "return new ArrayRealVector(this, in);",
      "info" : "ReturnStatement[30491-30528]:ReturnStatement[30490-30527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30614-30896]:Block[30613-30895]"
    }, {
      "left" : "ArrayRealVector out = new ArrayRealVector(n);",
      "right" : "ArrayRealVector out = new ArrayRealVector(n);",
      "info" : "VariableDeclarationStatement[30624-30669]:VariableDeclarationStatement[30623-30668]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[30678-30870]:TryStatement[30677-30869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30682-30752]:Block[30681-30751]"
    }, {
      "left" : "System.arraycopy(data, index, out.data, 0, n);",
      "right" : "System.arraycopy(data, index, out.data, 0, n);",
      "info" : "ExpressionStatement[30696-30742]:ExpressionStatement[30695-30741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30789-30870]:Block[30788-30869]"
    }, {
      "left" : "checkIndex(index);",
      "right" : "checkIndex(index);",
      "info" : "ExpressionStatement[30803-30821]:ExpressionStatement[30802-30820]"
    }, {
      "left" : "checkIndex(index + n - 1);",
      "right" : "checkIndex(index + n - 1);",
      "info" : "ExpressionStatement[30834-30860]:ExpressionStatement[30833-30859]"
    }, {
      "left" : "return out;",
      "right" : "return out;",
      "info" : "ReturnStatement[30879-30890]:ReturnStatement[30878-30889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30973-31116]:Block[30972-31115]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[30983-31110]:TryStatement[30982-31109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30987-31031]:Block[30986-31030]"
    }, {
      "left" : "data[index] = value;",
      "right" : "data[index] = value;",
      "info" : "ExpressionStatement[31001-31021]:ExpressionStatement[31000-31020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31068-31110]:Block[31067-31109]"
    }, {
      "left" : "checkIndex(index);",
      "right" : "checkIndex(index);",
      "info" : "ExpressionStatement[31082-31100]:ExpressionStatement[31081-31099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31197-31631]:Block[31196-31630]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[31207-31625]:TryStatement[31206-31624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31211-31492]:Block[31210-31491]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[31225-31482]:TryStatement[31224-31481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31229-31293]:Block[31228-31292]"
    }, {
      "left" : "set(index, (ArrayRealVector) v);",
      "right" : "set(index, (ArrayRealVector) v);",
      "info" : "ExpressionStatement[31247-31279]:ExpressionStatement[31246-31278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31325-31482]:Block[31324-31481]"
    }, {
      "left" : "for (int i = index; i < index + v.getDimension(); ++i)",
      "right" : "for (int i = index; i < index + v.getDimension(); ++i)",
      "info" : "ForStatement[31343-31468]:ForStatement[31342-31467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31398-31468]:Block[31397-31467]"
    }, {
      "left" : "data[i] = v.getEntry(i-index);",
      "right" : "data[i] = v.getEntry(i-index);",
      "info" : "ExpressionStatement[31420-31450]:ExpressionStatement[31419-31449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31529-31625]:Block[31528-31624]"
    }, {
      "left" : "checkIndex(index);",
      "right" : "checkIndex(index);",
      "info" : "ExpressionStatement[31543-31561]:ExpressionStatement[31542-31560]"
    }, {
      "left" : "checkIndex(index + v.getDimension() - 1);",
      "right" : "checkIndex(index + v.getDimension() - 1);",
      "info" : "ExpressionStatement[31574-31615]:ExpressionStatement[31573-31614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31710-31925]:Block[31709-31924]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[31720-31919]:TryStatement[31719-31918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31724-31794]:Block[31723-31793]"
    }, {
      "left" : "System.arraycopy(v, 0, data, index, v.length);",
      "right" : "System.arraycopy(v, 0, data, index, v.length);",
      "info" : "ExpressionStatement[31738-31784]:ExpressionStatement[31737-31783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31831-31919]:Block[31830-31918]"
    }, {
      "left" : "checkIndex(index);",
      "right" : "checkIndex(index);",
      "info" : "ExpressionStatement[31845-31863]:ExpressionStatement[31844-31862]"
    }, {
      "left" : "checkIndex(index + v.length - 1);",
      "right" : "checkIndex(index + v.length - 1);",
      "info" : "ExpressionStatement[31876-31909]:ExpressionStatement[31875-31908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32277-32321]:Block[32276-32320]"
    }, {
      "left" : "setSubVector(index, v.data);",
      "right" : "setSubVector(index, v.data);",
      "info" : "ExpressionStatement[32287-32315]:ExpressionStatement[32286-32314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32382-32423]:Block[32381-32422]"
    }, {
      "left" : "Arrays.fill(data, value);",
      "right" : "Arrays.fill(data, value);",
      "info" : "ExpressionStatement[32392-32417]:ExpressionStatement[32391-32416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32479-32515]:Block[32478-32514]"
    }, {
      "left" : "return data.clone();",
      "right" : "return data.clone();",
      "info" : "ReturnStatement[32489-32509]:ReturnStatement[32488-32508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32584-32635]:Block[32583-32634]"
    }, {
      "left" : "return DEFAULT_FORMAT.format(this);",
      "right" : "return DEFAULT_FORMAT.format(this);",
      "info" : "ReturnStatement[32594-32629]:ReturnStatement[32593-32628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32964-33020]:Block[32963-33019]"
    }, {
      "left" : "checkVectorDimensions(v.getDimension());",
      "right" : "checkVectorDimensions(v.getDimension());",
      "info" : "ExpressionStatement[32974-33014]:ExpressionStatement[32973-33013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33337-33566]:Block[33336-33565]"
    }, {
      "left" : "if (data.length != n)",
      "right" : "if (data.length != n)",
      "info" : "IfStatement[33347-33560]:IfStatement[33346-33559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33369-33560]:Block[33368-33559]"
    }, {
      "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                    \"vector length mismatch: got {0} but expected {1}\",\n                    data.length, n);",
      "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                    \"vector length mismatch: got {0} but expected {1}\",\n                    data.length, n);",
      "info" : "ThrowStatement[33383-33550]:ThrowStatement[33382-33549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33766-33915]:Block[33765-33914]"
    }, {
      "left" : "for (double v : data)",
      "right" : "for (double v : data)",
      "info" : "EnhancedForStatement[33776-33887]:EnhancedForStatement[33775-33886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33798-33887]:Block[33797-33886]"
    }, {
      "left" : "if (Double.isNaN(v))",
      "right" : "if (Double.isNaN(v))",
      "info" : "IfStatement[33812-33877]:IfStatement[33811-33876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33833-33877]:Block[33832-33876]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[33851-33863]:ReturnStatement[33850-33862]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33896-33909]:ReturnStatement[33895-33908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34178-34395]:Block[34177-34394]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[34189-34239]:IfStatement[34188-34238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34202-34239]:Block[34201-34238]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[34216-34229]:ReturnStatement[34215-34228]"
    }, {
      "left" : "for (double v : data)",
      "right" : "for (double v : data)",
      "info" : "EnhancedForStatement[34249-34365]:EnhancedForStatement[34248-34364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34271-34365]:Block[34270-34364]"
    }, {
      "left" : "if (Double.isInfinite(v))",
      "right" : "if (Double.isInfinite(v))",
      "info" : "IfStatement[34285-34355]:IfStatement[34284-34354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34311-34355]:Block[34310-34354]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[34329-34341]:ReturnStatement[34328-34340]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[34375-34388]:ReturnStatement[34374-34387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35283-35774]:Block[35282-35773]"
    }, {
      "left" : "if (this == other)",
      "right" : "if (this == other)",
      "info" : "IfStatement[35292-35341]:IfStatement[35291-35340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35311-35341]:Block[35310-35340]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[35321-35333]:ReturnStatement[35320-35332]"
    }, {
      "left" : "if (other == null || !(other instanceof RealVector))",
      "right" : "if (other == null || !(other instanceof RealVector))",
      "info" : "IfStatement[35349-35433]:IfStatement[35348-35432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35402-35433]:Block[35401-35432]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[35412-35425]:ReturnStatement[35411-35424]"
    }, {
      "left" : "RealVector rhs = (RealVector) other;",
      "right" : "RealVector rhs = (RealVector) other;",
      "info" : "VariableDeclarationStatement[35442-35478]:VariableDeclarationStatement[35441-35477]"
    }, {
      "left" : "if (data.length != rhs.getDimension())",
      "right" : "if (data.length != rhs.getDimension())",
      "info" : "IfStatement[35485-35555]:IfStatement[35484-35554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35524-35555]:Block[35523-35554]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[35534-35547]:ReturnStatement[35533-35546]"
    }, {
      "left" : "if (rhs.isNaN())",
      "right" : "if (rhs.isNaN())",
      "info" : "IfStatement[35563-35618]:IfStatement[35562-35617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35580-35618]:Block[35579-35617]"
    }, {
      "left" : "return this.isNaN();",
      "right" : "return this.isNaN();",
      "info" : "ReturnStatement[35590-35610]:ReturnStatement[35589-35609]"
    }, {
      "left" : "for (int i = 0; i < data.length; ++i)",
      "right" : "for (int i = 0; i < data.length; ++i)",
      "info" : "ForStatement[35626-35749]:ForStatement[35625-35748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35664-35749]:Block[35663-35748]"
    }, {
      "left" : "if (data[i] != rhs.getEntry(i))",
      "right" : "if (data[i] != rhs.getEntry(i))",
      "info" : "IfStatement[35674-35741]:IfStatement[35673-35740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35706-35741]:Block[35705-35740]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[35718-35731]:ReturnStatement[35717-35730]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[35756-35768]:ReturnStatement[35755-35767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35978-36077]:Block[35977-36076]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[35988-36034]:IfStatement[35987-36033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36001-36034]:Block[36000-36033]"
    }, {
      "left" : "return 9;",
      "right" : "return 9;",
      "info" : "ReturnStatement[36015-36024]:ReturnStatement[36014-36023]"
    }, {
      "left" : "return MathUtils.hash(data);",
      "right" : "return MathUtils.hash(data);",
      "info" : "ReturnStatement[36043-36071]:ReturnStatement[36042-36070]"
    } ]
  },
  "interFileMappings" : { }
}