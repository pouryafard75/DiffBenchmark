{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "SimplexTableau",
      "right" : "SimplexTableau",
      "info" : "TypeDeclaration[1494-22990]:TypeDeclaration[1494-22990]"
    }, {
      "left" : "private static final String NEGATIVE_VAR_COLUMN_LABEL = \"x-\";",
      "right" : "private static final String NEGATIVE_VAR_COLUMN_LABEL = \"x-\";",
      "info" : "FieldDeclaration[2454-2558]:FieldDeclaration[2454-2558]"
    }, {
      "left" : "private static final int DEFAULT_ULPS = 10;",
      "right" : "private static final int DEFAULT_ULPS = 10;",
      "info" : "FieldDeclaration[2564-2693]:FieldDeclaration[2564-2693]"
    }, {
      "left" : "private static final long serialVersionUID = -1369660067587938365L;",
      "right" : "private static final long serialVersionUID = -1369660067587938365L;",
      "info" : "FieldDeclaration[2699-2810]:FieldDeclaration[2699-2810]"
    }, {
      "left" : "private final LinearObjectiveFunction f;",
      "right" : "private final LinearObjectiveFunction f;",
      "info" : "FieldDeclaration[2816-2894]:FieldDeclaration[2816-2894]"
    }, {
      "left" : "private final List<LinearConstraint> constraints;",
      "right" : "private final List<LinearConstraint> constraints;",
      "info" : "FieldDeclaration[2900-2980]:FieldDeclaration[2900-2980]"
    }, {
      "left" : "private final boolean restrictToNonNegative;",
      "right" : "private final boolean restrictToNonNegative;",
      "info" : "FieldDeclaration[2986-3099]:FieldDeclaration[2986-3099]"
    }, {
      "left" : "private final List<String> columnLabels = new ArrayList<String>();",
      "right" : "private final List<String> columnLabels = new ArrayList<String>();",
      "info" : "FieldDeclaration[3105-3219]:FieldDeclaration[3105-3219]"
    }, {
      "left" : "private transient RealMatrix tableau;",
      "right" : "private transient RealMatrix tableau;",
      "info" : "FieldDeclaration[3225-3289]:FieldDeclaration[3225-3289]"
    }, {
      "left" : "private final int numDecisionVariables;",
      "right" : "private final int numDecisionVariables;",
      "info" : "FieldDeclaration[3295-3375]:FieldDeclaration[3295-3375]"
    }, {
      "left" : "private final int numSlackVariables;",
      "right" : "private final int numSlackVariables;",
      "info" : "FieldDeclaration[3381-3455]:FieldDeclaration[3381-3455]"
    }, {
      "left" : "private int numArtificialVariables;",
      "right" : "private int numArtificialVariables;",
      "info" : "FieldDeclaration[3461-3539]:FieldDeclaration[3461-3539]"
    }, {
      "left" : "private final double epsilon;",
      "right" : "private final double epsilon;",
      "info" : "FieldDeclaration[3545-3641]:FieldDeclaration[3545-3641]"
    }, {
      "left" : "private final int maxUlps;",
      "right" : "private final int maxUlps;",
      "info" : "FieldDeclaration[3647-3741]:FieldDeclaration[3647-3741]"
    }, {
      "left" : "SimplexTableau(final LinearObjectiveFunction f,\n                   final Collection<LinearConstraint> constraints,\n                   final GoalType goalType, final boolean restrictToNonNegative,\n                   final double epsilon)",
      "right" : "SimplexTableau(final LinearObjectiveFunction f,\n                   final Collection<LinearConstraint> constraints,\n                   final GoalType goalType, final boolean restrictToNonNegative,\n                   final double epsilon)",
      "info" : "MethodDeclaration[3747-4514]:MethodDeclaration[3747-4514]"
    }, {
      "left" : "SimplexTableau(final LinearObjectiveFunction f,\n                   final Collection<LinearConstraint> constraints,\n                   final GoalType goalType, final boolean restrictToNonNegative,\n                   final double epsilon,\n                   final int maxUlps)",
      "right" : "SimplexTableau(final LinearObjectiveFunction f,\n                   final Collection<LinearConstraint> constraints,\n                   final GoalType goalType, final boolean restrictToNonNegative,\n                   final double epsilon,\n                   final int maxUlps)",
      "info" : "MethodDeclaration[4520-6160]:MethodDeclaration[4520-6160]"
    }, {
      "left" : "protected void initializeColumnLabels()",
      "right" : "protected void initializeColumnLabels()",
      "info" : "MethodDeclaration[6166-6832]:MethodDeclaration[6166-6832]"
    }, {
      "left" : "protected RealMatrix createTableau(final boolean maximize)",
      "right" : "protected RealMatrix createTableau(final boolean maximize)",
      "info" : "MethodDeclaration[6838-9768]:MethodDeclaration[6838-9768]"
    }, {
      "left" : "public List<LinearConstraint> normalizeConstraints(Collection<LinearConstraint> originalConstraints)",
      "right" : "public List<LinearConstraint> normalizeConstraints(Collection<LinearConstraint> originalConstraints)",
      "info" : "MethodDeclaration[9774-10331]:MethodDeclaration[9774-10331]"
    }, {
      "left" : "private LinearConstraint normalize(final LinearConstraint constraint)",
      "right" : "private LinearConstraint normalize(final LinearConstraint constraint)",
      "info" : "MethodDeclaration[10337-11041]:MethodDeclaration[10337-11041]"
    }, {
      "left" : "protected final int getNumObjectiveFunctions()",
      "right" : "protected final int getNumObjectiveFunctions()",
      "info" : "MethodDeclaration[11047-11281]:MethodDeclaration[11047-11281]"
    }, {
      "left" : "private int getConstraintTypeCounts(final Relationship relationship)",
      "right" : "private int getConstraintTypeCounts(final Relationship relationship)",
      "info" : "MethodDeclaration[11287-11795]:MethodDeclaration[11287-11795]"
    }, {
      "left" : "protected static double getInvertedCoefficientSum(final RealVector coefficients)",
      "right" : "protected static double getInvertedCoefficientSum(final RealVector coefficients)",
      "info" : "MethodDeclaration[11801-12246]:MethodDeclaration[11801-12246]"
    }, {
      "left" : "protected Integer getBasicRow(final int col)",
      "right" : "protected Integer getBasicRow(final int col)",
      "info" : "MethodDeclaration[12252-12865]:MethodDeclaration[12252-12865]"
    }, {
      "left" : "protected void dropPhase1Objective()",
      "right" : "protected void dropPhase1Objective()",
      "info" : "MethodDeclaration[12871-14428]:MethodDeclaration[12871-14428]"
    }, {
      "left" : "private void copyArray(final double[] src, final double[] dest)",
      "right" : "private void copyArray(final double[] src, final double[] dest)",
      "info" : "MethodDeclaration[14434-14677]:MethodDeclaration[14434-14677]"
    }, {
      "left" : "boolean isOptimal()",
      "right" : "boolean isOptimal()",
      "info" : "MethodDeclaration[14683-15105]:MethodDeclaration[14683-15105]"
    }, {
      "left" : "protected PointValuePair getSolution()",
      "right" : "protected PointValuePair getSolution()",
      "info" : "MethodDeclaration[15111-16826]:MethodDeclaration[15111-16826]"
    }, {
      "left" : "protected void divideRow(final int dividendRow, final double divisor)",
      "right" : "protected void divideRow(final int dividendRow, final double divisor)",
      "info" : "MethodDeclaration[16832-17363]:MethodDeclaration[16832-17363]"
    }, {
      "left" : "protected void subtractRow(final int minuendRow, final int subtrahendRow,\n                               final double multiple)",
      "right" : "protected void subtractRow(final int minuendRow, final int subtrahendRow,\n                               final double multiple)",
      "info" : "MethodDeclaration[17369-18000]:MethodDeclaration[17369-18000]"
    }, {
      "left" : "protected final int getWidth()",
      "right" : "protected final int getWidth()",
      "info" : "MethodDeclaration[18006-18178]:MethodDeclaration[18006-18178]"
    }, {
      "left" : "protected final int getHeight()",
      "right" : "protected final int getHeight()",
      "info" : "MethodDeclaration[18184-18356]:MethodDeclaration[18184-18356]"
    }, {
      "left" : "protected final double getEntry(final int row, final int column)",
      "right" : "protected final double getEntry(final int row, final int column)",
      "info" : "MethodDeclaration[18362-18625]:MethodDeclaration[18362-18625]"
    }, {
      "left" : "protected final void setEntry(final int row, final int column,\n                                  final double value)",
      "right" : "protected final void setEntry(final int row, final int column,\n                                  final double value)",
      "info" : "MethodDeclaration[18631-18942]:MethodDeclaration[18631-18942]"
    }, {
      "left" : "protected final int getSlackVariableOffset()",
      "right" : "protected final int getSlackVariableOffset()",
      "info" : "MethodDeclaration[18948-19183]:MethodDeclaration[18948-19183]"
    }, {
      "left" : "protected final int getArtificialVariableOffset()",
      "right" : "protected final int getArtificialVariableOffset()",
      "info" : "MethodDeclaration[19189-19459]:MethodDeclaration[19189-19459]"
    }, {
      "left" : "protected final int getRhsOffset()",
      "right" : "protected final int getRhsOffset()",
      "info" : "MethodDeclaration[19465-19645]:MethodDeclaration[19465-19645]"
    }, {
      "left" : "protected final int getNumDecisionVariables()",
      "right" : "protected final int getNumDecisionVariables()",
      "info" : "MethodDeclaration[19651-20096]:MethodDeclaration[19651-20096]"
    }, {
      "left" : "protected final int getOriginalNumDecisionVariables()",
      "right" : "protected final int getOriginalNumDecisionVariables()",
      "info" : "MethodDeclaration[20102-20376]:MethodDeclaration[20102-20376]"
    }, {
      "left" : "protected final int getNumSlackVariables()",
      "right" : "protected final int getNumSlackVariables()",
      "info" : "MethodDeclaration[20382-20565]:MethodDeclaration[20382-20565]"
    }, {
      "left" : "protected final int getNumArtificialVariables()",
      "right" : "protected final int getNumArtificialVariables()",
      "info" : "MethodDeclaration[20571-20774]:MethodDeclaration[20571-20774]"
    }, {
      "left" : "protected final double[][] getData()",
      "right" : "protected final double[][] getData()",
      "info" : "MethodDeclaration[20780-20931]:MethodDeclaration[20780-20931]"
    }, {
      "left" : "public boolean equals(Object other)",
      "right" : "public boolean equals(Object other)",
      "info" : "MethodDeclaration[20937-21755]:MethodDeclaration[20937-21755]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[21761-22191]:MethodDeclaration[21761-22191]"
    }, {
      "left" : "private void writeObject(ObjectOutputStream oos)\n        throws IOException",
      "right" : "private void writeObject(ObjectOutputStream oos)\n        throws IOException",
      "info" : "MethodDeclaration[22197-22530]:MethodDeclaration[22197-22530]"
    }, {
      "left" : "private void readObject(ObjectInputStream ois)\n      throws ClassNotFoundException, IOException",
      "right" : "private void readObject(ObjectInputStream ois)\n      throws ClassNotFoundException, IOException",
      "info" : "MethodDeclaration[22536-22988]:MethodDeclaration[22536-22988]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4421-4514]:Block[4421-4514]"
    }, {
      "left" : "this(f, constraints, goalType, restrictToNonNegative, epsilon, DEFAULT_ULPS);",
      "right" : "this(f, constraints, goalType, restrictToNonNegative, epsilon, DEFAULT_ULPS);",
      "info" : "ConstructorInvocation[4431-4508]:ConstructorInvocation[4431-4508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5310-6160]:Block[5310-6160]"
    }, {
      "left" : "this.f                      = f;",
      "right" : "this.f                      = f;",
      "info" : "ExpressionStatement[5320-5352]:ExpressionStatement[5320-5352]"
    }, {
      "left" : "this.constraints            = normalizeConstraints(constraints);",
      "right" : "this.constraints            = normalizeConstraints(constraints);",
      "info" : "ExpressionStatement[5361-5425]:ExpressionStatement[5361-5425]"
    }, {
      "left" : "this.restrictToNonNegative  = restrictToNonNegative;",
      "right" : "this.restrictToNonNegative  = restrictToNonNegative;",
      "info" : "ExpressionStatement[5434-5486]:ExpressionStatement[5434-5486]"
    }, {
      "left" : "this.epsilon                = epsilon;",
      "right" : "this.epsilon                = epsilon;",
      "info" : "ExpressionStatement[5495-5533]:ExpressionStatement[5495-5533]"
    }, {
      "left" : "this.maxUlps                = maxUlps;",
      "right" : "this.maxUlps                = maxUlps;",
      "info" : "ExpressionStatement[5542-5580]:ExpressionStatement[5542-5580]"
    }, {
      "left" : "this.numDecisionVariables   = f.getCoefficients().getDimension() +\n                                      (restrictToNonNegative ? 0 : 1);",
      "right" : "this.numDecisionVariables   = f.getCoefficients().getDimension() +\n                                      (restrictToNonNegative ? 0 : 1);",
      "info" : "ExpressionStatement[5589-5726]:ExpressionStatement[5589-5726]"
    }, {
      "left" : "this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +\n                                      getConstraintTypeCounts(Relationship.GEQ);",
      "right" : "this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +\n                                      getConstraintTypeCounts(Relationship.GEQ);",
      "info" : "ExpressionStatement[5735-5889]:ExpressionStatement[5735-5889]"
    }, {
      "left" : "this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +\n                                      getConstraintTypeCounts(Relationship.GEQ);",
      "right" : "this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +\n                                      getConstraintTypeCounts(Relationship.GEQ);",
      "info" : "ExpressionStatement[5898-6051]:ExpressionStatement[5898-6051]"
    }, {
      "left" : "this.tableau = createTableau(goalType == GoalType.MAXIMIZE);",
      "right" : "this.tableau = createTableau(goalType == GoalType.MAXIMIZE);",
      "info" : "ExpressionStatement[6060-6120]:ExpressionStatement[6060-6120]"
    }, {
      "left" : "initializeColumnLabels();",
      "right" : "initializeColumnLabels();",
      "info" : "ExpressionStatement[6129-6154]:ExpressionStatement[6129-6154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6268-6832]:Block[6268-6832]"
    }, {
      "left" : "if (getNumObjectiveFunctions() == 2)",
      "right" : "if (getNumObjectiveFunctions() == 2)",
      "info" : "IfStatement[6276-6353]:IfStatement[6276-6353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6313-6353]:Block[6313-6353]"
    }, {
      "left" : "columnLabels.add(\"W\");",
      "right" : "columnLabels.add(\"W\");",
      "info" : "ExpressionStatement[6323-6345]:ExpressionStatement[6323-6345]"
    }, {
      "left" : "columnLabels.add(\"Z\");",
      "right" : "columnLabels.add(\"Z\");",
      "info" : "ExpressionStatement[6360-6382]:ExpressionStatement[6360-6382]"
    }, {
      "left" : "for (int i = 0; i < getOriginalNumDecisionVariables(); i++)",
      "right" : "for (int i = 0; i < getOriginalNumDecisionVariables(); i++)",
      "info" : "ForStatement[6389-6493]:ForStatement[6389-6493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6449-6493]:Block[6449-6493]"
    }, {
      "left" : "columnLabels.add(\"x\" + i);",
      "right" : "columnLabels.add(\"x\" + i);",
      "info" : "ExpressionStatement[6459-6485]:ExpressionStatement[6459-6485]"
    }, {
      "left" : "if (!restrictToNonNegative)",
      "right" : "if (!restrictToNonNegative)",
      "info" : "IfStatement[6500-6590]:IfStatement[6500-6590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6528-6590]:Block[6528-6590]"
    }, {
      "left" : "columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);",
      "right" : "columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);",
      "info" : "ExpressionStatement[6538-6582]:ExpressionStatement[6538-6582]"
    }, {
      "left" : "for (int i = 0; i < getNumSlackVariables(); i++)",
      "right" : "for (int i = 0; i < getNumSlackVariables(); i++)",
      "info" : "ForStatement[6597-6690]:ForStatement[6597-6690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6646-6690]:Block[6646-6690]"
    }, {
      "left" : "columnLabels.add(\"s\" + i);",
      "right" : "columnLabels.add(\"s\" + i);",
      "info" : "ExpressionStatement[6656-6682]:ExpressionStatement[6656-6682]"
    }, {
      "left" : "for (int i = 0; i < getNumArtificialVariables(); i++)",
      "right" : "for (int i = 0; i < getNumArtificialVariables(); i++)",
      "info" : "ForStatement[6697-6795]:ForStatement[6697-6795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6751-6795]:Block[6751-6795]"
    }, {
      "left" : "columnLabels.add(\"a\" + i);",
      "right" : "columnLabels.add(\"a\" + i);",
      "info" : "ExpressionStatement[6761-6787]:ExpressionStatement[6761-6787]"
    }, {
      "left" : "columnLabels.add(\"RHS\");",
      "right" : "columnLabels.add(\"RHS\");",
      "info" : "ExpressionStatement[6802-6826]:ExpressionStatement[6802-6826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7056-9768]:Block[7056-9768]"
    }, {
      "left" : "int width = numDecisionVariables + numSlackVariables +\n        numArtificialVariables + getNumObjectiveFunctions() + 1;",
      "right" : "int width = numDecisionVariables + numSlackVariables +\n        numArtificialVariables + getNumObjectiveFunctions() + 1;",
      "info" : "VariableDeclarationStatement[7114-7233]:VariableDeclarationStatement[7114-7233]"
    }, {
      "left" : "int height = constraints.size() + getNumObjectiveFunctions();",
      "right" : "int height = constraints.size() + getNumObjectiveFunctions();",
      "info" : "VariableDeclarationStatement[7260-7321]:VariableDeclarationStatement[7260-7321]"
    }, {
      "left" : "Array2DRowRealMatrix matrix = new Array2DRowRealMatrix(height, width);",
      "right" : "Array2DRowRealMatrix matrix = new Array2DRowRealMatrix(height, width);",
      "info" : "VariableDeclarationStatement[7330-7400]:VariableDeclarationStatement[7330-7400]"
    }, {
      "left" : "if (getNumObjectiveFunctions() == 2)",
      "right" : "if (getNumObjectiveFunctions() == 2)",
      "info" : "IfStatement[7460-7547]:IfStatement[7460-7547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7497-7547]:Block[7497-7547]"
    }, {
      "left" : "matrix.setEntry(0, 0, -1);",
      "right" : "matrix.setEntry(0, 0, -1);",
      "info" : "ExpressionStatement[7511-7537]:ExpressionStatement[7511-7537]"
    }, {
      "left" : "int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;",
      "right" : "int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;",
      "info" : "VariableDeclarationStatement[7556-7611]:VariableDeclarationStatement[7556-7611]"
    }, {
      "left" : "matrix.setEntry(zIndex, zIndex, maximize ? 1 : -1);",
      "right" : "matrix.setEntry(zIndex, zIndex, maximize ? 1 : -1);",
      "info" : "ExpressionStatement[7620-7671]:ExpressionStatement[7620-7671]"
    }, {
      "left" : "RealVector objectiveCoefficients =\n            maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();",
      "right" : "RealVector objectiveCoefficients =\n            maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();",
      "info" : "VariableDeclarationStatement[7680-7796]:VariableDeclarationStatement[7680-7796]"
    }, {
      "left" : "copyArray(objectiveCoefficients.toArray(), matrix.getDataRef()[zIndex]);",
      "right" : "copyArray(objectiveCoefficients.toArray(), matrix.getDataRef()[zIndex]);",
      "info" : "ExpressionStatement[7805-7877]:ExpressionStatement[7805-7877]"
    }, {
      "left" : "matrix.setEntry(zIndex, width - 1,\n            maximize ? f.getConstantTerm() : -1 * f.getConstantTerm());",
      "right" : "matrix.setEntry(zIndex, width - 1,\n            maximize ? f.getConstantTerm() : -1 * f.getConstantTerm());",
      "info" : "ExpressionStatement[7886-7992]:ExpressionStatement[7886-7992]"
    }, {
      "left" : "if (!restrictToNonNegative)",
      "right" : "if (!restrictToNonNegative)",
      "info" : "IfStatement[8002-8174]:IfStatement[8002-8174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8030-8174]:Block[8030-8174]"
    }, {
      "left" : "matrix.setEntry(zIndex, getSlackVariableOffset() - 1,\n                getInvertedCoefficientSum(objectiveCoefficients));",
      "right" : "matrix.setEntry(zIndex, getSlackVariableOffset() - 1,\n                getInvertedCoefficientSum(objectiveCoefficients));",
      "info" : "ExpressionStatement[8044-8164]:ExpressionStatement[8044-8164]"
    }, {
      "left" : "int slackVar = 0;",
      "right" : "int slackVar = 0;",
      "info" : "VariableDeclarationStatement[8226-8243]:VariableDeclarationStatement[8226-8243]"
    }, {
      "left" : "int artificialVar = 0;",
      "right" : "int artificialVar = 0;",
      "info" : "VariableDeclarationStatement[8252-8274]:VariableDeclarationStatement[8252-8274]"
    }, {
      "left" : "for (int i = 0; i < constraints.size(); i++)",
      "right" : "for (int i = 0; i < constraints.size(); i++)",
      "info" : "ForStatement[8283-9738]:ForStatement[8283-9738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8328-9738]:Block[8328-9738]"
    }, {
      "left" : "LinearConstraint constraint = constraints.get(i);",
      "right" : "LinearConstraint constraint = constraints.get(i);",
      "info" : "VariableDeclarationStatement[8342-8391]:VariableDeclarationStatement[8342-8391]"
    }, {
      "left" : "int row = getNumObjectiveFunctions() + i;",
      "right" : "int row = getNumObjectiveFunctions() + i;",
      "info" : "VariableDeclarationStatement[8404-8445]:VariableDeclarationStatement[8404-8445]"
    }, {
      "left" : "copyArray(constraint.getCoefficients().toArray(), matrix.getDataRef()[row]);",
      "right" : "copyArray(constraint.getCoefficients().toArray(), matrix.getDataRef()[row]);",
      "info" : "ExpressionStatement[8505-8581]:ExpressionStatement[8505-8581]"
    }, {
      "left" : "if (!restrictToNonNegative)",
      "right" : "if (!restrictToNonNegative)",
      "info" : "IfStatement[8613-8801]:IfStatement[8613-8801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8641-8801]:Block[8641-8801]"
    }, {
      "left" : "matrix.setEntry(row, getSlackVariableOffset() - 1,\n                    getInvertedCoefficientSum(constraint.getCoefficients()));",
      "right" : "matrix.setEntry(row, getSlackVariableOffset() - 1,\n                    getInvertedCoefficientSum(constraint.getCoefficients()));",
      "info" : "ExpressionStatement[8659-8787]:ExpressionStatement[8659-8787]"
    }, {
      "left" : "matrix.setEntry(row, width - 1, constraint.getValue());",
      "right" : "matrix.setEntry(row, width - 1, constraint.getValue());",
      "info" : "ExpressionStatement[8834-8889]:ExpressionStatement[8834-8889]"
    }, {
      "left" : "if (constraint.getRelationship() == Relationship.LEQ)",
      "right" : "if (constraint.getRelationship() == Relationship.LEQ)",
      "info" : "IfStatement[8934-9259]:IfStatement[8934-9259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8988-9093]:Block[8988-9093]"
    }, {
      "left" : "matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);",
      "right" : "matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);",
      "info" : "ExpressionStatement[9006-9069]:ExpressionStatement[9006-9069]"
    }, {
      "left" : "if (constraint.getRelationship() == Relationship.GEQ)",
      "right" : "if (constraint.getRelationship() == Relationship.GEQ)",
      "info" : "IfStatement[9099-9259]:IfStatement[9099-9259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9153-9259]:Block[9153-9259]"
    }, {
      "left" : "matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1);",
      "right" : "matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1);",
      "info" : "ExpressionStatement[9171-9235]:ExpressionStatement[9171-9235]"
    }, {
      "left" : "if ((constraint.getRelationship() == Relationship.EQ) ||\n                    (constraint.getRelationship() == Relationship.GEQ))",
      "right" : "if ((constraint.getRelationship() == Relationship.EQ) ||\n                    (constraint.getRelationship() == Relationship.GEQ))",
      "info" : "IfStatement[9309-9728]:IfStatement[9309-9728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9438-9728]:Block[9438-9728]"
    }, {
      "left" : "matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);",
      "right" : "matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);",
      "info" : "ExpressionStatement[9456-9525]:ExpressionStatement[9456-9525]"
    }, {
      "left" : "matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1);",
      "right" : "matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1);",
      "info" : "ExpressionStatement[9542-9615]:ExpressionStatement[9542-9615]"
    }, {
      "left" : "matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row)));",
      "right" : "matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row)));",
      "info" : "ExpressionStatement[9632-9714]:ExpressionStatement[9632-9714]"
    }, {
      "left" : "return matrix;",
      "right" : "return matrix;",
      "info" : "ReturnStatement[9748-9762]:ReturnStatement[9748-9762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10091-10331]:Block[10091-10331]"
    }, {
      "left" : "List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();",
      "right" : "List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();",
      "info" : "VariableDeclarationStatement[10101-10171]:VariableDeclarationStatement[10101-10171]"
    }, {
      "left" : "for (LinearConstraint constraint : originalConstraints)",
      "right" : "for (LinearConstraint constraint : originalConstraints)",
      "info" : "EnhancedForStatement[10180-10298]:EnhancedForStatement[10180-10298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10236-10298]:Block[10236-10298]"
    }, {
      "left" : "normalized.add(normalize(constraint));",
      "right" : "normalized.add(normalize(constraint));",
      "info" : "ExpressionStatement[10250-10288]:ExpressionStatement[10250-10288]"
    }, {
      "left" : "return normalized;",
      "right" : "return normalized;",
      "info" : "ReturnStatement[10307-10325]:ReturnStatement[10307-10325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10579-11041]:Block[10579-11041]"
    }, {
      "left" : "if (constraint.getValue() < 0)",
      "right" : "if (constraint.getValue() < 0)",
      "info" : "IfStatement[10589-10879]:IfStatement[10589-10879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10620-10879]:Block[10620-10879]"
    }, {
      "left" : "return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n                                        constraint.getRelationship().oppositeRelationship(),\n                                        -1 * constraint.getValue());",
      "right" : "return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n                                        constraint.getRelationship().oppositeRelationship(),\n                                        -1 * constraint.getValue());",
      "info" : "ReturnStatement[10634-10869]:ReturnStatement[10634-10869]"
    }, {
      "left" : "return new LinearConstraint(constraint.getCoefficients(),\n                                    constraint.getRelationship(), constraint.getValue());",
      "right" : "return new LinearConstraint(constraint.getCoefficients(),\n                                    constraint.getRelationship(), constraint.getValue());",
      "info" : "ReturnStatement[10888-11035]:ReturnStatement[10888-11035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11218-11281]:Block[11218-11281]"
    }, {
      "left" : "return this.numArtificialVariables > 0 ? 2 : 1;",
      "right" : "return this.numArtificialVariables > 0 ? 2 : 1;",
      "info" : "ReturnStatement[11228-11275]:ReturnStatement[11228-11275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11566-11795]:Block[11566-11795]"
    }, {
      "left" : "int count = 0;",
      "right" : "int count = 0;",
      "info" : "VariableDeclarationStatement[11576-11590]:VariableDeclarationStatement[11576-11590]"
    }, {
      "left" : "for (final LinearConstraint constraint : constraints)",
      "right" : "for (final LinearConstraint constraint : constraints)",
      "info" : "EnhancedForStatement[11599-11767]:EnhancedForStatement[11599-11767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11653-11767]:Block[11653-11767]"
    }, {
      "left" : "if (constraint.getRelationship() == relationship)",
      "right" : "if (constraint.getRelationship() == relationship)",
      "info" : "IfStatement[11667-11757]:IfStatement[11667-11757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11717-11757]:Block[11717-11757]"
    }, {
      "left" : "++count;",
      "right" : "++count;",
      "info" : "ExpressionStatement[11735-11743]:ExpressionStatement[11735-11743]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[11776-11789]:ReturnStatement[11776-11789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12093-12246]:Block[12093-12246]"
    }, {
      "left" : "double sum = 0;",
      "right" : "double sum = 0;",
      "info" : "VariableDeclarationStatement[12103-12118]:VariableDeclarationStatement[12103-12118]"
    }, {
      "left" : "for (double coefficient : coefficients.toArray())",
      "right" : "for (double coefficient : coefficients.toArray())",
      "info" : "EnhancedForStatement[12127-12220]:EnhancedForStatement[12127-12220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12177-12220]:Block[12177-12220]"
    }, {
      "left" : "sum -= coefficient;",
      "right" : "sum -= coefficient;",
      "info" : "ExpressionStatement[12191-12210]:ExpressionStatement[12191-12210]"
    }, {
      "left" : "return sum;",
      "right" : "return sum;",
      "info" : "ReturnStatement[12229-12240]:ReturnStatement[12229-12240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12496-12865]:Block[12496-12865]"
    }, {
      "left" : "Integer row = null;",
      "right" : "Integer row = null;",
      "info" : "VariableDeclarationStatement[12506-12525]:VariableDeclarationStatement[12506-12525]"
    }, {
      "left" : "for (int i = 0; i < getHeight(); i++)",
      "right" : "for (int i = 0; i < getHeight(); i++)",
      "info" : "ForStatement[12534-12839]:ForStatement[12534-12839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12572-12839]:Block[12572-12839]"
    }, {
      "left" : "final double entry = getEntry(i, col);",
      "right" : "final double entry = getEntry(i, col);",
      "info" : "VariableDeclarationStatement[12586-12624]:VariableDeclarationStatement[12586-12624]"
    }, {
      "left" : "if (Precision.equals(entry, 1d, maxUlps) && (row == null))",
      "right" : "if (Precision.equals(entry, 1d, maxUlps) && (row == null))",
      "info" : "IfStatement[12637-12829]:IfStatement[12637-12829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12696-12736]:Block[12696-12736]"
    }, {
      "left" : "row = i;",
      "right" : "row = i;",
      "info" : "ExpressionStatement[12714-12722]:ExpressionStatement[12714-12722]"
    }, {
      "left" : "if (!Precision.equals(entry, 0d, maxUlps))",
      "right" : "if (!Precision.equals(entry, 0d, maxUlps))",
      "info" : "IfStatement[12742-12829]:IfStatement[12742-12829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12785-12829]:Block[12785-12829]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12803-12815]:ReturnStatement[12803-12815]"
    }, {
      "left" : "return row;",
      "right" : "return row;",
      "info" : "ReturnStatement[12848-12859]:ReturnStatement[12848-12859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13076-14428]:Block[13076-14428]"
    }, {
      "left" : "if (getNumObjectiveFunctions() == 1)",
      "right" : "if (getNumObjectiveFunctions() == 1)",
      "info" : "IfStatement[13086-13154]:IfStatement[13086-13154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13123-13154]:Block[13123-13154]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[13137-13144]:ReturnStatement[13137-13144]"
    }, {
      "left" : "List<Integer> columnsToDrop = new ArrayList<Integer>();",
      "right" : "List<Integer> columnsToDrop = new ArrayList<Integer>();",
      "info" : "VariableDeclarationStatement[13164-13219]:VariableDeclarationStatement[13164-13219]"
    }, {
      "left" : "columnsToDrop.add(0);",
      "right" : "columnsToDrop.add(0);",
      "info" : "ExpressionStatement[13228-13249]:ExpressionStatement[13228-13249]"
    }, {
      "left" : "for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++)",
      "right" : "for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++)",
      "info" : "ForStatement[13309-13573]:ForStatement[13309-13573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13390-13573]:Block[13390-13573]"
    }, {
      "left" : "final double entry = tableau.getEntry(0, i);",
      "right" : "final double entry = tableau.getEntry(0, i);",
      "info" : "VariableDeclarationStatement[13404-13448]:VariableDeclarationStatement[13404-13448]"
    }, {
      "left" : "if (Precision.compareTo(entry, 0d, maxUlps) > 0)",
      "right" : "if (Precision.compareTo(entry, 0d, epsilon) > 0)",
      "info" : "IfStatement[13461-13563]:IfStatement[13461-13563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13510-13563]:Block[13510-13563]"
    }, {
      "left" : "columnsToDrop.add(i);",
      "right" : "columnsToDrop.add(i);",
      "info" : "ExpressionStatement[13528-13549]:ExpressionStatement[13528-13549]"
    }, {
      "left" : "for (int i = 0; i < getNumArtificialVariables(); i++)",
      "right" : "for (int i = 0; i < getNumArtificialVariables(); i++)",
      "info" : "ForStatement[13625-13835]:ForStatement[13625-13835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13679-13835]:Block[13679-13835]"
    }, {
      "left" : "int col = i + getArtificialVariableOffset();",
      "right" : "int col = i + getArtificialVariableOffset();",
      "info" : "VariableDeclarationStatement[13691-13735]:VariableDeclarationStatement[13691-13735]"
    }, {
      "left" : "if (getBasicRow(col) == null)",
      "right" : "if (getBasicRow(col) == null)",
      "info" : "IfStatement[13746-13825]:IfStatement[13746-13825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13776-13825]:Block[13776-13825]"
    }, {
      "left" : "columnsToDrop.add(col);",
      "right" : "columnsToDrop.add(col);",
      "info" : "ExpressionStatement[13790-13813]:ExpressionStatement[13790-13813]"
    }, {
      "left" : "double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];",
      "right" : "double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];",
      "info" : "VariableDeclarationStatement[13845-13928]:VariableDeclarationStatement[13845-13928]"
    }, {
      "left" : "for (int i = 1; i < getHeight(); i++)",
      "right" : "for (int i = 1; i < getHeight(); i++)",
      "info" : "ForStatement[13937-14191]:ForStatement[13937-14191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13975-14191]:Block[13975-14191]"
    }, {
      "left" : "int col = 0;",
      "right" : "int col = 0;",
      "info" : "VariableDeclarationStatement[13987-13999]:VariableDeclarationStatement[13987-13999]"
    }, {
      "left" : "for (int j = 0; j < getWidth(); j++)",
      "right" : "for (int j = 0; j < getWidth(); j++)",
      "info" : "ForStatement[14010-14181]:ForStatement[14010-14181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14047-14181]:Block[14047-14181]"
    }, {
      "left" : "if (!columnsToDrop.contains(j))",
      "right" : "if (!columnsToDrop.contains(j))",
      "info" : "IfStatement[14061-14169]:IfStatement[14061-14169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14093-14169]:Block[14093-14169]"
    }, {
      "left" : "matrix[i - 1][col++] = tableau.getEntry(i, j);",
      "right" : "matrix[i - 1][col++] = tableau.getEntry(i, j);",
      "info" : "ExpressionStatement[14109-14155]:ExpressionStatement[14109-14155]"
    }, {
      "left" : "for (int i = columnsToDrop.size() - 1; i >= 0; i--)",
      "right" : "for (int i = columnsToDrop.size() - 1; i >= 0; i--)",
      "info" : "ForStatement[14201-14323]:ForStatement[14201-14323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14253-14323]:Block[14253-14323]"
    }, {
      "left" : "columnLabels.remove((int) columnsToDrop.get(i));",
      "right" : "columnLabels.remove((int) columnsToDrop.get(i));",
      "info" : "ExpressionStatement[14265-14313]:ExpressionStatement[14265-14313]"
    }, {
      "left" : "this.tableau = new Array2DRowRealMatrix(matrix);",
      "right" : "this.tableau = new Array2DRowRealMatrix(matrix);",
      "info" : "ExpressionStatement[14333-14381]:ExpressionStatement[14333-14381]"
    }, {
      "left" : "this.numArtificialVariables = 0;",
      "right" : "this.numArtificialVariables = 0;",
      "info" : "ExpressionStatement[14390-14422]:ExpressionStatement[14390-14422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14590-14677]:Block[14590-14677]"
    }, {
      "left" : "System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);",
      "right" : "System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);",
      "info" : "ExpressionStatement[14600-14671]:ExpressionStatement[14600-14671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14827-15105]:Block[14827-15105]"
    }, {
      "left" : "for (int i = getNumObjectiveFunctions(); i < getWidth() - 1; i++)",
      "right" : "for (int i = getNumObjectiveFunctions(); i < getWidth() - 1; i++)",
      "info" : "ForStatement[14837-15078]:ForStatement[14837-15078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14903-15078]:Block[14903-15078]"
    }, {
      "left" : "final double entry = tableau.getEntry(0, i);",
      "right" : "final double entry = tableau.getEntry(0, i);",
      "info" : "VariableDeclarationStatement[14917-14961]:VariableDeclarationStatement[14917-14961]"
    }, {
      "left" : "if (Precision.compareTo(entry, 0d, epsilon) < 0)",
      "right" : "if (Precision.compareTo(entry, 0d, epsilon) < 0)",
      "info" : "IfStatement[14974-15068]:IfStatement[14974-15068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15023-15068]:Block[15023-15068]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15041-15054]:ReturnStatement[15041-15054]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15087-15099]:ReturnStatement[15087-15099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15238-16826]:Block[15238-16826]"
    }, {
      "left" : "int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);",
      "right" : "int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);",
      "info" : "VariableDeclarationStatement[15246-15318]:VariableDeclarationStatement[15246-15318]"
    }, {
      "left" : "Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;",
      "right" : "Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;",
      "info" : "VariableDeclarationStatement[15325-15417]:VariableDeclarationStatement[15325-15417]"
    }, {
      "left" : "double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());",
      "right" : "double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());",
      "info" : "VariableDeclarationStatement[15424-15526]:VariableDeclarationStatement[15424-15526]"
    }, {
      "left" : "Set<Integer> basicRows = new HashSet<Integer>();",
      "right" : "Set<Integer> basicRows = new HashSet<Integer>();",
      "info" : "VariableDeclarationStatement[15534-15582]:VariableDeclarationStatement[15534-15582]"
    }, {
      "left" : "double[] coefficients = new double[getOriginalNumDecisionVariables()];",
      "right" : "double[] coefficients = new double[getOriginalNumDecisionVariables()];",
      "info" : "VariableDeclarationStatement[15589-15659]:VariableDeclarationStatement[15589-15659]"
    }, {
      "left" : "for (int i = 0; i < coefficients.length; i++)",
      "right" : "for (int i = 0; i < coefficients.length; i++)",
      "info" : "ForStatement[15666-16747]:ForStatement[15666-16747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15712-16747]:Block[15712-16747]"
    }, {
      "left" : "int colIndex = columnLabels.indexOf(\"x\" + i);",
      "right" : "int colIndex = columnLabels.indexOf(\"x\" + i);",
      "info" : "VariableDeclarationStatement[15724-15769]:VariableDeclarationStatement[15724-15769]"
    }, {
      "left" : "if (colIndex < 0)",
      "right" : "if (colIndex < 0)",
      "info" : "IfStatement[15780-15866]:IfStatement[15780-15866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15798-15866]:Block[15798-15866]"
    }, {
      "left" : "coefficients[i] = 0;",
      "right" : "coefficients[i] = 0;",
      "info" : "ExpressionStatement[15812-15832]:ExpressionStatement[15812-15832]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[15845-15854]:ContinueStatement[15845-15854]"
    }, {
      "left" : "Integer basicRow = getBasicRow(colIndex);",
      "right" : "Integer basicRow = getBasicRow(colIndex);",
      "info" : "VariableDeclarationStatement[15877-15918]:VariableDeclarationStatement[15877-15918]"
    }, {
      "left" : "if (basicRow != null && basicRow == 0)",
      "right" : "if (basicRow != null && basicRow == 0)",
      "info" : "IfStatement[15929-16739]:IfStatement[15929-16739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15968-16242]:Block[15968-16242]"
    }, {
      "left" : "coefficients[i] = 0;",
      "right" : "coefficients[i] = 0;",
      "info" : "ExpressionStatement[16210-16230]:ExpressionStatement[16210-16230]"
    }, {
      "left" : "if (basicRows.contains(basicRow))",
      "right" : "if (basicRows.contains(basicRow))",
      "info" : "IfStatement[16248-16739]:IfStatement[16248-16739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16282-16507]:Block[16282-16507]"
    }, {
      "left" : "coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);",
      "right" : "coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);",
      "info" : "ExpressionStatement[16430-16495]:ExpressionStatement[16430-16495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16513-16739]:Block[16513-16739]"
    }, {
      "left" : "basicRows.add(basicRow);",
      "right" : "basicRows.add(basicRow);",
      "info" : "ExpressionStatement[16529-16553]:ExpressionStatement[16529-16553]"
    }, {
      "left" : "coefficients[i] =\n                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                  (restrictToNonNegative ? 0 : mostNegative);",
      "right" : "coefficients[i] =\n                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                  (restrictToNonNegative ? 0 : mostNegative);",
      "info" : "ExpressionStatement[16568-16727]:ExpressionStatement[16568-16727]"
    }, {
      "left" : "return new PointValuePair(coefficients, f.getValue(coefficients));",
      "right" : "return new PointValuePair(coefficients, f.getValue(coefficients));",
      "info" : "ReturnStatement[16754-16820]:ReturnStatement[16754-16820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17209-17363]:Block[17209-17363]"
    }, {
      "left" : "for (int j = 0; j < getWidth(); j++)",
      "right" : "for (int j = 0; j < getWidth(); j++)",
      "info" : "ForStatement[17219-17357]:ForStatement[17219-17357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17256-17357]:Block[17256-17357]"
    }, {
      "left" : "tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",
      "right" : "tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",
      "info" : "ExpressionStatement[17270-17347]:ExpressionStatement[17270-17347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17836-18000]:Block[17836-18000]"
    }, {
      "left" : "tableau.setRowVector(minuendRow, tableau.getRowVector(minuendRow)\n            .subtract(tableau.getRowVector(subtrahendRow).mapMultiply(multiple)));",
      "right" : "tableau.setRowVector(minuendRow, tableau.getRowVector(minuendRow)\n            .subtract(tableau.getRowVector(subtrahendRow).mapMultiply(multiple)));",
      "info" : "ExpressionStatement[17846-17994]:ExpressionStatement[17846-17994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18126-18178]:Block[18126-18178]"
    }, {
      "left" : "return tableau.getColumnDimension();",
      "right" : "return tableau.getColumnDimension();",
      "info" : "ReturnStatement[18136-18172]:ReturnStatement[18136-18172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18307-18356]:Block[18307-18356]"
    }, {
      "left" : "return tableau.getRowDimension();",
      "right" : "return tableau.getRowDimension();",
      "info" : "ReturnStatement[18317-18350]:ReturnStatement[18317-18350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18572-18625]:Block[18572-18625]"
    }, {
      "left" : "return tableau.getEntry(row, column);",
      "right" : "return tableau.getEntry(row, column);",
      "info" : "ReturnStatement[18582-18619]:ReturnStatement[18582-18619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18889-18942]:Block[18889-18942]"
    }, {
      "left" : "tableau.setEntry(row, column, value);",
      "right" : "tableau.setEntry(row, column, value);",
      "info" : "ExpressionStatement[18899-18936]:ExpressionStatement[18899-18936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19110-19183]:Block[19110-19183]"
    }, {
      "left" : "return getNumObjectiveFunctions() + numDecisionVariables;",
      "right" : "return getNumObjectiveFunctions() + numDecisionVariables;",
      "info" : "ReturnStatement[19120-19177]:ReturnStatement[19120-19177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19366-19459]:Block[19366-19459]"
    }, {
      "left" : "return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;",
      "right" : "return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;",
      "info" : "ReturnStatement[19376-19453]:ReturnStatement[19376-19453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19607-19645]:Block[19607-19645]"
    }, {
      "left" : "return getWidth() - 1;",
      "right" : "return getWidth() - 1;",
      "info" : "ReturnStatement[19617-19639]:ReturnStatement[19617-19639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20052-20096]:Block[20052-20096]"
    }, {
      "left" : "return numDecisionVariables;",
      "right" : "return numDecisionVariables;",
      "info" : "ReturnStatement[20062-20090]:ReturnStatement[20062-20090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20318-20376]:Block[20318-20376]"
    }, {
      "left" : "return f.getCoefficients().getDimension();",
      "right" : "return f.getCoefficients().getDimension();",
      "info" : "ReturnStatement[20328-20370]:ReturnStatement[20328-20370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20524-20565]:Block[20524-20565]"
    }, {
      "left" : "return numSlackVariables;",
      "right" : "return numSlackVariables;",
      "info" : "ReturnStatement[20534-20559]:ReturnStatement[20534-20559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20728-20774]:Block[20728-20774]"
    }, {
      "left" : "return numArtificialVariables;",
      "right" : "return numArtificialVariables;",
      "info" : "ReturnStatement[20738-20768]:ReturnStatement[20738-20768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20890-20931]:Block[20890-20931]"
    }, {
      "left" : "return tableau.getData();",
      "right" : "return tableau.getData();",
      "info" : "ReturnStatement[20900-20925]:ReturnStatement[20900-20925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21012-21755]:Block[21012-21755]"
    }, {
      "left" : "if (this == other)",
      "right" : "if (this == other)",
      "info" : "IfStatement[21021-21070]:IfStatement[21021-21070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21040-21070]:Block[21040-21070]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[21050-21062]:ReturnStatement[21050-21062]"
    }, {
      "left" : "if (other instanceof SimplexTableau)",
      "right" : "if (other instanceof SimplexTableau)",
      "info" : "IfStatement[21078-21729]:IfStatement[21078-21729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21115-21729]:Block[21115-21729]"
    }, {
      "left" : "SimplexTableau rhs = (SimplexTableau) other;",
      "right" : "SimplexTableau rhs = (SimplexTableau) other;",
      "info" : "VariableDeclarationStatement[21127-21171]:VariableDeclarationStatement[21127-21171]"
    }, {
      "left" : "return (restrictToNonNegative  == rhs.restrictToNonNegative) &&\n                 (numDecisionVariables   == rhs.numDecisionVariables) &&\n                 (numSlackVariables      == rhs.numSlackVariables) &&\n                 (numArtificialVariables == rhs.numArtificialVariables) &&\n                 (epsilon                == rhs.epsilon) &&\n                 (maxUlps                == rhs.maxUlps) &&\n                 f.equals(rhs.f) &&\n                 constraints.equals(rhs.constraints) &&\n                 tableau.equals(rhs.tableau);",
      "right" : "return (restrictToNonNegative  == rhs.restrictToNonNegative) &&\n                 (numDecisionVariables   == rhs.numDecisionVariables) &&\n                 (numSlackVariables      == rhs.numSlackVariables) &&\n                 (numArtificialVariables == rhs.numArtificialVariables) &&\n                 (epsilon                == rhs.epsilon) &&\n                 (maxUlps                == rhs.maxUlps) &&\n                 f.equals(rhs.f) &&\n                 constraints.equals(rhs.constraints) &&\n                 tableau.equals(rhs.tableau);",
      "info" : "ReturnStatement[21182-21721]:ReturnStatement[21182-21721]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21736-21749]:ReturnStatement[21736-21749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21822-22191]:Block[21822-22191]"
    }, {
      "left" : "return Boolean.valueOf(restrictToNonNegative).hashCode() ^\n               numDecisionVariables ^\n               numSlackVariables ^\n               numArtificialVariables ^\n               Double.valueOf(epsilon).hashCode() ^\n               maxUlps ^\n               f.hashCode() ^\n               constraints.hashCode() ^\n               tableau.hashCode();",
      "right" : "return Boolean.valueOf(restrictToNonNegative).hashCode() ^\n               numDecisionVariables ^\n               numSlackVariables ^\n               numArtificialVariables ^\n               Double.valueOf(epsilon).hashCode() ^\n               maxUlps ^\n               f.hashCode() ^\n               constraints.hashCode() ^\n               tableau.hashCode();",
      "info" : "ReturnStatement[21832-22185]:ReturnStatement[21832-22185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22434-22530]:Block[22434-22530]"
    }, {
      "left" : "oos.defaultWriteObject();",
      "right" : "oos.defaultWriteObject();",
      "info" : "ExpressionStatement[22444-22469]:ExpressionStatement[22444-22469]"
    }, {
      "left" : "MatrixUtils.serializeRealMatrix(tableau, oos);",
      "right" : "MatrixUtils.serializeRealMatrix(tableau, oos);",
      "info" : "ExpressionStatement[22478-22524]:ExpressionStatement[22478-22524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22883-22988]:Block[22883-22988]"
    }, {
      "left" : "ois.defaultReadObject();",
      "right" : "ois.defaultReadObject();",
      "info" : "ExpressionStatement[22893-22917]:ExpressionStatement[22893-22917]"
    }, {
      "left" : "MatrixUtils.deserializeRealMatrix(this, \"tableau\", ois);",
      "right" : "MatrixUtils.deserializeRealMatrix(this, \"tableau\", ois);",
      "info" : "ExpressionStatement[22926-22982]:ExpressionStatement[22926-22982]"
    } ]
  },
  "interFileMappings" : { }
}