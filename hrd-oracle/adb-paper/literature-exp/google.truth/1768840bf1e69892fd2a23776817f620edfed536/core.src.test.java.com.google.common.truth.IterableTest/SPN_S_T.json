{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "IterableTest",
      "right" : "IterableTest",
      "info" : "TypeDeclaration[1125-23909]:TypeDeclaration[1066-27200]"
    }, {
      "left" : "public void hasSize()",
      "right" : "public void hasSize()",
      "info" : "MethodDeclaration[1295-1384]:MethodDeclaration[1236-1325]"
    }, {
      "left" : "public void hasSizeZero()",
      "right" : "public void hasSizeZero()",
      "info" : "MethodDeclaration[1388-1474]:MethodDeclaration[1329-1415]"
    }, {
      "left" : "public void hasSizeFails()",
      "right" : "public void hasSizeFails()",
      "info" : "MethodDeclaration[1478-1741]:MethodDeclaration[1419-1682]"
    }, {
      "left" : "public void hasSizeNegative()",
      "right" : "public void hasSizeNegative()",
      "info" : "MethodDeclaration[1745-1925]:MethodDeclaration[1686-1866]"
    }, {
      "left" : "public void iterableContainsItemFailure()",
      "right" : "public void iterableContainsItemFailure()",
      "info" : "MethodDeclaration[2141-2402]:MethodDeclaration[2078-2337]"
    }, {
      "left" : "public void namedIterableContainsItemFailure()",
      "right" : "public void namedIterableContainsItemFailure()",
      "info" : "MethodDeclaration[2406-2699]:MethodDeclaration[2341-2632]"
    }, {
      "left" : "public void failureMessageIterableContainsItemFailure()",
      "right" : "public void failureMessageIterableContainsItemFailure()",
      "info" : "MethodDeclaration[2703-3016]:MethodDeclaration[2636-2947]"
    }, {
      "left" : "public void iterableDoesntHaveItemFailure()",
      "right" : "public void iterableDoesntHaveItemFailure()",
      "info" : "MethodDeclaration[3248-3521]:MethodDeclaration[3175-3446]"
    }, {
      "left" : "public void doesNotContainDuplicatesFailure()",
      "right" : "public void doesNotContainDuplicatesFailure()",
      "info" : "MethodDeclaration[3877-4173]:MethodDeclaration[3688-3982]"
    }, {
      "left" : "public void iterableContainsAnyOfWithNullInThirdAndFinalPosition()",
      "right" : "public void iterableContainsAnyOfWithNullInThirdAndFinalPosition()",
      "info" : "MethodDeclaration[4407-4561]:MethodDeclaration[4212-4364]"
    }, {
      "left" : "public void iterableContainsAnyOfFailure()",
      "right" : "public void iterableContainsAnyOfFailure()",
      "info" : "MethodDeclaration[4565-4854]:MethodDeclaration[4368-4655]"
    }, {
      "left" : "public void iterableContainsAnyOfWithOneShotIterable()",
      "right" : "public void iterableContainsAnyOfWithOneShotIterable()",
      "info" : "MethodDeclaration[4858-5240]:MethodDeclaration[4659-5048]"
    }, {
      "left" : "public Iterator<Object> iterator()",
      "right" : "public Iterator<Object> iterator()",
      "info" : "MethodDeclaration[5068-5165]:MethodDeclaration[4876-4973]"
    }, {
      "left" : "public void iterableContainsAllOfWithNull()",
      "right" : "public void iterableContainsAllOfWithNull()",
      "info" : "MethodDeclaration[5488-5616]:MethodDeclaration[5292-5418]"
    }, {
      "left" : "public void iterableContainsAllOfFailure()",
      "right" : "public void iterableContainsAllOfFailure()",
      "info" : "MethodDeclaration[5768-6089]:MethodDeclaration[5568-5887]"
    }, {
      "left" : "public void iterableContainsAllOfWithExtras()",
      "right" : "public void iterableContainsAllOfWithExtras()",
      "info" : "MethodDeclaration[6093-6447]:MethodDeclaration[5891-6243]"
    }, {
      "left" : "public void iterableContainsAllOfWithExtraCopiesOfOutOfOrder()",
      "right" : "public void iterableContainsAllOfWithExtraCopiesOfOutOfOrder()",
      "info" : "MethodDeclaration[6451-6822]:MethodDeclaration[6247-6616]"
    }, {
      "left" : "public void iterableContainsAllOfWithDuplicatesFailure()",
      "right" : "public void iterableContainsAllOfWithDuplicatesFailure()",
      "info" : "MethodDeclaration[6826-7231]:MethodDeclaration[6620-7023]"
    }, {
      "left" : "public void iterableContainsAllOfWithDuplicateMissingElements()",
      "right" : "public void iterableContainsAllOfWithDuplicateMissingElements()",
      "info" : "MethodDeclaration[7392-7754]:MethodDeclaration[7184-7544]"
    }, {
      "left" : "public void iterableContainsAllOfWithNullFailure()",
      "right" : "public void iterableContainsAllOfWithNullFailure()",
      "info" : "MethodDeclaration[7758-8152]:MethodDeclaration[7548-7940]"
    }, {
      "left" : "public void iterableContainsAllOfInOrderWithFailure()",
      "right" : "public void iterableContainsAllOfInOrderWithFailure()",
      "info" : "MethodDeclaration[9137-9485]:MethodDeclaration[8905-9251]"
    }, {
      "left" : "public void iterableContainsAllOfInOrderWithOneShotIterable()",
      "right" : "public void iterableContainsAllOfInOrderWithOneShotIterable()",
      "info" : "MethodDeclaration[9489-10063]:MethodDeclaration[9255-9827]"
    }, {
      "left" : "public Iterator<Object> iterator()",
      "right" : "public Iterator<Object> iterator()",
      "info" : "MethodDeclaration[9770-9867]:MethodDeclaration[9534-9631]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[9879-9986]:MethodDeclaration[9643-9750]"
    }, {
      "left" : "public void iterableContainsAllOfInOrderWithOneShotIterableWrongOrder()",
      "right" : "public void iterableContainsAllOfInOrderWithOneShotIterableWrongOrder()",
      "info" : "MethodDeclaration[10067-10796]:MethodDeclaration[9831-10567]"
    }, {
      "left" : "public Iterator<Object> iterator()",
      "right" : "public Iterator<Object> iterator()",
      "info" : "MethodDeclaration[10311-10408]:MethodDeclaration[10082-10179]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[10420-10512]:MethodDeclaration[10191-10283]"
    }, {
      "left" : "public void iterableContainsNoneOfFailure()",
      "right" : "public void iterableContainsNoneOfFailure()",
      "info" : "MethodDeclaration[10913-11253]:MethodDeclaration[10682-11020]"
    }, {
      "left" : "public void iterableContainsNoneOfFailureWithDuplicateInSubject()",
      "right" : "public void iterableContainsNoneOfFailureWithDuplicateInSubject()",
      "info" : "MethodDeclaration[11257-11625]:MethodDeclaration[11024-11390]"
    }, {
      "left" : "public void iterableContainsNoneOfFailureWithDuplicateInExpected()",
      "right" : "public void iterableContainsNoneOfFailureWithDuplicateInExpected()",
      "info" : "MethodDeclaration[11629-11998]:MethodDeclaration[11394-11761]"
    }, {
      "left" : "public void listContainsExactlyArray()",
      "right" : "public void iterableContainsExactlyArray()",
      "info" : "MethodDeclaration[12002-12272]:MethodDeclaration[11765-12039]"
    }, {
      "left" : "public void arrayContainsExactly()",
      "right" : "public void arrayContainsExactly()",
      "info" : "MethodDeclaration[12276-12471]:MethodDeclaration[12043-12238]"
    }, {
      "left" : "public void iterableContainsExactlyWithOnlyNull()",
      "right" : "public void iterableContainsExactlyWithOnlyNull()",
      "info" : "MethodDeclaration[13021-13185]:MethodDeclaration[12780-12942]"
    }, {
      "left" : "public void iterableContainsExactlyWithNullOutOfOrder()",
      "right" : "public void iterableContainsExactlyWithNullOutOfOrder()",
      "info" : "MethodDeclaration[13581-13726]:MethodDeclaration[13332-13475]"
    }, {
      "left" : "public void iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCode()",
      "right" : "public void iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCode()",
      "info" : "MethodDeclaration[13730-14546]:MethodDeclaration[13479-14281]"
    }, {
      "left" : "HashCodeThrower",
      "right" : "HashCodeThrower",
      "info" : "TypeDeclaration[14550-14852]:TypeDeclaration[14285-14587]"
    }, {
      "left" : "public boolean equals(Object other)",
      "right" : "public boolean equals(Object other)",
      "info" : "MethodDeclaration[14593-14678]:MethodDeclaration[14328-14413]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[14684-14776]:MethodDeclaration[14419-14511]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[14782-14848]:MethodDeclaration[14517-14583]"
    }, {
      "left" : "public void iterableContainsExactlyElementsInErrorMessageIsOrdered()",
      "right" : "public void iterableContainsExactlyElementsInErrorMessageIsOrdered()",
      "info" : "MethodDeclaration[14856-15333]:MethodDeclaration[14591-15068]"
    }, {
      "left" : "public void iterableContainsExactlyMissingItemFailure()",
      "right" : "public void iterableContainsExactlyMissingItemFailure()",
      "info" : "MethodDeclaration[15337-15668]:MethodDeclaration[15072-15401]"
    }, {
      "left" : "public void iterableContainsExactlyUnexpectedItemFailure()",
      "right" : "public void iterableContainsExactlyUnexpectedItemFailure()",
      "info" : "MethodDeclaration[15672-16031]:MethodDeclaration[15405-15762]"
    }, {
      "left" : "public void iterableContainsExactlyWithDuplicatesNotEnoughItemsFailure()",
      "right" : "public void iterableContainsExactlyWithDuplicatesNotEnoughItemsFailure()",
      "info" : "MethodDeclaration[16035-16450]:MethodDeclaration[15766-16179]"
    }, {
      "left" : "public void iterableContainsExactlyWithDuplicatesMissingItemFailure()",
      "right" : "public void iterableContainsExactlyWithDuplicatesMissingItemFailure()",
      "info" : "MethodDeclaration[16454-16875]:MethodDeclaration[16183-16602]"
    }, {
      "left" : "public void iterableContainsExactlyWithDuplicatesUnexpectedItemFailure()",
      "right" : "public void iterableContainsExactlyWithDuplicatesUnexpectedItemFailure()",
      "info" : "MethodDeclaration[16879-17316]:MethodDeclaration[16606-17041]"
    }, {
      "left" : "public void iterableContainsExactlyWithDuplicateMissingElements()",
      "right" : "public void iterableContainsExactlyWithDuplicateMissingElements()",
      "info" : "MethodDeclaration[17477-17836]:MethodDeclaration[17202-17559]"
    }, {
      "left" : "public void iterableContainsExactlyWithNullFailure()",
      "right" : "public void iterableContainsExactlyWithNullFailure()",
      "info" : "MethodDeclaration[17840-18239]:MethodDeclaration[17563-17960]"
    }, {
      "left" : "public void iterableContainsExactlyWithMissingAndExtraElements()",
      "right" : "public void iterableContainsExactlyWithMissingAndExtraElements()",
      "info" : "MethodDeclaration[18243-18658]:MethodDeclaration[17964-18377]"
    }, {
      "left" : "public void iterableContainsExactlyWithDuplicateMissingAndExtraElements()",
      "right" : "public void iterableContainsExactlyWithDuplicateMissingAndExtraElements()",
      "info" : "MethodDeclaration[18662-19120]:MethodDeclaration[18381-18837]"
    }, {
      "left" : "public void iterableContainsExactlyWithOneIterableGivesWarning()",
      "right" : "public void iterableContainsExactlyWithOneIterableGivesWarning()",
      "info" : "MethodDeclaration[19124-19826]:MethodDeclaration[18841-19539]"
    }, {
      "left" : "public void iterableContainsExactlyElementsInWithOneIterableDoesNotGiveWarning()",
      "right" : "public void iterableContainsExactlyElementsInWithOneIterableDoesNotGiveWarning()",
      "info" : "MethodDeclaration[19830-20266]:MethodDeclaration[19543-19975]"
    }, {
      "left" : "public void iterableContainsExactlyWithTwoIterableDoesNotGivesWarning()",
      "right" : "public void iterableContainsExactlyWithTwoIterableDoesNotGivesWarning()",
      "info" : "MethodDeclaration[20270-20750]:MethodDeclaration[19979-20453]"
    }, {
      "left" : "public void iterableContainsExactlyWithOneNonIterableDoesNotGiveWarning()",
      "right" : "public void iterableContainsExactlyWithOneNonIterableDoesNotGiveWarning()",
      "info" : "MethodDeclaration[20754-21157]:MethodDeclaration[20457-20858]"
    }, {
      "left" : "public void iterableContainsExactlyInOrderWithFailure()",
      "right" : "public void iterableContainsExactlyInOrderWithFailure()",
      "info" : "MethodDeclaration[21439-21813]:MethodDeclaration[21136-21508]"
    }, {
      "left" : "public void iterableContainsExactlyInOrderWithOneShotIterable()",
      "right" : "public void iterableContainsExactlyInOrderWithOneShotIterable()",
      "info" : "MethodDeclaration[21817-22213]:MethodDeclaration[21512-21915]"
    }, {
      "left" : "public Iterator<Object> iterator()",
      "right" : "public Iterator<Object> iterator()",
      "info" : "MethodDeclaration[22037-22134]:MethodDeclaration[21739-21836]"
    }, {
      "left" : "public void iterableContainsExactlyInOrderWithOneShotIterableWrongOrder()",
      "right" : "public void iterableContainsExactlyInOrderWithOneShotIterableWrongOrder()",
      "info" : "MethodDeclaration[22217-22956]:MethodDeclaration[21919-22665]"
    }, {
      "left" : "public Iterator<Object> iterator()",
      "right" : "public Iterator<Object> iterator()",
      "info" : "MethodDeclaration[22447-22544]:MethodDeclaration[22156-22253]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[22556-22648]:MethodDeclaration[22265-22357]"
    }, {
      "left" : "public void iterableIsEmptyWithFailure()",
      "right" : "public void iterableIsEmptyWithFailure()",
      "info" : "MethodDeclaration[23045-23306]:MethodDeclaration[22752-23011]"
    }, {
      "left" : "public void iterableIsNotEmptyWithFailure()",
      "right" : "public void iterableIsNotEmptyWithFailure()",
      "info" : "MethodDeclaration[23406-23657]:MethodDeclaration[23109-23358]"
    } ],
    "mappings" : [
 {
      "left" : "@RunWith(JUnit4.class)",
      "right" : "@RunWith(JUnit4.class)",
      "info" : "SingleMemberAnnotation[1242-1264]:SingleMemberAnnotation[1183-1205]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1265-1271]:Modifier[1206-1212]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1272-1277]:TYPE_DECLARATION_KIND[1213-1218]"
    }, {
      "left" : "IterableTest",
      "right" : "IterableTest",
      "info" : "SimpleName[1278-1290]:SimpleName[1219-1231]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[1295-1300]:MarkerAnnotation[1236-1241]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1303-1309]:Modifier[1244-1250]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1310-1314]:PrimitiveType[1251-1255]"
    }, {
      "left" : "hasSize",
      "right" : "hasSize",
      "info" : "SimpleName[1315-1322]:SimpleName[1256-1263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1325-1384]:Block[1266-1325]"
    }, {
      "left" : "assertThat(ImmutableList.of(1, 2, 3)).hasSize(3);",
      "right" : "assertThat(ImmutableList.of(1, 2, 3)).hasSize(3);",
      "info" : "ExpressionStatement[1331-1380]:ExpressionStatement[1272-1321]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[1388-1393]:MarkerAnnotation[1329-1334]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1396-1402]:Modifier[1337-1343]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1403-1407]:PrimitiveType[1344-1348]"
    }, {
      "left" : "hasSizeZero",
      "right" : "hasSizeZero",
      "info" : "SimpleName[1408-1419]:SimpleName[1349-1360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1422-1474]:Block[1363-1415]"
    }, {
      "left" : "assertThat(ImmutableList.of()).hasSize(0);",
      "right" : "assertThat(ImmutableList.of()).hasSize(0);",
      "info" : "ExpressionStatement[1428-1470]:ExpressionStatement[1369-1411]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[1478-1483]:MarkerAnnotation[1419-1424]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1486-1492]:Modifier[1427-1433]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1493-1497]:PrimitiveType[1434-1438]"
    }, {
      "left" : "hasSizeFails",
      "right" : "hasSizeFails",
      "info" : "SimpleName[1498-1510]:SimpleName[1439-1451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1513-1741]:Block[1454-1682]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[1519-1737]:TryStatement[1460-1678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1523-1600]:Block[1464-1541]"
    }, {
      "left" : "assertThat(ImmutableList.of(1, 2, 3)).hasSize(4);",
      "right" : "assertThat(ImmutableList.of(1, 2, 3)).hasSize(4);",
      "info" : "ExpressionStatement[1531-1580]:ExpressionStatement[1472-1521]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[1587-1594]:ExpressionStatement[1528-1535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1633-1737]:Block[1574-1678]"
    }, {
      "left" : "assertThat(expected).hasMessage(\"Not true that <[1, 2, 3]> has a size of <4>. It is <3>\");",
      "right" : "assertThat(expected).hasMessage(\"Not true that <[1, 2, 3]> has a size of <4>. It is <3>\");",
      "info" : "ExpressionStatement[1641-1731]:ExpressionStatement[1582-1672]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[1745-1750]:MarkerAnnotation[1686-1691]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1753-1759]:Modifier[1694-1700]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1760-1764]:PrimitiveType[1701-1705]"
    }, {
      "left" : "hasSizeNegative",
      "right" : "hasSizeNegative",
      "info" : "SimpleName[1765-1780]:SimpleName[1706-1721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1783-1925]:Block[1724-1866]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[1789-1921]:TryStatement[1730-1862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1793-1871]:Block[1734-1812]"
    }, {
      "left" : "assertThat(ImmutableList.of(1, 2, 3)).hasSize(-1);",
      "right" : "assertThat(ImmutableList.of(1, 2, 3)).hasSize(-1);",
      "info" : "ExpressionStatement[1801-1851]:ExpressionStatement[1742-1792]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[1858-1865]:ExpressionStatement[1799-1806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1914-1921]:Block[1855-1862]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1937-1943]:Modifier[1878-1884]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2036-2042]:Modifier[1975-1981]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[2141-2146]:MarkerAnnotation[2078-2083]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2149-2155]:Modifier[2086-2092]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2156-2160]:PrimitiveType[2093-2097]"
    }, {
      "left" : "iterableContainsItemFailure",
      "right" : "iterableContainsItemFailure",
      "info" : "SimpleName[2161-2188]:SimpleName[2098-2125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2191-2402]:Block[2128-2337]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[2197-2398]:TryStatement[2134-2333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2201-2292]:Block[2138-2227]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3)).contains(5);",
      "right" : "assertThat(asList(1, 2, 3)).contains(5);",
      "info" : "ExpressionStatement[2209-2251]:ExpressionStatement[2146-2186]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[2220-2228]:SimpleName[2157-2163]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[2258-2286]:ExpressionStatement[2193-2221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2318-2398]:Block[2253-2333]"
    }, {
      "left" : "assertThat(e).hasMessage(\"<[1, 2, 3]> should have contained <5>\");",
      "right" : "assertThat(e).hasMessage(\"<[1, 2, 3]> should have contained <5>\");",
      "info" : "ExpressionStatement[2326-2392]:ExpressionStatement[2261-2327]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[2406-2411]:MarkerAnnotation[2341-2346]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2414-2420]:Modifier[2349-2355]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2421-2425]:PrimitiveType[2356-2360]"
    }, {
      "left" : "namedIterableContainsItemFailure",
      "right" : "namedIterableContainsItemFailure",
      "info" : "SimpleName[2426-2458]:SimpleName[2361-2393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2461-2699]:Block[2396-2632]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[2467-2695]:TryStatement[2402-2628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2471-2579]:Block[2406-2512]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3)).named(\"numbers\").contains(5);",
      "right" : "assertThat(asList(1, 2, 3)).named(\"numbers\").contains(5);",
      "info" : "ExpressionStatement[2479-2538]:ExpressionStatement[2414-2471]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[2490-2498]:SimpleName[2425-2431]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[2545-2573]:ExpressionStatement[2478-2506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2605-2695]:Block[2538-2628]"
    }, {
      "left" : "assertThat(e).hasMessage(\"numbers (<[1, 2, 3]>) should have contained <5>\");",
      "right" : "assertThat(e).hasMessage(\"numbers (<[1, 2, 3]>) should have contained <5>\");",
      "info" : "ExpressionStatement[2613-2689]:ExpressionStatement[2546-2622]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[2703-2708]:MarkerAnnotation[2636-2641]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2711-2717]:Modifier[2644-2650]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2718-2722]:PrimitiveType[2651-2655]"
    }, {
      "left" : "failureMessageIterableContainsItemFailure",
      "right" : "failureMessageIterableContainsItemFailure",
      "info" : "SimpleName[2723-2764]:SimpleName[2656-2697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2767-3016]:Block[2700-2947]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[2773-3012]:TryStatement[2706-2943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2777-2894]:Block[2710-2825]"
    }, {
      "left" : "assertWithMessage(\"custom msg\").that(iterable(1, 2, 3)).contains(5);",
      "right" : "assertWithMessage(\"custom msg\").that(asList(1, 2, 3)).contains(5);",
      "info" : "ExpressionStatement[2785-2853]:ExpressionStatement[2718-2784]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[2822-2830]:SimpleName[2755-2761]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[2860-2888]:ExpressionStatement[2791-2819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2920-3012]:Block[2851-2943]"
    }, {
      "left" : "assertThat(e).hasMessage(\"custom msg: <[1, 2, 3]> should have contained <5>\");",
      "right" : "assertThat(e).hasMessage(\"custom msg: <[1, 2, 3]> should have contained <5>\");",
      "info" : "ExpressionStatement[2928-3006]:ExpressionStatement[2859-2937]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3028-3034]:Modifier[2959-2965]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3138-3144]:Modifier[3067-3073]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[3248-3253]:MarkerAnnotation[3175-3180]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3256-3262]:Modifier[3183-3189]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3263-3267]:PrimitiveType[3190-3194]"
    }, {
      "left" : "iterableDoesntHaveItemFailure",
      "right" : "iterableDoesntHaveItemFailure",
      "info" : "SimpleName[3268-3297]:SimpleName[3195-3224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3300-3521]:Block[3227-3446]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[3306-3517]:TryStatement[3233-3442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3310-3407]:Block[3237-3332]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3)).doesNotContain(2);",
      "right" : "assertThat(asList(1, 2, 3)).doesNotContain(2);",
      "info" : "ExpressionStatement[3318-3366]:ExpressionStatement[3245-3291]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[3329-3337]:SimpleName[3256-3262]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[3373-3401]:ExpressionStatement[3298-3326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3433-3517]:Block[3358-3442]"
    }, {
      "left" : "assertThat(e).hasMessage(\"<[1, 2, 3]> should not have contained <2>\");",
      "right" : "assertThat(e).hasMessage(\"<[1, 2, 3]> should not have contained <2>\");",
      "info" : "ExpressionStatement[3441-3511]:ExpressionStatement[3366-3436]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3533-3539]:Modifier[3458-3464]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3647-3653]:Modifier[3570-3576]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[3877-3882]:MarkerAnnotation[3688-3693]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3885-3891]:Modifier[3696-3702]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3892-3896]:PrimitiveType[3703-3707]"
    }, {
      "left" : "doesNotContainDuplicatesFailure",
      "right" : "doesNotContainDuplicatesFailure",
      "info" : "SimpleName[3897-3928]:SimpleName[3708-3739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3931-4173]:Block[3742-3982]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[3937-4169]:TryStatement[3748-3978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3941-4046]:Block[3752-3855]"
    }, {
      "left" : "assertThat(iterable(1, 2, 2, 3)).containsNoDuplicates();",
      "right" : "assertThat(asList(1, 2, 2, 3)).containsNoDuplicates();",
      "info" : "ExpressionStatement[3949-4005]:ExpressionStatement[3760-3814]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[3960-3968]:SimpleName[3771-3777]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[4012-4040]:ExpressionStatement[3821-3849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4072-4169]:Block[3881-3978]"
    }, {
      "left" : "assertThat(e).hasMessage(\"<[1, 2, 2, 3]> has the following duplicates: <[2 x 2]>\");",
      "right" : "assertThat(e).hasMessage(\"<[1, 2, 2, 3]> has the following duplicates: <[2 x 2]>\");",
      "info" : "ExpressionStatement[4080-4163]:ExpressionStatement[3889-3972]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4185-4191]:Modifier[3994-4000]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4293-4299]:Modifier[4100-4106]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[4407-4412]:MarkerAnnotation[4212-4217]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4415-4421]:Modifier[4220-4226]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4422-4426]:PrimitiveType[4227-4231]"
    }, {
      "left" : "iterableContainsAnyOfWithNullInThirdAndFinalPosition",
      "right" : "iterableContainsAnyOfWithNullInThirdAndFinalPosition",
      "info" : "SimpleName[4427-4479]:SimpleName[4232-4284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4482-4561]:Block[4287-4364]"
    }, {
      "left" : "assertThat(iterable(1, null, 3)).containsAnyOf(4, 5, (Integer) null);",
      "right" : "assertThat(asList(1, null, 3)).containsAnyOf(4, 5, (Integer) null);",
      "info" : "ExpressionStatement[4488-4557]:ExpressionStatement[4293-4360]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[4499-4507]:SimpleName[4304-4310]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[4565-4570]:MarkerAnnotation[4368-4373]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4573-4579]:Modifier[4376-4382]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4580-4584]:PrimitiveType[4383-4387]"
    }, {
      "left" : "iterableContainsAnyOfFailure",
      "right" : "iterableContainsAnyOfFailure",
      "info" : "SimpleName[4585-4613]:SimpleName[4388-4416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4616-4854]:Block[4419-4655]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[4622-4850]:TryStatement[4425-4651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4626-4728]:Block[4429-4529]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3)).containsAnyOf(5, 6, 0);",
      "right" : "assertThat(asList(1, 2, 3)).containsAnyOf(5, 6, 0);",
      "info" : "ExpressionStatement[4634-4687]:ExpressionStatement[4437-4488]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[4645-4653]:SimpleName[4448-4454]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[4694-4722]:ExpressionStatement[4495-4523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4754-4850]:Block[4555-4651]"
    }, {
      "left" : "assertThat(e).hasMessage(\"Not true that <[1, 2, 3]> contains any of <[5, 6, 0]>\");",
      "right" : "assertThat(e).hasMessage(\"Not true that <[1, 2, 3]> contains any of <[5, 6, 0]>\");",
      "info" : "ExpressionStatement[4762-4844]:ExpressionStatement[4563-4645]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[4858-4863]:MarkerAnnotation[4659-4664]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4866-4872]:Modifier[4667-4673]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4873-4877]:PrimitiveType[4674-4678]"
    }, {
      "left" : "iterableContainsAnyOfWithOneShotIterable",
      "right" : "iterableContainsAnyOfWithOneShotIterable",
      "info" : "SimpleName[4878-4918]:SimpleName[4679-4719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4921-5240]:Block[4722-5048]"
    }, {
      "left" : "final Iterator<Object> iterator = iterable(2, 1, \"b\").iterator();",
      "right" : "final Iterator<Object> iterator = asList((Object) 2, 1, \"b\").iterator();",
      "info" : "VariableDeclarationStatement[4927-4992]:VariableDeclarationStatement[4728-4800]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[4961-4969]:SimpleName[4762-4768]"
    }, {
      "left" : "1",
      "right" : "1",
      "info" : "NumberLiteral[4973-4974]:NumberLiteral[4781-4782]"
    }, {
      "left" : "\"b\"",
      "right" : "\"b\"",
      "info" : "StringLiteral[4976-4979]:StringLiteral[4784-4787]"
    }, {
      "left" : "Iterable<Object> iterable =\n        new Iterable<Object>() {\n          @Override\n          public Iterator<Object> iterator() {\n            return iterator;\n          }\n        };",
      "right" : "Iterable<Object> iterable =\n        new Iterable<Object>() {\n          @Override\n          public Iterator<Object> iterator() {\n            return iterator;\n          }\n        };",
      "info" : "VariableDeclarationStatement[4997-5176]:VariableDeclarationStatement[4805-4984]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5068-5077]:MarkerAnnotation[4876-4885]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5088-5094]:Modifier[4896-4902]"
    }, {
      "left" : "Iterator<Object>",
      "right" : "Iterator<Object>",
      "info" : "ParameterizedType[5095-5111]:ParameterizedType[4903-4919]"
    }, {
      "left" : "iterator",
      "right" : "iterator",
      "info" : "SimpleName[5112-5120]:SimpleName[4920-4928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5123-5165]:Block[4931-4973]"
    }, {
      "left" : "return iterator;",
      "right" : "return iterator;",
      "info" : "ReturnStatement[5137-5153]:ReturnStatement[4945-4961]"
    }, {
      "left" : "assertThat(iterable).containsAnyOf(3, \"a\", 7, \"b\", 0);",
      "right" : "assertThat(iterable).containsAnyOf(3, \"a\", 7, \"b\", 0);",
      "info" : "ExpressionStatement[5182-5236]:ExpressionStatement[4990-5044]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5252-5258]:Modifier[5060-5066]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5368-5374]:Modifier[5174-5180]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[5488-5493]:MarkerAnnotation[5292-5297]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5496-5502]:Modifier[5300-5306]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5503-5507]:PrimitiveType[5307-5311]"
    }, {
      "left" : "iterableContainsAllOfWithNull",
      "right" : "iterableContainsAllOfWithNull",
      "info" : "SimpleName[5508-5537]:SimpleName[5312-5341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5540-5616]:Block[5344-5418]"
    }, {
      "left" : "assertThat(iterable(1, null, 3)).containsAllOf(3, (Integer) null);",
      "right" : "assertThat(asList(1, null, 3)).containsAllOf(3, (Integer) null);",
      "info" : "ExpressionStatement[5546-5612]:ExpressionStatement[5350-5414]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[5557-5565]:SimpleName[5361-5367]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5628-5634]:Modifier[5430-5436]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[5768-5773]:MarkerAnnotation[5568-5573]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5776-5782]:Modifier[5576-5582]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5783-5787]:PrimitiveType[5583-5587]"
    }, {
      "left" : "iterableContainsAllOfFailure",
      "right" : "iterableContainsAllOfFailure",
      "info" : "SimpleName[5788-5816]:SimpleName[5588-5616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5819-6089]:Block[5619-5887]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[5825-6085]:TryStatement[5625-5883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5829-5931]:Block[5629-5729]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3)).containsAllOf(1, 2, 4);",
      "right" : "assertThat(asList(1, 2, 3)).containsAllOf(1, 2, 4);",
      "info" : "ExpressionStatement[5837-5890]:ExpressionStatement[5637-5688]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[5848-5856]:SimpleName[5648-5654]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[5897-5925]:ExpressionStatement[5695-5723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5957-6085]:Block[5755-5883]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\"Not true that <[1, 2, 3]> contains all of <[1, 2, 4]>. It is missing <[4]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\"Not true that <[1, 2, 3]> contains all of <[1, 2, 4]>. It is missing <[4]>\");",
      "info" : "ExpressionStatement[5965-6079]:ExpressionStatement[5763-5877]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[6093-6098]:MarkerAnnotation[5891-5896]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6101-6107]:Modifier[5899-5905]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6108-6112]:PrimitiveType[5906-5910]"
    }, {
      "left" : "iterableContainsAllOfWithExtras",
      "right" : "iterableContainsAllOfWithExtras",
      "info" : "SimpleName[6113-6144]:SimpleName[5911-5942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6147-6447]:Block[5945-6243]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6153-6410]:TryStatement[5951-6206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6157-6231]:Block[5955-6027]"
    }, {
      "left" : "assertThat(iterable(\"y\", \"x\")).containsAllOf(\"x\", \"y\", \"z\");",
      "right" : "assertThat(asList(\"y\", \"x\")).containsAllOf(\"x\", \"y\", \"z\");",
      "info" : "ExpressionStatement[6165-6225]:ExpressionStatement[5963-6021]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[6176-6184]:SimpleName[5974-5980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6264-6410]:Block[6060-6206]"
    }, {
      "left" : "assertThat(expected)\n          .hasMessage(\"Not true that <[y, x]> contains all of <[x, y, z]>. It is missing <[z]>\");",
      "right" : "assertThat(expected)\n          .hasMessage(\"Not true that <[y, x]> contains all of <[x, y, z]>. It is missing <[z]>\");",
      "info" : "ExpressionStatement[6272-6390]:ExpressionStatement[6068-6186]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6397-6404]:ReturnStatement[6193-6200]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[6415-6443]:ExpressionStatement[6211-6239]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[6451-6456]:MarkerAnnotation[6247-6252]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6459-6465]:Modifier[6255-6261]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6466-6470]:PrimitiveType[6262-6266]"
    }, {
      "left" : "iterableContainsAllOfWithExtraCopiesOfOutOfOrder",
      "right" : "iterableContainsAllOfWithExtraCopiesOfOutOfOrder",
      "info" : "SimpleName[6471-6519]:SimpleName[6267-6315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6522-6822]:Block[6318-6616]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6528-6785]:TryStatement[6324-6579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6532-6606]:Block[6328-6400]"
    }, {
      "left" : "assertThat(iterable(\"y\", \"x\")).containsAllOf(\"x\", \"y\", \"y\");",
      "right" : "assertThat(asList(\"y\", \"x\")).containsAllOf(\"x\", \"y\", \"y\");",
      "info" : "ExpressionStatement[6540-6600]:ExpressionStatement[6336-6394]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[6551-6559]:SimpleName[6347-6353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6639-6785]:Block[6433-6579]"
    }, {
      "left" : "assertThat(expected)\n          .hasMessage(\"Not true that <[y, x]> contains all of <[x, y, y]>. It is missing <[y]>\");",
      "right" : "assertThat(expected)\n          .hasMessage(\"Not true that <[y, x]> contains all of <[x, y, y]>. It is missing <[y]>\");",
      "info" : "ExpressionStatement[6647-6765]:ExpressionStatement[6441-6559]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6772-6779]:ReturnStatement[6566-6573]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[6790-6818]:ExpressionStatement[6584-6612]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[6826-6831]:MarkerAnnotation[6620-6625]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6834-6840]:Modifier[6628-6634]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6841-6845]:PrimitiveType[6635-6639]"
    }, {
      "left" : "iterableContainsAllOfWithDuplicatesFailure",
      "right" : "iterableContainsAllOfWithDuplicatesFailure",
      "info" : "SimpleName[6846-6888]:SimpleName[6640-6682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6891-7231]:Block[6685-7023]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6897-7227]:TryStatement[6691-7019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6901-7012]:Block[6695-6804]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3)).containsAllOf(1, 2, 2, 2, 3, 4);",
      "right" : "assertThat(asList(1, 2, 3)).containsAllOf(1, 2, 2, 2, 3, 4);",
      "info" : "ExpressionStatement[6909-6971]:ExpressionStatement[6703-6763]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[6920-6928]:SimpleName[6714-6720]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[6978-7006]:ExpressionStatement[6770-6798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7038-7227]:Block[6830-7019]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3]> contains all of <[1, 2, 2, 2, 3, 4]>. \"\n                  + \"It is missing <[2 [2 copies], 4]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3]> contains all of <[1, 2, 2, 2, 3, 4]>. \"\n                  + \"It is missing <[2 [2 copies], 4]>\");",
      "info" : "ExpressionStatement[7046-7221]:ExpressionStatement[6838-7013]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[7392-7397]:MarkerAnnotation[7184-7189]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7400-7406]:Modifier[7192-7198]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7407-7411]:PrimitiveType[7199-7203]"
    }, {
      "left" : "iterableContainsAllOfWithDuplicateMissingElements",
      "right" : "iterableContainsAllOfWithDuplicateMissingElements",
      "info" : "SimpleName[7412-7461]:SimpleName[7204-7253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7464-7754]:Block[7256-7544]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7470-7750]:TryStatement[7262-7540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7474-7573]:Block[7266-7363]"
    }, {
      "left" : "assertThat(iterable(1, 2)).containsAllOf(4, 4, 4);",
      "right" : "assertThat(asList(1, 2)).containsAllOf(4, 4, 4);",
      "info" : "ExpressionStatement[7482-7532]:ExpressionStatement[7274-7322]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[7493-7501]:SimpleName[7285-7291]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[7539-7567]:ExpressionStatement[7329-7357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7599-7750]:Block[7389-7540]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2]> contains all of <[4, 4, 4]>. It is missing <[4 [3 copies]]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2]> contains all of <[4, 4, 4]>. It is missing <[4 [3 copies]]>\");",
      "info" : "ExpressionStatement[7607-7744]:ExpressionStatement[7397-7534]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[7758-7763]:MarkerAnnotation[7548-7553]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7766-7772]:Modifier[7556-7562]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7773-7777]:PrimitiveType[7563-7567]"
    }, {
      "left" : "iterableContainsAllOfWithNullFailure",
      "right" : "iterableContainsAllOfWithNullFailure",
      "info" : "SimpleName[7778-7814]:SimpleName[7568-7604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7817-8152]:Block[7607-7940]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7823-8148]:TryStatement[7613-7936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7827-7941]:Block[7617-7729]"
    }, {
      "left" : "assertThat(iterable(1, null, 3)).containsAllOf(1, null, null, 3);",
      "right" : "assertThat(asList(1, null, 3)).containsAllOf(1, null, null, 3);",
      "info" : "ExpressionStatement[7835-7900]:ExpressionStatement[7625-7688]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[7846-7854]:SimpleName[7636-7642]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[7907-7935]:ExpressionStatement[7695-7723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7967-8148]:Block[7755-7936]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, null, 3]> contains all of <[1, null, null, 3]>. \"\n                  + \"It is missing <[null]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, null, 3]> contains all of <[1, null, null, 3]>. \"\n                  + \"It is missing <[null]>\");",
      "info" : "ExpressionStatement[7975-8142]:ExpressionStatement[7763-7930]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8164-8170]:Modifier[7952-7958]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8292-8298]:Modifier[8078-8084]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8926-8932]:Modifier[8698-8704]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[9137-9142]:MarkerAnnotation[8905-8910]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9145-9151]:Modifier[8913-8919]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9152-9156]:PrimitiveType[8920-8924]"
    }, {
      "left" : "iterableContainsAllOfInOrderWithFailure",
      "right" : "iterableContainsAllOfInOrderWithFailure",
      "info" : "SimpleName[9157-9196]:SimpleName[8925-8964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9199-9485]:Block[8967-9251]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9205-9481]:TryStatement[8973-9247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9209-9327]:Block[8977-9093]"
    }, {
      "left" : "assertThat(iterable(1, null, 3)).containsAllOf(null, 1, 3).inOrder();",
      "right" : "assertThat(asList(1, null, 3)).containsAllOf(null, 1, 3).inOrder();",
      "info" : "ExpressionStatement[9217-9286]:ExpressionStatement[8985-9052]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[9228-9236]:SimpleName[8996-9002]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[9293-9321]:ExpressionStatement[9059-9087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9353-9481]:Block[9119-9247]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\"Not true that <[1, null, 3]> contains all elements in order <[null, 1, 3]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\"Not true that <[1, null, 3]> contains all elements in order <[null, 1, 3]>\");",
      "info" : "ExpressionStatement[9361-9475]:ExpressionStatement[9127-9241]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[9489-9494]:MarkerAnnotation[9255-9260]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9497-9503]:Modifier[9263-9269]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9504-9508]:PrimitiveType[9270-9274]"
    }, {
      "left" : "iterableContainsAllOfInOrderWithOneShotIterable",
      "right" : "iterableContainsAllOfInOrderWithOneShotIterable",
      "info" : "SimpleName[9509-9556]:SimpleName[9275-9322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9559-10063]:Block[9325-9827]"
    }, {
      "left" : "final Iterable<Object> iterable = iterable(2, 1, null, 4, \"a\", 3, \"b\");",
      "right" : "final Iterable<Object> iterable = asList(2, 1, null, 4, \"a\", 3, \"b\");",
      "info" : "VariableDeclarationStatement[9565-9636]:VariableDeclarationStatement[9331-9400]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[9599-9607]:SimpleName[9365-9371]"
    }, {
      "left" : "final Iterator<Object> iterator = iterable.iterator();",
      "right" : "final Iterator<Object> iterator = iterable.iterator();",
      "info" : "VariableDeclarationStatement[9641-9695]:VariableDeclarationStatement[9405-9459]"
    }, {
      "left" : "Iterable<Object> oneShot =\n        new Iterable<Object>() {\n          @Override\n          public Iterator<Object> iterator() {\n            return iterator;\n          }\n\n          @Override\n          public String toString() {\n            return Iterables.toString(iterable);\n          }\n        };",
      "right" : "Iterable<Object> oneShot =\n        new Iterable<Object>() {\n          @Override\n          public Iterator<Object> iterator() {\n            return iterator;\n          }\n\n          @Override\n          public String toString() {\n            return Iterables.toString(iterable);\n          }\n        };",
      "info" : "VariableDeclarationStatement[9700-9997]:VariableDeclarationStatement[9464-9761]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9770-9779]:MarkerAnnotation[9534-9543]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9790-9796]:Modifier[9554-9560]"
    }, {
      "left" : "Iterator<Object>",
      "right" : "Iterator<Object>",
      "info" : "ParameterizedType[9797-9813]:ParameterizedType[9561-9577]"
    }, {
      "left" : "iterator",
      "right" : "iterator",
      "info" : "SimpleName[9814-9822]:SimpleName[9578-9586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9825-9867]:Block[9589-9631]"
    }, {
      "left" : "return iterator;",
      "right" : "return iterator;",
      "info" : "ReturnStatement[9839-9855]:ReturnStatement[9603-9619]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9879-9888]:MarkerAnnotation[9643-9652]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9899-9905]:Modifier[9663-9669]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[9906-9912]:SimpleType[9670-9676]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[9913-9921]:SimpleName[9677-9685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9924-9986]:Block[9688-9750]"
    }, {
      "left" : "return Iterables.toString(iterable);",
      "right" : "return Iterables.toString(iterable);",
      "info" : "ReturnStatement[9938-9974]:ReturnStatement[9702-9738]"
    }, {
      "left" : "assertThat(oneShot).containsAllOf(1, null, 3).inOrder();",
      "right" : "assertThat(oneShot).containsAllOf(1, null, 3).inOrder();",
      "info" : "ExpressionStatement[10003-10059]:ExpressionStatement[9767-9823]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[10067-10072]:MarkerAnnotation[9831-9836]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10075-10081]:Modifier[9839-9845]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10082-10086]:PrimitiveType[9846-9850]"
    }, {
      "left" : "iterableContainsAllOfInOrderWithOneShotIterableWrongOrder",
      "right" : "iterableContainsAllOfInOrderWithOneShotIterableWrongOrder",
      "info" : "SimpleName[10087-10144]:SimpleName[9851-9908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10147-10796]:Block[9911-10567]"
    }, {
      "left" : "final Iterator<Object> iterator = iterable(2, 1, null, 4, \"a\", 3, \"b\").iterator();",
      "right" : "final Iterator<Object> iterator = asList((Object) 2, 1, null, 4, \"a\", 3, \"b\").iterator();",
      "info" : "VariableDeclarationStatement[10153-10235]:VariableDeclarationStatement[9917-10006]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[10187-10195]:SimpleName[9951-9957]"
    }, {
      "left" : "1",
      "right" : "1",
      "info" : "NumberLiteral[10199-10200]:NumberLiteral[9970-9971]"
    }, {
      "left" : "null",
      "right" : "null",
      "info" : "NullLiteral[10202-10206]:NullLiteral[9973-9977]"
    }, {
      "left" : "4",
      "right" : "4",
      "info" : "NumberLiteral[10208-10209]:NumberLiteral[9979-9980]"
    }, {
      "left" : "\"a\"",
      "right" : "\"a\"",
      "info" : "StringLiteral[10211-10214]:StringLiteral[9982-9985]"
    }, {
      "left" : "3",
      "right" : "3",
      "info" : "NumberLiteral[10216-10217]:NumberLiteral[9987-9988]"
    }, {
      "left" : "\"b\"",
      "right" : "\"b\"",
      "info" : "StringLiteral[10219-10222]:StringLiteral[9990-9993]"
    }, {
      "left" : "Iterable<Object> iterable =\n        new Iterable<Object>() {\n          @Override\n          public Iterator<Object> iterator() {\n            return iterator;\n          }\n\n          @Override\n          public String toString() {\n            return \"BadIterable\";\n          }\n        };",
      "right" : "Iterable<Object> iterable =\n        new Iterable<Object>() {\n          @Override\n          public Iterator<Object> iterator() {\n            return iterator;\n          }\n\n          @Override\n          public String toString() {\n            return \"BadIterable\";\n          }\n        };",
      "info" : "VariableDeclarationStatement[10240-10523]:VariableDeclarationStatement[10011-10294]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10311-10320]:MarkerAnnotation[10082-10091]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10331-10337]:Modifier[10102-10108]"
    }, {
      "left" : "Iterator<Object>",
      "right" : "Iterator<Object>",
      "info" : "ParameterizedType[10338-10354]:ParameterizedType[10109-10125]"
    }, {
      "left" : "iterator",
      "right" : "iterator",
      "info" : "SimpleName[10355-10363]:SimpleName[10126-10134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10366-10408]:Block[10137-10179]"
    }, {
      "left" : "return iterator;",
      "right" : "return iterator;",
      "info" : "ReturnStatement[10380-10396]:ReturnStatement[10151-10167]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10420-10429]:MarkerAnnotation[10191-10200]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10440-10446]:Modifier[10211-10217]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[10447-10453]:SimpleType[10218-10224]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[10454-10462]:SimpleName[10225-10233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10465-10512]:Block[10236-10283]"
    }, {
      "left" : "return \"BadIterable\";",
      "right" : "return \"BadIterable\";",
      "info" : "ReturnStatement[10479-10500]:ReturnStatement[10250-10271]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10529-10792]:TryStatement[10300-10563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10533-10639]:Block[10304-10410]"
    }, {
      "left" : "assertThat(iterable).containsAllOf(1, 3, null).inOrder();",
      "right" : "assertThat(iterable).containsAllOf(1, 3, null).inOrder();",
      "info" : "ExpressionStatement[10541-10598]:ExpressionStatement[10312-10369]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[10605-10633]:ExpressionStatement[10376-10404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10665-10792]:Block[10436-10563]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\"Not true that <BadIterable> contains all elements in order <[1, 3, null]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\"Not true that <BadIterable> contains all elements in order <[1, 3, null]>\");",
      "info" : "ExpressionStatement[10673-10786]:ExpressionStatement[10444-10557]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10808-10814]:Modifier[10579-10585]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[10913-10918]:MarkerAnnotation[10682-10687]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10921-10927]:Modifier[10690-10696]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10928-10932]:PrimitiveType[10697-10701]"
    }, {
      "left" : "iterableContainsNoneOfFailure",
      "right" : "iterableContainsNoneOfFailure",
      "info" : "SimpleName[10933-10962]:SimpleName[10702-10731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10965-11253]:Block[10734-11020]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10971-11249]:TryStatement[10740-11016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10975-11078]:Block[10744-10845]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3)).containsNoneOf(1, 2, 4);",
      "right" : "assertThat(asList(1, 2, 3)).containsNoneOf(1, 2, 4);",
      "info" : "ExpressionStatement[10983-11037]:ExpressionStatement[10752-10804]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[10994-11002]:SimpleName[10763-10769]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[11044-11072]:ExpressionStatement[10811-10839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11104-11249]:Block[10871-11016]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3]> contains none of <[1, 2, 4]>. It contains <[1, 2]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3]> contains none of <[1, 2, 4]>. It contains <[1, 2]>\");",
      "info" : "ExpressionStatement[11112-11243]:ExpressionStatement[10879-11010]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[11257-11262]:MarkerAnnotation[11024-11029]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11265-11271]:Modifier[11032-11038]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11272-11276]:PrimitiveType[11039-11043]"
    }, {
      "left" : "iterableContainsNoneOfFailureWithDuplicateInSubject",
      "right" : "iterableContainsNoneOfFailureWithDuplicateInSubject",
      "info" : "SimpleName[11277-11328]:SimpleName[11044-11095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11331-11625]:Block[11098-11390]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11337-11621]:TryStatement[11104-11386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11341-11447]:Block[11108-11212]"
    }, {
      "left" : "assertThat(iterable(1, 2, 2, 3)).containsNoneOf(1, 2, 4);",
      "right" : "assertThat(asList(1, 2, 2, 3)).containsNoneOf(1, 2, 4);",
      "info" : "ExpressionStatement[11349-11406]:ExpressionStatement[11116-11171]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[11360-11368]:SimpleName[11127-11133]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[11413-11441]:ExpressionStatement[11178-11206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11473-11621]:Block[11238-11386]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 2, 3]> contains none of <[1, 2, 4]>. It contains <[1, 2]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 2, 3]> contains none of <[1, 2, 4]>. It contains <[1, 2]>\");",
      "info" : "ExpressionStatement[11481-11615]:ExpressionStatement[11246-11380]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[11629-11634]:MarkerAnnotation[11394-11399]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11637-11643]:Modifier[11402-11408]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11644-11648]:PrimitiveType[11409-11413]"
    }, {
      "left" : "iterableContainsNoneOfFailureWithDuplicateInExpected",
      "right" : "iterableContainsNoneOfFailureWithDuplicateInExpected",
      "info" : "SimpleName[11649-11701]:SimpleName[11414-11466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11704-11998]:Block[11469-11761]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11710-11994]:TryStatement[11475-11757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11714-11820]:Block[11479-11583]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3)).containsNoneOf(1, 2, 2, 4);",
      "right" : "assertThat(asList(1, 2, 3)).containsNoneOf(1, 2, 2, 4);",
      "info" : "ExpressionStatement[11722-11779]:ExpressionStatement[11487-11542]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[11733-11741]:SimpleName[11498-11504]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[11786-11814]:ExpressionStatement[11549-11577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11846-11994]:Block[11609-11757]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3]> contains none of <[1, 2, 2, 4]>. It contains <[1, 2]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3]> contains none of <[1, 2, 2, 4]>. It contains <[1, 2]>\");",
      "info" : "ExpressionStatement[11854-11988]:ExpressionStatement[11617-11751]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[12002-12007]:MarkerAnnotation[11765-11770]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12010-12016]:Modifier[11773-11779]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12017-12021]:PrimitiveType[11780-11784]"
    }, {
      "left" : "listContainsExactlyArray",
      "right" : "iterableContainsExactlyArray",
      "info" : "SimpleName[12022-12046]:SimpleName[11785-11813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12049-12272]:Block[11816-12039]"
    }, {
      "left" : "String[] stringArray = {\"a\", \"b\"};",
      "right" : "String[] stringArray = {\"a\", \"b\"};",
      "info" : "VariableDeclarationStatement[12055-12089]:VariableDeclarationStatement[11822-11856]"
    }, {
      "left" : "ImmutableList<String[]> iterable = ImmutableList.of(stringArray);",
      "right" : "ImmutableList<String[]> iterable = ImmutableList.of(stringArray);",
      "info" : "VariableDeclarationStatement[12094-12159]:VariableDeclarationStatement[11861-11926]"
    }, {
      "left" : "assertThat(iterable).containsExactly((Object) stringArray);",
      "right" : "assertThat(iterable).containsExactly((Object) stringArray);",
      "info" : "ExpressionStatement[12209-12268]:ExpressionStatement[11976-12035]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[12276-12281]:MarkerAnnotation[12043-12048]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12284-12290]:Modifier[12051-12057]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12291-12295]:PrimitiveType[12058-12062]"
    }, {
      "left" : "arrayContainsExactly",
      "right" : "arrayContainsExactly",
      "info" : "SimpleName[12296-12316]:SimpleName[12063-12083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12319-12471]:Block[12086-12238]"
    }, {
      "left" : "ImmutableList<String> iterable = ImmutableList.of(\"a\", \"b\");",
      "right" : "ImmutableList<String> iterable = ImmutableList.of(\"a\", \"b\");",
      "info" : "VariableDeclarationStatement[12325-12385]:VariableDeclarationStatement[12092-12152]"
    }, {
      "left" : "String[] array = {\"a\", \"b\"};",
      "right" : "String[] array = {\"a\", \"b\"};",
      "info" : "VariableDeclarationStatement[12390-12418]:VariableDeclarationStatement[12157-12185]"
    }, {
      "left" : "assertThat(iterable).containsExactly(array);",
      "right" : "assertThat(iterable).containsExactly(array);",
      "info" : "ExpressionStatement[12423-12467]:ExpressionStatement[12190-12234]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12483-12489]:Modifier[12250-12256]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12606-12612]:Modifier[12371-12377]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12737-12743]:Modifier[12500-12506]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12878-12884]:Modifier[12639-12645]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[13021-13026]:MarkerAnnotation[12780-12785]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13029-13035]:Modifier[12788-12794]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13036-13040]:PrimitiveType[12795-12799]"
    }, {
      "left" : "iterableContainsExactlyWithOnlyNull",
      "right" : "iterableContainsExactlyWithOnlyNull",
      "info" : "SimpleName[13041-13076]:SimpleName[12800-12835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13079-13185]:Block[12838-12942]"
    }, {
      "left" : "Iterable<Object> actual = iterable((Object) null);",
      "right" : "Iterable<Object> actual = asList((Object) null);",
      "info" : "VariableDeclarationStatement[13085-13135]:VariableDeclarationStatement[12844-12892]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[13111-13119]:SimpleName[12870-12876]"
    }, {
      "left" : "assertThat(actual).containsExactly(null);",
      "right" : "assertThat(actual).containsExactly(null);",
      "info" : "ExpressionStatement[13140-13181]:ExpressionStatement[12897-12938]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13197-13203]:Modifier[12954-12960]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13326-13332]:Modifier[13081-13087]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13460-13466]:Modifier[13213-13219]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[13581-13586]:MarkerAnnotation[13332-13337]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13589-13595]:Modifier[13340-13346]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13596-13600]:PrimitiveType[13347-13351]"
    }, {
      "left" : "iterableContainsExactlyWithNullOutOfOrder",
      "right" : "iterableContainsExactlyWithNullOutOfOrder",
      "info" : "SimpleName[13601-13642]:SimpleName[13352-13393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13645-13726]:Block[13396-13475]"
    }, {
      "left" : "assertThat(iterable(1, null, 3)).containsExactly(1, 3, (Integer) null);",
      "right" : "assertThat(asList(1, null, 3)).containsExactly(1, 3, (Integer) null);",
      "info" : "ExpressionStatement[13651-13722]:ExpressionStatement[13402-13471]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[13662-13670]:SimpleName[13413-13419]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[13730-13735]:MarkerAnnotation[13479-13484]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13738-13744]:Modifier[13487-13493]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13745-13749]:PrimitiveType[13494-13498]"
    }, {
      "left" : "iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCode",
      "right" : "iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCode",
      "info" : "SimpleName[13750-13813]:SimpleName[13499-13562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13816-14546]:Block[13565-14281]"
    }, {
      "left" : "HashCodeThrower one = new HashCodeThrower();",
      "right" : "HashCodeThrower one = new HashCodeThrower();",
      "info" : "VariableDeclarationStatement[13822-13866]:VariableDeclarationStatement[13571-13615]"
    }, {
      "left" : "HashCodeThrower two = new HashCodeThrower();",
      "right" : "HashCodeThrower two = new HashCodeThrower();",
      "info" : "VariableDeclarationStatement[13871-13915]:VariableDeclarationStatement[13620-13664]"
    }, {
      "left" : "assertThat(iterable(one, two)).containsExactly(two, one);",
      "right" : "assertThat(asList(one, two)).containsExactly(two, one);",
      "info" : "ExpressionStatement[13921-13978]:ExpressionStatement[13670-13725]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[13932-13940]:SimpleName[13681-13687]"
    }, {
      "left" : "assertThat(iterable(one, two)).containsExactly(one, two).inOrder();",
      "right" : "assertThat(asList(one, two)).containsExactly(one, two).inOrder();",
      "info" : "ExpressionStatement[13983-14050]:ExpressionStatement[13730-13795]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[13994-14002]:SimpleName[13741-13747]"
    }, {
      "left" : "assertThat(iterable(one, two)).containsExactlyElementsIn(iterable(two, one));",
      "right" : "assertThat(asList(one, two)).containsExactlyElementsIn(asList(two, one));",
      "info" : "ExpressionStatement[14055-14132]:ExpressionStatement[13800-13873]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[14066-14074]:SimpleName[13811-13817]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[14112-14120]:SimpleName[13855-13861]"
    }, {
      "left" : "assertThat(iterable(one, two)).containsExactlyElementsIn(iterable(one, two)).inOrder();",
      "right" : "assertThat(asList(one, two)).containsExactlyElementsIn(asList(one, two)).inOrder();",
      "info" : "ExpressionStatement[14137-14224]:ExpressionStatement[13878-13961]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[14148-14156]:SimpleName[13889-13895]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[14194-14202]:SimpleName[13933-13939]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[14230-14530]:TryStatement[13967-14265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14234-14300]:Block[13971-14035]"
    }, {
      "left" : "assertThat(iterable(one, two)).containsExactly(one);",
      "right" : "assertThat(asList(one, two)).containsExactly(one);",
      "info" : "ExpressionStatement[14242-14294]:ExpressionStatement[13979-14029]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[14253-14261]:SimpleName[13990-13996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14333-14530]:Block[14068-14265]"
    }, {
      "left" : "assertThat(expected)\n          .hasMessage(\n              \"Not true that <[HCT, HCT]> contains exactly <[HCT]>. \"\n                  + \"It has unexpected items <[HCT]>\");",
      "right" : "assertThat(expected)\n          .hasMessage(\n              \"Not true that <[HCT, HCT]> contains exactly <[HCT]>. \"\n                  + \"It has unexpected items <[HCT]>\");",
      "info" : "ExpressionStatement[14341-14510]:ExpressionStatement[14076-14245]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[14517-14524]:ReturnStatement[14252-14259]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[14535-14542]:ExpressionStatement[14270-14277]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14550-14557]:Modifier[14285-14292]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14558-14564]:Modifier[14293-14299]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[14565-14570]:TYPE_DECLARATION_KIND[14300-14305]"
    }, {
      "left" : "HashCodeThrower",
      "right" : "HashCodeThrower",
      "info" : "SimpleName[14571-14586]:SimpleName[14306-14321]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14593-14602]:MarkerAnnotation[14328-14337]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14607-14613]:Modifier[14342-14348]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[14614-14621]:PrimitiveType[14349-14356]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[14622-14628]:SimpleName[14357-14363]"
    }, {
      "left" : "Object other",
      "right" : "Object other",
      "info" : "SingleVariableDeclaration[14629-14641]:SingleVariableDeclaration[14364-14376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14643-14678]:Block[14378-14413]"
    }, {
      "left" : "return this == other;",
      "right" : "return this == other;",
      "info" : "ReturnStatement[14651-14672]:ReturnStatement[14386-14407]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14684-14693]:MarkerAnnotation[14419-14428]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14698-14704]:Modifier[14433-14439]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[14705-14708]:PrimitiveType[14440-14443]"
    }, {
      "left" : "hashCode",
      "right" : "hashCode",
      "info" : "SimpleName[14709-14717]:SimpleName[14444-14452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14720-14776]:Block[14455-14511]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[14728-14770]:ThrowStatement[14463-14505]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14782-14791]:MarkerAnnotation[14517-14526]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14796-14802]:Modifier[14531-14537]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[14803-14809]:SimpleType[14538-14544]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[14810-14818]:SimpleName[14545-14553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14821-14848]:Block[14556-14583]"
    }, {
      "left" : "return \"HCT\";",
      "right" : "return \"HCT\";",
      "info" : "ReturnStatement[14829-14842]:ReturnStatement[14564-14577]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[14856-14861]:MarkerAnnotation[14591-14596]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14864-14870]:Modifier[14599-14605]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14871-14875]:PrimitiveType[14606-14610]"
    }, {
      "left" : "iterableContainsExactlyElementsInErrorMessageIsOrdered",
      "right" : "iterableContainsExactlyElementsInErrorMessageIsOrdered",
      "info" : "SimpleName[14876-14930]:SimpleName[14611-14665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14933-15333]:Block[14668-15068]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[14939-15296]:TryStatement[14674-15031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14943-15038]:Block[14678-14773]"
    }, {
      "left" : "assertThat(asList(\"foo OR bar\")).containsExactlyElementsIn(asList(\"foo\", \"bar\"));",
      "right" : "assertThat(asList(\"foo OR bar\")).containsExactlyElementsIn(asList(\"foo\", \"bar\"));",
      "info" : "ExpressionStatement[14951-15032]:ExpressionStatement[14686-14767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15064-15296]:Block[14799-15031]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[foo OR bar]> contains exactly <[foo, bar]>. \"\n                  + \"It is missing <[foo, bar]> and has unexpected items <[foo OR bar]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[foo OR bar]> contains exactly <[foo, bar]>. \"\n                  + \"It is missing <[foo, bar]> and has unexpected items <[foo OR bar]>\");",
      "info" : "ExpressionStatement[15072-15276]:ExpressionStatement[14807-15011]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[15283-15290]:ReturnStatement[15018-15025]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[15301-15329]:ExpressionStatement[15036-15064]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[15337-15342]:MarkerAnnotation[15072-15077]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15345-15351]:Modifier[15080-15086]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15352-15356]:PrimitiveType[15087-15091]"
    }, {
      "left" : "iterableContainsExactlyMissingItemFailure",
      "right" : "iterableContainsExactlyMissingItemFailure",
      "info" : "SimpleName[15357-15398]:SimpleName[15092-15133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15401-15668]:Block[15136-15401]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[15407-15664]:TryStatement[15142-15397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15411-15512]:Block[15146-15245]"
    }, {
      "left" : "assertThat(iterable(1, 2)).containsExactly(1, 2, 4);",
      "right" : "assertThat(asList(1, 2)).containsExactly(1, 2, 4);",
      "info" : "ExpressionStatement[15419-15471]:ExpressionStatement[15154-15204]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[15430-15438]:SimpleName[15165-15171]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[15478-15506]:ExpressionStatement[15211-15239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15538-15664]:Block[15271-15397]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\"Not true that <[1, 2]> contains exactly <[1, 2, 4]>. It is missing <[4]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\"Not true that <[1, 2]> contains exactly <[1, 2, 4]>. It is missing <[4]>\");",
      "info" : "ExpressionStatement[15546-15658]:ExpressionStatement[15279-15391]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[15672-15677]:MarkerAnnotation[15405-15410]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15680-15686]:Modifier[15413-15419]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15687-15691]:PrimitiveType[15420-15424]"
    }, {
      "left" : "iterableContainsExactlyUnexpectedItemFailure",
      "right" : "iterableContainsExactlyUnexpectedItemFailure",
      "info" : "SimpleName[15692-15736]:SimpleName[15425-15469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15739-16031]:Block[15472-15762]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[15745-16027]:TryStatement[15478-15758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15749-15850]:Block[15482-15581]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3)).containsExactly(1, 2);",
      "right" : "assertThat(asList(1, 2, 3)).containsExactly(1, 2);",
      "info" : "ExpressionStatement[15757-15809]:ExpressionStatement[15490-15540]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[15768-15776]:SimpleName[15501-15507]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[15816-15844]:ExpressionStatement[15547-15575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15876-16027]:Block[15607-15758]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3]> contains exactly <[1, 2]>. It has unexpected items <[3]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3]> contains exactly <[1, 2]>. It has unexpected items <[3]>\");",
      "info" : "ExpressionStatement[15884-16021]:ExpressionStatement[15615-15752]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[16035-16040]:MarkerAnnotation[15766-15771]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16043-16049]:Modifier[15774-15780]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16050-16054]:PrimitiveType[15781-15785]"
    }, {
      "left" : "iterableContainsExactlyWithDuplicatesNotEnoughItemsFailure",
      "right" : "iterableContainsExactlyWithDuplicatesNotEnoughItemsFailure",
      "info" : "SimpleName[16055-16113]:SimpleName[15786-15844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16116-16450]:Block[15847-16179]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16122-16446]:TryStatement[15853-16175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16126-16236]:Block[15857-15965]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3)).containsExactly(1, 2, 2, 2, 3);",
      "right" : "assertThat(asList(1, 2, 3)).containsExactly(1, 2, 2, 2, 3);",
      "info" : "ExpressionStatement[16134-16195]:ExpressionStatement[15865-15924]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[16145-16153]:SimpleName[15876-15882]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[16202-16230]:ExpressionStatement[15931-15959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16262-16446]:Block[15991-16175]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3]> contains exactly <[1, 2, 2, 2, 3]>. \"\n                  + \"It is missing <[2 [2 copies]]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3]> contains exactly <[1, 2, 2, 2, 3]>. \"\n                  + \"It is missing <[2 [2 copies]]>\");",
      "info" : "ExpressionStatement[16270-16440]:ExpressionStatement[15999-16169]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[16454-16459]:MarkerAnnotation[16183-16188]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16462-16468]:Modifier[16191-16197]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16469-16473]:PrimitiveType[16198-16202]"
    }, {
      "left" : "iterableContainsExactlyWithDuplicatesMissingItemFailure",
      "right" : "iterableContainsExactlyWithDuplicatesMissingItemFailure",
      "info" : "SimpleName[16474-16529]:SimpleName[16203-16258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16532-16875]:Block[16261-16602]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16538-16871]:TryStatement[16267-16598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16542-16655]:Block[16271-16382]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3)).containsExactly(1, 2, 2, 2, 3, 4);",
      "right" : "assertThat(asList(1, 2, 3)).containsExactly(1, 2, 2, 2, 3, 4);",
      "info" : "ExpressionStatement[16550-16614]:ExpressionStatement[16279-16341]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[16561-16569]:SimpleName[16290-16296]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[16621-16649]:ExpressionStatement[16348-16376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16681-16871]:Block[16408-16598]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3]> contains exactly <[1, 2, 2, 2, 3, 4]>. \"\n                  + \"It is missing <[2 [2 copies], 4]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3]> contains exactly <[1, 2, 2, 2, 3, 4]>. \"\n                  + \"It is missing <[2 [2 copies], 4]>\");",
      "info" : "ExpressionStatement[16689-16865]:ExpressionStatement[16416-16592]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[16879-16884]:MarkerAnnotation[16606-16611]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16887-16893]:Modifier[16614-16620]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16894-16898]:PrimitiveType[16621-16625]"
    }, {
      "left" : "iterableContainsExactlyWithDuplicatesUnexpectedItemFailure",
      "right" : "iterableContainsExactlyWithDuplicatesUnexpectedItemFailure",
      "info" : "SimpleName[16899-16957]:SimpleName[16626-16684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16960-17316]:Block[16687-17041]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16966-17312]:TryStatement[16693-17037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16970-17086]:Block[16697-16811]"
    }, {
      "left" : "assertThat(iterable(1, 2, 2, 2, 2, 3)).containsExactly(1, 2, 2, 3);",
      "right" : "assertThat(asList(1, 2, 2, 2, 2, 3)).containsExactly(1, 2, 2, 3);",
      "info" : "ExpressionStatement[16978-17045]:ExpressionStatement[16705-16770]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[16989-16997]:SimpleName[16716-16722]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[17052-17080]:ExpressionStatement[16777-16805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17112-17312]:Block[16837-17037]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 2, 2, 2, 3]> contains exactly <[1, 2, 2, 3]>. \"\n                  + \"It has unexpected items <[2 [2 copies]]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 2, 2, 2, 3]> contains exactly <[1, 2, 2, 3]>. \"\n                  + \"It has unexpected items <[2 [2 copies]]>\");",
      "info" : "ExpressionStatement[17120-17306]:ExpressionStatement[16845-17031]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[17477-17482]:MarkerAnnotation[17202-17207]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17485-17491]:Modifier[17210-17216]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17492-17496]:PrimitiveType[17217-17221]"
    }, {
      "left" : "iterableContainsExactlyWithDuplicateMissingElements",
      "right" : "iterableContainsExactlyWithDuplicateMissingElements",
      "info" : "SimpleName[17497-17548]:SimpleName[17222-17273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17551-17836]:Block[17276-17559]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[17557-17832]:TryStatement[17282-17555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17561-17658]:Block[17286-17381]"
    }, {
      "left" : "assertThat(iterable()).containsExactly(4, 4, 4);",
      "right" : "assertThat(asList()).containsExactly(4, 4, 4);",
      "info" : "ExpressionStatement[17569-17617]:ExpressionStatement[17294-17340]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[17580-17588]:SimpleName[17305-17311]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[17624-17652]:ExpressionStatement[17347-17375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17684-17832]:Block[17407-17555]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[]> contains exactly <[4, 4, 4]>. It is missing <[4 [3 copies]]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[]> contains exactly <[4, 4, 4]>. It is missing <[4 [3 copies]]>\");",
      "info" : "ExpressionStatement[17692-17826]:ExpressionStatement[17415-17549]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[17840-17845]:MarkerAnnotation[17563-17568]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17848-17854]:Modifier[17571-17577]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17855-17859]:PrimitiveType[17578-17582]"
    }, {
      "left" : "iterableContainsExactlyWithNullFailure",
      "right" : "iterableContainsExactlyWithNullFailure",
      "info" : "SimpleName[17860-17898]:SimpleName[17583-17621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17901-18239]:Block[17624-17960]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[17907-18235]:TryStatement[17630-17956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17911-18027]:Block[17634-17748]"
    }, {
      "left" : "assertThat(iterable(1, null, 3)).containsExactly(1, null, null, 3);",
      "right" : "assertThat(asList(1, null, 3)).containsExactly(1, null, null, 3);",
      "info" : "ExpressionStatement[17919-17986]:ExpressionStatement[17642-17707]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[17930-17938]:SimpleName[17653-17659]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[17993-18021]:ExpressionStatement[17714-17742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18053-18235]:Block[17774-17956]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, null, 3]> contains exactly <[1, null, null, 3]>. \"\n                  + \"It is missing <[null]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, null, 3]> contains exactly <[1, null, null, 3]>. \"\n                  + \"It is missing <[null]>\");",
      "info" : "ExpressionStatement[18061-18229]:ExpressionStatement[17782-17950]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[18243-18248]:MarkerAnnotation[17964-17969]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18251-18257]:Modifier[17972-17978]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18258-18262]:PrimitiveType[17979-17983]"
    }, {
      "left" : "iterableContainsExactlyWithMissingAndExtraElements",
      "right" : "iterableContainsExactlyWithMissingAndExtraElements",
      "info" : "SimpleName[18263-18313]:SimpleName[17984-18034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18316-18658]:Block[18037-18377]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18322-18654]:TryStatement[18043-18373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18326-18430]:Block[18047-18149]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3)).containsExactly(1, 2, 4);",
      "right" : "assertThat(asList(1, 2, 3)).containsExactly(1, 2, 4);",
      "info" : "ExpressionStatement[18334-18389]:ExpressionStatement[18055-18108]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[18345-18353]:SimpleName[18066-18072]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[18396-18424]:ExpressionStatement[18115-18143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18456-18654]:Block[18175-18373]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3]> contains exactly <[1, 2, 4]>. \"\n                  + \"It is missing <[4]> and has unexpected items <[3]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3]> contains exactly <[1, 2, 4]>. \"\n                  + \"It is missing <[4]> and has unexpected items <[3]>\");",
      "info" : "ExpressionStatement[18464-18648]:ExpressionStatement[18183-18367]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[18662-18667]:MarkerAnnotation[18381-18386]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18670-18676]:Modifier[18389-18395]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18677-18681]:PrimitiveType[18396-18400]"
    }, {
      "left" : "iterableContainsExactlyWithDuplicateMissingAndExtraElements",
      "right" : "iterableContainsExactlyWithDuplicateMissingAndExtraElements",
      "info" : "SimpleName[18682-18741]:SimpleName[18401-18460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18744-19120]:Block[18463-18837]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18750-19116]:TryStatement[18469-18833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18754-18864]:Block[18473-18581]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3, 3)).containsExactly(1, 2, 4, 4);",
      "right" : "assertThat(asList(1, 2, 3, 3)).containsExactly(1, 2, 4, 4);",
      "info" : "ExpressionStatement[18762-18823]:ExpressionStatement[18481-18540]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[18773-18781]:SimpleName[18492-18498]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[18830-18858]:ExpressionStatement[18547-18575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18890-19116]:Block[18607-18833]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3, 3]> contains exactly <[1, 2, 4, 4]>. \"\n                  + \"It is missing <[4 [2 copies]]> and has unexpected items <[3 [2 copies]]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3, 3]> contains exactly <[1, 2, 4, 4]>. \"\n                  + \"It is missing <[4 [2 copies]]> and has unexpected items <[3 [2 copies]]>\");",
      "info" : "ExpressionStatement[18898-19110]:ExpressionStatement[18615-18827]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[19124-19129]:MarkerAnnotation[18841-18846]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19132-19138]:Modifier[18849-18855]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19139-19143]:PrimitiveType[18856-18860]"
    }, {
      "left" : "iterableContainsExactlyWithOneIterableGivesWarning",
      "right" : "iterableContainsExactlyWithOneIterableGivesWarning",
      "info" : "SimpleName[19144-19194]:SimpleName[18861-18911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19197-19826]:Block[18914-19539]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19203-19822]:TryStatement[18920-19535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19207-19327]:Block[18924-19040]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3, 4)).containsExactly(iterable(1, 2, 3, 4));",
      "right" : "assertThat(asList(1, 2, 3, 4)).containsExactly(asList(1, 2, 3, 4));",
      "info" : "ExpressionStatement[19215-19286]:ExpressionStatement[18932-18999]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[19226-19234]:SimpleName[18943-18949]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[19264-19272]:SimpleName[18979-18985]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[19293-19321]:ExpressionStatement[19006-19034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19353-19822]:Block[19066-19535]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3, 4]> contains exactly <[[1, 2, 3, 4]]>. \"\n                  + \"It is missing <[[1, 2, 3, 4]]> and has unexpected items <[1, 2, 3, 4]>. \"\n                  + \"Passing an iterable to the varargs method containsExactly(Object...) is \"\n                  + \"often not the correct thing to do. Did you mean to call \"\n                  + \"containsExactlyElementsIn(Iterable) instead?\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3, 4]> contains exactly <[[1, 2, 3, 4]]>. \"\n                  + \"It is missing <[[1, 2, 3, 4]]> and has unexpected items <[1, 2, 3, 4]>. \"\n                  + \"Passing an iterable to the varargs method containsExactly(Object...) is \"\n                  + \"often not the correct thing to do. Did you mean to call \"\n                  + \"containsExactlyElementsIn(Iterable) instead?\");",
      "info" : "ExpressionStatement[19361-19816]:ExpressionStatement[19074-19529]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[19830-19835]:MarkerAnnotation[19543-19548]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19838-19844]:Modifier[19551-19557]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19845-19849]:PrimitiveType[19558-19562]"
    }, {
      "left" : "iterableContainsExactlyElementsInWithOneIterableDoesNotGiveWarning",
      "right" : "iterableContainsExactlyElementsInWithOneIterableDoesNotGiveWarning",
      "info" : "SimpleName[19850-19916]:SimpleName[19563-19629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19919-20266]:Block[19632-19975]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19925-20262]:TryStatement[19638-19971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19929-20056]:Block[19642-19765]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3, 4)).containsExactlyElementsIn(iterable(1, 2, 3));",
      "right" : "assertThat(asList(1, 2, 3, 4)).containsExactlyElementsIn(asList(1, 2, 3));",
      "info" : "ExpressionStatement[19937-20015]:ExpressionStatement[19650-19724]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[19948-19956]:SimpleName[19661-19667]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[19996-20004]:SimpleName[19707-19713]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[20022-20050]:ExpressionStatement[19731-19759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20082-20262]:Block[19791-19971]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3, 4]> contains exactly <[1, 2, 3]>. \"\n                  + \"It has unexpected items <[4]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3, 4]> contains exactly <[1, 2, 3]>. \"\n                  + \"It has unexpected items <[4]>\");",
      "info" : "ExpressionStatement[20090-20256]:ExpressionStatement[19799-19965]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[20270-20275]:MarkerAnnotation[19979-19984]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20278-20284]:Modifier[19987-19993]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20285-20289]:PrimitiveType[19994-19998]"
    }, {
      "left" : "iterableContainsExactlyWithTwoIterableDoesNotGivesWarning",
      "right" : "iterableContainsExactlyWithTwoIterableDoesNotGivesWarning",
      "info" : "SimpleName[20290-20347]:SimpleName[19999-20056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20350-20750]:Block[20059-20453]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[20356-20746]:TryStatement[20065-20449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20360-20490]:Block[20069-20193]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3, 4)).containsExactly(iterable(1, 2), iterable(3, 4));",
      "right" : "assertThat(asList(1, 2, 3, 4)).containsExactly(asList(1, 2), asList(3, 4));",
      "info" : "ExpressionStatement[20368-20449]:ExpressionStatement[20077-20152]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[20379-20387]:SimpleName[20088-20094]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[20417-20425]:SimpleName[20124-20130]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[20433-20441]:SimpleName[20138-20144]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[20456-20484]:ExpressionStatement[20159-20187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20516-20746]:Block[20219-20449]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3, 4]> contains exactly <[[1, 2], [3, 4]]>. \"\n                  + \"It is missing <[[1, 2], [3, 4]]> and has unexpected items <[1, 2, 3, 4]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3, 4]> contains exactly <[[1, 2], [3, 4]]>. \"\n                  + \"It is missing <[[1, 2], [3, 4]]> and has unexpected items <[1, 2, 3, 4]>\");",
      "info" : "ExpressionStatement[20524-20740]:ExpressionStatement[20227-20443]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[20754-20759]:MarkerAnnotation[20457-20462]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20762-20768]:Modifier[20465-20471]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20769-20773]:PrimitiveType[20472-20476]"
    }, {
      "left" : "iterableContainsExactlyWithOneNonIterableDoesNotGiveWarning",
      "right" : "iterableContainsExactlyWithOneNonIterableDoesNotGiveWarning",
      "info" : "SimpleName[20774-20833]:SimpleName[20477-20536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20836-21157]:Block[20539-20858]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[20842-21153]:TryStatement[20545-20854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20846-20947]:Block[20549-20648]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3, 4)).containsExactly(1);",
      "right" : "assertThat(asList(1, 2, 3, 4)).containsExactly(1);",
      "info" : "ExpressionStatement[20854-20906]:ExpressionStatement[20557-20607]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[20865-20873]:SimpleName[20568-20574]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[20913-20941]:ExpressionStatement[20614-20642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20973-21153]:Block[20674-20854]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3, 4]> contains exactly <[1]>. \"\n                  + \"It has unexpected items <[2, 3, 4]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3, 4]> contains exactly <[1]>. \"\n                  + \"It has unexpected items <[2, 3, 4]>\");",
      "info" : "ExpressionStatement[20981-21147]:ExpressionStatement[20682-20848]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21169-21175]:Modifier[20870-20876]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21301-21307]:Modifier[21000-21006]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[21439-21444]:MarkerAnnotation[21136-21141]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21447-21453]:Modifier[21144-21150]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21454-21458]:PrimitiveType[21151-21155]"
    }, {
      "left" : "iterableContainsExactlyInOrderWithFailure",
      "right" : "iterableContainsExactlyInOrderWithFailure",
      "info" : "SimpleName[21459-21500]:SimpleName[21156-21197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21503-21813]:Block[21200-21508]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[21509-21809]:TryStatement[21206-21504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21513-21633]:Block[21210-21328]"
    }, {
      "left" : "assertThat(iterable(1, null, 3)).containsExactly(null, 1, 3).inOrder();",
      "right" : "assertThat(asList(1, null, 3)).containsExactly(null, 1, 3).inOrder();",
      "info" : "ExpressionStatement[21521-21592]:ExpressionStatement[21218-21287]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[21532-21540]:SimpleName[21229-21235]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[21599-21627]:ExpressionStatement[21294-21322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21659-21809]:Block[21354-21504]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, null, 3]> contains only these elements in order <[null, 1, 3]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, null, 3]> contains only these elements in order <[null, 1, 3]>\");",
      "info" : "ExpressionStatement[21667-21803]:ExpressionStatement[21362-21498]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[21817-21822]:MarkerAnnotation[21512-21517]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21825-21831]:Modifier[21520-21526]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21832-21836]:PrimitiveType[21527-21531]"
    }, {
      "left" : "iterableContainsExactlyInOrderWithOneShotIterable",
      "right" : "iterableContainsExactlyInOrderWithOneShotIterable",
      "info" : "SimpleName[21837-21886]:SimpleName[21532-21581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21889-22213]:Block[21584-21915]"
    }, {
      "left" : "final Iterator<Object> iterator = iterable(1, null, 3).iterator();",
      "right" : "final Iterator<Object> iterator = asList((Object) 1, null, 3).iterator();",
      "info" : "VariableDeclarationStatement[21895-21961]:VariableDeclarationStatement[21590-21663]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[21929-21937]:SimpleName[21624-21630]"
    }, {
      "left" : "null",
      "right" : "null",
      "info" : "NullLiteral[21941-21945]:NullLiteral[21643-21647]"
    }, {
      "left" : "3",
      "right" : "3",
      "info" : "NumberLiteral[21947-21948]:NumberLiteral[21649-21650]"
    }, {
      "left" : "Iterable<Object> iterable =\n        new Iterable<Object>() {\n          @Override\n          public Iterator<Object> iterator() {\n            return iterator;\n          }\n        };",
      "right" : "Iterable<Object> iterable =\n        new Iterable<Object>() {\n          @Override\n          public Iterator<Object> iterator() {\n            return iterator;\n          }\n        };",
      "info" : "VariableDeclarationStatement[21966-22145]:VariableDeclarationStatement[21668-21847]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22037-22046]:MarkerAnnotation[21739-21748]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22057-22063]:Modifier[21759-21765]"
    }, {
      "left" : "Iterator<Object>",
      "right" : "Iterator<Object>",
      "info" : "ParameterizedType[22064-22080]:ParameterizedType[21766-21782]"
    }, {
      "left" : "iterator",
      "right" : "iterator",
      "info" : "SimpleName[22081-22089]:SimpleName[21783-21791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22092-22134]:Block[21794-21836]"
    }, {
      "left" : "return iterator;",
      "right" : "return iterator;",
      "info" : "ReturnStatement[22106-22122]:ReturnStatement[21808-21824]"
    }, {
      "left" : "assertThat(iterable).containsExactly(1, null, 3).inOrder();",
      "right" : "assertThat(iterable).containsExactly(1, null, 3).inOrder();",
      "info" : "ExpressionStatement[22150-22209]:ExpressionStatement[21852-21911]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[22217-22222]:MarkerAnnotation[21919-21924]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22225-22231]:Modifier[21927-21933]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22232-22236]:PrimitiveType[21934-21938]"
    }, {
      "left" : "iterableContainsExactlyInOrderWithOneShotIterableWrongOrder",
      "right" : "iterableContainsExactlyInOrderWithOneShotIterableWrongOrder",
      "info" : "SimpleName[22237-22296]:SimpleName[21939-21998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22299-22956]:Block[22001-22665]"
    }, {
      "left" : "final Iterator<Object> iterator = iterable(1, null, 3).iterator();",
      "right" : "final Iterator<Object> iterator = asList((Object) 1, null, 3).iterator();",
      "info" : "VariableDeclarationStatement[22305-22371]:VariableDeclarationStatement[22007-22080]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[22339-22347]:SimpleName[22041-22047]"
    }, {
      "left" : "null",
      "right" : "null",
      "info" : "NullLiteral[22351-22355]:NullLiteral[22060-22064]"
    }, {
      "left" : "3",
      "right" : "3",
      "info" : "NumberLiteral[22357-22358]:NumberLiteral[22066-22067]"
    }, {
      "left" : "Iterable<Object> iterable =\n        new Iterable<Object>() {\n          @Override\n          public Iterator<Object> iterator() {\n            return iterator;\n          }\n\n          @Override\n          public String toString() {\n            return \"BadIterable\";\n          }\n        };",
      "right" : "Iterable<Object> iterable =\n        new Iterable<Object>() {\n          @Override\n          public Iterator<Object> iterator() {\n            return iterator;\n          }\n\n          @Override\n          public String toString() {\n            return \"BadIterable\";\n          }\n        };",
      "info" : "VariableDeclarationStatement[22376-22659]:VariableDeclarationStatement[22085-22368]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22447-22456]:MarkerAnnotation[22156-22165]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22467-22473]:Modifier[22176-22182]"
    }, {
      "left" : "Iterator<Object>",
      "right" : "Iterator<Object>",
      "info" : "ParameterizedType[22474-22490]:ParameterizedType[22183-22199]"
    }, {
      "left" : "iterator",
      "right" : "iterator",
      "info" : "SimpleName[22491-22499]:SimpleName[22200-22208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22502-22544]:Block[22211-22253]"
    }, {
      "left" : "return iterator;",
      "right" : "return iterator;",
      "info" : "ReturnStatement[22516-22532]:ReturnStatement[22225-22241]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22556-22565]:MarkerAnnotation[22265-22274]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22576-22582]:Modifier[22285-22291]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[22583-22589]:SimpleType[22292-22298]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[22590-22598]:SimpleName[22299-22307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22601-22648]:Block[22310-22357]"
    }, {
      "left" : "return \"BadIterable\";",
      "right" : "return \"BadIterable\";",
      "info" : "ReturnStatement[22615-22636]:ReturnStatement[22324-22345]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[22665-22952]:TryStatement[22374-22661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22669-22777]:Block[22378-22486]"
    }, {
      "left" : "assertThat(iterable).containsExactly(1, 3, null).inOrder();",
      "right" : "assertThat(iterable).containsExactly(1, 3, null).inOrder();",
      "info" : "ExpressionStatement[22677-22736]:ExpressionStatement[22386-22445]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[22743-22771]:ExpressionStatement[22452-22480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22803-22952]:Block[22512-22661]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <BadIterable> contains only these elements in order <[1, 3, null]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <BadIterable> contains only these elements in order <[1, 3, null]>\");",
      "info" : "ExpressionStatement[22811-22946]:ExpressionStatement[22520-22655]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22968-22974]:Modifier[22677-22683]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[23045-23050]:MarkerAnnotation[22752-22757]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23053-23059]:Modifier[22760-22766]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23060-23064]:PrimitiveType[22767-22771]"
    }, {
      "left" : "iterableIsEmptyWithFailure",
      "right" : "iterableIsEmptyWithFailure",
      "info" : "SimpleName[23065-23091]:SimpleName[22772-22798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23094-23306]:Block[22801-23011]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[23100-23302]:TryStatement[22807-23007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23104-23196]:Block[22811-22901]"
    }, {
      "left" : "assertThat(iterable(1, null, 3)).isEmpty();",
      "right" : "assertThat(asList(1, null, 3)).isEmpty();",
      "info" : "ExpressionStatement[23112-23155]:ExpressionStatement[22819-22860]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[23123-23131]:SimpleName[22830-22836]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[23162-23190]:ExpressionStatement[22867-22895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23222-23302]:Block[22927-23007]"
    }, {
      "left" : "assertThat(e).hasMessage(\"Not true that <[1, null, 3]> is empty\");",
      "right" : "assertThat(e).hasMessage(\"Not true that <[1, null, 3]> is empty\");",
      "info" : "ExpressionStatement[23230-23296]:ExpressionStatement[22935-23001]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23318-23324]:Modifier[23023-23029]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[23406-23411]:MarkerAnnotation[23109-23114]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23414-23420]:Modifier[23117-23123]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23421-23425]:PrimitiveType[23124-23128]"
    }, {
      "left" : "iterableIsNotEmptyWithFailure",
      "right" : "iterableIsNotEmptyWithFailure",
      "info" : "SimpleName[23426-23455]:SimpleName[23129-23158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23458-23657]:Block[23161-23358]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[23464-23653]:TryStatement[23167-23354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23468-23553]:Block[23171-23254]"
    }, {
      "left" : "assertThat(iterable()).isNotEmpty();",
      "right" : "assertThat(asList()).isNotEmpty();",
      "info" : "ExpressionStatement[23476-23512]:ExpressionStatement[23179-23213]"
    }, {
      "left" : "iterable",
      "right" : "asList",
      "info" : "SimpleName[23487-23495]:SimpleName[23190-23196]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[23519-23547]:ExpressionStatement[23220-23248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23579-23653]:Block[23280-23354]"
    }, {
      "left" : "assertThat(e).hasMessage(\"Not true that <[]> is not empty\");",
      "right" : "assertThat(e).hasMessage(\"Not true that <[]> is not empty\");",
      "info" : "ExpressionStatement[23587-23647]:ExpressionStatement[23288-23348]"
    } ]
  },
  "interFileMappings" : { }
}