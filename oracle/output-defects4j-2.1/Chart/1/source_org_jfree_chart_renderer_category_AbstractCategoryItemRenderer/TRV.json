{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final long serialVersionUID = 1247553218442497391L;",
      "right" : "private static final long serialVersionUID = 1247553218442497391L;",
      "info" : "FieldDeclaration[9045-9142]:FieldDeclaration[9045-9142]"
    }, {
      "left" : "private CategoryPlot plot;",
      "right" : "private CategoryPlot plot;",
      "info" : "FieldDeclaration[9150-9231]:FieldDeclaration[9150-9231]"
    }, {
      "left" : "private ObjectList itemLabelGeneratorList;",
      "right" : "private ObjectList itemLabelGeneratorList;",
      "info" : "FieldDeclaration[9239-9343]:FieldDeclaration[9239-9343]"
    }, {
      "left" : "private CategoryItemLabelGenerator baseItemLabelGenerator;",
      "right" : "private CategoryItemLabelGenerator baseItemLabelGenerator;",
      "info" : "FieldDeclaration[9351-9452]:FieldDeclaration[9351-9452]"
    }, {
      "left" : "private ObjectList toolTipGeneratorList;",
      "right" : "private ObjectList toolTipGeneratorList;",
      "info" : "FieldDeclaration[9460-9560]:FieldDeclaration[9460-9560]"
    }, {
      "left" : "private CategoryToolTipGenerator baseToolTipGenerator;",
      "right" : "private CategoryToolTipGenerator baseToolTipGenerator;",
      "info" : "FieldDeclaration[9568-9663]:FieldDeclaration[9568-9663]"
    }, {
      "left" : "private ObjectList urlGeneratorList;",
      "right" : "private ObjectList urlGeneratorList;",
      "info" : "FieldDeclaration[9671-9764]:FieldDeclaration[9671-9764]"
    }, {
      "left" : "private CategoryURLGenerator baseURLGenerator;",
      "right" : "private CategoryURLGenerator baseURLGenerator;",
      "info" : "FieldDeclaration[9772-9856]:FieldDeclaration[9772-9856]"
    }, {
      "left" : "private CategorySeriesLabelGenerator legendItemLabelGenerator;",
      "right" : "private CategorySeriesLabelGenerator legendItemLabelGenerator;",
      "info" : "FieldDeclaration[9864-9971]:FieldDeclaration[9864-9971]"
    }, {
      "left" : "private CategorySeriesLabelGenerator legendItemToolTipGenerator;",
      "right" : "private CategorySeriesLabelGenerator legendItemToolTipGenerator;",
      "info" : "FieldDeclaration[9979-10091]:FieldDeclaration[9979-10091]"
    }, {
      "left" : "private CategorySeriesLabelGenerator legendItemURLGenerator;",
      "right" : "private CategorySeriesLabelGenerator legendItemURLGenerator;",
      "info" : "FieldDeclaration[10099-10202]:FieldDeclaration[10099-10202]"
    }, {
      "left" : "private List backgroundAnnotations;",
      "right" : "private List backgroundAnnotations;",
      "info" : "FieldDeclaration[10210-10387]:FieldDeclaration[10210-10387]"
    }, {
      "left" : "private List foregroundAnnotations;",
      "right" : "private List foregroundAnnotations;",
      "info" : "FieldDeclaration[10395-10571]:FieldDeclaration[10395-10571]"
    }, {
      "left" : "private transient int rowCount;",
      "right" : "private transient int rowCount;",
      "info" : "FieldDeclaration[10579-10676]:FieldDeclaration[10579-10676]"
    }, {
      "left" : "private transient int columnCount;",
      "right" : "private transient int columnCount;",
      "info" : "FieldDeclaration[10684-10787]:FieldDeclaration[10684-10787]"
    }, {
      "left" : "protected AbstractCategoryItemRenderer()",
      "right" : "protected AbstractCategoryItemRenderer()",
      "info" : "MethodDeclaration[10795-11560]:MethodDeclaration[10795-11560]"
    }, {
      "left" : "public int getPassCount()",
      "right" : "public int getPassCount()",
      "info" : "MethodDeclaration[11568-11868]:MethodDeclaration[11568-11868]"
    }, {
      "left" : "public CategoryPlot getPlot()",
      "right" : "public CategoryPlot getPlot()",
      "info" : "MethodDeclaration[11876-12237]:MethodDeclaration[11876-12237]"
    }, {
      "left" : "public void setPlot(CategoryPlot plot)",
      "right" : "public void setPlot(CategoryPlot plot)",
      "info" : "MethodDeclaration[12245-12759]:MethodDeclaration[12245-12759]"
    }, {
      "left" : "public CategoryItemLabelGenerator getItemLabelGenerator(int row,\r\n            int column, boolean selected)",
      "right" : "public CategoryItemLabelGenerator getItemLabelGenerator(int row,\r\n            int column, boolean selected)",
      "info" : "MethodDeclaration[12798-13694]:MethodDeclaration[12798-13694]"
    }, {
      "left" : "public CategoryItemLabelGenerator getSeriesItemLabelGenerator(int series)",
      "right" : "public CategoryItemLabelGenerator getSeriesItemLabelGenerator(int series)",
      "info" : "MethodDeclaration[13702-14174]:MethodDeclaration[13702-14174]"
    }, {
      "left" : "public void setSeriesItemLabelGenerator(int series,\r\n            CategoryItemLabelGenerator generator)",
      "right" : "public void setSeriesItemLabelGenerator(int series,\r\n            CategoryItemLabelGenerator generator)",
      "info" : "MethodDeclaration[14182-14690]:MethodDeclaration[14182-14690]"
    }, {
      "left" : "public void setSeriesItemLabelGenerator(int series,\r\n            CategoryItemLabelGenerator generator, boolean notify)",
      "right" : "public void setSeriesItemLabelGenerator(int series,\r\n            CategoryItemLabelGenerator generator, boolean notify)",
      "info" : "MethodDeclaration[14698-15400]:MethodDeclaration[14698-15400]"
    }, {
      "left" : "public CategoryItemLabelGenerator getBaseItemLabelGenerator()",
      "right" : "public CategoryItemLabelGenerator getBaseItemLabelGenerator()",
      "info" : "MethodDeclaration[15408-15732]:MethodDeclaration[15408-15732]"
    }, {
      "left" : "public void setBaseItemLabelGenerator(\r\n            CategoryItemLabelGenerator generator)",
      "right" : "public void setBaseItemLabelGenerator(\r\n            CategoryItemLabelGenerator generator)",
      "info" : "MethodDeclaration[15740-16158]:MethodDeclaration[15740-16158]"
    }, {
      "left" : "public void setBaseItemLabelGenerator(\r\n            CategoryItemLabelGenerator generator, boolean notify)",
      "right" : "public void setBaseItemLabelGenerator(\r\n            CategoryItemLabelGenerator generator, boolean notify)",
      "info" : "MethodDeclaration[16166-16777]:MethodDeclaration[16166-16777]"
    }, {
      "left" : "public CategoryToolTipGenerator getToolTipGenerator(int row, int column,\r\n            boolean selected)",
      "right" : "public CategoryToolTipGenerator getToolTipGenerator(int row, int column,\r\n            boolean selected)",
      "info" : "MethodDeclaration[16814-17597]:MethodDeclaration[16814-17597]"
    }, {
      "left" : "public CategoryToolTipGenerator getSeriesToolTipGenerator(int series)",
      "right" : "public CategoryToolTipGenerator getSeriesToolTipGenerator(int series)",
      "info" : "MethodDeclaration[17605-18098]:MethodDeclaration[17605-18098]"
    }, {
      "left" : "public void setSeriesToolTipGenerator(int series,\r\n            CategoryToolTipGenerator generator)",
      "right" : "public void setSeriesToolTipGenerator(int series,\r\n            CategoryToolTipGenerator generator)",
      "info" : "MethodDeclaration[18106-18604]:MethodDeclaration[18106-18604]"
    }, {
      "left" : "public void setSeriesToolTipGenerator(int series,\r\n            CategoryToolTipGenerator generator, boolean notify)",
      "right" : "public void setSeriesToolTipGenerator(int series,\r\n            CategoryToolTipGenerator generator, boolean notify)",
      "info" : "MethodDeclaration[18612-19319]:MethodDeclaration[18612-19319]"
    }, {
      "left" : "public CategoryToolTipGenerator getBaseToolTipGenerator()",
      "right" : "public CategoryToolTipGenerator getBaseToolTipGenerator()",
      "info" : "MethodDeclaration[19327-19674]:MethodDeclaration[19327-19674]"
    }, {
      "left" : "public void setBaseToolTipGenerator(CategoryToolTipGenerator generator)",
      "right" : "public void setBaseToolTipGenerator(CategoryToolTipGenerator generator)",
      "info" : "MethodDeclaration[19682-20076]:MethodDeclaration[19682-20076]"
    }, {
      "left" : "public void setBaseToolTipGenerator(CategoryToolTipGenerator generator,\r\n            boolean notify)",
      "right" : "public void setBaseToolTipGenerator(CategoryToolTipGenerator generator,\r\n            boolean notify)",
      "info" : "MethodDeclaration[20084-20669]:MethodDeclaration[20084-20669]"
    }, {
      "left" : "public CategoryURLGenerator getURLGenerator(int row, int column, boolean\r\n            selected)",
      "right" : "public CategoryURLGenerator getURLGenerator(int row, int column, boolean\r\n            selected)",
      "info" : "MethodDeclaration[20701-21337]:MethodDeclaration[20701-21337]"
    }, {
      "left" : "public CategoryURLGenerator getSeriesURLGenerator(int series)",
      "right" : "public CategoryURLGenerator getSeriesURLGenerator(int series)",
      "info" : "MethodDeclaration[21345-21746]:MethodDeclaration[21345-21746]"
    }, {
      "left" : "public void setSeriesURLGenerator(int series,\r\n            CategoryURLGenerator generator)",
      "right" : "public void setSeriesURLGenerator(int series,\r\n            CategoryURLGenerator generator)",
      "info" : "MethodDeclaration[21754-22201]:MethodDeclaration[21754-22201]"
    }, {
      "left" : "public void setSeriesURLGenerator(int series,\r\n            CategoryURLGenerator generator, boolean notify)",
      "right" : "public void setSeriesURLGenerator(int series,\r\n            CategoryURLGenerator generator, boolean notify)",
      "info" : "MethodDeclaration[22209-22880]:MethodDeclaration[22209-22880]"
    }, {
      "left" : "public CategoryURLGenerator getBaseURLGenerator()",
      "right" : "public CategoryURLGenerator getBaseURLGenerator()",
      "info" : "MethodDeclaration[22888-23160]:MethodDeclaration[22888-23160]"
    }, {
      "left" : "public void setBaseURLGenerator(CategoryURLGenerator generator)",
      "right" : "public void setBaseURLGenerator(CategoryURLGenerator generator)",
      "info" : "MethodDeclaration[23168-23449]:MethodDeclaration[23168-23449]"
    }, {
      "left" : "public void setBaseURLGenerator(CategoryURLGenerator generator,\r\n            boolean notify)",
      "right" : "public void setBaseURLGenerator(CategoryURLGenerator generator,\r\n            boolean notify)",
      "info" : "MethodDeclaration[23457-23959]:MethodDeclaration[23457-23959]"
    }, {
      "left" : "public void addAnnotation(CategoryAnnotation annotation)",
      "right" : "public void addAnnotation(CategoryAnnotation annotation)",
      "info" : "MethodDeclaration[23989-24438]:MethodDeclaration[23989-24438]"
    }, {
      "left" : "public void addAnnotation(CategoryAnnotation annotation, Layer layer)",
      "right" : "public void addAnnotation(CategoryAnnotation annotation, Layer layer)",
      "info" : "MethodDeclaration[24446-25381]:MethodDeclaration[24446-25381]"
    }, {
      "left" : "public boolean removeAnnotation(CategoryAnnotation annotation)",
      "right" : "public boolean removeAnnotation(CategoryAnnotation annotation)",
      "info" : "MethodDeclaration[25387-26095]:MethodDeclaration[25387-26095]"
    }, {
      "left" : "public void removeAnnotations()",
      "right" : "public void removeAnnotations()",
      "info" : "MethodDeclaration[26103-26446]:MethodDeclaration[26103-26446]"
    }, {
      "left" : "public CategorySeriesLabelGenerator getLegendItemLabelGenerator()",
      "right" : "public CategorySeriesLabelGenerator getLegendItemLabelGenerator()",
      "info" : "MethodDeclaration[26454-26793]:MethodDeclaration[26454-26793]"
    }, {
      "left" : "public void setLegendItemLabelGenerator(\r\n            CategorySeriesLabelGenerator generator)",
      "right" : "public void setLegendItemLabelGenerator(\r\n            CategorySeriesLabelGenerator generator)",
      "info" : "MethodDeclaration[26801-27382]:MethodDeclaration[26801-27382]"
    }, {
      "left" : "public CategorySeriesLabelGenerator getLegendItemToolTipGenerator()",
      "right" : "public CategorySeriesLabelGenerator getLegendItemToolTipGenerator()",
      "info" : "MethodDeclaration[27390-27744]:MethodDeclaration[27390-27744]"
    }, {
      "left" : "public void setLegendItemToolTipGenerator(\r\n            CategorySeriesLabelGenerator generator)",
      "right" : "public void setLegendItemToolTipGenerator(\r\n            CategorySeriesLabelGenerator generator)",
      "info" : "MethodDeclaration[27752-28242]:MethodDeclaration[27752-28242]"
    }, {
      "left" : "public CategorySeriesLabelGenerator getLegendItemURLGenerator()",
      "right" : "public CategorySeriesLabelGenerator getLegendItemURLGenerator()",
      "info" : "MethodDeclaration[28250-28582]:MethodDeclaration[28250-28582]"
    }, {
      "left" : "public void setLegendItemURLGenerator(\r\n            CategorySeriesLabelGenerator generator)",
      "right" : "public void setLegendItemURLGenerator(\r\n            CategorySeriesLabelGenerator generator)",
      "info" : "MethodDeclaration[28590-29035]:MethodDeclaration[28590-29035]"
    }, {
      "left" : "public int getRowCount()",
      "right" : "public int getRowCount()",
      "info" : "MethodDeclaration[29043-29309]:MethodDeclaration[29043-29309]"
    }, {
      "left" : "public int getColumnCount()",
      "right" : "public int getColumnCount()",
      "info" : "MethodDeclaration[29317-29595]:MethodDeclaration[29317-29595]"
    }, {
      "left" : "protected CategoryItemRendererState createState(PlotRenderingInfo info)",
      "right" : "protected CategoryItemRendererState createState(PlotRenderingInfo info)",
      "info" : "MethodDeclaration[29603-30825]:MethodDeclaration[29603-30825]"
    }, {
      "left" : "public CategoryItemRendererState initialise(Graphics2D g2,\r\n            Rectangle2D dataArea, CategoryPlot plot, CategoryDataset dataset,\r\n            PlotRenderingInfo info)",
      "right" : "public CategoryItemRendererState initialise(Graphics2D g2,\r\n            Rectangle2D dataArea, CategoryPlot plot, CategoryDataset dataset,\r\n            PlotRenderingInfo info)",
      "info" : "MethodDeclaration[30833-32881]:MethodDeclaration[30833-32881]"
    }, {
      "left" : "public Range findRangeBounds(CategoryDataset dataset)",
      "right" : "public Range findRangeBounds(CategoryDataset dataset)",
      "info" : "MethodDeclaration[32889-33331]:MethodDeclaration[32889-33331]"
    }, {
      "left" : "protected Range findRangeBounds(CategoryDataset dataset,\r\n            boolean includeInterval)",
      "right" : "protected Range findRangeBounds(CategoryDataset dataset,\r\n            boolean includeInterval)",
      "info" : "MethodDeclaration[33339-34548]:MethodDeclaration[33339-34548]"
    }, {
      "left" : "public double getItemMiddle(Comparable rowKey, Comparable columnKey,\r\n            CategoryDataset dataset, CategoryAxis axis, Rectangle2D area,\r\n            RectangleEdge edge)",
      "right" : "public double getItemMiddle(Comparable rowKey, Comparable columnKey,\r\n            CategoryDataset dataset, CategoryAxis axis, Rectangle2D area,\r\n            RectangleEdge edge)",
      "info" : "MethodDeclaration[34556-35296]:MethodDeclaration[34556-35296]"
    }, {
      "left" : "public void drawBackground(Graphics2D g2,\r\n                               CategoryPlot plot,\r\n                               Rectangle2D dataArea)",
      "right" : "public void drawBackground(Graphics2D g2,\r\n                               CategoryPlot plot,\r\n                               Rectangle2D dataArea)",
      "info" : "MethodDeclaration[35304-35826]:MethodDeclaration[35304-35826]"
    }, {
      "left" : "public void drawOutline(Graphics2D g2,\r\n                            CategoryPlot plot,\r\n                            Rectangle2D dataArea)",
      "right" : "public void drawOutline(Graphics2D g2,\r\n                            CategoryPlot plot,\r\n                            Rectangle2D dataArea)",
      "info" : "MethodDeclaration[35834-36339]:MethodDeclaration[35834-36339]"
    }, {
      "left" : "public void drawDomainLine(Graphics2D g2, CategoryPlot plot,\r\n            Rectangle2D dataArea, double value, Paint paint, Stroke stroke)",
      "right" : "public void drawDomainLine(Graphics2D g2, CategoryPlot plot,\r\n            Rectangle2D dataArea, double value, Paint paint, Stroke stroke)",
      "info" : "MethodDeclaration[36347-38087]:MethodDeclaration[36347-38087]"
    }, {
      "left" : "public void drawRangeLine(Graphics2D g2, CategoryPlot plot, ValueAxis axis,\r\n            Rectangle2D dataArea, double value, Paint paint, Stroke stroke)",
      "right" : "public void drawRangeLine(Graphics2D g2, CategoryPlot plot, ValueAxis axis,\r\n            Rectangle2D dataArea, double value, Paint paint, Stroke stroke)",
      "info" : "MethodDeclaration[38095-39566]:MethodDeclaration[38095-39566]"
    }, {
      "left" : "public void drawDomainMarker(Graphics2D g2,\r\n                                 CategoryPlot plot,\r\n                                 CategoryAxis axis,\r\n                                 CategoryMarker marker,\r\n                                 Rectangle2D dataArea)",
      "right" : "public void drawDomainMarker(Graphics2D g2,\r\n                                 CategoryPlot plot,\r\n                                 CategoryAxis axis,\r\n                                 CategoryMarker marker,\r\n                                 Rectangle2D dataArea)",
      "info" : "MethodDeclaration[39574-43306]:MethodDeclaration[39574-43306]"
    }, {
      "left" : "public void drawRangeMarker(Graphics2D g2,\r\n                                CategoryPlot plot,\r\n                                ValueAxis axis,\r\n                                Marker marker,\r\n                                Rectangle2D dataArea)",
      "right" : "public void drawRangeMarker(Graphics2D g2,\r\n                                CategoryPlot plot,\r\n                                ValueAxis axis,\r\n                                Marker marker,\r\n                                Rectangle2D dataArea)",
      "info" : "MethodDeclaration[43314-50723]:MethodDeclaration[43314-50723]"
    }, {
      "left" : "protected Point2D calculateDomainMarkerTextAnchorPoint(Graphics2D g2,\r\n                                      PlotOrientation orientation,\r\n                                      Rectangle2D dataArea,\r\n                                      Rectangle2D markerArea,\r\n                                      RectangleInsets markerOffset,\r\n                                      LengthAdjustmentType labelOffsetType,\r\n                                      RectangleAnchor anchor)",
      "right" : "protected Point2D calculateDomainMarkerTextAnchorPoint(Graphics2D g2,\r\n                                      PlotOrientation orientation,\r\n                                      Rectangle2D dataArea,\r\n                                      Rectangle2D markerArea,\r\n                                      RectangleInsets markerOffset,\r\n                                      LengthAdjustmentType labelOffsetType,\r\n                                      RectangleAnchor anchor)",
      "info" : "MethodDeclaration[50731-52289]:MethodDeclaration[50731-52289]"
    }, {
      "left" : "protected Point2D calculateRangeMarkerTextAnchorPoint(Graphics2D g2,\r\n                                      PlotOrientation orientation,\r\n                                      Rectangle2D dataArea,\r\n                                      Rectangle2D markerArea,\r\n                                      RectangleInsets markerOffset,\r\n                                      LengthAdjustmentType labelOffsetType,\r\n                                      RectangleAnchor anchor)",
      "right" : "protected Point2D calculateRangeMarkerTextAnchorPoint(Graphics2D g2,\r\n                                      PlotOrientation orientation,\r\n                                      Rectangle2D dataArea,\r\n                                      Rectangle2D markerArea,\r\n                                      RectangleInsets markerOffset,\r\n                                      LengthAdjustmentType labelOffsetType,\r\n                                      RectangleAnchor anchor)",
      "info" : "MethodDeclaration[52297-53820]:MethodDeclaration[52297-53820]"
    }, {
      "left" : "public LegendItem getLegendItem(int datasetIndex, int series)",
      "right" : "public LegendItem getLegendItem(int datasetIndex, int series)",
      "info" : "MethodDeclaration[53828-56050]:MethodDeclaration[53828-56050]"
    }, {
      "left" : "public boolean equals(Object obj)",
      "right" : "public boolean equals(Object obj)",
      "info" : "MethodDeclaration[56058-58219]:MethodDeclaration[56058-58219]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[58227-58424]:MethodDeclaration[58227-58424]"
    }, {
      "left" : "public DrawingSupplier getDrawingSupplier()",
      "right" : "public DrawingSupplier getDrawingSupplier()",
      "info" : "MethodDeclaration[58432-58816]:MethodDeclaration[58432-58816]"
    }, {
      "left" : "protected void updateCrosshairValues(CategoryCrosshairState crosshairState,\r\n            Comparable rowKey, Comparable columnKey, double value,\r\n            int datasetIndex,\r\n            double transX, double transY, PlotOrientation orientation)",
      "right" : "protected void updateCrosshairValues(CategoryCrosshairState crosshairState,\r\n            Comparable rowKey, Comparable columnKey, double value,\r\n            int datasetIndex,\r\n            double transX, double transY, PlotOrientation orientation)",
      "info" : "MethodDeclaration[58824-60494]:MethodDeclaration[58824-60494]"
    }, {
      "left" : "protected void drawItemLabel(Graphics2D g2, PlotOrientation orientation,\r\n            CategoryDataset dataset, int row, int column, boolean selected,\r\n            double x, double y, boolean negative)",
      "right" : "protected void drawItemLabel(Graphics2D g2, PlotOrientation orientation,\r\n            CategoryDataset dataset, int row, int column, boolean selected,\r\n            double x, double y, boolean negative)",
      "info" : "MethodDeclaration[60502-62375]:MethodDeclaration[60502-62375]"
    }, {
      "left" : "public void drawAnnotations(Graphics2D g2, Rectangle2D dataArea,\r\n            CategoryAxis domainAxis, ValueAxis rangeAxis, Layer layer,\r\n            PlotRenderingInfo info)",
      "right" : "public void drawAnnotations(Graphics2D g2, Rectangle2D dataArea,\r\n            CategoryAxis domainAxis, ValueAxis rangeAxis, Layer layer,\r\n            PlotRenderingInfo info)",
      "info" : "MethodDeclaration[62383-63572]:MethodDeclaration[62383-63572]"
    }, {
      "left" : "public Object clone() throws CloneNotSupportedException",
      "right" : "public Object clone() throws CloneNotSupportedException",
      "info" : "MethodDeclaration[63580-66876]:MethodDeclaration[63580-66876]"
    }, {
      "left" : "protected CategoryAxis getDomainAxis(CategoryPlot plot, \r\n            CategoryDataset dataset)",
      "right" : "protected CategoryAxis getDomainAxis(CategoryPlot plot, \r\n            CategoryDataset dataset)",
      "info" : "MethodDeclaration[66884-67371]:MethodDeclaration[66884-67371]"
    }, {
      "left" : "protected ValueAxis getRangeAxis(CategoryPlot plot, int index)",
      "right" : "protected ValueAxis getRangeAxis(CategoryPlot plot, int index)",
      "info" : "MethodDeclaration[67379-67787]:MethodDeclaration[67379-67787]"
    }, {
      "left" : "protected void addEntity(EntityCollection entities, Shape hotspot,\r\n            CategoryDataset dataset, int row, int column, boolean selected)",
      "right" : "protected void addEntity(EntityCollection entities, Shape hotspot,\r\n            CategoryDataset dataset, int row, int column, boolean selected)",
      "info" : "MethodDeclaration[69261-70001]:MethodDeclaration[69261-70001]"
    }, {
      "left" : "protected void addEntity(EntityCollection entities, Shape hotspot,\r\n            CategoryDataset dataset, int row, int column, boolean selected,\r\n            double entityX, double entityY)",
      "right" : "protected void addEntity(EntityCollection entities, Shape hotspot,\r\n            CategoryDataset dataset, int row, int column, boolean selected,\r\n            double entityX, double entityY)",
      "info" : "MethodDeclaration[70009-72089]:MethodDeclaration[70009-72089]"
    }, {
      "left" : "public Shape createHotSpotShape(Graphics2D g2, Rectangle2D dataArea,\r\n            CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis,\r\n            CategoryDataset dataset, int row, int column, boolean selected,\r\n            CategoryItemRendererState state)",
      "right" : "public Shape createHotSpotShape(Graphics2D g2, Rectangle2D dataArea,\r\n            CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis,\r\n            CategoryDataset dataset, int row, int column, boolean selected,\r\n            CategoryItemRendererState state)",
      "info" : "MethodDeclaration[72101-73130]:MethodDeclaration[72101-73130]"
    }, {
      "left" : "public Rectangle2D createHotSpotBounds(Graphics2D g2, Rectangle2D dataArea,\r\n            CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis,\r\n            CategoryDataset dataset, int row, int column, boolean selected,\r\n            CategoryItemRendererState state, Rectangle2D result)",
      "right" : "public Rectangle2D createHotSpotBounds(Graphics2D g2, Rectangle2D dataArea,\r\n            CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis,\r\n            CategoryDataset dataset, int row, int column, boolean selected,\r\n            CategoryItemRendererState state, Rectangle2D result)",
      "info" : "MethodDeclaration[73138-74577]:MethodDeclaration[73138-74577]"
    }, {
      "left" : "public boolean hitTest(double xx, double yy, Graphics2D g2,\r\n            Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,\r\n            ValueAxis rangeAxis, CategoryDataset dataset, int row, int column,\r\n            boolean selected, CategoryItemRendererState state)",
      "right" : "public boolean hitTest(double xx, double yy, Graphics2D g2,\r\n            Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,\r\n            ValueAxis rangeAxis, CategoryDataset dataset, int row, int column,\r\n            boolean selected, CategoryItemRendererState state)",
      "info" : "MethodDeclaration[74585-75793]:MethodDeclaration[74585-75793]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11177-11560]:Block[11177-11560]"
    }, {
      "left" : "this.itemLabelGeneratorList = new ObjectList();",
      "right" : "this.itemLabelGeneratorList = new ObjectList();",
      "info" : "ExpressionStatement[11188-11235]:ExpressionStatement[11188-11235]"
    }, {
      "left" : "this.toolTipGeneratorList = new ObjectList();",
      "right" : "this.toolTipGeneratorList = new ObjectList();",
      "info" : "ExpressionStatement[11245-11290]:ExpressionStatement[11245-11290]"
    }, {
      "left" : "this.urlGeneratorList = new ObjectList();",
      "right" : "this.urlGeneratorList = new ObjectList();",
      "info" : "ExpressionStatement[11300-11341]:ExpressionStatement[11300-11341]"
    }, {
      "left" : "this.legendItemLabelGenerator\r\n                = new StandardCategorySeriesLabelGenerator();",
      "right" : "this.legendItemLabelGenerator\r\n                = new StandardCategorySeriesLabelGenerator();",
      "info" : "ExpressionStatement[11351-11443]:ExpressionStatement[11351-11443]"
    }, {
      "left" : "this.backgroundAnnotations = new ArrayList();",
      "right" : "this.backgroundAnnotations = new ArrayList();",
      "info" : "ExpressionStatement[11453-11498]:ExpressionStatement[11453-11498]"
    }, {
      "left" : "this.foregroundAnnotations = new ArrayList();",
      "right" : "this.foregroundAnnotations = new ArrayList();",
      "info" : "ExpressionStatement[11508-11553]:ExpressionStatement[11508-11553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11841-11868]:Block[11841-11868]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[11852-11861]:ReturnStatement[11852-11861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12202-12237]:Block[12202-12237]"
    }, {
      "left" : "return this.plot;",
      "right" : "return this.plot;",
      "info" : "ReturnStatement[12213-12230]:ReturnStatement[12213-12230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12610-12759]:Block[12610-12759]"
    }, {
      "left" : "if (plot == null)",
      "right" : "if (plot == null)",
      "info" : "IfStatement[12621-12725]:IfStatement[12621-12725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12639-12725]:Block[12639-12725]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'plot' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'plot' argument.\");",
      "info" : "ThrowStatement[12654-12714]:ThrowStatement[12654-12714]"
    }, {
      "left" : "this.plot = plot;",
      "right" : "this.plot = plot;",
      "info" : "ExpressionStatement[12735-12752]:ExpressionStatement[12735-12752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13428-13694]:Block[13428-13694]"
    }, {
      "left" : "CategoryItemLabelGenerator generator = (CategoryItemLabelGenerator)\r\n                this.itemLabelGeneratorList.get(row);",
      "right" : "CategoryItemLabelGenerator generator = (CategoryItemLabelGenerator)\r\n                this.itemLabelGeneratorList.get(row);",
      "info" : "VariableDeclarationStatement[13439-13561]:VariableDeclarationStatement[13439-13561]"
    }, {
      "left" : "if (generator == null)",
      "right" : "if (generator == null)",
      "info" : "IfStatement[13571-13660]:IfStatement[13571-13660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13594-13660]:Block[13594-13660]"
    }, {
      "left" : "generator = this.baseItemLabelGenerator;",
      "right" : "generator = this.baseItemLabelGenerator;",
      "info" : "ExpressionStatement[13609-13649]:ExpressionStatement[13609-13649]"
    }, {
      "left" : "return generator;",
      "right" : "return generator;",
      "info" : "ReturnStatement[13670-13687]:ReturnStatement[13670-13687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14062-14174]:Block[14062-14174]"
    }, {
      "left" : "return (CategoryItemLabelGenerator) this.itemLabelGeneratorList.get(\r\n                series);",
      "right" : "return (CategoryItemLabelGenerator) this.itemLabelGeneratorList.get(\r\n                series);",
      "info" : "ReturnStatement[14073-14167]:ReturnStatement[14073-14167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14619-14690]:Block[14619-14690]"
    }, {
      "left" : "setSeriesItemLabelGenerator(series, generator, true);",
      "right" : "setSeriesItemLabelGenerator(series, generator, true);",
      "info" : "ExpressionStatement[14630-14683]:ExpressionStatement[14630-14683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15236-15400]:Block[15236-15400]"
    }, {
      "left" : "this.itemLabelGeneratorList.set(series, generator);",
      "right" : "this.itemLabelGeneratorList.set(series, generator);",
      "info" : "ExpressionStatement[15247-15298]:ExpressionStatement[15247-15298]"
    }, {
      "left" : "if (notify)",
      "right" : "if (notify)",
      "info" : "IfStatement[15308-15393]:IfStatement[15308-15393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15320-15393]:Block[15320-15393]"
    }, {
      "left" : "notifyListeners(new RendererChangeEvent(this));",
      "right" : "notifyListeners(new RendererChangeEvent(this));",
      "info" : "ExpressionStatement[15335-15382]:ExpressionStatement[15335-15382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15679-15732]:Block[15679-15732]"
    }, {
      "left" : "return this.baseItemLabelGenerator;",
      "right" : "return this.baseItemLabelGenerator;",
      "info" : "ReturnStatement[15690-15725]:ReturnStatement[15690-15725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16097-16158]:Block[16097-16158]"
    }, {
      "left" : "setBaseItemLabelGenerator(generator, true);",
      "right" : "setBaseItemLabelGenerator(generator, true);",
      "info" : "ExpressionStatement[16108-16151]:ExpressionStatement[16108-16151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16624-16777]:Block[16624-16777]"
    }, {
      "left" : "this.baseItemLabelGenerator = generator;",
      "right" : "this.baseItemLabelGenerator = generator;",
      "info" : "ExpressionStatement[16635-16675]:ExpressionStatement[16635-16675]"
    }, {
      "left" : "if (notify)",
      "right" : "if (notify)",
      "info" : "IfStatement[16685-16770]:IfStatement[16685-16770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16697-16770]:Block[16697-16770]"
    }, {
      "left" : "notifyListeners(new RendererChangeEvent(this));",
      "right" : "notifyListeners(new RendererChangeEvent(this));",
      "info" : "ExpressionStatement[16712-16759]:ExpressionStatement[16712-16759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17373-17597]:Block[17373-17597]"
    }, {
      "left" : "CategoryToolTipGenerator result = null;",
      "right" : "CategoryToolTipGenerator result = null;",
      "info" : "VariableDeclarationStatement[17386-17425]:VariableDeclarationStatement[17386-17425]"
    }, {
      "left" : "result = getSeriesToolTipGenerator(row);",
      "right" : "result = getSeriesToolTipGenerator(row);",
      "info" : "ExpressionStatement[17435-17475]:ExpressionStatement[17435-17475]"
    }, {
      "left" : "if (result == null)",
      "right" : "if (result == null)",
      "info" : "IfStatement[17485-17566]:IfStatement[17485-17566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17505-17566]:Block[17505-17566]"
    }, {
      "left" : "result = this.baseToolTipGenerator;",
      "right" : "result = this.baseToolTipGenerator;",
      "info" : "ExpressionStatement[17520-17555]:ExpressionStatement[17520-17555]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[17576-17590]:ReturnStatement[17576-17590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18008-18098]:Block[18008-18098]"
    }, {
      "left" : "return (CategoryToolTipGenerator) this.toolTipGeneratorList.get(series);",
      "right" : "return (CategoryToolTipGenerator) this.toolTipGeneratorList.get(series);",
      "info" : "ReturnStatement[18019-18091]:ReturnStatement[18019-18091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18535-18604]:Block[18535-18604]"
    }, {
      "left" : "setSeriesToolTipGenerator(series, generator, true);",
      "right" : "setSeriesToolTipGenerator(series, generator, true);",
      "info" : "ExpressionStatement[18546-18597]:ExpressionStatement[18546-18597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19157-19319]:Block[19157-19319]"
    }, {
      "left" : "this.toolTipGeneratorList.set(series, generator);",
      "right" : "this.toolTipGeneratorList.set(series, generator);",
      "info" : "ExpressionStatement[19168-19217]:ExpressionStatement[19168-19217]"
    }, {
      "left" : "if (notify)",
      "right" : "if (notify)",
      "info" : "IfStatement[19227-19312]:IfStatement[19227-19312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19239-19312]:Block[19239-19312]"
    }, {
      "left" : "notifyListeners(new RendererChangeEvent(this));",
      "right" : "notifyListeners(new RendererChangeEvent(this));",
      "info" : "ExpressionStatement[19254-19301]:ExpressionStatement[19254-19301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19623-19674]:Block[19623-19674]"
    }, {
      "left" : "return this.baseToolTipGenerator;",
      "right" : "return this.baseToolTipGenerator;",
      "info" : "ReturnStatement[19634-19667]:ReturnStatement[19634-19667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20017-20076]:Block[20017-20076]"
    }, {
      "left" : "setBaseToolTipGenerator(generator, true);",
      "right" : "setBaseToolTipGenerator(generator, true);",
      "info" : "ExpressionStatement[20028-20069]:ExpressionStatement[20028-20069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20518-20669]:Block[20518-20669]"
    }, {
      "left" : "this.baseToolTipGenerator = generator;",
      "right" : "this.baseToolTipGenerator = generator;",
      "info" : "ExpressionStatement[20529-20567]:ExpressionStatement[20529-20567]"
    }, {
      "left" : "if (notify)",
      "right" : "if (notify)",
      "info" : "IfStatement[20577-20662]:IfStatement[20577-20662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20589-20662]:Block[20589-20662]"
    }, {
      "left" : "notifyListeners(new RendererChangeEvent(this));",
      "right" : "notifyListeners(new RendererChangeEvent(this));",
      "info" : "ExpressionStatement[20604-20651]:ExpressionStatement[20604-20651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21095-21337]:Block[21095-21337]"
    }, {
      "left" : "CategoryURLGenerator generator\r\n                = (CategoryURLGenerator) this.urlGeneratorList.get(row);",
      "right" : "CategoryURLGenerator generator\r\n                = (CategoryURLGenerator) this.urlGeneratorList.get(row);",
      "info" : "VariableDeclarationStatement[21106-21210]:VariableDeclarationStatement[21106-21210]"
    }, {
      "left" : "if (generator == null)",
      "right" : "if (generator == null)",
      "info" : "IfStatement[21220-21303]:IfStatement[21220-21303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21243-21303]:Block[21243-21303]"
    }, {
      "left" : "generator = this.baseURLGenerator;",
      "right" : "generator = this.baseURLGenerator;",
      "info" : "ExpressionStatement[21258-21292]:ExpressionStatement[21258-21292]"
    }, {
      "left" : "return generator;",
      "right" : "return generator;",
      "info" : "ReturnStatement[21313-21330]:ReturnStatement[21313-21330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21664-21746]:Block[21664-21746]"
    }, {
      "left" : "return (CategoryURLGenerator) this.urlGeneratorList.get(series);",
      "right" : "return (CategoryURLGenerator) this.urlGeneratorList.get(series);",
      "info" : "ReturnStatement[21675-21739]:ReturnStatement[21675-21739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22136-22201]:Block[22136-22201]"
    }, {
      "left" : "setSeriesURLGenerator(series, generator, true);",
      "right" : "setSeriesURLGenerator(series, generator, true);",
      "info" : "ExpressionStatement[22147-22194]:ExpressionStatement[22147-22194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22722-22880]:Block[22722-22880]"
    }, {
      "left" : "this.urlGeneratorList.set(series, generator);",
      "right" : "this.urlGeneratorList.set(series, generator);",
      "info" : "ExpressionStatement[22733-22778]:ExpressionStatement[22733-22778]"
    }, {
      "left" : "if (notify)",
      "right" : "if (notify)",
      "info" : "IfStatement[22788-22873]:IfStatement[22788-22873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22800-22873]:Block[22800-22873]"
    }, {
      "left" : "notifyListeners(new RendererChangeEvent(this));",
      "right" : "notifyListeners(new RendererChangeEvent(this));",
      "info" : "ExpressionStatement[22815-22862]:ExpressionStatement[22815-22862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23113-23160]:Block[23113-23160]"
    }, {
      "left" : "return this.baseURLGenerator;",
      "right" : "return this.baseURLGenerator;",
      "info" : "ReturnStatement[23124-23153]:ReturnStatement[23124-23153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23394-23449]:Block[23394-23449]"
    }, {
      "left" : "setBaseURLGenerator(generator, true);",
      "right" : "setBaseURLGenerator(generator, true);",
      "info" : "ExpressionStatement[23405-23442]:ExpressionStatement[23405-23442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23812-23959]:Block[23812-23959]"
    }, {
      "left" : "this.baseURLGenerator = generator;",
      "right" : "this.baseURLGenerator = generator;",
      "info" : "ExpressionStatement[23823-23857]:ExpressionStatement[23823-23857]"
    }, {
      "left" : "if (notify)",
      "right" : "if (notify)",
      "info" : "IfStatement[23867-23952]:IfStatement[23867-23952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23879-23952]:Block[23879-23952]"
    }, {
      "left" : "notifyListeners(new RendererChangeEvent(this));",
      "right" : "notifyListeners(new RendererChangeEvent(this));",
      "info" : "ExpressionStatement[23894-23941]:ExpressionStatement[23894-23941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24340-24438]:Block[24340-24438]"
    }, {
      "left" : "addAnnotation(annotation, Layer.FOREGROUND);",
      "right" : "addAnnotation(annotation, Layer.FOREGROUND);",
      "info" : "ExpressionStatement[24387-24431]:ExpressionStatement[24387-24431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24766-25381]:Block[24766-25381]"
    }, {
      "left" : "if (annotation == null)",
      "right" : "if (annotation == null)",
      "info" : "IfStatement[24777-24893]:IfStatement[24777-24893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24801-24893]:Block[24801-24893]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'annotation' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'annotation' argument.\");",
      "info" : "ThrowStatement[24816-24882]:ThrowStatement[24816-24882]"
    }, {
      "left" : "if (layer.equals(Layer.FOREGROUND))",
      "right" : "if (layer.equals(Layer.FOREGROUND))",
      "info" : "IfStatement[24903-25374]:IfStatement[24903-25374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24939-25069]:Block[24939-25069]"
    }, {
      "left" : "this.foregroundAnnotations.add(annotation);",
      "right" : "this.foregroundAnnotations.add(annotation);",
      "info" : "ExpressionStatement[24954-24997]:ExpressionStatement[24954-24997]"
    }, {
      "left" : "notifyListeners(new RendererChangeEvent(this));",
      "right" : "notifyListeners(new RendererChangeEvent(this));",
      "info" : "ExpressionStatement[25011-25058]:ExpressionStatement[25011-25058]"
    }, {
      "left" : "if (layer.equals(Layer.BACKGROUND))",
      "right" : "if (layer.equals(Layer.BACKGROUND))",
      "info" : "IfStatement[25084-25374]:IfStatement[25084-25374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25120-25250]:Block[25120-25250]"
    }, {
      "left" : "this.backgroundAnnotations.add(annotation);",
      "right" : "this.backgroundAnnotations.add(annotation);",
      "info" : "ExpressionStatement[25135-25178]:ExpressionStatement[25135-25178]"
    }, {
      "left" : "notifyListeners(new RendererChangeEvent(this));",
      "right" : "notifyListeners(new RendererChangeEvent(this));",
      "info" : "ExpressionStatement[25192-25239]:ExpressionStatement[25192-25239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25265-25374]:Block[25265-25374]"
    }, {
      "left" : "throw new RuntimeException(\"Unknown layer.\");",
      "right" : "throw new RuntimeException(\"Unknown layer.\");",
      "info" : "ThrowStatement[25318-25363]:ThrowStatement[25318-25363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25855-26095]:Block[25855-26095]"
    }, {
      "left" : "boolean removed = this.foregroundAnnotations.remove(annotation);",
      "right" : "boolean removed = this.foregroundAnnotations.remove(annotation);",
      "info" : "VariableDeclarationStatement[25866-25930]:VariableDeclarationStatement[25866-25930]"
    }, {
      "left" : "removed = removed & this.backgroundAnnotations.remove(annotation);",
      "right" : "removed = removed & this.backgroundAnnotations.remove(annotation);",
      "info" : "ExpressionStatement[25940-26006]:ExpressionStatement[25940-26006]"
    }, {
      "left" : "notifyListeners(new RendererChangeEvent(this));",
      "right" : "notifyListeners(new RendererChangeEvent(this));",
      "info" : "ExpressionStatement[26016-26063]:ExpressionStatement[26016-26063]"
    }, {
      "left" : "return removed;",
      "right" : "return removed;",
      "info" : "ReturnStatement[26073-26088]:ReturnStatement[26073-26088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26291-26446]:Block[26291-26446]"
    }, {
      "left" : "this.foregroundAnnotations.clear();",
      "right" : "this.foregroundAnnotations.clear();",
      "info" : "ExpressionStatement[26302-26337]:ExpressionStatement[26302-26337]"
    }, {
      "left" : "this.backgroundAnnotations.clear();",
      "right" : "this.backgroundAnnotations.clear();",
      "info" : "ExpressionStatement[26347-26382]:ExpressionStatement[26347-26382]"
    }, {
      "left" : "notifyListeners(new RendererChangeEvent(this));",
      "right" : "notifyListeners(new RendererChangeEvent(this));",
      "info" : "ExpressionStatement[26392-26439]:ExpressionStatement[26392-26439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26738-26793]:Block[26738-26793]"
    }, {
      "left" : "return this.legendItemLabelGenerator;",
      "right" : "return this.legendItemLabelGenerator;",
      "info" : "ReturnStatement[26749-26786]:ReturnStatement[26749-26786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27170-27382]:Block[27170-27382]"
    }, {
      "left" : "if (generator == null)",
      "right" : "if (generator == null)",
      "info" : "IfStatement[27181-27295]:IfStatement[27181-27295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27204-27295]:Block[27204-27295]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'generator' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'generator' argument.\");",
      "info" : "ThrowStatement[27219-27284]:ThrowStatement[27219-27284]"
    }, {
      "left" : "this.legendItemLabelGenerator = generator;",
      "right" : "this.legendItemLabelGenerator = generator;",
      "info" : "ExpressionStatement[27305-27347]:ExpressionStatement[27305-27347]"
    }, {
      "left" : "fireChangeEvent();",
      "right" : "fireChangeEvent();",
      "info" : "ExpressionStatement[27357-27375]:ExpressionStatement[27357-27375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27687-27744]:Block[27687-27744]"
    }, {
      "left" : "return this.legendItemToolTipGenerator;",
      "right" : "return this.legendItemToolTipGenerator;",
      "info" : "ReturnStatement[27698-27737]:ReturnStatement[27698-27737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28152-28242]:Block[28152-28242]"
    }, {
      "left" : "this.legendItemToolTipGenerator = generator;",
      "right" : "this.legendItemToolTipGenerator = generator;",
      "info" : "ExpressionStatement[28163-28207]:ExpressionStatement[28163-28207]"
    }, {
      "left" : "fireChangeEvent();",
      "right" : "fireChangeEvent();",
      "info" : "ExpressionStatement[28217-28235]:ExpressionStatement[28217-28235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28529-28582]:Block[28529-28582]"
    }, {
      "left" : "return this.legendItemURLGenerator;",
      "right" : "return this.legendItemURLGenerator;",
      "info" : "ReturnStatement[28540-28575]:ReturnStatement[28540-28575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28949-29035]:Block[28949-29035]"
    }, {
      "left" : "this.legendItemURLGenerator = generator;",
      "right" : "this.legendItemURLGenerator = generator;",
      "info" : "ExpressionStatement[28960-29000]:ExpressionStatement[28960-29000]"
    }, {
      "left" : "fireChangeEvent();",
      "right" : "fireChangeEvent();",
      "info" : "ExpressionStatement[29010-29028]:ExpressionStatement[29010-29028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29270-29309]:Block[29270-29309]"
    }, {
      "left" : "return this.rowCount;",
      "right" : "return this.rowCount;",
      "info" : "ReturnStatement[29281-29302]:ReturnStatement[29281-29302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29553-29595]:Block[29553-29595]"
    }, {
      "left" : "return this.columnCount;",
      "right" : "return this.columnCount;",
      "info" : "ReturnStatement[29564-29588]:ReturnStatement[29564-29588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30176-30825]:Block[30176-30825]"
    }, {
      "left" : "CategoryItemRendererState state = new CategoryItemRendererState(info);",
      "right" : "CategoryItemRendererState state = new CategoryItemRendererState(info);",
      "info" : "VariableDeclarationStatement[30187-30257]:VariableDeclarationStatement[30187-30257]"
    }, {
      "left" : "int[] visibleSeriesTemp = new int[this.rowCount];",
      "right" : "int[] visibleSeriesTemp = new int[this.rowCount];",
      "info" : "VariableDeclarationStatement[30267-30316]:VariableDeclarationStatement[30267-30316]"
    }, {
      "left" : "int visibleSeriesCount = 0;",
      "right" : "int visibleSeriesCount = 0;",
      "info" : "VariableDeclarationStatement[30326-30353]:VariableDeclarationStatement[30326-30353]"
    }, {
      "left" : "for (int row = 0; row < this.rowCount; row++)",
      "right" : "for (int row = 0; row < this.rowCount; row++)",
      "info" : "ForStatement[30363-30578]:ForStatement[30363-30578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30409-30578]:Block[30409-30578]"
    }, {
      "left" : "if (isSeriesVisible(row))",
      "right" : "if (isSeriesVisible(row))",
      "info" : "IfStatement[30424-30567]:IfStatement[30424-30567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30450-30567]:Block[30450-30567]"
    }, {
      "left" : "visibleSeriesTemp[visibleSeriesCount] = row;",
      "right" : "visibleSeriesTemp[visibleSeriesCount] = row;",
      "info" : "ExpressionStatement[30469-30513]:ExpressionStatement[30469-30513]"
    }, {
      "left" : "visibleSeriesCount++;",
      "right" : "visibleSeriesCount++;",
      "info" : "ExpressionStatement[30531-30552]:ExpressionStatement[30531-30552]"
    }, {
      "left" : "int[] visibleSeries = new int[visibleSeriesCount];",
      "right" : "int[] visibleSeries = new int[visibleSeriesCount];",
      "info" : "VariableDeclarationStatement[30588-30638]:VariableDeclarationStatement[30588-30638]"
    }, {
      "left" : "System.arraycopy(visibleSeriesTemp, 0, visibleSeries, 0,\r\n                visibleSeriesCount);",
      "right" : "System.arraycopy(visibleSeriesTemp, 0, visibleSeries, 0,\r\n                visibleSeriesCount);",
      "info" : "ExpressionStatement[30648-30742]:ExpressionStatement[30648-30742]"
    }, {
      "left" : "state.setVisibleSeriesArray(visibleSeries);",
      "right" : "state.setVisibleSeriesArray(visibleSeries);",
      "info" : "ExpressionStatement[30752-30795]:ExpressionStatement[30752-30795]"
    }, {
      "left" : "return state;",
      "right" : "return state;",
      "info" : "ReturnStatement[30805-30818]:ReturnStatement[30805-30818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31650-32881]:Block[31650-32881]"
    }, {
      "left" : "setPlot(plot);",
      "right" : "setPlot(plot);",
      "info" : "ExpressionStatement[31663-31677]:ExpressionStatement[31663-31677]"
    }, {
      "left" : "if (dataset != null)",
      "right" : "if (dataset != null)",
      "info" : "IfStatement[31687-31924]:IfStatement[31687-31924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31708-31830]:Block[31708-31830]"
    }, {
      "left" : "this.rowCount = dataset.getRowCount();",
      "right" : "this.rowCount = dataset.getRowCount();",
      "info" : "ExpressionStatement[31723-31761]:ExpressionStatement[31723-31761]"
    }, {
      "left" : "this.columnCount = dataset.getColumnCount();",
      "right" : "this.columnCount = dataset.getColumnCount();",
      "info" : "ExpressionStatement[31775-31819]:ExpressionStatement[31775-31819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31845-31924]:Block[31845-31924]"
    }, {
      "left" : "this.rowCount = 0;",
      "right" : "this.rowCount = 0;",
      "info" : "ExpressionStatement[31860-31878]:ExpressionStatement[31860-31878]"
    }, {
      "left" : "this.columnCount = 0;",
      "right" : "this.columnCount = 0;",
      "info" : "ExpressionStatement[31892-31913]:ExpressionStatement[31892-31913]"
    }, {
      "left" : "CategoryItemRendererState state = createState(info);",
      "right" : "CategoryItemRendererState state = createState(info);",
      "info" : "VariableDeclarationStatement[31934-31986]:VariableDeclarationStatement[31934-31986]"
    }, {
      "left" : "CategoryDatasetSelectionState selectionState = null;",
      "right" : "CategoryDatasetSelectionState selectionState = null;",
      "info" : "VariableDeclarationStatement[32068-32120]:VariableDeclarationStatement[32068-32120]"
    }, {
      "left" : "if (dataset instanceof SelectableCategoryDataset)",
      "right" : "if (dataset instanceof SelectableCategoryDataset)",
      "info" : "IfStatement[32130-32329]:IfStatement[32130-32329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32180-32329]:Block[32180-32329]"
    }, {
      "left" : "SelectableCategoryDataset scd = (SelectableCategoryDataset) dataset;",
      "right" : "SelectableCategoryDataset scd = (SelectableCategoryDataset) dataset;",
      "info" : "VariableDeclarationStatement[32195-32263]:VariableDeclarationStatement[32195-32263]"
    }, {
      "left" : "selectionState = scd.getSelectionState();",
      "right" : "selectionState = scd.getSelectionState();",
      "info" : "ExpressionStatement[32277-32318]:ExpressionStatement[32277-32318]"
    }, {
      "left" : "if (selectionState == null && info != null)",
      "right" : "if (selectionState == null && info != null)",
      "info" : "IfStatement[32455-32799]:IfStatement[32455-32799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32499-32799]:Block[32499-32799]"
    }, {
      "left" : "ChartRenderingInfo cri = info.getOwner();",
      "right" : "ChartRenderingInfo cri = info.getOwner();",
      "info" : "VariableDeclarationStatement[32514-32555]:VariableDeclarationStatement[32514-32555]"
    }, {
      "left" : "if (cri != null)",
      "right" : "if (cri != null)",
      "info" : "IfStatement[32569-32788]:IfStatement[32569-32788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32586-32788]:Block[32586-32788]"
    }, {
      "left" : "RenderingSource rs = cri.getRenderingSource();",
      "right" : "RenderingSource rs = cri.getRenderingSource();",
      "info" : "VariableDeclarationStatement[32605-32651]:VariableDeclarationStatement[32605-32651]"
    }, {
      "left" : "selectionState = (CategoryDatasetSelectionState)\r\n                        rs.getSelectionState(dataset);",
      "right" : "selectionState = (CategoryDatasetSelectionState)\r\n                        rs.getSelectionState(dataset);",
      "info" : "ExpressionStatement[32669-32773]:ExpressionStatement[32669-32773]"
    }, {
      "left" : "state.setSelectionState(selectionState);",
      "right" : "state.setSelectionState(selectionState);",
      "info" : "ExpressionStatement[32809-32849]:ExpressionStatement[32809-32849]"
    }, {
      "left" : "return state;",
      "right" : "return state;",
      "info" : "ReturnStatement[32861-32874]:ReturnStatement[32861-32874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33274-33331]:Block[33274-33331]"
    }, {
      "left" : "return findRangeBounds(dataset, false);",
      "right" : "return findRangeBounds(dataset, false);",
      "info" : "ReturnStatement[33285-33324]:ReturnStatement[33285-33324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33871-34548]:Block[33871-34548]"
    }, {
      "left" : "if (dataset == null)",
      "right" : "if (dataset == null)",
      "info" : "IfStatement[33882-33941]:IfStatement[33882-33941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33903-33941]:Block[33903-33941]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[33918-33930]:ReturnStatement[33918-33930]"
    }, {
      "left" : "if (getDataBoundsIncludesVisibleSeriesOnly())",
      "right" : "if (getDataBoundsIncludesVisibleSeriesOnly())",
      "info" : "IfStatement[33951-34541]:IfStatement[33951-34541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33997-34434]:Block[33997-34434]"
    }, {
      "left" : "List visibleSeriesKeys = new ArrayList();",
      "right" : "List visibleSeriesKeys = new ArrayList();",
      "info" : "VariableDeclarationStatement[34012-34053]:VariableDeclarationStatement[34012-34053]"
    }, {
      "left" : "int seriesCount = dataset.getRowCount();",
      "right" : "int seriesCount = dataset.getRowCount();",
      "info" : "VariableDeclarationStatement[34067-34107]:VariableDeclarationStatement[34067-34107]"
    }, {
      "left" : "for (int s = 0; s < seriesCount; s++)",
      "right" : "for (int s = 0; s < seriesCount; s++)",
      "info" : "ForStatement[34121-34303]:ForStatement[34121-34303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34159-34303]:Block[34159-34303]"
    }, {
      "left" : "if (isSeriesVisible(s))",
      "right" : "if (isSeriesVisible(s))",
      "info" : "IfStatement[34178-34288]:IfStatement[34178-34288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34202-34288]:Block[34202-34288]"
    }, {
      "left" : "visibleSeriesKeys.add(dataset.getRowKey(s));",
      "right" : "visibleSeriesKeys.add(dataset.getRowKey(s));",
      "info" : "ExpressionStatement[34225-34269]:ExpressionStatement[34225-34269]"
    }, {
      "left" : "return DatasetUtilities.findRangeBounds(dataset,\r\n                    visibleSeriesKeys, includeInterval);",
      "right" : "return DatasetUtilities.findRangeBounds(dataset,\r\n                    visibleSeriesKeys, includeInterval);",
      "info" : "ReturnStatement[34317-34423]:ReturnStatement[34317-34423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34449-34541]:Block[34449-34541]"
    }, {
      "left" : "return DatasetUtilities.findRangeBounds(dataset, includeInterval);",
      "right" : "return DatasetUtilities.findRangeBounds(dataset, includeInterval);",
      "info" : "ReturnStatement[34464-34530]:ReturnStatement[34464-34530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35183-35296]:Block[35183-35296]"
    }, {
      "left" : "return axis.getCategoryMiddle(columnKey, dataset.getColumnKeys(), area,\r\n                edge);",
      "right" : "return axis.getCategoryMiddle(columnKey, dataset.getColumnKeys(), area,\r\n                edge);",
      "info" : "ReturnStatement[35194-35289]:ReturnStatement[35194-35289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35770-35826]:Block[35770-35826]"
    }, {
      "left" : "plot.drawBackground(g2, dataArea);",
      "right" : "plot.drawBackground(g2, dataArea);",
      "info" : "ExpressionStatement[35783-35817]:ExpressionStatement[35783-35817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36286-36339]:Block[36286-36339]"
    }, {
      "left" : "plot.drawOutline(g2, dataArea);",
      "right" : "plot.drawOutline(g2, dataArea);",
      "info" : "ExpressionStatement[36299-36330]:ExpressionStatement[36299-36330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37293-38087]:Block[37293-38087]"
    }, {
      "left" : "if (paint == null)",
      "right" : "if (paint == null)",
      "info" : "IfStatement[37306-37412]:IfStatement[37306-37412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37325-37412]:Block[37325-37412]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'paint' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'paint' argument.\");",
      "info" : "ThrowStatement[37340-37401]:ThrowStatement[37340-37401]"
    }, {
      "left" : "if (stroke == null)",
      "right" : "if (stroke == null)",
      "info" : "IfStatement[37422-37530]:IfStatement[37422-37530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37442-37530]:Block[37442-37530]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'stroke' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'stroke' argument.\");",
      "info" : "ThrowStatement[37457-37519]:ThrowStatement[37457-37519]"
    }, {
      "left" : "Line2D line = null;",
      "right" : "Line2D line = null;",
      "info" : "VariableDeclarationStatement[37540-37559]:VariableDeclarationStatement[37540-37559]"
    }, {
      "left" : "PlotOrientation orientation = plot.getOrientation();",
      "right" : "PlotOrientation orientation = plot.getOrientation();",
      "info" : "VariableDeclarationStatement[37569-37621]:VariableDeclarationStatement[37569-37621]"
    }, {
      "left" : "if (orientation == PlotOrientation.HORIZONTAL)",
      "right" : "if (orientation == PlotOrientation.HORIZONTAL)",
      "info" : "IfStatement[37633-37992]:IfStatement[37633-37992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37680-37806]:Block[37680-37806]"
    }, {
      "left" : "line = new Line2D.Double(dataArea.getMinX(), value,\r\n                    dataArea.getMaxX(), value);",
      "right" : "line = new Line2D.Double(dataArea.getMinX(), value,\r\n                    dataArea.getMaxX(), value);",
      "info" : "ExpressionStatement[37695-37795]:ExpressionStatement[37695-37795]"
    }, {
      "left" : "if (orientation == PlotOrientation.VERTICAL)",
      "right" : "if (orientation == PlotOrientation.VERTICAL)",
      "info" : "IfStatement[37821-37992]:IfStatement[37821-37992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37866-37992]:Block[37866-37992]"
    }, {
      "left" : "line = new Line2D.Double(value, dataArea.getMinY(), value,\r\n                    dataArea.getMaxY());",
      "right" : "line = new Line2D.Double(value, dataArea.getMinY(), value,\r\n                    dataArea.getMaxY());",
      "info" : "ExpressionStatement[37881-37981]:ExpressionStatement[37881-37981]"
    }, {
      "left" : "g2.setPaint(paint);",
      "right" : "g2.setPaint(paint);",
      "info" : "ExpressionStatement[38004-38023]:ExpressionStatement[38004-38023]"
    }, {
      "left" : "g2.setStroke(stroke);",
      "right" : "g2.setStroke(stroke);",
      "info" : "ExpressionStatement[38033-38054]:ExpressionStatement[38033-38054]"
    }, {
      "left" : "g2.draw(line);",
      "right" : "g2.draw(line);",
      "info" : "ExpressionStatement[38064-38078]:ExpressionStatement[38064-38078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38829-39566]:Block[38829-39566]"
    }, {
      "left" : "Range range = axis.getRange();",
      "right" : "Range range = axis.getRange();",
      "info" : "VariableDeclarationStatement[38842-38872]:VariableDeclarationStatement[38842-38872]"
    }, {
      "left" : "if (!range.contains(value))",
      "right" : "if (!range.contains(value))",
      "info" : "IfStatement[38882-38943]:IfStatement[38882-38943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38910-38943]:Block[38910-38943]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[38925-38932]:ReturnStatement[38925-38932]"
    }, {
      "left" : "PlotOrientation orientation = plot.getOrientation();",
      "right" : "PlotOrientation orientation = plot.getOrientation();",
      "info" : "VariableDeclarationStatement[38955-39007]:VariableDeclarationStatement[38955-39007]"
    }, {
      "left" : "Line2D line = null;",
      "right" : "Line2D line = null;",
      "info" : "VariableDeclarationStatement[39017-39036]:VariableDeclarationStatement[39017-39036]"
    }, {
      "left" : "double v = axis.valueToJava2D(value, dataArea, plot.getRangeAxisEdge());",
      "right" : "double v = axis.valueToJava2D(value, dataArea, plot.getRangeAxisEdge());",
      "info" : "VariableDeclarationStatement[39046-39118]:VariableDeclarationStatement[39046-39118]"
    }, {
      "left" : "if (orientation == PlotOrientation.HORIZONTAL)",
      "right" : "if (orientation == PlotOrientation.HORIZONTAL)",
      "info" : "IfStatement[39128-39471]:IfStatement[39128-39471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39175-39293]:Block[39175-39293]"
    }, {
      "left" : "line = new Line2D.Double(v, dataArea.getMinY(), v,\r\n                    dataArea.getMaxY());",
      "right" : "line = new Line2D.Double(v, dataArea.getMinY(), v,\r\n                    dataArea.getMaxY());",
      "info" : "ExpressionStatement[39190-39282]:ExpressionStatement[39190-39282]"
    }, {
      "left" : "if (orientation == PlotOrientation.VERTICAL)",
      "right" : "if (orientation == PlotOrientation.VERTICAL)",
      "info" : "IfStatement[39308-39471]:IfStatement[39308-39471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39353-39471]:Block[39353-39471]"
    }, {
      "left" : "line = new Line2D.Double(dataArea.getMinX(), v,\r\n                    dataArea.getMaxX(), v);",
      "right" : "line = new Line2D.Double(dataArea.getMinX(), v,\r\n                    dataArea.getMaxX(), v);",
      "info" : "ExpressionStatement[39368-39460]:ExpressionStatement[39368-39460]"
    }, {
      "left" : "g2.setPaint(paint);",
      "right" : "g2.setPaint(paint);",
      "info" : "ExpressionStatement[39483-39502]:ExpressionStatement[39483-39502]"
    }, {
      "left" : "g2.setStroke(stroke);",
      "right" : "g2.setStroke(stroke);",
      "info" : "ExpressionStatement[39512-39533]:ExpressionStatement[39512-39533]"
    }, {
      "left" : "g2.draw(line);",
      "right" : "g2.draw(line);",
      "info" : "ExpressionStatement[39543-39557]:ExpressionStatement[39543-39557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40341-43306]:Block[40341-43306]"
    }, {
      "left" : "Comparable category = marker.getKey();",
      "right" : "Comparable category = marker.getKey();",
      "info" : "VariableDeclarationStatement[40354-40392]:VariableDeclarationStatement[40354-40392]"
    }, {
      "left" : "CategoryDataset dataset = plot.getDataset(plot.getIndexOf(this));",
      "right" : "CategoryDataset dataset = plot.getDataset(plot.getIndexOf(this));",
      "info" : "VariableDeclarationStatement[40402-40467]:VariableDeclarationStatement[40402-40467]"
    }, {
      "left" : "int columnIndex = dataset.getColumnIndex(category);",
      "right" : "int columnIndex = dataset.getColumnIndex(category);",
      "info" : "VariableDeclarationStatement[40477-40528]:VariableDeclarationStatement[40477-40528]"
    }, {
      "left" : "if (columnIndex < 0)",
      "right" : "if (columnIndex < 0)",
      "info" : "IfStatement[40538-40592]:IfStatement[40538-40592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40559-40592]:Block[40559-40592]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[40574-40581]:ReturnStatement[40574-40581]"
    }, {
      "left" : "final Composite savedComposite = g2.getComposite();",
      "right" : "final Composite savedComposite = g2.getComposite();",
      "info" : "VariableDeclarationStatement[40604-40655]:VariableDeclarationStatement[40604-40655]"
    }, {
      "left" : "g2.setComposite(AlphaComposite.getInstance(\r\n                AlphaComposite.SRC_OVER, marker.getAlpha()));",
      "right" : "g2.setComposite(AlphaComposite.getInstance(\r\n                AlphaComposite.SRC_OVER, marker.getAlpha()));",
      "info" : "ExpressionStatement[40665-40771]:ExpressionStatement[40665-40771]"
    }, {
      "left" : "PlotOrientation orientation = plot.getOrientation();",
      "right" : "PlotOrientation orientation = plot.getOrientation();",
      "info" : "VariableDeclarationStatement[40783-40835]:VariableDeclarationStatement[40783-40835]"
    }, {
      "left" : "Rectangle2D bounds = null;",
      "right" : "Rectangle2D bounds = null;",
      "info" : "VariableDeclarationStatement[40845-40871]:VariableDeclarationStatement[40845-40871]"
    }, {
      "left" : "if (marker.getDrawAsLine())",
      "right" : "if (marker.getDrawAsLine())",
      "info" : "IfStatement[40881-42576]:IfStatement[40881-42576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40909-41666]:Block[40909-41666]"
    }, {
      "left" : "double v = axis.getCategoryMiddle(columnIndex,\r\n                    dataset.getColumnCount(), dataArea,\r\n                    plot.getDomainAxisEdge());",
      "right" : "double v = axis.getCategoryMiddle(columnIndex,\r\n                    dataset.getColumnCount(), dataArea,\r\n                    plot.getDomainAxisEdge());",
      "info" : "VariableDeclarationStatement[40924-41075]:VariableDeclarationStatement[40924-41075]"
    }, {
      "left" : "Line2D line = null;",
      "right" : "Line2D line = null;",
      "info" : "VariableDeclarationStatement[41089-41108]:VariableDeclarationStatement[41089-41108]"
    }, {
      "left" : "if (orientation == PlotOrientation.HORIZONTAL)",
      "right" : "if (orientation == PlotOrientation.HORIZONTAL)",
      "info" : "IfStatement[41122-41493]:IfStatement[41122-41493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41169-41299]:Block[41169-41299]"
    }, {
      "left" : "line = new Line2D.Double(dataArea.getMinX(), v,\r\n                        dataArea.getMaxX(), v);",
      "right" : "line = new Line2D.Double(dataArea.getMinX(), v,\r\n                        dataArea.getMaxX(), v);",
      "info" : "ExpressionStatement[41188-41284]:ExpressionStatement[41188-41284]"
    }, {
      "left" : "if (orientation == PlotOrientation.VERTICAL)",
      "right" : "if (orientation == PlotOrientation.VERTICAL)",
      "info" : "IfStatement[41318-41493]:IfStatement[41318-41493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41363-41493]:Block[41363-41493]"
    }, {
      "left" : "line = new Line2D.Double(v, dataArea.getMinY(), v,\r\n                        dataArea.getMaxY());",
      "right" : "line = new Line2D.Double(v, dataArea.getMinY(), v,\r\n                        dataArea.getMaxY());",
      "info" : "ExpressionStatement[41382-41478]:ExpressionStatement[41382-41478]"
    }, {
      "left" : "g2.setPaint(marker.getPaint());",
      "right" : "g2.setPaint(marker.getPaint());",
      "info" : "ExpressionStatement[41507-41538]:ExpressionStatement[41507-41538]"
    }, {
      "left" : "g2.setStroke(marker.getStroke());",
      "right" : "g2.setStroke(marker.getStroke());",
      "info" : "ExpressionStatement[41552-41585]:ExpressionStatement[41552-41585]"
    }, {
      "left" : "g2.draw(line);",
      "right" : "g2.draw(line);",
      "info" : "ExpressionStatement[41599-41613]:ExpressionStatement[41599-41613]"
    }, {
      "left" : "bounds = line.getBounds2D();",
      "right" : "bounds = line.getBounds2D();",
      "info" : "ExpressionStatement[41627-41655]:ExpressionStatement[41627-41655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41681-42576]:Block[41681-42576]"
    }, {
      "left" : "double v0 = axis.getCategoryStart(columnIndex,\r\n                    dataset.getColumnCount(), dataArea,\r\n                    plot.getDomainAxisEdge());",
      "right" : "double v0 = axis.getCategoryStart(columnIndex,\r\n                    dataset.getColumnCount(), dataArea,\r\n                    plot.getDomainAxisEdge());",
      "info" : "VariableDeclarationStatement[41696-41847]:VariableDeclarationStatement[41696-41847]"
    }, {
      "left" : "double v1 = axis.getCategoryEnd(columnIndex,\r\n                    dataset.getColumnCount(), dataArea,\r\n                    plot.getDomainAxisEdge());",
      "right" : "double v1 = axis.getCategoryEnd(columnIndex,\r\n                    dataset.getColumnCount(), dataArea,\r\n                    plot.getDomainAxisEdge());",
      "info" : "VariableDeclarationStatement[41861-42010]:VariableDeclarationStatement[41861-42010]"
    }, {
      "left" : "Rectangle2D area = null;",
      "right" : "Rectangle2D area = null;",
      "info" : "VariableDeclarationStatement[42024-42048]:VariableDeclarationStatement[42024-42048]"
    }, {
      "left" : "if (orientation == PlotOrientation.HORIZONTAL)",
      "right" : "if (orientation == PlotOrientation.HORIZONTAL)",
      "info" : "IfStatement[42062-42464]:IfStatement[42062-42464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42109-42254]:Block[42109-42254]"
    }, {
      "left" : "area = new Rectangle2D.Double(dataArea.getMinX(), v0,\r\n                        dataArea.getWidth(), (v1 - v0));",
      "right" : "area = new Rectangle2D.Double(dataArea.getMinX(), v0,\r\n                        dataArea.getWidth(), (v1 - v0));",
      "info" : "ExpressionStatement[42128-42239]:ExpressionStatement[42128-42239]"
    }, {
      "left" : "if (orientation == PlotOrientation.VERTICAL)",
      "right" : "if (orientation == PlotOrientation.VERTICAL)",
      "info" : "IfStatement[42273-42464]:IfStatement[42273-42464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42318-42464]:Block[42318-42464]"
    }, {
      "left" : "area = new Rectangle2D.Double(v0, dataArea.getMinY(),\r\n                        (v1 - v0), dataArea.getHeight());",
      "right" : "area = new Rectangle2D.Double(v0, dataArea.getMinY(),\r\n                        (v1 - v0), dataArea.getHeight());",
      "info" : "ExpressionStatement[42337-42449]:ExpressionStatement[42337-42449]"
    }, {
      "left" : "g2.setPaint(marker.getPaint());",
      "right" : "g2.setPaint(marker.getPaint());",
      "info" : "ExpressionStatement[42478-42509]:ExpressionStatement[42478-42509]"
    }, {
      "left" : "g2.fill(area);",
      "right" : "g2.fill(area);",
      "info" : "ExpressionStatement[42523-42537]:ExpressionStatement[42523-42537]"
    }, {
      "left" : "bounds = area;",
      "right" : "bounds = area;",
      "info" : "ExpressionStatement[42551-42565]:ExpressionStatement[42551-42565]"
    }, {
      "left" : "String label = marker.getLabel();",
      "right" : "String label = marker.getLabel();",
      "info" : "VariableDeclarationStatement[42588-42621]:VariableDeclarationStatement[42588-42621]"
    }, {
      "left" : "RectangleAnchor anchor = marker.getLabelAnchor();",
      "right" : "RectangleAnchor anchor = marker.getLabelAnchor();",
      "info" : "VariableDeclarationStatement[42631-42680]:VariableDeclarationStatement[42631-42680]"
    }, {
      "left" : "if (label != null)",
      "right" : "if (label != null)",
      "info" : "IfStatement[42690-43257]:IfStatement[42690-43257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42709-43257]:Block[42709-43257]"
    }, {
      "left" : "Font labelFont = marker.getLabelFont();",
      "right" : "Font labelFont = marker.getLabelFont();",
      "info" : "VariableDeclarationStatement[42724-42763]:VariableDeclarationStatement[42724-42763]"
    }, {
      "left" : "g2.setFont(labelFont);",
      "right" : "g2.setFont(labelFont);",
      "info" : "ExpressionStatement[42777-42799]:ExpressionStatement[42777-42799]"
    }, {
      "left" : "g2.setPaint(marker.getLabelPaint());",
      "right" : "g2.setPaint(marker.getLabelPaint());",
      "info" : "ExpressionStatement[42813-42849]:ExpressionStatement[42813-42849]"
    }, {
      "left" : "Point2D coordinates = calculateDomainMarkerTextAnchorPoint(\r\n                    g2, orientation, dataArea, bounds, marker.getLabelOffset(),\r\n                    marker.getLabelOffsetType(), anchor);",
      "right" : "Point2D coordinates = calculateDomainMarkerTextAnchorPoint(\r\n                    g2, orientation, dataArea, bounds, marker.getLabelOffset(),\r\n                    marker.getLabelOffsetType(), anchor);",
      "info" : "VariableDeclarationStatement[42863-43062]:VariableDeclarationStatement[42863-43062]"
    }, {
      "left" : "TextUtilities.drawAlignedString(label, g2,\r\n                    (float) coordinates.getX(), (float) coordinates.getY(),\r\n                    marker.getLabelTextAnchor());",
      "right" : "TextUtilities.drawAlignedString(label, g2,\r\n                    (float) coordinates.getX(), (float) coordinates.getY(),\r\n                    marker.getLabelTextAnchor());",
      "info" : "ExpressionStatement[43076-43246]:ExpressionStatement[43076-43246]"
    }, {
      "left" : "g2.setComposite(savedComposite);",
      "right" : "g2.setComposite(savedComposite);",
      "info" : "ExpressionStatement[43267-43299]:ExpressionStatement[43267-43299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44076-50723]:Block[44076-50723]"
    }, {
      "left" : "if (marker instanceof ValueMarker)",
      "right" : "if (marker instanceof ValueMarker)",
      "info" : "IfStatement[44089-50716]:IfStatement[44089-50716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44124-46081]:Block[44124-46081]"
    }, {
      "left" : "ValueMarker vm = (ValueMarker) marker;",
      "right" : "ValueMarker vm = (ValueMarker) marker;",
      "info" : "VariableDeclarationStatement[44139-44177]:VariableDeclarationStatement[44139-44177]"
    }, {
      "left" : "double value = vm.getValue();",
      "right" : "double value = vm.getValue();",
      "info" : "VariableDeclarationStatement[44191-44220]:VariableDeclarationStatement[44191-44220]"
    }, {
      "left" : "Range range = axis.getRange();",
      "right" : "Range range = axis.getRange();",
      "info" : "VariableDeclarationStatement[44234-44264]:VariableDeclarationStatement[44234-44264]"
    }, {
      "left" : "if (!range.contains(value))",
      "right" : "if (!range.contains(value))",
      "info" : "IfStatement[44280-44349]:IfStatement[44280-44349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44308-44349]:Block[44308-44349]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[44327-44334]:ReturnStatement[44327-44334]"
    }, {
      "left" : "final Composite savedComposite = g2.getComposite();",
      "right" : "final Composite savedComposite = g2.getComposite();",
      "info" : "VariableDeclarationStatement[44365-44416]:VariableDeclarationStatement[44365-44416]"
    }, {
      "left" : "g2.setComposite(AlphaComposite.getInstance(\r\n                    AlphaComposite.SRC_OVER, marker.getAlpha()));",
      "right" : "g2.setComposite(AlphaComposite.getInstance(\r\n                    AlphaComposite.SRC_OVER, marker.getAlpha()));",
      "info" : "ExpressionStatement[44430-44540]:ExpressionStatement[44430-44540]"
    }, {
      "left" : "PlotOrientation orientation = plot.getOrientation();",
      "right" : "PlotOrientation orientation = plot.getOrientation();",
      "info" : "VariableDeclarationStatement[44556-44608]:VariableDeclarationStatement[44556-44608]"
    }, {
      "left" : "double v = axis.valueToJava2D(value, dataArea,\r\n                    plot.getRangeAxisEdge());",
      "right" : "double v = axis.valueToJava2D(value, dataArea,\r\n                    plot.getRangeAxisEdge());",
      "info" : "VariableDeclarationStatement[44622-44715]:VariableDeclarationStatement[44622-44715]"
    }, {
      "left" : "Line2D line = null;",
      "right" : "Line2D line = null;",
      "info" : "VariableDeclarationStatement[44729-44748]:VariableDeclarationStatement[44729-44748]"
    }, {
      "left" : "if (orientation == PlotOrientation.HORIZONTAL)",
      "right" : "if (orientation == PlotOrientation.HORIZONTAL)",
      "info" : "IfStatement[44762-45133]:IfStatement[44762-45133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44809-44939]:Block[44809-44939]"
    }, {
      "left" : "line = new Line2D.Double(v, dataArea.getMinY(), v,\r\n                        dataArea.getMaxY());",
      "right" : "line = new Line2D.Double(v, dataArea.getMinY(), v,\r\n                        dataArea.getMaxY());",
      "info" : "ExpressionStatement[44828-44924]:ExpressionStatement[44828-44924]"
    }, {
      "left" : "if (orientation == PlotOrientation.VERTICAL)",
      "right" : "if (orientation == PlotOrientation.VERTICAL)",
      "info" : "IfStatement[44958-45133]:IfStatement[44958-45133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45003-45133]:Block[45003-45133]"
    }, {
      "left" : "line = new Line2D.Double(dataArea.getMinX(), v,\r\n                        dataArea.getMaxX(), v);",
      "right" : "line = new Line2D.Double(dataArea.getMinX(), v,\r\n                        dataArea.getMaxX(), v);",
      "info" : "ExpressionStatement[45022-45118]:ExpressionStatement[45022-45118]"
    }, {
      "left" : "g2.setPaint(marker.getPaint());",
      "right" : "g2.setPaint(marker.getPaint());",
      "info" : "ExpressionStatement[45149-45180]:ExpressionStatement[45149-45180]"
    }, {
      "left" : "g2.setStroke(marker.getStroke());",
      "right" : "g2.setStroke(marker.getStroke());",
      "info" : "ExpressionStatement[45194-45227]:ExpressionStatement[45194-45227]"
    }, {
      "left" : "g2.draw(line);",
      "right" : "g2.draw(line);",
      "info" : "ExpressionStatement[45241-45255]:ExpressionStatement[45241-45255]"
    }, {
      "left" : "String label = marker.getLabel();",
      "right" : "String label = marker.getLabel();",
      "info" : "VariableDeclarationStatement[45271-45304]:VariableDeclarationStatement[45271-45304]"
    }, {
      "left" : "RectangleAnchor anchor = marker.getLabelAnchor();",
      "right" : "RectangleAnchor anchor = marker.getLabelAnchor();",
      "info" : "VariableDeclarationStatement[45318-45367]:VariableDeclarationStatement[45318-45367]"
    }, {
      "left" : "if (label != null)",
      "right" : "if (label != null)",
      "info" : "IfStatement[45381-46024]:IfStatement[45381-46024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45400-46024]:Block[45400-46024]"
    }, {
      "left" : "Font labelFont = marker.getLabelFont();",
      "right" : "Font labelFont = marker.getLabelFont();",
      "info" : "VariableDeclarationStatement[45419-45458]:VariableDeclarationStatement[45419-45458]"
    }, {
      "left" : "g2.setFont(labelFont);",
      "right" : "g2.setFont(labelFont);",
      "info" : "ExpressionStatement[45476-45498]:ExpressionStatement[45476-45498]"
    }, {
      "left" : "g2.setPaint(marker.getLabelPaint());",
      "right" : "g2.setPaint(marker.getLabelPaint());",
      "info" : "ExpressionStatement[45516-45552]:ExpressionStatement[45516-45552]"
    }, {
      "left" : "Point2D coordinates = calculateRangeMarkerTextAnchorPoint(\r\n                        g2, orientation, dataArea, line.getBounds2D(),\r\n                        marker.getLabelOffset(), LengthAdjustmentType.EXPAND,\r\n                        anchor);",
      "right" : "Point2D coordinates = calculateRangeMarkerTextAnchorPoint(\r\n                        g2, orientation, dataArea, line.getBounds2D(),\r\n                        marker.getLabelOffset(), LengthAdjustmentType.EXPAND,\r\n                        anchor);",
      "info" : "VariableDeclarationStatement[45570-45813]:VariableDeclarationStatement[45570-45813]"
    }, {
      "left" : "TextUtilities.drawAlignedString(label, g2,\r\n                        (float) coordinates.getX(), (float) coordinates.getY(),\r\n                        marker.getLabelTextAnchor());",
      "right" : "TextUtilities.drawAlignedString(label, g2,\r\n                        (float) coordinates.getX(), (float) coordinates.getY(),\r\n                        marker.getLabelTextAnchor());",
      "info" : "ExpressionStatement[45831-46009]:ExpressionStatement[45831-46009]"
    }, {
      "left" : "g2.setComposite(savedComposite);",
      "right" : "g2.setComposite(savedComposite);",
      "info" : "ExpressionStatement[46038-46070]:ExpressionStatement[46038-46070]"
    }, {
      "left" : "if (marker instanceof IntervalMarker)",
      "right" : "if (marker instanceof IntervalMarker)",
      "info" : "IfStatement[46096-50716]:IfStatement[46096-50716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46134-50716]:Block[46134-50716]"
    }, {
      "left" : "IntervalMarker im = (IntervalMarker) marker;",
      "right" : "IntervalMarker im = (IntervalMarker) marker;",
      "info" : "VariableDeclarationStatement[46149-46193]:VariableDeclarationStatement[46149-46193]"
    }, {
      "left" : "double start = im.getStartValue();",
      "right" : "double start = im.getStartValue();",
      "info" : "VariableDeclarationStatement[46207-46241]:VariableDeclarationStatement[46207-46241]"
    }, {
      "left" : "double end = im.getEndValue();",
      "right" : "double end = im.getEndValue();",
      "info" : "VariableDeclarationStatement[46255-46285]:VariableDeclarationStatement[46255-46285]"
    }, {
      "left" : "Range range = axis.getRange();",
      "right" : "Range range = axis.getRange();",
      "info" : "VariableDeclarationStatement[46299-46329]:VariableDeclarationStatement[46299-46329]"
    }, {
      "left" : "if (!(range.intersects(start, end)))",
      "right" : "if (!(range.intersects(start, end)))",
      "info" : "IfStatement[46343-46421]:IfStatement[46343-46421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46380-46421]:Block[46380-46421]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[46399-46406]:ReturnStatement[46399-46406]"
    }, {
      "left" : "final Composite savedComposite = g2.getComposite();",
      "right" : "final Composite savedComposite = g2.getComposite();",
      "info" : "VariableDeclarationStatement[46437-46488]:VariableDeclarationStatement[46437-46488]"
    }, {
      "left" : "g2.setComposite(AlphaComposite.getInstance(\r\n                    AlphaComposite.SRC_OVER, marker.getAlpha()));",
      "right" : "g2.setComposite(AlphaComposite.getInstance(\r\n                    AlphaComposite.SRC_OVER, marker.getAlpha()));",
      "info" : "ExpressionStatement[46502-46612]:ExpressionStatement[46502-46612]"
    }, {
      "left" : "double start2d = axis.valueToJava2D(start, dataArea,\r\n                    plot.getRangeAxisEdge());",
      "right" : "double start2d = axis.valueToJava2D(start, dataArea,\r\n                    plot.getRangeAxisEdge());",
      "info" : "VariableDeclarationStatement[46628-46727]:VariableDeclarationStatement[46628-46727]"
    }, {
      "left" : "double end2d = axis.valueToJava2D(end, dataArea,\r\n                    plot.getRangeAxisEdge());",
      "right" : "double end2d = axis.valueToJava2D(end, dataArea,\r\n                    plot.getRangeAxisEdge());",
      "info" : "VariableDeclarationStatement[46741-46836]:VariableDeclarationStatement[46741-46836]"
    }, {
      "left" : "double low = Math.min(start2d, end2d);",
      "right" : "double low = Math.min(start2d, end2d);",
      "info" : "VariableDeclarationStatement[46850-46888]:VariableDeclarationStatement[46850-46888]"
    }, {
      "left" : "double high = Math.max(start2d, end2d);",
      "right" : "double high = Math.max(start2d, end2d);",
      "info" : "VariableDeclarationStatement[46902-46941]:VariableDeclarationStatement[46902-46941]"
    }, {
      "left" : "PlotOrientation orientation = plot.getOrientation();",
      "right" : "PlotOrientation orientation = plot.getOrientation();",
      "info" : "VariableDeclarationStatement[46957-47009]:VariableDeclarationStatement[46957-47009]"
    }, {
      "left" : "Rectangle2D rect = null;",
      "right" : "Rectangle2D rect = null;",
      "info" : "VariableDeclarationStatement[47023-47047]:VariableDeclarationStatement[47023-47047]"
    }, {
      "left" : "if (orientation == PlotOrientation.HORIZONTAL)",
      "right" : "if (orientation == PlotOrientation.HORIZONTAL)",
      "info" : "IfStatement[47061-47873]:IfStatement[47061-47873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47108-47459]:Block[47108-47459]"
    }, {
      "left" : "low = Math.max(low, dataArea.getMinX());",
      "right" : "low = Math.max(low, dataArea.getMinX());",
      "info" : "ExpressionStatement[47187-47227]:ExpressionStatement[47187-47227]"
    }, {
      "left" : "high = Math.min(high, dataArea.getMaxX());",
      "right" : "high = Math.min(high, dataArea.getMaxX());",
      "info" : "ExpressionStatement[47245-47287]:ExpressionStatement[47245-47287]"
    }, {
      "left" : "rect = new Rectangle2D.Double(low,\r\n                        dataArea.getMinY(), high - low,\r\n                        dataArea.getHeight());",
      "right" : "rect = new Rectangle2D.Double(low,\r\n                        dataArea.getMinY(), high - low,\r\n                        dataArea.getHeight());",
      "info" : "ExpressionStatement[47305-47444]:ExpressionStatement[47305-47444]"
    }, {
      "left" : "if (orientation == PlotOrientation.VERTICAL)",
      "right" : "if (orientation == PlotOrientation.VERTICAL)",
      "info" : "IfStatement[47478-47873]:IfStatement[47478-47873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47523-47873]:Block[47523-47873]"
    }, {
      "left" : "low = Math.max(low, dataArea.getMinY());",
      "right" : "low = Math.max(low, dataArea.getMinY());",
      "info" : "ExpressionStatement[47602-47642]:ExpressionStatement[47602-47642]"
    }, {
      "left" : "high = Math.min(high, dataArea.getMaxY());",
      "right" : "high = Math.min(high, dataArea.getMaxY());",
      "info" : "ExpressionStatement[47660-47702]:ExpressionStatement[47660-47702]"
    }, {
      "left" : "rect = new Rectangle2D.Double(dataArea.getMinX(),\r\n                        low, dataArea.getWidth(),\r\n                        high - low);",
      "right" : "rect = new Rectangle2D.Double(dataArea.getMinX(),\r\n                        low, dataArea.getWidth(),\r\n                        high - low);",
      "info" : "ExpressionStatement[47720-47858]:ExpressionStatement[47720-47858]"
    }, {
      "left" : "Paint p = marker.getPaint();",
      "right" : "Paint p = marker.getPaint();",
      "info" : "VariableDeclarationStatement[47887-47915]:VariableDeclarationStatement[47887-47915]"
    }, {
      "left" : "if (p instanceof GradientPaint)",
      "right" : "if (p instanceof GradientPaint)",
      "info" : "IfStatement[47929-48316]:IfStatement[47929-48316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47961-48248]:Block[47961-48248]"
    }, {
      "left" : "GradientPaint gp = (GradientPaint) p;",
      "right" : "GradientPaint gp = (GradientPaint) p;",
      "info" : "VariableDeclarationStatement[47980-48017]:VariableDeclarationStatement[47980-48017]"
    }, {
      "left" : "GradientPaintTransformer t = im.getGradientPaintTransformer();",
      "right" : "GradientPaintTransformer t = im.getGradientPaintTransformer();",
      "info" : "VariableDeclarationStatement[48035-48097]:VariableDeclarationStatement[48035-48097]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[48115-48199]:IfStatement[48115-48199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48130-48199]:Block[48130-48199]"
    }, {
      "left" : "gp = t.transform(gp, rect);",
      "right" : "gp = t.transform(gp, rect);",
      "info" : "ExpressionStatement[48153-48180]:ExpressionStatement[48153-48180]"
    }, {
      "left" : "g2.setPaint(gp);",
      "right" : "g2.setPaint(gp);",
      "info" : "ExpressionStatement[48217-48233]:ExpressionStatement[48217-48233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48267-48316]:Block[48267-48316]"
    }, {
      "left" : "g2.setPaint(p);",
      "right" : "g2.setPaint(p);",
      "info" : "ExpressionStatement[48286-48301]:ExpressionStatement[48286-48301]"
    }, {
      "left" : "g2.fill(rect);",
      "right" : "g2.fill(rect);",
      "info" : "ExpressionStatement[48330-48344]:ExpressionStatement[48330-48344]"
    }, {
      "left" : "if (im.getOutlinePaint() != null && im.getOutlineStroke() != null)",
      "right" : "if (im.getOutlinePaint() != null && im.getOutlineStroke() != null)",
      "info" : "IfStatement[48413-49904]:IfStatement[48413-49904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48480-49904]:Block[48480-49904]"
    }, {
      "left" : "if (orientation == PlotOrientation.VERTICAL)",
      "right" : "if (orientation == PlotOrientation.VERTICAL)",
      "info" : "IfStatement[48499-49889]:IfStatement[48499-49889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48544-49190]:Block[48544-49190]"
    }, {
      "left" : "Line2D line = new Line2D.Double();",
      "right" : "Line2D line = new Line2D.Double();",
      "info" : "VariableDeclarationStatement[48567-48601]:VariableDeclarationStatement[48567-48601]"
    }, {
      "left" : "double x0 = dataArea.getMinX();",
      "right" : "double x0 = dataArea.getMinX();",
      "info" : "VariableDeclarationStatement[48623-48654]:VariableDeclarationStatement[48623-48654]"
    }, {
      "left" : "double x1 = dataArea.getMaxX();",
      "right" : "double x1 = dataArea.getMaxX();",
      "info" : "VariableDeclarationStatement[48676-48707]:VariableDeclarationStatement[48676-48707]"
    }, {
      "left" : "g2.setPaint(im.getOutlinePaint());",
      "right" : "g2.setPaint(im.getOutlinePaint());",
      "info" : "ExpressionStatement[48729-48763]:ExpressionStatement[48729-48763]"
    }, {
      "left" : "g2.setStroke(im.getOutlineStroke());",
      "right" : "g2.setStroke(im.getOutlineStroke());",
      "info" : "ExpressionStatement[48785-48821]:ExpressionStatement[48785-48821]"
    }, {
      "left" : "if (range.contains(start))",
      "right" : "if (range.contains(start))",
      "info" : "IfStatement[48843-48999]:IfStatement[48843-48999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48870-48999]:Block[48870-48999]"
    }, {
      "left" : "line.setLine(x0, start2d, x1, start2d);",
      "right" : "line.setLine(x0, start2d, x1, start2d);",
      "info" : "ExpressionStatement[48897-48936]:ExpressionStatement[48897-48936]"
    }, {
      "left" : "g2.draw(line);",
      "right" : "g2.draw(line);",
      "info" : "ExpressionStatement[48962-48976]:ExpressionStatement[48962-48976]"
    }, {
      "left" : "if (range.contains(end))",
      "right" : "if (range.contains(end))",
      "info" : "IfStatement[49021-49171]:IfStatement[49021-49171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49046-49171]:Block[49046-49171]"
    }, {
      "left" : "line.setLine(x0, end2d, x1, end2d);",
      "right" : "line.setLine(x0, end2d, x1, end2d);",
      "info" : "ExpressionStatement[49073-49108]:ExpressionStatement[49073-49108]"
    }, {
      "left" : "g2.draw(line);",
      "right" : "g2.draw(line);",
      "info" : "ExpressionStatement[49134-49148]:ExpressionStatement[49134-49148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49213-49889]:Block[49213-49889]"
    }, {
      "left" : "Line2D line = new Line2D.Double();",
      "right" : "Line2D line = new Line2D.Double();",
      "info" : "VariableDeclarationStatement[49266-49300]:VariableDeclarationStatement[49266-49300]"
    }, {
      "left" : "double y0 = dataArea.getMinY();",
      "right" : "double y0 = dataArea.getMinY();",
      "info" : "VariableDeclarationStatement[49322-49353]:VariableDeclarationStatement[49322-49353]"
    }, {
      "left" : "double y1 = dataArea.getMaxY();",
      "right" : "double y1 = dataArea.getMaxY();",
      "info" : "VariableDeclarationStatement[49375-49406]:VariableDeclarationStatement[49375-49406]"
    }, {
      "left" : "g2.setPaint(im.getOutlinePaint());",
      "right" : "g2.setPaint(im.getOutlinePaint());",
      "info" : "ExpressionStatement[49428-49462]:ExpressionStatement[49428-49462]"
    }, {
      "left" : "g2.setStroke(im.getOutlineStroke());",
      "right" : "g2.setStroke(im.getOutlineStroke());",
      "info" : "ExpressionStatement[49484-49520]:ExpressionStatement[49484-49520]"
    }, {
      "left" : "if (range.contains(start))",
      "right" : "if (range.contains(start))",
      "info" : "IfStatement[49542-49698]:IfStatement[49542-49698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49569-49698]:Block[49569-49698]"
    }, {
      "left" : "line.setLine(start2d, y0, start2d, y1);",
      "right" : "line.setLine(start2d, y0, start2d, y1);",
      "info" : "ExpressionStatement[49596-49635]:ExpressionStatement[49596-49635]"
    }, {
      "left" : "g2.draw(line);",
      "right" : "g2.draw(line);",
      "info" : "ExpressionStatement[49661-49675]:ExpressionStatement[49661-49675]"
    }, {
      "left" : "if (range.contains(end))",
      "right" : "if (range.contains(end))",
      "info" : "IfStatement[49720-49870]:IfStatement[49720-49870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49745-49870]:Block[49745-49870]"
    }, {
      "left" : "line.setLine(end2d, y0, end2d, y1);",
      "right" : "line.setLine(end2d, y0, end2d, y1);",
      "info" : "ExpressionStatement[49772-49807]:ExpressionStatement[49772-49807]"
    }, {
      "left" : "g2.draw(line);",
      "right" : "g2.draw(line);",
      "info" : "ExpressionStatement[49833-49847]:ExpressionStatement[49833-49847]"
    }, {
      "left" : "String label = marker.getLabel();",
      "right" : "String label = marker.getLabel();",
      "info" : "VariableDeclarationStatement[49920-49953]:VariableDeclarationStatement[49920-49953]"
    }, {
      "left" : "RectangleAnchor anchor = marker.getLabelAnchor();",
      "right" : "RectangleAnchor anchor = marker.getLabelAnchor();",
      "info" : "VariableDeclarationStatement[49967-50016]:VariableDeclarationStatement[49967-50016]"
    }, {
      "left" : "if (label != null)",
      "right" : "if (label != null)",
      "info" : "IfStatement[50030-50659]:IfStatement[50030-50659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50049-50659]:Block[50049-50659]"
    }, {
      "left" : "Font labelFont = marker.getLabelFont();",
      "right" : "Font labelFont = marker.getLabelFont();",
      "info" : "VariableDeclarationStatement[50068-50107]:VariableDeclarationStatement[50068-50107]"
    }, {
      "left" : "g2.setFont(labelFont);",
      "right" : "g2.setFont(labelFont);",
      "info" : "ExpressionStatement[50125-50147]:ExpressionStatement[50125-50147]"
    }, {
      "left" : "g2.setPaint(marker.getLabelPaint());",
      "right" : "g2.setPaint(marker.getLabelPaint());",
      "info" : "ExpressionStatement[50165-50201]:ExpressionStatement[50165-50201]"
    }, {
      "left" : "Point2D coordinates = calculateRangeMarkerTextAnchorPoint(\r\n                        g2, orientation, dataArea, rect,\r\n                        marker.getLabelOffset(), marker.getLabelOffsetType(),\r\n                        anchor);",
      "right" : "Point2D coordinates = calculateRangeMarkerTextAnchorPoint(\r\n                        g2, orientation, dataArea, rect,\r\n                        marker.getLabelOffset(), marker.getLabelOffsetType(),\r\n                        anchor);",
      "info" : "VariableDeclarationStatement[50219-50448]:VariableDeclarationStatement[50219-50448]"
    }, {
      "left" : "TextUtilities.drawAlignedString(label, g2,\r\n                        (float) coordinates.getX(), (float) coordinates.getY(),\r\n                        marker.getLabelTextAnchor());",
      "right" : "TextUtilities.drawAlignedString(label, g2,\r\n                        (float) coordinates.getX(), (float) coordinates.getY(),\r\n                        marker.getLabelTextAnchor());",
      "info" : "ExpressionStatement[50466-50644]:ExpressionStatement[50466-50644]"
    }, {
      "left" : "g2.setComposite(savedComposite);",
      "right" : "g2.setComposite(savedComposite);",
      "info" : "ExpressionStatement[50673-50705]:ExpressionStatement[50673-50705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51741-52289]:Block[51741-52289]"
    }, {
      "left" : "Rectangle2D anchorRect = null;",
      "right" : "Rectangle2D anchorRect = null;",
      "info" : "VariableDeclarationStatement[51754-51784]:VariableDeclarationStatement[51754-51784]"
    }, {
      "left" : "if (orientation == PlotOrientation.HORIZONTAL)",
      "right" : "if (orientation == PlotOrientation.HORIZONTAL)",
      "info" : "IfStatement[51794-52215]:IfStatement[51794-52215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51841-51998]:Block[51841-51998]"
    }, {
      "left" : "anchorRect = markerOffset.createAdjustedRectangle(markerArea,\r\n                    LengthAdjustmentType.CONTRACT, labelOffsetType);",
      "right" : "anchorRect = markerOffset.createAdjustedRectangle(markerArea,\r\n                    LengthAdjustmentType.CONTRACT, labelOffsetType);",
      "info" : "ExpressionStatement[51856-51987]:ExpressionStatement[51856-51987]"
    }, {
      "left" : "if (orientation == PlotOrientation.VERTICAL)",
      "right" : "if (orientation == PlotOrientation.VERTICAL)",
      "info" : "IfStatement[52013-52215]:IfStatement[52013-52215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52058-52215]:Block[52058-52215]"
    }, {
      "left" : "anchorRect = markerOffset.createAdjustedRectangle(markerArea,\r\n                    labelOffsetType, LengthAdjustmentType.CONTRACT);",
      "right" : "anchorRect = markerOffset.createAdjustedRectangle(markerArea,\r\n                    labelOffsetType, LengthAdjustmentType.CONTRACT);",
      "info" : "ExpressionStatement[52073-52204]:ExpressionStatement[52073-52204]"
    }, {
      "left" : "return RectangleAnchor.coordinates(anchorRect, anchor);",
      "right" : "return RectangleAnchor.coordinates(anchorRect, anchor);",
      "info" : "ReturnStatement[52225-52280]:ReturnStatement[52225-52280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53272-53820]:Block[53272-53820]"
    }, {
      "left" : "Rectangle2D anchorRect = null;",
      "right" : "Rectangle2D anchorRect = null;",
      "info" : "VariableDeclarationStatement[53285-53315]:VariableDeclarationStatement[53285-53315]"
    }, {
      "left" : "if (orientation == PlotOrientation.HORIZONTAL)",
      "right" : "if (orientation == PlotOrientation.HORIZONTAL)",
      "info" : "IfStatement[53325-53746]:IfStatement[53325-53746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53372-53529]:Block[53372-53529]"
    }, {
      "left" : "anchorRect = markerOffset.createAdjustedRectangle(markerArea,\r\n                    labelOffsetType, LengthAdjustmentType.CONTRACT);",
      "right" : "anchorRect = markerOffset.createAdjustedRectangle(markerArea,\r\n                    labelOffsetType, LengthAdjustmentType.CONTRACT);",
      "info" : "ExpressionStatement[53387-53518]:ExpressionStatement[53387-53518]"
    }, {
      "left" : "if (orientation == PlotOrientation.VERTICAL)",
      "right" : "if (orientation == PlotOrientation.VERTICAL)",
      "info" : "IfStatement[53544-53746]:IfStatement[53544-53746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53589-53746]:Block[53589-53746]"
    }, {
      "left" : "anchorRect = markerOffset.createAdjustedRectangle(markerArea,\r\n                    LengthAdjustmentType.CONTRACT, labelOffsetType);",
      "right" : "anchorRect = markerOffset.createAdjustedRectangle(markerArea,\r\n                    LengthAdjustmentType.CONTRACT, labelOffsetType);",
      "info" : "ExpressionStatement[53604-53735]:ExpressionStatement[53604-53735]"
    }, {
      "left" : "return RectangleAnchor.coordinates(anchorRect, anchor);",
      "right" : "return RectangleAnchor.coordinates(anchorRect, anchor);",
      "info" : "ReturnStatement[53756-53811]:ReturnStatement[53756-53811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54361-56050]:Block[54361-56050]"
    }, {
      "left" : "CategoryPlot p = getPlot();",
      "right" : "CategoryPlot p = getPlot();",
      "info" : "VariableDeclarationStatement[54374-54401]:VariableDeclarationStatement[54374-54401]"
    }, {
      "left" : "if (p == null)",
      "right" : "if (p == null)",
      "info" : "IfStatement[54411-54464]:IfStatement[54411-54464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54426-54464]:Block[54426-54464]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[54441-54453]:ReturnStatement[54441-54453]"
    }, {
      "left" : "if (!isSeriesVisible(series) || !isSeriesVisibleInLegend(series))",
      "right" : "if (!isSeriesVisible(series) || !isSeriesVisibleInLegend(series))",
      "info" : "IfStatement[54538-54642]:IfStatement[54538-54642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54604-54642]:Block[54604-54642]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[54619-54631]:ReturnStatement[54619-54631]"
    }, {
      "left" : "CategoryDataset dataset = p.getDataset(datasetIndex);",
      "right" : "CategoryDataset dataset = p.getDataset(datasetIndex);",
      "info" : "VariableDeclarationStatement[54654-54707]:VariableDeclarationStatement[54654-54707]"
    }, {
      "left" : "String label = this.legendItemLabelGenerator.generateLabel(dataset,\r\n                series);",
      "right" : "String label = this.legendItemLabelGenerator.generateLabel(dataset,\r\n                series);",
      "info" : "VariableDeclarationStatement[54717-54810]:VariableDeclarationStatement[54717-54810]"
    }, {
      "left" : "String description = label;",
      "right" : "String description = label;",
      "info" : "VariableDeclarationStatement[54820-54847]:VariableDeclarationStatement[54820-54847]"
    }, {
      "left" : "String toolTipText = null;",
      "right" : "String toolTipText = null;",
      "info" : "VariableDeclarationStatement[54857-54883]:VariableDeclarationStatement[54857-54883]"
    }, {
      "left" : "if (this.legendItemToolTipGenerator != null)",
      "right" : "if (this.legendItemToolTipGenerator != null)",
      "info" : "IfStatement[54893-55063]:IfStatement[54893-55063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54938-55063]:Block[54938-55063]"
    }, {
      "left" : "toolTipText = this.legendItemToolTipGenerator.generateLabel(\r\n                    dataset, series);",
      "right" : "toolTipText = this.legendItemToolTipGenerator.generateLabel(\r\n                    dataset, series);",
      "info" : "ExpressionStatement[54953-55052]:ExpressionStatement[54953-55052]"
    }, {
      "left" : "String urlText = null;",
      "right" : "String urlText = null;",
      "info" : "VariableDeclarationStatement[55073-55095]:VariableDeclarationStatement[55073-55095]"
    }, {
      "left" : "if (this.legendItemURLGenerator != null)",
      "right" : "if (this.legendItemURLGenerator != null)",
      "info" : "IfStatement[55105-55262]:IfStatement[55105-55262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55146-55262]:Block[55146-55262]"
    }, {
      "left" : "urlText = this.legendItemURLGenerator.generateLabel(dataset,\r\n                    series);",
      "right" : "urlText = this.legendItemURLGenerator.generateLabel(dataset,\r\n                    series);",
      "info" : "ExpressionStatement[55161-55251]:ExpressionStatement[55161-55251]"
    }, {
      "left" : "Shape shape = lookupLegendShape(series);",
      "right" : "Shape shape = lookupLegendShape(series);",
      "info" : "VariableDeclarationStatement[55272-55312]:VariableDeclarationStatement[55272-55312]"
    }, {
      "left" : "Paint paint = lookupSeriesPaint(series);",
      "right" : "Paint paint = lookupSeriesPaint(series);",
      "info" : "VariableDeclarationStatement[55322-55362]:VariableDeclarationStatement[55322-55362]"
    }, {
      "left" : "Paint outlinePaint = lookupSeriesOutlinePaint(series);",
      "right" : "Paint outlinePaint = lookupSeriesOutlinePaint(series);",
      "info" : "VariableDeclarationStatement[55372-55426]:VariableDeclarationStatement[55372-55426]"
    }, {
      "left" : "Stroke outlineStroke = lookupSeriesOutlineStroke(series);",
      "right" : "Stroke outlineStroke = lookupSeriesOutlineStroke(series);",
      "info" : "VariableDeclarationStatement[55436-55493]:VariableDeclarationStatement[55436-55493]"
    }, {
      "left" : "LegendItem item = new LegendItem(label, description, toolTipText,\r\n                urlText, shape, paint, outlineStroke, outlinePaint);",
      "right" : "LegendItem item = new LegendItem(label, description, toolTipText,\r\n                urlText, shape, paint, outlineStroke, outlinePaint);",
      "info" : "VariableDeclarationStatement[55505-55640]:VariableDeclarationStatement[55505-55640]"
    }, {
      "left" : "item.setLabelFont(lookupLegendTextFont(series));",
      "right" : "item.setLabelFont(lookupLegendTextFont(series));",
      "info" : "ExpressionStatement[55650-55698]:ExpressionStatement[55650-55698]"
    }, {
      "left" : "Paint labelPaint = lookupLegendTextPaint(series);",
      "right" : "Paint labelPaint = lookupLegendTextPaint(series);",
      "info" : "VariableDeclarationStatement[55708-55757]:VariableDeclarationStatement[55708-55757]"
    }, {
      "left" : "if (labelPaint != null)",
      "right" : "if (labelPaint != null)",
      "info" : "IfStatement[55767-55848]:IfStatement[55767-55848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55791-55848]:Block[55791-55848]"
    }, {
      "left" : "item.setLabelPaint(labelPaint);",
      "right" : "item.setLabelPaint(labelPaint);",
      "info" : "ExpressionStatement[55806-55837]:ExpressionStatement[55806-55837]"
    }, {
      "left" : "item.setSeriesKey(dataset.getRowKey(series));",
      "right" : "item.setSeriesKey(dataset.getRowKey(series));",
      "info" : "ExpressionStatement[55858-55903]:ExpressionStatement[55858-55903]"
    }, {
      "left" : "item.setSeriesIndex(series);",
      "right" : "item.setSeriesIndex(series);",
      "info" : "ExpressionStatement[55913-55941]:ExpressionStatement[55913-55941]"
    }, {
      "left" : "item.setDataset(dataset);",
      "right" : "item.setDataset(dataset);",
      "info" : "ExpressionStatement[55951-55976]:ExpressionStatement[55951-55976]"
    }, {
      "left" : "item.setDatasetIndex(datasetIndex);",
      "right" : "item.setDatasetIndex(datasetIndex);",
      "info" : "ExpressionStatement[55986-56021]:ExpressionStatement[55986-56021]"
    }, {
      "left" : "return item;",
      "right" : "return item;",
      "info" : "ReturnStatement[56031-56043]:ReturnStatement[56031-56043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56277-58219]:Block[56277-58219]"
    }, {
      "left" : "if (obj == this)",
      "right" : "if (obj == this)",
      "info" : "IfStatement[56290-56345]:IfStatement[56290-56345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56307-56345]:Block[56307-56345]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[56322-56334]:ReturnStatement[56322-56334]"
    }, {
      "left" : "if (!(obj instanceof AbstractCategoryItemRenderer))",
      "right" : "if (!(obj instanceof AbstractCategoryItemRenderer))",
      "info" : "IfStatement[56355-56446]:IfStatement[56355-56446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56407-56446]:Block[56407-56446]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[56422-56435]:ReturnStatement[56422-56435]"
    }, {
      "left" : "AbstractCategoryItemRenderer that = (AbstractCategoryItemRenderer) obj;",
      "right" : "AbstractCategoryItemRenderer that = (AbstractCategoryItemRenderer) obj;",
      "info" : "VariableDeclarationStatement[56456-56527]:VariableDeclarationStatement[56456-56527]"
    }, {
      "left" : "if (!ObjectUtilities.equal(this.itemLabelGeneratorList,\r\n                that.itemLabelGeneratorList))",
      "right" : "if (!ObjectUtilities.equal(this.itemLabelGeneratorList,\r\n                that.itemLabelGeneratorList))",
      "info" : "IfStatement[56539-56681]:IfStatement[56539-56681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56642-56681]:Block[56642-56681]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[56657-56670]:ReturnStatement[56657-56670]"
    }, {
      "left" : "if (!ObjectUtilities.equal(this.baseItemLabelGenerator,\r\n                that.baseItemLabelGenerator))",
      "right" : "if (!ObjectUtilities.equal(this.baseItemLabelGenerator,\r\n                that.baseItemLabelGenerator))",
      "info" : "IfStatement[56691-56833]:IfStatement[56691-56833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56794-56833]:Block[56794-56833]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[56809-56822]:ReturnStatement[56809-56822]"
    }, {
      "left" : "if (!ObjectUtilities.equal(this.toolTipGeneratorList,\r\n                that.toolTipGeneratorList))",
      "right" : "if (!ObjectUtilities.equal(this.toolTipGeneratorList,\r\n                that.toolTipGeneratorList))",
      "info" : "IfStatement[56843-56981]:IfStatement[56843-56981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56942-56981]:Block[56942-56981]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[56957-56970]:ReturnStatement[56957-56970]"
    }, {
      "left" : "if (!ObjectUtilities.equal(this.baseToolTipGenerator,\r\n                that.baseToolTipGenerator))",
      "right" : "if (!ObjectUtilities.equal(this.baseToolTipGenerator,\r\n                that.baseToolTipGenerator))",
      "info" : "IfStatement[56991-57129]:IfStatement[56991-57129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57090-57129]:Block[57090-57129]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[57105-57118]:ReturnStatement[57105-57118]"
    }, {
      "left" : "if (!ObjectUtilities.equal(this.urlGeneratorList,\r\n                that.urlGeneratorList))",
      "right" : "if (!ObjectUtilities.equal(this.urlGeneratorList,\r\n                that.urlGeneratorList))",
      "info" : "IfStatement[57139-57269]:IfStatement[57139-57269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57230-57269]:Block[57230-57269]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[57245-57258]:ReturnStatement[57245-57258]"
    }, {
      "left" : "if (!ObjectUtilities.equal(this.baseURLGenerator,\r\n                that.baseURLGenerator))",
      "right" : "if (!ObjectUtilities.equal(this.baseURLGenerator,\r\n                that.baseURLGenerator))",
      "info" : "IfStatement[57279-57409]:IfStatement[57279-57409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57370-57409]:Block[57370-57409]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[57385-57398]:ReturnStatement[57385-57398]"
    }, {
      "left" : "if (!ObjectUtilities.equal(this.legendItemLabelGenerator,\r\n                that.legendItemLabelGenerator))",
      "right" : "if (!ObjectUtilities.equal(this.legendItemLabelGenerator,\r\n                that.legendItemLabelGenerator))",
      "info" : "IfStatement[57419-57565]:IfStatement[57419-57565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57526-57565]:Block[57526-57565]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[57541-57554]:ReturnStatement[57541-57554]"
    }, {
      "left" : "if (!ObjectUtilities.equal(this.legendItemToolTipGenerator,\r\n                that.legendItemToolTipGenerator))",
      "right" : "if (!ObjectUtilities.equal(this.legendItemToolTipGenerator,\r\n                that.legendItemToolTipGenerator))",
      "info" : "IfStatement[57575-57725]:IfStatement[57575-57725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57686-57725]:Block[57686-57725]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[57701-57714]:ReturnStatement[57701-57714]"
    }, {
      "left" : "if (!ObjectUtilities.equal(this.legendItemURLGenerator,\r\n                that.legendItemURLGenerator))",
      "right" : "if (!ObjectUtilities.equal(this.legendItemURLGenerator,\r\n                that.legendItemURLGenerator))",
      "info" : "IfStatement[57735-57877]:IfStatement[57735-57877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57838-57877]:Block[57838-57877]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[57853-57866]:ReturnStatement[57853-57866]"
    }, {
      "left" : "if (!ObjectUtilities.equal(this.backgroundAnnotations,\r\n                that.backgroundAnnotations))",
      "right" : "if (!ObjectUtilities.equal(this.backgroundAnnotations,\r\n                that.backgroundAnnotations))",
      "info" : "IfStatement[57887-58027]:IfStatement[57887-58027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57988-58027]:Block[57988-58027]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[58003-58016]:ReturnStatement[58003-58016]"
    }, {
      "left" : "if (!ObjectUtilities.equal(this.foregroundAnnotations,\r\n                that.foregroundAnnotations))",
      "right" : "if (!ObjectUtilities.equal(this.foregroundAnnotations,\r\n                that.foregroundAnnotations))",
      "info" : "IfStatement[58037-58177]:IfStatement[58037-58177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58138-58177]:Block[58138-58177]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[58153-58166]:ReturnStatement[58153-58166]"
    }, {
      "left" : "return super.equals(obj);",
      "right" : "return super.equals(obj);",
      "info" : "ReturnStatement[58187-58212]:ReturnStatement[58187-58212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58352-58424]:Block[58352-58424]"
    }, {
      "left" : "int result = super.hashCode();",
      "right" : "int result = super.hashCode();",
      "info" : "VariableDeclarationStatement[58363-58393]:VariableDeclarationStatement[58363-58393]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[58403-58417]:ReturnStatement[58403-58417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58621-58816]:Block[58621-58816]"
    }, {
      "left" : "DrawingSupplier result = null;",
      "right" : "DrawingSupplier result = null;",
      "info" : "VariableDeclarationStatement[58632-58662]:VariableDeclarationStatement[58632-58662]"
    }, {
      "left" : "CategoryPlot cp = getPlot();",
      "right" : "CategoryPlot cp = getPlot();",
      "info" : "VariableDeclarationStatement[58672-58700]:VariableDeclarationStatement[58672-58700]"
    }, {
      "left" : "if (cp != null)",
      "right" : "if (cp != null)",
      "info" : "IfStatement[58710-58785]:IfStatement[58710-58785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58726-58785]:Block[58726-58785]"
    }, {
      "left" : "result = cp.getDrawingSupplier();",
      "right" : "result = cp.getDrawingSupplier();",
      "info" : "ExpressionStatement[58741-58774]:ExpressionStatement[58741-58774]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[58795-58809]:ReturnStatement[58795-58809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59886-60494]:Block[59886-60494]"
    }, {
      "left" : "if (orientation == null)",
      "right" : "if (orientation == null)",
      "info" : "IfStatement[59899-60017]:IfStatement[59899-60017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59924-60017]:Block[59924-60017]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'orientation' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'orientation' argument.\");",
      "info" : "ThrowStatement[59939-60006]:ThrowStatement[59939-60006]"
    }, {
      "left" : "if (crosshairState != null)",
      "right" : "if (crosshairState != null)",
      "info" : "IfStatement[60029-60487]:IfStatement[60029-60487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60057-60487]:Block[60057-60487]"
    }, {
      "left" : "if (this.plot.isRangeCrosshairLockedOnData())",
      "right" : "if (this.plot.isRangeCrosshairLockedOnData())",
      "info" : "IfStatement[60072-60476]:IfStatement[60072-60476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60118-60312]:Block[60118-60312]"
    }, {
      "left" : "crosshairState.updateCrosshairPoint(rowKey, columnKey, value,\r\n                        datasetIndex, transX, transY, orientation);",
      "right" : "crosshairState.updateCrosshairPoint(rowKey, columnKey, value,\r\n                        datasetIndex, transX, transY, orientation);",
      "info" : "ExpressionStatement[60167-60297]:ExpressionStatement[60167-60297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60331-60476]:Block[60331-60476]"
    }, {
      "left" : "crosshairState.updateCrosshairX(rowKey, columnKey,\r\n                        datasetIndex, transX, orientation);",
      "right" : "crosshairState.updateCrosshairX(rowKey, columnKey,\r\n                        datasetIndex, transX, orientation);",
      "info" : "ExpressionStatement[60350-60461]:ExpressionStatement[60350-60461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61246-62375]:Block[61246-62375]"
    }, {
      "left" : "CategoryItemLabelGenerator generator = getItemLabelGenerator(row,\r\n                column, selected);",
      "right" : "CategoryItemLabelGenerator generator = getItemLabelGenerator(row,\r\n                column, selected);",
      "info" : "VariableDeclarationStatement[61259-61360]:VariableDeclarationStatement[61259-61360]"
    }, {
      "left" : "if (generator != null)",
      "right" : "if (generator != null)",
      "info" : "IfStatement[61370-62366]:IfStatement[61370-62366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61393-62366]:Block[61393-62366]"
    }, {
      "left" : "Font labelFont = getItemLabelFont(row, column, selected);",
      "right" : "Font labelFont = getItemLabelFont(row, column, selected);",
      "info" : "VariableDeclarationStatement[61408-61465]:VariableDeclarationStatement[61408-61465]"
    }, {
      "left" : "Paint paint = getItemLabelPaint(row, column, selected);",
      "right" : "Paint paint = getItemLabelPaint(row, column, selected);",
      "info" : "VariableDeclarationStatement[61479-61534]:VariableDeclarationStatement[61479-61534]"
    }, {
      "left" : "g2.setFont(labelFont);",
      "right" : "g2.setFont(labelFont);",
      "info" : "ExpressionStatement[61548-61570]:ExpressionStatement[61548-61570]"
    }, {
      "left" : "g2.setPaint(paint);",
      "right" : "g2.setPaint(paint);",
      "info" : "ExpressionStatement[61584-61603]:ExpressionStatement[61584-61603]"
    }, {
      "left" : "String label = generator.generateLabel(dataset, row, column);",
      "right" : "String label = generator.generateLabel(dataset, row, column);",
      "info" : "VariableDeclarationStatement[61617-61678]:VariableDeclarationStatement[61617-61678]"
    }, {
      "left" : "ItemLabelPosition position = null;",
      "right" : "ItemLabelPosition position = null;",
      "info" : "VariableDeclarationStatement[61692-61726]:VariableDeclarationStatement[61692-61726]"
    }, {
      "left" : "if (!negative)",
      "right" : "if (!negative)",
      "info" : "IfStatement[61740-61968]:IfStatement[61740-61968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61755-61852]:Block[61755-61852]"
    }, {
      "left" : "position = getPositiveItemLabelPosition(row, column, selected);",
      "right" : "position = getPositiveItemLabelPosition(row, column, selected);",
      "info" : "ExpressionStatement[61774-61837]:ExpressionStatement[61774-61837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61871-61968]:Block[61871-61968]"
    }, {
      "left" : "position = getNegativeItemLabelPosition(row, column, selected);",
      "right" : "position = getNegativeItemLabelPosition(row, column, selected);",
      "info" : "ExpressionStatement[61890-61953]:ExpressionStatement[61890-61953]"
    }, {
      "left" : "Point2D anchorPoint = calculateLabelAnchorPoint(\r\n                    position.getItemLabelAnchor(), x, y, orientation);",
      "right" : "Point2D anchorPoint = calculateLabelAnchorPoint(\r\n                    position.getItemLabelAnchor(), x, y, orientation);",
      "info" : "VariableDeclarationStatement[61982-62102]:VariableDeclarationStatement[61982-62102]"
    }, {
      "left" : "TextUtilities.drawRotatedString(label, g2,\r\n                    (float) anchorPoint.getX(), (float) anchorPoint.getY(),\r\n                    position.getTextAnchor(),\r\n                    position.getAngle(), position.getRotationAnchor());",
      "right" : "TextUtilities.drawRotatedString(label, g2,\r\n                    (float) anchorPoint.getX(), (float) anchorPoint.getY(),\r\n                    position.getTextAnchor(),\r\n                    position.getAngle(), position.getRotationAnchor());",
      "info" : "ExpressionStatement[62116-62355]:ExpressionStatement[62116-62355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62916-63572]:Block[62916-63572]"
    }, {
      "left" : "Iterator iterator = null;",
      "right" : "Iterator iterator = null;",
      "info" : "VariableDeclarationStatement[62929-62954]:VariableDeclarationStatement[62929-62954]"
    }, {
      "left" : "if (layer.equals(Layer.FOREGROUND))",
      "right" : "if (layer.equals(Layer.FOREGROUND))",
      "info" : "IfStatement[62964-63323]:IfStatement[62964-63323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63000-63075]:Block[63000-63075]"
    }, {
      "left" : "iterator = this.foregroundAnnotations.iterator();",
      "right" : "iterator = this.foregroundAnnotations.iterator();",
      "info" : "ExpressionStatement[63015-63064]:ExpressionStatement[63015-63064]"
    }, {
      "left" : "if (layer.equals(Layer.BACKGROUND))",
      "right" : "if (layer.equals(Layer.BACKGROUND))",
      "info" : "IfStatement[63090-63323]:IfStatement[63090-63323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63126-63201]:Block[63126-63201]"
    }, {
      "left" : "iterator = this.backgroundAnnotations.iterator();",
      "right" : "iterator = this.backgroundAnnotations.iterator();",
      "info" : "ExpressionStatement[63141-63190]:ExpressionStatement[63141-63190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63216-63323]:Block[63216-63323]"
    }, {
      "left" : "throw new RuntimeException(\"Unknown layer.\");",
      "right" : "throw new RuntimeException(\"Unknown layer.\");",
      "info" : "ThrowStatement[63267-63312]:ThrowStatement[63267-63312]"
    }, {
      "left" : "while (iterator.hasNext())",
      "right" : "while (iterator.hasNext())",
      "info" : "WhileStatement[63333-63563]:WhileStatement[63333-63563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63360-63563]:Block[63360-63563]"
    }, {
      "left" : "CategoryAnnotation annotation = (CategoryAnnotation) iterator.next();",
      "right" : "CategoryAnnotation annotation = (CategoryAnnotation) iterator.next();",
      "info" : "VariableDeclarationStatement[63375-63444]:VariableDeclarationStatement[63375-63444]"
    }, {
      "left" : "annotation.draw(g2, this.plot, dataArea, domainAxis, rangeAxis,\r\n                    0, info);",
      "right" : "annotation.draw(g2, this.plot, dataArea, domainAxis, rangeAxis,\r\n                    0, info);",
      "info" : "ExpressionStatement[63458-63552]:ExpressionStatement[63458-63552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64011-66876]:Block[64011-66876]"
    }, {
      "left" : "AbstractCategoryItemRenderer clone\r\n                = (AbstractCategoryItemRenderer) super.clone();",
      "right" : "AbstractCategoryItemRenderer clone\r\n                = (AbstractCategoryItemRenderer) super.clone();",
      "info" : "VariableDeclarationStatement[64024-64123]:VariableDeclarationStatement[64024-64123]"
    }, {
      "left" : "if (this.itemLabelGeneratorList != null)",
      "right" : "if (this.itemLabelGeneratorList != null)",
      "info" : "IfStatement[64137-64305]:IfStatement[64137-64305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64178-64305]:Block[64178-64305]"
    }, {
      "left" : "clone.itemLabelGeneratorList\r\n                    = (ObjectList) this.itemLabelGeneratorList.clone();",
      "right" : "clone.itemLabelGeneratorList\r\n                    = (ObjectList) this.itemLabelGeneratorList.clone();",
      "info" : "ExpressionStatement[64193-64294]:ExpressionStatement[64193-64294]"
    }, {
      "left" : "if (this.baseItemLabelGenerator != null)",
      "right" : "if (this.baseItemLabelGenerator != null)",
      "info" : "IfStatement[64317-64837]:IfStatement[64317-64837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64358-64837]:Block[64358-64837]"
    }, {
      "left" : "if (this.baseItemLabelGenerator instanceof PublicCloneable)",
      "right" : "if (this.baseItemLabelGenerator instanceof PublicCloneable)",
      "info" : "IfStatement[64373-64826]:IfStatement[64373-64826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64433-64673]:Block[64433-64673]"
    }, {
      "left" : "PublicCloneable pc\r\n                        = (PublicCloneable) this.baseItemLabelGenerator;",
      "right" : "PublicCloneable pc\r\n                        = (PublicCloneable) this.baseItemLabelGenerator;",
      "info" : "VariableDeclarationStatement[64452-64544]:VariableDeclarationStatement[64452-64544]"
    }, {
      "left" : "clone.baseItemLabelGenerator\r\n                        = (CategoryItemLabelGenerator) pc.clone();",
      "right" : "clone.baseItemLabelGenerator\r\n                        = (CategoryItemLabelGenerator) pc.clone();",
      "info" : "ExpressionStatement[64562-64658]:ExpressionStatement[64562-64658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64692-64826]:Block[64692-64826]"
    }, {
      "left" : "throw new CloneNotSupportedException(\r\n                        \"ItemLabelGenerator not cloneable.\");",
      "right" : "throw new CloneNotSupportedException(\r\n                        \"ItemLabelGenerator not cloneable.\");",
      "info" : "ThrowStatement[64711-64811]:ThrowStatement[64711-64811]"
    }, {
      "left" : "if (this.toolTipGeneratorList != null)",
      "right" : "if (this.toolTipGeneratorList != null)",
      "info" : "IfStatement[64849-65011]:IfStatement[64849-65011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64888-65011]:Block[64888-65011]"
    }, {
      "left" : "clone.toolTipGeneratorList\r\n                    = (ObjectList) this.toolTipGeneratorList.clone();",
      "right" : "clone.toolTipGeneratorList\r\n                    = (ObjectList) this.toolTipGeneratorList.clone();",
      "info" : "ExpressionStatement[64903-65000]:ExpressionStatement[64903-65000]"
    }, {
      "left" : "if (this.baseToolTipGenerator != null)",
      "right" : "if (this.baseToolTipGenerator != null)",
      "info" : "IfStatement[65023-65538]:IfStatement[65023-65538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65062-65538]:Block[65062-65538]"
    }, {
      "left" : "if (this.baseToolTipGenerator instanceof PublicCloneable)",
      "right" : "if (this.baseToolTipGenerator instanceof PublicCloneable)",
      "info" : "IfStatement[65077-65527]:IfStatement[65077-65527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65135-65369]:Block[65135-65369]"
    }, {
      "left" : "PublicCloneable pc\r\n                        = (PublicCloneable) this.baseToolTipGenerator;",
      "right" : "PublicCloneable pc\r\n                        = (PublicCloneable) this.baseToolTipGenerator;",
      "info" : "VariableDeclarationStatement[65154-65244]:VariableDeclarationStatement[65154-65244]"
    }, {
      "left" : "clone.baseToolTipGenerator\r\n                        = (CategoryToolTipGenerator) pc.clone();",
      "right" : "clone.baseToolTipGenerator\r\n                        = (CategoryToolTipGenerator) pc.clone();",
      "info" : "ExpressionStatement[65262-65354]:ExpressionStatement[65262-65354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65388-65527]:Block[65388-65527]"
    }, {
      "left" : "throw new CloneNotSupportedException(\r\n                        \"Base tool tip generator not cloneable.\");",
      "right" : "throw new CloneNotSupportedException(\r\n                        \"Base tool tip generator not cloneable.\");",
      "info" : "ThrowStatement[65407-65512]:ThrowStatement[65407-65512]"
    }, {
      "left" : "if (this.urlGeneratorList != null)",
      "right" : "if (this.urlGeneratorList != null)",
      "info" : "IfStatement[65550-65679]:IfStatement[65550-65679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65585-65679]:Block[65585-65679]"
    }, {
      "left" : "clone.urlGeneratorList = (ObjectList) this.urlGeneratorList.clone();",
      "right" : "clone.urlGeneratorList = (ObjectList) this.urlGeneratorList.clone();",
      "info" : "ExpressionStatement[65600-65668]:ExpressionStatement[65600-65668]"
    }, {
      "left" : "if (this.baseURLGenerator != null)",
      "right" : "if (this.baseURLGenerator != null)",
      "info" : "IfStatement[65691-66136]:IfStatement[65691-66136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65726-66136]:Block[65726-66136]"
    }, {
      "left" : "if (this.baseURLGenerator instanceof PublicCloneable)",
      "right" : "if (this.baseURLGenerator instanceof PublicCloneable)",
      "info" : "IfStatement[65741-66125]:IfStatement[65741-66125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65795-65967]:Block[65795-65967]"
    }, {
      "left" : "PublicCloneable pc = (PublicCloneable) this.baseURLGenerator;",
      "right" : "PublicCloneable pc = (PublicCloneable) this.baseURLGenerator;",
      "info" : "VariableDeclarationStatement[65814-65875]:VariableDeclarationStatement[65814-65875]"
    }, {
      "left" : "clone.baseURLGenerator = (CategoryURLGenerator) pc.clone();",
      "right" : "clone.baseURLGenerator = (CategoryURLGenerator) pc.clone();",
      "info" : "ExpressionStatement[65893-65952]:ExpressionStatement[65893-65952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65986-66125]:Block[65986-66125]"
    }, {
      "left" : "throw new CloneNotSupportedException(\r\n                        \"Base item URL generator not cloneable.\");",
      "right" : "throw new CloneNotSupportedException(\r\n                        \"Base item URL generator not cloneable.\");",
      "info" : "ThrowStatement[66005-66110]:ThrowStatement[66005-66110]"
    }, {
      "left" : "if (this.legendItemLabelGenerator instanceof PublicCloneable)",
      "right" : "if (this.legendItemLabelGenerator instanceof PublicCloneable)",
      "info" : "IfStatement[66148-66374]:IfStatement[66148-66374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66210-66374]:Block[66210-66374]"
    }, {
      "left" : "clone.legendItemLabelGenerator = (CategorySeriesLabelGenerator)\r\n                    ObjectUtilities.clone(this.legendItemLabelGenerator);",
      "right" : "clone.legendItemLabelGenerator = (CategorySeriesLabelGenerator)\r\n                    ObjectUtilities.clone(this.legendItemLabelGenerator);",
      "info" : "ExpressionStatement[66225-66363]:ExpressionStatement[66225-66363]"
    }, {
      "left" : "if (this.legendItemToolTipGenerator instanceof PublicCloneable)",
      "right" : "if (this.legendItemToolTipGenerator instanceof PublicCloneable)",
      "info" : "IfStatement[66384-66616]:IfStatement[66384-66616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66448-66616]:Block[66448-66616]"
    }, {
      "left" : "clone.legendItemToolTipGenerator = (CategorySeriesLabelGenerator)\r\n                    ObjectUtilities.clone(this.legendItemToolTipGenerator);",
      "right" : "clone.legendItemToolTipGenerator = (CategorySeriesLabelGenerator)\r\n                    ObjectUtilities.clone(this.legendItemToolTipGenerator);",
      "info" : "ExpressionStatement[66463-66605]:ExpressionStatement[66463-66605]"
    }, {
      "left" : "if (this.legendItemURLGenerator instanceof PublicCloneable)",
      "right" : "if (this.legendItemURLGenerator instanceof PublicCloneable)",
      "info" : "IfStatement[66626-66846]:IfStatement[66626-66846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66686-66846]:Block[66686-66846]"
    }, {
      "left" : "clone.legendItemURLGenerator = (CategorySeriesLabelGenerator)\r\n                    ObjectUtilities.clone(this.legendItemURLGenerator);",
      "right" : "clone.legendItemURLGenerator = (CategorySeriesLabelGenerator)\r\n                    ObjectUtilities.clone(this.legendItemURLGenerator);",
      "info" : "ExpressionStatement[66701-66835]:ExpressionStatement[66701-66835]"
    }, {
      "left" : "return clone;",
      "right" : "return clone;",
      "info" : "ReturnStatement[66856-66869]:ReturnStatement[66856-66869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67252-67371]:Block[67252-67371]"
    }, {
      "left" : "int datasetIndex = plot.indexOf(dataset);",
      "right" : "int datasetIndex = plot.indexOf(dataset);",
      "info" : "VariableDeclarationStatement[67263-67304]:VariableDeclarationStatement[67263-67304]"
    }, {
      "left" : "return plot.getDomainAxisForDataset(datasetIndex);",
      "right" : "return plot.getDomainAxisForDataset(datasetIndex);",
      "info" : "ReturnStatement[67314-67364]:ReturnStatement[67314-67364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67616-67787]:Block[67616-67787]"
    }, {
      "left" : "ValueAxis result = plot.getRangeAxis(index);",
      "right" : "ValueAxis result = plot.getRangeAxis(index);",
      "info" : "VariableDeclarationStatement[67627-67671]:VariableDeclarationStatement[67627-67671]"
    }, {
      "left" : "if (result == null)",
      "right" : "if (result == null)",
      "info" : "IfStatement[67681-67756]:IfStatement[67681-67756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67701-67756]:Block[67701-67756]"
    }, {
      "left" : "result = plot.getRangeAxis();",
      "right" : "result = plot.getRangeAxis();",
      "info" : "ExpressionStatement[67716-67745]:ExpressionStatement[67716-67745]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[67766-67780]:ReturnStatement[67766-67780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69790-70001]:Block[69790-70001]"
    }, {
      "left" : "if (hotspot == null)",
      "right" : "if (hotspot == null)",
      "info" : "IfStatement[69803-69913]:IfStatement[69803-69913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69824-69913]:Block[69824-69913]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'hotspot' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'hotspot' argument.\");",
      "info" : "ThrowStatement[69839-69902]:ThrowStatement[69839-69902]"
    }, {
      "left" : "addEntity(entities, hotspot, dataset, row, column, selected, 0.0, 0.0);",
      "right" : "addEntity(entities, hotspot, dataset, row, column, selected, 0.0, 0.0);",
      "info" : "ExpressionStatement[69923-69994]:ExpressionStatement[69923-69994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70916-72089]:Block[70916-72089]"
    }, {
      "left" : "if (!getItemCreateEntity(row, column, selected))",
      "right" : "if (!getItemCreateEntity(row, column, selected))",
      "info" : "IfStatement[70927-71009]:IfStatement[70927-71009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70976-71009]:Block[70976-71009]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[70991-70998]:ReturnStatement[70991-70998]"
    }, {
      "left" : "Shape s = hotspot;",
      "right" : "Shape s = hotspot;",
      "info" : "VariableDeclarationStatement[71019-71037]:VariableDeclarationStatement[71019-71037]"
    }, {
      "left" : "if (hotspot == null)",
      "right" : "if (hotspot == null)",
      "info" : "IfStatement[71047-71436]:IfStatement[71047-71436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71068-71436]:Block[71068-71436]"
    }, {
      "left" : "double r = getDefaultEntityRadius();",
      "right" : "double r = getDefaultEntityRadius();",
      "info" : "VariableDeclarationStatement[71083-71119]:VariableDeclarationStatement[71083-71119]"
    }, {
      "left" : "double w = r * 2;",
      "right" : "double w = r * 2;",
      "info" : "VariableDeclarationStatement[71133-71150]:VariableDeclarationStatement[71133-71150]"
    }, {
      "left" : "if (getPlot().getOrientation() == PlotOrientation.VERTICAL)",
      "right" : "if (getPlot().getOrientation() == PlotOrientation.VERTICAL)",
      "info" : "IfStatement[71164-71425]:IfStatement[71164-71425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71224-71315]:Block[71224-71315]"
    }, {
      "left" : "s = new Ellipse2D.Double(entityX - r, entityY - r, w, w);",
      "right" : "s = new Ellipse2D.Double(entityX - r, entityY - r, w, w);",
      "info" : "ExpressionStatement[71243-71300]:ExpressionStatement[71243-71300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71334-71425]:Block[71334-71425]"
    }, {
      "left" : "s = new Ellipse2D.Double(entityY - r, entityX - r, w, w);",
      "right" : "s = new Ellipse2D.Double(entityY - r, entityX - r, w, w);",
      "info" : "ExpressionStatement[71353-71410]:ExpressionStatement[71353-71410]"
    }, {
      "left" : "String tip = null;",
      "right" : "String tip = null;",
      "info" : "VariableDeclarationStatement[71446-71464]:VariableDeclarationStatement[71446-71464]"
    }, {
      "left" : "CategoryToolTipGenerator generator = getToolTipGenerator(row, column,\r\n                selected);",
      "right" : "CategoryToolTipGenerator generator = getToolTipGenerator(row, column,\r\n                selected);",
      "info" : "VariableDeclarationStatement[71474-71571]:VariableDeclarationStatement[71474-71571]"
    }, {
      "left" : "if (generator != null)",
      "right" : "if (generator != null)",
      "info" : "IfStatement[71581-71684]:IfStatement[71581-71684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71604-71684]:Block[71604-71684]"
    }, {
      "left" : "tip = generator.generateToolTip(dataset, row, column);",
      "right" : "tip = generator.generateToolTip(dataset, row, column);",
      "info" : "ExpressionStatement[71619-71673]:ExpressionStatement[71619-71673]"
    }, {
      "left" : "String url = null;",
      "right" : "String url = null;",
      "info" : "VariableDeclarationStatement[71694-71712]:VariableDeclarationStatement[71694-71712]"
    }, {
      "left" : "CategoryURLGenerator urlster = getURLGenerator(row, column, selected);",
      "right" : "CategoryURLGenerator urlster = getURLGenerator(row, column, selected);",
      "info" : "VariableDeclarationStatement[71722-71792]:VariableDeclarationStatement[71722-71792]"
    }, {
      "left" : "if (urlster != null)",
      "right" : "if (urlster != null)",
      "info" : "IfStatement[71802-71897]:IfStatement[71802-71897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71823-71897]:Block[71823-71897]"
    }, {
      "left" : "url = urlster.generateURL(dataset, row, column);",
      "right" : "url = urlster.generateURL(dataset, row, column);",
      "info" : "ExpressionStatement[71838-71886]:ExpressionStatement[71838-71886]"
    }, {
      "left" : "CategoryItemEntity entity = new CategoryItemEntity(s, tip, url,\r\n                dataset, dataset.getRowKey(row), dataset.getColumnKey(column));",
      "right" : "CategoryItemEntity entity = new CategoryItemEntity(s, tip, url,\r\n                dataset, dataset.getRowKey(row), dataset.getColumnKey(column));",
      "info" : "VariableDeclarationStatement[71907-72051]:VariableDeclarationStatement[71907-72051]"
    }, {
      "left" : "entities.add(entity);",
      "right" : "entities.add(entity);",
      "info" : "ExpressionStatement[72061-72082]:ExpressionStatement[72061-72082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73065-73130]:Block[73065-73130]"
    }, {
      "left" : "throw new RuntimeException(\"Not implemented.\");",
      "right" : "throw new RuntimeException(\"Not implemented.\");",
      "info" : "ThrowStatement[73076-73123]:ThrowStatement[73076-73123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73967-74577]:Block[73967-74577]"
    }, {
      "left" : "if (result == null)",
      "right" : "if (result == null)",
      "info" : "IfStatement[73978-74049]:IfStatement[73978-74049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73998-74049]:Block[73998-74049]"
    }, {
      "left" : "result = new Rectangle();",
      "right" : "result = new Rectangle();",
      "info" : "ExpressionStatement[74013-74038]:ExpressionStatement[74013-74038]"
    }, {
      "left" : "Comparable key = dataset.getColumnKey(column);",
      "right" : "Comparable key = dataset.getColumnKey(column);",
      "info" : "VariableDeclarationStatement[74059-74105]:VariableDeclarationStatement[74059-74105]"
    }, {
      "left" : "Number y = dataset.getValue(row, column);",
      "right" : "Number y = dataset.getValue(row, column);",
      "info" : "VariableDeclarationStatement[74115-74156]:VariableDeclarationStatement[74115-74156]"
    }, {
      "left" : "if (y == null)",
      "right" : "if (y == null)",
      "info" : "IfStatement[74166-74219]:IfStatement[74166-74219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74181-74219]:Block[74181-74219]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[74196-74208]:ReturnStatement[74196-74208]"
    }, {
      "left" : "double xx = domainAxis.getCategoryMiddle(key,\r\n                plot.getCategoriesForAxis(domainAxis),\r\n                dataArea, plot.getDomainAxisEdge());",
      "right" : "double xx = domainAxis.getCategoryMiddle(key,\r\n                plot.getCategoriesForAxis(domainAxis),\r\n                dataArea, plot.getDomainAxisEdge());",
      "info" : "VariableDeclarationStatement[74229-74384]:VariableDeclarationStatement[74229-74384]"
    }, {
      "left" : "double yy = rangeAxis.valueToJava2D(y.doubleValue(), dataArea,\r\n                plot.getRangeAxisEdge());",
      "right" : "double yy = rangeAxis.valueToJava2D(y.doubleValue(), dataArea,\r\n                plot.getRangeAxisEdge());",
      "info" : "VariableDeclarationStatement[74394-74499]:VariableDeclarationStatement[74394-74499]"
    }, {
      "left" : "result.setRect(xx - 2, yy - 2, 4, 4);",
      "right" : "result.setRect(xx - 2, yy - 2, 4, 4);",
      "info" : "ExpressionStatement[74509-74546]:ExpressionStatement[74509-74546]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[74556-74570]:ReturnStatement[74556-74570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75373-75793]:Block[75373-75793]"
    }, {
      "left" : "Rectangle2D bounds = createHotSpotBounds(g2, dataArea, plot,\r\n                domainAxis, rangeAxis, dataset, row, column, selected,\r\n                state, null);",
      "right" : "Rectangle2D bounds = createHotSpotBounds(g2, dataArea, plot,\r\n                domainAxis, rangeAxis, dataset, row, column, selected,\r\n                state, null);",
      "info" : "VariableDeclarationStatement[75384-75547]:VariableDeclarationStatement[75384-75547]"
    }, {
      "left" : "if (bounds == null)",
      "right" : "if (bounds == null)",
      "info" : "IfStatement[75557-75616]:IfStatement[75557-75616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75577-75616]:Block[75577-75616]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[75592-75605]:ReturnStatement[75592-75605]"
    }, {
      "left" : "return bounds.contains(xx, yy);",
      "right" : "return bounds.contains(xx, yy);",
      "info" : "ReturnStatement[75755-75786]:ReturnStatement[75755-75786]"
    } ]
  },
  "interFileMappings" : { }
}