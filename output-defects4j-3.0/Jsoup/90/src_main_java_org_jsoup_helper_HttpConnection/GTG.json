{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "HttpConnection",
      "right" : "HttpConnection",
      "info" : "TypeDeclaration[1473-43803]:TypeDeclaration[1473-43878]"
    }, {
      "left" : "public static final String CONTENT_ENCODING = \"Content-Encoding\";",
      "right" : "public static final String CONTENT_ENCODING = \"Content-Encoding\";",
      "info" : "FieldDeclaration[1618-1683]:FieldDeclaration[1618-1683]"
    }, {
      "left" : "public static final String DEFAULT_UA =\n        \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36\";",
      "right" : "public static final String DEFAULT_UA =\n        \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36\";",
      "info" : "FieldDeclaration[1688-2098]:FieldDeclaration[1688-2098]"
    }, {
      "left" : "private static final String USER_AGENT = \"User-Agent\";",
      "right" : "private static final String USER_AGENT = \"User-Agent\";",
      "info" : "FieldDeclaration[2103-2157]:FieldDeclaration[2103-2157]"
    }, {
      "left" : "public static final String CONTENT_TYPE = \"Content-Type\";",
      "right" : "public static final String CONTENT_TYPE = \"Content-Type\";",
      "info" : "FieldDeclaration[2162-2219]:FieldDeclaration[2162-2219]"
    }, {
      "left" : "public static final String MULTIPART_FORM_DATA = \"multipart/form-data\";",
      "right" : "public static final String MULTIPART_FORM_DATA = \"multipart/form-data\";",
      "info" : "FieldDeclaration[2224-2295]:FieldDeclaration[2224-2295]"
    }, {
      "left" : "public static final String FORM_URL_ENCODED = \"application/x-www-form-urlencoded\";",
      "right" : "public static final String FORM_URL_ENCODED = \"application/x-www-form-urlencoded\";",
      "info" : "FieldDeclaration[2300-2382]:FieldDeclaration[2300-2382]"
    }, {
      "left" : "private static final int HTTP_TEMP_REDIR = 307;",
      "right" : "private static final int HTTP_TEMP_REDIR = 307;",
      "info" : "FieldDeclaration[2387-2434]:FieldDeclaration[2387-2434]"
    }, {
      "left" : "private static final String DefaultUploadType = \"application/octet-stream\";",
      "right" : "private static final String DefaultUploadType = \"application/octet-stream\";",
      "info" : "FieldDeclaration[2490-2565]:FieldDeclaration[2490-2565]"
    }, {
      "left" : "public static Connection connect(String url)",
      "right" : "public static Connection connect(String url)",
      "info" : "MethodDeclaration[2571-2712]:MethodDeclaration[2571-2712]"
    }, {
      "left" : "public static Connection connect(URL url)",
      "right" : "public static Connection connect(URL url)",
      "info" : "MethodDeclaration[2718-2856]:MethodDeclaration[2718-2856]"
    }, {
      "left" : "public HttpConnection()",
      "right" : "public HttpConnection()",
      "info" : "MethodDeclaration[2862-2952]:MethodDeclaration[2862-2952]"
    }, {
      "left" : "private static String encodeUrl(String url)",
      "right" : "private static String encodeUrl(String url)",
      "info" : "MethodDeclaration[2958-3300]:MethodDeclaration[2958-3300]"
    }, {
      "left" : "static URL encodeUrl(URL u)",
      "right" : "static URL encodeUrl(URL u)",
      "info" : "MethodDeclaration[3306-3742]:MethodDeclaration[3306-3742]"
    }, {
      "left" : "private static String encodeMimeName(String val)",
      "right" : "private static String encodeMimeName(String val)",
      "info" : "MethodDeclaration[3748-3898]:MethodDeclaration[3748-3898]"
    }, {
      "left" : "private Connection.Request req;",
      "right" : "private Connection.Request req;",
      "info" : "FieldDeclaration[3904-3935]:FieldDeclaration[3904-3935]"
    }, {
      "left" : "private Connection.Response res;",
      "right" : "private Connection.Response res;",
      "info" : "FieldDeclaration[3940-3972]:FieldDeclaration[3940-3972]"
    }, {
      "left" : "public Connection url(URL url)",
      "right" : "public Connection url(URL url)",
      "info" : "MethodDeclaration[3978-4059]:MethodDeclaration[3978-4059]"
    }, {
      "left" : "public Connection url(String url)",
      "right" : "public Connection url(String url)",
      "info" : "MethodDeclaration[4065-4376]:MethodDeclaration[4065-4376]"
    }, {
      "left" : "public Connection proxy(Proxy proxy)",
      "right" : "public Connection proxy(Proxy proxy)",
      "info" : "MethodDeclaration[4382-4473]:MethodDeclaration[4382-4473]"
    }, {
      "left" : "public Connection proxy(String host, int port)",
      "right" : "public Connection proxy(String host, int port)",
      "info" : "MethodDeclaration[4479-4585]:MethodDeclaration[4479-4585]"
    }, {
      "left" : "public Connection userAgent(String userAgent)",
      "right" : "public Connection userAgent(String userAgent)",
      "info" : "MethodDeclaration[4591-4776]:MethodDeclaration[4591-4776]"
    }, {
      "left" : "public Connection timeout(int millis)",
      "right" : "public Connection timeout(int millis)",
      "info" : "MethodDeclaration[4782-4877]:MethodDeclaration[4782-4877]"
    }, {
      "left" : "public Connection maxBodySize(int bytes)",
      "right" : "public Connection maxBodySize(int bytes)",
      "info" : "MethodDeclaration[4883-4984]:MethodDeclaration[4883-4984]"
    }, {
      "left" : "public Connection followRedirects(boolean followRedirects)",
      "right" : "public Connection followRedirects(boolean followRedirects)",
      "info" : "MethodDeclaration[4990-5123]:MethodDeclaration[4990-5123]"
    }, {
      "left" : "public Connection referrer(String referrer)",
      "right" : "public Connection referrer(String referrer)",
      "info" : "MethodDeclaration[5129-5307]:MethodDeclaration[5129-5307]"
    }, {
      "left" : "public Connection method(Method method)",
      "right" : "public Connection method(Method method)",
      "info" : "MethodDeclaration[5313-5409]:MethodDeclaration[5313-5409]"
    }, {
      "left" : "public Connection ignoreHttpErrors(boolean ignoreHttpErrors)",
      "right" : "public Connection ignoreHttpErrors(boolean ignoreHttpErrors)",
      "info" : "MethodDeclaration[5415-5537]:MethodDeclaration[5415-5537]"
    }, {
      "left" : "public Connection ignoreContentType(boolean ignoreContentType)",
      "right" : "public Connection ignoreContentType(boolean ignoreContentType)",
      "info" : "MethodDeclaration[5543-5684]:MethodDeclaration[5543-5684]"
    }, {
      "left" : "public Connection data(String key, String value)",
      "right" : "public Connection data(String key, String value)",
      "info" : "MethodDeclaration[5691-5813]:MethodDeclaration[5691-5813]"
    }, {
      "left" : "public Connection sslSocketFactory(SSLSocketFactory sslSocketFactory)",
      "right" : "public Connection sslSocketFactory(SSLSocketFactory sslSocketFactory)",
      "info" : "MethodDeclaration[5819-5959]:MethodDeclaration[5819-5959]"
    }, {
      "left" : "public Connection data(String key, String filename, InputStream inputStream)",
      "right" : "public Connection data(String key, String filename, InputStream inputStream)",
      "info" : "MethodDeclaration[5965-6131]:MethodDeclaration[5965-6131]"
    }, {
      "left" : "public Connection data(String key, String filename, InputStream inputStream, String contentType)",
      "right" : "public Connection data(String key, String filename, InputStream inputStream, String contentType)",
      "info" : "MethodDeclaration[6137-6362]:MethodDeclaration[6137-6362]"
    }, {
      "left" : "public Connection data(Map<String, String> data)",
      "right" : "public Connection data(Map<String, String> data)",
      "info" : "MethodDeclaration[6368-6653]:MethodDeclaration[6368-6653]"
    }, {
      "left" : "public Connection data(String... keyvals)",
      "right" : "public Connection data(String... keyvals)",
      "info" : "MethodDeclaration[6659-7228]:MethodDeclaration[6659-7228]"
    }, {
      "left" : "public Connection data(Collection<Connection.KeyVal> data)",
      "right" : "public Connection data(Collection<Connection.KeyVal> data)",
      "info" : "MethodDeclaration[7234-7474]:MethodDeclaration[7234-7474]"
    }, {
      "left" : "public Connection.KeyVal data(String key)",
      "right" : "public Connection.KeyVal data(String key)",
      "info" : "MethodDeclaration[7480-7755]:MethodDeclaration[7480-7755]"
    }, {
      "left" : "public Connection requestBody(String body)",
      "right" : "public Connection requestBody(String body)",
      "info" : "MethodDeclaration[7761-7863]:MethodDeclaration[7761-7863]"
    }, {
      "left" : "public Connection header(String name, String value)",
      "right" : "public Connection header(String name, String value)",
      "info" : "MethodDeclaration[7869-7982]:MethodDeclaration[7869-7982]"
    }, {
      "left" : "public Connection headers(Map<String,String> headers)",
      "right" : "public Connection headers(Map<String,String> headers)",
      "info" : "MethodDeclaration[7988-8271]:MethodDeclaration[7988-8271]"
    }, {
      "left" : "public Connection cookie(String name, String value)",
      "right" : "public Connection cookie(String name, String value)",
      "info" : "MethodDeclaration[8277-8390]:MethodDeclaration[8277-8390]"
    }, {
      "left" : "public Connection cookies(Map<String, String> cookies)",
      "right" : "public Connection cookies(Map<String, String> cookies)",
      "info" : "MethodDeclaration[8396-8682]:MethodDeclaration[8396-8682]"
    }, {
      "left" : "public Connection parser(Parser parser)",
      "right" : "public Connection parser(Parser parser)",
      "info" : "MethodDeclaration[8688-8784]:MethodDeclaration[8688-8784]"
    }, {
      "left" : "public Document get() throws IOException",
      "right" : "public Document get() throws IOException",
      "info" : "MethodDeclaration[8790-8917]:MethodDeclaration[8790-8917]"
    }, {
      "left" : "public Document post() throws IOException",
      "right" : "public Document post() throws IOException",
      "info" : "MethodDeclaration[8923-9052]:MethodDeclaration[8923-9052]"
    }, {
      "left" : "public Connection.Response execute() throws IOException",
      "right" : "public Connection.Response execute() throws IOException",
      "info" : "MethodDeclaration[9058-9178]:MethodDeclaration[9058-9178]"
    }, {
      "left" : "public Connection.Request request()",
      "right" : "public Connection.Request request()",
      "info" : "MethodDeclaration[9184-9247]:MethodDeclaration[9184-9247]"
    }, {
      "left" : "public Connection request(Connection.Request request)",
      "right" : "public Connection request(Connection.Request request)",
      "info" : "MethodDeclaration[9253-9358]:MethodDeclaration[9253-9358]"
    }, {
      "left" : "public Connection.Response response()",
      "right" : "public Connection.Response response()",
      "info" : "MethodDeclaration[9364-9429]:MethodDeclaration[9364-9429]"
    }, {
      "left" : "public Connection response(Connection.Response response)",
      "right" : "public Connection response(Connection.Response response)",
      "info" : "MethodDeclaration[9435-9544]:MethodDeclaration[9435-9544]"
    }, {
      "left" : "public Connection postDataCharset(String charset)",
      "right" : "public Connection postDataCharset(String charset)",
      "info" : "MethodDeclaration[9550-9666]:MethodDeclaration[9550-9666]"
    }, {
      "left" : "Base",
      "right" : "Base",
      "info" : "TypeDeclaration[9672-16560]:TypeDeclaration[9672-16635]"
    }, {
      "left" : "URL url;",
      "right" : "URL url;",
      "info" : "FieldDeclaration[9811-9819]:FieldDeclaration[9811-9819]"
    }, {
      "left" : "Method method;",
      "right" : "Method method;",
      "info" : "FieldDeclaration[9828-9842]:FieldDeclaration[9828-9842]"
    }, {
      "left" : "Map<String, List<String>> headers;",
      "right" : "Map<String, List<String>> headers;",
      "info" : "FieldDeclaration[9851-9885]:FieldDeclaration[9851-9885]"
    }, {
      "left" : "Map<String, String> cookies;",
      "right" : "Map<String, String> cookies;",
      "info" : "FieldDeclaration[9894-9922]:FieldDeclaration[9894-9922]"
    }, {
      "left" : "private Base()",
      "right" : "private Base()",
      "info" : "MethodDeclaration[9932-10048]:MethodDeclaration[9932-10048]"
    }, {
      "left" : "public URL url()",
      "right" : "public URL url()",
      "info" : "MethodDeclaration[10058-10110]:MethodDeclaration[10058-10110]"
    }, {
      "left" : "public T url(URL url)",
      "right" : "public T url(URL url)",
      "info" : "MethodDeclaration[10120-10269]:MethodDeclaration[10120-10269]"
    }, {
      "left" : "public Method method()",
      "right" : "public Method method()",
      "info" : "MethodDeclaration[10279-10340]:MethodDeclaration[10279-10340]"
    }, {
      "left" : "public T method(Method method)",
      "right" : "public T method(Method method)",
      "info" : "MethodDeclaration[10350-10520]:MethodDeclaration[10350-10520]"
    }, {
      "left" : "public String header(String name)",
      "right" : "public String header(String name)",
      "info" : "MethodDeclaration[10530-10916]:MethodDeclaration[10530-10916]"
    }, {
      "left" : "public T addHeader(String name, String value)",
      "right" : "public T addHeader(String name, String value)",
      "info" : "MethodDeclaration[10926-11353]:MethodDeclaration[10926-11353]"
    }, {
      "left" : "public List<String> headers(String name)",
      "right" : "public List<String> headers(String name)",
      "info" : "MethodDeclaration[11363-11522]:MethodDeclaration[11363-11522]"
    }, {
      "left" : "private static String fixHeaderEncoding(String val)",
      "right" : "private static String fixHeaderEncoding(String val)",
      "info" : "MethodDeclaration[11532-11958]:MethodDeclaration[11532-11958]"
    }, {
      "left" : "private static boolean looksLikeUtf8(byte[] input)",
      "right" : "private static boolean looksLikeUtf8(byte[] input)",
      "info" : "MethodDeclaration[11968-13063]:MethodDeclaration[11968-13138]"
    }, {
      "left" : "public T header(String name, String value)",
      "right" : "public T header(String name, String value)",
      "info" : "MethodDeclaration[13073-13363]:MethodDeclaration[13148-13438]"
    }, {
      "left" : "public boolean hasHeader(String name)",
      "right" : "public boolean hasHeader(String name)",
      "info" : "MethodDeclaration[13373-13556]:MethodDeclaration[13448-13631]"
    }, {
      "left" : "public boolean hasHeaderWithValue(String name, String value)",
      "right" : "public boolean hasHeaderWithValue(String name, String value)",
      "info" : "MethodDeclaration[13566-14040]:MethodDeclaration[13641-14115]"
    }, {
      "left" : "public T removeHeader(String name)",
      "right" : "public T removeHeader(String name)",
      "info" : "MethodDeclaration[14050-14403]:MethodDeclaration[14125-14478]"
    }, {
      "left" : "public Map<String, String> headers()",
      "right" : "public Map<String, String> headers()",
      "info" : "MethodDeclaration[14413-14858]:MethodDeclaration[14488-14933]"
    }, {
      "left" : "public Map<String, List<String>> multiHeaders()",
      "right" : "public Map<String, List<String>> multiHeaders()",
      "info" : "MethodDeclaration[14868-14973]:MethodDeclaration[14943-15048]"
    }, {
      "left" : "private List<String> getHeadersCaseInsensitive(String name)",
      "right" : "private List<String> getHeadersCaseInsensitive(String name)",
      "info" : "MethodDeclaration[14983-15333]:MethodDeclaration[15058-15408]"
    }, {
      "left" : "private Map.Entry<String, List<String>> scanHeaders(String name)",
      "right" : "private Map.Entry<String, List<String>> scanHeaders(String name)",
      "info" : "MethodDeclaration[15343-15670]:MethodDeclaration[15418-15745]"
    }, {
      "left" : "public String cookie(String name)",
      "right" : "public String cookie(String name)",
      "info" : "MethodDeclaration[15680-15833]:MethodDeclaration[15755-15908]"
    }, {
      "left" : "public T cookie(String name, String value)",
      "right" : "public T cookie(String name, String value)",
      "info" : "MethodDeclaration[15843-16104]:MethodDeclaration[15918-16179]"
    }, {
      "left" : "public boolean hasCookie(String name)",
      "right" : "public boolean hasCookie(String name)",
      "info" : "MethodDeclaration[16114-16279]:MethodDeclaration[16189-16354]"
    }, {
      "left" : "public T removeCookie(String name)",
      "right" : "public T removeCookie(String name)",
      "info" : "MethodDeclaration[16289-16468]:MethodDeclaration[16364-16543]"
    }, {
      "left" : "public Map<String, String> cookies()",
      "right" : "public Map<String, String> cookies()",
      "info" : "MethodDeclaration[16478-16554]:MethodDeclaration[16553-16629]"
    }, {
      "left" : "Request",
      "right" : "Request",
      "info" : "TypeDeclaration[16566-20749]:TypeDeclaration[16641-20824]"
    }, {
      "left" : "private Proxy proxy;",
      "right" : "private Proxy proxy;",
      "info" : "FieldDeclaration[16682-16702]:FieldDeclaration[16757-16777]"
    }, {
      "left" : "private int timeoutMilliseconds;",
      "right" : "private int timeoutMilliseconds;",
      "info" : "FieldDeclaration[16723-16755]:FieldDeclaration[16798-16830]"
    }, {
      "left" : "private int maxBodySizeBytes;",
      "right" : "private int maxBodySizeBytes;",
      "info" : "FieldDeclaration[16764-16793]:FieldDeclaration[16839-16868]"
    }, {
      "left" : "private boolean followRedirects;",
      "right" : "private boolean followRedirects;",
      "info" : "FieldDeclaration[16802-16834]:FieldDeclaration[16877-16909]"
    }, {
      "left" : "private Collection<Connection.KeyVal> data;",
      "right" : "private Collection<Connection.KeyVal> data;",
      "info" : "FieldDeclaration[16843-16886]:FieldDeclaration[16918-16961]"
    }, {
      "left" : "private String body = null;",
      "right" : "private String body = null;",
      "info" : "FieldDeclaration[16895-16922]:FieldDeclaration[16970-16997]"
    }, {
      "left" : "private boolean ignoreHttpErrors = false;",
      "right" : "private boolean ignoreHttpErrors = false;",
      "info" : "FieldDeclaration[16931-16972]:FieldDeclaration[17006-17047]"
    }, {
      "left" : "private boolean ignoreContentType = false;",
      "right" : "private boolean ignoreContentType = false;",
      "info" : "FieldDeclaration[16981-17023]:FieldDeclaration[17056-17098]"
    }, {
      "left" : "private Parser parser;",
      "right" : "private Parser parser;",
      "info" : "FieldDeclaration[17032-17054]:FieldDeclaration[17107-17129]"
    }, {
      "left" : "private boolean parserDefined = false;",
      "right" : "private boolean parserDefined = false;",
      "info" : "FieldDeclaration[17063-17101]:FieldDeclaration[17138-17176]"
    }, {
      "left" : "private String postDataCharset = DataUtil.defaultCharset;",
      "right" : "private String postDataCharset = DataUtil.defaultCharset;",
      "info" : "FieldDeclaration[17155-17212]:FieldDeclaration[17230-17287]"
    }, {
      "left" : "private SSLSocketFactory sslSocketFactory;",
      "right" : "private SSLSocketFactory sslSocketFactory;",
      "info" : "FieldDeclaration[17221-17263]:FieldDeclaration[17296-17338]"
    }, {
      "left" : "Request()",
      "right" : "Request()",
      "info" : "MethodDeclaration[17273-17646]:MethodDeclaration[17348-17721]"
    }, {
      "left" : "public Proxy proxy()",
      "right" : "public Proxy proxy()",
      "info" : "MethodDeclaration[17656-17714]:MethodDeclaration[17731-17789]"
    }, {
      "left" : "public Request proxy(Proxy proxy)",
      "right" : "public Request proxy(Proxy proxy)",
      "info" : "MethodDeclaration[17724-17826]:MethodDeclaration[17799-17901]"
    }, {
      "left" : "public Request proxy(String host, int port)",
      "right" : "public Request proxy(String host, int port)",
      "info" : "MethodDeclaration[17836-18017]:MethodDeclaration[17911-18092]"
    }, {
      "left" : "public int timeout()",
      "right" : "public int timeout()",
      "info" : "MethodDeclaration[18027-18099]:MethodDeclaration[18102-18174]"
    }, {
      "left" : "public Request timeout(int millis)",
      "right" : "public Request timeout(int millis)",
      "info" : "MethodDeclaration[18109-18320]:MethodDeclaration[18184-18395]"
    }, {
      "left" : "public int maxBodySize()",
      "right" : "public int maxBodySize()",
      "info" : "MethodDeclaration[18330-18403]:MethodDeclaration[18405-18478]"
    }, {
      "left" : "public Connection.Request maxBodySize(int bytes)",
      "right" : "public Connection.Request maxBodySize(int bytes)",
      "info" : "MethodDeclaration[18413-18620]:MethodDeclaration[18488-18695]"
    }, {
      "left" : "public boolean followRedirects()",
      "right" : "public boolean followRedirects()",
      "info" : "MethodDeclaration[18630-18710]:MethodDeclaration[18705-18785]"
    }, {
      "left" : "public Connection.Request followRedirects(boolean followRedirects)",
      "right" : "public Connection.Request followRedirects(boolean followRedirects)",
      "info" : "MethodDeclaration[18720-18875]:MethodDeclaration[18795-18950]"
    }, {
      "left" : "public boolean ignoreHttpErrors()",
      "right" : "public boolean ignoreHttpErrors()",
      "info" : "MethodDeclaration[18885-18967]:MethodDeclaration[18960-19042]"
    }, {
      "left" : "public SSLSocketFactory sslSocketFactory()",
      "right" : "public SSLSocketFactory sslSocketFactory()",
      "info" : "MethodDeclaration[18977-19068]:MethodDeclaration[19052-19143]"
    }, {
      "left" : "public void sslSocketFactory(SSLSocketFactory sslSocketFactory)",
      "right" : "public void sslSocketFactory(SSLSocketFactory sslSocketFactory)",
      "info" : "MethodDeclaration[19078-19207]:MethodDeclaration[19153-19282]"
    }, {
      "left" : "public Connection.Request ignoreHttpErrors(boolean ignoreHttpErrors)",
      "right" : "public Connection.Request ignoreHttpErrors(boolean ignoreHttpErrors)",
      "info" : "MethodDeclaration[19217-19376]:MethodDeclaration[19292-19451]"
    }, {
      "left" : "public boolean ignoreContentType()",
      "right" : "public boolean ignoreContentType()",
      "info" : "MethodDeclaration[19386-19470]:MethodDeclaration[19461-19545]"
    }, {
      "left" : "public Connection.Request ignoreContentType(boolean ignoreContentType)",
      "right" : "public Connection.Request ignoreContentType(boolean ignoreContentType)",
      "info" : "MethodDeclaration[19480-19643]:MethodDeclaration[19555-19718]"
    }, {
      "left" : "public Request data(Connection.KeyVal keyval)",
      "right" : "public Request data(Connection.KeyVal keyval)",
      "info" : "MethodDeclaration[19653-19831]:MethodDeclaration[19728-19906]"
    }, {
      "left" : "public Collection<Connection.KeyVal> data()",
      "right" : "public Collection<Connection.KeyVal> data()",
      "info" : "MethodDeclaration[19841-19921]:MethodDeclaration[19916-19996]"
    }, {
      "left" : "public Connection.Request requestBody(String body)",
      "right" : "public Connection.Request requestBody(String body)",
      "info" : "MethodDeclaration[19931-20048]:MethodDeclaration[20006-20123]"
    }, {
      "left" : "public String requestBody()",
      "right" : "public String requestBody()",
      "info" : "MethodDeclaration[20058-20122]:MethodDeclaration[20133-20197]"
    }, {
      "left" : "public Request parser(Parser parser)",
      "right" : "public Request parser(Parser parser)",
      "info" : "MethodDeclaration[20132-20273]:MethodDeclaration[20207-20348]"
    }, {
      "left" : "public Parser parser()",
      "right" : "public Parser parser()",
      "info" : "MethodDeclaration[20283-20344]:MethodDeclaration[20358-20419]"
    }, {
      "left" : "public Connection.Request postDataCharset(String charset)",
      "right" : "public Connection.Request postDataCharset(String charset)",
      "info" : "MethodDeclaration[20354-20654]:MethodDeclaration[20429-20729]"
    }, {
      "left" : "public String postDataCharset()",
      "right" : "public String postDataCharset()",
      "info" : "MethodDeclaration[20664-20743]:MethodDeclaration[20739-20818]"
    }, {
      "left" : "Response",
      "right" : "Response",
      "info" : "TypeDeclaration[20755-41637]:TypeDeclaration[20830-41712]"
    }, {
      "left" : "private static final int MAX_REDIRECTS = 20;",
      "right" : "private static final int MAX_REDIRECTS = 20;",
      "info" : "FieldDeclaration[20874-20918]:FieldDeclaration[20949-20993]"
    }, {
      "left" : "private static final String LOCATION = \"Location\";",
      "right" : "private static final String LOCATION = \"Location\";",
      "info" : "FieldDeclaration[20927-20977]:FieldDeclaration[21002-21052]"
    }, {
      "left" : "private int statusCode;",
      "right" : "private int statusCode;",
      "info" : "FieldDeclaration[20986-21009]:FieldDeclaration[21061-21084]"
    }, {
      "left" : "private String statusMessage;",
      "right" : "private String statusMessage;",
      "info" : "FieldDeclaration[21018-21047]:FieldDeclaration[21093-21122]"
    }, {
      "left" : "private ByteBuffer byteData;",
      "right" : "private ByteBuffer byteData;",
      "info" : "FieldDeclaration[21056-21084]:FieldDeclaration[21131-21159]"
    }, {
      "left" : "private InputStream bodyStream;",
      "right" : "private InputStream bodyStream;",
      "info" : "FieldDeclaration[21093-21124]:FieldDeclaration[21168-21199]"
    }, {
      "left" : "private HttpURLConnection conn;",
      "right" : "private HttpURLConnection conn;",
      "info" : "FieldDeclaration[21133-21164]:FieldDeclaration[21208-21239]"
    }, {
      "left" : "private String charset;",
      "right" : "private String charset;",
      "info" : "FieldDeclaration[21173-21196]:FieldDeclaration[21248-21271]"
    }, {
      "left" : "private String contentType;",
      "right" : "private String contentType;",
      "info" : "FieldDeclaration[21205-21232]:FieldDeclaration[21280-21307]"
    }, {
      "left" : "private boolean executed = false;",
      "right" : "private boolean executed = false;",
      "info" : "FieldDeclaration[21241-21274]:FieldDeclaration[21316-21349]"
    }, {
      "left" : "private boolean inputStreamRead = false;",
      "right" : "private boolean inputStreamRead = false;",
      "info" : "FieldDeclaration[21283-21323]:FieldDeclaration[21358-21398]"
    }, {
      "left" : "private int numRedirects = 0;",
      "right" : "private int numRedirects = 0;",
      "info" : "FieldDeclaration[21332-21361]:FieldDeclaration[21407-21436]"
    }, {
      "left" : "private Connection.Request req;",
      "right" : "private Connection.Request req;",
      "info" : "FieldDeclaration[21370-21401]:FieldDeclaration[21445-21476]"
    }, {
      "left" : "private static final Pattern xmlContentTypeRxp = Pattern.compile(\"(application|text)/\\\\w*\\\\+?xml.*\");",
      "right" : "private static final Pattern xmlContentTypeRxp = Pattern.compile(\"(application|text)/\\\\w*\\\\+?xml.*\");",
      "info" : "FieldDeclaration[21528-21629]:FieldDeclaration[21603-21704]"
    }, {
      "left" : "Response()",
      "right" : "Response()",
      "info" : "MethodDeclaration[21639-21682]:MethodDeclaration[21714-21757]"
    }, {
      "left" : "private Response(Response previousResponse) throws IOException",
      "right" : "private Response(Response previousResponse) throws IOException",
      "info" : "MethodDeclaration[21692-22097]:MethodDeclaration[21767-22172]"
    }, {
      "left" : "static Response execute(Connection.Request req) throws IOException",
      "right" : "static Response execute(Connection.Request req) throws IOException",
      "info" : "MethodDeclaration[22107-22224]:MethodDeclaration[22182-22299]"
    }, {
      "left" : "static Response execute(Connection.Request req, Response previousResponse) throws IOException",
      "right" : "static Response execute(Connection.Request req, Response previousResponse) throws IOException",
      "info" : "MethodDeclaration[22234-27853]:MethodDeclaration[22309-27928]"
    }, {
      "left" : "public int statusCode()",
      "right" : "public int statusCode()",
      "info" : "MethodDeclaration[27863-27929]:MethodDeclaration[27938-28004]"
    }, {
      "left" : "public String statusMessage()",
      "right" : "public String statusMessage()",
      "info" : "MethodDeclaration[27939-28014]:MethodDeclaration[28014-28089]"
    }, {
      "left" : "public String charset()",
      "right" : "public String charset()",
      "info" : "MethodDeclaration[28024-28087]:MethodDeclaration[28099-28162]"
    }, {
      "left" : "public Response charset(String charset)",
      "right" : "public Response charset(String charset)",
      "info" : "MethodDeclaration[28097-28209]:MethodDeclaration[28172-28284]"
    }, {
      "left" : "public String contentType()",
      "right" : "public String contentType()",
      "info" : "MethodDeclaration[28219-28290]:MethodDeclaration[28294-28365]"
    }, {
      "left" : "public Document parse() throws IOException",
      "right" : "public Document parse() throws IOException",
      "info" : "MethodDeclaration[28300-29133]:MethodDeclaration[28375-29208]"
    }, {
      "left" : "private void prepareByteData()",
      "right" : "private void prepareByteData()",
      "info" : "MethodDeclaration[29143-29799]:MethodDeclaration[29218-29874]"
    }, {
      "left" : "public String body()",
      "right" : "public String body()",
      "info" : "MethodDeclaration[29809-30355]:MethodDeclaration[29884-30430]"
    }, {
      "left" : "public byte[] bodyAsBytes()",
      "right" : "public byte[] bodyAsBytes()",
      "info" : "MethodDeclaration[30365-30472]:MethodDeclaration[30440-30547]"
    }, {
      "left" : "public Connection.Response bufferUp()",
      "right" : "public Connection.Response bufferUp()",
      "info" : "MethodDeclaration[30482-30605]:MethodDeclaration[30557-30680]"
    }, {
      "left" : "public BufferedInputStream bodyStream()",
      "right" : "public BufferedInputStream bodyStream()",
      "info" : "MethodDeclaration[30615-31035]:MethodDeclaration[30690-31110]"
    }, {
      "left" : "private static HttpURLConnection createConnection(Connection.Request req) throws IOException",
      "right" : "private static HttpURLConnection createConnection(Connection.Request req) throws IOException",
      "info" : "MethodDeclaration[31109-32398]:MethodDeclaration[31184-32473]"
    }, {
      "left" : "private void safeClose()",
      "right" : "private void safeClose()",
      "info" : "MethodDeclaration[32408-32930]:MethodDeclaration[32483-33005]"
    }, {
      "left" : "private void setupFromConnection(HttpURLConnection conn, HttpConnection.Response previousResponse) throws IOException",
      "right" : "private void setupFromConnection(HttpURLConnection conn, HttpConnection.Response previousResponse) throws IOException",
      "info" : "MethodDeclaration[32987-33958]:MethodDeclaration[33062-34033]"
    }, {
      "left" : "private static LinkedHashMap<String, List<String>> createHeaderMap(HttpURLConnection conn)",
      "right" : "private static LinkedHashMap<String, List<String>> createHeaderMap(HttpURLConnection conn)",
      "info" : "MethodDeclaration[33968-34946]:MethodDeclaration[34043-35021]"
    }, {
      "left" : "void processResponseHeaders(Map<String, List<String>> resHeaders)",
      "right" : "void processResponseHeaders(Map<String, List<String>> resHeaders)",
      "info" : "MethodDeclaration[34956-36114]:MethodDeclaration[35031-36189]"
    }, {
      "left" : "private static String setOutputContentType(final Connection.Request req)",
      "right" : "private static String setOutputContentType(final Connection.Request req)",
      "info" : "MethodDeclaration[36124-37213]:MethodDeclaration[36199-37288]"
    }, {
      "left" : "private static void writePost(final Connection.Request req, final OutputStream outputStream, final String bound) throws IOException",
      "right" : "private static void writePost(final Connection.Request req, final OutputStream outputStream, final String bound) throws IOException",
      "info" : "MethodDeclaration[37223-39616]:MethodDeclaration[37298-39691]"
    }, {
      "left" : "private static String getRequestCookieString(Connection.Request req)",
      "right" : "private static String getRequestCookieString(Connection.Request req)",
      "info" : "MethodDeclaration[39626-40266]:MethodDeclaration[39701-40341]"
    }, {
      "left" : "private static void serialiseRequestUrl(Connection.Request req) throws IOException",
      "right" : "private static void serialiseRequestUrl(Connection.Request req) throws IOException",
      "info" : "MethodDeclaration[40341-41631]:MethodDeclaration[40416-41706]"
    }, {
      "left" : "private static boolean needsMultipart(Connection.Request req)",
      "right" : "private static boolean needsMultipart(Connection.Request req)",
      "info" : "MethodDeclaration[41643-41993]:MethodDeclaration[41718-42068]"
    }, {
      "left" : "KeyVal",
      "right" : "KeyVal",
      "info" : "TypeDeclaration[41999-43801]:TypeDeclaration[42074-43876]"
    }, {
      "left" : "private String key;",
      "right" : "private String key;",
      "info" : "FieldDeclaration[42065-42084]:FieldDeclaration[42140-42159]"
    }, {
      "left" : "private String value;",
      "right" : "private String value;",
      "info" : "FieldDeclaration[42093-42114]:FieldDeclaration[42168-42189]"
    }, {
      "left" : "private InputStream stream;",
      "right" : "private InputStream stream;",
      "info" : "FieldDeclaration[42123-42150]:FieldDeclaration[42198-42225]"
    }, {
      "left" : "private String contentType;",
      "right" : "private String contentType;",
      "info" : "FieldDeclaration[42159-42186]:FieldDeclaration[42234-42261]"
    }, {
      "left" : "public static KeyVal create(String key, String value)",
      "right" : "public static KeyVal create(String key, String value)",
      "info" : "MethodDeclaration[42196-42316]:MethodDeclaration[42271-42391]"
    }, {
      "left" : "public static KeyVal create(String key, String filename, InputStream stream)",
      "right" : "public static KeyVal create(String key, String filename, InputStream stream)",
      "info" : "MethodDeclaration[42326-42492]:MethodDeclaration[42401-42567]"
    }, {
      "left" : "private KeyVal()",
      "right" : "private KeyVal()",
      "info" : "MethodDeclaration[42502-42521]:MethodDeclaration[42577-42596]"
    }, {
      "left" : "public KeyVal key(String key)",
      "right" : "public KeyVal key(String key)",
      "info" : "MethodDeclaration[42531-42691]:MethodDeclaration[42606-42766]"
    }, {
      "left" : "public String key()",
      "right" : "public String key()",
      "info" : "MethodDeclaration[42701-42756]:MethodDeclaration[42776-42831]"
    }, {
      "left" : "public KeyVal value(String value)",
      "right" : "public KeyVal value(String value)",
      "info" : "MethodDeclaration[42766-42936]:MethodDeclaration[42841-43011]"
    }, {
      "left" : "public String value()",
      "right" : "public String value()",
      "info" : "MethodDeclaration[42946-43005]:MethodDeclaration[43021-43080]"
    }, {
      "left" : "public KeyVal inputStream(InputStream inputStream)",
      "right" : "public KeyVal inputStream(InputStream inputStream)",
      "info" : "MethodDeclaration[43015-43216]:MethodDeclaration[43090-43291]"
    }, {
      "left" : "public InputStream inputStream()",
      "right" : "public InputStream inputStream()",
      "info" : "MethodDeclaration[43226-43297]:MethodDeclaration[43301-43372]"
    }, {
      "left" : "public boolean hasInputStream()",
      "right" : "public boolean hasInputStream()",
      "info" : "MethodDeclaration[43307-43385]:MethodDeclaration[43382-43460]"
    }, {
      "left" : "public Connection.KeyVal contentType(String contentType)",
      "right" : "public Connection.KeyVal contentType(String contentType)",
      "info" : "MethodDeclaration[43395-43594]:MethodDeclaration[43470-43669]"
    }, {
      "left" : "public String contentType()",
      "right" : "public String contentType()",
      "info" : "MethodDeclaration[43604-43693]:MethodDeclaration[43679-43768]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[43703-43795]:MethodDeclaration[43778-43870]"
    } ],
    "mappings" : [
 {
      "left" : "Connection",
      "right" : "Connection",
      "info" : "SimpleType[1601-1611]:SimpleType[1601-1611]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2571-2577]:Modifier[2571-2577]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2578-2584]:Modifier[2578-2584]"
    }, {
      "left" : "Connection",
      "right" : "Connection",
      "info" : "SimpleType[2585-2595]:SimpleType[2585-2595]"
    }, {
      "left" : "connect",
      "right" : "connect",
      "info" : "SimpleName[2596-2603]:SimpleName[2596-2603]"
    }, {
      "left" : "String url",
      "right" : "String url",
      "info" : "SingleVariableDeclaration[2604-2614]:SingleVariableDeclaration[2604-2614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2616-2712]:Block[2616-2712]"
    }, {
      "left" : "Connection con = new HttpConnection();",
      "right" : "Connection con = new HttpConnection();",
      "info" : "VariableDeclarationStatement[2626-2664]:VariableDeclarationStatement[2626-2664]"
    }, {
      "left" : "con.url(url);",
      "right" : "con.url(url);",
      "info" : "ExpressionStatement[2673-2686]:ExpressionStatement[2673-2686]"
    }, {
      "left" : "return con;",
      "right" : "return con;",
      "info" : "ReturnStatement[2695-2706]:ReturnStatement[2695-2706]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2718-2724]:Modifier[2718-2724]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2725-2731]:Modifier[2725-2731]"
    }, {
      "left" : "Connection",
      "right" : "Connection",
      "info" : "SimpleType[2732-2742]:SimpleType[2732-2742]"
    }, {
      "left" : "connect",
      "right" : "connect",
      "info" : "SimpleName[2743-2750]:SimpleName[2743-2750]"
    }, {
      "left" : "URL url",
      "right" : "URL url",
      "info" : "SingleVariableDeclaration[2751-2758]:SingleVariableDeclaration[2751-2758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2760-2856]:Block[2760-2856]"
    }, {
      "left" : "Connection con = new HttpConnection();",
      "right" : "Connection con = new HttpConnection();",
      "info" : "VariableDeclarationStatement[2770-2808]:VariableDeclarationStatement[2770-2808]"
    }, {
      "left" : "con.url(url);",
      "right" : "con.url(url);",
      "info" : "ExpressionStatement[2817-2830]:ExpressionStatement[2817-2830]"
    }, {
      "left" : "return con;",
      "right" : "return con;",
      "info" : "ReturnStatement[2839-2850]:ReturnStatement[2839-2850]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2862-2868]:Modifier[2862-2868]"
    }, {
      "left" : "HttpConnection",
      "right" : "HttpConnection",
      "info" : "SimpleName[2869-2883]:SimpleName[2869-2883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2886-2952]:Block[2886-2952]"
    }, {
      "left" : "req = new Request();",
      "right" : "req = new Request();",
      "info" : "ExpressionStatement[2896-2916]:ExpressionStatement[2896-2916]"
    }, {
      "left" : "res = new Response();",
      "right" : "res = new Response();",
      "info" : "ExpressionStatement[2925-2946]:ExpressionStatement[2925-2946]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3088-3095]:Modifier[3088-3095]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3096-3102]:Modifier[3096-3102]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[3103-3109]:SimpleType[3103-3109]"
    }, {
      "left" : "encodeUrl",
      "right" : "encodeUrl",
      "info" : "SimpleName[3110-3119]:SimpleName[3110-3119]"
    }, {
      "left" : "String url",
      "right" : "String url",
      "info" : "SingleVariableDeclaration[3120-3130]:SingleVariableDeclaration[3120-3130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3132-3300]:Block[3132-3300]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[3142-3297]:TryStatement[3142-3297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3146-3241]:Block[3146-3241]"
    }, {
      "left" : "URL u = new URL(url);",
      "right" : "URL u = new URL(url);",
      "info" : "VariableDeclarationStatement[3160-3181]:VariableDeclarationStatement[3160-3181]"
    }, {
      "left" : "return encodeUrl(u).toExternalForm();",
      "right" : "return encodeUrl(u).toExternalForm();",
      "info" : "ReturnStatement[3194-3231]:ReturnStatement[3194-3231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3262-3297]:Block[3262-3297]"
    }, {
      "left" : "return url;",
      "right" : "return url;",
      "info" : "ReturnStatement[3276-3287]:ReturnStatement[3276-3287]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3306-3312]:Modifier[3306-3312]"
    }, {
      "left" : "URL",
      "right" : "URL",
      "info" : "SimpleType[3313-3316]:SimpleType[3313-3316]"
    }, {
      "left" : "encodeUrl",
      "right" : "encodeUrl",
      "info" : "SimpleName[3317-3326]:SimpleName[3317-3326]"
    }, {
      "left" : "URL u",
      "right" : "URL u",
      "info" : "SingleVariableDeclaration[3327-3332]:SingleVariableDeclaration[3327-3332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3334-3742]:Block[3334-3742]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[3344-3736]:TryStatement[3344-3736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3348-3682]:Block[3348-3682]"
    }, {
      "left" : "String urlS = u.toExternalForm();",
      "right" : "String urlS = u.toExternalForm();",
      "info" : "VariableDeclarationStatement[3416-3449]:VariableDeclarationStatement[3416-3449]"
    }, {
      "left" : "urlS = urlS.replaceAll(\" \", \"%20\");",
      "right" : "urlS = urlS.replaceAll(\" \", \"%20\");",
      "info" : "ExpressionStatement[3545-3580]:ExpressionStatement[3545-3580]"
    }, {
      "left" : "final URI uri = new URI(urlS);",
      "right" : "final URI uri = new URI(urlS);",
      "info" : "VariableDeclarationStatement[3593-3623]:VariableDeclarationStatement[3593-3623]"
    }, {
      "left" : "return new URL(uri.toASCIIString());",
      "right" : "return new URL(uri.toASCIIString());",
      "info" : "ReturnStatement[3636-3672]:ReturnStatement[3636-3672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3703-3736]:Block[3703-3736]"
    }, {
      "left" : "return u;",
      "right" : "return u;",
      "info" : "ReturnStatement[3717-3726]:ReturnStatement[3717-3726]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3748-3755]:Modifier[3748-3755]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3756-3762]:Modifier[3756-3762]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[3763-3769]:SimpleType[3763-3769]"
    }, {
      "left" : "encodeMimeName",
      "right" : "encodeMimeName",
      "info" : "SimpleName[3770-3784]:SimpleName[3770-3784]"
    }, {
      "left" : "String val",
      "right" : "String val",
      "info" : "SingleVariableDeclaration[3785-3795]:SingleVariableDeclaration[3785-3795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3797-3898]:Block[3797-3898]"
    }, {
      "left" : "if (val == null)",
      "right" : "if (val == null)",
      "info" : "IfStatement[3807-3848]:IfStatement[3807-3848]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3836-3848]:ReturnStatement[3836-3848]"
    }, {
      "left" : "return val.replaceAll(\"\\\"\", \"%22\");",
      "right" : "return val.replaceAll(\"\\\"\", \"%22\");",
      "info" : "ReturnStatement[3857-3892]:ReturnStatement[3857-3892]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3978-3984]:Modifier[3978-3984]"
    }, {
      "left" : "Connection",
      "right" : "Connection",
      "info" : "SimpleType[3985-3995]:SimpleType[3985-3995]"
    }, {
      "left" : "url",
      "right" : "url",
      "info" : "SimpleName[3996-3999]:SimpleName[3996-3999]"
    }, {
      "left" : "URL url",
      "right" : "URL url",
      "info" : "SingleVariableDeclaration[4000-4007]:SingleVariableDeclaration[4000-4007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4009-4059]:Block[4009-4059]"
    }, {
      "left" : "req.url(url);",
      "right" : "req.url(url);",
      "info" : "ExpressionStatement[4019-4032]:ExpressionStatement[4019-4032]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[4041-4053]:ReturnStatement[4041-4053]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4065-4071]:Modifier[4065-4071]"
    }, {
      "left" : "Connection",
      "right" : "Connection",
      "info" : "SimpleType[4072-4082]:SimpleType[4072-4082]"
    }, {
      "left" : "url",
      "right" : "url",
      "info" : "SimpleName[4083-4086]:SimpleName[4083-4086]"
    }, {
      "left" : "String url",
      "right" : "String url",
      "info" : "SingleVariableDeclaration[4087-4097]:SingleVariableDeclaration[4087-4097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4099-4376]:Block[4099-4376]"
    }, {
      "left" : "Validate.notEmpty(url, \"Must supply a valid URL\");",
      "right" : "Validate.notEmpty(url, \"Must supply a valid URL\");",
      "info" : "ExpressionStatement[4109-4159]:ExpressionStatement[4109-4159]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[4168-4349]:TryStatement[4168-4349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4172-4229]:Block[4172-4229]"
    }, {
      "left" : "req.url(new URL(encodeUrl(url)));",
      "right" : "req.url(new URL(encodeUrl(url)));",
      "info" : "ExpressionStatement[4186-4219]:ExpressionStatement[4186-4219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4262-4349]:Block[4262-4349]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Malformed URL: \" + url, e);",
      "right" : "throw new IllegalArgumentException(\"Malformed URL: \" + url, e);",
      "info" : "ThrowStatement[4276-4339]:ThrowStatement[4276-4339]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[4358-4370]:ReturnStatement[4358-4370]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4382-4388]:Modifier[4382-4388]"
    }, {
      "left" : "Connection",
      "right" : "Connection",
      "info" : "SimpleType[4389-4399]:SimpleType[4389-4399]"
    }, {
      "left" : "proxy",
      "right" : "proxy",
      "info" : "SimpleName[4400-4405]:SimpleName[4400-4405]"
    }, {
      "left" : "Proxy proxy",
      "right" : "Proxy proxy",
      "info" : "SingleVariableDeclaration[4406-4417]:SingleVariableDeclaration[4406-4417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4419-4473]:Block[4419-4473]"
    }, {
      "left" : "req.proxy(proxy);",
      "right" : "req.proxy(proxy);",
      "info" : "ExpressionStatement[4429-4446]:ExpressionStatement[4429-4446]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[4455-4467]:ReturnStatement[4455-4467]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4479-4485]:Modifier[4479-4485]"
    }, {
      "left" : "Connection",
      "right" : "Connection",
      "info" : "SimpleType[4486-4496]:SimpleType[4486-4496]"
    }, {
      "left" : "proxy",
      "right" : "proxy",
      "info" : "SimpleName[4497-4502]:SimpleName[4497-4502]"
    }, {
      "left" : "String host",
      "right" : "String host",
      "info" : "SingleVariableDeclaration[4503-4514]:SingleVariableDeclaration[4503-4514]"
    }, {
      "left" : "int port",
      "right" : "int port",
      "info" : "SingleVariableDeclaration[4516-4524]:SingleVariableDeclaration[4516-4524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4526-4585]:Block[4526-4585]"
    }, {
      "left" : "req.proxy(host, port);",
      "right" : "req.proxy(host, port);",
      "info" : "ExpressionStatement[4536-4558]:ExpressionStatement[4536-4558]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[4567-4579]:ReturnStatement[4567-4579]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4591-4597]:Modifier[4591-4597]"
    }, {
      "left" : "Connection",
      "right" : "Connection",
      "info" : "SimpleType[4598-4608]:SimpleType[4598-4608]"
    }, {
      "left" : "userAgent",
      "right" : "userAgent",
      "info" : "SimpleName[4609-4618]:SimpleName[4609-4618]"
    }, {
      "left" : "String userAgent",
      "right" : "String userAgent",
      "info" : "SingleVariableDeclaration[4619-4635]:SingleVariableDeclaration[4619-4635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4637-4776]:Block[4637-4776]"
    }, {
      "left" : "Validate.notNull(userAgent, \"User agent must not be null\");",
      "right" : "Validate.notNull(userAgent, \"User agent must not be null\");",
      "info" : "ExpressionStatement[4647-4706]:ExpressionStatement[4647-4706]"
    }, {
      "left" : "req.header(USER_AGENT, userAgent);",
      "right" : "req.header(USER_AGENT, userAgent);",
      "info" : "ExpressionStatement[4715-4749]:ExpressionStatement[4715-4749]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[4758-4770]:ReturnStatement[4758-4770]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4782-4788]:Modifier[4782-4788]"
    }, {
      "left" : "Connection",
      "right" : "Connection",
      "info" : "SimpleType[4789-4799]:SimpleType[4789-4799]"
    }, {
      "left" : "timeout",
      "right" : "timeout",
      "info" : "SimpleName[4800-4807]:SimpleName[4800-4807]"
    }, {
      "left" : "int millis",
      "right" : "int millis",
      "info" : "SingleVariableDeclaration[4808-4818]:SingleVariableDeclaration[4808-4818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4820-4877]:Block[4820-4877]"
    }, {
      "left" : "req.timeout(millis);",
      "right" : "req.timeout(millis);",
      "info" : "ExpressionStatement[4830-4850]:ExpressionStatement[4830-4850]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[4859-4871]:ReturnStatement[4859-4871]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4883-4889]:Modifier[4883-4889]"
    }, {
      "left" : "Connection",
      "right" : "Connection",
      "info" : "SimpleType[4890-4900]:SimpleType[4890-4900]"
    }, {
      "left" : "maxBodySize",
      "right" : "maxBodySize",
      "info" : "SimpleName[4901-4912]:SimpleName[4901-4912]"
    }, {
      "left" : "int bytes",
      "right" : "int bytes",
      "info" : "SingleVariableDeclaration[4913-4922]:SingleVariableDeclaration[4913-4922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4924-4984]:Block[4924-4984]"
    }, {
      "left" : "req.maxBodySize(bytes);",
      "right" : "req.maxBodySize(bytes);",
      "info" : "ExpressionStatement[4934-4957]:ExpressionStatement[4934-4957]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[4966-4978]:ReturnStatement[4966-4978]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4990-4996]:Modifier[4990-4996]"
    }, {
      "left" : "Connection",
      "right" : "Connection",
      "info" : "SimpleType[4997-5007]:SimpleType[4997-5007]"
    }, {
      "left" : "followRedirects",
      "right" : "followRedirects",
      "info" : "SimpleName[5008-5023]:SimpleName[5008-5023]"
    }, {
      "left" : "boolean followRedirects",
      "right" : "boolean followRedirects",
      "info" : "SingleVariableDeclaration[5024-5047]:SingleVariableDeclaration[5024-5047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5049-5123]:Block[5049-5123]"
    }, {
      "left" : "req.followRedirects(followRedirects);",
      "right" : "req.followRedirects(followRedirects);",
      "info" : "ExpressionStatement[5059-5096]:ExpressionStatement[5059-5096]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[5105-5117]:ReturnStatement[5105-5117]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5129-5135]:Modifier[5129-5135]"
    }, {
      "left" : "Connection",
      "right" : "Connection",
      "info" : "SimpleType[5136-5146]:SimpleType[5136-5146]"
    }, {
      "left" : "referrer",
      "right" : "referrer",
      "info" : "SimpleName[5147-5155]:SimpleName[5147-5155]"
    }, {
      "left" : "String referrer",
      "right" : "String referrer",
      "info" : "SingleVariableDeclaration[5156-5171]:SingleVariableDeclaration[5156-5171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5173-5307]:Block[5173-5307]"
    }, {
      "left" : "Validate.notNull(referrer, \"Referrer must not be null\");",
      "right" : "Validate.notNull(referrer, \"Referrer must not be null\");",
      "info" : "ExpressionStatement[5183-5239]:ExpressionStatement[5183-5239]"
    }, {
      "left" : "req.header(\"Referer\", referrer);",
      "right" : "req.header(\"Referer\", referrer);",
      "info" : "ExpressionStatement[5248-5280]:ExpressionStatement[5248-5280]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[5289-5301]:ReturnStatement[5289-5301]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5313-5319]:Modifier[5313-5319]"
    }, {
      "left" : "Connection",
      "right" : "Connection",
      "info" : "SimpleType[5320-5330]:SimpleType[5320-5330]"
    }, {
      "left" : "method",
      "right" : "method",
      "info" : "SimpleName[5331-5337]:SimpleName[5331-5337]"
    }, {
      "left" : "Method method",
      "right" : "Method method",
      "info" : "SingleVariableDeclaration[5338-5351]:SingleVariableDeclaration[5338-5351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5353-5409]:Block[5353-5409]"
    }, {
      "left" : "req.method(method);",
      "right" : "req.method(method);",
      "info" : "ExpressionStatement[5363-5382]:ExpressionStatement[5363-5382]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[5391-5403]:ReturnStatement[5391-5403]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5415-5421]:Modifier[5415-5421]"
    }, {
      "left" : "Connection",
      "right" : "Connection",
      "info" : "SimpleType[5422-5432]:SimpleType[5422-5432]"
    }, {
      "left" : "ignoreHttpErrors",
      "right" : "ignoreHttpErrors",
      "info" : "SimpleName[5433-5449]:SimpleName[5433-5449]"
    }, {
      "left" : "boolean ignoreHttpErrors",
      "right" : "boolean ignoreHttpErrors",
      "info" : "SingleVariableDeclaration[5450-5474]:SingleVariableDeclaration[5450-5474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5476-5537]:Block[5476-5537]"
    }, {
      "left" : "req.ignoreHttpErrors(ignoreHttpErrors);",
      "right" : "req.ignoreHttpErrors(ignoreHttpErrors);",
      "info" : "ExpressionStatement[5480-5519]:ExpressionStatement[5480-5519]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[5522-5534]:ReturnStatement[5522-5534]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5543-5549]:Modifier[5543-5549]"
    }, {
      "left" : "Connection",
      "right" : "Connection",
      "info" : "SimpleType[5550-5560]:SimpleType[5550-5560]"
    }, {
      "left" : "ignoreContentType",
      "right" : "ignoreContentType",
      "info" : "SimpleName[5561-5578]:SimpleName[5561-5578]"
    }, {
      "left" : "boolean ignoreContentType",
      "right" : "boolean ignoreContentType",
      "info" : "SingleVariableDeclaration[5579-5604]:SingleVariableDeclaration[5579-5604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5606-5684]:Block[5606-5684]"
    }, {
      "left" : "req.ignoreContentType(ignoreContentType);",
      "right" : "req.ignoreContentType(ignoreContentType);",
      "info" : "ExpressionStatement[5616-5657]:ExpressionStatement[5616-5657]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[5666-5678]:ReturnStatement[5666-5678]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5691-5697]:Modifier[5691-5697]"
    }, {
      "left" : "Connection",
      "right" : "Connection",
      "info" : "SimpleType[5698-5708]:SimpleType[5698-5708]"
    }, {
      "left" : "data",
      "right" : "data",
      "info" : "SimpleName[5709-5713]:SimpleName[5709-5713]"
    }, {
      "left" : "String key",
      "right" : "String key",
      "info" : "SingleVariableDeclaration[5714-5724]:SingleVariableDeclaration[5714-5724]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[5726-5738]:SingleVariableDeclaration[5726-5738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5740-5813]:Block[5740-5813]"
    }, {
      "left" : "req.data(KeyVal.create(key, value));",
      "right" : "req.data(KeyVal.create(key, value));",
      "info" : "ExpressionStatement[5750-5786]:ExpressionStatement[5750-5786]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[5795-5807]:ReturnStatement[5795-5807]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5819-5825]:Modifier[5819-5825]"
    }, {
      "left" : "Connection",
      "right" : "Connection",
      "info" : "SimpleType[5826-5836]:SimpleType[5826-5836]"
    }, {
      "left" : "sslSocketFactory",
      "right" : "sslSocketFactory",
      "info" : "SimpleName[5837-5853]:SimpleName[5837-5853]"
    }, {
      "left" : "SSLSocketFactory sslSocketFactory",
      "right" : "SSLSocketFactory sslSocketFactory",
      "info" : "SingleVariableDeclaration[5854-5887]:SingleVariableDeclaration[5854-5887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5889-5959]:Block[5889-5959]"
    }, {
      "left" : "req.sslSocketFactory(sslSocketFactory);",
      "right" : "req.sslSocketFactory(sslSocketFactory);",
      "info" : "ExpressionStatement[5896-5935]:ExpressionStatement[5896-5935]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[5941-5953]:ReturnStatement[5941-5953]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5965-5971]:Modifier[5965-5971]"
    }, {
      "left" : "Connection",
      "right" : "Connection",
      "info" : "SimpleType[5972-5982]:SimpleType[5972-5982]"
    }, {
      "left" : "data",
      "right" : "data",
      "info" : "SimpleName[5983-5987]:SimpleName[5983-5987]"
    }, {
      "left" : "String key",
      "right" : "String key",
      "info" : "SingleVariableDeclaration[5988-5998]:SingleVariableDeclaration[5988-5998]"
    }, {
      "left" : "String filename",
      "right" : "String filename",
      "info" : "SingleVariableDeclaration[6000-6015]:SingleVariableDeclaration[6000-6015]"
    }, {
      "left" : "InputStream inputStream",
      "right" : "InputStream inputStream",
      "info" : "SingleVariableDeclaration[6017-6040]:SingleVariableDeclaration[6017-6040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6042-6131]:Block[6042-6131]"
    }, {
      "left" : "req.data(KeyVal.create(key, filename, inputStream));",
      "right" : "req.data(KeyVal.create(key, filename, inputStream));",
      "info" : "ExpressionStatement[6052-6104]:ExpressionStatement[6052-6104]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[6113-6125]:ReturnStatement[6113-6125]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6137-6146]:MarkerAnnotation[6137-6146]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6151-6157]:Modifier[6151-6157]"
    }, {
      "left" : "Connection",
      "right" : "Connection",
      "info" : "SimpleType[6158-6168]:SimpleType[6158-6168]"
    }, {
      "left" : "data",
      "right" : "data",
      "info" : "SimpleName[6169-6173]:SimpleName[6169-6173]"
    }, {
      "left" : "String key",
      "right" : "String key",
      "info" : "SingleVariableDeclaration[6174-6184]:SingleVariableDeclaration[6174-6184]"
    }, {
      "left" : "String filename",
      "right" : "String filename",
      "info" : "SingleVariableDeclaration[6186-6201]:SingleVariableDeclaration[6186-6201]"
    }, {
      "left" : "InputStream inputStream",
      "right" : "InputStream inputStream",
      "info" : "SingleVariableDeclaration[6203-6226]:SingleVariableDeclaration[6203-6226]"
    }, {
      "left" : "String contentType",
      "right" : "String contentType",
      "info" : "SingleVariableDeclaration[6228-6246]:SingleVariableDeclaration[6228-6246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6248-6362]:Block[6248-6362]"
    }, {
      "left" : "req.data(KeyVal.create(key, filename, inputStream).contentType(contentType));",
      "right" : "req.data(KeyVal.create(key, filename, inputStream).contentType(contentType));",
      "info" : "ExpressionStatement[6258-6335]:ExpressionStatement[6258-6335]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[6344-6356]:ReturnStatement[6344-6356]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6368-6374]:Modifier[6368-6374]"
    }, {
      "left" : "Connection",
      "right" : "Connection",
      "info" : "SimpleType[6375-6385]:SimpleType[6375-6385]"
    }, {
      "left" : "data",
      "right" : "data",
      "info" : "SimpleName[6386-6390]:SimpleName[6386-6390]"
    }, {
      "left" : "Map<String, String> data",
      "right" : "Map<String, String> data",
      "info" : "SingleVariableDeclaration[6391-6415]:SingleVariableDeclaration[6391-6415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6417-6653]:Block[6417-6653]"
    }, {
      "left" : "Validate.notNull(data, \"Data map must not be null\");",
      "right" : "Validate.notNull(data, \"Data map must not be null\");",
      "info" : "ExpressionStatement[6427-6479]:ExpressionStatement[6427-6479]"
    }, {
      "left" : "for (Map.Entry<String, String> entry : data.entrySet())",
      "right" : "for (Map.Entry<String, String> entry : data.entrySet())",
      "info" : "EnhancedForStatement[6488-6626]:EnhancedForStatement[6488-6626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6544-6626]:Block[6544-6626]"
    }, {
      "left" : "req.data(KeyVal.create(entry.getKey(), entry.getValue()));",
      "right" : "req.data(KeyVal.create(entry.getKey(), entry.getValue()));",
      "info" : "ExpressionStatement[6558-6616]:ExpressionStatement[6558-6616]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[6635-6647]:ReturnStatement[6635-6647]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6659-6665]:Modifier[6659-6665]"
    }, {
      "left" : "Connection",
      "right" : "Connection",
      "info" : "SimpleType[6666-6676]:SimpleType[6666-6676]"
    }, {
      "left" : "data",
      "right" : "data",
      "info" : "SimpleName[6677-6681]:SimpleName[6677-6681]"
    }, {
      "left" : "String... keyvals",
      "right" : "String... keyvals",
      "info" : "SingleVariableDeclaration[6682-6699]:SingleVariableDeclaration[6682-6699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6701-7228]:Block[6701-7228]"
    }, {
      "left" : "Validate.notNull(keyvals, \"Data key value pairs must not be null\");",
      "right" : "Validate.notNull(keyvals, \"Data key value pairs must not be null\");",
      "info" : "ExpressionStatement[6711-6778]:ExpressionStatement[6711-6778]"
    }, {
      "left" : "Validate.isTrue(keyvals.length %2 == 0, \"Must supply an even number of key value pairs\");",
      "right" : "Validate.isTrue(keyvals.length %2 == 0, \"Must supply an even number of key value pairs\");",
      "info" : "ExpressionStatement[6787-6876]:ExpressionStatement[6787-6876]"
    }, {
      "left" : "for (int i = 0; i < keyvals.length; i += 2)",
      "right" : "for (int i = 0; i < keyvals.length; i += 2)",
      "info" : "ForStatement[6885-7201]:ForStatement[6885-7201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6929-7201]:Block[6929-7201]"
    }, {
      "left" : "String key = keyvals[i];",
      "right" : "String key = keyvals[i];",
      "info" : "VariableDeclarationStatement[6943-6967]:VariableDeclarationStatement[6943-6967]"
    }, {
      "left" : "String value = keyvals[i+1];",
      "right" : "String value = keyvals[i+1];",
      "info" : "VariableDeclarationStatement[6980-7008]:VariableDeclarationStatement[6980-7008]"
    }, {
      "left" : "Validate.notEmpty(key, \"Data key must not be empty\");",
      "right" : "Validate.notEmpty(key, \"Data key must not be empty\");",
      "info" : "ExpressionStatement[7021-7074]:ExpressionStatement[7021-7074]"
    }, {
      "left" : "Validate.notNull(value, \"Data value must not be null\");",
      "right" : "Validate.notNull(value, \"Data value must not be null\");",
      "info" : "ExpressionStatement[7087-7142]:ExpressionStatement[7087-7142]"
    }, {
      "left" : "req.data(KeyVal.create(key, value));",
      "right" : "req.data(KeyVal.create(key, value));",
      "info" : "ExpressionStatement[7155-7191]:ExpressionStatement[7155-7191]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[7210-7222]:ReturnStatement[7210-7222]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7234-7240]:Modifier[7234-7240]"
    }, {
      "left" : "Connection",
      "right" : "Connection",
      "info" : "SimpleType[7241-7251]:SimpleType[7241-7251]"
    }, {
      "left" : "data",
      "right" : "data",
      "info" : "SimpleName[7252-7256]:SimpleName[7252-7256]"
    }, {
      "left" : "Collection<Connection.KeyVal> data",
      "right" : "Collection<Connection.KeyVal> data",
      "info" : "SingleVariableDeclaration[7257-7291]:SingleVariableDeclaration[7257-7291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7293-7474]:Block[7293-7474]"
    }, {
      "left" : "Validate.notNull(data, \"Data collection must not be null\");",
      "right" : "Validate.notNull(data, \"Data collection must not be null\");",
      "info" : "ExpressionStatement[7303-7362]:ExpressionStatement[7303-7362]"
    }, {
      "left" : "for (Connection.KeyVal entry: data)",
      "right" : "for (Connection.KeyVal entry: data)",
      "info" : "EnhancedForStatement[7371-7447]:EnhancedForStatement[7371-7447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7407-7447]:Block[7407-7447]"
    }, {
      "left" : "req.data(entry);",
      "right" : "req.data(entry);",
      "info" : "ExpressionStatement[7421-7437]:ExpressionStatement[7421-7437]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[7456-7468]:ReturnStatement[7456-7468]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7480-7486]:Modifier[7480-7486]"
    }, {
      "left" : "Connection.KeyVal",
      "right" : "Connection.KeyVal",
      "info" : "SimpleType[7487-7504]:SimpleType[7487-7504]"
    }, {
      "left" : "data",
      "right" : "data",
      "info" : "SimpleName[7505-7509]:SimpleName[7505-7509]"
    }, {
      "left" : "String key",
      "right" : "String key",
      "info" : "SingleVariableDeclaration[7510-7520]:SingleVariableDeclaration[7510-7520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7522-7755]:Block[7522-7755]"
    }, {
      "left" : "Validate.notEmpty(key, \"Data key must not be empty\");",
      "right" : "Validate.notEmpty(key, \"Data key must not be empty\");",
      "info" : "ExpressionStatement[7532-7585]:ExpressionStatement[7532-7585]"
    }, {
      "left" : "for (Connection.KeyVal keyVal : request().data())",
      "right" : "for (Connection.KeyVal keyVal : request().data())",
      "info" : "EnhancedForStatement[7594-7728]:EnhancedForStatement[7594-7728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7644-7728]:Block[7644-7728]"
    }, {
      "left" : "if (keyVal.key().equals(key))",
      "right" : "if (keyVal.key().equals(key))",
      "info" : "IfStatement[7658-7718]:IfStatement[7658-7718]"
    }, {
      "left" : "return keyVal;",
      "right" : "return keyVal;",
      "info" : "ReturnStatement[7704-7718]:ReturnStatement[7704-7718]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[7737-7749]:ReturnStatement[7737-7749]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7761-7767]:Modifier[7761-7767]"
    }, {
      "left" : "Connection",
      "right" : "Connection",
      "info" : "SimpleType[7768-7778]:SimpleType[7768-7778]"
    }, {
      "left" : "requestBody",
      "right" : "requestBody",
      "info" : "SimpleName[7779-7790]:SimpleName[7779-7790]"
    }, {
      "left" : "String body",
      "right" : "String body",
      "info" : "SingleVariableDeclaration[7791-7802]:SingleVariableDeclaration[7791-7802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7804-7863]:Block[7804-7863]"
    }, {
      "left" : "req.requestBody(body);",
      "right" : "req.requestBody(body);",
      "info" : "ExpressionStatement[7814-7836]:ExpressionStatement[7814-7836]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[7845-7857]:ReturnStatement[7845-7857]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7869-7875]:Modifier[7869-7875]"
    }, {
      "left" : "Connection",
      "right" : "Connection",
      "info" : "SimpleType[7876-7886]:SimpleType[7876-7886]"
    }, {
      "left" : "header",
      "right" : "header",
      "info" : "SimpleName[7887-7893]:SimpleName[7887-7893]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[7894-7905]:SingleVariableDeclaration[7894-7905]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[7907-7919]:SingleVariableDeclaration[7907-7919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7921-7982]:Block[7921-7982]"
    }, {
      "left" : "req.header(name, value);",
      "right" : "req.header(name, value);",
      "info" : "ExpressionStatement[7931-7955]:ExpressionStatement[7931-7955]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[7964-7976]:ReturnStatement[7964-7976]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7988-7994]:Modifier[7988-7994]"
    }, {
      "left" : "Connection",
      "right" : "Connection",
      "info" : "SimpleType[7995-8005]:SimpleType[7995-8005]"
    }, {
      "left" : "headers",
      "right" : "headers",
      "info" : "SimpleName[8006-8013]:SimpleName[8006-8013]"
    }, {
      "left" : "Map<String,String> headers",
      "right" : "Map<String,String> headers",
      "info" : "SingleVariableDeclaration[8014-8040]:SingleVariableDeclaration[8014-8040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8042-8271]:Block[8042-8271]"
    }, {
      "left" : "Validate.notNull(headers, \"Header map must not be null\");",
      "right" : "Validate.notNull(headers, \"Header map must not be null\");",
      "info" : "ExpressionStatement[8052-8109]:ExpressionStatement[8052-8109]"
    }, {
      "left" : "for (Map.Entry<String,String> entry : headers.entrySet())",
      "right" : "for (Map.Entry<String,String> entry : headers.entrySet())",
      "info" : "EnhancedForStatement[8118-8244]:EnhancedForStatement[8118-8244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8176-8244]:Block[8176-8244]"
    }, {
      "left" : "req.header(entry.getKey(),entry.getValue());",
      "right" : "req.header(entry.getKey(),entry.getValue());",
      "info" : "ExpressionStatement[8190-8234]:ExpressionStatement[8190-8234]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[8253-8265]:ReturnStatement[8253-8265]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8277-8283]:Modifier[8277-8283]"
    }, {
      "left" : "Connection",
      "right" : "Connection",
      "info" : "SimpleType[8284-8294]:SimpleType[8284-8294]"
    }, {
      "left" : "cookie",
      "right" : "cookie",
      "info" : "SimpleName[8295-8301]:SimpleName[8295-8301]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[8302-8313]:SingleVariableDeclaration[8302-8313]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[8315-8327]:SingleVariableDeclaration[8315-8327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8329-8390]:Block[8329-8390]"
    }, {
      "left" : "req.cookie(name, value);",
      "right" : "req.cookie(name, value);",
      "info" : "ExpressionStatement[8339-8363]:ExpressionStatement[8339-8363]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[8372-8384]:ReturnStatement[8372-8384]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8396-8402]:Modifier[8396-8402]"
    }, {
      "left" : "Connection",
      "right" : "Connection",
      "info" : "SimpleType[8403-8413]:SimpleType[8403-8413]"
    }, {
      "left" : "cookies",
      "right" : "cookies",
      "info" : "SimpleName[8414-8421]:SimpleName[8414-8421]"
    }, {
      "left" : "Map<String, String> cookies",
      "right" : "Map<String, String> cookies",
      "info" : "SingleVariableDeclaration[8422-8449]:SingleVariableDeclaration[8422-8449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8451-8682]:Block[8451-8682]"
    }, {
      "left" : "Validate.notNull(cookies, \"Cookie map must not be null\");",
      "right" : "Validate.notNull(cookies, \"Cookie map must not be null\");",
      "info" : "ExpressionStatement[8461-8518]:ExpressionStatement[8461-8518]"
    }, {
      "left" : "for (Map.Entry<String, String> entry : cookies.entrySet())",
      "right" : "for (Map.Entry<String, String> entry : cookies.entrySet())",
      "info" : "EnhancedForStatement[8527-8655]:EnhancedForStatement[8527-8655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8586-8655]:Block[8586-8655]"
    }, {
      "left" : "req.cookie(entry.getKey(), entry.getValue());",
      "right" : "req.cookie(entry.getKey(), entry.getValue());",
      "info" : "ExpressionStatement[8600-8645]:ExpressionStatement[8600-8645]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[8664-8676]:ReturnStatement[8664-8676]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8688-8694]:Modifier[8688-8694]"
    }, {
      "left" : "Connection",
      "right" : "Connection",
      "info" : "SimpleType[8695-8705]:SimpleType[8695-8705]"
    }, {
      "left" : "parser",
      "right" : "parser",
      "info" : "SimpleName[8706-8712]:SimpleName[8706-8712]"
    }, {
      "left" : "Parser parser",
      "right" : "Parser parser",
      "info" : "SingleVariableDeclaration[8713-8726]:SingleVariableDeclaration[8713-8726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8728-8784]:Block[8728-8784]"
    }, {
      "left" : "req.parser(parser);",
      "right" : "req.parser(parser);",
      "info" : "ExpressionStatement[8738-8757]:ExpressionStatement[8738-8757]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[8766-8778]:ReturnStatement[8766-8778]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8790-8796]:Modifier[8790-8796]"
    }, {
      "left" : "Document",
      "right" : "Document",
      "info" : "SimpleType[8797-8805]:SimpleType[8797-8805]"
    }, {
      "left" : "get",
      "right" : "get",
      "info" : "SimpleName[8806-8809]:SimpleName[8806-8809]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8819-8830]:SimpleType[8819-8830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8831-8917]:Block[8831-8917]"
    }, {
      "left" : "req.method(Method.GET);",
      "right" : "req.method(Method.GET);",
      "info" : "ExpressionStatement[8841-8864]:ExpressionStatement[8841-8864]"
    }, {
      "left" : "execute();",
      "right" : "execute();",
      "info" : "ExpressionStatement[8873-8883]:ExpressionStatement[8873-8883]"
    }, {
      "left" : "return res.parse();",
      "right" : "return res.parse();",
      "info" : "ReturnStatement[8892-8911]:ReturnStatement[8892-8911]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8923-8929]:Modifier[8923-8929]"
    }, {
      "left" : "Document",
      "right" : "Document",
      "info" : "SimpleType[8930-8938]:SimpleType[8930-8938]"
    }, {
      "left" : "post",
      "right" : "post",
      "info" : "SimpleName[8939-8943]:SimpleName[8939-8943]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8953-8964]:SimpleType[8953-8964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8965-9052]:Block[8965-9052]"
    }, {
      "left" : "req.method(Method.POST);",
      "right" : "req.method(Method.POST);",
      "info" : "ExpressionStatement[8975-8999]:ExpressionStatement[8975-8999]"
    }, {
      "left" : "execute();",
      "right" : "execute();",
      "info" : "ExpressionStatement[9008-9018]:ExpressionStatement[9008-9018]"
    }, {
      "left" : "return res.parse();",
      "right" : "return res.parse();",
      "info" : "ReturnStatement[9027-9046]:ReturnStatement[9027-9046]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9058-9064]:Modifier[9058-9064]"
    }, {
      "left" : "Connection.Response",
      "right" : "Connection.Response",
      "info" : "SimpleType[9065-9084]:SimpleType[9065-9084]"
    }, {
      "left" : "execute",
      "right" : "execute",
      "info" : "SimpleName[9085-9092]:SimpleName[9085-9092]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[9102-9113]:SimpleType[9102-9113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9114-9178]:Block[9114-9178]"
    }, {
      "left" : "res = Response.execute(req);",
      "right" : "res = Response.execute(req);",
      "info" : "ExpressionStatement[9124-9152]:ExpressionStatement[9124-9152]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[9161-9172]:ReturnStatement[9161-9172]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9184-9190]:Modifier[9184-9190]"
    }, {
      "left" : "Connection.Request",
      "right" : "Connection.Request",
      "info" : "SimpleType[9191-9209]:SimpleType[9191-9209]"
    }, {
      "left" : "request",
      "right" : "request",
      "info" : "SimpleName[9210-9217]:SimpleName[9210-9217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9220-9247]:Block[9220-9247]"
    }, {
      "left" : "return req;",
      "right" : "return req;",
      "info" : "ReturnStatement[9230-9241]:ReturnStatement[9230-9241]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9253-9259]:Modifier[9253-9259]"
    }, {
      "left" : "Connection",
      "right" : "Connection",
      "info" : "SimpleType[9260-9270]:SimpleType[9260-9270]"
    }, {
      "left" : "request",
      "right" : "request",
      "info" : "SimpleName[9271-9278]:SimpleName[9271-9278]"
    }, {
      "left" : "Connection.Request request",
      "right" : "Connection.Request request",
      "info" : "SingleVariableDeclaration[9279-9305]:SingleVariableDeclaration[9279-9305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9307-9358]:Block[9307-9358]"
    }, {
      "left" : "req = request;",
      "right" : "req = request;",
      "info" : "ExpressionStatement[9317-9331]:ExpressionStatement[9317-9331]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[9340-9352]:ReturnStatement[9340-9352]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9364-9370]:Modifier[9364-9370]"
    }, {
      "left" : "Connection.Response",
      "right" : "Connection.Response",
      "info" : "SimpleType[9371-9390]:SimpleType[9371-9390]"
    }, {
      "left" : "response",
      "right" : "response",
      "info" : "SimpleName[9391-9399]:SimpleName[9391-9399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9402-9429]:Block[9402-9429]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[9412-9423]:ReturnStatement[9412-9423]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9435-9441]:Modifier[9435-9441]"
    }, {
      "left" : "Connection",
      "right" : "Connection",
      "info" : "SimpleType[9442-9452]:SimpleType[9442-9452]"
    }, {
      "left" : "response",
      "right" : "response",
      "info" : "SimpleName[9453-9461]:SimpleName[9453-9461]"
    }, {
      "left" : "Connection.Response response",
      "right" : "Connection.Response response",
      "info" : "SingleVariableDeclaration[9462-9490]:SingleVariableDeclaration[9462-9490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9492-9544]:Block[9492-9544]"
    }, {
      "left" : "res = response;",
      "right" : "res = response;",
      "info" : "ExpressionStatement[9502-9517]:ExpressionStatement[9502-9517]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[9526-9538]:ReturnStatement[9526-9538]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9550-9556]:Modifier[9550-9556]"
    }, {
      "left" : "Connection",
      "right" : "Connection",
      "info" : "SimpleType[9557-9567]:SimpleType[9557-9567]"
    }, {
      "left" : "postDataCharset",
      "right" : "postDataCharset",
      "info" : "SimpleName[9568-9583]:SimpleName[9568-9583]"
    }, {
      "left" : "String charset",
      "right" : "String charset",
      "info" : "SingleVariableDeclaration[9584-9598]:SingleVariableDeclaration[9584-9598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9600-9666]:Block[9600-9666]"
    }, {
      "left" : "req.postDataCharset(charset);",
      "right" : "req.postDataCharset(charset);",
      "info" : "ExpressionStatement[9610-9639]:ExpressionStatement[9610-9639]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[9648-9660]:ReturnStatement[9648-9660]"
    }, {
      "left" : "@SuppressWarnings({\"unchecked\"})",
      "right" : "@SuppressWarnings({\"unchecked\"})",
      "info" : "SingleMemberAnnotation[9672-9704]:SingleMemberAnnotation[9672-9704]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9932-9939]:Modifier[9932-9939]"
    }, {
      "left" : "Base",
      "right" : "Base",
      "info" : "SimpleName[9940-9944]:SimpleName[9940-9944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9947-10048]:Block[9947-10048]"
    }, {
      "left" : "headers = new LinkedHashMap<>();",
      "right" : "headers = new LinkedHashMap<>();",
      "info" : "ExpressionStatement[9961-9993]:ExpressionStatement[9961-9993]"
    }, {
      "left" : "cookies = new LinkedHashMap<>();",
      "right" : "cookies = new LinkedHashMap<>();",
      "info" : "ExpressionStatement[10006-10038]:ExpressionStatement[10006-10038]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10058-10064]:Modifier[10058-10064]"
    }, {
      "left" : "URL",
      "right" : "URL",
      "info" : "SimpleType[10065-10068]:SimpleType[10065-10068]"
    }, {
      "left" : "url",
      "right" : "url",
      "info" : "SimpleName[10069-10072]:SimpleName[10069-10072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10075-10110]:Block[10075-10110]"
    }, {
      "left" : "return url;",
      "right" : "return url;",
      "info" : "ReturnStatement[10089-10100]:ReturnStatement[10089-10100]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10120-10126]:Modifier[10120-10126]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[10127-10128]:SimpleType[10127-10128]"
    }, {
      "left" : "url",
      "right" : "url",
      "info" : "SimpleName[10129-10132]:SimpleName[10129-10132]"
    }, {
      "left" : "URL url",
      "right" : "URL url",
      "info" : "SingleVariableDeclaration[10133-10140]:SingleVariableDeclaration[10133-10140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10142-10269]:Block[10142-10269]"
    }, {
      "left" : "Validate.notNull(url, \"URL must not be null\");",
      "right" : "Validate.notNull(url, \"URL must not be null\");",
      "info" : "ExpressionStatement[10156-10202]:ExpressionStatement[10156-10202]"
    }, {
      "left" : "this.url = url;",
      "right" : "this.url = url;",
      "info" : "ExpressionStatement[10215-10230]:ExpressionStatement[10215-10230]"
    }, {
      "left" : "return (T) this;",
      "right" : "return (T) this;",
      "info" : "ReturnStatement[10243-10259]:ReturnStatement[10243-10259]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10279-10285]:Modifier[10279-10285]"
    }, {
      "left" : "Method",
      "right" : "Method",
      "info" : "SimpleType[10286-10292]:SimpleType[10286-10292]"
    }, {
      "left" : "method",
      "right" : "method",
      "info" : "SimpleName[10293-10299]:SimpleName[10293-10299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10302-10340]:Block[10302-10340]"
    }, {
      "left" : "return method;",
      "right" : "return method;",
      "info" : "ReturnStatement[10316-10330]:ReturnStatement[10316-10330]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10350-10356]:Modifier[10350-10356]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[10357-10358]:SimpleType[10357-10358]"
    }, {
      "left" : "method",
      "right" : "method",
      "info" : "SimpleName[10359-10365]:SimpleName[10359-10365]"
    }, {
      "left" : "Method method",
      "right" : "Method method",
      "info" : "SingleVariableDeclaration[10366-10379]:SingleVariableDeclaration[10366-10379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10381-10520]:Block[10381-10520]"
    }, {
      "left" : "Validate.notNull(method, \"Method must not be null\");",
      "right" : "Validate.notNull(method, \"Method must not be null\");",
      "info" : "ExpressionStatement[10395-10447]:ExpressionStatement[10395-10447]"
    }, {
      "left" : "this.method = method;",
      "right" : "this.method = method;",
      "info" : "ExpressionStatement[10460-10481]:ExpressionStatement[10460-10481]"
    }, {
      "left" : "return (T) this;",
      "right" : "return (T) this;",
      "info" : "ReturnStatement[10494-10510]:ReturnStatement[10494-10510]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10530-10536]:Modifier[10530-10536]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[10537-10543]:SimpleType[10537-10543]"
    }, {
      "left" : "header",
      "right" : "header",
      "info" : "SimpleName[10544-10550]:SimpleName[10544-10550]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[10551-10562]:SingleVariableDeclaration[10551-10562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10564-10916]:Block[10564-10916]"
    }, {
      "left" : "Validate.notNull(name, \"Header name must not be null\");",
      "right" : "Validate.notNull(name, \"Header name must not be null\");",
      "info" : "ExpressionStatement[10578-10633]:ExpressionStatement[10578-10633]"
    }, {
      "left" : "List<String> vals = getHeadersCaseInsensitive(name);",
      "right" : "List<String> vals = getHeadersCaseInsensitive(name);",
      "info" : "VariableDeclarationStatement[10646-10698]:VariableDeclarationStatement[10646-10698]"
    }, {
      "left" : "if (vals.size() > 0)",
      "right" : "if (vals.size() > 0)",
      "info" : "IfStatement[10711-10880]:IfStatement[10711-10880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10732-10880]:Block[10732-10880]"
    }, {
      "left" : "return StringUtil.join(vals, \", \");",
      "right" : "return StringUtil.join(vals, \", \");",
      "info" : "ReturnStatement[10831-10866]:ReturnStatement[10831-10866]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10894-10906]:ReturnStatement[10894-10906]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10926-10935]:MarkerAnnotation[10926-10935]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10944-10950]:Modifier[10944-10950]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[10951-10952]:SimpleType[10951-10952]"
    }, {
      "left" : "addHeader",
      "right" : "addHeader",
      "info" : "SimpleName[10953-10962]:SimpleName[10953-10962]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[10963-10974]:SingleVariableDeclaration[10963-10974]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[10976-10988]:SingleVariableDeclaration[10976-10988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10990-11353]:Block[10990-11353]"
    }, {
      "left" : "Validate.notEmpty(name);",
      "right" : "Validate.notEmpty(name);",
      "info" : "ExpressionStatement[11004-11028]:ExpressionStatement[11004-11028]"
    }, {
      "left" : "value = value == null ? \"\" : value;",
      "right" : "value = value == null ? \"\" : value;",
      "info" : "ExpressionStatement[11041-11076]:ExpressionStatement[11041-11076]"
    }, {
      "left" : "List<String> values = headers(name);",
      "right" : "List<String> values = headers(name);",
      "info" : "VariableDeclarationStatement[11090-11126]:VariableDeclarationStatement[11090-11126]"
    }, {
      "left" : "if (values.isEmpty())",
      "right" : "if (values.isEmpty())",
      "info" : "IfStatement[11139-11263]:IfStatement[11139-11263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11161-11263]:Block[11161-11263]"
    }, {
      "left" : "values = new ArrayList<>();",
      "right" : "values = new ArrayList<>();",
      "info" : "ExpressionStatement[11179-11206]:ExpressionStatement[11179-11206]"
    }, {
      "left" : "headers.put(name, values);",
      "right" : "headers.put(name, values);",
      "info" : "ExpressionStatement[11223-11249]:ExpressionStatement[11223-11249]"
    }, {
      "left" : "values.add(fixHeaderEncoding(value));",
      "right" : "values.add(fixHeaderEncoding(value));",
      "info" : "ExpressionStatement[11276-11313]:ExpressionStatement[11276-11313]"
    }, {
      "left" : "return (T) this;",
      "right" : "return (T) this;",
      "info" : "ReturnStatement[11327-11343]:ReturnStatement[11327-11343]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11363-11372]:MarkerAnnotation[11363-11372]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11381-11387]:Modifier[11381-11387]"
    }, {
      "left" : "List<String>",
      "right" : "List<String>",
      "info" : "ParameterizedType[11388-11400]:ParameterizedType[11388-11400]"
    }, {
      "left" : "headers",
      "right" : "headers",
      "info" : "SimpleName[11401-11408]:SimpleName[11401-11408]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[11409-11420]:SingleVariableDeclaration[11409-11420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11422-11522]:Block[11422-11522]"
    }, {
      "left" : "Validate.notEmpty(name);",
      "right" : "Validate.notEmpty(name);",
      "info" : "ExpressionStatement[11436-11460]:ExpressionStatement[11436-11460]"
    }, {
      "left" : "return getHeadersCaseInsensitive(name);",
      "right" : "return getHeadersCaseInsensitive(name);",
      "info" : "ReturnStatement[11473-11512]:ReturnStatement[11473-11512]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11532-11539]:Modifier[11532-11539]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11540-11546]:Modifier[11540-11546]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[11547-11553]:SimpleType[11547-11553]"
    }, {
      "left" : "fixHeaderEncoding",
      "right" : "fixHeaderEncoding",
      "info" : "SimpleName[11554-11571]:SimpleName[11554-11571]"
    }, {
      "left" : "String val",
      "right" : "String val",
      "info" : "SingleVariableDeclaration[11572-11582]:SingleVariableDeclaration[11572-11582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11584-11958]:Block[11584-11958]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11598-11948]:TryStatement[11598-11948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11602-11802]:Block[11602-11802]"
    }, {
      "left" : "byte[] bytes = val.getBytes(\"ISO-8859-1\");",
      "right" : "byte[] bytes = val.getBytes(\"ISO-8859-1\");",
      "info" : "VariableDeclarationStatement[11620-11662]:VariableDeclarationStatement[11620-11662]"
    }, {
      "left" : "if (!looksLikeUtf8(bytes))",
      "right" : "if (!looksLikeUtf8(bytes))",
      "info" : "IfStatement[11679-11737]:IfStatement[11679-11737]"
    }, {
      "left" : "return val;",
      "right" : "return val;",
      "info" : "ReturnStatement[11726-11737]:ReturnStatement[11726-11737]"
    }, {
      "left" : "return new String(bytes, \"UTF-8\");",
      "right" : "return new String(bytes, \"UTF-8\");",
      "info" : "ReturnStatement[11754-11788]:ReturnStatement[11754-11788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11842-11948]:Block[11842-11948]"
    }, {
      "left" : "return val;",
      "right" : "return val;",
      "info" : "ReturnStatement[11923-11934]:ReturnStatement[11923-11934]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11968-11975]:Modifier[11968-11975]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11976-11982]:Modifier[11976-11982]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11983-11990]:PrimitiveType[11983-11990]"
    }, {
      "left" : "looksLikeUtf8",
      "right" : "looksLikeUtf8",
      "info" : "SimpleName[11991-12004]:SimpleName[11991-12004]"
    }, {
      "left" : "byte[] input",
      "right" : "byte[] input",
      "info" : "SingleVariableDeclaration[12005-12017]:SingleVariableDeclaration[12005-12017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12019-13063]:Block[12019-13138]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[12033-12043]:VariableDeclarationStatement[12033-12043]"
    }, {
      "left" : "if (input.length >= 3 && (input[0] & 0xFF) == 0xEF\n                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF)",
      "right" : "if (input.length >= 3 && (input[0] & 0xFF) == 0xEF\n                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF)",
      "info" : "IfStatement[12076-12239]:IfStatement[12076-12239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12201-12239]:Block[12201-12239]"
    }, {
      "left" : "i = 3;",
      "right" : "i = 3;",
      "info" : "ExpressionStatement[12219-12225]:ExpressionStatement[12219-12225]"
    }, {
      "left" : "int end;",
      "right" : "int end;",
      "info" : "VariableDeclarationStatement[12253-12261]:VariableDeclarationStatement[12253-12261]"
    }, {
      "left" : "for (int j = input.length; i < j; ++i)",
      "right" : "for (int j = input.length; i < j; ++i)",
      "info" : "ForStatement[12274-13028]:ForStatement[12274-13103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12313-13028]:Block[12313-13103]"
    }, {
      "left" : "int o = input[i];",
      "right" : "int o = input[i];",
      "info" : "VariableDeclarationStatement[12331-12348]:VariableDeclarationStatement[12331-12348]"
    }, {
      "left" : "if ((o & 0x80) == 0)",
      "right" : "if ((o & 0x80) == 0)",
      "info" : "IfStatement[12365-12444]:IfStatement[12365-12444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12386-12444]:Block[12386-12444]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[12408-12417]:ContinueStatement[12408-12417]"
    }, {
      "left" : "if ((o & 0xE0) == 0xC0)",
      "right" : "if ((o & 0xE0) == 0xC0)",
      "info" : "IfStatement[12496-12795]:IfStatement[12496-12795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12520-12572]:Block[12520-12572]"
    }, {
      "left" : "end = i + 1;",
      "right" : "end = i + 1;",
      "info" : "ExpressionStatement[12542-12554]:ExpressionStatement[12542-12554]"
    }, {
      "left" : "if ((o & 0xF0) == 0xE0)",
      "right" : "if ((o & 0xF0) == 0xE0)",
      "info" : "IfStatement[12578-12795]:IfStatement[12578-12795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12602-12654]:Block[12602-12654]"
    }, {
      "left" : "end = i + 2;",
      "right" : "end = i + 2;",
      "info" : "ExpressionStatement[12624-12636]:ExpressionStatement[12624-12636]"
    }, {
      "left" : "if ((o & 0xF8) == 0xF0)",
      "right" : "if ((o & 0xF8) == 0xF0)",
      "info" : "IfStatement[12660-12795]:IfStatement[12660-12795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12684-12736]:Block[12684-12736]"
    }, {
      "left" : "end = i + 3;",
      "right" : "end = i + 3;",
      "info" : "ExpressionStatement[12706-12718]:ExpressionStatement[12706-12718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12742-12795]:Block[12742-12795]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12764-12777]:ReturnStatement[12764-12777]"
    }, {
      "left" : "while (i < end)",
      "right" : "while (i < end)",
      "info" : "WhileStatement[12814-13014]:WhileStatement[12889-13089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12830-13014]:Block[12905-13089]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[12852-12856]:ExpressionStatement[12927-12931]"
    }, {
      "left" : "o = input[i];",
      "right" : "o = input[i];",
      "info" : "ExpressionStatement[12877-12890]:ExpressionStatement[12952-12965]"
    }, {
      "left" : "if ((o & 0xC0) != 0x80)",
      "right" : "if ((o & 0xC0) != 0x80)",
      "info" : "IfStatement[12911-12996]:IfStatement[12986-13071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12935-12996]:Block[13010-13071]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12961-12974]:ReturnStatement[13036-13049]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[13041-13053]:ReturnStatement[13116-13128]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13073-13079]:Modifier[13148-13154]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[13080-13081]:SimpleType[13155-13156]"
    }, {
      "left" : "header",
      "right" : "header",
      "info" : "SimpleName[13082-13088]:SimpleName[13157-13163]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[13089-13100]:SingleVariableDeclaration[13164-13175]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[13102-13114]:SingleVariableDeclaration[13177-13189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13116-13363]:Block[13191-13438]"
    }, {
      "left" : "Validate.notEmpty(name, \"Header name must not be empty\");",
      "right" : "Validate.notEmpty(name, \"Header name must not be empty\");",
      "info" : "ExpressionStatement[13130-13187]:ExpressionStatement[13205-13262]"
    }, {
      "left" : "removeHeader(name);",
      "right" : "removeHeader(name);",
      "info" : "ExpressionStatement[13200-13219]:ExpressionStatement[13275-13294]"
    }, {
      "left" : "addHeader(name, value);",
      "right" : "addHeader(name, value);",
      "info" : "ExpressionStatement[13301-13324]:ExpressionStatement[13376-13399]"
    }, {
      "left" : "return (T) this;",
      "right" : "return (T) this;",
      "info" : "ReturnStatement[13337-13353]:ReturnStatement[13412-13428]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13373-13379]:Modifier[13448-13454]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[13380-13387]:PrimitiveType[13455-13462]"
    }, {
      "left" : "hasHeader",
      "right" : "hasHeader",
      "info" : "SimpleName[13388-13397]:SimpleName[13463-13472]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[13398-13409]:SingleVariableDeclaration[13473-13484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13411-13556]:Block[13486-13631]"
    }, {
      "left" : "Validate.notEmpty(name, \"Header name must not be empty\");",
      "right" : "Validate.notEmpty(name, \"Header name must not be empty\");",
      "info" : "ExpressionStatement[13425-13482]:ExpressionStatement[13500-13557]"
    }, {
      "left" : "return getHeadersCaseInsensitive(name).size() != 0;",
      "right" : "return getHeadersCaseInsensitive(name).size() != 0;",
      "info" : "ReturnStatement[13495-13546]:ReturnStatement[13570-13621]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13670-13676]:Modifier[13745-13751]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[13677-13684]:PrimitiveType[13752-13759]"
    }, {
      "left" : "hasHeaderWithValue",
      "right" : "hasHeaderWithValue",
      "info" : "SimpleName[13685-13703]:SimpleName[13760-13778]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[13704-13715]:SingleVariableDeclaration[13779-13790]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[13717-13729]:SingleVariableDeclaration[13792-13804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13731-14040]:Block[13806-14115]"
    }, {
      "left" : "Validate.notEmpty(name);",
      "right" : "Validate.notEmpty(name);",
      "info" : "ExpressionStatement[13745-13769]:ExpressionStatement[13820-13844]"
    }, {
      "left" : "Validate.notEmpty(value);",
      "right" : "Validate.notEmpty(value);",
      "info" : "ExpressionStatement[13782-13807]:ExpressionStatement[13857-13882]"
    }, {
      "left" : "List<String> values = headers(name);",
      "right" : "List<String> values = headers(name);",
      "info" : "VariableDeclarationStatement[13820-13856]:VariableDeclarationStatement[13895-13931]"
    }, {
      "left" : "for (String candidate : values)",
      "right" : "for (String candidate : values)",
      "info" : "EnhancedForStatement[13869-14004]:EnhancedForStatement[13944-14079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13901-14004]:Block[13976-14079]"
    }, {
      "left" : "if (value.equalsIgnoreCase(candidate))",
      "right" : "if (value.equalsIgnoreCase(candidate))",
      "info" : "IfStatement[13919-13990]:IfStatement[13994-14065]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[13978-13990]:ReturnStatement[14053-14065]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14017-14030]:ReturnStatement[14092-14105]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14050-14056]:Modifier[14125-14131]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[14057-14058]:SimpleType[14132-14133]"
    }, {
      "left" : "removeHeader",
      "right" : "removeHeader",
      "info" : "SimpleName[14059-14071]:SimpleName[14134-14146]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[14072-14083]:SingleVariableDeclaration[14147-14158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14085-14403]:Block[14160-14478]"
    }, {
      "left" : "Validate.notEmpty(name, \"Header name must not be empty\");",
      "right" : "Validate.notEmpty(name, \"Header name must not be empty\");",
      "info" : "ExpressionStatement[14099-14156]:ExpressionStatement[14174-14231]"
    }, {
      "left" : "Map.Entry<String, List<String>> entry = scanHeaders(name);",
      "right" : "Map.Entry<String, List<String>> entry = scanHeaders(name);",
      "info" : "VariableDeclarationStatement[14169-14227]:VariableDeclarationStatement[14244-14302]"
    }, {
      "left" : "if (entry != null)",
      "right" : "if (entry != null)",
      "info" : "IfStatement[14274-14340]:IfStatement[14349-14415]"
    }, {
      "left" : "headers.remove(entry.getKey());",
      "right" : "headers.remove(entry.getKey());",
      "info" : "ExpressionStatement[14309-14340]:ExpressionStatement[14384-14415]"
    }, {
      "left" : "return (T) this;",
      "right" : "return (T) this;",
      "info" : "ReturnStatement[14377-14393]:ReturnStatement[14452-14468]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14413-14419]:Modifier[14488-14494]"
    }, {
      "left" : "Map<String, String>",
      "right" : "Map<String, String>",
      "info" : "ParameterizedType[14420-14439]:ParameterizedType[14495-14514]"
    }, {
      "left" : "headers",
      "right" : "headers",
      "info" : "SimpleName[14440-14447]:SimpleName[14515-14522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14450-14858]:Block[14525-14933]"
    }, {
      "left" : "LinkedHashMap<String, String> map = new LinkedHashMap<>(headers.size());",
      "right" : "LinkedHashMap<String, String> map = new LinkedHashMap<>(headers.size());",
      "info" : "VariableDeclarationStatement[14464-14536]:VariableDeclarationStatement[14539-14611]"
    }, {
      "left" : "for (Map.Entry<String, List<String>> entry : headers.entrySet())",
      "right" : "for (Map.Entry<String, List<String>> entry : headers.entrySet())",
      "info" : "EnhancedForStatement[14549-14824]:EnhancedForStatement[14624-14899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14614-14824]:Block[14689-14899]"
    }, {
      "left" : "String header = entry.getKey();",
      "right" : "String header = entry.getKey();",
      "info" : "VariableDeclarationStatement[14632-14663]:VariableDeclarationStatement[14707-14738]"
    }, {
      "left" : "List<String> values = entry.getValue();",
      "right" : "List<String> values = entry.getValue();",
      "info" : "VariableDeclarationStatement[14680-14719]:VariableDeclarationStatement[14755-14794]"
    }, {
      "left" : "if (values.size() > 0)",
      "right" : "if (values.size() > 0)",
      "info" : "IfStatement[14736-14810]:IfStatement[14811-14885]"
    }, {
      "left" : "map.put(header, values.get(0));",
      "right" : "map.put(header, values.get(0));",
      "info" : "ExpressionStatement[14779-14810]:ExpressionStatement[14854-14885]"
    }, {
      "left" : "return map;",
      "right" : "return map;",
      "info" : "ReturnStatement[14837-14848]:ReturnStatement[14912-14923]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14868-14877]:MarkerAnnotation[14943-14952]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14886-14892]:Modifier[14961-14967]"
    }, {
      "left" : "Map<String, List<String>>",
      "right" : "Map<String, List<String>>",
      "info" : "ParameterizedType[14893-14918]:ParameterizedType[14968-14993]"
    }, {
      "left" : "multiHeaders",
      "right" : "multiHeaders",
      "info" : "SimpleName[14919-14931]:SimpleName[14994-15006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14934-14973]:Block[15009-15048]"
    }, {
      "left" : "return headers;",
      "right" : "return headers;",
      "info" : "ReturnStatement[14948-14963]:ReturnStatement[15023-15038]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14983-14990]:Modifier[15058-15065]"
    }, {
      "left" : "List<String>",
      "right" : "List<String>",
      "info" : "ParameterizedType[14991-15003]:ParameterizedType[15066-15078]"
    }, {
      "left" : "getHeadersCaseInsensitive",
      "right" : "getHeadersCaseInsensitive",
      "info" : "SimpleName[15004-15029]:SimpleName[15079-15104]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[15030-15041]:SingleVariableDeclaration[15105-15116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15043-15333]:Block[15118-15408]"
    }, {
      "left" : "Validate.notNull(name);",
      "right" : "Validate.notNull(name);",
      "info" : "ExpressionStatement[15057-15080]:ExpressionStatement[15132-15155]"
    }, {
      "left" : "for (Map.Entry<String, List<String>> entry : headers.entrySet())",
      "right" : "for (Map.Entry<String, List<String>> entry : headers.entrySet())",
      "info" : "EnhancedForStatement[15094-15278]:EnhancedForStatement[15169-15353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15159-15278]:Block[15234-15353]"
    }, {
      "left" : "if (name.equalsIgnoreCase(entry.getKey()))",
      "right" : "if (name.equalsIgnoreCase(entry.getKey()))",
      "info" : "IfStatement[15177-15264]:IfStatement[15252-15339]"
    }, {
      "left" : "return entry.getValue();",
      "right" : "return entry.getValue();",
      "info" : "ReturnStatement[15240-15264]:ReturnStatement[15315-15339]"
    }, {
      "left" : "return Collections.emptyList();",
      "right" : "return Collections.emptyList();",
      "info" : "ReturnStatement[15292-15323]:ReturnStatement[15367-15398]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15343-15350]:Modifier[15418-15425]"
    }, {
      "left" : "Map.Entry<String, List<String>>",
      "right" : "Map.Entry<String, List<String>>",
      "info" : "ParameterizedType[15351-15382]:ParameterizedType[15426-15457]"
    }, {
      "left" : "scanHeaders",
      "right" : "scanHeaders",
      "info" : "SimpleName[15383-15394]:SimpleName[15458-15469]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[15395-15406]:SingleVariableDeclaration[15470-15481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15408-15670]:Block[15483-15745]"
    }, {
      "left" : "String lc = lowerCase(name);",
      "right" : "String lc = lowerCase(name);",
      "info" : "VariableDeclarationStatement[15422-15450]:VariableDeclarationStatement[15497-15525]"
    }, {
      "left" : "for (Map.Entry<String, List<String>> entry : headers.entrySet())",
      "right" : "for (Map.Entry<String, List<String>> entry : headers.entrySet())",
      "info" : "EnhancedForStatement[15463-15635]:EnhancedForStatement[15538-15710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15528-15635]:Block[15603-15710]"
    }, {
      "left" : "if (lowerCase(entry.getKey()).equals(lc))",
      "right" : "if (lowerCase(entry.getKey()).equals(lc))",
      "info" : "IfStatement[15546-15621]:IfStatement[15621-15696]"
    }, {
      "left" : "return entry;",
      "right" : "return entry;",
      "info" : "ReturnStatement[15608-15621]:ReturnStatement[15683-15696]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[15648-15660]:ReturnStatement[15723-15735]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15680-15686]:Modifier[15755-15761]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[15687-15693]:SimpleType[15762-15768]"
    }, {
      "left" : "cookie",
      "right" : "cookie",
      "info" : "SimpleName[15694-15700]:SimpleName[15769-15775]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[15701-15712]:SingleVariableDeclaration[15776-15787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15714-15833]:Block[15789-15908]"
    }, {
      "left" : "Validate.notEmpty(name, \"Cookie name must not be empty\");",
      "right" : "Validate.notEmpty(name, \"Cookie name must not be empty\");",
      "info" : "ExpressionStatement[15728-15785]:ExpressionStatement[15803-15860]"
    }, {
      "left" : "return cookies.get(name);",
      "right" : "return cookies.get(name);",
      "info" : "ReturnStatement[15798-15823]:ReturnStatement[15873-15898]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15843-15849]:Modifier[15918-15924]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[15850-15851]:SimpleType[15925-15926]"
    }, {
      "left" : "cookie",
      "right" : "cookie",
      "info" : "SimpleName[15852-15858]:SimpleName[15927-15933]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[15859-15870]:SingleVariableDeclaration[15934-15945]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[15872-15884]:SingleVariableDeclaration[15947-15959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15886-16104]:Block[15961-16179]"
    }, {
      "left" : "Validate.notEmpty(name, \"Cookie name must not be empty\");",
      "right" : "Validate.notEmpty(name, \"Cookie name must not be empty\");",
      "info" : "ExpressionStatement[15900-15957]:ExpressionStatement[15975-16032]"
    }, {
      "left" : "Validate.notNull(value, \"Cookie value must not be null\");",
      "right" : "Validate.notNull(value, \"Cookie value must not be null\");",
      "info" : "ExpressionStatement[15970-16027]:ExpressionStatement[16045-16102]"
    }, {
      "left" : "cookies.put(name, value);",
      "right" : "cookies.put(name, value);",
      "info" : "ExpressionStatement[16040-16065]:ExpressionStatement[16115-16140]"
    }, {
      "left" : "return (T) this;",
      "right" : "return (T) this;",
      "info" : "ReturnStatement[16078-16094]:ReturnStatement[16153-16169]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16114-16120]:Modifier[16189-16195]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[16121-16128]:PrimitiveType[16196-16203]"
    }, {
      "left" : "hasCookie",
      "right" : "hasCookie",
      "info" : "SimpleName[16129-16138]:SimpleName[16204-16213]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[16139-16150]:SingleVariableDeclaration[16214-16225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16152-16279]:Block[16227-16354]"
    }, {
      "left" : "Validate.notEmpty(name, \"Cookie name must not be empty\");",
      "right" : "Validate.notEmpty(name, \"Cookie name must not be empty\");",
      "info" : "ExpressionStatement[16166-16223]:ExpressionStatement[16241-16298]"
    }, {
      "left" : "return cookies.containsKey(name);",
      "right" : "return cookies.containsKey(name);",
      "info" : "ReturnStatement[16236-16269]:ReturnStatement[16311-16344]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16289-16295]:Modifier[16364-16370]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[16296-16297]:SimpleType[16371-16372]"
    }, {
      "left" : "removeCookie",
      "right" : "removeCookie",
      "info" : "SimpleName[16298-16310]:SimpleName[16373-16385]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[16311-16322]:SingleVariableDeclaration[16386-16397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16324-16468]:Block[16399-16543]"
    }, {
      "left" : "Validate.notEmpty(name, \"Cookie name must not be empty\");",
      "right" : "Validate.notEmpty(name, \"Cookie name must not be empty\");",
      "info" : "ExpressionStatement[16338-16395]:ExpressionStatement[16413-16470]"
    }, {
      "left" : "cookies.remove(name);",
      "right" : "cookies.remove(name);",
      "info" : "ExpressionStatement[16408-16429]:ExpressionStatement[16483-16504]"
    }, {
      "left" : "return (T) this;",
      "right" : "return (T) this;",
      "info" : "ReturnStatement[16442-16458]:ReturnStatement[16517-16533]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16478-16484]:Modifier[16553-16559]"
    }, {
      "left" : "Map<String, String>",
      "right" : "Map<String, String>",
      "info" : "ParameterizedType[16485-16504]:ParameterizedType[16560-16579]"
    }, {
      "left" : "cookies",
      "right" : "cookies",
      "info" : "SimpleName[16505-16512]:SimpleName[16580-16587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16515-16554]:Block[16590-16629]"
    }, {
      "left" : "return cookies;",
      "right" : "return cookies;",
      "info" : "ReturnStatement[16529-16544]:ReturnStatement[16604-16619]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16566-16572]:Modifier[16641-16647]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[16573-16579]:Modifier[16648-16654]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[16580-16585]:TYPE_DECLARATION_KIND[16655-16660]"
    }, {
      "left" : "Request",
      "right" : "Request",
      "info" : "SimpleName[16586-16593]:SimpleName[16661-16668]"
    }, {
      "left" : "Request",
      "right" : "Request",
      "info" : "SimpleName[17273-17280]:SimpleName[17348-17355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17283-17646]:Block[17358-17721]"
    }, {
      "left" : "timeoutMilliseconds = 30000;",
      "right" : "timeoutMilliseconds = 30000;",
      "info" : "ExpressionStatement[17297-17325]:ExpressionStatement[17372-17400]"
    }, {
      "left" : "maxBodySizeBytes = 1024 * 1024;",
      "right" : "maxBodySizeBytes = 1024 * 1024;",
      "info" : "ExpressionStatement[17352-17383]:ExpressionStatement[17427-17458]"
    }, {
      "left" : "followRedirects = true;",
      "right" : "followRedirects = true;",
      "info" : "ExpressionStatement[17403-17426]:ExpressionStatement[17478-17501]"
    }, {
      "left" : "data = new ArrayList<>();",
      "right" : "data = new ArrayList<>();",
      "info" : "ExpressionStatement[17439-17464]:ExpressionStatement[17514-17539]"
    }, {
      "left" : "method = Method.GET;",
      "right" : "method = Method.GET;",
      "info" : "ExpressionStatement[17477-17497]:ExpressionStatement[17552-17572]"
    }, {
      "left" : "addHeader(\"Accept-Encoding\", \"gzip\");",
      "right" : "addHeader(\"Accept-Encoding\", \"gzip\");",
      "info" : "ExpressionStatement[17510-17547]:ExpressionStatement[17585-17622]"
    }, {
      "left" : "addHeader(USER_AGENT, DEFAULT_UA);",
      "right" : "addHeader(USER_AGENT, DEFAULT_UA);",
      "info" : "ExpressionStatement[17560-17594]:ExpressionStatement[17635-17669]"
    }, {
      "left" : "parser = Parser.htmlParser();",
      "right" : "parser = Parser.htmlParser();",
      "info" : "ExpressionStatement[17607-17636]:ExpressionStatement[17682-17711]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17656-17662]:Modifier[17731-17737]"
    }, {
      "left" : "Proxy",
      "right" : "Proxy",
      "info" : "SimpleType[17663-17668]:SimpleType[17738-17743]"
    }, {
      "left" : "proxy",
      "right" : "proxy",
      "info" : "SimpleName[17669-17674]:SimpleName[17744-17749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17677-17714]:Block[17752-17789]"
    }, {
      "left" : "return proxy;",
      "right" : "return proxy;",
      "info" : "ReturnStatement[17691-17704]:ReturnStatement[17766-17779]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17724-17730]:Modifier[17799-17805]"
    }, {
      "left" : "Request",
      "right" : "Request",
      "info" : "SimpleType[17731-17738]:SimpleType[17806-17813]"
    }, {
      "left" : "proxy",
      "right" : "proxy",
      "info" : "SimpleName[17739-17744]:SimpleName[17814-17819]"
    }, {
      "left" : "Proxy proxy",
      "right" : "Proxy proxy",
      "info" : "SingleVariableDeclaration[17745-17756]:SingleVariableDeclaration[17820-17831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17758-17826]:Block[17833-17901]"
    }, {
      "left" : "this.proxy = proxy;",
      "right" : "this.proxy = proxy;",
      "info" : "ExpressionStatement[17772-17791]:ExpressionStatement[17847-17866]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[17804-17816]:ReturnStatement[17879-17891]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17836-17842]:Modifier[17911-17917]"
    }, {
      "left" : "Request",
      "right" : "Request",
      "info" : "SimpleType[17843-17850]:SimpleType[17918-17925]"
    }, {
      "left" : "proxy",
      "right" : "proxy",
      "info" : "SimpleName[17851-17856]:SimpleName[17926-17931]"
    }, {
      "left" : "String host",
      "right" : "String host",
      "info" : "SingleVariableDeclaration[17857-17868]:SingleVariableDeclaration[17932-17943]"
    }, {
      "left" : "int port",
      "right" : "int port",
      "info" : "SingleVariableDeclaration[17870-17878]:SingleVariableDeclaration[17945-17953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17880-18017]:Block[17955-18092]"
    }, {
      "left" : "this.proxy = new Proxy(Proxy.Type.HTTP, InetSocketAddress.createUnresolved(host, port));",
      "right" : "this.proxy = new Proxy(Proxy.Type.HTTP, InetSocketAddress.createUnresolved(host, port));",
      "info" : "ExpressionStatement[17894-17982]:ExpressionStatement[17969-18057]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[17995-18007]:ReturnStatement[18070-18082]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18027-18033]:Modifier[18102-18108]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[18034-18037]:PrimitiveType[18109-18112]"
    }, {
      "left" : "timeout",
      "right" : "timeout",
      "info" : "SimpleName[18038-18045]:SimpleName[18113-18120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18048-18099]:Block[18123-18174]"
    }, {
      "left" : "return timeoutMilliseconds;",
      "right" : "return timeoutMilliseconds;",
      "info" : "ReturnStatement[18062-18089]:ReturnStatement[18137-18164]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18109-18115]:Modifier[18184-18190]"
    }, {
      "left" : "Request",
      "right" : "Request",
      "info" : "SimpleType[18116-18123]:SimpleType[18191-18198]"
    }, {
      "left" : "timeout",
      "right" : "timeout",
      "info" : "SimpleName[18124-18131]:SimpleName[18199-18206]"
    }, {
      "left" : "int millis",
      "right" : "int millis",
      "info" : "SingleVariableDeclaration[18132-18142]:SingleVariableDeclaration[18207-18217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18144-18320]:Block[18219-18395]"
    }, {
      "left" : "Validate.isTrue(millis >= 0, \"Timeout milliseconds must be 0 (infinite) or greater\");",
      "right" : "Validate.isTrue(millis >= 0, \"Timeout milliseconds must be 0 (infinite) or greater\");",
      "info" : "ExpressionStatement[18158-18243]:ExpressionStatement[18233-18318]"
    }, {
      "left" : "timeoutMilliseconds = millis;",
      "right" : "timeoutMilliseconds = millis;",
      "info" : "ExpressionStatement[18256-18285]:ExpressionStatement[18331-18360]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[18298-18310]:ReturnStatement[18373-18385]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18330-18336]:Modifier[18405-18411]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[18337-18340]:PrimitiveType[18412-18415]"
    }, {
      "left" : "maxBodySize",
      "right" : "maxBodySize",
      "info" : "SimpleName[18341-18352]:SimpleName[18416-18427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18355-18403]:Block[18430-18478]"
    }, {
      "left" : "return maxBodySizeBytes;",
      "right" : "return maxBodySizeBytes;",
      "info" : "ReturnStatement[18369-18393]:ReturnStatement[18444-18468]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18413-18419]:Modifier[18488-18494]"
    }, {
      "left" : "Connection.Request",
      "right" : "Connection.Request",
      "info" : "SimpleType[18420-18438]:SimpleType[18495-18513]"
    }, {
      "left" : "maxBodySize",
      "right" : "maxBodySize",
      "info" : "SimpleName[18439-18450]:SimpleName[18514-18525]"
    }, {
      "left" : "int bytes",
      "right" : "int bytes",
      "info" : "SingleVariableDeclaration[18451-18460]:SingleVariableDeclaration[18526-18535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18462-18620]:Block[18537-18695]"
    }, {
      "left" : "Validate.isTrue(bytes >= 0, \"maxSize must be 0 (unlimited) or larger\");",
      "right" : "Validate.isTrue(bytes >= 0, \"maxSize must be 0 (unlimited) or larger\");",
      "info" : "ExpressionStatement[18476-18547]:ExpressionStatement[18551-18622]"
    }, {
      "left" : "maxBodySizeBytes = bytes;",
      "right" : "maxBodySizeBytes = bytes;",
      "info" : "ExpressionStatement[18560-18585]:ExpressionStatement[18635-18660]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[18598-18610]:ReturnStatement[18673-18685]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18630-18636]:Modifier[18705-18711]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18637-18644]:PrimitiveType[18712-18719]"
    }, {
      "left" : "followRedirects",
      "right" : "followRedirects",
      "info" : "SimpleName[18645-18660]:SimpleName[18720-18735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18663-18710]:Block[18738-18785]"
    }, {
      "left" : "return followRedirects;",
      "right" : "return followRedirects;",
      "info" : "ReturnStatement[18677-18700]:ReturnStatement[18752-18775]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18720-18726]:Modifier[18795-18801]"
    }, {
      "left" : "Connection.Request",
      "right" : "Connection.Request",
      "info" : "SimpleType[18727-18745]:SimpleType[18802-18820]"
    }, {
      "left" : "followRedirects",
      "right" : "followRedirects",
      "info" : "SimpleName[18746-18761]:SimpleName[18821-18836]"
    }, {
      "left" : "boolean followRedirects",
      "right" : "boolean followRedirects",
      "info" : "SingleVariableDeclaration[18762-18785]:SingleVariableDeclaration[18837-18860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18787-18875]:Block[18862-18950]"
    }, {
      "left" : "this.followRedirects = followRedirects;",
      "right" : "this.followRedirects = followRedirects;",
      "info" : "ExpressionStatement[18801-18840]:ExpressionStatement[18876-18915]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[18853-18865]:ReturnStatement[18928-18940]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18885-18891]:Modifier[18960-18966]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18892-18899]:PrimitiveType[18967-18974]"
    }, {
      "left" : "ignoreHttpErrors",
      "right" : "ignoreHttpErrors",
      "info" : "SimpleName[18900-18916]:SimpleName[18975-18991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18919-18967]:Block[18994-19042]"
    }, {
      "left" : "return ignoreHttpErrors;",
      "right" : "return ignoreHttpErrors;",
      "info" : "ReturnStatement[18933-18957]:ReturnStatement[19008-19032]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18977-18983]:Modifier[19052-19058]"
    }, {
      "left" : "SSLSocketFactory",
      "right" : "SSLSocketFactory",
      "info" : "SimpleType[18984-19000]:SimpleType[19059-19075]"
    }, {
      "left" : "sslSocketFactory",
      "right" : "sslSocketFactory",
      "info" : "SimpleName[19001-19017]:SimpleName[19076-19092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19020-19068]:Block[19095-19143]"
    }, {
      "left" : "return sslSocketFactory;",
      "right" : "return sslSocketFactory;",
      "info" : "ReturnStatement[19034-19058]:ReturnStatement[19109-19133]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19078-19084]:Modifier[19153-19159]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19085-19089]:PrimitiveType[19160-19164]"
    }, {
      "left" : "sslSocketFactory",
      "right" : "sslSocketFactory",
      "info" : "SimpleName[19090-19106]:SimpleName[19165-19181]"
    }, {
      "left" : "SSLSocketFactory sslSocketFactory",
      "right" : "SSLSocketFactory sslSocketFactory",
      "info" : "SingleVariableDeclaration[19107-19140]:SingleVariableDeclaration[19182-19215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19142-19207]:Block[19217-19282]"
    }, {
      "left" : "this.sslSocketFactory = sslSocketFactory;",
      "right" : "this.sslSocketFactory = sslSocketFactory;",
      "info" : "ExpressionStatement[19156-19197]:ExpressionStatement[19231-19272]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19217-19223]:Modifier[19292-19298]"
    }, {
      "left" : "Connection.Request",
      "right" : "Connection.Request",
      "info" : "SimpleType[19224-19242]:SimpleType[19299-19317]"
    }, {
      "left" : "ignoreHttpErrors",
      "right" : "ignoreHttpErrors",
      "info" : "SimpleName[19243-19259]:SimpleName[19318-19334]"
    }, {
      "left" : "boolean ignoreHttpErrors",
      "right" : "boolean ignoreHttpErrors",
      "info" : "SingleVariableDeclaration[19260-19284]:SingleVariableDeclaration[19335-19359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19286-19376]:Block[19361-19451]"
    }, {
      "left" : "this.ignoreHttpErrors = ignoreHttpErrors;",
      "right" : "this.ignoreHttpErrors = ignoreHttpErrors;",
      "info" : "ExpressionStatement[19300-19341]:ExpressionStatement[19375-19416]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[19354-19366]:ReturnStatement[19429-19441]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19386-19392]:Modifier[19461-19467]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[19393-19400]:PrimitiveType[19468-19475]"
    }, {
      "left" : "ignoreContentType",
      "right" : "ignoreContentType",
      "info" : "SimpleName[19401-19418]:SimpleName[19476-19493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19421-19470]:Block[19496-19545]"
    }, {
      "left" : "return ignoreContentType;",
      "right" : "return ignoreContentType;",
      "info" : "ReturnStatement[19435-19460]:ReturnStatement[19510-19535]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19480-19486]:Modifier[19555-19561]"
    }, {
      "left" : "Connection.Request",
      "right" : "Connection.Request",
      "info" : "SimpleType[19487-19505]:SimpleType[19562-19580]"
    }, {
      "left" : "ignoreContentType",
      "right" : "ignoreContentType",
      "info" : "SimpleName[19506-19523]:SimpleName[19581-19598]"
    }, {
      "left" : "boolean ignoreContentType",
      "right" : "boolean ignoreContentType",
      "info" : "SingleVariableDeclaration[19524-19549]:SingleVariableDeclaration[19599-19624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19551-19643]:Block[19626-19718]"
    }, {
      "left" : "this.ignoreContentType = ignoreContentType;",
      "right" : "this.ignoreContentType = ignoreContentType;",
      "info" : "ExpressionStatement[19565-19608]:ExpressionStatement[19640-19683]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[19621-19633]:ReturnStatement[19696-19708]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19653-19659]:Modifier[19728-19734]"
    }, {
      "left" : "Request",
      "right" : "Request",
      "info" : "SimpleType[19660-19667]:SimpleType[19735-19742]"
    }, {
      "left" : "data",
      "right" : "data",
      "info" : "SimpleName[19668-19672]:SimpleName[19743-19747]"
    }, {
      "left" : "Connection.KeyVal keyval",
      "right" : "Connection.KeyVal keyval",
      "info" : "SingleVariableDeclaration[19673-19697]:SingleVariableDeclaration[19748-19772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19699-19831]:Block[19774-19906]"
    }, {
      "left" : "Validate.notNull(keyval, \"Key val must not be null\");",
      "right" : "Validate.notNull(keyval, \"Key val must not be null\");",
      "info" : "ExpressionStatement[19713-19766]:ExpressionStatement[19788-19841]"
    }, {
      "left" : "data.add(keyval);",
      "right" : "data.add(keyval);",
      "info" : "ExpressionStatement[19779-19796]:ExpressionStatement[19854-19871]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[19809-19821]:ReturnStatement[19884-19896]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19841-19847]:Modifier[19916-19922]"
    }, {
      "left" : "Collection<Connection.KeyVal>",
      "right" : "Collection<Connection.KeyVal>",
      "info" : "ParameterizedType[19848-19877]:ParameterizedType[19923-19952]"
    }, {
      "left" : "data",
      "right" : "data",
      "info" : "SimpleName[19878-19882]:SimpleName[19953-19957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19885-19921]:Block[19960-19996]"
    }, {
      "left" : "return data;",
      "right" : "return data;",
      "info" : "ReturnStatement[19899-19911]:ReturnStatement[19974-19986]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19931-19937]:Modifier[20006-20012]"
    }, {
      "left" : "Connection.Request",
      "right" : "Connection.Request",
      "info" : "SimpleType[19938-19956]:SimpleType[20013-20031]"
    }, {
      "left" : "requestBody",
      "right" : "requestBody",
      "info" : "SimpleName[19957-19968]:SimpleName[20032-20043]"
    }, {
      "left" : "String body",
      "right" : "String body",
      "info" : "SingleVariableDeclaration[19969-19980]:SingleVariableDeclaration[20044-20055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19982-20048]:Block[20057-20123]"
    }, {
      "left" : "this.body = body;",
      "right" : "this.body = body;",
      "info" : "ExpressionStatement[19996-20013]:ExpressionStatement[20071-20088]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[20026-20038]:ReturnStatement[20101-20113]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20058-20064]:Modifier[20133-20139]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[20065-20071]:SimpleType[20140-20146]"
    }, {
      "left" : "requestBody",
      "right" : "requestBody",
      "info" : "SimpleName[20072-20083]:SimpleName[20147-20158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20086-20122]:Block[20161-20197]"
    }, {
      "left" : "return body;",
      "right" : "return body;",
      "info" : "ReturnStatement[20100-20112]:ReturnStatement[20175-20187]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20132-20138]:Modifier[20207-20213]"
    }, {
      "left" : "Request",
      "right" : "Request",
      "info" : "SimpleType[20139-20146]:SimpleType[20214-20221]"
    }, {
      "left" : "parser",
      "right" : "parser",
      "info" : "SimpleName[20147-20153]:SimpleName[20222-20228]"
    }, {
      "left" : "Parser parser",
      "right" : "Parser parser",
      "info" : "SingleVariableDeclaration[20154-20167]:SingleVariableDeclaration[20229-20242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20169-20273]:Block[20244-20348]"
    }, {
      "left" : "this.parser = parser;",
      "right" : "this.parser = parser;",
      "info" : "ExpressionStatement[20183-20204]:ExpressionStatement[20258-20279]"
    }, {
      "left" : "parserDefined = true;",
      "right" : "parserDefined = true;",
      "info" : "ExpressionStatement[20217-20238]:ExpressionStatement[20292-20313]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[20251-20263]:ReturnStatement[20326-20338]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20283-20289]:Modifier[20358-20364]"
    }, {
      "left" : "Parser",
      "right" : "Parser",
      "info" : "SimpleType[20290-20296]:SimpleType[20365-20371]"
    }, {
      "left" : "parser",
      "right" : "parser",
      "info" : "SimpleName[20297-20303]:SimpleName[20372-20378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20306-20344]:Block[20381-20419]"
    }, {
      "left" : "return parser;",
      "right" : "return parser;",
      "info" : "ReturnStatement[20320-20334]:ReturnStatement[20395-20409]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20354-20360]:Modifier[20429-20435]"
    }, {
      "left" : "Connection.Request",
      "right" : "Connection.Request",
      "info" : "SimpleType[20361-20379]:SimpleType[20436-20454]"
    }, {
      "left" : "postDataCharset",
      "right" : "postDataCharset",
      "info" : "SimpleName[20380-20395]:SimpleName[20455-20470]"
    }, {
      "left" : "String charset",
      "right" : "String charset",
      "info" : "SingleVariableDeclaration[20396-20410]:SingleVariableDeclaration[20471-20485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20412-20654]:Block[20487-20729]"
    }, {
      "left" : "Validate.notNull(charset, \"Charset must not be null\");",
      "right" : "Validate.notNull(charset, \"Charset must not be null\");",
      "info" : "ExpressionStatement[20426-20480]:ExpressionStatement[20501-20555]"
    }, {
      "left" : "if (!Charset.isSupported(charset))",
      "right" : "if (!Charset.isSupported(charset))",
      "info" : "IfStatement[20493-20575]:IfStatement[20568-20650]"
    }, {
      "left" : "throw new IllegalCharsetNameException(charset);",
      "right" : "throw new IllegalCharsetNameException(charset);",
      "info" : "ThrowStatement[20528-20575]:ThrowStatement[20603-20650]"
    }, {
      "left" : "this.postDataCharset = charset;",
      "right" : "this.postDataCharset = charset;",
      "info" : "ExpressionStatement[20588-20619]:ExpressionStatement[20663-20694]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[20632-20644]:ReturnStatement[20707-20719]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20664-20670]:Modifier[20739-20745]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[20671-20677]:SimpleType[20746-20752]"
    }, {
      "left" : "postDataCharset",
      "right" : "postDataCharset",
      "info" : "SimpleName[20678-20693]:SimpleName[20753-20768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20696-20743]:Block[20771-20818]"
    }, {
      "left" : "return postDataCharset;",
      "right" : "return postDataCharset;",
      "info" : "ReturnStatement[20710-20733]:ReturnStatement[20785-20808]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20755-20761]:Modifier[20830-20836]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20762-20768]:Modifier[20837-20843]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[20769-20774]:TYPE_DECLARATION_KIND[20844-20849]"
    }, {
      "left" : "Response",
      "right" : "Response",
      "info" : "SimpleName[20775-20783]:SimpleName[20850-20858]"
    }, {
      "left" : "Response",
      "right" : "Response",
      "info" : "SimpleName[21639-21647]:SimpleName[21714-21722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21650-21682]:Block[21725-21757]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[21664-21672]:SuperConstructorInvocation[21739-21747]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21692-21699]:Modifier[21767-21774]"
    }, {
      "left" : "Response",
      "right" : "Response",
      "info" : "SimpleName[21700-21708]:SimpleName[21775-21783]"
    }, {
      "left" : "Response previousResponse",
      "right" : "Response previousResponse",
      "info" : "SingleVariableDeclaration[21709-21734]:SingleVariableDeclaration[21784-21809]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[21743-21754]:SimpleType[21818-21829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21755-22097]:Block[21830-22172]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[21769-21777]:SuperConstructorInvocation[21844-21852]"
    }, {
      "left" : "if (previousResponse != null)",
      "right" : "if (previousResponse != null)",
      "info" : "IfStatement[21790-22087]:IfStatement[21865-22162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21820-22087]:Block[21895-22162]"
    }, {
      "left" : "numRedirects = previousResponse.numRedirects + 1;",
      "right" : "numRedirects = previousResponse.numRedirects + 1;",
      "info" : "ExpressionStatement[21838-21887]:ExpressionStatement[21913-21962]"
    }, {
      "left" : "if (numRedirects >= MAX_REDIRECTS)",
      "right" : "if (numRedirects >= MAX_REDIRECTS)",
      "info" : "IfStatement[21904-22073]:IfStatement[21979-22148]"
    }, {
      "left" : "throw new IOException(String.format(\"Too many redirects occurred trying to load URL %s\", previousResponse.url()));",
      "right" : "throw new IOException(String.format(\"Too many redirects occurred trying to load URL %s\", previousResponse.url()));",
      "info" : "ThrowStatement[21959-22073]:ThrowStatement[22034-22148]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22107-22113]:Modifier[22182-22188]"
    }, {
      "left" : "Response",
      "right" : "Response",
      "info" : "SimpleType[22114-22122]:SimpleType[22189-22197]"
    }, {
      "left" : "execute",
      "right" : "execute",
      "info" : "SimpleName[22123-22130]:SimpleName[22198-22205]"
    }, {
      "left" : "Connection.Request req",
      "right" : "Connection.Request req",
      "info" : "SingleVariableDeclaration[22131-22153]:SingleVariableDeclaration[22206-22228]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[22162-22173]:SimpleType[22237-22248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22174-22224]:Block[22249-22299]"
    }, {
      "left" : "return execute(req, null);",
      "right" : "return execute(req, null);",
      "info" : "ReturnStatement[22188-22214]:ReturnStatement[22263-22289]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22234-22240]:Modifier[22309-22315]"
    }, {
      "left" : "Response",
      "right" : "Response",
      "info" : "SimpleType[22241-22249]:SimpleType[22316-22324]"
    }, {
      "left" : "execute",
      "right" : "execute",
      "info" : "SimpleName[22250-22257]:SimpleName[22325-22332]"
    }, {
      "left" : "Connection.Request req",
      "right" : "Connection.Request req",
      "info" : "SingleVariableDeclaration[22258-22280]:SingleVariableDeclaration[22333-22355]"
    }, {
      "left" : "Response previousResponse",
      "right" : "Response previousResponse",
      "info" : "SingleVariableDeclaration[22282-22307]:SingleVariableDeclaration[22357-22382]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[22316-22327]:SimpleType[22391-22402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22328-27853]:Block[22403-27928]"
    }, {
      "left" : "Validate.notNull(req, \"Request must not be null\");",
      "right" : "Validate.notNull(req, \"Request must not be null\");",
      "info" : "ExpressionStatement[22342-22392]:ExpressionStatement[22417-22467]"
    }, {
      "left" : "Validate.notNull(req.url(), \"URL must be specified to connect\");",
      "right" : "Validate.notNull(req.url(), \"URL must be specified to connect\");",
      "info" : "ExpressionStatement[22405-22469]:ExpressionStatement[22480-22544]"
    }, {
      "left" : "String protocol = req.url().getProtocol();",
      "right" : "String protocol = req.url().getProtocol();",
      "info" : "VariableDeclarationStatement[22482-22524]:VariableDeclarationStatement[22557-22599]"
    }, {
      "left" : "if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))",
      "right" : "if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))",
      "info" : "IfStatement[22537-22685]:IfStatement[22612-22760]"
    }, {
      "left" : "throw new MalformedURLException(\"Only http & https protocols supported\");",
      "right" : "throw new MalformedURLException(\"Only http & https protocols supported\");",
      "info" : "ThrowStatement[22612-22685]:ThrowStatement[22687-22760]"
    }, {
      "left" : "final boolean methodHasBody = req.method().hasBody();",
      "right" : "final boolean methodHasBody = req.method().hasBody();",
      "info" : "VariableDeclarationStatement[22698-22751]:VariableDeclarationStatement[22773-22826]"
    }, {
      "left" : "final boolean hasRequestBody = req.requestBody() != null;",
      "right" : "final boolean hasRequestBody = req.requestBody() != null;",
      "info" : "VariableDeclarationStatement[22764-22821]:VariableDeclarationStatement[22839-22896]"
    }, {
      "left" : "if (!methodHasBody)",
      "right" : "if (!methodHasBody)",
      "info" : "IfStatement[22834-22964]:IfStatement[22909-23039]"
    }, {
      "left" : "Validate.isFalse(hasRequestBody, \"Cannot set a request body for HTTP method \" + req.method());",
      "right" : "Validate.isFalse(hasRequestBody, \"Cannot set a request body for HTTP method \" + req.method());",
      "info" : "ExpressionStatement[22870-22964]:ExpressionStatement[22945-23039]"
    }, {
      "left" : "String mimeBoundary = null;",
      "right" : "String mimeBoundary = null;",
      "info" : "VariableDeclarationStatement[23026-23053]:VariableDeclarationStatement[23101-23128]"
    }, {
      "left" : "if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))",
      "right" : "if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))",
      "info" : "IfStatement[23066-23266]:IfStatement[23141-23341]"
    }, {
      "left" : "serialiseRequestUrl(req);",
      "right" : "serialiseRequestUrl(req);",
      "info" : "ExpressionStatement[23147-23172]:ExpressionStatement[23222-23247]"
    }, {
      "left" : "if (methodHasBody)",
      "right" : "if (methodHasBody)",
      "info" : "IfStatement[23190-23266]:IfStatement[23265-23341]"
    }, {
      "left" : "mimeBoundary = setOutputContentType(req);",
      "right" : "mimeBoundary = setOutputContentType(req);",
      "info" : "ExpressionStatement[23225-23266]:ExpressionStatement[23300-23341]"
    }, {
      "left" : "long startTime = System.nanoTime();",
      "right" : "long startTime = System.nanoTime();",
      "info" : "VariableDeclarationStatement[23280-23315]:VariableDeclarationStatement[23355-23390]"
    }, {
      "left" : "HttpURLConnection conn = createConnection(req);",
      "right" : "HttpURLConnection conn = createConnection(req);",
      "info" : "VariableDeclarationStatement[23328-23375]:VariableDeclarationStatement[23403-23450]"
    }, {
      "left" : "Response res;",
      "right" : "Response res;",
      "info" : "VariableDeclarationStatement[23388-23401]:VariableDeclarationStatement[23463-23476]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[23414-27785]:TryStatement[23489-27860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23418-27457]:Block[23493-27532]"
    }, {
      "left" : "conn.connect();",
      "right" : "conn.connect();",
      "info" : "ExpressionStatement[23436-23451]:ExpressionStatement[23511-23526]"
    }, {
      "left" : "if (conn.getDoOutput())",
      "right" : "if (conn.getDoOutput())",
      "info" : "IfStatement[23468-23565]:IfStatement[23543-23640]"
    }, {
      "left" : "writePost(req, conn.getOutputStream(), mimeBoundary);",
      "right" : "writePost(req, conn.getOutputStream(), mimeBoundary);",
      "info" : "ExpressionStatement[23512-23565]:ExpressionStatement[23587-23640]"
    }, {
      "left" : "int status = conn.getResponseCode();",
      "right" : "int status = conn.getResponseCode();",
      "info" : "VariableDeclarationStatement[23583-23619]:VariableDeclarationStatement[23658-23694]"
    }, {
      "left" : "res = new Response(previousResponse);",
      "right" : "res = new Response(previousResponse);",
      "info" : "ExpressionStatement[23636-23673]:ExpressionStatement[23711-23748]"
    }, {
      "left" : "res.setupFromConnection(conn, previousResponse);",
      "right" : "res.setupFromConnection(conn, previousResponse);",
      "info" : "ExpressionStatement[23690-23738]:ExpressionStatement[23765-23813]"
    }, {
      "left" : "res.req = req;",
      "right" : "res.req = req;",
      "info" : "ExpressionStatement[23755-23769]:ExpressionStatement[23830-23844]"
    }, {
      "left" : "if (res.hasHeader(LOCATION) && req.followRedirects())",
      "right" : "if (res.hasHeader(LOCATION) && req.followRedirects())",
      "info" : "IfStatement[23867-24951]:IfStatement[23942-25026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23921-24951]:Block[23996-25026]"
    }, {
      "left" : "if (status != HTTP_TEMP_REDIR)",
      "right" : "if (status != HTTP_TEMP_REDIR)",
      "info" : "IfStatement[23943-24269]:IfStatement[24018-24344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23974-24269]:Block[24049-24344]"
    }, {
      "left" : "req.method(Method.GET);",
      "right" : "req.method(Method.GET);",
      "info" : "ExpressionStatement[24000-24023]:ExpressionStatement[24075-24098]"
    }, {
      "left" : "req.data().clear();",
      "right" : "req.data().clear();",
      "info" : "ExpressionStatement[24125-24144]:ExpressionStatement[24200-24219]"
    }, {
      "left" : "req.requestBody(null);",
      "right" : "req.requestBody(null);",
      "info" : "ExpressionStatement[24169-24191]:ExpressionStatement[24244-24266]"
    }, {
      "left" : "req.removeHeader(CONTENT_TYPE);",
      "right" : "req.removeHeader(CONTENT_TYPE);",
      "info" : "ExpressionStatement[24216-24247]:ExpressionStatement[24291-24322]"
    }, {
      "left" : "String location = res.header(LOCATION);",
      "right" : "String location = res.header(LOCATION);",
      "info" : "VariableDeclarationStatement[24291-24330]:VariableDeclarationStatement[24366-24405]"
    }, {
      "left" : "if (location.startsWith(\"http:/\") && location.charAt(6) != '/')",
      "right" : "if (location.startsWith(\"http:/\") && location.charAt(6) != '/')",
      "info" : "IfStatement[24351-24528]:IfStatement[24426-24603]"
    }, {
      "left" : "location = location.substring(6);",
      "right" : "location = location.substring(6);",
      "info" : "ExpressionStatement[24495-24528]:ExpressionStatement[24570-24603]"
    }, {
      "left" : "URL redir = StringUtil.resolve(req.url(), location);",
      "right" : "URL redir = StringUtil.resolve(req.url(), location);",
      "info" : "VariableDeclarationStatement[24549-24601]:VariableDeclarationStatement[24624-24676]"
    }, {
      "left" : "req.url(encodeUrl(redir));",
      "right" : "req.url(encodeUrl(redir));",
      "info" : "ExpressionStatement[24622-24648]:ExpressionStatement[24697-24723]"
    }, {
      "left" : "for (Map.Entry<String, String> cookie : res.cookies.entrySet())",
      "right" : "for (Map.Entry<String, String> cookie : res.cookies.entrySet())",
      "info" : "EnhancedForStatement[24670-24887]:EnhancedForStatement[24745-24962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24734-24887]:Block[24809-24962]"
    }, {
      "left" : "req.cookie(cookie.getKey(), cookie.getValue());",
      "right" : "req.cookie(cookie.getKey(), cookie.getValue());",
      "info" : "ExpressionStatement[24818-24865]:ExpressionStatement[24893-24940]"
    }, {
      "left" : "return execute(req, res);",
      "right" : "return execute(req, res);",
      "info" : "ReturnStatement[24908-24933]:ReturnStatement[24983-25008]"
    }, {
      "left" : "if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())",
      "right" : "if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())",
      "info" : "IfStatement[24968-25143]:IfStatement[25043-25218]"
    }, {
      "left" : "throw new HttpStatusException(\"HTTP error fetching URL\", status, req.url().toString());",
      "right" : "throw new HttpStatusException(\"HTTP error fetching URL\", status, req.url().toString());",
      "info" : "ThrowStatement[25056-25143]:ThrowStatement[25131-25218]"
    }, {
      "left" : "String contentType = res.contentType();",
      "right" : "String contentType = res.contentType();",
      "info" : "VariableDeclarationStatement[25265-25304]:VariableDeclarationStatement[25340-25379]"
    }, {
      "left" : "if (contentType != null\n                        && !req.ignoreContentType()\n                        && !contentType.startsWith(\"text/\")\n                        && !xmlContentTypeRxp.matcher(contentType).matches())",
      "right" : "if (contentType != null\n                        && !req.ignoreContentType()\n                        && !contentType.startsWith(\"text/\")\n                        && !xmlContentTypeRxp.matcher(contentType).matches())",
      "info" : "IfStatement[25321-25767]:IfStatement[25396-25842]"
    }, {
      "left" : "throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml\",\n                            contentType, req.url().toString());",
      "right" : "throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml\",\n                            contentType, req.url().toString());",
      "info" : "ThrowStatement[25580-25767]:ThrowStatement[25655-25842]"
    }, {
      "left" : "if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches())",
      "right" : "if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches())",
      "info" : "IfStatement[25886-26265]:IfStatement[25961-26340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25963-26265]:Block[26038-26340]"
    }, {
      "left" : "if (req instanceof HttpConnection.Request && !((Request) req).parserDefined)",
      "right" : "if (req instanceof HttpConnection.Request && !((Request) req).parserDefined)",
      "info" : "IfStatement[26091-26247]:IfStatement[26166-26322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26168-26247]:Block[26243-26322]"
    }, {
      "left" : "req.parser(Parser.xmlParser());",
      "right" : "req.parser(Parser.xmlParser());",
      "info" : "ExpressionStatement[26194-26225]:ExpressionStatement[26269-26300]"
    }, {
      "left" : "res.charset = DataUtil.getCharsetFromContentType(res.contentType);",
      "right" : "res.charset = DataUtil.getCharsetFromContentType(res.contentType);",
      "info" : "ExpressionStatement[26283-26349]:ExpressionStatement[26358-26424]"
    }, {
      "left" : "if (conn.getContentLength() != 0 && req.method() != HEAD)",
      "right" : "if (conn.getContentLength() != 0 && req.method() != HEAD)",
      "info" : "IfStatement[26412-27443]:IfStatement[26487-27518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26470-27355]:Block[26545-27430]"
    }, {
      "left" : "res.bodyStream = null;",
      "right" : "res.bodyStream = null;",
      "info" : "ExpressionStatement[26606-26628]:ExpressionStatement[26681-26703]"
    }, {
      "left" : "res.bodyStream = conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();",
      "right" : "res.bodyStream = conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();",
      "info" : "ExpressionStatement[26649-26744]:ExpressionStatement[26724-26819]"
    }, {
      "left" : "if (res.hasHeaderWithValue(CONTENT_ENCODING, \"gzip\"))",
      "right" : "if (res.hasHeaderWithValue(CONTENT_ENCODING, \"gzip\"))",
      "info" : "IfStatement[26765-27108]:IfStatement[26840-27183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26819-26920]:Block[26894-26995]"
    }, {
      "left" : "res.bodyStream = new GZIPInputStream(res.bodyStream);",
      "right" : "res.bodyStream = new GZIPInputStream(res.bodyStream);",
      "info" : "ExpressionStatement[26845-26898]:ExpressionStatement[26920-26973]"
    }, {
      "left" : "if (res.hasHeaderWithValue(CONTENT_ENCODING, \"deflate\"))",
      "right" : "if (res.hasHeaderWithValue(CONTENT_ENCODING, \"deflate\"))",
      "info" : "IfStatement[26926-27108]:IfStatement[27001-27183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26983-27108]:Block[27058-27183]"
    }, {
      "left" : "res.bodyStream = new InflaterInputStream(res.bodyStream, new Inflater(true));",
      "right" : "res.bodyStream = new InflaterInputStream(res.bodyStream, new Inflater(true));",
      "info" : "ExpressionStatement[27009-27086]:ExpressionStatement[27084-27161]"
    }, {
      "left" : "res.bodyStream = ConstrainableInputStream\n                        .wrap(res.bodyStream, DataUtil.bufferSize, req.maxBodySize())\n                        .timeout(startTime, req.timeout())\n                    ;",
      "right" : "res.bodyStream = ConstrainableInputStream\n                        .wrap(res.bodyStream, DataUtil.bufferSize, req.maxBodySize())\n                        .timeout(startTime, req.timeout())\n                    ;",
      "info" : "ExpressionStatement[27129-27337]:ExpressionStatement[27204-27412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27361-27443]:Block[27436-27518]"
    }, {
      "left" : "res.byteData = DataUtil.emptyByteBuffer();",
      "right" : "res.byteData = DataUtil.emptyByteBuffer();",
      "info" : "ExpressionStatement[27383-27425]:ExpressionStatement[27458-27500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27479-27785]:Block[27554-27860]"
    }, {
      "left" : "conn.disconnect();",
      "right" : "conn.disconnect();",
      "info" : "ExpressionStatement[27728-27746]:ExpressionStatement[27803-27821]"
    }, {
      "left" : "throw e;",
      "right" : "throw e;",
      "info" : "ThrowStatement[27763-27771]:ThrowStatement[27838-27846]"
    }, {
      "left" : "res.executed = true;",
      "right" : "res.executed = true;",
      "info" : "ExpressionStatement[27799-27819]:ExpressionStatement[27874-27894]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[27832-27843]:ReturnStatement[27907-27918]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27863-27869]:Modifier[27938-27944]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[27870-27873]:PrimitiveType[27945-27948]"
    }, {
      "left" : "statusCode",
      "right" : "statusCode",
      "info" : "SimpleName[27874-27884]:SimpleName[27949-27959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27887-27929]:Block[27962-28004]"
    }, {
      "left" : "return statusCode;",
      "right" : "return statusCode;",
      "info" : "ReturnStatement[27901-27919]:ReturnStatement[27976-27994]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27939-27945]:Modifier[28014-28020]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[27946-27952]:SimpleType[28021-28027]"
    }, {
      "left" : "statusMessage",
      "right" : "statusMessage",
      "info" : "SimpleName[27953-27966]:SimpleName[28028-28041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27969-28014]:Block[28044-28089]"
    }, {
      "left" : "return statusMessage;",
      "right" : "return statusMessage;",
      "info" : "ReturnStatement[27983-28004]:ReturnStatement[28058-28079]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28024-28030]:Modifier[28099-28105]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[28031-28037]:SimpleType[28106-28112]"
    }, {
      "left" : "charset",
      "right" : "charset",
      "info" : "SimpleName[28038-28045]:SimpleName[28113-28120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28048-28087]:Block[28123-28162]"
    }, {
      "left" : "return charset;",
      "right" : "return charset;",
      "info" : "ReturnStatement[28062-28077]:ReturnStatement[28137-28152]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28097-28103]:Modifier[28172-28178]"
    }, {
      "left" : "Response",
      "right" : "Response",
      "info" : "SimpleType[28104-28112]:SimpleType[28179-28187]"
    }, {
      "left" : "charset",
      "right" : "charset",
      "info" : "SimpleName[28113-28120]:SimpleName[28188-28195]"
    }, {
      "left" : "String charset",
      "right" : "String charset",
      "info" : "SingleVariableDeclaration[28121-28135]:SingleVariableDeclaration[28196-28210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28137-28209]:Block[28212-28284]"
    }, {
      "left" : "this.charset = charset;",
      "right" : "this.charset = charset;",
      "info" : "ExpressionStatement[28151-28174]:ExpressionStatement[28226-28249]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[28187-28199]:ReturnStatement[28262-28274]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28219-28225]:Modifier[28294-28300]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[28226-28232]:SimpleType[28301-28307]"
    }, {
      "left" : "contentType",
      "right" : "contentType",
      "info" : "SimpleName[28233-28244]:SimpleName[28308-28319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28247-28290]:Block[28322-28365]"
    }, {
      "left" : "return contentType;",
      "right" : "return contentType;",
      "info" : "ReturnStatement[28261-28280]:ReturnStatement[28336-28355]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28300-28306]:Modifier[28375-28381]"
    }, {
      "left" : "Document",
      "right" : "Document",
      "info" : "SimpleType[28307-28315]:SimpleType[28382-28390]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[28316-28321]:SimpleName[28391-28396]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[28331-28342]:SimpleType[28406-28417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28343-29133]:Block[28418-29208]"
    }, {
      "left" : "Validate.isTrue(executed, \"Request must be executed (with .execute(), .get(), or .post() before parsing response\");",
      "right" : "Validate.isTrue(executed, \"Request must be executed (with .execute(), .get(), or .post() before parsing response\");",
      "info" : "ExpressionStatement[28357-28472]:ExpressionStatement[28432-28547]"
    }, {
      "left" : "if (byteData != null)",
      "right" : "if (byteData != null)",
      "info" : "IfStatement[28485-28718]:IfStatement[28560-28793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28507-28718]:Block[28582-28793]"
    }, {
      "left" : "bodyStream = new ByteArrayInputStream(byteData.array());",
      "right" : "bodyStream = new ByteArrayInputStream(byteData.array());",
      "info" : "ExpressionStatement[28578-28634]:ExpressionStatement[28653-28709]"
    }, {
      "left" : "inputStreamRead = false;",
      "right" : "inputStreamRead = false;",
      "info" : "ExpressionStatement[28651-28675]:ExpressionStatement[28726-28750]"
    }, {
      "left" : "Validate.isFalse(inputStreamRead, \"Input stream already read and parsed, cannot re-read.\");",
      "right" : "Validate.isFalse(inputStreamRead, \"Input stream already read and parsed, cannot re-read.\");",
      "info" : "ExpressionStatement[28731-28822]:ExpressionStatement[28806-28897]"
    }, {
      "left" : "Document doc = DataUtil.parseInputStream(bodyStream, charset, url.toExternalForm(), req.parser());",
      "right" : "Document doc = DataUtil.parseInputStream(bodyStream, charset, url.toExternalForm(), req.parser());",
      "info" : "VariableDeclarationStatement[28835-28933]:VariableDeclarationStatement[28910-29008]"
    }, {
      "left" : "charset = doc.outputSettings().charset().name();",
      "right" : "charset = doc.outputSettings().charset().name();",
      "info" : "ExpressionStatement[28946-28994]:ExpressionStatement[29021-29069]"
    }, {
      "left" : "inputStreamRead = true;",
      "right" : "inputStreamRead = true;",
      "info" : "ExpressionStatement[29051-29074]:ExpressionStatement[29126-29149]"
    }, {
      "left" : "safeClose();",
      "right" : "safeClose();",
      "info" : "ExpressionStatement[29087-29099]:ExpressionStatement[29162-29174]"
    }, {
      "left" : "return doc;",
      "right" : "return doc;",
      "info" : "ReturnStatement[29112-29123]:ReturnStatement[29187-29198]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29143-29150]:Modifier[29218-29225]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29151-29155]:PrimitiveType[29226-29230]"
    }, {
      "left" : "prepareByteData",
      "right" : "prepareByteData",
      "info" : "SimpleName[29156-29171]:SimpleName[29231-29246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29174-29799]:Block[29249-29874]"
    }, {
      "left" : "Validate.isTrue(executed, \"Request must be executed (with .execute(), .get(), or .post() before getting response body\");",
      "right" : "Validate.isTrue(executed, \"Request must be executed (with .execute(), .get(), or .post() before getting response body\");",
      "info" : "ExpressionStatement[29188-29308]:ExpressionStatement[29263-29383]"
    }, {
      "left" : "if (byteData == null)",
      "right" : "if (byteData == null)",
      "info" : "IfStatement[29321-29789]:IfStatement[29396-29864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29343-29789]:Block[29418-29864]"
    }, {
      "left" : "Validate.isFalse(inputStreamRead, \"Request has already been read (with .parse())\");",
      "right" : "Validate.isFalse(inputStreamRead, \"Request has already been read (with .parse())\");",
      "info" : "ExpressionStatement[29361-29444]:ExpressionStatement[29436-29519]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[29461-29775]:TryStatement[29536-29850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29465-29573]:Block[29540-29648]"
    }, {
      "left" : "byteData = DataUtil.readToByteBuffer(bodyStream, req.maxBodySize());",
      "right" : "byteData = DataUtil.readToByteBuffer(bodyStream, req.maxBodySize());",
      "info" : "ExpressionStatement[29487-29555]:ExpressionStatement[29562-29630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29596-29670]:Block[29671-29745]"
    }, {
      "left" : "throw new UncheckedIOException(e);",
      "right" : "throw new UncheckedIOException(e);",
      "info" : "ThrowStatement[29618-29652]:ThrowStatement[29693-29727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29679-29775]:Block[29754-29850]"
    }, {
      "left" : "inputStreamRead = true;",
      "right" : "inputStreamRead = true;",
      "info" : "ExpressionStatement[29701-29724]:ExpressionStatement[29776-29799]"
    }, {
      "left" : "safeClose();",
      "right" : "safeClose();",
      "info" : "ExpressionStatement[29745-29757]:ExpressionStatement[29820-29832]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29809-29815]:Modifier[29884-29890]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[29816-29822]:SimpleType[29891-29897]"
    }, {
      "left" : "body",
      "right" : "body",
      "info" : "SimpleName[29823-29827]:SimpleName[29898-29902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29830-30355]:Block[29905-30430]"
    }, {
      "left" : "prepareByteData();",
      "right" : "prepareByteData();",
      "info" : "ExpressionStatement[29844-29862]:ExpressionStatement[29919-29937]"
    }, {
      "left" : "String body;",
      "right" : "String body;",
      "info" : "VariableDeclarationStatement[29993-30005]:VariableDeclarationStatement[30068-30080]"
    }, {
      "left" : "if (charset == null)",
      "right" : "if (charset == null)",
      "info" : "IfStatement[30018-30225]:IfStatement[30093-30300]"
    }, {
      "left" : "body = Charset.forName(DataUtil.defaultCharset).decode(byteData).toString();",
      "right" : "body = Charset.forName(DataUtil.defaultCharset).decode(byteData).toString();",
      "info" : "ExpressionStatement[30055-30131]:ExpressionStatement[30130-30206]"
    }, {
      "left" : "body = Charset.forName(charset).decode(byteData).toString();",
      "right" : "body = Charset.forName(charset).decode(byteData).toString();",
      "info" : "ExpressionStatement[30165-30225]:ExpressionStatement[30240-30300]"
    }, {
      "left" : "((Buffer)byteData).rewind();",
      "right" : "((Buffer)byteData).rewind();",
      "info" : "ExpressionStatement[30238-30266]:ExpressionStatement[30313-30341]"
    }, {
      "left" : "return body;",
      "right" : "return body;",
      "info" : "ReturnStatement[30333-30345]:ReturnStatement[30408-30420]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30365-30371]:Modifier[30440-30446]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[30372-30378]:ArrayType[30447-30453]"
    }, {
      "left" : "bodyAsBytes",
      "right" : "bodyAsBytes",
      "info" : "SimpleName[30379-30390]:SimpleName[30454-30465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30393-30472]:Block[30468-30547]"
    }, {
      "left" : "prepareByteData();",
      "right" : "prepareByteData();",
      "info" : "ExpressionStatement[30407-30425]:ExpressionStatement[30482-30500]"
    }, {
      "left" : "return byteData.array();",
      "right" : "return byteData.array();",
      "info" : "ReturnStatement[30438-30462]:ReturnStatement[30513-30537]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30482-30491]:MarkerAnnotation[30557-30566]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30500-30506]:Modifier[30575-30581]"
    }, {
      "left" : "Connection.Response",
      "right" : "Connection.Response",
      "info" : "SimpleType[30507-30526]:SimpleType[30582-30601]"
    }, {
      "left" : "bufferUp",
      "right" : "bufferUp",
      "info" : "SimpleName[30527-30535]:SimpleName[30602-30610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30538-30605]:Block[30613-30680]"
    }, {
      "left" : "prepareByteData();",
      "right" : "prepareByteData();",
      "info" : "ExpressionStatement[30552-30570]:ExpressionStatement[30627-30645]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[30583-30595]:ReturnStatement[30658-30670]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30615-30624]:MarkerAnnotation[30690-30699]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30633-30639]:Modifier[30708-30714]"
    }, {
      "left" : "BufferedInputStream",
      "right" : "BufferedInputStream",
      "info" : "SimpleType[30640-30659]:SimpleType[30715-30734]"
    }, {
      "left" : "bodyStream",
      "right" : "bodyStream",
      "info" : "SimpleName[30660-30670]:SimpleName[30735-30745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30673-31035]:Block[30748-31110]"
    }, {
      "left" : "Validate.isTrue(executed, \"Request must be executed (with .execute(), .get(), or .post() before getting response body\");",
      "right" : "Validate.isTrue(executed, \"Request must be executed (with .execute(), .get(), or .post() before getting response body\");",
      "info" : "ExpressionStatement[30687-30807]:ExpressionStatement[30762-30882]"
    }, {
      "left" : "Validate.isFalse(inputStreamRead, \"Request has already been read\");",
      "right" : "Validate.isFalse(inputStreamRead, \"Request has already been read\");",
      "info" : "ExpressionStatement[30820-30887]:ExpressionStatement[30895-30962]"
    }, {
      "left" : "inputStreamRead = true;",
      "right" : "inputStreamRead = true;",
      "info" : "ExpressionStatement[30900-30923]:ExpressionStatement[30975-30998]"
    }, {
      "left" : "return ConstrainableInputStream.wrap(bodyStream, DataUtil.bufferSize, req.maxBodySize());",
      "right" : "return ConstrainableInputStream.wrap(bodyStream, DataUtil.bufferSize, req.maxBodySize());",
      "info" : "ReturnStatement[30936-31025]:ReturnStatement[31011-31100]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31109-31116]:Modifier[31184-31191]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[31117-31123]:Modifier[31192-31198]"
    }, {
      "left" : "HttpURLConnection",
      "right" : "HttpURLConnection",
      "info" : "SimpleType[31124-31141]:SimpleType[31199-31216]"
    }, {
      "left" : "createConnection",
      "right" : "createConnection",
      "info" : "SimpleName[31142-31158]:SimpleName[31217-31233]"
    }, {
      "left" : "Connection.Request req",
      "right" : "Connection.Request req",
      "info" : "SingleVariableDeclaration[31159-31181]:SingleVariableDeclaration[31234-31256]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[31190-31201]:SimpleType[31265-31276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31202-32398]:Block[31277-32473]"
    }, {
      "left" : "final HttpURLConnection conn = (HttpURLConnection) (\n                req.proxy() == null ?\n                req.url().openConnection() :\n                req.url().openConnection(req.proxy())\n            );",
      "right" : "final HttpURLConnection conn = (HttpURLConnection) (\n                req.proxy() == null ?\n                req.url().openConnection() :\n                req.url().openConnection(req.proxy())\n            );",
      "info" : "VariableDeclarationStatement[31216-31420]:VariableDeclarationStatement[31291-31495]"
    }, {
      "left" : "conn.setRequestMethod(req.method().name());",
      "right" : "conn.setRequestMethod(req.method().name());",
      "info" : "ExpressionStatement[31434-31477]:ExpressionStatement[31509-31552]"
    }, {
      "left" : "conn.setInstanceFollowRedirects(false);",
      "right" : "conn.setInstanceFollowRedirects(false);",
      "info" : "ExpressionStatement[31490-31529]:ExpressionStatement[31565-31604]"
    }, {
      "left" : "conn.setConnectTimeout(req.timeout());",
      "right" : "conn.setConnectTimeout(req.timeout());",
      "info" : "ExpressionStatement[31586-31624]:ExpressionStatement[31661-31699]"
    }, {
      "left" : "conn.setReadTimeout(req.timeout() / 2);",
      "right" : "conn.setReadTimeout(req.timeout() / 2);",
      "info" : "ExpressionStatement[31637-31676]:ExpressionStatement[31712-31751]"
    }, {
      "left" : "if (req.sslSocketFactory() != null && conn instanceof HttpsURLConnection)",
      "right" : "if (req.sslSocketFactory() != null && conn instanceof HttpsURLConnection)",
      "info" : "IfStatement[31750-31912]:IfStatement[31825-31987]"
    }, {
      "left" : "((HttpsURLConnection) conn).setSSLSocketFactory(req.sslSocketFactory());",
      "right" : "((HttpsURLConnection) conn).setSSLSocketFactory(req.sslSocketFactory());",
      "info" : "ExpressionStatement[31840-31912]:ExpressionStatement[31915-31987]"
    }, {
      "left" : "if (req.method().hasBody())",
      "right" : "if (req.method().hasBody())",
      "info" : "IfStatement[31925-31992]:IfStatement[32000-32067]"
    }, {
      "left" : "conn.setDoOutput(true);",
      "right" : "conn.setDoOutput(true);",
      "info" : "ExpressionStatement[31969-31992]:ExpressionStatement[32044-32067]"
    }, {
      "left" : "if (req.cookies().size() > 0)",
      "right" : "if (req.cookies().size() > 0)",
      "info" : "IfStatement[32005-32114]:IfStatement[32080-32189]"
    }, {
      "left" : "conn.addRequestProperty(\"Cookie\", getRequestCookieString(req));",
      "right" : "conn.addRequestProperty(\"Cookie\", getRequestCookieString(req));",
      "info" : "ExpressionStatement[32051-32114]:ExpressionStatement[32126-32189]"
    }, {
      "left" : "for (Map.Entry<String, List<String>> header : req.multiHeaders().entrySet())",
      "right" : "for (Map.Entry<String, List<String>> header : req.multiHeaders().entrySet())",
      "info" : "EnhancedForStatement[32127-32363]:EnhancedForStatement[32202-32438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32204-32363]:Block[32279-32438]"
    }, {
      "left" : "for (String value : header.getValue())",
      "right" : "for (String value : header.getValue())",
      "info" : "EnhancedForStatement[32222-32349]:EnhancedForStatement[32297-32424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32261-32349]:Block[32336-32424]"
    }, {
      "left" : "conn.addRequestProperty(header.getKey(), value);",
      "right" : "conn.addRequestProperty(header.getKey(), value);",
      "info" : "ExpressionStatement[32283-32331]:ExpressionStatement[32358-32406]"
    }, {
      "left" : "return conn;",
      "right" : "return conn;",
      "info" : "ReturnStatement[32376-32388]:ReturnStatement[32451-32463]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32514-32521]:Modifier[32589-32596]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[32522-32526]:PrimitiveType[32597-32601]"
    }, {
      "left" : "safeClose",
      "right" : "safeClose",
      "info" : "SimpleName[32527-32536]:SimpleName[32602-32611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32539-32930]:Block[32614-33005]"
    }, {
      "left" : "if (conn != null)",
      "right" : "if (conn != null)",
      "info" : "IfStatement[32553-32650]:IfStatement[32628-32725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32571-32650]:Block[32646-32725]"
    }, {
      "left" : "conn.disconnect();",
      "right" : "conn.disconnect();",
      "info" : "ExpressionStatement[32589-32607]:ExpressionStatement[32664-32682]"
    }, {
      "left" : "conn = null;",
      "right" : "conn = null;",
      "info" : "ExpressionStatement[32624-32636]:ExpressionStatement[32699-32711]"
    }, {
      "left" : "if (bodyStream != null)",
      "right" : "if (bodyStream != null)",
      "info" : "IfStatement[32663-32920]:IfStatement[32738-32995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32687-32920]:Block[32762-32995]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[32705-32906]:TryStatement[32780-32981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32709-32768]:Block[32784-32843]"
    }, {
      "left" : "bodyStream.close();",
      "right" : "bodyStream.close();",
      "info" : "ExpressionStatement[32731-32750]:ExpressionStatement[32806-32825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32791-32839]:Block[32866-32914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32848-32906]:Block[32923-32981]"
    }, {
      "left" : "bodyStream = null;",
      "right" : "bodyStream = null;",
      "info" : "ExpressionStatement[32870-32888]:ExpressionStatement[32945-32963]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32987-32994]:Modifier[33062-33069]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[32995-32999]:PrimitiveType[33070-33074]"
    }, {
      "left" : "setupFromConnection",
      "right" : "setupFromConnection",
      "info" : "SimpleName[33000-33019]:SimpleName[33075-33094]"
    }, {
      "left" : "HttpURLConnection conn",
      "right" : "HttpURLConnection conn",
      "info" : "SingleVariableDeclaration[33020-33042]:SingleVariableDeclaration[33095-33117]"
    }, {
      "left" : "HttpConnection.Response previousResponse",
      "right" : "HttpConnection.Response previousResponse",
      "info" : "SingleVariableDeclaration[33044-33084]:SingleVariableDeclaration[33119-33159]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[33093-33104]:SimpleType[33168-33179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33105-33958]:Block[33180-34033]"
    }, {
      "left" : "this.conn = conn;",
      "right" : "this.conn = conn;",
      "info" : "ExpressionStatement[33119-33136]:ExpressionStatement[33194-33211]"
    }, {
      "left" : "method = Method.valueOf(conn.getRequestMethod());",
      "right" : "method = Method.valueOf(conn.getRequestMethod());",
      "info" : "ExpressionStatement[33149-33198]:ExpressionStatement[33224-33273]"
    }, {
      "left" : "url = conn.getURL();",
      "right" : "url = conn.getURL();",
      "info" : "ExpressionStatement[33211-33231]:ExpressionStatement[33286-33306]"
    }, {
      "left" : "statusCode = conn.getResponseCode();",
      "right" : "statusCode = conn.getResponseCode();",
      "info" : "ExpressionStatement[33244-33280]:ExpressionStatement[33319-33355]"
    }, {
      "left" : "statusMessage = conn.getResponseMessage();",
      "right" : "statusMessage = conn.getResponseMessage();",
      "info" : "ExpressionStatement[33293-33335]:ExpressionStatement[33368-33410]"
    }, {
      "left" : "contentType = conn.getContentType();",
      "right" : "contentType = conn.getContentType();",
      "info" : "ExpressionStatement[33348-33384]:ExpressionStatement[33423-33459]"
    }, {
      "left" : "Map<String, List<String>> resHeaders = createHeaderMap(conn);",
      "right" : "Map<String, List<String>> resHeaders = createHeaderMap(conn);",
      "info" : "VariableDeclarationStatement[33398-33459]:VariableDeclarationStatement[33473-33534]"
    }, {
      "left" : "processResponseHeaders(resHeaders);",
      "right" : "processResponseHeaders(resHeaders);",
      "info" : "ExpressionStatement[33472-33507]:ExpressionStatement[33547-33582]"
    }, {
      "left" : "if (previousResponse != null)",
      "right" : "if (previousResponse != null)",
      "info" : "IfStatement[33605-33948]:IfStatement[33680-34023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33635-33948]:Block[33710-34023]"
    }, {
      "left" : "for (Map.Entry<String, String> prevCookie : previousResponse.cookies().entrySet())",
      "right" : "for (Map.Entry<String, String> prevCookie : previousResponse.cookies().entrySet())",
      "info" : "EnhancedForStatement[33653-33888]:EnhancedForStatement[33728-33963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33736-33888]:Block[33811-33963]"
    }, {
      "left" : "if (!hasCookie(prevCookie.getKey()))",
      "right" : "if (!hasCookie(prevCookie.getKey()))",
      "info" : "IfStatement[33758-33870]:IfStatement[33833-33945]"
    }, {
      "left" : "cookie(prevCookie.getKey(), prevCookie.getValue());",
      "right" : "cookie(prevCookie.getKey(), prevCookie.getValue());",
      "info" : "ExpressionStatement[33819-33870]:ExpressionStatement[33894-33945]"
    }, {
      "left" : "previousResponse.safeClose();",
      "right" : "previousResponse.safeClose();",
      "info" : "ExpressionStatement[33905-33934]:ExpressionStatement[33980-34009]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[33968-33975]:Modifier[34043-34050]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[33976-33982]:Modifier[34051-34057]"
    }, {
      "left" : "LinkedHashMap<String, List<String>>",
      "right" : "LinkedHashMap<String, List<String>>",
      "info" : "ParameterizedType[33983-34018]:ParameterizedType[34058-34093]"
    }, {
      "left" : "createHeaderMap",
      "right" : "createHeaderMap",
      "info" : "SimpleName[34019-34034]:SimpleName[34094-34109]"
    }, {
      "left" : "HttpURLConnection conn",
      "right" : "HttpURLConnection conn",
      "info" : "SingleVariableDeclaration[34035-34057]:SingleVariableDeclaration[34110-34132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34059-34946]:Block[34134-35021]"
    }, {
      "left" : "final LinkedHashMap<String, List<String>> headers = new LinkedHashMap<>();",
      "right" : "final LinkedHashMap<String, List<String>> headers = new LinkedHashMap<>();",
      "info" : "VariableDeclarationStatement[34170-34244]:VariableDeclarationStatement[34245-34319]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[34257-34267]:VariableDeclarationStatement[34332-34342]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[34280-34908]:WhileStatement[34355-34983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34293-34908]:Block[34368-34983]"
    }, {
      "left" : "final String key = conn.getHeaderFieldKey(i);",
      "right" : "final String key = conn.getHeaderFieldKey(i);",
      "info" : "VariableDeclarationStatement[34311-34356]:VariableDeclarationStatement[34386-34431]"
    }, {
      "left" : "final String val = conn.getHeaderField(i);",
      "right" : "final String val = conn.getHeaderField(i);",
      "info" : "VariableDeclarationStatement[34373-34415]:VariableDeclarationStatement[34448-34490]"
    }, {
      "left" : "if (key == null && val == null)",
      "right" : "if (key == null && val == null)",
      "info" : "IfStatement[34432-34490]:IfStatement[34507-34565]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34484-34490]:BreakStatement[34559-34565]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[34507-34511]:ExpressionStatement[34582-34586]"
    }, {
      "left" : "if (key == null || val == null)",
      "right" : "if (key == null || val == null)",
      "info" : "IfStatement[34528-34589]:IfStatement[34603-34664]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[34580-34589]:ContinueStatement[34655-34664]"
    }, {
      "left" : "if (headers.containsKey(key))",
      "right" : "if (headers.containsKey(key))",
      "info" : "IfStatement[34628-34894]:IfStatement[34703-34969]"
    }, {
      "left" : "headers.get(key).add(val);",
      "right" : "headers.get(key).add(val);",
      "info" : "ExpressionStatement[34678-34704]:ExpressionStatement[34753-34779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34726-34894]:Block[34801-34969]"
    }, {
      "left" : "final ArrayList<String> vals = new ArrayList<>();",
      "right" : "final ArrayList<String> vals = new ArrayList<>();",
      "info" : "VariableDeclarationStatement[34748-34797]:VariableDeclarationStatement[34823-34872]"
    }, {
      "left" : "vals.add(val);",
      "right" : "vals.add(val);",
      "info" : "ExpressionStatement[34818-34832]:ExpressionStatement[34893-34907]"
    }, {
      "left" : "headers.put(key, vals);",
      "right" : "headers.put(key, vals);",
      "info" : "ExpressionStatement[34853-34876]:ExpressionStatement[34928-34951]"
    }, {
      "left" : "return headers;",
      "right" : "return headers;",
      "info" : "ReturnStatement[34921-34936]:ReturnStatement[34996-35011]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34956-34960]:PrimitiveType[35031-35035]"
    }, {
      "left" : "processResponseHeaders",
      "right" : "processResponseHeaders",
      "info" : "SimpleName[34961-34983]:SimpleName[35036-35058]"
    }, {
      "left" : "Map<String, List<String>> resHeaders",
      "right" : "Map<String, List<String>> resHeaders",
      "info" : "SingleVariableDeclaration[34984-35020]:SingleVariableDeclaration[35059-35095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35022-36114]:Block[35097-36189]"
    }, {
      "left" : "for (Map.Entry<String, List<String>> entry : resHeaders.entrySet())",
      "right" : "for (Map.Entry<String, List<String>> entry : resHeaders.entrySet())",
      "info" : "EnhancedForStatement[35036-36104]:EnhancedForStatement[35111-36179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35104-36104]:Block[35179-36179]"
    }, {
      "left" : "String name = entry.getKey();",
      "right" : "String name = entry.getKey();",
      "info" : "VariableDeclarationStatement[35122-35151]:VariableDeclarationStatement[35197-35226]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[35168-35215]:IfStatement[35243-35290]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[35206-35215]:ContinueStatement[35281-35290]"
    }, {
      "left" : "List<String> values = entry.getValue();",
      "right" : "List<String> values = entry.getValue();",
      "info" : "VariableDeclarationStatement[35250-35289]:VariableDeclarationStatement[35325-35364]"
    }, {
      "left" : "if (name.equalsIgnoreCase(\"Set-Cookie\"))",
      "right" : "if (name.equalsIgnoreCase(\"Set-Cookie\"))",
      "info" : "IfStatement[35306-35982]:IfStatement[35381-36057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35347-35982]:Block[35422-36057]"
    }, {
      "left" : "for (String value : values)",
      "right" : "for (String value : values)",
      "info" : "EnhancedForStatement[35369-35964]:EnhancedForStatement[35444-36039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35397-35964]:Block[35472-36039]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[35423-35479]:IfStatement[35498-35554]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[35470-35479]:ContinueStatement[35545-35554]"
    }, {
      "left" : "TokenQueue cd = new TokenQueue(value);",
      "right" : "TokenQueue cd = new TokenQueue(value);",
      "info" : "VariableDeclarationStatement[35504-35542]:VariableDeclarationStatement[35579-35617]"
    }, {
      "left" : "String cookieName = cd.chompTo(\"=\").trim();",
      "right" : "String cookieName = cd.chompTo(\"=\").trim();",
      "info" : "VariableDeclarationStatement[35567-35610]:VariableDeclarationStatement[35642-35685]"
    }, {
      "left" : "String cookieVal = cd.consumeTo(\";\").trim();",
      "right" : "String cookieVal = cd.consumeTo(\";\").trim();",
      "info" : "VariableDeclarationStatement[35635-35679]:VariableDeclarationStatement[35710-35754]"
    }, {
      "left" : "if (cookieName.length() > 0)",
      "right" : "if (cookieName.length() > 0)",
      "info" : "IfStatement[35855-35942]:IfStatement[35930-36017]"
    }, {
      "left" : "cookie(cookieName, cookieVal);",
      "right" : "cookie(cookieName, cookieVal);",
      "info" : "ExpressionStatement[35912-35942]:ExpressionStatement[35987-36017]"
    }, {
      "left" : "for (String value : values)",
      "right" : "for (String value : values)",
      "info" : "EnhancedForStatement[35999-36090]:EnhancedForStatement[36074-36165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36027-36090]:Block[36102-36165]"
    }, {
      "left" : "addHeader(name, value);",
      "right" : "addHeader(name, value);",
      "info" : "ExpressionStatement[36049-36072]:ExpressionStatement[36124-36147]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36124-36131]:Modifier[36199-36206]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36132-36138]:Modifier[36207-36213]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[36139-36145]:SimpleType[36214-36220]"
    }, {
      "left" : "setOutputContentType",
      "right" : "setOutputContentType",
      "info" : "SimpleName[36146-36166]:SimpleName[36221-36241]"
    }, {
      "left" : "final Connection.Request req",
      "right" : "final Connection.Request req",
      "info" : "SingleVariableDeclaration[36167-36195]:SingleVariableDeclaration[36242-36270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36197-37213]:Block[36272-37288]"
    }, {
      "left" : "String bound = null;",
      "right" : "String bound = null;",
      "info" : "VariableDeclarationStatement[36211-36231]:VariableDeclarationStatement[36286-36306]"
    }, {
      "left" : "if (req.hasHeader(CONTENT_TYPE))",
      "right" : "if (req.hasHeader(CONTENT_TYPE))",
      "info" : "IfStatement[36244-37177]:IfStatement[36319-37252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36277-36863]:Block[36352-36938]"
    }, {
      "left" : "if(req.header(CONTENT_TYPE).contains(MULTIPART_FORM_DATA) &&\n                        !req.header(CONTENT_TYPE).contains(\"boundary\"))",
      "right" : "if(req.header(CONTENT_TYPE).contains(MULTIPART_FORM_DATA) &&\n                        !req.header(CONTENT_TYPE).contains(\"boundary\"))",
      "info" : "IfStatement[36552-36848]:IfStatement[36627-36923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36685-36848]:Block[36760-36923]"
    }, {
      "left" : "bound = DataUtil.mimeBoundary();",
      "right" : "bound = DataUtil.mimeBoundary();",
      "info" : "ExpressionStatement[36707-36739]:ExpressionStatement[36782-36814]"
    }, {
      "left" : "req.header(CONTENT_TYPE, MULTIPART_FORM_DATA + \"; boundary=\" + bound);",
      "right" : "req.header(CONTENT_TYPE, MULTIPART_FORM_DATA + \"; boundary=\" + bound);",
      "info" : "ExpressionStatement[36760-36830]:ExpressionStatement[36835-36905]"
    }, {
      "left" : "if (needsMultipart(req))",
      "right" : "if (needsMultipart(req))",
      "info" : "IfStatement[36881-37177]:IfStatement[36956-37252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36906-37057]:Block[36981-37132]"
    }, {
      "left" : "bound = DataUtil.mimeBoundary();",
      "right" : "bound = DataUtil.mimeBoundary();",
      "info" : "ExpressionStatement[36924-36956]:ExpressionStatement[36999-37031]"
    }, {
      "left" : "req.header(CONTENT_TYPE, MULTIPART_FORM_DATA + \"; boundary=\" + bound);",
      "right" : "req.header(CONTENT_TYPE, MULTIPART_FORM_DATA + \"; boundary=\" + bound);",
      "info" : "ExpressionStatement[36973-37043]:ExpressionStatement[37048-37118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37063-37177]:Block[37138-37252]"
    }, {
      "left" : "req.header(CONTENT_TYPE, FORM_URL_ENCODED + \"; charset=\" + req.postDataCharset());",
      "right" : "req.header(CONTENT_TYPE, FORM_URL_ENCODED + \"; charset=\" + req.postDataCharset());",
      "info" : "ExpressionStatement[37081-37163]:ExpressionStatement[37156-37238]"
    }, {
      "left" : "return bound;",
      "right" : "return bound;",
      "info" : "ReturnStatement[37190-37203]:ReturnStatement[37265-37278]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37223-37230]:Modifier[37298-37305]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[37231-37237]:Modifier[37306-37312]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[37238-37242]:PrimitiveType[37313-37317]"
    }, {
      "left" : "writePost",
      "right" : "writePost",
      "info" : "SimpleName[37243-37252]:SimpleName[37318-37327]"
    }, {
      "left" : "final Connection.Request req",
      "right" : "final Connection.Request req",
      "info" : "SingleVariableDeclaration[37253-37281]:SingleVariableDeclaration[37328-37356]"
    }, {
      "left" : "final OutputStream outputStream",
      "right" : "final OutputStream outputStream",
      "info" : "SingleVariableDeclaration[37283-37314]:SingleVariableDeclaration[37358-37389]"
    }, {
      "left" : "final String bound",
      "right" : "final String bound",
      "info" : "SingleVariableDeclaration[37316-37334]:SingleVariableDeclaration[37391-37409]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[37343-37354]:SimpleType[37418-37429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37355-39616]:Block[37430-39691]"
    }, {
      "left" : "final Collection<Connection.KeyVal> data = req.data();",
      "right" : "final Collection<Connection.KeyVal> data = req.data();",
      "info" : "VariableDeclarationStatement[37369-37423]:VariableDeclarationStatement[37444-37498]"
    }, {
      "left" : "final BufferedWriter w = new BufferedWriter(new OutputStreamWriter(outputStream, req.postDataCharset()));",
      "right" : "final BufferedWriter w = new BufferedWriter(new OutputStreamWriter(outputStream, req.postDataCharset()));",
      "info" : "VariableDeclarationStatement[37436-37541]:VariableDeclarationStatement[37511-37616]"
    }, {
      "left" : "if (bound != null)",
      "right" : "if (bound != null)",
      "info" : "IfStatement[37555-39583]:IfStatement[37630-39658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37574-38847]:Block[37649-38922]"
    }, {
      "left" : "for (Connection.KeyVal keyVal : data)",
      "right" : "for (Connection.KeyVal keyVal : data)",
      "info" : "EnhancedForStatement[37659-38739]:EnhancedForStatement[37734-38814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37697-38739]:Block[37772-38814]"
    }, {
      "left" : "w.write(\"--\");",
      "right" : "w.write(\"--\");",
      "info" : "ExpressionStatement[37719-37733]:ExpressionStatement[37794-37808]"
    }, {
      "left" : "w.write(bound);",
      "right" : "w.write(bound);",
      "info" : "ExpressionStatement[37754-37769]:ExpressionStatement[37829-37844]"
    }, {
      "left" : "w.write(\"\\r\\n\");",
      "right" : "w.write(\"\\r\\n\");",
      "info" : "ExpressionStatement[37790-37806]:ExpressionStatement[37865-37881]"
    }, {
      "left" : "w.write(\"Content-Disposition: form-data; name=\\\"\");",
      "right" : "w.write(\"Content-Disposition: form-data; name=\\\"\");",
      "info" : "ExpressionStatement[37827-37878]:ExpressionStatement[37902-37953]"
    }, {
      "left" : "w.write(encodeMimeName(keyVal.key()));",
      "right" : "w.write(encodeMimeName(keyVal.key()));",
      "info" : "ExpressionStatement[37899-37937]:ExpressionStatement[37974-38012]"
    }, {
      "left" : "w.write(\"\\\"\");",
      "right" : "w.write(\"\\\"\");",
      "info" : "ExpressionStatement[37978-37992]:ExpressionStatement[38053-38067]"
    }, {
      "left" : "if (keyVal.hasInputStream())",
      "right" : "if (keyVal.hasInputStream())",
      "info" : "IfStatement[38013-38684]:IfStatement[38088-38759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38042-38561]:Block[38117-38636]"
    }, {
      "left" : "w.write(\"; filename=\\\"\");",
      "right" : "w.write(\"; filename=\\\"\");",
      "info" : "ExpressionStatement[38068-38093]:ExpressionStatement[38143-38168]"
    }, {
      "left" : "w.write(encodeMimeName(keyVal.value()));",
      "right" : "w.write(encodeMimeName(keyVal.value()));",
      "info" : "ExpressionStatement[38118-38158]:ExpressionStatement[38193-38233]"
    }, {
      "left" : "w.write(\"\\\"\\r\\nContent-Type: \");",
      "right" : "w.write(\"\\\"\\r\\nContent-Type: \");",
      "info" : "ExpressionStatement[38183-38215]:ExpressionStatement[38258-38290]"
    }, {
      "left" : "w.write(keyVal.contentType() != null ? keyVal.contentType() : DefaultUploadType);",
      "right" : "w.write(keyVal.contentType() != null ? keyVal.contentType() : DefaultUploadType);",
      "info" : "ExpressionStatement[38240-38321]:ExpressionStatement[38315-38396]"
    }, {
      "left" : "w.write(\"\\r\\n\\r\\n\");",
      "right" : "w.write(\"\\r\\n\\r\\n\");",
      "info" : "ExpressionStatement[38346-38366]:ExpressionStatement[38421-38441]"
    }, {
      "left" : "w.flush();",
      "right" : "w.flush();",
      "info" : "ExpressionStatement[38391-38401]:ExpressionStatement[38466-38476]"
    }, {
      "left" : "DataUtil.crossStreams(keyVal.inputStream(), outputStream);",
      "right" : "DataUtil.crossStreams(keyVal.inputStream(), outputStream);",
      "info" : "ExpressionStatement[38435-38493]:ExpressionStatement[38510-38568]"
    }, {
      "left" : "outputStream.flush();",
      "right" : "outputStream.flush();",
      "info" : "ExpressionStatement[38518-38539]:ExpressionStatement[38593-38614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38567-38684]:Block[38642-38759]"
    }, {
      "left" : "w.write(\"\\r\\n\\r\\n\");",
      "right" : "w.write(\"\\r\\n\\r\\n\");",
      "info" : "ExpressionStatement[38593-38613]:ExpressionStatement[38668-38688]"
    }, {
      "left" : "w.write(keyVal.value());",
      "right" : "w.write(keyVal.value());",
      "info" : "ExpressionStatement[38638-38662]:ExpressionStatement[38713-38737]"
    }, {
      "left" : "w.write(\"\\r\\n\");",
      "right" : "w.write(\"\\r\\n\");",
      "info" : "ExpressionStatement[38705-38721]:ExpressionStatement[38780-38796]"
    }, {
      "left" : "w.write(\"--\");",
      "right" : "w.write(\"--\");",
      "info" : "ExpressionStatement[38756-38770]:ExpressionStatement[38831-38845]"
    }, {
      "left" : "w.write(bound);",
      "right" : "w.write(bound);",
      "info" : "ExpressionStatement[38787-38802]:ExpressionStatement[38862-38877]"
    }, {
      "left" : "w.write(\"--\");",
      "right" : "w.write(\"--\");",
      "info" : "ExpressionStatement[38819-38833]:ExpressionStatement[38894-38908]"
    }, {
      "left" : "if (req.requestBody() != null)",
      "right" : "if (req.requestBody() != null)",
      "info" : "IfStatement[38853-39583]:IfStatement[38928-39658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38884-39023]:Block[38959-39098]"
    }, {
      "left" : "w.write(req.requestBody());",
      "right" : "w.write(req.requestBody());",
      "info" : "ExpressionStatement[38982-39009]:ExpressionStatement[39057-39084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39041-39583]:Block[39116-39658]"
    }, {
      "left" : "boolean first = true;",
      "right" : "boolean first = true;",
      "info" : "VariableDeclarationStatement[39132-39153]:VariableDeclarationStatement[39207-39228]"
    }, {
      "left" : "for (Connection.KeyVal keyVal : data)",
      "right" : "for (Connection.KeyVal keyVal : data)",
      "info" : "EnhancedForStatement[39170-39569]:EnhancedForStatement[39245-39644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39208-39569]:Block[39283-39644]"
    }, {
      "left" : "if (!first)",
      "right" : "if (!first)",
      "info" : "IfStatement[39230-39344]:IfStatement[39305-39419]"
    }, {
      "left" : "w.append('&');",
      "right" : "w.append('&');",
      "info" : "ExpressionStatement[39266-39280]:ExpressionStatement[39341-39355]"
    }, {
      "left" : "first = false;",
      "right" : "first = false;",
      "info" : "ExpressionStatement[39330-39344]:ExpressionStatement[39405-39419]"
    }, {
      "left" : "w.write(URLEncoder.encode(keyVal.key(), req.postDataCharset()));",
      "right" : "w.write(URLEncoder.encode(keyVal.key(), req.postDataCharset()));",
      "info" : "ExpressionStatement[39366-39430]:ExpressionStatement[39441-39505]"
    }, {
      "left" : "w.write('=');",
      "right" : "w.write('=');",
      "info" : "ExpressionStatement[39451-39464]:ExpressionStatement[39526-39539]"
    }, {
      "left" : "w.write(URLEncoder.encode(keyVal.value(), req.postDataCharset()));",
      "right" : "w.write(URLEncoder.encode(keyVal.value(), req.postDataCharset()));",
      "info" : "ExpressionStatement[39485-39551]:ExpressionStatement[39560-39626]"
    }, {
      "left" : "w.close();",
      "right" : "w.close();",
      "info" : "ExpressionStatement[39596-39606]:ExpressionStatement[39671-39681]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[39626-39633]:Modifier[39701-39708]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39634-39640]:Modifier[39709-39715]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[39641-39647]:SimpleType[39716-39722]"
    }, {
      "left" : "getRequestCookieString",
      "right" : "getRequestCookieString",
      "info" : "SimpleName[39648-39670]:SimpleName[39723-39745]"
    }, {
      "left" : "Connection.Request req",
      "right" : "Connection.Request req",
      "info" : "SingleVariableDeclaration[39671-39693]:SingleVariableDeclaration[39746-39768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39695-40266]:Block[39770-40341]"
    }, {
      "left" : "StringBuilder sb = StringUtil.borrowBuilder();",
      "right" : "StringBuilder sb = StringUtil.borrowBuilder();",
      "info" : "VariableDeclarationStatement[39709-39755]:VariableDeclarationStatement[39784-39830]"
    }, {
      "left" : "boolean first = true;",
      "right" : "boolean first = true;",
      "info" : "VariableDeclarationStatement[39768-39789]:VariableDeclarationStatement[39843-39864]"
    }, {
      "left" : "for (Map.Entry<String, String> cookie : req.cookies().entrySet())",
      "right" : "for (Map.Entry<String, String> cookie : req.cookies().entrySet())",
      "info" : "EnhancedForStatement[39802-40206]:EnhancedForStatement[39877-40281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39868-40206]:Block[39943-40281]"
    }, {
      "left" : "if (!first)",
      "right" : "if (!first)",
      "info" : "IfStatement[39886-39990]:IfStatement[39961-40065]"
    }, {
      "left" : "sb.append(\"; \");",
      "right" : "sb.append(\"; \");",
      "info" : "ExpressionStatement[39918-39934]:ExpressionStatement[39993-40009]"
    }, {
      "left" : "first = false;",
      "right" : "first = false;",
      "info" : "ExpressionStatement[39976-39990]:ExpressionStatement[40051-40065]"
    }, {
      "left" : "sb.append(cookie.getKey()).append('=').append(cookie.getValue());",
      "right" : "sb.append(cookie.getKey()).append('=').append(cookie.getValue());",
      "info" : "ExpressionStatement[40007-40072]:ExpressionStatement[40082-40147]"
    }, {
      "left" : "return StringUtil.releaseBuilder(sb);",
      "right" : "return StringUtil.releaseBuilder(sb);",
      "info" : "ReturnStatement[40219-40256]:ReturnStatement[40294-40331]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[40341-40348]:Modifier[40416-40423]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[40349-40355]:Modifier[40424-40430]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[40356-40360]:PrimitiveType[40431-40435]"
    }, {
      "left" : "serialiseRequestUrl",
      "right" : "serialiseRequestUrl",
      "info" : "SimpleName[40361-40380]:SimpleName[40436-40455]"
    }, {
      "left" : "Connection.Request req",
      "right" : "Connection.Request req",
      "info" : "SingleVariableDeclaration[40381-40403]:SingleVariableDeclaration[40456-40478]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[40412-40423]:SimpleType[40487-40498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40424-41631]:Block[40499-41706]"
    }, {
      "left" : "URL in = req.url();",
      "right" : "URL in = req.url();",
      "info" : "VariableDeclarationStatement[40438-40457]:VariableDeclarationStatement[40513-40532]"
    }, {
      "left" : "StringBuilder url = StringUtil.borrowBuilder();",
      "right" : "StringBuilder url = StringUtil.borrowBuilder();",
      "info" : "VariableDeclarationStatement[40470-40517]:VariableDeclarationStatement[40545-40592]"
    }, {
      "left" : "boolean first = true;",
      "right" : "boolean first = true;",
      "info" : "VariableDeclarationStatement[40530-40551]:VariableDeclarationStatement[40605-40626]"
    }, {
      "left" : "url\n                .append(in.getProtocol())\n                .append(\"://\")\n                .append(in.getAuthority()) // includes host, port\n                .append(in.getPath())\n                .append(\"?\");",
      "right" : "url\n                .append(in.getProtocol())\n                .append(\"://\")\n                .append(in.getAuthority()) // includes host, port\n                .append(in.getPath())\n                .append(\"?\");",
      "info" : "ExpressionStatement[40621-40831]:ExpressionStatement[40696-40906]"
    }, {
      "left" : "if (in.getQuery() != null)",
      "right" : "if (in.getQuery() != null)",
      "info" : "IfStatement[40844-40960]:IfStatement[40919-41035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40871-40960]:Block[40946-41035]"
    }, {
      "left" : "url.append(in.getQuery());",
      "right" : "url.append(in.getQuery());",
      "info" : "ExpressionStatement[40889-40915]:ExpressionStatement[40964-40990]"
    }, {
      "left" : "first = false;",
      "right" : "first = false;",
      "info" : "ExpressionStatement[40932-40946]:ExpressionStatement[41007-41021]"
    }, {
      "left" : "for (Connection.KeyVal keyVal : req.data())",
      "right" : "for (Connection.KeyVal keyVal : req.data())",
      "info" : "EnhancedForStatement[40973-41495]:EnhancedForStatement[41048-41570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41017-41495]:Block[41092-41570]"
    }, {
      "left" : "Validate.isFalse(keyVal.hasInputStream(), \"InputStream data not supported in URL query string.\");",
      "right" : "Validate.isFalse(keyVal.hasInputStream(), \"InputStream data not supported in URL query string.\");",
      "info" : "ExpressionStatement[41035-41132]:ExpressionStatement[41110-41207]"
    }, {
      "left" : "if (!first)",
      "right" : "if (!first)",
      "info" : "IfStatement[41149-41253]:IfStatement[41224-41328]"
    }, {
      "left" : "url.append('&');",
      "right" : "url.append('&');",
      "info" : "ExpressionStatement[41181-41197]:ExpressionStatement[41256-41272]"
    }, {
      "left" : "first = false;",
      "right" : "first = false;",
      "info" : "ExpressionStatement[41239-41253]:ExpressionStatement[41314-41328]"
    }, {
      "left" : "url\n                    .append(URLEncoder.encode(keyVal.key(), DataUtil.defaultCharset))\n                    .append('=')\n                    .append(URLEncoder.encode(keyVal.value(), DataUtil.defaultCharset));",
      "right" : "url\n                    .append(URLEncoder.encode(keyVal.key(), DataUtil.defaultCharset))\n                    .append('=')\n                    .append(URLEncoder.encode(keyVal.value(), DataUtil.defaultCharset));",
      "info" : "ExpressionStatement[41270-41481]:ExpressionStatement[41345-41556]"
    }, {
      "left" : "req.url(new URL(StringUtil.releaseBuilder(url)));",
      "right" : "req.url(new URL(StringUtil.releaseBuilder(url)));",
      "info" : "ExpressionStatement[41508-41557]:ExpressionStatement[41583-41632]"
    }, {
      "left" : "req.data().clear();",
      "right" : "req.data().clear();",
      "info" : "ExpressionStatement[41570-41589]:ExpressionStatement[41645-41664]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[41643-41650]:Modifier[41718-41725]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[41651-41657]:Modifier[41726-41732]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[41658-41665]:PrimitiveType[41733-41740]"
    }, {
      "left" : "needsMultipart",
      "right" : "needsMultipart",
      "info" : "SimpleName[41666-41680]:SimpleName[41741-41755]"
    }, {
      "left" : "Connection.Request req",
      "right" : "Connection.Request req",
      "info" : "SingleVariableDeclaration[41681-41703]:SingleVariableDeclaration[41756-41778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41705-41993]:Block[41780-42068]"
    }, {
      "left" : "for (Connection.KeyVal keyVal : req.data())",
      "right" : "for (Connection.KeyVal keyVal : req.data())",
      "info" : "EnhancedForStatement[41840-41965]:EnhancedForStatement[41915-42040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41884-41965]:Block[41959-42040]"
    }, {
      "left" : "if (keyVal.hasInputStream())",
      "right" : "if (keyVal.hasInputStream())",
      "info" : "IfStatement[41898-41955]:IfStatement[41973-42030]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[41943-41955]:ReturnStatement[42018-42030]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[41974-41987]:ReturnStatement[42049-42062]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[41999-42005]:Modifier[42074-42080]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[42006-42012]:Modifier[42081-42087]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[42013-42018]:TYPE_DECLARATION_KIND[42088-42093]"
    }, {
      "left" : "KeyVal",
      "right" : "KeyVal",
      "info" : "SimpleName[42019-42025]:SimpleName[42094-42100]"
    }, {
      "left" : "Connection.KeyVal",
      "right" : "Connection.KeyVal",
      "info" : "SimpleType[42037-42054]:SimpleType[42112-42129]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42196-42202]:Modifier[42271-42277]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[42203-42209]:Modifier[42278-42284]"
    }, {
      "left" : "KeyVal",
      "right" : "KeyVal",
      "info" : "SimpleType[42210-42216]:SimpleType[42285-42291]"
    }, {
      "left" : "create",
      "right" : "create",
      "info" : "SimpleName[42217-42223]:SimpleName[42292-42298]"
    }, {
      "left" : "String key",
      "right" : "String key",
      "info" : "SingleVariableDeclaration[42224-42234]:SingleVariableDeclaration[42299-42309]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[42236-42248]:SingleVariableDeclaration[42311-42323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42250-42316]:Block[42325-42391]"
    }, {
      "left" : "return new KeyVal().key(key).value(value);",
      "right" : "return new KeyVal().key(key).value(value);",
      "info" : "ReturnStatement[42264-42306]:ReturnStatement[42339-42381]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42326-42332]:Modifier[42401-42407]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[42333-42339]:Modifier[42408-42414]"
    }, {
      "left" : "KeyVal",
      "right" : "KeyVal",
      "info" : "SimpleType[42340-42346]:SimpleType[42415-42421]"
    }, {
      "left" : "create",
      "right" : "create",
      "info" : "SimpleName[42347-42353]:SimpleName[42422-42428]"
    }, {
      "left" : "String key",
      "right" : "String key",
      "info" : "SingleVariableDeclaration[42354-42364]:SingleVariableDeclaration[42429-42439]"
    }, {
      "left" : "String filename",
      "right" : "String filename",
      "info" : "SingleVariableDeclaration[42366-42381]:SingleVariableDeclaration[42441-42456]"
    }, {
      "left" : "InputStream stream",
      "right" : "InputStream stream",
      "info" : "SingleVariableDeclaration[42383-42401]:SingleVariableDeclaration[42458-42476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42403-42492]:Block[42478-42567]"
    }, {
      "left" : "return new KeyVal().key(key).value(filename).inputStream(stream);",
      "right" : "return new KeyVal().key(key).value(filename).inputStream(stream);",
      "info" : "ReturnStatement[42417-42482]:ReturnStatement[42492-42557]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[42502-42509]:Modifier[42577-42584]"
    }, {
      "left" : "KeyVal",
      "right" : "KeyVal",
      "info" : "SimpleName[42510-42516]:SimpleName[42585-42591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42519-42521]:Block[42594-42596]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42531-42537]:Modifier[42606-42612]"
    }, {
      "left" : "KeyVal",
      "right" : "KeyVal",
      "info" : "SimpleType[42538-42544]:SimpleType[42613-42619]"
    }, {
      "left" : "key",
      "right" : "key",
      "info" : "SimpleName[42545-42548]:SimpleName[42620-42623]"
    }, {
      "left" : "String key",
      "right" : "String key",
      "info" : "SingleVariableDeclaration[42549-42559]:SingleVariableDeclaration[42624-42634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42561-42691]:Block[42636-42766]"
    }, {
      "left" : "Validate.notEmpty(key, \"Data key must not be empty\");",
      "right" : "Validate.notEmpty(key, \"Data key must not be empty\");",
      "info" : "ExpressionStatement[42575-42628]:ExpressionStatement[42650-42703]"
    }, {
      "left" : "this.key = key;",
      "right" : "this.key = key;",
      "info" : "ExpressionStatement[42641-42656]:ExpressionStatement[42716-42731]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[42669-42681]:ReturnStatement[42744-42756]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42701-42707]:Modifier[42776-42782]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[42708-42714]:SimpleType[42783-42789]"
    }, {
      "left" : "key",
      "right" : "key",
      "info" : "SimpleName[42715-42718]:SimpleName[42790-42793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42721-42756]:Block[42796-42831]"
    }, {
      "left" : "return key;",
      "right" : "return key;",
      "info" : "ReturnStatement[42735-42746]:ReturnStatement[42810-42821]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42766-42772]:Modifier[42841-42847]"
    }, {
      "left" : "KeyVal",
      "right" : "KeyVal",
      "info" : "SimpleType[42773-42779]:SimpleType[42848-42854]"
    }, {
      "left" : "value",
      "right" : "value",
      "info" : "SimpleName[42780-42785]:SimpleName[42855-42860]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[42786-42798]:SingleVariableDeclaration[42861-42873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42800-42936]:Block[42875-43011]"
    }, {
      "left" : "Validate.notNull(value, \"Data value must not be null\");",
      "right" : "Validate.notNull(value, \"Data value must not be null\");",
      "info" : "ExpressionStatement[42814-42869]:ExpressionStatement[42889-42944]"
    }, {
      "left" : "this.value = value;",
      "right" : "this.value = value;",
      "info" : "ExpressionStatement[42882-42901]:ExpressionStatement[42957-42976]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[42914-42926]:ReturnStatement[42989-43001]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42946-42952]:Modifier[43021-43027]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[42953-42959]:SimpleType[43028-43034]"
    }, {
      "left" : "value",
      "right" : "value",
      "info" : "SimpleName[42960-42965]:SimpleName[43035-43040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42968-43005]:Block[43043-43080]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[42982-42995]:ReturnStatement[43057-43070]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43015-43021]:Modifier[43090-43096]"
    }, {
      "left" : "KeyVal",
      "right" : "KeyVal",
      "info" : "SimpleType[43022-43028]:SimpleType[43097-43103]"
    }, {
      "left" : "inputStream",
      "right" : "inputStream",
      "info" : "SimpleName[43029-43040]:SimpleName[43104-43115]"
    }, {
      "left" : "InputStream inputStream",
      "right" : "InputStream inputStream",
      "info" : "SingleVariableDeclaration[43041-43064]:SingleVariableDeclaration[43116-43139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43066-43216]:Block[43141-43291]"
    }, {
      "left" : "Validate.notNull(value, \"Data input stream must not be null\");",
      "right" : "Validate.notNull(value, \"Data input stream must not be null\");",
      "info" : "ExpressionStatement[43080-43142]:ExpressionStatement[43155-43217]"
    }, {
      "left" : "this.stream = inputStream;",
      "right" : "this.stream = inputStream;",
      "info" : "ExpressionStatement[43155-43181]:ExpressionStatement[43230-43256]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[43194-43206]:ReturnStatement[43269-43281]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43226-43232]:Modifier[43301-43307]"
    }, {
      "left" : "InputStream",
      "right" : "InputStream",
      "info" : "SimpleType[43233-43244]:SimpleType[43308-43319]"
    }, {
      "left" : "inputStream",
      "right" : "inputStream",
      "info" : "SimpleName[43245-43256]:SimpleName[43320-43331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43259-43297]:Block[43334-43372]"
    }, {
      "left" : "return stream;",
      "right" : "return stream;",
      "info" : "ReturnStatement[43273-43287]:ReturnStatement[43348-43362]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43307-43313]:Modifier[43382-43388]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[43314-43321]:PrimitiveType[43389-43396]"
    }, {
      "left" : "hasInputStream",
      "right" : "hasInputStream",
      "info" : "SimpleName[43322-43336]:SimpleName[43397-43411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43339-43385]:Block[43414-43460]"
    }, {
      "left" : "return stream != null;",
      "right" : "return stream != null;",
      "info" : "ReturnStatement[43353-43375]:ReturnStatement[43428-43450]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[43395-43404]:MarkerAnnotation[43470-43479]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43413-43419]:Modifier[43488-43494]"
    }, {
      "left" : "Connection.KeyVal",
      "right" : "Connection.KeyVal",
      "info" : "SimpleType[43420-43437]:SimpleType[43495-43512]"
    }, {
      "left" : "contentType",
      "right" : "contentType",
      "info" : "SimpleName[43438-43449]:SimpleName[43513-43524]"
    }, {
      "left" : "String contentType",
      "right" : "String contentType",
      "info" : "SingleVariableDeclaration[43450-43468]:SingleVariableDeclaration[43525-43543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43470-43594]:Block[43545-43669]"
    }, {
      "left" : "Validate.notEmpty(contentType);",
      "right" : "Validate.notEmpty(contentType);",
      "info" : "ExpressionStatement[43484-43515]:ExpressionStatement[43559-43590]"
    }, {
      "left" : "this.contentType = contentType;",
      "right" : "this.contentType = contentType;",
      "info" : "ExpressionStatement[43528-43559]:ExpressionStatement[43603-43634]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[43572-43584]:ReturnStatement[43647-43659]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[43604-43613]:MarkerAnnotation[43679-43688]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43622-43628]:Modifier[43697-43703]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[43629-43635]:SimpleType[43704-43710]"
    }, {
      "left" : "contentType",
      "right" : "contentType",
      "info" : "SimpleName[43636-43647]:SimpleName[43711-43722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43650-43693]:Block[43725-43768]"
    }, {
      "left" : "return contentType;",
      "right" : "return contentType;",
      "info" : "ReturnStatement[43664-43683]:ReturnStatement[43739-43758]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[43703-43712]:MarkerAnnotation[43778-43787]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43721-43727]:Modifier[43796-43802]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[43728-43734]:SimpleType[43803-43809]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[43735-43743]:SimpleName[43810-43818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43746-43795]:Block[43821-43870]"
    }, {
      "left" : "return key + \"=\" + value;",
      "right" : "return key + \"=\" + value;",
      "info" : "ReturnStatement[43760-43785]:ReturnStatement[43835-43860]"
    } ]
  },
  "interFileMappings" : { }
}