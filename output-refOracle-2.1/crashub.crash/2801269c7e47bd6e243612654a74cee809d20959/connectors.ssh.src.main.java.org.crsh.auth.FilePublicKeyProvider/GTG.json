{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "FilePublicKeyProvider",
      "right" : "FilePublicKeyProvider",
      "info" : "TypeDeclaration[1343-2853]:TypeDeclaration[1445-3406]"
    }, {
      "left" : "private static final Logger LOG = LoggerFactory.getLogger(FilePublicKeyProvider.class);",
      "right" : "private static final Logger LOG = LoggerFactory.getLogger(FilePublicKeyProvider.class);",
      "info" : "FieldDeclaration[1660-1758]:FieldDeclaration[1762-1860]"
    }, {
      "left" : "private String[] files;",
      "right" : "private String[] files;",
      "info" : "FieldDeclaration[1762-1796]:FieldDeclaration[1864-1898]"
    }, {
      "left" : "FilePublicKeyProvider(String[] files)",
      "right" : "FilePublicKeyProvider(String[] files)",
      "info" : "MethodDeclaration[1800-1867]:MethodDeclaration[1902-1969]"
    }, {
      "left" : "public Iterable<KeyPair> loadKeys()",
      "right" : "public Iterable<KeyPair> loadKeys()",
      "info" : "MethodDeclaration[1871-2851]:MethodDeclaration[1973-3171]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1838-1867]:Block[1940-1969]"
    }, {
      "left" : "this.files = files;",
      "right" : "this.files = files;",
      "info" : "ExpressionStatement[1844-1863]:ExpressionStatement[1946-1965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1907-2851]:Block[2009-3171]"
    }, {
      "left" : "if (!SecurityUtils.isBouncyCastleRegistered())",
      "right" : "if (!SecurityUtils.isBouncyCastleRegistered())",
      "info" : "IfStatement[1913-2059]:IfStatement[2015-2161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1960-2059]:Block[2062-2161]"
    }, {
      "left" : "throw new IllegalStateException(\"BouncyCastle must be registered as a JCE provider\");",
      "right" : "throw new IllegalStateException(\"BouncyCastle must be registered as a JCE provider\");",
      "info" : "ThrowStatement[1968-2053]:ThrowStatement[2070-2155]"
    }, {
      "left" : "List<KeyPair> keys = new ArrayList<KeyPair>();",
      "right" : "List<KeyPair> keys = new ArrayList<KeyPair>();",
      "info" : "VariableDeclarationStatement[2064-2110]:VariableDeclarationStatement[2166-2212]"
    }, {
      "left" : "for (String file : files)",
      "right" : "for (String file : files)",
      "info" : "EnhancedForStatement[2115-2830]:EnhancedForStatement[2217-3150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2141-2830]:Block[2243-3150]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[2149-2824]:TryStatement[2251-3144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2153-2732]:Block[2255-3052]"
    }, {
      "left" : "Object o = KeyPairUtils.readKey(new InputStreamReader(new FileInputStream(file)));",
      "right" : "Object o = KeyPairUtils.readKey(new InputStreamReader(new FileInputStream(file)));",
      "info" : "VariableDeclarationStatement[2165-2247]:VariableDeclarationStatement[2267-2349]"
    }, {
      "left" : "if (o instanceof KeyPair)",
      "right" : "if (o instanceof KeyPair)",
      "info" : "IfStatement[2258-2724]:IfStatement[2360-3044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2284-2364]:Block[2386-2466]"
    }, {
      "left" : "keys.add(new KeyPair(((KeyPair)o).getPublic(), null));",
      "right" : "keys.add(new KeyPair(((KeyPair)o).getPublic(), null));",
      "info" : "ExpressionStatement[2298-2352]:ExpressionStatement[2400-2454]"
    }, {
      "left" : "if (o instanceof PublicKey)",
      "right" : "if (o instanceof PublicKey)",
      "info" : "IfStatement[2370-2724]:IfStatement[2472-3044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2398-2466]:Block[2500-2568]"
    }, {
      "left" : "keys.add(new KeyPair((PublicKey)o, null));",
      "right" : "keys.add(new KeyPair((PublicKey)o, null));",
      "info" : "ExpressionStatement[2412-2454]:ExpressionStatement[2514-2556]"
    }, {
      "left" : "if (o instanceof PEMKeyPair)",
      "right" : "if (o instanceof PEMKeyPair)",
      "info" : "IfStatement[2472-2724]:IfStatement[2574-3044]"
    }, {
      "left" : "PEMKeyPair keyPair = (PEMKeyPair)o;",
      "right" : "PEMKeyPair keyPair = (PEMKeyPair)o;",
      "info" : "VariableDeclarationStatement[2515-2550]:VariableDeclarationStatement[2617-2652]"
    }, {
      "left" : "JcaPEMKeyConverter converter = new JcaPEMKeyConverter();",
      "right" : "JcaPEMKeyConverter converter = new JcaPEMKeyConverter();",
      "info" : "VariableDeclarationStatement[2563-2619]:VariableDeclarationStatement[3258-3314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2759-2824]:Block[3079-3144]"
    }, {
      "left" : "LOG.info(\"Unable to read key {}: {}\", file, e);",
      "right" : "LOG.info(\"Unable to read key {}: {}\", file, e);",
      "info" : "ExpressionStatement[2769-2816]:ExpressionStatement[3089-3136]"
    }, {
      "left" : "return keys;",
      "right" : "return keys;",
      "info" : "ReturnStatement[2835-2847]:ReturnStatement[3155-3167]"
    } ]
  },
  "interFileMappings" : { }
}