{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "TypeDeclaration[1406-32239]:TypeDeclaration[1406-32186]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[4159-4207]:FieldDeclaration[4159-4207]"
    }, {
      "left" : "private final char delimiter;",
      "right" : "private final char delimiter;",
      "info" : "FieldDeclaration[4213-4242]:FieldDeclaration[4213-4242]"
    }, {
      "left" : "private final Character quoteChar;",
      "right" : "private final Character quoteChar;",
      "info" : "FieldDeclaration[4247-4281]:FieldDeclaration[4247-4281]"
    }, {
      "left" : "private final Quote quotePolicy;",
      "right" : "private final Quote quotePolicy;",
      "info" : "FieldDeclaration[4317-4349]:FieldDeclaration[4317-4349]"
    }, {
      "left" : "private final Character commentStart;",
      "right" : "private final Character commentStart;",
      "info" : "FieldDeclaration[4354-4391]:FieldDeclaration[4354-4391]"
    }, {
      "left" : "private final Character escape;",
      "right" : "private final Character escape;",
      "info" : "FieldDeclaration[4430-4461]:FieldDeclaration[4430-4461]"
    }, {
      "left" : "private final boolean ignoreSurroundingSpaces;",
      "right" : "private final boolean ignoreSurroundingSpaces;",
      "info" : "FieldDeclaration[4498-4544]:FieldDeclaration[4498-4544]"
    }, {
      "left" : "private final boolean ignoreEmptyLines;",
      "right" : "private final boolean ignoreEmptyLines;",
      "info" : "FieldDeclaration[4609-4648]:FieldDeclaration[4609-4648]"
    }, {
      "left" : "private final String recordSeparator;",
      "right" : "private final String recordSeparator;",
      "info" : "FieldDeclaration[4653-4690]:FieldDeclaration[4653-4690]"
    }, {
      "left" : "private final String nullString;",
      "right" : "private final String nullString;",
      "info" : "FieldDeclaration[4710-4742]:FieldDeclaration[4710-4742]"
    }, {
      "left" : "private final String[] header;",
      "right" : "private final String[] header;",
      "info" : "FieldDeclaration[4788-4818]:FieldDeclaration[4788-4818]"
    }, {
      "left" : "private final boolean skipHeaderRecord;",
      "right" : "private final boolean skipHeaderRecord;",
      "info" : "FieldDeclaration[4855-4894]:FieldDeclaration[4855-4894]"
    }, {
      "left" : "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null,\n                                                            false, true, CRLF, null, null, false);",
      "right" : "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null,\n                                                            false, true, CRLF, null, null, false);",
      "info" : "FieldDeclaration[4900-5461]:FieldDeclaration[4900-5461]"
    }, {
      "left" : "public static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);",
      "right" : "public static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);",
      "info" : "FieldDeclaration[5467-5825]:FieldDeclaration[5467-5825]"
    }, {
      "left" : "public static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false);",
      "right" : "public static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false);",
      "info" : "FieldDeclaration[5831-6638]:FieldDeclaration[5831-6638]"
    }, {
      "left" : "public static final CSVFormat TDF =\n            DEFAULT\n            .withDelimiter(TAB)\n            .withIgnoreSurroundingSpaces(true);",
      "right" : "public static final CSVFormat TDF =\n            DEFAULT\n            .withDelimiter(TAB)\n            .withIgnoreSurroundingSpaces(true);",
      "info" : "FieldDeclaration[6644-6861]:FieldDeclaration[6644-6861]"
    }, {
      "left" : "public static final CSVFormat MYSQL =\n            DEFAULT\n            .withDelimiter(TAB)\n            .withEscape(BACKSLASH)\n            .withIgnoreEmptyLines(false)\n            .withQuoteChar(null)\n            .withRecordSeparator(LF);",
      "right" : "public static final CSVFormat MYSQL =\n            DEFAULT\n            .withDelimiter(TAB)\n            .withEscape(BACKSLASH)\n            .withIgnoreEmptyLines(false)\n            .withQuoteChar(null)\n            .withRecordSeparator(LF);",
      "info" : "FieldDeclaration[6867-7539]:FieldDeclaration[6867-7539]"
    }, {
      "left" : "private static boolean isLineBreak(final char c)",
      "right" : "private static boolean isLineBreak(final char c)",
      "info" : "MethodDeclaration[7545-7857]:MethodDeclaration[7545-7857]"
    }, {
      "left" : "private static boolean isLineBreak(final Character c)",
      "right" : "private static boolean isLineBreak(final Character c)",
      "info" : "MethodDeclaration[7863-8229]:MethodDeclaration[7863-8229]"
    }, {
      "left" : "public static CSVFormat newFormat(final char delimiter)",
      "right" : "public static CSVFormat newFormat(final char delimiter)",
      "info" : "MethodDeclaration[8235-8716]:MethodDeclaration[8235-8716]"
    }, {
      "left" : "private CSVFormat(final char delimiter, final Character quoteChar,\n            final Quote quotePolicy, final Character commentStart,\n            final Character escape, final boolean ignoreSurroundingSpaces,\n            final boolean ignoreEmptyLines, final String recordSeparator,\n            final String nullString, final String[] header, final boolean skipHeaderRecord)",
      "right" : "private CSVFormat(final char delimiter, final Character quoteChar,\n            final Quote quotePolicy, final Character commentStart,\n            final Character escape, final boolean ignoreSurroundingSpaces,\n            final boolean ignoreEmptyLines, final String recordSeparator,\n            final String nullString, final String[] header, final boolean skipHeaderRecord)",
      "info" : "MethodDeclaration[8722-10982]:MethodDeclaration[8722-11265]"
    }, {
      "left" : "public boolean equals(final Object obj)",
      "right" : "public boolean equals(final Object obj)",
      "info" : "MethodDeclaration[10988-12966]:MethodDeclaration[11271-13249]"
    }, {
      "left" : "public String format(final Object... values)",
      "right" : "public String format(final Object... values)",
      "info" : "MethodDeclaration[12972-13518]:MethodDeclaration[13255-13801]"
    }, {
      "left" : "public Character getCommentStart()",
      "right" : "public Character getCommentStart()",
      "info" : "MethodDeclaration[13524-13745]:MethodDeclaration[13807-14028]"
    }, {
      "left" : "public char getDelimiter()",
      "right" : "public char getDelimiter()",
      "info" : "MethodDeclaration[13751-13954]:MethodDeclaration[14034-14237]"
    }, {
      "left" : "public Character getEscape()",
      "right" : "public Character getEscape()",
      "info" : "MethodDeclaration[13960-14136]:MethodDeclaration[14243-14419]"
    }, {
      "left" : "public String[] getHeader()",
      "right" : "public String[] getHeader()",
      "info" : "MethodDeclaration[14142-14340]:MethodDeclaration[14425-14623]"
    }, {
      "left" : "public boolean getIgnoreEmptyLines()",
      "right" : "public boolean getIgnoreEmptyLines()",
      "info" : "MethodDeclaration[14346-14673]:MethodDeclaration[14629-14956]"
    }, {
      "left" : "public boolean getIgnoreSurroundingSpaces()",
      "right" : "public boolean getIgnoreSurroundingSpaces()",
      "info" : "MethodDeclaration[14679-15009]:MethodDeclaration[14962-15292]"
    }, {
      "left" : "public String getNullString()",
      "right" : "public String getNullString()",
      "info" : "MethodDeclaration[15015-15571]:MethodDeclaration[15298-15854]"
    }, {
      "left" : "public Character getQuoteChar()",
      "right" : "public Character getQuoteChar()",
      "info" : "MethodDeclaration[15577-15812]:MethodDeclaration[15860-16095]"
    }, {
      "left" : "public Quote getQuotePolicy()",
      "right" : "public Quote getQuotePolicy()",
      "info" : "MethodDeclaration[15818-15985]:MethodDeclaration[16101-16268]"
    }, {
      "left" : "public String getRecordSeparator()",
      "right" : "public String getRecordSeparator()",
      "info" : "MethodDeclaration[15991-16183]:MethodDeclaration[16274-16466]"
    }, {
      "left" : "public boolean getSkipHeaderRecord()",
      "right" : "public boolean getSkipHeaderRecord()",
      "info" : "MethodDeclaration[16189-16389]:MethodDeclaration[16472-16672]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[16395-17357]:MethodDeclaration[16678-17640]"
    }, {
      "left" : "public boolean isCommentingEnabled()",
      "right" : "public boolean isCommentingEnabled()",
      "info" : "MethodDeclaration[17363-17712]:MethodDeclaration[17646-17995]"
    }, {
      "left" : "public boolean isEscaping()",
      "right" : "public boolean isEscaping()",
      "info" : "MethodDeclaration[17718-17911]:MethodDeclaration[18001-18194]"
    }, {
      "left" : "public boolean isNullHandling()",
      "right" : "public boolean isNullHandling()",
      "info" : "MethodDeclaration[17917-18123]:MethodDeclaration[18200-18406]"
    }, {
      "left" : "public boolean isQuoting()",
      "right" : "public boolean isQuoting()",
      "info" : "MethodDeclaration[18129-18327]:MethodDeclaration[18412-18610]"
    }, {
      "left" : "public CSVParser parse(final Reader in) throws IOException",
      "right" : "public CSVParser parse(final Reader in) throws IOException",
      "info" : "MethodDeclaration[18333-18782]:MethodDeclaration[18616-19065]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[18788-20088]:MethodDeclaration[19071-20371]"
    }, {
      "left" : "void validate() throws IllegalStateException",
      "right" : "void validate() throws IllegalStateException",
      "info" : "MethodDeclaration[20094-21978]:MethodDeclaration[20377-21925]"
    }, {
      "left" : "public CSVFormat withCommentStart(final char commentStart)",
      "right" : "public CSVFormat withCommentStart(final char commentStart)",
      "info" : "MethodDeclaration[21984-22610]:MethodDeclaration[21931-22557]"
    }, {
      "left" : "public CSVFormat withCommentStart(final Character commentStart)",
      "right" : "public CSVFormat withCommentStart(final Character commentStart)",
      "info" : "MethodDeclaration[22616-23564]:MethodDeclaration[22563-23511]"
    }, {
      "left" : "public CSVFormat withDelimiter(final char delimiter)",
      "right" : "public CSVFormat withDelimiter(final char delimiter)",
      "info" : "MethodDeclaration[23570-24328]:MethodDeclaration[23517-24275]"
    }, {
      "left" : "public CSVFormat withEscape(final char escape)",
      "right" : "public CSVFormat withEscape(final char escape)",
      "info" : "MethodDeclaration[24334-24818]:MethodDeclaration[24281-24765]"
    }, {
      "left" : "public CSVFormat withEscape(final Character escape)",
      "right" : "public CSVFormat withEscape(final Character escape)",
      "info" : "MethodDeclaration[24824-25630]:MethodDeclaration[24771-25577]"
    }, {
      "left" : "public CSVFormat withHeader(final String... header)",
      "right" : "public CSVFormat withHeader(final String... header)",
      "info" : "MethodDeclaration[25636-26541]:MethodDeclaration[25583-26488]"
    }, {
      "left" : "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines)",
      "right" : "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines)",
      "info" : "MethodDeclaration[26547-27234]:MethodDeclaration[26494-27181]"
    }, {
      "left" : "public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces)",
      "right" : "public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces)",
      "info" : "MethodDeclaration[27240-27886]:MethodDeclaration[27187-27833]"
    }, {
      "left" : "public CSVFormat withNullString(final String nullString)",
      "right" : "public CSVFormat withNullString(final String nullString)",
      "info" : "MethodDeclaration[27892-28794]:MethodDeclaration[27839-28741]"
    }, {
      "left" : "public CSVFormat withQuoteChar(final char quoteChar)",
      "right" : "public CSVFormat withQuoteChar(final char quoteChar)",
      "info" : "MethodDeclaration[28800-29285]:MethodDeclaration[28747-29232]"
    }, {
      "left" : "public CSVFormat withQuoteChar(final Character quoteChar)",
      "right" : "public CSVFormat withQuoteChar(final Character quoteChar)",
      "info" : "MethodDeclaration[29291-30087]:MethodDeclaration[29238-30034]"
    }, {
      "left" : "public CSVFormat withQuotePolicy(final Quote quotePolicy)",
      "right" : "public CSVFormat withQuotePolicy(final Quote quotePolicy)",
      "info" : "MethodDeclaration[30093-30632]:MethodDeclaration[30040-30579]"
    }, {
      "left" : "public CSVFormat withRecordSeparator(final char recordSeparator)",
      "right" : "public CSVFormat withRecordSeparator(final char recordSeparator)",
      "info" : "MethodDeclaration[30638-31076]:MethodDeclaration[30585-31023]"
    }, {
      "left" : "public CSVFormat withRecordSeparator(final String recordSeparator)",
      "right" : "public CSVFormat withRecordSeparator(final String recordSeparator)",
      "info" : "MethodDeclaration[31082-31651]:MethodDeclaration[31029-31598]"
    }, {
      "left" : "public CSVFormat withSkipHeaderRecord(final boolean skipHeaderRecord)",
      "right" : "public CSVFormat withSkipHeaderRecord(final boolean skipHeaderRecord)",
      "info" : "MethodDeclaration[31657-32237]:MethodDeclaration[31604-32184]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7815-7857]:Block[7815-7857]"
    }, {
      "left" : "return c == LF || c == CR;",
      "right" : "return c == LF || c == CR;",
      "info" : "ReturnStatement[7825-7851]:ReturnStatement[7825-7851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8166-8229]:Block[8166-8229]"
    }, {
      "left" : "return c != null && isLineBreak(c.charValue());",
      "right" : "return c != null && isLineBreak(c.charValue());",
      "info" : "ReturnStatement[8176-8223]:ReturnStatement[8176-8223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8605-8716]:Block[8605-8716]"
    }, {
      "left" : "return new CSVFormat(delimiter, null, null, null, null, false, false, null, null, null, false);",
      "right" : "return new CSVFormat(delimiter, null, null, null, null, false, false, null, null, null, false);",
      "info" : "ReturnStatement[8615-8710]:ReturnStatement[8615-8710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10268-10982]:Block[10268-11265]"
    }, {
      "left" : "if (isLineBreak(delimiter))",
      "right" : "if (isLineBreak(delimiter))",
      "info" : "IfStatement[10278-10405]:IfStatement[10278-10405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10306-10405]:Block[10306-10405]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The delimiter cannot be a line break\");",
      "right" : "throw new IllegalArgumentException(\"The delimiter cannot be a line break\");",
      "info" : "ThrowStatement[10320-10395]:ThrowStatement[10320-10395]"
    }, {
      "left" : "this.delimiter = delimiter;",
      "right" : "this.delimiter = delimiter;",
      "info" : "ExpressionStatement[10414-10441]:ExpressionStatement[10414-10441]"
    }, {
      "left" : "this.quoteChar = quoteChar;",
      "right" : "this.quoteChar = quoteChar;",
      "info" : "ExpressionStatement[10450-10477]:ExpressionStatement[10450-10477]"
    }, {
      "left" : "this.quotePolicy = quotePolicy;",
      "right" : "this.quotePolicy = quotePolicy;",
      "info" : "ExpressionStatement[10486-10517]:ExpressionStatement[10486-10517]"
    }, {
      "left" : "this.commentStart = commentStart;",
      "right" : "this.commentStart = commentStart;",
      "info" : "ExpressionStatement[10526-10559]:ExpressionStatement[10526-10559]"
    }, {
      "left" : "this.escape = escape;",
      "right" : "this.escape = escape;",
      "info" : "ExpressionStatement[10568-10589]:ExpressionStatement[10568-10589]"
    }, {
      "left" : "this.ignoreSurroundingSpaces = ignoreSurroundingSpaces;",
      "right" : "this.ignoreSurroundingSpaces = ignoreSurroundingSpaces;",
      "info" : "ExpressionStatement[10598-10653]:ExpressionStatement[10598-10653]"
    }, {
      "left" : "this.ignoreEmptyLines = ignoreEmptyLines;",
      "right" : "this.ignoreEmptyLines = ignoreEmptyLines;",
      "info" : "ExpressionStatement[10662-10703]:ExpressionStatement[10662-10703]"
    }, {
      "left" : "this.recordSeparator = recordSeparator;",
      "right" : "this.recordSeparator = recordSeparator;",
      "info" : "ExpressionStatement[10712-10751]:ExpressionStatement[10712-10751]"
    }, {
      "left" : "this.nullString = nullString;",
      "right" : "this.nullString = nullString;",
      "info" : "ExpressionStatement[10760-10789]:ExpressionStatement[10760-10789]"
    }, {
      "left" : "if (header == null)",
      "right" : "if (header == null)",
      "info" : "IfStatement[10798-10926]:IfStatement[10798-11209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10818-10858]:Block[10818-10858]"
    }, {
      "left" : "this.header = null;",
      "right" : "this.header = null;",
      "info" : "ExpressionStatement[10829-10848]:ExpressionStatement[10829-10848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10864-10926]:Block[10864-11209]"
    }, {
      "left" : "this.header = header.clone();",
      "right" : "this.header = header.clone();",
      "info" : "ExpressionStatement[10878-10907]:ExpressionStatement[11161-11190]"
    }, {
      "left" : "this.skipHeaderRecord = skipHeaderRecord;",
      "right" : "this.skipHeaderRecord = skipHeaderRecord;",
      "info" : "ExpressionStatement[10935-10976]:ExpressionStatement[11218-11259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11042-12966]:Block[11325-13249]"
    }, {
      "left" : "if (this == obj)",
      "right" : "if (this == obj)",
      "info" : "IfStatement[11052-11105]:IfStatement[11335-11388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11069-11105]:Block[11352-11388]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11083-11095]:ReturnStatement[11366-11378]"
    }, {
      "left" : "if (obj == null)",
      "right" : "if (obj == null)",
      "info" : "IfStatement[11114-11168]:IfStatement[11397-11451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11131-11168]:Block[11414-11451]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11145-11158]:ReturnStatement[11428-11441]"
    }, {
      "left" : "if (getClass() != obj.getClass())",
      "right" : "if (getClass() != obj.getClass())",
      "info" : "IfStatement[11177-11248]:IfStatement[11460-11531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11211-11248]:Block[11494-11531]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11225-11238]:ReturnStatement[11508-11521]"
    }, {
      "left" : "final CSVFormat other = (CSVFormat) obj;",
      "right" : "final CSVFormat other = (CSVFormat) obj;",
      "info" : "VariableDeclarationStatement[11258-11298]:VariableDeclarationStatement[11541-11581]"
    }, {
      "left" : "if (delimiter != other.delimiter)",
      "right" : "if (delimiter != other.delimiter)",
      "info" : "IfStatement[11307-11378]:IfStatement[11590-11661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11341-11378]:Block[11624-11661]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11355-11368]:ReturnStatement[11638-11651]"
    }, {
      "left" : "if (quotePolicy != other.quotePolicy)",
      "right" : "if (quotePolicy != other.quotePolicy)",
      "info" : "IfStatement[11387-11462]:IfStatement[11670-11745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11425-11462]:Block[11708-11745]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11439-11452]:ReturnStatement[11722-11735]"
    }, {
      "left" : "if (quoteChar == null)",
      "right" : "if (quoteChar == null)",
      "info" : "IfStatement[11471-11675]:IfStatement[11754-11958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11494-11592]:Block[11777-11875]"
    }, {
      "left" : "if (other.quoteChar != null)",
      "right" : "if (other.quoteChar != null)",
      "info" : "IfStatement[11508-11582]:IfStatement[11791-11865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11537-11582]:Block[11820-11865]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11555-11568]:ReturnStatement[11838-11851]"
    }, {
      "left" : "if (!quoteChar.equals(other.quoteChar))",
      "right" : "if (!quoteChar.equals(other.quoteChar))",
      "info" : "IfStatement[11598-11675]:IfStatement[11881-11958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11638-11675]:Block[11921-11958]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11652-11665]:ReturnStatement[11935-11948]"
    }, {
      "left" : "if (commentStart == null)",
      "right" : "if (commentStart == null)",
      "info" : "IfStatement[11684-11900]:IfStatement[11967-12183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11710-11811]:Block[11993-12094]"
    }, {
      "left" : "if (other.commentStart != null)",
      "right" : "if (other.commentStart != null)",
      "info" : "IfStatement[11724-11801]:IfStatement[12007-12084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11756-11801]:Block[12039-12084]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11774-11787]:ReturnStatement[12057-12070]"
    }, {
      "left" : "if (!commentStart.equals(other.commentStart))",
      "right" : "if (!commentStart.equals(other.commentStart))",
      "info" : "IfStatement[11817-11900]:IfStatement[12100-12183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11863-11900]:Block[12146-12183]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11877-11890]:ReturnStatement[12160-12173]"
    }, {
      "left" : "if (escape == null)",
      "right" : "if (escape == null)",
      "info" : "IfStatement[11909-12101]:IfStatement[12192-12384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11929-12024]:Block[12212-12307]"
    }, {
      "left" : "if (other.escape != null)",
      "right" : "if (other.escape != null)",
      "info" : "IfStatement[11943-12014]:IfStatement[12226-12297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11969-12014]:Block[12252-12297]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11987-12000]:ReturnStatement[12270-12283]"
    }, {
      "left" : "if (!escape.equals(other.escape))",
      "right" : "if (!escape.equals(other.escape))",
      "info" : "IfStatement[12030-12101]:IfStatement[12313-12384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12064-12101]:Block[12347-12384]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12078-12091]:ReturnStatement[12361-12374]"
    }, {
      "left" : "if (nullString == null)",
      "right" : "if (nullString == null)",
      "info" : "IfStatement[12110-12318]:IfStatement[12393-12601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12134-12233]:Block[12417-12516]"
    }, {
      "left" : "if (other.nullString != null)",
      "right" : "if (other.nullString != null)",
      "info" : "IfStatement[12148-12223]:IfStatement[12431-12506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12178-12223]:Block[12461-12506]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12196-12209]:ReturnStatement[12479-12492]"
    }, {
      "left" : "if (!nullString.equals(other.nullString))",
      "right" : "if (!nullString.equals(other.nullString))",
      "info" : "IfStatement[12239-12318]:IfStatement[12522-12601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12281-12318]:Block[12564-12601]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12295-12308]:ReturnStatement[12578-12591]"
    }, {
      "left" : "if (!Arrays.equals(header, other.header))",
      "right" : "if (!Arrays.equals(header, other.header))",
      "info" : "IfStatement[12327-12406]:IfStatement[12610-12689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12369-12406]:Block[12652-12689]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12383-12396]:ReturnStatement[12666-12679]"
    }, {
      "left" : "if (ignoreSurroundingSpaces != other.ignoreSurroundingSpaces)",
      "right" : "if (ignoreSurroundingSpaces != other.ignoreSurroundingSpaces)",
      "info" : "IfStatement[12415-12514]:IfStatement[12698-12797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12477-12514]:Block[12760-12797]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12491-12504]:ReturnStatement[12774-12787]"
    }, {
      "left" : "if (ignoreEmptyLines != other.ignoreEmptyLines)",
      "right" : "if (ignoreEmptyLines != other.ignoreEmptyLines)",
      "info" : "IfStatement[12523-12608]:IfStatement[12806-12891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12571-12608]:Block[12854-12891]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12585-12598]:ReturnStatement[12868-12881]"
    }, {
      "left" : "if (skipHeaderRecord != other.skipHeaderRecord)",
      "right" : "if (skipHeaderRecord != other.skipHeaderRecord)",
      "info" : "IfStatement[12617-12702]:IfStatement[12900-12985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12665-12702]:Block[12948-12985]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12679-12692]:ReturnStatement[12962-12975]"
    }, {
      "left" : "if (recordSeparator == null)",
      "right" : "if (recordSeparator == null)",
      "info" : "IfStatement[12711-12939]:IfStatement[12994-13222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12740-12844]:Block[13023-13127]"
    }, {
      "left" : "if (other.recordSeparator != null)",
      "right" : "if (other.recordSeparator != null)",
      "info" : "IfStatement[12754-12834]:IfStatement[13037-13117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12789-12834]:Block[13072-13117]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12807-12820]:ReturnStatement[13090-13103]"
    }, {
      "left" : "if (!recordSeparator.equals(other.recordSeparator))",
      "right" : "if (!recordSeparator.equals(other.recordSeparator))",
      "info" : "IfStatement[12850-12939]:IfStatement[13133-13222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12902-12939]:Block[13185-13222]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12916-12929]:ReturnStatement[13199-13212]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[12948-12960]:ReturnStatement[13231-13243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13173-13518]:Block[13456-13801]"
    }, {
      "left" : "final StringWriter out = new StringWriter();",
      "right" : "final StringWriter out = new StringWriter();",
      "info" : "VariableDeclarationStatement[13183-13227]:VariableDeclarationStatement[13466-13510]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13236-13512]:TryStatement[13519-13795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13240-13352]:Block[13523-13635]"
    }, {
      "left" : "new CSVPrinter(out, this).printRecord(values);",
      "right" : "new CSVPrinter(out, this).printRecord(values);",
      "info" : "ExpressionStatement[13254-13300]:ExpressionStatement[13537-13583]"
    }, {
      "left" : "return out.toString().trim();",
      "right" : "return out.toString().trim();",
      "info" : "ReturnStatement[13313-13342]:ReturnStatement[13596-13625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13381-13512]:Block[13664-13795]"
    }, {
      "left" : "throw new IllegalStateException(e);",
      "right" : "throw new IllegalStateException(e);",
      "info" : "ThrowStatement[13467-13502]:ThrowStatement[13750-13785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13709-13745]:Block[13992-14028]"
    }, {
      "left" : "return commentStart;",
      "right" : "return commentStart;",
      "info" : "ReturnStatement[13719-13739]:ReturnStatement[14002-14022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13921-13954]:Block[14204-14237]"
    }, {
      "left" : "return delimiter;",
      "right" : "return delimiter;",
      "info" : "ReturnStatement[13931-13948]:ReturnStatement[14214-14231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14106-14136]:Block[14389-14419]"
    }, {
      "left" : "return escape;",
      "right" : "return escape;",
      "info" : "ReturnStatement[14116-14130]:ReturnStatement[14399-14413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14278-14340]:Block[14561-14623]"
    }, {
      "left" : "return header != null ? header.clone() : null;",
      "right" : "return header != null ? header.clone() : null;",
      "info" : "ReturnStatement[14288-14334]:ReturnStatement[14571-14617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14633-14673]:Block[14916-14956]"
    }, {
      "left" : "return ignoreEmptyLines;",
      "right" : "return ignoreEmptyLines;",
      "info" : "ReturnStatement[14643-14667]:ReturnStatement[14926-14950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14962-15009]:Block[15245-15292]"
    }, {
      "left" : "return ignoreSurroundingSpaces;",
      "right" : "return ignoreSurroundingSpaces;",
      "info" : "ReturnStatement[14972-15003]:ReturnStatement[15255-15286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15537-15571]:Block[15820-15854]"
    }, {
      "left" : "return nullString;",
      "right" : "return nullString;",
      "info" : "ReturnStatement[15547-15565]:ReturnStatement[15830-15848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15779-15812]:Block[16062-16095]"
    }, {
      "left" : "return quoteChar;",
      "right" : "return quoteChar;",
      "info" : "ReturnStatement[15789-15806]:ReturnStatement[16072-16089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15950-15985]:Block[16233-16268]"
    }, {
      "left" : "return quotePolicy;",
      "right" : "return quotePolicy;",
      "info" : "ReturnStatement[15960-15979]:ReturnStatement[16243-16262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16144-16183]:Block[16427-16466]"
    }, {
      "left" : "return recordSeparator;",
      "right" : "return recordSeparator;",
      "info" : "ReturnStatement[16154-16177]:ReturnStatement[16437-16460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16349-16389]:Block[16632-16672]"
    }, {
      "left" : "return skipHeaderRecord;",
      "right" : "return skipHeaderRecord;",
      "info" : "ReturnStatement[16359-16383]:ReturnStatement[16642-16666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16435-17357]:Block[16718-17640]"
    }, {
      "left" : "final int prime = 31;",
      "right" : "final int prime = 31;",
      "info" : "VariableDeclarationStatement[16445-16466]:VariableDeclarationStatement[16728-16749]"
    }, {
      "left" : "int result = 1;",
      "right" : "int result = 1;",
      "info" : "VariableDeclarationStatement[16475-16490]:VariableDeclarationStatement[16758-16773]"
    }, {
      "left" : "result = prime * result + delimiter;",
      "right" : "result = prime * result + delimiter;",
      "info" : "ExpressionStatement[16500-16536]:ExpressionStatement[16783-16819]"
    }, {
      "left" : "result = prime * result + ((quotePolicy == null) ? 0 : quotePolicy.hashCode());",
      "right" : "result = prime * result + ((quotePolicy == null) ? 0 : quotePolicy.hashCode());",
      "info" : "ExpressionStatement[16545-16624]:ExpressionStatement[16828-16907]"
    }, {
      "left" : "result = prime * result + ((quoteChar == null) ? 0 : quoteChar.hashCode());",
      "right" : "result = prime * result + ((quoteChar == null) ? 0 : quoteChar.hashCode());",
      "info" : "ExpressionStatement[16633-16708]:ExpressionStatement[16916-16991]"
    }, {
      "left" : "result = prime * result + ((commentStart == null) ? 0 : commentStart.hashCode());",
      "right" : "result = prime * result + ((commentStart == null) ? 0 : commentStart.hashCode());",
      "info" : "ExpressionStatement[16717-16798]:ExpressionStatement[17000-17081]"
    }, {
      "left" : "result = prime * result + ((escape == null) ? 0 : escape.hashCode());",
      "right" : "result = prime * result + ((escape == null) ? 0 : escape.hashCode());",
      "info" : "ExpressionStatement[16807-16876]:ExpressionStatement[17090-17159]"
    }, {
      "left" : "result = prime * result + ((nullString == null) ? 0 : nullString.hashCode());",
      "right" : "result = prime * result + ((nullString == null) ? 0 : nullString.hashCode());",
      "info" : "ExpressionStatement[16885-16962]:ExpressionStatement[17168-17245]"
    }, {
      "left" : "result = prime * result + (ignoreSurroundingSpaces ? 1231 : 1237);",
      "right" : "result = prime * result + (ignoreSurroundingSpaces ? 1231 : 1237);",
      "info" : "ExpressionStatement[16971-17037]:ExpressionStatement[17254-17320]"
    }, {
      "left" : "result = prime * result + (ignoreEmptyLines ? 1231 : 1237);",
      "right" : "result = prime * result + (ignoreEmptyLines ? 1231 : 1237);",
      "info" : "ExpressionStatement[17046-17105]:ExpressionStatement[17329-17388]"
    }, {
      "left" : "result = prime * result + (skipHeaderRecord ? 1231 : 1237);",
      "right" : "result = prime * result + (skipHeaderRecord ? 1231 : 1237);",
      "info" : "ExpressionStatement[17114-17173]:ExpressionStatement[17397-17456]"
    }, {
      "left" : "result = prime * result + ((recordSeparator == null) ? 0 : recordSeparator.hashCode());",
      "right" : "result = prime * result + ((recordSeparator == null) ? 0 : recordSeparator.hashCode());",
      "info" : "ExpressionStatement[17182-17269]:ExpressionStatement[17465-17552]"
    }, {
      "left" : "result = prime * result + Arrays.hashCode(header);",
      "right" : "result = prime * result + Arrays.hashCode(header);",
      "info" : "ExpressionStatement[17278-17328]:ExpressionStatement[17561-17611]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[17337-17351]:ReturnStatement[17620-17634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17668-17712]:Block[17951-17995]"
    }, {
      "left" : "return commentStart != null;",
      "right" : "return commentStart != null;",
      "info" : "ReturnStatement[17678-17706]:ReturnStatement[17961-17989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17873-17911]:Block[18156-18194]"
    }, {
      "left" : "return escape != null;",
      "right" : "return escape != null;",
      "info" : "ReturnStatement[17883-17905]:ReturnStatement[18166-18188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18081-18123]:Block[18364-18406]"
    }, {
      "left" : "return nullString != null;",
      "right" : "return nullString != null;",
      "info" : "ReturnStatement[18091-18117]:ReturnStatement[18374-18400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18286-18327]:Block[18569-18610]"
    }, {
      "left" : "return quoteChar != null;",
      "right" : "return quoteChar != null;",
      "info" : "ReturnStatement[18296-18321]:ReturnStatement[18579-18604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18735-18782]:Block[19018-19065]"
    }, {
      "left" : "return new CSVParser(in, this);",
      "right" : "return new CSVParser(in, this);",
      "info" : "ReturnStatement[18745-18776]:ReturnStatement[19028-19059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18827-20088]:Block[19110-20371]"
    }, {
      "left" : "final StringBuilder sb = new StringBuilder();",
      "right" : "final StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[18837-18882]:VariableDeclarationStatement[19120-19165]"
    }, {
      "left" : "sb.append(\"Delimiter=<\").append(delimiter).append('>');",
      "right" : "sb.append(\"Delimiter=<\").append(delimiter).append('>');",
      "info" : "ExpressionStatement[18891-18946]:ExpressionStatement[19174-19229]"
    }, {
      "left" : "if (isEscaping())",
      "right" : "if (isEscaping())",
      "info" : "IfStatement[18955-19074]:IfStatement[19238-19357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18973-19074]:Block[19256-19357]"
    }, {
      "left" : "sb.append(' ');",
      "right" : "sb.append(' ');",
      "info" : "ExpressionStatement[18987-19002]:ExpressionStatement[19270-19285]"
    }, {
      "left" : "sb.append(\"Escape=<\").append(escape).append('>');",
      "right" : "sb.append(\"Escape=<\").append(escape).append('>');",
      "info" : "ExpressionStatement[19015-19064]:ExpressionStatement[19298-19347]"
    }, {
      "left" : "if (isQuoting())",
      "right" : "if (isQuoting())",
      "info" : "IfStatement[19083-19207]:IfStatement[19366-19490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19100-19207]:Block[19383-19490]"
    }, {
      "left" : "sb.append(' ');",
      "right" : "sb.append(' ');",
      "info" : "ExpressionStatement[19114-19129]:ExpressionStatement[19397-19412]"
    }, {
      "left" : "sb.append(\"QuoteChar=<\").append(quoteChar).append('>');",
      "right" : "sb.append(\"QuoteChar=<\").append(quoteChar).append('>');",
      "info" : "ExpressionStatement[19142-19197]:ExpressionStatement[19425-19480]"
    }, {
      "left" : "if (isCommentingEnabled())",
      "right" : "if (isCommentingEnabled())",
      "info" : "IfStatement[19216-19356]:IfStatement[19499-19639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19243-19356]:Block[19526-19639]"
    }, {
      "left" : "sb.append(' ');",
      "right" : "sb.append(' ');",
      "info" : "ExpressionStatement[19257-19272]:ExpressionStatement[19540-19555]"
    }, {
      "left" : "sb.append(\"CommentStart=<\").append(commentStart).append('>');",
      "right" : "sb.append(\"CommentStart=<\").append(commentStart).append('>');",
      "info" : "ExpressionStatement[19285-19346]:ExpressionStatement[19568-19629]"
    }, {
      "left" : "if (isNullHandling())",
      "right" : "if (isNullHandling())",
      "info" : "IfStatement[19365-19496]:IfStatement[19648-19779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19387-19496]:Block[19670-19779]"
    }, {
      "left" : "sb.append(' ');",
      "right" : "sb.append(' ');",
      "info" : "ExpressionStatement[19401-19416]:ExpressionStatement[19684-19699]"
    }, {
      "left" : "sb.append(\"NullString=<\").append(nullString).append('>');",
      "right" : "sb.append(\"NullString=<\").append(nullString).append('>');",
      "info" : "ExpressionStatement[19429-19486]:ExpressionStatement[19712-19769]"
    }, {
      "left" : "if(recordSeparator != null)",
      "right" : "if(recordSeparator != null)",
      "info" : "IfStatement[19505-19652]:IfStatement[19788-19935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19533-19652]:Block[19816-19935]"
    }, {
      "left" : "sb.append(' ');",
      "right" : "sb.append(' ');",
      "info" : "ExpressionStatement[19547-19562]:ExpressionStatement[19830-19845]"
    }, {
      "left" : "sb.append(\"RecordSeparator=<\").append(recordSeparator).append('>');",
      "right" : "sb.append(\"RecordSeparator=<\").append(recordSeparator).append('>');",
      "info" : "ExpressionStatement[19575-19642]:ExpressionStatement[19858-19925]"
    }, {
      "left" : "if (getIgnoreEmptyLines())",
      "right" : "if (getIgnoreEmptyLines())",
      "info" : "IfStatement[19661-19745]:IfStatement[19944-20028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19688-19745]:Block[19971-20028]"
    }, {
      "left" : "sb.append(\" EmptyLines:ignored\");",
      "right" : "sb.append(\" EmptyLines:ignored\");",
      "info" : "ExpressionStatement[19702-19735]:ExpressionStatement[19985-20018]"
    }, {
      "left" : "if (getIgnoreSurroundingSpaces())",
      "right" : "if (getIgnoreSurroundingSpaces())",
      "info" : "IfStatement[19754-19852]:IfStatement[20037-20135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19788-19852]:Block[20071-20135]"
    }, {
      "left" : "sb.append(\" SurroundingSpaces:ignored\");",
      "right" : "sb.append(\" SurroundingSpaces:ignored\");",
      "info" : "ExpressionStatement[19802-19842]:ExpressionStatement[20085-20125]"
    }, {
      "left" : "sb.append(\" SkipHeaderRecord:\").append(skipHeaderRecord);",
      "right" : "sb.append(\" SkipHeaderRecord:\").append(skipHeaderRecord);",
      "info" : "ExpressionStatement[19861-19918]:ExpressionStatement[20144-20201]"
    }, {
      "left" : "if (header != null)",
      "right" : "if (header != null)",
      "info" : "IfStatement[19927-20052]:IfStatement[20210-20335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19947-20052]:Block[20230-20335]"
    }, {
      "left" : "sb.append(' ');",
      "right" : "sb.append(' ');",
      "info" : "ExpressionStatement[19961-19976]:ExpressionStatement[20244-20259]"
    }, {
      "left" : "sb.append(\"Header:\").append(Arrays.toString(header));",
      "right" : "sb.append(\"Header:\").append(Arrays.toString(header));",
      "info" : "ExpressionStatement[19989-20042]:ExpressionStatement[20272-20325]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[20061-20082]:ReturnStatement[20344-20365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20299-21978]:Block[20582-21925]"
    }, {
      "left" : "if (quoteChar != null && delimiter == quoteChar.charValue())",
      "right" : "if (quoteChar != null && delimiter == quoteChar.charValue())",
      "info" : "IfStatement[20309-20533]:IfStatement[20592-20816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20370-20533]:Block[20653-20816]"
    }, {
      "left" : "throw new IllegalStateException(\n                    \"The quoteChar character and the delimiter cannot be the same ('\" + quoteChar + \"')\");",
      "right" : "throw new IllegalStateException(\n                    \"The quoteChar character and the delimiter cannot be the same ('\" + quoteChar + \"')\");",
      "info" : "ThrowStatement[20384-20523]:ThrowStatement[20667-20806]"
    }, {
      "left" : "if (escape != null && delimiter == escape.charValue())",
      "right" : "if (escape != null && delimiter == escape.charValue())",
      "info" : "IfStatement[20543-20755]:IfStatement[20826-21038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20598-20755]:Block[20881-21038]"
    }, {
      "left" : "throw new IllegalStateException(\n                    \"The escape character and the delimiter cannot be the same ('\" + escape + \"')\");",
      "right" : "throw new IllegalStateException(\n                    \"The escape character and the delimiter cannot be the same ('\" + escape + \"')\");",
      "info" : "ThrowStatement[20612-20745]:ThrowStatement[20895-21028]"
    }, {
      "left" : "if (commentStart != null && delimiter == commentStart.charValue())",
      "right" : "if (commentStart != null && delimiter == commentStart.charValue())",
      "info" : "IfStatement[20765-21002]:IfStatement[21048-21285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20832-21002]:Block[21115-21285]"
    }, {
      "left" : "throw new IllegalStateException(\n                    \"The comment start character and the delimiter cannot be the same ('\" + commentStart + \"')\");",
      "right" : "throw new IllegalStateException(\n                    \"The comment start character and the delimiter cannot be the same ('\" + commentStart + \"')\");",
      "info" : "ThrowStatement[20846-20992]:ThrowStatement[21129-21275]"
    }, {
      "left" : "if (quoteChar != null && quoteChar.equals(commentStart))",
      "right" : "if (quoteChar != null && quoteChar.equals(commentStart))",
      "info" : "IfStatement[21012-21239]:IfStatement[21295-21522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21069-21239]:Block[21352-21522]"
    }, {
      "left" : "throw new IllegalStateException(\n                    \"The comment start character and the quoteChar cannot be the same ('\" + commentStart + \"')\");",
      "right" : "throw new IllegalStateException(\n                    \"The comment start character and the quoteChar cannot be the same ('\" + commentStart + \"')\");",
      "info" : "ThrowStatement[21083-21229]:ThrowStatement[21366-21512]"
    }, {
      "left" : "if (escape != null && escape.equals(commentStart))",
      "right" : "if (escape != null && escape.equals(commentStart))",
      "info" : "IfStatement[21249-21467]:IfStatement[21532-21750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21300-21467]:Block[21583-21750]"
    }, {
      "left" : "throw new IllegalStateException(\n                    \"The comment start and the escape character cannot be the same ('\" + commentStart + \"')\");",
      "right" : "throw new IllegalStateException(\n                    \"The comment start and the escape character cannot be the same ('\" + commentStart + \"')\");",
      "info" : "ThrowStatement[21314-21457]:ThrowStatement[21597-21740]"
    }, {
      "left" : "if (escape == null && quotePolicy == Quote.NONE)",
      "right" : "if (escape == null && quotePolicy == Quote.NONE)",
      "info" : "IfStatement[21477-21635]:IfStatement[21760-21918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21526-21635]:Block[21809-21918]"
    }, {
      "left" : "throw new IllegalStateException(\"No quotes mode set but no escape character is set\");",
      "right" : "throw new IllegalStateException(\"No quotes mode set but no escape character is set\");",
      "info" : "ThrowStatement[21540-21625]:ThrowStatement[21823-21908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22537-22610]:Block[22484-22557]"
    }, {
      "left" : "return withCommentStart(Character.valueOf(commentStart));",
      "right" : "return withCommentStart(Character.valueOf(commentStart));",
      "info" : "ReturnStatement[22547-22604]:ReturnStatement[22494-22551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23203-23564]:Block[23150-23511]"
    }, {
      "left" : "if (isLineBreak(commentStart))",
      "right" : "if (isLineBreak(commentStart))",
      "info" : "IfStatement[23213-23357]:IfStatement[23160-23304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23244-23357]:Block[23191-23304]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The comment start character cannot be a line break\");",
      "right" : "throw new IllegalArgumentException(\"The comment start character cannot be a line break\");",
      "info" : "ThrowStatement[23258-23347]:ThrowStatement[23205-23294]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
      "right" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
      "info" : "ReturnStatement[23366-23558]:ReturnStatement[23313-23505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23984-24328]:Block[23931-24275]"
    }, {
      "left" : "if (isLineBreak(delimiter))",
      "right" : "if (isLineBreak(delimiter))",
      "info" : "IfStatement[23994-24121]:IfStatement[23941-24068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24022-24121]:Block[23969-24068]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The delimiter cannot be a line break\");",
      "right" : "throw new IllegalArgumentException(\"The delimiter cannot be a line break\");",
      "info" : "ThrowStatement[24036-24111]:ThrowStatement[23983-24058]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
      "right" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
      "info" : "ReturnStatement[24130-24322]:ReturnStatement[24077-24269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24757-24818]:Block[24704-24765]"
    }, {
      "left" : "return withEscape(Character.valueOf(escape));",
      "right" : "return withEscape(Character.valueOf(escape));",
      "info" : "ReturnStatement[24767-24812]:ReturnStatement[24714-24759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25282-25630]:Block[25229-25577]"
    }, {
      "left" : "if (isLineBreak(escape))",
      "right" : "if (isLineBreak(escape))",
      "info" : "IfStatement[25292-25423]:IfStatement[25239-25370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25317-25423]:Block[25264-25370]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The escape character cannot be a line break\");",
      "right" : "throw new IllegalArgumentException(\"The escape character cannot be a line break\");",
      "info" : "ThrowStatement[25331-25413]:ThrowStatement[25278-25360]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
      "right" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
      "info" : "ReturnStatement[25432-25624]:ReturnStatement[25379-25571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26333-26541]:Block[26280-26488]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
      "right" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
      "info" : "ReturnStatement[26343-26535]:ReturnStatement[26290-26482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27026-27234]:Block[26973-27181]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
      "right" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
      "info" : "ReturnStatement[27036-27228]:ReturnStatement[26983-27175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27678-27886]:Block[27625-27833]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
      "right" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
      "info" : "ReturnStatement[27688-27880]:ReturnStatement[27635-27827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28586-28794]:Block[28533-28741]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
      "right" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
      "info" : "ReturnStatement[28596-28788]:ReturnStatement[28543-28735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29218-29285]:Block[29165-29232]"
    }, {
      "left" : "return withQuoteChar(Character.valueOf(quoteChar));",
      "right" : "return withQuoteChar(Character.valueOf(quoteChar));",
      "info" : "ReturnStatement[29228-29279]:ReturnStatement[29175-29226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29743-30087]:Block[29690-30034]"
    }, {
      "left" : "if (isLineBreak(quoteChar))",
      "right" : "if (isLineBreak(quoteChar))",
      "info" : "IfStatement[29753-29880]:IfStatement[29700-29827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29781-29880]:Block[29728-29827]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The quoteChar cannot be a line break\");",
      "right" : "throw new IllegalArgumentException(\"The quoteChar cannot be a line break\");",
      "info" : "ThrowStatement[29795-29870]:ThrowStatement[29742-29817]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
      "right" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
      "info" : "ReturnStatement[29889-30081]:ReturnStatement[29836-30028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30424-30632]:Block[30371-30579]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
      "right" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
      "info" : "ReturnStatement[30434-30626]:ReturnStatement[30381-30573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31000-31076]:Block[30947-31023]"
    }, {
      "left" : "return withRecordSeparator(String.valueOf(recordSeparator));",
      "right" : "return withRecordSeparator(String.valueOf(recordSeparator));",
      "info" : "ReturnStatement[31010-31070]:ReturnStatement[30957-31017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31443-31651]:Block[31390-31598]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
      "right" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
      "info" : "ReturnStatement[31453-31645]:ReturnStatement[31400-31592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32029-32237]:Block[31976-32184]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
      "right" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
      "info" : "ReturnStatement[32039-32231]:ReturnStatement[31986-32178]"
    } ]
  },
  "interFileMappings" : { }
}