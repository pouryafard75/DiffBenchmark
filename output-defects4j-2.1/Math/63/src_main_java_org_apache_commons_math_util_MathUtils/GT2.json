{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "MathUtils",
      "right" : "MathUtils",
      "info" : "TypeDeclaration[1177-69069]:TypeDeclaration[1177-69038]"
    }, {
      "left" : "public static final double EPSILON = 0x1.0p-53;",
      "right" : "public static final double EPSILON = 0x1.0p-53;",
      "info" : "FieldDeclaration[1319-1455]:FieldDeclaration[1319-1455]"
    }, {
      "left" : "public static final double SAFE_MIN = 0x1.0p-1022;",
      "right" : "public static final double SAFE_MIN = 0x1.0p-1022;",
      "info" : "FieldDeclaration[1461-1691]:FieldDeclaration[1461-1691]"
    }, {
      "left" : "public static final double TWO_PI = 2 * FastMath.PI;",
      "right" : "public static final double TWO_PI = 2 * FastMath.PI;",
      "info" : "FieldDeclaration[1697-1798]:FieldDeclaration[1697-1798]"
    }, {
      "left" : "private static final byte  NB = (byte)-1;",
      "right" : "private static final byte  NB = (byte)-1;",
      "info" : "FieldDeclaration[1804-1877]:FieldDeclaration[1804-1877]"
    }, {
      "left" : "private static final short NS = (short)-1;",
      "right" : "private static final short NS = (short)-1;",
      "info" : "FieldDeclaration[1883-1958]:FieldDeclaration[1883-1958]"
    }, {
      "left" : "private static final byte  PB = (byte)1;",
      "right" : "private static final byte  PB = (byte)1;",
      "info" : "FieldDeclaration[1964-2035]:FieldDeclaration[1964-2035]"
    }, {
      "left" : "private static final short PS = (short)1;",
      "right" : "private static final short PS = (short)1;",
      "info" : "FieldDeclaration[2041-2114]:FieldDeclaration[2041-2114]"
    }, {
      "left" : "private static final byte  ZB = (byte)0;",
      "right" : "private static final byte  ZB = (byte)0;",
      "info" : "FieldDeclaration[2120-2191]:FieldDeclaration[2120-2191]"
    }, {
      "left" : "private static final short ZS = (short)0;",
      "right" : "private static final short ZS = (short)0;",
      "info" : "FieldDeclaration[2197-2270]:FieldDeclaration[2197-2270]"
    }, {
      "left" : "private static final int NAN_GAP = 4 * 1024 * 1024;",
      "right" : "private static final int NAN_GAP = 4 * 1024 * 1024;",
      "info" : "FieldDeclaration[2276-2375]:FieldDeclaration[2276-2375]"
    }, {
      "left" : "private static final long SGN_MASK = 0x8000000000000000L;",
      "right" : "private static final long SGN_MASK = 0x8000000000000000L;",
      "info" : "FieldDeclaration[2381-2506]:FieldDeclaration[2381-2506]"
    }, {
      "left" : "private static final long[] FACTORIALS = new long[] {\n                       1l,                  1l,                   2l,\n                       6l,                 24l,                 120l,\n                     720l,               5040l,               40320l,\n                  362880l,            3628800l,            39916800l,\n               479001600l,         6227020800l,         87178291200l,\n           1307674368000l,     20922789888000l,     355687428096000l,\n        6402373705728000l, 121645100408832000l, 2432902008176640000l };",
      "right" : "private static final long[] FACTORIALS = new long[] {\n                       1l,                  1l,                   2l,\n                       6l,                 24l,                 120l,\n                     720l,               5040l,               40320l,\n                  362880l,            3628800l,            39916800l,\n               479001600l,         6227020800l,         87178291200l,\n           1307674368000l,     20922789888000l,     355687428096000l,\n        6402373705728000l, 121645100408832000l, 2432902008176640000l };",
      "info" : "FieldDeclaration[2512-3102]:FieldDeclaration[2512-3102]"
    }, {
      "left" : "private MathUtils()",
      "right" : "private MathUtils()",
      "info" : "MethodDeclaration[3108-3195]:MethodDeclaration[3108-3195]"
    }, {
      "left" : "public static int addAndCheck(int x, int y)",
      "right" : "public static int addAndCheck(int x, int y)",
      "info" : "MethodDeclaration[3201-3772]:MethodDeclaration[3201-3772]"
    }, {
      "left" : "public static long addAndCheck(long a, long b)",
      "right" : "public static long addAndCheck(long a, long b)",
      "info" : "MethodDeclaration[3778-4189]:MethodDeclaration[3778-4189]"
    }, {
      "left" : "private static long addAndCheck(long a, long b, Localizable pattern)",
      "right" : "private static long addAndCheck(long a, long b, Localizable pattern)",
      "info" : "MethodDeclaration[4195-5672]:MethodDeclaration[4195-5672]"
    }, {
      "left" : "public static long binomialCoefficient(final int n, final int k)",
      "right" : "public static long binomialCoefficient(final int n, final int k)",
      "info" : "MethodDeclaration[5678-8809]:MethodDeclaration[5678-8809]"
    }, {
      "left" : "public static double binomialCoefficientDouble(final int n, final int k)",
      "right" : "public static double binomialCoefficientDouble(final int n, final int k)",
      "info" : "MethodDeclaration[8815-10409]:MethodDeclaration[8815-10409]"
    }, {
      "left" : "public static double binomialCoefficientLog(final int n, final int k)",
      "right" : "public static double binomialCoefficientLog(final int n, final int k)",
      "info" : "MethodDeclaration[10415-12309]:MethodDeclaration[10415-12309]"
    }, {
      "left" : "private static void checkBinomial(final int n, final int k)\n        throws IllegalArgumentException",
      "right" : "private static void checkBinomial(final int n, final int k)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[12315-13019]:MethodDeclaration[12315-13019]"
    }, {
      "left" : "public static int compareTo(double x, double y, double eps)",
      "right" : "public static int compareTo(double x, double y, double eps)",
      "info" : "MethodDeclaration[13025-13765]:MethodDeclaration[13025-13765]"
    }, {
      "left" : "public static double cosh(double x)",
      "right" : "public static double cosh(double x)",
      "info" : "MethodDeclaration[13771-14119]:MethodDeclaration[13771-14119]"
    }, {
      "left" : "public static boolean equals(double x, double y)",
      "right" : "public static boolean equals(double x, double y)",
      "info" : "MethodDeclaration[14125-14489]:MethodDeclaration[14125-14458]"
    }, {
      "left" : "public static boolean equalsIncludingNaN(double x, double y)",
      "right" : "public static boolean equalsIncludingNaN(double x, double y)",
      "info" : "MethodDeclaration[14495-14932]:MethodDeclaration[14464-14901]"
    }, {
      "left" : "public static boolean equals(double x, double y, double eps)",
      "right" : "public static boolean equals(double x, double y, double eps)",
      "info" : "MethodDeclaration[14938-15393]:MethodDeclaration[14907-15362]"
    }, {
      "left" : "public static boolean equalsIncludingNaN(double x, double y, double eps)",
      "right" : "public static boolean equalsIncludingNaN(double x, double y, double eps)",
      "info" : "MethodDeclaration[15399-15912]:MethodDeclaration[15368-15881]"
    }, {
      "left" : "public static boolean equals(double x, double y, int maxUlps)",
      "right" : "public static boolean equals(double x, double y, int maxUlps)",
      "info" : "MethodDeclaration[15918-17406]:MethodDeclaration[15887-17375]"
    }, {
      "left" : "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)",
      "right" : "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)",
      "info" : "MethodDeclaration[17412-18068]:MethodDeclaration[17381-18037]"
    }, {
      "left" : "public static boolean equals(double[] x, double[] y)",
      "right" : "public static boolean equals(double[] x, double[] y)",
      "info" : "MethodDeclaration[18074-18821]:MethodDeclaration[18043-18790]"
    }, {
      "left" : "public static boolean equalsIncludingNaN(double[] x, double[] y)",
      "right" : "public static boolean equalsIncludingNaN(double[] x, double[] y)",
      "info" : "MethodDeclaration[18827-19609]:MethodDeclaration[18796-19578]"
    }, {
      "left" : "public static long factorial(final int n)",
      "right" : "public static long factorial(final int n)",
      "info" : "MethodDeclaration[19615-20939]:MethodDeclaration[19584-20908]"
    }, {
      "left" : "public static double factorialDouble(final int n)",
      "right" : "public static double factorialDouble(final int n)",
      "info" : "MethodDeclaration[20945-22130]:MethodDeclaration[20914-22099]"
    }, {
      "left" : "public static double factorialLog(final int n)",
      "right" : "public static double factorialLog(final int n)",
      "info" : "MethodDeclaration[22136-22972]:MethodDeclaration[22105-22941]"
    }, {
      "left" : "public static int gcd(final int p, final int q)",
      "right" : "public static int gcd(final int p, final int q)",
      "info" : "MethodDeclaration[22978-26383]:MethodDeclaration[22947-26352]"
    }, {
      "left" : "public static long gcd(final long p, final long q)",
      "right" : "public static long gcd(final long p, final long q)",
      "info" : "MethodDeclaration[26389-29790]:MethodDeclaration[26358-29759]"
    }, {
      "left" : "public static int hash(double value)",
      "right" : "public static int hash(double value)",
      "info" : "MethodDeclaration[29796-30053]:MethodDeclaration[29765-30022]"
    }, {
      "left" : "public static int hash(double[] value)",
      "right" : "public static int hash(double[] value)",
      "info" : "MethodDeclaration[30059-30344]:MethodDeclaration[30028-30313]"
    }, {
      "left" : "public static byte indicator(final byte x)",
      "right" : "public static byte indicator(final byte x)",
      "info" : "MethodDeclaration[30350-30661]:MethodDeclaration[30319-30630]"
    }, {
      "left" : "public static double indicator(final double x)",
      "right" : "public static double indicator(final double x)",
      "info" : "MethodDeclaration[30667-31119]:MethodDeclaration[30636-31088]"
    }, {
      "left" : "public static float indicator(final float x)",
      "right" : "public static float indicator(final float x)",
      "info" : "MethodDeclaration[31125-31561]:MethodDeclaration[31094-31530]"
    }, {
      "left" : "public static int indicator(final int x)",
      "right" : "public static int indicator(final int x)",
      "info" : "MethodDeclaration[31567-31835]:MethodDeclaration[31536-31804]"
    }, {
      "left" : "public static long indicator(final long x)",
      "right" : "public static long indicator(final long x)",
      "info" : "MethodDeclaration[31841-32118]:MethodDeclaration[31810-32087]"
    }, {
      "left" : "public static short indicator(final short x)",
      "right" : "public static short indicator(final short x)",
      "info" : "MethodDeclaration[32124-32443]:MethodDeclaration[32093-32412]"
    }, {
      "left" : "public static int lcm(int a, int b)",
      "right" : "public static int lcm(int a, int b)",
      "info" : "MethodDeclaration[32449-33751]:MethodDeclaration[32418-33720]"
    }, {
      "left" : "public static long lcm(long a, long b)",
      "right" : "public static long lcm(long a, long b)",
      "info" : "MethodDeclaration[33757-35026]:MethodDeclaration[33726-34995]"
    }, {
      "left" : "public static double log(double base, double x)",
      "right" : "public static double log(double base, double x)",
      "info" : "MethodDeclaration[35032-35874]:MethodDeclaration[35001-35843]"
    }, {
      "left" : "public static int mulAndCheck(int x, int y)",
      "right" : "public static int mulAndCheck(int x, int y)",
      "info" : "MethodDeclaration[35880-36411]:MethodDeclaration[35849-36380]"
    }, {
      "left" : "public static long mulAndCheck(long a, long b)",
      "right" : "public static long mulAndCheck(long a, long b)",
      "info" : "MethodDeclaration[36417-38190]:MethodDeclaration[36386-38159]"
    }, {
      "left" : "public static double scalb(final double d, final int scaleFactor)",
      "right" : "public static double scalb(final double d, final int scaleFactor)",
      "info" : "MethodDeclaration[38196-39123]:MethodDeclaration[38165-39092]"
    }, {
      "left" : "public static double normalizeAngle(double a, double center)",
      "right" : "public static double normalizeAngle(double a, double center)",
      "info" : "MethodDeclaration[39129-40317]:MethodDeclaration[39098-40286]"
    }, {
      "left" : "public static double[] normalizeArray(double[] values, double normalizedSum)\n       throws ArithmeticException, IllegalArgumentException",
      "right" : "public static double[] normalizeArray(double[] values, double normalizedSum)\n       throws ArithmeticException, IllegalArgumentException",
      "info" : "MethodDeclaration[40324-42697]:MethodDeclaration[40293-42666]"
    }, {
      "left" : "public static double round(double x, int scale)",
      "right" : "public static double round(double x, int scale)",
      "info" : "MethodDeclaration[42703-43154]:MethodDeclaration[42672-43123]"
    }, {
      "left" : "public static double round(double x, int scale, int roundingMethod)",
      "right" : "public static double round(double x, int scale, int roundingMethod)",
      "info" : "MethodDeclaration[43160-44068]:MethodDeclaration[43129-44037]"
    }, {
      "left" : "public static float round(float x, int scale)",
      "right" : "public static float round(float x, int scale)",
      "info" : "MethodDeclaration[44074-44524]:MethodDeclaration[44043-44493]"
    }, {
      "left" : "public static float round(float x, int scale, int roundingMethod)",
      "right" : "public static float round(float x, int scale, int roundingMethod)",
      "info" : "MethodDeclaration[44530-45248]:MethodDeclaration[44499-45217]"
    }, {
      "left" : "private static double roundUnscaled(double unscaled, double sign,\n        int roundingMethod)",
      "right" : "private static double roundUnscaled(double unscaled, double sign,\n        int roundingMethod)",
      "info" : "MethodDeclaration[45254-49270]:MethodDeclaration[45223-49239]"
    }, {
      "left" : "public static byte sign(final byte x)",
      "right" : "public static byte sign(final byte x)",
      "info" : "MethodDeclaration[49276-49761]:MethodDeclaration[49245-49730]"
    }, {
      "left" : "public static double sign(final double x)",
      "right" : "public static double sign(final double x)",
      "info" : "MethodDeclaration[49767-50479]:MethodDeclaration[49736-50448]"
    }, {
      "left" : "public static float sign(final float x)",
      "right" : "public static float sign(final float x)",
      "info" : "MethodDeclaration[50485-51100]:MethodDeclaration[50454-51069]"
    }, {
      "left" : "public static int sign(final int x)",
      "right" : "public static int sign(final int x)",
      "info" : "MethodDeclaration[51106-51536]:MethodDeclaration[51075-51505]"
    }, {
      "left" : "public static long sign(final long x)",
      "right" : "public static long sign(final long x)",
      "info" : "MethodDeclaration[51542-51986]:MethodDeclaration[51511-51955]"
    }, {
      "left" : "public static short sign(final short x)",
      "right" : "public static short sign(final short x)",
      "info" : "MethodDeclaration[51992-52503]:MethodDeclaration[51961-52472]"
    }, {
      "left" : "public static double sinh(double x)",
      "right" : "public static double sinh(double x)",
      "info" : "MethodDeclaration[52509-52849]:MethodDeclaration[52478-52818]"
    }, {
      "left" : "public static int subAndCheck(int x, int y)",
      "right" : "public static int subAndCheck(int x, int y)",
      "info" : "MethodDeclaration[52855-53448]:MethodDeclaration[52824-53417]"
    }, {
      "left" : "public static long subAndCheck(long a, long b)",
      "right" : "public static long subAndCheck(long a, long b)",
      "info" : "MethodDeclaration[53454-54206]:MethodDeclaration[53423-54175]"
    }, {
      "left" : "public static int pow(final int k, int e)\n        throws IllegalArgumentException",
      "right" : "public static int pow(final int k, int e)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[54212-54949]:MethodDeclaration[54181-54918]"
    }, {
      "left" : "public static int pow(final int k, long e)\n        throws IllegalArgumentException",
      "right" : "public static int pow(final int k, long e)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[54955-55693]:MethodDeclaration[54924-55662]"
    }, {
      "left" : "public static long pow(final long k, int e)\n        throws IllegalArgumentException",
      "right" : "public static long pow(final long k, int e)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[55699-56441]:MethodDeclaration[55668-56410]"
    }, {
      "left" : "public static long pow(final long k, long e)\n        throws IllegalArgumentException",
      "right" : "public static long pow(final long k, long e)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[56447-57190]:MethodDeclaration[56416-57159]"
    }, {
      "left" : "public static BigInteger pow(final BigInteger k, int e)\n        throws IllegalArgumentException",
      "right" : "public static BigInteger pow(final BigInteger k, int e)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[57196-57744]:MethodDeclaration[57165-57713]"
    }, {
      "left" : "public static BigInteger pow(final BigInteger k, long e)\n        throws IllegalArgumentException",
      "right" : "public static BigInteger pow(final BigInteger k, long e)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[57750-58564]:MethodDeclaration[57719-58533]"
    }, {
      "left" : "public static BigInteger pow(final BigInteger k, BigInteger e)\n        throws IllegalArgumentException",
      "right" : "public static BigInteger pow(final BigInteger k, BigInteger e)\n        throws IllegalArgumentException",
      "info" : "MethodDeclaration[58570-59450]:MethodDeclaration[58539-59419]"
    }, {
      "left" : "public static double distance1(double[] p1, double[] p2)",
      "right" : "public static double distance1(double[] p1, double[] p2)",
      "info" : "MethodDeclaration[59456-59901]:MethodDeclaration[59425-59870]"
    }, {
      "left" : "public static int distance1(int[] p1, int[] p2)",
      "right" : "public static int distance1(int[] p1, int[] p2)",
      "info" : "MethodDeclaration[59907-60330]:MethodDeclaration[59876-60299]"
    }, {
      "left" : "public static double distance(double[] p1, double[] p2)",
      "right" : "public static double distance(double[] p1, double[] p2)",
      "info" : "MethodDeclaration[60336-60819]:MethodDeclaration[60305-60788]"
    }, {
      "left" : "public static double distance(int[] p1, int[] p2)",
      "right" : "public static double distance(int[] p1, int[] p2)",
      "info" : "MethodDeclaration[60825-61290]:MethodDeclaration[60794-61259]"
    }, {
      "left" : "public static double distanceInf(double[] p1, double[] p2)",
      "right" : "public static double distanceInf(double[] p1, double[] p2)",
      "info" : "MethodDeclaration[61296-61773]:MethodDeclaration[61265-61742]"
    }, {
      "left" : "public static int distanceInf(int[] p1, int[] p2)",
      "right" : "public static int distanceInf(int[] p1, int[] p2)",
      "info" : "MethodDeclaration[61779-62244]:MethodDeclaration[61748-62213]"
    }, {
      "left" : "enum : OrderDirection",
      "right" : "enum : OrderDirection",
      "info" : "EnumDeclaration[62250-62490]:EnumDeclaration[62219-62459]"
    }, {
      "left" : "public static void checkOrder(double[] val, OrderDirection dir, boolean strict)",
      "right" : "public static void checkOrder(double[] val, OrderDirection dir, boolean strict)",
      "info" : "MethodDeclaration[62496-63970]:MethodDeclaration[62465-63939]"
    }, {
      "left" : "public static void checkOrder(double[] val)",
      "right" : "public static void checkOrder(double[] val)",
      "info" : "MethodDeclaration[63976-64283]:MethodDeclaration[63945-64252]"
    }, {
      "left" : "public static double safeNorm(double[] v)",
      "right" : "public static double safeNorm(double[] v)",
      "info" : "MethodDeclaration[64289-69066]:MethodDeclaration[64258-69035]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3171-3195]:Block[3171-3195]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[3181-3189]:SuperConstructorInvocation[3181-3189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3523-3772]:Block[3523-3772]"
    }, {
      "left" : "long s = (long)x + (long)y;",
      "right" : "long s = (long)x + (long)y;",
      "info" : "VariableDeclarationStatement[3533-3560]:VariableDeclarationStatement[3533-3560]"
    }, {
      "left" : "if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE)",
      "right" : "if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE)",
      "info" : "IfStatement[3569-3743]:IfStatement[3569-3743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3621-3743]:Block[3621-3743]"
    }, {
      "left" : "throw MathRuntimeException.createArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",
      "right" : "throw MathRuntimeException.createArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",
      "info" : "ThrowStatement[3635-3733]:ThrowStatement[3635-3733]"
    }, {
      "left" : "return (int)s;",
      "right" : "return (int)s;",
      "info" : "ReturnStatement[3752-3766]:ReturnStatement[3752-3766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4109-4189]:Block[4109-4189]"
    }, {
      "left" : "return addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",
      "right" : "return addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",
      "info" : "ReturnStatement[4119-4183]:ReturnStatement[4119-4183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4615-5672]:Block[4615-5672]"
    }, {
      "left" : "long ret;",
      "right" : "long ret;",
      "info" : "VariableDeclarationStatement[4625-4634]:VariableDeclarationStatement[4625-4634]"
    }, {
      "left" : "if (a > b)",
      "right" : "if (a > b)",
      "info" : "IfStatement[4643-5646]:IfStatement[4643-5646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4654-4764]:Block[4654-4764]"
    }, {
      "left" : "ret = addAndCheck(b, a, pattern);",
      "right" : "ret = addAndCheck(b, a, pattern);",
      "info" : "ExpressionStatement[4721-4754]:ExpressionStatement[4721-4754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4770-5646]:Block[4770-5646]"
    }, {
      "left" : "if (a < 0)",
      "right" : "if (a < 0)",
      "info" : "IfStatement[4814-5636]:IfStatement[4814-5636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4825-5289]:Block[4825-5289]"
    }, {
      "left" : "if (b < 0)",
      "right" : "if (b < 0)",
      "info" : "IfStatement[4843-5275]:IfStatement[4843-5275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4854-5156]:Block[4854-5156]"
    }, {
      "left" : "if (Long.MIN_VALUE - b <= a)",
      "right" : "if (Long.MIN_VALUE - b <= a)",
      "info" : "IfStatement[4927-5138]:IfStatement[4927-5138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4956-5016]:Block[4956-5016]"
    }, {
      "left" : "ret = a + b;",
      "right" : "ret = a + b;",
      "info" : "ExpressionStatement[4982-4994]:ExpressionStatement[4982-4994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5022-5138]:Block[5022-5138]"
    }, {
      "left" : "throw MathRuntimeException.createArithmeticException(pattern, a, b);",
      "right" : "throw MathRuntimeException.createArithmeticException(pattern, a, b);",
      "info" : "ThrowStatement[5048-5116]:ThrowStatement[5048-5116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5162-5275]:Block[5162-5275]"
    }, {
      "left" : "ret = a + b;",
      "right" : "ret = a + b;",
      "info" : "ExpressionStatement[5245-5257]:ExpressionStatement[5245-5257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5295-5636]:Block[5295-5636]"
    }, {
      "left" : "if (a <= Long.MAX_VALUE - b)",
      "right" : "if (a <= Long.MAX_VALUE - b)",
      "info" : "IfStatement[5427-5622]:IfStatement[5427-5622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5456-5508]:Block[5456-5508]"
    }, {
      "left" : "ret = a + b;",
      "right" : "ret = a + b;",
      "info" : "ExpressionStatement[5478-5490]:ExpressionStatement[5478-5490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5514-5622]:Block[5514-5622]"
    }, {
      "left" : "throw MathRuntimeException.createArithmeticException(pattern, a, b);",
      "right" : "throw MathRuntimeException.createArithmeticException(pattern, a, b);",
      "info" : "ThrowStatement[5536-5604]:ThrowStatement[5536-5604]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[5655-5666]:ReturnStatement[5655-5666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6877-8809]:Block[6877-8809]"
    }, {
      "left" : "checkBinomial(n, k);",
      "right" : "checkBinomial(n, k);",
      "info" : "ExpressionStatement[6887-6907]:ExpressionStatement[6887-6907]"
    }, {
      "left" : "if ((n == k) || (k == 0))",
      "right" : "if ((n == k) || (k == 0))",
      "info" : "IfStatement[6916-6975]:IfStatement[6916-6975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6942-6975]:Block[6942-6975]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[6956-6965]:ReturnStatement[6956-6965]"
    }, {
      "left" : "if ((k == 1) || (k == n - 1))",
      "right" : "if ((k == 1) || (k == n - 1))",
      "info" : "IfStatement[6984-7047]:IfStatement[6984-7047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7014-7047]:Block[7014-7047]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[7028-7037]:ReturnStatement[7028-7037]"
    }, {
      "left" : "if (k > n / 2)",
      "right" : "if (k > n / 2)",
      "info" : "IfStatement[7092-7156]:IfStatement[7092-7156]"
    }, {
      "left" : "return binomialCoefficient(n, n - k);",
      "right" : "return binomialCoefficient(n, n - k);",
      "info" : "ReturnStatement[7119-7156]:ReturnStatement[7119-7156]"
    }, {
      "left" : "long result = 1;",
      "right" : "long result = 1;",
      "info" : "VariableDeclarationStatement[7380-7396]:VariableDeclarationStatement[7380-7396]"
    }, {
      "left" : "if (n <= 61)",
      "right" : "if (n <= 61)",
      "info" : "IfStatement[7405-8780]:IfStatement[7405-8780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7418-7649]:Block[7418-7649]"
    }, {
      "left" : "int i = n - k + 1;",
      "right" : "int i = n - k + 1;",
      "info" : "VariableDeclarationStatement[7502-7520]:VariableDeclarationStatement[7502-7520]"
    }, {
      "left" : "for (int j = 1; j <= k; j++)",
      "right" : "for (int j = 1; j <= k; j++)",
      "info" : "ForStatement[7533-7639]:ForStatement[7533-7639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7562-7639]:Block[7562-7639]"
    }, {
      "left" : "result = result * i / j;",
      "right" : "result = result * i / j;",
      "info" : "ExpressionStatement[7580-7604]:ExpressionStatement[7580-7604]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[7621-7625]:ExpressionStatement[7621-7625]"
    }, {
      "left" : "if (n <= 66)",
      "right" : "if (n <= 66)",
      "info" : "IfStatement[7655-8780]:IfStatement[7655-8780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7668-8388]:Block[7668-8388]"
    }, {
      "left" : "int i = n - k + 1;",
      "right" : "int i = n - k + 1;",
      "info" : "VariableDeclarationStatement[7823-7841]:VariableDeclarationStatement[7823-7841]"
    }, {
      "left" : "for (int j = 1; j <= k; j++)",
      "right" : "for (int j = 1; j <= k; j++)",
      "info" : "ForStatement[7854-8378]:ForStatement[7854-8378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7883-8378]:Block[7883-8378]"
    }, {
      "left" : "final long d = gcd(i, j);",
      "right" : "final long d = gcd(i, j);",
      "info" : "VariableDeclarationStatement[8263-8288]:VariableDeclarationStatement[8263-8288]"
    }, {
      "left" : "result = (result / (j / d)) * (i / d);",
      "right" : "result = (result / (j / d)) * (i / d);",
      "info" : "ExpressionStatement[8305-8343]:ExpressionStatement[8305-8343]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[8360-8364]:ExpressionStatement[8360-8364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8394-8780]:Block[8394-8780]"
    }, {
      "left" : "int i = n - k + 1;",
      "right" : "int i = n - k + 1;",
      "info" : "VariableDeclarationStatement[8569-8587]:VariableDeclarationStatement[8569-8587]"
    }, {
      "left" : "for (int j = 1; j <= k; j++)",
      "right" : "for (int j = 1; j <= k; j++)",
      "info" : "ForStatement[8600-8770]:ForStatement[8600-8770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8629-8770]:Block[8629-8770]"
    }, {
      "left" : "final long d = gcd(i, j);",
      "right" : "final long d = gcd(i, j);",
      "info" : "VariableDeclarationStatement[8647-8672]:VariableDeclarationStatement[8647-8672]"
    }, {
      "left" : "result = mulAndCheck(result / (j / d), i / d);",
      "right" : "result = mulAndCheck(result / (j / d), i / d);",
      "info" : "ExpressionStatement[8689-8735]:ExpressionStatement[8689-8735]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[8752-8756]:ExpressionStatement[8752-8756]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[8789-8803]:ReturnStatement[8789-8803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9886-10409]:Block[9886-10409]"
    }, {
      "left" : "checkBinomial(n, k);",
      "right" : "checkBinomial(n, k);",
      "info" : "ExpressionStatement[9896-9916]:ExpressionStatement[9896-9916]"
    }, {
      "left" : "if ((n == k) || (k == 0))",
      "right" : "if ((n == k) || (k == 0))",
      "info" : "IfStatement[9925-9985]:IfStatement[9925-9985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9951-9985]:Block[9951-9985]"
    }, {
      "left" : "return 1d;",
      "right" : "return 1d;",
      "info" : "ReturnStatement[9965-9975]:ReturnStatement[9965-9975]"
    }, {
      "left" : "if ((k == 1) || (k == n - 1))",
      "right" : "if ((k == 1) || (k == n - 1))",
      "info" : "IfStatement[9994-10057]:IfStatement[9994-10057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10024-10057]:Block[10024-10057]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[10038-10047]:ReturnStatement[10038-10047]"
    }, {
      "left" : "if (k > n/2)",
      "right" : "if (k > n/2)",
      "info" : "IfStatement[10066-10146]:IfStatement[10066-10146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10079-10146]:Block[10079-10146]"
    }, {
      "left" : "return binomialCoefficientDouble(n, n - k);",
      "right" : "return binomialCoefficientDouble(n, n - k);",
      "info" : "ReturnStatement[10093-10136]:ReturnStatement[10093-10136]"
    }, {
      "left" : "if (n < 67)",
      "right" : "if (n < 67)",
      "info" : "IfStatement[10155-10223]:IfStatement[10155-10223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10167-10223]:Block[10167-10223]"
    }, {
      "left" : "return binomialCoefficient(n,k);",
      "right" : "return binomialCoefficient(n,k);",
      "info" : "ReturnStatement[10181-10213]:ReturnStatement[10181-10213]"
    }, {
      "left" : "double result = 1d;",
      "right" : "double result = 1d;",
      "info" : "VariableDeclarationStatement[10233-10252]:VariableDeclarationStatement[10233-10252]"
    }, {
      "left" : "for (int i = 1; i <= k; i++)",
      "right" : "for (int i = 1; i <= k; i++)",
      "info" : "ForStatement[10261-10357]:ForStatement[10261-10357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10290-10357]:Block[10290-10357]"
    }, {
      "left" : "result *= (double)(n - k + i) / (double)i;",
      "right" : "result *= (double)(n - k + i) / (double)i;",
      "info" : "ExpressionStatement[10305-10347]:ExpressionStatement[10305-10347]"
    }, {
      "left" : "return FastMath.floor(result + 0.5);",
      "right" : "return FastMath.floor(result + 0.5);",
      "info" : "ReturnStatement[10367-10403]:ReturnStatement[10367-10403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11195-12309]:Block[11195-12309]"
    }, {
      "left" : "checkBinomial(n, k);",
      "right" : "checkBinomial(n, k);",
      "info" : "ExpressionStatement[11205-11225]:ExpressionStatement[11205-11225]"
    }, {
      "left" : "if ((n == k) || (k == 0))",
      "right" : "if ((n == k) || (k == 0))",
      "info" : "IfStatement[11234-11293]:IfStatement[11234-11293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11260-11293]:Block[11260-11293]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[11274-11283]:ReturnStatement[11274-11283]"
    }, {
      "left" : "if ((k == 1) || (k == n - 1))",
      "right" : "if ((k == 1) || (k == n - 1))",
      "info" : "IfStatement[11302-11379]:IfStatement[11302-11379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11332-11379]:Block[11332-11379]"
    }, {
      "left" : "return FastMath.log(n);",
      "right" : "return FastMath.log(n);",
      "info" : "ReturnStatement[11346-11369]:ReturnStatement[11346-11369]"
    }, {
      "left" : "if (n < 67)",
      "right" : "if (n < 67)",
      "info" : "IfStatement[11525-11607]:IfStatement[11525-11607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11537-11607]:Block[11537-11607]"
    }, {
      "left" : "return FastMath.log(binomialCoefficient(n,k));",
      "right" : "return FastMath.log(binomialCoefficient(n,k));",
      "info" : "ReturnStatement[11551-11597]:ReturnStatement[11551-11597]"
    }, {
      "left" : "if (n < 1030)",
      "right" : "if (n < 1030)",
      "info" : "IfStatement[11766-11857]:IfStatement[11766-11857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11780-11857]:Block[11780-11857]"
    }, {
      "left" : "return FastMath.log(binomialCoefficientDouble(n, k));",
      "right" : "return FastMath.log(binomialCoefficientDouble(n, k));",
      "info" : "ReturnStatement[11794-11847]:ReturnStatement[11794-11847]"
    }, {
      "left" : "if (k > n / 2)",
      "right" : "if (k > n / 2)",
      "info" : "IfStatement[11867-11946]:IfStatement[11867-11946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11882-11946]:Block[11882-11946]"
    }, {
      "left" : "return binomialCoefficientLog(n, n - k);",
      "right" : "return binomialCoefficientLog(n, n - k);",
      "info" : "ReturnStatement[11896-11936]:ReturnStatement[11896-11936]"
    }, {
      "left" : "double logSum = 0;",
      "right" : "double logSum = 0;",
      "info" : "VariableDeclarationStatement[12030-12048]:VariableDeclarationStatement[12030-12048]"
    }, {
      "left" : "for (int i = n - k + 1; i <= n; i++)",
      "right" : "for (int i = n - k + 1; i <= n; i++)",
      "info" : "ForStatement[12079-12166]:ForStatement[12079-12166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12116-12166]:Block[12116-12166]"
    }, {
      "left" : "logSum += FastMath.log(i);",
      "right" : "logSum += FastMath.log(i);",
      "info" : "ExpressionStatement[12130-12156]:ExpressionStatement[12130-12156]"
    }, {
      "left" : "for (int i = 2; i <= k; i++)",
      "right" : "for (int i = 2; i <= k; i++)",
      "info" : "ForStatement[12200-12279]:ForStatement[12200-12279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12229-12279]:Block[12229-12279]"
    }, {
      "left" : "logSum -= FastMath.log(i);",
      "right" : "logSum -= FastMath.log(i);",
      "info" : "ExpressionStatement[12243-12269]:ExpressionStatement[12243-12269]"
    }, {
      "left" : "return logSum;",
      "right" : "return logSum;",
      "info" : "ReturnStatement[12289-12303]:ReturnStatement[12289-12303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12631-13019]:Block[12631-13019]"
    }, {
      "left" : "if (n < k)",
      "right" : "if (n < k)",
      "info" : "IfStatement[12641-12825]:IfStatement[12641-12825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12652-12825]:Block[12652-12825]"
    }, {
      "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER,\n                n, k);",
      "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER,\n                n, k);",
      "info" : "ThrowStatement[12666-12815]:ThrowStatement[12666-12815]"
    }, {
      "left" : "if (n < 0)",
      "right" : "if (n < 0)",
      "info" : "IfStatement[12834-13013]:IfStatement[12834-13013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12845-13013]:Block[12845-13013]"
    }, {
      "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                  LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER,\n                  n);",
      "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                  LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER,\n                  n);",
      "info" : "ThrowStatement[12859-13003]:ThrowStatement[12859-13003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13626-13765]:Block[13626-13765]"
    }, {
      "left" : "if (equals(x, y, eps))",
      "right" : "if (equals(x, y, eps))",
      "info" : "IfStatement[13636-13741]:IfStatement[13636-13741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13659-13692]:Block[13659-13692]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[13673-13682]:ReturnStatement[13673-13682]"
    }, {
      "left" : "if (x < y)",
      "right" : "if (x < y)",
      "info" : "IfStatement[13698-13741]:IfStatement[13698-13741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13709-13741]:Block[13709-13741]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[13721-13731]:ReturnStatement[13721-13731]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[13750-13759]:ReturnStatement[13750-13759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14053-14119]:Block[14053-14119]"
    }, {
      "left" : "return (FastMath.exp(x) + FastMath.exp(-x)) / 2.0;",
      "right" : "return (FastMath.exp(x) + FastMath.exp(-x)) / 2.0;",
      "info" : "ReturnStatement[14063-14113]:ReturnStatement[14063-14113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14419-14489]:Block[14419-14458]"
    }, {
      "left" : "return (Double.isNaN(x) && Double.isNaN(y)) || x == y;",
      "right" : "return equals(x, y, 1);",
      "info" : "ReturnStatement[14429-14483]:ReturnStatement[14429-14452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14853-14932]:Block[14822-14901]"
    }, {
      "left" : "return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);",
      "right" : "return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);",
      "info" : "ReturnStatement[14863-14926]:ReturnStatement[14832-14895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15324-15393]:Block[15293-15362]"
    }, {
      "left" : "return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",
      "right" : "return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",
      "info" : "ReturnStatement[15334-15387]:ReturnStatement[15303-15356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15832-15912]:Block[15801-15881]"
    }, {
      "left" : "return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",
      "right" : "return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",
      "info" : "ReturnStatement[15842-15906]:ReturnStatement[15811-15875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16758-17406]:Block[16727-17375]"
    }, {
      "left" : "assert maxUlps > 0 && maxUlps < NAN_GAP;",
      "right" : "assert maxUlps > 0 && maxUlps < NAN_GAP;",
      "info" : "AssertStatement[16913-16953]:AssertStatement[16882-16922]"
    }, {
      "left" : "long xInt = Double.doubleToLongBits(x);",
      "right" : "long xInt = Double.doubleToLongBits(x);",
      "info" : "VariableDeclarationStatement[16963-17002]:VariableDeclarationStatement[16932-16971]"
    }, {
      "left" : "long yInt = Double.doubleToLongBits(y);",
      "right" : "long yInt = Double.doubleToLongBits(y);",
      "info" : "VariableDeclarationStatement[17011-17050]:VariableDeclarationStatement[16980-17019]"
    }, {
      "left" : "if (xInt < 0)",
      "right" : "if (xInt < 0)",
      "info" : "IfStatement[17133-17194]:IfStatement[17102-17163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17147-17194]:Block[17116-17163]"
    }, {
      "left" : "xInt = SGN_MASK - xInt;",
      "right" : "xInt = SGN_MASK - xInt;",
      "info" : "ExpressionStatement[17161-17184]:ExpressionStatement[17130-17153]"
    }, {
      "left" : "if (yInt < 0)",
      "right" : "if (yInt < 0)",
      "info" : "IfStatement[17203-17264]:IfStatement[17172-17233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17217-17264]:Block[17186-17233]"
    }, {
      "left" : "yInt = SGN_MASK - yInt;",
      "right" : "yInt = SGN_MASK - yInt;",
      "info" : "ExpressionStatement[17231-17254]:ExpressionStatement[17200-17223]"
    }, {
      "left" : "final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;",
      "right" : "final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;",
      "info" : "VariableDeclarationStatement[17274-17335]:VariableDeclarationStatement[17243-17304]"
    }, {
      "left" : "return isEqual && !Double.isNaN(x) && !Double.isNaN(y);",
      "right" : "return isEqual && !Double.isNaN(x) && !Double.isNaN(y);",
      "info" : "ReturnStatement[17345-17400]:ReturnStatement[17314-17369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17983-18068]:Block[17952-18037]"
    }, {
      "left" : "return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",
      "right" : "return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",
      "info" : "ReturnStatement[17993-18062]:ReturnStatement[17962-18031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18482-18821]:Block[18451-18790]"
    }, {
      "left" : "if ((x == null) || (y == null))",
      "right" : "if ((x == null) || (y == null))",
      "info" : "IfStatement[18492-18584]:IfStatement[18461-18553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18524-18584]:Block[18493-18553]"
    }, {
      "left" : "return !((x == null) ^ (y == null));",
      "right" : "return !((x == null) ^ (y == null));",
      "info" : "ReturnStatement[18538-18574]:ReturnStatement[18507-18543]"
    }, {
      "left" : "if (x.length != y.length)",
      "right" : "if (x.length != y.length)",
      "info" : "IfStatement[18593-18656]:IfStatement[18562-18625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18619-18656]:Block[18588-18625]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18633-18646]:ReturnStatement[18602-18615]"
    }, {
      "left" : "for (int i = 0; i < x.length; ++i)",
      "right" : "for (int i = 0; i < x.length; ++i)",
      "info" : "ForStatement[18665-18794]:ForStatement[18634-18763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18700-18794]:Block[18669-18763]"
    }, {
      "left" : "if (!equals(x[i], y[i]))",
      "right" : "if (!equals(x[i], y[i]))",
      "info" : "IfStatement[18714-18784]:IfStatement[18683-18753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18739-18784]:Block[18708-18753]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18757-18770]:ReturnStatement[18726-18739]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18803-18815]:ReturnStatement[18772-18784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19258-19609]:Block[19227-19578]"
    }, {
      "left" : "if ((x == null) || (y == null))",
      "right" : "if ((x == null) || (y == null))",
      "info" : "IfStatement[19268-19360]:IfStatement[19237-19329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19300-19360]:Block[19269-19329]"
    }, {
      "left" : "return !((x == null) ^ (y == null));",
      "right" : "return !((x == null) ^ (y == null));",
      "info" : "ReturnStatement[19314-19350]:ReturnStatement[19283-19319]"
    }, {
      "left" : "if (x.length != y.length)",
      "right" : "if (x.length != y.length)",
      "info" : "IfStatement[19369-19432]:IfStatement[19338-19401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19395-19432]:Block[19364-19401]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19409-19422]:ReturnStatement[19378-19391]"
    }, {
      "left" : "for (int i = 0; i < x.length; ++i)",
      "right" : "for (int i = 0; i < x.length; ++i)",
      "info" : "ForStatement[19441-19582]:ForStatement[19410-19551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19476-19582]:Block[19445-19551]"
    }, {
      "left" : "if (!equalsIncludingNaN(x[i], y[i]))",
      "right" : "if (!equalsIncludingNaN(x[i], y[i]))",
      "info" : "IfStatement[19490-19572]:IfStatement[19459-19541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19527-19572]:Block[19496-19541]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19545-19558]:ReturnStatement[19514-19527]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[19591-19603]:ReturnStatement[19560-19572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20568-20939]:Block[20537-20908]"
    }, {
      "left" : "if (n < 0)",
      "right" : "if (n < 0)",
      "info" : "IfStatement[20578-20758]:IfStatement[20547-20727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20589-20758]:Block[20558-20727]"
    }, {
      "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                  LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,\n                  n);",
      "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                  LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,\n                  n);",
      "info" : "ThrowStatement[20603-20748]:ThrowStatement[20572-20717]"
    }, {
      "left" : "if (n > 20)",
      "right" : "if (n > 20)",
      "info" : "IfStatement[20767-20903]:IfStatement[20736-20872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20779-20903]:Block[20748-20872]"
    }, {
      "left" : "throw new ArithmeticException(\n                    \"factorial value is too large to fit in a long\");",
      "right" : "throw new ArithmeticException(\n                    \"factorial value is too large to fit in a long\");",
      "info" : "ThrowStatement[20793-20893]:ThrowStatement[20762-20862]"
    }, {
      "left" : "return FACTORIALS[n];",
      "right" : "return FACTORIALS[n];",
      "info" : "ReturnStatement[20912-20933]:ReturnStatement[20881-20902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21801-22130]:Block[21770-22099]"
    }, {
      "left" : "if (n < 0)",
      "right" : "if (n < 0)",
      "info" : "IfStatement[21811-21991]:IfStatement[21780-21960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21822-21991]:Block[21791-21960]"
    }, {
      "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                  LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,\n                  n);",
      "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                  LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,\n                  n);",
      "info" : "ThrowStatement[21836-21981]:ThrowStatement[21805-21950]"
    }, {
      "left" : "if (n < 21)",
      "right" : "if (n < 21)",
      "info" : "IfStatement[22000-22056]:IfStatement[21969-22025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22012-22056]:Block[21981-22025]"
    }, {
      "left" : "return factorial(n);",
      "right" : "return factorial(n);",
      "info" : "ReturnStatement[22026-22046]:ReturnStatement[21995-22015]"
    }, {
      "left" : "return FastMath.floor(FastMath.exp(factorialLog(n)) + 0.5);",
      "right" : "return FastMath.floor(FastMath.exp(factorialLog(n)) + 0.5);",
      "info" : "ReturnStatement[22065-22124]:ReturnStatement[22034-22093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22559-22972]:Block[22528-22941]"
    }, {
      "left" : "if (n < 0)",
      "right" : "if (n < 0)",
      "info" : "IfStatement[22569-22749]:IfStatement[22538-22718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22580-22749]:Block[22549-22718]"
    }, {
      "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                  LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,\n                  n);",
      "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                  LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,\n                  n);",
      "info" : "ThrowStatement[22594-22739]:ThrowStatement[22563-22708]"
    }, {
      "left" : "if (n < 21)",
      "right" : "if (n < 21)",
      "info" : "IfStatement[22758-22828]:IfStatement[22727-22797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22770-22828]:Block[22739-22797]"
    }, {
      "left" : "return FastMath.log(factorial(n));",
      "right" : "return FastMath.log(factorial(n));",
      "info" : "ReturnStatement[22784-22818]:ReturnStatement[22753-22787]"
    }, {
      "left" : "double logSum = 0;",
      "right" : "double logSum = 0;",
      "info" : "VariableDeclarationStatement[22837-22855]:VariableDeclarationStatement[22806-22824]"
    }, {
      "left" : "for (int i = 2; i <= n; i++)",
      "right" : "for (int i = 2; i <= n; i++)",
      "info" : "ForStatement[22864-22943]:ForStatement[22833-22912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22893-22943]:Block[22862-22912]"
    }, {
      "left" : "logSum += FastMath.log(i);",
      "right" : "logSum += FastMath.log(i);",
      "info" : "ExpressionStatement[22907-22933]:ExpressionStatement[22876-22902]"
    }, {
      "left" : "return logSum;",
      "right" : "return logSum;",
      "info" : "ReturnStatement[22952-22966]:ReturnStatement[22921-22935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24219-26383]:Block[24188-26352]"
    }, {
      "left" : "int u = p;",
      "right" : "int u = p;",
      "info" : "VariableDeclarationStatement[24229-24239]:VariableDeclarationStatement[24198-24208]"
    }, {
      "left" : "int v = q;",
      "right" : "int v = q;",
      "info" : "VariableDeclarationStatement[24248-24258]:VariableDeclarationStatement[24217-24227]"
    }, {
      "left" : "if ((u == 0) || (v == 0))",
      "right" : "if ((u == 0) || (v == 0))",
      "info" : "IfStatement[24267-24608]:IfStatement[24236-24577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24293-24608]:Block[24262-24577]"
    }, {
      "left" : "if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE))",
      "right" : "if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE))",
      "info" : "IfStatement[24307-24544]:IfStatement[24276-24513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24365-24544]:Block[24334-24513]"
    }, {
      "left" : "throw MathRuntimeException.createArithmeticException(\n                        LocalizedFormats.GCD_OVERFLOW_32_BITS,\n                        p, q);",
      "right" : "throw MathRuntimeException.createArithmeticException(\n                        LocalizedFormats.GCD_OVERFLOW_32_BITS,\n                        p, q);",
      "info" : "ThrowStatement[24383-24530]:ThrowStatement[24352-24499]"
    }, {
      "left" : "return FastMath.abs(u) + FastMath.abs(v);",
      "right" : "return FastMath.abs(u) + FastMath.abs(v);",
      "info" : "ReturnStatement[24557-24598]:ReturnStatement[24526-24567]"
    }, {
      "left" : "if (u > 0)",
      "right" : "if (u > 0)",
      "info" : "IfStatement[24885-24927]:IfStatement[24854-24896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24896-24927]:Block[24865-24896]"
    }, {
      "left" : "u = -u;",
      "right" : "u = -u;",
      "info" : "ExpressionStatement[24910-24917]:ExpressionStatement[24879-24886]"
    }, {
      "left" : "if (v > 0)",
      "right" : "if (v > 0)",
      "info" : "IfStatement[24955-24997]:IfStatement[24924-24966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24966-24997]:Block[24935-24966]"
    }, {
      "left" : "v = -v;",
      "right" : "v = -v;",
      "info" : "ExpressionStatement[24980-24987]:ExpressionStatement[24949-24956]"
    }, {
      "left" : "int k = 0;",
      "right" : "int k = 0;",
      "info" : "VariableDeclarationStatement[25058-25068]:VariableDeclarationStatement[25027-25037]"
    }, {
      "left" : "while ((u & 1) == 0 && (v & 1) == 0 && k < 31)",
      "right" : "while ((u & 1) == 0 && (v & 1) == 0 && k < 31)",
      "info" : "WhileStatement[25077-25307]:WhileStatement[25046-25276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25124-25307]:Block[25093-25276]"
    }, {
      "left" : "u /= 2;",
      "right" : "u /= 2;",
      "info" : "ExpressionStatement[25235-25242]:ExpressionStatement[25204-25211]"
    }, {
      "left" : "v /= 2;",
      "right" : "v /= 2;",
      "info" : "ExpressionStatement[25255-25262]:ExpressionStatement[25224-25231]"
    }, {
      "left" : "k++;",
      "right" : "k++;",
      "info" : "ExpressionStatement[25275-25279]:ExpressionStatement[25244-25248]"
    }, {
      "left" : "if (k == 31)",
      "right" : "if (k == 31)",
      "info" : "IfStatement[25316-25492]:IfStatement[25285-25461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25329-25492]:Block[25298-25461]"
    }, {
      "left" : "throw MathRuntimeException.createArithmeticException(\n                    LocalizedFormats.GCD_OVERFLOW_32_BITS,\n                    p, q);",
      "right" : "throw MathRuntimeException.createArithmeticException(\n                    LocalizedFormats.GCD_OVERFLOW_32_BITS,\n                    p, q);",
      "info" : "ThrowStatement[25343-25482]:ThrowStatement[25312-25451]"
    }, {
      "left" : "int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;",
      "right" : "int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;",
      "info" : "VariableDeclarationStatement[25597-25643]:VariableDeclarationStatement[25566-25612]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[25774-26331]:DoStatement[25743-26300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25777-26315]:Block[25746-26284]"
    }, {
      "left" : "while ((t & 1) == 0)",
      "right" : "while ((t & 1) == 0)",
      "info" : "WhileStatement[25872-25970]:WhileStatement[25841-25939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25893-25970]:Block[25862-25939]"
    }, {
      "left" : "t /= 2;",
      "right" : "t /= 2;",
      "info" : "ExpressionStatement[25932-25939]:ExpressionStatement[25901-25908]"
    }, {
      "left" : "if (t > 0)",
      "right" : "if (t > 0)",
      "info" : "IfStatement[26018-26112]:IfStatement[25987-26081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26029-26068]:Block[25998-26037]"
    }, {
      "left" : "u = -t;",
      "right" : "u = -t;",
      "info" : "ExpressionStatement[26047-26054]:ExpressionStatement[26016-26023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26074-26112]:Block[26043-26081]"
    }, {
      "left" : "v = t;",
      "right" : "v = t;",
      "info" : "ExpressionStatement[26092-26098]:ExpressionStatement[26061-26067]"
    }, {
      "left" : "t = (v - u) / 2;",
      "right" : "t = (v - u) / 2;",
      "info" : "ExpressionStatement[26189-26205]:ExpressionStatement[26158-26174]"
    }, {
      "left" : "return -u * (1 << k);",
      "right" : "return -u * (1 << k);",
      "info" : "ReturnStatement[26340-26361]:ReturnStatement[26309-26330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27629-29790]:Block[27598-29759]"
    }, {
      "left" : "long u = p;",
      "right" : "long u = p;",
      "info" : "VariableDeclarationStatement[27639-27650]:VariableDeclarationStatement[27608-27619]"
    }, {
      "left" : "long v = q;",
      "right" : "long v = q;",
      "info" : "VariableDeclarationStatement[27659-27670]:VariableDeclarationStatement[27628-27639]"
    }, {
      "left" : "if ((u == 0) || (v == 0))",
      "right" : "if ((u == 0) || (v == 0))",
      "info" : "IfStatement[27679-28013]:IfStatement[27648-27982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27705-28013]:Block[27674-27982]"
    }, {
      "left" : "if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE))",
      "right" : "if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE))",
      "info" : "IfStatement[27719-27949]:IfStatement[27688-27918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27770-27949]:Block[27739-27918]"
    }, {
      "left" : "throw MathRuntimeException.createArithmeticException(\n                        LocalizedFormats.GCD_OVERFLOW_64_BITS,\n                        p, q);",
      "right" : "throw MathRuntimeException.createArithmeticException(\n                        LocalizedFormats.GCD_OVERFLOW_64_BITS,\n                        p, q);",
      "info" : "ThrowStatement[27788-27935]:ThrowStatement[27757-27904]"
    }, {
      "left" : "return FastMath.abs(u) + FastMath.abs(v);",
      "right" : "return FastMath.abs(u) + FastMath.abs(v);",
      "info" : "ReturnStatement[27962-28003]:ReturnStatement[27931-27972]"
    }, {
      "left" : "if (u > 0)",
      "right" : "if (u > 0)",
      "info" : "IfStatement[28290-28332]:IfStatement[28259-28301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28301-28332]:Block[28270-28301]"
    }, {
      "left" : "u = -u;",
      "right" : "u = -u;",
      "info" : "ExpressionStatement[28315-28322]:ExpressionStatement[28284-28291]"
    }, {
      "left" : "if (v > 0)",
      "right" : "if (v > 0)",
      "info" : "IfStatement[28360-28402]:IfStatement[28329-28371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28371-28402]:Block[28340-28371]"
    }, {
      "left" : "v = -v;",
      "right" : "v = -v;",
      "info" : "ExpressionStatement[28385-28392]:ExpressionStatement[28354-28361]"
    }, {
      "left" : "int k = 0;",
      "right" : "int k = 0;",
      "info" : "VariableDeclarationStatement[28463-28473]:VariableDeclarationStatement[28432-28442]"
    }, {
      "left" : "while ((u & 1) == 0 && (v & 1) == 0 && k < 63)",
      "right" : "while ((u & 1) == 0 && (v & 1) == 0 && k < 63)",
      "info" : "WhileStatement[28482-28712]:WhileStatement[28451-28681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28529-28712]:Block[28498-28681]"
    }, {
      "left" : "u /= 2;",
      "right" : "u /= 2;",
      "info" : "ExpressionStatement[28640-28647]:ExpressionStatement[28609-28616]"
    }, {
      "left" : "v /= 2;",
      "right" : "v /= 2;",
      "info" : "ExpressionStatement[28660-28667]:ExpressionStatement[28629-28636]"
    }, {
      "left" : "k++;",
      "right" : "k++;",
      "info" : "ExpressionStatement[28680-28684]:ExpressionStatement[28649-28653]"
    }, {
      "left" : "if (k == 63)",
      "right" : "if (k == 63)",
      "info" : "IfStatement[28721-28897]:IfStatement[28690-28866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28734-28897]:Block[28703-28866]"
    }, {
      "left" : "throw MathRuntimeException.createArithmeticException(\n                    LocalizedFormats.GCD_OVERFLOW_64_BITS,\n                    p, q);",
      "right" : "throw MathRuntimeException.createArithmeticException(\n                    LocalizedFormats.GCD_OVERFLOW_64_BITS,\n                    p, q);",
      "info" : "ThrowStatement[28748-28887]:ThrowStatement[28717-28856]"
    }, {
      "left" : "long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;",
      "right" : "long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;",
      "info" : "VariableDeclarationStatement[29002-29049]:VariableDeclarationStatement[28971-29018]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[29180-29737]:DoStatement[29149-29706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29183-29721]:Block[29152-29690]"
    }, {
      "left" : "while ((t & 1) == 0)",
      "right" : "while ((t & 1) == 0)",
      "info" : "WhileStatement[29278-29376]:WhileStatement[29247-29345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29299-29376]:Block[29268-29345]"
    }, {
      "left" : "t /= 2;",
      "right" : "t /= 2;",
      "info" : "ExpressionStatement[29338-29345]:ExpressionStatement[29307-29314]"
    }, {
      "left" : "if (t > 0)",
      "right" : "if (t > 0)",
      "info" : "IfStatement[29424-29518]:IfStatement[29393-29487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29435-29474]:Block[29404-29443]"
    }, {
      "left" : "u = -t;",
      "right" : "u = -t;",
      "info" : "ExpressionStatement[29453-29460]:ExpressionStatement[29422-29429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29480-29518]:Block[29449-29487]"
    }, {
      "left" : "v = t;",
      "right" : "v = t;",
      "info" : "ExpressionStatement[29498-29504]:ExpressionStatement[29467-29473]"
    }, {
      "left" : "t = (v - u) / 2;",
      "right" : "t = (v - u) / 2;",
      "info" : "ExpressionStatement[29595-29611]:ExpressionStatement[29564-29580]"
    }, {
      "left" : "return -u * (1L << k);",
      "right" : "return -u * (1L << k);",
      "info" : "ReturnStatement[29746-29768]:ReturnStatement[29715-29737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30001-30053]:Block[29970-30022]"
    }, {
      "left" : "return new Double(value).hashCode();",
      "right" : "return new Double(value).hashCode();",
      "info" : "ReturnStatement[30011-30047]:ReturnStatement[29980-30016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30298-30344]:Block[30267-30313]"
    }, {
      "left" : "return Arrays.hashCode(value);",
      "right" : "return Arrays.hashCode(value);",
      "info" : "ReturnStatement[30308-30338]:ReturnStatement[30277-30307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30618-30661]:Block[30587-30630]"
    }, {
      "left" : "return (x >= ZB) ? PB : NB;",
      "right" : "return (x >= ZB) ? PB : NB;",
      "info" : "ReturnStatement[30628-30655]:ReturnStatement[30597-30624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31000-31119]:Block[30969-31088]"
    }, {
      "left" : "if (Double.isNaN(x))",
      "right" : "if (Double.isNaN(x))",
      "info" : "IfStatement[31010-31073]:IfStatement[30979-31042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31031-31073]:Block[31000-31042]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[31045-31063]:ReturnStatement[31014-31032]"
    }, {
      "left" : "return (x >= 0.0) ? 1.0 : -1.0;",
      "right" : "return (x >= 0.0) ? 1.0 : -1.0;",
      "info" : "ReturnStatement[31082-31113]:ReturnStatement[31051-31082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31441-31561]:Block[31410-31530]"
    }, {
      "left" : "if (Float.isNaN(x))",
      "right" : "if (Float.isNaN(x))",
      "info" : "IfStatement[31451-31512]:IfStatement[31420-31481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31471-31512]:Block[31440-31481]"
    }, {
      "left" : "return Float.NaN;",
      "right" : "return Float.NaN;",
      "info" : "ReturnStatement[31485-31502]:ReturnStatement[31454-31471]"
    }, {
      "left" : "return (x >= 0.0F) ? 1.0F : -1.0F;",
      "right" : "return (x >= 0.0F) ? 1.0F : -1.0F;",
      "info" : "ReturnStatement[31521-31555]:ReturnStatement[31490-31524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31794-31835]:Block[31763-31804]"
    }, {
      "left" : "return (x >= 0) ? 1 : -1;",
      "right" : "return (x >= 0) ? 1 : -1;",
      "info" : "ReturnStatement[31804-31829]:ReturnStatement[31773-31798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32074-32118]:Block[32043-32087]"
    }, {
      "left" : "return (x >= 0L) ? 1L : -1L;",
      "right" : "return (x >= 0L) ? 1L : -1L;",
      "info" : "ReturnStatement[32084-32112]:ReturnStatement[32053-32081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32400-32443]:Block[32369-32412]"
    }, {
      "left" : "return (x >= ZS) ? PS : NS;",
      "right" : "return (x >= ZS) ? PS : NS;",
      "info" : "ReturnStatement[32410-32437]:ReturnStatement[32379-32406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33408-33751]:Block[33377-33720]"
    }, {
      "left" : "if (a==0 || b==0)",
      "right" : "if (a==0 || b==0)",
      "info" : "IfStatement[33418-33468]:IfStatement[33387-33437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33435-33468]:Block[33404-33437]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[33449-33458]:ReturnStatement[33418-33427]"
    }, {
      "left" : "int lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",
      "right" : "int lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",
      "info" : "VariableDeclarationStatement[33477-33531]:VariableDeclarationStatement[33446-33500]"
    }, {
      "left" : "if (lcm == Integer.MIN_VALUE)",
      "right" : "if (lcm == Integer.MIN_VALUE)",
      "info" : "IfStatement[33540-33725]:IfStatement[33509-33694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33570-33725]:Block[33539-33694]"
    }, {
      "left" : "throw MathRuntimeException.createArithmeticException(\n                LocalizedFormats.LCM_OVERFLOW_32_BITS,\n                a, b);",
      "right" : "throw MathRuntimeException.createArithmeticException(\n                LocalizedFormats.LCM_OVERFLOW_32_BITS,\n                a, b);",
      "info" : "ThrowStatement[33584-33715]:ThrowStatement[33553-33684]"
    }, {
      "left" : "return lcm;",
      "right" : "return lcm;",
      "info" : "ReturnStatement[33734-33745]:ReturnStatement[33703-33714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34686-35026]:Block[34655-34995]"
    }, {
      "left" : "if (a==0 || b==0)",
      "right" : "if (a==0 || b==0)",
      "info" : "IfStatement[34696-34746]:IfStatement[34665-34715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34713-34746]:Block[34682-34715]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[34727-34736]:ReturnStatement[34696-34705]"
    }, {
      "left" : "long lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",
      "right" : "long lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",
      "info" : "VariableDeclarationStatement[34755-34810]:VariableDeclarationStatement[34724-34779]"
    }, {
      "left" : "if (lcm == Long.MIN_VALUE)",
      "right" : "if (lcm == Long.MIN_VALUE)",
      "info" : "IfStatement[34819-35000]:IfStatement[34788-34969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34845-35000]:Block[34814-34969]"
    }, {
      "left" : "throw MathRuntimeException.createArithmeticException(\n                LocalizedFormats.LCM_OVERFLOW_64_BITS,\n                a, b);",
      "right" : "throw MathRuntimeException.createArithmeticException(\n                LocalizedFormats.LCM_OVERFLOW_64_BITS,\n                a, b);",
      "info" : "ThrowStatement[34859-34990]:ThrowStatement[34828-34959]"
    }, {
      "left" : "return lcm;",
      "right" : "return lcm;",
      "info" : "ReturnStatement[35009-35020]:ReturnStatement[34978-34989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35816-35874]:Block[35785-35843]"
    }, {
      "left" : "return FastMath.log(x)/FastMath.log(base);",
      "right" : "return FastMath.log(x)/FastMath.log(base);",
      "info" : "ReturnStatement[35826-35868]:ReturnStatement[35795-35837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36209-36411]:Block[36178-36380]"
    }, {
      "left" : "long m = ((long)x) * ((long)y);",
      "right" : "long m = ((long)x) * ((long)y);",
      "info" : "VariableDeclarationStatement[36219-36250]:VariableDeclarationStatement[36188-36219]"
    }, {
      "left" : "if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE)",
      "right" : "if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE)",
      "info" : "IfStatement[36259-36382]:IfStatement[36228-36351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36311-36382]:Block[36280-36351]"
    }, {
      "left" : "throw new ArithmeticException(\"overflow: mul\");",
      "right" : "throw new ArithmeticException(\"overflow: mul\");",
      "info" : "ThrowStatement[36325-36372]:ThrowStatement[36294-36341]"
    }, {
      "left" : "return (int)m;",
      "right" : "return (int)m;",
      "info" : "ReturnStatement[36391-36405]:ReturnStatement[36360-36374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36764-38190]:Block[36733-38159]"
    }, {
      "left" : "long ret;",
      "right" : "long ret;",
      "info" : "VariableDeclarationStatement[36774-36783]:VariableDeclarationStatement[36743-36752]"
    }, {
      "left" : "String msg = \"overflow: multiply\";",
      "right" : "String msg = \"overflow: multiply\";",
      "info" : "VariableDeclarationStatement[36792-36826]:VariableDeclarationStatement[36761-36795]"
    }, {
      "left" : "if (a > b)",
      "right" : "if (a > b)",
      "info" : "IfStatement[36835-38164]:IfStatement[36804-38133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36846-36947]:Block[36815-36916]"
    }, {
      "left" : "ret = mulAndCheck(b, a);",
      "right" : "ret = mulAndCheck(b, a);",
      "info" : "ExpressionStatement[36913-36937]:ExpressionStatement[36882-36906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36953-38164]:Block[36922-38133]"
    }, {
      "left" : "if (a < 0)",
      "right" : "if (a < 0)",
      "info" : "IfStatement[36967-38154]:IfStatement[36936-38123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36978-37724]:Block[36947-37693]"
    }, {
      "left" : "if (b < 0)",
      "right" : "if (b < 0)",
      "info" : "IfStatement[36996-37710]:IfStatement[36965-37679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37007-37304]:Block[36976-37273]"
    }, {
      "left" : "if (a >= Long.MAX_VALUE / b)",
      "right" : "if (a >= Long.MAX_VALUE / b)",
      "info" : "IfStatement[37108-37286]:IfStatement[37077-37255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37137-37197]:Block[37106-37166]"
    }, {
      "left" : "ret = a * b;",
      "right" : "ret = a * b;",
      "info" : "ExpressionStatement[37163-37175]:ExpressionStatement[37132-37144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37203-37286]:Block[37172-37255]"
    }, {
      "left" : "throw new ArithmeticException(msg);",
      "right" : "throw new ArithmeticException(msg);",
      "info" : "ThrowStatement[37229-37264]:ThrowStatement[37198-37233]"
    }, {
      "left" : "if (b > 0)",
      "right" : "if (b > 0)",
      "info" : "IfStatement[37310-37710]:IfStatement[37279-37679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37321-37619]:Block[37290-37588]"
    }, {
      "left" : "if (Long.MIN_VALUE / b <= a)",
      "right" : "if (Long.MIN_VALUE / b <= a)",
      "info" : "IfStatement[37422-37601]:IfStatement[37391-37570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37451-37511]:Block[37420-37480]"
    }, {
      "left" : "ret = a * b;",
      "right" : "ret = a * b;",
      "info" : "ExpressionStatement[37477-37489]:ExpressionStatement[37446-37458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37517-37601]:Block[37486-37570]"
    }, {
      "left" : "throw new ArithmeticException(msg);",
      "right" : "throw new ArithmeticException(msg);",
      "info" : "ThrowStatement[37543-37578]:ThrowStatement[37512-37547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37625-37710]:Block[37594-37679]"
    }, {
      "left" : "ret = 0;",
      "right" : "ret = 0;",
      "info" : "ExpressionStatement[37684-37692]:ExpressionStatement[37653-37661]"
    }, {
      "left" : "if (a > 0)",
      "right" : "if (a > 0)",
      "info" : "IfStatement[37730-38154]:IfStatement[37699-38123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37741-38075]:Block[37710-38044]"
    }, {
      "left" : "if (a <= Long.MAX_VALUE / b)",
      "right" : "if (a <= Long.MAX_VALUE / b)",
      "info" : "IfStatement[37899-38061]:IfStatement[37868-38030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37928-37980]:Block[37897-37949]"
    }, {
      "left" : "ret = a * b;",
      "right" : "ret = a * b;",
      "info" : "ExpressionStatement[37950-37962]:ExpressionStatement[37919-37931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37986-38061]:Block[37955-38030]"
    }, {
      "left" : "throw new ArithmeticException(msg);",
      "right" : "throw new ArithmeticException(msg);",
      "info" : "ThrowStatement[38008-38043]:ThrowStatement[37977-38012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38081-38154]:Block[38050-38123]"
    }, {
      "left" : "ret = 0;",
      "right" : "ret = 0;",
      "info" : "ExpressionStatement[38132-38140]:ExpressionStatement[38101-38109]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[38173-38184]:ReturnStatement[38142-38153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38583-39123]:Block[38552-39092]"
    }, {
      "left" : "if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d))",
      "right" : "if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d))",
      "info" : "IfStatement[38646-38736]:IfStatement[38615-38705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38703-38736]:Block[38672-38705]"
    }, {
      "left" : "return d;",
      "right" : "return d;",
      "info" : "ReturnStatement[38717-38726]:ReturnStatement[38686-38695]"
    }, {
      "left" : "final long bits     = Double.doubleToLongBits(d);",
      "right" : "final long bits     = Double.doubleToLongBits(d);",
      "info" : "VariableDeclarationStatement[38792-38841]:VariableDeclarationStatement[38761-38810]"
    }, {
      "left" : "final long exponent = bits & 0x7ff0000000000000L;",
      "right" : "final long exponent = bits & 0x7ff0000000000000L;",
      "info" : "VariableDeclarationStatement[38850-38899]:VariableDeclarationStatement[38819-38868]"
    }, {
      "left" : "final long rest     = bits & 0x800fffffffffffffL;",
      "right" : "final long rest     = bits & 0x800fffffffffffffL;",
      "info" : "VariableDeclarationStatement[38908-38957]:VariableDeclarationStatement[38877-38926]"
    }, {
      "left" : "final long newBits = rest | (exponent + (((long) scaleFactor) << 52));",
      "right" : "final long newBits = rest | (exponent + (((long) scaleFactor) << 52));",
      "info" : "VariableDeclarationStatement[38997-39067]:VariableDeclarationStatement[38966-39036]"
    }, {
      "left" : "return Double.longBitsToDouble(newBits);",
      "right" : "return Double.longBitsToDouble(newBits);",
      "info" : "ReturnStatement[39076-39116]:ReturnStatement[39045-39085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40227-40317]:Block[40196-40286]"
    }, {
      "left" : "return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);",
      "right" : "return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);",
      "info" : "ReturnStatement[40238-40310]:ReturnStatement[40207-40279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41456-42697]:Block[41425-42666]"
    }, {
      "left" : "if (Double.isInfinite(normalizedSum))",
      "right" : "if (Double.isInfinite(normalizedSum))",
      "info" : "IfStatement[41467-41648]:IfStatement[41436-41617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41505-41648]:Block[41474-41617]"
    }, {
      "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                     LocalizedFormats.NORMALIZE_INFINITE);",
      "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                     LocalizedFormats.NORMALIZE_INFINITE);",
      "info" : "ThrowStatement[41520-41637]:ThrowStatement[41489-41606]"
    }, {
      "left" : "if (Double.isNaN(normalizedSum))",
      "right" : "if (Double.isNaN(normalizedSum))",
      "info" : "IfStatement[41658-41829]:IfStatement[41627-41798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41691-41829]:Block[41660-41798]"
    }, {
      "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                     LocalizedFormats.NORMALIZE_NAN);",
      "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                     LocalizedFormats.NORMALIZE_NAN);",
      "info" : "ThrowStatement[41706-41818]:ThrowStatement[41675-41787]"
    }, {
      "left" : "double sum = 0d;",
      "right" : "double sum = 0d;",
      "info" : "VariableDeclarationStatement[41839-41855]:VariableDeclarationStatement[41808-41824]"
    }, {
      "left" : "final int len = values.length;",
      "right" : "final int len = values.length;",
      "info" : "VariableDeclarationStatement[41865-41895]:VariableDeclarationStatement[41834-41864]"
    }, {
      "left" : "double[] out = new double[len];",
      "right" : "double[] out = new double[len];",
      "info" : "VariableDeclarationStatement[41905-41936]:VariableDeclarationStatement[41874-41905]"
    }, {
      "left" : "for (int i = 0; i < len; i++)",
      "right" : "for (int i = 0; i < len; i++)",
      "info" : "ForStatement[41946-42299]:ForStatement[41915-42268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41976-42299]:Block[41945-42268]"
    }, {
      "left" : "if (Double.isInfinite(values[i]))",
      "right" : "if (Double.isInfinite(values[i]))",
      "info" : "IfStatement[41991-42193]:IfStatement[41960-42162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42025-42193]:Block[41994-42162]"
    }, {
      "left" : "throw MathRuntimeException.createArithmeticException(\n                         LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);",
      "right" : "throw MathRuntimeException.createArithmeticException(\n                         LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);",
      "info" : "ThrowStatement[42044-42178]:ThrowStatement[42013-42147]"
    }, {
      "left" : "if (!Double.isNaN(values[i]))",
      "right" : "if (!Double.isNaN(values[i]))",
      "info" : "IfStatement[42207-42288]:IfStatement[42176-42257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42237-42288]:Block[42206-42257]"
    }, {
      "left" : "sum += values[i];",
      "right" : "sum += values[i];",
      "info" : "ExpressionStatement[42256-42273]:ExpressionStatement[42225-42242]"
    }, {
      "left" : "if (sum == 0)",
      "right" : "if (sum == 0)",
      "info" : "IfStatement[42309-42439]:IfStatement[42278-42408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42323-42439]:Block[42292-42408]"
    }, {
      "left" : "throw MathRuntimeException.createArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);",
      "right" : "throw MathRuntimeException.createArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);",
      "info" : "ThrowStatement[42338-42428]:ThrowStatement[42307-42397]"
    }, {
      "left" : "for (int i = 0; i < len; i++)",
      "right" : "for (int i = 0; i < len; i++)",
      "info" : "ForStatement[42449-42669]:ForStatement[42418-42638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42479-42669]:Block[42448-42638]"
    }, {
      "left" : "if (Double.isNaN(values[i]))",
      "right" : "if (Double.isNaN(values[i]))",
      "info" : "IfStatement[42494-42658]:IfStatement[42463-42627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42523-42577]:Block[42492-42546]"
    }, {
      "left" : "out[i] = Double.NaN;",
      "right" : "out[i] = Double.NaN;",
      "info" : "ExpressionStatement[42542-42562]:ExpressionStatement[42511-42531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42583-42658]:Block[42552-42627]"
    }, {
      "left" : "out[i] = values[i] * normalizedSum / sum;",
      "right" : "out[i] = values[i] * normalizedSum / sum;",
      "info" : "ExpressionStatement[42602-42643]:ExpressionStatement[42571-42612]"
    }, {
      "left" : "return out;",
      "right" : "return out;",
      "info" : "ReturnStatement[42679-42690]:ReturnStatement[42648-42659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43089-43154]:Block[43058-43123]"
    }, {
      "left" : "return round(x, scale, BigDecimal.ROUND_HALF_UP);",
      "right" : "return round(x, scale, BigDecimal.ROUND_HALF_UP);",
      "info" : "ReturnStatement[43099-43148]:ReturnStatement[43068-43117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43693-44068]:Block[43662-44037]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[43703-44062]:TryStatement[43672-44031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43707-43881]:Block[43676-43850]"
    }, {
      "left" : "return (new BigDecimal\n                   (Double.toString(x))\n                   .setScale(scale, roundingMethod))\n                   .doubleValue();",
      "right" : "return (new BigDecimal\n                   (Double.toString(x))\n                   .setScale(scale, roundingMethod))\n                   .doubleValue();",
      "info" : "ReturnStatement[43721-43871]:ReturnStatement[43690-43840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43915-44062]:Block[43884-44031]"
    }, {
      "left" : "if (Double.isInfinite(x))",
      "right" : "if (Double.isInfinite(x))",
      "info" : "IfStatement[43929-44052]:IfStatement[43898-44021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43955-43996]:Block[43924-43965]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[43973-43982]:ReturnStatement[43942-43951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44002-44052]:Block[43971-44021]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[44020-44038]:ReturnStatement[43989-44007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44459-44524]:Block[44428-44493]"
    }, {
      "left" : "return round(x, scale, BigDecimal.ROUND_HALF_UP);",
      "right" : "return round(x, scale, BigDecimal.ROUND_HALF_UP);",
      "info" : "ReturnStatement[44469-44518]:ReturnStatement[44438-44487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45061-45248]:Block[45030-45217]"
    }, {
      "left" : "float sign = indicator(x);",
      "right" : "float sign = indicator(x);",
      "info" : "VariableDeclarationStatement[45071-45097]:VariableDeclarationStatement[45040-45066]"
    }, {
      "left" : "float factor = (float)FastMath.pow(10.0f, scale) * sign;",
      "right" : "float factor = (float)FastMath.pow(10.0f, scale) * sign;",
      "info" : "VariableDeclarationStatement[45106-45162]:VariableDeclarationStatement[45075-45131]"
    }, {
      "left" : "return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",
      "right" : "return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",
      "info" : "ReturnStatement[45171-45242]:ReturnStatement[45140-45211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45813-49270]:Block[45782-49239]"
    }, {
      "left" : "switch (roundingMethod) {\n        case BigDecimal.ROUND_CEILING :\n            if (sign == -1) {\n                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            } else {\n                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));\n            }\n            break;\n        case BigDecimal.ROUND_DOWN :\n            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            break;\n        case BigDecimal.ROUND_FLOOR :\n            if (sign == -1) {\n                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));\n            } else {\n                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            }\n            break;\n        case BigDecimal.ROUND_HALF_DOWN : {\n            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n            double fraction = unscaled - FastMath.floor(unscaled);\n            if (fraction > 0.5) {\n                unscaled = FastMath.ceil(unscaled);\n            } else {\n                unscaled = FastMath.floor(unscaled);\n            }\n            break;\n        }\n        case BigDecimal.ROUND_HALF_EVEN : {\n            double fraction = unscaled - FastMath.floor(unscaled);\n            if (fraction > 0.5) {\n                unscaled = FastMath.ceil(unscaled);\n            } else if (fraction < 0.5) {\n                unscaled = FastMath.floor(unscaled);\n            } else {\n                // The following equality test is intentional and needed for rounding purposes\n                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n                    .floor(unscaled) / 2.0)) { // even\n                    unscaled = FastMath.floor(unscaled);\n                } else { // odd\n                    unscaled = FastMath.ceil(unscaled);\n                }\n            }\n            break;\n        }\n        case BigDecimal.ROUND_HALF_UP : {\n            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n            double fraction = unscaled - FastMath.floor(unscaled);\n            if (fraction >= 0.5) {\n                unscaled = FastMath.ceil(unscaled);\n            } else {\n                unscaled = FastMath.floor(unscaled);\n            }\n            break;\n        }\n        case BigDecimal.ROUND_UNNECESSARY :\n            if (unscaled != FastMath.floor(unscaled)) {\n                throw new ArithmeticException(\"Inexact result from rounding\");\n            }\n            break;\n        case BigDecimal.ROUND_UP :\n            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n            break;\n        default :\n            throw MathRuntimeException.createIllegalArgumentException(\n                  LocalizedFormats.INVALID_ROUNDING_METHOD,\n                  roundingMethod,\n                  \"ROUND_CEILING\",     BigDecimal.ROUND_CEILING,\n                  \"ROUND_DOWN\",        BigDecimal.ROUND_DOWN,\n                  \"ROUND_FLOOR\",       BigDecimal.ROUND_FLOOR,\n                  \"ROUND_HALF_DOWN\",   BigDecimal.ROUND_HALF_DOWN,\n                  \"ROUND_HALF_EVEN\",   BigDecimal.ROUND_HALF_EVEN,\n                  \"ROUND_HALF_UP\",     BigDecimal.ROUND_HALF_UP,\n                  \"ROUND_UNNECESSARY\", BigDecimal.ROUND_UNNECESSARY,\n                  \"ROUND_UP\",          BigDecimal.ROUND_UP);\n        }",
      "right" : "switch (roundingMethod) {\n        case BigDecimal.ROUND_CEILING :\n            if (sign == -1) {\n                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            } else {\n                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));\n            }\n            break;\n        case BigDecimal.ROUND_DOWN :\n            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            break;\n        case BigDecimal.ROUND_FLOOR :\n            if (sign == -1) {\n                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));\n            } else {\n                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            }\n            break;\n        case BigDecimal.ROUND_HALF_DOWN : {\n            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n            double fraction = unscaled - FastMath.floor(unscaled);\n            if (fraction > 0.5) {\n                unscaled = FastMath.ceil(unscaled);\n            } else {\n                unscaled = FastMath.floor(unscaled);\n            }\n            break;\n        }\n        case BigDecimal.ROUND_HALF_EVEN : {\n            double fraction = unscaled - FastMath.floor(unscaled);\n            if (fraction > 0.5) {\n                unscaled = FastMath.ceil(unscaled);\n            } else if (fraction < 0.5) {\n                unscaled = FastMath.floor(unscaled);\n            } else {\n                // The following equality test is intentional and needed for rounding purposes\n                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n                    .floor(unscaled) / 2.0)) { // even\n                    unscaled = FastMath.floor(unscaled);\n                } else { // odd\n                    unscaled = FastMath.ceil(unscaled);\n                }\n            }\n            break;\n        }\n        case BigDecimal.ROUND_HALF_UP : {\n            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n            double fraction = unscaled - FastMath.floor(unscaled);\n            if (fraction >= 0.5) {\n                unscaled = FastMath.ceil(unscaled);\n            } else {\n                unscaled = FastMath.floor(unscaled);\n            }\n            break;\n        }\n        case BigDecimal.ROUND_UNNECESSARY :\n            if (unscaled != FastMath.floor(unscaled)) {\n                throw new ArithmeticException(\"Inexact result from rounding\");\n            }\n            break;\n        case BigDecimal.ROUND_UP :\n            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n            break;\n        default :\n            throw MathRuntimeException.createIllegalArgumentException(\n                  LocalizedFormats.INVALID_ROUNDING_METHOD,\n                  roundingMethod,\n                  \"ROUND_CEILING\",     BigDecimal.ROUND_CEILING,\n                  \"ROUND_DOWN\",        BigDecimal.ROUND_DOWN,\n                  \"ROUND_FLOOR\",       BigDecimal.ROUND_FLOOR,\n                  \"ROUND_HALF_DOWN\",   BigDecimal.ROUND_HALF_DOWN,\n                  \"ROUND_HALF_EVEN\",   BigDecimal.ROUND_HALF_EVEN,\n                  \"ROUND_HALF_UP\",     BigDecimal.ROUND_HALF_UP,\n                  \"ROUND_UNNECESSARY\", BigDecimal.ROUND_UNNECESSARY,\n                  \"ROUND_UP\",          BigDecimal.ROUND_UP);\n        }",
      "info" : "SwitchStatement[45823-49239]:SwitchStatement[45792-49208]"
    }, {
      "left" : "case BigDecimal.ROUND_CEILING :",
      "right" : "case BigDecimal.ROUND_CEILING :",
      "info" : "SwitchCase[45857-45888]:SwitchCase[45826-45857]"
    }, {
      "left" : "if (sign == -1)",
      "right" : "if (sign == -1)",
      "info" : "IfStatement[45901-46150]:IfStatement[45870-46119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45917-46031]:Block[45886-46000]"
    }, {
      "left" : "unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
      "right" : "unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
      "info" : "ExpressionStatement[45935-46017]:ExpressionStatement[45904-45986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46037-46150]:Block[46006-46119]"
    }, {
      "left" : "unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",
      "right" : "unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",
      "info" : "ExpressionStatement[46055-46136]:ExpressionStatement[46024-46105]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[46163-46169]:BreakStatement[46132-46138]"
    }, {
      "left" : "case BigDecimal.ROUND_DOWN :",
      "right" : "case BigDecimal.ROUND_DOWN :",
      "info" : "SwitchCase[46178-46206]:SwitchCase[46147-46175]"
    }, {
      "left" : "unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
      "right" : "unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
      "info" : "ExpressionStatement[46219-46301]:ExpressionStatement[46188-46270]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[46314-46320]:BreakStatement[46283-46289]"
    }, {
      "left" : "case BigDecimal.ROUND_FLOOR :",
      "right" : "case BigDecimal.ROUND_FLOOR :",
      "info" : "SwitchCase[46329-46358]:SwitchCase[46298-46327]"
    }, {
      "left" : "if (sign == -1)",
      "right" : "if (sign == -1)",
      "info" : "IfStatement[46371-46620]:IfStatement[46340-46589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46387-46500]:Block[46356-46469]"
    }, {
      "left" : "unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",
      "right" : "unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",
      "info" : "ExpressionStatement[46405-46486]:ExpressionStatement[46374-46455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46506-46620]:Block[46475-46589]"
    }, {
      "left" : "unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
      "right" : "unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
      "info" : "ExpressionStatement[46524-46606]:ExpressionStatement[46493-46575]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[46633-46639]:BreakStatement[46602-46608]"
    }, {
      "left" : "case BigDecimal.ROUND_HALF_DOWN :",
      "right" : "case BigDecimal.ROUND_HALF_DOWN :",
      "info" : "SwitchCase[46648-46681]:SwitchCase[46617-46650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46682-47032]:Block[46651-47001]"
    }, {
      "left" : "unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);",
      "right" : "unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);",
      "info" : "ExpressionStatement[46696-46762]:ExpressionStatement[46665-46731]"
    }, {
      "left" : "double fraction = unscaled - FastMath.floor(unscaled);",
      "right" : "double fraction = unscaled - FastMath.floor(unscaled);",
      "info" : "VariableDeclarationStatement[46775-46829]:VariableDeclarationStatement[46744-46798]"
    }, {
      "left" : "if (fraction > 0.5)",
      "right" : "if (fraction > 0.5)",
      "info" : "IfStatement[46842-47003]:IfStatement[46811-46972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46862-46929]:Block[46831-46898]"
    }, {
      "left" : "unscaled = FastMath.ceil(unscaled);",
      "right" : "unscaled = FastMath.ceil(unscaled);",
      "info" : "ExpressionStatement[46880-46915]:ExpressionStatement[46849-46884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46935-47003]:Block[46904-46972]"
    }, {
      "left" : "unscaled = FastMath.floor(unscaled);",
      "right" : "unscaled = FastMath.floor(unscaled);",
      "info" : "ExpressionStatement[46953-46989]:ExpressionStatement[46922-46958]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47016-47022]:BreakStatement[46985-46991]"
    }, {
      "left" : "case BigDecimal.ROUND_HALF_EVEN :",
      "right" : "case BigDecimal.ROUND_HALF_EVEN :",
      "info" : "SwitchCase[47041-47074]:SwitchCase[47010-47043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47075-47774]:Block[47044-47743]"
    }, {
      "left" : "double fraction = unscaled - FastMath.floor(unscaled);",
      "right" : "double fraction = unscaled - FastMath.floor(unscaled);",
      "info" : "VariableDeclarationStatement[47089-47143]:VariableDeclarationStatement[47058-47112]"
    }, {
      "left" : "if (fraction > 0.5)",
      "right" : "if (fraction > 0.5)",
      "info" : "IfStatement[47156-47745]:IfStatement[47125-47714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47176-47243]:Block[47145-47212]"
    }, {
      "left" : "unscaled = FastMath.ceil(unscaled);",
      "right" : "unscaled = FastMath.ceil(unscaled);",
      "info" : "ExpressionStatement[47194-47229]:ExpressionStatement[47163-47198]"
    }, {
      "left" : "if (fraction < 0.5)",
      "right" : "if (fraction < 0.5)",
      "info" : "IfStatement[47249-47745]:IfStatement[47218-47714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47269-47337]:Block[47238-47306]"
    }, {
      "left" : "unscaled = FastMath.floor(unscaled);",
      "right" : "unscaled = FastMath.floor(unscaled);",
      "info" : "ExpressionStatement[47287-47323]:ExpressionStatement[47256-47292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47343-47745]:Block[47312-47714]"
    }, {
      "left" : "if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n                    .floor(unscaled) / 2.0))",
      "right" : "if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n                    .floor(unscaled) / 2.0))",
      "info" : "IfStatement[47456-47731]:IfStatement[47425-47700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47559-47643]:Block[47528-47612]"
    }, {
      "left" : "unscaled = FastMath.floor(unscaled);",
      "right" : "unscaled = FastMath.floor(unscaled);",
      "info" : "ExpressionStatement[47589-47625]:ExpressionStatement[47558-47594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47649-47731]:Block[47618-47700]"
    }, {
      "left" : "unscaled = FastMath.ceil(unscaled);",
      "right" : "unscaled = FastMath.ceil(unscaled);",
      "info" : "ExpressionStatement[47678-47713]:ExpressionStatement[47647-47682]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47758-47764]:BreakStatement[47727-47733]"
    }, {
      "left" : "case BigDecimal.ROUND_HALF_UP :",
      "right" : "case BigDecimal.ROUND_HALF_UP :",
      "info" : "SwitchCase[47783-47814]:SwitchCase[47752-47783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47815-48166]:Block[47784-48135]"
    }, {
      "left" : "unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);",
      "right" : "unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);",
      "info" : "ExpressionStatement[47829-47895]:ExpressionStatement[47798-47864]"
    }, {
      "left" : "double fraction = unscaled - FastMath.floor(unscaled);",
      "right" : "double fraction = unscaled - FastMath.floor(unscaled);",
      "info" : "VariableDeclarationStatement[47908-47962]:VariableDeclarationStatement[47877-47931]"
    }, {
      "left" : "if (fraction >= 0.5)",
      "right" : "if (fraction >= 0.5)",
      "info" : "IfStatement[47975-48137]:IfStatement[47944-48106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47996-48063]:Block[47965-48032]"
    }, {
      "left" : "unscaled = FastMath.ceil(unscaled);",
      "right" : "unscaled = FastMath.ceil(unscaled);",
      "info" : "ExpressionStatement[48014-48049]:ExpressionStatement[47983-48018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48069-48137]:Block[48038-48106]"
    }, {
      "left" : "unscaled = FastMath.floor(unscaled);",
      "right" : "unscaled = FastMath.floor(unscaled);",
      "info" : "ExpressionStatement[48087-48123]:ExpressionStatement[48056-48092]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48150-48156]:BreakStatement[48119-48125]"
    }, {
      "left" : "case BigDecimal.ROUND_UNNECESSARY :",
      "right" : "case BigDecimal.ROUND_UNNECESSARY :",
      "info" : "SwitchCase[48175-48210]:SwitchCase[48144-48179]"
    }, {
      "left" : "if (unscaled != FastMath.floor(unscaled))",
      "right" : "if (unscaled != FastMath.floor(unscaled))",
      "info" : "IfStatement[48223-48359]:IfStatement[48192-48328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48265-48359]:Block[48234-48328]"
    }, {
      "left" : "throw new ArithmeticException(\"Inexact result from rounding\");",
      "right" : "throw new ArithmeticException(\"Inexact result from rounding\");",
      "info" : "ThrowStatement[48283-48345]:ThrowStatement[48252-48314]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48372-48378]:BreakStatement[48341-48347]"
    }, {
      "left" : "case BigDecimal.ROUND_UP :",
      "right" : "case BigDecimal.ROUND_UP :",
      "info" : "SwitchCase[48387-48413]:SwitchCase[48356-48382]"
    }, {
      "left" : "unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));",
      "right" : "unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));",
      "info" : "ExpressionStatement[48426-48508]:ExpressionStatement[48395-48477]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48521-48527]:BreakStatement[48490-48496]"
    }, {
      "left" : "default :",
      "right" : "default :",
      "info" : "SwitchCase[48536-48545]:SwitchCase[48505-48514]"
    }, {
      "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                  LocalizedFormats.INVALID_ROUNDING_METHOD,\n                  roundingMethod,\n                  \"ROUND_CEILING\",     BigDecimal.ROUND_CEILING,\n                  \"ROUND_DOWN\",        BigDecimal.ROUND_DOWN,\n                  \"ROUND_FLOOR\",       BigDecimal.ROUND_FLOOR,\n                  \"ROUND_HALF_DOWN\",   BigDecimal.ROUND_HALF_DOWN,\n                  \"ROUND_HALF_EVEN\",   BigDecimal.ROUND_HALF_EVEN,\n                  \"ROUND_HALF_UP\",     BigDecimal.ROUND_HALF_UP,\n                  \"ROUND_UNNECESSARY\", BigDecimal.ROUND_UNNECESSARY,\n                  \"ROUND_UP\",          BigDecimal.ROUND_UP);",
      "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                  LocalizedFormats.INVALID_ROUNDING_METHOD,\n                  roundingMethod,\n                  \"ROUND_CEILING\",     BigDecimal.ROUND_CEILING,\n                  \"ROUND_DOWN\",        BigDecimal.ROUND_DOWN,\n                  \"ROUND_FLOOR\",       BigDecimal.ROUND_FLOOR,\n                  \"ROUND_HALF_DOWN\",   BigDecimal.ROUND_HALF_DOWN,\n                  \"ROUND_HALF_EVEN\",   BigDecimal.ROUND_HALF_EVEN,\n                  \"ROUND_HALF_UP\",     BigDecimal.ROUND_HALF_UP,\n                  \"ROUND_UNNECESSARY\", BigDecimal.ROUND_UNNECESSARY,\n                  \"ROUND_UP\",          BigDecimal.ROUND_UP);",
      "info" : "ThrowStatement[48558-49229]:ThrowStatement[48527-49198]"
    }, {
      "left" : "return unscaled;",
      "right" : "return unscaled;",
      "info" : "ReturnStatement[49248-49264]:ReturnStatement[49217-49233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49702-49761]:Block[49671-49730]"
    }, {
      "left" : "return (x == ZB) ? ZB : (x > ZB) ? PB : NB;",
      "right" : "return (x == ZB) ? ZB : (x > ZB) ? PB : NB;",
      "info" : "ReturnStatement[49712-49755]:ReturnStatement[49681-49724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50342-50479]:Block[50311-50448]"
    }, {
      "left" : "if (Double.isNaN(x))",
      "right" : "if (Double.isNaN(x))",
      "info" : "IfStatement[50352-50415]:IfStatement[50321-50384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50373-50415]:Block[50342-50384]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[50387-50405]:ReturnStatement[50356-50374]"
    }, {
      "left" : "return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;",
      "right" : "return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;",
      "info" : "ReturnStatement[50424-50473]:ReturnStatement[50393-50442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50960-51100]:Block[50929-51069]"
    }, {
      "left" : "if (Float.isNaN(x))",
      "right" : "if (Float.isNaN(x))",
      "info" : "IfStatement[50970-51031]:IfStatement[50939-51000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50990-51031]:Block[50959-51000]"
    }, {
      "left" : "return Float.NaN;",
      "right" : "return Float.NaN;",
      "info" : "ReturnStatement[51004-51021]:ReturnStatement[50973-50990]"
    }, {
      "left" : "return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;",
      "right" : "return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;",
      "info" : "ReturnStatement[51040-51094]:ReturnStatement[51009-51063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51481-51536]:Block[51450-51505]"
    }, {
      "left" : "return (x == 0) ? 0 : (x > 0) ? 1 : -1;",
      "right" : "return (x == 0) ? 0 : (x > 0) ? 1 : -1;",
      "info" : "ReturnStatement[51491-51530]:ReturnStatement[51460-51499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51926-51986]:Block[51895-51955]"
    }, {
      "left" : "return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;",
      "right" : "return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;",
      "info" : "ReturnStatement[51936-51980]:ReturnStatement[51905-51949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52444-52503]:Block[52413-52472]"
    }, {
      "left" : "return (x == ZS) ? ZS : (x > ZS) ? PS : NS;",
      "right" : "return (x == ZS) ? ZS : (x > ZS) ? PS : NS;",
      "info" : "ReturnStatement[52454-52497]:ReturnStatement[52423-52466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52783-52849]:Block[52752-52818]"
    }, {
      "left" : "return (FastMath.exp(x) - FastMath.exp(-x)) / 2.0;",
      "right" : "return (FastMath.exp(x) - FastMath.exp(-x)) / 2.0;",
      "info" : "ReturnStatement[52793-52843]:ReturnStatement[52762-52812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53196-53448]:Block[53165-53417]"
    }, {
      "left" : "long s = (long)x - (long)y;",
      "right" : "long s = (long)x - (long)y;",
      "info" : "VariableDeclarationStatement[53206-53233]:VariableDeclarationStatement[53175-53202]"
    }, {
      "left" : "if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE)",
      "right" : "if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE)",
      "info" : "IfStatement[53242-53419]:IfStatement[53211-53388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53294-53419]:Block[53263-53388]"
    }, {
      "left" : "throw MathRuntimeException.createArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",
      "right" : "throw MathRuntimeException.createArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",
      "info" : "ThrowStatement[53308-53409]:ThrowStatement[53277-53378]"
    }, {
      "left" : "return (int)s;",
      "right" : "return (int)s;",
      "info" : "ReturnStatement[53428-53442]:ReturnStatement[53397-53411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53802-54206]:Block[53771-54175]"
    }, {
      "left" : "long ret;",
      "right" : "long ret;",
      "info" : "VariableDeclarationStatement[53812-53821]:VariableDeclarationStatement[53781-53790]"
    }, {
      "left" : "String msg = \"overflow: subtract\";",
      "right" : "String msg = \"overflow: subtract\";",
      "info" : "VariableDeclarationStatement[53830-53864]:VariableDeclarationStatement[53799-53833]"
    }, {
      "left" : "if (b == Long.MIN_VALUE)",
      "right" : "if (b == Long.MIN_VALUE)",
      "info" : "IfStatement[53873-54180]:IfStatement[53842-54149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53898-54050]:Block[53867-54019]"
    }, {
      "left" : "if (a < 0)",
      "right" : "if (a < 0)",
      "info" : "IfStatement[53912-54040]:IfStatement[53881-54009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53923-53967]:Block[53892-53936]"
    }, {
      "left" : "ret = a - b;",
      "right" : "ret = a - b;",
      "info" : "ExpressionStatement[53941-53953]:ExpressionStatement[53910-53922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53973-54040]:Block[53942-54009]"
    }, {
      "left" : "throw new ArithmeticException(msg);",
      "right" : "throw new ArithmeticException(msg);",
      "info" : "ThrowStatement[53991-54026]:ThrowStatement[53960-53995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54056-54180]:Block[54025-54149]"
    }, {
      "left" : "ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",
      "right" : "ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",
      "info" : "ExpressionStatement[54106-54170]:ExpressionStatement[54075-54139]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[54189-54200]:ReturnStatement[54158-54169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54520-54949]:Block[54489-54918]"
    }, {
      "left" : "if (e < 0)",
      "right" : "if (e < 0)",
      "info" : "IfStatement[54531-54707]:IfStatement[54500-54676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54542-54707]:Block[54511-54676]"
    }, {
      "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                LocalizedFormats.POWER_NEGATIVE_PARAMETERS,\n                k, e);",
      "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                LocalizedFormats.POWER_NEGATIVE_PARAMETERS,\n                k, e);",
      "info" : "ThrowStatement[54556-54697]:ThrowStatement[54525-54666]"
    }, {
      "left" : "int result = 1;",
      "right" : "int result = 1;",
      "info" : "VariableDeclarationStatement[54717-54732]:VariableDeclarationStatement[54686-54701]"
    }, {
      "left" : "int k2p    = k;",
      "right" : "int k2p    = k;",
      "info" : "VariableDeclarationStatement[54741-54756]:VariableDeclarationStatement[54710-54725]"
    }, {
      "left" : "while (e != 0)",
      "right" : "while (e != 0)",
      "info" : "WhileStatement[54765-54918]:WhileStatement[54734-54887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54780-54918]:Block[54749-54887]"
    }, {
      "left" : "if ((e & 0x1) != 0)",
      "right" : "if ((e & 0x1) != 0)",
      "info" : "IfStatement[54794-54860]:IfStatement[54763-54829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54814-54860]:Block[54783-54829]"
    }, {
      "left" : "result *= k2p;",
      "right" : "result *= k2p;",
      "info" : "ExpressionStatement[54832-54846]:ExpressionStatement[54801-54815]"
    }, {
      "left" : "k2p *= k2p;",
      "right" : "k2p *= k2p;",
      "info" : "ExpressionStatement[54873-54884]:ExpressionStatement[54842-54853]"
    }, {
      "left" : "e = e >> 1;",
      "right" : "e = e >> 1;",
      "info" : "ExpressionStatement[54897-54908]:ExpressionStatement[54866-54877]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[54928-54942]:ReturnStatement[54897-54911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55264-55693]:Block[55233-55662]"
    }, {
      "left" : "if (e < 0)",
      "right" : "if (e < 0)",
      "info" : "IfStatement[55275-55451]:IfStatement[55244-55420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55286-55451]:Block[55255-55420]"
    }, {
      "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                LocalizedFormats.POWER_NEGATIVE_PARAMETERS,\n                k, e);",
      "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                LocalizedFormats.POWER_NEGATIVE_PARAMETERS,\n                k, e);",
      "info" : "ThrowStatement[55300-55441]:ThrowStatement[55269-55410]"
    }, {
      "left" : "int result = 1;",
      "right" : "int result = 1;",
      "info" : "VariableDeclarationStatement[55461-55476]:VariableDeclarationStatement[55430-55445]"
    }, {
      "left" : "int k2p    = k;",
      "right" : "int k2p    = k;",
      "info" : "VariableDeclarationStatement[55485-55500]:VariableDeclarationStatement[55454-55469]"
    }, {
      "left" : "while (e != 0)",
      "right" : "while (e != 0)",
      "info" : "WhileStatement[55509-55662]:WhileStatement[55478-55631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55524-55662]:Block[55493-55631]"
    }, {
      "left" : "if ((e & 0x1) != 0)",
      "right" : "if ((e & 0x1) != 0)",
      "info" : "IfStatement[55538-55604]:IfStatement[55507-55573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55558-55604]:Block[55527-55573]"
    }, {
      "left" : "result *= k2p;",
      "right" : "result *= k2p;",
      "info" : "ExpressionStatement[55576-55590]:ExpressionStatement[55545-55559]"
    }, {
      "left" : "k2p *= k2p;",
      "right" : "k2p *= k2p;",
      "info" : "ExpressionStatement[55617-55628]:ExpressionStatement[55586-55597]"
    }, {
      "left" : "e = e >> 1;",
      "right" : "e = e >> 1;",
      "info" : "ExpressionStatement[55641-55652]:ExpressionStatement[55610-55621]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[55672-55686]:ReturnStatement[55641-55655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56009-56441]:Block[55978-56410]"
    }, {
      "left" : "if (e < 0)",
      "right" : "if (e < 0)",
      "info" : "IfStatement[56020-56196]:IfStatement[55989-56165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56031-56196]:Block[56000-56165]"
    }, {
      "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                LocalizedFormats.POWER_NEGATIVE_PARAMETERS,\n                k, e);",
      "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                LocalizedFormats.POWER_NEGATIVE_PARAMETERS,\n                k, e);",
      "info" : "ThrowStatement[56045-56186]:ThrowStatement[56014-56155]"
    }, {
      "left" : "long result = 1l;",
      "right" : "long result = 1l;",
      "info" : "VariableDeclarationStatement[56206-56223]:VariableDeclarationStatement[56175-56192]"
    }, {
      "left" : "long k2p    = k;",
      "right" : "long k2p    = k;",
      "info" : "VariableDeclarationStatement[56232-56248]:VariableDeclarationStatement[56201-56217]"
    }, {
      "left" : "while (e != 0)",
      "right" : "while (e != 0)",
      "info" : "WhileStatement[56257-56410]:WhileStatement[56226-56379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56272-56410]:Block[56241-56379]"
    }, {
      "left" : "if ((e & 0x1) != 0)",
      "right" : "if ((e & 0x1) != 0)",
      "info" : "IfStatement[56286-56352]:IfStatement[56255-56321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56306-56352]:Block[56275-56321]"
    }, {
      "left" : "result *= k2p;",
      "right" : "result *= k2p;",
      "info" : "ExpressionStatement[56324-56338]:ExpressionStatement[56293-56307]"
    }, {
      "left" : "k2p *= k2p;",
      "right" : "k2p *= k2p;",
      "info" : "ExpressionStatement[56365-56376]:ExpressionStatement[56334-56345]"
    }, {
      "left" : "e = e >> 1;",
      "right" : "e = e >> 1;",
      "info" : "ExpressionStatement[56389-56400]:ExpressionStatement[56358-56369]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[56420-56434]:ReturnStatement[56389-56403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56758-57190]:Block[56727-57159]"
    }, {
      "left" : "if (e < 0)",
      "right" : "if (e < 0)",
      "info" : "IfStatement[56769-56945]:IfStatement[56738-56914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56780-56945]:Block[56749-56914]"
    }, {
      "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                LocalizedFormats.POWER_NEGATIVE_PARAMETERS,\n                k, e);",
      "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                LocalizedFormats.POWER_NEGATIVE_PARAMETERS,\n                k, e);",
      "info" : "ThrowStatement[56794-56935]:ThrowStatement[56763-56904]"
    }, {
      "left" : "long result = 1l;",
      "right" : "long result = 1l;",
      "info" : "VariableDeclarationStatement[56955-56972]:VariableDeclarationStatement[56924-56941]"
    }, {
      "left" : "long k2p    = k;",
      "right" : "long k2p    = k;",
      "info" : "VariableDeclarationStatement[56981-56997]:VariableDeclarationStatement[56950-56966]"
    }, {
      "left" : "while (e != 0)",
      "right" : "while (e != 0)",
      "info" : "WhileStatement[57006-57159]:WhileStatement[56975-57128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57021-57159]:Block[56990-57128]"
    }, {
      "left" : "if ((e & 0x1) != 0)",
      "right" : "if ((e & 0x1) != 0)",
      "info" : "IfStatement[57035-57101]:IfStatement[57004-57070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57055-57101]:Block[57024-57070]"
    }, {
      "left" : "result *= k2p;",
      "right" : "result *= k2p;",
      "info" : "ExpressionStatement[57073-57087]:ExpressionStatement[57042-57056]"
    }, {
      "left" : "k2p *= k2p;",
      "right" : "k2p *= k2p;",
      "info" : "ExpressionStatement[57114-57125]:ExpressionStatement[57083-57094]"
    }, {
      "left" : "e = e >> 1;",
      "right" : "e = e >> 1;",
      "info" : "ExpressionStatement[57138-57149]:ExpressionStatement[57107-57118]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[57169-57183]:ReturnStatement[57138-57152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57524-57744]:Block[57493-57713]"
    }, {
      "left" : "if (e < 0)",
      "right" : "if (e < 0)",
      "info" : "IfStatement[57535-57711]:IfStatement[57504-57680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57546-57711]:Block[57515-57680]"
    }, {
      "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                LocalizedFormats.POWER_NEGATIVE_PARAMETERS,\n                k, e);",
      "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                LocalizedFormats.POWER_NEGATIVE_PARAMETERS,\n                k, e);",
      "info" : "ThrowStatement[57560-57701]:ThrowStatement[57529-57670]"
    }, {
      "left" : "return k.pow(e);",
      "right" : "return k.pow(e);",
      "info" : "ReturnStatement[57721-57737]:ReturnStatement[57690-57706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58079-58564]:Block[58048-58533]"
    }, {
      "left" : "if (e < 0)",
      "right" : "if (e < 0)",
      "info" : "IfStatement[58090-58266]:IfStatement[58059-58235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58101-58266]:Block[58070-58235]"
    }, {
      "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                LocalizedFormats.POWER_NEGATIVE_PARAMETERS,\n                k, e);",
      "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                LocalizedFormats.POWER_NEGATIVE_PARAMETERS,\n                k, e);",
      "info" : "ThrowStatement[58115-58256]:ThrowStatement[58084-58225]"
    }, {
      "left" : "BigInteger result = BigInteger.ONE;",
      "right" : "BigInteger result = BigInteger.ONE;",
      "info" : "VariableDeclarationStatement[58276-58311]:VariableDeclarationStatement[58245-58280]"
    }, {
      "left" : "BigInteger k2p    = k;",
      "right" : "BigInteger k2p    = k;",
      "info" : "VariableDeclarationStatement[58320-58342]:VariableDeclarationStatement[58289-58311]"
    }, {
      "left" : "while (e != 0)",
      "right" : "while (e != 0)",
      "info" : "WhileStatement[58351-58533]:WhileStatement[58320-58502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58366-58533]:Block[58335-58502]"
    }, {
      "left" : "if ((e & 0x1) != 0)",
      "right" : "if ((e & 0x1) != 0)",
      "info" : "IfStatement[58380-58462]:IfStatement[58349-58431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58400-58462]:Block[58369-58431]"
    }, {
      "left" : "result = result.multiply(k2p);",
      "right" : "result = result.multiply(k2p);",
      "info" : "ExpressionStatement[58418-58448]:ExpressionStatement[58387-58417]"
    }, {
      "left" : "k2p = k2p.multiply(k2p);",
      "right" : "k2p = k2p.multiply(k2p);",
      "info" : "ExpressionStatement[58475-58499]:ExpressionStatement[58444-58468]"
    }, {
      "left" : "e = e >> 1;",
      "right" : "e = e >> 1;",
      "info" : "ExpressionStatement[58512-58523]:ExpressionStatement[58481-58492]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[58543-58557]:ReturnStatement[58512-58526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58911-59450]:Block[58880-59419]"
    }, {
      "left" : "if (e.compareTo(BigInteger.ZERO) < 0)",
      "right" : "if (e.compareTo(BigInteger.ZERO) < 0)",
      "info" : "IfStatement[58922-59125]:IfStatement[58891-59094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58960-59125]:Block[58929-59094]"
    }, {
      "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                LocalizedFormats.POWER_NEGATIVE_PARAMETERS,\n                k, e);",
      "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                LocalizedFormats.POWER_NEGATIVE_PARAMETERS,\n                k, e);",
      "info" : "ThrowStatement[58974-59115]:ThrowStatement[58943-59084]"
    }, {
      "left" : "BigInteger result = BigInteger.ONE;",
      "right" : "BigInteger result = BigInteger.ONE;",
      "info" : "VariableDeclarationStatement[59135-59170]:VariableDeclarationStatement[59104-59139]"
    }, {
      "left" : "BigInteger k2p    = k;",
      "right" : "BigInteger k2p    = k;",
      "info" : "VariableDeclarationStatement[59179-59201]:VariableDeclarationStatement[59148-59170]"
    }, {
      "left" : "while (!BigInteger.ZERO.equals(e))",
      "right" : "while (!BigInteger.ZERO.equals(e))",
      "info" : "WhileStatement[59210-59419]:WhileStatement[59179-59388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59245-59419]:Block[59214-59388]"
    }, {
      "left" : "if (e.testBit(0))",
      "right" : "if (e.testBit(0))",
      "info" : "IfStatement[59259-59339]:IfStatement[59228-59308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59277-59339]:Block[59246-59308]"
    }, {
      "left" : "result = result.multiply(k2p);",
      "right" : "result = result.multiply(k2p);",
      "info" : "ExpressionStatement[59295-59325]:ExpressionStatement[59264-59294]"
    }, {
      "left" : "k2p = k2p.multiply(k2p);",
      "right" : "k2p = k2p.multiply(k2p);",
      "info" : "ExpressionStatement[59352-59376]:ExpressionStatement[59321-59345]"
    }, {
      "left" : "e = e.shiftRight(1);",
      "right" : "e = e.shiftRight(1);",
      "info" : "ExpressionStatement[59389-59409]:ExpressionStatement[59358-59378]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[59429-59443]:ReturnStatement[59398-59412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59746-59901]:Block[59715-59870]"
    }, {
      "left" : "double sum = 0;",
      "right" : "double sum = 0;",
      "info" : "VariableDeclarationStatement[59756-59771]:VariableDeclarationStatement[59725-59740]"
    }, {
      "left" : "for (int i = 0; i < p1.length; i++)",
      "right" : "for (int i = 0; i < p1.length; i++)",
      "info" : "ForStatement[59780-59875]:ForStatement[59749-59844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59816-59875]:Block[59785-59844]"
    }, {
      "left" : "sum += FastMath.abs(p1[i] - p2[i]);",
      "right" : "sum += FastMath.abs(p1[i] - p2[i]);",
      "info" : "ExpressionStatement[59830-59865]:ExpressionStatement[59799-59834]"
    }, {
      "left" : "return sum;",
      "right" : "return sum;",
      "info" : "ReturnStatement[59884-59895]:ReturnStatement[59853-59864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60188-60330]:Block[60157-60299]"
    }, {
      "left" : "int sum = 0;",
      "right" : "int sum = 0;",
      "info" : "VariableDeclarationStatement[60196-60208]:VariableDeclarationStatement[60165-60177]"
    }, {
      "left" : "for (int i = 0; i < p1.length; i++)",
      "right" : "for (int i = 0; i < p1.length; i++)",
      "info" : "ForStatement[60215-60306]:ForStatement[60184-60275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60251-60306]:Block[60220-60275]"
    }, {
      "left" : "sum += FastMath.abs(p1[i] - p2[i]);",
      "right" : "sum += FastMath.abs(p1[i] - p2[i]);",
      "info" : "ExpressionStatement[60263-60298]:ExpressionStatement[60232-60267]"
    }, {
      "left" : "return sum;",
      "right" : "return sum;",
      "info" : "ReturnStatement[60313-60324]:ReturnStatement[60282-60293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60624-60819]:Block[60593-60788]"
    }, {
      "left" : "double sum = 0;",
      "right" : "double sum = 0;",
      "info" : "VariableDeclarationStatement[60634-60649]:VariableDeclarationStatement[60603-60618]"
    }, {
      "left" : "for (int i = 0; i < p1.length; i++)",
      "right" : "for (int i = 0; i < p1.length; i++)",
      "info" : "ForStatement[60658-60778]:ForStatement[60627-60747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60694-60778]:Block[60663-60747]"
    }, {
      "left" : "final double dp = p1[i] - p2[i];",
      "right" : "final double dp = p1[i] - p2[i];",
      "info" : "VariableDeclarationStatement[60708-60740]:VariableDeclarationStatement[60677-60709]"
    }, {
      "left" : "sum += dp * dp;",
      "right" : "sum += dp * dp;",
      "info" : "ExpressionStatement[60753-60768]:ExpressionStatement[60722-60737]"
    }, {
      "left" : "return FastMath.sqrt(sum);",
      "right" : "return FastMath.sqrt(sum);",
      "info" : "ReturnStatement[60787-60813]:ReturnStatement[60756-60782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61107-61290]:Block[61076-61259]"
    }, {
      "left" : "double sum = 0;",
      "right" : "double sum = 0;",
      "info" : "VariableDeclarationStatement[61115-61130]:VariableDeclarationStatement[61084-61099]"
    }, {
      "left" : "for (int i = 0; i < p1.length; i++)",
      "right" : "for (int i = 0; i < p1.length; i++)",
      "info" : "ForStatement[61137-61251]:ForStatement[61106-61220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61173-61251]:Block[61142-61220]"
    }, {
      "left" : "final double dp = p1[i] - p2[i];",
      "right" : "final double dp = p1[i] - p2[i];",
      "info" : "VariableDeclarationStatement[61185-61217]:VariableDeclarationStatement[61154-61186]"
    }, {
      "left" : "sum += dp * dp;",
      "right" : "sum += dp * dp;",
      "info" : "ExpressionStatement[61228-61243]:ExpressionStatement[61197-61212]"
    }, {
      "left" : "return FastMath.sqrt(sum);",
      "right" : "return FastMath.sqrt(sum);",
      "info" : "ReturnStatement[61258-61284]:ReturnStatement[61227-61253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61600-61773]:Block[61569-61742]"
    }, {
      "left" : "double max = 0;",
      "right" : "double max = 0;",
      "info" : "VariableDeclarationStatement[61610-61625]:VariableDeclarationStatement[61579-61594]"
    }, {
      "left" : "for (int i = 0; i < p1.length; i++)",
      "right" : "for (int i = 0; i < p1.length; i++)",
      "info" : "ForStatement[61634-61747]:ForStatement[61603-61716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61670-61747]:Block[61639-61716]"
    }, {
      "left" : "max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",
      "right" : "max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",
      "info" : "ExpressionStatement[61684-61737]:ExpressionStatement[61653-61706]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[61756-61767]:ReturnStatement[61725-61736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62074-62244]:Block[62043-62213]"
    }, {
      "left" : "int max = 0;",
      "right" : "int max = 0;",
      "info" : "VariableDeclarationStatement[62084-62096]:VariableDeclarationStatement[62053-62065]"
    }, {
      "left" : "for (int i = 0; i < p1.length; i++)",
      "right" : "for (int i = 0; i < p1.length; i++)",
      "info" : "ForStatement[62105-62218]:ForStatement[62074-62187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62141-62218]:Block[62110-62187]"
    }, {
      "left" : "max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",
      "right" : "max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",
      "info" : "ExpressionStatement[62155-62208]:ExpressionStatement[62124-62177]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[62227-62238]:ReturnStatement[62196-62207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62840-63970]:Block[62809-63939]"
    }, {
      "left" : "double previous = val[0];",
      "right" : "double previous = val[0];",
      "info" : "VariableDeclarationStatement[62850-62875]:VariableDeclarationStatement[62819-62844]"
    }, {
      "left" : "boolean ok = true;",
      "right" : "boolean ok = true;",
      "info" : "VariableDeclarationStatement[62884-62902]:VariableDeclarationStatement[62853-62871]"
    }, {
      "left" : "int max = val.length;",
      "right" : "int max = val.length;",
      "info" : "VariableDeclarationStatement[62912-62933]:VariableDeclarationStatement[62881-62902]"
    }, {
      "left" : "for (int i = 1; i < max; i++)",
      "right" : "for (int i = 1; i < max; i++)",
      "info" : "ForStatement[62942-63964]:ForStatement[62911-63933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62972-63964]:Block[62941-63933]"
    }, {
      "left" : "switch (dir) {\n            case INCREASING:\n                if (strict) {\n                    if (val[i] <= previous) {\n                        ok = false;\n                    }\n                } else {\n                    if (val[i] < previous) {\n                        ok = false;\n                    }\n                }\n                break;\n            case DECREASING:\n                if (strict) {\n                    if (val[i] >= previous) {\n                        ok = false;\n                    }\n                } else {\n                    if (val[i] > previous) {\n                        ok = false;\n                    }\n                }\n                break;\n            default:\n                // Should never happen.\n                throw new IllegalArgumentException();\n            }",
      "right" : "switch (dir) {\n            case INCREASING:\n                if (strict) {\n                    if (val[i] <= previous) {\n                        ok = false;\n                    }\n                } else {\n                    if (val[i] < previous) {\n                        ok = false;\n                    }\n                }\n                break;\n            case DECREASING:\n                if (strict) {\n                    if (val[i] >= previous) {\n                        ok = false;\n                    }\n                } else {\n                    if (val[i] > previous) {\n                        ok = false;\n                    }\n                }\n                break;\n            default:\n                // Should never happen.\n                throw new IllegalArgumentException();\n            }",
      "info" : "SwitchStatement[62986-63793]:SwitchStatement[62955-63762]"
    }, {
      "left" : "case INCREASING:",
      "right" : "case INCREASING:",
      "info" : "SwitchCase[63013-63029]:SwitchCase[62982-62998]"
    }, {
      "left" : "if (strict)",
      "right" : "if (strict)",
      "info" : "IfStatement[63046-63309]:IfStatement[63015-63278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63058-63181]:Block[63027-63150]"
    }, {
      "left" : "if (val[i] <= previous)",
      "right" : "if (val[i] <= previous)",
      "info" : "IfStatement[63080-63163]:IfStatement[63049-63132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63104-63163]:Block[63073-63132]"
    }, {
      "left" : "ok = false;",
      "right" : "ok = false;",
      "info" : "ExpressionStatement[63130-63141]:ExpressionStatement[63099-63110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63187-63309]:Block[63156-63278]"
    }, {
      "left" : "if (val[i] < previous)",
      "right" : "if (val[i] < previous)",
      "info" : "IfStatement[63209-63291]:IfStatement[63178-63260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63232-63291]:Block[63201-63260]"
    }, {
      "left" : "ok = false;",
      "right" : "ok = false;",
      "info" : "ExpressionStatement[63258-63269]:ExpressionStatement[63227-63238]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[63326-63332]:BreakStatement[63295-63301]"
    }, {
      "left" : "case DECREASING:",
      "right" : "case DECREASING:",
      "info" : "SwitchCase[63345-63361]:SwitchCase[63314-63330]"
    }, {
      "left" : "if (strict)",
      "right" : "if (strict)",
      "info" : "IfStatement[63378-63641]:IfStatement[63347-63610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63390-63513]:Block[63359-63482]"
    }, {
      "left" : "if (val[i] >= previous)",
      "right" : "if (val[i] >= previous)",
      "info" : "IfStatement[63412-63495]:IfStatement[63381-63464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63436-63495]:Block[63405-63464]"
    }, {
      "left" : "ok = false;",
      "right" : "ok = false;",
      "info" : "ExpressionStatement[63462-63473]:ExpressionStatement[63431-63442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63519-63641]:Block[63488-63610]"
    }, {
      "left" : "if (val[i] > previous)",
      "right" : "if (val[i] > previous)",
      "info" : "IfStatement[63541-63623]:IfStatement[63510-63592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63564-63623]:Block[63533-63592]"
    }, {
      "left" : "ok = false;",
      "right" : "ok = false;",
      "info" : "ExpressionStatement[63590-63601]:ExpressionStatement[63559-63570]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[63658-63664]:BreakStatement[63627-63633]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[63677-63685]:SwitchCase[63646-63654]"
    }, {
      "left" : "throw new IllegalArgumentException();",
      "right" : "throw new IllegalArgumentException();",
      "info" : "ThrowStatement[63742-63779]:ThrowStatement[63711-63748]"
    }, {
      "left" : "if (!ok)",
      "right" : "if (!ok)",
      "info" : "IfStatement[63807-63923]:IfStatement[63776-63892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63816-63923]:Block[63785-63892]"
    }, {
      "left" : "throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);",
      "right" : "throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);",
      "info" : "ThrowStatement[63834-63909]:ThrowStatement[63803-63878]"
    }, {
      "left" : "previous = val[i];",
      "right" : "previous = val[i];",
      "info" : "ExpressionStatement[63936-63954]:ExpressionStatement[63905-63923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64218-64283]:Block[64187-64252]"
    }, {
      "left" : "checkOrder(val, OrderDirection.INCREASING, true);",
      "right" : "checkOrder(val, OrderDirection.INCREASING, true);",
      "info" : "ExpressionStatement[64228-64277]:ExpressionStatement[64197-64246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67607-69066]:Block[67576-69035]"
    }, {
      "left" : "double rdwarf = 3.834e-20;",
      "right" : "double rdwarf = 3.834e-20;",
      "info" : "VariableDeclarationStatement[67613-67639]:VariableDeclarationStatement[67582-67608]"
    }, {
      "left" : "double rgiant = 1.304e+19;",
      "right" : "double rgiant = 1.304e+19;",
      "info" : "VariableDeclarationStatement[67644-67670]:VariableDeclarationStatement[67613-67639]"
    }, {
      "left" : "double s1=0.0;",
      "right" : "double s1=0.0;",
      "info" : "VariableDeclarationStatement[67675-67689]:VariableDeclarationStatement[67644-67658]"
    }, {
      "left" : "double s2=0.0;",
      "right" : "double s2=0.0;",
      "info" : "VariableDeclarationStatement[67694-67708]:VariableDeclarationStatement[67663-67677]"
    }, {
      "left" : "double s3=0.0;",
      "right" : "double s3=0.0;",
      "info" : "VariableDeclarationStatement[67713-67727]:VariableDeclarationStatement[67682-67696]"
    }, {
      "left" : "double x1max = 0.0;",
      "right" : "double x1max = 0.0;",
      "info" : "VariableDeclarationStatement[67732-67751]:VariableDeclarationStatement[67701-67720]"
    }, {
      "left" : "double x3max = 0.0;",
      "right" : "double x3max = 0.0;",
      "info" : "VariableDeclarationStatement[67756-67775]:VariableDeclarationStatement[67725-67744]"
    }, {
      "left" : "double floatn = (double)v.length;",
      "right" : "double floatn = (double)v.length;",
      "info" : "VariableDeclarationStatement[67780-67813]:VariableDeclarationStatement[67749-67782]"
    }, {
      "left" : "double agiant = rgiant/floatn;",
      "right" : "double agiant = rgiant/floatn;",
      "info" : "VariableDeclarationStatement[67818-67848]:VariableDeclarationStatement[67787-67817]"
    }, {
      "left" : "for (int i=0;i<v.length;i++)",
      "right" : "for (int i=0;i<v.length;i++)",
      "info" : "ForStatement[67853-68654]:ForStatement[67822-68623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67882-68654]:Block[67851-68623]"
    }, {
      "left" : "double xabs = Math.abs(v[i]);",
      "right" : "double xabs = Math.abs(v[i]);",
      "info" : "VariableDeclarationStatement[67892-67921]:VariableDeclarationStatement[67861-67890]"
    }, {
      "left" : "if (xabs<rdwarf || xabs>agiant)",
      "right" : "if (xabs<rdwarf || xabs>agiant)",
      "info" : "IfStatement[67930-68648]:IfStatement[67899-68617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67962-68607]:Block[67931-68576]"
    }, {
      "left" : "if (xabs>rdwarf)",
      "right" : "if (xabs>rdwarf)",
      "info" : "IfStatement[67976-68597]:IfStatement[67945-68566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67993-68263]:Block[67962-68232]"
    }, {
      "left" : "if (xabs>x1max)",
      "right" : "if (xabs>x1max)",
      "info" : "IfStatement[68011-68249]:IfStatement[67980-68218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68027-68154]:Block[67996-68123]"
    }, {
      "left" : "double r=x1max/xabs;",
      "right" : "double r=x1max/xabs;",
      "info" : "VariableDeclarationStatement[68049-68069]:VariableDeclarationStatement[68018-68038]"
    }, {
      "left" : "s1=1.0+s1*r*r;",
      "right" : "s1=1.0+s1*r*r;",
      "info" : "ExpressionStatement[68090-68104]:ExpressionStatement[68059-68073]"
    }, {
      "left" : "x1max=xabs;",
      "right" : "x1max=xabs;",
      "info" : "ExpressionStatement[68125-68136]:ExpressionStatement[68094-68105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68160-68249]:Block[68129-68218]"
    }, {
      "left" : "double r=xabs/x1max;",
      "right" : "double r=xabs/x1max;",
      "info" : "VariableDeclarationStatement[68182-68202]:VariableDeclarationStatement[68151-68171]"
    }, {
      "left" : "s1+=r*r;",
      "right" : "s1+=r*r;",
      "info" : "ExpressionStatement[68223-68231]:ExpressionStatement[68192-68200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68269-68597]:Block[68238-68566]"
    }, {
      "left" : "if (xabs>x3max)",
      "right" : "if (xabs>x3max)",
      "info" : "IfStatement[68287-68583]:IfStatement[68256-68552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68303-68421]:Block[68272-68390]"
    }, {
      "left" : "double r=x3max/xabs;",
      "right" : "double r=x3max/xabs;",
      "info" : "VariableDeclarationStatement[68322-68342]:VariableDeclarationStatement[68291-68311]"
    }, {
      "left" : "s3=1.0+s3*r*r;",
      "right" : "s3=1.0+s3*r*r;",
      "info" : "ExpressionStatement[68360-68374]:ExpressionStatement[68329-68343]"
    }, {
      "left" : "x3max=xabs;",
      "right" : "x3max=xabs;",
      "info" : "ExpressionStatement[68392-68403]:ExpressionStatement[68361-68372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68427-68583]:Block[68396-68552]"
    }, {
      "left" : "if (xabs!=0.0)",
      "right" : "if (xabs!=0.0)",
      "info" : "IfStatement[68449-68565]:IfStatement[68418-68534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68464-68565]:Block[68433-68534]"
    }, {
      "left" : "double r=xabs/x3max;",
      "right" : "double r=xabs/x3max;",
      "info" : "VariableDeclarationStatement[68490-68510]:VariableDeclarationStatement[68459-68479]"
    }, {
      "left" : "s3+=r*r;",
      "right" : "s3+=r*r;",
      "info" : "ExpressionStatement[68535-68543]:ExpressionStatement[68504-68512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68613-68648]:Block[68582-68617]"
    }, {
      "left" : "s2+=xabs*xabs;",
      "right" : "s2+=xabs*xabs;",
      "info" : "ExpressionStatement[68624-68638]:ExpressionStatement[68593-68607]"
    }, {
      "left" : "double norm;",
      "right" : "double norm;",
      "info" : "VariableDeclarationStatement[68659-68671]:VariableDeclarationStatement[68628-68640]"
    }, {
      "left" : "if (s1!=0.0)",
      "right" : "if (s1!=0.0)",
      "info" : "IfStatement[68676-69047]:IfStatement[68645-69016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68689-68749]:Block[68658-68718]"
    }, {
      "left" : "norm = x1max*Math.sqrt(s1+(s2/x1max)/x1max);",
      "right" : "norm = x1max*Math.sqrt(s1+(s2/x1max)/x1max);",
      "info" : "ExpressionStatement[68699-68743]:ExpressionStatement[68668-68712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68755-69047]:Block[68724-69016]"
    }, {
      "left" : "if (s2==0.0)",
      "right" : "if (s2==0.0)",
      "info" : "IfStatement[68765-69041]:IfStatement[68734-69010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68778-68829]:Block[68747-68798]"
    }, {
      "left" : "norm = x3max*Math.sqrt(s3);",
      "right" : "norm = x3max*Math.sqrt(s3);",
      "info" : "ExpressionStatement[68792-68819]:ExpressionStatement[68761-68788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68835-69041]:Block[68804-69010]"
    }, {
      "left" : "if (s2>=x3max)",
      "right" : "if (s2>=x3max)",
      "info" : "IfStatement[68849-69031]:IfStatement[68818-69000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68864-68945]:Block[68833-68914]"
    }, {
      "left" : "norm = Math.sqrt(s2*(1.0+(x3max/s2)*(x3max*s3)));",
      "right" : "norm = Math.sqrt(s2*(1.0+(x3max/s2)*(x3max*s3)));",
      "info" : "ExpressionStatement[68882-68931]:ExpressionStatement[68851-68900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68951-69031]:Block[68920-69000]"
    }, {
      "left" : "norm = Math.sqrt(x3max*((s2/x3max)+(x3max*s3)));",
      "right" : "norm = Math.sqrt(x3max*((s2/x3max)+(x3max*s3)));",
      "info" : "ExpressionStatement[68969-69017]:ExpressionStatement[68938-68986]"
    }, {
      "left" : "return norm;",
      "right" : "return norm;",
      "info" : "ReturnStatement[69052-69064]:ReturnStatement[69021-69033]"
    } ]
  },
  "interFileMappings" : { }
}