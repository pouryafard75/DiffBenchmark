{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private final JsDocTokenStream stream;",
      "right" : "private final JsDocTokenStream stream;",
      "info" : "FieldDeclaration[1667-1705]:FieldDeclaration[1667-1705]"
    }, {
      "left" : "private final JSDocInfoBuilder jsdocBuilder;",
      "right" : "private final JSDocInfoBuilder jsdocBuilder;",
      "info" : "FieldDeclaration[1708-1752]:FieldDeclaration[1708-1752]"
    }, {
      "left" : "private final String sourceName;",
      "right" : "private final String sourceName;",
      "info" : "FieldDeclaration[1755-1787]:FieldDeclaration[1755-1787]"
    }, {
      "left" : "private final ErrorReporter errorReporter;",
      "right" : "private final ErrorReporter errorReporter;",
      "info" : "FieldDeclaration[1790-1832]:FieldDeclaration[1790-1832]"
    }, {
      "left" : "private final ErrorReporterParser parser = new ErrorReporterParser();",
      "right" : "private final ErrorReporterParser parser = new ErrorReporterParser();",
      "info" : "FieldDeclaration[1835-1904]:FieldDeclaration[1835-1904]"
    }, {
      "left" : "private final Node templateNode;",
      "right" : "private final Node templateNode;",
      "info" : "FieldDeclaration[2049-2081]:FieldDeclaration[2049-2081]"
    }, {
      "left" : "ErrorReporterParser",
      "right" : "ErrorReporterParser",
      "info" : "TypeDeclaration[2085-3055]:TypeDeclaration[2085-3055]"
    }, {
      "left" : "void addParserWarning(String messageId, String messageArg, int lineno,\n        int charno)",
      "right" : "void addParserWarning(String messageId, String messageArg, int lineno,\n        int charno)",
      "info" : "MethodDeclaration[2125-2346]:MethodDeclaration[2125-2346]"
    }, {
      "left" : "void addParserWarning(String messageId, int lineno, int charno)",
      "right" : "void addParserWarning(String messageId, int lineno, int charno)",
      "info" : "MethodDeclaration[2352-2534]:MethodDeclaration[2352-2534]"
    }, {
      "left" : "void addTypeWarning(String messageId, String messageArg, int lineno,\n                    int charno)",
      "right" : "void addTypeWarning(String messageId, String messageArg, int lineno,\n                    int charno)",
      "info" : "MethodDeclaration[2540-2818]:MethodDeclaration[2540-2818]"
    }, {
      "left" : "void addTypeWarning(String messageId, int lineno, int charno)",
      "right" : "void addTypeWarning(String messageId, int lineno, int charno)",
      "info" : "MethodDeclaration[2824-3051]:MethodDeclaration[2824-3051]"
    }, {
      "left" : "private JSDocInfo fileOverviewJSDocInfo = null;",
      "right" : "private JSDocInfo fileOverviewJSDocInfo = null;",
      "info" : "FieldDeclaration[3122-3169]:FieldDeclaration[3122-3169]"
    }, {
      "left" : "private State state;",
      "right" : "private State state;",
      "info" : "FieldDeclaration[3172-3192]:FieldDeclaration[3172-3192]"
    }, {
      "left" : "private final Map<String, Annotation> annotationNames;",
      "right" : "private final Map<String, Annotation> annotationNames;",
      "info" : "FieldDeclaration[3196-3250]:FieldDeclaration[3196-3250]"
    }, {
      "left" : "private final Set<String> suppressionNames;",
      "right" : "private final Set<String> suppressionNames;",
      "info" : "FieldDeclaration[3253-3296]:FieldDeclaration[3253-3296]"
    }, {
      "left" : "static private final Set<String> modifiesAnnotationKeywords =\n      ImmutableSet.<String>of(\"this\", \"arguments\");",
      "right" : "static private final Set<String> modifiesAnnotationKeywords =\n      ImmutableSet.<String>of(\"this\", \"arguments\");",
      "info" : "FieldDeclaration[3299-3412]:FieldDeclaration[3299-3412]"
    }, {
      "left" : "private Node.FileLevelJsDocBuilder fileLevelJsDocBuilder;",
      "right" : "private Node.FileLevelJsDocBuilder fileLevelJsDocBuilder;",
      "info" : "FieldDeclaration[3416-3473]:FieldDeclaration[3416-3473]"
    }, {
      "left" : "void setFileLevelJsDocBuilder(\n      Node.FileLevelJsDocBuilder fileLevelJsDocBuilder)",
      "right" : "void setFileLevelJsDocBuilder(\n      Node.FileLevelJsDocBuilder fileLevelJsDocBuilder)",
      "info" : "MethodDeclaration[3477-3855]:MethodDeclaration[3477-3855]"
    }, {
      "left" : "void setFileOverviewJSDocInfo(JSDocInfo fileOverviewJSDocInfo)",
      "right" : "void setFileOverviewJSDocInfo(JSDocInfo fileOverviewJSDocInfo)",
      "info" : "MethodDeclaration[3859-4112]:MethodDeclaration[3859-4112]"
    }, {
      "left" : "enum : State",
      "right" : "enum : State",
      "info" : "EnumDeclaration[4116-4212]:EnumDeclaration[4116-4212]"
    }, {
      "left" : "JsDocInfoParser(JsDocTokenStream stream,\n                  Comment commentNode,\n                  String sourceName,\n                  Config config,\n                  ErrorReporter errorReporter)",
      "right" : "JsDocInfoParser(JsDocTokenStream stream,\n                  Comment commentNode,\n                  String sourceName,\n                  Config config,\n                  ErrorReporter errorReporter)",
      "info" : "MethodDeclaration[4216-4866]:MethodDeclaration[4216-4866]"
    }, {
      "left" : "public static Node parseTypeString(String typeString)",
      "right" : "public static Node parseTypeString(String typeString)",
      "info" : "MethodDeclaration[4870-5495]:MethodDeclaration[4870-5495]"
    }, {
      "left" : "private void checkExtendedTypes(List<ExtendedTypeInfo> extendedTypes)",
      "right" : "private void checkExtendedTypes(List<ExtendedTypeInfo> extendedTypes)",
      "info" : "MethodDeclaration[34877-35515]:MethodDeclaration[34877-35515]"
    }, {
      "left" : "private JsDocToken parseSuppressTag(JsDocToken token)",
      "right" : "private JsDocToken parseSuppressTag(JsDocToken token)",
      "info" : "MethodDeclaration[35519-36879]:MethodDeclaration[35519-36879]"
    }, {
      "left" : "private JsDocToken parseModifiesTag(JsDocToken token)",
      "right" : "private JsDocToken parseModifiesTag(JsDocToken token)",
      "info" : "MethodDeclaration[36883-38294]:MethodDeclaration[36883-38294]"
    }, {
      "left" : "private Node parseAndRecordTypeNode(JsDocToken token)",
      "right" : "private Node parseAndRecordTypeNode(JsDocToken token)",
      "info" : "MethodDeclaration[38298-38656]:MethodDeclaration[38298-38656]"
    }, {
      "left" : "private Node parseAndRecordTypeNode(JsDocToken token, boolean matchingLC)",
      "right" : "private Node parseAndRecordTypeNode(JsDocToken token, boolean matchingLC)",
      "info" : "MethodDeclaration[38660-39151]:MethodDeclaration[38660-39151]"
    }, {
      "left" : "private Node parseAndRecordTypeNode(JsDocToken token, int lineno,\n      int startCharno)",
      "right" : "private Node parseAndRecordTypeNode(JsDocToken token, int lineno,\n      int startCharno)",
      "info" : "MethodDeclaration[39155-39716]:MethodDeclaration[39155-39716]"
    }, {
      "left" : "private Node parseAndRecordTypeNameNode(JsDocToken token, int lineno,\n                                          int startCharno, boolean matchingLC)",
      "right" : "private Node parseAndRecordTypeNameNode(JsDocToken token, int lineno,\n                                          int startCharno, boolean matchingLC)",
      "info" : "MethodDeclaration[39720-40390]:MethodDeclaration[39720-40390]"
    }, {
      "left" : "private Node parseAndRecordParamTypeNode(JsDocToken token)",
      "right" : "private Node parseAndRecordParamTypeNode(JsDocToken token)",
      "info" : "MethodDeclaration[40394-41263]:MethodDeclaration[40394-41263]"
    }, {
      "left" : "private Node parseAndRecordTypeNode(JsDocToken token, int lineno,\n                                      int startCharno,\n                                      boolean matchingLC,\n                                      boolean onlyParseSimpleNames)",
      "right" : "private Node parseAndRecordTypeNode(JsDocToken token, int lineno,\n                                      int startCharno,\n                                      boolean matchingLC,\n                                      boolean onlyParseSimpleNames)",
      "info" : "MethodDeclaration[41267-42587]:MethodDeclaration[41267-42587]"
    }, {
      "left" : "private String toString(JsDocToken token)",
      "right" : "private String toString(JsDocToken token)",
      "info" : "MethodDeclaration[42591-43533]:MethodDeclaration[42591-43533]"
    }, {
      "left" : "private JSTypeExpression createJSTypeExpression(Node n)",
      "right" : "private JSTypeExpression createJSTypeExpression(Node n)",
      "info" : "MethodDeclaration[43537-43768]:MethodDeclaration[43537-43768]"
    }, {
      "left" : "ExtractionInfo",
      "right" : "ExtractionInfo",
      "info" : "TypeDeclaration[43772-44149]:TypeDeclaration[43772-44149]"
    }, {
      "left" : "private final String string;",
      "right" : "private final String string;",
      "info" : "FieldDeclaration[43959-43987]:FieldDeclaration[43959-43987]"
    }, {
      "left" : "private final JsDocToken token;",
      "right" : "private final JsDocToken token;",
      "info" : "FieldDeclaration[43992-44023]:FieldDeclaration[43992-44023]"
    }, {
      "left" : "public ExtractionInfo(String string, JsDocToken token)",
      "right" : "public ExtractionInfo(String string, JsDocToken token)",
      "info" : "MethodDeclaration[44029-44145]:MethodDeclaration[44029-44145]"
    }, {
      "left" : "ExtendedTypeInfo",
      "right" : "ExtendedTypeInfo",
      "info" : "TypeDeclaration[44153-44489]:TypeDeclaration[44153-44489]"
    }, {
      "left" : "final JSTypeExpression type;",
      "right" : "final JSTypeExpression type;",
      "info" : "FieldDeclaration[44249-44277]:FieldDeclaration[44249-44277]"
    }, {
      "left" : "final int lineno;",
      "right" : "final int lineno;",
      "info" : "FieldDeclaration[44282-44299]:FieldDeclaration[44282-44299]"
    }, {
      "left" : "final int charno;",
      "right" : "final int charno;",
      "info" : "FieldDeclaration[44304-44321]:FieldDeclaration[44304-44321]"
    }, {
      "left" : "public ExtendedTypeInfo(JSTypeExpression type, int lineno, int charno)",
      "right" : "public ExtendedTypeInfo(JSTypeExpression type, int lineno, int charno)",
      "info" : "MethodDeclaration[44327-44485]:MethodDeclaration[44327-44485]"
    }, {
      "left" : "private ExtractionInfo extractSingleLineBlock()",
      "right" : "private ExtractionInfo extractSingleLineBlock()",
      "info" : "MethodDeclaration[44493-45228]:MethodDeclaration[44493-45228]"
    }, {
      "left" : "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token)",
      "right" : "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token)",
      "info" : "MethodDeclaration[45232-45385]:MethodDeclaration[45232-45385]"
    }, {
      "left" : "enum : WhitespaceOption",
      "right" : "enum : WhitespaceOption",
      "info" : "EnumDeclaration[45389-45715]:EnumDeclaration[45389-45715]"
    }, {
      "left" : "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                      WhitespaceOption option)",
      "right" : "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                      WhitespaceOption option)",
      "info" : "MethodDeclaration[45719-48824]:MethodDeclaration[45719-48824]"
    }, {
      "left" : "private ExtractionInfo extractBlockComment(JsDocToken token)",
      "right" : "private ExtractionInfo extractBlockComment(JsDocToken token)",
      "info" : "MethodDeclaration[48829-50326]:MethodDeclaration[48829-50326]"
    }, {
      "left" : "private static String trimEnd(String s)",
      "right" : "private static String trimEnd(String s)",
      "info" : "MethodDeclaration[50330-51092]:MethodDeclaration[50330-51092]"
    }, {
      "left" : "private Node parseTypeExpressionAnnotation(JsDocToken token)",
      "right" : "private Node parseTypeExpressionAnnotation(JsDocToken token)",
      "info" : "MethodDeclaration[51512-52074]:MethodDeclaration[51512-52074]"
    }, {
      "left" : "private Node parseParamTypeExpressionAnnotation(JsDocToken token)",
      "right" : "private Node parseParamTypeExpressionAnnotation(JsDocToken token)",
      "info" : "MethodDeclaration[52078-53264]:MethodDeclaration[52078-53264]"
    }, {
      "left" : "private Node parseTypeNameAnnotation(JsDocToken token)",
      "right" : "private Node parseTypeNameAnnotation(JsDocToken token)",
      "info" : "MethodDeclaration[53268-53769]:MethodDeclaration[53268-53769]"
    }, {
      "left" : "private Node parseTopLevelTypeExpression(JsDocToken token)",
      "right" : "private Node parseTopLevelTypeExpression(JsDocToken token)",
      "info" : "MethodDeclaration[53773-54431]:MethodDeclaration[53773-54431]"
    }, {
      "left" : "private Node parseTypeExpressionList(JsDocToken token)",
      "right" : "private Node parseTypeExpressionList(JsDocToken token)",
      "info" : "MethodDeclaration[54435-55056]:MethodDeclaration[54435-55056]"
    }, {
      "left" : "private Node parseTypeExpression(JsDocToken token)",
      "right" : "private Node parseTypeExpression(JsDocToken token)",
      "info" : "MethodDeclaration[55060-56714]:MethodDeclaration[55060-56714]"
    }, {
      "left" : "private Node parseTypeName(JsDocToken token)",
      "right" : "private Node parseTypeName(JsDocToken token)",
      "info" : "MethodDeclaration[57691-58724]:MethodDeclaration[57720-58753]"
    }, {
      "left" : "// NOTE(nicksantos): The official ES4 grammar forces optional and rest\n  // arguments to come after the required arguments. Our parser does not\n  // enforce this. Instead we allow them anywhere in the function at parse-time,\n  // and then warn about them during type resolution.\n  //\n  // In theory, it might be mathematically nicer to do the order-checking here.\n  // But in practice, the order-checking for structural functions is exactly\n  // the same as the order-checking for @param annotations. And the latter\n  // has to happen during type resolution. Rather than duplicate the\n  // order-checking in two places, we just do all of it in type resolution.\n  private Node parseParametersType(JsDocToken token)",
      "right" : "// NOTE(nicksantos): The official ES4 grammar forces optional and rest\n  // arguments to come after the required arguments. Our parser does not\n  // enforce this. Instead we allow them anywhere in the function at parse-time,\n  // and then warn about them during type resolution.\n  //\n  // In theory, it might be mathematically nicer to do the order-checking here.\n  // But in practice, the order-checking for structural functions is exactly\n  // the same as the order-checking for @param annotations. And the latter\n  // has to happen during type resolution. Rather than duplicate the\n  // order-checking in two places, we just do all of it in type resolution.\n  private Node parseParametersType(JsDocToken token)",
      "info" : "MethodDeclaration[60779-63866]:MethodDeclaration[60839-63926]"
    }, {
      "left" : "private Node parseResultType(JsDocToken token)",
      "right" : "private Node parseResultType(JsDocToken token)",
      "info" : "MethodDeclaration[63870-64305]:MethodDeclaration[63930-64365]"
    }, {
      "left" : "private Node parseUnionType(JsDocToken token)",
      "right" : "private Node parseUnionType(JsDocToken token)",
      "info" : "MethodDeclaration[64309-64583]:MethodDeclaration[64369-64643]"
    }, {
      "left" : "private Node parseUnionTypeWithAlternate(JsDocToken token, Node alternate)",
      "right" : "private Node parseUnionTypeWithAlternate(JsDocToken token, Node alternate)",
      "info" : "MethodDeclaration[64587-65785]:MethodDeclaration[64647-65845]"
    }, {
      "left" : "private Node parseArrayType(JsDocToken token)",
      "right" : "private Node parseArrayType(JsDocToken token)",
      "info" : "MethodDeclaration[65789-66732]:MethodDeclaration[65849-66792]"
    }, {
      "left" : "private Node parseRecordType(JsDocToken token)",
      "right" : "private Node parseRecordType(JsDocToken token)",
      "info" : "MethodDeclaration[66736-67222]:MethodDeclaration[66796-67282]"
    }, {
      "left" : "private Node parseFieldTypeList(JsDocToken token)",
      "right" : "private Node parseFieldTypeList(JsDocToken token)",
      "info" : "MethodDeclaration[67226-67826]:MethodDeclaration[67286-67886]"
    }, {
      "left" : "private Node parseFieldType(JsDocToken token)",
      "right" : "private Node parseFieldType(JsDocToken token)",
      "info" : "MethodDeclaration[67830-68537]:MethodDeclaration[67890-68597]"
    }, {
      "left" : "private Node parseFieldName(JsDocToken token)",
      "right" : "private Node parseFieldName(JsDocToken token)",
      "info" : "MethodDeclaration[68541-68860]:MethodDeclaration[68601-68920]"
    }, {
      "left" : "private Node wrapNode(int type, Node n)",
      "right" : "private Node wrapNode(int type, Node n)",
      "info" : "MethodDeclaration[68864-69047]:MethodDeclaration[68924-69107]"
    }, {
      "left" : "private Node newNode(int type)",
      "right" : "private Node newNode(int type)",
      "info" : "MethodDeclaration[69051-69191]:MethodDeclaration[69111-69251]"
    }, {
      "left" : "private Node newStringNode(String s)",
      "right" : "private Node newStringNode(String s)",
      "info" : "MethodDeclaration[69195-69344]:MethodDeclaration[69255-69404]"
    }, {
      "left" : "private Node createTemplateNode()",
      "right" : "private Node createTemplateNode()",
      "info" : "MethodDeclaration[69466-69680]:MethodDeclaration[69526-69740]"
    }, {
      "left" : "private Node reportTypeSyntaxWarning(String warning)",
      "right" : "private Node reportTypeSyntaxWarning(String warning)",
      "info" : "MethodDeclaration[69684-69835]:MethodDeclaration[69744-69895]"
    }, {
      "left" : "private Node reportGenericTypeSyntaxWarning()",
      "right" : "private Node reportGenericTypeSyntaxWarning()",
      "info" : "MethodDeclaration[69839-69951]:MethodDeclaration[69899-70011]"
    }, {
      "left" : "private JsDocToken eatTokensUntilEOL()",
      "right" : "private JsDocToken eatTokensUntilEOL()",
      "info" : "MethodDeclaration[69955-70177]:MethodDeclaration[70015-70237]"
    }, {
      "left" : "private JsDocToken eatTokensUntilEOL(JsDocToken token)",
      "right" : "private JsDocToken eatTokensUntilEOL(JsDocToken token)",
      "info" : "MethodDeclaration[70181-70607]:MethodDeclaration[70241-70667]"
    }, {
      "left" : "private static final JsDocToken NO_UNREAD_TOKEN = null;",
      "right" : "private static final JsDocToken NO_UNREAD_TOKEN = null;",
      "info" : "FieldDeclaration[70611-70758]:FieldDeclaration[70671-70818]"
    }, {
      "left" : "private JsDocToken unreadToken = NO_UNREAD_TOKEN;",
      "right" : "private JsDocToken unreadToken = NO_UNREAD_TOKEN;",
      "info" : "FieldDeclaration[70762-70846]:FieldDeclaration[70822-70906]"
    }, {
      "left" : "private void restoreLookAhead(JsDocToken token)",
      "right" : "private void restoreLookAhead(JsDocToken token)",
      "info" : "MethodDeclaration[70850-70986]:MethodDeclaration[70910-71046]"
    }, {
      "left" : "private boolean match(JsDocToken token)",
      "right" : "private boolean match(JsDocToken token)",
      "info" : "MethodDeclaration[70990-71194]:MethodDeclaration[71050-71254]"
    }, {
      "left" : "private boolean match(JsDocToken token1, JsDocToken token2)",
      "right" : "private boolean match(JsDocToken token1, JsDocToken token2)",
      "info" : "MethodDeclaration[71198-71454]:MethodDeclaration[71258-71514]"
    }, {
      "left" : "private JsDocToken next()",
      "right" : "private JsDocToken next()",
      "info" : "MethodDeclaration[71458-71730]:MethodDeclaration[71518-71790]"
    }, {
      "left" : "private JsDocToken current()",
      "right" : "private JsDocToken current()",
      "info" : "MethodDeclaration[71734-71922]:MethodDeclaration[71794-71982]"
    }, {
      "left" : "private void skipEOLs()",
      "right" : "private void skipEOLs()",
      "info" : "MethodDeclaration[71926-72211]:MethodDeclaration[71986-72271]"
    }, {
      "left" : "private boolean hasParsedFileOverviewDocInfo()",
      "right" : "private boolean hasParsedFileOverviewDocInfo()",
      "info" : "MethodDeclaration[72215-72431]:MethodDeclaration[72275-72491]"
    }, {
      "left" : "boolean hasParsedJSDocInfo()",
      "right" : "boolean hasParsedJSDocInfo()",
      "info" : "MethodDeclaration[72435-72508]:MethodDeclaration[72495-72568]"
    }, {
      "left" : "JSDocInfo retrieveAndResetParsedJSDocInfo()",
      "right" : "JSDocInfo retrieveAndResetParsedJSDocInfo()",
      "info" : "MethodDeclaration[72512-72604]:MethodDeclaration[72572-72664]"
    }, {
      "left" : "JSDocInfo getFileOverviewJSDocInfo()",
      "right" : "JSDocInfo getFileOverviewJSDocInfo()",
      "info" : "MethodDeclaration[72608-72742]:MethodDeclaration[72668-72802]"
    }, {
      "left" : "private boolean lookAheadForTypeAnnotation()",
      "right" : "private boolean lookAheadForTypeAnnotation()",
      "info" : "MethodDeclaration[72746-73436]:MethodDeclaration[72806-73496]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2216-2346]:Block[2216-2346]"
    }, {
      "left" : "errorReporter.warning(ScriptRuntime.getMessage1(messageId, messageArg),\n          sourceName, lineno, null, charno);",
      "right" : "errorReporter.warning(ScriptRuntime.getMessage1(messageId, messageArg),\n          sourceName, lineno, null, charno);",
      "info" : "ExpressionStatement[2224-2340]:ExpressionStatement[2224-2340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2416-2534]:Block[2416-2534]"
    }, {
      "left" : "errorReporter.warning(ScriptRuntime.getMessage0(messageId),\n          sourceName, lineno, null, charno);",
      "right" : "errorReporter.warning(ScriptRuntime.getMessage0(messageId),\n          sourceName, lineno, null, charno);",
      "info" : "ExpressionStatement[2424-2528]:ExpressionStatement[2424-2528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2641-2818]:Block[2641-2818]"
    }, {
      "left" : "errorReporter.warning(\n          \"Bad type annotation. \" +\n          ScriptRuntime.getMessage1(messageId, messageArg),\n          sourceName, lineno, null, charno);",
      "right" : "errorReporter.warning(\n          \"Bad type annotation. \" +\n          ScriptRuntime.getMessage1(messageId, messageArg),\n          sourceName, lineno, null, charno);",
      "info" : "ExpressionStatement[2649-2812]:ExpressionStatement[2649-2812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2886-3051]:Block[2886-3051]"
    }, {
      "left" : "errorReporter.warning(\n          \"Bad type annotation. \" +\n          ScriptRuntime.getMessage0(messageId),\n          sourceName, lineno, null, charno);",
      "right" : "errorReporter.warning(\n          \"Bad type annotation. \" +\n          ScriptRuntime.getMessage0(messageId),\n          sourceName, lineno, null, charno);",
      "info" : "ExpressionStatement[2894-3045]:ExpressionStatement[2894-3045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3794-3855]:Block[3794-3855]"
    }, {
      "left" : "this.fileLevelJsDocBuilder = fileLevelJsDocBuilder;",
      "right" : "this.fileLevelJsDocBuilder = fileLevelJsDocBuilder;",
      "info" : "ExpressionStatement[3800-3851]:ExpressionStatement[3800-3851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4051-4112]:Block[4051-4112]"
    }, {
      "left" : "this.fileOverviewJSDocInfo = fileOverviewJSDocInfo;",
      "right" : "this.fileOverviewJSDocInfo = fileOverviewJSDocInfo;",
      "info" : "ExpressionStatement[4057-4108]:ExpressionStatement[4057-4108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4413-4866]:Block[4413-4866]"
    }, {
      "left" : "this.stream = stream;",
      "right" : "this.stream = stream;",
      "info" : "ExpressionStatement[4419-4440]:ExpressionStatement[4419-4440]"
    }, {
      "left" : "this.sourceName = sourceName;",
      "right" : "this.sourceName = sourceName;",
      "info" : "ExpressionStatement[4445-4474]:ExpressionStatement[4445-4474]"
    }, {
      "left" : "this.jsdocBuilder = new JSDocInfoBuilder(config.parseJsDocDocumentation);",
      "right" : "this.jsdocBuilder = new JSDocInfoBuilder(config.parseJsDocDocumentation);",
      "info" : "ExpressionStatement[4479-4552]:ExpressionStatement[4479-4552]"
    }, {
      "left" : "if (commentNode != null)",
      "right" : "if (commentNode != null)",
      "info" : "IfStatement[4557-4666]:IfStatement[4557-4666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4582-4666]:Block[4582-4666]"
    }, {
      "left" : "this.jsdocBuilder.recordOriginalCommentString(commentNode.getValue());",
      "right" : "this.jsdocBuilder.recordOriginalCommentString(commentNode.getValue());",
      "info" : "ExpressionStatement[4590-4660]:ExpressionStatement[4590-4660]"
    }, {
      "left" : "this.annotationNames = config.annotationNames;",
      "right" : "this.annotationNames = config.annotationNames;",
      "info" : "ExpressionStatement[4671-4717]:ExpressionStatement[4671-4717]"
    }, {
      "left" : "this.suppressionNames = config.suppressionNames;",
      "right" : "this.suppressionNames = config.suppressionNames;",
      "info" : "ExpressionStatement[4722-4770]:ExpressionStatement[4722-4770]"
    }, {
      "left" : "this.errorReporter = errorReporter;",
      "right" : "this.errorReporter = errorReporter;",
      "info" : "ExpressionStatement[4776-4811]:ExpressionStatement[4776-4811]"
    }, {
      "left" : "this.templateNode = this.createTemplateNode();",
      "right" : "this.templateNode = this.createTemplateNode();",
      "info" : "ExpressionStatement[4816-4862]:ExpressionStatement[4816-4862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5073-5495]:Block[5073-5495]"
    }, {
      "left" : "Config config = new Config(\n        Sets.<String>newHashSet(),\n        Sets.<String>newHashSet(),\n        false,\n        LanguageMode.ECMASCRIPT3,\n        false);",
      "right" : "Config config = new Config(\n        Sets.<String>newHashSet(),\n        Sets.<String>newHashSet(),\n        false,\n        LanguageMode.ECMASCRIPT3,\n        false);",
      "info" : "VariableDeclarationStatement[5079-5241]:VariableDeclarationStatement[5079-5241]"
    }, {
      "left" : "JsDocInfoParser parser = new JsDocInfoParser(\n        new JsDocTokenStream(typeString),\n        null,\n        \"typeparsing\",\n        config,\n        NullErrorReporter.forNewRhino());",
      "right" : "JsDocInfoParser parser = new JsDocInfoParser(\n        new JsDocTokenStream(typeString),\n        null,\n        \"typeparsing\",\n        config,\n        NullErrorReporter.forNewRhino());",
      "info" : "VariableDeclarationStatement[5246-5428]:VariableDeclarationStatement[5246-5428]"
    }, {
      "left" : "return parser.parseTopLevelTypeExpression(parser.next());",
      "right" : "return parser.parseTopLevelTypeExpression(parser.next());",
      "info" : "ReturnStatement[5434-5491]:ReturnStatement[5434-5491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34947-35515]:Block[34947-35515]"
    }, {
      "left" : "for (ExtendedTypeInfo typeInfo : extendedTypes)",
      "right" : "for (ExtendedTypeInfo typeInfo : extendedTypes)",
      "info" : "EnhancedForStatement[34953-35511]:EnhancedForStatement[34953-35511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35001-35511]:Block[35001-35511]"
    }, {
      "left" : "if (jsdocBuilder.isInterfaceRecorded())",
      "right" : "if (jsdocBuilder.isInterfaceRecorded())",
      "info" : "IfStatement[35072-35505]:IfStatement[35072-35505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35112-35313]:Block[35112-35313]"
    }, {
      "left" : "if (!jsdocBuilder.recordExtendedInterface(typeInfo.type))",
      "right" : "if (!jsdocBuilder.recordExtendedInterface(typeInfo.type))",
      "info" : "IfStatement[35122-35305]:IfStatement[35122-35305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35180-35305]:Block[35180-35305]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.extends.duplicate\",\n              typeInfo.lineno, typeInfo.charno);",
      "right" : "parser.addParserWarning(\"msg.jsdoc.extends.duplicate\",\n              typeInfo.lineno, typeInfo.charno);",
      "info" : "ExpressionStatement[35192-35295]:ExpressionStatement[35192-35295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35319-35505]:Block[35319-35505]"
    }, {
      "left" : "if (!jsdocBuilder.recordBaseType(typeInfo.type))",
      "right" : "if (!jsdocBuilder.recordBaseType(typeInfo.type))",
      "info" : "IfStatement[35329-35497]:IfStatement[35329-35497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35378-35497]:Block[35378-35497]"
    }, {
      "left" : "parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n              typeInfo.lineno, typeInfo.charno);",
      "right" : "parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n              typeInfo.lineno, typeInfo.charno);",
      "info" : "ExpressionStatement[35390-35487]:ExpressionStatement[35390-35487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35727-36879]:Block[35727-36879]"
    }, {
      "left" : "if (token == JsDocToken.LC)",
      "right" : "if (token == JsDocToken.LC)",
      "info" : "IfStatement[35733-36857]:IfStatement[35733-36857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35761-36857]:Block[35761-36857]"
    }, {
      "left" : "Set<String> suppressions = new HashSet<String>();",
      "right" : "Set<String> suppressions = new HashSet<String>();",
      "info" : "VariableDeclarationStatement[35769-35818]:VariableDeclarationStatement[35769-35818]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[35825-36468]:WhileStatement[35825-36468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35838-36468]:Block[35838-36468]"
    }, {
      "left" : "if (match(JsDocToken.STRING))",
      "right" : "if (match(JsDocToken.STRING))",
      "info" : "IfStatement[35848-36351]:IfStatement[35848-36351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35878-36199]:Block[35878-36199]"
    }, {
      "left" : "String name = stream.getString();",
      "right" : "String name = stream.getString();",
      "info" : "VariableDeclarationStatement[35890-35923]:VariableDeclarationStatement[35890-35923]"
    }, {
      "left" : "if (!suppressionNames.contains(name))",
      "right" : "if (!suppressionNames.contains(name))",
      "info" : "IfStatement[35934-36114]:IfStatement[35934-36114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35972-36114]:Block[35972-36114]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.suppress.unknown\", name,\n                stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.suppress.unknown\", name,\n                stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[35986-36102]:ExpressionStatement[35986-36102]"
    }, {
      "left" : "suppressions.add(stream.getString());",
      "right" : "suppressions.add(stream.getString());",
      "info" : "ExpressionStatement[36126-36163]:ExpressionStatement[36126-36163]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[36174-36189]:ExpressionStatement[36174-36189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36205-36351]:Block[36205-36351]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.suppress\",\n              stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.suppress\",\n              stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[36217-36317]:ExpressionStatement[36217-36317]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[36328-36341]:ReturnStatement[36328-36341]"
    }, {
      "left" : "if (match(JsDocToken.PIPE))",
      "right" : "if (match(JsDocToken.PIPE))",
      "info" : "IfStatement[36361-36460]:IfStatement[36361-36460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36389-36426]:Block[36389-36426]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[36401-36416]:ExpressionStatement[36401-36416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36432-36460]:Block[36432-36460]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[36444-36450]:BreakStatement[36444-36450]"
    }, {
      "left" : "if (!match(JsDocToken.RC))",
      "right" : "if (!match(JsDocToken.RC))",
      "info" : "IfStatement[36476-36851]:IfStatement[36476-36851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36503-36619]:Block[36503-36619]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.suppress\",\n            stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.suppress\",\n            stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[36513-36611]:ExpressionStatement[36513-36611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36625-36851]:Block[36625-36851]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[36635-36650]:ExpressionStatement[36635-36650]"
    }, {
      "left" : "if (!jsdocBuilder.recordSuppressions(suppressions))",
      "right" : "if (!jsdocBuilder.recordSuppressions(suppressions))",
      "info" : "IfStatement[36659-36843]:IfStatement[36659-36843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36711-36843]:Block[36711-36843]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.suppress.duplicate\",\n              stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.suppress.duplicate\",\n              stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[36723-36833]:ExpressionStatement[36723-36833]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[36862-36875]:ReturnStatement[36862-36875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37094-38294]:Block[37094-38294]"
    }, {
      "left" : "if (token == JsDocToken.LC)",
      "right" : "if (token == JsDocToken.LC)",
      "info" : "IfStatement[37100-38272]:IfStatement[37100-38272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37128-38272]:Block[37128-38272]"
    }, {
      "left" : "Set<String> modifies = new HashSet<String>();",
      "right" : "Set<String> modifies = new HashSet<String>();",
      "info" : "VariableDeclarationStatement[37136-37181]:VariableDeclarationStatement[37136-37181]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[37188-37891]:WhileStatement[37188-37891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37201-37891]:Block[37201-37891]"
    }, {
      "left" : "if (match(JsDocToken.STRING))",
      "right" : "if (match(JsDocToken.STRING))",
      "info" : "IfStatement[37211-37774]:IfStatement[37211-37774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37241-37622]:Block[37241-37622]"
    }, {
      "left" : "String name = stream.getString();",
      "right" : "String name = stream.getString();",
      "info" : "VariableDeclarationStatement[37253-37286]:VariableDeclarationStatement[37253-37286]"
    }, {
      "left" : "if (!modifiesAnnotationKeywords.contains(name)\n              && !jsdocBuilder.hasParameter(name))",
      "right" : "if (!modifiesAnnotationKeywords.contains(name)\n              && !jsdocBuilder.hasParameter(name))",
      "info" : "IfStatement[37297-37541]:IfStatement[37297-37541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37395-37541]:Block[37395-37541]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.modifies.unknown\", name,\n                  stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.modifies.unknown\", name,\n                  stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[37411-37529]:ExpressionStatement[37411-37529]"
    }, {
      "left" : "modifies.add(stream.getString());",
      "right" : "modifies.add(stream.getString());",
      "info" : "ExpressionStatement[37553-37586]:ExpressionStatement[37553-37586]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[37597-37612]:ExpressionStatement[37597-37612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37628-37774]:Block[37628-37774]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.modifies\",\n              stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.modifies\",\n              stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[37640-37740]:ExpressionStatement[37640-37740]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[37751-37764]:ReturnStatement[37751-37764]"
    }, {
      "left" : "if (match(JsDocToken.PIPE))",
      "right" : "if (match(JsDocToken.PIPE))",
      "info" : "IfStatement[37784-37883]:IfStatement[37784-37883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37812-37849]:Block[37812-37849]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[37824-37839]:ExpressionStatement[37824-37839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37855-37883]:Block[37855-37883]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[37867-37873]:BreakStatement[37867-37873]"
    }, {
      "left" : "if (!match(JsDocToken.RC))",
      "right" : "if (!match(JsDocToken.RC))",
      "info" : "IfStatement[37899-38266]:IfStatement[37899-38266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37926-38042]:Block[37926-38042]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.modifies\",\n            stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.modifies\",\n            stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[37936-38034]:ExpressionStatement[37936-38034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38048-38266]:Block[38048-38266]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[38058-38073]:ExpressionStatement[38058-38073]"
    }, {
      "left" : "if (!jsdocBuilder.recordModifies(modifies))",
      "right" : "if (!jsdocBuilder.recordModifies(modifies))",
      "info" : "IfStatement[38082-38258]:IfStatement[38082-38258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38126-38258]:Block[38126-38258]"
    }, {
      "left" : "parser.addParserWarning(\"msg.jsdoc.modifies.duplicate\",\n              stream.getLineno(), stream.getCharno());",
      "right" : "parser.addParserWarning(\"msg.jsdoc.modifies.duplicate\",\n              stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[38138-38248]:ExpressionStatement[38138-38248]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[38277-38290]:ReturnStatement[38277-38290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38585-38656]:Block[38585-38656]"
    }, {
      "left" : "return parseAndRecordTypeNode(token, token == JsDocToken.LC);",
      "right" : "return parseAndRecordTypeNode(token, token == JsDocToken.LC);",
      "info" : "ReturnStatement[38591-38652]:ReturnStatement[38591-38652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39037-39151]:Block[39037-39151]"
    }, {
      "left" : "return parseAndRecordTypeNode(token, stream.getLineno(), stream.getCharno(),\n        matchingLC, false);",
      "right" : "return parseAndRecordTypeNode(token, stream.getLineno(), stream.getCharno(),\n        matchingLC, false);",
      "info" : "ReturnStatement[39043-39147]:ReturnStatement[39043-39147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39609-39716]:Block[39609-39716]"
    }, {
      "left" : "return parseAndRecordTypeNode(token, lineno, startCharno,\n        token == JsDocToken.LC, false);",
      "right" : "return parseAndRecordTypeNode(token, lineno, startCharno,\n        token == JsDocToken.LC, false);",
      "info" : "ReturnStatement[39615-39712]:ReturnStatement[39615-39712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40304-40390]:Block[40304-40390]"
    }, {
      "left" : "return parseAndRecordTypeNode(token, lineno, startCharno, matchingLC, true);",
      "right" : "return parseAndRecordTypeNode(token, lineno, startCharno, matchingLC, true);",
      "info" : "ReturnStatement[40310-40386]:ReturnStatement[40310-40386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40909-41263]:Block[40909-41263]"
    }, {
      "left" : "Preconditions.checkArgument(token == JsDocToken.LC);",
      "right" : "Preconditions.checkArgument(token == JsDocToken.LC);",
      "info" : "ExpressionStatement[40915-40967]:ExpressionStatement[40915-40967]"
    }, {
      "left" : "int lineno = stream.getLineno();",
      "right" : "int lineno = stream.getLineno();",
      "info" : "VariableDeclarationStatement[40972-41004]:VariableDeclarationStatement[40972-41004]"
    }, {
      "left" : "int startCharno = stream.getCharno();",
      "right" : "int startCharno = stream.getCharno();",
      "info" : "VariableDeclarationStatement[41009-41046]:VariableDeclarationStatement[41009-41046]"
    }, {
      "left" : "Node typeNode = parseParamTypeExpressionAnnotation(token);",
      "right" : "Node typeNode = parseParamTypeExpressionAnnotation(token);",
      "info" : "VariableDeclarationStatement[41052-41110]:VariableDeclarationStatement[41052-41110]"
    }, {
      "left" : "int endCharno = stream.getCharno();",
      "right" : "int endCharno = stream.getCharno();",
      "info" : "VariableDeclarationStatement[41115-41150]:VariableDeclarationStatement[41115-41150]"
    }, {
      "left" : "jsdocBuilder.markTypeNode(typeNode, lineno, startCharno, endCharno,\n        true);",
      "right" : "jsdocBuilder.markTypeNode(typeNode, lineno, startCharno, endCharno,\n        true);",
      "info" : "ExpressionStatement[41156-41238]:ExpressionStatement[41156-41238]"
    }, {
      "left" : "return typeNode;",
      "right" : "return typeNode;",
      "info" : "ReturnStatement[41243-41259]:ReturnStatement[41243-41259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42135-42587]:Block[42135-42587]"
    }, {
      "left" : "Node typeNode = null;",
      "right" : "Node typeNode = null;",
      "info" : "VariableDeclarationStatement[42141-42162]:VariableDeclarationStatement[42141-42162]"
    }, {
      "left" : "if (onlyParseSimpleNames)",
      "right" : "if (onlyParseSimpleNames)",
      "info" : "IfStatement[42168-42318]:IfStatement[42168-42318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42194-42250]:Block[42194-42250]"
    }, {
      "left" : "typeNode = parseTypeNameAnnotation(token);",
      "right" : "typeNode = parseTypeNameAnnotation(token);",
      "info" : "ExpressionStatement[42202-42244]:ExpressionStatement[42202-42244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42256-42318]:Block[42256-42318]"
    }, {
      "left" : "typeNode = parseTypeExpressionAnnotation(token);",
      "right" : "typeNode = parseTypeExpressionAnnotation(token);",
      "info" : "ExpressionStatement[42264-42312]:ExpressionStatement[42264-42312]"
    }, {
      "left" : "if (typeNode != null && !matchingLC)",
      "right" : "if (typeNode != null && !matchingLC)",
      "info" : "IfStatement[42324-42426]:IfStatement[42324-42426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42361-42426]:Block[42361-42426]"
    }, {
      "left" : "typeNode.putBooleanProp(Node.BRACELESS_TYPE, true);",
      "right" : "typeNode.putBooleanProp(Node.BRACELESS_TYPE, true);",
      "info" : "ExpressionStatement[42369-42420]:ExpressionStatement[42369-42420]"
    }, {
      "left" : "int endCharno = stream.getCharno();",
      "right" : "int endCharno = stream.getCharno();",
      "info" : "VariableDeclarationStatement[42432-42467]:VariableDeclarationStatement[42432-42467]"
    }, {
      "left" : "jsdocBuilder.markTypeNode(typeNode, lineno, startCharno, endCharno,\n        matchingLC);",
      "right" : "jsdocBuilder.markTypeNode(typeNode, lineno, startCharno, endCharno,\n        matchingLC);",
      "info" : "ExpressionStatement[42473-42561]:ExpressionStatement[42473-42561]"
    }, {
      "left" : "return typeNode;",
      "right" : "return typeNode;",
      "info" : "ReturnStatement[42567-42583]:ReturnStatement[42567-42583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42703-43533]:Block[42703-43533]"
    }, {
      "left" : "switch (token) {\n      case ANNOTATION:\n        return \"@\" + stream.getString();\n\n      case BANG:\n        return \"!\";\n\n      case COMMA:\n        return \",\";\n\n      case COLON:\n        return \":\";\n\n      case GT:\n        return \">\";\n\n      case LB:\n        return \"[\";\n\n      case LC:\n        return \"{\";\n\n      case LP:\n        return \"(\";\n\n      case LT:\n        return \".<\";\n\n      case QMARK:\n        return \"?\";\n\n      case PIPE:\n        return \"|\";\n\n      case RB:\n        return \"]\";\n\n      case RC:\n        return \"}\";\n\n      case RP:\n        return \")\";\n\n      case STAR:\n        return \"*\";\n\n      case ELLIPSIS:\n        return \"...\";\n\n      case EQUALS:\n        return \"=\";\n\n      case STRING:\n        return stream.getString();\n\n      default:\n        throw new IllegalStateException(token.toString());\n    }",
      "right" : "switch (token) {\n      case ANNOTATION:\n        return \"@\" + stream.getString();\n\n      case BANG:\n        return \"!\";\n\n      case COMMA:\n        return \",\";\n\n      case COLON:\n        return \":\";\n\n      case GT:\n        return \">\";\n\n      case LB:\n        return \"[\";\n\n      case LC:\n        return \"{\";\n\n      case LP:\n        return \"(\";\n\n      case LT:\n        return \".<\";\n\n      case QMARK:\n        return \"?\";\n\n      case PIPE:\n        return \"|\";\n\n      case RB:\n        return \"]\";\n\n      case RC:\n        return \"}\";\n\n      case RP:\n        return \")\";\n\n      case STAR:\n        return \"*\";\n\n      case ELLIPSIS:\n        return \"...\";\n\n      case EQUALS:\n        return \"=\";\n\n      case STRING:\n        return stream.getString();\n\n      default:\n        throw new IllegalStateException(token.toString());\n    }",
      "info" : "SwitchStatement[42709-43529]:SwitchStatement[42709-43529]"
    }, {
      "left" : "case ANNOTATION:",
      "right" : "case ANNOTATION:",
      "info" : "SwitchCase[42732-42748]:SwitchCase[42732-42748]"
    }, {
      "left" : "return \"@\" + stream.getString();",
      "right" : "return \"@\" + stream.getString();",
      "info" : "ReturnStatement[42757-42789]:ReturnStatement[42757-42789]"
    }, {
      "left" : "case BANG:",
      "right" : "case BANG:",
      "info" : "SwitchCase[42797-42807]:SwitchCase[42797-42807]"
    }, {
      "left" : "return \"!\";",
      "right" : "return \"!\";",
      "info" : "ReturnStatement[42816-42827]:ReturnStatement[42816-42827]"
    }, {
      "left" : "case COMMA:",
      "right" : "case COMMA:",
      "info" : "SwitchCase[42835-42846]:SwitchCase[42835-42846]"
    }, {
      "left" : "return \",\";",
      "right" : "return \",\";",
      "info" : "ReturnStatement[42855-42866]:ReturnStatement[42855-42866]"
    }, {
      "left" : "case COLON:",
      "right" : "case COLON:",
      "info" : "SwitchCase[42874-42885]:SwitchCase[42874-42885]"
    }, {
      "left" : "return \":\";",
      "right" : "return \":\";",
      "info" : "ReturnStatement[42894-42905]:ReturnStatement[42894-42905]"
    }, {
      "left" : "case GT:",
      "right" : "case GT:",
      "info" : "SwitchCase[42913-42921]:SwitchCase[42913-42921]"
    }, {
      "left" : "return \">\";",
      "right" : "return \">\";",
      "info" : "ReturnStatement[42930-42941]:ReturnStatement[42930-42941]"
    }, {
      "left" : "case LB:",
      "right" : "case LB:",
      "info" : "SwitchCase[42949-42957]:SwitchCase[42949-42957]"
    }, {
      "left" : "return \"[\";",
      "right" : "return \"[\";",
      "info" : "ReturnStatement[42966-42977]:ReturnStatement[42966-42977]"
    }, {
      "left" : "case LC:",
      "right" : "case LC:",
      "info" : "SwitchCase[42985-42993]:SwitchCase[42985-42993]"
    }, {
      "left" : "return \"{\";",
      "right" : "return \"{\";",
      "info" : "ReturnStatement[43002-43013]:ReturnStatement[43002-43013]"
    }, {
      "left" : "case LP:",
      "right" : "case LP:",
      "info" : "SwitchCase[43021-43029]:SwitchCase[43021-43029]"
    }, {
      "left" : "return \"(\";",
      "right" : "return \"(\";",
      "info" : "ReturnStatement[43038-43049]:ReturnStatement[43038-43049]"
    }, {
      "left" : "case LT:",
      "right" : "case LT:",
      "info" : "SwitchCase[43057-43065]:SwitchCase[43057-43065]"
    }, {
      "left" : "return \".<\";",
      "right" : "return \".<\";",
      "info" : "ReturnStatement[43074-43086]:ReturnStatement[43074-43086]"
    }, {
      "left" : "case QMARK:",
      "right" : "case QMARK:",
      "info" : "SwitchCase[43094-43105]:SwitchCase[43094-43105]"
    }, {
      "left" : "return \"?\";",
      "right" : "return \"?\";",
      "info" : "ReturnStatement[43114-43125]:ReturnStatement[43114-43125]"
    }, {
      "left" : "case PIPE:",
      "right" : "case PIPE:",
      "info" : "SwitchCase[43133-43143]:SwitchCase[43133-43143]"
    }, {
      "left" : "return \"|\";",
      "right" : "return \"|\";",
      "info" : "ReturnStatement[43152-43163]:ReturnStatement[43152-43163]"
    }, {
      "left" : "case RB:",
      "right" : "case RB:",
      "info" : "SwitchCase[43171-43179]:SwitchCase[43171-43179]"
    }, {
      "left" : "return \"]\";",
      "right" : "return \"]\";",
      "info" : "ReturnStatement[43188-43199]:ReturnStatement[43188-43199]"
    }, {
      "left" : "case RC:",
      "right" : "case RC:",
      "info" : "SwitchCase[43207-43215]:SwitchCase[43207-43215]"
    }, {
      "left" : "return \"}\";",
      "right" : "return \"}\";",
      "info" : "ReturnStatement[43224-43235]:ReturnStatement[43224-43235]"
    }, {
      "left" : "case RP:",
      "right" : "case RP:",
      "info" : "SwitchCase[43243-43251]:SwitchCase[43243-43251]"
    }, {
      "left" : "return \")\";",
      "right" : "return \")\";",
      "info" : "ReturnStatement[43260-43271]:ReturnStatement[43260-43271]"
    }, {
      "left" : "case STAR:",
      "right" : "case STAR:",
      "info" : "SwitchCase[43279-43289]:SwitchCase[43279-43289]"
    }, {
      "left" : "return \"*\";",
      "right" : "return \"*\";",
      "info" : "ReturnStatement[43298-43309]:ReturnStatement[43298-43309]"
    }, {
      "left" : "case ELLIPSIS:",
      "right" : "case ELLIPSIS:",
      "info" : "SwitchCase[43317-43331]:SwitchCase[43317-43331]"
    }, {
      "left" : "return \"...\";",
      "right" : "return \"...\";",
      "info" : "ReturnStatement[43340-43353]:ReturnStatement[43340-43353]"
    }, {
      "left" : "case EQUALS:",
      "right" : "case EQUALS:",
      "info" : "SwitchCase[43361-43373]:SwitchCase[43361-43373]"
    }, {
      "left" : "return \"=\";",
      "right" : "return \"=\";",
      "info" : "ReturnStatement[43382-43393]:ReturnStatement[43382-43393]"
    }, {
      "left" : "case STRING:",
      "right" : "case STRING:",
      "info" : "SwitchCase[43401-43413]:SwitchCase[43401-43413]"
    }, {
      "left" : "return stream.getString();",
      "right" : "return stream.getString();",
      "info" : "ReturnStatement[43422-43448]:ReturnStatement[43422-43448]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[43456-43464]:SwitchCase[43456-43464]"
    }, {
      "left" : "throw new IllegalStateException(token.toString());",
      "right" : "throw new IllegalStateException(token.toString());",
      "info" : "ThrowStatement[43473-43523]:ThrowStatement[43473-43523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43688-43768]:Block[43688-43768]"
    }, {
      "left" : "return n == null ? null :\n        new JSTypeExpression(n, sourceName);",
      "right" : "return n == null ? null :\n        new JSTypeExpression(n, sourceName);",
      "info" : "ReturnStatement[43694-43764]:ReturnStatement[43694-43764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44084-44145]:Block[44084-44145]"
    }, {
      "left" : "this.string = string;",
      "right" : "this.string = string;",
      "info" : "ExpressionStatement[44092-44113]:ExpressionStatement[44092-44113]"
    }, {
      "left" : "this.token = token;",
      "right" : "this.token = token;",
      "info" : "ExpressionStatement[44120-44139]:ExpressionStatement[44120-44139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44398-44485]:Block[44398-44485]"
    }, {
      "left" : "this.type = type;",
      "right" : "this.type = type;",
      "info" : "ExpressionStatement[44406-44423]:ExpressionStatement[44406-44423]"
    }, {
      "left" : "this.lineno = lineno;",
      "right" : "this.lineno = lineno;",
      "info" : "ExpressionStatement[44430-44451]:ExpressionStatement[44430-44451]"
    }, {
      "left" : "this.charno = charno;",
      "right" : "this.charno = charno;",
      "info" : "ExpressionStatement[44458-44479]:ExpressionStatement[44458-44479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44794-45228]:Block[44794-45228]"
    }, {
      "left" : "stream.update();",
      "right" : "stream.update();",
      "info" : "ExpressionStatement[44840-44856]:ExpressionStatement[44840-44856]"
    }, {
      "left" : "int lineno = stream.getLineno();",
      "right" : "int lineno = stream.getLineno();",
      "info" : "VariableDeclarationStatement[44861-44893]:VariableDeclarationStatement[44861-44893]"
    }, {
      "left" : "int charno = stream.getCharno() + 1;",
      "right" : "int charno = stream.getCharno() + 1;",
      "info" : "VariableDeclarationStatement[44898-44934]:VariableDeclarationStatement[44898-44934]"
    }, {
      "left" : "String line = stream.getRemainingJSDocLine().trim();",
      "right" : "String line = stream.getRemainingJSDocLine().trim();",
      "info" : "VariableDeclarationStatement[44940-44992]:VariableDeclarationStatement[44940-44992]"
    }, {
      "left" : "if (line.length() > 0)",
      "right" : "if (line.length() > 0)",
      "info" : "IfStatement[45037-45178]:IfStatement[45037-45178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45060-45178]:Block[45060-45178]"
    }, {
      "left" : "jsdocBuilder.markText(line, lineno, charno, lineno,\n                            charno + line.length());",
      "right" : "jsdocBuilder.markText(line, lineno, charno, lineno,\n                            charno + line.length());",
      "info" : "ExpressionStatement[45068-45172]:ExpressionStatement[45068-45172]"
    }, {
      "left" : "return new ExtractionInfo(line, next());",
      "right" : "return new ExtractionInfo(line, next());",
      "info" : "ReturnStatement[45184-45224]:ReturnStatement[45184-45224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45302-45385]:Block[45302-45385]"
    }, {
      "left" : "return extractMultilineTextualBlock(token, WhitespaceOption.SINGLE_LINE);",
      "right" : "return extractMultilineTextualBlock(token, WhitespaceOption.SINGLE_LINE);",
      "info" : "ReturnStatement[45308-45381]:ReturnStatement[45308-45381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46478-48824]:Block[46478-48824]"
    }, {
      "left" : "if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n        token == JsDocToken.EOF)",
      "right" : "if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n        token == JsDocToken.EOF)",
      "info" : "IfStatement[46485-46627]:IfStatement[46485-46627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46576-46627]:Block[46576-46627]"
    }, {
      "left" : "return new ExtractionInfo(\"\", token);",
      "right" : "return new ExtractionInfo(\"\", token);",
      "info" : "ReturnStatement[46584-46621]:ReturnStatement[46584-46621]"
    }, {
      "left" : "stream.update();",
      "right" : "stream.update();",
      "info" : "ExpressionStatement[46633-46649]:ExpressionStatement[46633-46649]"
    }, {
      "left" : "int startLineno = stream.getLineno();",
      "right" : "int startLineno = stream.getLineno();",
      "info" : "VariableDeclarationStatement[46654-46691]:VariableDeclarationStatement[46654-46691]"
    }, {
      "left" : "int startCharno = stream.getCharno() + 1;",
      "right" : "int startCharno = stream.getCharno() + 1;",
      "info" : "VariableDeclarationStatement[46696-46737]:VariableDeclarationStatement[46696-46737]"
    }, {
      "left" : "String line = stream.getRemainingJSDocLine();",
      "right" : "String line = stream.getRemainingJSDocLine();",
      "info" : "VariableDeclarationStatement[46788-46833]:VariableDeclarationStatement[46788-46833]"
    }, {
      "left" : "if (option != WhitespaceOption.PRESERVE)",
      "right" : "if (option != WhitespaceOption.PRESERVE)",
      "info" : "IfStatement[46838-46912]:IfStatement[46838-46912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46879-46912]:Block[46879-46912]"
    }, {
      "left" : "line = line.trim();",
      "right" : "line = line.trim();",
      "info" : "ExpressionStatement[46887-46906]:ExpressionStatement[46887-46906]"
    }, {
      "left" : "StringBuilder builder = new StringBuilder();",
      "right" : "StringBuilder builder = new StringBuilder();",
      "info" : "VariableDeclarationStatement[46918-46962]:VariableDeclarationStatement[46918-46962]"
    }, {
      "left" : "builder.append(line);",
      "right" : "builder.append(line);",
      "info" : "ExpressionStatement[46967-46988]:ExpressionStatement[46967-46988]"
    }, {
      "left" : "state = State.SEARCHING_ANNOTATION;",
      "right" : "state = State.SEARCHING_ANNOTATION;",
      "info" : "ExpressionStatement[46994-47029]:ExpressionStatement[46994-47029]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[47034-47049]:ExpressionStatement[47034-47049]"
    }, {
      "left" : "boolean ignoreStar = false;",
      "right" : "boolean ignoreStar = false;",
      "info" : "VariableDeclarationStatement[47055-47082]:VariableDeclarationStatement[47055-47082]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[47088-48820]:DoStatement[47088-48820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47091-48806]:Block[47091-48806]"
    }, {
      "left" : "switch (token) {\n        case STAR:\n          if (!ignoreStar) {\n            if (builder.length() > 0) {\n              builder.append(' ');\n            }\n\n            builder.append('*');\n          }\n\n          token = next();\n          continue;\n\n        case EOL:\n          if (option != WhitespaceOption.SINGLE_LINE) {\n            builder.append(\"\\n\");\n          }\n\n          ignoreStar = true;\n          token = next();\n          continue;\n\n        case ANNOTATION:\n        case EOC:\n        case EOF:\n          // When we're capturing a license block, annotations\n          // in the block are ok.\n          if (!(option == WhitespaceOption.PRESERVE &&\n                token == JsDocToken.ANNOTATION)) {\n            String multilineText = builder.toString();\n\n            if (option != WhitespaceOption.PRESERVE) {\n              multilineText = multilineText.trim();\n            }\n\n            int endLineno = stream.getLineno();\n            int endCharno = stream.getCharno();\n\n            if (multilineText.length() > 0) {\n              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                  endLineno, endCharno);\n            }\n\n            return new ExtractionInfo(multilineText, token);\n          }\n\n          // FALL THROUGH\n\n        default:\n          ignoreStar = false;\n          state = State.SEARCHING_ANNOTATION;\n\n          if (builder.length() > 0) {\n            builder.append(' ');\n          }\n\n          builder.append(toString(token));\n\n          line = stream.getRemainingJSDocLine();\n\n          if (option != WhitespaceOption.PRESERVE) {\n            line = trimEnd(line);\n          }\n\n          builder.append(line);\n          token = next();\n      }",
      "right" : "switch (token) {\n        case STAR:\n          if (!ignoreStar) {\n            if (builder.length() > 0) {\n              builder.append(' ');\n            }\n\n            builder.append('*');\n          }\n\n          token = next();\n          continue;\n\n        case EOL:\n          if (option != WhitespaceOption.SINGLE_LINE) {\n            builder.append(\"\\n\");\n          }\n\n          ignoreStar = true;\n          token = next();\n          continue;\n\n        case ANNOTATION:\n        case EOC:\n        case EOF:\n          // When we're capturing a license block, annotations\n          // in the block are ok.\n          if (!(option == WhitespaceOption.PRESERVE &&\n                token == JsDocToken.ANNOTATION)) {\n            String multilineText = builder.toString();\n\n            if (option != WhitespaceOption.PRESERVE) {\n              multilineText = multilineText.trim();\n            }\n\n            int endLineno = stream.getLineno();\n            int endCharno = stream.getCharno();\n\n            if (multilineText.length() > 0) {\n              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                  endLineno, endCharno);\n            }\n\n            return new ExtractionInfo(multilineText, token);\n          }\n\n          // FALL THROUGH\n\n        default:\n          ignoreStar = false;\n          state = State.SEARCHING_ANNOTATION;\n\n          if (builder.length() > 0) {\n            builder.append(' ');\n          }\n\n          builder.append(toString(token));\n\n          line = stream.getRemainingJSDocLine();\n\n          if (option != WhitespaceOption.PRESERVE) {\n            line = trimEnd(line);\n          }\n\n          builder.append(line);\n          token = next();\n      }",
      "info" : "SwitchStatement[47099-48800]:SwitchStatement[47099-48800]"
    }, {
      "left" : "case STAR:",
      "right" : "case STAR:",
      "info" : "SwitchCase[47124-47134]:SwitchCase[47124-47134]"
    }, {
      "left" : "if (!ignoreStar)",
      "right" : "if (!ignoreStar)",
      "info" : "IfStatement[47145-47298]:IfStatement[47145-47298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47162-47298]:Block[47162-47298]"
    }, {
      "left" : "if (builder.length() > 0)",
      "right" : "if (builder.length() > 0)",
      "info" : "IfStatement[47176-47252]:IfStatement[47176-47252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47202-47252]:Block[47202-47252]"
    }, {
      "left" : "builder.append(' ');",
      "right" : "builder.append(' ');",
      "info" : "ExpressionStatement[47218-47238]:ExpressionStatement[47218-47238]"
    }, {
      "left" : "builder.append('*');",
      "right" : "builder.append('*');",
      "info" : "ExpressionStatement[47266-47286]:ExpressionStatement[47266-47286]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[47310-47325]:ExpressionStatement[47310-47325]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[47336-47345]:ContinueStatement[47336-47345]"
    }, {
      "left" : "case EOL:",
      "right" : "case EOL:",
      "info" : "SwitchCase[47355-47364]:SwitchCase[47355-47364]"
    }, {
      "left" : "if (option != WhitespaceOption.SINGLE_LINE)",
      "right" : "if (option != WhitespaceOption.SINGLE_LINE)",
      "info" : "IfStatement[47375-47466]:IfStatement[47375-47466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47419-47466]:Block[47419-47466]"
    }, {
      "left" : "builder.append(\"\\n\");",
      "right" : "builder.append(\"\\n\");",
      "info" : "ExpressionStatement[47433-47454]:ExpressionStatement[47433-47454]"
    }, {
      "left" : "ignoreStar = true;",
      "right" : "ignoreStar = true;",
      "info" : "ExpressionStatement[47478-47496]:ExpressionStatement[47478-47496]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[47507-47522]:ExpressionStatement[47507-47522]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[47533-47542]:ContinueStatement[47533-47542]"
    }, {
      "left" : "case ANNOTATION:",
      "right" : "case ANNOTATION:",
      "info" : "SwitchCase[47552-47568]:SwitchCase[47552-47568]"
    }, {
      "left" : "case EOC:",
      "right" : "case EOC:",
      "info" : "SwitchCase[47577-47586]:SwitchCase[47577-47586]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[47595-47604]:SwitchCase[47595-47604]"
    }, {
      "left" : "if (!(option == WhitespaceOption.PRESERVE &&\n                token == JsDocToken.ANNOTATION))",
      "right" : "if (!(option == WhitespaceOption.PRESERVE &&\n                token == JsDocToken.ANNOTATION))",
      "info" : "IfStatement[47712-48334]:IfStatement[47712-48334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47806-48334]:Block[47806-48334]"
    }, {
      "left" : "String multilineText = builder.toString();",
      "right" : "String multilineText = builder.toString();",
      "info" : "VariableDeclarationStatement[47820-47862]:VariableDeclarationStatement[47820-47862]"
    }, {
      "left" : "if (option != WhitespaceOption.PRESERVE)",
      "right" : "if (option != WhitespaceOption.PRESERVE)",
      "info" : "IfStatement[47876-47984]:IfStatement[47876-47984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47917-47984]:Block[47917-47984]"
    }, {
      "left" : "multilineText = multilineText.trim();",
      "right" : "multilineText = multilineText.trim();",
      "info" : "ExpressionStatement[47933-47970]:ExpressionStatement[47933-47970]"
    }, {
      "left" : "int endLineno = stream.getLineno();",
      "right" : "int endLineno = stream.getLineno();",
      "info" : "VariableDeclarationStatement[47998-48033]:VariableDeclarationStatement[47998-48033]"
    }, {
      "left" : "int endCharno = stream.getCharno();",
      "right" : "int endCharno = stream.getCharno();",
      "info" : "VariableDeclarationStatement[48046-48081]:VariableDeclarationStatement[48046-48081]"
    }, {
      "left" : "if (multilineText.length() > 0)",
      "right" : "if (multilineText.length() > 0)",
      "info" : "IfStatement[48095-48260]:IfStatement[48095-48260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48127-48260]:Block[48127-48260]"
    }, {
      "left" : "jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                  endLineno, endCharno);",
      "right" : "jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                  endLineno, endCharno);",
      "info" : "ExpressionStatement[48143-48246]:ExpressionStatement[48143-48246]"
    }, {
      "left" : "return new ExtractionInfo(multilineText, token);",
      "right" : "return new ExtractionInfo(multilineText, token);",
      "info" : "ReturnStatement[48274-48322]:ReturnStatement[48274-48322]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[48371-48379]:SwitchCase[48371-48379]"
    }, {
      "left" : "ignoreStar = false;",
      "right" : "ignoreStar = false;",
      "info" : "ExpressionStatement[48390-48409]:ExpressionStatement[48390-48409]"
    }, {
      "left" : "state = State.SEARCHING_ANNOTATION;",
      "right" : "state = State.SEARCHING_ANNOTATION;",
      "info" : "ExpressionStatement[48420-48455]:ExpressionStatement[48420-48455]"
    }, {
      "left" : "if (builder.length() > 0)",
      "right" : "if (builder.length() > 0)",
      "info" : "IfStatement[48467-48539]:IfStatement[48467-48539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48493-48539]:Block[48493-48539]"
    }, {
      "left" : "builder.append(' ');",
      "right" : "builder.append(' ');",
      "info" : "ExpressionStatement[48507-48527]:ExpressionStatement[48507-48527]"
    }, {
      "left" : "builder.append(toString(token));",
      "right" : "builder.append(toString(token));",
      "info" : "ExpressionStatement[48551-48583]:ExpressionStatement[48551-48583]"
    }, {
      "left" : "line = stream.getRemainingJSDocLine();",
      "right" : "line = stream.getRemainingJSDocLine();",
      "info" : "ExpressionStatement[48595-48633]:ExpressionStatement[48595-48633]"
    }, {
      "left" : "if (option != WhitespaceOption.PRESERVE)",
      "right" : "if (option != WhitespaceOption.PRESERVE)",
      "info" : "IfStatement[48645-48733]:IfStatement[48645-48733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48686-48733]:Block[48686-48733]"
    }, {
      "left" : "line = trimEnd(line);",
      "right" : "line = trimEnd(line);",
      "info" : "ExpressionStatement[48700-48721]:ExpressionStatement[48700-48721]"
    }, {
      "left" : "builder.append(line);",
      "right" : "builder.append(line);",
      "info" : "ExpressionStatement[48745-48766]:ExpressionStatement[48745-48766]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[48777-48792]:ExpressionStatement[48777-48792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49352-50326]:Block[49352-50326]"
    }, {
      "left" : "StringBuilder builder = new StringBuilder();",
      "right" : "StringBuilder builder = new StringBuilder();",
      "info" : "VariableDeclarationStatement[49358-49402]:VariableDeclarationStatement[49358-49402]"
    }, {
      "left" : "boolean ignoreStar = true;",
      "right" : "boolean ignoreStar = true;",
      "info" : "VariableDeclarationStatement[49408-49434]:VariableDeclarationStatement[49408-49434]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[49440-50322]:DoStatement[49440-50322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49443-50308]:Block[49443-50308]"
    }, {
      "left" : "switch (token) {\n        case ANNOTATION:\n        case EOC:\n        case EOF:\n          return new ExtractionInfo(builder.toString().trim(), token);\n\n        case STAR:\n          if (!ignoreStar) {\n            if (builder.length() > 0) {\n              builder.append(' ');\n            }\n\n            builder.append('*');\n          }\n\n          token = next();\n          continue;\n\n        case EOL:\n          ignoreStar = true;\n          builder.append('\\n');\n          token = next();\n          continue;\n\n        default:\n          if (!ignoreStar && builder.length() > 0) {\n            builder.append(' ');\n          }\n\n          ignoreStar = false;\n\n          builder.append(toString(token));\n\n          String line = stream.getRemainingJSDocLine();\n          line = trimEnd(line);\n          builder.append(line);\n          token = next();\n      }",
      "right" : "switch (token) {\n        case ANNOTATION:\n        case EOC:\n        case EOF:\n          return new ExtractionInfo(builder.toString().trim(), token);\n\n        case STAR:\n          if (!ignoreStar) {\n            if (builder.length() > 0) {\n              builder.append(' ');\n            }\n\n            builder.append('*');\n          }\n\n          token = next();\n          continue;\n\n        case EOL:\n          ignoreStar = true;\n          builder.append('\\n');\n          token = next();\n          continue;\n\n        default:\n          if (!ignoreStar && builder.length() > 0) {\n            builder.append(' ');\n          }\n\n          ignoreStar = false;\n\n          builder.append(toString(token));\n\n          String line = stream.getRemainingJSDocLine();\n          line = trimEnd(line);\n          builder.append(line);\n          token = next();\n      }",
      "info" : "SwitchStatement[49451-50302]:SwitchStatement[49451-50302]"
    }, {
      "left" : "case ANNOTATION:",
      "right" : "case ANNOTATION:",
      "info" : "SwitchCase[49476-49492]:SwitchCase[49476-49492]"
    }, {
      "left" : "case EOC:",
      "right" : "case EOC:",
      "info" : "SwitchCase[49501-49510]:SwitchCase[49501-49510]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[49519-49528]:SwitchCase[49519-49528]"
    }, {
      "left" : "return new ExtractionInfo(builder.toString().trim(), token);",
      "right" : "return new ExtractionInfo(builder.toString().trim(), token);",
      "info" : "ReturnStatement[49539-49599]:ReturnStatement[49539-49599]"
    }, {
      "left" : "case STAR:",
      "right" : "case STAR:",
      "info" : "SwitchCase[49609-49619]:SwitchCase[49609-49619]"
    }, {
      "left" : "if (!ignoreStar)",
      "right" : "if (!ignoreStar)",
      "info" : "IfStatement[49630-49783]:IfStatement[49630-49783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49647-49783]:Block[49647-49783]"
    }, {
      "left" : "if (builder.length() > 0)",
      "right" : "if (builder.length() > 0)",
      "info" : "IfStatement[49661-49737]:IfStatement[49661-49737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49687-49737]:Block[49687-49737]"
    }, {
      "left" : "builder.append(' ');",
      "right" : "builder.append(' ');",
      "info" : "ExpressionStatement[49703-49723]:ExpressionStatement[49703-49723]"
    }, {
      "left" : "builder.append('*');",
      "right" : "builder.append('*');",
      "info" : "ExpressionStatement[49751-49771]:ExpressionStatement[49751-49771]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[49795-49810]:ExpressionStatement[49795-49810]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[49821-49830]:ContinueStatement[49821-49830]"
    }, {
      "left" : "case EOL:",
      "right" : "case EOL:",
      "info" : "SwitchCase[49840-49849]:SwitchCase[49840-49849]"
    }, {
      "left" : "ignoreStar = true;",
      "right" : "ignoreStar = true;",
      "info" : "ExpressionStatement[49860-49878]:ExpressionStatement[49860-49878]"
    }, {
      "left" : "builder.append('\\n');",
      "right" : "builder.append('\\n');",
      "info" : "ExpressionStatement[49889-49910]:ExpressionStatement[49889-49910]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[49921-49936]:ExpressionStatement[49921-49936]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[49947-49956]:ContinueStatement[49947-49956]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[49966-49974]:SwitchCase[49966-49974]"
    }, {
      "left" : "if (!ignoreStar && builder.length() > 0)",
      "right" : "if (!ignoreStar && builder.length() > 0)",
      "info" : "IfStatement[49985-50072]:IfStatement[49985-50072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50026-50072]:Block[50026-50072]"
    }, {
      "left" : "builder.append(' ');",
      "right" : "builder.append(' ');",
      "info" : "ExpressionStatement[50040-50060]:ExpressionStatement[50040-50060]"
    }, {
      "left" : "ignoreStar = false;",
      "right" : "ignoreStar = false;",
      "info" : "ExpressionStatement[50084-50103]:ExpressionStatement[50084-50103]"
    }, {
      "left" : "builder.append(toString(token));",
      "right" : "builder.append(toString(token));",
      "info" : "ExpressionStatement[50115-50147]:ExpressionStatement[50115-50147]"
    }, {
      "left" : "String line = stream.getRemainingJSDocLine();",
      "right" : "String line = stream.getRemainingJSDocLine();",
      "info" : "VariableDeclarationStatement[50159-50204]:VariableDeclarationStatement[50159-50204]"
    }, {
      "left" : "line = trimEnd(line);",
      "right" : "line = trimEnd(line);",
      "info" : "ExpressionStatement[50215-50236]:ExpressionStatement[50215-50236]"
    }, {
      "left" : "builder.append(line);",
      "right" : "builder.append(line);",
      "info" : "ExpressionStatement[50247-50268]:ExpressionStatement[50247-50268]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[50279-50294]:ExpressionStatement[50279-50294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50768-51092]:Block[50768-51092]"
    }, {
      "left" : "int trimCount = 0;",
      "right" : "int trimCount = 0;",
      "info" : "VariableDeclarationStatement[50774-50792]:VariableDeclarationStatement[50774-50792]"
    }, {
      "left" : "while (trimCount < s.length())",
      "right" : "while (trimCount < s.length())",
      "info" : "WhileStatement[50797-50988]:WhileStatement[50797-50988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50828-50988]:Block[50828-50988]"
    }, {
      "left" : "char ch = s.charAt(s.length() - trimCount - 1);",
      "right" : "char ch = s.charAt(s.length() - trimCount - 1);",
      "info" : "VariableDeclarationStatement[50836-50883]:VariableDeclarationStatement[50836-50883]"
    }, {
      "left" : "if (Character.isWhitespace(ch))",
      "right" : "if (Character.isWhitespace(ch))",
      "info" : "IfStatement[50890-50982]:IfStatement[50890-50982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50922-50952]:Block[50922-50952]"
    }, {
      "left" : "trimCount++;",
      "right" : "trimCount++;",
      "info" : "ExpressionStatement[50932-50944]:ExpressionStatement[50932-50944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50958-50982]:Block[50958-50982]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[50968-50974]:BreakStatement[50968-50974]"
    }, {
      "left" : "if (trimCount == 0)",
      "right" : "if (trimCount == 0)",
      "info" : "IfStatement[50994-51037]:IfStatement[50994-51037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51014-51037]:Block[51014-51037]"
    }, {
      "left" : "return s;",
      "right" : "return s;",
      "info" : "ReturnStatement[51022-51031]:ReturnStatement[51022-51031]"
    }, {
      "left" : "return s.substring(0, s.length() - trimCount);",
      "right" : "return s.substring(0, s.length() - trimCount);",
      "info" : "ReturnStatement[51042-51088]:ReturnStatement[51042-51088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51675-52074]:Block[51675-52074]"
    }, {
      "left" : "if (token == JsDocToken.LC)",
      "right" : "if (token == JsDocToken.LC)",
      "info" : "IfStatement[51681-52070]:IfStatement[51681-52070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51709-52016]:Block[51709-52016]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[51717-51728]:ExpressionStatement[51717-51728]"
    }, {
      "left" : "Node typeNode = parseTopLevelTypeExpression(next());",
      "right" : "Node typeNode = parseTopLevelTypeExpression(next());",
      "info" : "VariableDeclarationStatement[51735-51787]:VariableDeclarationStatement[51735-51787]"
    }, {
      "left" : "if (typeNode != null)",
      "right" : "if (typeNode != null)",
      "info" : "IfStatement[51794-51986]:IfStatement[51794-51986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51816-51986]:Block[51816-51986]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[51826-51837]:ExpressionStatement[51826-51837]"
    }, {
      "left" : "if (!match(JsDocToken.RC))",
      "right" : "if (!match(JsDocToken.RC))",
      "info" : "IfStatement[51846-51978]:IfStatement[51846-51978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51873-51943]:Block[51873-51943]"
    }, {
      "left" : "reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");",
      "right" : "reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");",
      "info" : "ExpressionStatement[51885-51933]:ExpressionStatement[51885-51933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51949-51978]:Block[51949-51978]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[51961-51968]:ExpressionStatement[51961-51968]"
    }, {
      "left" : "return typeNode;",
      "right" : "return typeNode;",
      "info" : "ReturnStatement[51994-52010]:ReturnStatement[51994-52010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52022-52070]:Block[52022-52070]"
    }, {
      "left" : "return parseTypeExpression(token);",
      "right" : "return parseTypeExpression(token);",
      "info" : "ReturnStatement[52030-52064]:ReturnStatement[52030-52064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52394-53264]:Block[52394-53264]"
    }, {
      "left" : "Preconditions.checkArgument(token == JsDocToken.LC);",
      "right" : "Preconditions.checkArgument(token == JsDocToken.LC);",
      "info" : "ExpressionStatement[52400-52452]:ExpressionStatement[52400-52452]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[52458-52469]:ExpressionStatement[52458-52469]"
    }, {
      "left" : "boolean restArg = false;",
      "right" : "boolean restArg = false;",
      "info" : "VariableDeclarationStatement[52475-52499]:VariableDeclarationStatement[52475-52499]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[52504-52519]:ExpressionStatement[52504-52519]"
    }, {
      "left" : "if (token == JsDocToken.ELLIPSIS)",
      "right" : "if (token == JsDocToken.ELLIPSIS)",
      "info" : "IfStatement[52524-52779]:IfStatement[52524-52779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52558-52779]:Block[52558-52779]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[52566-52581]:ExpressionStatement[52566-52581]"
    }, {
      "left" : "if (token == JsDocToken.RC)",
      "right" : "if (token == JsDocToken.RC)",
      "info" : "IfStatement[52588-52751]:IfStatement[52588-52751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52616-52751]:Block[52616-52751]"
    }, {
      "left" : "return wrapNode(Token.ELLIPSIS, new Node(Token.EMPTY));",
      "right" : "return wrapNode(Token.ELLIPSIS, new Node(Token.EMPTY));",
      "info" : "ReturnStatement[52688-52743]:ReturnStatement[52688-52743]"
    }, {
      "left" : "restArg = true;",
      "right" : "restArg = true;",
      "info" : "ExpressionStatement[52758-52773]:ExpressionStatement[52758-52773]"
    }, {
      "left" : "Node typeNode = parseTopLevelTypeExpression(token);",
      "right" : "Node typeNode = parseTopLevelTypeExpression(token);",
      "info" : "VariableDeclarationStatement[52785-52836]:VariableDeclarationStatement[52785-52836]"
    }, {
      "left" : "if (typeNode != null)",
      "right" : "if (typeNode != null)",
      "info" : "IfStatement[52841-53238]:IfStatement[52841-53238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52863-53238]:Block[52863-53238]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[52871-52882]:ExpressionStatement[52871-52882]"
    }, {
      "left" : "if (restArg)",
      "right" : "if (restArg)",
      "info" : "IfStatement[52889-53100]:IfStatement[52889-53100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52902-52966]:Block[52902-52966]"
    }, {
      "left" : "typeNode = wrapNode(Token.ELLIPSIS, typeNode);",
      "right" : "typeNode = wrapNode(Token.ELLIPSIS, typeNode);",
      "info" : "ExpressionStatement[52912-52958]:ExpressionStatement[52912-52958]"
    }, {
      "left" : "if (match(JsDocToken.EQUALS))",
      "right" : "if (match(JsDocToken.EQUALS))",
      "info" : "IfStatement[52972-53100]:IfStatement[52972-53100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53002-53100]:Block[53002-53100]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[53012-53019]:ExpressionStatement[53012-53019]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[53028-53039]:ExpressionStatement[53028-53039]"
    }, {
      "left" : "typeNode = wrapNode(Token.EQUALS, typeNode);",
      "right" : "typeNode = wrapNode(Token.EQUALS, typeNode);",
      "info" : "ExpressionStatement[53048-53092]:ExpressionStatement[53048-53092]"
    }, {
      "left" : "if (!match(JsDocToken.RC))",
      "right" : "if (!match(JsDocToken.RC))",
      "info" : "IfStatement[53108-53232]:IfStatement[53108-53232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53135-53201]:Block[53135-53201]"
    }, {
      "left" : "reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");",
      "right" : "reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");",
      "info" : "ExpressionStatement[53145-53193]:ExpressionStatement[53145-53193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53207-53232]:Block[53207-53232]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[53217-53224]:ExpressionStatement[53217-53224]"
    }, {
      "left" : "return typeNode;",
      "right" : "return typeNode;",
      "info" : "ReturnStatement[53244-53260]:ReturnStatement[53244-53260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53390-53769]:Block[53390-53769]"
    }, {
      "left" : "if (token == JsDocToken.LC)",
      "right" : "if (token == JsDocToken.LC)",
      "info" : "IfStatement[53396-53765]:IfStatement[53396-53765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53424-53717]:Block[53424-53717]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[53432-53443]:ExpressionStatement[53432-53443]"
    }, {
      "left" : "Node typeNode = parseTypeName(next());",
      "right" : "Node typeNode = parseTypeName(next());",
      "info" : "VariableDeclarationStatement[53450-53488]:VariableDeclarationStatement[53450-53488]"
    }, {
      "left" : "if (typeNode != null)",
      "right" : "if (typeNode != null)",
      "info" : "IfStatement[53495-53687]:IfStatement[53495-53687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53517-53687]:Block[53517-53687]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[53527-53538]:ExpressionStatement[53527-53538]"
    }, {
      "left" : "if (!match(JsDocToken.RC))",
      "right" : "if (!match(JsDocToken.RC))",
      "info" : "IfStatement[53547-53679]:IfStatement[53547-53679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53574-53644]:Block[53574-53644]"
    }, {
      "left" : "reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");",
      "right" : "reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");",
      "info" : "ExpressionStatement[53586-53634]:ExpressionStatement[53586-53634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53650-53679]:Block[53650-53679]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[53662-53669]:ExpressionStatement[53662-53669]"
    }, {
      "left" : "return typeNode;",
      "right" : "return typeNode;",
      "info" : "ReturnStatement[53695-53711]:ReturnStatement[53695-53711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53723-53765]:Block[53723-53765]"
    }, {
      "left" : "return parseTypeName(token);",
      "right" : "return parseTypeName(token);",
      "info" : "ReturnStatement[53731-53759]:ReturnStatement[53731-53759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53988-54431]:Block[53988-54431]"
    }, {
      "left" : "Node typeExpr = parseTypeExpression(token);",
      "right" : "Node typeExpr = parseTypeExpression(token);",
      "info" : "VariableDeclarationStatement[53994-54037]:VariableDeclarationStatement[53994-54037]"
    }, {
      "left" : "if (typeExpr != null)",
      "right" : "if (typeExpr != null)",
      "info" : "IfStatement[54042-54406]:IfStatement[54042-54406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54064-54406]:Block[54064-54406]"
    }, {
      "left" : "if (match(JsDocToken.PIPE))",
      "right" : "if (match(JsDocToken.PIPE))",
      "info" : "IfStatement[54110-54400]:IfStatement[54110-54400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54138-54400]:Block[54138-54400]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[54148-54155]:ExpressionStatement[54148-54155]"
    }, {
      "left" : "if (match(JsDocToken.PIPE))",
      "right" : "if (match(JsDocToken.PIPE))",
      "info" : "IfStatement[54164-54287]:IfStatement[54164-54287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54192-54287]:Block[54192-54287]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[54270-54277]:ExpressionStatement[54270-54277]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[54296-54307]:ExpressionStatement[54296-54307]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[54316-54331]:ExpressionStatement[54316-54331]"
    }, {
      "left" : "return parseUnionTypeWithAlternate(token, typeExpr);",
      "right" : "return parseUnionTypeWithAlternate(token, typeExpr);",
      "info" : "ReturnStatement[54340-54392]:ReturnStatement[54340-54392]"
    }, {
      "left" : "return typeExpr;",
      "right" : "return typeExpr;",
      "info" : "ReturnStatement[54411-54427]:ReturnStatement[54411-54427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54609-55056]:Block[54609-55056]"
    }, {
      "left" : "Node typeExpr = parseTopLevelTypeExpression(token);",
      "right" : "Node typeExpr = parseTopLevelTypeExpression(token);",
      "info" : "VariableDeclarationStatement[54615-54666]:VariableDeclarationStatement[54615-54666]"
    }, {
      "left" : "if (typeExpr == null)",
      "right" : "if (typeExpr == null)",
      "info" : "IfStatement[54671-54719]:IfStatement[54671-54719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54693-54719]:Block[54693-54719]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[54701-54713]:ReturnStatement[54701-54713]"
    }, {
      "left" : "Node typeList = new Node(Token.BLOCK);",
      "right" : "Node typeList = new Node(Token.BLOCK);",
      "info" : "VariableDeclarationStatement[54724-54762]:VariableDeclarationStatement[54724-54762]"
    }, {
      "left" : "typeList.addChildToBack(typeExpr);",
      "right" : "typeList.addChildToBack(typeExpr);",
      "info" : "ExpressionStatement[54767-54801]:ExpressionStatement[54767-54801]"
    }, {
      "left" : "while (match(JsDocToken.COMMA))",
      "right" : "while (match(JsDocToken.COMMA))",
      "info" : "WhileStatement[54806-55031]:WhileStatement[54806-55031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54838-55031]:Block[54838-55031]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[54846-54853]:ExpressionStatement[54846-54853]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[54860-54871]:ExpressionStatement[54860-54871]"
    }, {
      "left" : "typeExpr = parseTopLevelTypeExpression(next());",
      "right" : "typeExpr = parseTopLevelTypeExpression(next());",
      "info" : "ExpressionStatement[54878-54925]:ExpressionStatement[54878-54925]"
    }, {
      "left" : "if (typeExpr == null)",
      "right" : "if (typeExpr == null)",
      "info" : "IfStatement[54932-54984]:IfStatement[54932-54984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54954-54984]:Block[54954-54984]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[54964-54976]:ReturnStatement[54964-54976]"
    }, {
      "left" : "typeList.addChildToBack(typeExpr);",
      "right" : "typeList.addChildToBack(typeExpr);",
      "info" : "ExpressionStatement[54991-55025]:ExpressionStatement[54991-55025]"
    }, {
      "left" : "return typeList;",
      "right" : "return typeList;",
      "info" : "ReturnStatement[55036-55052]:ReturnStatement[55036-55052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55321-56714]:Block[55321-56714]"
    }, {
      "left" : "if (token == JsDocToken.QMARK)",
      "right" : "if (token == JsDocToken.QMARK)",
      "info" : "IfStatement[55327-56710]:IfStatement[55327-56710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55358-56214]:Block[55358-56214]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[55856-55871]:ExpressionStatement[55856-55871]"
    }, {
      "left" : "if (token == JsDocToken.COMMA ||\n          token == JsDocToken.EQUALS ||\n          token == JsDocToken.RC ||\n          token == JsDocToken.RP ||\n          token == JsDocToken.PIPE)",
      "right" : "if (token == JsDocToken.COMMA ||\n          token == JsDocToken.EQUALS ||\n          token == JsDocToken.RC ||\n          token == JsDocToken.RP ||\n          token == JsDocToken.PIPE)",
      "info" : "IfStatement[55878-56138]:IfStatement[55878-56138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56059-56138]:Block[56059-56138]"
    }, {
      "left" : "restoreLookAhead(token);",
      "right" : "restoreLookAhead(token);",
      "info" : "ExpressionStatement[56069-56093]:ExpressionStatement[56069-56093]"
    }, {
      "left" : "return newNode(Token.QMARK);",
      "right" : "return newNode(Token.QMARK);",
      "info" : "ReturnStatement[56102-56130]:ReturnStatement[56102-56130]"
    }, {
      "left" : "return wrapNode(Token.QMARK, parseBasicTypeExpression(token));",
      "right" : "return wrapNode(Token.QMARK, parseBasicTypeExpression(token));",
      "info" : "ReturnStatement[56146-56208]:ReturnStatement[56146-56208]"
    }, {
      "left" : "if (token == JsDocToken.BANG)",
      "right" : "if (token == JsDocToken.BANG)",
      "info" : "IfStatement[56220-56710]:IfStatement[56220-56710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56250-56326]:Block[56250-56326]"
    }, {
      "left" : "return wrapNode(Token.BANG, parseBasicTypeExpression(next()));",
      "right" : "return wrapNode(Token.BANG, parseBasicTypeExpression(next()));",
      "info" : "ReturnStatement[56258-56320]:ReturnStatement[56258-56320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56332-56710]:Block[56332-56710]"
    }, {
      "left" : "Node basicTypeExpr = parseBasicTypeExpression(token);",
      "right" : "Node basicTypeExpr = parseBasicTypeExpression(token);",
      "info" : "VariableDeclarationStatement[56340-56393]:VariableDeclarationStatement[56340-56393]"
    }, {
      "left" : "if (basicTypeExpr != null)",
      "right" : "if (basicTypeExpr != null)",
      "info" : "IfStatement[56400-56675]:IfStatement[56400-56675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56427-56675]:Block[56427-56675]"
    }, {
      "left" : "if (match(JsDocToken.QMARK))",
      "right" : "if (match(JsDocToken.QMARK))",
      "info" : "IfStatement[56437-56667]:IfStatement[56437-56667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56466-56550]:Block[56466-56550]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[56478-56485]:ExpressionStatement[56478-56485]"
    }, {
      "left" : "return wrapNode(Token.QMARK, basicTypeExpr);",
      "right" : "return wrapNode(Token.QMARK, basicTypeExpr);",
      "info" : "ReturnStatement[56496-56540]:ReturnStatement[56496-56540]"
    }, {
      "left" : "if (match(JsDocToken.BANG))",
      "right" : "if (match(JsDocToken.BANG))",
      "info" : "IfStatement[56556-56667]:IfStatement[56556-56667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56584-56667]:Block[56584-56667]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[56596-56603]:ExpressionStatement[56596-56603]"
    }, {
      "left" : "return wrapNode(Token.BANG, basicTypeExpr);",
      "right" : "return wrapNode(Token.BANG, basicTypeExpr);",
      "info" : "ReturnStatement[56614-56657]:ReturnStatement[56614-56657]"
    }, {
      "left" : "return basicTypeExpr;",
      "right" : "return basicTypeExpr;",
      "info" : "ReturnStatement[56683-56704]:ReturnStatement[56683-56704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57922-58724]:Block[57951-58753]"
    }, {
      "left" : "if (token != JsDocToken.STRING)",
      "right" : "if (token != JsDocToken.STRING)",
      "info" : "IfStatement[57928-58014]:IfStatement[57957-58043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57960-58014]:Block[57989-58043]"
    }, {
      "left" : "return reportGenericTypeSyntaxWarning();",
      "right" : "return reportGenericTypeSyntaxWarning();",
      "info" : "ReturnStatement[57968-58008]:ReturnStatement[57997-58037]"
    }, {
      "left" : "String typeName = stream.getString();",
      "right" : "String typeName = stream.getString();",
      "info" : "VariableDeclarationStatement[58020-58057]:VariableDeclarationStatement[58049-58086]"
    }, {
      "left" : "while (match(JsDocToken.EOL) &&\n        typeName.charAt(typeName.length() - 1) == '.')",
      "right" : "while (match(JsDocToken.EOL) &&\n        typeName.charAt(typeName.length() - 1) == '.')",
      "info" : "WhileStatement[58062-58276]:WhileStatement[58091-58305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58149-58276]:Block[58178-58305]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[58157-58168]:ExpressionStatement[58186-58197]"
    }, {
      "left" : "if (match(JsDocToken.STRING))",
      "right" : "if (match(JsDocToken.STRING))",
      "info" : "IfStatement[58175-58270]:IfStatement[58204-58299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58205-58270]:Block[58234-58299]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[58215-58222]:ExpressionStatement[58244-58251]"
    }, {
      "left" : "typeName += stream.getString();",
      "right" : "typeName += stream.getString();",
      "info" : "ExpressionStatement[58231-58262]:ExpressionStatement[58260-58291]"
    }, {
      "left" : "Node typeNameNode = newStringNode(typeName);",
      "right" : "Node typeNameNode = newStringNode(typeName);",
      "info" : "VariableDeclarationStatement[58282-58326]:VariableDeclarationStatement[58311-58355]"
    }, {
      "left" : "if (match(JsDocToken.LT))",
      "right" : "if (match(JsDocToken.LT))",
      "info" : "IfStatement[58332-58695]:IfStatement[58361-58724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58358-58695]:Block[58387-58724]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[58366-58373]:ExpressionStatement[58395-58402]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[58380-58391]:ExpressionStatement[58409-58420]"
    }, {
      "left" : "Node memberType = parseTypeExpressionList(next());",
      "right" : "Node memberType = parseTypeExpressionList(next());",
      "info" : "VariableDeclarationStatement[58398-58448]:VariableDeclarationStatement[58427-58477]"
    }, {
      "left" : "if (memberType != null)",
      "right" : "if (memberType != null)",
      "info" : "IfStatement[58455-58689]:IfStatement[58484-58718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58479-58689]:Block[58508-58718]"
    }, {
      "left" : "typeNameNode.addChildToFront(memberType);",
      "right" : "typeNameNode.addChildToFront(memberType);",
      "info" : "ExpressionStatement[58489-58530]:ExpressionStatement[58518-58559]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[58540-58551]:ExpressionStatement[58569-58580]"
    }, {
      "left" : "if (!match(JsDocToken.GT))",
      "right" : "if (!match(JsDocToken.GT))",
      "info" : "IfStatement[58560-58664]:IfStatement[58589-58693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58587-58664]:Block[58616-58693]"
    }, {
      "left" : "return reportTypeSyntaxWarning(\"msg.jsdoc.missing.gt\");",
      "right" : "return reportTypeSyntaxWarning(\"msg.jsdoc.missing.gt\");",
      "info" : "ReturnStatement[58599-58654]:ReturnStatement[58628-58683]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[58674-58681]:ExpressionStatement[58703-58710]"
    }, {
      "left" : "return typeNameNode;",
      "right" : "return typeNameNode;",
      "info" : "ReturnStatement[58700-58720]:ReturnStatement[58729-58749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62021-63866]:Block[62081-63926]"
    }, {
      "left" : "Node paramsType = newNode(Token.LP);",
      "right" : "Node paramsType = newNode(Token.LP);",
      "info" : "VariableDeclarationStatement[62027-62063]:VariableDeclarationStatement[62087-62123]"
    }, {
      "left" : "boolean isVarArgs = false;",
      "right" : "boolean isVarArgs = false;",
      "info" : "VariableDeclarationStatement[62068-62094]:VariableDeclarationStatement[62128-62154]"
    }, {
      "left" : "Node paramType = null;",
      "right" : "Node paramType = null;",
      "info" : "VariableDeclarationStatement[62099-62121]:VariableDeclarationStatement[62159-62181]"
    }, {
      "left" : "if (token != JsDocToken.RP)",
      "right" : "if (token != JsDocToken.RP)",
      "info" : "IfStatement[62126-63654]:IfStatement[62186-63714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62154-63654]:Block[62214-63714]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[62162-63648]:DoStatement[62222-63708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62165-63615]:Block[62225-63675]"
    }, {
      "left" : "if (paramType != null)",
      "right" : "if (paramType != null)",
      "info" : "IfStatement[62175-62308]:IfStatement[62235-62368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62198-62308]:Block[62258-62368]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[62243-62250]:ExpressionStatement[62303-62310]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[62261-62272]:ExpressionStatement[62321-62332]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[62283-62298]:ExpressionStatement[62343-62358]"
    }, {
      "left" : "if (token == JsDocToken.ELLIPSIS)",
      "right" : "if (token == JsDocToken.ELLIPSIS)",
      "info" : "IfStatement[62318-63442]:IfStatement[62378-63502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62352-63218]:Block[62412-63278]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[62584-62595]:ExpressionStatement[62644-62655]"
    }, {
      "left" : "if (match(JsDocToken.RP))",
      "right" : "if (match(JsDocToken.RP))",
      "info" : "IfStatement[62606-63179]:IfStatement[62666-63239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62632-62694]:Block[62692-62754]"
    }, {
      "left" : "paramType = newNode(Token.ELLIPSIS);",
      "right" : "paramType = newNode(Token.ELLIPSIS);",
      "info" : "ExpressionStatement[62646-62682]:ExpressionStatement[62706-62742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62700-63179]:Block[62760-63239]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[62714-62725]:ExpressionStatement[62774-62785]"
    }, {
      "left" : "if (!match(JsDocToken.LB))",
      "right" : "if (!match(JsDocToken.LB))",
      "info" : "IfStatement[62738-62850]:IfStatement[62798-62910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62765-62850]:Block[62825-62910]"
    }, {
      "left" : "return reportTypeSyntaxWarning(\"msg.jsdoc.missing.lb\");",
      "right" : "return reportTypeSyntaxWarning(\"msg.jsdoc.missing.lb\");",
      "info" : "ReturnStatement[62781-62836]:ReturnStatement[62841-62896]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[62864-62871]:ExpressionStatement[62924-62931]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[62884-62895]:ExpressionStatement[62944-62955]"
    }, {
      "left" : "paramType = wrapNode(Token.ELLIPSIS, parseTypeExpression(next()));",
      "right" : "paramType = wrapNode(Token.ELLIPSIS, parseTypeExpression(next()));",
      "info" : "ExpressionStatement[62908-62974]:ExpressionStatement[62968-63034]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[62987-62998]:ExpressionStatement[63047-63058]"
    }, {
      "left" : "if (!match(JsDocToken.RB))",
      "right" : "if (!match(JsDocToken.RB))",
      "info" : "IfStatement[63011-63123]:IfStatement[63071-63183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63038-63123]:Block[63098-63183]"
    }, {
      "left" : "return reportTypeSyntaxWarning(\"msg.jsdoc.missing.rb\");",
      "right" : "return reportTypeSyntaxWarning(\"msg.jsdoc.missing.rb\");",
      "info" : "ReturnStatement[63054-63109]:ReturnStatement[63114-63169]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[63136-63147]:ExpressionStatement[63196-63207]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[63160-63167]:ExpressionStatement[63220-63227]"
    }, {
      "left" : "isVarArgs = true;",
      "right" : "isVarArgs = true;",
      "info" : "ExpressionStatement[63191-63208]:ExpressionStatement[63251-63268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63224-63442]:Block[63284-63502]"
    }, {
      "left" : "paramType = parseTypeExpression(token);",
      "right" : "paramType = parseTypeExpression(token);",
      "info" : "ExpressionStatement[63236-63275]:ExpressionStatement[63296-63335]"
    }, {
      "left" : "if (match(JsDocToken.EQUALS))",
      "right" : "if (match(JsDocToken.EQUALS))",
      "info" : "IfStatement[63286-63432]:IfStatement[63346-63492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63316-63432]:Block[63376-63492]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[63330-63341]:ExpressionStatement[63390-63401]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[63354-63361]:ExpressionStatement[63414-63421]"
    }, {
      "left" : "paramType = wrapNode(Token.EQUALS, paramType);",
      "right" : "paramType = wrapNode(Token.EQUALS, paramType);",
      "info" : "ExpressionStatement[63374-63420]:ExpressionStatement[63434-63480]"
    }, {
      "left" : "if (paramType == null)",
      "right" : "if (paramType == null)",
      "info" : "IfStatement[63452-63509]:IfStatement[63512-63569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63475-63509]:Block[63535-63569]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[63487-63499]:ReturnStatement[63547-63559]"
    }, {
      "left" : "paramsType.addChildToBack(paramType);",
      "right" : "paramsType.addChildToBack(paramType);",
      "info" : "ExpressionStatement[63518-63555]:ExpressionStatement[63578-63615]"
    }, {
      "left" : "if (isVarArgs)",
      "right" : "if (isVarArgs)",
      "info" : "IfStatement[63564-63607]:IfStatement[63624-63667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63579-63607]:Block[63639-63667]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[63591-63597]:BreakStatement[63651-63657]"
    }, {
      "left" : "if (isVarArgs && match(JsDocToken.COMMA))",
      "right" : "if (isVarArgs && match(JsDocToken.COMMA))",
      "info" : "IfStatement[63660-63777]:IfStatement[63720-63837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63702-63777]:Block[63762-63837]"
    }, {
      "left" : "return reportTypeSyntaxWarning(\"msg.jsdoc.function.varargs\");",
      "right" : "return reportTypeSyntaxWarning(\"msg.jsdoc.function.varargs\");",
      "info" : "ReturnStatement[63710-63771]:ReturnStatement[63770-63831]"
    }, {
      "left" : "return paramsType;",
      "right" : "return paramsType;",
      "info" : "ReturnStatement[63844-63862]:ReturnStatement[63904-63922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63988-64305]:Block[64048-64365]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[63994-64005]:ExpressionStatement[64054-64065]"
    }, {
      "left" : "if (!match(JsDocToken.COLON))",
      "right" : "if (!match(JsDocToken.COLON))",
      "info" : "IfStatement[64010-64082]:IfStatement[64070-64142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64040-64082]:Block[64100-64142]"
    }, {
      "left" : "return newNode(Token.EMPTY);",
      "right" : "return newNode(Token.EMPTY);",
      "info" : "ReturnStatement[64048-64076]:ReturnStatement[64108-64136]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[64088-64103]:ExpressionStatement[64148-64163]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[64108-64119]:ExpressionStatement[64168-64179]"
    }, {
      "left" : "if (match(JsDocToken.STRING) && \"void\".equals(stream.getString()))",
      "right" : "if (match(JsDocToken.STRING) && \"void\".equals(stream.getString()))",
      "info" : "IfStatement[64124-64301]:IfStatement[64184-64361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64191-64246]:Block[64251-64306]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[64199-64206]:ExpressionStatement[64259-64266]"
    }, {
      "left" : "return newNode(Token.VOID);",
      "right" : "return newNode(Token.VOID);",
      "info" : "ReturnStatement[64213-64240]:ReturnStatement[64273-64300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64252-64301]:Block[64312-64361]"
    }, {
      "left" : "return parseTypeExpression(next());",
      "right" : "return parseTypeExpression(next());",
      "info" : "ReturnStatement[64260-64295]:ReturnStatement[64320-64355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64525-64583]:Block[64585-64643]"
    }, {
      "left" : "return parseUnionTypeWithAlternate(token, null);",
      "right" : "return parseUnionTypeWithAlternate(token, null);",
      "info" : "ReturnStatement[64531-64579]:ReturnStatement[64591-64639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64784-65785]:Block[64844-65845]"
    }, {
      "left" : "Node union = newNode(Token.PIPE);",
      "right" : "Node union = newNode(Token.PIPE);",
      "info" : "VariableDeclarationStatement[64790-64823]:VariableDeclarationStatement[64850-64883]"
    }, {
      "left" : "if (alternate != null)",
      "right" : "if (alternate != null)",
      "info" : "IfStatement[64828-64897]:IfStatement[64888-64957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64851-64897]:Block[64911-64957]"
    }, {
      "left" : "union.addChildToBack(alternate);",
      "right" : "union.addChildToBack(alternate);",
      "info" : "ExpressionStatement[64859-64891]:ExpressionStatement[64919-64951]"
    }, {
      "left" : "Node expr = null;",
      "right" : "Node expr = null;",
      "info" : "VariableDeclarationStatement[64903-64920]:VariableDeclarationStatement[64963-64980]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[64925-65588]:DoStatement[64985-65648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64928-65538]:Block[64988-65598]"
    }, {
      "left" : "if (expr != null)",
      "right" : "if (expr != null)",
      "info" : "IfStatement[64936-65346]:IfStatement[64996-65406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64954-65346]:Block[65014-65406]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[64964-64975]:ExpressionStatement[65024-65035]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[64984-64999]:ExpressionStatement[65044-65059]"
    }, {
      "left" : "Preconditions.checkState(\n            token == JsDocToken.PIPE || token == JsDocToken.COMMA);",
      "right" : "Preconditions.checkState(\n            token == JsDocToken.PIPE || token == JsDocToken.COMMA);",
      "info" : "ExpressionStatement[65008-65101]:ExpressionStatement[65068-65161]"
    }, {
      "left" : "boolean isPipe = token == JsDocToken.PIPE;",
      "right" : "boolean isPipe = token == JsDocToken.PIPE;",
      "info" : "VariableDeclarationStatement[65111-65153]:VariableDeclarationStatement[65171-65213]"
    }, {
      "left" : "if (isPipe && match(JsDocToken.PIPE))",
      "right" : "if (isPipe && match(JsDocToken.PIPE))",
      "info" : "IfStatement[65162-65294]:IfStatement[65222-65354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65200-65294]:Block[65260-65354]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[65277-65284]:ExpressionStatement[65337-65344]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[65303-65314]:ExpressionStatement[65363-65374]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[65323-65338]:ExpressionStatement[65383-65398]"
    }, {
      "left" : "expr = parseTypeExpression(token);",
      "right" : "expr = parseTypeExpression(token);",
      "info" : "ExpressionStatement[65353-65387]:ExpressionStatement[65413-65447]"
    }, {
      "left" : "if (expr == null)",
      "right" : "if (expr == null)",
      "info" : "IfStatement[65394-65442]:IfStatement[65454-65502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65412-65442]:Block[65472-65502]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[65422-65434]:ReturnStatement[65482-65494]"
    }, {
      "left" : "union.addChildToBack(expr);",
      "right" : "union.addChildToBack(expr);",
      "info" : "ExpressionStatement[65450-65477]:ExpressionStatement[65510-65537]"
    }, {
      "left" : "if (alternate == null)",
      "right" : "if (alternate == null)",
      "info" : "IfStatement[65594-65763]:IfStatement[65654-65823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65617-65763]:Block[65677-65823]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[65625-65636]:ExpressionStatement[65685-65696]"
    }, {
      "left" : "if (!match(JsDocToken.RP))",
      "right" : "if (!match(JsDocToken.RP))",
      "info" : "IfStatement[65643-65743]:IfStatement[65703-65803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65670-65743]:Block[65730-65803]"
    }, {
      "left" : "return reportTypeSyntaxWarning(\"msg.jsdoc.missing.rp\");",
      "right" : "return reportTypeSyntaxWarning(\"msg.jsdoc.missing.rp\");",
      "info" : "ReturnStatement[65680-65735]:ReturnStatement[65740-65795]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[65750-65757]:ExpressionStatement[65810-65817]"
    }, {
      "left" : "return union;",
      "right" : "return union;",
      "info" : "ReturnStatement[65768-65781]:ReturnStatement[65828-65841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66007-66732]:Block[66067-66792]"
    }, {
      "left" : "Node array = newNode(Token.LB);",
      "right" : "Node array = newNode(Token.LB);",
      "info" : "VariableDeclarationStatement[66013-66044]:VariableDeclarationStatement[66073-66104]"
    }, {
      "left" : "Node arg = null;",
      "right" : "Node arg = null;",
      "info" : "VariableDeclarationStatement[66049-66065]:VariableDeclarationStatement[66109-66125]"
    }, {
      "left" : "boolean hasVarArgs = false;",
      "right" : "boolean hasVarArgs = false;",
      "info" : "VariableDeclarationStatement[66070-66097]:VariableDeclarationStatement[66130-66157]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[66103-66596]:DoStatement[66163-66656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66106-66563]:Block[66166-66623]"
    }, {
      "left" : "if (arg != null)",
      "right" : "if (arg != null)",
      "info" : "IfStatement[66114-66200]:IfStatement[66174-66260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66131-66200]:Block[66191-66260]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[66141-66148]:ExpressionStatement[66201-66208]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[66157-66168]:ExpressionStatement[66217-66228]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[66177-66192]:ExpressionStatement[66237-66252]"
    }, {
      "left" : "if (token == JsDocToken.ELLIPSIS)",
      "right" : "if (token == JsDocToken.ELLIPSIS)",
      "info" : "IfStatement[66207-66403]:IfStatement[66267-66463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66241-66346]:Block[66301-66406]"
    }, {
      "left" : "arg = wrapNode(Token.ELLIPSIS, parseTypeExpression(next()));",
      "right" : "arg = wrapNode(Token.ELLIPSIS, parseTypeExpression(next()));",
      "info" : "ExpressionStatement[66251-66311]:ExpressionStatement[66311-66371]"
    }, {
      "left" : "hasVarArgs = true;",
      "right" : "hasVarArgs = true;",
      "info" : "ExpressionStatement[66320-66338]:ExpressionStatement[66380-66398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66352-66403]:Block[66412-66463]"
    }, {
      "left" : "arg = parseTypeExpression(token);",
      "right" : "arg = parseTypeExpression(token);",
      "info" : "ExpressionStatement[66362-66395]:ExpressionStatement[66422-66455]"
    }, {
      "left" : "if (arg == null)",
      "right" : "if (arg == null)",
      "info" : "IfStatement[66411-66458]:IfStatement[66471-66518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66428-66458]:Block[66488-66518]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[66438-66450]:ReturnStatement[66498-66510]"
    }, {
      "left" : "array.addChildToBack(arg);",
      "right" : "array.addChildToBack(arg);",
      "info" : "ExpressionStatement[66466-66492]:ExpressionStatement[66526-66552]"
    }, {
      "left" : "if (hasVarArgs)",
      "right" : "if (hasVarArgs)",
      "info" : "IfStatement[66499-66539]:IfStatement[66559-66599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66515-66539]:Block[66575-66599]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[66525-66531]:BreakStatement[66585-66591]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[66546-66557]:ExpressionStatement[66606-66617]"
    }, {
      "left" : "if (!match(JsDocToken.RB))",
      "right" : "if (!match(JsDocToken.RB))",
      "info" : "IfStatement[66602-66698]:IfStatement[66662-66758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66629-66698]:Block[66689-66758]"
    }, {
      "left" : "return reportTypeSyntaxWarning(\"msg.jsdoc.missing.rb\");",
      "right" : "return reportTypeSyntaxWarning(\"msg.jsdoc.missing.rb\");",
      "info" : "ReturnStatement[66637-66692]:ReturnStatement[66697-66752]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[66703-66710]:ExpressionStatement[66763-66770]"
    }, {
      "left" : "return array;",
      "right" : "return array;",
      "info" : "ReturnStatement[66715-66728]:ReturnStatement[66775-66788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66836-67222]:Block[66896-67282]"
    }, {
      "left" : "Node recordType = newNode(Token.LC);",
      "right" : "Node recordType = newNode(Token.LC);",
      "info" : "VariableDeclarationStatement[66842-66878]:VariableDeclarationStatement[66902-66938]"
    }, {
      "left" : "Node fieldTypeList = parseFieldTypeList(token);",
      "right" : "Node fieldTypeList = parseFieldTypeList(token);",
      "info" : "VariableDeclarationStatement[66883-66930]:VariableDeclarationStatement[66943-66990]"
    }, {
      "left" : "if (fieldTypeList == null)",
      "right" : "if (fieldTypeList == null)",
      "info" : "IfStatement[66936-67017]:IfStatement[66996-67077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66963-67017]:Block[67023-67077]"
    }, {
      "left" : "return reportGenericTypeSyntaxWarning();",
      "right" : "return reportGenericTypeSyntaxWarning();",
      "info" : "ReturnStatement[66971-67011]:ReturnStatement[67031-67071]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[67023-67034]:ExpressionStatement[67083-67094]"
    }, {
      "left" : "if (!match(JsDocToken.RC))",
      "right" : "if (!match(JsDocToken.RC))",
      "info" : "IfStatement[67039-67135]:IfStatement[67099-67195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67066-67135]:Block[67126-67195]"
    }, {
      "left" : "return reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");",
      "right" : "return reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");",
      "info" : "ReturnStatement[67074-67129]:ReturnStatement[67134-67189]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[67141-67148]:ExpressionStatement[67201-67208]"
    }, {
      "left" : "recordType.addChildToBack(fieldTypeList);",
      "right" : "recordType.addChildToBack(fieldTypeList);",
      "info" : "ExpressionStatement[67154-67195]:ExpressionStatement[67214-67255]"
    }, {
      "left" : "return recordType;",
      "right" : "return recordType;",
      "info" : "ReturnStatement[67200-67218]:ReturnStatement[67260-67278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67350-67826]:Block[67410-67886]"
    }, {
      "left" : "Node fieldTypeList = newNode(Token.LB);",
      "right" : "Node fieldTypeList = newNode(Token.LB);",
      "info" : "VariableDeclarationStatement[67356-67395]:VariableDeclarationStatement[67416-67455]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[67401-67795]:DoStatement[67461-67855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67404-67781]:Block[67464-67841]"
    }, {
      "left" : "Node fieldType = parseFieldType(token);",
      "right" : "Node fieldType = parseFieldType(token);",
      "info" : "VariableDeclarationStatement[67412-67451]:VariableDeclarationStatement[67472-67511]"
    }, {
      "left" : "if (fieldType == null)",
      "right" : "if (fieldType == null)",
      "info" : "IfStatement[67459-67512]:IfStatement[67519-67572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67482-67512]:Block[67542-67572]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[67492-67504]:ReturnStatement[67552-67564]"
    }, {
      "left" : "fieldTypeList.addChildToBack(fieldType);",
      "right" : "fieldTypeList.addChildToBack(fieldType);",
      "info" : "ExpressionStatement[67520-67560]:ExpressionStatement[67580-67620]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[67568-67579]:ExpressionStatement[67628-67639]"
    }, {
      "left" : "if (!match(JsDocToken.COMMA))",
      "right" : "if (!match(JsDocToken.COMMA))",
      "info" : "IfStatement[67586-67640]:IfStatement[67646-67700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67616-67640]:Block[67676-67700]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[67626-67632]:BreakStatement[67686-67692]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[67682-67689]:ExpressionStatement[67742-67749]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[67742-67753]:ExpressionStatement[67802-67813]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[67760-67775]:ExpressionStatement[67820-67835]"
    }, {
      "left" : "return fieldTypeList;",
      "right" : "return fieldTypeList;",
      "info" : "ReturnStatement[67801-67822]:ReturnStatement[67861-67882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67947-68537]:Block[68007-68597]"
    }, {
      "left" : "Node fieldName = parseFieldName(token);",
      "right" : "Node fieldName = parseFieldName(token);",
      "info" : "VariableDeclarationStatement[67953-67992]:VariableDeclarationStatement[68013-68052]"
    }, {
      "left" : "if (fieldName == null)",
      "right" : "if (fieldName == null)",
      "info" : "IfStatement[67998-68047]:IfStatement[68058-68107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68021-68047]:Block[68081-68107]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[68029-68041]:ReturnStatement[68089-68101]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[68053-68064]:ExpressionStatement[68113-68124]"
    }, {
      "left" : "if (!match(JsDocToken.COLON))",
      "right" : "if (!match(JsDocToken.COLON))",
      "info" : "IfStatement[68069-68130]:IfStatement[68129-68190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68099-68130]:Block[68159-68190]"
    }, {
      "left" : "return fieldName;",
      "right" : "return fieldName;",
      "info" : "ReturnStatement[68107-68124]:ReturnStatement[68167-68184]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[68162-68169]:ExpressionStatement[68222-68229]"
    }, {
      "left" : "skipEOLs();",
      "right" : "skipEOLs();",
      "info" : "ExpressionStatement[68254-68265]:ExpressionStatement[68314-68325]"
    }, {
      "left" : "Node typeExpression = parseTypeExpression(next());",
      "right" : "Node typeExpression = parseTypeExpression(next());",
      "info" : "VariableDeclarationStatement[68270-68320]:VariableDeclarationStatement[68330-68380]"
    }, {
      "left" : "if (typeExpression == null)",
      "right" : "if (typeExpression == null)",
      "info" : "IfStatement[68326-68380]:IfStatement[68386-68440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68354-68380]:Block[68414-68440]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[68362-68374]:ReturnStatement[68422-68434]"
    }, {
      "left" : "Node fieldType = newNode(Token.COLON);",
      "right" : "Node fieldType = newNode(Token.COLON);",
      "info" : "VariableDeclarationStatement[68386-68424]:VariableDeclarationStatement[68446-68484]"
    }, {
      "left" : "fieldType.addChildToBack(fieldName);",
      "right" : "fieldType.addChildToBack(fieldName);",
      "info" : "ExpressionStatement[68429-68465]:ExpressionStatement[68489-68525]"
    }, {
      "left" : "fieldType.addChildToBack(typeExpression);",
      "right" : "fieldType.addChildToBack(typeExpression);",
      "info" : "ExpressionStatement[68470-68511]:ExpressionStatement[68530-68571]"
    }, {
      "left" : "return fieldType;",
      "right" : "return fieldType;",
      "info" : "ReturnStatement[68516-68533]:ReturnStatement[68576-68593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68690-68860]:Block[68750-68920]"
    }, {
      "left" : "switch (token) {\n      case STRING:\n        String string = stream.getString();\n        return newStringNode(string);\n\n      default:\n        return null;\n    }",
      "right" : "switch (token) {\n      case STRING:\n        String string = stream.getString();\n        return newStringNode(string);\n\n      default:\n        return null;\n    }",
      "info" : "SwitchStatement[68696-68856]:SwitchStatement[68756-68916]"
    }, {
      "left" : "case STRING:",
      "right" : "case STRING:",
      "info" : "SwitchCase[68719-68731]:SwitchCase[68779-68791]"
    }, {
      "left" : "String string = stream.getString();",
      "right" : "String string = stream.getString();",
      "info" : "VariableDeclarationStatement[68740-68775]:VariableDeclarationStatement[68800-68835]"
    }, {
      "left" : "return newStringNode(string);",
      "right" : "return newStringNode(string);",
      "info" : "ReturnStatement[68784-68813]:ReturnStatement[68844-68873]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[68821-68829]:SwitchCase[68881-68889]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[68838-68850]:ReturnStatement[68898-68910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68904-69047]:Block[68964-69107]"
    }, {
      "left" : "return n == null ? null :\n        new Node(type, n, stream.getLineno(),\n            stream.getCharno()).clonePropsFrom(templateNode);",
      "right" : "return n == null ? null :\n        new Node(type, n, stream.getLineno(),\n            stream.getCharno()).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[68910-69043]:ReturnStatement[68970-69103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69082-69191]:Block[69142-69251]"
    }, {
      "left" : "return new Node(type, stream.getLineno(),\n        stream.getCharno()).clonePropsFrom(templateNode);",
      "right" : "return new Node(type, stream.getLineno(),\n        stream.getCharno()).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[69088-69187]:ReturnStatement[69148-69247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69232-69344]:Block[69292-69404]"
    }, {
      "left" : "return Node.newString(s, stream.getLineno(),\n        stream.getCharno()).clonePropsFrom(templateNode);",
      "right" : "return Node.newString(s, stream.getLineno(),\n        stream.getCharno()).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[69238-69340]:ReturnStatement[69298-69400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69500-69680]:Block[69560-69740]"
    }, {
      "left" : "Node templateNode = new Node(Token.SCRIPT);",
      "right" : "Node templateNode = new Node(Token.SCRIPT);",
      "info" : "VariableDeclarationStatement[69548-69591]:VariableDeclarationStatement[69608-69651]"
    }, {
      "left" : "templateNode.putProp(Node.SOURCENAME_PROP, sourceName);",
      "right" : "templateNode.putProp(Node.SOURCENAME_PROP, sourceName);",
      "info" : "ExpressionStatement[69596-69651]:ExpressionStatement[69656-69711]"
    }, {
      "left" : "return templateNode;",
      "right" : "return templateNode;",
      "info" : "ReturnStatement[69656-69676]:ReturnStatement[69716-69736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69737-69835]:Block[69797-69895]"
    }, {
      "left" : "parser.addTypeWarning(warning, stream.getLineno(), stream.getCharno());",
      "right" : "parser.addTypeWarning(warning, stream.getLineno(), stream.getCharno());",
      "info" : "ExpressionStatement[69743-69814]:ExpressionStatement[69803-69874]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[69819-69831]:ReturnStatement[69879-69891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69885-69951]:Block[69945-70011]"
    }, {
      "left" : "return reportTypeSyntaxWarning(\"msg.jsdoc.type.syntax\");",
      "right" : "return reportTypeSyntaxWarning(\"msg.jsdoc.type.syntax\");",
      "info" : "ReturnStatement[69891-69947]:ReturnStatement[69951-70007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70134-70177]:Block[70194-70237]"
    }, {
      "left" : "return eatTokensUntilEOL(next());",
      "right" : "return eatTokensUntilEOL(next());",
      "info" : "ReturnStatement[70140-70173]:ReturnStatement[70200-70233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70376-70607]:Block[70436-70667]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[70382-70603]:DoStatement[70442-70663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70385-70589]:Block[70445-70649]"
    }, {
      "left" : "if (token == JsDocToken.EOL || token == JsDocToken.EOC ||\n          token == JsDocToken.EOF)",
      "right" : "if (token == JsDocToken.EOL || token == JsDocToken.EOC ||\n          token == JsDocToken.EOF)",
      "info" : "IfStatement[70393-70561]:IfStatement[70453-70621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70486-70561]:Block[70546-70621]"
    }, {
      "left" : "state = State.SEARCHING_ANNOTATION;",
      "right" : "state = State.SEARCHING_ANNOTATION;",
      "info" : "ExpressionStatement[70496-70531]:ExpressionStatement[70556-70591]"
    }, {
      "left" : "return token;",
      "right" : "return token;",
      "info" : "ReturnStatement[70540-70553]:ReturnStatement[70600-70613]"
    }, {
      "left" : "token = next();",
      "right" : "token = next();",
      "info" : "ExpressionStatement[70568-70583]:ExpressionStatement[70628-70643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70956-70986]:Block[71016-71046]"
    }, {
      "left" : "unreadToken = token;",
      "right" : "unreadToken = token;",
      "info" : "ExpressionStatement[70962-70982]:ExpressionStatement[71022-71042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71130-71194]:Block[71190-71254]"
    }, {
      "left" : "unreadToken = next();",
      "right" : "unreadToken = next();",
      "info" : "ExpressionStatement[71136-71157]:ExpressionStatement[71196-71217]"
    }, {
      "left" : "return unreadToken == token;",
      "right" : "return unreadToken == token;",
      "info" : "ReturnStatement[71162-71190]:ReturnStatement[71222-71250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71364-71454]:Block[71424-71514]"
    }, {
      "left" : "unreadToken = next();",
      "right" : "unreadToken = next();",
      "info" : "ExpressionStatement[71370-71391]:ExpressionStatement[71430-71451]"
    }, {
      "left" : "return unreadToken == token1 || unreadToken == token2;",
      "right" : "return unreadToken == token1 || unreadToken == token2;",
      "info" : "ReturnStatement[71396-71450]:ReturnStatement[71456-71510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71603-71730]:Block[71663-71790]"
    }, {
      "left" : "if (unreadToken == NO_UNREAD_TOKEN)",
      "right" : "if (unreadToken == NO_UNREAD_TOKEN)",
      "info" : "IfStatement[71609-71726]:IfStatement[71669-71786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71645-71689]:Block[71705-71749]"
    }, {
      "left" : "return stream.getJsDocToken();",
      "right" : "return stream.getJsDocToken();",
      "info" : "ReturnStatement[71653-71683]:ReturnStatement[71713-71743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71695-71726]:Block[71755-71786]"
    }, {
      "left" : "return current();",
      "right" : "return current();",
      "info" : "ReturnStatement[71703-71720]:ReturnStatement[71763-71780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71836-71922]:Block[71896-71982]"
    }, {
      "left" : "JsDocToken t = unreadToken;",
      "right" : "JsDocToken t = unreadToken;",
      "info" : "VariableDeclarationStatement[71842-71869]:VariableDeclarationStatement[71902-71929]"
    }, {
      "left" : "unreadToken = NO_UNREAD_TOKEN;",
      "right" : "unreadToken = NO_UNREAD_TOKEN;",
      "info" : "ExpressionStatement[71874-71904]:ExpressionStatement[71934-71964]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[71909-71918]:ReturnStatement[71969-71978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72090-72211]:Block[72150-72271]"
    }, {
      "left" : "while (match(JsDocToken.EOL))",
      "right" : "while (match(JsDocToken.EOL))",
      "info" : "WhileStatement[72096-72207]:WhileStatement[72156-72267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72126-72207]:Block[72186-72267]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[72134-72141]:ExpressionStatement[72194-72201]"
    }, {
      "left" : "if (match(JsDocToken.STAR))",
      "right" : "if (match(JsDocToken.STAR))",
      "info" : "IfStatement[72148-72201]:IfStatement[72208-72261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72176-72201]:Block[72236-72261]"
    }, {
      "left" : "next();",
      "right" : "next();",
      "info" : "ExpressionStatement[72186-72193]:ExpressionStatement[72246-72253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72371-72431]:Block[72431-72491]"
    }, {
      "left" : "return jsdocBuilder.isPopulatedWithFileOverview();",
      "right" : "return jsdocBuilder.isPopulatedWithFileOverview();",
      "info" : "ReturnStatement[72377-72427]:ReturnStatement[72437-72487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72464-72508]:Block[72524-72568]"
    }, {
      "left" : "return jsdocBuilder.isPopulated();",
      "right" : "return jsdocBuilder.isPopulated();",
      "info" : "ReturnStatement[72470-72504]:ReturnStatement[72530-72564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72556-72604]:Block[72616-72664]"
    }, {
      "left" : "return jsdocBuilder.build(sourceName);",
      "right" : "return jsdocBuilder.build(sourceName);",
      "info" : "ReturnStatement[72562-72600]:ReturnStatement[72622-72660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72703-72742]:Block[72763-72802]"
    }, {
      "left" : "return fileOverviewJSDocInfo;",
      "right" : "return fileOverviewJSDocInfo;",
      "info" : "ReturnStatement[72709-72738]:ReturnStatement[72769-72798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73141-73436]:Block[73201-73496]"
    }, {
      "left" : "boolean matchedLc = false;",
      "right" : "boolean matchedLc = false;",
      "info" : "VariableDeclarationStatement[73147-73173]:VariableDeclarationStatement[73207-73233]"
    }, {
      "left" : "int c;",
      "right" : "int c;",
      "info" : "VariableDeclarationStatement[73178-73184]:VariableDeclarationStatement[73238-73244]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[73189-73385]:WhileStatement[73249-73445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73202-73385]:Block[73262-73445]"
    }, {
      "left" : "c = stream.getChar();",
      "right" : "c = stream.getChar();",
      "info" : "ExpressionStatement[73210-73231]:ExpressionStatement[73270-73291]"
    }, {
      "left" : "if (c == ' ')",
      "right" : "if (c == ' ')",
      "info" : "IfStatement[73238-73379]:IfStatement[73298-73439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73252-73279]:Block[73312-73339]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[73262-73271]:ContinueStatement[73322-73331]"
    }, {
      "left" : "if (c == '{')",
      "right" : "if (c == '{')",
      "info" : "IfStatement[73285-73379]:IfStatement[73345-73439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73299-73349]:Block[73359-73409]"
    }, {
      "left" : "matchedLc = true;",
      "right" : "matchedLc = true;",
      "info" : "ExpressionStatement[73309-73326]:ExpressionStatement[73369-73386]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[73335-73341]:BreakStatement[73395-73401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73355-73379]:Block[73415-73439]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[73365-73371]:BreakStatement[73425-73431]"
    }, {
      "left" : "stream.ungetChar(c);",
      "right" : "stream.ungetChar(c);",
      "info" : "ExpressionStatement[73390-73410]:ExpressionStatement[73450-73470]"
    }, {
      "left" : "return matchedLc;",
      "right" : "return matchedLc;",
      "info" : "ReturnStatement[73415-73432]:ReturnStatement[73475-73492]"
    } ]
  },
  "interFileMappings" : { }
}