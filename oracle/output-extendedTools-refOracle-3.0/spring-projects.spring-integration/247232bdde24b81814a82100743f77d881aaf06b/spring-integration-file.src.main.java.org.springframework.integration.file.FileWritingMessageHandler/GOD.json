{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "FileWritingMessageHandler",
      "right" : "FileWritingMessageHandler",
      "info" : "TypeDeclaration[2088-21006]:TypeDeclaration[2116-21546]"
    }, {
      "left" : "private static final String LINE_SEPARATOR = System.getProperty(\"line.separator\");",
      "right" : "private static final String LINE_SEPARATOR = System.getProperty(\"line.separator\");",
      "info" : "FieldDeclaration[3540-3622]:FieldDeclaration[3568-3650]"
    }, {
      "left" : "private volatile String temporaryFileSuffix =\".writing\";",
      "right" : "private volatile String temporaryFileSuffix = \".writing\";",
      "info" : "FieldDeclaration[3625-3681]:FieldDeclaration[3653-3710]"
    }, {
      "left" : "private volatile boolean temporaryFileSuffixSet = false;",
      "right" : "private volatile boolean temporaryFileSuffixSet = false;",
      "info" : "FieldDeclaration[3684-3740]:FieldDeclaration[3713-3769]"
    }, {
      "left" : "private volatile FileExistsMode fileExistsMode  = FileExistsMode.REPLACE;",
      "right" : "private volatile FileExistsMode fileExistsMode = FileExistsMode.REPLACE;",
      "info" : "FieldDeclaration[3743-3816]:FieldDeclaration[3772-3844]"
    }, {
      "left" : "private final Log logger = LogFactory.getLog(this.getClass());",
      "right" : "private final Log logger = LogFactory.getLog(this.getClass());",
      "info" : "FieldDeclaration[3819-3881]:FieldDeclaration[3847-3909]"
    }, {
      "left" : "private volatile FileNameGenerator fileNameGenerator = new DefaultFileNameGenerator();",
      "right" : "private volatile FileNameGenerator fileNameGenerator = new DefaultFileNameGenerator();",
      "info" : "FieldDeclaration[3884-3970]:FieldDeclaration[3912-3998]"
    }, {
      "left" : "private volatile boolean fileNameGeneratorSet;",
      "right" : "private volatile boolean fileNameGeneratorSet;",
      "info" : "FieldDeclaration[3973-4019]:FieldDeclaration[4001-4047]"
    }, {
      "left" : "private volatile StandardEvaluationContext evaluationContext;",
      "right" : "private volatile StandardEvaluationContext evaluationContext;",
      "info" : "FieldDeclaration[4022-4083]:FieldDeclaration[4050-4111]"
    }, {
      "left" : "private final Expression destinationDirectoryExpression;",
      "right" : "private final Expression destinationDirectoryExpression;",
      "info" : "FieldDeclaration[4086-4142]:FieldDeclaration[4114-4170]"
    }, {
      "left" : "private volatile boolean autoCreateDirectory = true;",
      "right" : "private volatile boolean autoCreateDirectory = true;",
      "info" : "FieldDeclaration[4145-4197]:FieldDeclaration[4173-4225]"
    }, {
      "left" : "private volatile boolean deleteSourceFiles;",
      "right" : "private volatile boolean deleteSourceFiles;",
      "info" : "FieldDeclaration[4200-4243]:FieldDeclaration[4228-4271]"
    }, {
      "left" : "private volatile Charset charset = Charset.defaultCharset();",
      "right" : "private volatile Charset charset = Charset.defaultCharset();",
      "info" : "FieldDeclaration[4246-4306]:FieldDeclaration[4274-4334]"
    }, {
      "left" : "private volatile boolean expectReply = true;",
      "right" : "private volatile boolean expectReply = true;",
      "info" : "FieldDeclaration[4309-4353]:FieldDeclaration[4337-4381]"
    }, {
      "left" : "private volatile boolean appendNewLine = false;",
      "right" : "private volatile boolean appendNewLine = false;",
      "info" : "FieldDeclaration[4356-4403]:FieldDeclaration[4384-4431]"
    }, {
      "left" : "private volatile LockRegistry lockRegistry = new PassThruLockRegistry();",
      "right" : "private volatile LockRegistry lockRegistry = new PassThruLockRegistry();",
      "info" : "FieldDeclaration[4406-4478]:FieldDeclaration[4434-4506]"
    }, {
      "left" : "public FileWritingMessageHandler(File destinationDirectory)",
      "right" : "public FileWritingMessageHandler(File destinationDirectory)",
      "info" : "MethodDeclaration[4481-4944]:MethodDeclaration[4509-4972]"
    }, {
      "left" : "public FileWritingMessageHandler(Expression destinationDirectoryExpression)",
      "right" : "public FileWritingMessageHandler(Expression destinationDirectoryExpression)",
      "info" : "MethodDeclaration[4947-5390]:MethodDeclaration[4975-5418]"
    }, {
      "left" : "public void setAutoCreateDirectory(boolean autoCreateDirectory)",
      "right" : "public void setAutoCreateDirectory(boolean autoCreateDirectory)",
      "info" : "MethodDeclaration[5393-5889]:MethodDeclaration[5421-5917]"
    }, {
      "left" : "public void setTemporaryFileSuffix(String temporaryFileSuffix)",
      "right" : "public void setTemporaryFileSuffix(String temporaryFileSuffix)",
      "info" : "MethodDeclaration[5892-6437]:MethodDeclaration[5920-6465]"
    }, {
      "left" : "public void setFileExistsMode(FileExistsMode fileExistsMode)",
      "right" : "public void setFileExistsMode(FileExistsMode fileExistsMode)",
      "info" : "MethodDeclaration[6441-7460]:MethodDeclaration[6469-7497]"
    }, {
      "left" : "public void setExpectReply(boolean expectReply)",
      "right" : "public void setExpectReply(boolean expectReply)",
      "info" : "MethodDeclaration[7463-7813]:MethodDeclaration[7500-7850]"
    }, {
      "left" : "public void setAppendNewLine(boolean appendNewLine)",
      "right" : "public void setAppendNewLine(boolean appendNewLine)",
      "info" : "MethodDeclaration[7816-8117]:MethodDeclaration[7853-8158]"
    }, {
      "left" : "protected String getTemporaryFileSuffix()",
      "right" : "protected String getTemporaryFileSuffix()",
      "info" : "MethodDeclaration[8120-8196]:MethodDeclaration[8161-8237]"
    }, {
      "left" : "public void setFileNameGenerator(FileNameGenerator fileNameGenerator)",
      "right" : "public void setFileNameGenerator(FileNameGenerator fileNameGenerator)",
      "info" : "MethodDeclaration[8199-8605]:MethodDeclaration[8240-8646]"
    }, {
      "left" : "public void setDeleteSourceFiles(boolean deleteSourceFiles)",
      "right" : "public void setDeleteSourceFiles(boolean deleteSourceFiles)",
      "info" : "MethodDeclaration[8608-9160]:MethodDeclaration[8649-9201]"
    }, {
      "left" : "public void setCharset(String charset)",
      "right" : "public void setCharset(String charset)",
      "info" : "MethodDeclaration[9163-9537]:MethodDeclaration[9204-9578]"
    }, {
      "left" : "protected void doInit()",
      "right" : "protected void doInit()",
      "info" : "MethodDeclaration[9540-10141]:MethodDeclaration[9581-10182]"
    }, {
      "left" : "private void validateDestinationDirectory(File destinationDirectory, boolean autoCreateDirectory)",
      "right" : "private void validateDestinationDirectory(File destinationDirectory, boolean autoCreateDirectory)",
      "info" : "MethodDeclaration[10144-11022]:MethodDeclaration[10185-11064]"
    }, {
      "left" : "protected Object handleRequestMessage(Message<?> requestMessage)",
      "right" : "protected Object handleRequestMessage(Message<?> requestMessage)",
      "info" : "MethodDeclaration[11025-13190]:MethodDeclaration[11067-13400]"
    }, {
      "left" : "private File retrieveOriginalFileFromHeader(Message<?> message)",
      "right" : "private File retrieveOriginalFileFromHeader(Message<?> message)",
      "info" : "MethodDeclaration[13193-13707]:MethodDeclaration[13403-13917]"
    }, {
      "left" : "private File handleFileMessage(final File sourceFile, File tempFile, final File resultFile) throws IOException",
      "right" : "private File handleFileMessage(final File sourceFile, File tempFile, final File resultFile) throws IOException",
      "info" : "MethodDeclaration[13710-15998]:MethodDeclaration[13920-14528]"
    }, {
      "left" : "protected void whileLocked() throws IOException",
      "right" : "protected void whileLocked() throws IOException",
      "info" : "MethodDeclaration[14282-14863]:MethodDeclaration[15074-15691]"
    }, {
      "left" : "private File handleByteArrayMessage(final byte[] bytes, File originalFile, File tempFile, final File resultFile) throws IOException",
      "right" : "private File handleByteArrayMessage(final byte[] bytes, File originalFile, File tempFile, final File resultFile)\n\t\t\tthrows IOException",
      "info" : "MethodDeclaration[16001-16962]:MethodDeclaration[16491-17461]"
    }, {
      "left" : "protected void whileLocked() throws IOException",
      "right" : "protected void whileLocked() throws IOException",
      "info" : "MethodDeclaration[16518-16826]:MethodDeclaration[17017-17325]"
    }, {
      "left" : "private File handleStringMessage(final String content, File originalFile, File tempFile, final File resultFile) throws IOException",
      "right" : "private File handleStringMessage(final String content, File originalFile, File tempFile, final File resultFile)\n\t\t\tthrows IOException",
      "info" : "MethodDeclaration[16965-17944]:MethodDeclaration[17464-18456]"
    }, {
      "left" : "protected void whileLocked() throws IOException",
      "right" : "protected void whileLocked() throws IOException",
      "info" : "MethodDeclaration[17510-17807]:MethodDeclaration[18022-18319]"
    }, {
      "left" : "private File determineFileToWrite(File resultFile, File tempFile",
      "right" : "private File determineFileToWrite(File resultFile, File tempFile)",
      "info" : "MethodDeclaration[17947-18361]:MethodDeclaration[18459-18875]"
    }, {
      "left" : "private void cleanUpAfterCopy(File fileToWriteTo, File resultFile, File originalFile) throws IOExceptio",
      "right" : "private void cleanUpAfterCopy(File fileToWriteTo, File resultFile, File originalFile) throws IOException",
      "info" : "MethodDeclaration[18364-18717]:MethodDeclaration[18878-19232]"
    }, {
      "left" : "private void renameTo(File tempFile, File resultFile) throws IOExceptio",
      "right" : "private void renameTo(File tempFile, File resultFile) throws IOException",
      "info" : "MethodDeclaration[18720-19622]:MethodDeclaration[19235-20158]"
    }, {
      "left" : "private File evaluateDestinationDirectoryExpression(Message<?> message)",
      "right" : "private File evaluateDestinationDirectoryExpression(Message<?> message)",
      "info" : "MethodDeclaration[19625-21003]:MethodDeclaration[20161-21543]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3452-3458]:Modifier[3480-3486]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[3459-3464]:TYPE_DECLARATION_KIND[3487-3492]"
    }, {
      "left" : "FileWritingMessageHandler",
      "right" : "FileWritingMessageHandler",
      "info" : "SimpleName[3465-3490]:SimpleName[3493-3518]"
    }, {
      "left" : "AbstractReplyProducingMessageHandler",
      "right" : "AbstractReplyProducingMessageHandler",
      "info" : "SimpleType[3499-3535]:SimpleType[3527-3563]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4702-4708]:Modifier[4730-4736]"
    }, {
      "left" : "FileWritingMessageHandler",
      "right" : "FileWritingMessageHandler",
      "info" : "SimpleName[4709-4734]:SimpleName[4737-4762]"
    }, {
      "left" : "File destinationDirectory",
      "right" : "File destinationDirectory",
      "info" : "SingleVariableDeclaration[4735-4760]:SingleVariableDeclaration[4763-4788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4762-4944]:Block[4790-4972]"
    }, {
      "left" : "Assert.notNull(destinationDirectory, \"Destination directory must not be null.\");",
      "right" : "Assert.notNull(destinationDirectory, \"Destination directory must not be null.\");",
      "info" : "ExpressionStatement[4766-4846]:ExpressionStatement[4794-4874]"
    }, {
      "left" : "this.destinationDirectoryExpression = new LiteralExpression(destinationDirectory.getPath());",
      "right" : "this.destinationDirectoryExpression = new LiteralExpression(destinationDirectory.getPath());",
      "info" : "ExpressionStatement[4849-4941]:ExpressionStatement[4877-4969]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5134-5140]:Modifier[5162-5168]"
    }, {
      "left" : "FileWritingMessageHandler",
      "right" : "FileWritingMessageHandler",
      "info" : "SimpleName[5141-5166]:SimpleName[5169-5194]"
    }, {
      "left" : "Expression destinationDirectoryExpression",
      "right" : "Expression destinationDirectoryExpression",
      "info" : "SingleVariableDeclaration[5167-5208]:SingleVariableDeclaration[5195-5236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5210-5390]:Block[5238-5418]"
    }, {
      "left" : "Assert.notNull(destinationDirectoryExpression, \"Destination directory expression must not be null.\");",
      "right" : "Assert.notNull(destinationDirectoryExpression, \"Destination directory expression must not be null.\");",
      "info" : "ExpressionStatement[5214-5315]:ExpressionStatement[5242-5343]"
    }, {
      "left" : "this.destinationDirectoryExpression = destinationDirectoryExpression;",
      "right" : "this.destinationDirectoryExpression = destinationDirectoryExpression;",
      "info" : "ExpressionStatement[5318-5387]:ExpressionStatement[5346-5415]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5771-5777]:Modifier[5799-5805]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5778-5782]:PrimitiveType[5806-5810]"
    }, {
      "left" : "setAutoCreateDirectory",
      "right" : "setAutoCreateDirectory",
      "info" : "SimpleName[5783-5805]:SimpleName[5811-5833]"
    }, {
      "left" : "boolean autoCreateDirectory",
      "right" : "boolean autoCreateDirectory",
      "info" : "SingleVariableDeclaration[5806-5833]:SingleVariableDeclaration[5834-5861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5835-5889]:Block[5863-5917]"
    }, {
      "left" : "this.autoCreateDirectory = autoCreateDirectory;",
      "right" : "this.autoCreateDirectory = autoCreateDirectory;",
      "info" : "ExpressionStatement[5839-5886]:ExpressionStatement[5867-5914]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6179-6185]:Modifier[6207-6213]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6186-6190]:PrimitiveType[6214-6218]"
    }, {
      "left" : "setTemporaryFileSuffix",
      "right" : "setTemporaryFileSuffix",
      "info" : "SimpleName[6191-6213]:SimpleName[6219-6241]"
    }, {
      "left" : "String temporaryFileSuffix",
      "right" : "String temporaryFileSuffix",
      "info" : "SingleVariableDeclaration[6214-6240]:SingleVariableDeclaration[6242-6268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6242-6437]:Block[6270-6465]"
    }, {
      "left" : "Assert.notNull(temporaryFileSuffix, \"'temporaryFileSuffix' must not be null\");",
      "right" : "Assert.notNull(temporaryFileSuffix, \"'temporaryFileSuffix' must not be null\");",
      "info" : "ExpressionStatement[6246-6324]:ExpressionStatement[6274-6352]"
    }, {
      "left" : "this.temporaryFileSuffix = temporaryFileSuffix;",
      "right" : "this.temporaryFileSuffix = temporaryFileSuffix;",
      "info" : "ExpressionStatement[6349-6396]:ExpressionStatement[6377-6424]"
    }, {
      "left" : "this.temporaryFileSuffixSet = true;",
      "right" : "this.temporaryFileSuffixSet = true;",
      "info" : "ExpressionStatement[6399-6434]:ExpressionStatement[6427-6462]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7092-7098]:Modifier[7128-7134]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7099-7103]:PrimitiveType[7135-7139]"
    }, {
      "left" : "setFileExistsMode",
      "right" : "setFileExistsMode",
      "info" : "SimpleName[7104-7121]:SimpleName[7140-7157]"
    }, {
      "left" : "FileExistsMode fileExistsMode",
      "right" : "FileExistsMode fileExistsMode",
      "info" : "SingleVariableDeclaration[7122-7151]:SingleVariableDeclaration[7158-7187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7153-7460]:Block[7189-7497]"
    }, {
      "left" : "Assert.notNull(fileExistsMode, \"'fileExistsMode' must not be null.\");",
      "right" : "Assert.notNull(fileExistsMode, \"'fileExistsMode' must not be null.\");",
      "info" : "ExpressionStatement[7158-7227]:ExpressionStatement[7194-7263]"
    }, {
      "left" : "this.fileExistsMode = fileExistsMode;",
      "right" : "this.fileExistsMode = fileExistsMode;",
      "info" : "ExpressionStatement[7230-7267]:ExpressionStatement[7266-7303]"
    }, {
      "left" : "if (FileExistsMode.APPEND.equals(fileExistsMode))",
      "right" : "if (FileExistsMode.APPEND.equals(fileExistsMode))",
      "info" : "IfStatement[7271-7457]:IfStatement[7307-7494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7320-7457]:Block[7357-7494]"
    }, {
      "left" : "this.lockRegistry = this.lockRegistry instanceof PassThruLockRegistry\n\t\t\t\t\t? new DefaultLockRegistry()\n\t\t\t\t\t: this.lockRegistry;",
      "right" : "this.lockRegistry = this.lockRegistry instanceof PassThruLockRegistry\n\t\t\t\t\t? new DefaultLockRegistry()\n\t\t\t\t\t: this.lockRegistry;",
      "info" : "ExpressionStatement[7325-7453]:ExpressionStatement[7362-7490]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7727-7733]:Modifier[7764-7770]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7734-7738]:PrimitiveType[7771-7775]"
    }, {
      "left" : "setExpectReply",
      "right" : "setExpectReply",
      "info" : "SimpleName[7739-7753]:SimpleName[7776-7790]"
    }, {
      "left" : "boolean expectReply",
      "right" : "boolean expectReply",
      "info" : "SingleVariableDeclaration[7754-7773]:SingleVariableDeclaration[7791-7810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7775-7813]:Block[7812-7850]"
    }, {
      "left" : "this.expectReply = expectReply;",
      "right" : "this.expectReply = expectReply;",
      "info" : "ExpressionStatement[7779-7810]:ExpressionStatement[7816-7847]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8023-8029]:Modifier[8064-8070]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8030-8034]:PrimitiveType[8071-8075]"
    }, {
      "left" : "setAppendNewLine",
      "right" : "setAppendNewLine",
      "info" : "SimpleName[8035-8051]:SimpleName[8076-8092]"
    }, {
      "left" : "boolean appendNewLine",
      "right" : "boolean appendNewLine",
      "info" : "SingleVariableDeclaration[8052-8073]:SingleVariableDeclaration[8093-8114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8075-8117]:Block[8116-8158]"
    }, {
      "left" : "this.appendNewLine = appendNewLine;",
      "right" : "this.appendNewLine = appendNewLine;",
      "info" : "ExpressionStatement[8079-8114]:ExpressionStatement[8120-8155]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[8120-8129]:Modifier[8161-8170]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[8130-8136]:SimpleType[8171-8177]"
    }, {
      "left" : "getTemporaryFileSuffix",
      "right" : "getTemporaryFileSuffix",
      "info" : "SimpleName[8137-8159]:SimpleName[8178-8200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8162-8196]:Block[8203-8237]"
    }, {
      "left" : "return temporaryFileSuffix;",
      "right" : "return temporaryFileSuffix;",
      "info" : "ReturnStatement[8166-8193]:ReturnStatement[8207-8234]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8374-8380]:Modifier[8415-8421]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8381-8385]:PrimitiveType[8422-8426]"
    }, {
      "left" : "setFileNameGenerator",
      "right" : "setFileNameGenerator",
      "info" : "SimpleName[8386-8406]:SimpleName[8427-8447]"
    }, {
      "left" : "FileNameGenerator fileNameGenerator",
      "right" : "FileNameGenerator fileNameGenerator",
      "info" : "SingleVariableDeclaration[8407-8442]:SingleVariableDeclaration[8448-8483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8444-8605]:Block[8485-8646]"
    }, {
      "left" : "Assert.notNull(fileNameGenerator, \"FileNameGenerator must not be null\");",
      "right" : "Assert.notNull(fileNameGenerator, \"FileNameGenerator must not be null\");",
      "info" : "ExpressionStatement[8448-8520]:ExpressionStatement[8489-8561]"
    }, {
      "left" : "this.fileNameGenerator = fileNameGenerator;",
      "right" : "this.fileNameGenerator = fileNameGenerator;",
      "info" : "ExpressionStatement[8523-8566]:ExpressionStatement[8564-8607]"
    }, {
      "left" : "this.fileNameGeneratorSet = true;",
      "right" : "this.fileNameGeneratorSet = true;",
      "info" : "ExpressionStatement[8569-8602]:ExpressionStatement[8610-8643]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9050-9056]:Modifier[9091-9097]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9057-9061]:PrimitiveType[9098-9102]"
    }, {
      "left" : "setDeleteSourceFiles",
      "right" : "setDeleteSourceFiles",
      "info" : "SimpleName[9062-9082]:SimpleName[9103-9123]"
    }, {
      "left" : "boolean deleteSourceFiles",
      "right" : "boolean deleteSourceFiles",
      "info" : "SingleVariableDeclaration[9083-9108]:SingleVariableDeclaration[9124-9149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9110-9160]:Block[9151-9201]"
    }, {
      "left" : "this.deleteSourceFiles = deleteSourceFiles;",
      "right" : "this.deleteSourceFiles = deleteSourceFiles;",
      "info" : "ExpressionStatement[9114-9157]:ExpressionStatement[9155-9198]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9302-9308]:Modifier[9343-9349]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9309-9313]:PrimitiveType[9350-9354]"
    }, {
      "left" : "setCharset",
      "right" : "setCharset",
      "info" : "SimpleName[9314-9324]:SimpleName[9355-9365]"
    }, {
      "left" : "String charset",
      "right" : "String charset",
      "info" : "SingleVariableDeclaration[9325-9339]:SingleVariableDeclaration[9366-9380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9341-9537]:Block[9382-9578]"
    }, {
      "left" : "Assert.notNull(charset, \"charset must not be null\");",
      "right" : "Assert.notNull(charset, \"charset must not be null\");",
      "info" : "ExpressionStatement[9345-9397]:ExpressionStatement[9386-9438]"
    }, {
      "left" : "Assert.isTrue(Charset.isSupported(charset), \"Charset '\" + charset + \"' is not supported.\");",
      "right" : "Assert.isTrue(Charset.isSupported(charset), \"Charset '\" + charset + \"' is not supported.\");",
      "info" : "ExpressionStatement[9400-9491]:ExpressionStatement[9441-9532]"
    }, {
      "left" : "this.charset = Charset.forName(charset);",
      "right" : "this.charset = Charset.forName(charset);",
      "info" : "ExpressionStatement[9494-9534]:ExpressionStatement[9535-9575]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9540-9549]:MarkerAnnotation[9581-9590]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[9551-9560]:Modifier[9592-9601]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9561-9565]:PrimitiveType[9602-9606]"
    }, {
      "left" : "doInit",
      "right" : "doInit",
      "info" : "SimpleName[9566-9572]:SimpleName[9607-9613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9575-10141]:Block[9616-10182]"
    }, {
      "left" : "this.evaluationContext = ExpressionUtils.createStandardEvaluationContext(this.getBeanFactory());",
      "right" : "this.evaluationContext = ExpressionUtils.createStandardEvaluationContext(this.getBeanFactory());",
      "info" : "ExpressionStatement[9580-9676]:ExpressionStatement[9621-9717]"
    }, {
      "left" : "if (this.destinationDirectoryExpression instanceof LiteralExpression)",
      "right" : "if (this.destinationDirectoryExpression instanceof LiteralExpression)",
      "info" : "IfStatement[9680-9957]:IfStatement[9721-9998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9750-9957]:Block[9791-9998]"
    }, {
      "left" : "final File directory = new File(this.destinationDirectoryExpression.getValue(\n\t\t\t\t\tthis.evaluationContext, null, String.class));",
      "right" : "final File directory = new File(this.destinationDirectoryExpression.getValue(\n\t\t\t\t\tthis.evaluationContext, null, String.class));",
      "info" : "VariableDeclarationStatement[9755-9883]:VariableDeclarationStatement[9796-9924]"
    }, {
      "left" : "validateDestinationDirectory(directory, this.autoCreateDirectory);",
      "right" : "validateDestinationDirectory(directory, this.autoCreateDirectory);",
      "info" : "ExpressionStatement[9887-9953]:ExpressionStatement[9928-9994]"
    }, {
      "left" : "if (!this.fileNameGeneratorSet && this.fileNameGenerator instanceof BeanFactoryAware)",
      "right" : "if (!this.fileNameGeneratorSet && this.fileNameGenerator instanceof BeanFactoryAware)",
      "info" : "IfStatement[9961-10138]:IfStatement[10002-10179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10047-10138]:Block[10088-10179]"
    }, {
      "left" : "((BeanFactoryAware) this.fileNameGenerator).setBeanFactory(this.getBeanFactory());",
      "right" : "((BeanFactoryAware) this.fileNameGenerator).setBeanFactory(this.getBeanFactory());",
      "info" : "ExpressionStatement[10052-10134]:ExpressionStatement[10093-10175]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10144-10151]:Modifier[10185-10192]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10152-10156]:PrimitiveType[10193-10197]"
    }, {
      "left" : "validateDestinationDirectory",
      "right" : "validateDestinationDirectory",
      "info" : "SimpleName[10157-10185]:SimpleName[10198-10226]"
    }, {
      "left" : "File destinationDirectory",
      "right" : "File destinationDirectory",
      "info" : "SingleVariableDeclaration[10186-10211]:SingleVariableDeclaration[10227-10252]"
    }, {
      "left" : "boolean autoCreateDirectory",
      "right" : "boolean autoCreateDirectory",
      "info" : "SingleVariableDeclaration[10213-10240]:SingleVariableDeclaration[10254-10281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10242-11022]:Block[10283-11064]"
    }, {
      "left" : "if (!destinationDirectory.exists() && autoCreateDirectory)",
      "right" : "if (!destinationDirectory.exists() && autoCreateDirectory)",
      "info" : "IfStatement[10247-10442]:IfStatement[10288-10484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10306-10442]:Block[10347-10484]"
    }, {
      "left" : "Assert.isTrue(destinationDirectory.mkdirs(),\n\t\t\t\t\"Destination directory [\" + destinationDirectory + \"] could not be created.\");",
      "right" : "Assert.isTrue(destinationDirectory.mkdirs(),\n\t\t\t\t\t\"Destination directory [\" + destinationDirectory + \"] could not be created.\");",
      "info" : "ExpressionStatement[10311-10438]:ExpressionStatement[10352-10480]"
    }, {
      "left" : "Assert.isTrue(destinationDirectory.exists(),\n\t\t\t\t\"Destination directory [\" + destinationDirectory + \"] does not exist.\");",
      "right" : "Assert.isTrue(destinationDirectory.exists(),\n\t\t\t\t\"Destination directory [\" + destinationDirectory + \"] does not exist.\");",
      "info" : "ExpressionStatement[10446-10567]:ExpressionStatement[10488-10609]"
    }, {
      "left" : "Assert.isTrue(destinationDirectory.isDirectory(),\n\t\t\t\t\"Destination path [\" + destinationDirectory + \"] does not point to a directory.\");",
      "right" : "Assert.isTrue(destinationDirectory.isDirectory(),\n\t\t\t\t\"Destination path [\" + destinationDirectory + \"] does not point to a directory.\");",
      "info" : "ExpressionStatement[10570-10706]:ExpressionStatement[10612-10748]"
    }, {
      "left" : "Assert.isTrue(destinationDirectory.canWrite(),\n\t\t\t\t\"Destination directory [\" + destinationDirectory + \"] is not writable.\");",
      "right" : "Assert.isTrue(destinationDirectory.canWrite(),\n\t\t\t\t\"Destination directory [\" + destinationDirectory + \"] is not writable.\");",
      "info" : "ExpressionStatement[10709-10833]:ExpressionStatement[10751-10875]"
    }, {
      "left" : "Assert.state(!(this.temporaryFileSuffixSet\n\t\t\t\t\t\t&& FileExistsMode.APPEND.equals(this.fileExistsMode)),\n\t\t\t\t\"'temporaryFileSuffix' can not be set when appending to an existing file\");",
      "right" : "Assert.state(!(this.temporaryFileSuffixSet\n\t\t\t\t\t\t&& FileExistsMode.APPEND.equals(this.fileExistsMode)),\n\t\t\t\t\"'temporaryFileSuffix' can not be set when appending to an existing file\");",
      "info" : "ExpressionStatement[10836-11019]:ExpressionStatement[10878-11061]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11025-11034]:MarkerAnnotation[11067-11076]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[11036-11045]:Modifier[11078-11087]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[11046-11052]:SimpleType[11088-11094]"
    }, {
      "left" : "handleRequestMessage",
      "right" : "handleRequestMessage",
      "info" : "SimpleName[11053-11073]:SimpleName[11095-11115]"
    }, {
      "left" : "Message<?> requestMessage",
      "right" : "Message<?> requestMessage",
      "info" : "SingleVariableDeclaration[11074-11099]:SingleVariableDeclaration[11116-11141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11101-13190]:Block[11143-13400]"
    }, {
      "left" : "Assert.notNull(requestMessage, \"message must not be null\");",
      "right" : "Assert.notNull(requestMessage, \"message must not be null\");",
      "info" : "ExpressionStatement[11105-11164]:ExpressionStatement[11147-11206]"
    }, {
      "left" : "Object payload = requestMessage.getPayload();",
      "right" : "Object payload = requestMessage.getPayload();",
      "info" : "VariableDeclarationStatement[11167-11212]:VariableDeclarationStatement[11209-11254]"
    }, {
      "left" : "Assert.notNull(payload, \"message payload must not be null\");",
      "right" : "Assert.notNull(payload, \"message payload must not be null\");",
      "info" : "ExpressionStatement[11215-11275]:ExpressionStatement[11257-11317]"
    }, {
      "left" : "String generatedFileName = this.fileNameGenerator.generateFileName(requestMessage);",
      "right" : "String generatedFileName = this.fileNameGenerator.generateFileName(requestMessage);",
      "info" : "VariableDeclarationStatement[11278-11361]:VariableDeclarationStatement[11320-11403]"
    }, {
      "left" : "File originalFileFromHeader = this.retrieveOriginalFileFromHeader(requestMessage);",
      "right" : "File originalFileFromHeader = retrieveOriginalFileFromHeader(requestMessage);",
      "info" : "VariableDeclarationStatement[11364-11446]:VariableDeclarationStatement[11406-11483]"
    }, {
      "left" : "final File destinationDirectoryToUse = evaluateDestinationDirectoryExpression(requestMessage);",
      "right" : "final File destinationDirectoryToUse = evaluateDestinationDirectoryExpression(requestMessage);",
      "info" : "VariableDeclarationStatement[11450-11544]:VariableDeclarationStatement[11487-11581]"
    }, {
      "left" : "File tempFile = new File(destinationDirectoryToUse, generatedFileName + temporaryFileSuffix);",
      "right" : "File tempFile = new File(destinationDirectoryToUse, generatedFileName + this.temporaryFileSuffix);",
      "info" : "VariableDeclarationStatement[11548-11641]:VariableDeclarationStatement[11585-11683]"
    }, {
      "left" : "temporaryFileSuffix",
      "right" : "temporaryFileSuffix",
      "info" : "SimpleName[11620-11639]:SimpleName[11662-11681]"
    }, {
      "left" : "File resultFile = new File(destinationDirectoryToUse, generatedFileName);",
      "right" : "File resultFile = new File(destinationDirectoryToUse, generatedFileName);",
      "info" : "VariableDeclarationStatement[11644-11717]:VariableDeclarationStatement[11686-11759]"
    }, {
      "left" : "if (FileExistsMode.FAIL.equals(this.fileExistsMode) && resultFile.exists())",
      "right" : "if (FileExistsMode.FAIL.equals(this.fileExistsMode) && resultFile.exists())",
      "info" : "IfStatement[11721-11944]:IfStatement[11763-11986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11797-11944]:Block[11839-11986]"
    }, {
      "left" : "throw new MessageHandlingException(requestMessage,\n\t\t\t\t\t\"The destination file already exists at '\" + resultFile.getAbsolutePath() + \"'.\");",
      "right" : "throw new MessageHandlingException(requestMessage,\n\t\t\t\t\t\"The destination file already exists at '\" + resultFile.getAbsolutePath() + \"'.\");",
      "info" : "ThrowStatement[11802-11940]:ThrowStatement[11844-11982]"
    }, {
      "left" : "final boolean ignore = FileExistsMode.IGNORE.equals(this.fileExistsMode) &&\n\t\t\t\t(resultFile.exists() ||\n\t\t\t\t\t\t(StringUtils.hasText(this.temporaryFileSuffix) && tempFile.exists()));",
      "right" : "final boolean ignore = FileExistsMode.IGNORE.equals(this.fileExistsMode) &&\n\t\t\t\t(resultFile.exists() ||\n\t\t\t\t\t\t(StringUtils.hasText(this.temporaryFileSuffix) && tempFile.exists()));",
      "info" : "VariableDeclarationStatement[11948-12128]:VariableDeclarationStatement[11990-12170]"
    }, {
      "left" : "if (!ignore)",
      "right" : "if (!ignore)",
      "info" : "IfStatement[12132-12891]:IfStatement[12174-13101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12145-12891]:Block[12187-13101]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12151-12886]:TryStatement[12193-13096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12155-12754]:Block[12197-12964]"
    }, {
      "left" : "if (payload instanceof File)",
      "right" : "if (payload instanceof File)",
      "info" : "IfStatement[12161-12749]:IfStatement[12203-12959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12190-12277]:Block[12232-12314]"
    }, {
      "left" : "resultFile = this.handleFileMessage((File) payload, tempFile, resultFile);",
      "right" : "resultFile = handleFileMessage((File) payload, tempFile, resultFile);",
      "info" : "ExpressionStatement[12197-12271]:ExpressionStatement[12239-12308]"
    }, {
      "left" : "if (payload instanceof byte[])",
      "right" : "if (payload instanceof byte[])",
      "info" : "IfStatement[12287-12749]:IfStatement[12497-12959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12318-12444]:Block[12528-12654]"
    }, {
      "left" : "resultFile = this.handleByteArrayMessage(\n\t\t\t\t\t\t\t(byte[]) payload, originalFileFromHeader, tempFile, resultFile);",
      "right" : "resultFile = this.handleByteArrayMessage(\n\t\t\t\t\t\t\t(byte[]) payload, originalFileFromHeader, tempFile, resultFile);",
      "info" : "ExpressionStatement[12325-12438]:ExpressionStatement[12535-12648]"
    }, {
      "left" : "if (payload instanceof String)",
      "right" : "if (payload instanceof String)",
      "info" : "IfStatement[12454-12749]:IfStatement[12664-12959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12485-12608]:Block[12695-12818]"
    }, {
      "left" : "resultFile = this.handleStringMessage(\n\t\t\t\t\t\t\t(String) payload, originalFileFromHeader, tempFile, resultFile);",
      "right" : "resultFile = this.handleStringMessage(\n\t\t\t\t\t\t\t(String) payload, originalFileFromHeader, tempFile, resultFile);",
      "info" : "ExpressionStatement[12492-12602]:ExpressionStatement[12702-12812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12618-12749]:Block[12828-12959]"
    }, {
      "left" : "throw new IllegalArgumentException(\n\t\t\t\t\t\t\t\"unsupported Message payload type [\" + payload.getClass().getName() + \"]\");",
      "right" : "throw new IllegalArgumentException(\n\t\t\t\t\t\t\t\"unsupported Message payload type [\" + payload.getClass().getName() + \"]\");",
      "info" : "ThrowStatement[12625-12743]:ThrowStatement[12835-12953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12778-12886]:Block[12988-13096]"
    }, {
      "left" : "throw new MessageHandlingException(requestMessage, \"failed to write Message payload to file\", e);",
      "right" : "throw new MessageHandlingException(requestMessage, \"failed to write Message payload to file\", e);",
      "info" : "ThrowStatement[12784-12881]:ThrowStatement[12994-13091]"
    }, {
      "left" : "if (!this.expectReply)",
      "right" : "if (!this.expectReply)",
      "info" : "IfStatement[12895-12939]:IfStatement[13105-13149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12918-12939]:Block[13128-13149]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12923-12935]:ReturnStatement[13133-13145]"
    }, {
      "left" : "if (resultFile != null)",
      "right" : "if (resultFile != null)",
      "info" : "IfStatement[12943-13166]:IfStatement[13153-13376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12967-13166]:Block[13177-13376]"
    }, {
      "left" : "if (originalFileFromHeader == null && payload instanceof File)",
      "right" : "if (originalFileFromHeader == null && payload instanceof File)",
      "info" : "IfStatement[12972-13162]:IfStatement[13182-13372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13035-13162]:Block[13245-13372]"
    }, {
      "left" : "return this.getMessageBuilderFactory().withPayload(resultFile)\n\t\t\t\t\t\t.setHeader(FileHeaders.ORIGINAL_FILE, payload);",
      "right" : "return this.getMessageBuilderFactory().withPayload(resultFile)\n\t\t\t\t\t\t.setHeader(FileHeaders.ORIGINAL_FILE, payload);",
      "info" : "ReturnStatement[13041-13157]:ReturnStatement[13251-13367]"
    }, {
      "left" : "return resultFile;",
      "right" : "return resultFile;",
      "info" : "ReturnStatement[13169-13187]:ReturnStatement[13379-13397]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13422-13429]:Modifier[13632-13639]"
    }, {
      "left" : "File",
      "right" : "File",
      "info" : "SimpleType[13430-13434]:SimpleType[13640-13644]"
    }, {
      "left" : "retrieveOriginalFileFromHeader",
      "right" : "retrieveOriginalFileFromHeader",
      "info" : "SimpleName[13435-13465]:SimpleName[13645-13675]"
    }, {
      "left" : "Message<?> message",
      "right" : "Message<?> message",
      "info" : "SingleVariableDeclaration[13466-13484]:SingleVariableDeclaration[13676-13694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13486-13707]:Block[13696-13917]"
    }, {
      "left" : "Object value = message.getHeaders().get(FileHeaders.ORIGINAL_FILE);",
      "right" : "Object value = message.getHeaders().get(FileHeaders.ORIGINAL_FILE);",
      "info" : "VariableDeclarationStatement[13490-13557]:VariableDeclarationStatement[13700-13767]"
    }, {
      "left" : "if (value instanceof File)",
      "right" : "if (value instanceof File)",
      "info" : "IfStatement[13560-13616]:IfStatement[13770-13826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13587-13616]:Block[13797-13826]"
    }, {
      "left" : "return (File) value;",
      "right" : "return (File) value;",
      "info" : "ReturnStatement[13592-13612]:ReturnStatement[13802-13822]"
    }, {
      "left" : "if (value instanceof String)",
      "right" : "if (value instanceof String)",
      "info" : "IfStatement[13619-13689]:IfStatement[13829-13899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13648-13689]:Block[13858-13899]"
    }, {
      "left" : "return new File((String) value);",
      "right" : "return new File((String) value);",
      "info" : "ReturnStatement[13653-13685]:ReturnStatement[13863-13895]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[13692-13704]:ReturnStatement[13902-13914]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13710-13717]:Modifier[13920-13927]"
    }, {
      "left" : "File",
      "right" : "File",
      "info" : "SimpleType[13718-13722]:SimpleType[13928-13932]"
    }, {
      "left" : "handleFileMessage",
      "right" : "handleFileMessage",
      "info" : "SimpleName[13723-13740]:SimpleName[13933-13950]"
    }, {
      "left" : "final File sourceFile",
      "right" : "final File sourceFile",
      "info" : "SingleVariableDeclaration[13741-13762]:SingleVariableDeclaration[13951-13972]"
    }, {
      "left" : "File tempFile",
      "right" : "File tempFile",
      "info" : "SingleVariableDeclaration[13764-13777]:SingleVariableDeclaration[13974-13987]"
    }, {
      "left" : "final File resultFile",
      "right" : "final File resultFile",
      "info" : "SingleVariableDeclaration[13779-13800]:SingleVariableDeclaration[13989-14010]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13809-13820]:SimpleType[14019-14030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13821-15998]:Block[14031-14528]"
    }, {
      "left" : "if (FileExistsMode.APPEND.equals(this.fileExistsMode))",
      "right" : "if (FileExistsMode.APPEND.equals(this.fileExistsMode))",
      "info" : "IfStatement[13825-15995]:IfStatement[14702-16485]"
    }, {
      "left" : "FileExistsMode.APPEND.equals(this.fileExistsMode)",
      "right" : "FileExistsMode.APPEND.equals(this.fileExistsMode)",
      "info" : "MethodInvocation[13829-13878]:MethodInvocation[14040-14089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13880-15001]:Block[14757-15827]"
    }, {
      "left" : "File fileToWriteTo = this.determineFileToWrite(resultFile, tempFile);",
      "right" : "File fileToWriteTo = this.determineFileToWrite(resultFile, tempFile);",
      "info" : "VariableDeclarationStatement[13885-13954]:VariableDeclarationStatement[14762-14831]"
    }, {
      "left" : "final BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(fileToWriteTo, true));",
      "right" : "final BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(fileToWriteTo, true));",
      "info" : "VariableDeclarationStatement[13958-14059]:VariableDeclarationStatement[14835-14936]"
    }, {
      "left" : "final BufferedInputStream bis = new BufferedInputStream(new FileInputStream(sourceFile));",
      "right" : "final BufferedInputStream bis = new BufferedInputStream(new FileInputStream(sourceFile));",
      "info" : "VariableDeclarationStatement[14063-14152]:VariableDeclarationStatement[14362-14451]"
    }, {
      "left" : "WhileLockedProcessor whileLockedProcessor = new WhileLockedProcessor(this.lockRegistry, fileToWriteTo.getAbsolutePath()){\n\t\t\t\t@Override\n\t\t\t\tprotected void whileLocked() throws IOException {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tbyte[] buffer = new byte[StreamUtils.BUFFER_SIZE];\n\t\t\t\t\t\tint bytesRead = -1;\n\t\t\t\t\t\twhile ((bytesRead = bis.read(buffer)) != -1) {\n\t\t\t\t\t\t\tbos.write(buffer, 0, bytesRead);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (FileWritingMessageHandler.this.appendNewLine) {\n\t\t\t\t\t\t\tbos.write(LINE_SEPARATOR.getBytes());\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbos.flush();\n\t\t\t\t\t}\n\t\t\t\t\tfinally {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tbis.close();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (IOException ex) {\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tbos.close();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (IOException ex) {\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};",
      "right" : "WhileLockedProcessor whileLockedProcessor = new WhileLockedProcessor(this.lockRegistry,\n\t\t\t\t\tfileToWriteTo.getAbsolutePath()) {\n\n\t\t\t\t@Override\n\t\t\t\tprotected void whileLocked() throws IOException {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tbyte[] buffer = new byte[StreamUtils.BUFFER_SIZE];\n\t\t\t\t\t\tint bytesRead = -1;\n\t\t\t\t\t\twhile ((bytesRead = sourceFileInputStream.read(buffer)) != -1) {\n\t\t\t\t\t\t\tbos.write(buffer, 0, bytesRead);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (FileWritingMessageHandler.this.appendNewLine) {\n\t\t\t\t\t\t\tbos.write(LINE_SEPARATOR.getBytes());\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbos.flush();\n\t\t\t\t\t}\n\t\t\t\t\tfinally {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tsourceFileInputStream.close();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (IOException ex) {\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tbos.close();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (IOException ex) {\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t};",
      "info" : "VariableDeclarationStatement[14156-14869]:VariableDeclarationStatement[14941-15698]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14282-14291]:MarkerAnnotation[15074-15083]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[14296-14305]:Modifier[15088-15097]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14306-14310]:PrimitiveType[15098-15102]"
    }, {
      "left" : "whileLocked",
      "right" : "whileLocked",
      "info" : "SimpleName[14311-14322]:SimpleName[15103-15114]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14332-14343]:SimpleType[15124-15135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14344-14863]:Block[15136-15691]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[14351-14857]:TryStatement[15143-15685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14355-14677]:Block[15147-15487]"
    }, {
      "left" : "byte[] buffer = new byte[StreamUtils.BUFFER_SIZE];",
      "right" : "byte[] buffer = new byte[StreamUtils.BUFFER_SIZE];",
      "info" : "VariableDeclarationStatement[14363-14413]:VariableDeclarationStatement[15155-15205]"
    }, {
      "left" : "int bytesRead = -1;",
      "right" : "int bytesRead = -1;",
      "info" : "VariableDeclarationStatement[14420-14439]:VariableDeclarationStatement[15212-15231]"
    }, {
      "left" : "while ((bytesRead = bis.read(buffer)) != -1)",
      "right" : "while ((bytesRead = sourceFileInputStream.read(buffer)) != -1)",
      "info" : "WhileStatement[14446-14540]:WhileStatement[15238-15350]"
    }, {
      "left" : "bis",
      "right" : "bis",
      "info" : "SimpleName[14466-14469]:SimpleName[14486-14489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14491-14540]:Block[15301-15350]"
    }, {
      "left" : "bos.write(buffer, 0, bytesRead);",
      "right" : "bos.write(buffer, 0, bytesRead);",
      "info" : "ExpressionStatement[14500-14532]:ExpressionStatement[15310-15342]"
    }, {
      "left" : "if (FileWritingMessageHandler.this.appendNewLine)",
      "right" : "if (FileWritingMessageHandler.this.appendNewLine)",
      "info" : "IfStatement[14547-14651]:IfStatement[15357-15461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14597-14651]:Block[15407-15461]"
    }, {
      "left" : "bos.write(LINE_SEPARATOR.getBytes());",
      "right" : "bos.write(LINE_SEPARATOR.getBytes());",
      "info" : "ExpressionStatement[14606-14643]:ExpressionStatement[15416-15453]"
    }, {
      "left" : "bos.flush();",
      "right" : "bos.flush();",
      "info" : "ExpressionStatement[14658-14670]:ExpressionStatement[15468-15480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14691-14857]:Block[15501-15685]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[14699-14771]:TryStatement[15509-15599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14703-14732]:Block[15513-15560]"
    }, {
      "left" : "bis",
      "right" : "bis",
      "info" : "SimpleName[14712-14715]:SimpleName[14486-14489]"
    }, {
      "left" : "bis.close();",
      "right" : "sourceFileInputStream.close();",
      "info" : "ExpressionStatement[14712-14724]:ExpressionStatement[15522-15552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14762-14771]:Block[15590-15599]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[14778-14850]:TryStatement[15606-15678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14782-14811]:Block[15610-15639]"
    }, {
      "left" : "bos.close();",
      "right" : "bos.close();",
      "info" : "ExpressionStatement[14791-14803]:ExpressionStatement[15619-15631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14841-14850]:Block[15669-15678]"
    }, {
      "left" : "whileLockedProcessor.doWhileLocked();",
      "right" : "whileLockedProcessor.doWhileLocked();",
      "info" : "ExpressionStatement[14873-14910]:ExpressionStatement[15702-15739]"
    }, {
      "left" : "this.cleanUpAfterCopy(fileToWriteTo, resultFile, sourceFile);",
      "right" : "cleanUpAfterCopy(fileToWriteTo, resultFile, originalFile);",
      "info" : "ExpressionStatement[14914-14975]:ExpressionStatement[15743-15801]"
    }, {
      "left" : "sourceFile",
      "right" : "sourceFile",
      "info" : "SimpleName[14963-14973]:SimpleName[14491-14501]"
    }, {
      "left" : "return resultFile;",
      "right" : "return resultFile;",
      "info" : "ReturnStatement[14979-14997]:ReturnStatement[15805-15823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15009-15995]:Block[15835-16485]"
    }, {
      "left" : "if (this.deleteSourceFiles)",
      "right" : "if (!FileExistsMode.APPEND.equals(this.fileExistsMode) && this.deleteSourceFiles)",
      "info" : "IfStatement[15014-15292]:IfStatement[14035-14359]"
    }, {
      "left" : "this.deleteSourceFiles",
      "right" : "this.deleteSourceFiles",
      "info" : "FieldAccess[15018-15040]:FieldAccess[14093-14115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15042-15292]:Block[14117-14359]"
    }, {
      "left" : "if (sourceFile.renameTo(resultFile))",
      "right" : "if (sourceFile.renameTo(resultFile))",
      "info" : "IfStatement[15048-15116]:IfStatement[14122-14188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15085-15116]:Block[14159-14188]"
    }, {
      "left" : "return resultFile;",
      "right" : "return resultFile;",
      "info" : "ReturnStatement[15092-15110]:ReturnStatement[14165-14183]"
    }, {
      "left" : "if (logger.isInfoEnabled())",
      "right" : "if (logger.isInfoEnabled())",
      "info" : "IfStatement[15121-15287]:IfStatement[14192-14355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15149-15287]:Block[14220-14355]"
    }, {
      "left" : "logger.info(String.format(\"Failed to move file '%s'. Using copy and delete fallback.\",\n\t\t\t\t\t\t\tsourceFile.getAbsolutePath()));",
      "right" : "logger.info(String.format(\"Failed to move file '%s'. Using copy and delete fallback.\",\n\t\t\t\t\t\tsourceFile.getAbsolutePath()));",
      "info" : "ExpressionStatement[15156-15281]:ExpressionStatement[14226-14350]"
    }, {
      "left" : "BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(tempFile));",
      "right" : "BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(tempFile));",
      "info" : "VariableDeclarationStatement[15297-15381]:VariableDeclarationStatement[15841-15925]"
    }, {
      "left" : "BufferedInputStream bis = new BufferedInputStream(new FileInputStream(sourceFile));",
      "right" : "final BufferedInputStream bis = new BufferedInputStream(new FileInputStream(sourceFile));",
      "info" : "VariableDeclarationStatement[15385-15468]:VariableDeclarationStatement[14362-14451]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[15473-15909]:TryStatement[15930-16402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15477-15753]:Block[15934-16228]"
    }, {
      "left" : "byte[] buffer = new byte[StreamUtils.BUFFER_SIZE];",
      "right" : "byte[] buffer = new byte[StreamUtils.BUFFER_SIZE];",
      "info" : "VariableDeclarationStatement[15483-15533]:VariableDeclarationStatement[15940-15990]"
    }, {
      "left" : "int bytesRead = -1;",
      "right" : "int bytesRead = -1;",
      "info" : "VariableDeclarationStatement[15538-15557]:VariableDeclarationStatement[15995-16014]"
    }, {
      "left" : "while ((bytesRead = bis.read(buffer)) != -1)",
      "right" : "while ((bytesRead = sourceFileInputStream.read(buffer)) != -1)",
      "info" : "WhileStatement[15562-15652]:WhileStatement[16019-16127]"
    }, {
      "left" : "bis",
      "right" : "bis",
      "info" : "SimpleName[15582-15585]:SimpleName[14486-14489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15607-15652]:Block[16082-16127]"
    }, {
      "left" : "bos.write(buffer, 0, bytesRead);",
      "right" : "bos.write(buffer, 0, bytesRead);",
      "info" : "ExpressionStatement[15614-15646]:ExpressionStatement[16089-16121]"
    }, {
      "left" : "if (this.appendNewLine)",
      "right" : "if (this.appendNewLine)",
      "info" : "IfStatement[15657-15731]:IfStatement[16132-16206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15681-15731]:Block[16156-16206]"
    }, {
      "left" : "bos.write(LINE_SEPARATOR.getBytes());",
      "right" : "bos.write(LINE_SEPARATOR.getBytes());",
      "info" : "ExpressionStatement[15688-15725]:ExpressionStatement[16163-16200]"
    }, {
      "left" : "bos.flush();",
      "right" : "bos.flush();",
      "info" : "ExpressionStatement[15736-15748]:ExpressionStatement[16211-16223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15765-15909]:Block[16240-16402]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[15771-15835]:TryStatement[16246-16328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15775-15800]:Block[16250-16293]"
    }, {
      "left" : "bis",
      "right" : "bis",
      "info" : "SimpleName[15782-15785]:SimpleName[14486-14489]"
    }, {
      "left" : "bis.close();",
      "right" : "sourceFileInputStream.close();",
      "info" : "ExpressionStatement[15782-15794]:ExpressionStatement[16257-16287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15828-15835]:Block[16321-16328]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[15840-15904]:TryStatement[16333-16397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15844-15869]:Block[16337-16362]"
    }, {
      "left" : "bos.close();",
      "right" : "bos.close();",
      "info" : "ExpressionStatement[15851-15863]:ExpressionStatement[16344-16356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15897-15904]:Block[16390-16397]"
    }, {
      "left" : "this.cleanUpAfterCopy(tempFile, resultFile, sourceFile);",
      "right" : "cleanUpAfterCopy(tempFile, resultFile, originalFile);",
      "info" : "ExpressionStatement[15913-15969]:ExpressionStatement[16406-16459]"
    }, {
      "left" : "sourceFile",
      "right" : "sourceFile",
      "info" : "SimpleName[15957-15967]:SimpleName[14491-14501]"
    }, {
      "left" : "return resultFile;",
      "right" : "return resultFile;",
      "info" : "ReturnStatement[15973-15991]:ReturnStatement[16463-16481]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16001-16008]:Modifier[16491-16498]"
    }, {
      "left" : "File",
      "right" : "File",
      "info" : "SimpleType[16009-16013]:SimpleType[16499-16503]"
    }, {
      "left" : "handleByteArrayMessage",
      "right" : "handleByteArrayMessage",
      "info" : "SimpleName[16014-16036]:SimpleName[16504-16526]"
    }, {
      "left" : "final byte[] bytes",
      "right" : "final byte[] bytes",
      "info" : "SingleVariableDeclaration[16037-16055]:SingleVariableDeclaration[16527-16545]"
    }, {
      "left" : "File originalFile",
      "right" : "File originalFile",
      "info" : "SingleVariableDeclaration[16057-16074]:SingleVariableDeclaration[16547-16564]"
    }, {
      "left" : "File tempFile",
      "right" : "File tempFile",
      "info" : "SingleVariableDeclaration[16076-16089]:SingleVariableDeclaration[16566-16579]"
    }, {
      "left" : "final File resultFile",
      "right" : "final File resultFile",
      "info" : "SingleVariableDeclaration[16091-16112]:SingleVariableDeclaration[16581-16602]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[16121-16132]:SimpleType[16614-16625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16133-16962]:Block[16626-17461]"
    }, {
      "left" : "File fileToWriteTo = this.determineFileToWrite(resultFile, tempFile);",
      "right" : "File fileToWriteTo = this.determineFileToWrite(resultFile, tempFile);",
      "info" : "VariableDeclarationStatement[16137-16206]:VariableDeclarationStatement[16630-16699]"
    }, {
      "left" : "final boolean append = FileExistsMode.APPEND.equals(this.fileExistsMode);",
      "right" : "final boolean append = FileExistsMode.APPEND.equals(this.fileExistsMode);",
      "info" : "VariableDeclarationStatement[16210-16283]:VariableDeclarationStatement[16703-16776]"
    }, {
      "left" : "final BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(fileToWriteTo, append));",
      "right" : "final BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(fileToWriteTo, append));",
      "info" : "VariableDeclarationStatement[16287-16390]:VariableDeclarationStatement[16780-16883]"
    }, {
      "left" : "WhileLockedProcessor whileLockedProcessor = new WhileLockedProcessor(this.lockRegistry, fileToWriteTo.getAbsolutePath()){\n\t\t\t@Override\n\t\t\tprotected void whileLocked() throws IOException {\n\t\t\t\ttry {\n\t\t\t\t\tbos.write(bytes);\n\t\t\t\t\tif (FileWritingMessageHandler.this.appendNewLine) {\n\t\t\t\t\t\tbos.write(LINE_SEPARATOR.getBytes());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tbos.close();\n\t\t\t\t\t}\n\t\t\t\t\tcatch (IOException ex) {\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t};",
      "right" : "WhileLockedProcessor whileLockedProcessor = new WhileLockedProcessor(this.lockRegistry,\n\t\t\t\tfileToWriteTo.getAbsolutePath()) {\n\n\t\t\t@Override\n\t\t\tprotected void whileLocked() throws IOException {\n\t\t\t\ttry {\n\t\t\t\t\tbos.write(bytes);\n\t\t\t\t\tif (FileWritingMessageHandler.this.appendNewLine) {\n\t\t\t\t\t\tbos.write(LINE_SEPARATOR.getBytes());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tbos.close();\n\t\t\t\t\t}\n\t\t\t\t\tcatch (IOException ex) {\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t};",
      "info" : "VariableDeclarationStatement[16393-16832]:VariableDeclarationStatement[16886-17331]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[16518-16527]:MarkerAnnotation[17017-17026]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[16531-16540]:Modifier[17030-17039]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16541-16545]:PrimitiveType[17040-17044]"
    }, {
      "left" : "whileLocked",
      "right" : "whileLocked",
      "info" : "SimpleName[16546-16557]:SimpleName[17045-17056]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[16567-16578]:SimpleType[17066-17077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16579-16826]:Block[17078-17325]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16585-16821]:TryStatement[17084-17320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16589-16727]:Block[17088-17226]"
    }, {
      "left" : "bos.write(bytes);",
      "right" : "bos.write(bytes);",
      "info" : "ExpressionStatement[16596-16613]:ExpressionStatement[17095-17112]"
    }, {
      "left" : "if (FileWritingMessageHandler.this.appendNewLine)",
      "right" : "if (FileWritingMessageHandler.this.appendNewLine)",
      "info" : "IfStatement[16619-16721]:IfStatement[17118-17220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16669-16721]:Block[17168-17220]"
    }, {
      "left" : "bos.write(LINE_SEPARATOR.getBytes());",
      "right" : "bos.write(LINE_SEPARATOR.getBytes());",
      "info" : "ExpressionStatement[16677-16714]:ExpressionStatement[17176-17213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16740-16821]:Block[17239-17320]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16747-16815]:TryStatement[17246-17314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16751-16778]:Block[17250-17277]"
    }, {
      "left" : "bos.close();",
      "right" : "bos.close();",
      "info" : "ExpressionStatement[16759-16771]:ExpressionStatement[17258-17270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16807-16815]:Block[17306-17314]"
    }, {
      "left" : "whileLockedProcessor.doWhileLocked();",
      "right" : "whileLockedProcessor.doWhileLocked();",
      "info" : "ExpressionStatement[16835-16872]:ExpressionStatement[17334-17371]"
    }, {
      "left" : "this.cleanUpAfterCopy(fileToWriteTo, resultFile, originalFile);",
      "right" : "this.cleanUpAfterCopy(fileToWriteTo, resultFile, originalFile);",
      "info" : "ExpressionStatement[16875-16938]:ExpressionStatement[17374-17437]"
    }, {
      "left" : "return resultFile;",
      "right" : "return resultFile;",
      "info" : "ReturnStatement[16941-16959]:ReturnStatement[17440-17458]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16965-16972]:Modifier[17464-17471]"
    }, {
      "left" : "File",
      "right" : "File",
      "info" : "SimpleType[16973-16977]:SimpleType[17472-17476]"
    }, {
      "left" : "handleStringMessage",
      "right" : "handleStringMessage",
      "info" : "SimpleName[16978-16997]:SimpleName[17477-17496]"
    }, {
      "left" : "final String content",
      "right" : "final String content",
      "info" : "SingleVariableDeclaration[16998-17018]:SingleVariableDeclaration[17497-17517]"
    }, {
      "left" : "File originalFile",
      "right" : "File originalFile",
      "info" : "SingleVariableDeclaration[17020-17037]:SingleVariableDeclaration[17519-17536]"
    }, {
      "left" : "File tempFile",
      "right" : "File tempFile",
      "info" : "SingleVariableDeclaration[17039-17052]:SingleVariableDeclaration[17538-17551]"
    }, {
      "left" : "final File resultFile",
      "right" : "final File resultFile",
      "info" : "SingleVariableDeclaration[17054-17075]:SingleVariableDeclaration[17553-17574]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[17084-17095]:SimpleType[17586-17597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17096-17944]:Block[17598-18456]"
    }, {
      "left" : "File fileToWriteTo = this.determineFileToWrite(resultFile, tempFile);",
      "right" : "File fileToWriteTo = this.determineFileToWrite(resultFile, tempFile);",
      "info" : "VariableDeclarationStatement[17100-17169]:VariableDeclarationStatement[17602-17671]"
    }, {
      "left" : "final boolean append = FileExistsMode.APPEND.equals(this.fileExistsMode);",
      "right" : "final boolean append = FileExistsMode.APPEND.equals(this.fileExistsMode);",
      "info" : "VariableDeclarationStatement[17173-17246]:VariableDeclarationStatement[17675-17748]"
    }, {
      "left" : "final BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileToWriteTo, append), this.charset));",
      "right" : "final BufferedWriter writer =\n\t\t\t\tnew BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileToWriteTo, append), this.charset));",
      "info" : "VariableDeclarationStatement[17250-17382]:VariableDeclarationStatement[17752-17888]"
    }, {
      "left" : "WhileLockedProcessor whileLockedProcessor = new WhileLockedProcessor(this.lockRegistry, fileToWriteTo.getAbsolutePath()){\n\t\t\t@Override\n\t\t\tprotected void whileLocked() throws IOException {\n\t\t\t\ttry {\n\t\t\t\t\twriter.write(content);\n\t\t\t\t\tif (FileWritingMessageHandler.this.appendNewLine) {\n\t\t\t\t\t\twriter.newLine();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\ttry {\n\t\t\t\t\t\twriter.close();\n\t\t\t\t\t}\n\t\t\t\t\tcatch (IOException ex) {\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};",
      "right" : "WhileLockedProcessor whileLockedProcessor = new WhileLockedProcessor(this.lockRegistry,\n\t\t\t\tfileToWriteTo.getAbsolutePath()) {\n\n\t\t\t@Override\n\t\t\tprotected void whileLocked() throws IOException {\n\t\t\t\ttry {\n\t\t\t\t\twriter.write(content);\n\t\t\t\t\tif (FileWritingMessageHandler.this.appendNewLine) {\n\t\t\t\t\t\twriter.newLine();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\ttry {\n\t\t\t\t\t\twriter.close();\n\t\t\t\t\t}\n\t\t\t\t\tcatch (IOException ex) {\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};",
      "info" : "VariableDeclarationStatement[17385-17813]:VariableDeclarationStatement[17891-18325]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17510-17519]:MarkerAnnotation[18022-18031]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[17523-17532]:Modifier[18035-18044]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17533-17537]:PrimitiveType[18045-18049]"
    }, {
      "left" : "whileLocked",
      "right" : "whileLocked",
      "info" : "SimpleName[17538-17549]:SimpleName[18050-18061]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[17559-17570]:SimpleType[18071-18082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17571-17807]:Block[18083-18319]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[17577-17801]:TryStatement[18089-18313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17581-17704]:Block[18093-18216]"
    }, {
      "left" : "writer.write(content);",
      "right" : "writer.write(content);",
      "info" : "ExpressionStatement[17588-17610]:ExpressionStatement[18100-18122]"
    }, {
      "left" : "if (FileWritingMessageHandler.this.appendNewLine)",
      "right" : "if (FileWritingMessageHandler.this.appendNewLine)",
      "info" : "IfStatement[17616-17698]:IfStatement[18128-18210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17666-17698]:Block[18178-18210]"
    }, {
      "left" : "writer.newLine();",
      "right" : "writer.newLine();",
      "info" : "ExpressionStatement[17674-17691]:ExpressionStatement[18186-18203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17717-17801]:Block[18229-18313]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[17724-17795]:TryStatement[18236-18307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17728-17758]:Block[18240-18270]"
    }, {
      "left" : "writer.close();",
      "right" : "writer.close();",
      "info" : "ExpressionStatement[17736-17751]:ExpressionStatement[18248-18263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17787-17795]:Block[18299-18307]"
    }, {
      "left" : "whileLockedProcessor.doWhileLocked();",
      "right" : "whileLockedProcessor.doWhileLocked();",
      "info" : "ExpressionStatement[17816-17853]:ExpressionStatement[18328-18365]"
    }, {
      "left" : "this.cleanUpAfterCopy(fileToWriteTo, resultFile, originalFile);",
      "right" : "this.cleanUpAfterCopy(fileToWriteTo, resultFile, originalFile);",
      "info" : "ExpressionStatement[17857-17920]:ExpressionStatement[18369-18432]"
    }, {
      "left" : "return resultFile;",
      "right" : "return resultFile;",
      "info" : "ReturnStatement[17923-17941]:ReturnStatement[18435-18453]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17947-17954]:Modifier[18459-18466]"
    }, {
      "left" : "File",
      "right" : "File",
      "info" : "SimpleType[17955-17959]:SimpleType[18467-18471]"
    }, {
      "left" : "determineFileToWrite",
      "right" : "determineFileToWrite",
      "info" : "SimpleName[17960-17980]:SimpleName[18472-18492]"
    }, {
      "left" : "File resultFile",
      "right" : "File resultFile",
      "info" : "SingleVariableDeclaration[17981-17996]:SingleVariableDeclaration[18493-18508]"
    }, {
      "left" : "File tempFile",
      "right" : "File tempFile",
      "info" : "SingleVariableDeclaration[17998-18011]:SingleVariableDeclaration[18510-18523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18012-18361]:Block[18525-18875]"
    }, {
      "left" : "final File fileToWriteTo;",
      "right" : "final File fileToWriteTo;",
      "info" : "VariableDeclarationStatement[18017-18042]:VariableDeclarationStatement[18530-18555]"
    }, {
      "left" : "switch (this.fileExistsMode) {\n\t\t\tcase APPEND:\n\t\t\t\tfileToWriteTo = resultFile;\n\t\t\t\tbreak;\n\t\t\tcase FAIL:\n\t\t\tcase IGNORE:\n\t\t\tcase REPLACE:\n\t\t\t\tfileToWriteTo = tempFile;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new IllegalStateException(\"Unsupported FileExistsMode \"\n\t\t\t\t\t+ this.fileExistsMode);\n\t\t}",
      "right" : "switch (this.fileExistsMode) {\n\t\t\tcase APPEND:\n\t\t\t\tfileToWriteTo = resultFile;\n\t\t\t\tbreak;\n\t\t\tcase FAIL:\n\t\t\tcase IGNORE:\n\t\t\tcase REPLACE:\n\t\t\t\tfileToWriteTo = tempFile;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new IllegalStateException(\"Unsupported FileExistsMode \"\n\t\t\t\t\t\t+ this.fileExistsMode);\n\t\t}",
      "info" : "SwitchStatement[18046-18334]:SwitchStatement[18559-18848]"
    }, {
      "left" : "case APPEND:",
      "right" : "case APPEND:",
      "info" : "SwitchCase[18080-18092]:SwitchCase[18593-18605]"
    }, {
      "left" : "fileToWriteTo = resultFile;",
      "right" : "fileToWriteTo = resultFile;",
      "info" : "ExpressionStatement[18097-18124]:ExpressionStatement[18610-18637]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18129-18135]:BreakStatement[18642-18648]"
    }, {
      "left" : "case FAIL:",
      "right" : "case FAIL:",
      "info" : "SwitchCase[18139-18149]:SwitchCase[18652-18662]"
    }, {
      "left" : "case IGNORE:",
      "right" : "case IGNORE:",
      "info" : "SwitchCase[18153-18165]:SwitchCase[18666-18678]"
    }, {
      "left" : "case REPLACE:",
      "right" : "case REPLACE:",
      "info" : "SwitchCase[18169-18182]:SwitchCase[18682-18695]"
    }, {
      "left" : "fileToWriteTo = tempFile;",
      "right" : "fileToWriteTo = tempFile;",
      "info" : "ExpressionStatement[18187-18212]:ExpressionStatement[18700-18725]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18217-18223]:BreakStatement[18730-18736]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[18227-18235]:SwitchCase[18740-18748]"
    }, {
      "left" : "throw new IllegalStateException(\"Unsupported FileExistsMode \"\n\t\t\t\t\t+ this.fileExistsMode);",
      "right" : "throw new IllegalStateException(\"Unsupported FileExistsMode \"\n\t\t\t\t\t\t+ this.fileExistsMode);",
      "info" : "ThrowStatement[18240-18330]:ThrowStatement[18753-18844]"
    }, {
      "left" : "return fileToWriteTo;",
      "right" : "return fileToWriteTo;",
      "info" : "ReturnStatement[18337-18358]:ReturnStatement[18851-18872]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18364-18371]:Modifier[18878-18885]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18372-18376]:PrimitiveType[18886-18890]"
    }, {
      "left" : "cleanUpAfterCopy",
      "right" : "cleanUpAfterCopy",
      "info" : "SimpleName[18377-18393]:SimpleName[18891-18907]"
    }, {
      "left" : "File fileToWriteTo",
      "right" : "File fileToWriteTo",
      "info" : "SingleVariableDeclaration[18394-18412]:SingleVariableDeclaration[18908-18926]"
    }, {
      "left" : "File resultFile",
      "right" : "File resultFile",
      "info" : "SingleVariableDeclaration[18414-18429]:SingleVariableDeclaration[18928-18943]"
    }, {
      "left" : "File originalFile",
      "right" : "File originalFile",
      "info" : "SingleVariableDeclaration[18431-18448]:SingleVariableDeclaration[18945-18962]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[18457-18468]:SimpleType[18971-18982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18468-18717]:Block[18983-19232]"
    }, {
      "left" : "if (!FileExistsMode.APPEND.equals(this.fileExistsMode) && StringUtils.hasText(this.temporaryFileSuffix))",
      "right" : "if (!FileExistsMode.APPEND.equals(this.fileExistsMode) && StringUtils.hasText(this.temporaryFileSuffix))",
      "info" : "IfStatement[18472-18627]:IfStatement[18987-19142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18577-18627]:Block[19092-19142]"
    }, {
      "left" : "this.renameTo(fileToWriteTo, resultFile);",
      "right" : "this.renameTo(fileToWriteTo, resultFile);",
      "info" : "ExpressionStatement[18582-18623]:ExpressionStatement[19097-19138]"
    }, {
      "left" : "if (this.deleteSourceFiles && originalFile != null)",
      "right" : "if (this.deleteSourceFiles && originalFile != null)",
      "info" : "IfStatement[18631-18714]:IfStatement[19146-19229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18683-18714]:Block[19198-19229]"
    }, {
      "left" : "originalFile.delete();",
      "right" : "originalFile.delete();",
      "info" : "ExpressionStatement[18688-18710]:ExpressionStatement[19203-19225]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18720-18727]:Modifier[19235-19242]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18728-18732]:PrimitiveType[19243-19247]"
    }, {
      "left" : "renameTo",
      "right" : "renameTo",
      "info" : "SimpleName[18733-18741]:SimpleName[19248-19256]"
    }, {
      "left" : "File tempFile",
      "right" : "File tempFile",
      "info" : "SingleVariableDeclaration[18742-18755]:SingleVariableDeclaration[19257-19270]"
    }, {
      "left" : "File resultFile",
      "right" : "File resultFile",
      "info" : "SingleVariableDeclaration[18757-18772]:SingleVariableDeclaration[19272-19287]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[18781-18792]:SimpleType[19296-19307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18792-19622]:Block[19308-20158]"
    }, {
      "left" : "Assert.notNull(resultFile, \"'resultFile' must not be null\");",
      "right" : "Assert.notNull(resultFile, \"'resultFile' must not be null\");",
      "info" : "ExpressionStatement[18796-18856]:ExpressionStatement[19312-19372]"
    }, {
      "left" : "Assert.notNull(tempFile, \"'tempFile' must not be null\");",
      "right" : "Assert.notNull(tempFile, \"'tempFile' must not be null\");",
      "info" : "ExpressionStatement[18859-18915]:ExpressionStatement[19375-19431]"
    }, {
      "left" : "if (resultFile.exists())",
      "right" : "if (resultFile.exists())",
      "info" : "IfStatement[18919-19619]:IfStatement[19435-20155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18944-19429]:Block[19460-19959]"
    }, {
      "left" : "if (resultFile.setWritable(true, false) && resultFile.delete())",
      "right" : "if (resultFile.setWritable(true, false) && resultFile.delete())",
      "info" : "IfStatement[18949-19425]:IfStatement[19465-19955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19012-19198]:Block[19529-19722]"
    }, {
      "left" : "if (!tempFile.renameTo(resultFile))",
      "right" : "if (!tempFile.renameTo(resultFile))",
      "info" : "IfStatement[19018-19193]:IfStatement[19535-19717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19054-19193]:Block[19571-19717]"
    }, {
      "left" : "throw new IOException(\"Failed to rename file '\" + tempFile.getAbsolutePath() + \"' to '\" + resultFile.getAbsolutePath() + \"'\");",
      "right" : "throw new IOException(\"Failed to rename file '\" + tempFile.getAbsolutePath() +\n\t\t\t\t\t\t\t\"' to '\" + resultFile.getAbsolutePath() + \"'\");",
      "info" : "ThrowStatement[19061-19187]:ThrowStatement[19578-19711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19207-19425]:Block[19731-19955]"
    }, {
      "left" : "throw new IOException(\"Failed to rename file '\" + tempFile.getAbsolutePath() + \"' to '\" + resultFile.getAbsolutePath() +\n\t\t\t\t\t\t\"' since '\" + resultFile.getName() + \"' is not writable or can not be deleted\");",
      "right" : "throw new IOException(\"Failed to rename file '\" + tempFile.getAbsolutePath() +\n\t\t\t\t\t\t\"' to '\" + resultFile.getAbsolutePath() +\n\t\t\t\t\t\t\"' since '\" + resultFile.getName() + \"' is not writable or can not be deleted\");",
      "info" : "ThrowStatement[19213-19420]:ThrowStatement[19737-19950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19437-19619]:Block[19967-20155]"
    }, {
      "left" : "if (!tempFile.renameTo(resultFile))",
      "right" : "if (!tempFile.renameTo(resultFile))",
      "info" : "IfStatement[19442-19615]:IfStatement[19972-20151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19478-19615]:Block[20008-20151]"
    }, {
      "left" : "throw new IOException(\"Failed to rename file '\" + tempFile.getAbsolutePath() + \"' to '\" + resultFile.getAbsolutePath() + \"'\");",
      "right" : "throw new IOException(\"Failed to rename file '\" + tempFile.getAbsolutePath() +\n\t\t\t\t\t\t\"' to '\" + resultFile.getAbsolutePath() + \"'\");",
      "info" : "ThrowStatement[19484-19610]:ThrowStatement[20014-20146]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19625-19632]:Modifier[20161-20168]"
    }, {
      "left" : "File",
      "right" : "File",
      "info" : "SimpleType[19633-19637]:SimpleType[20169-20173]"
    }, {
      "left" : "evaluateDestinationDirectoryExpression",
      "right" : "evaluateDestinationDirectoryExpression",
      "info" : "SimpleName[19638-19676]:SimpleName[20174-20212]"
    }, {
      "left" : "Message<?> message",
      "right" : "Message<?> message",
      "info" : "SingleVariableDeclaration[19677-19695]:SingleVariableDeclaration[20213-20231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19697-21003]:Block[20233-21543]"
    }, {
      "left" : "final File destinationDirectory;",
      "right" : "final File destinationDirectory;",
      "info" : "VariableDeclarationStatement[19702-19734]:VariableDeclarationStatement[20238-20270]"
    }, {
      "left" : "final Object destinationDirectoryToUse = this.destinationDirectoryExpression.getValue(\n\t\t\t\tthis.evaluationContext, message);",
      "right" : "final Object destinationDirectoryToUse = this.destinationDirectoryExpression.getValue(\n\t\t\t\tthis.evaluationContext, message);",
      "info" : "VariableDeclarationStatement[19738-19862]:VariableDeclarationStatement[20274-20398]"
    }, {
      "left" : "if (destinationDirectoryToUse == null)",
      "right" : "if (destinationDirectoryToUse == null)",
      "info" : "IfStatement[19866-20888]:IfStatement[20402-21428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19905-20113]:Block[20441-20651]"
    }, {
      "left" : "throw new IllegalStateException(String.format(\"The provided \" +\n\t\t\t\t\t\"destinationDirectoryExpression (%s) must not resolve to null.\",\n\t\t\t\t\tthis.destinationDirectoryExpression.getExpressionString()));",
      "right" : "throw new IllegalStateException(String.format(\"The provided \" +\n\t\t\t\t\t\t\t\"destinationDirectoryExpression (%s) must not resolve to null.\",\n\t\t\t\t\tthis.destinationDirectoryExpression.getExpressionString()));",
      "info" : "ThrowStatement[19910-20109]:ThrowStatement[20446-20647]"
    }, {
      "left" : "if (destinationDirectoryToUse instanceof String)",
      "right" : "if (destinationDirectoryToUse instanceof String)",
      "info" : "IfStatement[20121-20888]:IfStatement[20659-21428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20170-20530]:Block[20708-21068]"
    }, {
      "left" : "final String destinationDirectoryPath = (String) destinationDirectoryToUse;",
      "right" : "final String destinationDirectoryPath = (String) destinationDirectoryToUse;",
      "info" : "VariableDeclarationStatement[20176-20251]:VariableDeclarationStatement[20714-20789]"
    }, {
      "left" : "Assert.hasText(destinationDirectoryPath, String.format(\n\t\t\t\t\t\"Unable to resolve destination directory name for the provided Expression '%s'.\",\n\t\t\t\t\tthis.destinationDirectoryExpression.getExpressionString()));",
      "right" : "Assert.hasText(destinationDirectoryPath, String.format(\n\t\t\t\t\t\"Unable to resolve destination directory name for the provided Expression '%s'.\",\n\t\t\t\t\tthis.destinationDirectoryExpression.getExpressionString()));",
      "info" : "ExpressionStatement[20256-20464]:ExpressionStatement[20794-21002]"
    }, {
      "left" : "destinationDirectory = new File(destinationDirectoryPath);",
      "right" : "destinationDirectory = new File(destinationDirectoryPath);",
      "info" : "ExpressionStatement[20468-20526]:ExpressionStatement[21006-21064]"
    }, {
      "left" : "if (destinationDirectoryToUse instanceof File)",
      "right" : "if (destinationDirectoryToUse instanceof File)",
      "info" : "IfStatement[20538-20888]:IfStatement[21076-21428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20585-20650]:Block[21123-21188]"
    }, {
      "left" : "destinationDirectory = (File) destinationDirectoryToUse;",
      "right" : "destinationDirectory = (File) destinationDirectoryToUse;",
      "info" : "ExpressionStatement[20590-20646]:ExpressionStatement[21128-21184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20656-20888]:Block[21196-21428]"
    }, {
      "left" : "throw new IllegalStateException(String.format(\"The provided \" +\n\t\t\t\t\t\"destinationDirectoryExpression (%s) must be of type \" +\n\t\t\t\t\t\"java.io.File or be a String.\", this.destinationDirectoryExpression.getExpressionString()));",
      "right" : "throw new IllegalStateException(String.format(\"The provided \" +\n\t\t\t\t\t\"destinationDirectoryExpression (%s) must be of type \" +\n\t\t\t\t\t\"java.io.File or be a String.\", this.destinationDirectoryExpression.getExpressionString()));",
      "info" : "ThrowStatement[20661-20884]:ThrowStatement[21201-21424]"
    }, {
      "left" : "validateDestinationDirectory(destinationDirectory, this.autoCreateDirectory);",
      "right" : "validateDestinationDirectory(destinationDirectory, this.autoCreateDirectory);",
      "info" : "ExpressionStatement[20892-20969]:ExpressionStatement[21432-21509]"
    }, {
      "left" : "return destinationDirectory;",
      "right" : "return destinationDirectory;",
      "info" : "ReturnStatement[20972-21000]:ReturnStatement[21512-21540]"
    } ]
  },
  "interFileMappings" : { }
}