{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CSVParser",
      "right" : "CSVParser",
      "info" : "TypeDeclaration[1309-15733]:TypeDeclaration[1309-15765]"
    }, {
      "left" : "public static CSVParser parse(File file, final CSVFormat format) throws IOException",
      "right" : "public static CSVParser parse(File file, final CSVFormat format) throws IOException",
      "info" : "MethodDeclaration[4418-5136]:MethodDeclaration[4418-5136]"
    }, {
      "left" : "public static CSVParser parse(String string, final CSVFormat format) throws IOException",
      "right" : "public static CSVParser parse(String string, final CSVFormat format) throws IOException",
      "info" : "MethodDeclaration[5142-5880]:MethodDeclaration[5142-5880]"
    }, {
      "left" : "public static CSVParser parse(URL url, Charset charset, final CSVFormat format) throws IOException",
      "right" : "public static CSVParser parse(URL url, Charset charset, final CSVFormat format) throws IOException",
      "info" : "MethodDeclaration[5886-7033]:MethodDeclaration[5886-7033]"
    }, {
      "left" : "private final CSVFormat format;",
      "right" : "private final CSVFormat format;",
      "info" : "FieldDeclaration[7098-7129]:FieldDeclaration[7098-7129]"
    }, {
      "left" : "private final Map<String, Integer> headerMap;",
      "right" : "private final Map<String, Integer> headerMap;",
      "info" : "FieldDeclaration[7135-7235]:FieldDeclaration[7135-7235]"
    }, {
      "left" : "private final Lexer lexer;",
      "right" : "private final Lexer lexer;",
      "info" : "FieldDeclaration[7241-7267]:FieldDeclaration[7241-7267]"
    }, {
      "left" : "private final List<String> record = new ArrayList<String>();",
      "right" : "private final List<String> record = new ArrayList<String>();",
      "info" : "FieldDeclaration[7273-7411]:FieldDeclaration[7273-7411]"
    }, {
      "left" : "private long recordNumber;",
      "right" : "private long recordNumber;",
      "info" : "FieldDeclaration[7417-7443]:FieldDeclaration[7417-7443]"
    }, {
      "left" : "private final Token reusableToken = new Token();",
      "right" : "private final Token reusableToken = new Token();",
      "info" : "FieldDeclaration[7449-7497]:FieldDeclaration[7449-7497]"
    }, {
      "left" : "public CSVParser(final Reader reader, final CSVFormat format) throws IOException",
      "right" : "public CSVParser(final Reader reader, final CSVFormat format) throws IOException",
      "info" : "MethodDeclaration[7503-8552]:MethodDeclaration[7503-8552]"
    }, {
      "left" : "private void addRecordValue()",
      "right" : "private void addRecordValue()",
      "info" : "MethodDeclaration[8558-8903]:MethodDeclaration[8558-8903]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[8909-9148]:MethodDeclaration[8909-9148]"
    }, {
      "left" : "public long getCurrentLineNumber()",
      "right" : "public long getCurrentLineNumber()",
      "info" : "MethodDeclaration[9154-9497]:MethodDeclaration[9154-9497]"
    }, {
      "left" : "public Map<String, Integer> getHeaderMap()",
      "right" : "public Map<String, Integer> getHeaderMap()",
      "info" : "MethodDeclaration[9503-9875]:MethodDeclaration[9503-9907]"
    }, {
      "left" : "public long getRecordNumber()",
      "right" : "public long getRecordNumber()",
      "info" : "MethodDeclaration[9881-10203]:MethodDeclaration[9913-10235]"
    }, {
      "left" : "public List<CSVRecord> getRecords() throws IOException",
      "right" : "public List<CSVRecord> getRecords() throws IOException",
      "info" : "MethodDeclaration[10209-10874]:MethodDeclaration[10241-10906]"
    }, {
      "left" : "private Map<String, Integer> initializeHeader() throws IOException",
      "right" : "private Map<String, Integer> initializeHeader() throws IOException",
      "info" : "MethodDeclaration[10880-12016]:MethodDeclaration[10912-12048]"
    }, {
      "left" : "public boolean isClosed()",
      "right" : "public boolean isClosed()",
      "info" : "MethodDeclaration[12022-12093]:MethodDeclaration[12054-12125]"
    }, {
      "left" : "public Iterator<CSVRecord> iterator()",
      "right" : "public Iterator<CSVRecord> iterator()",
      "info" : "MethodDeclaration[12099-13888]:MethodDeclaration[12131-13920]"
    }, {
      "left" : "private CSVRecord current;",
      "right" : "private CSVRecord current;",
      "info" : "FieldDeclaration[12460-12486]:FieldDeclaration[12492-12518]"
    }, {
      "left" : "private CSVRecord getNextRecord()",
      "right" : "private CSVRecord getNextRecord()",
      "info" : "MethodDeclaration[12500-12814]:MethodDeclaration[12532-12846]"
    }, {
      "left" : "public boolean hasNext()",
      "right" : "public boolean hasNext()",
      "info" : "MethodDeclaration[12828-13134]:MethodDeclaration[12860-13166]"
    }, {
      "left" : "public CSVRecord next()",
      "right" : "public CSVRecord next()",
      "info" : "MethodDeclaration[13148-13762]:MethodDeclaration[13180-13794]"
    }, {
      "left" : "public void remove()",
      "right" : "public void remove()",
      "info" : "MethodDeclaration[13776-13871]:MethodDeclaration[13808-13903]"
    }, {
      "left" : "CSVRecord nextRecord() throws IOException",
      "right" : "CSVRecord nextRecord() throws IOException",
      "info" : "MethodDeclaration[13894-15730]:MethodDeclaration[13926-15762]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4980-5136]:Block[4980-5136]"
    }, {
      "left" : "Assertions.notNull(file, \"file\");",
      "right" : "Assertions.notNull(file, \"file\");",
      "info" : "ExpressionStatement[4990-5023]:ExpressionStatement[4990-5023]"
    }, {
      "left" : "Assertions.notNull(format, \"format\");",
      "right" : "Assertions.notNull(format, \"format\");",
      "info" : "ExpressionStatement[5032-5069]:ExpressionStatement[5032-5069]"
    }, {
      "left" : "return new CSVParser(new FileReader(file), format);",
      "right" : "return new CSVParser(new FileReader(file), format);",
      "info" : "ReturnStatement[5079-5130]:ReturnStatement[5079-5130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5716-5880]:Block[5716-5880]"
    }, {
      "left" : "Assertions.notNull(string, \"string\");",
      "right" : "Assertions.notNull(string, \"string\");",
      "info" : "ExpressionStatement[5726-5763]:ExpressionStatement[5726-5763]"
    }, {
      "left" : "Assertions.notNull(format, \"format\");",
      "right" : "Assertions.notNull(format, \"format\");",
      "info" : "ExpressionStatement[5772-5809]:ExpressionStatement[5772-5809]"
    }, {
      "left" : "return new CSVParser(new StringReader(string), format);",
      "right" : "return new CSVParser(new StringReader(string), format);",
      "info" : "ReturnStatement[5819-5874]:ReturnStatement[5819-5874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6729-7033]:Block[6729-7033]"
    }, {
      "left" : "Assertions.notNull(url, \"url\");",
      "right" : "Assertions.notNull(url, \"url\");",
      "info" : "ExpressionStatement[6739-6770]:ExpressionStatement[6739-6770]"
    }, {
      "left" : "Assertions.notNull(charset, \"charset\");",
      "right" : "Assertions.notNull(charset, \"charset\");",
      "info" : "ExpressionStatement[6779-6818]:ExpressionStatement[6779-6818]"
    }, {
      "left" : "Assertions.notNull(format, \"format\");",
      "right" : "Assertions.notNull(format, \"format\");",
      "info" : "ExpressionStatement[6827-6864]:ExpressionStatement[6827-6864]"
    }, {
      "left" : "return new CSVParser(new InputStreamReader(url.openStream(),\n                             charset == null ? Charset.forName(\"UTF-8\") : charset), format);",
      "right" : "return new CSVParser(new InputStreamReader(url.openStream(),\n                             charset == null ? Charset.forName(\"UTF-8\") : charset), format);",
      "info" : "ReturnStatement[6874-7027]:ReturnStatement[6874-7027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8269-8552]:Block[8269-8552]"
    }, {
      "left" : "Assertions.notNull(reader, \"reader\");",
      "right" : "Assertions.notNull(reader, \"reader\");",
      "info" : "ExpressionStatement[8279-8316]:ExpressionStatement[8279-8316]"
    }, {
      "left" : "Assertions.notNull(format, \"format\");",
      "right" : "Assertions.notNull(format, \"format\");",
      "info" : "ExpressionStatement[8325-8362]:ExpressionStatement[8325-8362]"
    }, {
      "left" : "format.validate();",
      "right" : "format.validate();",
      "info" : "ExpressionStatement[8372-8390]:ExpressionStatement[8372-8390]"
    }, {
      "left" : "this.format = format;",
      "right" : "this.format = format;",
      "info" : "ExpressionStatement[8399-8420]:ExpressionStatement[8399-8420]"
    }, {
      "left" : "this.lexer = new Lexer(format, new ExtendedBufferedReader(reader));",
      "right" : "this.lexer = new Lexer(format, new ExtendedBufferedReader(reader));",
      "info" : "ExpressionStatement[8429-8496]:ExpressionStatement[8429-8496]"
    }, {
      "left" : "this.headerMap = this.initializeHeader();",
      "right" : "this.headerMap = this.initializeHeader();",
      "info" : "ExpressionStatement[8505-8546]:ExpressionStatement[8505-8546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8588-8903]:Block[8588-8903]"
    }, {
      "left" : "final String input = this.reusableToken.content.toString();",
      "right" : "final String input = this.reusableToken.content.toString();",
      "info" : "VariableDeclarationStatement[8598-8657]:VariableDeclarationStatement[8598-8657]"
    }, {
      "left" : "final String nullString = this.format.getNullString();",
      "right" : "final String nullString = this.format.getNullString();",
      "info" : "VariableDeclarationStatement[8666-8720]:VariableDeclarationStatement[8666-8720]"
    }, {
      "left" : "if (nullString == null)",
      "right" : "if (nullString == null)",
      "info" : "IfStatement[8729-8897]:IfStatement[8729-8897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8753-8800]:Block[8753-8800]"
    }, {
      "left" : "this.record.add(input);",
      "right" : "this.record.add(input);",
      "info" : "ExpressionStatement[8767-8790]:ExpressionStatement[8767-8790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8806-8897]:Block[8806-8897]"
    }, {
      "left" : "this.record.add(input.equalsIgnoreCase(nullString) ? null : input);",
      "right" : "this.record.add(input.equalsIgnoreCase(nullString) ? null : input);",
      "info" : "ExpressionStatement[8820-8887]:ExpressionStatement[8820-8887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9065-9148]:Block[9065-9148]"
    }, {
      "left" : "if (this.lexer != null)",
      "right" : "if (this.lexer != null)",
      "info" : "IfStatement[9075-9142]:IfStatement[9075-9142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9099-9142]:Block[9099-9142]"
    }, {
      "left" : "this.lexer.close();",
      "right" : "this.lexer.close();",
      "info" : "ExpressionStatement[9113-9132]:ExpressionStatement[9113-9132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9440-9497]:Block[9440-9497]"
    }, {
      "left" : "return this.lexer.getCurrentLineNumber();",
      "right" : "return this.lexer.getCurrentLineNumber();",
      "info" : "ReturnStatement[9450-9491]:ReturnStatement[9450-9491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9801-9875]:Block[9801-9907]"
    }, {
      "left" : "return new LinkedHashMap<String, Integer>(this.headerMap);",
      "right" : "return this.headerMap == null ? null : new LinkedHashMap<String, Integer>(this.headerMap);",
      "info" : "ReturnStatement[9811-9869]:ReturnStatement[9811-9901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10162-10203]:Block[10194-10235]"
    }, {
      "left" : "return this.recordNumber;",
      "right" : "return this.recordNumber;",
      "info" : "ReturnStatement[10172-10197]:ReturnStatement[10204-10229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10660-10874]:Block[10692-10906]"
    }, {
      "left" : "final List<CSVRecord> records = new ArrayList<CSVRecord>();",
      "right" : "final List<CSVRecord> records = new ArrayList<CSVRecord>();",
      "info" : "VariableDeclarationStatement[10670-10729]:VariableDeclarationStatement[10702-10761]"
    }, {
      "left" : "CSVRecord rec;",
      "right" : "CSVRecord rec;",
      "info" : "VariableDeclarationStatement[10738-10752]:VariableDeclarationStatement[10770-10784]"
    }, {
      "left" : "while ((rec = this.nextRecord()) != null)",
      "right" : "while ((rec = this.nextRecord()) != null)",
      "info" : "WhileStatement[10761-10844]:WhileStatement[10793-10876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10803-10844]:Block[10835-10876]"
    }, {
      "left" : "records.add(rec);",
      "right" : "records.add(rec);",
      "info" : "ExpressionStatement[10817-10834]:ExpressionStatement[10849-10866]"
    }, {
      "left" : "return records;",
      "right" : "return records;",
      "info" : "ReturnStatement[10853-10868]:ReturnStatement[10885-10900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11040-12016]:Block[11072-12048]"
    }, {
      "left" : "Map<String, Integer> hdrMap = null;",
      "right" : "Map<String, Integer> hdrMap = null;",
      "info" : "VariableDeclarationStatement[11050-11085]:VariableDeclarationStatement[11082-11117]"
    }, {
      "left" : "final String[] formatHeader = this.format.getHeader();",
      "right" : "final String[] formatHeader = this.format.getHeader();",
      "info" : "VariableDeclarationStatement[11094-11148]:VariableDeclarationStatement[11126-11180]"
    }, {
      "left" : "if (formatHeader != null)",
      "right" : "if (formatHeader != null)",
      "info" : "IfStatement[11157-11987]:IfStatement[11189-12019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11183-11987]:Block[11215-12019]"
    }, {
      "left" : "hdrMap = new LinkedHashMap<String, Integer>();",
      "right" : "hdrMap = new LinkedHashMap<String, Integer>();",
      "info" : "ExpressionStatement[11197-11243]:ExpressionStatement[11229-11275]"
    }, {
      "left" : "String[] header = null;",
      "right" : "String[] header = null;",
      "info" : "VariableDeclarationStatement[11257-11280]:VariableDeclarationStatement[11289-11312]"
    }, {
      "left" : "if (formatHeader.length == 0)",
      "right" : "if (formatHeader.length == 0)",
      "info" : "IfStatement[11293-11741]:IfStatement[11325-11773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11323-11567]:Block[11355-11599]"
    }, {
      "left" : "final CSVRecord record = this.nextRecord();",
      "right" : "final CSVRecord record = this.nextRecord();",
      "info" : "VariableDeclarationStatement[11408-11451]:VariableDeclarationStatement[11440-11483]"
    }, {
      "left" : "if (record != null)",
      "right" : "if (record != null)",
      "info" : "IfStatement[11468-11553]:IfStatement[11500-11585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11488-11553]:Block[11520-11585]"
    }, {
      "left" : "header = record.values();",
      "right" : "header = record.values();",
      "info" : "ExpressionStatement[11510-11535]:ExpressionStatement[11542-11567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11573-11741]:Block[11605-11773]"
    }, {
      "left" : "if (this.format.getSkipHeaderRecord())",
      "right" : "if (this.format.getSkipHeaderRecord())",
      "info" : "IfStatement[11591-11688]:IfStatement[11623-11720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11630-11688]:Block[11662-11720]"
    }, {
      "left" : "this.nextRecord();",
      "right" : "this.nextRecord();",
      "info" : "ExpressionStatement[11652-11670]:ExpressionStatement[11684-11702]"
    }, {
      "left" : "header = formatHeader;",
      "right" : "header = formatHeader;",
      "info" : "ExpressionStatement[11705-11727]:ExpressionStatement[11737-11759]"
    }, {
      "left" : "if (header != null)",
      "right" : "if (header != null)",
      "info" : "IfStatement[11803-11977]:IfStatement[11835-12009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11823-11977]:Block[11855-12009]"
    }, {
      "left" : "for (int i = 0; i < header.length; i++)",
      "right" : "for (int i = 0; i < header.length; i++)",
      "info" : "ForStatement[11841-11963]:ForStatement[11873-11995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11881-11963]:Block[11913-11995]"
    }, {
      "left" : "hdrMap.put(header[i], Integer.valueOf(i));",
      "right" : "hdrMap.put(header[i], Integer.valueOf(i));",
      "info" : "ExpressionStatement[11903-11945]:ExpressionStatement[11935-11977]"
    }, {
      "left" : "return hdrMap;",
      "right" : "return hdrMap;",
      "info" : "ReturnStatement[11996-12010]:ReturnStatement[12028-12042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12048-12093]:Block[12080-12125]"
    }, {
      "left" : "return this.lexer.isClosed();",
      "right" : "return this.lexer.isClosed();",
      "info" : "ReturnStatement[12058-12087]:ReturnStatement[12090-12119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12403-13888]:Block[12435-13920]"
    }, {
      "left" : "return new Iterator<CSVRecord>() {\n            private CSVRecord current;\n\n            private CSVRecord getNextRecord() {\n                try {\n                    return CSVParser.this.nextRecord();\n                } catch (final IOException e) {\n                    // TODO: This is not great, throw an ISE instead?\n                    throw new RuntimeException(e);\n                }\n            }\n\n            public boolean hasNext() {\n                if (CSVParser.this.isClosed()) {\n                    return false;\n                }\n                if (this.current == null) {\n                    this.current = this.getNextRecord();\n                }\n\n                return this.current != null;\n            }\n\n            public CSVRecord next() {\n                if (CSVParser.this.isClosed()) {\n                    throw new NoSuchElementException(\"CSVParser has been closed\");\n                }\n                CSVRecord next = this.current;\n                this.current = null;\n\n                if (next == null) {\n                    // hasNext() wasn't called before\n                    next = this.getNextRecord();\n                    if (next == null) {\n                        throw new NoSuchElementException(\"No more CSV records available\");\n                    }\n                }\n\n                return next;\n            }\n\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        };",
      "right" : "return new Iterator<CSVRecord>() {\n            private CSVRecord current;\n\n            private CSVRecord getNextRecord() {\n                try {\n                    return CSVParser.this.nextRecord();\n                } catch (final IOException e) {\n                    // TODO: This is not great, throw an ISE instead?\n                    throw new RuntimeException(e);\n                }\n            }\n\n            public boolean hasNext() {\n                if (CSVParser.this.isClosed()) {\n                    return false;\n                }\n                if (this.current == null) {\n                    this.current = this.getNextRecord();\n                }\n\n                return this.current != null;\n            }\n\n            public CSVRecord next() {\n                if (CSVParser.this.isClosed()) {\n                    throw new NoSuchElementException(\"CSVParser has been closed\");\n                }\n                CSVRecord next = this.current;\n                this.current = null;\n\n                if (next == null) {\n                    // hasNext() wasn't called before\n                    next = this.getNextRecord();\n                    if (next == null) {\n                        throw new NoSuchElementException(\"No more CSV records available\");\n                    }\n                }\n\n                return next;\n            }\n\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        };",
      "info" : "ReturnStatement[12413-13882]:ReturnStatement[12445-13914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12534-12814]:Block[12566-12846]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12552-12800]:TryStatement[12584-12832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12556-12631]:Block[12588-12663]"
    }, {
      "left" : "return CSVParser.this.nextRecord();",
      "right" : "return CSVParser.this.nextRecord();",
      "info" : "ReturnStatement[12578-12613]:ReturnStatement[12610-12645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12660-12800]:Block[12692-12832]"
    }, {
      "left" : "throw new RuntimeException(e);",
      "right" : "throw new RuntimeException(e);",
      "info" : "ThrowStatement[12752-12782]:ThrowStatement[12784-12814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12853-13134]:Block[12885-13166]"
    }, {
      "left" : "if (CSVParser.this.isClosed())",
      "right" : "if (CSVParser.this.isClosed())",
      "info" : "IfStatement[12871-12955]:IfStatement[12903-12987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12902-12955]:Block[12934-12987]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12924-12937]:ReturnStatement[12956-12969]"
    }, {
      "left" : "if (this.current == null)",
      "right" : "if (this.current == null)",
      "info" : "IfStatement[12972-13074]:IfStatement[13004-13106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12998-13074]:Block[13030-13106]"
    }, {
      "left" : "this.current = this.getNextRecord();",
      "right" : "this.current = this.getNextRecord();",
      "info" : "ExpressionStatement[13020-13056]:ExpressionStatement[13052-13088]"
    }, {
      "left" : "return this.current != null;",
      "right" : "return this.current != null;",
      "info" : "ReturnStatement[13092-13120]:ReturnStatement[13124-13152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13172-13762]:Block[13204-13794]"
    }, {
      "left" : "if (CSVParser.this.isClosed())",
      "right" : "if (CSVParser.this.isClosed())",
      "info" : "IfStatement[13190-13323]:IfStatement[13222-13355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13221-13323]:Block[13253-13355]"
    }, {
      "left" : "throw new NoSuchElementException(\"CSVParser has been closed\");",
      "right" : "throw new NoSuchElementException(\"CSVParser has been closed\");",
      "info" : "ThrowStatement[13243-13305]:ThrowStatement[13275-13337]"
    }, {
      "left" : "CSVRecord next = this.current;",
      "right" : "CSVRecord next = this.current;",
      "info" : "VariableDeclarationStatement[13340-13370]:VariableDeclarationStatement[13372-13402]"
    }, {
      "left" : "this.current = null;",
      "right" : "this.current = null;",
      "info" : "ExpressionStatement[13387-13407]:ExpressionStatement[13419-13439]"
    }, {
      "left" : "if (next == null)",
      "right" : "if (next == null)",
      "info" : "IfStatement[13425-13718]:IfStatement[13457-13750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13443-13718]:Block[13475-13750]"
    }, {
      "left" : "next = this.getNextRecord();",
      "right" : "next = this.getNextRecord();",
      "info" : "ExpressionStatement[13519-13547]:ExpressionStatement[13551-13579]"
    }, {
      "left" : "if (next == null)",
      "right" : "if (next == null)",
      "info" : "IfStatement[13568-13700]:IfStatement[13600-13732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13586-13700]:Block[13618-13732]"
    }, {
      "left" : "throw new NoSuchElementException(\"No more CSV records available\");",
      "right" : "throw new NoSuchElementException(\"No more CSV records available\");",
      "info" : "ThrowStatement[13612-13678]:ThrowStatement[13644-13710]"
    }, {
      "left" : "return next;",
      "right" : "return next;",
      "info" : "ReturnStatement[13736-13748]:ReturnStatement[13768-13780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13797-13871]:Block[13829-13903]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[13815-13857]:ThrowStatement[13847-13889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14218-15730]:Block[14250-15762]"
    }, {
      "left" : "CSVRecord result = null;",
      "right" : "CSVRecord result = null;",
      "info" : "VariableDeclarationStatement[14228-14252]:VariableDeclarationStatement[14260-14284]"
    }, {
      "left" : "this.record.clear();",
      "right" : "this.record.clear();",
      "info" : "ExpressionStatement[14261-14281]:ExpressionStatement[14293-14313]"
    }, {
      "left" : "StringBuilder sb = null;",
      "right" : "StringBuilder sb = null;",
      "info" : "VariableDeclarationStatement[14290-14314]:VariableDeclarationStatement[14322-14346]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[14323-15396]:DoStatement[14355-15428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14326-15354]:Block[14358-15386]"
    }, {
      "left" : "this.reusableToken.reset();",
      "right" : "this.reusableToken.reset();",
      "info" : "ExpressionStatement[14340-14367]:ExpressionStatement[14372-14399]"
    }, {
      "left" : "this.lexer.nextToken(this.reusableToken);",
      "right" : "this.lexer.nextToken(this.reusableToken);",
      "info" : "ExpressionStatement[14380-14421]:ExpressionStatement[14412-14453]"
    }, {
      "left" : "switch (this.reusableToken.type) {\n            case TOKEN:\n                this.addRecordValue();\n                break;\n            case EORECORD:\n                this.addRecordValue();\n                break;\n            case EOF:\n                if (this.reusableToken.isReady) {\n                    this.addRecordValue();\n                }\n                break;\n            case INVALID:\n                throw new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");\n            case COMMENT: // Ignored currently\n                if (sb == null) { // first comment for this record\n                    sb = new StringBuilder();\n                } else {\n                    sb.append(Constants.LF);\n                }\n                sb.append(this.reusableToken.content);\n                this.reusableToken.type = TOKEN; // Read another token\n                break;\n            }",
      "right" : "switch (this.reusableToken.type) {\n            case TOKEN:\n                this.addRecordValue();\n                break;\n            case EORECORD:\n                this.addRecordValue();\n                break;\n            case EOF:\n                if (this.reusableToken.isReady) {\n                    this.addRecordValue();\n                }\n                break;\n            case INVALID:\n                throw new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");\n            case COMMENT: // Ignored currently\n                if (sb == null) { // first comment for this record\n                    sb = new StringBuilder();\n                } else {\n                    sb.append(Constants.LF);\n                }\n                sb.append(this.reusableToken.content);\n                this.reusableToken.type = TOKEN; // Read another token\n                break;\n            }",
      "info" : "SwitchStatement[14434-15344]:SwitchStatement[14466-15376]"
    }, {
      "left" : "case TOKEN:",
      "right" : "case TOKEN:",
      "info" : "SwitchCase[14481-14492]:SwitchCase[14513-14524]"
    }, {
      "left" : "this.addRecordValue();",
      "right" : "this.addRecordValue();",
      "info" : "ExpressionStatement[14509-14531]:ExpressionStatement[14541-14563]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14548-14554]:BreakStatement[14580-14586]"
    }, {
      "left" : "case EORECORD:",
      "right" : "case EORECORD:",
      "info" : "SwitchCase[14567-14581]:SwitchCase[14599-14613]"
    }, {
      "left" : "this.addRecordValue();",
      "right" : "this.addRecordValue();",
      "info" : "ExpressionStatement[14598-14620]:ExpressionStatement[14630-14652]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14637-14643]:BreakStatement[14669-14675]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[14656-14665]:SwitchCase[14688-14697]"
    }, {
      "left" : "if (this.reusableToken.isReady)",
      "right" : "if (this.reusableToken.isReady)",
      "info" : "IfStatement[14682-14776]:IfStatement[14714-14808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14714-14776]:Block[14746-14808]"
    }, {
      "left" : "this.addRecordValue();",
      "right" : "this.addRecordValue();",
      "info" : "ExpressionStatement[14736-14758]:ExpressionStatement[14768-14790]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14793-14799]:BreakStatement[14825-14831]"
    }, {
      "left" : "case INVALID:",
      "right" : "case INVALID:",
      "info" : "SwitchCase[14812-14825]:SwitchCase[14844-14857]"
    }, {
      "left" : "throw new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");",
      "right" : "throw new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");",
      "info" : "ThrowStatement[14842-14933]:ThrowStatement[14874-14965]"
    }, {
      "left" : "case COMMENT:",
      "right" : "case COMMENT:",
      "info" : "SwitchCase[14946-14959]:SwitchCase[14978-14991]"
    }, {
      "left" : "if (sb == null)",
      "right" : "if (sb == null)",
      "info" : "IfStatement[14997-15181]:IfStatement[15029-15213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15013-15111]:Block[15045-15143]"
    }, {
      "left" : "sb = new StringBuilder();",
      "right" : "sb = new StringBuilder();",
      "info" : "ExpressionStatement[15068-15093]:ExpressionStatement[15100-15125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15117-15181]:Block[15149-15213]"
    }, {
      "left" : "sb.append(Constants.LF);",
      "right" : "sb.append(Constants.LF);",
      "info" : "ExpressionStatement[15139-15163]:ExpressionStatement[15171-15195]"
    }, {
      "left" : "sb.append(this.reusableToken.content);",
      "right" : "sb.append(this.reusableToken.content);",
      "info" : "ExpressionStatement[15198-15236]:ExpressionStatement[15230-15268]"
    }, {
      "left" : "this.reusableToken.type = TOKEN;",
      "right" : "this.reusableToken.type = TOKEN;",
      "info" : "ExpressionStatement[15253-15285]:ExpressionStatement[15285-15317]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15324-15330]:BreakStatement[15356-15362]"
    }, {
      "left" : "if (!this.record.isEmpty())",
      "right" : "if (!this.record.isEmpty())",
      "info" : "IfStatement[15406-15701]:IfStatement[15438-15733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15434-15701]:Block[15466-15733]"
    }, {
      "left" : "this.recordNumber++;",
      "right" : "this.recordNumber++;",
      "info" : "ExpressionStatement[15448-15468]:ExpressionStatement[15480-15500]"
    }, {
      "left" : "final String comment = sb == null ? null : sb.toString();",
      "right" : "final String comment = sb == null ? null : sb.toString();",
      "info" : "VariableDeclarationStatement[15481-15538]:VariableDeclarationStatement[15513-15570]"
    }, {
      "left" : "result = new CSVRecord(this.record.toArray(new String[this.record.size()]), this.headerMap, comment,\n                    this.recordNumber);",
      "right" : "result = new CSVRecord(this.record.toArray(new String[this.record.size()]), this.headerMap, comment,\n                    this.recordNumber);",
      "info" : "ExpressionStatement[15551-15691]:ExpressionStatement[15583-15723]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[15710-15724]:ReturnStatement[15742-15756]"
    } ]
  },
  "interFileMappings" : { }
}