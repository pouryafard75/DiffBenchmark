{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[284-1016]:MethodDeclaration[284-1016]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[1089-1176]:MethodDeclaration[1089-1176]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[1253-2016]:MethodDeclaration[1253-2016]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[2065-2154]:MethodDeclaration[2065-2154]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[2184-2292]:MethodDeclaration[2184-2292]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[2325-2436]:MethodDeclaration[2325-2436]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[2468-2982]:MethodDeclaration[2468-2982]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[3038-3861]:MethodDeclaration[3038-3861]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[3894-4436]:MethodDeclaration[3894-4436]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[4534-5700]:MethodDeclaration[4534-5700]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[5769-6565]:MethodDeclaration[5769-6565]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[6604-7002]:MethodDeclaration[6604-7002]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[7041-8324]:MethodDeclaration[7041-8324]"
    }, {
      "left" : "private void anythingElse(Tokeniser t, CharacterReader r)",
      "right" : "private void anythingElse(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[8334-8516]:MethodDeclaration[8334-8516]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[8558-8842]:MethodDeclaration[8558-8842]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[8882-8993]:MethodDeclaration[8882-8993]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[9033-9131]:MethodDeclaration[9033-9131]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[9176-9712]:MethodDeclaration[9176-9712]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[9755-9872]:MethodDeclaration[9755-9872]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[9915-10016]:MethodDeclaration[9915-10016]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[10060-10317]:MethodDeclaration[10060-10317]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[10365-10622]:MethodDeclaration[10365-10622]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[10662-11479]:MethodDeclaration[10662-11479]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[11523-12352]:MethodDeclaration[11523-12352]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[12400-13298]:MethodDeclaration[12400-13298]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[13350-13895]:MethodDeclaration[13350-13895]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[13945-14365]:MethodDeclaration[13945-14365]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[14415-14523]:MethodDeclaration[14415-14523]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[14573-14715]:MethodDeclaration[14573-14715]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[14761-15634]:MethodDeclaration[14761-15634]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[15684-16559]:MethodDeclaration[15684-16559]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[16613-17551]:MethodDeclaration[16613-17551]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[17609-17917]:MethodDeclaration[17609-17917]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[17965-18106]:MethodDeclaration[17965-18106]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[18177-19585]:MethodDeclaration[18177-19585]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[19659-21001]:MethodDeclaration[19659-21001]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[21042-22529]:MethodDeclaration[21042-22529]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[22572-24208]:MethodDeclaration[22572-24208]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[24258-25416]:MethodDeclaration[24258-25416]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[25466-26626]:MethodDeclaration[25466-26626]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[26672-28241]:MethodDeclaration[26672-28241]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[28353-29218]:MethodDeclaration[28353-29218]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[29260-29853]:MethodDeclaration[29260-29853]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[29888-30379]:MethodDeclaration[29888-30379]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[30423-31249]:MethodDeclaration[30423-31249]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[31284-32186]:MethodDeclaration[31284-32186]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[32225-33127]:MethodDeclaration[32225-33127]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[33157-33867]:MethodDeclaration[33157-33867]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[33904-34652]:MethodDeclaration[33904-34652]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[34685-35789]:MethodDeclaration[34685-35789]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[35826-36776]:MethodDeclaration[35826-36776]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[36806-37678]:MethodDeclaration[36806-37678]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[37718-38888]:MethodDeclaration[37718-38888]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[38922-40052]:MethodDeclaration[38922-40052]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[41092-42497]:MethodDeclaration[41232-42637]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[42549-43819]:MethodDeclaration[42689-43959]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[43878-44844]:MethodDeclaration[44018-44984]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[44903-45870]:MethodDeclaration[45043-46010]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[45921-47217]:MethodDeclaration[46061-47357]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[47280-48500]:MethodDeclaration[47420-48640]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[48548-49921]:MethodDeclaration[48688-50061]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[49973-51243]:MethodDeclaration[50113-51383]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[51302-52268]:MethodDeclaration[51442-52408]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[52327-53294]:MethodDeclaration[52467-53434]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[53345-54149]:MethodDeclaration[53485-54289]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[54184-54671]:MethodDeclaration[54324-54811]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[54706-54898]:MethodDeclaration[54846-55038]"
    }, {
      "left" : "abstract void read(Tokeniser t, CharacterReader r);",
      "right" : "abstract void read(Tokeniser t, CharacterReader r);",
      "info" : "MethodDeclaration[54912-54963]:MethodDeclaration[55052-55103]"
    }, {
      "left" : "static final char nullChar = '\\u0000';",
      "right" : "static final char nullChar = '\\u0000';",
      "info" : "FieldDeclaration[54969-55007]:FieldDeclaration[55109-55147]"
    }, {
      "left" : "private static final char[] attributeSingleValueCharsSorted = new char[]{'\\'', '&', nullChar};",
      "right" : "private static final char[] attributeSingleValueCharsSorted = new char[]{'\\'', '&', nullChar};",
      "info" : "FieldDeclaration[55012-55106]:FieldDeclaration[55152-55246]"
    }, {
      "left" : "private static final char[] attributeDoubleValueCharsSorted = new char[]{'\"', '&', nullChar};",
      "right" : "private static final char[] attributeDoubleValueCharsSorted = new char[]{'\"', '&', nullChar};",
      "info" : "FieldDeclaration[55111-55204]:FieldDeclaration[55251-55344]"
    }, {
      "left" : "private static final char[] attributeNameCharsSorted = new char[]{'\\t', '\\n', '\\r', '\\f', ' ', '/', '=', '>', nullChar, '\"', '\\'', '<'};",
      "right" : "private static final char[] attributeNameCharsSorted = new char[]{'\\t', '\\n', '\\r', '\\f', ' ', '/', '=', '>', nullChar, '\"', '\\'', '<'};",
      "info" : "FieldDeclaration[55209-55345]:FieldDeclaration[55349-55485]"
    }, {
      "left" : "private static final char[] attributeValueUnquoted = new char[]{'\\t', '\\n', '\\r', '\\f', ' ', '&', '>', nullChar, '\"', '\\'', '<', '=', '`'};",
      "right" : "private static final char[] attributeValueUnquoted = new char[]{'\\t', '\\n', '\\r', '\\f', ' ', '&', '>', nullChar, '\"', '\\'', '<', '=', '`'};",
      "info" : "FieldDeclaration[55350-55489]:FieldDeclaration[55490-55629]"
    }, {
      "left" : "private static final char replacementChar = Tokeniser.replacementChar;",
      "right" : "private static final char replacementChar = Tokeniser.replacementChar;",
      "info" : "FieldDeclaration[55495-55565]:FieldDeclaration[55635-55705]"
    }, {
      "left" : "private static final String replacementStr = String.valueOf(Tokeniser.replacementChar);",
      "right" : "private static final String replacementStr = String.valueOf(Tokeniser.replacementChar);",
      "info" : "FieldDeclaration[55570-55657]:FieldDeclaration[55710-55797]"
    }, {
      "left" : "private static final char eof = CharacterReader.EOF;",
      "right" : "private static final char eof = CharacterReader.EOF;",
      "info" : "FieldDeclaration[55662-55714]:FieldDeclaration[55802-55854]"
    }, {
      "left" : "private static void handleDataEndTag(Tokeniser t, CharacterReader r, TokeniserState elseTransition)",
      "right" : "private static void handleDataEndTag(Tokeniser t, CharacterReader r, TokeniserState elseTransition)",
      "info" : "MethodDeclaration[55940-57374]:MethodDeclaration[56080-57514]"
    }, {
      "left" : "private static void readData(Tokeniser t, CharacterReader r, TokeniserState current, TokeniserState advance)",
      "right" : "private static void readData(Tokeniser t, CharacterReader r, TokeniserState current, TokeniserState advance)",
      "info" : "MethodDeclaration[57380-58003]:MethodDeclaration[57520-58143]"
    }, {
      "left" : "private static void readCharRef(Tokeniser t, TokeniserState advance)",
      "right" : "private static void readCharRef(Tokeniser t, TokeniserState advance)",
      "info" : "MethodDeclaration[58009-58260]:MethodDeclaration[58149-58400]"
    }, {
      "left" : "private static void readEndTag(Tokeniser t, CharacterReader r, TokeniserState a, TokeniserState b)",
      "right" : "private static void readEndTag(Tokeniser t, CharacterReader r, TokeniserState a, TokeniserState b)",
      "info" : "MethodDeclaration[58266-58555]:MethodDeclaration[58406-58695]"
    }, {
      "left" : "private static void handleDataDoubleEscapeTag(Tokeniser t, CharacterReader r, TokeniserState primary, TokeniserState fallback)",
      "right" : "private static void handleDataDoubleEscapeTag(Tokeniser t, CharacterReader r, TokeniserState primary, TokeniserState fallback)",
      "info" : "MethodDeclaration[58561-59408]:MethodDeclaration[58701-59548]"
    } ],
    "mappings" : [
 {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[284-288]:PrimitiveType[284-288]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[289-293]:SimpleName[289-293]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[294-305]:SingleVariableDeclaration[294-305]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[307-324]:SingleVariableDeclaration[307-324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[326-1016]:Block[326-1016]"
    }, {
      "left" : "switch (r.current()) {\n                case '&':\n                    t.advanceTransition(CharacterReferenceInData);\n                    break;\n                case '<':\n                    t.advanceTransition(TagOpen);\n                    break;\n                case nullChar:\n                    t.error(this); // NOT replacement character (oddly?)\n                    t.emit(r.consume());\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeData();\n                    t.emit(data);\n                    break;\n            }",
      "right" : "switch (r.current()) {\n                case '&':\n                    t.advanceTransition(CharacterReferenceInData);\n                    break;\n                case '<':\n                    t.advanceTransition(TagOpen);\n                    break;\n                case nullChar:\n                    t.error(this); // NOT replacement character (oddly?)\n                    t.emit(r.consume());\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeData();\n                    t.emit(data);\n                    break;\n            }",
      "info" : "SwitchStatement[340-1006]:SwitchStatement[340-1006]"
    }, {
      "left" : "case '&':",
      "right" : "case '&':",
      "info" : "SwitchCase[379-388]:SwitchCase[379-388]"
    }, {
      "left" : "t.advanceTransition(CharacterReferenceInData);",
      "right" : "t.advanceTransition(CharacterReferenceInData);",
      "info" : "ExpressionStatement[409-455]:ExpressionStatement[409-455]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[476-482]:BreakStatement[476-482]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[499-508]:SwitchCase[499-508]"
    }, {
      "left" : "t.advanceTransition(TagOpen);",
      "right" : "t.advanceTransition(TagOpen);",
      "info" : "ExpressionStatement[529-558]:ExpressionStatement[529-558]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[579-585]:BreakStatement[579-585]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[602-616]:SwitchCase[602-616]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[637-651]:ExpressionStatement[637-651]"
    }, {
      "left" : "t.emit(r.consume());",
      "right" : "t.emit(r.consume());",
      "info" : "ExpressionStatement[710-730]:ExpressionStatement[710-730]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[751-757]:BreakStatement[751-757]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[774-783]:SwitchCase[774-783]"
    }, {
      "left" : "t.emit(new Token.EOF());",
      "right" : "t.emit(new Token.EOF());",
      "info" : "ExpressionStatement[804-828]:ExpressionStatement[804-828]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[849-855]:BreakStatement[849-855]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[872-880]:SwitchCase[872-880]"
    }, {
      "left" : "String data = r.consumeData();",
      "right" : "String data = r.consumeData();",
      "info" : "VariableDeclarationStatement[901-931]:VariableDeclarationStatement[901-931]"
    }, {
      "left" : "t.emit(data);",
      "right" : "t.emit(data);",
      "info" : "ExpressionStatement[952-965]:ExpressionStatement[952-965]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[986-992]:BreakStatement[986-992]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1089-1093]:PrimitiveType[1089-1093]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[1094-1098]:SimpleName[1094-1098]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[1099-1110]:SingleVariableDeclaration[1099-1110]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[1112-1129]:SingleVariableDeclaration[1112-1129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1131-1176]:Block[1131-1176]"
    }, {
      "left" : "readCharRef(t, Data);",
      "right" : "readCharRef(t, Data);",
      "info" : "ExpressionStatement[1145-1166]:ExpressionStatement[1145-1166]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1253-1257]:PrimitiveType[1253-1257]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[1258-1262]:SimpleName[1258-1262]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[1263-1274]:SingleVariableDeclaration[1263-1274]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[1276-1293]:SingleVariableDeclaration[1276-1293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1295-2016]:Block[1295-2016]"
    }, {
      "left" : "switch (r.current()) {\n                case '&':\n                    t.advanceTransition(CharacterReferenceInRcdata);\n                    break;\n                case '<':\n                    t.advanceTransition(RcdataLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeToAny('&', '<', nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "right" : "switch (r.current()) {\n                case '&':\n                    t.advanceTransition(CharacterReferenceInRcdata);\n                    break;\n                case '<':\n                    t.advanceTransition(RcdataLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeToAny('&', '<', nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "info" : "SwitchStatement[1309-2006]:SwitchStatement[1309-2006]"
    }, {
      "left" : "case '&':",
      "right" : "case '&':",
      "info" : "SwitchCase[1348-1357]:SwitchCase[1348-1357]"
    }, {
      "left" : "t.advanceTransition(CharacterReferenceInRcdata);",
      "right" : "t.advanceTransition(CharacterReferenceInRcdata);",
      "info" : "ExpressionStatement[1378-1426]:ExpressionStatement[1378-1426]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1447-1453]:BreakStatement[1447-1453]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[1470-1479]:SwitchCase[1470-1479]"
    }, {
      "left" : "t.advanceTransition(RcdataLessthanSign);",
      "right" : "t.advanceTransition(RcdataLessthanSign);",
      "info" : "ExpressionStatement[1500-1540]:ExpressionStatement[1500-1540]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1561-1567]:BreakStatement[1561-1567]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[1584-1598]:SwitchCase[1584-1598]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[1619-1633]:ExpressionStatement[1619-1633]"
    }, {
      "left" : "r.advance();",
      "right" : "r.advance();",
      "info" : "ExpressionStatement[1654-1666]:ExpressionStatement[1654-1666]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[1687-1711]:ExpressionStatement[1687-1711]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1732-1738]:BreakStatement[1732-1738]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[1755-1764]:SwitchCase[1755-1764]"
    }, {
      "left" : "t.emit(new Token.EOF());",
      "right" : "t.emit(new Token.EOF());",
      "info" : "ExpressionStatement[1785-1809]:ExpressionStatement[1785-1809]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1830-1836]:BreakStatement[1830-1836]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[1853-1861]:SwitchCase[1853-1861]"
    }, {
      "left" : "String data = r.consumeToAny('&', '<', nullChar);",
      "right" : "String data = r.consumeToAny('&', '<', nullChar);",
      "info" : "VariableDeclarationStatement[1882-1931]:VariableDeclarationStatement[1882-1931]"
    }, {
      "left" : "t.emit(data);",
      "right" : "t.emit(data);",
      "info" : "ExpressionStatement[1952-1965]:ExpressionStatement[1952-1965]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1986-1992]:BreakStatement[1986-1992]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2065-2069]:PrimitiveType[2065-2069]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[2070-2074]:SimpleName[2070-2074]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[2075-2086]:SingleVariableDeclaration[2075-2086]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[2088-2105]:SingleVariableDeclaration[2088-2105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2107-2154]:Block[2107-2154]"
    }, {
      "left" : "readCharRef(t, Rcdata);",
      "right" : "readCharRef(t, Rcdata);",
      "info" : "ExpressionStatement[2121-2144]:ExpressionStatement[2121-2144]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2184-2188]:PrimitiveType[2184-2188]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[2189-2193]:SimpleName[2189-2193]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[2194-2205]:SingleVariableDeclaration[2194-2205]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[2207-2224]:SingleVariableDeclaration[2207-2224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2226-2292]:Block[2226-2292]"
    }, {
      "left" : "readData(t, r, this, RawtextLessthanSign);",
      "right" : "readData(t, r, this, RawtextLessthanSign);",
      "info" : "ExpressionStatement[2240-2282]:ExpressionStatement[2240-2282]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2325-2329]:PrimitiveType[2325-2329]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[2330-2334]:SimpleName[2330-2334]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[2335-2346]:SingleVariableDeclaration[2335-2346]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[2348-2365]:SingleVariableDeclaration[2348-2365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2367-2436]:Block[2367-2436]"
    }, {
      "left" : "readData(t, r, this, ScriptDataLessthanSign);",
      "right" : "readData(t, r, this, ScriptDataLessthanSign);",
      "info" : "ExpressionStatement[2381-2426]:ExpressionStatement[2381-2426]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2468-2472]:PrimitiveType[2468-2472]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[2473-2477]:SimpleName[2473-2477]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[2478-2489]:SingleVariableDeclaration[2478-2489]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[2491-2508]:SingleVariableDeclaration[2491-2508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2510-2982]:Block[2510-2982]"
    }, {
      "left" : "switch (r.current()) {\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeTo(nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "right" : "switch (r.current()) {\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeTo(nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "info" : "SwitchStatement[2524-2972]:SwitchStatement[2524-2972]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[2563-2577]:SwitchCase[2563-2577]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[2598-2612]:ExpressionStatement[2598-2612]"
    }, {
      "left" : "r.advance();",
      "right" : "r.advance();",
      "info" : "ExpressionStatement[2633-2645]:ExpressionStatement[2633-2645]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[2666-2690]:ExpressionStatement[2666-2690]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2711-2717]:BreakStatement[2711-2717]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[2734-2743]:SwitchCase[2734-2743]"
    }, {
      "left" : "t.emit(new Token.EOF());",
      "right" : "t.emit(new Token.EOF());",
      "info" : "ExpressionStatement[2764-2788]:ExpressionStatement[2764-2788]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2809-2815]:BreakStatement[2809-2815]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[2832-2840]:SwitchCase[2832-2840]"
    }, {
      "left" : "String data = r.consumeTo(nullChar);",
      "right" : "String data = r.consumeTo(nullChar);",
      "info" : "VariableDeclarationStatement[2861-2897]:VariableDeclarationStatement[2861-2897]"
    }, {
      "left" : "t.emit(data);",
      "right" : "t.emit(data);",
      "info" : "ExpressionStatement[2918-2931]:ExpressionStatement[2918-2931]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2952-2958]:BreakStatement[2952-2958]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3038-3042]:PrimitiveType[3038-3042]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[3043-3047]:SimpleName[3043-3047]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[3048-3059]:SingleVariableDeclaration[3048-3059]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[3061-3078]:SingleVariableDeclaration[3061-3078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3080-3861]:Block[3080-3861]"
    }, {
      "left" : "switch (r.current()) {\n                case '!':\n                    t.advanceTransition(MarkupDeclarationOpen);\n                    break;\n                case '/':\n                    t.advanceTransition(EndTagOpen);\n                    break;\n                case '?':\n                    t.advanceTransition(BogusComment);\n                    break;\n                default:\n                    if (r.matchesLetter()) {\n                        t.createTagPending(true);\n                        t.transition(TagName);\n                    } else {\n                        t.error(this);\n                        t.emit('<'); // char that got us here\n                        t.transition(Data);\n                    }\n                    break;\n            }",
      "right" : "switch (r.current()) {\n                case '!':\n                    t.advanceTransition(MarkupDeclarationOpen);\n                    break;\n                case '/':\n                    t.advanceTransition(EndTagOpen);\n                    break;\n                case '?':\n                    t.advanceTransition(BogusComment);\n                    break;\n                default:\n                    if (r.matchesLetter()) {\n                        t.createTagPending(true);\n                        t.transition(TagName);\n                    } else {\n                        t.error(this);\n                        t.emit('<'); // char that got us here\n                        t.transition(Data);\n                    }\n                    break;\n            }",
      "info" : "SwitchStatement[3094-3851]:SwitchStatement[3094-3851]"
    }, {
      "left" : "case '!':",
      "right" : "case '!':",
      "info" : "SwitchCase[3133-3142]:SwitchCase[3133-3142]"
    }, {
      "left" : "t.advanceTransition(MarkupDeclarationOpen);",
      "right" : "t.advanceTransition(MarkupDeclarationOpen);",
      "info" : "ExpressionStatement[3163-3206]:ExpressionStatement[3163-3206]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3227-3233]:BreakStatement[3227-3233]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[3250-3259]:SwitchCase[3250-3259]"
    }, {
      "left" : "t.advanceTransition(EndTagOpen);",
      "right" : "t.advanceTransition(EndTagOpen);",
      "info" : "ExpressionStatement[3280-3312]:ExpressionStatement[3280-3312]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3333-3339]:BreakStatement[3333-3339]"
    }, {
      "left" : "case '?':",
      "right" : "case '?':",
      "info" : "SwitchCase[3356-3365]:SwitchCase[3356-3365]"
    }, {
      "left" : "t.advanceTransition(BogusComment);",
      "right" : "t.advanceTransition(BogusComment);",
      "info" : "ExpressionStatement[3386-3420]:ExpressionStatement[3386-3420]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3441-3447]:BreakStatement[3441-3447]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[3464-3472]:SwitchCase[3464-3472]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[3493-3810]:IfStatement[3493-3810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3516-3636]:Block[3516-3636]"
    }, {
      "left" : "t.createTagPending(true);",
      "right" : "t.createTagPending(true);",
      "info" : "ExpressionStatement[3542-3567]:ExpressionStatement[3542-3567]"
    }, {
      "left" : "t.transition(TagName);",
      "right" : "t.transition(TagName);",
      "info" : "ExpressionStatement[3592-3614]:ExpressionStatement[3592-3614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3642-3810]:Block[3642-3810]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[3668-3682]:ExpressionStatement[3668-3682]"
    }, {
      "left" : "t.emit('<');",
      "right" : "t.emit('<');",
      "info" : "ExpressionStatement[3707-3719]:ExpressionStatement[3707-3719]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[3769-3788]:ExpressionStatement[3769-3788]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3831-3837]:BreakStatement[3831-3837]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3894-3898]:PrimitiveType[3894-3898]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[3899-3903]:SimpleName[3899-3903]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[3904-3915]:SingleVariableDeclaration[3904-3915]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[3917-3934]:SingleVariableDeclaration[3917-3934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3936-4436]:Block[3936-4436]"
    }, {
      "left" : "if (r.isEmpty())",
      "right" : "if (r.isEmpty())",
      "info" : "IfStatement[3950-4426]:IfStatement[3950-4426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3967-4082]:Block[3967-4082]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[3985-4002]:ExpressionStatement[3985-4002]"
    }, {
      "left" : "t.emit(\"</\");",
      "right" : "t.emit(\"</\");",
      "info" : "ExpressionStatement[4019-4032]:ExpressionStatement[4019-4032]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[4049-4068]:ExpressionStatement[4049-4068]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[4088-4426]:IfStatement[4088-4426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4111-4208]:Block[4111-4208]"
    }, {
      "left" : "t.createTagPending(false);",
      "right" : "t.createTagPending(false);",
      "info" : "ExpressionStatement[4129-4155]:ExpressionStatement[4129-4155]"
    }, {
      "left" : "t.transition(TagName);",
      "right" : "t.transition(TagName);",
      "info" : "ExpressionStatement[4172-4194]:ExpressionStatement[4172-4194]"
    }, {
      "left" : "if (r.matches('>'))",
      "right" : "if (r.matches('>'))",
      "info" : "IfStatement[4214-4426]:IfStatement[4214-4426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4234-4323]:Block[4234-4323]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[4252-4266]:ExpressionStatement[4252-4266]"
    }, {
      "left" : "t.advanceTransition(Data);",
      "right" : "t.advanceTransition(Data);",
      "info" : "ExpressionStatement[4283-4309]:ExpressionStatement[4283-4309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4329-4426]:Block[4329-4426]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[4347-4361]:ExpressionStatement[4347-4361]"
    }, {
      "left" : "t.advanceTransition(BogusComment);",
      "right" : "t.advanceTransition(BogusComment);",
      "info" : "ExpressionStatement[4378-4412]:ExpressionStatement[4378-4412]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4534-4538]:PrimitiveType[4534-4538]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[4539-4543]:SimpleName[4539-4543]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[4544-4555]:SingleVariableDeclaration[4544-4555]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[4557-4574]:SingleVariableDeclaration[4557-4574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4576-5700]:Block[4576-5700]"
    }, {
      "left" : "String tagName = r.consumeTagName();",
      "right" : "String tagName = r.consumeTagName();",
      "info" : "VariableDeclarationStatement[4763-4799]:VariableDeclarationStatement[4763-4799]"
    }, {
      "left" : "t.tagPending.appendTagName(tagName);",
      "right" : "t.tagPending.appendTagName(tagName);",
      "info" : "ExpressionStatement[4812-4848]:ExpressionStatement[4812-4848]"
    }, {
      "left" : "switch (r.consume()) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeAttributeName);\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar: // replacement\n                    t.tagPending.appendTagName(replacementStr);\n                    break;\n                case eof: // should emit pending tag?\n                    t.eofError(this);\n                    t.transition(Data);\n                // no default, as covered with above consumeToAny\n            }",
      "right" : "switch (r.consume()) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeAttributeName);\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar: // replacement\n                    t.tagPending.appendTagName(replacementStr);\n                    break;\n                case eof: // should emit pending tag?\n                    t.eofError(this);\n                    t.transition(Data);\n                // no default, as covered with above consumeToAny\n            }",
      "info" : "SwitchStatement[4862-5690]:SwitchStatement[4862-5690]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[4901-4911]:SwitchCase[4901-4911]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[4928-4938]:SwitchCase[4928-4938]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[4955-4965]:SwitchCase[4955-4965]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[4982-4992]:SwitchCase[4982-4992]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[5009-5018]:SwitchCase[5009-5018]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[5039-5073]:ExpressionStatement[5039-5073]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5094-5100]:BreakStatement[5094-5100]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[5117-5126]:SwitchCase[5117-5126]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[5147-5181]:ExpressionStatement[5147-5181]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5202-5208]:BreakStatement[5202-5208]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[5225-5234]:SwitchCase[5225-5234]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[5255-5274]:ExpressionStatement[5255-5274]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[5295-5314]:ExpressionStatement[5295-5314]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5335-5341]:BreakStatement[5335-5341]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[5358-5372]:SwitchCase[5358-5372]"
    }, {
      "left" : "t.tagPending.appendTagName(replacementStr);",
      "right" : "t.tagPending.appendTagName(replacementStr);",
      "info" : "ExpressionStatement[5408-5451]:ExpressionStatement[5408-5451]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5472-5478]:BreakStatement[5472-5478]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[5495-5504]:SwitchCase[5495-5504]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[5553-5570]:ExpressionStatement[5553-5570]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[5591-5610]:ExpressionStatement[5591-5610]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5769-5773]:PrimitiveType[5769-5773]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[5774-5778]:SimpleName[5774-5778]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[5779-5790]:SingleVariableDeclaration[5779-5790]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[5792-5809]:SingleVariableDeclaration[5792-5809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5811-6565]:Block[5811-6565]"
    }, {
      "left" : "if (r.matches('/'))",
      "right" : "if (r.matches('/'))",
      "info" : "IfStatement[5825-6555]:IfStatement[5825-6555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5845-5953]:Block[5845-5953]"
    }, {
      "left" : "t.createTempBuffer();",
      "right" : "t.createTempBuffer();",
      "info" : "ExpressionStatement[5863-5884]:ExpressionStatement[5863-5884]"
    }, {
      "left" : "t.advanceTransition(RCDATAEndTagOpen);",
      "right" : "t.advanceTransition(RCDATAEndTagOpen);",
      "info" : "ExpressionStatement[5901-5939]:ExpressionStatement[5901-5939]"
    }, {
      "left" : "if (r.matchesLetter() && t.appropriateEndTagName() != null && !r.containsIgnoreCase(\"</\" + t.appropriateEndTagName()))",
      "right" : "if (r.matchesLetter() && t.appropriateEndTagName() != null && !r.containsIgnoreCase(\"</\" + t.appropriateEndTagName()))",
      "info" : "IfStatement[5959-6555]:IfStatement[5959-6555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6078-6467]:Block[6078-6467]"
    }, {
      "left" : "t.tagPending = t.createTagPending(false).name(t.appropriateEndTagName());",
      "right" : "t.tagPending = t.createTagPending(false).name(t.appropriateEndTagName());",
      "info" : "ExpressionStatement[6265-6338]:ExpressionStatement[6265-6338]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[6355-6374]:ExpressionStatement[6355-6374]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[6391-6405]:ExpressionStatement[6391-6405]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[6434-6453]:ExpressionStatement[6434-6453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6473-6555]:Block[6473-6555]"
    }, {
      "left" : "t.emit(\"<\");",
      "right" : "t.emit(\"<\");",
      "info" : "ExpressionStatement[6491-6503]:ExpressionStatement[6491-6503]"
    }, {
      "left" : "t.transition(Rcdata);",
      "right" : "t.transition(Rcdata);",
      "info" : "ExpressionStatement[6520-6541]:ExpressionStatement[6520-6541]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6604-6608]:PrimitiveType[6604-6608]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[6609-6613]:SimpleName[6609-6613]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[6614-6625]:SingleVariableDeclaration[6614-6625]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[6627-6644]:SingleVariableDeclaration[6627-6644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6646-7002]:Block[6646-7002]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[6660-6992]:IfStatement[6660-6992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6683-6903]:Block[6683-6903]"
    }, {
      "left" : "t.createTagPending(false);",
      "right" : "t.createTagPending(false);",
      "info" : "ExpressionStatement[6701-6727]:ExpressionStatement[6701-6727]"
    }, {
      "left" : "t.tagPending.appendTagName(r.current());",
      "right" : "t.tagPending.appendTagName(r.current());",
      "info" : "ExpressionStatement[6744-6784]:ExpressionStatement[6744-6784]"
    }, {
      "left" : "t.dataBuffer.append(r.current());",
      "right" : "t.dataBuffer.append(r.current());",
      "info" : "ExpressionStatement[6801-6834]:ExpressionStatement[6801-6834]"
    }, {
      "left" : "t.advanceTransition(RCDATAEndTagName);",
      "right" : "t.advanceTransition(RCDATAEndTagName);",
      "info" : "ExpressionStatement[6851-6889]:ExpressionStatement[6851-6889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6909-6992]:Block[6909-6992]"
    }, {
      "left" : "t.emit(\"</\");",
      "right" : "t.emit(\"</\");",
      "info" : "ExpressionStatement[6927-6940]:ExpressionStatement[6927-6940]"
    }, {
      "left" : "t.transition(Rcdata);",
      "right" : "t.transition(Rcdata);",
      "info" : "ExpressionStatement[6957-6978]:ExpressionStatement[6957-6978]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7041-7045]:PrimitiveType[7041-7045]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[7046-7050]:SimpleName[7046-7050]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[7051-7062]:SingleVariableDeclaration[7051-7062]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[7064-7081]:SingleVariableDeclaration[7064-7081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7083-8324]:Block[7083-8324]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[7097-7309]:IfStatement[7097-7309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7120-7309]:Block[7120-7309]"
    }, {
      "left" : "String name = r.consumeLetterSequence();",
      "right" : "String name = r.consumeLetterSequence();",
      "info" : "VariableDeclarationStatement[7138-7178]:VariableDeclarationStatement[7138-7178]"
    }, {
      "left" : "t.tagPending.appendTagName(name);",
      "right" : "t.tagPending.appendTagName(name);",
      "info" : "ExpressionStatement[7195-7228]:ExpressionStatement[7195-7228]"
    }, {
      "left" : "t.dataBuffer.append(name);",
      "right" : "t.dataBuffer.append(name);",
      "info" : "ExpressionStatement[7245-7271]:ExpressionStatement[7245-7271]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7288-7295]:ReturnStatement[7288-7295]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[7323-7344]:VariableDeclarationStatement[7323-7344]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    if (t.isAppropriateEndTagToken())\n                        t.transition(BeforeAttributeName);\n                    else\n                        anythingElse(t, r);\n                    break;\n                case '/':\n                    if (t.isAppropriateEndTagToken())\n                        t.transition(SelfClosingStartTag);\n                    else\n                        anythingElse(t, r);\n                    break;\n                case '>':\n                    if (t.isAppropriateEndTagToken()) {\n                        t.emitTagPending();\n                        t.transition(Data);\n                    }\n                    else\n                        anythingElse(t, r);\n                    break;\n                default:\n                    anythingElse(t, r);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    if (t.isAppropriateEndTagToken())\n                        t.transition(BeforeAttributeName);\n                    else\n                        anythingElse(t, r);\n                    break;\n                case '/':\n                    if (t.isAppropriateEndTagToken())\n                        t.transition(SelfClosingStartTag);\n                    else\n                        anythingElse(t, r);\n                    break;\n                case '>':\n                    if (t.isAppropriateEndTagToken()) {\n                        t.emitTagPending();\n                        t.transition(Data);\n                    }\n                    else\n                        anythingElse(t, r);\n                    break;\n                default:\n                    anythingElse(t, r);\n            }",
      "info" : "SwitchStatement[7357-8314]:SwitchStatement[7357-8314]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[7386-7396]:SwitchCase[7386-7396]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[7413-7423]:SwitchCase[7413-7423]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[7440-7450]:SwitchCase[7440-7450]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[7467-7477]:SwitchCase[7467-7477]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[7494-7503]:SwitchCase[7494-7503]"
    }, {
      "left" : "if (t.isAppropriateEndTagToken())",
      "right" : "if (t.isAppropriateEndTagToken())",
      "info" : "IfStatement[7524-7685]:IfStatement[7524-7685]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[7582-7616]:ExpressionStatement[7582-7616]"
    }, {
      "left" : "anythingElse(t, r);",
      "right" : "anythingElse(t, r);",
      "info" : "ExpressionStatement[7666-7685]:ExpressionStatement[7666-7685]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7706-7712]:BreakStatement[7706-7712]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[7729-7738]:SwitchCase[7729-7738]"
    }, {
      "left" : "if (t.isAppropriateEndTagToken())",
      "right" : "if (t.isAppropriateEndTagToken())",
      "info" : "IfStatement[7759-7920]:IfStatement[7759-7920]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[7817-7851]:ExpressionStatement[7817-7851]"
    }, {
      "left" : "anythingElse(t, r);",
      "right" : "anythingElse(t, r);",
      "info" : "ExpressionStatement[7901-7920]:ExpressionStatement[7901-7920]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7941-7947]:BreakStatement[7941-7947]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[7964-7973]:SwitchCase[7964-7973]"
    }, {
      "left" : "if (t.isAppropriateEndTagToken())",
      "right" : "if (t.isAppropriateEndTagToken())",
      "info" : "IfStatement[7994-8208]:IfStatement[7994-8208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8028-8139]:Block[8028-8139]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[8054-8073]:ExpressionStatement[8054-8073]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[8098-8117]:ExpressionStatement[8098-8117]"
    }, {
      "left" : "anythingElse(t, r);",
      "right" : "anythingElse(t, r);",
      "info" : "ExpressionStatement[8189-8208]:ExpressionStatement[8189-8208]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8229-8235]:BreakStatement[8229-8235]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[8252-8260]:SwitchCase[8252-8260]"
    }, {
      "left" : "anythingElse(t, r);",
      "right" : "anythingElse(t, r);",
      "info" : "ExpressionStatement[8281-8300]:ExpressionStatement[8281-8300]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8334-8341]:Modifier[8334-8341]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8342-8346]:PrimitiveType[8342-8346]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[8347-8359]:SimpleName[8347-8359]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[8360-8371]:SingleVariableDeclaration[8360-8371]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[8373-8390]:SingleVariableDeclaration[8373-8390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8392-8516]:Block[8392-8516]"
    }, {
      "left" : "t.emit(\"</\" + t.dataBuffer.toString());",
      "right" : "t.emit(\"</\" + t.dataBuffer.toString());",
      "info" : "ExpressionStatement[8406-8445]:ExpressionStatement[8406-8445]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[8458-8472]:ExpressionStatement[8458-8472]"
    }, {
      "left" : "t.transition(Rcdata);",
      "right" : "t.transition(Rcdata);",
      "info" : "ExpressionStatement[8485-8506]:ExpressionStatement[8485-8506]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8558-8562]:PrimitiveType[8558-8562]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[8563-8567]:SimpleName[8563-8567]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[8568-8579]:SingleVariableDeclaration[8568-8579]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[8581-8598]:SingleVariableDeclaration[8581-8598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8600-8842]:Block[8600-8842]"
    }, {
      "left" : "if (r.matches('/'))",
      "right" : "if (r.matches('/'))",
      "info" : "IfStatement[8614-8832]:IfStatement[8614-8832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8634-8743]:Block[8634-8743]"
    }, {
      "left" : "t.createTempBuffer();",
      "right" : "t.createTempBuffer();",
      "info" : "ExpressionStatement[8652-8673]:ExpressionStatement[8652-8673]"
    }, {
      "left" : "t.advanceTransition(RawtextEndTagOpen);",
      "right" : "t.advanceTransition(RawtextEndTagOpen);",
      "info" : "ExpressionStatement[8690-8729]:ExpressionStatement[8690-8729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8749-8832]:Block[8749-8832]"
    }, {
      "left" : "t.emit('<');",
      "right" : "t.emit('<');",
      "info" : "ExpressionStatement[8767-8779]:ExpressionStatement[8767-8779]"
    }, {
      "left" : "t.transition(Rawtext);",
      "right" : "t.transition(Rawtext);",
      "info" : "ExpressionStatement[8796-8818]:ExpressionStatement[8796-8818]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8882-8886]:PrimitiveType[8882-8886]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[8887-8891]:SimpleName[8887-8891]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[8892-8903]:SingleVariableDeclaration[8892-8903]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[8905-8922]:SingleVariableDeclaration[8905-8922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8924-8993]:Block[8924-8993]"
    }, {
      "left" : "readEndTag(t, r, RawtextEndTagName, Rawtext);",
      "right" : "readEndTag(t, r, RawtextEndTagName, Rawtext);",
      "info" : "ExpressionStatement[8938-8983]:ExpressionStatement[8938-8983]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9033-9037]:PrimitiveType[9033-9037]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[9038-9042]:SimpleName[9038-9042]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[9043-9054]:SingleVariableDeclaration[9043-9054]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[9056-9073]:SingleVariableDeclaration[9056-9073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9075-9131]:Block[9075-9131]"
    }, {
      "left" : "handleDataEndTag(t, r, Rawtext);",
      "right" : "handleDataEndTag(t, r, Rawtext);",
      "info" : "ExpressionStatement[9089-9121]:ExpressionStatement[9089-9121]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9176-9180]:PrimitiveType[9176-9180]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[9181-9185]:SimpleName[9181-9185]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[9186-9197]:SingleVariableDeclaration[9186-9197]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[9199-9216]:SingleVariableDeclaration[9199-9216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9218-9712]:Block[9218-9712]"
    }, {
      "left" : "switch (r.consume()) {\n                case '/':\n                    t.createTempBuffer();\n                    t.transition(ScriptDataEndTagOpen);\n                    break;\n                case '!':\n                    t.emit(\"<!\");\n                    t.transition(ScriptDataEscapeStart);\n                    break;\n                default:\n                    t.emit(\"<\");\n                    r.unconsume();\n                    t.transition(ScriptData);\n            }",
      "right" : "switch (r.consume()) {\n                case '/':\n                    t.createTempBuffer();\n                    t.transition(ScriptDataEndTagOpen);\n                    break;\n                case '!':\n                    t.emit(\"<!\");\n                    t.transition(ScriptDataEscapeStart);\n                    break;\n                default:\n                    t.emit(\"<\");\n                    r.unconsume();\n                    t.transition(ScriptData);\n            }",
      "info" : "SwitchStatement[9232-9702]:SwitchStatement[9232-9702]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[9271-9280]:SwitchCase[9271-9280]"
    }, {
      "left" : "t.createTempBuffer();",
      "right" : "t.createTempBuffer();",
      "info" : "ExpressionStatement[9301-9322]:ExpressionStatement[9301-9322]"
    }, {
      "left" : "t.transition(ScriptDataEndTagOpen);",
      "right" : "t.transition(ScriptDataEndTagOpen);",
      "info" : "ExpressionStatement[9343-9378]:ExpressionStatement[9343-9378]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9399-9405]:BreakStatement[9399-9405]"
    }, {
      "left" : "case '!':",
      "right" : "case '!':",
      "info" : "SwitchCase[9422-9431]:SwitchCase[9422-9431]"
    }, {
      "left" : "t.emit(\"<!\");",
      "right" : "t.emit(\"<!\");",
      "info" : "ExpressionStatement[9452-9465]:ExpressionStatement[9452-9465]"
    }, {
      "left" : "t.transition(ScriptDataEscapeStart);",
      "right" : "t.transition(ScriptDataEscapeStart);",
      "info" : "ExpressionStatement[9486-9522]:ExpressionStatement[9486-9522]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9543-9549]:BreakStatement[9543-9549]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[9566-9574]:SwitchCase[9566-9574]"
    }, {
      "left" : "t.emit(\"<\");",
      "right" : "t.emit(\"<\");",
      "info" : "ExpressionStatement[9595-9607]:ExpressionStatement[9595-9607]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[9628-9642]:ExpressionStatement[9628-9642]"
    }, {
      "left" : "t.transition(ScriptData);",
      "right" : "t.transition(ScriptData);",
      "info" : "ExpressionStatement[9663-9688]:ExpressionStatement[9663-9688]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9755-9759]:PrimitiveType[9755-9759]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[9760-9764]:SimpleName[9760-9764]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[9765-9776]:SingleVariableDeclaration[9765-9776]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[9778-9795]:SingleVariableDeclaration[9778-9795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9797-9872]:Block[9797-9872]"
    }, {
      "left" : "readEndTag(t, r, ScriptDataEndTagName, ScriptData);",
      "right" : "readEndTag(t, r, ScriptDataEndTagName, ScriptData);",
      "info" : "ExpressionStatement[9811-9862]:ExpressionStatement[9811-9862]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9915-9919]:PrimitiveType[9915-9919]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[9920-9924]:SimpleName[9920-9924]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[9925-9936]:SingleVariableDeclaration[9925-9936]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[9938-9955]:SingleVariableDeclaration[9938-9955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9957-10016]:Block[9957-10016]"
    }, {
      "left" : "handleDataEndTag(t, r, ScriptData);",
      "right" : "handleDataEndTag(t, r, ScriptData);",
      "info" : "ExpressionStatement[9971-10006]:ExpressionStatement[9971-10006]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10060-10064]:PrimitiveType[10060-10064]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[10065-10069]:SimpleName[10065-10069]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[10070-10081]:SingleVariableDeclaration[10070-10081]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[10083-10100]:SingleVariableDeclaration[10083-10100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10102-10317]:Block[10102-10317]"
    }, {
      "left" : "if (r.matches('-'))",
      "right" : "if (r.matches('-'))",
      "info" : "IfStatement[10116-10307]:IfStatement[10116-10307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10136-10244]:Block[10136-10244]"
    }, {
      "left" : "t.emit('-');",
      "right" : "t.emit('-');",
      "info" : "ExpressionStatement[10154-10166]:ExpressionStatement[10154-10166]"
    }, {
      "left" : "t.advanceTransition(ScriptDataEscapeStartDash);",
      "right" : "t.advanceTransition(ScriptDataEscapeStartDash);",
      "info" : "ExpressionStatement[10183-10230]:ExpressionStatement[10183-10230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10250-10307]:Block[10250-10307]"
    }, {
      "left" : "t.transition(ScriptData);",
      "right" : "t.transition(ScriptData);",
      "info" : "ExpressionStatement[10268-10293]:ExpressionStatement[10268-10293]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10365-10369]:PrimitiveType[10365-10369]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[10370-10374]:SimpleName[10370-10374]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[10375-10386]:SingleVariableDeclaration[10375-10386]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[10388-10405]:SingleVariableDeclaration[10388-10405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10407-10622]:Block[10407-10622]"
    }, {
      "left" : "if (r.matches('-'))",
      "right" : "if (r.matches('-'))",
      "info" : "IfStatement[10421-10612]:IfStatement[10421-10612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10441-10549]:Block[10441-10549]"
    }, {
      "left" : "t.emit('-');",
      "right" : "t.emit('-');",
      "info" : "ExpressionStatement[10459-10471]:ExpressionStatement[10459-10471]"
    }, {
      "left" : "t.advanceTransition(ScriptDataEscapedDashDash);",
      "right" : "t.advanceTransition(ScriptDataEscapedDashDash);",
      "info" : "ExpressionStatement[10488-10535]:ExpressionStatement[10488-10535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10555-10612]:Block[10555-10612]"
    }, {
      "left" : "t.transition(ScriptData);",
      "right" : "t.transition(ScriptData);",
      "info" : "ExpressionStatement[10573-10598]:ExpressionStatement[10573-10598]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10662-10666]:PrimitiveType[10662-10666]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[10667-10671]:SimpleName[10667-10671]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[10672-10683]:SingleVariableDeclaration[10672-10683]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[10685-10702]:SingleVariableDeclaration[10685-10702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10704-11479]:Block[10704-11479]"
    }, {
      "left" : "if (r.isEmpty())",
      "right" : "if (r.isEmpty())",
      "info" : "IfStatement[10718-10844]:IfStatement[10718-10844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10735-10844]:Block[10735-10844]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[10753-10770]:ExpressionStatement[10753-10770]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[10787-10806]:ExpressionStatement[10787-10806]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10823-10830]:ReturnStatement[10823-10830]"
    }, {
      "left" : "switch (r.current()) {\n                case '-':\n                    t.emit('-');\n                    t.advanceTransition(ScriptDataEscapedDash);\n                    break;\n                case '<':\n                    t.advanceTransition(ScriptDataEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                default:\n                    String data = r.consumeToAny('-', '<', nullChar);\n                    t.emit(data);\n            }",
      "right" : "switch (r.current()) {\n                case '-':\n                    t.emit('-');\n                    t.advanceTransition(ScriptDataEscapedDash);\n                    break;\n                case '<':\n                    t.advanceTransition(ScriptDataEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                default:\n                    String data = r.consumeToAny('-', '<', nullChar);\n                    t.emit(data);\n            }",
      "info" : "SwitchStatement[10858-11469]:SwitchStatement[10858-11469]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[10897-10906]:SwitchCase[10897-10906]"
    }, {
      "left" : "t.emit('-');",
      "right" : "t.emit('-');",
      "info" : "ExpressionStatement[10927-10939]:ExpressionStatement[10927-10939]"
    }, {
      "left" : "t.advanceTransition(ScriptDataEscapedDash);",
      "right" : "t.advanceTransition(ScriptDataEscapedDash);",
      "info" : "ExpressionStatement[10960-11003]:ExpressionStatement[10960-11003]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11024-11030]:BreakStatement[11024-11030]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[11047-11056]:SwitchCase[11047-11056]"
    }, {
      "left" : "t.advanceTransition(ScriptDataEscapedLessthanSign);",
      "right" : "t.advanceTransition(ScriptDataEscapedLessthanSign);",
      "info" : "ExpressionStatement[11077-11128]:ExpressionStatement[11077-11128]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11149-11155]:BreakStatement[11149-11155]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[11172-11186]:SwitchCase[11172-11186]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[11207-11221]:ExpressionStatement[11207-11221]"
    }, {
      "left" : "r.advance();",
      "right" : "r.advance();",
      "info" : "ExpressionStatement[11242-11254]:ExpressionStatement[11242-11254]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[11275-11299]:ExpressionStatement[11275-11299]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11320-11326]:BreakStatement[11320-11326]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11343-11351]:SwitchCase[11343-11351]"
    }, {
      "left" : "String data = r.consumeToAny('-', '<', nullChar);",
      "right" : "String data = r.consumeToAny('-', '<', nullChar);",
      "info" : "VariableDeclarationStatement[11372-11421]:VariableDeclarationStatement[11372-11421]"
    }, {
      "left" : "t.emit(data);",
      "right" : "t.emit(data);",
      "info" : "ExpressionStatement[11442-11455]:ExpressionStatement[11442-11455]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11523-11527]:PrimitiveType[11523-11527]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[11528-11532]:SimpleName[11528-11532]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[11533-11544]:SingleVariableDeclaration[11533-11544]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[11546-11563]:SingleVariableDeclaration[11546-11563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11565-12352]:Block[11565-12352]"
    }, {
      "left" : "if (r.isEmpty())",
      "right" : "if (r.isEmpty())",
      "info" : "IfStatement[11579-11705]:IfStatement[11579-11705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11596-11705]:Block[11596-11705]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[11614-11631]:ExpressionStatement[11614-11631]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[11648-11667]:ExpressionStatement[11648-11667]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11684-11691]:ReturnStatement[11684-11691]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[11719-11740]:VariableDeclarationStatement[11719-11740]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    t.transition(ScriptDataEscapedDashDash);\n                    break;\n                case '<':\n                    t.transition(ScriptDataEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataEscaped);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataEscaped);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    t.transition(ScriptDataEscapedDashDash);\n                    break;\n                case '<':\n                    t.transition(ScriptDataEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataEscaped);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataEscaped);\n            }",
      "info" : "SwitchStatement[11753-12342]:SwitchStatement[11753-12342]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[11782-11791]:SwitchCase[11782-11791]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[11812-11822]:ExpressionStatement[11812-11822]"
    }, {
      "left" : "t.transition(ScriptDataEscapedDashDash);",
      "right" : "t.transition(ScriptDataEscapedDashDash);",
      "info" : "ExpressionStatement[11843-11883]:ExpressionStatement[11843-11883]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11904-11910]:BreakStatement[11904-11910]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[11927-11936]:SwitchCase[11927-11936]"
    }, {
      "left" : "t.transition(ScriptDataEscapedLessthanSign);",
      "right" : "t.transition(ScriptDataEscapedLessthanSign);",
      "info" : "ExpressionStatement[11957-12001]:ExpressionStatement[11957-12001]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12022-12028]:BreakStatement[12022-12028]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[12045-12059]:SwitchCase[12045-12059]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[12080-12094]:ExpressionStatement[12080-12094]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[12115-12139]:ExpressionStatement[12115-12139]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[12160-12192]:ExpressionStatement[12160-12192]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12213-12219]:BreakStatement[12213-12219]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[12236-12244]:SwitchCase[12236-12244]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[12265-12275]:ExpressionStatement[12265-12275]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[12296-12328]:ExpressionStatement[12296-12328]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12400-12404]:PrimitiveType[12400-12404]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[12405-12409]:SimpleName[12405-12409]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[12410-12421]:SingleVariableDeclaration[12410-12421]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[12423-12440]:SingleVariableDeclaration[12423-12440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12442-13298]:Block[12442-13298]"
    }, {
      "left" : "if (r.isEmpty())",
      "right" : "if (r.isEmpty())",
      "info" : "IfStatement[12456-12582]:IfStatement[12456-12582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12473-12582]:Block[12473-12582]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[12491-12508]:ExpressionStatement[12491-12508]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[12525-12544]:ExpressionStatement[12525-12544]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[12561-12568]:ReturnStatement[12561-12568]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[12596-12617]:VariableDeclarationStatement[12596-12617]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    break;\n                case '<':\n                    t.transition(ScriptDataEscapedLessthanSign);\n                    break;\n                case '>':\n                    t.emit(c);\n                    t.transition(ScriptData);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataEscaped);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataEscaped);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    break;\n                case '<':\n                    t.transition(ScriptDataEscapedLessthanSign);\n                    break;\n                case '>':\n                    t.emit(c);\n                    t.transition(ScriptData);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataEscaped);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataEscaped);\n            }",
      "info" : "SwitchStatement[12630-13288]:SwitchStatement[12630-13288]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[12659-12668]:SwitchCase[12659-12668]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[12689-12699]:ExpressionStatement[12689-12699]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12720-12726]:BreakStatement[12720-12726]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[12743-12752]:SwitchCase[12743-12752]"
    }, {
      "left" : "t.transition(ScriptDataEscapedLessthanSign);",
      "right" : "t.transition(ScriptDataEscapedLessthanSign);",
      "info" : "ExpressionStatement[12773-12817]:ExpressionStatement[12773-12817]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12838-12844]:BreakStatement[12838-12844]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[12861-12870]:SwitchCase[12861-12870]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[12891-12901]:ExpressionStatement[12891-12901]"
    }, {
      "left" : "t.transition(ScriptData);",
      "right" : "t.transition(ScriptData);",
      "info" : "ExpressionStatement[12922-12947]:ExpressionStatement[12922-12947]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12968-12974]:BreakStatement[12968-12974]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[12991-13005]:SwitchCase[12991-13005]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[13026-13040]:ExpressionStatement[13026-13040]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[13061-13085]:ExpressionStatement[13061-13085]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[13106-13138]:ExpressionStatement[13106-13138]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13159-13165]:BreakStatement[13159-13165]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[13182-13190]:SwitchCase[13182-13190]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[13211-13221]:ExpressionStatement[13211-13221]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[13242-13274]:ExpressionStatement[13242-13274]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13350-13354]:PrimitiveType[13350-13354]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[13355-13359]:SimpleName[13355-13359]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[13360-13371]:SingleVariableDeclaration[13360-13371]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[13373-13390]:SingleVariableDeclaration[13373-13390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13392-13895]:Block[13392-13895]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[13406-13885]:IfStatement[13406-13885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13429-13641]:Block[13429-13641]"
    }, {
      "left" : "t.createTempBuffer();",
      "right" : "t.createTempBuffer();",
      "info" : "ExpressionStatement[13447-13468]:ExpressionStatement[13447-13468]"
    }, {
      "left" : "t.dataBuffer.append(r.current());",
      "right" : "t.dataBuffer.append(r.current());",
      "info" : "ExpressionStatement[13485-13518]:ExpressionStatement[13485-13518]"
    }, {
      "left" : "t.emit(\"<\" + r.current());",
      "right" : "t.emit(\"<\" + r.current());",
      "info" : "ExpressionStatement[13535-13561]:ExpressionStatement[13535-13561]"
    }, {
      "left" : "t.advanceTransition(ScriptDataDoubleEscapeStart);",
      "right" : "t.advanceTransition(ScriptDataDoubleEscapeStart);",
      "info" : "ExpressionStatement[13578-13627]:ExpressionStatement[13578-13627]"
    }, {
      "left" : "if (r.matches('/'))",
      "right" : "if (r.matches('/'))",
      "info" : "IfStatement[13647-13885]:IfStatement[13647-13885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13667-13786]:Block[13667-13786]"
    }, {
      "left" : "t.createTempBuffer();",
      "right" : "t.createTempBuffer();",
      "info" : "ExpressionStatement[13685-13706]:ExpressionStatement[13685-13706]"
    }, {
      "left" : "t.advanceTransition(ScriptDataEscapedEndTagOpen);",
      "right" : "t.advanceTransition(ScriptDataEscapedEndTagOpen);",
      "info" : "ExpressionStatement[13723-13772]:ExpressionStatement[13723-13772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13792-13885]:Block[13792-13885]"
    }, {
      "left" : "t.emit('<');",
      "right" : "t.emit('<');",
      "info" : "ExpressionStatement[13810-13822]:ExpressionStatement[13810-13822]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[13839-13871]:ExpressionStatement[13839-13871]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13945-13949]:PrimitiveType[13945-13949]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[13950-13954]:SimpleName[13950-13954]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[13955-13966]:SingleVariableDeclaration[13955-13966]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[13968-13985]:SingleVariableDeclaration[13968-13985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13987-14365]:Block[13987-14365]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[14001-14355]:IfStatement[14001-14355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14024-14255]:Block[14024-14255]"
    }, {
      "left" : "t.createTagPending(false);",
      "right" : "t.createTagPending(false);",
      "info" : "ExpressionStatement[14042-14068]:ExpressionStatement[14042-14068]"
    }, {
      "left" : "t.tagPending.appendTagName(r.current());",
      "right" : "t.tagPending.appendTagName(r.current());",
      "info" : "ExpressionStatement[14085-14125]:ExpressionStatement[14085-14125]"
    }, {
      "left" : "t.dataBuffer.append(r.current());",
      "right" : "t.dataBuffer.append(r.current());",
      "info" : "ExpressionStatement[14142-14175]:ExpressionStatement[14142-14175]"
    }, {
      "left" : "t.advanceTransition(ScriptDataEscapedEndTagName);",
      "right" : "t.advanceTransition(ScriptDataEscapedEndTagName);",
      "info" : "ExpressionStatement[14192-14241]:ExpressionStatement[14192-14241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14261-14355]:Block[14261-14355]"
    }, {
      "left" : "t.emit(\"</\");",
      "right" : "t.emit(\"</\");",
      "info" : "ExpressionStatement[14279-14292]:ExpressionStatement[14279-14292]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[14309-14341]:ExpressionStatement[14309-14341]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14415-14419]:PrimitiveType[14415-14419]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[14420-14424]:SimpleName[14420-14424]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[14425-14436]:SingleVariableDeclaration[14425-14436]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[14438-14455]:SingleVariableDeclaration[14438-14455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14457-14523]:Block[14457-14523]"
    }, {
      "left" : "handleDataEndTag(t, r, ScriptDataEscaped);",
      "right" : "handleDataEndTag(t, r, ScriptDataEscaped);",
      "info" : "ExpressionStatement[14471-14513]:ExpressionStatement[14471-14513]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14573-14577]:PrimitiveType[14573-14577]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[14578-14582]:SimpleName[14578-14582]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[14583-14594]:SingleVariableDeclaration[14583-14594]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[14596-14613]:SingleVariableDeclaration[14596-14613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14615-14715]:Block[14615-14715]"
    }, {
      "left" : "handleDataDoubleEscapeTag(t, r, ScriptDataDoubleEscaped, ScriptDataEscaped);",
      "right" : "handleDataDoubleEscapeTag(t, r, ScriptDataDoubleEscaped, ScriptDataEscaped);",
      "info" : "ExpressionStatement[14629-14705]:ExpressionStatement[14629-14705]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14761-14765]:PrimitiveType[14761-14765]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[14766-14770]:SimpleName[14766-14770]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[14771-14782]:SingleVariableDeclaration[14771-14782]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[14784-14801]:SingleVariableDeclaration[14784-14801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14803-15634]:Block[14803-15634]"
    }, {
      "left" : "char c = r.current();",
      "right" : "char c = r.current();",
      "info" : "VariableDeclarationStatement[14817-14838]:VariableDeclarationStatement[14817-14838]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    t.advanceTransition(ScriptDataDoubleEscapedDash);\n                    break;\n                case '<':\n                    t.emit(c);\n                    t.advanceTransition(ScriptDataDoubleEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    String data = r.consumeToAny('-', '<', nullChar);\n                    t.emit(data);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    t.advanceTransition(ScriptDataDoubleEscapedDash);\n                    break;\n                case '<':\n                    t.emit(c);\n                    t.advanceTransition(ScriptDataDoubleEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    String data = r.consumeToAny('-', '<', nullChar);\n                    t.emit(data);\n            }",
      "info" : "SwitchStatement[14851-15624]:SwitchStatement[14851-15624]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[14880-14889]:SwitchCase[14880-14889]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[14910-14920]:ExpressionStatement[14910-14920]"
    }, {
      "left" : "t.advanceTransition(ScriptDataDoubleEscapedDash);",
      "right" : "t.advanceTransition(ScriptDataDoubleEscapedDash);",
      "info" : "ExpressionStatement[14941-14990]:ExpressionStatement[14941-14990]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15011-15017]:BreakStatement[15011-15017]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[15034-15043]:SwitchCase[15034-15043]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[15064-15074]:ExpressionStatement[15064-15074]"
    }, {
      "left" : "t.advanceTransition(ScriptDataDoubleEscapedLessthanSign);",
      "right" : "t.advanceTransition(ScriptDataDoubleEscapedLessthanSign);",
      "info" : "ExpressionStatement[15095-15152]:ExpressionStatement[15095-15152]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15173-15179]:BreakStatement[15173-15179]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[15196-15210]:SwitchCase[15196-15210]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[15231-15245]:ExpressionStatement[15231-15245]"
    }, {
      "left" : "r.advance();",
      "right" : "r.advance();",
      "info" : "ExpressionStatement[15266-15278]:ExpressionStatement[15266-15278]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[15299-15323]:ExpressionStatement[15299-15323]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15344-15350]:BreakStatement[15344-15350]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[15367-15376]:SwitchCase[15367-15376]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[15397-15414]:ExpressionStatement[15397-15414]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[15435-15454]:ExpressionStatement[15435-15454]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15475-15481]:BreakStatement[15475-15481]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[15498-15506]:SwitchCase[15498-15506]"
    }, {
      "left" : "String data = r.consumeToAny('-', '<', nullChar);",
      "right" : "String data = r.consumeToAny('-', '<', nullChar);",
      "info" : "VariableDeclarationStatement[15527-15576]:VariableDeclarationStatement[15527-15576]"
    }, {
      "left" : "t.emit(data);",
      "right" : "t.emit(data);",
      "info" : "ExpressionStatement[15597-15610]:ExpressionStatement[15597-15610]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15684-15688]:PrimitiveType[15684-15688]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[15689-15693]:SimpleName[15689-15693]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[15694-15705]:SingleVariableDeclaration[15694-15705]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[15707-15724]:SingleVariableDeclaration[15707-15724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15726-16559]:Block[15726-16559]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[15740-15761]:VariableDeclarationStatement[15740-15761]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscapedDashDash);\n                    break;\n                case '<':\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataDoubleEscaped);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscaped);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscapedDashDash);\n                    break;\n                case '<':\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataDoubleEscaped);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscaped);\n            }",
      "info" : "SwitchStatement[15774-16549]:SwitchStatement[15774-16549]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[15803-15812]:SwitchCase[15803-15812]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[15833-15843]:ExpressionStatement[15833-15843]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscapedDashDash);",
      "right" : "t.transition(ScriptDataDoubleEscapedDashDash);",
      "info" : "ExpressionStatement[15864-15910]:ExpressionStatement[15864-15910]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15931-15937]:BreakStatement[15931-15937]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[15954-15963]:SwitchCase[15954-15963]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[15984-15994]:ExpressionStatement[15984-15994]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscapedLessthanSign);",
      "right" : "t.transition(ScriptDataDoubleEscapedLessthanSign);",
      "info" : "ExpressionStatement[16015-16065]:ExpressionStatement[16015-16065]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16086-16092]:BreakStatement[16086-16092]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[16109-16123]:SwitchCase[16109-16123]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[16144-16158]:ExpressionStatement[16144-16158]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[16179-16203]:ExpressionStatement[16179-16203]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscaped);",
      "right" : "t.transition(ScriptDataDoubleEscaped);",
      "info" : "ExpressionStatement[16224-16262]:ExpressionStatement[16224-16262]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16283-16289]:BreakStatement[16283-16289]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[16306-16315]:SwitchCase[16306-16315]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[16336-16353]:ExpressionStatement[16336-16353]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[16374-16393]:ExpressionStatement[16374-16393]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16414-16420]:BreakStatement[16414-16420]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[16437-16445]:SwitchCase[16437-16445]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[16466-16476]:ExpressionStatement[16466-16476]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscaped);",
      "right" : "t.transition(ScriptDataDoubleEscaped);",
      "info" : "ExpressionStatement[16497-16535]:ExpressionStatement[16497-16535]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16613-16617]:PrimitiveType[16613-16617]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[16618-16622]:SimpleName[16618-16622]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[16623-16634]:SingleVariableDeclaration[16623-16634]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[16636-16653]:SingleVariableDeclaration[16636-16653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16655-17551]:Block[16655-17551]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[16669-16690]:VariableDeclarationStatement[16669-16690]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    break;\n                case '<':\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscapedLessthanSign);\n                    break;\n                case '>':\n                    t.emit(c);\n                    t.transition(ScriptData);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataDoubleEscaped);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscaped);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    break;\n                case '<':\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscapedLessthanSign);\n                    break;\n                case '>':\n                    t.emit(c);\n                    t.transition(ScriptData);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataDoubleEscaped);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscaped);\n            }",
      "info" : "SwitchStatement[16703-17541]:SwitchStatement[16703-17541]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[16732-16741]:SwitchCase[16732-16741]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[16762-16772]:ExpressionStatement[16762-16772]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16793-16799]:BreakStatement[16793-16799]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[16816-16825]:SwitchCase[16816-16825]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[16846-16856]:ExpressionStatement[16846-16856]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscapedLessthanSign);",
      "right" : "t.transition(ScriptDataDoubleEscapedLessthanSign);",
      "info" : "ExpressionStatement[16877-16927]:ExpressionStatement[16877-16927]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16948-16954]:BreakStatement[16948-16954]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[16971-16980]:SwitchCase[16971-16980]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[17001-17011]:ExpressionStatement[17001-17011]"
    }, {
      "left" : "t.transition(ScriptData);",
      "right" : "t.transition(ScriptData);",
      "info" : "ExpressionStatement[17032-17057]:ExpressionStatement[17032-17057]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17078-17084]:BreakStatement[17078-17084]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[17101-17115]:SwitchCase[17101-17115]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[17136-17150]:ExpressionStatement[17136-17150]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[17171-17195]:ExpressionStatement[17171-17195]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscaped);",
      "right" : "t.transition(ScriptDataDoubleEscaped);",
      "info" : "ExpressionStatement[17216-17254]:ExpressionStatement[17216-17254]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17275-17281]:BreakStatement[17275-17281]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[17298-17307]:SwitchCase[17298-17307]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[17328-17345]:ExpressionStatement[17328-17345]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[17366-17385]:ExpressionStatement[17366-17385]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17406-17412]:BreakStatement[17406-17412]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[17429-17437]:SwitchCase[17429-17437]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[17458-17468]:ExpressionStatement[17458-17468]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscaped);",
      "right" : "t.transition(ScriptDataDoubleEscaped);",
      "info" : "ExpressionStatement[17489-17527]:ExpressionStatement[17489-17527]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17609-17613]:PrimitiveType[17609-17613]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[17614-17618]:SimpleName[17614-17618]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[17619-17630]:SingleVariableDeclaration[17619-17630]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[17632-17649]:SingleVariableDeclaration[17632-17649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17651-17917]:Block[17651-17917]"
    }, {
      "left" : "if (r.matches('/'))",
      "right" : "if (r.matches('/'))",
      "info" : "IfStatement[17665-17907]:IfStatement[17665-17907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17685-17831]:Block[17685-17831]"
    }, {
      "left" : "t.emit('/');",
      "right" : "t.emit('/');",
      "info" : "ExpressionStatement[17703-17715]:ExpressionStatement[17703-17715]"
    }, {
      "left" : "t.createTempBuffer();",
      "right" : "t.createTempBuffer();",
      "info" : "ExpressionStatement[17732-17753]:ExpressionStatement[17732-17753]"
    }, {
      "left" : "t.advanceTransition(ScriptDataDoubleEscapeEnd);",
      "right" : "t.advanceTransition(ScriptDataDoubleEscapeEnd);",
      "info" : "ExpressionStatement[17770-17817]:ExpressionStatement[17770-17817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17837-17907]:Block[17837-17907]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscaped);",
      "right" : "t.transition(ScriptDataDoubleEscaped);",
      "info" : "ExpressionStatement[17855-17893]:ExpressionStatement[17855-17893]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17965-17969]:PrimitiveType[17965-17969]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[17970-17974]:SimpleName[17970-17974]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[17975-17986]:SingleVariableDeclaration[17975-17986]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[17988-18005]:SingleVariableDeclaration[17988-18005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18007-18106]:Block[18007-18106]"
    }, {
      "left" : "handleDataDoubleEscapeTag(t,r, ScriptDataEscaped, ScriptDataDoubleEscaped);",
      "right" : "handleDataDoubleEscapeTag(t,r, ScriptDataEscaped, ScriptDataDoubleEscaped);",
      "info" : "ExpressionStatement[18021-18096]:ExpressionStatement[18021-18096]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18177-18181]:PrimitiveType[18177-18181]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[18182-18186]:SimpleName[18182-18186]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[18187-18198]:SingleVariableDeclaration[18187-18198]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[18200-18217]:SingleVariableDeclaration[18200-18217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18219-19585]:Block[18219-19585]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[18233-18254]:VariableDeclarationStatement[18233-18254]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    break; // ignore whitespace\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.newAttribute();\n                    r.unconsume();\n                    t.transition(AttributeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '\"':\n                case '\\'':\n                case '<':\n                case '=':\n                    t.error(this);\n                    t.tagPending.newAttribute();\n                    t.tagPending.appendAttributeName(c);\n                    t.transition(AttributeName);\n                    break;\n                default: // A-Z, anything else\n                    t.tagPending.newAttribute();\n                    r.unconsume();\n                    t.transition(AttributeName);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    break; // ignore whitespace\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.newAttribute();\n                    r.unconsume();\n                    t.transition(AttributeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '\"':\n                case '\\'':\n                case '<':\n                case '=':\n                    t.error(this);\n                    t.tagPending.newAttribute();\n                    t.tagPending.appendAttributeName(c);\n                    t.transition(AttributeName);\n                    break;\n                default: // A-Z, anything else\n                    t.tagPending.newAttribute();\n                    r.unconsume();\n                    t.transition(AttributeName);\n            }",
      "info" : "SwitchStatement[18267-19575]:SwitchStatement[18267-19575]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[18296-18306]:SwitchCase[18296-18306]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[18323-18333]:SwitchCase[18323-18333]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[18350-18360]:SwitchCase[18350-18360]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[18377-18387]:SwitchCase[18377-18387]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[18404-18413]:SwitchCase[18404-18413]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18434-18440]:BreakStatement[18434-18440]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[18478-18487]:SwitchCase[18478-18487]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[18508-18542]:ExpressionStatement[18508-18542]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18563-18569]:BreakStatement[18563-18569]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[18586-18595]:SwitchCase[18586-18595]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[18616-18635]:ExpressionStatement[18616-18635]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[18656-18675]:ExpressionStatement[18656-18675]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18696-18702]:BreakStatement[18696-18702]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[18719-18733]:SwitchCase[18719-18733]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[18754-18768]:ExpressionStatement[18754-18768]"
    }, {
      "left" : "t.tagPending.newAttribute();",
      "right" : "t.tagPending.newAttribute();",
      "info" : "ExpressionStatement[18789-18817]:ExpressionStatement[18789-18817]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[18838-18852]:ExpressionStatement[18838-18852]"
    }, {
      "left" : "t.transition(AttributeName);",
      "right" : "t.transition(AttributeName);",
      "info" : "ExpressionStatement[18873-18901]:ExpressionStatement[18873-18901]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18922-18928]:BreakStatement[18922-18928]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[18945-18954]:SwitchCase[18945-18954]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[18975-18992]:ExpressionStatement[18975-18992]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[19013-19032]:ExpressionStatement[19013-19032]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19053-19059]:BreakStatement[19053-19059]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[19076-19085]:SwitchCase[19076-19085]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[19102-19112]:SwitchCase[19102-19112]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[19129-19138]:SwitchCase[19129-19138]"
    }, {
      "left" : "case '=':",
      "right" : "case '=':",
      "info" : "SwitchCase[19155-19164]:SwitchCase[19155-19164]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[19185-19199]:ExpressionStatement[19185-19199]"
    }, {
      "left" : "t.tagPending.newAttribute();",
      "right" : "t.tagPending.newAttribute();",
      "info" : "ExpressionStatement[19220-19248]:ExpressionStatement[19220-19248]"
    }, {
      "left" : "t.tagPending.appendAttributeName(c);",
      "right" : "t.tagPending.appendAttributeName(c);",
      "info" : "ExpressionStatement[19269-19305]:ExpressionStatement[19269-19305]"
    }, {
      "left" : "t.transition(AttributeName);",
      "right" : "t.transition(AttributeName);",
      "info" : "ExpressionStatement[19326-19354]:ExpressionStatement[19326-19354]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19375-19381]:BreakStatement[19375-19381]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[19398-19406]:SwitchCase[19398-19406]"
    }, {
      "left" : "t.tagPending.newAttribute();",
      "right" : "t.tagPending.newAttribute();",
      "info" : "ExpressionStatement[19449-19477]:ExpressionStatement[19449-19477]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[19498-19512]:ExpressionStatement[19498-19512]"
    }, {
      "left" : "t.transition(AttributeName);",
      "right" : "t.transition(AttributeName);",
      "info" : "ExpressionStatement[19533-19561]:ExpressionStatement[19533-19561]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19659-19663]:PrimitiveType[19659-19663]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[19664-19668]:SimpleName[19664-19668]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[19669-19680]:SingleVariableDeclaration[19669-19680]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[19682-19699]:SingleVariableDeclaration[19682-19699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19701-21001]:Block[19701-21001]"
    }, {
      "left" : "String name = r.consumeToAnySorted(attributeNameCharsSorted);",
      "right" : "String name = r.consumeToAnySorted(attributeNameCharsSorted);",
      "info" : "VariableDeclarationStatement[19715-19776]:VariableDeclarationStatement[19715-19776]"
    }, {
      "left" : "t.tagPending.appendAttributeName(name);",
      "right" : "t.tagPending.appendAttributeName(name);",
      "info" : "ExpressionStatement[19789-19828]:ExpressionStatement[19789-19828]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[19842-19863]:VariableDeclarationStatement[19842-19863]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(AfterAttributeName);\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '=':\n                    t.transition(BeforeAttributeValue);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeName(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '\"':\n                case '\\'':\n                case '<':\n                    t.error(this);\n                    t.tagPending.appendAttributeName(c);\n                // no default, as covered in consumeToAny\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(AfterAttributeName);\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '=':\n                    t.transition(BeforeAttributeValue);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeName(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '\"':\n                case '\\'':\n                case '<':\n                    t.error(this);\n                    t.tagPending.appendAttributeName(c);\n                // no default, as covered in consumeToAny\n            }",
      "info" : "SwitchStatement[19876-20991]:SwitchStatement[19876-20991]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[19905-19915]:SwitchCase[19905-19915]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[19932-19942]:SwitchCase[19932-19942]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[19959-19969]:SwitchCase[19959-19969]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[19986-19996]:SwitchCase[19986-19996]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[20013-20022]:SwitchCase[20013-20022]"
    }, {
      "left" : "t.transition(AfterAttributeName);",
      "right" : "t.transition(AfterAttributeName);",
      "info" : "ExpressionStatement[20043-20076]:ExpressionStatement[20043-20076]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20097-20103]:BreakStatement[20097-20103]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[20120-20129]:SwitchCase[20120-20129]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[20150-20184]:ExpressionStatement[20150-20184]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20205-20211]:BreakStatement[20205-20211]"
    }, {
      "left" : "case '=':",
      "right" : "case '=':",
      "info" : "SwitchCase[20228-20237]:SwitchCase[20228-20237]"
    }, {
      "left" : "t.transition(BeforeAttributeValue);",
      "right" : "t.transition(BeforeAttributeValue);",
      "info" : "ExpressionStatement[20258-20293]:ExpressionStatement[20258-20293]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20314-20320]:BreakStatement[20314-20320]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[20337-20346]:SwitchCase[20337-20346]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[20367-20386]:ExpressionStatement[20367-20386]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[20407-20426]:ExpressionStatement[20407-20426]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20447-20453]:BreakStatement[20447-20453]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[20470-20484]:SwitchCase[20470-20484]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[20505-20519]:ExpressionStatement[20505-20519]"
    }, {
      "left" : "t.tagPending.appendAttributeName(replacementChar);",
      "right" : "t.tagPending.appendAttributeName(replacementChar);",
      "info" : "ExpressionStatement[20540-20590]:ExpressionStatement[20540-20590]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20611-20617]:BreakStatement[20611-20617]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[20634-20643]:SwitchCase[20634-20643]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[20664-20681]:ExpressionStatement[20664-20681]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[20702-20721]:ExpressionStatement[20702-20721]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20742-20748]:BreakStatement[20742-20748]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[20765-20774]:SwitchCase[20765-20774]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[20791-20801]:SwitchCase[20791-20801]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[20818-20827]:SwitchCase[20818-20827]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[20848-20862]:ExpressionStatement[20848-20862]"
    }, {
      "left" : "t.tagPending.appendAttributeName(c);",
      "right" : "t.tagPending.appendAttributeName(c);",
      "info" : "ExpressionStatement[20883-20919]:ExpressionStatement[20883-20919]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21042-21046]:PrimitiveType[21042-21046]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[21047-21051]:SimpleName[21047-21051]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[21052-21063]:SingleVariableDeclaration[21052-21063]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[21065-21082]:SingleVariableDeclaration[21065-21082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21084-22529]:Block[21084-22529]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[21098-21119]:VariableDeclarationStatement[21098-21119]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    // ignore\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '=':\n                    t.transition(BeforeAttributeValue);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeName(replacementChar);\n                    t.transition(AttributeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '\"':\n                case '\\'':\n                case '<':\n                    t.error(this);\n                    t.tagPending.newAttribute();\n                    t.tagPending.appendAttributeName(c);\n                    t.transition(AttributeName);\n                    break;\n                default: // A-Z, anything else\n                    t.tagPending.newAttribute();\n                    r.unconsume();\n                    t.transition(AttributeName);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    // ignore\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '=':\n                    t.transition(BeforeAttributeValue);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeName(replacementChar);\n                    t.transition(AttributeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '\"':\n                case '\\'':\n                case '<':\n                    t.error(this);\n                    t.tagPending.newAttribute();\n                    t.tagPending.appendAttributeName(c);\n                    t.transition(AttributeName);\n                    break;\n                default: // A-Z, anything else\n                    t.tagPending.newAttribute();\n                    r.unconsume();\n                    t.transition(AttributeName);\n            }",
      "info" : "SwitchStatement[21132-22519]:SwitchStatement[21132-22519]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[21161-21171]:SwitchCase[21161-21171]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[21188-21198]:SwitchCase[21188-21198]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[21215-21225]:SwitchCase[21215-21225]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[21242-21252]:SwitchCase[21242-21252]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[21269-21278]:SwitchCase[21269-21278]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21329-21335]:BreakStatement[21329-21335]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[21352-21361]:SwitchCase[21352-21361]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[21382-21416]:ExpressionStatement[21382-21416]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21437-21443]:BreakStatement[21437-21443]"
    }, {
      "left" : "case '=':",
      "right" : "case '=':",
      "info" : "SwitchCase[21460-21469]:SwitchCase[21460-21469]"
    }, {
      "left" : "t.transition(BeforeAttributeValue);",
      "right" : "t.transition(BeforeAttributeValue);",
      "info" : "ExpressionStatement[21490-21525]:ExpressionStatement[21490-21525]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21546-21552]:BreakStatement[21546-21552]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[21569-21578]:SwitchCase[21569-21578]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[21599-21618]:ExpressionStatement[21599-21618]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[21639-21658]:ExpressionStatement[21639-21658]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21679-21685]:BreakStatement[21679-21685]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[21702-21716]:SwitchCase[21702-21716]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[21737-21751]:ExpressionStatement[21737-21751]"
    }, {
      "left" : "t.tagPending.appendAttributeName(replacementChar);",
      "right" : "t.tagPending.appendAttributeName(replacementChar);",
      "info" : "ExpressionStatement[21772-21822]:ExpressionStatement[21772-21822]"
    }, {
      "left" : "t.transition(AttributeName);",
      "right" : "t.transition(AttributeName);",
      "info" : "ExpressionStatement[21843-21871]:ExpressionStatement[21843-21871]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21892-21898]:BreakStatement[21892-21898]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[21915-21924]:SwitchCase[21915-21924]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[21945-21962]:ExpressionStatement[21945-21962]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[21983-22002]:ExpressionStatement[21983-22002]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22023-22029]:BreakStatement[22023-22029]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[22046-22055]:SwitchCase[22046-22055]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[22072-22082]:SwitchCase[22072-22082]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[22099-22108]:SwitchCase[22099-22108]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[22129-22143]:ExpressionStatement[22129-22143]"
    }, {
      "left" : "t.tagPending.newAttribute();",
      "right" : "t.tagPending.newAttribute();",
      "info" : "ExpressionStatement[22164-22192]:ExpressionStatement[22164-22192]"
    }, {
      "left" : "t.tagPending.appendAttributeName(c);",
      "right" : "t.tagPending.appendAttributeName(c);",
      "info" : "ExpressionStatement[22213-22249]:ExpressionStatement[22213-22249]"
    }, {
      "left" : "t.transition(AttributeName);",
      "right" : "t.transition(AttributeName);",
      "info" : "ExpressionStatement[22270-22298]:ExpressionStatement[22270-22298]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22319-22325]:BreakStatement[22319-22325]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[22342-22350]:SwitchCase[22342-22350]"
    }, {
      "left" : "t.tagPending.newAttribute();",
      "right" : "t.tagPending.newAttribute();",
      "info" : "ExpressionStatement[22393-22421]:ExpressionStatement[22393-22421]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[22442-22456]:ExpressionStatement[22442-22456]"
    }, {
      "left" : "t.transition(AttributeName);",
      "right" : "t.transition(AttributeName);",
      "info" : "ExpressionStatement[22477-22505]:ExpressionStatement[22477-22505]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22572-22576]:PrimitiveType[22572-22576]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[22577-22581]:SimpleName[22577-22581]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[22582-22593]:SingleVariableDeclaration[22582-22593]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[22595-22612]:SingleVariableDeclaration[22595-22612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22614-24208]:Block[22614-24208]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[22628-22649]:VariableDeclarationStatement[22628-22649]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    // ignore\n                    break;\n                case '\"':\n                    t.transition(AttributeValue_doubleQuoted);\n                    break;\n                case '&':\n                    r.unconsume();\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                case '\\'':\n                    t.transition(AttributeValue_singleQuoted);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case '<':\n                case '=':\n                case '`':\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(c);\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                default:\n                    r.unconsume();\n                    t.transition(AttributeValue_unquoted);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    // ignore\n                    break;\n                case '\"':\n                    t.transition(AttributeValue_doubleQuoted);\n                    break;\n                case '&':\n                    r.unconsume();\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                case '\\'':\n                    t.transition(AttributeValue_singleQuoted);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case '<':\n                case '=':\n                case '`':\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(c);\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                default:\n                    r.unconsume();\n                    t.transition(AttributeValue_unquoted);\n            }",
      "info" : "SwitchStatement[22662-24198]:SwitchStatement[22662-24198]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[22691-22701]:SwitchCase[22691-22701]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[22718-22728]:SwitchCase[22718-22728]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[22745-22755]:SwitchCase[22745-22755]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[22772-22782]:SwitchCase[22772-22782]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[22799-22808]:SwitchCase[22799-22808]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22859-22865]:BreakStatement[22859-22865]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[22882-22891]:SwitchCase[22882-22891]"
    }, {
      "left" : "t.transition(AttributeValue_doubleQuoted);",
      "right" : "t.transition(AttributeValue_doubleQuoted);",
      "info" : "ExpressionStatement[22912-22954]:ExpressionStatement[22912-22954]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22975-22981]:BreakStatement[22975-22981]"
    }, {
      "left" : "case '&':",
      "right" : "case '&':",
      "info" : "SwitchCase[22998-23007]:SwitchCase[22998-23007]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[23028-23042]:ExpressionStatement[23028-23042]"
    }, {
      "left" : "t.transition(AttributeValue_unquoted);",
      "right" : "t.transition(AttributeValue_unquoted);",
      "info" : "ExpressionStatement[23063-23101]:ExpressionStatement[23063-23101]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23122-23128]:BreakStatement[23122-23128]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[23145-23155]:SwitchCase[23145-23155]"
    }, {
      "left" : "t.transition(AttributeValue_singleQuoted);",
      "right" : "t.transition(AttributeValue_singleQuoted);",
      "info" : "ExpressionStatement[23176-23218]:ExpressionStatement[23176-23218]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23239-23245]:BreakStatement[23239-23245]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[23262-23276]:SwitchCase[23262-23276]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[23297-23311]:ExpressionStatement[23297-23311]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(replacementChar);",
      "right" : "t.tagPending.appendAttributeValue(replacementChar);",
      "info" : "ExpressionStatement[23332-23383]:ExpressionStatement[23332-23383]"
    }, {
      "left" : "t.transition(AttributeValue_unquoted);",
      "right" : "t.transition(AttributeValue_unquoted);",
      "info" : "ExpressionStatement[23404-23442]:ExpressionStatement[23404-23442]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23463-23469]:BreakStatement[23463-23469]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[23486-23495]:SwitchCase[23486-23495]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[23516-23533]:ExpressionStatement[23516-23533]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[23554-23573]:ExpressionStatement[23554-23573]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[23594-23613]:ExpressionStatement[23594-23613]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23634-23640]:BreakStatement[23634-23640]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[23657-23666]:SwitchCase[23657-23666]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[23687-23701]:ExpressionStatement[23687-23701]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[23722-23741]:ExpressionStatement[23722-23741]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[23762-23781]:ExpressionStatement[23762-23781]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23802-23808]:BreakStatement[23802-23808]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[23825-23834]:SwitchCase[23825-23834]"
    }, {
      "left" : "case '=':",
      "right" : "case '=':",
      "info" : "SwitchCase[23851-23860]:SwitchCase[23851-23860]"
    }, {
      "left" : "case '`':",
      "right" : "case '`':",
      "info" : "SwitchCase[23877-23886]:SwitchCase[23877-23886]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[23907-23921]:ExpressionStatement[23907-23921]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(c);",
      "right" : "t.tagPending.appendAttributeValue(c);",
      "info" : "ExpressionStatement[23942-23979]:ExpressionStatement[23942-23979]"
    }, {
      "left" : "t.transition(AttributeValue_unquoted);",
      "right" : "t.transition(AttributeValue_unquoted);",
      "info" : "ExpressionStatement[24000-24038]:ExpressionStatement[24000-24038]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24059-24065]:BreakStatement[24059-24065]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[24082-24090]:SwitchCase[24082-24090]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[24111-24125]:ExpressionStatement[24111-24125]"
    }, {
      "left" : "t.transition(AttributeValue_unquoted);",
      "right" : "t.transition(AttributeValue_unquoted);",
      "info" : "ExpressionStatement[24146-24184]:ExpressionStatement[24146-24184]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24258-24262]:PrimitiveType[24258-24262]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[24263-24267]:SimpleName[24263-24267]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[24268-24279]:SingleVariableDeclaration[24268-24279]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[24281-24298]:SingleVariableDeclaration[24281-24298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24300-25416]:Block[24300-25416]"
    }, {
      "left" : "String value = r.consumeToAny(attributeDoubleValueCharsSorted);",
      "right" : "String value = r.consumeToAny(attributeDoubleValueCharsSorted);",
      "info" : "VariableDeclarationStatement[24314-24377]:VariableDeclarationStatement[24314-24377]"
    }, {
      "left" : "if (value.length() > 0)",
      "right" : "if (value.length() > 0)",
      "info" : "IfStatement[24390-24543]:IfStatement[24390-24543]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(value);",
      "right" : "t.tagPending.appendAttributeValue(value);",
      "info" : "ExpressionStatement[24430-24471]:ExpressionStatement[24430-24471]"
    }, {
      "left" : "t.tagPending.setEmptyAttributeValue();",
      "right" : "t.tagPending.setEmptyAttributeValue();",
      "info" : "ExpressionStatement[24505-24543]:ExpressionStatement[24505-24543]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[24557-24578]:VariableDeclarationStatement[24557-24578]"
    }, {
      "left" : "switch (c) {\n                case '\"':\n                    t.transition(AfterAttributeValue_quoted);\n                    break;\n                case '&':\n                    int[] ref = t.consumeCharacterReference('\"', true);\n                    if (ref != null)\n                        t.tagPending.appendAttributeValue(ref);\n                    else\n                        t.tagPending.appendAttributeValue('&');\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                // no default, handled in consume to any above\n            }",
      "right" : "switch (c) {\n                case '\"':\n                    t.transition(AfterAttributeValue_quoted);\n                    break;\n                case '&':\n                    int[] ref = t.consumeCharacterReference('\"', true);\n                    if (ref != null)\n                        t.tagPending.appendAttributeValue(ref);\n                    else\n                        t.tagPending.appendAttributeValue('&');\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                // no default, handled in consume to any above\n            }",
      "info" : "SwitchStatement[24591-25406]:SwitchStatement[24591-25406]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[24620-24629]:SwitchCase[24620-24629]"
    }, {
      "left" : "t.transition(AfterAttributeValue_quoted);",
      "right" : "t.transition(AfterAttributeValue_quoted);",
      "info" : "ExpressionStatement[24650-24691]:ExpressionStatement[24650-24691]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24712-24718]:BreakStatement[24712-24718]"
    }, {
      "left" : "case '&':",
      "right" : "case '&':",
      "info" : "SwitchCase[24735-24744]:SwitchCase[24735-24744]"
    }, {
      "left" : "int[] ref = t.consumeCharacterReference('\"', true);",
      "right" : "int[] ref = t.consumeCharacterReference('\"', true);",
      "info" : "VariableDeclarationStatement[24765-24816]:VariableDeclarationStatement[24765-24816]"
    }, {
      "left" : "if (ref != null)",
      "right" : "if (ref != null)",
      "info" : "IfStatement[24837-25006]:IfStatement[24837-25006]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(ref);",
      "right" : "t.tagPending.appendAttributeValue(ref);",
      "info" : "ExpressionStatement[24878-24917]:ExpressionStatement[24878-24917]"
    }, {
      "left" : "t.tagPending.appendAttributeValue('&');",
      "right" : "t.tagPending.appendAttributeValue('&');",
      "info" : "ExpressionStatement[24967-25006]:ExpressionStatement[24967-25006]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25027-25033]:BreakStatement[25027-25033]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[25050-25064]:SwitchCase[25050-25064]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[25085-25099]:ExpressionStatement[25085-25099]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(replacementChar);",
      "right" : "t.tagPending.appendAttributeValue(replacementChar);",
      "info" : "ExpressionStatement[25120-25171]:ExpressionStatement[25120-25171]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25192-25198]:BreakStatement[25192-25198]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[25215-25224]:SwitchCase[25215-25224]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[25245-25262]:ExpressionStatement[25245-25262]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[25283-25302]:ExpressionStatement[25283-25302]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25323-25329]:BreakStatement[25323-25329]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25466-25470]:PrimitiveType[25466-25470]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[25471-25475]:SimpleName[25471-25475]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[25476-25487]:SingleVariableDeclaration[25476-25487]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[25489-25506]:SingleVariableDeclaration[25489-25506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25508-26626]:Block[25508-26626]"
    }, {
      "left" : "String value = r.consumeToAny(attributeSingleValueCharsSorted);",
      "right" : "String value = r.consumeToAny(attributeSingleValueCharsSorted);",
      "info" : "VariableDeclarationStatement[25522-25585]:VariableDeclarationStatement[25522-25585]"
    }, {
      "left" : "if (value.length() > 0)",
      "right" : "if (value.length() > 0)",
      "info" : "IfStatement[25598-25751]:IfStatement[25598-25751]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(value);",
      "right" : "t.tagPending.appendAttributeValue(value);",
      "info" : "ExpressionStatement[25638-25679]:ExpressionStatement[25638-25679]"
    }, {
      "left" : "t.tagPending.setEmptyAttributeValue();",
      "right" : "t.tagPending.setEmptyAttributeValue();",
      "info" : "ExpressionStatement[25713-25751]:ExpressionStatement[25713-25751]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[25765-25786]:VariableDeclarationStatement[25765-25786]"
    }, {
      "left" : "switch (c) {\n                case '\\'':\n                    t.transition(AfterAttributeValue_quoted);\n                    break;\n                case '&':\n                    int[] ref = t.consumeCharacterReference('\\'', true);\n                    if (ref != null)\n                        t.tagPending.appendAttributeValue(ref);\n                    else\n                        t.tagPending.appendAttributeValue('&');\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                // no default, handled in consume to any above\n            }",
      "right" : "switch (c) {\n                case '\\'':\n                    t.transition(AfterAttributeValue_quoted);\n                    break;\n                case '&':\n                    int[] ref = t.consumeCharacterReference('\\'', true);\n                    if (ref != null)\n                        t.tagPending.appendAttributeValue(ref);\n                    else\n                        t.tagPending.appendAttributeValue('&');\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                // no default, handled in consume to any above\n            }",
      "info" : "SwitchStatement[25799-26616]:SwitchStatement[25799-26616]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[25828-25838]:SwitchCase[25828-25838]"
    }, {
      "left" : "t.transition(AfterAttributeValue_quoted);",
      "right" : "t.transition(AfterAttributeValue_quoted);",
      "info" : "ExpressionStatement[25859-25900]:ExpressionStatement[25859-25900]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25921-25927]:BreakStatement[25921-25927]"
    }, {
      "left" : "case '&':",
      "right" : "case '&':",
      "info" : "SwitchCase[25944-25953]:SwitchCase[25944-25953]"
    }, {
      "left" : "int[] ref = t.consumeCharacterReference('\\'', true);",
      "right" : "int[] ref = t.consumeCharacterReference('\\'', true);",
      "info" : "VariableDeclarationStatement[25974-26026]:VariableDeclarationStatement[25974-26026]"
    }, {
      "left" : "if (ref != null)",
      "right" : "if (ref != null)",
      "info" : "IfStatement[26047-26216]:IfStatement[26047-26216]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(ref);",
      "right" : "t.tagPending.appendAttributeValue(ref);",
      "info" : "ExpressionStatement[26088-26127]:ExpressionStatement[26088-26127]"
    }, {
      "left" : "t.tagPending.appendAttributeValue('&');",
      "right" : "t.tagPending.appendAttributeValue('&');",
      "info" : "ExpressionStatement[26177-26216]:ExpressionStatement[26177-26216]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26237-26243]:BreakStatement[26237-26243]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[26260-26274]:SwitchCase[26260-26274]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[26295-26309]:ExpressionStatement[26295-26309]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(replacementChar);",
      "right" : "t.tagPending.appendAttributeValue(replacementChar);",
      "info" : "ExpressionStatement[26330-26381]:ExpressionStatement[26330-26381]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26402-26408]:BreakStatement[26402-26408]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[26425-26434]:SwitchCase[26425-26434]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[26455-26472]:ExpressionStatement[26455-26472]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[26493-26512]:ExpressionStatement[26493-26512]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26533-26539]:BreakStatement[26533-26539]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26672-26676]:PrimitiveType[26672-26676]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[26677-26681]:SimpleName[26677-26681]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[26682-26693]:SingleVariableDeclaration[26682-26693]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[26695-26712]:SingleVariableDeclaration[26695-26712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26714-28241]:Block[26714-28241]"
    }, {
      "left" : "String value = r.consumeToAnySorted(attributeValueUnquoted);",
      "right" : "String value = r.consumeToAnySorted(attributeValueUnquoted);",
      "info" : "VariableDeclarationStatement[26728-26788]:VariableDeclarationStatement[26728-26788]"
    }, {
      "left" : "if (value.length() > 0)",
      "right" : "if (value.length() > 0)",
      "info" : "IfStatement[26801-26882]:IfStatement[26801-26882]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(value);",
      "right" : "t.tagPending.appendAttributeValue(value);",
      "info" : "ExpressionStatement[26841-26882]:ExpressionStatement[26841-26882]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[26896-26917]:VariableDeclarationStatement[26896-26917]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeAttributeName);\n                    break;\n                case '&':\n                    int[] ref = t.consumeCharacterReference('>', true);\n                    if (ref != null)\n                        t.tagPending.appendAttributeValue(ref);\n                    else\n                        t.tagPending.appendAttributeValue('&');\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '\"':\n                case '\\'':\n                case '<':\n                case '=':\n                case '`':\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(c);\n                    break;\n                // no default, handled in consume to any above\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeAttributeName);\n                    break;\n                case '&':\n                    int[] ref = t.consumeCharacterReference('>', true);\n                    if (ref != null)\n                        t.tagPending.appendAttributeValue(ref);\n                    else\n                        t.tagPending.appendAttributeValue('&');\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '\"':\n                case '\\'':\n                case '<':\n                case '=':\n                case '`':\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(c);\n                    break;\n                // no default, handled in consume to any above\n            }",
      "info" : "SwitchStatement[26930-28230]:SwitchStatement[26930-28230]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[26959-26969]:SwitchCase[26959-26969]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[26986-26996]:SwitchCase[26986-26996]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[27013-27023]:SwitchCase[27013-27023]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[27040-27050]:SwitchCase[27040-27050]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[27067-27076]:SwitchCase[27067-27076]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[27097-27131]:ExpressionStatement[27097-27131]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27152-27158]:BreakStatement[27152-27158]"
    }, {
      "left" : "case '&':",
      "right" : "case '&':",
      "info" : "SwitchCase[27175-27184]:SwitchCase[27175-27184]"
    }, {
      "left" : "int[] ref = t.consumeCharacterReference('>', true);",
      "right" : "int[] ref = t.consumeCharacterReference('>', true);",
      "info" : "VariableDeclarationStatement[27205-27256]:VariableDeclarationStatement[27205-27256]"
    }, {
      "left" : "if (ref != null)",
      "right" : "if (ref != null)",
      "info" : "IfStatement[27277-27446]:IfStatement[27277-27446]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(ref);",
      "right" : "t.tagPending.appendAttributeValue(ref);",
      "info" : "ExpressionStatement[27318-27357]:ExpressionStatement[27318-27357]"
    }, {
      "left" : "t.tagPending.appendAttributeValue('&');",
      "right" : "t.tagPending.appendAttributeValue('&');",
      "info" : "ExpressionStatement[27407-27446]:ExpressionStatement[27407-27446]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27467-27473]:BreakStatement[27467-27473]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[27490-27499]:SwitchCase[27490-27499]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[27520-27539]:ExpressionStatement[27520-27539]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[27560-27579]:ExpressionStatement[27560-27579]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27600-27606]:BreakStatement[27600-27606]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[27623-27637]:SwitchCase[27623-27637]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[27658-27672]:ExpressionStatement[27658-27672]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(replacementChar);",
      "right" : "t.tagPending.appendAttributeValue(replacementChar);",
      "info" : "ExpressionStatement[27693-27744]:ExpressionStatement[27693-27744]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27765-27771]:BreakStatement[27765-27771]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[27788-27797]:SwitchCase[27788-27797]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[27818-27835]:ExpressionStatement[27818-27835]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[27856-27875]:ExpressionStatement[27856-27875]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27896-27902]:BreakStatement[27896-27902]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[27919-27928]:SwitchCase[27919-27928]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[27945-27955]:SwitchCase[27945-27955]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[27972-27981]:SwitchCase[27972-27981]"
    }, {
      "left" : "case '=':",
      "right" : "case '=':",
      "info" : "SwitchCase[27998-28007]:SwitchCase[27998-28007]"
    }, {
      "left" : "case '`':",
      "right" : "case '`':",
      "info" : "SwitchCase[28024-28033]:SwitchCase[28024-28033]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[28054-28068]:ExpressionStatement[28054-28068]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(c);",
      "right" : "t.tagPending.appendAttributeValue(c);",
      "info" : "ExpressionStatement[28089-28126]:ExpressionStatement[28089-28126]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28147-28153]:BreakStatement[28147-28153]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28353-28357]:PrimitiveType[28353-28357]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[28358-28362]:SimpleName[28358-28362]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[28363-28374]:SingleVariableDeclaration[28363-28374]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[28376-28393]:SingleVariableDeclaration[28376-28393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28395-29218]:Block[28395-29218]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[28409-28430]:VariableDeclarationStatement[28409-28430]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeAttributeName);\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    r.unconsume();\n                    t.transition(BeforeAttributeName);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeAttributeName);\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    r.unconsume();\n                    t.transition(BeforeAttributeName);\n            }",
      "info" : "SwitchStatement[28443-29207]:SwitchStatement[28443-29207]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[28472-28482]:SwitchCase[28472-28482]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[28499-28509]:SwitchCase[28499-28509]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[28526-28536]:SwitchCase[28526-28536]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[28553-28563]:SwitchCase[28553-28563]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[28580-28589]:SwitchCase[28580-28589]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[28610-28644]:ExpressionStatement[28610-28644]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28665-28671]:BreakStatement[28665-28671]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[28688-28697]:SwitchCase[28688-28697]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[28718-28752]:ExpressionStatement[28718-28752]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28773-28779]:BreakStatement[28773-28779]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[28796-28805]:SwitchCase[28796-28805]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[28826-28845]:ExpressionStatement[28826-28845]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[28866-28885]:ExpressionStatement[28866-28885]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28906-28912]:BreakStatement[28906-28912]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[28929-28938]:SwitchCase[28929-28938]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[28959-28976]:ExpressionStatement[28959-28976]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[28997-29016]:ExpressionStatement[28997-29016]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29037-29043]:BreakStatement[29037-29043]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[29060-29068]:SwitchCase[29060-29068]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[29089-29103]:ExpressionStatement[29089-29103]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[29124-29138]:ExpressionStatement[29124-29138]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[29159-29193]:ExpressionStatement[29159-29193]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29260-29264]:PrimitiveType[29260-29264]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[29265-29269]:SimpleName[29265-29269]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[29270-29281]:SingleVariableDeclaration[29270-29281]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[29283-29300]:SingleVariableDeclaration[29283-29300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29302-29853]:Block[29302-29853]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[29316-29337]:VariableDeclarationStatement[29316-29337]"
    }, {
      "left" : "switch (c) {\n                case '>':\n                    t.tagPending.selfClosing = true;\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    r.unconsume();\n                    t.transition(BeforeAttributeName);\n            }",
      "right" : "switch (c) {\n                case '>':\n                    t.tagPending.selfClosing = true;\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    r.unconsume();\n                    t.transition(BeforeAttributeName);\n            }",
      "info" : "SwitchStatement[29350-29843]:SwitchStatement[29350-29843]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[29379-29388]:SwitchCase[29379-29388]"
    }, {
      "left" : "t.tagPending.selfClosing = true;",
      "right" : "t.tagPending.selfClosing = true;",
      "info" : "ExpressionStatement[29409-29441]:ExpressionStatement[29409-29441]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[29462-29481]:ExpressionStatement[29462-29481]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[29502-29521]:ExpressionStatement[29502-29521]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29542-29548]:BreakStatement[29542-29548]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[29565-29574]:SwitchCase[29565-29574]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[29595-29612]:ExpressionStatement[29595-29612]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[29633-29652]:ExpressionStatement[29633-29652]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29673-29679]:BreakStatement[29673-29679]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[29696-29704]:SwitchCase[29696-29704]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[29725-29739]:ExpressionStatement[29725-29739]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[29760-29774]:ExpressionStatement[29760-29774]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[29795-29829]:ExpressionStatement[29795-29829]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29888-29892]:PrimitiveType[29888-29892]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[29893-29897]:SimpleName[29893-29897]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[29898-29909]:SingleVariableDeclaration[29898-29909]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[29911-29928]:SingleVariableDeclaration[29911-29928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29930-30379]:Block[29930-30379]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[30090-30104]:ExpressionStatement[30090-30104]"
    }, {
      "left" : "Token.Comment comment = new Token.Comment();",
      "right" : "Token.Comment comment = new Token.Comment();",
      "info" : "VariableDeclarationStatement[30117-30161]:VariableDeclarationStatement[30117-30161]"
    }, {
      "left" : "comment.bogus = true;",
      "right" : "comment.bogus = true;",
      "info" : "ExpressionStatement[30174-30195]:ExpressionStatement[30174-30195]"
    }, {
      "left" : "comment.data.append(r.consumeTo('>'));",
      "right" : "comment.data.append(r.consumeTo('>'));",
      "info" : "ExpressionStatement[30208-30246]:ExpressionStatement[30208-30246]"
    }, {
      "left" : "t.emit(comment);",
      "right" : "t.emit(comment);",
      "info" : "ExpressionStatement[30314-30330]:ExpressionStatement[30314-30330]"
    }, {
      "left" : "t.advanceTransition(Data);",
      "right" : "t.advanceTransition(Data);",
      "info" : "ExpressionStatement[30343-30369]:ExpressionStatement[30343-30369]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[30423-30427]:PrimitiveType[30423-30427]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[30428-30432]:SimpleName[30428-30432]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[30433-30444]:SingleVariableDeclaration[30433-30444]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[30446-30463]:SingleVariableDeclaration[30446-30463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30465-31249]:Block[30465-31249]"
    }, {
      "left" : "if (r.matchConsume(\"--\"))",
      "right" : "if (r.matchConsume(\"--\"))",
      "info" : "IfStatement[30479-31239]:IfStatement[30479-31239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30505-30606]:Block[30505-30606]"
    }, {
      "left" : "t.createCommentPending();",
      "right" : "t.createCommentPending();",
      "info" : "ExpressionStatement[30523-30548]:ExpressionStatement[30523-30548]"
    }, {
      "left" : "t.transition(CommentStart);",
      "right" : "t.transition(CommentStart);",
      "info" : "ExpressionStatement[30565-30592]:ExpressionStatement[30565-30592]"
    }, {
      "left" : "if (r.matchConsumeIgnoreCase(\"DOCTYPE\"))",
      "right" : "if (r.matchConsumeIgnoreCase(\"DOCTYPE\"))",
      "info" : "IfStatement[30612-31239]:IfStatement[30612-31239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30653-30707]:Block[30653-30707]"
    }, {
      "left" : "t.transition(Doctype);",
      "right" : "t.transition(Doctype);",
      "info" : "ExpressionStatement[30671-30693]:ExpressionStatement[30671-30693]"
    }, {
      "left" : "if (r.matchConsume(\"[CDATA[\"))",
      "right" : "if (r.matchConsume(\"[CDATA[\"))",
      "info" : "IfStatement[30713-31239]:IfStatement[30713-31239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30744-31071]:Block[30744-31071]"
    }, {
      "left" : "t.transition(CdataSection);",
      "right" : "t.transition(CdataSection);",
      "info" : "ExpressionStatement[31030-31057]:ExpressionStatement[31030-31057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31077-31239]:Block[31077-31239]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[31095-31109]:ExpressionStatement[31095-31109]"
    }, {
      "left" : "t.advanceTransition(BogusComment);",
      "right" : "t.advanceTransition(BogusComment);",
      "info" : "ExpressionStatement[31126-31160]:ExpressionStatement[31126-31160]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[31284-31288]:PrimitiveType[31284-31288]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[31289-31293]:SimpleName[31289-31293]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[31294-31305]:SingleVariableDeclaration[31294-31305]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[31307-31324]:SingleVariableDeclaration[31307-31324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31326-32186]:Block[31326-32186]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[31340-31361]:VariableDeclarationStatement[31340-31361]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.transition(CommentStartDash);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(c);\n                    t.transition(Comment);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.transition(CommentStartDash);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(c);\n                    t.transition(Comment);\n            }",
      "info" : "SwitchStatement[31374-32176]:SwitchStatement[31374-32176]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[31403-31412]:SwitchCase[31403-31412]"
    }, {
      "left" : "t.transition(CommentStartDash);",
      "right" : "t.transition(CommentStartDash);",
      "info" : "ExpressionStatement[31433-31464]:ExpressionStatement[31433-31464]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31485-31491]:BreakStatement[31485-31491]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[31508-31522]:SwitchCase[31508-31522]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[31543-31557]:ExpressionStatement[31543-31557]"
    }, {
      "left" : "t.commentPending.data.append(replacementChar);",
      "right" : "t.commentPending.data.append(replacementChar);",
      "info" : "ExpressionStatement[31578-31624]:ExpressionStatement[31578-31624]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[31645-31667]:ExpressionStatement[31645-31667]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31688-31694]:BreakStatement[31688-31694]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[31711-31720]:SwitchCase[31711-31720]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[31741-31755]:ExpressionStatement[31741-31755]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[31776-31799]:ExpressionStatement[31776-31799]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[31820-31839]:ExpressionStatement[31820-31839]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31860-31866]:BreakStatement[31860-31866]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[31883-31892]:SwitchCase[31883-31892]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[31913-31930]:ExpressionStatement[31913-31930]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[31951-31974]:ExpressionStatement[31951-31974]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[31995-32014]:ExpressionStatement[31995-32014]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32035-32041]:BreakStatement[32035-32041]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[32058-32066]:SwitchCase[32058-32066]"
    }, {
      "left" : "t.commentPending.data.append(c);",
      "right" : "t.commentPending.data.append(c);",
      "info" : "ExpressionStatement[32087-32119]:ExpressionStatement[32087-32119]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[32140-32162]:ExpressionStatement[32140-32162]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[32225-32229]:PrimitiveType[32225-32229]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[32230-32234]:SimpleName[32230-32234]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[32235-32246]:SingleVariableDeclaration[32235-32246]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[32248-32265]:SingleVariableDeclaration[32248-32265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32267-33127]:Block[32267-33127]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[32281-32302]:VariableDeclarationStatement[32281-32302]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.transition(CommentStartDash);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(c);\n                    t.transition(Comment);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.transition(CommentStartDash);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(c);\n                    t.transition(Comment);\n            }",
      "info" : "SwitchStatement[32315-33117]:SwitchStatement[32315-33117]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[32344-32353]:SwitchCase[32344-32353]"
    }, {
      "left" : "t.transition(CommentStartDash);",
      "right" : "t.transition(CommentStartDash);",
      "info" : "ExpressionStatement[32374-32405]:ExpressionStatement[32374-32405]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32426-32432]:BreakStatement[32426-32432]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[32449-32463]:SwitchCase[32449-32463]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[32484-32498]:ExpressionStatement[32484-32498]"
    }, {
      "left" : "t.commentPending.data.append(replacementChar);",
      "right" : "t.commentPending.data.append(replacementChar);",
      "info" : "ExpressionStatement[32519-32565]:ExpressionStatement[32519-32565]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[32586-32608]:ExpressionStatement[32586-32608]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32629-32635]:BreakStatement[32629-32635]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[32652-32661]:SwitchCase[32652-32661]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[32682-32696]:ExpressionStatement[32682-32696]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[32717-32740]:ExpressionStatement[32717-32740]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[32761-32780]:ExpressionStatement[32761-32780]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32801-32807]:BreakStatement[32801-32807]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[32824-32833]:SwitchCase[32824-32833]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[32854-32871]:ExpressionStatement[32854-32871]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[32892-32915]:ExpressionStatement[32892-32915]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[32936-32955]:ExpressionStatement[32936-32955]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32976-32982]:BreakStatement[32976-32982]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[32999-33007]:SwitchCase[32999-33007]"
    }, {
      "left" : "t.commentPending.data.append(c);",
      "right" : "t.commentPending.data.append(c);",
      "info" : "ExpressionStatement[33028-33060]:ExpressionStatement[33028-33060]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[33081-33103]:ExpressionStatement[33081-33103]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[33157-33161]:PrimitiveType[33157-33161]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[33162-33166]:SimpleName[33162-33166]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[33167-33178]:SingleVariableDeclaration[33167-33178]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[33180-33197]:SingleVariableDeclaration[33180-33197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33199-33867]:Block[33199-33867]"
    }, {
      "left" : "char c = r.current();",
      "right" : "char c = r.current();",
      "info" : "VariableDeclarationStatement[33213-33234]:VariableDeclarationStatement[33213-33234]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.advanceTransition(CommentEndDash);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.commentPending.data.append(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(r.consumeToAny('-', nullChar));\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.advanceTransition(CommentEndDash);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.commentPending.data.append(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(r.consumeToAny('-', nullChar));\n            }",
      "info" : "SwitchStatement[33247-33857]:SwitchStatement[33247-33857]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[33276-33285]:SwitchCase[33276-33285]"
    }, {
      "left" : "t.advanceTransition(CommentEndDash);",
      "right" : "t.advanceTransition(CommentEndDash);",
      "info" : "ExpressionStatement[33306-33342]:ExpressionStatement[33306-33342]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33363-33369]:BreakStatement[33363-33369]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[33386-33400]:SwitchCase[33386-33400]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[33421-33435]:ExpressionStatement[33421-33435]"
    }, {
      "left" : "r.advance();",
      "right" : "r.advance();",
      "info" : "ExpressionStatement[33456-33468]:ExpressionStatement[33456-33468]"
    }, {
      "left" : "t.commentPending.data.append(replacementChar);",
      "right" : "t.commentPending.data.append(replacementChar);",
      "info" : "ExpressionStatement[33489-33535]:ExpressionStatement[33489-33535]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33556-33562]:BreakStatement[33556-33562]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[33579-33588]:SwitchCase[33579-33588]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[33609-33626]:ExpressionStatement[33609-33626]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[33647-33670]:ExpressionStatement[33647-33670]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[33691-33710]:ExpressionStatement[33691-33710]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33731-33737]:BreakStatement[33731-33737]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[33754-33762]:SwitchCase[33754-33762]"
    }, {
      "left" : "t.commentPending.data.append(r.consumeToAny('-', nullChar));",
      "right" : "t.commentPending.data.append(r.consumeToAny('-', nullChar));",
      "info" : "ExpressionStatement[33783-33843]:ExpressionStatement[33783-33843]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[33904-33908]:PrimitiveType[33904-33908]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[33909-33913]:SimpleName[33909-33913]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[33914-33925]:SingleVariableDeclaration[33914-33925]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[33927-33944]:SingleVariableDeclaration[33927-33944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33946-34652]:Block[33946-34652]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[33960-33981]:VariableDeclarationStatement[33960-33981]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.transition(CommentEnd);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append('-').append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append('-').append(c);\n                    t.transition(Comment);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.transition(CommentEnd);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append('-').append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append('-').append(c);\n                    t.transition(Comment);\n            }",
      "info" : "SwitchStatement[33994-34642]:SwitchStatement[33994-34642]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[34023-34032]:SwitchCase[34023-34032]"
    }, {
      "left" : "t.transition(CommentEnd);",
      "right" : "t.transition(CommentEnd);",
      "info" : "ExpressionStatement[34053-34078]:ExpressionStatement[34053-34078]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34099-34105]:BreakStatement[34099-34105]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[34122-34136]:SwitchCase[34122-34136]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[34157-34171]:ExpressionStatement[34157-34171]"
    }, {
      "left" : "t.commentPending.data.append('-').append(replacementChar);",
      "right" : "t.commentPending.data.append('-').append(replacementChar);",
      "info" : "ExpressionStatement[34192-34250]:ExpressionStatement[34192-34250]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[34271-34293]:ExpressionStatement[34271-34293]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34314-34320]:BreakStatement[34314-34320]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[34337-34346]:SwitchCase[34337-34346]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[34367-34384]:ExpressionStatement[34367-34384]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[34405-34428]:ExpressionStatement[34405-34428]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[34449-34468]:ExpressionStatement[34449-34468]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34489-34495]:BreakStatement[34489-34495]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[34512-34520]:SwitchCase[34512-34520]"
    }, {
      "left" : "t.commentPending.data.append('-').append(c);",
      "right" : "t.commentPending.data.append('-').append(c);",
      "info" : "ExpressionStatement[34541-34585]:ExpressionStatement[34541-34585]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[34606-34628]:ExpressionStatement[34606-34628]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34685-34689]:PrimitiveType[34685-34689]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[34690-34694]:SimpleName[34690-34694]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[34695-34706]:SingleVariableDeclaration[34695-34706]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[34708-34725]:SingleVariableDeclaration[34708-34725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34727-35789]:Block[34727-35789]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[34741-34762]:VariableDeclarationStatement[34741-34762]"
    }, {
      "left" : "switch (c) {\n                case '>':\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(\"--\").append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case '!':\n                    t.error(this);\n                    t.transition(CommentEndBang);\n                    break;\n                case '-':\n                    t.error(this);\n                    t.commentPending.data.append('-');\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.commentPending.data.append(\"--\").append(c);\n                    t.transition(Comment);\n            }",
      "right" : "switch (c) {\n                case '>':\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(\"--\").append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case '!':\n                    t.error(this);\n                    t.transition(CommentEndBang);\n                    break;\n                case '-':\n                    t.error(this);\n                    t.commentPending.data.append('-');\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.commentPending.data.append(\"--\").append(c);\n                    t.transition(Comment);\n            }",
      "info" : "SwitchStatement[34775-35779]:SwitchStatement[34775-35779]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[34804-34813]:SwitchCase[34804-34813]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[34834-34857]:ExpressionStatement[34834-34857]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[34878-34897]:ExpressionStatement[34878-34897]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34918-34924]:BreakStatement[34918-34924]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[34941-34955]:SwitchCase[34941-34955]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[34976-34990]:ExpressionStatement[34976-34990]"
    }, {
      "left" : "t.commentPending.data.append(\"--\").append(replacementChar);",
      "right" : "t.commentPending.data.append(\"--\").append(replacementChar);",
      "info" : "ExpressionStatement[35011-35070]:ExpressionStatement[35011-35070]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[35091-35113]:ExpressionStatement[35091-35113]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35134-35140]:BreakStatement[35134-35140]"
    }, {
      "left" : "case '!':",
      "right" : "case '!':",
      "info" : "SwitchCase[35157-35166]:SwitchCase[35157-35166]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[35187-35201]:ExpressionStatement[35187-35201]"
    }, {
      "left" : "t.transition(CommentEndBang);",
      "right" : "t.transition(CommentEndBang);",
      "info" : "ExpressionStatement[35222-35251]:ExpressionStatement[35222-35251]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35272-35278]:BreakStatement[35272-35278]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[35295-35304]:SwitchCase[35295-35304]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[35325-35339]:ExpressionStatement[35325-35339]"
    }, {
      "left" : "t.commentPending.data.append('-');",
      "right" : "t.commentPending.data.append('-');",
      "info" : "ExpressionStatement[35360-35394]:ExpressionStatement[35360-35394]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35415-35421]:BreakStatement[35415-35421]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[35438-35447]:SwitchCase[35438-35447]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[35468-35485]:ExpressionStatement[35468-35485]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[35506-35529]:ExpressionStatement[35506-35529]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[35550-35569]:ExpressionStatement[35550-35569]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35590-35596]:BreakStatement[35590-35596]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[35613-35621]:SwitchCase[35613-35621]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[35642-35656]:ExpressionStatement[35642-35656]"
    }, {
      "left" : "t.commentPending.data.append(\"--\").append(c);",
      "right" : "t.commentPending.data.append(\"--\").append(c);",
      "info" : "ExpressionStatement[35677-35722]:ExpressionStatement[35677-35722]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[35743-35765]:ExpressionStatement[35743-35765]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[35826-35830]:PrimitiveType[35826-35830]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[35831-35835]:SimpleName[35831-35835]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[35836-35847]:SingleVariableDeclaration[35836-35847]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[35849-35866]:SingleVariableDeclaration[35849-35866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35868-36776]:Block[35868-36776]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[35882-35903]:VariableDeclarationStatement[35882-35903]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.commentPending.data.append(\"--!\");\n                    t.transition(CommentEndDash);\n                    break;\n                case '>':\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(\"--!\").append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(\"--!\").append(c);\n                    t.transition(Comment);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.commentPending.data.append(\"--!\");\n                    t.transition(CommentEndDash);\n                    break;\n                case '>':\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(\"--!\").append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(\"--!\").append(c);\n                    t.transition(Comment);\n            }",
      "info" : "SwitchStatement[35916-36766]:SwitchStatement[35916-36766]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[35945-35954]:SwitchCase[35945-35954]"
    }, {
      "left" : "t.commentPending.data.append(\"--!\");",
      "right" : "t.commentPending.data.append(\"--!\");",
      "info" : "ExpressionStatement[35975-36011]:ExpressionStatement[35975-36011]"
    }, {
      "left" : "t.transition(CommentEndDash);",
      "right" : "t.transition(CommentEndDash);",
      "info" : "ExpressionStatement[36032-36061]:ExpressionStatement[36032-36061]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[36082-36088]:BreakStatement[36082-36088]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[36105-36114]:SwitchCase[36105-36114]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[36135-36158]:ExpressionStatement[36135-36158]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[36179-36198]:ExpressionStatement[36179-36198]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[36219-36225]:BreakStatement[36219-36225]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[36242-36256]:SwitchCase[36242-36256]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[36277-36291]:ExpressionStatement[36277-36291]"
    }, {
      "left" : "t.commentPending.data.append(\"--!\").append(replacementChar);",
      "right" : "t.commentPending.data.append(\"--!\").append(replacementChar);",
      "info" : "ExpressionStatement[36312-36372]:ExpressionStatement[36312-36372]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[36393-36415]:ExpressionStatement[36393-36415]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[36436-36442]:BreakStatement[36436-36442]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[36459-36468]:SwitchCase[36459-36468]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[36489-36506]:ExpressionStatement[36489-36506]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[36527-36550]:ExpressionStatement[36527-36550]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[36571-36590]:ExpressionStatement[36571-36590]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[36611-36617]:BreakStatement[36611-36617]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[36634-36642]:SwitchCase[36634-36642]"
    }, {
      "left" : "t.commentPending.data.append(\"--!\").append(c);",
      "right" : "t.commentPending.data.append(\"--!\").append(c);",
      "info" : "ExpressionStatement[36663-36709]:ExpressionStatement[36663-36709]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[36730-36752]:ExpressionStatement[36730-36752]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36806-36810]:PrimitiveType[36806-36810]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[36811-36815]:SimpleName[36811-36815]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[36816-36827]:SingleVariableDeclaration[36816-36827]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[36829-36846]:SingleVariableDeclaration[36829-36846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36848-37678]:Block[36848-37678]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[36862-36883]:VariableDeclarationStatement[36862-36883]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeDoctypeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    // note: fall through to > case\n                case '>': // catch invalid <!DOCTYPE>\n                    t.error(this);\n                    t.createDoctypePending();\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.transition(BeforeDoctypeName);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeDoctypeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    // note: fall through to > case\n                case '>': // catch invalid <!DOCTYPE>\n                    t.error(this);\n                    t.createDoctypePending();\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.transition(BeforeDoctypeName);\n            }",
      "info" : "SwitchStatement[36896-37668]:SwitchStatement[36896-37668]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[36925-36935]:SwitchCase[36925-36935]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[36952-36962]:SwitchCase[36952-36962]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[36979-36989]:SwitchCase[36979-36989]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[37006-37016]:SwitchCase[37006-37016]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[37033-37042]:SwitchCase[37033-37042]"
    }, {
      "left" : "t.transition(BeforeDoctypeName);",
      "right" : "t.transition(BeforeDoctypeName);",
      "info" : "ExpressionStatement[37063-37095]:ExpressionStatement[37063-37095]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[37116-37122]:BreakStatement[37116-37122]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[37139-37148]:SwitchCase[37139-37148]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[37169-37186]:ExpressionStatement[37169-37186]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[37255-37264]:SwitchCase[37255-37264]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[37313-37327]:ExpressionStatement[37313-37327]"
    }, {
      "left" : "t.createDoctypePending();",
      "right" : "t.createDoctypePending();",
      "info" : "ExpressionStatement[37348-37373]:ExpressionStatement[37348-37373]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[37394-37430]:ExpressionStatement[37394-37430]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[37451-37474]:ExpressionStatement[37451-37474]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[37495-37514]:ExpressionStatement[37495-37514]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[37535-37541]:BreakStatement[37535-37541]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[37558-37566]:SwitchCase[37558-37566]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[37587-37601]:ExpressionStatement[37587-37601]"
    }, {
      "left" : "t.transition(BeforeDoctypeName);",
      "right" : "t.transition(BeforeDoctypeName);",
      "info" : "ExpressionStatement[37622-37654]:ExpressionStatement[37622-37654]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[37718-37722]:PrimitiveType[37718-37722]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[37723-37727]:SimpleName[37723-37727]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[37728-37739]:SingleVariableDeclaration[37728-37739]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[37741-37758]:SingleVariableDeclaration[37741-37758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37760-38888]:Block[37760-38888]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[37774-37921]:IfStatement[37774-37921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37797-37921]:Block[37797-37921]"
    }, {
      "left" : "t.createDoctypePending();",
      "right" : "t.createDoctypePending();",
      "info" : "ExpressionStatement[37815-37840]:ExpressionStatement[37815-37840]"
    }, {
      "left" : "t.transition(DoctypeName);",
      "right" : "t.transition(DoctypeName);",
      "info" : "ExpressionStatement[37857-37883]:ExpressionStatement[37857-37883]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[37900-37907]:ReturnStatement[37900-37907]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[37934-37955]:VariableDeclarationStatement[37934-37955]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    break; // ignore whitespace\n                case nullChar:\n                    t.error(this);\n                    t.createDoctypePending();\n                    t.doctypePending.name.append(replacementChar);\n                    t.transition(DoctypeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.createDoctypePending();\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.createDoctypePending();\n                    t.doctypePending.name.append(c);\n                    t.transition(DoctypeName);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    break; // ignore whitespace\n                case nullChar:\n                    t.error(this);\n                    t.createDoctypePending();\n                    t.doctypePending.name.append(replacementChar);\n                    t.transition(DoctypeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.createDoctypePending();\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.createDoctypePending();\n                    t.doctypePending.name.append(c);\n                    t.transition(DoctypeName);\n            }",
      "info" : "SwitchStatement[37968-38878]:SwitchStatement[37968-38878]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[37997-38007]:SwitchCase[37997-38007]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[38024-38034]:SwitchCase[38024-38034]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[38051-38061]:SwitchCase[38051-38061]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[38078-38088]:SwitchCase[38078-38088]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[38105-38114]:SwitchCase[38105-38114]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38135-38141]:BreakStatement[38135-38141]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[38179-38193]:SwitchCase[38179-38193]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[38214-38228]:ExpressionStatement[38214-38228]"
    }, {
      "left" : "t.createDoctypePending();",
      "right" : "t.createDoctypePending();",
      "info" : "ExpressionStatement[38249-38274]:ExpressionStatement[38249-38274]"
    }, {
      "left" : "t.doctypePending.name.append(replacementChar);",
      "right" : "t.doctypePending.name.append(replacementChar);",
      "info" : "ExpressionStatement[38295-38341]:ExpressionStatement[38295-38341]"
    }, {
      "left" : "t.transition(DoctypeName);",
      "right" : "t.transition(DoctypeName);",
      "info" : "ExpressionStatement[38362-38388]:ExpressionStatement[38362-38388]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38409-38415]:BreakStatement[38409-38415]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[38432-38441]:SwitchCase[38432-38441]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[38462-38479]:ExpressionStatement[38462-38479]"
    }, {
      "left" : "t.createDoctypePending();",
      "right" : "t.createDoctypePending();",
      "info" : "ExpressionStatement[38500-38525]:ExpressionStatement[38500-38525]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[38546-38582]:ExpressionStatement[38546-38582]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[38603-38626]:ExpressionStatement[38603-38626]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[38647-38666]:ExpressionStatement[38647-38666]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38687-38693]:BreakStatement[38687-38693]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[38710-38718]:SwitchCase[38710-38718]"
    }, {
      "left" : "t.createDoctypePending();",
      "right" : "t.createDoctypePending();",
      "info" : "ExpressionStatement[38739-38764]:ExpressionStatement[38739-38764]"
    }, {
      "left" : "t.doctypePending.name.append(c);",
      "right" : "t.doctypePending.name.append(c);",
      "info" : "ExpressionStatement[38785-38817]:ExpressionStatement[38785-38817]"
    }, {
      "left" : "t.transition(DoctypeName);",
      "right" : "t.transition(DoctypeName);",
      "info" : "ExpressionStatement[38838-38864]:ExpressionStatement[38838-38864]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[38922-38926]:PrimitiveType[38922-38926]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[38927-38931]:SimpleName[38927-38931]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[38932-38943]:SingleVariableDeclaration[38932-38943]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[38945-38962]:SingleVariableDeclaration[38945-38962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38964-40052]:Block[38964-40052]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[38978-39149]:IfStatement[38978-39149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39001-39149]:Block[39001-39149]"
    }, {
      "left" : "String name = r.consumeLetterSequence();",
      "right" : "String name = r.consumeLetterSequence();",
      "info" : "VariableDeclarationStatement[39019-39059]:VariableDeclarationStatement[39019-39059]"
    }, {
      "left" : "t.doctypePending.name.append(name);",
      "right" : "t.doctypePending.name.append(name);",
      "info" : "ExpressionStatement[39076-39111]:ExpressionStatement[39076-39111]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[39128-39135]:ReturnStatement[39128-39135]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[39162-39183]:VariableDeclarationStatement[39162-39183]"
    }, {
      "left" : "switch (c) {\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(AfterDoctypeName);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.name.append(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.name.append(c);\n            }",
      "right" : "switch (c) {\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(AfterDoctypeName);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.name.append(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.name.append(c);\n            }",
      "info" : "SwitchStatement[39196-40042]:SwitchStatement[39196-40042]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[39225-39234]:SwitchCase[39225-39234]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[39255-39278]:ExpressionStatement[39255-39278]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[39299-39318]:ExpressionStatement[39299-39318]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39339-39345]:BreakStatement[39339-39345]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[39362-39372]:SwitchCase[39362-39372]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[39389-39399]:SwitchCase[39389-39399]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[39416-39426]:SwitchCase[39416-39426]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[39443-39453]:SwitchCase[39443-39453]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[39470-39479]:SwitchCase[39470-39479]"
    }, {
      "left" : "t.transition(AfterDoctypeName);",
      "right" : "t.transition(AfterDoctypeName);",
      "info" : "ExpressionStatement[39500-39531]:ExpressionStatement[39500-39531]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39552-39558]:BreakStatement[39552-39558]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[39575-39589]:SwitchCase[39575-39589]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[39610-39624]:ExpressionStatement[39610-39624]"
    }, {
      "left" : "t.doctypePending.name.append(replacementChar);",
      "right" : "t.doctypePending.name.append(replacementChar);",
      "info" : "ExpressionStatement[39645-39691]:ExpressionStatement[39645-39691]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39712-39718]:BreakStatement[39712-39718]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[39735-39744]:SwitchCase[39735-39744]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[39765-39782]:ExpressionStatement[39765-39782]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[39803-39839]:ExpressionStatement[39803-39839]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[39860-39883]:ExpressionStatement[39860-39883]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[39904-39923]:ExpressionStatement[39904-39923]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39944-39950]:BreakStatement[39944-39950]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[39967-39975]:SwitchCase[39967-39975]"
    }, {
      "left" : "t.doctypePending.name.append(c);",
      "right" : "t.doctypePending.name.append(c);",
      "info" : "ExpressionStatement[39996-40028]:ExpressionStatement[39996-40028]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[41092-41096]:PrimitiveType[41232-41236]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[41097-41101]:SimpleName[41237-41241]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[41102-41113]:SingleVariableDeclaration[41242-41253]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[41115-41132]:SingleVariableDeclaration[41255-41272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41134-42497]:Block[41274-42637]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[41148-41169]:VariableDeclarationStatement[41288-41309]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeDoctypePublicIdentifier);\n                    break;\n                case '\"':\n                    t.error(this);\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    t.error(this);\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_singleQuoted);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeDoctypePublicIdentifier);\n                    break;\n                case '\"':\n                    t.error(this);\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    t.error(this);\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_singleQuoted);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "info" : "SwitchStatement[41182-42487]:SwitchStatement[41322-42627]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[41211-41221]:SwitchCase[41351-41361]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[41238-41248]:SwitchCase[41378-41388]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[41265-41275]:SwitchCase[41405-41415]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[41292-41302]:SwitchCase[41432-41442]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[41319-41328]:SwitchCase[41459-41468]"
    }, {
      "left" : "t.transition(BeforeDoctypePublicIdentifier);",
      "right" : "t.transition(BeforeDoctypePublicIdentifier);",
      "info" : "ExpressionStatement[41349-41393]:ExpressionStatement[41489-41533]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[41414-41420]:BreakStatement[41554-41560]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[41437-41446]:SwitchCase[41577-41586]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[41467-41481]:ExpressionStatement[41607-41621]"
    }, {
      "left" : "t.transition(DoctypePublicIdentifier_doubleQuoted);",
      "right" : "t.transition(DoctypePublicIdentifier_doubleQuoted);",
      "info" : "ExpressionStatement[41555-41606]:ExpressionStatement[41695-41746]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[41627-41633]:BreakStatement[41767-41773]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[41650-41660]:SwitchCase[41790-41800]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[41681-41695]:ExpressionStatement[41821-41835]"
    }, {
      "left" : "t.transition(DoctypePublicIdentifier_singleQuoted);",
      "right" : "t.transition(DoctypePublicIdentifier_singleQuoted);",
      "info" : "ExpressionStatement[41769-41820]:ExpressionStatement[41909-41960]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[41841-41847]:BreakStatement[41981-41987]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[41864-41873]:SwitchCase[42004-42013]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[41894-41908]:ExpressionStatement[42034-42048]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[41929-41965]:ExpressionStatement[42069-42105]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[41986-42009]:ExpressionStatement[42126-42149]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[42030-42049]:ExpressionStatement[42170-42189]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[42070-42076]:BreakStatement[42210-42216]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[42093-42102]:SwitchCase[42233-42242]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[42123-42140]:ExpressionStatement[42263-42280]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[42161-42197]:ExpressionStatement[42301-42337]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[42218-42241]:ExpressionStatement[42358-42381]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[42262-42281]:ExpressionStatement[42402-42421]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[42302-42308]:BreakStatement[42442-42448]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[42325-42333]:SwitchCase[42465-42473]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[42354-42368]:ExpressionStatement[42494-42508]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[42389-42425]:ExpressionStatement[42529-42565]"
    }, {
      "left" : "t.transition(BogusDoctype);",
      "right" : "t.transition(BogusDoctype);",
      "info" : "ExpressionStatement[42446-42473]:ExpressionStatement[42586-42613]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[42549-42553]:PrimitiveType[42689-42693]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[42554-42558]:SimpleName[42694-42698]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[42559-42570]:SingleVariableDeclaration[42699-42710]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[42572-42589]:SingleVariableDeclaration[42712-42729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42591-43819]:Block[42731-43959]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[42605-42626]:VariableDeclarationStatement[42745-42766]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    break;\n                case '\"':\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_singleQuoted);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    break;\n                case '\"':\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_singleQuoted);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "info" : "SwitchStatement[42639-43809]:SwitchStatement[42779-43949]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[42668-42678]:SwitchCase[42808-42818]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[42695-42705]:SwitchCase[42835-42845]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[42722-42732]:SwitchCase[42862-42872]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[42749-42759]:SwitchCase[42889-42899]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[42776-42785]:SwitchCase[42916-42925]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[42806-42812]:BreakStatement[42946-42952]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[42829-42838]:SwitchCase[42969-42978]"
    }, {
      "left" : "t.transition(DoctypePublicIdentifier_doubleQuoted);",
      "right" : "t.transition(DoctypePublicIdentifier_doubleQuoted);",
      "info" : "ExpressionStatement[42912-42963]:ExpressionStatement[43052-43103]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[42984-42990]:BreakStatement[43124-43130]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[43007-43017]:SwitchCase[43147-43157]"
    }, {
      "left" : "t.transition(DoctypePublicIdentifier_singleQuoted);",
      "right" : "t.transition(DoctypePublicIdentifier_singleQuoted);",
      "info" : "ExpressionStatement[43091-43142]:ExpressionStatement[43231-43282]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[43163-43169]:BreakStatement[43303-43309]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[43186-43195]:SwitchCase[43326-43335]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[43216-43230]:ExpressionStatement[43356-43370]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[43251-43287]:ExpressionStatement[43391-43427]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[43308-43331]:ExpressionStatement[43448-43471]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[43352-43371]:ExpressionStatement[43492-43511]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[43392-43398]:BreakStatement[43532-43538]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[43415-43424]:SwitchCase[43555-43564]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[43445-43462]:ExpressionStatement[43585-43602]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[43483-43519]:ExpressionStatement[43623-43659]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[43540-43563]:ExpressionStatement[43680-43703]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[43584-43603]:ExpressionStatement[43724-43743]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[43624-43630]:BreakStatement[43764-43770]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[43647-43655]:SwitchCase[43787-43795]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[43676-43690]:ExpressionStatement[43816-43830]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[43711-43747]:ExpressionStatement[43851-43887]"
    }, {
      "left" : "t.transition(BogusDoctype);",
      "right" : "t.transition(BogusDoctype);",
      "info" : "ExpressionStatement[43768-43795]:ExpressionStatement[43908-43935]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[43878-43882]:PrimitiveType[44018-44022]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[43883-43887]:SimpleName[44023-44027]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[43888-43899]:SingleVariableDeclaration[44028-44039]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[43901-43918]:SingleVariableDeclaration[44041-44058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43920-44844]:Block[44060-44984]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[43934-43955]:VariableDeclarationStatement[44074-44095]"
    }, {
      "left" : "switch (c) {\n                case '\"':\n                    t.transition(AfterDoctypePublicIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.publicIdentifier.append(replacementChar);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.publicIdentifier.append(c);\n            }",
      "right" : "switch (c) {\n                case '\"':\n                    t.transition(AfterDoctypePublicIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.publicIdentifier.append(replacementChar);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.publicIdentifier.append(c);\n            }",
      "info" : "SwitchStatement[43968-44834]:SwitchStatement[44108-44974]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[43997-44006]:SwitchCase[44137-44146]"
    }, {
      "left" : "t.transition(AfterDoctypePublicIdentifier);",
      "right" : "t.transition(AfterDoctypePublicIdentifier);",
      "info" : "ExpressionStatement[44027-44070]:ExpressionStatement[44167-44210]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44091-44097]:BreakStatement[44231-44237]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[44114-44128]:SwitchCase[44254-44268]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[44149-44163]:ExpressionStatement[44289-44303]"
    }, {
      "left" : "t.doctypePending.publicIdentifier.append(replacementChar);",
      "right" : "t.doctypePending.publicIdentifier.append(replacementChar);",
      "info" : "ExpressionStatement[44184-44242]:ExpressionStatement[44324-44382]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44263-44269]:BreakStatement[44403-44409]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[44286-44295]:SwitchCase[44426-44435]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[44316-44330]:ExpressionStatement[44456-44470]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[44351-44387]:ExpressionStatement[44491-44527]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[44408-44431]:ExpressionStatement[44548-44571]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[44452-44471]:ExpressionStatement[44592-44611]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44492-44498]:BreakStatement[44632-44638]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[44515-44524]:SwitchCase[44655-44664]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[44545-44562]:ExpressionStatement[44685-44702]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[44583-44619]:ExpressionStatement[44723-44759]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[44640-44663]:ExpressionStatement[44780-44803]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[44684-44703]:ExpressionStatement[44824-44843]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44724-44730]:BreakStatement[44864-44870]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[44747-44755]:SwitchCase[44887-44895]"
    }, {
      "left" : "t.doctypePending.publicIdentifier.append(c);",
      "right" : "t.doctypePending.publicIdentifier.append(c);",
      "info" : "ExpressionStatement[44776-44820]:ExpressionStatement[44916-44960]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[44903-44907]:PrimitiveType[45043-45047]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[44908-44912]:SimpleName[45048-45052]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[44913-44924]:SingleVariableDeclaration[45053-45064]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[44926-44943]:SingleVariableDeclaration[45066-45083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44945-45870]:Block[45085-46010]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[44959-44980]:VariableDeclarationStatement[45099-45120]"
    }, {
      "left" : "switch (c) {\n                case '\\'':\n                    t.transition(AfterDoctypePublicIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.publicIdentifier.append(replacementChar);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.publicIdentifier.append(c);\n            }",
      "right" : "switch (c) {\n                case '\\'':\n                    t.transition(AfterDoctypePublicIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.publicIdentifier.append(replacementChar);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.publicIdentifier.append(c);\n            }",
      "info" : "SwitchStatement[44993-45860]:SwitchStatement[45133-46000]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[45022-45032]:SwitchCase[45162-45172]"
    }, {
      "left" : "t.transition(AfterDoctypePublicIdentifier);",
      "right" : "t.transition(AfterDoctypePublicIdentifier);",
      "info" : "ExpressionStatement[45053-45096]:ExpressionStatement[45193-45236]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[45117-45123]:BreakStatement[45257-45263]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[45140-45154]:SwitchCase[45280-45294]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[45175-45189]:ExpressionStatement[45315-45329]"
    }, {
      "left" : "t.doctypePending.publicIdentifier.append(replacementChar);",
      "right" : "t.doctypePending.publicIdentifier.append(replacementChar);",
      "info" : "ExpressionStatement[45210-45268]:ExpressionStatement[45350-45408]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[45289-45295]:BreakStatement[45429-45435]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[45312-45321]:SwitchCase[45452-45461]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[45342-45356]:ExpressionStatement[45482-45496]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[45377-45413]:ExpressionStatement[45517-45553]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[45434-45457]:ExpressionStatement[45574-45597]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[45478-45497]:ExpressionStatement[45618-45637]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[45518-45524]:BreakStatement[45658-45664]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[45541-45550]:SwitchCase[45681-45690]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[45571-45588]:ExpressionStatement[45711-45728]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[45609-45645]:ExpressionStatement[45749-45785]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[45666-45689]:ExpressionStatement[45806-45829]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[45710-45729]:ExpressionStatement[45850-45869]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[45750-45756]:BreakStatement[45890-45896]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[45773-45781]:SwitchCase[45913-45921]"
    }, {
      "left" : "t.doctypePending.publicIdentifier.append(c);",
      "right" : "t.doctypePending.publicIdentifier.append(c);",
      "info" : "ExpressionStatement[45802-45846]:ExpressionStatement[45942-45986]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[45921-45925]:PrimitiveType[46061-46065]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[45926-45930]:SimpleName[46066-46070]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[45931-45942]:SingleVariableDeclaration[46071-46082]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[45944-45961]:SingleVariableDeclaration[46084-46101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45963-47217]:Block[46103-47357]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[45977-45998]:VariableDeclarationStatement[46117-46138]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(BetweenDoctypePublicAndSystemIdentifiers);\n                    break;\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case '\"':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(BetweenDoctypePublicAndSystemIdentifiers);\n                    break;\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case '\"':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "info" : "SwitchStatement[46011-47207]:SwitchStatement[46151-47347]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[46040-46050]:SwitchCase[46180-46190]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[46067-46077]:SwitchCase[46207-46217]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[46094-46104]:SwitchCase[46234-46244]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[46121-46131]:SwitchCase[46261-46271]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[46148-46157]:SwitchCase[46288-46297]"
    }, {
      "left" : "t.transition(BetweenDoctypePublicAndSystemIdentifiers);",
      "right" : "t.transition(BetweenDoctypePublicAndSystemIdentifiers);",
      "info" : "ExpressionStatement[46178-46233]:ExpressionStatement[46318-46373]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[46254-46260]:BreakStatement[46394-46400]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[46277-46286]:SwitchCase[46417-46426]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[46307-46330]:ExpressionStatement[46447-46470]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[46351-46370]:ExpressionStatement[46491-46510]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[46391-46397]:BreakStatement[46531-46537]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[46414-46423]:SwitchCase[46554-46563]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[46444-46458]:ExpressionStatement[46584-46598]"
    }, {
      "left" : "t.transition(DoctypeSystemIdentifier_doubleQuoted);",
      "right" : "t.transition(DoctypeSystemIdentifier_doubleQuoted);",
      "info" : "ExpressionStatement[46518-46569]:ExpressionStatement[46658-46709]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[46590-46596]:BreakStatement[46730-46736]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[46613-46623]:SwitchCase[46753-46763]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[46644-46658]:ExpressionStatement[46784-46798]"
    }, {
      "left" : "t.transition(DoctypeSystemIdentifier_singleQuoted);",
      "right" : "t.transition(DoctypeSystemIdentifier_singleQuoted);",
      "info" : "ExpressionStatement[46718-46769]:ExpressionStatement[46858-46909]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[46790-46796]:BreakStatement[46930-46936]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[46813-46822]:SwitchCase[46953-46962]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[46843-46860]:ExpressionStatement[46983-47000]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[46881-46917]:ExpressionStatement[47021-47057]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[46938-46961]:ExpressionStatement[47078-47101]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[46982-47001]:ExpressionStatement[47122-47141]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47022-47028]:BreakStatement[47162-47168]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[47045-47053]:SwitchCase[47185-47193]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[47074-47088]:ExpressionStatement[47214-47228]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[47109-47145]:ExpressionStatement[47249-47285]"
    }, {
      "left" : "t.transition(BogusDoctype);",
      "right" : "t.transition(BogusDoctype);",
      "info" : "ExpressionStatement[47166-47193]:ExpressionStatement[47306-47333]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[47280-47284]:PrimitiveType[47420-47424]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[47285-47289]:SimpleName[47425-47429]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[47290-47301]:SingleVariableDeclaration[47430-47441]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[47303-47320]:SingleVariableDeclaration[47443-47460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47322-48500]:Block[47462-48640]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[47336-47357]:VariableDeclarationStatement[47476-47497]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    break;\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case '\"':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    break;\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case '\"':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "info" : "SwitchStatement[47370-48490]:SwitchStatement[47510-48630]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[47399-47409]:SwitchCase[47539-47549]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[47426-47436]:SwitchCase[47566-47576]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[47453-47463]:SwitchCase[47593-47603]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[47480-47490]:SwitchCase[47620-47630]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[47507-47516]:SwitchCase[47647-47656]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47537-47543]:BreakStatement[47677-47683]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[47560-47569]:SwitchCase[47700-47709]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[47590-47613]:ExpressionStatement[47730-47753]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[47634-47653]:ExpressionStatement[47774-47793]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47674-47680]:BreakStatement[47814-47820]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[47697-47706]:SwitchCase[47837-47846]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[47727-47741]:ExpressionStatement[47867-47881]"
    }, {
      "left" : "t.transition(DoctypeSystemIdentifier_doubleQuoted);",
      "right" : "t.transition(DoctypeSystemIdentifier_doubleQuoted);",
      "info" : "ExpressionStatement[47801-47852]:ExpressionStatement[47941-47992]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47873-47879]:BreakStatement[48013-48019]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[47896-47906]:SwitchCase[48036-48046]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[47927-47941]:ExpressionStatement[48067-48081]"
    }, {
      "left" : "t.transition(DoctypeSystemIdentifier_singleQuoted);",
      "right" : "t.transition(DoctypeSystemIdentifier_singleQuoted);",
      "info" : "ExpressionStatement[48001-48052]:ExpressionStatement[48141-48192]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48073-48079]:BreakStatement[48213-48219]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[48096-48105]:SwitchCase[48236-48245]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[48126-48143]:ExpressionStatement[48266-48283]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[48164-48200]:ExpressionStatement[48304-48340]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[48221-48244]:ExpressionStatement[48361-48384]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[48265-48284]:ExpressionStatement[48405-48424]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48305-48311]:BreakStatement[48445-48451]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[48328-48336]:SwitchCase[48468-48476]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[48357-48371]:ExpressionStatement[48497-48511]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[48392-48428]:ExpressionStatement[48532-48568]"
    }, {
      "left" : "t.transition(BogusDoctype);",
      "right" : "t.transition(BogusDoctype);",
      "info" : "ExpressionStatement[48449-48476]:ExpressionStatement[48589-48616]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[48548-48552]:PrimitiveType[48688-48692]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[48553-48557]:SimpleName[48693-48697]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[48558-48569]:SingleVariableDeclaration[48698-48709]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[48571-48588]:SingleVariableDeclaration[48711-48728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48590-49921]:Block[48730-50061]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[48604-48625]:VariableDeclarationStatement[48744-48765]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeDoctypeSystemIdentifier);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case '\"':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeDoctypeSystemIdentifier);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case '\"':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n            }",
      "info" : "SwitchStatement[48638-49911]:SwitchStatement[48778-50051]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[48667-48677]:SwitchCase[48807-48817]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[48694-48704]:SwitchCase[48834-48844]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[48721-48731]:SwitchCase[48861-48871]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[48748-48758]:SwitchCase[48888-48898]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[48775-48784]:SwitchCase[48915-48924]"
    }, {
      "left" : "t.transition(BeforeDoctypeSystemIdentifier);",
      "right" : "t.transition(BeforeDoctypeSystemIdentifier);",
      "info" : "ExpressionStatement[48805-48849]:ExpressionStatement[48945-48989]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48870-48876]:BreakStatement[49010-49016]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[48893-48902]:SwitchCase[49033-49042]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[48923-48937]:ExpressionStatement[49063-49077]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[48958-48994]:ExpressionStatement[49098-49134]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[49015-49038]:ExpressionStatement[49155-49178]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[49059-49078]:ExpressionStatement[49199-49218]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49099-49105]:BreakStatement[49239-49245]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[49122-49131]:SwitchCase[49262-49271]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[49152-49166]:ExpressionStatement[49292-49306]"
    }, {
      "left" : "t.transition(DoctypeSystemIdentifier_doubleQuoted);",
      "right" : "t.transition(DoctypeSystemIdentifier_doubleQuoted);",
      "info" : "ExpressionStatement[49226-49277]:ExpressionStatement[49366-49417]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49298-49304]:BreakStatement[49438-49444]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[49321-49331]:SwitchCase[49461-49471]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[49352-49366]:ExpressionStatement[49492-49506]"
    }, {
      "left" : "t.transition(DoctypeSystemIdentifier_singleQuoted);",
      "right" : "t.transition(DoctypeSystemIdentifier_singleQuoted);",
      "info" : "ExpressionStatement[49426-49477]:ExpressionStatement[49566-49617]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49498-49504]:BreakStatement[49638-49644]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[49521-49530]:SwitchCase[49661-49670]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[49551-49568]:ExpressionStatement[49691-49708]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[49589-49625]:ExpressionStatement[49729-49765]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[49646-49669]:ExpressionStatement[49786-49809]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[49690-49709]:ExpressionStatement[49830-49849]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49730-49736]:BreakStatement[49870-49876]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[49753-49761]:SwitchCase[49893-49901]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[49782-49796]:ExpressionStatement[49922-49936]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[49817-49853]:ExpressionStatement[49957-49993]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[49874-49897]:ExpressionStatement[50014-50037]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[49973-49977]:PrimitiveType[50113-50117]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[49978-49982]:SimpleName[50118-50122]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[49983-49994]:SingleVariableDeclaration[50123-50134]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[49996-50013]:SingleVariableDeclaration[50136-50153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50015-51243]:Block[50155-51383]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[50029-50050]:VariableDeclarationStatement[50169-50190]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    break;\n                case '\"':\n                    // set system id to empty string\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    // set public id to empty string\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    break;\n                case '\"':\n                    // set system id to empty string\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    // set public id to empty string\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "info" : "SwitchStatement[50063-51233]:SwitchStatement[50203-51373]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[50092-50102]:SwitchCase[50232-50242]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[50119-50129]:SwitchCase[50259-50269]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[50146-50156]:SwitchCase[50286-50296]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[50173-50183]:SwitchCase[50313-50323]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[50200-50209]:SwitchCase[50340-50349]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[50230-50236]:BreakStatement[50370-50376]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[50253-50262]:SwitchCase[50393-50402]"
    }, {
      "left" : "t.transition(DoctypeSystemIdentifier_doubleQuoted);",
      "right" : "t.transition(DoctypeSystemIdentifier_doubleQuoted);",
      "info" : "ExpressionStatement[50336-50387]:ExpressionStatement[50476-50527]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[50408-50414]:BreakStatement[50548-50554]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[50431-50441]:SwitchCase[50571-50581]"
    }, {
      "left" : "t.transition(DoctypeSystemIdentifier_singleQuoted);",
      "right" : "t.transition(DoctypeSystemIdentifier_singleQuoted);",
      "info" : "ExpressionStatement[50515-50566]:ExpressionStatement[50655-50706]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[50587-50593]:BreakStatement[50727-50733]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[50610-50619]:SwitchCase[50750-50759]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[50640-50654]:ExpressionStatement[50780-50794]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[50675-50711]:ExpressionStatement[50815-50851]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[50732-50755]:ExpressionStatement[50872-50895]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[50776-50795]:ExpressionStatement[50916-50935]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[50816-50822]:BreakStatement[50956-50962]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[50839-50848]:SwitchCase[50979-50988]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[50869-50886]:ExpressionStatement[51009-51026]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[50907-50943]:ExpressionStatement[51047-51083]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[50964-50987]:ExpressionStatement[51104-51127]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[51008-51027]:ExpressionStatement[51148-51167]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51048-51054]:BreakStatement[51188-51194]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[51071-51079]:SwitchCase[51211-51219]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[51100-51114]:ExpressionStatement[51240-51254]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[51135-51171]:ExpressionStatement[51275-51311]"
    }, {
      "left" : "t.transition(BogusDoctype);",
      "right" : "t.transition(BogusDoctype);",
      "info" : "ExpressionStatement[51192-51219]:ExpressionStatement[51332-51359]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[51302-51306]:PrimitiveType[51442-51446]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[51307-51311]:SimpleName[51447-51451]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[51312-51323]:SingleVariableDeclaration[51452-51463]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[51325-51342]:SingleVariableDeclaration[51465-51482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51344-52268]:Block[51484-52408]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[51358-51379]:VariableDeclarationStatement[51498-51519]"
    }, {
      "left" : "switch (c) {\n                case '\"':\n                    t.transition(AfterDoctypeSystemIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.systemIdentifier.append(replacementChar);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.systemIdentifier.append(c);\n            }",
      "right" : "switch (c) {\n                case '\"':\n                    t.transition(AfterDoctypeSystemIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.systemIdentifier.append(replacementChar);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.systemIdentifier.append(c);\n            }",
      "info" : "SwitchStatement[51392-52258]:SwitchStatement[51532-52398]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[51421-51430]:SwitchCase[51561-51570]"
    }, {
      "left" : "t.transition(AfterDoctypeSystemIdentifier);",
      "right" : "t.transition(AfterDoctypeSystemIdentifier);",
      "info" : "ExpressionStatement[51451-51494]:ExpressionStatement[51591-51634]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51515-51521]:BreakStatement[51655-51661]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[51538-51552]:SwitchCase[51678-51692]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[51573-51587]:ExpressionStatement[51713-51727]"
    }, {
      "left" : "t.doctypePending.systemIdentifier.append(replacementChar);",
      "right" : "t.doctypePending.systemIdentifier.append(replacementChar);",
      "info" : "ExpressionStatement[51608-51666]:ExpressionStatement[51748-51806]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51687-51693]:BreakStatement[51827-51833]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[51710-51719]:SwitchCase[51850-51859]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[51740-51754]:ExpressionStatement[51880-51894]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[51775-51811]:ExpressionStatement[51915-51951]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[51832-51855]:ExpressionStatement[51972-51995]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[51876-51895]:ExpressionStatement[52016-52035]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51916-51922]:BreakStatement[52056-52062]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[51939-51948]:SwitchCase[52079-52088]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[51969-51986]:ExpressionStatement[52109-52126]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[52007-52043]:ExpressionStatement[52147-52183]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[52064-52087]:ExpressionStatement[52204-52227]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[52108-52127]:ExpressionStatement[52248-52267]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52148-52154]:BreakStatement[52288-52294]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[52171-52179]:SwitchCase[52311-52319]"
    }, {
      "left" : "t.doctypePending.systemIdentifier.append(c);",
      "right" : "t.doctypePending.systemIdentifier.append(c);",
      "info" : "ExpressionStatement[52200-52244]:ExpressionStatement[52340-52384]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[52327-52331]:PrimitiveType[52467-52471]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[52332-52336]:SimpleName[52472-52476]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[52337-52348]:SingleVariableDeclaration[52477-52488]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[52350-52367]:SingleVariableDeclaration[52490-52507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52369-53294]:Block[52509-53434]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[52383-52404]:VariableDeclarationStatement[52523-52544]"
    }, {
      "left" : "switch (c) {\n                case '\\'':\n                    t.transition(AfterDoctypeSystemIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.systemIdentifier.append(replacementChar);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.systemIdentifier.append(c);\n            }",
      "right" : "switch (c) {\n                case '\\'':\n                    t.transition(AfterDoctypeSystemIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.systemIdentifier.append(replacementChar);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.systemIdentifier.append(c);\n            }",
      "info" : "SwitchStatement[52417-53284]:SwitchStatement[52557-53424]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[52446-52456]:SwitchCase[52586-52596]"
    }, {
      "left" : "t.transition(AfterDoctypeSystemIdentifier);",
      "right" : "t.transition(AfterDoctypeSystemIdentifier);",
      "info" : "ExpressionStatement[52477-52520]:ExpressionStatement[52617-52660]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52541-52547]:BreakStatement[52681-52687]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[52564-52578]:SwitchCase[52704-52718]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[52599-52613]:ExpressionStatement[52739-52753]"
    }, {
      "left" : "t.doctypePending.systemIdentifier.append(replacementChar);",
      "right" : "t.doctypePending.systemIdentifier.append(replacementChar);",
      "info" : "ExpressionStatement[52634-52692]:ExpressionStatement[52774-52832]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52713-52719]:BreakStatement[52853-52859]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[52736-52745]:SwitchCase[52876-52885]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[52766-52780]:ExpressionStatement[52906-52920]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[52801-52837]:ExpressionStatement[52941-52977]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[52858-52881]:ExpressionStatement[52998-53021]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[52902-52921]:ExpressionStatement[53042-53061]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52942-52948]:BreakStatement[53082-53088]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[52965-52974]:SwitchCase[53105-53114]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[52995-53012]:ExpressionStatement[53135-53152]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[53033-53069]:ExpressionStatement[53173-53209]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[53090-53113]:ExpressionStatement[53230-53253]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[53134-53153]:ExpressionStatement[53274-53293]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[53174-53180]:BreakStatement[53314-53320]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[53197-53205]:SwitchCase[53337-53345]"
    }, {
      "left" : "t.doctypePending.systemIdentifier.append(c);",
      "right" : "t.doctypePending.systemIdentifier.append(c);",
      "info" : "ExpressionStatement[53226-53270]:ExpressionStatement[53366-53410]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[53345-53349]:PrimitiveType[53485-53489]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[53350-53354]:SimpleName[53490-53494]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[53355-53366]:SingleVariableDeclaration[53495-53506]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[53368-53385]:SingleVariableDeclaration[53508-53525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53387-54149]:Block[53527-54289]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[53401-53422]:VariableDeclarationStatement[53541-53562]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    break;\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.transition(BogusDoctype);\n                    // NOT force quirks\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    break;\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.transition(BogusDoctype);\n                    // NOT force quirks\n            }",
      "info" : "SwitchStatement[53435-54139]:SwitchStatement[53575-54279]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[53464-53474]:SwitchCase[53604-53614]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[53491-53501]:SwitchCase[53631-53641]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[53518-53528]:SwitchCase[53658-53668]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[53545-53555]:SwitchCase[53685-53695]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[53572-53581]:SwitchCase[53712-53721]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[53602-53608]:BreakStatement[53742-53748]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[53625-53634]:SwitchCase[53765-53774]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[53655-53678]:ExpressionStatement[53795-53818]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[53699-53718]:ExpressionStatement[53839-53858]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[53739-53745]:BreakStatement[53879-53885]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[53762-53771]:SwitchCase[53902-53911]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[53792-53809]:ExpressionStatement[53932-53949]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[53830-53866]:ExpressionStatement[53970-54006]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[53887-53910]:ExpressionStatement[54027-54050]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[53931-53950]:ExpressionStatement[54071-54090]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[53971-53977]:BreakStatement[54111-54117]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[53994-54002]:SwitchCase[54134-54142]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[54023-54037]:ExpressionStatement[54163-54177]"
    }, {
      "left" : "t.transition(BogusDoctype);",
      "right" : "t.transition(BogusDoctype);",
      "info" : "ExpressionStatement[54058-54085]:ExpressionStatement[54198-54225]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[54184-54188]:PrimitiveType[54324-54328]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[54189-54193]:SimpleName[54329-54333]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[54194-54205]:SingleVariableDeclaration[54334-54345]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[54207-54224]:SingleVariableDeclaration[54347-54364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54226-54671]:Block[54366-54811]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[54240-54261]:VariableDeclarationStatement[54380-54401]"
    }, {
      "left" : "switch (c) {\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    // ignore char\n                    break;\n            }",
      "right" : "switch (c) {\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    // ignore char\n                    break;\n            }",
      "info" : "SwitchStatement[54274-54661]:SwitchStatement[54414-54801]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[54303-54312]:SwitchCase[54443-54452]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[54333-54356]:ExpressionStatement[54473-54496]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[54377-54396]:ExpressionStatement[54517-54536]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54417-54423]:BreakStatement[54557-54563]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[54440-54449]:SwitchCase[54580-54589]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[54470-54493]:ExpressionStatement[54610-54633]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[54514-54533]:ExpressionStatement[54654-54673]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54554-54560]:BreakStatement[54694-54700]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[54577-54585]:SwitchCase[54717-54725]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54641-54647]:BreakStatement[54781-54787]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[54706-54710]:PrimitiveType[54846-54850]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[54711-54715]:SimpleName[54851-54855]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[54716-54727]:SingleVariableDeclaration[54856-54867]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[54729-54746]:SingleVariableDeclaration[54869-54886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54748-54898]:Block[54888-55038]"
    }, {
      "left" : "String data = r.consumeTo(\"]]>\");",
      "right" : "String data = r.consumeTo(\"]]>\");",
      "info" : "VariableDeclarationStatement[54762-54795]:VariableDeclarationStatement[54902-54935]"
    }, {
      "left" : "t.emit(data);",
      "right" : "t.emit(data);",
      "info" : "ExpressionStatement[54808-54821]:ExpressionStatement[54948-54961]"
    }, {
      "left" : "r.matchConsume(\"]]>\");",
      "right" : "r.matchConsume(\"]]>\");",
      "info" : "ExpressionStatement[54834-54856]:ExpressionStatement[54974-54996]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[54869-54888]:ExpressionStatement[55009-55028]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[54912-54920]:Modifier[55052-55060]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[54921-54925]:PrimitiveType[55061-55065]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[54926-54930]:SimpleName[55066-55070]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[54931-54942]:SingleVariableDeclaration[55071-55082]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[54944-54961]:SingleVariableDeclaration[55084-55101]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[56106-56113]:Modifier[56246-56253]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[56114-56120]:Modifier[56254-56260]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[56121-56125]:PrimitiveType[56261-56265]"
    }, {
      "left" : "handleDataEndTag",
      "right" : "handleDataEndTag",
      "info" : "SimpleName[56126-56142]:SimpleName[56266-56282]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[56143-56154]:SingleVariableDeclaration[56283-56294]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[56156-56173]:SingleVariableDeclaration[56296-56313]"
    }, {
      "left" : "TokeniserState elseTransition",
      "right" : "TokeniserState elseTransition",
      "info" : "SingleVariableDeclaration[56175-56204]:SingleVariableDeclaration[56315-56344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56206-57374]:Block[56346-57514]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[56216-56408]:IfStatement[56356-56548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56239-56408]:Block[56379-56548]"
    }, {
      "left" : "String name = r.consumeLetterSequence();",
      "right" : "String name = r.consumeLetterSequence();",
      "info" : "VariableDeclarationStatement[56253-56293]:VariableDeclarationStatement[56393-56433]"
    }, {
      "left" : "t.tagPending.appendTagName(name);",
      "right" : "t.tagPending.appendTagName(name);",
      "info" : "ExpressionStatement[56306-56339]:ExpressionStatement[56446-56479]"
    }, {
      "left" : "t.dataBuffer.append(name);",
      "right" : "t.dataBuffer.append(name);",
      "info" : "ExpressionStatement[56352-56378]:ExpressionStatement[56492-56518]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[56391-56398]:ReturnStatement[56531-56538]"
    }, {
      "left" : "boolean needsExitTransition = false;",
      "right" : "boolean needsExitTransition = false;",
      "info" : "VariableDeclarationStatement[56418-56454]:VariableDeclarationStatement[56558-56594]"
    }, {
      "left" : "if (t.isAppropriateEndTagToken() && !r.isEmpty())",
      "right" : "if (t.isAppropriateEndTagToken() && !r.isEmpty())",
      "info" : "IfStatement[56463-57228]:IfStatement[56603-57368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56513-57171]:Block[56653-57311]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[56527-56548]:VariableDeclarationStatement[56667-56688]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeAttributeName);\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.dataBuffer.append(c);\n                    needsExitTransition = true;\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeAttributeName);\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.dataBuffer.append(c);\n                    needsExitTransition = true;\n            }",
      "info" : "SwitchStatement[56561-57161]:SwitchStatement[56701-57301]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[56590-56600]:SwitchCase[56730-56740]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[56617-56627]:SwitchCase[56757-56767]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[56644-56654]:SwitchCase[56784-56794]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[56671-56681]:SwitchCase[56811-56821]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[56698-56707]:SwitchCase[56838-56847]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[56728-56762]:ExpressionStatement[56868-56902]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[56783-56789]:BreakStatement[56923-56929]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[56806-56815]:SwitchCase[56946-56955]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[56836-56870]:ExpressionStatement[56976-57010]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[56891-56897]:BreakStatement[57031-57037]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[56914-56923]:SwitchCase[57054-57063]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[56944-56963]:ExpressionStatement[57084-57103]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[56984-57003]:ExpressionStatement[57124-57143]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57024-57030]:BreakStatement[57164-57170]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[57047-57055]:SwitchCase[57187-57195]"
    }, {
      "left" : "t.dataBuffer.append(c);",
      "right" : "t.dataBuffer.append(c);",
      "info" : "ExpressionStatement[57076-57099]:ExpressionStatement[57216-57239]"
    }, {
      "left" : "needsExitTransition = true;",
      "right" : "needsExitTransition = true;",
      "info" : "ExpressionStatement[57120-57147]:ExpressionStatement[57260-57287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57177-57228]:Block[57317-57368]"
    }, {
      "left" : "needsExitTransition = true;",
      "right" : "needsExitTransition = true;",
      "info" : "ExpressionStatement[57191-57218]:ExpressionStatement[57331-57358]"
    }, {
      "left" : "if (needsExitTransition)",
      "right" : "if (needsExitTransition)",
      "info" : "IfStatement[57238-57368]:IfStatement[57378-57508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57263-57368]:Block[57403-57508]"
    }, {
      "left" : "t.emit(\"</\" + t.dataBuffer.toString());",
      "right" : "t.emit(\"</\" + t.dataBuffer.toString());",
      "info" : "ExpressionStatement[57277-57316]:ExpressionStatement[57417-57456]"
    }, {
      "left" : "t.transition(elseTransition);",
      "right" : "t.transition(elseTransition);",
      "info" : "ExpressionStatement[57329-57358]:ExpressionStatement[57469-57498]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[57380-57387]:Modifier[57520-57527]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[57388-57394]:Modifier[57528-57534]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[57395-57399]:PrimitiveType[57535-57539]"
    }, {
      "left" : "readData",
      "right" : "readData",
      "info" : "SimpleName[57400-57408]:SimpleName[57540-57548]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[57409-57420]:SingleVariableDeclaration[57549-57560]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[57422-57439]:SingleVariableDeclaration[57562-57579]"
    }, {
      "left" : "TokeniserState current",
      "right" : "TokeniserState current",
      "info" : "SingleVariableDeclaration[57441-57463]:SingleVariableDeclaration[57581-57603]"
    }, {
      "left" : "TokeniserState advance",
      "right" : "TokeniserState advance",
      "info" : "SingleVariableDeclaration[57465-57487]:SingleVariableDeclaration[57605-57627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57489-58003]:Block[57629-58143]"
    }, {
      "left" : "switch (r.current()) {\n            case '<':\n                t.advanceTransition(advance);\n                break;\n            case nullChar:\n                t.error(current);\n                r.advance();\n                t.emit(replacementChar);\n                break;\n            case eof:\n                t.emit(new Token.EOF());\n                break;\n            default:\n                String data = r.consumeToAny('<', nullChar);\n                t.emit(data);\n                break;\n        }",
      "right" : "switch (r.current()) {\n            case '<':\n                t.advanceTransition(advance);\n                break;\n            case nullChar:\n                t.error(current);\n                r.advance();\n                t.emit(replacementChar);\n                break;\n            case eof:\n                t.emit(new Token.EOF());\n                break;\n            default:\n                String data = r.consumeToAny('<', nullChar);\n                t.emit(data);\n                break;\n        }",
      "info" : "SwitchStatement[57499-57997]:SwitchStatement[57639-58137]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[57534-57543]:SwitchCase[57674-57683]"
    }, {
      "left" : "t.advanceTransition(advance);",
      "right" : "t.advanceTransition(advance);",
      "info" : "ExpressionStatement[57560-57589]:ExpressionStatement[57700-57729]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57606-57612]:BreakStatement[57746-57752]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[57625-57639]:SwitchCase[57765-57779]"
    }, {
      "left" : "t.error(current);",
      "right" : "t.error(current);",
      "info" : "ExpressionStatement[57656-57673]:ExpressionStatement[57796-57813]"
    }, {
      "left" : "r.advance();",
      "right" : "r.advance();",
      "info" : "ExpressionStatement[57690-57702]:ExpressionStatement[57830-57842]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[57719-57743]:ExpressionStatement[57859-57883]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57760-57766]:BreakStatement[57900-57906]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[57779-57788]:SwitchCase[57919-57928]"
    }, {
      "left" : "t.emit(new Token.EOF());",
      "right" : "t.emit(new Token.EOF());",
      "info" : "ExpressionStatement[57805-57829]:ExpressionStatement[57945-57969]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57846-57852]:BreakStatement[57986-57992]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[57865-57873]:SwitchCase[58005-58013]"
    }, {
      "left" : "String data = r.consumeToAny('<', nullChar);",
      "right" : "String data = r.consumeToAny('<', nullChar);",
      "info" : "VariableDeclarationStatement[57890-57934]:VariableDeclarationStatement[58030-58074]"
    }, {
      "left" : "t.emit(data);",
      "right" : "t.emit(data);",
      "info" : "ExpressionStatement[57951-57964]:ExpressionStatement[58091-58104]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57981-57987]:BreakStatement[58121-58127]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[58009-58016]:Modifier[58149-58156]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[58017-58023]:Modifier[58157-58163]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[58024-58028]:PrimitiveType[58164-58168]"
    }, {
      "left" : "readCharRef",
      "right" : "readCharRef",
      "info" : "SimpleName[58029-58040]:SimpleName[58169-58180]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[58041-58052]:SingleVariableDeclaration[58181-58192]"
    }, {
      "left" : "TokeniserState advance",
      "right" : "TokeniserState advance",
      "info" : "SingleVariableDeclaration[58054-58076]:SingleVariableDeclaration[58194-58216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58078-58260]:Block[58218-58400]"
    }, {
      "left" : "int[] c = t.consumeCharacterReference(null, false);",
      "right" : "int[] c = t.consumeCharacterReference(null, false);",
      "info" : "VariableDeclarationStatement[58088-58139]:VariableDeclarationStatement[58228-58279]"
    }, {
      "left" : "if (c == null)",
      "right" : "if (c == null)",
      "info" : "IfStatement[58148-58223]:IfStatement[58288-58363]"
    }, {
      "left" : "t.emit('&');",
      "right" : "t.emit('&');",
      "info" : "ExpressionStatement[58175-58187]:ExpressionStatement[58315-58327]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[58213-58223]:ExpressionStatement[58353-58363]"
    }, {
      "left" : "t.transition(advance);",
      "right" : "t.transition(advance);",
      "info" : "ExpressionStatement[58232-58254]:ExpressionStatement[58372-58394]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[58266-58273]:Modifier[58406-58413]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[58274-58280]:Modifier[58414-58420]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[58281-58285]:PrimitiveType[58421-58425]"
    }, {
      "left" : "readEndTag",
      "right" : "readEndTag",
      "info" : "SimpleName[58286-58296]:SimpleName[58426-58436]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[58297-58308]:SingleVariableDeclaration[58437-58448]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[58310-58327]:SingleVariableDeclaration[58450-58467]"
    }, {
      "left" : "TokeniserState a",
      "right" : "TokeniserState a",
      "info" : "SingleVariableDeclaration[58329-58345]:SingleVariableDeclaration[58469-58485]"
    }, {
      "left" : "TokeniserState b",
      "right" : "TokeniserState b",
      "info" : "SingleVariableDeclaration[58347-58363]:SingleVariableDeclaration[58487-58503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58365-58555]:Block[58505-58695]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[58375-58549]:IfStatement[58515-58689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58398-58477]:Block[58538-58617]"
    }, {
      "left" : "t.createTagPending(false);",
      "right" : "t.createTagPending(false);",
      "info" : "ExpressionStatement[58412-58438]:ExpressionStatement[58552-58578]"
    }, {
      "left" : "t.transition(a);",
      "right" : "t.transition(a);",
      "info" : "ExpressionStatement[58451-58467]:ExpressionStatement[58591-58607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58483-58549]:Block[58623-58689]"
    }, {
      "left" : "t.emit(\"</\");",
      "right" : "t.emit(\"</\");",
      "info" : "ExpressionStatement[58497-58510]:ExpressionStatement[58637-58650]"
    }, {
      "left" : "t.transition(b);",
      "right" : "t.transition(b);",
      "info" : "ExpressionStatement[58523-58539]:ExpressionStatement[58663-58679]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[58561-58568]:Modifier[58701-58708]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[58569-58575]:Modifier[58709-58715]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[58576-58580]:PrimitiveType[58716-58720]"
    }, {
      "left" : "handleDataDoubleEscapeTag",
      "right" : "handleDataDoubleEscapeTag",
      "info" : "SimpleName[58581-58606]:SimpleName[58721-58746]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[58607-58618]:SingleVariableDeclaration[58747-58758]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[58620-58637]:SingleVariableDeclaration[58760-58777]"
    }, {
      "left" : "TokeniserState primary",
      "right" : "TokeniserState primary",
      "info" : "SingleVariableDeclaration[58639-58661]:SingleVariableDeclaration[58779-58801]"
    }, {
      "left" : "TokeniserState fallback",
      "right" : "TokeniserState fallback",
      "info" : "SingleVariableDeclaration[58663-58686]:SingleVariableDeclaration[58803-58826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58688-59408]:Block[58828-59548]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[58698-58870]:IfStatement[58838-59010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58721-58870]:Block[58861-59010]"
    }, {
      "left" : "String name = r.consumeLetterSequence();",
      "right" : "String name = r.consumeLetterSequence();",
      "info" : "VariableDeclarationStatement[58735-58775]:VariableDeclarationStatement[58875-58915]"
    }, {
      "left" : "t.dataBuffer.append(name);",
      "right" : "t.dataBuffer.append(name);",
      "info" : "ExpressionStatement[58788-58814]:ExpressionStatement[58928-58954]"
    }, {
      "left" : "t.emit(name);",
      "right" : "t.emit(name);",
      "info" : "ExpressionStatement[58827-58840]:ExpressionStatement[58967-58980]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[58853-58860]:ReturnStatement[58993-59000]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[58880-58901]:VariableDeclarationStatement[59020-59041]"
    }, {
      "left" : "switch (c) {\n            case '\\t':\n            case '\\n':\n            case '\\r':\n            case '\\f':\n            case ' ':\n            case '/':\n            case '>':\n                if (t.dataBuffer.toString().equals(\"script\"))\n                    t.transition(primary);\n                else\n                    t.transition(fallback);\n                t.emit(c);\n                break;\n            default:\n                r.unconsume();\n                t.transition(fallback);\n        }",
      "right" : "switch (c) {\n            case '\\t':\n            case '\\n':\n            case '\\r':\n            case '\\f':\n            case ' ':\n            case '/':\n            case '>':\n                if (t.dataBuffer.toString().equals(\"script\"))\n                    t.transition(primary);\n                else\n                    t.transition(fallback);\n                t.emit(c);\n                break;\n            default:\n                r.unconsume();\n                t.transition(fallback);\n        }",
      "info" : "SwitchStatement[58910-59402]:SwitchStatement[59050-59542]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[58935-58945]:SwitchCase[59075-59085]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[58958-58968]:SwitchCase[59098-59108]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[58981-58991]:SwitchCase[59121-59131]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[59004-59014]:SwitchCase[59144-59154]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[59027-59036]:SwitchCase[59167-59176]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[59049-59058]:SwitchCase[59189-59198]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[59071-59080]:SwitchCase[59211-59220]"
    }, {
      "left" : "if (t.dataBuffer.toString().equals(\"script\"))",
      "right" : "if (t.dataBuffer.toString().equals(\"script\"))",
      "info" : "IfStatement[59097-59250]:IfStatement[59237-59390]"
    }, {
      "left" : "t.transition(primary);",
      "right" : "t.transition(primary);",
      "info" : "ExpressionStatement[59163-59185]:ExpressionStatement[59303-59325]"
    }, {
      "left" : "t.transition(fallback);",
      "right" : "t.transition(fallback);",
      "info" : "ExpressionStatement[59227-59250]:ExpressionStatement[59367-59390]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[59267-59277]:ExpressionStatement[59407-59417]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59294-59300]:BreakStatement[59434-59440]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[59313-59321]:SwitchCase[59453-59461]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[59338-59352]:ExpressionStatement[59478-59492]"
    }, {
      "left" : "t.transition(fallback);",
      "right" : "t.transition(fallback);",
      "info" : "ExpressionStatement[59369-59392]:ExpressionStatement[59509-59532]"
    } ]
  },
  "interFileMappings" : { }
}