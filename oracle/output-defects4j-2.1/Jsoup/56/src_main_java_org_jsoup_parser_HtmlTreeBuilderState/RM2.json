{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "enum : HtmlTreeBuilderState",
      "right" : "enum : HtmlTreeBuilderState",
      "info" : "EnumDeclaration[119-70946]:EnumDeclaration[119-70964]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[1372-2234]:MethodDeclaration[1390-2252]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[2244-2425]:MethodDeclaration[2262-2443]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[2458-3583]:MethodDeclaration[2476-3601]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[3612-6570]:MethodDeclaration[3630-6588]"
    }, {
      "left" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[6580-6717]:MethodDeclaration[6598-6735]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[6754-7827]:MethodDeclaration[6772-7845]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[7837-8024]:MethodDeclaration[7855-8042]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[8056-9835]:MethodDeclaration[8074-9853]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[9845-10021]:MethodDeclaration[9863-10039]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[10050-38430]:MethodDeclaration[10068-38448]"
    }, {
      "left" : "boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[38440-39236]:MethodDeclaration[38458-39254]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[39326-39972]:MethodDeclaration[39344-39990]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[40002-43891]:MethodDeclaration[40020-43909]"
    }, {
      "left" : "boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[43901-44382]:MethodDeclaration[43919-44400]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[44416-46203]:MethodDeclaration[44434-46221]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[46235-47797]:MethodDeclaration[46253-47815]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[47833-49654]:MethodDeclaration[47851-49672]"
    }, {
      "left" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[49664-49910]:MethodDeclaration[49682-49928]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[49944-51935]:MethodDeclaration[49962-51953]"
    }, {
      "left" : "private boolean exitTableBody(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean exitTableBody(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[51945-52384]:MethodDeclaration[51963-52402]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[52394-52506]:MethodDeclaration[52412-52524]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[52534-54511]:MethodDeclaration[52552-54529]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[54521-54633]:MethodDeclaration[54539-54651]"
    }, {
      "left" : "private boolean handleMissingTr(Token t, TreeBuilder tb)",
      "right" : "private boolean handleMissingTr(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[54643-54879]:MethodDeclaration[54661-54897]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[54908-56850]:MethodDeclaration[54926-56868]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[56860-56971]:MethodDeclaration[56878-56989]"
    }, {
      "left" : "private void closeCell(HtmlTreeBuilder tb)",
      "right" : "private void closeCell(HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[56981-57205]:MethodDeclaration[56999-57223]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[57236-60974]:MethodDeclaration[57254-60992]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[60984-61107]:MethodDeclaration[61002-61125]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[61145-61938]:MethodDeclaration[61163-61956]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[61970-62979]:MethodDeclaration[61988-62997]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[63012-64784]:MethodDeclaration[63030-64802]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[64820-65752]:MethodDeclaration[64838-65770]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[65789-66331]:MethodDeclaration[65807-66349]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[66372-67004]:MethodDeclaration[66390-67022]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[67041-67180]:MethodDeclaration[67059-67198]"
    }, {
      "left" : "private static String nullString = String.valueOf('\\u0000');",
      "right" : "private static String nullString = String.valueOf('\\u0000');",
      "info" : "FieldDeclaration[67193-67253]:FieldDeclaration[67211-67271]"
    }, {
      "left" : "abstract boolean process(Token t, HtmlTreeBuilder tb);",
      "right" : "abstract boolean process(Token t, HtmlTreeBuilder tb);",
      "info" : "MethodDeclaration[67259-67313]:MethodDeclaration[67277-67331]"
    }, {
      "left" : "private static boolean isWhitespace(Token t)",
      "right" : "private static boolean isWhitespace(Token t)",
      "info" : "MethodDeclaration[67319-67526]:MethodDeclaration[67337-67544]"
    }, {
      "left" : "private static boolean isWhitespace(String data)",
      "right" : "private static boolean isWhitespace(String data)",
      "info" : "MethodDeclaration[67532-67855]:MethodDeclaration[67550-67873]"
    }, {
      "left" : "private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb)",
      "right" : "private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[67861-68092]:MethodDeclaration[67879-68110]"
    }, {
      "left" : "private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb)",
      "right" : "private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[68098-68331]:MethodDeclaration[68116-68349]"
    }, {
      "left" : "Constants",
      "right" : "Constants",
      "info" : "TypeDeclaration[68501-70944]:TypeDeclaration[68519-70962]"
    }, {
      "left" : "private static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"};",
      "right" : "private static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"};",
      "info" : "FieldDeclaration[68548-68709]:FieldDeclaration[68566-68727]"
    }, {
      "left" : "private static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\",\n                \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\",\n                \"p\", \"section\", \"summary\", \"ul\"};",
      "right" : "private static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\",\n                \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\",\n                \"p\", \"section\", \"summary\", \"ul\"};",
      "info" : "FieldDeclaration[68718-69021]:FieldDeclaration[68736-69039]"
    }, {
      "left" : "private static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"};",
      "right" : "private static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"};",
      "info" : "FieldDeclaration[69030-69120]:FieldDeclaration[69048-69138]"
    }, {
      "left" : "private static final String[] InBodyStartPreListing = new String[]{\"pre\", \"listing\"};",
      "right" : "private static final String[] InBodyStartPreListing = new String[]{\"pre\", \"listing\"};",
      "info" : "FieldDeclaration[69129-69214]:FieldDeclaration[69147-69232]"
    }, {
      "left" : "private static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"};",
      "right" : "private static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"};",
      "info" : "FieldDeclaration[69223-69313]:FieldDeclaration[69241-69331]"
    }, {
      "left" : "private static final String[] DdDt = new String[]{\"dd\", \"dt\"};",
      "right" : "private static final String[] DdDt = new String[]{\"dd\", \"dt\"};",
      "info" : "FieldDeclaration[69322-69384]:FieldDeclaration[69340-69402]"
    }, {
      "left" : "private static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};",
      "right" : "private static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};",
      "info" : "FieldDeclaration[69393-69533]:FieldDeclaration[69411-69551]"
    }, {
      "left" : "private static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"};",
      "right" : "private static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"};",
      "info" : "FieldDeclaration[69542-69637]:FieldDeclaration[69560-69655]"
    }, {
      "left" : "private static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"};",
      "right" : "private static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"};",
      "info" : "FieldDeclaration[69646-69765]:FieldDeclaration[69664-69783]"
    }, {
      "left" : "private static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"};",
      "right" : "private static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"};",
      "info" : "FieldDeclaration[69774-69864]:FieldDeclaration[69792-69882]"
    }, {
      "left" : "private static final String[] InBodyStartInputAttribs = new String[]{\"name\", \"action\", \"prompt\"};",
      "right" : "private static final String[] InBodyStartInputAttribs = new String[]{\"name\", \"action\", \"prompt\"};",
      "info" : "FieldDeclaration[69873-69970]:FieldDeclaration[69891-69988]"
    }, {
      "left" : "private static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"};",
      "right" : "private static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"};",
      "info" : "FieldDeclaration[69979-70065]:FieldDeclaration[69997-70083]"
    }, {
      "left" : "private static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"};",
      "right" : "private static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"};",
      "info" : "FieldDeclaration[70074-70147]:FieldDeclaration[70092-70165]"
    }, {
      "left" : "private static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"};",
      "right" : "private static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"};",
      "info" : "FieldDeclaration[70156-70309]:FieldDeclaration[70174-70327]"
    }, {
      "left" : "private static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\",\n                \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\",\n                \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"};",
      "right" : "private static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\",\n                \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\",\n                \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"};",
      "info" : "FieldDeclaration[70318-70641]:FieldDeclaration[70336-70659]"
    }, {
      "left" : "private static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};",
      "right" : "private static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};",
      "info" : "FieldDeclaration[70650-70820]:FieldDeclaration[70668-70838]"
    }, {
      "left" : "private static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"};",
      "right" : "private static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"};",
      "info" : "FieldDeclaration[70829-70938]:FieldDeclaration[70847-70956]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1417-2234]:Block[1435-2252]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[1431-2199]:IfStatement[1449-2217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1450-1527]:Block[1468-1545]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[1468-1483]:ExpressionStatement[1486-1501]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[1500-1513]:ReturnStatement[1518-1531]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[1533-2199]:IfStatement[1551-2217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1552-1609]:Block[1570-1627]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[1570-1595]:ExpressionStatement[1588-1613]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[1615-2199]:IfStatement[1633-2217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1636-1701]:Block[1654-1719]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[1654-1666]:ReturnStatement[1672-1684]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "info" : "IfStatement[1707-2199]:IfStatement[1725-2217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1773-1874]:Block[1791-1892]"
    }, {
      "left" : "tb.insert(t.asStartTag());",
      "right" : "tb.insert(t.asStartTag());",
      "info" : "ExpressionStatement[1791-1817]:ExpressionStatement[1809-1835]"
    }, {
      "left" : "tb.transition(BeforeHead);",
      "right" : "tb.transition(BeforeHead);",
      "info" : "ExpressionStatement[1834-1860]:ExpressionStatement[1852-1878]"
    }, {
      "left" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\")))",
      "right" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\")))",
      "info" : "IfStatement[1880-2199]:IfStatement[1898-2217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1974-2033]:Block[1992-2051]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[1992-2019]:ReturnStatement[2010-2037]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[2039-2199]:IfStatement[2057-2217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2057-2134]:Block[2075-2152]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[2075-2090]:ExpressionStatement[2093-2108]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2107-2120]:ReturnStatement[2125-2138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2140-2199]:Block[2158-2217]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[2158-2185]:ReturnStatement[2176-2203]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[2212-2224]:ReturnStatement[2230-2242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2302-2425]:Block[2320-2443]"
    }, {
      "left" : "tb.insertStartTag(\"html\");",
      "right" : "tb.insertStartTag(\"html\");",
      "info" : "ExpressionStatement[2316-2342]:ExpressionStatement[2334-2360]"
    }, {
      "left" : "tb.transition(BeforeHead);",
      "right" : "tb.transition(BeforeHead);",
      "info" : "ExpressionStatement[2355-2381]:ExpressionStatement[2373-2399]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[2394-2415]:ReturnStatement[2412-2433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2503-3583]:Block[2521-3601]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[2517-3548]:IfStatement[2535-3566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2538-2582]:Block[2556-2600]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[2556-2568]:ReturnStatement[2574-2586]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[2588-3548]:IfStatement[2606-3566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2607-2664]:Block[2625-2682]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[2625-2650]:ExpressionStatement[2643-2668]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[2670-3548]:IfStatement[2688-3566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2689-2766]:Block[2707-2784]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[2707-2722]:ExpressionStatement[2725-2740]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2739-2752]:ReturnStatement[2757-2770]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "info" : "IfStatement[2772-3548]:IfStatement[2790-3566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2838-2922]:Block[2856-2940]"
    }, {
      "left" : "return InBody.process(t, tb);",
      "right" : "return InBody.process(t, tb);",
      "info" : "ReturnStatement[2856-2885]:ReturnStatement[2874-2903]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\"))",
      "info" : "IfStatement[2928-3548]:IfStatement[2946-3566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2994-3147]:Block[3012-3165]"
    }, {
      "left" : "Element head = tb.insert(t.asStartTag());",
      "right" : "Element head = tb.insert(t.asStartTag());",
      "info" : "VariableDeclarationStatement[3012-3053]:VariableDeclarationStatement[3030-3071]"
    }, {
      "left" : "tb.setHeadElement(head);",
      "right" : "tb.setHeadElement(head);",
      "info" : "ExpressionStatement[3070-3094]:ExpressionStatement[3088-3112]"
    }, {
      "left" : "tb.transition(InHead);",
      "right" : "tb.transition(InHead);",
      "info" : "ExpressionStatement[3111-3133]:ExpressionStatement[3129-3151]"
    }, {
      "left" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\")))",
      "right" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\")))",
      "info" : "IfStatement[3153-3548]:IfStatement[3171-3566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3247-3344]:Block[3265-3362]"
    }, {
      "left" : "tb.processStartTag(\"head\");",
      "right" : "tb.processStartTag(\"head\");",
      "info" : "ExpressionStatement[3265-3292]:ExpressionStatement[3283-3310]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[3309-3330]:ReturnStatement[3327-3348]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[3350-3548]:IfStatement[3368-3566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3368-3445]:Block[3386-3463]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[3386-3401]:ExpressionStatement[3404-3419]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3418-3431]:ReturnStatement[3436-3449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3451-3548]:Block[3469-3566]"
    }, {
      "left" : "tb.processStartTag(\"head\");",
      "right" : "tb.processStartTag(\"head\");",
      "info" : "ExpressionStatement[3469-3496]:ExpressionStatement[3487-3514]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[3513-3534]:ReturnStatement[3531-3552]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3561-3573]:ReturnStatement[3579-3591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3657-6570]:Block[3675-6588]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[3671-3780]:IfStatement[3689-3798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3692-3780]:Block[3710-3798]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[3710-3737]:ExpressionStatement[3728-3755]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3754-3766]:ReturnStatement[3772-3784]"
    }, {
      "left" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.normalName();\n                    if (name.equals(\"html\")) {\n                        return InBody.process(t, tb);\n                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {\n                        Element el = tb.insertEmpty(start);\n                        // jsoup special: update base the frist time it is seen\n                        if (name.equals(\"base\") && el.hasAttr(\"href\"))\n                            tb.maybeSetBaseUri(el);\n                    } else if (name.equals(\"meta\")) {\n                        Element meta = tb.insertEmpty(start);\n                        // todo: charset switches\n                    } else if (name.equals(\"title\")) {\n                        handleRcData(start, tb);\n                    } else if (StringUtil.in(name, \"noframes\", \"style\")) {\n                        handleRawtext(start, tb);\n                    } else if (name.equals(\"noscript\")) {\n                        // else if noscript && scripting flag = true: rawtext (jsoup doesn't run script, to handle as noscript)\n                        tb.insert(start);\n                        tb.transition(InHeadNoscript);\n                    } else if (name.equals(\"script\")) {\n                        // skips some script rules as won't execute them\n\n                        tb.tokeniser.transition(TokeniserState.ScriptData);\n                        tb.markInsertionMode();\n                        tb.transition(Text);\n                        tb.insert(start);\n                    } else if (name.equals(\"head\")) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.normalName();\n                    if (name.equals(\"head\")) {\n                        tb.pop();\n                        tb.transition(AfterHead);\n                    } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) {\n                        return anythingElse(t, tb);\n                    } else {\n                        tb.error(this);\n                        return false;\n                    }\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "right" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.normalName();\n                    if (name.equals(\"html\")) {\n                        return InBody.process(t, tb);\n                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {\n                        Element el = tb.insertEmpty(start);\n                        // jsoup special: update base the frist time it is seen\n                        if (name.equals(\"base\") && el.hasAttr(\"href\"))\n                            tb.maybeSetBaseUri(el);\n                    } else if (name.equals(\"meta\")) {\n                        Element meta = tb.insertEmpty(start);\n                        // todo: charset switches\n                    } else if (name.equals(\"title\")) {\n                        handleRcData(start, tb);\n                    } else if (StringUtil.in(name, \"noframes\", \"style\")) {\n                        handleRawtext(start, tb);\n                    } else if (name.equals(\"noscript\")) {\n                        // else if noscript && scripting flag = true: rawtext (jsoup doesn't run script, to handle as noscript)\n                        tb.insert(start);\n                        tb.transition(InHeadNoscript);\n                    } else if (name.equals(\"script\")) {\n                        // skips some script rules as won't execute them\n\n                        tb.tokeniser.transition(TokeniserState.ScriptData);\n                        tb.markInsertionMode();\n                        tb.transition(Text);\n                        tb.insert(start);\n                    } else if (name.equals(\"head\")) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.normalName();\n                    if (name.equals(\"head\")) {\n                        tb.pop();\n                        tb.transition(AfterHead);\n                    } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) {\n                        return anythingElse(t, tb);\n                    } else {\n                        tb.error(this);\n                        return false;\n                    }\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "info" : "SwitchStatement[3793-6535]:SwitchStatement[3811-6553]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[3827-3840]:SwitchCase[3845-3858]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[3861-3886]:ExpressionStatement[3879-3904]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3907-3913]:BreakStatement[3925-3931]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[3930-3943]:SwitchCase[3948-3961]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[3964-3979]:ExpressionStatement[3982-3997]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4000-4013]:ReturnStatement[4018-4031]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[4030-4044]:SwitchCase[4048-4062]"
    }, {
      "left" : "Token.StartTag start = t.asStartTag();",
      "right" : "Token.StartTag start = t.asStartTag();",
      "info" : "VariableDeclarationStatement[4065-4103]:VariableDeclarationStatement[4083-4121]"
    }, {
      "left" : "String name = start.normalName();",
      "right" : "String name = start.normalName();",
      "info" : "VariableDeclarationStatement[4124-4157]:VariableDeclarationStatement[4142-4175]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[4178-5879]:IfStatement[4196-5897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4203-4280]:Block[4221-4298]"
    }, {
      "left" : "return InBody.process(t, tb);",
      "right" : "return InBody.process(t, tb);",
      "info" : "ReturnStatement[4229-4258]:ReturnStatement[4247-4276]"
    }, {
      "left" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\"))",
      "right" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\"))",
      "info" : "IfStatement[4286-5879]:IfStatement[4304-5897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4361-4647]:Block[4379-4665]"
    }, {
      "left" : "Element el = tb.insertEmpty(start);",
      "right" : "Element el = tb.insertEmpty(start);",
      "info" : "VariableDeclarationStatement[4387-4422]:VariableDeclarationStatement[4405-4440]"
    }, {
      "left" : "if (name.equals(\"base\") && el.hasAttr(\"href\"))",
      "right" : "if (name.equals(\"base\") && el.hasAttr(\"href\"))",
      "info" : "IfStatement[4527-4625]:IfStatement[4545-4643]"
    }, {
      "left" : "tb.maybeSetBaseUri(el);",
      "right" : "tb.maybeSetBaseUri(el);",
      "info" : "ExpressionStatement[4602-4625]:ExpressionStatement[4620-4643]"
    }, {
      "left" : "if (name.equals(\"meta\"))",
      "right" : "if (name.equals(\"meta\"))",
      "info" : "IfStatement[4653-5879]:IfStatement[4671-5897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4678-4813]:Block[4696-4831]"
    }, {
      "left" : "Element meta = tb.insertEmpty(start);",
      "right" : "Element meta = tb.insertEmpty(start);",
      "info" : "VariableDeclarationStatement[4704-4741]:VariableDeclarationStatement[4722-4759]"
    }, {
      "left" : "if (name.equals(\"title\"))",
      "right" : "if (name.equals(\"title\"))",
      "info" : "IfStatement[4819-5879]:IfStatement[4837-5897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4845-4917]:Block[4863-4935]"
    }, {
      "left" : "handleRcData(start, tb);",
      "right" : "handleRcData(start, tb);",
      "info" : "ExpressionStatement[4871-4895]:ExpressionStatement[4889-4913]"
    }, {
      "left" : "if (StringUtil.in(name, \"noframes\", \"style\"))",
      "right" : "if (StringUtil.in(name, \"noframes\", \"style\"))",
      "info" : "IfStatement[4923-5879]:IfStatement[4941-5897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4969-5042]:Block[4987-5060]"
    }, {
      "left" : "handleRawtext(start, tb);",
      "right" : "handleRawtext(start, tb);",
      "info" : "ExpressionStatement[4995-5020]:ExpressionStatement[5013-5038]"
    }, {
      "left" : "if (name.equals(\"noscript\"))",
      "right" : "if (name.equals(\"noscript\"))",
      "info" : "IfStatement[5048-5879]:IfStatement[5066-5897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5077-5325]:Block[5095-5343]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[5231-5248]:ExpressionStatement[5249-5266]"
    }, {
      "left" : "tb.transition(InHeadNoscript);",
      "right" : "tb.transition(InHeadNoscript);",
      "info" : "ExpressionStatement[5273-5303]:ExpressionStatement[5291-5321]"
    }, {
      "left" : "if (name.equals(\"script\"))",
      "right" : "if (name.equals(\"script\"))",
      "info" : "IfStatement[5331-5879]:IfStatement[5349-5897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5358-5666]:Block[5376-5684]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.ScriptData);",
      "right" : "tb.tokeniser.transition(TokeniserState.ScriptData);",
      "info" : "ExpressionStatement[5458-5509]:ExpressionStatement[5476-5527]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[5534-5557]:ExpressionStatement[5552-5575]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[5582-5602]:ExpressionStatement[5600-5620]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[5627-5644]:ExpressionStatement[5645-5662]"
    }, {
      "left" : "if (name.equals(\"head\"))",
      "right" : "if (name.equals(\"head\"))",
      "info" : "IfStatement[5672-5879]:IfStatement[5690-5897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5697-5798]:Block[5715-5816]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[5723-5738]:ExpressionStatement[5741-5756]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5763-5776]:ReturnStatement[5781-5794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5804-5879]:Block[5822-5897]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[5830-5857]:ReturnStatement[5848-5875]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5900-5906]:BreakStatement[5918-5924]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[5923-5935]:SwitchCase[5941-5953]"
    }, {
      "left" : "Token.EndTag end = t.asEndTag();",
      "right" : "Token.EndTag end = t.asEndTag();",
      "info" : "VariableDeclarationStatement[5956-5988]:VariableDeclarationStatement[5974-6006]"
    }, {
      "left" : "name = end.normalName();",
      "right" : "name = end.normalName();",
      "info" : "ExpressionStatement[6009-6033]:ExpressionStatement[6027-6051]"
    }, {
      "left" : "if (name.equals(\"head\"))",
      "right" : "if (name.equals(\"head\"))",
      "info" : "IfStatement[6054-6421]:IfStatement[6072-6439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6079-6186]:Block[6097-6204]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[6105-6114]:ExpressionStatement[6123-6132]"
    }, {
      "left" : "tb.transition(AfterHead);",
      "right" : "tb.transition(AfterHead);",
      "info" : "ExpressionStatement[6139-6164]:ExpressionStatement[6157-6182]"
    }, {
      "left" : "if (StringUtil.in(name, \"body\", \"html\", \"br\"))",
      "right" : "if (StringUtil.in(name, \"body\", \"html\", \"br\"))",
      "info" : "IfStatement[6192-6421]:IfStatement[6210-6439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6239-6314]:Block[6257-6332]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[6265-6292]:ReturnStatement[6283-6310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6320-6421]:Block[6338-6439]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[6346-6361]:ExpressionStatement[6364-6379]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6386-6399]:ReturnStatement[6404-6417]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6442-6448]:BreakStatement[6460-6466]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[6465-6473]:SwitchCase[6483-6491]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[6494-6521]:ReturnStatement[6512-6539]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6548-6560]:ReturnStatement[6566-6578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6634-6717]:Block[6652-6735]"
    }, {
      "left" : "tb.processEndTag(\"head\");",
      "right" : "tb.processEndTag(\"head\");",
      "info" : "ExpressionStatement[6648-6673]:ExpressionStatement[6666-6691]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[6686-6707]:ReturnStatement[6704-6725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6799-7827]:Block[6817-7845]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[6813-7792]:IfStatement[6831-7810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6832-6879]:Block[6850-6897]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[6850-6865]:ExpressionStatement[6868-6883]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "info" : "IfStatement[6885-7792]:IfStatement[6903-7810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6951-7012]:Block[6969-7030]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[6969-6998]:ReturnStatement[6987-7016]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\"))",
      "info" : "IfStatement[7018-7792]:IfStatement[7036-7810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7084-7164]:Block[7102-7182]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[7102-7111]:ExpressionStatement[7120-7129]"
    }, {
      "left" : "tb.transition(InHead);",
      "right" : "tb.transition(InHead);",
      "info" : "ExpressionStatement[7128-7150]:ExpressionStatement[7146-7168]"
    }, {
      "left" : "if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),\n                    \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\")))",
      "right" : "if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),\n                    \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\")))",
      "info" : "IfStatement[7170-7792]:IfStatement[7188-7810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7354-7415]:Block[7372-7433]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[7372-7401]:ReturnStatement[7390-7419]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\"))",
      "info" : "IfStatement[7421-7792]:IfStatement[7439-7810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7481-7540]:Block[7499-7558]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[7499-7526]:ReturnStatement[7517-7544]"
    }, {
      "left" : "if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag())",
      "right" : "if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag())",
      "info" : "IfStatement[7546-7792]:IfStatement[7564-7810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7650-7727]:Block[7668-7745]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[7668-7683]:ExpressionStatement[7686-7701]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7700-7713]:ReturnStatement[7718-7731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7733-7792]:Block[7751-7810]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[7751-7778]:ReturnStatement[7769-7796]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7805-7817]:ReturnStatement[7823-7835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7895-8024]:Block[7913-8042]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[7909-7924]:ExpressionStatement[7927-7942]"
    }, {
      "left" : "tb.insert(new Token.Character().data(t.toString()));",
      "right" : "tb.insert(new Token.Character().data(t.toString()));",
      "info" : "ExpressionStatement[7937-7989]:ExpressionStatement[7955-8007]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8002-8014]:ReturnStatement[8020-8032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8101-9835]:Block[8119-9853]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[8115-9800]:IfStatement[8133-9818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8136-8195]:Block[8154-8213]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[8154-8181]:ExpressionStatement[8172-8199]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[8201-9800]:IfStatement[8219-9818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8220-8277]:Block[8238-8295]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[8238-8263]:ExpressionStatement[8256-8281]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[8283-9800]:IfStatement[8301-9818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8302-8349]:Block[8320-8367]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[8320-8335]:ExpressionStatement[8338-8353]"
    }, {
      "left" : "if (t.isStartTag())",
      "right" : "if (t.isStartTag())",
      "info" : "IfStatement[8355-9800]:IfStatement[8373-9818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8375-9469]:Block[8393-9487]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[8393-8434]:VariableDeclarationStatement[8411-8452]"
    }, {
      "left" : "String name = startTag.normalName();",
      "right" : "String name = startTag.normalName();",
      "info" : "VariableDeclarationStatement[8451-8487]:VariableDeclarationStatement[8469-8505]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[8504-9455]:IfStatement[8522-9473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8529-8598]:Block[8547-8616]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[8551-8580]:ReturnStatement[8569-8598]"
    }, {
      "left" : "if (name.equals(\"body\"))",
      "right" : "if (name.equals(\"body\"))",
      "info" : "IfStatement[8604-9455]:IfStatement[8622-9473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8629-8774]:Block[8647-8792]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[8651-8671]:ExpressionStatement[8669-8689]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[8692-8713]:ExpressionStatement[8710-8731]"
    }, {
      "left" : "tb.transition(InBody);",
      "right" : "tb.transition(InBody);",
      "info" : "ExpressionStatement[8734-8756]:ExpressionStatement[8752-8774]"
    }, {
      "left" : "if (name.equals(\"frameset\"))",
      "right" : "if (name.equals(\"frameset\"))",
      "info" : "IfStatement[8780-9455]:IfStatement[8798-9473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8809-8916]:Block[8827-8934]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[8831-8851]:ExpressionStatement[8849-8869]"
    }, {
      "left" : "tb.transition(InFrameset);",
      "right" : "tb.transition(InFrameset);",
      "info" : "ExpressionStatement[8872-8898]:ExpressionStatement[8890-8916]"
    }, {
      "left" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"))",
      "right" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"))",
      "info" : "IfStatement[8922-9455]:IfStatement[8940-9473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9034-9269]:Block[9052-9287]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[9056-9071]:ExpressionStatement[9074-9089]"
    }, {
      "left" : "Element head = tb.getHeadElement();",
      "right" : "Element head = tb.getHeadElement();",
      "info" : "VariableDeclarationStatement[9092-9127]:VariableDeclarationStatement[9110-9145]"
    }, {
      "left" : "tb.push(head);",
      "right" : "tb.push(head);",
      "info" : "ExpressionStatement[9148-9162]:ExpressionStatement[9166-9180]"
    }, {
      "left" : "tb.process(t, InHead);",
      "right" : "tb.process(t, InHead);",
      "info" : "ExpressionStatement[9183-9205]:ExpressionStatement[9201-9223]"
    }, {
      "left" : "tb.removeFromStack(head);",
      "right" : "tb.removeFromStack(head);",
      "info" : "ExpressionStatement[9226-9251]:ExpressionStatement[9244-9269]"
    }, {
      "left" : "if (name.equals(\"head\"))",
      "right" : "if (name.equals(\"head\"))",
      "info" : "IfStatement[9275-9455]:IfStatement[9293-9473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9300-9389]:Block[9318-9407]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[9322-9337]:ExpressionStatement[9340-9355]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9358-9371]:ReturnStatement[9376-9389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9395-9455]:Block[9413-9473]"
    }, {
      "left" : "anythingElse(t, tb);",
      "right" : "anythingElse(t, tb);",
      "info" : "ExpressionStatement[9417-9437]:ExpressionStatement[9435-9455]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[9475-9800]:IfStatement[9493-9818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9493-9742]:Block[9511-9760]"
    }, {
      "left" : "if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\"))",
      "right" : "if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\"))",
      "info" : "IfStatement[9511-9728]:IfStatement[9529-9746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9573-9633]:Block[9591-9651]"
    }, {
      "left" : "anythingElse(t, tb);",
      "right" : "anythingElse(t, tb);",
      "info" : "ExpressionStatement[9595-9615]:ExpressionStatement[9613-9633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9639-9728]:Block[9657-9746]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[9661-9676]:ExpressionStatement[9679-9694]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9697-9710]:ReturnStatement[9715-9728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9748-9800]:Block[9766-9818]"
    }, {
      "left" : "anythingElse(t, tb);",
      "right" : "anythingElse(t, tb);",
      "info" : "ExpressionStatement[9766-9786]:ExpressionStatement[9784-9804]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9813-9825]:ReturnStatement[9831-9843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9903-10021]:Block[9921-10039]"
    }, {
      "left" : "tb.processStartTag(\"body\");",
      "right" : "tb.processStartTag(\"body\");",
      "info" : "ExpressionStatement[9917-9944]:ExpressionStatement[9935-9962]"
    }, {
      "left" : "tb.framesetOk(true);",
      "right" : "tb.framesetOk(true);",
      "info" : "ExpressionStatement[9957-9977]:ExpressionStatement[9975-9995]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[9990-10011]:ReturnStatement[10008-10029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10095-38430]:Block[10113-38448]"
    }, {
      "left" : "switch (t.type) {\n                case Character: {\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        // todo confirm that check\n                        tb.error(this);\n                        return false;\n                    } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                        tb.framesetOk(false);\n                    }\n                    break;\n                }\n                case Comment: {\n                    tb.insert(t.asComment());\n                    break;\n                }\n                case Doctype: {\n                    tb.error(this);\n                    return false;\n                }\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.normalName();\n                    if (name.equals(\"a\")) {\n                        if (tb.getActiveFormattingElement(\"a\") != null) {\n                            tb.error(this);\n                            tb.processEndTag(\"a\");\n\n                            // still on stack?\n                            Element remainingA = tb.getFromStack(\"a\");\n                            if (remainingA != null) {\n                                tb.removeFromActiveFormattingElements(remainingA);\n                                tb.removeFromStack(remainingA);\n                            }\n                        }\n                        tb.reconstructFormattingElements();\n                        Element a = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(a);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) {\n                        tb.reconstructFormattingElements();\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"span\")) {\n                        // same as final else, but short circuits lots of checks\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (name.equals(\"li\")) {\n                        tb.framesetOk(false);\n                        ArrayList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (el.nodeName().equals(\"li\")) {\n                                tb.processEndTag(\"li\");\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"html\")) {\n                        tb.error(this);\n                        // merge attributes onto real html\n                        Element html = tb.getStack().get(0);\n                        for (Attribute attribute : startTag.getAttributes()) {\n                            if (!html.hasAttr(attribute.getKey()))\n                                html.attributes().put(attribute);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) {\n                        return tb.process(t, InHead);\n                    } else if (name.equals(\"body\")) {\n                        tb.error(this);\n                        ArrayList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else {\n                            tb.framesetOk(false);\n                            Element body = stack.get(1);\n                            for (Attribute attribute : startTag.getAttributes()) {\n                                if (!body.hasAttr(attribute.getKey()))\n                                    body.attributes().put(attribute);\n                            }\n                        }\n                    } else if (name.equals(\"frameset\")) {\n                        tb.error(this);\n                        ArrayList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else if (!tb.framesetOk()) {\n                            return false; // ignore frameset\n                        } else {\n                            Element second = stack.get(1);\n                            if (second.parent() != null)\n                                second.remove();\n                            // pop up to html element\n                            while (stack.size() > 1)\n                                stack.remove(stack.size()-1);\n                            tb.insert(startTag);\n                            tb.transition(InFrameset);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) {\n                            tb.error(this);\n                            tb.pop();\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        // todo: ignore LF if next token\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"form\")) {\n                        if (tb.getFormElement() != null) {\n                            tb.error(this);\n                            return false;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insertForm(startTag, true);\n                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                        tb.framesetOk(false);\n                        ArrayList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) {\n                                tb.processEndTag(el.nodeName());\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"plaintext\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out\n                    } else if (name.equals(\"button\")) {\n                        if (tb.inButtonScope(\"button\")) {\n                            // close and reprocess\n                            tb.error(this);\n                            tb.processEndTag(\"button\");\n                            tb.process(startTag);\n                        } else {\n                            tb.reconstructFormattingElements();\n                            tb.insert(startTag);\n                            tb.framesetOk(false);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Formatters)) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (name.equals(\"nobr\")) {\n                        tb.reconstructFormattingElements();\n                        if (tb.inScope(\"nobr\")) {\n                            tb.error(this);\n                            tb.processEndTag(\"nobr\");\n                            tb.reconstructFormattingElements();\n                        }\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.insertMarkerToFormattingElements();\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"table\")) {\n                        if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n                        tb.transition(InTable);\n                    } else if (name.equals(\"input\")) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insertEmpty(startTag);\n                        if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))\n                            tb.framesetOk(false);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) {\n                        tb.insertEmpty(startTag);\n                    } else if (name.equals(\"hr\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"image\")) {\n                        if (tb.getFromStack(\"svg\") == null)\n                            return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg\n                        else\n                            tb.insert(startTag);\n                    } else if (name.equals(\"isindex\")) {\n                        // how much do we care about the early 90s?\n                        tb.error(this);\n                        if (tb.getFormElement() != null)\n                            return false;\n\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                        tb.processStartTag(\"form\");\n                        if (startTag.attributes.hasKey(\"action\")) {\n                            Element form = tb.getFormElement();\n                            form.attr(\"action\", startTag.attributes.get(\"action\"));\n                        }\n                        tb.processStartTag(\"hr\");\n                        tb.processStartTag(\"label\");\n                        // hope you like english.\n                        String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";\n\n                        tb.process(new Token.Character().data(prompt));\n\n                        // input\n                        Attributes inputAttribs = new Attributes();\n                        for (Attribute attr : startTag.attributes) {\n                            if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))\n                                inputAttribs.put(attr);\n                        }\n                        inputAttribs.put(\"name\", \"isindex\");\n                        tb.processStartTag(\"input\", inputAttribs);\n                        tb.processEndTag(\"label\");\n                        tb.processStartTag(\"hr\");\n                        tb.processEndTag(\"form\");\n                    } else if (name.equals(\"textarea\")) {\n                        tb.insert(startTag);\n                        // todo: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n                        tb.tokeniser.transition(TokeniserState.Rcdata);\n                        tb.markInsertionMode();\n                        tb.framesetOk(false);\n                        tb.transition(Text);\n                    } else if (name.equals(\"xmp\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.reconstructFormattingElements();\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"iframe\")) {\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"noembed\")) {\n                        // also handle noscript if script enabled\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"select\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n\n                        HtmlTreeBuilderState state = tb.state();\n                        if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))\n                            tb.transition(InSelectInTable);\n                        else\n                            tb.transition(InSelect);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) {\n                        if (tb.inScope(\"ruby\")) {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n                                tb.error(this);\n                                tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name\n                            }\n                            tb.insert(startTag);\n                        }\n                    } else if (name.equals(\"math\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"math\" (i.e. foreign, mathml)\n                        tb.insert(startTag);\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                    } else if (name.equals(\"svg\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"svg\" (xlink, svg)\n                        tb.insert(startTag);\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    }\n                    break;\n\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.normalName();\n                    if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) {\n                        // Adoption Agency Algorithm.\n                        for (int i = 0; i < 8; i++) {\n                            Element formatEl = tb.getActiveFormattingElement(name);\n                            if (formatEl == null)\n                                return anyOtherEndTag(t, tb);\n                            else if (!tb.onStack(formatEl)) {\n                                tb.error(this);\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            } else if (!tb.inScope(formatEl.nodeName())) {\n                                tb.error(this);\n                                return false;\n                            } else if (tb.currentElement() != formatEl)\n                                tb.error(this);\n\n                            Element furthestBlock = null;\n                            Element commonAncestor = null;\n                            boolean seenFormattingElement = false;\n                            ArrayList<Element> stack = tb.getStack();\n                            // the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents\n                            // run-aways\n                            final int stackSize = stack.size();\n                            for (int si = 0; si < stackSize && si < 64; si++) {\n                                Element el = stack.get(si);\n                                if (el == formatEl) {\n                                    commonAncestor = stack.get(si - 1);\n                                    seenFormattingElement = true;\n                                } else if (seenFormattingElement && tb.isSpecial(el)) {\n                                    furthestBlock = el;\n                                    break;\n                                }\n                            }\n                            if (furthestBlock == null) {\n                                tb.popStackToClose(formatEl.nodeName());\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            }\n\n                            // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.\n                            // does that mean: int pos of format el in list?\n                            Element node = furthestBlock;\n                            Element lastNode = furthestBlock;\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue;\n                                } else if (node == formatEl)\n                                    break;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());\n                                // case will follow the original node (so honours ParseSettings)\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }\n\n                            if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                tb.insertInFosterParent(lastNode);\n                            } else {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                commonAncestor.appendChild(lastNode);\n                            }\n\n                            Element adopter = new Element(formatEl.tag(), tb.getBaseUri());\n                            adopter.attributes().addAll(formatEl.attributes());\n                            Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);\n                            for (Node childNode : childNodes) {\n                                adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod.\n                            }\n                            furthestBlock.appendChild(adopter);\n                            tb.removeFromActiveFormattingElements(formatEl);\n                            // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.\n                            tb.removeFromStack(formatEl);\n                            tb.insertOnStackAfter(furthestBlock, adopter);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) {\n                        if (!tb.inScope(name)) {\n                            // nothing to close\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"span\")) {\n                        // same as final fall through, but saves short circuit\n                        return anyOtherEndTag(t, tb);\n                    } else if (name.equals(\"li\")) {\n                        if (!tb.inListItemScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"body\")) {\n                        if (!tb.inScope(\"body\")) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            // todo: error if stack contains something not dd, dt, li, optgroup, option, p, rp, rt, tbody, td, tfoot, th, thead, tr, body, html\n                            tb.transition(AfterBody);\n                        }\n                    } else if (name.equals(\"html\")) {\n                        boolean notIgnored = tb.processEndTag(\"body\");\n                        if (notIgnored)\n                            return tb.process(endTag);\n                    } else if (name.equals(\"form\")) {\n                        Element currentForm = tb.getFormElement();\n                        tb.setFormElement(null);\n                        if (currentForm == null || !tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            // remove currentForm from stack. will shift anything under up.\n                            tb.removeFromStack(currentForm);\n                        }\n                    } else if (name.equals(\"p\")) {\n                        if (!tb.inButtonScope(name)) {\n                            tb.error(this);\n                            tb.processStartTag(name); // if no p to close, creates an empty <p></p>\n                            return tb.process(endTag);\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                        if (!tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                        if (!tb.inScope(Constants.Headings)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(Constants.Headings);\n                        }\n                    } else if (name.equals(\"sarcasm\")) {\n                        // *sigh*\n                        return anyOtherEndTag(t, tb);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                        if (!tb.inScope(\"name\")) {\n                            if (!tb.inScope(name)) {\n                                tb.error(this);\n                                return false;\n                            }\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                            tb.clearFormattingElementsToLastMarker();\n                        }\n                    } else if (name.equals(\"br\")) {\n                        tb.error(this);\n                        tb.processStartTag(\"br\");\n                        return false;\n                    } else {\n                        return anyOtherEndTag(t, tb);\n                    }\n\n                    break;\n                case EOF:\n                    // todo: error if stack contains something not dd, dt, li, p, tbody, td, tfoot, th, thead, tr, body, html\n                    // stop parsing\n                    break;\n            }",
      "right" : "switch (t.type) {\n                case Character: {\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        // todo confirm that check\n                        tb.error(this);\n                        return false;\n                    } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                        tb.framesetOk(false);\n                    }\n                    break;\n                }\n                case Comment: {\n                    tb.insert(t.asComment());\n                    break;\n                }\n                case Doctype: {\n                    tb.error(this);\n                    return false;\n                }\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.normalName();\n                    if (name.equals(\"a\")) {\n                        if (tb.getActiveFormattingElement(\"a\") != null) {\n                            tb.error(this);\n                            tb.processEndTag(\"a\");\n\n                            // still on stack?\n                            Element remainingA = tb.getFromStack(\"a\");\n                            if (remainingA != null) {\n                                tb.removeFromActiveFormattingElements(remainingA);\n                                tb.removeFromStack(remainingA);\n                            }\n                        }\n                        tb.reconstructFormattingElements();\n                        Element a = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(a);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) {\n                        tb.reconstructFormattingElements();\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"span\")) {\n                        // same as final else, but short circuits lots of checks\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (name.equals(\"li\")) {\n                        tb.framesetOk(false);\n                        ArrayList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (el.nodeName().equals(\"li\")) {\n                                tb.processEndTag(\"li\");\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"html\")) {\n                        tb.error(this);\n                        // merge attributes onto real html\n                        Element html = tb.getStack().get(0);\n                        for (Attribute attribute : startTag.getAttributes()) {\n                            if (!html.hasAttr(attribute.getKey()))\n                                html.attributes().put(attribute);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) {\n                        return tb.process(t, InHead);\n                    } else if (name.equals(\"body\")) {\n                        tb.error(this);\n                        ArrayList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else {\n                            tb.framesetOk(false);\n                            Element body = stack.get(1);\n                            for (Attribute attribute : startTag.getAttributes()) {\n                                if (!body.hasAttr(attribute.getKey()))\n                                    body.attributes().put(attribute);\n                            }\n                        }\n                    } else if (name.equals(\"frameset\")) {\n                        tb.error(this);\n                        ArrayList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else if (!tb.framesetOk()) {\n                            return false; // ignore frameset\n                        } else {\n                            Element second = stack.get(1);\n                            if (second.parent() != null)\n                                second.remove();\n                            // pop up to html element\n                            while (stack.size() > 1)\n                                stack.remove(stack.size()-1);\n                            tb.insert(startTag);\n                            tb.transition(InFrameset);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) {\n                            tb.error(this);\n                            tb.pop();\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        // todo: ignore LF if next token\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"form\")) {\n                        if (tb.getFormElement() != null) {\n                            tb.error(this);\n                            return false;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insertForm(startTag, true);\n                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                        tb.framesetOk(false);\n                        ArrayList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) {\n                                tb.processEndTag(el.nodeName());\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"plaintext\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out\n                    } else if (name.equals(\"button\")) {\n                        if (tb.inButtonScope(\"button\")) {\n                            // close and reprocess\n                            tb.error(this);\n                            tb.processEndTag(\"button\");\n                            tb.process(startTag);\n                        } else {\n                            tb.reconstructFormattingElements();\n                            tb.insert(startTag);\n                            tb.framesetOk(false);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Formatters)) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (name.equals(\"nobr\")) {\n                        tb.reconstructFormattingElements();\n                        if (tb.inScope(\"nobr\")) {\n                            tb.error(this);\n                            tb.processEndTag(\"nobr\");\n                            tb.reconstructFormattingElements();\n                        }\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.insertMarkerToFormattingElements();\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"table\")) {\n                        if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n                        tb.transition(InTable);\n                    } else if (name.equals(\"input\")) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insertEmpty(startTag);\n                        if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))\n                            tb.framesetOk(false);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) {\n                        tb.insertEmpty(startTag);\n                    } else if (name.equals(\"hr\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"image\")) {\n                        if (tb.getFromStack(\"svg\") == null)\n                            return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg\n                        else\n                            tb.insert(startTag);\n                    } else if (name.equals(\"isindex\")) {\n                        // how much do we care about the early 90s?\n                        tb.error(this);\n                        if (tb.getFormElement() != null)\n                            return false;\n\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                        tb.processStartTag(\"form\");\n                        if (startTag.attributes.hasKey(\"action\")) {\n                            Element form = tb.getFormElement();\n                            form.attr(\"action\", startTag.attributes.get(\"action\"));\n                        }\n                        tb.processStartTag(\"hr\");\n                        tb.processStartTag(\"label\");\n                        // hope you like english.\n                        String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";\n\n                        tb.process(new Token.Character().data(prompt));\n\n                        // input\n                        Attributes inputAttribs = new Attributes();\n                        for (Attribute attr : startTag.attributes) {\n                            if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))\n                                inputAttribs.put(attr);\n                        }\n                        inputAttribs.put(\"name\", \"isindex\");\n                        tb.processStartTag(\"input\", inputAttribs);\n                        tb.processEndTag(\"label\");\n                        tb.processStartTag(\"hr\");\n                        tb.processEndTag(\"form\");\n                    } else if (name.equals(\"textarea\")) {\n                        tb.insert(startTag);\n                        // todo: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n                        tb.tokeniser.transition(TokeniserState.Rcdata);\n                        tb.markInsertionMode();\n                        tb.framesetOk(false);\n                        tb.transition(Text);\n                    } else if (name.equals(\"xmp\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.reconstructFormattingElements();\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"iframe\")) {\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"noembed\")) {\n                        // also handle noscript if script enabled\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"select\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n\n                        HtmlTreeBuilderState state = tb.state();\n                        if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))\n                            tb.transition(InSelectInTable);\n                        else\n                            tb.transition(InSelect);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) {\n                        if (tb.inScope(\"ruby\")) {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n                                tb.error(this);\n                                tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name\n                            }\n                            tb.insert(startTag);\n                        }\n                    } else if (name.equals(\"math\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"math\" (i.e. foreign, mathml)\n                        tb.insert(startTag);\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                    } else if (name.equals(\"svg\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"svg\" (xlink, svg)\n                        tb.insert(startTag);\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    }\n                    break;\n\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.normalName();\n                    if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) {\n                        // Adoption Agency Algorithm.\n                        for (int i = 0; i < 8; i++) {\n                            Element formatEl = tb.getActiveFormattingElement(name);\n                            if (formatEl == null)\n                                return anyOtherEndTag(t, tb);\n                            else if (!tb.onStack(formatEl)) {\n                                tb.error(this);\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            } else if (!tb.inScope(formatEl.nodeName())) {\n                                tb.error(this);\n                                return false;\n                            } else if (tb.currentElement() != formatEl)\n                                tb.error(this);\n\n                            Element furthestBlock = null;\n                            Element commonAncestor = null;\n                            boolean seenFormattingElement = false;\n                            ArrayList<Element> stack = tb.getStack();\n                            // the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents\n                            // run-aways\n                            final int stackSize = stack.size();\n                            for (int si = 0; si < stackSize && si < 64; si++) {\n                                Element el = stack.get(si);\n                                if (el == formatEl) {\n                                    commonAncestor = stack.get(si - 1);\n                                    seenFormattingElement = true;\n                                } else if (seenFormattingElement && tb.isSpecial(el)) {\n                                    furthestBlock = el;\n                                    break;\n                                }\n                            }\n                            if (furthestBlock == null) {\n                                tb.popStackToClose(formatEl.nodeName());\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            }\n\n                            // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.\n                            // does that mean: int pos of format el in list?\n                            Element node = furthestBlock;\n                            Element lastNode = furthestBlock;\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue;\n                                } else if (node == formatEl)\n                                    break;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());\n                                // case will follow the original node (so honours ParseSettings)\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }\n\n                            if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                tb.insertInFosterParent(lastNode);\n                            } else {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                commonAncestor.appendChild(lastNode);\n                            }\n\n                            Element adopter = new Element(formatEl.tag(), tb.getBaseUri());\n                            adopter.attributes().addAll(formatEl.attributes());\n                            Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);\n                            for (Node childNode : childNodes) {\n                                adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod.\n                            }\n                            furthestBlock.appendChild(adopter);\n                            tb.removeFromActiveFormattingElements(formatEl);\n                            // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.\n                            tb.removeFromStack(formatEl);\n                            tb.insertOnStackAfter(furthestBlock, adopter);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) {\n                        if (!tb.inScope(name)) {\n                            // nothing to close\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"span\")) {\n                        // same as final fall through, but saves short circuit\n                        return anyOtherEndTag(t, tb);\n                    } else if (name.equals(\"li\")) {\n                        if (!tb.inListItemScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"body\")) {\n                        if (!tb.inScope(\"body\")) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            // todo: error if stack contains something not dd, dt, li, optgroup, option, p, rp, rt, tbody, td, tfoot, th, thead, tr, body, html\n                            tb.transition(AfterBody);\n                        }\n                    } else if (name.equals(\"html\")) {\n                        boolean notIgnored = tb.processEndTag(\"body\");\n                        if (notIgnored)\n                            return tb.process(endTag);\n                    } else if (name.equals(\"form\")) {\n                        Element currentForm = tb.getFormElement();\n                        tb.setFormElement(null);\n                        if (currentForm == null || !tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            // remove currentForm from stack. will shift anything under up.\n                            tb.removeFromStack(currentForm);\n                        }\n                    } else if (name.equals(\"p\")) {\n                        if (!tb.inButtonScope(name)) {\n                            tb.error(this);\n                            tb.processStartTag(name); // if no p to close, creates an empty <p></p>\n                            return tb.process(endTag);\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                        if (!tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                        if (!tb.inScope(Constants.Headings)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(Constants.Headings);\n                        }\n                    } else if (name.equals(\"sarcasm\")) {\n                        // *sigh*\n                        return anyOtherEndTag(t, tb);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                        if (!tb.inScope(\"name\")) {\n                            if (!tb.inScope(name)) {\n                                tb.error(this);\n                                return false;\n                            }\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                            tb.clearFormattingElementsToLastMarker();\n                        }\n                    } else if (name.equals(\"br\")) {\n                        tb.error(this);\n                        tb.processStartTag(\"br\");\n                        return false;\n                    } else {\n                        return anyOtherEndTag(t, tb);\n                    }\n\n                    break;\n                case EOF:\n                    // todo: error if stack contains something not dd, dt, li, p, tbody, td, tfoot, th, thead, tr, body, html\n                    // stop parsing\n                    break;\n            }",
      "info" : "SwitchStatement[10109-38395]:SwitchStatement[10127-38413]"
    }, {
      "left" : "case Character:",
      "right" : "case Character:",
      "info" : "SwitchCase[10143-10158]:SwitchCase[10161-10176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10159-10865]:Block[10177-10883]"
    }, {
      "left" : "Token.Character c = t.asCharacter();",
      "right" : "Token.Character c = t.asCharacter();",
      "info" : "VariableDeclarationStatement[10181-10217]:VariableDeclarationStatement[10199-10235]"
    }, {
      "left" : "if (c.getData().equals(nullString))",
      "right" : "if (c.getData().equals(nullString))",
      "info" : "IfStatement[10238-10820]:IfStatement[10256-10838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10274-10426]:Block[10292-10444]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[10351-10366]:ExpressionStatement[10369-10384]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10391-10404]:ReturnStatement[10409-10422]"
    }, {
      "left" : "if (tb.framesetOk() && isWhitespace(c))",
      "right" : "if (tb.framesetOk() && isWhitespace(c))",
      "info" : "IfStatement[10432-10820]:IfStatement[10450-10838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10472-10647]:Block[10490-10665]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[10552-10587]:ExpressionStatement[10570-10605]"
    }, {
      "left" : "tb.insert(c);",
      "right" : "tb.insert(c);",
      "info" : "ExpressionStatement[10612-10625]:ExpressionStatement[10630-10643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10653-10820]:Block[10671-10838]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[10679-10714]:ExpressionStatement[10697-10732]"
    }, {
      "left" : "tb.insert(c);",
      "right" : "tb.insert(c);",
      "info" : "ExpressionStatement[10739-10752]:ExpressionStatement[10757-10770]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[10777-10798]:ExpressionStatement[10795-10816]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10841-10847]:BreakStatement[10859-10865]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[10882-10895]:SwitchCase[10900-10913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10896-10988]:Block[10914-11006]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[10918-10943]:ExpressionStatement[10936-10961]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10964-10970]:BreakStatement[10982-10988]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[11005-11018]:SwitchCase[11023-11036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11019-11108]:Block[11037-11126]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[11041-11056]:ExpressionStatement[11059-11074]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11077-11090]:ReturnStatement[11095-11108]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[11125-11139]:SwitchCase[11143-11157]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[11160-11201]:VariableDeclarationStatement[11178-11219]"
    }, {
      "left" : "String name = startTag.normalName();",
      "right" : "String name = startTag.normalName();",
      "info" : "VariableDeclarationStatement[11222-11258]:VariableDeclarationStatement[11240-11276]"
    }, {
      "left" : "if (name.equals(\"a\"))",
      "right" : "if (name.equals(\"a\"))",
      "info" : "IfStatement[11279-26800]:IfStatement[11297-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11301-12046]:Block[11319-12064]"
    }, {
      "left" : "if (tb.getActiveFormattingElement(\"a\") != null)",
      "right" : "if (tb.getActiveFormattingElement(\"a\") != null)",
      "info" : "IfStatement[11327-11847]:IfStatement[11345-11865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11375-11847]:Block[11393-11865]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[11405-11420]:ExpressionStatement[11423-11438]"
    }, {
      "left" : "tb.processEndTag(\"a\");",
      "right" : "tb.processEndTag(\"a\");",
      "info" : "ExpressionStatement[11449-11471]:ExpressionStatement[11467-11489]"
    }, {
      "left" : "Element remainingA = tb.getFromStack(\"a\");",
      "right" : "Element remainingA = tb.getFromStack(\"a\");",
      "info" : "VariableDeclarationStatement[11548-11590]:VariableDeclarationStatement[11566-11608]"
    }, {
      "left" : "if (remainingA != null)",
      "right" : "if (remainingA != null)",
      "info" : "IfStatement[11619-11821]:IfStatement[11637-11839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11643-11821]:Block[11661-11839]"
    }, {
      "left" : "tb.removeFromActiveFormattingElements(remainingA);",
      "right" : "tb.removeFromActiveFormattingElements(remainingA);",
      "info" : "ExpressionStatement[11677-11727]:ExpressionStatement[11695-11745]"
    }, {
      "left" : "tb.removeFromStack(remainingA);",
      "right" : "tb.removeFromStack(remainingA);",
      "info" : "ExpressionStatement[11760-11791]:ExpressionStatement[11778-11809]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[11872-11907]:ExpressionStatement[11890-11925]"
    }, {
      "left" : "Element a = tb.insert(startTag);",
      "right" : "Element a = tb.insert(startTag);",
      "info" : "VariableDeclarationStatement[11932-11964]:VariableDeclarationStatement[11950-11982]"
    }, {
      "left" : "tb.pushActiveFormattingElements(a);",
      "right" : "tb.pushActiveFormattingElements(a);",
      "info" : "ExpressionStatement[11989-12024]:ExpressionStatement[12007-12042]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters))",
      "info" : "IfStatement[12052-26800]:IfStatement[12070-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12121-12300]:Block[12139-12318]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[12147-12182]:ExpressionStatement[12165-12200]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[12207-12232]:ExpressionStatement[12225-12250]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[12257-12278]:ExpressionStatement[12275-12296]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartPClosers))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartPClosers))",
      "info" : "IfStatement[12306-26800]:IfStatement[12324-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12368-12566]:Block[12386-12584]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[12394-12499]:IfStatement[12412-12517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12421-12499]:Block[12439-12517]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[12451-12473]:ExpressionStatement[12469-12491]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[12524-12544]:ExpressionStatement[12542-12562]"
    }, {
      "left" : "if (name.equals(\"span\"))",
      "right" : "if (name.equals(\"span\"))",
      "info" : "IfStatement[12572-26800]:IfStatement[12590-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12597-12806]:Block[12615-12824]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[12704-12739]:ExpressionStatement[12722-12757]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[12764-12784]:ExpressionStatement[12782-12802]"
    }, {
      "left" : "if (name.equals(\"li\"))",
      "right" : "if (name.equals(\"li\"))",
      "info" : "IfStatement[12812-26800]:IfStatement[12830-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12835-13643]:Block[12853-13661]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[12861-12882]:ExpressionStatement[12879-12900]"
    }, {
      "left" : "ArrayList<Element> stack = tb.getStack();",
      "right" : "ArrayList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[12907-12948]:VariableDeclarationStatement[12925-12966]"
    }, {
      "left" : "for (int i = stack.size() - 1; i > 0; i--)",
      "right" : "for (int i = stack.size() - 1; i > 0; i--)",
      "info" : "ForStatement[12973-13446]:ForStatement[12991-13464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13016-13446]:Block[13034-13464]"
    }, {
      "left" : "Element el = stack.get(i);",
      "right" : "Element el = stack.get(i);",
      "info" : "VariableDeclarationStatement[13046-13072]:VariableDeclarationStatement[13064-13090]"
    }, {
      "left" : "if (el.nodeName().equals(\"li\"))",
      "right" : "if (el.nodeName().equals(\"li\"))",
      "info" : "IfStatement[13101-13259]:IfStatement[13119-13277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13133-13259]:Block[13151-13277]"
    }, {
      "left" : "tb.processEndTag(\"li\");",
      "right" : "tb.processEndTag(\"li\");",
      "info" : "ExpressionStatement[13167-13190]:ExpressionStatement[13185-13208]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13223-13229]:BreakStatement[13241-13247]"
    }, {
      "left" : "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))",
      "right" : "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))",
      "info" : "IfStatement[13288-13420]:IfStatement[13306-13438]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13414-13420]:BreakStatement[13432-13438]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[13471-13576]:IfStatement[13489-13594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13498-13576]:Block[13516-13594]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[13528-13550]:ExpressionStatement[13546-13568]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[13601-13621]:ExpressionStatement[13619-13639]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[13649-26800]:IfStatement[13667-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13674-14095]:Block[13692-14113]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[13700-13715]:ExpressionStatement[13718-13733]"
    }, {
      "left" : "Element html = tb.getStack().get(0);",
      "right" : "Element html = tb.getStack().get(0);",
      "info" : "VariableDeclarationStatement[13799-13835]:VariableDeclarationStatement[13817-13853]"
    }, {
      "left" : "for (Attribute attribute : startTag.getAttributes())",
      "right" : "for (Attribute attribute : startTag.getAttributes())",
      "info" : "EnhancedForStatement[13860-14073]:EnhancedForStatement[13878-14091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13913-14073]:Block[13931-14091]"
    }, {
      "left" : "if (!html.hasAttr(attribute.getKey()))",
      "right" : "if (!html.hasAttr(attribute.getKey()))",
      "info" : "IfStatement[13943-14047]:IfStatement[13961-14065]"
    }, {
      "left" : "html.attributes().put(attribute);",
      "right" : "html.attributes().put(attribute);",
      "info" : "ExpressionStatement[14014-14047]:ExpressionStatement[14032-14065]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartToHead))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartToHead))",
      "info" : "IfStatement[14101-26800]:IfStatement[14119-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14161-14238]:Block[14179-14256]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[14187-14216]:ReturnStatement[14205-14234]"
    }, {
      "left" : "if (name.equals(\"body\"))",
      "right" : "if (name.equals(\"body\"))",
      "info" : "IfStatement[14244-26800]:IfStatement[14262-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14269-15037]:Block[14287-15055]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[14295-14310]:ExpressionStatement[14313-14328]"
    }, {
      "left" : "ArrayList<Element> stack = tb.getStack();",
      "right" : "ArrayList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[14335-14376]:VariableDeclarationStatement[14353-14394]"
    }, {
      "left" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
      "right" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
      "info" : "IfStatement[14401-15015]:IfStatement[14419-15033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14489-14621]:Block[14507-14639]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14572-14585]:ReturnStatement[14590-14603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14627-15015]:Block[14645-15033]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[14657-14678]:ExpressionStatement[14675-14696]"
    }, {
      "left" : "Element body = stack.get(1);",
      "right" : "Element body = stack.get(1);",
      "info" : "VariableDeclarationStatement[14707-14735]:VariableDeclarationStatement[14725-14753]"
    }, {
      "left" : "for (Attribute attribute : startTag.getAttributes())",
      "right" : "for (Attribute attribute : startTag.getAttributes())",
      "info" : "EnhancedForStatement[14764-14989]:EnhancedForStatement[14782-15007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14817-14989]:Block[14835-15007]"
    }, {
      "left" : "if (!body.hasAttr(attribute.getKey()))",
      "right" : "if (!body.hasAttr(attribute.getKey()))",
      "info" : "IfStatement[14851-14959]:IfStatement[14869-14977]"
    }, {
      "left" : "body.attributes().put(attribute);",
      "right" : "body.attributes().put(attribute);",
      "info" : "ExpressionStatement[14926-14959]:ExpressionStatement[14944-14977]"
    }, {
      "left" : "if (name.equals(\"frameset\"))",
      "right" : "if (name.equals(\"frameset\"))",
      "info" : "IfStatement[15043-26800]:IfStatement[15061-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15072-16033]:Block[15090-16051]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[15098-15113]:ExpressionStatement[15116-15131]"
    }, {
      "left" : "ArrayList<Element> stack = tb.getStack();",
      "right" : "ArrayList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[15138-15179]:VariableDeclarationStatement[15156-15197]"
    }, {
      "left" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
      "right" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
      "info" : "IfStatement[15204-16011]:IfStatement[15222-16029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15292-15424]:Block[15310-15442]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15375-15388]:ReturnStatement[15393-15406]"
    }, {
      "left" : "if (!tb.framesetOk())",
      "right" : "if (!tb.framesetOk())",
      "info" : "IfStatement[15430-16011]:IfStatement[15448-16029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15452-15540]:Block[15470-15558]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15482-15495]:ReturnStatement[15500-15513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15546-16011]:Block[15564-16029]"
    }, {
      "left" : "Element second = stack.get(1);",
      "right" : "Element second = stack.get(1);",
      "info" : "VariableDeclarationStatement[15576-15606]:VariableDeclarationStatement[15594-15624]"
    }, {
      "left" : "if (second.parent() != null)",
      "right" : "if (second.parent() != null)",
      "info" : "IfStatement[15635-15712]:IfStatement[15653-15730]"
    }, {
      "left" : "second.remove();",
      "right" : "second.remove();",
      "info" : "ExpressionStatement[15696-15712]:ExpressionStatement[15714-15730]"
    }, {
      "left" : "while (stack.size() > 1)\n                                stack.remove(stack.size()-1);",
      "right" : "while (stack.size() > 1)\n                                stack.remove(stack.size()-1);",
      "info" : "WhileStatement[15795-15881]:WhileStatement[15813-15899]"
    }, {
      "left" : "stack.remove(stack.size()-1);",
      "right" : "stack.remove(stack.size()-1);",
      "info" : "ExpressionStatement[15852-15881]:ExpressionStatement[15870-15899]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[15910-15930]:ExpressionStatement[15928-15948]"
    }, {
      "left" : "tb.transition(InFrameset);",
      "right" : "tb.transition(InFrameset);",
      "info" : "ExpressionStatement[15959-15985]:ExpressionStatement[15977-16003]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.Headings))",
      "right" : "if (StringUtil.inSorted(name, Constants.Headings))",
      "info" : "IfStatement[16039-26800]:IfStatement[16057-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16090-16499]:Block[16108-16517]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[16116-16221]:IfStatement[16134-16239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16143-16221]:Block[16161-16239]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[16173-16195]:ExpressionStatement[16191-16213]"
    }, {
      "left" : "if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings))",
      "right" : "if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings))",
      "info" : "IfStatement[16246-16432]:IfStatement[16264-16450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16323-16432]:Block[16341-16450]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[16353-16368]:ExpressionStatement[16371-16386]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[16397-16406]:ExpressionStatement[16415-16424]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[16457-16477]:ExpressionStatement[16475-16495]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartPreListing))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartPreListing))",
      "info" : "IfStatement[16505-26800]:IfStatement[16523-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16569-16870]:Block[16587-16888]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[16595-16700]:IfStatement[16613-16718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16622-16700]:Block[16640-16718]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[16652-16674]:ExpressionStatement[16670-16692]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[16725-16745]:ExpressionStatement[16743-16763]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[16827-16848]:ExpressionStatement[16845-16866]"
    }, {
      "left" : "if (name.equals(\"form\"))",
      "right" : "if (name.equals(\"form\"))",
      "info" : "IfStatement[16876-26800]:IfStatement[16894-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16901-17280]:Block[16919-17298]"
    }, {
      "left" : "if (tb.getFormElement() != null)",
      "right" : "if (tb.getFormElement() != null)",
      "info" : "IfStatement[16927-17073]:IfStatement[16945-17091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16960-17073]:Block[16978-17091]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[16990-17005]:ExpressionStatement[17008-17023]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17034-17047]:ReturnStatement[17052-17065]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[17098-17203]:IfStatement[17116-17221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17125-17203]:Block[17143-17221]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[17155-17177]:ExpressionStatement[17173-17195]"
    }, {
      "left" : "tb.insertForm(startTag, true);",
      "right" : "tb.insertForm(startTag, true);",
      "info" : "ExpressionStatement[17228-17258]:ExpressionStatement[17246-17276]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.DdDt))",
      "right" : "if (StringUtil.inSorted(name, Constants.DdDt))",
      "info" : "IfStatement[17286-26800]:IfStatement[17304-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17333-18174]:Block[17351-18192]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[17359-17380]:ExpressionStatement[17377-17398]"
    }, {
      "left" : "ArrayList<Element> stack = tb.getStack();",
      "right" : "ArrayList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[17405-17446]:VariableDeclarationStatement[17423-17464]"
    }, {
      "left" : "for (int i = stack.size() - 1; i > 0; i--)",
      "right" : "for (int i = stack.size() - 1; i > 0; i--)",
      "info" : "ForStatement[17471-17977]:ForStatement[17489-17995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17514-17977]:Block[17532-17995]"
    }, {
      "left" : "Element el = stack.get(i);",
      "right" : "Element el = stack.get(i);",
      "info" : "VariableDeclarationStatement[17544-17570]:VariableDeclarationStatement[17562-17588]"
    }, {
      "left" : "if (StringUtil.inSorted(el.nodeName(), Constants.DdDt))",
      "right" : "if (StringUtil.inSorted(el.nodeName(), Constants.DdDt))",
      "info" : "IfStatement[17599-17790]:IfStatement[17617-17808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17655-17790]:Block[17673-17808]"
    }, {
      "left" : "tb.processEndTag(el.nodeName());",
      "right" : "tb.processEndTag(el.nodeName());",
      "info" : "ExpressionStatement[17689-17721]:ExpressionStatement[17707-17739]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17754-17760]:BreakStatement[17772-17778]"
    }, {
      "left" : "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))",
      "right" : "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))",
      "info" : "IfStatement[17819-17951]:IfStatement[17837-17969]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17945-17951]:BreakStatement[17963-17969]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[18002-18107]:IfStatement[18020-18125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18029-18107]:Block[18047-18125]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[18059-18081]:ExpressionStatement[18077-18099]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[18132-18152]:ExpressionStatement[18150-18170]"
    }, {
      "left" : "if (name.equals(\"plaintext\"))",
      "right" : "if (name.equals(\"plaintext\"))",
      "info" : "IfStatement[18180-26800]:IfStatement[18198-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18210-18510]:Block[18228-18528]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[18236-18341]:IfStatement[18254-18359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18263-18341]:Block[18281-18359]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[18293-18315]:ExpressionStatement[18311-18333]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[18366-18386]:ExpressionStatement[18384-18404]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.PLAINTEXT);",
      "right" : "tb.tokeniser.transition(TokeniserState.PLAINTEXT);",
      "info" : "ExpressionStatement[18411-18461]:ExpressionStatement[18429-18479]"
    }, {
      "left" : "if (name.equals(\"button\"))",
      "right" : "if (name.equals(\"button\"))",
      "info" : "IfStatement[18516-26800]:IfStatement[18534-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18543-19047]:Block[18561-19065]"
    }, {
      "left" : "if (tb.inButtonScope(\"button\"))",
      "right" : "if (tb.inButtonScope(\"button\"))",
      "info" : "IfStatement[18569-19025]:IfStatement[18587-19043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18601-18829]:Block[18619-18847]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[18682-18697]:ExpressionStatement[18700-18715]"
    }, {
      "left" : "tb.processEndTag(\"button\");",
      "right" : "tb.processEndTag(\"button\");",
      "info" : "ExpressionStatement[18726-18753]:ExpressionStatement[18744-18771]"
    }, {
      "left" : "tb.process(startTag);",
      "right" : "tb.process(startTag);",
      "info" : "ExpressionStatement[18782-18803]:ExpressionStatement[18800-18821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18835-19025]:Block[18853-19043]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[18865-18900]:ExpressionStatement[18883-18918]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[18929-18949]:ExpressionStatement[18947-18967]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[18978-18999]:ExpressionStatement[18996-19017]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.Formatters))",
      "right" : "if (StringUtil.inSorted(name, Constants.Formatters))",
      "info" : "IfStatement[19053-26800]:IfStatement[19071-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19106-19308]:Block[19124-19326]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[19132-19167]:ExpressionStatement[19150-19185]"
    }, {
      "left" : "Element el = tb.insert(startTag);",
      "right" : "Element el = tb.insert(startTag);",
      "info" : "VariableDeclarationStatement[19192-19225]:VariableDeclarationStatement[19210-19243]"
    }, {
      "left" : "tb.pushActiveFormattingElements(el);",
      "right" : "tb.pushActiveFormattingElements(el);",
      "info" : "ExpressionStatement[19250-19286]:ExpressionStatement[19268-19304]"
    }, {
      "left" : "if (name.equals(\"nobr\"))",
      "right" : "if (name.equals(\"nobr\"))",
      "info" : "IfStatement[19314-26800]:IfStatement[19332-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19339-19779]:Block[19357-19797]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[19365-19400]:ExpressionStatement[19383-19418]"
    }, {
      "left" : "if (tb.inScope(\"nobr\"))",
      "right" : "if (tb.inScope(\"nobr\"))",
      "info" : "IfStatement[19425-19638]:IfStatement[19443-19656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19449-19638]:Block[19467-19656]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[19479-19494]:ExpressionStatement[19497-19512]"
    }, {
      "left" : "tb.processEndTag(\"nobr\");",
      "right" : "tb.processEndTag(\"nobr\");",
      "info" : "ExpressionStatement[19523-19548]:ExpressionStatement[19541-19566]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[19577-19612]:ExpressionStatement[19595-19630]"
    }, {
      "left" : "Element el = tb.insert(startTag);",
      "right" : "Element el = tb.insert(startTag);",
      "info" : "VariableDeclarationStatement[19663-19696]:VariableDeclarationStatement[19681-19714]"
    }, {
      "left" : "tb.pushActiveFormattingElements(el);",
      "right" : "tb.pushActiveFormattingElements(el);",
      "info" : "ExpressionStatement[19721-19757]:ExpressionStatement[19739-19775]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartApplets))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartApplets))",
      "info" : "IfStatement[19785-26800]:IfStatement[19803-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19846-20083]:Block[19864-20101]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[19872-19907]:ExpressionStatement[19890-19925]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[19932-19952]:ExpressionStatement[19950-19970]"
    }, {
      "left" : "tb.insertMarkerToFormattingElements();",
      "right" : "tb.insertMarkerToFormattingElements();",
      "info" : "ExpressionStatement[19977-20015]:ExpressionStatement[19995-20033]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[20040-20061]:ExpressionStatement[20058-20079]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[20089-26800]:IfStatement[20107-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20115-20470]:Block[20133-20488]"
    }, {
      "left" : "if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\"))",
      "right" : "if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[20141-20309]:IfStatement[20159-20327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20231-20309]:Block[20249-20327]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[20261-20283]:ExpressionStatement[20279-20301]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[20334-20354]:ExpressionStatement[20352-20372]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[20379-20400]:ExpressionStatement[20397-20418]"
    }, {
      "left" : "tb.transition(InTable);",
      "right" : "tb.transition(InTable);",
      "info" : "ExpressionStatement[20425-20448]:ExpressionStatement[20443-20466]"
    }, {
      "left" : "if (name.equals(\"input\"))",
      "right" : "if (name.equals(\"input\"))",
      "info" : "IfStatement[20476-26800]:IfStatement[20494-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20502-20771]:Block[20520-20789]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[20528-20563]:ExpressionStatement[20546-20581]"
    }, {
      "left" : "Element el = tb.insertEmpty(startTag);",
      "right" : "Element el = tb.insertEmpty(startTag);",
      "info" : "VariableDeclarationStatement[20588-20626]:VariableDeclarationStatement[20606-20644]"
    }, {
      "left" : "if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))",
      "right" : "if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))",
      "info" : "IfStatement[20651-20749]:IfStatement[20669-20767]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[20728-20749]:ExpressionStatement[20746-20767]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartMedia))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartMedia))",
      "info" : "IfStatement[20777-26800]:IfStatement[20795-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20836-20909]:Block[20854-20927]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[20862-20887]:ExpressionStatement[20880-20905]"
    }, {
      "left" : "if (name.equals(\"hr\"))",
      "right" : "if (name.equals(\"hr\"))",
      "info" : "IfStatement[20915-26800]:IfStatement[20933-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20938-21187]:Block[20956-21205]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[20964-21069]:IfStatement[20982-21087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20991-21069]:Block[21009-21087]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[21021-21043]:ExpressionStatement[21039-21061]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[21094-21119]:ExpressionStatement[21112-21137]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[21144-21165]:ExpressionStatement[21162-21183]"
    }, {
      "left" : "if (name.equals(\"image\"))",
      "right" : "if (name.equals(\"image\"))",
      "info" : "IfStatement[21193-26800]:IfStatement[21211-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21219-21491]:Block[21237-21509]"
    }, {
      "left" : "if (tb.getFromStack(\"svg\") == null)",
      "right" : "if (tb.getFromStack(\"svg\") == null)",
      "info" : "IfStatement[21245-21469]:IfStatement[21263-21487]"
    }, {
      "left" : "return tb.process(startTag.name(\"img\"));",
      "right" : "return tb.process(startTag.name(\"img\"));",
      "info" : "ReturnStatement[21309-21349]:ReturnStatement[21327-21367]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[21449-21469]:ExpressionStatement[21467-21487]"
    }, {
      "left" : "if (name.equals(\"isindex\"))",
      "right" : "if (name.equals(\"isindex\"))",
      "info" : "IfStatement[21497-26800]:IfStatement[21515-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21525-23213]:Block[21543-23231]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[21619-21634]:ExpressionStatement[21637-21652]"
    }, {
      "left" : "if (tb.getFormElement() != null)",
      "right" : "if (tb.getFormElement() != null)",
      "info" : "IfStatement[21659-21733]:IfStatement[21677-21751]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21720-21733]:ReturnStatement[21738-21751]"
    }, {
      "left" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
      "right" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
      "info" : "ExpressionStatement[21759-21801]:ExpressionStatement[21777-21819]"
    }, {
      "left" : "tb.processStartTag(\"form\");",
      "right" : "tb.processStartTag(\"form\");",
      "info" : "ExpressionStatement[21826-21853]:ExpressionStatement[21844-21871]"
    }, {
      "left" : "if (startTag.attributes.hasKey(\"action\"))",
      "right" : "if (startTag.attributes.hasKey(\"action\"))",
      "info" : "IfStatement[21878-22095]:IfStatement[21896-22113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21920-22095]:Block[21938-22113]"
    }, {
      "left" : "Element form = tb.getFormElement();",
      "right" : "Element form = tb.getFormElement();",
      "info" : "VariableDeclarationStatement[21950-21985]:VariableDeclarationStatement[21968-22003]"
    }, {
      "left" : "form.attr(\"action\", startTag.attributes.get(\"action\"));",
      "right" : "form.attr(\"action\", startTag.attributes.get(\"action\"));",
      "info" : "ExpressionStatement[22014-22069]:ExpressionStatement[22032-22087]"
    }, {
      "left" : "tb.processStartTag(\"hr\");",
      "right" : "tb.processStartTag(\"hr\");",
      "info" : "ExpressionStatement[22120-22145]:ExpressionStatement[22138-22163]"
    }, {
      "left" : "tb.processStartTag(\"label\");",
      "right" : "tb.processStartTag(\"label\");",
      "info" : "ExpressionStatement[22170-22198]:ExpressionStatement[22188-22216]"
    }, {
      "left" : "String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";",
      "right" : "String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";",
      "info" : "VariableDeclarationStatement[22273-22482]:VariableDeclarationStatement[22291-22500]"
    }, {
      "left" : "tb.process(new Token.Character().data(prompt));",
      "right" : "tb.process(new Token.Character().data(prompt));",
      "info" : "ExpressionStatement[22508-22555]:ExpressionStatement[22526-22573]"
    }, {
      "left" : "Attributes inputAttribs = new Attributes();",
      "right" : "Attributes inputAttribs = new Attributes();",
      "info" : "VariableDeclarationStatement[22614-22657]:VariableDeclarationStatement[22632-22675]"
    }, {
      "left" : "for (Attribute attr : startTag.attributes)",
      "right" : "for (Attribute attr : startTag.attributes)",
      "info" : "EnhancedForStatement[22682-22912]:EnhancedForStatement[22700-22930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22725-22912]:Block[22743-22930]"
    }, {
      "left" : "if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))",
      "right" : "if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))",
      "info" : "IfStatement[22755-22886]:IfStatement[22773-22904]"
    }, {
      "left" : "inputAttribs.put(attr);",
      "right" : "inputAttribs.put(attr);",
      "info" : "ExpressionStatement[22863-22886]:ExpressionStatement[22881-22904]"
    }, {
      "left" : "inputAttribs.put(\"name\", \"isindex\");",
      "right" : "inputAttribs.put(\"name\", \"isindex\");",
      "info" : "ExpressionStatement[22937-22973]:ExpressionStatement[22955-22991]"
    }, {
      "left" : "tb.processStartTag(\"input\", inputAttribs);",
      "right" : "tb.processStartTag(\"input\", inputAttribs);",
      "info" : "ExpressionStatement[22998-23040]:ExpressionStatement[23016-23058]"
    }, {
      "left" : "tb.processEndTag(\"label\");",
      "right" : "tb.processEndTag(\"label\");",
      "info" : "ExpressionStatement[23065-23091]:ExpressionStatement[23083-23109]"
    }, {
      "left" : "tb.processStartTag(\"hr\");",
      "right" : "tb.processStartTag(\"hr\");",
      "info" : "ExpressionStatement[23116-23141]:ExpressionStatement[23134-23159]"
    }, {
      "left" : "tb.processEndTag(\"form\");",
      "right" : "tb.processEndTag(\"form\");",
      "info" : "ExpressionStatement[23166-23191]:ExpressionStatement[23184-23209]"
    }, {
      "left" : "if (name.equals(\"textarea\"))",
      "right" : "if (name.equals(\"textarea\"))",
      "info" : "IfStatement[23219-26800]:IfStatement[23237-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23248-23760]:Block[23266-23778]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[23274-23294]:ExpressionStatement[23292-23312]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "right" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "info" : "ExpressionStatement[23552-23599]:ExpressionStatement[23570-23617]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[23624-23647]:ExpressionStatement[23642-23665]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[23672-23693]:ExpressionStatement[23690-23711]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[23718-23738]:ExpressionStatement[23736-23756]"
    }, {
      "left" : "if (name.equals(\"xmp\"))",
      "right" : "if (name.equals(\"xmp\"))",
      "info" : "IfStatement[23766-26800]:IfStatement[23784-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23790-24102]:Block[23808-24120]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[23816-23921]:IfStatement[23834-23939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23843-23921]:Block[23861-23939]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[23873-23895]:ExpressionStatement[23891-23913]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[23946-23981]:ExpressionStatement[23964-23999]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[24006-24027]:ExpressionStatement[24024-24045]"
    }, {
      "left" : "handleRawtext(startTag, tb);",
      "right" : "handleRawtext(startTag, tb);",
      "info" : "ExpressionStatement[24052-24080]:ExpressionStatement[24070-24098]"
    }, {
      "left" : "if (name.equals(\"iframe\"))",
      "right" : "if (name.equals(\"iframe\"))",
      "info" : "IfStatement[24108-26800]:IfStatement[24126-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24135-24257]:Block[24153-24275]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[24161-24182]:ExpressionStatement[24179-24200]"
    }, {
      "left" : "handleRawtext(startTag, tb);",
      "right" : "handleRawtext(startTag, tb);",
      "info" : "ExpressionStatement[24207-24235]:ExpressionStatement[24225-24253]"
    }, {
      "left" : "if (name.equals(\"noembed\"))",
      "right" : "if (name.equals(\"noembed\"))",
      "info" : "IfStatement[24263-26800]:IfStatement[24281-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24291-24433]:Block[24309-24451]"
    }, {
      "left" : "handleRawtext(startTag, tb);",
      "right" : "handleRawtext(startTag, tb);",
      "info" : "ExpressionStatement[24383-24411]:ExpressionStatement[24401-24429]"
    }, {
      "left" : "if (name.equals(\"select\"))",
      "right" : "if (name.equals(\"select\"))",
      "info" : "IfStatement[24439-26800]:IfStatement[24457-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24466-25002]:Block[24484-25020]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[24492-24527]:ExpressionStatement[24510-24545]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[24552-24572]:ExpressionStatement[24570-24590]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[24597-24618]:ExpressionStatement[24615-24636]"
    }, {
      "left" : "HtmlTreeBuilderState state = tb.state();",
      "right" : "HtmlTreeBuilderState state = tb.state();",
      "info" : "VariableDeclarationStatement[24644-24684]:VariableDeclarationStatement[24662-24702]"
    }, {
      "left" : "if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))",
      "right" : "if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))",
      "info" : "IfStatement[24709-24980]:IfStatement[24727-24998]"
    }, {
      "left" : "tb.transition(InSelectInTable);",
      "right" : "tb.transition(InSelectInTable);",
      "info" : "ExpressionStatement[24867-24898]:ExpressionStatement[24885-24916]"
    }, {
      "left" : "tb.transition(InSelect);",
      "right" : "tb.transition(InSelect);",
      "info" : "ExpressionStatement[24956-24980]:ExpressionStatement[24974-24998]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartOptions))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartOptions))",
      "info" : "IfStatement[25008-26800]:IfStatement[25026-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25069-25330]:Block[25087-25348]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "info" : "IfStatement[25095-25203]:IfStatement[25113-25221]"
    }, {
      "left" : "tb.processEndTag(\"option\");",
      "right" : "tb.processEndTag(\"option\");",
      "info" : "ExpressionStatement[25176-25203]:ExpressionStatement[25194-25221]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[25228-25263]:ExpressionStatement[25246-25281]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[25288-25308]:ExpressionStatement[25306-25326]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartRuby))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartRuby))",
      "info" : "IfStatement[25336-26800]:IfStatement[25354-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25394-25861]:Block[25412-25879]"
    }, {
      "left" : "if (tb.inScope(\"ruby\"))",
      "right" : "if (tb.inScope(\"ruby\"))",
      "info" : "IfStatement[25420-25839]:IfStatement[25438-25857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25444-25839]:Block[25462-25857]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[25474-25502]:ExpressionStatement[25492-25520]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(\"ruby\"))",
      "right" : "if (!tb.currentElement().nodeName().equals(\"ruby\"))",
      "info" : "IfStatement[25531-25764]:IfStatement[25549-25782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25583-25764]:Block[25601-25782]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[25617-25632]:ExpressionStatement[25635-25650]"
    }, {
      "left" : "tb.popStackToBefore(\"ruby\");",
      "right" : "tb.popStackToBefore(\"ruby\");",
      "info" : "ExpressionStatement[25665-25693]:ExpressionStatement[25683-25711]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[25793-25813]:ExpressionStatement[25811-25831]"
    }, {
      "left" : "if (name.equals(\"math\"))",
      "right" : "if (name.equals(\"math\"))",
      "info" : "IfStatement[25867-26800]:IfStatement[25885-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25892-26187]:Block[25910-26205]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[25918-25953]:ExpressionStatement[25936-25971]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[26078-26098]:ExpressionStatement[26096-26116]"
    }, {
      "left" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
      "right" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
      "info" : "ExpressionStatement[26123-26165]:ExpressionStatement[26141-26183]"
    }, {
      "left" : "if (name.equals(\"svg\"))",
      "right" : "if (name.equals(\"svg\"))",
      "info" : "IfStatement[26193-26800]:IfStatement[26211-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26217-26501]:Block[26235-26519]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[26243-26278]:ExpressionStatement[26261-26296]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[26392-26412]:ExpressionStatement[26410-26430]"
    }, {
      "left" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
      "right" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
      "info" : "ExpressionStatement[26437-26479]:ExpressionStatement[26455-26497]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartDrop))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartDrop))",
      "info" : "IfStatement[26507-26800]:IfStatement[26525-26818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26565-26666]:Block[26583-26684]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[26591-26606]:ExpressionStatement[26609-26624]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26631-26644]:ReturnStatement[26649-26662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26672-26800]:Block[26690-26818]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[26698-26733]:ExpressionStatement[26716-26751]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[26758-26778]:ExpressionStatement[26776-26796]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26821-26827]:BreakStatement[26839-26845]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[26845-26857]:SwitchCase[26863-26875]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[26878-26913]:VariableDeclarationStatement[26896-26931]"
    }, {
      "left" : "name = endTag.normalName();",
      "right" : "name = endTag.normalName();",
      "info" : "ExpressionStatement[26934-26961]:ExpressionStatement[26952-26979]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters))",
      "info" : "IfStatement[26982-38138]:IfStatement[27000-38156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27052-32764]:Block[27070-32782]"
    }, {
      "left" : "for (int i = 0; i < 8; i++)",
      "right" : "for (int i = 0; i < 8; i++)",
      "info" : "ForStatement[27132-32742]:ForStatement[27150-32760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27160-32742]:Block[27178-32760]"
    }, {
      "left" : "Element formatEl = tb.getActiveFormattingElement(name);",
      "right" : "Element formatEl = tb.getActiveFormattingElement(name);",
      "info" : "VariableDeclarationStatement[27190-27245]:VariableDeclarationStatement[27208-27263]"
    }, {
      "left" : "if (formatEl == null)",
      "right" : "if (formatEl == null)",
      "info" : "IfStatement[27274-27882]:IfStatement[27292-27900]"
    }, {
      "left" : "return anyOtherEndTag(t, tb);",
      "right" : "return anyOtherEndTag(t, tb);",
      "info" : "ReturnStatement[27328-27357]:ReturnStatement[27346-27375]"
    }, {
      "left" : "if (!tb.onStack(formatEl))",
      "right" : "if (!tb.onStack(formatEl))",
      "info" : "IfStatement[27391-27882]:IfStatement[27409-27900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27418-27623]:Block[27436-27641]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[27452-27467]:ExpressionStatement[27470-27485]"
    }, {
      "left" : "tb.removeFromActiveFormattingElements(formatEl);",
      "right" : "tb.removeFromActiveFormattingElements(formatEl);",
      "info" : "ExpressionStatement[27500-27548]:ExpressionStatement[27518-27566]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[27581-27593]:ReturnStatement[27599-27611]"
    }, {
      "left" : "if (!tb.inScope(formatEl.nodeName()))",
      "right" : "if (!tb.inScope(formatEl.nodeName()))",
      "info" : "IfStatement[27629-27882]:IfStatement[27647-27900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27667-27792]:Block[27685-27810]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[27701-27716]:ExpressionStatement[27719-27734]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27749-27762]:ReturnStatement[27767-27780]"
    }, {
      "left" : "if (tb.currentElement() != formatEl)",
      "right" : "if (tb.currentElement() != formatEl)",
      "info" : "IfStatement[27798-27882]:IfStatement[27816-27900]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[27867-27882]:ExpressionStatement[27885-27900]"
    }, {
      "left" : "Element furthestBlock = null;",
      "right" : "Element furthestBlock = null;",
      "info" : "VariableDeclarationStatement[27912-27941]:VariableDeclarationStatement[27930-27959]"
    }, {
      "left" : "Element commonAncestor = null;",
      "right" : "Element commonAncestor = null;",
      "info" : "VariableDeclarationStatement[27970-28000]:VariableDeclarationStatement[27988-28018]"
    }, {
      "left" : "boolean seenFormattingElement = false;",
      "right" : "boolean seenFormattingElement = false;",
      "info" : "VariableDeclarationStatement[28029-28067]:VariableDeclarationStatement[28047-28085]"
    }, {
      "left" : "ArrayList<Element> stack = tb.getStack();",
      "right" : "ArrayList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[28096-28137]:VariableDeclarationStatement[28114-28155]"
    }, {
      "left" : "final int stackSize = stack.size();",
      "right" : "final int stackSize = stack.size();",
      "info" : "VariableDeclarationStatement[28328-28363]:VariableDeclarationStatement[28346-28381]"
    }, {
      "left" : "for (int si = 0; si < stackSize && si < 64; si++)",
      "right" : "for (int si = 0; si < stackSize && si < 64; si++)",
      "info" : "ForStatement[28392-28946]:ForStatement[28410-28964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28442-28946]:Block[28460-28964]"
    }, {
      "left" : "Element el = stack.get(si);",
      "right" : "Element el = stack.get(si);",
      "info" : "VariableDeclarationStatement[28476-28503]:VariableDeclarationStatement[28494-28521]"
    }, {
      "left" : "if (el == formatEl)",
      "right" : "if (el == formatEl)",
      "info" : "IfStatement[28536-28916]:IfStatement[28554-28934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28556-28729]:Block[28574-28747]"
    }, {
      "left" : "commonAncestor = stack.get(si - 1);",
      "right" : "commonAncestor = stack.get(si - 1);",
      "info" : "ExpressionStatement[28594-28629]:ExpressionStatement[28612-28647]"
    }, {
      "left" : "seenFormattingElement = true;",
      "right" : "seenFormattingElement = true;",
      "info" : "ExpressionStatement[28666-28695]:ExpressionStatement[28684-28713]"
    }, {
      "left" : "if (seenFormattingElement && tb.isSpecial(el))",
      "right" : "if (seenFormattingElement && tb.isSpecial(el))",
      "info" : "IfStatement[28735-28916]:IfStatement[28753-28934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28782-28916]:Block[28800-28934]"
    }, {
      "left" : "furthestBlock = el;",
      "right" : "furthestBlock = el;",
      "info" : "ExpressionStatement[28820-28839]:ExpressionStatement[28838-28857]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28876-28882]:BreakStatement[28894-28900]"
    }, {
      "left" : "if (furthestBlock == null)",
      "right" : "if (furthestBlock == null)",
      "info" : "IfStatement[28975-29232]:IfStatement[28993-29250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29002-29232]:Block[29020-29250]"
    }, {
      "left" : "tb.popStackToClose(formatEl.nodeName());",
      "right" : "tb.popStackToClose(formatEl.nodeName());",
      "info" : "ExpressionStatement[29036-29076]:ExpressionStatement[29054-29094]"
    }, {
      "left" : "tb.removeFromActiveFormattingElements(formatEl);",
      "right" : "tb.removeFromActiveFormattingElements(formatEl);",
      "info" : "ExpressionStatement[29109-29157]:ExpressionStatement[29127-29175]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29190-29202]:ReturnStatement[29208-29220]"
    }, {
      "left" : "Element node = furthestBlock;",
      "right" : "Element node = furthestBlock;",
      "info" : "VariableDeclarationStatement[29536-29565]:VariableDeclarationStatement[29554-29583]"
    }, {
      "left" : "Element lastNode = furthestBlock;",
      "right" : "Element lastNode = furthestBlock;",
      "info" : "VariableDeclarationStatement[29594-29627]:VariableDeclarationStatement[29612-29645]"
    }, {
      "left" : "for (int j = 0; j < 3; j++)",
      "right" : "for (int j = 0; j < 3; j++)",
      "info" : "ForStatement[29656-31213]:ForStatement[29674-31231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29684-31213]:Block[29702-31231]"
    }, {
      "left" : "if (tb.onStack(node))",
      "right" : "if (tb.onStack(node))",
      "info" : "IfStatement[29718-29805]:IfStatement[29736-29823]"
    }, {
      "left" : "node = tb.aboveOnStack(node);",
      "right" : "node = tb.aboveOnStack(node);",
      "info" : "ExpressionStatement[29776-29805]:ExpressionStatement[29794-29823]"
    }, {
      "left" : "if (!tb.isInActiveFormattingElements(node))",
      "right" : "if (!tb.isInActiveFormattingElements(node))",
      "info" : "IfStatement[29838-30121]:IfStatement[29856-30139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29882-30051]:Block[29900-30069]"
    }, {
      "left" : "tb.removeFromStack(node);",
      "right" : "tb.removeFromStack(node);",
      "info" : "ExpressionStatement[29946-29971]:ExpressionStatement[29964-29989]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[30008-30017]:ContinueStatement[30026-30035]"
    }, {
      "left" : "if (node == formatEl)",
      "right" : "if (node == formatEl)",
      "info" : "IfStatement[30057-30121]:IfStatement[30075-30139]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30115-30121]:BreakStatement[30133-30139]"
    }, {
      "left" : "Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());",
      "right" : "Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());",
      "info" : "VariableDeclarationStatement[30155-30264]:VariableDeclarationStatement[30173-30282]"
    }, {
      "left" : "tb.replaceActiveFormattingElement(node, replacement);",
      "right" : "tb.replaceActiveFormattingElement(node, replacement);",
      "info" : "ExpressionStatement[30394-30447]:ExpressionStatement[30412-30465]"
    }, {
      "left" : "tb.replaceOnStack(node, replacement);",
      "right" : "tb.replaceOnStack(node, replacement);",
      "info" : "ExpressionStatement[30480-30517]:ExpressionStatement[30498-30535]"
    }, {
      "left" : "node = replacement;",
      "right" : "node = replacement;",
      "info" : "ExpressionStatement[30550-30569]:ExpressionStatement[30568-30587]"
    }, {
      "left" : "if (lastNode == furthestBlock)",
      "right" : "if (lastNode == furthestBlock)",
      "info" : "IfStatement[30603-30955]:IfStatement[30621-30973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30634-30955]:Block[30652-30973]"
    }, {
      "left" : "if (lastNode.parent() != null)",
      "right" : "if (lastNode.parent() != null)",
      "info" : "IfStatement[30988-31073]:IfStatement[31006-31091]"
    }, {
      "left" : "lastNode.remove();",
      "right" : "lastNode.remove();",
      "info" : "ExpressionStatement[31055-31073]:ExpressionStatement[31073-31091]"
    }, {
      "left" : "node.appendChild(lastNode);",
      "right" : "node.appendChild(lastNode);",
      "info" : "ExpressionStatement[31106-31133]:ExpressionStatement[31124-31151]"
    }, {
      "left" : "lastNode = node;",
      "right" : "lastNode = node;",
      "info" : "ExpressionStatement[31167-31183]:ExpressionStatement[31185-31201]"
    }, {
      "left" : "if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters))",
      "right" : "if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters))",
      "info" : "IfStatement[31243-31769]:IfStatement[31261-31787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31328-31544]:Block[31346-31562]"
    }, {
      "left" : "if (lastNode.parent() != null)",
      "right" : "if (lastNode.parent() != null)",
      "info" : "IfStatement[31362-31447]:IfStatement[31380-31465]"
    }, {
      "left" : "lastNode.remove();",
      "right" : "lastNode.remove();",
      "info" : "ExpressionStatement[31429-31447]:ExpressionStatement[31447-31465]"
    }, {
      "left" : "tb.insertInFosterParent(lastNode);",
      "right" : "tb.insertInFosterParent(lastNode);",
      "info" : "ExpressionStatement[31480-31514]:ExpressionStatement[31498-31532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31550-31769]:Block[31568-31787]"
    }, {
      "left" : "if (lastNode.parent() != null)",
      "right" : "if (lastNode.parent() != null)",
      "info" : "IfStatement[31584-31669]:IfStatement[31602-31687]"
    }, {
      "left" : "lastNode.remove();",
      "right" : "lastNode.remove();",
      "info" : "ExpressionStatement[31651-31669]:ExpressionStatement[31669-31687]"
    }, {
      "left" : "commonAncestor.appendChild(lastNode);",
      "right" : "commonAncestor.appendChild(lastNode);",
      "info" : "ExpressionStatement[31702-31739]:ExpressionStatement[31720-31757]"
    }, {
      "left" : "Element adopter = new Element(formatEl.tag(), tb.getBaseUri());",
      "right" : "Element adopter = new Element(formatEl.tag(), tb.getBaseUri());",
      "info" : "VariableDeclarationStatement[31799-31862]:VariableDeclarationStatement[31817-31880]"
    }, {
      "left" : "adopter.attributes().addAll(formatEl.attributes());",
      "right" : "adopter.attributes().addAll(formatEl.attributes());",
      "info" : "ExpressionStatement[31891-31942]:ExpressionStatement[31909-31960]"
    }, {
      "left" : "Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);",
      "right" : "Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);",
      "info" : "VariableDeclarationStatement[31971-32067]:VariableDeclarationStatement[31989-32085]"
    }, {
      "left" : "for (Node childNode : childNodes)",
      "right" : "for (Node childNode : childNodes)",
      "info" : "EnhancedForStatement[32096-32290]:EnhancedForStatement[32114-32308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32130-32290]:Block[32148-32308]"
    }, {
      "left" : "adopter.appendChild(childNode);",
      "right" : "adopter.appendChild(childNode);",
      "info" : "ExpressionStatement[32164-32195]:ExpressionStatement[32182-32213]"
    }, {
      "left" : "furthestBlock.appendChild(adopter);",
      "right" : "furthestBlock.appendChild(adopter);",
      "info" : "ExpressionStatement[32319-32354]:ExpressionStatement[32337-32372]"
    }, {
      "left" : "tb.removeFromActiveFormattingElements(formatEl);",
      "right" : "tb.removeFromActiveFormattingElements(formatEl);",
      "info" : "ExpressionStatement[32383-32431]:ExpressionStatement[32401-32449]"
    }, {
      "left" : "tb.removeFromStack(formatEl);",
      "right" : "tb.removeFromStack(formatEl);",
      "info" : "ExpressionStatement[32612-32641]:ExpressionStatement[32630-32659]"
    }, {
      "left" : "tb.insertOnStackAfter(furthestBlock, adopter);",
      "right" : "tb.insertOnStackAfter(furthestBlock, adopter);",
      "info" : "ExpressionStatement[32670-32716]:ExpressionStatement[32688-32734]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyEndClosers))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyEndClosers))",
      "info" : "IfStatement[32770-38138]:IfStatement[32788-38156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32829-33331]:Block[32847-33349]"
    }, {
      "left" : "if (!tb.inScope(name))",
      "right" : "if (!tb.inScope(name))",
      "info" : "IfStatement[32855-33309]:IfStatement[32873-33327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32878-33039]:Block[32896-33057]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[32956-32971]:ExpressionStatement[32974-32989]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33000-33013]:ReturnStatement[33018-33031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33045-33309]:Block[33063-33327]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[33075-33103]:ExpressionStatement[33093-33121]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[33132-33229]:IfStatement[33150-33247]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[33214-33229]:ExpressionStatement[33232-33247]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[33258-33283]:ExpressionStatement[33276-33301]"
    }, {
      "left" : "if (name.equals(\"span\"))",
      "right" : "if (name.equals(\"span\"))",
      "info" : "IfStatement[33337-38138]:IfStatement[33355-38156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33362-33518]:Block[33380-33536]"
    }, {
      "left" : "return anyOtherEndTag(t, tb);",
      "right" : "return anyOtherEndTag(t, tb);",
      "info" : "ReturnStatement[33467-33496]:ReturnStatement[33485-33514]"
    }, {
      "left" : "if (name.equals(\"li\"))",
      "right" : "if (name.equals(\"li\"))",
      "info" : "IfStatement[33524-38138]:IfStatement[33542-38156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33547-34013]:Block[33565-34031]"
    }, {
      "left" : "if (!tb.inListItemScope(name))",
      "right" : "if (!tb.inListItemScope(name))",
      "info" : "IfStatement[33573-33991]:IfStatement[33591-34009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33604-33717]:Block[33622-33735]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[33634-33649]:ExpressionStatement[33652-33667]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33678-33691]:ReturnStatement[33696-33709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33723-33991]:Block[33741-34009]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[33753-33785]:ExpressionStatement[33771-33803]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[33814-33911]:IfStatement[33832-33929]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[33896-33911]:ExpressionStatement[33914-33929]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[33940-33965]:ExpressionStatement[33958-33983]"
    }, {
      "left" : "if (name.equals(\"body\"))",
      "right" : "if (name.equals(\"body\"))",
      "info" : "IfStatement[34019-38138]:IfStatement[34037-38156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34044-34477]:Block[34062-34495]"
    }, {
      "left" : "if (!tb.inScope(\"body\"))",
      "right" : "if (!tb.inScope(\"body\"))",
      "info" : "IfStatement[34070-34455]:IfStatement[34088-34473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34095-34208]:Block[34113-34226]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[34125-34140]:ExpressionStatement[34143-34158]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[34169-34182]:ReturnStatement[34187-34200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34214-34455]:Block[34232-34473]"
    }, {
      "left" : "tb.transition(AfterBody);",
      "right" : "tb.transition(AfterBody);",
      "info" : "ExpressionStatement[34404-34429]:ExpressionStatement[34422-34447]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[34483-38138]:IfStatement[34501-38156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34508-34697]:Block[34526-34715]"
    }, {
      "left" : "boolean notIgnored = tb.processEndTag(\"body\");",
      "right" : "boolean notIgnored = tb.processEndTag(\"body\");",
      "info" : "VariableDeclarationStatement[34534-34580]:VariableDeclarationStatement[34552-34598]"
    }, {
      "left" : "if (notIgnored)",
      "right" : "if (notIgnored)",
      "info" : "IfStatement[34605-34675]:IfStatement[34623-34693]"
    }, {
      "left" : "return tb.process(endTag);",
      "right" : "return tb.process(endTag);",
      "info" : "ReturnStatement[34649-34675]:ReturnStatement[34667-34693]"
    }, {
      "left" : "if (name.equals(\"form\"))",
      "right" : "if (name.equals(\"form\"))",
      "info" : "IfStatement[34703-38138]:IfStatement[34721-38156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34728-35420]:Block[34746-35438]"
    }, {
      "left" : "Element currentForm = tb.getFormElement();",
      "right" : "Element currentForm = tb.getFormElement();",
      "info" : "VariableDeclarationStatement[34754-34796]:VariableDeclarationStatement[34772-34814]"
    }, {
      "left" : "tb.setFormElement(null);",
      "right" : "tb.setFormElement(null);",
      "info" : "ExpressionStatement[34821-34845]:ExpressionStatement[34839-34863]"
    }, {
      "left" : "if (currentForm == null || !tb.inScope(name))",
      "right" : "if (currentForm == null || !tb.inScope(name))",
      "info" : "IfStatement[34870-35398]:IfStatement[34888-35416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34916-35029]:Block[34934-35047]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[34946-34961]:ExpressionStatement[34964-34979]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[34990-35003]:ReturnStatement[35008-35021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35035-35398]:Block[35053-35416]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[35065-35093]:ExpressionStatement[35083-35111]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[35122-35219]:IfStatement[35140-35237]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[35204-35219]:ExpressionStatement[35222-35237]"
    }, {
      "left" : "tb.removeFromStack(currentForm);",
      "right" : "tb.removeFromStack(currentForm);",
      "info" : "ExpressionStatement[35340-35372]:ExpressionStatement[35358-35390]"
    }, {
      "left" : "if (name.equals(\"p\"))",
      "right" : "if (name.equals(\"p\"))",
      "info" : "IfStatement[35426-38138]:IfStatement[35444-38156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35448-36025]:Block[35466-36043]"
    }, {
      "left" : "if (!tb.inButtonScope(name))",
      "right" : "if (!tb.inButtonScope(name))",
      "info" : "IfStatement[35474-36003]:IfStatement[35492-36021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35503-35729]:Block[35521-35747]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[35533-35548]:ExpressionStatement[35551-35566]"
    }, {
      "left" : "tb.processStartTag(name);",
      "right" : "tb.processStartTag(name);",
      "info" : "ExpressionStatement[35577-35602]:ExpressionStatement[35595-35620]"
    }, {
      "left" : "return tb.process(endTag);",
      "right" : "return tb.process(endTag);",
      "info" : "ReturnStatement[35677-35703]:ReturnStatement[35695-35721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35735-36003]:Block[35753-36021]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[35765-35797]:ExpressionStatement[35783-35815]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[35826-35923]:IfStatement[35844-35941]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[35908-35923]:ExpressionStatement[35926-35941]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[35952-35977]:ExpressionStatement[35970-35995]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.DdDt))",
      "right" : "if (StringUtil.inSorted(name, Constants.DdDt))",
      "info" : "IfStatement[36031-38138]:IfStatement[36049-38156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36078-36536]:Block[36096-36554]"
    }, {
      "left" : "if (!tb.inScope(name))",
      "right" : "if (!tb.inScope(name))",
      "info" : "IfStatement[36104-36514]:IfStatement[36122-36532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36127-36240]:Block[36145-36258]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[36157-36172]:ExpressionStatement[36175-36190]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[36201-36214]:ReturnStatement[36219-36232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36246-36514]:Block[36264-36532]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[36276-36308]:ExpressionStatement[36294-36326]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[36337-36434]:IfStatement[36355-36452]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[36419-36434]:ExpressionStatement[36437-36452]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[36463-36488]:ExpressionStatement[36481-36506]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.Headings))",
      "right" : "if (StringUtil.inSorted(name, Constants.Headings))",
      "info" : "IfStatement[36542-38138]:IfStatement[36560-38156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36593-37079]:Block[36611-37097]"
    }, {
      "left" : "if (!tb.inScope(Constants.Headings))",
      "right" : "if (!tb.inScope(Constants.Headings))",
      "info" : "IfStatement[36619-37057]:IfStatement[36637-37075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36656-36769]:Block[36674-36787]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[36686-36701]:ExpressionStatement[36704-36719]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[36730-36743]:ReturnStatement[36748-36761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36775-37057]:Block[36793-37075]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[36805-36837]:ExpressionStatement[36823-36855]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[36866-36963]:IfStatement[36884-36981]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[36948-36963]:ExpressionStatement[36966-36981]"
    }, {
      "left" : "tb.popStackToClose(Constants.Headings);",
      "right" : "tb.popStackToClose(Constants.Headings);",
      "info" : "ExpressionStatement[36992-37031]:ExpressionStatement[37010-37049]"
    }, {
      "left" : "if (name.equals(\"sarcasm\"))",
      "right" : "if (name.equals(\"sarcasm\"))",
      "info" : "IfStatement[37085-38138]:IfStatement[37103-38156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37113-37224]:Block[37131-37242]"
    }, {
      "left" : "return anyOtherEndTag(t, tb);",
      "right" : "return anyOtherEndTag(t, tb);",
      "info" : "ReturnStatement[37173-37202]:ReturnStatement[37191-37220]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartApplets))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartApplets))",
      "info" : "IfStatement[37230-38138]:IfStatement[37248-38156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37291-37875]:Block[37309-37893]"
    }, {
      "left" : "if (!tb.inScope(\"name\"))",
      "right" : "if (!tb.inScope(\"name\"))",
      "info" : "IfStatement[37317-37853]:IfStatement[37335-37871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37342-37853]:Block[37360-37871]"
    }, {
      "left" : "if (!tb.inScope(name))",
      "right" : "if (!tb.inScope(name))",
      "info" : "IfStatement[37372-37520]:IfStatement[37390-37538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37395-37520]:Block[37413-37538]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[37429-37444]:ExpressionStatement[37447-37462]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[37477-37490]:ReturnStatement[37495-37508]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[37549-37577]:ExpressionStatement[37567-37595]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[37606-37703]:IfStatement[37624-37721]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[37688-37703]:ExpressionStatement[37706-37721]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[37732-37757]:ExpressionStatement[37750-37775]"
    }, {
      "left" : "tb.clearFormattingElementsToLastMarker();",
      "right" : "tb.clearFormattingElementsToLastMarker();",
      "info" : "ExpressionStatement[37786-37827]:ExpressionStatement[37804-37845]"
    }, {
      "left" : "if (name.equals(\"br\"))",
      "right" : "if (name.equals(\"br\"))",
      "info" : "IfStatement[37881-38138]:IfStatement[37899-38156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37904-38055]:Block[37922-38073]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[37930-37945]:ExpressionStatement[37948-37963]"
    }, {
      "left" : "tb.processStartTag(\"br\");",
      "right" : "tb.processStartTag(\"br\");",
      "info" : "ExpressionStatement[37970-37995]:ExpressionStatement[37988-38013]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[38020-38033]:ReturnStatement[38038-38051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38061-38138]:Block[38079-38156]"
    }, {
      "left" : "return anyOtherEndTag(t, tb);",
      "right" : "return anyOtherEndTag(t, tb);",
      "info" : "ReturnStatement[38087-38116]:ReturnStatement[38105-38134]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38160-38166]:BreakStatement[38178-38184]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[38183-38192]:SwitchCase[38201-38210]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38375-38381]:BreakStatement[38393-38399]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[38408-38420]:ReturnStatement[38426-38438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38492-39236]:Block[38510-39254]"
    }, {
      "left" : "String name = t.asEndTag().normalName();",
      "right" : "String name = t.asEndTag().normalName();",
      "info" : "VariableDeclarationStatement[38506-38546]:VariableDeclarationStatement[38524-38564]"
    }, {
      "left" : "ArrayList<Element> stack = tb.getStack();",
      "right" : "ArrayList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[38559-38600]:VariableDeclarationStatement[38577-38618]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[38613-39201]:ForStatement[38631-39219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38662-39201]:Block[38680-39219]"
    }, {
      "left" : "Element node = stack.get(pos);",
      "right" : "Element node = stack.get(pos);",
      "info" : "VariableDeclarationStatement[38680-38710]:VariableDeclarationStatement[38698-38728]"
    }, {
      "left" : "if (node.nodeName().equals(name))",
      "right" : "if (node.nodeName().equals(name))",
      "info" : "IfStatement[38727-39187]:IfStatement[38745-39205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38761-39016]:Block[38779-39034]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[38783-38815]:ExpressionStatement[38801-38833]"
    }, {
      "left" : "if (!name.equals(tb.currentElement().nodeName()))",
      "right" : "if (!name.equals(tb.currentElement().nodeName()))",
      "info" : "IfStatement[38836-38925]:IfStatement[38854-38943]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[38910-38925]:ExpressionStatement[38928-38943]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[38946-38971]:ExpressionStatement[38964-38989]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38992-38998]:BreakStatement[39010-39016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39022-39187]:Block[39040-39205]"
    }, {
      "left" : "if (tb.isSpecial(node))",
      "right" : "if (tb.isSpecial(node))",
      "info" : "IfStatement[39044-39169]:IfStatement[39062-39187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39068-39169]:Block[39086-39187]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[39094-39109]:ExpressionStatement[39112-39127]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[39134-39147]:ReturnStatement[39152-39165]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[39214-39226]:ReturnStatement[39232-39244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39371-39972]:Block[39389-39990]"
    }, {
      "left" : "if (t.isCharacter())",
      "right" : "if (t.isCharacter())",
      "info" : "IfStatement[39385-39937]:IfStatement[39403-39955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39406-39465]:Block[39424-39483]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[39424-39451]:ExpressionStatement[39442-39469]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[39471-39937]:IfStatement[39489-39955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39486-39710]:Block[39504-39728]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[39504-39519]:ExpressionStatement[39522-39537]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[39598-39607]:ExpressionStatement[39616-39625]"
    }, {
      "left" : "tb.transition(tb.originalState());",
      "right" : "tb.transition(tb.originalState());",
      "info" : "ExpressionStatement[39624-39658]:ExpressionStatement[39642-39676]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[39675-39696]:ReturnStatement[39693-39714]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[39716-39937]:IfStatement[39734-39955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39734-39937]:Block[39752-39955]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[39863-39872]:ExpressionStatement[39881-39890]"
    }, {
      "left" : "tb.transition(tb.originalState());",
      "right" : "tb.transition(tb.originalState());",
      "info" : "ExpressionStatement[39889-39923]:ExpressionStatement[39907-39941]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[39950-39962]:ReturnStatement[39968-39980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40047-43891]:Block[40065-43909]"
    }, {
      "left" : "if (t.isCharacter())",
      "right" : "if (t.isCharacter())",
      "info" : "IfStatement[40061-43841]:IfStatement[40079-43859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40082-40267]:Block[40100-40285]"
    }, {
      "left" : "tb.newPendingTableCharacters();",
      "right" : "tb.newPendingTableCharacters();",
      "info" : "ExpressionStatement[40100-40131]:ExpressionStatement[40118-40149]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[40148-40171]:ExpressionStatement[40166-40189]"
    }, {
      "left" : "tb.transition(InTableText);",
      "right" : "tb.transition(InTableText);",
      "info" : "ExpressionStatement[40188-40215]:ExpressionStatement[40206-40233]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[40232-40253]:ReturnStatement[40250-40271]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[40273-43841]:IfStatement[40291-43859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40292-40378]:Block[40310-40396]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[40310-40335]:ExpressionStatement[40328-40353]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[40352-40364]:ReturnStatement[40370-40382]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[40384-43841]:IfStatement[40402-43859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40403-40480]:Block[40421-40498]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[40421-40436]:ExpressionStatement[40439-40454]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[40453-40466]:ReturnStatement[40471-40484]"
    }, {
      "left" : "if (t.isStartTag())",
      "right" : "if (t.isStartTag())",
      "info" : "IfStatement[40486-43841]:IfStatement[40504-43859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40506-42814]:Block[40524-42832]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[40524-40565]:VariableDeclarationStatement[40542-40583]"
    }, {
      "left" : "String name = startTag.normalName();",
      "right" : "String name = startTag.normalName();",
      "info" : "VariableDeclarationStatement[40582-40618]:VariableDeclarationStatement[40600-40636]"
    }, {
      "left" : "if (name.equals(\"caption\"))",
      "right" : "if (name.equals(\"caption\"))",
      "info" : "IfStatement[40635-42625]:IfStatement[40653-42643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40663-40879]:Block[40681-40897]"
    }, {
      "left" : "tb.clearStackToTableContext();",
      "right" : "tb.clearStackToTableContext();",
      "info" : "ExpressionStatement[40685-40715]:ExpressionStatement[40703-40733]"
    }, {
      "left" : "tb.insertMarkerToFormattingElements();",
      "right" : "tb.insertMarkerToFormattingElements();",
      "info" : "ExpressionStatement[40736-40774]:ExpressionStatement[40754-40792]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[40795-40815]:ExpressionStatement[40813-40833]"
    }, {
      "left" : "tb.transition(InCaption);",
      "right" : "tb.transition(InCaption);",
      "info" : "ExpressionStatement[40836-40861]:ExpressionStatement[40854-40879]"
    }, {
      "left" : "if (name.equals(\"colgroup\"))",
      "right" : "if (name.equals(\"colgroup\"))",
      "info" : "IfStatement[40885-42625]:IfStatement[40903-42643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40914-41075]:Block[40932-41093]"
    }, {
      "left" : "tb.clearStackToTableContext();",
      "right" : "tb.clearStackToTableContext();",
      "info" : "ExpressionStatement[40936-40966]:ExpressionStatement[40954-40984]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[40987-41007]:ExpressionStatement[41005-41025]"
    }, {
      "left" : "tb.transition(InColumnGroup);",
      "right" : "tb.transition(InColumnGroup);",
      "info" : "ExpressionStatement[41028-41057]:ExpressionStatement[41046-41075]"
    }, {
      "left" : "if (name.equals(\"col\"))",
      "right" : "if (name.equals(\"col\"))",
      "info" : "IfStatement[41081-42625]:IfStatement[41099-42643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41105-41218]:Block[41123-41236]"
    }, {
      "left" : "tb.processStartTag(\"colgroup\");",
      "right" : "tb.processStartTag(\"colgroup\");",
      "info" : "ExpressionStatement[41127-41158]:ExpressionStatement[41145-41176]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[41179-41200]:ReturnStatement[41197-41218]"
    }, {
      "left" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "right" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "info" : "IfStatement[41224-42625]:IfStatement[41242-42643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41276-41435]:Block[41294-41453]"
    }, {
      "left" : "tb.clearStackToTableContext();",
      "right" : "tb.clearStackToTableContext();",
      "info" : "ExpressionStatement[41298-41328]:ExpressionStatement[41316-41346]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[41349-41369]:ExpressionStatement[41367-41387]"
    }, {
      "left" : "tb.transition(InTableBody);",
      "right" : "tb.transition(InTableBody);",
      "info" : "ExpressionStatement[41390-41417]:ExpressionStatement[41408-41435]"
    }, {
      "left" : "if (StringUtil.in(name, \"td\", \"th\", \"tr\"))",
      "right" : "if (StringUtil.in(name, \"td\", \"th\", \"tr\"))",
      "info" : "IfStatement[41441-42625]:IfStatement[41459-42643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41484-41594]:Block[41502-41612]"
    }, {
      "left" : "tb.processStartTag(\"tbody\");",
      "right" : "tb.processStartTag(\"tbody\");",
      "info" : "ExpressionStatement[41506-41534]:ExpressionStatement[41524-41552]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[41555-41576]:ReturnStatement[41573-41594]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[41600-42625]:IfStatement[41618-42643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41626-41860]:Block[41644-41878]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[41648-41663]:ExpressionStatement[41666-41681]"
    }, {
      "left" : "boolean processed = tb.processEndTag(\"table\");",
      "right" : "boolean processed = tb.processEndTag(\"table\");",
      "info" : "VariableDeclarationStatement[41684-41730]:VariableDeclarationStatement[41702-41748]"
    }, {
      "left" : "if (processed)",
      "right" : "if (processed)",
      "info" : "IfStatement[41751-41842]:IfStatement[41769-41860]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[41821-41842]:ReturnStatement[41839-41860]"
    }, {
      "left" : "if (StringUtil.in(name, \"style\", \"script\"))",
      "right" : "if (StringUtil.in(name, \"style\", \"script\"))",
      "info" : "IfStatement[41866-42625]:IfStatement[41884-42643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41910-41979]:Block[41928-41997]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[41932-41961]:ReturnStatement[41950-41979]"
    }, {
      "left" : "if (name.equals(\"input\"))",
      "right" : "if (name.equals(\"input\"))",
      "info" : "IfStatement[41985-42625]:IfStatement[42003-42643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42011-42270]:Block[42029-42288]"
    }, {
      "left" : "if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\"))",
      "right" : "if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\"))",
      "info" : "IfStatement[42033-42252]:IfStatement[42051-42270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42098-42173]:Block[42116-42191]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[42124-42151]:ReturnStatement[42142-42169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42179-42252]:Block[42197-42270]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[42205-42230]:ExpressionStatement[42223-42248]"
    }, {
      "left" : "if (name.equals(\"form\"))",
      "right" : "if (name.equals(\"form\"))",
      "info" : "IfStatement[42276-42625]:IfStatement[42294-42643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42301-42552]:Block[42319-42570]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[42323-42338]:ExpressionStatement[42341-42356]"
    }, {
      "left" : "if (tb.getFormElement() != null)",
      "right" : "if (tb.getFormElement() != null)",
      "info" : "IfStatement[42359-42534]:IfStatement[42377-42552]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[42416-42429]:ReturnStatement[42434-42447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42455-42534]:Block[42473-42552]"
    }, {
      "left" : "tb.insertForm(startTag, false);",
      "right" : "tb.insertForm(startTag, false);",
      "info" : "ExpressionStatement[42481-42512]:ExpressionStatement[42499-42530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42558-42625]:Block[42576-42643]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[42580-42607]:ReturnStatement[42598-42625]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[42642-42654]:ReturnStatement[42660-42672]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[42820-43841]:IfStatement[42838-43859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42838-43656]:Block[42856-43674]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[42856-42891]:VariableDeclarationStatement[42874-42909]"
    }, {
      "left" : "String name = endTag.normalName();",
      "right" : "String name = endTag.normalName();",
      "info" : "VariableDeclarationStatement[42908-42942]:VariableDeclarationStatement[42926-42960]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[42960-43590]:IfStatement[42978-43608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42986-43282]:Block[43004-43300]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[43008-43219]:IfStatement[43026-43237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43036-43137]:Block[43054-43155]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[43062-43077]:ExpressionStatement[43080-43095]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[43102-43115]:ReturnStatement[43120-43133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43143-43219]:Block[43161-43237]"
    }, {
      "left" : "tb.popStackToClose(\"table\");",
      "right" : "tb.popStackToClose(\"table\");",
      "info" : "ExpressionStatement[43169-43197]:ExpressionStatement[43187-43215]"
    }, {
      "left" : "tb.resetInsertionMode();",
      "right" : "tb.resetInsertionMode();",
      "info" : "ExpressionStatement[43240-43264]:ExpressionStatement[43258-43282]"
    }, {
      "left" : "if (StringUtil.in(name,\n                        \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(name,\n                        \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "info" : "IfStatement[43288-43590]:IfStatement[43306-43608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43428-43517]:Block[43446-43535]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[43450-43465]:ExpressionStatement[43468-43483]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[43486-43499]:ReturnStatement[43504-43517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43523-43590]:Block[43541-43608]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[43545-43572]:ReturnStatement[43563-43590]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[43607-43619]:ReturnStatement[43625-43637]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[43662-43841]:IfStatement[43680-43859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43677-43841]:Block[43695-43859]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[43695-43781]:IfStatement[43713-43799]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[43766-43781]:ExpressionStatement[43784-43799]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[43798-43810]:ReturnStatement[43816-43828]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[43854-43881]:ReturnStatement[43872-43899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43951-44382]:Block[43969-44400]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[43965-43980]:ExpressionStatement[43983-43998]"
    }, {
      "left" : "boolean processed;",
      "right" : "boolean processed;",
      "info" : "VariableDeclarationStatement[43993-44011]:VariableDeclarationStatement[44011-44029]"
    }, {
      "left" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "info" : "IfStatement[44024-44342]:IfStatement[44042-44360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44117-44270]:Block[44135-44288]"
    }, {
      "left" : "tb.setFosterInserts(true);",
      "right" : "tb.setFosterInserts(true);",
      "info" : "ExpressionStatement[44135-44161]:ExpressionStatement[44153-44179]"
    }, {
      "left" : "processed = tb.process(t, InBody);",
      "right" : "processed = tb.process(t, InBody);",
      "info" : "ExpressionStatement[44178-44212]:ExpressionStatement[44196-44230]"
    }, {
      "left" : "tb.setFosterInserts(false);",
      "right" : "tb.setFosterInserts(false);",
      "info" : "ExpressionStatement[44229-44256]:ExpressionStatement[44247-44274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44276-44342]:Block[44294-44360]"
    }, {
      "left" : "processed = tb.process(t, InBody);",
      "right" : "processed = tb.process(t, InBody);",
      "info" : "ExpressionStatement[44294-44328]:ExpressionStatement[44312-44346]"
    }, {
      "left" : "return processed;",
      "right" : "return processed;",
      "info" : "ReturnStatement[44355-44372]:ReturnStatement[44373-44390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44461-46203]:Block[44479-46221]"
    }, {
      "left" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.getPendingTableCharacters().add(c.getData());\n                    }\n                    break;\n                default:\n                    // todo - don't really like the way these table character data lists are built\n                    if (tb.getPendingTableCharacters().size() > 0) {\n                        for (String character : tb.getPendingTableCharacters()) {\n                            if (!isWhitespace(character)) {\n                                // InTable anything else section:\n                                tb.error(this);\n                                if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                    tb.setFosterInserts(true);\n                                    tb.process(new Token.Character().data(character), InBody);\n                                    tb.setFosterInserts(false);\n                                } else {\n                                    tb.process(new Token.Character().data(character), InBody);\n                                }\n                            } else\n                                tb.insert(new Token.Character().data(character));\n                        }\n                        tb.newPendingTableCharacters();\n                    }\n                    tb.transition(tb.originalState());\n                    return tb.process(t);\n            }",
      "right" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.getPendingTableCharacters().add(c.getData());\n                    }\n                    break;\n                default:\n                    // todo - don't really like the way these table character data lists are built\n                    if (tb.getPendingTableCharacters().size() > 0) {\n                        for (String character : tb.getPendingTableCharacters()) {\n                            if (!isWhitespace(character)) {\n                                // InTable anything else section:\n                                tb.error(this);\n                                if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                    tb.setFosterInserts(true);\n                                    tb.process(new Token.Character().data(character), InBody);\n                                    tb.setFosterInserts(false);\n                                } else {\n                                    tb.process(new Token.Character().data(character), InBody);\n                                }\n                            } else\n                                tb.insert(new Token.Character().data(character));\n                        }\n                        tb.newPendingTableCharacters();\n                    }\n                    tb.transition(tb.originalState());\n                    return tb.process(t);\n            }",
      "info" : "SwitchStatement[44475-46168]:SwitchStatement[44493-46186]"
    }, {
      "left" : "case Character:",
      "right" : "case Character:",
      "info" : "SwitchCase[44509-44524]:SwitchCase[44527-44542]"
    }, {
      "left" : "Token.Character c = t.asCharacter();",
      "right" : "Token.Character c = t.asCharacter();",
      "info" : "VariableDeclarationStatement[44545-44581]:VariableDeclarationStatement[44563-44599]"
    }, {
      "left" : "if (c.getData().equals(nullString))",
      "right" : "if (c.getData().equals(nullString))",
      "info" : "IfStatement[44602-44841]:IfStatement[44620-44859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44638-44739]:Block[44656-44757]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[44664-44679]:ExpressionStatement[44682-44697]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[44704-44717]:ReturnStatement[44722-44735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44745-44841]:Block[44763-44859]"
    }, {
      "left" : "tb.getPendingTableCharacters().add(c.getData());",
      "right" : "tb.getPendingTableCharacters().add(c.getData());",
      "info" : "ExpressionStatement[44771-44819]:ExpressionStatement[44789-44837]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44862-44868]:BreakStatement[44880-44886]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[44885-44893]:SwitchCase[44903-44911]"
    }, {
      "left" : "if (tb.getPendingTableCharacters().size() > 0)",
      "right" : "if (tb.getPendingTableCharacters().size() > 0)",
      "info" : "IfStatement[45013-46057]:IfStatement[45031-46075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45060-46057]:Block[45078-46075]"
    }, {
      "left" : "for (String character : tb.getPendingTableCharacters())",
      "right" : "for (String character : tb.getPendingTableCharacters())",
      "info" : "EnhancedForStatement[45086-45979]:EnhancedForStatement[45104-45997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45142-45979]:Block[45160-45997]"
    }, {
      "left" : "if (!isWhitespace(character))",
      "right" : "if (!isWhitespace(character))",
      "info" : "IfStatement[45172-45953]:IfStatement[45190-45971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45202-45866]:Block[45220-45884]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[45302-45317]:ExpressionStatement[45320-45335]"
    }, {
      "left" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "info" : "IfStatement[45350-45836]:IfStatement[45368-45854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45443-45700]:Block[45461-45718]"
    }, {
      "left" : "tb.setFosterInserts(true);",
      "right" : "tb.setFosterInserts(true);",
      "info" : "ExpressionStatement[45481-45507]:ExpressionStatement[45499-45525]"
    }, {
      "left" : "tb.process(new Token.Character().data(character), InBody);",
      "right" : "tb.process(new Token.Character().data(character), InBody);",
      "info" : "ExpressionStatement[45544-45602]:ExpressionStatement[45562-45620]"
    }, {
      "left" : "tb.setFosterInserts(false);",
      "right" : "tb.setFosterInserts(false);",
      "info" : "ExpressionStatement[45639-45666]:ExpressionStatement[45657-45684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45706-45836]:Block[45724-45854]"
    }, {
      "left" : "tb.process(new Token.Character().data(character), InBody);",
      "right" : "tb.process(new Token.Character().data(character), InBody);",
      "info" : "ExpressionStatement[45744-45802]:ExpressionStatement[45762-45820]"
    }, {
      "left" : "tb.insert(new Token.Character().data(character));",
      "right" : "tb.insert(new Token.Character().data(character));",
      "info" : "ExpressionStatement[45904-45953]:ExpressionStatement[45922-45971]"
    }, {
      "left" : "tb.newPendingTableCharacters();",
      "right" : "tb.newPendingTableCharacters();",
      "info" : "ExpressionStatement[46004-46035]:ExpressionStatement[46022-46053]"
    }, {
      "left" : "tb.transition(tb.originalState());",
      "right" : "tb.transition(tb.originalState());",
      "info" : "ExpressionStatement[46078-46112]:ExpressionStatement[46096-46130]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[46133-46154]:ReturnStatement[46151-46172]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[46181-46193]:ReturnStatement[46199-46211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46280-47797]:Block[46298-47815]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\"))",
      "info" : "IfStatement[46294-47762]:IfStatement[46312-47780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46359-46957]:Block[46377-46975]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[46377-46412]:VariableDeclarationStatement[46395-46430]"
    }, {
      "left" : "String name = endTag.normalName();",
      "right" : "String name = endTag.normalName();",
      "info" : "VariableDeclarationStatement[46429-46463]:VariableDeclarationStatement[46447-46481]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[46480-46943]:IfStatement[46498-46961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46508-46597]:Block[46526-46615]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[46530-46545]:ExpressionStatement[46548-46563]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46566-46579]:ReturnStatement[46584-46597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46603-46943]:Block[46621-46961]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[46625-46653]:ExpressionStatement[46643-46671]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(\"caption\"))",
      "right" : "if (!tb.currentElement().nodeName().equals(\"caption\"))",
      "info" : "IfStatement[46674-46768]:IfStatement[46692-46786]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[46753-46768]:ExpressionStatement[46771-46786]"
    }, {
      "left" : "tb.popStackToClose(\"caption\");",
      "right" : "tb.popStackToClose(\"caption\");",
      "info" : "ExpressionStatement[46789-46819]:ExpressionStatement[46807-46837]"
    }, {
      "left" : "tb.clearFormattingElementsToLastMarker();",
      "right" : "tb.clearFormattingElementsToLastMarker();",
      "info" : "ExpressionStatement[46840-46881]:ExpressionStatement[46858-46899]"
    }, {
      "left" : "tb.transition(InTable);",
      "right" : "tb.transition(InTable);",
      "info" : "ExpressionStatement[46902-46925]:ExpressionStatement[46920-46943]"
    }, {
      "left" : "if ((\n                    t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") ||\n                            t.isEndTag() && t.asEndTag().normalName().equals(\"table\")))",
      "right" : "if ((\n                    t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") ||\n                            t.isEndTag() && t.asEndTag().normalName().equals(\"table\")))",
      "info" : "IfStatement[46963-47762]:IfStatement[46981-47780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47265-47450]:Block[47283-47468]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[47283-47298]:ExpressionStatement[47301-47316]"
    }, {
      "left" : "boolean processed = tb.processEndTag(\"caption\");",
      "right" : "boolean processed = tb.processEndTag(\"caption\");",
      "info" : "VariableDeclarationStatement[47315-47363]:VariableDeclarationStatement[47333-47381]"
    }, {
      "left" : "if (processed)",
      "right" : "if (processed)",
      "info" : "IfStatement[47380-47436]:IfStatement[47398-47454]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[47415-47436]:ReturnStatement[47433-47454]"
    }, {
      "left" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(),\n                    \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "right" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(),\n                    \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "info" : "IfStatement[47456-47762]:IfStatement[47474-47780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47618-47695]:Block[47636-47713]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[47636-47651]:ExpressionStatement[47654-47669]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47668-47681]:ReturnStatement[47686-47699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47701-47762]:Block[47719-47780]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[47719-47748]:ReturnStatement[47737-47766]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[47775-47787]:ReturnStatement[47793-47805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47878-49654]:Block[47896-49672]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[47892-48001]:IfStatement[47910-48019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47913-48001]:Block[47931-48019]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[47931-47958]:ExpressionStatement[47949-47976]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[47975-47987]:ReturnStatement[47993-48005]"
    }, {
      "left" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    break;\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.normalName();\n                    if (name.equals(\"html\"))\n                        return tb.process(t, InBody);\n                    else if (name.equals(\"col\"))\n                        tb.insertEmpty(startTag);\n                    else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.normalName();\n                    if (name.equals(\"colgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"html\")) { // frag case\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (tb.currentElement().nodeName().equals(\"html\"))\n                        return true; // stop parsing; frag case\n                    else\n                        return anythingElse(t, tb);\n                default:\n                    return anythingElse(t, tb);\n            }",
      "right" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    break;\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.normalName();\n                    if (name.equals(\"html\"))\n                        return tb.process(t, InBody);\n                    else if (name.equals(\"col\"))\n                        tb.insertEmpty(startTag);\n                    else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.normalName();\n                    if (name.equals(\"colgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"html\")) { // frag case\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (tb.currentElement().nodeName().equals(\"html\"))\n                        return true; // stop parsing; frag case\n                    else\n                        return anythingElse(t, tb);\n                default:\n                    return anythingElse(t, tb);\n            }",
      "info" : "SwitchStatement[48014-49619]:SwitchStatement[48032-49637]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[48048-48061]:SwitchCase[48066-48079]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[48082-48107]:ExpressionStatement[48100-48125]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48128-48134]:BreakStatement[48146-48152]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[48151-48164]:SwitchCase[48169-48182]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[48185-48200]:ExpressionStatement[48203-48218]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48221-48227]:BreakStatement[48239-48245]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[48244-48258]:SwitchCase[48262-48276]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[48279-48320]:VariableDeclarationStatement[48297-48338]"
    }, {
      "left" : "String name = startTag.normalName();",
      "right" : "String name = startTag.normalName();",
      "info" : "VariableDeclarationStatement[48341-48377]:VariableDeclarationStatement[48359-48395]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[48398-48652]:IfStatement[48416-48670]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[48447-48476]:ReturnStatement[48465-48494]"
    }, {
      "left" : "if (name.equals(\"col\"))",
      "right" : "if (name.equals(\"col\"))",
      "info" : "IfStatement[48502-48652]:IfStatement[48520-48670]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[48550-48575]:ExpressionStatement[48568-48593]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[48625-48652]:ReturnStatement[48643-48670]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48673-48679]:BreakStatement[48691-48697]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[48696-48708]:SwitchCase[48714-48726]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[48729-48764]:VariableDeclarationStatement[48747-48782]"
    }, {
      "left" : "name = endTag.normalName();",
      "right" : "name = endTag.normalName();",
      "info" : "ExpressionStatement[48785-48812]:ExpressionStatement[48803-48830]"
    }, {
      "left" : "if (name.equals(\"colgroup\"))",
      "right" : "if (name.equals(\"colgroup\"))",
      "info" : "IfStatement[48833-49267]:IfStatement[48851-49285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48862-49210]:Block[48880-49228]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[48888-49188]:IfStatement[48906-49206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48939-49065]:Block[48957-49083]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[48982-48997]:ExpressionStatement[49000-49015]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[49026-49039]:ReturnStatement[49044-49057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49071-49188]:Block[49089-49206]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[49101-49110]:ExpressionStatement[49119-49128]"
    }, {
      "left" : "tb.transition(InTable);",
      "right" : "tb.transition(InTable);",
      "info" : "ExpressionStatement[49139-49162]:ExpressionStatement[49157-49180]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[49240-49267]:ReturnStatement[49258-49285]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49288-49294]:BreakStatement[49306-49312]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[49311-49320]:SwitchCase[49329-49338]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[49341-49532]:IfStatement[49359-49550]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[49416-49428]:ReturnStatement[49434-49446]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[49505-49532]:ReturnStatement[49523-49550]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[49549-49557]:SwitchCase[49567-49575]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[49578-49605]:ReturnStatement[49596-49623]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[49632-49644]:ReturnStatement[49650-49662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49718-49910]:Block[49736-49928]"
    }, {
      "left" : "boolean processed = tb.processEndTag(\"colgroup\");",
      "right" : "boolean processed = tb.processEndTag(\"colgroup\");",
      "info" : "VariableDeclarationStatement[49732-49781]:VariableDeclarationStatement[49750-49799]"
    }, {
      "left" : "if (processed)",
      "right" : "if (processed)",
      "info" : "IfStatement[49794-49875]:IfStatement[49812-49893]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[49854-49875]:ReturnStatement[49872-49893]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[49888-49900]:ReturnStatement[49906-49918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49989-51935]:Block[50007-51953]"
    }, {
      "left" : "switch (t.type) {\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.normalName();\n                    if (name.equals(\"tr\")) {\n                        tb.clearStackToTableBodyContext();\n                        tb.insert(startTag);\n                        tb.transition(InRow);\n                    } else if (StringUtil.in(name, \"th\", \"td\")) {\n                        tb.error(this);\n                        tb.processStartTag(\"tr\");\n                        return tb.process(startTag);\n                    } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                        return exitTableBody(t, tb);\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.normalName();\n                    if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                        if (!tb.inTableScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.clearStackToTableBodyContext();\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else if (name.equals(\"table\")) {\n                        return exitTableBody(t, tb);\n                    } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                        tb.error(this);\n                        return false;\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "right" : "switch (t.type) {\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.normalName();\n                    if (name.equals(\"tr\")) {\n                        tb.clearStackToTableBodyContext();\n                        tb.insert(startTag);\n                        tb.transition(InRow);\n                    } else if (StringUtil.in(name, \"th\", \"td\")) {\n                        tb.error(this);\n                        tb.processStartTag(\"tr\");\n                        return tb.process(startTag);\n                    } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                        return exitTableBody(t, tb);\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.normalName();\n                    if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                        if (!tb.inTableScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.clearStackToTableBodyContext();\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else if (name.equals(\"table\")) {\n                        return exitTableBody(t, tb);\n                    } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                        tb.error(this);\n                        return false;\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "info" : "SwitchStatement[50003-51900]:SwitchStatement[50021-51918]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[50037-50051]:SwitchCase[50055-50069]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[50072-50113]:VariableDeclarationStatement[50090-50131]"
    }, {
      "left" : "String name = startTag.normalName();",
      "right" : "String name = startTag.normalName();",
      "info" : "VariableDeclarationStatement[50134-50170]:VariableDeclarationStatement[50152-50188]"
    }, {
      "left" : "if (name.equals(\"tr\"))",
      "right" : "if (name.equals(\"tr\"))",
      "info" : "IfStatement[50191-50817]:IfStatement[50209-50835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50214-50387]:Block[50232-50405]"
    }, {
      "left" : "tb.clearStackToTableBodyContext();",
      "right" : "tb.clearStackToTableBodyContext();",
      "info" : "ExpressionStatement[50240-50274]:ExpressionStatement[50258-50292]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[50299-50319]:ExpressionStatement[50317-50337]"
    }, {
      "left" : "tb.transition(InRow);",
      "right" : "tb.transition(InRow);",
      "info" : "ExpressionStatement[50344-50365]:ExpressionStatement[50362-50383]"
    }, {
      "left" : "if (StringUtil.in(name, \"th\", \"td\"))",
      "right" : "if (StringUtil.in(name, \"th\", \"td\"))",
      "info" : "IfStatement[50393-50817]:IfStatement[50411-50835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50430-50596]:Block[50448-50614]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[50456-50471]:ExpressionStatement[50474-50489]"
    }, {
      "left" : "tb.processStartTag(\"tr\");",
      "right" : "tb.processStartTag(\"tr\");",
      "info" : "ExpressionStatement[50496-50521]:ExpressionStatement[50514-50539]"
    }, {
      "left" : "return tb.process(startTag);",
      "right" : "return tb.process(startTag);",
      "info" : "ReturnStatement[50546-50574]:ReturnStatement[50564-50592]"
    }, {
      "left" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\"))",
      "right" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\"))",
      "info" : "IfStatement[50602-50817]:IfStatement[50620-50835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50684-50760]:Block[50702-50778]"
    }, {
      "left" : "return exitTableBody(t, tb);",
      "right" : "return exitTableBody(t, tb);",
      "info" : "ReturnStatement[50710-50738]:ReturnStatement[50728-50756]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[50790-50817]:ReturnStatement[50808-50835]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[50838-50844]:BreakStatement[50856-50862]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[50861-50873]:SwitchCase[50879-50891]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[50894-50929]:VariableDeclarationStatement[50912-50947]"
    }, {
      "left" : "name = endTag.normalName();",
      "right" : "name = endTag.normalName();",
      "info" : "ExpressionStatement[50950-50977]:ExpressionStatement[50968-50995]"
    }, {
      "left" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "right" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "info" : "IfStatement[50998-51786]:IfStatement[51016-51804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51050-51425]:Block[51068-51443]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[51076-51403]:IfStatement[51094-51421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51104-51217]:Block[51122-51235]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[51134-51149]:ExpressionStatement[51152-51167]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[51178-51191]:ReturnStatement[51196-51209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51223-51403]:Block[51241-51421]"
    }, {
      "left" : "tb.clearStackToTableBodyContext();",
      "right" : "tb.clearStackToTableBodyContext();",
      "info" : "ExpressionStatement[51253-51287]:ExpressionStatement[51271-51305]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[51316-51325]:ExpressionStatement[51334-51343]"
    }, {
      "left" : "tb.transition(InTable);",
      "right" : "tb.transition(InTable);",
      "info" : "ExpressionStatement[51354-51377]:ExpressionStatement[51372-51395]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[51431-51786]:IfStatement[51449-51804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51457-51533]:Block[51475-51551]"
    }, {
      "left" : "return exitTableBody(t, tb);",
      "right" : "return exitTableBody(t, tb);",
      "info" : "ReturnStatement[51483-51511]:ReturnStatement[51501-51529]"
    }, {
      "left" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\"))",
      "right" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\"))",
      "info" : "IfStatement[51539-51786]:IfStatement[51557-51804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51628-51729]:Block[51646-51747]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[51654-51669]:ExpressionStatement[51672-51687]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[51694-51707]:ReturnStatement[51712-51725]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[51759-51786]:ReturnStatement[51777-51804]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51807-51813]:BreakStatement[51825-51831]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[51830-51838]:SwitchCase[51848-51856]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[51859-51886]:ReturnStatement[51877-51904]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[51913-51925]:ReturnStatement[51931-51943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52004-52384]:Block[52022-52402]"
    }, {
      "left" : "if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\")))",
      "right" : "if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\")))",
      "info" : "IfStatement[52018-52208]:IfStatement[52036-52226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52102-52208]:Block[52120-52226]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[52149-52164]:ExpressionStatement[52167-52182]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[52181-52194]:ReturnStatement[52199-52212]"
    }, {
      "left" : "tb.clearStackToTableBodyContext();",
      "right" : "tb.clearStackToTableBodyContext();",
      "info" : "ExpressionStatement[52221-52255]:ExpressionStatement[52239-52273]"
    }, {
      "left" : "tb.processEndTag(tb.currentElement().nodeName());",
      "right" : "tb.processEndTag(tb.currentElement().nodeName());",
      "info" : "ExpressionStatement[52268-52317]:ExpressionStatement[52286-52335]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[52353-52374]:ReturnStatement[52371-52392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52452-52506]:Block[52470-52524]"
    }, {
      "left" : "return tb.process(t, InTable);",
      "right" : "return tb.process(t, InTable);",
      "info" : "ReturnStatement[52466-52496]:ReturnStatement[52484-52514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52579-54511]:Block[52597-54529]"
    }, {
      "left" : "if (t.isStartTag())",
      "right" : "if (t.isStartTag())",
      "info" : "IfStatement[52593-54476]:IfStatement[52611-54494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52613-53247]:Block[52631-53265]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[52631-52672]:VariableDeclarationStatement[52649-52690]"
    }, {
      "left" : "String name = startTag.normalName();",
      "right" : "String name = startTag.normalName();",
      "info" : "VariableDeclarationStatement[52689-52725]:VariableDeclarationStatement[52707-52743]"
    }, {
      "left" : "if (StringUtil.in(name, \"th\", \"td\"))",
      "right" : "if (StringUtil.in(name, \"th\", \"td\"))",
      "info" : "IfStatement[52743-53233]:IfStatement[52761-53251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52780-52996]:Block[52798-53014]"
    }, {
      "left" : "tb.clearStackToTableRowContext();",
      "right" : "tb.clearStackToTableRowContext();",
      "info" : "ExpressionStatement[52802-52835]:ExpressionStatement[52820-52853]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[52856-52876]:ExpressionStatement[52874-52894]"
    }, {
      "left" : "tb.transition(InCell);",
      "right" : "tb.transition(InCell);",
      "info" : "ExpressionStatement[52897-52919]:ExpressionStatement[52915-52937]"
    }, {
      "left" : "tb.insertMarkerToFormattingElements();",
      "right" : "tb.insertMarkerToFormattingElements();",
      "info" : "ExpressionStatement[52940-52978]:ExpressionStatement[52958-52996]"
    }, {
      "left" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "info" : "IfStatement[53002-53233]:IfStatement[53020-53251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53090-53160]:Block[53108-53178]"
    }, {
      "left" : "return handleMissingTr(t, tb);",
      "right" : "return handleMissingTr(t, tb);",
      "info" : "ReturnStatement[53112-53142]:ReturnStatement[53130-53160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53166-53233]:Block[53184-53251]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[53188-53215]:ReturnStatement[53206-53233]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[53253-54476]:IfStatement[53271-54494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53271-54411]:Block[53289-54429]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[53289-53324]:VariableDeclarationStatement[53307-53342]"
    }, {
      "left" : "String name = endTag.normalName();",
      "right" : "String name = endTag.normalName();",
      "info" : "VariableDeclarationStatement[53341-53375]:VariableDeclarationStatement[53359-53393]"
    }, {
      "left" : "if (name.equals(\"tr\"))",
      "right" : "if (name.equals(\"tr\"))",
      "info" : "IfStatement[53393-54397]:IfStatement[53411-54415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53416-53731]:Block[53434-53749]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[53438-53575]:IfStatement[53456-53593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53466-53575]:Block[53484-53593]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[53492-53507]:ExpressionStatement[53510-53525]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[53540-53553]:ReturnStatement[53558-53571]"
    }, {
      "left" : "tb.clearStackToTableRowContext();",
      "right" : "tb.clearStackToTableRowContext();",
      "info" : "ExpressionStatement[53596-53629]:ExpressionStatement[53614-53647]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[53650-53659]:ExpressionStatement[53668-53677]"
    }, {
      "left" : "tb.transition(InTableBody);",
      "right" : "tb.transition(InTableBody);",
      "info" : "ExpressionStatement[53686-53713]:ExpressionStatement[53704-53731]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[53737-54397]:IfStatement[53755-54415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53763-53833]:Block[53781-53851]"
    }, {
      "left" : "return handleMissingTr(t, tb);",
      "right" : "return handleMissingTr(t, tb);",
      "info" : "ReturnStatement[53785-53815]:ReturnStatement[53803-53833]"
    }, {
      "left" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "right" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "info" : "IfStatement[53839-54397]:IfStatement[53857-54415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53891-54146]:Block[53909-54164]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[53913-54042]:IfStatement[53931-54060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53941-54042]:Block[53959-54060]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[53967-53982]:ExpressionStatement[53985-54000]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[54007-54020]:ReturnStatement[54025-54038]"
    }, {
      "left" : "tb.processEndTag(\"tr\");",
      "right" : "tb.processEndTag(\"tr\");",
      "info" : "ExpressionStatement[54063-54086]:ExpressionStatement[54081-54104]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[54107-54128]:ReturnStatement[54125-54146]"
    }, {
      "left" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\"))",
      "right" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\"))",
      "info" : "IfStatement[54152-54397]:IfStatement[54170-54415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54235-54324]:Block[54253-54342]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[54257-54272]:ExpressionStatement[54275-54290]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[54293-54306]:ReturnStatement[54311-54324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54330-54397]:Block[54348-54415]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[54352-54379]:ReturnStatement[54370-54397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54417-54476]:Block[54435-54494]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[54435-54462]:ReturnStatement[54453-54480]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[54489-54501]:ReturnStatement[54507-54519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54579-54633]:Block[54597-54651]"
    }, {
      "left" : "return tb.process(t, InTable);",
      "right" : "return tb.process(t, InTable);",
      "info" : "ReturnStatement[54593-54623]:ReturnStatement[54611-54641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54700-54879]:Block[54718-54897]"
    }, {
      "left" : "boolean processed = tb.processEndTag(\"tr\");",
      "right" : "boolean processed = tb.processEndTag(\"tr\");",
      "info" : "VariableDeclarationStatement[54714-54757]:VariableDeclarationStatement[54732-54775]"
    }, {
      "left" : "if (processed)",
      "right" : "if (processed)",
      "info" : "IfStatement[54770-54869]:IfStatement[54788-54887]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[54801-54822]:ReturnStatement[54819-54840]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[54856-54869]:ReturnStatement[54874-54887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54953-56850]:Block[54971-56868]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[54967-56815]:IfStatement[54985-56833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54985-56310]:Block[55003-56328]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[55003-55038]:VariableDeclarationStatement[55021-55056]"
    }, {
      "left" : "String name = endTag.normalName();",
      "right" : "String name = endTag.normalName();",
      "info" : "VariableDeclarationStatement[55055-55089]:VariableDeclarationStatement[55073-55107]"
    }, {
      "left" : "if (StringUtil.in(name, \"td\", \"th\"))",
      "right" : "if (StringUtil.in(name, \"td\", \"th\"))",
      "info" : "IfStatement[55107-56296]:IfStatement[55125-56314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55144-55738]:Block[55162-55756]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[55166-55411]:IfStatement[55184-55429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55194-55411]:Block[55212-55429]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[55220-55235]:ExpressionStatement[55238-55253]"
    }, {
      "left" : "tb.transition(InRow);",
      "right" : "tb.transition(InRow);",
      "info" : "ExpressionStatement[55260-55281]:ExpressionStatement[55278-55299]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55376-55389]:ReturnStatement[55394-55407]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[55432-55460]:ExpressionStatement[55450-55478]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[55481-55570]:IfStatement[55499-55588]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[55555-55570]:ExpressionStatement[55573-55588]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[55591-55616]:ExpressionStatement[55609-55634]"
    }, {
      "left" : "tb.clearFormattingElementsToLastMarker();",
      "right" : "tb.clearFormattingElementsToLastMarker();",
      "info" : "ExpressionStatement[55637-55678]:ExpressionStatement[55655-55696]"
    }, {
      "left" : "tb.transition(InRow);",
      "right" : "tb.transition(InRow);",
      "info" : "ExpressionStatement[55699-55720]:ExpressionStatement[55717-55738]"
    }, {
      "left" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\"))",
      "right" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\"))",
      "info" : "IfStatement[55744-56296]:IfStatement[55762-56314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55815-55904]:Block[55833-55922]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[55837-55852]:ExpressionStatement[55855-55870]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55873-55886]:ReturnStatement[55891-55904]"
    }, {
      "left" : "if (StringUtil.in(name, \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(name, \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "info" : "IfStatement[55910-56296]:IfStatement[55928-56314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55977-56223]:Block[55995-56241]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[55999-56128]:IfStatement[56017-56146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56027-56128]:Block[56045-56146]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[56053-56068]:ExpressionStatement[56071-56086]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[56093-56106]:ReturnStatement[56111-56124]"
    }, {
      "left" : "closeCell(tb);",
      "right" : "closeCell(tb);",
      "info" : "ExpressionStatement[56149-56163]:ExpressionStatement[56167-56181]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[56184-56205]:ReturnStatement[56202-56223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56229-56296]:Block[56247-56314]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[56251-56278]:ReturnStatement[56269-56296]"
    }, {
      "left" : "if (t.isStartTag() &&\n                    StringUtil.in(t.asStartTag().normalName(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "right" : "if (t.isStartTag() &&\n                    StringUtil.in(t.asStartTag().normalName(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "info" : "IfStatement[56316-56815]:IfStatement[56334-56833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56505-56750]:Block[56523-56768]"
    }, {
      "left" : "if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\")))",
      "right" : "if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\")))",
      "info" : "IfStatement[56523-56667]:IfStatement[56541-56685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56578-56667]:Block[56596-56685]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[56600-56615]:ExpressionStatement[56618-56633]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[56636-56649]:ReturnStatement[56654-56667]"
    }, {
      "left" : "closeCell(tb);",
      "right" : "closeCell(tb);",
      "info" : "ExpressionStatement[56684-56698]:ExpressionStatement[56702-56716]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[56715-56736]:ReturnStatement[56733-56754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56756-56815]:Block[56774-56833]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[56774-56801]:ReturnStatement[56792-56819]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[56828-56840]:ReturnStatement[56846-56858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56918-56971]:Block[56936-56989]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[56932-56961]:ReturnStatement[56950-56979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57024-57205]:Block[57042-57223]"
    }, {
      "left" : "if (tb.inTableScope(\"td\"))",
      "right" : "if (tb.inTableScope(\"td\"))",
      "info" : "IfStatement[57038-57161]:IfStatement[57056-57179]"
    }, {
      "left" : "tb.processEndTag(\"td\");",
      "right" : "tb.processEndTag(\"td\");",
      "info" : "ExpressionStatement[57081-57104]:ExpressionStatement[57099-57122]"
    }, {
      "left" : "tb.processEndTag(\"th\");",
      "right" : "tb.processEndTag(\"th\");",
      "info" : "ExpressionStatement[57138-57161]:ExpressionStatement[57156-57179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57281-60974]:Block[57299-60992]"
    }, {
      "left" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.insert(c);\n                    }\n                    break;\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.normalName();\n                    if (name.equals(\"html\"))\n                        return tb.process(start, InBody);\n                    else if (name.equals(\"option\")) {\n                        tb.processEndTag(\"option\");\n                        tb.insert(start);\n                    } else if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        else if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.processEndTag(\"optgroup\");\n                        tb.insert(start);\n                    } else if (name.equals(\"select\")) {\n                        tb.error(this);\n                        return tb.processEndTag(\"select\");\n                    } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) {\n                        tb.error(this);\n                        if (!tb.inSelectScope(\"select\"))\n                            return false; // frag\n                        tb.processEndTag(\"select\");\n                        return tb.process(start);\n                    } else if (name.equals(\"script\")) {\n                        return tb.process(t, InHead);\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.normalName();\n                    if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                            tb.processEndTag(\"option\");\n                        if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.pop();\n                        else\n                            tb.error(this);\n                    } else if (name.equals(\"option\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.pop();\n                        else\n                            tb.error(this);\n                    } else if (name.equals(\"select\")) {\n                        if (!tb.inSelectScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.popStackToClose(name);\n                            tb.resetInsertionMode();\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (!tb.currentElement().nodeName().equals(\"html\"))\n                        tb.error(this);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "right" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.insert(c);\n                    }\n                    break;\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.normalName();\n                    if (name.equals(\"html\"))\n                        return tb.process(start, InBody);\n                    else if (name.equals(\"option\")) {\n                        tb.processEndTag(\"option\");\n                        tb.insert(start);\n                    } else if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        else if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.processEndTag(\"optgroup\");\n                        tb.insert(start);\n                    } else if (name.equals(\"select\")) {\n                        tb.error(this);\n                        return tb.processEndTag(\"select\");\n                    } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) {\n                        tb.error(this);\n                        if (!tb.inSelectScope(\"select\"))\n                            return false; // frag\n                        tb.processEndTag(\"select\");\n                        return tb.process(start);\n                    } else if (name.equals(\"script\")) {\n                        return tb.process(t, InHead);\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.normalName();\n                    if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                            tb.processEndTag(\"option\");\n                        if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.pop();\n                        else\n                            tb.error(this);\n                    } else if (name.equals(\"option\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.pop();\n                        else\n                            tb.error(this);\n                    } else if (name.equals(\"select\")) {\n                        if (!tb.inSelectScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.popStackToClose(name);\n                            tb.resetInsertionMode();\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (!tb.currentElement().nodeName().equals(\"html\"))\n                        tb.error(this);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "info" : "SwitchStatement[57295-60939]:SwitchStatement[57313-60957]"
    }, {
      "left" : "case Character:",
      "right" : "case Character:",
      "info" : "SwitchCase[57329-57344]:SwitchCase[57347-57362]"
    }, {
      "left" : "Token.Character c = t.asCharacter();",
      "right" : "Token.Character c = t.asCharacter();",
      "info" : "VariableDeclarationStatement[57365-57401]:VariableDeclarationStatement[57383-57419]"
    }, {
      "left" : "if (c.getData().equals(nullString))",
      "right" : "if (c.getData().equals(nullString))",
      "info" : "IfStatement[57422-57626]:IfStatement[57440-57644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57458-57559]:Block[57476-57577]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[57484-57499]:ExpressionStatement[57502-57517]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[57524-57537]:ReturnStatement[57542-57555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57565-57626]:Block[57583-57644]"
    }, {
      "left" : "tb.insert(c);",
      "right" : "tb.insert(c);",
      "info" : "ExpressionStatement[57591-57604]:ExpressionStatement[57609-57622]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57647-57653]:BreakStatement[57665-57671]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[57670-57683]:SwitchCase[57688-57701]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[57704-57729]:ExpressionStatement[57722-57747]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57750-57756]:BreakStatement[57768-57774]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[57773-57786]:SwitchCase[57791-57804]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[57807-57822]:ExpressionStatement[57825-57840]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[57843-57856]:ReturnStatement[57861-57874]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[57873-57887]:SwitchCase[57891-57905]"
    }, {
      "left" : "Token.StartTag start = t.asStartTag();",
      "right" : "Token.StartTag start = t.asStartTag();",
      "info" : "VariableDeclarationStatement[57908-57946]:VariableDeclarationStatement[57926-57964]"
    }, {
      "left" : "String name = start.normalName();",
      "right" : "String name = start.normalName();",
      "info" : "VariableDeclarationStatement[57967-58000]:VariableDeclarationStatement[57985-58018]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[58021-59328]:IfStatement[58039-59346]"
    }, {
      "left" : "return tb.process(start, InBody);",
      "right" : "return tb.process(start, InBody);",
      "info" : "ReturnStatement[58070-58103]:ReturnStatement[58088-58121]"
    }, {
      "left" : "if (name.equals(\"option\"))",
      "right" : "if (name.equals(\"option\"))",
      "info" : "IfStatement[58129-59328]:IfStatement[58147-59346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58156-58273]:Block[58174-58291]"
    }, {
      "left" : "tb.processEndTag(\"option\");",
      "right" : "tb.processEndTag(\"option\");",
      "info" : "ExpressionStatement[58182-58209]:ExpressionStatement[58200-58227]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[58234-58251]:ExpressionStatement[58252-58269]"
    }, {
      "left" : "if (name.equals(\"optgroup\"))",
      "right" : "if (name.equals(\"optgroup\"))",
      "info" : "IfStatement[58279-59328]:IfStatement[58297-59346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58308-58648]:Block[58326-58666]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "info" : "IfStatement[58334-58584]:IfStatement[58352-58602]"
    }, {
      "left" : "tb.processEndTag(\"option\");",
      "right" : "tb.processEndTag(\"option\");",
      "info" : "ExpressionStatement[58415-58442]:ExpressionStatement[58433-58460]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
      "info" : "IfStatement[58472-58584]:IfStatement[58490-58602]"
    }, {
      "left" : "tb.processEndTag(\"optgroup\");",
      "right" : "tb.processEndTag(\"optgroup\");",
      "info" : "ExpressionStatement[58555-58584]:ExpressionStatement[58573-58602]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[58609-58626]:ExpressionStatement[58627-58644]"
    }, {
      "left" : "if (name.equals(\"select\"))",
      "right" : "if (name.equals(\"select\"))",
      "info" : "IfStatement[58654-59328]:IfStatement[58672-59346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58681-58803]:Block[58699-58821]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[58707-58722]:ExpressionStatement[58725-58740]"
    }, {
      "left" : "return tb.processEndTag(\"select\");",
      "right" : "return tb.processEndTag(\"select\");",
      "info" : "ReturnStatement[58747-58781]:ReturnStatement[58765-58799]"
    }, {
      "left" : "if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\"))",
      "right" : "if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\"))",
      "info" : "IfStatement[58809-59328]:IfStatement[58827-59346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58865-59137]:Block[58883-59155]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[58891-58906]:ExpressionStatement[58909-58924]"
    }, {
      "left" : "if (!tb.inSelectScope(\"select\"))",
      "right" : "if (!tb.inSelectScope(\"select\"))",
      "info" : "IfStatement[58931-59005]:IfStatement[58949-59023]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[58992-59005]:ReturnStatement[59010-59023]"
    }, {
      "left" : "tb.processEndTag(\"select\");",
      "right" : "tb.processEndTag(\"select\");",
      "info" : "ExpressionStatement[59038-59065]:ExpressionStatement[59056-59083]"
    }, {
      "left" : "return tb.process(start);",
      "right" : "return tb.process(start);",
      "info" : "ReturnStatement[59090-59115]:ReturnStatement[59108-59133]"
    }, {
      "left" : "if (name.equals(\"script\"))",
      "right" : "if (name.equals(\"script\"))",
      "info" : "IfStatement[59143-59328]:IfStatement[59161-59346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59170-59247]:Block[59188-59265]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[59196-59225]:ReturnStatement[59214-59243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59253-59328]:Block[59271-59346]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[59279-59306]:ReturnStatement[59297-59324]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59349-59355]:BreakStatement[59367-59373]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[59372-59384]:SwitchCase[59390-59402]"
    }, {
      "left" : "Token.EndTag end = t.asEndTag();",
      "right" : "Token.EndTag end = t.asEndTag();",
      "info" : "VariableDeclarationStatement[59405-59437]:VariableDeclarationStatement[59423-59455]"
    }, {
      "left" : "name = end.normalName();",
      "right" : "name = end.normalName();",
      "info" : "ExpressionStatement[59458-59482]:ExpressionStatement[59476-59500]"
    }, {
      "left" : "if (name.equals(\"optgroup\"))",
      "right" : "if (name.equals(\"optgroup\"))",
      "info" : "IfStatement[59503-60660]:IfStatement[59521-60678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59532-59996]:Block[59550-60014]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))",
      "info" : "IfStatement[59558-59784]:IfStatement[59576-59802]"
    }, {
      "left" : "tb.processEndTag(\"option\");",
      "right" : "tb.processEndTag(\"option\");",
      "info" : "ExpressionStatement[59757-59784]:ExpressionStatement[59775-59802]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
      "info" : "IfStatement[59809-59974]:IfStatement[59827-59992]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[59892-59901]:ExpressionStatement[59910-59919]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[59959-59974]:ExpressionStatement[59977-59992]"
    }, {
      "left" : "if (name.equals(\"option\"))",
      "right" : "if (name.equals(\"option\"))",
      "info" : "IfStatement[60002-60660]:IfStatement[60020-60678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60029-60240]:Block[60047-60258]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "info" : "IfStatement[60055-60218]:IfStatement[60073-60236]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[60136-60145]:ExpressionStatement[60154-60163]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[60203-60218]:ExpressionStatement[60221-60236]"
    }, {
      "left" : "if (name.equals(\"select\"))",
      "right" : "if (name.equals(\"select\"))",
      "info" : "IfStatement[60246-60660]:IfStatement[60264-60678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60273-60603]:Block[60291-60621]"
    }, {
      "left" : "if (!tb.inSelectScope(name))",
      "right" : "if (!tb.inSelectScope(name))",
      "info" : "IfStatement[60299-60581]:IfStatement[60317-60599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60328-60441]:Block[60346-60459]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[60358-60373]:ExpressionStatement[60376-60391]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[60402-60415]:ReturnStatement[60420-60433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60447-60581]:Block[60465-60599]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[60477-60502]:ExpressionStatement[60495-60520]"
    }, {
      "left" : "tb.resetInsertionMode();",
      "right" : "tb.resetInsertionMode();",
      "info" : "ExpressionStatement[60531-60555]:ExpressionStatement[60549-60573]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[60633-60660]:ReturnStatement[60651-60678]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60681-60687]:BreakStatement[60699-60705]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[60704-60713]:SwitchCase[60722-60731]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[60734-60825]:IfStatement[60752-60843]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[60810-60825]:ExpressionStatement[60828-60843]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60846-60852]:BreakStatement[60864-60870]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[60869-60877]:SwitchCase[60887-60895]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[60898-60925]:ReturnStatement[60916-60943]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[60952-60964]:ReturnStatement[60970-60982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61042-61107]:Block[61060-61125]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[61056-61071]:ExpressionStatement[61074-61089]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[61084-61097]:ReturnStatement[61102-61115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61190-61938]:Block[61208-61956]"
    }, {
      "left" : "if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
      "right" : "if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
      "info" : "IfStatement[61204-61928]:IfStatement[61222-61946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61335-61464]:Block[61353-61482]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[61353-61368]:ExpressionStatement[61371-61386]"
    }, {
      "left" : "tb.processEndTag(\"select\");",
      "right" : "tb.processEndTag(\"select\");",
      "info" : "ExpressionStatement[61385-61412]:ExpressionStatement[61403-61430]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[61429-61450]:ReturnStatement[61447-61468]"
    }, {
      "left" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
      "right" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
      "info" : "IfStatement[61470-61928]:IfStatement[61488-61946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61597-61859]:Block[61615-61877]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[61615-61630]:ExpressionStatement[61633-61648]"
    }, {
      "left" : "if (tb.inTableScope(t.asEndTag().normalName()))",
      "right" : "if (tb.inTableScope(t.asEndTag().normalName()))",
      "info" : "IfStatement[61647-61845]:IfStatement[61665-61863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61695-61806]:Block[61713-61824]"
    }, {
      "left" : "tb.processEndTag(\"select\");",
      "right" : "tb.processEndTag(\"select\");",
      "info" : "ExpressionStatement[61717-61744]:ExpressionStatement[61735-61762]"
    }, {
      "left" : "return (tb.process(t));",
      "right" : "return (tb.process(t));",
      "info" : "ReturnStatement[61765-61788]:ReturnStatement[61783-61806]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[61832-61845]:ReturnStatement[61850-61863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61865-61928]:Block[61883-61946]"
    }, {
      "left" : "return tb.process(t, InSelect);",
      "right" : "return tb.process(t, InSelect);",
      "info" : "ReturnStatement[61883-61914]:ReturnStatement[61901-61932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62015-62979]:Block[62033-62997]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[62029-62944]:IfStatement[62047-62962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62050-62111]:Block[62068-62129]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[62068-62097]:ReturnStatement[62086-62115]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[62117-62944]:IfStatement[62135-62962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62136-62211]:Block[62154-62229]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[62154-62179]:ExpressionStatement[62172-62197]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[62217-62944]:IfStatement[62235-62962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62236-62313]:Block[62254-62331]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[62254-62269]:ExpressionStatement[62272-62287]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[62286-62299]:ReturnStatement[62304-62317]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "info" : "IfStatement[62319-62944]:IfStatement[62337-62962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62385-62446]:Block[62403-62464]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[62403-62432]:ReturnStatement[62421-62450]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\"))",
      "info" : "IfStatement[62452-62944]:IfStatement[62470-62962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62514-62739]:Block[62532-62757]"
    }, {
      "left" : "if (tb.isFragmentParsing())",
      "right" : "if (tb.isFragmentParsing())",
      "info" : "IfStatement[62532-62725]:IfStatement[62550-62743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62560-62649]:Block[62578-62667]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[62582-62597]:ExpressionStatement[62600-62615]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[62618-62631]:ReturnStatement[62636-62649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62655-62725]:Block[62673-62743]"
    }, {
      "left" : "tb.transition(AfterAfterBody);",
      "right" : "tb.transition(AfterAfterBody);",
      "info" : "ExpressionStatement[62677-62707]:ExpressionStatement[62695-62725]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[62745-62944]:IfStatement[62763-62962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62760-62814]:Block[62778-62832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62820-62944]:Block[62838-62962]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[62838-62853]:ExpressionStatement[62856-62871]"
    }, {
      "left" : "tb.transition(InBody);",
      "right" : "tb.transition(InBody);",
      "info" : "ExpressionStatement[62870-62892]:ExpressionStatement[62888-62910]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[62909-62930]:ReturnStatement[62927-62948]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[62957-62969]:ReturnStatement[62975-62987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63057-64784]:Block[63075-64802]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[63071-64749]:IfStatement[63089-64767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63092-63151]:Block[63110-63169]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[63110-63137]:ExpressionStatement[63128-63155]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[63157-64749]:IfStatement[63175-64767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63176-63233]:Block[63194-63251]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[63194-63219]:ExpressionStatement[63212-63237]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[63239-64749]:IfStatement[63257-64767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63258-63335]:Block[63276-63353]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[63276-63291]:ExpressionStatement[63294-63309]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[63308-63321]:ReturnStatement[63326-63339]"
    }, {
      "left" : "if (t.isStartTag())",
      "right" : "if (t.isStartTag())",
      "info" : "IfStatement[63341-64749]:IfStatement[63359-64767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63361-63985]:Block[63379-64003]"
    }, {
      "left" : "Token.StartTag start = t.asStartTag();",
      "right" : "Token.StartTag start = t.asStartTag();",
      "info" : "VariableDeclarationStatement[63379-63417]:VariableDeclarationStatement[63397-63435]"
    }, {
      "left" : "String name = start.normalName();",
      "right" : "String name = start.normalName();",
      "info" : "VariableDeclarationStatement[63434-63467]:VariableDeclarationStatement[63452-63485]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[63484-63971]:IfStatement[63502-63989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63509-63582]:Block[63527-63600]"
    }, {
      "left" : "return tb.process(start, InBody);",
      "right" : "return tb.process(start, InBody);",
      "info" : "ReturnStatement[63531-63564]:ReturnStatement[63549-63582]"
    }, {
      "left" : "if (name.equals(\"frameset\"))",
      "right" : "if (name.equals(\"frameset\"))",
      "info" : "IfStatement[63588-63971]:IfStatement[63606-63989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63617-63674]:Block[63635-63692]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[63639-63656]:ExpressionStatement[63657-63674]"
    }, {
      "left" : "if (name.equals(\"frame\"))",
      "right" : "if (name.equals(\"frame\"))",
      "info" : "IfStatement[63680-63971]:IfStatement[63698-63989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63706-63768]:Block[63724-63786]"
    }, {
      "left" : "tb.insertEmpty(start);",
      "right" : "tb.insertEmpty(start);",
      "info" : "ExpressionStatement[63728-63750]:ExpressionStatement[63746-63768]"
    }, {
      "left" : "if (name.equals(\"noframes\"))",
      "right" : "if (name.equals(\"noframes\"))",
      "info" : "IfStatement[63774-63971]:IfStatement[63792-63989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63803-63876]:Block[63821-63894]"
    }, {
      "left" : "return tb.process(start, InHead);",
      "right" : "return tb.process(start, InHead);",
      "info" : "ReturnStatement[63825-63858]:ReturnStatement[63843-63876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63882-63971]:Block[63900-63989]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[63904-63919]:ExpressionStatement[63922-63937]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[63940-63953]:ReturnStatement[63958-63971]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\"))",
      "info" : "IfStatement[63991-64749]:IfStatement[64009-64767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64057-64473]:Block[64075-64491]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[64075-64459]:IfStatement[64093-64477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64126-64223]:Block[64144-64241]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[64156-64171]:ExpressionStatement[64174-64189]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[64192-64205]:ReturnStatement[64210-64223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64229-64459]:Block[64247-64477]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[64251-64260]:ExpressionStatement[64269-64278]"
    }, {
      "left" : "if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\"))",
      "right" : "if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\"))",
      "info" : "IfStatement[64281-64441]:IfStatement[64299-64459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64364-64441]:Block[64382-64459]"
    }, {
      "left" : "tb.transition(AfterFrameset);",
      "right" : "tb.transition(AfterFrameset);",
      "info" : "ExpressionStatement[64390-64419]:ExpressionStatement[64408-64437]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[64479-64749]:IfStatement[64497-64767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64494-64666]:Block[64512-64684]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[64512-64652]:IfStatement[64530-64670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64564-64652]:Block[64582-64670]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[64586-64601]:ExpressionStatement[64604-64619]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[64622-64634]:ReturnStatement[64640-64652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64672-64749]:Block[64690-64767]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[64690-64705]:ExpressionStatement[64708-64723]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[64722-64735]:ReturnStatement[64740-64753]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[64762-64774]:ReturnStatement[64780-64792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64865-65752]:Block[64883-65770]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[64879-65717]:IfStatement[64897-65735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64900-64959]:Block[64918-64977]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[64918-64945]:ExpressionStatement[64936-64963]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[64965-65717]:IfStatement[64983-65735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64984-65041]:Block[65002-65059]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[65002-65027]:ExpressionStatement[65020-65045]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[65047-65717]:IfStatement[65065-65735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65066-65143]:Block[65084-65161]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[65084-65099]:ExpressionStatement[65102-65117]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[65116-65129]:ReturnStatement[65134-65147]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "info" : "IfStatement[65149-65717]:IfStatement[65167-65735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65215-65276]:Block[65233-65294]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[65233-65262]:ReturnStatement[65251-65280]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\"))",
      "info" : "IfStatement[65282-65717]:IfStatement[65300-65735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65344-65410]:Block[65362-65428]"
    }, {
      "left" : "tb.transition(AfterAfterFrameset);",
      "right" : "tb.transition(AfterAfterFrameset);",
      "info" : "ExpressionStatement[65362-65396]:ExpressionStatement[65380-65414]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\"))",
      "info" : "IfStatement[65416-65717]:IfStatement[65434-65735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65486-65547]:Block[65504-65565]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[65504-65533]:ReturnStatement[65522-65551]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[65553-65717]:IfStatement[65571-65735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65568-65634]:Block[65586-65652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65640-65717]:Block[65658-65735]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[65658-65673]:ExpressionStatement[65676-65691]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[65690-65703]:ReturnStatement[65708-65721]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[65730-65742]:ReturnStatement[65748-65760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65834-66331]:Block[65852-66349]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[65848-66296]:IfStatement[65866-66314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65867-65924]:Block[65885-65942]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[65885-65910]:ExpressionStatement[65903-65928]"
    }, {
      "left" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")))",
      "right" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")))",
      "info" : "IfStatement[65930-66296]:IfStatement[65948-66314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66034-66095]:Block[66052-66113]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[66052-66081]:ReturnStatement[66070-66099]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[66101-66296]:IfStatement[66119-66314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66116-66166]:Block[66134-66184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66172-66296]:Block[66190-66314]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[66190-66205]:ExpressionStatement[66208-66223]"
    }, {
      "left" : "tb.transition(InBody);",
      "right" : "tb.transition(InBody);",
      "info" : "ExpressionStatement[66222-66244]:ExpressionStatement[66240-66262]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[66261-66282]:ReturnStatement[66279-66300]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[66309-66321]:ReturnStatement[66327-66339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66417-67004]:Block[66435-67022]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[66431-66969]:IfStatement[66449-66987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66450-66507]:Block[66468-66525]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[66468-66493]:ExpressionStatement[66486-66511]"
    }, {
      "left" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")))",
      "right" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")))",
      "info" : "IfStatement[66513-66969]:IfStatement[66531-66987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66617-66678]:Block[66635-66696]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[66635-66664]:ReturnStatement[66653-66682]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[66684-66969]:IfStatement[66702-66987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66699-66749]:Block[66717-66767]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\"))",
      "info" : "IfStatement[66755-66969]:IfStatement[66773-66987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66825-66886]:Block[66843-66904]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[66843-66872]:ReturnStatement[66861-66890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66892-66969]:Block[66910-66987]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[66910-66925]:ExpressionStatement[66928-66943]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[66942-66955]:ReturnStatement[66960-66973]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[66982-66994]:ReturnStatement[67000-67012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67086-67180]:Block[67104-67198]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[67100-67112]:ReturnStatement[67118-67130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67364-67526]:Block[67382-67544]"
    }, {
      "left" : "if (t.isCharacter())",
      "right" : "if (t.isCharacter())",
      "info" : "IfStatement[67374-67498]:IfStatement[67392-67516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67395-67498]:Block[67413-67516]"
    }, {
      "left" : "String data = t.asCharacter().getData();",
      "right" : "String data = t.asCharacter().getData();",
      "info" : "VariableDeclarationStatement[67409-67449]:VariableDeclarationStatement[67427-67467]"
    }, {
      "left" : "return isWhitespace(data);",
      "right" : "return isWhitespace(data);",
      "info" : "ReturnStatement[67462-67488]:ReturnStatement[67480-67506]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[67507-67520]:ReturnStatement[67525-67538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67581-67855]:Block[67599-67873]"
    }, {
      "left" : "for (int i = 0; i < data.length(); i++)",
      "right" : "for (int i = 0; i < data.length(); i++)",
      "info" : "ForStatement[67665-67828]:ForStatement[67683-67846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67705-67828]:Block[67723-67846]"
    }, {
      "left" : "char c = data.charAt(i);",
      "right" : "char c = data.charAt(i);",
      "info" : "VariableDeclarationStatement[67719-67743]:VariableDeclarationStatement[67737-67761]"
    }, {
      "left" : "if (!StringUtil.isWhitespace(c))",
      "right" : "if (!StringUtil.isWhitespace(c))",
      "info" : "IfStatement[67756-67818]:IfStatement[67774-67836]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[67805-67818]:ReturnStatement[67823-67836]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[67837-67849]:ReturnStatement[67855-67867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67939-68092]:Block[67957-68110]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[67949-67969]:ExpressionStatement[67967-67987]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "right" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "info" : "ExpressionStatement[67978-68025]:ExpressionStatement[67996-68043]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[68034-68057]:ExpressionStatement[68052-68075]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[68066-68086]:ExpressionStatement[68084-68104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68177-68331]:Block[68195-68349]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[68187-68207]:ExpressionStatement[68205-68225]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.Rawtext);",
      "right" : "tb.tokeniser.transition(TokeniserState.Rawtext);",
      "info" : "ExpressionStatement[68216-68264]:ExpressionStatement[68234-68282]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[68273-68296]:ExpressionStatement[68291-68314]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[68305-68325]:ExpressionStatement[68323-68343]"
    } ]
  },
  "interFileMappings" : { }
}