{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "OpenMapRealMatrix",
      "right" : "OpenMapRealMatrix",
      "info" : "TypeDeclaration[1004-9203]:TypeDeclaration[1004-9441]"
    }, {
      "left" : "private static final long serialVersionUID = -5962461716457143437L;",
      "right" : "private static final long serialVersionUID = -5962461716457143437L;",
      "info" : "FieldDeclaration[1220-1331]:FieldDeclaration[1220-1331]"
    }, {
      "left" : "private final int rows;",
      "right" : "private final int rows;",
      "info" : "FieldDeclaration[1336-1400]:FieldDeclaration[1336-1400]"
    }, {
      "left" : "private final int columns;",
      "right" : "private final int columns;",
      "info" : "FieldDeclaration[1405-1475]:FieldDeclaration[1405-1475]"
    }, {
      "left" : "private final OpenIntToDoubleHashMap entries;",
      "right" : "private final OpenIntToDoubleHashMap entries;",
      "info" : "FieldDeclaration[1480-1574]:FieldDeclaration[1480-1574]"
    }, {
      "left" : "public OpenMapRealMatrix(int rowDimension, int columnDimension)",
      "right" : "public OpenMapRealMatrix(int rowDimension, int columnDimension)",
      "info" : "MethodDeclaration[1580-2044]:MethodDeclaration[1580-2282]"
    }, {
      "left" : "public OpenMapRealMatrix(OpenMapRealMatrix matrix)",
      "right" : "public OpenMapRealMatrix(OpenMapRealMatrix matrix)",
      "info" : "MethodDeclaration[2050-2353]:MethodDeclaration[2288-2591]"
    }, {
      "left" : "public OpenMapRealMatrix copy()",
      "right" : "public OpenMapRealMatrix copy()",
      "info" : "MethodDeclaration[2359-2481]:MethodDeclaration[2597-2719]"
    }, {
      "left" : "public OpenMapRealMatrix createMatrix(int rowDimension, int columnDimension)",
      "right" : "public OpenMapRealMatrix createMatrix(int rowDimension, int columnDimension)",
      "info" : "MethodDeclaration[2487-2679]:MethodDeclaration[2725-2917]"
    }, {
      "left" : "public int getColumnDimension()",
      "right" : "public int getColumnDimension()",
      "info" : "MethodDeclaration[2685-2787]:MethodDeclaration[2923-3025]"
    }, {
      "left" : "public OpenMapRealMatrix add(OpenMapRealMatrix m)",
      "right" : "public OpenMapRealMatrix add(OpenMapRealMatrix m)",
      "info" : "MethodDeclaration[2793-3637]:MethodDeclaration[3031-3875]"
    }, {
      "left" : "public OpenMapRealMatrix subtract(final RealMatrix m)",
      "right" : "public OpenMapRealMatrix subtract(final RealMatrix m)",
      "info" : "MethodDeclaration[3643-3920]:MethodDeclaration[3881-4158]"
    }, {
      "left" : "public OpenMapRealMatrix subtract(OpenMapRealMatrix m)",
      "right" : "public OpenMapRealMatrix subtract(OpenMapRealMatrix m)",
      "info" : "MethodDeclaration[3926-4770]:MethodDeclaration[4164-5008]"
    }, {
      "left" : "public RealMatrix multiply(final RealMatrix m)",
      "right" : "public RealMatrix multiply(final RealMatrix m)",
      "info" : "MethodDeclaration[4776-5742]:MethodDeclaration[5014-5980]"
    }, {
      "left" : "public OpenMapRealMatrix multiply(OpenMapRealMatrix m)",
      "right" : "public OpenMapRealMatrix multiply(OpenMapRealMatrix m)",
      "info" : "MethodDeclaration[5748-7261]:MethodDeclaration[5986-7499]"
    }, {
      "left" : "public double getEntry(int row, int column)",
      "right" : "public double getEntry(int row, int column)",
      "info" : "MethodDeclaration[7267-7508]:MethodDeclaration[7505-7746]"
    }, {
      "left" : "public int getRowDimension()",
      "right" : "public int getRowDimension()",
      "info" : "MethodDeclaration[7514-7610]:MethodDeclaration[7752-7848]"
    }, {
      "left" : "public void setEntry(int row, int column, double value)",
      "right" : "public void setEntry(int row, int column, double value)",
      "info" : "MethodDeclaration[7616-7981]:MethodDeclaration[7854-8219]"
    }, {
      "left" : "public void addToEntry(int row, int column, double increment)",
      "right" : "public void addToEntry(int row, int column, double increment)",
      "info" : "MethodDeclaration[7987-8426]:MethodDeclaration[8225-8664]"
    }, {
      "left" : "public void multiplyEntry(int row, int column, double factor)",
      "right" : "public void multiplyEntry(int row, int column, double factor)",
      "info" : "MethodDeclaration[8432-8868]:MethodDeclaration[8670-9106]"
    }, {
      "left" : "private int computeKey(int row, int column)",
      "right" : "private int computeKey(int row, int column)",
      "info" : "MethodDeclaration[8874-9199]:MethodDeclaration[9112-9437]"
    } ],
    "mappings" : [
 {
      "left" : "AbstractRealMatrix",
      "right" : "AbstractRealMatrix",
      "info" : "SimpleType[1149-1167]:SimpleType[1149-1167]"
    }, {
      "left" : "SparseRealMatrix",
      "right" : "SparseRealMatrix",
      "info" : "SimpleType[1183-1199]:SimpleType[1183-1199]"
    }, {
      "left" : "Serializable",
      "right" : "Serializable",
      "info" : "SimpleType[1201-1213]:SimpleType[1201-1213]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1797-1803]:Modifier[1797-1803]"
    }, {
      "left" : "OpenMapRealMatrix",
      "right" : "OpenMapRealMatrix",
      "info" : "SimpleName[1804-1821]:SimpleName[1804-1821]"
    }, {
      "left" : "int rowDimension",
      "right" : "int rowDimension",
      "info" : "SingleVariableDeclaration[1822-1838]:SingleVariableDeclaration[1822-1838]"
    }, {
      "left" : "int columnDimension",
      "right" : "int columnDimension",
      "info" : "SingleVariableDeclaration[1840-1859]:SingleVariableDeclaration[1840-1859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1861-2044]:Block[1861-2282]"
    }, {
      "left" : "super(rowDimension, columnDimension);",
      "right" : "super(rowDimension, columnDimension);",
      "info" : "SuperConstructorInvocation[1871-1908]:SuperConstructorInvocation[1871-1908]"
    }, {
      "left" : "this.rows = rowDimension;",
      "right" : "this.rows = rowDimension;",
      "info" : "ExpressionStatement[1917-1942]:ExpressionStatement[2155-2180]"
    }, {
      "left" : "this.columns = columnDimension;",
      "right" : "this.columns = columnDimension;",
      "info" : "ExpressionStatement[1951-1982]:ExpressionStatement[2189-2220]"
    }, {
      "left" : "this.entries = new OpenIntToDoubleHashMap(0.0);",
      "right" : "this.entries = new OpenIntToDoubleHashMap(0.0);",
      "info" : "ExpressionStatement[1991-2038]:ExpressionStatement[2229-2276]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2156-2162]:Modifier[2394-2400]"
    }, {
      "left" : "OpenMapRealMatrix",
      "right" : "OpenMapRealMatrix",
      "info" : "SimpleName[2163-2180]:SimpleName[2401-2418]"
    }, {
      "left" : "OpenMapRealMatrix matrix",
      "right" : "OpenMapRealMatrix matrix",
      "info" : "SingleVariableDeclaration[2181-2205]:SingleVariableDeclaration[2419-2443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2207-2353]:Block[2445-2591]"
    }, {
      "left" : "this.rows = matrix.rows;",
      "right" : "this.rows = matrix.rows;",
      "info" : "ExpressionStatement[2217-2241]:ExpressionStatement[2455-2479]"
    }, {
      "left" : "this.columns = matrix.columns;",
      "right" : "this.columns = matrix.columns;",
      "info" : "ExpressionStatement[2250-2280]:ExpressionStatement[2488-2518]"
    }, {
      "left" : "this.entries = new OpenIntToDoubleHashMap(matrix.entries);",
      "right" : "this.entries = new OpenIntToDoubleHashMap(matrix.entries);",
      "info" : "ExpressionStatement[2289-2347]:ExpressionStatement[2527-2585]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2384-2393]:MarkerAnnotation[2622-2631]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2398-2404]:Modifier[2636-2642]"
    }, {
      "left" : "OpenMapRealMatrix",
      "right" : "OpenMapRealMatrix",
      "info" : "SimpleType[2405-2422]:SimpleType[2643-2660]"
    }, {
      "left" : "copy",
      "right" : "copy",
      "info" : "SimpleName[2423-2427]:SimpleName[2661-2665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2430-2481]:Block[2668-2719]"
    }, {
      "left" : "return new OpenMapRealMatrix(this);",
      "right" : "return new OpenMapRealMatrix(this);",
      "info" : "ReturnStatement[2440-2475]:ReturnStatement[2678-2713]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2512-2521]:MarkerAnnotation[2750-2759]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2526-2532]:Modifier[2764-2770]"
    }, {
      "left" : "OpenMapRealMatrix",
      "right" : "OpenMapRealMatrix",
      "info" : "SimpleType[2533-2550]:SimpleType[2771-2788]"
    }, {
      "left" : "createMatrix",
      "right" : "createMatrix",
      "info" : "SimpleName[2551-2563]:SimpleName[2789-2801]"
    }, {
      "left" : "int rowDimension",
      "right" : "int rowDimension",
      "info" : "SingleVariableDeclaration[2564-2580]:SingleVariableDeclaration[2802-2818]"
    }, {
      "left" : "int columnDimension",
      "right" : "int columnDimension",
      "info" : "SingleVariableDeclaration[2582-2601]:SingleVariableDeclaration[2820-2839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2603-2679]:Block[2841-2917]"
    }, {
      "left" : "return new OpenMapRealMatrix(rowDimension, columnDimension);",
      "right" : "return new OpenMapRealMatrix(rowDimension, columnDimension);",
      "info" : "ReturnStatement[2613-2673]:ReturnStatement[2851-2911]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2710-2719]:MarkerAnnotation[2948-2957]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2724-2730]:Modifier[2962-2968]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[2731-2734]:PrimitiveType[2969-2972]"
    }, {
      "left" : "getColumnDimension",
      "right" : "getColumnDimension",
      "info" : "SimpleName[2735-2753]:SimpleName[2973-2991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2756-2787]:Block[2994-3025]"
    }, {
      "left" : "return columns;",
      "right" : "return columns;",
      "info" : "ReturnStatement[2766-2781]:ReturnStatement[3004-3019]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3079-3085]:Modifier[3317-3323]"
    }, {
      "left" : "OpenMapRealMatrix",
      "right" : "OpenMapRealMatrix",
      "info" : "SimpleType[3086-3103]:SimpleType[3324-3341]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[3104-3107]:SimpleName[3342-3345]"
    }, {
      "left" : "OpenMapRealMatrix m",
      "right" : "OpenMapRealMatrix m",
      "info" : "SingleVariableDeclaration[3108-3127]:SingleVariableDeclaration[3346-3365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3129-3637]:Block[3367-3875]"
    }, {
      "left" : "MatrixUtils.checkAdditionCompatible(this, m);",
      "right" : "MatrixUtils.checkAdditionCompatible(this, m);",
      "info" : "ExpressionStatement[3164-3209]:ExpressionStatement[3402-3447]"
    }, {
      "left" : "final OpenMapRealMatrix out = new OpenMapRealMatrix(this);",
      "right" : "final OpenMapRealMatrix out = new OpenMapRealMatrix(this);",
      "info" : "VariableDeclarationStatement[3219-3277]:VariableDeclarationStatement[3457-3515]"
    }, {
      "left" : "for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext())",
      "right" : "for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext())",
      "info" : "ForStatement[3286-3609]:ForStatement[3524-3847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3377-3609]:Block[3615-3847]"
    }, {
      "left" : "iterator.advance();",
      "right" : "iterator.advance();",
      "info" : "ExpressionStatement[3391-3410]:ExpressionStatement[3629-3648]"
    }, {
      "left" : "final int row = iterator.key() / columns;",
      "right" : "final int row = iterator.key() / columns;",
      "info" : "VariableDeclarationStatement[3423-3464]:VariableDeclarationStatement[3661-3702]"
    }, {
      "left" : "final int col = iterator.key() - row * columns;",
      "right" : "final int col = iterator.key() - row * columns;",
      "info" : "VariableDeclarationStatement[3477-3524]:VariableDeclarationStatement[3715-3762]"
    }, {
      "left" : "out.setEntry(row, col, getEntry(row, col) + iterator.value());",
      "right" : "out.setEntry(row, col, getEntry(row, col) + iterator.value());",
      "info" : "ExpressionStatement[3537-3599]:ExpressionStatement[3775-3837]"
    }, {
      "left" : "return out;",
      "right" : "return out;",
      "info" : "ReturnStatement[3619-3630]:ReturnStatement[3857-3868]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3668-3677]:MarkerAnnotation[3906-3915]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3682-3688]:Modifier[3920-3926]"
    }, {
      "left" : "OpenMapRealMatrix",
      "right" : "OpenMapRealMatrix",
      "info" : "SimpleType[3689-3706]:SimpleType[3927-3944]"
    }, {
      "left" : "subtract",
      "right" : "subtract",
      "info" : "SimpleName[3707-3715]:SimpleName[3945-3953]"
    }, {
      "left" : "final RealMatrix m",
      "right" : "final RealMatrix m",
      "info" : "SingleVariableDeclaration[3716-3734]:SingleVariableDeclaration[3954-3972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3736-3920]:Block[3974-4158]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[3746-3914]:TryStatement[3984-4152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3750-3813]:Block[3988-4051]"
    }, {
      "left" : "return subtract((OpenMapRealMatrix) m);",
      "right" : "return subtract((OpenMapRealMatrix) m);",
      "info" : "ReturnStatement[3764-3803]:ReturnStatement[4002-4041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3845-3914]:Block[4083-4152]"
    }, {
      "left" : "return (OpenMapRealMatrix) super.subtract(m);",
      "right" : "return (OpenMapRealMatrix) super.subtract(m);",
      "info" : "ReturnStatement[3859-3904]:ReturnStatement[4097-4142]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4208-4214]:Modifier[4446-4452]"
    }, {
      "left" : "OpenMapRealMatrix",
      "right" : "OpenMapRealMatrix",
      "info" : "SimpleType[4215-4232]:SimpleType[4453-4470]"
    }, {
      "left" : "subtract",
      "right" : "subtract",
      "info" : "SimpleName[4233-4241]:SimpleName[4471-4479]"
    }, {
      "left" : "OpenMapRealMatrix m",
      "right" : "OpenMapRealMatrix m",
      "info" : "SingleVariableDeclaration[4242-4261]:SingleVariableDeclaration[4480-4499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4263-4770]:Block[4501-5008]"
    }, {
      "left" : "MatrixUtils.checkAdditionCompatible(this, m);",
      "right" : "MatrixUtils.checkAdditionCompatible(this, m);",
      "info" : "ExpressionStatement[4298-4343]:ExpressionStatement[4536-4581]"
    }, {
      "left" : "final OpenMapRealMatrix out = new OpenMapRealMatrix(this);",
      "right" : "final OpenMapRealMatrix out = new OpenMapRealMatrix(this);",
      "info" : "VariableDeclarationStatement[4353-4411]:VariableDeclarationStatement[4591-4649]"
    }, {
      "left" : "for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext())",
      "right" : "for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext())",
      "info" : "ForStatement[4420-4743]:ForStatement[4658-4981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4511-4743]:Block[4749-4981]"
    }, {
      "left" : "iterator.advance();",
      "right" : "iterator.advance();",
      "info" : "ExpressionStatement[4525-4544]:ExpressionStatement[4763-4782]"
    }, {
      "left" : "final int row = iterator.key() / columns;",
      "right" : "final int row = iterator.key() / columns;",
      "info" : "VariableDeclarationStatement[4557-4598]:VariableDeclarationStatement[4795-4836]"
    }, {
      "left" : "final int col = iterator.key() - row * columns;",
      "right" : "final int col = iterator.key() - row * columns;",
      "info" : "VariableDeclarationStatement[4611-4658]:VariableDeclarationStatement[4849-4896]"
    }, {
      "left" : "out.setEntry(row, col, getEntry(row, col) - iterator.value());",
      "right" : "out.setEntry(row, col, getEntry(row, col) - iterator.value());",
      "info" : "ExpressionStatement[4671-4733]:ExpressionStatement[4909-4971]"
    }, {
      "left" : "return out;",
      "right" : "return out;",
      "info" : "ReturnStatement[4753-4764]:ReturnStatement[4991-5002]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4801-4810]:MarkerAnnotation[5039-5048]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4815-4821]:Modifier[5053-5059]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[4822-4832]:SimpleType[5060-5070]"
    }, {
      "left" : "multiply",
      "right" : "multiply",
      "info" : "SimpleName[4833-4841]:SimpleName[5071-5079]"
    }, {
      "left" : "final RealMatrix m",
      "right" : "final RealMatrix m",
      "info" : "SingleVariableDeclaration[4842-4860]:SingleVariableDeclaration[5080-5098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4862-5742]:Block[5100-5980]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[4872-5736]:TryStatement[5110-5974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4876-4939]:Block[5114-5177]"
    }, {
      "left" : "return multiply((OpenMapRealMatrix) m);",
      "right" : "return multiply((OpenMapRealMatrix) m);",
      "info" : "ReturnStatement[4890-4929]:ReturnStatement[5128-5167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4971-5736]:Block[5209-5974]"
    }, {
      "left" : "MatrixUtils.checkMultiplicationCompatible(this, m);",
      "right" : "MatrixUtils.checkMultiplicationCompatible(this, m);",
      "info" : "ExpressionStatement[5014-5065]:ExpressionStatement[5252-5303]"
    }, {
      "left" : "final int outCols = m.getColumnDimension();",
      "right" : "final int outCols = m.getColumnDimension();",
      "info" : "VariableDeclarationStatement[5079-5122]:VariableDeclarationStatement[5317-5360]"
    }, {
      "left" : "final BlockRealMatrix out = new BlockRealMatrix(rows, outCols);",
      "right" : "final BlockRealMatrix out = new BlockRealMatrix(rows, outCols);",
      "info" : "VariableDeclarationStatement[5135-5198]:VariableDeclarationStatement[5373-5436]"
    }, {
      "left" : "for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext())",
      "right" : "for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext())",
      "info" : "ForStatement[5211-5701]:ForStatement[5449-5939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5300-5701]:Block[5538-5939]"
    }, {
      "left" : "iterator.advance();",
      "right" : "iterator.advance();",
      "info" : "ExpressionStatement[5318-5337]:ExpressionStatement[5556-5575]"
    }, {
      "left" : "final double value = iterator.value();",
      "right" : "final double value = iterator.value();",
      "info" : "VariableDeclarationStatement[5354-5392]:VariableDeclarationStatement[5592-5630]"
    }, {
      "left" : "final int key      = iterator.key();",
      "right" : "final int key      = iterator.key();",
      "info" : "VariableDeclarationStatement[5409-5445]:VariableDeclarationStatement[5647-5683]"
    }, {
      "left" : "final int i        = key / columns;",
      "right" : "final int i        = key / columns;",
      "info" : "VariableDeclarationStatement[5462-5497]:VariableDeclarationStatement[5700-5735]"
    }, {
      "left" : "final int k        = key % columns;",
      "right" : "final int k        = key % columns;",
      "info" : "VariableDeclarationStatement[5514-5549]:VariableDeclarationStatement[5752-5787]"
    }, {
      "left" : "for (int j = 0; j < outCols; ++j)",
      "right" : "for (int j = 0; j < outCols; ++j)",
      "info" : "ForStatement[5566-5687]:ForStatement[5804-5925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5600-5687]:Block[5838-5925]"
    }, {
      "left" : "out.addToEntry(i, j, value * m.getEntry(k, j));",
      "right" : "out.addToEntry(i, j, value * m.getEntry(k, j));",
      "info" : "ExpressionStatement[5622-5669]:ExpressionStatement[5860-5907]"
    }, {
      "left" : "return out;",
      "right" : "return out;",
      "info" : "ReturnStatement[5715-5726]:ReturnStatement[5953-5964]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6048-6054]:Modifier[6286-6292]"
    }, {
      "left" : "OpenMapRealMatrix",
      "right" : "OpenMapRealMatrix",
      "info" : "SimpleType[6055-6072]:SimpleType[6293-6310]"
    }, {
      "left" : "multiply",
      "right" : "multiply",
      "info" : "SimpleName[6073-6081]:SimpleName[6311-6319]"
    }, {
      "left" : "OpenMapRealMatrix m",
      "right" : "OpenMapRealMatrix m",
      "info" : "SingleVariableDeclaration[6082-6101]:SingleVariableDeclaration[6320-6339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6103-7261]:Block[6341-7499]"
    }, {
      "left" : "MatrixUtils.checkMultiplicationCompatible(this, m);",
      "right" : "MatrixUtils.checkMultiplicationCompatible(this, m);",
      "info" : "ExpressionStatement[6138-6189]:ExpressionStatement[6376-6427]"
    }, {
      "left" : "final int outCols = m.getColumnDimension();",
      "right" : "final int outCols = m.getColumnDimension();",
      "info" : "VariableDeclarationStatement[6199-6242]:VariableDeclarationStatement[6437-6480]"
    }, {
      "left" : "OpenMapRealMatrix out = new OpenMapRealMatrix(rows, outCols);",
      "right" : "OpenMapRealMatrix out = new OpenMapRealMatrix(rows, outCols);",
      "info" : "VariableDeclarationStatement[6251-6312]:VariableDeclarationStatement[6489-6550]"
    }, {
      "left" : "for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext())",
      "right" : "for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext())",
      "info" : "ForStatement[6321-7234]:ForStatement[6559-7472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6410-7234]:Block[6648-7472]"
    }, {
      "left" : "iterator.advance();",
      "right" : "iterator.advance();",
      "info" : "ExpressionStatement[6424-6443]:ExpressionStatement[6662-6681]"
    }, {
      "left" : "final double value = iterator.value();",
      "right" : "final double value = iterator.value();",
      "info" : "VariableDeclarationStatement[6456-6494]:VariableDeclarationStatement[6694-6732]"
    }, {
      "left" : "final int key      = iterator.key();",
      "right" : "final int key      = iterator.key();",
      "info" : "VariableDeclarationStatement[6507-6543]:VariableDeclarationStatement[6745-6781]"
    }, {
      "left" : "final int i        = key / columns;",
      "right" : "final int i        = key / columns;",
      "info" : "VariableDeclarationStatement[6556-6591]:VariableDeclarationStatement[6794-6829]"
    }, {
      "left" : "final int k        = key % columns;",
      "right" : "final int k        = key % columns;",
      "info" : "VariableDeclarationStatement[6604-6639]:VariableDeclarationStatement[6842-6877]"
    }, {
      "left" : "for (int j = 0; j < outCols; ++j)",
      "right" : "for (int j = 0; j < outCols; ++j)",
      "info" : "ForStatement[6652-7224]:ForStatement[6890-7462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6686-7224]:Block[6924-7462]"
    }, {
      "left" : "final int rightKey = m.computeKey(k, j);",
      "right" : "final int rightKey = m.computeKey(k, j);",
      "info" : "VariableDeclarationStatement[6704-6744]:VariableDeclarationStatement[6942-6982]"
    }, {
      "left" : "if (m.entries.containsKey(rightKey))",
      "right" : "if (m.entries.containsKey(rightKey))",
      "info" : "IfStatement[6761-7210]:IfStatement[6999-7448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6798-7210]:Block[7036-7448]"
    }, {
      "left" : "final int outKey = out.computeKey(i, j);",
      "right" : "final int outKey = out.computeKey(i, j);",
      "info" : "VariableDeclarationStatement[6820-6860]:VariableDeclarationStatement[7058-7098]"
    }, {
      "left" : "final double outValue =\n                        out.entries.get(outKey) + value * m.entries.get(rightKey);",
      "right" : "final double outValue =\n                        out.entries.get(outKey) + value * m.entries.get(rightKey);",
      "info" : "VariableDeclarationStatement[6881-6987]:VariableDeclarationStatement[7119-7225]"
    }, {
      "left" : "if (outValue == 0.0)",
      "right" : "if (outValue == 0.0)",
      "info" : "IfStatement[7008-7192]:IfStatement[7246-7430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7029-7104]:Block[7267-7342]"
    }, {
      "left" : "out.entries.remove(outKey);",
      "right" : "out.entries.remove(outKey);",
      "info" : "ExpressionStatement[7055-7082]:ExpressionStatement[7293-7320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7110-7192]:Block[7348-7430]"
    }, {
      "left" : "out.entries.put(outKey, outValue);",
      "right" : "out.entries.put(outKey, outValue);",
      "info" : "ExpressionStatement[7136-7170]:ExpressionStatement[7374-7408]"
    }, {
      "left" : "return out;",
      "right" : "return out;",
      "info" : "ReturnStatement[7244-7255]:ReturnStatement[7482-7493]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7292-7301]:MarkerAnnotation[7530-7539]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7306-7312]:Modifier[7544-7550]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[7313-7319]:PrimitiveType[7551-7557]"
    }, {
      "left" : "getEntry",
      "right" : "getEntry",
      "info" : "SimpleName[7320-7328]:SimpleName[7558-7566]"
    }, {
      "left" : "int row",
      "right" : "int row",
      "info" : "SingleVariableDeclaration[7329-7336]:SingleVariableDeclaration[7567-7574]"
    }, {
      "left" : "int column",
      "right" : "int column",
      "info" : "SingleVariableDeclaration[7338-7348]:SingleVariableDeclaration[7576-7586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7350-7508]:Block[7588-7746]"
    }, {
      "left" : "MatrixUtils.checkRowIndex(this, row);",
      "right" : "MatrixUtils.checkRowIndex(this, row);",
      "info" : "ExpressionStatement[7360-7397]:ExpressionStatement[7598-7635]"
    }, {
      "left" : "MatrixUtils.checkColumnIndex(this, column);",
      "right" : "MatrixUtils.checkColumnIndex(this, column);",
      "info" : "ExpressionStatement[7406-7449]:ExpressionStatement[7644-7687]"
    }, {
      "left" : "return entries.get(computeKey(row, column));",
      "right" : "return entries.get(computeKey(row, column));",
      "info" : "ReturnStatement[7458-7502]:ReturnStatement[7696-7740]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7539-7548]:MarkerAnnotation[7777-7786]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7553-7559]:Modifier[7791-7797]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[7560-7563]:PrimitiveType[7798-7801]"
    }, {
      "left" : "getRowDimension",
      "right" : "getRowDimension",
      "info" : "SimpleName[7564-7579]:SimpleName[7802-7817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7582-7610]:Block[7820-7848]"
    }, {
      "left" : "return rows;",
      "right" : "return rows;",
      "info" : "ReturnStatement[7592-7604]:ReturnStatement[7830-7842]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7641-7650]:MarkerAnnotation[7879-7888]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7655-7661]:Modifier[7893-7899]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7662-7666]:PrimitiveType[7900-7904]"
    }, {
      "left" : "setEntry",
      "right" : "setEntry",
      "info" : "SimpleName[7667-7675]:SimpleName[7905-7913]"
    }, {
      "left" : "int row",
      "right" : "int row",
      "info" : "SingleVariableDeclaration[7676-7683]:SingleVariableDeclaration[7914-7921]"
    }, {
      "left" : "int column",
      "right" : "int column",
      "info" : "SingleVariableDeclaration[7685-7695]:SingleVariableDeclaration[7923-7933]"
    }, {
      "left" : "double value",
      "right" : "double value",
      "info" : "SingleVariableDeclaration[7697-7709]:SingleVariableDeclaration[7935-7947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7711-7981]:Block[7949-8219]"
    }, {
      "left" : "MatrixUtils.checkRowIndex(this, row);",
      "right" : "MatrixUtils.checkRowIndex(this, row);",
      "info" : "ExpressionStatement[7721-7758]:ExpressionStatement[7959-7996]"
    }, {
      "left" : "MatrixUtils.checkColumnIndex(this, column);",
      "right" : "MatrixUtils.checkColumnIndex(this, column);",
      "info" : "ExpressionStatement[7767-7810]:ExpressionStatement[8005-8048]"
    }, {
      "left" : "if (value == 0.0)",
      "right" : "if (value == 0.0)",
      "info" : "IfStatement[7819-7975]:IfStatement[8057-8213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7837-7901]:Block[8075-8139]"
    }, {
      "left" : "entries.remove(computeKey(row, column));",
      "right" : "entries.remove(computeKey(row, column));",
      "info" : "ExpressionStatement[7851-7891]:ExpressionStatement[8089-8129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7907-7975]:Block[8145-8213]"
    }, {
      "left" : "entries.put(computeKey(row, column), value);",
      "right" : "entries.put(computeKey(row, column), value);",
      "info" : "ExpressionStatement[7921-7965]:ExpressionStatement[8159-8203]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8012-8021]:MarkerAnnotation[8250-8259]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8026-8032]:Modifier[8264-8270]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8033-8037]:PrimitiveType[8271-8275]"
    }, {
      "left" : "addToEntry",
      "right" : "addToEntry",
      "info" : "SimpleName[8038-8048]:SimpleName[8276-8286]"
    }, {
      "left" : "int row",
      "right" : "int row",
      "info" : "SingleVariableDeclaration[8049-8056]:SingleVariableDeclaration[8287-8294]"
    }, {
      "left" : "int column",
      "right" : "int column",
      "info" : "SingleVariableDeclaration[8058-8068]:SingleVariableDeclaration[8296-8306]"
    }, {
      "left" : "double increment",
      "right" : "double increment",
      "info" : "SingleVariableDeclaration[8070-8086]:SingleVariableDeclaration[8308-8324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8088-8426]:Block[8326-8664]"
    }, {
      "left" : "MatrixUtils.checkRowIndex(this, row);",
      "right" : "MatrixUtils.checkRowIndex(this, row);",
      "info" : "ExpressionStatement[8098-8135]:ExpressionStatement[8336-8373]"
    }, {
      "left" : "MatrixUtils.checkColumnIndex(this, column);",
      "right" : "MatrixUtils.checkColumnIndex(this, column);",
      "info" : "ExpressionStatement[8144-8187]:ExpressionStatement[8382-8425]"
    }, {
      "left" : "final int key = computeKey(row, column);",
      "right" : "final int key = computeKey(row, column);",
      "info" : "VariableDeclarationStatement[8196-8236]:VariableDeclarationStatement[8434-8474]"
    }, {
      "left" : "final double value = entries.get(key) + increment;",
      "right" : "final double value = entries.get(key) + increment;",
      "info" : "VariableDeclarationStatement[8245-8295]:VariableDeclarationStatement[8483-8533]"
    }, {
      "left" : "if (value == 0.0)",
      "right" : "if (value == 0.0)",
      "info" : "IfStatement[8304-8420]:IfStatement[8542-8658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8322-8366]:Block[8560-8604]"
    }, {
      "left" : "entries.remove(key);",
      "right" : "entries.remove(key);",
      "info" : "ExpressionStatement[8336-8356]:ExpressionStatement[8574-8594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8372-8420]:Block[8610-8658]"
    }, {
      "left" : "entries.put(key, value);",
      "right" : "entries.put(key, value);",
      "info" : "ExpressionStatement[8386-8410]:ExpressionStatement[8624-8648]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8457-8466]:MarkerAnnotation[8695-8704]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8471-8477]:Modifier[8709-8715]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8478-8482]:PrimitiveType[8716-8720]"
    }, {
      "left" : "multiplyEntry",
      "right" : "multiplyEntry",
      "info" : "SimpleName[8483-8496]:SimpleName[8721-8734]"
    }, {
      "left" : "int row",
      "right" : "int row",
      "info" : "SingleVariableDeclaration[8497-8504]:SingleVariableDeclaration[8735-8742]"
    }, {
      "left" : "int column",
      "right" : "int column",
      "info" : "SingleVariableDeclaration[8506-8516]:SingleVariableDeclaration[8744-8754]"
    }, {
      "left" : "double factor",
      "right" : "double factor",
      "info" : "SingleVariableDeclaration[8518-8531]:SingleVariableDeclaration[8756-8769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8533-8868]:Block[8771-9106]"
    }, {
      "left" : "MatrixUtils.checkRowIndex(this, row);",
      "right" : "MatrixUtils.checkRowIndex(this, row);",
      "info" : "ExpressionStatement[8543-8580]:ExpressionStatement[8781-8818]"
    }, {
      "left" : "MatrixUtils.checkColumnIndex(this, column);",
      "right" : "MatrixUtils.checkColumnIndex(this, column);",
      "info" : "ExpressionStatement[8589-8632]:ExpressionStatement[8827-8870]"
    }, {
      "left" : "final int key = computeKey(row, column);",
      "right" : "final int key = computeKey(row, column);",
      "info" : "VariableDeclarationStatement[8641-8681]:VariableDeclarationStatement[8879-8919]"
    }, {
      "left" : "final double value = entries.get(key) * factor;",
      "right" : "final double value = entries.get(key) * factor;",
      "info" : "VariableDeclarationStatement[8690-8737]:VariableDeclarationStatement[8928-8975]"
    }, {
      "left" : "if (value == 0.0)",
      "right" : "if (value == 0.0)",
      "info" : "IfStatement[8746-8862]:IfStatement[8984-9100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8764-8808]:Block[9002-9046]"
    }, {
      "left" : "entries.remove(key);",
      "right" : "entries.remove(key);",
      "info" : "ExpressionStatement[8778-8798]:ExpressionStatement[9016-9036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8814-8862]:Block[9052-9100]"
    }, {
      "left" : "entries.put(key, value);",
      "right" : "entries.put(key, value);",
      "info" : "ExpressionStatement[8828-8852]:ExpressionStatement[9066-9090]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9109-9116]:Modifier[9347-9354]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[9117-9120]:PrimitiveType[9355-9358]"
    }, {
      "left" : "computeKey",
      "right" : "computeKey",
      "info" : "SimpleName[9121-9131]:SimpleName[9359-9369]"
    }, {
      "left" : "int row",
      "right" : "int row",
      "info" : "SingleVariableDeclaration[9132-9139]:SingleVariableDeclaration[9370-9377]"
    }, {
      "left" : "int column",
      "right" : "int column",
      "info" : "SingleVariableDeclaration[9141-9151]:SingleVariableDeclaration[9379-9389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9153-9199]:Block[9391-9437]"
    }, {
      "left" : "return row * columns + column;",
      "right" : "return row * columns + column;",
      "info" : "ReturnStatement[9163-9193]:ReturnStatement[9401-9431]"
    } ]
  },
  "interFileMappings" : { }
}