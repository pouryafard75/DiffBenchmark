{
  "matchedElements" : [
 {
    "left" : "",
    "right" : "",
    "info" : "TypeDeclaration[2590-13392]:TypeDeclaration[2588-13390]"
  }, {
    "left" : "@Test\n    public void testAndPredicate_whenFirstIndexAwarePredicateIsNotIndexed() throws Exception {\n        final HazelcastInstance instance = createHazelcastInstance();\n        final IMap<Object, Object> map = instance.getMap(\"map\");\n        map.addIndex(\"name\", false);\n        String name = randomString();\n        map.put(\"key\", new Value(name));\n\n        final ShouldExecuteOncePredicate indexAwareNotIndexedPredicate = new ShouldExecuteOncePredicate();\n        final EqualPredicate equalPredicate = new EqualPredicate(\"name\", name);\n        final AndPredicate andPredicate = new AndPredicate(indexAwareNotIndexedPredicate, equalPredicate);\n        map.values(andPredicate);\n    }",
    "right" : "@Test\n    public void testAndPredicate_whenFirstIndexAwarePredicateIsNotIndexed() throws Exception {\n        final HazelcastInstance instance = createHazelcastInstance();\n        final IMap<Object, Object> map = instance.getMap(\"map\");\n        map.addIndex(\"name\", false);\n        String name = randomString();\n        map.put(\"key\", new Value(name));\n\n        final ShouldExecuteOncePredicate indexAwareNotIndexedPredicate = new ShouldExecuteOncePredicate();\n        final EqualPredicate equalPredicate = new EqualPredicate(\"name\", name);\n        final AndPredicate andPredicate = new AndPredicate(indexAwareNotIndexedPredicate, equalPredicate);\n        map.values(andPredicate);\n    }",
    "info" : "MethodDeclaration[2724-3410]:MethodDeclaration[2722-3408]"
  }, {
    "left" : "static class ShouldExecuteOncePredicate implements IndexAwarePredicate {\n\n        boolean executed = false;\n\n        @Override\n        public boolean apply(Map.Entry mapEntry) {\n            if (!executed) {\n                executed = true;\n                return true;\n            }\n            throw new RuntimeException();\n        }\n\n        @Override\n        public Set<QueryableEntry> filter(final QueryContext queryContext) {\n            return null;\n        }\n\n        @Override\n        public boolean isIndexed(final QueryContext queryContext) {\n            return false;\n        }\n    }",
    "right" : "static class ShouldExecuteOncePredicate implements IndexAwarePredicate {\n\n        boolean executed = false;\n\n        @Override\n        public boolean apply(Map.Entry mapEntry) {\n            if (!executed) {\n                executed = true;\n                return true;\n            }\n            throw new RuntimeException();\n        }\n\n        @Override\n        public Set<QueryableEntry> filter(final QueryContext queryContext) {\n            return null;\n        }\n\n        @Override\n        public boolean isIndexed(final QueryContext queryContext) {\n            return false;\n        }\n    }",
    "info" : "TypeDeclaration[3416-4010]:TypeDeclaration[3414-4008]"
  }, {
    "left" : "boolean executed = false;",
    "right" : "boolean executed = false;",
    "info" : "FieldDeclaration[3498-3523]:FieldDeclaration[3496-3521]"
  }, {
    "left" : "public mapEntry Map.Entry) : boolean",
    "right" : "public mapEntry Map.Entry) : boolean",
    "info" : "MethodDeclaration[3533-3750]:MethodDeclaration[3531-3748]"
  }, {
    "left" : "public queryContext QueryContext) : Set<QueryableEntry>",
    "right" : "public queryContext QueryContext) : Set<QueryableEntry>",
    "info" : "MethodDeclaration[3760-3881]:MethodDeclaration[3758-3879]"
  }, {
    "left" : "public queryContext QueryContext) : boolean",
    "right" : "public queryContext QueryContext) : boolean",
    "info" : "MethodDeclaration[3891-4004]:MethodDeclaration[3889-4002]"
  }, {
    "left" : "@Test\n    public void testEqual() {\n        assertPredicateTrue(equal(null, \"value\"), \"value\");\n        assertPredicateFalse(equal(null, \"value1\"), \"value\");\n        assertPredicateTrue(equal(null, TRUE), true);\n        assertPredicateTrue(equal(null, true), TRUE);\n        assertPredicateFalse(equal(null, true), FALSE);\n        assertPredicateFalse(equal(null, new BigDecimal(\"1.23E3\")), new BigDecimal(\"1.23E2\"));\n        assertPredicateTrue(equal(null, new BigDecimal(\"1.23E3\")), new BigDecimal(\"1.23E3\"));\n        assertPredicateFalse(equal(null, 15.22), 15.23);\n        assertPredicateTrue(equal(null, 15.22), 15.22);\n        assertPredicateFalse(equal(null, 16), 15);\n    }",
    "right" : "@Test\n    public void testEqual() {\n        assertPredicateTrue(equal(null, \"value\"), \"value\");\n        assertPredicateFalse(equal(null, \"value1\"), \"value\");\n        assertPredicateTrue(equal(null, TRUE), true);\n        assertPredicateTrue(equal(null, true), TRUE);\n        assertPredicateFalse(equal(null, true), FALSE);\n        assertPredicateFalse(equal(null, new BigDecimal(\"1.23E3\")), new BigDecimal(\"1.23E2\"));\n        assertPredicateTrue(equal(null, new BigDecimal(\"1.23E3\")), new BigDecimal(\"1.23E3\"));\n        assertPredicateFalse(equal(null, 15.22), 15.23);\n        assertPredicateTrue(equal(null, 15.22), 15.22);\n        assertPredicateFalse(equal(null, 16), 15);\n    }",
    "info" : "MethodDeclaration[4016-4696]:MethodDeclaration[4014-4694]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[4703-5247]:MethodDeclaration[4701-5245]"
  }, {
    "left" : "@Test\n    public void testOr() {\n        final Predicate or1 = or(equal(null, 3), equal(null, 4), equal(null, 5));\n        assertPredicateTrue(or1, 4);\n        assertPredicateFalse(or1, 6);\n    }",
    "right" : "@Test\n    public void testOr() {\n        final Predicate or1 = or(equal(null, 3), equal(null, 4), equal(null, 5));\n        assertPredicateTrue(or1, 4);\n        assertPredicateFalse(or1, 6);\n    }",
    "info" : "MethodDeclaration[5253-5448]:MethodDeclaration[5251-5446]"
  }, {
    "left" : "@Test\n    public void testGreaterEqual() {\n        assertPredicateTrue(greaterEqual(null, 5), 5);\n    }",
    "right" : "@Test\n    public void testGreaterEqual() {\n        assertPredicateTrue(greaterEqual(null, 5), 5);\n    }",
    "info" : "MethodDeclaration[5454-5557]:MethodDeclaration[5452-5555]"
  }, {
    "left" : "@Test\n    public void testLessThan() {\n        assertPredicateTrue(lessThan(null, 7), 6);\n        assertPredicateFalse(lessThan(null, 3), 4);\n        assertPredicateFalse(lessThan(null, 4), 4);\n        assertPredicateTrue(lessThan(null, \"tc\"), \"bz\");\n        assertPredicateFalse(lessThan(null, \"gx\"), \"h0\");\n    }",
    "right" : "@Test\n    public void testLessThan() {\n        assertPredicateTrue(lessThan(null, 7), 6);\n        assertPredicateFalse(lessThan(null, 3), 4);\n        assertPredicateFalse(lessThan(null, 4), 4);\n        assertPredicateTrue(lessThan(null, \"tc\"), \"bz\");\n        assertPredicateFalse(lessThan(null, \"gx\"), \"h0\");\n    }",
    "info" : "MethodDeclaration[5563-5877]:MethodDeclaration[5561-5875]"
  }, {
    "left" : "@Test\n    public void testGreaterThan() {\n        assertPredicateTrue(greaterThan(null, 5), 6);\n        assertPredicateFalse(greaterThan(null, 5), 4);\n        assertPredicateFalse(greaterThan(null, 5), 5);\n        assertPredicateTrue(greaterThan(null, \"aa\"), \"xa\");\n        assertPredicateFalse(greaterThan(null, \"da\"), \"cz\");\n        assertPredicateTrue(greaterThan(null, new BigDecimal(\"1.23E2\")), new BigDecimal(\"1.23E3\"));\n    }",
    "right" : "@Test\n    public void testGreaterThan() {\n        assertPredicateTrue(greaterThan(null, 5), 6);\n        assertPredicateFalse(greaterThan(null, 5), 4);\n        assertPredicateFalse(greaterThan(null, 5), 5);\n        assertPredicateTrue(greaterThan(null, \"aa\"), \"xa\");\n        assertPredicateFalse(greaterThan(null, \"da\"), \"cz\");\n        assertPredicateTrue(greaterThan(null, new BigDecimal(\"1.23E2\")), new BigDecimal(\"1.23E3\"));\n    }",
    "info" : "MethodDeclaration[5883-6315]:MethodDeclaration[5881-6313]"
  }, {
    "left" : "@Test\n    public void testLessEqual() {\n        assertPredicateTrue(lessEqual(null, 4), 4);\n    }",
    "right" : "@Test\n    public void testLessEqual() {\n        assertPredicateTrue(lessEqual(null, 4), 4);\n    }",
    "info" : "MethodDeclaration[6321-6418]:MethodDeclaration[6319-6416]"
  }, {
    "left" : "@Test\n    public void testPredicatesAgainstANullField() {\n        assertFalse_withNullEntry(lessEqual(\"nullField\", 1));\n\n        assertFalse_withNullEntry(in(\"nullField\", 1));\n        assertFalse_withNullEntry(lessThan(\"nullField\", 1));\n        assertFalse_withNullEntry(greaterEqual(\"nullField\", 1));\n        assertFalse_withNullEntry(greaterThan(\"nullField\", 1));\n        assertFalse_withNullEntry(equal(\"nullField\", 1));\n        assertFalse_withNullEntry(notEqual(\"nullField\", null));\n        assertFalse_withNullEntry(notEqual(\"nullField\", 1));\n        assertFalse_withNullEntry(between(\"nullField\", 1, 1));\n        assertTrue_withNullEntry(like(\"nullField\", null));\n        assertTrue_withNullEntry(ilike(\"nullField\", null));\n        assertTrue_withNullEntry(regex(\"nullField\", null));\n    }",
    "right" : "@Test\n    public void testPredicatesAgainstANullField() {\n        assertFalse_withNullEntry(lessEqual(\"nullField\", 1));\n\n        assertFalse_withNullEntry(in(\"nullField\", 1));\n        assertFalse_withNullEntry(lessThan(\"nullField\", 1));\n        assertFalse_withNullEntry(greaterEqual(\"nullField\", 1));\n        assertFalse_withNullEntry(greaterThan(\"nullField\", 1));\n        assertFalse_withNullEntry(equal(\"nullField\", 1));\n        assertFalse_withNullEntry(notEqual(\"nullField\", null));\n        assertFalse_withNullEntry(notEqual(\"nullField\", 1));\n        assertFalse_withNullEntry(between(\"nullField\", 1, 1));\n        assertTrue_withNullEntry(like(\"nullField\", null));\n        assertTrue_withNullEntry(ilike(\"nullField\", null));\n        assertTrue_withNullEntry(regex(\"nullField\", null));\n    }",
    "info" : "MethodDeclaration[6424-7220]:MethodDeclaration[6422-7218]"
  }, {
    "left" : "@Test\n    public void testBetween() {\n        assertPredicateTrue(between(null, 4, 6), 5);\n        assertPredicateTrue(between(null, 5, 6), 5);\n        assertPredicateTrue(between(null, \"abc\", \"xyz\"), \"prs\");\n        assertPredicateFalse(between(null, \"klmn\", \"xyz\"), \"efgh\");\n        assertPredicateFalse(between(null, 6, 7), 5);\n    }",
    "right" : "@Test\n    public void testBetween() {\n        assertPredicateTrue(between(null, 4, 6), 5);\n        assertPredicateTrue(between(null, 5, 6), 5);\n        assertPredicateTrue(between(null, \"abc\", \"xyz\"), \"prs\");\n        assertPredicateFalse(between(null, \"klmn\", \"xyz\"), \"efgh\");\n        assertPredicateFalse(between(null, 6, 7), 5);\n    }",
    "info" : "MethodDeclaration[7226-7562]:MethodDeclaration[7224-7560]"
  }, {
    "left" : "@Test\n    public void testIn() {\n        assertPredicateTrue(in(null, 4, 7, 8, 5), 5);\n        assertPredicateTrue(in(null, 5, 7, 8), 5);\n        assertPredicateFalse(in(null, 6, 7, 8), 5);\n        assertPredicateFalse(in(null, 6, 7, 8), 9);\n    }",
    "right" : "@Test\n    public void testIn() {\n        assertPredicateTrue(in(null, 4, 7, 8, 5), 5);\n        assertPredicateTrue(in(null, 5, 7, 8), 5);\n        assertPredicateFalse(in(null, 6, 7, 8), 5);\n        assertPredicateFalse(in(null, 6, 7, 8), 9);\n    }",
    "info" : "MethodDeclaration[7568-7815]:MethodDeclaration[7566-7813]"
  }, {
    "left" : "@Test\n    public void testLike() {\n        assertPredicateTrue(like(null, \"J%\"), \"Java\");\n        assertPredicateTrue(like(null, \"Ja%\"), \"Java\");\n        assertPredicateTrue(like(null, \"J_v_\"), \"Java\");\n        assertPredicateTrue(like(null, \"_av_\"), \"Java\");\n        assertPredicateTrue(like(null, \"_a__\"), \"Java\");\n        assertPredicateTrue(like(null, \"J%v_\"), \"Java\");\n        assertPredicateTrue(like(null, \"J%_\"), \"Java\");\n        assertPredicateFalse(like(null, \"java\"), \"Java\");\n        assertPredicateFalse(like(null, \"j%\"), \"Java\");\n        assertPredicateFalse(like(null, \"J_a\"), \"Java\");\n        assertPredicateFalse(like(null, \"J_ava\"), \"Java\");\n        assertPredicateFalse(like(null, \"J_a_a\"), \"Java\");\n        assertPredicateFalse(like(null, \"J_av__\"), \"Java\");\n        assertPredicateFalse(like(null, \"J_Va\"), \"Java\");\n        assertPredicateTrue(like(null, \"Java World\"), \"Java World\");\n        assertPredicateTrue(like(null, \"Java%ld\"), \"Java World\");\n        assertPredicateTrue(like(null, \"%World\"), \"Java World\");\n        assertPredicateTrue(like(null, \"Java_World\"), \"Java World\");\n\n        assertPredicateTrue(like(null, \"J.-*.*\\\\%\"), \"J.-*.*%\");\n        assertPredicateTrue(like(null, \"J\\\\_\"), \"J_\");\n        assertPredicateTrue(like(null, \"J%\"), \"Java\");\n\n    }",
    "right" : "@Test\n    public void testLike() {\n        assertPredicateTrue(like(null, \"J%\"), \"Java\");\n        assertPredicateTrue(like(null, \"Ja%\"), \"Java\");\n        assertPredicateTrue(like(null, \"J_v_\"), \"Java\");\n        assertPredicateTrue(like(null, \"_av_\"), \"Java\");\n        assertPredicateTrue(like(null, \"_a__\"), \"Java\");\n        assertPredicateTrue(like(null, \"J%v_\"), \"Java\");\n        assertPredicateTrue(like(null, \"J%_\"), \"Java\");\n        assertPredicateFalse(like(null, \"java\"), \"Java\");\n        assertPredicateFalse(like(null, \"j%\"), \"Java\");\n        assertPredicateFalse(like(null, \"J_a\"), \"Java\");\n        assertPredicateFalse(like(null, \"J_ava\"), \"Java\");\n        assertPredicateFalse(like(null, \"J_a_a\"), \"Java\");\n        assertPredicateFalse(like(null, \"J_av__\"), \"Java\");\n        assertPredicateFalse(like(null, \"J_Va\"), \"Java\");\n        assertPredicateTrue(like(null, \"Java World\"), \"Java World\");\n        assertPredicateTrue(like(null, \"Java%ld\"), \"Java World\");\n        assertPredicateTrue(like(null, \"%World\"), \"Java World\");\n        assertPredicateTrue(like(null, \"Java_World\"), \"Java World\");\n\n        assertPredicateTrue(like(null, \"J.-*.*\\\\%\"), \"J.-*.*%\");\n        assertPredicateTrue(like(null, \"J\\\\_\"), \"J_\");\n        assertPredicateTrue(like(null, \"J%\"), \"Java\");\n\n    }",
    "info" : "MethodDeclaration[7821-9109]:MethodDeclaration[7819-9107]"
  }, {
    "left" : "@Test\n    public void testILike() {\n        assertPredicateFalse(like(null, \"JavaWorld\"), \"Java World\");\n        assertPredicateTrue(ilike(null, \"Java_World\"), \"java World\");\n        assertPredicateTrue(ilike(null, \"java%ld\"), \"Java World\");\n        assertPredicateTrue(ilike(null, \"%world\"), \"Java World\");\n        assertPredicateFalse(ilike(null, \"Java_World\"), \"gava World\");\n    }",
    "right" : "@Test\n    public void testILike() {\n        assertPredicateFalse(like(null, \"JavaWorld\"), \"Java World\");\n        assertPredicateTrue(ilike(null, \"Java_World\"), \"java World\");\n        assertPredicateTrue(ilike(null, \"java%ld\"), \"Java World\");\n        assertPredicateTrue(ilike(null, \"%world\"), \"Java World\");\n        assertPredicateFalse(ilike(null, \"Java_World\"), \"gava World\");\n    }",
    "info" : "MethodDeclaration[9115-9499]:MethodDeclaration[9113-9497]"
  }, {
    "left" : "@Test\n    public void testIsInstanceOf() {\n        assertTrue(instanceOf(Long.class).apply(new DummyEntry(1L)));\n        assertFalse(instanceOf(Long.class).apply(new DummyEntry(\"Java\")));\n        assertTrue(instanceOf(Number.class).apply(new DummyEntry(4)));\n    }",
    "right" : "@Test\n    public void testIsInstanceOf() {\n        assertTrue(instanceOf(Long.class).apply(new DummyEntry(1L)));\n        assertFalse(instanceOf(Long.class).apply(new DummyEntry(\"Java\")));\n        assertTrue(instanceOf(Number.class).apply(new DummyEntry(4)));\n    }",
    "info" : "MethodDeclaration[9505-9769]:MethodDeclaration[9503-9767]"
  }, {
    "left" : "@Test\n    public void testCriteriaAPI() {\n        Object value = new Employee(12, \"abc-123-xvz\", 34, true, 10D);\n        EntryObject e = new PredicateBuilder().getEntryObject();\n        EntryObject e2 = e.get(\"age\");\n        Predicate predicate = e2.greaterEqual(29).and(e2.lessEqual(36));\n        assertTrue(predicate.apply(createEntry(\"1\", value)));\n        e = new PredicateBuilder().getEntryObject();\n        assertTrue(e.get(\"id\").equal(12).apply(createEntry(\"1\", value)));\n    }",
    "right" : "@Test\n    public void testCriteriaAPI() {\n        Object value = new Employee(12, \"abc-123-xvz\", 34, true, 10D);\n        EntryObject e = new PredicateBuilder().getEntryObject();\n        EntryObject e2 = e.get(\"age\");\n        Predicate predicate = e2.greaterEqual(29).and(e2.lessEqual(36));\n        assertTrue(predicate.apply(createEntry(\"1\", value)));\n        e = new PredicateBuilder().getEntryObject();\n        assertTrue(e.get(\"id\").equal(12).apply(createEntry(\"1\", value)));\n    }",
    "info" : "MethodDeclaration[9775-10259]:MethodDeclaration[9773-10257]"
  }, {
    "left" : "@Test(expected = NullPointerException.class)\n    public void testBetweenNull() {\n        Predicates.between(\"\", null, null);\n    }",
    "right" : "@Test(expected = NullPointerException.class)\n    public void testBetweenNull() {\n        Predicates.between(\"\", null, null);\n    }",
    "info" : "MethodDeclaration[10265-10395]:MethodDeclaration[10263-10393]"
  }, {
    "left" : "@Test(expected = NullPointerException.class)\n    public void testLessThanNull() {\n        Predicates.lessThan(\"\", null);\n    }",
    "right" : "@Test(expected = NullPointerException.class)\n    public void testLessThanNull() {\n        Predicates.lessThan(\"\", null);\n    }",
    "info" : "MethodDeclaration[10401-10527]:MethodDeclaration[10399-10525]"
  }, {
    "left" : "@Test(expected = NullPointerException.class)\n    public void testLessEqualNull() {\n        Predicates.lessEqual(\"\", null);\n    }",
    "right" : "@Test(expected = NullPointerException.class)\n    public void testLessEqualNull() {\n        Predicates.lessEqual(\"\", null);\n    }",
    "info" : "MethodDeclaration[10533-10661]:MethodDeclaration[10531-10659]"
  }, {
    "left" : "@Test(expected = NullPointerException.class)\n    public void testGreaterThanNull() {\n        Predicates.greaterThan(\"\", null);\n    }",
    "right" : "@Test(expected = NullPointerException.class)\n    public void testGreaterThanNull() {\n        Predicates.greaterThan(\"\", null);\n    }",
    "info" : "MethodDeclaration[10667-10799]:MethodDeclaration[10665-10797]"
  }, {
    "left" : "@Test(expected = NullPointerException.class)\n    public void testGreaterEqualNull() {\n        Predicates.greaterEqual(\"\", null);\n    }",
    "right" : "@Test(expected = NullPointerException.class)\n    public void testGreaterEqualNull() {\n        Predicates.greaterEqual(\"\", null);\n    }",
    "info" : "MethodDeclaration[10805-10939]:MethodDeclaration[10803-10937]"
  }, {
    "left" : "@Test(expected = NullPointerException.class)\n    public void testInNullWithNullArray() {\n        Predicates.in(\"\", null);\n    }",
    "right" : "@Test(expected = NullPointerException.class)\n    public void testInNullWithNullArray() {\n        Predicates.in(\"\", null);\n    }",
    "info" : "MethodDeclaration[10945-11072]:MethodDeclaration[10943-11070]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "TypeDeclaration[11078-11571]:TypeDeclaration[11076-11569]"
  }, {
    "left" : "DummyEntry(Comparable attribute) {\n            super(null, toData(\"1\"), \"1\", attribute);\n        }",
    "right" : "DummyEntry(Comparable attribute) {\n            super(null, toData(\"1\"), \"1\", attribute);\n        }",
    "info" : "MethodDeclaration[11133-11231]:MethodDeclaration[11131-11229]"
  }, {
    "left" : "@Override\n        public Comparable getAttribute(String attributeName) throws QueryException {\n            return (Comparable) getValue();\n        }",
    "right" : "@Override\n        public Comparable getAttribute(String attributeName) throws QueryException {\n            return (Comparable) getValue();\n        }",
    "info" : "MethodDeclaration[11241-11389]:MethodDeclaration[11239-11387]"
  }, {
    "left" : "@Override\n        public AttributeType getAttributeType(String attributeName) {\n            return ReflectionHelper.getAttributeType(getValue().getClass());\n        }",
    "right" : "@Override\n        public AttributeType getAttributeType(String attributeName) {\n            return ReflectionHelper.getAttributeType(getValue().getClass());\n        }",
    "info" : "MethodDeclaration[11399-11565]:MethodDeclaration[11397-11563]"
  }, {
    "left" : "private class NullDummyEntry implements QueryableEntry {\n\n        private Integer nullField;\n\n        private NullDummyEntry() {\n        }\n\n        public Integer getNullField() {\n            return nullField;\n        }\n\n        public void setNullField(Integer nullField) {\n            this.nullField = nullField;\n        }\n\n        @Override\n        public Object getValue() {\n            return null;\n        }\n\n        @Override\n        public Object setValue(Object value) {\n            return null;\n        }\n\n        @Override\n        public Object getKey() {\n            return 1;\n        }\n\n        @Override\n        public Comparable getAttribute(String attributeName) throws QueryException {\n            return null;\n        }\n\n        @Override\n        public AttributeType getAttributeType(String attributeName) {\n            return AttributeType.INTEGER;\n        }\n\n        @Override\n        public Data getKeyData() {\n            return null;\n        }\n\n        @Override\n        public Data getValueData() {\n            return null;\n        }\n\n        @Override\n        public Data getIndexKey() {\n            return null;\n        }\n\n    }",
    "right" : "private class NullDummyEntry implements QueryableEntry {\n\n        private Integer nullField;\n\n        private NullDummyEntry() {\n        }\n\n        public Integer getNullField() {\n            return nullField;\n        }\n\n        public void setNullField(Integer nullField) {\n            this.nullField = nullField;\n        }\n\n        @Override\n        public Object getValue() {\n            return null;\n        }\n\n        @Override\n        public Object setValue(Object value) {\n            return null;\n        }\n\n        @Override\n        public Object getKey() {\n            return 1;\n        }\n\n        @Override\n        public Comparable getAttribute(String attributeName) throws QueryException {\n            return null;\n        }\n\n        @Override\n        public AttributeType getAttributeType(String attributeName) {\n            return AttributeType.INTEGER;\n        }\n\n        @Override\n        public Data getKeyData() {\n            return null;\n        }\n\n        @Override\n        public Data getValueData() {\n            return null;\n        }\n\n        @Override\n        public Data getIndexKey() {\n            return null;\n        }\n\n    }",
    "info" : "TypeDeclaration[11577-12732]:TypeDeclaration[11575-12730]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[11643-11669]:FieldDeclaration[11641-11667]"
  }, {
    "left" : "private )",
    "right" : "private )",
    "info" : "MethodDeclaration[11679-11715]:MethodDeclaration[11677-11713]"
  }, {
    "left" : "public Integer getNullField() {\n            return nullField;\n        }",
    "right" : "public Integer getNullField() {\n            return nullField;\n        }",
    "info" : "MethodDeclaration[11725-11796]:MethodDeclaration[11723-11794]"
  }, {
    "left" : "public nullField Integer) : void",
    "right" : "public nullField Integer) : void",
    "info" : "MethodDeclaration[11806-11901]:MethodDeclaration[11804-11899]"
  }, {
    "left" : "public ) : Object",
    "right" : "public ) : Object",
    "info" : "MethodDeclaration[11911-11990]:MethodDeclaration[11909-11988]"
  }, {
    "left" : "public value Object) : Object",
    "right" : "public value Object) : Object",
    "info" : "MethodDeclaration[12000-12091]:MethodDeclaration[11998-12089]"
  }, {
    "left" : "public ) : Object",
    "right" : "public ) : Object",
    "info" : "MethodDeclaration[12101-12175]:MethodDeclaration[12099-12173]"
  }, {
    "left" : "public attributeName String) : Comparable",
    "right" : "public attributeName String) : Comparable",
    "info" : "MethodDeclaration[12185-12314]:MethodDeclaration[12183-12312]"
  }, {
    "left" : "public attributeName String) : AttributeType",
    "right" : "public attributeName String) : AttributeType",
    "info" : "MethodDeclaration[12324-12455]:MethodDeclaration[12322-12453]"
  }, {
    "left" : "@Override\n        public Data getKeyData() {\n            return null;\n        }",
    "right" : "@Override\n        public Data getKeyData() {\n            return null;\n        }",
    "info" : "MethodDeclaration[12465-12544]:MethodDeclaration[12463-12542]"
  }, {
    "left" : "public ) : Data",
    "right" : "public ) : Data",
    "info" : "MethodDeclaration[12554-12635]:MethodDeclaration[12552-12633]"
  }, {
    "left" : "public ) : Data",
    "right" : "public ) : Data",
    "info" : "MethodDeclaration[12645-12725]:MethodDeclaration[12643-12723]"
  }, {
    "left" : "private static Entry createEntry(final Object key, final Object value) {\n        return new QueryEntry(null, toData(key), key, value);\n    }",
    "right" : "private static Entry createEntry(final Object key, final Object value) {\n        return new QueryEntry(null, toData(key), key, value);\n    }",
    "info" : "MethodDeclaration[12738-12878]:MethodDeclaration[12736-12876]"
  }, {
    "left" : "private void assertPredicateTrue(Predicate p, Comparable comparable) {\n        assertTrue(p.apply(new DummyEntry(comparable)));\n    }",
    "right" : "private void assertPredicateTrue(Predicate p, Comparable comparable) {\n        assertTrue(p.apply(new DummyEntry(comparable)));\n    }",
    "info" : "MethodDeclaration[12884-13017]:MethodDeclaration[12882-13015]"
  }, {
    "left" : "private void assertPredicateFalse(Predicate p, Comparable comparable) {\n        assertFalse(p.apply(new DummyEntry(comparable)));\n    }",
    "right" : "private void assertPredicateFalse(Predicate p, Comparable comparable) {\n        assertFalse(p.apply(new DummyEntry(comparable)));\n    }",
    "info" : "MethodDeclaration[13023-13158]:MethodDeclaration[13021-13156]"
  }, {
    "left" : "private void assertTrue_withNullEntry(Predicate p) {\n        assertTrue(p.apply(new NullDummyEntry()));\n    }",
    "right" : "private void assertTrue_withNullEntry(Predicate p) {\n        assertTrue(p.apply(new NullDummyEntry()));\n    }",
    "info" : "MethodDeclaration[13164-13273]:MethodDeclaration[13162-13271]"
  }, {
    "left" : "private void assertFalse_withNullEntry(Predicate p) {\n        assertFalse(p.apply(new NullDummyEntry()));\n    }",
    "right" : "private void assertFalse_withNullEntry(Predicate p) {\n        assertFalse(p.apply(new NullDummyEntry()));\n    }",
    "info" : "MethodDeclaration[13279-13390]:MethodDeclaration[13277-13388]"
  } ],
  "mappings" : [
 {
    "left" : "package com.hazelcast.query;",
    "right" : "package com.hazelcast.query;",
    "info" : "PackageDeclaration[627-655]:PackageDeclaration[627-655]"
  }, {
    "left" : "import com.hazelcast.core.HazelcastInstance;",
    "right" : "import com.hazelcast.core.HazelcastInstance;",
    "info" : "ImportDeclaration[657-701]:ImportDeclaration[657-701]"
  }, {
    "left" : "import com.hazelcast.core.IMap;",
    "right" : "import com.hazelcast.core.IMap;",
    "info" : "ImportDeclaration[702-733]:ImportDeclaration[702-733]"
  }, {
    "left" : "import com.hazelcast.nio.serialization.Data;",
    "right" : "import com.hazelcast.nio.serialization.Data;",
    "info" : "ImportDeclaration[734-778]:ImportDeclaration[734-778]"
  }, {
    "left" : "import com.hazelcast.query.impl.AttributeType;",
    "right" : "import com.hazelcast.query.impl.AttributeType;",
    "info" : "ImportDeclaration[779-825]:ImportDeclaration[779-825]"
  }, {
    "left" : "import com.hazelcast.query.impl.QueryContext;",
    "right" : "import com.hazelcast.query.impl.QueryContext;",
    "info" : "ImportDeclaration[826-871]:ImportDeclaration[826-871]"
  }, {
    "left" : "import com.hazelcast.query.impl.QueryEntry;",
    "right" : "import com.hazelcast.query.impl.QueryEntry;",
    "info" : "ImportDeclaration[872-915]:ImportDeclaration[872-915]"
  }, {
    "left" : "import com.hazelcast.query.impl.QueryableEntry;",
    "right" : "import com.hazelcast.query.impl.QueryableEntry;",
    "info" : "ImportDeclaration[916-963]:ImportDeclaration[916-963]"
  }, {
    "left" : "import com.hazelcast.query.impl.getters.ReflectionHelper;",
    "right" : "import com.hazelcast.query.impl.getters.ReflectionHelper;",
    "info" : "ImportDeclaration[964-1021]:ImportDeclaration[964-1021]"
  }, {
    "left" : "import com.hazelcast.test.HazelcastSerialClassRunner;",
    "right" : "import com.hazelcast.test.HazelcastSerialClassRunner;",
    "info" : "ImportDeclaration[1022-1075]:ImportDeclaration[1022-1075]"
  }, {
    "left" : "import com.hazelcast.test.HazelcastTestSupport;",
    "right" : "import com.hazelcast.test.HazelcastTestSupport;",
    "info" : "ImportDeclaration[1076-1123]:ImportDeclaration[1076-1123]"
  }, {
    "left" : "import com.hazelcast.test.annotation.QuickTest;",
    "right" : "import com.hazelcast.test.annotation.QuickTest;",
    "info" : "ImportDeclaration[1124-1171]:ImportDeclaration[1124-1171]"
  }, {
    "left" : "import org.junit.Test;",
    "right" : "import org.junit.Test;",
    "info" : "ImportDeclaration[1172-1194]:ImportDeclaration[1172-1194]"
  }, {
    "left" : "import org.junit.experimental.categories.Category;",
    "right" : "import org.junit.experimental.categories.Category;",
    "info" : "ImportDeclaration[1195-1245]:ImportDeclaration[1195-1245]"
  }, {
    "left" : "import org.junit.runner.RunWith;",
    "right" : "import org.junit.runner.RunWith;",
    "info" : "ImportDeclaration[1246-1278]:ImportDeclaration[1246-1278]"
  }, {
    "left" : "import java.math.BigDecimal;",
    "right" : "import java.math.BigDecimal;",
    "info" : "ImportDeclaration[1280-1308]:ImportDeclaration[1280-1308]"
  }, {
    "left" : "import java.util.Map;",
    "right" : "import java.util.Map;",
    "info" : "ImportDeclaration[1309-1330]:ImportDeclaration[1309-1330]"
  }, {
    "left" : "import java.util.Set;",
    "right" : "import java.util.Set;",
    "info" : "ImportDeclaration[1331-1352]:ImportDeclaration[1331-1352]"
  }, {
    "left" : "import static com.hazelcast.instance.TestUtil.toData;",
    "right" : "import static com.hazelcast.instance.TestUtil.toData;",
    "info" : "ImportDeclaration[1354-1407]:ImportDeclaration[1354-1407]"
  }, {
    "left" : "import static com.hazelcast.query.Predicates.AndPredicate;",
    "right" : "import com.hazelcast.query.impl.predicates.AndPredicate;",
    "info" : "ImportDeclaration[1408-1466]:ImportDeclaration[1409-1465]"
  }, {
    "left" : "import static com.hazelcast.query.Predicates.EqualPredicate;",
    "right" : "import com.hazelcast.query.impl.predicates.EqualPredicate;",
    "info" : "ImportDeclaration[1467-1527]:ImportDeclaration[1467-1525]"
  }, {
    "left" : "import static com.hazelcast.query.Predicates.and;",
    "right" : "import static com.hazelcast.query.Predicates.and;",
    "info" : "ImportDeclaration[1528-1577]:ImportDeclaration[1526-1575]"
  }, {
    "left" : "import static com.hazelcast.query.Predicates.between;",
    "right" : "import static com.hazelcast.query.Predicates.between;",
    "info" : "ImportDeclaration[1578-1631]:ImportDeclaration[1576-1629]"
  }, {
    "left" : "import static com.hazelcast.query.Predicates.equal;",
    "right" : "import static com.hazelcast.query.Predicates.equal;",
    "info" : "ImportDeclaration[1632-1683]:ImportDeclaration[1630-1681]"
  }, {
    "left" : "import static com.hazelcast.query.Predicates.greaterEqual;",
    "right" : "import static com.hazelcast.query.Predicates.greaterEqual;",
    "info" : "ImportDeclaration[1684-1742]:ImportDeclaration[1682-1740]"
  }, {
    "left" : "import static com.hazelcast.query.Predicates.greaterThan;",
    "right" : "import static com.hazelcast.query.Predicates.greaterThan;",
    "info" : "ImportDeclaration[1743-1800]:ImportDeclaration[1741-1798]"
  }, {
    "left" : "import static com.hazelcast.query.Predicates.ilike;",
    "right" : "import static com.hazelcast.query.Predicates.ilike;",
    "info" : "ImportDeclaration[1801-1852]:ImportDeclaration[1799-1850]"
  }, {
    "left" : "import static com.hazelcast.query.Predicates.in;",
    "right" : "import static com.hazelcast.query.Predicates.in;",
    "info" : "ImportDeclaration[1853-1901]:ImportDeclaration[1851-1899]"
  }, {
    "left" : "import static com.hazelcast.query.Predicates.instanceOf;",
    "right" : "import static com.hazelcast.query.Predicates.instanceOf;",
    "info" : "ImportDeclaration[1902-1958]:ImportDeclaration[1900-1956]"
  }, {
    "left" : "import static com.hazelcast.query.Predicates.lessEqual;",
    "right" : "import static com.hazelcast.query.Predicates.lessEqual;",
    "info" : "ImportDeclaration[1959-2014]:ImportDeclaration[1957-2012]"
  }, {
    "left" : "import static com.hazelcast.query.Predicates.lessThan;",
    "right" : "import static com.hazelcast.query.Predicates.lessThan;",
    "info" : "ImportDeclaration[2015-2069]:ImportDeclaration[2013-2067]"
  }, {
    "left" : "import static com.hazelcast.query.Predicates.like;",
    "right" : "import static com.hazelcast.query.Predicates.like;",
    "info" : "ImportDeclaration[2070-2120]:ImportDeclaration[2068-2118]"
  }, {
    "left" : "import static com.hazelcast.query.Predicates.notEqual;",
    "right" : "import static com.hazelcast.query.Predicates.notEqual;",
    "info" : "ImportDeclaration[2121-2175]:ImportDeclaration[2119-2173]"
  }, {
    "left" : "import static com.hazelcast.query.Predicates.or;",
    "right" : "import static com.hazelcast.query.Predicates.or;",
    "info" : "ImportDeclaration[2176-2224]:ImportDeclaration[2174-2222]"
  }, {
    "left" : "import static com.hazelcast.query.Predicates.regex;",
    "right" : "import static com.hazelcast.query.Predicates.regex;",
    "info" : "ImportDeclaration[2225-2276]:ImportDeclaration[2223-2274]"
  }, {
    "left" : "import static com.hazelcast.query.SampleObjects.Employee;",
    "right" : "import static com.hazelcast.query.SampleObjects.Employee;",
    "info" : "ImportDeclaration[2277-2334]:ImportDeclaration[2275-2332]"
  }, {
    "left" : "import static com.hazelcast.query.SampleObjects.Value;",
    "right" : "import static com.hazelcast.query.SampleObjects.Value;",
    "info" : "ImportDeclaration[2335-2389]:ImportDeclaration[2333-2387]"
  }, {
    "left" : "import static java.lang.Boolean.FALSE;",
    "right" : "import static java.lang.Boolean.FALSE;",
    "info" : "ImportDeclaration[2390-2428]:ImportDeclaration[2388-2426]"
  }, {
    "left" : "import static java.lang.Boolean.TRUE;",
    "right" : "import static java.lang.Boolean.TRUE;",
    "info" : "ImportDeclaration[2429-2466]:ImportDeclaration[2427-2464]"
  }, {
    "left" : "import static java.util.Map.Entry;",
    "right" : "import static java.util.Map.Entry;",
    "info" : "ImportDeclaration[2467-2501]:ImportDeclaration[2465-2499]"
  }, {
    "left" : "import static org.junit.Assert.assertFalse;",
    "right" : "import static org.junit.Assert.assertFalse;",
    "info" : "ImportDeclaration[2502-2545]:ImportDeclaration[2500-2543]"
  }, {
    "left" : "import static org.junit.Assert.assertTrue;",
    "right" : "import static org.junit.Assert.assertTrue;",
    "info" : "ImportDeclaration[2546-2588]:ImportDeclaration[2544-2586]"
  }, {
    "left" : "@RunWith(HazelcastSerialClassRunner.class)",
    "right" : "@RunWith(HazelcastSerialClassRunner.class)",
    "info" : "SingleMemberAnnotation[2590-2632]:SingleMemberAnnotation[2588-2630]"
  }, {
    "left" : "@Category(QuickTest.class)",
    "right" : "@Category(QuickTest.class)",
    "info" : "SingleMemberAnnotation[2633-2659]:SingleMemberAnnotation[2631-2657]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2660-2666]:Modifier[2658-2664]"
  }, {
    "left" : "HazelcastTestSupport",
    "right" : "HazelcastTestSupport",
    "info" : "SimpleType[2696-2716]:SimpleType[2694-2714]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[2724-2729]:MarkerAnnotation[2722-2727]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2734-2740]:Modifier[2732-2738]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2741-2745]:PrimitiveType[2739-2743]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[2813-2822]:SimpleType[2811-2820]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2823-3410]:Block[2821-3408]"
  }, {
    "left" : "final HazelcastInstance instance = createHazelcastInstance();",
    "right" : "final HazelcastInstance instance = createHazelcastInstance();",
    "info" : "VariableDeclarationStatement[2833-2894]:VariableDeclarationStatement[2831-2892]"
  }, {
    "left" : "final IMap<Object, Object> map = instance.getMap(\"map\");",
    "right" : "final IMap<Object, Object> map = instance.getMap(\"map\");",
    "info" : "VariableDeclarationStatement[2903-2959]:VariableDeclarationStatement[2901-2957]"
  }, {
    "left" : "map.addIndex(\"name\", false);",
    "right" : "map.addIndex(\"name\", false);",
    "info" : "ExpressionStatement[2968-2996]:ExpressionStatement[2966-2994]"
  }, {
    "left" : "String name = randomString();",
    "right" : "String name = randomString();",
    "info" : "VariableDeclarationStatement[3005-3034]:VariableDeclarationStatement[3003-3032]"
  }, {
    "left" : "map.put(\"key\", new Value(name));",
    "right" : "map.put(\"key\", new Value(name));",
    "info" : "ExpressionStatement[3043-3075]:ExpressionStatement[3041-3073]"
  }, {
    "left" : "final ShouldExecuteOncePredicate indexAwareNotIndexedPredicate = new ShouldExecuteOncePredicate();",
    "right" : "final ShouldExecuteOncePredicate indexAwareNotIndexedPredicate = new ShouldExecuteOncePredicate();",
    "info" : "VariableDeclarationStatement[3085-3183]:VariableDeclarationStatement[3083-3181]"
  }, {
    "left" : "final EqualPredicate equalPredicate = new EqualPredicate(\"name\", name);",
    "right" : "final EqualPredicate equalPredicate = new EqualPredicate(\"name\", name);",
    "info" : "VariableDeclarationStatement[3192-3263]:VariableDeclarationStatement[3190-3261]"
  }, {
    "left" : "final AndPredicate andPredicate = new AndPredicate(indexAwareNotIndexedPredicate, equalPredicate);",
    "right" : "final AndPredicate andPredicate = new AndPredicate(indexAwareNotIndexedPredicate, equalPredicate);",
    "info" : "VariableDeclarationStatement[3272-3370]:VariableDeclarationStatement[3270-3368]"
  }, {
    "left" : "map.values(andPredicate);",
    "right" : "map.values(andPredicate);",
    "info" : "ExpressionStatement[3379-3404]:ExpressionStatement[3377-3402]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[3416-3422]:Modifier[3414-3420]"
  }, {
    "left" : "IndexAwarePredicate",
    "right" : "IndexAwarePredicate",
    "info" : "SimpleType[3467-3486]:SimpleType[3465-3484]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[3533-3542]:MarkerAnnotation[3531-3540]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3551-3557]:Modifier[3549-3555]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[3558-3565]:PrimitiveType[3556-3563]"
  }, {
    "left" : "Map.Entry mapEntry",
    "right" : "Map.Entry mapEntry",
    "info" : "SingleVariableDeclaration[3572-3590]:SingleVariableDeclaration[3570-3588]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3592-3750]:Block[3590-3748]"
  }, {
    "left" : "if (!executed)",
    "right" : "if (!executed)",
    "info" : "IfStatement[3606-3698]:IfStatement[3604-3696]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3621-3698]:Block[3619-3696]"
  }, {
    "left" : "executed = true;",
    "right" : "executed = true;",
    "info" : "ExpressionStatement[3639-3655]:ExpressionStatement[3637-3653]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[3672-3684]:ReturnStatement[3670-3682]"
  }, {
    "left" : "throw new RuntimeException();",
    "right" : "throw new RuntimeException();",
    "info" : "ThrowStatement[3711-3740]:ThrowStatement[3709-3738]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[3760-3769]:MarkerAnnotation[3758-3767]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3778-3784]:Modifier[3776-3782]"
  }, {
    "left" : "Set<QueryableEntry>",
    "right" : "Set<QueryableEntry>",
    "info" : "ParameterizedType[3785-3804]:ParameterizedType[3783-3802]"
  }, {
    "left" : "final QueryContext queryContext",
    "right" : "final QueryContext queryContext",
    "info" : "SingleVariableDeclaration[3812-3843]:SingleVariableDeclaration[3810-3841]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3845-3881]:Block[3843-3879]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[3859-3871]:ReturnStatement[3857-3869]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[3891-3900]:MarkerAnnotation[3889-3898]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3909-3915]:Modifier[3907-3913]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[3916-3923]:PrimitiveType[3914-3921]"
  }, {
    "left" : "final QueryContext queryContext",
    "right" : "final QueryContext queryContext",
    "info" : "SingleVariableDeclaration[3934-3965]:SingleVariableDeclaration[3932-3963]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3967-4004]:Block[3965-4002]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[3981-3994]:ReturnStatement[3979-3992]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[4016-4021]:MarkerAnnotation[4014-4019]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4026-4032]:Modifier[4024-4030]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4033-4037]:PrimitiveType[4031-4035]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4050-4696]:Block[4048-4694]"
  }, {
    "left" : "assertPredicateTrue(equal(null, \"value\"), \"value\");",
    "right" : "assertPredicateTrue(equal(null, \"value\"), \"value\");",
    "info" : "ExpressionStatement[4060-4111]:ExpressionStatement[4058-4109]"
  }, {
    "left" : "assertPredicateFalse(equal(null, \"value1\"), \"value\");",
    "right" : "assertPredicateFalse(equal(null, \"value1\"), \"value\");",
    "info" : "ExpressionStatement[4120-4173]:ExpressionStatement[4118-4171]"
  }, {
    "left" : "assertPredicateTrue(equal(null, TRUE), true);",
    "right" : "assertPredicateTrue(equal(null, TRUE), true);",
    "info" : "ExpressionStatement[4182-4227]:ExpressionStatement[4180-4225]"
  }, {
    "left" : "assertPredicateTrue(equal(null, true), TRUE);",
    "right" : "assertPredicateTrue(equal(null, true), TRUE);",
    "info" : "ExpressionStatement[4236-4281]:ExpressionStatement[4234-4279]"
  }, {
    "left" : "assertPredicateFalse(equal(null, true), FALSE);",
    "right" : "assertPredicateFalse(equal(null, true), FALSE);",
    "info" : "ExpressionStatement[4290-4337]:ExpressionStatement[4288-4335]"
  }, {
    "left" : "assertPredicateFalse(equal(null, new BigDecimal(\"1.23E3\")), new BigDecimal(\"1.23E2\"));",
    "right" : "assertPredicateFalse(equal(null, new BigDecimal(\"1.23E3\")), new BigDecimal(\"1.23E2\"));",
    "info" : "ExpressionStatement[4346-4432]:ExpressionStatement[4344-4430]"
  }, {
    "left" : "assertPredicateTrue(equal(null, new BigDecimal(\"1.23E3\")), new BigDecimal(\"1.23E3\"));",
    "right" : "assertPredicateTrue(equal(null, new BigDecimal(\"1.23E3\")), new BigDecimal(\"1.23E3\"));",
    "info" : "ExpressionStatement[4441-4526]:ExpressionStatement[4439-4524]"
  }, {
    "left" : "assertPredicateFalse(equal(null, 15.22), 15.23);",
    "right" : "assertPredicateFalse(equal(null, 15.22), 15.23);",
    "info" : "ExpressionStatement[4535-4583]:ExpressionStatement[4533-4581]"
  }, {
    "left" : "assertPredicateTrue(equal(null, 15.22), 15.22);",
    "right" : "assertPredicateTrue(equal(null, 15.22), 15.22);",
    "info" : "ExpressionStatement[4592-4639]:ExpressionStatement[4590-4637]"
  }, {
    "left" : "assertPredicateFalse(equal(null, 16), 15);",
    "right" : "assertPredicateFalse(equal(null, 16), 15);",
    "info" : "ExpressionStatement[4648-4690]:ExpressionStatement[4646-4688]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[4703-4708]:MarkerAnnotation[4701-4706]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4713-4719]:Modifier[4711-4717]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4720-4724]:PrimitiveType[4718-4722]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4735-5247]:Block[4733-5245]"
  }, {
    "left" : "final Predicate and1 = and(greaterThan(null, 4), lessThan(null, 6));",
    "right" : "final Predicate and1 = and(greaterThan(null, 4), lessThan(null, 6));",
    "info" : "VariableDeclarationStatement[4745-4813]:VariableDeclarationStatement[4743-4811]"
  }, {
    "left" : "assertPredicateTrue(and1, 5);",
    "right" : "assertPredicateTrue(and1, 5);",
    "info" : "ExpressionStatement[4822-4851]:ExpressionStatement[4820-4849]"
  }, {
    "left" : "final Predicate and2 = and(greaterThan(null, 5), lessThan(null, 6));",
    "right" : "final Predicate and2 = and(greaterThan(null, 5), lessThan(null, 6));",
    "info" : "VariableDeclarationStatement[4860-4928]:VariableDeclarationStatement[4858-4926]"
  }, {
    "left" : "assertPredicateFalse(and2, 4);",
    "right" : "assertPredicateFalse(and2, 4);",
    "info" : "ExpressionStatement[4937-4967]:ExpressionStatement[4935-4965]"
  }, {
    "left" : "final Predicate and3 = and(greaterThan(null, 4), lessThan(null, 6), equal(null, 5));",
    "right" : "final Predicate and3 = and(greaterThan(null, 4), lessThan(null, 6), equal(null, 5));",
    "info" : "VariableDeclarationStatement[4976-5060]:VariableDeclarationStatement[4974-5058]"
  }, {
    "left" : "assertPredicateTrue(and3, 5);",
    "right" : "assertPredicateTrue(and3, 5);",
    "info" : "ExpressionStatement[5069-5098]:ExpressionStatement[5067-5096]"
  }, {
    "left" : "final Predicate and4 = Predicates.and(greaterThan(null, 3), lessThan(null, 6), equal(null, 4));",
    "right" : "final Predicate and4 = Predicates.and(greaterThan(null, 3), lessThan(null, 6), equal(null, 4));",
    "info" : "VariableDeclarationStatement[5107-5202]:VariableDeclarationStatement[5105-5200]"
  }, {
    "left" : "assertPredicateFalse(and4, 5);",
    "right" : "assertPredicateFalse(and4, 5);",
    "info" : "ExpressionStatement[5211-5241]:ExpressionStatement[5209-5239]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[5253-5258]:MarkerAnnotation[5251-5256]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5263-5269]:Modifier[5261-5267]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[5270-5274]:PrimitiveType[5268-5272]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5284-5448]:Block[5282-5446]"
  }, {
    "left" : "final Predicate or1 = or(equal(null, 3), equal(null, 4), equal(null, 5));",
    "right" : "final Predicate or1 = or(equal(null, 3), equal(null, 4), equal(null, 5));",
    "info" : "VariableDeclarationStatement[5294-5367]:VariableDeclarationStatement[5292-5365]"
  }, {
    "left" : "assertPredicateTrue(or1, 4);",
    "right" : "assertPredicateTrue(or1, 4);",
    "info" : "ExpressionStatement[5376-5404]:ExpressionStatement[5374-5402]"
  }, {
    "left" : "assertPredicateFalse(or1, 6);",
    "right" : "assertPredicateFalse(or1, 6);",
    "info" : "ExpressionStatement[5413-5442]:ExpressionStatement[5411-5440]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[5454-5459]:MarkerAnnotation[5452-5457]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5464-5470]:Modifier[5462-5468]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[5471-5475]:PrimitiveType[5469-5473]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5495-5557]:Block[5493-5555]"
  }, {
    "left" : "assertPredicateTrue(greaterEqual(null, 5), 5);",
    "right" : "assertPredicateTrue(greaterEqual(null, 5), 5);",
    "info" : "ExpressionStatement[5505-5551]:ExpressionStatement[5503-5549]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[5563-5568]:MarkerAnnotation[5561-5566]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5573-5579]:Modifier[5571-5577]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[5580-5584]:PrimitiveType[5578-5582]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5600-5877]:Block[5598-5875]"
  }, {
    "left" : "assertPredicateTrue(lessThan(null, 7), 6);",
    "right" : "assertPredicateTrue(lessThan(null, 7), 6);",
    "info" : "ExpressionStatement[5610-5652]:ExpressionStatement[5608-5650]"
  }, {
    "left" : "assertPredicateFalse(lessThan(null, 3), 4);",
    "right" : "assertPredicateFalse(lessThan(null, 3), 4);",
    "info" : "ExpressionStatement[5661-5704]:ExpressionStatement[5659-5702]"
  }, {
    "left" : "assertPredicateFalse(lessThan(null, 4), 4);",
    "right" : "assertPredicateFalse(lessThan(null, 4), 4);",
    "info" : "ExpressionStatement[5713-5756]:ExpressionStatement[5711-5754]"
  }, {
    "left" : "assertPredicateTrue(lessThan(null, \"tc\"), \"bz\");",
    "right" : "assertPredicateTrue(lessThan(null, \"tc\"), \"bz\");",
    "info" : "ExpressionStatement[5765-5813]:ExpressionStatement[5763-5811]"
  }, {
    "left" : "assertPredicateFalse(lessThan(null, \"gx\"), \"h0\");",
    "right" : "assertPredicateFalse(lessThan(null, \"gx\"), \"h0\");",
    "info" : "ExpressionStatement[5822-5871]:ExpressionStatement[5820-5869]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[5883-5888]:MarkerAnnotation[5881-5886]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5893-5899]:Modifier[5891-5897]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[5900-5904]:PrimitiveType[5898-5902]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5923-6315]:Block[5921-6313]"
  }, {
    "left" : "assertPredicateTrue(greaterThan(null, 5), 6);",
    "right" : "assertPredicateTrue(greaterThan(null, 5), 6);",
    "info" : "ExpressionStatement[5933-5978]:ExpressionStatement[5931-5976]"
  }, {
    "left" : "assertPredicateFalse(greaterThan(null, 5), 4);",
    "right" : "assertPredicateFalse(greaterThan(null, 5), 4);",
    "info" : "ExpressionStatement[5987-6033]:ExpressionStatement[5985-6031]"
  }, {
    "left" : "assertPredicateFalse(greaterThan(null, 5), 5);",
    "right" : "assertPredicateFalse(greaterThan(null, 5), 5);",
    "info" : "ExpressionStatement[6042-6088]:ExpressionStatement[6040-6086]"
  }, {
    "left" : "assertPredicateTrue(greaterThan(null, \"aa\"), \"xa\");",
    "right" : "assertPredicateTrue(greaterThan(null, \"aa\"), \"xa\");",
    "info" : "ExpressionStatement[6097-6148]:ExpressionStatement[6095-6146]"
  }, {
    "left" : "assertPredicateFalse(greaterThan(null, \"da\"), \"cz\");",
    "right" : "assertPredicateFalse(greaterThan(null, \"da\"), \"cz\");",
    "info" : "ExpressionStatement[6157-6209]:ExpressionStatement[6155-6207]"
  }, {
    "left" : "assertPredicateTrue(greaterThan(null, new BigDecimal(\"1.23E2\")), new BigDecimal(\"1.23E3\"));",
    "right" : "assertPredicateTrue(greaterThan(null, new BigDecimal(\"1.23E2\")), new BigDecimal(\"1.23E3\"));",
    "info" : "ExpressionStatement[6218-6309]:ExpressionStatement[6216-6307]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[6321-6326]:MarkerAnnotation[6319-6324]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6331-6337]:Modifier[6329-6335]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[6338-6342]:PrimitiveType[6336-6340]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6359-6418]:Block[6357-6416]"
  }, {
    "left" : "assertPredicateTrue(lessEqual(null, 4), 4);",
    "right" : "assertPredicateTrue(lessEqual(null, 4), 4);",
    "info" : "ExpressionStatement[6369-6412]:ExpressionStatement[6367-6410]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[6424-6429]:MarkerAnnotation[6422-6427]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6434-6440]:Modifier[6432-6438]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[6441-6445]:PrimitiveType[6439-6443]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6480-7220]:Block[6478-7218]"
  }, {
    "left" : "assertFalse_withNullEntry(lessEqual(\"nullField\", 1));",
    "right" : "assertFalse_withNullEntry(lessEqual(\"nullField\", 1));",
    "info" : "ExpressionStatement[6490-6543]:ExpressionStatement[6488-6541]"
  }, {
    "left" : "assertFalse_withNullEntry(in(\"nullField\", 1));",
    "right" : "assertFalse_withNullEntry(in(\"nullField\", 1));",
    "info" : "ExpressionStatement[6553-6599]:ExpressionStatement[6551-6597]"
  }, {
    "left" : "assertFalse_withNullEntry(lessThan(\"nullField\", 1));",
    "right" : "assertFalse_withNullEntry(lessThan(\"nullField\", 1));",
    "info" : "ExpressionStatement[6608-6660]:ExpressionStatement[6606-6658]"
  }, {
    "left" : "assertFalse_withNullEntry(greaterEqual(\"nullField\", 1));",
    "right" : "assertFalse_withNullEntry(greaterEqual(\"nullField\", 1));",
    "info" : "ExpressionStatement[6669-6725]:ExpressionStatement[6667-6723]"
  }, {
    "left" : "assertFalse_withNullEntry(greaterThan(\"nullField\", 1));",
    "right" : "assertFalse_withNullEntry(greaterThan(\"nullField\", 1));",
    "info" : "ExpressionStatement[6734-6789]:ExpressionStatement[6732-6787]"
  }, {
    "left" : "assertFalse_withNullEntry(equal(\"nullField\", 1));",
    "right" : "assertFalse_withNullEntry(equal(\"nullField\", 1));",
    "info" : "ExpressionStatement[6798-6847]:ExpressionStatement[6796-6845]"
  }, {
    "left" : "assertFalse_withNullEntry(notEqual(\"nullField\", null));",
    "right" : "assertFalse_withNullEntry(notEqual(\"nullField\", null));",
    "info" : "ExpressionStatement[6856-6911]:ExpressionStatement[6854-6909]"
  }, {
    "left" : "assertFalse_withNullEntry(notEqual(\"nullField\", 1));",
    "right" : "assertFalse_withNullEntry(notEqual(\"nullField\", 1));",
    "info" : "ExpressionStatement[6920-6972]:ExpressionStatement[6918-6970]"
  }, {
    "left" : "assertFalse_withNullEntry(between(\"nullField\", 1, 1));",
    "right" : "assertFalse_withNullEntry(between(\"nullField\", 1, 1));",
    "info" : "ExpressionStatement[6981-7035]:ExpressionStatement[6979-7033]"
  }, {
    "left" : "assertTrue_withNullEntry(like(\"nullField\", null));",
    "right" : "assertTrue_withNullEntry(like(\"nullField\", null));",
    "info" : "ExpressionStatement[7044-7094]:ExpressionStatement[7042-7092]"
  }, {
    "left" : "assertTrue_withNullEntry(ilike(\"nullField\", null));",
    "right" : "assertTrue_withNullEntry(ilike(\"nullField\", null));",
    "info" : "ExpressionStatement[7103-7154]:ExpressionStatement[7101-7152]"
  }, {
    "left" : "assertTrue_withNullEntry(regex(\"nullField\", null));",
    "right" : "assertTrue_withNullEntry(regex(\"nullField\", null));",
    "info" : "ExpressionStatement[7163-7214]:ExpressionStatement[7161-7212]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[7226-7231]:MarkerAnnotation[7224-7229]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7236-7242]:Modifier[7234-7240]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7243-7247]:PrimitiveType[7241-7245]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7262-7562]:Block[7260-7560]"
  }, {
    "left" : "assertPredicateTrue(between(null, 4, 6), 5);",
    "right" : "assertPredicateTrue(between(null, 4, 6), 5);",
    "info" : "ExpressionStatement[7272-7316]:ExpressionStatement[7270-7314]"
  }, {
    "left" : "assertPredicateTrue(between(null, 5, 6), 5);",
    "right" : "assertPredicateTrue(between(null, 5, 6), 5);",
    "info" : "ExpressionStatement[7325-7369]:ExpressionStatement[7323-7367]"
  }, {
    "left" : "assertPredicateTrue(between(null, \"abc\", \"xyz\"), \"prs\");",
    "right" : "assertPredicateTrue(between(null, \"abc\", \"xyz\"), \"prs\");",
    "info" : "ExpressionStatement[7378-7434]:ExpressionStatement[7376-7432]"
  }, {
    "left" : "assertPredicateFalse(between(null, \"klmn\", \"xyz\"), \"efgh\");",
    "right" : "assertPredicateFalse(between(null, \"klmn\", \"xyz\"), \"efgh\");",
    "info" : "ExpressionStatement[7443-7502]:ExpressionStatement[7441-7500]"
  }, {
    "left" : "assertPredicateFalse(between(null, 6, 7), 5);",
    "right" : "assertPredicateFalse(between(null, 6, 7), 5);",
    "info" : "ExpressionStatement[7511-7556]:ExpressionStatement[7509-7554]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[7568-7573]:MarkerAnnotation[7566-7571]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7578-7584]:Modifier[7576-7582]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7585-7589]:PrimitiveType[7583-7587]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7599-7815]:Block[7597-7813]"
  }, {
    "left" : "assertPredicateTrue(in(null, 4, 7, 8, 5), 5);",
    "right" : "assertPredicateTrue(in(null, 4, 7, 8, 5), 5);",
    "info" : "ExpressionStatement[7609-7654]:ExpressionStatement[7607-7652]"
  }, {
    "left" : "assertPredicateTrue(in(null, 5, 7, 8), 5);",
    "right" : "assertPredicateTrue(in(null, 5, 7, 8), 5);",
    "info" : "ExpressionStatement[7663-7705]:ExpressionStatement[7661-7703]"
  }, {
    "left" : "assertPredicateFalse(in(null, 6, 7, 8), 5);",
    "right" : "assertPredicateFalse(in(null, 6, 7, 8), 5);",
    "info" : "ExpressionStatement[7714-7757]:ExpressionStatement[7712-7755]"
  }, {
    "left" : "assertPredicateFalse(in(null, 6, 7, 8), 9);",
    "right" : "assertPredicateFalse(in(null, 6, 7, 8), 9);",
    "info" : "ExpressionStatement[7766-7809]:ExpressionStatement[7764-7807]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[7821-7826]:MarkerAnnotation[7819-7824]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7831-7837]:Modifier[7829-7835]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7838-7842]:PrimitiveType[7836-7840]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7854-9109]:Block[7852-9107]"
  }, {
    "left" : "assertPredicateTrue(like(null, \"J%\"), \"Java\");",
    "right" : "assertPredicateTrue(like(null, \"J%\"), \"Java\");",
    "info" : "ExpressionStatement[7864-7910]:ExpressionStatement[7862-7908]"
  }, {
    "left" : "assertPredicateTrue(like(null, \"Ja%\"), \"Java\");",
    "right" : "assertPredicateTrue(like(null, \"Ja%\"), \"Java\");",
    "info" : "ExpressionStatement[7919-7966]:ExpressionStatement[7917-7964]"
  }, {
    "left" : "assertPredicateTrue(like(null, \"J_v_\"), \"Java\");",
    "right" : "assertPredicateTrue(like(null, \"J_v_\"), \"Java\");",
    "info" : "ExpressionStatement[7975-8023]:ExpressionStatement[7973-8021]"
  }, {
    "left" : "assertPredicateTrue(like(null, \"_av_\"), \"Java\");",
    "right" : "assertPredicateTrue(like(null, \"_av_\"), \"Java\");",
    "info" : "ExpressionStatement[8032-8080]:ExpressionStatement[8030-8078]"
  }, {
    "left" : "assertPredicateTrue(like(null, \"_a__\"), \"Java\");",
    "right" : "assertPredicateTrue(like(null, \"_a__\"), \"Java\");",
    "info" : "ExpressionStatement[8089-8137]:ExpressionStatement[8087-8135]"
  }, {
    "left" : "assertPredicateTrue(like(null, \"J%v_\"), \"Java\");",
    "right" : "assertPredicateTrue(like(null, \"J%v_\"), \"Java\");",
    "info" : "ExpressionStatement[8146-8194]:ExpressionStatement[8144-8192]"
  }, {
    "left" : "assertPredicateTrue(like(null, \"J%_\"), \"Java\");",
    "right" : "assertPredicateTrue(like(null, \"J%_\"), \"Java\");",
    "info" : "ExpressionStatement[8203-8250]:ExpressionStatement[8201-8248]"
  }, {
    "left" : "assertPredicateFalse(like(null, \"java\"), \"Java\");",
    "right" : "assertPredicateFalse(like(null, \"java\"), \"Java\");",
    "info" : "ExpressionStatement[8259-8308]:ExpressionStatement[8257-8306]"
  }, {
    "left" : "assertPredicateFalse(like(null, \"j%\"), \"Java\");",
    "right" : "assertPredicateFalse(like(null, \"j%\"), \"Java\");",
    "info" : "ExpressionStatement[8317-8364]:ExpressionStatement[8315-8362]"
  }, {
    "left" : "assertPredicateFalse(like(null, \"J_a\"), \"Java\");",
    "right" : "assertPredicateFalse(like(null, \"J_a\"), \"Java\");",
    "info" : "ExpressionStatement[8373-8421]:ExpressionStatement[8371-8419]"
  }, {
    "left" : "assertPredicateFalse(like(null, \"J_ava\"), \"Java\");",
    "right" : "assertPredicateFalse(like(null, \"J_ava\"), \"Java\");",
    "info" : "ExpressionStatement[8430-8480]:ExpressionStatement[8428-8478]"
  }, {
    "left" : "assertPredicateFalse(like(null, \"J_a_a\"), \"Java\");",
    "right" : "assertPredicateFalse(like(null, \"J_a_a\"), \"Java\");",
    "info" : "ExpressionStatement[8489-8539]:ExpressionStatement[8487-8537]"
  }, {
    "left" : "assertPredicateFalse(like(null, \"J_av__\"), \"Java\");",
    "right" : "assertPredicateFalse(like(null, \"J_av__\"), \"Java\");",
    "info" : "ExpressionStatement[8548-8599]:ExpressionStatement[8546-8597]"
  }, {
    "left" : "assertPredicateFalse(like(null, \"J_Va\"), \"Java\");",
    "right" : "assertPredicateFalse(like(null, \"J_Va\"), \"Java\");",
    "info" : "ExpressionStatement[8608-8657]:ExpressionStatement[8606-8655]"
  }, {
    "left" : "assertPredicateTrue(like(null, \"Java World\"), \"Java World\");",
    "right" : "assertPredicateTrue(like(null, \"Java World\"), \"Java World\");",
    "info" : "ExpressionStatement[8666-8726]:ExpressionStatement[8664-8724]"
  }, {
    "left" : "assertPredicateTrue(like(null, \"Java%ld\"), \"Java World\");",
    "right" : "assertPredicateTrue(like(null, \"Java%ld\"), \"Java World\");",
    "info" : "ExpressionStatement[8735-8792]:ExpressionStatement[8733-8790]"
  }, {
    "left" : "assertPredicateTrue(like(null, \"%World\"), \"Java World\");",
    "right" : "assertPredicateTrue(like(null, \"%World\"), \"Java World\");",
    "info" : "ExpressionStatement[8801-8857]:ExpressionStatement[8799-8855]"
  }, {
    "left" : "assertPredicateTrue(like(null, \"Java_World\"), \"Java World\");",
    "right" : "assertPredicateTrue(like(null, \"Java_World\"), \"Java World\");",
    "info" : "ExpressionStatement[8866-8926]:ExpressionStatement[8864-8924]"
  }, {
    "left" : "assertPredicateTrue(like(null, \"J.-*.*\\\\%\"), \"J.-*.*%\");",
    "right" : "assertPredicateTrue(like(null, \"J.-*.*\\\\%\"), \"J.-*.*%\");",
    "info" : "ExpressionStatement[8936-8992]:ExpressionStatement[8934-8990]"
  }, {
    "left" : "assertPredicateTrue(like(null, \"J\\\\_\"), \"J_\");",
    "right" : "assertPredicateTrue(like(null, \"J\\\\_\"), \"J_\");",
    "info" : "ExpressionStatement[9001-9047]:ExpressionStatement[8999-9045]"
  }, {
    "left" : "assertPredicateTrue(like(null, \"J%\"), \"Java\");",
    "right" : "assertPredicateTrue(like(null, \"J%\"), \"Java\");",
    "info" : "ExpressionStatement[9056-9102]:ExpressionStatement[9054-9100]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[9115-9120]:MarkerAnnotation[9113-9118]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9125-9131]:Modifier[9123-9129]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9132-9136]:PrimitiveType[9130-9134]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9149-9499]:Block[9147-9497]"
  }, {
    "left" : "assertPredicateFalse(like(null, \"JavaWorld\"), \"Java World\");",
    "right" : "assertPredicateFalse(like(null, \"JavaWorld\"), \"Java World\");",
    "info" : "ExpressionStatement[9159-9219]:ExpressionStatement[9157-9217]"
  }, {
    "left" : "assertPredicateTrue(ilike(null, \"Java_World\"), \"java World\");",
    "right" : "assertPredicateTrue(ilike(null, \"Java_World\"), \"java World\");",
    "info" : "ExpressionStatement[9228-9289]:ExpressionStatement[9226-9287]"
  }, {
    "left" : "assertPredicateTrue(ilike(null, \"java%ld\"), \"Java World\");",
    "right" : "assertPredicateTrue(ilike(null, \"java%ld\"), \"Java World\");",
    "info" : "ExpressionStatement[9298-9356]:ExpressionStatement[9296-9354]"
  }, {
    "left" : "assertPredicateTrue(ilike(null, \"%world\"), \"Java World\");",
    "right" : "assertPredicateTrue(ilike(null, \"%world\"), \"Java World\");",
    "info" : "ExpressionStatement[9365-9422]:ExpressionStatement[9363-9420]"
  }, {
    "left" : "assertPredicateFalse(ilike(null, \"Java_World\"), \"gava World\");",
    "right" : "assertPredicateFalse(ilike(null, \"Java_World\"), \"gava World\");",
    "info" : "ExpressionStatement[9431-9493]:ExpressionStatement[9429-9491]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[9505-9510]:MarkerAnnotation[9503-9508]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9515-9521]:Modifier[9513-9519]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9522-9526]:PrimitiveType[9520-9524]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9546-9769]:Block[9544-9767]"
  }, {
    "left" : "assertTrue(instanceOf(Long.class).apply(new DummyEntry(1L)));",
    "right" : "assertTrue(instanceOf(Long.class).apply(new DummyEntry(1L)));",
    "info" : "ExpressionStatement[9556-9617]:ExpressionStatement[9554-9615]"
  }, {
    "left" : "assertFalse(instanceOf(Long.class).apply(new DummyEntry(\"Java\")));",
    "right" : "assertFalse(instanceOf(Long.class).apply(new DummyEntry(\"Java\")));",
    "info" : "ExpressionStatement[9626-9692]:ExpressionStatement[9624-9690]"
  }, {
    "left" : "assertTrue(instanceOf(Number.class).apply(new DummyEntry(4)));",
    "right" : "assertTrue(instanceOf(Number.class).apply(new DummyEntry(4)));",
    "info" : "ExpressionStatement[9701-9763]:ExpressionStatement[9699-9761]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[9775-9780]:MarkerAnnotation[9773-9778]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9785-9791]:Modifier[9783-9789]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9792-9796]:PrimitiveType[9790-9794]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9815-10259]:Block[9813-10257]"
  }, {
    "left" : "Object value = new Employee(12, \"abc-123-xvz\", 34, true, 10D);",
    "right" : "Object value = new Employee(12, \"abc-123-xvz\", 34, true, 10D);",
    "info" : "VariableDeclarationStatement[9825-9887]:VariableDeclarationStatement[9823-9885]"
  }, {
    "left" : "EntryObject e = new PredicateBuilder().getEntryObject();",
    "right" : "EntryObject e = new PredicateBuilder().getEntryObject();",
    "info" : "VariableDeclarationStatement[9896-9952]:VariableDeclarationStatement[9894-9950]"
  }, {
    "left" : "EntryObject e2 = e.get(\"age\");",
    "right" : "EntryObject e2 = e.get(\"age\");",
    "info" : "VariableDeclarationStatement[9961-9991]:VariableDeclarationStatement[9959-9989]"
  }, {
    "left" : "Predicate predicate = e2.greaterEqual(29).and(e2.lessEqual(36));",
    "right" : "Predicate predicate = e2.greaterEqual(29).and(e2.lessEqual(36));",
    "info" : "VariableDeclarationStatement[10000-10064]:VariableDeclarationStatement[9998-10062]"
  }, {
    "left" : "assertTrue(predicate.apply(createEntry(\"1\", value)));",
    "right" : "assertTrue(predicate.apply(createEntry(\"1\", value)));",
    "info" : "ExpressionStatement[10073-10126]:ExpressionStatement[10071-10124]"
  }, {
    "left" : "e = new PredicateBuilder().getEntryObject();",
    "right" : "e = new PredicateBuilder().getEntryObject();",
    "info" : "ExpressionStatement[10135-10179]:ExpressionStatement[10133-10177]"
  }, {
    "left" : "assertTrue(e.get(\"id\").equal(12).apply(createEntry(\"1\", value)));",
    "right" : "assertTrue(e.get(\"id\").equal(12).apply(createEntry(\"1\", value)));",
    "info" : "ExpressionStatement[10188-10253]:ExpressionStatement[10186-10251]"
  }, {
    "left" : "@Test(expected = NullPointerException.class)",
    "right" : "@Test(expected = NullPointerException.class)",
    "info" : "NormalAnnotation[10265-10309]:NormalAnnotation[10263-10307]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10314-10320]:Modifier[10312-10318]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10321-10325]:PrimitiveType[10319-10323]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10344-10395]:Block[10342-10393]"
  }, {
    "left" : "Predicates.between(\"\", null, null);",
    "right" : "Predicates.between(\"\", null, null);",
    "info" : "ExpressionStatement[10354-10389]:ExpressionStatement[10352-10387]"
  }, {
    "left" : "@Test(expected = NullPointerException.class)",
    "right" : "@Test(expected = NullPointerException.class)",
    "info" : "NormalAnnotation[10401-10445]:NormalAnnotation[10399-10443]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10450-10456]:Modifier[10448-10454]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10457-10461]:PrimitiveType[10455-10459]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10481-10527]:Block[10479-10525]"
  }, {
    "left" : "Predicates.lessThan(\"\", null);",
    "right" : "Predicates.lessThan(\"\", null);",
    "info" : "ExpressionStatement[10491-10521]:ExpressionStatement[10489-10519]"
  }, {
    "left" : "@Test(expected = NullPointerException.class)",
    "right" : "@Test(expected = NullPointerException.class)",
    "info" : "NormalAnnotation[10533-10577]:NormalAnnotation[10531-10575]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10582-10588]:Modifier[10580-10586]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10589-10593]:PrimitiveType[10587-10591]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10614-10661]:Block[10612-10659]"
  }, {
    "left" : "Predicates.lessEqual(\"\", null);",
    "right" : "Predicates.lessEqual(\"\", null);",
    "info" : "ExpressionStatement[10624-10655]:ExpressionStatement[10622-10653]"
  }, {
    "left" : "@Test(expected = NullPointerException.class)",
    "right" : "@Test(expected = NullPointerException.class)",
    "info" : "NormalAnnotation[10667-10711]:NormalAnnotation[10665-10709]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10716-10722]:Modifier[10714-10720]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10723-10727]:PrimitiveType[10721-10725]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10750-10799]:Block[10748-10797]"
  }, {
    "left" : "Predicates.greaterThan(\"\", null);",
    "right" : "Predicates.greaterThan(\"\", null);",
    "info" : "ExpressionStatement[10760-10793]:ExpressionStatement[10758-10791]"
  }, {
    "left" : "@Test(expected = NullPointerException.class)",
    "right" : "@Test(expected = NullPointerException.class)",
    "info" : "NormalAnnotation[10805-10849]:NormalAnnotation[10803-10847]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10854-10860]:Modifier[10852-10858]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10861-10865]:PrimitiveType[10859-10863]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10889-10939]:Block[10887-10937]"
  }, {
    "left" : "Predicates.greaterEqual(\"\", null);",
    "right" : "Predicates.greaterEqual(\"\", null);",
    "info" : "ExpressionStatement[10899-10933]:ExpressionStatement[10897-10931]"
  }, {
    "left" : "@Test(expected = NullPointerException.class)",
    "right" : "@Test(expected = NullPointerException.class)",
    "info" : "NormalAnnotation[10945-10989]:NormalAnnotation[10943-10987]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10994-11000]:Modifier[10992-10998]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11001-11005]:PrimitiveType[10999-11003]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11032-11072]:Block[11030-11070]"
  }, {
    "left" : "Predicates.in(\"\", null);",
    "right" : "Predicates.in(\"\", null);",
    "info" : "ExpressionStatement[11042-11066]:ExpressionStatement[11040-11064]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[11078-11085]:Modifier[11076-11083]"
  }, {
    "left" : "QueryEntry",
    "right" : "QueryEntry",
    "info" : "SimpleType[11111-11121]:SimpleType[11109-11119]"
  }, {
    "left" : "Comparable attribute",
    "right" : "Comparable attribute",
    "info" : "SingleVariableDeclaration[11144-11164]:SingleVariableDeclaration[11142-11162]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11166-11231]:Block[11164-11229]"
  }, {
    "left" : "super(null, toData(\"1\"), \"1\", attribute);",
    "right" : "super(null, toData(\"1\"), \"1\", attribute);",
    "info" : "SuperConstructorInvocation[11180-11221]:SuperConstructorInvocation[11178-11219]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[11241-11250]:MarkerAnnotation[11239-11248]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11259-11265]:Modifier[11257-11263]"
  }, {
    "left" : "Comparable",
    "right" : "Comparable",
    "info" : "SimpleType[11266-11276]:SimpleType[11264-11274]"
  }, {
    "left" : "String attributeName",
    "right" : "String attributeName",
    "info" : "SingleVariableDeclaration[11290-11310]:SingleVariableDeclaration[11288-11308]"
  }, {
    "left" : "QueryException",
    "right" : "QueryException",
    "info" : "SimpleType[11319-11333]:SimpleType[11317-11331]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11334-11389]:Block[11332-11387]"
  }, {
    "left" : "return (Comparable) getValue();",
    "right" : "return (Comparable) getValue();",
    "info" : "ReturnStatement[11348-11379]:ReturnStatement[11346-11377]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[11399-11408]:MarkerAnnotation[11397-11406]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11417-11423]:Modifier[11415-11421]"
  }, {
    "left" : "AttributeType",
    "right" : "AttributeType",
    "info" : "SimpleType[11424-11437]:SimpleType[11422-11435]"
  }, {
    "left" : "String attributeName",
    "right" : "String attributeName",
    "info" : "SingleVariableDeclaration[11455-11475]:SingleVariableDeclaration[11453-11473]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11477-11565]:Block[11475-11563]"
  }, {
    "left" : "return ReflectionHelper.getAttributeType(getValue().getClass());",
    "right" : "return ReflectionHelper.getAttributeType(getValue().getClass());",
    "info" : "ReturnStatement[11491-11555]:ReturnStatement[11489-11553]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[11577-11584]:Modifier[11575-11582]"
  }, {
    "left" : "QueryableEntry",
    "right" : "QueryableEntry",
    "info" : "SimpleType[11617-11631]:SimpleType[11615-11629]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[11679-11686]:Modifier[11677-11684]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11704-11715]:Block[11702-11713]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11725-11731]:Modifier[11723-11729]"
  }, {
    "left" : "Integer",
    "right" : "Integer",
    "info" : "SimpleType[11732-11739]:SimpleType[11730-11737]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11755-11796]:Block[11753-11794]"
  }, {
    "left" : "return nullField;",
    "right" : "return nullField;",
    "info" : "ReturnStatement[11769-11786]:ReturnStatement[11767-11784]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11806-11812]:Modifier[11804-11810]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11813-11817]:PrimitiveType[11811-11815]"
  }, {
    "left" : "Integer nullField",
    "right" : "Integer nullField",
    "info" : "SingleVariableDeclaration[11831-11848]:SingleVariableDeclaration[11829-11846]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11850-11901]:Block[11848-11899]"
  }, {
    "left" : "this.nullField = nullField;",
    "right" : "this.nullField = nullField;",
    "info" : "ExpressionStatement[11864-11891]:ExpressionStatement[11862-11889]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[11911-11920]:MarkerAnnotation[11909-11918]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11929-11935]:Modifier[11927-11933]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[11936-11942]:SimpleType[11934-11940]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11954-11990]:Block[11952-11988]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[11968-11980]:ReturnStatement[11966-11978]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[12000-12009]:MarkerAnnotation[11998-12007]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12018-12024]:Modifier[12016-12022]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[12025-12031]:SimpleType[12023-12029]"
  }, {
    "left" : "Object value",
    "right" : "Object value",
    "info" : "SingleVariableDeclaration[12041-12053]:SingleVariableDeclaration[12039-12051]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12055-12091]:Block[12053-12089]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[12069-12081]:ReturnStatement[12067-12079]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[12101-12110]:MarkerAnnotation[12099-12108]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12119-12125]:Modifier[12117-12123]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[12126-12132]:SimpleType[12124-12130]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12142-12175]:Block[12140-12173]"
  }, {
    "left" : "return 1;",
    "right" : "return 1;",
    "info" : "ReturnStatement[12156-12165]:ReturnStatement[12154-12163]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[12185-12194]:MarkerAnnotation[12183-12192]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12203-12209]:Modifier[12201-12207]"
  }, {
    "left" : "Comparable",
    "right" : "Comparable",
    "info" : "SimpleType[12210-12220]:SimpleType[12208-12218]"
  }, {
    "left" : "String attributeName",
    "right" : "String attributeName",
    "info" : "SingleVariableDeclaration[12234-12254]:SingleVariableDeclaration[12232-12252]"
  }, {
    "left" : "QueryException",
    "right" : "QueryException",
    "info" : "SimpleType[12263-12277]:SimpleType[12261-12275]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12278-12314]:Block[12276-12312]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[12292-12304]:ReturnStatement[12290-12302]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[12324-12333]:MarkerAnnotation[12322-12331]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12342-12348]:Modifier[12340-12346]"
  }, {
    "left" : "AttributeType",
    "right" : "AttributeType",
    "info" : "SimpleType[12349-12362]:SimpleType[12347-12360]"
  }, {
    "left" : "String attributeName",
    "right" : "String attributeName",
    "info" : "SingleVariableDeclaration[12380-12400]:SingleVariableDeclaration[12378-12398]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12402-12455]:Block[12400-12453]"
  }, {
    "left" : "return AttributeType.INTEGER;",
    "right" : "return AttributeType.INTEGER;",
    "info" : "ReturnStatement[12416-12445]:ReturnStatement[12414-12443]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[12465-12474]:MarkerAnnotation[12463-12472]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12483-12489]:Modifier[12481-12487]"
  }, {
    "left" : "Data",
    "right" : "Data",
    "info" : "SimpleType[12490-12494]:SimpleType[12488-12492]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12508-12544]:Block[12506-12542]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[12522-12534]:ReturnStatement[12520-12532]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[12554-12563]:MarkerAnnotation[12552-12561]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12572-12578]:Modifier[12570-12576]"
  }, {
    "left" : "Data",
    "right" : "Data",
    "info" : "SimpleType[12579-12583]:SimpleType[12577-12581]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12599-12635]:Block[12597-12633]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[12613-12625]:ReturnStatement[12611-12623]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[12645-12654]:MarkerAnnotation[12643-12652]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12663-12669]:Modifier[12661-12667]"
  }, {
    "left" : "Data",
    "right" : "Data",
    "info" : "SimpleType[12670-12674]:SimpleType[12668-12672]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12689-12725]:Block[12687-12723]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[12703-12715]:ReturnStatement[12701-12713]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12738-12745]:Modifier[12736-12743]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[12746-12752]:Modifier[12744-12750]"
  }, {
    "left" : "Entry",
    "right" : "Entry",
    "info" : "SimpleType[12753-12758]:SimpleType[12751-12756]"
  }, {
    "left" : "final Object key",
    "right" : "final Object key",
    "info" : "SingleVariableDeclaration[12771-12787]:SingleVariableDeclaration[12769-12785]"
  }, {
    "left" : "final Object value",
    "right" : "final Object value",
    "info" : "SingleVariableDeclaration[12789-12807]:SingleVariableDeclaration[12787-12805]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12809-12878]:Block[12807-12876]"
  }, {
    "left" : "return new QueryEntry(null, toData(key), key, value);",
    "right" : "return new QueryEntry(null, toData(key), key, value);",
    "info" : "ReturnStatement[12819-12872]:ReturnStatement[12817-12870]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12884-12891]:Modifier[12882-12889]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12892-12896]:PrimitiveType[12890-12894]"
  }, {
    "left" : "Predicate p",
    "right" : "Predicate p",
    "info" : "SingleVariableDeclaration[12917-12928]:SingleVariableDeclaration[12915-12926]"
  }, {
    "left" : "Comparable comparable",
    "right" : "Comparable comparable",
    "info" : "SingleVariableDeclaration[12930-12951]:SingleVariableDeclaration[12928-12949]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12953-13017]:Block[12951-13015]"
  }, {
    "left" : "assertTrue(p.apply(new DummyEntry(comparable)));",
    "right" : "assertTrue(p.apply(new DummyEntry(comparable)));",
    "info" : "ExpressionStatement[12963-13011]:ExpressionStatement[12961-13009]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[13023-13030]:Modifier[13021-13028]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13031-13035]:PrimitiveType[13029-13033]"
  }, {
    "left" : "Predicate p",
    "right" : "Predicate p",
    "info" : "SingleVariableDeclaration[13057-13068]:SingleVariableDeclaration[13055-13066]"
  }, {
    "left" : "Comparable comparable",
    "right" : "Comparable comparable",
    "info" : "SingleVariableDeclaration[13070-13091]:SingleVariableDeclaration[13068-13089]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13093-13158]:Block[13091-13156]"
  }, {
    "left" : "assertFalse(p.apply(new DummyEntry(comparable)));",
    "right" : "assertFalse(p.apply(new DummyEntry(comparable)));",
    "info" : "ExpressionStatement[13103-13152]:ExpressionStatement[13101-13150]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[13164-13171]:Modifier[13162-13169]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13172-13176]:PrimitiveType[13170-13174]"
  }, {
    "left" : "Predicate p",
    "right" : "Predicate p",
    "info" : "SingleVariableDeclaration[13202-13213]:SingleVariableDeclaration[13200-13211]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13215-13273]:Block[13213-13271]"
  }, {
    "left" : "assertTrue(p.apply(new NullDummyEntry()));",
    "right" : "assertTrue(p.apply(new NullDummyEntry()));",
    "info" : "ExpressionStatement[13225-13267]:ExpressionStatement[13223-13265]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[13279-13286]:Modifier[13277-13284]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13287-13291]:PrimitiveType[13285-13289]"
  }, {
    "left" : "Predicate p",
    "right" : "Predicate p",
    "info" : "SingleVariableDeclaration[13318-13329]:SingleVariableDeclaration[13316-13327]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13331-13390]:Block[13329-13388]"
  }, {
    "left" : "assertFalse(p.apply(new NullDummyEntry()));",
    "right" : "assertFalse(p.apply(new NullDummyEntry()));",
    "info" : "ExpressionStatement[13341-13384]:ExpressionStatement[13339-13382]"
  } ]
}