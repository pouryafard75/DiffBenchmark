{
  "matchedElements" : [
 {
    "left" : "class : TypeCheck",
    "right" : "class : TypeCheck",
    "info" : "TypeDeclaration[2254-70477]:TypeDeclaration[2254-70577]"
  }, {
    "left" : "UNEXPECTED_TOKEN",
    "right" : "UNEXPECTED_TOKEN",
    "info" : "FieldDeclaration[2459-2627]:FieldDeclaration[2459-2627]"
  }, {
    "left" : "BAD_DELETE",
    "right" : "BAD_DELETE",
    "info" : "FieldDeclaration[2694-2856]:FieldDeclaration[2694-2856]"
  }, {
    "left" : "OVERRIDING_PROTOTYPE_WITH_NON_OBJECT",
    "right" : "OVERRIDING_PROTOTYPE_WITH_NON_OBJECT",
    "info" : "FieldDeclaration[2891-3005]:FieldDeclaration[2891-3005]"
  }, {
    "left" : "DETERMINISTIC_TEST",
    "right" : "DETERMINISTIC_TEST",
    "info" : "FieldDeclaration[3139-3355]:FieldDeclaration[3139-3355]"
  }, {
    "left" : "DETERMINISTIC_TEST_NO_RESULT",
    "right" : "DETERMINISTIC_TEST_NO_RESULT",
    "info" : "FieldDeclaration[3359-3606]:FieldDeclaration[3359-3606]"
  }, {
    "left" : "INEXISTENT_ENUM_ELEMENT",
    "right" : "INEXISTENT_ENUM_ELEMENT",
    "info" : "FieldDeclaration[3610-3788]:FieldDeclaration[3610-3788]"
  }, {
    "left" : "INEXISTENT_PROPERTY",
    "right" : "INEXISTENT_PROPERTY",
    "info" : "FieldDeclaration[3885-4050]:FieldDeclaration[3885-4050]"
  }, {
    "left" : "NOT_A_CONSTRUCTOR",
    "right" : "NOT_A_CONSTRUCTOR",
    "info" : "FieldDeclaration[4054-4225]:FieldDeclaration[4054-4225]"
  }, {
    "left" : "BIT_OPERATION",
    "right" : "BIT_OPERATION",
    "info" : "FieldDeclaration[4229-4398]:FieldDeclaration[4229-4398]"
  }, {
    "left" : "NOT_CALLABLE",
    "right" : "NOT_CALLABLE",
    "info" : "FieldDeclaration[4402-4556]:FieldDeclaration[4402-4556]"
  }, {
    "left" : "CONSTRUCTOR_NOT_CALLABLE",
    "right" : "CONSTRUCTOR_NOT_CALLABLE",
    "info" : "FieldDeclaration[4560-4758]:FieldDeclaration[4560-4758]"
  }, {
    "left" : "FUNCTION_MASKS_VARIABLE",
    "right" : "FUNCTION_MASKS_VARIABLE",
    "info" : "FieldDeclaration[4762-4937]:FieldDeclaration[4762-4937]"
  }, {
    "left" : "MULTIPLE_VAR_DEF",
    "right" : "MULTIPLE_VAR_DEF",
    "info" : "FieldDeclaration[4941-5114]:FieldDeclaration[4941-5114]"
  }, {
    "left" : "ENUM_DUP",
    "right" : "ENUM_DUP",
    "info" : "FieldDeclaration[5118-5236]:FieldDeclaration[5118-5236]"
  }, {
    "left" : "ENUM_NOT_CONSTANT",
    "right" : "ENUM_NOT_CONSTANT",
    "info" : "FieldDeclaration[5240-5397]:FieldDeclaration[5240-5397]"
  }, {
    "left" : "INVALID_INTERFACE_MEMBER_DECLARATION",
    "right" : "INVALID_INTERFACE_MEMBER_DECLARATION",
    "info" : "FieldDeclaration[5401-5658]:FieldDeclaration[5401-5658]"
  }, {
    "left" : "INTERFACE_FUNCTION_NOT_EMPTY",
    "right" : "INTERFACE_FUNCTION_NOT_EMPTY",
    "info" : "FieldDeclaration[5662-5861]:FieldDeclaration[5662-5861]"
  }, {
    "left" : "CONFLICTING_EXTENDED_TYPE",
    "right" : "CONFLICTING_EXTENDED_TYPE",
    "info" : "FieldDeclaration[5865-6062]:FieldDeclaration[5865-6062]"
  }, {
    "left" : "CONFLICTING_IMPLEMENTED_TYPE",
    "right" : "CONFLICTING_IMPLEMENTED_TYPE",
    "info" : "FieldDeclaration[6066-6312]:FieldDeclaration[6066-6312]"
  }, {
    "left" : "BAD_IMPLEMENTED_TYPE",
    "right" : "BAD_IMPLEMENTED_TYPE",
    "info" : "FieldDeclaration[6316-6482]:FieldDeclaration[6316-6482]"
  }, {
    "left" : "HIDDEN_SUPERCLASS_PROPERTY",
    "right" : "HIDDEN_SUPERCLASS_PROPERTY",
    "info" : "FieldDeclaration[6486-6722]:FieldDeclaration[6486-6722]"
  }, {
    "left" : "HIDDEN_INTERFACE_PROPERTY",
    "right" : "HIDDEN_INTERFACE_PROPERTY",
    "info" : "FieldDeclaration[6726-6959]:FieldDeclaration[6726-6959]"
  }, {
    "left" : "HIDDEN_SUPERCLASS_PROPERTY_MISMATCH",
    "right" : "HIDDEN_SUPERCLASS_PROPERTY_MISMATCH",
    "info" : "FieldDeclaration[6963-7285]:FieldDeclaration[6963-7285]"
  }, {
    "left" : "UNKNOWN_OVERRIDE",
    "right" : "UNKNOWN_OVERRIDE",
    "info" : "FieldDeclaration[7289-7463]:FieldDeclaration[7289-7463]"
  }, {
    "left" : "INTERFACE_METHOD_OVERRIDE",
    "right" : "INTERFACE_METHOD_OVERRIDE",
    "info" : "FieldDeclaration[7467-7671]:FieldDeclaration[7467-7671]"
  }, {
    "left" : "UNKNOWN_EXPR_TYPE",
    "right" : "UNKNOWN_EXPR_TYPE",
    "info" : "FieldDeclaration[7675-7838]:FieldDeclaration[7675-7838]"
  }, {
    "left" : "UNRESOLVED_TYPE",
    "right" : "UNRESOLVED_TYPE",
    "info" : "FieldDeclaration[7842-7994]:FieldDeclaration[7842-7994]"
  }, {
    "left" : "WRONG_ARGUMENT_COUNT",
    "right" : "WRONG_ARGUMENT_COUNT",
    "info" : "FieldDeclaration[7998-8235]:FieldDeclaration[7998-8235]"
  }, {
    "left" : "ILLEGAL_IMPLICIT_CAST",
    "right" : "ILLEGAL_IMPLICIT_CAST",
    "info" : "FieldDeclaration[8239-8458]:FieldDeclaration[8239-8458]"
  }, {
    "left" : "INCOMPATIBLE_EXTENDED_PROPERTY_TYPE",
    "right" : "INCOMPATIBLE_EXTENDED_PROPERTY_TYPE",
    "info" : "FieldDeclaration[8462-8732]:FieldDeclaration[8462-8732]"
  }, {
    "left" : "EXPECTED_THIS_TYPE",
    "right" : "EXPECTED_THIS_TYPE",
    "info" : "FieldDeclaration[8736-8908]:FieldDeclaration[8736-8908]"
  }, {
    "left" : "IN_USED_WITH_STRUCT",
    "right" : "IN_USED_WITH_STRUCT",
    "info" : "FieldDeclaration[8912-9090]:FieldDeclaration[8912-9090]"
  }, {
    "left" : "ILLEGAL_PROPERTY_CREATION",
    "right" : "ILLEGAL_PROPERTY_CREATION",
    "info" : "FieldDeclaration[9094-9346]:FieldDeclaration[9094-9346]"
  }, {
    "left" : "ILLEGAL_OBJLIT_KEY",
    "right" : "ILLEGAL_OBJLIT_KEY",
    "info" : "FieldDeclaration[9350-9515]:FieldDeclaration[9350-9515]"
  }, {
    "left" : "ALL_DIAGNOSTICS",
    "right" : "ALL_DIAGNOSTICS",
    "info" : "FieldDeclaration[9519-10765]:FieldDeclaration[9519-10765]"
  }, {
    "left" : "compiler",
    "right" : "compiler",
    "info" : "FieldDeclaration[10769-10809]:FieldDeclaration[10769-10809]"
  }, {
    "left" : "validator",
    "right" : "validator",
    "info" : "FieldDeclaration[10812-10850]:FieldDeclaration[10812-10850]"
  }, {
    "left" : "reverseInterpreter",
    "right" : "reverseInterpreter",
    "info" : "FieldDeclaration[10854-10914]:FieldDeclaration[10854-10914]"
  }, {
    "left" : "typeRegistry",
    "right" : "typeRegistry",
    "info" : "FieldDeclaration[10918-10960]:FieldDeclaration[10918-10960]"
  }, {
    "left" : "topScope",
    "right" : "topScope",
    "info" : "FieldDeclaration[10963-10986]:FieldDeclaration[10963-10986]"
  }, {
    "left" : "scopeCreator",
    "right" : "scopeCreator",
    "info" : "FieldDeclaration[10990-11032]:FieldDeclaration[10990-11032]"
  }, {
    "left" : "reportMissingOverride",
    "right" : "reportMissingOverride",
    "info" : "FieldDeclaration[11036-11083]:FieldDeclaration[11036-11083]"
  }, {
    "left" : "reportUnknownTypes",
    "right" : "reportUnknownTypes",
    "info" : "FieldDeclaration[11086-11130]:FieldDeclaration[11086-11130]"
  }, {
    "left" : "reportMissingProperties",
    "right" : "reportMissingProperties",
    "info" : "FieldDeclaration[11230-11277]:FieldDeclaration[11230-11277]"
  }, {
    "left" : "inferJSDocInfo",
    "right" : "inferJSDocInfo",
    "info" : "FieldDeclaration[11281-11326]:FieldDeclaration[11281-11326]"
  }, {
    "left" : "typedCount",
    "right" : "typedCount",
    "info" : "FieldDeclaration[11407-11434]:FieldDeclaration[11407-11434]"
  }, {
    "left" : "nullCount",
    "right" : "nullCount",
    "info" : "FieldDeclaration[11437-11463]:FieldDeclaration[11437-11463]"
  }, {
    "left" : "unknownCount",
    "right" : "unknownCount",
    "info" : "FieldDeclaration[11466-11495]:FieldDeclaration[11466-11495]"
  }, {
    "left" : "inExterns",
    "right" : "inExterns",
    "info" : "FieldDeclaration[11498-11524]:FieldDeclaration[11498-11524]"
  }, {
    "left" : "noTypeCheckSection",
    "right" : "noTypeCheckSection",
    "info" : "FieldDeclaration[11615-11650]:FieldDeclaration[11615-11650]"
  }, {
    "left" : "public TypeCheck(compiler , reverseInterpreter , typeRegistry , topScope , scopeCreator , reportMissingOverride , reportUnknownTypes ...)",
    "right" : "public TypeCheck(compiler , reverseInterpreter , typeRegistry , topScope , scopeCreator , reportMissingOverride , reportUnknownTypes ...)",
    "info" : "MethodDeclaration[11654-12329]:MethodDeclaration[11654-12329]"
  }, {
    "left" : "public TypeCheck(compiler , reverseInterpreter , typeRegistry , reportMissingOverride , reportUnknownTypes ...)",
    "right" : "public TypeCheck(compiler , reverseInterpreter , typeRegistry , reportMissingOverride , reportUnknownTypes ...)",
    "info" : "MethodDeclaration[12333-12664]:MethodDeclaration[12333-12664]"
  }, {
    "left" : "package TypeCheck(compiler , reverseInterpreter , typeRegistry )",
    "right" : "package TypeCheck(compiler , reverseInterpreter , typeRegistry )",
    "info" : "MethodDeclaration[12668-12909]:MethodDeclaration[12668-12909]"
  }, {
    "left" : "package reportMissingProperties(report boolean) : ",
    "right" : "package reportMissingProperties(report boolean) : ",
    "info" : "MethodDeclaration[12913-13100]:MethodDeclaration[12913-13100]"
  }, {
    "left" : "public process(externsRoot , jsRoot ) : void",
    "right" : "public process(externsRoot , jsRoot ) : void",
    "info" : "MethodDeclaration[13104-13800]:MethodDeclaration[13104-13800]"
  }, {
    "left" : "public processForTesting(externsRoot , jsRoot ) : ",
    "right" : "public processForTesting(externsRoot , jsRoot ) : ",
    "info" : "MethodDeclaration[13804-14501]:MethodDeclaration[13804-14501]"
  }, {
    "left" : "public check(node , externs boolean) : void",
    "right" : "public check(node , externs boolean) : void",
    "info" : "MethodDeclaration[14506-14855]:MethodDeclaration[14506-14855]"
  }, {
    "left" : "private checkNoTypeCheckSection(n , enterSection boolean) : void",
    "right" : "private checkNoTypeCheckSection(n , enterSection boolean) : void",
    "info" : "MethodDeclaration[14860-15397]:MethodDeclaration[14860-15397]"
  }, {
    "left" : "private report(t , n , diagnosticType , ) : void",
    "right" : "private report(t , n , diagnosticType , ) : void",
    "info" : "MethodDeclaration[15401-15596]:MethodDeclaration[15401-15596]"
  }, {
    "left" : "public shouldTraverse(t , n , parent ) : boolean",
    "right" : "public shouldTraverse(t , n , parent ) : boolean",
    "info" : "MethodDeclaration[15600-16741]:MethodDeclaration[15600-16741]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[16745-28269]:MethodDeclaration[16745-28269]"
  }, {
    "left" : "private checkTypeofString(t , n , s ...) : void",
    "right" : "private checkTypeofString(t , n , s ...) : void",
    "info" : "MethodDeclaration[28273-28590]:MethodDeclaration[28273-28590]"
  }, {
    "left" : "private doPercentTypedAccounting(t , n ) : void",
    "right" : "private doPercentTypedAccounting(t , n ) : void",
    "info" : "MethodDeclaration[28594-29084]:MethodDeclaration[28594-29084]"
  }, {
    "left" : "private visitAssign(t , assign ) : void",
    "right" : "private visitAssign(t , assign ) : void",
    "info" : "MethodDeclaration[29088-33756]:MethodDeclaration[29088-33756]"
  }, {
    "left" : "private checkPropCreation(t , lvalue ) : void",
    "right" : "private checkPropCreation(t , lvalue ) : void",
    "info" : "MethodDeclaration[33760-34322]:MethodDeclaration[33760-34322]"
  }, {
    "left" : "private checkPropertyInheritanceOnGetpropAssign(t , assign , object , property , info , propertyType ) : void",
    "right" : "private checkPropertyInheritanceOnGetpropAssign(t , assign , object , property , info , propertyType ) : void",
    "info" : "MethodDeclaration[34326-35568]:MethodDeclaration[34326-35568]"
  }, {
    "left" : "private visitObjLitKey(t , key , objlit , litType ) : void",
    "right" : "private visitObjLitKey(t , key , objlit , litType ) : void",
    "info" : "MethodDeclaration[35572-38278]:MethodDeclaration[35572-38278]"
  }, {
    "left" : "private propertyIsImplicitCast(type , prop ) : boolean",
    "right" : "private propertyIsImplicitCast(type , prop ) : boolean",
    "info" : "MethodDeclaration[38282-38706]:MethodDeclaration[38282-38706]"
  }, {
    "left" : "private checkDeclaredPropertyInheritance(t , n , ctorType , propertyName , info , propertyType ) : void",
    "right" : "private checkDeclaredPropertyInheritance(t , n , ctorType , propertyName , info , propertyType ) : void",
    "info" : "MethodDeclaration[38710-43860]:MethodDeclaration[38710-43860]"
  }, {
    "left" : "private hasUnknownOrEmptySupertype(ctor ) : boolean",
    "right" : "private hasUnknownOrEmptySupertype(ctor ) : boolean",
    "info" : "MethodDeclaration[43864-44813]:MethodDeclaration[43864-44813]"
  }, {
    "left" : "private visitInterfaceGetprop(t , assign , object , property , lvalue , rvalue ) : void",
    "right" : "private visitInterfaceGetprop(t , assign , object , property , lvalue , rvalue ) : void",
    "info" : "MethodDeclaration[44817-46020]:MethodDeclaration[44817-46020]"
  }, {
    "left" : "package visitName(t , n , parent ) : boolean",
    "right" : "package visitName(t , n , parent ) : boolean",
    "info" : "MethodDeclaration[46024-47437]:MethodDeclaration[46024-47437]"
  }, {
    "left" : "private visitGetProp(t , n , parent ) : void",
    "right" : "private visitGetProp(t , n , parent ) : void",
    "info" : "MethodDeclaration[47441-48458]:MethodDeclaration[47441-48458]"
  }, {
    "left" : "private checkPropertyAccess(childType , propName , t , n ) : void",
    "right" : "private checkPropertyAccess(childType , propName , t , n ) : void",
    "info" : "MethodDeclaration[48462-50034]:MethodDeclaration[48462-50034]"
  }, {
    "left" : "private checkPropertyAccessHelper(objectType , propName , t , n ) : void",
    "right" : "private checkPropertyAccessHelper(objectType , propName , t , n ) : void",
    "info" : "MethodDeclaration[50038-50450]:MethodDeclaration[50038-50450]"
  }, {
    "left" : "private isPropertyTest(getProp ) : boolean",
    "right" : "private isPropertyTest(getProp ) : boolean",
    "info" : "MethodDeclaration[50454-51409]:MethodDeclaration[50454-51409]"
  }, {
    "left" : "private visitGetElem(t , n ) : void",
    "right" : "private visitGetElem(t , n ) : void",
    "info" : "MethodDeclaration[51413-51824]:MethodDeclaration[51413-51824]"
  }, {
    "left" : "private visitVar(t , n ) : void",
    "right" : "private visitVar(t , n ) : void",
    "info" : "MethodDeclaration[51828-53110]:MethodDeclaration[51828-53110]"
  }, {
    "left" : "private visitNew(t , n ) : void",
    "right" : "private visitNew(t , n ) : void",
    "info" : "MethodDeclaration[53114-53707]:MethodDeclaration[53114-53707]"
  }, {
    "left" : "private checkInterfaceConflictProperties(t , n , functionName , properties , currentProperties , interfaceType ) : void",
    "right" : "private checkInterfaceConflictProperties(t , n , functionName , properties , currentProperties , interfaceType ) : void",
    "info" : "MethodDeclaration[53711-55464]:MethodDeclaration[53711-55564]"
  }, {
    "left" : "private visitFunction(t , n ) : void",
    "right" : "private visitFunction(t , n ) : void",
    "info" : "MethodDeclaration[55468-58905]:MethodDeclaration[55568-59005]"
  }, {
    "left" : "private visitCall(t , n ) : void",
    "right" : "private visitCall(t , n ) : void",
    "info" : "MethodDeclaration[58909-61240]:MethodDeclaration[59009-61340]"
  }, {
    "left" : "private visitParameterList(t , call , functionType ) : void",
    "right" : "private visitParameterList(t , call , functionType ) : void",
    "info" : "MethodDeclaration[61244-62694]:MethodDeclaration[61344-62794]"
  }, {
    "left" : "private visitReturn(t , n ) : void",
    "right" : "private visitReturn(t , n ) : void",
    "info" : "MethodDeclaration[62698-63820]:MethodDeclaration[62798-63920]"
  }, {
    "left" : "private visitBinaryOperator(op int, t , n ) : void",
    "right" : "private visitBinaryOperator(op int, t , n ) : void",
    "info" : "MethodDeclaration[63824-65897]:MethodDeclaration[63924-65997]"
  }, {
    "left" : "private checkEnumAlias(t , declInfo , value ) : void",
    "right" : "private checkEnumAlias(t , declInfo , value ) : void",
    "info" : "MethodDeclaration[65902-66954]:MethodDeclaration[66002-67054]"
  }, {
    "left" : "private getJSType(n ) : ",
    "right" : "private getJSType(n ) : ",
    "info" : "MethodDeclaration[66958-67525]:MethodDeclaration[67058-67625]"
  }, {
    "left" : "private ensureTyped(t , n ) : void",
    "right" : "private ensureTyped(t , n ) : void",
    "info" : "MethodDeclaration[67853-68071]:MethodDeclaration[67953-68171]"
  }, {
    "left" : "private ensureTyped(t , n , type ) : void",
    "right" : "private ensureTyped(t , n , type ) : void",
    "info" : "MethodDeclaration[68075-68193]:MethodDeclaration[68175-68293]"
  }, {
    "left" : "private ensureTyped(t , n , type ) : void",
    "right" : "private ensureTyped(t , n , type ) : void",
    "info" : "MethodDeclaration[68197-70098]:MethodDeclaration[68297-70198]"
  }, {
    "left" : "package getTypedPercent() : double",
    "right" : "package getTypedPercent() : double",
    "info" : "MethodDeclaration[70102-70369]:MethodDeclaration[70202-70469]"
  }, {
    "left" : "private getNativeType(typeId ) : ",
    "right" : "private getNativeType(typeId ) : ",
    "info" : "MethodDeclaration[70373-70475]:MethodDeclaration[70473-70575]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2352-2358]:Modifier[2352-2358]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[2359-2364]:TYPE_DECLARATION_KIND[2359-2364]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11654-11660]:Modifier[11654-11660]"
  }, {
    "left" : "TypeCheck",
    "right" : "TypeCheck",
    "info" : "SimpleName[11661-11670]:SimpleName[11661-11670]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[11671-11696]:SingleVariableDeclaration[11671-11696]"
  }, {
    "left" : "ReverseAbstractInterpreter reverseInterpreter",
    "right" : "ReverseAbstractInterpreter reverseInterpreter",
    "info" : "SingleVariableDeclaration[11704-11749]:SingleVariableDeclaration[11704-11749]"
  }, {
    "left" : "JSTypeRegistry typeRegistry",
    "right" : "JSTypeRegistry typeRegistry",
    "info" : "SingleVariableDeclaration[11757-11784]:SingleVariableDeclaration[11757-11784]"
  }, {
    "left" : "Scope topScope",
    "right" : "Scope topScope",
    "info" : "SingleVariableDeclaration[11792-11806]:SingleVariableDeclaration[11792-11806]"
  }, {
    "left" : "MemoizedScopeCreator scopeCreator",
    "right" : "MemoizedScopeCreator scopeCreator",
    "info" : "SingleVariableDeclaration[11814-11847]:SingleVariableDeclaration[11814-11847]"
  }, {
    "left" : "CheckLevel reportMissingOverride",
    "right" : "CheckLevel reportMissingOverride",
    "info" : "SingleVariableDeclaration[11855-11887]:SingleVariableDeclaration[11855-11887]"
  }, {
    "left" : "CheckLevel reportUnknownTypes",
    "right" : "CheckLevel reportUnknownTypes",
    "info" : "SingleVariableDeclaration[11895-11924]:SingleVariableDeclaration[11895-11924]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11926-12329]:Block[11926-12329]"
  }, {
    "left" : "this.compiler = compiler;",
    "right" : "this.compiler = compiler;",
    "info" : "ExpressionStatement[11932-11957]:ExpressionStatement[11932-11957]"
  }, {
    "left" : "this.validator = compiler.getTypeValidator();",
    "right" : "this.validator = compiler.getTypeValidator();",
    "info" : "ExpressionStatement[11962-12007]:ExpressionStatement[11962-12007]"
  }, {
    "left" : "this.reverseInterpreter = reverseInterpreter;",
    "right" : "this.reverseInterpreter = reverseInterpreter;",
    "info" : "ExpressionStatement[12012-12057]:ExpressionStatement[12012-12057]"
  }, {
    "left" : "this.typeRegistry = typeRegistry;",
    "right" : "this.typeRegistry = typeRegistry;",
    "info" : "ExpressionStatement[12062-12095]:ExpressionStatement[12062-12095]"
  }, {
    "left" : "this.topScope = topScope;",
    "right" : "this.topScope = topScope;",
    "info" : "ExpressionStatement[12100-12125]:ExpressionStatement[12100-12125]"
  }, {
    "left" : "this.scopeCreator = scopeCreator;",
    "right" : "this.scopeCreator = scopeCreator;",
    "info" : "ExpressionStatement[12130-12163]:ExpressionStatement[12130-12163]"
  }, {
    "left" : "this.reportMissingOverride = reportMissingOverride;",
    "right" : "this.reportMissingOverride = reportMissingOverride;",
    "info" : "ExpressionStatement[12168-12219]:ExpressionStatement[12168-12219]"
  }, {
    "left" : "this.reportUnknownTypes = reportUnknownTypes;",
    "right" : "this.reportUnknownTypes = reportUnknownTypes;",
    "info" : "ExpressionStatement[12224-12269]:ExpressionStatement[12224-12269]"
  }, {
    "left" : "this.inferJSDocInfo = new InferJSDocInfo(compiler);",
    "right" : "this.inferJSDocInfo = new InferJSDocInfo(compiler);",
    "info" : "ExpressionStatement[12274-12325]:ExpressionStatement[12274-12325]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12333-12339]:Modifier[12333-12339]"
  }, {
    "left" : "TypeCheck",
    "right" : "TypeCheck",
    "info" : "SimpleName[12340-12349]:SimpleName[12340-12349]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[12350-12375]:SingleVariableDeclaration[12350-12375]"
  }, {
    "left" : "ReverseAbstractInterpreter reverseInterpreter",
    "right" : "ReverseAbstractInterpreter reverseInterpreter",
    "info" : "SingleVariableDeclaration[12383-12428]:SingleVariableDeclaration[12383-12428]"
  }, {
    "left" : "JSTypeRegistry typeRegistry",
    "right" : "JSTypeRegistry typeRegistry",
    "info" : "SingleVariableDeclaration[12436-12463]:SingleVariableDeclaration[12436-12463]"
  }, {
    "left" : "CheckLevel reportMissingOverride",
    "right" : "CheckLevel reportMissingOverride",
    "info" : "SingleVariableDeclaration[12471-12503]:SingleVariableDeclaration[12471-12503]"
  }, {
    "left" : "CheckLevel reportUnknownTypes",
    "right" : "CheckLevel reportUnknownTypes",
    "info" : "SingleVariableDeclaration[12511-12540]:SingleVariableDeclaration[12511-12540]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12542-12664]:Block[12542-12664]"
  }, {
    "left" : "this(compiler, reverseInterpreter, typeRegistry, null, null,\n        reportMissingOverride, reportUnknownTypes);",
    "right" : "this(compiler, reverseInterpreter, typeRegistry, null, null,\n        reportMissingOverride, reportUnknownTypes);",
    "info" : "ConstructorInvocation[12548-12660]:ConstructorInvocation[12548-12660]"
  }, {
    "left" : "TypeCheck",
    "right" : "TypeCheck",
    "info" : "SimpleName[12668-12677]:SimpleName[12668-12677]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[12678-12703]:SingleVariableDeclaration[12678-12703]"
  }, {
    "left" : "ReverseAbstractInterpreter reverseInterpreter",
    "right" : "ReverseAbstractInterpreter reverseInterpreter",
    "info" : "SingleVariableDeclaration[12711-12756]:SingleVariableDeclaration[12711-12756]"
  }, {
    "left" : "JSTypeRegistry typeRegistry",
    "right" : "JSTypeRegistry typeRegistry",
    "info" : "SingleVariableDeclaration[12764-12791]:SingleVariableDeclaration[12764-12791]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12793-12909]:Block[12793-12909]"
  }, {
    "left" : "this(compiler, reverseInterpreter, typeRegistry, null, null,\n         CheckLevel.WARNING, CheckLevel.OFF);",
    "right" : "this(compiler, reverseInterpreter, typeRegistry, null, null,\n         CheckLevel.WARNING, CheckLevel.OFF);",
    "info" : "ConstructorInvocation[12799-12905]:ConstructorInvocation[12799-12905]"
  }, {
    "left" : "TypeCheck",
    "right" : "TypeCheck",
    "info" : "SimpleType[12990-12999]:SimpleType[12990-12999]"
  }, {
    "left" : "reportMissingProperties",
    "right" : "reportMissingProperties",
    "info" : "SimpleName[13000-13023]:SimpleName[13000-13023]"
  }, {
    "left" : "boolean report",
    "right" : "boolean report",
    "info" : "SingleVariableDeclaration[13024-13038]:SingleVariableDeclaration[13024-13038]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13040-13100]:Block[13040-13100]"
  }, {
    "left" : "reportMissingProperties = report;",
    "right" : "reportMissingProperties = report;",
    "info" : "ExpressionStatement[13046-13079]:ExpressionStatement[13046-13079]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[13084-13096]:ReturnStatement[13084-13096]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[13353-13362]:MarkerAnnotation[13353-13362]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13365-13371]:Modifier[13365-13371]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13372-13376]:PrimitiveType[13372-13376]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[13377-13384]:SimpleName[13377-13384]"
  }, {
    "left" : "Node externsRoot",
    "right" : "Node externsRoot",
    "info" : "SingleVariableDeclaration[13385-13401]:SingleVariableDeclaration[13385-13401]"
  }, {
    "left" : "Node jsRoot",
    "right" : "Node jsRoot",
    "info" : "SingleVariableDeclaration[13403-13414]:SingleVariableDeclaration[13403-13414]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13416-13800]:Block[13416-13800]"
  }, {
    "left" : "Preconditions.checkNotNull(scopeCreator);",
    "right" : "Preconditions.checkNotNull(scopeCreator);",
    "info" : "ExpressionStatement[13422-13463]:ExpressionStatement[13422-13463]"
  }, {
    "left" : "Preconditions.checkNotNull(topScope);",
    "right" : "Preconditions.checkNotNull(topScope);",
    "info" : "ExpressionStatement[13468-13505]:ExpressionStatement[13468-13505]"
  }, {
    "left" : "Node externsAndJs = jsRoot.getParent();",
    "right" : "Node externsAndJs = jsRoot.getParent();",
    "info" : "VariableDeclarationStatement[13511-13550]:VariableDeclarationStatement[13511-13550]"
  }, {
    "left" : "Preconditions.checkState(externsAndJs != null);",
    "right" : "Preconditions.checkState(externsAndJs != null);",
    "info" : "ExpressionStatement[13555-13602]:ExpressionStatement[13555-13602]"
  }, {
    "left" : "Preconditions.checkState(\n        externsRoot == null || externsAndJs.hasChild(externsRoot));",
    "right" : "Preconditions.checkState(\n        externsRoot == null || externsAndJs.hasChild(externsRoot));",
    "info" : "ExpressionStatement[13607-13700]:ExpressionStatement[13607-13700]"
  }, {
    "left" : "if (externsRoot != null)",
    "right" : "if (externsRoot != null)",
    "info" : "IfStatement[13706-13770]:IfStatement[13706-13770]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13731-13770]:Block[13731-13770]"
  }, {
    "left" : "check(externsRoot, true);",
    "right" : "check(externsRoot, true);",
    "info" : "ExpressionStatement[13739-13764]:ExpressionStatement[13739-13764]"
  }, {
    "left" : "check(jsRoot, false);",
    "right" : "check(jsRoot, false);",
    "info" : "ExpressionStatement[13775-13796]:ExpressionStatement[13775-13796]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13862-13868]:Modifier[13862-13868]"
  }, {
    "left" : "Scope",
    "right" : "Scope",
    "info" : "SimpleType[13869-13874]:SimpleType[13869-13874]"
  }, {
    "left" : "processForTesting",
    "right" : "processForTesting",
    "info" : "SimpleName[13875-13892]:SimpleName[13875-13892]"
  }, {
    "left" : "Node externsRoot",
    "right" : "Node externsRoot",
    "info" : "SingleVariableDeclaration[13893-13909]:SingleVariableDeclaration[13893-13909]"
  }, {
    "left" : "Node jsRoot",
    "right" : "Node jsRoot",
    "info" : "SingleVariableDeclaration[13911-13922]:SingleVariableDeclaration[13911-13922]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13924-14501]:Block[13924-14501]"
  }, {
    "left" : "Preconditions.checkState(scopeCreator == null);",
    "right" : "Preconditions.checkState(scopeCreator == null);",
    "info" : "ExpressionStatement[13930-13977]:ExpressionStatement[13930-13977]"
  }, {
    "left" : "Preconditions.checkState(topScope == null);",
    "right" : "Preconditions.checkState(topScope == null);",
    "info" : "ExpressionStatement[13982-14025]:ExpressionStatement[13982-14025]"
  }, {
    "left" : "Preconditions.checkState(jsRoot.getParent() != null);",
    "right" : "Preconditions.checkState(jsRoot.getParent() != null);",
    "info" : "ExpressionStatement[14031-14084]:ExpressionStatement[14031-14084]"
  }, {
    "left" : "Node externsAndJsRoot = jsRoot.getParent();",
    "right" : "Node externsAndJsRoot = jsRoot.getParent();",
    "info" : "VariableDeclarationStatement[14089-14132]:VariableDeclarationStatement[14089-14132]"
  }, {
    "left" : "scopeCreator = new MemoizedScopeCreator(new TypedScopeCreator(compiler));",
    "right" : "scopeCreator = new MemoizedScopeCreator(new TypedScopeCreator(compiler));",
    "info" : "ExpressionStatement[14138-14211]:ExpressionStatement[14138-14211]"
  }, {
    "left" : "topScope = scopeCreator.createScope(externsAndJsRoot, null);",
    "right" : "topScope = scopeCreator.createScope(externsAndJsRoot, null);",
    "info" : "ExpressionStatement[14216-14276]:ExpressionStatement[14216-14276]"
  }, {
    "left" : "TypeInferencePass inference = new TypeInferencePass(compiler,\n        reverseInterpreter, topScope, scopeCreator);",
    "right" : "TypeInferencePass inference = new TypeInferencePass(compiler,\n        reverseInterpreter, topScope, scopeCreator);",
    "info" : "VariableDeclarationStatement[14282-14396]:VariableDeclarationStatement[14282-14396]"
  }, {
    "left" : "inference.process(externsRoot, jsRoot);",
    "right" : "inference.process(externsRoot, jsRoot);",
    "info" : "ExpressionStatement[14402-14441]:ExpressionStatement[14402-14441]"
  }, {
    "left" : "process(externsRoot, jsRoot);",
    "right" : "process(externsRoot, jsRoot);",
    "info" : "ExpressionStatement[14446-14475]:ExpressionStatement[14446-14475]"
  }, {
    "left" : "return topScope;",
    "right" : "return topScope;",
    "info" : "ReturnStatement[14481-14497]:ReturnStatement[14481-14497]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14506-14512]:Modifier[14506-14512]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14513-14517]:PrimitiveType[14513-14517]"
  }, {
    "left" : "check",
    "right" : "check",
    "info" : "SimpleName[14518-14523]:SimpleName[14518-14523]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[14524-14533]:SingleVariableDeclaration[14524-14533]"
  }, {
    "left" : "boolean externs",
    "right" : "boolean externs",
    "info" : "SingleVariableDeclaration[14535-14550]:SingleVariableDeclaration[14535-14550]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14552-14855]:Block[14552-14855]"
  }, {
    "left" : "Preconditions.checkNotNull(node);",
    "right" : "Preconditions.checkNotNull(node);",
    "info" : "ExpressionStatement[14558-14591]:ExpressionStatement[14558-14591]"
  }, {
    "left" : "NodeTraversal t = new NodeTraversal(compiler, this, scopeCreator);",
    "right" : "NodeTraversal t = new NodeTraversal(compiler, this, scopeCreator);",
    "info" : "VariableDeclarationStatement[14597-14663]:VariableDeclarationStatement[14597-14663]"
  }, {
    "left" : "inExterns = externs;",
    "right" : "inExterns = externs;",
    "info" : "ExpressionStatement[14668-14688]:ExpressionStatement[14668-14688]"
  }, {
    "left" : "t.traverseWithScope(node, topScope);",
    "right" : "t.traverseWithScope(node, topScope);",
    "info" : "ExpressionStatement[14693-14729]:ExpressionStatement[14693-14729]"
  }, {
    "left" : "if (externs)",
    "right" : "if (externs)",
    "info" : "IfStatement[14734-14851]:IfStatement[14734-14851]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14747-14796]:Block[14747-14796]"
  }, {
    "left" : "inferJSDocInfo.process(node, null);",
    "right" : "inferJSDocInfo.process(node, null);",
    "info" : "ExpressionStatement[14755-14790]:ExpressionStatement[14755-14790]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14802-14851]:Block[14802-14851]"
  }, {
    "left" : "inferJSDocInfo.process(null, node);",
    "right" : "inferJSDocInfo.process(null, node);",
    "info" : "ExpressionStatement[14810-14845]:ExpressionStatement[14810-14845]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[14860-14867]:Modifier[14860-14867]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14868-14872]:PrimitiveType[14868-14872]"
  }, {
    "left" : "checkNoTypeCheckSection",
    "right" : "checkNoTypeCheckSection",
    "info" : "SimpleName[14873-14896]:SimpleName[14873-14896]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[14897-14903]:SingleVariableDeclaration[14897-14903]"
  }, {
    "left" : "boolean enterSection",
    "right" : "boolean enterSection",
    "info" : "SingleVariableDeclaration[14905-14925]:SingleVariableDeclaration[14905-14925]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14927-15397]:Block[14927-15397]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.VAR:\n      case Token.FUNCTION:\n      case Token.ASSIGN:\n        JSDocInfo info = n.getJSDocInfo();\n        if (info != null && info.isNoTypeCheck()) {\n          if (enterSection) {\n            noTypeCheckSection++;\n          } else {\n            noTypeCheckSection--;\n          }\n        }\n        validator.setShouldReport(noTypeCheckSection == 0);\n        break;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.VAR:\n      case Token.FUNCTION:\n      case Token.ASSIGN:\n        JSDocInfo info = n.getJSDocInfo();\n        if (info != null && info.isNoTypeCheck()) {\n          if (enterSection) {\n            noTypeCheckSection++;\n          } else {\n            noTypeCheckSection--;\n          }\n        }\n        validator.setShouldReport(noTypeCheckSection == 0);\n        break;\n    }",
    "info" : "SwitchStatement[14933-15393]:SwitchStatement[14933-15393]"
  }, {
    "left" : "case Token.SCRIPT:",
    "right" : "case Token.SCRIPT:",
    "info" : "SwitchCase[14962-14980]:SwitchCase[14962-14980]"
  }, {
    "left" : "case Token.BLOCK:",
    "right" : "case Token.BLOCK:",
    "info" : "SwitchCase[14987-15004]:SwitchCase[14987-15004]"
  }, {
    "left" : "case Token.VAR:",
    "right" : "case Token.VAR:",
    "info" : "SwitchCase[15011-15026]:SwitchCase[15011-15026]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[15033-15053]:SwitchCase[15033-15053]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[15060-15078]:SwitchCase[15060-15078]"
  }, {
    "left" : "JSDocInfo info = n.getJSDocInfo();",
    "right" : "JSDocInfo info = n.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[15087-15121]:VariableDeclarationStatement[15087-15121]"
  }, {
    "left" : "if (info != null && info.isNoTypeCheck())",
    "right" : "if (info != null && info.isNoTypeCheck())",
    "info" : "IfStatement[15130-15312]:IfStatement[15130-15312]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15172-15312]:Block[15172-15312]"
  }, {
    "left" : "if (enterSection)",
    "right" : "if (enterSection)",
    "info" : "IfStatement[15184-15302]:IfStatement[15184-15302]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15202-15249]:Block[15202-15249]"
  }, {
    "left" : "noTypeCheckSection++;",
    "right" : "noTypeCheckSection++;",
    "info" : "ExpressionStatement[15216-15237]:ExpressionStatement[15216-15237]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15255-15302]:Block[15255-15302]"
  }, {
    "left" : "noTypeCheckSection--;",
    "right" : "noTypeCheckSection--;",
    "info" : "ExpressionStatement[15269-15290]:ExpressionStatement[15269-15290]"
  }, {
    "left" : "validator.setShouldReport(noTypeCheckSection == 0);",
    "right" : "validator.setShouldReport(noTypeCheckSection == 0);",
    "info" : "ExpressionStatement[15321-15372]:ExpressionStatement[15321-15372]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[15381-15387]:BreakStatement[15381-15387]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[15401-15408]:Modifier[15401-15408]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[15409-15413]:PrimitiveType[15409-15413]"
  }, {
    "left" : "report",
    "right" : "report",
    "info" : "SimpleName[15414-15420]:SimpleName[15414-15420]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[15421-15436]:SingleVariableDeclaration[15421-15436]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[15438-15444]:SingleVariableDeclaration[15438-15444]"
  }, {
    "left" : "DiagnosticType diagnosticType",
    "right" : "DiagnosticType diagnosticType",
    "info" : "SingleVariableDeclaration[15446-15475]:SingleVariableDeclaration[15446-15475]"
  }, {
    "left" : "String... arguments",
    "right" : "String... arguments",
    "info" : "SingleVariableDeclaration[15483-15502]:SingleVariableDeclaration[15483-15502]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15504-15596]:Block[15504-15596]"
  }, {
    "left" : "if (noTypeCheckSection == 0)",
    "right" : "if (noTypeCheckSection == 0)",
    "info" : "IfStatement[15510-15592]:IfStatement[15510-15592]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15539-15592]:Block[15539-15592]"
  }, {
    "left" : "t.report(n, diagnosticType, arguments);",
    "right" : "t.report(n, diagnosticType, arguments);",
    "info" : "ExpressionStatement[15547-15586]:ExpressionStatement[15547-15586]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[15600-15609]:MarkerAnnotation[15600-15609]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15612-15618]:Modifier[15612-15618]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[15619-15626]:PrimitiveType[15619-15626]"
  }, {
    "left" : "shouldTraverse",
    "right" : "shouldTraverse",
    "info" : "SimpleName[15627-15641]:SimpleName[15627-15641]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[15649-15664]:SingleVariableDeclaration[15649-15664]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[15666-15672]:SingleVariableDeclaration[15666-15672]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[15674-15685]:SingleVariableDeclaration[15674-15685]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15687-16741]:Block[15687-16741]"
  }, {
    "left" : "checkNoTypeCheckSection(n, true);",
    "right" : "checkNoTypeCheckSection(n, true);",
    "info" : "ExpressionStatement[15693-15726]:ExpressionStatement[15693-15726]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.FUNCTION:\n        // normal type checking\n        final Scope outerScope = t.getScope();\n        final String functionPrivateName = n.getFirstChild().getString();\n        if (functionPrivateName != null && functionPrivateName.length() > 0 &&\n            outerScope.isDeclared(functionPrivateName, false) &&\n            // Ideally, we would want to check whether the type in the scope\n            // differs from the type being defined, but then the extern\n            // redeclarations of built-in types generates spurious warnings.\n            !(outerScope.getVar(\n                functionPrivateName).getType() instanceof FunctionType)) {\n          report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);\n        }\n\n        // TODO(user): Only traverse the function's body. The function's\n        // name and arguments are traversed by the scope creator, and ideally\n        // should not be traversed by the type checker.\n        break;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.FUNCTION:\n        // normal type checking\n        final Scope outerScope = t.getScope();\n        final String functionPrivateName = n.getFirstChild().getString();\n        if (functionPrivateName != null && functionPrivateName.length() > 0 &&\n            outerScope.isDeclared(functionPrivateName, false) &&\n            // Ideally, we would want to check whether the type in the scope\n            // differs from the type being defined, but then the extern\n            // redeclarations of built-in types generates spurious warnings.\n            !(outerScope.getVar(\n                functionPrivateName).getType() instanceof FunctionType)) {\n          report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);\n        }\n\n        // TODO(user): Only traverse the function's body. The function's\n        // name and arguments are traversed by the scope creator, and ideally\n        // should not be traversed by the type checker.\n        break;\n    }",
    "info" : "SwitchStatement[15731-16720]:SwitchStatement[15731-16720]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[15760-15780]:SwitchCase[15760-15780]"
  }, {
    "left" : "final Scope outerScope = t.getScope();",
    "right" : "final Scope outerScope = t.getScope();",
    "info" : "VariableDeclarationStatement[15821-15859]:VariableDeclarationStatement[15821-15859]"
  }, {
    "left" : "final String functionPrivateName = n.getFirstChild().getString();",
    "right" : "final String functionPrivateName = n.getFirstChild().getString();",
    "info" : "VariableDeclarationStatement[15868-15933]:VariableDeclarationStatement[15868-15933]"
  }, {
    "left" : "if (functionPrivateName != null && functionPrivateName.length() > 0 &&\n            outerScope.isDeclared(functionPrivateName, false) &&\n            // Ideally, we would want to check whether the type in the scope\n            // differs from the type being defined, but then the extern\n            // redeclarations of built-in types generates spurious warnings.\n            !(outerScope.getVar(\n                functionPrivateName).getType() instanceof FunctionType))",
    "right" : "if (functionPrivateName != null && functionPrivateName.length() > 0 &&\n            outerScope.isDeclared(functionPrivateName, false) &&\n            // Ideally, we would want to check whether the type in the scope\n            // differs from the type being defined, but then the extern\n            // redeclarations of built-in types generates spurious warnings.\n            !(outerScope.getVar(\n                functionPrivateName).getType() instanceof FunctionType))",
    "info" : "IfStatement[15942-16491]:IfStatement[15942-16491]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16410-16491]:Block[16410-16491]"
  }, {
    "left" : "report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);",
    "right" : "report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);",
    "info" : "ExpressionStatement[16422-16481]:ExpressionStatement[16422-16481]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[16708-16714]:BreakStatement[16708-16714]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[16725-16737]:ReturnStatement[16725-16737]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[17190-17199]:MarkerAnnotation[17190-17199]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17202-17208]:Modifier[17202-17208]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[17209-17213]:PrimitiveType[17209-17213]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[17214-17219]:SimpleName[17214-17219]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[17220-17235]:SingleVariableDeclaration[17220-17235]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[17237-17243]:SingleVariableDeclaration[17237-17243]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[17245-17256]:SingleVariableDeclaration[17245-17256]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17258-28269]:Block[17258-28269]"
  }, {
    "left" : "JSType childType;",
    "right" : "JSType childType;",
    "info" : "VariableDeclarationStatement[17264-17281]:VariableDeclarationStatement[17264-17281]"
  }, {
    "left" : "JSType leftType, rightType;",
    "right" : "JSType leftType, rightType;",
    "info" : "VariableDeclarationStatement[17286-17313]:VariableDeclarationStatement[17286-17313]"
  }, {
    "left" : "Node left, right;",
    "right" : "Node left, right;",
    "info" : "VariableDeclarationStatement[17318-17335]:VariableDeclarationStatement[17318-17335]"
  }, {
    "left" : "boolean typeable = true;",
    "right" : "boolean typeable = true;",
    "info" : "VariableDeclarationStatement[17406-17430]:VariableDeclarationStatement[17406-17430]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.CAST:\n        Node expr = n.getFirstChild();\n        ensureTyped(t, n, getJSType(expr));\n\n        // If the cast, tightens the type apply it, so it is available post\n        // normalization.\n        JSType castType = getJSType(n);\n        JSType exprType = getJSType(expr);\n        if (castType.isSubtype(exprType)) {\n          expr.setJSType(castType);\n        }\n        break;\n\n      case Token.NAME:\n        typeable = visitName(t, n, parent);\n        break;\n\n      case Token.PARAM_LIST:\n        typeable = false;\n        break;\n\n      case Token.COMMA:\n        ensureTyped(t, n, getJSType(n.getLastChild()));\n        break;\n\n      case Token.TRUE:\n      case Token.FALSE:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.THIS:\n        ensureTyped(t, n, t.getScope().getTypeOfThis());\n        break;\n\n      case Token.NULL:\n        ensureTyped(t, n, NULL_TYPE);\n        break;\n\n      case Token.NUMBER:\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.STRING:\n        ensureTyped(t, n, STRING_TYPE);\n        break;\n\n      case Token.STRING_KEY:\n        typeable = false;\n        break;\n\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        // Object literal keys are handled with OBJECTLIT\n        break;\n\n      case Token.ARRAYLIT:\n        ensureTyped(t, n, ARRAY_TYPE);\n        break;\n\n      case Token.REGEXP:\n        ensureTyped(t, n, REGEXP_TYPE);\n        break;\n\n      case Token.GETPROP:\n        visitGetProp(t, n, parent);\n        typeable = !(parent.isAssign() &&\n                     parent.getFirstChild() == n);\n        break;\n\n      case Token.GETELEM:\n        visitGetElem(t, n);\n        // The type of GETELEM is always unknown, so no point counting that.\n        // If that unknown leaks elsewhere (say by an assignment to another\n        // variable), then it will be counted.\n        typeable = false;\n        break;\n\n      case Token.VAR:\n        visitVar(t, n);\n        typeable = false;\n        break;\n\n      case Token.NEW:\n        visitNew(t, n);\n        break;\n\n      case Token.CALL:\n        visitCall(t, n);\n        typeable = !parent.isExprResult();\n        break;\n\n      case Token.RETURN:\n        visitReturn(t, n);\n        typeable = false;\n        break;\n\n      case Token.DEC:\n      case Token.INC:\n        left = n.getFirstChild();\n        checkPropCreation(t, left);\n        validator.expectNumber(t, left, getJSType(left), \"increment/decrement\");\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.NOT:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.VOID:\n        ensureTyped(t, n, VOID_TYPE);\n        break;\n\n      case Token.TYPEOF:\n        ensureTyped(t, n, STRING_TYPE);\n        break;\n\n      case Token.BITNOT:\n        childType = getJSType(n.getFirstChild());\n        if (!childType.matchesInt32Context()) {\n          report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),\n              childType.toString());\n        }\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.POS:\n      case Token.NEG:\n        left = n.getFirstChild();\n        validator.expectNumber(t, left, getJSType(left), \"sign operator\");\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE: {\n        left = n.getFirstChild();\n        right = n.getLastChild();\n\n        if (left.isTypeOf()) {\n          if (right.isString()) {\n            checkTypeofString(t, right, right.getString());\n          }\n        } else if (right.isTypeOf() && left.isString()) {\n          checkTypeofString(t, left, left.getString());\n        }\n\n        leftType = getJSType(left);\n        rightType = getJSType(right);\n\n        // We do not want to warn about explicit comparisons to VOID. People\n        // often do this if they think their type annotations screwed up.\n        //\n        // We do want to warn about cases where people compare things like\n        // (Array|null) == (Function|null)\n        // because it probably means they screwed up.\n        //\n        // This heuristic here is not perfect, but should catch cases we\n        // care about without too many false negatives.\n        JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();\n        JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();\n\n        TernaryValue result = TernaryValue.UNKNOWN;\n        if (n.getType() == Token.EQ || n.getType() == Token.NE) {\n          result = leftTypeRestricted.testForEquality(rightTypeRestricted);\n          if (n.isNE()) {\n            result = result.not();\n          }\n        } else {\n          // SHEQ or SHNE\n          if (!leftTypeRestricted.canTestForShallowEqualityWith(\n                  rightTypeRestricted)) {\n            result = n.getType() == Token.SHEQ ?\n                TernaryValue.FALSE : TernaryValue.TRUE;\n          }\n        }\n\n        if (result != TernaryValue.UNKNOWN) {\n          report(t, n, DETERMINISTIC_TEST, leftType.toString(),\n              rightType.toString(), result.toString());\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n      }\n\n      case Token.LT:\n      case Token.LE:\n      case Token.GT:\n      case Token.GE:\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n        if (rightType.isNumber()) {\n          validator.expectNumber(\n              t, n, leftType, \"left side of numeric comparison\");\n        } else if (leftType.isNumber()) {\n          validator.expectNumber(\n              t, n, rightType, \"right side of numeric comparison\");\n        } else if (leftType.matchesNumberContext() &&\n                   rightType.matchesNumberContext()) {\n          // OK.\n        } else {\n          // Whether the comparison is numeric will be determined at runtime\n          // each time the expression is evaluated. Regardless, both operands\n          // should match a string context.\n          String message = \"left side of comparison\";\n          validator.expectString(t, n, leftType, message);\n          validator.expectNotNullOrUndefined(\n              t, n, leftType, message, getNativeType(STRING_TYPE));\n          message = \"right side of comparison\";\n          validator.expectString(t, n, rightType, message);\n          validator.expectNotNullOrUndefined(\n              t, n, rightType, message, getNativeType(STRING_TYPE));\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.IN:\n        left = n.getFirstChild();\n        right = n.getLastChild();\n        rightType = getJSType(right);\n        validator.expectString(t, left, getJSType(left), \"left side of 'in'\");\n        validator.expectObject(t, n, rightType, \"'in' requires an object\");\n        if (rightType.isStruct()) {\n          report(t, right, IN_USED_WITH_STRUCT);\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.INSTANCEOF:\n        left = n.getFirstChild();\n        right = n.getLastChild();\n        rightType = getJSType(right).restrictByNotNullOrUndefined();\n        validator.expectAnyObject(\n            t, left, getJSType(left), \"deterministic instanceof yields false\");\n        validator.expectActualObject(\n            t, right, rightType, \"instanceof requires an object\");\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.ASSIGN:\n        visitAssign(t, n);\n        typeable = false;\n        break;\n\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_MUL:\n        checkPropCreation(t, n.getFirstChild());\n        // fall through\n\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.SUB:\n      case Token.ADD:\n      case Token.MUL:\n        visitBinaryOperator(n.getType(), t, n);\n        break;\n\n      case Token.DELPROP:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.CASE:\n        JSType switchType = getJSType(parent.getFirstChild());\n        JSType caseType = getJSType(n.getFirstChild());\n        validator.expectSwitchMatchesCase(t, n, switchType, caseType);\n        typeable = false;\n        break;\n\n      case Token.WITH: {\n        Node child = n.getFirstChild();\n        childType = getJSType(child);\n        validator.expectObject(t, child, childType, \"with requires an object\");\n        typeable = false;\n        break;\n      }\n\n      case Token.FUNCTION:\n        visitFunction(t, n);\n        break;\n\n      // These nodes have no interesting type behavior.\n      case Token.LABEL:\n      case Token.LABEL_NAME:\n      case Token.SWITCH:\n      case Token.BREAK:\n      case Token.CATCH:\n      case Token.TRY:\n      case Token.SCRIPT:\n      case Token.EXPR_RESULT:\n      case Token.BLOCK:\n      case Token.EMPTY:\n      case Token.DEFAULT_CASE:\n      case Token.CONTINUE:\n      case Token.DEBUGGER:\n      case Token.THROW:\n        typeable = false;\n        break;\n\n      // These nodes require data flow analysis.\n      case Token.DO:\n      case Token.IF:\n      case Token.WHILE:\n        typeable = false;\n        break;\n\n      case Token.FOR:\n        if (NodeUtil.isForIn(n)) {\n          Node obj = n.getChildAtIndex(1);\n          if (getJSType(obj).isStruct()) {\n            report(t, obj, IN_USED_WITH_STRUCT);\n          }\n        }\n        typeable = false;\n        break;\n\n      // These nodes are typed during the type inference.\n      case Token.AND:\n      case Token.HOOK:\n      case Token.OBJECTLIT:\n      case Token.OR:\n        if (n.getJSType() != null) { // If we didn't run type inference.\n          ensureTyped(t, n);\n        } else {\n          // If this is an enum, then give that type to the objectlit as well.\n          if ((n.isObjectLit())\n              && (parent.getJSType() instanceof EnumType)) {\n            ensureTyped(t, n, parent.getJSType());\n          } else {\n            ensureTyped(t, n);\n          }\n        }\n        if (n.isObjectLit()) {\n          JSType typ = getJSType(n);\n          for (Node key : n.children()) {\n            visitObjLitKey(t, key, n, typ);\n          }\n        }\n        break;\n\n      default:\n        report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));\n        ensureTyped(t, n);\n        break;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.CAST:\n        Node expr = n.getFirstChild();\n        ensureTyped(t, n, getJSType(expr));\n\n        // If the cast, tightens the type apply it, so it is available post\n        // normalization.\n        JSType castType = getJSType(n);\n        JSType exprType = getJSType(expr);\n        if (castType.isSubtype(exprType)) {\n          expr.setJSType(castType);\n        }\n        break;\n\n      case Token.NAME:\n        typeable = visitName(t, n, parent);\n        break;\n\n      case Token.PARAM_LIST:\n        typeable = false;\n        break;\n\n      case Token.COMMA:\n        ensureTyped(t, n, getJSType(n.getLastChild()));\n        break;\n\n      case Token.TRUE:\n      case Token.FALSE:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.THIS:\n        ensureTyped(t, n, t.getScope().getTypeOfThis());\n        break;\n\n      case Token.NULL:\n        ensureTyped(t, n, NULL_TYPE);\n        break;\n\n      case Token.NUMBER:\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.STRING:\n        ensureTyped(t, n, STRING_TYPE);\n        break;\n\n      case Token.STRING_KEY:\n        typeable = false;\n        break;\n\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        // Object literal keys are handled with OBJECTLIT\n        break;\n\n      case Token.ARRAYLIT:\n        ensureTyped(t, n, ARRAY_TYPE);\n        break;\n\n      case Token.REGEXP:\n        ensureTyped(t, n, REGEXP_TYPE);\n        break;\n\n      case Token.GETPROP:\n        visitGetProp(t, n, parent);\n        typeable = !(parent.isAssign() &&\n                     parent.getFirstChild() == n);\n        break;\n\n      case Token.GETELEM:\n        visitGetElem(t, n);\n        // The type of GETELEM is always unknown, so no point counting that.\n        // If that unknown leaks elsewhere (say by an assignment to another\n        // variable), then it will be counted.\n        typeable = false;\n        break;\n\n      case Token.VAR:\n        visitVar(t, n);\n        typeable = false;\n        break;\n\n      case Token.NEW:\n        visitNew(t, n);\n        break;\n\n      case Token.CALL:\n        visitCall(t, n);\n        typeable = !parent.isExprResult();\n        break;\n\n      case Token.RETURN:\n        visitReturn(t, n);\n        typeable = false;\n        break;\n\n      case Token.DEC:\n      case Token.INC:\n        left = n.getFirstChild();\n        checkPropCreation(t, left);\n        validator.expectNumber(t, left, getJSType(left), \"increment/decrement\");\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.NOT:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.VOID:\n        ensureTyped(t, n, VOID_TYPE);\n        break;\n\n      case Token.TYPEOF:\n        ensureTyped(t, n, STRING_TYPE);\n        break;\n\n      case Token.BITNOT:\n        childType = getJSType(n.getFirstChild());\n        if (!childType.matchesInt32Context()) {\n          report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),\n              childType.toString());\n        }\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.POS:\n      case Token.NEG:\n        left = n.getFirstChild();\n        validator.expectNumber(t, left, getJSType(left), \"sign operator\");\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE: {\n        left = n.getFirstChild();\n        right = n.getLastChild();\n\n        if (left.isTypeOf()) {\n          if (right.isString()) {\n            checkTypeofString(t, right, right.getString());\n          }\n        } else if (right.isTypeOf() && left.isString()) {\n          checkTypeofString(t, left, left.getString());\n        }\n\n        leftType = getJSType(left);\n        rightType = getJSType(right);\n\n        // We do not want to warn about explicit comparisons to VOID. People\n        // often do this if they think their type annotations screwed up.\n        //\n        // We do want to warn about cases where people compare things like\n        // (Array|null) == (Function|null)\n        // because it probably means they screwed up.\n        //\n        // This heuristic here is not perfect, but should catch cases we\n        // care about without too many false negatives.\n        JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();\n        JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();\n\n        TernaryValue result = TernaryValue.UNKNOWN;\n        if (n.getType() == Token.EQ || n.getType() == Token.NE) {\n          result = leftTypeRestricted.testForEquality(rightTypeRestricted);\n          if (n.isNE()) {\n            result = result.not();\n          }\n        } else {\n          // SHEQ or SHNE\n          if (!leftTypeRestricted.canTestForShallowEqualityWith(\n                  rightTypeRestricted)) {\n            result = n.getType() == Token.SHEQ ?\n                TernaryValue.FALSE : TernaryValue.TRUE;\n          }\n        }\n\n        if (result != TernaryValue.UNKNOWN) {\n          report(t, n, DETERMINISTIC_TEST, leftType.toString(),\n              rightType.toString(), result.toString());\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n      }\n\n      case Token.LT:\n      case Token.LE:\n      case Token.GT:\n      case Token.GE:\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n        if (rightType.isNumber()) {\n          validator.expectNumber(\n              t, n, leftType, \"left side of numeric comparison\");\n        } else if (leftType.isNumber()) {\n          validator.expectNumber(\n              t, n, rightType, \"right side of numeric comparison\");\n        } else if (leftType.matchesNumberContext() &&\n                   rightType.matchesNumberContext()) {\n          // OK.\n        } else {\n          // Whether the comparison is numeric will be determined at runtime\n          // each time the expression is evaluated. Regardless, both operands\n          // should match a string context.\n          String message = \"left side of comparison\";\n          validator.expectString(t, n, leftType, message);\n          validator.expectNotNullOrUndefined(\n              t, n, leftType, message, getNativeType(STRING_TYPE));\n          message = \"right side of comparison\";\n          validator.expectString(t, n, rightType, message);\n          validator.expectNotNullOrUndefined(\n              t, n, rightType, message, getNativeType(STRING_TYPE));\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.IN:\n        left = n.getFirstChild();\n        right = n.getLastChild();\n        rightType = getJSType(right);\n        validator.expectString(t, left, getJSType(left), \"left side of 'in'\");\n        validator.expectObject(t, n, rightType, \"'in' requires an object\");\n        if (rightType.isStruct()) {\n          report(t, right, IN_USED_WITH_STRUCT);\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.INSTANCEOF:\n        left = n.getFirstChild();\n        right = n.getLastChild();\n        rightType = getJSType(right).restrictByNotNullOrUndefined();\n        validator.expectAnyObject(\n            t, left, getJSType(left), \"deterministic instanceof yields false\");\n        validator.expectActualObject(\n            t, right, rightType, \"instanceof requires an object\");\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.ASSIGN:\n        visitAssign(t, n);\n        typeable = false;\n        break;\n\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_MUL:\n        checkPropCreation(t, n.getFirstChild());\n        // fall through\n\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.SUB:\n      case Token.ADD:\n      case Token.MUL:\n        visitBinaryOperator(n.getType(), t, n);\n        break;\n\n      case Token.DELPROP:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.CASE:\n        JSType switchType = getJSType(parent.getFirstChild());\n        JSType caseType = getJSType(n.getFirstChild());\n        validator.expectSwitchMatchesCase(t, n, switchType, caseType);\n        typeable = false;\n        break;\n\n      case Token.WITH: {\n        Node child = n.getFirstChild();\n        childType = getJSType(child);\n        validator.expectObject(t, child, childType, \"with requires an object\");\n        typeable = false;\n        break;\n      }\n\n      case Token.FUNCTION:\n        visitFunction(t, n);\n        break;\n\n      // These nodes have no interesting type behavior.\n      case Token.LABEL:\n      case Token.LABEL_NAME:\n      case Token.SWITCH:\n      case Token.BREAK:\n      case Token.CATCH:\n      case Token.TRY:\n      case Token.SCRIPT:\n      case Token.EXPR_RESULT:\n      case Token.BLOCK:\n      case Token.EMPTY:\n      case Token.DEFAULT_CASE:\n      case Token.CONTINUE:\n      case Token.DEBUGGER:\n      case Token.THROW:\n        typeable = false;\n        break;\n\n      // These nodes require data flow analysis.\n      case Token.DO:\n      case Token.IF:\n      case Token.WHILE:\n        typeable = false;\n        break;\n\n      case Token.FOR:\n        if (NodeUtil.isForIn(n)) {\n          Node obj = n.getChildAtIndex(1);\n          if (getJSType(obj).isStruct()) {\n            report(t, obj, IN_USED_WITH_STRUCT);\n          }\n        }\n        typeable = false;\n        break;\n\n      // These nodes are typed during the type inference.\n      case Token.AND:\n      case Token.HOOK:\n      case Token.OBJECTLIT:\n      case Token.OR:\n        if (n.getJSType() != null) { // If we didn't run type inference.\n          ensureTyped(t, n);\n        } else {\n          // If this is an enum, then give that type to the objectlit as well.\n          if ((n.isObjectLit())\n              && (parent.getJSType() instanceof EnumType)) {\n            ensureTyped(t, n, parent.getJSType());\n          } else {\n            ensureTyped(t, n);\n          }\n        }\n        if (n.isObjectLit()) {\n          JSType typ = getJSType(n);\n          for (Node key : n.children()) {\n            visitObjLitKey(t, key, n, typ);\n          }\n        }\n        break;\n\n      default:\n        report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));\n        ensureTyped(t, n);\n        break;\n    }",
    "info" : "SwitchStatement[17436-28043]:SwitchStatement[17436-28043]"
  }, {
    "left" : "case Token.CAST:",
    "right" : "case Token.CAST:",
    "info" : "SwitchCase[17465-17481]:SwitchCase[17465-17481]"
  }, {
    "left" : "Node expr = n.getFirstChild();",
    "right" : "Node expr = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[17490-17520]:VariableDeclarationStatement[17490-17520]"
  }, {
    "left" : "ensureTyped(t, n, getJSType(expr));",
    "right" : "ensureTyped(t, n, getJSType(expr));",
    "info" : "ExpressionStatement[17529-17564]:ExpressionStatement[17529-17564]"
  }, {
    "left" : "JSType castType = getJSType(n);",
    "right" : "JSType castType = getJSType(n);",
    "info" : "VariableDeclarationStatement[17676-17707]:VariableDeclarationStatement[17676-17707]"
  }, {
    "left" : "JSType exprType = getJSType(expr);",
    "right" : "JSType exprType = getJSType(expr);",
    "info" : "VariableDeclarationStatement[17716-17750]:VariableDeclarationStatement[17716-17750]"
  }, {
    "left" : "if (castType.isSubtype(exprType))",
    "right" : "if (castType.isSubtype(exprType))",
    "info" : "IfStatement[17759-17840]:IfStatement[17759-17840]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17793-17840]:Block[17793-17840]"
  }, {
    "left" : "expr.setJSType(castType);",
    "right" : "expr.setJSType(castType);",
    "info" : "ExpressionStatement[17805-17830]:ExpressionStatement[17805-17830]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17849-17855]:BreakStatement[17849-17855]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[17863-17879]:SwitchCase[17863-17879]"
  }, {
    "left" : "typeable = visitName(t, n, parent);",
    "right" : "typeable = visitName(t, n, parent);",
    "info" : "ExpressionStatement[17888-17923]:ExpressionStatement[17888-17923]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17932-17938]:BreakStatement[17932-17938]"
  }, {
    "left" : "case Token.PARAM_LIST:",
    "right" : "case Token.PARAM_LIST:",
    "info" : "SwitchCase[17946-17968]:SwitchCase[17946-17968]"
  }, {
    "left" : "typeable = false;",
    "right" : "typeable = false;",
    "info" : "ExpressionStatement[17977-17994]:ExpressionStatement[17977-17994]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18003-18009]:BreakStatement[18003-18009]"
  }, {
    "left" : "case Token.COMMA:",
    "right" : "case Token.COMMA:",
    "info" : "SwitchCase[18017-18034]:SwitchCase[18017-18034]"
  }, {
    "left" : "ensureTyped(t, n, getJSType(n.getLastChild()));",
    "right" : "ensureTyped(t, n, getJSType(n.getLastChild()));",
    "info" : "ExpressionStatement[18043-18090]:ExpressionStatement[18043-18090]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18099-18105]:BreakStatement[18099-18105]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[18113-18129]:SwitchCase[18113-18129]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[18136-18153]:SwitchCase[18136-18153]"
  }, {
    "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "info" : "ExpressionStatement[18162-18194]:ExpressionStatement[18162-18194]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18203-18209]:BreakStatement[18203-18209]"
  }, {
    "left" : "case Token.THIS:",
    "right" : "case Token.THIS:",
    "info" : "SwitchCase[18217-18233]:SwitchCase[18217-18233]"
  }, {
    "left" : "ensureTyped(t, n, t.getScope().getTypeOfThis());",
    "right" : "ensureTyped(t, n, t.getScope().getTypeOfThis());",
    "info" : "ExpressionStatement[18242-18290]:ExpressionStatement[18242-18290]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18299-18305]:BreakStatement[18299-18305]"
  }, {
    "left" : "case Token.NULL:",
    "right" : "case Token.NULL:",
    "info" : "SwitchCase[18313-18329]:SwitchCase[18313-18329]"
  }, {
    "left" : "ensureTyped(t, n, NULL_TYPE);",
    "right" : "ensureTyped(t, n, NULL_TYPE);",
    "info" : "ExpressionStatement[18338-18367]:ExpressionStatement[18338-18367]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18376-18382]:BreakStatement[18376-18382]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[18390-18408]:SwitchCase[18390-18408]"
  }, {
    "left" : "ensureTyped(t, n, NUMBER_TYPE);",
    "right" : "ensureTyped(t, n, NUMBER_TYPE);",
    "info" : "ExpressionStatement[18417-18448]:ExpressionStatement[18417-18448]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18457-18463]:BreakStatement[18457-18463]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[18471-18489]:SwitchCase[18471-18489]"
  }, {
    "left" : "ensureTyped(t, n, STRING_TYPE);",
    "right" : "ensureTyped(t, n, STRING_TYPE);",
    "info" : "ExpressionStatement[18498-18529]:ExpressionStatement[18498-18529]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18538-18544]:BreakStatement[18538-18544]"
  }, {
    "left" : "case Token.STRING_KEY:",
    "right" : "case Token.STRING_KEY:",
    "info" : "SwitchCase[18552-18574]:SwitchCase[18552-18574]"
  }, {
    "left" : "typeable = false;",
    "right" : "typeable = false;",
    "info" : "ExpressionStatement[18583-18600]:ExpressionStatement[18583-18600]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18609-18615]:BreakStatement[18609-18615]"
  }, {
    "left" : "case Token.GETTER_DEF:",
    "right" : "case Token.GETTER_DEF:",
    "info" : "SwitchCase[18623-18645]:SwitchCase[18623-18645]"
  }, {
    "left" : "case Token.SETTER_DEF:",
    "right" : "case Token.SETTER_DEF:",
    "info" : "SwitchCase[18652-18674]:SwitchCase[18652-18674]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18741-18747]:BreakStatement[18741-18747]"
  }, {
    "left" : "case Token.ARRAYLIT:",
    "right" : "case Token.ARRAYLIT:",
    "info" : "SwitchCase[18755-18775]:SwitchCase[18755-18775]"
  }, {
    "left" : "ensureTyped(t, n, ARRAY_TYPE);",
    "right" : "ensureTyped(t, n, ARRAY_TYPE);",
    "info" : "ExpressionStatement[18784-18814]:ExpressionStatement[18784-18814]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18823-18829]:BreakStatement[18823-18829]"
  }, {
    "left" : "case Token.REGEXP:",
    "right" : "case Token.REGEXP:",
    "info" : "SwitchCase[18837-18855]:SwitchCase[18837-18855]"
  }, {
    "left" : "ensureTyped(t, n, REGEXP_TYPE);",
    "right" : "ensureTyped(t, n, REGEXP_TYPE);",
    "info" : "ExpressionStatement[18864-18895]:ExpressionStatement[18864-18895]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18904-18910]:BreakStatement[18904-18910]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[18918-18937]:SwitchCase[18918-18937]"
  }, {
    "left" : "visitGetProp(t, n, parent);",
    "right" : "visitGetProp(t, n, parent);",
    "info" : "ExpressionStatement[18946-18973]:ExpressionStatement[18946-18973]"
  }, {
    "left" : "typeable = !(parent.isAssign() &&\n                     parent.getFirstChild() == n);",
    "right" : "typeable = !(parent.isAssign() &&\n                     parent.getFirstChild() == n);",
    "info" : "ExpressionStatement[18982-19066]:ExpressionStatement[18982-19066]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19075-19081]:BreakStatement[19075-19081]"
  }, {
    "left" : "case Token.GETELEM:",
    "right" : "case Token.GETELEM:",
    "info" : "SwitchCase[19089-19108]:SwitchCase[19089-19108]"
  }, {
    "left" : "visitGetElem(t, n);",
    "right" : "visitGetElem(t, n);",
    "info" : "ExpressionStatement[19117-19136]:ExpressionStatement[19117-19136]"
  }, {
    "left" : "typeable = false;",
    "right" : "typeable = false;",
    "info" : "ExpressionStatement[19345-19362]:ExpressionStatement[19345-19362]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19371-19377]:BreakStatement[19371-19377]"
  }, {
    "left" : "case Token.VAR:",
    "right" : "case Token.VAR:",
    "info" : "SwitchCase[19385-19400]:SwitchCase[19385-19400]"
  }, {
    "left" : "visitVar(t, n);",
    "right" : "visitVar(t, n);",
    "info" : "ExpressionStatement[19409-19424]:ExpressionStatement[19409-19424]"
  }, {
    "left" : "typeable = false;",
    "right" : "typeable = false;",
    "info" : "ExpressionStatement[19433-19450]:ExpressionStatement[19433-19450]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19459-19465]:BreakStatement[19459-19465]"
  }, {
    "left" : "case Token.NEW:",
    "right" : "case Token.NEW:",
    "info" : "SwitchCase[19473-19488]:SwitchCase[19473-19488]"
  }, {
    "left" : "visitNew(t, n);",
    "right" : "visitNew(t, n);",
    "info" : "ExpressionStatement[19497-19512]:ExpressionStatement[19497-19512]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19521-19527]:BreakStatement[19521-19527]"
  }, {
    "left" : "case Token.CALL:",
    "right" : "case Token.CALL:",
    "info" : "SwitchCase[19535-19551]:SwitchCase[19535-19551]"
  }, {
    "left" : "visitCall(t, n);",
    "right" : "visitCall(t, n);",
    "info" : "ExpressionStatement[19560-19576]:ExpressionStatement[19560-19576]"
  }, {
    "left" : "typeable = !parent.isExprResult();",
    "right" : "typeable = !parent.isExprResult();",
    "info" : "ExpressionStatement[19585-19619]:ExpressionStatement[19585-19619]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19628-19634]:BreakStatement[19628-19634]"
  }, {
    "left" : "case Token.RETURN:",
    "right" : "case Token.RETURN:",
    "info" : "SwitchCase[19642-19660]:SwitchCase[19642-19660]"
  }, {
    "left" : "visitReturn(t, n);",
    "right" : "visitReturn(t, n);",
    "info" : "ExpressionStatement[19669-19687]:ExpressionStatement[19669-19687]"
  }, {
    "left" : "typeable = false;",
    "right" : "typeable = false;",
    "info" : "ExpressionStatement[19696-19713]:ExpressionStatement[19696-19713]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19722-19728]:BreakStatement[19722-19728]"
  }, {
    "left" : "case Token.DEC:",
    "right" : "case Token.DEC:",
    "info" : "SwitchCase[19736-19751]:SwitchCase[19736-19751]"
  }, {
    "left" : "case Token.INC:",
    "right" : "case Token.INC:",
    "info" : "SwitchCase[19758-19773]:SwitchCase[19758-19773]"
  }, {
    "left" : "left = n.getFirstChild();",
    "right" : "left = n.getFirstChild();",
    "info" : "ExpressionStatement[19782-19807]:ExpressionStatement[19782-19807]"
  }, {
    "left" : "checkPropCreation(t, left);",
    "right" : "checkPropCreation(t, left);",
    "info" : "ExpressionStatement[19816-19843]:ExpressionStatement[19816-19843]"
  }, {
    "left" : "validator.expectNumber(t, left, getJSType(left), \"increment/decrement\");",
    "right" : "validator.expectNumber(t, left, getJSType(left), \"increment/decrement\");",
    "info" : "ExpressionStatement[19852-19924]:ExpressionStatement[19852-19924]"
  }, {
    "left" : "ensureTyped(t, n, NUMBER_TYPE);",
    "right" : "ensureTyped(t, n, NUMBER_TYPE);",
    "info" : "ExpressionStatement[19933-19964]:ExpressionStatement[19933-19964]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19973-19979]:BreakStatement[19973-19979]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[19987-20002]:SwitchCase[19987-20002]"
  }, {
    "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "info" : "ExpressionStatement[20011-20043]:ExpressionStatement[20011-20043]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20052-20058]:BreakStatement[20052-20058]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[20066-20082]:SwitchCase[20066-20082]"
  }, {
    "left" : "ensureTyped(t, n, VOID_TYPE);",
    "right" : "ensureTyped(t, n, VOID_TYPE);",
    "info" : "ExpressionStatement[20091-20120]:ExpressionStatement[20091-20120]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20129-20135]:BreakStatement[20129-20135]"
  }, {
    "left" : "case Token.TYPEOF:",
    "right" : "case Token.TYPEOF:",
    "info" : "SwitchCase[20143-20161]:SwitchCase[20143-20161]"
  }, {
    "left" : "ensureTyped(t, n, STRING_TYPE);",
    "right" : "ensureTyped(t, n, STRING_TYPE);",
    "info" : "ExpressionStatement[20170-20201]:ExpressionStatement[20170-20201]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20210-20216]:BreakStatement[20210-20216]"
  }, {
    "left" : "case Token.BITNOT:",
    "right" : "case Token.BITNOT:",
    "info" : "SwitchCase[20224-20242]:SwitchCase[20224-20242]"
  }, {
    "left" : "childType = getJSType(n.getFirstChild());",
    "right" : "childType = getJSType(n.getFirstChild());",
    "info" : "ExpressionStatement[20251-20292]:ExpressionStatement[20251-20292]"
  }, {
    "left" : "if (!childType.matchesInt32Context())",
    "right" : "if (!childType.matchesInt32Context())",
    "info" : "IfStatement[20301-20456]:IfStatement[20301-20456]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20339-20456]:Block[20339-20456]"
  }, {
    "left" : "report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),\n              childType.toString());",
    "right" : "report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),\n              childType.toString());",
    "info" : "ExpressionStatement[20351-20446]:ExpressionStatement[20351-20446]"
  }, {
    "left" : "ensureTyped(t, n, NUMBER_TYPE);",
    "right" : "ensureTyped(t, n, NUMBER_TYPE);",
    "info" : "ExpressionStatement[20465-20496]:ExpressionStatement[20465-20496]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20505-20511]:BreakStatement[20505-20511]"
  }, {
    "left" : "case Token.POS:",
    "right" : "case Token.POS:",
    "info" : "SwitchCase[20519-20534]:SwitchCase[20519-20534]"
  }, {
    "left" : "case Token.NEG:",
    "right" : "case Token.NEG:",
    "info" : "SwitchCase[20541-20556]:SwitchCase[20541-20556]"
  }, {
    "left" : "left = n.getFirstChild();",
    "right" : "left = n.getFirstChild();",
    "info" : "ExpressionStatement[20565-20590]:ExpressionStatement[20565-20590]"
  }, {
    "left" : "validator.expectNumber(t, left, getJSType(left), \"sign operator\");",
    "right" : "validator.expectNumber(t, left, getJSType(left), \"sign operator\");",
    "info" : "ExpressionStatement[20599-20665]:ExpressionStatement[20599-20665]"
  }, {
    "left" : "ensureTyped(t, n, NUMBER_TYPE);",
    "right" : "ensureTyped(t, n, NUMBER_TYPE);",
    "info" : "ExpressionStatement[20674-20705]:ExpressionStatement[20674-20705]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20714-20720]:BreakStatement[20714-20720]"
  }, {
    "left" : "case Token.EQ:",
    "right" : "case Token.EQ:",
    "info" : "SwitchCase[20728-20742]:SwitchCase[20728-20742]"
  }, {
    "left" : "case Token.NE:",
    "right" : "case Token.NE:",
    "info" : "SwitchCase[20749-20763]:SwitchCase[20749-20763]"
  }, {
    "left" : "case Token.SHEQ:",
    "right" : "case Token.SHEQ:",
    "info" : "SwitchCase[20770-20786]:SwitchCase[20770-20786]"
  }, {
    "left" : "case Token.SHNE:",
    "right" : "case Token.SHNE:",
    "info" : "SwitchCase[20793-20809]:SwitchCase[20793-20809]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20810-22633]:Block[20810-22633]"
  }, {
    "left" : "left = n.getFirstChild();",
    "right" : "left = n.getFirstChild();",
    "info" : "ExpressionStatement[20820-20845]:ExpressionStatement[20820-20845]"
  }, {
    "left" : "right = n.getLastChild();",
    "right" : "right = n.getLastChild();",
    "info" : "ExpressionStatement[20854-20879]:ExpressionStatement[20854-20879]"
  }, {
    "left" : "if (left.isTypeOf())",
    "right" : "if (left.isTypeOf())",
    "info" : "IfStatement[20889-21141]:IfStatement[20889-21141]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20910-21027]:Block[20910-21027]"
  }, {
    "left" : "if (right.isString())",
    "right" : "if (right.isString())",
    "info" : "IfStatement[20922-21017]:IfStatement[20922-21017]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20944-21017]:Block[20944-21017]"
  }, {
    "left" : "checkTypeofString(t, right, right.getString());",
    "right" : "checkTypeofString(t, right, right.getString());",
    "info" : "ExpressionStatement[20958-21005]:ExpressionStatement[20958-21005]"
  }, {
    "left" : "if (right.isTypeOf() && left.isString())",
    "right" : "if (right.isTypeOf() && left.isString())",
    "info" : "IfStatement[21033-21141]:IfStatement[21033-21141]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21074-21141]:Block[21074-21141]"
  }, {
    "left" : "checkTypeofString(t, left, left.getString());",
    "right" : "checkTypeofString(t, left, left.getString());",
    "info" : "ExpressionStatement[21086-21131]:ExpressionStatement[21086-21131]"
  }, {
    "left" : "leftType = getJSType(left);",
    "right" : "leftType = getJSType(left);",
    "info" : "ExpressionStatement[21151-21178]:ExpressionStatement[21151-21178]"
  }, {
    "left" : "rightType = getJSType(right);",
    "right" : "rightType = getJSType(right);",
    "info" : "ExpressionStatement[21187-21216]:ExpressionStatement[21187-21216]"
  }, {
    "left" : "JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();",
    "right" : "JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();",
    "info" : "VariableDeclarationStatement[21700-21768]:VariableDeclarationStatement[21700-21768]"
  }, {
    "left" : "JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();",
    "right" : "JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();",
    "info" : "VariableDeclarationStatement[21777-21847]:VariableDeclarationStatement[21777-21847]"
  }, {
    "left" : "TernaryValue result = TernaryValue.UNKNOWN;",
    "right" : "TernaryValue result = TernaryValue.UNKNOWN;",
    "info" : "VariableDeclarationStatement[21857-21900]:VariableDeclarationStatement[21857-21900]"
  }, {
    "left" : "if (n.getType() == Token.EQ || n.getType() == Token.NE)",
    "right" : "if (n.getType() == Token.EQ || n.getType() == Token.NE)",
    "info" : "IfStatement[21909-22392]:IfStatement[21909-22392]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21965-22125]:Block[21965-22125]"
  }, {
    "left" : "result = leftTypeRestricted.testForEquality(rightTypeRestricted);",
    "right" : "result = leftTypeRestricted.testForEquality(rightTypeRestricted);",
    "info" : "ExpressionStatement[21977-22042]:ExpressionStatement[21977-22042]"
  }, {
    "left" : "if (n.isNE())",
    "right" : "if (n.isNE())",
    "info" : "IfStatement[22053-22115]:IfStatement[22053-22115]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22067-22115]:Block[22067-22115]"
  }, {
    "left" : "result = result.not();",
    "right" : "result = result.not();",
    "info" : "ExpressionStatement[22081-22103]:ExpressionStatement[22081-22103]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22131-22392]:Block[22131-22392]"
  }, {
    "left" : "if (!leftTypeRestricted.canTestForShallowEqualityWith(\n                  rightTypeRestricted))",
    "right" : "if (!leftTypeRestricted.canTestForShallowEqualityWith(\n                  rightTypeRestricted))",
    "info" : "IfStatement[22169-22382]:IfStatement[22169-22382]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22264-22382]:Block[22264-22382]"
  }, {
    "left" : "result = n.getType() == Token.SHEQ ?\n                TernaryValue.FALSE : TernaryValue.TRUE;",
    "right" : "result = n.getType() == Token.SHEQ ?\n                TernaryValue.FALSE : TernaryValue.TRUE;",
    "info" : "ExpressionStatement[22278-22370]:ExpressionStatement[22278-22370]"
  }, {
    "left" : "if (result != TernaryValue.UNKNOWN)",
    "right" : "if (result != TernaryValue.UNKNOWN)",
    "info" : "IfStatement[22402-22569]:IfStatement[22402-22569]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22438-22569]:Block[22438-22569]"
  }, {
    "left" : "report(t, n, DETERMINISTIC_TEST, leftType.toString(),\n              rightType.toString(), result.toString());",
    "right" : "report(t, n, DETERMINISTIC_TEST, leftType.toString(),\n              rightType.toString(), result.toString());",
    "info" : "ExpressionStatement[22450-22559]:ExpressionStatement[22450-22559]"
  }, {
    "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "info" : "ExpressionStatement[22578-22610]:ExpressionStatement[22578-22610]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[22619-22625]:BreakStatement[22619-22625]"
  }, {
    "left" : "case Token.LT:",
    "right" : "case Token.LT:",
    "info" : "SwitchCase[22641-22655]:SwitchCase[22641-22655]"
  }, {
    "left" : "case Token.LE:",
    "right" : "case Token.LE:",
    "info" : "SwitchCase[22662-22676]:SwitchCase[22662-22676]"
  }, {
    "left" : "case Token.GT:",
    "right" : "case Token.GT:",
    "info" : "SwitchCase[22683-22697]:SwitchCase[22683-22697]"
  }, {
    "left" : "case Token.GE:",
    "right" : "case Token.GE:",
    "info" : "SwitchCase[22704-22718]:SwitchCase[22704-22718]"
  }, {
    "left" : "leftType = getJSType(n.getFirstChild());",
    "right" : "leftType = getJSType(n.getFirstChild());",
    "info" : "ExpressionStatement[22727-22767]:ExpressionStatement[22727-22767]"
  }, {
    "left" : "rightType = getJSType(n.getLastChild());",
    "right" : "rightType = getJSType(n.getLastChild());",
    "info" : "ExpressionStatement[22776-22816]:ExpressionStatement[22776-22816]"
  }, {
    "left" : "if (rightType.isNumber())",
    "right" : "if (rightType.isNumber())",
    "info" : "IfStatement[22825-23898]:IfStatement[22825-23898]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22851-22962]:Block[22851-22962]"
  }, {
    "left" : "validator.expectNumber(\n              t, n, leftType, \"left side of numeric comparison\");",
    "right" : "validator.expectNumber(\n              t, n, leftType, \"left side of numeric comparison\");",
    "info" : "ExpressionStatement[22863-22952]:ExpressionStatement[22863-22952]"
  }, {
    "left" : "if (leftType.isNumber())",
    "right" : "if (leftType.isNumber())",
    "info" : "IfStatement[22968-23898]:IfStatement[22968-23898]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22993-23106]:Block[22993-23106]"
  }, {
    "left" : "validator.expectNumber(\n              t, n, rightType, \"right side of numeric comparison\");",
    "right" : "validator.expectNumber(\n              t, n, rightType, \"right side of numeric comparison\");",
    "info" : "ExpressionStatement[23005-23096]:ExpressionStatement[23005-23096]"
  }, {
    "left" : "if (leftType.matchesNumberContext() &&\n                   rightType.matchesNumberContext())",
    "right" : "if (leftType.matchesNumberContext() &&\n                   rightType.matchesNumberContext())",
    "info" : "IfStatement[23112-23898]:IfStatement[23112-23898]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23204-23232]:Block[23204-23232]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23238-23898]:Block[23238-23898]"
  }, {
    "left" : "String message = \"left side of comparison\";",
    "right" : "String message = \"left side of comparison\";",
    "info" : "VariableDeclarationStatement[23449-23492]:VariableDeclarationStatement[23449-23492]"
  }, {
    "left" : "validator.expectString(t, n, leftType, message);",
    "right" : "validator.expectString(t, n, leftType, message);",
    "info" : "ExpressionStatement[23503-23551]:ExpressionStatement[23503-23551]"
  }, {
    "left" : "validator.expectNotNullOrUndefined(\n              t, n, leftType, message, getNativeType(STRING_TYPE));",
    "right" : "validator.expectNotNullOrUndefined(\n              t, n, leftType, message, getNativeType(STRING_TYPE));",
    "info" : "ExpressionStatement[23562-23665]:ExpressionStatement[23562-23665]"
  }, {
    "left" : "message = \"right side of comparison\";",
    "right" : "message = \"right side of comparison\";",
    "info" : "ExpressionStatement[23676-23713]:ExpressionStatement[23676-23713]"
  }, {
    "left" : "validator.expectString(t, n, rightType, message);",
    "right" : "validator.expectString(t, n, rightType, message);",
    "info" : "ExpressionStatement[23724-23773]:ExpressionStatement[23724-23773]"
  }, {
    "left" : "validator.expectNotNullOrUndefined(\n              t, n, rightType, message, getNativeType(STRING_TYPE));",
    "right" : "validator.expectNotNullOrUndefined(\n              t, n, rightType, message, getNativeType(STRING_TYPE));",
    "info" : "ExpressionStatement[23784-23888]:ExpressionStatement[23784-23888]"
  }, {
    "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "info" : "ExpressionStatement[23907-23939]:ExpressionStatement[23907-23939]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[23948-23954]:BreakStatement[23948-23954]"
  }, {
    "left" : "case Token.IN:",
    "right" : "case Token.IN:",
    "info" : "SwitchCase[23962-23976]:SwitchCase[23962-23976]"
  }, {
    "left" : "left = n.getFirstChild();",
    "right" : "left = n.getFirstChild();",
    "info" : "ExpressionStatement[23985-24010]:ExpressionStatement[23985-24010]"
  }, {
    "left" : "right = n.getLastChild();",
    "right" : "right = n.getLastChild();",
    "info" : "ExpressionStatement[24019-24044]:ExpressionStatement[24019-24044]"
  }, {
    "left" : "rightType = getJSType(right);",
    "right" : "rightType = getJSType(right);",
    "info" : "ExpressionStatement[24053-24082]:ExpressionStatement[24053-24082]"
  }, {
    "left" : "validator.expectString(t, left, getJSType(left), \"left side of 'in'\");",
    "right" : "validator.expectString(t, left, getJSType(left), \"left side of 'in'\");",
    "info" : "ExpressionStatement[24091-24161]:ExpressionStatement[24091-24161]"
  }, {
    "left" : "validator.expectObject(t, n, rightType, \"'in' requires an object\");",
    "right" : "validator.expectObject(t, n, rightType, \"'in' requires an object\");",
    "info" : "ExpressionStatement[24170-24237]:ExpressionStatement[24170-24237]"
  }, {
    "left" : "if (rightType.isStruct())",
    "right" : "if (rightType.isStruct())",
    "info" : "IfStatement[24246-24332]:IfStatement[24246-24332]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24272-24332]:Block[24272-24332]"
  }, {
    "left" : "report(t, right, IN_USED_WITH_STRUCT);",
    "right" : "report(t, right, IN_USED_WITH_STRUCT);",
    "info" : "ExpressionStatement[24284-24322]:ExpressionStatement[24284-24322]"
  }, {
    "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "info" : "ExpressionStatement[24341-24373]:ExpressionStatement[24341-24373]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[24382-24388]:BreakStatement[24382-24388]"
  }, {
    "left" : "case Token.INSTANCEOF:",
    "right" : "case Token.INSTANCEOF:",
    "info" : "SwitchCase[24396-24418]:SwitchCase[24396-24418]"
  }, {
    "left" : "left = n.getFirstChild();",
    "right" : "left = n.getFirstChild();",
    "info" : "ExpressionStatement[24427-24452]:ExpressionStatement[24427-24452]"
  }, {
    "left" : "right = n.getLastChild();",
    "right" : "right = n.getLastChild();",
    "info" : "ExpressionStatement[24461-24486]:ExpressionStatement[24461-24486]"
  }, {
    "left" : "rightType = getJSType(right).restrictByNotNullOrUndefined();",
    "right" : "rightType = getJSType(right).restrictByNotNullOrUndefined();",
    "info" : "ExpressionStatement[24495-24555]:ExpressionStatement[24495-24555]"
  }, {
    "left" : "validator.expectAnyObject(\n            t, left, getJSType(left), \"deterministic instanceof yields false\");",
    "right" : "validator.expectAnyObject(\n            t, left, getJSType(left), \"deterministic instanceof yields false\");",
    "info" : "ExpressionStatement[24564-24670]:ExpressionStatement[24564-24670]"
  }, {
    "left" : "validator.expectActualObject(\n            t, right, rightType, \"instanceof requires an object\");",
    "right" : "validator.expectActualObject(\n            t, right, rightType, \"instanceof requires an object\");",
    "info" : "ExpressionStatement[24679-24775]:ExpressionStatement[24679-24775]"
  }, {
    "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "info" : "ExpressionStatement[24784-24816]:ExpressionStatement[24784-24816]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[24825-24831]:BreakStatement[24825-24831]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[24839-24857]:SwitchCase[24839-24857]"
  }, {
    "left" : "visitAssign(t, n);",
    "right" : "visitAssign(t, n);",
    "info" : "ExpressionStatement[24866-24884]:ExpressionStatement[24866-24884]"
  }, {
    "left" : "typeable = false;",
    "right" : "typeable = false;",
    "info" : "ExpressionStatement[24893-24910]:ExpressionStatement[24893-24910]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[24919-24925]:BreakStatement[24919-24925]"
  }, {
    "left" : "case Token.ASSIGN_LSH:",
    "right" : "case Token.ASSIGN_LSH:",
    "info" : "SwitchCase[24933-24955]:SwitchCase[24933-24955]"
  }, {
    "left" : "case Token.ASSIGN_RSH:",
    "right" : "case Token.ASSIGN_RSH:",
    "info" : "SwitchCase[24962-24984]:SwitchCase[24962-24984]"
  }, {
    "left" : "case Token.ASSIGN_URSH:",
    "right" : "case Token.ASSIGN_URSH:",
    "info" : "SwitchCase[24991-25014]:SwitchCase[24991-25014]"
  }, {
    "left" : "case Token.ASSIGN_DIV:",
    "right" : "case Token.ASSIGN_DIV:",
    "info" : "SwitchCase[25021-25043]:SwitchCase[25021-25043]"
  }, {
    "left" : "case Token.ASSIGN_MOD:",
    "right" : "case Token.ASSIGN_MOD:",
    "info" : "SwitchCase[25050-25072]:SwitchCase[25050-25072]"
  }, {
    "left" : "case Token.ASSIGN_BITOR:",
    "right" : "case Token.ASSIGN_BITOR:",
    "info" : "SwitchCase[25079-25103]:SwitchCase[25079-25103]"
  }, {
    "left" : "case Token.ASSIGN_BITXOR:",
    "right" : "case Token.ASSIGN_BITXOR:",
    "info" : "SwitchCase[25110-25135]:SwitchCase[25110-25135]"
  }, {
    "left" : "case Token.ASSIGN_BITAND:",
    "right" : "case Token.ASSIGN_BITAND:",
    "info" : "SwitchCase[25142-25167]:SwitchCase[25142-25167]"
  }, {
    "left" : "case Token.ASSIGN_SUB:",
    "right" : "case Token.ASSIGN_SUB:",
    "info" : "SwitchCase[25174-25196]:SwitchCase[25174-25196]"
  }, {
    "left" : "case Token.ASSIGN_ADD:",
    "right" : "case Token.ASSIGN_ADD:",
    "info" : "SwitchCase[25203-25225]:SwitchCase[25203-25225]"
  }, {
    "left" : "case Token.ASSIGN_MUL:",
    "right" : "case Token.ASSIGN_MUL:",
    "info" : "SwitchCase[25232-25254]:SwitchCase[25232-25254]"
  }, {
    "left" : "checkPropCreation(t, n.getFirstChild());",
    "right" : "checkPropCreation(t, n.getFirstChild());",
    "info" : "ExpressionStatement[25263-25303]:ExpressionStatement[25263-25303]"
  }, {
    "left" : "case Token.LSH:",
    "right" : "case Token.LSH:",
    "info" : "SwitchCase[25335-25350]:SwitchCase[25335-25350]"
  }, {
    "left" : "case Token.RSH:",
    "right" : "case Token.RSH:",
    "info" : "SwitchCase[25357-25372]:SwitchCase[25357-25372]"
  }, {
    "left" : "case Token.URSH:",
    "right" : "case Token.URSH:",
    "info" : "SwitchCase[25379-25395]:SwitchCase[25379-25395]"
  }, {
    "left" : "case Token.DIV:",
    "right" : "case Token.DIV:",
    "info" : "SwitchCase[25402-25417]:SwitchCase[25402-25417]"
  }, {
    "left" : "case Token.MOD:",
    "right" : "case Token.MOD:",
    "info" : "SwitchCase[25424-25439]:SwitchCase[25424-25439]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[25446-25463]:SwitchCase[25446-25463]"
  }, {
    "left" : "case Token.BITXOR:",
    "right" : "case Token.BITXOR:",
    "info" : "SwitchCase[25470-25488]:SwitchCase[25470-25488]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[25495-25513]:SwitchCase[25495-25513]"
  }, {
    "left" : "case Token.SUB:",
    "right" : "case Token.SUB:",
    "info" : "SwitchCase[25520-25535]:SwitchCase[25520-25535]"
  }, {
    "left" : "case Token.ADD:",
    "right" : "case Token.ADD:",
    "info" : "SwitchCase[25542-25557]:SwitchCase[25542-25557]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[25564-25579]:SwitchCase[25564-25579]"
  }, {
    "left" : "visitBinaryOperator(n.getType(), t, n);",
    "right" : "visitBinaryOperator(n.getType(), t, n);",
    "info" : "ExpressionStatement[25588-25627]:ExpressionStatement[25588-25627]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[25636-25642]:BreakStatement[25636-25642]"
  }, {
    "left" : "case Token.DELPROP:",
    "right" : "case Token.DELPROP:",
    "info" : "SwitchCase[25650-25669]:SwitchCase[25650-25669]"
  }, {
    "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "info" : "ExpressionStatement[25678-25710]:ExpressionStatement[25678-25710]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[25719-25725]:BreakStatement[25719-25725]"
  }, {
    "left" : "case Token.CASE:",
    "right" : "case Token.CASE:",
    "info" : "SwitchCase[25733-25749]:SwitchCase[25733-25749]"
  }, {
    "left" : "JSType switchType = getJSType(parent.getFirstChild());",
    "right" : "JSType switchType = getJSType(parent.getFirstChild());",
    "info" : "VariableDeclarationStatement[25758-25812]:VariableDeclarationStatement[25758-25812]"
  }, {
    "left" : "JSType caseType = getJSType(n.getFirstChild());",
    "right" : "JSType caseType = getJSType(n.getFirstChild());",
    "info" : "VariableDeclarationStatement[25821-25868]:VariableDeclarationStatement[25821-25868]"
  }, {
    "left" : "validator.expectSwitchMatchesCase(t, n, switchType, caseType);",
    "right" : "validator.expectSwitchMatchesCase(t, n, switchType, caseType);",
    "info" : "ExpressionStatement[25877-25939]:ExpressionStatement[25877-25939]"
  }, {
    "left" : "typeable = false;",
    "right" : "typeable = false;",
    "info" : "ExpressionStatement[25948-25965]:ExpressionStatement[25948-25965]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[25974-25980]:BreakStatement[25974-25980]"
  }, {
    "left" : "case Token.WITH:",
    "right" : "case Token.WITH:",
    "info" : "SwitchCase[25988-26004]:SwitchCase[25988-26004]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26005-26213]:Block[26005-26213]"
  }, {
    "left" : "Node child = n.getFirstChild();",
    "right" : "Node child = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[26015-26046]:VariableDeclarationStatement[26015-26046]"
  }, {
    "left" : "childType = getJSType(child);",
    "right" : "childType = getJSType(child);",
    "info" : "ExpressionStatement[26055-26084]:ExpressionStatement[26055-26084]"
  }, {
    "left" : "validator.expectObject(t, child, childType, \"with requires an object\");",
    "right" : "validator.expectObject(t, child, childType, \"with requires an object\");",
    "info" : "ExpressionStatement[26093-26164]:ExpressionStatement[26093-26164]"
  }, {
    "left" : "typeable = false;",
    "right" : "typeable = false;",
    "info" : "ExpressionStatement[26173-26190]:ExpressionStatement[26173-26190]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[26199-26205]:BreakStatement[26199-26205]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[26221-26241]:SwitchCase[26221-26241]"
  }, {
    "left" : "visitFunction(t, n);",
    "right" : "visitFunction(t, n);",
    "info" : "ExpressionStatement[26250-26270]:ExpressionStatement[26250-26270]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[26279-26285]:BreakStatement[26279-26285]"
  }, {
    "left" : "case Token.LABEL:",
    "right" : "case Token.LABEL:",
    "info" : "SwitchCase[26349-26366]:SwitchCase[26349-26366]"
  }, {
    "left" : "case Token.LABEL_NAME:",
    "right" : "case Token.LABEL_NAME:",
    "info" : "SwitchCase[26373-26395]:SwitchCase[26373-26395]"
  }, {
    "left" : "case Token.SWITCH:",
    "right" : "case Token.SWITCH:",
    "info" : "SwitchCase[26402-26420]:SwitchCase[26402-26420]"
  }, {
    "left" : "case Token.BREAK:",
    "right" : "case Token.BREAK:",
    "info" : "SwitchCase[26427-26444]:SwitchCase[26427-26444]"
  }, {
    "left" : "case Token.CATCH:",
    "right" : "case Token.CATCH:",
    "info" : "SwitchCase[26451-26468]:SwitchCase[26451-26468]"
  }, {
    "left" : "case Token.TRY:",
    "right" : "case Token.TRY:",
    "info" : "SwitchCase[26475-26490]:SwitchCase[26475-26490]"
  }, {
    "left" : "case Token.SCRIPT:",
    "right" : "case Token.SCRIPT:",
    "info" : "SwitchCase[26497-26515]:SwitchCase[26497-26515]"
  }, {
    "left" : "case Token.EXPR_RESULT:",
    "right" : "case Token.EXPR_RESULT:",
    "info" : "SwitchCase[26522-26545]:SwitchCase[26522-26545]"
  }, {
    "left" : "case Token.BLOCK:",
    "right" : "case Token.BLOCK:",
    "info" : "SwitchCase[26552-26569]:SwitchCase[26552-26569]"
  }, {
    "left" : "case Token.EMPTY:",
    "right" : "case Token.EMPTY:",
    "info" : "SwitchCase[26576-26593]:SwitchCase[26576-26593]"
  }, {
    "left" : "case Token.DEFAULT_CASE:",
    "right" : "case Token.DEFAULT_CASE:",
    "info" : "SwitchCase[26600-26624]:SwitchCase[26600-26624]"
  }, {
    "left" : "case Token.CONTINUE:",
    "right" : "case Token.CONTINUE:",
    "info" : "SwitchCase[26631-26651]:SwitchCase[26631-26651]"
  }, {
    "left" : "case Token.DEBUGGER:",
    "right" : "case Token.DEBUGGER:",
    "info" : "SwitchCase[26658-26678]:SwitchCase[26658-26678]"
  }, {
    "left" : "case Token.THROW:",
    "right" : "case Token.THROW:",
    "info" : "SwitchCase[26685-26702]:SwitchCase[26685-26702]"
  }, {
    "left" : "typeable = false;",
    "right" : "typeable = false;",
    "info" : "ExpressionStatement[26711-26728]:ExpressionStatement[26711-26728]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[26737-26743]:BreakStatement[26737-26743]"
  }, {
    "left" : "case Token.DO:",
    "right" : "case Token.DO:",
    "info" : "SwitchCase[26800-26814]:SwitchCase[26800-26814]"
  }, {
    "left" : "case Token.IF:",
    "right" : "case Token.IF:",
    "info" : "SwitchCase[26821-26835]:SwitchCase[26821-26835]"
  }, {
    "left" : "case Token.WHILE:",
    "right" : "case Token.WHILE:",
    "info" : "SwitchCase[26842-26859]:SwitchCase[26842-26859]"
  }, {
    "left" : "typeable = false;",
    "right" : "typeable = false;",
    "info" : "ExpressionStatement[26868-26885]:ExpressionStatement[26868-26885]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[26894-26900]:BreakStatement[26894-26900]"
  }, {
    "left" : "case Token.FOR:",
    "right" : "case Token.FOR:",
    "info" : "SwitchCase[26908-26923]:SwitchCase[26908-26923]"
  }, {
    "left" : "if (NodeUtil.isForIn(n))",
    "right" : "if (NodeUtil.isForIn(n))",
    "info" : "IfStatement[26932-27115]:IfStatement[26932-27115]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26957-27115]:Block[26957-27115]"
  }, {
    "left" : "Node obj = n.getChildAtIndex(1);",
    "right" : "Node obj = n.getChildAtIndex(1);",
    "info" : "VariableDeclarationStatement[26969-27001]:VariableDeclarationStatement[26969-27001]"
  }, {
    "left" : "if (getJSType(obj).isStruct())",
    "right" : "if (getJSType(obj).isStruct())",
    "info" : "IfStatement[27012-27105]:IfStatement[27012-27105]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27043-27105]:Block[27043-27105]"
  }, {
    "left" : "report(t, obj, IN_USED_WITH_STRUCT);",
    "right" : "report(t, obj, IN_USED_WITH_STRUCT);",
    "info" : "ExpressionStatement[27057-27093]:ExpressionStatement[27057-27093]"
  }, {
    "left" : "typeable = false;",
    "right" : "typeable = false;",
    "info" : "ExpressionStatement[27124-27141]:ExpressionStatement[27124-27141]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[27150-27156]:BreakStatement[27150-27156]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[27222-27237]:SwitchCase[27222-27237]"
  }, {
    "left" : "case Token.HOOK:",
    "right" : "case Token.HOOK:",
    "info" : "SwitchCase[27244-27260]:SwitchCase[27244-27260]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[27267-27288]:SwitchCase[27267-27288]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[27295-27309]:SwitchCase[27295-27309]"
  }, {
    "left" : "if (n.getJSType() != null)",
    "right" : "if (n.getJSType() != null)",
    "info" : "IfStatement[27318-27723]:IfStatement[27318-27723]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27345-27421]:Block[27345-27421]"
  }, {
    "left" : "ensureTyped(t, n);",
    "right" : "ensureTyped(t, n);",
    "info" : "ExpressionStatement[27393-27411]:ExpressionStatement[27393-27411]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27427-27723]:Block[27427-27723]"
  }, {
    "left" : "if ((n.isObjectLit())\n              && (parent.getJSType() instanceof EnumType))",
    "right" : "if ((n.isObjectLit())\n              && (parent.getJSType() instanceof EnumType))",
    "info" : "IfStatement[27518-27713]:IfStatement[27518-27713]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27599-27663]:Block[27599-27663]"
  }, {
    "left" : "ensureTyped(t, n, parent.getJSType());",
    "right" : "ensureTyped(t, n, parent.getJSType());",
    "info" : "ExpressionStatement[27613-27651]:ExpressionStatement[27613-27651]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27669-27713]:Block[27669-27713]"
  }, {
    "left" : "ensureTyped(t, n);",
    "right" : "ensureTyped(t, n);",
    "info" : "ExpressionStatement[27683-27701]:ExpressionStatement[27683-27701]"
  }, {
    "left" : "if (n.isObjectLit())",
    "right" : "if (n.isObjectLit())",
    "info" : "IfStatement[27732-27899]:IfStatement[27732-27899]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27753-27899]:Block[27753-27899]"
  }, {
    "left" : "JSType typ = getJSType(n);",
    "right" : "JSType typ = getJSType(n);",
    "info" : "VariableDeclarationStatement[27765-27791]:VariableDeclarationStatement[27765-27791]"
  }, {
    "left" : "for (Node key : n.children())",
    "right" : "for (Node key : n.children())",
    "info" : "EnhancedForStatement[27802-27889]:EnhancedForStatement[27802-27889]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27832-27889]:Block[27832-27889]"
  }, {
    "left" : "visitObjLitKey(t, key, n, typ);",
    "right" : "visitObjLitKey(t, key, n, typ);",
    "info" : "ExpressionStatement[27846-27877]:ExpressionStatement[27846-27877]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[27908-27914]:BreakStatement[27908-27914]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[27922-27930]:SwitchCase[27922-27930]"
  }, {
    "left" : "report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));",
    "right" : "report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));",
    "info" : "ExpressionStatement[27939-27995]:ExpressionStatement[27939-27995]"
  }, {
    "left" : "ensureTyped(t, n);",
    "right" : "ensureTyped(t, n);",
    "info" : "ExpressionStatement[28004-28022]:ExpressionStatement[28004-28022]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[28031-28037]:BreakStatement[28031-28037]"
  }, {
    "left" : "typeable = typeable && !inExterns;",
    "right" : "typeable = typeable && !inExterns;",
    "info" : "ExpressionStatement[28126-28160]:ExpressionStatement[28126-28160]"
  }, {
    "left" : "if (typeable)",
    "right" : "if (typeable)",
    "info" : "IfStatement[28166-28225]:IfStatement[28166-28225]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28180-28225]:Block[28180-28225]"
  }, {
    "left" : "doPercentTypedAccounting(t, n);",
    "right" : "doPercentTypedAccounting(t, n);",
    "info" : "ExpressionStatement[28188-28219]:ExpressionStatement[28188-28219]"
  }, {
    "left" : "checkNoTypeCheckSection(n, false);",
    "right" : "checkNoTypeCheckSection(n, false);",
    "info" : "ExpressionStatement[28231-28265]:ExpressionStatement[28231-28265]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[28273-28280]:Modifier[28273-28280]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[28281-28285]:PrimitiveType[28281-28285]"
  }, {
    "left" : "checkTypeofString",
    "right" : "checkTypeofString",
    "info" : "SimpleName[28286-28303]:SimpleName[28286-28303]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[28304-28319]:SingleVariableDeclaration[28304-28319]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[28321-28327]:SingleVariableDeclaration[28321-28327]"
  }, {
    "left" : "String s",
    "right" : "String s",
    "info" : "SingleVariableDeclaration[28329-28337]:SingleVariableDeclaration[28329-28337]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28339-28590]:Block[28339-28590]"
  }, {
    "left" : "if (!(s.equals(\"number\") || s.equals(\"string\") || s.equals(\"boolean\") ||\n          s.equals(\"undefined\") || s.equals(\"function\") ||\n          s.equals(\"object\") || s.equals(\"unknown\")))",
    "right" : "if (!(s.equals(\"number\") || s.equals(\"string\") || s.equals(\"boolean\") ||\n          s.equals(\"undefined\") || s.equals(\"function\") ||\n          s.equals(\"object\") || s.equals(\"unknown\")))",
    "info" : "IfStatement[28345-28586]:IfStatement[28345-28586]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28531-28586]:Block[28531-28586]"
  }, {
    "left" : "validator.expectValidTypeofName(t, n, s);",
    "right" : "validator.expectValidTypeofName(t, n, s);",
    "info" : "ExpressionStatement[28539-28580]:ExpressionStatement[28539-28580]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[28700-28707]:Modifier[28700-28707]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[28708-28712]:PrimitiveType[28708-28712]"
  }, {
    "left" : "doPercentTypedAccounting",
    "right" : "doPercentTypedAccounting",
    "info" : "SimpleName[28713-28737]:SimpleName[28713-28737]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[28738-28753]:SingleVariableDeclaration[28738-28753]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[28755-28761]:SingleVariableDeclaration[28755-28761]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28763-29084]:Block[28763-29084]"
  }, {
    "left" : "JSType type = n.getJSType();",
    "right" : "JSType type = n.getJSType();",
    "info" : "VariableDeclarationStatement[28769-28797]:VariableDeclarationStatement[28769-28797]"
  }, {
    "left" : "if (type == null)",
    "right" : "if (type == null)",
    "info" : "IfStatement[28802-29080]:IfStatement[28802-29080]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28820-28846]:Block[28820-28846]"
  }, {
    "left" : "nullCount++;",
    "right" : "nullCount++;",
    "info" : "ExpressionStatement[28828-28840]:ExpressionStatement[28828-28840]"
  }, {
    "left" : "if (type.isUnknownType())",
    "right" : "if (type.isUnknownType())",
    "info" : "IfStatement[28852-29080]:IfStatement[28852-29080]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28878-29047]:Block[28878-29047]"
  }, {
    "left" : "if (reportUnknownTypes.isOn())",
    "right" : "if (reportUnknownTypes.isOn())",
    "info" : "IfStatement[28886-29019]:IfStatement[28886-29019]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28917-29019]:Block[28917-29019]"
  }, {
    "left" : "compiler.report(\n            t.makeError(n, reportUnknownTypes, UNKNOWN_EXPR_TYPE));",
    "right" : "compiler.report(\n            t.makeError(n, reportUnknownTypes, UNKNOWN_EXPR_TYPE));",
    "info" : "ExpressionStatement[28927-29011]:ExpressionStatement[28927-29011]"
  }, {
    "left" : "unknownCount++;",
    "right" : "unknownCount++;",
    "info" : "ExpressionStatement[29026-29041]:ExpressionStatement[29026-29041]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29053-29080]:Block[29053-29080]"
  }, {
    "left" : "typedCount++;",
    "right" : "typedCount++;",
    "info" : "ExpressionStatement[29061-29074]:ExpressionStatement[29061-29074]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[29408-29415]:Modifier[29408-29415]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[29416-29420]:PrimitiveType[29416-29420]"
  }, {
    "left" : "visitAssign",
    "right" : "visitAssign",
    "info" : "SimpleName[29421-29432]:SimpleName[29421-29432]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[29433-29448]:SingleVariableDeclaration[29433-29448]"
  }, {
    "left" : "Node assign",
    "right" : "Node assign",
    "info" : "SingleVariableDeclaration[29450-29461]:SingleVariableDeclaration[29450-29461]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29463-33756]:Block[29463-33756]"
  }, {
    "left" : "JSDocInfo info = assign.getJSDocInfo();",
    "right" : "JSDocInfo info = assign.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[29469-29508]:VariableDeclarationStatement[29469-29508]"
  }, {
    "left" : "Node lvalue = assign.getFirstChild();",
    "right" : "Node lvalue = assign.getFirstChild();",
    "info" : "VariableDeclarationStatement[29513-29550]:VariableDeclarationStatement[29513-29550]"
  }, {
    "left" : "Node rvalue = assign.getLastChild();",
    "right" : "Node rvalue = assign.getLastChild();",
    "info" : "VariableDeclarationStatement[29555-29591]:VariableDeclarationStatement[29555-29591]"
  }, {
    "left" : "if (lvalue.isGetProp())",
    "right" : "if (lvalue.isGetProp())",
    "info" : "IfStatement[29669-32530]:IfStatement[29669-32530]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29693-32530]:Block[29693-32530]"
  }, {
    "left" : "Node object = lvalue.getFirstChild();",
    "right" : "Node object = lvalue.getFirstChild();",
    "info" : "VariableDeclarationStatement[29701-29738]:VariableDeclarationStatement[29701-29738]"
  }, {
    "left" : "JSType objectJsType = getJSType(object);",
    "right" : "JSType objectJsType = getJSType(object);",
    "info" : "VariableDeclarationStatement[29745-29785]:VariableDeclarationStatement[29745-29785]"
  }, {
    "left" : "Node property = lvalue.getLastChild();",
    "right" : "Node property = lvalue.getLastChild();",
    "info" : "VariableDeclarationStatement[29792-29830]:VariableDeclarationStatement[29792-29830]"
  }, {
    "left" : "String pname = property.getString();",
    "right" : "String pname = property.getString();",
    "info" : "VariableDeclarationStatement[29837-29873]:VariableDeclarationStatement[29837-29873]"
  }, {
    "left" : "if (object.isGetProp())",
    "right" : "if (object.isGetProp())",
    "info" : "IfStatement[30001-30283]:IfStatement[30001-30283]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30025-30283]:Block[30025-30283]"
  }, {
    "left" : "JSType jsType = getJSType(object.getFirstChild());",
    "right" : "JSType jsType = getJSType(object.getFirstChild());",
    "info" : "VariableDeclarationStatement[30035-30085]:VariableDeclarationStatement[30035-30085]"
  }, {
    "left" : "if (jsType.isInterface() &&\n            object.getLastChild().getString().equals(\"prototype\"))",
    "right" : "if (jsType.isInterface() &&\n            object.getLastChild().getString().equals(\"prototype\"))",
    "info" : "IfStatement[30094-30275]:IfStatement[30094-30275]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30189-30275]:Block[30189-30275]"
  }, {
    "left" : "visitInterfaceGetprop(t, assign, object, pname, lvalue, rvalue);",
    "right" : "visitInterfaceGetprop(t, assign, object, pname, lvalue, rvalue);",
    "info" : "ExpressionStatement[30201-30265]:ExpressionStatement[30201-30265]"
  }, {
    "left" : "checkEnumAlias(t, info, rvalue);",
    "right" : "checkEnumAlias(t, info, rvalue);",
    "info" : "ExpressionStatement[30291-30323]:ExpressionStatement[30291-30323]"
  }, {
    "left" : "checkPropCreation(t, lvalue);",
    "right" : "checkPropCreation(t, lvalue);",
    "info" : "ExpressionStatement[30330-30359]:ExpressionStatement[30330-30359]"
  }, {
    "left" : "if (pname.equals(\"prototype\"))",
    "right" : "if (pname.equals(\"prototype\"))",
    "info" : "IfStatement[30615-31427]:IfStatement[30615-31427]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30646-31427]:Block[30646-31427]"
  }, {
    "left" : "if (objectJsType != null && objectJsType.isFunctionType())",
    "right" : "if (objectJsType != null && objectJsType.isFunctionType())",
    "info" : "IfStatement[30656-31419]:IfStatement[30656-31419]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30715-31419]:Block[30715-31419]"
  }, {
    "left" : "FunctionType functionType = objectJsType.toMaybeFunctionType();",
    "right" : "FunctionType functionType = objectJsType.toMaybeFunctionType();",
    "info" : "VariableDeclarationStatement[30727-30790]:VariableDeclarationStatement[30727-30790]"
  }, {
    "left" : "if (functionType.isConstructor())",
    "right" : "if (functionType.isConstructor())",
    "info" : "IfStatement[30801-31409]:IfStatement[30801-31409]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30835-31409]:Block[30835-31409]"
  }, {
    "left" : "JSType rvalueType = rvalue.getJSType();",
    "right" : "JSType rvalueType = rvalue.getJSType();",
    "info" : "VariableDeclarationStatement[30849-30888]:VariableDeclarationStatement[30849-30888]"
  }, {
    "left" : "validator.expectObject(t, rvalue, rvalueType,\n                OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);",
    "right" : "validator.expectObject(t, rvalue, rvalueType,\n                OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);",
    "info" : "ExpressionStatement[30901-31001]:ExpressionStatement[30901-31001]"
  }, {
    "left" : "if (functionType.makesStructs() && !rvalueType.isStruct())",
    "right" : "if (functionType.makesStructs() && !rvalueType.isStruct())",
    "info" : "IfStatement[31091-31377]:IfStatement[31091-31377]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31150-31377]:Block[31150-31377]"
  }, {
    "left" : "String funName = functionType.getTypeOfThis().toString();",
    "right" : "String funName = functionType.getTypeOfThis().toString();",
    "info" : "VariableDeclarationStatement[31166-31223]:VariableDeclarationStatement[31166-31223]"
  }, {
    "left" : "compiler.report(t.makeError(assign, CONFLICTING_EXTENDED_TYPE,\n                                          \"struct\", funName));",
    "right" : "compiler.report(t.makeError(assign, CONFLICTING_EXTENDED_TYPE,\n                                          \"struct\", funName));",
    "info" : "ExpressionStatement[31238-31363]:ExpressionStatement[31238-31363]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[31390-31397]:ReturnStatement[31390-31397]"
  }, {
    "left" : "ObjectType type = ObjectType.cast(\n          objectJsType.restrictByNotNullOrUndefined());",
    "right" : "ObjectType type = ObjectType.cast(\n          objectJsType.restrictByNotNullOrUndefined());",
    "info" : "VariableDeclarationStatement[31584-31674]:VariableDeclarationStatement[31584-31674]"
  }, {
    "left" : "if (type != null)",
    "right" : "if (type != null)",
    "info" : "IfStatement[31681-32259]:IfStatement[31681-32259]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31699-32259]:Block[31699-32259]"
  }, {
    "left" : "if (type.hasProperty(pname) &&\n            !type.isPropertyTypeInferred(pname) &&\n            !propertyIsImplicitCast(type, pname))",
    "right" : "if (type.hasProperty(pname) &&\n            !type.isPropertyTypeInferred(pname) &&\n            !propertyIsImplicitCast(type, pname))",
    "info" : "IfStatement[31709-32251]:IfStatement[31709-32251]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31841-32251]:Block[31841-32251]"
  }, {
    "left" : "JSType expectedType = type.getPropertyType(pname);",
    "right" : "JSType expectedType = type.getPropertyType(pname);",
    "info" : "VariableDeclarationStatement[31853-31903]:VariableDeclarationStatement[31853-31903]"
  }, {
    "left" : "if (!expectedType.isUnknownType())",
    "right" : "if (!expectedType.isUnknownType())",
    "info" : "IfStatement[31914-32241]:IfStatement[31914-32241]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31949-32241]:Block[31949-32241]"
  }, {
    "left" : "validator.expectCanAssignToPropertyOf(\n                t, assign, getJSType(rvalue),\n                expectedType, object, pname);",
    "right" : "validator.expectCanAssignToPropertyOf(\n                t, assign, getJSType(rvalue),\n                expectedType, object, pname);",
    "info" : "ExpressionStatement[31963-32093]:ExpressionStatement[31963-32093]"
  }, {
    "left" : "checkPropertyInheritanceOnGetpropAssign(\n                t, assign, object, pname, info, expectedType);",
    "right" : "checkPropertyInheritanceOnGetpropAssign(\n                t, assign, object, pname, info, expectedType);",
    "info" : "ExpressionStatement[32106-32209]:ExpressionStatement[32106-32209]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[32222-32229]:ReturnStatement[32222-32229]"
  }, {
    "left" : "checkPropertyInheritanceOnGetpropAssign(\n          t, assign, object, pname, info, getNativeType(UNKNOWN_TYPE));",
    "right" : "checkPropertyInheritanceOnGetpropAssign(\n          t, assign, object, pname, info, getNativeType(UNKNOWN_TYPE));",
    "info" : "ExpressionStatement[32412-32524]:ExpressionStatement[32412-32524]"
  }, {
    "left" : "JSType leftType = getJSType(lvalue);",
    "right" : "JSType leftType = getJSType(lvalue);",
    "info" : "VariableDeclarationStatement[32779-32815]:VariableDeclarationStatement[32779-32815]"
  }, {
    "left" : "if (lvalue.isQualifiedName())",
    "right" : "if (lvalue.isQualifiedName())",
    "info" : "IfStatement[32820-33410]:IfStatement[32820-33410]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32850-33410]:Block[32850-33410]"
  }, {
    "left" : "JSType rvalueType = getJSType(assign.getLastChild());",
    "right" : "JSType rvalueType = getJSType(assign.getLastChild());",
    "info" : "VariableDeclarationStatement[32900-32953]:VariableDeclarationStatement[32900-32953]"
  }, {
    "left" : "Var var = t.getScope().getVar(lvalue.getQualifiedName());",
    "right" : "Var var = t.getScope().getVar(lvalue.getQualifiedName());",
    "info" : "VariableDeclarationStatement[32960-33017]:VariableDeclarationStatement[32960-33017]"
  }, {
    "left" : "if (var != null)",
    "right" : "if (var != null)",
    "info" : "IfStatement[33024-33404]:IfStatement[33024-33404]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33041-33404]:Block[33041-33404]"
  }, {
    "left" : "if (var.isTypeInferred())",
    "right" : "if (var.isTypeInferred())",
    "info" : "IfStatement[33051-33106]:IfStatement[33051-33106]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33077-33106]:Block[33077-33106]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[33089-33096]:ReturnStatement[33089-33096]"
  }, {
    "left" : "if (NodeUtil.getRootOfQualifiedName(lvalue).isThis() &&\n            t.getScope() != var.getScope())",
    "right" : "if (NodeUtil.getRootOfQualifiedName(lvalue).isThis() &&\n            t.getScope() != var.getScope())",
    "info" : "IfStatement[33116-33312]:IfStatement[33116-33312]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33216-33312]:Block[33216-33312]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[33295-33302]:ReturnStatement[33295-33302]"
  }, {
    "left" : "if (var.getType() != null)",
    "right" : "if (var.getType() != null)",
    "info" : "IfStatement[33322-33396]:IfStatement[33322-33396]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33349-33396]:Block[33349-33396]"
  }, {
    "left" : "leftType = var.getType();",
    "right" : "leftType = var.getType();",
    "info" : "ExpressionStatement[33361-33386]:ExpressionStatement[33361-33386]"
  }, {
    "left" : "Node rightChild = assign.getLastChild();",
    "right" : "Node rightChild = assign.getLastChild();",
    "info" : "VariableDeclarationStatement[33478-33518]:VariableDeclarationStatement[33478-33518]"
  }, {
    "left" : "JSType rightType = getJSType(rightChild);",
    "right" : "JSType rightType = getJSType(rightChild);",
    "info" : "VariableDeclarationStatement[33523-33564]:VariableDeclarationStatement[33523-33564]"
  }, {
    "left" : "if (validator.expectCanAssignTo(\n            t, assign, rightType, leftType, \"assignment\"))",
    "right" : "if (validator.expectCanAssignTo(\n            t, assign, rightType, leftType, \"assignment\"))",
    "info" : "IfStatement[33569-33752]:IfStatement[33569-33752]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33661-33709]:Block[33661-33709]"
  }, {
    "left" : "ensureTyped(t, assign, rightType);",
    "right" : "ensureTyped(t, assign, rightType);",
    "info" : "ExpressionStatement[33669-33703]:ExpressionStatement[33669-33703]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33715-33752]:Block[33715-33752]"
  }, {
    "left" : "ensureTyped(t, assign);",
    "right" : "ensureTyped(t, assign);",
    "info" : "ExpressionStatement[33723-33746]:ExpressionStatement[33723-33746]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[33823-33830]:Modifier[33823-33830]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[33831-33835]:PrimitiveType[33831-33835]"
  }, {
    "left" : "checkPropCreation",
    "right" : "checkPropCreation",
    "info" : "SimpleName[33836-33853]:SimpleName[33836-33853]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[33854-33869]:SingleVariableDeclaration[33854-33869]"
  }, {
    "left" : "Node lvalue",
    "right" : "Node lvalue",
    "info" : "SingleVariableDeclaration[33871-33882]:SingleVariableDeclaration[33871-33882]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33884-34322]:Block[33884-34322]"
  }, {
    "left" : "if (lvalue.isGetProp())",
    "right" : "if (lvalue.isGetProp())",
    "info" : "IfStatement[33890-34318]:IfStatement[33890-34318]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33914-34318]:Block[33914-34318]"
  }, {
    "left" : "Node obj = lvalue.getFirstChild();",
    "right" : "Node obj = lvalue.getFirstChild();",
    "info" : "VariableDeclarationStatement[33922-33956]:VariableDeclarationStatement[33922-33956]"
  }, {
    "left" : "Node prop = lvalue.getLastChild();",
    "right" : "Node prop = lvalue.getLastChild();",
    "info" : "VariableDeclarationStatement[33963-33997]:VariableDeclarationStatement[33963-33997]"
  }, {
    "left" : "JSType objType = getJSType(obj);",
    "right" : "JSType objType = getJSType(obj);",
    "info" : "VariableDeclarationStatement[34004-34036]:VariableDeclarationStatement[34004-34036]"
  }, {
    "left" : "String pname = prop.getString();",
    "right" : "String pname = prop.getString();",
    "info" : "VariableDeclarationStatement[34043-34075]:VariableDeclarationStatement[34043-34075]"
  }, {
    "left" : "if (objType.isStruct() && !objType.hasProperty(pname))",
    "right" : "if (objType.isStruct() && !objType.hasProperty(pname))",
    "info" : "IfStatement[34082-34312]:IfStatement[34082-34312]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34137-34312]:Block[34137-34312]"
  }, {
    "left" : "if (!(obj.isThis() &&\n              getJSType(t.getScope().getRootNode()).isConstructor()))",
    "right" : "if (!(obj.isThis() &&\n              getJSType(t.getScope().getRootNode()).isConstructor()))",
    "info" : "IfStatement[34147-34304]:IfStatement[34147-34304]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34239-34304]:Block[34239-34304]"
  }, {
    "left" : "report(t, prop, ILLEGAL_PROPERTY_CREATION);",
    "right" : "report(t, prop, ILLEGAL_PROPERTY_CREATION);",
    "info" : "ExpressionStatement[34251-34294]:ExpressionStatement[34251-34294]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[34326-34333]:Modifier[34326-34333]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[34334-34338]:PrimitiveType[34334-34338]"
  }, {
    "left" : "checkPropertyInheritanceOnGetpropAssign",
    "right" : "checkPropertyInheritanceOnGetpropAssign",
    "info" : "SimpleName[34339-34378]:SimpleName[34339-34378]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[34386-34401]:SingleVariableDeclaration[34386-34401]"
  }, {
    "left" : "Node assign",
    "right" : "Node assign",
    "info" : "SingleVariableDeclaration[34403-34414]:SingleVariableDeclaration[34403-34414]"
  }, {
    "left" : "Node object",
    "right" : "Node object",
    "info" : "SingleVariableDeclaration[34416-34427]:SingleVariableDeclaration[34416-34427]"
  }, {
    "left" : "String property",
    "right" : "String property",
    "info" : "SingleVariableDeclaration[34429-34444]:SingleVariableDeclaration[34429-34444]"
  }, {
    "left" : "JSDocInfo info",
    "right" : "JSDocInfo info",
    "info" : "SingleVariableDeclaration[34452-34466]:SingleVariableDeclaration[34452-34466]"
  }, {
    "left" : "JSType propertyType",
    "right" : "JSType propertyType",
    "info" : "SingleVariableDeclaration[34468-34487]:SingleVariableDeclaration[34468-34487]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34489-35568]:Block[34489-35568]"
  }, {
    "left" : "if (object.isGetProp())",
    "right" : "if (object.isGetProp())",
    "info" : "IfStatement[34996-35564]:IfStatement[34996-35564]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35020-35564]:Block[35020-35564]"
  }, {
    "left" : "Node object2 = object.getFirstChild();",
    "right" : "Node object2 = object.getFirstChild();",
    "info" : "VariableDeclarationStatement[35028-35066]:VariableDeclarationStatement[35028-35066]"
  }, {
    "left" : "String property2 = NodeUtil.getStringValue(object.getLastChild());",
    "right" : "String property2 = NodeUtil.getStringValue(object.getLastChild());",
    "info" : "VariableDeclarationStatement[35073-35139]:VariableDeclarationStatement[35073-35139]"
  }, {
    "left" : "if (\"prototype\".equals(property2))",
    "right" : "if (\"prototype\".equals(property2))",
    "info" : "IfStatement[35147-35558]:IfStatement[35147-35558]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35182-35558]:Block[35182-35558]"
  }, {
    "left" : "JSType jsType = getJSType(object2);",
    "right" : "JSType jsType = getJSType(object2);",
    "info" : "VariableDeclarationStatement[35192-35227]:VariableDeclarationStatement[35192-35227]"
  }, {
    "left" : "if (jsType.isFunctionType())",
    "right" : "if (jsType.isFunctionType())",
    "info" : "IfStatement[35236-35550]:IfStatement[35236-35550]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35265-35550]:Block[35265-35550]"
  }, {
    "left" : "FunctionType functionType = jsType.toMaybeFunctionType();",
    "right" : "FunctionType functionType = jsType.toMaybeFunctionType();",
    "info" : "VariableDeclarationStatement[35277-35334]:VariableDeclarationStatement[35277-35334]"
  }, {
    "left" : "if (functionType.isConstructor() || functionType.isInterface())",
    "right" : "if (functionType.isConstructor() || functionType.isInterface())",
    "info" : "IfStatement[35345-35540]:IfStatement[35345-35540]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35409-35540]:Block[35409-35540]"
  }, {
    "left" : "checkDeclaredPropertyInheritance(\n                t, assign, functionType, property, info, propertyType);",
    "right" : "checkDeclaredPropertyInheritance(\n                t, assign, functionType, property, info, propertyType);",
    "info" : "ExpressionStatement[35423-35528]:ExpressionStatement[35423-35528]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[35853-35860]:Modifier[35853-35860]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[35861-35865]:PrimitiveType[35861-35865]"
  }, {
    "left" : "visitObjLitKey",
    "right" : "visitObjLitKey",
    "info" : "SimpleName[35866-35880]:SimpleName[35866-35880]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[35888-35903]:SingleVariableDeclaration[35888-35903]"
  }, {
    "left" : "Node key",
    "right" : "Node key",
    "info" : "SingleVariableDeclaration[35905-35913]:SingleVariableDeclaration[35905-35913]"
  }, {
    "left" : "Node objlit",
    "right" : "Node objlit",
    "info" : "SingleVariableDeclaration[35915-35926]:SingleVariableDeclaration[35915-35926]"
  }, {
    "left" : "JSType litType",
    "right" : "JSType litType",
    "info" : "SingleVariableDeclaration[35928-35942]:SingleVariableDeclaration[35928-35942]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35944-38278]:Block[35944-38278]"
  }, {
    "left" : "if (objlit.isFromExterns())",
    "right" : "if (objlit.isFromExterns())",
    "info" : "IfStatement[36081-36157]:IfStatement[36081-36157]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36109-36157]:Block[36109-36157]"
  }, {
    "left" : "ensureTyped(t, key);",
    "right" : "ensureTyped(t, key);",
    "info" : "ExpressionStatement[36117-36137]:ExpressionStatement[36117-36137]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[36144-36151]:ReturnStatement[36144-36151]"
  }, {
    "left" : "if (litType.isStruct() && key.isQuotedString())",
    "right" : "if (litType.isStruct() && key.isQuotedString())",
    "info" : "IfStatement[36234-36451]:IfStatement[36234-36451]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36282-36341]:Block[36282-36341]"
  }, {
    "left" : "report(t, key, ILLEGAL_OBJLIT_KEY, \"struct\");",
    "right" : "report(t, key, ILLEGAL_OBJLIT_KEY, \"struct\");",
    "info" : "ExpressionStatement[36290-36335]:ExpressionStatement[36290-36335]"
  }, {
    "left" : "if (litType.isDict() && !key.isQuotedString())",
    "right" : "if (litType.isDict() && !key.isQuotedString())",
    "info" : "IfStatement[36347-36451]:IfStatement[36347-36451]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36394-36451]:Block[36394-36451]"
  }, {
    "left" : "report(t, key, ILLEGAL_OBJLIT_KEY, \"dict\");",
    "right" : "report(t, key, ILLEGAL_OBJLIT_KEY, \"dict\");",
    "info" : "ExpressionStatement[36402-36445]:ExpressionStatement[36402-36445]"
  }, {
    "left" : "Node rvalue = key.getFirstChild();",
    "right" : "Node rvalue = key.getFirstChild();",
    "info" : "VariableDeclarationStatement[36685-36719]:VariableDeclarationStatement[36685-36719]"
  }, {
    "left" : "JSType rightType = NodeUtil.getObjectLitKeyTypeFromValueType(\n        key, getJSType(rvalue));",
    "right" : "JSType rightType = NodeUtil.getObjectLitKeyTypeFromValueType(\n        key, getJSType(rvalue));",
    "info" : "VariableDeclarationStatement[36724-36818]:VariableDeclarationStatement[36724-36818]"
  }, {
    "left" : "if (rightType == null)",
    "right" : "if (rightType == null)",
    "info" : "IfStatement[36823-36900]:IfStatement[36823-36900]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36846-36900]:Block[36846-36900]"
  }, {
    "left" : "rightType = getNativeType(UNKNOWN_TYPE);",
    "right" : "rightType = getNativeType(UNKNOWN_TYPE);",
    "info" : "ExpressionStatement[36854-36894]:ExpressionStatement[36854-36894]"
  }, {
    "left" : "Node owner = objlit;",
    "right" : "Node owner = objlit;",
    "info" : "VariableDeclarationStatement[36906-36926]:VariableDeclarationStatement[36906-36926]"
  }, {
    "left" : "JSType keyType = getJSType(key);",
    "right" : "JSType keyType = getJSType(key);",
    "info" : "VariableDeclarationStatement[36986-37018]:VariableDeclarationStatement[36986-37018]"
  }, {
    "left" : "JSType allowedValueType = keyType;",
    "right" : "JSType allowedValueType = keyType;",
    "info" : "VariableDeclarationStatement[37024-37058]:VariableDeclarationStatement[37024-37058]"
  }, {
    "left" : "if (allowedValueType.isEnumElementType())",
    "right" : "if (allowedValueType.isEnumElementType())",
    "info" : "IfStatement[37063-37209]:IfStatement[37063-37209]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37105-37209]:Block[37105-37209]"
  }, {
    "left" : "allowedValueType =\n          allowedValueType.toMaybeEnumElementType().getPrimitiveType();",
    "right" : "allowedValueType =\n          allowedValueType.toMaybeEnumElementType().getPrimitiveType();",
    "info" : "ExpressionStatement[37113-37203]:ExpressionStatement[37113-37203]"
  }, {
    "left" : "boolean valid = validator.expectCanAssignToPropertyOf(t, key,\n        rightType, allowedValueType,\n        owner, NodeUtil.getObjectLitKeyName(key));",
    "right" : "boolean valid = validator.expectCanAssignToPropertyOf(t, key,\n        rightType, allowedValueType,\n        owner, NodeUtil.getObjectLitKeyName(key));",
    "info" : "VariableDeclarationStatement[37215-37364]:VariableDeclarationStatement[37215-37364]"
  }, {
    "left" : "if (valid)",
    "right" : "if (valid)",
    "info" : "IfStatement[37369-37465]:IfStatement[37369-37465]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37380-37425]:Block[37380-37425]"
  }, {
    "left" : "ensureTyped(t, key, rightType);",
    "right" : "ensureTyped(t, key, rightType);",
    "info" : "ExpressionStatement[37388-37419]:ExpressionStatement[37388-37419]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37431-37465]:Block[37431-37465]"
  }, {
    "left" : "ensureTyped(t, key);",
    "right" : "ensureTyped(t, key);",
    "info" : "ExpressionStatement[37439-37459]:ExpressionStatement[37439-37459]"
  }, {
    "left" : "JSType objlitType = getJSType(objlit);",
    "right" : "JSType objlitType = getJSType(objlit);",
    "info" : "VariableDeclarationStatement[37751-37789]:VariableDeclarationStatement[37751-37789]"
  }, {
    "left" : "ObjectType type = ObjectType.cast(\n        objlitType.restrictByNotNullOrUndefined());",
    "right" : "ObjectType type = ObjectType.cast(\n        objlitType.restrictByNotNullOrUndefined());",
    "info" : "VariableDeclarationStatement[37794-37880]:VariableDeclarationStatement[37794-37880]"
  }, {
    "left" : "if (type != null)",
    "right" : "if (type != null)",
    "info" : "IfStatement[37885-38274]:IfStatement[37885-38274]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37903-38274]:Block[37903-38274]"
  }, {
    "left" : "String property = NodeUtil.getObjectLitKeyName(key);",
    "right" : "String property = NodeUtil.getObjectLitKeyName(key);",
    "info" : "VariableDeclarationStatement[37911-37963]:VariableDeclarationStatement[37911-37963]"
  }, {
    "left" : "if (type.hasProperty(property) &&\n          !type.isPropertyTypeInferred(property) &&\n          !propertyIsImplicitCast(type, property))",
    "right" : "if (type.hasProperty(property) &&\n          !type.isPropertyTypeInferred(property) &&\n          !propertyIsImplicitCast(type, property))",
    "info" : "IfStatement[37970-38254]:IfStatement[37970-38254]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38107-38254]:Block[38107-38254]"
  }, {
    "left" : "validator.expectCanAssignToPropertyOf(\n            t, key, keyType,\n            type.getPropertyType(property), owner, property);",
    "right" : "validator.expectCanAssignToPropertyOf(\n            t, key, keyType,\n            type.getPropertyType(property), owner, property);",
    "info" : "ExpressionStatement[38117-38246]:ExpressionStatement[38117-38246]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[38261-38268]:ReturnStatement[38261-38268]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[38397-38404]:Modifier[38397-38404]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[38405-38412]:PrimitiveType[38405-38412]"
  }, {
    "left" : "propertyIsImplicitCast",
    "right" : "propertyIsImplicitCast",
    "info" : "SimpleName[38413-38435]:SimpleName[38413-38435]"
  }, {
    "left" : "ObjectType type",
    "right" : "ObjectType type",
    "info" : "SingleVariableDeclaration[38436-38451]:SingleVariableDeclaration[38436-38451]"
  }, {
    "left" : "String prop",
    "right" : "String prop",
    "info" : "SingleVariableDeclaration[38453-38464]:SingleVariableDeclaration[38453-38464]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38466-38706]:Block[38466-38706]"
  }, {
    "left" : "for (; type != null; type = type.getImplicitPrototype())",
    "right" : "for (; type != null; type = type.getImplicitPrototype())",
    "info" : "ForStatement[38472-38684]:ForStatement[38472-38684]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38529-38684]:Block[38529-38684]"
  }, {
    "left" : "JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);",
    "right" : "JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);",
    "info" : "VariableDeclarationStatement[38537-38592]:VariableDeclarationStatement[38537-38592]"
  }, {
    "left" : "if (docInfo != null && docInfo.isImplicitCast())",
    "right" : "if (docInfo != null && docInfo.isImplicitCast())",
    "info" : "IfStatement[38599-38678]:IfStatement[38599-38678]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38648-38678]:Block[38648-38678]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[38658-38670]:ReturnStatement[38658-38670]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[38689-38702]:ReturnStatement[38689-38702]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[38962-38969]:Modifier[38962-38969]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[38970-38974]:PrimitiveType[38970-38974]"
  }, {
    "left" : "checkDeclaredPropertyInheritance",
    "right" : "checkDeclaredPropertyInheritance",
    "info" : "SimpleName[38975-39007]:SimpleName[38975-39007]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[39015-39030]:SingleVariableDeclaration[39015-39030]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[39032-39038]:SingleVariableDeclaration[39032-39038]"
  }, {
    "left" : "FunctionType ctorType",
    "right" : "FunctionType ctorType",
    "info" : "SingleVariableDeclaration[39040-39061]:SingleVariableDeclaration[39040-39061]"
  }, {
    "left" : "String propertyName",
    "right" : "String propertyName",
    "info" : "SingleVariableDeclaration[39063-39082]:SingleVariableDeclaration[39063-39082]"
  }, {
    "left" : "JSDocInfo info",
    "right" : "JSDocInfo info",
    "info" : "SingleVariableDeclaration[39090-39104]:SingleVariableDeclaration[39090-39104]"
  }, {
    "left" : "JSType propertyType",
    "right" : "JSType propertyType",
    "info" : "SingleVariableDeclaration[39106-39125]:SingleVariableDeclaration[39106-39125]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39127-43860]:Block[39127-43860]"
  }, {
    "left" : "if (hasUnknownOrEmptySupertype(ctorType))",
    "right" : "if (hasUnknownOrEmptySupertype(ctorType))",
    "info" : "IfStatement[39224-39287]:IfStatement[39224-39287]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39266-39287]:Block[39266-39287]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[39274-39281]:ReturnStatement[39274-39281]"
  }, {
    "left" : "FunctionType superClass = ctorType.getSuperClassConstructor();",
    "right" : "FunctionType superClass = ctorType.getSuperClassConstructor();",
    "info" : "VariableDeclarationStatement[39293-39355]:VariableDeclarationStatement[39293-39355]"
  }, {
    "left" : "boolean superClassHasProperty = superClass != null &&\n        superClass.getInstanceType().hasProperty(propertyName);",
    "right" : "boolean superClassHasProperty = superClass != null &&\n        superClass.getInstanceType().hasProperty(propertyName);",
    "info" : "VariableDeclarationStatement[39360-39477]:VariableDeclarationStatement[39360-39477]"
  }, {
    "left" : "boolean superClassHasDeclaredProperty = superClass != null &&\n        superClass.getInstanceType().isPropertyTypeDeclared(propertyName);",
    "right" : "boolean superClassHasDeclaredProperty = superClass != null &&\n        superClass.getInstanceType().isPropertyTypeDeclared(propertyName);",
    "info" : "VariableDeclarationStatement[39482-39618]:VariableDeclarationStatement[39482-39618]"
  }, {
    "left" : "boolean superInterfaceHasProperty = false;",
    "right" : "boolean superInterfaceHasProperty = false;",
    "info" : "VariableDeclarationStatement[39645-39687]:VariableDeclarationStatement[39645-39687]"
  }, {
    "left" : "boolean superInterfaceHasDeclaredProperty = false;",
    "right" : "boolean superInterfaceHasDeclaredProperty = false;",
    "info" : "VariableDeclarationStatement[39692-39742]:VariableDeclarationStatement[39692-39742]"
  }, {
    "left" : "if (ctorType.isInterface())",
    "right" : "if (ctorType.isInterface())",
    "info" : "IfStatement[39747-40151]:IfStatement[39747-40151]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39775-40151]:Block[39775-40151]"
  }, {
    "left" : "for (ObjectType interfaceType : ctorType.getExtendedInterfaces())",
    "right" : "for (ObjectType interfaceType : ctorType.getExtendedInterfaces())",
    "info" : "EnhancedForStatement[39783-40145]:EnhancedForStatement[39783-40145]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39849-40145]:Block[39849-40145]"
  }, {
    "left" : "superInterfaceHasProperty =\n            superInterfaceHasProperty ||\n            interfaceType.hasProperty(propertyName);",
    "right" : "superInterfaceHasProperty =\n            superInterfaceHasProperty ||\n            interfaceType.hasProperty(propertyName);",
    "info" : "ExpressionStatement[39859-39980]:ExpressionStatement[39859-39980]"
  }, {
    "left" : "superInterfaceHasDeclaredProperty =\n            superInterfaceHasDeclaredProperty ||\n            interfaceType.isPropertyTypeDeclared(propertyName);",
    "right" : "superInterfaceHasDeclaredProperty =\n            superInterfaceHasDeclaredProperty ||\n            interfaceType.isPropertyTypeDeclared(propertyName);",
    "info" : "ExpressionStatement[39989-40137]:ExpressionStatement[39989-40137]"
  }, {
    "left" : "boolean declaredOverride = info != null && info.isOverride();",
    "right" : "boolean declaredOverride = info != null && info.isOverride();",
    "info" : "VariableDeclarationStatement[40156-40217]:VariableDeclarationStatement[40156-40217]"
  }, {
    "left" : "boolean foundInterfaceProperty = false;",
    "right" : "boolean foundInterfaceProperty = false;",
    "info" : "VariableDeclarationStatement[40223-40262]:VariableDeclarationStatement[40223-40262]"
  }, {
    "left" : "if (ctorType.isConstructor())",
    "right" : "if (ctorType.isConstructor())",
    "info" : "IfStatement[40267-41315]:IfStatement[40267-41315]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40297-41315]:Block[40297-41315]"
  }, {
    "left" : "for (JSType implementedInterface :\n          ctorType.getAllImplementedInterfaces())",
    "right" : "for (JSType implementedInterface :\n          ctorType.getAllImplementedInterfaces())",
    "info" : "EnhancedForStatement[40305-41309]:EnhancedForStatement[40305-41309]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40390-41309]:Block[40390-41309]"
  }, {
    "left" : "if (implementedInterface.isUnknownType() ||\n            implementedInterface.isEmptyType())",
    "right" : "if (implementedInterface.isUnknownType() ||\n            implementedInterface.isEmptyType())",
    "info" : "IfStatement[40400-40523]:IfStatement[40400-40523]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40492-40523]:Block[40492-40523]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[40504-40513]:ContinueStatement[40504-40513]"
  }, {
    "left" : "FunctionType interfaceType =\n            implementedInterface.toObjectType().getConstructor();",
    "right" : "FunctionType interfaceType =\n            implementedInterface.toObjectType().getConstructor();",
    "info" : "VariableDeclarationStatement[40532-40626]:VariableDeclarationStatement[40532-40626]"
  }, {
    "left" : "Preconditions.checkNotNull(interfaceType);",
    "right" : "Preconditions.checkNotNull(interfaceType);",
    "info" : "ExpressionStatement[40635-40677]:ExpressionStatement[40635-40677]"
  }, {
    "left" : "boolean interfaceHasProperty =\n            interfaceType.getPrototype().hasProperty(propertyName);",
    "right" : "boolean interfaceHasProperty =\n            interfaceType.getPrototype().hasProperty(propertyName);",
    "info" : "VariableDeclarationStatement[40687-40785]:VariableDeclarationStatement[40687-40785]"
  }, {
    "left" : "foundInterfaceProperty = foundInterfaceProperty ||\n            interfaceHasProperty;",
    "right" : "foundInterfaceProperty = foundInterfaceProperty ||\n            interfaceHasProperty;",
    "info" : "ExpressionStatement[40794-40878]:ExpressionStatement[40794-40878]"
  }, {
    "left" : "if (reportMissingOverride.isOn()\n            && !declaredOverride\n            && interfaceHasProperty)",
    "right" : "if (reportMissingOverride.isOn()\n            && !declaredOverride\n            && interfaceHasProperty)",
    "info" : "IfStatement[40887-41301]:IfStatement[40887-41301]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40990-41301]:Block[40990-41301]"
  }, {
    "left" : "compiler.report(t.makeError(n, reportMissingOverride,\n              HIDDEN_INTERFACE_PROPERTY, propertyName,\n              interfaceType.getTopMostDefiningType(propertyName).toString()));",
    "right" : "compiler.report(t.makeError(n, reportMissingOverride,\n              HIDDEN_INTERFACE_PROPERTY, propertyName,\n              interfaceType.getTopMostDefiningType(propertyName).toString()));",
    "info" : "ExpressionStatement[41104-41291]:ExpressionStatement[41104-41291]"
  }, {
    "left" : "if (!declaredOverride\n        && !superClassHasProperty\n        && !superInterfaceHasProperty)",
    "right" : "if (!declaredOverride\n        && !superClassHasProperty\n        && !superInterfaceHasProperty)",
    "info" : "IfStatement[41321-41497]:IfStatement[41321-41497]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41416-41497]:Block[41416-41497]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[41484-41491]:ReturnStatement[41484-41491]"
  }, {
    "left" : "ObjectType topInstanceType = superClassHasDeclaredProperty ?\n        superClass.getTopMostDefiningType(propertyName) : null;",
    "right" : "ObjectType topInstanceType = superClassHasDeclaredProperty ?\n        superClass.getTopMostDefiningType(propertyName) : null;",
    "info" : "VariableDeclarationStatement[41503-41627]:VariableDeclarationStatement[41503-41627]"
  }, {
    "left" : "boolean declaredLocally =\n        ctorType.isConstructor() &&\n        (ctorType.getPrototype().hasOwnProperty(propertyName) ||\n         ctorType.getInstanceType().hasOwnProperty(propertyName));",
    "right" : "boolean declaredLocally =\n        ctorType.isConstructor() &&\n        (ctorType.getPrototype().hasOwnProperty(propertyName) ||\n         ctorType.getInstanceType().hasOwnProperty(propertyName));",
    "info" : "VariableDeclarationStatement[41632-41825]:VariableDeclarationStatement[41632-41825]"
  }, {
    "left" : "if (reportMissingOverride.isOn()\n        && !declaredOverride\n        && superClassHasDeclaredProperty\n        && declaredLocally)",
    "right" : "if (reportMissingOverride.isOn()\n        && !declaredOverride\n        && superClassHasDeclaredProperty\n        && declaredLocally)",
    "info" : "IfStatement[41830-42214]:IfStatement[41830-42214]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41961-42214]:Block[41961-42214]"
  }, {
    "left" : "compiler.report(t.makeError(n, reportMissingOverride,\n          HIDDEN_SUPERCLASS_PROPERTY, propertyName,\n          topInstanceType.toString()));",
    "right" : "compiler.report(t.makeError(n, reportMissingOverride,\n          HIDDEN_SUPERCLASS_PROPERTY, propertyName,\n          topInstanceType.toString()));",
    "info" : "ExpressionStatement[42063-42208]:ExpressionStatement[42063-42208]"
  }, {
    "left" : "if (superClassHasDeclaredProperty)",
    "right" : "if (superClassHasDeclaredProperty)",
    "info" : "IfStatement[42283-43856]:IfStatement[42283-43856]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42318-42761]:Block[42318-42761]"
  }, {
    "left" : "JSType superClassPropType =\n          superClass.getInstanceType().getPropertyType(propertyName);",
    "right" : "JSType superClassPropType =\n          superClass.getInstanceType().getPropertyType(propertyName);",
    "info" : "VariableDeclarationStatement[42372-42469]:VariableDeclarationStatement[42372-42469]"
  }, {
    "left" : "if (!propertyType.isSubtype(superClassPropType))",
    "right" : "if (!propertyType.isSubtype(superClassPropType))",
    "info" : "IfStatement[42476-42755]:IfStatement[42476-42755]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42525-42755]:Block[42525-42755]"
  }, {
    "left" : "compiler.report(\n            t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n                propertyName, topInstanceType.toString(),\n                superClassPropType.toString(), propertyType.toString()));",
    "right" : "compiler.report(\n            t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n                propertyName, topInstanceType.toString(),\n                superClassPropType.toString(), propertyType.toString()));",
    "info" : "ExpressionStatement[42535-42747]:ExpressionStatement[42535-42747]"
  }, {
    "left" : "if (superInterfaceHasDeclaredProperty)",
    "right" : "if (superInterfaceHasDeclaredProperty)",
    "info" : "IfStatement[42767-43856]:IfStatement[42767-43856]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42806-43546]:Block[42806-43546]"
  }, {
    "left" : "for (ObjectType interfaceType : ctorType.getExtendedInterfaces())",
    "right" : "for (ObjectType interfaceType : ctorType.getExtendedInterfaces())",
    "info" : "EnhancedForStatement[42860-43540]:EnhancedForStatement[42860-43540]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42926-43540]:Block[42926-43540]"
  }, {
    "left" : "if (interfaceType.hasProperty(propertyName))",
    "right" : "if (interfaceType.hasProperty(propertyName))",
    "info" : "IfStatement[42936-43532]:IfStatement[42936-43532]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42981-43532]:Block[42981-43532]"
  }, {
    "left" : "JSType superPropertyType =\n              interfaceType.getPropertyType(propertyName);",
    "right" : "JSType superPropertyType =\n              interfaceType.getPropertyType(propertyName);",
    "info" : "VariableDeclarationStatement[42993-43078]:VariableDeclarationStatement[42993-43078]"
  }, {
    "left" : "if (!propertyType.isSubtype(superPropertyType))",
    "right" : "if (!propertyType.isSubtype(superPropertyType))",
    "info" : "IfStatement[43089-43522]:IfStatement[43089-43522]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43137-43522]:Block[43137-43522]"
  }, {
    "left" : "topInstanceType = interfaceType.getConstructor().\n                getTopMostDefiningType(propertyName);",
    "right" : "topInstanceType = interfaceType.getConstructor().\n                getTopMostDefiningType(propertyName);",
    "info" : "ExpressionStatement[43151-43254]:ExpressionStatement[43151-43254]"
  }, {
    "left" : "compiler.report(\n                t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n                    propertyName, topInstanceType.toString(),\n                    superPropertyType.toString(),\n                    propertyType.toString()));",
    "right" : "compiler.report(\n                t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n                    propertyName, topInstanceType.toString(),\n                    superPropertyType.toString(),\n                    propertyType.toString()));",
    "info" : "ExpressionStatement[43267-43510]:ExpressionStatement[43267-43510]"
  }, {
    "left" : "if (!foundInterfaceProperty\n        && !superClassHasProperty\n        && !superInterfaceHasProperty)",
    "right" : "if (!foundInterfaceProperty\n        && !superClassHasProperty\n        && !superInterfaceHasProperty)",
    "info" : "IfStatement[43552-43856]:IfStatement[43552-43856]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43653-43856]:Block[43653-43856]"
  }, {
    "left" : "compiler.report(\n          t.makeError(n, UNKNOWN_OVERRIDE,\n              propertyName, ctorType.getInstanceType().toString()));",
    "right" : "compiler.report(\n          t.makeError(n, UNKNOWN_OVERRIDE,\n              propertyName, ctorType.getInstanceType().toString()));",
    "info" : "ExpressionStatement[43722-43850]:ExpressionStatement[43722-43850]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[43998-44005]:Modifier[43998-44005]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[44006-44012]:Modifier[44006-44012]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[44013-44020]:PrimitiveType[44013-44020]"
  }, {
    "left" : "hasUnknownOrEmptySupertype",
    "right" : "hasUnknownOrEmptySupertype",
    "info" : "SimpleName[44021-44047]:SimpleName[44021-44047]"
  }, {
    "left" : "FunctionType ctor",
    "right" : "FunctionType ctor",
    "info" : "SingleVariableDeclaration[44048-44065]:SingleVariableDeclaration[44048-44065]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44067-44813]:Block[44067-44813]"
  }, {
    "left" : "Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());",
    "right" : "Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());",
    "info" : "ExpressionStatement[44073-44145]:ExpressionStatement[44073-44145]"
  }, {
    "left" : "Preconditions.checkArgument(!ctor.isUnknownType());",
    "right" : "Preconditions.checkArgument(!ctor.isUnknownType());",
    "info" : "ExpressionStatement[44150-44201]:ExpressionStatement[44150-44201]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[44302-44809]:WhileStatement[44302-44809]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44315-44809]:Block[44315-44809]"
  }, {
    "left" : "ObjectType maybeSuperInstanceType =\n          ctor.getPrototype().getImplicitPrototype();",
    "right" : "ObjectType maybeSuperInstanceType =\n          ctor.getPrototype().getImplicitPrototype();",
    "info" : "VariableDeclarationStatement[44323-44412]:VariableDeclarationStatement[44323-44412]"
  }, {
    "left" : "if (maybeSuperInstanceType == null)",
    "right" : "if (maybeSuperInstanceType == null)",
    "info" : "IfStatement[44419-44486]:IfStatement[44419-44486]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44455-44486]:Block[44455-44486]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[44465-44478]:ReturnStatement[44465-44478]"
  }, {
    "left" : "if (maybeSuperInstanceType.isUnknownType() ||\n          maybeSuperInstanceType.isEmptyType())",
    "right" : "if (maybeSuperInstanceType.isUnknownType() ||\n          maybeSuperInstanceType.isEmptyType())",
    "info" : "IfStatement[44493-44617]:IfStatement[44493-44617]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44587-44617]:Block[44587-44617]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[44597-44609]:ReturnStatement[44597-44609]"
  }, {
    "left" : "ctor = maybeSuperInstanceType.getConstructor();",
    "right" : "ctor = maybeSuperInstanceType.getConstructor();",
    "info" : "ExpressionStatement[44624-44671]:ExpressionStatement[44624-44671]"
  }, {
    "left" : "if (ctor == null)",
    "right" : "if (ctor == null)",
    "info" : "IfStatement[44678-44727]:IfStatement[44678-44727]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44696-44727]:Block[44696-44727]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[44706-44719]:ReturnStatement[44706-44719]"
  }, {
    "left" : "Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());",
    "right" : "Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());",
    "info" : "ExpressionStatement[44734-44803]:ExpressionStatement[44734-44803]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[44938-44945]:Modifier[44938-44945]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[44946-44950]:PrimitiveType[44946-44950]"
  }, {
    "left" : "visitInterfaceGetprop",
    "right" : "visitInterfaceGetprop",
    "info" : "SimpleName[44951-44972]:SimpleName[44951-44972]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[44973-44988]:SingleVariableDeclaration[44973-44988]"
  }, {
    "left" : "Node assign",
    "right" : "Node assign",
    "info" : "SingleVariableDeclaration[44990-45001]:SingleVariableDeclaration[44990-45001]"
  }, {
    "left" : "Node object",
    "right" : "Node object",
    "info" : "SingleVariableDeclaration[45003-45014]:SingleVariableDeclaration[45003-45014]"
  }, {
    "left" : "String property",
    "right" : "String property",
    "info" : "SingleVariableDeclaration[45022-45037]:SingleVariableDeclaration[45022-45037]"
  }, {
    "left" : "Node lvalue",
    "right" : "Node lvalue",
    "info" : "SingleVariableDeclaration[45039-45050]:SingleVariableDeclaration[45039-45050]"
  }, {
    "left" : "Node rvalue",
    "right" : "Node rvalue",
    "info" : "SingleVariableDeclaration[45052-45063]:SingleVariableDeclaration[45052-45063]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45065-46020]:Block[45065-46020]"
  }, {
    "left" : "JSType rvalueType = getJSType(rvalue);",
    "right" : "JSType rvalueType = getJSType(rvalue);",
    "info" : "VariableDeclarationStatement[45072-45110]:VariableDeclarationStatement[45072-45110]"
  }, {
    "left" : "String abstractMethodName =\n        compiler.getCodingConvention().getAbstractMethodName();",
    "right" : "String abstractMethodName =\n        compiler.getCodingConvention().getAbstractMethodName();",
    "info" : "VariableDeclarationStatement[45309-45400]:VariableDeclarationStatement[45309-45400]"
  }, {
    "left" : "if (!rvalueType.isFunctionType())",
    "right" : "if (!rvalueType.isFunctionType())",
    "info" : "IfStatement[45405-45772]:IfStatement[45405-45772]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45439-45772]:Block[45439-45772]"
  }, {
    "left" : "String abstractMethodMessage = (abstractMethodName != null)\n         ? \", or \" + abstractMethodName\n         : \"\";",
    "right" : "String abstractMethodMessage = (abstractMethodName != null)\n         ? \", or \" + abstractMethodName\n         : \"\";",
    "info" : "VariableDeclarationStatement[45522-45636]:VariableDeclarationStatement[45522-45636]"
  }, {
    "left" : "compiler.report(\n          t.makeError(object, INVALID_INTERFACE_MEMBER_DECLARATION,\n              abstractMethodMessage));",
    "right" : "compiler.report(\n          t.makeError(object, INVALID_INTERFACE_MEMBER_DECLARATION,\n              abstractMethodMessage));",
    "info" : "ExpressionStatement[45643-45766]:ExpressionStatement[45643-45766]"
  }, {
    "left" : "if (assign.getLastChild().isFunction()\n        && !NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild()))",
    "right" : "if (assign.getLastChild().isFunction()\n        && !NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild()))",
    "info" : "IfStatement[45778-46016]:IfStatement[45778-46016]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45890-46016]:Block[45890-46016]"
  }, {
    "left" : "compiler.report(\n          t.makeError(object, INTERFACE_FUNCTION_NOT_EMPTY,\n              abstractMethodName));",
    "right" : "compiler.report(\n          t.makeError(object, INTERFACE_FUNCTION_NOT_EMPTY,\n              abstractMethodName));",
    "info" : "ExpressionStatement[45898-46010]:ExpressionStatement[45898-46010]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[46341-46348]:PrimitiveType[46341-46348]"
  }, {
    "left" : "visitName",
    "right" : "visitName",
    "info" : "SimpleName[46349-46358]:SimpleName[46349-46358]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[46359-46374]:SingleVariableDeclaration[46359-46374]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[46376-46382]:SingleVariableDeclaration[46376-46382]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[46384-46395]:SingleVariableDeclaration[46384-46395]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46397-47437]:Block[46397-47437]"
  }, {
    "left" : "int parentNodeType = parent.getType();",
    "right" : "int parentNodeType = parent.getType();",
    "info" : "VariableDeclarationStatement[46855-46893]:VariableDeclarationStatement[46855-46893]"
  }, {
    "left" : "if (parentNodeType == Token.FUNCTION ||\n        parentNodeType == Token.CATCH ||\n        parentNodeType == Token.PARAM_LIST ||\n        parentNodeType == Token.VAR)",
    "right" : "if (parentNodeType == Token.FUNCTION ||\n        parentNodeType == Token.CATCH ||\n        parentNodeType == Token.PARAM_LIST ||\n        parentNodeType == Token.VAR)",
    "info" : "IfStatement[46898-47089]:IfStatement[46898-47089]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47062-47089]:Block[47062-47089]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[47070-47083]:ReturnStatement[47070-47083]"
  }, {
    "left" : "JSType type = n.getJSType();",
    "right" : "JSType type = n.getJSType();",
    "info" : "VariableDeclarationStatement[47095-47123]:VariableDeclarationStatement[47095-47123]"
  }, {
    "left" : "if (type == null)",
    "right" : "if (type == null)",
    "info" : "IfStatement[47128-47387]:IfStatement[47128-47387]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47146-47387]:Block[47146-47387]"
  }, {
    "left" : "type = getNativeType(UNKNOWN_TYPE);",
    "right" : "type = getNativeType(UNKNOWN_TYPE);",
    "info" : "ExpressionStatement[47154-47189]:ExpressionStatement[47154-47189]"
  }, {
    "left" : "Var var = t.getScope().getVar(n.getString());",
    "right" : "Var var = t.getScope().getVar(n.getString());",
    "info" : "VariableDeclarationStatement[47196-47241]:VariableDeclarationStatement[47196-47241]"
  }, {
    "left" : "if (var != null)",
    "right" : "if (var != null)",
    "info" : "IfStatement[47248-47381]:IfStatement[47248-47381]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47265-47381]:Block[47265-47381]"
  }, {
    "left" : "JSType varType = var.getType();",
    "right" : "JSType varType = var.getType();",
    "info" : "VariableDeclarationStatement[47275-47306]:VariableDeclarationStatement[47275-47306]"
  }, {
    "left" : "if (varType != null)",
    "right" : "if (varType != null)",
    "info" : "IfStatement[47315-47373]:IfStatement[47315-47373]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47336-47373]:Block[47336-47373]"
  }, {
    "left" : "type = varType;",
    "right" : "type = varType;",
    "info" : "ExpressionStatement[47348-47363]:ExpressionStatement[47348-47363]"
  }, {
    "left" : "ensureTyped(t, n, type);",
    "right" : "ensureTyped(t, n, type);",
    "info" : "ExpressionStatement[47392-47416]:ExpressionStatement[47392-47416]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[47421-47433]:ReturnStatement[47421-47433]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[47715-47722]:Modifier[47715-47722]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[47723-47727]:PrimitiveType[47723-47727]"
  }, {
    "left" : "visitGetProp",
    "right" : "visitGetProp",
    "info" : "SimpleName[47728-47740]:SimpleName[47728-47740]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[47741-47756]:SingleVariableDeclaration[47741-47756]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[47758-47764]:SingleVariableDeclaration[47758-47764]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[47766-47777]:SingleVariableDeclaration[47766-47777]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47779-48458]:Block[47779-48458]"
  }, {
    "left" : "Node property = n.getLastChild();",
    "right" : "Node property = n.getLastChild();",
    "info" : "VariableDeclarationStatement[47991-48024]:VariableDeclarationStatement[47991-48024]"
  }, {
    "left" : "Node objNode = n.getFirstChild();",
    "right" : "Node objNode = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[48029-48062]:VariableDeclarationStatement[48029-48062]"
  }, {
    "left" : "JSType childType = getJSType(objNode);",
    "right" : "JSType childType = getJSType(objNode);",
    "info" : "VariableDeclarationStatement[48067-48105]:VariableDeclarationStatement[48067-48105]"
  }, {
    "left" : "if (childType.isDict())",
    "right" : "if (childType.isDict())",
    "info" : "IfStatement[48111-48431]:IfStatement[48111-48431]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48135-48223]:Block[48135-48223]"
  }, {
    "left" : "report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");",
    "right" : "report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");",
    "info" : "ExpressionStatement[48143-48217]:ExpressionStatement[48143-48217]"
  }, {
    "left" : "if (validator.expectNotNullOrUndefined(t, n, childType,\n        \"No properties on this expression\", getNativeType(OBJECT_TYPE)))",
    "right" : "if (validator.expectNotNullOrUndefined(t, n, childType,\n        \"No properties on this expression\", getNativeType(OBJECT_TYPE)))",
    "info" : "IfStatement[48229-48431]:IfStatement[48229-48431]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48358-48431]:Block[48358-48431]"
  }, {
    "left" : "checkPropertyAccess(childType, property.getString(), t, n);",
    "right" : "checkPropertyAccess(childType, property.getString(), t, n);",
    "info" : "ExpressionStatement[48366-48425]:ExpressionStatement[48366-48425]"
  }, {
    "left" : "ensureTyped(t, n);",
    "right" : "ensureTyped(t, n);",
    "info" : "ExpressionStatement[48436-48454]:ExpressionStatement[48436-48454]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[48784-48791]:Modifier[48784-48791]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[48792-48796]:PrimitiveType[48792-48796]"
  }, {
    "left" : "checkPropertyAccess",
    "right" : "checkPropertyAccess",
    "info" : "SimpleName[48797-48816]:SimpleName[48797-48816]"
  }, {
    "left" : "JSType childType",
    "right" : "JSType childType",
    "info" : "SingleVariableDeclaration[48817-48833]:SingleVariableDeclaration[48817-48833]"
  }, {
    "left" : "String propName",
    "right" : "String propName",
    "info" : "SingleVariableDeclaration[48835-48850]:SingleVariableDeclaration[48835-48850]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[48858-48873]:SingleVariableDeclaration[48858-48873]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[48875-48881]:SingleVariableDeclaration[48875-48881]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48883-50034]:Block[48883-50034]"
  }, {
    "left" : "JSType propType = getJSType(n);",
    "right" : "JSType propType = getJSType(n);",
    "info" : "VariableDeclarationStatement[49154-49185]:VariableDeclarationStatement[49154-49185]"
  }, {
    "left" : "if (propType.isEquivalentTo(typeRegistry.getNativeType(UNKNOWN_TYPE)))",
    "right" : "if (propType.isEquivalentTo(typeRegistry.getNativeType(UNKNOWN_TYPE)))",
    "info" : "IfStatement[49190-50030]:IfStatement[49190-50030]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49261-50030]:Block[49261-50030]"
  }, {
    "left" : "childType = childType.autobox();",
    "right" : "childType = childType.autobox();",
    "info" : "ExpressionStatement[49269-49301]:ExpressionStatement[49269-49301]"
  }, {
    "left" : "ObjectType objectType = ObjectType.cast(childType);",
    "right" : "ObjectType objectType = ObjectType.cast(childType);",
    "info" : "VariableDeclarationStatement[49308-49359]:VariableDeclarationStatement[49308-49359]"
  }, {
    "left" : "if (objectType != null)",
    "right" : "if (objectType != null)",
    "info" : "IfStatement[49366-50024]:IfStatement[49366-50024]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49390-49947]:Block[49390-49947]"
  }, {
    "left" : "if (!objectType.hasProperty(propName) ||\n            objectType.isEquivalentTo(\n                typeRegistry.getNativeType(UNKNOWN_TYPE)))",
    "right" : "if (!objectType.hasProperty(propName) ||\n            objectType.isEquivalentTo(\n                typeRegistry.getNativeType(UNKNOWN_TYPE)))",
    "info" : "IfStatement[49581-49938]:IfStatement[49581-49938]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49720-49938]:Block[49720-49938]"
  }, {
    "left" : "if (objectType instanceof EnumType)",
    "right" : "if (objectType instanceof EnumType)",
    "info" : "IfStatement[49732-49928]:IfStatement[49732-49928]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49768-49842]:Block[49768-49842]"
  }, {
    "left" : "report(t, n, INEXISTENT_ENUM_ELEMENT, propName);",
    "right" : "report(t, n, INEXISTENT_ENUM_ELEMENT, propName);",
    "info" : "ExpressionStatement[49782-49830]:ExpressionStatement[49782-49830]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49848-49928]:Block[49848-49928]"
  }, {
    "left" : "checkPropertyAccessHelper(objectType, propName, t, n);",
    "right" : "checkPropertyAccessHelper(objectType, propName, t, n);",
    "info" : "ExpressionStatement[49862-49916]:ExpressionStatement[49862-49916]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49953-50024]:Block[49953-50024]"
  }, {
    "left" : "checkPropertyAccessHelper(childType, propName, t, n);",
    "right" : "checkPropertyAccessHelper(childType, propName, t, n);",
    "info" : "ExpressionStatement[49963-50016]:ExpressionStatement[49963-50016]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[50038-50045]:Modifier[50038-50045]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[50046-50050]:PrimitiveType[50046-50050]"
  }, {
    "left" : "checkPropertyAccessHelper",
    "right" : "checkPropertyAccessHelper",
    "info" : "SimpleName[50051-50076]:SimpleName[50051-50076]"
  }, {
    "left" : "JSType objectType",
    "right" : "JSType objectType",
    "info" : "SingleVariableDeclaration[50077-50094]:SingleVariableDeclaration[50077-50094]"
  }, {
    "left" : "String propName",
    "right" : "String propName",
    "info" : "SingleVariableDeclaration[50096-50111]:SingleVariableDeclaration[50096-50111]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[50119-50134]:SingleVariableDeclaration[50119-50134]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[50136-50142]:SingleVariableDeclaration[50136-50142]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50144-50450]:Block[50144-50450]"
  }, {
    "left" : "if (!objectType.isEmptyType() &&\n        reportMissingProperties && !isPropertyTest(n))",
    "right" : "if (!objectType.isEmptyType() &&\n        reportMissingProperties && !isPropertyTest(n))",
    "info" : "IfStatement[50150-50446]:IfStatement[50150-50446]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50238-50446]:Block[50238-50446]"
  }, {
    "left" : "if (!typeRegistry.canPropertyBeDefined(objectType, propName))",
    "right" : "if (!typeRegistry.canPropertyBeDefined(objectType, propName))",
    "info" : "IfStatement[50246-50440]:IfStatement[50246-50440]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50308-50440]:Block[50308-50440]"
  }, {
    "left" : "report(t, n, INEXISTENT_PROPERTY, propName,\n            validator.getReadableJSTypeName(n.getFirstChild(), true));",
    "right" : "report(t, n, INEXISTENT_PROPERTY, propName,\n            validator.getReadableJSTypeName(n.getFirstChild(), true));",
    "info" : "ExpressionStatement[50318-50432]:ExpressionStatement[50318-50432]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[50661-50668]:Modifier[50661-50668]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[50669-50676]:PrimitiveType[50669-50676]"
  }, {
    "left" : "isPropertyTest",
    "right" : "isPropertyTest",
    "info" : "SimpleName[50677-50691]:SimpleName[50677-50691]"
  }, {
    "left" : "Node getProp",
    "right" : "Node getProp",
    "info" : "SingleVariableDeclaration[50692-50704]:SingleVariableDeclaration[50692-50704]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50706-51409]:Block[50706-51409]"
  }, {
    "left" : "Node parent = getProp.getParent();",
    "right" : "Node parent = getProp.getParent();",
    "info" : "VariableDeclarationStatement[50712-50746]:VariableDeclarationStatement[50712-50746]"
  }, {
    "left" : "switch (parent.getType()) {\n      case Token.CALL:\n        return parent.getFirstChild() != getProp &&\n            compiler.getCodingConvention().isPropertyTestFunction(parent);\n\n      case Token.IF:\n      case Token.WHILE:\n      case Token.DO:\n      case Token.FOR:\n        return NodeUtil.getConditionExpression(parent) == getProp;\n\n      case Token.INSTANCEOF:\n      case Token.TYPEOF:\n        return true;\n\n      case Token.AND:\n      case Token.HOOK:\n        return parent.getFirstChild() == getProp;\n\n      case Token.NOT:\n        return parent.getParent().isOr() &&\n            parent.getParent().getFirstChild() == parent;\n    }",
    "right" : "switch (parent.getType()) {\n      case Token.CALL:\n        return parent.getFirstChild() != getProp &&\n            compiler.getCodingConvention().isPropertyTestFunction(parent);\n\n      case Token.IF:\n      case Token.WHILE:\n      case Token.DO:\n      case Token.FOR:\n        return NodeUtil.getConditionExpression(parent) == getProp;\n\n      case Token.INSTANCEOF:\n      case Token.TYPEOF:\n        return true;\n\n      case Token.AND:\n      case Token.HOOK:\n        return parent.getFirstChild() == getProp;\n\n      case Token.NOT:\n        return parent.getParent().isOr() &&\n            parent.getParent().getFirstChild() == parent;\n    }",
    "info" : "SwitchStatement[50751-51387]:SwitchStatement[50751-51387]"
  }, {
    "left" : "case Token.CALL:",
    "right" : "case Token.CALL:",
    "info" : "SwitchCase[50785-50801]:SwitchCase[50785-50801]"
  }, {
    "left" : "return parent.getFirstChild() != getProp &&\n            compiler.getCodingConvention().isPropertyTestFunction(parent);",
    "right" : "return parent.getFirstChild() != getProp &&\n            compiler.getCodingConvention().isPropertyTestFunction(parent);",
    "info" : "ReturnStatement[50810-50928]:ReturnStatement[50810-50928]"
  }, {
    "left" : "case Token.IF:",
    "right" : "case Token.IF:",
    "info" : "SwitchCase[50936-50950]:SwitchCase[50936-50950]"
  }, {
    "left" : "case Token.WHILE:",
    "right" : "case Token.WHILE:",
    "info" : "SwitchCase[50957-50974]:SwitchCase[50957-50974]"
  }, {
    "left" : "case Token.DO:",
    "right" : "case Token.DO:",
    "info" : "SwitchCase[50981-50995]:SwitchCase[50981-50995]"
  }, {
    "left" : "case Token.FOR:",
    "right" : "case Token.FOR:",
    "info" : "SwitchCase[51002-51017]:SwitchCase[51002-51017]"
  }, {
    "left" : "return NodeUtil.getConditionExpression(parent) == getProp;",
    "right" : "return NodeUtil.getConditionExpression(parent) == getProp;",
    "info" : "ReturnStatement[51026-51084]:ReturnStatement[51026-51084]"
  }, {
    "left" : "case Token.INSTANCEOF:",
    "right" : "case Token.INSTANCEOF:",
    "info" : "SwitchCase[51092-51114]:SwitchCase[51092-51114]"
  }, {
    "left" : "case Token.TYPEOF:",
    "right" : "case Token.TYPEOF:",
    "info" : "SwitchCase[51121-51139]:SwitchCase[51121-51139]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[51148-51160]:ReturnStatement[51148-51160]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[51168-51183]:SwitchCase[51168-51183]"
  }, {
    "left" : "case Token.HOOK:",
    "right" : "case Token.HOOK:",
    "info" : "SwitchCase[51190-51206]:SwitchCase[51190-51206]"
  }, {
    "left" : "return parent.getFirstChild() == getProp;",
    "right" : "return parent.getFirstChild() == getProp;",
    "info" : "ReturnStatement[51215-51256]:ReturnStatement[51215-51256]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[51264-51279]:SwitchCase[51264-51279]"
  }, {
    "left" : "return parent.getParent().isOr() &&\n            parent.getParent().getFirstChild() == parent;",
    "right" : "return parent.getParent().isOr() &&\n            parent.getParent().getFirstChild() == parent;",
    "info" : "ReturnStatement[51288-51381]:ReturnStatement[51288-51381]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[51392-51405]:ReturnStatement[51392-51405]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[51639-51646]:Modifier[51639-51646]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[51647-51651]:PrimitiveType[51647-51651]"
  }, {
    "left" : "visitGetElem",
    "right" : "visitGetElem",
    "info" : "SimpleName[51652-51664]:SimpleName[51652-51664]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[51665-51680]:SingleVariableDeclaration[51665-51680]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[51682-51688]:SingleVariableDeclaration[51682-51688]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51690-51824]:Block[51690-51824]"
  }, {
    "left" : "validator.expectIndexMatch(\n        t, n, getJSType(n.getFirstChild()), getJSType(n.getLastChild()));",
    "right" : "validator.expectIndexMatch(\n        t, n, getJSType(n.getFirstChild()), getJSType(n.getLastChild()));",
    "info" : "ExpressionStatement[51696-51797]:ExpressionStatement[51696-51797]"
  }, {
    "left" : "ensureTyped(t, n);",
    "right" : "ensureTyped(t, n);",
    "info" : "ExpressionStatement[51802-51820]:ExpressionStatement[51802-51820]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[52050-52057]:Modifier[52050-52057]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[52058-52062]:PrimitiveType[52058-52062]"
  }, {
    "left" : "visitVar",
    "right" : "visitVar",
    "info" : "SimpleName[52063-52071]:SimpleName[52063-52071]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[52072-52087]:SingleVariableDeclaration[52072-52087]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[52089-52095]:SingleVariableDeclaration[52089-52095]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52097-53110]:Block[52097-53110]"
  }, {
    "left" : "JSDocInfo varInfo = n.hasOneChild() ? n.getJSDocInfo() : null;",
    "right" : "JSDocInfo varInfo = n.hasOneChild() ? n.getJSDocInfo() : null;",
    "info" : "VariableDeclarationStatement[52265-52327]:VariableDeclarationStatement[52265-52327]"
  }, {
    "left" : "for (Node name : n.children())",
    "right" : "for (Node name : n.children())",
    "info" : "EnhancedForStatement[52332-53106]:EnhancedForStatement[52332-53106]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52363-53106]:Block[52363-53106]"
  }, {
    "left" : "Node value = name.getFirstChild();",
    "right" : "Node value = name.getFirstChild();",
    "info" : "VariableDeclarationStatement[52371-52405]:VariableDeclarationStatement[52371-52405]"
  }, {
    "left" : "Var var = t.getScope().getVar(name.getString());",
    "right" : "Var var = t.getScope().getVar(name.getString());",
    "info" : "VariableDeclarationStatement[52482-52530]:VariableDeclarationStatement[52482-52530]"
  }, {
    "left" : "if (value != null)",
    "right" : "if (value != null)",
    "info" : "IfStatement[52538-53100]:IfStatement[52538-53100]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52557-53100]:Block[52557-53100]"
  }, {
    "left" : "JSType valueType = getJSType(value);",
    "right" : "JSType valueType = getJSType(value);",
    "info" : "VariableDeclarationStatement[52567-52603]:VariableDeclarationStatement[52567-52603]"
  }, {
    "left" : "JSType nameType = var.getType();",
    "right" : "JSType nameType = var.getType();",
    "info" : "VariableDeclarationStatement[52612-52644]:VariableDeclarationStatement[52612-52644]"
  }, {
    "left" : "nameType = (nameType == null) ? getNativeType(UNKNOWN_TYPE) : nameType;",
    "right" : "nameType = (nameType == null) ? getNativeType(UNKNOWN_TYPE) : nameType;",
    "info" : "ExpressionStatement[52653-52724]:ExpressionStatement[52653-52724]"
  }, {
    "left" : "JSDocInfo info = name.getJSDocInfo();",
    "right" : "JSDocInfo info = name.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[52734-52771]:VariableDeclarationStatement[52734-52771]"
  }, {
    "left" : "if (info == null)",
    "right" : "if (info == null)",
    "info" : "IfStatement[52780-52835]:IfStatement[52780-52835]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52798-52835]:Block[52798-52835]"
  }, {
    "left" : "info = varInfo;",
    "right" : "info = varInfo;",
    "info" : "ExpressionStatement[52810-52825]:ExpressionStatement[52810-52825]"
  }, {
    "left" : "checkEnumAlias(t, info, value);",
    "right" : "checkEnumAlias(t, info, value);",
    "info" : "ExpressionStatement[52845-52876]:ExpressionStatement[52845-52876]"
  }, {
    "left" : "if (var.isTypeInferred())",
    "right" : "if (var.isTypeInferred())",
    "info" : "IfStatement[52885-53092]:IfStatement[52885-53092]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52911-52965]:Block[52911-52965]"
  }, {
    "left" : "ensureTyped(t, name, valueType);",
    "right" : "ensureTyped(t, name, valueType);",
    "info" : "ExpressionStatement[52923-52955]:ExpressionStatement[52923-52955]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52971-53092]:Block[52971-53092]"
  }, {
    "left" : "validator.expectCanAssignTo(\n              t, value, valueType, nameType, \"initializing variable\");",
    "right" : "validator.expectCanAssignTo(\n              t, value, valueType, nameType, \"initializing variable\");",
    "info" : "ExpressionStatement[52983-53082]:ExpressionStatement[52983-53082]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[53150-53157]:Modifier[53150-53157]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[53158-53162]:PrimitiveType[53158-53162]"
  }, {
    "left" : "visitNew",
    "right" : "visitNew",
    "info" : "SimpleName[53163-53171]:SimpleName[53163-53171]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[53172-53187]:SingleVariableDeclaration[53172-53187]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[53189-53195]:SingleVariableDeclaration[53189-53195]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53197-53707]:Block[53197-53707]"
  }, {
    "left" : "Node constructor = n.getFirstChild();",
    "right" : "Node constructor = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[53203-53240]:VariableDeclarationStatement[53203-53240]"
  }, {
    "left" : "JSType type = getJSType(constructor).restrictByNotNullOrUndefined();",
    "right" : "JSType type = getJSType(constructor).restrictByNotNullOrUndefined();",
    "info" : "VariableDeclarationStatement[53245-53313]:VariableDeclarationStatement[53245-53313]"
  }, {
    "left" : "if (type.isConstructor() || type.isEmptyType() || type.isUnknownType())",
    "right" : "if (type.isConstructor() || type.isEmptyType() || type.isUnknownType())",
    "info" : "IfStatement[53318-53703]:IfStatement[53318-53703]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53390-53626]:Block[53390-53626]"
  }, {
    "left" : "FunctionType fnType = type.toMaybeFunctionType();",
    "right" : "FunctionType fnType = type.toMaybeFunctionType();",
    "info" : "VariableDeclarationStatement[53398-53447]:VariableDeclarationStatement[53398-53447]"
  }, {
    "left" : "if (fnType != null)",
    "right" : "if (fnType != null)",
    "info" : "IfStatement[53454-53620]:IfStatement[53454-53620]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53474-53578]:Block[53474-53578]"
  }, {
    "left" : "visitParameterList(t, n, fnType);",
    "right" : "visitParameterList(t, n, fnType);",
    "info" : "ExpressionStatement[53484-53517]:ExpressionStatement[53484-53517]"
  }, {
    "left" : "ensureTyped(t, n, fnType.getInstanceType());",
    "right" : "ensureTyped(t, n, fnType.getInstanceType());",
    "info" : "ExpressionStatement[53526-53570]:ExpressionStatement[53526-53570]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53584-53620]:Block[53584-53620]"
  }, {
    "left" : "ensureTyped(t, n);",
    "right" : "ensureTyped(t, n);",
    "info" : "ExpressionStatement[53594-53612]:ExpressionStatement[53594-53612]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53632-53703]:Block[53632-53703]"
  }, {
    "left" : "report(t, n, NOT_A_CONSTRUCTOR);",
    "right" : "report(t, n, NOT_A_CONSTRUCTOR);",
    "info" : "ExpressionStatement[53640-53672]:ExpressionStatement[53640-53672]"
  }, {
    "left" : "ensureTyped(t, n);",
    "right" : "ensureTyped(t, n);",
    "info" : "ExpressionStatement[53679-53697]:ExpressionStatement[53679-53697]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[54232-54239]:Modifier[54232-54239]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[54240-54244]:PrimitiveType[54240-54244]"
  }, {
    "left" : "checkInterfaceConflictProperties",
    "right" : "checkInterfaceConflictProperties",
    "info" : "SimpleName[54245-54277]:SimpleName[54245-54277]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[54278-54293]:SingleVariableDeclaration[54278-54293]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[54295-54301]:SingleVariableDeclaration[54295-54301]"
  }, {
    "left" : "String functionName",
    "right" : "String functionName",
    "info" : "SingleVariableDeclaration[54309-54328]:SingleVariableDeclaration[54309-54328]"
  }, {
    "left" : "HashMap<String, ObjectType> properties",
    "right" : "HashMap<String, ObjectType> properties",
    "info" : "SingleVariableDeclaration[54330-54368]:SingleVariableDeclaration[54330-54368]"
  }, {
    "left" : "HashMap<String, ObjectType> currentProperties",
    "right" : "HashMap<String, ObjectType> currentProperties",
    "info" : "SingleVariableDeclaration[54376-54421]:SingleVariableDeclaration[54376-54421]"
  }, {
    "left" : "ObjectType interfaceType",
    "right" : "ObjectType interfaceType",
    "info" : "SingleVariableDeclaration[54429-54453]:SingleVariableDeclaration[54429-54453]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54455-55464]:Block[54455-55564]"
  }, {
    "left" : "ObjectType implicitProto = interfaceType.getImplicitPrototype();",
    "right" : "ObjectType implicitProto = interfaceType.getImplicitPrototype();",
    "info" : "VariableDeclarationStatement[54461-54525]:VariableDeclarationStatement[54461-54525]"
  }, {
    "left" : "Set<String> currentPropertyNames;",
    "right" : "Set<String> currentPropertyNames;",
    "info" : "VariableDeclarationStatement[54530-54563]:VariableDeclarationStatement[54530-54563]"
  }, {
    "left" : "currentPropertyNames = implicitProto.getOwnPropertyNames();",
    "right" : "currentPropertyNames = implicitProto.getOwnPropertyNames();",
    "info" : "ExpressionStatement[54715-54774]:ExpressionStatement[54809-54868]"
  }, {
    "left" : "for (String name : currentPropertyNames)",
    "right" : "for (String name : currentPropertyNames)",
    "info" : "EnhancedForStatement[54779-55273]:EnhancedForStatement[54879-55373]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54820-55273]:Block[54920-55373]"
  }, {
    "left" : "ObjectType oType = properties.get(name);",
    "right" : "ObjectType oType = properties.get(name);",
    "info" : "VariableDeclarationStatement[54828-54868]:VariableDeclarationStatement[54928-54968]"
  }, {
    "left" : "if (oType != null)",
    "right" : "if (oType != null)",
    "info" : "IfStatement[54875-55217]:IfStatement[54975-55317]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54894-55217]:Block[54994-55317]"
  }, {
    "left" : "if (!interfaceType.getPropertyType(name).isEquivalentTo(\n            oType.getPropertyType(name)))",
    "right" : "if (!interfaceType.getPropertyType(name).isEquivalentTo(\n            oType.getPropertyType(name)))",
    "info" : "IfStatement[54904-55209]:IfStatement[55004-55309]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55003-55209]:Block[55103-55309]"
  }, {
    "left" : "compiler.report(\n              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                  functionName, name, oType.toString(),\n                  interfaceType.toString()));",
    "right" : "compiler.report(\n              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                  functionName, name, oType.toString(),\n                  interfaceType.toString()));",
    "info" : "ExpressionStatement[55015-55199]:ExpressionStatement[55115-55299]"
  }, {
    "left" : "currentProperties.put(name, interfaceType);",
    "right" : "currentProperties.put(name, interfaceType);",
    "info" : "ExpressionStatement[55224-55267]:ExpressionStatement[55324-55367]"
  }, {
    "left" : "for (ObjectType iType : interfaceType.getCtorExtendedInterfaces())",
    "right" : "for (ObjectType iType : interfaceType.getCtorExtendedInterfaces())",
    "info" : "EnhancedForStatement[55278-55460]:EnhancedForStatement[55378-55560]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55345-55460]:Block[55445-55560]"
  }, {
    "left" : "checkInterfaceConflictProperties(t, n, functionName, properties,\n          currentProperties, iType);",
    "right" : "checkInterfaceConflictProperties(t, n, functionName, properties,\n          currentProperties, iType);",
    "info" : "ExpressionStatement[55353-55454]:ExpressionStatement[55453-55554]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[55709-55716]:Modifier[55809-55816]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[55717-55721]:PrimitiveType[55817-55821]"
  }, {
    "left" : "visitFunction",
    "right" : "visitFunction",
    "info" : "SimpleName[55722-55735]:SimpleName[55822-55835]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[55736-55751]:SingleVariableDeclaration[55836-55851]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[55753-55759]:SingleVariableDeclaration[55853-55859]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55761-58905]:Block[55861-59005]"
  }, {
    "left" : "FunctionType functionType = JSType.toMaybeFunctionType(n.getJSType());",
    "right" : "FunctionType functionType = JSType.toMaybeFunctionType(n.getJSType());",
    "info" : "VariableDeclarationStatement[55767-55837]:VariableDeclarationStatement[55867-55937]"
  }, {
    "left" : "String functionPrivateName = n.getFirstChild().getString();",
    "right" : "String functionPrivateName = n.getFirstChild().getString();",
    "info" : "VariableDeclarationStatement[55842-55901]:VariableDeclarationStatement[55942-56001]"
  }, {
    "left" : "if (functionType.isConstructor())",
    "right" : "if (functionType.isConstructor())",
    "info" : "IfStatement[55906-58901]:IfStatement[56006-59001]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55940-57755]:Block[56040-57855]"
  }, {
    "left" : "FunctionType baseConstructor = functionType.getSuperClassConstructor();",
    "right" : "FunctionType baseConstructor = functionType.getSuperClassConstructor();",
    "info" : "VariableDeclarationStatement[55948-56019]:VariableDeclarationStatement[56048-56119]"
  }, {
    "left" : "if (baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE) &&\n          baseConstructor != null &&\n          baseConstructor.isInterface())",
    "right" : "if (baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE) &&\n          baseConstructor != null &&\n          baseConstructor.isInterface())",
    "info" : "IfStatement[56026-57749]:IfStatement[56126-57849]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56166-56316]:Block[56266-56416]"
  }, {
    "left" : "compiler.report(\n            t.makeError(n, CONFLICTING_EXTENDED_TYPE,\n                        \"constructor\", functionPrivateName));",
    "right" : "compiler.report(\n            t.makeError(n, CONFLICTING_EXTENDED_TYPE,\n                        \"constructor\", functionPrivateName));",
    "info" : "ExpressionStatement[56176-56308]:ExpressionStatement[56276-56408]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56322-57749]:Block[56422-57849]"
  }, {
    "left" : "if (baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE))",
    "right" : "if (baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE))",
    "info" : "IfStatement[56332-56892]:IfStatement[56432-56992]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56392-56892]:Block[56492-56992]"
  }, {
    "left" : "ObjectType proto = functionType.getPrototype();",
    "right" : "ObjectType proto = functionType.getPrototype();",
    "info" : "VariableDeclarationStatement[56404-56451]:VariableDeclarationStatement[56504-56551]"
  }, {
    "left" : "if (functionType.makesStructs() && !proto.isStruct())",
    "right" : "if (functionType.makesStructs() && !proto.isStruct())",
    "info" : "IfStatement[56462-56882]:IfStatement[56562-56982]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56516-56672]:Block[56616-56772]"
  }, {
    "left" : "compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE,\n                                        \"struct\", functionPrivateName));",
    "right" : "compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE,\n                                        \"struct\", functionPrivateName));",
    "info" : "ExpressionStatement[56530-56660]:ExpressionStatement[56630-56760]"
  }, {
    "left" : "if (functionType.makesDicts() && !proto.isDict())",
    "right" : "if (functionType.makesDicts() && !proto.isDict())",
    "info" : "IfStatement[56678-56882]:IfStatement[56778-56982]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56728-56882]:Block[56828-56982]"
  }, {
    "left" : "compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE,\n                                        \"dict\", functionPrivateName));",
    "right" : "compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE,\n                                        \"dict\", functionPrivateName));",
    "info" : "ExpressionStatement[56742-56870]:ExpressionStatement[56842-56970]"
  }, {
    "left" : "for (JSType baseInterface : functionType.getImplementedInterfaces())",
    "right" : "for (JSType baseInterface : functionType.getImplementedInterfaces())",
    "info" : "EnhancedForStatement[56963-57645]:EnhancedForStatement[57063-57745]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57032-57645]:Block[57132-57745]"
  }, {
    "left" : "boolean badImplementedType = false;",
    "right" : "boolean badImplementedType = false;",
    "info" : "VariableDeclarationStatement[57044-57079]:VariableDeclarationStatement[57144-57179]"
  }, {
    "left" : "ObjectType baseInterfaceObj = ObjectType.cast(baseInterface);",
    "right" : "ObjectType baseInterfaceObj = ObjectType.cast(baseInterface);",
    "info" : "VariableDeclarationStatement[57090-57151]:VariableDeclarationStatement[57190-57251]"
  }, {
    "left" : "if (baseInterfaceObj != null)",
    "right" : "if (baseInterfaceObj != null)",
    "info" : "IfStatement[57162-57518]:IfStatement[57262-57618]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57192-57460]:Block[57292-57560]"
  }, {
    "left" : "FunctionType interfaceConstructor =\n              baseInterfaceObj.getConstructor();",
    "right" : "FunctionType interfaceConstructor =\n              baseInterfaceObj.getConstructor();",
    "info" : "VariableDeclarationStatement[57206-57290]:VariableDeclarationStatement[57306-57390]"
  }, {
    "left" : "if (interfaceConstructor != null &&\n                !interfaceConstructor.isInterface())",
    "right" : "if (interfaceConstructor != null &&\n                !interfaceConstructor.isInterface())",
    "info" : "IfStatement[57303-57448]:IfStatement[57403-57548]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57392-57448]:Block[57492-57548]"
  }, {
    "left" : "badImplementedType = true;",
    "right" : "badImplementedType = true;",
    "info" : "ExpressionStatement[57408-57434]:ExpressionStatement[57508-57534]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57466-57518]:Block[57566-57618]"
  }, {
    "left" : "badImplementedType = true;",
    "right" : "badImplementedType = true;",
    "info" : "ExpressionStatement[57480-57506]:ExpressionStatement[57580-57606]"
  }, {
    "left" : "if (badImplementedType)",
    "right" : "if (badImplementedType)",
    "info" : "IfStatement[57529-57635]:IfStatement[57629-57735]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57553-57635]:Block[57653-57735]"
  }, {
    "left" : "report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);",
    "right" : "report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);",
    "info" : "ExpressionStatement[57567-57623]:ExpressionStatement[57667-57723]"
  }, {
    "left" : "validator.expectAllInterfaceProperties(t, n, functionType);",
    "right" : "validator.expectAllInterfaceProperties(t, n, functionType);",
    "info" : "ExpressionStatement[57682-57741]:ExpressionStatement[57782-57841]"
  }, {
    "left" : "if (functionType.isInterface())",
    "right" : "if (functionType.isInterface())",
    "info" : "IfStatement[57761-58901]:IfStatement[57861-59001]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57793-58901]:Block[57893-59001]"
  }, {
    "left" : "for (ObjectType extInterface : functionType.getExtendedInterfaces())",
    "right" : "for (ObjectType extInterface : functionType.getExtendedInterfaces())",
    "info" : "EnhancedForStatement[57848-58194]:EnhancedForStatement[57948-58294]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57917-58194]:Block[58017-58294]"
  }, {
    "left" : "if (extInterface.getConstructor() != null\n            && !extInterface.getConstructor().isInterface())",
    "right" : "if (extInterface.getConstructor() != null\n            && !extInterface.getConstructor().isInterface())",
    "info" : "IfStatement[57927-58186]:IfStatement[58027-58286]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58030-58186]:Block[58130-58286]"
  }, {
    "left" : "compiler.report(\n              t.makeError(n, CONFLICTING_EXTENDED_TYPE,\n                          \"interface\", functionPrivateName));",
    "right" : "compiler.report(\n              t.makeError(n, CONFLICTING_EXTENDED_TYPE,\n                          \"interface\", functionPrivateName));",
    "info" : "ExpressionStatement[58042-58176]:ExpressionStatement[58142-58276]"
  }, {
    "left" : "if (functionType.getExtendedInterfacesCount() > 1)",
    "right" : "if (functionType.getExtendedInterfacesCount() > 1)",
    "info" : "IfStatement[58268-58895]:IfStatement[58368-58995]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58319-58895]:Block[58419-58995]"
  }, {
    "left" : "HashMap<String, ObjectType> properties\n            = new HashMap<String, ObjectType>();",
    "right" : "HashMap<String, ObjectType> properties\n            = new HashMap<String, ObjectType>();",
    "info" : "VariableDeclarationStatement[58391-58478]:VariableDeclarationStatement[58491-58578]"
  }, {
    "left" : "HashMap<String, ObjectType> currentProperties\n            = new HashMap<String, ObjectType>();",
    "right" : "HashMap<String, ObjectType> currentProperties\n            = new HashMap<String, ObjectType>();",
    "info" : "VariableDeclarationStatement[58487-58581]:VariableDeclarationStatement[58587-58681]"
  }, {
    "left" : "for (ObjectType interfaceType : functionType.getExtendedInterfaces())",
    "right" : "for (ObjectType interfaceType : functionType.getExtendedInterfaces())",
    "info" : "EnhancedForStatement[58590-58887]:EnhancedForStatement[58690-58987]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58660-58887]:Block[58760-58987]"
  }, {
    "left" : "currentProperties.clear();",
    "right" : "currentProperties.clear();",
    "info" : "ExpressionStatement[58672-58698]:ExpressionStatement[58772-58798]"
  }, {
    "left" : "checkInterfaceConflictProperties(t, n, functionPrivateName,\n              properties, currentProperties, interfaceType);",
    "right" : "checkInterfaceConflictProperties(t, n, functionPrivateName,\n              properties, currentProperties, interfaceType);",
    "info" : "ExpressionStatement[58709-58829]:ExpressionStatement[58809-58929]"
  }, {
    "left" : "properties.putAll(currentProperties);",
    "right" : "properties.putAll(currentProperties);",
    "info" : "ExpressionStatement[58840-58877]:ExpressionStatement[58940-58977]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[59132-59139]:Modifier[59232-59239]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[59140-59144]:PrimitiveType[59240-59244]"
  }, {
    "left" : "visitCall",
    "right" : "visitCall",
    "info" : "SimpleName[59145-59154]:SimpleName[59245-59254]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[59155-59170]:SingleVariableDeclaration[59255-59270]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[59172-59178]:SingleVariableDeclaration[59272-59278]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59180-61240]:Block[59280-61340]"
  }, {
    "left" : "Node child = n.getFirstChild();",
    "right" : "Node child = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[59186-59217]:VariableDeclarationStatement[59286-59317]"
  }, {
    "left" : "JSType childType = getJSType(child).restrictByNotNullOrUndefined();",
    "right" : "JSType childType = getJSType(child).restrictByNotNullOrUndefined();",
    "info" : "VariableDeclarationStatement[59222-59289]:VariableDeclarationStatement[59322-59389]"
  }, {
    "left" : "if (!childType.canBeCalled())",
    "right" : "if (!childType.canBeCalled())",
    "info" : "IfStatement[59295-59427]:IfStatement[59395-59527]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59325-59427]:Block[59425-59527]"
  }, {
    "left" : "report(t, n, NOT_CALLABLE, childType.toString());",
    "right" : "report(t, n, NOT_CALLABLE, childType.toString());",
    "info" : "ExpressionStatement[59333-59382]:ExpressionStatement[59433-59482]"
  }, {
    "left" : "ensureTyped(t, n);",
    "right" : "ensureTyped(t, n);",
    "info" : "ExpressionStatement[59389-59407]:ExpressionStatement[59489-59507]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[59414-59421]:ReturnStatement[59514-59521]"
  }, {
    "left" : "if (childType.isFunctionType())",
    "right" : "if (childType.isFunctionType())",
    "info" : "IfStatement[59558-61027]:IfStatement[59658-61127]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59590-60989]:Block[59690-61089]"
  }, {
    "left" : "FunctionType functionType = childType.toMaybeFunctionType();",
    "right" : "FunctionType functionType = childType.toMaybeFunctionType();",
    "info" : "VariableDeclarationStatement[59598-59658]:VariableDeclarationStatement[59698-59758]"
  }, {
    "left" : "boolean isExtern = false;",
    "right" : "boolean isExtern = false;",
    "info" : "VariableDeclarationStatement[59666-59691]:VariableDeclarationStatement[59766-59791]"
  }, {
    "left" : "JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();",
    "right" : "JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[59698-59756]:VariableDeclarationStatement[59798-59856]"
  }, {
    "left" : "if( functionJSDocInfo != null  &&\n          functionJSDocInfo.getAssociatedNode() != null)",
    "right" : "if( functionJSDocInfo != null  &&\n          functionJSDocInfo.getAssociatedNode() != null)",
    "info" : "IfStatement[59763-59937]:IfStatement[59863-60037]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59854-59937]:Block[59954-60037]"
  }, {
    "left" : "isExtern = functionJSDocInfo.getAssociatedNode().isFromExterns();",
    "right" : "isExtern = functionJSDocInfo.getAssociatedNode().isFromExterns();",
    "info" : "ExpressionStatement[59864-59929]:ExpressionStatement[59964-60029]"
  }, {
    "left" : "if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern))",
    "right" : "if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern))",
    "info" : "IfStatement[60090-60391]:IfStatement[60190-60491]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60312-60391]:Block[60412-60491]"
  }, {
    "left" : "report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());",
    "right" : "report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());",
    "info" : "ExpressionStatement[60322-60383]:ExpressionStatement[60422-60483]"
  }, {
    "left" : "if (functionType.isOrdinaryFunction() &&\n          !functionType.getTypeOfThis().isUnknownType() &&\n          !(functionType.getTypeOfThis().toObjectType() != null &&\n          functionType.getTypeOfThis().toObjectType().isNativeObjectType()) &&\n          !(child.isGetElem() ||\n            child.isGetProp()))",
    "right" : "if (functionType.isOrdinaryFunction() &&\n          !functionType.getTypeOfThis().isUnknownType() &&\n          !(functionType.getTypeOfThis().toObjectType() != null &&\n          functionType.getTypeOfThis().toObjectType().isNativeObjectType()) &&\n          !(child.isGetElem() ||\n            child.isGetProp()))",
    "info" : "IfStatement[60494-60881]:IfStatement[60594-60981]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60805-60881]:Block[60905-60981]"
  }, {
    "left" : "report(t, n, EXPECTED_THIS_TYPE, functionType.toString());",
    "right" : "report(t, n, EXPECTED_THIS_TYPE, functionType.toString());",
    "info" : "ExpressionStatement[60815-60873]:ExpressionStatement[60915-60973]"
  }, {
    "left" : "visitParameterList(t, n, functionType);",
    "right" : "visitParameterList(t, n, functionType);",
    "info" : "ExpressionStatement[60889-60928]:ExpressionStatement[60989-61028]"
  }, {
    "left" : "ensureTyped(t, n, functionType.getReturnType());",
    "right" : "ensureTyped(t, n, functionType.getReturnType());",
    "info" : "ExpressionStatement[60935-60983]:ExpressionStatement[61035-61083]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60995-61027]:Block[61095-61127]"
  }, {
    "left" : "ensureTyped(t, n);",
    "right" : "ensureTyped(t, n);",
    "info" : "ExpressionStatement[61003-61021]:ExpressionStatement[61103-61121]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[61308-61315]:Modifier[61408-61415]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[61316-61320]:PrimitiveType[61416-61420]"
  }, {
    "left" : "visitParameterList",
    "right" : "visitParameterList",
    "info" : "SimpleName[61321-61339]:SimpleName[61421-61439]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[61340-61355]:SingleVariableDeclaration[61440-61455]"
  }, {
    "left" : "Node call",
    "right" : "Node call",
    "info" : "SingleVariableDeclaration[61357-61366]:SingleVariableDeclaration[61457-61466]"
  }, {
    "left" : "FunctionType functionType",
    "right" : "FunctionType functionType",
    "info" : "SingleVariableDeclaration[61374-61399]:SingleVariableDeclaration[61474-61499]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61401-62694]:Block[61501-62794]"
  }, {
    "left" : "Iterator<Node> arguments = call.children().iterator();",
    "right" : "Iterator<Node> arguments = call.children().iterator();",
    "info" : "VariableDeclarationStatement[61407-61461]:VariableDeclarationStatement[61507-61561]"
  }, {
    "left" : "arguments.next();",
    "right" : "arguments.next();",
    "info" : "ExpressionStatement[61466-61483]:ExpressionStatement[61566-61583]"
  }, {
    "left" : "Iterator<Node> parameters = functionType.getParameters().iterator();",
    "right" : "Iterator<Node> parameters = functionType.getParameters().iterator();",
    "info" : "VariableDeclarationStatement[61515-61583]:VariableDeclarationStatement[61615-61683]"
  }, {
    "left" : "int ordinal = 0;",
    "right" : "int ordinal = 0;",
    "info" : "VariableDeclarationStatement[61588-61604]:VariableDeclarationStatement[61688-61704]"
  }, {
    "left" : "Node parameter = null;",
    "right" : "Node parameter = null;",
    "info" : "VariableDeclarationStatement[61609-61631]:VariableDeclarationStatement[61709-61731]"
  }, {
    "left" : "Node argument = null;",
    "right" : "Node argument = null;",
    "info" : "VariableDeclarationStatement[61636-61657]:VariableDeclarationStatement[61736-61757]"
  }, {
    "left" : "while (arguments.hasNext() &&\n           (parameters.hasNext() ||\n            parameter != null && parameter.isVarArgs()))",
    "right" : "while (arguments.hasNext() &&\n           (parameters.hasNext() ||\n            parameter != null && parameter.isVarArgs()))",
    "info" : "WhileStatement[61662-62191]:WhileStatement[61762-62291]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61785-62191]:Block[61885-62291]"
  }, {
    "left" : "if (parameters.hasNext())",
    "right" : "if (parameters.hasNext())",
    "info" : "IfStatement[61929-62003]:IfStatement[62029-62103]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61955-62003]:Block[62055-62103]"
  }, {
    "left" : "parameter = parameters.next();",
    "right" : "parameter = parameters.next();",
    "info" : "ExpressionStatement[61965-61995]:ExpressionStatement[62065-62095]"
  }, {
    "left" : "argument = arguments.next();",
    "right" : "argument = arguments.next();",
    "info" : "ExpressionStatement[62010-62038]:ExpressionStatement[62110-62138]"
  }, {
    "left" : "ordinal++;",
    "right" : "ordinal++;",
    "info" : "ExpressionStatement[62045-62055]:ExpressionStatement[62145-62155]"
  }, {
    "left" : "validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);",
    "right" : "validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);",
    "info" : "ExpressionStatement[62063-62185]:ExpressionStatement[62163-62285]"
  }, {
    "left" : "int numArgs = call.getChildCount() - 1;",
    "right" : "int numArgs = call.getChildCount() - 1;",
    "info" : "VariableDeclarationStatement[62197-62236]:VariableDeclarationStatement[62297-62336]"
  }, {
    "left" : "int minArgs = functionType.getMinArguments();",
    "right" : "int minArgs = functionType.getMinArguments();",
    "info" : "VariableDeclarationStatement[62241-62286]:VariableDeclarationStatement[62341-62386]"
  }, {
    "left" : "int maxArgs = functionType.getMaxArguments();",
    "right" : "int maxArgs = functionType.getMaxArguments();",
    "info" : "VariableDeclarationStatement[62291-62336]:VariableDeclarationStatement[62391-62436]"
  }, {
    "left" : "if (minArgs > numArgs || maxArgs < numArgs)",
    "right" : "if (minArgs > numArgs || maxArgs < numArgs)",
    "info" : "IfStatement[62341-62690]:IfStatement[62441-62790]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62385-62690]:Block[62485-62790]"
  }, {
    "left" : "report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");",
    "right" : "report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");",
    "info" : "ExpressionStatement[62393-62684]:ExpressionStatement[62493-62784]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[62923-62930]:Modifier[63023-63030]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[62931-62935]:PrimitiveType[63031-63035]"
  }, {
    "left" : "visitReturn",
    "right" : "visitReturn",
    "info" : "SimpleName[62936-62947]:SimpleName[63036-63047]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[62948-62963]:SingleVariableDeclaration[63048-63063]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[62965-62971]:SingleVariableDeclaration[63065-63071]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62973-63820]:Block[63073-63920]"
  }, {
    "left" : "JSType jsType = getJSType(t.getEnclosingFunction());",
    "right" : "JSType jsType = getJSType(t.getEnclosingFunction());",
    "info" : "VariableDeclarationStatement[62979-63031]:VariableDeclarationStatement[63079-63131]"
  }, {
    "left" : "if (jsType.isFunctionType())",
    "right" : "if (jsType.isFunctionType())",
    "info" : "IfStatement[63037-63816]:IfStatement[63137-63916]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63066-63816]:Block[63166-63916]"
  }, {
    "left" : "FunctionType functionType = jsType.toMaybeFunctionType();",
    "right" : "FunctionType functionType = jsType.toMaybeFunctionType();",
    "info" : "VariableDeclarationStatement[63074-63131]:VariableDeclarationStatement[63174-63231]"
  }, {
    "left" : "JSType returnType = functionType.getReturnType();",
    "right" : "JSType returnType = functionType.getReturnType();",
    "info" : "VariableDeclarationStatement[63139-63188]:VariableDeclarationStatement[63239-63288]"
  }, {
    "left" : "if (returnType == null)",
    "right" : "if (returnType == null)",
    "info" : "IfStatement[63296-63376]:IfStatement[63396-63476]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63320-63376]:Block[63420-63476]"
  }, {
    "left" : "returnType = getNativeType(VOID_TYPE);",
    "right" : "returnType = getNativeType(VOID_TYPE);",
    "info" : "ExpressionStatement[63330-63368]:ExpressionStatement[63430-63468]"
  }, {
    "left" : "Node valueNode = n.getFirstChild();",
    "right" : "Node valueNode = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[63428-63463]:VariableDeclarationStatement[63528-63563]"
  }, {
    "left" : "JSType actualReturnType;",
    "right" : "JSType actualReturnType;",
    "info" : "VariableDeclarationStatement[63470-63494]:VariableDeclarationStatement[63570-63594]"
  }, {
    "left" : "if (valueNode == null)",
    "right" : "if (valueNode == null)",
    "info" : "IfStatement[63501-63673]:IfStatement[63601-63773]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63524-63609]:Block[63624-63709]"
  }, {
    "left" : "actualReturnType = getNativeType(VOID_TYPE);",
    "right" : "actualReturnType = getNativeType(VOID_TYPE);",
    "info" : "ExpressionStatement[63534-63578]:ExpressionStatement[63634-63678]"
  }, {
    "left" : "valueNode = n;",
    "right" : "valueNode = n;",
    "info" : "ExpressionStatement[63587-63601]:ExpressionStatement[63687-63701]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63615-63673]:Block[63715-63773]"
  }, {
    "left" : "actualReturnType = getJSType(valueNode);",
    "right" : "actualReturnType = getJSType(valueNode);",
    "info" : "ExpressionStatement[63625-63665]:ExpressionStatement[63725-63765]"
  }, {
    "left" : "validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType,\n          \"inconsistent return type\");",
    "right" : "validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType,\n          \"inconsistent return type\");",
    "info" : "ExpressionStatement[63700-63810]:ExpressionStatement[63800-63910]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[64215-64222]:Modifier[64315-64322]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[64223-64227]:PrimitiveType[64323-64327]"
  }, {
    "left" : "visitBinaryOperator",
    "right" : "visitBinaryOperator",
    "info" : "SimpleName[64228-64247]:SimpleName[64328-64347]"
  }, {
    "left" : "int op",
    "right" : "int op",
    "info" : "SingleVariableDeclaration[64248-64254]:SingleVariableDeclaration[64348-64354]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[64256-64271]:SingleVariableDeclaration[64356-64371]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[64273-64279]:SingleVariableDeclaration[64373-64379]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64281-65897]:Block[64381-65997]"
  }, {
    "left" : "Node left = n.getFirstChild();",
    "right" : "Node left = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[64287-64317]:VariableDeclarationStatement[64387-64417]"
  }, {
    "left" : "JSType leftType = getJSType(left);",
    "right" : "JSType leftType = getJSType(left);",
    "info" : "VariableDeclarationStatement[64322-64356]:VariableDeclarationStatement[64422-64456]"
  }, {
    "left" : "Node right = n.getLastChild();",
    "right" : "Node right = n.getLastChild();",
    "info" : "VariableDeclarationStatement[64361-64391]:VariableDeclarationStatement[64461-64491]"
  }, {
    "left" : "JSType rightType = getJSType(right);",
    "right" : "JSType rightType = getJSType(right);",
    "info" : "VariableDeclarationStatement[64396-64432]:VariableDeclarationStatement[64496-64532]"
  }, {
    "left" : "switch (op) {\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.ASSIGN_URSH:\n      case Token.URSH:\n        if (!leftType.matchesInt32Context()) {\n          report(t, left, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), leftType.toString());\n        }\n        if (!rightType.matchesUint32Context()) {\n          report(t, right, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), rightType.toString());\n        }\n        break;\n\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_SUB:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.SUB:\n        validator.expectNumber(t, left, leftType, \"left operand\");\n        validator.expectNumber(t, right, rightType, \"right operand\");\n        break;\n\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITOR:\n      case Token.BITAND:\n      case Token.BITXOR:\n      case Token.BITOR:\n        validator.expectBitwiseable(t, left, leftType,\n            \"bad left operand to bitwise operator\");\n        validator.expectBitwiseable(t, right, rightType,\n            \"bad right operand to bitwise operator\");\n        break;\n\n      case Token.ASSIGN_ADD:\n      case Token.ADD:\n        break;\n\n      default:\n        report(t, n, UNEXPECTED_TOKEN, Token.name(op));\n    }",
    "right" : "switch (op) {\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.ASSIGN_URSH:\n      case Token.URSH:\n        if (!leftType.matchesInt32Context()) {\n          report(t, left, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), leftType.toString());\n        }\n        if (!rightType.matchesUint32Context()) {\n          report(t, right, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), rightType.toString());\n        }\n        break;\n\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_SUB:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.SUB:\n        validator.expectNumber(t, left, leftType, \"left operand\");\n        validator.expectNumber(t, right, rightType, \"right operand\");\n        break;\n\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITOR:\n      case Token.BITAND:\n      case Token.BITXOR:\n      case Token.BITOR:\n        validator.expectBitwiseable(t, left, leftType,\n            \"bad left operand to bitwise operator\");\n        validator.expectBitwiseable(t, right, rightType,\n            \"bad right operand to bitwise operator\");\n        break;\n\n      case Token.ASSIGN_ADD:\n      case Token.ADD:\n        break;\n\n      default:\n        report(t, n, UNEXPECTED_TOKEN, Token.name(op));\n    }",
    "info" : "SwitchStatement[64437-65870]:SwitchStatement[64537-65970]"
  }, {
    "left" : "case Token.ASSIGN_LSH:",
    "right" : "case Token.ASSIGN_LSH:",
    "info" : "SwitchCase[64457-64479]:SwitchCase[64557-64579]"
  }, {
    "left" : "case Token.ASSIGN_RSH:",
    "right" : "case Token.ASSIGN_RSH:",
    "info" : "SwitchCase[64486-64508]:SwitchCase[64586-64608]"
  }, {
    "left" : "case Token.LSH:",
    "right" : "case Token.LSH:",
    "info" : "SwitchCase[64515-64530]:SwitchCase[64615-64630]"
  }, {
    "left" : "case Token.RSH:",
    "right" : "case Token.RSH:",
    "info" : "SwitchCase[64537-64552]:SwitchCase[64637-64652]"
  }, {
    "left" : "case Token.ASSIGN_URSH:",
    "right" : "case Token.ASSIGN_URSH:",
    "info" : "SwitchCase[64559-64582]:SwitchCase[64659-64682]"
  }, {
    "left" : "case Token.URSH:",
    "right" : "case Token.URSH:",
    "info" : "SwitchCase[64589-64605]:SwitchCase[64689-64705]"
  }, {
    "left" : "if (!leftType.matchesInt32Context())",
    "right" : "if (!leftType.matchesInt32Context())",
    "info" : "IfStatement[64614-64775]:IfStatement[64714-64875]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64651-64775]:Block[64751-64875]"
  }, {
    "left" : "report(t, left, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), leftType.toString());",
    "right" : "report(t, left, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), leftType.toString());",
    "info" : "ExpressionStatement[64663-64765]:ExpressionStatement[64763-64865]"
  }, {
    "left" : "if (!rightType.matchesUint32Context())",
    "right" : "if (!rightType.matchesUint32Context())",
    "info" : "IfStatement[64784-64949]:IfStatement[64884-65049]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64823-64949]:Block[64923-65049]"
  }, {
    "left" : "report(t, right, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), rightType.toString());",
    "right" : "report(t, right, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), rightType.toString());",
    "info" : "ExpressionStatement[64835-64939]:ExpressionStatement[64935-65039]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[64958-64964]:BreakStatement[65058-65064]"
  }, {
    "left" : "case Token.ASSIGN_DIV:",
    "right" : "case Token.ASSIGN_DIV:",
    "info" : "SwitchCase[64972-64994]:SwitchCase[65072-65094]"
  }, {
    "left" : "case Token.ASSIGN_MOD:",
    "right" : "case Token.ASSIGN_MOD:",
    "info" : "SwitchCase[65001-65023]:SwitchCase[65101-65123]"
  }, {
    "left" : "case Token.ASSIGN_MUL:",
    "right" : "case Token.ASSIGN_MUL:",
    "info" : "SwitchCase[65030-65052]:SwitchCase[65130-65152]"
  }, {
    "left" : "case Token.ASSIGN_SUB:",
    "right" : "case Token.ASSIGN_SUB:",
    "info" : "SwitchCase[65059-65081]:SwitchCase[65159-65181]"
  }, {
    "left" : "case Token.DIV:",
    "right" : "case Token.DIV:",
    "info" : "SwitchCase[65088-65103]:SwitchCase[65188-65203]"
  }, {
    "left" : "case Token.MOD:",
    "right" : "case Token.MOD:",
    "info" : "SwitchCase[65110-65125]:SwitchCase[65210-65225]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[65132-65147]:SwitchCase[65232-65247]"
  }, {
    "left" : "case Token.SUB:",
    "right" : "case Token.SUB:",
    "info" : "SwitchCase[65154-65169]:SwitchCase[65254-65269]"
  }, {
    "left" : "validator.expectNumber(t, left, leftType, \"left operand\");",
    "right" : "validator.expectNumber(t, left, leftType, \"left operand\");",
    "info" : "ExpressionStatement[65178-65236]:ExpressionStatement[65278-65336]"
  }, {
    "left" : "validator.expectNumber(t, right, rightType, \"right operand\");",
    "right" : "validator.expectNumber(t, right, rightType, \"right operand\");",
    "info" : "ExpressionStatement[65245-65306]:ExpressionStatement[65345-65406]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[65315-65321]:BreakStatement[65415-65421]"
  }, {
    "left" : "case Token.ASSIGN_BITAND:",
    "right" : "case Token.ASSIGN_BITAND:",
    "info" : "SwitchCase[65329-65354]:SwitchCase[65429-65454]"
  }, {
    "left" : "case Token.ASSIGN_BITXOR:",
    "right" : "case Token.ASSIGN_BITXOR:",
    "info" : "SwitchCase[65361-65386]:SwitchCase[65461-65486]"
  }, {
    "left" : "case Token.ASSIGN_BITOR:",
    "right" : "case Token.ASSIGN_BITOR:",
    "info" : "SwitchCase[65393-65417]:SwitchCase[65493-65517]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[65424-65442]:SwitchCase[65524-65542]"
  }, {
    "left" : "case Token.BITXOR:",
    "right" : "case Token.BITXOR:",
    "info" : "SwitchCase[65449-65467]:SwitchCase[65549-65567]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[65474-65491]:SwitchCase[65574-65591]"
  }, {
    "left" : "validator.expectBitwiseable(t, left, leftType,\n            \"bad left operand to bitwise operator\");",
    "right" : "validator.expectBitwiseable(t, left, leftType,\n            \"bad left operand to bitwise operator\");",
    "info" : "ExpressionStatement[65500-65599]:ExpressionStatement[65600-65699]"
  }, {
    "left" : "validator.expectBitwiseable(t, right, rightType,\n            \"bad right operand to bitwise operator\");",
    "right" : "validator.expectBitwiseable(t, right, rightType,\n            \"bad right operand to bitwise operator\");",
    "info" : "ExpressionStatement[65608-65710]:ExpressionStatement[65708-65810]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[65719-65725]:BreakStatement[65819-65825]"
  }, {
    "left" : "case Token.ASSIGN_ADD:",
    "right" : "case Token.ASSIGN_ADD:",
    "info" : "SwitchCase[65733-65755]:SwitchCase[65833-65855]"
  }, {
    "left" : "case Token.ADD:",
    "right" : "case Token.ADD:",
    "info" : "SwitchCase[65762-65777]:SwitchCase[65862-65877]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[65786-65792]:BreakStatement[65886-65892]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[65800-65808]:SwitchCase[65900-65908]"
  }, {
    "left" : "report(t, n, UNEXPECTED_TOKEN, Token.name(op));",
    "right" : "report(t, n, UNEXPECTED_TOKEN, Token.name(op));",
    "info" : "ExpressionStatement[65817-65864]:ExpressionStatement[65917-65964]"
  }, {
    "left" : "ensureTyped(t, n);",
    "right" : "ensureTyped(t, n);",
    "info" : "ExpressionStatement[65875-65893]:ExpressionStatement[65975-65993]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[66341-66348]:Modifier[66441-66448]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[66349-66353]:PrimitiveType[66449-66453]"
  }, {
    "left" : "checkEnumAlias",
    "right" : "checkEnumAlias",
    "info" : "SimpleName[66354-66368]:SimpleName[66454-66468]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[66376-66391]:SingleVariableDeclaration[66476-66491]"
  }, {
    "left" : "JSDocInfo declInfo",
    "right" : "JSDocInfo declInfo",
    "info" : "SingleVariableDeclaration[66393-66411]:SingleVariableDeclaration[66493-66511]"
  }, {
    "left" : "Node value",
    "right" : "Node value",
    "info" : "SingleVariableDeclaration[66413-66423]:SingleVariableDeclaration[66513-66523]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66425-66954]:Block[66525-67054]"
  }, {
    "left" : "if (declInfo == null || !declInfo.hasEnumParameterType())",
    "right" : "if (declInfo == null || !declInfo.hasEnumParameterType())",
    "info" : "IfStatement[66431-66510]:IfStatement[66531-66610]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66489-66510]:Block[66589-66610]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[66497-66504]:ReturnStatement[66597-66604]"
  }, {
    "left" : "JSType valueType = getJSType(value);",
    "right" : "JSType valueType = getJSType(value);",
    "info" : "VariableDeclarationStatement[66516-66552]:VariableDeclarationStatement[66616-66652]"
  }, {
    "left" : "if (!valueType.isEnumType())",
    "right" : "if (!valueType.isEnumType())",
    "info" : "IfStatement[66557-66607]:IfStatement[66657-66707]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66586-66607]:Block[66686-66707]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[66594-66601]:ReturnStatement[66694-66701]"
  }, {
    "left" : "EnumType valueEnumType = valueType.toMaybeEnumType();",
    "right" : "EnumType valueEnumType = valueType.toMaybeEnumType();",
    "info" : "VariableDeclarationStatement[66613-66666]:VariableDeclarationStatement[66713-66766]"
  }, {
    "left" : "JSType valueEnumPrimitiveType =\n        valueEnumType.getElementsType().getPrimitiveType();",
    "right" : "JSType valueEnumPrimitiveType =\n        valueEnumType.getElementsType().getPrimitiveType();",
    "info" : "VariableDeclarationStatement[66671-66762]:VariableDeclarationStatement[66771-66862]"
  }, {
    "left" : "validator.expectCanAssignTo(t, value, valueEnumPrimitiveType,\n        declInfo.getEnumParameterType().evaluate(t.getScope(), typeRegistry),\n        \"incompatible enum element types\");",
    "right" : "validator.expectCanAssignTo(t, value, valueEnumPrimitiveType,\n        declInfo.getEnumParameterType().evaluate(t.getScope(), typeRegistry),\n        \"incompatible enum element types\");",
    "info" : "ExpressionStatement[66767-66950]:ExpressionStatement[66867-67050]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[67064-67071]:Modifier[67164-67171]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[67072-67078]:SimpleType[67172-67178]"
  }, {
    "left" : "getJSType",
    "right" : "getJSType",
    "info" : "SimpleName[67079-67088]:SimpleName[67179-67188]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[67089-67095]:SingleVariableDeclaration[67189-67195]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67097-67525]:Block[67197-67625]"
  }, {
    "left" : "JSType jsType = n.getJSType();",
    "right" : "JSType jsType = n.getJSType();",
    "info" : "VariableDeclarationStatement[67103-67133]:VariableDeclarationStatement[67203-67233]"
  }, {
    "left" : "if (jsType == null)",
    "right" : "if (jsType == null)",
    "info" : "IfStatement[67138-67521]:IfStatement[67238-67621]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67158-67487]:Block[67258-67587]"
  }, {
    "left" : "return getNativeType(UNKNOWN_TYPE);",
    "right" : "return getNativeType(UNKNOWN_TYPE);",
    "info" : "ReturnStatement[67446-67481]:ReturnStatement[67546-67581]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67493-67521]:Block[67593-67621]"
  }, {
    "left" : "return jsType;",
    "right" : "return jsType;",
    "info" : "ReturnStatement[67501-67515]:ReturnStatement[67601-67615]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[67964-67971]:Modifier[68064-68071]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[67972-67976]:PrimitiveType[68072-68076]"
  }, {
    "left" : "ensureTyped",
    "right" : "ensureTyped",
    "info" : "SimpleName[67977-67988]:SimpleName[68077-68088]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[67989-68004]:SingleVariableDeclaration[68089-68104]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[68006-68012]:SingleVariableDeclaration[68106-68112]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68014-68071]:Block[68114-68171]"
  }, {
    "left" : "ensureTyped(t, n, getNativeType(UNKNOWN_TYPE));",
    "right" : "ensureTyped(t, n, getNativeType(UNKNOWN_TYPE));",
    "info" : "ExpressionStatement[68020-68067]:ExpressionStatement[68120-68167]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[68075-68082]:Modifier[68175-68182]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[68083-68087]:PrimitiveType[68183-68187]"
  }, {
    "left" : "ensureTyped",
    "right" : "ensureTyped",
    "info" : "SimpleName[68088-68099]:SimpleName[68188-68199]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[68100-68115]:SingleVariableDeclaration[68200-68215]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[68117-68123]:SingleVariableDeclaration[68217-68223]"
  }, {
    "left" : "JSTypeNative type",
    "right" : "JSTypeNative type",
    "info" : "SingleVariableDeclaration[68125-68142]:SingleVariableDeclaration[68225-68242]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68144-68193]:Block[68244-68293]"
  }, {
    "left" : "ensureTyped(t, n, getNativeType(type));",
    "right" : "ensureTyped(t, n, getNativeType(type));",
    "info" : "ExpressionStatement[68150-68189]:ExpressionStatement[68250-68289]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[69009-69016]:Modifier[69109-69116]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[69017-69021]:PrimitiveType[69117-69121]"
  }, {
    "left" : "ensureTyped",
    "right" : "ensureTyped",
    "info" : "SimpleName[69022-69033]:SimpleName[69122-69133]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[69034-69049]:SingleVariableDeclaration[69134-69149]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[69051-69057]:SingleVariableDeclaration[69151-69157]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[69059-69070]:SingleVariableDeclaration[69159-69170]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69072-70098]:Block[69172-70198]"
  }, {
    "left" : "Preconditions.checkState(!n.isFunction() ||\n            type.isFunctionType() ||\n            type.isUnknownType());",
    "right" : "Preconditions.checkState(!n.isFunction() ||\n            type.isFunctionType() ||\n            type.isUnknownType());",
    "info" : "ExpressionStatement[69136-69251]:ExpressionStatement[69236-69351]"
  }, {
    "left" : "JSDocInfo info = n.getJSDocInfo();",
    "right" : "JSDocInfo info = n.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[69256-69290]:VariableDeclarationStatement[69356-69390]"
  }, {
    "left" : "if (info != null)",
    "right" : "if (info != null)",
    "info" : "IfStatement[69295-70029]:IfStatement[69395-70129]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69313-70029]:Block[69413-70129]"
  }, {
    "left" : "if (info.hasType())",
    "right" : "if (info.hasType())",
    "info" : "IfStatement[69321-69780]:IfStatement[69421-69880]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69341-69780]:Block[69441-69880]"
  }, {
    "left" : "JSType infoType = info.getType().evaluate(t.getScope(), typeRegistry);",
    "right" : "JSType infoType = info.getType().evaluate(t.getScope(), typeRegistry);",
    "info" : "VariableDeclarationStatement[69622-69692]:VariableDeclarationStatement[69722-69792]"
  }, {
    "left" : "validator.expectCanCast(t, n, infoType, type);",
    "right" : "validator.expectCanCast(t, n, infoType, type);",
    "info" : "ExpressionStatement[69701-69747]:ExpressionStatement[69801-69847]"
  }, {
    "left" : "type = infoType;",
    "right" : "type = infoType;",
    "info" : "ExpressionStatement[69756-69772]:ExpressionStatement[69856-69872]"
  }, {
    "left" : "if (info.isImplicitCast() && !inExterns)",
    "right" : "if (info.isImplicitCast() && !inExterns)",
    "info" : "IfStatement[69788-70023]:IfStatement[69888-70123]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69829-70023]:Block[69929-70123]"
  }, {
    "left" : "String propName = n.isGetProp() ?\n            n.getLastChild().getString() : \"(missing)\";",
    "right" : "String propName = n.isGetProp() ?\n            n.getLastChild().getString() : \"(missing)\";",
    "info" : "VariableDeclarationStatement[69839-69928]:VariableDeclarationStatement[69939-70028]"
  }, {
    "left" : "compiler.report(\n            t.makeError(n, ILLEGAL_IMPLICIT_CAST, propName));",
    "right" : "compiler.report(\n            t.makeError(n, ILLEGAL_IMPLICIT_CAST, propName));",
    "info" : "ExpressionStatement[69937-70015]:ExpressionStatement[70037-70115]"
  }, {
    "left" : "if (n.getJSType() == null)",
    "right" : "if (n.getJSType() == null)",
    "info" : "IfStatement[70035-70094]:IfStatement[70135-70194]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70062-70094]:Block[70162-70194]"
  }, {
    "left" : "n.setJSType(type);",
    "right" : "n.setJSType(type);",
    "info" : "ExpressionStatement[70070-70088]:ExpressionStatement[70170-70188]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[70222-70228]:PrimitiveType[70322-70328]"
  }, {
    "left" : "getTypedPercent",
    "right" : "getTypedPercent",
    "info" : "SimpleName[70229-70244]:SimpleName[70329-70344]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70247-70369]:Block[70347-70469]"
  }, {
    "left" : "int total = nullCount + unknownCount + typedCount;",
    "right" : "int total = nullCount + unknownCount + typedCount;",
    "info" : "VariableDeclarationStatement[70253-70303]:VariableDeclarationStatement[70353-70403]"
  }, {
    "left" : "return (total == 0) ? 0.0 : (100.0 * typedCount) / total;",
    "right" : "return (total == 0) ? 0.0 : (100.0 * typedCount) / total;",
    "info" : "ReturnStatement[70308-70365]:ReturnStatement[70408-70465]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[70373-70380]:Modifier[70473-70480]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[70381-70387]:SimpleType[70481-70487]"
  }, {
    "left" : "getNativeType",
    "right" : "getNativeType",
    "info" : "SimpleName[70388-70401]:SimpleName[70488-70501]"
  }, {
    "left" : "JSTypeNative typeId",
    "right" : "JSTypeNative typeId",
    "info" : "SingleVariableDeclaration[70402-70421]:SingleVariableDeclaration[70502-70521]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70423-70475]:Block[70523-70575]"
  }, {
    "left" : "return typeRegistry.getNativeType(typeId);",
    "right" : "return typeRegistry.getNativeType(typeId);",
    "info" : "ReturnStatement[70429-70471]:ReturnStatement[70529-70571]"
  } ]
}