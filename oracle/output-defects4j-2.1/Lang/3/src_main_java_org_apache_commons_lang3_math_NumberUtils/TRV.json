{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public static final Long LONG_ZERO = Long.valueOf(0L);",
      "right" : "public static final Long LONG_ZERO = Long.valueOf(0L);",
      "info" : "FieldDeclaration[1124-1222]:FieldDeclaration[1124-1222]"
    }, {
      "left" : "public static final Long LONG_ONE = Long.valueOf(1L);",
      "right" : "public static final Long LONG_ONE = Long.valueOf(1L);",
      "info" : "FieldDeclaration[1227-1323]:FieldDeclaration[1227-1323]"
    }, {
      "left" : "public static final Long LONG_MINUS_ONE = Long.valueOf(-1L);",
      "right" : "public static final Long LONG_MINUS_ONE = Long.valueOf(-1L);",
      "info" : "FieldDeclaration[1328-1437]:FieldDeclaration[1328-1437]"
    }, {
      "left" : "public static final Integer INTEGER_ZERO = Integer.valueOf(0);",
      "right" : "public static final Integer INTEGER_ZERO = Integer.valueOf(0);",
      "info" : "FieldDeclaration[1442-1551]:FieldDeclaration[1442-1551]"
    }, {
      "left" : "public static final Integer INTEGER_ONE = Integer.valueOf(1);",
      "right" : "public static final Integer INTEGER_ONE = Integer.valueOf(1);",
      "info" : "FieldDeclaration[1556-1663]:FieldDeclaration[1556-1663]"
    }, {
      "left" : "public static final Integer INTEGER_MINUS_ONE = Integer.valueOf(-1);",
      "right" : "public static final Integer INTEGER_MINUS_ONE = Integer.valueOf(-1);",
      "info" : "FieldDeclaration[1668-1788]:FieldDeclaration[1668-1788]"
    }, {
      "left" : "public static final Short SHORT_ZERO = Short.valueOf((short) 0);",
      "right" : "public static final Short SHORT_ZERO = Short.valueOf((short) 0);",
      "info" : "FieldDeclaration[1793-1902]:FieldDeclaration[1793-1902]"
    }, {
      "left" : "public static final Short SHORT_ONE = Short.valueOf((short) 1);",
      "right" : "public static final Short SHORT_ONE = Short.valueOf((short) 1);",
      "info" : "FieldDeclaration[1907-2014]:FieldDeclaration[1907-2014]"
    }, {
      "left" : "public static final Short SHORT_MINUS_ONE = Short.valueOf((short) -1);",
      "right" : "public static final Short SHORT_MINUS_ONE = Short.valueOf((short) -1);",
      "info" : "FieldDeclaration[2019-2139]:FieldDeclaration[2019-2139]"
    }, {
      "left" : "public static final Byte BYTE_ZERO = Byte.valueOf((byte) 0);",
      "right" : "public static final Byte BYTE_ZERO = Byte.valueOf((byte) 0);",
      "info" : "FieldDeclaration[2144-2248]:FieldDeclaration[2144-2248]"
    }, {
      "left" : "public static final Byte BYTE_ONE = Byte.valueOf((byte) 1);",
      "right" : "public static final Byte BYTE_ONE = Byte.valueOf((byte) 1);",
      "info" : "FieldDeclaration[2253-2355]:FieldDeclaration[2253-2355]"
    }, {
      "left" : "public static final Byte BYTE_MINUS_ONE = Byte.valueOf((byte) -1);",
      "right" : "public static final Byte BYTE_MINUS_ONE = Byte.valueOf((byte) -1);",
      "info" : "FieldDeclaration[2360-2475]:FieldDeclaration[2360-2475]"
    }, {
      "left" : "public static final Double DOUBLE_ZERO = Double.valueOf(0.0d);",
      "right" : "public static final Double DOUBLE_ZERO = Double.valueOf(0.0d);",
      "info" : "FieldDeclaration[2480-2588]:FieldDeclaration[2480-2588]"
    }, {
      "left" : "public static final Double DOUBLE_ONE = Double.valueOf(1.0d);",
      "right" : "public static final Double DOUBLE_ONE = Double.valueOf(1.0d);",
      "info" : "FieldDeclaration[2593-2699]:FieldDeclaration[2593-2699]"
    }, {
      "left" : "public static final Double DOUBLE_MINUS_ONE = Double.valueOf(-1.0d);",
      "right" : "public static final Double DOUBLE_MINUS_ONE = Double.valueOf(-1.0d);",
      "info" : "FieldDeclaration[2704-2823]:FieldDeclaration[2704-2823]"
    }, {
      "left" : "public static final Float FLOAT_ZERO = Float.valueOf(0.0f);",
      "right" : "public static final Float FLOAT_ZERO = Float.valueOf(0.0f);",
      "info" : "FieldDeclaration[2828-2932]:FieldDeclaration[2828-2932]"
    }, {
      "left" : "public static final Float FLOAT_ONE = Float.valueOf(1.0f);",
      "right" : "public static final Float FLOAT_ONE = Float.valueOf(1.0f);",
      "info" : "FieldDeclaration[2937-3039]:FieldDeclaration[2937-3039]"
    }, {
      "left" : "public static final Float FLOAT_MINUS_ONE = Float.valueOf(-1.0f);",
      "right" : "public static final Float FLOAT_MINUS_ONE = Float.valueOf(-1.0f);",
      "info" : "FieldDeclaration[3044-3159]:FieldDeclaration[3044-3159]"
    }, {
      "left" : "public NumberUtils()",
      "right" : "public NumberUtils()",
      "info" : "MethodDeclaration[3165-3524]:MethodDeclaration[3165-3524]"
    }, {
      "left" : "public static int toInt(final String str)",
      "right" : "public static int toInt(final String str)",
      "info" : "MethodDeclaration[3608-4242]:MethodDeclaration[3608-4242]"
    }, {
      "left" : "public static int toInt(final String str, final int defaultValue)",
      "right" : "public static int toInt(final String str, final int defaultValue)",
      "info" : "MethodDeclaration[4248-5135]:MethodDeclaration[4248-5135]"
    }, {
      "left" : "public static long toLong(final String str)",
      "right" : "public static long toLong(final String str)",
      "info" : "MethodDeclaration[5141-5783]:MethodDeclaration[5141-5783]"
    }, {
      "left" : "public static long toLong(final String str, final long defaultValue)",
      "right" : "public static long toLong(final String str, final long defaultValue)",
      "info" : "MethodDeclaration[5789-6688]:MethodDeclaration[5789-6688]"
    }, {
      "left" : "public static float toFloat(final String str)",
      "right" : "public static float toFloat(final String str)",
      "info" : "MethodDeclaration[6694-7397]:MethodDeclaration[6694-7397]"
    }, {
      "left" : "public static float toFloat(final String str, final float defaultValue)",
      "right" : "public static float toFloat(final String str, final float defaultValue)",
      "info" : "MethodDeclaration[7403-8363]:MethodDeclaration[7403-8363]"
    }, {
      "left" : "public static double toDouble(final String str)",
      "right" : "public static double toDouble(final String str)",
      "info" : "MethodDeclaration[8369-9080]:MethodDeclaration[8369-9080]"
    }, {
      "left" : "public static double toDouble(final String str, final double defaultValue)",
      "right" : "public static double toDouble(final String str, final double defaultValue)",
      "info" : "MethodDeclaration[9086-10051]:MethodDeclaration[9086-10051]"
    }, {
      "left" : "public static byte toByte(final String str)",
      "right" : "public static byte toByte(final String str)",
      "info" : "MethodDeclaration[10137-10785]:MethodDeclaration[10137-10785]"
    }, {
      "left" : "public static byte toByte(final String str, final byte defaultValue)",
      "right" : "public static byte toByte(final String str, final byte defaultValue)",
      "info" : "MethodDeclaration[10791-11683]:MethodDeclaration[10791-11683]"
    }, {
      "left" : "public static short toShort(final String str)",
      "right" : "public static short toShort(final String str)",
      "info" : "MethodDeclaration[11689-12346]:MethodDeclaration[11689-12346]"
    }, {
      "left" : "public static short toShort(final String str, final short defaultValue)",
      "right" : "public static short toShort(final String str, final short defaultValue)",
      "info" : "MethodDeclaration[12352-13255]:MethodDeclaration[12352-13255]"
    }, {
      "left" : "private static boolean isAllZeros(final String str)",
      "right" : "private static boolean isAllZeros(final String str)",
      "info" : "MethodDeclaration[22907-23475]:MethodDeclaration[23167-23735]"
    }, {
      "left" : "public static Float createFloat(final String str)",
      "right" : "public static Float createFloat(final String str)",
      "info" : "MethodDeclaration[23559-24099]:MethodDeclaration[23819-24359]"
    }, {
      "left" : "public static Double createDouble(final String str)",
      "right" : "public static Double createDouble(final String str)",
      "info" : "MethodDeclaration[24105-24650]:MethodDeclaration[24365-24910]"
    }, {
      "left" : "public static Integer createInteger(final String str)",
      "right" : "public static Integer createInteger(final String str)",
      "info" : "MethodDeclaration[24656-25315]:MethodDeclaration[24916-25575]"
    }, {
      "left" : "public static Long createLong(final String str)",
      "right" : "public static Long createLong(final String str)",
      "info" : "MethodDeclaration[25321-25909]:MethodDeclaration[25581-26169]"
    }, {
      "left" : "public static BigInteger createBigInteger(final String str)",
      "right" : "public static BigInteger createBigInteger(final String str)",
      "info" : "MethodDeclaration[25915-27319]:MethodDeclaration[26175-27579]"
    }, {
      "left" : "public static BigDecimal createBigDecimal(final String str)",
      "right" : "public static BigDecimal createBigDecimal(final String str)",
      "info" : "MethodDeclaration[27325-28472]:MethodDeclaration[27585-28732]"
    }, {
      "left" : "public static long min(final long[] array)",
      "right" : "public static long min(final long[] array)",
      "info" : "MethodDeclaration[28573-29245]:MethodDeclaration[28833-29505]"
    }, {
      "left" : "public static int min(final int[] array)",
      "right" : "public static int min(final int[] array)",
      "info" : "MethodDeclaration[29251-29920]:MethodDeclaration[29511-30180]"
    }, {
      "left" : "public static short min(final short[] array)",
      "right" : "public static short min(final short[] array)",
      "info" : "MethodDeclaration[29926-30601]:MethodDeclaration[30186-30861]"
    }, {
      "left" : "public static byte min(final byte[] array)",
      "right" : "public static byte min(final byte[] array)",
      "info" : "MethodDeclaration[30607-31279]:MethodDeclaration[30867-31539]"
    }, {
      "left" : "public static double min(final double[] array)",
      "right" : "public static double min(final double[] array)",
      "info" : "MethodDeclaration[31286-32167]:MethodDeclaration[31546-32427]"
    }, {
      "left" : "public static float min(final float[] array)",
      "right" : "public static float min(final float[] array)",
      "info" : "MethodDeclaration[32173-33048]:MethodDeclaration[32433-33308]"
    }, {
      "left" : "public static long max(final long[] array)",
      "right" : "public static long max(final long[] array)",
      "info" : "MethodDeclaration[33149-33813]:MethodDeclaration[33409-34073]"
    }, {
      "left" : "public static int max(final int[] array)",
      "right" : "public static int max(final int[] array)",
      "info" : "MethodDeclaration[33819-34488]:MethodDeclaration[34079-34748]"
    }, {
      "left" : "public static short max(final short[] array)",
      "right" : "public static short max(final short[] array)",
      "info" : "MethodDeclaration[34494-35169]:MethodDeclaration[34754-35429]"
    }, {
      "left" : "public static byte max(final byte[] array)",
      "right" : "public static byte max(final byte[] array)",
      "info" : "MethodDeclaration[35175-35847]:MethodDeclaration[35435-36107]"
    }, {
      "left" : "public static double max(final double[] array)",
      "right" : "public static double max(final double[] array)",
      "info" : "MethodDeclaration[35853-36730]:MethodDeclaration[36113-36990]"
    }, {
      "left" : "public static float max(final float[] array)",
      "right" : "public static float max(final float[] array)",
      "info" : "MethodDeclaration[36736-37603]:MethodDeclaration[36996-37863]"
    }, {
      "left" : "private static void validateArray(final Object array)",
      "right" : "private static void validateArray(final Object array)",
      "info" : "MethodDeclaration[37609-38127]:MethodDeclaration[37869-38387]"
    }, {
      "left" : "public static long min(long a, final long b, final long c)",
      "right" : "public static long min(long a, final long b, final long c)",
      "info" : "MethodDeclaration[38235-38627]:MethodDeclaration[38495-38887]"
    }, {
      "left" : "public static int min(int a, final int b, final int c)",
      "right" : "public static int min(int a, final int b, final int c)",
      "info" : "MethodDeclaration[38633-39020]:MethodDeclaration[38893-39280]"
    }, {
      "left" : "public static short min(short a, final short b, final short c)",
      "right" : "public static short min(short a, final short b, final short c)",
      "info" : "MethodDeclaration[39026-39423]:MethodDeclaration[39286-39683]"
    }, {
      "left" : "public static byte min(byte a, final byte b, final byte c)",
      "right" : "public static byte min(byte a, final byte b, final byte c)",
      "info" : "MethodDeclaration[39429-39821]:MethodDeclaration[39689-40081]"
    }, {
      "left" : "public static double min(final double a, final double b, final double c)",
      "right" : "public static double min(final double a, final double b, final double c)",
      "info" : "MethodDeclaration[39827-40387]:MethodDeclaration[40087-40647]"
    }, {
      "left" : "public static float min(final float a, final float b, final float c)",
      "right" : "public static float min(final float a, final float b, final float c)",
      "info" : "MethodDeclaration[40393-40944]:MethodDeclaration[40653-41204]"
    }, {
      "left" : "public static long max(long a, final long b, final long c)",
      "right" : "public static long max(long a, final long b, final long c)",
      "info" : "MethodDeclaration[41047-41438]:MethodDeclaration[41307-41698]"
    }, {
      "left" : "public static int max(int a, final int b, final int c)",
      "right" : "public static int max(int a, final int b, final int c)",
      "info" : "MethodDeclaration[41444-41830]:MethodDeclaration[41704-42090]"
    }, {
      "left" : "public static short max(short a, final short b, final short c)",
      "right" : "public static short max(short a, final short b, final short c)",
      "info" : "MethodDeclaration[41836-42232]:MethodDeclaration[42096-42492]"
    }, {
      "left" : "public static byte max(byte a, final byte b, final byte c)",
      "right" : "public static byte max(byte a, final byte b, final byte c)",
      "info" : "MethodDeclaration[42238-42629]:MethodDeclaration[42498-42889]"
    }, {
      "left" : "public static double max(final double a, final double b, final double c)",
      "right" : "public static double max(final double a, final double b, final double c)",
      "info" : "MethodDeclaration[42635-43193]:MethodDeclaration[42895-43453]"
    }, {
      "left" : "public static float max(final float a, final float b, final float c)",
      "right" : "public static float max(final float a, final float b, final float c)",
      "info" : "MethodDeclaration[43199-43749]:MethodDeclaration[43459-44009]"
    }, {
      "left" : "public static boolean isDigits(final String str)",
      "right" : "public static boolean isDigits(final String str)",
      "info" : "MethodDeclaration[43833-44474]:MethodDeclaration[44093-44734]"
    }, {
      "left" : "public static boolean isNumber(final String str)",
      "right" : "public static boolean isNumber(final String str)",
      "info" : "MethodDeclaration[44480-48781]:MethodDeclaration[44740-49041]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3500-3524]:Block[3500-3524]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[3510-3518]:SuperConstructorInvocation[3510-3518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4205-4242]:Block[4205-4242]"
    }, {
      "left" : "return toInt(str, 0);",
      "right" : "return toInt(str, 0);",
      "info" : "ReturnStatement[4215-4236]:ReturnStatement[4215-4236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4908-5135]:Block[4908-5135]"
    }, {
      "left" : "if(str == null)",
      "right" : "if(str == null)",
      "info" : "IfStatement[4918-4978]:IfStatement[4918-4978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4934-4978]:Block[4934-4978]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[4948-4968]:ReturnStatement[4948-4968]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[4987-5129]:TryStatement[4987-5129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4991-5044]:Block[4991-5044]"
    }, {
      "left" : "return Integer.parseInt(str);",
      "right" : "return Integer.parseInt(str);",
      "info" : "ReturnStatement[5005-5034]:ReturnStatement[5005-5034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5085-5129]:Block[5085-5129]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[5099-5119]:ReturnStatement[5099-5119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5744-5783]:Block[5744-5783]"
    }, {
      "left" : "return toLong(str, 0L);",
      "right" : "return toLong(str, 0L);",
      "info" : "ReturnStatement[5754-5777]:ReturnStatement[5754-5777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6462-6688]:Block[6462-6688]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[6472-6533]:IfStatement[6472-6533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6489-6533]:Block[6489-6533]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[6503-6523]:ReturnStatement[6503-6523]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6542-6682]:TryStatement[6542-6682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6546-6597]:Block[6546-6597]"
    }, {
      "left" : "return Long.parseLong(str);",
      "right" : "return Long.parseLong(str);",
      "info" : "ReturnStatement[6560-6587]:ReturnStatement[6560-6587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6638-6682]:Block[6638-6682]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[6652-6672]:ReturnStatement[6652-6672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7355-7397]:Block[7355-7397]"
    }, {
      "left" : "return toFloat(str, 0.0f);",
      "right" : "return toFloat(str, 0.0f);",
      "info" : "ReturnStatement[7365-7391]:ReturnStatement[7365-7391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8146-8363]:Block[8146-8363]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[8154-8211]:IfStatement[8154-8211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8171-8211]:Block[8171-8211]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[8183-8203]:ReturnStatement[8183-8203]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8223-8357]:TryStatement[8223-8357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8227-8276]:Block[8227-8276]"
    }, {
      "left" : "return Float.parseFloat(str);",
      "right" : "return Float.parseFloat(str);",
      "info" : "ReturnStatement[8239-8268]:ReturnStatement[8239-8268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8317-8357]:Block[8317-8357]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[8329-8349]:ReturnStatement[8329-8349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9037-9080]:Block[9037-9080]"
    }, {
      "left" : "return toDouble(str, 0.0d);",
      "right" : "return toDouble(str, 0.0d);",
      "info" : "ReturnStatement[9047-9074]:ReturnStatement[9047-9074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9837-10051]:Block[9837-10051]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[9845-9902]:IfStatement[9845-9902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9862-9902]:Block[9862-9902]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[9874-9894]:ReturnStatement[9874-9894]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9909-10045]:TryStatement[9909-10045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9913-9964]:Block[9913-9964]"
    }, {
      "left" : "return Double.parseDouble(str);",
      "right" : "return Double.parseDouble(str);",
      "info" : "ReturnStatement[9925-9956]:ReturnStatement[9925-9956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10005-10045]:Block[10005-10045]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[10017-10037]:ReturnStatement[10017-10037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10740-10785]:Block[10740-10785]"
    }, {
      "left" : "return toByte(str, (byte) 0);",
      "right" : "return toByte(str, (byte) 0);",
      "info" : "ReturnStatement[10750-10779]:ReturnStatement[10750-10779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11458-11683]:Block[11458-11683]"
    }, {
      "left" : "if(str == null)",
      "right" : "if(str == null)",
      "info" : "IfStatement[11468-11528]:IfStatement[11468-11528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11484-11528]:Block[11484-11528]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[11498-11518]:ReturnStatement[11498-11518]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11537-11677]:TryStatement[11537-11677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11541-11592]:Block[11541-11592]"
    }, {
      "left" : "return Byte.parseByte(str);",
      "right" : "return Byte.parseByte(str);",
      "info" : "ReturnStatement[11555-11582]:ReturnStatement[11555-11582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11633-11677]:Block[11633-11677]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[11647-11667]:ReturnStatement[11647-11667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12299-12346]:Block[12299-12346]"
    }, {
      "left" : "return toShort(str, (short) 0);",
      "right" : "return toShort(str, (short) 0);",
      "info" : "ReturnStatement[12309-12340]:ReturnStatement[12309-12340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13028-13255]:Block[13028-13255]"
    }, {
      "left" : "if(str == null)",
      "right" : "if(str == null)",
      "info" : "IfStatement[13038-13098]:IfStatement[13038-13098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13054-13098]:Block[13054-13098]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[13068-13088]:ReturnStatement[13068-13088]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13107-13249]:TryStatement[13107-13249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13111-13164]:Block[13111-13164]"
    }, {
      "left" : "return Short.parseShort(str);",
      "right" : "return Short.parseShort(str);",
      "info" : "ReturnStatement[13125-13154]:ReturnStatement[13125-13154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13205-13249]:Block[13205-13249]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[13219-13239]:ReturnStatement[13219-13239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23225-23475]:Block[23485-23735]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[23235-23288]:IfStatement[23495-23548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23252-23288]:Block[23512-23548]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23266-23278]:ReturnStatement[23526-23538]"
    }, {
      "left" : "for (int i = str.length() - 1; i >= 0; i--)",
      "right" : "for (int i = str.length() - 1; i >= 0; i--)",
      "info" : "ForStatement[23297-23436]:ForStatement[23557-23696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23341-23436]:Block[23601-23696]"
    }, {
      "left" : "if (str.charAt(i) != '0')",
      "right" : "if (str.charAt(i) != '0')",
      "info" : "IfStatement[23355-23426]:IfStatement[23615-23686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23381-23426]:Block[23641-23686]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[23399-23412]:ReturnStatement[23659-23672]"
    }, {
      "left" : "return str.length() > 0;",
      "right" : "return str.length() > 0;",
      "info" : "ReturnStatement[23445-23469]:ReturnStatement[23705-23729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23995-24099]:Block[24255-24359]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[24005-24058]:IfStatement[24265-24318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24022-24058]:Block[24282-24318]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24036-24048]:ReturnStatement[24296-24308]"
    }, {
      "left" : "return Float.valueOf(str);",
      "right" : "return Float.valueOf(str);",
      "info" : "ReturnStatement[24067-24093]:ReturnStatement[24327-24353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24545-24650]:Block[24805-24910]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[24555-24608]:IfStatement[24815-24868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24572-24608]:Block[24832-24868]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24586-24598]:ReturnStatement[24846-24858]"
    }, {
      "left" : "return Double.valueOf(str);",
      "right" : "return Double.valueOf(str);",
      "info" : "ReturnStatement[24617-24644]:ReturnStatement[24877-24904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25141-25315]:Block[25401-25575]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[25151-25204]:IfStatement[25411-25464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25168-25204]:Block[25428-25464]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[25182-25194]:ReturnStatement[25442-25454]"
    }, {
      "left" : "return Integer.decode(str);",
      "right" : "return Integer.decode(str);",
      "info" : "ReturnStatement[25282-25309]:ReturnStatement[25542-25569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25807-25909]:Block[26067-26169]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[25817-25870]:IfStatement[26077-26130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25834-25870]:Block[26094-26130]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[25848-25860]:ReturnStatement[26108-26120]"
    }, {
      "left" : "return Long.decode(str);",
      "right" : "return Long.decode(str);",
      "info" : "ReturnStatement[25879-25903]:ReturnStatement[26139-26163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26438-27319]:Block[26698-27579]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[26448-26501]:IfStatement[26708-26761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26465-26501]:Block[26725-26761]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[26479-26491]:ReturnStatement[26739-26751]"
    }, {
      "left" : "int pos = 0;",
      "right" : "int pos = 0;",
      "info" : "VariableDeclarationStatement[26510-26522]:VariableDeclarationStatement[26770-26782]"
    }, {
      "left" : "int radix = 10;",
      "right" : "int radix = 10;",
      "info" : "VariableDeclarationStatement[26555-26570]:VariableDeclarationStatement[26815-26830]"
    }, {
      "left" : "boolean negate = false;",
      "right" : "boolean negate = false;",
      "info" : "VariableDeclarationStatement[26579-26602]:VariableDeclarationStatement[26839-26862]"
    }, {
      "left" : "if (str.startsWith(\"-\"))",
      "right" : "if (str.startsWith(\"-\"))",
      "info" : "IfStatement[26636-26720]:IfStatement[26896-26980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26661-26720]:Block[26921-26980]"
    }, {
      "left" : "negate = true;",
      "right" : "negate = true;",
      "info" : "ExpressionStatement[26675-26689]:ExpressionStatement[26935-26949]"
    }, {
      "left" : "pos = 1;",
      "right" : "pos = 1;",
      "info" : "ExpressionStatement[26702-26710]:ExpressionStatement[26962-26970]"
    }, {
      "left" : "if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos))",
      "right" : "if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos))",
      "info" : "IfStatement[26729-27154]:IfStatement[26989-27414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26789-26853]:Block[27049-27113]"
    }, {
      "left" : "radix = 16;",
      "right" : "radix = 16;",
      "info" : "ExpressionStatement[26810-26821]:ExpressionStatement[27070-27081]"
    }, {
      "left" : "pos += 2;",
      "right" : "pos += 2;",
      "info" : "ExpressionStatement[26834-26843]:ExpressionStatement[27094-27103]"
    }, {
      "left" : "if (str.startsWith(\"#\", pos))",
      "right" : "if (str.startsWith(\"#\", pos))",
      "info" : "IfStatement[26859-27154]:IfStatement[27119-27414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26889-26989]:Block[27149-27249]"
    }, {
      "left" : "radix = 16;",
      "right" : "radix = 16;",
      "info" : "ExpressionStatement[26948-26959]:ExpressionStatement[27208-27219]"
    }, {
      "left" : "pos ++;",
      "right" : "pos ++;",
      "info" : "ExpressionStatement[26972-26979]:ExpressionStatement[27232-27239]"
    }, {
      "left" : "if (str.startsWith(\"0\", pos) && str.length() > pos + 1)",
      "right" : "if (str.startsWith(\"0\", pos) && str.length() > pos + 1)",
      "info" : "IfStatement[26995-27154]:IfStatement[27255-27414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27051-27154]:Block[27311-27414]"
    }, {
      "left" : "radix = 8;",
      "right" : "radix = 8;",
      "info" : "ExpressionStatement[27114-27124]:ExpressionStatement[27374-27384]"
    }, {
      "left" : "pos ++;",
      "right" : "pos ++;",
      "info" : "ExpressionStatement[27137-27144]:ExpressionStatement[27397-27404]"
    }, {
      "left" : "final BigInteger value = new BigInteger(str.substring(pos), radix);",
      "right" : "final BigInteger value = new BigInteger(str.substring(pos), radix);",
      "info" : "VariableDeclarationStatement[27198-27265]:VariableDeclarationStatement[27458-27525]"
    }, {
      "left" : "return negate ? value.negate() : value;",
      "right" : "return negate ? value.negate() : value;",
      "info" : "ReturnStatement[27274-27313]:ReturnStatement[27534-27573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27781-28472]:Block[28041-28732]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[27791-27844]:IfStatement[28051-28104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27808-27844]:Block[28068-28104]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[27822-27834]:ReturnStatement[28082-28094]"
    }, {
      "left" : "if (StringUtils.isBlank(str))",
      "right" : "if (StringUtils.isBlank(str))",
      "info" : "IfStatement[27926-28052]:IfStatement[28186-28312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27956-28052]:Block[28216-28312]"
    }, {
      "left" : "throw new NumberFormatException(\"A blank string is not a valid number\");",
      "right" : "throw new NumberFormatException(\"A blank string is not a valid number\");",
      "info" : "ThrowStatement[27970-28042]:ThrowStatement[28230-28302]"
    }, {
      "left" : "if (str.trim().startsWith(\"--\"))",
      "right" : "if (str.trim().startsWith(\"--\"))",
      "info" : "IfStatement[28061-28430]:IfStatement[28321-28690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28094-28430]:Block[28354-28690]"
    }, {
      "left" : "throw new NumberFormatException(str + \" is not a valid number.\");",
      "right" : "throw new NumberFormatException(str + \" is not a valid number.\");",
      "info" : "ThrowStatement[28355-28420]:ThrowStatement[28615-28680]"
    }, {
      "left" : "return new BigDecimal(str);",
      "right" : "return new BigDecimal(str);",
      "info" : "ReturnStatement[28439-28466]:ReturnStatement[28699-28726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28950-29245]:Block[29210-29505]"
    }, {
      "left" : "validateArray(array);",
      "right" : "validateArray(array);",
      "info" : "ExpressionStatement[28987-29008]:ExpressionStatement[29247-29268]"
    }, {
      "left" : "long min = array[0];",
      "right" : "long min = array[0];",
      "info" : "VariableDeclarationStatement[29055-29075]:VariableDeclarationStatement[29315-29335]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[29084-29214]:ForStatement[29344-29474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29123-29214]:Block[29383-29474]"
    }, {
      "left" : "if (array[i] < min)",
      "right" : "if (array[i] < min)",
      "info" : "IfStatement[29137-29204]:IfStatement[29397-29464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29157-29204]:Block[29417-29464]"
    }, {
      "left" : "min = array[i];",
      "right" : "min = array[i];",
      "info" : "ExpressionStatement[29175-29190]:ExpressionStatement[29435-29450]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[29228-29239]:ReturnStatement[29488-29499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29626-29920]:Block[29886-30180]"
    }, {
      "left" : "validateArray(array);",
      "right" : "validateArray(array);",
      "info" : "ExpressionStatement[29663-29684]:ExpressionStatement[29923-29944]"
    }, {
      "left" : "int min = array[0];",
      "right" : "int min = array[0];",
      "info" : "VariableDeclarationStatement[29731-29750]:VariableDeclarationStatement[29991-30010]"
    }, {
      "left" : "for (int j = 1; j < array.length; j++)",
      "right" : "for (int j = 1; j < array.length; j++)",
      "info" : "ForStatement[29759-29889]:ForStatement[30019-30149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29798-29889]:Block[30058-30149]"
    }, {
      "left" : "if (array[j] < min)",
      "right" : "if (array[j] < min)",
      "info" : "IfStatement[29812-29879]:IfStatement[30072-30139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29832-29879]:Block[30092-30139]"
    }, {
      "left" : "min = array[j];",
      "right" : "min = array[j];",
      "info" : "ExpressionStatement[29850-29865]:ExpressionStatement[30110-30125]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[29903-29914]:ReturnStatement[30163-30174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30305-30601]:Block[30565-30861]"
    }, {
      "left" : "validateArray(array);",
      "right" : "validateArray(array);",
      "info" : "ExpressionStatement[30342-30363]:ExpressionStatement[30602-30623]"
    }, {
      "left" : "short min = array[0];",
      "right" : "short min = array[0];",
      "info" : "VariableDeclarationStatement[30410-30431]:VariableDeclarationStatement[30670-30691]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[30440-30570]:ForStatement[30700-30830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30479-30570]:Block[30739-30830]"
    }, {
      "left" : "if (array[i] < min)",
      "right" : "if (array[i] < min)",
      "info" : "IfStatement[30493-30560]:IfStatement[30753-30820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30513-30560]:Block[30773-30820]"
    }, {
      "left" : "min = array[i];",
      "right" : "min = array[i];",
      "info" : "ExpressionStatement[30531-30546]:ExpressionStatement[30791-30806]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[30584-30595]:ReturnStatement[30844-30855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30984-31279]:Block[31244-31539]"
    }, {
      "left" : "validateArray(array);",
      "right" : "validateArray(array);",
      "info" : "ExpressionStatement[31021-31042]:ExpressionStatement[31281-31302]"
    }, {
      "left" : "byte min = array[0];",
      "right" : "byte min = array[0];",
      "info" : "VariableDeclarationStatement[31089-31109]:VariableDeclarationStatement[31349-31369]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[31118-31248]:ForStatement[31378-31508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31157-31248]:Block[31417-31508]"
    }, {
      "left" : "if (array[i] < min)",
      "right" : "if (array[i] < min)",
      "info" : "IfStatement[31171-31238]:IfStatement[31431-31498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31191-31238]:Block[31451-31498]"
    }, {
      "left" : "min = array[i];",
      "right" : "min = array[i];",
      "info" : "ExpressionStatement[31209-31224]:ExpressionStatement[31469-31484]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[31262-31273]:ReturnStatement[31522-31533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31779-32167]:Block[32039-32427]"
    }, {
      "left" : "validateArray(array);",
      "right" : "validateArray(array);",
      "info" : "ExpressionStatement[31816-31837]:ExpressionStatement[32076-32097]"
    }, {
      "left" : "double min = array[0];",
      "right" : "double min = array[0];",
      "info" : "VariableDeclarationStatement[31884-31906]:VariableDeclarationStatement[32144-32166]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[31915-32136]:ForStatement[32175-32396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31954-32136]:Block[32214-32396]"
    }, {
      "left" : "if (Double.isNaN(array[i]))",
      "right" : "if (Double.isNaN(array[i]))",
      "info" : "IfStatement[31968-32046]:IfStatement[32228-32306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31996-32046]:Block[32256-32306]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[32014-32032]:ReturnStatement[32274-32292]"
    }, {
      "left" : "if (array[i] < min)",
      "right" : "if (array[i] < min)",
      "info" : "IfStatement[32059-32126]:IfStatement[32319-32386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32079-32126]:Block[32339-32386]"
    }, {
      "left" : "min = array[i];",
      "right" : "min = array[i];",
      "info" : "ExpressionStatement[32097-32112]:ExpressionStatement[32357-32372]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[32150-32161]:ReturnStatement[32410-32421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32663-33048]:Block[32923-33308]"
    }, {
      "left" : "validateArray(array);",
      "right" : "validateArray(array);",
      "info" : "ExpressionStatement[32700-32721]:ExpressionStatement[32960-32981]"
    }, {
      "left" : "float min = array[0];",
      "right" : "float min = array[0];",
      "info" : "VariableDeclarationStatement[32768-32789]:VariableDeclarationStatement[33028-33049]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[32798-33017]:ForStatement[33058-33277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32837-33017]:Block[33097-33277]"
    }, {
      "left" : "if (Float.isNaN(array[i]))",
      "right" : "if (Float.isNaN(array[i]))",
      "info" : "IfStatement[32851-32927]:IfStatement[33111-33187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32878-32927]:Block[33138-33187]"
    }, {
      "left" : "return Float.NaN;",
      "right" : "return Float.NaN;",
      "info" : "ReturnStatement[32896-32913]:ReturnStatement[33156-33173]"
    }, {
      "left" : "if (array[i] < min)",
      "right" : "if (array[i] < min)",
      "info" : "IfStatement[32940-33007]:IfStatement[33200-33267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32960-33007]:Block[33220-33267]"
    }, {
      "left" : "min = array[i];",
      "right" : "min = array[i];",
      "info" : "ExpressionStatement[32978-32993]:ExpressionStatement[33238-33253]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[33031-33042]:ReturnStatement[33291-33302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33526-33813]:Block[33786-34073]"
    }, {
      "left" : "validateArray(array);",
      "right" : "validateArray(array);",
      "info" : "ExpressionStatement[33563-33584]:ExpressionStatement[33823-33844]"
    }, {
      "left" : "long max = array[0];",
      "right" : "long max = array[0];",
      "info" : "VariableDeclarationStatement[33627-33647]:VariableDeclarationStatement[33887-33907]"
    }, {
      "left" : "for (int j = 1; j < array.length; j++)",
      "right" : "for (int j = 1; j < array.length; j++)",
      "info" : "ForStatement[33656-33786]:ForStatement[33916-34046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33695-33786]:Block[33955-34046]"
    }, {
      "left" : "if (array[j] > max)",
      "right" : "if (array[j] > max)",
      "info" : "IfStatement[33709-33776]:IfStatement[33969-34036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33729-33776]:Block[33989-34036]"
    }, {
      "left" : "max = array[j];",
      "right" : "max = array[j];",
      "info" : "ExpressionStatement[33747-33762]:ExpressionStatement[34007-34022]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[33796-33807]:ReturnStatement[34056-34067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34194-34488]:Block[34454-34748]"
    }, {
      "left" : "validateArray(array);",
      "right" : "validateArray(array);",
      "info" : "ExpressionStatement[34231-34252]:ExpressionStatement[34491-34512]"
    }, {
      "left" : "int max = array[0];",
      "right" : "int max = array[0];",
      "info" : "VariableDeclarationStatement[34299-34318]:VariableDeclarationStatement[34559-34578]"
    }, {
      "left" : "for (int j = 1; j < array.length; j++)",
      "right" : "for (int j = 1; j < array.length; j++)",
      "info" : "ForStatement[34327-34457]:ForStatement[34587-34717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34366-34457]:Block[34626-34717]"
    }, {
      "left" : "if (array[j] > max)",
      "right" : "if (array[j] > max)",
      "info" : "IfStatement[34380-34447]:IfStatement[34640-34707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34400-34447]:Block[34660-34707]"
    }, {
      "left" : "max = array[j];",
      "right" : "max = array[j];",
      "info" : "ExpressionStatement[34418-34433]:ExpressionStatement[34678-34693]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[34471-34482]:ReturnStatement[34731-34742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34873-35169]:Block[35133-35429]"
    }, {
      "left" : "validateArray(array);",
      "right" : "validateArray(array);",
      "info" : "ExpressionStatement[34910-34931]:ExpressionStatement[35170-35191]"
    }, {
      "left" : "short max = array[0];",
      "right" : "short max = array[0];",
      "info" : "VariableDeclarationStatement[34978-34999]:VariableDeclarationStatement[35238-35259]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[35008-35138]:ForStatement[35268-35398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35047-35138]:Block[35307-35398]"
    }, {
      "left" : "if (array[i] > max)",
      "right" : "if (array[i] > max)",
      "info" : "IfStatement[35061-35128]:IfStatement[35321-35388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35081-35128]:Block[35341-35388]"
    }, {
      "left" : "max = array[i];",
      "right" : "max = array[i];",
      "info" : "ExpressionStatement[35099-35114]:ExpressionStatement[35359-35374]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[35152-35163]:ReturnStatement[35412-35423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35552-35847]:Block[35812-36107]"
    }, {
      "left" : "validateArray(array);",
      "right" : "validateArray(array);",
      "info" : "ExpressionStatement[35589-35610]:ExpressionStatement[35849-35870]"
    }, {
      "left" : "byte max = array[0];",
      "right" : "byte max = array[0];",
      "info" : "VariableDeclarationStatement[35657-35677]:VariableDeclarationStatement[35917-35937]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[35686-35816]:ForStatement[35946-36076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35725-35816]:Block[35985-36076]"
    }, {
      "left" : "if (array[i] > max)",
      "right" : "if (array[i] > max)",
      "info" : "IfStatement[35739-35806]:IfStatement[35999-36066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35759-35806]:Block[36019-36066]"
    }, {
      "left" : "max = array[i];",
      "right" : "max = array[i];",
      "info" : "ExpressionStatement[35777-35792]:ExpressionStatement[36037-36052]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[35830-35841]:ReturnStatement[36090-36101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36346-36730]:Block[36606-36990]"
    }, {
      "left" : "validateArray(array);",
      "right" : "validateArray(array);",
      "info" : "ExpressionStatement[36383-36404]:ExpressionStatement[36643-36664]"
    }, {
      "left" : "double max = array[0];",
      "right" : "double max = array[0];",
      "info" : "VariableDeclarationStatement[36447-36469]:VariableDeclarationStatement[36707-36729]"
    }, {
      "left" : "for (int j = 1; j < array.length; j++)",
      "right" : "for (int j = 1; j < array.length; j++)",
      "info" : "ForStatement[36478-36699]:ForStatement[36738-36959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36517-36699]:Block[36777-36959]"
    }, {
      "left" : "if (Double.isNaN(array[j]))",
      "right" : "if (Double.isNaN(array[j]))",
      "info" : "IfStatement[36531-36609]:IfStatement[36791-36869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36559-36609]:Block[36819-36869]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[36577-36595]:ReturnStatement[36837-36855]"
    }, {
      "left" : "if (array[j] > max)",
      "right" : "if (array[j] > max)",
      "info" : "IfStatement[36622-36689]:IfStatement[36882-36949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36642-36689]:Block[36902-36949]"
    }, {
      "left" : "max = array[j];",
      "right" : "max = array[j];",
      "info" : "ExpressionStatement[36660-36675]:ExpressionStatement[36920-36935]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[36713-36724]:ReturnStatement[36973-36984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37226-37603]:Block[37486-37863]"
    }, {
      "left" : "validateArray(array);",
      "right" : "validateArray(array);",
      "info" : "ExpressionStatement[37263-37284]:ExpressionStatement[37523-37544]"
    }, {
      "left" : "float max = array[0];",
      "right" : "float max = array[0];",
      "info" : "VariableDeclarationStatement[37327-37348]:VariableDeclarationStatement[37587-37608]"
    }, {
      "left" : "for (int j = 1; j < array.length; j++)",
      "right" : "for (int j = 1; j < array.length; j++)",
      "info" : "ForStatement[37357-37576]:ForStatement[37617-37836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37396-37576]:Block[37656-37836]"
    }, {
      "left" : "if (Float.isNaN(array[j]))",
      "right" : "if (Float.isNaN(array[j]))",
      "info" : "IfStatement[37410-37486]:IfStatement[37670-37746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37437-37486]:Block[37697-37746]"
    }, {
      "left" : "return Float.NaN;",
      "right" : "return Float.NaN;",
      "info" : "ReturnStatement[37455-37472]:ReturnStatement[37715-37732]"
    }, {
      "left" : "if (array[j] > max)",
      "right" : "if (array[j] > max)",
      "info" : "IfStatement[37499-37566]:IfStatement[37759-37826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37519-37566]:Block[37779-37826]"
    }, {
      "left" : "max = array[j];",
      "right" : "max = array[j];",
      "info" : "ExpressionStatement[37537-37552]:ExpressionStatement[37797-37812]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[37586-37597]:ReturnStatement[37846-37857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37879-38127]:Block[38139-38387]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[37889-38121]:IfStatement[38149-38381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37908-37997]:Block[38168-38257]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[37922-37987]:ThrowStatement[38182-38247]"
    }, {
      "left" : "if (Array.getLength(array) == 0)",
      "right" : "if (Array.getLength(array) == 0)",
      "info" : "IfStatement[38003-38121]:IfStatement[38263-38381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38036-38121]:Block[38296-38381]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[38050-38111]:ThrowStatement[38310-38371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38502-38627]:Block[38762-38887]"
    }, {
      "left" : "if (b < a)",
      "right" : "if (b < a)",
      "info" : "IfStatement[38512-38553]:IfStatement[38772-38813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38523-38553]:Block[38783-38813]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[38537-38543]:ExpressionStatement[38797-38803]"
    }, {
      "left" : "if (c < a)",
      "right" : "if (c < a)",
      "info" : "IfStatement[38562-38603]:IfStatement[38822-38863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38573-38603]:Block[38833-38863]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[38587-38593]:ExpressionStatement[38847-38853]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[38612-38621]:ReturnStatement[38872-38881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38895-39020]:Block[39155-39280]"
    }, {
      "left" : "if (b < a)",
      "right" : "if (b < a)",
      "info" : "IfStatement[38905-38946]:IfStatement[39165-39206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38916-38946]:Block[39176-39206]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[38930-38936]:ExpressionStatement[39190-39196]"
    }, {
      "left" : "if (c < a)",
      "right" : "if (c < a)",
      "info" : "IfStatement[38955-38996]:IfStatement[39215-39256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38966-38996]:Block[39226-39256]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[38980-38986]:ExpressionStatement[39240-39246]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[39005-39014]:ReturnStatement[39265-39274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39298-39423]:Block[39558-39683]"
    }, {
      "left" : "if (b < a)",
      "right" : "if (b < a)",
      "info" : "IfStatement[39308-39349]:IfStatement[39568-39609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39319-39349]:Block[39579-39609]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[39333-39339]:ExpressionStatement[39593-39599]"
    }, {
      "left" : "if (c < a)",
      "right" : "if (c < a)",
      "info" : "IfStatement[39358-39399]:IfStatement[39618-39659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39369-39399]:Block[39629-39659]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[39383-39389]:ExpressionStatement[39643-39649]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[39408-39417]:ReturnStatement[39668-39677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39696-39821]:Block[39956-40081]"
    }, {
      "left" : "if (b < a)",
      "right" : "if (b < a)",
      "info" : "IfStatement[39706-39747]:IfStatement[39966-40007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39717-39747]:Block[39977-40007]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[39731-39737]:ExpressionStatement[39991-39997]"
    }, {
      "left" : "if (c < a)",
      "right" : "if (c < a)",
      "info" : "IfStatement[39756-39797]:IfStatement[40016-40057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39767-39797]:Block[40027-40057]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[39781-39787]:ExpressionStatement[40041-40047]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[39806-39815]:ReturnStatement[40066-40075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40336-40387]:Block[40596-40647]"
    }, {
      "left" : "return Math.min(Math.min(a, b), c);",
      "right" : "return Math.min(Math.min(a, b), c);",
      "info" : "ReturnStatement[40346-40381]:ReturnStatement[40606-40641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40893-40944]:Block[41153-41204]"
    }, {
      "left" : "return Math.min(Math.min(a, b), c);",
      "right" : "return Math.min(Math.min(a, b), c);",
      "info" : "ReturnStatement[40903-40938]:ReturnStatement[41163-41198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41313-41438]:Block[41573-41698]"
    }, {
      "left" : "if (b > a)",
      "right" : "if (b > a)",
      "info" : "IfStatement[41323-41364]:IfStatement[41583-41624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41334-41364]:Block[41594-41624]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[41348-41354]:ExpressionStatement[41608-41614]"
    }, {
      "left" : "if (c > a)",
      "right" : "if (c > a)",
      "info" : "IfStatement[41373-41414]:IfStatement[41633-41674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41384-41414]:Block[41644-41674]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[41398-41404]:ExpressionStatement[41658-41664]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[41423-41432]:ReturnStatement[41683-41692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41705-41830]:Block[41965-42090]"
    }, {
      "left" : "if (b > a)",
      "right" : "if (b > a)",
      "info" : "IfStatement[41715-41756]:IfStatement[41975-42016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41726-41756]:Block[41986-42016]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[41740-41746]:ExpressionStatement[42000-42006]"
    }, {
      "left" : "if (c > a)",
      "right" : "if (c > a)",
      "info" : "IfStatement[41765-41806]:IfStatement[42025-42066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41776-41806]:Block[42036-42066]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[41790-41796]:ExpressionStatement[42050-42056]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[41815-41824]:ReturnStatement[42075-42084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42107-42232]:Block[42367-42492]"
    }, {
      "left" : "if (b > a)",
      "right" : "if (b > a)",
      "info" : "IfStatement[42117-42158]:IfStatement[42377-42418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42128-42158]:Block[42388-42418]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[42142-42148]:ExpressionStatement[42402-42408]"
    }, {
      "left" : "if (c > a)",
      "right" : "if (c > a)",
      "info" : "IfStatement[42167-42208]:IfStatement[42427-42468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42178-42208]:Block[42438-42468]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[42192-42198]:ExpressionStatement[42452-42458]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[42217-42226]:ReturnStatement[42477-42486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42504-42629]:Block[42764-42889]"
    }, {
      "left" : "if (b > a)",
      "right" : "if (b > a)",
      "info" : "IfStatement[42514-42555]:IfStatement[42774-42815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42525-42555]:Block[42785-42815]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[42539-42545]:ExpressionStatement[42799-42805]"
    }, {
      "left" : "if (c > a)",
      "right" : "if (c > a)",
      "info" : "IfStatement[42564-42605]:IfStatement[42824-42865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42575-42605]:Block[42835-42865]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[42589-42595]:ExpressionStatement[42849-42855]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[42614-42623]:ReturnStatement[42874-42883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43142-43193]:Block[43402-43453]"
    }, {
      "left" : "return Math.max(Math.max(a, b), c);",
      "right" : "return Math.max(Math.max(a, b), c);",
      "info" : "ReturnStatement[43152-43187]:ReturnStatement[43412-43447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43698-43749]:Block[43958-44009]"
    }, {
      "left" : "return Math.max(Math.max(a, b), c);",
      "right" : "return Math.max(Math.max(a, b), c);",
      "info" : "ReturnStatement[43708-43743]:ReturnStatement[43968-44003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44214-44474]:Block[44474-44734]"
    }, {
      "left" : "if (StringUtils.isEmpty(str))",
      "right" : "if (StringUtils.isEmpty(str))",
      "info" : "IfStatement[44224-44291]:IfStatement[44484-44551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44254-44291]:Block[44514-44551]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[44268-44281]:ReturnStatement[44528-44541]"
    }, {
      "left" : "for (int i = 0; i < str.length(); i++)",
      "right" : "for (int i = 0; i < str.length(); i++)",
      "info" : "ForStatement[44300-44447]:ForStatement[44560-44707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44339-44447]:Block[44599-44707]"
    }, {
      "left" : "if (!Character.isDigit(str.charAt(i)))",
      "right" : "if (!Character.isDigit(str.charAt(i)))",
      "info" : "IfStatement[44353-44437]:IfStatement[44613-44697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44392-44437]:Block[44652-44697]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[44410-44423]:ReturnStatement[44670-44683]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[44456-44468]:ReturnStatement[44716-44728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45025-48781]:Block[45285-49041]"
    }, {
      "left" : "if (StringUtils.isEmpty(str))",
      "right" : "if (StringUtils.isEmpty(str))",
      "info" : "IfStatement[45035-45102]:IfStatement[45295-45362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45065-45102]:Block[45325-45362]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[45079-45092]:ReturnStatement[45339-45352]"
    }, {
      "left" : "final char[] chars = str.toCharArray();",
      "right" : "final char[] chars = str.toCharArray();",
      "info" : "VariableDeclarationStatement[45111-45150]:VariableDeclarationStatement[45371-45410]"
    }, {
      "left" : "int sz = chars.length;",
      "right" : "int sz = chars.length;",
      "info" : "VariableDeclarationStatement[45159-45181]:VariableDeclarationStatement[45419-45441]"
    }, {
      "left" : "boolean hasExp = false;",
      "right" : "boolean hasExp = false;",
      "info" : "VariableDeclarationStatement[45190-45213]:VariableDeclarationStatement[45450-45473]"
    }, {
      "left" : "boolean hasDecPoint = false;",
      "right" : "boolean hasDecPoint = false;",
      "info" : "VariableDeclarationStatement[45222-45250]:VariableDeclarationStatement[45482-45510]"
    }, {
      "left" : "boolean allowSigns = false;",
      "right" : "boolean allowSigns = false;",
      "info" : "VariableDeclarationStatement[45259-45286]:VariableDeclarationStatement[45519-45546]"
    }, {
      "left" : "boolean foundDigit = false;",
      "right" : "boolean foundDigit = false;",
      "info" : "VariableDeclarationStatement[45295-45322]:VariableDeclarationStatement[45555-45582]"
    }, {
      "left" : "final int start = (chars[0] == '-') ? 1 : 0;",
      "right" : "final int start = (chars[0] == '-') ? 1 : 0;",
      "info" : "VariableDeclarationStatement[45379-45423]:VariableDeclarationStatement[45639-45683]"
    }, {
      "left" : "if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x')",
      "right" : "if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x')",
      "info" : "IfStatement[45432-45995]:IfStatement[45692-46255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45502-45995]:Block[45762-46255]"
    }, {
      "left" : "int i = start + 2;",
      "right" : "int i = start + 2;",
      "info" : "VariableDeclarationStatement[45516-45534]:VariableDeclarationStatement[45776-45794]"
    }, {
      "left" : "if (i == sz)",
      "right" : "if (i == sz)",
      "info" : "IfStatement[45547-45620]:IfStatement[45807-45880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45560-45620]:Block[45820-45880]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[45578-45591]:ReturnStatement[45838-45851]"
    }, {
      "left" : "for (; i < chars.length; i++)",
      "right" : "for (; i < chars.length; i++)",
      "info" : "ForStatement[45689-45960]:ForStatement[45949-46220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45719-45960]:Block[45979-46220]"
    }, {
      "left" : "if ((chars[i] < '0' || chars[i] > '9')\n                    && (chars[i] < 'a' || chars[i] > 'f')\n                    && (chars[i] < 'A' || chars[i] > 'F'))",
      "right" : "if ((chars[i] < '0' || chars[i] > '9')\n                    && (chars[i] < 'a' || chars[i] > 'f')\n                    && (chars[i] < 'A' || chars[i] > 'F'))",
      "info" : "IfStatement[45737-45946]:IfStatement[45997-46206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45893-45946]:Block[46153-46206]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[45915-45928]:ReturnStatement[46175-46188]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[45973-45985]:ReturnStatement[46233-46245]"
    }, {
      "left" : "sz--;",
      "right" : "sz--;",
      "info" : "ExpressionStatement[46004-46009]:ExpressionStatement[46264-46269]"
    }, {
      "left" : "int i = start;",
      "right" : "int i = start;",
      "info" : "VariableDeclarationStatement[46115-46129]:VariableDeclarationStatement[46375-46389]"
    }, {
      "left" : "while (i < sz || (i < sz + 1 && allowSigns && !foundDigit))",
      "right" : "while (i < sz || (i < sz + 1 && allowSigns && !foundDigit))",
      "info" : "WhileStatement[46287-47435]:WhileStatement[46547-47695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46347-47435]:Block[46607-47695]"
    }, {
      "left" : "if (chars[i] >= '0' && chars[i] <= '9')",
      "right" : "if (chars[i] >= '0' && chars[i] <= '9')",
      "info" : "IfStatement[46361-47408]:IfStatement[46621-47668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46401-46488]:Block[46661-46748]"
    }, {
      "left" : "foundDigit = true;",
      "right" : "foundDigit = true;",
      "info" : "ExpressionStatement[46419-46437]:ExpressionStatement[46679-46697]"
    }, {
      "left" : "allowSigns = false;",
      "right" : "allowSigns = false;",
      "info" : "ExpressionStatement[46454-46473]:ExpressionStatement[46714-46733]"
    }, {
      "left" : "if (chars[i] == '.')",
      "right" : "if (chars[i] == '.')",
      "info" : "IfStatement[46494-47408]:IfStatement[46754-47668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46515-46727]:Block[46775-46987]"
    }, {
      "left" : "if (hasDecPoint || hasExp)",
      "right" : "if (hasDecPoint || hasExp)",
      "info" : "IfStatement[46533-46677]:IfStatement[46793-46937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46560-46677]:Block[46820-46937]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46646-46659]:ReturnStatement[46906-46919]"
    }, {
      "left" : "hasDecPoint = true;",
      "right" : "hasDecPoint = true;",
      "info" : "ExpressionStatement[46694-46713]:ExpressionStatement[46954-46973]"
    }, {
      "left" : "if (chars[i] == 'e' || chars[i] == 'E')",
      "right" : "if (chars[i] == 'e' || chars[i] == 'E')",
      "info" : "IfStatement[46733-47408]:IfStatement[46993-47668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46773-47106]:Block[47033-47366]"
    }, {
      "left" : "if (hasExp)",
      "right" : "if (hasExp)",
      "info" : "IfStatement[46843-46939]:IfStatement[47103-47199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46855-46939]:Block[47115-47199]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46908-46921]:ReturnStatement[47168-47181]"
    }, {
      "left" : "if (!foundDigit)",
      "right" : "if (!foundDigit)",
      "info" : "IfStatement[46956-47026]:IfStatement[47216-47286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46973-47026]:Block[47233-47286]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46995-47008]:ReturnStatement[47255-47268]"
    }, {
      "left" : "hasExp = true;",
      "right" : "hasExp = true;",
      "info" : "ExpressionStatement[47043-47057]:ExpressionStatement[47303-47317]"
    }, {
      "left" : "allowSigns = true;",
      "right" : "allowSigns = true;",
      "info" : "ExpressionStatement[47074-47092]:ExpressionStatement[47334-47352]"
    }, {
      "left" : "if (chars[i] == '+' || chars[i] == '-')",
      "right" : "if (chars[i] == '+' || chars[i] == '-')",
      "info" : "IfStatement[47112-47408]:IfStatement[47372-47668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47152-47357]:Block[47412-47617]"
    }, {
      "left" : "if (!allowSigns)",
      "right" : "if (!allowSigns)",
      "info" : "IfStatement[47170-47240]:IfStatement[47430-47500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47187-47240]:Block[47447-47500]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47209-47222]:ReturnStatement[47469-47482]"
    }, {
      "left" : "allowSigns = false;",
      "right" : "allowSigns = false;",
      "info" : "ExpressionStatement[47257-47276]:ExpressionStatement[47517-47536]"
    }, {
      "left" : "foundDigit = false;",
      "right" : "foundDigit = false;",
      "info" : "ExpressionStatement[47293-47312]:ExpressionStatement[47553-47572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47363-47408]:Block[47623-47668]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47381-47394]:ReturnStatement[47641-47654]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[47421-47425]:ExpressionStatement[47681-47685]"
    }, {
      "left" : "if (i < chars.length)",
      "right" : "if (i < chars.length)",
      "info" : "IfStatement[47444-48596]:IfStatement[47704-48856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47466-48596]:Block[47726-48856]"
    }, {
      "left" : "if (chars[i] >= '0' && chars[i] <= '9')",
      "right" : "if (chars[i] >= '0' && chars[i] <= '9')",
      "info" : "IfStatement[47480-47605]:IfStatement[47740-47865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47520-47605]:Block[47780-47865]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[47579-47591]:ReturnStatement[47839-47851]"
    }, {
      "left" : "if (chars[i] == 'e' || chars[i] == 'E')",
      "right" : "if (chars[i] == 'e' || chars[i] == 'E')",
      "info" : "IfStatement[47618-47755]:IfStatement[47878-48015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47658-47755]:Block[47918-48015]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47728-47741]:ReturnStatement[47988-48001]"
    }, {
      "left" : "if (chars[i] == '.')",
      "right" : "if (chars[i] == '.')",
      "info" : "IfStatement[47768-48071]:IfStatement[48028-48331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47789-48071]:Block[48049-48331]"
    }, {
      "left" : "if (hasDecPoint || hasExp)",
      "right" : "if (hasDecPoint || hasExp)",
      "info" : "IfStatement[47807-47948]:IfStatement[48067-48208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47834-47948]:Block[48094-48208]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47917-47930]:ReturnStatement[48177-48190]"
    }, {
      "left" : "return foundDigit;",
      "right" : "return foundDigit;",
      "info" : "ReturnStatement[48039-48057]:ReturnStatement[48299-48317]"
    }, {
      "left" : "if (!allowSigns\n                && (chars[i] == 'd'\n                    || chars[i] == 'D'\n                    || chars[i] == 'f'\n                    || chars[i] == 'F'))",
      "right" : "if (!allowSigns\n                && (chars[i] == 'd'\n                    || chars[i] == 'D'\n                    || chars[i] == 'f'\n                    || chars[i] == 'F'))",
      "info" : "IfStatement[48084-48305]:IfStatement[48344-48565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48255-48305]:Block[48515-48565]"
    }, {
      "left" : "return foundDigit;",
      "right" : "return foundDigit;",
      "info" : "ReturnStatement[48273-48291]:ReturnStatement[48533-48551]"
    }, {
      "left" : "if (chars[i] == 'l'\n                || chars[i] == 'L')",
      "right" : "if (chars[i] == 'l'\n                || chars[i] == 'L')",
      "info" : "IfStatement[48318-48519]:IfStatement[48578-48779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48374-48519]:Block[48634-48779]"
    }, {
      "left" : "return foundDigit && !hasExp && !hasDecPoint;",
      "right" : "return foundDigit && !hasExp && !hasDecPoint;",
      "info" : "ReturnStatement[48460-48505]:ReturnStatement[48720-48765]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[48573-48586]:ReturnStatement[48833-48846]"
    }, {
      "left" : "return !allowSigns && foundDigit;",
      "right" : "return !allowSigns && foundDigit;",
      "info" : "ReturnStatement[48742-48775]:ReturnStatement[49002-49035]"
    } ]
  },
  "interFileMappings" : { }
}