{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "JavaUtilCollectionsDeserializers",
      "right" : "JavaUtilCollectionsDeserializers",
      "info" : "TypeDeclaration[485-7337]:TypeDeclaration[485-7560]"
    }, {
      "left" : "private final static int TYPE_SINGLETON_SET = 1;",
      "right" : "private final static int TYPE_SINGLETON_SET = 1;",
      "info" : "FieldDeclaration[868-916]:FieldDeclaration[868-916]"
    }, {
      "left" : "private final static int TYPE_SINGLETON_LIST = 2;",
      "right" : "private final static int TYPE_SINGLETON_LIST = 2;",
      "info" : "FieldDeclaration[921-970]:FieldDeclaration[921-970]"
    }, {
      "left" : "private final static int TYPE_SINGLETON_MAP = 3;",
      "right" : "private final static int TYPE_SINGLETON_MAP = 3;",
      "info" : "FieldDeclaration[975-1023]:FieldDeclaration[975-1023]"
    }, {
      "left" : "private final static int TYPE_UNMODIFIABLE_SET = 4;",
      "right" : "private final static int TYPE_UNMODIFIABLE_SET = 4;",
      "info" : "FieldDeclaration[1029-1080]:FieldDeclaration[1029-1080]"
    }, {
      "left" : "private final static int TYPE_UNMODIFIABLE_LIST = 5;",
      "right" : "private final static int TYPE_UNMODIFIABLE_LIST = 5;",
      "info" : "FieldDeclaration[1085-1137]:FieldDeclaration[1085-1137]"
    }, {
      "left" : "private final static int TYPE_UNMODIFIABLE_MAP = 6;",
      "right" : "private final static int TYPE_UNMODIFIABLE_MAP = 6;",
      "info" : "FieldDeclaration[1142-1193]:FieldDeclaration[1142-1193]"
    }, {
      "left" : "public final static int TYPE_AS_LIST = 7;",
      "right" : "public final static int TYPE_AS_LIST = 7;",
      "info" : "FieldDeclaration[1199-1240]:FieldDeclaration[1199-1240]"
    }, {
      "left" : "private final static Class<?> CLASS_AS_ARRAYS_LIST = Arrays.asList(null, null).getClass();",
      "right" : "private final static Class<?> CLASS_AS_ARRAYS_LIST = Arrays.asList(null, null).getClass();",
      "info" : "FieldDeclaration[1333-1423]:FieldDeclaration[1333-1423]"
    }, {
      "left" : "private final static Class<?> CLASS_SINGLETON_SET;",
      "right" : "private final static Class<?> CLASS_SINGLETON_SET;",
      "info" : "FieldDeclaration[1429-1479]:FieldDeclaration[1429-1479]"
    }, {
      "left" : "private final static Class<?> CLASS_SINGLETON_LIST;",
      "right" : "private final static Class<?> CLASS_SINGLETON_LIST;",
      "info" : "FieldDeclaration[1484-1535]:FieldDeclaration[1484-1535]"
    }, {
      "left" : "private final static Class<?> CLASS_SINGLETON_MAP;",
      "right" : "private final static Class<?> CLASS_SINGLETON_MAP;",
      "info" : "FieldDeclaration[1540-1590]:FieldDeclaration[1540-1590]"
    }, {
      "left" : "private final static Class<?> CLASS_UNMODIFIABLE_SET;",
      "right" : "private final static Class<?> CLASS_UNMODIFIABLE_SET;",
      "info" : "FieldDeclaration[1596-1649]:FieldDeclaration[1596-1649]"
    }, {
      "left" : "private final static Class<?> CLASS_UNMODIFIABLE_LIST;",
      "right" : "private final static Class<?> CLASS_UNMODIFIABLE_LIST;",
      "info" : "FieldDeclaration[1654-1708]:FieldDeclaration[1654-1708]"
    }, {
      "left" : "private final static Class<?> CLASS_UNMODIFIABLE_MAP;",
      "right" : "private final static Class<?> CLASS_UNMODIFIABLE_MAP;",
      "info" : "FieldDeclaration[1870-1923]:FieldDeclaration[1935-1988]"
    }, {
      "left" : "public static JsonDeserializer<?> findForCollection(DeserializationContext ctxt,\n            JavaType type)\n        throws JsonMappingException",
      "right" : "public static JsonDeserializer<?> findForCollection(DeserializationContext ctxt,\n            JavaType type)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[2548-3703]:MethodDeclaration[2720-3926]"
    }, {
      "left" : "public static JsonDeserializer<?> findForMap(DeserializationContext ctxt,\n            JavaType type)\n        throws JsonMappingException",
      "right" : "public static JsonDeserializer<?> findForMap(DeserializationContext ctxt,\n            JavaType type)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[3709-4375]:MethodDeclaration[3932-4598]"
    }, {
      "left" : "static JavaUtilCollectionsConverter converter(int kind,\n            JavaType concreteType, Class<?> rawSuper)",
      "right" : "static JavaUtilCollectionsConverter converter(int kind,\n            JavaType concreteType, Class<?> rawSuper)",
      "info" : "MethodDeclaration[4385-4599]:MethodDeclaration[4608-4822]"
    }, {
      "left" : "JavaUtilCollectionsConverter",
      "right" : "JavaUtilCollectionsConverter",
      "info" : "TypeDeclaration[4605-7330]:TypeDeclaration[4828-7553]"
    }, {
      "left" : "private final JavaType _inputType;",
      "right" : "private final JavaType _inputType;",
      "info" : "FieldDeclaration[4966-5000]:FieldDeclaration[5189-5223]"
    }, {
      "left" : "private final int _kind;",
      "right" : "private final int _kind;",
      "info" : "FieldDeclaration[5010-5034]:FieldDeclaration[5233-5257]"
    }, {
      "left" : "private JavaUtilCollectionsConverter(int kind, JavaType inputType)",
      "right" : "private JavaUtilCollectionsConverter(int kind, JavaType inputType)",
      "info" : "MethodDeclaration[5044-5184]:MethodDeclaration[5267-5407]"
    }, {
      "left" : "public Object convert(Object value)",
      "right" : "public Object convert(Object value)",
      "info" : "MethodDeclaration[5202-6752]:MethodDeclaration[5425-6975]"
    }, {
      "left" : "public JavaType getInputType(TypeFactory typeFactory)",
      "right" : "public JavaType getInputType(TypeFactory typeFactory)",
      "info" : "MethodDeclaration[6762-6876]:MethodDeclaration[6985-7099]"
    }, {
      "left" : "public JavaType getOutputType(TypeFactory typeFactory)",
      "right" : "public JavaType getOutputType(TypeFactory typeFactory)",
      "info" : "MethodDeclaration[6886-7044]:MethodDeclaration[7109-7267]"
    }, {
      "left" : "private void _checkSingleton(int size)",
      "right" : "private void _checkSingleton(int size)",
      "info" : "MethodDeclaration[7054-7324]:MethodDeclaration[7277-7547]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1936-2542]:Block[2001-2714]"
    }, {
      "left" : "Set<?> set = Collections.singleton(Boolean.TRUE);",
      "right" : "Set<?> set = Collections.singleton(Boolean.TRUE);",
      "info" : "VariableDeclarationStatement[1946-1995]:VariableDeclarationStatement[2011-2060]"
    }, {
      "left" : "CLASS_SINGLETON_SET = set.getClass();",
      "right" : "CLASS_SINGLETON_SET = set.getClass();",
      "info" : "ExpressionStatement[2004-2041]:ExpressionStatement[2069-2106]"
    }, {
      "left" : "CLASS_UNMODIFIABLE_SET = Collections.unmodifiableSet(set).getClass();",
      "right" : "CLASS_UNMODIFIABLE_SET = Collections.unmodifiableSet(set).getClass();",
      "info" : "ExpressionStatement[2050-2119]:ExpressionStatement[2115-2184]"
    }, {
      "left" : "List<?> list = Collections.singletonList(Boolean.TRUE);",
      "right" : "List<?> list = Collections.singletonList(Boolean.TRUE);",
      "info" : "VariableDeclarationStatement[2129-2184]:VariableDeclarationStatement[2194-2249]"
    }, {
      "left" : "CLASS_SINGLETON_LIST = list.getClass();",
      "right" : "CLASS_SINGLETON_LIST = list.getClass();",
      "info" : "ExpressionStatement[2193-2232]:ExpressionStatement[2258-2297]"
    }, {
      "left" : "CLASS_UNMODIFIABLE_LIST = Collections.unmodifiableList(list).getClass();",
      "right" : "CLASS_UNMODIFIABLE_LIST = Collections.unmodifiableList(list).getClass();",
      "info" : "ExpressionStatement[2241-2313]:ExpressionStatement[2306-2378]"
    }, {
      "left" : "Map<?,?> map = Collections.singletonMap(\"a\", \"b\");",
      "right" : "Map<?,?> map = Collections.singletonMap(\"a\", \"b\");",
      "info" : "VariableDeclarationStatement[2362-2412]:VariableDeclarationStatement[2534-2584]"
    }, {
      "left" : "CLASS_SINGLETON_MAP = map.getClass();",
      "right" : "CLASS_SINGLETON_MAP = map.getClass();",
      "info" : "ExpressionStatement[2421-2458]:ExpressionStatement[2593-2630]"
    }, {
      "left" : "CLASS_UNMODIFIABLE_MAP = Collections.unmodifiableMap(map).getClass();",
      "right" : "CLASS_UNMODIFIABLE_MAP = Collections.unmodifiableMap(map).getClass();",
      "info" : "ExpressionStatement[2467-2536]:ExpressionStatement[2639-2708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2696-3703]:Block[2868-3926]"
    }, {
      "left" : "JavaUtilCollectionsConverter conv;",
      "right" : "JavaUtilCollectionsConverter conv;",
      "info" : "VariableDeclarationStatement[2706-2740]:VariableDeclarationStatement[2878-2912]"
    }, {
      "left" : "if (type.hasRawClass(CLASS_AS_ARRAYS_LIST))",
      "right" : "if (type.hasRawClass(CLASS_AS_ARRAYS_LIST))",
      "info" : "IfStatement[2859-3637]:IfStatement[3031-3860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2903-2976]:Block[3075-3148]"
    }, {
      "left" : "conv = converter(TYPE_AS_LIST, type, List.class);",
      "right" : "conv = converter(TYPE_AS_LIST, type, List.class);",
      "info" : "ExpressionStatement[2917-2966]:ExpressionStatement[3089-3138]"
    }, {
      "left" : "if (type.hasRawClass(CLASS_SINGLETON_LIST))",
      "right" : "if (type.hasRawClass(CLASS_SINGLETON_LIST))",
      "info" : "IfStatement[2982-3637]:IfStatement[3154-3860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3026-3106]:Block[3198-3278]"
    }, {
      "left" : "conv = converter(TYPE_SINGLETON_LIST, type, List.class);",
      "right" : "conv = converter(TYPE_SINGLETON_LIST, type, List.class);",
      "info" : "ExpressionStatement[3040-3096]:ExpressionStatement[3212-3268]"
    }, {
      "left" : "if (type.hasRawClass(CLASS_SINGLETON_SET))",
      "right" : "if (type.hasRawClass(CLASS_SINGLETON_SET))",
      "info" : "IfStatement[3112-3637]:IfStatement[3284-3860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3155-3326]:Block[3327-3498]"
    }, {
      "left" : "conv = converter(TYPE_SINGLETON_SET, type, Set.class);",
      "right" : "conv = converter(TYPE_SINGLETON_SET, type, Set.class);",
      "info" : "ExpressionStatement[3169-3223]:ExpressionStatement[3341-3395]"
    }, {
      "left" : "if (type.hasRawClass(CLASS_UNMODIFIABLE_LIST))",
      "right" : "if (type.hasRawClass(CLASS_UNMODIFIABLE_LIST) || type.hasRawClass(CLASS_UNMODIFIABLE_LIST_ALIAS))",
      "info" : "IfStatement[3332-3637]:IfStatement[3504-3860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3379-3462]:Block[3602-3685]"
    }, {
      "left" : "conv = converter(TYPE_UNMODIFIABLE_LIST, type, List.class);",
      "right" : "conv = converter(TYPE_UNMODIFIABLE_LIST, type, List.class);",
      "info" : "ExpressionStatement[3393-3452]:ExpressionStatement[3616-3675]"
    }, {
      "left" : "if (type.hasRawClass(CLASS_UNMODIFIABLE_SET))",
      "right" : "if (type.hasRawClass(CLASS_UNMODIFIABLE_SET))",
      "info" : "IfStatement[3468-3637]:IfStatement[3691-3860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3514-3595]:Block[3737-3818]"
    }, {
      "left" : "conv = converter(TYPE_UNMODIFIABLE_SET, type, Set.class);",
      "right" : "conv = converter(TYPE_UNMODIFIABLE_SET, type, Set.class);",
      "info" : "ExpressionStatement[3528-3585]:ExpressionStatement[3751-3808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3601-3637]:Block[3824-3860]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3615-3627]:ReturnStatement[3838-3850]"
    }, {
      "left" : "return new StdDelegatingDeserializer<Object>(conv);",
      "right" : "return new StdDelegatingDeserializer<Object>(conv);",
      "info" : "ReturnStatement[3646-3697]:ReturnStatement[3869-3920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3850-4375]:Block[4073-4598]"
    }, {
      "left" : "JavaUtilCollectionsConverter conv;",
      "right" : "JavaUtilCollectionsConverter conv;",
      "info" : "VariableDeclarationStatement[3860-3894]:VariableDeclarationStatement[4083-4117]"
    }, {
      "left" : "if (type.hasRawClass(CLASS_SINGLETON_MAP))",
      "right" : "if (type.hasRawClass(CLASS_SINGLETON_MAP))",
      "info" : "IfStatement[4013-4309]:IfStatement[4236-4532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4056-4134]:Block[4279-4357]"
    }, {
      "left" : "conv = converter(TYPE_SINGLETON_MAP, type, Map.class);",
      "right" : "conv = converter(TYPE_SINGLETON_MAP, type, Map.class);",
      "info" : "ExpressionStatement[4070-4124]:ExpressionStatement[4293-4347]"
    }, {
      "left" : "if (type.hasRawClass(CLASS_UNMODIFIABLE_MAP))",
      "right" : "if (type.hasRawClass(CLASS_UNMODIFIABLE_MAP))",
      "info" : "IfStatement[4140-4309]:IfStatement[4363-4532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4186-4267]:Block[4409-4490]"
    }, {
      "left" : "conv = converter(TYPE_UNMODIFIABLE_MAP, type, Map.class);",
      "right" : "conv = converter(TYPE_UNMODIFIABLE_MAP, type, Map.class);",
      "info" : "ExpressionStatement[4200-4257]:ExpressionStatement[4423-4480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4273-4309]:Block[4496-4532]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[4287-4299]:ReturnStatement[4510-4522]"
    }, {
      "left" : "return new StdDelegatingDeserializer<Object>(conv);",
      "right" : "return new StdDelegatingDeserializer<Object>(conv);",
      "info" : "ReturnStatement[4318-4369]:ReturnStatement[4541-4592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4499-4599]:Block[4722-4822]"
    }, {
      "left" : "return new JavaUtilCollectionsConverter(kind, concreteType.findSuperType(rawSuper));",
      "right" : "return new JavaUtilCollectionsConverter(kind, concreteType.findSuperType(rawSuper));",
      "info" : "ReturnStatement[4509-4593]:ReturnStatement[4732-4816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5111-5184]:Block[5334-5407]"
    }, {
      "left" : "_inputType = inputType;",
      "right" : "_inputType = inputType;",
      "info" : "ExpressionStatement[5125-5148]:ExpressionStatement[5348-5371]"
    }, {
      "left" : "_kind = kind;",
      "right" : "_kind = kind;",
      "info" : "ExpressionStatement[5161-5174]:ExpressionStatement[5384-5397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5256-6752]:Block[5479-6975]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[5270-5358]:IfStatement[5493-5581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5289-5358]:Block[5512-5581]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[5332-5344]:ReturnStatement[5555-5567]"
    }, {
      "left" : "switch (_kind) {\n            case TYPE_SINGLETON_SET:\n                {\n                    Set<?> set = (Set<?>) value;\n                    _checkSingleton(set.size());\n                    return Collections.singleton(set.iterator().next());\n                }\n            case TYPE_SINGLETON_LIST:\n                {\n                    List<?> list = (List<?>) value;\n                    _checkSingleton(list.size());\n                    return Collections.singletonList(list.get(0));\n                }\n            case TYPE_SINGLETON_MAP:\n                {\n                    Map<?,?> map = (Map<?,?>) value;\n                    _checkSingleton(map.size());\n                    Map.Entry<?,?> entry = map.entrySet().iterator().next();\n                    return Collections.singletonMap(entry.getKey(), entry.getValue());\n                }\n\n            case TYPE_UNMODIFIABLE_SET:\n                return Collections.unmodifiableSet((Set<?>) value);\n            case TYPE_UNMODIFIABLE_LIST:\n                return Collections.unmodifiableList((List<?>) value);\n            case TYPE_UNMODIFIABLE_MAP:\n                return Collections.unmodifiableMap((Map<?,?>) value);\n\n            case TYPE_AS_LIST:\n            default:\n                // Here we do not actually care about impl type, just return List as-is:\n                return value;\n            }",
      "right" : "switch (_kind) {\n            case TYPE_SINGLETON_SET:\n                {\n                    Set<?> set = (Set<?>) value;\n                    _checkSingleton(set.size());\n                    return Collections.singleton(set.iterator().next());\n                }\n            case TYPE_SINGLETON_LIST:\n                {\n                    List<?> list = (List<?>) value;\n                    _checkSingleton(list.size());\n                    return Collections.singletonList(list.get(0));\n                }\n            case TYPE_SINGLETON_MAP:\n                {\n                    Map<?,?> map = (Map<?,?>) value;\n                    _checkSingleton(map.size());\n                    Map.Entry<?,?> entry = map.entrySet().iterator().next();\n                    return Collections.singletonMap(entry.getKey(), entry.getValue());\n                }\n\n            case TYPE_UNMODIFIABLE_SET:\n                return Collections.unmodifiableSet((Set<?>) value);\n            case TYPE_UNMODIFIABLE_LIST:\n                return Collections.unmodifiableList((List<?>) value);\n            case TYPE_UNMODIFIABLE_MAP:\n                return Collections.unmodifiableMap((Map<?,?>) value);\n\n            case TYPE_AS_LIST:\n            default:\n                // Here we do not actually care about impl type, just return List as-is:\n                return value;\n            }",
      "info" : "SwitchStatement[5384-6742]:SwitchStatement[5607-6965]"
    }, {
      "left" : "case TYPE_SINGLETON_SET:",
      "right" : "case TYPE_SINGLETON_SET:",
      "info" : "SwitchCase[5413-5437]:SwitchCase[5636-5660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5454-5644]:Block[5677-5867]"
    }, {
      "left" : "Set<?> set = (Set<?>) value;",
      "right" : "Set<?> set = (Set<?>) value;",
      "info" : "VariableDeclarationStatement[5476-5504]:VariableDeclarationStatement[5699-5727]"
    }, {
      "left" : "_checkSingleton(set.size());",
      "right" : "_checkSingleton(set.size());",
      "info" : "ExpressionStatement[5525-5553]:ExpressionStatement[5748-5776]"
    }, {
      "left" : "return Collections.singleton(set.iterator().next());",
      "right" : "return Collections.singleton(set.iterator().next());",
      "info" : "ReturnStatement[5574-5626]:ReturnStatement[5797-5849]"
    }, {
      "left" : "case TYPE_SINGLETON_LIST:",
      "right" : "case TYPE_SINGLETON_LIST:",
      "info" : "SwitchCase[5657-5682]:SwitchCase[5880-5905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5699-5887]:Block[5922-6110]"
    }, {
      "left" : "List<?> list = (List<?>) value;",
      "right" : "List<?> list = (List<?>) value;",
      "info" : "VariableDeclarationStatement[5721-5752]:VariableDeclarationStatement[5944-5975]"
    }, {
      "left" : "_checkSingleton(list.size());",
      "right" : "_checkSingleton(list.size());",
      "info" : "ExpressionStatement[5773-5802]:ExpressionStatement[5996-6025]"
    }, {
      "left" : "return Collections.singletonList(list.get(0));",
      "right" : "return Collections.singletonList(list.get(0));",
      "info" : "ReturnStatement[5823-5869]:ReturnStatement[6046-6092]"
    }, {
      "left" : "case TYPE_SINGLETON_MAP:",
      "right" : "case TYPE_SINGLETON_MAP:",
      "info" : "SwitchCase[5900-5924]:SwitchCase[6123-6147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5941-6226]:Block[6164-6449]"
    }, {
      "left" : "Map<?,?> map = (Map<?,?>) value;",
      "right" : "Map<?,?> map = (Map<?,?>) value;",
      "info" : "VariableDeclarationStatement[5963-5995]:VariableDeclarationStatement[6186-6218]"
    }, {
      "left" : "_checkSingleton(map.size());",
      "right" : "_checkSingleton(map.size());",
      "info" : "ExpressionStatement[6016-6044]:ExpressionStatement[6239-6267]"
    }, {
      "left" : "Map.Entry<?,?> entry = map.entrySet().iterator().next();",
      "right" : "Map.Entry<?,?> entry = map.entrySet().iterator().next();",
      "info" : "VariableDeclarationStatement[6065-6121]:VariableDeclarationStatement[6288-6344]"
    }, {
      "left" : "return Collections.singletonMap(entry.getKey(), entry.getValue());",
      "right" : "return Collections.singletonMap(entry.getKey(), entry.getValue());",
      "info" : "ReturnStatement[6142-6208]:ReturnStatement[6365-6431]"
    }, {
      "left" : "case TYPE_UNMODIFIABLE_SET:",
      "right" : "case TYPE_UNMODIFIABLE_SET:",
      "info" : "SwitchCase[6240-6267]:SwitchCase[6463-6490]"
    }, {
      "left" : "return Collections.unmodifiableSet((Set<?>) value);",
      "right" : "return Collections.unmodifiableSet((Set<?>) value);",
      "info" : "ReturnStatement[6284-6335]:ReturnStatement[6507-6558]"
    }, {
      "left" : "case TYPE_UNMODIFIABLE_LIST:",
      "right" : "case TYPE_UNMODIFIABLE_LIST:",
      "info" : "SwitchCase[6348-6376]:SwitchCase[6571-6599]"
    }, {
      "left" : "return Collections.unmodifiableList((List<?>) value);",
      "right" : "return Collections.unmodifiableList((List<?>) value);",
      "info" : "ReturnStatement[6393-6446]:ReturnStatement[6616-6669]"
    }, {
      "left" : "case TYPE_UNMODIFIABLE_MAP:",
      "right" : "case TYPE_UNMODIFIABLE_MAP:",
      "info" : "SwitchCase[6459-6486]:SwitchCase[6682-6709]"
    }, {
      "left" : "return Collections.unmodifiableMap((Map<?,?>) value);",
      "right" : "return Collections.unmodifiableMap((Map<?,?>) value);",
      "info" : "ReturnStatement[6503-6556]:ReturnStatement[6726-6779]"
    }, {
      "left" : "case TYPE_AS_LIST:",
      "right" : "case TYPE_AS_LIST:",
      "info" : "SwitchCase[6570-6588]:SwitchCase[6793-6811]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[6601-6609]:SwitchCase[6824-6832]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[6715-6728]:ReturnStatement[6938-6951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6834-6876]:Block[7057-7099]"
    }, {
      "left" : "return _inputType;",
      "right" : "return _inputType;",
      "info" : "ReturnStatement[6848-6866]:ReturnStatement[7071-7089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6959-7044]:Block[7182-7267]"
    }, {
      "left" : "return _inputType;",
      "right" : "return _inputType;",
      "info" : "ReturnStatement[7016-7034]:ReturnStatement[7239-7257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7093-7324]:Block[7316-7547]"
    }, {
      "left" : "if (size != 1)",
      "right" : "if (size != 1)",
      "info" : "IfStatement[7107-7314]:IfStatement[7330-7537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7122-7314]:Block[7345-7537]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Can not deserialize Singleton container from \"+size+\" entries\");",
      "right" : "throw new IllegalArgumentException(\"Can not deserialize Singleton container from \"+size+\" entries\");",
      "info" : "ThrowStatement[7200-7300]:ThrowStatement[7423-7523]"
    } ]
  },
  "interFileMappings" : { }
}