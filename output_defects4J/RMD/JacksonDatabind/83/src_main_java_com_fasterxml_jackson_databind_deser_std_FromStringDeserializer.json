{
  "matchedElements" : [
 {
    "left" : "class : FromStringDeserializer",
    "right" : "class : FromStringDeserializer",
    "info" : "TypeDeclaration[739-11649]:TypeDeclaration[739-11575]"
  }, {
    "left" : "public types() : ",
    "right" : "public types() : ",
    "info" : "MethodDeclaration[955-1398]:MethodDeclaration[955-1398]"
  }, {
    "left" : "protected FromStringDeserializer(vc )",
    "right" : "protected FromStringDeserializer(vc )",
    "info" : "MethodDeclaration[1592-1664]:MethodDeclaration[1592-1664]"
  }, {
    "left" : "public findDeserializer(rawType ) : ",
    "right" : "public findDeserializer(rawType ) : ",
    "info" : "MethodDeclaration[1670-3093]:MethodDeclaration[1670-3093]"
  }, {
    "left" : "public deserialize(p , ctxt ) : ",
    "right" : "public deserialize(p , ctxt ) : ",
    "info" : "MethodDeclaration[3287-5654]:MethodDeclaration[3287-5580]"
  }, {
    "left" : "protected abstract _deserialize(value , ctxt ) : ",
    "right" : "protected abstract _deserialize(value , ctxt ) : ",
    "info" : "MethodDeclaration[5668-5764]:MethodDeclaration[5594-5690]"
  }, {
    "left" : "protected _deserializeEmbedded(ob , ctxt ) : ",
    "right" : "protected _deserializeEmbedded(ob , ctxt ) : ",
    "info" : "MethodDeclaration[5770-6090]:MethodDeclaration[5696-6016]"
  }, {
    "left" : "protected _deserializeFromEmptyString() : ",
    "right" : "protected _deserializeFromEmptyString() : ",
    "info" : "MethodDeclaration[6096-6185]:MethodDeclaration[6022-6111]"
  }, {
    "left" : "class : Std",
    "right" : "class : Std",
    "info" : "TypeDeclaration[6375-11647]:TypeDeclaration[6301-11573]"
  }, {
    "left" : "serialVersionUID",
    "right" : "serialVersionUID",
    "info" : "FieldDeclaration[6604-6651]:FieldDeclaration[6530-6577]"
  }, {
    "left" : "STD_FILE",
    "right" : "STD_FILE",
    "info" : "FieldDeclaration[6661-6698]:FieldDeclaration[6587-6624]"
  }, {
    "left" : "STD_URL",
    "right" : "STD_URL",
    "info" : "FieldDeclaration[6707-6743]:FieldDeclaration[6633-6669]"
  }, {
    "left" : "STD_URI",
    "right" : "STD_URI",
    "info" : "FieldDeclaration[6752-6788]:FieldDeclaration[6678-6714]"
  }, {
    "left" : "STD_CLASS",
    "right" : "STD_CLASS",
    "info" : "FieldDeclaration[6797-6835]:FieldDeclaration[6723-6761]"
  }, {
    "left" : "STD_JAVA_TYPE",
    "right" : "STD_JAVA_TYPE",
    "info" : "FieldDeclaration[6844-6886]:FieldDeclaration[6770-6812]"
  }, {
    "left" : "STD_CURRENCY",
    "right" : "STD_CURRENCY",
    "info" : "FieldDeclaration[6895-6936]:FieldDeclaration[6821-6862]"
  }, {
    "left" : "STD_PATTERN",
    "right" : "STD_PATTERN",
    "info" : "FieldDeclaration[6945-6985]:FieldDeclaration[6871-6911]"
  }, {
    "left" : "STD_LOCALE",
    "right" : "STD_LOCALE",
    "info" : "FieldDeclaration[6994-7033]:FieldDeclaration[6920-6959]"
  }, {
    "left" : "STD_CHARSET",
    "right" : "STD_CHARSET",
    "info" : "FieldDeclaration[7042-7082]:FieldDeclaration[6968-7008]"
  }, {
    "left" : "STD_TIME_ZONE",
    "right" : "STD_TIME_ZONE",
    "info" : "FieldDeclaration[7091-7134]:FieldDeclaration[7017-7060]"
  }, {
    "left" : "STD_INET_ADDRESS",
    "right" : "STD_INET_ADDRESS",
    "info" : "FieldDeclaration[7143-7189]:FieldDeclaration[7069-7115]"
  }, {
    "left" : "STD_INET_SOCKET_ADDRESS",
    "right" : "STD_INET_SOCKET_ADDRESS",
    "info" : "FieldDeclaration[7198-7251]:FieldDeclaration[7124-7177]"
  }, {
    "left" : "STD_STRING_BUILDER",
    "right" : "STD_STRING_BUILDER",
    "info" : "FieldDeclaration[7260-7308]:FieldDeclaration[7186-7234]"
  }, {
    "left" : "_kind",
    "right" : "_kind",
    "info" : "FieldDeclaration[7318-7344]:FieldDeclaration[7244-7270]"
  }, {
    "left" : "protected Std(valueType , kind int)",
    "right" : "protected Std(valueType , kind int)",
    "info" : "MethodDeclaration[7362-7473]:MethodDeclaration[7288-7399]"
  }, {
    "left" : "protected _deserialize(value , ctxt ) : ",
    "right" : "protected _deserialize(value , ctxt ) : ",
    "info" : "MethodDeclaration[7483-10766]:MethodDeclaration[7409-10692]"
  }, {
    "left" : "protected _deserializeFromEmptyString() : ",
    "right" : "protected _deserializeFromEmptyString() : ",
    "info" : "MethodDeclaration[10776-11328]:MethodDeclaration[10702-11254]"
  }, {
    "left" : "protected _firstHyphenOrUnderscore(str ) : int",
    "right" : "protected _firstHyphenOrUnderscore(str ) : int",
    "info" : "MethodDeclaration[11338-11641]:MethodDeclaration[11264-11567]"
  } ],
  "mappings" : [
 {
    "left" : "@SuppressWarnings(\"serial\")",
    "right" : "@SuppressWarnings(\"serial\")",
    "info" : "SingleMemberAnnotation[840-867]:SingleMemberAnnotation[840-867]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[868-874]:Modifier[868-874]"
  }, {
    "left" : "abstract",
    "right" : "abstract",
    "info" : "Modifier[875-883]:Modifier[875-883]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[884-889]:TYPE_DECLARATION_KIND[884-889]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[955-961]:Modifier[955-961]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[962-968]:Modifier[962-968]"
  }, {
    "left" : "Class<?>[]",
    "right" : "Class<?>[]",
    "info" : "ArrayType[969-979]:ArrayType[969-979]"
  }, {
    "left" : "types",
    "right" : "types",
    "info" : "SimpleName[980-985]:SimpleName[980-985]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[988-1398]:Block[988-1398]"
  }, {
    "left" : "return new Class<?>[] {\n            File.class,\n            URL.class,\n            URI.class,\n            Class.class,\n            JavaType.class,\n            Currency.class,\n            Pattern.class,\n            Locale.class,\n            Charset.class,\n            TimeZone.class,\n            InetAddress.class,\n            InetSocketAddress.class,\n            StringBuilder.class,\n        };",
    "right" : "return new Class<?>[] {\n            File.class,\n            URL.class,\n            URI.class,\n            Class.class,\n            JavaType.class,\n            Currency.class,\n            Pattern.class,\n            Locale.class,\n            Charset.class,\n            TimeZone.class,\n            InetAddress.class,\n            InetSocketAddress.class,\n            StringBuilder.class,\n        };",
    "info" : "ReturnStatement[998-1392]:ReturnStatement[998-1392]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[1592-1601]:Modifier[1592-1601]"
  }, {
    "left" : "FromStringDeserializer",
    "right" : "FromStringDeserializer",
    "info" : "SimpleName[1602-1624]:SimpleName[1602-1624]"
  }, {
    "left" : "Class<?> vc",
    "right" : "Class<?> vc",
    "info" : "SingleVariableDeclaration[1625-1636]:SingleVariableDeclaration[1625-1636]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1638-1664]:Block[1638-1664]"
  }, {
    "left" : "super(vc);",
    "right" : "super(vc);",
    "info" : "SuperConstructorInvocation[1648-1658]:SuperConstructorInvocation[1648-1658]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1820-1826]:Modifier[1820-1826]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[1827-1833]:Modifier[1827-1833]"
  }, {
    "left" : "Std",
    "right" : "Std",
    "info" : "SimpleType[1834-1837]:SimpleType[1834-1837]"
  }, {
    "left" : "findDeserializer",
    "right" : "findDeserializer",
    "info" : "SimpleName[1838-1854]:SimpleName[1838-1854]"
  }, {
    "left" : "Class<?> rawType",
    "right" : "Class<?> rawType",
    "info" : "SingleVariableDeclaration[1855-1871]:SingleVariableDeclaration[1855-1871]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1877-3093]:Block[1877-3093]"
  }, {
    "left" : "int kind = 0;",
    "right" : "int kind = 0;",
    "info" : "VariableDeclarationStatement[1887-1900]:VariableDeclarationStatement[1887-1900]"
  }, {
    "left" : "if (rawType == File.class)",
    "right" : "if (rawType == File.class)",
    "info" : "IfStatement[1909-3048]:IfStatement[1909-3048]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1936-1980]:Block[1936-1980]"
  }, {
    "left" : "kind = Std.STD_FILE;",
    "right" : "kind = Std.STD_FILE;",
    "info" : "ExpressionStatement[1950-1970]:ExpressionStatement[1950-1970]"
  }, {
    "left" : "if (rawType == URL.class)",
    "right" : "if (rawType == URL.class)",
    "info" : "IfStatement[1986-3048]:IfStatement[1986-3048]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2012-2055]:Block[2012-2055]"
  }, {
    "left" : "kind = Std.STD_URL;",
    "right" : "kind = Std.STD_URL;",
    "info" : "ExpressionStatement[2026-2045]:ExpressionStatement[2026-2045]"
  }, {
    "left" : "if (rawType == URI.class)",
    "right" : "if (rawType == URI.class)",
    "info" : "IfStatement[2061-3048]:IfStatement[2061-3048]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2087-2130]:Block[2087-2130]"
  }, {
    "left" : "kind = Std.STD_URI;",
    "right" : "kind = Std.STD_URI;",
    "info" : "ExpressionStatement[2101-2120]:ExpressionStatement[2101-2120]"
  }, {
    "left" : "if (rawType == Class.class)",
    "right" : "if (rawType == Class.class)",
    "info" : "IfStatement[2136-3048]:IfStatement[2136-3048]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2164-2209]:Block[2164-2209]"
  }, {
    "left" : "kind = Std.STD_CLASS;",
    "right" : "kind = Std.STD_CLASS;",
    "info" : "ExpressionStatement[2178-2199]:ExpressionStatement[2178-2199]"
  }, {
    "left" : "if (rawType == JavaType.class)",
    "right" : "if (rawType == JavaType.class)",
    "info" : "IfStatement[2215-3048]:IfStatement[2215-3048]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2246-2295]:Block[2246-2295]"
  }, {
    "left" : "kind = Std.STD_JAVA_TYPE;",
    "right" : "kind = Std.STD_JAVA_TYPE;",
    "info" : "ExpressionStatement[2260-2285]:ExpressionStatement[2260-2285]"
  }, {
    "left" : "if (rawType == Currency.class)",
    "right" : "if (rawType == Currency.class)",
    "info" : "IfStatement[2301-3048]:IfStatement[2301-3048]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2332-2380]:Block[2332-2380]"
  }, {
    "left" : "kind = Std.STD_CURRENCY;",
    "right" : "kind = Std.STD_CURRENCY;",
    "info" : "ExpressionStatement[2346-2370]:ExpressionStatement[2346-2370]"
  }, {
    "left" : "if (rawType == Pattern.class)",
    "right" : "if (rawType == Pattern.class)",
    "info" : "IfStatement[2386-3048]:IfStatement[2386-3048]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2416-2463]:Block[2416-2463]"
  }, {
    "left" : "kind = Std.STD_PATTERN;",
    "right" : "kind = Std.STD_PATTERN;",
    "info" : "ExpressionStatement[2430-2453]:ExpressionStatement[2430-2453]"
  }, {
    "left" : "if (rawType == Locale.class)",
    "right" : "if (rawType == Locale.class)",
    "info" : "IfStatement[2469-3048]:IfStatement[2469-3048]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2498-2544]:Block[2498-2544]"
  }, {
    "left" : "kind = Std.STD_LOCALE;",
    "right" : "kind = Std.STD_LOCALE;",
    "info" : "ExpressionStatement[2512-2534]:ExpressionStatement[2512-2534]"
  }, {
    "left" : "if (rawType == Charset.class)",
    "right" : "if (rawType == Charset.class)",
    "info" : "IfStatement[2550-3048]:IfStatement[2550-3048]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2580-2627]:Block[2580-2627]"
  }, {
    "left" : "kind = Std.STD_CHARSET;",
    "right" : "kind = Std.STD_CHARSET;",
    "info" : "ExpressionStatement[2594-2617]:ExpressionStatement[2594-2617]"
  }, {
    "left" : "if (rawType == TimeZone.class)",
    "right" : "if (rawType == TimeZone.class)",
    "info" : "IfStatement[2633-3048]:IfStatement[2633-3048]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2664-2713]:Block[2664-2713]"
  }, {
    "left" : "kind = Std.STD_TIME_ZONE;",
    "right" : "kind = Std.STD_TIME_ZONE;",
    "info" : "ExpressionStatement[2678-2703]:ExpressionStatement[2678-2703]"
  }, {
    "left" : "if (rawType == InetAddress.class)",
    "right" : "if (rawType == InetAddress.class)",
    "info" : "IfStatement[2719-3048]:IfStatement[2719-3048]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2753-2805]:Block[2753-2805]"
  }, {
    "left" : "kind = Std.STD_INET_ADDRESS;",
    "right" : "kind = Std.STD_INET_ADDRESS;",
    "info" : "ExpressionStatement[2767-2795]:ExpressionStatement[2767-2795]"
  }, {
    "left" : "if (rawType == InetSocketAddress.class)",
    "right" : "if (rawType == InetSocketAddress.class)",
    "info" : "IfStatement[2811-3048]:IfStatement[2811-3048]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2851-2910]:Block[2851-2910]"
  }, {
    "left" : "kind = Std.STD_INET_SOCKET_ADDRESS;",
    "right" : "kind = Std.STD_INET_SOCKET_ADDRESS;",
    "info" : "ExpressionStatement[2865-2900]:ExpressionStatement[2865-2900]"
  }, {
    "left" : "if (rawType == StringBuilder.class)",
    "right" : "if (rawType == StringBuilder.class)",
    "info" : "IfStatement[2916-3048]:IfStatement[2916-3048]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2952-3006]:Block[2952-3006]"
  }, {
    "left" : "kind = Std.STD_STRING_BUILDER;",
    "right" : "kind = Std.STD_STRING_BUILDER;",
    "info" : "ExpressionStatement[2966-2996]:ExpressionStatement[2966-2996]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3012-3048]:Block[3012-3048]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[3026-3038]:ReturnStatement[3026-3038]"
  }, {
    "left" : "return new Std(rawType, kind);",
    "right" : "return new Std(rawType, kind);",
    "info" : "ReturnStatement[3057-3087]:ReturnStatement[3057-3087]"
  }, {
    "left" : "@SuppressWarnings(\"unchecked\")",
    "right" : "@SuppressWarnings(\"unchecked\")",
    "info" : "SingleMemberAnnotation[3287-3317]:SingleMemberAnnotation[3287-3317]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[3322-3331]:MarkerAnnotation[3322-3331]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3336-3342]:Modifier[3336-3342]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "SimpleType[3343-3344]:SimpleType[3343-3344]"
  }, {
    "left" : "deserialize",
    "right" : "deserialize",
    "info" : "SimpleName[3345-3356]:SimpleName[3345-3356]"
  }, {
    "left" : "JsonParser p",
    "right" : "JsonParser p",
    "info" : "SingleVariableDeclaration[3357-3369]:SingleVariableDeclaration[3357-3369]"
  }, {
    "left" : "DeserializationContext ctxt",
    "right" : "DeserializationContext ctxt",
    "info" : "SingleVariableDeclaration[3371-3398]:SingleVariableDeclaration[3371-3398]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[3407-3418]:SimpleType[3407-3418]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3423-5654]:Block[3423-5580]"
  }, {
    "left" : "String text = p.getValueAsString();",
    "right" : "String text = p.getValueAsString();",
    "info" : "VariableDeclarationStatement[3513-3548]:VariableDeclarationStatement[3513-3548]"
  }, {
    "left" : "if (text != null)",
    "right" : "if (text != null)",
    "info" : "IfStatement[3557-4989]:IfStatement[3557-4915]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3575-4989]:Block[3575-4915]"
  }, {
    "left" : "if (text.length() == 0 || (text = text.trim()).length() == 0)",
    "right" : "if (text.length() == 0 || (text = text.trim()).length() == 0)",
    "info" : "IfStatement[3618-3830]:IfStatement[3618-3830]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3680-3830]:Block[3680-3830]"
  }, {
    "left" : "return _deserializeFromEmptyString();",
    "right" : "return _deserializeFromEmptyString();",
    "info" : "ReturnStatement[3779-3816]:ReturnStatement[3779-3816]"
  }, {
    "left" : "Exception cause = null;",
    "right" : "Exception cause = null;",
    "info" : "VariableDeclarationStatement[3843-3866]:VariableDeclarationStatement[3843-3866]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[3879-4392]:TryStatement[3879-4318]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3883-4233]:Block[3883-4159]"
  }, {
    "left" : "return _deserialize(text, ctxt);",
    "right" : "return _deserialize(text, ctxt);",
    "info" : "ReturnStatement[4169-4201]:ReturnStatement[4113-4145]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4271-4315]:Block[4197-4241]"
  }, {
    "left" : "cause = iae;",
    "right" : "cause = iae;",
    "info" : "ExpressionStatement[4289-4301]:ExpressionStatement[4215-4227]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4349-4392]:Block[4275-4318]"
  }, {
    "left" : "cause = me;",
    "right" : "cause = me;",
    "info" : "ExpressionStatement[4367-4378]:ExpressionStatement[4293-4304]"
  }, {
    "left" : "String msg = \"not a valid textual representation\";",
    "right" : "String msg = \"not a valid textual representation\";",
    "info" : "VariableDeclarationStatement[4405-4455]:VariableDeclarationStatement[4331-4381]"
  }, {
    "left" : "if (cause != null)",
    "right" : "if (cause != null)",
    "info" : "IfStatement[4468-4652]:IfStatement[4394-4578]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4487-4652]:Block[4413-4578]"
  }, {
    "left" : "String m2 = cause.getMessage();",
    "right" : "String m2 = cause.getMessage();",
    "info" : "VariableDeclarationStatement[4505-4536]:VariableDeclarationStatement[4431-4462]"
  }, {
    "left" : "if (m2 != null)",
    "right" : "if (m2 != null)",
    "info" : "IfStatement[4553-4638]:IfStatement[4479-4564]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4569-4638]:Block[4495-4564]"
  }, {
    "left" : "msg = msg + \", problem: \"+m2;",
    "right" : "msg = msg + \", problem: \"+m2;",
    "info" : "ExpressionStatement[4591-4620]:ExpressionStatement[4517-4546]"
  }, {
    "left" : "JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);",
    "right" : "JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);",
    "info" : "VariableDeclarationStatement[4742-4817]:VariableDeclarationStatement[4668-4743]"
  }, {
    "left" : "if (cause != null)",
    "right" : "if (cause != null)",
    "info" : "IfStatement[4830-4900]:IfStatement[4756-4826]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4849-4900]:Block[4775-4826]"
  }, {
    "left" : "e.initCause(cause);",
    "right" : "e.initCause(cause);",
    "info" : "ExpressionStatement[4867-4886]:ExpressionStatement[4793-4812]"
  }, {
    "left" : "throw e;",
    "right" : "throw e;",
    "info" : "ThrowStatement[4913-4921]:ThrowStatement[4839-4847]"
  }, {
    "left" : "JsonToken t = p.getCurrentToken();",
    "right" : "JsonToken t = p.getCurrentToken();",
    "info" : "VariableDeclarationStatement[4998-5032]:VariableDeclarationStatement[4924-4958]"
  }, {
    "left" : "if (t == JsonToken.START_ARRAY)",
    "right" : "if (t == JsonToken.START_ARRAY)",
    "info" : "IfStatement[5067-5161]:IfStatement[4993-5087]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5099-5161]:Block[5025-5087]"
  }, {
    "left" : "return _deserializeFromArray(p, ctxt);",
    "right" : "return _deserializeFromArray(p, ctxt);",
    "info" : "ReturnStatement[5113-5151]:ReturnStatement[5039-5077]"
  }, {
    "left" : "if (t == JsonToken.VALUE_EMBEDDED_OBJECT)",
    "right" : "if (t == JsonToken.VALUE_EMBEDDED_OBJECT)",
    "info" : "IfStatement[5170-5585]:IfStatement[5096-5511]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5212-5585]:Block[5138-5511]"
  }, {
    "left" : "Object ob = p.getEmbeddedObject();",
    "right" : "Object ob = p.getEmbeddedObject();",
    "info" : "VariableDeclarationStatement[5309-5343]:VariableDeclarationStatement[5235-5269]"
  }, {
    "left" : "if (ob == null)",
    "right" : "if (ob == null)",
    "info" : "IfStatement[5356-5416]:IfStatement[5282-5342]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5372-5416]:Block[5298-5342]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[5390-5402]:ReturnStatement[5316-5328]"
  }, {
    "left" : "if (_valueClass.isAssignableFrom(ob.getClass()))",
    "right" : "if (_valueClass.isAssignableFrom(ob.getClass()))",
    "info" : "IfStatement[5429-5524]:IfStatement[5355-5450]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5478-5524]:Block[5404-5450]"
  }, {
    "left" : "return (T) ob;",
    "right" : "return (T) ob;",
    "info" : "ReturnStatement[5496-5510]:ReturnStatement[5422-5436]"
  }, {
    "left" : "return _deserializeEmbedded(ob, ctxt);",
    "right" : "return _deserializeEmbedded(ob, ctxt);",
    "info" : "ReturnStatement[5537-5575]:ReturnStatement[5463-5501]"
  }, {
    "left" : "return (T) ctxt.handleUnexpectedToken(_valueClass, p);",
    "right" : "return (T) ctxt.handleUnexpectedToken(_valueClass, p);",
    "info" : "ReturnStatement[5594-5648]:ReturnStatement[5520-5574]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[5668-5677]:Modifier[5594-5603]"
  }, {
    "left" : "abstract",
    "right" : "abstract",
    "info" : "Modifier[5678-5686]:Modifier[5604-5612]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "SimpleType[5687-5688]:SimpleType[5613-5614]"
  }, {
    "left" : "_deserialize",
    "right" : "_deserialize",
    "info" : "SimpleName[5689-5701]:SimpleName[5615-5627]"
  }, {
    "left" : "String value",
    "right" : "String value",
    "info" : "SingleVariableDeclaration[5702-5714]:SingleVariableDeclaration[5628-5640]"
  }, {
    "left" : "DeserializationContext ctxt",
    "right" : "DeserializationContext ctxt",
    "info" : "SingleVariableDeclaration[5716-5743]:SingleVariableDeclaration[5642-5669]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[5752-5763]:SimpleType[5678-5689]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[5770-5779]:Modifier[5696-5705]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "SimpleType[5780-5781]:SimpleType[5706-5707]"
  }, {
    "left" : "_deserializeEmbedded",
    "right" : "_deserializeEmbedded",
    "info" : "SimpleName[5782-5802]:SimpleName[5708-5728]"
  }, {
    "left" : "Object ob",
    "right" : "Object ob",
    "info" : "SingleVariableDeclaration[5803-5812]:SingleVariableDeclaration[5729-5738]"
  }, {
    "left" : "DeserializationContext ctxt",
    "right" : "DeserializationContext ctxt",
    "info" : "SingleVariableDeclaration[5814-5841]:SingleVariableDeclaration[5740-5767]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[5850-5861]:SimpleType[5776-5787]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5862-6090]:Block[5788-6016]"
  }, {
    "left" : "ctxt.reportMappingException(\"Don't know how to convert embedded Object of type %s into %s\",\n                ob.getClass().getName(), _valueClass.getName());",
    "right" : "ctxt.reportMappingException(\"Don't know how to convert embedded Object of type %s into %s\",\n                ob.getClass().getName(), _valueClass.getName());",
    "info" : "ExpressionStatement[5907-6063]:ExpressionStatement[5833-5989]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[6072-6084]:ReturnStatement[5998-6010]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[6096-6105]:Modifier[6022-6031]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "SimpleType[6106-6107]:SimpleType[6032-6033]"
  }, {
    "left" : "_deserializeFromEmptyString",
    "right" : "_deserializeFromEmptyString",
    "info" : "SimpleName[6108-6135]:SimpleName[6034-6061]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[6145-6156]:SimpleType[6071-6082]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6157-6185]:Block[6083-6111]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[6167-6179]:ReturnStatement[6093-6105]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6527-6533]:Modifier[6453-6459]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[6534-6540]:Modifier[6460-6466]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[6541-6546]:TYPE_DECLARATION_KIND[6467-6472]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[7362-7371]:Modifier[7288-7297]"
  }, {
    "left" : "Std",
    "right" : "Std",
    "info" : "SimpleName[7372-7375]:SimpleName[7298-7301]"
  }, {
    "left" : "Class<?> valueType",
    "right" : "Class<?> valueType",
    "info" : "SingleVariableDeclaration[7376-7394]:SingleVariableDeclaration[7302-7320]"
  }, {
    "left" : "int kind",
    "right" : "int kind",
    "info" : "SingleVariableDeclaration[7396-7404]:SingleVariableDeclaration[7322-7330]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7406-7473]:Block[7332-7399]"
  }, {
    "left" : "super(valueType);",
    "right" : "super(valueType);",
    "info" : "SuperConstructorInvocation[7420-7437]:SuperConstructorInvocation[7346-7363]"
  }, {
    "left" : "_kind = kind;",
    "right" : "_kind = kind;",
    "info" : "ExpressionStatement[7450-7463]:ExpressionStatement[7376-7389]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[7483-7492]:MarkerAnnotation[7409-7418]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[7501-7510]:Modifier[7427-7436]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[7511-7517]:SimpleType[7437-7443]"
  }, {
    "left" : "_deserialize",
    "right" : "_deserialize",
    "info" : "SimpleName[7518-7530]:SimpleName[7444-7456]"
  }, {
    "left" : "String value",
    "right" : "String value",
    "info" : "SingleVariableDeclaration[7531-7543]:SingleVariableDeclaration[7457-7469]"
  }, {
    "left" : "DeserializationContext ctxt",
    "right" : "DeserializationContext ctxt",
    "info" : "SingleVariableDeclaration[7545-7572]:SingleVariableDeclaration[7471-7498]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[7581-7592]:SimpleType[7507-7518]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7601-10766]:Block[7527-10692]"
  }, {
    "left" : "switch (_kind) {\n            case STD_FILE:\n                return new File(value);\n            case STD_URL:\n                return new URL(value);\n            case STD_URI:\n                return URI.create(value);\n            case STD_CLASS:\n                try {\n                    return ctxt.findClass(value);\n                } catch (Exception e) {\n                    return ctxt.handleInstantiationProblem(_valueClass, value,\n                            ClassUtil.getRootCause(e));\n                }\n            case STD_JAVA_TYPE:\n                return ctxt.getTypeFactory().constructFromCanonical(value);\n            case STD_CURRENCY:\n                // will throw IAE if unknown:\n                return Currency.getInstance(value);\n            case STD_PATTERN:\n                // will throw IAE (or its subclass) if malformed\n                return Pattern.compile(value);\n            case STD_LOCALE:\n                {\n                    int ix = _firstHyphenOrUnderscore(value);\n                    if (ix < 0) { // single argument\n                        return new Locale(value);\n                    }\n                    String first = value.substring(0, ix);\n                    value = value.substring(ix+1);\n                    ix = _firstHyphenOrUnderscore(value);\n                    if (ix < 0) { // two pieces\n                        return new Locale(first, value);\n                    }\n                    String second = value.substring(0, ix);\n                    return new Locale(first, second, value.substring(ix+1));\n                }\n            case STD_CHARSET:\n                return Charset.forName(value);\n            case STD_TIME_ZONE:\n                return TimeZone.getTimeZone(value);\n            case STD_INET_ADDRESS:\n                return InetAddress.getByName(value);\n            case STD_INET_SOCKET_ADDRESS:\n                if (value.startsWith(\"[\")) {\n                    // bracketed IPv6 (with port number)\n\n                    int i = value.lastIndexOf(']');\n                    if (i == -1) {\n                        throw new InvalidFormatException(ctxt.getParser(),\n                                \"Bracketed IPv6 address must contain closing bracket\",\n                                value, InetSocketAddress.class);\n                    }\n\n                    int j = value.indexOf(':', i);\n                    int port = j > -1 ? Integer.parseInt(value.substring(j + 1)) : 0;\n                    return new InetSocketAddress(value.substring(0, i + 1), port);\n                }\n                int ix = value.indexOf(':');\n                if (ix >= 0 && value.indexOf(':', ix + 1) < 0) {\n                    // host:port\n                    int port = Integer.parseInt(value.substring(ix+1));\n                    return new InetSocketAddress(value.substring(0, ix), port);\n                }\n                // host or unbracketed IPv6, without port number\n                return new InetSocketAddress(value, 0);\n            case STD_STRING_BUILDER:\n                return new StringBuilder(value);\n            }",
    "right" : "switch (_kind) {\n            case STD_FILE:\n                return new File(value);\n            case STD_URL:\n                return new URL(value);\n            case STD_URI:\n                return URI.create(value);\n            case STD_CLASS:\n                try {\n                    return ctxt.findClass(value);\n                } catch (Exception e) {\n                    return ctxt.handleInstantiationProblem(_valueClass, value,\n                            ClassUtil.getRootCause(e));\n                }\n            case STD_JAVA_TYPE:\n                return ctxt.getTypeFactory().constructFromCanonical(value);\n            case STD_CURRENCY:\n                // will throw IAE if unknown:\n                return Currency.getInstance(value);\n            case STD_PATTERN:\n                // will throw IAE (or its subclass) if malformed\n                return Pattern.compile(value);\n            case STD_LOCALE:\n                {\n                    int ix = _firstHyphenOrUnderscore(value);\n                    if (ix < 0) { // single argument\n                        return new Locale(value);\n                    }\n                    String first = value.substring(0, ix);\n                    value = value.substring(ix+1);\n                    ix = _firstHyphenOrUnderscore(value);\n                    if (ix < 0) { // two pieces\n                        return new Locale(first, value);\n                    }\n                    String second = value.substring(0, ix);\n                    return new Locale(first, second, value.substring(ix+1));\n                }\n            case STD_CHARSET:\n                return Charset.forName(value);\n            case STD_TIME_ZONE:\n                return TimeZone.getTimeZone(value);\n            case STD_INET_ADDRESS:\n                return InetAddress.getByName(value);\n            case STD_INET_SOCKET_ADDRESS:\n                if (value.startsWith(\"[\")) {\n                    // bracketed IPv6 (with port number)\n\n                    int i = value.lastIndexOf(']');\n                    if (i == -1) {\n                        throw new InvalidFormatException(ctxt.getParser(),\n                                \"Bracketed IPv6 address must contain closing bracket\",\n                                value, InetSocketAddress.class);\n                    }\n\n                    int j = value.indexOf(':', i);\n                    int port = j > -1 ? Integer.parseInt(value.substring(j + 1)) : 0;\n                    return new InetSocketAddress(value.substring(0, i + 1), port);\n                }\n                int ix = value.indexOf(':');\n                if (ix >= 0 && value.indexOf(':', ix + 1) < 0) {\n                    // host:port\n                    int port = Integer.parseInt(value.substring(ix+1));\n                    return new InetSocketAddress(value.substring(0, ix), port);\n                }\n                // host or unbracketed IPv6, without port number\n                return new InetSocketAddress(value, 0);\n            case STD_STRING_BUILDER:\n                return new StringBuilder(value);\n            }",
    "info" : "SwitchStatement[7615-10690]:SwitchStatement[7541-10616]"
  }, {
    "left" : "case STD_FILE:",
    "right" : "case STD_FILE:",
    "info" : "SwitchCase[7644-7658]:SwitchCase[7570-7584]"
  }, {
    "left" : "return new File(value);",
    "right" : "return new File(value);",
    "info" : "ReturnStatement[7675-7698]:ReturnStatement[7601-7624]"
  }, {
    "left" : "case STD_URL:",
    "right" : "case STD_URL:",
    "info" : "SwitchCase[7711-7724]:SwitchCase[7637-7650]"
  }, {
    "left" : "return new URL(value);",
    "right" : "return new URL(value);",
    "info" : "ReturnStatement[7741-7763]:ReturnStatement[7667-7689]"
  }, {
    "left" : "case STD_URI:",
    "right" : "case STD_URI:",
    "info" : "SwitchCase[7776-7789]:SwitchCase[7702-7715]"
  }, {
    "left" : "return URI.create(value);",
    "right" : "return URI.create(value);",
    "info" : "ReturnStatement[7806-7831]:ReturnStatement[7732-7757]"
  }, {
    "left" : "case STD_CLASS:",
    "right" : "case STD_CLASS:",
    "info" : "SwitchCase[7844-7859]:SwitchCase[7770-7785]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[7876-8124]:TryStatement[7802-8050]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7880-7949]:Block[7806-7875]"
  }, {
    "left" : "return ctxt.findClass(value);",
    "right" : "return ctxt.findClass(value);",
    "info" : "ReturnStatement[7902-7931]:ReturnStatement[7828-7857]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7970-8124]:Block[7896-8050]"
  }, {
    "left" : "return ctxt.handleInstantiationProblem(_valueClass, value,\n                            ClassUtil.getRootCause(e));",
    "right" : "return ctxt.handleInstantiationProblem(_valueClass, value,\n                            ClassUtil.getRootCause(e));",
    "info" : "ReturnStatement[7992-8106]:ReturnStatement[7918-8032]"
  }, {
    "left" : "case STD_JAVA_TYPE:",
    "right" : "case STD_JAVA_TYPE:",
    "info" : "SwitchCase[8137-8156]:SwitchCase[8063-8082]"
  }, {
    "left" : "return ctxt.getTypeFactory().constructFromCanonical(value);",
    "right" : "return ctxt.getTypeFactory().constructFromCanonical(value);",
    "info" : "ReturnStatement[8173-8232]:ReturnStatement[8099-8158]"
  }, {
    "left" : "case STD_CURRENCY:",
    "right" : "case STD_CURRENCY:",
    "info" : "SwitchCase[8245-8263]:SwitchCase[8171-8189]"
  }, {
    "left" : "return Currency.getInstance(value);",
    "right" : "return Currency.getInstance(value);",
    "info" : "ReturnStatement[8326-8361]:ReturnStatement[8252-8287]"
  }, {
    "left" : "case STD_PATTERN:",
    "right" : "case STD_PATTERN:",
    "info" : "SwitchCase[8374-8391]:SwitchCase[8300-8317]"
  }, {
    "left" : "return Pattern.compile(value);",
    "right" : "return Pattern.compile(value);",
    "info" : "ReturnStatement[8473-8503]:ReturnStatement[8399-8429]"
  }, {
    "left" : "case STD_LOCALE:",
    "right" : "case STD_LOCALE:",
    "info" : "SwitchCase[8516-8532]:SwitchCase[8442-8458]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8549-9187]:Block[8475-9113]"
  }, {
    "left" : "int ix = _firstHyphenOrUnderscore(value);",
    "right" : "int ix = _firstHyphenOrUnderscore(value);",
    "info" : "VariableDeclarationStatement[8571-8612]:VariableDeclarationStatement[8497-8538]"
  }, {
    "left" : "if (ix < 0)",
    "right" : "if (ix < 0)",
    "info" : "IfStatement[8633-8737]:IfStatement[8559-8663]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8645-8737]:Block[8571-8663]"
  }, {
    "left" : "return new Locale(value);",
    "right" : "return new Locale(value);",
    "info" : "ReturnStatement[8690-8715]:ReturnStatement[8616-8641]"
  }, {
    "left" : "String first = value.substring(0, ix);",
    "right" : "String first = value.substring(0, ix);",
    "info" : "VariableDeclarationStatement[8758-8796]:VariableDeclarationStatement[8684-8722]"
  }, {
    "left" : "value = value.substring(ix+1);",
    "right" : "value = value.substring(ix+1);",
    "info" : "ExpressionStatement[8817-8847]:ExpressionStatement[8743-8773]"
  }, {
    "left" : "ix = _firstHyphenOrUnderscore(value);",
    "right" : "ix = _firstHyphenOrUnderscore(value);",
    "info" : "ExpressionStatement[8868-8905]:ExpressionStatement[8794-8831]"
  }, {
    "left" : "if (ix < 0)",
    "right" : "if (ix < 0)",
    "info" : "IfStatement[8926-9032]:IfStatement[8852-8958]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8938-9032]:Block[8864-8958]"
  }, {
    "left" : "return new Locale(first, value);",
    "right" : "return new Locale(first, value);",
    "info" : "ReturnStatement[8978-9010]:ReturnStatement[8904-8936]"
  }, {
    "left" : "String second = value.substring(0, ix);",
    "right" : "String second = value.substring(0, ix);",
    "info" : "VariableDeclarationStatement[9053-9092]:VariableDeclarationStatement[8979-9018]"
  }, {
    "left" : "return new Locale(first, second, value.substring(ix+1));",
    "right" : "return new Locale(first, second, value.substring(ix+1));",
    "info" : "ReturnStatement[9113-9169]:ReturnStatement[9039-9095]"
  }, {
    "left" : "case STD_CHARSET:",
    "right" : "case STD_CHARSET:",
    "info" : "SwitchCase[9200-9217]:SwitchCase[9126-9143]"
  }, {
    "left" : "return Charset.forName(value);",
    "right" : "return Charset.forName(value);",
    "info" : "ReturnStatement[9234-9264]:ReturnStatement[9160-9190]"
  }, {
    "left" : "case STD_TIME_ZONE:",
    "right" : "case STD_TIME_ZONE:",
    "info" : "SwitchCase[9277-9296]:SwitchCase[9203-9222]"
  }, {
    "left" : "return TimeZone.getTimeZone(value);",
    "right" : "return TimeZone.getTimeZone(value);",
    "info" : "ReturnStatement[9313-9348]:ReturnStatement[9239-9274]"
  }, {
    "left" : "case STD_INET_ADDRESS:",
    "right" : "case STD_INET_ADDRESS:",
    "info" : "SwitchCase[9361-9383]:SwitchCase[9287-9309]"
  }, {
    "left" : "return InetAddress.getByName(value);",
    "right" : "return InetAddress.getByName(value);",
    "info" : "ReturnStatement[9400-9436]:ReturnStatement[9326-9362]"
  }, {
    "left" : "case STD_INET_SOCKET_ADDRESS:",
    "right" : "case STD_INET_SOCKET_ADDRESS:",
    "info" : "SwitchCase[9449-9478]:SwitchCase[9375-9404]"
  }, {
    "left" : "if (value.startsWith(\"[\"))",
    "right" : "if (value.startsWith(\"[\"))",
    "info" : "IfStatement[9495-10156]:IfStatement[9421-10082]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9522-10156]:Block[9448-10082]"
  }, {
    "left" : "int i = value.lastIndexOf(']');",
    "right" : "int i = value.lastIndexOf(']');",
    "info" : "VariableDeclarationStatement[9602-9633]:VariableDeclarationStatement[9528-9559]"
  }, {
    "left" : "if (i == -1)",
    "right" : "if (i == -1)",
    "info" : "IfStatement[9654-9917]:IfStatement[9580-9843]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9667-9917]:Block[9593-9843]"
  }, {
    "left" : "throw new InvalidFormatException(ctxt.getParser(),\n                                \"Bracketed IPv6 address must contain closing bracket\",\n                                value, InetSocketAddress.class);",
    "right" : "throw new InvalidFormatException(ctxt.getParser(),\n                                \"Bracketed IPv6 address must contain closing bracket\",\n                                value, InetSocketAddress.class);",
    "info" : "ThrowStatement[9693-9895]:ThrowStatement[9619-9821]"
  }, {
    "left" : "int j = value.indexOf(':', i);",
    "right" : "int j = value.indexOf(':', i);",
    "info" : "VariableDeclarationStatement[9939-9969]:VariableDeclarationStatement[9865-9895]"
  }, {
    "left" : "int port = j > -1 ? Integer.parseInt(value.substring(j + 1)) : 0;",
    "right" : "int port = j > -1 ? Integer.parseInt(value.substring(j + 1)) : 0;",
    "info" : "VariableDeclarationStatement[9990-10055]:VariableDeclarationStatement[9916-9981]"
  }, {
    "left" : "return new InetSocketAddress(value.substring(0, i + 1), port);",
    "right" : "return new InetSocketAddress(value.substring(0, i + 1), port);",
    "info" : "ReturnStatement[10076-10138]:ReturnStatement[10002-10064]"
  }, {
    "left" : "int ix = value.indexOf(':');",
    "right" : "int ix = value.indexOf(':');",
    "info" : "VariableDeclarationStatement[10173-10201]:VariableDeclarationStatement[10099-10127]"
  }, {
    "left" : "if (ix >= 0 && value.indexOf(':', ix + 1) < 0)",
    "right" : "if (ix >= 0 && value.indexOf(':', ix + 1) < 0)",
    "info" : "IfStatement[10218-10469]:IfStatement[10144-10395]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10265-10469]:Block[10191-10395]"
  }, {
    "left" : "int port = Integer.parseInt(value.substring(ix+1));",
    "right" : "int port = Integer.parseInt(value.substring(ix+1));",
    "info" : "VariableDeclarationStatement[10320-10371]:VariableDeclarationStatement[10246-10297]"
  }, {
    "left" : "return new InetSocketAddress(value.substring(0, ix), port);",
    "right" : "return new InetSocketAddress(value.substring(0, ix), port);",
    "info" : "ReturnStatement[10392-10451]:ReturnStatement[10318-10377]"
  }, {
    "left" : "return new InetSocketAddress(value, 0);",
    "right" : "return new InetSocketAddress(value, 0);",
    "info" : "ReturnStatement[10551-10590]:ReturnStatement[10477-10516]"
  }, {
    "left" : "case STD_STRING_BUILDER:",
    "right" : "case STD_STRING_BUILDER:",
    "info" : "SwitchCase[10603-10627]:SwitchCase[10529-10553]"
  }, {
    "left" : "return new StringBuilder(value);",
    "right" : "return new StringBuilder(value);",
    "info" : "ReturnStatement[10644-10676]:ReturnStatement[10570-10602]"
  }, {
    "left" : "VersionUtil.throwInternal();",
    "right" : "VersionUtil.throwInternal();",
    "info" : "ExpressionStatement[10703-10731]:ExpressionStatement[10629-10657]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[10744-10756]:ReturnStatement[10670-10682]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10776-10785]:MarkerAnnotation[10702-10711]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[10794-10803]:Modifier[10720-10729]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[10804-10810]:SimpleType[10730-10736]"
  }, {
    "left" : "_deserializeFromEmptyString",
    "right" : "_deserializeFromEmptyString",
    "info" : "SimpleName[10811-10838]:SimpleName[10737-10764]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[10848-10859]:SimpleType[10774-10785]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10860-11328]:Block[10786-11254]"
  }, {
    "left" : "if (_kind == STD_URI)",
    "right" : "if (_kind == STD_URI)",
    "info" : "IfStatement[10942-11018]:IfStatement[10868-10944]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10964-11018]:Block[10890-10944]"
  }, {
    "left" : "return URI.create(\"\");",
    "right" : "return URI.create(\"\");",
    "info" : "ReturnStatement[10982-11004]:ReturnStatement[10908-10930]"
  }, {
    "left" : "if (_kind == STD_LOCALE)",
    "right" : "if (_kind == STD_LOCALE)",
    "info" : "IfStatement[11081-11157]:IfStatement[11007-11083]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11106-11157]:Block[11032-11083]"
  }, {
    "left" : "return Locale.ROOT;",
    "right" : "return Locale.ROOT;",
    "info" : "ReturnStatement[11124-11143]:ReturnStatement[11050-11069]"
  }, {
    "left" : "if (_kind == STD_STRING_BUILDER)",
    "right" : "if (_kind == STD_STRING_BUILDER)",
    "info" : "IfStatement[11170-11262]:IfStatement[11096-11188]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11203-11262]:Block[11129-11188]"
  }, {
    "left" : "return new StringBuilder();",
    "right" : "return new StringBuilder();",
    "info" : "ReturnStatement[11221-11248]:ReturnStatement[11147-11174]"
  }, {
    "left" : "return super._deserializeFromEmptyString();",
    "right" : "return super._deserializeFromEmptyString();",
    "info" : "ReturnStatement[11275-11318]:ReturnStatement[11201-11244]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[11338-11347]:Modifier[11264-11273]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[11348-11351]:PrimitiveType[11274-11277]"
  }, {
    "left" : "_firstHyphenOrUnderscore",
    "right" : "_firstHyphenOrUnderscore",
    "info" : "SimpleName[11352-11376]:SimpleName[11278-11302]"
  }, {
    "left" : "String str",
    "right" : "String str",
    "info" : "SingleVariableDeclaration[11377-11387]:SingleVariableDeclaration[11303-11313]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11397-11641]:Block[11323-11567]"
  }, {
    "left" : "for (int i = 0, end = str.length(); i < end; ++i)",
    "right" : "for (int i = 0, end = str.length(); i < end; ++i)",
    "info" : "ForStatement[11411-11608]:ForStatement[11337-11534]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11461-11608]:Block[11387-11534]"
  }, {
    "left" : "char c = str.charAt(i);",
    "right" : "char c = str.charAt(i);",
    "info" : "VariableDeclarationStatement[11479-11502]:VariableDeclarationStatement[11405-11428]"
  }, {
    "left" : "if (c == '_' || c == '-')",
    "right" : "if (c == '_' || c == '-')",
    "info" : "IfStatement[11519-11594]:IfStatement[11445-11520]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11545-11594]:Block[11471-11520]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[11567-11576]:ReturnStatement[11493-11502]"
  }, {
    "left" : "return -1;",
    "right" : "return -1;",
    "info" : "ReturnStatement[11621-11631]:ReturnStatement[11547-11557]"
  } ]
}