{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "TypeDeclaration[1251-23372]:TypeDeclaration[1251-23414]"
    }, {
      "left" : "public static final Fraction TWO = new Fraction(2, 1);",
      "right" : "public static final Fraction TWO = new Fraction(2, 1);",
      "info" : "FieldDeclaration[1495-1593]:FieldDeclaration[1495-1593]"
    }, {
      "left" : "public static final Fraction ONE = new Fraction(1, 1);",
      "right" : "public static final Fraction ONE = new Fraction(1, 1);",
      "info" : "FieldDeclaration[1599-1693]:FieldDeclaration[1599-1693]"
    }, {
      "left" : "public static final Fraction ZERO = new Fraction(0, 1);",
      "right" : "public static final Fraction ZERO = new Fraction(0, 1);",
      "info" : "FieldDeclaration[1699-1794]:FieldDeclaration[1699-1794]"
    }, {
      "left" : "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);",
      "right" : "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);",
      "info" : "FieldDeclaration[1800-1904]:FieldDeclaration[1800-1904]"
    }, {
      "left" : "public static final Fraction ONE_FIFTH = new Fraction(1, 5);",
      "right" : "public static final Fraction ONE_FIFTH = new Fraction(1, 5);",
      "info" : "FieldDeclaration[1910-2012]:FieldDeclaration[1910-2012]"
    }, {
      "left" : "public static final Fraction ONE_HALF = new Fraction(1, 2);",
      "right" : "public static final Fraction ONE_HALF = new Fraction(1, 2);",
      "info" : "FieldDeclaration[2018-2119]:FieldDeclaration[2018-2119]"
    }, {
      "left" : "public static final Fraction ONE_QUARTER = new Fraction(1, 4);",
      "right" : "public static final Fraction ONE_QUARTER = new Fraction(1, 4);",
      "info" : "FieldDeclaration[2125-2229]:FieldDeclaration[2125-2229]"
    }, {
      "left" : "public static final Fraction ONE_THIRD = new Fraction(1, 3);",
      "right" : "public static final Fraction ONE_THIRD = new Fraction(1, 3);",
      "info" : "FieldDeclaration[2235-2337]:FieldDeclaration[2235-2337]"
    }, {
      "left" : "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);",
      "right" : "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);",
      "info" : "FieldDeclaration[2343-2448]:FieldDeclaration[2343-2448]"
    }, {
      "left" : "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);",
      "right" : "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);",
      "info" : "FieldDeclaration[2454-2561]:FieldDeclaration[2454-2561]"
    }, {
      "left" : "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);",
      "right" : "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);",
      "info" : "FieldDeclaration[2567-2670]:FieldDeclaration[2567-2670]"
    }, {
      "left" : "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);",
      "right" : "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);",
      "info" : "FieldDeclaration[2676-2781]:FieldDeclaration[2676-2781]"
    }, {
      "left" : "public static final Fraction TWO_THIRDS = new Fraction(2, 3);",
      "right" : "public static final Fraction TWO_THIRDS = new Fraction(2, 3);",
      "info" : "FieldDeclaration[2787-2890]:FieldDeclaration[2787-2890]"
    }, {
      "left" : "public static final Fraction MINUS_ONE = new Fraction(-1, 1);",
      "right" : "public static final Fraction MINUS_ONE = new Fraction(-1, 1);",
      "info" : "FieldDeclaration[2896-3002]:FieldDeclaration[2896-3002]"
    }, {
      "left" : "private static final long serialVersionUID = 3698073679419233275L;",
      "right" : "private static final long serialVersionUID = 3698073679419233275L;",
      "info" : "FieldDeclaration[3008-3117]:FieldDeclaration[3008-3117]"
    }, {
      "left" : "private final int denominator;",
      "right" : "private final int denominator;",
      "info" : "FieldDeclaration[3123-3181]:FieldDeclaration[3123-3181]"
    }, {
      "left" : "private final int numerator;",
      "right" : "private final int numerator;",
      "info" : "FieldDeclaration[3187-3241]:FieldDeclaration[3187-3241]"
    }, {
      "left" : "public Fraction(double value) throws FractionConversionException",
      "right" : "public Fraction(double value) throws FractionConversionException",
      "info" : "MethodDeclaration[3247-3585]:MethodDeclaration[3247-3585]"
    }, {
      "left" : "public Fraction(double value, double epsilon, int maxIterations)\n        throws FractionConversionException",
      "right" : "public Fraction(double value, double epsilon, int maxIterations)\n        throws FractionConversionException",
      "info" : "MethodDeclaration[3591-4441]:MethodDeclaration[3591-4441]"
    }, {
      "left" : "public Fraction(double value, int maxDenominator)\n        throws FractionConversionException",
      "right" : "public Fraction(double value, int maxDenominator)\n        throws FractionConversionException",
      "info" : "MethodDeclaration[4447-5126]:MethodDeclaration[4447-5126]"
    }, {
      "left" : "private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n        throws FractionConversionException",
      "right" : "private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n        throws FractionConversionException",
      "info" : "MethodDeclaration[5132-8397]:MethodDeclaration[5132-8439]"
    }, {
      "left" : "public Fraction(int num)",
      "right" : "public Fraction(int num)",
      "info" : "MethodDeclaration[8403-8576]:MethodDeclaration[8445-8618]"
    }, {
      "left" : "public Fraction(int num, int den)",
      "right" : "public Fraction(int num, int den)",
      "info" : "MethodDeclaration[8582-9794]:MethodDeclaration[8624-9836]"
    }, {
      "left" : "public Fraction abs()",
      "right" : "public Fraction abs()",
      "info" : "MethodDeclaration[9800-10083]:MethodDeclaration[9842-10125]"
    }, {
      "left" : "public int compareTo(Fraction object)",
      "right" : "public int compareTo(Fraction object)",
      "info" : "MethodDeclaration[10089-10564]:MethodDeclaration[10131-10606]"
    }, {
      "left" : "public double doubleValue()",
      "right" : "public double doubleValue()",
      "info" : "MethodDeclaration[10570-10864]:MethodDeclaration[10612-10906]"
    }, {
      "left" : "public boolean equals(Object other)",
      "right" : "public boolean equals(Object other)",
      "info" : "MethodDeclaration[10870-11809]:MethodDeclaration[10912-11851]"
    }, {
      "left" : "public float floatValue()",
      "right" : "public float floatValue()",
      "info" : "MethodDeclaration[11815-12086]:MethodDeclaration[11857-12128]"
    }, {
      "left" : "public int getDenominator()",
      "right" : "public int getDenominator()",
      "info" : "MethodDeclaration[12092-12234]:MethodDeclaration[12134-12276]"
    }, {
      "left" : "public int getNumerator()",
      "right" : "public int getNumerator()",
      "info" : "MethodDeclaration[12240-12374]:MethodDeclaration[12282-12416]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[12380-12586]:MethodDeclaration[12422-12628]"
    }, {
      "left" : "public int intValue()",
      "right" : "public int intValue()",
      "info" : "MethodDeclaration[12592-12836]:MethodDeclaration[12634-12878]"
    }, {
      "left" : "public long longValue()",
      "right" : "public long longValue()",
      "info" : "MethodDeclaration[12842-13089]:MethodDeclaration[12884-13131]"
    }, {
      "left" : "public Fraction negate()",
      "right" : "public Fraction negate()",
      "info" : "MethodDeclaration[13095-13460]:MethodDeclaration[13137-13502]"
    }, {
      "left" : "public Fraction reciprocal()",
      "right" : "public Fraction reciprocal()",
      "info" : "MethodDeclaration[13466-13669]:MethodDeclaration[13508-13711]"
    }, {
      "left" : "public Fraction add(Fraction fraction)",
      "right" : "public Fraction add(Fraction fraction)",
      "info" : "MethodDeclaration[13675-14263]:MethodDeclaration[13717-14305]"
    }, {
      "left" : "public Fraction add(final int i)",
      "right" : "public Fraction add(final int i)",
      "info" : "MethodDeclaration[14269-14504]:MethodDeclaration[14311-14546]"
    }, {
      "left" : "public Fraction subtract(Fraction fraction)",
      "right" : "public Fraction subtract(Fraction fraction)",
      "info" : "MethodDeclaration[14510-15110]:MethodDeclaration[14552-15152]"
    }, {
      "left" : "public Fraction subtract(final int i)",
      "right" : "public Fraction subtract(final int i)",
      "info" : "MethodDeclaration[15116-15368]:MethodDeclaration[15158-15410]"
    }, {
      "left" : "private Fraction addSub(Fraction fraction, boolean isAdd)",
      "right" : "private Fraction addSub(Fraction fraction, boolean isAdd)",
      "info" : "MethodDeclaration[15374-18066]:MethodDeclaration[15416-18108]"
    }, {
      "left" : "public Fraction multiply(Fraction fraction)",
      "right" : "public Fraction multiply(Fraction fraction)",
      "info" : "MethodDeclaration[18072-19235]:MethodDeclaration[18114-19277]"
    }, {
      "left" : "public Fraction multiply(final int i)",
      "right" : "public Fraction multiply(final int i)",
      "info" : "MethodDeclaration[19241-19480]:MethodDeclaration[19283-19522]"
    }, {
      "left" : "public Fraction divide(Fraction fraction)",
      "right" : "public Fraction divide(Fraction fraction)",
      "info" : "MethodDeclaration[19486-20425]:MethodDeclaration[19528-20467]"
    }, {
      "left" : "public Fraction divide(final int i)",
      "right" : "public Fraction divide(final int i)",
      "info" : "MethodDeclaration[20431-20664]:MethodDeclaration[20473-20706]"
    }, {
      "left" : "public double percentageValue()",
      "right" : "public double percentageValue()",
      "info" : "MethodDeclaration[20670-21005]:MethodDeclaration[20712-21047]"
    }, {
      "left" : "public static Fraction getReducedFraction(int numerator, int denominator)",
      "right" : "public static Fraction getReducedFraction(int numerator, int denominator)",
      "info" : "MethodDeclaration[21011-22672]:MethodDeclaration[21053-22714]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[22678-23255]:MethodDeclaration[22720-23297]"
    }, {
      "left" : "public FractionField getField()",
      "right" : "public FractionField getField()",
      "info" : "MethodDeclaration[23261-23369]:MethodDeclaration[23303-23411]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1373-1379]:Modifier[1373-1379]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1380-1385]:TYPE_DECLARATION_KIND[1380-1385]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleName[1386-1394]:SimpleName[1386-1394]"
    }, {
      "left" : "Number",
      "right" : "Number",
      "info" : "SimpleType[1407-1413]:SimpleType[1407-1413]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3479-3485]:Modifier[3479-3485]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleName[3486-3494]:SimpleName[3486-3494]"
    }, {
      "left" : "double value",
      "right" : "double value",
      "info" : "SingleVariableDeclaration[3495-3507]:SingleVariableDeclaration[3495-3507]"
    }, {
      "left" : "FractionConversionException",
      "right" : "FractionConversionException",
      "info" : "SimpleType[3516-3543]:SimpleType[3516-3543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3544-3585]:Block[3544-3585]"
    }, {
      "left" : "this(value, 1.0e-5, 100);",
      "right" : "this(value, 1.0e-5, 100);",
      "info" : "ConstructorInvocation[3554-3579]:ConstructorInvocation[3554-3579]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4258-4264]:Modifier[4258-4264]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleName[4265-4273]:SimpleName[4265-4273]"
    }, {
      "left" : "double value",
      "right" : "double value",
      "info" : "SingleVariableDeclaration[4274-4286]:SingleVariableDeclaration[4274-4286]"
    }, {
      "left" : "double epsilon",
      "right" : "double epsilon",
      "info" : "SingleVariableDeclaration[4288-4302]:SingleVariableDeclaration[4288-4302]"
    }, {
      "left" : "int maxIterations",
      "right" : "int maxIterations",
      "info" : "SingleVariableDeclaration[4304-4321]:SingleVariableDeclaration[4304-4321]"
    }, {
      "left" : "FractionConversionException",
      "right" : "FractionConversionException",
      "info" : "SimpleType[4338-4365]:SimpleType[4338-4365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4370-4441]:Block[4370-4441]"
    }, {
      "left" : "this(value, epsilon, Integer.MAX_VALUE, maxIterations);",
      "right" : "this(value, epsilon, Integer.MAX_VALUE, maxIterations);",
      "info" : "ConstructorInvocation[4380-4435]:ConstructorInvocation[4380-4435]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4978-4984]:Modifier[4978-4984]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleName[4985-4993]:SimpleName[4985-4993]"
    }, {
      "left" : "double value",
      "right" : "double value",
      "info" : "SingleVariableDeclaration[4994-5006]:SingleVariableDeclaration[4994-5006]"
    }, {
      "left" : "int maxDenominator",
      "right" : "int maxDenominator",
      "info" : "SingleVariableDeclaration[5008-5026]:SingleVariableDeclaration[5008-5026]"
    }, {
      "left" : "FractionConversionException",
      "right" : "FractionConversionException",
      "info" : "SimpleType[5043-5070]:SimpleType[5043-5070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5075-5126]:Block[5075-5126]"
    }, {
      "left" : "this(value, 0, maxDenominator, 100);",
      "right" : "this(value, 0, maxDenominator, 100);",
      "info" : "ConstructorInvocation[5084-5120]:ConstructorInvocation[5084-5120]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6542-6549]:Modifier[6542-6549]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleName[6550-6558]:SimpleName[6550-6558]"
    }, {
      "left" : "double value",
      "right" : "double value",
      "info" : "SingleVariableDeclaration[6559-6571]:SingleVariableDeclaration[6559-6571]"
    }, {
      "left" : "double epsilon",
      "right" : "double epsilon",
      "info" : "SingleVariableDeclaration[6573-6587]:SingleVariableDeclaration[6573-6587]"
    }, {
      "left" : "int maxDenominator",
      "right" : "int maxDenominator",
      "info" : "SingleVariableDeclaration[6589-6607]:SingleVariableDeclaration[6589-6607]"
    }, {
      "left" : "int maxIterations",
      "right" : "int maxIterations",
      "info" : "SingleVariableDeclaration[6609-6626]:SingleVariableDeclaration[6609-6626]"
    }, {
      "left" : "FractionConversionException",
      "right" : "FractionConversionException",
      "info" : "SimpleType[6643-6670]:SimpleType[6643-6670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6675-8397]:Block[6675-8439]"
    }, {
      "left" : "long overflow = Integer.MAX_VALUE;",
      "right" : "long overflow = Integer.MAX_VALUE;",
      "info" : "VariableDeclarationStatement[6685-6719]:VariableDeclarationStatement[6685-6719]"
    }, {
      "left" : "double r0 = value;",
      "right" : "double r0 = value;",
      "info" : "VariableDeclarationStatement[6728-6746]:VariableDeclarationStatement[6728-6746]"
    }, {
      "left" : "long a0 = (long)FastMath.floor(r0);",
      "right" : "long a0 = (long)FastMath.floor(r0);",
      "info" : "VariableDeclarationStatement[6755-6790]:VariableDeclarationStatement[6755-6790]"
    }, {
      "left" : "if (a0 > overflow)",
      "right" : "if (FastMath.abs(a0) > overflow)",
      "info" : "IfStatement[6799-6895]:IfStatement[6799-6909]"
    }, {
      "left" : "a0",
      "right" : "a0",
      "info" : "SimpleName[6803-6805]:SimpleName[6816-6818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6818-6895]:Block[6832-6909]"
    }, {
      "left" : "throw new FractionConversionException(value, a0, 1l);",
      "right" : "throw new FractionConversionException(value, a0, 1l);",
      "info" : "ThrowStatement[6832-6885]:ThrowStatement[6846-6899]"
    }, {
      "left" : "if (FastMath.abs(a0 - value) < epsilon)",
      "right" : "if (FastMath.abs(a0 - value) < epsilon)",
      "info" : "IfStatement[7000-7144]:IfStatement[7014-7158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7040-7144]:Block[7054-7158]"
    }, {
      "left" : "this.numerator = (int) a0;",
      "right" : "this.numerator = (int) a0;",
      "info" : "ExpressionStatement[7054-7080]:ExpressionStatement[7068-7094]"
    }, {
      "left" : "this.denominator = 1;",
      "right" : "this.denominator = 1;",
      "info" : "ExpressionStatement[7093-7114]:ExpressionStatement[7107-7128]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7127-7134]:ReturnStatement[7141-7148]"
    }, {
      "left" : "long p0 = 1;",
      "right" : "long p0 = 1;",
      "info" : "VariableDeclarationStatement[7154-7166]:VariableDeclarationStatement[7168-7180]"
    }, {
      "left" : "long q0 = 0;",
      "right" : "long q0 = 0;",
      "info" : "VariableDeclarationStatement[7175-7187]:VariableDeclarationStatement[7189-7201]"
    }, {
      "left" : "long p1 = a0;",
      "right" : "long p1 = a0;",
      "info" : "VariableDeclarationStatement[7196-7209]:VariableDeclarationStatement[7210-7223]"
    }, {
      "left" : "long q1 = 1;",
      "right" : "long q1 = 1;",
      "info" : "VariableDeclarationStatement[7218-7230]:VariableDeclarationStatement[7232-7244]"
    }, {
      "left" : "long p2 = 0;",
      "right" : "long p2 = 0;",
      "info" : "VariableDeclarationStatement[7240-7252]:VariableDeclarationStatement[7254-7266]"
    }, {
      "left" : "long q2 = 1;",
      "right" : "long q2 = 1;",
      "info" : "VariableDeclarationStatement[7261-7273]:VariableDeclarationStatement[7275-7287]"
    }, {
      "left" : "int n = 0;",
      "right" : "int n = 0;",
      "info" : "VariableDeclarationStatement[7283-7293]:VariableDeclarationStatement[7297-7307]"
    }, {
      "left" : "boolean stop = false;",
      "right" : "boolean stop = false;",
      "info" : "VariableDeclarationStatement[7302-7323]:VariableDeclarationStatement[7316-7337]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[7332-8049]:DoStatement[7346-8091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7335-8034]:Block[7349-8076]"
    }, {
      "left" : "++n;",
      "right" : "++n;",
      "info" : "ExpressionStatement[7349-7353]:ExpressionStatement[7363-7367]"
    }, {
      "left" : "double r1 = 1.0 / (r0 - a0);",
      "right" : "double r1 = 1.0 / (r0 - a0);",
      "info" : "VariableDeclarationStatement[7366-7394]:VariableDeclarationStatement[7380-7408]"
    }, {
      "left" : "long a1 = (long)FastMath.floor(r1);",
      "right" : "long a1 = (long)FastMath.floor(r1);",
      "info" : "VariableDeclarationStatement[7407-7442]:VariableDeclarationStatement[7421-7456]"
    }, {
      "left" : "p2 = (a1 * p1) + p0;",
      "right" : "p2 = (a1 * p1) + p0;",
      "info" : "ExpressionStatement[7455-7475]:ExpressionStatement[7469-7489]"
    }, {
      "left" : "q2 = (a1 * q1) + q0;",
      "right" : "q2 = (a1 * q1) + q0;",
      "info" : "ExpressionStatement[7488-7508]:ExpressionStatement[7502-7522]"
    }, {
      "left" : "if ((p2 > overflow) || (q2 > overflow))",
      "right" : "if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow))",
      "info" : "IfStatement[7521-7646]:IfStatement[7535-7688]"
    }, {
      "left" : "p2",
      "right" : "p2",
      "info" : "SimpleName[7526-7528]:SimpleName[7553-7555]"
    }, {
      "left" : "q2",
      "right" : "q2",
      "info" : "SimpleName[7545-7547]:SimpleName[7586-7588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7561-7646]:Block[7603-7688]"
    }, {
      "left" : "throw new FractionConversionException(value, p2, q2);",
      "right" : "throw new FractionConversionException(value, p2, q2);",
      "info" : "ThrowStatement[7579-7632]:ThrowStatement[7621-7674]"
    }, {
      "left" : "double convergent = (double)p2 / (double)q2;",
      "right" : "double convergent = (double)p2 / (double)q2;",
      "info" : "VariableDeclarationStatement[7660-7704]:VariableDeclarationStatement[7702-7746]"
    }, {
      "left" : "if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator)",
      "right" : "if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator)",
      "info" : "IfStatement[7717-8024]:IfStatement[7759-8066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7809-7974]:Block[7851-8016]"
    }, {
      "left" : "p0 = p1;",
      "right" : "p0 = p1;",
      "info" : "ExpressionStatement[7827-7835]:ExpressionStatement[7869-7877]"
    }, {
      "left" : "p1 = p2;",
      "right" : "p1 = p2;",
      "info" : "ExpressionStatement[7852-7860]:ExpressionStatement[7894-7902]"
    }, {
      "left" : "q0 = q1;",
      "right" : "q0 = q1;",
      "info" : "ExpressionStatement[7877-7885]:ExpressionStatement[7919-7927]"
    }, {
      "left" : "q1 = q2;",
      "right" : "q1 = q2;",
      "info" : "ExpressionStatement[7902-7910]:ExpressionStatement[7944-7952]"
    }, {
      "left" : "a0 = a1;",
      "right" : "a0 = a1;",
      "info" : "ExpressionStatement[7927-7935]:ExpressionStatement[7969-7977]"
    }, {
      "left" : "r0 = r1;",
      "right" : "r0 = r1;",
      "info" : "ExpressionStatement[7952-7960]:ExpressionStatement[7994-8002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7980-8024]:Block[8022-8066]"
    }, {
      "left" : "stop = true;",
      "right" : "stop = true;",
      "info" : "ExpressionStatement[7998-8010]:ExpressionStatement[8040-8052]"
    }, {
      "left" : "if (n >= maxIterations)",
      "right" : "if (n >= maxIterations)",
      "info" : "IfStatement[8059-8167]:IfStatement[8101-8209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8083-8167]:Block[8125-8209]"
    }, {
      "left" : "throw new FractionConversionException(value, maxIterations);",
      "right" : "throw new FractionConversionException(value, maxIterations);",
      "info" : "ThrowStatement[8097-8157]:ThrowStatement[8139-8199]"
    }, {
      "left" : "if (q2 < maxDenominator)",
      "right" : "if (q2 < maxDenominator)",
      "info" : "IfStatement[8177-8390]:IfStatement[8219-8432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8202-8293]:Block[8244-8335]"
    }, {
      "left" : "this.numerator = (int) p2;",
      "right" : "this.numerator = (int) p2;",
      "info" : "ExpressionStatement[8216-8242]:ExpressionStatement[8258-8284]"
    }, {
      "left" : "this.denominator = (int) q2;",
      "right" : "this.denominator = (int) q2;",
      "info" : "ExpressionStatement[8255-8283]:ExpressionStatement[8297-8325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8299-8390]:Block[8341-8432]"
    }, {
      "left" : "this.numerator = (int) p1;",
      "right" : "this.numerator = (int) p1;",
      "info" : "ExpressionStatement[8313-8339]:ExpressionStatement[8355-8381]"
    }, {
      "left" : "this.denominator = (int) q1;",
      "right" : "this.denominator = (int) q1;",
      "info" : "ExpressionStatement[8352-8380]:ExpressionStatement[8394-8422]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8522-8528]:Modifier[8564-8570]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleName[8529-8537]:SimpleName[8571-8579]"
    }, {
      "left" : "int num",
      "right" : "int num",
      "info" : "SingleVariableDeclaration[8538-8545]:SingleVariableDeclaration[8580-8587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8547-8576]:Block[8589-8618]"
    }, {
      "left" : "this(num, 1);",
      "right" : "this(num, 1);",
      "info" : "ConstructorInvocation[8557-8570]:ConstructorInvocation[8599-8612]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8851-8857]:Modifier[8893-8899]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleName[8858-8866]:SimpleName[8900-8908]"
    }, {
      "left" : "int num",
      "right" : "int num",
      "info" : "SingleVariableDeclaration[8867-8874]:SingleVariableDeclaration[8909-8916]"
    }, {
      "left" : "int den",
      "right" : "int den",
      "info" : "SingleVariableDeclaration[8876-8883]:SingleVariableDeclaration[8918-8925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8885-9794]:Block[8927-9836]"
    }, {
      "left" : "if (den == 0)",
      "right" : "if (den == 0)",
      "info" : "IfStatement[8895-9070]:IfStatement[8937-9112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8909-9070]:Block[8951-9112]"
    }, {
      "left" : "throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION,\n                                              num, den);",
      "right" : "throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION,\n                                              num, den);",
      "info" : "ThrowStatement[8923-9060]:ThrowStatement[8965-9102]"
    }, {
      "left" : "if (den < 0)",
      "right" : "if (den < 0)",
      "info" : "IfStatement[9079-9403]:IfStatement[9121-9445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9092-9403]:Block[9134-9445]"
    }, {
      "left" : "if (num == Integer.MIN_VALUE ||\n                den == Integer.MIN_VALUE)",
      "right" : "if (num == Integer.MIN_VALUE ||\n                den == Integer.MIN_VALUE)",
      "info" : "IfStatement[9106-9345]:IfStatement[9148-9387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9180-9345]:Block[9222-9387]"
    }, {
      "left" : "throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,\n                                                  num, den);",
      "right" : "throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,\n                                                  num, den);",
      "info" : "ThrowStatement[9198-9331]:ThrowStatement[9240-9373]"
    }, {
      "left" : "num = -num;",
      "right" : "num = -num;",
      "info" : "ExpressionStatement[9358-9369]:ExpressionStatement[9400-9411]"
    }, {
      "left" : "den = -den;",
      "right" : "den = -den;",
      "info" : "ExpressionStatement[9382-9393]:ExpressionStatement[9424-9435]"
    }, {
      "left" : "final int d = ArithmeticUtils.gcd(num, den);",
      "right" : "final int d = ArithmeticUtils.gcd(num, den);",
      "info" : "VariableDeclarationStatement[9488-9532]:VariableDeclarationStatement[9530-9574]"
    }, {
      "left" : "if (d > 1)",
      "right" : "if (d > 1)",
      "info" : "IfStatement[9541-9607]:IfStatement[9583-9649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9552-9607]:Block[9594-9649]"
    }, {
      "left" : "num /= d;",
      "right" : "num /= d;",
      "info" : "ExpressionStatement[9566-9575]:ExpressionStatement[9608-9617]"
    }, {
      "left" : "den /= d;",
      "right" : "den /= d;",
      "info" : "ExpressionStatement[9588-9597]:ExpressionStatement[9630-9639]"
    }, {
      "left" : "if (den < 0)",
      "right" : "if (den < 0)",
      "info" : "IfStatement[9652-9724]:IfStatement[9694-9766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9665-9724]:Block[9707-9766]"
    }, {
      "left" : "num = -num;",
      "right" : "num = -num;",
      "info" : "ExpressionStatement[9679-9690]:ExpressionStatement[9721-9732]"
    }, {
      "left" : "den = -den;",
      "right" : "den = -den;",
      "info" : "ExpressionStatement[9703-9714]:ExpressionStatement[9745-9756]"
    }, {
      "left" : "this.numerator   = num;",
      "right" : "this.numerator   = num;",
      "info" : "ExpressionStatement[9733-9756]:ExpressionStatement[9775-9798]"
    }, {
      "left" : "this.denominator = den;",
      "right" : "this.denominator = den;",
      "info" : "ExpressionStatement[9765-9788]:ExpressionStatement[9807-9830]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9903-9909]:Modifier[9945-9951]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[9910-9918]:SimpleType[9952-9960]"
    }, {
      "left" : "abs",
      "right" : "abs",
      "info" : "SimpleName[9919-9922]:SimpleName[9961-9964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9925-10083]:Block[9967-10125]"
    }, {
      "left" : "Fraction ret;",
      "right" : "Fraction ret;",
      "info" : "VariableDeclarationStatement[9935-9948]:VariableDeclarationStatement[9977-9990]"
    }, {
      "left" : "if (numerator >= 0)",
      "right" : "if (numerator >= 0)",
      "info" : "IfStatement[9957-10057]:IfStatement[9999-10099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9977-10012]:Block[10019-10054]"
    }, {
      "left" : "ret = this;",
      "right" : "ret = this;",
      "info" : "ExpressionStatement[9991-10002]:ExpressionStatement[10033-10044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10018-10057]:Block[10060-10099]"
    }, {
      "left" : "ret = negate();",
      "right" : "ret = negate();",
      "info" : "ExpressionStatement[10032-10047]:ExpressionStatement[10074-10089]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[10066-10077]:ReturnStatement[10108-10119]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10341-10347]:Modifier[10383-10389]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[10348-10351]:PrimitiveType[10390-10393]"
    }, {
      "left" : "compareTo",
      "right" : "compareTo",
      "info" : "SimpleName[10352-10361]:SimpleName[10394-10403]"
    }, {
      "left" : "Fraction object",
      "right" : "Fraction object",
      "info" : "SingleVariableDeclaration[10362-10377]:SingleVariableDeclaration[10404-10419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10379-10564]:Block[10421-10606]"
    }, {
      "left" : "long nOd = ((long) numerator) * object.denominator;",
      "right" : "long nOd = ((long) numerator) * object.denominator;",
      "info" : "VariableDeclarationStatement[10389-10440]:VariableDeclarationStatement[10431-10482]"
    }, {
      "left" : "long dOn = ((long) denominator) * object.numerator;",
      "right" : "long dOn = ((long) denominator) * object.numerator;",
      "info" : "VariableDeclarationStatement[10449-10500]:VariableDeclarationStatement[10491-10542]"
    }, {
      "left" : "return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);",
      "right" : "return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);",
      "info" : "ReturnStatement[10509-10558]:ReturnStatement[10551-10600]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10759-10768]:MarkerAnnotation[10801-10810]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10773-10779]:Modifier[10815-10821]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[10780-10786]:PrimitiveType[10822-10828]"
    }, {
      "left" : "doubleValue",
      "right" : "doubleValue",
      "info" : "SimpleName[10787-10798]:SimpleName[10829-10840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10801-10864]:Block[10843-10906]"
    }, {
      "left" : "return (double)numerator / (double)denominator;",
      "right" : "return (double)numerator / (double)denominator;",
      "info" : "ReturnStatement[10811-10858]:ReturnStatement[10853-10900]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11329-11338]:MarkerAnnotation[11371-11380]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11343-11349]:Modifier[11385-11391]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11350-11357]:PrimitiveType[11392-11399]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[11358-11364]:SimpleName[11400-11406]"
    }, {
      "left" : "Object other",
      "right" : "Object other",
      "info" : "SingleVariableDeclaration[11365-11377]:SingleVariableDeclaration[11407-11419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11379-11809]:Block[11421-11851]"
    }, {
      "left" : "if (this == other)",
      "right" : "if (this == other)",
      "info" : "IfStatement[11389-11444]:IfStatement[11431-11486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11408-11444]:Block[11450-11486]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11422-11434]:ReturnStatement[11464-11476]"
    }, {
      "left" : "if (other instanceof Fraction)",
      "right" : "if (other instanceof Fraction)",
      "info" : "IfStatement[11453-11781]:IfStatement[11495-11823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11484-11781]:Block[11526-11823]"
    }, {
      "left" : "Fraction rhs = (Fraction)other;",
      "right" : "Fraction rhs = (Fraction)other;",
      "info" : "VariableDeclarationStatement[11639-11670]:VariableDeclarationStatement[11681-11712]"
    }, {
      "left" : "return (numerator == rhs.numerator) &&\n                (denominator == rhs.denominator);",
      "right" : "return (numerator == rhs.numerator) &&\n                (denominator == rhs.denominator);",
      "info" : "ReturnStatement[11683-11771]:ReturnStatement[11725-11813]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11790-11803]:ReturnStatement[11832-11845]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12002-12011]:MarkerAnnotation[12044-12053]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12016-12022]:Modifier[12058-12064]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[12023-12028]:PrimitiveType[12065-12070]"
    }, {
      "left" : "floatValue",
      "right" : "floatValue",
      "info" : "SimpleName[12029-12039]:SimpleName[12071-12081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12042-12086]:Block[12084-12128]"
    }, {
      "left" : "return (float)doubleValue();",
      "right" : "return (float)doubleValue();",
      "info" : "ReturnStatement[12052-12080]:ReturnStatement[12094-12122]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12171-12177]:Modifier[12213-12219]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[12178-12181]:PrimitiveType[12220-12223]"
    }, {
      "left" : "getDenominator",
      "right" : "getDenominator",
      "info" : "SimpleName[12182-12196]:SimpleName[12224-12238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12199-12234]:Block[12241-12276]"
    }, {
      "left" : "return denominator;",
      "right" : "return denominator;",
      "info" : "ReturnStatement[12209-12228]:ReturnStatement[12251-12270]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12315-12321]:Modifier[12357-12363]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[12322-12325]:PrimitiveType[12364-12367]"
    }, {
      "left" : "getNumerator",
      "right" : "getNumerator",
      "info" : "SimpleName[12326-12338]:SimpleName[12368-12380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12341-12374]:Block[12383-12416]"
    }, {
      "left" : "return numerator;",
      "right" : "return numerator;",
      "info" : "ReturnStatement[12351-12368]:ReturnStatement[12393-12410]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12486-12495]:MarkerAnnotation[12528-12537]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12500-12506]:Modifier[12542-12548]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[12507-12510]:PrimitiveType[12549-12552]"
    }, {
      "left" : "hashCode",
      "right" : "hashCode",
      "info" : "SimpleName[12511-12519]:SimpleName[12553-12561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12522-12586]:Block[12564-12628]"
    }, {
      "left" : "return 37 * (37 * 17 + numerator) + denominator;",
      "right" : "return 37 * (37 * 17 + numerator) + denominator;",
      "info" : "ReturnStatement[12532-12580]:ReturnStatement[12574-12622]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12758-12767]:MarkerAnnotation[12800-12809]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12772-12778]:Modifier[12814-12820]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[12779-12782]:PrimitiveType[12821-12824]"
    }, {
      "left" : "intValue",
      "right" : "intValue",
      "info" : "SimpleName[12783-12791]:SimpleName[12825-12833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12794-12836]:Block[12836-12878]"
    }, {
      "left" : "return (int)doubleValue();",
      "right" : "return (int)doubleValue();",
      "info" : "ReturnStatement[12804-12830]:ReturnStatement[12846-12872]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13008-13017]:MarkerAnnotation[13050-13059]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13022-13028]:Modifier[13064-13070]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[13029-13033]:PrimitiveType[13071-13075]"
    }, {
      "left" : "longValue",
      "right" : "longValue",
      "info" : "SimpleName[13034-13043]:SimpleName[13076-13085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13046-13089]:Block[13088-13131]"
    }, {
      "left" : "return (long)doubleValue();",
      "right" : "return (long)doubleValue();",
      "info" : "ReturnStatement[13056-13083]:ReturnStatement[13098-13125]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13210-13216]:Modifier[13252-13258]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[13217-13225]:SimpleType[13259-13267]"
    }, {
      "left" : "negate",
      "right" : "negate",
      "info" : "SimpleName[13226-13232]:SimpleName[13268-13274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13235-13460]:Block[13277-13502]"
    }, {
      "left" : "if (numerator==Integer.MIN_VALUE)",
      "right" : "if (numerator==Integer.MIN_VALUE)",
      "info" : "IfStatement[13245-13400]:IfStatement[13287-13442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13279-13400]:Block[13321-13442]"
    }, {
      "left" : "throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator);",
      "right" : "throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator);",
      "info" : "ThrowStatement[13293-13390]:ThrowStatement[13335-13432]"
    }, {
      "left" : "return new Fraction(-numerator, denominator);",
      "right" : "return new Fraction(-numerator, denominator);",
      "info" : "ReturnStatement[13409-13454]:ReturnStatement[13451-13496]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13580-13586]:Modifier[13622-13628]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[13587-13595]:SimpleType[13629-13637]"
    }, {
      "left" : "reciprocal",
      "right" : "reciprocal",
      "info" : "SimpleName[13596-13606]:SimpleName[13638-13648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13609-13669]:Block[13651-13711]"
    }, {
      "left" : "return new Fraction(denominator, numerator);",
      "right" : "return new Fraction(denominator, numerator);",
      "info" : "ReturnStatement[13619-13663]:ReturnStatement[13661-13705]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14168-14174]:Modifier[14210-14216]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[14175-14183]:SimpleType[14217-14225]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[14184-14187]:SimpleName[14226-14229]"
    }, {
      "left" : "Fraction fraction",
      "right" : "Fraction fraction",
      "info" : "SingleVariableDeclaration[14188-14205]:SingleVariableDeclaration[14230-14247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14207-14263]:Block[14249-14305]"
    }, {
      "left" : "return addSub(fraction, true /* add */);",
      "right" : "return addSub(fraction, true /* add */);",
      "info" : "ReturnStatement[14217-14257]:ReturnStatement[14259-14299]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14393-14399]:Modifier[14435-14441]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[14400-14408]:SimpleType[14442-14450]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[14409-14412]:SimpleName[14451-14454]"
    }, {
      "left" : "final int i",
      "right" : "final int i",
      "info" : "SingleVariableDeclaration[14413-14424]:SingleVariableDeclaration[14455-14466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14426-14504]:Block[14468-14546]"
    }, {
      "left" : "return new Fraction(numerator + i * denominator, denominator);",
      "right" : "return new Fraction(numerator + i * denominator, denominator);",
      "info" : "ReturnStatement[14436-14498]:ReturnStatement[14478-14540]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15004-15010]:Modifier[15046-15052]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[15011-15019]:SimpleType[15053-15061]"
    }, {
      "left" : "subtract",
      "right" : "subtract",
      "info" : "SimpleName[15020-15028]:SimpleName[15062-15070]"
    }, {
      "left" : "Fraction fraction",
      "right" : "Fraction fraction",
      "info" : "SingleVariableDeclaration[15029-15046]:SingleVariableDeclaration[15071-15088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15048-15110]:Block[15090-15152]"
    }, {
      "left" : "return addSub(fraction, false /* subtract */);",
      "right" : "return addSub(fraction, false /* subtract */);",
      "info" : "ReturnStatement[15058-15104]:ReturnStatement[15100-15146]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15252-15258]:Modifier[15294-15300]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[15259-15267]:SimpleType[15301-15309]"
    }, {
      "left" : "subtract",
      "right" : "subtract",
      "info" : "SimpleName[15268-15276]:SimpleName[15310-15318]"
    }, {
      "left" : "final int i",
      "right" : "final int i",
      "info" : "SingleVariableDeclaration[15277-15288]:SingleVariableDeclaration[15319-15330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15290-15368]:Block[15332-15410]"
    }, {
      "left" : "return new Fraction(numerator - i * denominator, denominator);",
      "right" : "return new Fraction(numerator - i * denominator, denominator);",
      "info" : "ReturnStatement[15300-15362]:ReturnStatement[15342-15404]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15867-15874]:Modifier[15909-15916]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[15875-15883]:SimpleType[15917-15925]"
    }, {
      "left" : "addSub",
      "right" : "addSub",
      "info" : "SimpleName[15884-15890]:SimpleName[15926-15932]"
    }, {
      "left" : "Fraction fraction",
      "right" : "Fraction fraction",
      "info" : "SingleVariableDeclaration[15891-15908]:SingleVariableDeclaration[15933-15950]"
    }, {
      "left" : "boolean isAdd",
      "right" : "boolean isAdd",
      "info" : "SingleVariableDeclaration[15910-15923]:SingleVariableDeclaration[15952-15965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15925-18066]:Block[15967-18108]"
    }, {
      "left" : "if (fraction == null)",
      "right" : "if (fraction == null)",
      "info" : "IfStatement[15935-16040]:IfStatement[15977-16082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15957-16040]:Block[15999-16082]"
    }, {
      "left" : "throw new NullArgumentException(LocalizedFormats.FRACTION);",
      "right" : "throw new NullArgumentException(LocalizedFormats.FRACTION);",
      "info" : "ThrowStatement[15971-16030]:ThrowStatement[16013-16072]"
    }, {
      "left" : "if (numerator == 0)",
      "right" : "if (numerator == 0)",
      "info" : "IfStatement[16091-16179]:IfStatement[16133-16221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16111-16179]:Block[16153-16221]"
    }, {
      "left" : "return isAdd ? fraction : fraction.negate();",
      "right" : "return isAdd ? fraction : fraction.negate();",
      "info" : "ReturnStatement[16125-16169]:ReturnStatement[16167-16211]"
    }, {
      "left" : "if (fraction.numerator == 0)",
      "right" : "if (fraction.numerator == 0)",
      "info" : "IfStatement[16188-16253]:IfStatement[16230-16295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16217-16253]:Block[16259-16295]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[16231-16243]:ReturnStatement[16273-16285]"
    }, {
      "left" : "int d1 = ArithmeticUtils.gcd(denominator, fraction.denominator);",
      "right" : "int d1 = ArithmeticUtils.gcd(denominator, fraction.denominator);",
      "info" : "VariableDeclarationStatement[16362-16426]:VariableDeclarationStatement[16404-16468]"
    }, {
      "left" : "if (d1==1)",
      "right" : "if (d1==1)",
      "info" : "IfStatement[16435-16910]:IfStatement[16477-16952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16446-16910]:Block[16488-16952]"
    }, {
      "left" : "int uvp = ArithmeticUtils.mulAndCheck(numerator, fraction.denominator);",
      "right" : "int uvp = ArithmeticUtils.mulAndCheck(numerator, fraction.denominator);",
      "info" : "VariableDeclarationStatement[16510-16581]:VariableDeclarationStatement[16552-16623]"
    }, {
      "left" : "int upv = ArithmeticUtils.mulAndCheck(fraction.numerator, denominator);",
      "right" : "int upv = ArithmeticUtils.mulAndCheck(fraction.numerator, denominator);",
      "info" : "VariableDeclarationStatement[16594-16665]:VariableDeclarationStatement[16636-16707]"
    }, {
      "left" : "return new Fraction\n                (isAdd ? ArithmeticUtils.addAndCheck(uvp, upv) :\n                 ArithmeticUtils.subAndCheck(uvp, upv),\n                 ArithmeticUtils.mulAndCheck(denominator, fraction.denominator));",
      "right" : "return new Fraction\n                (isAdd ? ArithmeticUtils.addAndCheck(uvp, upv) :\n                 ArithmeticUtils.subAndCheck(uvp, upv),\n                 ArithmeticUtils.mulAndCheck(denominator, fraction.denominator));",
      "info" : "ReturnStatement[16678-16900]:ReturnStatement[16720-16942]"
    }, {
      "left" : "BigInteger uvp = BigInteger.valueOf(numerator)\n        .multiply(BigInteger.valueOf(fraction.denominator/d1));",
      "right" : "BigInteger uvp = BigInteger.valueOf(numerator)\n        .multiply(BigInteger.valueOf(fraction.denominator/d1));",
      "info" : "VariableDeclarationStatement[17088-17198]:VariableDeclarationStatement[17130-17240]"
    }, {
      "left" : "BigInteger upv = BigInteger.valueOf(fraction.numerator)\n        .multiply(BigInteger.valueOf(denominator/d1));",
      "right" : "BigInteger upv = BigInteger.valueOf(fraction.numerator)\n        .multiply(BigInteger.valueOf(denominator/d1));",
      "info" : "VariableDeclarationStatement[17207-17317]:VariableDeclarationStatement[17249-17359]"
    }, {
      "left" : "BigInteger t = isAdd ? uvp.add(upv) : uvp.subtract(upv);",
      "right" : "BigInteger t = isAdd ? uvp.add(upv) : uvp.subtract(upv);",
      "info" : "VariableDeclarationStatement[17326-17382]:VariableDeclarationStatement[17368-17424]"
    }, {
      "left" : "int tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue();",
      "right" : "int tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue();",
      "info" : "VariableDeclarationStatement[17492-17546]:VariableDeclarationStatement[17534-17588]"
    }, {
      "left" : "int d2 = (tmodd1==0)?d1:ArithmeticUtils.gcd(tmodd1, d1);",
      "right" : "int d2 = (tmodd1==0)?d1:ArithmeticUtils.gcd(tmodd1, d1);",
      "info" : "VariableDeclarationStatement[17555-17611]:VariableDeclarationStatement[17597-17653]"
    }, {
      "left" : "BigInteger w = t.divide(BigInteger.valueOf(d2));",
      "right" : "BigInteger w = t.divide(BigInteger.valueOf(d2));",
      "info" : "VariableDeclarationStatement[17666-17714]:VariableDeclarationStatement[17708-17756]"
    }, {
      "left" : "if (w.bitLength() > 31)",
      "right" : "if (w.bitLength() > 31)",
      "info" : "IfStatement[17723-17906]:IfStatement[17765-17948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17747-17906]:Block[17789-17948]"
    }, {
      "left" : "throw new MathArithmeticException(LocalizedFormats.NUMERATOR_OVERFLOW_AFTER_MULTIPLY,\n                                              w);",
      "right" : "throw new MathArithmeticException(LocalizedFormats.NUMERATOR_OVERFLOW_AFTER_MULTIPLY,\n                                              w);",
      "info" : "ThrowStatement[17761-17896]:ThrowStatement[17803-17938]"
    }, {
      "left" : "return new Fraction (w.intValue(),\n                ArithmeticUtils.mulAndCheck(denominator/d1,\n                        fraction.denominator/d2));",
      "right" : "return new Fraction (w.intValue(),\n                ArithmeticUtils.mulAndCheck(denominator/d1,\n                        fraction.denominator/d2));",
      "info" : "ReturnStatement[17915-18060]:ReturnStatement[17957-18102]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18543-18549]:Modifier[18585-18591]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[18550-18558]:SimpleType[18592-18600]"
    }, {
      "left" : "multiply",
      "right" : "multiply",
      "info" : "SimpleName[18559-18567]:SimpleName[18601-18609]"
    }, {
      "left" : "Fraction fraction",
      "right" : "Fraction fraction",
      "info" : "SingleVariableDeclaration[18568-18585]:SingleVariableDeclaration[18610-18627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18587-19235]:Block[18629-19277]"
    }, {
      "left" : "if (fraction == null)",
      "right" : "if (fraction == null)",
      "info" : "IfStatement[18597-18702]:IfStatement[18639-18744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18619-18702]:Block[18661-18744]"
    }, {
      "left" : "throw new NullArgumentException(LocalizedFormats.FRACTION);",
      "right" : "throw new NullArgumentException(LocalizedFormats.FRACTION);",
      "info" : "ThrowStatement[18633-18692]:ThrowStatement[18675-18734]"
    }, {
      "left" : "if (numerator == 0 || fraction.numerator == 0)",
      "right" : "if (numerator == 0 || fraction.numerator == 0)",
      "info" : "IfStatement[18711-18794]:IfStatement[18753-18836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18758-18794]:Block[18800-18836]"
    }, {
      "left" : "return ZERO;",
      "right" : "return ZERO;",
      "info" : "ReturnStatement[18772-18784]:ReturnStatement[18814-18826]"
    }, {
      "left" : "int d1 = ArithmeticUtils.gcd(numerator, fraction.denominator);",
      "right" : "int d1 = ArithmeticUtils.gcd(numerator, fraction.denominator);",
      "info" : "VariableDeclarationStatement[18900-18962]:VariableDeclarationStatement[18942-19004]"
    }, {
      "left" : "int d2 = ArithmeticUtils.gcd(fraction.numerator, denominator);",
      "right" : "int d2 = ArithmeticUtils.gcd(fraction.numerator, denominator);",
      "info" : "VariableDeclarationStatement[18971-19033]:VariableDeclarationStatement[19013-19075]"
    }, {
      "left" : "return getReducedFraction\n        (ArithmeticUtils.mulAndCheck(numerator/d1, fraction.numerator/d2),\n                ArithmeticUtils.mulAndCheck(denominator/d2, fraction.denominator/d1));",
      "right" : "return getReducedFraction\n        (ArithmeticUtils.mulAndCheck(numerator/d1, fraction.numerator/d2),\n                ArithmeticUtils.mulAndCheck(denominator/d2, fraction.denominator/d1));",
      "info" : "ReturnStatement[19042-19229]:ReturnStatement[19084-19271]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19378-19384]:Modifier[19420-19426]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[19385-19393]:SimpleType[19427-19435]"
    }, {
      "left" : "multiply",
      "right" : "multiply",
      "info" : "SimpleName[19394-19402]:SimpleName[19436-19444]"
    }, {
      "left" : "final int i",
      "right" : "final int i",
      "info" : "SingleVariableDeclaration[19403-19414]:SingleVariableDeclaration[19445-19456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19416-19480]:Block[19458-19522]"
    }, {
      "left" : "return new Fraction(numerator * i, denominator);",
      "right" : "return new Fraction(numerator * i, denominator);",
      "info" : "ReturnStatement[19426-19474]:ReturnStatement[19468-19516]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19985-19991]:Modifier[20027-20033]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[19992-20000]:SimpleType[20034-20042]"
    }, {
      "left" : "divide",
      "right" : "divide",
      "info" : "SimpleName[20001-20007]:SimpleName[20043-20049]"
    }, {
      "left" : "Fraction fraction",
      "right" : "Fraction fraction",
      "info" : "SingleVariableDeclaration[20008-20025]:SingleVariableDeclaration[20050-20067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20027-20425]:Block[20069-20467]"
    }, {
      "left" : "if (fraction == null)",
      "right" : "if (fraction == null)",
      "info" : "IfStatement[20037-20142]:IfStatement[20079-20184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20059-20142]:Block[20101-20184]"
    }, {
      "left" : "throw new NullArgumentException(LocalizedFormats.FRACTION);",
      "right" : "throw new NullArgumentException(LocalizedFormats.FRACTION);",
      "info" : "ThrowStatement[20073-20132]:ThrowStatement[20115-20174]"
    }, {
      "left" : "if (fraction.numerator == 0)",
      "right" : "if (fraction.numerator == 0)",
      "info" : "IfStatement[20151-20371]:IfStatement[20193-20413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20180-20371]:Block[20222-20413]"
    }, {
      "left" : "throw new MathArithmeticException(LocalizedFormats.ZERO_FRACTION_TO_DIVIDE_BY,\n                                              fraction.numerator, fraction.denominator);",
      "right" : "throw new MathArithmeticException(LocalizedFormats.ZERO_FRACTION_TO_DIVIDE_BY,\n                                              fraction.numerator, fraction.denominator);",
      "info" : "ThrowStatement[20194-20361]:ThrowStatement[20236-20403]"
    }, {
      "left" : "return multiply(fraction.reciprocal());",
      "right" : "return multiply(fraction.reciprocal());",
      "info" : "ReturnStatement[20380-20419]:ReturnStatement[20422-20461]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20564-20570]:Modifier[20606-20612]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[20571-20579]:SimpleType[20613-20621]"
    }, {
      "left" : "divide",
      "right" : "divide",
      "info" : "SimpleName[20580-20586]:SimpleName[20622-20628]"
    }, {
      "left" : "final int i",
      "right" : "final int i",
      "info" : "SingleVariableDeclaration[20587-20598]:SingleVariableDeclaration[20629-20640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20600-20664]:Block[20642-20706]"
    }, {
      "left" : "return new Fraction(numerator, denominator * i);",
      "right" : "return new Fraction(numerator, denominator * i);",
      "info" : "ReturnStatement[20610-20658]:ReturnStatement[20652-20700]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20930-20936]:Modifier[20972-20978]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[20937-20943]:PrimitiveType[20979-20985]"
    }, {
      "left" : "percentageValue",
      "right" : "percentageValue",
      "info" : "SimpleName[20944-20959]:SimpleName[20986-21001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20962-21005]:Block[21004-21047]"
    }, {
      "left" : "return 100 * doubleValue();",
      "right" : "return 100 * doubleValue();",
      "info" : "ReturnStatement[20972-20999]:ReturnStatement[21014-21041]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21529-21535]:Modifier[21571-21577]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[21536-21542]:Modifier[21578-21584]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[21543-21551]:SimpleType[21585-21593]"
    }, {
      "left" : "getReducedFraction",
      "right" : "getReducedFraction",
      "info" : "SimpleName[21552-21570]:SimpleName[21594-21612]"
    }, {
      "left" : "int numerator",
      "right" : "int numerator",
      "info" : "SingleVariableDeclaration[21571-21584]:SingleVariableDeclaration[21613-21626]"
    }, {
      "left" : "int denominator",
      "right" : "int denominator",
      "info" : "SingleVariableDeclaration[21586-21601]:SingleVariableDeclaration[21628-21643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21603-22672]:Block[21645-22714]"
    }, {
      "left" : "if (denominator == 0)",
      "right" : "if (denominator == 0)",
      "info" : "IfStatement[21613-21810]:IfStatement[21655-21852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21635-21810]:Block[21677-21852]"
    }, {
      "left" : "throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION,\n                                              numerator, denominator);",
      "right" : "throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION,\n                                              numerator, denominator);",
      "info" : "ThrowStatement[21649-21800]:ThrowStatement[21691-21842]"
    }, {
      "left" : "if (numerator==0)",
      "right" : "if (numerator==0)",
      "info" : "IfStatement[21819-21892]:IfStatement[21861-21934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21837-21892]:Block[21879-21934]"
    }, {
      "left" : "return ZERO;",
      "right" : "return ZERO;",
      "info" : "ReturnStatement[21851-21863]:ReturnStatement[21893-21905]"
    }, {
      "left" : "if (denominator==Integer.MIN_VALUE && (numerator&1)==0)",
      "right" : "if (denominator==Integer.MIN_VALUE && (numerator&1)==0)",
      "info" : "IfStatement[21960-22069]:IfStatement[22002-22111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22016-22069]:Block[22058-22111]"
    }, {
      "left" : "numerator/=2;",
      "right" : "numerator/=2;",
      "info" : "ExpressionStatement[22030-22043]:ExpressionStatement[22072-22085]"
    }, {
      "left" : "denominator/=2;",
      "right" : "denominator/=2;",
      "info" : "ExpressionStatement[22044-22059]:ExpressionStatement[22086-22101]"
    }, {
      "left" : "if (denominator < 0)",
      "right" : "if (denominator < 0)",
      "info" : "IfStatement[22078-22466]:IfStatement[22120-22508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22099-22466]:Block[22141-22508]"
    }, {
      "left" : "if (numerator==Integer.MIN_VALUE ||\n                    denominator==Integer.MIN_VALUE)",
      "right" : "if (numerator==Integer.MIN_VALUE ||\n                    denominator==Integer.MIN_VALUE)",
      "info" : "IfStatement[22113-22380]:IfStatement[22155-22422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22201-22380]:Block[22243-22422]"
    }, {
      "left" : "throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,\n                                                  numerator, denominator);",
      "right" : "throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,\n                                                  numerator, denominator);",
      "info" : "ThrowStatement[22219-22366]:ThrowStatement[22261-22408]"
    }, {
      "left" : "numerator = -numerator;",
      "right" : "numerator = -numerator;",
      "info" : "ExpressionStatement[22393-22416]:ExpressionStatement[22435-22458]"
    }, {
      "left" : "denominator = -denominator;",
      "right" : "denominator = -denominator;",
      "info" : "ExpressionStatement[22429-22456]:ExpressionStatement[22471-22498]"
    }, {
      "left" : "int gcd = ArithmeticUtils.gcd(numerator, denominator);",
      "right" : "int gcd = ArithmeticUtils.gcd(numerator, denominator);",
      "info" : "VariableDeclarationStatement[22505-22559]:VariableDeclarationStatement[22547-22601]"
    }, {
      "left" : "numerator /= gcd;",
      "right" : "numerator /= gcd;",
      "info" : "ExpressionStatement[22568-22585]:ExpressionStatement[22610-22627]"
    }, {
      "left" : "denominator /= gcd;",
      "right" : "denominator /= gcd;",
      "info" : "ExpressionStatement[22594-22613]:ExpressionStatement[22636-22655]"
    }, {
      "left" : "return new Fraction(numerator, denominator);",
      "right" : "return new Fraction(numerator, denominator);",
      "info" : "ReturnStatement[22622-22666]:ReturnStatement[22664-22708]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22945-22954]:MarkerAnnotation[22987-22996]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22959-22965]:Modifier[23001-23007]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[22966-22972]:SimpleType[23008-23014]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[22973-22981]:SimpleName[23015-23023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22984-23255]:Block[23026-23297]"
    }, {
      "left" : "String str = null;",
      "right" : "String str = null;",
      "info" : "VariableDeclarationStatement[22994-23012]:VariableDeclarationStatement[23036-23054]"
    }, {
      "left" : "if (denominator == 1)",
      "right" : "if (denominator == 1)",
      "info" : "IfStatement[23021-23229]:IfStatement[23063-23271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23043-23101]:Block[23085-23143]"
    }, {
      "left" : "str = Integer.toString(numerator);",
      "right" : "str = Integer.toString(numerator);",
      "info" : "ExpressionStatement[23057-23091]:ExpressionStatement[23099-23133]"
    }, {
      "left" : "if (numerator == 0)",
      "right" : "if (numerator == 0)",
      "info" : "IfStatement[23107-23229]:IfStatement[23149-23271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23127-23161]:Block[23169-23203]"
    }, {
      "left" : "str = \"0\";",
      "right" : "str = \"0\";",
      "info" : "ExpressionStatement[23141-23151]:ExpressionStatement[23183-23193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23167-23229]:Block[23209-23271]"
    }, {
      "left" : "str = numerator + \" / \" + denominator;",
      "right" : "str = numerator + \" / \" + denominator;",
      "info" : "ExpressionStatement[23181-23219]:ExpressionStatement[23223-23261]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[23238-23249]:ReturnStatement[23280-23291]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23286-23292]:Modifier[23328-23334]"
    }, {
      "left" : "FractionField",
      "right" : "FractionField",
      "info" : "SimpleType[23293-23306]:SimpleType[23335-23348]"
    }, {
      "left" : "getField",
      "right" : "getField",
      "info" : "SimpleName[23307-23315]:SimpleName[23349-23357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23318-23369]:Block[23360-23411]"
    }, {
      "left" : "return FractionField.getInstance();",
      "right" : "return FractionField.getInstance();",
      "info" : "ReturnStatement[23328-23363]:ReturnStatement[23370-23405]"
    } ]
  },
  "interFileMappings" : { }
}