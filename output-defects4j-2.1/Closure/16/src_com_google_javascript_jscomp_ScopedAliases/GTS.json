{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ScopedAliases",
      "right" : "ScopedAliases",
      "info" : "TypeDeclaration[1329-16032]:TypeDeclaration[1329-16360]"
    }, {
      "left" : "static final String SCOPING_METHOD_NAME = \"goog.scope\";",
      "right" : "static final String SCOPING_METHOD_NAME = \"goog.scope\";",
      "info" : "FieldDeclaration[1678-1806]:FieldDeclaration[1678-1806]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[1810-1850]:FieldDeclaration[1810-1850]"
    }, {
      "left" : "private final PreprocessorSymbolTable preprocessorSymbolTable;",
      "right" : "private final PreprocessorSymbolTable preprocessorSymbolTable;",
      "info" : "FieldDeclaration[1853-1915]:FieldDeclaration[1853-1915]"
    }, {
      "left" : "private final AliasTransformationHandler transformationHandler;",
      "right" : "private final AliasTransformationHandler transformationHandler;",
      "info" : "FieldDeclaration[1918-1981]:FieldDeclaration[1918-1981]"
    }, {
      "left" : "static final DiagnosticType GOOG_SCOPE_USED_IMPROPERLY = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_USED_IMPROPERLY\",\n      \"The call to goog.scope must be alone in a single statement.\");",
      "right" : "static final DiagnosticType GOOG_SCOPE_USED_IMPROPERLY = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_USED_IMPROPERLY\",\n      \"The call to goog.scope must be alone in a single statement.\");",
      "info" : "FieldDeclaration[1997-2185]:FieldDeclaration[1997-2185]"
    }, {
      "left" : "static final DiagnosticType GOOG_SCOPE_HAS_BAD_PARAMETERS =\n      DiagnosticType.error(\n          \"JSC_GOOG_SCOPE_HAS_BAD_PARAMETERS\",\n          \"The call to goog.scope must take only a single parameter.  It must\" +\n              \" be an anonymous function that itself takes no parameters.\");",
      "right" : "static final DiagnosticType GOOG_SCOPE_HAS_BAD_PARAMETERS =\n      DiagnosticType.error(\n          \"JSC_GOOG_SCOPE_HAS_BAD_PARAMETERS\",\n          \"The call to goog.scope must take only a single parameter.  It must\" +\n              \" be an anonymous function that itself takes no parameters.\");",
      "info" : "FieldDeclaration[2189-2481]:FieldDeclaration[2189-2481]"
    }, {
      "left" : "static final DiagnosticType GOOG_SCOPE_REFERENCES_THIS = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_REFERENCES_THIS\",\n      \"The body of a goog.scope function cannot reference 'this'.\");",
      "right" : "static final DiagnosticType GOOG_SCOPE_REFERENCES_THIS = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_REFERENCES_THIS\",\n      \"The body of a goog.scope function cannot reference 'this'.\");",
      "info" : "FieldDeclaration[2485-2672]:FieldDeclaration[2485-2672]"
    }, {
      "left" : "static final DiagnosticType GOOG_SCOPE_USES_RETURN = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_USES_RETURN\",\n      \"The body of a goog.scope function cannot use 'return'.\");",
      "right" : "static final DiagnosticType GOOG_SCOPE_USES_RETURN = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_USES_RETURN\",\n      \"The body of a goog.scope function cannot use 'return'.\");",
      "info" : "FieldDeclaration[2676-2851]:FieldDeclaration[2676-2851]"
    }, {
      "left" : "static final DiagnosticType GOOG_SCOPE_USES_THROW = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_USES_THROW\",\n      \"The body of a goog.scope function cannot use 'throw'.\");",
      "right" : "static final DiagnosticType GOOG_SCOPE_USES_THROW = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_USES_THROW\",\n      \"The body of a goog.scope function cannot use 'throw'.\");",
      "info" : "FieldDeclaration[2855-3027]:FieldDeclaration[2855-3027]"
    }, {
      "left" : "static final DiagnosticType GOOG_SCOPE_ALIAS_REDEFINED = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_ALIAS_REDEFINED\",\n      \"The alias {0} is assigned a value more than once.\");",
      "right" : "static final DiagnosticType GOOG_SCOPE_ALIAS_REDEFINED = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_ALIAS_REDEFINED\",\n      \"The alias {0} is assigned a value more than once.\");",
      "info" : "FieldDeclaration[3031-3209]:FieldDeclaration[3031-3209]"
    }, {
      "left" : "static final DiagnosticType GOOG_SCOPE_NON_ALIAS_LOCAL = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_NON_ALIAS_LOCAL\",\n      \"The local variable {0} is in a goog.scope and is not an alias.\");",
      "right" : "static final DiagnosticType GOOG_SCOPE_NON_ALIAS_LOCAL = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_NON_ALIAS_LOCAL\",\n      \"The local variable {0} is in a goog.scope and is not an alias.\");",
      "info" : "FieldDeclaration[3213-3404]:FieldDeclaration[3213-3404]"
    }, {
      "left" : "ScopedAliases(AbstractCompiler compiler,\n      @Nullable PreprocessorSymbolTable preprocessorSymbolTable,\n      AliasTransformationHandler transformationHandler)",
      "right" : "ScopedAliases(AbstractCompiler compiler,\n      @Nullable PreprocessorSymbolTable preprocessorSymbolTable,\n      AliasTransformationHandler transformationHandler)",
      "info" : "MethodDeclaration[3408-3721]:MethodDeclaration[3408-3721]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[3725-3818]:MethodDeclaration[3725-3818]"
    }, {
      "left" : "public void hotSwapScript(Node root, Node originalRoot)",
      "right" : "public void hotSwapScript(Node root, Node originalRoot)",
      "info" : "MethodDeclaration[3822-5198]:MethodDeclaration[3822-5198]"
    }, {
      "left" : "AliasUsage",
      "right" : "AliasUsage",
      "info" : "TypeDeclaration[5202-5266]:TypeDeclaration[5202-5266]"
    }, {
      "left" : "public void applyAlias();",
      "right" : "public void applyAlias();",
      "info" : "MethodDeclaration[5237-5262]:MethodDeclaration[5237-5262]"
    }, {
      "left" : "AliasedNode",
      "right" : "AliasedNode",
      "info" : "TypeDeclaration[5270-5716]:TypeDeclaration[5270-5716]"
    }, {
      "left" : "private final Node aliasReference;",
      "right" : "private final Node aliasReference;",
      "info" : "FieldDeclaration[5324-5358]:FieldDeclaration[5324-5358]"
    }, {
      "left" : "private final Node aliasDefinition;",
      "right" : "private final Node aliasDefinition;",
      "info" : "FieldDeclaration[5364-5399]:FieldDeclaration[5364-5399]"
    }, {
      "left" : "AliasedNode(Node aliasReference, Node aliasDefinition)",
      "right" : "AliasedNode(Node aliasReference, Node aliasDefinition)",
      "info" : "MethodDeclaration[5405-5557]:MethodDeclaration[5405-5557]"
    }, {
      "left" : "public void applyAlias()",
      "right" : "public void applyAlias()",
      "info" : "MethodDeclaration[5563-5712]:MethodDeclaration[5563-5712]"
    }, {
      "left" : "AliasedTypeNode",
      "right" : "AliasedTypeNode",
      "info" : "TypeDeclaration[5720-6096]:TypeDeclaration[5720-6460]"
    }, {
      "left" : "private final Node typeReference;",
      "right" : "private final Node typeReference;",
      "info" : "FieldDeclaration[5778-5811]:FieldDeclaration[5778-5811]"
    }, {
      "left" : "private final String aliasName;",
      "right" : "private final String aliasName;",
      "info" : "FieldDeclaration[5816-5847]:FieldDeclaration[5856-5887]"
    }, {
      "left" : "AliasedTypeNode(Node typeReference,\n        String aliasName)",
      "right" : "AliasedTypeNode(Node typeReference, Node aliasDefinition,\n        String aliasName)",
      "info" : "MethodDeclaration[5853-5998]:MethodDeclaration[5893-6106]"
    }, {
      "left" : "Traversal",
      "right" : "Traversal",
      "info" : "TypeDeclaration[6101-16030]:TypeDeclaration[6465-16358]"
    }, {
      "left" : "private final List<Node> aliasDefinitionsInOrder = Lists.newArrayList();",
      "right" : "private final List<Node> aliasDefinitionsInOrder = Lists.newArrayList();",
      "info" : "FieldDeclaration[6315-6387]:FieldDeclaration[6679-6751]"
    }, {
      "left" : "private final List<Node> scopeCalls = Lists.newArrayList();",
      "right" : "private final List<Node> scopeCalls = Lists.newArrayList();",
      "info" : "FieldDeclaration[6393-6452]:FieldDeclaration[6757-6816]"
    }, {
      "left" : "private final List<AliasUsage> aliasUsages = Lists.newArrayList();",
      "right" : "private final List<AliasUsage> aliasUsages = Lists.newArrayList();",
      "info" : "FieldDeclaration[6458-6524]:FieldDeclaration[6822-6888]"
    }, {
      "left" : "private final Map<String, Var> aliases = Maps.newHashMap();",
      "right" : "private final Map<String, Var> aliases = Maps.newHashMap();",
      "info" : "FieldDeclaration[6587-6646]:FieldDeclaration[6951-7010]"
    }, {
      "left" : "private final Set<String> forbiddenLocals = Sets.newHashSet();",
      "right" : "private final Set<String> forbiddenLocals = Sets.newHashSet();",
      "info" : "FieldDeclaration[7150-7212]:FieldDeclaration[7514-7576]"
    }, {
      "left" : "private boolean hasNamespaceShadows = false;",
      "right" : "private boolean hasNamespaceShadows = false;",
      "info" : "FieldDeclaration[7217-7261]:FieldDeclaration[7581-7625]"
    }, {
      "left" : "private boolean hasErrors = false;",
      "right" : "private boolean hasErrors = false;",
      "info" : "FieldDeclaration[7267-7301]:FieldDeclaration[7631-7665]"
    }, {
      "left" : "private AliasTransformation transformation = null;",
      "right" : "private AliasTransformation transformation = null;",
      "info" : "FieldDeclaration[7307-7357]:FieldDeclaration[7671-7721]"
    }, {
      "left" : "Collection<Node> getAliasDefinitionsInOrder()",
      "right" : "Collection<Node> getAliasDefinitionsInOrder()",
      "info" : "MethodDeclaration[7363-7454]:MethodDeclaration[7727-7818]"
    }, {
      "left" : "private List<AliasUsage> getAliasUsages()",
      "right" : "private List<AliasUsage> getAliasUsages()",
      "info" : "MethodDeclaration[7460-7535]:MethodDeclaration[7824-7899]"
    }, {
      "left" : "List<Node> getScopeCalls()",
      "right" : "List<Node> getScopeCalls()",
      "info" : "MethodDeclaration[7541-7600]:MethodDeclaration[7905-7964]"
    }, {
      "left" : "boolean hasErrors()",
      "right" : "boolean hasErrors()",
      "info" : "MethodDeclaration[7606-7657]:MethodDeclaration[7970-8021]"
    }, {
      "left" : "private boolean isCallToScopeMethod(Node n)",
      "right" : "private boolean isCallToScopeMethod(Node n)",
      "info" : "MethodDeclaration[7663-7817]:MethodDeclaration[8027-8181]"
    }, {
      "left" : "public void enterScope(NodeTraversal t)",
      "right" : "public void enterScope(NodeTraversal t)",
      "info" : "MethodDeclaration[7823-8139]:MethodDeclaration[8187-8503]"
    }, {
      "left" : "public void exitScope(NodeTraversal t)",
      "right" : "public void exitScope(NodeTraversal t)",
      "info" : "MethodDeclaration[8145-8487]:MethodDeclaration[8509-8851]"
    }, {
      "left" : "public final boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "right" : "public final boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[8493-8836]:MethodDeclaration[8857-9200]"
    }, {
      "left" : "private SourcePosition<AliasTransformation> getSourceRegion(Node n)",
      "right" : "private SourcePosition<AliasTransformation> getSourceRegion(Node n)",
      "info" : "MethodDeclaration[8842-9465]:MethodDeclaration[9206-9829]"
    }, {
      "left" : "private void report(NodeTraversal t, Node n, DiagnosticType error,\n        String... arguments)",
      "right" : "private void report(NodeTraversal t, Node n, DiagnosticType error,\n        String... arguments)",
      "info" : "MethodDeclaration[9471-9655]:MethodDeclaration[9835-10019]"
    }, {
      "left" : "private void findAliases(NodeTraversal t)",
      "right" : "private void findAliases(NodeTraversal t)",
      "info" : "MethodDeclaration[9661-11005]:MethodDeclaration[10025-11369]"
    }, {
      "left" : "private void findNamespaceShadows(NodeTraversal t)",
      "right" : "private void findNamespaceShadows(NodeTraversal t)",
      "info" : "MethodDeclaration[11011-11399]:MethodDeclaration[11375-11763]"
    }, {
      "left" : "private void renameNamespaceShadows(NodeTraversal t)",
      "right" : "private void renameNamespaceShadows(NodeTraversal t)",
      "info" : "MethodDeclaration[11405-12143]:MethodDeclaration[11769-12507]"
    }, {
      "left" : "private void validateScopeCall(NodeTraversal t, Node n, Node parent)",
      "right" : "private void validateScopeCall(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[12149-13066]:MethodDeclaration[12513-13430]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[13072-15313]:MethodDeclaration[13436-15677]"
    }, {
      "left" : "private void fixTypeNode(Node typeNode)",
      "right" : "private void fixTypeNode(Node typeNode)",
      "info" : "MethodDeclaration[15319-16026]:MethodDeclaration[15683-16354]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3570-3721]:Block[3570-3721]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[3576-3601]:ExpressionStatement[3576-3601]"
    }, {
      "left" : "this.preprocessorSymbolTable = preprocessorSymbolTable;",
      "right" : "this.preprocessorSymbolTable = preprocessorSymbolTable;",
      "info" : "ExpressionStatement[3606-3661]:ExpressionStatement[3606-3661]"
    }, {
      "left" : "this.transformationHandler = transformationHandler;",
      "right" : "this.transformationHandler = transformationHandler;",
      "info" : "ExpressionStatement[3666-3717]:ExpressionStatement[3666-3717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3782-3818]:Block[3782-3818]"
    }, {
      "left" : "hotSwapScript(root, null);",
      "right" : "hotSwapScript(root, null);",
      "info" : "ExpressionStatement[3788-3814]:ExpressionStatement[3788-3814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3890-5198]:Block[3890-5198]"
    }, {
      "left" : "Traversal traversal = new Traversal();",
      "right" : "Traversal traversal = new Traversal();",
      "info" : "VariableDeclarationStatement[3896-3934]:VariableDeclarationStatement[3896-3934]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, traversal);",
      "right" : "NodeTraversal.traverse(compiler, root, traversal);",
      "info" : "ExpressionStatement[3939-3989]:ExpressionStatement[3939-3989]"
    }, {
      "left" : "if (!traversal.hasErrors())",
      "right" : "if (!traversal.hasErrors())",
      "info" : "IfStatement[3995-5194]:IfStatement[3995-5194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4023-5194]:Block[4023-5194]"
    }, {
      "left" : "for (AliasUsage aliasUsage : traversal.getAliasUsages())",
      "right" : "for (AliasUsage aliasUsage : traversal.getAliasUsages())",
      "info" : "EnhancedForStatement[4060-4159]:EnhancedForStatement[4060-4159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4117-4159]:Block[4117-4159]"
    }, {
      "left" : "aliasUsage.applyAlias();",
      "right" : "aliasUsage.applyAlias();",
      "info" : "ExpressionStatement[4127-4151]:ExpressionStatement[4127-4151]"
    }, {
      "left" : "for (Node aliasDefinition : traversal.getAliasDefinitionsInOrder())",
      "right" : "for (Node aliasDefinition : traversal.getAliasDefinitionsInOrder())",
      "info" : "EnhancedForStatement[4206-4522]:EnhancedForStatement[4206-4522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4274-4522]:Block[4274-4522]"
    }, {
      "left" : "if (aliasDefinition.getParent().isVar() &&\n            aliasDefinition.getParent().hasOneChild())",
      "right" : "if (aliasDefinition.getParent().isVar() &&\n            aliasDefinition.getParent().hasOneChild())",
      "info" : "IfStatement[4284-4514]:IfStatement[4284-4514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4382-4451]:Block[4382-4451]"
    }, {
      "left" : "aliasDefinition.getParent().detachFromParent();",
      "right" : "aliasDefinition.getParent().detachFromParent();",
      "info" : "ExpressionStatement[4394-4441]:ExpressionStatement[4394-4441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4457-4514]:Block[4457-4514]"
    }, {
      "left" : "aliasDefinition.detachFromParent();",
      "right" : "aliasDefinition.detachFromParent();",
      "info" : "ExpressionStatement[4469-4504]:ExpressionStatement[4469-4504]"
    }, {
      "left" : "for (Node scopeCall : traversal.getScopeCalls())",
      "right" : "for (Node scopeCall : traversal.getScopeCalls())",
      "info" : "EnhancedForStatement[4560-4978]:EnhancedForStatement[4560-4978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4609-4978]:Block[4609-4978]"
    }, {
      "left" : "Node expressionWithScopeCall = scopeCall.getParent();",
      "right" : "Node expressionWithScopeCall = scopeCall.getParent();",
      "info" : "VariableDeclarationStatement[4619-4672]:VariableDeclarationStatement[4619-4672]"
    }, {
      "left" : "Node scopeClosureBlock = scopeCall.getLastChild().getLastChild();",
      "right" : "Node scopeClosureBlock = scopeCall.getLastChild().getLastChild();",
      "info" : "VariableDeclarationStatement[4681-4746]:VariableDeclarationStatement[4681-4746]"
    }, {
      "left" : "scopeClosureBlock.detachFromParent();",
      "right" : "scopeClosureBlock.detachFromParent();",
      "info" : "ExpressionStatement[4755-4792]:ExpressionStatement[4755-4792]"
    }, {
      "left" : "expressionWithScopeCall.getParent().replaceChild(\n            expressionWithScopeCall,\n            scopeClosureBlock);",
      "right" : "expressionWithScopeCall.getParent().replaceChild(\n            expressionWithScopeCall,\n            scopeClosureBlock);",
      "info" : "ExpressionStatement[4801-4919]:ExpressionStatement[4801-4919]"
    }, {
      "left" : "NodeUtil.tryMergeBlock(scopeClosureBlock);",
      "right" : "NodeUtil.tryMergeBlock(scopeClosureBlock);",
      "info" : "ExpressionStatement[4928-4970]:ExpressionStatement[4928-4970]"
    }, {
      "left" : "if (traversal.getAliasUsages().size() > 0 ||\n          traversal.getAliasDefinitionsInOrder().size() > 0 ||\n          traversal.getScopeCalls().size() > 0)",
      "right" : "if (traversal.getAliasUsages().size() > 0 ||\n          traversal.getAliasDefinitionsInOrder().size() > 0 ||\n          traversal.getScopeCalls().size() > 0)",
      "info" : "IfStatement[4986-5188]:IfStatement[4986-5188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5142-5188]:Block[5142-5188]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[5152-5180]:ExpressionStatement[5152-5180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5460-5557]:Block[5460-5557]"
    }, {
      "left" : "this.aliasReference = aliasReference;",
      "right" : "this.aliasReference = aliasReference;",
      "info" : "ExpressionStatement[5468-5505]:ExpressionStatement[5468-5505]"
    }, {
      "left" : "this.aliasDefinition = aliasDefinition;",
      "right" : "this.aliasDefinition = aliasDefinition;",
      "info" : "ExpressionStatement[5512-5551]:ExpressionStatement[5512-5551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5602-5712]:Block[5602-5712]"
    }, {
      "left" : "aliasReference.getParent().replaceChild(\n          aliasReference, aliasDefinition.cloneTree());",
      "right" : "aliasReference.getParent().replaceChild(\n          aliasReference, aliasDefinition.cloneTree());",
      "info" : "ExpressionStatement[5610-5706]:ExpressionStatement[5610-5706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5915-5998]:Block[5977-6106]"
    }, {
      "left" : "this.typeReference = typeReference;",
      "right" : "this.typeReference = typeReference;",
      "info" : "ExpressionStatement[5923-5958]:ExpressionStatement[5985-6020]"
    }, {
      "left" : "this.aliasName = aliasName;",
      "right" : "this.aliasName = aliasName;",
      "info" : "ExpressionStatement[5965-5992]:ExpressionStatement[6073-6100]"
    }, {
      "left" : "typeReference.setString(aliasName);",
      "right" : "Preconditions.checkState(typeName.startsWith(aliasName));",
      "info" : "ExpressionStatement[6051-6086]:ExpressionStatement[6313-6370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7409-7454]:Block[7773-7818]"
    }, {
      "left" : "return aliasDefinitionsInOrder;",
      "right" : "return aliasDefinitionsInOrder;",
      "info" : "ReturnStatement[7417-7448]:ReturnStatement[7781-7812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7502-7535]:Block[7866-7899]"
    }, {
      "left" : "return aliasUsages;",
      "right" : "return aliasUsages;",
      "info" : "ReturnStatement[7510-7529]:ReturnStatement[7874-7893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7568-7600]:Block[7932-7964]"
    }, {
      "left" : "return scopeCalls;",
      "right" : "return scopeCalls;",
      "info" : "ReturnStatement[7576-7594]:ReturnStatement[7940-7958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7626-7657]:Block[7990-8021]"
    }, {
      "left" : "return hasErrors;",
      "right" : "return hasErrors;",
      "info" : "ReturnStatement[7634-7651]:ReturnStatement[7998-8015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7707-7817]:Block[8071-8181]"
    }, {
      "left" : "return n.isCall() &&\n          SCOPING_METHOD_NAME.equals(n.getFirstChild().getQualifiedName());",
      "right" : "return n.isCall() &&\n          SCOPING_METHOD_NAME.equals(n.getFirstChild().getQualifiedName());",
      "info" : "ReturnStatement[7715-7811]:ReturnStatement[8079-8175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7877-8139]:Block[8241-8503]"
    }, {
      "left" : "Node n = t.getCurrentNode().getParent();",
      "right" : "Node n = t.getCurrentNode().getParent();",
      "info" : "VariableDeclarationStatement[7885-7925]:VariableDeclarationStatement[8249-8289]"
    }, {
      "left" : "if (n != null && isCallToScopeMethod(n))",
      "right" : "if (n != null && isCallToScopeMethod(n))",
      "info" : "IfStatement[7932-8133]:IfStatement[8296-8497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7973-8133]:Block[8337-8497]"
    }, {
      "left" : "transformation = transformationHandler.logAliasTransformation(\n            n.getSourceFileName(), getSourceRegion(n));",
      "right" : "transformation = transformationHandler.logAliasTransformation(\n            n.getSourceFileName(), getSourceRegion(n));",
      "info" : "ExpressionStatement[7983-8101]:ExpressionStatement[8347-8465]"
    }, {
      "left" : "findAliases(t);",
      "right" : "findAliases(t);",
      "info" : "ExpressionStatement[8110-8125]:ExpressionStatement[8474-8489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8198-8487]:Block[8562-8851]"
    }, {
      "left" : "if (t.getScopeDepth() > 2)",
      "right" : "if (t.getScopeDepth() > 2)",
      "info" : "IfStatement[8206-8275]:IfStatement[8570-8639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8233-8275]:Block[8597-8639]"
    }, {
      "left" : "findNamespaceShadows(t);",
      "right" : "findNamespaceShadows(t);",
      "info" : "ExpressionStatement[8243-8267]:ExpressionStatement[8607-8631]"
    }, {
      "left" : "if (t.getScopeDepth() == 2)",
      "right" : "if (t.getScopeDepth() == 2)",
      "info" : "IfStatement[8283-8481]:IfStatement[8647-8845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8311-8481]:Block[8675-8845]"
    }, {
      "left" : "renameNamespaceShadows(t);",
      "right" : "renameNamespaceShadows(t);",
      "info" : "ExpressionStatement[8321-8347]:ExpressionStatement[8685-8711]"
    }, {
      "left" : "aliases.clear();",
      "right" : "aliases.clear();",
      "info" : "ExpressionStatement[8356-8372]:ExpressionStatement[8720-8736]"
    }, {
      "left" : "forbiddenLocals.clear();",
      "right" : "forbiddenLocals.clear();",
      "info" : "ExpressionStatement[8381-8405]:ExpressionStatement[8745-8769]"
    }, {
      "left" : "transformation = null;",
      "right" : "transformation = null;",
      "info" : "ExpressionStatement[8414-8436]:ExpressionStatement[8778-8800]"
    }, {
      "left" : "hasNamespaceShadows = false;",
      "right" : "hasNamespaceShadows = false;",
      "info" : "ExpressionStatement[8445-8473]:ExpressionStatement[8809-8837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8581-8836]:Block[8945-9200]"
    }, {
      "left" : "if (n.isFunction() && t.inGlobalScope())",
      "right" : "if (n.isFunction() && t.inGlobalScope())",
      "info" : "IfStatement[8589-8811]:IfStatement[8953-9175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8630-8811]:Block[8994-9175]"
    }, {
      "left" : "if (parent == null || !isCallToScopeMethod(parent))",
      "right" : "if (parent == null || !isCallToScopeMethod(parent))",
      "info" : "IfStatement[8716-8803]:IfStatement[9080-9167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8768-8803]:Block[9132-9167]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8780-8793]:ReturnStatement[9144-9157]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8818-8830]:ReturnStatement[9182-9194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8910-9465]:Block[9274-9829]"
    }, {
      "left" : "Node testNode = n;",
      "right" : "Node testNode = n;",
      "info" : "VariableDeclarationStatement[8918-8936]:VariableDeclarationStatement[9282-9300]"
    }, {
      "left" : "Node next = null;",
      "right" : "Node next = null;",
      "info" : "VariableDeclarationStatement[8943-8960]:VariableDeclarationStatement[9307-9324]"
    }, {
      "left" : "for (; next != null || testNode.isScript())",
      "right" : "for (; next != null || testNode.isScript())",
      "info" : "ForStatement[8967-9097]:ForStatement[9331-9461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9012-9097]:Block[9376-9461]"
    }, {
      "left" : "next = testNode.getNext();",
      "right" : "next = testNode.getNext();",
      "info" : "ExpressionStatement[9022-9048]:ExpressionStatement[9386-9412]"
    }, {
      "left" : "testNode = testNode.getParent();",
      "right" : "testNode = testNode.getParent();",
      "info" : "ExpressionStatement[9057-9089]:ExpressionStatement[9421-9453]"
    }, {
      "left" : "int endLine = next == null ? Integer.MAX_VALUE : next.getLineno();",
      "right" : "int endLine = next == null ? Integer.MAX_VALUE : next.getLineno();",
      "info" : "VariableDeclarationStatement[9105-9171]:VariableDeclarationStatement[9469-9535]"
    }, {
      "left" : "int endChar = next == null ? Integer.MAX_VALUE : next.getCharno();",
      "right" : "int endChar = next == null ? Integer.MAX_VALUE : next.getCharno();",
      "info" : "VariableDeclarationStatement[9178-9244]:VariableDeclarationStatement[9542-9608]"
    }, {
      "left" : "SourcePosition<AliasTransformation> pos =\n          new SourcePosition<AliasTransformation>() {};",
      "right" : "SourcePosition<AliasTransformation> pos =\n          new SourcePosition<AliasTransformation>() {};",
      "info" : "VariableDeclarationStatement[9251-9348]:VariableDeclarationStatement[9615-9712]"
    }, {
      "left" : "pos.setPositionInformation(\n          n.getLineno(), n.getCharno(), endLine, endChar);",
      "right" : "pos.setPositionInformation(\n          n.getLineno(), n.getCharno(), endLine, endChar);",
      "info" : "ExpressionStatement[9355-9441]:ExpressionStatement[9719-9805]"
    }, {
      "left" : "return pos;",
      "right" : "return pos;",
      "info" : "ReturnStatement[9448-9459]:ReturnStatement[9812-9823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9567-9655]:Block[9931-10019]"
    }, {
      "left" : "compiler.report(t.makeError(n, error, arguments));",
      "right" : "compiler.report(t.makeError(n, error, arguments));",
      "info" : "ExpressionStatement[9575-9625]:ExpressionStatement[9939-9989]"
    }, {
      "left" : "hasErrors = true;",
      "right" : "hasErrors = true;",
      "info" : "ExpressionStatement[9632-9649]:ExpressionStatement[9996-10013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9703-11005]:Block[10067-11369]"
    }, {
      "left" : "Scope scope = t.getScope();",
      "right" : "Scope scope = t.getScope();",
      "info" : "VariableDeclarationStatement[9711-9738]:VariableDeclarationStatement[10075-10102]"
    }, {
      "left" : "for (Var v : scope.getVarIterable())",
      "right" : "for (Var v : scope.getVarIterable())",
      "info" : "EnhancedForStatement[9745-10999]:EnhancedForStatement[10109-11363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9782-10999]:Block[10146-11363]"
    }, {
      "left" : "Node n = v.getNode();",
      "right" : "Node n = v.getNode();",
      "info" : "VariableDeclarationStatement[9792-9813]:VariableDeclarationStatement[10156-10177]"
    }, {
      "left" : "int type = n.getType();",
      "right" : "int type = n.getType();",
      "info" : "VariableDeclarationStatement[9822-9845]:VariableDeclarationStatement[10186-10209]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[9854-9882]:VariableDeclarationStatement[10218-10246]"
    }, {
      "left" : "if (parent.isVar() &&\n            n.hasChildren() && n.getFirstChild().isQualifiedName())",
      "right" : "if (parent.isVar() &&\n            n.hasChildren() && n.getFirstChild().isQualifiedName())",
      "info" : "IfStatement[9891-10991]:IfStatement[10255-11355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9981-10547]:Block[10345-10911]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[9993-10021]:VariableDeclarationStatement[10357-10385]"
    }, {
      "left" : "Var aliasVar = scope.getVar(name);",
      "right" : "Var aliasVar = scope.getVar(name);",
      "info" : "VariableDeclarationStatement[10032-10066]:VariableDeclarationStatement[10396-10430]"
    }, {
      "left" : "aliases.put(name, aliasVar);",
      "right" : "aliases.put(name, aliasVar);",
      "info" : "ExpressionStatement[10077-10105]:ExpressionStatement[10441-10469]"
    }, {
      "left" : "String qualifiedName =\n              aliasVar.getInitialValue().getQualifiedName();",
      "right" : "String qualifiedName =\n              aliasVar.getInitialValue().getQualifiedName();",
      "info" : "VariableDeclarationStatement[10117-10200]:VariableDeclarationStatement[10481-10564]"
    }, {
      "left" : "transformation.addAlias(name, qualifiedName);",
      "right" : "transformation.addAlias(name, qualifiedName);",
      "info" : "ExpressionStatement[10211-10256]:ExpressionStatement[10575-10620]"
    }, {
      "left" : "int rootIndex = qualifiedName.indexOf(\".\");",
      "right" : "int rootIndex = qualifiedName.indexOf(\".\");",
      "info" : "VariableDeclarationStatement[10268-10311]:VariableDeclarationStatement[10632-10675]"
    }, {
      "left" : "if (rootIndex != -1)",
      "right" : "if (rootIndex != -1)",
      "info" : "IfStatement[10322-10537]:IfStatement[10686-10901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10343-10537]:Block[10707-10901]"
    }, {
      "left" : "String qNameRoot = qualifiedName.substring(0, rootIndex);",
      "right" : "String qNameRoot = qualifiedName.substring(0, rootIndex);",
      "info" : "VariableDeclarationStatement[10357-10414]:VariableDeclarationStatement[10721-10778]"
    }, {
      "left" : "if (!aliases.containsKey(qNameRoot))",
      "right" : "if (!aliases.containsKey(qNameRoot))",
      "info" : "IfStatement[10427-10525]:IfStatement[10791-10889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10464-10525]:Block[10828-10889]"
    }, {
      "left" : "forbiddenLocals.add(qNameRoot);",
      "right" : "forbiddenLocals.add(qNameRoot);",
      "info" : "ExpressionStatement[10480-10511]:ExpressionStatement[10844-10875]"
    }, {
      "left" : "if (v.isBleedingFunction())",
      "right" : "if (v.isBleedingFunction())",
      "info" : "IfStatement[10553-10991]:IfStatement[10917-11355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10581-10693]:Block[10945-11057]"
    }, {
      "left" : "if (parent.getType() == Token.LP)",
      "right" : "if (parent.getType() == Token.LP)",
      "info" : "IfStatement[10699-10991]:IfStatement[11063-11355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10733-10836]:Block[11097-11200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10842-10991]:Block[11206-11355]"
    }, {
      "left" : "report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());",
      "right" : "report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());",
      "info" : "ExpressionStatement[10925-10981]:ExpressionStatement[11289-11345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11128-11399]:Block[11492-11763]"
    }, {
      "left" : "if (hasNamespaceShadows)",
      "right" : "if (hasNamespaceShadows)",
      "info" : "IfStatement[11136-11186]:IfStatement[11500-11550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11161-11186]:Block[11525-11550]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11171-11178]:ReturnStatement[11535-11542]"
    }, {
      "left" : "Scope scope = t.getScope();",
      "right" : "Scope scope = t.getScope();",
      "info" : "VariableDeclarationStatement[11194-11221]:VariableDeclarationStatement[11558-11585]"
    }, {
      "left" : "for (Var v : scope.getVarIterable())",
      "right" : "for (Var v : scope.getVarIterable())",
      "info" : "EnhancedForStatement[11228-11393]:EnhancedForStatement[11592-11757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11265-11393]:Block[11629-11757]"
    }, {
      "left" : "if (forbiddenLocals.contains(v.getName()))",
      "right" : "if (forbiddenLocals.contains(v.getName()))",
      "info" : "IfStatement[11275-11385]:IfStatement[11639-11749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11318-11385]:Block[11682-11749]"
    }, {
      "left" : "hasNamespaceShadows = true;",
      "right" : "hasNamespaceShadows = true;",
      "info" : "ExpressionStatement[11330-11357]:ExpressionStatement[11694-11721]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11368-11375]:ReturnStatement[11732-11739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11628-12143]:Block[11992-12507]"
    }, {
      "left" : "if (hasNamespaceShadows)",
      "right" : "if (hasNamespaceShadows)",
      "info" : "IfStatement[11636-12137]:IfStatement[12000-12501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11661-12137]:Block[12025-12501]"
    }, {
      "left" : "MakeDeclaredNamesUnique.Renamer renamer =\n            new MakeDeclaredNamesUnique.WhitelistedRenamer(\n                new MakeDeclaredNamesUnique.ContextualRenamer(),\n                forbiddenLocals);",
      "right" : "MakeDeclaredNamesUnique.Renamer renamer =\n            new MakeDeclaredNamesUnique.WhitelistedRenamer(\n                new MakeDeclaredNamesUnique.ContextualRenamer(),\n                forbiddenLocals);",
      "info" : "VariableDeclarationStatement[11671-11871]:VariableDeclarationStatement[12035-12235]"
    }, {
      "left" : "for (String s : forbiddenLocals)",
      "right" : "for (String s : forbiddenLocals)",
      "info" : "EnhancedForStatement[11880-11962]:EnhancedForStatement[12244-12326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11913-11962]:Block[12277-12326]"
    }, {
      "left" : "renamer.addDeclaredName(s);",
      "right" : "renamer.addDeclaredName(s);",
      "info" : "ExpressionStatement[11925-11952]:ExpressionStatement[12289-12316]"
    }, {
      "left" : "MakeDeclaredNamesUnique uniquifier =\n            new MakeDeclaredNamesUnique(renamer);",
      "right" : "MakeDeclaredNamesUnique uniquifier =\n            new MakeDeclaredNamesUnique(renamer);",
      "info" : "VariableDeclarationStatement[11971-12057]:VariableDeclarationStatement[12335-12421]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, t.getScopeRoot(), uniquifier);",
      "right" : "NodeTraversal.traverse(compiler, t.getScopeRoot(), uniquifier);",
      "info" : "ExpressionStatement[12066-12129]:ExpressionStatement[12430-12493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12218-13066]:Block[12582-13430]"
    }, {
      "left" : "if (preprocessorSymbolTable != null)",
      "right" : "if (preprocessorSymbolTable != null)",
      "info" : "IfStatement[12226-12337]:IfStatement[12590-12701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12263-12337]:Block[12627-12701]"
    }, {
      "left" : "preprocessorSymbolTable.addReference(n.getFirstChild());",
      "right" : "preprocessorSymbolTable.addReference(n.getFirstChild());",
      "info" : "ExpressionStatement[12273-12329]:ExpressionStatement[12637-12693]"
    }, {
      "left" : "if (!parent.isExprResult())",
      "right" : "if (!parent.isExprResult())",
      "info" : "IfStatement[12344-12431]:IfStatement[12708-12795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12372-12431]:Block[12736-12795]"
    }, {
      "left" : "report(t, n, GOOG_SCOPE_USED_IMPROPERLY);",
      "right" : "report(t, n, GOOG_SCOPE_USED_IMPROPERLY);",
      "info" : "ExpressionStatement[12382-12423]:ExpressionStatement[12746-12787]"
    }, {
      "left" : "if (n.getChildCount() != 2)",
      "right" : "if (n.getChildCount() != 2)",
      "info" : "IfStatement[12438-13060]:IfStatement[12802-13424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12466-12680]:Block[12830-13044]"
    }, {
      "left" : "report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS);",
      "right" : "report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS);",
      "info" : "ExpressionStatement[12628-12672]:ExpressionStatement[12992-13036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12686-13060]:Block[13050-13424]"
    }, {
      "left" : "Node anonymousFnNode = n.getChildAtIndex(1);",
      "right" : "Node anonymousFnNode = n.getChildAtIndex(1);",
      "info" : "VariableDeclarationStatement[12696-12740]:VariableDeclarationStatement[13060-13104]"
    }, {
      "left" : "if (!anonymousFnNode.isFunction() ||\n            NodeUtil.getFunctionName(anonymousFnNode) != null ||\n            NodeUtil.getFunctionParameters(anonymousFnNode).hasChildren())",
      "right" : "if (!anonymousFnNode.isFunction() ||\n            NodeUtil.getFunctionName(anonymousFnNode) != null ||\n            NodeUtil.getFunctionParameters(anonymousFnNode).hasChildren())",
      "info" : "IfStatement[12749-13052]:IfStatement[13113-13416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12926-13006]:Block[13290-13370]"
    }, {
      "left" : "report(t, anonymousFnNode, GOOG_SCOPE_HAS_BAD_PARAMETERS);",
      "right" : "report(t, anonymousFnNode, GOOG_SCOPE_HAS_BAD_PARAMETERS);",
      "info" : "ExpressionStatement[12938-12996]:ExpressionStatement[13302-13360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13012-13052]:Block[13376-13416]"
    }, {
      "left" : "scopeCalls.add(n);",
      "right" : "scopeCalls.add(n);",
      "info" : "ExpressionStatement[13024-13042]:ExpressionStatement[13388-13406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13142-15313]:Block[13506-15677]"
    }, {
      "left" : "if (isCallToScopeMethod(n))",
      "right" : "if (isCallToScopeMethod(n))",
      "info" : "IfStatement[13150-13235]:IfStatement[13514-13599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13178-13235]:Block[13542-13599]"
    }, {
      "left" : "validateScopeCall(t, n, n.getParent());",
      "right" : "validateScopeCall(t, n, n.getParent());",
      "info" : "ExpressionStatement[13188-13227]:ExpressionStatement[13552-13591]"
    }, {
      "left" : "if (t.getScopeDepth() < 2)",
      "right" : "if (t.getScopeDepth() < 2)",
      "info" : "IfStatement[13243-13295]:IfStatement[13607-13659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13270-13295]:Block[13634-13659]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[13280-13287]:ReturnStatement[13644-13651]"
    }, {
      "left" : "int type = n.getType();",
      "right" : "int type = n.getType();",
      "info" : "VariableDeclarationStatement[13303-13326]:VariableDeclarationStatement[13667-13690]"
    }, {
      "left" : "Var aliasVar = null;",
      "right" : "Var aliasVar = null;",
      "info" : "VariableDeclarationStatement[13333-13353]:VariableDeclarationStatement[13697-13717]"
    }, {
      "left" : "if (type == Token.NAME)",
      "right" : "if (type == Token.NAME)",
      "info" : "IfStatement[13360-13603]:IfStatement[13724-13967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13384-13603]:Block[13748-13967]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[13394-13422]:VariableDeclarationStatement[13758-13786]"
    }, {
      "left" : "Var lexicalVar = t.getScope().getVar(n.getString());",
      "right" : "Var lexicalVar = t.getScope().getVar(n.getString());",
      "info" : "VariableDeclarationStatement[13431-13483]:VariableDeclarationStatement[13795-13847]"
    }, {
      "left" : "if (lexicalVar != null && lexicalVar == aliases.get(name))",
      "right" : "if (lexicalVar != null && lexicalVar == aliases.get(name))",
      "info" : "IfStatement[13492-13595]:IfStatement[13856-13959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13551-13595]:Block[13915-13959]"
    }, {
      "left" : "aliasVar = lexicalVar;",
      "right" : "aliasVar = lexicalVar;",
      "info" : "ExpressionStatement[13563-13585]:ExpressionStatement[13927-13949]"
    }, {
      "left" : "if (t.getScopeDepth() == 2)",
      "right" : "if (t.getScopeDepth() == 2)",
      "info" : "IfStatement[13668-14349]:IfStatement[14032-14713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13696-14349]:Block[14060-14713]"
    }, {
      "left" : "if (aliasVar != null && NodeUtil.isLValue(n))",
      "right" : "if (aliasVar != null && NodeUtil.isLValue(n))",
      "info" : "IfStatement[13706-14064]:IfStatement[14070-14428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13752-14064]:Block[14116-14428]"
    }, {
      "left" : "if (aliasVar.getNode() == n)",
      "right" : "if (aliasVar.getNode() == n)",
      "info" : "IfStatement[13764-14054]:IfStatement[14128-14418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13793-13966]:Block[14157-14330]"
    }, {
      "left" : "aliasDefinitionsInOrder.add(n);",
      "right" : "aliasDefinitionsInOrder.add(n);",
      "info" : "ExpressionStatement[13807-13838]:ExpressionStatement[14171-14202]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[13947-13954]:ReturnStatement[14311-14318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13972-14054]:Block[14336-14418]"
    }, {
      "left" : "report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());",
      "right" : "report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());",
      "info" : "ExpressionStatement[13986-14042]:ExpressionStatement[14350-14406]"
    }, {
      "left" : "if (type == Token.RETURN)",
      "right" : "if (type == Token.RETURN)",
      "info" : "IfStatement[14074-14341]:IfStatement[14438-14705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14100-14159]:Block[14464-14523]"
    }, {
      "left" : "report(t, n, GOOG_SCOPE_USES_RETURN);",
      "right" : "report(t, n, GOOG_SCOPE_USES_RETURN);",
      "info" : "ExpressionStatement[14112-14149]:ExpressionStatement[14476-14513]"
    }, {
      "left" : "if (type == Token.THIS)",
      "right" : "if (type == Token.THIS)",
      "info" : "IfStatement[14165-14341]:IfStatement[14529-14705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14189-14252]:Block[14553-14616]"
    }, {
      "left" : "report(t, n, GOOG_SCOPE_REFERENCES_THIS);",
      "right" : "report(t, n, GOOG_SCOPE_REFERENCES_THIS);",
      "info" : "ExpressionStatement[14201-14242]:ExpressionStatement[14565-14606]"
    }, {
      "left" : "if (type == Token.THROW)",
      "right" : "if (type == Token.THROW)",
      "info" : "IfStatement[14258-14341]:IfStatement[14622-14705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14283-14341]:Block[14647-14705]"
    }, {
      "left" : "report(t, n, GOOG_SCOPE_USES_THROW);",
      "right" : "report(t, n, GOOG_SCOPE_USES_THROW);",
      "info" : "ExpressionStatement[14295-14331]:ExpressionStatement[14659-14695]"
    }, {
      "left" : "if (t.getScopeDepth() >= 2)",
      "right" : "if (t.getScopeDepth() >= 2)",
      "info" : "IfStatement[14422-15307]:IfStatement[14786-15671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14450-15307]:Block[14814-15671]"
    }, {
      "left" : "if (aliasVar != null)",
      "right" : "if (aliasVar != null)",
      "info" : "IfStatement[14510-15064]:IfStatement[14874-15428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14532-15064]:Block[14896-15428]"
    }, {
      "left" : "Node aliasedNode = aliasVar.getInitialValue();",
      "right" : "Node aliasedNode = aliasVar.getInitialValue();",
      "info" : "VariableDeclarationStatement[14948-14994]:VariableDeclarationStatement[15312-15358]"
    }, {
      "left" : "aliasUsages.add(new AliasedNode(n, aliasedNode));",
      "right" : "aliasUsages.add(new AliasedNode(n, aliasedNode));",
      "info" : "ExpressionStatement[15005-15054]:ExpressionStatement[15369-15418]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[15074-15108]:VariableDeclarationStatement[15438-15472]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[15117-15239]:IfStatement[15481-15603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15135-15239]:Block[15499-15603]"
    }, {
      "left" : "for (Node node : info.getTypeNodes())",
      "right" : "for (Node node : info.getTypeNodes())",
      "info" : "EnhancedForStatement[15147-15229]:EnhancedForStatement[15511-15593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15185-15229]:Block[15549-15593]"
    }, {
      "left" : "fixTypeNode(node);",
      "right" : "fixTypeNode(node);",
      "info" : "ExpressionStatement[15199-15217]:ExpressionStatement[15563-15581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15359-16026]:Block[15723-16354]"
    }, {
      "left" : "if (typeNode.isString())",
      "right" : "if (typeNode.isString())",
      "info" : "IfStatement[15367-15880]:IfStatement[15731-16208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15392-15880]:Block[15756-16208]"
    }, {
      "left" : "String name = typeNode.getString();",
      "right" : "String name = typeNode.getString();",
      "info" : "VariableDeclarationStatement[15402-15437]:VariableDeclarationStatement[15766-15801]"
    }, {
      "left" : "int endIndex = name.indexOf('.');",
      "right" : "int endIndex = name.indexOf('.');",
      "info" : "VariableDeclarationStatement[15446-15479]:VariableDeclarationStatement[15810-15843]"
    }, {
      "left" : "if (endIndex == -1)",
      "right" : "if (endIndex == -1)",
      "info" : "IfStatement[15488-15555]:IfStatement[15852-15919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15508-15555]:Block[15872-15919]"
    }, {
      "left" : "endIndex = name.length();",
      "right" : "endIndex = name.length();",
      "info" : "ExpressionStatement[15520-15545]:ExpressionStatement[15884-15909]"
    }, {
      "left" : "String baseName = name.substring(0, endIndex);",
      "right" : "String baseName = name.substring(0, endIndex);",
      "info" : "VariableDeclarationStatement[15564-15610]:VariableDeclarationStatement[15928-15974]"
    }, {
      "left" : "Var aliasVar = aliases.get(baseName);",
      "right" : "Var aliasVar = aliases.get(baseName);",
      "info" : "VariableDeclarationStatement[15619-15656]:VariableDeclarationStatement[15983-16020]"
    }, {
      "left" : "if (aliasVar != null)",
      "right" : "if (aliasVar != null)",
      "info" : "IfStatement[15665-15872]:IfStatement[16029-16200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15687-15872]:Block[16051-16200]"
    }, {
      "left" : "Node aliasedNode = aliasVar.getInitialValue();",
      "right" : "Node aliasedNode = aliasVar.getInitialValue();",
      "info" : "VariableDeclarationStatement[15699-15745]:VariableDeclarationStatement[16063-16109]"
    }, {
      "left" : "aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));",
      "right" : "aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode, baseName));",
      "info" : "ExpressionStatement[15756-15862]:ExpressionStatement[16120-16190]"
    }, {
      "left" : "for (Node child = typeNode.getFirstChild(); child != null;\n           child = child.getNext())",
      "right" : "for (Node child = typeNode.getFirstChild(); child != null;\n           child = child.getNext())",
      "info" : "ForStatement[15888-16020]:ForStatement[16216-16348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15983-16020]:Block[16311-16348]"
    }, {
      "left" : "fixTypeNode(child);",
      "right" : "fixTypeNode(child);",
      "info" : "ExpressionStatement[15993-16012]:ExpressionStatement[16321-16340]"
    } ]
  },
  "interFileMappings" : { }
}