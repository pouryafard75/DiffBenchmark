{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static Logger logger = LoggerFactory.getLogger(JpaPersistentStatefulSessionTest.class);",
      "right" : "private static Logger logger = LoggerFactory.getLogger(JpaPersistentStatefulSessionTest.class);",
      "info" : "FieldDeclaration[2929-3024]:FieldDeclaration[2515-2610]"
    }, {
      "left" : "private HashMap<String, Object> context;",
      "right" : "private HashMap<String, Object> context;",
      "info" : "FieldDeclaration[3034-3074]:FieldDeclaration[2620-2660]"
    }, {
      "left" : "private Environment env;",
      "right" : "private Environment env;",
      "info" : "FieldDeclaration[3079-3103]:FieldDeclaration[2665-2689]"
    }, {
      "left" : "private boolean locking;",
      "right" : "private boolean locking;",
      "info" : "FieldDeclaration[3108-3132]:FieldDeclaration[2694-2718]"
    }, {
      "left" : "public static Collection<Object[]> persistence()",
      "right" : "public static Collection<Object[]> persistence()",
      "info" : "MethodDeclaration[3138-3407]:MethodDeclaration[2724-2993]"
    }, {
      "left" : "public JpaPersistentStatefulSessionTest(String locking)",
      "right" : "public JpaPersistentStatefulSessionTest(String locking)",
      "info" : "MethodDeclaration[3418-3542]:MethodDeclaration[3004-3128]"
    }, {
      "left" : "public void setUp() throws Exception",
      "right" : "public void setUp() throws Exception",
      "info" : "MethodDeclaration[3552-3845]:MethodDeclaration[3138-3431]"
    }, {
      "left" : "public void tearDown() throws Exception",
      "right" : "public void tearDown() throws Exception",
      "info" : "MethodDeclaration[3859-3959]:MethodDeclaration[3445-3545]"
    }, {
      "left" : "public void testFactHandleSerialization()",
      "right" : "public void testFactHandleSerialization()",
      "info" : "MethodDeclaration[3966-6024]:MethodDeclaration[3552-5610]"
    }, {
      "left" : "public void testLocalTransactionPerStatement()",
      "right" : "public void testLocalTransactionPerStatement()",
      "info" : "MethodDeclaration[6034-7291]:MethodDeclaration[5620-6877]"
    }, {
      "left" : "public void testUserTransactions() throws Exception",
      "right" : "public void testUserTransactions() throws Exception",
      "info" : "MethodDeclaration[7297-10348]:MethodDeclaration[6883-9934]"
    }, {
      "left" : "public void testInterceptor()",
      "right" : "public void testInterceptor()",
      "info" : "MethodDeclaration[10354-11897]:MethodDeclaration[9940-11483]"
    }, {
      "left" : "public void testSetFocus()",
      "right" : "public void testSetFocus()",
      "info" : "MethodDeclaration[11907-13287]:MethodDeclaration[14037-15417]"
    }, {
      "left" : "public void testSharedReferences()",
      "right" : "public void testSharedReferences()",
      "info" : "MethodDeclaration[13297-14177]:MethodDeclaration[15427-16307]"
    }, {
      "left" : "public void testMergeConfig()",
      "right" : "public void testMergeConfig()",
      "info" : "MethodDeclaration[14183-14948]:MethodDeclaration[16313-17078]"
    }, {
      "left" : "public void testCreateAndDestroySession()",
      "right" : "public void testCreateAndDestroySession()",
      "info" : "MethodDeclaration[14954-16469]:MethodDeclaration[17084-18599]"
    }, {
      "left" : "public void testCreateAndDestroyNonPersistentSession()",
      "right" : "public void testCreateAndDestroyNonPersistentSession()",
      "info" : "MethodDeclaration[16475-17925]:MethodDeclaration[18605-20055]"
    }, {
      "left" : "public void testFromNodeWithModifiedCollection()",
      "right" : "public void testFromNodeWithModifiedCollection()",
      "info" : "MethodDeclaration[17931-19582]:MethodDeclaration[20061-21712]"
    } ],
    "mappings" : [
 {
      "left" : "@Parameters(name=\"{0}\")",
      "right" : "@Parameters(name=\"{0}\")",
      "info" : "NormalAnnotation[3138-3161]:NormalAnnotation[2724-2747]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3166-3172]:Modifier[2752-2758]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3173-3179]:Modifier[2759-2765]"
    }, {
      "left" : "Collection<Object[]>",
      "right" : "Collection<Object[]>",
      "info" : "ParameterizedType[3180-3200]:ParameterizedType[2766-2786]"
    }, {
      "left" : "persistence",
      "right" : "persistence",
      "info" : "SimpleName[3201-3212]:SimpleName[2787-2798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3215-3407]:Block[2801-2993]"
    }, {
      "left" : "Object[][] locking = new Object[][] { \n                { OPTIMISTIC_LOCKING },\n                { PESSIMISTIC_LOCKING }\n                };",
      "right" : "Object[][] locking = new Object[][] { \n                { OPTIMISTIC_LOCKING },\n                { PESSIMISTIC_LOCKING }\n                };",
      "info" : "VariableDeclarationStatement[3225-3362]:VariableDeclarationStatement[2811-2948]"
    }, {
      "left" : "return Arrays.asList(locking);",
      "right" : "return Arrays.asList(locking);",
      "info" : "ReturnStatement[3371-3401]:ReturnStatement[2957-2987]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3418-3424]:Modifier[3004-3010]"
    }, {
      "left" : "JpaPersistentStatefulSessionTest",
      "right" : "JpaPersistentStatefulSessionTest",
      "info" : "SimpleName[3425-3457]:SimpleName[3011-3043]"
    }, {
      "left" : "String locking",
      "right" : "String locking",
      "info" : "SingleVariableDeclaration[3458-3472]:SingleVariableDeclaration[3044-3058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3474-3542]:Block[3060-3128]"
    }, {
      "left" : "this.locking = PESSIMISTIC_LOCKING.equals(locking);",
      "right" : "this.locking = PESSIMISTIC_LOCKING.equals(locking);",
      "info" : "ExpressionStatement[3485-3536]:ExpressionStatement[3071-3122]"
    }, {
      "left" : "@Before",
      "right" : "@Before",
      "info" : "MarkerAnnotation[3552-3559]:MarkerAnnotation[3138-3145]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3564-3570]:Modifier[3150-3156]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3571-3575]:PrimitiveType[3157-3161]"
    }, {
      "left" : "setUp",
      "right" : "setUp",
      "info" : "SimpleName[3576-3581]:SimpleName[3162-3167]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[3591-3600]:SimpleType[3177-3186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3601-3845]:Block[3187-3431]"
    }, {
      "left" : "context = PersistenceUtil.setupWithPoolingDataSource(DROOLS_PERSISTENCE_UNIT_NAME);",
      "right" : "context = PersistenceUtil.setupWithPoolingDataSource(DROOLS_PERSISTENCE_UNIT_NAME);",
      "info" : "ExpressionStatement[3611-3694]:ExpressionStatement[3197-3280]"
    }, {
      "left" : "env = createEnvironment(context);",
      "right" : "env = createEnvironment(context);",
      "info" : "ExpressionStatement[3703-3736]:ExpressionStatement[3289-3322]"
    }, {
      "left" : "if( locking)",
      "right" : "if( locking)",
      "info" : "IfStatement[3745-3839]:IfStatement[3331-3425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3759-3839]:Block[3345-3425]"
    }, {
      "left" : "env.set(EnvironmentName.USE_PESSIMISTIC_LOCKING, true);",
      "right" : "env.set(EnvironmentName.USE_PESSIMISTIC_LOCKING, true);",
      "info" : "ExpressionStatement[3774-3829]:ExpressionStatement[3360-3415]"
    }, {
      "left" : "@After",
      "right" : "@After",
      "info" : "MarkerAnnotation[3859-3865]:MarkerAnnotation[3445-3451]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3870-3876]:Modifier[3456-3462]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3877-3881]:PrimitiveType[3463-3467]"
    }, {
      "left" : "tearDown",
      "right" : "tearDown",
      "info" : "SimpleName[3882-3890]:SimpleName[3468-3476]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[3900-3909]:SimpleType[3486-3495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3910-3959]:Block[3496-3545]"
    }, {
      "left" : "PersistenceUtil.cleanUp(context);",
      "right" : "PersistenceUtil.cleanUp(context);",
      "info" : "ExpressionStatement[3920-3953]:ExpressionStatement[3506-3539]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[3966-3971]:MarkerAnnotation[3552-3557]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3976-3982]:Modifier[3562-3568]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3983-3987]:PrimitiveType[3569-3573]"
    }, {
      "left" : "testFactHandleSerialization",
      "right" : "testFactHandleSerialization",
      "info" : "SimpleName[3988-4015]:SimpleName[3574-3601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4018-6024]:Block[3604-5610]"
    }, {
      "left" : "String str = \"\";",
      "right" : "String str = \"\";",
      "info" : "VariableDeclarationStatement[4028-4044]:VariableDeclarationStatement[3614-3630]"
    }, {
      "left" : "str += \"package org.kie.test\\n\";",
      "right" : "str += \"package org.kie.test\\n\";",
      "info" : "ExpressionStatement[4053-4085]:ExpressionStatement[3639-3671]"
    }, {
      "left" : "str += \"import java.util.concurrent.atomic.AtomicInteger\\n\";",
      "right" : "str += \"import java.util.concurrent.atomic.AtomicInteger\\n\";",
      "info" : "ExpressionStatement[4094-4154]:ExpressionStatement[3680-3740]"
    }, {
      "left" : "str += \"global java.util.List list\\n\";",
      "right" : "str += \"global java.util.List list\\n\";",
      "info" : "ExpressionStatement[4163-4201]:ExpressionStatement[3749-3787]"
    }, {
      "left" : "str += \"rule rule1\\n\";",
      "right" : "str += \"rule rule1\\n\";",
      "info" : "ExpressionStatement[4210-4232]:ExpressionStatement[3796-3818]"
    }, {
      "left" : "str += \"when\\n\";",
      "right" : "str += \"when\\n\";",
      "info" : "ExpressionStatement[4241-4257]:ExpressionStatement[3827-3843]"
    }, {
      "left" : "str += \" $i: AtomicInteger(intValue > 0)\\n\";",
      "right" : "str += \" $i: AtomicInteger(intValue > 0)\\n\";",
      "info" : "ExpressionStatement[4266-4310]:ExpressionStatement[3852-3896]"
    }, {
      "left" : "str += \"then\\n\";",
      "right" : "str += \"then\\n\";",
      "info" : "ExpressionStatement[4319-4335]:ExpressionStatement[3905-3921]"
    }, {
      "left" : "str += \" list.add( $i );\\n\";",
      "right" : "str += \" list.add( $i );\\n\";",
      "info" : "ExpressionStatement[4344-4372]:ExpressionStatement[3930-3958]"
    }, {
      "left" : "str += \"end\\n\";",
      "right" : "str += \"end\\n\";",
      "info" : "ExpressionStatement[4381-4396]:ExpressionStatement[3967-3982]"
    }, {
      "left" : "str += \"\\n\";",
      "right" : "str += \"\\n\";",
      "info" : "ExpressionStatement[4405-4417]:ExpressionStatement[3991-4003]"
    }, {
      "left" : "KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();",
      "right" : "KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();",
      "info" : "VariableDeclarationStatement[4427-4501]:VariableDeclarationStatement[4013-4087]"
    }, {
      "left" : "kbuilder.add( ResourceFactory.newByteArrayResource( str.getBytes() ),\n                      ResourceType.DRL );",
      "right" : "kbuilder.add( ResourceFactory.newByteArrayResource( str.getBytes() ),\n                      ResourceType.DRL );",
      "info" : "ExpressionStatement[4510-4621]:ExpressionStatement[4096-4207]"
    }, {
      "left" : "KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();",
      "right" : "KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();",
      "info" : "VariableDeclarationStatement[4630-4692]:VariableDeclarationStatement[4216-4278]"
    }, {
      "left" : "if ( kbuilder.hasErrors())",
      "right" : "if ( kbuilder.hasErrors())",
      "info" : "IfStatement[4702-4794]:IfStatement[4288-4380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4730-4794]:Block[4316-4380]"
    }, {
      "left" : "fail( kbuilder.getErrors().toString() );",
      "right" : "fail( kbuilder.getErrors().toString() );",
      "info" : "ExpressionStatement[4744-4784]:ExpressionStatement[4330-4370]"
    }, {
      "left" : "kbase.addKnowledgePackages( kbuilder.getKnowledgePackages() );",
      "right" : "kbase.addKnowledgePackages( kbuilder.getKnowledgePackages() );",
      "info" : "ExpressionStatement[4804-4866]:ExpressionStatement[4390-4452]"
    }, {
      "left" : "StatefulKnowledgeSession ksession = JPAKnowledgeService.newStatefulKnowledgeSession( kbase, null, env );",
      "right" : "StatefulKnowledgeSession ksession = JPAKnowledgeService.newStatefulKnowledgeSession( kbase, null, env );",
      "info" : "VariableDeclarationStatement[4876-4980]:VariableDeclarationStatement[4462-4566]"
    }, {
      "left" : "List<?> list = new ArrayList<Object>();",
      "right" : "List<?> list = new ArrayList<Object>();",
      "info" : "VariableDeclarationStatement[4989-5028]:VariableDeclarationStatement[4575-4614]"
    }, {
      "left" : "ksession.setGlobal( \"list\",\n                            list );",
      "right" : "ksession.setGlobal( \"list\",\n                            list );",
      "info" : "ExpressionStatement[5038-5101]:ExpressionStatement[4624-4687]"
    }, {
      "left" : "AtomicInteger value = new AtomicInteger(4);",
      "right" : "AtomicInteger value = new AtomicInteger(4);",
      "info" : "VariableDeclarationStatement[5111-5154]:VariableDeclarationStatement[4697-4740]"
    }, {
      "left" : "FactHandle atomicFH = ksession.insert( value );",
      "right" : "FactHandle atomicFH = ksession.insert( value );",
      "info" : "VariableDeclarationStatement[5163-5210]:VariableDeclarationStatement[4749-4796]"
    }, {
      "left" : "ksession.fireAllRules();",
      "right" : "ksession.fireAllRules();",
      "info" : "ExpressionStatement[5220-5244]:ExpressionStatement[4806-4830]"
    }, {
      "left" : "assertEquals( 1,\n                      list.size() );",
      "right" : "assertEquals( 1,\n                      list.size() );",
      "info" : "ExpressionStatement[5254-5307]:ExpressionStatement[4840-4893]"
    }, {
      "left" : "value.addAndGet(1);",
      "right" : "value.addAndGet(1);",
      "info" : "ExpressionStatement[5317-5336]:ExpressionStatement[4903-4922]"
    }, {
      "left" : "ksession.update(atomicFH, value);",
      "right" : "ksession.update(atomicFH, value);",
      "info" : "ExpressionStatement[5345-5378]:ExpressionStatement[4931-4964]"
    }, {
      "left" : "ksession.fireAllRules();",
      "right" : "ksession.fireAllRules();",
      "info" : "ExpressionStatement[5387-5411]:ExpressionStatement[4973-4997]"
    }, {
      "left" : "assertEquals( 2,\n                list.size() );",
      "right" : "assertEquals( 2,\n                list.size() );",
      "info" : "ExpressionStatement[5429-5476]:ExpressionStatement[5015-5062]"
    }, {
      "left" : "String externalForm = atomicFH.toExternalForm();",
      "right" : "String externalForm = atomicFH.toExternalForm();",
      "info" : "VariableDeclarationStatement[5485-5533]:VariableDeclarationStatement[5071-5119]"
    }, {
      "left" : "ksession = JPAKnowledgeService.loadStatefulKnowledgeSession(ksession.getIdentifier(), kbase, null, env);",
      "right" : "ksession = JPAKnowledgeService.loadStatefulKnowledgeSession(ksession.getIdentifier(), kbase, null, env);",
      "info" : "ExpressionStatement[5551-5655]:ExpressionStatement[5137-5241]"
    }, {
      "left" : "atomicFH = ksession.execute(CommandFactory.fromExternalFactHandleCommand(externalForm));",
      "right" : "atomicFH = ksession.execute(CommandFactory.fromExternalFactHandleCommand(externalForm));",
      "info" : "ExpressionStatement[5673-5761]:ExpressionStatement[5259-5347]"
    }, {
      "left" : "value.addAndGet(1);",
      "right" : "value.addAndGet(1);",
      "info" : "ExpressionStatement[5779-5798]:ExpressionStatement[5365-5384]"
    }, {
      "left" : "ksession.update(atomicFH, value);",
      "right" : "ksession.update(atomicFH, value);",
      "info" : "ExpressionStatement[5807-5840]:ExpressionStatement[5393-5426]"
    }, {
      "left" : "ksession.fireAllRules();",
      "right" : "ksession.fireAllRules();",
      "info" : "ExpressionStatement[5858-5882]:ExpressionStatement[5444-5468]"
    }, {
      "left" : "list = (List<?>) ksession.getGlobal(\"list\");",
      "right" : "list = (List<?>) ksession.getGlobal(\"list\");",
      "info" : "ExpressionStatement[5900-5944]:ExpressionStatement[5486-5530]"
    }, {
      "left" : "assertEquals( 3,\n                list.size() );",
      "right" : "assertEquals( 3,\n                list.size() );",
      "info" : "ExpressionStatement[5962-6009]:ExpressionStatement[5548-5595]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[6034-6039]:MarkerAnnotation[5620-5625]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6044-6050]:Modifier[5630-5636]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6051-6055]:PrimitiveType[5637-5641]"
    }, {
      "left" : "testLocalTransactionPerStatement",
      "right" : "testLocalTransactionPerStatement",
      "info" : "SimpleName[6056-6088]:SimpleName[5642-5674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6091-7291]:Block[5677-6877]"
    }, {
      "left" : "String str = \"\";",
      "right" : "String str = \"\";",
      "info" : "VariableDeclarationStatement[6101-6117]:VariableDeclarationStatement[5687-5703]"
    }, {
      "left" : "str += \"package org.kie.test\\n\";",
      "right" : "str += \"package org.kie.test\\n\";",
      "info" : "ExpressionStatement[6126-6158]:ExpressionStatement[5712-5744]"
    }, {
      "left" : "str += \"global java.util.List list\\n\";",
      "right" : "str += \"global java.util.List list\\n\";",
      "info" : "ExpressionStatement[6167-6205]:ExpressionStatement[5753-5791]"
    }, {
      "left" : "str += \"rule rule1\\n\";",
      "right" : "str += \"rule rule1\\n\";",
      "info" : "ExpressionStatement[6214-6236]:ExpressionStatement[5800-5822]"
    }, {
      "left" : "str += \"when\\n\";",
      "right" : "str += \"when\\n\";",
      "info" : "ExpressionStatement[6245-6261]:ExpressionStatement[5831-5847]"
    }, {
      "left" : "str += \"  Integer(intValue > 0)\\n\";",
      "right" : "str += \"  Integer(intValue > 0)\\n\";",
      "info" : "ExpressionStatement[6270-6305]:ExpressionStatement[5856-5891]"
    }, {
      "left" : "str += \"then\\n\";",
      "right" : "str += \"then\\n\";",
      "info" : "ExpressionStatement[6314-6330]:ExpressionStatement[5900-5916]"
    }, {
      "left" : "str += \"  list.add( 1 );\\n\";",
      "right" : "str += \"  list.add( 1 );\\n\";",
      "info" : "ExpressionStatement[6339-6367]:ExpressionStatement[5925-5953]"
    }, {
      "left" : "str += \"end\\n\";",
      "right" : "str += \"end\\n\";",
      "info" : "ExpressionStatement[6376-6391]:ExpressionStatement[5962-5977]"
    }, {
      "left" : "str += \"\\n\";",
      "right" : "str += \"\\n\";",
      "info" : "ExpressionStatement[6400-6412]:ExpressionStatement[5986-5998]"
    }, {
      "left" : "KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();",
      "right" : "KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();",
      "info" : "VariableDeclarationStatement[6422-6496]:VariableDeclarationStatement[6008-6082]"
    }, {
      "left" : "kbuilder.add( ResourceFactory.newByteArrayResource( str.getBytes() ),\n                      ResourceType.DRL );",
      "right" : "kbuilder.add( ResourceFactory.newByteArrayResource( str.getBytes() ),\n                      ResourceType.DRL );",
      "info" : "ExpressionStatement[6505-6616]:ExpressionStatement[6091-6202]"
    }, {
      "left" : "KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();",
      "right" : "KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();",
      "info" : "VariableDeclarationStatement[6625-6687]:VariableDeclarationStatement[6211-6273]"
    }, {
      "left" : "if ( kbuilder.hasErrors())",
      "right" : "if ( kbuilder.hasErrors())",
      "info" : "IfStatement[6697-6789]:IfStatement[6283-6375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6725-6789]:Block[6311-6375]"
    }, {
      "left" : "fail( kbuilder.getErrors().toString() );",
      "right" : "fail( kbuilder.getErrors().toString() );",
      "info" : "ExpressionStatement[6739-6779]:ExpressionStatement[6325-6365]"
    }, {
      "left" : "kbase.addKnowledgePackages( kbuilder.getKnowledgePackages() );",
      "right" : "kbase.addKnowledgePackages( kbuilder.getKnowledgePackages() );",
      "info" : "ExpressionStatement[6799-6861]:ExpressionStatement[6385-6447]"
    }, {
      "left" : "StatefulKnowledgeSession ksession = JPAKnowledgeService.newStatefulKnowledgeSession( kbase, null, env );",
      "right" : "StatefulKnowledgeSession ksession = JPAKnowledgeService.newStatefulKnowledgeSession( kbase, null, env );",
      "info" : "VariableDeclarationStatement[6871-6975]:VariableDeclarationStatement[6457-6561]"
    }, {
      "left" : "List<?> list = new ArrayList<Object>();",
      "right" : "List<?> list = new ArrayList<Object>();",
      "info" : "VariableDeclarationStatement[6984-7023]:VariableDeclarationStatement[6570-6609]"
    }, {
      "left" : "ksession.setGlobal( \"list\",\n                            list );",
      "right" : "ksession.setGlobal( \"list\",\n                            list );",
      "info" : "ExpressionStatement[7033-7096]:ExpressionStatement[6619-6682]"
    }, {
      "left" : "ksession.insert( 1 );",
      "right" : "ksession.insert( 1 );",
      "info" : "ExpressionStatement[7106-7127]:ExpressionStatement[6692-6713]"
    }, {
      "left" : "ksession.insert( 2 );",
      "right" : "ksession.insert( 2 );",
      "info" : "ExpressionStatement[7136-7157]:ExpressionStatement[6722-6743]"
    }, {
      "left" : "ksession.insert( 3 );",
      "right" : "ksession.insert( 3 );",
      "info" : "ExpressionStatement[7166-7187]:ExpressionStatement[6752-6773]"
    }, {
      "left" : "ksession.fireAllRules();",
      "right" : "ksession.fireAllRules();",
      "info" : "ExpressionStatement[7197-7221]:ExpressionStatement[6783-6807]"
    }, {
      "left" : "assertEquals( 3,\n                      list.size() );",
      "right" : "assertEquals( 3,\n                      list.size() );",
      "info" : "ExpressionStatement[7231-7284]:ExpressionStatement[6817-6870]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[7297-7302]:MarkerAnnotation[6883-6888]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7307-7313]:Modifier[6893-6899]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7314-7318]:PrimitiveType[6900-6904]"
    }, {
      "left" : "testUserTransactions",
      "right" : "testUserTransactions",
      "info" : "SimpleName[7319-7339]:SimpleName[6905-6925]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[7349-7358]:SimpleType[6935-6944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7359-10348]:Block[6945-9934]"
    }, {
      "left" : "String str = \"\";",
      "right" : "String str = \"\";",
      "info" : "VariableDeclarationStatement[7369-7385]:VariableDeclarationStatement[6955-6971]"
    }, {
      "left" : "str += \"package org.kie.test\\n\";",
      "right" : "str += \"package org.kie.test\\n\";",
      "info" : "ExpressionStatement[7394-7426]:ExpressionStatement[6980-7012]"
    }, {
      "left" : "str += \"global java.util.List list\\n\";",
      "right" : "str += \"global java.util.List list\\n\";",
      "info" : "ExpressionStatement[7435-7473]:ExpressionStatement[7021-7059]"
    }, {
      "left" : "str += \"rule rule1\\n\";",
      "right" : "str += \"rule rule1\\n\";",
      "info" : "ExpressionStatement[7482-7504]:ExpressionStatement[7068-7090]"
    }, {
      "left" : "str += \"when\\n\";",
      "right" : "str += \"when\\n\";",
      "info" : "ExpressionStatement[7513-7529]:ExpressionStatement[7099-7115]"
    }, {
      "left" : "str += \"  $i : Integer(intValue > 0)\\n\";",
      "right" : "str += \"  $i : Integer(intValue > 0)\\n\";",
      "info" : "ExpressionStatement[7538-7578]:ExpressionStatement[7124-7164]"
    }, {
      "left" : "str += \"then\\n\";",
      "right" : "str += \"then\\n\";",
      "info" : "ExpressionStatement[7587-7603]:ExpressionStatement[7173-7189]"
    }, {
      "left" : "str += \"  list.add( $i );\\n\";",
      "right" : "str += \"  list.add( $i );\\n\";",
      "info" : "ExpressionStatement[7612-7641]:ExpressionStatement[7198-7227]"
    }, {
      "left" : "str += \"end\\n\";",
      "right" : "str += \"end\\n\";",
      "info" : "ExpressionStatement[7650-7665]:ExpressionStatement[7236-7251]"
    }, {
      "left" : "str += \"\\n\";",
      "right" : "str += \"\\n\";",
      "info" : "ExpressionStatement[7674-7686]:ExpressionStatement[7260-7272]"
    }, {
      "left" : "KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();",
      "right" : "KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();",
      "info" : "VariableDeclarationStatement[7696-7770]:VariableDeclarationStatement[7282-7356]"
    }, {
      "left" : "kbuilder.add( ResourceFactory.newByteArrayResource( str.getBytes() ),\n                      ResourceType.DRL );",
      "right" : "kbuilder.add( ResourceFactory.newByteArrayResource( str.getBytes() ),\n                      ResourceType.DRL );",
      "info" : "ExpressionStatement[7779-7890]:ExpressionStatement[7365-7476]"
    }, {
      "left" : "KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();",
      "right" : "KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();",
      "info" : "VariableDeclarationStatement[7899-7961]:VariableDeclarationStatement[7485-7547]"
    }, {
      "left" : "if ( kbuilder.hasErrors())",
      "right" : "if ( kbuilder.hasErrors())",
      "info" : "IfStatement[7971-8063]:IfStatement[7557-7649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7999-8063]:Block[7585-7649]"
    }, {
      "left" : "fail( kbuilder.getErrors().toString() );",
      "right" : "fail( kbuilder.getErrors().toString() );",
      "info" : "ExpressionStatement[8013-8053]:ExpressionStatement[7599-7639]"
    }, {
      "left" : "kbase.addKnowledgePackages( kbuilder.getKnowledgePackages() );",
      "right" : "kbase.addKnowledgePackages( kbuilder.getKnowledgePackages() );",
      "info" : "ExpressionStatement[8073-8135]:ExpressionStatement[7659-7721]"
    }, {
      "left" : "UserTransaction ut = (UserTransaction) new InitialContext().lookup( \"java:comp/UserTransaction\" );",
      "right" : "UserTransaction ut = (UserTransaction) new InitialContext().lookup( \"java:comp/UserTransaction\" );",
      "info" : "VariableDeclarationStatement[8145-8243]:VariableDeclarationStatement[7731-7829]"
    }, {
      "left" : "ut.begin();",
      "right" : "ut.begin();",
      "info" : "ExpressionStatement[8252-8263]:ExpressionStatement[7838-7849]"
    }, {
      "left" : "StatefulKnowledgeSession ksession = JPAKnowledgeService.newStatefulKnowledgeSession( kbase, null, env );",
      "right" : "StatefulKnowledgeSession ksession = JPAKnowledgeService.newStatefulKnowledgeSession( kbase, null, env );",
      "info" : "VariableDeclarationStatement[8272-8376]:VariableDeclarationStatement[7858-7962]"
    }, {
      "left" : "ut.commit();",
      "right" : "ut.commit();",
      "info" : "ExpressionStatement[8385-8397]:ExpressionStatement[7971-7983]"
    }, {
      "left" : "List<?> list = new ArrayList<Object>();",
      "right" : "List<?> list = new ArrayList<Object>();",
      "info" : "VariableDeclarationStatement[8407-8446]:VariableDeclarationStatement[7993-8032]"
    }, {
      "left" : "ut = (UserTransaction) new InitialContext().lookup( \"java:comp/UserTransaction\" );",
      "right" : "ut = (UserTransaction) new InitialContext().lookup( \"java:comp/UserTransaction\" );",
      "info" : "ExpressionStatement[8485-8567]:ExpressionStatement[8071-8153]"
    }, {
      "left" : "ut.begin();",
      "right" : "ut.begin();",
      "info" : "ExpressionStatement[8576-8587]:ExpressionStatement[8162-8173]"
    }, {
      "left" : "ksession.setGlobal( \"list\",\n                            list );",
      "right" : "ksession.setGlobal( \"list\",\n                            list );",
      "info" : "ExpressionStatement[8596-8659]:ExpressionStatement[8182-8245]"
    }, {
      "left" : "ksession.insert( 1 );",
      "right" : "ksession.insert( 1 );",
      "info" : "ExpressionStatement[8668-8689]:ExpressionStatement[8254-8275]"
    }, {
      "left" : "ksession.insert( 2 );",
      "right" : "ksession.insert( 2 );",
      "info" : "ExpressionStatement[8698-8719]:ExpressionStatement[8284-8305]"
    }, {
      "left" : "ksession.fireAllRules();",
      "right" : "ksession.fireAllRules();",
      "info" : "ExpressionStatement[8728-8752]:ExpressionStatement[8314-8338]"
    }, {
      "left" : "ut.commit();",
      "right" : "ut.commit();",
      "info" : "ExpressionStatement[8761-8773]:ExpressionStatement[8347-8359]"
    }, {
      "left" : "ut = (UserTransaction) new InitialContext().lookup( \"java:comp/UserTransaction\" );",
      "right" : "ut = (UserTransaction) new InitialContext().lookup( \"java:comp/UserTransaction\" );",
      "info" : "ExpressionStatement[8814-8896]:ExpressionStatement[8400-8482]"
    }, {
      "left" : "ut.begin();",
      "right" : "ut.begin();",
      "info" : "ExpressionStatement[8905-8916]:ExpressionStatement[8491-8502]"
    }, {
      "left" : "ksession.insert( 3 );",
      "right" : "ksession.insert( 3 );",
      "info" : "ExpressionStatement[8925-8946]:ExpressionStatement[8511-8532]"
    }, {
      "left" : "ut.rollback();",
      "right" : "ut.rollback();",
      "info" : "ExpressionStatement[8955-8969]:ExpressionStatement[8541-8555]"
    }, {
      "left" : "ut = (UserTransaction) new InitialContext().lookup( \"java:comp/UserTransaction\" );",
      "right" : "ut = (UserTransaction) new InitialContext().lookup( \"java:comp/UserTransaction\" );",
      "info" : "ExpressionStatement[9049-9131]:ExpressionStatement[8635-8717]"
    }, {
      "left" : "ut.begin();",
      "right" : "ut.begin();",
      "info" : "ExpressionStatement[9140-9151]:ExpressionStatement[8726-8737]"
    }, {
      "left" : "ksession.fireAllRules();",
      "right" : "ksession.fireAllRules();",
      "info" : "ExpressionStatement[9160-9184]:ExpressionStatement[8746-8770]"
    }, {
      "left" : "ut.commit();",
      "right" : "ut.commit();",
      "info" : "ExpressionStatement[9193-9205]:ExpressionStatement[8779-8791]"
    }, {
      "left" : "assertEquals( 2,\n                      list.size() );",
      "right" : "assertEquals( 2,\n                      list.size() );",
      "info" : "ExpressionStatement[9214-9267]:ExpressionStatement[8800-8853]"
    }, {
      "left" : "ut = (UserTransaction) new InitialContext().lookup( \"java:comp/UserTransaction\" );",
      "right" : "ut = (UserTransaction) new InitialContext().lookup( \"java:comp/UserTransaction\" );",
      "info" : "ExpressionStatement[9306-9388]:ExpressionStatement[8892-8974]"
    }, {
      "left" : "ut.begin();",
      "right" : "ut.begin();",
      "info" : "ExpressionStatement[9397-9408]:ExpressionStatement[8983-8994]"
    }, {
      "left" : "ksession.insert( 3 );",
      "right" : "ksession.insert( 3 );",
      "info" : "ExpressionStatement[9417-9438]:ExpressionStatement[9003-9024]"
    }, {
      "left" : "ksession.insert( 4 );",
      "right" : "ksession.insert( 4 );",
      "info" : "ExpressionStatement[9447-9468]:ExpressionStatement[9033-9054]"
    }, {
      "left" : "ut.commit();",
      "right" : "ut.commit();",
      "info" : "ExpressionStatement[9477-9489]:ExpressionStatement[9063-9075]"
    }, {
      "left" : "ut = (UserTransaction) new InitialContext().lookup( \"java:comp/UserTransaction\" );",
      "right" : "ut = (UserTransaction) new InitialContext().lookup( \"java:comp/UserTransaction\" );",
      "info" : "ExpressionStatement[9605-9687]:ExpressionStatement[9191-9273]"
    }, {
      "left" : "ut.begin();",
      "right" : "ut.begin();",
      "info" : "ExpressionStatement[9696-9707]:ExpressionStatement[9282-9293]"
    }, {
      "left" : "ksession.insert( 5 );",
      "right" : "ksession.insert( 5 );",
      "info" : "ExpressionStatement[9716-9737]:ExpressionStatement[9302-9323]"
    }, {
      "left" : "ksession.insert( 6 );",
      "right" : "ksession.insert( 6 );",
      "info" : "ExpressionStatement[9746-9767]:ExpressionStatement[9332-9353]"
    }, {
      "left" : "ut.rollback();",
      "right" : "ut.rollback();",
      "info" : "ExpressionStatement[9776-9790]:ExpressionStatement[9362-9376]"
    }, {
      "left" : "ksession.fireAllRules();",
      "right" : "ksession.fireAllRules();",
      "info" : "ExpressionStatement[9800-9824]:ExpressionStatement[9386-9410]"
    }, {
      "left" : "assertEquals( 4,\n                      list.size() );",
      "right" : "assertEquals( 4,\n                      list.size() );",
      "info" : "ExpressionStatement[9834-9887]:ExpressionStatement[9420-9473]"
    }, {
      "left" : "ksession = JPAKnowledgeService.loadStatefulKnowledgeSession( ksession.getIdentifier(), kbase, null, env );",
      "right" : "ksession = JPAKnowledgeService.loadStatefulKnowledgeSession( ksession.getIdentifier(), kbase, null, env );",
      "info" : "ExpressionStatement[9938-10044]:ExpressionStatement[9524-9630]"
    }, {
      "left" : "ut = (UserTransaction) new InitialContext().lookup( \"java:comp/UserTransaction\" );",
      "right" : "ut = (UserTransaction) new InitialContext().lookup( \"java:comp/UserTransaction\" );",
      "info" : "ExpressionStatement[10062-10144]:ExpressionStatement[9648-9730]"
    }, {
      "left" : "ut.begin();",
      "right" : "ut.begin();",
      "info" : "ExpressionStatement[10153-10164]:ExpressionStatement[9739-9750]"
    }, {
      "left" : "ksession.insert( 7 );",
      "right" : "ksession.insert( 7 );",
      "info" : "ExpressionStatement[10173-10194]:ExpressionStatement[9759-9780]"
    }, {
      "left" : "ksession.insert( 8 );",
      "right" : "ksession.insert( 8 );",
      "info" : "ExpressionStatement[10203-10224]:ExpressionStatement[9789-9810]"
    }, {
      "left" : "ut.commit();",
      "right" : "ut.commit();",
      "info" : "ExpressionStatement[10233-10245]:ExpressionStatement[9819-9831]"
    }, {
      "left" : "ksession.fireAllRules();",
      "right" : "ksession.fireAllRules();",
      "info" : "ExpressionStatement[10255-10279]:ExpressionStatement[9841-9865]"
    }, {
      "left" : "assertEquals( 6,\n                      list.size() );",
      "right" : "assertEquals( 6,\n                      list.size() );",
      "info" : "ExpressionStatement[10289-10342]:ExpressionStatement[9875-9928]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[10354-10359]:MarkerAnnotation[9940-9945]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10364-10370]:Modifier[9950-9956]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10371-10375]:PrimitiveType[9957-9961]"
    }, {
      "left" : "testInterceptor",
      "right" : "testInterceptor",
      "info" : "SimpleName[10376-10391]:SimpleName[9962-9977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10394-11897]:Block[9980-11483]"
    }, {
      "left" : "String str = \"\";",
      "right" : "String str = \"\";",
      "info" : "VariableDeclarationStatement[10404-10420]:VariableDeclarationStatement[9990-10006]"
    }, {
      "left" : "str += \"package org.kie.test\\n\";",
      "right" : "str += \"package org.kie.test\\n\";",
      "info" : "ExpressionStatement[10429-10461]:ExpressionStatement[10015-10047]"
    }, {
      "left" : "str += \"global java.util.List list\\n\";",
      "right" : "str += \"global java.util.List list\\n\";",
      "info" : "ExpressionStatement[10470-10508]:ExpressionStatement[10056-10094]"
    }, {
      "left" : "str += \"rule rule1\\n\";",
      "right" : "str += \"rule rule1\\n\";",
      "info" : "ExpressionStatement[10517-10539]:ExpressionStatement[10103-10125]"
    }, {
      "left" : "str += \"when\\n\";",
      "right" : "str += \"when\\n\";",
      "info" : "ExpressionStatement[10548-10564]:ExpressionStatement[10134-10150]"
    }, {
      "left" : "str += \"  Integer(intValue > 0)\\n\";",
      "right" : "str += \"  Integer(intValue > 0)\\n\";",
      "info" : "ExpressionStatement[10573-10608]:ExpressionStatement[10159-10194]"
    }, {
      "left" : "str += \"then\\n\";",
      "right" : "str += \"then\\n\";",
      "info" : "ExpressionStatement[10617-10633]:ExpressionStatement[10203-10219]"
    }, {
      "left" : "str += \"  list.add( 1 );\\n\";",
      "right" : "str += \"  list.add( 1 );\\n\";",
      "info" : "ExpressionStatement[10642-10670]:ExpressionStatement[10228-10256]"
    }, {
      "left" : "str += \"end\\n\";",
      "right" : "str += \"end\\n\";",
      "info" : "ExpressionStatement[10679-10694]:ExpressionStatement[10265-10280]"
    }, {
      "left" : "str += \"\\n\";",
      "right" : "str += \"\\n\";",
      "info" : "ExpressionStatement[10703-10715]:ExpressionStatement[10289-10301]"
    }, {
      "left" : "KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();",
      "right" : "KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();",
      "info" : "VariableDeclarationStatement[10725-10799]:VariableDeclarationStatement[10311-10385]"
    }, {
      "left" : "kbuilder.add( ResourceFactory.newByteArrayResource( str.getBytes() ),\n                      ResourceType.DRL );",
      "right" : "kbuilder.add( ResourceFactory.newByteArrayResource( str.getBytes() ),\n                      ResourceType.DRL );",
      "info" : "ExpressionStatement[10808-10919]:ExpressionStatement[10394-10505]"
    }, {
      "left" : "KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();",
      "right" : "KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();",
      "info" : "VariableDeclarationStatement[10928-10990]:VariableDeclarationStatement[10514-10576]"
    }, {
      "left" : "if ( kbuilder.hasErrors())",
      "right" : "if ( kbuilder.hasErrors())",
      "info" : "IfStatement[11000-11092]:IfStatement[10586-10678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11028-11092]:Block[10614-10678]"
    }, {
      "left" : "fail( kbuilder.getErrors().toString() );",
      "right" : "fail( kbuilder.getErrors().toString() );",
      "info" : "ExpressionStatement[11042-11082]:ExpressionStatement[10628-10668]"
    }, {
      "left" : "kbase.addKnowledgePackages( kbuilder.getKnowledgePackages() );",
      "right" : "kbase.addKnowledgePackages( kbuilder.getKnowledgePackages() );",
      "info" : "ExpressionStatement[11102-11164]:ExpressionStatement[10688-10750]"
    }, {
      "left" : "StatefulKnowledgeSession ksession = JPAKnowledgeService.newStatefulKnowledgeSession( kbase, null, env );",
      "right" : "StatefulKnowledgeSession ksession = JPAKnowledgeService.newStatefulKnowledgeSession( kbase, null, env );",
      "info" : "VariableDeclarationStatement[11174-11278]:VariableDeclarationStatement[10760-10864]"
    }, {
      "left" : "SingleSessionCommandService sscs = (SingleSessionCommandService)\n            ((CommandBasedStatefulKnowledgeSession) ksession).getCommandService();",
      "right" : "SingleSessionCommandService sscs = (SingleSessionCommandService)\n            ((CommandBasedStatefulKnowledgeSession) ksession).getCommandService();",
      "info" : "VariableDeclarationStatement[11287-11434]:VariableDeclarationStatement[10873-11020]"
    }, {
      "left" : "sscs.addInterceptor(new LoggingInterceptor());",
      "right" : "sscs.addInterceptor(new LoggingInterceptor());",
      "info" : "ExpressionStatement[11443-11489]:ExpressionStatement[11029-11075]"
    }, {
      "left" : "sscs.addInterceptor(new FireAllRulesInterceptor());",
      "right" : "sscs.addInterceptor(new FireAllRulesInterceptor());",
      "info" : "ExpressionStatement[11498-11549]:ExpressionStatement[11084-11135]"
    }, {
      "left" : "sscs.addInterceptor(new LoggingInterceptor());",
      "right" : "sscs.addInterceptor(new LoggingInterceptor());",
      "info" : "ExpressionStatement[11558-11604]:ExpressionStatement[11144-11190]"
    }, {
      "left" : "List<?> list = new ArrayList<Object>();",
      "right" : "List<?> list = new ArrayList<Object>();",
      "info" : "VariableDeclarationStatement[11613-11652]:VariableDeclarationStatement[11199-11238]"
    }, {
      "left" : "ksession.setGlobal( \"list\", list );",
      "right" : "ksession.setGlobal( \"list\", list );",
      "info" : "ExpressionStatement[11661-11696]:ExpressionStatement[11247-11282]"
    }, {
      "left" : "ksession.insert( 1 );",
      "right" : "ksession.insert( 1 );",
      "info" : "ExpressionStatement[11705-11726]:ExpressionStatement[11291-11312]"
    }, {
      "left" : "ksession.insert( 2 );",
      "right" : "ksession.insert( 2 );",
      "info" : "ExpressionStatement[11735-11756]:ExpressionStatement[11321-11342]"
    }, {
      "left" : "ksession.insert( 3 );",
      "right" : "ksession.insert( 3 );",
      "info" : "ExpressionStatement[11765-11786]:ExpressionStatement[11351-11372]"
    }, {
      "left" : "ksession.getWorkItemManager().completeWorkItem(0, null);",
      "right" : "ksession.getWorkItemManager().completeWorkItem(0, null);",
      "info" : "ExpressionStatement[11795-11851]:ExpressionStatement[11381-11437]"
    }, {
      "left" : "assertEquals( 3, list.size() );",
      "right" : "assertEquals( 3, list.size() );",
      "info" : "ExpressionStatement[11860-11891]:ExpressionStatement[11446-11477]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[11907-11912]:MarkerAnnotation[14037-14042]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11917-11923]:Modifier[14047-14053]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11924-11928]:PrimitiveType[14054-14058]"
    }, {
      "left" : "testSetFocus",
      "right" : "testSetFocus",
      "info" : "SimpleName[11929-11941]:SimpleName[14059-14071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11944-13287]:Block[14074-15417]"
    }, {
      "left" : "String str = \"\";",
      "right" : "String str = \"\";",
      "info" : "VariableDeclarationStatement[11954-11970]:VariableDeclarationStatement[14084-14100]"
    }, {
      "left" : "str += \"package org.kie.test\\n\";",
      "right" : "str += \"package org.kie.test\\n\";",
      "info" : "ExpressionStatement[11979-12011]:ExpressionStatement[14109-14141]"
    }, {
      "left" : "str += \"global java.util.List list\\n\";",
      "right" : "str += \"global java.util.List list\\n\";",
      "info" : "ExpressionStatement[12020-12058]:ExpressionStatement[14150-14188]"
    }, {
      "left" : "str += \"rule rule1\\n\";",
      "right" : "str += \"rule rule1\\n\";",
      "info" : "ExpressionStatement[12067-12089]:ExpressionStatement[14197-14219]"
    }, {
      "left" : "str += \"agenda-group \\\"badfocus\\\"\";",
      "right" : "str += \"agenda-group \\\"badfocus\\\"\";",
      "info" : "ExpressionStatement[12098-12133]:ExpressionStatement[14228-14263]"
    }, {
      "left" : "str += \"when\\n\";",
      "right" : "str += \"when\\n\";",
      "info" : "ExpressionStatement[12142-12158]:ExpressionStatement[14272-14288]"
    }, {
      "left" : "str += \"  Integer(intValue > 0)\\n\";",
      "right" : "str += \"  Integer(intValue > 0)\\n\";",
      "info" : "ExpressionStatement[12167-12202]:ExpressionStatement[14297-14332]"
    }, {
      "left" : "str += \"then\\n\";",
      "right" : "str += \"then\\n\";",
      "info" : "ExpressionStatement[12211-12227]:ExpressionStatement[14341-14357]"
    }, {
      "left" : "str += \"  list.add( 1 );\\n\";",
      "right" : "str += \"  list.add( 1 );\\n\";",
      "info" : "ExpressionStatement[12236-12264]:ExpressionStatement[14366-14394]"
    }, {
      "left" : "str += \"end\\n\";",
      "right" : "str += \"end\\n\";",
      "info" : "ExpressionStatement[12273-12288]:ExpressionStatement[14403-14418]"
    }, {
      "left" : "str += \"\\n\";",
      "right" : "str += \"\\n\";",
      "info" : "ExpressionStatement[12297-12309]:ExpressionStatement[14427-14439]"
    }, {
      "left" : "KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();",
      "right" : "KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();",
      "info" : "VariableDeclarationStatement[12323-12397]:VariableDeclarationStatement[14453-14527]"
    }, {
      "left" : "kbuilder.add( ResourceFactory.newByteArrayResource( str.getBytes() ),\n                      ResourceType.DRL );",
      "right" : "kbuilder.add( ResourceFactory.newByteArrayResource( str.getBytes() ),\n                      ResourceType.DRL );",
      "info" : "ExpressionStatement[12406-12517]:ExpressionStatement[14536-14647]"
    }, {
      "left" : "KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();",
      "right" : "KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();",
      "info" : "VariableDeclarationStatement[12526-12588]:VariableDeclarationStatement[14656-14718]"
    }, {
      "left" : "if ( kbuilder.hasErrors())",
      "right" : "if ( kbuilder.hasErrors())",
      "info" : "IfStatement[12602-12694]:IfStatement[14732-14824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12630-12694]:Block[14760-14824]"
    }, {
      "left" : "fail( kbuilder.getErrors().toString() );",
      "right" : "fail( kbuilder.getErrors().toString() );",
      "info" : "ExpressionStatement[12644-12684]:ExpressionStatement[14774-14814]"
    }, {
      "left" : "kbase.addKnowledgePackages( kbuilder.getKnowledgePackages() );",
      "right" : "kbase.addKnowledgePackages( kbuilder.getKnowledgePackages() );",
      "info" : "ExpressionStatement[12708-12770]:ExpressionStatement[14838-14900]"
    }, {
      "left" : "StatefulKnowledgeSession ksession = JPAKnowledgeService.newStatefulKnowledgeSession( kbase, null, env );",
      "right" : "StatefulKnowledgeSession ksession = JPAKnowledgeService.newStatefulKnowledgeSession( kbase, null, env );",
      "info" : "VariableDeclarationStatement[12784-12888]:VariableDeclarationStatement[14914-15018]"
    }, {
      "left" : "List<?> list = new ArrayList<Object>();",
      "right" : "List<?> list = new ArrayList<Object>();",
      "info" : "VariableDeclarationStatement[12897-12936]:VariableDeclarationStatement[15027-15066]"
    }, {
      "left" : "ksession.setGlobal( \"list\",\n                            list );",
      "right" : "ksession.setGlobal( \"list\",\n                            list );",
      "info" : "ExpressionStatement[12950-13013]:ExpressionStatement[15080-15143]"
    }, {
      "left" : "ksession.insert( 1 );",
      "right" : "ksession.insert( 1 );",
      "info" : "ExpressionStatement[13027-13048]:ExpressionStatement[15157-15178]"
    }, {
      "left" : "ksession.insert( 2 );",
      "right" : "ksession.insert( 2 );",
      "info" : "ExpressionStatement[13057-13078]:ExpressionStatement[15187-15208]"
    }, {
      "left" : "ksession.insert( 3 );",
      "right" : "ksession.insert( 3 );",
      "info" : "ExpressionStatement[13087-13108]:ExpressionStatement[15217-15238]"
    }, {
      "left" : "ksession.getAgenda().getAgendaGroup(\"badfocus\").setFocus();",
      "right" : "ksession.getAgenda().getAgendaGroup(\"badfocus\").setFocus();",
      "info" : "ExpressionStatement[13117-13176]:ExpressionStatement[15247-15306]"
    }, {
      "left" : "ksession.fireAllRules();",
      "right" : "ksession.fireAllRules();",
      "info" : "ExpressionStatement[13190-13214]:ExpressionStatement[15320-15344]"
    }, {
      "left" : "assertEquals( 3,\n                      list.size() );",
      "right" : "assertEquals( 3,\n                      list.size() );",
      "info" : "ExpressionStatement[13228-13281]:ExpressionStatement[15358-15411]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[13297-13302]:MarkerAnnotation[15427-15432]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13307-13313]:Modifier[15437-15443]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13314-13318]:PrimitiveType[15444-15448]"
    }, {
      "left" : "testSharedReferences",
      "right" : "testSharedReferences",
      "info" : "SimpleName[13319-13339]:SimpleName[15449-15469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13342-14177]:Block[15472-16307]"
    }, {
      "left" : "KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();",
      "right" : "KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();",
      "info" : "VariableDeclarationStatement[13352-13414]:VariableDeclarationStatement[15482-15544]"
    }, {
      "left" : "StatefulKnowledgeSession ksession = JPAKnowledgeService.newStatefulKnowledgeSession( kbase, null, env );",
      "right" : "StatefulKnowledgeSession ksession = JPAKnowledgeService.newStatefulKnowledgeSession( kbase, null, env );",
      "info" : "VariableDeclarationStatement[13423-13527]:VariableDeclarationStatement[15553-15657]"
    }, {
      "left" : "Person x = new Person( \"test\" );",
      "right" : "Person x = new Person( \"test\" );",
      "info" : "VariableDeclarationStatement[13537-13569]:VariableDeclarationStatement[15667-15699]"
    }, {
      "left" : "List test = new ArrayList();",
      "right" : "List test = new ArrayList();",
      "info" : "VariableDeclarationStatement[13578-13606]:VariableDeclarationStatement[15708-15736]"
    }, {
      "left" : "List test2 = new ArrayList();",
      "right" : "List test2 = new ArrayList();",
      "info" : "VariableDeclarationStatement[13615-13644]:VariableDeclarationStatement[15745-15774]"
    }, {
      "left" : "test.add( x );",
      "right" : "test.add( x );",
      "info" : "ExpressionStatement[13653-13667]:ExpressionStatement[15783-15797]"
    }, {
      "left" : "test2.add( x );",
      "right" : "test2.add( x );",
      "info" : "ExpressionStatement[13676-13691]:ExpressionStatement[15806-15821]"
    }, {
      "left" : "assertSame( test.get( 0 ), test2.get( 0 ) );",
      "right" : "assertSame( test.get( 0 ), test2.get( 0 ) );",
      "info" : "ExpressionStatement[13701-13745]:ExpressionStatement[15831-15875]"
    }, {
      "left" : "ksession.insert( test );",
      "right" : "ksession.insert( test );",
      "info" : "ExpressionStatement[13755-13779]:ExpressionStatement[15885-15909]"
    }, {
      "left" : "ksession.insert( test2 );",
      "right" : "ksession.insert( test2 );",
      "info" : "ExpressionStatement[13788-13813]:ExpressionStatement[15918-15943]"
    }, {
      "left" : "ksession.fireAllRules();",
      "right" : "ksession.fireAllRules();",
      "info" : "ExpressionStatement[13822-13846]:ExpressionStatement[15952-15976]"
    }, {
      "left" : "StatefulKnowledgeSession ksession2 = JPAKnowledgeService.loadStatefulKnowledgeSession(ksession.getIdentifier(), kbase, null, env);",
      "right" : "StatefulKnowledgeSession ksession2 = JPAKnowledgeService.loadStatefulKnowledgeSession(ksession.getIdentifier(), kbase, null, env);",
      "info" : "VariableDeclarationStatement[13856-13986]:VariableDeclarationStatement[15986-16116]"
    }, {
      "left" : "Iterator c = ksession2.getObjects().iterator();",
      "right" : "Iterator c = ksession2.getObjects().iterator();",
      "info" : "VariableDeclarationStatement[13996-14043]:VariableDeclarationStatement[16126-16173]"
    }, {
      "left" : "List ref1 = (List) c.next();",
      "right" : "List ref1 = (List) c.next();",
      "info" : "VariableDeclarationStatement[14052-14080]:VariableDeclarationStatement[16182-16210]"
    }, {
      "left" : "List ref2 = (List) c.next();",
      "right" : "List ref2 = (List) c.next();",
      "info" : "VariableDeclarationStatement[14089-14117]:VariableDeclarationStatement[16219-16247]"
    }, {
      "left" : "assertSame( ref1.get( 0 ), ref2.get( 0 ) );",
      "right" : "assertSame( ref1.get( 0 ), ref2.get( 0 ) );",
      "info" : "ExpressionStatement[14127-14170]:ExpressionStatement[16257-16300]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[14183-14188]:MarkerAnnotation[16313-16318]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14193-14199]:Modifier[16323-16329]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14200-14204]:PrimitiveType[16330-16334]"
    }, {
      "left" : "testMergeConfig",
      "right" : "testMergeConfig",
      "info" : "SimpleName[14205-14220]:SimpleName[16335-16350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14223-14948]:Block[16353-17078]"
    }, {
      "left" : "KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();",
      "right" : "KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();",
      "info" : "VariableDeclarationStatement[14257-14319]:VariableDeclarationStatement[16387-16449]"
    }, {
      "left" : "Properties properties = new Properties();",
      "right" : "Properties properties = new Properties();",
      "info" : "VariableDeclarationStatement[14329-14370]:VariableDeclarationStatement[16459-16500]"
    }, {
      "left" : "properties.put(\"drools.processInstanceManagerFactory\", \"com.example.CustomJPAProcessInstanceManagerFactory\");",
      "right" : "properties.put(\"drools.processInstanceManagerFactory\", \"com.example.CustomJPAProcessInstanceManagerFactory\");",
      "info" : "ExpressionStatement[14379-14488]:ExpressionStatement[16509-16618]"
    }, {
      "left" : "KieSessionConfiguration config = KnowledgeBaseFactory.newKnowledgeSessionConfiguration(properties);",
      "right" : "KieSessionConfiguration config = KnowledgeBaseFactory.newKnowledgeSessionConfiguration(properties);",
      "info" : "VariableDeclarationStatement[14497-14596]:VariableDeclarationStatement[16627-16726]"
    }, {
      "left" : "StatefulKnowledgeSession ksession = JPAKnowledgeService.newStatefulKnowledgeSession( kbase, config, env );",
      "right" : "StatefulKnowledgeSession ksession = JPAKnowledgeService.newStatefulKnowledgeSession( kbase, config, env );",
      "info" : "VariableDeclarationStatement[14606-14712]:VariableDeclarationStatement[16736-16842]"
    }, {
      "left" : "SessionConfiguration sessionConfig = (SessionConfiguration)ksession.getSessionConfiguration();",
      "right" : "SessionConfiguration sessionConfig = (SessionConfiguration)ksession.getSessionConfiguration();",
      "info" : "VariableDeclarationStatement[14721-14815]:VariableDeclarationStatement[16851-16945]"
    }, {
      "left" : "assertEquals(\"com.example.CustomJPAProcessInstanceManagerFactory\", sessionConfig.getProcessInstanceManagerFactory());",
      "right" : "assertEquals(\"com.example.CustomJPAProcessInstanceManagerFactory\", sessionConfig.getProcessInstanceManagerFactory());",
      "info" : "ExpressionStatement[14825-14942]:ExpressionStatement[16955-17072]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[14954-14959]:MarkerAnnotation[17084-17089]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14964-14970]:Modifier[17094-17100]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14971-14975]:PrimitiveType[17101-17105]"
    }, {
      "left" : "testCreateAndDestroySession",
      "right" : "testCreateAndDestroySession",
      "info" : "SimpleName[14976-15003]:SimpleName[17106-17133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15006-16469]:Block[17136-18599]"
    }, {
      "left" : "String str = \"\";",
      "right" : "String str = \"\";",
      "info" : "VariableDeclarationStatement[15016-15032]:VariableDeclarationStatement[17146-17162]"
    }, {
      "left" : "str += \"package org.kie.test\\n\";",
      "right" : "str += \"package org.kie.test\\n\";",
      "info" : "ExpressionStatement[15041-15073]:ExpressionStatement[17171-17203]"
    }, {
      "left" : "str += \"global java.util.List list\\n\";",
      "right" : "str += \"global java.util.List list\\n\";",
      "info" : "ExpressionStatement[15082-15120]:ExpressionStatement[17212-17250]"
    }, {
      "left" : "str += \"rule rule1\\n\";",
      "right" : "str += \"rule rule1\\n\";",
      "info" : "ExpressionStatement[15129-15151]:ExpressionStatement[17259-17281]"
    }, {
      "left" : "str += \"when\\n\";",
      "right" : "str += \"when\\n\";",
      "info" : "ExpressionStatement[15160-15176]:ExpressionStatement[17290-17306]"
    }, {
      "left" : "str += \"  Integer(intValue > 0)\\n\";",
      "right" : "str += \"  Integer(intValue > 0)\\n\";",
      "info" : "ExpressionStatement[15185-15220]:ExpressionStatement[17315-17350]"
    }, {
      "left" : "str += \"then\\n\";",
      "right" : "str += \"then\\n\";",
      "info" : "ExpressionStatement[15229-15245]:ExpressionStatement[17359-17375]"
    }, {
      "left" : "str += \"  list.add( 1 );\\n\";",
      "right" : "str += \"  list.add( 1 );\\n\";",
      "info" : "ExpressionStatement[15254-15282]:ExpressionStatement[17384-17412]"
    }, {
      "left" : "str += \"end\\n\";",
      "right" : "str += \"end\\n\";",
      "info" : "ExpressionStatement[15291-15306]:ExpressionStatement[17421-17436]"
    }, {
      "left" : "str += \"\\n\";",
      "right" : "str += \"\\n\";",
      "info" : "ExpressionStatement[15315-15327]:ExpressionStatement[17445-17457]"
    }, {
      "left" : "KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();",
      "right" : "KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();",
      "info" : "VariableDeclarationStatement[15337-15411]:VariableDeclarationStatement[17467-17541]"
    }, {
      "left" : "kbuilder.add( ResourceFactory.newByteArrayResource(str.getBytes()),\n                ResourceType.DRL );",
      "right" : "kbuilder.add( ResourceFactory.newByteArrayResource(str.getBytes()),\n                ResourceType.DRL );",
      "info" : "ExpressionStatement[15420-15523]:ExpressionStatement[17550-17653]"
    }, {
      "left" : "KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();",
      "right" : "KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();",
      "info" : "VariableDeclarationStatement[15532-15594]:VariableDeclarationStatement[17662-17724]"
    }, {
      "left" : "if ( kbuilder.hasErrors())",
      "right" : "if ( kbuilder.hasErrors())",
      "info" : "IfStatement[15604-15696]:IfStatement[17734-17826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15632-15696]:Block[17762-17826]"
    }, {
      "left" : "fail( kbuilder.getErrors().toString() );",
      "right" : "fail( kbuilder.getErrors().toString() );",
      "info" : "ExpressionStatement[15646-15686]:ExpressionStatement[17776-17816]"
    }, {
      "left" : "kbase.addKnowledgePackages( kbuilder.getKnowledgePackages() );",
      "right" : "kbase.addKnowledgePackages( kbuilder.getKnowledgePackages() );",
      "info" : "ExpressionStatement[15706-15768]:ExpressionStatement[17836-17898]"
    }, {
      "left" : "StatefulKnowledgeSession ksession = JPAKnowledgeService.newStatefulKnowledgeSession( kbase, null, env );",
      "right" : "StatefulKnowledgeSession ksession = JPAKnowledgeService.newStatefulKnowledgeSession( kbase, null, env );",
      "info" : "VariableDeclarationStatement[15778-15882]:VariableDeclarationStatement[17908-18012]"
    }, {
      "left" : "List<?> list = new ArrayList<Object>();",
      "right" : "List<?> list = new ArrayList<Object>();",
      "info" : "VariableDeclarationStatement[15891-15930]:VariableDeclarationStatement[18021-18060]"
    }, {
      "left" : "ksession.setGlobal( \"list\",\n                list );",
      "right" : "ksession.setGlobal( \"list\",\n                list );",
      "info" : "ExpressionStatement[15940-15991]:ExpressionStatement[18070-18121]"
    }, {
      "left" : "ksession.insert( 1 );",
      "right" : "ksession.insert( 1 );",
      "info" : "ExpressionStatement[16001-16022]:ExpressionStatement[18131-18152]"
    }, {
      "left" : "ksession.insert( 2 );",
      "right" : "ksession.insert( 2 );",
      "info" : "ExpressionStatement[16031-16052]:ExpressionStatement[18161-18182]"
    }, {
      "left" : "ksession.insert( 3 );",
      "right" : "ksession.insert( 3 );",
      "info" : "ExpressionStatement[16061-16082]:ExpressionStatement[18191-18212]"
    }, {
      "left" : "ksession.fireAllRules();",
      "right" : "ksession.fireAllRules();",
      "info" : "ExpressionStatement[16092-16116]:ExpressionStatement[18222-18246]"
    }, {
      "left" : "assertEquals( 3, list.size() );",
      "right" : "assertEquals( 3, list.size() );",
      "info" : "ExpressionStatement[16126-16157]:ExpressionStatement[18256-18287]"
    }, {
      "left" : "long ksessionId = ksession.getIdentifier();",
      "right" : "long ksessionId = ksession.getIdentifier();",
      "info" : "VariableDeclarationStatement[16167-16210]:VariableDeclarationStatement[18297-18340]"
    }, {
      "left" : "ksession.destroy();",
      "right" : "ksession.destroy();",
      "info" : "ExpressionStatement[16219-16238]:ExpressionStatement[18349-18368]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16248-16463]:TryStatement[18378-18593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16252-16430]:Block[18382-18560]"
    }, {
      "left" : "JPAKnowledgeService.loadStatefulKnowledgeSession(ksessionId, kbase, null, env);",
      "right" : "JPAKnowledgeService.loadStatefulKnowledgeSession(ksessionId, kbase, null, env);",
      "info" : "ExpressionStatement[16266-16345]:ExpressionStatement[18396-18475]"
    }, {
      "left" : "fail(\"There should not be any session with id \" + ksessionId);",
      "right" : "fail(\"There should not be any session with id \" + ksessionId);",
      "info" : "ExpressionStatement[16358-16420]:ExpressionStatement[18488-18550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16451-16463]:Block[18581-18593]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[16475-16480]:MarkerAnnotation[18605-18610]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16485-16491]:Modifier[18615-18621]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16492-16496]:PrimitiveType[18622-18626]"
    }, {
      "left" : "testCreateAndDestroyNonPersistentSession",
      "right" : "testCreateAndDestroyNonPersistentSession",
      "info" : "SimpleName[16497-16537]:SimpleName[18627-18667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16540-17925]:Block[18670-20055]"
    }, {
      "left" : "String str = \"\";",
      "right" : "String str = \"\";",
      "info" : "VariableDeclarationStatement[16550-16566]:VariableDeclarationStatement[18680-18696]"
    }, {
      "left" : "str += \"package org.kie.test\\n\";",
      "right" : "str += \"package org.kie.test\\n\";",
      "info" : "ExpressionStatement[16575-16607]:ExpressionStatement[18705-18737]"
    }, {
      "left" : "str += \"global java.util.List list\\n\";",
      "right" : "str += \"global java.util.List list\\n\";",
      "info" : "ExpressionStatement[16616-16654]:ExpressionStatement[18746-18784]"
    }, {
      "left" : "str += \"rule rule1\\n\";",
      "right" : "str += \"rule rule1\\n\";",
      "info" : "ExpressionStatement[16663-16685]:ExpressionStatement[18793-18815]"
    }, {
      "left" : "str += \"when\\n\";",
      "right" : "str += \"when\\n\";",
      "info" : "ExpressionStatement[16694-16710]:ExpressionStatement[18824-18840]"
    }, {
      "left" : "str += \"  Integer(intValue > 0)\\n\";",
      "right" : "str += \"  Integer(intValue > 0)\\n\";",
      "info" : "ExpressionStatement[16719-16754]:ExpressionStatement[18849-18884]"
    }, {
      "left" : "str += \"then\\n\";",
      "right" : "str += \"then\\n\";",
      "info" : "ExpressionStatement[16763-16779]:ExpressionStatement[18893-18909]"
    }, {
      "left" : "str += \"  list.add( 1 );\\n\";",
      "right" : "str += \"  list.add( 1 );\\n\";",
      "info" : "ExpressionStatement[16788-16816]:ExpressionStatement[18918-18946]"
    }, {
      "left" : "str += \"end\\n\";",
      "right" : "str += \"end\\n\";",
      "info" : "ExpressionStatement[16825-16840]:ExpressionStatement[18955-18970]"
    }, {
      "left" : "str += \"\\n\";",
      "right" : "str += \"\\n\";",
      "info" : "ExpressionStatement[16849-16861]:ExpressionStatement[18979-18991]"
    }, {
      "left" : "KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();",
      "right" : "KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();",
      "info" : "VariableDeclarationStatement[16871-16945]:VariableDeclarationStatement[19001-19075]"
    }, {
      "left" : "kbuilder.add( ResourceFactory.newByteArrayResource( str.getBytes() ),\n                ResourceType.DRL );",
      "right" : "kbuilder.add( ResourceFactory.newByteArrayResource( str.getBytes() ),\n                ResourceType.DRL );",
      "info" : "ExpressionStatement[16954-17059]:ExpressionStatement[19084-19189]"
    }, {
      "left" : "KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();",
      "right" : "KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();",
      "info" : "VariableDeclarationStatement[17068-17130]:VariableDeclarationStatement[19198-19260]"
    }, {
      "left" : "if ( kbuilder.hasErrors())",
      "right" : "if ( kbuilder.hasErrors())",
      "info" : "IfStatement[17140-17232]:IfStatement[19270-19362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17168-17232]:Block[19298-19362]"
    }, {
      "left" : "fail( kbuilder.getErrors().toString() );",
      "right" : "fail( kbuilder.getErrors().toString() );",
      "info" : "ExpressionStatement[17182-17222]:ExpressionStatement[19312-19352]"
    }, {
      "left" : "kbase.addKnowledgePackages( kbuilder.getKnowledgePackages() );",
      "right" : "kbase.addKnowledgePackages( kbuilder.getKnowledgePackages() );",
      "info" : "ExpressionStatement[17242-17304]:ExpressionStatement[19372-19434]"
    }, {
      "left" : "StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();",
      "right" : "StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();",
      "info" : "VariableDeclarationStatement[17314-17386]:VariableDeclarationStatement[19444-19516]"
    }, {
      "left" : "List<?> list = new ArrayList<Object>();",
      "right" : "List<?> list = new ArrayList<Object>();",
      "info" : "VariableDeclarationStatement[17395-17434]:VariableDeclarationStatement[19525-19564]"
    }, {
      "left" : "ksession.setGlobal( \"list\",\n                list );",
      "right" : "ksession.setGlobal( \"list\",\n                list );",
      "info" : "ExpressionStatement[17444-17495]:ExpressionStatement[19574-19625]"
    }, {
      "left" : "ksession.insert( 1 );",
      "right" : "ksession.insert( 1 );",
      "info" : "ExpressionStatement[17505-17526]:ExpressionStatement[19635-19656]"
    }, {
      "left" : "ksession.insert( 2 );",
      "right" : "ksession.insert( 2 );",
      "info" : "ExpressionStatement[17535-17556]:ExpressionStatement[19665-19686]"
    }, {
      "left" : "ksession.insert( 3 );",
      "right" : "ksession.insert( 3 );",
      "info" : "ExpressionStatement[17565-17586]:ExpressionStatement[19695-19716]"
    }, {
      "left" : "ksession.fireAllRules();",
      "right" : "ksession.fireAllRules();",
      "info" : "ExpressionStatement[17596-17620]:ExpressionStatement[19726-19750]"
    }, {
      "left" : "assertEquals( 3, list.size() );",
      "right" : "assertEquals( 3, list.size() );",
      "info" : "ExpressionStatement[17630-17661]:ExpressionStatement[19760-19791]"
    }, {
      "left" : "long ksessionId = ksession.getIdentifier();",
      "right" : "long ksessionId = ksession.getIdentifier();",
      "info" : "VariableDeclarationStatement[17671-17714]:VariableDeclarationStatement[19801-19844]"
    }, {
      "left" : "ksession.destroy();",
      "right" : "ksession.destroy();",
      "info" : "ExpressionStatement[17723-17742]:ExpressionStatement[19853-19872]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[17752-17919]:TryStatement[19882-20049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17756-17874]:Block[19886-20004]"
    }, {
      "left" : "ksession.fireAllRules();",
      "right" : "ksession.fireAllRules();",
      "info" : "ExpressionStatement[17770-17794]:ExpressionStatement[19900-19924]"
    }, {
      "left" : "fail(\"Session should already be disposed \" + ksessionId);",
      "right" : "fail(\"Session should already be disposed \" + ksessionId);",
      "info" : "ExpressionStatement[17807-17864]:ExpressionStatement[19937-19994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17907-17919]:Block[20037-20049]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[17931-17936]:MarkerAnnotation[20061-20066]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17941-17947]:Modifier[20071-20077]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17948-17952]:PrimitiveType[20078-20082]"
    }, {
      "left" : "testFromNodeWithModifiedCollection",
      "right" : "testFromNodeWithModifiedCollection",
      "info" : "SimpleName[17953-17987]:SimpleName[20083-20117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17990-19582]:Block[20120-21712]"
    }, {
      "left" : "String str = \"\";",
      "right" : "String str = \"\";",
      "info" : "VariableDeclarationStatement[18022-18038]:VariableDeclarationStatement[20152-20168]"
    }, {
      "left" : "str += \"package org.drools.test\\n\";",
      "right" : "str += \"package org.drools.test\\n\";",
      "info" : "ExpressionStatement[18047-18082]:ExpressionStatement[20177-20212]"
    }, {
      "left" : "str += \"import org.drools.compiler.Person\\n\";",
      "right" : "str += \"import org.drools.compiler.Person\\n\";",
      "info" : "ExpressionStatement[18091-18136]:ExpressionStatement[20221-20266]"
    }, {
      "left" : "str += \"import org.drools.compiler.Address\\n\";",
      "right" : "str += \"import org.drools.compiler.Address\\n\";",
      "info" : "ExpressionStatement[18145-18191]:ExpressionStatement[20275-20321]"
    }, {
      "left" : "str += \"rule rule1\\n\";",
      "right" : "str += \"rule rule1\\n\";",
      "info" : "ExpressionStatement[18200-18222]:ExpressionStatement[20330-20352]"
    }, {
      "left" : "str += \"when\\n\";",
      "right" : "str += \"when\\n\";",
      "info" : "ExpressionStatement[18231-18247]:ExpressionStatement[20361-20377]"
    }, {
      "left" : "str += \" $p: Person($list : addresses)\\n\";",
      "right" : "str += \" $p: Person($list : addresses)\\n\";",
      "info" : "ExpressionStatement[18256-18298]:ExpressionStatement[20386-20428]"
    }, {
      "left" : "str += \" $a: Address(street == \\\"y\\\") from $list\\n\";",
      "right" : "str += \" $a: Address(street == \\\"y\\\") from $list\\n\";",
      "info" : "ExpressionStatement[18307-18359]:ExpressionStatement[20437-20489]"
    }, {
      "left" : "str += \"then\\n\";",
      "right" : "str += \"then\\n\";",
      "info" : "ExpressionStatement[18368-18384]:ExpressionStatement[20498-20514]"
    }, {
      "left" : "str += \" $list.add( new Address(\\\"z\\\") );\\n\";",
      "right" : "str += \" $list.add( new Address(\\\"z\\\") );\\n\";",
      "info" : "ExpressionStatement[18393-18438]:ExpressionStatement[20523-20568]"
    }, {
      "left" : "str += \" $list.add( new Address(\\\"w\\\") );\\n\";",
      "right" : "str += \" $list.add( new Address(\\\"w\\\") );\\n\";",
      "info" : "ExpressionStatement[18447-18492]:ExpressionStatement[20577-20622]"
    }, {
      "left" : "str += \"end\\n\";",
      "right" : "str += \"end\\n\";",
      "info" : "ExpressionStatement[18501-18516]:ExpressionStatement[20631-20646]"
    }, {
      "left" : "str += \"\\n\";",
      "right" : "str += \"\\n\";",
      "info" : "ExpressionStatement[18525-18537]:ExpressionStatement[20655-20667]"
    }, {
      "left" : "KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();",
      "right" : "KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();",
      "info" : "VariableDeclarationStatement[18547-18621]:VariableDeclarationStatement[20677-20751]"
    }, {
      "left" : "kbuilder.add( ResourceFactory.newByteArrayResource( str.getBytes() ),\n                      ResourceType.DRL );",
      "right" : "kbuilder.add( ResourceFactory.newByteArrayResource( str.getBytes() ),\n                      ResourceType.DRL );",
      "info" : "ExpressionStatement[18630-18741]:ExpressionStatement[20760-20871]"
    }, {
      "left" : "KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();",
      "right" : "KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();",
      "info" : "VariableDeclarationStatement[18750-18812]:VariableDeclarationStatement[20880-20942]"
    }, {
      "left" : "if ( kbuilder.hasErrors())",
      "right" : "if ( kbuilder.hasErrors())",
      "info" : "IfStatement[18822-18914]:IfStatement[20952-21044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18850-18914]:Block[20980-21044]"
    }, {
      "left" : "fail( kbuilder.getErrors().toString() );",
      "right" : "fail( kbuilder.getErrors().toString() );",
      "info" : "ExpressionStatement[18864-18904]:ExpressionStatement[20994-21034]"
    }, {
      "left" : "kbase.addKnowledgePackages( kbuilder.getKnowledgePackages() );",
      "right" : "kbase.addKnowledgePackages( kbuilder.getKnowledgePackages() );",
      "info" : "ExpressionStatement[18924-18986]:ExpressionStatement[21054-21116]"
    }, {
      "left" : "StatefulKnowledgeSession ksession = JPAKnowledgeService.newStatefulKnowledgeSession( kbase, null, env );",
      "right" : "StatefulKnowledgeSession ksession = JPAKnowledgeService.newStatefulKnowledgeSession( kbase, null, env );",
      "info" : "VariableDeclarationStatement[18996-19100]:VariableDeclarationStatement[21126-21230]"
    }, {
      "left" : "long sessionId = ksession.getIdentifier();",
      "right" : "long sessionId = ksession.getIdentifier();",
      "info" : "VariableDeclarationStatement[19109-19151]:VariableDeclarationStatement[21239-21281]"
    }, {
      "left" : "Person p1 = new Person(\"John\");",
      "right" : "Person p1 = new Person(\"John\");",
      "info" : "VariableDeclarationStatement[19161-19192]:VariableDeclarationStatement[21291-21322]"
    }, {
      "left" : "p1.addAddress(new Address(\"x\"));",
      "right" : "p1.addAddress(new Address(\"x\"));",
      "info" : "ExpressionStatement[19201-19233]:ExpressionStatement[21331-21363]"
    }, {
      "left" : "p1.addAddress(new Address(\"y\"));",
      "right" : "p1.addAddress(new Address(\"y\"));",
      "info" : "ExpressionStatement[19242-19274]:ExpressionStatement[21372-21404]"
    }, {
      "left" : "ksession.insert( p1 );",
      "right" : "ksession.insert( p1 );",
      "info" : "ExpressionStatement[19284-19306]:ExpressionStatement[21414-21436]"
    }, {
      "left" : "ksession.fireAllRules();",
      "right" : "ksession.fireAllRules();",
      "info" : "ExpressionStatement[19316-19340]:ExpressionStatement[21446-21470]"
    }, {
      "left" : "assertEquals( 4,\n                      p1.getAddresses().size() );",
      "right" : "assertEquals( 4,\n                      p1.getAddresses().size() );",
      "info" : "ExpressionStatement[19350-19416]:ExpressionStatement[21480-21546]"
    }, {
      "left" : "ksession.dispose();",
      "right" : "ksession.dispose();",
      "info" : "ExpressionStatement[19426-19445]:ExpressionStatement[21556-21575]"
    }, {
      "left" : "ksession = JPAKnowledgeService.loadStatefulKnowledgeSession(sessionId, kbase, null, env);",
      "right" : "ksession = JPAKnowledgeService.loadStatefulKnowledgeSession(sessionId, kbase, null, env);",
      "info" : "ExpressionStatement[19487-19576]:ExpressionStatement[21617-21706]"
    } ]
  },
  "interFileMappings" : { }
}