{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TypeUtils",
      "right" : "TypeUtils",
      "info" : "TypeDeclaration[1264-44175]:TypeDeclaration[1264-44160]"
    }, {
      "left" : "public TypeUtils()",
      "right" : "public TypeUtils()",
      "info" : "MethodDeclaration[1434-1793]:MethodDeclaration[1434-1793]"
    }, {
      "left" : "public static boolean isAssignable(Type type, Type toType)",
      "right" : "public static boolean isAssignable(Type type, Type toType)",
      "info" : "MethodDeclaration[1799-2398]:MethodDeclaration[1799-2398]"
    }, {
      "left" : "private static boolean isAssignable(Type type, Type toType,\n            Map<TypeVariable<?>, Type> typeVarAssigns)",
      "right" : "private static boolean isAssignable(Type type, Type toType,\n            Map<TypeVariable<?>, Type> typeVarAssigns)",
      "info" : "MethodDeclaration[2404-3745]:MethodDeclaration[2404-3745]"
    }, {
      "left" : "private static boolean isAssignable(Type type, Class<?> toClass)",
      "right" : "private static boolean isAssignable(Type type, Class<?> toClass)",
      "info" : "MethodDeclaration[3751-6124]:MethodDeclaration[3751-6124]"
    }, {
      "left" : "private static boolean isAssignable(Type type, ParameterizedType toParameterizedType,\n            Map<TypeVariable<?>, Type> typeVarAssigns)",
      "right" : "private static boolean isAssignable(Type type, ParameterizedType toParameterizedType,\n            Map<TypeVariable<?>, Type> typeVarAssigns)",
      "info" : "MethodDeclaration[6130-8840]:MethodDeclaration[6130-8863]"
    }, {
      "left" : "private static Type unrollVariableAssignments(TypeVariable<?> var, Map<TypeVariable<?>, Type> typeVarAssigns)",
      "right" : "private static Type unrollVariableAssignments(TypeVariable<?> var, Map<TypeVariable<?>, Type> typeVarAssigns)",
      "info" : "MethodDeclaration[8846-9273]:MethodDeclaration[8869-9296]"
    }, {
      "left" : "private static boolean isAssignable(Type type, GenericArrayType toGenericArrayType,\n            Map<TypeVariable<?>, Type> typeVarAssigns)",
      "right" : "private static boolean isAssignable(Type type, GenericArrayType toGenericArrayType,\n            Map<TypeVariable<?>, Type> typeVarAssigns)",
      "info" : "MethodDeclaration[9279-12023]:MethodDeclaration[9302-12046]"
    }, {
      "left" : "private static boolean isAssignable(Type type, WildcardType toWildcardType,\n            Map<TypeVariable<?>, Type> typeVarAssigns)",
      "right" : "private static boolean isAssignable(Type type, WildcardType toWildcardType,\n            Map<TypeVariable<?>, Type> typeVarAssigns)",
      "info" : "MethodDeclaration[12029-15374]:MethodDeclaration[12052-15397]"
    }, {
      "left" : "private static boolean isAssignable(Type type, TypeVariable<?> toTypeVariable,\n            Map<TypeVariable<?>, Type> typeVarAssigns)",
      "right" : "private static boolean isAssignable(Type type, TypeVariable<?> toTypeVariable,\n            Map<TypeVariable<?>, Type> typeVarAssigns)",
      "info" : "MethodDeclaration[15380-17131]:MethodDeclaration[15403-17154]"
    }, {
      "left" : "private static Type substituteTypeVariables(Type type, Map<TypeVariable<?>, Type> typeVarAssigns)",
      "right" : "private static Type substituteTypeVariables(Type type, Map<TypeVariable<?>, Type> typeVarAssigns)",
      "info" : "MethodDeclaration[17137-17878]:MethodDeclaration[17160-17901]"
    }, {
      "left" : "public static Map<TypeVariable<?>, Type> getTypeArguments(ParameterizedType type)",
      "right" : "public static Map<TypeVariable<?>, Type> getTypeArguments(ParameterizedType type)",
      "info" : "MethodDeclaration[17884-18545]:MethodDeclaration[17907-18568]"
    }, {
      "left" : "public static Map<TypeVariable<?>, Type> getTypeArguments(Type type, Class<?> toClass)",
      "right" : "public static Map<TypeVariable<?>, Type> getTypeArguments(Type type, Class<?> toClass)",
      "info" : "MethodDeclaration[18551-20782]:MethodDeclaration[18574-20805]"
    }, {
      "left" : "private static Map<TypeVariable<?>, Type> getTypeArguments(Type type, Class<?> toClass,\n            Map<TypeVariable<?>, Type> subtypeVarAssigns)",
      "right" : "private static Map<TypeVariable<?>, Type> getTypeArguments(Type type, Class<?> toClass,\n            Map<TypeVariable<?>, Type> subtypeVarAssigns)",
      "info" : "MethodDeclaration[20788-22791]:MethodDeclaration[20811-22814]"
    }, {
      "left" : "private static Map<TypeVariable<?>, Type> getTypeArguments(\n            ParameterizedType parameterizedType, Class<?> toClass,\n            Map<TypeVariable<?>, Type> subtypeVarAssigns)",
      "right" : "private static Map<TypeVariable<?>, Type> getTypeArguments(\n            ParameterizedType parameterizedType, Class<?> toClass,\n            Map<TypeVariable<?>, Type> subtypeVarAssigns)",
      "info" : "MethodDeclaration[22797-25080]:MethodDeclaration[22820-25103]"
    }, {
      "left" : "private static Map<TypeVariable<?>, Type> getTypeArguments(Class<?> cls, Class<?> toClass,\n            Map<TypeVariable<?>, Type> subtypeVarAssigns)",
      "right" : "private static Map<TypeVariable<?>, Type> getTypeArguments(Class<?> cls, Class<?> toClass,\n            Map<TypeVariable<?>, Type> subtypeVarAssigns)",
      "info" : "MethodDeclaration[25086-26763]:MethodDeclaration[25109-26748]"
    }, {
      "left" : "public static Map<TypeVariable<?>, Type> determineTypeArguments(Class<?> cls,\n            ParameterizedType superType)",
      "right" : "public static Map<TypeVariable<?>, Type> determineTypeArguments(Class<?> cls,\n            ParameterizedType superType)",
      "info" : "MethodDeclaration[26769-29727]:MethodDeclaration[26754-29712]"
    }, {
      "left" : "private static <T> void mapTypeVariablesToArguments(Class<T> cls,\n            ParameterizedType parameterizedType, Map<TypeVariable<?>, Type> typeVarAssigns)",
      "right" : "private static <T> void mapTypeVariablesToArguments(Class<T> cls,\n            ParameterizedType parameterizedType, Map<TypeVariable<?>, Type> typeVarAssigns)",
      "info" : "MethodDeclaration[29733-31950]:MethodDeclaration[29718-31935]"
    }, {
      "left" : "private static Type getClosestParentType(Class<?> cls, Class<?> superClass)",
      "right" : "private static Type getClosestParentType(Class<?> cls, Class<?> superClass)",
      "info" : "MethodDeclaration[31956-33908]:MethodDeclaration[31941-33893]"
    }, {
      "left" : "public static boolean isInstance(Object value, Type type)",
      "right" : "public static boolean isInstance(Object value, Type type)",
      "info" : "MethodDeclaration[33914-34501]:MethodDeclaration[33899-34486]"
    }, {
      "left" : "public static Type[] normalizeUpperBounds(Type[] bounds)",
      "right" : "public static Type[] normalizeUpperBounds(Type[] bounds)",
      "info" : "MethodDeclaration[34507-36101]:MethodDeclaration[34492-36086]"
    }, {
      "left" : "public static Type[] getImplicitBounds(TypeVariable<?> typeVariable)",
      "right" : "public static Type[] getImplicitBounds(TypeVariable<?> typeVariable)",
      "info" : "MethodDeclaration[36107-36757]:MethodDeclaration[36092-36742]"
    }, {
      "left" : "public static Type[] getImplicitUpperBounds(WildcardType wildcardType)",
      "right" : "public static Type[] getImplicitUpperBounds(WildcardType wildcardType)",
      "info" : "MethodDeclaration[36763-37444]:MethodDeclaration[36748-37429]"
    }, {
      "left" : "public static Type[] getImplicitLowerBounds(WildcardType wildcardType)",
      "right" : "public static Type[] getImplicitLowerBounds(WildcardType wildcardType)",
      "info" : "MethodDeclaration[37450-38055]:MethodDeclaration[37435-38040]"
    }, {
      "left" : "public static boolean typesSatisfyVariables(Map<TypeVariable<?>, Type> typeVarAssigns)",
      "right" : "public static boolean typesSatisfyVariables(Map<TypeVariable<?>, Type> typeVarAssigns)",
      "info" : "MethodDeclaration[38061-39391]:MethodDeclaration[38046-39376]"
    }, {
      "left" : "private static Class<?> getRawType(ParameterizedType parameterizedType)",
      "right" : "private static Class<?> getRawType(ParameterizedType parameterizedType)",
      "info" : "MethodDeclaration[39397-40336]:MethodDeclaration[39382-40321]"
    }, {
      "left" : "public static Class<?> getRawType(Type type, Type assigningType)",
      "right" : "public static Class<?> getRawType(Type type, Type assigningType)",
      "info" : "MethodDeclaration[40342-43217]:MethodDeclaration[40327-43202]"
    }, {
      "left" : "public static boolean isArrayType(Type type)",
      "right" : "public static boolean isArrayType(Type type)",
      "info" : "MethodDeclaration[43223-43607]:MethodDeclaration[43208-43592]"
    }, {
      "left" : "public static Type getArrayComponentType(Type type)",
      "right" : "public static Type getArrayComponentType(Type type)",
      "info" : "MethodDeclaration[43613-44172]:MethodDeclaration[43598-44157]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1404-1410]:Modifier[1404-1410]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1411-1416]:TYPE_DECLARATION_KIND[1411-1416]"
    }, {
      "left" : "TypeUtils",
      "right" : "TypeUtils",
      "info" : "SimpleName[1417-1426]:SimpleName[1417-1426]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1750-1756]:Modifier[1750-1756]"
    }, {
      "left" : "TypeUtils",
      "right" : "TypeUtils",
      "info" : "SimpleName[1757-1766]:SimpleName[1757-1766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1769-1793]:Block[1769-1793]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[1779-1787]:SuperConstructorInvocation[1779-1787]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2283-2289]:Modifier[2283-2289]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2290-2296]:Modifier[2290-2296]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[2297-2304]:PrimitiveType[2297-2304]"
    }, {
      "left" : "isAssignable",
      "right" : "isAssignable",
      "info" : "SimpleName[2305-2317]:SimpleName[2305-2317]"
    }, {
      "left" : "Type type",
      "right" : "Type type",
      "info" : "SingleVariableDeclaration[2318-2327]:SingleVariableDeclaration[2318-2327]"
    }, {
      "left" : "Type toType",
      "right" : "Type toType",
      "info" : "SingleVariableDeclaration[2329-2340]:SingleVariableDeclaration[2329-2340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2342-2398]:Block[2342-2398]"
    }, {
      "left" : "return isAssignable(type, toType, null);",
      "right" : "return isAssignable(type, toType, null);",
      "info" : "ReturnStatement[2352-2392]:ReturnStatement[2352-2392]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2824-2831]:Modifier[2824-2831]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2832-2838]:Modifier[2832-2838]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[2839-2846]:PrimitiveType[2839-2846]"
    }, {
      "left" : "isAssignable",
      "right" : "isAssignable",
      "info" : "SimpleName[2847-2859]:SimpleName[2847-2859]"
    }, {
      "left" : "Type type",
      "right" : "Type type",
      "info" : "SingleVariableDeclaration[2860-2869]:SingleVariableDeclaration[2860-2869]"
    }, {
      "left" : "Type toType",
      "right" : "Type toType",
      "info" : "SingleVariableDeclaration[2871-2882]:SingleVariableDeclaration[2871-2882]"
    }, {
      "left" : "Map<TypeVariable<?>, Type> typeVarAssigns",
      "right" : "Map<TypeVariable<?>, Type> typeVarAssigns",
      "info" : "SingleVariableDeclaration[2896-2937]:SingleVariableDeclaration[2896-2937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2939-3745]:Block[2939-3745]"
    }, {
      "left" : "if (toType == null || toType instanceof Class<?>)",
      "right" : "if (toType == null || toType instanceof Class<?>)",
      "info" : "IfStatement[2949-3068]:IfStatement[2949-3068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2999-3068]:Block[2999-3068]"
    }, {
      "left" : "return isAssignable(type, (Class<?>) toType);",
      "right" : "return isAssignable(type, (Class<?>) toType);",
      "info" : "ReturnStatement[3013-3058]:ReturnStatement[3013-3058]"
    }, {
      "left" : "if (toType instanceof ParameterizedType)",
      "right" : "if (toType instanceof ParameterizedType)",
      "info" : "IfStatement[3078-3213]:IfStatement[3078-3213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3119-3213]:Block[3119-3213]"
    }, {
      "left" : "return isAssignable(type, (ParameterizedType) toType, typeVarAssigns);",
      "right" : "return isAssignable(type, (ParameterizedType) toType, typeVarAssigns);",
      "info" : "ReturnStatement[3133-3203]:ReturnStatement[3133-3203]"
    }, {
      "left" : "if (toType instanceof GenericArrayType)",
      "right" : "if (toType instanceof GenericArrayType)",
      "info" : "IfStatement[3223-3356]:IfStatement[3223-3356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3263-3356]:Block[3263-3356]"
    }, {
      "left" : "return isAssignable(type, (GenericArrayType) toType, typeVarAssigns);",
      "right" : "return isAssignable(type, (GenericArrayType) toType, typeVarAssigns);",
      "info" : "ReturnStatement[3277-3346]:ReturnStatement[3277-3346]"
    }, {
      "left" : "if (toType instanceof WildcardType)",
      "right" : "if (toType instanceof WildcardType)",
      "info" : "IfStatement[3366-3491]:IfStatement[3366-3491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3402-3491]:Block[3402-3491]"
    }, {
      "left" : "return isAssignable(type, (WildcardType) toType, typeVarAssigns);",
      "right" : "return isAssignable(type, (WildcardType) toType, typeVarAssigns);",
      "info" : "ReturnStatement[3416-3481]:ReturnStatement[3416-3481]"
    }, {
      "left" : "if (toType instanceof TypeVariable<?>)",
      "right" : "if (toType instanceof TypeVariable<?>)",
      "info" : "IfStatement[3514-3645]:IfStatement[3514-3645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3553-3645]:Block[3553-3645]"
    }, {
      "left" : "return isAssignable(type, (TypeVariable<?>) toType, typeVarAssigns);",
      "right" : "return isAssignable(type, (TypeVariable<?>) toType, typeVarAssigns);",
      "info" : "ReturnStatement[3567-3635]:ReturnStatement[3567-3635]"
    }, {
      "left" : "throw new IllegalStateException(\"found an unhandled type: \" + toType);",
      "right" : "throw new IllegalStateException(\"found an unhandled type: \" + toType);",
      "info" : "ThrowStatement[3669-3739]:ThrowStatement[3669-3739]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4091-4098]:Modifier[4091-4098]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4099-4105]:Modifier[4099-4105]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[4106-4113]:PrimitiveType[4106-4113]"
    }, {
      "left" : "isAssignable",
      "right" : "isAssignable",
      "info" : "SimpleName[4114-4126]:SimpleName[4114-4126]"
    }, {
      "left" : "Type type",
      "right" : "Type type",
      "info" : "SingleVariableDeclaration[4127-4136]:SingleVariableDeclaration[4127-4136]"
    }, {
      "left" : "Class<?> toClass",
      "right" : "Class<?> toClass",
      "info" : "SingleVariableDeclaration[4138-4154]:SingleVariableDeclaration[4138-4154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4156-6124]:Block[4156-6124]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[4166-4324]:IfStatement[4166-4324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4184-4324]:Block[4184-4324]"
    }, {
      "left" : "return toClass == null || !toClass.isPrimitive();",
      "right" : "return toClass == null || !toClass.isPrimitive();",
      "info" : "ReturnStatement[4265-4314]:ReturnStatement[4265-4314]"
    }, {
      "left" : "if (toClass == null)",
      "right" : "if (toClass == null)",
      "info" : "IfStatement[4453-4511]:IfStatement[4453-4511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4474-4511]:Block[4474-4511]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4488-4501]:ReturnStatement[4488-4501]"
    }, {
      "left" : "if (toClass.equals(type))",
      "right" : "if (toClass.equals(type))",
      "info" : "IfStatement[4571-4633]:IfStatement[4571-4633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4597-4633]:Block[4597-4633]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4611-4623]:ReturnStatement[4611-4623]"
    }, {
      "left" : "if (type instanceof Class<?>)",
      "right" : "if (type instanceof Class<?>)",
      "info" : "IfStatement[4643-4796]:IfStatement[4643-4796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4673-4796]:Block[4673-4796]"
    }, {
      "left" : "return ClassUtils.isAssignable((Class<?>) type, toClass);",
      "right" : "return ClassUtils.isAssignable((Class<?>) type, toClass);",
      "info" : "ReturnStatement[4729-4786]:ReturnStatement[4729-4786]"
    }, {
      "left" : "if (type instanceof ParameterizedType)",
      "right" : "if (type instanceof ParameterizedType)",
      "info" : "IfStatement[4806-4998]:IfStatement[4806-4998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4845-4998]:Block[4845-4998]"
    }, {
      "left" : "return isAssignable(getRawType((ParameterizedType) type), toClass);",
      "right" : "return isAssignable(getRawType((ParameterizedType) type), toClass);",
      "info" : "ReturnStatement[4921-4988]:ReturnStatement[4921-4988]"
    }, {
      "left" : "if (type instanceof TypeVariable<?>)",
      "right" : "if (type instanceof TypeVariable<?>)",
      "info" : "IfStatement[5021-5405]:IfStatement[5021-5405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5058-5405]:Block[5058-5405]"
    }, {
      "left" : "for (Type bound : ((TypeVariable<?>) type).getBounds())",
      "right" : "for (Type bound : ((TypeVariable<?>) type).getBounds())",
      "info" : "EnhancedForStatement[5194-5368]:EnhancedForStatement[5194-5368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5250-5368]:Block[5250-5368]"
    }, {
      "left" : "if (isAssignable(bound, toClass))",
      "right" : "if (isAssignable(bound, toClass))",
      "info" : "IfStatement[5268-5354]:IfStatement[5268-5354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5302-5354]:Block[5302-5354]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[5324-5336]:ReturnStatement[5324-5336]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5382-5395]:ReturnStatement[5382-5395]"
    }, {
      "left" : "if (type instanceof GenericArrayType)",
      "right" : "if (type instanceof GenericArrayType)",
      "info" : "IfStatement[5535-5820]:IfStatement[5535-5820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5573-5820]:Block[5573-5820]"
    }, {
      "left" : "return toClass.equals(Object.class)\n                    || toClass.isArray()\n                    && isAssignable(((GenericArrayType) type).getGenericComponentType(), toClass\n                            .getComponentType());",
      "right" : "return toClass.equals(Object.class)\n                    || toClass.isArray()\n                    && isAssignable(((GenericArrayType) type).getGenericComponentType(), toClass\n                            .getComponentType());",
      "info" : "ReturnStatement[5587-5810]:ReturnStatement[5587-5810]"
    }, {
      "left" : "if (type instanceof WildcardType)",
      "right" : "if (type instanceof WildcardType)",
      "info" : "IfStatement[5969-6040]:IfStatement[5969-6040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6003-6040]:Block[6003-6040]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6017-6030]:ReturnStatement[6017-6030]"
    }, {
      "left" : "throw new IllegalStateException(\"found an unhandled type: \" + type);",
      "right" : "throw new IllegalStateException(\"found an unhandled type: \" + type);",
      "info" : "ThrowStatement[6050-6118]:ThrowStatement[6050-6118]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6562-6569]:Modifier[6562-6569]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6570-6576]:Modifier[6570-6576]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6577-6584]:PrimitiveType[6577-6584]"
    }, {
      "left" : "isAssignable",
      "right" : "isAssignable",
      "info" : "SimpleName[6585-6597]:SimpleName[6585-6597]"
    }, {
      "left" : "Type type",
      "right" : "Type type",
      "info" : "SingleVariableDeclaration[6598-6607]:SingleVariableDeclaration[6598-6607]"
    }, {
      "left" : "ParameterizedType toParameterizedType",
      "right" : "ParameterizedType toParameterizedType",
      "info" : "SingleVariableDeclaration[6609-6646]:SingleVariableDeclaration[6609-6646]"
    }, {
      "left" : "Map<TypeVariable<?>, Type> typeVarAssigns",
      "right" : "Map<TypeVariable<?>, Type> typeVarAssigns",
      "info" : "SingleVariableDeclaration[6660-6701]:SingleVariableDeclaration[6660-6701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6703-8840]:Block[6703-8863]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[6713-6767]:IfStatement[6713-6767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6731-6767]:Block[6731-6767]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6745-6757]:ReturnStatement[6745-6757]"
    }, {
      "left" : "if (toParameterizedType == null)",
      "right" : "if (toParameterizedType == null)",
      "info" : "IfStatement[6896-6966]:IfStatement[6896-6966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6929-6966]:Block[6929-6966]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6943-6956]:ReturnStatement[6943-6956]"
    }, {
      "left" : "if (toParameterizedType.equals(type))",
      "right" : "if (toParameterizedType.equals(type))",
      "info" : "IfStatement[7026-7100]:IfStatement[7026-7100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7064-7100]:Block[7064-7100]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7078-7090]:ReturnStatement[7078-7090]"
    }, {
      "left" : "Class<?> toClass = getRawType(toParameterizedType);",
      "right" : "Class<?> toClass = getRawType(toParameterizedType);",
      "info" : "VariableDeclarationStatement[7152-7203]:VariableDeclarationStatement[7152-7203]"
    }, {
      "left" : "Map<TypeVariable<?>, Type> fromTypeVarAssigns = getTypeArguments(type, toClass, null);",
      "right" : "Map<TypeVariable<?>, Type> fromTypeVarAssigns = getTypeArguments(type, toClass, null);",
      "info" : "VariableDeclarationStatement[7365-7451]:VariableDeclarationStatement[7365-7451]"
    }, {
      "left" : "if (fromTypeVarAssigns == null)",
      "right" : "if (fromTypeVarAssigns == null)",
      "info" : "IfStatement[7516-7585]:IfStatement[7516-7585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7548-7585]:Block[7548-7585]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7562-7575]:ReturnStatement[7562-7575]"
    }, {
      "left" : "if (fromTypeVarAssigns.isEmpty())",
      "right" : "if (fromTypeVarAssigns.isEmpty())",
      "info" : "IfStatement[7789-7859]:IfStatement[7789-7859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7823-7859]:Block[7823-7859]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7837-7849]:ReturnStatement[7837-7849]"
    }, {
      "left" : "Map<TypeVariable<?>, Type> toTypeVarAssigns = getTypeArguments(toParameterizedType,\n                toClass, typeVarAssigns);",
      "right" : "Map<TypeVariable<?>, Type> toTypeVarAssigns = getTypeArguments(toParameterizedType,\n                toClass, typeVarAssigns);",
      "info" : "VariableDeclarationStatement[7948-8073]:VariableDeclarationStatement[7948-8073]"
    }, {
      "left" : "for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet())",
      "right" : "for (TypeVariable<?> var : toTypeVarAssigns.keySet())",
      "info" : "EnhancedForStatement[8126-8812]:EnhancedForStatement[8126-8835]"
    }, {
      "left" : "TypeVariable<?>",
      "right" : "TypeVariable<?>",
      "info" : "ParameterizedType[8141-8156]:ParameterizedType[8131-8146]"
    }, {
      "left" : "entrySet",
      "right" : "keySet",
      "info" : "SimpleName[8189-8197]:SimpleName[8170-8176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8201-8812]:Block[8180-8835]"
    }, {
      "left" : "Type toTypeArg = entry.getValue();",
      "right" : "Type toTypeArg = unrollVariableAssignments(var, toTypeVarAssigns);",
      "info" : "VariableDeclarationStatement[8215-8249]:VariableDeclarationStatement[8194-8260]"
    }, {
      "left" : "Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());",
      "right" : "Type fromTypeArg = unrollVariableAssignments(var, fromTypeVarAssigns);",
      "info" : "VariableDeclarationStatement[8262-8320]:VariableDeclarationStatement[8273-8343]"
    }, {
      "left" : "if (fromTypeArg != null\n                    && !toTypeArg.equals(fromTypeArg)\n                    && !(toTypeArg instanceof WildcardType && isAssignable(fromTypeArg, toTypeArg,\n                            typeVarAssigns)))",
      "right" : "if (fromTypeArg != null\n                    && !toTypeArg.equals(fromTypeArg)\n                    && !(toTypeArg instanceof WildcardType && isAssignable(fromTypeArg, toTypeArg,\n                            typeVarAssigns)))",
      "info" : "IfStatement[8534-8802]:IfStatement[8557-8825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8757-8802]:Block[8780-8825]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8775-8788]:ReturnStatement[8798-8811]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8822-8834]:ReturnStatement[8845-8857]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8846-8853]:Modifier[8869-8876]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8854-8860]:Modifier[8877-8883]"
    }, {
      "left" : "Type",
      "right" : "Type",
      "info" : "SimpleType[8861-8865]:SimpleType[8884-8888]"
    }, {
      "left" : "unrollVariableAssignments",
      "right" : "unrollVariableAssignments",
      "info" : "SimpleName[8866-8891]:SimpleName[8889-8914]"
    }, {
      "left" : "TypeVariable<?> var",
      "right" : "TypeVariable<?> var",
      "info" : "SingleVariableDeclaration[8892-8911]:SingleVariableDeclaration[8915-8934]"
    }, {
      "left" : "Map<TypeVariable<?>, Type> typeVarAssigns",
      "right" : "Map<TypeVariable<?>, Type> typeVarAssigns",
      "info" : "SingleVariableDeclaration[8913-8954]:SingleVariableDeclaration[8936-8977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8956-9273]:Block[8979-9296]"
    }, {
      "left" : "Type result;",
      "right" : "Type result;",
      "info" : "VariableDeclarationStatement[8966-8978]:VariableDeclarationStatement[8989-9001]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[8987-9244]:DoStatement[9010-9267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8990-9230]:Block[9013-9253]"
    }, {
      "left" : "result = typeVarAssigns.get(var);",
      "right" : "result = typeVarAssigns.get(var);",
      "info" : "ExpressionStatement[9004-9037]:ExpressionStatement[9027-9060]"
    }, {
      "left" : "if (result instanceof TypeVariable<?> && !result.equals(var))",
      "right" : "if (result instanceof TypeVariable<?> && !result.equals(var))",
      "info" : "IfStatement[9050-9201]:IfStatement[9073-9224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9112-9201]:Block[9135-9224]"
    }, {
      "left" : "var = (TypeVariable<?>) result;",
      "right" : "var = (TypeVariable<?>) result;",
      "info" : "ExpressionStatement[9130-9161]:ExpressionStatement[9153-9184]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[9178-9187]:ContinueStatement[9201-9210]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9214-9220]:BreakStatement[9237-9243]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[9253-9267]:ReturnStatement[9276-9290]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9729-9736]:Modifier[9752-9759]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9737-9743]:Modifier[9760-9766]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9744-9751]:PrimitiveType[9767-9774]"
    }, {
      "left" : "isAssignable",
      "right" : "isAssignable",
      "info" : "SimpleName[9752-9764]:SimpleName[9775-9787]"
    }, {
      "left" : "Type type",
      "right" : "Type type",
      "info" : "SingleVariableDeclaration[9765-9774]:SingleVariableDeclaration[9788-9797]"
    }, {
      "left" : "GenericArrayType toGenericArrayType",
      "right" : "GenericArrayType toGenericArrayType",
      "info" : "SingleVariableDeclaration[9776-9811]:SingleVariableDeclaration[9799-9834]"
    }, {
      "left" : "Map<TypeVariable<?>, Type> typeVarAssigns",
      "right" : "Map<TypeVariable<?>, Type> typeVarAssigns",
      "info" : "SingleVariableDeclaration[9825-9866]:SingleVariableDeclaration[9848-9889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9868-12023]:Block[9891-12046]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[9878-9932]:IfStatement[9901-9955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9896-9932]:Block[9919-9955]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9910-9922]:ReturnStatement[9933-9945]"
    }, {
      "left" : "if (toGenericArrayType == null)",
      "right" : "if (toGenericArrayType == null)",
      "info" : "IfStatement[10061-10130]:IfStatement[10084-10153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10093-10130]:Block[10116-10153]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10107-10120]:ReturnStatement[10130-10143]"
    }, {
      "left" : "if (toGenericArrayType.equals(type))",
      "right" : "if (toGenericArrayType.equals(type))",
      "info" : "IfStatement[10190-10263]:IfStatement[10213-10286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10227-10263]:Block[10250-10286]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[10241-10253]:ReturnStatement[10264-10276]"
    }, {
      "left" : "Type toComponentType = toGenericArrayType.getGenericComponentType();",
      "right" : "Type toComponentType = toGenericArrayType.getGenericComponentType();",
      "info" : "VariableDeclarationStatement[10273-10341]:VariableDeclarationStatement[10296-10364]"
    }, {
      "left" : "if (type instanceof Class<?>)",
      "right" : "if (type instanceof Class<?>)",
      "info" : "IfStatement[10351-10607]:IfStatement[10374-10630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10381-10607]:Block[10404-10630]"
    }, {
      "left" : "Class<?> cls = (Class<?>) type;",
      "right" : "Class<?> cls = (Class<?>) type;",
      "info" : "VariableDeclarationStatement[10395-10426]:VariableDeclarationStatement[10418-10449]"
    }, {
      "left" : "return cls.isArray()\n                    && isAssignable(cls.getComponentType(), toComponentType, typeVarAssigns);",
      "right" : "return cls.isArray()\n                    && isAssignable(cls.getComponentType(), toComponentType, typeVarAssigns);",
      "info" : "ReturnStatement[10483-10597]:ReturnStatement[10506-10620]"
    }, {
      "left" : "if (type instanceof GenericArrayType)",
      "right" : "if (type instanceof GenericArrayType)",
      "info" : "IfStatement[10617-10848]:IfStatement[10640-10871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10655-10848]:Block[10678-10871]"
    }, {
      "left" : "return isAssignable(((GenericArrayType) type).getGenericComponentType(),\n                    toComponentType, typeVarAssigns);",
      "right" : "return isAssignable(((GenericArrayType) type).getGenericComponentType(),\n                    toComponentType, typeVarAssigns);",
      "info" : "ReturnStatement[10712-10838]:ReturnStatement[10735-10861]"
    }, {
      "left" : "if (type instanceof WildcardType)",
      "right" : "if (type instanceof WildcardType)",
      "info" : "IfStatement[10858-11210]:IfStatement[10881-11233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10892-11210]:Block[10915-11233]"
    }, {
      "left" : "for (Type bound : getImplicitUpperBounds((WildcardType) type))",
      "right" : "for (Type bound : getImplicitUpperBounds((WildcardType) type))",
      "info" : "EnhancedForStatement[10981-11173]:EnhancedForStatement[11004-11196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11044-11173]:Block[11067-11196]"
    }, {
      "left" : "if (isAssignable(bound, toGenericArrayType))",
      "right" : "if (isAssignable(bound, toGenericArrayType))",
      "info" : "IfStatement[11062-11159]:IfStatement[11085-11182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11107-11159]:Block[11130-11182]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11129-11141]:ReturnStatement[11152-11164]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11187-11200]:ReturnStatement[11210-11223]"
    }, {
      "left" : "if (type instanceof TypeVariable<?>)",
      "right" : "if (type instanceof TypeVariable<?>)",
      "info" : "IfStatement[11220-11642]:IfStatement[11243-11665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11257-11642]:Block[11280-11665]"
    }, {
      "left" : "for (Type bound : getImplicitBounds((TypeVariable<?>) type))",
      "right" : "for (Type bound : getImplicitBounds((TypeVariable<?>) type))",
      "info" : "EnhancedForStatement[11415-11605]:EnhancedForStatement[11438-11628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11476-11605]:Block[11499-11628]"
    }, {
      "left" : "if (isAssignable(bound, toGenericArrayType))",
      "right" : "if (isAssignable(bound, toGenericArrayType))",
      "info" : "IfStatement[11494-11591]:IfStatement[11517-11614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11539-11591]:Block[11562-11614]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11561-11573]:ReturnStatement[11584-11596]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11619-11632]:ReturnStatement[11642-11655]"
    }, {
      "left" : "if (type instanceof ParameterizedType)",
      "right" : "if (type instanceof ParameterizedType)",
      "info" : "IfStatement[11652-11939]:IfStatement[11675-11962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11691-11939]:Block[11714-11962]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11916-11929]:ReturnStatement[11939-11952]"
    }, {
      "left" : "throw new IllegalStateException(\"found an unhandled type: \" + type);",
      "right" : "throw new IllegalStateException(\"found an unhandled type: \" + type);",
      "info" : "ThrowStatement[11949-12017]:ThrowStatement[11972-12040]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12461-12468]:Modifier[12484-12491]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12469-12475]:Modifier[12492-12498]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[12476-12483]:PrimitiveType[12499-12506]"
    }, {
      "left" : "isAssignable",
      "right" : "isAssignable",
      "info" : "SimpleName[12484-12496]:SimpleName[12507-12519]"
    }, {
      "left" : "Type type",
      "right" : "Type type",
      "info" : "SingleVariableDeclaration[12497-12506]:SingleVariableDeclaration[12520-12529]"
    }, {
      "left" : "WildcardType toWildcardType",
      "right" : "WildcardType toWildcardType",
      "info" : "SingleVariableDeclaration[12508-12535]:SingleVariableDeclaration[12531-12558]"
    }, {
      "left" : "Map<TypeVariable<?>, Type> typeVarAssigns",
      "right" : "Map<TypeVariable<?>, Type> typeVarAssigns",
      "info" : "SingleVariableDeclaration[12549-12590]:SingleVariableDeclaration[12572-12613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12592-15374]:Block[12615-15397]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[12602-12656]:IfStatement[12625-12679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12620-12656]:Block[12643-12679]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[12634-12646]:ReturnStatement[12657-12669]"
    }, {
      "left" : "if (toWildcardType == null)",
      "right" : "if (toWildcardType == null)",
      "info" : "IfStatement[12785-12850]:IfStatement[12808-12873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12813-12850]:Block[12836-12873]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12827-12840]:ReturnStatement[12850-12863]"
    }, {
      "left" : "if (toWildcardType.equals(type))",
      "right" : "if (toWildcardType.equals(type))",
      "info" : "IfStatement[12910-12979]:IfStatement[12933-13002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12943-12979]:Block[12966-13002]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[12957-12969]:ReturnStatement[12980-12992]"
    }, {
      "left" : "Type[] toUpperBounds = getImplicitUpperBounds(toWildcardType);",
      "right" : "Type[] toUpperBounds = getImplicitUpperBounds(toWildcardType);",
      "info" : "VariableDeclarationStatement[12989-13051]:VariableDeclarationStatement[13012-13074]"
    }, {
      "left" : "Type[] toLowerBounds = getImplicitLowerBounds(toWildcardType);",
      "right" : "Type[] toLowerBounds = getImplicitLowerBounds(toWildcardType);",
      "info" : "VariableDeclarationStatement[13060-13122]:VariableDeclarationStatement[13083-13145]"
    }, {
      "left" : "if (type instanceof WildcardType)",
      "right" : "if (type instanceof WildcardType)",
      "info" : "IfStatement[13132-14654]:IfStatement[13155-14677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13166-14654]:Block[13189-14677]"
    }, {
      "left" : "WildcardType wildcardType = (WildcardType) type;",
      "right" : "WildcardType wildcardType = (WildcardType) type;",
      "info" : "VariableDeclarationStatement[13180-13228]:VariableDeclarationStatement[13203-13251]"
    }, {
      "left" : "Type[] upperBounds = getImplicitUpperBounds(wildcardType);",
      "right" : "Type[] upperBounds = getImplicitUpperBounds(wildcardType);",
      "info" : "VariableDeclarationStatement[13241-13299]:VariableDeclarationStatement[13264-13322]"
    }, {
      "left" : "Type[] lowerBounds = getImplicitLowerBounds(wildcardType);",
      "right" : "Type[] lowerBounds = getImplicitLowerBounds(wildcardType);",
      "info" : "VariableDeclarationStatement[13312-13370]:VariableDeclarationStatement[13335-13393]"
    }, {
      "left" : "for (Type toBound : toUpperBounds)",
      "right" : "for (Type toBound : toUpperBounds)",
      "info" : "EnhancedForStatement[13384-13994]:EnhancedForStatement[13407-14017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13419-13994]:Block[13442-14017]"
    }, {
      "left" : "toBound = substituteTypeVariables(toBound, typeVarAssigns);",
      "right" : "toBound = substituteTypeVariables(toBound, typeVarAssigns);",
      "info" : "ExpressionStatement[13566-13625]:ExpressionStatement[13589-13648]"
    }, {
      "left" : "for (Type bound : upperBounds)",
      "right" : "for (Type bound : upperBounds)",
      "info" : "EnhancedForStatement[13797-13980]:EnhancedForStatement[13820-14003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13828-13980]:Block[13851-14003]"
    }, {
      "left" : "if (!isAssignable(bound, toBound, typeVarAssigns))",
      "right" : "if (!isAssignable(bound, toBound, typeVarAssigns))",
      "info" : "IfStatement[13850-13962]:IfStatement[13873-13985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13901-13962]:Block[13924-13985]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13927-13940]:ReturnStatement[13950-13963]"
    }, {
      "left" : "for (Type toBound : toLowerBounds)",
      "right" : "for (Type toBound : toLowerBounds)",
      "info" : "EnhancedForStatement[14008-14618]:EnhancedForStatement[14031-14641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14043-14618]:Block[14066-14641]"
    }, {
      "left" : "toBound = substituteTypeVariables(toBound, typeVarAssigns);",
      "right" : "toBound = substituteTypeVariables(toBound, typeVarAssigns);",
      "info" : "ExpressionStatement[14190-14249]:ExpressionStatement[14213-14272]"
    }, {
      "left" : "for (Type bound : lowerBounds)",
      "right" : "for (Type bound : lowerBounds)",
      "info" : "EnhancedForStatement[14421-14604]:EnhancedForStatement[14444-14627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14452-14604]:Block[14475-14627]"
    }, {
      "left" : "if (!isAssignable(toBound, bound, typeVarAssigns))",
      "right" : "if (!isAssignable(toBound, bound, typeVarAssigns))",
      "info" : "IfStatement[14474-14586]:IfStatement[14497-14609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14525-14586]:Block[14548-14609]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14551-14564]:ReturnStatement[14574-14587]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[14632-14644]:ReturnStatement[14655-14667]"
    }, {
      "left" : "for (Type toBound : toUpperBounds)",
      "right" : "for (Type toBound : toUpperBounds)",
      "info" : "EnhancedForStatement[14664-15000]:EnhancedForStatement[14687-15023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14699-15000]:Block[14722-15023]"
    }, {
      "left" : "if (!isAssignable(type, substituteTypeVariables(toBound, typeVarAssigns),\n                    typeVarAssigns))",
      "right" : "if (!isAssignable(type, substituteTypeVariables(toBound, typeVarAssigns),\n                    typeVarAssigns))",
      "info" : "IfStatement[14834-14990]:IfStatement[14857-15013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14945-14990]:Block[14968-15013]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14963-14976]:ReturnStatement[14986-14999]"
    }, {
      "left" : "for (Type toBound : toLowerBounds)",
      "right" : "for (Type toBound : toLowerBounds)",
      "info" : "EnhancedForStatement[15010-15346]:EnhancedForStatement[15033-15369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15045-15346]:Block[15068-15369]"
    }, {
      "left" : "if (!isAssignable(substituteTypeVariables(toBound, typeVarAssigns), type,\n                    typeVarAssigns))",
      "right" : "if (!isAssignable(substituteTypeVariables(toBound, typeVarAssigns), type,\n                    typeVarAssigns))",
      "info" : "IfStatement[15180-15336]:IfStatement[15203-15359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15291-15336]:Block[15314-15359]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15309-15322]:ReturnStatement[15332-15345]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15356-15368]:ReturnStatement[15379-15391]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15812-15819]:Modifier[15835-15842]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15820-15826]:Modifier[15843-15849]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[15827-15834]:PrimitiveType[15850-15857]"
    }, {
      "left" : "isAssignable",
      "right" : "isAssignable",
      "info" : "SimpleName[15835-15847]:SimpleName[15858-15870]"
    }, {
      "left" : "Type type",
      "right" : "Type type",
      "info" : "SingleVariableDeclaration[15848-15857]:SingleVariableDeclaration[15871-15880]"
    }, {
      "left" : "TypeVariable<?> toTypeVariable",
      "right" : "TypeVariable<?> toTypeVariable",
      "info" : "SingleVariableDeclaration[15859-15889]:SingleVariableDeclaration[15882-15912]"
    }, {
      "left" : "Map<TypeVariable<?>, Type> typeVarAssigns",
      "right" : "Map<TypeVariable<?>, Type> typeVarAssigns",
      "info" : "SingleVariableDeclaration[15903-15944]:SingleVariableDeclaration[15926-15967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15946-17131]:Block[15969-17154]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[15956-16010]:IfStatement[15979-16033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15974-16010]:Block[15997-16033]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15988-16000]:ReturnStatement[16011-16023]"
    }, {
      "left" : "if (toTypeVariable == null)",
      "right" : "if (toTypeVariable == null)",
      "info" : "IfStatement[16139-16204]:IfStatement[16162-16227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16167-16204]:Block[16190-16227]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16181-16194]:ReturnStatement[16204-16217]"
    }, {
      "left" : "if (toTypeVariable.equals(type))",
      "right" : "if (toTypeVariable.equals(type))",
      "info" : "IfStatement[16264-16333]:IfStatement[16287-16356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16297-16333]:Block[16320-16356]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[16311-16323]:ReturnStatement[16334-16346]"
    }, {
      "left" : "if (type instanceof TypeVariable<?>)",
      "right" : "if (type instanceof TypeVariable<?>)",
      "info" : "IfStatement[16343-16849]:IfStatement[16366-16872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16380-16849]:Block[16403-16872]"
    }, {
      "left" : "Type[] bounds = getImplicitBounds((TypeVariable<?>) type);",
      "right" : "Type[] bounds = getImplicitBounds((TypeVariable<?>) type);",
      "info" : "VariableDeclarationStatement[16600-16658]:VariableDeclarationStatement[16623-16681]"
    }, {
      "left" : "for (Type bound : bounds)",
      "right" : "for (Type bound : bounds)",
      "info" : "EnhancedForStatement[16672-16839]:EnhancedForStatement[16695-16862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16698-16839]:Block[16721-16862]"
    }, {
      "left" : "if (isAssignable(bound, toTypeVariable, typeVarAssigns))",
      "right" : "if (isAssignable(bound, toTypeVariable, typeVarAssigns))",
      "info" : "IfStatement[16716-16825]:IfStatement[16739-16848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16773-16825]:Block[16796-16848]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[16795-16807]:ReturnStatement[16818-16830]"
    }, {
      "left" : "if (type instanceof Class<?> || type instanceof ParameterizedType\n                || type instanceof GenericArrayType || type instanceof WildcardType)",
      "right" : "if (type instanceof Class<?> || type instanceof ParameterizedType\n                || type instanceof GenericArrayType || type instanceof WildcardType)",
      "info" : "IfStatement[16859-17047]:IfStatement[16882-17070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17010-17047]:Block[17033-17070]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17024-17037]:ReturnStatement[17047-17060]"
    }, {
      "left" : "throw new IllegalStateException(\"found an unhandled type: \" + type);",
      "right" : "throw new IllegalStateException(\"found an unhandled type: \" + type);",
      "info" : "ThrowStatement[17057-17125]:ThrowStatement[17080-17148]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17383-17390]:Modifier[17406-17413]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[17391-17397]:Modifier[17414-17420]"
    }, {
      "left" : "Type",
      "right" : "Type",
      "info" : "SimpleType[17398-17402]:SimpleType[17421-17425]"
    }, {
      "left" : "substituteTypeVariables",
      "right" : "substituteTypeVariables",
      "info" : "SimpleName[17403-17426]:SimpleName[17426-17449]"
    }, {
      "left" : "Type type",
      "right" : "Type type",
      "info" : "SingleVariableDeclaration[17427-17436]:SingleVariableDeclaration[17450-17459]"
    }, {
      "left" : "Map<TypeVariable<?>, Type> typeVarAssigns",
      "right" : "Map<TypeVariable<?>, Type> typeVarAssigns",
      "info" : "SingleVariableDeclaration[17438-17479]:SingleVariableDeclaration[17461-17502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17481-17878]:Block[17504-17901]"
    }, {
      "left" : "if (type instanceof TypeVariable<?> && typeVarAssigns != null)",
      "right" : "if (type instanceof TypeVariable<?> && typeVarAssigns != null)",
      "info" : "IfStatement[17491-17850]:IfStatement[17514-17873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17554-17850]:Block[17577-17873]"
    }, {
      "left" : "Type replacementType = typeVarAssigns.get(type);",
      "right" : "Type replacementType = typeVarAssigns.get(type);",
      "info" : "VariableDeclarationStatement[17568-17616]:VariableDeclarationStatement[17591-17639]"
    }, {
      "left" : "if (replacementType == null)",
      "right" : "if (replacementType == null)",
      "info" : "IfStatement[17630-17803]:IfStatement[17653-17826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17659-17803]:Block[17682-17826]"
    }, {
      "left" : "throw new IllegalArgumentException(\"missing assignment type for type variable \"\n                        + type);",
      "right" : "throw new IllegalArgumentException(\"missing assignment type for type variable \"\n                        + type);",
      "info" : "ThrowStatement[17677-17789]:ThrowStatement[17700-17812]"
    }, {
      "left" : "return replacementType;",
      "right" : "return replacementType;",
      "info" : "ReturnStatement[17817-17840]:ReturnStatement[17840-17863]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[17860-17872]:ReturnStatement[17883-17895]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18393-18399]:Modifier[18416-18422]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18400-18406]:Modifier[18423-18429]"
    }, {
      "left" : "Map<TypeVariable<?>, Type>",
      "right" : "Map<TypeVariable<?>, Type>",
      "info" : "ParameterizedType[18407-18433]:ParameterizedType[18430-18456]"
    }, {
      "left" : "getTypeArguments",
      "right" : "getTypeArguments",
      "info" : "SimpleName[18434-18450]:SimpleName[18457-18473]"
    }, {
      "left" : "ParameterizedType type",
      "right" : "ParameterizedType type",
      "info" : "SingleVariableDeclaration[18451-18473]:SingleVariableDeclaration[18474-18496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18475-18545]:Block[18498-18568]"
    }, {
      "left" : "return getTypeArguments(type, getRawType(type), null);",
      "right" : "return getTypeArguments(type, getRawType(type), null);",
      "info" : "ReturnStatement[18485-18539]:ReturnStatement[18508-18562]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20634-20640]:Modifier[20657-20663]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20641-20647]:Modifier[20664-20670]"
    }, {
      "left" : "Map<TypeVariable<?>, Type>",
      "right" : "Map<TypeVariable<?>, Type>",
      "info" : "ParameterizedType[20648-20674]:ParameterizedType[20671-20697]"
    }, {
      "left" : "getTypeArguments",
      "right" : "getTypeArguments",
      "info" : "SimpleName[20675-20691]:SimpleName[20698-20714]"
    }, {
      "left" : "Type type",
      "right" : "Type type",
      "info" : "SingleVariableDeclaration[20692-20701]:SingleVariableDeclaration[20715-20724]"
    }, {
      "left" : "Class<?> toClass",
      "right" : "Class<?> toClass",
      "info" : "SingleVariableDeclaration[20703-20719]:SingleVariableDeclaration[20726-20742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20721-20782]:Block[20744-20805]"
    }, {
      "left" : "return getTypeArguments(type, toClass, null);",
      "right" : "return getTypeArguments(type, toClass, null);",
      "info" : "ReturnStatement[20731-20776]:ReturnStatement[20754-20799]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21096-21103]:Modifier[21119-21126]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[21104-21110]:Modifier[21127-21133]"
    }, {
      "left" : "Map<TypeVariable<?>, Type>",
      "right" : "Map<TypeVariable<?>, Type>",
      "info" : "ParameterizedType[21111-21137]:ParameterizedType[21134-21160]"
    }, {
      "left" : "getTypeArguments",
      "right" : "getTypeArguments",
      "info" : "SimpleName[21138-21154]:SimpleName[21161-21177]"
    }, {
      "left" : "Type type",
      "right" : "Type type",
      "info" : "SingleVariableDeclaration[21155-21164]:SingleVariableDeclaration[21178-21187]"
    }, {
      "left" : "Class<?> toClass",
      "right" : "Class<?> toClass",
      "info" : "SingleVariableDeclaration[21166-21182]:SingleVariableDeclaration[21189-21205]"
    }, {
      "left" : "Map<TypeVariable<?>, Type> subtypeVarAssigns",
      "right" : "Map<TypeVariable<?>, Type> subtypeVarAssigns",
      "info" : "SingleVariableDeclaration[21196-21240]:SingleVariableDeclaration[21219-21263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21242-22791]:Block[21265-22814]"
    }, {
      "left" : "if (type instanceof Class<?>)",
      "right" : "if (type instanceof Class<?>)",
      "info" : "IfStatement[21252-21375]:IfStatement[21275-21398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21282-21375]:Block[21305-21398]"
    }, {
      "left" : "return getTypeArguments((Class<?>) type, toClass, subtypeVarAssigns);",
      "right" : "return getTypeArguments((Class<?>) type, toClass, subtypeVarAssigns);",
      "info" : "ReturnStatement[21296-21365]:ReturnStatement[21319-21388]"
    }, {
      "left" : "if (type instanceof ParameterizedType)",
      "right" : "if (type instanceof ParameterizedType)",
      "info" : "IfStatement[21385-21526]:IfStatement[21408-21549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21424-21526]:Block[21447-21549]"
    }, {
      "left" : "return getTypeArguments((ParameterizedType) type, toClass, subtypeVarAssigns);",
      "right" : "return getTypeArguments((ParameterizedType) type, toClass, subtypeVarAssigns);",
      "info" : "ReturnStatement[21438-21516]:ReturnStatement[21461-21539]"
    }, {
      "left" : "if (type instanceof GenericArrayType)",
      "right" : "if (type instanceof GenericArrayType)",
      "info" : "IfStatement[21536-21773]:IfStatement[21559-21796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21574-21773]:Block[21597-21796]"
    }, {
      "left" : "return getTypeArguments(((GenericArrayType) type).getGenericComponentType(), toClass\n                    .isArray() ? toClass.getComponentType() : toClass, subtypeVarAssigns);",
      "right" : "return getTypeArguments(((GenericArrayType) type).getGenericComponentType(), toClass\n                    .isArray() ? toClass.getComponentType() : toClass, subtypeVarAssigns);",
      "info" : "ReturnStatement[21588-21763]:ReturnStatement[21611-21786]"
    }, {
      "left" : "if (type instanceof WildcardType)",
      "right" : "if (type instanceof WildcardType)",
      "info" : "IfStatement[21887-22278]:IfStatement[21910-22301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21921-22278]:Block[21944-22301]"
    }, {
      "left" : "for (Type bound : getImplicitUpperBounds((WildcardType) type))",
      "right" : "for (Type bound : getImplicitUpperBounds((WildcardType) type))",
      "info" : "EnhancedForStatement[21935-22242]:EnhancedForStatement[21958-22265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21998-22242]:Block[22021-22265]"
    }, {
      "left" : "if (isAssignable(bound, toClass))",
      "right" : "if (isAssignable(bound, toClass))",
      "info" : "IfStatement[22095-22228]:IfStatement[22118-22251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22129-22228]:Block[22152-22251]"
    }, {
      "left" : "return getTypeArguments(bound, toClass, subtypeVarAssigns);",
      "right" : "return getTypeArguments(bound, toClass, subtypeVarAssigns);",
      "info" : "ReturnStatement[22151-22210]:ReturnStatement[22174-22233]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[22256-22268]:ReturnStatement[22279-22291]"
    }, {
      "left" : "if (type instanceof TypeVariable<?>)",
      "right" : "if (type instanceof TypeVariable<?>)",
      "info" : "IfStatement[22301-22693]:IfStatement[22324-22716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22338-22693]:Block[22361-22716]"
    }, {
      "left" : "for (Type bound : getImplicitBounds((TypeVariable<?>) type))",
      "right" : "for (Type bound : getImplicitBounds((TypeVariable<?>) type))",
      "info" : "EnhancedForStatement[22352-22657]:EnhancedForStatement[22375-22680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22413-22657]:Block[22436-22680]"
    }, {
      "left" : "if (isAssignable(bound, toClass))",
      "right" : "if (isAssignable(bound, toClass))",
      "info" : "IfStatement[22510-22643]:IfStatement[22533-22666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22544-22643]:Block[22567-22666]"
    }, {
      "left" : "return getTypeArguments(bound, toClass, subtypeVarAssigns);",
      "right" : "return getTypeArguments(bound, toClass, subtypeVarAssigns);",
      "info" : "ReturnStatement[22566-22625]:ReturnStatement[22589-22648]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[22671-22683]:ReturnStatement[22694-22706]"
    }, {
      "left" : "throw new IllegalStateException(\"found an unhandled type: \" + type);",
      "right" : "throw new IllegalStateException(\"found an unhandled type: \" + type);",
      "info" : "ThrowStatement[22717-22785]:ThrowStatement[22740-22808]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23123-23130]:Modifier[23146-23153]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23131-23137]:Modifier[23154-23160]"
    }, {
      "left" : "Map<TypeVariable<?>, Type>",
      "right" : "Map<TypeVariable<?>, Type>",
      "info" : "ParameterizedType[23138-23164]:ParameterizedType[23161-23187]"
    }, {
      "left" : "getTypeArguments",
      "right" : "getTypeArguments",
      "info" : "SimpleName[23165-23181]:SimpleName[23188-23204]"
    }, {
      "left" : "ParameterizedType parameterizedType",
      "right" : "ParameterizedType parameterizedType",
      "info" : "SingleVariableDeclaration[23195-23230]:SingleVariableDeclaration[23218-23253]"
    }, {
      "left" : "Class<?> toClass",
      "right" : "Class<?> toClass",
      "info" : "SingleVariableDeclaration[23232-23248]:SingleVariableDeclaration[23255-23271]"
    }, {
      "left" : "Map<TypeVariable<?>, Type> subtypeVarAssigns",
      "right" : "Map<TypeVariable<?>, Type> subtypeVarAssigns",
      "info" : "SingleVariableDeclaration[23262-23306]:SingleVariableDeclaration[23285-23329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23308-25080]:Block[23331-25103]"
    }, {
      "left" : "Class<?> cls = getRawType(parameterizedType);",
      "right" : "Class<?> cls = getRawType(parameterizedType);",
      "info" : "VariableDeclarationStatement[23318-23363]:VariableDeclarationStatement[23341-23386]"
    }, {
      "left" : "if (!isAssignable(cls, toClass))",
      "right" : "if (!isAssignable(cls, toClass))",
      "info" : "IfStatement[23413-23482]:IfStatement[23436-23505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23446-23482]:Block[23469-23505]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[23460-23472]:ReturnStatement[23483-23495]"
    }, {
      "left" : "Type ownerType = parameterizedType.getOwnerType();",
      "right" : "Type ownerType = parameterizedType.getOwnerType();",
      "info" : "VariableDeclarationStatement[23492-23542]:VariableDeclarationStatement[23515-23565]"
    }, {
      "left" : "Map<TypeVariable<?>, Type> typeVarAssigns;",
      "right" : "Map<TypeVariable<?>, Type> typeVarAssigns;",
      "info" : "VariableDeclarationStatement[23551-23593]:VariableDeclarationStatement[23574-23616]"
    }, {
      "left" : "if (ownerType instanceof ParameterizedType)",
      "right" : "if (ownerType instanceof ParameterizedType)",
      "info" : "IfStatement[23603-24192]:IfStatement[23626-24215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23647-23940]:Block[23670-23963]"
    }, {
      "left" : "ParameterizedType parameterizedOwnerType = (ParameterizedType) ownerType;",
      "right" : "ParameterizedType parameterizedOwnerType = (ParameterizedType) ownerType;",
      "info" : "VariableDeclarationStatement[23711-23784]:VariableDeclarationStatement[23734-23807]"
    }, {
      "left" : "typeVarAssigns = getTypeArguments(parameterizedOwnerType,\n                    getRawType(parameterizedOwnerType), subtypeVarAssigns);",
      "right" : "typeVarAssigns = getTypeArguments(parameterizedOwnerType,\n                    getRawType(parameterizedOwnerType), subtypeVarAssigns);",
      "info" : "ExpressionStatement[23797-23930]:ExpressionStatement[23820-23953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23946-24192]:Block[23969-24215]"
    }, {
      "left" : "typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>()\n                    : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);",
      "right" : "typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>()\n                    : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);",
      "info" : "ExpressionStatement[24024-24182]:ExpressionStatement[24047-24205]"
    }, {
      "left" : "Type[] typeArgs = parameterizedType.getActualTypeArguments();",
      "right" : "Type[] typeArgs = parameterizedType.getActualTypeArguments();",
      "info" : "VariableDeclarationStatement[24260-24321]:VariableDeclarationStatement[24283-24344]"
    }, {
      "left" : "TypeVariable<?>[] typeParams = cls.getTypeParameters();",
      "right" : "TypeVariable<?>[] typeParams = cls.getTypeParameters();",
      "info" : "VariableDeclarationStatement[24401-24456]:VariableDeclarationStatement[24424-24479]"
    }, {
      "left" : "for (int i = 0; i < typeParams.length; i++)",
      "right" : "for (int i = 0; i < typeParams.length; i++)",
      "info" : "ForStatement[24530-24770]:ForStatement[24553-24793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24574-24770]:Block[24597-24793]"
    }, {
      "left" : "Type typeArg = typeArgs[i];",
      "right" : "Type typeArg = typeArgs[i];",
      "info" : "VariableDeclarationStatement[24588-24615]:VariableDeclarationStatement[24611-24638]"
    }, {
      "left" : "typeVarAssigns.put(typeParams[i], typeVarAssigns.containsKey(typeArg) ? typeVarAssigns\n                    .get(typeArg) : typeArg);",
      "right" : "typeVarAssigns.put(typeParams[i], typeVarAssigns.containsKey(typeArg) ? typeVarAssigns\n                    .get(typeArg) : typeArg);",
      "info" : "ExpressionStatement[24628-24760]:ExpressionStatement[24651-24783]"
    }, {
      "left" : "if (toClass.equals(cls))",
      "right" : "if (toClass.equals(cls))",
      "info" : "IfStatement[24780-24903]:IfStatement[24803-24926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24805-24903]:Block[24828-24926]"
    }, {
      "left" : "return typeVarAssigns;",
      "right" : "return typeVarAssigns;",
      "info" : "ReturnStatement[24871-24893]:ReturnStatement[24894-24916]"
    }, {
      "left" : "return getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns);",
      "right" : "return getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns);",
      "info" : "ReturnStatement[24989-25074]:ReturnStatement[25012-25097]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25392-25399]:Modifier[25415-25422]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25400-25406]:Modifier[25423-25429]"
    }, {
      "left" : "Map<TypeVariable<?>, Type>",
      "right" : "Map<TypeVariable<?>, Type>",
      "info" : "ParameterizedType[25407-25433]:ParameterizedType[25430-25456]"
    }, {
      "left" : "getTypeArguments",
      "right" : "getTypeArguments",
      "info" : "SimpleName[25434-25450]:SimpleName[25457-25473]"
    }, {
      "left" : "Class<?> cls",
      "right" : "Class<?> cls",
      "info" : "SingleVariableDeclaration[25451-25463]:SingleVariableDeclaration[25474-25486]"
    }, {
      "left" : "Class<?> toClass",
      "right" : "Class<?> toClass",
      "info" : "SingleVariableDeclaration[25465-25481]:SingleVariableDeclaration[25488-25504]"
    }, {
      "left" : "Map<TypeVariable<?>, Type> subtypeVarAssigns",
      "right" : "Map<TypeVariable<?>, Type> subtypeVarAssigns",
      "info" : "SingleVariableDeclaration[25495-25539]:SingleVariableDeclaration[25518-25562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25541-26763]:Block[25564-26748]"
    }, {
      "left" : "if (!isAssignable(cls, toClass))",
      "right" : "if (!isAssignable(cls, toClass))",
      "info" : "IfStatement[25591-25660]:IfStatement[25614-25683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25624-25660]:Block[25647-25683]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[25638-25650]:ReturnStatement[25661-25673]"
    }, {
      "left" : "if (cls.isPrimitive())",
      "right" : "if (cls.isPrimitive())",
      "info" : "IfStatement[25708-26155]:IfStatement[25731-26178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25731-26155]:Block[25754-26178]"
    }, {
      "left" : "if (toClass.isPrimitive())",
      "right" : "if (toClass.isPrimitive())",
      "info" : "IfStatement[25789-26014]:IfStatement[25812-26037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25816-26014]:Block[25839-26037]"
    }, {
      "left" : "return new HashMap<TypeVariable<?>, Type>();",
      "right" : "return new HashMap<TypeVariable<?>, Type>();",
      "info" : "ReturnStatement[25956-26000]:ReturnStatement[25979-26023]"
    }, {
      "left" : "cls = ClassUtils.primitiveToWrapper(cls);",
      "right" : "cls = ClassUtils.primitiveToWrapper(cls);",
      "info" : "ExpressionStatement[26104-26145]:ExpressionStatement[26127-26168]"
    }, {
      "left" : "HashMap<TypeVariable<?>, Type> typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>()\n                : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);",
      "right" : "HashMap<TypeVariable<?>, Type> typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>()\n                : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);",
      "info" : "VariableDeclarationStatement[26240-26425]:VariableDeclarationStatement[26263-26448]"
    }, {
      "left" : "if (cls.getTypeParameters().length > 0 || toClass.equals(cls))",
      "right" : "if (toClass.equals(cls))",
      "info" : "IfStatement[26477-26586]:IfStatement[26500-26571]"
    }, {
      "left" : "toClass.equals(cls)",
      "right" : "toClass.equals(cls)",
      "info" : "MethodInvocation[26519-26538]:MethodInvocation[26504-26523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26540-26586]:Block[26525-26571]"
    }, {
      "left" : "return typeVarAssigns;",
      "right" : "return typeVarAssigns;",
      "info" : "ReturnStatement[26554-26576]:ReturnStatement[26539-26561]"
    }, {
      "left" : "return getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns);",
      "right" : "return getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns);",
      "info" : "ReturnStatement[26672-26757]:ReturnStatement[26657-26742]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28480-28486]:Modifier[28465-28471]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[28487-28493]:Modifier[28472-28478]"
    }, {
      "left" : "Map<TypeVariable<?>, Type>",
      "right" : "Map<TypeVariable<?>, Type>",
      "info" : "ParameterizedType[28494-28520]:ParameterizedType[28479-28505]"
    }, {
      "left" : "determineTypeArguments",
      "right" : "determineTypeArguments",
      "info" : "SimpleName[28521-28543]:SimpleName[28506-28528]"
    }, {
      "left" : "Class<?> cls",
      "right" : "Class<?> cls",
      "info" : "SingleVariableDeclaration[28544-28556]:SingleVariableDeclaration[28529-28541]"
    }, {
      "left" : "ParameterizedType superType",
      "right" : "ParameterizedType superType",
      "info" : "SingleVariableDeclaration[28570-28597]:SingleVariableDeclaration[28555-28582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28599-29727]:Block[28584-29712]"
    }, {
      "left" : "Class<?> superClass = getRawType(superType);",
      "right" : "Class<?> superClass = getRawType(superType);",
      "info" : "VariableDeclarationStatement[28609-28653]:VariableDeclarationStatement[28594-28638]"
    }, {
      "left" : "if (!isAssignable(cls, superClass))",
      "right" : "if (!isAssignable(cls, superClass))",
      "info" : "IfStatement[28694-28766]:IfStatement[28679-28751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28730-28766]:Block[28715-28751]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[28744-28756]:ReturnStatement[28729-28741]"
    }, {
      "left" : "if (cls.equals(superClass))",
      "right" : "if (cls.equals(superClass))",
      "info" : "IfStatement[28776-28881]:IfStatement[28761-28866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28804-28881]:Block[28789-28866]"
    }, {
      "left" : "return getTypeArguments(superType, superClass, null);",
      "right" : "return getTypeArguments(superType, superClass, null);",
      "info" : "ReturnStatement[28818-28871]:ReturnStatement[28803-28856]"
    }, {
      "left" : "Type midType = getClosestParentType(cls, superClass);",
      "right" : "Type midType = getClosestParentType(cls, superClass);",
      "info" : "VariableDeclarationStatement[28950-29003]:VariableDeclarationStatement[28935-28988]"
    }, {
      "left" : "if (midType instanceof Class<?>)",
      "right" : "if (midType instanceof Class<?>)",
      "info" : "IfStatement[29068-29186]:IfStatement[29053-29171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29101-29186]:Block[29086-29171]"
    }, {
      "left" : "return determineTypeArguments((Class<?>) midType, superType);",
      "right" : "return determineTypeArguments((Class<?>) midType, superType);",
      "info" : "ReturnStatement[29115-29176]:ReturnStatement[29100-29161]"
    }, {
      "left" : "ParameterizedType midParameterizedType = (ParameterizedType) midType;",
      "right" : "ParameterizedType midParameterizedType = (ParameterizedType) midType;",
      "info" : "VariableDeclarationStatement[29196-29265]:VariableDeclarationStatement[29181-29250]"
    }, {
      "left" : "Class<?> midClass = getRawType(midParameterizedType);",
      "right" : "Class<?> midClass = getRawType(midParameterizedType);",
      "info" : "VariableDeclarationStatement[29274-29327]:VariableDeclarationStatement[29259-29312]"
    }, {
      "left" : "Map<TypeVariable<?>, Type> typeVarAssigns = determineTypeArguments(midClass, superType);",
      "right" : "Map<TypeVariable<?>, Type> typeVarAssigns = determineTypeArguments(midClass, superType);",
      "info" : "VariableDeclarationStatement[29448-29536]:VariableDeclarationStatement[29433-29521]"
    }, {
      "left" : "mapTypeVariablesToArguments(cls, midParameterizedType, typeVarAssigns);",
      "right" : "mapTypeVariablesToArguments(cls, midParameterizedType, typeVarAssigns);",
      "info" : "ExpressionStatement[29618-29689]:ExpressionStatement[29603-29674]"
    }, {
      "left" : "return typeVarAssigns;",
      "right" : "return typeVarAssigns;",
      "info" : "ReturnStatement[29699-29721]:ReturnStatement[29684-29706]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30013-30020]:Modifier[29998-30005]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30021-30027]:Modifier[30006-30012]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[30029-30030]:TypeParameter[30014-30015]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[30032-30036]:PrimitiveType[30017-30021]"
    }, {
      "left" : "mapTypeVariablesToArguments",
      "right" : "mapTypeVariablesToArguments",
      "info" : "SimpleName[30037-30064]:SimpleName[30022-30049]"
    }, {
      "left" : "Class<T> cls",
      "right" : "Class<T> cls",
      "info" : "SingleVariableDeclaration[30065-30077]:SingleVariableDeclaration[30050-30062]"
    }, {
      "left" : "ParameterizedType parameterizedType",
      "right" : "ParameterizedType parameterizedType",
      "info" : "SingleVariableDeclaration[30091-30126]:SingleVariableDeclaration[30076-30111]"
    }, {
      "left" : "Map<TypeVariable<?>, Type> typeVarAssigns",
      "right" : "Map<TypeVariable<?>, Type> typeVarAssigns",
      "info" : "SingleVariableDeclaration[30128-30169]:SingleVariableDeclaration[30113-30154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30171-31950]:Block[30156-31935]"
    }, {
      "left" : "Type ownerType = parameterizedType.getOwnerType();",
      "right" : "Type ownerType = parameterizedType.getOwnerType();",
      "info" : "VariableDeclarationStatement[30261-30311]:VariableDeclarationStatement[30246-30296]"
    }, {
      "left" : "if (ownerType instanceof ParameterizedType)",
      "right" : "if (ownerType instanceof ParameterizedType)",
      "info" : "IfStatement[30321-30545]:IfStatement[30306-30530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30365-30545]:Block[30350-30530]"
    }, {
      "left" : "mapTypeVariablesToArguments(cls, (ParameterizedType) ownerType, typeVarAssigns);",
      "right" : "mapTypeVariablesToArguments(cls, (ParameterizedType) ownerType, typeVarAssigns);",
      "info" : "ExpressionStatement[30455-30535]:ExpressionStatement[30440-30520]"
    }, {
      "left" : "Type[] typeArgs = parameterizedType.getActualTypeArguments();",
      "right" : "Type[] typeArgs = parameterizedType.getActualTypeArguments();",
      "info" : "VariableDeclarationStatement[30820-30881]:VariableDeclarationStatement[30805-30866]"
    }, {
      "left" : "TypeVariable<?>[] typeVars = getRawType(parameterizedType).getTypeParameters();",
      "right" : "TypeVariable<?>[] typeVars = getRawType(parameterizedType).getTypeParameters();",
      "info" : "VariableDeclarationStatement[31052-31131]:VariableDeclarationStatement[31037-31116]"
    }, {
      "left" : "List<TypeVariable<Class<T>>> typeVarList = Arrays.asList(cls\n                .getTypeParameters());",
      "right" : "List<TypeVariable<Class<T>>> typeVarList = Arrays.asList(cls\n                .getTypeParameters());",
      "info" : "VariableDeclarationStatement[31230-31329]:VariableDeclarationStatement[31215-31314]"
    }, {
      "left" : "for (int i = 0; i < typeArgs.length; i++)",
      "right" : "for (int i = 0; i < typeArgs.length; i++)",
      "info" : "ForStatement[31339-31944]:ForStatement[31324-31929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31381-31944]:Block[31366-31929]"
    }, {
      "left" : "TypeVariable<?> typeVar = typeVars[i];",
      "right" : "TypeVariable<?> typeVar = typeVars[i];",
      "info" : "VariableDeclarationStatement[31395-31433]:VariableDeclarationStatement[31380-31418]"
    }, {
      "left" : "Type typeArg = typeArgs[i];",
      "right" : "Type typeArg = typeArgs[i];",
      "info" : "VariableDeclarationStatement[31446-31473]:VariableDeclarationStatement[31431-31458]"
    }, {
      "left" : "if (typeVarList.contains(typeArg)\n            // type variable of parameterizedType has an assignment in\n                    // the super type.\n                    && typeVarAssigns.containsKey(typeVar))",
      "right" : "if (typeVarList.contains(typeArg)\n            // type variable of parameterizedType has an assignment in\n                    // the super type.\n                    && typeVarAssigns.containsKey(typeVar))",
      "info" : "IfStatement[31558-31934]:IfStatement[31543-31919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31762-31934]:Block[31747-31919]"
    }, {
      "left" : "typeVarAssigns.put((TypeVariable<?>) typeArg, typeVarAssigns.get(typeVar));",
      "right" : "typeVarAssigns.put((TypeVariable<?>) typeArg, typeVarAssigns.get(typeVar));",
      "info" : "ExpressionStatement[31845-31920]:ExpressionStatement[31830-31905]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32240-32247]:Modifier[32225-32232]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32248-32254]:Modifier[32233-32239]"
    }, {
      "left" : "Type",
      "right" : "Type",
      "info" : "SimpleType[32255-32259]:SimpleType[32240-32244]"
    }, {
      "left" : "getClosestParentType",
      "right" : "getClosestParentType",
      "info" : "SimpleName[32260-32280]:SimpleName[32245-32265]"
    }, {
      "left" : "Class<?> cls",
      "right" : "Class<?> cls",
      "info" : "SingleVariableDeclaration[32281-32293]:SingleVariableDeclaration[32266-32278]"
    }, {
      "left" : "Class<?> superClass",
      "right" : "Class<?> superClass",
      "info" : "SingleVariableDeclaration[32295-32314]:SingleVariableDeclaration[32280-32299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32316-33908]:Block[32301-33893]"
    }, {
      "left" : "if (superClass.isInterface())",
      "right" : "if (superClass.isInterface())",
      "info" : "IfStatement[32405-33733]:IfStatement[32390-33718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32435-33733]:Block[32420-33718]"
    }, {
      "left" : "Type[] interfaceTypes = cls.getGenericInterfaces();",
      "right" : "Type[] interfaceTypes = cls.getGenericInterfaces();",
      "info" : "VariableDeclarationStatement[32512-32563]:VariableDeclarationStatement[32497-32548]"
    }, {
      "left" : "Type genericInterface = null;",
      "right" : "Type genericInterface = null;",
      "info" : "VariableDeclarationStatement[32640-32669]:VariableDeclarationStatement[32625-32654]"
    }, {
      "left" : "for (Type midType : interfaceTypes)",
      "right" : "for (Type midType : interfaceTypes)",
      "info" : "EnhancedForStatement[32744-33593]:EnhancedForStatement[32729-33578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32780-33593]:Block[32765-33578]"
    }, {
      "left" : "Class<?> midClass = null;",
      "right" : "Class<?> midClass = null;",
      "info" : "VariableDeclarationStatement[32798-32823]:VariableDeclarationStatement[32783-32808]"
    }, {
      "left" : "if (midType instanceof ParameterizedType)",
      "right" : "if (midType instanceof ParameterizedType)",
      "info" : "IfStatement[32841-33249]:IfStatement[32826-33234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32883-32974]:Block[32868-32959]"
    }, {
      "left" : "midClass = getRawType((ParameterizedType) midType);",
      "right" : "midClass = getRawType((ParameterizedType) midType);",
      "info" : "ExpressionStatement[32905-32956]:ExpressionStatement[32890-32941]"
    }, {
      "left" : "if (midType instanceof Class<?>)",
      "right" : "if (midType instanceof Class<?>)",
      "info" : "IfStatement[32980-33249]:IfStatement[32965-33234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33013-33083]:Block[32998-33068]"
    }, {
      "left" : "midClass = (Class<?>) midType;",
      "right" : "midClass = (Class<?>) midType;",
      "info" : "ExpressionStatement[33035-33065]:ExpressionStatement[33020-33050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33089-33249]:Block[33074-33234]"
    }, {
      "left" : "throw new IllegalStateException(\"Unexpected generic\"\n                            + \" interface type found: \" + midType);",
      "right" : "throw new IllegalStateException(\"Unexpected generic\"\n                            + \" interface type found: \" + midType);",
      "info" : "ThrowStatement[33111-33231]:ThrowStatement[33096-33216]"
    }, {
      "left" : "if (isAssignable(midClass, superClass)\n                        && isAssignable(genericInterface, (Type) midClass))",
      "right" : "if (isAssignable(midClass, superClass)\n                        && isAssignable(genericInterface, (Type) midClass))",
      "info" : "IfStatement[33397-33579]:IfStatement[33382-33564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33512-33579]:Block[33497-33564]"
    }, {
      "left" : "genericInterface = midType;",
      "right" : "genericInterface = midType;",
      "info" : "ExpressionStatement[33534-33561]:ExpressionStatement[33519-33546]"
    }, {
      "left" : "if (genericInterface != null)",
      "right" : "if (genericInterface != null)",
      "info" : "IfStatement[33637-33723]:IfStatement[33622-33708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33667-33723]:Block[33652-33708]"
    }, {
      "left" : "return genericInterface;",
      "right" : "return genericInterface;",
      "info" : "ReturnStatement[33685-33709]:ReturnStatement[33670-33694]"
    }, {
      "left" : "return cls.getGenericSuperclass();",
      "right" : "return cls.getGenericSuperclass();",
      "info" : "ReturnStatement[33868-33902]:ReturnStatement[33853-33887]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34214-34220]:Modifier[34199-34205]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[34221-34227]:Modifier[34206-34212]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[34228-34235]:PrimitiveType[34213-34220]"
    }, {
      "left" : "isInstance",
      "right" : "isInstance",
      "info" : "SimpleName[34236-34246]:SimpleName[34221-34231]"
    }, {
      "left" : "Object value",
      "right" : "Object value",
      "info" : "SingleVariableDeclaration[34247-34259]:SingleVariableDeclaration[34232-34244]"
    }, {
      "left" : "Type type",
      "right" : "Type type",
      "info" : "SingleVariableDeclaration[34261-34270]:SingleVariableDeclaration[34246-34255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34272-34501]:Block[34257-34486]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[34282-34337]:IfStatement[34267-34322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34300-34337]:Block[34285-34322]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[34314-34327]:ReturnStatement[34299-34312]"
    }, {
      "left" : "return value == null ? !(type instanceof Class<?>) || !((Class<?>) type).isPrimitive()\n                : isAssignable(value.getClass(), type, null);",
      "right" : "return value == null ? !(type instanceof Class<?>) || !((Class<?>) type).isPrimitive()\n                : isAssignable(value.getClass(), type, null);",
      "info" : "ReturnStatement[34347-34495]:ReturnStatement[34332-34480]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35406-35412]:Modifier[35391-35397]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[35413-35419]:Modifier[35398-35404]"
    }, {
      "left" : "Type[]",
      "right" : "Type[]",
      "info" : "ArrayType[35420-35426]:ArrayType[35405-35411]"
    }, {
      "left" : "normalizeUpperBounds",
      "right" : "normalizeUpperBounds",
      "info" : "SimpleName[35427-35447]:SimpleName[35412-35432]"
    }, {
      "left" : "Type[] bounds",
      "right" : "Type[] bounds",
      "info" : "SingleVariableDeclaration[35448-35461]:SingleVariableDeclaration[35433-35446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35463-36101]:Block[35448-36086]"
    }, {
      "left" : "if (bounds.length < 2)",
      "right" : "if (bounds.length < 2)",
      "info" : "IfStatement[35532-35593]:IfStatement[35517-35578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35555-35593]:Block[35540-35578]"
    }, {
      "left" : "return bounds;",
      "right" : "return bounds;",
      "info" : "ReturnStatement[35569-35583]:ReturnStatement[35554-35568]"
    }, {
      "left" : "Set<Type> types = new HashSet<Type>(bounds.length);",
      "right" : "Set<Type> types = new HashSet<Type>(bounds.length);",
      "info" : "VariableDeclarationStatement[35603-35654]:VariableDeclarationStatement[35588-35639]"
    }, {
      "left" : "for (Type type1 : bounds)",
      "right" : "for (Type type1 : bounds)",
      "info" : "EnhancedForStatement[35664-36040]:EnhancedForStatement[35649-36025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35690-36040]:Block[35675-36025]"
    }, {
      "left" : "boolean subtypeFound = false;",
      "right" : "boolean subtypeFound = false;",
      "info" : "VariableDeclarationStatement[35704-35733]:VariableDeclarationStatement[35689-35718]"
    }, {
      "left" : "for (Type type2 : bounds)",
      "right" : "for (Type type2 : bounds)",
      "info" : "EnhancedForStatement[35747-35948]:EnhancedForStatement[35732-35933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35773-35948]:Block[35758-35933]"
    }, {
      "left" : "if (type1 != type2 && isAssignable(type2, type1, null))",
      "right" : "if (type1 != type2 && isAssignable(type2, type1, null))",
      "info" : "IfStatement[35791-35934]:IfStatement[35776-35919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35847-35934]:Block[35832-35919]"
    }, {
      "left" : "subtypeFound = true;",
      "right" : "subtypeFound = true;",
      "info" : "ExpressionStatement[35869-35889]:ExpressionStatement[35854-35874]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35910-35916]:BreakStatement[35895-35901]"
    }, {
      "left" : "if (!subtypeFound)",
      "right" : "if (!subtypeFound)",
      "info" : "IfStatement[35962-36030]:IfStatement[35947-36015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35981-36030]:Block[35966-36015]"
    }, {
      "left" : "types.add(type1);",
      "right" : "types.add(type1);",
      "info" : "ExpressionStatement[35999-36016]:ExpressionStatement[35984-36001]"
    }, {
      "left" : "return types.toArray(new Type[types.size()]);",
      "right" : "return types.toArray(new Type[types.size()]);",
      "info" : "ReturnStatement[36050-36095]:ReturnStatement[36035-36080]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36534-36540]:Modifier[36519-36525]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36541-36547]:Modifier[36526-36532]"
    }, {
      "left" : "Type[]",
      "right" : "Type[]",
      "info" : "ArrayType[36548-36554]:ArrayType[36533-36539]"
    }, {
      "left" : "getImplicitBounds",
      "right" : "getImplicitBounds",
      "info" : "SimpleName[36555-36572]:SimpleName[36540-36557]"
    }, {
      "left" : "TypeVariable<?> typeVariable",
      "right" : "TypeVariable<?> typeVariable",
      "info" : "SingleVariableDeclaration[36573-36601]:SingleVariableDeclaration[36558-36586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36603-36757]:Block[36588-36742]"
    }, {
      "left" : "Type[] bounds = typeVariable.getBounds();",
      "right" : "Type[] bounds = typeVariable.getBounds();",
      "info" : "VariableDeclarationStatement[36613-36654]:VariableDeclarationStatement[36598-36639]"
    }, {
      "left" : "return bounds.length == 0 ? new Type[] { Object.class } : normalizeUpperBounds(bounds);",
      "right" : "return bounds.length == 0 ? new Type[] { Object.class } : normalizeUpperBounds(bounds);",
      "info" : "ReturnStatement[36664-36751]:ReturnStatement[36649-36736]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37214-37220]:Modifier[37199-37205]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[37221-37227]:Modifier[37206-37212]"
    }, {
      "left" : "Type[]",
      "right" : "Type[]",
      "info" : "ArrayType[37228-37234]:ArrayType[37213-37219]"
    }, {
      "left" : "getImplicitUpperBounds",
      "right" : "getImplicitUpperBounds",
      "info" : "SimpleName[37235-37257]:SimpleName[37220-37242]"
    }, {
      "left" : "WildcardType wildcardType",
      "right" : "WildcardType wildcardType",
      "info" : "SingleVariableDeclaration[37258-37283]:SingleVariableDeclaration[37243-37268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37285-37444]:Block[37270-37429]"
    }, {
      "left" : "Type[] bounds = wildcardType.getUpperBounds();",
      "right" : "Type[] bounds = wildcardType.getUpperBounds();",
      "info" : "VariableDeclarationStatement[37295-37341]:VariableDeclarationStatement[37280-37326]"
    }, {
      "left" : "return bounds.length == 0 ? new Type[] { Object.class } : normalizeUpperBounds(bounds);",
      "right" : "return bounds.length == 0 ? new Type[] { Object.class } : normalizeUpperBounds(bounds);",
      "info" : "ReturnStatement[37351-37438]:ReturnStatement[37336-37423]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37855-37861]:Modifier[37840-37846]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[37862-37868]:Modifier[37847-37853]"
    }, {
      "left" : "Type[]",
      "right" : "Type[]",
      "info" : "ArrayType[37869-37875]:ArrayType[37854-37860]"
    }, {
      "left" : "getImplicitLowerBounds",
      "right" : "getImplicitLowerBounds",
      "info" : "SimpleName[37876-37898]:SimpleName[37861-37883]"
    }, {
      "left" : "WildcardType wildcardType",
      "right" : "WildcardType wildcardType",
      "info" : "SingleVariableDeclaration[37899-37924]:SingleVariableDeclaration[37884-37909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37926-38055]:Block[37911-38040]"
    }, {
      "left" : "Type[] bounds = wildcardType.getLowerBounds();",
      "right" : "Type[] bounds = wildcardType.getLowerBounds();",
      "info" : "VariableDeclarationStatement[37936-37982]:VariableDeclarationStatement[37921-37967]"
    }, {
      "left" : "return bounds.length == 0 ? new Type[] { null } : bounds;",
      "right" : "return bounds.length == 0 ? new Type[] { null } : bounds;",
      "info" : "ReturnStatement[37992-38049]:ReturnStatement[37977-38034]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38724-38730]:Modifier[38709-38715]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[38731-38737]:Modifier[38716-38722]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[38738-38745]:PrimitiveType[38723-38730]"
    }, {
      "left" : "typesSatisfyVariables",
      "right" : "typesSatisfyVariables",
      "info" : "SimpleName[38746-38767]:SimpleName[38731-38752]"
    }, {
      "left" : "Map<TypeVariable<?>, Type> typeVarAssigns",
      "right" : "Map<TypeVariable<?>, Type> typeVarAssigns",
      "info" : "SingleVariableDeclaration[38768-38809]:SingleVariableDeclaration[38753-38794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38811-39391]:Block[38796-39376]"
    }, {
      "left" : "for (Map.Entry<TypeVariable<?>, Type> entry : typeVarAssigns.entrySet())",
      "right" : "for (Map.Entry<TypeVariable<?>, Type> entry : typeVarAssigns.entrySet())",
      "info" : "EnhancedForStatement[38925-39363]:EnhancedForStatement[38910-39348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38998-39363]:Block[38983-39348]"
    }, {
      "left" : "TypeVariable<?> typeVar = entry.getKey();",
      "right" : "TypeVariable<?> typeVar = entry.getKey();",
      "info" : "VariableDeclarationStatement[39012-39053]:VariableDeclarationStatement[38997-39038]"
    }, {
      "left" : "Type type = entry.getValue();",
      "right" : "Type type = entry.getValue();",
      "info" : "VariableDeclarationStatement[39066-39095]:VariableDeclarationStatement[39051-39080]"
    }, {
      "left" : "for (Type bound : getImplicitBounds(typeVar))",
      "right" : "for (Type bound : getImplicitBounds(typeVar))",
      "info" : "EnhancedForStatement[39109-39353]:EnhancedForStatement[39094-39338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39155-39353]:Block[39140-39338]"
    }, {
      "left" : "if (!isAssignable(type, substituteTypeVariables(bound, typeVarAssigns),\n                        typeVarAssigns))",
      "right" : "if (!isAssignable(type, substituteTypeVariables(bound, typeVarAssigns),\n                        typeVarAssigns))",
      "info" : "IfStatement[39173-39339]:IfStatement[39158-39324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39286-39339]:Block[39271-39324]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[39308-39321]:ReturnStatement[39293-39306]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[39373-39385]:ReturnStatement[39358-39370]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[39702-39709]:Modifier[39687-39694]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39710-39716]:Modifier[39695-39701]"
    }, {
      "left" : "Class<?>",
      "right" : "Class<?>",
      "info" : "ParameterizedType[39717-39725]:ParameterizedType[39702-39710]"
    }, {
      "left" : "getRawType",
      "right" : "getRawType",
      "info" : "SimpleName[39726-39736]:SimpleName[39711-39721]"
    }, {
      "left" : "ParameterizedType parameterizedType",
      "right" : "ParameterizedType parameterizedType",
      "info" : "SingleVariableDeclaration[39737-39772]:SingleVariableDeclaration[39722-39757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39774-40336]:Block[39759-40321]"
    }, {
      "left" : "Type rawType = parameterizedType.getRawType();",
      "right" : "Type rawType = parameterizedType.getRawType();",
      "info" : "VariableDeclarationStatement[39784-39830]:VariableDeclarationStatement[39769-39815]"
    }, {
      "left" : "if (!(rawType instanceof Class<?>))",
      "right" : "if (!(rawType instanceof Class<?>))",
      "info" : "IfStatement[40156-40294]:IfStatement[40141-40279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40192-40294]:Block[40177-40279]"
    }, {
      "left" : "throw new IllegalStateException(\"Wait... What!? Type of rawType: \" + rawType);",
      "right" : "throw new IllegalStateException(\"Wait... What!? Type of rawType: \" + rawType);",
      "info" : "ThrowStatement[40206-40284]:ThrowStatement[40191-40269]"
    }, {
      "left" : "return (Class<?>) rawType;",
      "right" : "return (Class<?>) rawType;",
      "info" : "ReturnStatement[40304-40330]:ReturnStatement[40289-40315]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[40959-40965]:Modifier[40944-40950]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[40966-40972]:Modifier[40951-40957]"
    }, {
      "left" : "Class<?>",
      "right" : "Class<?>",
      "info" : "ParameterizedType[40973-40981]:ParameterizedType[40958-40966]"
    }, {
      "left" : "getRawType",
      "right" : "getRawType",
      "info" : "SimpleName[40982-40992]:SimpleName[40967-40977]"
    }, {
      "left" : "Type type",
      "right" : "Type type",
      "info" : "SingleVariableDeclaration[40993-41002]:SingleVariableDeclaration[40978-40987]"
    }, {
      "left" : "Type assigningType",
      "right" : "Type assigningType",
      "info" : "SingleVariableDeclaration[41004-41022]:SingleVariableDeclaration[40989-41007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41024-43217]:Block[41009-43202]"
    }, {
      "left" : "if (type instanceof Class<?>)",
      "right" : "if (type instanceof Class<?>)",
      "info" : "IfStatement[41034-41148]:IfStatement[41019-41133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41064-41148]:Block[41049-41133]"
    }, {
      "left" : "return (Class<?>) type;",
      "right" : "return (Class<?>) type;",
      "info" : "ReturnStatement[41115-41138]:ReturnStatement[41100-41123]"
    }, {
      "left" : "if (type instanceof ParameterizedType)",
      "right" : "if (type instanceof ParameterizedType)",
      "info" : "IfStatement[41158-41337]:IfStatement[41143-41322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41197-41337]:Block[41182-41322]"
    }, {
      "left" : "return getRawType((ParameterizedType) type);",
      "right" : "return getRawType((ParameterizedType) type);",
      "info" : "ReturnStatement[41283-41327]:ReturnStatement[41268-41312]"
    }, {
      "left" : "if (type instanceof TypeVariable<?>)",
      "right" : "if (type instanceof TypeVariable<?>)",
      "info" : "IfStatement[41347-42607]:IfStatement[41332-42592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41384-42607]:Block[41369-42592]"
    }, {
      "left" : "if (assigningType == null)",
      "right" : "if (assigningType == null)",
      "info" : "IfStatement[41398-41469]:IfStatement[41383-41454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41425-41469]:Block[41410-41454]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[41443-41455]:ReturnStatement[41428-41440]"
    }, {
      "left" : "Object genericDeclaration = ((TypeVariable<?>) type).getGenericDeclaration();",
      "right" : "Object genericDeclaration = ((TypeVariable<?>) type).getGenericDeclaration();",
      "info" : "VariableDeclarationStatement[41542-41619]:VariableDeclarationStatement[41527-41604]"
    }, {
      "left" : "if (!(genericDeclaration instanceof Class<?>))",
      "right" : "if (!(genericDeclaration instanceof Class<?>))",
      "info" : "IfStatement[41737-41828]:IfStatement[41722-41813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41784-41828]:Block[41769-41813]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[41802-41814]:ReturnStatement[41787-41799]"
    }, {
      "left" : "Map<TypeVariable<?>, Type> typeVarAssigns = getTypeArguments(assigningType,\n                    (Class<?>) genericDeclaration);",
      "right" : "Map<TypeVariable<?>, Type> typeVarAssigns = getTypeArguments(assigningType,\n                    (Class<?>) genericDeclaration);",
      "info" : "VariableDeclarationStatement[41957-42084]:VariableDeclarationStatement[41942-42069]"
    }, {
      "left" : "if (typeVarAssigns == null)",
      "right" : "if (typeVarAssigns == null)",
      "info" : "IfStatement[42203-42275]:IfStatement[42188-42260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42231-42275]:Block[42216-42260]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[42249-42261]:ReturnStatement[42234-42246]"
    }, {
      "left" : "Type typeArgument = typeVarAssigns.get(type);",
      "right" : "Type typeArgument = typeVarAssigns.get(type);",
      "info" : "VariableDeclarationStatement[42352-42397]:VariableDeclarationStatement[42337-42382]"
    }, {
      "left" : "if (typeArgument == null)",
      "right" : "if (typeArgument == null)",
      "info" : "IfStatement[42411-42481]:IfStatement[42396-42466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42437-42481]:Block[42422-42466]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[42455-42467]:ReturnStatement[42440-42452]"
    }, {
      "left" : "return getRawType(typeArgument, assigningType);",
      "right" : "return getRawType(typeArgument, assigningType);",
      "info" : "ReturnStatement[42550-42597]:ReturnStatement[42535-42582]"
    }, {
      "left" : "if (type instanceof GenericArrayType)",
      "right" : "if (type instanceof GenericArrayType)",
      "info" : "IfStatement[42617-42994]:IfStatement[42602-42979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42655-42994]:Block[42640-42979]"
    }, {
      "left" : "Class<?> rawComponentType = getRawType(((GenericArrayType) type)\n                    .getGenericComponentType(), assigningType);",
      "right" : "Class<?> rawComponentType = getRawType(((GenericArrayType) type)\n                    .getGenericComponentType(), assigningType);",
      "info" : "VariableDeclarationStatement[42707-42835]:VariableDeclarationStatement[42692-42820]"
    }, {
      "left" : "return Array.newInstance(rawComponentType, 0).getClass();",
      "right" : "return Array.newInstance(rawComponentType, 0).getClass();",
      "info" : "ReturnStatement[42927-42984]:ReturnStatement[42912-42969]"
    }, {
      "left" : "if (type instanceof WildcardType)",
      "right" : "if (type instanceof WildcardType)",
      "info" : "IfStatement[43071-43141]:IfStatement[43056-43126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43105-43141]:Block[43090-43126]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[43119-43131]:ReturnStatement[43104-43116]"
    }, {
      "left" : "throw new IllegalArgumentException(\"unknown type: \" + type);",
      "right" : "throw new IllegalArgumentException(\"unknown type: \" + type);",
      "info" : "ThrowStatement[43151-43211]:ThrowStatement[43136-43196]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43447-43453]:Modifier[43432-43438]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[43454-43460]:Modifier[43439-43445]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[43461-43468]:PrimitiveType[43446-43453]"
    }, {
      "left" : "isArrayType",
      "right" : "isArrayType",
      "info" : "SimpleName[43469-43480]:SimpleName[43454-43465]"
    }, {
      "left" : "Type type",
      "right" : "Type type",
      "info" : "SingleVariableDeclaration[43481-43490]:SingleVariableDeclaration[43466-43475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43492-43607]:Block[43477-43592]"
    }, {
      "left" : "return type instanceof GenericArrayType || type instanceof Class<?> && ((Class<?>) type).isArray();",
      "right" : "return type instanceof GenericArrayType || type instanceof Class<?> && ((Class<?>) type).isArray();",
      "info" : "ReturnStatement[43502-43601]:ReturnStatement[43487-43586]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43796-43802]:Modifier[43781-43787]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[43803-43809]:Modifier[43788-43794]"
    }, {
      "left" : "Type",
      "right" : "Type",
      "info" : "SimpleType[43810-43814]:SimpleType[43795-43799]"
    }, {
      "left" : "getArrayComponentType",
      "right" : "getArrayComponentType",
      "info" : "SimpleName[43815-43836]:SimpleName[43800-43821]"
    }, {
      "left" : "Type type",
      "right" : "Type type",
      "info" : "SingleVariableDeclaration[43837-43846]:SingleVariableDeclaration[43822-43831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43848-44172]:Block[43833-44157]"
    }, {
      "left" : "if (type instanceof Class<?>)",
      "right" : "if (type instanceof Class<?>)",
      "info" : "IfStatement[43858-44015]:IfStatement[43843-44000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43888-44015]:Block[43873-44000]"
    }, {
      "left" : "Class<?> clazz = (Class<?>) type;",
      "right" : "Class<?> clazz = (Class<?>) type;",
      "info" : "VariableDeclarationStatement[43902-43935]:VariableDeclarationStatement[43887-43920]"
    }, {
      "left" : "return clazz.isArray() ? clazz.getComponentType() : null;",
      "right" : "return clazz.isArray() ? clazz.getComponentType() : null;",
      "info" : "ReturnStatement[43948-44005]:ReturnStatement[43933-43990]"
    }, {
      "left" : "if (type instanceof GenericArrayType)",
      "right" : "if (type instanceof GenericArrayType)",
      "info" : "IfStatement[44024-44145]:IfStatement[44009-44130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44062-44145]:Block[44047-44130]"
    }, {
      "left" : "return ((GenericArrayType) type).getGenericComponentType();",
      "right" : "return ((GenericArrayType) type).getGenericComponentType();",
      "info" : "ReturnStatement[44076-44135]:ReturnStatement[44061-44120]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[44154-44166]:ReturnStatement[44139-44151]"
    } ]
  },
  "interFileMappings" : { }
}