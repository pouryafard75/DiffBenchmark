{
  "matchedElements" : [
 {
    "left" : "class : Compiler",
    "right" : "class : Compiler",
    "info" : "TypeDeclaration[1777-53334]:TypeDeclaration[1777-53398]"
  }, {
    "left" : "options",
    "right" : "options",
    "info" : "FieldDeclaration[2326-2357]:FieldDeclaration[2326-2357]"
  }, {
    "left" : "passes",
    "right" : "passes",
    "info" : "FieldDeclaration[2361-2394]:FieldDeclaration[2361-2394]"
  }, {
    "left" : "externs",
    "right" : "externs",
    "info" : "FieldDeclaration[2422-2458]:FieldDeclaration[2422-2458]"
  }, {
    "left" : "modules",
    "right" : "modules",
    "info" : "FieldDeclaration[2489-2520]:FieldDeclaration[2489-2520]"
  }, {
    "left" : "moduleGraph",
    "right" : "moduleGraph",
    "info" : "FieldDeclaration[2674-2708]:FieldDeclaration[2674-2708]"
  }, {
    "left" : "inputs",
    "right" : "inputs",
    "info" : "FieldDeclaration[2738-2773]:FieldDeclaration[2738-2773]"
  }, {
    "left" : "errorManager",
    "right" : "errorManager",
    "info" : "FieldDeclaration[2835-2869]:FieldDeclaration[2835-2869]"
  }, {
    "left" : "externsRoot",
    "right" : "externsRoot",
    "info" : "FieldDeclaration[2900-2917]:FieldDeclaration[2900-2917]"
  }, {
    "left" : "jsRoot",
    "right" : "jsRoot",
    "info" : "FieldDeclaration[2920-2932]:FieldDeclaration[2920-2932]"
  }, {
    "left" : "externAndJsRoot",
    "right" : "externAndJsRoot",
    "info" : "FieldDeclaration[2935-2956]:FieldDeclaration[2935-2956]"
  }, {
    "left" : "inputsByName",
    "right" : "inputsByName",
    "info" : "FieldDeclaration[2960-3008]:FieldDeclaration[2960-3008]"
  }, {
    "left" : "sourceMap",
    "right" : "sourceMap",
    "info" : "FieldDeclaration[3012-3069]:FieldDeclaration[3012-3069]"
  }, {
    "left" : "externExports",
    "right" : "externExports",
    "info" : "FieldDeclaration[3073-3157]:FieldDeclaration[3073-3157]"
  }, {
    "left" : "uniqueNameId",
    "right" : "uniqueNameId",
    "info" : "FieldDeclaration[3161-3281]:FieldDeclaration[3161-3281]"
  }, {
    "left" : "normalized",
    "right" : "normalized",
    "info" : "FieldDeclaration[3285-3473]:FieldDeclaration[3285-3473]"
  }, {
    "left" : "useThreads",
    "right" : "useThreads",
    "info" : "FieldDeclaration[3477-3544]:FieldDeclaration[3477-3544]"
  }, {
    "left" : "hasRegExpGlobalReferences",
    "right" : "hasRegExpGlobalReferences",
    "info" : "FieldDeclaration[3548-3698]:FieldDeclaration[3548-3698]"
  }, {
    "left" : "functionInformationMap",
    "right" : "functionInformationMap",
    "info" : "FieldDeclaration[3702-3794]:FieldDeclaration[3702-3794]"
  }, {
    "left" : "debugLog",
    "right" : "debugLog",
    "info" : "FieldDeclaration[3798-3888]:FieldDeclaration[3798-3888]"
  }, {
    "left" : "defaultCodingConvention",
    "right" : "defaultCodingConvention",
    "info" : "FieldDeclaration[3892-4017]:FieldDeclaration[3892-4017]"
  }, {
    "left" : "typeRegistry",
    "right" : "typeRegistry",
    "info" : "FieldDeclaration[4021-4057]:FieldDeclaration[4021-4057]"
  }, {
    "left" : "parserConfig",
    "right" : "parserConfig",
    "info" : "FieldDeclaration[4060-4095]:FieldDeclaration[4060-4095]"
  }, {
    "left" : "abstractInterpreter",
    "right" : "abstractInterpreter",
    "info" : "FieldDeclaration[4099-4154]:FieldDeclaration[4099-4154]"
  }, {
    "left" : "typeValidator",
    "right" : "typeValidator",
    "info" : "FieldDeclaration[4157-4193]:FieldDeclaration[4157-4193]"
  }, {
    "left" : "tracker",
    "right" : "tracker",
    "info" : "FieldDeclaration[4197-4231]:FieldDeclaration[4197-4231]"
  }, {
    "left" : "oldErrorReporter",
    "right" : "oldErrorReporter",
    "info" : "FieldDeclaration[4314-4432]:FieldDeclaration[4314-4432]"
  }, {
    "left" : "defaultErrorReporter",
    "right" : "defaultErrorReporter",
    "info" : "FieldDeclaration[4510-4604]:FieldDeclaration[4510-4604]"
  }, {
    "left" : "OPTIMIZE_LOOP_ERROR",
    "right" : "OPTIMIZE_LOOP_ERROR",
    "info" : "FieldDeclaration[4608-4832]:FieldDeclaration[4608-4832]"
  }, {
    "left" : "MOTION_ITERATIONS_ERROR",
    "right" : "MOTION_ITERATIONS_ERROR",
    "info" : "FieldDeclaration[4835-5014]:FieldDeclaration[4835-5014]"
  }, {
    "left" : "COMPILER_STACK_SIZE",
    "right" : "COMPILER_STACK_SIZE",
    "info" : "FieldDeclaration[5018-5075]:FieldDeclaration[5018-5075]"
  }, {
    "left" : "logger",
    "right" : "logger",
    "info" : "FieldDeclaration[5080-5355]:FieldDeclaration[5080-5355]"
  }, {
    "left" : "outStream",
    "right" : "outStream",
    "info" : "FieldDeclaration[5359-5395]:FieldDeclaration[5359-5395]"
  }, {
    "left" : "public Compiler()",
    "right" : "public Compiler()",
    "info" : "MethodDeclaration[5399-5536]:MethodDeclaration[5399-5536]"
  }, {
    "left" : "public Compiler(stream )",
    "right" : "public Compiler(stream )",
    "info" : "MethodDeclaration[5540-5736]:MethodDeclaration[5540-5736]"
  }, {
    "left" : "public Compiler(errorManager )",
    "right" : "public Compiler(errorManager )",
    "info" : "MethodDeclaration[5740-5905]:MethodDeclaration[5740-5905]"
  }, {
    "left" : "public setErrorManager(errorManager ) : void",
    "right" : "public setErrorManager(errorManager ) : void",
    "info" : "MethodDeclaration[5909-6214]:MethodDeclaration[5909-6214]"
  }, {
    "left" : "private createMessageFormatter() : ",
    "right" : "private createMessageFormatter() : ",
    "info" : "MethodDeclaration[6218-6507]:MethodDeclaration[6218-6507]"
  }, {
    "left" : "public initOptions(options ...) : void",
    "right" : "public initOptions(options ...) : void",
    "info" : "MethodDeclaration[6511-7116]:MethodDeclaration[6511-7116]"
  }, {
    "left" : "public init(externs , inputs , options ...) : void",
    "right" : "public init(externs , inputs , options ...) : void",
    "info" : "MethodDeclaration[7120-7406]:MethodDeclaration[7120-7406]"
  }, {
    "left" : "public init(externs , inputs , options ...) : void",
    "right" : "public init(externs , inputs , options ...) : void",
    "info" : "MethodDeclaration[7410-7778]:MethodDeclaration[7410-7778]"
  }, {
    "left" : "MODULE_DEPENDENCY_ERROR",
    "right" : "MODULE_DEPENDENCY_ERROR",
    "info" : "FieldDeclaration[7782-7998]:FieldDeclaration[7782-7998]"
  }, {
    "left" : "public init(externs , modules , options ...) : void",
    "right" : "public init(externs , modules , options ...) : void",
    "info" : "MethodDeclaration[8002-8325]:MethodDeclaration[8002-8325]"
  }, {
    "left" : "public initModules(externs , modules , options ...) : void",
    "right" : "public initModules(externs , modules , options ...) : void",
    "info" : "MethodDeclaration[8329-9407]:MethodDeclaration[8329-9407]"
  }, {
    "left" : "private initBasedOnOptions() : void",
    "right" : "private initBasedOnOptions() : void",
    "info" : "MethodDeclaration[9411-9663]:MethodDeclaration[9411-9663]"
  }, {
    "left" : "private makeCompilerInput(files , isExtern boolean) : ",
    "right" : "private makeCompilerInput(files , isExtern boolean) : ",
    "info" : "MethodDeclaration[9667-9940]:MethodDeclaration[9667-9940]"
  }, {
    "left" : "EMPTY_MODULE_LIST_ERROR",
    "right" : "EMPTY_MODULE_LIST_ERROR",
    "info" : "FieldDeclaration[9944-10114]:FieldDeclaration[9944-10114]"
  }, {
    "left" : "EMPTY_ROOT_MODULE_ERROR",
    "right" : "EMPTY_ROOT_MODULE_ERROR",
    "info" : "FieldDeclaration[10118-10313]:FieldDeclaration[10118-10313]"
  }, {
    "left" : "private checkFirstModule(modules ...) : void",
    "right" : "private checkFirstModule(modules ...) : void",
    "info" : "MethodDeclaration[10317-10836]:MethodDeclaration[10317-10836]"
  }, {
    "left" : "private fillEmptyModules(modules ...) : void",
    "right" : "private fillEmptyModules(modules ...) : void",
    "info" : "MethodDeclaration[10840-11189]:MethodDeclaration[10840-11189]"
  }, {
    "left" : "public rebuildInputsFromModules() : void",
    "right" : "public rebuildInputsFromModules() : void",
    "info" : "MethodDeclaration[11193-11553]:MethodDeclaration[11193-11553]"
  }, {
    "left" : "private getAllInputsFromModules(modules ...) : ",
    "right" : "private getAllInputsFromModules(modules ...) : ",
    "info" : "MethodDeclaration[11557-12286]:MethodDeclaration[11557-12286]"
  }, {
    "left" : "DUPLICATE_INPUT",
    "right" : "DUPLICATE_INPUT",
    "info" : "FieldDeclaration[12290-12410]:FieldDeclaration[12290-12410]"
  }, {
    "left" : "DUPLICATE_EXTERN_INPUT",
    "right" : "DUPLICATE_EXTERN_INPUT",
    "info" : "FieldDeclaration[12413-12564]:FieldDeclaration[12413-12564]"
  }, {
    "left" : "package initInputsByNameMap() : void",
    "right" : "package initInputsByNameMap() : void",
    "info" : "MethodDeclaration[12568-13265]:MethodDeclaration[12568-13265]"
  }, {
    "left" : "public compile(extern , input , options ...) : ",
    "right" : "public compile(extern , input , options ...) : ",
    "info" : "MethodDeclaration[13269-13437]:MethodDeclaration[13269-13437]"
  }, {
    "left" : "public compile(extern , input , options ...) : ",
    "right" : "public compile(extern , input , options ...) : ",
    "info" : "MethodDeclaration[13441-13611]:MethodDeclaration[13441-13611]"
  }, {
    "left" : "public compile(extern , modules , options ...) : ",
    "right" : "public compile(extern , modules , options ...) : ",
    "info" : "MethodDeclaration[13615-13785]:MethodDeclaration[13615-13785]"
  }, {
    "left" : "public compile(externs , inputs , options ...) : ",
    "right" : "public compile(externs , inputs , options ...) : ",
    "info" : "MethodDeclaration[13789-14110]:MethodDeclaration[13789-14110]"
  }, {
    "left" : "public compile(externs , inputs , options ...) : ",
    "right" : "public compile(externs , inputs , options ...) : ",
    "info" : "MethodDeclaration[14114-14649]:MethodDeclaration[14114-14649]"
  }, {
    "left" : "public compile(externs , modules , options ...) : ",
    "right" : "public compile(externs , modules , options ...) : ",
    "info" : "MethodDeclaration[14653-14976]:MethodDeclaration[14653-14976]"
  }, {
    "left" : "public compileModules(externs , modules , options ...) : ",
    "right" : "public compileModules(externs , modules , options ...) : ",
    "info" : "MethodDeclaration[14980-15528]:MethodDeclaration[14980-15528]"
  }, {
    "left" : "private compile() : ",
    "right" : "private compile() : ",
    "info" : "MethodDeclaration[15532-15735]:MethodDeclaration[15532-15735]"
  }, {
    "left" : "public call() : ",
    "right" : "public call() : ",
    "info" : "MethodDeclaration[15621-15723]:MethodDeclaration[15621-15723]"
  }, {
    "left" : "public disableThreads() : void",
    "right" : "public disableThreads() : void",
    "info" : "MethodDeclaration[15739-15902]:MethodDeclaration[15739-15902]"
  }, {
    "left" : "private runInCompilerThread(callable ) : ",
    "right" : "private runInCompilerThread(callable ) : ",
    "info" : "MethodDeclaration[15906-17450]:MethodDeclaration[15906-17450]"
  }, {
    "left" : "public run() : void",
    "right" : "public run() : void",
    "info" : "MethodDeclaration[16586-16943]:MethodDeclaration[16586-16943]"
  }, {
    "left" : "private compileInternal() : void",
    "right" : "private compileInternal() : void",
    "info" : "MethodDeclaration[17454-18282]:MethodDeclaration[17454-18282]"
  }, {
    "left" : "public parse() : void",
    "right" : "public parse() : void",
    "info" : "MethodDeclaration[18286-18330]:MethodDeclaration[18286-18330]"
  }, {
    "left" : "package getPassConfig() : ",
    "right" : "package getPassConfig() : ",
    "info" : "MethodDeclaration[18334-18460]:MethodDeclaration[18334-18460]"
  }, {
    "left" : "package createPassConfigInternal() : ",
    "right" : "package createPassConfigInternal() : ",
    "info" : "MethodDeclaration[18464-18659]:MethodDeclaration[18464-18659]"
  }, {
    "left" : "public setPassConfig(passes ...) : void",
    "right" : "public setPassConfig(passes ...) : void",
    "info" : "MethodDeclaration[18663-19407]:MethodDeclaration[18663-19407]"
  }, {
    "left" : "package precheck() : boolean",
    "right" : "package precheck() : boolean",
    "info" : "MethodDeclaration[19411-19647]:MethodDeclaration[19411-19647]"
  }, {
    "left" : "public check() : void",
    "right" : "public check() : void",
    "info" : "MethodDeclaration[19651-20673]:MethodDeclaration[19651-20673]"
  }, {
    "left" : "private externExports() : void",
    "right" : "private externExports() : void",
    "info" : "MethodDeclaration[20677-20939]:MethodDeclaration[20677-20939]"
  }, {
    "left" : "package process(p ) : void",
    "right" : "package process(p ) : void",
    "info" : "MethodDeclaration[20943-21013]:MethodDeclaration[20943-21013]"
  }, {
    "left" : "sanityCheck",
    "right" : "sanityCheck",
    "info" : "FieldDeclaration[21017-21238]:FieldDeclaration[21017-21238]"
  }, {
    "left" : "protected createInternal(compiler ) : ",
    "right" : "protected createInternal(compiler ) : ",
    "info" : "MethodDeclaration[21107-21233]:MethodDeclaration[21107-21233]"
  }, {
    "left" : "private maybeSanityCheck() : void",
    "right" : "private maybeSanityCheck() : void",
    "info" : "MethodDeclaration[21242-21358]:MethodDeclaration[21242-21358]"
  }, {
    "left" : "private runSanityCheck() : void",
    "right" : "private runSanityCheck() : void",
    "info" : "MethodDeclaration[21362-21456]:MethodDeclaration[21362-21456]"
  }, {
    "left" : "package removeTryCatchFinally() : void",
    "right" : "package removeTryCatchFinally() : void",
    "info" : "MethodDeclaration[21460-21735]:MethodDeclaration[21460-21735]"
  }, {
    "left" : "package stripCode(stripTypes , stripNameSuffixes , stripTypePrefixes , stripNamePrefixes ...) : void",
    "right" : "package stripCode(stripTypes , stripNameSuffixes , stripTypePrefixes , stripNamePrefixes ...) : void",
    "info" : "MethodDeclaration[21739-22228]:MethodDeclaration[21739-22228]"
  }, {
    "left" : "private runCustomPasses(executionTime ) : void",
    "right" : "private runCustomPasses(executionTime ) : void",
    "info" : "MethodDeclaration[22232-22668]:MethodDeclaration[22232-22668]"
  }, {
    "left" : "currentTracer",
    "right" : "currentTracer",
    "info" : "FieldDeclaration[22672-22708]:FieldDeclaration[22672-22708]"
  }, {
    "left" : "currentPassName",
    "right" : "currentPassName",
    "info" : "FieldDeclaration[22711-22749]:FieldDeclaration[22711-22749]"
  }, {
    "left" : "package startPass(passName ) : void",
    "right" : "package startPass(passName ) : void",
    "info" : "MethodDeclaration[22753-22964]:MethodDeclaration[22753-22964]"
  }, {
    "left" : "package endPass() : void",
    "right" : "package endPass() : void",
    "info" : "MethodDeclaration[22968-23311]:MethodDeclaration[22968-23311]"
  }, {
    "left" : "package newTracer(passName ) : ",
    "right" : "package newTracer(passName ) : ",
    "info" : "MethodDeclaration[23315-23648]:MethodDeclaration[23315-23648]"
  }, {
    "left" : "package stopTracer(t , passName ) : void",
    "right" : "package stopTracer(t , passName ) : void",
    "info" : "MethodDeclaration[23652-23815]:MethodDeclaration[23652-23815]"
  }, {
    "left" : "public getResult() : ",
    "right" : "public getResult() : ",
    "info" : "MethodDeclaration[23819-24224]:MethodDeclaration[23819-24224]"
  }, {
    "left" : "public getMessages() : ",
    "right" : "public getMessages() : ",
    "info" : "MethodDeclaration[24228-24368]:MethodDeclaration[24228-24368]"
  }, {
    "left" : "public getErrors() : ",
    "right" : "public getErrors() : ",
    "info" : "MethodDeclaration[24372-24502]:MethodDeclaration[24372-24502]"
  }, {
    "left" : "public getWarnings() : ",
    "right" : "public getWarnings() : ",
    "info" : "MethodDeclaration[24506-24642]:MethodDeclaration[24506-24642]"
  }, {
    "left" : "public getRoot() : ",
    "right" : "public getRoot() : ",
    "info" : "MethodDeclaration[24646-24792]:MethodDeclaration[24646-24792]"
  }, {
    "left" : "private nextUniqueNameId() : int",
    "right" : "private nextUniqueNameId() : int",
    "info" : "MethodDeclaration[24796-24918]:MethodDeclaration[24796-24918]"
  }, {
    "left" : "package resetUniqueNameId() : void",
    "right" : "package resetUniqueNameId() : void",
    "info" : "MethodDeclaration[24922-25046]:MethodDeclaration[24922-25046]"
  }, {
    "left" : "package getUniqueNameIdSupplier() : ",
    "right" : "package getUniqueNameIdSupplier() : ",
    "info" : "MethodDeclaration[25050-25277]:MethodDeclaration[25050-25277]"
  }, {
    "left" : "public get() : ",
    "right" : "public get() : ",
    "info" : "MethodDeclaration[25181-25266]:MethodDeclaration[25181-25266]"
  }, {
    "left" : "package setNormalized() : void",
    "right" : "package setNormalized() : void",
    "info" : "MethodDeclaration[25281-25481]:MethodDeclaration[25281-25481]"
  }, {
    "left" : "package setUnnormalized() : void",
    "right" : "package setUnnormalized() : void",
    "info" : "MethodDeclaration[25485-25690]:MethodDeclaration[25485-25690]"
  }, {
    "left" : "package isNormalized() : boolean",
    "right" : "package isNormalized() : boolean",
    "info" : "MethodDeclaration[25694-25757]:MethodDeclaration[25694-25757]"
  }, {
    "left" : "package areNodesEqualForInlining(n1 , n2 ) : boolean",
    "right" : "package areNodesEqualForInlining(n1 , n2 ) : boolean",
    "info" : "MethodDeclaration[25761-26142]:MethodDeclaration[25761-26142]"
  }, {
    "left" : "public getInput(name ) : ",
    "right" : "public getInput(name ) : ",
    "info" : "MethodDeclaration[26453-26548]:MethodDeclaration[26453-26548]"
  }, {
    "left" : "public newExternInput(name ) : ",
    "right" : "public newExternInput(name ) : ",
    "info" : "MethodDeclaration[26552-26959]:MethodDeclaration[26552-26959]"
  }, {
    "left" : "package addIncrementalSourceAst(ast ) : void",
    "right" : "package addIncrementalSourceAst(ast ) : void",
    "info" : "MethodDeclaration[26963-27318]:MethodDeclaration[26963-27318]"
  }, {
    "left" : "package getModuleGraph() : ",
    "right" : "package getModuleGraph() : ",
    "info" : "MethodDeclaration[27322-27394]:MethodDeclaration[27322-27394]"
  }, {
    "left" : "public getTypeRegistry() : ",
    "right" : "public getTypeRegistry() : ",
    "info" : "MethodDeclaration[27398-27597]:MethodDeclaration[27398-27597]"
  }, {
    "left" : "package getScopeCreator() : ",
    "right" : "package getScopeCreator() : ",
    "info" : "MethodDeclaration[27601-27695]:MethodDeclaration[27601-27695]"
  }, {
    "left" : "public getTopScope() : ",
    "right" : "public getTopScope() : ",
    "info" : "MethodDeclaration[27699-27785]:MethodDeclaration[27699-27785]"
  }, {
    "left" : "public getReverseAbstractInterpreter() : ",
    "right" : "public getReverseAbstractInterpreter() : ",
    "info" : "MethodDeclaration[27789-28354]:MethodDeclaration[27789-28354]"
  }, {
    "left" : "package getTypeValidator() : ",
    "right" : "package getTypeValidator() : ",
    "info" : "MethodDeclaration[28358-28520]:MethodDeclaration[28358-28520]"
  }, {
    "left" : "package parseInputs() : ",
    "right" : "package parseInputs() : ",
    "info" : "MethodDeclaration[28692-32773]:MethodDeclaration[28692-32773]"
  }, {
    "left" : "public parse(file ) : ",
    "right" : "public parse(file ) : ",
    "info" : "MethodDeclaration[32777-32949]:MethodDeclaration[32777-32949]"
  }, {
    "left" : "package parseSyntheticCode(js ...) : ",
    "right" : "package parseSyntheticCode(js ...) : ",
    "info" : "MethodDeclaration[32953-33184]:MethodDeclaration[32953-33184]"
  }, {
    "left" : "package initCompilerOptionsIfTesting() : void",
    "right" : "package initCompilerOptionsIfTesting() : void",
    "info" : "MethodDeclaration[33188-33408]:MethodDeclaration[33188-33408]"
  }, {
    "left" : "package parseSyntheticCode(fileName , js ...) : ",
    "right" : "package parseSyntheticCode(fileName , js ...) : ",
    "info" : "MethodDeclaration[33412-33572]:MethodDeclaration[33412-33572]"
  }, {
    "left" : "package parseTestCode(js ...) : ",
    "right" : "package parseTestCode(js ...) : ",
    "info" : "MethodDeclaration[33576-33903]:MethodDeclaration[33576-33903]"
  }, {
    "left" : "package getDefaultErrorReporter() : ",
    "right" : "package getDefaultErrorReporter() : ",
    "info" : "MethodDeclaration[33907-33997]:MethodDeclaration[33907-33997]"
  }, {
    "left" : "public toSource() : ",
    "right" : "public toSource() : ",
    "info" : "MethodDeclaration[34189-34887]:MethodDeclaration[34189-34887]"
  }, {
    "left" : "public call() : ",
    "right" : "public call() : ",
    "info" : "MethodDeclaration[34341-34875]:MethodDeclaration[34341-34875]"
  }, {
    "left" : "public toSourceArray() : ",
    "right" : "public toSourceArray() : ",
    "info" : "MethodDeclaration[34891-35667]:MethodDeclaration[34891-35667]"
  }, {
    "left" : "public call() : ",
    "right" : "public call() : ",
    "info" : "MethodDeclaration[35062-35655]:MethodDeclaration[35062-35655]"
  }, {
    "left" : "public toSource(module ) : ",
    "right" : "public toSource(module ) : ",
    "info" : "MethodDeclaration[35671-36454]:MethodDeclaration[35671-36454]"
  }, {
    "left" : "public call() : ",
    "right" : "public call() : ",
    "info" : "MethodDeclaration[35852-36442]:MethodDeclaration[35852-36442]"
  }, {
    "left" : "public toSourceArray(module ) : ",
    "right" : "public toSourceArray(module ) : ",
    "info" : "MethodDeclaration[36459-37397]:MethodDeclaration[36459-37397]"
  }, {
    "left" : "public call() : ",
    "right" : "public call() : ",
    "info" : "MethodDeclaration[36663-37385]:MethodDeclaration[36663-37385]"
  }, {
    "left" : "public toSource(cb , inputSeqNum int, root ) : void",
    "right" : "public toSource(cb , inputSeqNum int, root ) : void",
    "info" : "MethodDeclaration[37401-39452]:MethodDeclaration[37401-39452]"
  }, {
    "left" : "public call() : ",
    "right" : "public call() : ",
    "info" : "MethodDeclaration[37938-39440]:MethodDeclaration[37938-39440]"
  }, {
    "left" : "package toSource(n ) : ",
    "right" : "package toSource(n ) : ",
    "info" : "MethodDeclaration[39456-39664]:MethodDeclaration[39456-39664]"
  }, {
    "left" : "private toSource(n , sourceMap ) : ",
    "right" : "private toSource(n , sourceMap ) : ",
    "info" : "MethodDeclaration[39668-40162]:MethodDeclaration[39668-40226]"
  }, {
    "left" : "class : CodeBuilder",
    "right" : "class : CodeBuilder",
    "info" : "TypeDeclaration[40166-41911]:TypeDeclaration[40230-41975]"
  }, {
    "left" : "sb",
    "right" : "sb",
    "info" : "FieldDeclaration[40363-40416]:FieldDeclaration[40427-40480]"
  }, {
    "left" : "lineCount",
    "right" : "lineCount",
    "info" : "FieldDeclaration[40421-40447]:FieldDeclaration[40485-40511]"
  }, {
    "left" : "colCount",
    "right" : "colCount",
    "info" : "FieldDeclaration[40452-40477]:FieldDeclaration[40516-40541]"
  }, {
    "left" : "package reset() : void",
    "right" : "package reset() : void",
    "info" : "MethodDeclaration[40483-40592]:MethodDeclaration[40547-40656]"
  }, {
    "left" : "package append(str ) : ",
    "right" : "package append(str ) : ",
    "info" : "MethodDeclaration[40598-41164]:MethodDeclaration[40662-41228]"
  }, {
    "left" : "public toString() : ",
    "right" : "public toString() : ",
    "info" : "MethodDeclaration[41170-41292]:MethodDeclaration[41234-41356]"
  }, {
    "left" : "public getLength() : int",
    "right" : "public getLength() : int",
    "info" : "MethodDeclaration[41298-41404]:MethodDeclaration[41362-41468]"
  }, {
    "left" : "package getLineIndex() : int",
    "right" : "package getLineIndex() : int",
    "info" : "MethodDeclaration[41410-41539]:MethodDeclaration[41474-41603]"
  }, {
    "left" : "package getColumnIndex() : int",
    "right" : "package getColumnIndex() : int",
    "info" : "MethodDeclaration[41545-41677]:MethodDeclaration[41609-41741]"
  }, {
    "left" : "package endsWith(suffix ) : boolean",
    "right" : "package endsWith(suffix ) : boolean",
    "info" : "MethodDeclaration[41683-41907]:MethodDeclaration[41747-41971]"
  }, {
    "left" : "public optimize() : void",
    "right" : "public optimize() : void",
    "info" : "MethodDeclaration[42089-42735]:MethodDeclaration[42153-42799]"
  }, {
    "left" : "package setCssRenamingMap(map ) : void",
    "right" : "package setCssRenamingMap(map ) : void",
    "info" : "MethodDeclaration[42739-42833]:MethodDeclaration[42803-42897]"
  }, {
    "left" : "package getCssRenamingMap() : ",
    "right" : "package getCssRenamingMap() : ",
    "info" : "MethodDeclaration[42837-42924]:MethodDeclaration[42901-42988]"
  }, {
    "left" : "public processDefines() : void",
    "right" : "public processDefines() : void",
    "info" : "MethodDeclaration[42928-43415]:MethodDeclaration[42992-43479]"
  }, {
    "left" : "package isInliningForbidden() : boolean",
    "right" : "package isInliningForbidden() : boolean",
    "info" : "MethodDeclaration[43419-43622]:MethodDeclaration[43483-43686]"
  }, {
    "left" : "package computeCFG() : ",
    "right" : "package computeCFG() : ",
    "info" : "MethodDeclaration[43626-43941]:MethodDeclaration[43690-44005]"
  }, {
    "left" : "public normalize() : void",
    "right" : "public normalize() : void",
    "info" : "MethodDeclaration[43945-44090]:MethodDeclaration[44009-44154]"
  }, {
    "left" : "package prepareAst(root ) : void",
    "right" : "package prepareAst(root ) : void",
    "info" : "MethodDeclaration[44094-44297]:MethodDeclaration[44158-44361]"
  }, {
    "left" : "package recordFunctionInformation() : void",
    "right" : "package recordFunctionInformation() : void",
    "info" : "MethodDeclaration[44301-44715]:MethodDeclaration[44365-44779]"
  }, {
    "left" : "recentChange",
    "right" : "recentChange",
    "info" : "FieldDeclaration[44719-44824]:FieldDeclaration[44783-44888]"
  }, {
    "left" : "codeChangeHandlers",
    "right" : "codeChangeHandlers",
    "info" : "FieldDeclaration[44827-44932]:FieldDeclaration[44891-44996]"
  }, {
    "left" : "package addChangeHandler(handler ) : void",
    "right" : "package addChangeHandler(handler ) : void",
    "info" : "MethodDeclaration[44936-45039]:MethodDeclaration[45000-45103]"
  }, {
    "left" : "package removeChangeHandler(handler ) : void",
    "right" : "package removeChangeHandler(handler ) : void",
    "info" : "MethodDeclaration[45043-45152]:MethodDeclaration[45107-45216]"
  }, {
    "left" : "public reportCodeChange() : void",
    "right" : "public reportCodeChange() : void",
    "info" : "MethodDeclaration[45156-45490]:MethodDeclaration[45220-45554]"
  }, {
    "left" : "public getCodingConvention() : ",
    "right" : "public getCodingConvention() : ",
    "info" : "MethodDeclaration[45494-45721]:MethodDeclaration[45558-45785]"
  }, {
    "left" : "public isIdeMode() : boolean",
    "right" : "public isIdeMode() : boolean",
    "info" : "MethodDeclaration[45725-45797]:MethodDeclaration[45789-45861]"
  }, {
    "left" : "package getParserConfig() : ",
    "right" : "package getParserConfig() : ",
    "info" : "MethodDeclaration[45801-45967]:MethodDeclaration[45865-46031]"
  }, {
    "left" : "public isTypeCheckingEnabled() : boolean",
    "right" : "public isTypeCheckingEnabled() : boolean",
    "info" : "MethodDeclaration[45971-46058]:MethodDeclaration[46035-46122]"
  }, {
    "left" : "public report(error ) : void",
    "right" : "public report(error ) : void",
    "info" : "MethodDeclaration[46239-46595]:MethodDeclaration[46303-46659]"
  }, {
    "left" : "public getErrorLevel(error ) : ",
    "right" : "public getErrorLevel(error ) : ",
    "info" : "MethodDeclaration[46599-46864]:MethodDeclaration[46663-46928]"
  }, {
    "left" : "package throwInternalError(message , cause ) : void",
    "right" : "package throwInternalError(message , cause ) : void",
    "info" : "MethodDeclaration[46868-47256]:MethodDeclaration[46932-47320]"
  }, {
    "left" : "public getErrorCount() : int",
    "right" : "public getErrorCount() : int",
    "info" : "MethodDeclaration[47261-47378]:MethodDeclaration[47325-47442]"
  }, {
    "left" : "public getWarningCount() : int",
    "right" : "public getWarningCount() : int",
    "info" : "MethodDeclaration[47382-47505]:MethodDeclaration[47446-47569]"
  }, {
    "left" : "package hasHaltingErrors() : boolean",
    "right" : "package hasHaltingErrors() : boolean",
    "info" : "MethodDeclaration[47509-47601]:MethodDeclaration[47573-47665]"
  }, {
    "left" : "public hasErrors() : boolean",
    "right" : "public hasErrors() : boolean",
    "info" : "MethodDeclaration[47605-48086]:MethodDeclaration[47669-48150]"
  }, {
    "left" : "package addToDebugLog(str ) : void",
    "right" : "package addToDebugLog(str ) : void",
    "info" : "MethodDeclaration[48090-48271]:MethodDeclaration[48154-48335]"
  }, {
    "left" : "private getSourceFileByName(sourceName ) : ",
    "right" : "private getSourceFileByName(sourceName ) : ",
    "info" : "MethodDeclaration[48275-48468]:MethodDeclaration[48339-48532]"
  }, {
    "left" : "public getSourceLine(sourceName , lineNumber int) : ",
    "right" : "public getSourceLine(sourceName , lineNumber int) : ",
    "info" : "MethodDeclaration[48472-48735]:MethodDeclaration[48536-48799]"
  }, {
    "left" : "public getSourceRegion(sourceName , lineNumber int) : ",
    "right" : "public getSourceRegion(sourceName , lineNumber int) : ",
    "info" : "MethodDeclaration[48739-49006]:MethodDeclaration[48803-49070]"
  }, {
    "left" : "package getNodeForCodeInsertion(module ) : ",
    "right" : "package getNodeForCodeInsertion(module ) : ",
    "info" : "MethodDeclaration[49194-49645]:MethodDeclaration[49258-49709]"
  }, {
    "left" : "public getSourceMap() : ",
    "right" : "public getSourceMap() : ",
    "info" : "MethodDeclaration[49649-49708]:MethodDeclaration[49713-49772]"
  }, {
    "left" : "package getVariableMap() : ",
    "right" : "package getVariableMap() : ",
    "info" : "MethodDeclaration[49712-49809]:MethodDeclaration[49776-49873]"
  }, {
    "left" : "package getPropertyMap() : ",
    "right" : "package getPropertyMap() : ",
    "info" : "MethodDeclaration[49813-49910]:MethodDeclaration[49877-49974]"
  }, {
    "left" : "package getOptions() : ",
    "right" : "package getOptions() : ",
    "info" : "MethodDeclaration[49914-49968]:MethodDeclaration[49978-50032]"
  }, {
    "left" : "package getFunctionalInformationMap() : ",
    "right" : "package getFunctionalInformationMap() : ",
    "info" : "MethodDeclaration[49972-50065]:MethodDeclaration[50036-50129]"
  }, {
    "left" : "public setLoggingLevel(level ) : void",
    "right" : "public setLoggingLevel(level ) : void",
    "info" : "MethodDeclaration[50069-50236]:MethodDeclaration[50133-50300]"
  }, {
    "left" : "public getAstDotGraph() : ",
    "right" : "public getAstDotGraph() : ",
    "info" : "MethodDeclaration[50240-50590]:MethodDeclaration[50304-50654]"
  }, {
    "left" : "public getErrorManager() : ",
    "right" : "public getErrorManager() : ",
    "info" : "MethodDeclaration[50594-50749]:MethodDeclaration[50658-50813]"
  }, {
    "left" : "package getInputsInOrder() : ",
    "right" : "package getInputsInOrder() : ",
    "info" : "MethodDeclaration[50753-50873]:MethodDeclaration[50817-50937]"
  }, {
    "left" : "class : IntermediateState",
    "right" : "class : IntermediateState",
    "info" : "TypeDeclaration[50877-51915]:TypeDeclaration[50941-51979]"
  }, {
    "left" : "serialVersionUID",
    "right" : "serialVersionUID",
    "info" : "FieldDeclaration[51543-51591]:FieldDeclaration[51607-51655]"
  }, {
    "left" : "externsRoot",
    "right" : "externsRoot",
    "info" : "FieldDeclaration[51597-51614]:FieldDeclaration[51661-51678]"
  }, {
    "left" : "jsRoot",
    "right" : "jsRoot",
    "info" : "FieldDeclaration[51619-51639]:FieldDeclaration[51683-51703]"
  }, {
    "left" : "externs",
    "right" : "externs",
    "info" : "FieldDeclaration[51644-51680]:FieldDeclaration[51708-51744]"
  }, {
    "left" : "inputs",
    "right" : "inputs",
    "info" : "FieldDeclaration[51685-51720]:FieldDeclaration[51749-51784]"
  }, {
    "left" : "modules",
    "right" : "modules",
    "info" : "FieldDeclaration[51725-51756]:FieldDeclaration[51789-51820]"
  }, {
    "left" : "passConfigState",
    "right" : "passConfigState",
    "info" : "FieldDeclaration[51761-51802]:FieldDeclaration[51825-51866]"
  }, {
    "left" : "typeRegistry",
    "right" : "typeRegistry",
    "info" : "FieldDeclaration[51807-51843]:FieldDeclaration[51871-51907]"
  }, {
    "left" : "normalized",
    "right" : "normalized",
    "info" : "FieldDeclaration[51848-51875]:FieldDeclaration[51912-51939]"
  }, {
    "left" : "private IntermediateState()",
    "right" : "private IntermediateState()",
    "info" : "MethodDeclaration[51881-51911]:MethodDeclaration[51945-51975]"
  }, {
    "left" : "public getState() : ",
    "right" : "public getState() : ",
    "info" : "MethodDeclaration[51919-52417]:MethodDeclaration[51983-52481]"
  }, {
    "left" : "public setState(state ) : void",
    "right" : "public setState(state ) : void",
    "info" : "MethodDeclaration[52421-52934]:MethodDeclaration[52485-52998]"
  }, {
    "left" : "package getInputsForTesting() : ",
    "right" : "package getInputsForTesting() : ",
    "info" : "MethodDeclaration[52938-53025]:MethodDeclaration[53002-53089]"
  }, {
    "left" : "package getExternsForTesting() : ",
    "right" : "package getExternsForTesting() : ",
    "info" : "MethodDeclaration[53029-53118]:MethodDeclaration[53093-53182]"
  }, {
    "left" : "package hasRegExpGlobalReferences() : boolean",
    "right" : "package hasRegExpGlobalReferences() : boolean",
    "info" : "MethodDeclaration[53122-53213]:MethodDeclaration[53186-53277]"
  }, {
    "left" : "package setHasRegExpGlobalReferences(references boolean) : void",
    "right" : "package setHasRegExpGlobalReferences(references boolean) : void",
    "info" : "MethodDeclaration[53217-53332]:MethodDeclaration[53281-53396]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2275-2281]:Modifier[2275-2281]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[2282-2287]:TYPE_DECLARATION_KIND[2282-2287]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5483-5489]:Modifier[5483-5489]"
  }, {
    "left" : "Compiler",
    "right" : "Compiler",
    "info" : "SimpleName[5490-5498]:SimpleName[5490-5498]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5501-5536]:Block[5501-5536]"
  }, {
    "left" : "this((PrintStream) null);",
    "right" : "this((PrintStream) null);",
    "info" : "ConstructorInvocation[5507-5532]:ConstructorInvocation[5507-5532]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5635-5641]:Modifier[5635-5641]"
  }, {
    "left" : "Compiler",
    "right" : "Compiler",
    "info" : "SimpleName[5642-5650]:SimpleName[5642-5650]"
  }, {
    "left" : "PrintStream stream",
    "right" : "PrintStream stream",
    "info" : "SingleVariableDeclaration[5651-5669]:SingleVariableDeclaration[5651-5669]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5671-5736]:Block[5671-5736]"
  }, {
    "left" : "addChangeHandler(recentChange);",
    "right" : "addChangeHandler(recentChange);",
    "info" : "ExpressionStatement[5677-5708]:ExpressionStatement[5677-5708]"
  }, {
    "left" : "outStream = stream;",
    "right" : "outStream = stream;",
    "info" : "ExpressionStatement[5713-5732]:ExpressionStatement[5713-5732]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5810-5816]:Modifier[5810-5816]"
  }, {
    "left" : "Compiler",
    "right" : "Compiler",
    "info" : "SimpleName[5817-5825]:SimpleName[5817-5825]"
  }, {
    "left" : "ErrorManager errorManager",
    "right" : "ErrorManager errorManager",
    "info" : "SingleVariableDeclaration[5826-5851]:SingleVariableDeclaration[5826-5851]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5853-5905]:Block[5853-5905]"
  }, {
    "left" : "this();",
    "right" : "this();",
    "info" : "ConstructorInvocation[5859-5866]:ConstructorInvocation[5859-5866]"
  }, {
    "left" : "setErrorManager(errorManager);",
    "right" : "setErrorManager(errorManager);",
    "info" : "ExpressionStatement[5871-5901]:ExpressionStatement[5871-5901]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6025-6031]:Modifier[6025-6031]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[6032-6036]:PrimitiveType[6032-6036]"
  }, {
    "left" : "setErrorManager",
    "right" : "setErrorManager",
    "info" : "SimpleName[6037-6052]:SimpleName[6037-6052]"
  }, {
    "left" : "ErrorManager errorManager",
    "right" : "ErrorManager errorManager",
    "info" : "SingleVariableDeclaration[6053-6078]:SingleVariableDeclaration[6053-6078]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6080-6214]:Block[6080-6214]"
  }, {
    "left" : "Preconditions.checkNotNull(\n        errorManager, \"the error manager cannot be null\");",
    "right" : "Preconditions.checkNotNull(\n        errorManager, \"the error manager cannot be null\");",
    "info" : "ExpressionStatement[6086-6172]:ExpressionStatement[6086-6172]"
  }, {
    "left" : "this.errorManager = errorManager;",
    "right" : "this.errorManager = errorManager;",
    "info" : "ExpressionStatement[6177-6210]:ExpressionStatement[6177-6210]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6332-6339]:Modifier[6332-6339]"
  }, {
    "left" : "MessageFormatter",
    "right" : "MessageFormatter",
    "info" : "SimpleType[6340-6356]:SimpleType[6340-6356]"
  }, {
    "left" : "createMessageFormatter",
    "right" : "createMessageFormatter",
    "info" : "SimpleName[6357-6379]:SimpleName[6357-6379]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6382-6507]:Block[6382-6507]"
  }, {
    "left" : "boolean colorize = options.shouldColorizeErrorOutput();",
    "right" : "boolean colorize = options.shouldColorizeErrorOutput();",
    "info" : "VariableDeclarationStatement[6388-6443]:VariableDeclarationStatement[6388-6443]"
  }, {
    "left" : "return options.errorFormat.toFormatter(this, colorize);",
    "right" : "return options.errorFormat.toFormatter(this, colorize);",
    "info" : "ReturnStatement[6448-6503]:ReturnStatement[6448-6503]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6625-6631]:Modifier[6625-6631]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[6632-6636]:PrimitiveType[6632-6636]"
  }, {
    "left" : "initOptions",
    "right" : "initOptions",
    "info" : "SimpleName[6637-6648]:SimpleName[6637-6648]"
  }, {
    "left" : "CompilerOptions options",
    "right" : "CompilerOptions options",
    "info" : "SingleVariableDeclaration[6649-6672]:SingleVariableDeclaration[6649-6672]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6674-7116]:Block[6674-7116]"
  }, {
    "left" : "this.options = options;",
    "right" : "this.options = options;",
    "info" : "ExpressionStatement[6680-6703]:ExpressionStatement[6680-6703]"
  }, {
    "left" : "if (errorManager == null)",
    "right" : "if (errorManager == null)",
    "info" : "IfStatement[6708-7112]:IfStatement[6708-7112]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6734-7112]:Block[6734-7112]"
  }, {
    "left" : "if (outStream == null)",
    "right" : "if (outStream == null)",
    "info" : "IfStatement[6742-7106]:IfStatement[6742-7106]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6765-6870]:Block[6765-6870]"
  }, {
    "left" : "setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));",
    "right" : "setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));",
    "info" : "ExpressionStatement[6775-6862]:ExpressionStatement[6775-6862]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6876-7106]:Block[6876-7106]"
  }, {
    "left" : "PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);",
    "right" : "PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);",
    "info" : "VariableDeclarationStatement[6886-6997]:VariableDeclarationStatement[6886-6997]"
  }, {
    "left" : "printer.setSummaryDetailLevel(options.summaryDetailLevel);",
    "right" : "printer.setSummaryDetailLevel(options.summaryDetailLevel);",
    "info" : "ExpressionStatement[7006-7064]:ExpressionStatement[7006-7064]"
  }, {
    "left" : "setErrorManager(printer);",
    "right" : "setErrorManager(printer);",
    "info" : "ExpressionStatement[7073-7098]:ExpressionStatement[7073-7098]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7194-7200]:Modifier[7194-7200]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7201-7205]:PrimitiveType[7201-7205]"
  }, {
    "left" : "init",
    "right" : "init",
    "info" : "SimpleName[7206-7210]:SimpleName[7206-7210]"
  }, {
    "left" : "JSSourceFile[] externs",
    "right" : "JSSourceFile[] externs",
    "info" : "SingleVariableDeclaration[7211-7233]:SingleVariableDeclaration[7211-7233]"
  }, {
    "left" : "JSSourceFile[] inputs",
    "right" : "JSSourceFile[] inputs",
    "info" : "SingleVariableDeclaration[7235-7256]:SingleVariableDeclaration[7235-7256]"
  }, {
    "left" : "CompilerOptions options",
    "right" : "CompilerOptions options",
    "info" : "SingleVariableDeclaration[7264-7287]:SingleVariableDeclaration[7264-7287]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7289-7406]:Block[7289-7406]"
  }, {
    "left" : "init(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSSourceFile>newArrayList(inputs), options);",
    "right" : "init(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSSourceFile>newArrayList(inputs), options);",
    "info" : "ExpressionStatement[7295-7402]:ExpressionStatement[7295-7402]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7484-7490]:Modifier[7484-7490]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7491-7495]:PrimitiveType[7491-7495]"
  }, {
    "left" : "init",
    "right" : "init",
    "info" : "SimpleName[7496-7500]:SimpleName[7496-7500]"
  }, {
    "left" : "List<JSSourceFile> externs",
    "right" : "List<JSSourceFile> externs",
    "info" : "SingleVariableDeclaration[7501-7527]:SingleVariableDeclaration[7501-7527]"
  }, {
    "left" : "List<JSSourceFile> inputs",
    "right" : "List<JSSourceFile> inputs",
    "info" : "SingleVariableDeclaration[7529-7554]:SingleVariableDeclaration[7529-7554]"
  }, {
    "left" : "CompilerOptions options",
    "right" : "CompilerOptions options",
    "info" : "SingleVariableDeclaration[7562-7585]:SingleVariableDeclaration[7562-7585]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7587-7778]:Block[7587-7778]"
  }, {
    "left" : "JSModule module = new JSModule(\"[singleton]\");",
    "right" : "JSModule module = new JSModule(\"[singleton]\");",
    "info" : "VariableDeclarationStatement[7593-7639]:VariableDeclarationStatement[7593-7639]"
  }, {
    "left" : "for (JSSourceFile input : inputs)",
    "right" : "for (JSSourceFile input : inputs)",
    "info" : "EnhancedForStatement[7644-7710]:EnhancedForStatement[7644-7710]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7678-7710]:Block[7678-7710]"
  }, {
    "left" : "module.add(input);",
    "right" : "module.add(input);",
    "info" : "ExpressionStatement[7686-7704]:ExpressionStatement[7686-7704]"
  }, {
    "left" : "initModules(externs, Lists.newArrayList(module), options);",
    "right" : "initModules(externs, Lists.newArrayList(module), options);",
    "info" : "ExpressionStatement[7716-7774]:ExpressionStatement[7716-7774]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8111-8117]:Modifier[8111-8117]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8118-8122]:PrimitiveType[8118-8122]"
  }, {
    "left" : "init",
    "right" : "init",
    "info" : "SimpleName[8123-8127]:SimpleName[8123-8127]"
  }, {
    "left" : "JSSourceFile[] externs",
    "right" : "JSSourceFile[] externs",
    "info" : "SingleVariableDeclaration[8128-8150]:SingleVariableDeclaration[8128-8150]"
  }, {
    "left" : "JSModule[] modules",
    "right" : "JSModule[] modules",
    "info" : "SingleVariableDeclaration[8152-8170]:SingleVariableDeclaration[8152-8170]"
  }, {
    "left" : "CompilerOptions options",
    "right" : "CompilerOptions options",
    "info" : "SingleVariableDeclaration[8178-8201]:SingleVariableDeclaration[8178-8201]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8203-8325]:Block[8203-8325]"
  }, {
    "left" : "initModules(Lists.<JSSourceFile>newArrayList(externs),\n         Lists.<JSModule>newArrayList(modules), options);",
    "right" : "initModules(Lists.<JSSourceFile>newArrayList(externs),\n         Lists.<JSModule>newArrayList(modules), options);",
    "info" : "ExpressionStatement[8209-8321]:ExpressionStatement[8209-8321]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8438-8444]:Modifier[8438-8444]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8445-8449]:PrimitiveType[8445-8449]"
  }, {
    "left" : "initModules",
    "right" : "initModules",
    "info" : "SimpleName[8450-8461]:SimpleName[8450-8461]"
  }, {
    "left" : "List<JSSourceFile> externs",
    "right" : "List<JSSourceFile> externs",
    "info" : "SingleVariableDeclaration[8469-8495]:SingleVariableDeclaration[8469-8495]"
  }, {
    "left" : "List<JSModule> modules",
    "right" : "List<JSModule> modules",
    "info" : "SingleVariableDeclaration[8497-8519]:SingleVariableDeclaration[8497-8519]"
  }, {
    "left" : "CompilerOptions options",
    "right" : "CompilerOptions options",
    "info" : "SingleVariableDeclaration[8527-8550]:SingleVariableDeclaration[8527-8550]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8552-9407]:Block[8552-9407]"
  }, {
    "left" : "initOptions(options);",
    "right" : "initOptions(options);",
    "info" : "ExpressionStatement[8558-8579]:ExpressionStatement[8558-8579]"
  }, {
    "left" : "checkFirstModule(modules);",
    "right" : "checkFirstModule(modules);",
    "info" : "ExpressionStatement[8585-8611]:ExpressionStatement[8585-8611]"
  }, {
    "left" : "fillEmptyModules(modules);",
    "right" : "fillEmptyModules(modules);",
    "info" : "ExpressionStatement[8616-8642]:ExpressionStatement[8616-8642]"
  }, {
    "left" : "this.externs = makeCompilerInput(externs, true);",
    "right" : "this.externs = makeCompilerInput(externs, true);",
    "info" : "ExpressionStatement[8648-8696]:ExpressionStatement[8648-8696]"
  }, {
    "left" : "this.modules = modules;",
    "right" : "this.modules = modules;",
    "info" : "ExpressionStatement[8804-8827]:ExpressionStatement[8804-8827]"
  }, {
    "left" : "if (modules.size() > 1)",
    "right" : "if (modules.size() > 1)",
    "info" : "IfStatement[8832-9296]:IfStatement[8832-9296]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8856-9252]:Block[8856-9252]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[8864-9246]:TryStatement[8864-9246]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8868-8932]:Block[8868-8932]"
  }, {
    "left" : "this.moduleGraph = new JSModuleGraph(modules);",
    "right" : "this.moduleGraph = new JSModuleGraph(modules);",
    "info" : "ExpressionStatement[8878-8924]:ExpressionStatement[8878-8924]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8983-9246]:Block[8983-9246]"
  }, {
    "left" : "report(JSError.make(MODULE_DEPENDENCY_ERROR,\n                e.getModule().getName(), e.getDependentModule().getName()));",
    "right" : "report(JSError.make(MODULE_DEPENDENCY_ERROR,\n                e.getModule().getName(), e.getDependentModule().getName()));",
    "info" : "ExpressionStatement[9101-9222]:ExpressionStatement[9101-9222]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[9231-9238]:ReturnStatement[9231-9238]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9258-9296]:Block[9258-9296]"
  }, {
    "left" : "this.moduleGraph = null;",
    "right" : "this.moduleGraph = null;",
    "info" : "ExpressionStatement[9266-9290]:ExpressionStatement[9266-9290]"
  }, {
    "left" : "this.inputs = getAllInputsFromModules(modules);",
    "right" : "this.inputs = getAllInputsFromModules(modules);",
    "info" : "ExpressionStatement[9302-9349]:ExpressionStatement[9302-9349]"
  }, {
    "left" : "initBasedOnOptions();",
    "right" : "initBasedOnOptions();",
    "info" : "ExpressionStatement[9354-9375]:ExpressionStatement[9354-9375]"
  }, {
    "left" : "initInputsByNameMap();",
    "right" : "initInputsByNameMap();",
    "info" : "ExpressionStatement[9381-9403]:ExpressionStatement[9381-9403]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[9493-9500]:Modifier[9493-9500]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9501-9505]:PrimitiveType[9501-9505]"
  }, {
    "left" : "initBasedOnOptions",
    "right" : "initBasedOnOptions",
    "info" : "SimpleName[9506-9524]:SimpleName[9506-9524]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9527-9663]:Block[9527-9663]"
  }, {
    "left" : "if (options.sourceMapOutputPath != null)",
    "right" : "if (options.sourceMapOutputPath != null)",
    "info" : "IfStatement[9576-9659]:IfStatement[9576-9659]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9617-9659]:Block[9617-9659]"
  }, {
    "left" : "sourceMap = new SourceMap();",
    "right" : "sourceMap = new SourceMap();",
    "info" : "ExpressionStatement[9625-9653]:ExpressionStatement[9625-9653]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[9667-9674]:Modifier[9667-9674]"
  }, {
    "left" : "List<CompilerInput>",
    "right" : "List<CompilerInput>",
    "info" : "ParameterizedType[9675-9694]:ParameterizedType[9675-9694]"
  }, {
    "left" : "makeCompilerInput",
    "right" : "makeCompilerInput",
    "info" : "SimpleName[9695-9712]:SimpleName[9695-9712]"
  }, {
    "left" : "List<JSSourceFile> files",
    "right" : "List<JSSourceFile> files",
    "info" : "SingleVariableDeclaration[9720-9744]:SingleVariableDeclaration[9720-9744]"
  }, {
    "left" : "boolean isExtern",
    "right" : "boolean isExtern",
    "info" : "SingleVariableDeclaration[9746-9762]:SingleVariableDeclaration[9746-9762]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9764-9940]:Block[9764-9940]"
  }, {
    "left" : "List<CompilerInput> inputs = Lists.newArrayList();",
    "right" : "List<CompilerInput> inputs = Lists.newArrayList();",
    "info" : "VariableDeclarationStatement[9770-9820]:VariableDeclarationStatement[9770-9820]"
  }, {
    "left" : "for (JSSourceFile file : files)",
    "right" : "for (JSSourceFile file : files)",
    "info" : "EnhancedForStatement[9825-9917]:EnhancedForStatement[9825-9917]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9857-9917]:Block[9857-9917]"
  }, {
    "left" : "inputs.add(new CompilerInput(file, isExtern));",
    "right" : "inputs.add(new CompilerInput(file, isExtern));",
    "info" : "ExpressionStatement[9865-9911]:ExpressionStatement[9865-9911]"
  }, {
    "left" : "return inputs;",
    "right" : "return inputs;",
    "info" : "ReturnStatement[9922-9936]:ReturnStatement[9922-9936]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[10450-10457]:Modifier[10450-10457]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10458-10462]:PrimitiveType[10458-10462]"
  }, {
    "left" : "checkFirstModule",
    "right" : "checkFirstModule",
    "info" : "SimpleName[10463-10479]:SimpleName[10463-10479]"
  }, {
    "left" : "List<JSModule> modules",
    "right" : "List<JSModule> modules",
    "info" : "SingleVariableDeclaration[10480-10502]:SingleVariableDeclaration[10480-10502]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10504-10836]:Block[10504-10836]"
  }, {
    "left" : "if (modules.isEmpty())",
    "right" : "if (modules.isEmpty())",
    "info" : "IfStatement[10510-10832]:IfStatement[10510-10832]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10533-10593]:Block[10533-10593]"
  }, {
    "left" : "report(JSError.make(EMPTY_MODULE_LIST_ERROR));",
    "right" : "report(JSError.make(EMPTY_MODULE_LIST_ERROR));",
    "info" : "ExpressionStatement[10541-10587]:ExpressionStatement[10541-10587]"
  }, {
    "left" : "if (modules.get(0).getInputs().isEmpty() && modules.size() > 1)",
    "right" : "if (modules.get(0).getInputs().isEmpty() && modules.size() > 1)",
    "info" : "IfStatement[10599-10832]:IfStatement[10599-10832]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10663-10832]:Block[10663-10832]"
  }, {
    "left" : "report(JSError.make(EMPTY_ROOT_MODULE_ERROR,\n          modules.get(0).getName()));",
    "right" : "report(JSError.make(EMPTY_ROOT_MODULE_ERROR,\n          modules.get(0).getName()));",
    "info" : "ExpressionStatement[10744-10826]:ExpressionStatement[10744-10826]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[10952-10959]:Modifier[10952-10959]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[10960-10966]:Modifier[10960-10966]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10967-10971]:PrimitiveType[10967-10971]"
  }, {
    "left" : "fillEmptyModules",
    "right" : "fillEmptyModules",
    "info" : "SimpleName[10972-10988]:SimpleName[10972-10988]"
  }, {
    "left" : "List<JSModule> modules",
    "right" : "List<JSModule> modules",
    "info" : "SingleVariableDeclaration[10989-11011]:SingleVariableDeclaration[10989-11011]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11013-11189]:Block[11013-11189]"
  }, {
    "left" : "for (JSModule module : modules)",
    "right" : "for (JSModule module : modules)",
    "info" : "EnhancedForStatement[11019-11185]:EnhancedForStatement[11019-11185]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11051-11185]:Block[11051-11185]"
  }, {
    "left" : "if (module.getInputs().isEmpty())",
    "right" : "if (module.getInputs().isEmpty())",
    "info" : "IfStatement[11059-11179]:IfStatement[11059-11179]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11093-11179]:Block[11093-11179]"
  }, {
    "left" : "module.add(JSSourceFile.fromCode(\"[\" + module.getName() + \"]\", \"\"));",
    "right" : "module.add(JSSourceFile.fromCode(\"[\" + module.getName() + \"]\", \"\"));",
    "info" : "ExpressionStatement[11103-11171]:ExpressionStatement[11103-11171]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11435-11441]:Modifier[11435-11441]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11442-11446]:PrimitiveType[11442-11446]"
  }, {
    "left" : "rebuildInputsFromModules",
    "right" : "rebuildInputsFromModules",
    "info" : "SimpleName[11447-11471]:SimpleName[11447-11471]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11474-11553]:Block[11474-11553]"
  }, {
    "left" : "inputs = getAllInputsFromModules(modules);",
    "right" : "inputs = getAllInputsFromModules(modules);",
    "info" : "ExpressionStatement[11480-11522]:ExpressionStatement[11480-11522]"
  }, {
    "left" : "initInputsByNameMap();",
    "right" : "initInputsByNameMap();",
    "info" : "ExpressionStatement[11527-11549]:ExpressionStatement[11527-11549]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[11663-11670]:Modifier[11663-11670]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[11671-11677]:Modifier[11671-11677]"
  }, {
    "left" : "List<CompilerInput>",
    "right" : "List<CompilerInput>",
    "info" : "ParameterizedType[11678-11697]:ParameterizedType[11678-11697]"
  }, {
    "left" : "getAllInputsFromModules",
    "right" : "getAllInputsFromModules",
    "info" : "SimpleName[11698-11721]:SimpleName[11698-11721]"
  }, {
    "left" : "List<JSModule> modules",
    "right" : "List<JSModule> modules",
    "info" : "SingleVariableDeclaration[11729-11751]:SingleVariableDeclaration[11729-11751]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11753-12286]:Block[11753-12286]"
  }, {
    "left" : "List<CompilerInput> inputs = Lists.newArrayList();",
    "right" : "List<CompilerInput> inputs = Lists.newArrayList();",
    "info" : "VariableDeclarationStatement[11759-11809]:VariableDeclarationStatement[11759-11809]"
  }, {
    "left" : "Map<String, JSModule> inputMap = Maps.newHashMap();",
    "right" : "Map<String, JSModule> inputMap = Maps.newHashMap();",
    "info" : "VariableDeclarationStatement[11814-11865]:VariableDeclarationStatement[11814-11865]"
  }, {
    "left" : "for (JSModule module : modules)",
    "right" : "for (JSModule module : modules)",
    "info" : "EnhancedForStatement[11870-12263]:EnhancedForStatement[11870-12263]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11902-12263]:Block[11902-12263]"
  }, {
    "left" : "for (CompilerInput input : module.getInputs())",
    "right" : "for (CompilerInput input : module.getInputs())",
    "info" : "EnhancedForStatement[11910-12257]:EnhancedForStatement[11910-12257]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11957-12257]:Block[11957-12257]"
  }, {
    "left" : "String inputName = input.getName();",
    "right" : "String inputName = input.getName();",
    "info" : "VariableDeclarationStatement[11967-12002]:VariableDeclarationStatement[11967-12002]"
  }, {
    "left" : "inputs.add(input);",
    "right" : "inputs.add(input);",
    "info" : "ExpressionStatement[12190-12208]:ExpressionStatement[12190-12208]"
  }, {
    "left" : "inputMap.put(inputName, module);",
    "right" : "inputMap.put(inputName, module);",
    "info" : "ExpressionStatement[12217-12249]:ExpressionStatement[12217-12249]"
  }, {
    "left" : "return inputs;",
    "right" : "return inputs;",
    "info" : "ReturnStatement[12268-12282]:ReturnStatement[12268-12282]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12680-12684]:PrimitiveType[12680-12684]"
  }, {
    "left" : "initInputsByNameMap",
    "right" : "initInputsByNameMap",
    "info" : "SimpleName[12685-12704]:SimpleName[12685-12704]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12707-13265]:Block[12707-13265]"
  }, {
    "left" : "inputsByName = new HashMap<String, CompilerInput>();",
    "right" : "inputsByName = new HashMap<String, CompilerInput>();",
    "info" : "ExpressionStatement[12713-12765]:ExpressionStatement[12713-12765]"
  }, {
    "left" : "for (CompilerInput input : externs)",
    "right" : "for (CompilerInput input : externs)",
    "info" : "EnhancedForStatement[12770-13017]:EnhancedForStatement[12770-13017]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12806-13017]:Block[12806-13017]"
  }, {
    "left" : "String name = input.getName();",
    "right" : "String name = input.getName();",
    "info" : "VariableDeclarationStatement[12814-12844]:VariableDeclarationStatement[12814-12844]"
  }, {
    "left" : "if (!inputsByName.containsKey(name))",
    "right" : "if (!inputsByName.containsKey(name))",
    "info" : "IfStatement[12851-13011]:IfStatement[12851-13011]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12888-12936]:Block[12888-12936]"
  }, {
    "left" : "inputsByName.put(name, input);",
    "right" : "inputsByName.put(name, input);",
    "info" : "ExpressionStatement[12898-12928]:ExpressionStatement[12898-12928]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12942-13011]:Block[12942-13011]"
  }, {
    "left" : "report(JSError.make(DUPLICATE_EXTERN_INPUT, name));",
    "right" : "report(JSError.make(DUPLICATE_EXTERN_INPUT, name));",
    "info" : "ExpressionStatement[12952-13003]:ExpressionStatement[12952-13003]"
  }, {
    "left" : "for (CompilerInput input : inputs)",
    "right" : "for (CompilerInput input : inputs)",
    "info" : "EnhancedForStatement[13022-13261]:EnhancedForStatement[13022-13261]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13057-13261]:Block[13057-13261]"
  }, {
    "left" : "String name = input.getName();",
    "right" : "String name = input.getName();",
    "info" : "VariableDeclarationStatement[13065-13095]:VariableDeclarationStatement[13065-13095]"
  }, {
    "left" : "if (!inputsByName.containsKey(name))",
    "right" : "if (!inputsByName.containsKey(name))",
    "info" : "IfStatement[13102-13255]:IfStatement[13102-13255]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13139-13187]:Block[13139-13187]"
  }, {
    "left" : "inputsByName.put(name, input);",
    "right" : "inputsByName.put(name, input);",
    "info" : "ExpressionStatement[13149-13179]:ExpressionStatement[13149-13179]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13193-13255]:Block[13193-13255]"
  }, {
    "left" : "report(JSError.make(DUPLICATE_INPUT, name));",
    "right" : "report(JSError.make(DUPLICATE_INPUT, name));",
    "info" : "ExpressionStatement[13203-13247]:ExpressionStatement[13203-13247]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13269-13275]:Modifier[13269-13275]"
  }, {
    "left" : "Result",
    "right" : "Result",
    "info" : "SimpleType[13276-13282]:SimpleType[13276-13282]"
  }, {
    "left" : "compile",
    "right" : "compile",
    "info" : "SimpleName[13283-13290]:SimpleName[13283-13290]"
  }, {
    "left" : "JSSourceFile extern",
    "right" : "JSSourceFile extern",
    "info" : "SingleVariableDeclaration[13298-13317]:SingleVariableDeclaration[13298-13317]"
  }, {
    "left" : "JSSourceFile input",
    "right" : "JSSourceFile input",
    "info" : "SingleVariableDeclaration[13319-13337]:SingleVariableDeclaration[13319-13337]"
  }, {
    "left" : "CompilerOptions options",
    "right" : "CompilerOptions options",
    "info" : "SingleVariableDeclaration[13339-13362]:SingleVariableDeclaration[13339-13362]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13364-13437]:Block[13364-13437]"
  }, {
    "left" : "return compile(extern, new JSSourceFile[] { input }, options);",
    "right" : "return compile(extern, new JSSourceFile[] { input }, options);",
    "info" : "ReturnStatement[13371-13433]:ReturnStatement[13371-13433]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13441-13447]:Modifier[13441-13447]"
  }, {
    "left" : "Result",
    "right" : "Result",
    "info" : "SimpleType[13448-13454]:SimpleType[13448-13454]"
  }, {
    "left" : "compile",
    "right" : "compile",
    "info" : "SimpleName[13455-13462]:SimpleName[13455-13462]"
  }, {
    "left" : "JSSourceFile extern",
    "right" : "JSSourceFile extern",
    "info" : "SingleVariableDeclaration[13470-13489]:SingleVariableDeclaration[13470-13489]"
  }, {
    "left" : "JSSourceFile[] input",
    "right" : "JSSourceFile[] input",
    "info" : "SingleVariableDeclaration[13491-13511]:SingleVariableDeclaration[13491-13511]"
  }, {
    "left" : "CompilerOptions options",
    "right" : "CompilerOptions options",
    "info" : "SingleVariableDeclaration[13513-13536]:SingleVariableDeclaration[13513-13536]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13538-13611]:Block[13538-13611]"
  }, {
    "left" : "return compile(new JSSourceFile[] { extern }, input, options);",
    "right" : "return compile(new JSSourceFile[] { extern }, input, options);",
    "info" : "ReturnStatement[13545-13607]:ReturnStatement[13545-13607]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13615-13621]:Modifier[13615-13621]"
  }, {
    "left" : "Result",
    "right" : "Result",
    "info" : "SimpleType[13622-13628]:SimpleType[13622-13628]"
  }, {
    "left" : "compile",
    "right" : "compile",
    "info" : "SimpleName[13629-13636]:SimpleName[13629-13636]"
  }, {
    "left" : "JSSourceFile extern",
    "right" : "JSSourceFile extern",
    "info" : "SingleVariableDeclaration[13644-13663]:SingleVariableDeclaration[13644-13663]"
  }, {
    "left" : "JSModule[] modules",
    "right" : "JSModule[] modules",
    "info" : "SingleVariableDeclaration[13665-13683]:SingleVariableDeclaration[13665-13683]"
  }, {
    "left" : "CompilerOptions options",
    "right" : "CompilerOptions options",
    "info" : "SingleVariableDeclaration[13685-13708]:SingleVariableDeclaration[13685-13708]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13710-13785]:Block[13710-13785]"
  }, {
    "left" : "return compile(new JSSourceFile[] { extern }, modules, options);",
    "right" : "return compile(new JSSourceFile[] { extern }, modules, options);",
    "info" : "ReturnStatement[13717-13781]:ReturnStatement[13717-13781]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13833-13839]:Modifier[13833-13839]"
  }, {
    "left" : "Result",
    "right" : "Result",
    "info" : "SimpleType[13840-13846]:SimpleType[13840-13846]"
  }, {
    "left" : "compile",
    "right" : "compile",
    "info" : "SimpleName[13847-13854]:SimpleName[13847-13854]"
  }, {
    "left" : "JSSourceFile[] externs",
    "right" : "JSSourceFile[] externs",
    "info" : "SingleVariableDeclaration[13855-13877]:SingleVariableDeclaration[13855-13877]"
  }, {
    "left" : "JSSourceFile[] inputs",
    "right" : "JSSourceFile[] inputs",
    "info" : "SingleVariableDeclaration[13903-13924]:SingleVariableDeclaration[13903-13924]"
  }, {
    "left" : "CompilerOptions options",
    "right" : "CompilerOptions options",
    "info" : "SingleVariableDeclaration[13950-13973]:SingleVariableDeclaration[13950-13973]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13975-14110]:Block[13975-14110]"
  }, {
    "left" : "return compile(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSSourceFile>newArrayList(inputs),\n        options);",
    "right" : "return compile(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSSourceFile>newArrayList(inputs),\n        options);",
    "info" : "ReturnStatement[13981-14106]:ReturnStatement[13981-14106]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14158-14164]:Modifier[14158-14164]"
  }, {
    "left" : "Result",
    "right" : "Result",
    "info" : "SimpleType[14165-14171]:SimpleType[14165-14171]"
  }, {
    "left" : "compile",
    "right" : "compile",
    "info" : "SimpleName[14172-14179]:SimpleName[14172-14179]"
  }, {
    "left" : "List<JSSourceFile> externs",
    "right" : "List<JSSourceFile> externs",
    "info" : "SingleVariableDeclaration[14180-14206]:SingleVariableDeclaration[14180-14206]"
  }, {
    "left" : "List<JSSourceFile> inputs",
    "right" : "List<JSSourceFile> inputs",
    "info" : "SingleVariableDeclaration[14214-14239]:SingleVariableDeclaration[14214-14239]"
  }, {
    "left" : "CompilerOptions options",
    "right" : "CompilerOptions options",
    "info" : "SingleVariableDeclaration[14241-14264]:SingleVariableDeclaration[14241-14264]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14266-14649]:Block[14266-14649]"
  }, {
    "left" : "Preconditions.checkState(jsRoot == null);",
    "right" : "Preconditions.checkState(jsRoot == null);",
    "info" : "ExpressionStatement[14326-14367]:ExpressionStatement[14326-14367]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[14373-14645]:TryStatement[14373-14645]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14377-14507]:Block[14377-14507]"
  }, {
    "left" : "init(externs, inputs, options);",
    "right" : "init(externs, inputs, options);",
    "info" : "ExpressionStatement[14385-14416]:ExpressionStatement[14385-14416]"
  }, {
    "left" : "if (hasErrors())",
    "right" : "if (hasErrors())",
    "info" : "IfStatement[14423-14477]:IfStatement[14423-14477]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14440-14477]:Block[14440-14477]"
  }, {
    "left" : "return getResult();",
    "right" : "return getResult();",
    "info" : "ReturnStatement[14450-14469]:ReturnStatement[14450-14469]"
  }, {
    "left" : "return compile();",
    "right" : "return compile();",
    "info" : "ReturnStatement[14484-14501]:ReturnStatement[14484-14501]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14516-14645]:Block[14516-14645]"
  }, {
    "left" : "Tracer t = newTracer(\"generateReport\");",
    "right" : "Tracer t = newTracer(\"generateReport\");",
    "info" : "VariableDeclarationStatement[14524-14563]:VariableDeclarationStatement[14524-14563]"
  }, {
    "left" : "errorManager.generateReport();",
    "right" : "errorManager.generateReport();",
    "info" : "ExpressionStatement[14570-14600]:ExpressionStatement[14570-14600]"
  }, {
    "left" : "stopTracer(t, \"generateReport\");",
    "right" : "stopTracer(t, \"generateReport\");",
    "info" : "ExpressionStatement[14607-14639]:ExpressionStatement[14607-14639]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14698-14704]:Modifier[14698-14704]"
  }, {
    "left" : "Result",
    "right" : "Result",
    "info" : "SimpleType[14705-14711]:SimpleType[14705-14711]"
  }, {
    "left" : "compile",
    "right" : "compile",
    "info" : "SimpleName[14712-14719]:SimpleName[14712-14719]"
  }, {
    "left" : "JSSourceFile[] externs",
    "right" : "JSSourceFile[] externs",
    "info" : "SingleVariableDeclaration[14720-14742]:SingleVariableDeclaration[14720-14742]"
  }, {
    "left" : "JSModule[] modules",
    "right" : "JSModule[] modules",
    "info" : "SingleVariableDeclaration[14768-14786]:SingleVariableDeclaration[14768-14786]"
  }, {
    "left" : "CompilerOptions options",
    "right" : "CompilerOptions options",
    "info" : "SingleVariableDeclaration[14812-14835]:SingleVariableDeclaration[14812-14835]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14837-14976]:Block[14837-14976]"
  }, {
    "left" : "return compileModules(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSModule>newArrayList(modules),\n        options);",
    "right" : "return compileModules(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSModule>newArrayList(modules),\n        options);",
    "info" : "ReturnStatement[14843-14972]:ReturnStatement[14843-14972]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15025-15031]:Modifier[15025-15031]"
  }, {
    "left" : "Result",
    "right" : "Result",
    "info" : "SimpleType[15032-15038]:SimpleType[15032-15038]"
  }, {
    "left" : "compileModules",
    "right" : "compileModules",
    "info" : "SimpleName[15039-15053]:SimpleName[15039-15053]"
  }, {
    "left" : "List<JSSourceFile> externs",
    "right" : "List<JSSourceFile> externs",
    "info" : "SingleVariableDeclaration[15054-15080]:SingleVariableDeclaration[15054-15080]"
  }, {
    "left" : "List<JSModule> modules",
    "right" : "List<JSModule> modules",
    "info" : "SingleVariableDeclaration[15088-15110]:SingleVariableDeclaration[15088-15110]"
  }, {
    "left" : "CompilerOptions options",
    "right" : "CompilerOptions options",
    "info" : "SingleVariableDeclaration[15112-15135]:SingleVariableDeclaration[15112-15135]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15137-15528]:Block[15137-15528]"
  }, {
    "left" : "Preconditions.checkState(jsRoot == null);",
    "right" : "Preconditions.checkState(jsRoot == null);",
    "info" : "ExpressionStatement[15197-15238]:ExpressionStatement[15197-15238]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[15244-15524]:TryStatement[15244-15524]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15248-15386]:Block[15248-15386]"
  }, {
    "left" : "initModules(externs, modules, options);",
    "right" : "initModules(externs, modules, options);",
    "info" : "ExpressionStatement[15256-15295]:ExpressionStatement[15256-15295]"
  }, {
    "left" : "if (hasErrors())",
    "right" : "if (hasErrors())",
    "info" : "IfStatement[15302-15356]:IfStatement[15302-15356]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15319-15356]:Block[15319-15356]"
  }, {
    "left" : "return getResult();",
    "right" : "return getResult();",
    "info" : "ReturnStatement[15329-15348]:ReturnStatement[15329-15348]"
  }, {
    "left" : "return compile();",
    "right" : "return compile();",
    "info" : "ReturnStatement[15363-15380]:ReturnStatement[15363-15380]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15395-15524]:Block[15395-15524]"
  }, {
    "left" : "Tracer t = newTracer(\"generateReport\");",
    "right" : "Tracer t = newTracer(\"generateReport\");",
    "info" : "VariableDeclarationStatement[15403-15442]:VariableDeclarationStatement[15403-15442]"
  }, {
    "left" : "errorManager.generateReport();",
    "right" : "errorManager.generateReport();",
    "info" : "ExpressionStatement[15449-15479]:ExpressionStatement[15449-15479]"
  }, {
    "left" : "stopTracer(t, \"generateReport\");",
    "right" : "stopTracer(t, \"generateReport\");",
    "info" : "ExpressionStatement[15486-15518]:ExpressionStatement[15486-15518]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[15532-15539]:Modifier[15532-15539]"
  }, {
    "left" : "Result",
    "right" : "Result",
    "info" : "SimpleType[15540-15546]:SimpleType[15540-15546]"
  }, {
    "left" : "compile",
    "right" : "compile",
    "info" : "SimpleName[15547-15554]:SimpleName[15547-15554]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15557-15735]:Block[15557-15735]"
  }, {
    "left" : "return runInCompilerThread(new Callable<Result>() {\n      public Result call() throws Exception {\n        compileInternal();\n        return getResult();\n      }\n    });",
    "right" : "return runInCompilerThread(new Callable<Result>() {\n      public Result call() throws Exception {\n        compileInternal();\n        return getResult();\n      }\n    });",
    "info" : "ReturnStatement[15563-15731]:ReturnStatement[15563-15731]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15621-15627]:Modifier[15621-15627]"
  }, {
    "left" : "Result",
    "right" : "Result",
    "info" : "SimpleType[15628-15634]:SimpleType[15628-15634]"
  }, {
    "left" : "call",
    "right" : "call",
    "info" : "SimpleName[15635-15639]:SimpleName[15635-15639]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[15649-15658]:SimpleType[15649-15658]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15659-15723]:Block[15659-15723]"
  }, {
    "left" : "compileInternal();",
    "right" : "compileInternal();",
    "info" : "ExpressionStatement[15669-15687]:ExpressionStatement[15669-15687]"
  }, {
    "left" : "return getResult();",
    "right" : "return getResult();",
    "info" : "ReturnStatement[15696-15715]:ReturnStatement[15696-15715]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15844-15850]:Modifier[15844-15850]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[15851-15855]:PrimitiveType[15851-15855]"
  }, {
    "left" : "disableThreads",
    "right" : "disableThreads",
    "info" : "SimpleName[15856-15870]:SimpleName[15856-15870]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15873-15902]:Block[15873-15902]"
  }, {
    "left" : "useThreads = false;",
    "right" : "useThreads = false;",
    "info" : "ExpressionStatement[15879-15898]:ExpressionStatement[15879-15898]"
  }, {
    "left" : "@SuppressWarnings(\"unchecked\")",
    "right" : "@SuppressWarnings(\"unchecked\")",
    "info" : "SingleMemberAnnotation[15906-15936]:SingleMemberAnnotation[15906-15936]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[15939-15946]:Modifier[15939-15946]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "TypeParameter[15948-15949]:TypeParameter[15948-15949]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "SimpleType[15951-15952]:SimpleType[15951-15952]"
  }, {
    "left" : "runInCompilerThread",
    "right" : "runInCompilerThread",
    "info" : "SimpleName[15953-15972]:SimpleName[15953-15972]"
  }, {
    "left" : "final Callable<T> callable",
    "right" : "final Callable<T> callable",
    "info" : "SingleVariableDeclaration[15973-15999]:SingleVariableDeclaration[15973-15999]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16001-17450]:Block[16001-17450]"
  }, {
    "left" : "final boolean dumpTraceReport = options.tracer.isOn();",
    "right" : "final boolean dumpTraceReport = options.tracer.isOn();",
    "info" : "VariableDeclarationStatement[16389-16443]:VariableDeclarationStatement[16389-16443]"
  }, {
    "left" : "final Object[] result = new Object[1];",
    "right" : "final Object[] result = new Object[1];",
    "info" : "VariableDeclarationStatement[16448-16486]:VariableDeclarationStatement[16448-16486]"
  }, {
    "left" : "final Throwable[] exception = new Throwable[1];",
    "right" : "final Throwable[] exception = new Throwable[1];",
    "info" : "VariableDeclarationStatement[16491-16538]:VariableDeclarationStatement[16491-16538]"
  }, {
    "left" : "Runnable runnable = new Runnable() {\n      public void run() {\n        try {\n          if (dumpTraceReport) {\n            Tracer.initCurrentThreadTrace();\n          }\n          result[0] = callable.call();\n        } catch (Throwable e) {\n          exception[0] = e;\n        } finally {\n          if (dumpTraceReport) {\n            Tracer.logAndClearCurrentThreadTrace();\n          }\n        }\n      }\n    };",
    "right" : "Runnable runnable = new Runnable() {\n      public void run() {\n        try {\n          if (dumpTraceReport) {\n            Tracer.initCurrentThreadTrace();\n          }\n          result[0] = callable.call();\n        } catch (Throwable e) {\n          exception[0] = e;\n        } finally {\n          if (dumpTraceReport) {\n            Tracer.logAndClearCurrentThreadTrace();\n          }\n        }\n      }\n    };",
    "info" : "VariableDeclarationStatement[16543-16950]:VariableDeclarationStatement[16543-16950]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16586-16592]:Modifier[16586-16592]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[16593-16597]:PrimitiveType[16593-16597]"
  }, {
    "left" : "run",
    "right" : "run",
    "info" : "SimpleName[16598-16601]:SimpleName[16598-16601]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16604-16943]:Block[16604-16943]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[16614-16935]:TryStatement[16614-16935]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16618-16758]:Block[16618-16758]"
  }, {
    "left" : "if (dumpTraceReport)",
    "right" : "if (dumpTraceReport)",
    "info" : "IfStatement[16630-16709]:IfStatement[16630-16709]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16651-16709]:Block[16651-16709]"
  }, {
    "left" : "Tracer.initCurrentThreadTrace();",
    "right" : "Tracer.initCurrentThreadTrace();",
    "info" : "ExpressionStatement[16665-16697]:ExpressionStatement[16665-16697]"
  }, {
    "left" : "result[0] = callable.call();",
    "right" : "result[0] = callable.call();",
    "info" : "ExpressionStatement[16720-16748]:ExpressionStatement[16720-16748]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16779-16818]:Block[16779-16818]"
  }, {
    "left" : "exception[0] = e;",
    "right" : "exception[0] = e;",
    "info" : "ExpressionStatement[16791-16808]:ExpressionStatement[16791-16808]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16827-16935]:Block[16827-16935]"
  }, {
    "left" : "if (dumpTraceReport)",
    "right" : "if (dumpTraceReport)",
    "info" : "IfStatement[16839-16925]:IfStatement[16839-16925]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16860-16925]:Block[16860-16925]"
  }, {
    "left" : "Tracer.logAndClearCurrentThreadTrace();",
    "right" : "Tracer.logAndClearCurrentThreadTrace();",
    "info" : "ExpressionStatement[16874-16913]:ExpressionStatement[16874-16913]"
  }, {
    "left" : "if (useThreads)",
    "right" : "if (useThreads)",
    "info" : "IfStatement[16956-17272]:IfStatement[16956-17272]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16972-17237]:Block[16972-17237]"
  }, {
    "left" : "Thread th = new Thread(null, runnable, \"jscompiler\", COMPILER_STACK_SIZE);",
    "right" : "Thread th = new Thread(null, runnable, \"jscompiler\", COMPILER_STACK_SIZE);",
    "info" : "VariableDeclarationStatement[16980-17054]:VariableDeclarationStatement[16980-17054]"
  }, {
    "left" : "th.start();",
    "right" : "th.start();",
    "info" : "ExpressionStatement[17061-17072]:ExpressionStatement[17061-17072]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[17079-17231]:WhileStatement[17079-17231]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17092-17231]:Block[17092-17231]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[17102-17223]:TryStatement[17102-17223]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17106-17155]:Block[17106-17155]"
  }, {
    "left" : "th.join();",
    "right" : "th.join();",
    "info" : "ExpressionStatement[17118-17128]:ExpressionStatement[17118-17128]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17139-17145]:BreakStatement[17139-17145]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17192-17223]:Block[17192-17223]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17243-17272]:Block[17243-17272]"
  }, {
    "left" : "runnable.run();",
    "right" : "runnable.run();",
    "info" : "ExpressionStatement[17251-17266]:ExpressionStatement[17251-17266]"
  }, {
    "left" : "if (exception[0] != null)",
    "right" : "if (exception[0] != null)",
    "info" : "IfStatement[17338-17419]:IfStatement[17338-17419]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17364-17419]:Block[17364-17419]"
  }, {
    "left" : "throw new RuntimeException(exception[0]);",
    "right" : "throw new RuntimeException(exception[0]);",
    "info" : "ThrowStatement[17372-17413]:ThrowStatement[17372-17413]"
  }, {
    "left" : "return (T) result[0];",
    "right" : "return (T) result[0];",
    "info" : "ReturnStatement[17425-17446]:ReturnStatement[17425-17446]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[17454-17461]:Modifier[17454-17461]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[17462-17466]:PrimitiveType[17462-17466]"
  }, {
    "left" : "compileInternal",
    "right" : "compileInternal",
    "info" : "SimpleName[17467-17482]:SimpleName[17467-17482]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17485-18282]:Block[17485-18282]"
  }, {
    "left" : "parse();",
    "right" : "parse();",
    "info" : "ExpressionStatement[17491-17499]:ExpressionStatement[17491-17499]"
  }, {
    "left" : "if (hasErrors())",
    "right" : "if (hasErrors())",
    "info" : "IfStatement[17504-17542]:IfStatement[17504-17542]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17521-17542]:Block[17521-17542]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[17529-17536]:ReturnStatement[17529-17536]"
  }, {
    "left" : "if (!precheck())",
    "right" : "if (!precheck())",
    "info" : "IfStatement[17548-17586]:IfStatement[17548-17586]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17565-17586]:Block[17565-17586]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[17573-17580]:ReturnStatement[17573-17580]"
  }, {
    "left" : "if (options.nameAnonymousFunctionsOnly)",
    "right" : "if (options.nameAnonymousFunctionsOnly)",
    "info" : "IfStatement[17592-17739]:IfStatement[17592-17739]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17632-17739]:Block[17632-17739]"
  }, {
    "left" : "check();",
    "right" : "check();",
    "info" : "ExpressionStatement[17711-17719]:ExpressionStatement[17711-17719]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[17726-17733]:ReturnStatement[17726-17733]"
  }, {
    "left" : "if (!options.skipAllPasses)",
    "right" : "if (!options.skipAllPasses)",
    "info" : "IfStatement[17745-18108]:IfStatement[17745-18108]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17773-18108]:Block[17773-18108]"
  }, {
    "left" : "check();",
    "right" : "check();",
    "info" : "ExpressionStatement[17781-17789]:ExpressionStatement[17781-17789]"
  }, {
    "left" : "if (hasErrors())",
    "right" : "if (hasErrors())",
    "info" : "IfStatement[17796-17838]:IfStatement[17796-17838]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17813-17838]:Block[17813-17838]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[17823-17830]:ReturnStatement[17823-17830]"
  }, {
    "left" : "if (options.isExternExportsEnabled()\n          || options.externExportsPath != null)",
    "right" : "if (options.isExternExportsEnabled()\n          || options.externExportsPath != null)",
    "info" : "IfStatement[17846-17965]:IfStatement[17846-17965]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17931-17965]:Block[17931-17965]"
  }, {
    "left" : "externExports();",
    "right" : "externExports();",
    "info" : "ExpressionStatement[17941-17957]:ExpressionStatement[17941-17957]"
  }, {
    "left" : "if (!options.ideMode)",
    "right" : "if (!options.ideMode)",
    "info" : "IfStatement[18051-18102]:IfStatement[18051-18102]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18073-18102]:Block[18073-18102]"
  }, {
    "left" : "optimize();",
    "right" : "optimize();",
    "info" : "ExpressionStatement[18083-18094]:ExpressionStatement[18083-18094]"
  }, {
    "left" : "if (options.recordFunctionInformation)",
    "right" : "if (options.recordFunctionInformation)",
    "info" : "IfStatement[18114-18195]:IfStatement[18114-18195]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18153-18195]:Block[18153-18195]"
  }, {
    "left" : "recordFunctionInformation();",
    "right" : "recordFunctionInformation();",
    "info" : "ExpressionStatement[18161-18189]:ExpressionStatement[18161-18189]"
  }, {
    "left" : "if (options.devMode == DevMode.START_AND_END)",
    "right" : "if (options.devMode == DevMode.START_AND_END)",
    "info" : "IfStatement[18201-18278]:IfStatement[18201-18278]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18247-18278]:Block[18247-18278]"
  }, {
    "left" : "runSanityCheck();",
    "right" : "runSanityCheck();",
    "info" : "ExpressionStatement[18255-18272]:ExpressionStatement[18255-18272]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18286-18292]:Modifier[18286-18292]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[18293-18297]:PrimitiveType[18293-18297]"
  }, {
    "left" : "parse",
    "right" : "parse",
    "info" : "SimpleName[18298-18303]:SimpleName[18298-18303]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18306-18330]:Block[18306-18330]"
  }, {
    "left" : "parseInputs();",
    "right" : "parseInputs();",
    "info" : "ExpressionStatement[18312-18326]:ExpressionStatement[18312-18326]"
  }, {
    "left" : "PassConfig",
    "right" : "PassConfig",
    "info" : "SimpleType[18334-18344]:SimpleType[18334-18344]"
  }, {
    "left" : "getPassConfig",
    "right" : "getPassConfig",
    "info" : "SimpleName[18345-18358]:SimpleName[18345-18358]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18361-18460]:Block[18361-18460]"
  }, {
    "left" : "if (passes == null)",
    "right" : "if (passes == null)",
    "info" : "IfStatement[18367-18437]:IfStatement[18367-18437]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18387-18437]:Block[18387-18437]"
  }, {
    "left" : "passes = createPassConfigInternal();",
    "right" : "passes = createPassConfigInternal();",
    "info" : "ExpressionStatement[18395-18431]:ExpressionStatement[18395-18431]"
  }, {
    "left" : "return passes;",
    "right" : "return passes;",
    "info" : "ReturnStatement[18442-18456]:ReturnStatement[18442-18456]"
  }, {
    "left" : "PassConfig",
    "right" : "PassConfig",
    "info" : "SimpleType[18573-18583]:SimpleType[18573-18583]"
  }, {
    "left" : "createPassConfigInternal",
    "right" : "createPassConfigInternal",
    "info" : "SimpleName[18584-18608]:SimpleName[18584-18608]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18611-18659]:Block[18611-18659]"
  }, {
    "left" : "return new DefaultPassConfig(options);",
    "right" : "return new DefaultPassConfig(options);",
    "info" : "ReturnStatement[18617-18655]:ReturnStatement[18617-18655]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18864-18870]:Modifier[18864-18870]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[18871-18875]:PrimitiveType[18871-18875]"
  }, {
    "left" : "setPassConfig",
    "right" : "setPassConfig",
    "info" : "SimpleName[18876-18889]:SimpleName[18876-18889]"
  }, {
    "left" : "PassConfig passes",
    "right" : "PassConfig passes",
    "info" : "SingleVariableDeclaration[18890-18907]:SingleVariableDeclaration[18890-18907]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18909-19407]:Block[18909-19407]"
  }, {
    "left" : "Preconditions.checkNotNull(passes);",
    "right" : "Preconditions.checkNotNull(passes);",
    "info" : "ExpressionStatement[19224-19259]:ExpressionStatement[19224-19259]"
  }, {
    "left" : "if (this.passes != null)",
    "right" : "if (this.passes != null)",
    "info" : "IfStatement[19265-19377]:IfStatement[19265-19377]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19290-19377]:Block[19290-19377]"
  }, {
    "left" : "throw new IllegalStateException(\"this.passes has already been assigned\");",
    "right" : "throw new IllegalStateException(\"this.passes has already been assigned\");",
    "info" : "ThrowStatement[19298-19371]:ThrowStatement[19298-19371]"
  }, {
    "left" : "this.passes = passes;",
    "right" : "this.passes = passes;",
    "info" : "ExpressionStatement[19382-19403]:ExpressionStatement[19382-19403]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[19606-19613]:PrimitiveType[19606-19613]"
  }, {
    "left" : "precheck",
    "right" : "precheck",
    "info" : "SimpleName[19614-19622]:SimpleName[19614-19622]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19625-19647]:Block[19625-19647]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[19631-19643]:ReturnStatement[19631-19643]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[19651-19657]:Modifier[19651-19657]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[19658-19662]:PrimitiveType[19658-19662]"
  }, {
    "left" : "check",
    "right" : "check",
    "info" : "SimpleName[19663-19668]:SimpleName[19663-19668]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19671-20673]:Block[19671-20673]"
  }, {
    "left" : "runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);",
    "right" : "runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);",
    "info" : "ExpressionStatement[19677-19732]:ExpressionStatement[19677-19732]"
  }, {
    "left" : "PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);",
    "right" : "PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);",
    "info" : "VariableDeclarationStatement[19738-19804]:VariableDeclarationStatement[19738-19804]"
  }, {
    "left" : "if (options.devMode == DevMode.EVERY_PASS)",
    "right" : "if (options.devMode == DevMode.EVERY_PASS)",
    "info" : "IfStatement[19809-19909]:IfStatement[19809-19909]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19852-19909]:Block[19852-19909]"
  }, {
    "left" : "phaseOptimizer.setSanityCheck(sanityCheck);",
    "right" : "phaseOptimizer.setSanityCheck(sanityCheck);",
    "info" : "ExpressionStatement[19860-19903]:ExpressionStatement[19860-19903]"
  }, {
    "left" : "phaseOptimizer.consume(getPassConfig().getChecks());",
    "right" : "phaseOptimizer.consume(getPassConfig().getChecks());",
    "info" : "ExpressionStatement[19914-19966]:ExpressionStatement[19914-19966]"
  }, {
    "left" : "phaseOptimizer.process(externsRoot, jsRoot);",
    "right" : "phaseOptimizer.process(externsRoot, jsRoot);",
    "info" : "ExpressionStatement[19971-20015]:ExpressionStatement[19971-20015]"
  }, {
    "left" : "if (hasErrors())",
    "right" : "if (hasErrors())",
    "info" : "IfStatement[20020-20058]:IfStatement[20020-20058]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20037-20058]:Block[20037-20058]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[20045-20052]:ReturnStatement[20045-20052]"
  }, {
    "left" : "if (options.nameAnonymousFunctionsOnly)",
    "right" : "if (options.nameAnonymousFunctionsOnly)",
    "info" : "IfStatement[20141-20202]:IfStatement[20141-20202]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20181-20202]:Block[20181-20202]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[20189-20196]:ReturnStatement[20189-20196]"
  }, {
    "left" : "if (options.removeTryCatchFinally)",
    "right" : "if (options.removeTryCatchFinally)",
    "info" : "IfStatement[20208-20281]:IfStatement[20208-20281]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20243-20281]:Block[20243-20281]"
  }, {
    "left" : "removeTryCatchFinally();",
    "right" : "removeTryCatchFinally();",
    "info" : "ExpressionStatement[20251-20275]:ExpressionStatement[20251-20275]"
  }, {
    "left" : "if (!options.stripTypes.isEmpty() ||\n        !options.stripNameSuffixes.isEmpty() ||\n        !options.stripTypePrefixes.isEmpty() ||\n        !options.stripNamePrefixes.isEmpty())",
    "right" : "if (!options.stripTypes.isEmpty() ||\n        !options.stripNameSuffixes.isEmpty() ||\n        !options.stripTypePrefixes.isEmpty() ||\n        !options.stripNamePrefixes.isEmpty())",
    "info" : "IfStatement[20287-20601]:IfStatement[20287-20601]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20466-20601]:Block[20466-20601]"
  }, {
    "left" : "stripCode(options.stripTypes, options.stripNameSuffixes,\n          options.stripTypePrefixes, options.stripNamePrefixes);",
    "right" : "stripCode(options.stripTypes, options.stripNameSuffixes,\n          options.stripTypePrefixes, options.stripNamePrefixes);",
    "info" : "ExpressionStatement[20474-20595]:ExpressionStatement[20474-20595]"
  }, {
    "left" : "runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);",
    "right" : "runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);",
    "info" : "ExpressionStatement[20607-20669]:ExpressionStatement[20607-20669]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[20677-20684]:Modifier[20677-20684]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[20685-20689]:PrimitiveType[20685-20689]"
  }, {
    "left" : "externExports",
    "right" : "externExports",
    "info" : "SimpleName[20690-20703]:SimpleName[20690-20703]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20706-20939]:Block[20706-20939]"
  }, {
    "left" : "logger.info(\"Creating extern file for exports\");",
    "right" : "logger.info(\"Creating extern file for exports\");",
    "info" : "ExpressionStatement[20712-20760]:ExpressionStatement[20712-20760]"
  }, {
    "left" : "startPass(\"externExports\");",
    "right" : "startPass(\"externExports\");",
    "info" : "ExpressionStatement[20765-20792]:ExpressionStatement[20765-20792]"
  }, {
    "left" : "ExternExportsPass pass = new ExternExportsPass(this);",
    "right" : "ExternExportsPass pass = new ExternExportsPass(this);",
    "info" : "VariableDeclarationStatement[20798-20851]:VariableDeclarationStatement[20798-20851]"
  }, {
    "left" : "process(pass);",
    "right" : "process(pass);",
    "info" : "ExpressionStatement[20856-20870]:ExpressionStatement[20856-20870]"
  }, {
    "left" : "externExports = pass.getGeneratedExterns();",
    "right" : "externExports = pass.getGeneratedExterns();",
    "info" : "ExpressionStatement[20876-20919]:ExpressionStatement[20876-20919]"
  }, {
    "left" : "endPass();",
    "right" : "endPass();",
    "info" : "ExpressionStatement[20925-20935]:ExpressionStatement[20925-20935]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[20943-20947]:PrimitiveType[20943-20947]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[20948-20955]:SimpleName[20948-20955]"
  }, {
    "left" : "CompilerPass p",
    "right" : "CompilerPass p",
    "info" : "SingleVariableDeclaration[20956-20970]:SingleVariableDeclaration[20956-20970]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20972-21013]:Block[20972-21013]"
  }, {
    "left" : "p.process(externsRoot, jsRoot);",
    "right" : "p.process(externsRoot, jsRoot);",
    "info" : "ExpressionStatement[20978-21009]:ExpressionStatement[20978-21009]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[21107-21116]:MarkerAnnotation[21107-21116]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[21121-21130]:Modifier[21121-21130]"
  }, {
    "left" : "CompilerPass",
    "right" : "CompilerPass",
    "info" : "SimpleType[21131-21143]:SimpleType[21131-21143]"
  }, {
    "left" : "createInternal",
    "right" : "createInternal",
    "info" : "SimpleName[21144-21158]:SimpleName[21144-21158]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[21159-21184]:SingleVariableDeclaration[21159-21184]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21186-21233]:Block[21186-21233]"
  }, {
    "left" : "return new SanityCheck(compiler);",
    "right" : "return new SanityCheck(compiler);",
    "info" : "ReturnStatement[21194-21227]:ReturnStatement[21194-21227]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[21242-21249]:Modifier[21242-21249]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[21250-21254]:PrimitiveType[21250-21254]"
  }, {
    "left" : "maybeSanityCheck",
    "right" : "maybeSanityCheck",
    "info" : "SimpleName[21255-21271]:SimpleName[21255-21271]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21274-21358]:Block[21274-21358]"
  }, {
    "left" : "if (options.devMode == DevMode.EVERY_PASS)",
    "right" : "if (options.devMode == DevMode.EVERY_PASS)",
    "info" : "IfStatement[21280-21354]:IfStatement[21280-21354]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21323-21354]:Block[21323-21354]"
  }, {
    "left" : "runSanityCheck();",
    "right" : "runSanityCheck();",
    "info" : "ExpressionStatement[21331-21348]:ExpressionStatement[21331-21348]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[21362-21369]:Modifier[21362-21369]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[21370-21374]:PrimitiveType[21370-21374]"
  }, {
    "left" : "runSanityCheck",
    "right" : "runSanityCheck",
    "info" : "SimpleName[21375-21389]:SimpleName[21375-21389]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21392-21456]:Block[21392-21456]"
  }, {
    "left" : "sanityCheck.create(this).process(externsRoot, jsRoot);",
    "right" : "sanityCheck.create(this).process(externsRoot, jsRoot);",
    "info" : "ExpressionStatement[21398-21452]:ExpressionStatement[21398-21452]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[21536-21540]:PrimitiveType[21536-21540]"
  }, {
    "left" : "removeTryCatchFinally",
    "right" : "removeTryCatchFinally",
    "info" : "SimpleName[21541-21562]:SimpleName[21541-21562]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21565-21735]:Block[21565-21735]"
  }, {
    "left" : "logger.info(\"Remove try/catch/finally\");",
    "right" : "logger.info(\"Remove try/catch/finally\");",
    "info" : "ExpressionStatement[21571-21611]:ExpressionStatement[21571-21611]"
  }, {
    "left" : "startPass(\"removeTryCatchFinally\");",
    "right" : "startPass(\"removeTryCatchFinally\");",
    "info" : "ExpressionStatement[21616-21651]:ExpressionStatement[21616-21651]"
  }, {
    "left" : "RemoveTryCatch r = new RemoveTryCatch(this);",
    "right" : "RemoveTryCatch r = new RemoveTryCatch(this);",
    "info" : "VariableDeclarationStatement[21656-21700]:VariableDeclarationStatement[21656-21700]"
  }, {
    "left" : "process(r);",
    "right" : "process(r);",
    "info" : "ExpressionStatement[21705-21716]:ExpressionStatement[21705-21716]"
  }, {
    "left" : "endPass();",
    "right" : "endPass();",
    "info" : "ExpressionStatement[21721-21731]:ExpressionStatement[21721-21731]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[21879-21883]:PrimitiveType[21879-21883]"
  }, {
    "left" : "stripCode",
    "right" : "stripCode",
    "info" : "SimpleName[21884-21893]:SimpleName[21884-21893]"
  }, {
    "left" : "Set<String> stripTypes",
    "right" : "Set<String> stripTypes",
    "info" : "SingleVariableDeclaration[21894-21916]:SingleVariableDeclaration[21894-21916]"
  }, {
    "left" : "Set<String> stripNameSuffixes",
    "right" : "Set<String> stripNameSuffixes",
    "info" : "SingleVariableDeclaration[21918-21947]:SingleVariableDeclaration[21918-21947]"
  }, {
    "left" : "Set<String> stripTypePrefixes",
    "right" : "Set<String> stripTypePrefixes",
    "info" : "SingleVariableDeclaration[21955-21984]:SingleVariableDeclaration[21955-21984]"
  }, {
    "left" : "Set<String> stripNamePrefixes",
    "right" : "Set<String> stripNamePrefixes",
    "info" : "SingleVariableDeclaration[21986-22015]:SingleVariableDeclaration[21986-22015]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22017-22228]:Block[22017-22228]"
  }, {
    "left" : "logger.info(\"Strip code\");",
    "right" : "logger.info(\"Strip code\");",
    "info" : "ExpressionStatement[22023-22049]:ExpressionStatement[22023-22049]"
  }, {
    "left" : "startPass(\"stripCode\");",
    "right" : "startPass(\"stripCode\");",
    "info" : "ExpressionStatement[22054-22077]:ExpressionStatement[22054-22077]"
  }, {
    "left" : "StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n        stripTypePrefixes, stripNamePrefixes);",
    "right" : "StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n        stripTypePrefixes, stripNamePrefixes);",
    "info" : "VariableDeclarationStatement[22082-22193]:VariableDeclarationStatement[22082-22193]"
  }, {
    "left" : "process(r);",
    "right" : "process(r);",
    "info" : "ExpressionStatement[22198-22209]:ExpressionStatement[22198-22209]"
  }, {
    "left" : "endPass();",
    "right" : "endPass();",
    "info" : "ExpressionStatement[22214-22224]:ExpressionStatement[22214-22224]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[22317-22324]:Modifier[22317-22324]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[22325-22329]:PrimitiveType[22325-22329]"
  }, {
    "left" : "runCustomPasses",
    "right" : "runCustomPasses",
    "info" : "SimpleName[22330-22345]:SimpleName[22330-22345]"
  }, {
    "left" : "CustomPassExecutionTime executionTime",
    "right" : "CustomPassExecutionTime executionTime",
    "info" : "SingleVariableDeclaration[22346-22383]:SingleVariableDeclaration[22346-22383]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22385-22668]:Block[22385-22668]"
  }, {
    "left" : "if (options.customPasses != null)",
    "right" : "if (options.customPasses != null)",
    "info" : "IfStatement[22391-22664]:IfStatement[22391-22664]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22425-22664]:Block[22425-22664]"
  }, {
    "left" : "Tracer t = newTracer(\"runCustomPasses\");",
    "right" : "Tracer t = newTracer(\"runCustomPasses\");",
    "info" : "VariableDeclarationStatement[22433-22473]:VariableDeclarationStatement[22433-22473]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[22480-22658]:TryStatement[22480-22658]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22484-22598]:Block[22484-22598]"
  }, {
    "left" : "for (CompilerPass p : options.customPasses.get(executionTime))",
    "right" : "for (CompilerPass p : options.customPasses.get(executionTime))",
    "info" : "EnhancedForStatement[22494-22590]:EnhancedForStatement[22494-22590]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22557-22590]:Block[22557-22590]"
  }, {
    "left" : "process(p);",
    "right" : "process(p);",
    "info" : "ExpressionStatement[22569-22580]:ExpressionStatement[22569-22580]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22607-22658]:Block[22607-22658]"
  }, {
    "left" : "stopTracer(t, \"runCustomPasses\");",
    "right" : "stopTracer(t, \"runCustomPasses\");",
    "info" : "ExpressionStatement[22617-22650]:ExpressionStatement[22617-22650]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[22801-22805]:PrimitiveType[22801-22805]"
  }, {
    "left" : "startPass",
    "right" : "startPass",
    "info" : "SimpleName[22806-22815]:SimpleName[22806-22815]"
  }, {
    "left" : "String passName",
    "right" : "String passName",
    "info" : "SingleVariableDeclaration[22816-22831]:SingleVariableDeclaration[22816-22831]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22833-22964]:Block[22833-22964]"
  }, {
    "left" : "Preconditions.checkState(currentTracer == null);",
    "right" : "Preconditions.checkState(currentTracer == null);",
    "info" : "ExpressionStatement[22839-22887]:ExpressionStatement[22839-22887]"
  }, {
    "left" : "currentPassName = passName;",
    "right" : "currentPassName = passName;",
    "info" : "ExpressionStatement[22892-22919]:ExpressionStatement[22892-22919]"
  }, {
    "left" : "currentTracer = newTracer(passName);",
    "right" : "currentTracer = newTracer(passName);",
    "info" : "ExpressionStatement[22924-22960]:ExpressionStatement[22924-22960]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[23010-23014]:PrimitiveType[23010-23014]"
  }, {
    "left" : "endPass",
    "right" : "endPass",
    "info" : "SimpleName[23015-23022]:SimpleName[23015-23022]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23025-23311]:Block[23025-23311]"
  }, {
    "left" : "Preconditions.checkState(currentTracer != null,\n        \"Tracer should not be null at the end of a pass.\");",
    "right" : "Preconditions.checkState(currentTracer != null,\n        \"Tracer should not be null at the end of a pass.\");",
    "info" : "ExpressionStatement[23031-23138]:ExpressionStatement[23031-23138]"
  }, {
    "left" : "stopTracer(currentTracer, currentPassName);",
    "right" : "stopTracer(currentTracer, currentPassName);",
    "info" : "ExpressionStatement[23143-23186]:ExpressionStatement[23143-23186]"
  }, {
    "left" : "String passToCheck = currentPassName;",
    "right" : "String passToCheck = currentPassName;",
    "info" : "VariableDeclarationStatement[23191-23228]:VariableDeclarationStatement[23191-23228]"
  }, {
    "left" : "currentPassName = null;",
    "right" : "currentPassName = null;",
    "info" : "ExpressionStatement[23233-23256]:ExpressionStatement[23233-23256]"
  }, {
    "left" : "currentTracer = null;",
    "right" : "currentTracer = null;",
    "info" : "ExpressionStatement[23261-23282]:ExpressionStatement[23261-23282]"
  }, {
    "left" : "maybeSanityCheck();",
    "right" : "maybeSanityCheck();",
    "info" : "ExpressionStatement[23288-23307]:ExpressionStatement[23288-23307]"
  }, {
    "left" : "Tracer",
    "right" : "Tracer",
    "info" : "SimpleType[23378-23384]:SimpleType[23378-23384]"
  }, {
    "left" : "newTracer",
    "right" : "newTracer",
    "info" : "SimpleName[23385-23394]:SimpleName[23385-23394]"
  }, {
    "left" : "String passName",
    "right" : "String passName",
    "info" : "SingleVariableDeclaration[23395-23410]:SingleVariableDeclaration[23395-23410]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23412-23648]:Block[23412-23648]"
  }, {
    "left" : "String comment = passName\n        + (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");",
    "right" : "String comment = passName\n        + (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");",
    "info" : "VariableDeclarationStatement[23418-23520]:VariableDeclarationStatement[23418-23520]"
  }, {
    "left" : "if (options.tracer.isOn())",
    "right" : "if (options.tracer.isOn())",
    "info" : "IfStatement[23525-23600]:IfStatement[23525-23600]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23552-23600]:Block[23552-23600]"
  }, {
    "left" : "tracker.recordPassStart(passName);",
    "right" : "tracker.recordPassStart(passName);",
    "info" : "ExpressionStatement[23560-23594]:ExpressionStatement[23560-23594]"
  }, {
    "left" : "return new Tracer(\"Compiler\", comment);",
    "right" : "return new Tracer(\"Compiler\", comment);",
    "info" : "ReturnStatement[23605-23644]:ReturnStatement[23605-23644]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[23652-23656]:PrimitiveType[23652-23656]"
  }, {
    "left" : "stopTracer",
    "right" : "stopTracer",
    "info" : "SimpleName[23657-23667]:SimpleName[23657-23667]"
  }, {
    "left" : "Tracer t",
    "right" : "Tracer t",
    "info" : "SingleVariableDeclaration[23668-23676]:SingleVariableDeclaration[23668-23676]"
  }, {
    "left" : "String passName",
    "right" : "String passName",
    "info" : "SingleVariableDeclaration[23678-23693]:SingleVariableDeclaration[23678-23693]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23695-23815]:Block[23695-23815]"
  }, {
    "left" : "long result = t.stop();",
    "right" : "long result = t.stop();",
    "info" : "VariableDeclarationStatement[23701-23724]:VariableDeclarationStatement[23701-23724]"
  }, {
    "left" : "if (options.tracer.isOn())",
    "right" : "if (options.tracer.isOn())",
    "info" : "IfStatement[23729-23811]:IfStatement[23729-23811]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23756-23811]:Block[23756-23811]"
  }, {
    "left" : "tracker.recordPassStop(passName, result);",
    "right" : "tracker.recordPassStop(passName, result);",
    "info" : "ExpressionStatement[23764-23805]:ExpressionStatement[23764-23805]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[23875-23881]:Modifier[23875-23881]"
  }, {
    "left" : "Result",
    "right" : "Result",
    "info" : "SimpleType[23882-23888]:SimpleType[23882-23888]"
  }, {
    "left" : "getResult",
    "right" : "getResult",
    "info" : "SimpleName[23889-23898]:SimpleName[23889-23898]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23901-24224]:Block[23901-24224]"
  }, {
    "left" : "PassConfig.State state = getPassConfig().getIntermediateState();",
    "right" : "PassConfig.State state = getPassConfig().getIntermediateState();",
    "info" : "VariableDeclarationStatement[23907-23971]:VariableDeclarationStatement[23907-23971]"
  }, {
    "left" : "return new Result(getErrors(), getWarnings(), debugLog.toString(),\n        state.variableMap, state.propertyMap,\n        state.anonymousFunctionNameMap, state.stringMap, functionInformationMap,\n        sourceMap, externExports, state.cssNames);",
    "right" : "return new Result(getErrors(), getWarnings(), debugLog.toString(),\n        state.variableMap, state.propertyMap,\n        state.anonymousFunctionNameMap, state.stringMap, functionInformationMap,\n        sourceMap, externExports, state.cssNames);",
    "info" : "ReturnStatement[23976-24220]:ReturnStatement[23976-24220]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24308-24314]:Modifier[24308-24314]"
  }, {
    "left" : "JSError[]",
    "right" : "JSError[]",
    "info" : "ArrayType[24315-24324]:ArrayType[24315-24324]"
  }, {
    "left" : "getMessages",
    "right" : "getMessages",
    "info" : "SimpleName[24325-24336]:SimpleName[24325-24336]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24339-24368]:Block[24339-24368]"
  }, {
    "left" : "return getErrors();",
    "right" : "return getErrors();",
    "info" : "ReturnStatement[24345-24364]:ReturnStatement[24345-24364]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24431-24437]:Modifier[24431-24437]"
  }, {
    "left" : "JSError[]",
    "right" : "JSError[]",
    "info" : "ArrayType[24438-24447]:ArrayType[24438-24447]"
  }, {
    "left" : "getErrors",
    "right" : "getErrors",
    "info" : "SimpleName[24448-24457]:SimpleName[24448-24457]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24460-24502]:Block[24460-24502]"
  }, {
    "left" : "return errorManager.getErrors();",
    "right" : "return errorManager.getErrors();",
    "info" : "ReturnStatement[24466-24498]:ReturnStatement[24466-24498]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24567-24573]:Modifier[24567-24573]"
  }, {
    "left" : "JSError[]",
    "right" : "JSError[]",
    "info" : "ArrayType[24574-24583]:ArrayType[24574-24583]"
  }, {
    "left" : "getWarnings",
    "right" : "getWarnings",
    "info" : "SimpleName[24584-24595]:SimpleName[24584-24595]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24598-24642]:Block[24598-24642]"
  }, {
    "left" : "return errorManager.getWarnings();",
    "right" : "return errorManager.getWarnings();",
    "info" : "ReturnStatement[24604-24638]:ReturnStatement[24604-24638]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24737-24743]:Modifier[24737-24743]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[24744-24748]:SimpleType[24744-24748]"
  }, {
    "left" : "getRoot",
    "right" : "getRoot",
    "info" : "SimpleName[24749-24756]:SimpleName[24749-24756]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24759-24792]:Block[24759-24792]"
  }, {
    "left" : "return externAndJsRoot;",
    "right" : "return externAndJsRoot;",
    "info" : "ReturnStatement[24765-24788]:ReturnStatement[24765-24788]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[24855-24862]:Modifier[24855-24862]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[24863-24866]:PrimitiveType[24863-24866]"
  }, {
    "left" : "nextUniqueNameId",
    "right" : "nextUniqueNameId",
    "info" : "SimpleName[24867-24883]:SimpleName[24867-24883]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24886-24918]:Block[24886-24918]"
  }, {
    "left" : "return uniqueNameId++;",
    "right" : "return uniqueNameId++;",
    "info" : "ReturnStatement[24892-24914]:ReturnStatement[24892-24914]"
  }, {
    "left" : "@VisibleForTesting",
    "right" : "@VisibleForTesting",
    "info" : "MarkerAnnotation[24973-24991]:MarkerAnnotation[24973-24991]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[24994-24998]:PrimitiveType[24994-24998]"
  }, {
    "left" : "resetUniqueNameId",
    "right" : "resetUniqueNameId",
    "info" : "SimpleName[24999-25016]:SimpleName[24999-25016]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25019-25046]:Block[25019-25046]"
  }, {
    "left" : "uniqueNameId = 0;",
    "right" : "uniqueNameId = 0;",
    "info" : "ExpressionStatement[25025-25042]:ExpressionStatement[25025-25042]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[25050-25059]:MarkerAnnotation[25050-25059]"
  }, {
    "left" : "Supplier<String>",
    "right" : "Supplier<String>",
    "info" : "ParameterizedType[25062-25078]:ParameterizedType[25062-25078]"
  }, {
    "left" : "getUniqueNameIdSupplier",
    "right" : "getUniqueNameIdSupplier",
    "info" : "SimpleName[25079-25102]:SimpleName[25079-25102]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25105-25277]:Block[25105-25277]"
  }, {
    "left" : "final Compiler self = this;",
    "right" : "final Compiler self = this;",
    "info" : "VariableDeclarationStatement[25111-25138]:VariableDeclarationStatement[25111-25138]"
  }, {
    "left" : "return new Supplier<String>() {\n      public String get() {\n        return String.valueOf(self.nextUniqueNameId());\n      }\n    };",
    "right" : "return new Supplier<String>() {\n      public String get() {\n        return String.valueOf(self.nextUniqueNameId());\n      }\n    };",
    "info" : "ReturnStatement[25143-25273]:ReturnStatement[25143-25273]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[25181-25187]:Modifier[25181-25187]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[25188-25194]:SimpleType[25188-25194]"
  }, {
    "left" : "get",
    "right" : "get",
    "info" : "SimpleName[25195-25198]:SimpleName[25195-25198]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25201-25266]:Block[25201-25266]"
  }, {
    "left" : "return String.valueOf(self.nextUniqueNameId());",
    "right" : "return String.valueOf(self.nextUniqueNameId());",
    "info" : "ReturnStatement[25211-25258]:ReturnStatement[25211-25258]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[25420-25429]:MarkerAnnotation[25420-25429]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[25432-25436]:PrimitiveType[25432-25436]"
  }, {
    "left" : "setNormalized",
    "right" : "setNormalized",
    "info" : "SimpleName[25437-25450]:SimpleName[25437-25450]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25453-25481]:Block[25453-25481]"
  }, {
    "left" : "normalized = true;",
    "right" : "normalized = true;",
    "info" : "ExpressionStatement[25459-25477]:ExpressionStatement[25459-25477]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[25626-25635]:MarkerAnnotation[25626-25635]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[25638-25642]:PrimitiveType[25638-25642]"
  }, {
    "left" : "setUnnormalized",
    "right" : "setUnnormalized",
    "info" : "SimpleName[25643-25658]:SimpleName[25643-25658]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25661-25690]:Block[25661-25690]"
  }, {
    "left" : "normalized = false;",
    "right" : "normalized = false;",
    "info" : "ExpressionStatement[25667-25686]:ExpressionStatement[25667-25686]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[25694-25703]:MarkerAnnotation[25694-25703]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[25706-25713]:PrimitiveType[25706-25713]"
  }, {
    "left" : "isNormalized",
    "right" : "isNormalized",
    "info" : "SimpleName[25714-25726]:SimpleName[25714-25726]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25729-25757]:Block[25729-25757]"
  }, {
    "left" : "return normalized;",
    "right" : "return normalized;",
    "info" : "ReturnStatement[25735-25753]:ReturnStatement[25735-25753]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[25761-25770]:MarkerAnnotation[25761-25770]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[25773-25780]:PrimitiveType[25773-25780]"
  }, {
    "left" : "areNodesEqualForInlining",
    "right" : "areNodesEqualForInlining",
    "info" : "SimpleName[25781-25805]:SimpleName[25781-25805]"
  }, {
    "left" : "Node n1",
    "right" : "Node n1",
    "info" : "SingleVariableDeclaration[25806-25813]:SingleVariableDeclaration[25806-25813]"
  }, {
    "left" : "Node n2",
    "right" : "Node n2",
    "info" : "SingleVariableDeclaration[25815-25822]:SingleVariableDeclaration[25815-25822]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25824-26142]:Block[25824-26142]"
  }, {
    "left" : "if (options.ambiguateProperties ||\n        options.disambiguateProperties)",
    "right" : "if (options.ambiguateProperties ||\n        options.disambiguateProperties)",
    "info" : "IfStatement[25830-26138]:IfStatement[25830-26138]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25905-26082]:Block[25905-26082]"
  }, {
    "left" : "return n1.checkTreeTypeAwareEqualsSilent(n2);",
    "right" : "return n1.checkTreeTypeAwareEqualsSilent(n2);",
    "info" : "ReturnStatement[26031-26076]:ReturnStatement[26031-26076]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26088-26138]:Block[26088-26138]"
  }, {
    "left" : "return n1.checkTreeEqualsSilent(n2);",
    "right" : "return n1.checkTreeEqualsSilent(n2);",
    "info" : "ReturnStatement[26096-26132]:ReturnStatement[26096-26132]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[26453-26462]:MarkerAnnotation[26453-26462]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[26465-26471]:Modifier[26465-26471]"
  }, {
    "left" : "CompilerInput",
    "right" : "CompilerInput",
    "info" : "SimpleType[26472-26485]:SimpleType[26472-26485]"
  }, {
    "left" : "getInput",
    "right" : "getInput",
    "info" : "SimpleName[26486-26494]:SimpleName[26486-26494]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[26495-26506]:SingleVariableDeclaration[26495-26506]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26508-26548]:Block[26508-26548]"
  }, {
    "left" : "return inputsByName.get(name);",
    "right" : "return inputsByName.get(name);",
    "info" : "ReturnStatement[26514-26544]:ReturnStatement[26514-26544]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[26552-26561]:MarkerAnnotation[26552-26561]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[26564-26570]:Modifier[26564-26570]"
  }, {
    "left" : "CompilerInput",
    "right" : "CompilerInput",
    "info" : "SimpleType[26571-26584]:SimpleType[26571-26584]"
  }, {
    "left" : "newExternInput",
    "right" : "newExternInput",
    "info" : "SimpleName[26585-26599]:SimpleName[26585-26599]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[26600-26611]:SingleVariableDeclaration[26600-26611]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26613-26959]:Block[26613-26959]"
  }, {
    "left" : "if (inputsByName.containsKey(name))",
    "right" : "if (inputsByName.containsKey(name))",
    "info" : "IfStatement[26619-26741]:IfStatement[26619-26741]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26655-26741]:Block[26655-26741]"
  }, {
    "left" : "throw new IllegalArgumentException(\"Conflicting externs name: \" + name);",
    "right" : "throw new IllegalArgumentException(\"Conflicting externs name: \" + name);",
    "info" : "ThrowStatement[26663-26735]:ThrowStatement[26663-26735]"
  }, {
    "left" : "SourceAst ast = new SyntheticAst(name);",
    "right" : "SourceAst ast = new SyntheticAst(name);",
    "info" : "VariableDeclarationStatement[26746-26785]:VariableDeclarationStatement[26746-26785]"
  }, {
    "left" : "CompilerInput input = new CompilerInput(ast, name, true);",
    "right" : "CompilerInput input = new CompilerInput(ast, name, true);",
    "info" : "VariableDeclarationStatement[26790-26847]:VariableDeclarationStatement[26790-26847]"
  }, {
    "left" : "inputsByName.put(name, input);",
    "right" : "inputsByName.put(name, input);",
    "info" : "ExpressionStatement[26852-26882]:ExpressionStatement[26852-26882]"
  }, {
    "left" : "externsRoot.addChildToFront(ast.getAstRoot(this));",
    "right" : "externsRoot.addChildToFront(ast.getAstRoot(this));",
    "info" : "ExpressionStatement[26887-26937]:ExpressionStatement[26887-26937]"
  }, {
    "left" : "return input;",
    "right" : "return input;",
    "info" : "ReturnStatement[26942-26955]:ReturnStatement[26942-26955]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[27042-27046]:PrimitiveType[27042-27046]"
  }, {
    "left" : "addIncrementalSourceAst",
    "right" : "addIncrementalSourceAst",
    "info" : "SimpleName[27047-27070]:SimpleName[27047-27070]"
  }, {
    "left" : "JsAst ast",
    "right" : "JsAst ast",
    "info" : "SingleVariableDeclaration[27071-27080]:SingleVariableDeclaration[27071-27080]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27082-27318]:Block[27082-27318]"
  }, {
    "left" : "String sourceName = ast.getSourceFile().getName();",
    "right" : "String sourceName = ast.getSourceFile().getName();",
    "info" : "VariableDeclarationStatement[27088-27138]:VariableDeclarationStatement[27088-27138]"
  }, {
    "left" : "Preconditions.checkState(\n        getInput(sourceName) == null,\n        \"Duplicate input of name \" + sourceName);",
    "right" : "Preconditions.checkState(\n        getInput(sourceName) == null,\n        \"Duplicate input of name \" + sourceName);",
    "info" : "ExpressionStatement[27143-27256]:ExpressionStatement[27143-27256]"
  }, {
    "left" : "inputsByName.put(sourceName, new CompilerInput(ast));",
    "right" : "inputsByName.put(sourceName, new CompilerInput(ast));",
    "info" : "ExpressionStatement[27261-27314]:ExpressionStatement[27261-27314]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[27322-27331]:MarkerAnnotation[27322-27331]"
  }, {
    "left" : "JSModuleGraph",
    "right" : "JSModuleGraph",
    "info" : "SimpleType[27334-27347]:SimpleType[27334-27347]"
  }, {
    "left" : "getModuleGraph",
    "right" : "getModuleGraph",
    "info" : "SimpleName[27348-27362]:SimpleName[27348-27362]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27365-27394]:Block[27365-27394]"
  }, {
    "left" : "return moduleGraph;",
    "right" : "return moduleGraph;",
    "info" : "ReturnStatement[27371-27390]:ReturnStatement[27371-27390]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[27398-27407]:MarkerAnnotation[27398-27407]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27410-27416]:Modifier[27410-27416]"
  }, {
    "left" : "JSTypeRegistry",
    "right" : "JSTypeRegistry",
    "info" : "SimpleType[27417-27431]:SimpleType[27417-27431]"
  }, {
    "left" : "getTypeRegistry",
    "right" : "getTypeRegistry",
    "info" : "SimpleName[27432-27447]:SimpleName[27432-27447]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27450-27597]:Block[27450-27597]"
  }, {
    "left" : "if (typeRegistry == null)",
    "right" : "if (typeRegistry == null)",
    "info" : "IfStatement[27456-27568]:IfStatement[27456-27568]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27482-27568]:Block[27482-27568]"
  }, {
    "left" : "typeRegistry = new JSTypeRegistry(oldErrorReporter, options.looseTypes);",
    "right" : "typeRegistry = new JSTypeRegistry(oldErrorReporter, options.looseTypes);",
    "info" : "ExpressionStatement[27490-27562]:ExpressionStatement[27490-27562]"
  }, {
    "left" : "return typeRegistry;",
    "right" : "return typeRegistry;",
    "info" : "ReturnStatement[27573-27593]:ReturnStatement[27573-27593]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[27601-27610]:MarkerAnnotation[27601-27610]"
  }, {
    "left" : "ScopeCreator",
    "right" : "ScopeCreator",
    "info" : "SimpleType[27613-27625]:SimpleType[27613-27625]"
  }, {
    "left" : "getScopeCreator",
    "right" : "getScopeCreator",
    "info" : "SimpleName[27626-27641]:SimpleName[27626-27641]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27644-27695]:Block[27644-27695]"
  }, {
    "left" : "return getPassConfig().getScopeCreator();",
    "right" : "return getPassConfig().getScopeCreator();",
    "info" : "ReturnStatement[27650-27691]:ReturnStatement[27650-27691]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[27699-27708]:MarkerAnnotation[27699-27708]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27711-27717]:Modifier[27711-27717]"
  }, {
    "left" : "Scope",
    "right" : "Scope",
    "info" : "SimpleType[27718-27723]:SimpleType[27718-27723]"
  }, {
    "left" : "getTopScope",
    "right" : "getTopScope",
    "info" : "SimpleName[27724-27735]:SimpleName[27724-27735]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27738-27785]:Block[27738-27785]"
  }, {
    "left" : "return getPassConfig().getTopScope();",
    "right" : "return getPassConfig().getTopScope();",
    "info" : "ReturnStatement[27744-27781]:ReturnStatement[27744-27781]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[27789-27798]:MarkerAnnotation[27789-27798]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27801-27807]:Modifier[27801-27807]"
  }, {
    "left" : "ReverseAbstractInterpreter",
    "right" : "ReverseAbstractInterpreter",
    "info" : "SimpleType[27808-27834]:SimpleType[27808-27834]"
  }, {
    "left" : "getReverseAbstractInterpreter",
    "right" : "getReverseAbstractInterpreter",
    "info" : "SimpleName[27835-27864]:SimpleName[27835-27864]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27867-28354]:Block[27867-28354]"
  }, {
    "left" : "if (abstractInterpreter == null)",
    "right" : "if (abstractInterpreter == null)",
    "info" : "IfStatement[27873-28318]:IfStatement[27873-28318]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27906-28318]:Block[27906-28318]"
  }, {
    "left" : "ChainableReverseAbstractInterpreter interpreter =\n          new SemanticReverseAbstractInterpreter(\n              getCodingConvention(), getTypeRegistry());",
    "right" : "ChainableReverseAbstractInterpreter interpreter =\n          new SemanticReverseAbstractInterpreter(\n              getCodingConvention(), getTypeRegistry());",
    "info" : "VariableDeclarationStatement[27914-28070]:VariableDeclarationStatement[27914-28070]"
  }, {
    "left" : "if (options.closurePass)",
    "right" : "if (options.closurePass)",
    "info" : "IfStatement[28077-28271]:IfStatement[28077-28271]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28102-28271]:Block[28102-28271]"
  }, {
    "left" : "interpreter = new ClosureReverseAbstractInterpreter(\n            getCodingConvention(), getTypeRegistry())\n            .append(interpreter).getFirst();",
    "right" : "interpreter = new ClosureReverseAbstractInterpreter(\n            getCodingConvention(), getTypeRegistry())\n            .append(interpreter).getFirst();",
    "info" : "ExpressionStatement[28112-28263]:ExpressionStatement[28112-28263]"
  }, {
    "left" : "abstractInterpreter = interpreter;",
    "right" : "abstractInterpreter = interpreter;",
    "info" : "ExpressionStatement[28278-28312]:ExpressionStatement[28278-28312]"
  }, {
    "left" : "return abstractInterpreter;",
    "right" : "return abstractInterpreter;",
    "info" : "ReturnStatement[28323-28350]:ReturnStatement[28323-28350]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[28358-28367]:MarkerAnnotation[28358-28367]"
  }, {
    "left" : "TypeValidator",
    "right" : "TypeValidator",
    "info" : "SimpleType[28370-28383]:SimpleType[28370-28383]"
  }, {
    "left" : "getTypeValidator",
    "right" : "getTypeValidator",
    "info" : "SimpleName[28384-28400]:SimpleName[28384-28400]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28403-28520]:Block[28403-28520]"
  }, {
    "left" : "if (typeValidator == null)",
    "right" : "if (typeValidator == null)",
    "info" : "IfStatement[28409-28490]:IfStatement[28409-28490]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28436-28490]:Block[28436-28490]"
  }, {
    "left" : "typeValidator = new TypeValidator(this);",
    "right" : "typeValidator = new TypeValidator(this);",
    "info" : "ExpressionStatement[28444-28484]:ExpressionStatement[28444-28484]"
  }, {
    "left" : "return typeValidator;",
    "right" : "return typeValidator;",
    "info" : "ReturnStatement[28495-28516]:ReturnStatement[28495-28516]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[28852-28856]:SimpleType[28852-28856]"
  }, {
    "left" : "parseInputs",
    "right" : "parseInputs",
    "info" : "SimpleName[28857-28868]:SimpleName[28857-28868]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28871-32773]:Block[28871-32773]"
  }, {
    "left" : "boolean devMode = options.devMode != DevMode.OFF;",
    "right" : "boolean devMode = options.devMode != DevMode.OFF;",
    "info" : "VariableDeclarationStatement[28877-28926]:VariableDeclarationStatement[28877-28926]"
  }, {
    "left" : "if (externsRoot != null)",
    "right" : "if (externsRoot != null)",
    "info" : "IfStatement[29045-29113]:IfStatement[29045-29113]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29070-29113]:Block[29070-29113]"
  }, {
    "left" : "externsRoot.detachChildren();",
    "right" : "externsRoot.detachChildren();",
    "info" : "ExpressionStatement[29078-29107]:ExpressionStatement[29078-29107]"
  }, {
    "left" : "if (jsRoot != null)",
    "right" : "if (jsRoot != null)",
    "info" : "IfStatement[29118-29176]:IfStatement[29118-29176]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29138-29176]:Block[29138-29176]"
  }, {
    "left" : "jsRoot.detachChildren();",
    "right" : "jsRoot.detachChildren();",
    "info" : "ExpressionStatement[29146-29170]:ExpressionStatement[29146-29170]"
  }, {
    "left" : "jsRoot = new Node(Token.BLOCK);",
    "right" : "jsRoot = new Node(Token.BLOCK);",
    "info" : "ExpressionStatement[29212-29243]:ExpressionStatement[29212-29243]"
  }, {
    "left" : "jsRoot.setIsSyntheticBlock(true);",
    "right" : "jsRoot.setIsSyntheticBlock(true);",
    "info" : "ExpressionStatement[29248-29281]:ExpressionStatement[29248-29281]"
  }, {
    "left" : "if (options.tracer.isOn())",
    "right" : "if (options.tracer.isOn())",
    "info" : "IfStatement[29287-29469]:IfStatement[29287-29469]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29314-29469]:Block[29314-29469]"
  }, {
    "left" : "tracker = new PerformanceTracker(jsRoot,\n          options.tracer == TracerMode.ALL);",
    "right" : "tracker = new PerformanceTracker(jsRoot,\n          options.tracer == TracerMode.ALL);",
    "info" : "ExpressionStatement[29322-29407]:ExpressionStatement[29322-29407]"
  }, {
    "left" : "addChangeHandler(tracker.getCodeChangeHandler());",
    "right" : "addChangeHandler(tracker.getCodeChangeHandler());",
    "info" : "ExpressionStatement[29414-29463]:ExpressionStatement[29414-29463]"
  }, {
    "left" : "Tracer tracer = newTracer(\"parseInputs\");",
    "right" : "Tracer tracer = newTracer(\"parseInputs\");",
    "info" : "VariableDeclarationStatement[29475-29516]:VariableDeclarationStatement[29475-29516]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[29522-32769]:TryStatement[29522-32769]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29526-32712]:Block[29526-32712]"
  }, {
    "left" : "externsRoot = new Node(Token.BLOCK);",
    "right" : "externsRoot = new Node(Token.BLOCK);",
    "info" : "ExpressionStatement[29566-29602]:ExpressionStatement[29566-29602]"
  }, {
    "left" : "externsRoot.setIsSyntheticBlock(true);",
    "right" : "externsRoot.setIsSyntheticBlock(true);",
    "info" : "ExpressionStatement[29609-29647]:ExpressionStatement[29609-29647]"
  }, {
    "left" : "for (CompilerInput input : externs)",
    "right" : "for (CompilerInput input : externs)",
    "info" : "EnhancedForStatement[29654-29839]:EnhancedForStatement[29654-29839]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29690-29839]:Block[29690-29839]"
  }, {
    "left" : "Node n = input.getAstRoot(this);",
    "right" : "Node n = input.getAstRoot(this);",
    "info" : "VariableDeclarationStatement[29700-29732]:VariableDeclarationStatement[29700-29732]"
  }, {
    "left" : "if (hasErrors())",
    "right" : "if (hasErrors())",
    "info" : "IfStatement[29741-29792]:IfStatement[29741-29792]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29758-29792]:Block[29758-29792]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[29770-29782]:ReturnStatement[29770-29782]"
  }, {
    "left" : "externsRoot.addChildToBack(n);",
    "right" : "externsRoot.addChildToBack(n);",
    "info" : "ExpressionStatement[29801-29831]:ExpressionStatement[29801-29831]"
  }, {
    "left" : "if (options.manageClosureDependencies)",
    "right" : "if (options.manageClosureDependencies)",
    "info" : "IfStatement[29900-30641]:IfStatement[29900-30641]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29939-30641]:Block[29939-30641]"
  }, {
    "left" : "for (CompilerInput input : inputs)",
    "right" : "for (CompilerInput input : inputs)",
    "info" : "EnhancedForStatement[29949-30295]:EnhancedForStatement[29949-30295]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29984-30295]:Block[29984-30295]"
  }, {
    "left" : "input.setCompiler(this);",
    "right" : "input.setCompiler(this);",
    "info" : "ExpressionStatement[29996-30020]:ExpressionStatement[29996-30020]"
  }, {
    "left" : "for (String provide : input.getProvides())",
    "right" : "for (String provide : input.getProvides())",
    "info" : "EnhancedForStatement[30170-30285]:EnhancedForStatement[30170-30285]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30213-30285]:Block[30213-30285]"
  }, {
    "left" : "getTypeRegistry().forwardDeclareType(provide);",
    "right" : "getTypeRegistry().forwardDeclareType(provide);",
    "info" : "ExpressionStatement[30227-30273]:ExpressionStatement[30227-30273]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[30305-30633]:TryStatement[30305-30633]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30309-30461]:Block[30309-30461]"
  }, {
    "left" : "inputs =\n              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n              .manageDependencies(inputs);",
    "right" : "inputs =\n              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n              .manageDependencies(inputs);",
    "info" : "ExpressionStatement[30321-30451]:ExpressionStatement[30321-30451]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30500-30633]:Block[30500-30633]"
  }, {
    "left" : "report(JSError.make(\n              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));",
    "right" : "report(JSError.make(\n              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));",
    "info" : "ExpressionStatement[30512-30600]:ExpressionStatement[30512-30600]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[30611-30623]:ReturnStatement[30611-30623]"
  }, {
    "left" : "boolean staleInputs = false;",
    "right" : "boolean staleInputs = false;",
    "info" : "VariableDeclarationStatement[30707-30735]:VariableDeclarationStatement[30707-30735]"
  }, {
    "left" : "for (CompilerInput input : inputs)",
    "right" : "for (CompilerInput input : inputs)",
    "info" : "EnhancedForStatement[30742-31646]:EnhancedForStatement[30742-31646]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30777-31646]:Block[30777-31646]"
  }, {
    "left" : "Node n = input.getAstRoot(this);",
    "right" : "Node n = input.getAstRoot(this);",
    "info" : "VariableDeclarationStatement[30787-30819]:VariableDeclarationStatement[30787-30819]"
  }, {
    "left" : "if (hasErrors())",
    "right" : "if (hasErrors())",
    "info" : "IfStatement[30828-30879]:IfStatement[30828-30879]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30845-30879]:Block[30845-30879]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[30857-30869]:ReturnStatement[30857-30869]"
  }, {
    "left" : "if (n == null)",
    "right" : "if (n == null)",
    "info" : "IfStatement[30949-30995]:IfStatement[30949-30995]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30964-30995]:Block[30964-30995]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[30976-30985]:ContinueStatement[30976-30985]"
  }, {
    "left" : "if (n.getJSDocInfo() != null)",
    "right" : "if (n.getJSDocInfo() != null)",
    "info" : "IfStatement[31005-31638]:IfStatement[31005-31638]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31035-31638]:Block[31035-31638]"
  }, {
    "left" : "JSDocInfo info = n.getJSDocInfo();",
    "right" : "JSDocInfo info = n.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[31047-31081]:VariableDeclarationStatement[31047-31081]"
  }, {
    "left" : "if (info.isExterns())",
    "right" : "if (info.isExterns())",
    "info" : "IfStatement[31092-31628]:IfStatement[31092-31628]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31114-31508]:Block[31114-31508]"
  }, {
    "left" : "externsRoot.addChildToBack(n);",
    "right" : "externsRoot.addChildToBack(n);",
    "info" : "ExpressionStatement[31318-31348]:ExpressionStatement[31318-31348]"
  }, {
    "left" : "input.setIsExtern(true);",
    "right" : "input.setIsExtern(true);",
    "info" : "ExpressionStatement[31361-31385]:ExpressionStatement[31361-31385]"
  }, {
    "left" : "input.getModule().remove(input);",
    "right" : "input.getModule().remove(input);",
    "info" : "ExpressionStatement[31399-31431]:ExpressionStatement[31399-31431]"
  }, {
    "left" : "externs.add(input);",
    "right" : "externs.add(input);",
    "info" : "ExpressionStatement[31445-31464]:ExpressionStatement[31445-31464]"
  }, {
    "left" : "staleInputs = true;",
    "right" : "staleInputs = true;",
    "info" : "ExpressionStatement[31477-31496]:ExpressionStatement[31477-31496]"
  }, {
    "left" : "if (info.isNoCompile())",
    "right" : "if (info.isNoCompile())",
    "info" : "IfStatement[31514-31628]:IfStatement[31514-31628]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31538-31628]:Block[31538-31628]"
  }, {
    "left" : "input.getModule().remove(input);",
    "right" : "input.getModule().remove(input);",
    "info" : "ExpressionStatement[31552-31584]:ExpressionStatement[31552-31584]"
  }, {
    "left" : "staleInputs = true;",
    "right" : "staleInputs = true;",
    "info" : "ExpressionStatement[31597-31616]:ExpressionStatement[31597-31616]"
  }, {
    "left" : "if (staleInputs)",
    "right" : "if (staleInputs)",
    "info" : "IfStatement[31654-31751]:IfStatement[31654-31751]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31671-31751]:Block[31671-31751]"
  }, {
    "left" : "fillEmptyModules(modules);",
    "right" : "fillEmptyModules(modules);",
    "info" : "ExpressionStatement[31681-31707]:ExpressionStatement[31681-31707]"
  }, {
    "left" : "rebuildInputsFromModules();",
    "right" : "rebuildInputsFromModules();",
    "info" : "ExpressionStatement[31716-31743]:ExpressionStatement[31716-31743]"
  }, {
    "left" : "for (CompilerInput input : inputs)",
    "right" : "for (CompilerInput input : inputs)",
    "info" : "EnhancedForStatement[31783-32557]:EnhancedForStatement[31783-32557]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31818-32557]:Block[31818-32557]"
  }, {
    "left" : "Node n = input.getAstRoot(this);",
    "right" : "Node n = input.getAstRoot(this);",
    "info" : "VariableDeclarationStatement[31828-31860]:VariableDeclarationStatement[31828-31860]"
  }, {
    "left" : "if (n == null)",
    "right" : "if (n == null)",
    "info" : "IfStatement[31869-31915]:IfStatement[31869-31915]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31884-31915]:Block[31884-31915]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[31896-31905]:ContinueStatement[31896-31905]"
  }, {
    "left" : "if (devMode)",
    "right" : "if (devMode)",
    "info" : "IfStatement[31925-32043]:IfStatement[31925-32043]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31938-32043]:Block[31938-32043]"
  }, {
    "left" : "runSanityCheck();",
    "right" : "runSanityCheck();",
    "info" : "ExpressionStatement[31950-31967]:ExpressionStatement[31950-31967]"
  }, {
    "left" : "if (hasErrors())",
    "right" : "if (hasErrors())",
    "info" : "IfStatement[31978-32033]:IfStatement[31978-32033]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31995-32033]:Block[31995-32033]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[32009-32021]:ReturnStatement[32009-32021]"
  }, {
    "left" : "if (options.sourceMapOutputPath != null ||\n            options.nameReferenceReportPath != null)",
    "right" : "if (options.sourceMapOutputPath != null ||\n            options.nameReferenceReportPath != null)",
    "info" : "IfStatement[32053-32514]:IfStatement[32053-32514]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32149-32514]:Block[32149-32514]"
  }, {
    "left" : "SourceInformationAnnotator sia =\n              new SourceInformationAnnotator(\n                  input.getName(), options.devMode != DevMode.OFF);",
    "right" : "SourceInformationAnnotator sia =\n              new SourceInformationAnnotator(\n                  input.getName(), options.devMode != DevMode.OFF);",
    "info" : "VariableDeclarationStatement[32310-32456]:VariableDeclarationStatement[32310-32456]"
  }, {
    "left" : "NodeTraversal.traverse(this, n, sia);",
    "right" : "NodeTraversal.traverse(this, n, sia);",
    "info" : "ExpressionStatement[32467-32504]:ExpressionStatement[32467-32504]"
  }, {
    "left" : "jsRoot.addChildToBack(n);",
    "right" : "jsRoot.addChildToBack(n);",
    "info" : "ExpressionStatement[32524-32549]:ExpressionStatement[32524-32549]"
  }, {
    "left" : "externAndJsRoot = new Node(Token.BLOCK, externsRoot, jsRoot);",
    "right" : "externAndJsRoot = new Node(Token.BLOCK, externsRoot, jsRoot);",
    "info" : "ExpressionStatement[32565-32626]:ExpressionStatement[32565-32626]"
  }, {
    "left" : "externAndJsRoot.setIsSyntheticBlock(true);",
    "right" : "externAndJsRoot.setIsSyntheticBlock(true);",
    "info" : "ExpressionStatement[32633-32675]:ExpressionStatement[32633-32675]"
  }, {
    "left" : "return externAndJsRoot;",
    "right" : "return externAndJsRoot;",
    "info" : "ReturnStatement[32683-32706]:ReturnStatement[32683-32706]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32721-32769]:Block[32721-32769]"
  }, {
    "left" : "stopTracer(tracer, \"parseInputs\");",
    "right" : "stopTracer(tracer, \"parseInputs\");",
    "info" : "ExpressionStatement[32729-32763]:ExpressionStatement[32729-32763]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[32777-32783]:Modifier[32777-32783]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[32784-32788]:SimpleType[32784-32788]"
  }, {
    "left" : "parse",
    "right" : "parse",
    "info" : "SimpleName[32789-32794]:SimpleName[32789-32794]"
  }, {
    "left" : "JSSourceFile file",
    "right" : "JSSourceFile file",
    "info" : "SingleVariableDeclaration[32795-32812]:SingleVariableDeclaration[32795-32812]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32814-32949]:Block[32814-32949]"
  }, {
    "left" : "initCompilerOptionsIfTesting();",
    "right" : "initCompilerOptionsIfTesting();",
    "info" : "ExpressionStatement[32820-32851]:ExpressionStatement[32820-32851]"
  }, {
    "left" : "addToDebugLog(\"Parsing: \" + file.getName());",
    "right" : "addToDebugLog(\"Parsing: \" + file.getName());",
    "info" : "ExpressionStatement[32856-32900]:ExpressionStatement[32856-32900]"
  }, {
    "left" : "return new JsAst(file).getAstRoot(this);",
    "right" : "return new JsAst(file).getAstRoot(this);",
    "info" : "ReturnStatement[32905-32945]:ReturnStatement[32905-32945]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[32953-32962]:MarkerAnnotation[32953-32962]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[32965-32969]:SimpleType[32965-32969]"
  }, {
    "left" : "parseSyntheticCode",
    "right" : "parseSyntheticCode",
    "info" : "SimpleName[32970-32988]:SimpleName[32970-32988]"
  }, {
    "left" : "String js",
    "right" : "String js",
    "info" : "SingleVariableDeclaration[32989-32998]:SingleVariableDeclaration[32989-32998]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33000-33184]:Block[33000-33184]"
  }, {
    "left" : "CompilerInput input = new CompilerInput(\n        JSSourceFile.fromCode(\" [synthetic] \", js));",
    "right" : "CompilerInput input = new CompilerInput(\n        JSSourceFile.fromCode(\" [synthetic] \", js));",
    "info" : "VariableDeclarationStatement[33006-33099]:VariableDeclarationStatement[33006-33099]"
  }, {
    "left" : "inputsByName.put(input.getName(), input);",
    "right" : "inputsByName.put(input.getName(), input);",
    "info" : "ExpressionStatement[33104-33145]:ExpressionStatement[33104-33145]"
  }, {
    "left" : "return input.getAstRoot(this);",
    "right" : "return input.getAstRoot(this);",
    "info" : "ReturnStatement[33150-33180]:ReturnStatement[33150-33180]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[33188-33192]:PrimitiveType[33188-33192]"
  }, {
    "left" : "initCompilerOptionsIfTesting",
    "right" : "initCompilerOptionsIfTesting",
    "info" : "SimpleName[33193-33221]:SimpleName[33193-33221]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33224-33408]:Block[33224-33408]"
  }, {
    "left" : "if (options == null)",
    "right" : "if (options == null)",
    "info" : "IfStatement[33230-33404]:IfStatement[33230-33404]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33251-33404]:Block[33251-33404]"
  }, {
    "left" : "initOptions(new CompilerOptions());",
    "right" : "initOptions(new CompilerOptions());",
    "info" : "ExpressionStatement[33363-33398]:ExpressionStatement[33363-33398]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[33412-33421]:MarkerAnnotation[33412-33421]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[33424-33428]:SimpleType[33424-33428]"
  }, {
    "left" : "parseSyntheticCode",
    "right" : "parseSyntheticCode",
    "info" : "SimpleName[33429-33447]:SimpleName[33429-33447]"
  }, {
    "left" : "String fileName",
    "right" : "String fileName",
    "info" : "SingleVariableDeclaration[33448-33463]:SingleVariableDeclaration[33448-33463]"
  }, {
    "left" : "String js",
    "right" : "String js",
    "info" : "SingleVariableDeclaration[33465-33474]:SingleVariableDeclaration[33465-33474]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33476-33572]:Block[33476-33572]"
  }, {
    "left" : "initCompilerOptionsIfTesting();",
    "right" : "initCompilerOptionsIfTesting();",
    "info" : "ExpressionStatement[33482-33513]:ExpressionStatement[33482-33513]"
  }, {
    "left" : "return parse(JSSourceFile.fromCode(fileName, js));",
    "right" : "return parse(JSSourceFile.fromCode(fileName, js));",
    "info" : "ReturnStatement[33518-33568]:ReturnStatement[33518-33568]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[33576-33580]:SimpleType[33576-33580]"
  }, {
    "left" : "parseTestCode",
    "right" : "parseTestCode",
    "info" : "SimpleName[33581-33594]:SimpleName[33581-33594]"
  }, {
    "left" : "String js",
    "right" : "String js",
    "info" : "SingleVariableDeclaration[33595-33604]:SingleVariableDeclaration[33595-33604]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33606-33903]:Block[33606-33903]"
  }, {
    "left" : "initCompilerOptionsIfTesting();",
    "right" : "initCompilerOptionsIfTesting();",
    "info" : "ExpressionStatement[33612-33643]:ExpressionStatement[33612-33643]"
  }, {
    "left" : "CompilerInput input = new CompilerInput(\n        JSSourceFile.fromCode(\" [testcode] \", js));",
    "right" : "CompilerInput input = new CompilerInput(\n        JSSourceFile.fromCode(\" [testcode] \", js));",
    "info" : "VariableDeclarationStatement[33648-33740]:VariableDeclarationStatement[33648-33740]"
  }, {
    "left" : "if (inputsByName == null)",
    "right" : "if (inputsByName == null)",
    "info" : "IfStatement[33745-33818]:IfStatement[33745-33818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33771-33818]:Block[33771-33818]"
  }, {
    "left" : "inputsByName = Maps.newHashMap();",
    "right" : "inputsByName = Maps.newHashMap();",
    "info" : "ExpressionStatement[33779-33812]:ExpressionStatement[33779-33812]"
  }, {
    "left" : "inputsByName.put(input.getName(), input);",
    "right" : "inputsByName.put(input.getName(), input);",
    "info" : "ExpressionStatement[33823-33864]:ExpressionStatement[33823-33864]"
  }, {
    "left" : "return input.getAstRoot(this);",
    "right" : "return input.getAstRoot(this);",
    "info" : "ReturnStatement[33869-33899]:ReturnStatement[33869-33899]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[33907-33916]:MarkerAnnotation[33907-33916]"
  }, {
    "left" : "ErrorReporter",
    "right" : "ErrorReporter",
    "info" : "SimpleType[33919-33932]:SimpleType[33919-33932]"
  }, {
    "left" : "getDefaultErrorReporter",
    "right" : "getDefaultErrorReporter",
    "info" : "SimpleName[33933-33956]:SimpleName[33933-33956]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33959-33997]:Block[33959-33997]"
  }, {
    "left" : "return defaultErrorReporter;",
    "right" : "return defaultErrorReporter;",
    "info" : "ReturnStatement[33965-33993]:ReturnStatement[33965-33993]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[34252-34258]:Modifier[34252-34258]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[34259-34265]:SimpleType[34259-34265]"
  }, {
    "left" : "toSource",
    "right" : "toSource",
    "info" : "SimpleName[34266-34274]:SimpleName[34266-34274]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34277-34887]:Block[34277-34887]"
  }, {
    "left" : "return runInCompilerThread(new Callable<String>() {\n      public String call() throws Exception {\n        Tracer tracer = newTracer(\"toSource\");\n        try {\n          CodeBuilder cb = new CodeBuilder();\n          if (jsRoot != null) {\n            int i = 0;\n            for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext()) {\n              toSource(cb, i++, scriptNode);\n            }\n          }\n          return cb.toString();\n        } finally {\n          stopTracer(tracer, \"toSource\");\n        }\n      }\n    });",
    "right" : "return runInCompilerThread(new Callable<String>() {\n      public String call() throws Exception {\n        Tracer tracer = newTracer(\"toSource\");\n        try {\n          CodeBuilder cb = new CodeBuilder();\n          if (jsRoot != null) {\n            int i = 0;\n            for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext()) {\n              toSource(cb, i++, scriptNode);\n            }\n          }\n          return cb.toString();\n        } finally {\n          stopTracer(tracer, \"toSource\");\n        }\n      }\n    });",
    "info" : "ReturnStatement[34283-34883]:ReturnStatement[34283-34883]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[34341-34347]:Modifier[34341-34347]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[34348-34354]:SimpleType[34348-34354]"
  }, {
    "left" : "call",
    "right" : "call",
    "info" : "SimpleName[34355-34359]:SimpleName[34355-34359]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[34369-34378]:SimpleType[34369-34378]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34379-34875]:Block[34379-34875]"
  }, {
    "left" : "Tracer tracer = newTracer(\"toSource\");",
    "right" : "Tracer tracer = newTracer(\"toSource\");",
    "info" : "VariableDeclarationStatement[34389-34427]:VariableDeclarationStatement[34389-34427]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[34436-34867]:TryStatement[34436-34867]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34440-34805]:Block[34440-34805]"
  }, {
    "left" : "CodeBuilder cb = new CodeBuilder();",
    "right" : "CodeBuilder cb = new CodeBuilder();",
    "info" : "VariableDeclarationStatement[34452-34487]:VariableDeclarationStatement[34452-34487]"
  }, {
    "left" : "if (jsRoot != null)",
    "right" : "if (jsRoot != null)",
    "info" : "IfStatement[34498-34763]:IfStatement[34498-34763]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34518-34763]:Block[34518-34763]"
  }, {
    "left" : "int i = 0;",
    "right" : "int i = 0;",
    "info" : "VariableDeclarationStatement[34532-34542]:VariableDeclarationStatement[34532-34542]"
  }, {
    "left" : "for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext())",
    "right" : "for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext())",
    "info" : "ForStatement[34555-34751]:ForStatement[34555-34751]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34691-34751]:Block[34691-34751]"
  }, {
    "left" : "toSource(cb, i++, scriptNode);",
    "right" : "toSource(cb, i++, scriptNode);",
    "info" : "ExpressionStatement[34707-34737]:ExpressionStatement[34707-34737]"
  }, {
    "left" : "return cb.toString();",
    "right" : "return cb.toString();",
    "info" : "ReturnStatement[34774-34795]:ReturnStatement[34774-34795]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34814-34867]:Block[34814-34867]"
  }, {
    "left" : "stopTracer(tracer, \"toSource\");",
    "right" : "stopTracer(tracer, \"toSource\");",
    "info" : "ExpressionStatement[34826-34857]:ExpressionStatement[34826-34857]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[34964-34970]:Modifier[34964-34970]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[34971-34979]:ArrayType[34971-34979]"
  }, {
    "left" : "toSourceArray",
    "right" : "toSourceArray",
    "info" : "SimpleName[34980-34993]:SimpleName[34980-34993]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34996-35667]:Block[34996-35667]"
  }, {
    "left" : "return runInCompilerThread(new Callable<String[]>() {\n      public String[] call() throws Exception {\n        Tracer tracer = newTracer(\"toSourceArray\");\n        try {\n          int numInputs = inputs.size();\n          String[] sources = new String[numInputs];\n          CodeBuilder cb = new CodeBuilder();\n          for (int i = 0; i < numInputs; i++) {\n            Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n            cb.reset();\n            toSource(cb, i, scriptNode);\n            sources[i] = cb.toString();\n          }\n          return sources;\n        } finally {\n          stopTracer(tracer, \"toSourceArray\");\n        }\n      }\n    });",
    "right" : "return runInCompilerThread(new Callable<String[]>() {\n      public String[] call() throws Exception {\n        Tracer tracer = newTracer(\"toSourceArray\");\n        try {\n          int numInputs = inputs.size();\n          String[] sources = new String[numInputs];\n          CodeBuilder cb = new CodeBuilder();\n          for (int i = 0; i < numInputs; i++) {\n            Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n            cb.reset();\n            toSource(cb, i, scriptNode);\n            sources[i] = cb.toString();\n          }\n          return sources;\n        } finally {\n          stopTracer(tracer, \"toSourceArray\");\n        }\n      }\n    });",
    "info" : "ReturnStatement[35002-35663]:ReturnStatement[35002-35663]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35062-35068]:Modifier[35062-35068]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[35069-35077]:ArrayType[35069-35077]"
  }, {
    "left" : "call",
    "right" : "call",
    "info" : "SimpleName[35078-35082]:SimpleName[35078-35082]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[35092-35101]:SimpleType[35092-35101]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35102-35655]:Block[35102-35655]"
  }, {
    "left" : "Tracer tracer = newTracer(\"toSourceArray\");",
    "right" : "Tracer tracer = newTracer(\"toSourceArray\");",
    "info" : "VariableDeclarationStatement[35112-35155]:VariableDeclarationStatement[35112-35155]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[35164-35647]:TryStatement[35164-35647]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35168-35580]:Block[35168-35580]"
  }, {
    "left" : "int numInputs = inputs.size();",
    "right" : "int numInputs = inputs.size();",
    "info" : "VariableDeclarationStatement[35180-35210]:VariableDeclarationStatement[35180-35210]"
  }, {
    "left" : "String[] sources = new String[numInputs];",
    "right" : "String[] sources = new String[numInputs];",
    "info" : "VariableDeclarationStatement[35221-35262]:VariableDeclarationStatement[35221-35262]"
  }, {
    "left" : "CodeBuilder cb = new CodeBuilder();",
    "right" : "CodeBuilder cb = new CodeBuilder();",
    "info" : "VariableDeclarationStatement[35273-35308]:VariableDeclarationStatement[35273-35308]"
  }, {
    "left" : "for (int i = 0; i < numInputs; i++)",
    "right" : "for (int i = 0; i < numInputs; i++)",
    "info" : "ForStatement[35319-35544]:ForStatement[35319-35544]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35355-35544]:Block[35355-35544]"
  }, {
    "left" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
    "right" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
    "info" : "VariableDeclarationStatement[35369-35427]:VariableDeclarationStatement[35369-35427]"
  }, {
    "left" : "cb.reset();",
    "right" : "cb.reset();",
    "info" : "ExpressionStatement[35440-35451]:ExpressionStatement[35440-35451]"
  }, {
    "left" : "toSource(cb, i, scriptNode);",
    "right" : "toSource(cb, i, scriptNode);",
    "info" : "ExpressionStatement[35464-35492]:ExpressionStatement[35464-35492]"
  }, {
    "left" : "sources[i] = cb.toString();",
    "right" : "sources[i] = cb.toString();",
    "info" : "ExpressionStatement[35505-35532]:ExpressionStatement[35505-35532]"
  }, {
    "left" : "return sources;",
    "right" : "return sources;",
    "info" : "ReturnStatement[35555-35570]:ReturnStatement[35555-35570]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35589-35647]:Block[35589-35647]"
  }, {
    "left" : "stopTracer(tracer, \"toSourceArray\");",
    "right" : "stopTracer(tracer, \"toSourceArray\");",
    "info" : "ExpressionStatement[35601-35637]:ExpressionStatement[35601-35637]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35742-35748]:Modifier[35742-35748]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[35749-35755]:SimpleType[35749-35755]"
  }, {
    "left" : "toSource",
    "right" : "toSource",
    "info" : "SimpleName[35756-35764]:SimpleName[35756-35764]"
  }, {
    "left" : "final JSModule module",
    "right" : "final JSModule module",
    "info" : "SingleVariableDeclaration[35765-35786]:SingleVariableDeclaration[35765-35786]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35788-36454]:Block[35788-36454]"
  }, {
    "left" : "return runInCompilerThread(new Callable<String>() {\n      public String call() throws Exception {\n        List<CompilerInput> inputs = module.getInputs();\n        int numInputs = inputs.size();\n        if (numInputs == 0) {\n          return \"\";\n        }\n        CodeBuilder cb = new CodeBuilder();\n        for (int i = 0; i < numInputs; i++) {\n          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode == null) {\n            throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());\n          }\n          toSource(cb, i, scriptNode);\n        }\n        return cb.toString();\n      }\n    });",
    "right" : "return runInCompilerThread(new Callable<String>() {\n      public String call() throws Exception {\n        List<CompilerInput> inputs = module.getInputs();\n        int numInputs = inputs.size();\n        if (numInputs == 0) {\n          return \"\";\n        }\n        CodeBuilder cb = new CodeBuilder();\n        for (int i = 0; i < numInputs; i++) {\n          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode == null) {\n            throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());\n          }\n          toSource(cb, i, scriptNode);\n        }\n        return cb.toString();\n      }\n    });",
    "info" : "ReturnStatement[35794-36450]:ReturnStatement[35794-36450]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35852-35858]:Modifier[35852-35858]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[35859-35865]:SimpleType[35859-35865]"
  }, {
    "left" : "call",
    "right" : "call",
    "info" : "SimpleName[35866-35870]:SimpleName[35866-35870]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[35880-35889]:SimpleType[35880-35889]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35890-36442]:Block[35890-36442]"
  }, {
    "left" : "List<CompilerInput> inputs = module.getInputs();",
    "right" : "List<CompilerInput> inputs = module.getInputs();",
    "info" : "VariableDeclarationStatement[35900-35948]:VariableDeclarationStatement[35900-35948]"
  }, {
    "left" : "int numInputs = inputs.size();",
    "right" : "int numInputs = inputs.size();",
    "info" : "VariableDeclarationStatement[35957-35987]:VariableDeclarationStatement[35957-35987]"
  }, {
    "left" : "if (numInputs == 0)",
    "right" : "if (numInputs == 0)",
    "info" : "IfStatement[35996-36048]:IfStatement[35996-36048]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36016-36048]:Block[36016-36048]"
  }, {
    "left" : "return \"\";",
    "right" : "return \"\";",
    "info" : "ReturnStatement[36028-36038]:ReturnStatement[36028-36038]"
  }, {
    "left" : "CodeBuilder cb = new CodeBuilder();",
    "right" : "CodeBuilder cb = new CodeBuilder();",
    "info" : "VariableDeclarationStatement[36057-36092]:VariableDeclarationStatement[36057-36092]"
  }, {
    "left" : "for (int i = 0; i < numInputs; i++)",
    "right" : "for (int i = 0; i < numInputs; i++)",
    "info" : "ForStatement[36101-36404]:ForStatement[36101-36404]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36137-36404]:Block[36137-36404]"
  }, {
    "left" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
    "right" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
    "info" : "VariableDeclarationStatement[36149-36207]:VariableDeclarationStatement[36149-36207]"
  }, {
    "left" : "if (scriptNode == null)",
    "right" : "if (scriptNode == null)",
    "info" : "IfStatement[36218-36355]:IfStatement[36218-36355]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36242-36355]:Block[36242-36355]"
  }, {
    "left" : "throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());",
    "right" : "throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());",
    "info" : "ThrowStatement[36256-36343]:ThrowStatement[36256-36343]"
  }, {
    "left" : "toSource(cb, i, scriptNode);",
    "right" : "toSource(cb, i, scriptNode);",
    "info" : "ExpressionStatement[36366-36394]:ExpressionStatement[36366-36394]"
  }, {
    "left" : "return cb.toString();",
    "right" : "return cb.toString();",
    "info" : "ReturnStatement[36413-36434]:ReturnStatement[36413-36434]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[36544-36550]:Modifier[36544-36550]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[36551-36559]:ArrayType[36551-36559]"
  }, {
    "left" : "toSourceArray",
    "right" : "toSourceArray",
    "info" : "SimpleName[36560-36573]:SimpleName[36560-36573]"
  }, {
    "left" : "final JSModule module",
    "right" : "final JSModule module",
    "info" : "SingleVariableDeclaration[36574-36595]:SingleVariableDeclaration[36574-36595]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36597-37397]:Block[36597-37397]"
  }, {
    "left" : "return runInCompilerThread(new Callable<String[]>() {\n      public String[] call() throws Exception {\n        List<CompilerInput> inputs = module.getInputs();\n        int numInputs = inputs.size();\n        if (numInputs == 0) {\n          return new String[0];\n        }\n\n        String[] sources = new String[numInputs];\n        CodeBuilder cb = new CodeBuilder();\n        for (int i = 0; i < numInputs; i++) {\n          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode == null) {\n            throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());\n          }\n\n          cb.reset();\n          toSource(cb, i, scriptNode);\n          sources[i] = cb.toString();\n        }\n        return sources;\n      }\n    });",
    "right" : "return runInCompilerThread(new Callable<String[]>() {\n      public String[] call() throws Exception {\n        List<CompilerInput> inputs = module.getInputs();\n        int numInputs = inputs.size();\n        if (numInputs == 0) {\n          return new String[0];\n        }\n\n        String[] sources = new String[numInputs];\n        CodeBuilder cb = new CodeBuilder();\n        for (int i = 0; i < numInputs; i++) {\n          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode == null) {\n            throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());\n          }\n\n          cb.reset();\n          toSource(cb, i, scriptNode);\n          sources[i] = cb.toString();\n        }\n        return sources;\n      }\n    });",
    "info" : "ReturnStatement[36603-37393]:ReturnStatement[36603-37393]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[36663-36669]:Modifier[36663-36669]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[36670-36678]:ArrayType[36670-36678]"
  }, {
    "left" : "call",
    "right" : "call",
    "info" : "SimpleName[36679-36683]:SimpleName[36679-36683]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[36693-36702]:SimpleType[36693-36702]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36703-37385]:Block[36703-37385]"
  }, {
    "left" : "List<CompilerInput> inputs = module.getInputs();",
    "right" : "List<CompilerInput> inputs = module.getInputs();",
    "info" : "VariableDeclarationStatement[36713-36761]:VariableDeclarationStatement[36713-36761]"
  }, {
    "left" : "int numInputs = inputs.size();",
    "right" : "int numInputs = inputs.size();",
    "info" : "VariableDeclarationStatement[36770-36800]:VariableDeclarationStatement[36770-36800]"
  }, {
    "left" : "if (numInputs == 0)",
    "right" : "if (numInputs == 0)",
    "info" : "IfStatement[36809-36872]:IfStatement[36809-36872]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36829-36872]:Block[36829-36872]"
  }, {
    "left" : "return new String[0];",
    "right" : "return new String[0];",
    "info" : "ReturnStatement[36841-36862]:ReturnStatement[36841-36862]"
  }, {
    "left" : "String[] sources = new String[numInputs];",
    "right" : "String[] sources = new String[numInputs];",
    "info" : "VariableDeclarationStatement[36882-36923]:VariableDeclarationStatement[36882-36923]"
  }, {
    "left" : "CodeBuilder cb = new CodeBuilder();",
    "right" : "CodeBuilder cb = new CodeBuilder();",
    "info" : "VariableDeclarationStatement[36932-36967]:VariableDeclarationStatement[36932-36967]"
  }, {
    "left" : "for (int i = 0; i < numInputs; i++)",
    "right" : "for (int i = 0; i < numInputs; i++)",
    "info" : "ForStatement[36976-37353]:ForStatement[36976-37353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37012-37353]:Block[37012-37353]"
  }, {
    "left" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
    "right" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
    "info" : "VariableDeclarationStatement[37024-37082]:VariableDeclarationStatement[37024-37082]"
  }, {
    "left" : "if (scriptNode == null)",
    "right" : "if (scriptNode == null)",
    "info" : "IfStatement[37093-37243]:IfStatement[37093-37243]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37117-37243]:Block[37117-37243]"
  }, {
    "left" : "throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());",
    "right" : "throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());",
    "info" : "ThrowStatement[37131-37231]:ThrowStatement[37131-37231]"
  }, {
    "left" : "cb.reset();",
    "right" : "cb.reset();",
    "info" : "ExpressionStatement[37255-37266]:ExpressionStatement[37255-37266]"
  }, {
    "left" : "toSource(cb, i, scriptNode);",
    "right" : "toSource(cb, i, scriptNode);",
    "info" : "ExpressionStatement[37277-37305]:ExpressionStatement[37277-37305]"
  }, {
    "left" : "sources[i] = cb.toString();",
    "right" : "sources[i] = cb.toString();",
    "info" : "ExpressionStatement[37316-37343]:ExpressionStatement[37316-37343]"
  }, {
    "left" : "return sources;",
    "right" : "return sources;",
    "info" : "ReturnStatement[37362-37377]:ReturnStatement[37362-37377]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[37754-37760]:Modifier[37754-37760]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[37761-37765]:PrimitiveType[37761-37765]"
  }, {
    "left" : "toSource",
    "right" : "toSource",
    "info" : "SimpleName[37766-37774]:SimpleName[37766-37774]"
  }, {
    "left" : "final CodeBuilder cb",
    "right" : "final CodeBuilder cb",
    "info" : "SingleVariableDeclaration[37775-37795]:SingleVariableDeclaration[37775-37795]"
  }, {
    "left" : "final int inputSeqNum",
    "right" : "final int inputSeqNum",
    "info" : "SingleVariableDeclaration[37820-37841]:SingleVariableDeclaration[37820-37841]"
  }, {
    "left" : "final Node root",
    "right" : "final Node root",
    "info" : "SingleVariableDeclaration[37866-37881]:SingleVariableDeclaration[37866-37881]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37883-39452]:Block[37883-39452]"
  }, {
    "left" : "runInCompilerThread(new Callable<Void>() {\n      public Void call() throws Exception {\n        if (options.printInputDelimiter) {\n          if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\")) {\n            cb.append(\"\\n\");  // Make sure that the label starts on a new line\n          }\n          Preconditions.checkState(root.getType() == Token.SCRIPT);\n\n          String delimiter = options.inputDelimiter;\n\n          String sourceName = (String)root.getProp(Node.SOURCENAME_PROP);\n          Preconditions.checkState(sourceName != null);\n          Preconditions.checkState(!sourceName.isEmpty());\n\n          delimiter = delimiter.replaceAll(\"%name%\", sourceName)\n            .replaceAll(\"%num%\", String.valueOf(inputSeqNum));\n\n          cb.append(delimiter)\n            .append(\"\\n\");\n        }\n        if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null) {\n          cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");\n        }\n\n        // If there is a valid source map, then indicate to it that the current\n        // root node's mappings are offset by the given string builder buffer.\n        if (options.sourceMapOutputPath != null) {\n          sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());\n        }\n\n        String code = toSource(root, sourceMap);\n        if (!code.isEmpty()) {\n          cb.append(code);\n          if (!code.endsWith(\";\")) {\n            cb.append(\";\");\n          }\n        }\n        return null;\n      }\n    });",
    "right" : "runInCompilerThread(new Callable<Void>() {\n      public Void call() throws Exception {\n        if (options.printInputDelimiter) {\n          if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\")) {\n            cb.append(\"\\n\");  // Make sure that the label starts on a new line\n          }\n          Preconditions.checkState(root.getType() == Token.SCRIPT);\n\n          String delimiter = options.inputDelimiter;\n\n          String sourceName = (String)root.getProp(Node.SOURCENAME_PROP);\n          Preconditions.checkState(sourceName != null);\n          Preconditions.checkState(!sourceName.isEmpty());\n\n          delimiter = delimiter.replaceAll(\"%name%\", sourceName)\n            .replaceAll(\"%num%\", String.valueOf(inputSeqNum));\n\n          cb.append(delimiter)\n            .append(\"\\n\");\n        }\n        if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null) {\n          cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");\n        }\n\n        // If there is a valid source map, then indicate to it that the current\n        // root node's mappings are offset by the given string builder buffer.\n        if (options.sourceMapOutputPath != null) {\n          sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());\n        }\n\n        String code = toSource(root, sourceMap);\n        if (!code.isEmpty()) {\n          cb.append(code);\n          if (!code.endsWith(\";\")) {\n            cb.append(\";\");\n          }\n        }\n        return null;\n      }\n    });",
    "info" : "ExpressionStatement[37889-39448]:ExpressionStatement[37889-39448]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[37938-37944]:Modifier[37938-37944]"
  }, {
    "left" : "Void",
    "right" : "Void",
    "info" : "SimpleType[37945-37949]:SimpleType[37945-37949]"
  }, {
    "left" : "call",
    "right" : "call",
    "info" : "SimpleName[37950-37954]:SimpleName[37950-37954]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[37964-37973]:SimpleType[37964-37973]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37974-39440]:Block[37974-39440]"
  }, {
    "left" : "if (options.printInputDelimiter)",
    "right" : "if (options.printInputDelimiter)",
    "info" : "IfStatement[37984-38679]:IfStatement[37984-38679]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38017-38679]:Block[38017-38679]"
  }, {
    "left" : "if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\"))",
    "right" : "if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\"))",
    "info" : "IfStatement[38029-38169]:IfStatement[38029-38169]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38077-38169]:Block[38077-38169]"
  }, {
    "left" : "cb.append(\"\\n\");",
    "right" : "cb.append(\"\\n\");",
    "info" : "ExpressionStatement[38091-38107]:ExpressionStatement[38091-38107]"
  }, {
    "left" : "Preconditions.checkState(root.getType() == Token.SCRIPT);",
    "right" : "Preconditions.checkState(root.getType() == Token.SCRIPT);",
    "info" : "ExpressionStatement[38180-38237]:ExpressionStatement[38180-38237]"
  }, {
    "left" : "String delimiter = options.inputDelimiter;",
    "right" : "String delimiter = options.inputDelimiter;",
    "info" : "VariableDeclarationStatement[38249-38291]:VariableDeclarationStatement[38249-38291]"
  }, {
    "left" : "String sourceName = (String)root.getProp(Node.SOURCENAME_PROP);",
    "right" : "String sourceName = (String)root.getProp(Node.SOURCENAME_PROP);",
    "info" : "VariableDeclarationStatement[38303-38366]:VariableDeclarationStatement[38303-38366]"
  }, {
    "left" : "Preconditions.checkState(sourceName != null);",
    "right" : "Preconditions.checkState(sourceName != null);",
    "info" : "ExpressionStatement[38377-38422]:ExpressionStatement[38377-38422]"
  }, {
    "left" : "Preconditions.checkState(!sourceName.isEmpty());",
    "right" : "Preconditions.checkState(!sourceName.isEmpty());",
    "info" : "ExpressionStatement[38433-38481]:ExpressionStatement[38433-38481]"
  }, {
    "left" : "delimiter = delimiter.replaceAll(\"%name%\", sourceName)\n            .replaceAll(\"%num%\", String.valueOf(inputSeqNum));",
    "right" : "delimiter = delimiter.replaceAll(\"%name%\", sourceName)\n            .replaceAll(\"%num%\", String.valueOf(inputSeqNum));",
    "info" : "ExpressionStatement[38493-38610]:ExpressionStatement[38493-38610]"
  }, {
    "left" : "cb.append(delimiter)\n            .append(\"\\n\");",
    "right" : "cb.append(delimiter)\n            .append(\"\\n\");",
    "info" : "ExpressionStatement[38622-38669]:ExpressionStatement[38622-38669]"
  }, {
    "left" : "if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null)",
    "right" : "if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null)",
    "info" : "IfStatement[38688-38899]:IfStatement[38688-38899]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38777-38899]:Block[38777-38899]"
  }, {
    "left" : "cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");",
    "right" : "cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");",
    "info" : "ExpressionStatement[38789-38889]:ExpressionStatement[38789-38889]"
  }, {
    "left" : "if (options.sourceMapOutputPath != null)",
    "right" : "if (options.sourceMapOutputPath != null)",
    "info" : "IfStatement[39068-39216]:IfStatement[39068-39216]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39109-39216]:Block[39109-39216]"
  }, {
    "left" : "sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());",
    "right" : "sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());",
    "info" : "ExpressionStatement[39121-39206]:ExpressionStatement[39121-39206]"
  }, {
    "left" : "String code = toSource(root, sourceMap);",
    "right" : "String code = toSource(root, sourceMap);",
    "info" : "VariableDeclarationStatement[39226-39266]:VariableDeclarationStatement[39226-39266]"
  }, {
    "left" : "if (!code.isEmpty())",
    "right" : "if (!code.isEmpty())",
    "info" : "IfStatement[39275-39411]:IfStatement[39275-39411]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39296-39411]:Block[39296-39411]"
  }, {
    "left" : "cb.append(code);",
    "right" : "cb.append(code);",
    "info" : "ExpressionStatement[39308-39324]:ExpressionStatement[39308-39324]"
  }, {
    "left" : "if (!code.endsWith(\";\"))",
    "right" : "if (!code.endsWith(\";\"))",
    "info" : "IfStatement[39335-39401]:IfStatement[39335-39401]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39360-39401]:Block[39360-39401]"
  }, {
    "left" : "cb.append(\";\");",
    "right" : "cb.append(\";\");",
    "info" : "ExpressionStatement[39374-39389]:ExpressionStatement[39374-39389]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[39420-39432]:ReturnStatement[39420-39432]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[39557-39566]:MarkerAnnotation[39557-39566]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[39569-39575]:SimpleType[39569-39575]"
  }, {
    "left" : "toSource",
    "right" : "toSource",
    "info" : "SimpleName[39576-39584]:SimpleName[39576-39584]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[39585-39591]:SingleVariableDeclaration[39585-39591]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39593-39664]:Block[39593-39664]"
  }, {
    "left" : "initCompilerOptionsIfTesting();",
    "right" : "initCompilerOptionsIfTesting();",
    "info" : "ExpressionStatement[39599-39630]:ExpressionStatement[39599-39630]"
  }, {
    "left" : "return toSource(n, null);",
    "right" : "return toSource(n, null);",
    "info" : "ReturnStatement[39635-39660]:ReturnStatement[39635-39660]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[39730-39737]:Modifier[39730-39737]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[39738-39744]:SimpleType[39738-39744]"
  }, {
    "left" : "toSource",
    "right" : "toSource",
    "info" : "SimpleName[39745-39753]:SimpleName[39745-39753]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[39754-39760]:SingleVariableDeclaration[39754-39760]"
  }, {
    "left" : "SourceMap sourceMap",
    "right" : "SourceMap sourceMap",
    "info" : "SingleVariableDeclaration[39762-39781]:SingleVariableDeclaration[39762-39781]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39783-40162]:Block[39783-40226]"
  }, {
    "left" : "CodePrinter.Builder builder = new CodePrinter.Builder(n);",
    "right" : "CodePrinter.Builder builder = new CodePrinter.Builder(n);",
    "info" : "VariableDeclarationStatement[39789-39846]:VariableDeclarationStatement[39789-39846]"
  }, {
    "left" : "builder.setPrettyPrint(options.prettyPrint);",
    "right" : "builder.setPrettyPrint(options.prettyPrint);",
    "info" : "ExpressionStatement[39851-39895]:ExpressionStatement[39851-39895]"
  }, {
    "left" : "builder.setLineBreak(options.lineBreak);",
    "right" : "builder.setLineBreak(options.lineBreak);",
    "info" : "ExpressionStatement[39900-39940]:ExpressionStatement[39900-39940]"
  }, {
    "left" : "builder.setSourceMap(sourceMap);",
    "right" : "builder.setSourceMap(sourceMap);",
    "info" : "ExpressionStatement[39945-39977]:ExpressionStatement[39945-39977]"
  }, {
    "left" : "builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);",
    "right" : "builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);",
    "info" : "ExpressionStatement[39982-40044]:ExpressionStatement[39982-40044]"
  }, {
    "left" : "Charset charset = options.outputCharset;",
    "right" : "Charset charset = options.outputCharset != null ?\n        Charset.forName(options.outputCharset) : null;",
    "info" : "VariableDeclarationStatement[40050-40090]:VariableDeclarationStatement[40050-40154]"
  }, {
    "left" : "options.outputCharset",
    "right" : "options.outputCharset",
    "info" : "QualifiedName[40068-40089]:QualifiedName[40124-40145]"
  }, {
    "left" : "builder.setOutputCharset(charset);",
    "right" : "builder.setOutputCharset(charset);",
    "info" : "ExpressionStatement[40095-40129]:ExpressionStatement[40159-40193]"
  }, {
    "left" : "return builder.build();",
    "right" : "return builder.build();",
    "info" : "ReturnStatement[40135-40158]:ReturnStatement[40199-40222]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[40325-40331]:Modifier[40389-40395]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[40332-40338]:Modifier[40396-40402]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[40339-40344]:TYPE_DECLARATION_KIND[40403-40408]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[40549-40553]:PrimitiveType[40613-40617]"
  }, {
    "left" : "reset",
    "right" : "reset",
    "info" : "SimpleName[40554-40559]:SimpleName[40618-40623]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40562-40592]:Block[40626-40656]"
  }, {
    "left" : "sb.setLength(0);",
    "right" : "sb.setLength(0);",
    "info" : "ExpressionStatement[40570-40586]:ExpressionStatement[40634-40650]"
  }, {
    "left" : "CodeBuilder",
    "right" : "CodeBuilder",
    "info" : "SimpleType[40654-40665]:SimpleType[40718-40729]"
  }, {
    "left" : "append",
    "right" : "append",
    "info" : "SimpleName[40666-40672]:SimpleName[40730-40736]"
  }, {
    "left" : "String str",
    "right" : "String str",
    "info" : "SingleVariableDeclaration[40673-40683]:SingleVariableDeclaration[40737-40747]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40685-41164]:Block[40749-41228]"
  }, {
    "left" : "sb.append(str);",
    "right" : "sb.append(str);",
    "info" : "ExpressionStatement[40693-40708]:ExpressionStatement[40757-40772]"
  }, {
    "left" : "int index = -1;",
    "right" : "int index = -1;",
    "info" : "VariableDeclarationStatement[40782-40797]:VariableDeclarationStatement[40846-40861]"
  }, {
    "left" : "int lastIndex = index;",
    "right" : "int lastIndex = index;",
    "info" : "VariableDeclarationStatement[40804-40826]:VariableDeclarationStatement[40868-40890]"
  }, {
    "left" : "while ((index = str.indexOf('\\n', index + 1)) >= 0)",
    "right" : "while ((index = str.indexOf('\\n', index + 1)) >= 0)",
    "info" : "WhileStatement[40833-40942]:WhileStatement[40897-41006]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40885-40942]:Block[40949-41006]"
  }, {
    "left" : "++lineCount;",
    "right" : "++lineCount;",
    "info" : "ExpressionStatement[40895-40907]:ExpressionStatement[40959-40971]"
  }, {
    "left" : "lastIndex = index;",
    "right" : "lastIndex = index;",
    "info" : "ExpressionStatement[40916-40934]:ExpressionStatement[40980-40998]"
  }, {
    "left" : "if (lastIndex == -1)",
    "right" : "if (lastIndex == -1)",
    "info" : "IfStatement[40950-41138]:IfStatement[41014-41202]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40971-41072]:Block[41035-41136]"
  }, {
    "left" : "colCount += str.length();",
    "right" : "colCount += str.length();",
    "info" : "ExpressionStatement[41039-41064]:ExpressionStatement[41103-41128]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41078-41138]:Block[41142-41202]"
  }, {
    "left" : "colCount = str.length() - (lastIndex + 1);",
    "right" : "colCount = str.length() - (lastIndex + 1);",
    "info" : "ExpressionStatement[41088-41130]:ExpressionStatement[41152-41194]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[41146-41158]:ReturnStatement[41210-41222]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[41218-41227]:MarkerAnnotation[41282-41291]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[41232-41238]:Modifier[41296-41302]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[41239-41245]:SimpleType[41303-41309]"
  }, {
    "left" : "toString",
    "right" : "toString",
    "info" : "SimpleName[41246-41254]:SimpleName[41310-41318]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41257-41292]:Block[41321-41356]"
  }, {
    "left" : "return sb.toString();",
    "right" : "return sb.toString();",
    "info" : "ReturnStatement[41265-41286]:ReturnStatement[41329-41350]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[41348-41354]:Modifier[41412-41418]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[41355-41358]:PrimitiveType[41419-41422]"
  }, {
    "left" : "getLength",
    "right" : "getLength",
    "info" : "SimpleName[41359-41368]:SimpleName[41423-41432]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41371-41404]:Block[41435-41468]"
  }, {
    "left" : "return sb.length();",
    "right" : "return sb.length();",
    "info" : "ReturnStatement[41379-41398]:ReturnStatement[41443-41462]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[41489-41492]:PrimitiveType[41553-41556]"
  }, {
    "left" : "getLineIndex",
    "right" : "getLineIndex",
    "info" : "SimpleName[41493-41505]:SimpleName[41557-41569]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41508-41539]:Block[41572-41603]"
  }, {
    "left" : "return lineCount;",
    "right" : "return lineCount;",
    "info" : "ReturnStatement[41516-41533]:ReturnStatement[41580-41597]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[41626-41629]:PrimitiveType[41690-41693]"
  }, {
    "left" : "getColumnIndex",
    "right" : "getColumnIndex",
    "info" : "SimpleName[41630-41644]:SimpleName[41694-41708]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41647-41677]:Block[41711-41741]"
  }, {
    "left" : "return colCount;",
    "right" : "return colCount;",
    "info" : "ReturnStatement[41655-41671]:ReturnStatement[41719-41735]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[41750-41757]:PrimitiveType[41814-41821]"
  }, {
    "left" : "endsWith",
    "right" : "endsWith",
    "info" : "SimpleName[41758-41766]:SimpleName[41822-41830]"
  }, {
    "left" : "String suffix",
    "right" : "String suffix",
    "info" : "SingleVariableDeclaration[41767-41780]:SingleVariableDeclaration[41831-41844]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41782-41907]:Block[41846-41971]"
  }, {
    "left" : "return (sb.length() > suffix.length())\n          && suffix.equals(sb.substring(sb.length() - suffix.length()));",
    "right" : "return (sb.length() > suffix.length())\n          && suffix.equals(sb.substring(sb.length() - suffix.length()));",
    "info" : "ReturnStatement[41790-41901]:ReturnStatement[41854-41965]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[42089-42095]:Modifier[42153-42159]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[42096-42100]:PrimitiveType[42160-42164]"
  }, {
    "left" : "optimize",
    "right" : "optimize",
    "info" : "SimpleName[42101-42109]:SimpleName[42165-42173]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42112-42735]:Block[42176-42799]"
  }, {
    "left" : "normalize();",
    "right" : "normalize();",
    "info" : "ExpressionStatement[42386-42398]:ExpressionStatement[42450-42462]"
  }, {
    "left" : "PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);",
    "right" : "PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);",
    "info" : "VariableDeclarationStatement[42404-42470]:VariableDeclarationStatement[42468-42534]"
  }, {
    "left" : "if (options.devMode == DevMode.EVERY_PASS)",
    "right" : "if (options.devMode == DevMode.EVERY_PASS)",
    "info" : "IfStatement[42475-42575]:IfStatement[42539-42639]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42518-42575]:Block[42582-42639]"
  }, {
    "left" : "phaseOptimizer.setSanityCheck(sanityCheck);",
    "right" : "phaseOptimizer.setSanityCheck(sanityCheck);",
    "info" : "ExpressionStatement[42526-42569]:ExpressionStatement[42590-42633]"
  }, {
    "left" : "phaseOptimizer.consume(getPassConfig().getOptimizations());",
    "right" : "phaseOptimizer.consume(getPassConfig().getOptimizations());",
    "info" : "ExpressionStatement[42580-42639]:ExpressionStatement[42644-42703]"
  }, {
    "left" : "phaseOptimizer.process(externsRoot, jsRoot);",
    "right" : "phaseOptimizer.process(externsRoot, jsRoot);",
    "info" : "ExpressionStatement[42644-42688]:ExpressionStatement[42708-42752]"
  }, {
    "left" : "if (hasErrors())",
    "right" : "if (hasErrors())",
    "info" : "IfStatement[42693-42731]:IfStatement[42757-42795]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42710-42731]:Block[42774-42795]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[42718-42725]:ReturnStatement[42782-42789]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[42739-42748]:MarkerAnnotation[42803-42812]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[42751-42755]:PrimitiveType[42815-42819]"
  }, {
    "left" : "setCssRenamingMap",
    "right" : "setCssRenamingMap",
    "info" : "SimpleName[42756-42773]:SimpleName[42820-42837]"
  }, {
    "left" : "CssRenamingMap map",
    "right" : "CssRenamingMap map",
    "info" : "SingleVariableDeclaration[42774-42792]:SingleVariableDeclaration[42838-42856]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42794-42833]:Block[42858-42897]"
  }, {
    "left" : "options.cssRenamingMap = map;",
    "right" : "options.cssRenamingMap = map;",
    "info" : "ExpressionStatement[42800-42829]:ExpressionStatement[42864-42893]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[42837-42846]:MarkerAnnotation[42901-42910]"
  }, {
    "left" : "CssRenamingMap",
    "right" : "CssRenamingMap",
    "info" : "SimpleType[42849-42863]:SimpleType[42913-42927]"
  }, {
    "left" : "getCssRenamingMap",
    "right" : "getCssRenamingMap",
    "info" : "SimpleName[42864-42881]:SimpleName[42928-42945]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42884-42924]:Block[42948-42988]"
  }, {
    "left" : "return options.cssRenamingMap;",
    "right" : "return options.cssRenamingMap;",
    "info" : "ReturnStatement[42890-42920]:ReturnStatement[42954-42984]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[43277-43283]:Modifier[43341-43347]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[43284-43288]:PrimitiveType[43348-43352]"
  }, {
    "left" : "processDefines",
    "right" : "processDefines",
    "info" : "SimpleName[43289-43303]:SimpleName[43353-43367]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43306-43415]:Block[43370-43479]"
  }, {
    "left" : "(new DefaultPassConfig(options)).processDefines.create(this)\n        .process(externsRoot, jsRoot);",
    "right" : "(new DefaultPassConfig(options)).processDefines.create(this)\n        .process(externsRoot, jsRoot);",
    "info" : "ExpressionStatement[43312-43411]:ExpressionStatement[43376-43475]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[43419-43426]:PrimitiveType[43483-43490]"
  }, {
    "left" : "isInliningForbidden",
    "right" : "isInliningForbidden",
    "info" : "SimpleName[43427-43446]:SimpleName[43491-43510]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43449-43622]:Block[43513-43686]"
  }, {
    "left" : "return options.propertyRenaming == PropertyRenamingPolicy.HEURISTIC ||\n        options.propertyRenaming ==\n            PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;",
    "right" : "return options.propertyRenaming == PropertyRenamingPolicy.HEURISTIC ||\n        options.propertyRenaming ==\n            PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;",
    "info" : "ReturnStatement[43455-43618]:ReturnStatement[43519-43682]"
  }, {
    "left" : "ControlFlowGraph<Node>",
    "right" : "ControlFlowGraph<Node>",
    "info" : "ParameterizedType[43658-43680]:ParameterizedType[43722-43744]"
  }, {
    "left" : "computeCFG",
    "right" : "computeCFG",
    "info" : "SimpleName[43681-43691]:SimpleName[43745-43755]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43694-43941]:Block[43758-44005]"
  }, {
    "left" : "logger.info(\"Computing Control Flow Graph\");",
    "right" : "logger.info(\"Computing Control Flow Graph\");",
    "info" : "ExpressionStatement[43700-43744]:ExpressionStatement[43764-43808]"
  }, {
    "left" : "Tracer tracer = newTracer(\"computeCFG\");",
    "right" : "Tracer tracer = newTracer(\"computeCFG\");",
    "info" : "VariableDeclarationStatement[43749-43789]:VariableDeclarationStatement[43813-43853]"
  }, {
    "left" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true);",
    "right" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true);",
    "info" : "VariableDeclarationStatement[43794-43856]:VariableDeclarationStatement[43858-43920]"
  }, {
    "left" : "process(cfa);",
    "right" : "process(cfa);",
    "info" : "ExpressionStatement[43861-43874]:ExpressionStatement[43925-43938]"
  }, {
    "left" : "stopTracer(tracer, \"computeCFG\");",
    "right" : "stopTracer(tracer, \"computeCFG\");",
    "info" : "ExpressionStatement[43879-43912]:ExpressionStatement[43943-43976]"
  }, {
    "left" : "return cfa.getCfg();",
    "right" : "return cfa.getCfg();",
    "info" : "ReturnStatement[43917-43937]:ReturnStatement[43981-44001]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[43945-43951]:Modifier[44009-44015]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[43952-43956]:PrimitiveType[44016-44020]"
  }, {
    "left" : "normalize",
    "right" : "normalize",
    "info" : "SimpleName[43957-43966]:SimpleName[44021-44030]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43969-44090]:Block[44033-44154]"
  }, {
    "left" : "logger.info(\"Normalizing\");",
    "right" : "logger.info(\"Normalizing\");",
    "info" : "ExpressionStatement[43975-44002]:ExpressionStatement[44039-44066]"
  }, {
    "left" : "startPass(\"normalize\");",
    "right" : "startPass(\"normalize\");",
    "info" : "ExpressionStatement[44007-44030]:ExpressionStatement[44071-44094]"
  }, {
    "left" : "process(new Normalize(this, false));",
    "right" : "process(new Normalize(this, false));",
    "info" : "ExpressionStatement[44035-44071]:ExpressionStatement[44099-44135]"
  }, {
    "left" : "endPass();",
    "right" : "endPass();",
    "info" : "ExpressionStatement[44076-44086]:ExpressionStatement[44140-44150]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[44094-44103]:MarkerAnnotation[44158-44167]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[44106-44110]:PrimitiveType[44170-44174]"
  }, {
    "left" : "prepareAst",
    "right" : "prepareAst",
    "info" : "SimpleName[44111-44121]:SimpleName[44175-44185]"
  }, {
    "left" : "Node root",
    "right" : "Node root",
    "info" : "SingleVariableDeclaration[44122-44131]:SingleVariableDeclaration[44186-44195]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44133-44297]:Block[44197-44361]"
  }, {
    "left" : "Tracer tracer = newTracer(\"prepareAst\");",
    "right" : "Tracer tracer = newTracer(\"prepareAst\");",
    "info" : "VariableDeclarationStatement[44139-44179]:VariableDeclarationStatement[44203-44243]"
  }, {
    "left" : "CompilerPass pass = new PrepareAst(this);",
    "right" : "CompilerPass pass = new PrepareAst(this);",
    "info" : "VariableDeclarationStatement[44184-44225]:VariableDeclarationStatement[44248-44289]"
  }, {
    "left" : "pass.process(null, root);",
    "right" : "pass.process(null, root);",
    "info" : "ExpressionStatement[44230-44255]:ExpressionStatement[44294-44319]"
  }, {
    "left" : "stopTracer(tracer, \"prepareAst\");",
    "right" : "stopTracer(tracer, \"prepareAst\");",
    "info" : "ExpressionStatement[44260-44293]:ExpressionStatement[44324-44357]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[44301-44305]:PrimitiveType[44365-44369]"
  }, {
    "left" : "recordFunctionInformation",
    "right" : "recordFunctionInformation",
    "info" : "SimpleName[44306-44331]:SimpleName[44370-44395]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44334-44715]:Block[44398-44779]"
  }, {
    "left" : "logger.info(\"Recording function information\");",
    "right" : "logger.info(\"Recording function information\");",
    "info" : "ExpressionStatement[44340-44386]:ExpressionStatement[44404-44450]"
  }, {
    "left" : "startPass(\"recordFunctionInformation\");",
    "right" : "startPass(\"recordFunctionInformation\");",
    "info" : "ExpressionStatement[44391-44430]:ExpressionStatement[44455-44494]"
  }, {
    "left" : "RecordFunctionInformation recordFunctionInfoPass =\n        new RecordFunctionInformation(\n            this, getPassConfig().getIntermediateState().functionNames);",
    "right" : "RecordFunctionInformation recordFunctionInfoPass =\n        new RecordFunctionInformation(\n            this, getPassConfig().getIntermediateState().functionNames);",
    "info" : "VariableDeclarationStatement[44435-44597]:VariableDeclarationStatement[44499-44661]"
  }, {
    "left" : "process(recordFunctionInfoPass);",
    "right" : "process(recordFunctionInfoPass);",
    "info" : "ExpressionStatement[44602-44634]:ExpressionStatement[44666-44698]"
  }, {
    "left" : "functionInformationMap = recordFunctionInfoPass.getMap();",
    "right" : "functionInformationMap = recordFunctionInfoPass.getMap();",
    "info" : "ExpressionStatement[44639-44696]:ExpressionStatement[44703-44760]"
  }, {
    "left" : "endPass();",
    "right" : "endPass();",
    "info" : "ExpressionStatement[44701-44711]:ExpressionStatement[44765-44775]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[44936-44945]:MarkerAnnotation[45000-45009]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[44948-44952]:PrimitiveType[45012-45016]"
  }, {
    "left" : "addChangeHandler",
    "right" : "addChangeHandler",
    "info" : "SimpleName[44953-44969]:SimpleName[45017-45033]"
  }, {
    "left" : "CodeChangeHandler handler",
    "right" : "CodeChangeHandler handler",
    "info" : "SingleVariableDeclaration[44970-44995]:SingleVariableDeclaration[45034-45059]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44997-45039]:Block[45061-45103]"
  }, {
    "left" : "codeChangeHandlers.add(handler);",
    "right" : "codeChangeHandlers.add(handler);",
    "info" : "ExpressionStatement[45003-45035]:ExpressionStatement[45067-45099]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[45043-45052]:MarkerAnnotation[45107-45116]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[45055-45059]:PrimitiveType[45119-45123]"
  }, {
    "left" : "removeChangeHandler",
    "right" : "removeChangeHandler",
    "info" : "SimpleName[45060-45079]:SimpleName[45124-45143]"
  }, {
    "left" : "CodeChangeHandler handler",
    "right" : "CodeChangeHandler handler",
    "info" : "SingleVariableDeclaration[45080-45105]:SingleVariableDeclaration[45144-45169]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45107-45152]:Block[45171-45216]"
  }, {
    "left" : "codeChangeHandlers.remove(handler);",
    "right" : "codeChangeHandlers.remove(handler);",
    "info" : "ExpressionStatement[45113-45148]:ExpressionStatement[45177-45212]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[45347-45356]:MarkerAnnotation[45411-45420]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[45359-45365]:Modifier[45423-45429]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[45366-45370]:PrimitiveType[45430-45434]"
  }, {
    "left" : "reportCodeChange",
    "right" : "reportCodeChange",
    "info" : "SimpleName[45371-45387]:SimpleName[45435-45451]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45390-45490]:Block[45454-45554]"
  }, {
    "left" : "for (CodeChangeHandler handler : codeChangeHandlers)",
    "right" : "for (CodeChangeHandler handler : codeChangeHandlers)",
    "info" : "EnhancedForStatement[45396-45486]:EnhancedForStatement[45460-45550]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45449-45486]:Block[45513-45550]"
  }, {
    "left" : "handler.reportChange();",
    "right" : "handler.reportChange();",
    "info" : "ExpressionStatement[45457-45480]:ExpressionStatement[45521-45544]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[45494-45503]:MarkerAnnotation[45558-45567]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[45506-45512]:Modifier[45570-45576]"
  }, {
    "left" : "CodingConvention",
    "right" : "CodingConvention",
    "info" : "SimpleType[45513-45529]:SimpleType[45577-45593]"
  }, {
    "left" : "getCodingConvention",
    "right" : "getCodingConvention",
    "info" : "SimpleName[45530-45549]:SimpleName[45594-45613]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45552-45721]:Block[45616-45785]"
  }, {
    "left" : "CodingConvention convention = options.getCodingConvention();",
    "right" : "CodingConvention convention = options.getCodingConvention();",
    "info" : "VariableDeclarationStatement[45558-45618]:VariableDeclarationStatement[45622-45682]"
  }, {
    "left" : "convention = convention != null ? convention : defaultCodingConvention;",
    "right" : "convention = convention != null ? convention : defaultCodingConvention;",
    "info" : "ExpressionStatement[45623-45694]:ExpressionStatement[45687-45758]"
  }, {
    "left" : "return convention;",
    "right" : "return convention;",
    "info" : "ReturnStatement[45699-45717]:ReturnStatement[45763-45781]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[45725-45734]:MarkerAnnotation[45789-45798]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[45737-45743]:Modifier[45801-45807]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[45744-45751]:PrimitiveType[45808-45815]"
  }, {
    "left" : "isIdeMode",
    "right" : "isIdeMode",
    "info" : "SimpleName[45752-45761]:SimpleName[45816-45825]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45764-45797]:Block[45828-45861]"
  }, {
    "left" : "return options.ideMode;",
    "right" : "return options.ideMode;",
    "info" : "ReturnStatement[45770-45793]:ReturnStatement[45834-45857]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[45801-45810]:MarkerAnnotation[45865-45874]"
  }, {
    "left" : "Config",
    "right" : "Config",
    "info" : "SimpleType[45813-45819]:SimpleType[45877-45883]"
  }, {
    "left" : "getParserConfig",
    "right" : "getParserConfig",
    "info" : "SimpleName[45820-45835]:SimpleName[45884-45899]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45838-45967]:Block[45902-46031]"
  }, {
    "left" : "if (parserConfig == null)",
    "right" : "if (parserConfig == null)",
    "info" : "IfStatement[45844-45938]:IfStatement[45908-46002]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45870-45938]:Block[45934-46002]"
  }, {
    "left" : "parserConfig = ParserRunner.createConfig(isIdeMode());",
    "right" : "parserConfig = ParserRunner.createConfig(isIdeMode());",
    "info" : "ExpressionStatement[45878-45932]:ExpressionStatement[45942-45996]"
  }, {
    "left" : "return parserConfig;",
    "right" : "return parserConfig;",
    "info" : "ReturnStatement[45943-45963]:ReturnStatement[46007-46027]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[45971-45980]:MarkerAnnotation[46035-46044]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[45983-45989]:Modifier[46047-46053]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[45990-45997]:PrimitiveType[46054-46061]"
  }, {
    "left" : "isTypeCheckingEnabled",
    "right" : "isTypeCheckingEnabled",
    "info" : "SimpleName[45998-46019]:SimpleName[46062-46083]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46022-46058]:Block[46086-46122]"
  }, {
    "left" : "return options.checkTypes;",
    "right" : "return options.checkTypes;",
    "info" : "ReturnStatement[46028-46054]:ReturnStatement[46092-46118]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[46239-46248]:MarkerAnnotation[46303-46312]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[46251-46257]:Modifier[46315-46321]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[46258-46262]:PrimitiveType[46322-46326]"
  }, {
    "left" : "report",
    "right" : "report",
    "info" : "SimpleName[46263-46269]:SimpleName[46327-46333]"
  }, {
    "left" : "JSError error",
    "right" : "JSError error",
    "info" : "SingleVariableDeclaration[46270-46283]:SingleVariableDeclaration[46334-46347]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46285-46595]:Block[46349-46659]"
  }, {
    "left" : "CheckLevel level = error.level;",
    "right" : "CheckLevel level = error.level;",
    "info" : "VariableDeclarationStatement[46291-46322]:VariableDeclarationStatement[46355-46386]"
  }, {
    "left" : "WarningsGuard guard = options.getWarningsGuard();",
    "right" : "WarningsGuard guard = options.getWarningsGuard();",
    "info" : "VariableDeclarationStatement[46327-46376]:VariableDeclarationStatement[46391-46440]"
  }, {
    "left" : "if (guard != null)",
    "right" : "if (guard != null)",
    "info" : "IfStatement[46381-46519]:IfStatement[46445-46583]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46400-46519]:Block[46464-46583]"
  }, {
    "left" : "CheckLevel newLevel = guard.level(error);",
    "right" : "CheckLevel newLevel = guard.level(error);",
    "info" : "VariableDeclarationStatement[46408-46449]:VariableDeclarationStatement[46472-46513]"
  }, {
    "left" : "if (newLevel != null)",
    "right" : "if (newLevel != null)",
    "info" : "IfStatement[46456-46513]:IfStatement[46520-46577]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46478-46513]:Block[46542-46577]"
  }, {
    "left" : "level = newLevel;",
    "right" : "level = newLevel;",
    "info" : "ExpressionStatement[46488-46505]:ExpressionStatement[46552-46569]"
  }, {
    "left" : "if (level.isOn())",
    "right" : "if (level.isOn())",
    "info" : "IfStatement[46525-46591]:IfStatement[46589-46655]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46543-46591]:Block[46607-46655]"
  }, {
    "left" : "errorManager.report(level, error);",
    "right" : "errorManager.report(level, error);",
    "info" : "ExpressionStatement[46551-46585]:ExpressionStatement[46615-46649]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[46599-46608]:MarkerAnnotation[46663-46672]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[46611-46617]:Modifier[46675-46681]"
  }, {
    "left" : "CheckLevel",
    "right" : "CheckLevel",
    "info" : "SimpleType[46618-46628]:SimpleType[46682-46692]"
  }, {
    "left" : "getErrorLevel",
    "right" : "getErrorLevel",
    "info" : "SimpleName[46629-46642]:SimpleName[46693-46706]"
  }, {
    "left" : "JSError error",
    "right" : "JSError error",
    "info" : "SingleVariableDeclaration[46643-46656]:SingleVariableDeclaration[46707-46720]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46658-46864]:Block[46722-46928]"
  }, {
    "left" : "Preconditions.checkNotNull(options);",
    "right" : "Preconditions.checkNotNull(options);",
    "info" : "ExpressionStatement[46664-46700]:ExpressionStatement[46728-46764]"
  }, {
    "left" : "WarningsGuard guards = options.getWarningsGuard();",
    "right" : "WarningsGuard guards = options.getWarningsGuard();",
    "info" : "VariableDeclarationStatement[46705-46755]:VariableDeclarationStatement[46769-46819]"
  }, {
    "left" : "if (guards == null)",
    "right" : "if (guards == null)",
    "info" : "IfStatement[46760-46860]:IfStatement[46824-46924]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46780-46813]:Block[46844-46877]"
  }, {
    "left" : "return error.level;",
    "right" : "return error.level;",
    "info" : "ReturnStatement[46788-46807]:ReturnStatement[46852-46871]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46819-46860]:Block[46883-46924]"
  }, {
    "left" : "return guards.level(error);",
    "right" : "return guards.level(error);",
    "info" : "ReturnStatement[46827-46854]:ReturnStatement[46891-46918]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[46911-46920]:MarkerAnnotation[46975-46984]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[46923-46927]:PrimitiveType[46987-46991]"
  }, {
    "left" : "throwInternalError",
    "right" : "throwInternalError",
    "info" : "SimpleName[46928-46946]:SimpleName[46992-47010]"
  }, {
    "left" : "String message",
    "right" : "String message",
    "info" : "SingleVariableDeclaration[46947-46961]:SingleVariableDeclaration[47011-47025]"
  }, {
    "left" : "Exception cause",
    "right" : "Exception cause",
    "info" : "SingleVariableDeclaration[46963-46978]:SingleVariableDeclaration[47027-47042]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46980-47256]:Block[47044-47320]"
  }, {
    "left" : "String finalMessage =\n      \"INTERNAL COMPILER ERROR.\\n\" +\n      \"Please report this problem.\\n\" + message;",
    "right" : "String finalMessage =\n      \"INTERNAL COMPILER ERROR.\\n\" +\n      \"Please report this problem.\\n\" + message;",
    "info" : "VariableDeclarationStatement[46986-47093]:VariableDeclarationStatement[47050-47157]"
  }, {
    "left" : "RuntimeException e = new RuntimeException(finalMessage, cause);",
    "right" : "RuntimeException e = new RuntimeException(finalMessage, cause);",
    "info" : "VariableDeclarationStatement[47099-47162]:VariableDeclarationStatement[47163-47226]"
  }, {
    "left" : "if (cause != null)",
    "right" : "if (cause != null)",
    "info" : "IfStatement[47167-47239]:IfStatement[47231-47303]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47186-47239]:Block[47250-47303]"
  }, {
    "left" : "e.setStackTrace(cause.getStackTrace());",
    "right" : "e.setStackTrace(cause.getStackTrace());",
    "info" : "ExpressionStatement[47194-47233]:ExpressionStatement[47258-47297]"
  }, {
    "left" : "throw e;",
    "right" : "throw e;",
    "info" : "ThrowStatement[47244-47252]:ThrowStatement[47308-47316]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[47305-47311]:Modifier[47369-47375]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[47312-47315]:PrimitiveType[47376-47379]"
  }, {
    "left" : "getErrorCount",
    "right" : "getErrorCount",
    "info" : "SimpleName[47316-47329]:SimpleName[47380-47393]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47332-47378]:Block[47396-47442]"
  }, {
    "left" : "return errorManager.getErrorCount();",
    "right" : "return errorManager.getErrorCount();",
    "info" : "ReturnStatement[47338-47374]:ReturnStatement[47402-47438]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[47428-47434]:Modifier[47492-47498]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[47435-47438]:PrimitiveType[47499-47502]"
  }, {
    "left" : "getWarningCount",
    "right" : "getWarningCount",
    "info" : "SimpleName[47439-47454]:SimpleName[47503-47518]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47457-47505]:Block[47521-47569]"
  }, {
    "left" : "return errorManager.getWarningCount();",
    "right" : "return errorManager.getWarningCount();",
    "info" : "ReturnStatement[47463-47501]:ReturnStatement[47527-47565]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[47509-47518]:MarkerAnnotation[47573-47582]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[47521-47528]:PrimitiveType[47585-47592]"
  }, {
    "left" : "hasHaltingErrors",
    "right" : "hasHaltingErrors",
    "info" : "SimpleName[47529-47545]:SimpleName[47593-47609]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47548-47601]:Block[47612-47665]"
  }, {
    "left" : "return !isIdeMode() && getErrorCount() > 0;",
    "right" : "return !isIdeMode() && getErrorCount() > 0;",
    "info" : "ReturnStatement[47554-47597]:ReturnStatement[47618-47661]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[48023-48029]:Modifier[48087-48093]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[48030-48037]:PrimitiveType[48094-48101]"
  }, {
    "left" : "hasErrors",
    "right" : "hasErrors",
    "info" : "SimpleName[48038-48047]:SimpleName[48102-48111]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48050-48086]:Block[48114-48150]"
  }, {
    "left" : "return hasHaltingErrors();",
    "right" : "return hasHaltingErrors();",
    "info" : "ReturnStatement[48056-48082]:ReturnStatement[48120-48146]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[48148-48157]:MarkerAnnotation[48212-48221]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[48160-48164]:PrimitiveType[48224-48228]"
  }, {
    "left" : "addToDebugLog",
    "right" : "addToDebugLog",
    "info" : "SimpleName[48165-48178]:SimpleName[48229-48242]"
  }, {
    "left" : "String str",
    "right" : "String str",
    "info" : "SingleVariableDeclaration[48179-48189]:SingleVariableDeclaration[48243-48253]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48191-48271]:Block[48255-48335]"
  }, {
    "left" : "debugLog.append(str);",
    "right" : "debugLog.append(str);",
    "info" : "ExpressionStatement[48197-48218]:ExpressionStatement[48261-48282]"
  }, {
    "left" : "debugLog.append('\\n');",
    "right" : "debugLog.append('\\n');",
    "info" : "ExpressionStatement[48223-48245]:ExpressionStatement[48287-48309]"
  }, {
    "left" : "logger.fine(str);",
    "right" : "logger.fine(str);",
    "info" : "ExpressionStatement[48250-48267]:ExpressionStatement[48314-48331]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[48275-48282]:Modifier[48339-48346]"
  }, {
    "left" : "SourceFile",
    "right" : "SourceFile",
    "info" : "SimpleType[48283-48293]:SimpleType[48347-48357]"
  }, {
    "left" : "getSourceFileByName",
    "right" : "getSourceFileByName",
    "info" : "SimpleName[48294-48313]:SimpleName[48358-48377]"
  }, {
    "left" : "String sourceName",
    "right" : "String sourceName",
    "info" : "SingleVariableDeclaration[48314-48331]:SingleVariableDeclaration[48378-48395]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48333-48468]:Block[48397-48532]"
  }, {
    "left" : "if (inputsByName.containsKey(sourceName))",
    "right" : "if (inputsByName.containsKey(sourceName))",
    "info" : "IfStatement[48339-48447]:IfStatement[48403-48511]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48381-48447]:Block[48445-48511]"
  }, {
    "left" : "return inputsByName.get(sourceName).getSourceFile();",
    "right" : "return inputsByName.get(sourceName).getSourceFile();",
    "info" : "ReturnStatement[48389-48441]:ReturnStatement[48453-48505]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[48452-48464]:ReturnStatement[48516-48528]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[48472-48478]:Modifier[48536-48542]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[48479-48485]:SimpleType[48543-48549]"
  }, {
    "left" : "getSourceLine",
    "right" : "getSourceLine",
    "info" : "SimpleName[48486-48499]:SimpleName[48550-48563]"
  }, {
    "left" : "String sourceName",
    "right" : "String sourceName",
    "info" : "SingleVariableDeclaration[48500-48517]:SingleVariableDeclaration[48564-48581]"
  }, {
    "left" : "int lineNumber",
    "right" : "int lineNumber",
    "info" : "SingleVariableDeclaration[48519-48533]:SingleVariableDeclaration[48583-48597]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48535-48735]:Block[48599-48799]"
  }, {
    "left" : "if (lineNumber < 1)",
    "right" : "if (lineNumber < 1)",
    "info" : "IfStatement[48541-48587]:IfStatement[48605-48651]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48561-48587]:Block[48625-48651]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[48569-48581]:ReturnStatement[48633-48645]"
  }, {
    "left" : "SourceFile input = getSourceFileByName(sourceName);",
    "right" : "SourceFile input = getSourceFileByName(sourceName);",
    "info" : "VariableDeclarationStatement[48592-48643]:VariableDeclarationStatement[48656-48707]"
  }, {
    "left" : "if (input != null)",
    "right" : "if (input != null)",
    "info" : "IfStatement[48648-48714]:IfStatement[48712-48778]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48667-48714]:Block[48731-48778]"
  }, {
    "left" : "return input.getLine(lineNumber);",
    "right" : "return input.getLine(lineNumber);",
    "info" : "ReturnStatement[48675-48708]:ReturnStatement[48739-48772]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[48719-48731]:ReturnStatement[48783-48795]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[48739-48745]:Modifier[48803-48809]"
  }, {
    "left" : "Region",
    "right" : "Region",
    "info" : "SimpleType[48746-48752]:SimpleType[48810-48816]"
  }, {
    "left" : "getSourceRegion",
    "right" : "getSourceRegion",
    "info" : "SimpleName[48753-48768]:SimpleName[48817-48832]"
  }, {
    "left" : "String sourceName",
    "right" : "String sourceName",
    "info" : "SingleVariableDeclaration[48769-48786]:SingleVariableDeclaration[48833-48850]"
  }, {
    "left" : "int lineNumber",
    "right" : "int lineNumber",
    "info" : "SingleVariableDeclaration[48788-48802]:SingleVariableDeclaration[48852-48866]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48804-49006]:Block[48868-49070]"
  }, {
    "left" : "if (lineNumber < 1)",
    "right" : "if (lineNumber < 1)",
    "info" : "IfStatement[48810-48856]:IfStatement[48874-48920]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48830-48856]:Block[48894-48920]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[48838-48850]:ReturnStatement[48902-48914]"
  }, {
    "left" : "SourceFile input = getSourceFileByName(sourceName);",
    "right" : "SourceFile input = getSourceFileByName(sourceName);",
    "info" : "VariableDeclarationStatement[48861-48912]:VariableDeclarationStatement[48925-48976]"
  }, {
    "left" : "if (input != null)",
    "right" : "if (input != null)",
    "info" : "IfStatement[48917-48985]:IfStatement[48981-49049]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48936-48985]:Block[49000-49049]"
  }, {
    "left" : "return input.getRegion(lineNumber);",
    "right" : "return input.getRegion(lineNumber);",
    "info" : "ReturnStatement[48944-48979]:ReturnStatement[49008-49043]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[48990-49002]:ReturnStatement[49054-49066]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[49194-49203]:MarkerAnnotation[49258-49267]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[49206-49210]:SimpleType[49270-49274]"
  }, {
    "left" : "getNodeForCodeInsertion",
    "right" : "getNodeForCodeInsertion",
    "info" : "SimpleName[49211-49234]:SimpleName[49275-49298]"
  }, {
    "left" : "JSModule module",
    "right" : "JSModule module",
    "info" : "SingleVariableDeclaration[49235-49250]:SingleVariableDeclaration[49299-49314]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49252-49645]:Block[49316-49709]"
  }, {
    "left" : "if (module == null)",
    "right" : "if (module == null)",
    "info" : "IfStatement[49258-49423]:IfStatement[49322-49487]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49278-49423]:Block[49342-49487]"
  }, {
    "left" : "if (inputs.isEmpty())",
    "right" : "if (inputs.isEmpty())",
    "info" : "IfStatement[49286-49371]:IfStatement[49350-49435]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49308-49371]:Block[49372-49435]"
  }, {
    "left" : "throw new IllegalStateException(\"No inputs\");",
    "right" : "throw new IllegalStateException(\"No inputs\");",
    "info" : "ThrowStatement[49318-49363]:ThrowStatement[49382-49427]"
  }, {
    "left" : "return inputs.get(0).getAstRoot(this);",
    "right" : "return inputs.get(0).getAstRoot(this);",
    "info" : "ReturnStatement[49379-49417]:ReturnStatement[49443-49481]"
  }, {
    "left" : "List<CompilerInput> moduleInputs = module.getInputs();",
    "right" : "List<CompilerInput> moduleInputs = module.getInputs();",
    "info" : "VariableDeclarationStatement[49429-49483]:VariableDeclarationStatement[49493-49547]"
  }, {
    "left" : "if (moduleInputs.size() > 0)",
    "right" : "if (moduleInputs.size() > 0)",
    "info" : "IfStatement[49488-49575]:IfStatement[49552-49639]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49517-49575]:Block[49581-49639]"
  }, {
    "left" : "return moduleInputs.get(0).getAstRoot(this);",
    "right" : "return moduleInputs.get(0).getAstRoot(this);",
    "info" : "ReturnStatement[49525-49569]:ReturnStatement[49589-49633]"
  }, {
    "left" : "throw new IllegalStateException(\"Root module has no inputs\");",
    "right" : "throw new IllegalStateException(\"Root module has no inputs\");",
    "info" : "ThrowStatement[49580-49641]:ThrowStatement[49644-49705]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[49649-49655]:Modifier[49713-49719]"
  }, {
    "left" : "SourceMap",
    "right" : "SourceMap",
    "info" : "SimpleType[49656-49665]:SimpleType[49720-49729]"
  }, {
    "left" : "getSourceMap",
    "right" : "getSourceMap",
    "info" : "SimpleName[49666-49678]:SimpleName[49730-49742]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49681-49708]:Block[49745-49772]"
  }, {
    "left" : "return sourceMap;",
    "right" : "return sourceMap;",
    "info" : "ReturnStatement[49687-49704]:ReturnStatement[49751-49768]"
  }, {
    "left" : "VariableMap",
    "right" : "VariableMap",
    "info" : "SimpleType[49712-49723]:SimpleType[49776-49787]"
  }, {
    "left" : "getVariableMap",
    "right" : "getVariableMap",
    "info" : "SimpleName[49724-49738]:SimpleName[49788-49802]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49741-49809]:Block[49805-49873]"
  }, {
    "left" : "return getPassConfig().getIntermediateState().variableMap;",
    "right" : "return getPassConfig().getIntermediateState().variableMap;",
    "info" : "ReturnStatement[49747-49805]:ReturnStatement[49811-49869]"
  }, {
    "left" : "VariableMap",
    "right" : "VariableMap",
    "info" : "SimpleType[49813-49824]:SimpleType[49877-49888]"
  }, {
    "left" : "getPropertyMap",
    "right" : "getPropertyMap",
    "info" : "SimpleName[49825-49839]:SimpleName[49889-49903]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49842-49910]:Block[49906-49974]"
  }, {
    "left" : "return getPassConfig().getIntermediateState().propertyMap;",
    "right" : "return getPassConfig().getIntermediateState().propertyMap;",
    "info" : "ReturnStatement[49848-49906]:ReturnStatement[49912-49970]"
  }, {
    "left" : "CompilerOptions",
    "right" : "CompilerOptions",
    "info" : "SimpleType[49914-49929]:SimpleType[49978-49993]"
  }, {
    "left" : "getOptions",
    "right" : "getOptions",
    "info" : "SimpleName[49930-49940]:SimpleName[49994-50004]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49943-49968]:Block[50007-50032]"
  }, {
    "left" : "return options;",
    "right" : "return options;",
    "info" : "ReturnStatement[49949-49964]:ReturnStatement[50013-50028]"
  }, {
    "left" : "FunctionInformationMap",
    "right" : "FunctionInformationMap",
    "info" : "SimpleType[49972-49994]:SimpleType[50036-50058]"
  }, {
    "left" : "getFunctionalInformationMap",
    "right" : "getFunctionalInformationMap",
    "info" : "SimpleName[49995-50022]:SimpleName[50059-50086]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50025-50065]:Block[50089-50129]"
  }, {
    "left" : "return functionInformationMap;",
    "right" : "return functionInformationMap;",
    "info" : "ReturnStatement[50031-50061]:ReturnStatement[50095-50125]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[50155-50161]:Modifier[50219-50225]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[50162-50168]:Modifier[50226-50232]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[50169-50173]:PrimitiveType[50233-50237]"
  }, {
    "left" : "setLoggingLevel",
    "right" : "setLoggingLevel",
    "info" : "SimpleName[50174-50189]:SimpleName[50238-50253]"
  }, {
    "left" : "Level level",
    "right" : "Level level",
    "info" : "SingleVariableDeclaration[50190-50201]:SingleVariableDeclaration[50254-50265]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50203-50236]:Block[50267-50300]"
  }, {
    "left" : "logger.setLevel(level);",
    "right" : "logger.setLevel(level);",
    "info" : "ExpressionStatement[50209-50232]:ExpressionStatement[50273-50296]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[50316-50322]:Modifier[50380-50386]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[50323-50329]:SimpleType[50387-50393]"
  }, {
    "left" : "getAstDotGraph",
    "right" : "getAstDotGraph",
    "info" : "SimpleName[50330-50344]:SimpleName[50394-50408]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[50354-50365]:SimpleType[50418-50429]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50366-50590]:Block[50430-50654]"
  }, {
    "left" : "if (jsRoot != null)",
    "right" : "if (jsRoot != null)",
    "info" : "IfStatement[50372-50586]:IfStatement[50436-50650]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50392-50556]:Block[50456-50620]"
  }, {
    "left" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true);",
    "right" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true);",
    "info" : "VariableDeclarationStatement[50400-50462]:VariableDeclarationStatement[50464-50526]"
  }, {
    "left" : "cfa.process(null, jsRoot);",
    "right" : "cfa.process(null, jsRoot);",
    "info" : "ExpressionStatement[50469-50495]:ExpressionStatement[50533-50559]"
  }, {
    "left" : "return DotFormatter.toDot(jsRoot, cfa.getCfg());",
    "right" : "return DotFormatter.toDot(jsRoot, cfa.getCfg());",
    "info" : "ReturnStatement[50502-50550]:ReturnStatement[50566-50614]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50562-50586]:Block[50626-50650]"
  }, {
    "left" : "return \"\";",
    "right" : "return \"\";",
    "info" : "ReturnStatement[50570-50580]:ReturnStatement[50634-50644]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[50594-50603]:MarkerAnnotation[50658-50667]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[50606-50612]:Modifier[50670-50676]"
  }, {
    "left" : "ErrorManager",
    "right" : "ErrorManager",
    "info" : "SimpleType[50613-50625]:SimpleType[50677-50689]"
  }, {
    "left" : "getErrorManager",
    "right" : "getErrorManager",
    "info" : "SimpleName[50626-50641]:SimpleName[50690-50705]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50644-50749]:Block[50708-50813]"
  }, {
    "left" : "if (options == null)",
    "right" : "if (options == null)",
    "info" : "IfStatement[50650-50720]:IfStatement[50714-50784]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50671-50720]:Block[50735-50784]"
  }, {
    "left" : "initOptions(new CompilerOptions());",
    "right" : "initOptions(new CompilerOptions());",
    "info" : "ExpressionStatement[50679-50714]:ExpressionStatement[50743-50778]"
  }, {
    "left" : "return errorManager;",
    "right" : "return errorManager;",
    "info" : "ReturnStatement[50725-50745]:ReturnStatement[50789-50809]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[50753-50762]:MarkerAnnotation[50817-50826]"
  }, {
    "left" : "List<CompilerInput>",
    "right" : "List<CompilerInput>",
    "info" : "ParameterizedType[50765-50784]:ParameterizedType[50829-50848]"
  }, {
    "left" : "getInputsInOrder",
    "right" : "getInputsInOrder",
    "info" : "SimpleName[50785-50801]:SimpleName[50849-50865]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50804-50873]:Block[50868-50937]"
  }, {
    "left" : "return Collections.<CompilerInput>unmodifiableList(inputs);",
    "right" : "return Collections.<CompilerInput>unmodifiableList(inputs);",
    "info" : "ReturnStatement[50810-50869]:ReturnStatement[50874-50933]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[51475-51481]:Modifier[51539-51545]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[51482-51488]:Modifier[51546-51552]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[51489-51494]:TYPE_DECLARATION_KIND[51553-51558]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[51881-51888]:Modifier[51945-51952]"
  }, {
    "left" : "IntermediateState",
    "right" : "IntermediateState",
    "info" : "SimpleName[51889-51906]:SimpleName[51953-51970]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51909-51911]:Block[51973-51975]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[52011-52017]:Modifier[52075-52081]"
  }, {
    "left" : "IntermediateState",
    "right" : "IntermediateState",
    "info" : "SimpleType[52018-52035]:SimpleType[52082-52099]"
  }, {
    "left" : "getState",
    "right" : "getState",
    "info" : "SimpleName[52036-52044]:SimpleName[52100-52108]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52047-52417]:Block[52111-52481]"
  }, {
    "left" : "IntermediateState state = new IntermediateState();",
    "right" : "IntermediateState state = new IntermediateState();",
    "info" : "VariableDeclarationStatement[52053-52103]:VariableDeclarationStatement[52117-52167]"
  }, {
    "left" : "state.externsRoot = externsRoot;",
    "right" : "state.externsRoot = externsRoot;",
    "info" : "ExpressionStatement[52108-52140]:ExpressionStatement[52172-52204]"
  }, {
    "left" : "state.jsRoot = jsRoot;",
    "right" : "state.jsRoot = jsRoot;",
    "info" : "ExpressionStatement[52145-52167]:ExpressionStatement[52209-52231]"
  }, {
    "left" : "state.externs = externs;",
    "right" : "state.externs = externs;",
    "info" : "ExpressionStatement[52172-52196]:ExpressionStatement[52236-52260]"
  }, {
    "left" : "state.inputs = inputs;",
    "right" : "state.inputs = inputs;",
    "info" : "ExpressionStatement[52201-52223]:ExpressionStatement[52265-52287]"
  }, {
    "left" : "state.modules = modules;",
    "right" : "state.modules = modules;",
    "info" : "ExpressionStatement[52228-52252]:ExpressionStatement[52292-52316]"
  }, {
    "left" : "state.passConfigState = getPassConfig().getIntermediateState();",
    "right" : "state.passConfigState = getPassConfig().getIntermediateState();",
    "info" : "ExpressionStatement[52257-52320]:ExpressionStatement[52321-52384]"
  }, {
    "left" : "state.typeRegistry = typeRegistry;",
    "right" : "state.typeRegistry = typeRegistry;",
    "info" : "ExpressionStatement[52325-52359]:ExpressionStatement[52389-52423]"
  }, {
    "left" : "state.normalized = normalized;",
    "right" : "state.normalized = normalized;",
    "info" : "ExpressionStatement[52364-52394]:ExpressionStatement[52428-52458]"
  }, {
    "left" : "return state;",
    "right" : "return state;",
    "info" : "ReturnStatement[52400-52413]:ReturnStatement[52464-52477]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[52554-52560]:Modifier[52618-52624]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[52561-52565]:PrimitiveType[52625-52629]"
  }, {
    "left" : "setState",
    "right" : "setState",
    "info" : "SimpleName[52566-52574]:SimpleName[52630-52638]"
  }, {
    "left" : "IntermediateState state",
    "right" : "IntermediateState state",
    "info" : "SingleVariableDeclaration[52575-52598]:SingleVariableDeclaration[52639-52662]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52600-52934]:Block[52664-52998]"
  }, {
    "left" : "externsRoot = state.externsRoot;",
    "right" : "externsRoot = state.externsRoot;",
    "info" : "ExpressionStatement[52606-52638]:ExpressionStatement[52670-52702]"
  }, {
    "left" : "jsRoot = state.jsRoot;",
    "right" : "jsRoot = state.jsRoot;",
    "info" : "ExpressionStatement[52643-52665]:ExpressionStatement[52707-52729]"
  }, {
    "left" : "externs = state.externs;",
    "right" : "externs = state.externs;",
    "info" : "ExpressionStatement[52670-52694]:ExpressionStatement[52734-52758]"
  }, {
    "left" : "inputs = state.inputs;",
    "right" : "inputs = state.inputs;",
    "info" : "ExpressionStatement[52699-52721]:ExpressionStatement[52763-52785]"
  }, {
    "left" : "modules = state.modules;",
    "right" : "modules = state.modules;",
    "info" : "ExpressionStatement[52726-52750]:ExpressionStatement[52790-52814]"
  }, {
    "left" : "passes = createPassConfigInternal();",
    "right" : "passes = createPassConfigInternal();",
    "info" : "ExpressionStatement[52755-52791]:ExpressionStatement[52819-52855]"
  }, {
    "left" : "getPassConfig().setIntermediateState(state.passConfigState);",
    "right" : "getPassConfig().setIntermediateState(state.passConfigState);",
    "info" : "ExpressionStatement[52796-52856]:ExpressionStatement[52860-52920]"
  }, {
    "left" : "typeRegistry = state.typeRegistry;",
    "right" : "typeRegistry = state.typeRegistry;",
    "info" : "ExpressionStatement[52861-52895]:ExpressionStatement[52925-52959]"
  }, {
    "left" : "normalized = state.normalized;",
    "right" : "normalized = state.normalized;",
    "info" : "ExpressionStatement[52900-52930]:ExpressionStatement[52964-52994]"
  }, {
    "left" : "@VisibleForTesting",
    "right" : "@VisibleForTesting",
    "info" : "MarkerAnnotation[52938-52956]:MarkerAnnotation[53002-53020]"
  }, {
    "left" : "List<CompilerInput>",
    "right" : "List<CompilerInput>",
    "info" : "ParameterizedType[52959-52978]:ParameterizedType[53023-53042]"
  }, {
    "left" : "getInputsForTesting",
    "right" : "getInputsForTesting",
    "info" : "SimpleName[52979-52998]:SimpleName[53043-53062]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53001-53025]:Block[53065-53089]"
  }, {
    "left" : "return inputs;",
    "right" : "return inputs;",
    "info" : "ReturnStatement[53007-53021]:ReturnStatement[53071-53085]"
  }, {
    "left" : "@VisibleForTesting",
    "right" : "@VisibleForTesting",
    "info" : "MarkerAnnotation[53029-53047]:MarkerAnnotation[53093-53111]"
  }, {
    "left" : "List<CompilerInput>",
    "right" : "List<CompilerInput>",
    "info" : "ParameterizedType[53050-53069]:ParameterizedType[53114-53133]"
  }, {
    "left" : "getExternsForTesting",
    "right" : "getExternsForTesting",
    "info" : "SimpleName[53070-53090]:SimpleName[53134-53154]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53093-53118]:Block[53157-53182]"
  }, {
    "left" : "return externs;",
    "right" : "return externs;",
    "info" : "ReturnStatement[53099-53114]:ReturnStatement[53163-53178]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[53122-53131]:MarkerAnnotation[53186-53195]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[53134-53141]:PrimitiveType[53198-53205]"
  }, {
    "left" : "hasRegExpGlobalReferences",
    "right" : "hasRegExpGlobalReferences",
    "info" : "SimpleName[53142-53167]:SimpleName[53206-53231]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53170-53213]:Block[53234-53277]"
  }, {
    "left" : "return hasRegExpGlobalReferences;",
    "right" : "return hasRegExpGlobalReferences;",
    "info" : "ReturnStatement[53176-53209]:ReturnStatement[53240-53273]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[53217-53226]:MarkerAnnotation[53281-53290]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[53229-53233]:PrimitiveType[53293-53297]"
  }, {
    "left" : "setHasRegExpGlobalReferences",
    "right" : "setHasRegExpGlobalReferences",
    "info" : "SimpleName[53234-53262]:SimpleName[53298-53326]"
  }, {
    "left" : "boolean references",
    "right" : "boolean references",
    "info" : "SingleVariableDeclaration[53263-53281]:SingleVariableDeclaration[53327-53345]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53283-53332]:Block[53347-53396]"
  }, {
    "left" : "hasRegExpGlobalReferences = references;",
    "right" : "hasRegExpGlobalReferences = references;",
    "info" : "ExpressionStatement[53289-53328]:ExpressionStatement[53353-53392]"
  } ]
}