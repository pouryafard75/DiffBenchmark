{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final ImmutableList<String> RESOURCES = ImmutableList.<String>builder().add(\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\",\n        \"<LinearLayout>\",\n        \"<Button android:id=\\\"@+id/button1\\\" \",\n        \"android:layout_toLeftOf=\\\"@id/button2\\\" \",\n        \"android:text=\\\"@string/text\\\" />\",\n        \"<Button android:id=\\\"@+id/button3\\\" \",\n        \"style:attribute=\\\"@style/Buck.Theme\\\" \",\n        \"android:background=\\\"@drawable/some_image\\\" />\",\n        \"<TextView tools:showIn=\\\"@layout/some_layout\\\" android:id=\\\"@id/android:empty\\\" />\",\n        \"</LinearLayout>\")\n        .build();",
      "right" : "private static final ImmutableList<String> RESOURCES = ImmutableList.<String>builder().add(\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\",\n        \"<LinearLayout>\",\n        \"<Button android:id=\\\"@+id/button1\\\" \",\n        \"android:layout_toLeftOf=\\\"@id/button2\\\" \",\n        \"android:text=\\\"@string/text\\\" />\",\n        \"<Button android:id=\\\"@+id/button3\\\" \",\n        \"style:attribute=\\\"@style/Buck.Theme\\\" \",\n        \"android:background=\\\"@drawable/some_image\\\" />\",\n        \"<TextView tools:showIn=\\\"@layout/some_layout\\\" android:id=\\\"@id/android:empty\\\" />\",\n        \"</LinearLayout>\")\n        .build();",
      "info" : "FieldDeclaration[1617-2227]:FieldDeclaration[1617-2227]"
    }, {
      "left" : "private final FakeProjectFilesystem filesystem = new FakeProjectFilesystem();",
      "right" : "private final FakeProjectFilesystem filesystem = new FakeProjectFilesystem();",
      "info" : "FieldDeclaration[2231-2308]:FieldDeclaration[2231-2308]"
    }, {
      "left" : "@Rule\n  public ExpectedException thrown = ExpectedException.none();",
      "right" : "@Rule\n  public ExpectedException thrown = ExpectedException.none();",
      "info" : "FieldDeclaration[2312-2379]:FieldDeclaration[2312-2379]"
    }, {
      "left" : "public void testFindingResourceIdsInXml()\n      throws IOException, XPathExpressionException, ResourceParseException",
      "right" : "public void testFindingResourceIdsInXml()\n      throws IOException, XPathExpressionException, ResourceParseException",
      "info" : "MethodDeclaration[2383-3503]:MethodDeclaration[2383-3503]"
    }, {
      "left" : "public void testInvalidResourceType() throws IOException, ResourceParseException",
      "right" : "public void testInvalidResourceType() throws IOException, ResourceParseException",
      "info" : "MethodDeclaration[6709-7323]:MethodDeclaration[6709-7323]"
    }, {
      "left" : "public void testInvalidItemResource() throws IOException, ResourceParseException",
      "right" : "public void testInvalidItemResource() throws IOException, ResourceParseException",
      "info" : "MethodDeclaration[7327-7925]:MethodDeclaration[7327-7925]"
    }, {
      "left" : "public void testInvalidDefinition() throws XPathExpressionException, IOException",
      "right" : "public void testInvalidDefinition() throws XPathExpressionException, IOException",
      "info" : "MethodDeclaration[7929-8857]:MethodDeclaration[7929-8857]"
    }, {
      "left" : "public void testInvalidReference() throws IOException, XPathExpressionException",
      "right" : "public void testInvalidReference() throws IOException, XPathExpressionException",
      "info" : "MethodDeclaration[8861-9808]:MethodDeclaration[8861-9808]"
    }, {
      "left" : "public void testMissingNameAttribute() throws IOException, ResourceParseException",
      "right" : "public void testMissingNameAttribute() throws IOException, ResourceParseException",
      "info" : "MethodDeclaration[9812-10530]:MethodDeclaration[9812-10530]"
    }, {
      "left" : "public void testVerifyReferences()\n      throws IOException, XPathExpressionException, ResourceParseException",
      "right" : "public void testVerifyReferences()\n      throws IOException, XPathExpressionException, ResourceParseException",
      "info" : "MethodDeclaration[10534-11489]:MethodDeclaration[10534-11489]"
    }, {
      "left" : "public void testInvalidNodeId() throws\n      IOException, XPathExpressionException, ResourceParseException",
      "right" : "public void testInvalidNodeId() throws\n      IOException, XPathExpressionException, ResourceParseException",
      "info" : "MethodDeclaration[11493-12313]:MethodDeclaration[11493-12313]"
    }, {
      "left" : "public void testProcessFileNamesInDirectory() throws IOException, ResourceParseException",
      "right" : "public void testProcessFileNamesInDirectory() throws IOException, ResourceParseException",
      "info" : "MethodDeclaration[12317-13816]:MethodDeclaration[12317-13816]"
    } ],
    "mappings" : [
 {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[2383-2388]:MarkerAnnotation[2383-2388]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2391-2397]:Modifier[2391-2397]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2398-2402]:PrimitiveType[2398-2402]"
    }, {
      "left" : "testFindingResourceIdsInXml",
      "right" : "testFindingResourceIdsInXml",
      "info" : "SimpleName[2403-2430]:SimpleName[2403-2430]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[2446-2457]:SimpleType[2446-2457]"
    }, {
      "left" : "XPathExpressionException",
      "right" : "XPathExpressionException",
      "info" : "SimpleType[2459-2483]:SimpleType[2459-2483]"
    }, {
      "left" : "ResourceParseException",
      "right" : "ResourceParseException",
      "info" : "SimpleType[2485-2507]:SimpleType[2485-2507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2508-3503]:Block[2508-3503]"
    }, {
      "left" : "filesystem.writeLinesToPath(RESOURCES, Paths.get(\"resource.xml\"));",
      "right" : "filesystem.writeLinesToPath(RESOURCES, Paths.get(\"resource.xml\"));",
      "info" : "ExpressionStatement[2514-2580]:ExpressionStatement[2514-2580]"
    }, {
      "left" : "MiniAapt aapt = new MiniAapt(Paths.get(\"res\"), Paths.get(\"R.txt\"), ImmutableSet.<Path>of());",
      "right" : "MiniAapt aapt = new MiniAapt(Paths.get(\"res\"), Paths.get(\"R.txt\"), ImmutableSet.<Path>of());",
      "info" : "VariableDeclarationStatement[2586-2678]:VariableDeclarationStatement[2586-2678]"
    }, {
      "left" : "ImmutableSet.Builder<RDotTxtEntry> references = ImmutableSet.builder();",
      "right" : "ImmutableSet.Builder<RDotTxtEntry> references = ImmutableSet.builder();",
      "info" : "VariableDeclarationStatement[2684-2755]:VariableDeclarationStatement[2684-2755]"
    }, {
      "left" : "aapt.processXmlFile(filesystem, Paths.get(\"resource.xml\"), references);",
      "right" : "aapt.processXmlFile(filesystem, Paths.get(\"resource.xml\"), references);",
      "info" : "ExpressionStatement[2760-2831]:ExpressionStatement[2760-2831]"
    }, {
      "left" : "Set<RDotTxtEntry> definitions = aapt.getResourceCollector().getResources();",
      "right" : "Set<RDotTxtEntry> definitions = aapt.getResourceCollector().getResources();",
      "info" : "VariableDeclarationStatement[2837-2912]:VariableDeclarationStatement[2837-2912]"
    }, {
      "left" : "assertEquals(\n        definitions,\n        ImmutableSet.<RDotTxtEntry>of(\n            new FakeRDotTxtEntry(IdType.INT, RType.ID, \"button1\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.ID, \"button3\")));",
      "right" : "assertEquals(\n        definitions,\n        ImmutableSet.<RDotTxtEntry>of(\n            new FakeRDotTxtEntry(IdType.INT, RType.ID, \"button1\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.ID, \"button3\")));",
      "info" : "ExpressionStatement[2918-3127]:ExpressionStatement[2918-3127]"
    }, {
      "left" : "assertEquals(\n        references.build(),\n        ImmutableSet.<RDotTxtEntry>of(\n            new FakeRDotTxtEntry(IdType.INT, RType.DRAWABLE, \"some_image\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.STRING, \"text\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.STYLE, \"Buck_Theme\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.ID, \"button2\")));",
      "right" : "assertEquals(\n        references.build(),\n        ImmutableSet.<RDotTxtEntry>of(\n            new FakeRDotTxtEntry(IdType.INT, RType.DRAWABLE, \"some_image\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.STRING, \"text\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.STYLE, \"Buck_Theme\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.ID, \"button2\")));",
      "info" : "ExpressionStatement[3133-3499]:ExpressionStatement[3133-3499]"
    }, {
      "left" : "@Test(expected = ResourceParseException.class)",
      "right" : "@Test(expected = ResourceParseException.class)",
      "info" : "NormalAnnotation[6709-6755]:NormalAnnotation[6709-6755]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6758-6764]:Modifier[6758-6764]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6765-6769]:PrimitiveType[6765-6769]"
    }, {
      "left" : "testInvalidResourceType",
      "right" : "testInvalidResourceType",
      "info" : "SimpleName[6770-6793]:SimpleName[6770-6793]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6803-6814]:SimpleType[6803-6814]"
    }, {
      "left" : "ResourceParseException",
      "right" : "ResourceParseException",
      "info" : "SimpleType[6816-6838]:SimpleType[6816-6838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6839-7323]:Block[6839-7323]"
    }, {
      "left" : "ImmutableList<String> lines = ImmutableList.<String>builder().add(\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\",\n        \"<resources>\",\n        \"<resourcetype name=\\\"number\\\">100</resourcetype>\",\n        \"</resources>\")\n        .build();",
      "right" : "ImmutableList<String> lines = ImmutableList.<String>builder().add(\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\",\n        \"<resources>\",\n        \"<resourcetype name=\\\"number\\\">100</resourcetype>\",\n        \"</resources>\")\n        .build();",
      "info" : "VariableDeclarationStatement[6845-7090]:VariableDeclarationStatement[6845-7090]"
    }, {
      "left" : "filesystem.writeLinesToPath(lines, Paths.get(\"values.xml\"));",
      "right" : "filesystem.writeLinesToPath(lines, Paths.get(\"values.xml\"));",
      "info" : "ExpressionStatement[7096-7156]:ExpressionStatement[7096-7156]"
    }, {
      "left" : "MiniAapt aapt = new MiniAapt(Paths.get(\"res\"), Paths.get(\"R.txt\"), ImmutableSet.<Path>of());",
      "right" : "MiniAapt aapt = new MiniAapt(Paths.get(\"res\"), Paths.get(\"R.txt\"), ImmutableSet.<Path>of());",
      "info" : "VariableDeclarationStatement[7162-7254]:VariableDeclarationStatement[7162-7254]"
    }, {
      "left" : "aapt.processValuesFile(filesystem, Paths.get(\"values.xml\"));",
      "right" : "aapt.processValuesFile(filesystem, Paths.get(\"values.xml\"));",
      "info" : "ExpressionStatement[7259-7319]:ExpressionStatement[7259-7319]"
    }, {
      "left" : "@Test(expected = ResourceParseException.class)",
      "right" : "@Test(expected = ResourceParseException.class)",
      "info" : "NormalAnnotation[7327-7373]:NormalAnnotation[7327-7373]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7376-7382]:Modifier[7376-7382]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7383-7387]:PrimitiveType[7383-7387]"
    }, {
      "left" : "testInvalidItemResource",
      "right" : "testInvalidItemResource",
      "info" : "SimpleName[7388-7411]:SimpleName[7388-7411]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7421-7432]:SimpleType[7421-7432]"
    }, {
      "left" : "ResourceParseException",
      "right" : "ResourceParseException",
      "info" : "SimpleType[7434-7456]:SimpleType[7434-7456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7457-7925]:Block[7457-7925]"
    }, {
      "left" : "ImmutableList<String> lines = ImmutableList.<String>builder().add(\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\",\n        \"<resources>\",\n        \"<item name=\\\"number\\\">100</item>\",\n        \"</resources>\")\n        .build();",
      "right" : "ImmutableList<String> lines = ImmutableList.<String>builder().add(\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\",\n        \"<resources>\",\n        \"<item name=\\\"number\\\">100</item>\",\n        \"</resources>\")\n        .build();",
      "info" : "VariableDeclarationStatement[7463-7692]:VariableDeclarationStatement[7463-7692]"
    }, {
      "left" : "filesystem.writeLinesToPath(lines, Paths.get(\"values.xml\"));",
      "right" : "filesystem.writeLinesToPath(lines, Paths.get(\"values.xml\"));",
      "info" : "ExpressionStatement[7698-7758]:ExpressionStatement[7698-7758]"
    }, {
      "left" : "MiniAapt aapt = new MiniAapt(Paths.get(\"res\"), Paths.get(\"R.txt\"), ImmutableSet.<Path>of());",
      "right" : "MiniAapt aapt = new MiniAapt(Paths.get(\"res\"), Paths.get(\"R.txt\"), ImmutableSet.<Path>of());",
      "info" : "VariableDeclarationStatement[7764-7856]:VariableDeclarationStatement[7764-7856]"
    }, {
      "left" : "aapt.processValuesFile(filesystem, Paths.get(\"values.xml\"));",
      "right" : "aapt.processValuesFile(filesystem, Paths.get(\"values.xml\"));",
      "info" : "ExpressionStatement[7861-7921]:ExpressionStatement[7861-7921]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[7929-7934]:MarkerAnnotation[7929-7934]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7937-7943]:Modifier[7937-7943]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7944-7948]:PrimitiveType[7944-7948]"
    }, {
      "left" : "testInvalidDefinition",
      "right" : "testInvalidDefinition",
      "info" : "SimpleName[7949-7970]:SimpleName[7949-7970]"
    }, {
      "left" : "XPathExpressionException",
      "right" : "XPathExpressionException",
      "info" : "SimpleType[7980-8004]:SimpleType[7980-8004]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8006-8017]:SimpleType[8006-8017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8018-8857]:Block[8018-8857]"
    }, {
      "left" : "ImmutableList<String> lines = ImmutableList.<String>builder().add(\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\",\n        \"<LinearLayout>\",\n        \"<Button android:id=\\\"@+string/button1\\\" \",\n        \"android:layout_toLeftOf=\\\"@id/button2\\\" \",\n        \"android:text=\\\"@string/text\\\" />\",\n        \"</LinearLayout>\")\n        .build();",
      "right" : "ImmutableList<String> lines = ImmutableList.<String>builder().add(\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\",\n        \"<LinearLayout>\",\n        \"<Button android:id=\\\"@+string/button1\\\" \",\n        \"android:layout_toLeftOf=\\\"@id/button2\\\" \",\n        \"android:text=\\\"@string/text\\\" />\",\n        \"</LinearLayout>\")\n        .build();",
      "info" : "VariableDeclarationStatement[8024-8363]:VariableDeclarationStatement[8024-8363]"
    }, {
      "left" : "Path resource = Paths.get(\"resource.xml\");",
      "right" : "Path resource = Paths.get(\"resource.xml\");",
      "info" : "VariableDeclarationStatement[8369-8411]:VariableDeclarationStatement[8369-8411]"
    }, {
      "left" : "filesystem.writeLinesToPath(lines, resource);",
      "right" : "filesystem.writeLinesToPath(lines, resource);",
      "info" : "ExpressionStatement[8416-8461]:ExpressionStatement[8416-8461]"
    }, {
      "left" : "MiniAapt aapt = new MiniAapt(Paths.get(\"res\"), Paths.get(\"R.txt\"), ImmutableSet.<Path>of());",
      "right" : "MiniAapt aapt = new MiniAapt(Paths.get(\"res\"), Paths.get(\"R.txt\"), ImmutableSet.<Path>of());",
      "info" : "VariableDeclarationStatement[8467-8559]:VariableDeclarationStatement[8467-8559]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8564-8853]:TryStatement[8564-8853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8568-8726]:Block[8568-8726]"
    }, {
      "left" : "aapt.processXmlFile(filesystem, resource, ImmutableSet.<RDotTxtEntry>builder());",
      "right" : "aapt.processXmlFile(filesystem, resource, ImmutableSet.<RDotTxtEntry>builder());",
      "info" : "ExpressionStatement[8576-8656]:ExpressionStatement[8576-8656]"
    }, {
      "left" : "fail(\"MiniAapt should throw parsing '@+string/button1'\");",
      "right" : "fail(\"MiniAapt should throw parsing '@+string/button1'\");",
      "info" : "ExpressionStatement[8663-8720]:ExpressionStatement[8663-8720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8760-8853]:Block[8760-8853]"
    }, {
      "left" : "assertThat(e.getMessage(), containsString(\"Invalid definition of a resource\"));",
      "right" : "assertThat(e.getMessage(), containsString(\"Invalid definition of a resource\"));",
      "info" : "ExpressionStatement[8768-8847]:ExpressionStatement[8768-8847]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[8861-8866]:MarkerAnnotation[8861-8866]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8869-8875]:Modifier[8869-8875]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8876-8880]:PrimitiveType[8876-8880]"
    }, {
      "left" : "testInvalidReference",
      "right" : "testInvalidReference",
      "info" : "SimpleName[8881-8901]:SimpleName[8881-8901]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8911-8922]:SimpleType[8911-8922]"
    }, {
      "left" : "XPathExpressionException",
      "right" : "XPathExpressionException",
      "info" : "SimpleType[8924-8948]:SimpleType[8924-8948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8949-9808]:Block[8949-9808]"
    }, {
      "left" : "ImmutableList<String> lines = ImmutableList.<String>builder().add(\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\",\n        \"<LinearLayout>\",\n        \"<Button android:id=\\\"@+id/button1\\\" \",\n        \"android:layout_toLeftOf=\\\"@someresource/button2\\\" \",\n        \"android:text=\\\"@string/text\\\" />\",\n        \"</LinearLayout>\")\n        .build();",
      "right" : "ImmutableList<String> lines = ImmutableList.<String>builder().add(\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\",\n        \"<LinearLayout>\",\n        \"<Button android:id=\\\"@+id/button1\\\" \",\n        \"android:layout_toLeftOf=\\\"@someresource/button2\\\" \",\n        \"android:text=\\\"@string/text\\\" />\",\n        \"</LinearLayout>\")\n        .build();",
      "info" : "VariableDeclarationStatement[8955-9300]:VariableDeclarationStatement[8955-9300]"
    }, {
      "left" : "Path resource = Paths.get(\"resource.xml\");",
      "right" : "Path resource = Paths.get(\"resource.xml\");",
      "info" : "VariableDeclarationStatement[9306-9348]:VariableDeclarationStatement[9306-9348]"
    }, {
      "left" : "filesystem.writeLinesToPath(lines, resource);",
      "right" : "filesystem.writeLinesToPath(lines, resource);",
      "info" : "ExpressionStatement[9353-9398]:ExpressionStatement[9353-9398]"
    }, {
      "left" : "MiniAapt aapt = new MiniAapt(Paths.get(\"res\"), Paths.get(\"R.txt\"), ImmutableSet.<Path>of());",
      "right" : "MiniAapt aapt = new MiniAapt(Paths.get(\"res\"), Paths.get(\"R.txt\"), ImmutableSet.<Path>of());",
      "info" : "VariableDeclarationStatement[9404-9496]:VariableDeclarationStatement[9404-9496]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9501-9804]:TryStatement[9501-9804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9505-9668]:Block[9505-9668]"
    }, {
      "left" : "aapt.processXmlFile(filesystem, resource, ImmutableSet.<RDotTxtEntry>builder());",
      "right" : "aapt.processXmlFile(filesystem, resource, ImmutableSet.<RDotTxtEntry>builder());",
      "info" : "ExpressionStatement[9513-9593]:ExpressionStatement[9513-9593]"
    }, {
      "left" : "fail(\"MiniAapt should throw parsing '@someresource/button2'\");",
      "right" : "fail(\"MiniAapt should throw parsing '@someresource/button2'\");",
      "info" : "ExpressionStatement[9600-9662]:ExpressionStatement[9600-9662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9702-9804]:Block[9702-9804]"
    }, {
      "left" : "assertThat(e.getMessage(), containsString(\"Invalid reference '@someresource/button2'\"));",
      "right" : "assertThat(e.getMessage(), containsString(\"Invalid reference '@someresource/button2'\"));",
      "info" : "ExpressionStatement[9710-9798]:ExpressionStatement[9710-9798]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[9812-9817]:MarkerAnnotation[9812-9817]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9820-9826]:Modifier[9820-9826]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9827-9831]:PrimitiveType[9827-9831]"
    }, {
      "left" : "testMissingNameAttribute",
      "right" : "testMissingNameAttribute",
      "info" : "SimpleName[9832-9856]:SimpleName[9832-9856]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[9866-9877]:SimpleType[9866-9877]"
    }, {
      "left" : "ResourceParseException",
      "right" : "ResourceParseException",
      "info" : "SimpleType[9879-9901]:SimpleType[9879-9901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9902-10530]:Block[9902-10530]"
    }, {
      "left" : "thrown.expect(ResourceParseException.class);",
      "right" : "thrown.expect(ResourceParseException.class);",
      "info" : "ExpressionStatement[9908-9952]:ExpressionStatement[9908-9952]"
    }, {
      "left" : "thrown.expectMessage(\"Error: expected a 'name' attribute in node 'string' with value 'Howdy!'\");",
      "right" : "thrown.expectMessage(\"Error: expected a 'name' attribute in node 'string' with value 'Howdy!'\");",
      "info" : "ExpressionStatement[9957-10053]:ExpressionStatement[9957-10053]"
    }, {
      "left" : "ImmutableList<String> lines = ImmutableList.<String>builder().add(\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\",\n        \"<resources>\",\n        \"<string notname=\\\"hello\\\">Howdy!</string>\",\n        \"</resources>\")\n        .build();",
      "right" : "ImmutableList<String> lines = ImmutableList.<String>builder().add(\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\",\n        \"<resources>\",\n        \"<string notname=\\\"hello\\\">Howdy!</string>\",\n        \"</resources>\")\n        .build();",
      "info" : "VariableDeclarationStatement[10059-10297]:VariableDeclarationStatement[10059-10297]"
    }, {
      "left" : "filesystem.writeLinesToPath(lines, Paths.get(\"values.xml\"));",
      "right" : "filesystem.writeLinesToPath(lines, Paths.get(\"values.xml\"));",
      "info" : "ExpressionStatement[10303-10363]:ExpressionStatement[10303-10363]"
    }, {
      "left" : "MiniAapt aapt = new MiniAapt(Paths.get(\"res\"), Paths.get(\"R.txt\"), ImmutableSet.<Path>of());",
      "right" : "MiniAapt aapt = new MiniAapt(Paths.get(\"res\"), Paths.get(\"R.txt\"), ImmutableSet.<Path>of());",
      "info" : "VariableDeclarationStatement[10369-10461]:VariableDeclarationStatement[10369-10461]"
    }, {
      "left" : "aapt.processValuesFile(filesystem, Paths.get(\"values.xml\"));",
      "right" : "aapt.processValuesFile(filesystem, Paths.get(\"values.xml\"));",
      "info" : "ExpressionStatement[10466-10526]:ExpressionStatement[10466-10526]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[10534-10539]:MarkerAnnotation[10534-10539]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10542-10548]:Modifier[10542-10548]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10549-10553]:PrimitiveType[10549-10553]"
    }, {
      "left" : "testVerifyReferences",
      "right" : "testVerifyReferences",
      "info" : "SimpleName[10554-10574]:SimpleName[10554-10574]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[10590-10601]:SimpleType[10590-10601]"
    }, {
      "left" : "XPathExpressionException",
      "right" : "XPathExpressionException",
      "info" : "SimpleType[10603-10627]:SimpleType[10603-10627]"
    }, {
      "left" : "ResourceParseException",
      "right" : "ResourceParseException",
      "info" : "SimpleType[10629-10651]:SimpleType[10629-10651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10652-11489]:Block[10652-11489]"
    }, {
      "left" : "filesystem.writeLinesToPath(RESOURCES, Paths.get(\"resource.xml\"));",
      "right" : "filesystem.writeLinesToPath(RESOURCES, Paths.get(\"resource.xml\"));",
      "info" : "ExpressionStatement[10658-10724]:ExpressionStatement[10658-10724]"
    }, {
      "left" : "ImmutableList<String> rDotTxt = ImmutableList.of(\n        \"int string text 0x07010001\",\n        \"int style Buck_Theme 0x07020001\",\n        \"int id button2 0x07030001\");",
      "right" : "ImmutableList<String> rDotTxt = ImmutableList.of(\n        \"int string text 0x07010001\",\n        \"int style Buck_Theme 0x07020001\",\n        \"int id button2 0x07030001\");",
      "info" : "VariableDeclarationStatement[10730-10898]:VariableDeclarationStatement[10730-10898]"
    }, {
      "left" : "Path depRTxt = Paths.get(\"dep/R.txt\");",
      "right" : "Path depRTxt = Paths.get(\"dep/R.txt\");",
      "info" : "VariableDeclarationStatement[10904-10942]:VariableDeclarationStatement[10904-10942]"
    }, {
      "left" : "filesystem.writeLinesToPath(rDotTxt, depRTxt);",
      "right" : "filesystem.writeLinesToPath(rDotTxt, depRTxt);",
      "info" : "ExpressionStatement[10947-10993]:ExpressionStatement[10947-10993]"
    }, {
      "left" : "MiniAapt aapt = new MiniAapt(Paths.get(\"res\"), Paths.get(\"R.txt\"), ImmutableSet.of(depRTxt));",
      "right" : "MiniAapt aapt = new MiniAapt(Paths.get(\"res\"), Paths.get(\"R.txt\"), ImmutableSet.of(depRTxt));",
      "info" : "VariableDeclarationStatement[10999-11092]:VariableDeclarationStatement[10999-11092]"
    }, {
      "left" : "ImmutableSet.Builder<RDotTxtEntry> references = ImmutableSet.builder();",
      "right" : "ImmutableSet.Builder<RDotTxtEntry> references = ImmutableSet.builder();",
      "info" : "VariableDeclarationStatement[11097-11168]:VariableDeclarationStatement[11097-11168]"
    }, {
      "left" : "aapt.processXmlFile(filesystem, Paths.get(\"resource.xml\"), references);",
      "right" : "aapt.processXmlFile(filesystem, Paths.get(\"resource.xml\"), references);",
      "info" : "ExpressionStatement[11173-11244]:ExpressionStatement[11173-11244]"
    }, {
      "left" : "Set<RDotTxtEntry> missing = aapt.verifyReferences(filesystem, references.build());",
      "right" : "Set<RDotTxtEntry> missing = aapt.verifyReferences(filesystem, references.build());",
      "info" : "VariableDeclarationStatement[11250-11332]:VariableDeclarationStatement[11250-11332]"
    }, {
      "left" : "assertEquals(\n        ImmutableSet.<RDotTxtEntry>of(\n            new FakeRDotTxtEntry(IdType.INT, RType.DRAWABLE, \"some_image\")),\n        missing);",
      "right" : "assertEquals(\n        ImmutableSet.<RDotTxtEntry>of(\n            new FakeRDotTxtEntry(IdType.INT, RType.DRAWABLE, \"some_image\")),\n        missing);",
      "info" : "ExpressionStatement[11338-11485]:ExpressionStatement[11338-11485]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[11493-11498]:MarkerAnnotation[11493-11498]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11501-11507]:Modifier[11501-11507]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11508-11512]:PrimitiveType[11508-11512]"
    }, {
      "left" : "testInvalidNodeId",
      "right" : "testInvalidNodeId",
      "info" : "SimpleName[11513-11530]:SimpleName[11513-11530]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11546-11557]:SimpleType[11546-11557]"
    }, {
      "left" : "XPathExpressionException",
      "right" : "XPathExpressionException",
      "info" : "SimpleType[11559-11583]:SimpleType[11559-11583]"
    }, {
      "left" : "ResourceParseException",
      "right" : "ResourceParseException",
      "info" : "SimpleType[11585-11607]:SimpleType[11585-11607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11608-12313]:Block[11608-12313]"
    }, {
      "left" : "thrown.expect(ResourceParseException.class);",
      "right" : "thrown.expect(ResourceParseException.class);",
      "info" : "ExpressionStatement[11614-11658]:ExpressionStatement[11614-11658]"
    }, {
      "left" : "thrown.expectMessage(\"Invalid definition of a resource: '@button2'\");",
      "right" : "thrown.expectMessage(\"Invalid definition of a resource: '@button2'\");",
      "info" : "ExpressionStatement[11663-11732]:ExpressionStatement[11663-11732]"
    }, {
      "left" : "ImmutableList<String> lines = ImmutableList.<String>builder().add(\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\",\n        \"<LinearLayout>\",\n        \"<Button android:id=\\\"@+id/button1\\\" \",\n        \"android:layout_toLeftOf=\\\"@button2\\\" />\",\n        \"</LinearLayout>\")\n        .build();",
      "right" : "ImmutableList<String> lines = ImmutableList.<String>builder().add(\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\",\n        \"<LinearLayout>\",\n        \"<Button android:id=\\\"@+id/button1\\\" \",\n        \"android:layout_toLeftOf=\\\"@button2\\\" />\",\n        \"</LinearLayout>\")\n        .build();",
      "info" : "VariableDeclarationStatement[11738-12028]:VariableDeclarationStatement[11738-12028]"
    }, {
      "left" : "Path resource = Paths.get(\"resource.xml\");",
      "right" : "Path resource = Paths.get(\"resource.xml\");",
      "info" : "VariableDeclarationStatement[12034-12076]:VariableDeclarationStatement[12034-12076]"
    }, {
      "left" : "filesystem.writeLinesToPath(lines, resource);",
      "right" : "filesystem.writeLinesToPath(lines, resource);",
      "info" : "ExpressionStatement[12081-12126]:ExpressionStatement[12081-12126]"
    }, {
      "left" : "MiniAapt aapt = new MiniAapt(Paths.get(\"res\"), Paths.get(\"R.txt\"), ImmutableSet.<Path>of());",
      "right" : "MiniAapt aapt = new MiniAapt(Paths.get(\"res\"), Paths.get(\"R.txt\"), ImmutableSet.<Path>of());",
      "info" : "VariableDeclarationStatement[12132-12224]:VariableDeclarationStatement[12132-12224]"
    }, {
      "left" : "aapt.processXmlFile(filesystem, resource, ImmutableSet.<RDotTxtEntry>builder());",
      "right" : "aapt.processXmlFile(filesystem, resource, ImmutableSet.<RDotTxtEntry>builder());",
      "info" : "ExpressionStatement[12229-12309]:ExpressionStatement[12229-12309]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[12317-12322]:MarkerAnnotation[12317-12322]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12325-12331]:Modifier[12325-12331]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12332-12336]:PrimitiveType[12332-12336]"
    }, {
      "left" : "testProcessFileNamesInDirectory",
      "right" : "testProcessFileNamesInDirectory",
      "info" : "SimpleName[12337-12368]:SimpleName[12337-12368]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12378-12389]:SimpleType[12378-12389]"
    }, {
      "left" : "ResourceParseException",
      "right" : "ResourceParseException",
      "info" : "SimpleType[12391-12413]:SimpleType[12391-12413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12414-13816]:Block[12414-13816]"
    }, {
      "left" : "filesystem.touch(Paths.get(\"res/drawable/icon.png\"));",
      "right" : "filesystem.touch(Paths.get(\"res/drawable/icon.png\"));",
      "info" : "ExpressionStatement[12420-12473]:ExpressionStatement[12420-12473]"
    }, {
      "left" : "filesystem.touch(Paths.get(\"res/drawable/another_icon.png.orig\"));",
      "right" : "filesystem.touch(Paths.get(\"res/drawable/another_icon.png.orig\"));",
      "info" : "ExpressionStatement[12478-12544]:ExpressionStatement[12478-12544]"
    }, {
      "left" : "filesystem.touch(Paths.get(\"res/drawable-ldpi/nine_patch.9.png\"));",
      "right" : "filesystem.touch(Paths.get(\"res/drawable-ldpi/nine_patch.9.png\"));",
      "info" : "ExpressionStatement[12549-12615]:ExpressionStatement[12549-12615]"
    }, {
      "left" : "filesystem.touch(Paths.get(\"res/drawable-ldpi/.DS_Store\"));",
      "right" : "filesystem.touch(Paths.get(\"res/drawable-ldpi/.DS_Store\"));",
      "info" : "ExpressionStatement[12620-12679]:ExpressionStatement[12620-12679]"
    }, {
      "left" : "filesystem.touch(Paths.get(\"res/transition-v19/some_transition.xml\"));",
      "right" : "filesystem.touch(Paths.get(\"res/transition-v19/some_transition.xml\"));",
      "info" : "ExpressionStatement[12684-12754]:ExpressionStatement[12684-12754]"
    }, {
      "left" : "filesystem.writeContentsToPath(\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\" +\n            \"<resources>\" +\n            \"<bool name=\\\"v\\\">false</bool>\" +\n            \"</resources>\",\n        Paths.get(\"res/values/value.xml~\"));",
      "right" : "filesystem.writeContentsToPath(\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\" +\n            \"<resources>\" +\n            \"<bool name=\\\"v\\\">false</bool>\" +\n            \"</resources>\",\n        Paths.get(\"res/values/value.xml~\"));",
      "info" : "ExpressionStatement[12759-12992]:ExpressionStatement[12759-12992]"
    }, {
      "left" : "MiniAapt aapt = new MiniAapt(Paths.get(\"res\"), Paths.get(\"R.txt\"), ImmutableSet.<Path>of());",
      "right" : "MiniAapt aapt = new MiniAapt(Paths.get(\"res\"), Paths.get(\"R.txt\"), ImmutableSet.<Path>of());",
      "info" : "VariableDeclarationStatement[12998-13090]:VariableDeclarationStatement[12998-13090]"
    }, {
      "left" : "aapt.processFileNamesInDirectory(filesystem, Paths.get(\"res/drawable\"));",
      "right" : "aapt.processFileNamesInDirectory(filesystem, Paths.get(\"res/drawable\"));",
      "info" : "ExpressionStatement[13095-13167]:ExpressionStatement[13095-13167]"
    }, {
      "left" : "aapt.processFileNamesInDirectory(filesystem, Paths.get(\"res/drawable-ldpi\"));",
      "right" : "aapt.processFileNamesInDirectory(filesystem, Paths.get(\"res/drawable-ldpi\"));",
      "info" : "ExpressionStatement[13172-13249]:ExpressionStatement[13172-13249]"
    }, {
      "left" : "aapt.processFileNamesInDirectory(filesystem, Paths.get(\"res/transition-v19\"));",
      "right" : "aapt.processFileNamesInDirectory(filesystem, Paths.get(\"res/transition-v19\"));",
      "info" : "ExpressionStatement[13254-13332]:ExpressionStatement[13254-13332]"
    }, {
      "left" : "aapt.processValues(\n        filesystem,\n        new BuckEventBus(new FakeClock(0), new BuildId(\"\")),\n        Paths.get(\"res/values\"));",
      "right" : "aapt.processValues(\n        filesystem,\n        new BuckEventBus(new FakeClock(0), new BuildId(\"\")),\n        Paths.get(\"res/values\"));",
      "info" : "ExpressionStatement[13337-13471]:ExpressionStatement[13337-13471]"
    }, {
      "left" : "assertEquals(\n        ImmutableSet.<RDotTxtEntry>of(\n            new FakeRDotTxtEntry(IdType.INT, RType.DRAWABLE, \"icon\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.DRAWABLE, \"nine_patch\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.TRANSITION, \"some_transition\")),\n        aapt.getResourceCollector().getResources());",
      "right" : "assertEquals(\n        ImmutableSet.<RDotTxtEntry>of(\n            new FakeRDotTxtEntry(IdType.INT, RType.DRAWABLE, \"icon\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.DRAWABLE, \"nine_patch\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.TRANSITION, \"some_transition\")),\n        aapt.getResourceCollector().getResources());",
      "info" : "ExpressionStatement[13477-13812]:ExpressionStatement[13477-13812]"
    } ]
  },
  "interFileMappings" : { }
}